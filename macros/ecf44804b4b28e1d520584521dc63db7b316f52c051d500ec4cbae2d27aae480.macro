Attribute VB_Name = "CustCheck"
'H|fffd|r skall funktioner fr|fffd|n IMPCheckMain flyttas |fffd|ver

Sub CheckPara2(para1 As Paragraph)
    Dim strLegalStyle As String
    Dim aCountList As Long
    Dim strListPref As String
    Dim intOrder As Long
    Dim strErr As String
    Dim strLegalText As String
    Dim bOk As Boolean
    Dim intCountStops As Long
    Dim intCountTables As Long
    Dim intDiffSpace As Long
    
        If (cintCheckCol = 4) Then '  2003-09-09
            'Till|fffd|ten styckemall?
            bOk = False
            strLegalStyle = GetParaStyleAsLegal(para1)
            If (IsOkStyle(strLegalStyle)) Then
                bOk = True
            Else
                If (IsNormalInTable(para1)) Then bOk = True
            End If
            
            If (bOk = False) Then
                cstrCheckFel = "Ej till|fffd|ten formatmall '" & GetParaStyleAsLegal(para1, True) & "'"
                cstrCheckForslag1 = "Skribenten ers|fffd|tter med giltig formatmall"
                 cbCheckButtonChange = False
                   
                Dim strArrayProposeName(20) As String
                Dim intNrOfPropesedNames As Long
                
                intNrOfPropesedNames = getNewTemplateNameMapToOldName(para1.Style, strArrayProposeName)
                For i = 0 To intNrOfPropesedNames - 1
                    Select Case i
                        Case 0
                            cstrCheckForslag2 = "Ers|fffd|tt med formatmallen " & strArrayProposeName(0)
                        Case 1
                            cstrCheckForslag3 = "Ers|fffd|tt med formatmallen " & strArrayProposeName(1)
                        Case 2
                            cstrCheckForslag4 = "Ers|fffd|tt med formatmallen " & strArrayProposeName(2)
                        Case 3
                            cstrCheckForslag5 = "Ers|fffd|tt med formatmallen " & strArrayProposeName(3)
                    End Select
                    cbCheckButtonChange = True
                Next i
                cintCheckErrIdx = 1
                Call MarkPara(para1)
            End If
        End If
        
        If (cintCheckCol = 5) Then
            'Autonumrerad lista
            If (IsAutoNumreradLista(para1)) Then
                cstrCheckFel = "Autonumrerad lista ej till|fffd|ten."
                cstrCheckForslag1 = "Skribenten tar bort autonumreringen och markerar r|fffd|tt formatmall f|fffd|r lista"
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
                Call MarkPara(para1)
            End If
        End If
        
        If (cintCheckCol = 6) Then
            'Alla rader med mallen lista, skall ha tecken + tabb, dock ej microsofts
            
            If (IsListaMall(GetParaStyleAsLegal(para1))) Then
                strListPref = GetListPrefix(para1, intOrder)
                If (intOrder < 0) Then 'Inget riktigt tabbtecken eller prefix
                    cstrCheckFel = "Formatmall f|fffd|r lista anv|fffd|nds, men inget listtecken finns."
                    cstrCheckForslag1 = "Skribenten |fffd|ndrar till r|fffd|tt formatmall"
                    cstrCheckForslag2 = "Skribenten |fffd|ndrar listans numrering"
                    cstrCheckForslag3 = "Skribenten l|fffd|gger till tabbtecken efter listtecknet"
                    cstrCheckForslag4 = "Ignorera, det |fffd|r en indragen text."
                    cbCheckButtonChange = False
                    cintCheckErrIdx = 1
                    Call MarkPara(para1)
                End If
            End If
        End If
        If (cintCheckCol = 7) Then
            '|fffd|ndringsmarkering skall st|fffd|mma med mallnamnet
            Dim bHasChangeBars As Boolean
            Dim bHasAndringMall As Boolean
            
            '|fffd|ndringsmarkering
            bHasChangeBars = False
            If (HasLeftRightBorder(para1) = True) Then bHasChangeBars = True
            
            'Andringsmall
            bHasAndringMall = GetAndring(GetParaStyleAsLegal(para1))
            
            'Tabell s|fffd| ingen koll
            If (para1.Range.Tables.Count > 0) Then bHasChangeBars = bHasAndringMall
            
            'J|fffd|mf|fffd|r
            If (bHasChangeBars <> bHasAndringMall) Then
                'cstrCheckFel = "|fffd|ndringsmarkering st|fffd|mmer ej med styckemallen"
                If (bHasChangeBars) Then
                    cstrCheckFel = "|fffd|ndringsmarkering men ingen mall f|fffd|r detta"
                     cstrCheckForslag1 = "Skribenten infogar |fffd|ndring med funktionen |fffd|ndring"
                    'cstrCheckForslag1 = "Skribenten tar bort |fffd|ndringsmarkeringen"
                    'cstrCheckForslag2 = "Skribenten v|fffd|ljer styckemall med |fffd|ndring"
                Else
                    cstrCheckFel = "Mall f|fffd|r |fffd|ndring men, ingen markering"
                    cstrCheckForslag1 = "Skribenten infogar |fffd|ndring med funktionen |fffd|ndring"
                    'cstrCheckForslag2 = "Skribenten v|fffd|ljer styckemall utan |fffd|ndring"
                End If
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
                Call MarkPara(para1)
            End If
        End If
        
        If (cintCheckCol = 8) Then
            'Allm|fffd|nt r|fffd|d ledtext
            If (IsAllmantRadStart(GetParaStyleAsLegal(para1))) Then
                strLegalText = GetLegalName(para1.Range.text)
                bOk = False
                If (HasString(strLegalText, GetLegalName(cStrSMallAllmRad_Start_Text))) Then bOk = True
                'If (HasString(strLegalText, GetLegalName("R|fffd|d"))) Then bOk = True
                If (bOk = False) Then
                    cstrCheckFel = "Rubrik f|fffd|r allm|fffd|nt r|fffd|d, men ingen text '" & cStrSMallAllmRad_Start_Text & "'"
                    cstrCheckForslag1 = "Skribenten infogar texten '" & cStrSMallAllmRad_Start_Text & "'"
                    cstrCheckForslag2 = "Skribenten |fffd|ndrar till annat stycke"
                    cbCheckButtonChange = False
                    cintCheckErrIdx = 1
                    Call MarkPara(para1)
                End If
            End If
        End If
        
        If (cintCheckCol = 999) Then
            'Inga paragrafer i allm|fffd|nt r|fffd|d
            If (IsJurParagrafMall(GetParaStyleAsLegal(para1))) Then
                 If (IsAllmRadMall(GetParaStyleAsLegal(para1))) Then
                     cstrCheckFel = "Paragraftecken |fffd|r inte till|fffd|tet i allm|fffd|nt r|fffd|d"
                     cstrCheckForslag1 = "Ta bort paragraftecknet och byt formatmall"
                     cbCheckButtonChange = False
                     cintCheckErrIdx = 1
                     Call MarkPara(para1)
                End If
            End If
        End If
        If (cintCheckCol = 10) Then
            'Finns paragraftecken och om paragrafmall, exakt skrivs|fffd|tt?
            If (IsJurParagrafMall(GetParaStyleAsLegal(para1)) = False) Then
                 If (HasRightParagrafFormat(para1, strErr)) Then
                     cstrCheckFel = "M|fffd|jlig paragrafnumrering uppt|fffd|ckt"
                     cstrCheckForslag1 = "Skribenten |fffd|ndrar paragrafnumreringen"
                     cstrCheckForslag2 = "Skribenten |fffd|ndrar formatmallen"
                     cbCheckButtonChange = False
                     cintCheckErrIdx = 1
                     Call MarkPara(para1)
                End If
            End If
        End If
        
        If (cintCheckCol = 11) Then
            'Font
            If (MallHasOkFont(para1) = False) Then
                cstrCheckFel = "Fonten |fffd|r inte giltig enligt formatmallen"
                cstrCheckForslag1 = "Ers|fffd|tt med giltig font"
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
                Call MarkPara(para1)
            End If
        End If
   
        If (cintCheckCol = 12) Then ' symboler Paranteser
            Dim strRangeText As String
            strRangeText = para1.Range.text
            bOk = True
            If (HasMoreLeftParenteses(strRangeText)) Then bOk = False
            If (IsListaMall(GetParaStyleAsLegal(para1))) Then
                bOk = GetBalanceListParanteses(strRangeText)
            End If
            If (bOk = False) Then
            'If (1 = 2) Then
               cstrCheckFel = "Felaktig symbol eller parentes"
               cstrCheckForslag1 = "Skribenten infogar symbol p|fffd| r|fffd|tt s|fffd|tt."
               cstrCheckForslag2 = "Skribenten |fffd|ndrar manuellt parenteserna"
               cbCheckButtonChange = False
               cintCheckErrIdx = 1
               Call MarkPara(para1)
               Call MarkOddParentes(para1)
            End If
        End If
        
        If (cintCheckCol = 13) Then
            'Tabbtecken
            If (HasString(para1.Range.text, Chr(9)) = True) Then
                Dim bAllowTab As Boolean
                bAllowTab = False
                strLegalStyle = GetParaStyleAsLegal(para1)
                
                If (IsAllowedWithTab(strLegalStyle)) Then bAllowTab = True
                If (ImpAsc(ImpMid(para1.Range.text, 1, 1)) = 150) Then bAllowTab = True
                
                If (bAllowTab = False) Then
                    cstrCheckFel = "Hittat ett tabbtecken"
                    cstrCheckForslag1 = "Skribenten g|fffd|r om till tabell eller lista"
                    cstrCheckForslag2 = "Skribenten tar bort det on|fffd|diga tabbtecknet"
                    cbCheckButtonChange = False
                    cintCheckErrIdx = 1
                    Call MarkPara(para1)
                End If
            End If
        End If
   
        If (cintCheckCol = 14) Then
        'Max ett tabbstopp
            intCountStops = GetCustTabStopPosMM(para1, 0)
            If ((intCountStops > 1) And (CustMallarMain.GetListLevelFromMallStyle(IMPFunction.GetParaStyleAsLegal(para1)) = 0)) Then
                cstrCheckFel = "Hittat " & IntToStr(intCountStops) & " tabbstopp."
                cstrCheckForslag1 = "Skribenten |fffd|ndrar till max ett tabbstop"
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
                Call MarkPara(para1)
            End If
        End If
        
        If (cintCheckCol = 1599) Then
        'Kontranamn skall f|fffd|ljas av kontraorganisation
            strLegalStyle = GetParaStyleAsLegal(para1)
            If (GetLegalUtanAndring(strLegalStyle) = GetLegalUtanAndring(CustMallarMain.cStrSMallKontra_Namn)) Then
                If (CheckKontraPar(para1, 1) = False) Then
                    cstrCheckFel = CustMallarMain.cStrSMallKontra_Namn & " skall f|fffd|ljas av " & CustMallarMain.cStrSMallKontra_Org
                    cstrCheckForslag1 = "|fffd|ndra formella uppgifter i menyn BFS Formatmallar"
                    cstrCheckForslag2 = "Denna f|fffd|rekomst |fffd|r ett godk|fffd|nt undantag"
                    cbCheckButtonChange = False
                    cintCheckErrIdx = 1
                    Call MarkPara(para1)
                End If
            End If
        End If
        
        
        If (cintCheckCol = 16) Then
        'Kontraorg skall ha kontranamn innan
            strLegalStyle = GetParaStyleAsLegal(para1)
            If (GetLegalUtanAndring(strLegalStyle) = GetLegalUtanAndring(CustMallarMain.cStrSMallKontra_Org)) Then
                If (CheckKontraPar(para1, 2) = False) Then
                    cstrCheckFel = CustMallarMain.cStrSMallKontra_Org & " skall f|fffd|reg|fffd|s av " & CustMallarMain.cStrSMallKontra_Namn
                    cstrCheckForslag1 = "|fffd|ndra formella uppgifter i menyn BFS Formatmallar"
                    cbCheckButtonChange = False
                    cintCheckErrIdx = 1
                    Call MarkPara(para1)
                End If
            End If
        End If
        If (cintCheckCol = 17) Then
            intDiffSpace = GetSpaceBeforeIfNeedChange(para1)
            If (intDiffSpace >= 0) Then
                cstrCheckFel = "Stycket " & GetParaStyleAsLegal(para1, True) & " skall h|fffd|r ha " & IntToStr(intDiffSpace) & "pt i avst|fffd|nd f|fffd|re"
                cstrCheckForslag1 = "Skribenten |fffd|ndrar avst|fffd|nd f|fffd|re i stycket till " & IntToStr(intDiffSpace) & "pt"
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
                Call MarkPara(para1)
            End If
        End If
        If (cintCheckCol = 18) Then
            'Ej formatmall f|fffd|r tabell utanf|fffd|r tabell
            If (IsTableformatOutsideTable(para1)) Then
                cstrCheckFel = "Formatmallen " & GetParaStyleAsLegal(para1, True) & " f|fffd|r endast anv|fffd|ndas i tabell"
                cstrCheckForslag1 = "|fffd|ndra formatmall"
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
                Call MarkPara(para1)
            End If
        End If
        If (cintCheckCol = 19) Then
            'Ej formatmall f|fffd|r tabell utanf|fffd|r tabell
            strLegalStyle = GetParaStyleAsLegal(para1)
            If (strLegalStyle = GetLegalName(CustMallarMain.cStrSMallBilaga_Rubrik)) Then
                If (CheckAlign(para1, "right") = False) Then
                    cstrCheckFel = "Formatmallen " & GetParaStyleAsLegal(para1, True) & " skall vara h|fffd|gerjusterad"
                    cstrCheckForslag1 = "|fffd|ndra justering"
                    cbCheckButtonChange = False
                    cintCheckErrIdx = 1
                    Call MarkPara(para1)
                End If
            End If
        End If
        If (cintCheckCol = 20) Then
            'Vissa rubriker ska ha tomrad innan
'           'Allt bort 2017-04-15 av BoLenn d|fffd| formatmallen ers|fffd|tter radbrytet
'            strLegalStyle = GetParaStyleAsLegal(para1)
'            If (IsEmptyRowBeforeMall(strLegalStyle)) Then
'                If (CustInsert.IsEmptyRowBeforePara(para1) = False) Then
'                    cstrCheckFel = "En tomrad ska finnas f|fffd|re formatmallen " & GetParaStyleAsLegal(para1, True) & "."
'                    cstrCheckForslag1 = "Infoga tomrad"
'                    cbCheckButtonChange = False
'                    cintCheckErrIdx = 1
'                    Call MarkPara(para1)
'                End If
'            End If
        End If
        If (cintCheckCol = 21) Then
            'Vissa rubriker ska ha tomrad innan
            If (ParaHasSymbolFont(para1)) Then
                    cstrCheckFel = "Symbol f|fffd|r inte anv|fffd|ndas som font."
                    cstrCheckForslag1 = "Anv|fffd|nd Times New Roman"
                    cbCheckButtonChange = False
                    cintCheckErrIdx = 1
                    'Call MarkPara(para1)
            End If
        End If
        If (cintCheckCol = 22) Then
            cintCheckCol = 900
        End If

End Sub
Attribute VB_Name = "CustCheckFunc"
'H|fffd|r skall funktioner fr|fffd|n IMPCheckFunc ligga
Function GetSpaceBeforeIfNeedChange(inPara1 As Paragraph) As Long
    'Om avst|fffd|ndet f|fffd|r paragrafen beh|fffd|ver |fffd|ndra v|fffd|rde, annars -1
    Dim intRes As Long
    intRes = -1
    On Error GoTo Err1
        
    Dim prePara As Paragraph
    Set prePara = inPara1.Previous
    
    Dim strStylePre As String
    Dim strStyle As String
    strStylePre = IMPFunction.GetParaStyleAsLegal(prePara)
    strStyle = IMPFunction.GetParaStyleAsLegal(inPara1)
    
    'Vilket avst|fffd|nd skall kombinationen ha
    Dim intCombSpace As Long
    intCombSpace = CustMallarMain.GetCombinationStyleSpace(strStylePre, strStyle)
    If (intCombSpace >= 0) Then
        'Vilket avst|fffd|nd
        Dim intActSpace As Long
        intActSpace = inPara1.Range.ParagraphFormat.SpaceBefore
        If (intCombSpace <> intActSpace) Then
            intRes = intCombSpace
        End If
    End If
    
Err1:
    GetSpaceBeforeIfNeedChange = intRes
End Function
Function IsNormalInTable(inPara1 As Paragraph) As Boolean
    'Om normal, i tabell och ingen text, s|fffd| ok
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    If (inPara1.Range.Tables.Count > 0) Then
        Dim strLegalStyle As String
        If (IMPFunction.EqualLegalName(IMPFunction.GetParaStyleAsLegal(inPara1), "Normal")) Then
            Dim strText As String
            strText = IMPFunction.GetLegalName(inPara1.Range.text)
            If (ImpLen(strText) = 0) Then
                bRes = True
            End If
        End If
    End If
    

Err1:
    IsNormalInTable = bRes
End Function
Function IsTableformatOutsideTable(inPara1 As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    If (inPara1.Range.Tables.Count = 0) Then
        If (CustMallarMain.IsTabellMall(GetParaStyleAsLegal(inPara1))) Then
            bRes = True
        End If
    End If
Err1:
    IsTableformatOutsideTable = bRes
End Function
Function CheckKontraPar(inPara1 As Paragraph, intRow As Long) As Boolean
    'Kontranamn skall f|fffd|ljas av kontraorg
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    Dim paraName As Paragraph
    Dim paraOrg As Paragraph
    If (intRow = 1) Then
        Set paraName = inPara1
        Set paraOrg = inPara1.Next
    ElseIf (intRow = 2) Then
        Set paraName = inPara1.Previous
        Set paraOrg = inPara1
    Else
        GoTo Err1
    End If
    
    If (GetParaStyleAsLegal(paraName) = GetLegalName(CustMallarMain.cStrSMallKontra_Namn)) Then
        If (GetParaStyleAsLegal(paraOrg) = GetLegalName(CustMallarMain.cStrSMallKontra_Org)) Then
            bRes = True
        End If
    End If

Err1:
    CheckKontraPar = bRes
End Function

Function CheckAlign(inPara1 As Paragraph, strAlign As String) As Boolean
    Dim bRes As Boolean
    bRes = True
    On Error GoTo Err1
    If (strAlign = "right") Then
        If (inPara1.Range.ParagraphFormat.Alignment = wdAlignParagraphRight) Then
            bRes = True
        Else
            bRes = False
        End If
    End If
Err1:
    CheckAlign = bRes
End Function
Function CountSemikolonSep(inStrCommaSep As String) As Long
'Returns how many posts in comma-sep string ( 1-count)
'Empty string returns zero
    Dim intRes As Long
    intRes = 1
    On Error GoTo Err1
    
    Dim intPos As Long
    For intPos = 1 To ImpLen(inStrCommaSep)
        If (ImpMid(inStrCommaSep, intPos, 1) = ";") Then
            intRes = intRes + 1
        End If
    Next intPos
    
    If (inStrCommaSep = "") Then intRes = 0 'Empty returns 0
Err1:
    CountSemikolonSep = intRes
    
End Function
Function IndexSemikolonSep(inStrCommaSep As String, intIdx As Long) As String
'Returns the post with index. 1-count
    Dim strRes As String
    strRes = ""

    On Error GoTo Err1
    Dim intActive As Long
    intActive = 1
    Dim intPos As Long
    For intPos = 1 To ImpLen(inStrCommaSep)
        Dim strChar As String
        strChar = ImpMid(inStrCommaSep, intPos, 1)
        If (strChar = ";") Then
            intActive = intActive + 1
        ElseIf (intActive = intIdx) Then
            strRes = strRes & strChar
        End If
    Next intPos

Err1:
    IndexSemikolonSep = strRes

End Function


Attribute VB_Name = "CustExternData"
'191219/Mo - SaveDocumentToPDF: Ny rutin f|fffd|r att spara som PDF

'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:

'Alla s|fffd|kv|fffd|gar avslutas med backslash
Dim mStrCust_path As String 'c:\IMPin\xxx\
Dim mStrCust_serverpath As String 'M:\Gemensamma\xxx\
Public mCurrentParaIndex As Integer
Public mCurrentOutLevel
Public mCurrentFormat
Public mTypeOfError '1=Level, 2=Format
Public mHasErrors As Boolean

Public mStartWithoutMeta As Long  '99 s|fffd| ingen metadialog vid uppstart

Function GetOutLevel(strRubrikName, pOutLevelStr) As WdOutlineLevel
    Dim pOutLevel As WdOutlineLevel
    Dim c 'since char type does not exist in vba, we have to use variant type.
    pOutLevel = wdOutlineLevelBodyText
    
    For i = 1 To Len(strRubrikName)
         c = Mid(strRubrikName, i, 1)
         If (IsNumeric(c)) Then
                If c = "1" Then
                    pOutLevel = wdOutlineLevel1
                    pOutLevelStr = "wdOutlineLevel1"
                    Exit For
                ElseIf c = "2" Then
                    pOutLevel = wdOutlineLevel2
                    pOutLevelStr = "wdOutlineLevel2"
                     Exit For
                ElseIf c = "3" Then
                    pOutLevel = wdOutlineLevel3
                    pOutLevelStr = "wdOutlineLevel3"
                     Exit For
                ElseIf c = "4" Then
                    pOutLevel = wdOutlineLevel4
                    pOutLevelStr = "wdOutlineLevel4"
                     Exit For
                ElseIf c = "5" Then
                    pOutLevel = wdOutlineLevel5
                    pOutLevelStr = "wdOutlineLevel5"
                     Exit For
                ElseIf c = "6" Then
                    pOutLevel = wdOutlineLevel6
                    pOutLevelStr = "wdOutlineLevel6"
                     Exit For
                ElseIf c = "7" Then
                    pOutLevel = wdOutlineLevel7
                    pOutLevelStr = "wdOutlineLevel7"
                     Exit For
                ElseIf c = "8" Then
                    pOutLevel = wdOutlineLevel8
                    pOutLevelStr = "wdOutlineLevel8"
                     Exit For
                ElseIf c = "9" Then
                    pOutLevel = wdOutlineLevel9
                    pOutLevelStr = "wdOutlineLevel9"
                    Exit For
                End If
         End If
    Next
Err1:
    GetOutLevel = pOutLevel
End Function

Public Function StartValidateHeadings() As Boolean
    On Error GoTo Err1
    mCurrentParaIndex = 0
    mHasErrors = False
    InitProcMessage ("Kontrollerar rubriker...")
    StartValidateHeadings = ContinueValidateHeadings
    Exit Function
Err1:
     MsgBox "Ett fel intr|fffd|ffade under validering"
     mHasErrors = True
    CloseProcMessage
    mHasErrors = True
    StartValidateHeadings = True
End Function

Public Function ContinueValidateHeadings()
    Dim collBookMarkFormats As New Collection
   Dim pFixHeading As Boolean
   Dim pOutLevel As WdOutlineLevel
   Dim pOutLevelStr As String
   Dim pErrorStr As String
   Dim pErrorSolution As String
   Dim doc As Document
  Dim para As Paragraph
  Dim paraCount As Integer
  'Dim doc2 As Document
  
  On Error GoTo Err1
  
   pFixHeading = True
   
   'Fyll collection med format p|fffd| rubriker som ska valideras
   'collBookMarkFormats.Add "1", "BFS-AllmR|fffd|d-Rubrik"
    'collBookMarkFormats.Add "2", "BFS-AllmR|fffd|d-Rubrik-|fffd|ndring"
    collBookMarkFormats.Add "1", "BFS-BBR-Rubrik-1"
    collBookMarkFormats.Add "2", "BFS-BBR-Rubrik-1-|fffd|ndring"
    collBookMarkFormats.Add "3", "BFS-BBR-Rubrik-2"
    collBookMarkFormats.Add "4", "BFS-BBR-Rubrik-2-|fffd|ndring"
    collBookMarkFormats.Add "5", "BFS-BBR-Rubrik-3"
    collBookMarkFormats.Add "6", "BFS-BBR-Rubrik-3-|fffd|ndring"
    collBookMarkFormats.Add "7", "BFS-BBR-Rubrik-4"
    collBookMarkFormats.Add "8", "BFS-BBR-Rubrik-4-|fffd|ndring"
    collBookMarkFormats.Add "9", "BFS-BBR-Rubrik-5"
    collBookMarkFormats.Add "10", "BFS-BBR-Rubrik-5-|fffd|ndring"
    collBookMarkFormats.Add "11", "BFS-Rubrik-Mellan-1"
    collBookMarkFormats.Add "12", "BFS-Rubrik-Mellan-1-|fffd|ndring"
    collBookMarkFormats.Add "13", "BFS-Rubrik-Mellan-2"
    collBookMarkFormats.Add "14", "BFS-Rubrik-Mellan-2-|fffd|ndring"
    collBookMarkFormats.Add "15", "BFS-Rubrik-Mellan-3"
    collBookMarkFormats.Add "16", "BFS-Rubrik-Mellan-3-|fffd|ndring"
    collBookMarkFormats.Add "17", "BFS-Rubrik-Mellan-4"
    collBookMarkFormats.Add "18", "BFS-Rubrik-Mellan-4-|fffd|ndring"
    '
    collBookMarkFormats.Add "19", "BFS-Tabell-Rubrik-AllmR|fffd|d"
    collBookMarkFormats.Add "20", "BFS-Tabell-Rubrik-AllmR|fffd|d-|fffd|ndring"
    collBookMarkFormats.Add "21", "BFS-Tabell-Rubrik-F|fffd|reskrift"
    collBookMarkFormats.Add "22", "BFS-Tabell-Rubrik-F|fffd|reskrift-|fffd|ndring"
    
    paraCount = ActiveDocument.Paragraphs.Count
   
    Set doc = ActiveDocument
 
    For Each para In doc.Paragraphs
           mCurrentParaIndex = mCurrentParaIndex + 1
            IMPProcDlg.UpdateText ("Kontrollerar rubrik. Paragraf: " & mCurrentParaIndex & "/" & paraCount)
            If (Contains(collBookMarkFormats, para.Style)) Then
             If (para.OutlineLevel = wdOutlineLevelBodyText) Or (Len(para.Range.text) <= 1) Then
                mHasErrors = True
                mTypeOfError = 1
                'Rubriken saknar level
                If pFixHeading = True Then
                        'Kontrollera om det |fffd|r en tom paragraf som har f|fffd|tt felaktigt format
                        If Len(para.Range.text) <= 1 Then
                            'Tom paragraf, s|fffd|tt paragrafen till BFS-F|fffd|reskrift
                             'mCurrentOutLevel = CustMallarMain.cStrSMallForf
                             mTypeOfError = 2 ' FormatFel
                             pErrorStr = "Fel: Rubriken " + para.Range.text + "har f|fffd|r f|fffd| tecken."
                            pErrorSolution = "|fffd|ndra rubriken till " + CustMallarMain.cStrSMallForf
                            IMPHeadingsDlg.SetFel (pErrorStr)
                            IMPHeadingsDlg.AddForslag (pErrorSolution)
                            IMPHeadingsDlg.Show
                            IMPHeadingsDlg.CommandButtonChange.Visible = True
                        Else
                            'S|fffd|tt heading till korrekt wdOutlineLevelX
                            pOutLevel = GetOutLevel(para.Style, pOutLevelStr)
                             
                             'Kunde inte r|fffd|tta felet
                             If pOutLevel <> wdOutlineLevelBodyText Then
                                    'pPara.OutlineLevel = pOutLevel
                                    mCurrentOutLevel = pOutLevel
                                    pErrorStr = "Fel: Rubriken " + para.Range.text + " har inte n|fffd|gon 'Level/Header'."
                                    pErrorSolution = "|fffd|ndra rubriken till " + pOutLevelStr
                                    IMPHeadingsDlg.SetFel (pErrorStr)
                                    IMPHeadingsDlg.AddForslag (pErrorSolution)
                                    IMPHeadingsDlg.Show
                                    IMPHeadingsDlg.CommandButtonChange.Visible = True
                             Else
                                    pErrorStr = "Fel: Rubriken " + para.Range.text + " har inte n|fffd|gon 'Level/Header'. "
                                    pErrorSolution = "St|fffd|ng dialogen och s|fffd|tt 'Level/Header' manuellt p|fffd| rubriken. D|fffd|refter starta kontrollern igen."
                                    IMPHeadingsDlg.SetFel (pErrorStr)
                                    IMPHeadingsDlg.AddForslag (pErrorSolution)
                                    IMPHeadingsDlg.Show
                                    MPHeadingsDlg.CommandButtonChange.Visible = False
                             End If
                        End If
                Else
                       pErrorStr = "Fel: Rubriken " + paraRange.text + " har inte n|fffd|gon 'Level/Header'. "
                       pErrorSolution = "St|fffd|ng dialogen och s|fffd|tt 'Level/Header' manuellt p|fffd| rubriken. D|fffd|refter starta kontrollern igen."
                       IMPHeadingsDlg.SetFel (pErrorStr)
                       IMPHeadingsDlg.AddForslag (pErrorSolution)
                       IMPHeadingsDlg.Show
                       IMPHeadingsDlg.CommandButtonChange.Visible = False
                End If
             End If
        End If
    Next para
    
    CloseProcMessage
    Exit Function
Err1:
    'MsgBox "Ett fel intr|fffd|ffade under fortsatt validering."
    mHasErrors = True
    MPHeadingsDlg.Hide
    CloseProcMessage
End Function

Function GetUniqeNameCount() As String
    'Ger unik fyrst|fffd|llig str|fffd|ng NNNN
    On Error GoTo Err1
    
    Dim strRes As String
    strRes = "1"
    Dim strValue As String
    If (GetTextFromDat("r|fffd|knare", strValue)) Then 'l|fffd|s v|fffd|rdet
        Dim intValue As Long
        intValue = StrToInt(strValue)
        intValue = intValue + 1 '|fffd|ka med ett
        If (intValue > 9999) Then intValue = 1
        strValue = IntToStr(intValue)
        Call SetTextToDat("r|fffd|knare", strValue) 'Spara ner
        strRes = strValue
    End If
    
    Dim intLen As Long
    intLen = ImpLen(strRes)
    Dim intI As Long
    For intI = (intLen + 1) To 4
        strRes = "0" & strRes 'L|fffd|gg p|fffd| nollor s|fffd| att str|fffd|ngen blir fyra tecken l|fffd|ng
    Next intI
    
Err1:
    GetUniqeNameCount = strRes
End Function
Function GetTemplateNameAndPath() As String
    GetTemplateNameAndPath = AddBackSlash(ImpDoc.AttachedTemplate.Path) & ImpDoc.AttachedTemplate.Name
End Function
Function GetBestNewFilename() As String
    Dim strRes As String
    strRes = "GRAR" & GetUniqeNameCount & ".doc"
    
    
    GetBestNewFilename = strRes
End Function
Function GetBestFilename() As String
    Dim strRes As String
    strRes = "GRAR" & CustMeta.GetYYStr & CustMeta.GetnnStr & ".doc"
    
    
    GetBestFilename = strRes
End Function
Function GetKategori(inintIdx As Long) As String
    '0 ger antal
    '>0 ger objektet
    Dim strRes As String
    strRes = ""
    
    'Antalet
    If (inintIdx = 0) Then strRes = ImpFile.GetDatValue(GetServerPath & "Kategorier.dat", "antal")
    
    'Kategorier
    If (inintIdx > 0) Then strRes = ImpFile.GetDatValue(GetServerPath & "Kategorier.dat", "kategori" & IntToStr(inintIdx))
    
    GetKategori = strRes

End Function

Function GetForsakringsslag(inintIdx As Long) As String
    '0 ger antal
    '>0 ger objektet
    Dim strRes As String
    strRes = ""
        
    'Antalet
    If (inintIdx = 0) Then strRes = ImpFile.GetDatValue(GetServerPath & "f|fffd|rs|fffd|kringsslag.dat", "antal")
    
    'F|fffd|rm|fffd|nsslag
    If (inintIdx > 0) Then strRes = ImpFile.GetDatValue(GetServerPath & "f|fffd|rs|fffd|kringsslag.dat", "f|fffd|rs|fffd|kringsslag" & IntToStr(inintIdx))
 
    GetForsakringsslag = strRes

End Function



Function GetSokord(inintIdx As Long) As String
    '0 ger antal
    '>0 ger objektet
    Dim strRes As String
    strRes = ""
    Dim strFile As String
    strFile = GetServerPath & "BFS_Sokord.dat"
    
    
    If (ImpFile.FileExist(strFile)) Then
    
        'Antalet
        If (inintIdx = 0) Then strRes = ImpFile.GetDatValueCache(strFile, "antal")
        
        'F|fffd|rm|fffd|nsslag
        If (inintIdx > 0) Then strRes = ImpFile.GetDatValueCache(strFile, "s|fffd|kord" & IntToStr(inintIdx))
    Else
        If (inintIdx = 1) Then strRes = "L|fffd|gg till denna rad f|fffd|r eget s|fffd|kord ->"
        If (inintIdx = 2) Then strRes = "Byggregler"
        If (inintIdx = 3) Then strRes = "Konstruktionsregler"
        If (inintIdx = 4) Then strRes = "Betongkonstruktion"
         If (inintIdx = 0) Then strRes = "4"
    End If
    'Antalet
   'If (inintIdx = 0) Then strRes = ImpFile.GetDatValueCache(GetServerPath & "S|fffd|kord.dat", "antal")
    
    'F|fffd|rm|fffd|nsslag
    'If (inintIdx > 0) Then strRes = ImpFile.GetDatValueCache(GetServerPath & "S|fffd|kord.dat", "s|fffd|kord" & IntToStr(inintIdx))
 
    GetSokord = strRes

End Function
Function GetHelpText(inIdx As Long) As String
    Dim strRes As String
    strRes = ""
    
    On Error GoTo Err1
'    If (inIdx = 1) Then strRes = ImpFile.ReadFromFile(GetServerPath & "Hj|fffd|lpOmMallen.txt")
'    If (inIdx = 2) Then strRes = ImpFile.ReadFromFile(GetServerPath & "Hj|fffd|lpAttSkrivaIM.txt")
'    If (inIdx = 3) Then strRes = ImpFile.ReadFromFile(GetServerPath & "Hj|fffd|lpInf|fffd|rPublisering.txt")
'    If (inIdx = 4) Then strRes = ImpFile.ReadFromFile(GetServerPath & "Hj|fffd|lpLathund.txt")
    GetHelpText = "Hj|fffd|lptext " & IntToStr(inIdx)
  
Err1:
    GetHelpText = strRes
End Function

Function GetAdmin() As Boolean
    Dim bRes As Boolean
    bRes = True
    
    GetAdmin = bRes
End Function
Function GetServerPath() As String
    'Gemensamma filer
    Call ReadCustDat
    GetServerPath = mStrCust_serverpath
End Function

Function GetIMPinPath() As String
    'S|fffd|kv|fffd|gen till IMPin\xxx\
    'Denna s|fffd|kv|fffd|g skall anv|fffd|ndas f|fffd|r de flesta |fffd|ndam|fffd|l.
    Call ReadCustDat
    GetIMPinPath = mStrCust_path
End Function
Sub ReadCustDat()
    'L|fffd|ser in alla s|fffd|kv|fffd|gar i dat-filer
    If (mStrCust_path = "") Then
        mStrCust_path = "C:\IMPin\BFS\"
        ImpFile.ForceCreateDir (mStrCust_path)
        mStrCust_serverpath = AddBackSlash(ImpDoc.AttachedTemplate.Path) '"C:\IMPin\BFS\Server"
        ImpFile.ForceCreateDir (mStrCust_serverpath)
'        Dim strCustdat As String
'        strCustdat = GetIMPRegistry
'        mStrCust_path = AddBackSlash(ImpFile.GetDatValue(strCustdat, "userpath"))
'        mStrCust_serverpath = AddBackSlash(ImpFile.GetDatValue(mStrCust_path & "user.dat", "serverpath"))
    End If
   
End Sub
Function GetIMPRegistry()
    On Error GoTo Err1
    
    Dim strRes As String
    strRes = ""
    strRes = System.PrivateProfileString("", "HKEY_LOCAL_MACHINE\Software\IMPinBFS", "Dat")
    If (strRes = "") Then strRes = "c:\IMPin\BFS.dat"
    GetIMPRegistry = strRes
    Exit Function
Err1:
    strRes = "c:\IMPin\BFS.dat"
    GetIMPRegistry = strRes
    
End Function
Function GetMetaPath() As String
    'D|fffd|r alla anv|fffd|ndarens metadata ligger
    Dim strRes As String
    strRes = GetIMPinPath & "BFSUser\"
    GetMetaPath = strRes
End Function
Function GetDocsPath() As String
    'D|fffd|r alla anv|fffd|ndarens metadata ligger
    Dim strRes As String
    strRes = GetIMPinPath & "Dokument\"
    GetDocsPath = strRes
End Function

Public Function DoDistiller() As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    Dim bOkPrinter As Boolean
    bOkPrinter = SetPrinter("Acrobat Distiller")
    If (bOkPrinter = False) Then
        bOkPrinter = SetPrinter("Adobe PDF")
    End If
    
    If (bOkPrinter = False) Then GoTo Err1
    GoTo Print1

Err1:
    On Error GoTo Err3
    'MsgBox ("Du har inte en skrivare som heter Acrobat Distiller installerad p|fffd| din dator, du f|fffd|r nu v|fffd|lja en skrivare manuellt f|fffd|r att generera pdf-fil!")
    'MsgBox ("Du har inte en skrivare som heter Acrobat Distiller installerad p|fffd| din dator, du f|fffd|r nu v|fffd|lja en skrivare manuellt f|fffd|r att generera pdf-fil!")
    'If (Dialogs(wdDialogFilePrint).Show = -1) Then 'F|fffd|rs|fffd|k att skriva ut manuellt
    '    bRes = True
    'End If
Err3:
    GoTo End1
    
Print1:
    Application.PrintOut FileName:="", Range:=wdPrintAllDocument, Item:= _
        wdPrintDocumentContent, Copies:=1, Pages:="", PageType:=wdPrintAllPages, _
        ManualDuplexPrint:=False, Collate:=True, Background:=True, PrintToFile:= _
        False, PrintZoomColumn:=0, PrintZoomRow:=0, PrintZoomPaperWidth:=0, _
        PrintZoomPaperHeight:=0
    
    bRes = True
    
End1:
    DoDistiller = bRes

End Function
Function SetPrinter(strPrinter As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    On Error GoTo Err1
    ActivePrinter = strPrinter
    bRes = True
    
Err1:
   SetPrinter = bRes
End Function
Public Function GetSaveAsPDF() As String
    'Sparar som PDF och returnerar s|fffd|kv|fffd|gen till filen
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    IMPVar.SetDefaultValues
    If (CustExternData.DoDistiller) Then
        Dim strDocNameNoSuffix As String
        strDocNameNoSuffix = ImpFile.ExtractFileNameFromSuffix(ImpDoc.Name)
        Dim strPathOnly As String
        strPathOnly = ""
        On Error Resume Next
        strPathOnly = System.PrivateProfileString("", "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders", "Desktop")
        On Error GoTo Err1
        If (strPathOnly = "") Then
            strPathOnly = "C:\IMPin\BFS\XML"
        End If
        strRes = ImpFile.AddBackSlash(strPathOnly) & strDocNameNoSuffix & ".pdf"
    Else
        Dim strDesktop As String
        strDesktop = System.PrivateProfileString("", "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders", "Desktop")
        Dim strName As String
        strName = ImpFile.ExtractFileNameFromSuffix(ImpDoc.Name)
        strRes = ImpFile.AddBackSlash(strDesktop) & strName & ".pdf"
                
        'Inspelat makro f|fffd|r att spara som pdf i Office 2010
        ActiveDocument.ExportAsFixedFormat OutputFileName:= _
        strRes, ExportFormat:= _
        wdExportFormatPDF, OpenAfterExport:=True, OptimizeFor:= _
        wdExportOptimizeForPrint, Range:=wdExportAllDocument, From:=1, To:=1, _
        Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _
        CreateBookmarks:=wdExportCreateNoBookmarks, DocStructureTags:=True, _
        BitmapMissingFonts:=True, UseISO19005_1:=False
    
    End If

Err1:
    GetSaveAsPDF = strRes

End Function
Public Function GetSaveAsXML() As String
    'Sparar som XML och returnerar s|fffd|kv|fffd|gen till filen
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    IMPVar.SetDefaultValues
    strRes = CustSaveMain.SaveAsXML(True)

Err1:
    GetSaveAsXML = strRes

End Function
Public Function IsBFSMall() As Boolean
    Dim bRes As Boolean
    bRes = False
    If (IMPFunction.ImpMid(ImpDoc.AttachedTemplate.Name, 1, 3) = "BFS") Then bRes = True
    IsBFSMall = bRes
End Function
Public Function IsBBRMall() As Boolean
    Dim bRes As Boolean
    bRes = False
    If (IMPFunction.ImpMid(ImpDoc.AttachedTemplate.Name, 1, 3) = "BBR") Then bRes = True
    If (IMPFunction.ImpMid(ImpDoc.AttachedTemplate.Name, 1, 3) = "EKS") Then bRes = True
    IsBBRMall = bRes
End Function
Public Function IsARMall() As Boolean
    Dim bRes As Boolean
    bRes = False
    If (IMPFunction.ImpMid(ImpDoc.AttachedTemplate.Name, 1, 2) = "AR") Then bRes = True
    IsARMall = bRes
End Function

Sub SaveDocumentToPDF() '191219/Mo - Ny rutin f|fffd|r att spara som PDF
'Sparar aktuellt dokument som PDF/A. Sparar med samma namn som dokumentet har.
    
    Dim PDFFilePath As String
    Dim PDFFileName As String
    Dim RetVal
    
    On Error GoTo Errorhandling
    With ActiveDocument
        .BuiltInDocumentProperties(wdPropertyAuthor) = "Boverket"
        .BuiltInDocumentProperties(wdPropertyCompany) = ""
        .BuiltInDocumentProperties(wdPropertySubject) = ""
        PDFFileName = FileNameNoExt(.Name) & ".pdf"
        If .Path <> "" Then
          PDFFilePath = .Path & "\" & PDFFileName
        Else
          PDFFilePath = PDFFileName
        End If
        .ExportAsFixedFormat OutputFileName:=PDFFilePath, _
                             ExportFormat:=wdExportFormatPDF, _
                             OpenAfterExport:=True, _
                             OptimizeFor:=wdExportOptimizeForPrint, _
                             IncludeDocProps:=True, _
                             CreateBookmarks:=wdExportCreateHeadingBookmarks, _
                             UseISO19005_1:=True
    End With
    Exit Sub
Errorhandling:
    MsgBox "Det gick inte att spara. Kolla att PDF:en inte |fffd|r |fffd|ppen.", vbInformation
    
 End Sub

Function FileNameNoExt(strPath As String) As String
    Dim strTemp As String
    strTemp = Mid$(strPath, InStrRev(strPath, "\") + 1)
    If InStr(strTemp, ".") > 0 Then
       FileNameNoExt = Left$(strTemp, InStrRev(strTemp, ".") - 1)
    Else
       FileNameNoExt = strTemp
    End If
End Function


Attribute VB_Name = "CustFile"
'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:
Public bSavePictures As Boolean
Public strPathHTML As String
Public strPathWordHTML As String
Public strPathIMPinHTML As String
Public strPathIMPinHTMLBilder As String
Public bIsExporting As Boolean
Public Const cStrHTMLTemp = "temp"
Public Const cStrHTMLImpin = "ImpinHTML"
'exempelBildena
Public Const cStrExampleImageName = "ExempelBild.jpg"


Function IsASymbol(inRange As Range) As Long
    
    Dim intRes As Long
    intRes = 0
    
    Dim strOrg As String
    strOrg = ImpMid(inRange.text, 1, 1)
    
    If (strOrg <> "(") Then
        IsASymbol = intRes
        Exit Function
    End If
    
    Dim docPaste As Document
    If (MstrVersion = "W97") Then
        Set docPaste = Documents.Add()
    Else
        Call DocumentsAdd(docPaste)
        'Set docPaste = Documents.Add(Visible:=False)
    End If
    docPaste.Range.Delete
    inRange.Copy
    docPaste.Range.PasteSpecial Link:=False, dataType:=wdPasteText, Placement:= _
            wdInLine, DisplayAsIcon:=False
    strRes = ImpMid(docPaste.Range.text, 1, 1)
    intRes = AscW(strRes)
    docPaste.Close (False)
    
    'Analysera svaret
    If (intRes = 40) Then
        intRes = 0
    Else
        Dim intNew As Long
        intNew = 0
        intRes = intRes - 97 + 945 'Bugg, st|fffd|mmer ej p|fffd| alla symboler
        If (intRes = 893) Then intNew = 150
        If (intRes = 947) Then intNew = 967
        If (intRes = 950) Then intNew = 1092 ' Bugg den versala, hitta den gemena
        If (intRes = 951) Then intNew = 947
        If (intRes = 952) Then intNew = 951
        If (intRes = 953) Then intNew = 953
        If (intRes = 954) Then intNew = 966
        If (intRes = 955) Then intNew = 954
        If (intRes = 956) Then intNew = 955
        If (intRes = 957) Then intNew = 956
        If (intRes = 958) Then intNew = 957
        If (intRes = 960) Then intNew = 8719 'Hitta lilla pi
        If (intRes = 961) Then intNew = 952
        If (intRes = 962) Then intNew = 961
        If (intRes = 966) Then intNew = 969 'Hitta utan streck
        If (intRes = 967) Then intNew = 969
        If (intRes = 968) Then intNew = 958
        If (intRes = 969) Then intNew = 968
        If (intRes = 970) Then intNew = 962
        If (intRes = 1024) Then intNew = 186
        If (intRes = 9059) Then intNew = 150
        If (intRes = 1200) Then intNew = 40
        If (intRes = 9097) Then intNew = 41
             
        'Byt v|fffd|rde
        If (intNew > 0) Then intRes = intNew
    End If
    
    IsASymbol = intRes
End Function
Function ExportShape(aInlineShape As InlineShape, strPict As String, bFirst As Boolean) As String
    'Exit Function
    On Error GoTo Err1
    
    ExportShape = ""
    
    strPathHTML = AddBackSlash(CustExternData.GetIMPinPath & cStrHTMLTemp)
    strPathWordHTML = strPathHTML & "WordHTML\"
    strPathIMPinHTML = AddBackSlash(strPathHTML & cStrHTMLImpin)
    strPathIMPinHTMLBilder = strPathIMPinHTML & "Bilder\"
    
    If (bFirst) Then
        bSavePictures = False
        'Skapa s|fffd|kv|fffd|gen till filerna
        If (ForceCreateDir(strPathHTML) = False) Then
            MsgBox ("Kan inte skapa foldern:" & strPathHTML & ", och kan d|fffd|rf|fffd|r inte spara bilder")
            Exit Function
        End If
        If (ForceRemoveDir(strPathHTML, True) = False) Then
            MsgBox ("Kan inte t|fffd|mma foldern:" & strPathHTML & ", och kan d|fffd|rf|fffd|r inte spara bilder")
            Exit Function
        End If
        'If (ForceRemoveDir(strPathWordHTML) = False) Then
        '    MsgBox ("Kan inte ta bort foldern:" & strPathWordHTML & ", och kan d|fffd|rf|fffd|r inte spara bilder")
        '    Exit Function
        'End If
        'If (ForceRemoveDir(strPathIMPinHTML) = False) Then
        '    MsgBox ("Kan inte ta bort foldern:" & strPathIMPinHTML & ", och kan d|fffd|rf|fffd|r inte spara bilder")
        '    Exit Function
        'End If
        If (ForceCreateDir(strPathWordHTML) = False) Then
            MsgBox ("Kan inte skapa foldern:" & strPathWordHTML & ", och kan d|fffd|rf|fffd|r inte spara bilder")
            Exit Function
        End If
        If (ForceCreateDir(strPathIMPinHTML) = False) Then
            MsgBox ("Kan inte skapa foldern:" & strPathIMPinHTML & ", och kan d|fffd|rf|fffd|r inte spara bilder")
            Exit Function
        End If
        If (ForceCreateDir(strPathIMPinHTMLBilder) = False) Then
            MsgBox ("Kan inte skapa foldern:" & strPathIMPinHTMLBilder & ", och kan d|fffd|rf|fffd|r inte spara bilder")
            Exit Function
        End If
    Else
        If (bSavePictures = False) Then Exit Function
    End If
    
    bSavePictures = True
    
    'Kopiera bilden till nytt dokument och spara det som html
    Dim docPaste As Document
    'Dim strTemplateFile As String
    'strTemplateFile = AddBackSlash(Application.NormalTemplate.Path) & Application.NormalTemplate.Name
    If (MstrVersion = "W97") Then
'        aInlineShape.Select
'        Selection.Copy
        aInlineShape.Range.Copy
        Set docPaste = Documents.Add()
        'Selection.Paste
        docPaste.Range.Paste
    Else
        Call DocumentsAdd(docPaste)
        docPaste.Range.Delete
        aInlineShape.Range.Copy
        docPaste.Range.Paste
    End If
    

    Dim strFileName As String
    strFileName = strPathWordHTML & "doc" & strPict & "h.htm"
    If (MstrVersion = "W97") Then
        'docPaste.SaveAs FileName:=strFileName, FileFormat:=102, LockComments:= _
        'False, Password:="", AddToRecentFiles:=True, WritePassword:="", _
        'ReadOnlyRecommended:=False, EmbedTrueTypeFonts:=False, _
        'SaveNativePictureFormat:=False, SaveFormsData:=False, SaveAsAOCELetter:= _
        'False
        docPaste.SaveAs FileName:=strFileName, FileFormat:=100, LockComments _
        :=False, Password:="", AddToRecentFiles:=True, WritePassword:="", _
        ReadOnlyRecommended:=False, EmbedTrueTypeFonts:=False, _
        SaveNativePictureFormat:=False, SaveFormsData:=False, SaveAsAOCELetter:= _
        False
   Else
        Call docPaste.SaveAs(strFileName, wdFormatHTML)
    End If

    docPaste.Close
        
    'ExportShape = CopyPictureFile2(CopyPictureFile(strPict))
    ExportShape = "bilder\" & ExtractFileNameFromPath(CopyPictureFile(strPict))
    Exit Function
Err1:
    ImpMsg ("Kan ej skapa bilden " & strPict & ". L|fffd|gg till den manuellt i html-filen")
    
End Function
Sub CopyExamplePictureFile()
    On Error GoTo Error3
     
    Dim strDirPictures As String
    strDirPictures = GetServerPath()
    
    If (strDirPictures = "") Then
        MsgBox ("Hittar inte mappen till exempelbilden")
    Else
        Dim strOrgPicture As String
        strOrgPicture = strDirPictures & cStrExampleImageName
        Dim strDestPicture As String
        strDestPicture = CustExternData.GetIMPinPath & "HTML\bilder\" & cStrExampleImageName
        If (ImpFileCopy(strOrgPicture, strDestPicture) = False) Then
            If (FileExist(strOrgPicture) = False) Then
                MsgBox ("Filen " & strOrgPicture & " saknas")
            Else
                MsgBox ("Kunde ej kopiera exempelbild")
            End If
        End If
    End If
       
    Exit Sub
Error3:
    MsgBox ("Kunde ej kopiera exempelbild")
End Sub

Function CopyPictureFile2(inOrgFile As String) As String
    If (inOrgFile = "") Then Exit Function
    
    Dim strFileOnlyName As String
    strFileOnlyName = ExtractFileNameFromPath(inOrgFile)
    
    If (strFileOnlyName = "") Then strFileOnlyName = "error.pic"
    Dim strDest As String
    strDest = "C:\Impin\temp\bilder\" & strFileOnlyName
    Call FileCopy(inOrgFile, strDest)

    CopyPictureFile2 = strDest
End Function

Function CopyPictureFile(strPict As String) As String
    CopyPictureFile = ""
    If (bSavePictures = False) Then Exit Function
    
   ' Dim intPictIdx As Long
   ' For intPictIdx = 1 To 1
        Dim strDirPictures As String ' Var html-bilderna ligger
        strDirPictures = ""
        
        Dim strDirSearch As String 'S|fffd|kstr|fffd|ng f|fffd|r fil/dir-namn
        strDirSearch = "doc" & strPict & "h"
        strDirSearch = GetLegalName(strDirSearch)
        
        'G|fffd| igenom undermappar och leta upp den med r|fffd|tt namn
        Dim strDir As String
        Dim intDirIdx As Long
        intDirIdx = 1
        strDir = GetDirAt(strPathWordHTML, intDirIdx)
        ResetSafeWhile (30)
        While (strDir <> "" And SafeWhile(30))
            Dim strDirLegal As String
            strDirLegal = GetLegalName(strDir)
            If (HasString(strDirLegal, strDirSearch)) Then
                If (strDirPictures = "") Then strDirPictures = strDir
            End If
            intDirIdx = intDirIdx + 1
            strDir = GetDirAt(strPathWordHTML, intDirIdx)
        Wend
        
        If (MstrVersion = "W97") Then strDirPictures = strPathWordHTML
        
        If (strDirPictures = "") Then
            MsgBox ("Hittar inte mappen till exporterade bilder")
        Else
            Dim strOrgPicture As String
            strOrgPicture = GetBestPictFromFolder(strDirPictures)
            If (strOrgPicture = "") Then
                MsgBox ("Hittar ingen l|fffd|mplig bild i mappen:" & strDirPictures)
            Else
                Dim strSuff As String
                strSuff = GetSuffix(strOrgPicture)
                Dim strDestPicture As String
                strDestPicture = strPathIMPinHTMLBilder & strPict & "." & strSuff
                Call FileCopy(strOrgPicture, strDestPicture)
                CopyPictureFile = strDestPicture
            End If
        End If
        
    'Next intPictIdx
    
    
End Function
Function GetBestPictFromFolder(inStrFolder As String) As String
    Dim strRes As String
    strRes = ""
    Dim intFound As Long 'Kvaliteten
    intFound = 0
    
        'G|fffd| igenom undermappar och leta upp den med r|fffd|tt namn
        Dim strFile As String
        Dim intFileIdx As Long
        intFileIdx = 1
        strFile = GetFileAt(inStrFolder, intFileIdx)
        ResetSafeWhile (31)
        While (strFile <> "" And SafeWhile(31))
            Dim strFileLow As String
            strFileLow = LCase(strFile)
            
            Dim intOk As Long
            intOk = 0
            If (HasString(strFileLow, ".jpg")) Then intOk = 5
            If (HasString(strFileLow, ".png")) Then intOk = 3
            If (HasString(strFileLow, ".gif")) Then intOk = 5
            If (intOk > intFound) Then
                strRes = strFile
            End If
            intFileIdx = intFileIdx + 1
            strFile = GetFileAt(inStrFolder, intFileIdx)
        Wend
    GetBestPictFromFolder = strRes
End Function

Attribute VB_Name = "CustInsert"
Private m_LastIdxCellRow As Long
'************** BBR Rubrik start **************

Sub DoBBRRubrik(inLevel As Long, inType As Long)
    '1=BBR, 2=BKR, 3=BFSBBR
    On Error GoTo Error1
        
    Call ClearVisEmptyRowAtSelection
    If (CheckNewEmptyRow) Then
        Call InsertBBRRubrik(inLevel, inType)
    Else
        'Kontrollera om bara blank
        If (CheckNewEmptyRow(False) = False) Then
            Call ChangeBBRRubrik(inLevel, inType)
        Else
            DoNewEmptyRow
            Call InsertBBRRubrik(inLevel, inType)
        End If
    End If

Error1:

End Sub

'End Function
Function GetBBRRubrikStyle(inLevel As Long, inType As Long) As String
    On Error GoTo Error1
    Dim strRes As String
    strRes = ""
    
    If (inType = 1) Then
        If (inLevel = 1) Then
            'strRes = CustMallarMain.cStrSMall_BBR_Rubrik1
        End If
        If (inLevel = 2) Then
            'strRes = CustMallarMain.cStrSMall_BBR_Rubrik2
        End If
        If (inLevel = 3) Then
            'strRes = CustMallarMain.cStrSMall_BBR_Rubrik3
        End If
        If (inLevel = 4) Then
            'strRes = CustMallarMain.cStrSMall_BBR_Rubrik4
        End If
        If (inLevel = 5) Then
            'strRes = CustMallarMain.cStrSMall_BBR_Rubrik5
        End If
    ElseIf (inType = 2) Then
        If (inLevel = 1) Then
            'strRes = CustMallarMain.cStrSMall_BBK_Rubrik1
        End If
        If (inLevel = 2) Then
            'strRes = CustMallarMain.cStrSMall_BBK_Rubrik2
        End If
        If (inLevel = 3) Then
            'strRes = CustMallarMain.cStrSMall_BBK_Rubrik3
        End If
        If (inLevel = 4) Then
            'strRes = CustMallarMain.cStrSMall_BBK_Rubrik4
        End If
        If (inLevel = 5) Then
            'strRes = CustMallarMain.cStrSMall_BBK_Rubrik5
        End If
    Else
        If (inLevel = 1) Then
            strRes = CustMallarMain.cStrSMall_BFSBBR_Rubrik1
        End If
        If (inLevel = 2) Then
            strRes = CustMallarMain.cStrSMall_BFSBBR_Rubrik2
        End If
        If (inLevel = 3) Then
            strRes = CustMallarMain.cStrSMall_BFSBBR_Rubrik3
        End If
        If (inLevel = 4) Then
            strRes = CustMallarMain.cStrSMall_BFSBBR_Rubrik4
        End If
        If (inLevel = 5) Then
            strRes = CustMallarMain.cStrSMall_BFSBBR_Rubrik5
        End If
    End If
Error1:
    GetBBRRubrikStyle = strRes

End Function
Function InsertBBRRubrik(inLevel As Long, inType As Long) As Boolean
    'S|fffd|tter in rubriken p|fffd| tom rad
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
    
    'Avbryt om ej tom
    Call ClearVisEmptyRowAtSelection
    If (CheckNewEmptyRow = False) Then
        InsertBBRRubrik = bRes
        Exit Function
    End If
    
    'S|fffd|tt font och text
    Dim strStyle As String
    strStyle = GetBBRRubrikStyle(inLevel, inType)
    Dim strRubriknr As String
    strRubriknr = GetNextBBRRubrikNr(inLevel, inType)
    
    Selection.Style = ImpDoc.Styles(strStyle)
    If (IMPCheckMain.GetDocVariabelAsBoolean(cNumBBRDocVar)) Then
        Selection.TypeText text:=strRubriknr & ChrW(160)
    End If
    bRes = True

Error1:
    InsertBBRRubrik = bRes
End Function
Function ChangeBBRRubrik(inLevel As Long, inType As Long) As Boolean
    'S|fffd|tter in rubriken p|fffd| tom rad
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
    
    Dim strStyle As String
    strStyle = GetBBRRubrikStyle(inLevel, inType)
    
    Selection.Style = ImpDoc.Styles(strStyle)
    
    'Leta upp tabbtecken och ers|fffd|tt med h|fffd|rt blanksteg
    Dim aPara As Paragraph
    Set aPara = Selection.Range.Paragraphs(1)
    Dim aChar As Range
    For Each aChar In aPara.Range.Characters
        If (aChar.text = Chr(9)) Then
            aChar.text = ChrW(160)
            Exit For
        End If
    Next aChar
    bRes = True

Error1:
    ChangeBBRRubrik = bRes
End Function

Function GetNextBBRRubrikNr(inLevel As Long, inType As Long) As String
'Returnerar numret p|fffd| den paragraf som ligger ovan + 1
    Dim strRes As String
    strRes = ""
    
    On Error GoTo Err1
    Dim intI As Long
    Dim para1 As Paragraph
    Set para1 = Selection.Paragraphs(1)
    Dim arrOrder(6) As Long
    Dim bContinue As Boolean
    bContinue = True
    
    On Error GoTo Err2
    While (bContinue And GetPrevPara(para1))
        If (IsBBRRubrikMall(GetParaStyleAsLegal(para1))) Then
            If (IMPCheckFunc.GetBBRRubrikLevOrd(para1.Range.text, arrOrder, inType)) Then
                If (IncrementBBRRubrik(arrOrder, inLevel)) Then
                    strRes = GetBBRRubrikStr(arrOrder, inType)
                End If
            End If
            bContinue = False
        End If
    Wend
    
Err2:
    On Error GoTo Err1
    If (strRes = "") Then
        If (inType <> 2) Then
            If (inLevel = 1) Then strRes = "1"
            If (inLevel = 2) Then strRes = "0:0"
            If (inLevel = 3) Then strRes = "0:00"
            If (inLevel = 4) Then strRes = "0:000"
            If (inLevel = 5) Then strRes = "0:0000"
        Else
            If (inLevel = 1) Then strRes = "1"
            If (inLevel = 2) Then strRes = "0.0"
            If (inLevel = 3) Then strRes = "0.0.0"
            If (inLevel = 4) Then strRes = "0.0.0.0"
            If (inLevel = 5) Then strRes = "0.0.0.0.0"
        End If
    End If
    
Err1:
    GetNextBBRRubrikNr = strRes
End Function
Function IncrementBBRRubrik(ByRef arrOrder() As Long, inLevel As Long) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    Dim intI As Long
    For intI = 1 To 5
        If (intI > inLevel) Then 'Nollst|fffd|ll subkapitel
            arrOrder(intI) = 0
        ElseIf (intI = inLevel) Then '|fffd|ka |fffd|nskat kapitel
            arrOrder(intI) = arrOrder(intI) + 1
            If ((inLevel > 1) And (arrOrder(intI) > 9)) Then
                MsgBox ("Du kan inte skapa underkapitel av ordning 10.")
                arrOrder(intI) = 9
            End If
            bRes = True
        End If
        
    Next intI
    
Err1:
    IncrementBBRRubrik = bRes
End Function
Function GetBBRRubrikStr(ByRef arrOrder() As Long, inType As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    Dim intI As Long
    
    'Kolla niv|fffd|n, beh|fffd|vs f|fffd|r att ge nollor i missade niv|fffd|er
    Dim intLevel As Long
    For intI = 1 To 5
        If (arrOrder(intI) > 0) Then
            intLevel = intI
        End If
    Next intI
    
    
    For intI = 1 To 5
        If (intI <= intLevel) Then
            If (inType <> 2) Then
                strRes = strRes & IntToStr(arrOrder(intI))
            Else
                If (intI > 1) Then
                    strRes = strRes & "."
                End If
                strRes = strRes & IntToStr(arrOrder(intI)) 'BBK har punkt efter varje niv|fffd|
            End If
        End If
        If (intI = 1) Then
            If (intLevel > 1) Then
                If (inType <> 2) Then
                    strRes = strRes & ":"   'Kolon om subkapitel
                End If
            End If
        End If
    Next intI
Err1:
    GetBBRRubrikStr = strRes
End Function

'************** BBR Rubrik slut **************
'************** Ikraftlinje start **************
Sub DoIkraftLinje()
    On Error GoTo Error1
    'Skapar texten.
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallIkraft_Linje)
    
    Call ClearVisEmptyRowAtSelection
    If (CheckNewEmptyRow) Then
        Call InsertIkraftlinje
    Else
        'Do nothing
    End If
Error1:
End Sub
Function InsertIkraftlinje() As Boolean
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
    
    Dim strText As String
    strText = ""
    For intI = 1 To 22
        strText = strText & ChrW(160)
    Next intI
    
    Selection.TypeText text:=strText '& Chr(9) & Chr(9) & Chr(9)
    Selection.TypeParagraph
    bRes = True
Error1:
    InsertIkraftlinje = bRes
End Function
Sub InsertLedtextUtelamnad()
'L|fffd|gger in streckad markering f|fffd|r uteblivet stycke sk transumeringstecken
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallForf)
    Call ClearVisEmptyRowAtSelection
    Dim strText As String
    strText = ""
    
    'Korta tankstreck med blanksteg
    For intI = 1 To 42
        strText = strText & ChrW(8211) & Chr(32)
    Next intI
    strText = strText & ChrW(8211)
    Selection.TypeText text:=strText '& Chr(9) & Chr(9) & Chr(9)
    Selection.TypeParagraph
End Sub
Sub InsertPaXMyndighetensVagnar()
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallNormal)
    Dim strText As String
    strText = "P|fffd| Boverkets v|fffd|gnar"
    Selection.TypeText text:=strText
   
End Sub
Sub InsertBilagaFastRubrik()
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallBilaga_Rubrik)
    Dim strText As String
    strText = "Bilaga"
    Selection.TypeText text:=strText
   
End Sub


'************** Ikraftlinje slut **************
'************** Underskrift start **************
Sub DoUnderskrift()
    On Error GoTo Error1
    'Skapar texten.
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallUnderskrift)
    
    Call ClearVisEmptyRowAtSelection
    If (CheckNewEmptyRow) Then
        Call InsertUnderskrift
    Else
        'Do nothing
    End If
Error1:
End Sub
Function InsertUnderskrift() As Boolean
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
    
    'Selection.TypeText Text:="F|fffd|rnamn Efternamn" '& Chr(9) & Chr(9) & Chr(9)
    Selection.InsertAfter ("F|fffd|RNAM EFTERNAMN")
    bRes = True
Error1:
    InsertUnderskrift = bRes
End Function

'************** Underskrift slut **************
'************** Kontranamn start **************
Sub DoKontranamn()
    On Error GoTo Error1
    'Skapar texten.
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallKontra_Namn)
    
    Call ClearVisEmptyRowAtSelection
    If (CheckNewEmptyRow) Then
        Call InsertKontranamn
    Else
        'Do nothing
    End If
Error1:
End Sub
Function InsertKontranamn() As Boolean
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
    
    Selection.TypeText text:=Chr(9) '& Chr(9) & Chr(9)
    Selection.InsertAfter ("F|fffd|rnamn Efternamn")
    bRes = True
Error1:
    InsertKontranamn = bRes
End Function

'************** Kontranamn slut **************
'************** Kontraorg start **************
Sub DoKontraorg()
    On Error GoTo Error1
    'Skapar texten.
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallKontra_Org)
    
    Call ClearVisEmptyRowAtSelection
    If (CheckNewEmptyRow) Then
        Call InsertKontraorg
    Else
        'Do nothing
    End If
Error1:
End Sub
Function InsertKontraorg() As Boolean
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
    
    Selection.TypeText text:=Chr(9) & "()" '& Chr(9) & Chr(9)
    Selection.MoveLeft
    Selection.InsertAfter ("Organisationstillh|fffd|righet")
    bRes = True
Error1:
    InsertKontraorg = bRes
End Function

'************** Kontraorg slut **************
'

'************** Allm|fffd|nt r|fffd|d start **************
Sub DoAllmRadFix(Optional inStrNewStyle As String = "", Optional inIsInline As Boolean = False)
    On Error GoTo Error1
    'Skapar texten.
    
    If (inStrNewStyle <> "") Then
        Selection.Range.Style = ImpDoc.Styles(inStrNewStyle)
    End If
    
    Call ClearVisEmptyRowAtSelection
    If (CheckNewEmptyRow) Then
        InsertAllmRadFix (inIsInline)
    Else
        ChangeAllmRadFix (inIsInline)
    End If
Error1:
    
End Sub
Function InsertAllmRadFix(inIsInline As Boolean) As Boolean
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
        
    'Avbryt om ej tom
    Call ClearVisEmptyRowAtSelection
    If (CheckNewEmptyRow = False) Then
        InsertAllmRadFix = bRes
        Exit Function
    End If
    
    If (inIsInline = False) Then
        Selection.TypeText text:=cStrSMallAllmRad_Start_Text
        Selection.TypeParagraph
    Else
        Selection.Font.Italic = True
        Selection.TypeText text:="Allm|fffd|nt r|fffd|d:"
        Selection.Font.Italic = False
        Selection.TypeText text:=Chr(9)
    End If
    
    bRes = True

Error1:
    InsertAllmRadFix = bRes
End Function
Function ChangeAllmRadFix(inIsBBR As Boolean) As Boolean
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
        
    'Avbryt om ej tom
    Call ClearVisEmptyRowAtSelection
    If (CheckNewEmptyRow = False) Then
        ChangeAllmRadFix = bRes
        Exit Function
    End If
        
    'Inget speciellt att kolla
        
    bRes = True

Error1:
    ChangeAllmRadFix = bRes
End Function
'************** Allm|fffd|nt r|fffd|d slut **************

'************** |fffd|ndringar start **************
Sub ToggleChangeBars()
    On Error GoTo Err1
    m_LastIdxCellRow = 0
    'MsgBox (Selection.Range.Paragraphs.Count)
    Dim para1 As Paragraph
    For Each para1 In Selection.Range.Paragraphs
        If (para1.Range.Tables.Count = 0) Then
            Dim bHasChangeBars As Boolean
            bHasChangeBars = GetAndring(GetParaStyleAsLegal(para1))
            
            If (bHasChangeBars = False) Then
                If (SetChangeBars(para1) = False) Then
                    ImpMsg ("Kan ej skapa |fffd|ndringsmarkering p|fffd| stycket.")
                End If
            Else
                If (ClearChangeBars(para1) = False) Then
                    ImpMsg ("Kan ej ta bort |fffd|ndringsmarkering p|fffd| stycket")
                End If
                
            End If
        Else
            Call ToggleTableRow(para1)
        End If
    Next para1
Err1:
End Sub
Sub ToggleChangeBarsOld()
    On Error GoTo Err1
    m_LastIdxCellRow = 0
    
    Dim intParaIdxStart As Long
    intParaIdxStart = GetParaIdxAtSel
    Dim intParaIdxEnd As Long
    intParaIdxEnd = GetParaIdxAtSelEnd
    If (intParaIdxEnd < intParaIdxStart) Then intParaIdxEnd = intParaIdxStart
    
    Dim intParaIdx As Long
    For intParaIdx = intParaIdxStart To intParaIdxEnd
    
        If (intParaIdx > 0) Then
            Dim para1 As Paragraph
            Set para1 = ImpDoc.Paragraphs.Item(intParaIdx)
            If (para1.Range.Tables.Count > 0) Then
                    If (ToggleTableRow(para1) = False) Then
                        ImpMsg ("Kan ej v|fffd|xla |fffd|ndring i tabellen.")
                    End If
            Else
                Dim bHasChangeBars As Boolean
                bHasChangeBars = GetAndring(GetParaStyleAsLegal(para1))
                
                If (bHasChangeBars = False) Then
                    If (SetChangeBars(para1) = False) Then
                        ImpMsg ("Kan ej skapa |fffd|ndringsmarkering p|fffd| stycket.")
                    End If
                Else
         '           If (para1.Range.Tables.Count = 0) Then 'Utanf|fffd|r tabell
        '                If (para1.Range.Borders(wdBorderLeft).LineStyle = wdLineStyleSingle) Then
        '                    para1.Range.Borders(wdBorderLeft).LineStyle = wdLineStyleNone
        '                    para1.Range.Borders(wdBorderRight).LineStyle = wdLineStyleSingle
        '                Else
                            If (ClearChangeBars(para1) = False) Then
                                ImpMsg ("Kan ej ta bort |fffd|ndringsmarkering p|fffd| stycket")
                            End If
        '                End If
         '           Else 'Inuti tabell
         '               If (ClearChangeBars(para1) = False) Then
         '                   ImpMsg ("Kan ej ta bort |fffd|ndringsmarkering p|fffd| stycket")
         '               End If
         '           End If
                    
                End If
            End If
        End If
    Next intParaIdx
    
    Exit Sub
Err1:
    ImpMsg ("Kan inte v|fffd|xla |fffd|ndringsmarkering, kan ej hitta formatmall f|fffd|r markerat omr|fffd|de")
End Sub
Function SetChangeBars(inPara As Paragraph) As Boolean
    On Error GoTo Err1
    Dim bRes As Boolean
    bRes = False
    
    Dim strStyle As String
    strStyle = GetParaStyleAsLegal(inPara, True)
    
    Dim strNewStyle As String
    strNewStyle = ""
    
    
    strNewStyle = strStyle & cAndring
    Dim intStyleIdx As Long
    intStyleIdx = CustMallarMain.GetStyleIdx(strNewStyle)
    If (intStyleIdx > 0) Then
        strNewStyle = CustMallarMain.GetStrStyle(intStyleIdx)
    Else
        strNewStyle = ""
        SetChangeBars = False
        ImpMsg ("Kan ej markera |fffd|ndring d|fffd|r styckeformatet |fffd|r: '" & GetParaStyleAsLegal(inPara, True) & "'")
        Exit Function
    End If
    
    If ((strStyle <> "") And (strNewStyle <> "")) Then
        inPara.Range.Style = ImpDoc.Styles(strNewStyle)
        
'        If (inPara.Range.Tables.Count > 0) Then
'            bRes = SetAndringCellPara(inPara)
'        Else
            inPara.Range.Borders(wdBorderLeft).LineStyle = wdLineStyleSingle
            Call AddTabsForChangeBar(inPara)
            bRes = True
'        End If
    End If

Err1:
    SetChangeBars = bRes
End Function
Function ClearChangeBars(inPara As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    Dim strStyle As String
    strStyle = GetParaStyleAsLegal(inPara, True)
    Dim strNewStyle As String
    strNewStyle = ""
    
    Dim intPos As Long
    intPos = IMPFunction.ImpPos(strStyle, cAndring)
    If (intPos > 0) Then
        strNewStyle = ImpMid(strStyle, 1, intPos - 1)
    End If
            
    If (strStyle <> "") Then
        inPara.Range.Style = ImpDoc.Styles(strNewStyle)
        Call DeleteTabsForChangeBar(inPara)
        bRes = True
    End If
    
'    If (inPara.Range.Tables.Count > 0) Then ' i tabell
'        Call UpdateTableStreck(inPara.Range.Tables(1))
'    End If

    ClearChangeBars = bRes

End Function
Function AddTabsForChangeBar(inPara As Paragraph) As Boolean
    On Error GoTo Err1
    Dim bRes As Boolean
    bRes = False
    
    Dim strLegalStyle As String
    strLegalStyle = IMPFunction.GetParaStyleAsLegal(inPara)
    
    Dim intCount As Long
    intCount = GetCountAndringsPreTab(strLegalStyle)
    

    'L|fffd|gg till tabbar
    Dim intI As Long
    For intI = 1 To intCount
        inPara.Range.InsertBefore (Chr(9))
    Next intI
    
    bRes = True
Err1:
    AddTabsForChangeBar = bRes
End Function
Function DeleteTabsForChangeBar(inPara As Paragraph) As Boolean
    On Error GoTo Err1
    Dim bRes As Boolean
    bRes = False
    
    Dim strLegalStyle As String
    strLegalStyle = IMPFunction.GetParaStyleAsLegal(inPara)
    Dim intCount As Long
    intCount = GetCountAndringsPreTab(strLegalStyle)
    
    'Ta bort tabbar
    Dim intI As Long
    For intI = 1 To intCount
        Call DeleteBegining(inPara, Chr(9))
    Next intI
    
    bRes = True
Err1:
    DeleteTabsForChangeBar = bRes
End Function
Function GetCountAndringsPreTab(inStrStyle As String) As Long
    'Hur m|fffd|nga tabbar som skall finnas f|fffd|r |fffd|ndringsvarianten
    Dim intRes As Long
    intRes = 0
    
    Dim strLegalStyle As String
    strLegalStyle = GetLegalName(inStrStyle)
    If (HasString(strLegalStyle, GetLegalName(cAndring)) = False) Then
        strLegalStyle = strLegalStyle & GetLegalName(cAndring)
    End If
    
    'F|fffd|reskrift
    If (strLegalStyle = GetLegalName(cStrSMallForf_Lista2 & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMallForf_Lista3 & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMallForf_Lista4 & cAndring)) Then intRes = 1
    
    'Allm|fffd|nt r|fffd|d
    If (strLegalStyle = GetLegalName(cStrSMallAllmRad_Start & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMallAllmRad & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMallAllmRad_Paragraf & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMallAllmRad_Indrag & cAndring)) Then intRes = 2
    If (strLegalStyle = GetLegalName(cStrSMallAllmRad_Lista & cAndring)) Then intRes = 2
    If (strLegalStyle = GetLegalName(cStrSMallAllmRad_Lista2 & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMallAllmRad_Lista3 & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMallAllmRad_Lista4 & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMallAllmRad_TabellRubrik & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMallAllmRad_BildRubrik & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMallAllmRad_TabellNot & cAndring)) Then intRes = 1
    
    'BBR
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_Forf & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_Forf_Indrag & cAndring)) Then intRes = 2
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_Forf_Lista & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_Forf_Lista2 & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_Forf_TabellRubrik & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_Forf_BildRubrik & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_Forf_TabellNot & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_Forf_2Col & cAndring)) Then intRes = 1
    
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_AllmRad & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_AllmRad_Start & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_AllmRad_Indrag & cAndring)) Then intRes = 2
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_AllmRad_Lista & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_AllmRad_Lista2 & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_AllmRad_Lista3 & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_AllmRad_TabellRubrik & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_AllmRad_BildRubrik & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_AllmRad_TabellNot & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_AllmRad_MarginalRubrik & cAndring)) Then intRes = 1
    If (strLegalStyle = GetLegalName(cStrSMall_BBR_AllmRad_2Col & cAndring)) Then intRes = 1
    
    GetCountAndringsPreTab = intRes
End Function
'************** |fffd|ndringar tabell start ***************
Function ToggleTableRow(inPara As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    On Error GoTo Err1
    
    'Skapa |fffd|ndringskolumn och kontrollera att den finns
    Dim aTable As Table
    Set aTable = inPara.Range.Tables(1)
    If (HasAndringCol(aTable) = False) Then
        If (MakeAndringsTable(aTable) = False) Then
            GoTo Err1
        End If
    End If
    
    'V|fffd|xla kantstreck p|fffd| radens f|fffd|rsta kolumn
    Dim intRow As Long
    If (inPara.Range.Cells.Count = 0) Then
        bRes = True
        GoTo Err1
    End If
    intRow = inPara.Range.Cells(1).RowIndex
        
    If (m_LastIdxCellRow = intRow) Then
        bRes = True
        GoTo Err1
    End If
    
    Dim aCell As Cell
    Set aCell = aTable.Cell(intRow, 1)
    If (aCell.Borders(wdBorderLeft).LineStyle = wdLineStyleNone) Then
        aCell.Borders(wdBorderLeft).LineStyle = wdLineStyleSingle
    Else
        aCell.Borders(wdBorderLeft).LineStyle = wdLineStyleNone
    End If

    m_LastIdxCellRow = intRow
    bRes = True
Err1:
    ToggleTableRow = bRes
End Function
Function HasAndringCol(aTable As Table) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    Dim intI As Long
    Dim aCell As Cell
    For intI = 1 To aTable.Range.Cells.Count
        Set aCell = aTable.Range.Cells(intI)
        If (aCell.ColumnIndex = 1) Then
            Dim strStyle As String
            strStyle = GetRangeStyleAsLegal(aCell.Range)
            If (EqualLegalName(strStyle, cStrSMall_TabellStreck)) Then
                bRes = True
                Exit For
            End If
            'If (EqualLegalName(strStyle, cStrSMall_BBR__TabellStreck)) Then
            '    bRes = True
            '    Exit For
            'End If
        End If
    Next intI
    
Err1:
    HasAndringCol = bRes
    
End Function
Function MakeAndringsTable(aTable As Table) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    Dim aMsgRes As VbMsgBoxResult
    Dim strText As String
    strText = "En ny f|fffd|rsta kolumn kommer att l|fffd|ggas till tabellen f|fffd|r att kunna markera kantstreck."
    strText = strText & " Om du har en s|fffd|dan kolumn redan, avbryt och kontrollera att formatmallen |fffd|r " & CustMallarMain.cStrSMall_TabellStreck & " p|fffd| alla celler i kolumnen."
    aMsgRes = MsgBox(strText, vbOKCancel)
    If (aMsgRes = vbCancel) Then GoTo Err1
    
    'Stoppa in ny kolumn
    aTable.Range.Cells(1).Select
    Selection.InsertColumns
    
    Dim intI As Long
    Dim aCell As Cell
    For intI = 1 To aTable.Range.Cells.Count
        Set aCell = aTable.Range.Cells(intI)
        'MsgBox (aCell.RowIndex & ", " & aCell.ColumnIndex)
        If (aCell.ColumnIndex = 1) Then
            aCell.LeftPadding = CentimetersToPoints(0.05)   'Smalkolumn
            aCell.RightPadding = CentimetersToPoints(0.05)  'Smal kolumn
            'aCell.Width = 10
            aCell.Borders(wdBorderLeft).LineStyle = wdLineStyleNone
            aCell.Borders(wdBorderRight).LineStyle = wdLineStyleNone
            aCell.Borders(wdBorderTop).LineStyle = wdLineStyleNone
            aCell.Borders(wdBorderBottom).LineStyle = wdLineStyleNone
            aCell.Borders(wdBorderDiagonalDown).LineStyle = wdLineStyleNone
            aCell.Borders(wdBorderDiagonalUp).LineStyle = wdLineStyleNone
            aCell.Range.Style = ActiveDocument.Styles(cStrSMall_TabellStreck)
        End If
    Next intI
    
    On Error Resume Next
    aTable.Rows.HorizontalPosition = wdTableLeft
    aTable.Rows.RelativeHorizontalPosition = wdRelativeHorizontalPositionMargin
    aTable.Rows.WrapAroundText = False
    'aTable.Rows.LeftIndent = CentimetersToPoints(0)
    aTable.Rows.LeftIndent = CentimetersToPoints(-0.14) 'Smal kolumn
    aTable.PreferredWidthType = wdPreferredWidthPoints
    aTable.PreferredWidth = CentimetersToPoints(13.2)
'    aTable.Select
    aTable.Columns(1).Select
    Selection.Columns.PreferredWidthType = wdPreferredWidthPoints
    Selection.Columns.PreferredWidth = CentimetersToPoints(0.15)
    
    Dim strFirstStyle As String
    strFirstStyle = IMPFunction.GetParaStyleAsLegal(aTable.Cell(1, 2).Range.Paragraphs(1))
    If (CustMallarMain.IsAllmRadMall(strFirstStyle)) Then
        aTable.Columns(1).Select
        Selection.Columns.PreferredWidthType = wdPreferredWidthPoints
        Selection.Columns.PreferredWidth = CentimetersToPoints(2.15)
    End If
    
    
    bRes = True
Err1:
    MakeAndringsTable = bRes
End Function
'************** |fffd|ndringar tabell slut ***************
'************** |fffd|ndringar slut ***************


Function GetColFromPara(inPara1 As Paragraph) As Long
    'Returnerar columnen i tabell, 0 om ingen kolumn
    Dim intRes As Long
    intRes = 0
    On Error GoTo Err1

    If (inPara1.Range.Tables.Count > 0) Then
        intRes = inPara1.Range.Cells(1).ColumnIndex
    End If
Err1:
    GetColFromPara = intRes
End Function
Function IsEmptyRowAtSelection() As Boolean
    'En tomrad med bara radbrytning har ett ord
    
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    bRes = IsEmptyParagraph(Selection.Range.Paragraphs(1))
Err1:
    IsEmptyRowAtSelection = bRes
End Function
Function IsEmptyRowBeforeSelection() As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    bRes = IsEmptyParagraph(Selection.Range.Paragraphs(1).Previous)
    
Err1:
    IsEmptyRowBeforeSelection = bRes

End Function
Sub InsertEmptyRowAboveAtSelection(Optional bNotAtHeader As Boolean = False)
    'Ser till att det finns en tomrad
    On Error GoTo Err1
    Dim bInsert As Boolean
    bInsert = False
    If (IsEmptyParagraph(Selection.Paragraphs(1))) Then
        If (IsEmptyRowBeforeSelection() = False) Then
            If (bNotAtHeader) Then
                'Om rubrikniv|fffd|n |fffd|r 0, s|fffd| infoga
                If (CustMallarMain.GetRubrikLevelFromMallStyle(IMPFunction.GetParaStyleAsLegal(Selection.Paragraphs(1).Previous)) = 0) Then
                    bInsert = True
                End If
            Else
                bInsert = True
            End If
        End If
    End If
    If (bInsert) Then
        Selection.Style = CustMallarMain.cStrSMallNormal
        Selection.TypeParagraph
    End If
Err1:
End Sub
Function IsEmptyParagraph(inPara1 As Paragraph) As Boolean
    'En tomrad med bara radbrytning har ett ord
    
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    If (inPara1.Range.Words.Count <= 1) Then
        bRes = True
    End If
Err1:
    IsEmptyParagraph = bRes
    
End Function
Function IsEmptyRowBeforePara(inPara As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    bRes = IsEmptyParagraph(inPara.Previous)
    
Err1:
    IsEmptyRowBeforePara = bRes

End Function
Sub ClearVisEmptyRowAtSelection()
    'T|fffd|mmer raden om den bara best|fffd|r av skr|fffd|ptecken
    On Error GoTo Err1
    Dim bClear As Boolean
    bClear = True 'Utg|fffd| ifr|fffd|n att vi kan ta bort raden
    
    Dim strText As String
    strText = Selection.Paragraphs(1).Range.text
    
    Dim intLen As Long
    Dim intI As Long
    For intI = 1 To ImpLen(strText)
        Dim bClearThis As Boolean
        bClearThis = False
        Dim intAsc As Long
        intAsc = Asc(ImpMid(strText, intI, 1))
        Dim intAscW As Long
        intAscW = AscW(ImpMid(strText, intI, 1))
        If (intAsc = 9) Then bClearThis = True
        If (intAsc = 13) Then bClearThis = True
        If (intAsc = 32) Then bClearThis = True
        If (intAscW = 160) Then bClearThis = True
        If (intAscW = 8211) Then bClearThis = True
        If (bClearThis = False) Then
            bClear = False
            Exit For
        End If
    Next intI
    
    If (intLen = 1) Then bClear = False '|fffd|ndra inte tomrad
    
    If (bClear) Then
        Dim strStyle As String
        strStyle = IMPFunction.GetParaStyleAsLegal(Selection.Paragraphs(1), True)
        Selection.Paragraphs(1).Range.text = Chr(13)
        Selection.Style = ImpDoc.Styles(strStyle)
    End If
    
Err1:
End Sub
Sub LagrutaLeftAdjust()

    'V|fffd|nsterjustera
    On Error GoTo Err1
    If (Selection.Paragraphs(1).Range.Tables.Count = 1) Then
        Dim aTable As Table
        Set aTable = Selection.Paragraphs(1).Range.Tables(1)
        If ((aTable.Rows.Count = 1) And (aTable.Columns.Count = 1)) Then
            Dim aPara As Paragraph
            For Each aPara In aTable.Range.Paragraphs
                Dim sngLeft As Single
                sngLeft = PointsToCentimeters(aPara.Range.ParagraphFormat.LeftIndent)
                If (sngLeft > 1.999) Then
                    sngLeft = sngLeft - 2
                    aPara.Range.ParagraphFormat.LeftIndent = CentimetersToPoints(sngLeft)
                End If
            Next aPara
        End If
    End If
    
Err1:
End Sub
Sub LagrutaInsert()
    Selection.Style = ActiveDocument.Styles(CustMallarMain.cStrSMallForf)
    'Selection.Style = ActiveDocument.Styles(CustMallarMain.cStrSMall_BBR_Forf)
    Dim aTable As Table
    Set aTable = ActiveDocument.Tables.Add(Selection.Range, 1, 1, wdWord9TableBehavior, wdAutoFitFixed)
    aTable.PreferredWidthType = wdPreferredWidthPoints
    aTable.Rows.LeftIndent = CentimetersToPoints(1.95)
    aTable.PreferredWidth = CentimetersToPoints(11.18)
    aTable.Range.Select
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMall_Tomrad6pt)
    Selection.TypeParagraph
    Selection.Font.Italic = True
    Selection.TypeText ("BKR")
    Selection.Font.Italic = False
    Selection.TypeText (", avsnitt 1:234")
    Selection.TypeParagraph
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMall_Tomrad6pt)
    Selection.TypeParagraph
    
    'set aTable = ActiveDocument.Tables.Add Range:=Selection.Range, NumRows:=1, NumColumns:= _
    '    1, DefaultTableBehavior:=wdWord9TableBehavior, AutoFitBehavior:= _
    '    wdAutoFitFixed
        

End Sub
Sub SetBemyndigandeDels()
'Skapar texten Dels i kursivt
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallBemyndigande_Indrag)
    Call ClearVisEmptyRowAtSelection
    If (IsEmptyRowAtSelection) Then
        Selection.Font.Italic = True
        Selection.TypeText text:="dels"
        Selection.Font.Italic = False
        Selection.TypeText text:=" att "
    End If
End Sub
Sub SetMoreTableSpace()
    On Error Resume Next
    With Selection.Tables(1)
        .TopPadding = CentimetersToPoints(0.05)
        .BottomPadding = CentimetersToPoints(0.05)
    End With

End Sub
Sub ToggleTableSpace()
    On Error Resume Next
    With Selection.Tables(1)
        If (.TopPadding = 0) Then
            .TopPadding = CentimetersToPoints(0.05)
            .BottomPadding = CentimetersToPoints(0.05)
        Else
            .TopPadding = CentimetersToPoints(0)
            .BottomPadding = CentimetersToPoints(0)
        End If
    End With

End Sub
Sub AdjustListRow()
    Dim strStyle As String
    strStyle = IMPFunction.GetParaStyleAsLegal(Selection.Paragraphs(1))
    If (CustMallarMain.IsAllmRadMall(strStyle)) Then
        IMPList.SetListTypeAndLevel (cStrSMallAllmRad_Lista)
    Else
        Call IMPList.SetListTypeAndLevel(cStrSMallForf_Lista)
    End If
    
End Sub
Sub InsertParaAfter(strStyle As String, paraAround As Paragraph)
    paraAround.Range.Select
    'MsgBox ("S|fffd|tt in " + strStyle + " efter " + Selection.Range.Style)
    Selection.EndKey Unit:=wdLine
    Selection.TypeParagraph
    Selection.Style = strStyle
    'Selection.TypeText ("xx")
    
    
End Sub
Sub InsertParaBefore(strStyle As String, paraAround As Paragraph, Optional bKeepPos As Boolean = False)
    paraAround.Range.Select
    
    Dim bWasEmpty As Boolean
    bWasEmpty = False
    If (IsEmptyRowAtSelection) Then
        Selection.TypeText ("xx") 'TypeParagraph uppf|fffd|r sig annorlunda om tomrad och stycket har following paragraph satt
        bWasEmpty = True
    End If
    'MsgBox ("S|fffd|tt in " + strStyle + " f|fffd|re " + Selection.Range.Style)
    Selection.HomeKey Unit:=wdLine
    Selection.TypeParagraph
    If (bWasEmpty) Then
        Selection.Delete Unit:=wdCharacter, Count:=1
        Selection.Delete Unit:=wdCharacter, Count:=1
    End If
    Selection.MoveUp Unit:=wdLine, Count:=1
    Selection.Style = strStyle
    If (bKeepPos) Then
        Selection.MoveDown Unit:=wdLine, Count:=1
    End If
    'Selection.TypeText ("xx")
    

End Sub

Sub InsertFootnote()
    With Selection
        With .FootnoteOptions
            .Location = wdBottomOfPage
            .NumberingRule = wdRestartContinuous
            .StartingNumber = 1
            .NumberStyle = wdNoteNumberStyleArabic
        End With
        .Footnotes.Add Range:=Selection.Range, Reference:=""
    End With

End Sub
Sub RemoveAllAndringsMarkeringar()
    'IMPVar.SetDefaultValues
    Dim para1 As Paragraph
    Dim bContinue As Boolean
    bContinue = GetFirstPara(para1)
    While (bContinue)
        If (para1.Range.Tables.Count = 0) Then
            Dim bHasChangeBars As Boolean
            bHasChangeBars = GetAndring(GetParaStyleAsLegal(para1))
            
            If (bHasChangeBars = True) Then
                Call ClearChangeBars(para1)
            End If
        Else
            'Call ToggleTableRow(para1)
        End If
        
        bContinue = GetNextPara(para1)
    Wend
    
    Call RemoveAllAndringInTables
    
End Sub

Sub RemoveAllAndringInTables()
    For intTable = 1 To ImpDoc.Tables.Count
        Dim aTable As Table
        Set aTable = ImpDoc.Tables(intTable)
        If (HasAndringCol(aTable)) Then
            For intCell = 1 To ActiveDocument.Tables(intTable).Columns(1).Cells.Count
                Dim aCell As Cell
                Set aCell = aTable.Columns(1).Cells(intCell)
                If (aCell.Borders(wdBorderLeft).LineStyle = wdLineStyleSingle) Then
                    aCell.Borders(wdBorderLeft).LineStyle = wdLineStyleNone
                End If
            Next intCell
        End If
    Next intTable
        

End Sub
Attribute VB_Name = "CustMallarFunc"
Function CheckNewEmptyRow(Optional bCheckTabs As Boolean = True) As Boolean
    Dim bRes As Boolean
    bRes = True
    On Error GoTo Err1
    
    'Dim intParaIdx As Long
    'intParaIdx = GetParaIdxAtSel
    
    Dim para1 As Paragraph
    Set para1 = Selection.Paragraphs(1)
    
    Dim strText As String
    strText = para1.Range.text
    
    If (bCheckTabs) Then
        If (HasString(strText, Chr(9))) Then bRes = False
    End If
    
    strText = SpecText(strText)
    strText = SpecRemoveUnvis(strText)
    If (SpecLen(strText) > 0) Then
        bRes = False
    End If
Err1:
    CheckNewEmptyRow = bRes
End Function
Sub DoNewEmptyRow()
On Error GoTo Err1
    Dim aPara As Paragraph
    Set aPara = ImpDoc.Paragraphs.Item(GetParaIdxAtSel)
    aPara.Range.text = Chr(13)
Err1:
End Sub
Function GetParaIdxAtSel() As Long
    'Paragrafindex vid selection start
    Dim intRes As Long
    intRes = 0
    
    Dim intSelPos As Long
    intSelPos = Selection.Range.Start
            
    intRes = GetParaIdxFromRange(Selection.Range.Start, True)
    
    GetParaIdxAtSel = intRes
End Function
Function GetParaIdxAtSelEnd() As Long
    'paragrafindex vid selection slut
    Dim intRes As Long
    intRes = 0
    
    intRes = GetParaIdxFromRange(Selection.Range.End, False)
    
    GetParaIdxAtSelEnd = intRes
End Function
Function GetParaIdxFromRange(inRangeStart As Long, Optional bStart As Boolean = True) As Long
    Dim intRes As Long
    intRes = 1
    
    Dim intI As Long
    Dim intStartValue As Long
    intStartValue = 1
    
    'Trolla trolla
    If (ImpDoc.Paragraphs.Count > 50) Then
        intStartValue = GetCloserStartValue(inRangeStart)
    End If
    
    For intI = intStartValue To ImpDoc.Paragraphs.Count
        Dim aPara As Paragraph
        Set aPara = ImpDoc.Paragraphs.Item(intI)
        'If (CustSection.GetParaByIdx(intI, aPara)) Then
            If (bStart) Then
                If (aPara.Range.Start <= inRangeStart) Then
                    If (aPara.Range.End > inRangeStart) Then
                        intRes = intI
                        Exit For
                    End If
                End If
            Else
                If (aPara.Range.End >= inRangeStart) Then
                    If (aPara.Range.Start < inRangeStart) Then
                        intRes = intI
                        Exit For
                    End If
                End If
            End If
        'End If
    Next intI
    GetParaIdxFromRange = intRes
End Function
Function GetCloserStartValue(inRangeStart As Long) As Long
    Dim res As Long
    Dim longMin As Long
    Dim longMax As Long
    Dim aPara As Paragraph
    Dim longSplitValue As Long
    Dim intI As Long
    
    longMin = 1
    longMax = ImpDoc.Paragraphs.Count
    longSplitValue = longMax / 2
    
    'halverar vektor 7 g|fffd|nger f|fffd|r att |fffd|ka effektiviteten
    '1000 para ger en s|fffd|k-range p|fffd|  1000,500,250,125,63,32,16
    '50 para ger 50, 25, 12, 6, 3,2,1
    
    For intI = 1 To 7
        Set aPara = ImpDoc.Paragraphs.Item(longSplitValue)
        'Call CustSection.GetParaByIdx(longSplitValue, aPara)
        If (aPara.Range.Start < inRangeStart) Then
            longMin = longSplitValue
        Else
            longMax = longSplitValue
        End If
        longSplitValue = (longMax - longMin) / 2 + longMin
    Next intI
    GetCloserStartValue = longMin
End Function
Sub ImpConvertToTable()
    'G|fffd|r om markerat omr|fffd|de till tabell
    On Error GoTo Err1
    Dim aTable As Table
    Set aTable = Selection.ConvertToTable
    
    'Ta bort linjer, och "luft" i cellerna
    With aTable
        .Borders(wdBorderLeft).LineStyle = wdLineStyleNone
        .Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Borders(wdBorderTop).LineStyle = wdLineStyleNone
        .Borders(wdBorderBottom).LineStyle = wdLineStyleNone
        .Borders(wdBorderHorizontal).LineStyle = wdLineStyleNone
        .Borders(wdBorderVertical).LineStyle = wdLineStyleNone
        .Borders(wdBorderDiagonalDown).LineStyle = wdLineStyleNone
        .Borders(wdBorderDiagonalUp).LineStyle = wdLineStyleNone
        .TopPadding = CentimetersToPoints(0)
        .BottomPadding = CentimetersToPoints(0)
        .LeftPadding = CentimetersToPoints(0)
        .RightPadding = CentimetersToPoints(0)
        .Spacing = 0
        .AllowPageBreaks = True
        .AllowAutoFit = False
    End With
    
    ImpMsg ("Justera kolumnbredder manuellt.")
    Exit Sub

Err1:
    ImpMsg ("Kan ej g|fffd|ra om markerat omr|fffd|de till tabell.")
End Sub
Function GetTabIdx(inPara As Paragraph, intTabIdx As Long) As Long
    'Returnerar v|fffd|nsterkant eller alla custom tabs d|fffd|refter i points
    'intTabIdx=0 ger v|fffd|nsterkant
    'intTabIdx > 0 ger custom tab i ordningen, 0 om den inte finns
    
    Dim intRes As Long
    intRes = 0
    
    On Error GoTo Err1
    
    If (intTabIdx = 0) Then
        intRes = inPara.Range.ParagraphFormat.LeftIndent + inPara.Range.ParagraphFormat.FirstLineIndent
    End If
    
    Dim aTabStop As TabStop
    Dim intCount As Long
    intCount = 0
    For Each aTabStop In inPara.TabStops
        If (aTabStop.CustomTab = True) Then
            intCount = intCount + 1
            If (intCount = intTabIdx) Then
                intRes = aTabStop.Position
                Exit For
            End If
        Else
        End If
    Next aTabStop
            
Err1:
    GetTabIdx = intRes
End Function

Attribute VB_Name = "CustMallarMain"
'Alla mallar och dess inneh|fffd|llsorienterad namn
' Om du |fffd|ndrar i mallen skall GetLegalStyle funktionen nedan |fffd|ndras.

'Teckenmallar
'Public Const cStrMallStaticTextForts = "BFS-Forts-Tecken"

'Public Const cStrMallIdentitet = "BFS-Identitet-Tecken"
'Public Const cStrMallIdentitetRef = "BFS-Identitet-Ref-Tecken"

'****************** BFS Mallar ***************

'Styckemallar metadata
Public Const cStrSMallUtgava = "BFS-Utg|fffd|va"
Public Const cStrSMallForkortning = "BFS-F|fffd|rkortning"

Public Const cStrSMallUtgivare = "BFS-Utgivare"
Public Const cStrSMallUtkom_FastText = "BFS-Utkom-FastText"
Public Const cStrSMallUtkom_Datum = "BFS-Utkom-Datum"
Public Const cStrSMallUtkom_Datum_Omtryck = "BFS-Utkom-Datum-Omtryck"
Public Const cStrSMallBeslutDatum = "BFS-Beslut-Datum"
Public Const cStrSMallTitel = "BFS-Titel"

Public Const cStrSMallBemyndigande = "BFS-Bemyndigande-Stycke"
Public Const cStrSMallBemyndigande_Indrag = "BFS-Bemyndigande-Stycke-Indrag"
Public Const cStrSMallIkraft_Linje = "BFS-Ikraft-Linje"
Public Const cStrSMallIkraft_Stycke = "BFS-Ikraft-Stycke"

Public Const cStrSMallUnderskrift = "BFS-Underskrift"
Public Const cStrSMallKontra_Namn = "BFS-Kontra-Namn"
Public Const cStrSMallKontra_Org = "BFS-Kontra-Organisation"

'Styckemallar Text


Public Const cStrSMallForf = "BFS-F|fffd|reskrift"
Public Const cStrSMallForf_Paragraf = "BFS-F|fffd|reskrift-Paragraf"
Public Const cStrSMallForf_Indrag = "BFS-F|fffd|reskrift-Indrag"
Public Const cStrSMallForf_Lista = "BFS-F|fffd|reskrift-Lista-1"
Public Const cStrSMallForf_Lista2 = "BFS-F|fffd|reskrift-Lista-2"
Public Const cStrSMallForf_Lista3 = "BFS-F|fffd|reskrift-Lista-3"
Public Const cStrSMallForf_Lista4 = "BFS-F|fffd|reskrift-Lista-4"

Public Const cStrSMallAllmRad_Start = "BFS-AllmR|fffd|d-Rubrik"
Public Const cStrSMallAllmRad = "BFS-AllmR|fffd|d"
Public Const cStrSMallAllmRad_Paragraf = "BFS-AllmR|fffd|d-Paragraf"
Public Const cStrSMallAllmRad_Indrag = "BFS-AllmR|fffd|d-Indrag"
Public Const cStrSMallAllmRad_Lista = "BFS-AllmR|fffd|d-Lista-1"
Public Const cStrSMallAllmRad_Lista2 = "BFS-AllmR|fffd|d-Lista-2"
Public Const cStrSMallAllmRad_Lista3 = "BFS-AllmR|fffd|d-Lista-3"
Public Const cStrSMallAllmRad_Lista4 = "BFS-AllmR|fffd|d-Lista-4"

'Rubriker
'Public Const cStrSMallRubrik1 = "BFS-Rubrik-1"
Public Const cStrSMallRubrik2 = "BFS-Rubrik-Mellan-1"
Public Const cStrSMallRubrik3 = "BFS-Rubrik-Mellan-2"
Public Const cStrSMallRubrik4 = "BFS-Rubrik-Mellan-3"
Public Const cStrSMallRubrik5 = "BFS-Rubrik-Mellan-4"
'BFS BBR Rubrik
Public Const cStrSMall_BFSBBR_Rubrik1 = "BFS-BBR-Rubrik-1"
Public Const cStrSMall_BFSBBR_Rubrik2 = "BFS-BBR-Rubrik-2"
Public Const cStrSMall_BFSBBR_Rubrik3 = "BFS-BBR-Rubrik-3"
Public Const cStrSMall_BFSBBR_Rubrik4 = "BFS-BBR-Rubrik-4"
Public Const cStrSMall_BFSBBR_Rubrik5 = "BFS-BBR-Rubrik-5"

'Tabeller och bilder
Public Const cStrSMallForf_TabellRubrik = "BFS-Tabell-Rubrik-F|fffd|reskrift"
Public Const cStrSMallForf_TabellHuvud = "BFS-Tabell-Huvud-F|fffd|reskrift"
Public Const cStrSMallForf_TabellText = "BFS-Tabell-Text-F|fffd|reskrift"
Public Const cStrSMallForf_TabellLista = "BFS-Tabell-Lista-1-F|fffd|reskrift"
Public Const cStrSMallForf_TabellLista2 = "BFS-Tabell-Lista-2-F|fffd|reskrift"
Public Const cStrSMallForf_TabellNot = "BFS-Tabell-Not-F|fffd|reskrift"
Public Const cStrSMallForf_BildRubrik = "BFS-Bild-Rubrik-F|fffd|reskrift"

Public Const cStrSMallAllmRad_TabellRubrik = "BFS-Tabell-Rubrik-AllmR|fffd|d"
Public Const cStrSMallAllmRad_TabellHuvud = "BFS-Tabell-Huvud-AllmR|fffd|d"
Public Const cStrSMallAllmRad_TabellText = "BFS-Tabell-Text-AllmR|fffd|d"
Public Const cStrSMallAllmRad_TabellLista = "BFS-Tabell-Lista-1-AllmR|fffd|d"
Public Const cStrSMallAllmRad_TabellLista2 = "BFS-Tabell-Lista-2-AllmR|fffd|d"
Public Const cStrSMallAllmRad_TabellNot = "BFS-Tabell-Not-AllmR|fffd|d"
Public Const cStrSMallAllmRad_BildRubrik = "BFS-Bild-Rubrik-AllmR|fffd|d"

Public Const cStrSMall_TabellStreck = "BFS-Tabell-Kantstreck"
Public Const cStrSMall_Tomrad6pt = "BFS-Tomrad-6pt"
Public Const cStrSMall_BrytKantstreck = "BFS-Bryt-Kantstreck"


'Bilagor
Public Const cStrSMallBilaga_Rubrik = "BFS-Bilaga-Rubrik"
Public Const cStrSMallBilaga_Rubrik1 = "BFS-Bilaga-Rubrik-1"
Public Const cStrSMallBilaga_Rubrik2 = "BFS-Bilaga-Rubrik-2"

'Kapitel
Public Const cStrSMallKapitel_Rubrik1 = "BFS-Kapitel-Rubrik-1"
Public Const cStrSMallInnehall_Rubrik1 = "BFS-Innehall-Rubrik-1"

'Header
Public Const cStrSMallHeader_Jamn_Utgava = "BFS-Header-J|fffd|mn-Utg|fffd|va"
Public Const cStrSMallHeader_Jamn_Forkortning = "BFS-Header-J|fffd|mn-F|fffd|rkortning"
Public Const cStrSMallHeader_Udda_Utgava = "BFS-Header-Udda-Utg|fffd|va"
Public Const cStrSMallHeader_Udda_Forkortning = "BFS-Header-Udda-F|fffd|rkortning"


'|fffd|ndring
Public Const cAndring = "-|fffd|ndring"
Public Const cStrSMallAllmRad_Start_Text = "Allm|fffd|nt r|fffd|d"

'|fffd|vriga hj|fffd|lpmallar
Public Const cStrSMallNormal = "BFS-F|fffd|reskrift" 'Skall alltid finnas som default
Public Const cStrSMallNormalList = "BFS-F|fffd|reskrift-Lista-1" 'Skall alltid finnas som default lista
Public Const cStrSMallListaNew = "BFS-Lista-Ny-Rad"

'

Function GetMallStrFromIdx(inintIdx As Long) As String
    '0 ger antal
    'x ger mallen x
    Dim strRes As String
    strRes = ""
    
    'Styckemallar metadata
    If (inintIdx = 1) Then strRes = cStrSMallUtgava
    If (inintIdx = 2) Then strRes = cStrSMallForkortning
    If (inintIdx = 3) Then strRes = cStrSMallUtgivare
    If (inintIdx = 4) Then strRes = cStrSMallUtkom_FastText
    If (inintIdx = 5) Then strRes = cStrSMallUtkom_Datum
    If (inintIdx = 6) Then strRes = cStrSMallUtkom_Datum_Omtryck
    If (inintIdx = 7) Then strRes = cStrSMallBeslutDatum
    If (inintIdx = 8) Then strRes = cStrSMallTitel
    If (inintIdx = 9) Then strRes = cStrSMallBemyndigande
    If (inintIdx = 10) Then strRes = cStrSMallBemyndigande_Indrag
    If (inintIdx = 11) Then strRes = cStrSMallIkraft_Linje
    If (inintIdx = 12) Then strRes = cStrSMallIkraft_Stycke
    If (inintIdx = 13) Then strRes = cStrSMallUnderskrift
    If (inintIdx = 14) Then strRes = cStrSMallKontra_Namn
    If (inintIdx = 15) Then strRes = cStrSMallKontra_Org
    
    'Styckemallar Text
    If (inintIdx = 16) Then strRes = cStrSMallForf
    If (inintIdx = 17) Then strRes = cStrSMallForf_Paragraf
    If (inintIdx = 18) Then strRes = cStrSMallForf_Indrag
    If (inintIdx = 19) Then strRes = cStrSMallForf_Lista
    If (inintIdx = 20) Then strRes = cStrSMallForf_Lista2

    If (inintIdx = 21) Then strRes = cStrSMallAllmRad_Start
    If (inintIdx = 22) Then strRes = cStrSMallAllmRad
    If (inintIdx = 23) Then strRes = cStrSMallAllmRad_Paragraf
    If (inintIdx = 24) Then strRes = cStrSMallAllmRad_Indrag
    If (inintIdx = 25) Then strRes = cStrSMallAllmRad_Lista
    If (inintIdx = 26) Then strRes = cStrSMallAllmRad_Lista2

    'Rubriker
    If (inintIdx = 27) Then strRes = cStrSMallRubrik2 'Om igen
    If (inintIdx = 28) Then strRes = cStrSMallRubrik2
    If (inintIdx = 29) Then strRes = cStrSMallRubrik3
    If (inintIdx = 30) Then strRes = cStrSMallRubrik4
    If (inintIdx = 31) Then strRes = cStrSMallRubrik5
    
    'Tabeller och bilder
    If (inintIdx = 32) Then strRes = cStrSMallForf_TabellRubrik
    If (inintIdx = 33) Then strRes = cStrSMallForf_TabellHuvud
    If (inintIdx = 34) Then strRes = cStrSMallForf_TabellText
    If (inintIdx = 35) Then strRes = cStrSMallForf_TabellLista
    If (inintIdx = 36) Then strRes = cStrSMallForf_TabellLista2
    If (inintIdx = 37) Then strRes = cStrSMallForf_TabellNot
    If (inintIdx = 38) Then strRes = cStrSMallForf_BildRubrik
   
    If (inintIdx = 39) Then strRes = cStrSMallAllmRad_TabellRubrik
    If (inintIdx = 40) Then strRes = cStrSMallAllmRad_TabellHuvud
    If (inintIdx = 41) Then strRes = cStrSMallAllmRad_TabellText
    If (inintIdx = 42) Then strRes = cStrSMallAllmRad_TabellLista
    If (inintIdx = 43) Then strRes = cStrSMallAllmRad_TabellLista2
    If (inintIdx = 44) Then strRes = cStrSMallAllmRad_TabellNot
    If (inintIdx = 45) Then strRes = cStrSMallAllmRad_BildRubrik
    
    If (inintIdx = 46) Then strRes = cStrSMall_TabellStreck
    
    'F|fffd|rteckningar
    
    'BBR
    
    If (inintIdx = 47) Then strRes = cStrSMall_BFSBBR_Rubrik1
    If (inintIdx = 48) Then strRes = cStrSMall_BFSBBR_Rubrik2
    If (inintIdx = 49) Then strRes = cStrSMall_BFSBBR_Rubrik3
    If (inintIdx = 50) Then strRes = cStrSMall_BFSBBR_Rubrik4
    If (inintIdx = 51) Then strRes = cStrSMall_BFSBBR_Rubrik5
       
    'Nya
    If (inintIdx = 52) Then strRes = cStrSMall_BrytKantstreck
    If (inintIdx = 53) Then strRes = cStrSMallBilaga_Rubrik
    If (inintIdx = 54) Then strRes = cStrSMallBilaga_Rubrik1
    If (inintIdx = 55) Then strRes = cStrSMallBilaga_Rubrik2
    If (inintIdx = 56) Then strRes = cStrSMallKapitel_Rubrik1
    If (inintIdx = 57) Then strRes = cStrSMallInnehall_Rubrik1
    If (inintIdx = 58) Then strRes = cStrSMallForf_Lista3
    If (inintIdx = 59) Then strRes = cStrSMallForf_Lista4
    If (inintIdx = 60) Then strRes = cStrSMallAllmRad_Lista3
    If (inintIdx = 61) Then strRes = cStrSMallAllmRad_Lista4

    'Antalet
    If (inintIdx = 0) Then strRes = "61"
    
    GetMallStrFromIdx = strRes
End Function
Function GetIMPinStyle(inStrStyle As String) As String
    'Returnera Style med Lower och r|fffd|tt namn enligt IMPin standard
    ' |fffd|r namnet fel |fffd|r den tom
    Dim strRes As String
    strRes = ""
    
    Dim strLegalStyle As String
    strLegalStyle = GetLegalName(inStrStyle)
    
    'Utg|fffd| ifr|fffd|n r|fffd|tt
    strRes = strLegalStyle
    
    '************************** Start mall |fffd|vers|fffd|ttning *********************
    '|fffd|vers|fffd|tt kundspecifikt
    If (inStrStyle = GetLegalName("Sidhuvud")) Then strRes = GetLegalName("Normal")
    If (inStrStyle = GetLegalName("xxx")) Then strRes = GetLegalName("Normal")
    '************************** Slut mall |fffd|vers|fffd|ttning *********************
    
    
    GetIMPinStyle = strRes
End Function
Function GetCustomStyle(inStrIMPinStyle As String) As String
    'En av konstanterna in och custom ut
    Dim strRes As String
    strRes = ""
    
    '************************** Start mall |fffd|vers|fffd|ttning *********************
    '|fffd|vers|fffd|tt kundspecifikt
    ' If (inStrIMPinStyle = cStrSMallAllmRad) Then strRes = "xxx"
    '************************** Slut mall |fffd|vers|fffd|ttning *********************
      
    GetCustomStyle = strRes
End Function
Function GetStrStyle(inStyleIdx As Long) As String
    On Error GoTo Error1
    Dim strRes As String
    strRes = ""
    strRes = ImpDoc.Styles(inStyleIdx)
Error1:
    GetStrStyle = strRes
End Function
Function GetStyleIdx(inStrStyle As String, Optional bCaseSense As Boolean = False) As Long
    Dim intRes As Long
    intRes = 0
    
    Dim intCount As Long
    intCount = 0
    
    Dim strInLegalStyle As String
    strInLegalStyle = GetLegalName(inStrStyle)
    
    Dim style1 As Style
    For Each style1 In ImpDoc.Styles
        intCount = intCount + 1
        Dim strStyle As String
        Dim strLegal As String
        strStyle = style1
        strLegal = GetLegalName(strStyle)
        If (bCaseSense) Then
             If (strStyle = inStrStyle) Then
                intRes = intCount
                Exit For
            End If
       Else
            If (strLegal = strInLegalStyle) Then
                intRes = intCount
                Exit For
            End If
        End If
    Next
    
    GetStyleIdx = intRes
End Function

Function IsOkStyle(inStrStyle As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    Dim strLegalStyle As String
    strLegalStyle = GetLegalName(inStrStyle)
    
    Dim intMax As Long
    intMax = StrToInt(GetMallStrFromIdx(0))
    Dim intI As Long
    For intI = 1 To intMax
        If (strLegalStyle = GetLegalName(GetMallStrFromIdx(intI))) Then
            bRes = True
            Exit For
        End If
    Next intI
    
    If (bRes = False) Then
        If (strLegalStyle = "normal") Then bRes = True
    End If
    
    If (bRes = False) Then
        If (GetAndring(strLegalStyle) = True) Then bRes = True
    End If
    IsOkStyle = bRes
End Function
Function GetNormalSize() As Long
    Dim intRes As Long
    intRes = 11
    Dim intIdx As Long
    intIdx = GetStyleIdx(cStrSMallForf)
    If (intIdx > 0) Then
        intRes = ImpDoc.Styles(intIdx).Font.Size
    End If
    
    GetNormalSize = intRes
End Function
Sub StylesToFile()
    IMPVar.SetDefaultValues
    Dim intI As Long
    For intI = 1 To ImpDoc.Styles.Count
        Dim strStyle As String
        strStyle = ImpDoc.Styles(intI)
        Call ImpFile.SaveAppendToFile(strStyle, "D:\temp\mallar.txt")
        'MsgBox (strStyle)
    Next intI
End Sub
Function IsListaMall(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalName(inStrMall)
    
    If (HasString(strLegalStyle, "lista") = True) Then bRes = True
    
    IsListaMall = bRes
End Function
Function IsTabellMall(inStrStyle As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrStyle)
    
    If (GetLegalUtanAndring(CustMallarMain.cStrSMallForf_TabellHuvud) = strLegalStyle) Then bRes = True
    If (GetLegalUtanAndring(CustMallarMain.cStrSMallForf_TabellText) = strLegalStyle) Then bRes = True
    If (GetLegalUtanAndring(CustMallarMain.cStrSMallForf_TabellLista) = strLegalStyle) Then bRes = True
    If (GetLegalUtanAndring(CustMallarMain.cStrSMallForf_TabellLista2) = strLegalStyle) Then bRes = True
    
    If (GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_TabellHuvud) = strLegalStyle) Then bRes = True
    If (GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_TabellText) = strLegalStyle) Then bRes = True
    If (GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_TabellLista) = strLegalStyle) Then bRes = True
    If (GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_TabellLista2) = strLegalStyle) Then bRes = True
    
    IsTabellMall = bRes

End Function
Function GetListLevelFromMallStyle(inStrStyle As String) As Long
    'Mallar som skall ha niv|fffd| i xml
    Dim intRes As Long
    intRes = 0
    
    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrStyle)
    If (HasString(strLegalStyle, "lista")) Then intRes = 1
    If (HasString(strLegalStyle, "lista1")) Then intRes = 1
    If (HasString(strLegalStyle, "lista2")) Then intRes = 2
    If (HasString(strLegalStyle, "lista3")) Then intRes = 3
    If (HasString(strLegalStyle, "lista4")) Then intRes = 3
    If (IMPFunction.EqualLegalName(strLegalStyle, cStrSMallListaNew)) Then intRes = 0
    
    GetListLevelFromMallStyle = intRes

End Function
Function GetRubrikLevelFromMallStyle(inStrStyle As String) As Long
    Dim intRes As Long
    intRes = 0
    
    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrStyle)
    If (GetLegalUtanAndring(cStrSMallTitel) = strLegalStyle) Then intRes = 1
    If (GetLegalUtanAndring(cStrSMallBilaga_Rubrik1) = strLegalStyle) Then intRes = 1
    If (GetLegalUtanAndring(cStrSMallInnehall_Rubrik1) = strLegalStyle) Then intRes = 1
    
    If (GetLegalUtanAndring(cStrSMallRubrik2) = strLegalStyle) Then intRes = 2
    If (GetLegalUtanAndring(cStrSMallKapitel_Rubrik1) = strLegalStyle) Then intRes = 2
    If (GetLegalUtanAndring(cStrSMallRubrik3) = strLegalStyle) Then intRes = 3
    If (GetLegalUtanAndring(cStrSMallRubrik4) = strLegalStyle) Then intRes = 4
    If (GetLegalUtanAndring(cStrSMallRubrik5) = strLegalStyle) Then intRes = 5
    
    'If (GetLegalUtanAndring(cStrSMall_BBR_Rubrik1) = strLegalStyle) Then intRes = 1
    'If (GetLegalUtanAndring(cStrSMall_BBR_Rubrik2) = strLegalStyle) Then intRes = 2
    'If (GetLegalUtanAndring(cStrSMall_BBR_Rubrik3) = strLegalStyle) Then intRes = 3
    'If (GetLegalUtanAndring(cStrSMall_BBR_Rubrik4) = strLegalStyle) Then intRes = 4
    'If (GetLegalUtanAndring(cStrSMall_BBR_Rubrik5) = strLegalStyle) Then intRes = 5
    
    If (GetLegalUtanAndring(cStrSMall_BFSBBR_Rubrik1) = strLegalStyle) Then intRes = 1
    If (GetLegalUtanAndring(cStrSMall_BFSBBR_Rubrik2) = strLegalStyle) Then intRes = 2
    If (GetLegalUtanAndring(cStrSMall_BFSBBR_Rubrik3) = strLegalStyle) Then intRes = 3
    If (GetLegalUtanAndring(cStrSMall_BFSBBR_Rubrik4) = strLegalStyle) Then intRes = 4
    If (GetLegalUtanAndring(cStrSMall_BFSBBR_Rubrik5) = strLegalStyle) Then intRes = 5
      
    
    GetRubrikLevelFromMallStyle = intRes
End Function
Function IsAllmRadMall(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalName(inStrMall)
    
    If (HasString(strLegalStyle, "allmrad") = True) Then bRes = True
    
    IsAllmRadMall = bRes
End Function
Function IsIndragMall(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalName(inStrMall)
    
    If (HasString(strLegalStyle, "indrag") = True) Then bRes = True
    
    IsIndragMall = bRes
End Function
Function IsEmptyRowBeforeMall(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrMall)
    
    If (GetLegalUtanAndring(cStrSMallRubrik2) = strLegalStyle) Then bRes = True
    If (GetLegalUtanAndring(cStrSMallRubrik3) = strLegalStyle) Then bRes = True
    
    IsEmptyRowBeforeMall = bRes
End Function
Function IsJurParagrafMall(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalName(inStrMall)
    
    If (HasString(strLegalStyle, "paragraf") = True) Then bRes = True
    
    IsJurParagrafMall = bRes
End Function
Function IsBBRRubrikMall(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalName(inStrMall)
    
    'If (IMPFunction.EqualLegalName(inStrMall, cStrSMall_BBR_Rubrik1)) Then bRes = True
    'If (IMPFunction.EqualLegalName(inStrMall, cStrSMall_BBR_Rubrik2)) Then bRes = True
    'If (IMPFunction.EqualLegalName(inStrMall, cStrSMall_BBR_Rubrik3)) Then bRes = True
    'If (IMPFunction.EqualLegalName(inStrMall, cStrSMall_BBR_Rubrik4)) Then bRes = True
    'If (IMPFunction.EqualLegalName(inStrMall, cStrSMall_BBR_Rubrik5)) Then bRes = True
    
    If (IMPFunction.EqualLegalName(inStrMall, cStrSMall_BFSBBR_Rubrik1)) Then bRes = True
    If (IMPFunction.EqualLegalName(inStrMall, cStrSMall_BFSBBR_Rubrik2)) Then bRes = True
    If (IMPFunction.EqualLegalName(inStrMall, cStrSMall_BFSBBR_Rubrik3)) Then bRes = True
    If (IMPFunction.EqualLegalName(inStrMall, cStrSMall_BFSBBR_Rubrik4)) Then bRes = True
    If (IMPFunction.EqualLegalName(inStrMall, cStrSMall_BFSBBR_Rubrik5)) Then bRes = True
    
    
    IsBBRRubrikMall = bRes
End Function
Function IsTabellStreck(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalName(inStrMall)
    
    If (IMPFunction.EqualLegalName(inStrMall, cStrSMall_TabellStreck)) Then bRes = True
    'If (IMPFunction.EqualLegalName(inStrMall, cStrSMall_BBR__TabellStreck)) Then bRes = True
    
    
    IsTabellStreck = bRes
End Function
Function IsAllmantRadStart(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrMall)
    
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_AllmRad_Start)) Then bRes = True
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_Start)) Then bRes = True
    
    IsAllmantRadStart = bRes
End Function
Function Is2Col(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrMall)
    
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_AllmRad_2Col)) Then bRes = True
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_Forf_2Col)) Then bRes = True
    
    Is2Col = bRes
End Function


Function MallHasOkFont(inPara As Paragraph) As Boolean
    On Error GoTo Err1
    Dim bRes As Boolean
    bRes = True
    
'    If (inPara.Range.Font.Size <> inPara.Range.Style.Font.Size) Then
'        bRes = False
'    End If
'    If (inPara.Range.Font.Name <> inPara.Range.Style.Font.Name) Then
'        bRes = False
'    End If
       
       
Err1:
    MallHasOkFont = bRes
End Function

Function IsAllowedWithTab(inLegalStyle As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    Dim strLegal As String
    strLegal = GetLegalName(inLegalStyle)
    Dim strLegalUA As String
    strLegalUA = GetLegalUtanAndring(inLegalStyle)
    
    'lista
    If (IsListaMall(strLegalUA)) Then bRes = True
    'paragraf
    'If (strLegalUA = GetLegalName(cStrSMallForf_Paragraf)) Then bRes = True
    'If (strLegalUA = GetLegalName(cStrSMallAllmRad_Paragraf)) Then bRes = True
    'Kontra
    If (strLegalUA = GetLegalName(cStrSMallKontra_Namn)) Then bRes = True
    If (strLegalUA = GetLegalName(cStrSMallKontra_Org)) Then bRes = True
    'Ikraftlinje
    If (strLegalUA = GetLegalName(cStrSMallIkraft_Linje)) Then bRes = True
    'Rubrik
    If (HasString(strLegalUA, "rubrik")) Then bRes = True
    '|fffd|ndring
    If (HasString(strLegal, "andring")) Then bRes = True
    'Tankestreck
    '2kol
    'If (strLegalUA = GetLegalName(cStrSMall_BBR_Forf_2Col)) Then bRes = True
    'If (strLegalUA = GetLegalName(cStrSMall_BBR_AllmRad_2Col)) Then bRes = True
    'Not
    If (HasString(inLegalStyle, "not")) Then bRes = True
    'Start
    If (HasString(inLegalStyle, "start")) Then bRes = True
    'Bemyndigande
    If (strLegalUA = GetLegalName(cStrSMallBemyndigande)) Then bRes = True

Err1:
    IsAllowedWithTab = bRes
End Function

Function GetLegalUtanAndring(strLegalStyle As String) As String
    'G|fffd|r om till legal och tar bort |fffd|ndring om den finns med
    Dim strRes As String
    strRes = GetLegalName(strLegalStyle)
    
    Dim intPos As Long
    intPos = ImpPos(strLegalStyle, GetLegalName(cAndring))
    
    If (intPos > 0) Then strRes = ImpMid(strRes, 1, intPos - 1)
    
    GetLegalUtanAndring = strRes
End Function

Function IsIngressMall(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrMall)
    
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallBemyndigande)) Then bRes = True
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallBemyndigande_Indrag)) Then bRes = True
    
    IsIngressMall = bRes
End Function
Function IsIkraftMall(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrMall)
    
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallIkraft_Linje)) Then bRes = True
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallIkraft_Stycke)) Then bRes = True
    
    IsIkraftMall = bRes
End Function
Function IsSigneringMall(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrMall)
    
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallKontra_Namn)) Then bRes = True
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallKontra_Org)) Then bRes = True
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallUnderskrift)) Then bRes = True
    
    IsSigneringMall = bRes
End Function
Function IsDocInfoMall(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrMall)
    
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallBeslutDatum)) Then bRes = True
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallUtgava)) Then bRes = True
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallUtgivare)) Then bRes = True
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallUtkom_Datum)) Then bRes = True
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallUtkom_Datum_Omtryck)) Then bRes = True
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallUtkom_FastText)) Then bRes = True
    
    IsDocInfoMall = bRes
End Function
Function IsFirstPageMall(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrMall)
    
    'If (strlegalstyle = GetLegalUtanAndring(CustMallarMain.xxx)) Then bRes = True
    
    IsFirstPageMall = bRes
End Function
Function IsBilagaRubrik(inStrMall As String) As Boolean
    Dim bRes As Boolean
    bRes = False

    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrMall)
    
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallBilaga_Rubrik)) Then bRes = True
    
    IsBilagaRubrik = bRes
End Function
Function GetPart(inStrStyle As String) As String
    'Returnera vilken part eller brytningstyp stycket har
    Dim strRes As String
    strRes = "text"
    
    On Error GoTo Err1
    If (CustMallarMain.IsAllmRadMall(inStrStyle)) Then strRes = "allmrad"
    If (CustMallarMain.IsAllmantRadStart(inStrStyle)) Then strRes = "rubrikallmrad"
    If (CustMallarMain.IsJurParagrafMall(inStrStyle)) Then strRes = "rubrikjurpara"
    If (CustMallarMain.GetRubrikLevelFromMallStyle(inStrStyle) > 0) Then strRes = "rubrik"
    If (CustMallarMain.IsIngressMall(inStrStyle)) Then strRes = "ingress"
    If (CustMallarMain.IsIkraftMall(inStrStyle)) Then strRes = "ikraft"
    If (CustMallarMain.IsSigneringMall(inStrStyle)) Then strRes = "signering"
    If (CustMallarMain.IsDocInfoMall(inStrStyle)) Then strRes = "docinfo"
    If (CustMallarMain.IsFirstPageMall(inStrStyle)) Then strRes = "firstpage"
    If (CustMallarMain.IsBilagaRubrik(inStrStyle)) Then strRes = "rubrikbilaga"
    
Err1:
    GetPart = strRes
End Function
Function IsNewListRow(inPara1 As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    If (inPara1.Range.Style = CustMallarMain.cStrSMallListaNew) Then bRes = True
    
    IsNewListRow = bRes
   
End Function
Sub ttMargin()
    'On Error Resume Next
    Dim aStyle As Style
    For Each aStyle In ActiveDocument.Styles
        Dim strStyle As String
        strStyle = aStyle
    Next aStyle
End Sub
Function IsMarginStyle(aStyle As Style) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
        If (aStyle.ParagraphFormat.Alignment = wdAlignParagraphJustify) Then
            bRes = True
        End If

Err1:
    IsMarginStyle = bRes
End Function
Function GetCombinationStyleSpace(inStrStyle1 As String, inStrStyle2 As String) As Long
    'Vissa kombinationer av mallar skall ha mindre mellanrum
    ' Om inte kombinationen finns, s|fffd| blir resultatet -1
    Dim intRes As Long
    intRes = -1
    On Error GoTo Err1
        
    'Rubrik3-Rubrik4
'    If (GetLegalUtanAndring(inStrStyle2) = GetLegalUtanAndring(CustMallarMain.cStrSMall_BFSBBR_Rubrik4)) Then
'        If (GetLegalUtanAndring(inStrStyle1) = GetLegalUtanAndring(CustMallarMain.cStrSMall_BFSBBR_Rubrik3)) Then
'            intRes = 0
'        Else
'            intRes = 6
'        End If
'    End If
    
    'Not-Not|fffd|ndring
    If (GetLegalName(inStrStyle1) = GetLegalName(CustMallarMain.cStrSMallForf_TabellNot)) Then
        If (GetLegalName(inStrStyle2) = GetLegalName(CustMallarMain.cStrSMallForf_TabellNot & CustMallarMain.cAndring)) Then intRes = 0
    End If
    'Not|fffd|ndring-Not
    If (GetLegalName(inStrStyle1) = GetLegalName(CustMallarMain.cStrSMallForf_TabellNot & CustMallarMain.cAndring)) Then
        If (GetLegalName(inStrStyle2) = GetLegalName(CustMallarMain.cStrSMallForf_TabellNot)) Then intRes = 0
    End If
    'Not-Not|fffd|ndring AllmR|fffd|d
    If (GetLegalName(inStrStyle1) = GetLegalName(CustMallarMain.cStrSMallAllmRad_TabellNot)) Then
        If (GetLegalName(inStrStyle2) = GetLegalName(CustMallarMain.cStrSMallAllmRad_TabellNot & CustMallarMain.cAndring)) Then intRes = 0
    End If
    'Not|fffd|ndring-Not AllmR|fffd|d
    If (GetLegalName(inStrStyle1) = GetLegalName(CustMallarMain.cStrSMallAllmRad_TabellNot & CustMallarMain.cAndring)) Then
        If (GetLegalName(inStrStyle2) = GetLegalName(CustMallarMain.cStrSMallAllmRad_TabellNot)) Then intRes = 0
    End If
Err1:
    GetCombinationStyleSpace = intRes
End Function
Function GetIncreasedListLevel(inStrMall As String) As String
    Dim strRes As String
    strRes = cStrSMallNormalList
    
    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrMall)
    
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallForf_Lista)) Then strRes = CustMallarMain.cStrSMallForf_Lista2
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallForf_Lista2)) Then strRes = CustMallarMain.cStrSMallForf_Lista3
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallForf_Lista3)) Then strRes = CustMallarMain.cStrSMallForf_Lista4
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallForf_Lista4)) Then strRes = CustMallarMain.cStrSMallForf_Lista4
    
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_Lista)) Then strRes = CustMallarMain.cStrSMallAllmRad_Lista2
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_Lista2)) Then strRes = CustMallarMain.cStrSMallAllmRad_Lista3
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_Lista3)) Then strRes = CustMallarMain.cStrSMallAllmRad_Lista4
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_Lista4)) Then strRes = CustMallarMain.cStrSMallAllmRad_Lista4
    
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_Forf_TabellLista)) Then strRes = CustMallarMain.cStrSMall_BBR_Forf_TabellLista2
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_Forf_TabellLista2)) Then strRes = CustMallarMain.cStrSMall_BBR_Forf_TabellLista3
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_Forf_TabellLista3)) Then strRes = CustMallarMain.cStrSMall_BBR_Forf_TabellLista4
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_Forf_TabellLista4)) Then strRes = CustMallarMain.cStrSMall_BBR_Forf_TabellLista4
    
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista)) Then strRes = CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista2
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista2)) Then strRes = CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista3
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista3)) Then strRes = CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista4
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista4)) Then strRes = CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista4
    

    GetIncreasedListLevel = strRes
End Function
Function GetDecreasedListLevel(inStrMall As String) As String
    Dim strRes As String
    strRes = cStrSMallNormalList
    
    Dim strLegalStyle As String
    strLegalStyle = GetLegalUtanAndring(inStrMall)
    
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallForf_Lista)) Then strRes = CustMallarMain.cStrSMallForf_Lista
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallForf_Lista2)) Then strRes = CustMallarMain.cStrSMallForf_Lista
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallForf_Lista3)) Then strRes = CustMallarMain.cStrSMallForf_Lista2
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallForf_Lista4)) Then strRes = CustMallarMain.cStrSMallForf_Lista3
    
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_Lista)) Then strRes = CustMallarMain.cStrSMallAllmRad_Lista
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_Lista2)) Then strRes = CustMallarMain.cStrSMallAllmRad_Lista
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_Lista3)) Then strRes = CustMallarMain.cStrSMallAllmRad_Lista2
    If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMallAllmRad_Lista4)) Then strRes = CustMallarMain.cStrSMallAllmRad_Lista3
    
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_Forf_TabellLista)) Then strRes = CustMallarMain.cStrSMall_BBR_Forf_TabellLista
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_Forf_TabellLista2)) Then strRes = CustMallarMain.cStrSMall_BBR_Forf_TabellLista
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_Forf_TabellLista3)) Then strRes = CustMallarMain.cStrSMall_BBR_Forf_TabellLista2
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_Forf_TabellLista4)) Then strRes = CustMallarMain.cStrSMall_BBR_Forf_TabellLista3
    
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista)) Then strRes = CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista2)) Then strRes = CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista3)) Then strRes = CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista2
    'If (strLegalStyle = GetLegalUtanAndring(CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista4)) Then strRes = CustMallarMain.cStrSMall_BBR_AllmRad_TabellLista3

    GetDecreasedListLevel = strRes
End Function

Attribute VB_Name = "CustMeta"
'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16

'skribent
Public Const cStrPropMyndighet = "Myndighet" 'Myndighet
Public Const cStrPropEnhet = "Enhet" 'Uppr|fffd|ttande enhet
Public Const cStrPropSkribent = "Skribent" 'Skribent
Public Const cStrPropUnderskrift = "Underskrift" 'Underskrift
Public Const cStrPropSignering = "Signering" 'Signering
    


'Titel
Public Const cStrPropForfattninssamling = "F|fffd|rfattningssamling" 'F|fffd|rfattningssamling
'Public Const cStrPropTitel = "Titel" 'Rubrik
Public Const cStrPropTitel1 = "Titel" 'Rubrik1
Public Const cStrPropTitel2 = "Titel2" 'Rubrik2
Public Const cStrPropTitel3 = "Titel3" 'Rubrik3
Public Const cStrPropUtgava = "Utg|fffd|va"
Public Const cStrPropForfattningstyp = "F|fffd|rfattningstyp" '
    Public Const cStrPropForfattningstyp_Grund = "Grundf|fffd|rfattning" '
    Public Const cStrPropForfattningstyp_Andring = "|fffd|ndringsf|fffd|rfattning" '
    Public Const cStrPropForfattningstyp_NyttAR = "allm|fffd|nt r|fffd|d" '
    Public Const cStrPropForfattningstyp_AndratAR = "|fffd|ndrat allm|fffd|nt r|fffd|d" '
Public Const cStrPropGrundforfattning = "Grundf|fffd|rfattning" '
Public Const cStrPropOmtryck = "OmtryckAv" '
Public Const cStrPropBemyndigande = "Bemyndigande" '

'Admin
Public Const cStrPropBeslutsdatum = "Beslutsdatum" 'Beslutsdatum
Public Const cStrPropTryckdatum = "Tryckdatum" 'Tryckdatum
Public Const cStrPropIkraftdatum = "Ikraftdatum" 'Ikraftdatum
Public Const cStrPropIssn = "ISSN"

'BFS-Specifika
Public Const cStrPropKomplett = "Komplett"
Public Const cStrPropKomplett_yes = "ja"
Public Const cStrPropKomplett_no = "nej"
Public Const cStrPropForkortning = "F|fffd|rkortning"
Public Const cStrPropUtgivare = "Utgivare"
'Public Const cStrPropRefForfattning = "Ref_F|fffd|rfattning"
'Public Const cStrPropRefForkortning = "Ref_F|fffd|rkortning"


'S|fffd|kord
Public Const cStrPropSokord = "Sokord" 'Uppslagsord, finns bara i exporten via funktionen getsokord
Public Const cStrPropSokord1 = "Sokord1" 'Uppslagsord
Public Const cStrPropSokord2 = "Sokord2" 'Uppslagsord
Public Const cStrPropSokord3 = "Sokord3" 'Uppslagsord
Public Const cStrPropSokord4 = "Sokord4" 'Uppslagsord




Function GetDefPropValue(inPropName As String) As String
    'Skapar defaultv|fffd|rden
    Dim strRes As String
    strRes = "ej definerad"
    
    If (GetLegalName(inPropName) = GetLegalName(cStrPropMyndighet)) Then strRes = "Boverket"
    If (GetLegalName(inPropName) = GetLegalName(cStrPropEnhet)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropSkribent)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropUnderskrift)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropSignering)) Then strRes = ""
    
    If (GetLegalName(inPropName) = GetLegalName(cStrPropForfattninssamling)) Then strRes = "Boverkets f|fffd|rfattningssamling"
    'If (GetLegalName(inPropName) = GetLegalName(cStrPropTitel)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropTitel1)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropTitel2)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropTitel3)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropUtgava)) Then strRes = "BFS yyyy:NN" '"BFS " & Format(Date, "yyyy") & ":NN"
    If (GetLegalName(inPropName) = GetLegalName(cStrPropForfattningstyp)) Then strRes = CustMeta.cStrPropForfattningstyp_Andring
    If (GetLegalName(inPropName) = GetLegalName(cStrPropGrundforfattning)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropOmtryck)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropBemyndigande)) Then strRes = ""
    
    
    If (GetLegalName(inPropName) = GetLegalName(cStrPropIssn)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropBeslutsdatum)) Then strRes = "" 'Format(Date, "yyyy") & "-mm-dd"
    If (GetLegalName(inPropName) = GetLegalName(cStrPropTryckdatum)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropIkraftdatum)) Then strRes = Format(Date, "d MMMM yyyy")
                
    If (GetLegalName(inPropName) = GetLegalName(cStrPropSokord1)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropSokord2)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropSokord3)) Then strRes = ""
    If (GetLegalName(inPropName) = GetLegalName(cStrPropSokord4)) Then strRes = ""
               
    If (GetLegalName(inPropName) = GetLegalName(cStrPropDocInit)) Then strRes = cStrPropDocInit_No
    If (GetLegalName(inPropName) = GetLegalName(cStrPropDocStatus)) Then strRes = IMPMetaMain.cStrPropDocStatus_SkribentStart
    
    If (GetLegalName(inPropName) = GetLegalName(cStrPropKomplett)) Then strRes = cStrPropKomplett_yes
    If (GetLegalName(inPropName) = GetLegalName(cStrPropForkortning)) Then strRes = "XML 1"
    If (GetLegalName(inPropName) = GetLegalName(cStrPropUtgivare)) Then strRes = "F|fffd|rnamn Efternamn"
    
    GetDefPropValue = strRes
End Function
Sub SetBuiltInProp(inPropName As String, inPropValue As String)
    On Error GoTo Err1

    'Rubrik
    If (inPropName = cStrPropTitel1) Then
         ImpDoc.BuiltInDocumentProperties(wdPropertyTitle) = inPropValue
    End If
    'BeslutandeChef
    If (inPropName = cStrPropUnderskrift) Then
         ImpDoc.BuiltInDocumentProperties(wdPropertyManager) = inPropValue
    End If
    'Scribent
    If (inPropName = cStrPropSkribent) Then
         ImpDoc.BuiltInDocumentProperties(wdPropertyAuthor) = inPropValue
    End If
    'Enhet
    If (inPropName = CustMeta.cStrPropMyndighet) Then
         ImpDoc.BuiltInDocumentProperties(wdPropertyCompany) = inPropValue
    End If
    
    'Subject
    If (inPropName = CustMeta.cStrPropUtgava) Then
         ImpDoc.BuiltInDocumentProperties(wdPropertySubject) = inPropValue
    End If
    
    'Kategori
    If (inPropName = CustMeta.cStrPropForfattninssamling) Then
         ImpDoc.BuiltInDocumentProperties(wdPropertyCategory) = inPropValue
    End If
    
    'S|fffd|kord och flera nyckelord
    If (inPropName = CustMeta.cStrPropSokord1) Then
         ImpDoc.BuiltInDocumentProperties(wdPropertyKeywords) = inPropValue
    End If
    

Err1:
End Sub
Sub FillMetaFromProp()
'Fyll i dialogen fr|fffd|n Properties

     'skribent
    IMPMetaDialog.TBoxMyndighet.text = GetPropValue(cStrPropMyndighet)
    IMPMetaDialog.TBoxEnhet.text = GetPropValue(cStrPropEnhet)
    IMPMetaDialog.TBoxSkribent.text = GetPropValue(cStrPropSkribent)
    IMPMetaDialog.TBoxUnderskrift.text = GetPropValue(cStrPropUnderskrift)
    IMPMetaDialog.TBoxSignering.text = GetPropValue(cStrPropSignering)
    IMPMetaDialog.TBoxUtgivare.text = GetPropValue(cStrPropUtgivare)
     
     
     'titel
    IMPMetaDialog.TBoxForfattningssamling.text = GetPropValue(cStrPropForfattninssamling)
    IMPMetaDialog.TBoxTitel.text = GetPropValue(cStrPropTitel1) & GetPropValue(cStrPropTitel2) & GetPropValue(cStrPropTitel3)
    IMPMetaDialog.SetUtgavaFromStr (cStrPropUtgava)
    IMPMetaDialog.SetForfattningstypFromStr (GetPropValue(cStrPropForfattningstyp))
    IMPMetaDialog.SetGrundforfattningFromStr (GetPropValue(cStrPropGrundforfattning))
    IMPMetaDialog.TBoxForkortning.text = GetPropValue(cStrPropForkortning)
    IMPMetaDialog.SetOmtryckFromStr (GetPropValue(cStrPropOmtryck))
    IMPMetaDialog.tboxBemyndigande.text = GetPropValue(cStrPropBemyndigande)
    
    
    
    'Publicering
    IMPMetaDialog.SetBeslutsdatumFromStr (GetPropValue(cStrPropBeslutsdatum))
    IMPMetaDialog.SetTryckdatumFromStr (GetPropValue(cStrPropTryckdatum))
    IMPMetaDialog.SetIkraftdatumFromStr (GetPropValue(cStrPropIkraftdatum))
    IMPMetaDialog.TextBoxISSN.text = GetPropValue(cStrPropIssn)
    
    'sok (4)
    IMPMetaDialog.SetUsedSokordFromStr (GetPropValue(cStrPropSokord1) & GetPropValue(cStrPropSokord2) & GetPropValue(cStrPropSokord3) & GetPropValue(cStrPropSokord4))
    
    
    'Ej med i dialogen, men skall f|fffd| defaultv|fffd|rden
    Call GetPropValue(IMPMetaMain.cStrPropDocInit)
    Call GetPropValue(IMPMetaMain.cStrPropDocStatus)
    
End Sub
Sub FillPropFromMeta()
     'skribent
    If (IMPMetaDialog.bMyndighetChanged) Then Call SetPropValue(cStrPropMyndighet, IMPMetaDialog.TBoxMyndighet.text)
    If (IMPMetaDialog.bEnhetChanged) Then Call SetPropValue(cStrPropEnhet, IMPMetaDialog.TBoxEnhet.text)
    If (IMPMetaDialog.bSkribentChanged) Then Call SetPropValue(cStrPropSkribent, IMPMetaDialog.TBoxSkribent.text)
    If (IMPMetaDialog.bUnderskriftChanged) Then Call SetPropValue(cStrPropUnderskrift, UCase(IMPMetaDialog.TBoxUnderskrift.text))
    If (IMPMetaDialog.bSigneringChanged) Then Call SetPropValue(cStrPropSignering, IMPMetaDialog.TBoxSignering.text)
    If (IMPMetaDialog.bUtgivareChanged) Then Call SetPropValue(cStrPropUtgivare, IMPMetaDialog.TBoxUtgivare)
    
     'titel
    If (IMPMetaDialog.bForfattningssamlingChanged) Then Call SetPropValue(cStrPropForfattninssamling, IMPMetaDialog.TBoxForfattningssamling.text)
    If (IMPMetaDialog.bTitelChanged) Then
        Call SetPropValue(cStrPropTitel1, ImpMid(IMPMetaDialog.TBoxTitel.text, 1, 199))
        Call SetPropValue(cStrPropTitel2, ImpMid(IMPMetaDialog.TBoxTitel.text, 200, 399))
        Call SetPropValue(cStrPropTitel3, ImpMid(IMPMetaDialog.TBoxTitel.text, 400, 599))
    End If
    If (IMPMetaDialog.bUtgavaChanged) Then Call SetPropValue(cStrPropUtgava, IMPMetaDialog.GetUtgavaToStr)
    If (IMPMetaDialog.bForfattningstypChanged) Then Call SetPropValue(CustMeta.cStrPropForfattningstyp, IMPMetaDialog.GetForfattningstypToStr)
    If (IMPMetaDialog.bGrundforfattningChanged) Then Call SetPropValue(CustMeta.cStrPropGrundforfattning, IMPMetaDialog.GetGrundforfattningToStr)
    If (IMPMetaDialog.bForkortningChanged) Then Call SetPropValue(CustMeta.cStrPropForkortning, IMPMetaDialog.TBoxForkortning)
    If (IMPMetaDialog.bOmtryckChanged) Then Call SetPropValue(CustMeta.cStrPropOmtryck, IMPMetaDialog.GetOmtryckToStr)
    If (IMPMetaDialog.bBemyndigandeChanged) Then Call SetPropValue(CustMeta.cStrPropBemyndigande, IMPMetaDialog.tboxBemyndigande)
    
    'Publicering
    If (IMPMetaDialog.bTryckdatumChanged) Then Call SetPropValue(cStrPropTryckdatum, IMPMetaDialog.GetTryckdatumToStr)
    If (IMPMetaDialog.bIssnChanged) Then Call SetPropValue(cStrPropIssn, IMPMetaDialog.TextBoxISSN.text)
    If (IMPMetaDialog.bBeslutsdatumChanged) Then Call SetPropValue(CustMeta.cStrPropBeslutsdatum, IMPMetaDialog.GetBeslutsdatumToStr)
    If (IMPMetaDialog.bIkraftdatumChanged) Then Call SetPropValue(cStrPropIkraftdatum, IMPMetaDialog.GetIkraftdatumToStr)
    
    '#mkn Ikraftdatum
    
    'S|fffd|kord
    If (IMPMetaDialog.bSokordChanged) Then Call SetPropValue(cStrPropSokord1, IMPMetaDialog.GetUsedSokordToStr(1))
    If (IMPMetaDialog.bSokordChanged) Then Call SetPropValue(cStrPropSokord2, IMPMetaDialog.GetUsedSokordToStr(2))
    If (IMPMetaDialog.bSokordChanged) Then Call SetPropValue(cStrPropSokord3, IMPMetaDialog.GetUsedSokordToStr(3))
    If (IMPMetaDialog.bSokordChanged) Then Call SetPropValue(cStrPropSokord4, IMPMetaDialog.GetUsedSokordToStr(4))
    
    'DocInit, ej med i metadialog
    'DocStatus, ej med i metadialog
End Sub
Sub FillPropFromDoc()

    Dim strText As String
    
    'Styckemallar
    'If (GetTextFromDoc(cStrSMallTitel, strText)) Then Call SetPropValue(cStrPropTitel, strText)
    If (GetTextFromDoc(cStrSMallTitel, strText)) Then
        Call SetPropValue(cStrPropTitel1, ImpMid(strText, 1, 199))
        Call SetPropValue(cStrPropTitel2, ImpMid(strText, 200, 399))
        Call SetPropValue(cStrPropTitel3, ImpMid(strText, 400, 599))
    End If
    If (GetTextFromDoc(cStrSMallUtgava, strText)) Then Call SetPropValue(cStrPropUtgava, strText)
    If (GetTextFromDoc(cStrSMallForkortning, strText)) Then Call SetPropValue(cStrPropForkortning, strText)
    
    If (GetTextFromDocSearch(cStrSMallUnderskrift, strText)) Then Call SetPropValue(cStrPropUnderskrift, strText)
    If (GetTextFromDoc(cStrSMallUtgivare, strText)) Then
        strText = GetTextAfter(strText, ":")
        strText = Trim(strText) 'Ta bort blanktecken
        Call SetPropValue(cStrPropUtgivare, strText)
    End If
    
    If (GetTextFromDoc(cStrSMallUtkom_Datum, strText)) Then
        strText = GetTextAfter(strText, "den")
        strText = Trim(strText) 'Ta bort blanktecken
        Call SetPropValue(cStrPropTryckdatum, strText)
    End If
    If (GetTextFromDoc(cStrSMallBeslutDatum, strText)) Then
        strText = GetTextAfter(strText, "den")
        strText = Trim(strText) 'Ta bort blanktecken
        Call SetPropValue(cStrPropBeslutsdatum, strText)
    End If
    
    If (GetTextFromDoc(cStrSMallKontra_Namn, strText)) Then
        Call SetPropValue(cStrPropSkribent, strText)
    End If
    
    'New for ikraftdatum
    If (GetTextFromDocNew(cStrSMallIkraft_Stycke, strText)) Then
        Call SetPropValue(cStrPropIkraftdatum, strText)
    End If
    
End Sub
Sub FillDocFromProp()
    'Styckemallar i dokument
    'If (IMPMetaDialog.bTitelChanged) Then Call SetTextToDoc(cStrSMallTitel, GetPropValue(cStrPropTitel))
    If (IMPMetaDialog.bTitelChanged) Then
        Call SetTextToDoc(cStrSMallTitel, GetPropValue(cStrPropTitel1) & GetPropValue(cStrPropTitel2) & GetPropValue(cStrPropTitel3))
    End If
    If (IMPMetaDialog.bUtgavaChanged) Then
        Call SetTextToDoc(cStrSMallUtgava, GetPropValue(cStrPropUtgava))
        Call SetTextToDoc(cStrSMallHeader_Jamn_Utgava, GetPropValue(cStrPropUtgava))
        Call SetTextToDoc(cStrSMallHeader_Udda_Utgava, GetPropValue(cStrPropUtgava))
    End If
    If (IMPMetaDialog.bForkortningChanged) Then
        Call SetTextToDoc(cStrSMallForkortning, GetPropValue(cStrPropForkortning))
        Call SetTextToDoc(cStrSMallHeader_Jamn_Forkortning, GetPropValue(cStrPropForkortning))
        Call SetTextToDoc(cStrSMallHeader_Udda_Forkortning, GetPropValue(cStrPropForkortning))
    End If
    If (IMPMetaDialog.bUnderskriftChanged) Then Call SetTextToDocSearch(cStrSMallUnderskrift, GetPropValue(cStrPropUnderskrift))
    If (IMPMetaDialog.bUtgivareChanged) Then Call SetTextToDoc(cStrSMallUtgivare, "Utgivare: " & GetPropValue(cStrPropUtgivare))
    If (IMPMetaDialog.bSkribentChanged) Then Call SetTextToDoc(cStrSMallKontra_Namn, vbTab & vbTab & GetPropValue(cStrPropSkribent))
    
    If (IMPMetaDialog.bTryckdatumChanged) Then Call SetTextToDoc(cStrSMallUtkom_Datum, "den " & GetPropValue(cStrPropTryckdatum))
    If (IMPMetaDialog.bBeslutsdatumChanged) Then Call SetTextToDoc(cStrSMallBeslutDatum, "beslutade den " & GetPropValue(cStrPropBeslutsdatum) & ".")
    If (IMPMetaDialog.bOmtryckChanged) Then Call SetTextToDoc(cStrSMallUtkom_Datum_Omtryck, GetOmtryckLabel)
    If (IMPMetaDialog.bIkraftdatumChanged) Then Call SetTextToDocNew(cStrSMallIkraft_Stycke, GetPropValue(cStrPropIkraftdatum))
End Sub
Function IsASpecMall(strStyle As String) As Boolean
    'De dokumentmallar som inneh|fffd|ller metadata
    Dim bRes As Boolean
    bRes = False
        
    'Dokument section 1
    'If (strStyle = GetLegalName(cStrSMallTitel)) Then bRes = True
    If (strStyle = GetLegalName(cStrSMallTitel)) Then bRes = True
    If (strStyle = GetLegalName(cStrSMallUtgava)) Then bRes = True
    If (strStyle = GetLegalName(cStrSMallForkortning)) Then bRes = True
    'If (strStyle = GetLegalName(cStrSMallUnderskrift)) Then bRes = True
    If (strStyle = GetLegalName(cStrSMallUtgivare)) Then bRes = True
    If (strStyle = GetLegalName(cStrSMallUtkom_Datum)) Then bRes = True
    If (strStyle = GetLegalName(cStrSMallUtkom_Datum_Omtryck)) Then bRes = True
    If (strStyle = GetLegalName(cStrSMallBeslutDatum)) Then bRes = True
    If (strStyle = GetLegalName(cStrSMallIkraft_Stycke)) Then bRes = True
    
    If (strStyle = GetLegalName(cStrSMallHeader_Jamn_Utgava)) Then bRes = True
    If (strStyle = GetLegalName(cStrSMallHeader_Jamn_Forkortning)) Then bRes = True
    If (strStyle = GetLegalName(cStrSMallHeader_Udda_Utgava)) Then bRes = True
    If (strStyle = GetLegalName(cStrSMallHeader_Udda_Forkortning)) Then bRes = True
    If (strStyle = GetLegalName(cStrSMallKontra_Namn)) Then bRes = True
    
    IsASpecMall = bRes
End Function

Function GetBeslutsdatumStrFromInfotyp(inStrInfotyp As String) As String
    Dim strRes As String
    strRes = ""
    Dim strYear As String
    strYear = TextGroup(inStrInfotyp, 5, 1)
    Dim strMonth As String
    strMonth = TextGroup(inStrInfotyp, 6, 1)
    Dim strDay As String
    strDay = TextGroup(inStrInfotyp, 7, 1)
    
    strRes = strYear & "-" & strMonth & "-" & strDay
    GetBeslutsdatumStrFromInfotyp = strRes
End Function
Function GetLopnummerStrFromInfotyp(inStrInfotyp As String) As String
    Dim strRes As String
    strRes = ""
    Dim strIM As String
    strIM = TextGroup(inStrInfotyp, 2, 1)
    Dim strYear As String
    strYear = TextGroup(inStrInfotyp, 3, 1)
    Dim strNr As String
    strNr = TextGroup(inStrInfotyp, 4, 1)
    
    strRes = strIM & " " & strYear & ":" & strNr
    GetLopnummerStrFromInfotyp = strRes
End Function
Function GetInfoTypStrFromProps(inStrBeslutsdatum As String, inStrLopnummer As String) As String
    Dim strRes As String
    strRes = "Meddelande " & inStrLopnummer & ", " & inStrBeslutsdatum
    GetInfoTypStrFromProps = strRes
End Function
Function GetImYYYYNNNStr() As String
    Dim strRes As String
    strRes = ""
    
    Dim strLopnummer As String 'IM 2003:123
    strLopnummer = "" 'GetPropValue(cStrPropLopnummer)
    
    'Ta ut |fffd|r och l|fffd|pnummer
    Dim strLongYear As String
    strLongYear = TextGroup(strLopnummer, 2, True)
    Dim strShortYear As String
    strShortYear = ImpMid(strLongYear, 3)
    Dim strLopNr As String
    strLopNr = TextGroup(strLopnummer, 3, True)
    
    strRes = "Im" & strShortYear & strLopNr
    GetImYYYYNNNStr = strRes
End Function
Function GetYYYYStr(Optional inStrUtgava As String = "") As String
    'Ger 2003
    Dim strRes As String
    strRes = ""
    
    Dim strUtgava As String 'KIFS 2003:123
    If (inStrUtgava = "") Then
        strUtgava = GetPropValue(CustMeta.cStrPropUtgava)
    Else
        strUtgava = inStrUtgava
    End If
    
    'Ta ut |fffd|r och l|fffd|pnummer
    Dim strLongYear As String
    strLongYear = TextGroup(strUtgava, 2, True)
    
    strRes = strLongYear
    GetYYYYStr = strRes
End Function
Function GetYYStr() As String
    'Ger 03
    Dim strRes As String
    strRes = ""
    
    Dim strLopnummer As String 'KIFS 2003:123
    strLopnummer = GetPropValue(CustMeta.cStrPropUtgava)
    
    'Ta ut |fffd|r och l|fffd|pnummer
    Dim strLongYear As String
    strLongYear = TextGroup(strLopnummer, 2, True)
    Dim strShortYear As String
    strShortYear = ImpMid(strLongYear, 3, 2)
    
    strRes = strShortYear
    GetYYStr = strRes
End Function
Function GetnnStr(Optional inStrUtgava As String = "") As String
    'Ger 123
    Dim strRes As String
    strRes = ""
    
    Dim strUtgava As String 'KIFS 2003:123
    If (inStrUtgava = "") Then
        strUtgava = GetPropValue(CustMeta.cStrPropUtgava)
    Else
        strUtgava = inStrUtgava
    End If
    
    'Ta ut |fffd|r och l|fffd|pnummer
    Dim strNr As String
    strNr = TextGroup(strUtgava, 3, True)
    
    strRes = strNr
    GetnnStr = strRes
End Function
Function GetForkortningStr(Optional inStrUtgava As String = "") As String
    'Ger KIFS
    Dim strRes As String
    strRes = ""
    
    Dim strUtgava As String 'KIFS 2003:123
    If (inStrUtgava = "") Then
        strUtgava = GetPropValue(CustMeta.cStrPropUtgava)
    Else
        strUtgava = inStrUtgava
    End If
    
    'Ta ut f|fffd|rkortning
    Dim strForkortning As String
    strForkortning = TextGroup(strUtgava, 1, True)
    
    strRes = strForkortning
    GetForkortningStr = strRes
End Function


Sub SetRARNrToBoxar(inStrRARnr As String)

End Sub

Function dMMMMyyyyToyyyymmdd(inStr1 As String) As String
    'Omvandlar  22 augusti 2003 till 2003-08-22
    Dim strRes As String
    strRes = inStr1
    
    'Ta ut str|fffd|ngarna
    Dim strYear As String
    Dim strMonth As String
    Dim strDay As String
    
    strYear = TextGroup(inStr1, 3, True)
    strMonth = TextGroup(inStr1, 2, True)
    strDay = TextGroup(inStr1, 1, True)

    'M|fffd|nad till heltal
    If (strMonth = "januari") Then strMonth = "01"
    If (strMonth = "februari") Then strMonth = "02"
    If (strMonth = "mars") Then strMonth = "03"
    If (strMonth = "april") Then strMonth = "04"
    If (strMonth = "maj") Then strMonth = "05"
    If (strMonth = "juni") Then strMonth = "06"
    If (strMonth = "juli") Then strMonth = "07"
    If (strMonth = "augusti") Then strMonth = "08"
    If (strMonth = "september") Then strMonth = "09"
    If (strMonth = "oktober") Then strMonth = "10"
    If (strMonth = "november") Then strMonth = "11"
    If (strMonth = "december") Then strMonth = "12"
    
    'Dag tv|fffd|st|fffd|lligt
    If (ImpLen(strDay) = 1) Then strDay = "0" & strDay
    
    strRes = strYear & "-" & strMonth & "-" & strDay
    
    dMMMMyyyyToyyyymmdd = strRes
End Function
Function yyyymmddTodMMMMyyyy(inStr1 As String) As String
    'Omvandlar 2003-08-22 till 22 augusti 2003
    Dim strRes As String
    strRes = inStr1
    
    'Ta ut str|fffd|ngarna
    Dim strYear As String
    Dim strMonth As String
    Dim strDay As String
    
    strYear = TextGroup(inStr1, 1, True)
    strMonth = TextGroup(inStr1, 2, True)
    strDay = TextGroup(inStr1, 3, True)
    
    'Omvandla till heltal
    Dim intYear As Long
    Dim intMonth As Long
    Dim intDay As Long
    
    intYear = StrToInt(strYear)
    intMonth = StrToInt(strMonth)
    intDay = StrToInt(strDay)
    
    'G|fffd|r om till nya str|fffd|ngar
    Dim strNewYear As String
    Dim strNewMonth As String
    Dim strNewDay As String
    
    strNewYear = IntToStr(intYear)
    
    strNewMonth = "m|fffd|nad"
    If (intMonth = 1) Then strNewMonth = "januari"
    If (intMonth = 2) Then strNewMonth = "februari"
    If (intMonth = 3) Then strNewMonth = "mars"
    If (intMonth = 4) Then strNewMonth = "april"
    If (intMonth = 5) Then strNewMonth = "maj"
    If (intMonth = 6) Then strNewMonth = "juni"
    If (intMonth = 7) Then strNewMonth = "juli"
    If (intMonth = 8) Then strNewMonth = "augusti"
    If (intMonth = 9) Then strNewMonth = "september"
    If (intMonth = 10) Then strNewMonth = "oktober"
    If (intMonth = 11) Then strNewMonth = "november"
    If (intMonth = 12) Then strNewMonth = "december"
    
    strNewDay = IntToStr(intDay)
    
    'Resultatet
    strRes = strNewDay & " " & strNewMonth & " " & strNewYear
    yyyymmddTodMMMMyyyy = strRes
End Function

Function GetSokord() As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1

    strRes = GetPropValue(cStrPropSokord1) & GetPropValue(cStrPropSokord2) & GetPropValue(cStrPropSokord3) & GetPropValue(cStrPropSokord4)
Err1:
    GetSokord = strRes
End Function
Function IsSokord(inStrProp As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1

    If (IMPFunction.EqualLegalName(inStrProp, cStrPropSokord1)) Then bRes = True
    If (IMPFunction.EqualLegalName(inStrProp, cStrPropSokord2)) Then bRes = True
    If (IMPFunction.EqualLegalName(inStrProp, cStrPropSokord3)) Then bRes = True
    If (IMPFunction.EqualLegalName(inStrProp, cStrPropSokord4)) Then bRes = True
Err1:
    IsSokord = bRes
End Function
Function IsTitel(inStrProp As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1

    If (IMPFunction.EqualLegalName(inStrProp, cStrPropTitel1)) Then bRes = True
    If (IMPFunction.EqualLegalName(inStrProp, cStrPropTitel2)) Then bRes = True
    If (IMPFunction.EqualLegalName(inStrProp, cStrPropTitel3)) Then bRes = True
Err1:
    IsTitel = bRes
End Function

Function GetTitel() As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1

    strRes = GetPropValue(cStrPropTitel1) & GetPropValue(cStrPropTitel2) & GetPropValue(cStrPropTitel3)
    
Err1:
    GetTitel = strRes
End Function
Function GetOmtryckLabel() As String
    Dim strRes As String
    strRes = ""
    If (GetPropValue(cStrPropOmtryck) <> "") Then
        strRes = "Omtryck"
    End If
    GetOmtryckLabel = strRes
End Function

Attribute VB_Name = "CustSaveMain"
'H|fffd|r skall spara-kod ligga fr|fffd|n IMPMain

Function SaveAsXML(Optional bBatch As Boolean = False) As String
    'Sparar dokument som XML och omvandlar senare till HTML
    
    Dim bRes As Boolean
    bRes = False
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    Dim strDocNameNoSuffix As String
    strDocNameNoSuffix = ImpFile.ExtractFileNameFromSuffix(ImpDoc.Name)
    
    Dim bShowAllAtBegin As Boolean
    bShowAllAtBegin = ActiveWindow.ActivePane.View.ShowAll
        
    Call InitProcMessage("Sparar som XML...")
    ActiveWindow.ActivePane.View.ShowAll = True
    
    't|fffd|m katalogen /html
    IMPExportWord07.CloseHTMLDocs
    Call ImpFile.ForceCreateDir(CustExternData.GetIMPinPath & "XML")
    If (bBatch = False) Then Call ImpFile.ForceRemoveDir(CustExternData.GetIMPinPath & "XML", True)
    Call ImpFile.ForceRemoveDir(CustExternData.GetIMPinPath & "temp", True)

    'Skapa xml-tr|fffd|d
    Dim doc1 As ImpDoc
    Set doc1 = New ImpDoc
    Set doc1.mySelf = doc1
    Call doc1.CreateElement("wdoc", 0)
    
    'Exportera ut Word
    'Call L|fffd|sAv
    'Call ImpExportWord.DoAllExportWord(doc1)
    Call IMPExportWord07.DoAllExportWord07(doc1)
    'Call doc1.SaveToFile(CustExternData.GetIMPinPath & "XML\rawdoc.xml")
    'Call L|fffd|sP|fffd|
    
    'Anpassa exporten
    Call ImpRefineWXML.DoAllRefineWXML(doc1)
    'Call doc1.SaveToFile(CustExternData.GetIMPinPath & "XML\wdoc.xml")
    
    
    'Skapa XML-fil enligt IMPin-dtd:n
    Dim doc2 As ImpDoc
    Set doc2 = New ImpDoc
    Set doc2.mySelf = doc2
    doc2.SetDocType (4)
    Call doc2.CreateElement("impindoc", 0)
    Call IMPMyndXML.DoAllToMynd(doc1, doc2)
    strRes = CustExternData.GetIMPinPath & "XML\" & strDocNameNoSuffix & ".xml"
    Call doc2.SaveToFile(strRes)
       
    
    'Skapa HTML-filer ur myndighetsfilen
    Dim doc3 As ImpDoc
    Set doc3 = New ImpDoc
    Set doc3.mySelf = doc3
    doc3.SetDocType (2)
    Call doc3.CreateElement("HTML", 0)
    Call IMPCreateHTML.DoAllToHTML(doc2, doc3)
    Dim strHtmlFileAndPath As String
    strHtmlFileAndPath = CustExternData.GetIMPinPath & "XML\"
    strHtmlFileAndPath = strHtmlFileAndPath & ImpFile.ExtractFileNameFromSuffix(ImpDoc.Name) & ".htm"
    Call doc3.SaveToFile(strHtmlFileAndPath)
        
    'Kopiera bilder och bilagor, lokalt fr|fffd|n IMPin till IM
    Call CopyHtmlImpinToLocal
    

    'Meddela anv|fffd|ndare
    Dim strHtmlPath As String
    strHtmlPath = CustExternData.GetIMPinPath & "XML\"
    Call IMPVar.ChangeProcMessage("Spara HTML-filen " & strHtmlFileAndPath, True)
    Call IMPVar.CloseProcMessage
    If (bBatch = False) Then
        If (ImpShell32.ShowFile(strHtmlPath) = False) Then
            ImpMsg ("HTML-filen har skapats " & strHtmlFileAndPath)
        End If
    End If
    
    '|fffd|terst|fffd|ll showAll
    ActiveWindow.ActivePane.View.ShowAll = bShowAllAtBegin
        
    bRes = True

Err1:
    SaveAsXML = strRes
End Function
Function CopyHtmlImpinToLocal() As Boolean
    'Kopiera filerna fr|fffd|n IMPins output till im-foldern html
    Dim strOrgFolder As String 'im\temp\htmlimpin
    strOrgFolder = CustExternData.GetIMPinPath & cStrHTMLTemp & "\" & cStrHTMLImpin & "\bilder\"
    
    Dim strDestFolder As String 'im\html
    strDestFolder = CustExternData.GetIMPinPath & "XML\" & ImpFile.ExtractFileNameFromSuffix(ImpDoc.Name) & "_bilder\"
    
'Kopiera html-filen
    'Dim strDestFile As String
    'strDestFile = strDestFolder & GetImYYYYNNNStr & ".htm"
    'Dim strOrgFile As String
    'strOrgFile = strDestFolder & "Im.htm"
    'Call ImpFile.ImpFileCopy(strOrgFile, strDestFile)
    

'Kopiera bilder
    'Ta bort befintlig bildmapp och skapa ny
    Call ImpFile.ForceRemoveDir(strDestFolder, True)
    
    'G|fffd| igenom undermappar och leta upp den med r|fffd|tt namn
    Dim strFile As String
    Dim intFileIdx As Long
    intFileIdx = 1
    strFile = GetFileAt(strOrgFolder, intFileIdx)
    ResetSafeWhile (60)
    While (strFile <> "" And SafeWhile(60))
        Call ImpFile.ForceCreateDir(strDestFolder)
        Call ImpFileCopy(strFile, strDestFolder & ExtractFileNameFromPath(strFile))
        'n|fffd|sta varv
        intFileIdx = intFileIdx + 1
        strFile = GetFileAt(strOrgFolder, intFileIdx)
    Wend
    
    
    CopyHtmlImpinToLocal = True
    
End Function

Sub SparaDokumentet()
    On Error GoTo Err1
    'Spara ej mallen
    If (cIMPRelease) Then
        ActiveDocument.AttachedTemplate.Saved = True
    End If
    
    Dim sPath As String
    sPath = Options.DefaultFilePath(wdDocumentsPath) 'letar upp den standardinst|fffd|llda katalogen
    ChDir sPath
    Dialogs(wdDialogFileSaveAs).Show 'tar fram spara-dialogen
    
Err1:

End Sub

Attribute VB_Name = "CustSection"
Public Const cIntSectionUndef = 0
Public Const cIntSectionTitel = 1
Public Const cIntSectionBeslut = 2
Public Const cIntSectionRad = 3
Public Const cIntSectionSignering = 4
Public Const cIntSection5 = 5
Public Const cIntSection6 = 6

'Dessa varibeler anv|fffd|nds f|fffd|r att h|fffd|lla reda p|fffd| vilken session vi befinner oss i
Public intActualSectionType As Long
Public intActualSectionTypeEndPosition As Long

'Ska anropas varje g|fffd|ng man startar en kontroll
Sub ClearSectionType()
    intActualSectionType = 0
    intActualSectionTypeEndPosition = 0
End Sub
Sub SetActualSectionType(para1 As Paragraph)
    'f|fffd|rsta g|fffd|ngen cintCheckCol,cintCheckRow
    If (intActualSectionTypeEndPosition = 0) Then ' 1:a g|fffd|ngen
        'ny sektiontyp
        Call GetActualSesion(para1, intActualSectionType, intActualSectionTypeEndPosition)
    Else
        'kontrollera om sektiontyp m|fffd|ste uppdateras
        If (para1.Range.End > intActualSectionTypeEndPosition) Then
            'ny sektiontyp
             Call GetActualSesion(para1, intActualSectionType, intActualSectionTypeEndPosition)
        End If
    End If
End Sub
Sub GetActualSesion(inPara As Paragraph, ByRef inSectionType As Long, ByRef inSectionEnd As Long)
    
    On Error GoTo Err1
    
    Dim intSectionIdx As Long
    intSectionIdx = GetSectionIdxFromRange(inPara.Range)
    If (intSectionIdx > 0) Then
        inSectionType = intSectionIdx
        inSectionEnd = ImpDoc.Sections(intSectionIdx).Range.End
    Else
        inSectionType = 0
        inSectionEnd = 0
    End If
    
Err1:
End Sub

Function IsATextChapter() As Boolean
    'if ActualSection is a textchapter with free-text input
    Dim bRes As Boolean
    bRes = False
    
    'Sections witch textchapters
    If (intActualSectionType = cIntSectionRad) Then bRes = True
    
    IsATextChapter = bRes
End Function

Sub tt()
    'L|fffd|sAv
    Dim intI As Long
    For intI = 1 To ActiveDocument.Sections.Count
        Dim aSection As Section
        Set aSection = ActiveDocument.Sections(intI)
        Dim strText As String
        strText = ("Section " & IntToStr(intI) & ":" & IntToStr(aSection.Range.Start) & " - " & IntToStr(aSection.Range.End) & Chr(10) & "Paragrafer: " & IntToStr(aSection.Range.Paragraphs.Count))
        Dim aPara As Paragraph
        For Each aPara In aSection.Range.Paragraphs
            strText = strText & Chr(10) & aPara.Range.text
        Next aPara
        MsgBox (strText)
    Next intI
End Sub

Function GetSectionIdxFromRange(inRange1 As Range) As Long
    Dim intRes As Long
    intRes = 0
    On Error GoTo Err1
    Dim intI As Long
    For intI = 1 To ActiveDocument.Sections.Count
        Dim aSection As Section
        Set aSection = ActiveDocument.Sections(intI)
        If (inRange1.Start >= aSection.Range.Start) Then
            intRes = intI
        Else
            Exit For
        End If
    Next intI
Err1:
    GetSectionIdxFromRange = intRes
End Function
Function GetIsCompleteBFS() As Boolean
    Dim bRes As Boolean
    bRes = True
    On Error GoTo Err1
    bRes = ImpDoc.PageSetup.DifferentFirstPageHeaderFooter 'Annorlunda f|fffd|rstasida = komplett f|fffd|reskrift
Err1:
    GetIsCompleteBFS = bRes
End Function
Function FindMallSpan(inStrStyle As String, ByRef outFirstStart As Long, ByRef outLastEnd As Long) As Boolean
    'F|fffd|rsta f|fffd|rekomsten till sista f|fffd|rekomsten
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    outFirstStart = 0
    outLastEnd = 0
    
    Dim aRange As Range
    Set aRange = ImpDoc.Range
    Call aRange.SetRange(ImpDoc.Range.Start, ImpDoc.Range.Start)
    
    aRange.Find.ClearFormatting
    aRange.Find.Style = inStrStyle
    aRange.Find.Forward = True
    aRange.Find.Execute
    
    Dim prevEnd As Long
    prevEnd = -1
    Dim bContinue As Boolean
    bContinue = True
    While (bContinue)
        'inRange1.Select
        If (aRange.End > prevEnd) Then
            bRes = True
            If (outFirstStart = 0) Then outFirstStart = aRange.Start
            outLastEnd = aRange.End
            prevEnd = aRange.End
            aRange.Start = aRange.End
            aRange.Find.Execute
        Else
            bContinue = False
        End If
    Wend
    
Err1:
    FindMallSpan = bRes
End Function


Function FindMallRange(inStrStyle As String, ByRef outRangeStart As Long, ByRef outRangeEnd As Long) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    Dim aRange As Range
    Set aRange = ImpDoc.Range
    Call aRange.SetRange(0, 0)
    
    
    Dim strText As String
    aRange.Find.Style = inStrStyle
    bRes = aRange.Find.Execute
    If (bRes) Then
        outRangeStart = aRange.Start
        outRangeEnd = aRange.End
    End If
    

    bRes = True
Err1:
    FindMallRange = bRes
End Function
Function GetPrevPara(ByRef inOutPara As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    Dim intLastStart As Long
    Dim intStart As Long
    intLastStart = inOutPara.Range.Start
    Set inOutPara = inOutPara.Previous
    intStart = inOutPara.Range.Start
    If (intStart < intLastStart) Then
        bRes = True
    End If
Err1:
    GetPrevPara = bRes
End Function
Attribute VB_Name = "IMPBBRSettings"
Attribute VB_Base = "0{CB0650B2-4008-4E05-A18D-770FE8259E8D}{E9FE9B0D-FF15-4CD9-95ED-1047716BBB2E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ButCheckCancel_Click()
    Me.Hide
    
End Sub

Private Sub ButCheckOk_Click()
    Call IMPCheckMain.SetDocVariabelAsBoolean(cNumBBRDocVar, cboxNumBBR.Value)
    Me.Hide
    
End Sub
Attribute VB_Name = "IMPBemyndigandeDlg"
Attribute VB_Base = "0{0DD93531-2AB0-43D4-95E9-9BFD10345E93}{1D5F0ED9-D251-47C3-B9D7-41F2B421D6DC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btnAdd_Click()
    IMPChangeBemynd.SetData (True)
    IMPChangeBemynd.Show
End Sub

Private Sub btnCancel_Click()
    Me.Hide
End Sub

Private Sub btnModify_Click()
    On Error GoTo Err1
    Dim strSelection As String
    strSelection = Me.lboxBemyndiganden.List(Me.lboxBemyndiganden.ListIndex)
    Call IMPChangeBemynd.SetData(False, strSelection)
    IMPChangeBemynd.Show
Err1:
End Sub

Private Sub btnOk_Click()
    Dim strBemyndigande As String
    Dim intI As Long
    For intI = 1 To Me.lboxBemyndiganden.ListCount
        If (intI > 1) Then
            strBemyndigande = strBemyndigande + ";"
        End If
        strBemyndigande = strBemyndigande + Me.lboxBemyndiganden.List(intI - 1)
    Next intI
    IMPMetaDialog.SetBemyndigande (strBemyndigande)
    Me.Hide
End Sub

Private Sub btnRemove_Click()
    If (Me.lboxBemyndiganden.ListIndex >= 0) Then
        Me.lboxBemyndiganden.RemoveItem (Me.lboxBemyndiganden.ListIndex)
    Else
        ImpMsg ("Ingen rad vald")
    End If
End Sub
Public Sub SetData(strBemyndigande As String)
    Me.lboxBemyndiganden.Clear
    Dim strConcat As String
    strConcat = ""
    Dim intI As Long
    For intI = 1 To CountSemikolonSep(strBemyndigande)
        Dim strRow As String
        strRow = IndexSemikolonSep(strBemyndigande, intI)
        If (strConcat <> "") Then strConcat = strConcat + ";"
        strConcat = strConcat + strRow
        
        Dim strPre As String
        strPre = GetTextBefore(strRow, "=")
        If (strPre = "pg") Then
            Me.lboxBemyndiganden.AddItem (strConcat)
            strConcat = ""
        End If
    Next intI
    

End Sub
Public Sub Do3(strBemyndigande As String)
End Sub

Private Sub cmdHelpBem_Click()
    Dim strText As String
    strText = "V|fffd|lj 'Ny' f|fffd|r varje bemyndigande som anges i f|fffd|rfattningen"
    strText = strText + Chr(10) + "Varje bemyndigande best|fffd|r av utg|fffd|va (oftast SFS ) med |fffd|r och nr och vilken paragraf."
    strText = strText + Chr(10) + "N|fffd|r du angett alla bemyndigande, tryck OK och dessa sparas p|fffd| en rad, |fffd|tskilda med semikolon."
    strText = strText + Chr(10) + "Denna information |fffd|r ny sedan slutet av 2009 och skall anges enligt projektet f|fffd|r r|fffd|ttsinformation."
    MsgBox (strText)
End Sub

Private Sub lboxBemyndiganden_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    btnModify_Click
End Sub

Public Sub AddNew(strUtgava As String, strKapitel As String, strParagrafnr As String)
    Me.lboxBemyndiganden.AddItem ("fs=" & strUtgava & ";kp=" & strKapitel & ";pg=" & strParagrafnr)

End Sub
Public Sub ChangeExisting(strOrgBemyndigande As String, strUtgava As String, strKapitel As String, strParagrafnr As String)
    Me.lboxBemyndiganden.List(Me.lboxBemyndiganden.ListIndex) = "fs=" & strUtgava & ";kp=" & strKapitel & ";pg=" & strParagrafnr
End Sub
Attribute VB_Name = "IMPChangeBemynd"
Attribute VB_Base = "0{C77360D8-7C1C-4E57-9DFD-3D6EBE8F8AAC}{42D3CD66-D842-4D13-96BD-F2AF6DC17B83}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public m_bIsNew As Boolean
Public m_strOrgBemyndigande As String

Private Sub btnCancel_Click()
    Me.Hide

End Sub

Private Sub btnOk_Click()
    If (m_bIsNew) Then
        Call IMPBemyndigandeDlg.AddNew(tboxUtgava.text, tboxKapitel.text, tboxParagrafnr.text)
    Else
        Call IMPBemyndigandeDlg.ChangeExisting(m_strOrgBemyndigande, tboxUtgava.text, tboxKapitel.text, tboxParagrafnr.text)
    End If
    Me.Hide
End Sub
Public Sub SetData(bIsNew As Boolean, Optional strBemyndigande As String = "")
    m_bIsNew = bIsNew
    If (m_bIsNew) Then
        tboxUtgava.text = ""
        tboxKapitel.text = ""
        tboxParagrafnr.text = ""
    Else
        Dim i As Long
        For i = 1 To CountSemikolonSep(strBemyndigande)
            Dim strRow As String
            Dim strPre As String
            Dim strAfter As String
            strRow = IndexSemikolonSep(strBemyndigande, i)
            strPre = GetTextBefore(strRow, "=")
            strAfter = GetTextAfter(strRow, "=")
            If (strPre = "fs") Then tboxUtgava.text = strAfter
            If (strPre = "kp") Then tboxKapitel.text = strAfter
            If (strPre = "pg") Then tboxParagrafnr.text = strAfter
        Next i
        m_strOrgBemyndigande = strBemyndigande
    End If
End Sub

Attribute VB_Name = "IMPCheck"
Public intLastListOrder1 As Long 'F|fffd|r att h|fffd|lla ordning p|fffd| listor
Public intLastListOrder2 As Long
Public aErrShape As Shape
Public mintOkMallar As Long
    Dim m_LastPara As Paragraph
    Dim m_LastCheckRow As Long



Public Sub DoForslag(inForslagIdx As Long, inButton As String)
    On Error GoTo Error1
          
    '  2003-09-09
    If (cstrCheckType = cStrCheckStyles) Then 'Mallar
        If (cintCheckErrIdx = 1) Then 'Kopiera formatmall fr|fffd|n dokumentet
            ' vad ska g|fffd|ras h|fffd|r
        End If
    End If
    
    
    '  2003-09-10
    If (cstrCheckType = cStrCheckMeta) Then 'Metadata
        If (cintCheckErrIdx = 2) Then '|fffd|ppna MD-dialogen
            Call SetMetaDialog
        End If
    End If
    
    
    
    If (cstrCheckType = cStrCheckPara) Then 'Para
        If (cintCheckErrIdx = 1) Then '  2003-09-09
            'Byt gamla namn
            If (inForslagIdx <> 0 And inButton = "change") Then '|fffd|ndring av mall
                    Dim strArrNewName(20) As String
                    Call getNewTemplateNameMapToOldName(Selection.Style, strArrNewName)
                    Select Case inForslagIdx
                        Case 1: Selection.Style = strArrNewName(0)
                        Case 2: Selection.Style = strArrNewName(1)
                        Case 3: Selection.Style = strArrNewName(2)
                        Case 4: Selection.Style = strArrNewName(3)
                    End Select
            End If
        End If
        
        If (cintCheckErrIdx = 2) Then 'Paragraftecken
            If (inButton = "change") Then
                If (inForslagIdx = 0) Then
                    IMPList.InsertJurParagrafSFS
                    'IMPChange.TrueParagraf
                    'IMPMain.DoChangeTrueParagraf
                End If
                If (inForslagIdx = 1) Then
                    'Selection.Style = cStrMallNoListTecken
                End If
            End If
        End If
        
        If (cintCheckErrIdx = 3) Then 'Styckemall kontrolleras
            If (inButton = "change") Then
                If (inForslagIdx = 0) Then
                    IMPMallFunc.DoLista
                    'IMPChange.TrueList
                    'IMPMain.DoChangeTrueList
                End If
                If (inForslagIdx = 1) Then
                    'Selection.Style = cStrMallNoListTecken
                End If
            End If
        End If
   End If
   
    If (cstrCheckType = cStrCheckShape) Then  'Bilder
        If (cintCheckErrIdx = 2) Then 'till inline
            If (inButton = "change") Then
                If (inForslagIdx = 0) Then
                    If aErrShape.Type = msoPicture Then
                        aErrShape.ConvertToInlineShape
                    End If
                End If
            End If
        End If
    End If

    ResetCheckStr
    Exit Sub

Error1:
    ResetCheckStr
    ImpMsg ("Kunde ej utf|fffd|ra |fffd|ndringen")
End Sub
Sub CheckDocuments()

    If (Application.Documents.Count > 99) Then
        cstrCheckFel = "Fler |fffd|n 99 Worddokument |fffd|r |fffd|ppet."
        cstrCheckForslag1 = "St|fffd|ng |fffd|vriga dokument."
        cbCheckButtonChange = False
        cintCheckErrIdx = 1
    End If
End Sub

Sub CheckMallar()
    '
    On Error GoTo Error1
    
    Dim intMax As Long
    Dim strStyle As String
    Dim intStyleIdx As Long
    
    Dim typeOfTemplateError As Long
    
    
    'Styckemallar
    intMax = StrToInt(GetMallStrFromIdx(0))
    
    If (cintCheckRow <= 1) Then
        mintOkMallar = StrToInt(GetDocVariabel(cOkMallar))
        If (mintOkMallar > cintCheckRow) Then cintCheckRow = mintOkMallar + 1
    End If
    
    If (cintCheckRow > intMax) Then
        cintCheckRow = 99
    Else
        If (cintCheckRow = 1) Then
            Call ChangeProcMessage("Kontrollerar mallar..." & IntToStr(cintCheckRow) & "(" & IntToStr(intMax) & "), det kan ta n|fffd|gra sekunder.", True)
        Else
            Call ChangeProcMessage("Kontrollerar mallar..." & IntToStr(cintCheckRow) & "(" & IntToStr(intMax) & ")", False)
        End If
        strStyle = GetMallStrFromIdx(cintCheckRow)
        intStyleIdx = GetStyleIdx(strStyle, True)
        If (intStyleIdx = 0) Then
            intOkMallar = 0
            Call Application.OrganizerCopy(ImpDoc.AttachedTemplate.FullName, ImpDoc.FullName, strStyle, wdOrganizerObjectStyles)
        Else
            If (cintCheckRow = (mintOkMallar + 1)) Then
                mintOkMallar = cintCheckRow
            End If
            If (cintCheckRow = intMax) Then
                Call SetDocVariabel(cOkMallar, IntToStr(mintOkMallar))
            End If
            'Call AddIgnore
        End If
    End If
    
    Exit Sub

Error1:
    'pka 2003-09-09
    cstrCheckFel = "Formatmallen " & strStyle & " ej tillg|fffd|nglig"
    cstrCheckForslag1 = "Kopiera formatmallar fr|fffd|n malldokumentet"
    cintCheckErrIdx = 1
End Sub

'New for checking valid names. Skribent etc
Sub CheckMetaNames(inStrDocMall As String, inStrPropMall As String)
Dim intCount As Long
    intCount = 0
    Dim intDocPart As Long
    Dim intParaIdx As Long
    Dim aPara As Paragraph
    Dim strProp As String
    Dim strPara As String
    Dim strDate As String
  
        intCount = IMPMetaMain.mParaDoc.GetCountStyleName(inStrDocMall)
        '  2003-09-10
        If (intCount = 0) Then
            cstrCheckFel = "Formatmallen " & inStrDocMall & " ej infogad p|fffd| n|fffd|gon rad i dokumentet"
            cstrCheckForslag2 = "Skribenten infogar formatmallen " & inStrDocMall & " i dokumentet"
            cbCheckButtonChange = False
            cintCheckErrIdx = 1
        End If
        '  2003-09-10
        If (intCount > 1) Then
            cstrCheckFel = "Formatmallen " & inStrDocMall & " f|fffd|rekommer flera g|fffd|nger i dokumentet"
            cstrCheckForslag1 = "Skribenten tar " & inStrDocMall & " p|fffd| en av raderna " & IMPMetaMain.mParaDoc.GetRowsStr(inStrDocMall)
            cbCheckButtonChange = False
            cintCheckErrIdx = 1
        End If
        If (intCount = 1) Then
            strPara = ""
            Call GetTextFromDoc(inStrDocMall, strPara)
            strProp = GetPropValue(inStrPropMall)
            If (strPara <> strProp) Then
                Call IMPMetaMain.FillPropFromDoc
                Call IMPMetaMain.FillMetaFromProp
            End If
 
            strPara = ""
            Call GetTextFromDoc(inStrDocMall, strPara)
            
            If (strPara <> strProp) Then
                cstrCheckFel = "Olika texter i styckemallen " & inStrDocMall & " och dess metadataf|fffd|lt"
                cstrCheckForslag1 = "Skribenten |fffd|ppnar dialogen redigera metadata"
                cbCheckButtonChange = False
                cintCheckErrIdx = 2
                cbCheckButtonChange = True
             
            ElseIf (strProp = "") Then '  2003-09-10 tom metadata
                cstrCheckFel = "Metadata " & inStrPropMall & " saknar v|fffd|rde"
                cstrCheckForslag1 = "Skribenten s|fffd|tter v|fffd|rde i dialogen f|fffd|r metadata"
                cbCheckButtonChange = False
                cintCheckErrIdx = 2
                cbCheckButtonChange = True
            ElseIf (UCase(strPara) = "F|fffd|RNAMN EFTERNAMN") Then 'Kolla s|fffd| texten inte |fffd|r "F|fffd|RNAMN EFTERNAMN"
                cstrCheckFel = "Metadata " & inStrPropMall & " saknar giltigt namn"
                cstrCheckForslag1 = "Skribenten s|fffd|tter v|fffd|rde i dialogen f|fffd|r metadata"
                cbCheckButtonChange = False
                cintCheckErrIdx = 2
                cbCheckButtonChange = True
            End If
       End If
End Sub

'New for checking valid dates. Utkomfr|fffd|ntryck, ikraftr|fffd|dandedatum etc
Sub CheckMetaDates(inStrDocMall As String, inStrPropMall As String)
Dim intCount As Long
    intCount = 0
    Dim intDocPart As Long
    Dim intParaIdx As Long
    Dim aPara As Paragraph
    Dim strProp As String
    Dim strPara As String
    Dim strDate As String
  
        intCount = IMPMetaMain.mParaDoc.GetCountStyleName(inStrDocMall)
        '  2003-09-10
        If (intCount = 0) Then
            cstrCheckFel = "Formatmallen " & inStrDocMall & " ej infogad p|fffd| n|fffd|gon rad i dokumentet"
            cstrCheckForslag2 = "Skribenten infogar formatmallen " & inStrDocMall & " i dokumentet"
            cbCheckButtonChange = False
            cintCheckErrIdx = 1
        End If
        '  New Specialfall f|fffd|r ikraftstycke som kan vara flera paragrafer.
        If (inStrDocMall = "BFS-Ikraft-Stycke") Then
            strPara = ""
            For i = ImpDoc.Paragraphs.Count To 1 Step -1
                If (ImpDoc.Paragraphs(i).Style = "BFS-Ikraft-Stycke") Then
                    'MsgBox (ImpDoc.Paragraphs(i).Range)
                    'Kolla om paragrafen har n|fffd|gra tecken
                    If (Len(ImpDoc.Paragraphs(i).Range) > 10) Then
                        strPara = ""
                           Call GetTextFromDocNew(inStrDocMall, strPara)
                           strProp = GetPropValue(inStrPropMall)
                           If (strPara <> strProp) Then
                               Call IMPMetaMain.FillPropFromDoc
                               Call IMPMetaMain.FillMetaFromProp
                           End If
                
                           strPara = ""
                           Call GetTextFromDocNew(inStrDocMall, strPara)
                           strProp = GetPropValue(inStrPropMall)
                           strProp = Replace(strProp, ".", "") 'Ta bort punkt
                           strPara = GetTextAfter(strPara, "den ") 'H|fffd|mta ut datumet efter ordet "den"
                           strPara = Trim(strPara) 'Ta bort blanktecken
                           strPara = Replace(strPara, ".", "") 'Ta bort punkt
                           strDate = strPara
                           strDate = CustMeta.dMMMMyyyyToyyyymmdd(strDate)  'G|fffd|r om till digit. Fr|fffd|n ex 22 augusti 2003 till 2003-08-22
                           
                           If (strPara <> strProp) Then
                               cstrCheckFel = "Olika texter i styckemallen " & inStrDocMall & " och dess metadataf|fffd|lt"
                               cstrCheckForslag1 = "Skribenten |fffd|ppnar dialogen redigera metadata"
                               cbCheckButtonChange = False
                               cintCheckErrIdx = 2
                               cbCheckButtonChange = True
                            
                           ElseIf (strProp = "") Then '  2003-09-10 tom metadata
                               cstrCheckFel = "Metadata " & inStrPropMall & " saknar v|fffd|rde"
                               cstrCheckForslag1 = "Skribenten s|fffd|tter v|fffd|rde i dialogen f|fffd|r metadata"
                               cbCheckButtonChange = False
                               cintCheckErrIdx = 2
                               cbCheckButtonChange = True
                           ElseIf (IsDate(strDate) = False) Then 'Inget giltigt datum satt
                               cstrCheckFel = "Metadata " & inStrPropMall & " saknar giltigt datum."
                               cstrCheckForslag1 = "Skribenten s|fffd|tter v|fffd|rde i dialogen f|fffd|r metadata"
                               cbCheckButtonChange = False
                               cintCheckErrIdx = 2
                               cbCheckButtonChange = True
                           End If
                           Exit Sub
                    End If
                End If
            Next
        End If
        If (intCount > 1) Then
            cstrCheckFel = "Formatmallen " & inStrDocMall & " f|fffd|rekommer flera g|fffd|nger i dokumentet"
            cstrCheckForslag1 = "Skribenten tar " & inStrDocMall & " p|fffd| en av raderna " & IMPMetaMain.mParaDoc.GetRowsStr(inStrDocMall)
            cbCheckButtonChange = False
            cintCheckErrIdx = 1
        End If
        If (intCount = 1) Then
            strPara = ""
            Call GetTextFromDoc(inStrDocMall, strPara)
            strProp = GetPropValue(inStrPropMall)
            If (strPara <> strProp) Then
                Call IMPMetaMain.FillPropFromDoc
                Call IMPMetaMain.FillMetaFromProp
            End If
 
            strPara = ""
            Call GetTextFromDoc(inStrDocMall, strPara)
            strProp = GetPropValue(inStrPropMall)
            strProp = Replace(strProp, ".", "") 'Ta bort punkt
            strPara = GetTextAfter(strPara, "den") 'H|fffd|mta ut datumet efter ordet "den"
            strPara = Trim(strPara) 'Ta bort blanktecken
            strPara = Replace(strPara, ".", "") 'Ta bort punkt
            strDate = strPara
            strDate = CustMeta.dMMMMyyyyToyyyymmdd(strDate)  'G|fffd|r om till digit. Fr|fffd|n ex 22 augusti 2003 till 2003-08-22
            
            If (strPara <> strProp) Then
                cstrCheckFel = "Olika texter i styckemallen " & inStrDocMall & " och dess metadataf|fffd|lt"
                cstrCheckForslag1 = "Skribenten |fffd|ppnar dialogen redigera metadata"
                cbCheckButtonChange = False
                cintCheckErrIdx = 2
                cbCheckButtonChange = True
             
            ElseIf (strProp = "") Then '  2003-09-10 tom metadata
                cstrCheckFel = "Metadata " & inStrPropMall & " saknar v|fffd|rde"
                cstrCheckForslag1 = "Skribenten s|fffd|tter v|fffd|rde i dialogen f|fffd|r metadata"
                cbCheckButtonChange = False
                cintCheckErrIdx = 2
                cbCheckButtonChange = True
            ElseIf (IsDate(strDate) = False) Then 'Inget giltigt datum satt
                cstrCheckFel = "Metadata " & inStrPropMall & " saknar giltigt datum."
                cstrCheckForslag1 = "Skribenten s|fffd|tter v|fffd|rde i dialogen f|fffd|r metadata"
                cbCheckButtonChange = False
                cintCheckErrIdx = 2
                cbCheckButtonChange = True
            End If
       End If
End Sub

Sub CheckMetadata()
    On Error GoTo Error1
'    If (IMPMetaMain.GetPropValue(cStrPropKomplett) = cStrPropKomplett_no) Then
'        Exit Sub
'    End If
    If (GetIsCompleteBFS = False) Then 'Inte komplett dokument
        Exit Sub
    End If
    
    Dim strProp As String
    Dim strErr As String
    
    If (cintCheckRow = 1) Then 'Initieringar
        IMPMetaMain.FillMallArray
    End If
    
    '  2003-08-11
    'Redegera metadata innan du kontrollerat
    
    If (cintCheckRow = 2) Then 'Redigera metadata innan du kontrollerar
    End If
    
    'Kontrollera antalet och att prop |fffd|r synkat med doc
'    If (cintCheckRow = 3) Then 'Titel
'        Call CheckMeta(cStrSMallTitel, cStrPropTitel)
'    End If
    If (cintCheckRow = 4) Then 'Utg|fffd|va
        Call CheckMeta(cStrSMallUtgava, cStrPropUtgava)
    End If
    If (cintCheckRow = 5) Then 'F|fffd|rkortning
        Call CheckMeta(cStrSMallForkortning, cStrPropForkortning)
    End If
    If (cintCheckRow = 6) Then 'Underskrift
        'Call CheckMeta(cStrSMallUnderskrift, cStrPropUnderskrift)
    End If
    If (cintCheckRow = 7) Then 'Utgivare
        'Call CheckMeta(cStrSMallUtgivare, cStrPropUtgivare)
    End If
    If (cintCheckRow = 8) Then 'Utkom datum
        'Call CheckMeta(cStrSMallUtkom_Datum, cStrPropTryckdatum)
        Call CheckMetaDates(cStrSMallUtkom_Datum, cStrPropTryckdatum)
    End If
    If (cintCheckRow = 9) Then 'Beslut datum
        'Call CheckMeta(cStrSMallBeslutDatum, cStrPropBeslutsdatum)
        Call CheckMetaDates(cStrSMallBeslutDatum, cStrPropBeslutsdatum)
    End If
    'New
    If (cintCheckRow = 10) Then 'Skribent
        Call CheckMetaNames(cStrSMallKontra_Namn, cStrPropSkribent)
    End If
    '
    If (cintCheckRow = 11) Then 'Ikraftdatum
        Call CheckMetaDates(cStrSMallIkraft_Stycke, cStrPropIkraftdatum)
    End If
    
    'Formatet p|fffd| metadata
    If (GetStatusAsInt >= 3) Then 'Godk|fffd|nd, HSLUT
        If (cintCheckRow = 20) Then 'Titel
            strProp = GetPropValue(cStrPropTitel1) & GetPropValue(cStrPropTitel2) & GetPropValue(cStrPropTitel3)
            If (HasString(strProp, ";") = False) Then
                cstrCheckFel = "Titeln avslutas ej med semikolon."
                cstrCheckForslag1 = "Skribenten avslutar titeln med semikolon"
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
            End If
        End If
        
        If (cintCheckRow = 21) Then 'Utkom datum
            strProp = GetPropValue(cStrPropTryckdatum)
            If (IsOKDateString(strProp, strErr) = False) Then
                cstrCheckFel = "Utkom datum ej riktigt." & strErr
                cstrCheckForslag1 = "Skribenten |fffd|ndrar till exempelformatet 03 september 2003"
                'cstrCheckForslag1 = "Skribenten |fffd|ndrar till exempelformatet xx xxxx 2003"
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
            End If
        End If
        
        If (cintCheckRow = 22) Then 'Beslut datum
            strProp = GetPropValue(cStrPropBeslutsdatum)
            If (IsOKDateString(strProp, strErr) = False) Then
                cstrCheckFel = "Beslut datum ej riktigt." & strErr
                cstrCheckForslag1 = "Skribenten |fffd|ndrar till exempelformatet 03 september 2003"
                'cstrCheckForslag1 = "Skribenten |fffd|ndrar till exempelformatet xx xxxx 2003"
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
            End If
        End If
        
        If (cintCheckRow = 23) Then 'Utg|fffd|va
            strProp = GetPropValue(cStrPropUtgava)
            If (IsOKUtgavaString(strProp, strErr) = False) Then
                cstrCheckFel = "Utg|fffd|van ej riktigt." & strErr
                cstrCheckForslag1 = "Skribenten |fffd|ndrar till exempelformatet BFS 2003:18"
                'cstrCheckForslag1 = "Skribenten |fffd|ndrar till exempelformatet BFS xxxx:xx"
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
            End If
        End If
        
        If (cintCheckRow = 24) Then 'F|fffd|rkortning
            strProp = GetPropValue(cStrPropForkortning)
            If (IsOKForkortningString(strProp, strErr) = False) Then
                cstrCheckFel = "F|fffd|rkortning ej riktigt." & strErr
                cstrCheckForslag1 = "Skribenten |fffd|ndrar till exempelformatet ABC 1"
                'cstrCheckForslag1 = "Skribenten |fffd|ndrar till exempelformatet XXX x"
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
            End If
        End If
        
        
        'Referensutg|fffd|va
'        Dim bReferens As Boolean
'        bReferens = False
'        If (GetPropValue(cStrPropRefForfattning) = cStrComboBoxRefForfattning_Andring) Then bReferens = True
'        If (GetPropValue(cStrPropRefForfattning) = cStrComboBoxRefForfattning_Konsol) Then bReferens = True
        
'        If (bReferens) Then
'            If (cintCheckRow = 25) Then 'Ref f|fffd|rkortning
'                strProp = GetPropValue(cStrPropRefForkortning)
'                If (IsOKUtgavaString(strProp, strErr) = False) Then
'                    cstrCheckFel = "Ref F|fffd|rkortning ej riktigt." & strErr
'                    cstrCheckForslag1 = "Skribenten |fffd|ndrar till exempelformatet ABC 1"
'                    'cstrCheckForslag1 = "Skribenten |fffd|ndrar till exempelformatet XXX x"
'                    cbCheckButtonChange = False
'                    cintCheckErrIdx = 1
 '               End If
'            End If
            
'        End If 'Referens
        
        If (cintCheckRow = 26) Then 'Underskrift
            strProp = GetPropValue(cStrPropUnderskrift)
            If (IsOKUnderskriftString(strProp, strErr) = False) Then
                cstrCheckFel = "Underskrift |fffd|r ej riktigt. " & strErr
                cstrCheckForslag1 = "Skribenten |fffd|ndrar till exempelformatet AAAA BBBB"
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
            End If
        End If
    
    End If
    
    Exit Sub

Error1:
    ImpMsg ("Kunde ej kontrollera metadata")
End Sub
Sub CheckMeta(inStrDocMall As String, inStrPropMall As String)
    Dim intCount As Long
    intCount = 0
    Dim intDocPart As Long
    Dim intParaIdx As Long
    Dim aPara As Paragraph
    Dim strProp As String
    Dim strPara As String
        
        intCount = IMPMetaMain.mParaDoc.GetCountStyleName(inStrDocMall)
        '  2003-09-10
        If (intCount = 0) Then
            cstrCheckFel = "Formatmallen " & inStrDocMall & " ej infogad p|fffd| n|fffd|gon rad i dokumentet"
            cstrCheckForslag2 = "Skribenten infogar formatmallen " & inStrDocMall & " i dokumentet"
            cbCheckButtonChange = False
            cintCheckErrIdx = 1
        End If
        '  2003-09-10
        If (intCount > 1) Then
            cstrCheckFel = "Formatmallen " & inStrDocMall & " f|fffd|rekommer flera g|fffd|nger i dokumentet"
            cstrCheckForslag1 = "Skribenten tar " & inStrDocMall & " p|fffd| en av raderna " & IMPMetaMain.mParaDoc.GetRowsStr(inStrDocMall)
            cbCheckButtonChange = False
            cintCheckErrIdx = 1
        End If
        If (intCount = 1) Then
            strPara = ""
            Call GetTextFromDoc(inStrDocMall, strPara)
            strProp = GetPropValue(inStrPropMall)
            If (strPara <> strProp) Then
                Call IMPMetaMain.FillPropFromDoc
            End If
             
            
            strPara = ""
            Call GetTextFromDoc(inStrDocMall, strPara)
            strProp = GetPropValue(inStrPropMall)
           
            If (strPara <> strProp) Then
                cstrCheckFel = "Olika texter i styckemallen " & inStrDocMall & " och dess metadataf|fffd|lt"
                cstrCheckForslag1 = "Skribenten |fffd|ppnar dialogen redigera metadata"
                cbCheckButtonChange = False
                cintCheckErrIdx = 2
                cbCheckButtonChange = True
             
            ElseIf (strProp = "") Then '  2003-09-10 tom metadata
                cstrCheckFel = "Metadata " & inStrPropMall & " saknar v|fffd|rde"
                cstrCheckForslag1 = "Skribenten s|fffd|tter v|fffd|rde i dialogen f|fffd|r metadata"
                cbCheckButtonChange = False
                cintCheckErrIdx = 2
                cbCheckButtonChange = True
            End If
       End If

End Sub

Sub CheckPara()
    On Error GoTo Error1
    
    Dim parColl As Paragraphs
    Dim para1 As Paragraph

    Set parColl = ImpDoc.Paragraphs
    If ((cintCheckRow > 0) And (cintCheckRow <= IMPVar.ImpDocParagraphsCount)) Then
        If (cintCheckRow = (m_LastCheckRow + 1)) Then
            If (IMPFunction.GetNextPara(m_LastPara) = True) Then
                Set para1 = m_LastPara
            Else
                Set para1 = parColl.Item(cintCheckRow)
            End If
        Else
            Set para1 = parColl.Item(cintCheckRow)
        End If
        Set m_LastPara = para1
        m_LastCheckRow = cintCheckRow
        
        Call ChangeProcMessage("Kontrollerar stycke..." & IntToStr(cintCheckRow) & " (" & IntToStr(IMPVar.ImpDocParagraphsCount) & ")", True)
        Dim intSafe As Long
        intSafe = 0
        Do
            Call CustCheck.CheckPara2(para1)
            'loop
            intSafe = intSafe + 1
            Dim bContinue As Boolean
            bContinue = True
            If (intSafe > 1000) Then bContinue = False
            If (cintCheckCol >= 900) Then bContinue = False
            If (cintCheckErrIdx <> 0) Then bContinue = False
            If (bContinue) Then cintCheckCol = cintCheckCol + 1
        Loop Until (bContinue = False)
        
        If (IsIgnoring) Then
            cintCheckErrIdx = 0
        End If
   
   End If
Exit Sub
Error1:
    ImpMsg ("Kan ej kontrollera stycket" & para1.Range.text)
End Sub
Sub CheckTable()
    Dim aTable As Table
    
    If (cintCheckRow = 1) Then 'Tabell i tabell?
        If (MstrVersion <> "W97") Then
            For intI = 1 To ImpDoc.Tables.Count
                Set aTable = ImpDoc.Tables(intI)
                If (HasTables(aTable) > 0) Then
                    cstrCheckFel = "Tabellen inneh|fffd|ller i sin tur tabeller"
                    cstrCheckForslag1 = "Skribenten tar bort tabellen i tabellen."
                    cbCheckButtonChange = False
                    cintCheckErrIdx = 1
                    Call MarkTable(aTable)
                    Exit For
                End If
            Next intI
        End If
    End If
    
    If (cintCheckRow = 2) Then 'Sammanfogade celler i h|fffd|jdled
        For intI = 1 To ImpDoc.Tables.Count
            Set aTable = ImpDoc.Tables(intI)
            If (HasMergedRows(aTable) = True) Then
                cstrCheckFel = "Tabellen inneh|fffd|ller sammanfogade celler verikalt"
                cstrCheckForslag1 = "Skribenten delar upp cellen."
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
                Call MarkTable(aTable)
                Exit For
            End If
        Next intI
    End If
    
    If (cintCheckRow = 3) Then 'Oj|fffd|mna kolumner
        For intI = 1 To ImpDoc.Tables.Count
            Dim aCell As Cell
            Set aTable = ImpDoc.Tables(intI)
            If (HasOjamnaKolumner(aTable, aCell) = True) Then
                cstrCheckFel = "Tabellen har oj|fffd|mna linjer kring celler"
                cstrCheckForslag1 = "Skribenten justerar vertikala linjer."
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
                Call MarkTable(aTable)
                Call MarkCell(aCell)
                Exit For
            End If
        Next intI
    End If
End Sub
Sub CheckShapes()
    
    If (cintCheckRow = 1) Then 'Flytande bild
        If (MstrVersion <> "W97") Then
            For intI = 1 To ImpDoc.Shapes.Count
                Set aErrShape = ImpDoc.Shapes(intI)

                If (aErrShape.Type = msoPicture) Then
                    cstrCheckFel = "Flytande bilder ej till|fffd|tna"
                    cstrCheckForslag1 = "F|fffd|rs|fffd|k |fffd|ndra automatiskt till till|fffd|ten bild"
                    cstrCheckForslag2 = "Infoga bilden som fil"
                    cstrCheckForslag3 = "Denna bild |fffd|r ett godk|fffd|nt undantag"
                    'cbCheckButtonChange = False
                    cintCheckErrIdx = 2
                    Call MarkShape(aErrShape)
                    Exit For
                ElseIf (aErrShape.Type = msoTextBox) Then 'Textbox till|fffd|ten
                ElseIf (aErrShape.Type = msoAutoShape) Then 'Textbox till|fffd|ten
                Else
                    'MsgBox (aErrShape.Type)
                    cstrCheckFel = "Flytande bilder ej till|fffd|tna " & IntToStr(aErrShape.Type)
                    cstrCheckForslag1 = "Infoga bilden som fil"
                    cstrCheckForslag2 = "Denna bild |fffd|r ett godk|fffd|nt undantag"
                    cbCheckButtonChange = False
                    cintCheckErrIdx = 1
                    Call MarkShape(aErrShape)
                    Exit For
                End If
            Next intI
        End If
    End If
    
    Dim aInlineShape As InlineShape
    If ((cintCheckRow = 2) And (MstrVersion <> "W97")) Then 'Alt-text p|fffd| bild
        For intI = 1 To ImpDoc.InlineShapes.Count
            Set aInlineShape = ImpDoc.InlineShapes(intI)
            If (IMPCheckFunc.IsOKAlternativeText(aInlineShape) = False) Then
                cstrCheckFel = "Det finns ingen alternativ text till bilden."
                cstrCheckForslag1 = "Skribenten infogar text sj|fffd|lv. H|fffd|gerklicka + Formatera ojbekt + Webb"
                cbCheckButtonChange = False
                cintCheckErrIdx = 1
                Call MarkInLineShape(aInlineShape)
                Exit For
            End If
        Next intI
    End If
    
End Sub
Sub CheckStructure()
    On Error GoTo Err1
    Dim rangeStartFirst As Long
    Dim rangeStartSecond As Long
    Dim rangeEnd As Long
    
    If (cintCheckRow = 1) Then 'Underskrift innan bilaga
        Call FindMallRange(CustMallarMain.cStrSMallUnderskrift, rangeStartFirst, rangeEnd)
        Call FindMallRange(CustMallarMain.cStrSMallBilaga_Rubrik, rangeStartSecond, rangeEnd)
        If ((rangeStartSecond > 0) And (rangeStartFirst > rangeStartSecond)) Then
            cstrCheckFel = "Underskriften kommer efter bilaga"
            cstrCheckForslag1 = "Skribenten infogar underskrifter innan bilaga."
            cbCheckButtonChange = False
            cintCheckErrIdx = 1
        End If
    End If
    If (cintCheckRow = 2) Then 'Bemyndigande innan paragraf
        Dim rngBemyndEnd As Long
        Call FindMallSpan(CustMallarMain.cStrSMallBemyndigande, rangeStartFirst, rangeEnd)
        rngBemyndEnd = rangeEnd
        Call FindMallSpan(CustMallarMain.cStrSMallBemyndigande_Indrag, rangeStartFirst, rangeEnd)
        rngBemyndEnd = ImpMax(rngBemyndEnd, rangeEnd)
        Call FindMallSpan(CustMallarMain.cStrSMallForf_Paragraf, rangeStartSecond, rangeEnd)
        If (rngBemyndEnd > rangeStartSecond) Then
            cstrCheckFel = "Bemyndigande kommer efter paragrafer"
            cstrCheckForslag1 = "Infoga bemyndigande innan paragrafer."
            cbCheckButtonChange = False
            MarkParaAroundPos (rngBemyndEnd - 1)
            cintCheckErrIdx = 1
            
        End If
    End If
    
Err1:
End Sub
Sub ttType()
    For intI = 1 To ActiveDocument.Shapes.Count
        Set aErrShape = ActiveDocument.Shapes(intI)
        Call MarkShape(aErrShape)
        MsgBox (aErrShape.Type)
    Next intI
End Sub
Attribute VB_Name = "IMPCheckFunc"


'*************** Functions ***************************************
Function ParaHasSymbolFont(inPara As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    Dim prevEnd As Long
    prevEnd = inPara.Range.End
    Dim inRange1 As Range
    Set inRange1 = inPara.Range
    
    
    inRange1.Find.ClearFormatting
    inRange1.Find.Font.Name = "Symbol"
    inRange1.Find.Forward = True
    inRange1.Find.Execute
    
    If (inRange1.End < prevEnd) Then
        inRange1.Select
        bRes = True
        
    End If
    ParaHasSymbolFont = bRes
End Function
Function HasFormat(range1 As Range, inNameStyle As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    

    Dim rngFind As Range
    Set rngFind = range1.Paragraphs(1).Range
    
    Call rngFind.SetRange(range1.Start, range1.End)
    
    With rngFind.Find
        .Style = ImpDoc.Styles(inNameStyle)
        .Forward = True
        bRes = .Execute
    End With
    
    If (GetRangeStyleAsLegal(rngFind) = GetLegalName(inNameStyle)) Then
        bRes = True
        lngStart = rngFind.Start
        lngEnd = rngFind.End
    End If
    
Err1:
    HasFormat = bRes
    Exit Function
End Function
Sub MarkOnScreen(para1 As Paragraph, inStr1 As String)
    'Str|fffd|ngen |fffd|r entydig i paragrafen, f|fffd|ruts|fffd|tts
    Dim intStartPos As Long
    intStartPos = SpecPos(SpecText(para1.Range.text), inStr1, 1)
    Call MarkPosOnScreen(para1, inStr1, intStartPos)
    
    
End Sub
Sub MarkPosOnScreen(para1 As Paragraph, inStr1 As String, inIntRelPos1 As Long)
    'Markerar inStr1 p|fffd| sk|fffd|rmen, flera liknande str|fffd|ngar kan finnas
    On Error GoTo Error1
    Dim strSpecText As String
    strSpecText = SpecText(para1.Range.text)
    
    Dim intStartPos As Long
    intStartPos = para1.Range.Start + SpecPos(strSpecText, inStr1, inIntRelPos1) - 1
    Dim intEndPos As Long
    intEndPos = intStartPos + SpecLen(inStr1)
    
    If (GetTrueRange(para1, inStr1, intStartPos, intEndPos) = False) Then
        Call MsgBox("Kan av ok|fffd|nd anledning ej finna omr|fffd|det p|fffd| sk|fffd|rmen", vbExclamation, "Markering", 0, 0)
    End If
    Selection.Start = intStartPos
    Selection.End = intEndPos
    
    On Error GoTo Error2
    
    'G|fffd|r ett f|fffd|rs|fffd|k att scrolla fram markeringen
    If (MstrVersion <> "W97") Then
        ActiveWindowScrollIntoViewSelectionRange
        'Call ActiveWindow.ScrollIntoView(Selection.Range)
    End If
    Exit Sub
    
Error1:
        Call MarkPara(para1)
        Call MsgBox("Kan av ok|fffd|nd anledning ej markera texten p|fffd| sk|fffd|rmen", vbExclamation, "Markering", 0, 0)
        Exit Sub
Error2:
        'Call MsgBox("Kan ej scrolla fram markeringen", vbExclamation, "Markering", 0, 0)
        Exit Sub
End Sub
Function GetTrueRange(para1 As Paragraph, inStr1 As String, ByRef inoutStart As Long, ByRef inoutEnd As Long)
    'Ger de positioner p|fffd| sk|fffd|rmen som skall markeras vald range.text skall synas
    Dim bRes As Boolean
    bRes = True
    
    Dim trRange As Range
    Set trRange = ImpDoc.Range(inoutStart, inoutEnd)
    
    Dim strTR As String
    strTR = SpecText(trRange.text)
    
    If (strTR <> inStr1) Then 'Beh|fffd|vs true range?
        'Kontrollera f|fffd|rskjutningen n|fffd|r dold text kommer emellan
        Dim intRelStart As Long
        intRelStart = inoutStart - para1.Range.Start + 1
        Dim countVis As Long
        Dim intNewRelStart As Long
        countVis = 0
        intNewRelStart = intRelStart
        
        Dim strSum As String 'Hela str|fffd|ngen med alla tecken, ok|fffd|nda blir {000}
        strSum = ""
        Dim strTRRange As String
        'G|fffd| igenom tecken f|fffd|r tecken och bilda en komplett str|fffd|ng
        For i = para1.Range.Start To para1.Range.End - 1
            Call trRange.SetRange(i, i + 1)
            strTRRange = SpecText(trRange.text)
            If (strTRRange = "") Then 'Dold text
                strTRRange = "{000}"
                If (countVis < intRelStart) Then
                    intNewRelStart = intNewRelStart + 1
                End If
            Else
                countVis = countVis + 1
            End If
            strSum = strSum & strTRRange
        Next i
        
        Dim intPos As Long
        intPos = SpecPos(strSum, inStr1, intNewRelStart)
        If (intPos >= 1) Then
            inoutStart = para1.Range.Start + intPos - 1
            inoutEnd = inoutStart + SpecLen(inStr1)
        Else
            bRes = False 'Kan ej hitta str|fffd|ngen
        End If
    End If
    
    GetTrueRange = bRes
End Function

Function IsRubrik(inStr1 As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    Dim strName As String
    strName = GetLegalName(inStr1)
    If (HasString(strName, "rubrik")) Then bRes = True
    If (HasString(strName, "header")) Then bRes = True
    
    IsRubrik = bRes
End Function

Sub MarkPara(inPara1 As Paragraph)
    On Error GoTo Error1
    inPara1.Range.Select
    ActiveWindow.ScrollIntoView Selection.Range, True

Error1:

End Sub
Sub MarkParaAroundPos(intPos As Long)
    On Error GoTo Err1
    Dim aRange As Range
    Set aRange = ImpDoc.Range
    Call aRange.SetRange(intPos, intPos)
    
    Dim para1 As Paragraph
    Set para1 = aRange.Paragraphs(1)
    Call MarkPara(para1)
Err1:
End Sub
Sub MarkOddParentes(inPara1 As Paragraph)
    On Error GoTo Error1
    Dim intLastParentesePos As Long
    intLastParentesePos = 0
    
    Dim intI As Long
    For intI = 1 To inPara1.Range.Characters.Count
        Dim strChr As String
        strChr = inPara1.Range.Characters(intI).text
        If (strChr = "(") Then
            intLastParentesePos = intI
            Exit For 'Uppdaterad 060316
        End If
    Next intI
    
    If (intLastParentesePos > 0) Then
        inPara1.Range.Characters(intLastParentesePos).Select
    End If
Error1:

End Sub
Sub MarkTable(inTable1 As Table)
    On Error GoTo Error1
    inTable1.Range.Select
Error1:

End Sub
Sub MarkCell(inCell As Cell)
    On Error GoTo Error1
    inCell.Range.Select
Error1:

End Sub
Sub MarkInLineShape(inShape1 As InlineShape)
    On Error GoTo Error1
    inShape1.Range.Select
Error1:

End Sub
Sub MarkShape(inShape1 As Shape)
    On Error Resume Next
    inShape1.Anchor.Select
    inShape1.Select
    ActiveWindow.ScrollIntoView (inShape1)
Error1:

End Sub
Function HasLeftRightBorder(para1 As Paragraph) As Boolean
    On Error GoTo Error1
    HasLeftRightBorder = False
    If (para1.Range.Borders(wdBorderLeft).LineStyle = wdLineStyleSingle) Then
        bRes = True
    End If
    If (para1.Range.Borders(wdBorderRight).LineStyle = wdLineStyleSingle) Then
        bRes = True
    End If
    HasLeftRightBorder = bRes
Error1:

End Function

Function IsOKDateString(inStr1 As String, outStrErr As String) As Boolean
    '03 januari 2003
    IsOKDateString = False
    outStrErr = ""
    
    Dim strDay As String
    Dim strMonth As String
    Dim strYear As String
    
    strDay = TextGroup(inStr1, 1, True)
    strMonth = TextGroup(inStr1, 2, True)
    strYear = TextGroup(inStr1, 3, True)
    
    Dim bPart As Boolean
    Dim intStr As Long
    
    'Dagen
    bPart = False
    If (strDay = "xx") Then bPart = True
    If (strDay = "XX") Then bPart = True
    intStr = StrToInt(strDay)
    If ((intStr > 0) And (intStr <= 31)) Then bPart = True
    If (bPart = False) Then
        outStrErr = " dagen=" & strDay
        Exit Function
    End If
    
    'M|fffd|naden
    bPart = False
    If (strMonth = "xxxx") Then bPart = True
    If (strMonth = "XXXX") Then bPart = True
    If (strMonth = "januari") Then bPart = True
    If (strMonth = "februari") Then bPart = True
    If (strMonth = "mars") Then bPart = True
    If (strMonth = "april") Then bPart = True
    If (strMonth = "maj") Then bPart = True
    If (strMonth = "juni") Then bPart = True
    If (strMonth = "juli") Then bPart = True
    If (strMonth = "augusti") Then bPart = True
    If (strMonth = "september") Then bPart = True
    If (strMonth = "oktober") Then bPart = True
    If (strMonth = "november") Then bPart = True
    If (strMonth = "december") Then bPart = True
    If (bPart = False) Then
        outStrErr = " m|fffd|naden=" & strMonth
        Exit Function
    End If
    
    '|fffd|ret
    bPart = False
    If (strYear = "xxxx") Then bPart = True
    If (strYear = "XXXX") Then bPart = True
    intStr = StrToInt(strYear)
    If ((intStr > 1950) And (intStr <= 2500)) Then bPart = True
    If (bPart = False) Then
        outStrErr = " |fffd|ret=" & strYear
        Exit Function
    End If
    
    IsOKDateString = True
End Function

'  2003-10-09
Function IsOKUnderskriftString(inStr1 As String, outStrErr As String) As Boolean
    'AAAA BBBB
    Dim isOK As Boolean
    isOK = True
      
    If (UCase(inStr1) <> inStr1) Then
            isOK = False
            outStrErr = inStr1
    End If
    IsOKUnderskriftString = isOK
End Function


Function IsOKUtgavaString(inStr1 As String, outStrErr As String) As Boolean
    'BFS 2003:18
    IsOKUtgavaString = False
    
    Dim strBFS As String
    Dim strYear As String
    Dim strNr As String
    
    strBFS = TextGroup(inStr1, 1, True)
    strYear = TextGroup(inStr1, 2, True)
    strNr = TextGroup(inStr1, 3, True)
    
    Dim bPart As Boolean
    Dim intStr As Long
    
    'BFS
    bPart = False
    If (strBFS = "BFS") Then bPart = True
    If (bPart = False) Then
        outStrErr = " BFS=" & strBFS
        Exit Function
    End If
        
    '|fffd|ret
    bPart = False
    If (strYear = "xxxx") Then bPart = True
    If (strYear = "XXXX") Then bPart = True
    intStr = StrToInt(strYear)
    If ((intStr > 1950) And (intStr <= 2500)) Then bPart = True
    If (bPart = False) Then
        outStrErr = " |fffd|ret=" & strYear
        Exit Function
    End If
        
    'Nr
    bPart = False
    If (strNr = "00") Then bPart = True
    If (strNr = "xx") Then bPart = True
    If (strNr = "XX") Then bPart = True
    intStr = StrToInt(strNr)
    If ((intStr > 0) And (intStr <= 999)) Then bPart = True
    If (bPart = False) Then
        outStrErr = " nr=" & strNr
        Exit Function
    End If
    
    IsOKUtgavaString = True
End Function
Function IsOKForkortningString(inStr1 As String, outStrErr As String) As Boolean
    'SOL 3
    IsOKForkortningString = False
    
    Dim strFork As String
    Dim strNr As String
    
    strFork = TextGroup(inStr1, 1, True)
    strNr = TextGroup(inStr1, 2, True)
    
    Dim bPart As Boolean
    Dim intStr As Long
    
    'Forkortning
    bPart = False
    If (ImpLen(strFork) = 3) Then bPart = True
    If (bPart = False) Then
        outStrErr = " F|fffd|rkortning=" & strFork
        Exit Function
    End If
        
    'Nr
    bPart = False
    'If (strNr = "xx") Then bPart = True
    'If (strNr = "XX") Then bPart = True
    intStr = StrToInt(strNr)
    If ((intStr > 0) And (intStr <= 99)) Then bPart = True
    If (bPart = False) Then
        outStrErr = " nr=" & strNr
        Exit Function
    End If
    
    IsOKForkortningString = True
End Function
Function GetListPrefix(para1 As Paragraph, outOrder As Long) As String
'Ger tecknen innan tabb, eller microsofts listtecken
' outOrder = -1 om tabb saknas, eller ingen numrering framf|fffd|r tabb
    Dim strRes As String
    strRes = ""
    Dim strPreTab As String
    strPreTab = GetTextBefore(para1.Range.text, Chr(9), True)
    Dim intTabPos As Long
    intTabPos = ImpPos(para1.Range.text, Chr(9))

    Dim aCountList As Long
    aCountList = para1.Range.ListParagraphs.Count
    If (aCountList > 0) Then
        strPreTab = para1.Range.ListFormat.ListString
        intTabPos = 1 'l|fffd|tsas hittad
    End If
    
    If (intTabPos = 0) Then
        outOrder = -1
    Else
        outOrder = GetOrderFromPreText(strPreTab)
    End If
    strRes = strPreTab
    GetListPrefix = strRes
End Function

Function GetOrderFromPreText(inStr1 As String) As Long
    Dim strText As String
    strText = TextGroup(inStr1, 1, True)
    
    Dim intText As Long
    intText = StrToInt(strText)
    
    If (intText > 0) Then 'Tal
        GetOrderFromPreText = intText
        Exit Function
    End If
    
    If (ImpLen(strText) = 0) Then 'strecklista
        GetOrderFromPreText = 0
        Exit Function
    End If
    If (ImpLen(strText) > 1) Then 'Texten f|fffd|r l|fffd|ng f|fffd|r numrering
        GetOrderFromPreText = -1
        Exit Function
    End If
    
    
    strText = GetLegalName(strText)
    GetOrderFromPreText = ImpAsc(strText) - ImpAsc("a") + 1
    
End Function
Function IsAutoNumreradLista(para1 As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    If (para1.Range.ListParagraphs.Count > 0) Then
        bRes = True
    End If
        
Err1:
    IsAutoNumreradLista = bRes
End Function

Function GetBBRRubrikLevOrd(inStr1 As String, ByRef arrOrder() As Long, inType As Long) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    On Error GoTo Err1
    'BKR x:xxxxx
    If (inType <> 2) Then
        Dim strText1 As String
        Dim strText2 As String
        
        strText1 = TextGroup(inStr1, 1, True) 'Innan kolon
        strText2 = TextGroup(inStr1, 2, True) 'Efter kolon
        
        
        
        'B|fffd|rja med level 1
        arrOrder(1) = StrToInt(strText1)
        
        'Siffra f|fffd|r siffra efter kolon
        Dim intLen As Long
        intLen = ImpLen(strText2)
        Dim intI As Long
        For intI = 1 To 4
            Dim strChar As String
            strChar = "0"
            If ((intI) <= intLen) Then  'Finns siffra f|fffd|r niv|fffd|n
                strChar = ImpMidS(strText2, intI, 1)
                arrOrder(intI + 1) = StrToInt(strChar)
            Else
                arrOrder(intI + 1) = 0
            End If
        Next intI
    
        If (arrOrder(1) > 0) Then bRes = True
    Else
        'BBK x.x.x.x.x
        For intI = 1 To 5
            Dim strLev As String
            strLev = TextGroup(inStr1, intI, True)
            arrOrder(intI) = StrToInt(strLev)
        Next intI
        If (arrOrder(1) > 0) Then bRes = True
    End If
    
Err1:
    GetBBRRubrikLevOrd = bRes
End Function
Function GetParagrafNrFromText(inStr1 As String) As Long
    If (HasString(inStr1, "|fffd|") = False) Then 'Prestanda f|fffd|rb|fffd|ttring
        GetParagrafNrFromText = 0
        Exit Function
    End If
    
    Dim intRes As Long
    Dim strText1 As String
    Dim strSep1 As String
    
    strText1 = TextGroup(inStr1, 1, True)
    strSep1 = TextGroup(inStr1, 1, False)
    
    intRes = StrToInt(strText1)
    If (HasString(strSep1, "|fffd|") = False) Then intRes = 0
    
    GetParagrafNrFromText = intRes
End Function
Function HasRightParagrafFormat(inPara1 As Paragraph, ByRef outErrStr As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    'Exempel p|fffd| godk|fffd|nda texter
    '1_a_|fffd|3____Xxx 'Paragraf 1 a med en not 3 och vidare text
    '1_|fffd|____ 'Paragraf 1 utan text
    
    Dim strPara As String
    strPara = inPara1.Range.text
    
    'Finns paragraftecken |fffd|ver huvud taget?
    If (HasString(strPara, "|fffd|") = False) Then
        outErrStr = "Stycket saknar paragraftecken"
        GoTo Err1
    End If
    
    'F|fffd|rst ett nummer
    Dim strText1 As String 'F|fffd|rsta text numret p|fffd| paragrafen
    strText1 = TextGroup(strPara, 1, True)
    If (StrToInt(strText1) = 0) Then
        outErrStr = "Stycket inleds inte med separat siffernumrering"
        GoTo Err1
    End If
    
    'Finns fyra h|fffd|rda blanksteg?
    If (HasString(strPara, ChrW(160) & ChrW(160) & ChrW(160) & ChrW(160)) = False) Then
        outErrStr = "Stycket saknar fyra h|fffd|rda blanksteg efter paragraftecknet"
        GoTo Err1
    End If
    
    Dim intOneHBPos As Long
    Dim intParaSignPos As Long
    Dim intFourHBPos As Long
    Dim intOneBlankPos As Long
    
    intOneHBPos = ImpPos(strPara, ChrW(160))
    intParaSignPos = ImpPos(strPara, "|fffd|")
    intFourHBPos = ImpPos(strPara, ChrW(160) & ChrW(160) & ChrW(160) & ChrW(160))
    intOneBlankPos = ImpPos(strPara, Chr(32))
    
    'Saknas h|fffd|rt blanksteg
    If (intOneHBPos = 0) Then
         outErrStr = "Stycket saknar h|fffd|rt blanksteg"
        GoTo Err1
    End If
    'Saknas paragraf efter h|fffd|rt blanksteg
    If (intParaSignPos < intOneHBPos) Then
         outErrStr = "Saknar h|fffd|rt blanksteg innan paragraftecknet"
        GoTo Err1
    End If
    'Saknas fyra h|fffd|rda blanksteg efter paragraf
    If (intFourHBPos < intParaSignPos) Then
         outErrStr = "Saknar fyra h|fffd|rda blanksteg efter paragraftecknet"
        GoTo Err1
    End If
    'Saknas fyra h|fffd|rda blanksteg efter paragraf
    If ((intOneBlankPos < intParaSignPos) And (intOneBlankPos <> 0)) Then
         outErrStr = "Vanligt blanksteg innan paragraftecknet"
        GoTo Err1
    End If
    
    
   bRes = True
Err1:
    HasRightParagrafFormat = bRes
    
End Function
Function HasRightParagrafFormatOld(inPara1 As Paragraph, outErrStr As String) As Boolean
    'Kolla upp texten i paran
    Dim bRes As Boolean
    bRes = True  'Tro gott om anv|fffd|ndaren i b|fffd|rjan
    outErrStr = ""
    
    
    'Paragraftecken skall f|fffd|ljas av tabbtecken
    Dim strPara As String
    Dim strText1 As String
    Dim strSep1 As String
    
    strPara = inPara1.Range.text
    strText1 = TextGroup(strPara, 1, True)
    strSep1 = TextGroup(strPara, 1, False)
        
    If (HasString(strSep1, "|fffd|") = False) Then
        'Call IMPCheckFunc.MarkPara(inPara1)
        outErrStr = "Kan ej hitta paragraftecken efter f|fffd|rsta numreringen"
        HasRightParagrafFormatOld = False
        Exit Function
    End If
    If (HasString(strSep1, ChrW(160)) = False) Then
        'Call IMPCheckFunc.MarkPara(inPara1)
        outErrStr = "Kan ej hitta h|fffd|rt blanktecken efter f|fffd|rsta numreringen"
        HasRightParagrafFormatOld = False
        Exit Function
    End If
    Dim strExpectedSep As String
    strExpectedSep = ChrW(160) & "|fffd|" & ChrW(160) & ChrW(160) & ChrW(160) & ChrW(160)
    If (EqualLowerName(strSep1, strExpectedSep) = False) Then
        'Call IMPCheckFunc.MarkPara(inPara1)
        outErrStr = "Inte r|fffd|tt antal h|fffd|rda blanksteg kring paragraftecken."
        HasRightParagrafFormatOld = False
        Exit Function
    End If
   
    HasRightParagrafFormatOld = bRes
End Function
Function HasMergedRows(inTable As Table) As Boolean
    Dim bRes As Boolean
    bRes = True
    On Error GoTo Err1
    
    If (IMPVar.MstrVersion <> "W2003") Then
        If (inTable.Rows.Count > 0) Then 'Om man kan r|fffd|kna rader, s|fffd| inga mergade rader
            bRes = False
        End If
    Else
        'Mergade celler vertikalt, g|fffd|r att kolumnindex kan hoppa |fffd|ver ett v|fffd|rde p|fffd| en rad
        'Mergade celler horisontellt, g|fffd|r att kolumnindex inte |fffd|kas
        bRes = False
        Dim aCell As Cell
        Dim intCol As Long
        Dim intRow As Long
        Dim intLastCol As Long
        Dim intLastRow As Long
        intLastCol = 0
        intLastRow = 0
        For Each aCell In inTable.Range.Cells
            intRow = aCell.RowIndex
            intCol = aCell.ColumnIndex
            If (intRow > intLastRow) Then intLastCol = 0
            If (intCol > (intLastCol + 1)) Then bRes = True 'Nya kolumnen mer |fffd|n ett h|fffd|gre?
            
            intLastRow = intRow
            intLastCol = intCol
        Next aCell
    End If
    
Err1:
    HasMergedRows = bRes
End Function
Function HasOjamnaKolumner(aTable As Table, ByRef outCell As Cell) As Boolean
    'Har tabellen oj|fffd|mna kolumner
    
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    Dim intArrWidth(100) As Long
    Dim bUnlined As Boolean
    bUnlined = False
    
    'Leta upp komplett rad och s|fffd|tt arr
    Dim intMaxCol As Long
    intMaxCol = aTable.Columns.Count
    Dim aCell As Cell
    
    intCountCell = aTable.Range.Cells.Count
    For intK = 1 To intCountCell
        Set aCell = aTable.Range.Cells(intK)
        intCol = GetIntColIndex(aCell)
        intArrWidth(intCol) = aCell.Width
        If (intCol = intMaxCol) Then
            Exit For
        End If
    Next intK
    
    'Kontrollera att kolumner |fffd|r j|fffd|mna
    Dim intUsedCol As Long
    intUsedCol = 0
    intCountCell = aTable.Range.Cells.Count
    For intK = 1 To intCountCell
        Set aCell = aTable.Range.Cells(intK)
        Dim intWidth As Long
        intWidth = aCell.Width
        intCol = GetIntColIndex(aCell)
        If (intCol = 1) Then intUsedCol = 0
        intUsedCol = GetColStop(intUsedCol + 1, intWidth, intArrWidth)
        If (intUsedCol = 0) Then
            bUnlined = True
            Set outCell = aCell
        End If
    Next intK
    
    If (bUnlined) Then
        bRes = True
    End If
            
Err1:
    HasOjamnaKolumner = bRes
End Function
Function GetColStop(inintIdx As Long, inintWidth As Long, inintArr() As Long) As Long
    Dim intRes As Long
    intRes = 0
    
    Dim intSum As Long
    intSum = 0
    
    Dim intI As Long
    For intI = inintIdx To 100
        intSum = intSum + inintArr(intI)
        If (IsNearly(intSum, inintWidth)) Then
            intRes = intI
            Exit For
        End If
        If (intSum > inintWidth + 50) Then
            Exit For
        End If
    Next intI
    
    GetColStop = intRes
End Function
Function GetListChar(inPara As Paragraph, Optional intForce As Long = 1) As String
' Returnerar vilket prefix raden har. Ju h|fffd|gre v|fffd|rde p|fffd| Force, desto mer s|fffd|ker den.
' Return |fffd|r tom om inget hittas, mellanslag om omarkerad
' Force = 1, bara f|fffd|re tabb eller Microsoftlista
' Force = 2, TextGroup ett och alla sorters streck

    Dim strRes As String
    strRes = ""
    Dim intOrder As Long
    intOrder = 0
    
    On Error GoTo Err1
    
    strRes = IMPCheckFunc.GetListPrefix(inPara, intOrder)
    If (intOrder = 0) Then
        If (strRes <> Chr(150)) Then strRes = ""
    End If
    
    
    If (intForce = 2) Then 'Beh|fffd|ver och f|fffd|r vi titta djupare
    End If

Err1:
    GetListChar = strRes
End Function
Function GetNextListPrefix(inParaIdx As Long) As String
    'Bugg, skall kontrollera raden ovan
    Dim strRes As String
    strRes = ""
    
    On Error GoTo Err1
    strRes = Chr(150)
Err1:
    GetNextListPrefix = strRes

End Function
'  2002-09-10
Function getNewTemplateNameMapToOldName(ieOldName As String, ieArray() As String) As Long

    Dim intNrOfName As Long
    intNrOfName = 0
    
   Select Case ieOldName
   'RUBRIKER
    Case "BFS rubrik1"
        ieArray(0) = cStrSMallTitel
        intNrOfName = 1
        
     Case "BFS rubrik-1"
        ieArray(0) = cStrSMallRubrik2 'B|fffd|sta valet
        intNrOfName = 1
     Case "BFS rubrik-2"
        ieArray(0) = cStrSMallRubrik2
        intNrOfName = 1
     Case "BFS rubrik-3"
        ieArray(0) = cStrSMallRubrik3
        intNrOfName = 1
     Case "BFS rubrik-3"
        ieArray(0) = cStrSMallRubrik3
        intNrOfName = 1
     Case "BFS rubrik-4"
        ieArray(0) = cStrSMallRubrik4
        intNrOfName = 1
     Case "BFS rubrik-5"
        ieArray(0) = cStrSMallRubrik5
        intNrOfName = 1
    
   'IMPin BBR gammal
    Case "BBR-Tabell-Rubrik-F|fffd|reskrift"
        ieArray(0) = CustMallarMain.cStrSMallForf_TabellRubrik
        intNrOfName = 1
    Case "BBR-Tabell-Huvud-F|fffd|reskrift"
        ieArray(0) = CustMallarMain.cStrSMallForf_TabellHuvud
        intNrOfName = 1
    Case "BBR-Tabell-Text-F|fffd|reskrift"
        ieArray(0) = CustMallarMain.cStrSMallForf_TabellText
        intNrOfName = 1
    Case "BBR-Tabell-Rubrik-AllmR|fffd|d"
        ieArray(0) = CustMallarMain.cStrSMallAllmRad_TabellRubrik
        intNrOfName = 1
    Case "BBR-Tabell-Huvud-AllmR|fffd|d"
        ieArray(0) = CustMallarMain.cStrSMallAllmRad_TabellHuvud
        intNrOfName = 1
    Case "BBR-Tabell-Text-AllmR|fffd|d"
        ieArray(0) = CustMallarMain.cStrSMallAllmRad_TabellText
        intNrOfName = 1
   
   'TEXT, F|fffd|RESKRIFT
    Case "f|fffd|rf"
        ieArray(0) = cStrSMallForf
        'ieArray(1) = CustMallarMain.cStrSMallForf_Paragraf '"f|fffd|reskrift paragraf"
        intNrOfName = 1
    Case "f|fffd|rf-indrag"
        ieArray(0) = cStrSMallForf_Indrag
        intNrOfName = 1
    Case "f|fffd|rf-streck"
         ieArray(0) = cStrSMallForf_Lista
    Case "f|fffd|rf-streck2"
         ieArray(0) = cStrSMallForf_Lista2
         intNrOfName = 1
    Case "TabellrubrikF"
         ieArray(0) = "ED! BSF_F|fffd|RESKRIFT-TABELL-RUBRIK"
         ieArray(1) = "ED! BSF_F|fffd|RESKRIFT-BILD-RUBRIK"
         intNrOfName = 2
    Case "Tabeltext"
         ieArray(0) = "ED! BFS-F|fffd|REKRIFT-TABELL-TEXT"
         ieArray(1) = "ED! BFS-F|fffd|REKRIFT-TABELL-LISTA1"
         ieArray(2) = "ED! BFS-F|fffd|REKRIFT-TABELL-LISTA2"
         intNrOfName = 3
    Case "NotF"
         ieArray(0) = "ED! BFS-F|fffd|REKRIFT-TABELL-NOT"
         intNrOfName = 1
    Case "BFS noter"
         ieArray(0) = "ED! BFS-NOT"
         intNrOfName = 1
    Case "BFS-AllmR|fffd|d-Start"
         ieArray(0) = CustMallarMain.cStrSMallAllmRad_Start
         intNrOfName = 1
    End Select

    getNewTemplateNameMapToOldName = intNrOfName
End Function
'  2002-09-11
Function getNextWord(ieStr As String) As String

    Dim strNextWord As String
    strNextWord = ""
    
    Dim intStartPos As Long
    intStartPos = 1
    
    'hitta alla ev blanksteg i b|fffd|rjan av ordet
    While (Mid(ieStr, intStartPos, 1) = " ")
        intStartPos = intStartPos + 1
    Wend
    
    'Hitta f|fffd|rsta ordet
    Dim intPos As Long
    intPos = Len(ieStr)
    For i = intStartPos To intPos
        If (Mid(ieStr, i, 1) = " " Or i = intPos) Then 'slutet av ordet hittat
            strNextWord = Mid(ieStr, intStartPos, i - 1)
            Exit For
        End If
    Next i
    
    getNextWord = strNextWord
End Function


'  2003-09-11
'funktionen s|fffd|ker genom para och avbryter s|fffd|kning om den hittar icke till|fffd|ten f|fffd|ltkod
'vet ej om detta |fffd|r en bra s|fffd|tt att l|fffd|sa problemet
Function GetIllegalFaltKod(iePara As Paragraph) As String

    Dim strChrRangeText As String
    strChrRangeText = iePara.Range.text
    Dim strChrRange As String
    strChrRange = GetChrRangeText(iePara.Range)
    
    Dim intChrRangeTextPos As Long
    intChrRangeTextPos = 1
    Dim intChrRangePos As Long
    intChrRangePos = 1
    
    Dim strIllegalFaltKod As String
    strIllegalFaltKod = ""
    
    Dim intStrLen As Long
    intStrLen = Len(strChrRange)
    
    For intChrRangeTextPos = 1 To intStrLen
        'temp test n|fffd|sta tecken
        'k1 = Mid(strChrRange, intChrRangePos, 1)
        'k2 = Mid(strChrRangeText, intChrRangeTextPos, 1)
                
       If (Mid(strChrRange, intChrRangePos, 1) <> Mid(strChrRangeText, intChrRangeTextPos, 1)) Then 'f|fffd|ltkod funnen
        'hitta f|fffd|ltkodsbeskrivning, start
        fieldCode = getNextWord(Mid(strChrRange, intChrRangePos, Len(strChrRange)))
        
        If (fieldCode = "HYPERLINK ") Then 'fungerar f|fffd|r DATE, TOC men inte f|fffd|r PAGEREF
             'hitta f|fffd|ltkodsbeskrivning, slut
            nextWord = getNextWord(Mid(strChrRangeText, intChrRangeTextPos, Len(strChrRangeText)))
            'flytta kontrollen till efter f|fffd|ltkoden
            intChrRangePos = InStr(intChrRangePos, strChrRange, nextWord)
        Else ' otill|fffd|ten f|fffd|ltkod avbryter s|fffd|kning
            strIllegalFaltKod = fieldCode
            Exit For
        End If
    
       End If
       intChrRangePos = intChrRangePos + 1
       
    Next intChrRangeTextPos
    GetIllegalFaltKod = strIllegalFaltKod
End Function

Sub ttMsgString(inStr1 As String)
    Dim intLen As Long
    intLen = ImpLen(inStr1)
    
    Dim intI As Long
    For intI = 1 To intLen
        MsgBox (Asc(ImpMidS(inStr1, intI, 1)))
    Next intI
End Sub
Function GetCustTabStopPosMM(inPara1 As Paragraph, inIdx As Long) As Long
    'Tabbstopp i mm, 0 ger antalet
    Dim intRes As Long
    intRes = 0
    On Error GoTo Err1
    
    Dim intCount As Long
    intCount = 0
    Dim aTabStop As TabStop
    For Each aTabStop In inPara1.TabStops
        If (aTabStop.CustomTab) Then
            intCount = intCount + 1
            If (inIdx = intCount) Then
                intRes = 10 * PointsToCentimeters(aTabStop.Position)
                Exit For
            End If
        End If
    Next aTabStop
    
    If (inIdx = 0) Then intRes = intCount
Err1:
    GetCustTabStopPosMM = intRes
End Function
Function IsOKAlternativeText(aInlineShape As InlineShape) As Boolean
    Dim bRes As Boolean
    bRes = True
    On Error GoTo Err1
    If (aInlineShape_AlternativeText(aInlineShape) = "") Then 'saknar alternativtext
        If (aInlineShape.Type = 3) Then ' wdInlineShapePicture
            If (aInlineShape.Height > 20) Then 'Kontrollera ej sm|fffd|bilder
                bRes = False
            End If
        End If
    End If

Err1:
    IsOKAlternativeText = bRes
End Function
Sub ttTabStop()
    MsgBox (Selection.Range.Paragraphs(1).TabStops.Count)
    Dim aTabStop As TabStop
    For Each aTabStop In Selection.Range.Paragraphs(1).TabStops
        If (aTabStop.CustomTab) Then
            MsgBox (PointsToCentimeters(aTabStop.Position))
        End If
    Next aTabStop
End Sub
Attribute VB_Name = "IMPCheckMain"
'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:
Public cstrCheckFel As String
Public cstrCheckForslag1 As String
Public cstrCheckForslag2 As String
Public cstrCheckForslag3 As String
Public cstrCheckForslag4 As String
Public cstrCheckForslag5 As String
Public cbCheckButtonChange As Boolean

Public cintCheckErrIdx As Long

Public cstrCheckType As String
Public cintCheckRow As Long
Public cintCheckCol As Long

'Kontrollomr|fffd|den
Public Const cStrCheckDocs = "milj|fffd|"
Public Const cStrCheckStyles = "mallar"
Public Const cStrCheckMeta = "metadata"
Public Const cStrCheckTables = "tabeller"
Public Const cStrCheckShape = "bilder"
Public Const cStrCheckStruct = "struktur"
Public Const cStrCheckPara = "stycken"
Public Const cStrCheckFinal = "slut"

'CheckSettings
Public bCheckFromCursor As Boolean
'Public Const cCheckFromCursorDocVar = "CheckFromCursor"
Public Const cNumBBRDocVar = "NumBBRRubrik"
'Public bSearchOnlyNewTypes As Boolean
Public Const cSearchOnlyNewTypesDocVar = "SearchOnlyNewTypes"
Public strArrIgnore(1000) As String
Public intLastIgnore As Long
Public bCheckErrors As Long
Public Const cOkMallar = "cOkMallar"

Dim m_lngSelectStart As Long 'Var b|fffd|rjade kontrollen




Sub DoCheckClick()
    On Error GoTo Error1
    'N|fffd|r man trycker p|fffd| knappen "Check"
    m_lngSelectStart = Selection.Range.Start
        
    Call DoResetCheck
    bCheckErrors = 0
    'Kontrollera att para |fffd|r efter selection om det kr|fffd|vs
    If (IMPCheckMain.bCheckFromCursor) Then
    'If (IMPCheckMain.GetDocVariabelAsBoolean(cCheckFromCursorDocVar)) Then
        cstrCheckType = cStrCheckPara
        cintCheckRow = GetParaIdx(Selection.Start)
    End If
    Call DoContinueCheck
    Exit Sub
    
Error1:

    ImpMsg ("Kan ej kontrollera")
    
End Sub
Sub DoResetCheck()
'Nollst|fffd|ller checkr|fffd|knare
    cstrCheckType = ""
    cintCheckRow = 1
    cintCheckCol = 1
    
    cintCheckErrIdx = 0
    
                

End Sub
Sub DoIncrementCheck()
'|fffd|kar r|fffd|knare med ett
    On Error GoTo Error1
    If (cstrCheckType = "") Then 'Start
            DoResetCheck
            cstrCheckType = cStrCheckDocs
            
    ElseIf (cstrCheckType = cStrCheckDocs) Then 'milj|fffd|
        Call ChangeProcMessage("Kontrollerar dokument...")
        cintCheckRow = cintCheckRow + 1
        If (cintCheckRow > 9) Then
            DoResetCheck
            cstrCheckType = cStrCheckStyles
        End If
        
    ElseIf (cstrCheckType = cStrCheckStyles) Then 'Mallar
        'Call ChangeProcMessage("Kontrollerar mallar...")
        cintCheckRow = cintCheckRow + 1
        If (cintCheckRow > 99) Then
            DoResetCheck
            cstrCheckType = cStrCheckMeta
        End If
        
    ElseIf (cstrCheckType = cStrCheckMeta) Then 'Metadata
        Call ChangeProcMessage("Kontrollerar metadata...")
        cintCheckRow = cintCheckRow + 1
        If (cintCheckRow > 99) Then
            DoResetCheck
            cstrCheckType = cStrCheckTables
        End If
    ElseIf (cstrCheckType = cStrCheckTables) Then 'Tabeller
        Call ChangeProcMessage("Kontrollerar tabeller...")
        cintCheckRow = cintCheckRow + 1
        If (cintCheckRow > 9) Then
            DoResetCheck
            cstrCheckType = cStrCheckShape
        End If
    ElseIf (cstrCheckType = cStrCheckShape) Then 'Bilder
        Call ChangeProcMessage("Kontrollerar objekt...")
        cintCheckRow = cintCheckRow + 1
        If (cintCheckRow > 99) Then
            DoResetCheck
            cstrCheckType = cStrCheckStruct
        End If
    ElseIf (cstrCheckType = cStrCheckStruct) Then 'Structur
        Call ChangeProcMessage("Kontrollerar struktur...")
        cintCheckRow = cintCheckRow + 1
        If (cintCheckRow > 9) Then
            DoResetCheck
            cstrCheckType = cStrCheckPara
        End If
        
    ElseIf (cstrCheckType = cStrCheckPara) Then 'Para
        'Call ChangeProcMessage("Kontrollerar stycke...")
        cintCheckCol = cintCheckCol + 1
        If (cintCheckCol > 19) Then
            cintCheckRow = cintCheckRow + 1
            cintCheckCol = 1
        End If
        If (cintCheckRow > IMPVar.ImpDocParagraphsCount) Then
            DoResetCheck
            cstrCheckType = cStrCheckFinal
        End If
        
    ElseIf (cstrCheckType = cStrCheckFinal) Then '|fffd|vrigt
        Call ChangeProcMessage("Kontrollerar |fffd|vrigt...")
        cintCheckRow = cintCheckRow + 1
        If (cintCheckRow > 2) Then
            cintCheckErrIdx = -1
        End If
    End If
    Exit Sub
Error1:
    ImpMsg ("Kan ej |fffd|ka r|fffd|knare f|fffd|r regelkontroll")
End Sub
Sub DoContinueCheck()
On Error GoTo Error1
'Forts|fffd|tter att Checka/increment tills n|fffd|got |fffd|r fel
'W97 har modalt f|fffd|nster, d|fffd|rf|fffd|r ligger visningen i loopen
'W2000, WXP har flytande f|fffd|nster som anropar Continue loopen
    If (MstrVersion <> "W97") Then
        InitProcMessage ("Kontrollerar nu dokumentet")
    End If
    cintCheckErrIdx = 0
    
    While (cintCheckErrIdx = 0)
        Call DoTheCheck
        If (MstrVersion = "W97") Then
            If (cintCheckErrIdx > 0) Then
                'Load IMPErrFloat
                IMPErrFloat.SetFel (cstrCheckFel)
                IMPErrFloat.AddForslag (cstrCheckForslag1)
                IMPErrFloat.AddForslag (cstrCheckForslag2)
                IMPErrFloat.AddForslag (cstrCheckForslag3)
                IMPErrFloat.AddForslag (cstrCheckForslag4)
                IMPErrFloat.AddForslag (cstrCheckForslag5)
                IMPErrFloat.CommandButtonChange.Enabled = cbCheckButtonChange
                IMPErrFloat.Show
                If (cintCheckErrIdx <> -2) Then cintCheckErrIdx = 0
                bCheckErrors = bCheckErrors + 1
            End If
        End If
    
        If (cintCheckErrIdx = 0) Then
            Call DoIncrementCheck
        End If
    Wend 'slut loop
    
    
    CloseProcMessage 'St|fffd|ng Processf|fffd|nster
    If (cintCheckErrIdx = -1) Then
        If (bCheckErrors = 0) Then
            ImpMsg ("Kontrollerat klart, inga fel.")
            IMPVar.CloseProcMessage
        Else
            msgRes = MsgBox("Kontrollerat klart, kontrollera igen?", vbYesNo, "Kontrollera")
            If (msgRes = vbYes) Then
                'Call IMPMain.DoCheck
                Call Selection.SetRange(m_lngSelectStart, m_lngSelectStart)
                Call DoCheckClick
            Else
                IMPVar.CloseProcMessage
            End If
        End If
    Else
        If (MstrVersion <> "W97") Then
            'Visa icke-modalt f|fffd|nster, med continueknapp
            IMPErrFloatShow0    'IMPErrFloat.Show 0
            IMPErrFloat.SetFel (cstrCheckFel)
            IMPErrFloat.AddForslag (cstrCheckForslag1)
            IMPErrFloat.AddForslag (cstrCheckForslag2)
            IMPErrFloat.AddForslag (cstrCheckForslag3)
            IMPErrFloat.AddForslag (cstrCheckForslag4)
            IMPErrFloat.AddForslag (cstrCheckForslag5)
            IMPErrFloat.CommandButtonChange.Enabled = cbCheckButtonChange
            bCheckErrors = bCheckErrors + 1
        End If
    End If
    Exit Sub
Error1:
    ImpMsg ("Kan ej hantera regel")
End Sub

Sub DoTheCheck()
    'Hit kommer man med r|fffd|tt v|fffd|rden p|fffd| cstrCheckType, cintCheckRow och cintCheckCol
    On Error GoTo Error1
    If (IsIgnoring) Then Exit Sub 'Hoppa |fffd|ver om ignore
    ResetCheckStr
    
    'Om funktionen returnerar cintCheckErrIdx > 0, s|fffd| avbryts kontrollen och felet visas
    
    
    If (cstrCheckType = cStrCheckDocs) Then 'Documents
    End If
    If (cstrCheckType = cStrCheckStyles) Then 'Mallar
        'CheckMallar
    End If
    If (cstrCheckType = cStrCheckMeta) Then 'Metadata
        CheckMetadata
    End If
    If (cstrCheckType = cStrCheckTables) Then 'Tables
        CheckTable
    End If
    If (cstrCheckType = cStrCheckShape) Then 'Bilder
        CheckShapes
    End If
    If (cstrCheckType = cStrCheckStruct) Then 'Struktur
        CheckStructure
    End If
    If (cstrCheckType = cStrCheckPara) Then 'Para
        CheckPara
    End If
    If (cstrCheckType = cStrCheckFinal) Then 'Slut
    End If
    Exit Sub

Error1:
    ImpMsg ("Kan ej anropa regel:" & cstrCheckType)

End Sub
Sub ResetCheckStr()
    cstrCheckFel = ""
    cstrCheckForslag1 = ""
    cstrCheckForslag2 = ""
    cstrCheckForslag3 = ""
    cstrCheckForslag4 = ""
    cstrCheckForslag5 = ""
    cbCheckButtonChange = True
End Sub


Function AddIgnore() As Boolean
    'L|fffd|gger till nuvarande koll i ignore
    Dim strIgnore As String
    strIgnore = GetIgnoreStr
    intLastIgnore = intLastIgnore + 1
    If (intLastIgnore = 1000) Then intLastIgnore = 999
    strArrIgnore(intLastIgnore) = strIgnore
    
    AddIgnore = True
End Function
Function IsIgnoring() As Boolean
    'Kollar om nuvarande koll finns i ignore
    Dim bRes As Boolean
    bRes = False
    
    Dim strIgnore As String
    strIgnore = GetIgnoreStr

    Dim intI As Long
    For intI = 1 To intLastIgnore
        If (strIgnore = strArrIgnore(intI)) Then
            bRes = True
            Exit For
        End If
    Next intI
    
    IsIgnoring = bRes
End Function
Function GetIgnoreStr() As String
    'Ignorestr|fffd|ng
    Dim strRes As String
    strRes = cstrCheckType & "," & IntToStr(cintCheckRow) & "," & IntToStr(cintCheckCol)
    GetIgnoreStr = strRes
End Function

Sub SetDocVariabel(inStrName As String, inStrValue As String)
'S|fffd|tter dokumentvariabel
    On Error GoTo Err1
    
    Dim bVarExists As Boolean
    bVarExists = False
    For Each myVar In ImpDoc.Variables
        If (myVar.Name = inStrName) Then
            bVarExists = True
        End If
    Next myVar
    If (bVarExists = False) Then
        Call ImpDoc.Variables.Add(inStrName, inStrValue)
    Else
        ImpDoc.Variables(inStrName) = inStrValue
    End If
Err1:
End Sub
Function GetDocVariabel(inStrName As String) As String
'Returnerar dokumentvariabel
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    strRes = ImpDoc.Variables(inStrName)
    
Err1:
    GetDocVariabel = strRes
End Function
Function GetDocVariabelAsBoolean(inStrName As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    If (GetDocVariabel(inStrName) = "y") Then bRes = True
    
    GetDocVariabelAsBoolean = bRes
End Function
Sub SetDocVariabelAsBoolean(inStrName As String, inbValue As Boolean)
    
    Dim strValue As String
    strValue = "n"
    If (inbValue) Then strValue = "y"
    Call SetDocVariabel(inStrName, strValue)
End Sub

Attribute VB_Name = "IMPCreateHTML"
'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:
Public doc2 As ImpDoc
Public doc3 As ImpDoc

Dim ieHead As ImpElement

Dim ieBody As ImpElement
Dim ieStyle As ImpElement
Dim ieCurr As ImpElement
Dim arrCols(100) As Long

Dim mFootnoteIdx As Long
Dim arrFootnoteTecken() As String
Dim arrFootnoteHanvisning() As String

Function DoAllToHTML(inDoc2 As ImpDoc, inDoc3 As ImpDoc) As Boolean
    Dim bRes As Boolean
    On Error GoTo Err1
    
    'Omvandlar dokument till HTML
    Call ChangeProcMessage("Skapar HTML fil...", False)
    
    Set doc2 = inDoc2
    Set doc3 = inDoc3
    Call CreateHTMLEmpty
    Call DoTexts
    Call DoFootnotes
    
    bRes = True
Err1:
    DoAllToHTML = bRes
End Function

Sub CreateHTMLEmpty()
        'Grunddata
        Set ieHead = doc3.CreateGetElement("head", 1)
        Set ieStyle = doc3.CreateGetElement("style", 1)
        Set ieBody = doc3.CreateGetElement("body", 1)
        Set ieCurr = ieBody
        
        'CSS-Styles
        ieStyle.AddText ("" & Chr(13) & Chr(10))
        ieStyle.AddText (".andring {background-color: #CCBBFF}" & Chr(13) & Chr(10))
        ieStyle.AddText (".betoning_grad1 {font-style: italic}" & Chr(13) & Chr(10))
        ieStyle.AddText (".betoning_grad2 {font-weight: bold}" & Chr(13) & Chr(10))
        ieStyle.AddText (".betoning_grad3 {font-weight: bold; font-style: italic}" & Chr(13) & Chr(10))
        ieStyle.AddText (".betoning_grad4 {text-decoration: underline;}" & Chr(13) & Chr(10))
        ieStyle.AddText (".betoning_grad5 {text-decoration: underline; font-style: italic}" & Chr(13) & Chr(10))
        ieStyle.AddText (".betoning_grad6 {vertical-Align: sub}" & Chr(13) & Chr(10))
        ieStyle.AddText (".betoning_grad7 {vertical-Align: super}" & Chr(13) & Chr(10))
        ieStyle.AddText (".egenlista { list-style-type: none;}" & Chr(13) & Chr(10))
        ieStyle.AddText (".strecklista { list-style-type: none;}" & Chr(13) & Chr(10))
        ieStyle.AddText (".punktlista { font-family:Verdana;}" & Chr(13) & Chr(10))


    'Initieringar
    mFootnoteIdx = 0
End Sub
Sub DoTexts()
    'G|fffd| igenom och h|fffd|mta ut alla textelement
    Dim intMax As Long
    intMax = doc2.GetCountElement
    Dim intI As Long
    Dim ieNext As ImpElement
    For intI = 1 To intMax
        Set ieNext = doc2.GetElement(intI)
        If (ieNext.intElementType = 1) Then
            If (ieNext.GetElementName = "text") Then
                Call DoText(ieNext)
            End If
        End If
    Next intI
End Sub
Sub DoText(ieText As ImpElement)
    'H|fffd|mta ut rubriker och stycken
    Dim aArrChild() As Long
    Dim intCountChild As Long
    Dim ieSub As ImpElement
    intCountChild = doc2.GetChildren(ieText.intIdxInDoc, aArrChild)
                
    Dim intI As Long
    For intI = 1 To intCountChild
        Set ieSub = doc2.GetElement(aArrChild(intI))
        If (ieSub.GetElementName = "rubrik") Then
            Call DoRubrik(ieSub)
        ElseIf (ieSub.GetElementName = "stycke") Then
            Call DoStycke(ieSub)
        ElseIf (ieSub.GetElementName = "lista") Then
            Call DoLista(ieSub, ieBody)
        ElseIf (ieSub.GetElementName = "tabell") Then
            Call DoTabell(ieSub)
        End If
    Next intI
    
End Sub
Sub DoRubrik(ieOrgRubrik As ImpElement)

    'Vilken storlek p|fffd| rubrik
    Dim strAttr As String
    strAttr = ieOrgRubrik.GetAttrValue("storlek")
    Dim strH As String
    strH = "h2"
    If (strAttr = "rubrik1") Then strH = "h1"
    If (strAttr = "rubrik2") Then strH = "h2"
    If (strAttr = "rubrik3") Then strH = "h3"
    
    'Skapa noden
    Dim ieHRubrik As ImpElement
    Set ieHRubrik = ieCurr.mImpDoc.CreateGetElement(strH, ieCurr.intIdxInDoc)
    
    '|fffd|ndringsmarkering
    If (ieOrgRubrik.GetAttrValue("kantmarkering") = "med") Then
        Call ieHRubrik.SetAttr("class", "andring")
    End If
    'L|fffd|gg in texten
    Call DoHChars(ieOrgRubrik, ieHRubrik)
    
    'Wordbilaga
    If (strH = "h2") Then
        'L|fffd|gg in Wordbilaga
    End If
    
End Sub
Sub DoStycke(ieOrgStycke As ImpElement)
    'Skapa noden
    Dim ieHStycke As ImpElement
    Set ieHStycke = ieCurr.mImpDoc.CreateGetElement("p", ieCurr.intIdxInDoc)
    
    '|fffd|ndringsmarkering
    If (ieOrgStycke.GetAttrValue("kantmarkering") = "med") Then
        Call ieHStycke.SetAttr("class", "andring")
    End If
    
    'L|fffd|gg in texten
    Call DoHChars(ieOrgStycke, ieHStycke)
End Sub
Sub DoLista(ieOrg As ImpElement, ieHPar As ImpElement)
    
    'Skapa listan
    Dim ieLista As ImpElement
    Set ieLista = ieCurr.mImpDoc.CreateGetElement("ul", ieHPar.intIdxInDoc)
    Call ieLista.SetAttr("class", "egenlista")
    
    Dim aArrChild() As Long
    Dim intCountChild As Long
    Dim ieSubPara As ImpElement
    Dim intI As Long
    intCountChild = ieOrg.mImpDoc.GetChildren(ieOrg.intIdxInDoc, aArrChild)
    
    'G|fffd| igenom listelementen
    For intI = 1 To intCountChild
        Set ieSubPara = ieOrg.mImpDoc.GetElement(aArrChild(intI))
        If (ieSubPara.intElementType = 1) Then 'Element
            If (HasString(ieSubPara.GetElementName, "listelement")) Then
                Dim strAttrType As String
                strAttrType = ieSubPara.GetAttrValue("listtyp")
                If (strAttrType = "strecklista") Then
                    Call ieLista.SetAttr("class", "strecklista")
                End If
                If (strAttrType = "punktlista") Then
                    Call ieLista.SetAttr("class", "punktlista")
                End If
                'Skapa listraden
                Dim ieListRow As ImpElement
                Set ieListRow = ieLista.mImpDoc.CreateGetElement("li", ieLista.intIdxInDoc)
                If (strAttrType = "strecklista") Then
                    ieListRow.AddText ("- ")
                End If
                If (strAttrType = "egenlista") Then
                    Dim strEgenPrefix As String
                    strEgenPrefix = ieSubPara.GetAttrValue("egenlistabet")
                    ieListRow.AddText (strEgenPrefix & " ")
                End If
                Call DoListElement(ieSubPara, ieListRow)
            End If
        End If
    Next intI
    
End Sub
Sub DoListElement(ieListElement As ImpElement, ieLI As ImpElement)
    Dim aArrChild() As Long
    Dim intCountChild As Long
    Dim ieSubPara As ImpElement
    Dim intI As Long
    intCountChild = ieListElement.mImpDoc.GetChildren(ieListElement.intIdxInDoc, aArrChild)
    
    'G|fffd| igenom listelementen
    For intI = 1 To intCountChild
        Set ieSubPara = ieListElement.mImpDoc.GetElement(aArrChild(intI))
        If (ieSubPara.intElementType = 1) Then 'Element
            If (ieSubPara.GetElementName = "stycke") Then
                    '|fffd|ndringsmarkering
                    If (ieSubPara.GetAttrValue("kantmarkering") = "med") Then
                        Call ieLI.SetAttr("class", "andring")
                    End If
                    Call DoHChars(ieSubPara, ieLI)
            End If
            If (ieSubPara.GetElementName = "lista_sub") Then
                Call DoLista(ieSubPara, ieLI)
            End If
        End If
    Next intI
End Sub
Sub DoTabell(ieOrgTable As ImpElement)
    'Kolumnbredder
    
    
    'Skapa tabellen
    Dim ieHTable As ImpElement
    Set ieHTable = ieCurr.mImpDoc.CreateGetElement("table", ieCurr.intIdxInDoc)
    Call ieHTable.SetAttr("border", "1")
    Call ieHTable.SetAttr("cellpadding", "0")
    Call ieHTable.SetAttr("cellspacing", "0")
    If (ieOrgTable.GetAttrValue("frame") = "none") Then Call ieHTable.SetAttr("border", "0")
    If (ieOrgTable.GetAttrValue("frame") = "mixed") Then Call ieHTable.SetAttr("border", "0")
    
    'Leta upp kolumnbredder
    Dim intIdx As Long
    Dim ieOrgTgroup As ImpElement
    intIdx = ieOrgTable.GetChildByElement("tgroup")
    If (intIdx > 0) Then
        Set ieOrgTgroup = ieOrgTable.mImpDoc.GetElement(intIdx)
        
        'Kolumner
        Dim intCols As Long
        intCols = ieOrgTgroup.GetChildCount("colspec")
        If (intCols > 100) Then intCols = 100
        Dim intI As Long
        For intI = 1 To intCols
            intIdx = ieOrgTgroup.GetChildByElement("colspec", intI)
            If (intIdx > 0) Then
                Dim ieCols As ImpElement
                Set ieCols = ieOrgTgroup.mImpDoc.GetElement(intIdx)
                Dim strAttrWidth As String
                strAttrWidth = ieCols.GetAttrValue("COLWIDTH")
                arrCols(intI) = StrToInt(strAttrWidth)
            Else
                arrCols(intI) = 0
            End If
        Next intI
        
        'Rad f|fffd|r rad i header
        Dim intRows As Long
        Dim ieRow As ImpElement
        intIdx = ieOrgTgroup.GetChildByElement("thead")
        If (intIdx > 0) Then
            Dim ieThead As ImpElement
            Set ieThead = ieOrgTgroup.mImpDoc.GetElement(intIdx)
            intRows = ieThead.GetChildCount("row")
            For intI = 1 To intRows
                intIdx = ieThead.GetChildByElement("row", intI)
                If (intIdx > 0) Then
                    Set ieRow = ieThead.mImpDoc.GetElement(intIdx)
                    Call DoTableRow(ieRow, ieHTable)
                End If
            Next intI
        End If
        
        'Rad f|fffd|r rad i body
        intIdx = ieOrgTgroup.GetChildByElement("tbody")
        If (intIdx > 0) Then
            Dim ieTbody As ImpElement
            Set ieTbody = ieOrgTgroup.mImpDoc.GetElement(intIdx)
            intRows = ieTbody.GetChildCount("row")
            For intI = 1 To intRows
                intIdx = ieTbody.GetChildByElement("row", intI)
                If (intIdx > 0) Then
                    Set ieRow = ieTbody.mImpDoc.GetElement(intIdx)
                    Call DoTableRow(ieRow, ieHTable)
                End If
            Next intI
        End If
    End If
    
    
    
End Sub
Sub DoTableRow(ieOrgRow As ImpElement, ieHTable As ImpElement)
    'Hanterar en tabellrad
    
    'Skapa en html-tabellrad
    Dim ieHTR As ImpElement
    Set ieHTR = ieHTable.mImpDoc.CreateGetElement("tr", ieHTable.intIdxInDoc)
    
    'G|fffd| igenom kolumnerna
    Dim intCols As Long
    intCols = ieOrgRow.GetChildCount("entry")
    
    Dim intI As Long
    For intI = 1 To intCols
        Dim intIdx As Long
        intIdx = ieOrgRow.GetChildByElement("entry", intI)
        If (intIdx > 0) Then
            Dim ieEntry As ImpElement
            Set ieEntry = ieOrgRow.mImpDoc.GetElement(intIdx)
            Dim strAttrStart As String
            Dim strAttrEnd As String
            strAttrStart = ieEntry.GetAttrValue("COLNAME")
            If (strAttrStart <> "") Then 'COLNAME
                strAttrEnd = strAttrStart
            Else
                strAttrStart = ieEntry.GetAttrValue("NAMEST")
                strAttrEnd = ieEntry.GetAttrValue("NAMEEND")
            End If
            
            'Skapa html-entry
            Dim ieHTD As ImpElement
            Set ieHTD = ieHTR.mImpDoc.CreateGetElement("td", ieHTR.intIdxInDoc)
            
            'Ta fram bredd och l|fffd|ngd
            Dim strWidth As String
            Dim strSpan As String
            Call GetWidthAndSpan(strAttrStart, strAttrEnd, strWidth, strSpan)
            If (strSpan = "") Then
            ElseIf (strSpan = "1") Then
                Call ieHTD.SetAttr("width", strWidth)
            Else
                Call ieHTD.SetAttr("width", strWidth)
                Call ieHTD.SetAttr("colspan", strSpan)
            End If
            
            'Ta fram linjer och align
            Dim strLines As String
            strLines = GetLinesStr(ieEntry)
            If (strLines <> "") Then Call ieHTD.SetAttr("style", strLines)
            Dim strAlign As String
            strAlign = GetAlignStr(ieEntry)
            If (strAlign <> "") Then Call ieHTD.SetAttr("align", strAlign)
            Dim strVAlign As String
            strVAlign = GetVAlignStr(ieEntry)
            If (strVAlign <> "") Then Call ieHTD.SetAttr("valign", strVAlign)
            
            
            'Fyll p|fffd| med texten
            Call DoEntry(ieEntry, ieHTD)
        End If
    Next intI
    
End Sub
Sub DoEntry(ieEntry As ImpElement, ieHTD As ImpElement)
    'H|fffd|mta ut listor och stycken
    Dim aArrChild() As Long
    Dim intCountChild As Long
    Dim ieSub As ImpElement
    intCountChild = ieEntry.mImpDoc.GetChildren(ieEntry.intIdxInDoc, aArrChild)
    
    Dim intStycken As Long
    intStycken = 0
                
    Dim intI As Long
    For intI = 1 To intCountChild
        Set ieSub = ieEntry.mImpDoc.GetElement(aArrChild(intI))
        If (ieSub.GetElementName = "stycke") Then
            If (intStycken > 0) Then ieHTD.AddText ("<br/>")
            Call DoHChars(ieSub, ieHTD)
            intStycken = intStycken + 1
        ElseIf (ieSub.GetElementName = "lista") Then
            If (intStycken > 0) Then ieHTD.AddText ("<br/>")
            Call DoLista(ieSub, ieHTD)
            intStycken = intStycken + 1
        End If
    Next intI
    If (intStycken = 0) Then ieHTD.AddText ("<br/>") 'Inga helt tomma celler
    
End Sub
Sub GetWidthAndSpan(inStrStart As String, inStrEnd As String, outStrWidth As String, outStrSpan As String)
    'Default
    outStrWidth = ""
    outStrSpan = ""
    
    'Start och slut
    Dim intStart As Long
    intStart = StrToInt(inStrStart)
    Dim intEnd As Long
    intEnd = StrToInt(inStrEnd)
    
    If ((intStart > 0) And (intEnd >= intStart)) Then 'Rimliga v|fffd|rden
        Dim intWidth As Long
        intWidth = 0
        Dim intSpan As Long
        intSpan = 0
        Dim intI As Long
        For intI = intStart To intEnd
            intSpan = intSpan + 1
            intWidth = intWidth + arrCols(intI)
        Next intI
        
        outStrWidth = IntToStr(intWidth)
        outStrSpan = IntToStr(intSpan)
    End If
    
End Sub

Sub DoHChars(iePara As ImpElement, ieDest As ImpElement)
    Dim aArrChild() As Long
    Dim intCountChild As Long
    Dim ieSubPara As ImpElement
    Dim intI As Long
    intCountChild = iePara.mImpDoc.GetChildren(iePara.intIdxInDoc, aArrChild)
    For intI = 1 To intCountChild
        Set ieSubPara = iePara.mImpDoc.GetElement(aArrChild(intI))
        If (ieSubPara.intElementType = 1) Then 'Element
            If (ieSubPara.GetElementName = "lank") Then
                    Dim ieLink As ImpElement
                    Set ieLink = ieDest.mImpDoc.CreateGetElement("a", ieDest.intIdxInDoc)
                    Call ieLink.SetAttr("href", ieSubPara.GetAttrValue("xlink:href"))
                    ieLink.AddText (ieSubPara.GetTextExcludeSubs)
            ElseIf (ieSubPara.GetElementName = "not") Then
                    Dim idxNottecken As Long
                    idxNottecken = ieSubPara.GetChildByElement("nottecken")
                    Dim idxHanvisning As Long
                    idxHanvisning = ieSubPara.GetChildByElement("hanvisning")
                    
                    Dim strNottecken As String
                    strNottecken = ""
                    If (idxNottecken > 0) Then
                        Dim ieNottecken As ImpElement
                        Set ieNottecken = ieSubPara.mImpDoc.GetElement(idxNottecken)
                        strNottecken = ieNottecken.GetTextExcludeSubs
                    End If
                    
                    Dim strHanvisning As String
                    strHanvisning = ""
                    If (idxHanvisning > 0) Then
                        Dim ieHanvisning As ImpElement
                        Set ieHanvisning = ieSubPara.mImpDoc.GetElement(idxHanvisning)
                        strHanvisning = ieHanvisning.GetTextExcludeSubs
                    End If
            
                    Dim strRefId As String
                    strRefId = SetNewFootnote(strNottecken, strHanvisning)
                    Dim ieNot As ImpElement
                    Set ieNot = ieDest.mImpDoc.CreateGetElement("a", ieDest.intIdxInDoc)
                    Call ieNot.SetAttr("href", "#" & strRefId)
                    ieNot.AddText (strNottecken)
            ElseIf (ieSubPara.GetElementName = "betoning") Then
'            If (ieSubPara.GetElementName = "betoning") Then
                'Betoning
                Dim strAttrGrad As String
                strAttrGrad = ieSubPara.GetAttrValue("grad")
                Dim ieStyle As ImpElement
                Set ieStyle = ieDest.mImpDoc.CreateGetElement("span", ieDest.intIdxInDoc)
                
                If (strAttrGrad = "grad1") Then
                    Call ieStyle.SetAttr("class", "betoning_grad1")
                ElseIf (strAttrGrad = "grad2") Then
                    Call ieStyle.SetAttr("class", "betoning_grad2")
                ElseIf (strAttrGrad = "grad3") Then
                    Call ieStyle.SetAttr("class", "betoning_grad3")
                ElseIf (strAttrGrad = "grad4") Then
                    Call ieStyle.SetAttr("class", "betoning_grad4")
                ElseIf (strAttrGrad = "grad5") Then
                    Call ieStyle.SetAttr("class", "betoning_grad5")
                ElseIf (strAttrGrad = "grad6") Then
                    Call ieStyle.SetAttr("class", "betoning_grad6")
                ElseIf (strAttrGrad = "grad7") Then
                    Call ieStyle.SetAttr("class", "betoning_grad7")
                End If
                
                ieStyle.AddText (ieSubPara.GetTextExcludeSubs)
            End If
            If (ieSubPara.GetElementName = "bild_inline") Then
                'Bild
                Dim strAttrSrc As String
                strAttrSrc = ieSubPara.GetAttrValue("src")
                Dim strAttrWidth As String
                strAttrWidth = ieSubPara.GetAttrValue("width")
                Dim strAttrHeight As String
                strAttrHeight = ieSubPara.GetAttrValue("height")
                Dim ieImg As ImpElement
                Set ieImg = ieDest.mImpDoc.CreateGetElement("img", ieDest.intIdxInDoc)
                Call ieImg.SetAttr("src", strAttrSrc)
                If ((strAttrWidth <> "") And (strAttrHeight <> "")) Then
                    Call ieImg.SetAttr("width", strAttrWidth)
                    Call ieImg.SetAttr("height", strAttrHeight)
                End If
                Call ieImg.SetAttr("alt", ieSubPara.GetAttrValue("alt"))
            End If
        Else 'Text
            ieDest.AddText (ieSubPara.GetElementName)
        End If
    Next intI
    
End Sub
Function GetLinesStr(ieEntry As ImpElement) As String
    'style="border-left-style: ridge; border-bottom-style: ridge;border-width:2"
    Dim strRes As String
    strRes = ""
    
    Dim strXML As String
    strXML = ieEntry.GetAttrValue("ROWSEP")
    
    If (strXML <> "") Then
        If (HasString(strXML, "L")) Then strRes = strRes & "border-left-style: ridge; "
        If (HasString(strXML, "R")) Then strRes = strRes & "border-right-style: ridge; "
        If (HasString(strXML, "T")) Then strRes = strRes & "border-top-style: ridge; "
        If (HasString(strXML, "B")) Then strRes = strRes & "border-bottom-style: ridge; "
        strRes = strRes & "border-width:2" & Chr(34)
    End If
    GetLinesStr = strRes
End Function

Function GetAlignStr(ieEntry As ImpElement) As String
    'align="center"
    Dim strRes As String
    strRes = ""
    
    Dim strXML As String
    strXML = ieEntry.GetAttrValue("ALIGN")
    
    If (strXML <> "") Then
        If (strXML = "CENTER") Then strRes = "center"
        If (strXML = "RIGHT") Then strRes = "right"
    End If
    
    GetAlignStr = strRes
End Function
Function GetVAlignStr(ieEntry As ImpElement) As String
    'align="center"
    Dim strRes As String
    strRes = ""
    
    Dim strXML As String
    strXML = ieEntry.GetAttrValue("VALIGN")
    
    If (strXML <> "") Then
        If (strXML = "TOP") Then strRes = "top"
        If (strXML = "MIDDLE") Then strRes = "middle"
        If (strXML = "BOTTOM") Then strRes = "bottom"
    End If
    
    GetVAlignStr = strRes
End Function
Function SetNewFootnote(inStrTecken As String, inStrHanvisning As String) As String
    Dim strRes As String
    On Error GoTo Err1
    
    mFootnoteIdx = mFootnoteIdx + 1
    
    ReDim Preserve arrFootnoteTecken(mFootnoteIdx)
    ReDim Preserve arrFootnoteHanvisning(mFootnoteIdx)
    arrFootnoteTecken(mFootnoteIdx) = inStrTecken
    arrFootnoteHanvisning(mFootnoteIdx) = inStrHanvisning
    
    strRes = IntToStr(mFootnoteIdx)

Err1:
    SetNewFootnote = strRes
End Function
Function DoFootnotes() As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    Dim intI As Long
    For intI = 1 To mFootnoteIdx
        'Skapa noden
        Dim ieHStycke As ImpElement
        Set ieHStycke = ieBody.mImpDoc.CreateGetElement("p", ieBody.intIdxInDoc)
        
        'L|fffd|gg in texten
        Dim ieLink As ImpElement
        Set ieLink = ieBody.mImpDoc.CreateGetElement("a", ieHStycke.intIdxInDoc)
        Call ieLink.SetAttr("name", IntToStr(intI))
        ieLink.AddText (arrFootnoteTecken(intI) & ". " & arrFootnoteHanvisning(intI))
    Next intI
    
    bRes = True
Err1:
    DoFootnotes = bRes
End Function
Attribute VB_Name = "IMPErrFloat"
Attribute VB_Base = "0{4FA1244D-F1A2-4DD7-817B-A6B55BB476F0}{3AC3C9BE-58A3-4999-9C84-D5E8BC2956C6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









Private Sub CommandButtonAlternativ_Click()
    'UserFormSettings.Show
    IMPPrefDlg.SetValues
    IMPPrefDlg.MultiPage1.Value = 0
    IMPPrefDlg.Show
    
End Sub

Private Sub CommandButtonCancel_Click()
    IMPErrFloat.Hide
End Sub

Private Sub CommandButtonChange_Click()
    Call IMPCheck.DoForslag(ListBoxAlternativ.ListIndex, "change")
    
    Call CommandButtonContinue_Click
End Sub

Private Sub CommandButtonContinue_Click()
    IMPErrFloat.Hide
    If (MstrVersion <> "W97") Then
        IMPCheckMain.DoIncrementCheck
        IMPCheckMain.DoContinueCheck
    End If
    
End Sub
Sub SetFel(inStrFel As String)
    
    TextBoxError.text = inStrFel
    ListBoxAlternativ.Clear
End Sub
Sub AddForslag(inStrForslag As String)
    If (inStrForslag <> "") Then
        CommandButtonChange.Enabled = True
        ListBoxAlternativ.AddItem (inStrForslag)
        ListBoxAlternativ.ListIndex = 0
    End If
End Sub


Private Sub CommandButtonHelp_Click()
    'UserFormSettings.Show

End Sub

Private Sub CommandIgnore_Click()
    Call IMPCheckMain.AddIgnore
    Call CommandButtonContinue_Click
End Sub
Attribute VB_Name = "IMPExportWord07"
'Para
Private arrFormatStart() As Long
Private arrFormatEnd() As Long
Private arrFormatType() As Long '1=bold, 2=Italic, 3=Underline, 4=superscript,
                                '5=subscript, 6=Footer, 7=InlineShape,
                                '8=Hyperlink, 9=Field, 10=Teckenmall
Private arrFormatString() As String
Private intCountFormat As Long
Private intMaxFormat As Long

Private arrParaFormatStart() As Long
Private arrParaFormatEnd() As Long
Private arrParaFormatType() As Long
Private arrParaFormatString() As String
Private intCountParaFormat As Long
Private intMaxParaFormat As Long

Private mLastmaxEnd As Long
Private mLastParaFormatStart As Long
Private mLastParaFormatEnd As Long

'Bilder
Public mdocPaste As Document
Public mdocFPaste As Document
Private m_bExportPictures As Boolean
Public mintPictures As Long

'From dev
Public mDocExp As ImpDoc
Public ActivePara As Paragraph
Dim mstrPage As String
Private m_DirCatch1 As String
Private m_DirCatch2 As String

'New check if collection contains key
Public Function Contains(col As Collection, key As Variant) As Boolean
Dim obj As Variant
On Error GoTo err
    Contains = True
    obj = col(key)
    Exit Function
err:
    Contains = False
End Function

'Private mintPictures As Long
Function DoAllExportWord07(inDoc As ImpDoc, Optional bExportPictures As Boolean = True) As Boolean
    Dim bRes As Boolean
    On Error GoTo Err1
    
    'Exportera Worddokument till mDocExp
    Set mDocExp = inDoc
    mintPictures = 0
    m_bExportPictures = bExportPictures
    CustExternData.mStartWithoutMeta = 99
    
    Call DoMeta
    Call DoDocument
    CustExternData.mStartWithoutMeta = 0
    
    bRes = True
Err1:
    DoAllExportWord07 = bRes
End Function
Sub DoDocument()
    On Error GoTo Err1
    'Visa f|fffd|nstret
    Call ChangeProcMessage("Sparar dokumentet som XML...")
    
    'Dim parColl As Paragraphs
    'Set parColl = ImpDoc.Paragraphs
    
    Dim intCount As Long
    intCount = 0
    QScanDocument
        
    Dim paragraph1 As Paragraph
    Dim bContinue As Boolean
    bContinue = GetFirstPara(paragraph1)
    While (bContinue)
    'For Each paragraph1 In parColl
            intCount = intCount + 1
            Call ChangeProcMessage("Sparar dokumentet som XML..." & intCount & "(" & IMPVar.ImpDocParagraphsCount & ")", False)
                Set ActivePara = paragraph1
                Call DoQPara(paragraph1)
                'Call DoShapeRange(paragraph1)
            bContinue = GetNextPara(paragraph1)
            If (bCancel = True) Then bContinue = False
    'Next
    Wend
    
    ClosePasteDocs
    CloseProcMessage
    Exit Sub
    
Err1:
    ImpMsg ("Kan ej s|fffd|ka igenom dokumentet")
    
End Sub

Sub DoMeta()
    On Error GoTo Err1
    Call ChangeProcMessage("Sparar Metadata som XML...", False)
    
    'Titel
    Call DoMetaPara(GetLegalName(CustMeta.cStrPropTitel1), SpecText(CustMeta.GetTitel))
    
    'H|fffd|mta v|fffd|rden fr|fffd|n DocCustomProperties
    Dim aProp As DocumentProperty
    For Each aProp In ImpDoc.CustomDocumentProperties
        Dim strLegPropName As String
        strLegPropName = GetLegalName(aProp.Name)
        Dim strSpecPropValue As String
        strSpecPropValue = SpecText(aProp.Value)
        
        If ((IsSokord(strLegPropName) = False) And (IsTitel(strLegPropName) = False)) Then
            Call DoMetaPara(strLegPropName, strSpecPropValue)
        End If
    Next
    'Summa s|fffd|kord
    Call DoMetaPara(GetLegalName(CustMeta.cStrPropSokord), SpecText(CustMeta.GetSokord))

   Exit Sub
   
Err1:
    ImpMsg ("Kan ej spara metadata")
End Sub
Sub DoMetaPara(inStrName As String, inStrValue As String)
    
    inStrName = GetLegalName(inStrName)
    
    Dim ieStycke As ImpElement
    Dim ieChars As ImpElement
    Set ieStycke = mDocExp.CreateGetElement("para", 1)
    Call ieStycke.SetAttr("view", "metadata")
    
    Call ieStycke.SetAttr("style", inStrName)
    Call ieStycke.AddText(SpecGetVis(inStrValue, 1))
    Set ieChars = mDocExp.CreateGetElement("chars", ieStycke.intIdxInDoc)
    ieChars.AddText (SpecGetVis(inStrValue, 1))
    
End Sub
'*********************** Para ******************************
Sub QScanDocument()
    'On Error Resume Next
    IMPVar.SetDefaultValues
    intMaxFormat = 0
    intCountFormat = 0
    
    intCountParaFormat = 0
    intMaxParaFormat = 0
    
    mLastmaxEnd = -1
    mLastParaFormatStart = -1
    mLastParaFormatEnd = 0
    
    FindBoldRanges
    FindItalicRanges
    FindUnderlineRanges
    FindSuperscriptRanges
    FindSubscriptRanges
    FindFootNoteRanges
    FindInlineRanges
    
    FindHyperlinkRanges
    Application.ScreenUpdating = False
    FindFieldRanges
    Application.ScreenUpdating = True
    
    
    
    'SaveFormat
    'ImpShell32.ShowFile ("C:\Format.txt")
End Sub
Sub DoQPara(inPara1 As Paragraph)
    On Error GoTo Err1
    'Para str|fffd|ngar
    Dim strText As String
    strText = inPara1.Range.text
    Dim strStyle As String
    strStyle = IMPFunction.GetParaStyleAsLegal(inPara1)
    'strStyle = GetLegalAsIfAndring(inPara1)
    Dim strPage As String
    strPage = GetPage(inPara1)
    Dim strSpecText As String
    strSpecText = SpecText(inPara1.Range.text)
    Dim strTab As String
    strTab = GetTab(inPara1)
    Dim strSection As String
    'strSection = IntToStr(GetSectionIdxFromRange(inPara1.Range))
    strSection = "0"

    'Para element
    Dim ieStycke As ImpElement
    Dim ieChars As ImpElement
    Set ieStycke = mDocExp.CreateGetElement("para", 1)
    Call ieStycke.SetAttr("style", strStyle)
    Call ieStycke.SetAttr("page", strPage)
    Call ieStycke.SetAttr("tab", strTab)
    Call ieStycke.SetAttr("section", strSection)
    Call ieStycke.AddText(SpecGetVis(strSpecText, 1))
    
   'Listor och tabeller
    Call AddTableDataToElement(inPara1, ieStycke)
    Call AddListDataToElement(inPara1, ieStycke, strText, strStyle)
    Call AddFootnoteDataToElement(inPara1, ieStycke)
    
     'S|fffd|tt para range
    Dim rngSearch As Range
    Set rngSearch = inPara1.Range
    Call rngSearch.SetRange(inPara1.Range.Start, inPara1.Range.End) 'Set range kan vara mindre |fffd|n parans
    Dim minStart As Long
    Dim maxEnd As Long
    minStart = rngSearch.Start
    maxEnd = rngSearch.End
    'Call ImpFile.SaveAppendToFile(IntToStr(minStart) + " - " + IntToStr(maxEnd) + ", " + strText, "C:\paras.txt")
   
    'S|fffd|tt format-range
    Dim posStart As Long
    Dim posEnd As Long
    posStart = minStart
    posEnd = maxEnd  'Anta hela och krymp
    
    Dim arrFormats(10) As Boolean
    While (GetFormats(minStart, maxEnd, posStart, posEnd, arrFormats))
        'Spara attribut
        Set ieChars = mDocExp.CreateGetElement("chars", ieStycke.intIdxInDoc)
        If (arrFormats(1) = True) Then Call ieChars.SetAttr("bold", "yes")
        If (arrFormats(2) = True) Then Call ieChars.SetAttr("italic", "yes")
        If (arrFormats(3) = True) Then Call ieChars.SetAttr("underline", "yes")
        If (arrFormats(4) = True) Then Call ieChars.SetAttr("exponent", "yes")
        If (arrFormats(5) = True) Then Call ieChars.SetAttr("index", "yes")
        If (arrFormats(6) = True) Then Call ieChars.SetAttr("footnote", SpecGetVis(SpecText(GetFootnoteText(posStart, posEnd)), 1))
        If (arrFormats(7) = True) Then
            mintPictures = mintPictures + 1
            Call ieChars.SetAttr("inlineshape", IntToStr(mintPictures))
            Call ieChars.SetAttr("alt", SpecGetVis(SpecText(GetInlineShapeAlttext(posStart, posEnd)), 1))
            If (m_bExportPictures) Then Call ieChars.SetAttr("src", GetInlineShapeSrc(posStart, posEnd))
        End If
        If (arrFormats(8) = True) Then
            Call ieChars.SetAttr("hyperlink", GetHyperlinkValue(posStart, posEnd))
        End If
        If (arrFormats(9) = True) Then
            If (arrFormats(8) = False) Then 'No field if hyperlink
                Call ieChars.SetAttr("field", "yes")
                Call ieChars.SetAttr("fieldType", SpecGetVis(SpecText(GetFieldValue(posStart, posEnd)), 1))
            End If
        End If
        If (arrFormats(10) = True) Then Call ieChars.SetAttr("teckenmall", SpecGetVis(SpecText(GetTeckenmallValue(posStart, posEnd)), 1))
        'Texten
        Call rngSearch.SetRange(posStart, posEnd)
        ieChars.AddText (GetRangeTextAsCharText(rngSearch))
    Wend
    
    Exit Sub
Err1:
    MsgBox ("Exportfel p|fffd| stycket: " & strText)
End Sub
Sub SaveFormat()
    Dim intIdx As Long
    Dim strText As String
    For intIdx = 1 To intCountFormat
        strText = strText + IntToStr(arrFormatStart(intIdx)) + " - "
        strText = strText + IntToStr(arrFormatEnd(intIdx)) + " ("
        strText = strText + IntToStr(arrFormatType(intIdx)) + "), "
        strText = strText + (arrFormatString(intIdx)) + Chr(13) + Chr(10)
    Next
    Call ImpFile.SaveToFile(strText, "C:\Format.txt")
End Sub
Sub FindBoldRanges()
    'Range hela dokumentet
    'On Error GoTo Err1
    Dim inRange1 As Range
    Set inRange1 = ImpDoc.Range
    Call inRange1.SetRange(ImpDoc.Range.Start, ImpDoc.Range.End) 'Set range kan vara mindre |fffd|n parans
    
    'S|fffd|k bold
    inRange1.Find.ClearFormatting
    inRange1.Find.Font.Bold = True
    inRange1.Find.Forward = True
    inRange1.Find.Execute
    
    Dim prevEnd As Long
    prevEnd = -1
    Dim bContinue As Boolean
    bContinue = True
    While (bContinue)
        'inRange1.Select
        If (inRange1.End > prevEnd) Then
            Call AddFormat(inRange1.Start, inRange1.End, 1)
            prevEnd = inRange1.End
            inRange1.Start = inRange1.End
            inRange1.Find.Execute
        Else
            bContinue = False
        End If
    Wend
Err1:
End Sub
Sub FindItalicRanges()
    'Range hela dokumentet
    'On Error GoTo Err1
    Dim inRange1 As Range
    Set inRange1 = ImpDoc.Range
    Call inRange1.SetRange(ImpDoc.Range.Start, ImpDoc.Range.End) 'Set range kan vara mindre |fffd|n parans
    
    'S|fffd|k bold
    inRange1.Find.ClearFormatting
    inRange1.Find.Font.Italic = True
    inRange1.Find.Forward = True
    inRange1.Find.Execute
    
    Dim prevEnd As Long
    prevEnd = -1
    Dim bContinue As Boolean
    bContinue = True
    While (bContinue)
        'inRange1.Select
        If (inRange1.End > prevEnd) Then
            Call AddFormat(inRange1.Start, inRange1.End, 2)
            prevEnd = inRange1.End
            inRange1.Start = inRange1.End
            inRange1.Find.Execute
        Else
            bContinue = False
        End If
    Wend
Err1:

End Sub
Sub FindUnderlineRanges()
    'On Error GoTo Err1
    'Range hela dokumentet
    Dim inRange1 As Range
    Set inRange1 = ImpDoc.Range
    Call inRange1.SetRange(ImpDoc.Range.Start, ImpDoc.Range.End) 'Set range kan vara mindre |fffd|n parans
    
    'S|fffd|k bold
    inRange1.Find.ClearFormatting
    inRange1.Find.Font.Underline = True
    inRange1.Find.Forward = True
    inRange1.Find.Execute
    
    Dim prevEnd As Long
    prevEnd = -1
    Dim bContinue As Boolean
    bContinue = True
    While (bContinue)
        If (inRange1.End > prevEnd) Then
            If (inRange1.Hyperlinks.Count = 0) Then
                Call AddFormat(inRange1.Start, inRange1.End, 3)
            End If
            prevEnd = inRange1.End
            inRange1.Start = inRange1.End
            inRange1.Find.Execute
        Else
            bContinue = False
        End If
    Wend
Err1:

End Sub

Sub FindSuperscriptRanges()
    'On Error GoTo Err1
    'Range hela dokumentet
    Dim inRange1 As Range
    Set inRange1 = ImpDoc.Range
    Call inRange1.SetRange(ImpDoc.Range.Start, ImpDoc.Range.End) 'Set range kan vara mindre |fffd|n parans
    
    'S|fffd|k bold
    inRange1.Find.ClearFormatting
    inRange1.Find.Font.Superscript = True
    inRange1.Find.Forward = True
    inRange1.Find.Execute
    
    Dim prevEnd As Long
    prevEnd = -1
    Dim bContinue As Boolean
    bContinue = True
    While (bContinue)
        If (inRange1.Font.Superscript = True) Then
            If (inRange1.End <> prevEnd) Then
                If (inRange1.Footnotes.Count = 0) Then
                    Call AddFormat(inRange1.Start, inRange1.End, 4)
                End If
                prevEnd = inRange1.End
                inRange1.Find.Execute
            Else
                bContinue = False
            End If
        Else
            bContinue = False
        End If
    Wend
Err1:

End Sub
Sub FindSubscriptRanges()
    'On Error GoTo Err1
    'Range hela dokumentet
    Dim inRange1 As Range
    Set inRange1 = ImpDoc.Range
    Call inRange1.SetRange(ImpDoc.Range.Start, ImpDoc.Range.End) 'Set range kan vara mindre |fffd|n parans
    
    'S|fffd|k bold
    inRange1.Find.ClearFormatting
    inRange1.Find.Font.Subscript = True
    inRange1.Find.Forward = True
    inRange1.Find.Execute
    
    Dim prevEnd As Long
    prevEnd = -1
    Dim bContinue As Boolean
    bContinue = True
    While (bContinue)
        If (inRange1.Font.Subscript = True) Then
            If (inRange1.End <> prevEnd) Then
                Call AddFormat(inRange1.Start, inRange1.End, 5)
                prevEnd = inRange1.End
                inRange1.Find.Execute
            Else
                bContinue = False
            End If
        Else
            bContinue = False
        End If
    Wend
Err1:

End Sub
Sub FindFootNoteRanges()
    Dim aFootnote As Footnote
    For Each aFootnote In ActiveDocument.Footnotes
        Dim aRange As Range
        Set aRange = aFootnote.Reference
        'MsgBox (aRange.Start & "-" & aRange.End)
        Call AddFormat(aRange.Start, aRange.End, 6)
    Next
   
    
End Sub
Sub FindInlineRanges()
    Dim aShape As InlineShape
    For Each aShape In ImpDoc.InlineShapes
        Call AddFormat(aShape.Range.Start, aShape.Range.End, 7)
    Next

End Sub
Sub FindHyperlinkRanges()
    Dim hp1 As Hyperlink
    For Each hp1 In ImpDoc.Range.Hyperlinks
        Call AddFormat(hp1.Range.Start, hp1.Range.End, 8)
    Next hp1
    
End Sub
Sub FindFieldRanges()
    Dim fd1 As Field
    For Each fd1 In ImpDoc.Range.Fields
        fd1.Select
        Call AddFormat(Selection.Range.Start, Selection.Range.End, 9)
    Next fd1
    
End Sub
Private Sub AddFormat(lngStart, lngEnd, lngFormat)
    'Spara undan formatet och range
    intCountFormat = intCountFormat + 1
    Call ReDimFormat
    arrFormatStart(intCountFormat) = lngStart
    arrFormatEnd(intCountFormat) = lngEnd
    arrFormatType(intCountFormat) = lngFormat
    
    Dim inRange1 As Range
    Set inRange1 = ImpDoc.Range
    Call inRange1.SetRange(lngStart, lngEnd)
    
    arrFormatString(intCountFormat) = inRange1.text
    If (lngFormat = 6) Then
        arrFormatString(intCountFormat) = inRange1.Footnotes(1).Range.text
    End If
    
End Sub
Private Sub ReDimFormat()

    '|fffd|kar arrayen om antalet barn |fffd|r st|fffd|rre  |fffd|n arrayen
    If (intCountFormat > intMaxFormat) Then
        intMaxFormat = intMaxFormat + 100
        ReDim Preserve arrFormatStart(intMaxFormat)
        ReDim Preserve arrFormatEnd(intMaxFormat)
        ReDim Preserve arrFormatType(intMaxFormat)
        ReDim Preserve arrFormatString(intMaxFormat)
    End If
End Sub
Private Sub AddParaFormat(lngStart, lngEnd, lngParaFormat)
    'Spara undan ParaFormatet och range
    intCountParaFormat = intCountParaFormat + 1
    Call ReDimParaFormat
    arrParaFormatStart(intCountParaFormat) = lngStart
    arrParaFormatEnd(intCountParaFormat) = lngEnd
    arrParaFormatType(intCountParaFormat) = lngParaFormat
    
    Dim inRange1 As Range
    Set inRange1 = ImpDoc.Range
    Call inRange1.SetRange(lngStart, lngEnd)
    
    arrParaFormatString(intCountParaFormat) = inRange1.text
    If (lngParaFormat = 6) Then
        arrParaFormatString(intCountParaFormat) = inRange1.Footnotes(1).Range.text
    End If
    
End Sub
Private Sub ReDimParaFormat()

    '|fffd|kar arrayen om antalet barn |fffd|r st|fffd|rre  |fffd|n arrayen
    If (intCountParaFormat > intMaxParaFormat) Then
        intMaxParaFormat = intMaxParaFormat + 100
        ReDim Preserve arrParaFormatStart(intMaxParaFormat)
        ReDim Preserve arrParaFormatEnd(intMaxParaFormat)
        ReDim Preserve arrParaFormatType(intMaxParaFormat)
        ReDim Preserve arrParaFormatString(intMaxParaFormat)
    End If
End Sub

Function GetFormats(minStart As Long, maxEnd As Long, ByRef posStart As Long, ByRef posEnd As Long, arrFormats() As Boolean) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    If (mLastmaxEnd <> maxEnd) Then
        'Skapa ny split f|fffd|r ny para
        Call FilterParaFormats(minStart, maxEnd)
        mLastmaxEnd = maxEnd
        mLastParaFormatStart = minStart
        mLastParaFormatEnd = minStart
    End If
        
    'R|fffd|kna ut n|fffd|sta unika omr|fffd|det
    mLastParaFormatStart = mLastParaFormatEnd
    mLastParaFormatEnd = maxEnd 'Chansa stort och krymp
    Dim intIdx As Long
    For intIdx = 1 To intCountParaFormat
        If (AnyAreaInRect(mLastParaFormatStart, mLastParaFormatEnd, arrParaFormatStart(intIdx), arrParaFormatEnd(intIdx))) Then
            If (mLastParaFormatEnd > arrParaFormatEnd(intIdx)) Then mLastParaFormatEnd = arrParaFormatEnd(intIdx)
            If (arrParaFormatStart(intIdx) > mLastParaFormatStart) Then
                If (mLastParaFormatEnd > arrParaFormatStart(intIdx)) Then mLastParaFormatEnd = arrParaFormatStart(intIdx)
            End If
        End If
    Next
    
    'H|fffd|mta r|fffd|tt split
    For intIdx = 1 To 10 'Nollst|fffd|ll
        arrFormats(intIdx) = False
    Next intIdx
    
    For intIdx = 1 To intCountParaFormat
        If (AnyAreaInRect(mLastParaFormatStart, mLastParaFormatEnd, arrParaFormatStart(intIdx), arrParaFormatEnd(intIdx))) Then
             arrFormats(arrParaFormatType(intIdx)) = True
        End If
    Next
    
    posStart = mLastParaFormatStart
    posEnd = mLastParaFormatEnd
    If (posStart < posEnd) Then bRes = True
    
    
Err1:
    GetFormats = bRes
End Function

Sub FilterParaFormats(minStart As Long, maxEnd As Long)
    'Leta upp alla formats p|fffd| denna para
    intCountParaFormat = 0
    
    Dim intIdx As Long
    For intIdx = 1 To intCountFormat
        Dim lngStart As Long
        Dim lngEnd As Long
        lngStart = arrFormatStart(intIdx)
        lngEnd = arrFormatEnd(intIdx)
        If (AnyAreaInRect(minStart, maxEnd, lngStart, lngEnd)) Then
            If (lngStart < minStart) Then longStart = minStart 'Kapa kring para
            If (lngEnd > maxEnd) Then lngEnd = maxEnd
            Call AddParaFormat(lngStart, lngEnd, arrFormatType(intIdx))
        End If
    Next
    
End Sub

Function AnyAreaInRect(intMin As Long, intMax As Long, lngLeft As Long, lngRight As Long) As Boolean
    Dim bRes As Boolean
    bRes = False
    If (lngLeft >= intMin) Then 'v|fffd|nster kant p|fffd| eller innanf|fffd|r
        If (lngLeft < intMax) Then bRes = True
    End If
    If (lngRight <= intMax) Then 'H|fffd|ger kant p|fffd| eller innanf|fffd|r
        If (lngRight > intMin) Then bRes = True
    End If
    If (lngLeft < intMin) Then 'v|fffd|nster till v|fffd|nster, h|fffd|ger till h|fffd|ger
        If (lngRight > intMax) Then bRes = True
    End If
    AnyAreaInRect = bRes
End Function


'*********************** bildhantering ****************************
Sub ClosePasteDocs()
    If (Not (mdocPaste Is Nothing)) Then
        mdocPaste.Close
    End If
    Set mdocPaste = Nothing
    If (Not (mdocFPaste Is Nothing)) Then
        mdocFPaste.Close
    End If
    Set mdocFPaste = Nothing
    
End Sub
Sub CloseHTMLDocs()
    Dim intFound As Long
    intFound = 0
    
    Dim aDoc As Document
    For Each aDoc In Application.Documents
        Dim strSuffix As String
        strSuffix = GetSuffix(aDoc.Name)
        If (HasString(strSuffix, "htm")) Then
            intFound = intFound + 1
            If (intFound = 1) Then Set mdocPaste = aDoc
            If (intFound = 2) Then Set mdocFPaste = aDoc
        End If
    Next
    Call ClosePasteDocs
End Sub
Function ExportShape07(aInlineShape As InlineShape, strPict As String, bFirst As Boolean) As String
    'Exit Function
    On Error GoTo Err1
    
    ExportShape07 = ""
    
    strPathHTML = AddBackSlash(CustExternData.GetIMPinPath & cStrHTMLTemp)
    strPathWordHTML = strPathHTML & "WordHTML\"
    strPathIMPinHTML = AddBackSlash(strPathHTML & cStrHTMLImpin)
    strPathIMPinHTMLBilder = strPathIMPinHTML & "Bilder\"
    
    If (bFirst) Then
        'Skapa s|fffd|kv|fffd|gen till filerna
        If (ForceCreateDir(strPathHTML) = False) Then
            MsgBox ("Kan inte skapa foldern:" & strPathHTML & ", och kan d|fffd|rf|fffd|r inte spara bilder")
            Exit Function
        End If
        If (ForceRemoveDir(strPathWordHTML) = False) Then
            MsgBox ("Kan inte ta bort foldern:" & strPathWordHTML & ", och kan d|fffd|rf|fffd|r inte spara bilder")
            Exit Function
        End If
        If (ForceRemoveDir(strPathIMPinHTML) = False) Then
            MsgBox ("Kan inte ta bort foldern:" & strPathIMPinHTML & ", och kan d|fffd|rf|fffd|r inte spara bilder")
            Exit Function
        End If
        If (ForceCreateDir(strPathWordHTML) = False) Then
            MsgBox ("Kan inte skapa foldern:" & strPathWordHTML & ", och kan d|fffd|rf|fffd|r inte spara bilder")
            Exit Function
        End If
        If (ForceCreateDir(strPathIMPinHTML) = False) Then
            MsgBox ("Kan inte skapa foldern:" & strPathIMPinHTML & ", och kan d|fffd|rf|fffd|r inte spara bilder")
            Exit Function
        End If
        If (ForceCreateDir(strPathIMPinHTMLBilder) = False) Then
            MsgBox ("Kan inte skapa foldern:" & strPathIMPinHTMLBilder & ", och kan d|fffd|rf|fffd|r inte spara bilder")
            Exit Function
        End If
        m_DirCatch1 = ""
        m_DirCatch2 = ""

    End If
    
    On Error Resume Next
    'Skapa filen om den inte finns
    If (bFirst) Then
        If (mdocPaste Is Nothing) Then Call DocumentsAdd(mdocPaste)
        If (mdocFPaste Is Nothing) Then Call DocumentsAdd(mdocFPaste)
    End If
    
    'Klistra in bilden och spara som html
    mdocPaste.Range.Delete
    aInlineShape.Range.Copy
    mdocPaste.Range.Paste
    
    Dim strFileName As String
    strFileName = strPathWordHTML & "doc" & strPict & "h.htm"
    Call mdocPaste.SaveAs(strFileName, wdFormatHTML)
    
    'Klistra in bilden och spara som filtrerad html
    mdocFPaste.Range.Delete
    aInlineShape.Range.Copy
    mdocFPaste.Range.Paste
    
    strFileName = strPathWordHTML & "doc" & strPict & "f.htm"
    Call mdocFPaste.SaveAs(strFileName, wdFormatFilteredHTML)
    
        
    ExportShape07 = ExtractFileNameFromPath(CopyPictureFile(strPict))
    Exit Function
Err1:
    ImpMsg ("Kan ej skapa bilden " & strPict & ". L|fffd|gg till den manuellt i html-filen")
    
    
End Function

Function CopyPictureFile(strPict As String) As String
    'Copies from words html-file to impin path
    Dim strRes As String
    strRes = ""
            
    Dim strDirSearch1 As String 'S|fffd|kstr|fffd|ng f|fffd|r fil/dir-namn
    strDirSearch1 = "doc" & strPict & "h"
            
    Dim strDirSearch2 As String 'S|fffd|kstr|fffd|ng f|fffd|r fil/dir-namn
    strDirSearch2 = "doc" & strPict & "f"
    
    Dim strDirPictures1 As String ' Var html-bilderna ligger
    strDirPictures1 = GetCompletePathFromLegal(strPathWordHTML, strDirSearch1) 'Hittar mapp med liknande namn som dokumentet
    
    Dim strDirPictures2 As String ' Var html-bilderna ligger
    strDirPictures2 = GetCompletePathFromLegal(strPathWordHTML, strDirSearch2) 'Hittar mapp med liknande namn som dokumentet
    If (strDirPictures1 & strDirPictures2 = "") Then
        MsgBox ("Hittar inte mappen till exporterade bilder")
    Else
        Dim strOrgPicture As String
        strOrgPicture = GetBestPictFromFile(GetBestPictFromFolder(strDirPictures2), GetBestPictFromFolder(strDirPictures1))
        If (strOrgPicture = "") Then
            MsgBox ("Hittar ingen l|fffd|mplig bild i mapparna:" & Chr(13) & strDirPictures1 & ", " & Chr(13) & strDirPictures1)
        Else
            Dim strSuff As String
            strSuff = GetSuffix(strOrgPicture)
            Dim strDestPicture As String
            strDestPicture = strPathIMPinHTMLBilder & strPict & "." & strSuff
            Call FileCopy(strOrgPicture, strDestPicture)
            strRes = strDestPicture
        End If
    End If
    Call CatchPicturesDelete
    Call CatchPicturesAdd(strDirPictures1, strDirPictures2)
    
        
    CopyPictureFile = strRes
    
End Function
Function GetCompletePathFromLegal(strPath As String, strDirSearch As String) As String
    'Hittar en folder med tecken enligt DirSearch under s|fffd|kv|fffd|gen strPath
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    'Chansa p|fffd| s|fffd|kv|fffd|g
    Dim strJokerPath As String
    strJokerPath = AddBackSlash(strPath) & strDirSearch & "-filer"
    If (DirExists(strJokerPath)) Then
        strRes = strJokerPath
        GoTo Err1
    End If
    
    'G|fffd| igenom alla mappar d|fffd|
    strDirSearch = GetLegalName(strDirSearch)
    
    'G|fffd| igenom undermappar och leta upp den med r|fffd|tt namn
    Dim strDir As String
    Dim intDirIdx As Long
    intDirIdx = 1
    strDir = GetDirAt(strPath, intDirIdx)
    ResetSafeWhile (30)
    While (strDir <> "" And SafeWhile(30))
        Dim strDirLegal As String
        strDirLegal = GetLegalName(strDir)
        If (HasString(strDirLegal, strDirSearch)) Then
            If (strRes = "") Then strRes = strDir
        End If
        intDirIdx = intDirIdx + 1
        strDir = GetDirAt(strPath, intDirIdx)
    Wend

Err1:
    GetCompletePathFromLegal = strRes
End Function
Function GetBestPictFromFolder(inStrFolder As String) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim intFound As Long 'Kvaliteten
    intFound = 1
        
        Dim strFile As String
        Dim intFileIdx As Long
            Dim intOk As Long
    
        'G|fffd| igenom undermappar och leta upp den med r|fffd|tt namn
        intFileIdx = 1
        strFile = GetFileAt(inStrFolder, intFileIdx)
        ResetSafeWhile (31)
        While (strFile <> "" And SafeWhile(31))
            
            intOk = GetPictPoints(strFile)
            If (intOk >= intFound) Then
                strRes = strFile
                intFound = intOk
            End If
            intFileIdx = intFileIdx + 1
            strFile = GetFileAt(inStrFolder, intFileIdx)
        Wend

Err1:
    GetBestPictFromFolder = strRes
End Function

Function GetBestPictFromFile(strFile1 As String, strFile2 As String) As String
    Dim strRes As String
    strRes = strFile1
    
    If (GetPictPoints(strFile2) > GetPictPoints(strFile1)) Then strRes = strFile2
    
    GetBestPictFromFile = strRes
    
End Function
Function GetPictPoints(strFile As String) As Long
    Dim intRes As Long
    intRes = 0
    On Error GoTo Err1
    If (strFile <> "") Then
        intRes = 1
        Dim strFileLow As String
        strFileLow = LCase(strFile)
        If (HasString(strFileLow, ".jpg")) Then intRes = 5
        If (HasString(strFileLow, ".png")) Then intRes = 3
        If (HasString(strFileLow, ".gif")) Then intRes = 4
    End If

Err1:
    GetPictPoints = intRes
End Function
Function GetPage(inPara1 As Paragraph)
    Dim strRes As String
    strRes = "->"
    On Error GoTo Err1
    'If (CustMallarMain.IsRubrik1Mall(IMPFunction.GetParaStyleAsLegal(inPara1))) Then
    '    strRes = inPara1.Range.Information(wdActiveEndPageNumber)
    '    strRes = IntToStr(inPara1.Range.Start)
    '    mstrPage = strRes
    'End If
    'strRes = mstrPage
Err1:
    GetPage = strRes
End Function
Function GetTab(inPara1 As Paragraph)
    Dim strRes As String
    strRes = "0"
    On Error GoTo Err1
    Dim intRound As Long
    intRound = inPara1.Range.ParagraphFormat.LeftIndent
    strRes = IntToStr(intRound)
Err1:
    GetTab = strRes
End Function

Sub AddTableDataToElement(inPara As Paragraph, ieStycke As ImpElement)
    'Kontrollera tabell
    If inPara.Range.Tables.Count = 1 Then
        'IncreaseCounter (cCounterTables)
        intCellCount = inPara.Range.Cells.Count
        If (intCellCount = 1) Then
            'Tabellen
            Dim aTable As Table
            Set aTable = inPara.Range.Tables(1)
            
            Dim ieTableCell As ImpElement
            Set ieTableCell = mDocExp.CreateGetElement("tablecell", ieStycke.intIdxInDoc)
            Call ieTableCell.SetAttr("rows", aTable.Rows.Count)
            Call ieTableCell.SetAttr("cols", aTable.Columns.Count)
            If (MstrVersion <> "W97") Then
                Call ieTableCell.SetAttr("subs", HasTables(aTable))
                If (HasTables(aTable) > 0) Then ieTableCell.SetElementName ("framecell")
            End If
            
            'Cellen
            Dim aCell As Cell
            Set aCell = inPara.Range.Cells(1)
            
            Dim strBorderRight As String
            strBorderRight = "yes"
            If (aCell.Borders(wdBorderRight) = False) Then
                strBorderRight = "no"
            End If
            
            Dim strBorderLeft As String
            strBorderLeft = "yes"
            If (aCell.Borders(wdBorderLeft) = False) Then
                strBorderLeft = "no"
            End If
            
            Dim strBorderBottom As String
            strBorderBottom = "yes"
            If (aCell.Borders(wdBorderBottom) = False) Then
                strBorderBottom = "no"
            End If
            
            Dim strBorderTop As String
            strBorderTop = "yes"
            If (aCell.Borders(wdBorderTop) = False) Then
                strBorderTop = "no"
            End If
            
                        
            Dim strVertAlign As String
            strVertAlign = "top"
            If (aCell.VerticalAlignment = wdCellAlignVerticalBottom) Then strVertAlign = "bot"
            If (aCell.VerticalAlignment = wdCellAlignVerticalCenter) Then strVertAlign = "cent"
            
            Dim strHorAlign As String
            strHorAlign = "left"
            If (aCell.Range.ParagraphFormat.Alignment = wdAlignParagraphCenter) Then strHorAlign = "cent"
            If (aCell.Range.ParagraphFormat.Alignment = wdAlignParagraphRight) Then strHorAlign = "right"
           
            Dim intRoundWidth As Long
            intRoundWidth = GetIntCellWidth(aCell)
            'intRoundWidth = aCell.Width
             
            Dim strFirstParaInTable As String
            strFirstParaInTable = "no"
            If (GetIsFirstParaInTable(inPara)) Then strFirstParaInTable = "yes"
           
            Dim intRowIndex As Long
            Dim intColIndex As Long
            
            intRowIndex = GetIntRowIndex(aCell)
            intColIndex = GetIntColIndex(aCell)
            Call ieTableCell.SetAttr("row", IntToStr(intRowIndex))
            Call ieTableCell.SetAttr("col", IntToStr(intColIndex))
            
            Call ieTableCell.SetAttr("bordleft", strBorderLeft)
            Call ieTableCell.SetAttr("bordright", strBorderRight)
            Call ieTableCell.SetAttr("bordbot", strBorderBottom)
            Call ieTableCell.SetAttr("bordtop", strBorderTop)
            Call ieTableCell.SetAttr("width", IntToStr(intRoundWidth))
            Call ieTableCell.SetAttr("valign", strVertAlign)
            Call ieTableCell.SetAttr("halign", strHorAlign)
            Call ieTableCell.SetAttr("firstintable", strFirstParaInTable)
        End If 'cell
        
    End If 'table

End Sub

Sub AddListDataToElement(inPara As Paragraph, ieStycke As ImpElement, strText As String, strStyle As String)
    
    '|fffd|r det microsoft lista, s|fffd| l|fffd|gg till prefix och tabbtecken
    Dim aCountList As Long
    aCountList = inPara.Range.ListParagraphs.Count
    If (aCountList > 0) Then
             
        'Justera chars och para-text
        Dim strSpecPrefix As String
        strSpecPrefix = SpecText(inPara.Range.ListFormat.ListString & Chr(9))
        
        Call ieStycke.ClearText
        Call ieStycke.AddText(SpecGetVis(strSpecPrefix & strText, 1))
                
        'L|fffd|gg in prefixet som chars
        Dim ieListChar As ImpElement
        Set ieListChar = mDocExp.CreateGetElement("chars", ieStycke.intIdxInDoc)
        Call ieListChar.AddText(strSpecPrefix)
   
        'Skapa speciell listrad
        Dim ieListRow As ImpElement
        Set ieListRow = mDocExp.CreateGetElement("listrow", ieStycke.intIdxInDoc)
        Call ieListRow.SetAttr("listprefix", SpecText(inPara.Range.ListFormat.ListString))
        Call ieListRow.SetAttr("listlevel", inPara.Range.ListFormat.ListLevelNumber)
        'Call ieListRow.SetAttr("listlevel", IntToStr(GetListLevel(GetLegalName(strStyle))))
        Call ieListRow.SetAttr("listorder", inPara.Range.ListFormat.ListValue)
   End If

End Sub

Sub AddFootnoteDataToElement(inPara As Paragraph, ieStycke As ImpElement)
    On Error GoTo Err1
    
    Dim idxFoot As Long
    If (inPara.Range.Footnotes.Count >= 0) Then
        For idxFoot = 1 To inPara.Range.Footnotes.Count
            Dim ieFootnote As ImpElement
            Set ieFootnote = mDocExp.CreateGetElement("footnote", ieStycke.intIdxInDoc)
            Dim aParaFootnote As Footnote
            Set aParaFootnote = inPara.Range.Footnotes.Item(idxFoot)
            Call ieFootnote.SetAttr("nr", str(idxFoot))
            
            Dim aParaFootnoteRangeText As String
            aParaFootnoteRangeText = SpecGetVis(SpecText(aParaFootnote.Range.text), 1)
            ieFootnote.AddText (aParaFootnoteRangeText)
        Next
    End If ' count > 0
Err1:
End Sub

Function GetFootnoteText(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
    'Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    If (rngSearch.Footnotes.Count > 0) Then
        strRes = rngSearch.Footnotes(1).Range.text
    End If
Err1:
    GetFootnoteText = strRes
End Function

Function GetInlineShapeAlttext(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    If (rngSearch.InlineShapes.Count > 0) Then
        If (MstrVersion <> "W97") Then
            strRes = aInlineShape_AlternativeText(rngSearch.InlineShapes(1))
        Else
            strRes = rngSearch.text
        End If
        'strRes = rngSearch.InlineShapes(1).AlternativeText
    End If
Err1:
    GetInlineShapeAlttext = strRes
End Function

Function GetInlineShapeSrc(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    If (rngSearch.InlineShapes.Count > 0) Then
        strRes = ImpFile.ExtractFileNameFromSuffix(ImpDoc.Name) & "_bilder\" & IMPExportWord07.ExportShape07(rngSearch.InlineShapes(1), GetPictureName, IsFirstPicture)
    End If
Err1:
    GetInlineShapeSrc = strRes
End Function

Function GetHyperlinkValue(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    If (rngSearch.Hyperlinks.Count > 0) Then
        strRes = rngSearch.Hyperlinks(1).Address
    End If
Err1:
    GetHyperlinkValue = strRes
End Function

Function GetFieldValue(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
     Call ResetRange(rngSearch)
'   Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    If (rngSearch.Fields.Count > 0) Then
        strRes = rngSearch.Fields(1).Type
    End If
Err1:
    GetFieldValue = strRes
End Function

Function GetTeckenmallValue(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    strRes = GetRangeStyleAsLegal(rngSearch)
Err1:
    GetTeckenmallValue = strRes
End Function

Function GetRangeTextAsCharText(inRange As Range) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    'strRes = SpecGetVis(SpecText(inRange.Text), 1) 'Bugg, h|fffd|mta symboler
    
    Dim rngChar As Range
    For Each rngChar In inRange.Characters
        Dim bOk As Boolean
        bOk = True
        If (rngChar.Start < inRange.Start) Then bOk = False 'Ibland str|fffd|cker characters ut sig till v|fffd|nster
        
        If (bOk) Then
            Dim strChar As String
            strChar = rngChar.text
            If (strChar = "(") Then
                strRes = strRes & IMPSpecText.SpecChr(GetLeftParantesSymbol(rngChar))
            ElseIf (strChar = "") Then
            Else
                strRes = strRes & SpecGetVis(SpecText(strChar), 1)
            End If
        End If
    Next rngChar
    
Err1:
    GetRangeTextAsCharText = strRes
End Function

Sub ResetRange(ByRef inRange1 As Range)
    Set inRange1 = ActivePara.Range
End Sub

Function GetPictureName() As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    'Uppdatera r|fffd|knaren och bygg upp namnet
    'strRes = "bild" & IntToStr(mintPictures)
    strRes = ImpFile.ExtractFileNameFromSuffix(ImpDoc.Name) & "_" & IntToStr(mintPictures)
    
Err1:
    GetPictureName = strRes
End Function

Function IsFirstPicture() As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    If (mintPictures = 1) Then bRes = True
Err1:
    IsFirstPicture = bRes
End Function

Function GetLeftParantesSymbol(inRange As Range) As Long
    Dim intRes As Long
    intRes = 40
    On Error GoTo Err1
    
    'Bugg,Kopiera in och kolla plaintext.
Err1:
    GetLeftParantesSymbol = intRes
End Function
Sub CatchPicturesDelete()
    On Error Resume Next
    If (DirExists(m_DirCatch1)) Then Call ForceRemoveDir(m_DirCatch1, False, False)
    m_DirCatch1 = ""
    If (DirExists(m_DirCatch2)) Then Call ForceRemoveDir(m_DirCatch2, False, False)
    m_DirCatch2 = ""
    
End Sub
Sub CatchPicturesAdd(strDir1 As String, strDir2 As String)
    m_DirCatch1 = strDir1
    m_DirCatch2 = strDir2
End Sub

Attribute VB_Name = "IMPFunction"
'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:

'ChrRangeText
Public longCashChrRangeTextStart As Long
Public longCashChrRangeTextEnd As Long
Public strCashChrRangeText As String

Function GetLegalNameNew(inStr1 As String) As String
    'B|fffd|de elementnamn och attributnamn
    ' Kraftigare bantning |fffd|n vad som |fffd|r till|fffd|tet, ger enkla j|fffd|mf|fffd|relser
    On Error GoTo Error1
    Dim strLegal As String
    strLegal = ""
    
    Dim intLen As Long
    intLen = Len(inStr1)
    Dim a As Long
    For a = 1 To intLen
        Dim strChar1 As String
        strChar1 = Mid(inStr1, a, 1)
        If (Len(strChar1) >= 1) Then
            Dim intParChar
            intParChar = Asc(strChar1)
            
            If (intParChar >= 196) Then
                If (strChar1 = "|fffd|") Then strChar1 = "a"
                If (strChar1 = "|fffd|") Then strChar1 = "a"
                If (strChar1 = "|fffd|") Then strChar1 = "o"
                If (strChar1 = "|fffd|") Then strChar1 = "A"
                If (strChar1 = "|fffd|") Then strChar1 = "A"
                If (strChar1 = "|fffd|") Then strChar1 = "O"
                intParChar = Asc(strChar1)
            End If
            
            'Normalt tecken
            Dim bNormalChar As Boolean
            bNormalChar = False
            If ((intParChar >= 48) And (intParChar <= 57)) Then bNormalChar = True '0-9
            If ((intParChar >= 65) And (intParChar <= 90)) Then bNormalChar = True 'A-Z
            If ((intParChar >= 97) And (intParChar <= 122)) Then bNormalChar = True 'a-z
            
            'Mellanslag specialfall f|fffd|r inledande paragraf
            If (intParChar = 32) Then
                strChar1 = " "
                bNormalChar = True
            End If
            
            If (bNormalChar = False) Then strChar1 = ""
                
            strLegal = strLegal & strChar1
        End If
    Next
    'Sm|fffd| bokst|fffd|ver
    strLegal = LCase(strLegal)
    
Error1:
    GetLegalNameNew = strLegal

End Function

Function GetLegalName(inStr1 As String) As String
    'B|fffd|de elementnamn och attributnamn
    ' Kraftigare bantning |fffd|n vad som |fffd|r till|fffd|tet, ger enkla j|fffd|mf|fffd|relser
    On Error GoTo Error1
    Dim strLegal As String
    strLegal = ""
    
    Dim intLen As Long
    intLen = Len(inStr1)
    Dim a As Long
    For a = 1 To intLen
        Dim strChar1 As String
        strChar1 = Mid(inStr1, a, 1)
        If (Len(strChar1) >= 1) Then
            Dim intParChar
            intParChar = Asc(strChar1)
            
            If (intParChar >= 196) Then
                If (strChar1 = "|fffd|") Then strChar1 = "a"
                If (strChar1 = "|fffd|") Then strChar1 = "a"
                If (strChar1 = "|fffd|") Then strChar1 = "o"
                If (strChar1 = "|fffd|") Then strChar1 = "A"
                If (strChar1 = "|fffd|") Then strChar1 = "A"
                If (strChar1 = "|fffd|") Then strChar1 = "O"
                intParChar = Asc(strChar1)
            End If
            
            'Normalt tecken
            Dim bNormalChar As Boolean
            bNormalChar = False
            If ((intParChar >= 48) And (intParChar <= 57)) Then bNormalChar = True '0-9
            If ((intParChar >= 65) And (intParChar <= 90)) Then bNormalChar = True 'A-Z
            If ((intParChar >= 97) And (intParChar <= 122)) Then bNormalChar = True 'a-z
            If (bNormalChar = False) Then strChar1 = ""
                
            strLegal = strLegal & strChar1
        End If
    Next
    'Sm|fffd| bokst|fffd|ver
    strLegal = LCase(strLegal)
    
Error1:
    GetLegalName = strLegal

End Function
Function EqualLegalName(inStr1 As String, inStr2 As String) As Boolean
    'Returnerar true om namnen |fffd|r lika
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
    bRes = (GetLegalName(inStr1) = GetLegalName(inStr2))
Error1:
    EqualLegalName = bRes
End Function
Function EqualLowerName(inStr1 As String, inStr2 As String) As Boolean
    'Returnerar true om namnen |fffd|r lika
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
    bRes = (LCase(inStr1) = LCase(inStr2))
Error1:
    EqualLowerName = bRes
End Function

Function IsNormalChar(inStr1 As String, Optional bAllowSwedish As Boolean = False) As Boolean
    ' Obereonde av versaler
    ' a-z, 0-9
    ' |fffd|, |fffd| och |fffd| om bAllowSwedish
    ' Bara ett tecken i instr|fffd|ngen, tom str|fffd|ng inte normal
    On Error GoTo Error1
    Dim bNormalChar As Boolean
    bNormalChar = False
    
    Dim intLenStr As Long
    intLenStr = Len(inStr1)
    For a = 1 To intLenStr
        Dim strParChar As String
        strParChar = Mid$(inStr1, a, 1)
        If (Len(strParChar) >= 1) Then
            Dim intParChar
            intParChar = Asc(strParChar)
            
            If ((intParChar >= 48) And (intParChar <= 57)) Then bNormalChar = True '0-9
            If ((intParChar >= 65) And (intParChar <= 90)) Then bNormalChar = True 'A-Z
            If ((intParChar >= 97) And (intParChar <= 122)) Then bNormalChar = True 'a-z
            
            If (bAllowSwedish) Then
                If (intParChar = 229) Then bNormalChar = True '|fffd|
                If (intParChar = 228) Then bNormalChar = True '|fffd|
                If (intParChar = 246) Then bNormalChar = True '|fffd|
                If (intParChar = 197) Then bNormalChar = True '|fffd|
                If (intParChar = 196) Then bNormalChar = True '|fffd|
                If (intParChar = 214) Then bNormalChar = True '|fffd|
                If (intParChar = 32) Then bNormalChar = True 'Blanksteg
            End If
        End If
   Next
   
   IsNormalChar = bNormalChar
    Exit Function
    
Error1:
    IsNormalChar = False
End Function

Function StrToInt(inStr2 As String) As Long
    ' Omvandlar str|fffd|ng till tal. Vissa blanktecken |fffd|r till|fffd|tna kring str|fffd|ngen
    On Error GoTo Error1
    Dim res As Long
    res = 0
    If (inStr2 <> "") Then
        res = inStr2
    End If
    StrToInt = res
    Exit Function
    
Error1:
    StrToInt = 0
End Function
Function IntToStr(inInt2 As Long) As String
    On Error GoTo Error1
    Dim res As String
    res = str(inInt2)
    IntToStr = Trim(res)
    Exit Function
    
Error1:
    IntToStr = ""
End Function
Function GetVarAsInteger(inVar As Variant) As Long
    Dim intRes As Long
    intRes = 0
    On Error GoTo Err1
    intRes = inVar

Err1:
    GetVarAsInteger = intRes
End Function
Function GetTextAfter(ByVal inStrOrg As String, inStrSep As String) As String
    'Returnerar str|fffd|ngen efter separatorn
    On Error GoTo Error1
    Dim strRes As String
    strRes = inStrOrg
    
    Dim aPos As Long
    aPos = InStr(1, inStrOrg, inStrSep, vbTextCompare)
    If (aPos > 0) Then
        strRes = Mid(inStrOrg, aPos + Len(inStrSep))
        strRes = Trim(strRes)
    End If
Error1:
    GetTextAfter = strRes
End Function
Function GetTextBefore(ByVal inStrOrg As String, inStrSep As String, Optional inErrClear As Boolean = False) As String
    'Returnerar str|fffd|ngen innan separatorn
    On Error GoTo Error1
    Dim strRes As String
    strRes = inStrOrg
    
    Dim aPos As Long
    aPos = InStr(1, inStrOrg, inStrSep, vbTextCompare)
    If (aPos > 0) Then
        strRes = Mid(inStrOrg, 1, aPos - 1)
        strRes = Trim(strRes)
    End If
    
    If (aPos = 0 And inErrClear) Then
        strRes = ""
    End If
    
Error1:
    GetTextBefore = strRes
End Function

Sub ImpMsg(inStrText As String)
    Call MsgBox(inStrText, vbOKOnly, "Bom|fffd|rket meddelande")
End Sub
Function TrimFromWord(inStr1 As String) As String
    On Error GoTo Error1
    Dim strRes As String
    strRes = ""
    Dim bAddChar As Boolean
    intLenStr = Len(inStr1)
    For a = 1 To intLenStr
        Dim strParChar As String
        strParChar = Mid(inStr1, a, 1)
        If (Len(strParChar) >= 1) Then
            Dim intParChar
            intParChar = Asc(strParChar)
            bAddChar = True
            If (intParChar < 32) Then bAddChar = False
            If (intParChar = 172) Then bAddChar = False
            If (bAddChar) Then
                strRes = strRes + strParChar
            End If
        End If
    Next
Error1:
    TrimFromWord = strRes
End Function
Function ImpMid(inStr1 As String, inIntStart As Long, Optional inIntLength As Long = -911) As String
    On Error GoTo Error1
    Dim strRes As String
    strRes = ""
    If ((inIntStart > 0) And (inIntStart <= Len(inStr1)) And (inIntLength <> 0)) Then
        If (inIntLength = -911) Then
            strRes = Mid(inStr1, inIntStart)
        Else
            strRes = Mid(inStr1, inIntStart, inIntLength)
        End If
    End If
Error1:
    ImpMid = strRes
End Function
Function ImpMidS(inStr1 As String, inIntStart As Long, Optional inIntLength As Long = -911) As String
    Dim lngStart As Long
    Dim lngLength As Long
    lngStart = inIntStart
    lngLength = inIntLength
    ImpMidS = ImpMid(inStr1, lngStart, lngLength)
End Function
Function ImpAsc(inStr1 As String) As Long
    On Error GoTo Error1
    Dim intRes As Long
    intRes = 0
    intRes = Asc(inStr1)
Error1:
    ImpAsc = intRes

End Function
Function ImpLen(inStr1 As String) As Long
    On Error GoTo Error1
    Dim intRes As Long
    intRes = 0
    If (inStr1 <> "") Then intRes = Len(inStr1)
Error1:
    ImpLen = intRes

End Function
Function HasString(inStrOrg As String, inStrSearch As String)
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
    If (InStr(1, inStrOrg, inStrSearch, vbTextCompare) > 0) Then
        'InStr klarar flera tecken, |fffd|r inte beroende av versaler/gemener
        bRes = True
    End If
    
Error1:
    HasString = bRes
End Function


Function IsANumStr(inStr2 As String) As Boolean
    On Error GoTo Error1
    
    Dim bRes As Boolean
    bRes = False
    
    Dim intNum As Long
    intNum = StrToInt(inStr2) 'Pr|fffd|va att omvandla
    
    If (intNum <> 0) Then bRes = True
    If ((intNum = 0) And (StrToInt("1" & inStr2) = 10)) Then bRes = True  'L|fffd|gg till etta och det skall bli ett
    'If (inStr2 = "") Then bRes = False
    
Error1:
    IsANumStr = bRes
    
End Function

Function GetParaStyleAsLegal(inPara As Paragraph, Optional bTrueStyle As Boolean = False) As String
    On Error GoTo Err1
    Dim strStyle As String
    strStyle = "normal"
    If (IsObjectValid(inPara.Style) = True) Then
        strStyle = GetLegalName(inPara.Style)
        If (bTrueStyle) Then strStyle = inPara.Style
    End If
   
   GetParaStyleAsLegal = strStyle
   Exit Function
Err1:
   GetParaStyleAsLegal = "normal"
End Function
Function GetRangeStyleAsLegal(inRange As Range) As String
    On Error GoTo Err1
    Dim strStyle As String
    strStyle = "normal"
    If (IsObjectValid(inRange.Style) = True) Then
        strStyle = GetLegalName(inRange.Style)
    End If
   
   GetRangeStyleAsLegal = strStyle
   Exit Function

Err1:
   GetRangeStyleAsLegal = ""
    
End Function

Function UpdateCashMemoryForChrRangeText(longInRangeStart As Long, longinRangeSlut As Long, strRangeText As String)
    longCashChrRangeTextStart = longInRangeStart
    longCashChrRangeTextEnd = longinRangeSlut
    strCashChrRangeText = strRangeText
End Function

Function IsTextInCashMemoryForChrRangeText(inRange As Range) As Boolean
    Dim bRes As Boolean
    bRes = False
    If (longCashChrRangeTextEnd <> 0) Then 'kontrollera
        If (inRange.Start = longCashChrRangeTextStart And inRange.End = longCashChrRangeTextEnd) Then
            bRes = True
        End If
    End If
    IsTextInCashMemoryForChrRangeText = bRes
End Function


'MICKE kan du kolla om min optimering h|fffd|ller!
Function GetChrRangeText(inRange As Range) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim intI As Long

    'Dim longLangdRange As Long
    'Dim longLangdText As Long
  
    
    Dim longInRangeStart As Long
    Dim longinRangeSlut As Long
    longInRangeStart = inRange.Start
    longinRangeSlut = inRange.End
    
    'Det verkar som att en samma para behandlas flera g|fffd|nger om om igen
    'Jag cashar upp den i minnet
    If (IsTextInCashMemoryForChrRangeText(inRange)) Then
        strRes = strCashChrRangeText
    Else
        'Jag kontrolerar textl|fffd|ngden f|fffd|r InRangen och j|fffd|mf|fffd|r den med l|fffd|ngden
        'f|fffd|r Range.texten |fffd|r de olika s|fffd| finns det n|fffd|got g|fffd|md tecken
        'Denna optimering borde resultera i att man inte loopar tecken f|fffd|r tecken i
        'vanliga para
        'longLangdRange = inRange.End - inRange.Start
        'longLangdText = Len(inRange.Text)
        
        'If (longLangdRange <> longLangdText) Then
            For intI = inRange.Start To (inRange.End - 1)
                Dim charRange As Range
                Set charRange = inRange
                Call charRange.SetRange(intI, intI + 1) ' Ta ut ett tecken
                strRes = strRes & charRange.text
            Next intI
        'Else
            'strRes = inRange.Text
        'End If
        'uppdatera cash
        Call UpdateCashMemoryForChrRangeText(longInRangeStart, longinRangeSlut, strRes)
    
    End If
    
    
    
    
    GetChrRangeText = strRes
   Exit Function

Err1:
    GetChrRangeText = strRes
End Function


Function ImpPos(inStrOrg As String, inStrSearch As String, Optional intStartPos As Long = 1) As Long
'    Dim strOrg As String
'    strOrg = SpecText(inStrOrg)
'    Dim strSearch As String
'    strSearch = SpecText(inStrSearch)
'
'    ImpPos = SpecPos(strOrg, strSearch, intStartPos)
On Error GoTo Err1
    ImpPos = 0
    Dim intPos As Long
    intPos = InStr(intStartPos, inStrOrg, inStrSearch, vbTextCompare)
    If (intPos > 60000) Then
        intPos = 0
    End If
    
    ImpPos = intPos
    
Err1:
End Function
Function ImpPosLong(inStrOrg As String, inStrSearch As String, Optional intStartPos As Long = 1) As Long
On Error GoTo Err1
    ImpPosLong = 0
    If ((inStrOrg <> "") And (inStrSearch <> "")) Then
        ImpPosLong = InStr(intStartPos, inStrOrg, inStrSearch, vbTextCompare)
    End If
Err1:
End Function

Function ImpReplace(inStrOrg As String, inStrSearch As String, inStrNew As String) As String
    ImpReplace = inStrOrg
    On Error GoTo Err1
    Dim strRes As String
    strRes = inStrOrg
    
    Dim intPos As Long
    intPos = ImpPosLong(strRes, inStrSearch)
    ResetSafeWhile (36)
    While (intPos > 0 And SafeWhile(36))
        Dim strLeft As String
        Dim strRight As String
        strLeft = ImpMid(strRes, 1, intPos - 1)
        strRight = ImpMid(strRes, intPos + ImpLen(inStrSearch))
        strRes = strLeft + inStrNew + strRight
        'N|fffd|sta varv
        intPos = ImpPos(strRes, inStrSearch, Len(strLeft) + Len(inStrNew) + 1)
    Wend
    
    
    ImpReplace = strRes
    Exit Function
Err1:
End Function
Function ImpPosEndNotNormalChar(inStrOrg As String, intPosFrom As Long) As Long
    'Position f|fffd|r n|fffd|r sista mellanrum innan n|fffd|sta text b|fffd|rjar
    Dim intRes As Long
    intRes = intPosFrom
    On Error GoTo Err1
    Dim intPos As Long
    For intPos = intPosFrom To ImpLen(inStrOrg)
        Dim strChar As String
        strChar = ImpMidS(inStrOrg, intPos, 1)
        If (IsNormalChar(strChar, True)) Then
            Exit For
        End If
        intRes = intPos
    Next intPos
Err1:
    ImpPosEndNotNormalChar = intRes
End Function
Function ImpReplaceFirstOnly(inStrOrg As String, inStrSearch As String, inStrNew As String) As String
    ImpReplaceFirstOnly = inStrOrg
    On Error GoTo Err1
    Dim strRes As String
    strRes = inStrOrg
    
    Dim intPos As Long
    intPos = ImpPosLong(strRes, inStrSearch)
    If (intPos > 0) Then
        Dim strLeft As String
        Dim strRight As String
        strLeft = ImpMid(strRes, 1, intPos - 1)
        strRight = ImpMid(strRes, intPos + ImpLen(inStrSearch))
        strRes = strLeft + inStrNew + strRight
  
    End If
    ImpReplaceFirstOnly = strRes
    Exit Function
Err1:
End Function

Function IsNearly(inInt1 As Long, inInt2 As Long) As Boolean
    On Error GoTo Err1
    'Om talen |fffd|r n|fffd|stan lika, s|fffd| blir true
    Dim bRes As Boolean
    bRes = False
    
    'Acceptansen |fffd|r 5% eller 2 enheter
    Dim intAccept As Long
    intAccept = (inInt1 / 20)
    If (intAccept < 2) Then intAccept = 2
    
    'Diffen
    Dim intDiff As Long
    intDiff = inInt1 - inInt2
    If (intDiff < 0) Then intDiff = inInt2 - inInt1
    
    If (intDiff <= intAccept) Then bRes = True
    
    IsNearly = bRes
    Exit Function
Err1:
   IsNearly = False
End Function
Function GetIntWidth(inCell As Cell) As Long
    On Error GoTo Err1
    Dim intRes As Long
    intRes = 0
    intRes = GetVarAsInteger(inCell.Width)

Err1:
   GetIntWidth = intRes

End Function
Function GetIntRowIndex(inCell As Cell) As Long
    On Error GoTo Err1
    Dim intRes As Long
    intRes = 0
    Dim longRowIndex As Long
    longRowIndex = inCell.RowIndex
        
    If (MstrVersion = "W97") Then 'W97 blir det fel p|fffd| long-|fffd|vers|fffd|ttningen
        If (longRowIndex > 9999) Then
            longRowIndex = longRowIndex - 1128857600
        End If
    End If
    
    intRes = ImpLongToInt(longRowIndex)
    GetIntRowIndex = intRes
    Exit Function
Err1:
   GetIntRowIndex = 0

End Function
Function GetIntCellWidth(inCell As Cell) As Long
    On Error GoTo Err1
    Dim intRes As Long
    intRes = 0
    Dim longRowIndex As Long
    longRowIndex = inCell.Width
    
    intRes = ImpLongToInt(longRowIndex)
    GetIntCellWidth = intRes
    Exit Function
Err1:
   GetIntCellWidth = 0

End Function
Function GetIsFirstParaInTable(inPara1 As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    If (inPara1.Range.Start = inPara1.Range.Tables(1).Range.Start) Then bRes = True
Err1:
    GetIsFirstParaInTable = bRes
End Function
Function GetIntColIndex(inCell As Cell) As Long
    On Error GoTo Err1
    Dim intRes As Long
    intRes = 0
    Dim longColIndex As Long
    longColIndex = inCell.ColumnIndex
        
    If (MstrVersion = "W97") Then 'W97 blir det fel p|fffd| long-|fffd|vers|fffd|ttningen
        If (longColIndex > 9999) Then
            longColIndex = longColIndex - 1128857600
        End If
    End If
    
    intRes = ImpLongToInt(longColIndex)
    GetIntColIndex = intRes
    Exit Function
Err1:
    GetIntColIndex = 0

End Function
Function ImpLongToInt(inLong As Long) As Long
    On Error GoTo Err1
    Dim intRes As Long
    intRes = 0
    If (inLong < 65535) Then
        intRes = inLong
    End If
Err1:
    ImpLongToInt = intRes
End Function
Function ImpMax(inLong1 As Long, inLong2 As Long) As Long
    Dim intRes As Long
    intRes = inLong1
    If (inLong2 > inLong1) Then intRes = inLong2
    ImpMax = intRes
End Function
Function GetBalanceListParanteses(inStr1 As String) As Boolean
    On Error GoTo Err1
    Dim bRes As Boolean
    bRes = True
    Dim intBalance As Long '(+, )-
    intBalance = 0
    
    Dim intI As Long
    For intI = 1 To ImpLen(inStr1)
        Dim strChr As String
        strChr = ImpMid(inStr1, intI, 1)
        If (strChr = "(") Then intBalance = intBalance + 1
        If (strChr = ")") Then intBalance = intBalance - 1
        If (intBalance < 0) Then intBalance = 0
    Next intI
    If (intBalance <> 0) Then bRes = False
    
Err1:
    GetBalanceListParanteses = bRes

End Function
Function HasOddParenteses(inStr1 As String) As Boolean
    On Error GoTo Err1
    Dim bRes As Boolean
    bRes = False
    
    Dim intBalance As Long '(+, )-
    intBalance = 0
    
    Dim intI As Long
    For intI = 1 To ImpLen(inStr1)
        Dim strChr As String
        strChr = ImpMid(inStr1, intI, 1)
        If (strChr = "(") Then intBalance = intBalance + 1
        If (strChr = ")") Then intBalance = intBalance - 1
    Next intI
    
    If (intBalance <> 0) Then bRes = True
    HasOddParenteses = bRes
    Exit Function
Err1:
    HasOddParenteses = False

End Function
Function HasMoreLeftParenteses(inStr1 As String) As Boolean
    On Error GoTo Err1
    Dim bRes As Boolean
    bRes = False
    
    Dim intBalance As Long '(+, )-
    intBalance = 0
    
    Dim intI As Long
    For intI = 1 To ImpLen(inStr1)
        Dim strChr As String
        strChr = ImpMid(inStr1, intI, 1)
        If (strChr = "(") Then intBalance = intBalance + 1
        If (strChr = ")") Then intBalance = intBalance - 1
    Next intI
    
    If (intBalance > 0) Then bRes = True
    HasMoreLeftParenteses = bRes
    Exit Function
Err1:
    HasMoreLeftParenteses = False

End Function
Function GetSelectionParagrafIdx(Optional bStart As Boolean = True) As Long
    'Ger Index p|fffd| paragrafen som |fffd|r vald
    Dim intRes As Long
    intRes = 0
    
    
    Dim parColl As Paragraphs
    Set parColl = ImpDoc.Paragraphs
    
    Dim intFind As Long
    If (bStart) Then
        intFind = Selection.Range.Start
    Else
        intFind = Selection.Range.End
    End If

    intRes = GetParaIdx(intFind, bStart)
    
    
    GetSelectionParagrafIdx = intRes
End Function
Function GetParaIdx(inRangeStart As Long, Optional bStart As Boolean = True) As Long
    Dim intRes As Long
    intRes = 1
    
    Dim intI As Long
    Dim intStartValue As Long
    intStartValue = 1
    
    'Trolla trolla
    If (ImpDocParagraphsCount > 50) Then
        intStartValue = GetCloserStartValue(inRangeStart)
    End If
    
    For intI = intStartValue To ImpDocParagraphsCount
        Dim aPara As Paragraph
        Set aPara = ImpDoc.Paragraphs.Item(intI)
        If (bStart) Then
            If (aPara.Range.Start <= inRangeStart) Then
                If (aPara.Range.End > inRangeStart) Then
                    intRes = intI
                    Exit For
                End If
            End If
        Else
            If (aPara.Range.End >= inRangeStart) Then
                If (aPara.Range.Start < inRangeStart) Then
                    intRes = intI
                    Exit For
                End If
            End If
        End If
    Next intI
    GetParaIdx = intRes
End Function

Function GetCloserStartValue(inRangeStart As Long) As Long
    Dim res As Long
    Dim longMin As Long
    Dim longMax As Long
    Dim aPara As Paragraph
    Dim longSplitValue As Long
    Dim intI As Long
    
    longMin = 1
    longMax = ImpDocParagraphsCount
    longSplitValue = longMax / 2
    
    'halverar vektor 7 g|fffd|nger f|fffd|r att |fffd|ka effektiviteten
    '1000 para ger en s|fffd|k-range p|fffd|  1000,500,250,125,63,32,16
    '50 para ger 50, 25, 12, 6, 3,2,1
    
    For intI = 1 To 7
        Set aPara = ImpDoc.Paragraphs.Item(longSplitValue)
        If (aPara.Range.Start < inRangeStart) Then
            longMin = longSplitValue
        Else
            longMax = longSplitValue
        End If
        longSplitValue = (longMax - longMin) / 2 + longMin
    Next intI
    GetCloserStartValue = longMin
End Function
Sub DeleteBegining(inPara As Paragraph, inStr1 As String)
    On Error GoTo Err1
    If (inPara.Range.Characters.Count = 0) Then
        Exit Sub
    End If
    
    If (inPara.Range.Characters(1).text = inStr1) Then
        inPara.Range.Characters(1).Delete
    End If
Err1:
End Sub

Function GetFirstPara(ByRef inOutPara As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    Set inOutPara = ActiveDocument.Paragraphs.First
    If (inOutPara.Range.Start = 0) Then
        bRes = True
    End If

Err1:
    GetFirstPara = bRes
End Function
Function GetNextPara(ByRef inOutPara As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    Dim intLastStart As Long
    Dim intStart As Long
    intLastStart = inOutPara.Range.Start
    Set inOutPara = inOutPara.Next
    intStart = inOutPara.Range.Start
    If (intStart > intLastStart) Then
        bRes = True
    End If
Err1:
    GetNextPara = bRes
End Function

Attribute VB_Name = "IMPHeadingsDlg"
Attribute VB_Base = "0{44F41EE4-AB77-4C4D-A985-D9C885B4D54E}{AD6E51FE-D34C-4E0B-A698-C4D5223ED98F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButtonCancel_Click()
            CustExternData.mCurrentParaIndex = ActiveDocument.Paragraphs.Count + 1
            IMPHeadingsDlg.Hide
            CloseProcMessage
End Sub

Private Sub CommandButtonChange_Click()
        If CustExternData.mTypeOfError = 2 Then
            ActiveDocument.Paragraphs(CustExternData.mCurrentParaIndex).Style = CustMallarMain.cStrSMallForf
            IMPHeadingsDlg.Hide
            CustExternData.mHasErrors = False
        Else
            ActiveDocument.Paragraphs(CustExternData.mCurrentParaIndex).OutlineLevel = CustExternData.mCurrentOutLevel
            IMPHeadingsDlg.Hide
            CustExternData.mHasErrors = False
        End If
End Sub

Sub SetFel(inStrFel As String)
    TextBoxError.text = inStrFel
    ListBoxAtgarder.Clear
End Sub
Sub AddForslag(inStrForslag As String)
    If (inStrForslag <> "") Then
        ListBoxAtgarder.AddItem (inStrForslag)
        ListBoxAtgarder.ListIndex = 0
    End If
End Sub
Attribute VB_Name = "IMPList"
Private m_LastIdxCellRow As Long
'Public mbTimeIsCirculating
Public mLastListTime As Long
Sub SetListTypeOnRows(Optional strType As String = "")
    'S|fffd|tter listtypen p|fffd| markerade rader
    On Error GoTo Err1
    Dim bMultiRow As Boolean
    bMultiRow = Selection.Range.Paragraphs.Count > 1
    If (bMultiRow) Then
        'Spara undan markering
        Dim intCountRows As Long
        intCountRows = Selection.Range.Paragraphs.Count
        Dim intFirstPara As Paragraph
        Set intFirstPara = Selection.Paragraphs(1)
        
        'Loopa igenom det som var markerat
        Dim intIdx As Long
        Dim paraTreat As Paragraph
        For intIdx = 1 To intCountRows
            Set paraTreat = intFirstPara
            'S|fffd|k fram till r|fffd|tt rad
            For intI = 1 To intIdx - 1
                Set paraTreat = paraTreat.Next
            Next intI
            
            'Anropa varje rad
            paraTreat.Range.Select
            SetListTypeRepeateLevel (strType)
        Next intIdx
        
    Else
        SetListTypeRepeateLevel (strType)
    End If
Err1:
End Sub
Sub SetListTypeRepeateLevel(Optional strType As String = "")
    'Skapar en lista p|fffd| samma niv|fffd| som innan,med |fffd|nskat prefix
    On Error GoTo Err1
    
    'Ta reda p|fffd| listniv|fffd|
    Dim strStyle As String
    strStyle = GetParaStyleAsLegal(Selection.Paragraphs(1), True)
    If (CustMallarMain.GetListLevelFromMallStyle(strStyle) = 0) Then
        'Ta reda p|fffd| listniv|fffd| raden innan
        strStyle = GetParaStyleAsLegal(Selection.Paragraphs(1).Previous, True)
        If (CustMallarMain.GetListLevelFromMallStyle(strStyle) = 0) Then strStyle = ""
    End If
    
Err1:
    On Error GoTo Err2
    'Om ingen lista innan, s|fffd| s|fffd|tt niv|fffd| ett
    If (strStyle = "") Then strStyle = CustMallarMain.cStrSMallNormalList  '
    
    Call SetListTypeAndLevel(strStyle, strType)
Err2:
    
End Sub
Sub IncreaseListLevel()
    '|fffd|kar listniv|fffd|n, strecklista skapas
    Dim strThisStyle As String
    strThisStyle = IMPFunction.GetParaStyleAsLegal(Selection.Paragraphs(1), True)
    Dim strNewStyle As String
    strNewStyle = CustMallarMain.GetIncreasedListLevel(strThisStyle)
    Selection.Style = strNewStyle
    If (strThisStyle <> strNewStyle) Then
        Call SetListTypeRepeateLevel
    End If
End Sub
Sub DecreaseListLevel()
    'Minskar niv|fffd|n, tidigare niv|fffd|er forts|fffd|tter
    Dim strThisStyle As String
    strThisStyle = IMPFunction.GetParaStyleAsLegal(Selection.Paragraphs(1), True)
    Dim strNewStyle As String
    strNewStyle = CustMallarMain.GetDecreasedListLevel(strThisStyle)
    Selection.Style = strNewStyle
    If (strThisStyle <> strNewStyle) Then
        Call SetListTypeAndLevel(strNewStyle)
    End If
End Sub
Sub SetListTypeAndLevel(strStyle As String, Optional strType As String = "")
    'IMPin-Lista-Niv|fffd|-x med olika prefix, anropas av mall-knappar, default streck f|fffd|r strType
    On Error GoTo Err1
    
    'Autonumrerad lista
    If (IsAutonumRowAtSelection) Then 'Autonumrerad
        Call RemoveAutonumAtSelection
    End If
    
    Dim bEmptyRow As Boolean
    bEmptyRow = IsEmptyRowAtSelection
    
    Dim strNum As String
    strNum = Chr(150)
    If (strType = "Nummer") Then strNum = "1." 'GetNextIndragNr
    If (strType = "Bokstav") Then strNum = "a)" 'GetNextIndragNr
   
    Call DoOneSelectedRow(strStyle, strNum)
    
    Call StartTimeCirculating
    
Err1:
    
End Sub
Sub DoOneSelectedRow(strStyle As String, strNum As String)
        If (CustMallarMain.GetListLevelFromMallStyle(strStyle) = 0) Then
            strStyle = CustMallarMain.cStrSMallNormalList
        End If
        Selection.Style = ImpDoc.Styles(strStyle)
        strNum = IMPList.GetNextMallNumber(strNum, strStyle)
        
        If (bEmptyRow) Then
            Selection.TypeText text:=strNum & Chr(9)
        Else
            Call IMPList.ReplacePrefix(Selection.Range.Paragraphs(1), strNum)
            Call IMPList.ReplaceSpaceToTab(Selection.Range.Paragraphs(1))
       End If
    
End Sub
Sub SetListContinue()
    'Forts|fffd|tter listraden med |fffd|kat prefix p|fffd| n|fffd|sta rad
    On Error GoTo Err1
    If (IsEmptyRowAtSelection) Then
    Else
        Call Selection.MoveEnd(wdParagraph)
        Call Selection.SetRange(Selection.End, Selection.End)
        Selection.InsertParagraphAfter
    
    End If
    
    Dim aPrevPara As Paragraph
    Set aPrevPara = Selection.Paragraphs(1).Previous
    Call SetListTypeAndLevel(IMPFunction.GetParaStyleAsLegal(aPrevPara, True))
Err1:
End Sub
Function GetNextMallNumber(strNumDef As String, inStrMall As String) As String
    'Tar reda p|fffd| n|fffd|sta numrering f|fffd|r selecterad rad beroende p|fffd| vad som finns ovanf|fffd|r
    Dim strRes As String
    strRes = strNumDef
    On Error GoTo Err1
    Dim bContinue As Boolean
    bContinue = True
    Dim intCount As Long
    intCount = 0
    Dim intCountNoListMall As Long
    intCountNoListMall = 0
    Dim aPrePara As Paragraph
    Set aPrePara = Selection.Paragraphs(1).Previous
    While (bContinue)
        If (aPrePara.Range.Style = inStrMall) Then 'R|fffd|tt mall
            Dim strPrefix As String
            strPrefix = GetPrefix(aPrePara)
            If (strPrefix <> "") Then
                 strRes = GetNextPrefix(strPrefix)
            End If
            bContinue = False
        ElseIf (GetListLevelFromMallStyle(aPrePara.Range.Style) > 0) Then 'n|fffd|gon lista
            If (GetListLevelFromMallStyle(aPrePara.Range.Style) < GetListLevelFromMallStyle(inStrMall)) Then
                intCountNoListMall = intCountNoListMall + 1
            End If
        ElseIf (aPrePara.Range.Tables.Count > 0) Then 'Tabell
        Else
            intCountNoListMall = intCountNoListMall + 1 '|fffd|ka normalt med ett
        End If
        
        'Avsluta s|fffd|kning om avbrott f|fffd|r lista
        If (intCountNoListMall = 1) Then bContinue = False
            
        Set aPrePara = aPrePara.Previous
        intCount = intCount + 1
        If (intCount = 1000) Then bContinue = False
    Wend
Err1:
    GetNextMallNumber = strRes
End Function

'New
Function CleanString(text As String) As String
    Dim output As String
    Dim c 'since char type does not exist in vba, we have to use variant type.
    For i = 1 To Len(text)
        c = Mid(text, i, 1) 'Select the character at the i position
        If (c <> " ") Then
            output = output & c 'add the character to your output.
        End If
    Next
    CleanString = output
End Function

Sub InsertJurParagrafSFSNew(Optional strStyle As String = "")
    On Error GoTo Err1
    
    If (strStyle <> "") Then Selection.Style = strStyle
    Dim allStr As String
    Dim leftStr As String
    Dim rightStr As String
    Dim tempStr As String
    Dim countWhiteSpaces As Integer
    
    countWhiteSpaces = 0
    'Get text to paragraph character
    allStr = Selection.Paragraphs(1).Range.text
    leftStr = Left(allStr, InStr(allStr, "|fffd|"))
    rightStr = Right(allStr, Len(allStr) - InStr(allStr, "|fffd|"))
    
    'Remove whitespaces before starting text.
    For i = 1 To Len(rightStr)
        c = Mid(rightStr, i, 1) 'Select the character at the i position
        If (c >= "a" And c <= "z") Or (c >= "0" And c <= "9") Or (c >= "A" And c <= "Z") Then
           Exit For
        Else
             countWhiteSpaces = countWhiteSpaces + 1
        End If
    Next
    
    If countWhiteSpaces > 0 Then
        rightStr = Right(rightStr, Len(rightStr) - countWhiteSpaces)
    End If
    'Trim whitespaces
    leftStr = CleanString(leftStr)
    allStr = leftStr + rightStr
    Selection.Paragraphs(1).Range.text = allStr
    If (strStyle <> "") Then Selection.Style = strStyle
    If (IsEmptyRowAtSelection) Then
        Dim strNum As String
        strNum = GetNextJurParaNrNew
        Selection.Font.Bold = True
        'Selection.TypeText Text:=strNum & ChrW(160) & "|fffd|"
        If (Len(strNum) > 1) Then
            Selection.TypeText text:=strNum & "|fffd|"
        Else
            Selection.TypeText text:=strNum & " |fffd|"
        End If
        Selection.Font.Bold = False
        Selection.TypeText text:=ChrW(160) & ChrW(160) & ChrW(160) & ChrW(160)
    Else
        If (HasLegalJurParaNum(Selection.Paragraphs(1))) Then
        Else
            Call ChangeToLegalParaNumNew(Selection.Paragraphs(1))
        End If
    End If
Err1:
End Sub

Sub InsertJurParagrafSFS(Optional strStyle As String = "")
    On Error GoTo Err1
    
    If (strStyle <> "") Then Selection.Style = strStyle
    
    If (IsEmptyRowAtSelection) Then
        Dim strNum As String
        strNum = GetNextJurParaNr
        Selection.Font.Bold = True
        Selection.TypeText text:=strNum & ChrW(160) & "|fffd|"
        Selection.Font.Bold = False
        Selection.TypeText text:=ChrW(160) & ChrW(160) & ChrW(160) & ChrW(160)
    Else
        If (HasLegalJurParaNum(Selection.Paragraphs(1))) Then
        Else
            Call ChangeToLegalParaNum(Selection.Paragraphs(1))
        End If
    End If
Err1:
End Sub
Function HasLegalJurParaNum(inPara1 As Paragraph) As Boolean
    'Kontrollerar om numreringen f|fffd|ljs av h|fffd|rt blanksteg och paragraftecknet av fyra blanksteg
    Dim bRes As Boolean
    bRes = True
    Dim intOneHardSpacePos As Long
    Dim intFourHardSpacePos As Long
    intOneHardSpacePos = ImpPos(inPara1.Range.text, ChrW(160))
    intFourHardSpacePos = ImpPos(inPara1.Range.text, ChrW(160) & ChrW(160) & ChrW(160) & ChrW(160))
    If (intOneHardSpacePos >= intFourHardSpacePos) Then bRes = False
    
    On Error GoTo Err1
Err1:
    HasLegalJurParaNum = bRes
End Function

'New sub to handle inledande paragrafer
Sub ChangeToLegalParaNumNew(inPara1 As Paragraph)
   '|fffd|ndrar mellanrum s|fffd| att den blir godk|fffd|nd
    On Error GoTo Err1
    
    'Markera omr|fffd|de som skall |fffd|ndras och anta numrering
    inPara1.Range.Select
    Dim strNum As String
    strNum = "1"
    Call Selection.SetRange(inPara1.Range.Start, inPara1.Range.End)
    Dim intParaPos As Long
    intParaPos = ImpPos(inPara1.Range.text, "|fffd|")
    If (HasFootnotes(inPara1)) Then
        ImpMsg ("Stycket har fotnot och kan d|fffd|rf|fffd|r inte automatiskt |fffd|ndras." & Chr(13) & "|fffd|ndar stycket manuellt")
        Exit Sub
    End If
    
    If ((intParaPos > 0) And (intParaPos <= 6)) Then
        'Markera gammalt omr|fffd|de
        Dim intPos As Long
        'intPos = intParaPos + 1
        intPos = intParaPos
        intPos = ImpPosEndNotNormalChar(inPara1.Range.text, intPos)
        Dim strPrefix As String
        strPrefix = ImpMid(inPara1.Range.text, 1, intPos + 0)
        strNum = GetLegalNameNew(strPrefix)
        Call Selection.SetRange(Selection.Range.Start, Selection.Range.Start + intPos)
        
        Selection.text = ""
        Selection.Font.Bold = True
        'Selection.TypeText Text:=strNum & ChrW(160) & "|fffd|"
        'Kolla om det |fffd|r en bokstav efter nummer
        'strNum = Trim(strNum)
        If (Mid(strNum, 2, 1) <> " ") Then
            Dim Num As String
            Dim Char As String
            Dim AsciValue As Integer
            Dim character As String
            Num = 0
            
            'Kolla hur m|fffd|nga tecken som |fffd|r digitala nummer
            For i = 1 To Len(strNum)
                character = Mid(strNum, i, 1)
                AsciValue = AscW(character)
                
                If IsNumeric(character) Then
                    Num = Num + 1
                End If
            Next
            
            Char = Trim(Mid(strNum, Num + 1, 1))
            Num = Left(strNum, Num)
            
            If (Len(Char) > 0) Then
                strNum = Num & " " & Char & " "
            Else
                strNum = Num & " "
            End If
        End If
       
        Selection.TypeText text:=strNum & "|fffd|"
        Selection.Font.Bold = False
        Selection.TypeText text:=ChrW(160) & ChrW(160) & ChrW(160) & ChrW(160)
    Else
        ImpMsg ("Kan ej hitta paragraftecken bland de sex f|fffd|rsta tecknen och kan d|fffd|rf|fffd|r inte automatiskt |fffd|ndra stycket." & Chr(13) & "|fffd|ndar stycket manuellt")
    End If
    
Err1:
End Sub

Sub ChangeToLegalParaNum(inPara1 As Paragraph)
    '|fffd|ndrar mellanrum s|fffd| att den blir godk|fffd|nd
    On Error GoTo Err1
    
    'Markera omr|fffd|de som skall |fffd|ndras och anta numrering
    inPara1.Range.Select
    Dim strNum As String
    strNum = "1"
    Call Selection.SetRange(inPara1.Range.Start, inPara1.Range.End)
    Dim intParaPos As Long
    intParaPos = ImpPos(inPara1.Range.text, "|fffd|")
    If (HasFootnotes(inPara1)) Then
        ImpMsg ("Stycket har fotnot och kan d|fffd|rf|fffd|r inte automatiskt |fffd|ndras." & Chr(13) & "|fffd|ndar stycket manuellt")
        Exit Sub
    End If
    
    If ((intParaPos > 0) And (intParaPos <= 6)) Then
        'Markera gammalt omr|fffd|de
        Dim intPos As Long
        intPos = intParaPos + 1
        intPos = ImpPosEndNotNormalChar(inPara1.Range.text, intPos)
        Dim strPrefix As String
        strPrefix = ImpMid(inPara1.Range.text, 1, intPos + 0)
        strNum = GetLegalName(strPrefix)
        Call Selection.SetRange(Selection.Range.Start, Selection.Range.Start + intPos)
        
        Selection.text = ""
        Selection.Font.Bold = True
        Selection.TypeText text:=strNum & ChrW(160) & "|fffd|"
        Selection.Font.Bold = False
        Selection.TypeText text:=ChrW(160) & ChrW(160) & ChrW(160) & ChrW(160)
    Else
        ImpMsg ("Kan ej hitta paragraftecken bland de sex f|fffd|rsta tecknen och kan d|fffd|rf|fffd|r inte automatiskt |fffd|ndra stycket." & Chr(13) & "|fffd|ndar stycket manuellt")
    End If
    
Err1:
End Sub

Function GetNextJurParaNrNew() As String
    Dim strRes As String
    strRes = "1"
    On Error GoTo Err1
    Dim bContinue As Boolean
    bContinue = True
    Dim intCount As Long
    intCount = 0
    Dim aPrePara As Paragraph
    Set aPrePara = Selection.Paragraphs(1).Previous
    While (bContinue)
        If (CustMallarMain.IsJurParagrafMall(IMPFunction.GetParaStyleAsLegal(aPrePara))) Then
           Dim strPrefix As String
           strPrefix = GetPrefixNew(aPrePara)
           If (strPrefix <> "") Then
                strRes = GetNextPrefixNew(strPrefix)
                bContinue = False
           End If
        End If
        Set aPrePara = aPrePara.Previous
        intCount = intCount + 1
        If (intCount > 1000) Then bContinue = False
    Wend
Err1:
    GetNextJurParaNrNew = strRes
End Function

Function GetNextJurParaNr() As String
    Dim strRes As String
    strRes = "1"
    On Error GoTo Err1
    Dim bContinue As Boolean
    bContinue = True
    Dim intCount As Long
    intCount = 0
    Dim aPrePara As Paragraph
    Set aPrePara = Selection.Paragraphs(1).Previous
    While (bContinue)
        If (CustMallarMain.IsJurParagrafMall(IMPFunction.GetParaStyleAsLegal(aPrePara))) Then
           Dim strPrefix As String
           strPrefix = GetPrefix(aPrePara)
           If (strPrefix <> "") Then
                strRes = GetNextPrefix(strPrefix)
                bContinue = False
           End If
        End If
        Set aPrePara = aPrePara.Previous
        intCount = intCount + 1
        If (intCount > 1000) Then bContinue = False
    Wend
Err1:
    GetNextJurParaNr = strRes
End Function

Function GetPrefixNew(inPara1 As Paragraph) As String
   'Ger prefixet utan tabben
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    Dim strPara As String
    strPara = inPara1.Range.text
    
    Dim intTabPos As Long
    intTabPos = ImpPos(strPara, Chr(9))
    If (intTabPos >= 5) Then intTabPos = 0  'F|fffd|rhindra andra tecken
    Dim intSpacePos As Long
    intSpacePos = ImpPos(strPara, "|fffd|") '|fffd|
    
    Dim intHardSpacePos As Long
    intHardSpacePos = ImpPos(strPara, ChrW(160))
    
    Dim intPos As Long
    intPos = intTabPos
    If (((intSpacePos < intPos) And (intSpacePos > 0)) Or (intPos = 0)) Then intPos = intSpacePos
    If (((intHardSpacePos < intPos) And (intHardSpacePos > 0)) Or (intPos = 0)) Then intPos = intHardSpacePos
    
    strRes = ImpMid(strPara, 1, intPos - 1)
    
Err1:
    GetPrefixNew = strRes
    
End Function

Function GetPrefix(inPara1 As Paragraph) As String
    'Ger prefixet utan tabben
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    Dim strPara As String
    strPara = inPara1.Range.text
    
    Dim intTabPos As Long
    intTabPos = ImpPos(strPara, Chr(9))
    If (intTabPos >= 5) Then intTabPos = 0  'F|fffd|rhindra andra tecken
    Dim intSpacePos As Long
    intSpacePos = ImpPos(strPara, Chr(32))
    If (intSpacePos >= 3) Then
        If ((intSpacePos = 3) And (ImpMid(strPara, 2, 1) = ".")) Then 'Punkt andra tecknet
        ElseIf ((intSpacePos = 3) And (ImpMid(strPara, 2, 1) = ")")) Then 'Parantes andra tecknet
        Else
            intSpacePos = 0  'F|fffd|rhindra andra tecken
        End If
    End If
    Dim intHardSpacePos As Long
    intHardSpacePos = ImpPos(strPara, ChrW(160))
    
    Dim intPos As Long
    intPos = intTabPos
    If (((intSpacePos < intPos) And (intSpacePos > 0)) Or (intPos = 0)) Then intPos = intSpacePos
    If (((intHardSpacePos < intPos) And (intHardSpacePos > 0)) Or (intPos = 0)) Then intPos = intHardSpacePos
    
    strRes = ImpMid(strPara, 1, intPos - 1)
    
Err1:
    GetPrefix = strRes
    
End Function

Function GetNextPrefixNew(inStrPrefix As String) As String
    '|fffd|kar prefixet med 1
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    'Numrering |fffd|r *<tecken>*<siffra>*<bokstav>*<tecken> T ex 1b a) 1.
    Dim strTal As String
    strTal = ""
    Dim strBokstav As String
    strBokstav = ""
    Dim strTecken As String
    strTecken = ""
    
    Dim intLen As Long
    For intLen = 1 To ImpLen(inStrPrefix)
        Dim strChar As String
        strChar = ImpMid(inStrPrefix, intLen, 1)
        
        If (IsANumStr(strChar)) Then
            strTal = strTal & strChar
        ElseIf ((ImpAsc(strChar) >= ImpAsc("a")) And (ImpAsc(strChar) <= ImpAsc("z"))) Then
            strBokstav = strBokstav & strChar
        ElseIf ((ImpAsc(strChar) >= ImpAsc("A")) And (ImpAsc(strChar) <= ImpAsc("Z"))) Then
            strBokstav = strBokstav & strChar
        Else
            strTecken = strChar
        End If
    Next intLen
    
    If (strBokstav <> "") Then
        strRes = strTal & " " & Chr(Asc(strBokstav) + 1) & strTecken
        If (strBokstav = "I") Then strRes = strTal & "II" & strTecken
        If (strBokstav = "II") Then strRes = strTal & "III" & strTecken
        If (strBokstav = "III") Then strRes = strTal & "IV" & strTecken
        If (strBokstav = "IV") Then strRes = strTal & "V" & strTecken
        If (strBokstav = "V") Then strRes = strTal & "VI" & strTecken
        If (strBokstav = "VI") Then strRes = strTal & "VII" & strTecken
        If (strBokstav = "VII") Then strRes = strTal & "VIII" & strTecken
        If (strBokstav = "VIII") Then strRes = strTal & "IX" & strTecken
        If (strBokstav = "IX") Then strRes = strTal & "X" & strTecken
    ElseIf (strTal <> "") Then
        strRes = IntToStr(StrToInt(strTal) + 1) & strBokstav & strTecken
    Else
        strRes = inStrPrefix
    End If
    
    'Symbol
    If (strRes = "(") Then strRes = Chr(150)

Err1:
    GetNextPrefixNew = strRes
    
End Function

Function GetNextPrefix(inStrPrefix As String) As String
    '|fffd|kar prefixet med 1
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    'Numrering |fffd|r *<tecken>*<siffra>*<bokstav>*<tecken> T ex 1b a) 1.
    Dim strTal As String
    strTal = ""
    Dim strBokstav As String
    strBokstav = ""
    Dim strTecken As String
    strTecken = ""
    
    Dim intLen As Long
    For intLen = 1 To ImpLen(inStrPrefix)
        Dim strChar As String
        strChar = ImpMid(inStrPrefix, intLen, 1)
        
        
        If (IsANumStr(strChar)) Then
            strTal = strTal & strChar
        ElseIf ((ImpAsc(strChar) >= ImpAsc("a")) And (ImpAsc(strChar) <= ImpAsc("z"))) Then
            strBokstav = strBokstav & strChar
        ElseIf ((ImpAsc(strChar) >= ImpAsc("A")) And (ImpAsc(strChar) <= ImpAsc("Z"))) Then
            strBokstav = strBokstav & strChar
        Else
            strTecken = strTecken & strChar
        End If
    Next intLen
    
    If (strBokstav <> "") Then
        strRes = strTal & Chr(Asc(strBokstav) + 1) & strTecken
        If (strBokstav = "I") Then strRes = strTal & "II" & strTecken
        If (strBokstav = "II") Then strRes = strTal & "III" & strTecken
        If (strBokstav = "III") Then strRes = strTal & "IV" & strTecken
        If (strBokstav = "IV") Then strRes = strTal & "V" & strTecken
        If (strBokstav = "V") Then strRes = strTal & "VI" & strTecken
        If (strBokstav = "VI") Then strRes = strTal & "VII" & strTecken
        If (strBokstav = "VII") Then strRes = strTal & "VIII" & strTecken
        If (strBokstav = "VIII") Then strRes = strTal & "IX" & strTecken
        If (strBokstav = "IX") Then strRes = strTal & "X" & strTecken
    ElseIf (strTal <> "") Then
        strRes = IntToStr(StrToInt(strTal) + 1) & strBokstav & strTecken
    Else
        strRes = inStrPrefix
    End If
    
    'Symbol
    If (strRes = "(") Then strRes = Chr(150)

Err1:
    GetNextPrefix = strRes
    
End Function
Function GetColFromPara(inPara1 As Paragraph) As Long
    'Returnerar columnen i tabell, 0 om ingen kolumn
    Dim intRes As Long
    intRes = 0
    On Error GoTo Err1

    If (inPara1.Range.Tables.Count > 0) Then
        intRes = inPara1.Range.Cells(1).ColumnIndex
    End If
Err1:
    GetColFromPara = intRes
End Function
Sub ReplacePrefix(inPara1 As Paragraph, inStrNewPrefix As String)
    Dim strPrefix As String
    strPrefix = GetPrefix(inPara1)
    If (True) Then
        inPara1.Range.Select
        'Selection.Range.Collapse
        Call Selection.SetRange(Selection.Range.Start, Selection.Range.Start + ImpLen(strPrefix))
        If (strPrefix = "") Then
            Selection.text = inStrNewPrefix & Chr(9)
        Else
            Selection.text = inStrNewPrefix
        End If
        Call Selection.SetRange(inPara1.Range.End - 1, inPara1.Range.End - 1)
    End If
End Sub
Sub ReplaceSpaceToTab(inPara1 As Paragraph)
    On Error GoTo Err1
    
    Dim strPara As String
    strPara = inPara1.Range.text
    
    Dim intTabPos As Long
    intTabPos = ImpPos(strPara, Chr(9))
    Dim intSpacePos As Long
    intSpacePos = ImpPos(strPara, Chr(32))
    
    If ((intTabPos = 0) And (intSpacePos <= 3)) Then
        inPara1.Range.Select
        Call Selection.SetRange(Selection.Range.Start + intSpacePos - 1, Selection.Range.Start + intSpacePos)
        Selection.text = Chr(9)
    End If

Err1:
End Sub

Function IsOnlyPrefixRow(inPara1 As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1

    Dim strPrefix As String
    strPrefix = GetPrefix(inPara1)
    If (inPara1.Range.Characters.Count < (ImpLen(strPrefix) + 3)) Then
        bRes = True
    End If
Err1:
    IsOnlyPrefixRow = bRes
End Function

'********** Funktioner ******************
Sub InsertListStreck()
    If (IsEmptyRowAtSelection) Then
        Selection.TypeText (Chr(150) & Chr(9))
    Else
        Selection.TypeText (Chr(150))
    End If
End Sub

Sub RemoveAutonumAtSelection()
    'Tar bort autonumrering p|fffd| markerad rad
    On Error GoTo Err1
    Selection.Paragraphs(1).Range.ListFormat.List.ConvertNumbersToText
    Call UnsetAutoNumb
Err1:
End Sub
Sub RemoveAutonumInDocument()
    'Tar bort autonumrering i dokument
    On Error Resume Next
    ImpDoc.ConvertNumbersToText
    
End Sub
Sub UnsetAutoNumb()
    On Error Resume Next
    With Options
        .AutoFormatAsYouTypeApplyBulletedLists = False
        .AutoFormatAsYouTypeApplyNumberedLists = False
    End With

End Sub

Function IsAutonumRowAtSelection() As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    If (Selection.Range.Paragraphs(1).Range.ListParagraphs.Count > 0) Then
        bRes = True
    End If
Err1:
    IsAutonumRowAtSelection = bRes
End Function
Function IsEmptyRowBeforeSelection() As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    bRes = IsEmptyParagraph(Selection.Range.Paragraphs(1).Previous)
    
Err1:
    IsEmptyRowBeforeSelection = bRes

End Function


'**************************** Insert functions ********************
Sub ttrp()
    Call ReplacePrefix(Selection.Range.Paragraphs(1), "88")
End Sub

Sub ttPrefix()
    Dim strPrefix As String
    strPrefix = GetPrefix(Selection.Range.Paragraphs(1))
    If (strPrefix <> "") Then
        Call Selection.SetRange(Selection.Range.Paragraphs(1).Range.Start, Selection.Range.Paragraphs(1).Range.Start + ImpLen(strPrefix))
        Selection.Range.text = GetNextPrefix(Selection.Range.text)
    End If
End Sub
Sub ttChar()
    'MsgBox (AscW(Selection.Range.Text))
    'For i = 1 To 14
    '    Selection.TypeText (ChrW(8212) & ChrW(160) & ChrW(160) & ChrW(160) & ChrW(160))
    'Next i
    For i = 1 To 27
        Selection.TypeText (ChrW(8211) & ChrW(160) & ChrW(160))
    Next i
    'Selection.TypeText (ChrW(8212) & ChrW(160) & ChrW(160) & ChrW(160) & ChrW(160) & ChrW(8212))
End Sub
Sub StartTimeCirculating()
    IMPList.UnsetAutoNumb
    Dim thisSecond As Long
    thisSecond = GetTimeAsSecond
    If (Abs(thisSecond - mLastListTime) > 3) Then
'    If (mbTimeIsCirculating = False) Then
        If (HasString(ActiveDocument, ".dot") = False) Then
            Call Application.OnTime(Now + TimeValue("00:00:1"), "IMPList.IMPListTime")
        End If
    End If
    
End Sub
Sub IMPListTime()
    On Error GoTo Err1
    'mbTimeIsCirculating = True
    mLastListTime = GetTimeAsSecond
    If (Selection.Paragraphs(1).Range.text = Chr(13)) Then 'St|fffd| p|fffd| tomrad
    
        'Ta bort sista listraden som bara har prefix
        If (CustMallarMain.IsNewListRow(Selection.Paragraphs(1))) Then
        
            Dim aPrePara As Paragraph
            Set aPrePara = Selection.Paragraphs(1).Previous
            
            If (IsOnlyPrefixRow(aPrePara)) Then 'Tomrad med prefix bara ovanf|fffd|r
                'Ta bort den tomma raden och s|fffd|tt style till normal
                Selection.Paragraphs(1).Range.Style = CustMallarMain.cStrSMallNormal
                If (aPrePara.Range.Characters.Count <= 7) Then
                    aPrePara.Range.Delete
                    'Selection.TypeParagraph
                    Selection.Style = CustMallarMain.cStrSMallForf_Indrag
                End If
            Else
                'Forts|fffd|tt listan
                IMPVar.SetDefaultValues
                Call SetListContinue
            End If
        End If
        
        'Ny-list-rad som ligger h|fffd|gre upp skall bli normal
        Dim prev As Paragraph
        Set prev = Selection.Paragraphs(1).Previous
        Dim intI As Long
        For intI = 1 To 3
            If (CustMallarMain.IsNewListRow(prev)) Then
                prev.Range.Style = CustMallarMain.cStrSMallNormal
            Else
                'MsgBox (prev.Style)
            End If
            Set prev = prev.Previous
        Next intI
    End If
    
Err1:
    On Error GoTo Err2
    Call Application.OnTime(Now + TimeValue("00:00:1"), "IMPList.IMPListTime")
Err2:
    
End Sub

Function HasFootnotes(inPara1 As Paragraph) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    Dim intFootnoteCount As Long
    intFootnoteCount = inPara1.Range.Footnotes.Count
    If (intFootnoteCount) > 0 Then bRes = True
    
Err1:
    HasFootnotes = bRes
End Function

Function GetTimeAsSecond() As Long
    Dim lngRes As Long
    lngRes = 0
    On Error GoTo Err1
    lngRes = Second(Now)
    lngRes = lngRes + Minute(Now) * 60
    lngRes = lngRes + Hour(Now) * 60 * 60
    
Err1:
    GetTimeAsSecond = lngRes
End Function

Sub tttime()
    MsgBox (GetTimeAsSecond())
End Sub
Sub RemoveListPrefixAndTabFromSelection()
    'G|fffd| igenom alla markerad paragrafer
    Dim intCountPara As Long
    intCountPara = Selection.Paragraphs.Count
    Selection.Paragraphs(1).Range.Select
    Call RemoveListPrefixAndTabFromPara(Selection.Paragraphs(1))
    Dim intParaIdx As Long
    For intParaIdx = 1 To intCountPara - 1
        Selection.Paragraphs(1).Next.Range.Select
        Call RemoveListPrefixAndTabFromPara(Selection.Paragraphs(1))
    Next intParaIdx
    
End Sub
Sub RemoveListPrefixAndTabFromPara(inPara1 As Paragraph)
    'F|fffd|r varje stycke, ta bort tabbtecken och prefixet f|fffd|re
    inPara1.Range.Style = CustMallarMain.cStrSMallNormal
    Dim strPrefix As String
    strPrefix = GetPrefix(inPara1)
        inPara1.Range.Select
        'Selection.Range.Collapse
        Call Selection.SetRange(Selection.Range.Start, Selection.Range.Start + ImpLen(strPrefix) + 1)
        Selection.text = ""
        Call Selection.SetRange(inPara1.Range.End - 1, inPara1.Range.End - 1)
End Sub

Attribute VB_Name = "IMPMain"
'Denna modul |fffd|r egentligen CustMenuMain
'********* Knappar ********
Sub DoEditSettings()
    'Knapp inst|fffd|llningar
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    IMPPrefDlg.SetValues
    IMPPrefDlg.MultiPage1.Value = 0
    IMPPrefDlg.Show
    Exit Sub
Err1:
    ImpMsg ("Kan ej redigera inst|fffd|llningar.")
    
End Sub
Sub DoEditBBRSettings()
    'Knapp BBR inst|fffd|llningar
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    IMPBBRSettings.Show
    Exit Sub
Err1:
    ImpMsg ("Kan ej redigera inst|fffd|llningar f|fffd|r BBR.")

End Sub
Sub DoHelp()
    'Knapp Index
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    IMPPrefDlg.SetValues
    IMPPrefDlg.MultiPage1.Value = 1
    IMPPrefDlg.Show
    Exit Sub
Err1:
    ImpMsg ("Kan ej visa hj|fffd|lp.")
    
End Sub
Sub DoHelpAbout()
    'Knapp Om IMPin
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    IMPPrefDlg.SetValues
    IMPPrefDlg.MultiPage1.Value = 2
    IMPPrefDlg.Show
    Exit Sub
Err1:
    ImpMsg ("Kan ej visa hj|fffd|lp om.")
End Sub

Sub DoEditMetadata()
    'Knapp Dokumentinformation
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    IMPMetaMain.SetMetaDialog
    Exit Sub
Err1:
    ImpMsg ("Kan ej redigera metadata.")
End Sub
Sub DoCheck()
    'Knapp Kontrollera dokument
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    IMPCheckMain.DoCheckClick
    Exit Sub
Err1:
    ImpMsg ("Kan ej kontrollera dokumentet.")
End Sub
Sub DoCheckHeadings()
    'Knapp Kontrollera dokument
    On Error GoTo Err1
    CustExternData.StartValidateHeadings
    If mHasErrors = False Then
        'IMPHeadingsDlg.Hide
        CloseProcMessage
        MsgBox "Inga fler rubriker kunde hittas med fel."
    End If
    Exit Sub
Err1:
    ImpMsg ("Kan ej kontrollera dokumentet.")
End Sub
Sub DoSaveAsXML()
    'Knappen spara som XML
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    CustSaveMain.SaveAsXML
    Exit Sub
Err1:
    ImpMsg ("Kan ej spara dokumentet som XML.")
    

End Sub
Sub DoSaveAsPDF()
    'Knappen spara som XML
    On Error GoTo Err1
    SaveDocumentToPDF '191219/Mo
    'IMPVar.SetDefaultValues
    'Call CustExternData.GetSaveAsPDF
    Exit Sub
Err1:
    ImpMsg ("Kan ej spara dokumentet som PDF.")
    

End Sub
Sub DoSaveHSTART()
   On Error GoTo Err1
    IMPVar.SetDefaultValues
    Call SetPropValue(cStrPropDocStatus, cStrPropDocStatus_SkribentStart)
    Call CustSaveMain.SparaDokumentet
    Exit Sub
Err1:
    ImpMsg ("Kan ej spara dokumentet.")
End Sub
Sub DoSaveHSLUT()
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    
    Dim intOldStatus As Long
    intOldStatus = GetStatusAsInt
    Call SetPropValue(cStrPropDocStatus, cStrPropDocStatus_SkribentSlut)
    CustSaveMain.SparaDokumentet
        
    If (intOldStatus <> GetStatusAsInt) Then
        msgRes = MsgBox("Du m|fffd|ste nu kontrollera dokumentet en g|fffd|ng till, eftersom ytterligare kontroller har lagts till!", vbYesNo, "Kontrollera")
        If (msgRes = vbYes) Then
            Call IMPMain.DoCheck
        End If
    End If
    
    Exit Sub
Err1:
    ImpMsg ("Kan ej spara dokumentet.")
End Sub

'******** MetaFunctions
Sub DoChangeToggleChangeBars()
    'Knapp V|fffd|xla |fffd|ndringsmarkering
    IMPVar.SetDefaultValues
    CustInsert.ToggleChangeBars
End Sub
Sub DoMakeTable()
    'Knapp Skapar en tabell av markerat omr|fffd|de
    IMPVar.SetDefaultValues
    Call CustMallarFunc.ImpConvertToTable
    
End Sub
Sub DoSpaceForPicture()
    On Error GoTo Err1
    'Knapp Skapa radavst|fffd|nd f|fffd|r bild
    'Ta bort absolut avst|fffd|nd till f|fffd|reg|fffd|ende linje, s|fffd| bild syns.
    If (Selection.ParagraphFormat.LineSpacingRule = wdLineSpaceSingle) Then
        Selection.ParagraphFormat.LineSpacingRule = wdLineSpaceExactly
    Else
        Selection.ParagraphFormat.LineSpacingRule = wdLineSpaceSingle
    End If
Err1:
End Sub
Sub DoInsertPicture()
    'infoga bild och skapar radavst|fffd|nd
    On Error GoTo Err1
    With Dialogs(wdDialogInsertPicture)
        .Name = "*.*"
        .Show
    End With
'    DoSpaceForPicture
Err1:
End Sub
Sub DoInsertNoLineTabell()
    'Infogar tabell utan linjer och skapar r|fffd|tt mall
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    'Selection.Range.Style = ImpDoc.Styles(cStrSMallForf_TabellText)
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallForf)
    With Dialogs(wdDialogTableInsertTable)
        .Show
    End With
    Selection.Tables(1).Range.Style = CustMallarMain.cStrSMallForf
    Selection.Tables(1).Borders(wdBorderBottom).LineStyle = wdLineStyleNone
    Selection.Tables(1).Borders(wdBorderHorizontal).LineStyle = wdLineStyleNone
    Selection.Tables(1).Borders(wdBorderTop).LineStyle = wdLineStyleNone
    Selection.Tables(1).Borders(wdBorderVertical).LineStyle = wdLineStyleNone
    Selection.Tables(1).Borders(wdBorderLeft).LineStyle = wdLineStyleNone
    Selection.Tables(1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
    Call CustInsert.SetMoreTableSpace
        
Err1:
End Sub
Sub DoTableRowSpace()
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Call CustInsert.ToggleTableSpace
        
Err1:
End Sub
Sub DoInsertTabell()
    'Infogar tabell och skapar r|fffd|tt mall
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    'Selection.Range.Style = ImpDoc.Styles(cStrSMallForf_TabellText)
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallForf)
    With Dialogs(wdDialogTableInsertTable)
        .Show
    End With
    Selection.Tables(1).Range.Style = CustMallarMain.cStrSMallForf_TabellText
    Selection.Tables(1).TopPadding = CentimetersToPoints(0.05)
    Selection.Tables(1).BottomPadding = CentimetersToPoints(0.05)
    Selection.Tables(1).Borders(wdBorderLeft).LineStyle = wdLineStyleNone
    Selection.Tables(1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
        
        
Err1:
End Sub
Sub DoInsertTabellRad()
    'Infogar tabell och skapar r|fffd|tt mall
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    'Selection.Range.Style = ImpDoc.Styles(cStrSMallAllmRad_TabellText)
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallAllmRad)
    With Dialogs(wdDialogTableInsertTable)
        .Show
    End With
    Selection.Tables(1).Range.Style = CustMallarMain.cStrSMallAllmRad_TabellText
    Selection.Tables(1).Rows.LeftIndent = CentimetersToPoints(2)
    Selection.Tables(1).PreferredWidthType = wdPreferredWidthPoints
    Selection.Tables(1).PreferredWidth = CentimetersToPoints(11.05)
    Selection.Tables(1).TopPadding = CentimetersToPoints(0.05)
    Selection.Tables(1).BottomPadding = CentimetersToPoints(0.05)
    Selection.Tables(1).Borders(wdBorderLeft).LineStyle = wdLineStyleNone
    Selection.Tables(1).Borders(wdBorderRight).LineStyle = wdLineStyleNone
Err1:

End Sub
Sub DoListStreck()
    'Knapp Infoga listtreck
    Selection.TypeText (Chr(150))
End Sub
Sub DoHartBlanksteg()
    'Knapp Infoga listtreck
    Selection.TypeText (ChrW(160))
End Sub
'********Mallar Paragraf
Sub DoParagrafF|fffd|reskrift()
    'Knapp F|fffd|reskrift Paragraf
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    'Selection.Style = ImpDoc.Styles(cStrSMallForf)
    'IMPInsert.InsertAutoParagraf
    Call ClearVisEmptyRowAtSelection
    Call CustInsert.InsertEmptyRowAboveAtSelection(True)
    IMPList.InsertJurParagrafSFS (CustMallarMain.cStrSMallForf_Paragraf)
    'IMPList.InsertJurParagrafSFSNew (CustMallarMain.cStrSMallForf_Paragraf)
Err1:
End Sub
Sub DoTitelAndringsMarkering()
    'Knapp Titel med |fffd|ndringsmarkering
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallTitel)
    Call CustInsert.SetChangeBars(Selection.Paragraphs(1))
    
    If (CustInsert.IsEmptyRowBeforeSelection() = False) Then
        Call CustInsert.InsertParaBefore(CustMallarMain.cStrSMallNormal, Selection.Paragraphs(1), True)
    End If
Err1:
End Sub
Sub DoMelRub1()
    'Knapp Mellanrubrik 1
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    'If (IsBBRMall() = False) Then
    '    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallRubrik2)
    '    If (CustInsert.IsEmptyRowBeforeSelection() = False) Then
    '        Call CustInsert.InsertParaBefore(CustMallarMain.cStrSMallNormal, Selection.Paragraphs(1), True)
    '    End If
    'Else
    '    ImpMsg ("Du kan inte infoga rubriken med denna mall.")
    'End If
    If (IsBBRMall() = False) Then
        Call ClearVisEmptyRowAtSelection
        Call CustInsert.InsertEmptyRowAboveAtSelection(True)
        Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallRubrik2)
    Else
        ImpMsg ("Du kan inte infoga rubriken med denna mall.")
    End If
Err1:
End Sub
Sub DoMelRub2()
      'Knapp Mellanrubrik 2
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    'If (IsBBRMall() = False) Then
    '    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallRubrik3)
    '    If (CustInsert.IsEmptyRowBeforeSelection() = False) Then
    '        Call CustInsert.InsertParaBefore(CustMallarMain.cStrSMallNormal, Selection.Paragraphs(1), True)
    '    End If
    'Else
    '    ImpMsg ("Du kan inte infoga rubriken med denna mall.")
    'End If
    If (IsBBRMall() = False) Then
        Call ClearVisEmptyRowAtSelection
        Call CustInsert.InsertEmptyRowAboveAtSelection(True)
        Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallRubrik3)
    Else
        ImpMsg ("Du kan inte infoga rubriken med denna mall.")
    End If
Err1:
End Sub
Sub DoMelRub3()
    'Knapp Mellanrubrik 3
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    If (IsBBRMall() = False) Then
        Call ClearVisEmptyRowAtSelection
        Call CustInsert.InsertEmptyRowAboveAtSelection(True)
        Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallRubrik4)
    Else
        ImpMsg ("Du kan inte infoga rubriken med denna mall.")
    End If
Err1:
End Sub
Sub DoKapRubrik()
    'Knapp Kapitel rubrik
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Call ClearVisEmptyRowAtSelection
    Call CustInsert.InsertEmptyRowAboveAtSelection(True)
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallKapitel_Rubrik1)
    If (CheckNewEmptyRow) Then
        Selection.TypeText ("X Kap.")
    End If
Err1:
End Sub
Sub DoParagrafAllmRad()
    'Knapp Allmr|fffd|d Paragraf
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    'IMPList.InsertJurParagrafSFS (CustMallarMain.cStrSMallAllmRad_Paragraf)
    IMPList.InsertJurParagrafSFSNew (CustMallarMain.cStrSMallAllmRad_Paragraf)
Err1:
End Sub

'******* Mallar Allm|fffd|nt r|fffd|d fast-text
Sub DoAllmRadRubrikFastText()
    'Knapp Allm|fffd|nt r|fffd|d FastText
    IMPVar.SetDefaultValues
    CustInsert.DoAllmRadFix (CustMallarMain.cStrSMallAllmRad_Start)
    
End Sub

'********Mallar Lista
Sub DoLista1ForfTabell()
    'Knapp Lista 1 F|fffd|reskrift Tabell
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallForf_TabellLista)
    If (IsEmptyRowAtSelection) Then
        Selection.TypeText (Chr(150) & Chr(9))
    ElseIf (Not Selection.Paragraphs(1).Range.text Like Chr(150) & Chr(9) & "*") Then
        Selection.Paragraphs(1).Range.InsertBefore Chr(150) & Chr(9)
    End If
Err1:
End Sub
Sub DoIndrag1ForfTabell()
    'Knapp Lista 1 F|fffd|reskrift Tabell
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallForf_TabellLista)
    If (IsEmptyRowAtSelection) Then
        Selection.TypeText (Chr(9))
    ElseIf (Not Selection.Paragraphs(1).Range.text Like Chr(9) & "*") Then
        Selection.Paragraphs(1).Range.InsertBefore Chr(9)
    End If
Err1:
End Sub
Sub DoLista2ForfTabell()
    'Knapp Lista 2 F|fffd|reskrift Tabell
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallForf_TabellLista2)
    If (IsEmptyRowAtSelection) Then
        Selection.TypeText (Chr(150) & Chr(9))
    ElseIf (Not Selection.Paragraphs(1).Range.text Like Chr(150) & Chr(9) & "*") Then
        Selection.Paragraphs(1).Range.InsertBefore Chr(150) & Chr(9)
    End If
Err1:
End Sub
Sub DoIndrag2ForfTabell()
    'Knapp Lista 2 F|fffd|reskrift Tabell
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallForf_TabellLista2)
    If (IsEmptyRowAtSelection) Then
        Selection.TypeText (Chr(9))
    ElseIf (Not Selection.Paragraphs(1).Range.text Like Chr(9) & "*") Then
        Selection.Paragraphs(1).Range.InsertBefore Chr(9)
    End If
Err1:
End Sub
Sub DoLista1AllmRadTabell()
    'Knapp Lista 1 Allm|fffd|nt r|fffd|d Tabell
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallAllmRad_TabellLista)
    If (IsEmptyRowAtSelection) Then
        Selection.TypeText (Chr(150) & Chr(9))
    ElseIf (Not Selection.Paragraphs(1).Range.text Like Chr(150) & Chr(9) & "*") Then
        Selection.Paragraphs(1).Range.InsertBefore Chr(150) & Chr(9)
    End If
Err1:
End Sub
Sub DoLista2AllmRadTabell()
    'Knapp Lista 2 Allm|fffd|nt r|fffd|d Tabell
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallAllmRad_TabellLista2)
    If (IsEmptyRowAtSelection) Then
        Selection.TypeText (Chr(150) & Chr(9))
    ElseIf (Not Selection.Paragraphs(1).Range.text Like Chr(150) & Chr(9) & "*") Then
        Selection.Paragraphs(1).Range.InsertBefore Chr(150) & Chr(9)
    End If
Err1:
End Sub
Sub DoIndrag1AllmRadTabell()
    'Knapp Lista 1 Allm|fffd|nt r|fffd|d Tabell
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallAllmRad_TabellLista)
    If (IsEmptyRowAtSelection) Then
        Selection.TypeText (Chr(9))
    ElseIf (Not Selection.Paragraphs(1).Range.text Like Chr(9) & "*") Then
        Selection.Paragraphs(1).Range.InsertBefore Chr(9)
    End If
Err1:
End Sub
Sub DoIndrag2AllmRadTabell()
    'Knapp Lista 2 Allm|fffd|nt r|fffd|d Tabell
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Selection.Style = ImpDoc.Styles(CustMallarMain.cStrSMallAllmRad_TabellLista2)
    If (IsEmptyRowAtSelection) Then
        Selection.TypeText (Chr(9))
    ElseIf (Not Selection.Paragraphs(1).Range.text Like Chr(9) & "*") Then
        Selection.Paragraphs(1).Range.InsertBefore Chr(9)
    End If
Err1:
End Sub


'******** Mallar Rubriker ************
Sub DoBFSBBRRubrik1()
    'Knapp BBR Rubrik 1
    IMPVar.SetDefaultValues
    If (IsBFSMall() = False) Then
        Call CustInsert.DoBBRRubrik(1, 3)
    Else
        ImpMsg ("Du kan inte infoga rubriken med denna mall.")
    End If
End Sub
Sub DoBFSBBRRubrik2()
    'Knapp BBR Rubrik 2
    IMPVar.SetDefaultValues
    If (IsBFSMall() = False) Then
        Call CustInsert.DoBBRRubrik(2, 3)
    Else
        ImpMsg ("Du kan inte infoga rubriken med denna mall.")
    End If
End Sub
Sub DoBFSBBRRubrik3()
    'Knapp BBR Rubrik 3
    IMPVar.SetDefaultValues
    If (IsBFSMall() = False) Then
        Call CustInsert.DoBBRRubrik(3, 3)
    Else
        ImpMsg ("Du kan inte infoga rubriken med denna mall.")
    End If
End Sub
Sub DoBFSBBRRubrik4()
    'Knapp BBR Rubrik 4
    IMPVar.SetDefaultValues
    If (IsBFSMall() = False) Then
        Call CustInsert.DoBBRRubrik(4, 3)
    Else
        ImpMsg ("Du kan inte infoga rubriken med denna mall.")
    End If
End Sub
Sub DoBFSBBRRubrik5()
    'Knapp BBR Rubrik 5
    IMPVar.SetDefaultValues
    If (IsBFSMall() = False) Then
        Call CustInsert.DoBBRRubrik(5, 3)
    Else
        ImpMsg ("Du kan inte infoga rubriken med denna mall.")
    End If
End Sub

'******** Mallar Avsnitt ******
Sub DoIkraftLinje()
    'Knapp ikraftlinje
    IMPVar.SetDefaultValues
    'IMPInsert.InsertIkraftlinje
    CustInsert.DoIkraftLinje
End Sub
Sub DoUnderskrift()
    'Knapp Underskrift
    IMPVar.SetDefaultValues
    'IMPInsert.InsertIkraftlinje
    CustInsert.DoUnderskrift
End Sub
Sub DoKontranamn()
    'Knapp Underskrift
    IMPVar.SetDefaultValues
    'IMPInsert.InsertIkraftlinje
    CustInsert.DoKontranamn
End Sub
Sub DoKontraorg()
    'Knapp Underskrift
    IMPVar.SetDefaultValues
    'IMPInsert.InsertIkraftlinje
    CustInsert.DoKontraorg
End Sub
Sub DoListaContinue()
    'Infoga ny rad i listan
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Call CustInsert.AdjustListRow
    'Call IMPList.SetListContinue
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga lista")
End Sub
Sub DoLagrutaInsert()
    'Knapp InfogaLagruta
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    CustInsert.LagrutaInsert
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga lagruta")
End Sub
Sub DoLagrutaAdjust()
    'Knapp V|fffd|nsterjustera lagruta
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    CustInsert.LagrutaLeftAdjust
    Exit Sub
Err1:
    ImpMsg ("Kan ej justera lagruta")
End Sub
Sub DoBemyndigandeDels()
    'Knapp Infoga |fffd|ndringsstycke dels
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    CustInsert.SetBemyndigandeDels
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga texten")
End Sub
Sub DoUtelamnadStreck()
    'Knapp Infoga streckmarkering f|fffd|r utel|fffd|mnat stycke
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    CustInsert.InsertLedtextUtelamnad
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga streck f|fffd|r utel|fffd|mnat stycke s k transumering")
End Sub
Sub DoPaXMyndighetensVagnar()
    'Knapp Infoga streckmarkering f|fffd|r utel|fffd|mnat stycke
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    CustInsert.InsertPaXMyndighetensVagnar
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga texten")
End Sub
Sub DoBilagaFastRubrik()
    'Knapp Infoga streckmarkering f|fffd|r utel|fffd|mnat stycke
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    CustInsert.InsertBilagaFastRubrik
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga texten")
End Sub

Sub DoRepStrecklista()
    'knappen strecklista
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Call IMPList.SetListTypeRepeateLevel
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga lista")

End Sub
Sub DoRepNummerlista()
    'Knappen numrerad lista
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Call IMPList.SetListTypeRepeateLevel("Nummer")
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga lista")

End Sub
Sub DoRepBokstavslista()
    'Knappen bokstavslista
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Call IMPList.SetListTypeRepeateLevel("Bokstav")
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga lista")

End Sub
Sub DoOkaIndrag()
    'Knappen |fffd|ka indrag
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Call IMPList.IncreaseListLevel
    Exit Sub
Err1:
    ImpMsg ("Kan ej |fffd|ka indrag")


End Sub
Sub DoMinskaIndrag()
    'Knappen |fffd|ka indrag
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Call IMPList.DecreaseListLevel
    Exit Sub
Err1:
    ImpMsg ("Kan ej minska indrag")

End Sub
Sub DoForfStrecklista()
    'knappen strecklista
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    'Call IMPList.SetListTypeRepeateLevel
    Call IMPList.SetListTypeOnRows
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga lista")

End Sub
Sub DoForfNummerlista()
    'Knappen numrerad lista
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    'Call IMPList.SetListTypeRepeateLevel("Nummer")
    Call IMPList.SetListTypeOnRows("Nummer")
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga lista")

End Sub
Sub DoForfBokstavslista()
    'Knappen bokstavslista
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    'Call IMPList.SetListTypeRepeateLevel("Bokstav")
    Call IMPList.SetListTypeOnRows("Bokstav")
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga lista")

End Sub

Sub DoAllmStrecklista()
    'knappen strecklista
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallAllmRad_Lista)
    'Call IMPList.SetListTypeRepeateLevel
    Call IMPList.SetListTypeOnRows
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga lista")

End Sub
Sub DoAllmNummerlista()
    'Knappen numrerad lista
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallAllmRad_Lista)
    'Call IMPList.SetListTypeRepeateLevel("Nummer")
    Call IMPList.SetListTypeOnRows("Nummer")
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga lista")

End Sub
Sub DoAllmBokstavslista()
    'Knappen bokstavslista
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallAllmRad_Lista)
    'Call IMPList.SetListTypeRepeateLevel("Bokstav")
    Call IMPList.SetListTypeOnRows("Bokstav")
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga lista")

End Sub
Sub DoIndrag()
    'Knappen bokstavslista
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    If (CustMallarMain.IsAllmRadMall(IMPFunction.GetParaStyleAsLegal(Selection.Paragraphs(1)))) Then
        Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallAllmRad_Indrag)
    Else
    Selection.Range.Style = ImpDoc.Styles(CustMallarMain.cStrSMallForf_Indrag)
    End If
    
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga lista")
    
End Sub
Sub DoVidGrund()
    On Error GoTo Err1
    If (ImpFile.FileExist("C:\IMPin\BFS\Instruktionsfilmer\Mallar\BFS mallen\BFS Grund\BFS Grund.html")) Then
        ImpShell32.ShowFile ("C:\IMPin\BFS\Instruktionsfilmer\Mallar\BFS mallen\BFS Grund\BFS Grund.html")
    ElseIf (ImpFile.FileExist("O:\Instruktionsfilmer\Mallar\BFS mallen\BFS Grund\BFS Grund.html")) Then
        ImpShell32.ShowFile ("O:\Instruktionsfilmer\Mallar\BFS mallen\BFS Grund\BFS Grund.html")
    End If
Err1:

End Sub
Sub DoFootnote()
    'knappen Infoga fotnote
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Call CustInsert.InsertFootnote
    Exit Sub
Err1:
    ImpMsg ("Kan ej infoga fotnot.")

End Sub
Sub DoClearAndringar()
    'knappen Ta bort |fffd|ndrinsmarkeringar
    On Error GoTo Err1
    IMPVar.SetDefaultValues
    Call CustInsert.RemoveAllAndringsMarkeringar
    ImpMsg ("Alla |fffd|ndringsmarkeringar |fffd|r nu borttagna")
    
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa ta bort |fffd|ndringsmarkeringar.")

End Sub
'OFF2010
Public Sub Do10Foreskrift(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallForf
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10JurPara(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoParagrafF|fffd|reskrift
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10ForeskriftIndrag(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallForf_Indrag
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10AllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallAllmRad
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10AllmRadIndrag(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallAllmRad_Indrag
    
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10DoAllmRadRubrikFastText(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoAllmRadRubrikFastText
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Strecklista(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoForfStrecklista
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Nummerlista(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoForfNummerlista
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Bokstavslista(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoForfBokstavslista
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10StrecklistaAllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoAllmStrecklista
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10NummerlistaAllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoAllmNummerlista
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BokstavslistaAllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoAllmBokstavslista
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10OkaIndrag(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoOkaIndrag
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10MinskaIndrag(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoMinskaIndrag
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Mellanrubrik1(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoMelRub1
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Mellanrubrik2(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoMelRub2
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Mellanrubrik3(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoMelRub3
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10RubrikBilaga(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoBilagaFastRubrik
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BilagaRubrik1(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallBilaga_Rubrik1
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BilagaRubrik2(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallBilaga_Rubrik2
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10RubrikKapitel(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoKapRubrik
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10InnehallRubrik(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallInnehall_Rubrik1
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BBRRubrik1(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoBFSBBRRubrik1
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BBRRubrik2(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoBFSBBRRubrik2
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BBRRubrik3(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoBFSBBRRubrik3
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BBRRubrik4(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoBFSBBRRubrik4
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BBRRubrik5(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoBFSBBRRubrik5
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellRubrik(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallForf_TabellRubrik
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellInfoga(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoInsertTabell
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellHuvud(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallForf_TabellHuvud
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellText(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallForf_TabellText
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellIndragNiva1(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoIndrag1ForfTabell
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellIndragNiva2(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoIndrag2ForfTabell
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellListaNiva1(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoLista1ForfTabell
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellListaNiva2(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoLista2ForfTabell
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellNot(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallForf_TabellNot
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellRubrikAllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallAllmRad_TabellRubrik
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellInfogaAllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoInsertTabellRad
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellHuvudAllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallAllmRad_TabellHuvud
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellTextAllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallAllmRad_TabellText
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellIndragNiva1AllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoIndrag1AllmRadTabell
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellIndragNiva2AllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoIndrag2AllmRadTabell
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellListaNiva1AllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoLista1AllmRadTabell
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellListaNiva2AllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoLista2AllmRadTabell
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellNotAllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallAllmRad_TabellNot
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellUtanLinjer(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoInsertNoLineTabell
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellToggleSpace(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoTableRowSpace
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Andringskantstreck(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoChangeToggleChangeBars
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BrytaKantstreck(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMall_BrytKantstreck
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10StreckUteblivenText(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoUtelamnadStreck
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10StreckTecken(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoListStreck
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BlanskstegTecken(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoHartBlanksteg
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Utgava(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallUtgava
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Forkortning(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallForkortning
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10UtkomFranTrycket(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallUtkom_FastText
    
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10utkomDatum(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallUtkom_Datum
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10UtkomOmtryck(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallUtkom_Datum_Omtryck
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Utgivare(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallUtgivare
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10titel(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallTitel
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TitelAndringsMarkering(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoTitelAndringsMarkering
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10TabellkolumnKantstreck(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMall_TabellStreck
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10ParagrafAllmRad(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoParagrafAllmRad
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BeslutsDatum(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallBeslutDatum
    
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BemyndigandeIndrag(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallBemyndigande_Indrag
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BemyndigandeDelsAtt(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoBemyndigandeDels
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10IkraftLinje(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoIkraftLinje
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10IkraftStycke(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Selection.Range.Style = CustMallarMain.cStrSMallIkraft_Stycke
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10PaMyndVagnar(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoPaXMyndighetensVagnar
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Underskrift(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoUnderskrift
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10KontraNamn(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoKontranamn
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10KontraOrg(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoKontraorg
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Dokumentinformation(ByVal control As IRibbonControl)
    On Error GoTo Err1
    IMPMetaDialog.SetFormFilled (True)
    Call DoEditMetadata
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Kontrollera(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoCheck
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10KontrolleraRubriker(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoCheckHeadings
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10SaveAsXML(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoSaveAsXML
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10SaveAsPDF(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoSaveAsPDF
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10AboutDocMarker(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoHelpAbout
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Settings(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoEditSettings
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10BBRSettings(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoEditBBRSettings
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10ClearAndringar(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoClearAndringar
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub
Public Sub Do10Footnote(ByVal control As IRibbonControl)
    On Error GoTo Err1
    Call DoFootnote
    Exit Sub
Err1:
    ImpMsg ("Kan ej anropa kommandot.")
End Sub


Attribute VB_Name = "IMPMetaDialog"
Attribute VB_Base = "0{4ED88585-F995-48A2-86B6-FB716E0B1CBB}{A7D1831E-9C11-4037-B6DF-3F2591C2042A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private bFormFilled As Boolean

Public bSkribentChanged As Boolean
Public bEnhetChanged As Boolean
Public bMyndighetChanged As Boolean
Public bUnderskriftChanged As Boolean
Public bSigneringChanged As Boolean
Public bUtgivareChanged As Boolean

Public bIssnChanged As Boolean
Public bTitelChanged As Boolean
Public bDiarienrChanged As Boolean
Public bRarNummerChanged As Boolean
Public bForfattningssamlingChanged As Boolean
Public bUtgavaChanged As Boolean
Public bForfattningstypChanged As Boolean
Public bGrundforfattningChanged As Boolean
Public bForkortningChanged As Boolean
Public bOmtryckChanged As Boolean
Public bBemyndigandeChanged As Boolean

Public bBeslutsdatumChanged As Boolean
Public bAndringsdatumChanged As Boolean
Public bTryckdatumChanged As Boolean
Public bIkraftdatumChanged As Boolean

Public bSokordChanged As Boolean
Public bKategoriChanged As Boolean
Public bForsakringsslagChanged As Boolean
Public bFleraNyckelOrdChanged As Boolean
Sub SetFormFilled(ByVal formFilled As Boolean)
    bFormFilled = formFilled
End Sub
Sub ResetChanged()
    bSkribentChanged = False
    bEnhetChanged = False
    bMyndighetChanged = False
    bUnderskriftChanged = False
    bSigneringChanged = False
    bForkortningChanged = False
    
    bDiarienrChanged = False
    bIssnChanged = False
    bTitelChanged = False
    bRarNummerChanged = False
    bForfattningssamlingChanged = False
    bUtgavaChanged = False
    bForfattningstypChanged = False
    bGrundforfattningChanged = False
    bUtgivareChanged = False
    bOmtryckChanged = False
    bBemyndigandeChanged = False
    
    bBeslutsdatumChanged = False
    bAndringsdatumChanged = False
    bTryckdatumChanged = False
    bIkraftdatumChanged = False
    
    bSokordChanged = False
    bKategoriChanged = False
    bForsakringsslagChanged = False
    bFleraNyckelOrdChanged = False
    
    

End Sub

Private Sub BrnPrev4_Click()
    IMPMetaDialog.MultiPage1.Value = 2
End Sub

Private Sub Btn3Canel_Click()
    Call btnCancel_Click
End Sub

Private Sub Btn3OK_Click()
    Call btnOk_Click
End Sub

Private Sub btnCancel_Click()
    'Check bFormFilled, if true do nothing, if false give message and return to form
    If (bFormFilled) Then
        IMPMetaDialog.Hide
    Else
        MsgBox ("Fyll i DokumentInfo f|fffd|r att skapa ett nytt dokument fr|fffd|n vald mall.")
    End If
End Sub

Private Sub btnBemyndigande_Click()
    IMPBemyndigandeDlg.SetData (tboxBemyndigande.text)
    IMPBemyndigandeDlg.Show
End Sub
Public Sub SetBemyndigande(strBemyndigande As String)
    tboxBemyndigande.text = strBemyndigande
End Sub

Private Sub BtnCancel4_Click()
    Call btnCancel_Click

End Sub

Private Sub BtnHelpGrund_Click()
    MsgBox ("Fyll i utg|fffd|van f|fffd|r grundf|fffd|rfattningen. En lista p|fffd| grundf|fffd|rfattningar finns p|fffd| Boverkets hemsida.")
End Sub

Private Sub BtnNext1_Click()
    IMPMetaDialog.MultiPage1.Value = 1
End Sub

Private Sub BtnNext2_Click()
    IMPMetaDialog.MultiPage1.Value = 2

End Sub

Private Sub btnOk_Click()
    'Spara |fffd|ndrade f|fffd|lt
    Call IMPMetaMain.GetMetaDialog(1)
    bFormFilled = True
End Sub

Private Sub BtnPrev2_Click()
    IMPMetaDialog.MultiPage1.Value = 0

End Sub

Private Sub BtnPrev3_Click()
    IMPMetaDialog.MultiPage1.Value = 1

End Sub

Private Sub CBoxDocStatus_Click()
End Sub

Private Sub CBoxKategori1_Change()
     bKategoriChanged = True
End Sub

Private Sub CBoxKategori2_Change()
     bKategoriChanged = True
End Sub

Private Sub CBoxKategori3_Change()
     bKategoriChanged = True
End Sub

Private Sub CBoxKategori4_Change()
     bKategoriChanged = True
End Sub

Private Sub CBoxKategori5_Change()
     bKategoriChanged = True
End Sub

Private Sub CBoxKategori6_Change()
     bKategoriChanged = True
End Sub


Private Sub CbutAddFleraSokOrd_Click()
    If (TBoxFleraNyckelOrd.text <> "") Then
        intMax = LBoxFleraNyckelOrd.ListCount
        boolAddValue = True
        For intI = 1 To intMax
            If (TBoxFleraNyckelOrd.text = LBoxFleraNyckelOrd.List(intI - 1)) Then
                boolAddValue = False
                Exit For
            End If
        Next intI
        If (boolAddValue = True) Then
              bFleraNyckelOrdChanged = True
              LBoxFleraNyckelOrd.AddItem (TBoxFleraNyckelOrd.text)
              TBoxFleraNyckelOrd.text = ""
        End If
    End If
End Sub

Private Sub CButForsakringslagAdd_Click()
   
    If (LBoxForsakringsslagKvar.ListIndex >= 0) Then
        Dim strItem As String
        bForsakringsslagChanged = True
        strItem = LBoxForsakringsslagKvar.List(LBoxForsakringsslagKvar.ListIndex)
        DoAddForsakringslag (strItem)
    End If
End Sub

Private Sub CButRemoveFleraNyckelord_Click()
    If (LBoxFleraNyckelOrd.ListIndex >= 0) Then
        Dim strItem As String
        bFleraNyckelOrdChanged = True
        strItem = LBoxFleraNyckelOrd.List(LBoxFleraNyckelOrd.ListIndex)
        DoDeleteFleraNyckelOrd (strItem)
        If (TBoxFleraNyckelOrd.text = "") Then TBoxFleraNyckelOrd.text = strItem
    End If
End Sub

Private Sub CButSokordAdd_Click()
    If (LBoxSokordKvar.ListIndex >= 0) Then
        bSokordChanged = True
        Dim strItem As String
        strItem = LBoxSokordKvar.List(LBoxSokordKvar.ListIndex)
        If (HasString(strItem, "->")) Then
        'If (strItem = "L|fffd|gg till denna rad f|fffd|r eget uppslagsord ->") Then
            strItem = InputBox("Skriv in s|fffd|kordet", "Eget s|fffd|kord")
            If (strItem <> "") Then LBoxSokord.AddItem (strItem)
        Else
            DoAddSokord (strItem)
        End If
    End If
End Sub

Private Sub CButSokordDelete_Click()
    If (LBoxSokord.ListIndex >= 0) Then
        bSokordChanged = True
        Dim strItem As String
        strItem = LBoxSokord.List(LBoxSokord.ListIndex)
        DoDeleteSokord (strItem)
    End If
End Sub

Private Sub CmbDocStatus_Change()
    bDocStatusChanged = True
End Sub

Private Sub CButTaBortForsakringslag_Click()
    If (LBoxForsakringsslag.ListIndex >= 0) Then
        bForsakringsslagChanged = True
        Dim strItem As String
        strItem = LBoxForsakringsslag.List(LBoxForsakringsslag.ListIndex)
        'DoDeleteSokord (strItem)
        DoDeleteForsakringsslag (strItem)
    End If
End Sub


Private Sub CommandButton1_Click()
    Call btnCancel_Click
End Sub


Private Sub CommandButton2_Click()
    Call btnCancel_Click
End Sub

Private Sub CommandButton3_Click()
    Call btnOk_Click
End Sub

Private Sub LBoxFleraNyckelOrd_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call CButRemoveFleraNyckelord_Click
End Sub

Private Sub LBoxForsakringsslag_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call CButTaBortForsakringslag_Click

End Sub

Private Sub LBoxForsakringsslagKvar_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call CButForsakringslagAdd_Click
End Sub

Private Sub Frame3_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    'MsgBox ("Exit frame3")
    'TBoxForkortning.Text = UCase(TBoxForkortning.Text)
End Sub

Private Sub FrameForftyp_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    'MsgBox ("Exit FrameForftyp")
End Sub

Private Sub LBoxSokord_Click()
    bSokordChanged = True
End Sub

Private Sub LBoxSokord_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call CButSokordDelete_Click
End Sub

Private Sub LBoxSokordKvar_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call CButSokordAdd_Click
End Sub

Private Sub MultiPage1_Change()
    If (IMPMetaDialog.MultiPage1.Value = 0) Then
        IMPMetaDialog.BtnNext1.default = True
    End If
    If (IMPMetaDialog.MultiPage1.Value = 1) Then
        IMPMetaDialog.BtnNext2.default = True
    End If
    If (IMPMetaDialog.MultiPage1.Value = 2) Then
        IMPMetaDialog.Btn3OK.default = True
    End If
End Sub



Private Sub OptBtnAndringsforfattning_Click()
    bForfattningstypChanged = True
    FrameGrundRef.Visible = True
End Sub


Private Sub OptBtnGrundforfattning_Click()
    bForfattningstypChanged = True
    FrameGrundRef.Visible = False
    Call UpdateGrundRefIfIsGrund
End Sub
Sub UpdateGrundRefIfIsGrund()
    If (Me.OptBtnAndringsforfattning.Value = False) Then
        Me.TBoxGrundNr.text = Me.TBoxUtgavaNummer.text
        Me.TBoxGrundYear.text = Me.TBoxUtgavaYear.text
        bGrundforfattningChanged = True
    End If

End Sub

Private Sub OptBtnNyttAR_Click()
    bForfattningstypChanged = True
    FrameGrundRef.Visible = True
    Call UpdateGrundRefIfIsGrund

End Sub
Private Sub OptBtnAndratAR_Click()
    bForfattningstypChanged = True
    FrameGrundRef.Visible = True
    Call UpdateGrundRefIfIsGrund

End Sub

Private Sub radOmtryckJa_Click()
    bOmtryckChanged = True
End Sub

Private Sub radOmtryckNej_Click()
    bOmtryckChanged = True

End Sub

Private Sub TBoxAndringsdatum_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    msgRes = MsgBox("Vill du s|fffd|tta metadata |fffd|ndringsdatum till dagens datum?", vbOKCancel, "|fffd|ndringsdatum")
    If (msgRes = vbOK) Then
        TBoxAndringsdatum.text = Format(Date, "yyyy-mm-dd")
    End If
    
End Sub

Private Sub TBoxBeskrivning_Change()
    bBeskrivningChanged = True
End Sub

Private Sub TBoxAndringsdatum_Change()
    bAndringsdatumChanged = True

End Sub

Private Sub tboxBemyndigande_Change()
    bBemyndigandeChanged = True
End Sub

Private Sub TBoxBeslutandechef_Change()
    bBeslutandeChefChanged = True
End Sub

Private Sub TBoxBeslutsdatum_Change()
    bBeslutsdatumChanged = True

End Sub

Private Sub TBoxBeslutsdatum_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    msgRes = MsgBox("Vill du s|fffd|tta Beslutsdatum till dagens datum?", vbOKCancel, "|fffd|ndringsdatum")
    If (msgRes = vbOK) Then
        TBoxBeslutsdatum.text = Format(Date, "yyyy-mm-dd")
    End If

End Sub

Private Sub TBoxEnhet_Change()
    bEnhetChanged = True

End Sub

Private Sub TBoxEpost_Change()
    bEpostChanged = True

End Sub

Private Sub TBoxGata_Change()
    bGataChanged = True

End Sub



Private Sub TBoxErsatterVglNr_Change()
    bErsatterVglNrChanged = True
End Sub

Private Sub TBoxErsattsAvVglNr_Change()
  bErsattsAvVglNrChanged = True
End Sub

Private Sub TBoxForfattningssamling_Change()
    bForfattningssamlingChanged = True
End Sub

Private Sub TBoxForkortning_Change()
    bForkortningChanged = True
    If (IMPFunction.ImpMid(TBoxForkortning.text, 1, 3) = "BBR") Then
        Call IMPCheckMain.SetDocVariabelAsBoolean(cNumBBRDocVar, True)
    End If
    
    'MsgBox ("Fyll i grundf|fffd|rfattningen")
End Sub


Private Sub TBoxForkortning_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    'MsgBox ("Exit F|fffd|rkortning")
    'TBoxForkortning.Text = UCase(TBoxForkortning.Text)
End Sub

Private Sub TBoxGrundNr_Change()
    bGrundforfattningChanged = True

End Sub

Private Sub TBoxGrundYear_Change()
    bGrundforfattningChanged = True
End Sub

Private Sub TBoxIkraftdatum_Change()
    bIkraftdatumChanged = True

End Sub

Private Sub TBoxIkraftdatum_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    msgRes = MsgBox("Vill du s|fffd|tta Ikraftdatum till dagens datum?", vbOKCancel, "Ikraftdatum")
    If (msgRes = vbOK) Then
        TBoxIkraftdatum.text = Format(Date, "yyyy-mm-dd")
    End If

End Sub

Private Sub TBoxMyndighet_Change()
    bMyndighetChanged = True
End Sub

Private Sub TBoxRARnrNummer_Change()
    bRarNummerChanged = True

End Sub

Private Sub TBoxRARnrYear_Change()
    bRarNummerChanged = True

End Sub

Private Sub TBoxSignering_Change()
    bSigneringChanged = True
End Sub

Private Sub TBoxSkribent_Change()
    bSkribentChanged = True
End Sub

Private Sub TBoxLopnummer_Change()
    bLopnummerChanged = True

End Sub

Private Sub TBoxPostadress_Change()
    bPostadressChanged = True

End Sub


Private Sub TBoxTelefon_Change()
    bTelefonChanged = True

End Sub

Private Sub TBoxTitel_Change()
    bTitelChanged = True

End Sub

Private Sub TBoxDiarienr_Change()
    bDiarienrChanged = True
End Sub

'***************** Konversions *********************
Sub SetUsedDocStatusFromStr(inStrDocStatus As String)
    'If (cStrPropDocStatus_Arbetskopia = inStrDocStatus) Then
    '    IMPMetaDialog.CBoxDocStatus.Value = True
    'Else
    '    IMPMetaDialog.CBoxDocStatus.Value = False
    'End If
    CmbDocStatus.Clear
    CmbDocStatus.AddItem (cStrPropDocStatus_Utkast)
    CmbDocStatus.AddItem (cStrPropDocStatus_Arbetskopia)
    CmbDocStatus.AddItem (cStrPropDocStatus_Godkand)
    CmbDocStatus.AddItem (cStrPropDocStatus_Publish)
    
    If (inStrDocStatus = cStrPropDocStatus_Utkast) Then CmbDocStatus.ListIndex = 0
    If (inStrDocStatus = cStrPropDocStatus_Arbetskopia) Then CmbDocStatus.ListIndex = 1
    If (inStrDocStatus = cStrPropDocStatus_Godkand) Then CmbDocStatus.ListIndex = 2
    If (inStrDocStatus = cStrPropDocStatus_Publish) Then CmbDocStatus.ListIndex = 3
    
    
End Sub
Sub SetUsedKategoriFromStr(inStrKategori As String)
    'CBoxKategori.Clear
    Dim intCount As Long
    intCount = StrToInt(CustExternData.GetKategori(0))
    Dim intI As Long
    
    'Sl|fffd|ck alla checkboxar
    CBoxKategori1.Visible = False
    CBoxKategori2.Visible = False
    CBoxKategori3.Visible = False
    CBoxKategori4.Visible = False
    CBoxKategori5.Visible = False
    CBoxKategori6.Visible = False
    
    
    'S|fffd|tt rubrikerna
    For intI = 1 To intCount
        Dim strItem As String
        strItem = CustExternData.GetKategori(intI)
        'CBoxKategori.AddItem (strItem)
        Select Case intI
            Case 1: CBoxKategori1.Caption = strItem
                    CBoxKategori1.Visible = True
            Case 2: CBoxKategori2.Caption = strItem
                    CBoxKategori2.Visible = True
            Case 3: CBoxKategori3.Caption = strItem
                    CBoxKategori3.Visible = True
            Case 4: CBoxKategori4.Caption = strItem
                    CBoxKategori4.Visible = True
            Case 5: CBoxKategori5.Caption = strItem
                    CBoxKategori5.Visible = True
            Case 6: CBoxKategori6.Caption = strItem
                    CBoxKategori6.Visible = True
         End Select
        
            
        If (InStr(inStrKategori, strItem) <> 0) Then
            Select Case intI
            Case 1: CBoxKategori1.Value = True
            Case 2: CBoxKategori2.Value = True
            Case 3: CBoxKategori3.Value = True
            Case 4: CBoxKategori4.Value = True
            Case 5: CBoxKategori5.Value = True
            Case 6: CBoxKategori6.Value = True
         End Select
        End If
        
        
    Next intI
    
End Sub
Sub SetUsedSokordFromStr(inStrSokord As String)

    'Fyll den h|fffd|gra listboxen
    IMPMetaDialog.LBoxSokordKvar.Clear
    Dim intCount As Long
    intCount = StrToInt(CustExternData.GetSokord(0))
    Dim intI As Long
    For intI = 1 To intCount
        Dim strItem As String
        strItem = CustExternData.GetSokord(intI)
        If (strItem <> "none") Then
            LBoxSokordKvar.AddItem (strItem)
        End If
    Next intI
    
    
    'Flytta |fffd|ver de som finns i s|fffd|kordstr|fffd|ngen
    IMPMetaDialog.LBoxSokord.Clear

    Dim strTry As String
    strTry = inStrSokord
    
    Dim intPos As Long
    intPos = ImpPos(strTry, ", ")
    
    ResetSafeWhile (20)
    While (intPos > 0 And SafeWhile(20))
        Dim strNew As String
        strNew = ImpMid(strTry, 1, intPos - 1)
        IMPMetaDialog.DoAddSokord (strNew)
        strTry = ImpMid(strTry, intPos + 2)
        'N|fffd|sta varv
        intPos = ImpPos(strTry, ", ")
    Wend
    IMPMetaDialog.DoAddSokord (strTry)
End Sub





Sub DoAddSokord(inStrItem As String)
    If (inStrItem = "") Then Exit Sub
    If (LBoxSokord.ListCount >= 99) Then
        Call MsgBox("Antalet s|fffd|kord |fffd|r maximerat till 99 stycken.", vbExclamation, "S|fffd|kord")
        Exit Sub
    End If
    'G|fffd| igenom h|fffd|gra och flytta |fffd|ver om tr|fffd|ff
    Dim intCount As Long
    intCount = LBoxSokordKvar.ListCount
    Dim intI As Long
    For intI = 1 To intCount
        Dim strItem As String
        strItem = LBoxSokordKvar.List(intI - 1)
        If (strItem = inStrItem) Then
            LBoxSokordKvar.RemoveItem (intI - 1)
            Exit For
        End If
    Next intI
    
    LBoxSokord.AddItem (inStrItem)
End Sub

Sub DoAddForsakringslag(inStrItem As String)
    If (inStrItem = "") Then Exit Sub
    If (LBoxForsakringsslag.ListCount >= 3) Then
        Call MsgBox("Antalet f|fffd|rs|fffd|kringsslag |fffd|r maximerat till 3 stycken.", vbExclamation, "S|fffd|kord")
        Exit Sub
    End If
    'G|fffd| igenom h|fffd|gra och flytta |fffd|ver om tr|fffd|ff
    Dim intCount As Long
    intCount = LBoxForsakringsslagKvar.ListCount
    Dim intI As Long
    For intI = 1 To intCount
        Dim strItem As String
        strItem = LBoxForsakringsslagKvar.List(intI - 1)
        If (strItem = inStrItem) Then
            LBoxForsakringsslagKvar.RemoveItem (intI - 1)
            Exit For
        End If
    Next intI
    
    LBoxForsakringsslag.AddItem (inStrItem)
End Sub

Sub DoDeleteFleraNyckelOrd(inStrItem As String)
    If (inStrItem = "") Then Exit Sub
    'G|fffd| igenom v|fffd|nstra
    Dim intCount As Long
    intCount = LBoxFleraNyckelOrd.ListCount
    Dim intI As Long
    For intI = 1 To intCount
        Dim strItem As String
        strItem = LBoxFleraNyckelOrd.List(intI - 1)
        If (strItem = inStrItem) Then
            LBoxFleraNyckelOrd.RemoveItem (intI - 1)
            Exit For
        End If
    Next intI
    
End Sub

Sub DoDeleteSokord(inStrItem As String)
    If (inStrItem = "") Then Exit Sub
    'G|fffd| igenom v|fffd|nstra och flytta |fffd|ver om tr|fffd|ff
    Dim intCount As Long
    intCount = LBoxSokord.ListCount
    Dim intI As Long
    For intI = 1 To intCount
        Dim strItem As String
        strItem = LBoxSokord.List(intI - 1)
        If (strItem = inStrItem) Then
            LBoxSokord.RemoveItem (intI - 1)
            Exit For
        End If
    Next intI
    
    LBoxSokordKvar.AddItem (inStrItem)
End Sub

Sub DoDeleteForsakringsslag(inStrItem As String)
    If (inStrItem = "") Then Exit Sub
    'G|fffd| igenom v|fffd|nstra och flytta |fffd|ver om tr|fffd|ff
    Dim intCount As Long
    intCount = LBoxForsakringsslag.ListCount
    Dim intI As Long
    For intI = 1 To intCount
        Dim strItem As String
        strItem = LBoxForsakringsslag.List(intI - 1)
        If (strItem = inStrItem) Then
            LBoxForsakringsslag.RemoveItem (intI - 1)
            Exit For
        End If
    Next intI
    
    LBoxForsakringsslagKvar.AddItem (inStrItem)
End Sub

Function GetUsedDocStatusToStr() As String
    Dim strRes As String
    strRes = ""
    'If (IMPMetaDialog.CBoxDocStatus.Value = True) Then
    '    strRes = cStrPropDocStatus_Arbetskopia
    'Else
    '    strRes = cStrPropDocStatus_Orginal
    'End If
    If (CmbDocStatus.ListIndex >= 0) Then
        strRes = CmbDocStatus.List(CmbDocStatus.ListIndex)
    End If
    
    GetUsedDocStatusToStr = strRes
End Function

Function GetUsedForsakringsslag() As String
    Dim strRes As String
    strRes = ""
    
    Dim intCount As Long
    intCount = LBoxForsakringsslag.ListCount
    Dim intI As Long
    For intI = 1 To intCount
        Dim strItem As String
        strItem = LBoxForsakringsslag.List(intI - 1)
        If (strRes = "") Then
            strRes = strItem
        Else
            strRes = strRes & ", " & strItem
        End If
    Next intI
    GetUsedForsakringsslag = strRes
End Function



Function GetUsedKategoriToStr() As String

    Dim intCount As Long
    intCount = StrToInt(CustExternData.GetKategori(0))
    Dim intI As Long
    Dim strRes As String
    strRes = ""
    
    For intI = 1 To intCount
        Dim strItem As String
        Dim booleanIsSelected As Boolean
        booleanIsSelected = False
        
        Select Case intI
            Case 1:
                    strItem = CBoxKategori1.Caption
                    booleanIsSelected = CBoxKategori1.Value
            Case 2:
                    strItem = CBoxKategori2.Caption
                    booleanIsSelected = CBoxKategori2.Value
            Case 3:
                    strItem = CBoxKategori3.Caption
                    booleanIsSelected = CBoxKategori3.Value
            Case 4:
                    strItem = CBoxKategori4.Caption
                    booleanIsSelected = CBoxKategori4.Value
            Case 5:
                    strItem = CBoxKategori5.Caption
                    booleanIsSelected = CBoxKategori5.Value
            Case 6:
                    strItem = CBoxKategori6.Caption
                    booleanIsSelected = CBoxKategori6.Value
         End Select
         
         If (booleanIsSelected = True) Then
         
             If (strRes = "") Then
                    strRes = strItem
            Else
                    strRes = strRes & ", " & strItem
            End If
         End If
     Next intI
 
    GetUsedKategoriToStr = strRes
End Function


Function GetUsedSokordToStr(intIdx As Long) As String
    Dim strRes As String
    strRes = ""
    
    Dim intCount As Long
    intCount = LBoxSokord.ListCount
    Dim intI As Long
    For intI = 1 To intCount
        Dim strItem As String
        strItem = LBoxSokord.List(intI - 1)
        If (strRes = "") Then
            strRes = strItem
        Else
            strRes = strRes & ", " & strItem
        End If
    Next intI
    'MsgBox (strRes)
    If (intIdx = 1) Then strRes = ImpMid(strRes, 1, 199)
    If (intIdx = 2) Then strRes = ImpMid(strRes, 200, 399)
    If (intIdx = 3) Then strRes = ImpMid(strRes, 400, 599)
    If (intIdx = 4) Then strRes = ImpMid(strRes, 600, 799)
    GetUsedSokordToStr = strRes
End Function


Function GetUsedFleraNyckelOrdToStr() As String
    Dim strRes As String
    strRes = ""
    
    Dim intCount As Long
    intCount = LBoxFleraNyckelOrd.ListCount
    Dim intI As Long
    For intI = 1 To intCount
        Dim strItem As String
        strItem = LBoxFleraNyckelOrd.List(intI - 1)
        If (strRes = "") Then
            strRes = strItem
        Else
            strRes = strRes & ", " & strItem
        End If
    Next intI
    GetUsedFleraNyckelOrdToStr = strRes
End Function
Function GetRARnrAsString() As String
    Dim strRes As String
    strRes = ""
    
    strRes = "RAR " & TBoxRARnrYear.text & ":" & TBoxRARnrNummer.text

    GetRARnrAsString = strRes
End Function


Private Sub TBoxTryckdatum_Change()
    bTryckdatumChanged = True

End Sub

Private Sub TBoxTryckdatum_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    msgRes = MsgBox("Vill du s|fffd|tta Tryckdatum till dagens datum?", vbOKCancel, "|fffd|ndringsdatum")
    If (msgRes = vbOK) Then
        TBoxTryckdatum.text = Format(Date, "yyyy-mm-dd")
    End If
End Sub

Private Sub TBoxUtgava_Change()
    bRarNummerChanged = True
End Sub

Private Sub TBoxUnderskrift_Change()
    bUnderskriftChanged = True
End Sub

Private Sub TBoxUnderskrift_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    'MsgBox ("Exit underskrift")
    TBoxUnderskrift.text = UCase(TBoxUnderskrift.text)
End Sub

Private Sub TBoxUtgavaNummer_Change()
    bUtgavaChanged = True
    Call UpdateGrundRefIfIsGrund
End Sub

Private Sub TBoxUtgavaYear_Change()
    bUtgavaChanged = True
    Call UpdateGrundRefIfIsGrund
End Sub

Private Sub TBoxUtgivare_Change()
    bUtgivareChanged = True
End Sub

Private Sub TextBoxISSN_Change()
    bIssnChanged = True

End Sub

Function SetUtgavaFromStr(inStrUtgava As String)
    'indata = KIFS 2003:18
    Dim strKifs As String
    Dim strYYYY As String
    Dim strNN As String
    strKifs = CustMeta.GetForkortningStr
    strYYYY = CustMeta.GetYYYYStr
    strNN = CustMeta.GetnnStr
    
    TBoxUtgavaYear.text = strYYYY
    TBoxUtgavaNummer.text = strNN
End Function
Function GetUtgavaToStr() As String
    Dim strRes As String
    strRes = "BFS " & TBoxUtgavaYear.text & ":" & TBoxUtgavaNummer.text
    GetUtgavaToStr = strRes
End Function
Function SetForfattningstypFromStr(inStrForfattningstyp As String)
    If (IMPFunction.EqualLegalName(inStrForfattningstyp, CustMeta.cStrPropForfattningstyp_Grund)) Then
        Me.OptBtnGrundforfattning.Value = True
    ElseIf (IMPFunction.EqualLegalName(inStrForfattningstyp, CustMeta.cStrPropForfattningstyp_Andring)) Then
        Me.OptBtnAndringsforfattning.Value = True
    ElseIf (IMPFunction.EqualLegalName(inStrForfattningstyp, CustMeta.cStrPropForfattningstyp_NyttAR)) Then
        Me.OptBtnNyttAR.Value = True
    ElseIf (IMPFunction.EqualLegalName(inStrForfattningstyp, CustMeta.cStrPropForfattningstyp_AndratAR)) Then
        Me.OptBtnAndratAR.Value = True
    End If

End Function
Function GetForfattningstypToStr() As String
    Dim strRes As String
    strRes = ""
    If (Me.OptBtnGrundforfattning.Value = True) Then
        strRes = CustMeta.cStrPropForfattningstyp_Grund
    ElseIf (Me.OptBtnAndringsforfattning.Value = True) Then
        strRes = CustMeta.cStrPropForfattningstyp_Andring
    ElseIf (Me.OptBtnNyttAR.Value = True) Then
        strRes = CustMeta.cStrPropForfattningstyp_NyttAR
    ElseIf (Me.OptBtnAndratAR.Value = True) Then
        strRes = CustMeta.cStrPropForfattningstyp_AndratAR
    End If
    GetForfattningstypToStr = strRes
End Function
Function SetGrundforfattningFromStr(inStrGrundforfattning As String)
    'indata = KIFS 1998:8
    Dim strKifs As String
    Dim strYYYY As String
    Dim strNN As String
    strKifs = CustMeta.GetForkortningStr(inStrGrundforfattning)
    strYYYY = CustMeta.GetYYYYStr(inStrGrundforfattning)
    strNN = CustMeta.GetnnStr(inStrGrundforfattning)
    
    Me.TBoxGrundYear.text = strYYYY
    Me.TBoxGrundNr.text = strNN
    
End Function
Function GetGrundforfattningToStr() As String
    Dim strRes As String
    strRes = "BFS " & TBoxGrundYear.text & ":" & TBoxGrundNr.text
    
    If (Me.OptBtnGrundforfattning.Value = True) Then
        strRes = Me.GetUtgavaToStr
    End If
    GetGrundforfattningToStr = strRes
    
End Function
Function SetOmtryckFromStr(inStrOmtryck As String)
    If (inStrOmtryck = "") Then
        Me.radOmtryckJa.Value = False
    Else
        Me.radOmtryckJa.Value = True
    End If
End Function
Function GetOmtryckToStr() As String
    Dim strRes As String
    strRes = ""
    If (Me.radOmtryckJa.Value) Then
        strRes = GetGrundforfattningToStr()
    End If
    GetOmtryckToStr = strRes
End Function
Function SetTryckdatumFromStr(inStrTryckdatum As String)
    Me.TBoxTryckdatum.text = dMMMMyyyyToyyyymmdd(inStrTryckdatum)

End Function
Function SetBeslutsdatumFromStr(inStrBeslutsdatum As String)
    Me.TBoxBeslutsdatum.text = dMMMMyyyyToyyyymmdd(inStrBeslutsdatum)
End Function
Function GetTryckdatumToStr() As String
    GetTryckdatumToStr = CustMeta.yyyymmddTodMMMMyyyy(Me.TBoxTryckdatum.text)
End Function
Function GetBeslutsdatumToStr() As String
    GetBeslutsdatumToStr = CustMeta.yyyymmddTodMMMMyyyy(Me.TBoxBeslutsdatum.text)
End Function
Function SetIkraftdatumFromStr(inStrIkraftdatum As String)
    Me.TBoxIkraftdatum.text = dMMMMyyyyToyyyymmdd(inStrIkraftdatum)
End Function
Function GetIkraftdatumToStr() As String
    GetIkraftdatumToStr = CustMeta.yyyymmddTodMMMMyyyy(Me.TBoxIkraftdatum.text)
End Function

Attribute VB_Name = "IMPMetaMain"
'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16




'|fffd|vriga
Public Const cStrPropDocInit = "DocInit"
Public Const cStrPropDocStatus = "DocStatus"


'V|fffd|rden
Public Const cStrPropDocStatus_Utkast = "Utkast" 'n=1
Public Const cStrPropDocStatus_SkribentStart = "SkribentStart" 'n=2
Public Const cStrPropDocStatus_SkribentSlut = "SkribentSlut" 'n=3
Public Const cStrPropDocStatus_AdminSlut = "AdminSlut" 'n=4
Public mLastStatusAsInt As Long

Public Const cStrPropDocInit_No = "No"
Public Const cStrPropDocInit_Yes = "Yes"

'MallArray
Public mParaDoc As ParaDoc
'Public Const HeaderIdx = wdHeaderFooterPrimary
Public Const HeaderIdx = wdHeaderFooterFirstPage
'Public Const HeaderIdx = wdHeaderFooterEvenPages

Public strSelMap As String
Public strSelFile As String



'******************* Prop funktioner **********************
Function GetDefPropValue(inPropName As String) As String
    'Skapar defaultv|fffd|rden
    Dim strRes As String
    strRes = "ej definerad"
    On Error GoTo Err1
    strRes = CustMeta.GetDefPropValue(inPropName)
        
Err1:
    GetDefPropValue = strRes
End Function
Function GetPropValue(inPropName As String)
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    Dim bFound As Boolean
    bFound = False
    
    Dim strLegInPropName As String
    strLegInPropName = GetLegalName(inPropName)
    
    'H|fffd|mta v|fffd|rden fr|fffd|n DocCustomProperties
    Dim aProp As DocumentProperty
    For Each aProp In ImpDoc.CustomDocumentProperties
        Dim strLegPropName As String
        strLegPropName = GetLegalName(aProp.Name)
        If (strLegPropName = strLegInPropName) Then
            strRes = aProp.Value
            bFound = True
            Exit For
        End If
    Next

    'Fanns inte v|fffd|rdet, s|fffd| l|fffd|gg in ett default v|fffd|rde
    If (bFound = False) Then
        strRes = GetDefPropValue(inPropName)
        Call SetPropValue(inPropName, strRes)
    End If
    
Err1:
    GetPropValue = strRes

End Function
Function SetPropValue(inPropName As String, inPropValue As String, Optional bUpdateDat As Boolean = False)
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = True
    
    Dim bFound As Boolean
    bFound = False
    
    Dim strLegInPropName As String
    strLegInPropName = GetLegalName(inPropName)

    'Leta upp och |fffd|ndra v|fffd|rdet
    For Each aProp In ImpDoc.CustomDocumentProperties
        Dim strLegPropName As String
        strLegPropName = GetLegalName(aProp.Name)
        If (strLegPropName = strLegInPropName) Then
            bFound = True
            If (aProp.LinkToContent = False) Then
                aProp.Value = inPropValue
                'MsgBox (aProp.Value)
            Else
                ImpMsg (inPropName & " |fffd|r l|fffd|nkad till dokumentet, kan ej s|fffd|tta v|fffd|rdet.")
            End If
        End If
    Next
    
    On Error GoTo Error2
    'L|fffd|gg till ny med r|fffd|tt v|fffd|rde
    If (bFound = False) Then
        ImpDoc.CustomDocumentProperties.Add _
        Name:=inPropName, LinkToContent:=False, Value:=inPropValue, _
        Type:=msoPropertyTypeString
    End If
    
    On Error GoTo Error3
        
    'Inbyggda v|fffd|rden
    
    Call CustMeta.SetBuiltInProp(inPropName, inPropValue)
    

    If (bUpdateDat) Then
        Call SetTextToDat(inPropName, inPropValue)
    End If

    SetPropValue = bRes
    Exit Function
    
Error1:
    ImpMsg ("Kan ej s|fffd|tta v|fffd|rdet p|fffd| egenskapen " & inPropName & ".")
    Exit Function
Error2:
    ImpMsg ("Kan ej l|fffd|gga till egenskapen " & inPropName & ".")
    Exit Function
Error3:
    ImpMsg ("Kan ej s|fffd|tta v|fffd|rdet p|fffd| inbyggda egenskapen " & inPropName & ".")
    
End Function
'******************** Metadata dialogen ****************
Sub FillMetaFromProp()
'Fyll i dialogen fr|fffd|n Properties
    On Error GoTo Err1
    Call CustMeta.FillMetaFromProp
    Exit Sub
Err1:
    MsgBox ("Kan ej s|fffd|tta dokumentinformation fr|fffd|n egenskaper")
End Sub

Sub FillPropFromMeta()
    'Fyll i properties fr|fffd|n Dialog
    On Error GoTo Err1
    Call CustMeta.FillPropFromMeta
    Exit Sub
Err1:
    MsgBox ("Kan ej s|fffd|tta egenskaper fr|fffd|n dokumentinformation")
    
End Sub
Sub SetMetaDialog(Optional inDlgNr As Long = 1)
    'Initiera MetaDialogen med r|fffd|tt v|fffd|rden
    On Error GoTo Err1
    'Call L|fffd|sAv
    If (CustSection.GetIsCompleteBFS = False) Then
        ImpMsg ("'Annorlunda f|fffd|rstasida' p|fffd| utskriftsformat |fffd|r inte markerat, dokumentet klassas d|fffd|rf|fffd|r som en del av en f|fffd|reskrift." & Chr(13) & "Du skall d|fffd|rf|fffd|r inte s|fffd|tta dokumentinformation p|fffd| detta dokument.")
        Exit Sub
    End If
    
    Call FillMallArray
    Call FillPropFromDoc
    Call InitMetaDialog
    Call FillMetaFromProp
    
    IMPMetaDialog.ResetChanged
    'IMPBilagorDlg.ResetChanged
    
    If (inDlgNr = 1) Then 'Meta Wizard
        If (GetPropValue(cStrPropDocInit) = cStrPropDocInit_No) Then
        End If
        IMPMetaDialog.MultiPage1.Value = 0
        IMPMetaDialog.Show
    End If
    If (inDlgNr = 2) Then 'Ers|fffd|tt
        IMPMetaDialog.MultiPage1.Value = 3
        IMPMetaDialog.Show
    End If
Err1:
    'Call L|fffd|sP|fffd|
End Sub
Sub GetMetaDialog(inDlgNr As Long)
    'H|fffd|mtar v|fffd|rden fr|fffd|n Dialog och fyller p|fffd| prop och doc
    On Error GoTo Err1
    Call FillPropFromMeta
    Call FillDocFromProp
        
    If (inDlgNr = 1) Then
        IMPMetaDialog.Hide
        
        If (GetPropValue(cStrPropDocInit) = cStrPropDocInit_No) Then
            Call SetPropValue(cStrPropDocInit, cStrPropDocInit_Yes)
        End If
    End If
    If (inDlgNr = 2) Then
        IMPMetaDialog.Hide
        'IMPBilagorDlg.Hide
    End If
    Exit Sub
Err1:
    MsgBox ("Kan ej h|fffd|mta v|fffd|rden fr|fffd|n dokumentinformation")

End Sub


Sub InitMetaDialog()
    
End Sub
'******************** Dokumentet ****************
Sub FillPropFromDoc()
    On Error GoTo Err1
    Call CustMeta.FillPropFromDoc
    Exit Sub
Err1:
    MsgBox ("Kan ej h|fffd|mta v|fffd|rden fr|fffd|n dokument och s|fffd|tta i egenskaper")
End Sub

Sub FillDocFromProp()
    On Error GoTo Err1
    Application.ScreenUpdating = False
        
    Call CustMeta.FillDocFromProp
    
    Application.ScreenUpdating = True
     Exit Sub
Err1:
    MsgBox ("Kan ej h|fffd|mta v|fffd|rden fr|fffd|n egenskaper och s|fffd|tta i dokument")
   
End Sub

Function GetTextFromDocSearch(inStrMall As String, ByRef outStrText As String) As Boolean
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
    outStrText = ""
    
    Dim intStart As Long
    Dim intEnd As Long
    Dim aRange As Range
    If (FindMallRange(inStrMall, intStart, intEnd)) Then
        bRes = True
        Set aRange = ImpDoc.Paragraphs(1).Range
        Call aRange.SetRange(intStart, intEnd)
        outStrText = aRange.Paragraphs(1).Range.text
        outStrText = Trim(outStrText)
        outStrText = TrimFromWord(outStrText)
    End If
    
    
    GetTextFromDocSearch = bRes
    Exit Function
    
Error1:
    ImpMsg ("Kan ej h|fffd|mta texten fr|fffd|n mallen " & inStrMall & " i dokumentet.")
    GetTextFromDocSearch = False
    Exit Function

End Function

Function GetTextFromDocNew(inStrMall As String, ByRef outStrText As String) As Boolean
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
    outStrText = ""
    
    Dim aPart As Long
    Dim aParaIdx As Long
    Dim aPara As Paragraph
    Dim Re As RegExp
    Dim Matches
    If (mParaDoc.GetIdxStyleName(inStrMall, aPart, aParaIdx)) Then
        bRes = True
        If (aPart = 1) Then
            'Huvuddokumentet
            Set aPara = ImpDoc.Paragraphs(aParaIdx)
            outStrText = aPara.Range.text
        End If
        If (aPart = 2) Then
            'Headern
            Set aPara = ImpDoc.Sections(1).Headers(HeaderIdx).Range.Paragraphs(aParaIdx)
            outStrText = aPara.Range.text
        End If
        If (aPart = 3) Then
            'Headern
            Set aPara = ImpDoc.Sections(1).Footers(HeaderIdx).Range.Paragraphs(aParaIdx)
            outStrText = aPara.Range.text
        End If
    End If
    'Specialfall f|fffd|r Ikraftdatum
    For i = ImpDoc.Paragraphs.Count To 1 Step -1
        If (ImpDoc.Paragraphs(i).Style = "BFS-Ikraft-Stycke") Then
            If (Len(Trim(ImpDoc.Paragraphs(i).Range.text)) > 10) Then
                'Kolla om om paragrafen innerh|fffd|ller n|fffd|t av str|fffd|ngtyperna.
                outStrText = ImpDoc.Paragraphs(i).Range.text
                If (InStr(outStrText, "g|fffd|ller fr|fffd|n och med den") Or InStr(outStrText, "tr|fffd|der i kraft den")) Then
                   Exit For 'H|fffd|r ska vara sista paragrafen av typ BFS-Ikraft-Stycke som innerh|fffd|ller datumet
                End If
            End If
        End If
    Next
    'Kolla om str|fffd|ngen innerh|fffd|ller ordet m|fffd|nad
    Set Re = New RegExp
    If (InStr(outStrText, "m|fffd|nad")) Then
        Re.Pattern = "([0-9]+\sm|fffd|nad+\s[0-9]+)"
    Else
        Re.Pattern = "([0-9]+\s+\w+\s[0-9]+)"
    End If
    
    If (Re.test(outStrText)) Then
        Set Matches = Re.Execute(outStrText)
        outStrText = Matches(0)
    End If
    'outStrText = GetTextAfter(outStrText, "den ")
    'outStrText = GetTextBefore(outStrText, ".")
    'outStrText = Trim(outStrText)
    'outStrText = TrimFromWord(outStrText)
'    outStrText = ExcludeStaticText(outStrText, inStrMall)
    GetTextFromDocNew = bRes
    Exit Function
    
Error1:
    ImpMsg ("Kan ej h|fffd|mta texten fr|fffd|n mallen " & inStrMall & " i dokumentet.")
    GetTextFromDocNew = False
    Exit Function
End Function

Function GetTextFromDoc(inStrMall As String, ByRef outStrText As String) As Boolean
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = False
    outStrText = ""
    
    Dim aPart As Long
    Dim aParaIdx As Long
    Dim aPara As Paragraph
    If (mParaDoc.GetIdxStyleName(inStrMall, aPart, aParaIdx)) Then
        bRes = True
        If (aPart = 1) Then
            'Huvuddokumentet
            Set aPara = ImpDoc.Paragraphs(aParaIdx)
            outStrText = aPara.Range.text
        End If
        If (aPart = 2) Then
            'Headern
            Set aPara = ImpDoc.Sections(1).Headers(HeaderIdx).Range.Paragraphs(aParaIdx)
            outStrText = aPara.Range.text
        End If
        If (aPart = 3) Then
            'Headern
            Set aPara = ImpDoc.Sections(1).Footers(HeaderIdx).Range.Paragraphs(aParaIdx)
            outStrText = aPara.Range.text
        End If
    End If
    outStrText = Trim(outStrText)
    outStrText = TrimFromWord(outStrText)
'    outStrText = ExcludeStaticText(outStrText, inStrMall)
    GetTextFromDoc = bRes
    Exit Function
    
Error1:
    ImpMsg ("Kan ej h|fffd|mta texten fr|fffd|n mallen " & inStrMall & " i dokumentet.")
    GetTextFromDoc = False
    Exit Function
End Function
Function SetTextToDocSearch(inStrMall As String, inStrText As String) As Boolean
    On Error GoTo Err1
    Dim bRes As Boolean
    bRes = False
    
    Dim intStart As Long
    Dim intEnd As Long
    Dim aRange As Range
    If (FindMallRange(inStrMall, intStart, intEnd)) Then
        Set aRange = ImpDoc.Paragraphs(1).Range
        Call aRange.SetRange(intStart, intEnd)
        If (AdjustRangeToVisText(aRange)) Then aRange.text = inStrText
    End If
    
    bRes = True
Err1:
End Function

Function SetTextToDocNew(inStrMall As String, inStrText As String) As Boolean
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = True
    
    Dim aPart As Long
    Dim aParaIdx As Long
    Dim aPara As Paragraph
    Dim aRange As Range
    Dim TextBeforeDate As String
    Dim TextAfterDate As String
    Dim NewText As String
    Dim Re As RegExp
    Dim Matches
    Dim outStrText As String
    'Specialfall f|fffd|r ikraftdatum
    If (inStrMall = "BFS-Ikraft-Stycke") Then
        'Specialfall f|fffd|r Ikraftdatum
        For i = ImpDoc.Paragraphs.Count To 1 Step -1
            If (ImpDoc.Paragraphs(i).Style = "BFS-Ikraft-Stycke") Then
                If (Len(Trim(ImpDoc.Paragraphs(i).Range.text)) > 10) Then
                    Set aRange = ImpDoc.Paragraphs(i).Range
                    outStrText = aRange.text
                    'Kolla om paragraftexten innerh|fffd|ller n|fffd|t av str|fffd|ngarna
                    If (InStr(outStrText, "g|fffd|ller fr|fffd|n och med den") Or InStr(outStrText, "tr|fffd|der i kraft den")) Then
                        outStrText = aRange.text
                        'Kolla om str|fffd|ngen innerh|fffd|ller ordet m|fffd|nad
                        Set Re = New RegExp
                        If (InStr(outStrText, "m|fffd|nad")) Then
                            Re.Pattern = "([0-9]+\sm|fffd|nad+\s[0-9]+)"
                        Else
                            Re.Pattern = "([0-9]+\s+\w+\s[0-9]+)"
                        End If
                        'Anv|fffd|nd pattern med regexp f|fffd|r att f|fffd| ut positioner d|fffd|r datumet ligger.
                        If (Re.test(outStrText)) Then
                            Set Matches = Re.Execute(outStrText)
                            aRange.Start = aRange.Start + Matches(0).FirstIndex
                            aRange.End = aRange.Start + Len(Matches(0).Value)
                            aRange.Select
                                        
                            If (AdjustRangeToVisText(aRange)) Then
                                 'NewText = Re.Replace(aRange.Text, inStrText)
                                aRange.text = inStrText
                            End If
                            
                            Exit Function 'H|fffd|r ska vara sista paragrafen av typ BFS-Ikraft-Stycke som innerh|fffd|ller datumet
                        End If
                    End If
                End If
            End If
        Next
    End If
    
    If (mParaDoc.GetIdxStyleName(inStrMall, aPart, aParaIdx)) Then
        If (aPart = 1) Then
            'Huvuddokumentet
            Set aPara = ImpDoc.Paragraphs(aParaIdx)
            'MsgBox (aPara.Range.Text)
            Set aRange = aPara.Range
            'H|fffd|mta ut texten innan datumet
            TextBeforeDate = GetTextBefore(aRange.text, "den ")
            'H|fffd|mta ut texten efter datumet
            TextAfterDate = GetTextAfter(aRange.text, ".")
            'Sl|fffd| ihop texten med nytt datum
            NewText = TextBeforeDate & " den " & inStrText & "."
            If Len(TextAfterDate) > 1 Then
                NewText = NewText & " " & TextAfterDate
                NewText = Left(NewText, Len(NewText) - 1)
            End If
        
            If (AdjustRangeToVisText(aRange)) Then aRange.text = NewText
        End If
        If (aPart = 2) Then
            'Headern
            Set aPara = ImpDoc.Sections(1).Headers(HeaderIdx).Range.Paragraphs(aParaIdx)
            Set aRange = aPara.Range
            If (AdjustRangeToVisText(aRange)) Then aRange.text = inStrText
        End If
        If (aPart = 4) Then
            'Headern j|fffd|mn sida
            Set aPara = ImpDoc.Sections(1).Headers(wdHeaderFooterEvenPages).Range.Paragraphs(aParaIdx)
            Set aRange = aPara.Range
            If (AdjustRangeToVisText(aRange)) Then aRange.text = inStrText
        End If
        If (aPart = 5) Then
            'Headern udda sida
            Set aPara = ImpDoc.Sections(1).Headers(wdHeaderFooterPrimary).Range.Paragraphs(aParaIdx)
            Set aRange = aPara.Range
            If (AdjustRangeToVisText(aRange)) Then aRange.text = inStrText
        End If
        If (aPart = 3) Then
            'Footer
            Set aPara = ImpDoc.Sections(1).Footers(HeaderIdx).Range.Paragraphs(aParaIdx)
            Set aRange = aPara.Range
            If (AdjustRangeToVisText(aRange)) Then aRange.text = inStrText
        End If
    End If
    
    SetTextToDocNew = bRes
    Exit Function
Error1:
    ImpMsg ("Kan ej |fffd|ndra texten f|fffd|r mallen " & inStrMall & " i dokumentet.")
    SetTextToDocNew = False
    Exit Function
End Function

Function SetTextToDoc(inStrMall As String, inStrText As String) As Boolean
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = True
    
    Dim aPart As Long
    Dim aParaIdx As Long
    Dim aPara As Paragraph
    Dim aRange As Range
    If (mParaDoc.GetIdxStyleName(inStrMall, aPart, aParaIdx)) Then
        If (aPart = 1) Then
            'Huvuddokumentet
            Set aPara = ImpDoc.Paragraphs(aParaIdx)
            Set aRange = aPara.Range
            If (AdjustRangeToVisText(aRange)) Then aRange.text = inStrText
        End If
        If (aPart = 2) Then
            'Headern
            Set aPara = ImpDoc.Sections(1).Headers(HeaderIdx).Range.Paragraphs(aParaIdx)
            Set aRange = aPara.Range
            If (AdjustRangeToVisText(aRange)) Then aRange.text = inStrText
        End If
        If (aPart = 4) Then
            'Headern j|fffd|mn sida
            Set aPara = ImpDoc.Sections(1).Headers(wdHeaderFooterEvenPages).Range.Paragraphs(aParaIdx)
            Set aRange = aPara.Range
            If (AdjustRangeToVisText(aRange)) Then aRange.text = inStrText
        End If
        If (aPart = 5) Then
            'Headern udda sida
            Set aPara = ImpDoc.Sections(1).Headers(wdHeaderFooterPrimary).Range.Paragraphs(aParaIdx)
            Set aRange = aPara.Range
            If (AdjustRangeToVisText(aRange)) Then aRange.text = inStrText
        End If
        If (aPart = 3) Then
            'Footer
            Set aPara = ImpDoc.Sections(1).Footers(HeaderIdx).Range.Paragraphs(aParaIdx)
            Set aRange = aPara.Range
            If (AdjustRangeToVisText(aRange)) Then aRange.text = inStrText
        End If
    End If
    
    SetTextToDoc = bRes
    Exit Function
Error1:
    ImpMsg ("Kan ej |fffd|ndra texten f|fffd|r mallen " & inStrMall & " i dokumentet.")
    SetTextToDoc = False
    Exit Function
End Function
Function SetTextToBookmark(inStrBookmark As String, inStrValue As String, Optional bInTable As Boolean = False) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    If (bInTable = False) Then
        ImpDoc.Bookmarks(inStrBookmark).Select
        Selection.MoveDown Unit:=wdParagraph, Count:=1, Extend:=wdExtend
        Selection.MoveLeft Unit:=wdCharacter, Count:=1, Extend:=wdExtend
        Selection.Range.text = inStrValue
        Call GoToStart
    Else
        ImpDoc.Bookmarks(inStrBookmark).Select
        Selection.EndKey Unit:=wdLine, Extend:=wdExtend
        Selection.Delete Unit:=wdCharacter, Count:=1
        ActiveDocument.Bookmarks(inStrBookmark).Range = inStrValue    'G|fffd| till bokm|fffd|rket igen och l|fffd|gger in nytt v|fffd|rde
        Call GoToNormalView
        Call GoToStart
    End If
    
    bRes = True
    
Err1:
    SetTextToBookmark = bRes
End Function
Function SetTextToFormField(inStrFormField As String, inStrValue As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    bRes = True
Err1:
    SetTextToFormField = bRes
End Function
Sub ttFF()
    IMPVar.SetDefaultValues
    Dim strText As String
    If (GetTextFromFormField("namnet", strText)) Then
        MsgBox (strText)
    End If
End Sub
Function GetTextFromFormField(inStrFormField As String, ByRef outStrText As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    Dim aFormField As FormField
    For Each aFormField In ImpDoc.FormFields
        'MsgBox (aFormField.Name & Chr(13) & aFormField.Result)
        If (IMPFunction.EqualLegalName(aFormField.Name, inStrFormField)) Then
            outStrText = aFormField.Result
        End If
    Next aFormField
    
    bRes = True
Err1:
    GetTextFromFormField = bRes
End Function
Function ExistFormField(inStrFormField As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    Dim aFormField As FormField
    For Each aFormField In ImpDoc.FormFields
        If (IMPFunction.EqualLegalName(aFormField.Name, inStrFormField)) Then
            bRes = True
        End If
    Next aFormField
    
Err1:
    ExistFormField = bRes
End Function

Function AdjustRangeToVisText(ByRef inRange As Range) As Boolean
    On Error GoTo Error1
    '|fffd|ndrar inRange s|fffd| att inte radslut osv kommer med
    'Detta beh|fffd|vs f|fffd|r att kunna |fffd|ndra texten i styckemallar
    Dim bRes As Boolean
    bRes = False
    
    Dim strRange As String
    strRange = inRange.text
    
    Dim intCountDel As Long
    intCountDel = 0
    
    Dim bContinue As Boolean
    bContinue = True
    ResetSafeWhile (61)
    While (bContinue And SafeWhile(61))
        Dim strChar As String
        strChar = ImpMid(strRange, Len(strRange) - intCountDel, 1)
        Dim intAsc As Long
        intAsc = ImpAsc(strChar)
        If ((intAsc < 32) And (intAsc <> 0)) Then 'Ta bort konstiga tecken i slutet
            intCountDel = intCountDel + 1
        Else
            bContinue = False
        End If
    Wend
    
    'Justera range s|fffd| att r|fffd|tt text kommer med
    If (intCountDel > 1) Then intCountDel = intCountDel - 1
    inRange.End = inRange.End - intCountDel
    If (GetLegalName(strRange) = GetLegalName(inRange.text)) Then bRes = True
    
    AdjustRangeToVisText = bRes
    Exit Function
Error1:
    ImpMsg ("Sv|fffd|righeter att tolka texten:" & strRange)
    AdjustRangeToVisText = False
    Exit Function
End Function
Sub tt()
    IMPVar.SetDefaultValues
    Call FillMallArray
    
End Sub
Sub FillMallArray()
    'G|fffd|r igenom dokumentet och letar efter styckemallar som har koppling till metadata
    On Error GoTo Error1
    Set mParaDoc = New ParaDoc
    Call mParaDoc.ResetAllParaPos
    
    Dim aPara As Paragraph
    Dim strStyle As String
    Dim bSpecStyle As Boolean
    Dim intMax, i As Long
    
     On Error GoTo Error2
   'G|fffd| igenom dokumenthuvudet
    If (ImpDoc.Sections(1).Headers(HeaderIdx).Exists) Then
        intMax = ImpDoc.Sections(1).Headers(HeaderIdx).Range.Paragraphs.Count
        
        For i = 1 To intMax
            Set aPara = ImpDoc.Sections(1).Headers(HeaderIdx).Range.Paragraphs(i)
            strStyle = GetParaStyleAsLegal(aPara)
            
            bSpecStyle = False
            If (CustMeta.IsASpecMall(strStyle)) Then bSpecStyle = True

            If (bSpecStyle) Then
               'MsgBox (strStyle & ":" & aPara.Range.Text)
                Call mParaDoc.AddParaPos(2, strStyle, i)
            End If
        Next i
    End If
   'G|fffd| igenom j|fffd|mn header
    If (ImpDoc.Sections(1).Headers(wdHeaderFooterEvenPages).Exists) Then
        intMax = ImpDoc.Sections(1).Headers(wdHeaderFooterEvenPages).Range.Paragraphs.Count
        
        For i = 1 To intMax
            Set aPara = ImpDoc.Sections(1).Headers(wdHeaderFooterEvenPages).Range.Paragraphs(i)
            strStyle = GetParaStyleAsLegal(aPara)
            
            bSpecStyle = False
            If (CustMeta.IsASpecMall(strStyle)) Then bSpecStyle = True

            If (bSpecStyle) Then
                Call mParaDoc.AddParaPos(4, strStyle, i)
            End If
        Next i
    End If
   'G|fffd| igenom udda header
    If (ImpDoc.Sections(1).Headers(wdHeaderFooterPrimary).Exists) Then
        intMax = ImpDoc.Sections(1).Headers(wdHeaderFooterPrimary).Range.Paragraphs.Count
        
        For i = 1 To intMax
            Set aPara = ImpDoc.Sections(1).Headers(wdHeaderFooterPrimary).Range.Paragraphs(i)
            strStyle = GetParaStyleAsLegal(aPara)
            
            bSpecStyle = False
            If (CustMeta.IsASpecMall(strStyle)) Then bSpecStyle = True

            If (bSpecStyle) Then
                Call mParaDoc.AddParaPos(5, strStyle, i)
            End If
        Next i
    End If
    
   'G|fffd| igenom dokumentfoten
    If (ImpDoc.Sections(1).Footers(HeaderIdx).Exists) Then
        intMax = ImpDoc.Sections(1).Footers(HeaderIdx).Range.Paragraphs.Count
        
        For i = 1 To intMax
            Set aPara = ImpDoc.Sections(1).Footers(HeaderIdx).Range.Paragraphs(i)
            strStyle = GetParaStyleAsLegal(aPara)
            
            bSpecStyle = False
            If (CustMeta.IsASpecMall(strStyle)) Then bSpecStyle = True
            
            If (bSpecStyle) Then
                Call mParaDoc.AddParaPos(3, strStyle, i)
            End If
        Next i
    End If
    
    On Error GoTo Error3
    
    'G|fffd| igenom dokumentet
    Dim aSection As Section
    Dim intSectionNr As Long
    'Dim aPara As Paragraph
    Dim intParaNr As Long
    Dim intMaxSession As Long
    Dim intMaxPara As Long
    Dim intPosInParaDoc As Long
    intPosInParaDoc = 0
    'DETTA V|fffd|RDE M|fffd|STE |fffd|NDRAS OM MAN VILL LOPPA MER STYCKEN I SECTION 2-N
    Dim cIntNrOfCheckPara As Long
    Dim TotalParas As Long
    Dim TotalCheckedParas As Long
    cIntNrOfCheckPara = 4
    TotalParas = ActiveDocument.Paragraphs.Count
    TotalCheckedParas = 0
    cIntNrOfCheckPara = 4
    
    intMaxSession = ImpDoc.Sections.Count
        
    For intSectionNr = 1 To 1
        intMaxPara = ImpDoc.Sections(intSectionNr).Range.Paragraphs.Count
        If (intSectionNr > 1 And intMaxPara > cIntNrOfCheckPara) Then
           ' intMaxPara = cIntNrOfCheckPara ' Loppa endast 4 |fffd|versta para i varje sektion
           intMaxPara = intMaxPara 'Test for large documents
        End If
        'If (intMaxPara > 100) Then intMaxPara = 100
        For intParaNr = 1 To intMaxPara
            Set aPara = ImpDoc.Sections(intSectionNr).Range.Paragraphs(intParaNr)
            strStyle = GetParaStyleAsLegal(aPara)
            
            bSpecStyle = False
            If (CustMeta.IsASpecMall(strStyle)) Then bSpecStyle = True
         
            If (bSpecStyle) Then
                'MsgBox (strStyle & ":" & aPara.Range.Text)
                Call mParaDoc.AddParaPos(1, strStyle, intPosInParaDoc + intParaNr)
                 If (strStyle = "bfskontranamn") Then
                    bKontraFound = True
                End If
            End If
        
        Next intParaNr
        'h|fffd|ller r|fffd|tt p|fffd| para r|fffd|knare
        intPosInParaDoc = intPosInParaDoc + ImpDoc.Sections(intSectionNr).Range.Paragraphs.Count
    Next intSectionNr
    
    
     If bKontraFound = False Then
        'Om vi inte hittat kontra-namn testa g|fffd| nerifr|fffd|n upp
        intMaxSession = ImpDoc.Sections.Count
        For intSectionNr = intMaxSession To 1 Step -1
            If (bKontraFound = True) Then
                Exit For
            End If
       
            intMaxPara = ImpDoc.Sections(intSectionNr).Range.Paragraphs.Count
         
            For intParaNr = intMaxPara To 1 Step -1
                Set aPara = ImpDoc.Sections(intSectionNr).Range.Paragraphs(intParaNr)
                TotalCheckedParas = TotalCheckedParas + 1
                'Set aPara = ActiveDocument.Paragraphs(intParaNr)
                strStyle = GetParaStyleAsLegal(aPara)
                 If (strStyle = "bfskontranamn" And (Len(aPara.Range.text) > 1)) Then
                     'MsgBox (strStyle & ":" & aPara.Range.Text)
                         bKontraFound = True
                         'Call mParaDoc.AddParaPos(1, strStyle, intPosInParaDoc + intParaNr)
                         Call mParaDoc.AddParaPos(1, strStyle, (TotalParas - TotalCheckedParas) + 1)
                         'MsgBox "Kontra namn hittad"
                         Exit For
                End If
            Next intParaNr
            'h|fffd|ller r|fffd|tt p|fffd| para r|fffd|knare
            intPosInParaDoc = intPosInParaDoc + ImpDoc.Sections(intSectionNr).Range.Paragraphs.Count
        Next intSectionNr
    End If
    
    'G|fffd| igenom dokumentet
    'If (ImpDocParagraphsCount > 0) Then
        'intMax = ImpDocParagraphsCount
          
       ' For i = 1 To intMax
            'Set aPara = ImpDoc.Paragraphs(i)
            'strStyle = GetParaStyleAsLegal(aPara)
            
            'bSpecStyle = False
            'If (strStyle = GetLegalName(cStrSMallTitel)) Then bSpecStyle = True

            'If (bSpecStyle) Then
                'Call mParaDoc.AddParaPos(1, strStyle, i)
            'End If
        'Next i
    'End If
    Exit Sub
    
Error1:
    ImpMsg ("Kan ej initiera optimeringsobjekt f|fffd|r styckemallar.")
    Exit Sub
Error2:
    ImpMsg ("Kan ej leta styckemallar i sidhuvud.")
    Exit Sub
Error3:
    ImpMsg ("Kan ej leta styckemallar i dokumentet.")
    
End Sub

'************************ DAT functions *****************
'        Call SetTextToDat(inPropName, inPropValue)
'If (GetTextFromDat(cStrPropHandlaggare, strText))

Function GetTextFromDat(inPropName As String, inPropValue As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    On Error GoTo Err1
    
    'Bugg, l|fffd|s fr|fffd|n dat-filen
    inPropValue = "dat" & inPropName
    
    Dim strFile As String
    strFile = CustExternData.GetMetaPath & inPropName & ".dat"
    inPropValue = Trim(ImpFile.ReadFromFile(strFile))
    
    bRes = True
    GetTextFromDat = bRes
    Exit Function

Err1:
    GetTextFromDat = bRes
   
End Function
Function SetTextToDat(inPropName As String, inPropValue As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    On Error GoTo Err1
    
    'Bugg, skriv i dat-filen
    Dim strFile As String
 
    strFile = CustExternData.GetMetaPath & inPropName & ".dat"
    Call ImpFile.SaveToFile(inPropValue, strFile)
  
    bRes = True
    SetTextToDat = bRes
    Exit Function

Err1:
    SetTextToDat = bRes

End Function

Function GetStatusAsInt(Optional bUseBuffer = False) As Long
    Dim intRes As Long
    intRes = 1
    On Error GoTo Err1
    
    If (bUseBuffer) Then
        intRes = mLastStatusAsInt
    Else
        Dim strStatus As String
        strStatus = GetPropValue(cStrPropDocStatus)
        If (strStatus = cStrPropDocStatus_Utkast) Then intRes = 1
        If (strStatus = cStrPropDocStatus_SkribentStart) Then intRes = 2
        If (strStatus = cStrPropDocStatus_SkribentSlut) Then intRes = 3
        If (strStatus = cStrPropDocStatus_AdminSlut) Then intRes = 4
    End If
    
    mLastStatusAsInt = intRes
Err1:
    GetStatusAsInt = intRes
End Function

'Testfunktion som ska verifierar att FillMallArray fungerar bra
'Anv|fffd|nds ej i koden
Sub TestFillMallArray()
    Dim inStrMall As String
    'inStrMall = cStrSMallSammanfattningRubrik
    inStrMall = cStrSMallSakregisterRubrik
    Dim aPart As Long
    Dim aParaIdx As Long
    Dim aPara As Paragraph

    If (mParaDoc.GetIdxStyleName(inStrMall, aPart, aParaIdx)) Then
        If (aPart = 1) Then
            'Huvuddokumentet
            Set aPara = ImpDoc.Paragraphs(aParaIdx)
            Dim test As String
            test = aPara.Range.text
        End If
    End If
End Sub
 
Attribute VB_Name = "IMPMyndXML"
'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:
Public doc1 As ImpDoc
Public doc2 As ImpDoc

Dim m_LastRubrikLevel As Long
Dim strLastTextType As String
Dim intLastBlank As Long
Dim gintFootnoteCount As Long

Dim intListID As Long
Dim intListLevel As Long
Dim intListPrefix As Long
Dim intLastListID As Long
Dim intLastListLevel As Long
Dim intLastListaIdx As Long
Dim intLastListRowIdx As Long
Dim intLastLista2Idx As Long


Dim intTableID As Long
Dim intTableRow As Long
Dim intTableCol As Long
Dim intLastTableID As Long
Dim intLastTableRow As Long
Dim intLastTableCol As Long
Dim intLastTableBodyIdx As Long
Dim intLastTableHeadIdx As Long
Dim intLastTableRowIdx As Long
Dim intLastCellIdx As Long
Dim strLastTableGrid As String
Dim bLastTableHasHead As Boolean

Dim ieMetadata As ImpElement


Dim elementForfattningstext As ImpElement
Dim elementText As ImpElement
Dim m_strLastPart As String


Function DoAllToMynd(inDoc1 As ImpDoc, inDoc2 As ImpDoc) As Boolean
    Dim bRes As Boolean
    On Error GoTo Err1
    
    'Omvandlar wdoc till mynd xml-filer.
    Call ChangeProcMessage("Skapar XML fil...", False)
    
    Set doc1 = inDoc1
    Set doc2 = inDoc2
    m_strLastPart = ""
    
    Call CreateMyndEmpty
    Call CreateMyndEmptyStandardText
    Call DoParas
    
    
    bRes = True
Err1:
    DoAllToMynd = bRes
End Function


Sub CreateMyndEmpty()
        'Grunddata
        
        Set ieMetadata = doc2.CreateGetElement("metadata", 1)
        
         'Forfattningstext
        Set elementForfattningstext = doc2.CreateGetElement("forfattningstext", 1)
        Set elementText = doc2.CreateGetElement("text", elementForfattningstext.intIdxInDoc)
End Sub

Sub CreateMyndEmptyStandardText()
    
    
    'Variabler
    m_LastRubrikLevel = 0
    strLastTextType = ""
    intLastBlank = 0
    
    intLastListID = 0
    intLastListLevel = 0
    intLastListaIdx = 0
    intLastListRowIdx = 0
    intLastLista2Idx = 0
    
    intLastTableID = 0
    intLastTableRow = 0
    intLastTableCol = 0
    intLastTableBodyIdx = 0
    intLastTableHeadIdx = 0
    intLastTableRowIdx = 0
    intLastCellIdx = 0
    strLastTableGrid = ""
    bLastTableHasHead = False
'    gstrTextLevel = "text"
    gintFootnoteCount = 0
'    intTextId = 1
'    intBildCount = 0
    m_strLastPart = ""
End Sub

Sub DoParas()
    'G|fffd| igenom word.xml
    Dim intMax As Long
    intMax = doc1.GetCountElement
    Dim intI As Long
    Dim ieNext As ImpElement
    For intI = 1 To intMax
        Set ieNext = doc1.GetElement(intI)
        If (ieNext.intElementType = 1) Then
            If (ieNext.GetElementName = "para") Then
                Call DoPara(ieNext)
            End If
        End If
    Next intI
End Sub

Sub DoPara(iePara As ImpElement)
    'Ta fram r|fffd|tt (stycke)element som (chars)texten skall in i
    
    
    'Style
    Dim strView As String
    strView = iePara.GetAttrValue("view")
    Dim strStyle As String
    strStyle = iePara.GetAttrValue("style")
    Dim strPage As String
    strPage = iePara.GetAttrValue("page")
    Dim strRubriknr As String
    strRubriknr = iePara.GetAttrValue("rubriknr")
     Dim strRubrikLevel As String
    strRubrikLevel = iePara.GetAttrValue("rubriklevel")
    Dim strPart As String
    strPart = iePara.GetAttrValue("part")
    'strPart = ""
        
    Dim bAllmRad As Boolean
    bAllmRad = GetAllmRad(strStyle)
    Dim bAndring As Boolean
    bAndring = GetAndring(strStyle)
    
    'Tabeller, listor och numreringar
    intListID = GetListID(iePara)
    intTableID = GetTableID(iePara)
    intListID = ExcludeListIfTable(iePara, intTableID, intListID)
    Dim strParagrafnr As String 'Kan vara alfanumeriskt, ex 6b
    strParagrafnr = GetParagrafNr(iePara)
    Dim intRubrikLevel As Long
    intRubrikLevel = GetRubrikLevel(strStyle)
    Dim bBlank As Boolean
    bBlank = GetBlank(iePara)
    
    'Metadata
    Dim strTextType As String
    Dim strMetaType As String
    strMetaType = GetMetaType(strView, strStyle)
    If (strMetaType = "") Then strTextType = "text"
    If (strMetaType <> "") Then strTextType = strMetaType
    If (strParagrafnr <> "") Then strTextType = "paragraf"
    If ((strLastTextType = "paragraf") And intRubrikLevel = 0) Then strTextType = "paragraf"
    If (bAllmRad) Then strTextType = "allm_rad"
    If (bAllmRad) Then strParagrafnr = ""
    If (bAllmRad) Then Call iePara.SetAttr("paragrafprefix", "0")
    
    'Nytt textblock
    Dim bNewTextBlock As Boolean
    bNewTextBlock = False
'    If ((strTextType <> strLastTextType) And (bBlank = False)) Then bNewTextBlock = True
'    If ((intLastBlank > 0) And (bBlank = False)) Then bNewTextBlock = True
'    If ((intRubrikLevel <= m_LastRubrikLevel) And (intRubrikLevel > 0)) Then bNewTextBlock = True
    If (m_strLastPart <> strPart) Then bNewTextBlock = True
    If ((HasString(m_strLastPart, "rubrik")) And (strPart = "text")) Then bNewTextBlock = False
'    If ((strTextType = "paragraf") And (strParagrafNr <> "")) Then bNewTextBlock = True
'    If ((strTextType = "paragraf") And (strParagrafNr = "")) Then bNewTextBlock = False
'    If ((intRubrikLevel > 0) And (intTableID > 0)) Then intRubrikLevel = 0
            
    
    'Debug
    Dim strDBText As String
    strDBText = iePara.GetTextExcludeSubs
    
    
    'Behandla texten beroende p|fffd| satta parametrar ovan
       
    If (strMetaType = "") Then
        'Skapa r|fffd|tt text-block
        If (bNewTextBlock) Then
            'Set elementText = doc2.CreateGetElement(strTextType, elementForfattningstext.intIdxInDoc)
            'If (strPart <> "") Then Call elementText.SetAttr("part", strPart)
            Set elementText = doc2.CreateGetElement("text", elementForfattningstext.intIdxInDoc)
            Call elementText.SetAttr("part", strPart)
        End If
        
        'Hitta f|fffd|r|fffd|lder till stycket
        Dim intParentIdx As Long
        intParentIdx = elementText.intIdxInDoc
        
        
        Dim ieStycke As ImpElement
        If (intRubrikLevel > 0) Then
            'Rubrik
            Set ieStycke = doc2.CreateGetElement("rubrik", intParentIdx)
            Call ieStycke.SetAttr("mall", strStyle)
            If (bAndring) Then Call ieStycke.SetAttr("kantmarkering", "med")
            Call DoRubrik(iePara, ieStycke, intRubrikLevel)
        Else
            If (intTableID > 0) Then
                'Tabellcell
                intParentIdx = DoTableEntry(iePara, intParentIdx)
            End If
            If (bBlank = False) Then
                If (strParagrafnr <> "") Then
                    'Paragraf
                    Call elementText.SetAttr("paragrafnr", strParagrafnr)
                End If
                If (intListID > 0) Then
                    'Listrad
                    intParentIdx = DoListRow(iePara, intParentIdx)
                End If
                
                Set ieStycke = doc2.CreateGetElement("stycke", intParentIdx)
                Call ieStycke.SetAttr("mall", strStyle)
                If (bAndring) Then Call ieStycke.SetAttr("kantmarkering", "med")
                Call DoChars(iePara, ieStycke)
            End If
        End If
        
    Else
        'Metadata
        Call DoMeta(iePara, strMetaType)
    End If
    
    
    
    'Slutparametrar
    If (intRubrikLevel > 0) Then m_LastRubrikLevel = intRubrikLevel
    If (bBlank = False) Then strLastTextType = strTextType
    If (bBlank = False) Then
        intLastBlank = 0
    Else
        intLastBlank = intLastBlank + 1
    End If
    If (intListID > 0) Then intLastListID = intListID
    If (intTableID > 0) Then intLastTableID = intTableID
    m_strLastPart = strPart
    
    
    
End Sub
Sub DoChars(iePara As ImpElement, ieStycke As ImpElement, Optional inLev As Long = 5)
    'Behandlar Chars och Footnote, dvs alla subbar till para, dock inte tabell och lista
    'l|fffd|gger till pcdata, not, betoning, bildinline och lank till stycket som kommer in
    'Stycket som kommer in kan vara av annan typ |fffd|n stycke, det |fffd|r f|fffd|r|fffd|ldern till texten.
    
    'Lev = 5, PCDATA, NOT, BETONING, LANK, BILD_INLINE
    'Lev = 3, PCDATA, NOT, BETONING
    'Lev = 1, PCDATA
    
    'ieStycke.AddText (iePara.GetTextExcludeSubs)
    'Exit Sub
    
    Dim ieLastNottecken As ImpElement
    Dim arrFootnotes(10) As String 'Alla footnotes p|fffd| raden
    Dim intCharsCount As Long 'Hur m|fffd|nga tecken har behandlats
    intCharsCount = 0
    Dim intPrefix As Long 'Hur m|fffd|nga tecken skall tas bort i b|fffd|rjan
    intPrefix = StrToInt(iePara.GetAttrValue("listprefix"))
    If (intPrefix = 0) Then intPrefix = StrToInt(iePara.GetAttrValue("paragrafprefix"))
    Dim bInsideCode As Boolean '|fffd|r vi inne i ett kodf|fffd|lt
    bInsideCode = False
    Dim intCountFootNotes As Long
    intCountFootNotes = 0
    Dim intFootIdx As Long
    intFootIdx = 0
   
    'Kantmarkering
    Dim bKantmarkering As Boolean
    bKantmarkering = False
    
    
    Dim aArrChild() As Long
    Dim intCountChild As Long
    Dim ieSubPara As ImpElement
    Dim intI As Long
    intCountChild = iePara.mImpDoc.GetChildren(iePara.intIdxInDoc, aArrChild)
    For intI = 1 To intCountChild
        Set ieSubPara = iePara.mImpDoc.GetElement(aArrChild(intI))
        If (ieSubPara.GetElementName = "footnote") Then
            'Samla v|fffd|rden
            intFootIdx = StrToInt(ieSubPara.GetAttrValue("nr"))
            Dim strFoot As String
            strFoot = SpecGetISO(SpecTextVisReverse(ieSubPara.GetTextExcludeSubs))
            'Agera
            arrFootnotes(intFootIdx) = strFoot
        End If
        If (ieSubPara.GetElementName = "chars") Then
            'Samla v|fffd|rden
            Dim strBetoning As String
            strBetoning = GetBetoningGrad(ieSubPara)
            Dim strTeckenMall As String
            strTeckenMall = ieSubPara.GetAttrValue("teckenmall")
'            Dim bStartFootNote As Boolean
'            bStartFootNote = (ieSubPara.GetAttrValue("footnotes") = "yes")
            Dim strFootnote As String
            strFootnote = SpecGetISO(SpecTextVisReverse(ieSubPara.GetAttrValue("footnote")))
            Dim bFootnote As Boolean
            bFootnote = False
            If (strFootnote <> "") Then bFootnote = True
            Dim bHidden As Boolean
            bHidden = (ieSubPara.GetAttrValue("hidden") = "yes")
            Dim strSpecChars As String 'Denna charsen bara
            strSpecChars = SpecTextVisReverse(ieSubPara.GetTextExcludeSubs)
            Dim strBuildSpecChars As String 'De tecken vi skall plocka ut
            strBuildSpecChars = ""
            Dim intBild As Long
            intBild = StrToInt(ieSubPara.GetAttrValue("inlineshape"))
            Dim strSrcBild As String
            strSrcBild = ieSubPara.GetAttrValue("src")
            Dim strAltBild As String
            strAltBild = ieSubPara.GetAttrValue("alt")
            Dim strWidthBild As String
            strWidthBild = ieSubPara.GetAttrValue("width")
            Dim strHeightBild As String
            strHeightBild = ieSubPara.GetAttrValue("height")
            Dim strDeb As String
            strDeb = ieSubPara.GetTextExcludeSubs
            
            'Hyperlink
            Dim strHyperLink As String
            Dim bHyperLink As Boolean
            bHyperLink = False
            strHyperLink = ieSubPara.GetAttrValue("hyperlink")
            bHyperLink = (strHyperLink <> "")
           
            
                    
            'Agera
            
            If (bStartFootNote) Then intCountFootNotes = intCountFootNotes + 1
            
            'Plocka ut r|fffd|tt tecken ur varje Chars och bygg upp BuildChars...
            Dim intLen As Long
            intLen = SpecLen(strSpecChars)
            Dim strChar As String
            strChar = ""
            Dim intK As Long
            For intK = 1 To intLen 'Plocka ut alla tecken
                strChar = SpecMid(strSpecChars, intK, intK)
                intCharsCount = intCharsCount + 1
                'If (strChar = SpecChr(0)) Then bInsideCode = Not (bInsideCode)
                'If (strChar = SpecChr(21)) Then bInsideCode = Not (bInsideCode)
                Dim bAdd As Boolean 'Skall tecknet s|fffd|ttas in
                bAdd = True
                If (bHidden) Then bAdd = False
                If (intCharsCount <= intPrefix) Then bAdd = False
                If (bInsideCode And (strTeckenMall <> "hyperlank")) Then bAdd = False
                If (intBild > 0) Then bAdd = False
                If (strTeckenMall = "fotnotsreferens") Then bAdd = False
                If (bAdd) Then
                    strBuildSpecChars = strBuildSpecChars & strChar
                End If
            Next intK
            strSpecChars = SpecGetISO(strBuildSpecChars)
            'Reducera m|fffd|jligheter beroende p|fffd| vad som till|fffd|tet
            If (inLev = 3) Then
                intBild = 0
            End If
            If (inLev = 1) Then
                intBild = 0
                bStartFootNote = False
                strBetoning = ""
            End If
            
            'Skapa r|fffd|tt parent f|fffd|r texten och stoppa in i stycket
            If (bStartFootNote) Then
'                gintFootnoteCount = gintFootnoteCount + 1
'                Dim ieNot As ImpElement
'                Dim ieHanvisning As ImpElement
'                Set ieNot = doc2.CreateGetElement("not", ieStycke.intIdxInDoc)
'                Set ieLastNottecken = doc2.CreateGetElement("nottecken", ieNot.intIdxInDoc)
'                Set ieHanvisning = doc2.CreateGetElement("hanvisning", ieNot.intIdxInDoc)
'                ieLastNottecken.AddText (IntToStr(gintFootnoteCount))
'                If (intCountFootNotes <= intFootIdx) Then ieHanvisning.AddText (arrFootNotes(intCountFootNotes))
            ElseIf (bFootnote) Then
                gintFootnoteCount = gintFootnoteCount + 1
                Dim ieNot As ImpElement
                Dim ieHanvisning As ImpElement
                Set ieNot = doc2.CreateGetElement("not", ieStycke.intIdxInDoc)
                Set ieLastNottecken = doc2.CreateGetElement("nottecken", ieNot.intIdxInDoc)
                Set ieHanvisning = doc2.CreateGetElement("hanvisning", ieNot.intIdxInDoc)
                ieLastNottecken.AddText (IntToStr(gintFootnoteCount))
                ieHanvisning.AddText (strFootnote)
                ieStycke.AddText (strSpecChars)
            ElseIf (intBild > 0) Then
                Dim ieBild_Inline As ImpElement
                Set ieBild_Inline = doc2.CreateGetElement("bild_inline", ieStycke.intIdxInDoc)
                Dim strEntity As String
                strEntity = "bild" & IntToStr(intBild)
                Call ieBild_Inline.SetAttr("src", strSrcBild)
                Call ieBild_Inline.SetAttr("alt", strAltBild)
                If ((strWidthBild <> "") And (strHeightBild <> "")) Then
                    Call ieBild_Inline.SetAttr("width", strWidthBild)
                    Call ieBild_Inline.SetAttr("height", strHeightBild)
                End If
'                Call ieBild_Inline.SetAttr("src", strEntity)
                Call doc2.AddBildEntity(strEntity, strSrcBild)
            ElseIf (bHyperLink) Then 'Hyperlink
                Dim ieLank As ImpElement
                Set ieLank = doc2.CreateGetElement("lank", ieStycke.intIdxInDoc)
                Call ieLank.SetAttr("xmlns:xlink", "http://www.w3.org/1999/xlink")
                Call ieLank.SetAttr("xlink:href", strHyperLink)
                Call ieLank.SetAttr("xlink:type", "simple")
                ieLank.AddText (strSpecChars)
            ElseIf (strBetoning <> "") Then
                Dim ieBetoning As ImpElement
                Set ieBetoning = doc2.CreateGetElement("betoning", ieStycke.intIdxInDoc)
                Call ieBetoning.SetAttr("grad", strBetoning)
                ieBetoning.AddText (strSpecChars)
            Else
                ieStycke.AddText (strSpecChars)
            End If
        End If
    Next intI
    
End Sub
Sub DoMeta(iePara As ImpElement, strMetaType As String)
    On Error GoTo Err1
    Dim strCharsSpec As String
    strCharsSpec = GetCharsSpec(iePara)
    
    Dim strISO As String
    strISO = SpecGetISO(strCharsSpec)
    
    Dim ieNewMeta As ImpElement
    Set ieNewMeta = doc2.CreateGetElement(strMetaType, ieMetadata.intIdxInDoc)
    ieNewMeta.AddText (strISO)
Err1:
End Sub

Sub DoRubrik(iePara As ImpElement, ieStycke As ImpElement, intRubrikLevel As Long)
    'If (intRubrikLevel > 2) Then intRubrikLevel = 2
    Call ieStycke.SetAttr("storlek", "rubrik" & IntToStr(intRubrikLevel))
    Call DoChars(iePara, ieStycke)
    
End Sub
Function DoListRow(iePara As ImpElement, inParentIdx As Long)
    Dim intRes As Long
    intRes = 0
    
    Dim ieLista As ImpElement
    Dim ieListRow As ImpElement
    Dim ieLista2 As ImpElement
    Dim ieListRow2 As ImpElement
    
    If ((intListLevel = 2) And (intLastListRowIdx = 0)) Then intListLevel = 1 's|fffd|kerhet
    
    'Listbeteckning
    Dim strListTyp As String
    strListTyp = ""
    Dim strEgenListaBet As String
    strEgenListaBet = ""
    Dim strListBet As String
    strListBet = iePara.GetAttrValue("listbet")
    If (strListBet = "-") Then
        strListTyp = "strecklista"
    ElseIf (strListBet = "*") Then
        strListTyp = "punktlista"
    Else
        strListTyp = "egenlista"
        strEgenListaBet = strListBet
    End If
    
    
    'Ny lista
    If (intListID <> intLastListID) Then
        Set ieLista = doc2.CreateGetElement("lista", inParentIdx)
        intLastListaIdx = ieLista.intIdxInDoc
    End If
    
    
    'Niv|fffd| 1
    If (intListLevel = 1) Then
        'Ny listrad
        Set ieListRow = doc2.CreateGetElement("listelement", intLastListaIdx)
        intLastListRowIdx = ieListRow.intIdxInDoc
        intRes = intLastListRowIdx
        Call ieListRow.SetAttr("listtyp", strListTyp)
        If (strEgenListaBet <> "") Then Call ieListRow.SetAttr("egenlistabet", strEgenListaBet)
    End If
        
    'Niv|fffd|2
    If (intListLevel = 2) Then
        'Ny sublista
        If (intLastListLevel = 1) Then
            Set ieLista2 = doc2.CreateGetElement("lista_sub", intLastListRowIdx)
            intLastLista2Idx = ieLista2.intIdxInDoc
        End If
        
        'Ny sublistrad
        Set ieListRow2 = doc2.CreateGetElement("listelement_sub", intLastLista2Idx)
        intRes = ieListRow2.intIdxInDoc
        Call ieListRow2.SetAttr("listtyp", strListTyp)
        If (strEgenListaBet <> "") Then Call ieListRow2.SetAttr("egenlistabet", strEgenListaBet)
    End If
    
    'S|fffd|tt slutv|fffd|rden
    intLastListID = intListID
    intLastListLevel = intListLevel
    
    DoListRow = intRes
End Function
Function DoTableEntry(iePara As ImpElement, inParentIdx As Long)
    Dim intRes As Long
    intRes = intLastCellIdx
    Dim ieTable As ImpElement
    Dim ieTableGroup As ImpElement
    Dim ieTableBody As ImpElement
    Dim ieTableHead As ImpElement
    Dim ieTableRow As ImpElement
    Dim ieTableCell As ImpElement
    
    'Tabelcell
    Dim strCols As String
    strCols = "1"
    Dim intTableIdx As Long
    intTableIdx = doc1.GetChildIdx(iePara.intIdxInDoc, "tablecell")
    Dim ieTableCellIn As ImpElement
    
    Dim strTableGrid As String
    strTableGrid = ""
    
    If (intTableIdx > 0) Then
        Set ieTableCellIn = doc1.GetElement(intTableIdx)
        
        strCols = ieTableCellIn.GetAttrValue("cols")
        strTableGrid = ieTableCellIn.GetAttrValue("tablegrid")
    End If

    
    'Ny tabell
    If (intTableID <> intLastTableID) Then
        'Bugg s|fffd|tt attribut p|fffd| tabellen
        Set ieTable = doc2.CreateGetElement("tabell", inParentIdx)
        If (strTableGrid <> "") Then Call ieTable.SetAttr("frame", strTableGrid)
        Set ieTableGroup = doc2.CreateGetElement("tgroup", ieTable.intIdxInDoc)
        Call ieTableGroup.SetAttr("COLS", strCols)
        strLastTableGrid = strTableGrid
        bLastTableHasHead = False
        
        If (intTableIdx > 0) Then
            Dim intI As Long
            Dim intCols As Long
            intCols = StrToInt(strCols)
            For intI = 1 To intCols
                Dim ieColSpec As ImpElement
                Set ieColSpec = doc2.CreateGetElement("colspec", ieTableGroup.intIdxInDoc)
                Dim strWidth As String
                strWidth = ieTableCellIn.GetAttrValue("w" & IntToStr(intI))
                Call ieColSpec.SetAttr("COLNUM", IntToStr(intI))
                Call ieColSpec.SetAttr("COLNAME", "" & IntToStr(intI))
                Call ieColSpec.SetAttr("COLWIDTH", strWidth & "")
            Next intI
        End If
        'Head
        Set ieTableHead = doc2.CreateGetElement("thead", ieTableGroup.intIdxInDoc)
        intLastTableHeadIdx = ieTableHead.intIdxInDoc
        'Body
        Set ieTableBody = doc2.CreateGetElement("tbody", ieTableGroup.intIdxInDoc)
        intLastTableBodyIdx = ieTableBody.intIdxInDoc
        intLastTableRow = 0
        
    End If
    
    'Ny rad
    If (intTableRow <> intLastTableRow) Then
        Dim bIsAHeaderRow As Boolean
        bIsAHeaderRow = IsTableHeader(iePara)
        'bugg s|fffd|tt attribut p|fffd| raden
        If (bIsAHeaderRow) Then
            bLastTableHasHead = True
            Set ieTableRow = doc2.CreateGetElement("row", intLastTableHeadIdx)
        Else
            Set ieTableRow = doc2.CreateGetElement("row", intLastTableBodyIdx)
        End If
        intLastTableRowIdx = ieTableRow.intIdxInDoc
        intLastTableCol = 0
    End If
    
    'Ny cell
    If (intTableCol <> intLastTableCol) Then
        'Bugg, s|fffd|tt attribut p|fffd| cellen
        Set ieTableCell = doc2.CreateGetElement("entry", intLastTableRowIdx)
        If (intTableIdx > 0) Then
            Dim intColStart As Long
            Dim intColSpan As Long
            intColStart = StrToInt(ieTableCellIn.GetAttrValue("colstart"))
            intColSpan = StrToInt(ieTableCellIn.GetAttrValue("colspan"))
            If (intColSpan = 1) Then
                Call ieTableCell.SetAttr("COLNAME", "" & IntToStr(intColStart))
            End If
            If (intColSpan > 1) Then
                Call ieTableCell.SetAttr("NAMEST", "" & IntToStr(intColStart))
                Call ieTableCell.SetAttr("NAMEEND", "" & IntToStr(intColStart + intColSpan - 1))
            End If
            
            'Align och grid
            Call ieTableCell.SetAttr("ALIGN", GetCalAlignStr(ieTableCellIn.GetAttrValue("halign")))
            Call ieTableCell.SetAttr("VALIGN", GetCalAlignStr(ieTableCellIn.GetAttrValue("valign")))
            Call ieTableCell.SetAttr("ROWSEP", GetCalFrameStr(iePara, ieTableCellIn, strLastTableGrid, (intColStart + intColSpan - 1), bLastTableHasHead))
            
            
        End If
        intLastCellIdx = ieTableCell.intIdxInDoc
    End If
    'S|fffd|tt slutv|fffd|rden
    intLastTableID = intTableID
    intLastTableRow = intTableRow
    intLastTableCol = intTableCol
    intRes = intLastCellIdx
    
    DoTableEntry = intRes
End Function
'*********************** Hj|fffd|lpfunktioner *****************************
Function GetCalAlignStr(inWord As String) As String
    Dim strRes As String
    strRes = inWord
    If (inWord = "left") Then strRes = "LEFT"
    If (inWord = "right") Then strRes = "RIGHT"
    If (inWord = "cent") Then strRes = "CENTER"
    If (inWord = "top") Then strRes = "TOP"
    If (inWord = "middle") Then strRes = "MIDDLE"
    If (inWord = "bottom") Then strRes = "BOTTOM"
    GetCalAlignStr = strRes
End Function
Function GetMetaType(inStrView As String, inStrStyle As String) As String
    Dim strRes As String
    strRes = ""
    If (inStrView = "metadata") Then strRes = inStrStyle
    If (inStrView = "header") Then strRes = "header-" & inStrStyle
    If (inStrView = "footer") Then strRes = "footer-" & inStrStyle
    
    GetMetaType = strRes
End Function
Function GetBlank(iePara As ImpElement) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    'H|fffd|mta alla tecken
    Dim strParaSpec As String
    strParaSpec = GetCharsSpec(iePara)
    
    'Kontrollera om osynliga tecken bara , ascii<=32
    Dim strVisSpec As String
    strVisSpec = SpecRemoveUnvis(strParaSpec)
    If (SpecLen(strVisSpec) = 0) Then bRes = True
    
    'Kontrollera om bild
    Dim intPos As Long
    intPos = SpecPos(strParaSpec, SpecChr(1), 1)
    If (intPos > 0) Then bRes = False
    
    GetBlank = bRes
End Function
Function GetParagrafNr(iePara As ImpElement) As String
    Dim strRes As String
    strRes = ""
    
    'M|fffd|ste vara mallen f|fffd|r paragrafer ( juridiska )
    Dim strLegalStyle As String
    strLegalStyle = iePara.GetAttrValue("style")
    If (IsJurParagrafMall(strLegalStyle) = False) Then
        GetParagrafNr = strRes
        Exit Function
    End If
    
    'Ta ut nummer innan paragraftecken
    Dim strParaSpec As String
    strParaSpec = GetCharsSpec(iePara)
    
    Dim strVisSpec As String
    strVisSpec = SpecRemoveUnvis(strParaSpec)
    
    Dim intSpecPos As Long
    intSpecPos = SpecPos(strVisSpec, SpecText("|fffd|"), 1)
    
    If (intSpecPos > 0) Then
        Dim strNum As String
        strNum = SpecMid(strVisSpec, 1, intSpecPos - 1)
        strRes = SpecTextReverse(strNum)
        'intRes = SpecStrToInt(strNum)
    End If
    
    
    GetParagrafNr = strRes
End Function
Function GetCharsSpec(iePara As ImpElement) As String
    'H|fffd|mtar all text ur charsen och bildar spec-str|fffd|ng
    Dim strRes As String
    strRes = ""
    
    'H|fffd|mta subbarna
    Dim aArr() As Long
    Dim intCount As Long
    Dim ieSub As ImpElement
    
    intCount = iePara.mImpDoc.GetChildren(iePara.intIdxInDoc, aArr)
    For i = 1 To intCount
        Set ieSub = iePara.mImpDoc.GetElement(aArr(i))
        If ((ieSub.intElementType = 1) And (ieSub.GetElementName = "chars")) Then
            strRes = strRes & ieSub.GetTextExcludeSubs
        End If
    Next
    
    strRes = SpecTextVisReverse(strRes)
    
    GetCharsSpec = strRes
End Function
Function GetListID(iePara As ImpElement) As Long
    Dim intRes As Long
    intRes = 0
    
    Dim strID As String
    strID = iePara.GetAttrValue("listid")
    intRes = StrToInt(strID)
    
    'N|fffd|r vi |fffd|nd|fffd| |fffd|r h|fffd|r
    Dim strLevel As String
    strLevel = iePara.GetAttrValue("listlevel")
    intListLevel = StrToInt(strLevel)
    
    Dim strPrefix As String
    strPrefix = iePara.GetAttrValue("listprefix")
    intListPrefix = StrToInt(strPrefix)
    
    GetListID = intRes
End Function
Function GetTableID(iePara As ImpElement) As Long
    Dim intRes As Long
    intRes = 0
    
    Dim intTableIdx As Long
    intTableIdx = doc1.GetChildIdx(iePara.intIdxInDoc, "tablecell")
    
    If (intTableIdx > 0) Then
        Dim ieTable As ImpElement
        Set ieTable = doc1.GetElement(intTableIdx)
        
        Dim strID As String
        strID = ieTable.GetAttrValue("tableid")
        intRes = StrToInt(strID)
        
        'N|fffd|r vi |fffd|nd|fffd| |fffd|r h|fffd|r
        Dim strRow As String
        strRow = ieTable.GetAttrValue("row")
        intTableRow = StrToInt(strRow)
        
        Dim strCol As String
        strCol = ieTable.GetAttrValue("col")
        intTableCol = StrToInt(strCol)
        
    End If
    
    
    GetTableID = intRes
End Function
Function GetListLevel(inStrStyle As String) As Long
    Dim intRes As Long
    intRes = 0
    intRes = CustMallarMain.GetListLevelFromMallStyle(inStrStyle)
    
    GetListLevel = intRes

End Function
Function GetAndring(inStrStyle As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    If (HasString(inStrStyle, "andring")) Then bRes = True
    
    GetAndring = bRes
    
End Function

Function GetAllmRad(inStrStyle As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    If (HasString(inStrStyle, "allmrad")) Then bRes = True
    
    GetAllmRad = bRes
    
End Function
Function GetRubrikLevel(inStrStyle As String) As Long
    Dim intRes As Long
    intRes = 0
    intRes = CustMallarMain.GetRubrikLevelFromMallStyle(inStrStyle)
    GetRubrikLevel = intRes
End Function

Function GetBetoningGrad(ieChars As ImpElement) As String
    Dim strRes As String
    strRes = ""
    
    Dim bBold As Boolean
    Dim bItalic As Boolean
    Dim bUnderline As Boolean
    Dim bIndex As Boolean
    Dim bExponent As Boolean
        
    bBold = (ieChars.GetAttrValue("bold") = "yes")
    bItalic = (ieChars.GetAttrValue("italic") = "yes")
    bUnderline = (ieChars.GetAttrValue("underline") = "yes")
    bIndex = (ieChars.GetAttrValue("index") = "yes")
    bExponent = (ieChars.GetAttrValue("exponent") = "yes")
    
    If (bItalic) Then strRes = "grad1"
    If (bBold) Then strRes = "grad2"
    If (bBold And bItalic) Then strRes = "grad3"
    If (bUnderline) Then strRes = "grad4"
    If (bUnderline And bItalic) Then strRes = "grad5"
    If (bIndex) Then strRes = "grad6"
    If (bExponent) Then strRes = "grad7"
    
    GetBetoningGrad = strRes
End Function

Function IsTableHeader(iePara As ImpElement) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    Dim strStyle As String
    strStyle = iePara.GetAttrValue("style")
    
    If (HasString(strStyle, "huvud")) Then bRes = True
    
    IsTableHeader = bRes
End Function
'Call ieTableCell.SetAttr("ROWSEP", GetCalFrameStr(iePara, ieTableCellIn, intLastTableHeadIdx))
Function GetCalFrameStr(iePara As ImpElement, ieTableCellIn As ImpElement, strGrid As String, intTrueCol As Long, bIsHeadTable As Boolean) As String
    'S|fffd|tter Left, Right, Top, Bottom linje p|fffd| cellen
    'Varje cell ansvarar f|fffd|r Right, Bottom linjen
    'Ytterceller uppe och v|fffd|nster ansvarar |fffd|ven f|fffd|r den linjen
    Dim strRes As String
    strRes = ""
    'If (strGrid <> "mixed") Then
    '    GetCalFrameStr = strRes
    '    Exit Function
    'End If
    
    'Rad och kolumn
    'Dim intRow As Long
    'intRow = StrToInt(ieTableCellIn.GetAttrValue("row"))
    'Dim intRows As Long
    'intRows = StrToInt(ieTableCellIn.GetAttrValue("rows"))

    'Dim intCol As Long
    'intCol = StrToInt(ieTableCellIn.GetAttrValue("col"))
    'Dim intCols As Long
    'intCols = StrToInt(ieTableCellIn.GetAttrValue("cols"))

    'Style header
    'Dim bIsHeader As Boolean
    'bIsHeader = IsTableHeader(iePara)
    
    'Left
        'If (intCol = 1) Then strRes = strRes & "L"
    'Right
        'If (intTrueCol = intCols) Then strRes = strRes & "R"
    'Top
        'If (intRow = 1) Then strRes = strRes & "T"
    'Bottom
        'If ((intRow = intRows) Or (bIsHeader)) Then strRes = strRes & "B"
        
    'If (bLastTableHasHead = False) Then
        'Mixad vanlig tabell l|fffd|ser vi h|fffd|ger nere
        If (ieTableCellIn.GetAttrValue("bordtop") = "yes") Then strRes = strRes & "T"
        If (ieTableCellIn.GetAttrValue("bordright") = "yes") Then strRes = strRes & "R"
        If (ieTableCellIn.GetAttrValue("bordbot") = "yes") Then strRes = strRes & "B"
        If (ieTableCellIn.GetAttrValue("bordleft") = "yes") Then strRes = strRes & "L"
    'End If
        
    GetCalFrameStr = strRes
End Function
Function ExcludeListIfTable(iePara As ImpElement, inTableId As Long, inListId As Long) As Long
    Dim intRes As Long
    intRes = inListId
    
    On Error GoTo Err1
    If (inTableId = 0) Then GoTo Err1 'Ingen tabell, ingen |fffd|tg|fffd|rd
    If (inListId = 0) Then GoTo Err1 'Ingen lista, ingen |fffd|tg|fffd|rd
    
    'B|fffd|de tabell och lista
    Call iePara.SetAttr("listprefix", "0") 'S|fffd| inga tecken hoppas |fffd|ver
    intRes = 0
    
    
    Dim strLevel As String
    strLevel = iePara.GetAttrValue("listlevel")
    intListLevel = StrToInt(strLevel)
    If (intListLevel = 2) Then
        'G|fffd| igenom till f|fffd|rsta charsen och l|fffd|gg till h|fffd|rda blanksteg
        Dim aArrChild() As Long
        Dim intCountChild As Long
        Dim ieSub As ImpElement
                        
        Dim intI As Long
        intCountChild = iePara.mImpDoc.GetChildren(iePara.intIdxInDoc, aArrChild)
        For intI = 1 To intCountChild
            Set ieSub = iePara.mImpDoc.GetElement(aArrChild(intI))
            If (ieSub.GetElementName = "chars") Then
                Dim strSpec As String
                strSpec = ieSub.GetTextExcludeSubs
                strSpec = SpecText(ChrW(160) & ChrW(160) & ChrW(160) & ChrW(160)) & strSpec
                ieSub.ClearText
                ieSub.AddText (strSpec)
                Exit For
            End If
        Next
    End If
    
Err1:
    ExcludeListIfTable = intRes
End Function

Attribute VB_Name = "IMPPrefDlg"
Attribute VB_Base = "0{EC73E63E-F068-44AD-83E3-2B745D8E299E}{F7B6BCE5-D6A1-4E3C-A3B6-8269E6DE2449}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False








Private Sub ButCheckCancel_Click()
    CheckBoxBegin.Value = IMPCheckMain.bCheckFromCursor
    'CheckBoxBegin.Value = IMPCheckMain.GetDocVariabelAsBoolean(cCheckFromCursorDocVar)
    CheckBoxSearchOld.Value = Not (IMPCheckMain.GetDocVariabelAsBoolean(cSearchOnlyNewTypesDocVar))
    IMPPrefDlg.Hide

End Sub

Private Sub ButCheckOk_Click()
    IMPCheckMain.bCheckFromCursor = CheckBoxBegin.Value
    'Call IMPCheckMain.SetDocVariabelAsBoolean(cCheckFromCursorDocVar, CheckBoxBegin.Value)
    Call IMPCheckMain.SetDocVariabelAsBoolean(cSearchOnlyNewTypesDocVar, Not (CheckBoxSearchOld.Value))
    Call IMPCheckMain.SetDocVariabelAsBoolean(cNumBBRDocVar, cboxNumBBR.Value)
    IMPPrefDlg.Hide
End Sub

Private Sub cboxNumBBR_Click()
'Do nothing, det |fffd|r ok, cancel som styr

End Sub

Private Sub CheckBoxBegin_Click()
'Do nothing, det |fffd|r ok, cancel som styr
End Sub

Private Sub CommandButtonResetIgnore_Click()
    IMPCheckMain.intLastIgnore = 0
    Call SetDocVariabel(cOkMallar, IntToStr(0))

End Sub
Sub SetValues()
    'IMPPrefDlg.CheckBoxBegin = IMPCheckMain.GetDocVariabelAsBoolean(cCheckFromCursorDocVar)
    IMPPrefDlg.CheckBoxSearchOld = Not (IMPCheckMain.GetDocVariabelAsBoolean(cSearchOnlyNewTypesDocVar))
    IMPPrefDlg.cboxNumBBR = IMPCheckMain.GetDocVariabelAsBoolean(cNumBBRDocVar)

End Sub

Private Sub LblHelp_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim strText As String
    strText = "Bom|fffd|rket: " & CustExternData.GetIMPinPath
    strText = strText & Chr(13) & "User: " & CustExternData.GetMetaPath
    strText = strText & Chr(13) & "Server: " & CustExternData.GetServerPath
    'strText = strText & Chr(13) & "Publish: " & CustExternData.GetPublishPath
    strText = strText & Chr(13) & "Document: " & CustExternData.GetDocsPath
    LblHelp.Caption = strText
    
    Call ImpShell32.ShowFile(CustExternData.GetIMPinPath)

End Sub

Attribute VB_Name = "IMPProcDlg"
Attribute VB_Base = "0{C830EB21-ABA6-40B8-9D9B-AB041A8785FD}{796BE2B2-DA44-4172-A855-2A633AB40D17}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









Public Sub UpdateText(inStr1 As String)
    Label1.Caption = inStr1
    Call Repaint
End Sub
Attribute VB_Name = "IMPSpecText"
'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:
Function SpecText(inStr2 As String) As String
    ' Skapa text {032} utan konstiga tecken
    ' { <asciv|fffd|rdet> } med trest|fffd|lligt ascii-v|fffd|rde
    Dim intLenStr As Long
    intLenStr = Len(inStr2)
    strNoStrangePar = ""
    For a = 1 To intLenStr
        Dim strParChar As String
        strParChar = Mid(inStr2, a, 1)
        If (Len(strParChar) >= 1) Then
            Dim intUniChar As Long
            intUniChar = AscW(strParChar)
            If (intUniChar = -4013) Then intUniChar = 931
            If (intUniChar = -3998) Then intUniChar = 946
            If (intUniChar = -4007) Then intUniChar = 936
            strParChar = SpecChr(intUniChar)
        End If
        strNoStrangePar = strNoStrangePar & strParChar
    Next
    SpecText = strNoStrangePar
End Function


Function SpecTextReverse(inStr1 As String) As String
    'Ger tillbaka texten som ascii
    Dim strRes As String
    strRes = ""
    Dim intLenStr As Long
    intLenStr = Len(inStr1)
    
    For a = 1 To (intLenStr / 7)
        Dim strChar As String
        strChar = SpecChar(inStr1, a) ' Tag ut spec teck
        Dim intAsc As Long
        intAsc = SpecAsc(strChar)
        
        If (intAsc > 255) Then
            strRes = strRes & ChrW(intAsc)
        Else
            strRes = strRes & Chr(intAsc)
        End If
    Next
    
    SpecTextReverse = strRes
End Function

Function SpecTextVisReverse(inStr2 As String) As String
    'Skapar spec text fr|fffd|n text som skapats med SpecGetVis
    Dim strRes As String
    strRes = ""
    Dim intLenStr As Long
    intLenStr = Len(inStr2)
    strNoStrangePar = ""
    a = 1
    ResetSafeWhile (2)
    While (a <= intLenStr And SafeWhile(2))
        Dim strParChar As String
        strParChar = Mid$(inStr2, a, 1)
        If (Len(strParChar) >= 1) Then
            If (strParChar = "{") Then 'Spec text
                strParChar = Mid$(inStr2, a, 7)
                a = a + 6
            Else 'Vanligt tecken
                strParChar = SpecText(strParChar)
            End If
        End If
        a = a + 1
        strRes = strRes & strParChar
    Wend
    SpecTextVisReverse = strRes
End Function

Function SpecGroup(inStr1 As String, inIdx As Long, bText As Boolean) As String
    ' Returnerar text eller klammergrupp med visst index
    ' F|fffd|rsta texten |fffd|r grupp ett, ev finns det klammergrupp innan dess som d|fffd| |fffd|r noll
    
    Dim strRes As String
    strRes = ""
    Dim intCharIdx As Long
    intCharIdx = 1
    
    Dim strMode As String
    strMode = "spec" 'spec/alfa
    Dim intGroupIdx As Long
    intGroupIdx = 0 'F|fffd|rsta ev klammergrupp innan text |fffd|r ju 0
    
    Dim strSpecChar As String
    strSpecChar = SpecChar(inStr1, intCharIdx)
    ResetSafeWhile (3)
    While (strSpecChar <> "" And SafeWhile(3))
    
        'G|fffd|r vad som skall g|fffd|ras
        If (SpecIsNormalChar(strSpecChar, True) = True) Then
            If (strMode = "spec") Then intGroupIdx = intGroupIdx + 1
            strMode = "alfa"
            If ((intGroupIdx = inIdx) And (bText)) Then strRes = strRes + strSpecChar  'summerar gruppen
        Else
            strMode = "spec"
            If ((intGroupIdx = inIdx) And (bText = False)) Then strRes = strRes + strSpecChar 'summerar gruppen
        End If
    
        'n|fffd|sta varv i loopen
        intCharIdx = intCharIdx + 1
        strSpecChar = SpecChar(inStr1, intCharIdx)
        If (intGroupIdx > inIdx) Then strSpecChar = "" 'Optimering
    Wend
   
    SpecGroup = strRes
End Function
Function SpecChr(inIntAsc As Long) As String
    Dim strRes As String
    strRes = ""
    strRes = IntToStr(inIntAsc)
            
    ResetSafeWhile (40)
    While (Len(strRes) < 5 And SafeWhile(40))
        strRes = "0" & strRes
    Wend
                                               
    strRes = "{" & strRes & "}"
    
    SpecChr = strRes
End Function
Function SpecChar(inStr2, inIndex)
    'H|fffd|mtar tecken nr, f|fffd|rsta=1
    Dim strRes As String
    strRes = ""
    
    Dim intStart As Long 'f|fffd|rsta = 1
    intStart = 7 * inIndex - 6
    
    Dim bPossible As Boolean
    bPossible = True
    
    If (Len(inStr2) < intStart + 6) Then bPossible = False
    If (inIndex < 1) Then bPossible = False
    
    If (bPossible) Then
        strRes = Mid(inStr2, intStart, 7)
    End If
    
    SpecChar = strRes
End Function
Function SpecIsNormalChar(inStr1 As String, Optional bAllowSwe As Boolean = False) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    Dim strOnlyFirst As String
    strOnlyFirst = SpecMid(inStr1, 1, 1)
    Dim strOnlyValue As String
    strOnlyValue = Mid(strOnlyFirst, 2, 5)
    
    Dim intAsc As Long
    intAsc = StrToInt(strOnlyValue)
    
    If ((intAsc >= 48) And (intAsc <= 57)) Then bRes = True '0-9
    If ((intAsc >= 65) And (intAsc <= 90)) Then bRes = True 'A-Z
    If ((intAsc >= 97) And (intAsc <= 122)) Then bRes = True 'a-z
    If ((bAllowSwe) And (intAsc = 229)) Then bRes = True '|fffd|
    If ((bAllowSwe) And (intAsc = 228)) Then bRes = True '|fffd|
    If ((bAllowSwe) And (intAsc = 246)) Then bRes = True '|fffd|
    If ((bAllowSwe) And (intAsc = 197)) Then bRes = True '|fffd|
    If ((bAllowSwe) And (intAsc = 196)) Then bRes = True '|fffd|
    If ((bAllowSwe) And (intAsc = 214)) Then bRes = True '|fffd|
    SpecIsNormalChar = bRes
End Function
Function SpecPos(inStrOrg As String, inStrSearch As String, intStartPos As Long) As Long
    'Hittar en str|fffd|ng och anger positionen i speclen
    'F|fffd|rsta tecknet |fffd|r nummer 1
    Dim intRes As Long
    intRes = 0
    SpecPos = intRes
    If (inStrSearch = "") Then Exit Function
    On Error GoTo Error1
    
    Dim intCharPos As Long
    intCharPos = InStr(intStartPos * 7 - 6, inStrOrg, inStrSearch, vbTextCompare)
    If (intCharPos > 0) Then
        Dim strBefore As String
        strBefore = Mid$(inStrOrg, 1, intCharPos - 1)
        intRes = SpecLen(strBefore) + 1
    End If
    
Error1:
    SpecPos = intRes
End Function
Function SpecLen(str1 As String) As Long

    'Returnerar l|fffd|ngden = len/5 eftersom varje spectecken |fffd|r 5 tecken l|fffd|ng
    Dim intSum As Long
    intSum = Len(str1) / 7
       
    SpecLen = intSum

End Function
Function SpecMid(inStr1 As String, inStart As Long, inEnd As Long) As String
    ' Tar ut spectecken fr|fffd|n och till
    ' om till |fffd|r 0, s|fffd| tas str|fffd|ngen till dess slut
    Dim strSum As String
    strSum = ""
    If (inEnd < 0) Then GoTo Error1
    On Error GoTo Error1

    Dim intStart As Long 'f|fffd|rsta = 1
    intStart = 7 * inStart - 6
    
    Dim intlength As Long 'f|fffd|rsta = 1
    intlength = (inEnd - inStart) * 7 + 7
    
    If (inEnd <= 0) Then
        If (intStart > 0) Then strSum = Mid(inStr1, intStart)
    Else
        If (intlength > 0) Then
            strSum = Mid(inStr1, intStart, intlength)
        End If
    End If
    
Error1:
    SpecMid = strSum
    
End Function
Function SpecStrToInt(inStr1 As String) As Long
    Dim intRes As Long
    intRes = 0
    
    Dim strVis As String
    strVis = SpecGetVis(inStr1, 1)
    
    intRes = StrToInt(strVis)
    
    SpecStrToInt = intRes
End Function
Function SpecGetISO(inStr1 As String) As String
    Dim strRes As String
    strRes = ""
    
    Dim intLenStr As Long
    intLenStr = SpecLen(inStr1)
    
    For a = 1 To (intLenStr)
        Dim strChar As String
        strChar = SpecChar(inStr1, a) ' Tag ut spec teck
        Dim intAsc As Long
        intAsc = SpecAsc(strChar)
        Dim bConvert As Boolean 'Skall det bli vanlig ascii
        bConvert = False
        
        If (intAsc = 9) Then intAsc = 32
        If (intAsc <= 31) Then strChar = ""
        If (intAsc = 11) Then strChar = "<br/>"
        If ((intAsc >= 32) And (intAsc <= 127)) Then
            If ((intAsc >= 33) And (intAsc <= 47)) Then bConvert = True '!-/
            If ((intAsc >= 48) And (intAsc <= 57)) Then bConvert = True '0-9
            If ((intAsc >= 58) And (intAsc <= 64)) Then bConvert = True ':-@
            If ((intAsc >= 65) And (intAsc <= 90)) Then bConvert = True 'A-Z
            If ((intAsc >= 91) And (intAsc <= 96)) Then bConvert = True '[-'
            If ((intAsc >= 97) And (intAsc <= 122)) Then bConvert = True 'a-z
            If (intAsc = 32) Then bConvert = True  'mellanslag
            strChar = "&#" & IntToStr(intAsc) & ";"
        End If
        If (intAsc = 60) Then '<
            strChar = "&#" & IntToStr(intAsc) & ";"
            bConvert = False
        End If
        If (intAsc = 38) Then '& #mkn 110118
            strChar = "&#" & IntToStr(intAsc) & ";"
            bConvert = False
        End If
'        If ((intAsc >= 128) And (intAsc <= 255)) Then
'            strChar = "&#" & IntToStr(intAsc) & ";"
'        End If
'        If ((intAsc >= 300) And (intAsc <= 599)) Then
'            strChar = "&#" & IntToStr(intAsc + 945 - 397) & ";"
'        End If
        If (intAsc >= 128) Then
            strChar = "&#" & IntToStr(intAsc) & ";"
            'If (intAsc = 229) Then strChar = "&aring;" '|fffd|
            'If (intAsc = 228) Then strChar = "&auml;" '|fffd|
            'If (intAsc = 246) Then strChar = "&ouml;" '|fffd|
            'If (intAsc = 197) Then strChar = "&Aring;" '|fffd|
            'If (intAsc = 196) Then strChar = "&Auml;" '|fffd|
            'If (intAsc = 214) Then strChar = "&Ouml;" '|fffd|
        End If
        
        If (bConvert) Then
            strRes = strRes & Chr(intAsc)
        Else
            strRes = strRes & strChar
        End If
    Next
    
    SpecGetISO = strRes

End Function
Function SpecGetISOAttrVal(inStr1 As String) As String
    Dim strRes As String
    strRes = ""
    
    Dim intLenStr As Long
    intLenStr = SpecLen(inStr1)
    
    For a = 1 To (intLenStr)
        Dim strChar As String
        strChar = SpecChar(inStr1, a) ' Tag ut spec teck
        Dim intAsc As Long
        intAsc = SpecAsc(strChar)
        Dim bConvert As Boolean 'Skall det bli vanlig ascii
        bConvert = False
        
        If (intAsc = 9) Then intAsc = 32
        If (intAsc <= 31) Then strChar = ""
        If ((intAsc >= 32) And (intAsc <= 127)) Then
            If ((intAsc >= 48) And (intAsc <= 57)) Then bConvert = True '0-9
            If ((intAsc >= 65) And (intAsc <= 90)) Then bConvert = True 'A-Z
            If ((intAsc >= 97) And (intAsc <= 122)) Then bConvert = True 'a-z
            If (intAsc = Asc(".")) Then bConvert = True
            If (intAsc = Asc(")")) Then bConvert = True
            strChar = ""
        End If
        strChar = "-" 'Streck default
        If (intAsc = -3913) Then strChar = "*"  'Punktlista
      
        
        If (bConvert) Then
            strRes = strRes & Chr(intAsc)
        Else
            strRes = strRes & strChar
        End If
    Next
    
    SpecGetISOAttrVal = strRes

End Function
Function SpecGetVis(inStr1 As String, inLev As Long) As String
    ' Skapa text utan konstiga tecken, dessa f|fffd|r ett nummer
    ' InLev = 1, ger a-z, A-Z och 0-9, dock ej |fffd|,|fffd|,|fffd|
    ' InLev = 2, ger |fffd|ven vanliga tecken som t.ex punkt, bugg ej implementerad |fffd|nnu
    ' InLev = 3, ger |fffd|,|fffd| och |fffd| enligt ISO8859-1, bugg ej implementerad |fffd|nnu
    Dim strRes As String
    strRes = ""
    
    Dim intLenStr As Long
    intLenStr = SpecLen(inStr1)
    
    For a = 1 To (intLenStr)
        Dim strChar As String
        strChar = SpecChar(inStr1, a) ' Tag ut spec teck
        Dim intAsc As Long
        intAsc = SpecAsc(strChar)
        
        Dim bConvert As Boolean 'Skall det bli vanlig ascii
        bConvert = False
        If (inLev >= 1) Then
            If ((intAsc >= 48) And (intAsc <= 57)) Then bConvert = True '0-9
            If ((intAsc >= 65) And (intAsc <= 90)) Then bConvert = True 'A-Z
            If ((intAsc >= 97) And (intAsc <= 122)) Then bConvert = True 'a-z
        End If
        
        If (inLev >= 2) Then
            If (intAsc = 46) Then strChar = "."
            If (intAsc = 13) Then strChar = ""
            If (intAsc = 7) Then strChar = ""
            'If (intAsc = 1) Then strChar = "{Bild}"
            If (intAsc = 1) Then strChar = ""
            If (intAsc = 44) Then strChar = ","
            If (intAsc = 40) Then strChar = "("
            If (intAsc = 41) Then strChar = ")"
            If (intAsc = 47) Then strChar = "/"
            If (intAsc = 58) Then strChar = ":"
            If (intAsc = 59) Then strChar = ";"
            If (intAsc = 19) Then strChar = "{"
            If (intAsc = 21) Then strChar = "}"
            If (intAsc = 34) Then strChar = Chr(34)
            If (intAsc = 33) Then strChar = "!"
            If (intAsc = 167) Then strChar = "|fffd|"
            If (intAsc = 45) Then strChar = "-"
            If (intAsc = 150) Then strChar = "-"
            If (intAsc = 32) Then strChar = " "
            If (intAsc = 9) Then strChar = " "
            If (intAsc = 31) Then strChar = ""
        End If
        
        If (inLev >= 3) Then
            If (intAsc = 229) Then bConvert = True '|fffd|
            If (intAsc = 228) Then bConvert = True '|fffd|
            If (intAsc = 246) Then bConvert = True '|fffd|
            If (intAsc = 197) Then bConvert = True '|fffd|
            If (intAsc = 196) Then bConvert = True '|fffd|
            If (intAsc = 214) Then bConvert = True '|fffd|
        End If
        
        If (bConvert) Then
            strRes = strRes & Chr(intAsc)
        Else
            strRes = strRes & strChar
        End If
    Next
    
    SpecGetVis = strRes
    
End Function
Function SpecRemoveUnvis(inStr1 As String) As String
    ' Tar bort tecken som mellanslag och tabb,
    ' dvs som ej skrivs med bl|fffd|ck utan bara justera pos
     Dim strRes As String
    strRes = ""
    
    Dim intLenStr As Long
    intLenStr = SpecLen(inStr1)
    
    For a = 1 To (intLenStr)
        Dim strChar As String
        strChar = SpecChar(inStr1, a) ' Tag ut spec teck
        Dim intAsc As Long
        intAsc = SpecAsc(strChar)
        
        Dim bIsVis As Boolean '|fffd|r den synlig
        bIsVis = True
        
        If (intAsc = 32) Then bIsVis = False 'Mellanslag
        If ((intAsc <= 31) And (intAsc >= 0)) Then bIsVis = False 'Alla tecken <= 31
        
        
        If (bIsVis) Then
            strRes = strRes & strChar
        Else
            'Ta inte med tecknet
        End If
    Next
   
    SpecRemoveUnvis = strRes
End Function
Function SpecAsc(inStr1 As String) As Long
    Dim intRes As Long
    intRes = 0
    If (Len(inStr1) >= 7) Then
        intRes = StrToInt(Mid(inStr1, 2, 5)) 'Ta ut tecken 2-4, ex '{003}'
    End If
    SpecAsc = intRes
End Function

Function SpecGetLegalName(inStr1 As String) As String
    'Ger en str|fffd|ng med bara a-z,0-9 i spec-format liksom instr|fffd|ngen skall vara
    Dim strRes As String
    strRes = ""
    Dim intLenStr As Long
    intLenStr = SpecLen(inStr1)
    
    Dim a As Long
    For a = 1 To (intLenStr)
        Dim strChar As String
        strChar = SpecChar(inStr1, a) ' Tag ut spec teck
        Dim intAsc As Long
        intAsc = SpecAsc(strChar)
        
        Dim bIsLegal As Boolean '|fffd|r den giltig
        bIsLegal = False
        If ((intAsc >= 48) And (intAsc <= 57)) Then bIsLegal = True '0-9
        If ((intAsc >= 65) And (intAsc <= 90)) Then
            bIsLegal = True 'A-Z
            intAsc = intAsc + (97 - 65)
            strChar = SpecChr(intAsc)
        End If
        If ((intAsc >= 97) And (intAsc <= 122)) Then bIsLegal = True 'a-z
        
        If (bIsLegal) Then
            strRes = strRes & strChar
        Else
            'Ta inte med tecknet
        End If
    Next

    SpecGetLegalName = strRes
End Function
Function SpecTrimLeft(inStr1 As String) As String
    Dim strRes As String
    strRes = ""
    Dim bRemoved As Boolean
    bRemoved = False
    
    Dim intI As Long
    For intI = 1 To SpecLen(inStr1)
        Dim strChar As String
        strChar = SpecMid(inStr1, intI, intI)
        If (bRemoved = False) Then
            strChar = SpecRemoveUnvis(strChar)
        End If
        
        If (strChar <> "") Then bRemoved = True
        strRes = strRes & strChar
        
    Next intI
    SpecTrimLeft = strRes
End Function

Function IsNotEmpty(inStr2 As String)
    On Error GoTo Error1
    Dim bRes As Boolean
    bRes = True
    
    Dim strStriped As String
    strStriped = SpecText(inStr2)
    If (ImpLen(strStriped) >= 1) Then
        bRes = True
    Else
        bRes = False
    End If
    IsNotEmpty = bRes
    Exit Function
Error1:
    IsNotEmpty = bRes
End Function
Function TextGroup(inStr1 As String, inIdx As Long, bText As Boolean) As String
    On Error GoTo Err1
    'Utnyttjar funktionen i Spec...
    Dim strSpec As String
    strSpec = SpecText(inStr1)
    
    Dim strRes As String
    strRes = SpecGroup(strSpec, inIdx, bText)
    
    TextGroup = SpecTextReverse(strRes)
   Exit Function

Err1:
    TextGroup = ""
End Function

Attribute VB_Name = "IMPVar"
'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:
Public MstrVersion As String 'Vilken version av Office som k|fffd|rs
Public ImpDoc As Document
Public Const cIMPRelease = 1  'Release=1, Debug = 0
Public intSafeWhileIdArr(100) As Long
Public m_paracount As Long
Public mLastChangeProcMessage As Long



Sub SetDefaultValues()
    Call SetVersion
    Set ImpDoc = ActiveDocument
    Call ResetParagraphsCount
    
    
End Sub
Sub SetVersion()
    'Ta reda p|fffd| versionen
    
    Dim strVer As String
    strVer = Application.Version '9.0
    strVer = GetTextBefore(strVer, ".") 'Innan f|fffd|rsta punkten
    
    Dim intVer As Long
    intVer = StrToInt(strVer) 'G|fffd|r om till heltal
    
    'Spara v|fffd|rdet
    MstrVersion = ""
    If (intVer = 8) Then MstrVersion = "W97"
    If (intVer = 9) Then MstrVersion = "W2000"
    If (intVer = 10) Then MstrVersion = "WXP"
    If (intVer = 11) Then MstrVersion = "W2003"
End Sub
Sub InitProcMessage(inStr1 As String)

    If (MstrVersion = "W97") Then
        ImpMsg (inStr1)
    Else
        IMPejW97.IMPProcDlgShow0
        IMPProcDlg.UpdateText (inStr1)
    End If
    
End Sub
Sub ChangeProcMessage(inStr1 As String, Optional inbMajorChange As Boolean = False)
    On Error GoTo Err1
    If (MstrVersion = "W97") Then
        If (inbMajorChange) Then ImpMsg (inStr1)
    Else
        Dim thisSecond As Long
        thisSecond = Second(Now)
        If ((thisSecond <> mLastChangeProcMessage) Or (inbMajorChange)) Then
            Call IMPProcDlg.UpdateText(inStr1)
            Call IMPProcDlg.Repaint
            mLastChangeProcMessage = thisSecond
        End If
    End If

Err1:

End Sub
Sub CloseProcMessage()

    If (MstrVersion = "W97") Then
        'G|fffd|r ingenting
    Else
        Call IMPProcDlg.Hide
        If (MstrVersion = "W2003") Then
            Call Application.OnTime(Now + TimeValue("00:00:2"), "IMPVar.CloseW2003")
        End If
    End If


End Sub
Sub CloseW2003()
    'Bugg i 2003, uppdaterar inte alltid processf|fffd|nstret
        Call IMPProcDlg.Hide
End Sub
Sub AdjustMenuForTemplate()
    'ActiveDocument.CommandBars("Formatting").Controls("&Formatmall:").Width = 160
    'ActiveDocument.CommandBars("Formatting").Controls("&Formatmall:").Enabled = False
    'ActiveDocument.CommandBars("Formatting").Controls("&Numrerad lista").Enabled = False
    'ActiveDocument.CommandBars("Formatting").Controls("&Punktlista").Enabled = False
    'ActiveDocument.CommandBars("Formatting").Controls("&Minska indrag").Enabled = False
    'ActiveDocument.CommandBars("Formatting").Controls("&|fffd|ka indrag").Enabled = False
    'ActiveDocument.CommandBars("Formatting").Controls("&Teckensnitt:").Enabled = False
    'ActiveDocument.CommandBars("Formatting").Controls("&Teckenstorlek:").Enabled = False
    'ActiveDocument.CommandBars("Formatting").Controls("&Numrerad lista").Enabled = False
    'ActiveDocument.CommandBars("Formatting").Controls("&Punktlista").Enabled = False
    'ActiveDocument.CommandBars("Formatting").Controls("&Minska indrag").Enabled = False
    'ActiveDocument.CommandBars("Formatting").Controls("&|fffd|ka indrag").Enabled = False
    
    'Dim aComBar As CommandBar
    'For Each aComBar In ActiveDocument.CommandBars
    '    If (aComBar.Name = "Formatting") Then
    '        Dim aContr As CommandBarControl
    '        For Each aContr In aComBar.Controls
    '            MsgBox (aContr.Caption)
    '        Next aContr
    '    End If
    'Next aComBar
End Sub
Sub GoToStart()
    Selection.GoTo What:=wdGoToBookmark, Name:="B|fffd|rja"

End Sub
Sub GoToNormalView()
    ActiveWindow.ActivePane.Close
    If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.View.Type = wdPageView
    Else
        ActiveWindow.View.Type = wdPageView
    End If

End Sub

Sub ResetSafeWhile(inId As Long)
    intSafeWhileIdArr(inId) = 0
End Sub

Function SafeWhile(inId As Long) As Boolean
    Dim bRes As Boolean
    bRes = False
    intSafeWhileIdArr(inId) = intSafeWhileIdArr(inId) + 1
    If (intSafeWhileIdArr(inId) <= 3000) Then bRes = True
    If (inId < 10) Then
        If (intSafeWhileIdArr(inId) <= 1000000) Then bRes = True
    End If
    
    If (bRes = False) Then
        ImpMsg ("S|fffd|ker loop avslutad, id = " & IntToStr(inId))
    End If
    SafeWhile = bRes
End Function
Sub ResetParagraphsCount()
    m_paracount = 0
End Sub
Function ImpDocParagraphsCount() As Long
    Dim intRes As Long
    If (m_paracount = 0) Then m_paracount = ImpDoc.Paragraphs.Count
    intRes = m_paracount
    ImpDocParagraphsCount = intRes
    
End Function
Sub ttx()
    MsgBox (Format(Date, "d MMMM yyyy"))
End Sub

Attribute VB_Name = "IMPejW97"
'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:
'Dessa funktioner kan inte k|fffd|ras p|fffd| en W97, d|fffd|rf|fffd|r d|fffd|ljs de i en s|fffd|rskild modul.
'Vid problem med f|fffd|rkompilering p|fffd| W97, kommentera bort raderna med "...Show 0"


#Const pcW97 = 0 'Om koden g|fffd|ller f|fffd|r W97 (=1) annars (=0)
Sub IMPErrFloatShow0()
    On Error GoTo Error1
    
    #If pcW97 = 0 Then
        IMPErrFloat.Show 0
    #End If
Error1:
End Sub
Sub IMPProcDlgShow0()
    On Error GoTo Error1
    
    #If pcW97 = 0 Then
        IMPProcDlg.Show 0
    #End If
Error1:
End Sub

Sub ActiveWindowScrollIntoViewSelectionRange()
    On Error GoTo Error1
    
    #If pcW97 = 0 Then
        Call ActiveWindow.ScrollIntoView(Selection.Range)
    #End If
Error1:


End Sub

Function HasTables(inTable As Table) As Long
    HasTables = 0
    On Error GoTo Error1
    #If pcW97 = 0 Then
        HasTables = inTable.Tables.Count
    #End If
Error1:

End Function
Sub DocumentsAdd(inDoc As Document)
    On Error GoTo Error1
    
    #If pcW97 = 0 Then
        Set inDoc = Documents.Add(Visible:=False)
    #End If
Error1:

End Sub
Sub ImpDoc_Hyperlinks_Add(inStrFile As String, inStrName As String)
    On Error GoTo Error1
    
    #If pcW97 = 0 Then
        Call ImpDoc.Hyperlinks.Add(Selection.Range, inStrFile, "", "", inStrName)
    #End If
Error1:

End Sub

Function aInlineShape_AlternativeText(inShape As InlineShape) As String
    On Error GoTo Err1
    #If pcW97 = 0 Then
        aInlineShape_AlternativeText = inShape.AlternativeText
    #End If
Err1:
End Function
Function aHyperlink_TextToDisplay(inHyperlink As Hyperlink) As String
    On Error GoTo Err1
    #If pcW97 = 0 Then
        aHyperlink_TextToDisplay = inHyperlink.TextToDisplay
    #End If
Err1:
End Function

Attribute VB_Name = "ImpDoc"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:


Public mySelf As ImpDoc

Private arrChildren() As ImpElement
Private intCountChildren As Long
Private intMaxChildren As Long

Private arrEntity() As String
Private intCountEntity As Long
Private intMaxEntity As Long
'Typdeklrationer
Private intDocType As Long '1=XML, 2=HTML, 3=myndighetbv1.dtd, 4=IMPin.dtd
Public intPrintLevel As Long





Private Sub Class_Initialize()

'Initiering
    strFileContent = ""
    intCountChildren = 0
    intMaxChildren = 0
    intCountEntity = 0
    intMaxEntity = 0
   intDocType = 1
End Sub

Private Sub Class_Terminate()
'Avslut

End Sub

Public Sub SetDocType(inDocType As Long)
    intDocType = inDocType
End Sub
Public Function CreateElement(strName As String, intParent As Long) As Long
    On Error GoTo Err1
    Dim intRes As Long
    intRes = 0
    
    'Skapa nytt element
    Dim ieNew As ImpElement
    Set ieNew = New ImpElement
   
    'S|fffd|tt elementv|fffd|rden
    Call ieNew.SetElementName(strName)
'    Call ieNew.SetParent(intParent)
    Set ieNew.mImpDoc = mySelf
    
    
    'S|fffd|tt in elementet i listan
    intCountChildren = intCountChildren + 1
    Call ReDimChildren
    Set arrChildren(intCountChildren) = ieNew
    ieNew.intIdxInDoc = intCountChildren
    
    'Meddelar parent att den har nytt child
    Call ieNew.SetParent(intParent)
    intRes = intCountChildren
Err1:
    CreateElement = intRes
    
End Function
Public Function CreateGetElement(strName As String, intParent As Long) As ImpElement
    
    Set CreateGetElement = GetElement(CreateElement(strName, intParent))
End Function

Private Sub ReDimChildren()

    '|fffd|kar arrayen om antalet barn |fffd|r st|fffd|rre  |fffd|n arrayen
    If (intCountChildren > intMaxChildren) Then
        intMaxChildren = intMaxChildren + 10
        ReDim Preserve arrChildren(intMaxChildren)
    End If
End Sub
Public Function GetElement(intIdx As Long) As ImpElement
    Dim bRes As ImpElement
    On Error GoTo Err1
    Set bRes = arrChildren(intIdx)

Err1:
    Set GetElement = bRes
End Function
Public Function GetCountElement() As Long
    Dim intRes As Long
    intRes = intCountChildren
    
    GetCountElement = intCountChildren
End Function

Public Function GetChildren(inParent As Long, outArr() As Long) As Long
    'Optimerad genom att parent har sina child i en array
    Dim intRes As Long
    intRes = 0
    
    On Error GoTo Err1
    Dim ieParent As ImpElement
    Set ieParent = GetElement(inParent)
    
    intRes = ieParent.GetChildren(outArr())

Err1:
    GetChildren = intRes
End Function
Public Function GetChildIdx(inParent As Long, strElementName As String) As Long
    'Optimerad genom att parent har sina child i en array
    Dim intRes As Long
    intRes = 0
    
    On Error GoTo Err1
    
    Dim arr() As Long
    Dim arrCount As Long
    arrCount = GetChildren(inParent, arr)
    
    Dim ieElement As ImpElement
    Dim i As Long
    For i = 1 To arrCount
        Set ieElement = GetElement(arr(i))
        If (ieElement.GetElementName = strElementName) Then
            intRes = ieElement.intIdxInDoc
        End If
    Next

Err1:
    GetChildIdx = intRes

End Function


Public Function GetNodeAsFileText(inParent As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    intPrintLevel = 0
    
    Dim ieParent As ImpElement
    Set ieParent = GetElement(1)
    strRes = ieParent.GetAsFileText

Err1:
    GetNodeAsFileText = strRes
End Function
Public Function SaveToFile(inFileName As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    Dim strNodeContent As String
    strNodeContent = GetNodeAsFileText(1)
    
    Dim strDeclaration As String
    strDeclaration = "<?xml version=" & Chr(34) & "1.0" & Chr(34) & " encoding=" & Chr(34) & "ISO-8859-1" & Chr(34) & "?>"

    Dim strDocType As String
    'strDocType = Chr(13) & Chr(10) & "<!DOCTYPE myndighetsforfattning SYSTEM " & Chr(34) & "myndighetbv1.dtd" & Chr(34) & "["
    strDocType = Chr(13) & Chr(10) & "<!DOCTYPE myndighetsforfattning  " & "["
    Dim strDocTypeEnd As String
    strDocTypeEnd = Chr(13) & Chr(10) & "]>"
    
    Dim strXSLT As String
    strXSLT = Chr(13) & Chr(10) & "<!--?xml-stylesheet type=" & Chr(34) & "text/xsl" & Chr(34) & " href=" & Chr(34) & "MYNDIGHETBV12HTML.xsl" & Chr(34) & "?-->"
    'strXSLT = Chr(13) & Chr(10) & "<?xml-stylesheet type=" & Chr(34) & "text/xsl" & Chr(34) & " href=" & Chr(34) & "MYNDIGHETBV1b2HTML.xsl" & Chr(34) & "?>"
    'strXSLT = ""
    
    Dim strFile As String
    If (intDocType = 1) Then
        strFile = strDeclaration & strNodeContent
    End If
    If (intDocType = 2) Then
        strFile = strNodeContent
    End If
    If (intDocType = 3) Then
        strFile = strDeclaration & strXSLT & strDocType & GetEntityStrs & strDocTypeEnd & strNodeContent
    End If
    If (intDocType = 4) Then
        strDocType = Chr(13) & Chr(10) & "<!DOCTYPE impin  " & "["
        strFile = strDeclaration & strDocType & GetEntityStrs & strDocTypeEnd & strNodeContent
    End If
    
    'Skriv ut
    'Dim aFileSystem As FileSystemObject
    'Set aFileSystem = New Scripting.FileSystemObject
    'Dim aWriteFile As TextStream
    'Set aWriteFile = aFileSystem.OpenTextFile(inFileName, ForWriting, True, TristateFalse)
    'aWriteFile.Write (strFile)
    'SaveToFile (strFile)
    Call ImpFile.SaveToFile(strFile, inFileName)

    bRes = True
Err1:
    SaveToFile = bRes
End Function
Function GetEntityStrs() As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    strRes = strRes & Chr(13) & Chr(10) & "<!ENTITY boverket_logotype SYSTEM " & Chr(34) & "C:\IMPin\boverket_logotype.gif" & Chr(34) & " NDATA GIF>"
    
    Dim intI As Long
    For intI = 1 To intCountEntity
        strRes = strRes & Chr(13) & Chr(10) & arrEntity(intI)
    Next intI

Err1:
    GetEntityStrs = strRes
End Function
Sub AddBildEntity(strEntityRef As String, strSrc As String)
    Dim strEntity As String
    strEntity = ""
    
    On Error GoTo Err1
    
    Dim strFileLow As String
    strFileLow = LCase(strSrc)
    
    Dim strType As String
    strType = "PIC"
    If (HasString(strFileLow, ".jpg")) Then strType = "JPG"
    If (HasString(strFileLow, ".png")) Then strType = "PNG"
    If (HasString(strFileLow, ".gif")) Then strType = "GIF"
    
    
    strEntity = "<!ENTITY "
    strEntity = strEntity & strEntityRef
    strEntity = strEntity & " SYSTEM "
    strEntity = strEntity & Chr(34) & strSrc & Chr(34)
    strEntity = strEntity & " NDATA " & strType & ">"
    
    'S|fffd|tt in elementet i listan
    intCountEntity = intCountEntity + 1
    If (intCountEntity > intMaxEntity) Then
        intMaxEntity = intMaxEntity + 10
        ReDim Preserve arrEntity(intMaxEntity)
    End If
    arrEntity(intCountEntity) = strEntity
    
Err1:
End Sub
Attribute VB_Name = "ImpElement"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:


Private strElementName As String 'Namnet om element, Texten om text
Public intElementType As Long '1=element, 2=text, 3=custom tag ex PI, 9=inaktiverad

Private intParent As Long 'Idx till doc children
Public intIdxInDoc As Long 'Idx p|fffd| elementet i docens childlista ( unikt ID)
Private arrChildren() As Long 'Idx till doc children, anv|fffd|nds ej |fffd|nnu
Private intCountChildren As Long
Private intMaxChildren As Long

Private arrAttrName() As String
Private arrAttrValue() As String
Private intCountAttr As Long
Private intMaxAttr As Long

Public mImpDoc As ImpDoc




Private Sub Class_Initialize()

'Initiering
    strElementName = ""
    intParent = 0
    intElementType = 1
    
    intCountChildren = 0
    intCountAttr = 0
    intMaxChildren = 0
    intMaxAttr = 0
End Sub

Private Sub Class_Terminate()
'Avslut
    'MsgBox ("Avslutar " & strElementName)
End Sub


'************ Text functions **********************
Function GetLevelSpace() As String
    Dim strRes As String
    strRes = ""
    Dim intI As Long
    For intI = 1 To mImpDoc.intPrintLevel
        If (intI < 10) Then
            strRes = strRes & Chr(32) & Chr(32)
        End If
    Next intI
    GetLevelSpace = strRes
End Function


Public Function GetAsFileText(Optional bIncludeThisLevel As Boolean = True) As String
    Dim strRes As String
    strRes = ""
    Dim i As Long
    
    'pka 2002-03-28
    If (intElementType = 3) Then
        strRes = Chr(13) & Chr(10) & GetLevelSpace & "<" & strElementName & ">"
    ElseIf (intElementType = 9) Then
     'Inaktiverad
    ElseIf (intElementType = 1) Then
        'Starttagg
        If (bIncludeThisLevel) Then
            mImpDoc.intPrintLevel = mImpDoc.intPrintLevel + 1
            strRes = Chr(13) & Chr(10) & GetLevelSpace & "<" & strElementName
            'strRes = "<" & strElementName
            
            'attribut
            For i = 1 To intCountAttr
                strRes = strRes & " " & arrAttrName(i) & "=" & Chr(34) & arrAttrValue(i) & Chr(34)
            Next
            
            'St|fffd|ng starttagg
            strRes = strRes & ">"
        End If
        
        'H|fffd|mta subbarna
        Dim aArr() As Long
        Dim intCount As Long
        Dim ieSub As ImpElement
        
        intCount = mImpDoc.GetChildren(intIdxInDoc, aArr)
        For i = 1 To intCount
            Set ieSub = mImpDoc.GetElement(aArr(i))
            strRes = strRes & ieSub.GetAsFileText()
        Next
        
        'sluttagg
        If (bIncludeThisLevel) Then
            mImpDoc.intPrintLevel = mImpDoc.intPrintLevel - 1
            strRes = strRes & "</" & strElementName & ">"
        End If
    Else
        strRes = strElementName
    End If
    
    GetAsFileText = strRes
End Function
Sub Inactivate()
    'Ist|fffd|llet f|fffd|r att ta bort, s|fffd| inaktivera
    Call SetElementType(9)
End Sub
Sub SetElementType(ieIntElementType)
    intElementType = ieIntElementType
End Sub
Public Function AddText(inStr1 As String) As Boolean
        
    Dim intSubIdx As Long
    intSubIdx = mImpDoc.CreateElement(inStr1, intIdxInDoc)
    Dim ieSub As ImpElement
    Set ieSub = mImpDoc.GetElement(intSubIdx)
    ieSub.intElementType = 2
End Function
Public Function GetTextExcludeSubs() As String

    Dim strRes As String
    strRes = ""
    
    'H|fffd|mta subbarna
    Dim aArr() As Long
    Dim intCount As Long
    Dim ieSub As ImpElement
    
    intCount = mImpDoc.GetChildren(intIdxInDoc, aArr)
    For i = 1 To intCount
        Set ieSub = mImpDoc.GetElement(aArr(i))
        If (ieSub.intElementType = 2) Then
            strRes = strRes & ieSub.GetElementName
        End If
    Next
    
    GetTextExcludeSubs = strRes
End Function
Public Function ClearText() As Boolean
    
    'T|fffd|mmer alla pcdata p|fffd| dess str|fffd|ngar
    Dim aArr() As Long
    Dim intCount As Long
    Dim ieSub As ImpElement
    
    intCount = mImpDoc.GetChildren(intIdxInDoc, aArr)
    For i = 1 To intCount
        Set ieSub = mImpDoc.GetElement(aArr(i))
        If (ieSub.intElementType = 2) Then
            ieSub.SetElementName ("")
        End If
    Next

End Function
Public Function GetChildCount(Optional inStrElementChild As String = "") As Long
    Dim intRes As Long
    intRes = 0
    
    Dim intCountOrder As Long
    intCountOrder = 0
    
    'T|fffd|mmer alla pcdata p|fffd| dess str|fffd|ngar
    Dim aArr() As Long
    Dim intCount As Long
    Dim ieSub As ImpElement
    
    intCount = mImpDoc.GetChildren(intIdxInDoc, aArr)
    For i = 1 To intCount
        Set ieSub = mImpDoc.GetElement(aArr(i))
        If (ieSub.intElementType = 1) Then
            If ((ieSub.GetElementName = inStrElementChild) Or (inStrElementChild = "")) Then
                intRes = intRes + 1
            End If
        End If
    Next
    GetChildCount = intRes
End Function
Public Function GetChildByElement(inStrElementChild As String, Optional intOrder As Long = 1) As Long
    Dim intRes As Long
    intRes = 0
    
    Dim intCountOrder As Long
    intCountOrder = 0
    
    'T|fffd|mmer alla pcdata p|fffd| dess str|fffd|ngar
    Dim aArr() As Long
    Dim intCount As Long
    Dim ieSub As ImpElement
    
    intCount = mImpDoc.GetChildren(intIdxInDoc, aArr)
    For i = 1 To intCount
        Set ieSub = mImpDoc.GetElement(aArr(i))
        If (ieSub.intElementType = 1) Then
            If (ieSub.GetElementName = inStrElementChild) Then
                intCountOrder = intCountOrder + 1
                If (intCountOrder = intOrder) Then
                    intRes = aArr(i)
                    Exit For
                End If
            End If
        End If
    Next
    GetChildByElement = intRes
End Function
Public Function GetChildByElementAttr(inStrElementChild As String, inStrAttrName As String, inStrAttrValue As String) As Long
    Dim intRes As Long
    intRes = 0
    
    'T|fffd|mmer alla pcdata p|fffd| dess str|fffd|ngar
    Dim aArr() As Long
    Dim intCount As Long
    Dim ieSub As ImpElement
    
    intCount = mImpDoc.GetChildren(intIdxInDoc, aArr)
    For i = 1 To intCount
        Set ieSub = mImpDoc.GetElement(aArr(i))
        If (ieSub.intElementType = 1) Then
            If (ieSub.GetElementName = inStrElementChild) Then
                If (ieSub.GetAttrValue(inStrAttrName) = inStrAttrValue) Then
                    intRes = aArr(i)
                    Exit For
                End If
            End If
        End If
    Next
    GetChildByElementAttr = intRes
End Function

'************ Element functions **********************
Public Function SetElementName(inStrElementName As String) As Boolean
    strElementName = inStrElementName
    
    SetElementName = True
End Function
Public Function GetElementName() As String
    GetElementName = strElementName
End Function

'************ Children/Parent functions **********************
Public Function SetParent(inIntParent As Long) As Boolean
    intParent = inIntParent
    
    'L|fffd|gger till sig sj|fffd|lv hos parent
    If (intParent > 0) Then
        Dim ieParent As ImpElement
        Set ieParent = mImpDoc.GetElement(intParent)
        ieParent.AddChild (intIdxInDoc)
    End If
    SetParent = True
End Function
Public Function GetParent() As Long
    GetParent = intParent
End Function

'************ Attribute functions **********************

Public Function SetAttr(inStrAttrName As String, inStrAttrValue As String) As Boolean
    'Uppdaterar om Attributet finns, annars l|fffd|gger den till
    If (HasAttr(inStrAttrName) = False) Then
        intCountAttr = intCountAttr + 1
        Call ReDimAttr
        arrAttrName(intCountAttr) = inStrAttrName
        arrAttrValue(intCountAttr) = inStrAttrValue
    Else
        Dim intAttrIdx As Long
        intAttrIdx = GetAttrIdx(inStrAttrName)
        arrAttrValue(intAttrIdx) = inStrAttrValue
    End If
End Function
Public Function GetAttrValue(inStrAttrName As String) As String
    Dim strRes As String
    strRes = ""
    
    Dim i As Long
    i = GetAttrIdx(inStrAttrName)
    If (i > 0) Then strRes = arrAttrValue(i)
    
    GetAttrValue = strRes
End Function
Public Function HasAttr(inStrAttrName As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    If (GetAttrIdx(inStrAttrName) > 0) Then bRes = True
    HasAttr = bRes
End Function
Public Function GetAttrIdx(inStrAttrName As String) As Long
    Dim intRes As Long
    intRes = 0
    Dim i As Long
    For i = 1 To intCountAttr
        If (inStrAttrName = arrAttrName(i)) Then
            intRes = i
            Exit For
        End If
    Next
    GetAttrIdx = intRes
End Function

Private Sub ReDimAttr()
    '|fffd|kar arrayen om antalet barn |fffd|r st|fffd|rre  |fffd|n arrayen
    If (intCountAttr > intMaxAttr) Then
        intMaxAttr = intMaxAttr + 5
        ReDim Preserve arrAttrName(intMaxAttr)
        ReDim Preserve arrAttrValue(intMaxAttr)
    End If
End Sub
Public Function GetAttrNameAndValue(ByVal inAttrIdx As Long, ByRef strAttrName As String, ByRef strAttrValue As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    strAttrName = ""
    strAttrValue = ""
    If ((inAttrIdx > 0) And (inAttrIdx <= intCountAttr)) Then
        strAttrName = arrAttrName(inAttrIdx)
        strAttrValue = arrAttrValue(inAttrIdx)
        bRes = True
    End If
    
    GetAttrNameAndValue = bRes
End Function
Public Function CountAttr() As Long
    CountAttr = intCountAttr
End Function
Public Function DelAttr(strAttrName As String) As Boolean
    Dim bRes As Boolean
    bRes = True
    
    Dim intIdx As Long
    intIdx = GetAttrIdx(strAttrName)
    If (intIdx > 0) Then
        Dim i As Long
        For i = intIdx + 1 To intCountAttr
            arrAttrName(i - 1) = arrAttrName(i)
            arrAttrValue(i - 1) = arrAttrValue(i)
        Next
        arrAttrName(intCountAttr) = "" 'Beh|fffd|vs ej
        arrAttrValue(intCountAttr) = "" 'Beh|fffd|vs ej
        intCountAttr = intCountAttr - 1
    End If
    
    DelAttr = bRes
End Function
'************ Children functions **********************
Public Function AddChild(inIntChild As Long) As Boolean
    'L|fffd|gger till Child hos parent
        intCountChildren = intCountChildren + 1
        Call ReDimChildren
        arrChildren(intCountChildren) = inIntChild
End Function
Private Sub ReDimChildren()
    '|fffd|kar arrayen om antalet barn |fffd|r st|fffd|rre  |fffd|n arrayen
    If (intCountChildren > intMaxChildren) Then
        intMaxChildren = intMaxChildren + 10
        ReDim Preserve arrChildren(intMaxChildren)
    End If
End Sub
Public Function GetChildren(outArr() As Long) As Long
    'Parent har sina child i en array
    Dim intRes As Long
    intRes = 0
    
    ReDim Preserve outArr(intCountChildren)
    For i = 1 To intCountChildren
        outArr(i) = arrChildren(i)
    Next i
    intRes = intCountChildren
    GetChildren = intRes
End Function

Attribute VB_Name = "ImpExportWord"
Public mDocExp As ImpDoc
Public ActivePara As Paragraph
Private mintPictures As Long
Function DoAllExportWord(inDoc As ImpDoc) As Boolean
    Dim bRes As Boolean
    On Error GoTo Err1
    
    'Exportera Worddokument till mDocExp
    Set mDocExp = inDoc
    mintPictures = 0
    CustExternData.mStartWithoutMeta = 99
    
    Call DoMeta
    Call DoDocument
    CustExternData.mStartWithoutMeta = 0
    
    bRes = True
Err1:
    DoAllExportWord = bRes
End Function

Sub DoDocument()
    On Error GoTo Err1
    'Visa f|fffd|nstret
    Call ChangeProcMessage("Sparar dokumentet som XML...")
    
    'Dim parColl As Paragraphs
    'Set parColl = ImpDoc.Paragraphs
    
    Dim intCount As Long
    intCount = 0
        
    Dim paragraph1 As Paragraph
    Dim bContinue As Boolean
    bContinue = GetFirstPara(paragraph1)
    While (bContinue)
    'For Each paragraph1 In parColl
            intCount = intCount + 1
            Call ChangeProcMessage("Sparar dokumentet som XML..." & intCount & "(" & IMPVar.ImpDocParagraphsCount & ")", False)
                Set ActivePara = paragraph1
                Call DoPara(paragraph1)
                'Call DoShapeRange(paragraph1)
            bContinue = GetNextPara(paragraph1)
            If (bCancel = True) Then bContinue = False
    'Next
    Wend
    
    CloseProcMessage
    Exit Sub
    
Err1:
    ImpMsg ("Kan ej s|fffd|ka igenom dokumentet")
    
End Sub
Sub DoMeta()
    On Error GoTo Err1
    Call ChangeProcMessage("Sparar Metadata som XML...", False)
    
    'Titel
    Call DoMetaPara(GetLegalName(CustMeta.cStrPropTitel1), SpecText(CustMeta.GetTitel))
    
    'H|fffd|mta v|fffd|rden fr|fffd|n DocCustomProperties
    Dim aProp As DocumentProperty
    For Each aProp In ImpDoc.CustomDocumentProperties
        Dim strLegPropName As String
        strLegPropName = GetLegalName(aProp.Name)
        Dim strSpecPropValue As String
        strSpecPropValue = SpecText(aProp.Value)
        
        If ((IsSokord(strLegPropName) = False) And (IsTitel(strLegPropName) = False)) Then
            Call DoMetaPara(strLegPropName, strSpecPropValue)
        End If
    Next
    'Summa s|fffd|kord
    Call DoMetaPara(GetLegalName(CustMeta.cStrPropSokord), SpecText(CustMeta.GetSokord))

   Exit Sub
   
Err1:
    ImpMsg ("Kan ej spara metadata")
End Sub
Sub DoMetaPara(inStrName As String, inStrValue As String)
    
    inStrName = GetLegalName(inStrName)
    
    Dim ieStycke As ImpElement
    Dim ieChars As ImpElement
    Set ieStycke = mDocExp.CreateGetElement("para", 1)
    Call ieStycke.SetAttr("view", "metadata")
    
    Call ieStycke.SetAttr("style", inStrName)
    Call ieStycke.AddText(SpecGetVis(inStrValue, 1))
    Set ieChars = mDocExp.CreateGetElement("chars", ieStycke.intIdxInDoc)
    ieChars.AddText (SpecGetVis(inStrValue, 1))
    
End Sub
Sub ResetRange(ByRef inRange1 As Range)
    Set inRange1 = ActivePara.Range
End Sub
Sub DoShapeRange(inPara1 As Paragraph)
    On Error GoTo Err1
    If (inPara1.Range.ShapeRange.Count > 0) Then
        Dim intI As Long
        For intI = 1 To inPara1.Range.ShapeRange.Count
            Dim aShape As Shape
            Set aShape = inPara1.Range.ShapeRange(intI)
            If (aShape.Type = msoTextBox) Then
                Call DoTextBoxShape(aShape)
                Set ActivePara = inPara1
            ElseIf (aShape.Type = msoPicture) Then
                Call DoPictureShape(aShape)
            Else
            End If
        Next intI
    End If
Err1:
End Sub
Sub DoPictureShape(aShape As Shape)

'    MsgBox ("En flytande bild")
End Sub
Sub DoTextBoxShape(aShape As Shape)
    Dim aPara As Paragraph
    For Each aPara In aShape.TextFrame.TextRange.Paragraphs
        Set ActivePara = aPara
        Call DoPara(aPara)
    Next aPara
End Sub

Sub DoPara(inPara1 As Paragraph)
    On Error GoTo Err1
    'Para str|fffd|ngar
    Dim strText As String
    strText = inPara1.Range.text
    Dim strStyle As String
    strStyle = IMPFunction.GetParaStyleAsLegal(inPara1)
    Dim strPage As String
    strPage = GetPage(inPara1)
    Dim strSpecText As String
    strSpecText = SpecText(inPara1.Range.text)
    Dim strTab As String
    strTab = GetTab(inPara1)
    Dim strSection As String
    strSection = IntToStr(GetSectionIdxFromRange(inPara1.Range))

    'Para element
    Dim ieStycke As ImpElement
    Dim ieChars As ImpElement
    Set ieStycke = mDocExp.CreateGetElement("para", 1)
    Call ieStycke.SetAttr("style", strStyle)
    Call ieStycke.SetAttr("page", strPage)
    Call ieStycke.SetAttr("tab", strTab)
    Call ieStycke.SetAttr("section", strSection)
    Call ieStycke.AddText(SpecGetVis(strSpecText, 1))
    
   'Listor och tabeller
    Call AddTableDataToElement(inPara1, ieStycke)
    Call AddListDataToElement(inPara1, ieStycke, strText, strStyle)
    Call AddFootnoteDataToElement(inPara1, ieStycke)
    
    Dim rngSearch As Range
    Set rngSearch = inPara1.Range
    
    'S|fffd|tt range efter likhet
    Call rngSearch.SetRange(inPara1.Range.Start, inPara1.Range.End) 'Set range kan vara mindre |fffd|n parans
    Dim minStart As Long
    Dim maxEnd As Long
    minStart = rngSearch.Start
    maxEnd = rngSearch.End
    
    'Italic
    Dim lngItalicStart As Long
    Dim lngItalicEnd As Long
    lngItalicStart = minStart
    lngItalicEnd = minStart
    
    'Bold
    Dim lngBoldStart As Long
    Dim lngBoldEnd As Long
    lngBoldStart = minStart
    lngBoldEnd = minStart
    
    'Underline
    Dim lngUnderlineStart As Long
    Dim lngUnderlineEnd As Long
    lngUnderlineStart = minStart
    lngUnderlineEnd = minStart
    
    'Hidden
    Dim lngHiddenStart As Long
    Dim lngHiddenEnd As Long
    lngHiddenStart = minStart
    lngHiddenEnd = minStart
    
    'Exponent
    Dim lngExponentStart As Long
    Dim lngExponentEnd As Long
    lngExponentStart = minStart
    lngExponentEnd = minStart
    
    'Index
    Dim lngIndexStart As Long
    Dim lngIndexEnd As Long
    lngIndexStart = minStart
    lngIndexEnd = minStart
    
    'Footnote
    Dim lngFootnoteStart As Long
    Dim lngFootnoteEnd As Long
    lngFootnoteStart = minStart
    lngFootnoteEnd = minStart
    
    'Hyperlink
    Dim lngHyperlinkStart As Long
    Dim lngHyperlinkEnd As Long
    lngHyperlinkStart = minStart
    lngHyperlinkEnd = minStart
    
    'Field
    Dim lngFieldStart As Long
    Dim lngFieldEnd As Long
    lngFieldStart = minStart
    lngFieldEnd = minStart
    
    'Teckenmall
    Dim lngTeckenmallStart As Long
    Dim lngTeckenmallEnd As Long
    lngTeckenmallStart = minStart
    lngTeckenmallEnd = minStart
    
    'InlineShape
    Dim lngInlineShapeStart As Long
    Dim lngInlineShapeEnd As Long
    lngInlineShapeStart = minStart
    lngInlineShapeEnd = minStart
    
    
    'S|fffd|tt range efter likhet
    Dim posStart As Long
    Dim posEnd As Long
    posStart = minStart
    posEnd = maxEnd  'Anta hela och krymp
    
    
    
    While (posStart < posEnd)
        'Skapa nytt element och s|fffd|tt style, texten kommer n|fffd|r fler tecken kollats
        Set ieChars = mDocExp.CreateGetElement("chars", ieStycke.intIdxInDoc)
        posEnd = maxEnd
        
        'Italic
        If (lngItalicEnd <= posStart) Then
            Call SetNextItalicStartEnd(posStart, posEnd, lngItalicStart, lngItalicEnd)
        End If
        posEnd = AdjustMaxAfterStartEnd(posStart, posEnd, lngItalicStart, lngItalicEnd)
        If (InStartEnd(posStart, posEnd, lngItalicStart, lngItalicEnd)) Then
            Call ieChars.SetAttr("italic", "yes")
        End If
        
        'Bold
        If (lngBoldEnd <= posStart) Then
            Call SetNextBoldStartEnd(posStart, posEnd, lngBoldStart, lngBoldEnd)
        End If
        posEnd = AdjustMaxAfterStartEnd(posStart, posEnd, lngBoldStart, lngBoldEnd)
        If (InStartEnd(posStart, posEnd, lngBoldStart, lngBoldEnd)) Then
            Call ieChars.SetAttr("bold", "yes")
        End If
        
        'Underline
        If (lngUnderlineEnd <= posStart) Then
            Call SetNextUnderlineStartEnd(posStart, posEnd, lngUnderlineStart, lngUnderlineEnd)
        End If
        posEnd = AdjustMaxAfterStartEnd(posStart, posEnd, lngUnderlineStart, lngUnderlineEnd)
        If (InStartEnd(posStart, posEnd, lngUnderlineStart, lngUnderlineEnd)) Then
            Call ieChars.SetAttr("underline", "yes")
        End If
        
        'Hidden
        If (lngHiddenEnd <= posStart) Then
            Call SetNextHiddenStartEnd(posStart, posEnd, lngHiddenStart, lngHiddenEnd)
        End If
        posEnd = AdjustMaxAfterStartEnd(posStart, posEnd, lngHiddenStart, lngHiddenEnd)
        If (InStartEnd(posStart, posEnd, lngHiddenStart, lngHiddenEnd)) Then
            Call ieChars.SetAttr("hidden", "yes")
        End If
        
        'Exponent
        If (lngExponentEnd <= posStart) Then
            Call SetNextExponentStartEnd(posStart, posEnd, lngExponentStart, lngExponentEnd)
        End If
        posEnd = AdjustMaxAfterStartEnd(posStart, posEnd, lngExponentStart, lngExponentEnd)
        If (InStartEnd(posStart, posEnd, lngExponentStart, lngExponentEnd)) Then
            Call ieChars.SetAttr("exponent", "yes")
        End If
        
        'Index
        If (lngIndexEnd <= posStart) Then
            Call SetNextIndexStartEnd(posStart, posEnd, lngIndexStart, lngIndexEnd)
        End If
        posEnd = AdjustMaxAfterStartEnd(posStart, posEnd, lngIndexStart, lngIndexEnd)
        If (InStartEnd(posStart, posEnd, lngIndexStart, lngIndexEnd)) Then
            Call ieChars.SetAttr("index", "yes")
        End If
        
        'Footnote
        If (lngFootnoteEnd <= posStart) Then
            Call SetNextFootnoteStartEnd(posStart, posEnd, lngFootnoteStart, lngFootnoteEnd)
        End If
        posEnd = AdjustMaxAfterStartEnd(posStart, posEnd, lngFootnoteStart, lngFootnoteEnd)
        If (InStartEnd(posStart, posEnd, lngFootnoteStart, lngFootnoteEnd)) Then
            Call ieChars.SetAttr("footnote", SpecGetVis(SpecText(GetFootnoteText(posStart, posEnd)), 1))
        End If
        
        'Hyperlink
        If (lngHyperlinkEnd <= posStart) Then
            Call SetNextHyperlinkStartEnd(posStart, posEnd, lngHyperlinkStart, lngHyperlinkEnd)
        End If
        posEnd = AdjustMaxAfterStartEnd(posStart, posEnd, lngHyperlinkStart, lngHyperlinkEnd)
        If (InStartEnd(posStart, posEnd, lngHyperlinkStart, lngHyperlinkEnd)) Then
            Call ieChars.SetAttr("hyperlink", GetHyperlinkValue(posStart, posEnd))
            'Call ieChars.SetAttr("hyperlink", "yes")
            'Call ieChars.SetAttr("hyperlinktext", SpecGetVis(SpecText(GetHyperlinkText(posStart, posEnd)), 1))
            'Call ieChars.SetAttr("hyperlinkvalue", SpecGetVis(SpecText(GetHyperlinkValue(posStart, posEnd)), 1))
            
            'Inga f|fffd|ltbrytningar i hyperl|fffd|nk
            lngFieldStart = posEnd
            lngFieldEnd = posEnd
            Call ieChars.DelAttr("underline")
        End If
        
        'Field
        If (lngFieldEnd <= posStart) Then
            Call SetNextFieldStartEnd(posStart, posEnd, lngFieldStart, lngFieldEnd)
        End If
        posEnd = AdjustMaxAfterStartEnd(posStart, posEnd, lngFieldStart, lngFieldEnd)
        If (InStartEnd(posStart, posEnd, lngFieldStart, lngFieldEnd)) Then
            Call ieChars.SetAttr("field", "yes")
            Call ieChars.SetAttr("fieldvalue", SpecGetVis(SpecText(GetFieldValue(posStart, posEnd)), 1))
        End If
        
        'Teckenmall
        If (lngTeckenmallEnd <= posStart) Then
            Call SetNextTeckenmallStartEnd(posStart, posEnd, lngTeckenmallStart, lngTeckenmallEnd)
        End If
        posEnd = AdjustMaxAfterStartEnd(posStart, posEnd, lngTeckenmallStart, lngTeckenmallEnd)
        If (InStartEnd(posStart, posEnd, lngTeckenmallStart, lngTeckenmallEnd)) Then
            Call ieChars.SetAttr("teckenmall", SpecGetVis(SpecText(GetTeckenmallValue(posStart, posEnd)), 1))
        End If
        
        'InlineShape
        If (lngInlineShapeEnd <= posStart) Then
            Call SetNextInlineShapeStartEnd(posStart, posEnd, lngInlineShapeStart, lngInlineShapeEnd)
        End If
        posEnd = AdjustMaxAfterStartEnd(posStart, posEnd, lngInlineShapeStart, lngInlineShapeEnd)
        If (InStartEnd(posStart, posEnd, lngInlineShapeStart, lngInlineShapeEnd)) Then
            mintPictures = mintPictures + 1
            Call ieChars.SetAttr("inlineshape", IntToStr(mintPictures))
            Call ieChars.SetAttr("alt", SpecGetVis(SpecText(GetInlineShapeAlttext(posStart, posEnd)), 1))
            Call ieChars.SetAttr("src", GetInlineShapeSrc(posStart, posEnd))
        End If
        
        
        'Texten
        Call rngSearch.SetRange(posStart, posEnd)
        ieChars.AddText (GetRangeTextAsCharText(rngSearch))
        'ieChars.AddText (SpecGetVis(SpecText(rngSearch.Text), 1))
        
        'Nytt varv
        If (posStart >= posEnd) Then
            'N|fffd|got fel, avbryt
        Else
            posStart = posEnd
            posEnd = maxEnd 'Anta hela och krymp
        End If
    Wend
    
    Exit Sub
Err1:
    MsgBox ("Exportfel p|fffd| stycket: " & strText)
End Sub
Function GetRangeTextAsCharText(inRange As Range) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    'strRes = SpecGetVis(SpecText(inRange.Text), 1) 'Bugg, h|fffd|mta symboler
    
    Dim rngChar As Range
    For Each rngChar In inRange.Characters
        Dim bOk As Boolean
        bOk = True
        If (rngChar.Start < inRange.Start) Then bOk = False 'Ibland str|fffd|cker characters ut sig till v|fffd|nster
        
        If (bOk) Then
            Dim strChar As String
            strChar = rngChar.text
            If (strChar = "(") Then
                strRes = strRes & IMPSpecText.SpecChr(GetLeftParantesSymbol(rngChar))
            ElseIf (strChar = "") Then
            Else
                strRes = strRes & SpecGetVis(SpecText(strChar), 1)
            End If
        End If
    Next rngChar
    
Err1:
    GetRangeTextAsCharText = strRes
End Function
Function GetLeftParantesSymbol(inRange As Range) As Long
    Dim intRes As Long
    intRes = 40
    On Error GoTo Err1
    
    'Bugg,Kopiera in och kolla plaintext.
Err1:
    GetLeftParantesSymbol = intRes
End Function
'GetFootnoteText
Function GetFootnoteText(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
    'Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    If (rngSearch.Footnotes.Count > 0) Then
        strRes = rngSearch.Footnotes(1).Range.text
    End If
Err1:
    GetFootnoteText = strRes
End Function
Function GetHyperlinkText(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    If (rngSearch.Hyperlinks.Count > 0) Then
        If (MstrVersion <> "W97") Then
            strRes = aHyperlink_TextToDisplay(rngSearch.Hyperlinks(1))
        Else
            strRes = rngSearch.text
        End If
        'strRes = rngSearch.Hyperlinks(1).TextToDisplay
    End If
Err1:
    GetHyperlinkText = strRes
End Function
Function GetHyperlinkValue(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    If (rngSearch.Hyperlinks.Count > 0) Then
        strRes = rngSearch.Hyperlinks(1).Address
    End If
Err1:
    GetHyperlinkValue = strRes
End Function
Function GetFieldValue(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
     Call ResetRange(rngSearch)
'   Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    If (rngSearch.Fields.Count > 0) Then
        strRes = rngSearch.Fields(1).Type
    End If
Err1:
    GetFieldValue = strRes
End Function
Function GetTeckenmallValue(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    strRes = GetRangeStyleAsLegal(rngSearch)
Err1:
    GetTeckenmallValue = strRes
End Function
Function GetInlineShapeAlttext(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    If (rngSearch.InlineShapes.Count > 0) Then
        If (MstrVersion <> "W97") Then
            strRes = aInlineShape_AlternativeText(rngSearch.InlineShapes(1))
        Else
            strRes = rngSearch.text
        End If
        'strRes = rngSearch.InlineShapes(1).AlternativeText
    End If
Err1:
    GetInlineShapeAlttext = strRes
End Function
Function GetInlineShapeSrc(inPosStart As Long, inPosEnd As Long) As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(inPosStart, inPosEnd) 'Start
    If (rngSearch.InlineShapes.Count > 0) Then
        strRes = CustFile.ExportShape(rngSearch.InlineShapes(1), GetPictureName, IsFirstPicture)
    End If
Err1:
    GetInlineShapeSrc = strRes
End Function
Function IsFirstPicture() As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    If (mintPictures = 1) Then bRes = True
Err1:
    IsFirstPicture = bRes
End Function
Function GetPictureName() As String
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    'Uppdatera r|fffd|knaren och bygg upp namnet
    'strRes = "bild" & IntToStr(mintPictures)
    strRes = ImpFile.ExtractFileNameFromSuffix(ImpDoc.Name) & "_" & IntToStr(mintPictures)
    
Err1:
    GetPictureName = strRes
End Function
Function GetPage(inPara1 As Paragraph)
    Dim strRes As String
    strRes = "0"
    On Error GoTo Err1
    strRes = inPara1.Range.Information(wdActiveEndPageNumber)
Err1:
    GetPage = strRes
End Function
Function GetTab(inPara1 As Paragraph)
    Dim strRes As String
    strRes = "0"
    On Error GoTo Err1
    Dim intRound As Long
    intRound = inPara1.Range.ParagraphFormat.LeftIndent
    strRes = IntToStr(intRound)
Err1:
    GetTab = strRes
End Function

Function InStartEnd(posStart As Long, posMax As Long, lngStart As Long, lngEnd As Long) As Boolean
    Dim bRes As Boolean
    bRes = False
    If (lngStart <= posStart) Then '|fffd|r det i omr|fffd|det
        If (lngEnd >= posStart) Then
            bRes = True
        End If
    End If
    
    InStartEnd = bRes
End Function
Function AdjustMaxAfterStartEnd(posStart As Long, posMax As Long, lngStart As Long, lngEnd As Long) As Long
    Dim lngRes As Long
    lngRes = posMax
    'Slutpositionen |fffd|r d|fffd|r n|fffd|got slutar/b|fffd|rja
    
    On Error GoTo Err1
    If (lngStart >= lngEnd) Then 'omr|fffd|det b|fffd|rjar senare
        GoTo Err1
    End If
    
    If (lngEnd < lngRes) Then   'Slutet av omr|fffd|det styr range
        lngRes = lngEnd
    End If
    If ((lngStart > posStart) And (lngStart < lngRes)) Then  'En start av annat omr|fffd|de styr range
        lngRes = lngStart
    End If
    
Err1:
    AdjustMaxAfterStartEnd = lngRes
End Function

Sub SetNextItalicStartEnd(posStart As Long, posEnd As Long, ByRef italicStart As Long, ByRef italicEnd As Long)
    Dim rngSearch As Range
     Call ResetRange(rngSearch)
'   Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(posStart, posEnd) 'Start
    italicStart = GetNextItalicPos(rngSearch, True)
    Call rngSearch.SetRange(italicStart, posEnd) 'Slut
    italicEnd = GetNextItalicPos(rngSearch, False)
    If (italicEnd < italicStart) Then italicEnd = italicStart

End Sub
Sub SetNextBoldStartEnd(posStart As Long, posEnd As Long, ByRef BoldStart As Long, ByRef BoldEnd As Long)
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(posStart, posEnd) 'Start
    BoldStart = GetNextBoldPos(rngSearch, True)
    Call rngSearch.SetRange(BoldStart, posEnd) 'Slut
    BoldEnd = GetNextBoldPos(rngSearch, False)
    If (BoldEnd < BoldStart) Then BoldEnd = BoldStart

End Sub
Sub SetNextUnderlineStartEnd(posStart As Long, posEnd As Long, ByRef UnderlineStart As Long, ByRef UnderlineEnd As Long)
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(posStart, posEnd) 'Start
    UnderlineStart = GetNextUnderlinePos(rngSearch, 1)
    Call rngSearch.SetRange(UnderlineStart, posEnd) 'Slut
    UnderlineEnd = GetNextUnderlinePos(rngSearch, 0)
    If (UnderlineEnd < UnderlineStart) Then UnderlineEnd = UnderlineStart

End Sub
Sub SetNextHiddenStartEnd(posStart As Long, posEnd As Long, ByRef HiddenStart As Long, ByRef HiddenEnd As Long)
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(posStart, posEnd) 'Start
    HiddenStart = GetNextHiddenPos(rngSearch, True)
    Call rngSearch.SetRange(HiddenStart, posEnd) 'Slut
    HiddenEnd = GetNextHiddenPos(rngSearch, False)
    If (HiddenEnd < HiddenStart) Then HiddenEnd = HiddenStart

End Sub
Sub SetNextExponentStartEnd(posStart As Long, posEnd As Long, ByRef ExponentStart As Long, ByRef ExponentEnd As Long)
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(posStart, posEnd) 'Start
    ExponentStart = GetNextExponentPos(rngSearch, True)
    Call rngSearch.SetRange(ExponentStart, posEnd) 'Slut
    ExponentEnd = GetNextExponentPos(rngSearch, False)
    If (ExponentEnd < ExponentStart) Then ExponentEnd = ExponentStart

End Sub
Sub SetNextIndexStartEnd(posStart As Long, posEnd As Long, ByRef IndexStart As Long, ByRef IndexEnd As Long)
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(posStart, posEnd) 'Start
    IndexStart = GetNextIndexPos(rngSearch, True)
    Call rngSearch.SetRange(IndexStart, posEnd) 'Slut
    IndexEnd = GetNextIndexPos(rngSearch, False)
    If (IndexEnd < IndexStart) Then IndexEnd = IndexStart

End Sub
Sub SetNextFootnoteStartEnd(posStart As Long, posEnd As Long, ByRef FootnoteStart As Long, ByRef FootnoteEnd As Long)
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(posStart, posEnd) 'Start
    FootnoteStart = GetNextFootnotePos(rngSearch, True)
    Call rngSearch.SetRange(FootnoteStart, posEnd) 'Slut
    FootnoteEnd = GetNextFootnotePos(rngSearch, False)
    If (FootnoteEnd < FootnoteStart) Then FootnoteEnd = FootnoteStart

End Sub
Sub SetNextHyperlinkStartEnd(posStart As Long, posEnd As Long, ByRef HyperlinkStart As Long, ByRef HyperlinkEnd As Long)
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(posStart, posEnd) 'Start
    HyperlinkStart = GetNextHyperlinkPos(rngSearch, True)
    Call rngSearch.SetRange(HyperlinkStart, posEnd) 'Slut
    HyperlinkEnd = GetNextHyperlinkPos(rngSearch, False)
    If (HyperlinkEnd < HyperlinkStart) Then HyperlinkEnd = HyperlinkStart

End Sub
Sub SetNextFieldStartEnd(posStart As Long, posEnd As Long, ByRef FieldStart As Long, ByRef FieldEnd As Long)
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(posStart, posEnd) 'Start
    FieldStart = GetNextFieldPos(rngSearch, True)
    Call rngSearch.SetRange(FieldStart, posEnd) 'Slut
    FieldEnd = GetNextFieldPos(rngSearch, False)
    If (FieldEnd < FieldStart) Then FieldEnd = FieldStart

End Sub
Sub SetNextTeckenmallStartEnd(posStart As Long, posEnd As Long, ByRef TeckenmallStart As Long, ByRef TeckenmallEnd As Long)
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(posStart, posEnd) 'Start
    TeckenmallStart = rngSearch.End + 1
    TeckenmallEnd = rngSearch.End + 1
    
    
    Dim intI As Long
    Dim intCount As Long
    intCount = StrToInt(GetTeckenmall(0))
    For intI = 1 To intCount
        Dim strTeckenMall As String
        strTeckenMall = GetTeckenmall(intI)
        
        Dim thisStart As Long
        Dim thisEnd As Long
        If (GetNextTeckenmallPos(rngSearch, strTeckenMall, thisStart, thisEnd)) Then
            If (thisStart < TeckenmallStart) Then
                TeckenmallStart = thisStart
                TeckenmallEnd = thisEnd
            End If
        End If
    Next intI

End Sub
Sub SetNextInlineShapeStartEnd(posStart As Long, posEnd As Long, ByRef InlineShapeStart As Long, ByRef InlineShapeEnd As Long)
    Dim rngSearch As Range
    Call ResetRange(rngSearch)
'    Set rngSearch = ImpDoc.Range
    Call rngSearch.SetRange(posStart, posEnd) 'Start
    InlineShapeStart = GetNextInlineShapePos(rngSearch, True)
    Call rngSearch.SetRange(InlineShapeStart, posEnd) 'Slut
    InlineShapeEnd = GetNextInlineShapePos(rngSearch, False)
    If (InlineShapeEnd < InlineShapeStart) Then InlineShapeEnd = InlineShapeStart

End Sub
Function GetNextItalicPos(inRange1 As Range, Optional inStart As Boolean = True) As Long
    'Returnerar positionen d|fffd| Italic b|fffd|rjar eller slutar. Efter Range om inget hittas
    Dim lngRes As Long
    lngRes = inRange1.End
    On Error GoTo Err1
    
    Dim lngMin As Long
    lngMin = inRange1.Start
    
    If ((inRange1.Italic = wdUndefined) Or (inRange1.Italic = inStart)) Then
        Dim rngWord As Range
        For Each rngWord In inRange1.Words
            If ((rngWord.Italic = wdUndefined) Or (rngWord.Italic = inStart)) Then
                If (rngWord.Start >= lngMin) Then lngRes = rngWord.Start
                Dim rngChar As Range
                For Each rngChar In rngWord.Characters
                    If ((rngChar.Italic = inStart) And (rngChar.Start >= lngMin)) Then
                        lngRes = rngChar.Start
                        Exit For
                    End If
                Next rngChar
            End If
            If (lngRes < (inRange1.End)) Then Exit For
        Next rngWord
    End If

Err1:
    GetNextItalicPos = lngRes
End Function

Function GetNextBoldPos(inRange1 As Range, Optional inStart As Boolean = True) As Long
    'Returnerar positionen d|fffd| Bold b|fffd|rjar eller slutar. Efter Range om inget hittas
    Dim lngRes As Long
    lngRes = inRange1.End
    On Error GoTo Err1
    
    Dim lngMin As Long
    lngMin = inRange1.Start
    
    If ((inRange1.Bold = wdUndefined) Or (inRange1.Bold = inStart)) Then
        Dim rngWord As Range
        For Each rngWord In inRange1.Words
            If ((rngWord.Bold = wdUndefined) Or (rngWord.Bold = inStart)) Then
                If (rngWord.Start >= lngMin) Then lngRes = rngWord.Start
                Dim rngChar As Range
                For Each rngChar In rngWord.Characters
                    If ((rngChar.Bold = inStart) And (rngChar.Start >= lngMin)) Then
                        lngRes = rngChar.Start
                        Exit For
                    End If
                Next rngChar
            End If
            If (lngRes < (inRange1.End)) Then Exit For
        Next rngWord
    End If

Err1:
    GetNextBoldPos = lngRes
End Function
Function GetNextUnderlinePos(inRange1 As Range, Optional inStart As Long = 1) As Long
    'Returnerar positionen d|fffd| Underline b|fffd|rjar eller slutar. Efter Range om inget hittas
    Dim lngRes As Long
    lngRes = inRange1.End
    On Error GoTo Err1
    
    Dim lngMin As Long
    lngMin = inRange1.Start
    
    If ((inRange1.Underline = wdUndefined) Or (inRange1.Underline = inStart)) Then
        Dim rngWord As Range
        For Each rngWord In inRange1.Words
            If ((rngWord.Underline = wdUndefined) Or (rngWord.Underline = inStart)) Then
                If (rngWord.Start >= lngMin) Then lngRes = rngWord.Start
                Dim rngChar As Range
                For Each rngChar In rngWord.Characters
                    Dim bMatch As Boolean
                    bMatch = False
                    If (inStart And rngChar.Underline >= 1) Then bMatch = True
                    If (rngChar.Underline = inStart) Then bMatch = True
                    If ((bMatch) And (rngChar.Start >= lngMin)) Then
                        lngRes = rngChar.Start
                        Exit For
                    End If
                Next rngChar
            End If
            If (lngRes < (inRange1.End)) Then Exit For
        Next rngWord
    End If

Err1:
    GetNextUnderlinePos = lngRes
End Function
Function GetNextHiddenPos(inRange1 As Range, Optional inStart As Boolean = True) As Long
    'Returnerar positionen d|fffd| Hidden b|fffd|rjar eller slutar. Efter Range om inget hittas
    Dim lngRes As Long
    lngRes = inRange1.End
    On Error GoTo Err1
    
    Dim lngMin As Long
    lngMin = inRange1.Start
    
    If ((inRange1.Font.Hidden = wdUndefined) Or (inRange1.Font.Hidden = inStart)) Then
        Dim rngWord As Range
        For Each rngWord In inRange1.Words
            If ((rngWord.Font.Hidden = wdUndefined) Or (rngWord.Font.Hidden = inStart)) Then
                If (rngWord.Start >= lngMin) Then lngRes = rngWord.Start
                Dim rngChar As Range
                For Each rngChar In rngWord.Characters
                    If ((rngChar.Font.Hidden = inStart) And (rngChar.Start >= lngMin)) Then
                        lngRes = rngChar.Start
                        Exit For
                    End If
                Next rngChar
            End If
            If (lngRes < (inRange1.End)) Then Exit For
        Next rngWord
    End If

Err1:
    GetNextHiddenPos = lngRes
End Function
Function GetNextExponentPos(inRange1 As Range, Optional inStart As Boolean = True) As Long
    'Returnerar positionen d|fffd| Exponent b|fffd|rjar eller slutar. Efter Range om inget hittas
    Dim lngRes As Long
    lngRes = inRange1.End
    On Error GoTo Err1
    
    Dim lngMin As Long
    lngMin = inRange1.Start
    
    If ((inRange1.Font.Superscript = wdUndefined) Or (inRange1.Font.Superscript = inStart)) Then
        Dim rngWord As Range
        For Each rngWord In inRange1.Words
            If ((rngWord.Font.Superscript = wdUndefined) Or (rngWord.Font.Superscript = inStart)) Then
                If (rngWord.Start >= lngMin) Then lngRes = rngWord.Start
                Dim rngChar As Range
                For Each rngChar In rngWord.Characters
                    If ((rngChar.Font.Superscript = inStart) And (rngChar.Start >= lngMin)) Then
                        lngRes = rngChar.Start
                        Exit For
                    End If
                Next rngChar
            End If
            If (lngRes < (inRange1.End)) Then Exit For
        Next rngWord
    End If

Err1:
    GetNextExponentPos = lngRes
End Function

Function GetNextIndexPos(inRange1 As Range, Optional inStart As Boolean = True) As Long
    'Returnerar positionen d|fffd| Index b|fffd|rjar eller slutar. Efter Range om inget hittas
    Dim lngRes As Long
    lngRes = inRange1.End
    On Error GoTo Err1
    
    Dim lngMin As Long
    lngMin = inRange1.Start
    
    If ((inRange1.Font.Superscript = wdUndefined) Or (inRange1.Font.Subscript = inStart)) Then
        Dim rngWord As Range
        For Each rngWord In inRange1.Words
            If ((rngWord.Font.Superscript = wdUndefined) Or (rngWord.Font.Subscript = inStart)) Then
                If (rngWord.Start >= lngMin) Then lngRes = rngWord.Start
                Dim rngChar As Range
                For Each rngChar In rngWord.Characters
                    If ((rngChar.Font.Subscript = inStart) And (rngChar.Start >= lngMin)) Then
                        lngRes = rngChar.Start
                        Exit For
                    End If
                Next rngChar
            End If
            If (lngRes < (inRange1.End)) Then Exit For
        Next rngWord
    End If

Err1:
    GetNextIndexPos = lngRes
End Function
Function GetNextFootnotePos(inRange1 As Range, Optional inStart As Boolean = True) As Long
    'Returnerar positionen d|fffd| Footnote b|fffd|rjar eller slutar. Efter Range om inget hittas
    Dim lngRes As Long
    lngRes = inRange1.End
    On Error GoTo Err1
    
    Dim lngMin As Long
    lngMin = inRange1.Start
    
    If (inStart) Then
        If (inRange1.Footnotes.Count >= 1) Then
            Dim rngWord As Range
            For Each rngWord In inRange1.Words
                If (rngWord.Footnotes.Count >= 1) Then
                    If (rngWord.Start >= lngMin) Then lngRes = rngWord.Start
                    Dim rngChar As Range
                    For Each rngChar In rngWord.Characters
                        If ((rngChar.Footnotes.Count >= 1) And (rngChar.Start >= lngMin)) Then
                            lngRes = rngChar.Start
                            Exit For
                        End If
                    Next rngChar
                End If
                If (lngRes < (inRange1.End)) Then Exit For
            Next rngWord
        End If
    Else
        Dim rngChar2 As Range
        For Each rngChar2 In inRange1.Characters
            If ((rngChar2.Footnotes.Count = 0) And (rngChar.Start >= lngMin)) Then
                lngRes = rngChar2.Start
                Exit For
             End If
        Next rngChar2
    End If

Err1:
    GetNextFootnotePos = lngRes
End Function
Function GetNextHyperlinkPos(inRange1 As Range, Optional inStart As Boolean = True) As Long
    'Returnerar positionen d|fffd| Hyperlink b|fffd|rjar eller slutar. Efter Range om inget hittas
    Dim lngRes As Long
    lngRes = inRange1.End
    On Error GoTo Err1
    
    Dim lngMin As Long
    lngMin = inRange1.Start
    
    If (inStart) Then
        If (inRange1.Hyperlinks.Count >= 1) Then
            Dim rngWord As Range
            For Each rngWord In inRange1.Words
                If (rngWord.Hyperlinks.Count >= 1) Then
                    If (rngWord.Start >= lngMin) Then lngRes = rngWord.Start
                    Dim rngChar As Range
                    For Each rngChar In rngWord.Characters
                        If ((rngChar.Hyperlinks.Count >= 1) And (rngChar.Start >= lngMin)) Then
                            lngRes = rngChar.Start
                            Exit For
                        End If
                    Next rngChar
                End If
                If (lngRes < (inRange1.End)) Then Exit For
            Next rngWord
        End If
    Else
        Dim rngChar2 As Range
        For Each rngChar2 In inRange1.Characters
            If ((rngChar2.Hyperlinks.Count = 0) And (rngChar2.Start >= lngMin)) Then
                lngRes = rngChar2.Start
                Exit For
             End If
        Next rngChar2
    End If

Err1:
    GetNextHyperlinkPos = lngRes
End Function
Function GetNextFieldPos(inRange1 As Range, Optional inStart As Boolean = True) As Long
    'Returnerar positionen d|fffd| Field b|fffd|rjar eller slutar. Efter Range om inget hittas
    Dim lngRes As Long
    lngRes = inRange1.End
    On Error GoTo Err1
    
    Dim lngMin As Long
    lngMin = inRange1.Start
    
    If (inStart) Then
        If (inRange1.Fields.Count >= 1) Then
            Dim rngWord As Range
            For Each rngWord In inRange1.Words
                If (rngWord.Fields.Count >= 1) Then
                    If (rngWord.Start >= lngMin) Then lngRes = rngWord.Start
                    Dim rngChar As Range
                    For Each rngChar In rngWord.Characters
                        If ((rngChar.Fields.Count >= 1) And (rngChar.Start >= lngMin)) Then
                            lngRes = rngChar.Start
                            Exit For
                        End If
                    Next rngChar
                End If
                If (lngRes < (inRange1.End)) Then Exit For
            Next rngWord
        End If
    Else
        Dim intType As Long
        intType = 0
        Dim intCountType As Long
        intCountType = 0
        Dim rngChar2 As Range
        For Each rngChar2 In inRange1.Characters
            If (rngChar2.Fields.Count >= 1) Then
                If (intCountType = 1) Then
                    If (intType = rngChar2.Fields(1).Type) Then
                        intCountType = 2
                        lngRes = rngChar2.Start + 1
                        Exit For
                    End If
                End If
                If (intCountType = 0) Then
                    intType = rngChar2.Fields(1).Type
                    intCountType = 1
                End If
            End If
        Next rngChar2
    End If

Err1:
    GetNextFieldPos = lngRes
End Function
Function GetNextTeckenmallPos(inRange1 As Range, inStrStyle As String, ByRef lngStart As Long, ByRef lngEnd As Long) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1:

    Dim rngFind As Range
    Call ResetRange(rngFind)
'    Set rngFind = ImpDoc.Range(0, 1)
    Call rngFind.SetRange(inRange1.Start, inRange1.End)
    
    With rngFind.Find
        .Style = ImpDoc.Styles(inStrStyle)
        .Forward = True
        bRes = .Execute
    End With
    
    If (GetRangeStyleAsLegal(rngFind) = GetLegalName(inStrStyle)) Then
        bRes = True
        lngStart = rngFind.Start
        lngEnd = rngFind.End
    End If
    
Err1:
    GetNextTeckenmallPos = bRes
End Function
Function GetNextInlineShapePos(inRange1 As Range, Optional inStart As Boolean = True) As Long
    'Returnerar positionen d|fffd| InlineShape b|fffd|rjar eller slutar. Efter Range om inget hittas
    Dim lngRes As Long
    lngRes = inRange1.End
    On Error GoTo Err1
    
    Dim lngMin As Long
    lngMin = inRange1.Start
    
    If (inStart) Then
        If (inRange1.InlineShapes.Count >= 1) Then
            Dim rngWord As Range
            For Each rngWord In inRange1.Words
                If (rngWord.InlineShapes.Count >= 1) Then
                    If (rngWord.Start >= lngMin) Then lngRes = rngWord.Start
                    Dim rngChar As Range
                    For Each rngChar In rngWord.Characters
                        If ((rngChar.InlineShapes.Count >= 1) And (rngChar.Start >= lngMin)) Then
                            lngRes = rngChar.Start
                            Exit For
                        End If
                    Next rngChar
                End If
                If (lngRes < (inRange1.End)) Then Exit For
            Next rngWord
        End If
    Else
        Dim rngChar2 As Range
        For Each rngChar2 In inRange1.Characters
            If ((rngChar2.InlineShapes.Count = 0) And (rngChar2.Start >= lngMin)) Then
                lngRes = rngChar2.Start
                Exit For
             End If
        Next rngChar2
    End If

Err1:
    GetNextInlineShapePos = lngRes
End Function

Function GetTeckenmall(inIdx As Long) As String
    'Denna funktion skall ligga i mall-filen
    Dim strRes As String
    strRes = ""
    If (inIdx = 0) Then strRes = "0"
    If (inIdx = 1) Then strRes = "mkTecken"
    If (inIdx = 2) Then strRes = "mkTecken1"
    If (inIdx = 3) Then strRes = "mkTecken2"
    GetTeckenmall = strRes
End Function

Sub AddFootnoteDataToElement(inPara As Paragraph, ieStycke As ImpElement)
    On Error GoTo Err1
    
    Dim idxFoot As Long
    If (inPara.Range.Footnotes.Count >= 0) Then
        For idxFoot = 1 To inPara.Range.Footnotes.Count
            Dim ieFootnote As ImpElement
            Set ieFootnote = mDocExp.CreateGetElement("footnote", ieStycke.intIdxInDoc)
            Dim aParaFootnote As Footnote
            Set aParaFootnote = inPara.Range.Footnotes.Item(idxFoot)
            Call ieFootnote.SetAttr("nr", str(idxFoot))
            
            Dim aParaFootnoteRangeText As String
            aParaFootnoteRangeText = SpecGetVis(SpecText(aParaFootnote.Range.text), 1)
            ieFootnote.AddText (aParaFootnoteRangeText)
        Next
    End If ' count > 0
Err1:
End Sub
Sub AddListDataToElement(inPara As Paragraph, ieStycke As ImpElement, strText As String, strStyle As String)
    
    '|fffd|r det microsoft lista, s|fffd| l|fffd|gg till prefix och tabbtecken
    Dim aCountList As Long
    aCountList = inPara.Range.ListParagraphs.Count
    If (aCountList > 0) Then
             
        'Justera chars och para-text
        Dim strSpecPrefix As String
        strSpecPrefix = SpecText(inPara.Range.ListFormat.ListString & Chr(9))
        
        Call ieStycke.ClearText
        Call ieStycke.AddText(SpecGetVis(strSpecPrefix & strText, 1))
                
        'L|fffd|gg in prefixet som chars
        Dim ieListChar As ImpElement
        Set ieListChar = mDocExp.CreateGetElement("chars", ieStycke.intIdxInDoc)
        Call ieListChar.AddText(strSpecPrefix)
   End If

End Sub
Sub AddTableDataToElement(inPara As Paragraph, ieStycke As ImpElement)
    'Kontrollera tabell
    If inPara.Range.Tables.Count = 1 Then
        'IncreaseCounter (cCounterTables)
        intCellCount = inPara.Range.Cells.Count
        If (intCellCount = 1) Then
            'Tabellen
            Dim aTable As Table
            Set aTable = inPara.Range.Tables(1)
            
            Dim ieTableCell As ImpElement
            Set ieTableCell = mDocExp.CreateGetElement("tablecell", ieStycke.intIdxInDoc)
            Call ieTableCell.SetAttr("rows", aTable.Rows.Count)
            Call ieTableCell.SetAttr("cols", aTable.Columns.Count)
            If (MstrVersion <> "W97") Then
                Call ieTableCell.SetAttr("subs", HasTables(aTable))
                If (HasTables(aTable) > 0) Then ieTableCell.SetElementName ("framecell")
            End If
            
            'Cellen
            Dim aCell As Cell
            Set aCell = inPara.Range.Cells(1)
            
            Dim strBorderRight As String
            strBorderRight = "yes"
            If (aCell.Borders(wdBorderRight) = False) Then
                strBorderRight = "no"
            End If
            
            Dim strBorderLeft As String
            strBorderLeft = "yes"
            If (aCell.Borders(wdBorderLeft) = False) Then
                strBorderLeft = "no"
            End If
            
            Dim strBorderBottom As String
            strBorderBottom = "yes"
            If (aCell.Borders(wdBorderBottom) = False) Then
                strBorderBottom = "no"
            End If
            
            Dim strBorderTop As String
            strBorderTop = "yes"
            If (aCell.Borders(wdBorderTop) = False) Then
                strBorderTop = "no"
            End If
            
            
            'Custom RAR begin
                If (GetSectionIdxFromRange(inPara.Range) = 5) Then
                    strBorderTop = "no"
                End If
            'Custom RAR end
            
            Dim strVertAlign As String
            strVertAlign = "top"
            If (aCell.VerticalAlignment = wdCellAlignVerticalBottom) Then strVertAlign = "bot"
            If (aCell.VerticalAlignment = wdCellAlignVerticalCenter) Then strVertAlign = "cent"
            
            Dim strHorAlign As String
            strHorAlign = "left"
            If (aCell.Range.ParagraphFormat.Alignment = wdAlignParagraphCenter) Then strHorAlign = "cent"
            If (aCell.Range.ParagraphFormat.Alignment = wdAlignParagraphRight) Then strHorAlign = "right"
           
            Dim intRoundWidth As Long
            intRoundWidth = GetIntCellWidth(aCell)
            'intRoundWidth = aCell.Width
             
            Dim strFirstParaInTable As String
            strFirstParaInTable = "no"
            If (GetIsFirstParaInTable(inPara)) Then strFirstParaInTable = "yes"
            
            Dim intRowIndex As Long
            Dim intColIndex As Long
            
            intRowIndex = GetIntRowIndex(aCell)
            intColIndex = GetIntColIndex(aCell)
            Call ieTableCell.SetAttr("row", IntToStr(intRowIndex))
            Call ieTableCell.SetAttr("col", IntToStr(intColIndex))
            
            Call ieTableCell.SetAttr("bordleft", strBorderLeft)
            Call ieTableCell.SetAttr("bordright", strBorderRight)
            Call ieTableCell.SetAttr("bordbot", strBorderBottom)
            Call ieTableCell.SetAttr("bordtop", strBorderTop)
            Call ieTableCell.SetAttr("width", IntToStr(intRoundWidth))
            Call ieTableCell.SetAttr("valign", strVertAlign)
            Call ieTableCell.SetAttr("halign", strHorAlign)
            Call ieTableCell.SetAttr("firstintable", strFirstParaInTable)
        End If 'cell
        
    End If 'table

End Sub

Attribute VB_Name = "ImpFile"
'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:

'DatCache
Private arrDatCache() As String
Private cIntCountDatCache As Long
Private cIntLastIdxDatCache As Long


Function ExtractFileNameFromPath(inStrFileAndPath As String) As String
    Dim strRes As String
    strRes = inStrFileAndPath
    
    
    Dim intPos As Long
    Dim intLastPos As Long
    intLastPos = 0
    
    For intPos = 1 To Len(inStrFileAndPath)
        Dim strChar As String
        strChar = Mid(inStrFileAndPath, intPos, 1)
        If (strChar = "\") Then intLastPos = intPos
    Next intPos
    
    If (intLastPos > 0) Then
        strRes = ImpMid(inStrFileAndPath, intLastPos + 1)
    End If
    ExtractFileNameFromPath = strRes
End Function
Function ExtractFileNameFromSuffix(inStrFileNoPath As String) As String
    Dim strRes As String
    strRes = inStrFileNoPath
    
    Dim strSuffix As String
    strSuffix = GetSuffix(inStrFileNoPath)
    
    If (strSuffix <> "") Then
        strRes = ImpMid(inStrFileNoPath, 1, Len(inStrFileNoPath) - 1 - Len(strSuffix))
    End If
        

    ExtractFileNameFromSuffix = strRes
End Function
'********************** Fungerande filfunktioner ********************
Function ForceCreateDir(inStrDir As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    Dim strOrg As String
    strOrg = AddBackSlash(inStrDir)
    
    Dim intLevel As Long
    intLevel = 1
    Dim strLevel As String
    strLevel = GetFolderPathAtLevel(strOrg, intLevel)
    ResetSafeWhile (30)
    While (strLevel <> "" And SafeWhile(30))
        If (DirExists(strLevel)) Then
            bRes = True
        Else
            bRes = CreateDir(strLevel)
        End If
        intLevel = intLevel + 1
        strLevel = GetFolderPathAtLevel(strOrg, intLevel)
        If (bRes = False) Then strLevel = ""
    Wend
    ForceCreateDir = bRes
End Function

Function ForceRemoveDir(inParent As String, Optional bLeaveThisLevel As Boolean = False, Optional bWarn As Boolean = True) As Boolean
    On Error GoTo Err1
    
    Dim bRes As Boolean
    bRes = True
    
    Dim strOrg As String
    strOrg = AddBackSlash(inParent)
    
    'Ta bort alla filer
    Dim strFile As String
    strFile = GetFileAt(strOrg, 1)
    ResetSafeWhile (32)
    While (strFile <> "" And SafeWhile(32))
        bRes = RemoveFile(strFile)
        'Kill (strFile)
        strFile = GetFileAt(strOrg, 1)
        If (bRes = False) Then strFile = ""
    Wend
    
    'T|fffd|mmer alla undermappar
    Dim strDir As String
    strDir = GetDirAt(strOrg, 1)
    If (bRes = False) Then strDir = ""
    ResetSafeWhile (33)
    While (strDir <> "" And SafeWhile(33))
        bRes = ForceRemoveDir(strDir)
        strDir = GetDirAt(strOrg, 1)
        If (bRes = False) Then strDir = ""
    Wend
    
    'Ta bort mappen sj|fffd|lv
    If (bRes) Then
        If (bLeaveThisLevel = False) Then
            bRes = RemoveDir(strOrg)
        End If
    End If
    
    'Avsluta
    ForceRemoveDir = bRes
    Exit Function
    
Err1:
    If (bWarn) Then MsgBox ("Kan ej ta bort filen:" & strFile)
    ForceRemoveDir = False
    
End Function


Function GetDirAt(inParent As String, intIdx As Long) As String
    Dim strRes As String
    strRes = ""
    
    Dim strOrg As String
    strOrg = AddBackSlash(inParent)
    Dim intCount As Long
    intCount = 0
        
    If (DirExists(strOrg)) Then
        Dim strDir As String
        
        strDir = Dir(strOrg, vbDirectory)
        ResetSafeWhile (33)
        While (strDir <> "" And SafeWhile(33))
            If ((strDir <> ".") And (strDir <> "..") And (DirExists(strOrg & strDir))) Then
                intCount = intCount + 1
                If (intCount = intIdx) Then
                    strRes = AddBackSlash(strOrg & strDir)
                End If
            End If
            strDir = Dir
        Wend
    End If
    GetDirAt = strRes
End Function
Function GetFileAt(inParent As String, intIdx As Long) As String
    Dim strRes As String
    strRes = ""
    
    Dim strOrg As String
    strOrg = AddBackSlash(inParent)
    Dim intCount As Long
    intCount = 0
        
    If (DirExists(strOrg)) Then
        Dim strFile As String
        
        strFile = Dir(strOrg, vbNormal)
        ResetSafeWhile (34)
        While (strFile <> "" And SafeWhile(34))
                intCount = intCount + 1
                If (intCount = intIdx) Then
                    strRes = strOrg & strFile
                End If
            strFile = Dir
        Wend
    End If
    GetFileAt = strRes
End Function

Function RemoveDir(inStrDir As String) As Boolean
    On Error GoTo Err1
    'MsgBox (CurDir)
    Dim bRes As Boolean
    bRes = False
    
    If (DirExists(inStrDir) = False) Then
        RemoveDir = True
        Exit Function
    End If
    
    Dim strOrg As String
    strOrg = AddBackSlash(inStrDir)
    
    Dim strCur As String
    strCur = CurDir
    strCur = AddBackSlash(strCur)
    
    If (strCur = strOrg) Then 'Kan ej ta bort Curdir
        ChDir ("..")
    End If
    strOrg = Mid(strOrg, 1, Len(strOrg) - 1) 'Ingen slash
    
    'Ta bort mappen sj|fffd|lv
    RmDir (strOrg)
    
    'Avsluta
    RemoveDir = True
    Exit Function
    
Err1:
    MsgBox ("Kan ej ta bort mappen:" & strOrg & ". " & Chr(13) & "Felet brukar vara att mappen |fffd|r |fffd|ppen i utforskaren")
    RemoveDir = False

End Function
Function RemoveFile(inStrFile As String) As Boolean
    On Error GoTo Err1
    
    Dim bRes As Boolean
    bRes = False
    
    'Ta bort filen sj|fffd|lv
    Kill (inStrFile)
    
    'Avsluta
    RemoveFile = True
    Exit Function
    
Err1:
    MsgBox ("Kan ej ta bort filen:" & inStrFile)
    RemoveFile = False

End Function
Function AddBackSlash(inStrDir As String) As String
    Dim strRes As String
    strRes = inStrDir
    
    Dim intLen As Long
    intLen = Len(strRes)
    If (intLen > 1) Then
        Dim strLast As String
        strLast = Mid(strRes, intLen, 1)
        If (strLast <> "\") Then strRes = strRes & "\"
    End If
    
    
    AddBackSlash = strRes
End Function
Function GetFolderLevel(inStrDir As String) As Long
    Dim intRes As Long
    intRes = 0
    
    Dim intI As Long
    For intI = 1 To 99
        Dim strPart As String
        strPart = GetFolderPathAtLevel(inStrDir, intI)
        If (strPart <> "") Then
            intRes = intI
        Else
            Exit For
        End If
    Next intI
    
    
    GetFolderLevel = intRes
End Function
Function GetFolderPathAtLevel(inStrDir As String, intLevel As Long) As String
' c:\ |fffd|r level 1, c:\temp\ |fffd|r level2 osv
' N|fffd|r level |fffd|r h|fffd|gre |fffd|n vad som finns i s|fffd|kv|fffd|gen, blir returstr|fffd|ngen tom
    Dim strRes As String
    strRes = ""
    Dim strOrg As String
    strOrg = AddBackSlash(inStrDir)
    
    Dim intCount As Long
    intCount = 0
    Dim intPos As Long
    
    
    For intPos = 1 To Len(strOrg)
        Dim strChar As String
        strChar = Mid(strOrg, intPos, 1)
        If (strChar = "\") Then
            intCount = intCount + 1
            If (intCount = intLevel) Then
                strRes = Mid(strOrg, 1, intPos)
            End If
        End If
    Next intPos
    
    If (intCount < intLevel) Then strRes = ""
    
    GetFolderPathAtLevel = strRes
End Function
Function DirExists(inStr1 As String) As Boolean
    Dim strOrg As String
    strOrg = AddBackSlash(inStr1)

    If (IsAServerTopPath(strOrg)) Then
        DirExists = True
        Exit Function
    End If
    
    On Error GoTo Err1
    ChDir (strOrg)
    
    'Avsluta
    DirExists = True
    Exit Function
Err1:
    DirExists = False

End Function
Function IsAServerTopPath(inStr1 As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    If (inStr1 = "\") Then bRes = True '\
    If (inStr1 = "\\") Then bRes = True '\\
    If (ImpMid(inStr1, 1, 2) = "\\") Then '\\server\
        If (ImpLen(inStr1) = ImpPos(inStr1, "\", 3)) Then bRes = True
    End If
Err1:
    IsAServerTopPath = bRes
End Function

Function CreateDir(inStr1 As String) As Boolean
'Skapar en submapp i existerande mapp
' Anv|fffd|nd ForceDirectory() f|fffd|r att kontrollera att niv|fffd|erna ovan finns
    Dim bRes As Boolean
    bRes = True
    On Error GoTo Err1
    

    Dim strOrg As String
    strOrg = AddBackSlash(inStr1)
    If (DirExists(strOrg) = False) Then
        mkdir (strOrg)
    End If

    'Avsluta
    CreateDir = bRes
    Exit Function
Err1:
    CreateDir = False
End Function

Function GetSuffix(inFileName As String) As String
    'Returnerar filsuffixet, utan punkten t.ex "doc"
    Dim strRes As String
    strRes = ""
    
    Dim intCount As Long
    intCount = 0
    Dim intPos As Long
    
    
    For intPos = Len(inFileName) To 1 Step -1
        Dim strChar As String
        strChar = Mid(inFileName, intPos, 1)
        If (strChar = ".") Then
            intCount = intCount + 1
            If (intCount = 1) Then
                strRes = Mid(inFileName, intPos)
            End If
        End If
    Next intPos

    strRes = GetLegalName(strRes)
    GetSuffix = strRes

End Function
'Function GetImpPath() As String
'    Dim strRes As String
'    strRes = ""
'
'    strRes = "c:\IMPin" ' Bugg skall l|fffd|sas ur ini-filen
'
'    GetImpPath = strRes
'End Function
Function SaveToFile(inStrText As String, inStrPath As String) As Boolean
    
 On Error GoTo Error1
 
    'Open inStrPath For Binary Access Write As #1
    Open inStrPath For Output As #1
    
    'Put #1, , inStrText
    Print #1, inStrText
    
    Close #1
    SaveToFile = True
    Exit Function

Error1:
    SaveToFile = False
    MsgBox (inStrPath & ", " & err.Description)
    On Error GoTo Error2
    Close #1
    Exit Function
Error2:
    
End Function
Function ReadFromFile(inStrPath As String) As String
 On Error GoTo Error1
    Dim strRes As String
    strRes = ""
    Dim bFirst As Boolean
    bFirst = True
    
    Dim TextLine As String
    Open inStrPath For Input As #3
    Do While Not EOF(3)
        Line Input #3, TextLine
        If (bFirst) Then
            strRes = TextLine
            bFirst = False
        Else
            strRes = strRes & Chr(13) & Chr(10) & TextLine
        End If
    Loop
    Close #3    ' Close file.
    
    ReadFromFile = strRes
    Exit Function
Error1:
    ReadFromFile = strRes
    MsgBox (inStrPath & ", " & err.Description)
    On Error GoTo Error2
    Close #3
    Exit Function
Error2:
End Function
Function FileExist(inStrPath As String) As Boolean
 On Error GoTo Error1
    Dim bRes As Boolean
    bRes = True
    
    Open inStrPath For Input As #5
    'MsgBox (LOF(5))
    Close #5    ' Close file.
    
    FileExist = bRes
    Exit Function
Error1:
    bRes = False
    FileExist = bRes
    On Error GoTo Error2
    Close #5
    Exit Function
Error2:
    
End Function
Function FileSizekBStr(inStrPath As String) As String
 On Error GoTo Error1
    Dim strRes As String
    strRes = ""
    
    Open inStrPath For Input As #6
    'MsgBox (LOF(6))
    Dim intLong As Long
    intLong = LOF(6)
    Close #6    ' Close file.
    
    Dim longkB As Long
    longkB = intLong / 1000
    
    Dim strkB As String
    strkB = str(longkB)
    If ((longkB = 0) And (intLong > 0)) Then strkB = "<1"
    
    strRes = strkB & " kB"
    FileSizekBStr = strRes
    Exit Function
Error1:
    FileSizekBStr = strRes
    On Error GoTo Error2
    Close #6
    Exit Function
Error2:
End Function
Sub tt4()
    Dim strFile As String
    strFile = "c:\hej.txt"
    If (FileExist(strFile)) Then
        MsgBox (FileSizekBStr(strFile))
    Else
        MsgBox (strFile & "Finns ej")
        MsgBox (FileSizekBStr(strFile))
    End If
End Sub
Function ImpFileCopy(inStrOrg As String, inStrDest As String) As Boolean
    Dim bRes As Boolean
    bRes = False
    
    On Error GoTo Err1
    Call FileCopy(inStrOrg, inStrDest)
    bRes = True
Err1:
    ImpFileCopy = bRes
End Function
Function ImpDirCopy(inStrOrgFolder As String, inStrDestFolder As String, Optional bRecursive As Boolean = True) As Boolean
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    
    Dim strOrgFolder As String
    strOrgFolder = AddBackSlash(inStrOrgFolder)
    Dim strDestFolder As String
    strDestFolder = AddBackSlash(inStrDestFolder)
    
    'Skapa dest-folder
    If (ImpFile.ForceCreateDir(strDestFolder) = False) Then
        ImpDirCopy = bRes
        Exit Function
    End If
    
    'Kopiera alla filer till dest-folder
    Dim strFile As String
    Dim intFileIdx As Long
    intFileIdx = 1
    strFile = GetFileAt(strOrgFolder, intFileIdx)
    ResetSafeWhile (35)
    While (strFile <> "" And SafeWhile(35))
        Call ImpFileCopy(strFile, strDestFolder & ExtractFileNameFromPath(strFile))
        'n|fffd|sta varv
        intFileIdx = intFileIdx + 1
        strFile = GetFileAt(strOrgFolder, intFileIdx)
    Wend
    
    'Anropa rekursivt f|fffd|r alla foldrar
    If (bRecursive) Then
        ImpMsg ("Funktionen f|fffd|r rekursiv kopiering ej implementerad")
    End If
    
    bRes = True
Err1:
    ImpDirCopy = bRes
End Function
Function GetDatValueCache(inStrFile As String, inStrName As String) As String
    'Cachar dat-filen i minnet, beh|fffd|vs om dat-filen inneh|fffd|ller m|fffd|nga v|fffd|rden ( > 20? )
    Dim strRes As String
    strRes = ""
    On Error GoTo Err1
    
    If (inStrName = "antal") Then 'antal nollst|fffd|ller cache-minnet
        cIntCountDatCache = 0
        cIntLastIdxDatCache = 1
        strRes = GetDatValue(inStrFile, inStrName, False)
        cIntCountDatCache = StrToInt(strRes)
        If (cIntCountDatCache > 0) Then
            ReDim arrDatCache(cIntCountDatCache + 2) 'F|fffd|rsta raden + array b|fffd|rjar p|fffd| noll
        End If
        Call GetDatValue(inStrFile, inStrName, True)
    Else
        If (cIntCountDatCache > 0) Then 'N|fffd|got finns i arrayen
            Dim intI As Long
            Dim TextLine As String
            Dim strLeft As String
            For intI = cIntLastIdxDatCache To cIntCountDatCache + 1
                TextLine = arrDatCache(intI)
                strLeft = GetTextBefore(TextLine, "=")
                If (GetLegalName(strLeft) = GetLegalName(inStrName)) Then
                    strRes = Trim$(GetTextAfter(TextLine, "="))
                    cIntLastIdxDatCache = intI 'Optimering, leta bara efter senaste hittade
                    Exit For
                End If
            Next intI
        Else
            strRes = GetDatValue(inStrFile, inStrName)
        End If
    End If
Err1:
    GetDatValueCache = strRes
End Function
Function GetDatValue(inStrFile As String, inStrName As String, Optional inCache As Boolean = False) As String
'Returnerar v|fffd|rdet p|fffd| en post i en ini-fil
 On Error GoTo Error1
    Dim strRes As String
    strRes = ""
    If (FileExist(inStrFile) = False) Then
        GetDatValue = strRes
        Exit Function
    End If
    
    Dim intRow As Long 'Cachar filen i array
    intRow = 0
    
    Dim TextLine As String
    Dim strLeft As String
    Open inStrFile For Input As #7
    Do While Not EOF(7)
        Line Input #7, TextLine
        strLeft = GetTextBefore(TextLine, "=")
        If (GetLegalName(strLeft) = GetLegalName(inStrName)) Then
            strRes = Trim$(GetTextAfter(TextLine, "="))
        End If
        If (inCache) Then
            If (HasString(TextLine, "=")) Then 'Ej tomrader
                intRow = intRow + 1
                If (intRow <= (cIntCountDatCache + 1)) Then
                    arrDatCache(intRow) = TextLine
                End If
            End If
        End If
    Loop
    Close #7    ' Close file.
    
    GetDatValue = strRes
    Exit Function
Error1:
    GetDatValue = strRes
    MsgBox (inStrFile & ", " & err.Description)
    On Error GoTo Error2
    Close #7
    Exit Function
Error2:
    
End Function

Function SaveAppendToFile(inStrText As String, inStrPath As String) As Boolean
    
 On Error GoTo Error1
 
    Open inStrPath For Append As #1
    
    Print #1, inStrText
    
    Close #1
    SaveAppendToFile = True
    Exit Function

Error1:
    SaveAppendToFile = False
    MsgBox (inStrPath & ", " & err.Description)
    On Error GoTo Error2
    Close #1
    Exit Function
Error2:
    
End Function
Attribute VB_Name = "ImpRefineWXML"
'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16


Private arrTableCells() As Long 'Index till tabeller
Private intMaxTableCells As Long

 

Public mDocRef As ImpDoc
Function DoAllRefineWXML(inDoc As ImpDoc) As Boolean
    Dim bRes As Boolean
    On Error GoTo Err1
    
    Call ChangeProcMessage("Anpassar Exportfil fr|fffd|n Word...", False)
    
    Set mDocRef = inDoc
    
    Call CashArrayData
        
    Call DoAdjustTableWidth
    Call DoCalcCompleteRow
    Call DoCalcSpanCell
    Call DoCalcTableGrid
    
    Call DoListSpan
    
    Call DoPart
    
    bRes = True
Err1:
    DoAllRefineWXML = bRes
End Function
Sub CashArrayData()
    'Kommer ih|fffd|g var tabellceller finns i xml-tr|fffd|det
    Dim intMax As Long
    intMax = mDocRef.GetCountElement
    Dim intI As Long
    Dim ieNext As ImpElement
    
    ReDim arrTableCells(intMax) As Long
    intMaxTableCells = 0
    
    For intI = 1 To intMax
        Set ieNext = mDocRef.GetElement(intI)
        If (ieNext.GetElementName = "tablecell") Then
             intMaxTableCells = intMaxTableCells + 1
             arrTableCells(intMaxTableCells) = intI
        End If
    Next intI
    
End Sub


Sub DoAdjustTableWidth()
    'Justerar kolumnbredden efter max till|fffd|ten

    'G|fffd| igenom word.xml
    Dim intMax As Long
    intMax = mDocRef.GetCountElement
    Dim intI As Long
    
    Dim ieNext As ImpElement
    For intI = 1 To intMaxTableCells
        Set ieNext = mDocRef.GetElement(arrTableCells(intI))
        If (ieNext.intElementType = 1) Then
            If (ieNext.GetElementName = "tablecell") Then 'En tabellcell
                Dim intWidth As Long
                intWidth = StrToInt(ieNext.GetAttrValue("width"))
                intWidth = intWidth * (600 / 400)
                Call ieNext.SetAttr("width", IntToStr(intWidth))
            End If
        End If
    Next intI
    
End Sub
Sub DoCalcCompleteRow() 'OPTIMERAD PRESTANDA
    'L|fffd|gger till unikt ID p|fffd| tabellen
    'Sparar alla kolumnbredder i f|fffd|rsta tabellcellen
    'w1="42" w2="87" w3="14"...
     
    'G|fffd| igenom word.xml
    Dim intMax As Long
    intMax = mDocRef.GetCountElement
    Dim intI As Long
    
    'TabellID unikt f|fffd|r varje ny tabell
    Dim intTableID As Long
    intTableID = 0
     
    ' Kom ih|fffd|g avl|fffd|sta cellv|fffd|rden
    Dim intLastRows As Long
    Dim intLastCols As Long
    Dim intLastRow As Long
    Dim intLastCol As Long
    intLastRows = 9999
    intLastCols = 9999
    intLastRow = 9999
    intLastCol = 9999
    
    '
    Dim arrIntWidth(100) As Long
        
    Dim ieFirstCell As ImpElement
    
     
    Dim ieNext As ImpElement
     For intI = 1 To intMaxTableCells
        Set ieNext = mDocRef.GetElement(arrTableCells(intI))
        If (ieNext.intElementType = 1) Then
            If (ieNext.GetElementName = "tablecell") Then 'En tabellcell
                Dim intRows As Long
                Dim intCols As Long
                Dim intRow As Long
                Dim intCol As Long
                Dim intWidth As Long
                Dim strNewTable As String
                intRows = StrToInt(ieNext.GetAttrValue("rows"))
                intCols = StrToInt(ieNext.GetAttrValue("cols"))
                intRow = StrToInt(ieNext.GetAttrValue("row"))
                intCol = StrToInt(ieNext.GetAttrValue("col"))
                intWidth = StrToInt(ieNext.GetAttrValue("width"))
                strNewTable = (ieNext.GetAttrValue("firstintable"))
                
                If (strNewTable = "yes") Then 'Ny tabell
                    intTableID = intTableID + 1
                    Set ieFirstCell = ieNext 'Kom ih|fffd|g f|fffd|rsta tabellcellen
                    bAllHasLine = True
                ElseIf (intCol < intLastCol) Then 'Ny tabell
                    If (intRow < intLastRow) Then
                        intTableID = intTableID + 1
                        Set ieFirstCell = ieNext 'Kom ih|fffd|g f|fffd|rsta tabellcellen
                        bAllHasLine = True
                    End If
                End If
                Call ieNext.SetAttr("tableid", IntToStr(intTableID))
                
                
                
                arrIntWidth(0) = intTableID
                arrIntWidth(intCol) = intWidth ' Ha arrayen v|fffd|lfylld
                
                If (intCol = intCols) Then 'En rad med alla kolumner ligger i arrayen
                    Dim intArrIdx As Long
                    For intArrIdx = 0 To intCol 'Spara bredderna i f|fffd|rsta tabellcellen
                        Call ieFirstCell.SetAttr("w" & IntToStr(intArrIdx), IntToStr(arrIntWidth(intArrIdx)))
                    Next intArrIdx
                End If
                
                intLastRows = intRows
                intLastCols = intCols
                intLastRow = intRow
                intLastCol = intCol
            End If
        End If
    Next intI
   
End Sub
Sub DoCalcSpanCell()
    'G|fffd| igenom word.xml
    Dim intMax As Long
    intMax = mDocRef.GetCountElement
    Dim intI As Long
    Dim ieNext As ImpElement
    
    Dim arrIntWidth(100) As Long 'Array som fylls p|fffd| av f|fffd|rsta tabellcell
    Dim intLastCol As Long
    Dim intLastRow As Long
    intLastCol = 9999
    intLastRow = 9999
    
    'H|fffd|lla reda p|fffd| span och start
    Dim intColStart As Long
    intColStart = 1
    Dim intColSpan As Long
    intColSpan = 1
    Dim intColWidth As Long
    intColWidth = 0
    
    Dim ieFirstTableCell As ImpElement
    Set ieFirstTableCell = Nothing
    
     For intI = 1 To intMaxTableCells
        Set ieNext = mDocRef.GetElement(arrTableCells(intI))
        If (ieNext.intElementType = 1) Then
            If (ieNext.GetElementName = "tablecell") Then
                Dim intRows As Long
                Dim intCols As Long
                Dim intRow As Long
                Dim intCol As Long
                Dim intWidth As Long
                intRows = StrToInt(ieNext.GetAttrValue("rows"))
                intCols = StrToInt(ieNext.GetAttrValue("cols"))
                intRow = StrToInt(ieNext.GetAttrValue("row"))
                intCol = StrToInt(ieNext.GetAttrValue("col"))
                intWidth = StrToInt(ieNext.GetAttrValue("width"))
                
                Dim intTableID As Long
                Dim intw0 As Long
                
                intTableID = StrToInt(ieNext.GetAttrValue("tableid"))
                intw0 = StrToInt(ieNext.GetAttrValue("w0"))
                
                'Fyll p|fffd| Arr med det som g|fffd|ller
                If (intTableID = intw0) Then 'F|fffd|rsta tabellcell
                    Dim intArrIdx As Long
                    For intArrIdx = 1 To intCols
                        arrIntWidth(intArrIdx) = StrToInt(ieNext.GetAttrValue("w" & intArrIdx))
                    Next intArrIdx
                    intLastCol = 9999
                    intLastRow = 9999
                    'Call ieNext.SetAttr("firstintable", "yes")
                    Set ieFirstTableCell = ieNext
                End If
                
                If (intRow <> intLastRow) Then 'Ny rad
                    intLastCol = 9999
                    intColStart = 0
                    intColSpan = 1
                    'Call ieNext.SetAttr("firstintablerow", "yes")
                End If
                
                If (intCol <> intLastCol) Then   'Ny kolumn
                    'Call ieNext.SetAttr("firstintablecell", "yes")
                    intColStart = intColStart + intColSpan
                    intColSpan = 1
                    intColWidth = arrIntWidth(intColStart + intColSpan - 1)
                    
                    'Set span efter Arr
                    If (IsNearly(intColWidth, intWidth) = False) Then 'Fler kolumner beh|fffd|vs kanske
                        Dim bAdd As Boolean
                        bAdd = True
                        If (intColStart >= intCols) Then bAdd = False  'Finns inga fler kolumer
                        If (intWidth < intColWidth) Then bAdd = False
                        ResetSafeWhile (63)
                        While (bAdd And SafeWhile(63))
                            intColSpan = intColSpan + 1
                            intColWidth = intColWidth + arrIntWidth(intColStart + intColSpan - 1)
                        
                            If (intWidth < intColWidth) Then bAdd = True
                            If (IsNearly(intColWidth, intWidth)) Then bAdd = False
                            If ((intColStart + intColSpan - 1) = intCols) Then bAdd = False
                        Wend
                    End If
                End If
                'Spara v|fffd|rden i cellen
                Call ieNext.SetAttr("colstart", IntToStr(intColStart))
                Call ieNext.SetAttr("colspan", IntToStr(intColSpan))
                Call ieNext.SetAttr("colwidth", IntToStr(intColWidth))
                
                If (ieNext.GetAttrValue("bordbot") <> "yes") Then
                        If (ieFirstTableCell Is Nothing) Then
                        Else
                            Call ieFirstTableCell.SetAttr("border", "0")
                        End If
                End If
                
                'Spara Last-v|fffd|rden
                intLastRow = intRow
                intLastCol = intCol

            End If
        End If
    Next intI
End Sub
Sub DoCalcTableGrid()
'Nu tar vi bara reda p|fffd| om n|fffd|gon linje |fffd|r dragen eller ej
    'L|fffd|gger till attributet lastintable
    
    
    'G|fffd| igenom word.xml
    Dim intMax As Long
    intMax = mDocRef.GetCountElement
    Dim intI As Long
    Dim ieNext As ImpElement
    
    Dim ieSetLast As ImpElement 'Den som vi satt last p|fffd|, kan ju hitta n|fffd|gon senare
                                'D|fffd| m|fffd|ste vi s|fffd|tta tillbaka
    Dim strSetID As String 'ID f|fffd|r denna
    strSetID = ""
    
    
    'H|fffd|lla reda p|fffd| span och start
    
    Dim ieFirstTableCell As ImpElement 'F|fffd|rsta tabellcellen
    Dim strFirstID As String 'Vilket ID |fffd|r vi p|fffd|
    strFirstID = "-1"
    Dim intSumNoYesMixed As Long '-99 init, -1  no, +1 yes, 9 mixed, h|fffd|gre v|fffd|rde vinner |fffd|ver l|fffd|gre
    Dim intNoYesMixed As Long
     'For intI = 1 To intMax 'TEST PRESTANDA
     For intI = 1 To intMaxTableCells
        'Set ieNext = mDocRef.GetElement(intI) 'TEST PRESTANDA
        Set ieNext = mDocRef.GetElement(arrTableCells(intI))
        If (ieNext.intElementType = 1) Then
            If (ieNext.GetElementName = "tablecell") Then
                Dim strID As String
                strID = ieNext.GetAttrValue("tableid")
                If (strID <> strFirstID) Then
                    Set ieFirstTableCell = ieNext
                    Call ieFirstTableCell.SetAttr("tablegrid", "none") 'Default ingen grid
                    strFirstID = strID
                    intSumNoYesMixed = -99
                End If
                Dim intLines As Long
                intLines = 0
                If (ieNext.GetAttrValue("bordbot") = "yes") Then intLines = intLines + 1
                If (ieNext.GetAttrValue("bordtop") = "yes") Then intLines = intLines + 1
                If (ieNext.GetAttrValue("bordleft") = "yes") Then intLines = intLines + 1
                If (ieNext.GetAttrValue("bordright") = "yes") Then intLines = intLines + 1
                If ((intLines = 0)) Then intNoYesMixed = -1
                If ((intLines = 1) Or (intLines = 2) Or (intLines = 3)) Then intNoYesMixed = 9
                If ((intLines = 4)) Then intNoYesMixed = 1
                If (intNoYesMixed > intSumNoYesMixed) Then
                    intSumNoYesMixed = intNoYesMixed
                    If (intNoYesMixed = 1) Then Call ieFirstTableCell.SetAttr("tablegrid", "all") 'Default ingen grid
                    If (intNoYesMixed = 9) Then Call ieFirstTableCell.SetAttr("tablegrid", "mixed") 'Default ingen grid
                End If
                
                'last ber|fffd|kning
                If (ieNext.GetAttrValue("cols") = ieNext.GetAttrValue("col")) Then
                    If (ieNext.GetAttrValue("rows") = ieNext.GetAttrValue("row")) Then
                        If ((strSetID = strID) And (strID <> "")) Then
                            Call ieSetLast.SetAttr("lastintable", "no")
                        End If
                        Call ieNext.SetAttr("lastintable", "yes")
                        strSetID = strID
                        Set ieSetLast = ieNext
                    End If
                End If
                
            End If
        End If
    Next intI
    

End Sub

Sub DoListSpan()
    'ListID unikt f|fffd|r varje ny Lista
    Dim intListID As Long
    intListID = 0
    
    Dim intSubListID As Long
    intSubListID = 0
    
    Dim intLastListLevel As Long
    intLastListLevel = 0
    
    'G|fffd| igenom word.xml
    Dim intMax As Long
    intMax = mDocRef.GetCountElement
    Dim intI As Long
    Dim ieNext As ImpElement
    For intI = 1 To intMax
    'For intI = 1 To intMaxPara
        Set ieNext = mDocRef.GetElement(intI)
        'Set ieNext = mDocRef.GetElement(arrParas(intI))
        If (ieNext.intElementType = 1) Then
            If (ieNext.GetElementName = "para") Then
                Dim strStyle As String
                strStyle = ieNext.GetAttrValue("style")
                Dim intListLevel As Long
                intListLevel = GetListLevelFromStyle(strStyle)
                
                'Beroende p|fffd| om lista och niv|fffd|
                If (intListLevel = 0) Then
                End If
                If (intListLevel = 1) Then
                    If (intLastListLevel = 0) Then
                        intListID = intListID + 1
                        intSubListID = 0
                    End If
                    Call ieNext.SetAttr("listid", IntToStr(intListID))
                    Call ieNext.SetAttr("listlevel", IntToStr(1))
                End If
                If (intListLevel = 2) Then
                    If (intLastListLevel = 1) Then intSubListID = intSubListID + 1
                    Call ieNext.SetAttr("listid", IntToStr(intListID))
                    Call ieNext.SetAttr("listsubid", IntToStr(intSubListID))
                    Call ieNext.SetAttr("listlevel", IntToStr(2))
                End If
                
                If (intListLevel > 0) Then
                
                    Dim strSpecChars As String
                    strSpecChars = GetAllCharsAsSpec(ieNext)
                    
                    Dim strTrim As String
                    strTrim = SpecTrimLeft(strSpecChars)
                    
                    Dim intTabPos As Long
                    intTabPos = SpecPos(strTrim, SpecChr(9), 1)
                    
                    Dim intCountPrefix As Long
                    intCountPrefix = intTabPos + SpecLen(strSpecChars) - SpecLen(strTrim)
                    
                    Dim strBet As String
                    strBet = SpecMid(strTrim, 1, intTabPos - 1)
                                       
                    Call ieNext.SetAttr("listprefix", IntToStr(intCountPrefix))
                    Call ieNext.SetAttr("listbet", SpecGetISOAttrVal(strBet))
                End If
                
                intLastListLevel = intListLevel
            End If
        End If
    Next intI

End Sub
Function GetListLevelFromStyle(inStrStyle As String) As Long
    Dim intRes As Long
    intRes = 0
    intRes = GetListLevelFromMallStyle(inStrStyle)
    
    
    GetListLevelFromStyle = intRes

End Function

Function GetAllCharsAsSpec(iePara As ImpElement) As String
    'G|fffd|r igenom en para och returnerar alla tecken i charselementen som spec
    Dim strRes As String
    strRes = ""
    
    Dim aArrChild() As Long
    Dim intCountChild As Long
    Dim ieSub As ImpElement
                    
    Dim intI As Long
    intCountChild = iePara.mImpDoc.GetChildren(iePara.intIdxInDoc, aArrChild)
    For intI = 1 To intCountChild
        Set ieSub = iePara.mImpDoc.GetElement(aArrChild(intI))
        If (ieSub.GetElementName = "chars") Then
            Dim strSpec As String
            strSpec = SpecTextVisReverse(ieSub.GetTextExcludeSubs)
            strRes = strRes & strSpec
        End If
    Next
    GetAllCharsAsSpec = strRes
End Function


Sub DoPart()
    'G|fffd|r igenom part, dvs textgrupperingar
    Dim strLastPart As String
    strLastPart = "text"

    'G|fffd| igenom word.xml
    Dim intMax As Long
    intMax = mDocRef.GetCountElement
    Dim intI As Long
    Dim ieNext As ImpElement
    For intI = 1 To intMax 'TEST PRESTANDA
    'For intI = 1 To intMaxPara
        Set ieNext = mDocRef.GetElement(intI) 'TEST PRESTANDA
        'Set ieNext = mDocRef.GetElement(arrParas(intI))
        If (ieNext.intElementType = 1) Then
            If (ieNext.GetElementName = "para") Then
                
                'Vad |fffd|r detta f|fffd|r part
                Dim strStyle As String
                strStyle = ieNext.GetAttrValue("style")
                
                Dim strThisPart As String
                strThisPart = CustMallarMain.GetPart(strStyle)
                
                Dim bThisBreakPart As Boolean 'Om nuvarande stycker bara bryter
                bThisBreakPart = False
                If (HasString(strThisPart, "rubrik")) Then bThisBreakPart = True
                
                                               
                'En tabell beh|fffd|ller v|fffd|rdet fr|fffd|n stycket innan, eftersom tabellens celler kan vara vadsom
                Dim intTableIdx As Long
                intTableIdx = ieNext.GetChildByElement("tablecell")
                If (intTableIdx > 0) Then
                        If (strThisPart = "text") Then
                            strThisPart = strLastPart
                        End If
                End If
                
                'Normal beh|fffd|ller v|fffd|rdet fr|fffd|n innan
                If (strStyle = "normal") Then
                        strThisPart = strLastPart
                End If
                
                Dim strView As String
                strView = ieNext.GetAttrValue("view")
                If (strView = "metadata") Then strThisPart = "metadata"
                                
              
                'S|fffd|tt part-v|fffd|rdet
                Call ieNext.SetAttr("part", strThisPart)
                strLastPart = strThisPart
                If (bThisBreakPart = True) Then strLastPart = "text"
            End If
        End If
    Next intI
    

End Sub

Attribute VB_Name = "ImpShell32"
'Implementation made by Mikael Kjellsson, Sigma Information Design
'Date: 2003-08-13
Private Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" _
                   (ByVal hwnd As Long, ByVal lpszOp As String, _
                    ByVal lpszFile As String, ByVal lpszParams As String, _
                    ByVal LpszDir As String, ByVal FsShowCmd As Long) _
                    As Long


Function ShowFile(inStrFileName As String) As Boolean
' Opens a file, like right-klick in explorer and select open.
    
    Dim bRes As Boolean
    bRes = False
    On Error GoTo Err1
    Dim intShellRes As Long
    intShellRes = ShellExecute(0, "open", inStrFileName, "", "", 1)
    bRes = True
    If (intShellRes < 32) Then bRes = False
    ShowFile = bRes
    Exit Function

Err1:
    ShowFile = bRes
End Function


Attribute VB_Name = "ParaDoc"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:



Private arrChildren() As ParaPos
Public intCountChildren As Long
Public intMaxChildren As Long


Private Sub Class_Initialize()
'
    intMaxChildren = 0
    intCountChildren = 0
End Sub

Private Sub Class_Terminate()
'
End Sub



Sub ResetAllParaPos()
'Nollst|fffd|ller listan
    ReDim arrChildren(intMaxChildren)
    intCountChildren = 0
End Sub
Sub AddParaPos(inDocPart As Long, inStyleName As String, inParaIdx As Long)
'
    'Skapa nytt element
    Dim ppNew As ParaPos
    Set ppNew = New ParaPos
   
    'S|fffd|tt elementv|fffd|rden
    ppNew.DocPart = inDocPart
    ppNew.StyleName = GetLegalName(inStyleName)
    ppNew.ParaIdx = inParaIdx
  
    'S|fffd|tt in elementet i listan
    intCountChildren = intCountChildren + 1
    Call ReDimChildren
    Set arrChildren(intCountChildren) = ppNew
End Sub
Function GetCountStyleName(inStyleName As String) As Long
'
    Dim intRes As Long
    intRes = 0
    
    Dim strLegStyleName As String
    strLegStyleName = GetLegalName(inStyleName)
    
    Dim i As Long
    For i = 1 To intCountChildren
        If (arrChildren(i).StyleName = strLegStyleName) Then
            intRes = intRes + 1
        End If
    Next
    
    GetCountStyleName = intRes
End Function
Function GetRowsStr(inStyleName As String) As String
'
    Dim strRes As String
    strRes = ""
    
    Dim strLegStyleName As String
    strLegStyleName = GetLegalName(inStyleName)
    
    Dim i As Long
    For i = 1 To intCountChildren
        If (arrChildren(i).StyleName = strLegStyleName) Then
            If (strRes <> "") Then strRes = strRes & ", "
            strRes = strRes & IntToStr(arrChildren(i).ParaIdx)
        End If
    Next
    
    GetRowsStr = strRes
End Function

Function GetIdxStyleName(inStyleName As String, ByRef outDocPart As Long, ByRef outParaIdx As Long, Optional inOrder As Long = 1) As Boolean
'
    Dim bRes As Boolean
    bRes = False
    
    Dim intCount As Long
    intCount = 0
    
    Dim strLegStyleName As String
    strLegStyleName = GetLegalName(inStyleName)
    
    Dim i As Long
    For i = 1 To intCountChildren
        If (arrChildren(i).StyleName = strLegStyleName) Then
            intCount = intCount + 1
            If (intCount = inOrder) Then
                outDocPart = arrChildren(i).DocPart
                outParaIdx = arrChildren(i).ParaIdx
                bRes = True
                Exit For
            End If
        End If
    Next
    
    GetIdxStyleName = bRes

End Function
Private Sub ReDimChildren()
    '|fffd|kar arrayen om antalet barn |fffd|r st|fffd|rre  |fffd|n arrayen
    If (intCountChildren > intMaxChildren) Then
        intMaxChildren = intMaxChildren + 20
        ReDim Preserve arrChildren(intMaxChildren)
    End If
End Sub

Attribute VB_Name = "ParaPos"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



'IMPin Copyright Sigma Information Design
'Author:Mikael Kjellsson, SID
'Creation: 2002-10-16
'Modifications:



Public DocPart As Long '1=dokument, 2=firstpageheader, 3=footer
Public StyleName As String 'Bara LegalName() f|fffd|r prestanda
Public ParaIdx As Long 'Vilket index den har i part:ens paragraphs-lista

'Private mRange As Range
'Private mPara As Paragraph



Private Sub Class_Initialize()
'
    DocPart = 1
    StyleName = ""
    ParaIdx = 0
End Sub

Private Sub Class_Terminate()
'
End Sub

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True




Private Sub Document_Close()
    On Error GoTo Err1
    
    'Spara ej mallen
    If (cIMPRelease) Then
        ActiveDocument.AttachedTemplate.Saved = True
    End If
    
    If ActiveDocument.Saved = False Then
        'Dim mRes As VbMsgBoxResult
        mRes = MsgBox("Vill du spara |fffd|ndringarna i dokumentet " & ActiveDocument.Name, vbYesNo, "Spara")
        If (mRes = vbYes) Then
            ActiveDocument.Save
        End If
        ActiveDocument.Saved = True
    End If
    
Err1:

End Sub

Private Sub Document_New()
    'MsgBox ("Nytt dokument")
    On Error GoTo Err1
    IMPMetaDialog.SetFormFilled (False)
    Call IMPMain.DoEditMetadata
    'Call IMPList.IMPListTime
    'Call IMPList.StartTimeCirculating
    
Err1:
End Sub

Private Sub Document_Open()
    On Error GoTo Err1
'    Call IMPList.IMPListTime
    'Call IMPList.StartTimeCirculating
    
    
Err1:

End Sub

' InQuest injected base64 decoded content
' zPhw$
' Szjej
' v(!z
' q+k1
' q+k>
' {,jib
' q+k>
' q+k>
' q+k>
' q+k>
' lZ+}
' lZ+}
' *'O*^
' p(^rAk
' }!R5
' jZ M
' v(!z
' +-h	e
' rE-y
' tN+^
' jw^"wkj
' 7'$zS
' q+kH
' 'z{R

INQUEST-PP=macro
