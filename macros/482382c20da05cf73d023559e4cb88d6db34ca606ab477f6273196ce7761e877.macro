Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 6, 0, MSForms, CommandButton"
Attribute VB_Control = "CommandButton2, 57, 1, MSForms, CommandButton"
Private Const ROW_GVNUMMER As Integer = 2
Private Const ROW_START_VP As Integer = 3

Private Const COL_DUMMY As Integer = 1
Private Const COL_GVNUMMER As Integer = 2
Private Const COL_NAME As Integer = 3
Private Const COL_VORNAME As Integer = 4
Private Const COL_TITEL As Integer = 5
'Private Const COL_ADELSBEZEICHNUNG As Integer = 6
Private Const COL_GEBURTSDATUM As Integer = 6
Private Const COL_GESCHLECHT As Integer = 7
Private Const COL_STRASSE As Integer = 8
Private Const COL_LAND As Integer = 9
Private Const COL_PLZ As Integer = 10
Private Const COL_ORT As Integer = 11
Private Const COL_BERUFSSTATUS As Integer = 12
Private Const COL_KVART As Integer = 13
Private Const COL_VERSBEGINN As Integer = 14

Private Const ERR_GVNUMMER_FALSCH As String = "Zelle B2: Format der GV-Nummer nicht korrekt; bitte in der Form xxxxx angeben."
Private Const ERR_GVNUMMER_FALSCH_1 As String = "Zelle B2: Format der GV-Nummer nicht korrekt; bitte in der Form AK-xxxxxxxxxxxxx angeben."
Private Const ERR_GVNUMMER_FALSCH_2 As String = "Zelle B2: Format der GV-Nummer nicht korrekt; bitte entweder in der Form xxxxx oder AK-xxxxxxxxxxxxx angeben."
Private Const ERR_NAME_FEHLT As String = "Name fehlt."
Private Const ERR_NAME_ZULANG As String = "Name zu lang; maximal 35 Zeichen erlaubt."
Private Const ERR_NAME_NUMERISCH As String = "Format des Namens nicht korrekt."
Private Const ERR_VORNAME_FEHLT As String = "Vorname fehlt."
Private Const ERR_VORNAME_ZULANG As String = "Vorname zu lang; maximal 30 Zeichen erlaubt."
Private Const ERR_VORNAME_NUMERISCH As String = "Format des Vornamens nicht korrekt."
Private Const ERR_GEBURTSDATUM_FEHLT As String = "Geburtsdatum fehlt."
Private Const ERR_GEBURTSDATUM_FALSCH As String = "Geburtsdatum nicht korrekt."
Private Const ERR_GEBURTSDATUM_FORMAT As String = "Geburtsdatum hat falsches Format; bitte im Format tt.mm.jjjj angeben."
Private Const ERR_ZU_ALT As String = "H|fffd|chstaufnahmealter (70 Jahre) |fffd|berschritten; bitte Geburtsdatum pr|fffd|fen."
Private Const ERR_ZU_ALT_FUER_KT As String = "H|fffd|chstaufnahmealter f|fffd|r Tarif bKV-Krankentagegeld (FKT01) (67 Jahre) |fffd|berschritten; bitte ggf. Geburtsdatum pr|fffd|fen."
Private Const ERR_ZU_JUNG_FUER_KT As String = "Mindestaufnahmealter f|fffd|r Tarif bKV-Krankentagegeld (FKT01) (16 Jahre) unterschritten; bitte ggf. Geburtsdatum pr|fffd|fen."
Private Const ERR_GESCHLECHT_FEHLT As String = "Geschlecht fehlt."
Private Const ERR_STRASSE_FEHLT As String = "Strasse fehlt."
Private Const ERR_STRASSE_ZULANG As String = "Strasse zu lang; maximal 35 Zeichen erlaubt."
Private Const ERR_STRASSE_NUMERISCH As String = "Format der Strasse nicht korrekt."
Private Const ERR_LAND_FEHLT As String = "Land fehlt."
Private Const ERR_PLZ_FEHLT As String = "PLZ fehlt."
Private Const ERR_ORT_FEHLT As String = "Ort fehlt."
Private Const ERR_ORT_ZULANG As String = "Ort zu lang; maximal 29 Zeichen erlaubt."
Private Const ERR_ORT_NUMERISCH As String = "Format des Ortes nicht korrekt."
Private Const ERR_BERUFSSTATUS_FEHLT As String = "Berufsstatus fehlt."
Private Const WARN_KT_NUR_VON_ANGESTELLTEN As String = "bKV-Krankentagegeld (FKT01) darf nur von Angestellten abgeschlossen werden."
Private Const ERR_KVART_FEHLT As String = "Krankenversicherungsart fehlt."
Private Const WARN_PKVV_NUR_BKV_VORSORGE As String = "Bei KV-Art PKV sind nur bKV-Vorsorge (FAV01), bKV-VorsorgeExtra (FAVE01), bKV-Krankentagegeld (FKT01), bKV-Reise (FRP01) und bKV-Heilpraktiker (FAH01) zul|fffd|ssig."
Private Const ERR_VERSBEGINN_FEHLT As String = "Versicherungsbeginn fehlt."
Private Const ERR_VERSBEGINN_FALSCH As String = "Versicherungsbeginn nicht korrekt."
Private Const ERR_VERSBEGINN_FORMAT As String = "Versicherungsbeginn hat falsches Format; bitte im Format 01.mm.jjjj angeben."
Private Const ERR_VERSBEGINN_NUR_AM_ERSTEN As String = "Versicherungsbeginn nur am Ersten eines Monats m|fffd|glich."
Private Const ERR_VERSBEGINN_ZU_FRUEH As String = "R|fffd|ckdatierung nur zum 1. des Vormonats m|fffd|glich."
Private Const ERR_VERSBEGINN_ZU_SPAET As String = "Der Versicherungsbeginn darf nicht mehr als 6 Monate in der Zukunft liegen."
Private Const ERR_PERSON_MEHRFACH_VORHANDEN As String = "Person ist mehrfach vorhanden."

Private Const ERR_ZIFFERN As String = "Format nicht korrekt; bitte Ziffern entfernen."
Private Const ERR_SONDERZEICHEN As String = "Format nicht korrekt; bitte Sonderzeichen entfernen: |fffd||fffd|!""#$%&'()*+,:;<=>?@\^_`{|}~[]"

Private Const MAX_NAME_LEN As Integer = 35
Private Const MAX_VORNAME_LEN As Integer = 30
Private Const MAX_STRASSE_LEN As Integer = 35
Private Const MAX_ORT_LEN As Integer = 29

Private Const MAX_ROWS = 2000

Private Const MSGBOX_TITLE_ERROR As String = "Fehler"
Private Const MSGBOX_TITLE_WARNING As String = "Warnung"
Private Const MSGBOX_CONTINUE_CHECK_PROMPT As String = "Wollen Sie mit der Pr|fffd|fung fortfahren?"

Private Const PATTERN_ZIFFERN As String = ".*([0-9]+?).*"
Private Const PATTERN_SONDERZEICHEN As String = ".*([|fffd||fffd|!""#$%&'()*+,:;<=>?@\^_`{|}~\[\]]).*"

Private canceled As Boolean


'
' Type Definition fuer den Mapping von Zeichen
'
Private Type hashtable
    key As Integer
    val As Integer
End Type
'
' Name trimen
'
Private Function trimName(name As String) As String
    
    If Len(name) > MAX_NAME_LEN Then
        name = Mid(name, 1, MAX_NAME_LEN)
    End If
    
    trimName = name
    
End Function
'
' Name trimen
'
Private Function trimVorname(name As String) As String
    
    If Len(name) > MAX_VORNAME_LEN Then
        name = Mid(name, 1, MAX_VORNAME_LEN)
    End If
    
    trimVorname = name
    
End Function
'
' Replace aus Internet. Office 97 hat keine Replace Function
'
Public Function Replace(Expression As Variant, Find As Variant, ReplaceWith As Variant, Optional Start As Long = 1, Optional Count As Long = -1, Optional Compare As Long)
    Dim byExpression() As Byte 'Byte Array holding "Expression" argument.
    Dim byFind() As Byte 'Byte Array holding "Find" argument.
    Dim byRplcW() As Byte 'Byte Array holding "ReplaceWith" argument.
    Dim byTmp() As Byte 'Byte Array holding return value until completion.
    'Array Indexes:
    Dim lExpPos As Long
    Dim lFindPos As Long
    Dim lRplcPos As Long
    Dim lTmpPos As Long
    'Array Lower Bounds:
    Dim lExprLB As Long
    'All others use 0
    'Array Upper-Bounds:
    Dim lExprUB As Long
    Dim lFindUB As Long
    Dim lRplcUB As Long
    Dim lTmpUB As Long
    'String Versions of Arguments:
    Dim sExpr As String
    Dim sFind As String
    'Counter(s):
    Dim lRplcCnt As Long 'Counts the number of replacments made.
    Const lNoReplace_c As Long = -1
    Const lZero_c As Long = 0
    Const lArrayOffset_c As Long = 1
    Const lUnicodeOffset_c As Long = 2
    If Count = lZero_c Then Exit Function
    If Compare = vbBinaryCompare Then
        'The comparisons this function makes are of ASCII values,
        'so no action is needed to make a binary comparison.
        byExpression = CStr(Expression)
        byFind = CStr(Find)
    Else
        'As a Q&D way to do text comparison all values are converted
        'to lower case for comparison:
        sExpr = VBA.LCase$(CStr(Expression))
        sFind = VBA.LCase$(CStr(Find))
        byExpression = sExpr
        byFind = sFind
    End If
    If UBound(byFind) < lZero_c Then
        Replace = CStr(byExpression)
        Exit Function
    End If
    'Set UpperBounds to variables as all are used in several places.
    lExprUB = UBound(byExpression)
    If Start > lExprUB + lArrayOffset_c Then Exit Function
    lFindUB = UBound(byFind)
    byRplcW = CStr(ReplaceWith)
    lRplcUB = UBound(byRplcW)
    lExprLB = Start - lArrayOffset_c
    Do
        For lExpPos = lExprLB To lExprUB Step lUnicodeOffset_c
            If byExpression(lExpPos) = byFind(lFindPos) Then
                lFindPos = lFindPos + lUnicodeOffset_c
                If lFindPos > lFindUB Then
                    lFindPos = lZero_c
                        Exit For
                    End If
                Else
                    lFindPos = lZero_c
                End If
        Next lExpPos
        'Check to see if entire string has been scanned:
            If lExpPos > lExprUB Then
                Exit Do
            Else
                 'Do replacement:
                If Compare = vbTextCompare Then
                     'Restore Case:
                    byExpression = sExpr
                    byFind = sFind
                End If
                 'Set lowerbound for next replacement:
                lExprLB = lExpPos - lFindUB + lRplcUB
                 'Create Temp array for to hold replaced value while it
                 'is being built.
                lTmpUB = lExprUB - lFindUB + lRplcUB
                ReDim byTmp(lTmpUB) As Byte
                 'Load text before Found-text:
                For lTmpPos = lZero_c To lExpPos - lFindUB Step lUnicodeOffset_c
                    byTmp(lTmpPos) = byExpression(lTmpPos)
                Next lTmpPos
                 'Load replacement text:
                lRplcPos = lZero_c
                For lTmpPos = lTmpPos To lTmpPos + lRplcUB Step lUnicodeOffset_c
                    byTmp(lTmpPos) = byRplcW(lRplcPos)
                    lRplcPos = lRplcPos + lUnicodeOffset_c
                Next lTmpPos
                 'Load text after Found-text:
                lExpPos = lExpPos + lUnicodeOffset_c
                For lTmpPos = lTmpPos To lTmpUB Step lUnicodeOffset_c
                    byTmp(lTmpPos) = byExpression(lExpPos)
                    lExpPos = lExpPos + lUnicodeOffset_c
                Next lTmpPos
                 'Save replaced value:
                byExpression = byTmp
                 'Prepare for next loop
                sExpr = CStr(byExpression)
                lExprUB = UBound(byExpression)
                If Count <> lNoReplace_c Then
                    lRplcCnt = lRplcCnt + lArrayOffset_c
                    If lRplcCnt = Start Then Exit Do
                End If
            End If
        Loop
        Replace = CStr(byExpression)
End Function


'
' Mapping Ligaturen
'
Private Function mapLigaturen(objInteger As Integer) As String

    Dim objResult As String
    
    Select Case objInteger
        
        Case 198:
            objResult = "Ae"
        Case 230:
            objResult = "ae"
        Case 140, 338:
            objResult = "Oe"
        Case 156, 339:
            objResult = "oe"
        Case Else
            objResult = ""
    
    End Select
    
    mapLigaturen = objResult
    
End Function
'
' Mapping fuer die Umlaute
'
Private Function mapUmlaute(objInteger As Integer) As String
    
    Dim objResult As String
    
    objResult = ""
    
    Select Case objInteger
        
        Case 252:
            objResult = "ue"
        Case 228:
            objResult = "ae"
        Case 196:
            objResult = "Ae"
        Case 246:
            objResult = "oe"
        Case 214:
            objResult = "Oe"
        Case 220:
            objResult = "Ue"
        Case Else
            objResult = ""
    
    End Select
    
    mapUmlaute = objResult

End Function
'
' Mapping generieren
'
Private Sub generateMapping(dictionary() As hashtable)
    
    ReDim dictionary(48)
    
    ' A
    dictionary(0).key = 192
    dictionary(0).val = 65
    
    dictionary(1).key = 193
    dictionary(1).val = 65
    
    dictionary(2).key = 194
    dictionary(2).val = 65
    
    dictionary(3).key = 195
    dictionary(3).val = 65
    
    dictionary(4).key = 197
    dictionary(4).val = 65
    
    ' C
    dictionary(5).key = 199
    dictionary(5).val = 99
    
    ' E
    dictionary(6).key = 200
    dictionary(6).val = 69
    
    dictionary(7).key = 201
    dictionary(7).val = 69
    
    dictionary(8).key = 202
    dictionary(8).val = 69
    
    dictionary(9).key = 203
    dictionary(9).val = 69
    
    ' I
    dictionary(10).key = 204
    dictionary(10).val = 73
    
    dictionary(11).key = 205
    dictionary(11).val = 73
    
    dictionary(12).key = 206
    dictionary(12).val = 73
    
    dictionary(13).key = 207
    dictionary(13).val = 73
       
    ' N
    dictionary(14).key = 209
    dictionary(14).val = 78
       
    ' O
    dictionary(15).key = 210
    dictionary(15).val = 79
    
    dictionary(16).key = 211
    dictionary(16).val = 79
    
    dictionary(17).key = 212
    dictionary(17).val = 79
    
    dictionary(18).key = 213
    dictionary(18).val = 79
    
    dictionary(19).key = 216
    dictionary(19).val = 79
    
    ' U
    dictionary(20).key = 217
    dictionary(20).val = 85
    
    dictionary(21).key = 218
    dictionary(21).val = 85
    
    dictionary(22).key = 219
    dictionary(22).val = 85
    
    ' Y
    dictionary(23).key = 221
    dictionary(23).val = 89
   
    ' a
    dictionary(24).key = 224
    dictionary(24).val = 97
    
    dictionary(25).key = 225
    dictionary(25).val = 97
    
    dictionary(26).key = 226
    dictionary(26).val = 97
    
    dictionary(27).key = 227
    dictionary(27).val = 97
    
    dictionary(28).key = 229
    dictionary(28).val = 97
   
    ' c
    dictionary(29).key = 231
    dictionary(29).val = 99
    
    'e
    dictionary(30).key = 232
    dictionary(30).val = 101
    
    dictionary(31).key = 233
    dictionary(31).val = 101
    
    dictionary(32).key = 234
    dictionary(32).val = 101
    
    dictionary(33).key = 235
    dictionary(33).val = 101
    
    ' i
    dictionary(34).key = 236
    dictionary(34).val = 105
    
    dictionary(35).key = 237
    dictionary(35).val = 105
    
    dictionary(36).key = 238
    dictionary(36).val = 105
    
    dictionary(37).key = 239
    dictionary(37).val = 105
    
    ' n
    dictionary(38).key = 241
    dictionary(38).val = 110
    
    ' o
    dictionary(39).key = 242
    dictionary(39).val = 111
    
    dictionary(40).key = 243
    dictionary(40).val = 111
    
    dictionary(41).key = 244
    dictionary(41).val = 111
    
    dictionary(42).key = 245
    dictionary(42).val = 111
    
    dictionary(43).key = 248
    dictionary(43).val = 111
    
    ' u
    dictionary(44).key = 249
    dictionary(44).val = 117
    
    dictionary(45).key = 250
    dictionary(45).val = 117
    
    dictionary(46).key = 251
    dictionary(46).val = 117
    
    ' y
    dictionary(47).key = 253
    dictionary(47).val = 121
      
End Sub
'
' Zeichen konvertieren
'
Private Function convertZeichen(zeichen As Integer) As Integer

    Dim dictionary() As hashtable
    Dim objResult As Integer
    Dim objChar As String
    
    objResult = 0
    objChar = Chr(zeichen)
    
    generateMapping dictionary
    
    For i = 0 To UBound(dictionary) - 1
        
        If dictionary(i).key = zeichen Then
            objResult = dictionary(i).val
            Exit For
        End If
    
    Next i
    
    objChar = Chr(objResult)
    convertZeichen = objResult
    
End Function
'
' Korrektur
'
Private Function korrigiereString(objString As String) As String
    
    Dim objCharacter As String
    Dim objInteger As Integer
    
    For i = 1 To Len(objString)
        
        objCharacter = Mid$(objString, i, 1)
        objInteger = Asc(objCharacter)
        objInteger = convertZeichen(objInteger)
        
        If objInteger > 0 Then
            objString = Replace(objString, objCharacter, Chr(objInteger))
        End If
        
    Next i
    
    objString = Trim(objString)
    objString = Replace(objString, "  ", " ")
    objString = Replace(objString, "  ", " ")
    
    objString = korrigiereLigaturen(objString)
    
    korrigiereString = ersteBuchstabeGross(objString)
    
End Function
'
' Erste Buchstabe gross
'
Private Function ersteBuchstabeGross(objString As String) As String
    
    Dim ersteBuchstabe As String
    Dim restVomString As String
    
    If Len(objString) < 1 Then
        
        ersteBuchstabeGross = objString
        Exit Function
    
    End If
    
    ersteBuchstabe = Mid$(objString, 1, 1)
    ersteBuchstabe = UCase(ersteBuchstabe)
    restVomString = Mid$(objString, 2, Len(objString) - 1)
    
    ersteBuchstabeGross = ersteBuchstabe & restVomString
    
End Function
'
' Ligaturen korrigieren
'
Private Function korrigiereLigaturen(objString As String) As String

    Dim objCharacter As String
    Dim objInteger As Integer
    Dim objLigatur As String
    Dim objAnfangLaende As Long
    
    objAnfangLaende = Len(objString)
    
    For i = 1 To objAnfangLaende
        
        objCharacter = Mid(objString, i, 1)
        objInteger = Asc(objCharacter)
        objLigatur = mapLigaturen(objInteger)
        
        If Len(objLigatur) > 0 Then
        
            objString = Replace(objString, objCharacter, objLigatur)
            objString = korrigiereLigaturen(objString)
        
        End If
        
    Next i
    
    korrigiereLigaturen = objString
    
End Function

'
' Nur die Sonderzeichen pruefen
' Hier wird geprueft ob die Zelle (String) ein Sonderzeichen
' Definition von BO beinhaltet
'
Private Function pruefeSonderzeichen(cell As Range) As Boolean
    
    Dim objResult As Boolean
    
    objResult = True
    
    If hatSonderzeichen(cell.Value) = True Then
        
        objResult = False
        ReportErrorInCellWithRowNumber cell, ERR_SONDERZEICHEN
    
    End If
    
    pruefeSonderzeichen = objResult
    
End Function
'
' Nur Ziffern pruefen
' Hier wird geprueft ob die Zelle (String) Ziffern beinhaltet
'
Private Function pruefeZiffern(cell As Range) As Boolean

    Dim objResult As Boolean
    objResult = True
    
    If hatZiffern(cell.Value) = True Then
    
        objResult = False
        ReportErrorInCellWithRowNumber cell, ERR_ZIFFERN
    
    End If
    
    pruefeZiffern = objResult
    
End Function
'
' Pruefung mit Korrektur
' Die Zelle wird nach Ziffern und Sonderzeichen geprueft.
' Sind keine Ziffern und keine Sonderzeichen vorhanden,
' wird eine Korrektur durchgefuert.
'
Private Sub pruefeUndkorrigiere(cell As Range)

    Dim objResultZiffern As Boolean
    Dim objResultSonderzeichen As Boolean
    
    objResultZiffern = pruefeZiffern(cell)
    objResultSonderzeichen = pruefeSonderzeichen(cell)
    
    If (objResultZiffern = True And objResultSonderzeichen = True) Then
    
        cell.Value = korrigiereString(cell.Value)
    
    End If
    
End Sub
'
' Pruefen ob ein String Ziffern beinhaltet
'
Private Function hatZiffern(aString As String) As Boolean

    Dim objRegex As Object
    Dim objMatch As Object
    Dim objResult As Boolean
    
    objResult = False
    
    Set objRegex = CreateObject("VbScript.Regexp")
    
    With objRegex
        
        .Pattern = PATTERN_ZIFFERN
        .Global = True
        Set objMatch = .Execute(aString)
        
        If objMatch.Count > 0 Then
            
            objResult = True
        
        End If
    
    End With
    
    Set objMatch = Nothing
    Set objRegex = Nothing

    hatZiffern = objResult
    
End Function
'
' Pruefen ob ein String Sonderzeichen beinhaltet - BO Definition
'
Private Function hatSonderzeichen(aString As String) As Boolean

    Dim objRegex As Object
    Dim objMatch As Object
    Dim objResult As Boolean
    
    objResult = False
    
    Set objRegex = CreateObject("VbScript.Regexp")
    
    With objRegex
        
        .Pattern = PATTERN_SONDERZEICHEN
        .Global = True
        Set objMatch = .Execute(aString)
        If objMatch.Count > 0 Then
            objResult = True
        End If
    
    End With
    
    Set objMatch = Nothing
    Set objRegex = Nothing

    hatSonderzeichen = objResult
    
End Function
'
' Alle leere Zeilen loeschen
'
Private Sub DeleteEmptyLines()
    
    Dim currentRow As Long
    Dim lastRow As Long
    
    
    lastRow = Cells.SpecialCells(xlCellTypeLastCell).row
    
    For currentRow = lastRow To 3 Step -1
        
        If Application.CountA(Rows(currentRow)) = 0 Then
            Rows(currentRow).Delete
        End If
        
    Next currentRow
    
    
    
End Sub

Private Sub CommandButton1_Click()
    
    canceled = False
    
    Dim a As Worksheet
    Set a = ActiveSheet
    a.Unprotect
    
    CommandButton1.TakeFocusOnClick = False
    
    ResetRowBorders ROW_GVNUMMER, COL_GVNUMMER, COL_GVNUMMER
    CheckGvNummer
    
    Dim row As Long
    DeleteEmptyLines
    For row = ROW_START_VP To UsedRange.Rows.Count
                
            ResetRowBorders row, 1, 15
                
        If Not IsRowEmpty(row) Then
            CheckRow row
            If canceled Then
                Exit For
            End If
            CheckDuplicate row
        End If
        
        If canceled Then
            Exit For
        End If
            
    Next row

    ' a.Protect

End Sub
'
' Geburtsdatum Neuanbahnung
'
Private Sub CommandButton2_Click()
    
    Dim a As Worksheet
    Dim row As Long
    Set a = ActiveSheet
    canceled = False
    a.Unprotect
    
    ' Test Only
    ersteBuchstabeGross "das ist ein Test"
    
    
    CommandButton2.TakeFocusOnClick = False
    
    ResetRowBorders ROW_GVNUMMER, COL_GVNUMMER, COL_GVNUMMER
    DeleteEmptyLines
    For row = ROW_START_VP To UsedRange.Rows.Count
                
        ResetRowBorders row, 1, 15
                
        If Not IsGeburtsdatumEmpty(row) Then
            CheckGeburtsdatum row, True
            
            If canceled Then
                Exit For
            End If
            
        End If
        
        If canceled Then
            Exit For
        End If
            
    Next row
    
    'a.Protect
End Sub

Function IsGeburtsdatumEmpty(row As Long) As Boolean

    IsGeburtsdatumEmpty = (Len(Range(Cells(row, COL_GEBURTSDATUM), Cells(row, COL_GEBURTSDATUM))) = 0)

End Function

Function IsRowEmpty(row As Long) As Boolean

    IsRowEmpty = _
        (Len(Range(Cells(row, COL_NAME), Cells(row, COL_NAME))) = 0) And _
        (Len(Range(Cells(row, COL_VORNAME), Cells(row, COL_VORNAME))) = 0) And _
        (Len(Range(Cells(row, COL_TITEL), Cells(row, COL_TITEL))) = 0) And _
        (Len(Range(Cells(row, COL_GEBURTSDATUM), Cells(row, COL_GEBURTSDATUM))) = 0) And _
        (Len(Range(Cells(row, COL_GESCHLECHT), Cells(row, COL_GESCHLECHT))) = 0) And _
        (Len(Range(Cells(row, COL_STRASSE), Cells(row, COL_STRASSE))) = 0) And _
        (Len(Range(Cells(row, COL_LAND), Cells(row, COL_LAND))) = 0) And _
        (Len(Range(Cells(row, COL_PLZ), Cells(row, COL_PLZ))) = 0) And _
        (Len(Range(Cells(row, COL_ORT), Cells(row, COL_ORT))) = 0) And _
        (Len(Range(Cells(row, COL_BERUFSSTATUS), Cells(row, COL_BERUFSSTATUS))) = 0) And _
        (Len(Range(Cells(row, COL_KVART), Cells(row, COL_KVART))) = 0) And _
        (Len(Range(Cells(row, COL_VERSBEGINN), Cells(row, COL_VERSBEGINN))) = 0)

End Function

Sub CheckRow(row As Long)

    If Not canceled Then
        CheckNachname row
    End If
    
    If Not canceled Then
        CheckVorname row
    End If
    
    If Not canceled Then
        CheckGeburtsdatum row, False
    End If
    
    If Not canceled Then
        CheckGeschlecht row
    End If
    
    If Not canceled Then
        CheckStrasse row
    End If
    
    If Not canceled Then
        CheckLand row
    End If
    
    If Not canceled Then
        CheckPlz row
    End If
        
    If Not canceled Then
        CheckOrt row
    End If
    
    If Not canceled Then
        CheckBerufsstatus row
    End If
    
    If Not canceled Then
        CheckKVArt row
    End If
    
    If Not canceled Then
        CheckVersicherungsbeginn row
    End If
    
End Sub

Sub CheckDuplicate(row As Long)

    Dim thisName As Range
    Set thisName = Cells(row, COL_NAME)
    
    Dim thisVorname As Range
    Set thisVorname = Cells(row, COL_VORNAME)
    
    Dim thisGeburtsdatum As Range
    Set thisGeburtsdatum = Cells(row, COL_GEBURTSDATUM)
    
    Dim other As Long
    For other = ROW_START_VP To row - 1
                
        Dim otherName As Range
        Set otherName = Cells(other, COL_NAME)
        
        Dim otherVorname As Range
        Set otherVorname = Cells(other, COL_VORNAME)
        
        Dim otherGeburtsdatum As Range
        Set otherGeburtsdatum = Cells(other, COL_GEBURTSDATUM)
        
        If thisName = otherName And _
            thisVorname = otherVorname And _
            thisGeburtsdatum = otherGeburtsdatum Then
            
            ReportDuplicate Range(thisName, thisGeburtsdatum), Range(otherName, otherGeburtsdatum), ERR_PERSON_MEHRFACH_VORHANDEN
            Exit For
            
        End If
        
        If canceled Then
            Exit For
        End If
            
    Next other

End Sub

Sub ResetRowBorders(row As Long, startCol As Integer, endCol As Integer)

    Range(Cells(row, startCol), Cells(row, endCol)).Borders.LineStyle = xlNone

End Sub

Sub CheckGvNummer()

    Dim cell As Range
    Set cell = Cells(ROW_GVNUMMER, COL_GVNUMMER)
    
    Select Case Len(cell)
        Case 5
            If Not IsNumeric(cell.Value) Then
                ReportErrorInCell cell, ERR_GVNUMMER_FALSCH
            ElseIf cell.Value < 10000 Or cell.Value > 99999 Then
                ReportErrorInCell cell, ERR_GVNUMMER_FALSCH
            End If
        Case 16
            If Left(cell.Value, 3) <> "AK-" Then
                ReportErrorInCell cell, ERR_GVNUMMER_FALSCH_1
            ElseIf Not IsNumeric(Right(cell.Value, 13)) Then
                ReportErrorInCell cell, ERR_GVNUMMER_FALSCH_1
            End If
        Case Else
            ReportErrorInCell cell, ERR_GVNUMMER_FALSCH_2
    End Select


End Sub

Sub CheckNachname(row As Long)

    Dim cell As Range
    Set cell = Cells(row, COL_NAME)
    CheckNonNumericField cell, MAX_NAME_LEN, ERR_NAME_FEHLT, ERR_NAME_ZULANG, ERR_NAME_NUMERISCH
    
    pruefeUndkorrigiere cell
    
    cell.Value = trimName(cell.Value)

End Sub

Sub CheckVorname(row As Long)

    Dim cell As Range
    Set cell = Cells(row, COL_VORNAME)
    CheckNonNumericField cell, MAX_VORNAME_LEN, ERR_VORNAME_FEHLT, ERR_VORNAME_ZULANG, ERR_VORNAME_NUMERISCH
    
    pruefeUndkorrigiere cell
    
    cell.Value = trimVorname(cell.Value)
    
End Sub


Sub CheckGeburtsdatum(row As Long, aktuell As Boolean)

    Dim cell As Range
    Set cell = Cells(row, COL_GEBURTSDATUM)
    
    SetStringFormat cell
    
    If CheckDateField(cell, ERR_GEBURTSDATUM_FEHLT, ERR_GEBURTSDATUM_FORMAT, ERR_GEBURTSDATUM_FALSCH) Then
        If Now < CDate(cell.Value) Then
            ReportErrorInCellWithRowNumber cell, ERR_GEBURTSDATUM_FALSCH
        Else
            CheckAlter row, aktuell
        End If
    End If
    
End Sub
'
' Funktion: Pruefen ob sich um ein H007 handelt
'
Function checkMinError(geburtsdatum As Date) As Boolean
    Dim geburtsdatumPlus16Jahre As Date
    Dim datumPlus6Monate As Date
    
    datumPlus6Monate = add6Monate(getTagesdatumMonatserster)
    geburtsdatumPlus16Jahre = addJahre(geburtsdatum, 16)
    If geburtsdatumPlus16Jahre > datumPlus6Monate Then
        checkMinError = True
    Else
        checkMinError = False
    End If
    
End Function
'
' Funktion: Pr|fffd|fen ob sich um ein H011 handelt
'
Function checkKTError(geburtsdatum As Date) As Boolean
    
    Dim datumPlus6Monate As Date
    Dim datumMinus1Monat As Date
    Dim geburtsdatumPlus67Jahre As Date
    Dim geburtsdatumPlus70Jahre As Date
    
    datumPlus6Monate = add6Monate(getTagesdatumMonatserster)
    datumMinus1Monat = sub1Monat(getTagesdatumMonatserster)
    geburtsdatumPlus67Jahre = addJahre(geburtsdatum, 67)
    geburtsdatumPlus70Jahre = addJahre(geburtsdatum, 70)
    
    If geburtsdatumPlus67Jahre < datumMinus1Monat And geburtsdatumPlus70Jahre >= datumPlus6Monate Then
        checkKTError = True
    Else
        checkKTError = False
    End If

End Function
'
' Funktion: Pruefen ob sich um ein H006 handelt
'
Function checkMaxError(geburtsdatum As Date) As Boolean
    
    Dim datumMinus1Monat As Date
    Dim geburtsdatumPlus70Jahre As Date
    
    datumMinus1Monat = sub1Monat(getTagesdatumMonatserster)
    geburtsdatumPlus70Jahre = addJahre(geburtsdatum, 70)
    
    If geburtsdatumPlus70Jahre < datumMinus1Monat Then
        checkMaxError = True
    Else
        checkMaxError = False
    End If

End Function

Sub CheckAlter(row As Long, aktuell As Boolean)

    Dim cellGeburtsdatum As Range
    Set cellGeburtsdatum = Cells(row, COL_GEBURTSDATUM)
    
    Dim cellVersicherungsbeginn As Range
    Set cellVersicherungsbeginn = Cells(row, COL_VERSBEGINN)
    
    If IsDate(cellGeburtsdatum.Value) And (IsDate(cellVersicherungsbeginn.Value) Or aktuell) Then
        
        Dim alter As Integer
        
        If aktuell Then
        
            If checkMinError(CDate(cellGeburtsdatum.Value)) = True Then
                ReportErrorInCellWithRowNumber cellGeburtsdatum, ERR_ZU_JUNG_FUER_KT
            ElseIf checkKTError(CDate(cellGeburtsdatum.Value)) = True Then
                ReportErrorInCellWithRowNumber cellGeburtsdatum, ERR_ZU_ALT_FUER_KT
            ElseIf checkMaxError(CDate(cellGeburtsdatum.Value)) = True Then
                ReportErrorInCellWithRowNumber cellGeburtsdatum, ERR_ZU_ALT
            End If
            
        Else
            alter = BerechneAlter(CDate(cellGeburtsdatum.Value), CDate(cellVersicherungsbeginn.Value))
            If alter > 69 Then
                ReportErrorInCellWithRowNumber cellGeburtsdatum, ERR_ZU_ALT
            ElseIf alter > 66 Then
                ReportErrorInCellWithRowNumber cellGeburtsdatum, ERR_ZU_ALT_FUER_KT
            ElseIf alter < 16 Then
                ReportErrorInCellWithRowNumber cellGeburtsdatum, ERR_ZU_JUNG_FUER_KT
            End If
            
        End If
    
    End If

End Sub

'
' Funktion - Tagesdatum Monatserster setzen
'
Function getTagesdatumMonatserster() As Date
    Dim aktuelleDatum As Date
    
    aktuelleDatum = Date
    getTagesdatumMonatserster = DateSerial(Year(aktuelleDatum), Month(aktuelleDatum), 1)
End Function

'
' Funktion liefert Datum plus 6 Monate
'
Function add6Monate(datum As Date) As Date
    add6Monate = DateAdd("m", 6, datum)
End Function

'
' Funktion liefert Datum minus 1 Monat
'
Function sub1Monat(datum As Date) As Date
    sub1Monat = DateAdd("m", -1, datum)
End Function

'
' Funtion addiere x Jahre
'
Function addJahre(geburtsdatum As Date, jahre As Integer) As Date
    addJahre = DateAdd("yyyy", jahre, geburtsdatum)
End Function


Function BerechneAlter(geburtsdatum As Date, versicherungsbeginn As Date)

    Dim jahre As Integer
    Dim monate As Integer
    Dim tage As Integer
    
    jahre = DateDiff("yyyy", geburtsdatum, versicherungsbeginn)
    monate = Month(versicherungsbeginn) - Month(geburtsdatum)
    tage = Day(versicherungsbeginn) - Day(geburtsdatum)
    
    If monate < 0 Then
        jahre = jahre - 1
    End If
    
    If monate = 0 And tage <= 0 Then
        jahre = jahre - 1
    End If
    
    BerechneAlter = jahre
    
End Function

Sub CheckGeschlecht(row As Long)

    Dim cell As Range
    Set cell = Cells(row, COL_GESCHLECHT)
    CheckCellEmpty cell, ERR_GESCHLECHT_FEHLT

End Sub

Sub CheckStrasse(row As Long)

    Dim cell As Range
    Set cell = Cells(row, COL_STRASSE)
    CheckNonNumericField cell, MAX_STRASSE_LEN, ERR_STRASSE_FEHLT, ERR_STRASSE_ZULANG, ERR_STRASSE_NUMERISCH
    
    pruefeSonderzeichen cell
    
End Sub

Sub CheckLand(row As Long)

    Dim cell As Range
    Set cell = Cells(row, COL_LAND)
    CheckCellEmpty cell, ERR_LAND_FEHLT

End Sub

Sub CheckPlz(row As Long)

    Dim cell As Range
    Set cell = Cells(row, COL_PLZ)
    CheckCellEmpty cell, ERR_PLZ_FEHLT
    
    pruefeSonderzeichen cell

End Sub

Sub CheckOrt(row As Long)

    Dim cell As Range
    Set cell = Cells(row, COL_ORT)
    CheckNonNumericField cell, MAX_ORT_LEN, ERR_ORT_FEHLT, ERR_ORT_ZULANG, ERR_ORT_NUMERISCH
    
    pruefeSonderzeichen cell

End Sub

Sub CheckBerufsstatus(row As Long)

    Dim cell As Range
    Set cell = Cells(row, COL_BERUFSSTATUS)
    
    If CheckCellEmpty(cell, ERR_BERUFSSTATUS_FEHLT) Then
        If Not cell.Value = "angestellt" Then
            ReportWarningInCellWithRowNumber cell, WARN_KT_NUR_VON_ANGESTELLTEN
        End If
    End If
        
End Sub

Sub CheckKVArt(row As Long)

    Dim cell As Range
    Set cell = Cells(row, COL_KVART)
    
    If cell.Value = "PKV" Then
        ReportWarningInCellWithRowNumber cell, WARN_PKVV_NUR_BKV_VORSORGE
    End If
    
    CheckCellEmpty cell, ERR_KVART_FEHLT

End Sub

Sub CheckVersicherungsbeginn(row As Long)

    Dim cell As Range
    Set cell = Cells(row, COL_VERSBEGINN)
    
    SetStringFormat cell
    
    If CheckDateField(cell, ERR_VERSBEGINN_FEHLT, ERR_VERSBEGINN_FORMAT, ERR_VERSBEGINN_FALSCH) Then
        Dim versbeginn As Date
        versbeginn = CDate(cell.Value)
        If Day(versbeginn) <> 1 Then
            ReportErrorInCellWithRowNumber cell, ERR_VERSBEGINN_NUR_AM_ERSTEN
        Else
            Dim diff As Integer
            diff = DateDiff("m", Now, versbeginn)
            If diff < -1 Then
                ReportErrorInCellWithRowNumber cell, ERR_VERSBEGINN_ZU_FRUEH
            ElseIf diff > 6 Then
                ReportErrorInCellWithRowNumber cell, ERR_VERSBEGINN_ZU_SPAET
            End If
        End If
    End If

End Sub
Function CheckNonNumericField(cell As Range, ByVal maxlen As Integer, ByVal emptyErrortext As String, ByVal maxlenErrortext As String, ByVal numericErrortext As String) As Boolean

    CheckNonNumericField = True
    
    If (Len(cell.Value) = 0) Then
        ReportErrorInCellWithRowNumber cell, emptyErrortext
        CheckNonNumericField = False
    ElseIf (Len(cell.Value) > maxlen) Then
        ReportErrorInCellWithRowNumber cell, maxlenErrortext
        CheckNonNumericField = False
    Else
        If IsNumeric(cell.Value) Then
            ReportErrorInCellWithRowNumber cell, numericErrortext
            CheckNonNumericField = False
        End If
    End If

End Function

Function CheckDateField(cell As Range, ByVal emptyErrortext As String, ByVal formatErrortext As String, ByVal invalidErrortext) As Boolean

    CheckDateField = True
    
    If Len(cell.Value) = 0 Then
        ReportErrorInCellWithRowNumber cell, emptyErrortext
        CheckDateField = False
    ElseIf Len(cell.Value) <> 10 Then
        ReportErrorInCellWithRowNumber cell, formatErrortext
        CheckDateField = False
    Else
        days = Left(cell.Value, 2)
        dmDelimiter = Mid(cell.Value, 3, 1)
        months = Mid(cell.Value, 4, 2)
        myDelimiter = Mid(cell.Value, 6, 1)
        years = Right(cell.Value, 4)
        If dmDelimiter <> "." Or myDelimiter <> "." Or _
            Not IsNumeric(days) Or Not IsNumeric(months) Or Not IsNumeric(years) Then
            ReportErrorInCellWithRowNumber cell, formatErrortext
            CheckDateField = False
        ElseIf Not IsDate(cell.Value) Then
            ReportErrorInCellWithRowNumber cell, invalidErrortext
            CheckDateField = False
        Else
            Dim d As Date
            d = cell.Value
            Dim s As String
            s = Format(d, "DD.MM.YYYY")
            If s <> cell.Value Then
                ReportErrorInCellWithRowNumber cell, invalidErrortext
                CheckDateField = False
            End If
        End If
    End If
    
End Function

Function CheckCellEmpty(cell As Range, ByVal errortext As String) As Boolean

    CheckCellEmpty = True
    
    If Len(cell.Value) = 0 Then
        ReportErrorInCellWithRowNumber cell, errortext
        CheckCellEmpty = False
    End If

End Function

Sub ReportErrorInCell(cell As Range, ByVal text As String)
    
    MarkProblem cell, True
    DisplayProblem True, text
    
End Sub

Sub ReportErrorInCellWithRowNumber(cell As Range, ByVal text As String)

    text = "Zeile " & cell.row & ": " & text
    ReportErrorInCell cell, text
    
End Sub

Sub ReportWarningInCell(cell As Range, ByVal text As String)
    
    MarkProblem cell, False
    DisplayProblem False, text
    
End Sub

Sub ReportWarningInCellWithRowNumber(cell As Range, ByVal text As String)
    
    text = "Zeile " & cell.row & ": " & text
    ReportWarningInCell cell, text
    
End Sub

Sub MarkProblem(cell As Range, isError As Boolean)

    If isError Then
        cell.Borders.Color = vbRed
    Else
        cell.Borders.Color = vbBlue
    End If

End Sub

Sub DisplayProblem(ByVal isError As Boolean, ByVal text As String)

    Dim title As String
    If isError Then
        title = MSGBOX_TITLE_ERROR
        msgboxType = vbYesNo + vbCritical
    Else
        title = MSGBOX_TITLE_WARNING
        msgboxType = vbYesNo + vbInformation
    End If
    
    text = text & vbNewLine & vbNew & MSGBOX_CONTINUE_CHECK_PROMPT
    
    Dim result As Integer
    result = MsgBox(text, msgboxType, title)
    
    If result = vbNo Then
        canceled = True
    End If
    
End Sub

Sub SetStringFormat(cell As Range)

    v = cell.Value
    If VarType(v) = vbDate Then
        v = Format(v, "dd.mm.yyyy")
    End If
    
    cell.NumberFormat = "@"
    cell.Value = v
    
End Sub

Sub ReportDuplicate(thisCells As Range, otherCells As Range, ByVal text As String)

    MarkProblem thisCells, True
    text = "Zeilen " & otherCells.row & ", " & thisCells.row & ": " & text
    DisplayProblem True, text
    
End Sub

' InQuest injected base64 decoded content
' z'!z

INQUEST-PP=macro
