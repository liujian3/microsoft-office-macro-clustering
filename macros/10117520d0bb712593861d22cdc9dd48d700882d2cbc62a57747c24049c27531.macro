Attribute VB_Name = "Date_Calendar"
Attribute VB_Base = "0{9139F7E1-C291-4889-A501-3F91DAB50507}{0EF2FAA2-258B-47F0-BB17-3792747A08F2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Sub Calendar1_Click()

    ThisWorkbook.Worksheets(1).Range("Tkr_Date") = Calendar1
    Unload Me

End Sub

Private Sub UserForm_Initialize()
' Check if active cell contains a date. If 'yes' show
' same date on calendar. If 'no' show today's date.
    If IsDate(Range("Tkr_Date")) Then
        Calendar1.value = DateValue(Range("Tkr_Date"))
    Else
        Calendar1.value = Date
    End If
End Sub
Attribute VB_Name = "Module1"
Sub Show()
    Dim t As cTemplate
    Set t = New cTemplate
    
    t.BeforeSave
End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Comments


Private Sub Workbook_Open()
    OpenDocument

End Sub
Attribute VB_Name = "cAllModules"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

' Listing All Modules In A Project

Private pFromWkb As Workbook
Private pToWkb As Workbook

''''''''''''''''''''''
' FromWkb property
''''''''''''''''''''''
Public Property Get fromWkb() As Workbook
    Set fromWkb = pFromWkb
End Property

Public Property Set fromWkb(value As Workbook)
    Set pFromWkb = value
End Property

''''''''''''''''''''''
' ToWkb property
''''''''''''''''''''''
Public Property Get toWkb() As Workbook
    Set toWkb = pToWkb
End Property

Public Property Set toWkb(value As Workbook)
    Set pToWkb = value
End Property

' This code will copy all the code modules (Type = vbext_ct_StdModule)
' from pFromVBProj to pToVBProj
Public Sub cAllModules()
On Error GoTo errHandler
    Dim pFromVBProj As VBIDE.VBProject
    Dim pToVBProj As VBIDE.VBProject
    Dim VBComp As VBIDE.VBComponent
    Dim WS As Worksheet
    Dim Rng As Range
    
    Dim c As cCopyModule
    Dim c1 As cCreateEventProcedure
    
    Set pFromVBProj = fromWkb.VBProject
    Set pToVBProj = toWkb.VBProject
    
    Set c = New cCopyModule
    Set c1 = New cCreateEventProcedure
'    Dim document As cDocument
'    Set document = New cDocument

'    Call UnProtectVBProject(toWkb, "YAKEET")
    
    For Each VBComp In pFromVBProj.VBComponents
        If VBComp.Type = vbext_ct_MSForm Or VBComp.Type = vbext_ct_ClassModule Or VBComp.Type = vbext_ct_StdModule Then
            Call DeleteModule(VBComp.name, pToVBProj)
            Call c.cCopyModule(VBComp.name, pFromVBProj, pToVBProj, True)
        End If
    Next VBComp
    ' Workbook_Open event
    Call c1.cCreateEventProcedure(pToVBProj)
    ' create the links to the default value form
'    document.defaultValue.BreakLink
'    document.defaultValue.Delete
    ' Show Save button
    ' on error resume next
'    Call document.button.Visible(True)
exitHandler:
    Set c = Nothing
    Set c1 = Nothing
'    Set document = Nothing
    Exit Sub
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "cAllModules: " & Err.number & ": " & Err.Description
    End Select
    GoTo exitHandler
    
End Sub


' Store filename, document name, and version
' to check version when document is edited
' ie. CGO009.xls, Before Loading Certificate' 2.7
' define name =version!$C$2

Public Sub VersionCheck(row As Integer)
On Error GoTo errHandler
    Dim WS As Worksheet
    Dim Rng As Range
    Dim name As String
    
    Set WS = pFromWkb.Worksheets("Version")
    Set Rng = WS.Range("A1")
    name = Replace(pToWkb.name, ".xls", "")
    Rng(row, 1).value = name
    Rng(row, 2).value = pToWkb.Worksheets(1).Range("documentName").value
    Rng(row, 3).value = pToWkb.Worksheets(1).Range("documentVersion").value
    ' define name =version!$C$2
    pFromWkb.names.Add name:=name, RefersToR1C1:="=" & "Version!R" & row & "C3"

    ' Link to CGO000 from CGO009
    ' ='C:\Program Files\Microsoft Office\OFFICE11\Library\[CGO000.xls]version'!$C$2
    pToWkb.Worksheets(1).Range("docmapVersion").Formula = "='" & _
        getInfoPath & _
        "[" & getInfoName & "]version'!" & _
        name
    ' Display message if document is out of date
    ' =IF(documentVersion=docmapVersion,,"This document version " & documentVersion & " is out of date."
    '        & " Please obtain latest version " & docmapVersion & " from Docmap.")
    pToWkb.Worksheets(1).Range("documentCheck").Formula = "=" _
        & "IF(documentVersion=docmapVersion, ," _
        & """ This document version """ _
        & " & documentVersion & " _
        & """ is out of date. Please obtain latest version """ _
        & " & docmapVersion &  " _
        & """ from Docmap. """ _
        & ")"
exitHandler:
    Exit Sub
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "VersionCheck: " & Err.number & ": " & Err.Description & " " & pFromWkb.name
    End Select
    GoTo exitHandler
    
End Sub

Sub DeleteModule(module As String, vbProj As VBIDE.VBProject)
'    Dim VBProj As VBIDE.VBProject
    Dim VBComp As VBIDE.VBComponent

'    Set VBProj = ActiveWorkbook.VBProject
    On Error Resume Next
    Set VBComp = vbProj.VBComponents(module)
    vbProj.VBComponents.Remove VBComp
End Sub

Function UnProtectVBProject(WB As Workbook, strPassWord As String) As Boolean
Dim vbProj As Object
    '// Note lateBinding so NO reference to Extensibilty Lib
    Set vbProj = WB.VBProject
    WB.Activate
    '// Can't do it if already unlocked!
    If vbProj.Protection <> 1 Then GoTo Done 'Exit Function
    Set Application.VBE.ActiveVBProject = vbProj
    '// Now use SendKeys to send the project password
    SendKeys strPassWord & "~~"
    Application.VBE.CommandBars(1).FindControl(ID:=2578, recursive:=True).Execute

Done:
    UnProtectVBProject = True
End Function

Sub ProtectVBProject(WB As Workbook, ByVal strPassWord As String)
Dim vbProj As Object
  
Set vbProj = WB.VBProject
'// Is it already locked!
If vbProj.Protection = 1 Then Exit Sub
Set Application.VBE.ActiveVBProject = vbProj
 '// SendKeys to set the project password
SendKeys "+{TAB}{RIGHT}%V{+}{TAB}" & strPassWord & "{TAB}" & strPassWord & "~"
Application.VBE.CommandBars(1).FindControl(ID:=2578, recursive:=True).Execute
'// Close and Save
WB.Close True

End Sub

Function GetPassWordString() As String

GetPassWordString = InputBox("Please enter VBA Password", "VBA Password setting")
If Len(GetPassWordString) = 0 Then End

End Function

Attribute VB_Name = "cButton"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Class wraps around shape object
'
Option Explicit

Private pButton As shape
Private pAlternativeText As String
Private pHeight As Variant
Private pWidth As Variant

''''''''''''''''''''''
' visible property
''''''''''''''''''''''
Public Property Get visible() As Boolean
    visible = button.visible
End Property

Public Property Let visible(value As Boolean)
    button.visible = value
End Property

''''''''''''''''''''''
' button property
''''''''''''''''''''''
Public Property Get button() As shape
    Set button = pButton
End Property

Public Property Set button(value As shape)
    Set pButton = value
End Property

''''''''''''''''''''''
' alternativeText property
''''''''''''''''''''''
Public Property Get alternativeText() As String
    alternativeText = pAlternativeText
End Property

' Use the text string to Get the shape object
Public Property Let alternativeText(value As String)
On Error GoTo errHandler
    pAlternativeText = value
    Set button = GetShape()
    
'MsgBox "button.OnAction: " & button.OnAction
    If button Is Nothing Then
        MsgBox value & " button was not found on sheet(1) '" & Worksheets(1).name & "'"
    End If
    
exitHandler:
    Exit Property
errHandler:
    MsgBox "cButton::alternativeText() " & Err.number & ": " & Err.Description
    GoTo exitHandler
End Property

''''''''''''''''''''''
' height property
''''''''''''''''''''''
Public Property Get height() As Variant
    height = pHeight
End Property

Public Property Let height(value As Variant)
    pHeight = value
End Property

''''''''''''''''''''''
' width property
''''''''''''''''''''''
Public Property Get width() As Variant
    width = pWidth
End Property

Public Property Let width(value As Variant)
    pWidth = value
End Property

Private Sub Class_Initialize()
' Initialize the variables for the class
'
On Error GoTo errHandler
   

exitHandler:
    Exit Sub
errHandler:
    MsgBox "cButton::Class_Initialize() " & Err.number & ": " & Err.Description
    GoTo exitHandler

End Sub

' Return the shape that matches the button's alternativeText (ie. "Save")
'
Private Function GetShape() As shape
On Error GoTo errHandler
    Dim myshape As shape

    Set GetShape = Nothing
    For Each myshape In Worksheets(1).Shapes
        If UCase(myshape.alternativeText) = UCase(Me.alternativeText) Then
            Set GetShape = myshape
            Exit For
        End If
    Next myshape

exitHandler:
    Exit Function
errHandler:
    MsgBox "cButton::GetShape() " & Err.number & ": " & Err.Description
    GoTo exitHandler

End Function


Attribute VB_Name = "cContainer"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Class to manage container (Internet Explorer)
'
Option Explicit

Private pContainer As Object
Private pName As String

''''''''''''''''''''''
' container property
''''''''''''''''''''''
Public Property Get container() As Object
    Set container = pContainer
End Property

Public Property Set container(value As Object)
    Set pContainer = value
End Property

''''''''''''''''''''''
' name property
''''''''''''''''''''''
Public Property Get name() As String
    name = pName
End Property

Public Property Let name(value As String)
    pName = value
End Property

Private Sub Class_Initialize()
' Initialize the variables for the class
'
    ' May not be running in a container (browser)
    On Error Resume Next
    Set Me.container = ActiveWorkbook.container
    Me.name = ActiveWorkbook.container.name
'    Me.container.Application.Visible = False
exitHandler:
    Exit Sub
errHandler:
    MsgBox "cContainer::Class_Initialize() " & Err.number & ": " & Err.Description
    GoTo exitHandler

End Sub

Public Sub quit()
    Me.container.Application.GoBack
End Sub

Attribute VB_Name = "cCopyModule"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Function cCopyModule(ModuleName As String, _
    FromVBProject As VBIDE.VBProject, _
    ToVBProject As VBIDE.VBProject, _
    OverwriteExisting As Boolean) As Boolean
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' CopyModule
    ' This function copies a module from one VBProject to
    ' another. It returns True if successful or  False
    ' if an error occurs.
    '
    ' Parameters:
    ' --------------------------------
    ' FromVBProject         The VBProject that contains the module
    '                       to be copied.
    '
    ' ToVBProject           The VBProject into which the module is
    '                       to be copied.
    '
    ' ModuleName            The name of the module to copy.
    '
    ' OverwriteExisting     If True, the VBComponent named ModuleName
    '                       in ToVBProject will be removed before
    '                       importing the module. If False and
    '                       a VBComponent named ModuleName exists
    '                       in ToVBProject, the code will return
    '                       False.
    '
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    
    Dim VBComp As VBIDE.VBComponent
    Dim FName As String
    
    '''''''''''''''''''''''''''''''''''''''''''''
    ' Do some housekeeping validation.
    '''''''''''''''''''''''''''''''''''''''''''''
    If FromVBProject Is Nothing Then
        cCopyModule = False
        Exit Function
    End If
    
    If Trim(ModuleName) = vbNullString Then
        cCopyModule = False
        Exit Function
    End If
    
    If ToVBProject Is Nothing Then
        cCopyModule = False
        Exit Function
    End If
    
    If FromVBProject.Protection = vbext_pp_locked Then
        cCopyModule = False
        Exit Function
    End If
    
    If ToVBProject.Protection = vbext_pp_locked Then
        cCopyModule = False
        Exit Function
    End If
    
    On Error Resume Next
    Set VBComp = FromVBProject.VBComponents(ModuleName)
    If Err.number <> 0 Then
        cCopyModule = False
        Exit Function
    End If
    
    ''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' FName is the name of the temporary file to be
    ' used in the Export/Import code.
    ''''''''''''''''''''''''''''''''''''''''''''''''''''
    FName = Environ("Temp") & "\" & ModuleName & ".bas"
    If OverwriteExisting = True Then
        ''''''''''''''''''''''''''''''''''''''
        ' If OverwriteExisting is True, Kill
        ' the existing temp file and remove
        ' the existing VBComponent from the
        ' ToVBProject.
        ''''''''''''''''''''''''''''''''''''''
        If Dir(FName, vbNormal + vbHidden + vbSystem) <> vbNullString Then
            Err.Clear
            Kill FName
            If Err.number <> 0 Then
                cCopyModule = False
                Exit Function
            End If
        End If
        With ToVBProject.VBComponents
            .Remove .Item(ModuleName)
        End With
    Else
        '''''''''''''''''''''''''''''''''''''''''
        ' OverwriteExisting is False. If there is
        ' already a VBComponent named ModuleName,
        ' exit with a return code of False.
        ''''''''''''''''''''''''''''''''''''''''''
        Err.Clear
        Set VBComp = ToVBProject.VBComponents(ModuleName)
        If Err.number <> 0 Then
            If Err.number = 9 Then
                ' module doesn't exist. ignore error.
            Else
                ' other error. get out with return value of False
                cCopyModule = False
                Exit Function
            End If
        End If
    End If
    
    ''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' Do the Export and Import operation using FName
    ' and then Kill FName.
    ''''''''''''''''''''''''''''''''''''''''''''''''''''
    FromVBProject.VBComponents(ModuleName).Export fileName:=FName
    ToVBProject.VBComponents.Import fileName:=FName
    Kill FName
    cCopyModule = True
End Function





Attribute VB_Name = "cCopyWorkBook"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

' Opens all Excel workbooks in a specified folder
' Copy all the code modules to each workbook

Public Sub cCopyWorkbook(szFolderName As String)
'   Folder Name:
'    Const szFolderName As String = "\Project Books"
    
    Dim toWkb As Workbook
    Dim fromWkb As Workbook
    Dim szWkbNames As String
    Dim szOpenWkbNames As String
    Dim i As Long
    
    Set fromWkb = ThisWorkbook
    
'   Obtain max resources available for Excel
    Dim lMaxSize As Long
    lMaxSize = Application.MemoryTotal
    
    
'   Obtain the initial file size
    Dim lSize As Long
    lSize = FileLen(ThisWorkbook.FullName)
    
    
'   This workbook's path
    Dim szThisPath As String
        szThisPath = ThisWorkbook.path
        
        
'   Build a path to include the project folder
    Dim szProjectPath As String
        szProjectPath = szThisPath & szFolderName
        
        
'   Grab the name of our Master workbook
'   Used to ensure this workbook becomes active after
'   opening all the other files
    Dim szMasterBook As String
        szMasterBook = ThisWorkbook.name


'   Find all Excel workbooks in the folder
    With Application.FileSearch
        .NewSearch
        .SearchSubFolders = False
        .lookin = szProjectPath
        .FileType = msoFileTypeExcelWorkbooks
        .Execute
        

'   if we found some files to open:
    If .FoundFiles.Count > 0 Then
    
        Dim A As cAllModules
        Set A = New cAllModules

'       Stop screen flicker of workbooks being opened
        Application.ScreenUpdating = False
        
'       =============================================================
'       Simple loop, opening the workbooks
        For i = 1 To .FoundFiles.Count
        
            If IsWbOpen(.FoundFiles(i)) Then
                szOpenWkbNames = szOpenWkbNames & _
                vbNewLine & StripFromPath(.FoundFiles(i))
                GoTo NextFile
            End If
            
            ' Disable macros
            Application.EnableEvents = False
            Set toWkb = Workbooks.Open(.FoundFiles(i), UpdateLinks:=False)
            Application.EnableEvents = True
            
'           Store workbooks name in a variable for later use
            szWkbNames = szWkbNames & vbNewLine & toWkb.name
            
            ' Copy All code modules
            Set A.toWkb = toWkb
            Set A.fromWkb = fromWkb
            A.cAllModules       ' Copy all code modules
            
            ' Disable macros
            Application.EnableEvents = False
            toWkb.Save
            Application.EnableEvents = True
            toWkb.Close
'           Check that we have not used up all available resources:
            ' lSize = lSize + FileLen(ActiveWorkbook.FullName)
            
'           If we have, exit the loop because we cannot open up anymore files
            If lSize >= lMaxSize Then GoTo MaxedOut
            
NextFile:
        Next i
'       =============================================================

ErrExit:
'       Enable Screen Update Property
        Application.ScreenUpdating = True
        
    
        
'       Make our Master Wokrbook active
        Workbooks(szMasterBook).Activate
    
    
'       For this example, just deliver a message
'       stating which books were opened, or which books were
'       already opened + the workbooks opened
        If szOpenWkbNames <> CStr(Empty) Then
            MsgBox "These workbooks were already open:" & _
            vbNewLine & szOpenWkbNames & _
            vbNewLine & vbNewLine & _
            "These workbooks were opened:" & vbNewLine & szWkbNames
            
        Else
        
            MsgBox i - 1 & " workbooks were opened:" & vbNewLine & szWkbNames
            
        End If
        
    Else
    
        MsgBox "No workbooks were found in folder *" & _
        Replace(szFolderName, "\", CStr(Empty)) & "*", 64
    
    End If
    
    End With
    
'   Explicitly clear memory
    Set toWkb = Nothing
    Set fromWkb = Nothing
    Exit Sub
    
MaxedOut:
    MsgBox "The maximum amount of workbooks have been opened.", 64
    GoTo ErrExit
End Sub


Private Function IsWbOpen(wbName As String) As Boolean
'   Check if a workbook is open
    Dim i As Long
    For i = Workbooks.Count To 1 Step -1
        If Workbooks(i).FullName = wbName Then Exit For
    Next
    If i <> 0 Then IsWbOpen = True
End Function


Private Function StripFromPath(FullPath As String) As String
'   Cut the file name out of a full path
    Dim szStrip As String
    Dim szFile As String
    Dim i As Long

    If Len(FullPath) > 0 Then
        szStrip = CStr(Empty)
        i = Len(FullPath)
        Do While szStrip <> "\"
            szStrip = Mid$(FullPath, i, 1)
            If szStrip = "\" Then
                szFile = Right$(FullPath, Len(FullPath) - i)
            End If
            i = i - 1
        Loop
        StripFromPath = szFile
    End If
End Function




Attribute VB_Name = "cCreateEventProcedure"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Sub cCreateEventProcedure(vbProj As VBIDE.VBProject)
On Error GoTo errHandler
    
    Dim VBComp As VBIDE.VBComponent
    Dim CodeMod As VBIDE.CodeModule
    Const DQUOTE = """" ' one " character
    Dim SL As Long ' start line
    Dim EL As Long ' end line
    Dim SC As Long ' start column
    Dim EC As Long ' end column
    Dim Found As Boolean
    Dim FindWhat As String

    Set VBComp = vbProj.VBComponents("ThisWorkbook")
    Set CodeMod = VBComp.CodeModule
    SL = 1
    EL = CodeMod.CountOfLines
    SC = 1
    EC = 255
    FindWhat = "Workbook_Open"
    Found = CodeMod.Find(target:=FindWhat, StartLine:=SL, StartColumn:=SC, _
                            EndLine:=EL, EndColumn:=EC)
    If Not Found Then
        Call CreateOpenEventProcedure(CodeMod)
    End If
    SL = 1
    EL = CodeMod.CountOfLines
    SC = 1
    EC = 255
    FindWhat = "Workbook_BeforeSave"
    Found = CodeMod.Find(target:=FindWhat, StartLine:=SL, StartColumn:=SC, _
                            EndLine:=EL, EndColumn:=EC)
    If Not Found Then
'        Call CreateBeforeSaveEventProcedure(CodeMod)
    End If
    
exitHandler:
    Exit Sub
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "cCreateEventProcedure::cCreateEventProcedure: " & Err.number & ": " & Err.Description
    End Select
    GoTo exitHandler
End Sub

Private Sub CreateOpenEventProcedure(CodeMod As VBIDE.CodeModule)
On Error GoTo errHandler

    Dim LineNum As Long

    With CodeMod
        LineNum = .CreateEventProc("open", "Workbook")
        LineNum = LineNum + 1
        .InsertLines LineNum, "    OpenDocument"

    End With
    
exitHandler:
    Exit Sub
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "cCreateEventProcedure::CreateOpenEventProcedure: " & Err.number & ": " & Err.Description
    End Select
    GoTo exitHandler
End Sub

Private Sub CreateBeforeSaveEventProcedure(CodeMod As VBIDE.CodeModule)
On Error GoTo errHandler

    Dim LineNum As Long

    With CodeMod
        LineNum = .CreateEventProc("beforesave", "Workbook")
        LineNum = LineNum + 1
        .InsertLines LineNum, "        Call BeforeSave(SaveAsUI, Cancel)"

    End With
    
exitHandler:
    Exit Sub
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "cCreateEventProcedure::CreateBeforeSaveEventProcedure: " & Err.number & ": " & Err.Description
    End Select
    GoTo exitHandler
End Sub

Attribute VB_Name = "cDefaultValue"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Class to manage defaualt values form
'
Option Explicit

Private pSource As String
Private pLookupValue As String
Private pTitle As String
Private pVersion As String
Private pPath As String
Private pTemplatePath As String
Private pDocumentType As String

Const password = "YAKEET"
' prefix for default value names ie. Tk_Vessel
Const TK_PREFIX = "TK_"
' Columns in the document lookup table
Const COL_TYPE = 4
Const COL_VERSION = 3
Const COL_TITLE = 2
Const DOCUMENT_PATH = "Path"
Const TEMPLATE_PATH = "Path_Template"

''''''''''''''''''''''
' documentType property
''''''''''''''''''''''
Public Property Get documentType() As String
    documentType = pDocumentType
End Property

Public Property Let documentType(value As String)
    pDocumentType = value
End Property

''''''''''''''''''''''
' templatePath property
''''''''''''''''''''''
Public Property Get templatePath() As String
    templatePath = pTemplatePath
End Property

Public Property Let templatePath(value As String)
    pTemplatePath = value
End Property

''''''''''''''''''''''
' path property
''''''''''''''''''''''
Public Property Get path() As String
    path = pPath
End Property

Public Property Let path(value As String)
    pPath = value
End Property

''''''''''''''''''''''
' lookupValue property
''''''''''''''''''''''
Public Property Get lookupValue() As String
    lookupValue = pLookupValue
End Property

Public Property Let lookupValue(value As String)
    pLookupValue = value
End Property

''''''''''''''''''''''
' title property
''''''''''''''''''''''
Public Property Get title() As String
    title = pTitle
End Property

Public Property Let title(value As String)
    pTitle = value
End Property

''''''''''''''''''''''
' version property
''''''''''''''''''''''
Public Property Get version() As String
    version = pVersion
End Property

Public Property Let version(value As String)
    pVersion = value
End Property

''''''''''''''''''''''
' source property
''''''''''''''''''''''
Public Property Get source() As String
    source = pSource
End Property

Public Property Let source(value As String)
    Dim file As cFile
    Set file = New cFile
    file.fileName = value
    If file.Exists() Then
        pSource = value
    End If
    Set file = Nothing
End Property

' Initialize the variables for the class
'
Private Sub Class_Initialize()
On Error GoTo errHandler

exitHandler:
    Exit Sub
errHandler:
    MsgBox "cDefaultValue::Class_Initialize() " & Err.number & ": " & Err.Description
    GoTo exitHandler

End Sub

' Update optional default values on the activesheet
'
Public Sub UpdateOptional()
On Error GoTo errHandler
    Dim ndx As Integer
    Dim ItemVar As String
    Dim value As Variant
   
    Me.protect (False)
    For ndx = 1 To ActiveWorkbook.names.Count
        ItemVar = UCase(ActiveWorkbook.names(ndx).name)
        If Left(ItemVar, CLng(Len(TK_PREFIX))) = TK_PREFIX Then
            Select Case ItemVar
            Case Else
                ' lookup the value on the default value form
                value = lookup(ItemVar)
                Range(ItemVar).value = value
            End Select
       End If
    Next ndx

exitHandler:
    Me.protect (True)
    Exit Sub
errHandler:
    MsgBox "cDefaultValue::UpdateOptional() " & Err.number & ": " & Err.Description & " : " & ItemVar
    GoTo exitHandler
End Sub

' Update Title on the activesheet and
' initialize version, type and path variables
'
Public Sub UpdateMandatory(name As String)
On Error GoTo errHandler
   
    Me.protect (False)
    If Len(lookupValue) > 0 Then
        title = vlookup(lookupValue, COL_TITLE)
        Range(name).value = title
        version = vlookup(lookupValue, COL_VERSION)
        documentType = vlookup(lookupValue, COL_TYPE)
        path = lookup(TK_PREFIX & DOCUMENT_PATH)
        templatePath = lookup(TK_PREFIX & TEMPLATE_PATH)
    End If

exitHandler:
    Me.protect (True)
    Exit Sub
errHandler:
    MsgBox "cDefaultValue::UpdateMandatory() " & Err.number & ": " & Err.Description
    GoTo exitHandler
End Sub

Public Function SetDocumentPath(path As String, docType As String)

    If docType = "TEMPLATE" Then
        Range(TK_PREFIX & TEMPLATE_PATH).value = FixTrailingSeparator(path)
    Else
        Range(TK_PREFIX & DOCUMENT_PATH).value = FixTrailingSeparator(path)
    End If
    
End Function

' Return the documentPath when the master document is the active document
Public Function getDocumentPath(Optional docType As String) As String
    If docType = "TEMPLATE" Then
        getDocumentPath = Range(TK_PREFIX & TEMPLATE_PATH).value
    Else
        getDocumentPath = Range(TK_PREFIX & DOCUMENT_PATH).value
    End If
    
End Function
' lookup a named range on the default values form
'
Private Function lookup(ref As String) As Variant
On Error GoTo errHandler
    Dim arg As String

    If Len(Me.source) > 0 Then
        arg = "'" & Me.source & "'!" & ref
        lookup = ExecuteExcel4Macro(arg)
    Else
        ' CGO000 may be the active document
        ' or may not be saved
        On Error Resume Next
        lookup = Range(ref)
    End If
exitHandler:
    Exit Function
errHandler:
    MsgBox "cDefaultValue::lookup() " & Err.number & ": " & Err.Description & " : " & ref
    GoTo exitHandler

End Function

' lookup a vlaue in the default values documentList table
'
Private Function vlookup(value As String, col As Integer) As String
On Error GoTo errHandler
    Dim arg As String
    Dim QUOTE As String

    QUOTE = Chr(34)
    If Len(Me.source) > 0 Then
        arg = "VLOOKUP(" & QUOTE & value & QUOTE _
            & ",'" & Me.source & "'!documentList" _
            & "," & col _
            & ",FALSE)"
    Else
        arg = "VLOOKUP(" & QUOTE & value & QUOTE _
            & ",!documentList" _
            & "," & col _
            & ",FALSE)"
    End If

    ' CGO000 may be the active document
    ' or may not be saved yet
    On Error Resume Next
    vlookup = ExecuteExcel4Macro(arg)
exitHandler:
    Exit Function
errHandler:
    MsgBox "cDefaultValue::vlookup() " & Err.number & ": " & Err.Description & " : " & value
    GoTo exitHandler

End Function

' Add a path seperator if needed
Private Function FixTrailingSeparator(path As String, _
    Optional PathSeparator As String = "\") As String
     
    Select Case Right(path, 1)
    Case PathSeparator
        FixTrailingSeparator = path
    Case Else
        FixTrailingSeparator = path & PathSeparator
    End Select
     
End Function

Public Sub protect(protect As Boolean)
On Error GoTo errHandler
    
    If protect Then
        Worksheets(1).protect password:=password
    Else
        Worksheets(1).Unprotect password:=password
    End If
    
exitHandler:
    Exit Sub
errHandler:
    MsgBox "cDocument::protect() " & Err.number & ": " & Err.Description
    GoTo exitHandler
End Sub

Public Function extendedName(sDate As String, title As String, suffix As String, MElocation As String) As String
On Error GoTo errHandler
    Dim vessel As String
    
'    On Error Resume Next
'    sDate = document.documentDate
'    If Len(sDate) = 0 Then
'        sDate = Date
'    End If
    sDate = Format(sDate, "YYYYMMDD")
    vessel = lookup("Tk_Vessel")
'    title = document.documentTitle
'    suffix = document.documentSuffix
    
    extendedName = sDate & "_" & vessel & "_" & title
    If Len(MElocation) > 0 Then
        extendedName = extendedName & "_" & MElocation
    End If
    If Len(suffix) > 0 Then
        extendedName = extendedName & "_" & suffix
    End If
    
exitHandler:
    Exit Function
errHandler:
    MsgBox "cDefaultValue::extendedName() " & Err.number & ": " & Err.Description
    GoTo exitHandler
End Function
Attribute VB_Name = "cDocument"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Class to manage documents
'
Option Explicit

Private pFile As cFile
Private pVersion As cVersion
Private pDefaultValue As cDefaultValue
Private pButton As cButton
Private pTemplate As cTemplate

Private pFileFilter As String
Private pFileFormat As XlFileFormat

Private pDocumentNo As String
Private pDocumentPath As String
Private pDocumentTitle As String
Private pDocumentSuffix As String   ' Filename suffix AE # 1
Private pDocumentDate As String
Private pDocumentName As String     ' Extended document name YYYYMMDD_VESSEL_TITLE[_SUFFIX]
Private pDocumentMElocation As String     ' Main engine location Port, Starboard, Midship

Private pMasterPath As String
Private pMasterName As String
Private pMasterTitle As String
Private pFullMasterName As String

Const MASTER_NAME = "CGO000.xls"
Const MASTER_TITLE = "Vessel Information Spreadsheet"

' Mandatory named ranges
Const DOCUMENT_TITLE = "Tkm_Title"      ' document title
Const DOCUMENT_NO = "Tkm_Number"        ' docmap document number
Const DOCUMENT_VERSION = "Tkm_Version"  ' version control document version
Const DOCUMENT_TYPE = "Tkm_Type"        ' document type - default:cargo or master or template
' Maintenance forms required fields - SP
Const DOCUMENT_SUFFIX = "Tkr_Suffix"    ' document suffix - AE# 1
Const DOCUMENT_DATE = "Tkr_Date"        ' document date - YYYYMMDD
Const DOCUMENT_ME_LOCATION = "Tkr_ME_Location"  ' Port, Starboard, Midhhip
Const DOCUMENT_AE_NUMBER = "Tkr_AE"             ' Alternate engine number
Const DOCUMENT_UNIT_NUMBER = "Tkr_Unit_No"      ' Unit no

Const prompt = "Path does not exist." _
        & vbCrLf & "Do you want to attempt to create it automatically? "
Const title = "'Path' does not exist. Navigate to Save location ..."
Const SAVE_BUTTON = "SAVE"

Const TYPE_YYYY = "NAME_YYYY"    ' Filename YYYYMMDD_VESSEL_TITLE
Const TYPE_TEMPLATE = "TEMPLATE"    ' Document type
Const TYPE_MASTER = "CGO000"

''''''''''''''''''''''
' file property
''''''''''''''''''''''
Public Property Get file() As cFile
    Set file = pFile
End Property

Public Property Set file(value As cFile)
    Set pFile = value
End Property

''''''''''''''''''''''
' version property
''''''''''''''''''''''
Public Property Get version() As cVersion
    Set version = pVersion
End Property

Public Property Set version(value As cVersion)
    Set pVersion = value
End Property

''''''''''''''''''''''
' defaultValue property
''''''''''''''''''''''
Public Property Get defaultValue() As cDefaultValue
    Set defaultValue = pDefaultValue
End Property

Public Property Set defaultValue(value As cDefaultValue)
    Set pDefaultValue = value
End Property

''''''''''''''''''''''
' button property
''''''''''''''''''''''
Public Property Get button() As cButton
    Set button = pButton
End Property

Public Property Set button(value As cButton)
    Set pButton = value
End Property

''''''''''''''''''''''
' template property
''''''''''''''''''''''
Public Property Get template() As Object
    Set template = pTemplate
End Property

Public Property Set template(value As Object)
    Set pTemplate = value
End Property

''''''''''''''''''''''
' fileFormat property
''''''''''''''''''''''
Public Property Get fileFormat() As XlFileFormat
    fileFormat = pFileFormat
End Property

Public Property Let fileFormat(value As XlFileFormat)
    pFileFormat = value
End Property

''''''''''''''''''''''
' fileFilter property
''''''''''''''''''''''
Public Property Get fileFilter() As String
    fileFilter = pFileFilter
End Property

Public Property Let fileFilter(value As String)
    pFileFilter = value
End Property

''''''''''''''''''''''
' documentNo property
''''''''''''''''''''''
Public Property Get documentNo() As String
    documentNo = pDocumentNo
End Property

Public Property Let documentNo(value As String)
    pDocumentNo = value
End Property

''''''''''''''''''''''
' documentPath property
''''''''''''''''''''''
Public Property Get documentPath() As String
    documentPath = pDocumentPath
End Property

Public Property Let documentPath(value As String)
    pDocumentPath = value
End Property

''''''''''''''''''''''
' documentName property
''''''''''''''''''''''
Public Property Get documentName() As String
    documentName = pDocumentName
End Property

Public Property Let documentName(value As String)
    pDocumentName = value
End Property

''''''''''''''''''''''
' documentTitle property
''''''''''''''''''''''
Public Property Get documentTitle() As String
    documentTitle = pDocumentTitle
End Property

Public Property Let documentTitle(value As String)
    pDocumentTitle = value
End Property


''''''''''''''''''''''
' documentSuffix property
''''''''''''''''''''''
Public Property Get documentSuffix() As String
    documentSuffix = pDocumentSuffix
End Property

Public Property Let documentSuffix(value As String)
    pDocumentSuffix = value
End Property

''''''''''''''''''''''
' documentSuffix property
''''''''''''''''''''''
Public Property Get documentMElocation() As String
    documentMElocation = pDocumentMElocation
End Property

Public Property Let documentMElocation(value As String)
    pDocumentMElocation = value
End Property

''''''''''''''''''''''
' documentDate property
''''''''''''''''''''''
Public Property Get documentDate() As String
    documentDate = pDocumentDate
End Property

Public Property Let documentDate(value As String)
    pDocumentDate = value
End Property

''''''''''''''''''''''
' masterName property
''''''''''''''''''''''
Public Property Get masterName() As String
    masterName = pMasterName
End Property

Public Property Let masterName(value As String)
    pMasterName = value
End Property

''''''''''''''''''''''
' masterTitle property
''''''''''''''''''''''
Public Property Get masterTitle() As String
    masterTitle = pMasterTitle
End Property

Public Property Let masterTitle(value As String)
    pMasterTitle = value
End Property

''''''''''''''''''''''
' masterPath property
''''''''''''''''''''''
Public Property Get masterPath() As String
    masterPath = pMasterPath
End Property

Public Property Let masterPath(value As String)
    pMasterPath = value
End Property

''''''''''''''''''''''
' fullMasterName property
' C:\Program Files\Microsoft Office\Office10\LIBRARY\CGO000.xls
''''''''''''''''''''''
Public Property Get fullMasterName() As String
    fullMasterName = pFullMasterName
End Property

Public Property Let fullMasterName(value As String)
    pFullMasterName = value
End Property
' Initialize the variables for the class
'
Private Sub Class_Initialize()
On Error GoTo errHandler
    
    If IsRange(DOCUMENT_NO) Then
        Me.documentNo = Range(DOCUMENT_NO).value
    End If
    
    Me.fileFormat = xlNormal
    Me.fileFilter = "Excel Files (*.xls), *.xls"
    
    ' master form
    Me.masterPath = Application.path & Application.PathSeparator & "ADDINS" & Application.PathSeparator

    Me.masterName = MASTER_NAME
    Me.masterTitle = MASTER_TITLE
    Me.fullMasterName = Me.masterPath & Me.masterName
    
    ' Default Value
    Set Me.defaultValue = New cDefaultValue
    Me.defaultValue.source = Me.fullMasterName
    Me.defaultValue.lookupValue = Me.documentNo
    If IsRange(DOCUMENT_TITLE) Then
        Me.defaultValue.UpdateMandatory (DOCUMENT_TITLE)
    End If
    ' Button
    Set Me.button = New cButton
    ' Title
    Me.documentTitle = Me.defaultValue.title
    ' Type
    If IsType(TYPE_TEMPLATE) Then
        ' document has a template
        Set Me.template = New cTemplate
        Me.documentPath = Me.defaultValue.templatePath
    Else
        Me.button.alternativeText = SAVE_BUTTON
        ' Path
        Me.documentPath = Me.defaultValue.path
        ' Name
        Me.documentTitle = buildTitle()
    End If
    
    If IsType(TYPE_MASTER) Then
        ' documentPath is the location to save default value form
'        Me.documentPath = Me.masterPath
        ' masterPath is the location to save all the other forms
'        Me.masterPath = Me.defaultValue.getDocumentPath
        Me.documentTitle = Me.masterName
    End If

    ' Version
    Set Me.version = New cVersion
    Me.version.control = Me.defaultValue.version
    If IsRange(DOCUMENT_VERSION) Then
        Me.version.number = Range(DOCUMENT_VERSION).value
    End If
        
     ' File
    Set Me.file = New cFile
    Me.file.fileFilter = Me.fileFilter
    Me.file.fileFormat = Me.fileFormat
    Me.file.fileName = Me.documentPath & Me.documentTitle
exitHandler:
    Exit Sub
errHandler:
    MsgBox "cDocument::Class_Initialize() " & Err.number & ": " & Err.Description
    GoTo exitHandler

End Sub


' Check if the name is defined
'
Public Function IsRange(name As String, Optional optName As Boolean) As Boolean
    On Error Resume Next
    Dim tmp As String
    
    tmp = Range(name).value
    If Err.number = 0 Then
        IsRange = True
    Else
        If optName <> False Then
            MsgBox "Please define Mandatory name: " & name
        End If
        IsRange = False
    End If

End Function

' Return true if document and template paths exist
'
Public Function IsPaths() As Boolean

    IsPaths = False
    If IsPath() Then
        If IsPath(TYPE_TEMPLATE) Then
            IsPaths = True
        End If
    End If
End Function

Public Function IsPath(Optional docType As String) As Boolean
' Test to see if directory exists
''''''''''''''''''''''''''''''''
On Error GoTo errHandler
    Dim result As VbMsgBoxResult
    Dim path As String
    Dim msg As String
    
    ' default D:\Users\Common\Docmap\
    path = Me.defaultValue.getDocumentPath(docType)
    Do
        If Len(path) = 0 Or Len(Dir(path, vbDirectory)) = 0 Then
        
            result = MsgBox(path & vbCrLf & prompt, vbYesNoCancel, title:="Document Path")
            Select Case result
            Case vbYes
                MkDir path
                If Len(Dir(path, vbDirectory)) = 0 Then
                msg = "Unable to create path" _
                    & vbCrLf & path _
                    & vbCrLf & "Use the next dialogue box to navigate to the Document path."
                    MsgBox msg, title:="Document Path"
                    path = getPath
                    If path = "False" Then
                        IsPath = False
                        Exit Do
                    End If
                End If
            Case vbNo
                path = getPath
                If path = "False" Then
                    IsPath = False
                    Exit Do
                End If
            Case vbCancel
                IsPath = False
                Exit Do
            End Select
        Else
            ' set document path
            Call Me.defaultValue.SetDocumentPath(path, docType)
            IsPath = True
            Exit Do
        End If
    Loop
exitHandler:
    Exit Function
errHandler:
    Select Case Err.number
    Case Else
'        MsgBox "cDocument::IsPath: " & Err.Number & ": " & Err.Description & " " & Me.masterPath
        Resume Next ' D:\User\Common\Docmap\ causes an error if D: does not exist
    End Select
    GoTo exitHandler
End Function

Private Function getPath() As String
On Error GoTo errHandler
    Dim sFileName As String
'    Dim file As cFile
'    Set file = New cFile

    sFileName = Application.GetSaveAsFilename(InitialFileName:=" ", fileFilter:=" (*. ), *.", title:=title)
    If sFileName <> "False" Then
        sFileName = Me.file.FilePath(sFileName)
    End If
    getPath = sFileName
    
exitHandler:
'    Set file = Nothing
    Exit Function
    
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "cDocument::getPath() " & Err.number & ": " & Err.Description & " " & sFileName
    End Select
    getPath = "False"
    GoTo exitHandler
End Function

' called by Workbook_Open and Macro_Save
' to check the defined names and document version
'
Public Function Validate() As String
On Error GoTo errHandler
    Dim msg As String
    
    If Me.version.OutOfDate Then
        If Not Me.template Is Nothing Then
            msg = Me.version.DocumentAlert
        ElseIf Me.button.visible Then
            msg = Me.version.MasterAlert
        Else
            msg = Me.version.DocumentAlert
        End If
    End If
    Validate = msg
    
exitHandler:
    Exit Function
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "cDocument::Validate() " & Err.number & ": " & Err.Description
    End Select
    GoTo exitHandler
End Function

' Return true if the default values should be updated
'
Public Function isUpdate() As Boolean

    isUpdate = False
    If Not Me.template Is Nothing Then
        If Me.template.isUpdate Then
            isUpdate = True
        End If
    Else
        If Me.button.visible Then
            isUpdate = True
        End If
    End If
End Function

Public Function OpenDocument()

On Error GoTo errHandler
    Dim msg As String

    If Me.isUpdate Then
        If Not Me.template Is Nothing Then
            If Not Me.template.isContainer Then
            ' display message
                msg = Me.Validate
                If Len(msg) > 0 Then
                    MsgBox msg
                    Exit Function
                End If
            End If
        End If
        Me.defaultValue.UpdateOptional
        If Not Me.template Is Nothing Then
            Me.template.OpenDocument
        End If
    Else
        ' display message
        msg = Me.Validate
        If Len(msg) > 0 Then
            MsgBox msg
        End If
    End If
    
exitHandler:
    Exit Function
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "cDocument::OpenDocument() " & Err.number & ": " & Err.Description
    End Select
    GoTo exitHandler
End Function

Public Function CancelSave()
On Error GoTo errHandler
    
    If Not Me.template Is Nothing Then
        Me.template.CancelSave
    Else
        Me.button.visible = True
    End If
    
exitHandler:
    Exit Function
errHandler:
    MsgBox "cDocument::CancelSave() " & Err.number & ": " & Err.Description
    GoTo exitHandler
End Function

Public Function BeforeSave()
On Error GoTo errHandler
    Dim result As String
    
    If Not Me.template Is Nothing Then
        Me.template.BeforeSave
    Else
        Me.button.visible = False
    End If
    
exitHandler:
    Exit Function
errHandler:
    MsgBox "cDocument::BeforeSave() " & Err.number & ": " & Err.Description
    GoTo exitHandler
End Function

' This method saves a form and removes the Save button
' Called by Macro_Save, Macro_Save_Template, Macro_Save_Master
Public Function Save() As Boolean
On Error GoTo errHandler
'
    Dim msg As String
    
    Save = False
    Me.BeforeSave
    If Not Me.file.SaveAs Then
        GoTo errHandler
    End If

    msg = "The form has been saved to:" & vbCrLf & Me.file.fileName
    MsgBox msg
        
    Save = True
exitHandler:
    Exit Function
errHandler:
    ' Show Save button
    Me.CancelSave
    Save = False
    GoTo exitHandler
End Function

' This method saves a template as a document
' Called by Macro_Save_Form
Public Function SaveAs() As Boolean
On Error GoTo errHandler
    Dim result As String
    Dim msg As String

    SaveAs = False
    result = Me.GetSaveAsFilename()

    If Not result = "False" Then
        Me.template.BeforeSaveForm
        If Not Me.file.SaveAs Then
            GoTo errHandler
        End If
        msg = "The form has been saved to:" & vbCrLf & Me.file.fileName
        MsgBox msg
        SaveAs = True
    End If
    
exitHandler:
    Exit Function
errHandler:
    Me.template.CancelSaveForm
    SaveAs = False
    GoTo exitHandler
End Function


Public Function GetSaveAsFilename() As String
    Dim fileName As String
    
    fileName = Application.GetSaveAsFilename(file.fileName, file.fileFilter)
    If Not fileName = "False" Then
        file.fileName = fileName
    End If
    GetSaveAsFilename = fileName
End Function

' Return true if docType (ie. Template) is in documentType
'
Public Function IsType(docType As String) As Boolean
    IsType = InStr(UCase(defaultValue.documentType), UCase(docType))
End Function

Public Function Required()
    Dim value As String
    
    Required = True
    ' Document date
    If Me.IsRange(DOCUMENT_DATE, False) Then
        value = Range(DOCUMENT_DATE)
        If Len(value) > 0 Then
            Required = True
        Else
            MsgBox "Please enter a Date"
            Required = False
        End If
    End If
    
    ' Alternate engine number
    If Me.IsRange(DOCUMENT_AE_NUMBER, False) Then
        value = Range(DOCUMENT_AE_NUMBER)
        If Len(value) > 0 Then
            Required = True
        Else
            MsgBox "Please select an Alternate Engine (AE#)"
            Required = False
        End If
    End If

    ' Unit number
    If Me.IsRange(DOCUMENT_UNIT_NUMBER, False) Then
        value = Range(DOCUMENT_UNIT_NUMBER)
        If Len(value) > 0 Then
            Required = True
        Else
            MsgBox "Please select a Unit No:"
            Required = False
        End If
    End If

    ' Main engine location
    If IsRange(DOCUMENT_ME_LOCATION, False) Then
        value = Range(DOCUMENT_ME_LOCATION)
        If Len(value) > 0 Then
            Required = True
        Else
            MsgBox "Please select a Main Engine Location"
            Required = False
        End If
    End If
    
End Function

' Return the document title
Public Function buildTitle() As String
On Error GoTo errHandler

    Dim title As String
    
    ' Main Engine Location
    If IsRange(DOCUMENT_ME_LOCATION, False) Then
        Me.documentMElocation = Range(DOCUMENT_ME_LOCATION).value
    End If
    ' Title suffix
    If IsRange(DOCUMENT_SUFFIX, False) Then
        Me.documentSuffix = Range(DOCUMENT_SUFFIX).value
    End If
    ' Date
    If IsRange(DOCUMENT_DATE, False) Then
        If Len(Range(DOCUMENT_DATE).value) > 0 Then
            Me.documentDate = Range(DOCUMENT_DATE).value
        Else
            Me.documentDate = Date
        End If
    End If
    ' Extended document name YYYYMMDD_VESSEL_TITLE[_SUFFIX]
    If IsType(TYPE_YYYY) Then
        Me.documentTitle = Me.defaultValue.extendedName _
            (Me.documentDate, Me.documentTitle, Me.documentSuffix, Me.documentMElocation)
    End If
    buildTitle = Me.documentTitle
    
exitHandler:
    Exit Function
errHandler:
    MsgBox "cDocument::buildTitle() " & Err.number & ": " & Err.Description
    GoTo exitHandler
End Function

Attribute VB_Name = "cFile"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Class to manage files
'
Option Explicit

Private pCancel As Boolean
Private pFileName As String
Private pFileFilter As String
Private pFileFormat As XlFileFormat

''''''''''''''''''''''
' cancel property
''''''''''''''''''''''
Public Property Get Cancel() As Boolean
    Cancel = pCancel
End Property

Public Property Let Cancel(value As Boolean)
    pCancel = value
End Property

''''''''''''''''''''''
' fileName property
''''''''''''''''''''''
Public Property Get fileName() As String
    fileName = pFileName
End Property

Public Property Let fileName(value As String)
    pFileName = value
End Property

''''''''''''''''''''''
' fileFormat property
''''''''''''''''''''''
Public Property Get fileFormat() As XlFileFormat
    fileFormat = pFileFormat
End Property

Public Property Let fileFormat(value As XlFileFormat)
    pFileFormat = value
End Property

''''''''''''''''''''''
' fileFilter property
''''''''''''''''''''''
Public Property Get fileFilter() As String
    fileFilter = pFileFilter
End Property

Public Property Let fileFilter(value As String)
    pFileFilter = value
End Property

' method to save as a file
'
Public Function SaveAs() As Boolean
On Error GoTo errHandler
'
    ThisWorkbook.SaveAs fileName:=Me.fileName, fileFormat:=Me.fileFormat
    If Me.Cancel = False Then
        SaveAs = True
    End If
    
exitHandler:
    Exit Function
errHandler:
    Select Case Err.number
    Case 1004   ' user cancels SaveAs "replace existing file" message
    Case Else
        MsgBox "cFile::SaveAs: " & Err.number & ": " & Err.Description & " " & Me.fileName
    End Select
    SaveAs = False
    GoTo exitHandler
End Function

' method to open an excel workbook
'
Public Function OpenFile() As Boolean
On Error GoTo errHandler

    Workbooks.Open fileName:=Me.fileName
    OpenFile = True
    
exitHandler:
    Exit Function
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "cFile::OpenFile: " & Err.number & ": " & Err.Description & " " & Me.fileName
    End Select
    OpenFile = False
    GoTo exitHandler
End Function

' return true if the file exists
Public Function Exists() As Boolean

    If Dir(Me.fileName) <> "" Then
        Exists = True
    Else
    ' returns "" (empty string) if the file doesn't exist.
        Exists = False
    End If

End Function

'the following function will get the path only
' (i.e. the folder) from the file's full path
Public Function FilePath(strPath As String) As String
    FilePath = Left$(strPath, InStrRev(strPath, "\"))
End Function

'the following function will get the name only
' from the file's full path
Private Function name(strPath As String) As String
    name = Right$(strPath, Len(strPath) - InStrRev(strPath, "\"))
End Function

'the following function will get the extension only
' from the file's full path
Private Function extension(strPath As String) As String
    extension = Right$(strPath, Len(strPath) - InStrRev(strPath, "."))
End Function

Attribute VB_Name = "cTemplate"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Class to manage templates
'
Option Explicit

Private pPath As String
Private pFileFilter As String
Private pFileFormat As XlFileFormat
Private pButtonSaveAs As cButton
Private pButtonEdit As cButton
Private pButtonSave As cButton

Const SAVE_BUTTON = "SAVE FORM"
Const SAVE_TEMPLATE_BUTTON = "SAVE AS TEMPLATE"
Const EDIT_TEMPLATE_BUTTON = "EDIT TEMPLATE"

''''''''''''''''''''''
' path property
''''''''''''''''''''''
Public Property Get path() As String
    path = pPath
End Property

Public Property Let path(value As String)
    pPath = value
End Property

''''''''''''''''''''''
' buttonEdit property
''''''''''''''''''''''
Public Property Get buttonEdit() As cButton
    Set buttonEdit = pButtonEdit
End Property

Public Property Set buttonEdit(value As cButton)
    Set pButtonEdit = value
End Property

''''''''''''''''''''''
' buttonSave property
''''''''''''''''''''''
Public Property Get buttonSave() As cButton
    Set buttonSave = pButtonSave
End Property

Public Property Set buttonSave(value As cButton)
    Set pButtonSave = value
End Property

''''''''''''''''''''''
' buttonSaveAs property
''''''''''''''''''''''
Public Property Get buttonSaveAs() As cButton
    Set buttonSaveAs = pButtonSaveAs
End Property

Public Property Set buttonSaveAs(value As cButton)
    Set pButtonSaveAs = value
End Property

''''''''''''''''''''''
' fileFormat property
''''''''''''''''''''''
Public Property Get fileFormat() As XlFileFormat
    fileFormat = pFileFormat
End Property

Public Property Let fileFormat(value As XlFileFormat)
    pFileFormat = value
End Property

''''''''''''''''''''''
' fileFilter property
''''''''''''''''''''''
Public Property Get fileFilter() As String
    fileFilter = pFileFilter
End Property

Public Property Let fileFilter(value As String)
    pFileFilter = value
End Property

' Initialize the variables for the class
'
Private Sub Class_Initialize()
On Error GoTo errHandler
   
    Me.fileFilter = "Template (*.xlt), *.xlt"
    Me.fileFormat = xlTemplate

    Set Me.buttonSave = New cButton
    Me.buttonSave.alternativeText = SAVE_BUTTON
    Set Me.buttonSaveAs = New cButton
    Me.buttonSaveAs.alternativeText = SAVE_TEMPLATE_BUTTON
    Set Me.buttonEdit = New cButton
    Me.buttonEdit.alternativeText = EDIT_TEMPLATE_BUTTON
exitHandler:
    Exit Sub
errHandler:
    MsgBox "cTemplate::Class_Initialize() " & Err.number & ": " & Err.Description
    GoTo exitHandler

End Sub

Public Function OpenDocument()

On Error GoTo errHandler

    If Me.buttonSaveAs.visible And Me.buttonEdit.visible Then
        Me.buttonEdit.visible = False
        Me.buttonSave.visible = False
    End If
    
exitHandler:
    Exit Function
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "cTemplate::OpenDocument() " & Err.number & ": " & Err.Description
    End Select
    GoTo exitHandler
End Function

Public Sub HideButtons()
    Me.buttonSave.visible = False
    Me.buttonSaveAs.visible = False
    Me.buttonEdit.visible = False
End Sub

Public Sub ShowButtons()
    Me.buttonSave.visible = True
    Me.buttonSaveAs.visible = True
    Me.buttonEdit.visible = True
End Sub

Public Sub ToggleButtonSaveAs(visible As Boolean)
    Me.buttonSaveAs.visible = visible
End Sub

Public Sub ToggleButtonEdit(visible As Boolean)
    Me.buttonEdit.visible = visible
End Sub

' Return true if a saved template exists
'
Public Function Exists() As Boolean
On Error GoTo errHandler

    Dim file As cFile
    Set file = New cFile

    file.fileName = document.masterPath & document.defaultValue.title & ".*"
    If file.Exists Then
        Exists = True
    Else
        Exists = False
    End If
    
exitHandler:
    Set file = Nothing
    Exit Function
errHandler:
    If Err.number <> 0 Then
        MsgBox "cTemplate::Exists() " & Err.number & ": " & Err.Description
    End If
    Exists = False
    GoTo exitHandler
End Function

' Open an excel workbook
Public Function OpenFile(path As String) As Boolean
On Error GoTo errHandler
    
    Dim file As cFile
    Set file = New cFile
   
    file.fileName = path
    If Not file.OpenFile Then
        GoTo errHandler
    End If
    OpenFile = True
    
exitHandler:
    Set file = Nothing
    Exit Function
errHandler:
    If Err.number <> 0 Then
        MsgBox "cTemplate::OpenFile: " & Err.number & ": " & Err.Description
    End If
    OpenFile = False
    GoTo exitHandler
End Function

' Toggle button visibility
'
Public Sub ToggleButtons()
    If Me.buttonSave.visible Then
        Me.buttonSave.visible = False
    Else
        Me.buttonSave.visible = True
    End If
    If Me.buttonSaveAs.visible Then
        Me.buttonSaveAs.visible = False
    Else
        Me.buttonSaveAs.visible = True
    End If
    If Me.buttonEdit.visible Then
        Me.buttonEdit.visible = False
    Else
        Me.buttonEdit.visible = True
    End If
End Sub

Public Function BeforeSaveForm()
    HideButtons
End Function

Public Function CancelSaveForm()
    Me.buttonSave.visible = True
    Me.buttonEdit.visible = True
End Function

Public Function BeforeSave()
    ToggleButtons
    lockCells (True)
End Function

Public Function CancelSave()
    ToggleButtons
End Function

Public Function BeforeEdit()
    ToggleButtons
    lockCells (False)
End Function

Private Sub lockCells(locked As Boolean)
    
    Dim current As Range
    
    Set current = Selection
    On Error Resume Next
    Range("Tkm_Template").Select
    If Err.number = 0 Then
        document.defaultValue.protect (False)
        Selection.locked = locked
        current.Select
        document.defaultValue.protect (True)
    End If
    
End Sub

' If either button is visible, Update the default values
'
Public Function isUpdate() As Boolean

    isUpdate = False
    If Me.buttonSaveAs.visible Or Me.buttonEdit.visible Then
        isUpdate = True
    End If
End Function

Public Function isContainer() As Boolean
    If Me.buttonSaveAs.visible Then
        isContainer = True
    Else
        isContainer = False
    End If
End Function
Attribute VB_Name = "cVersion"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Class to manage document version control
'
Option Explicit

Private pNumber As String
Private pControl As String

''''''''''''''''''''''
' document version number property
''''''''''''''''''''''
Public Property Get number() As String
    number = pNumber
End Property

Public Property Let number(value As String)
    pNumber = value
End Property

''''''''''''''''''''''
' source control version property
''''''''''''''''''''''
Public Property Get control() As String
    control = pControl
End Property

Public Property Let control(value As String)
    pControl = value
End Property

Private Sub Class_Initialize()
' Initialize the variables for the class
'
On Error GoTo errHandler

exitHandler:
    Exit Sub
errHandler:
    MsgBox "cVersion::Class_Initialize() " & Err.number & ": " & Err.Description
    GoTo exitHandler

End Sub

' Check the current document version
Public Function OutOfDate() As String
    OutOfDate = Me.control() <> Me.number()
End Function

Public Function DocumentAlert()
    DocumentAlert = "This document version " & Me.number & " is out of date." _
            & " Please obtain latest version " & Me.control & " from Docmap."
End Function

Public Function MasterAlert()
    MasterAlert = "The local default value form is out of date." _
            & vbCrLf & "Before continuing, it is recommended to:" _
            & vbCrLf & "1. Exit this document" _
            & vbCrLf & "2. Open and save '" & document.masterTitle & "'"
End Function


Attribute VB_Name = "mcrCopyCode"
Option Explicit
' Copy the code modules to the documents
'
Function Macro_CopyCode()

    Dim szFolderName As String
    Dim copy As cCopyWorkbook
    
    Set copy = New cCopyWorkbook
    szFolderName = "\Forms"

    copy.cCopyWorkbook (szFolderName)
    Set copy = Nothing
End Function

Attribute VB_Name = "mcrEdit"
Option Explicit

' Edit a template
' Assigned to 'Edit Template' button
'
Public Function Macro_Edit_Template()
On Error GoTo errHandler

    Set document = New cDocument
    
    document.template.BeforeEdit
    
exitHandler:
    Set document = Nothing
    Exit Function
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "mcrEdit::Macro_Edit_Template() " & Err.number & " " & Err.Description
    End Select
    GoTo exitHandler
End Function

Attribute VB_Name = "mcrLink"
Option Explicit

Public Function Macro_Link()
On Error GoTo errHandler
    
    Dim defaultValue As cDefaultValue
    Set defaultValue = New cDefaultValue
    
    defaultValue.AddLink
    
exitHandler:
    Set defaultValue = Nothing
    Exit Function
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "Macro_Link: " & Err.number & ": " & Err.Description
    End Select
    GoTo exitHandler
End Function
Attribute VB_Name = "mcrSave"
Option Explicit

' Save document
' Assigned to 'Save' button
'
Public Function Macro_Save()
On Error GoTo errHandler
    
    Dim msg As String
    Dim result As VbMsgBoxResult
    Set document = New cDocument

    msg = document.Validate
    If Len(msg) > 0 Then
        msg = msg & vbCrLf _
            & vbCrLf & "Yes - Continue saving this document?" _
            & vbCrLf & "No - Exit without saving?" _
            & vbCrLf & "Cancel - Continue editing?"
        result = MsgBox(msg, vbYesNoCancel)
        Select Case result
        Case vbNo
            GoTo exitHandler
        Case vbCancel
            Set document = Nothing
            Exit Function
        End Select
    End If
    
    If document.Required() Then

        If Not document.Save Then
            document.CancelSave
            Set document = Nothing
            Exit Function
        End If
    
    Else
        Exit Function
    End If
    
exitHandler:
    Set document = Nothing
    ActiveWorkbook.Saved = True
    Dim container As cContainer
    Set container = New cContainer
    
    If container.container Is Nothing Then
        ThisWorkbook.Application.quit
    Else
        container.quit
        ThisWorkbook.Application.quit
    End If
    Exit Function
errHandler:
    Select Case Err.number
    Case 1004   ' user cancels SaveAs "replace existing file" message
    Exit Function
    Case Else
        MsgBox "mcrSave::Macro_Save() " & Err.number & " " & Err.Description
    End Select
    GoTo exitHandler
End Function

' Save master document
' Assigned to 'Save' button on CGO000
'
Public Function Macro_Save_Master()
On Error GoTo errHandler
    
    Set document = New cDocument
    
    If Not document.IsPaths() Then
        Exit Function
    Else
        document.file.fileName = document.masterPath & document.masterName
        If Not document.Save Then
            Exit Function
        End If
    End If
    
exitHandler:
    Set document = Nothing
    ActiveWorkbook.Saved = True
    Dim container As cContainer
    Set container = New cContainer
    
    If container.container Is Nothing Then
        ThisWorkbook.Application.quit
    Else
        container.quit
        ThisWorkbook.Application.quit
    End If
    Exit Function
errHandler:
    Select Case Err.number
    Case 1004   ' user cancels SaveAs "replace existing file" message
    Exit Function
    Case Else
        MsgBox "mcrSave::Macro_Save_Master() " & Err.number & " " & Err.Description
    End Select
    GoTo exitHandler
End Function

' Save document as template
' Assigned to 'Save As Template' button
'
Public Function Macro_Save_Template()
On Error GoTo errHandler
    
    Dim msg As String
    Dim result As VbMsgBoxResult
    Set document = New cDocument

    msg = document.Validate
    If Len(msg) > 0 Then
        msg = msg & vbCrLf _
            & vbCrLf & "Yes - Continue saving this document?" _
            & vbCrLf & "No - Exit without saving?" _
            & vbCrLf & "Cancel - Continue editing?"
        result = MsgBox(msg, vbYesNoCancel)
        Select Case result
        Case vbNo
            GoTo exitHandler
        Case vbCancel
            Set document = Nothing
            Exit Function
        End Select
    End If

    document.file.fileFormat = document.template.fileFormat
    document.file.fileFilter = document.template.fileFilter
'    document.documentPath = document.template.path

    document.file.fileName = document.documentPath & document.defaultValue.title
    If Not document.Save Then
        Exit Function
    End If
    
exitHandler:
'    Set document = Nothing
    ActiveWorkbook.Saved = True
    Dim container As cContainer
    Set container = New cContainer
    
    If container.container Is Nothing Then
        If document.template Is Nothing Then
            Set document = Nothing
            ThisWorkbook.Application.quit
        Else
'            document.template.ToggleButtons
            Set document = Nothing
        End If
    Else
        Set document = Nothing
        container.quit
        ThisWorkbook.Application.quit
    End If
    Exit Function
errHandler:
    Select Case Err.number
    Case 1004   ' user cancels SaveAs "replace existing file" message
    Exit Function
    Case Else
        MsgBox "mcrSave::Macro_Save_Template() " & Err.number & " " & Err.Description
    End Select
    GoTo exitHandler
End Function

' Save template as document
' Assigned to 'Save Form' button on forms with a "template"
'
Public Function Macro_Save_Form()
On Error GoTo errHandler
    
    Set document = New cDocument

    document.file.fileName = document.defaultValue.path & document.buildTitle()
    If document.Required() Then
        If Not document.SaveAs Then
            Exit Function
        End If
    End If
    
exitHandler:
    Set document = Nothing

    Exit Function
errHandler:
    Select Case Err.number
    Case 1004   ' user cancels SaveAs "replace existing file" message
    Exit Function
    Case Else
        MsgBox "mcrSave::Macro_Save_Form() " & Err.number & " " & Err.Description
    End Select
    GoTo exitHandler
End Function

Attribute VB_Name = "modCalendar"
Sub calendar()
    Date_Calendar.Show
End Sub


Attribute VB_Name = "modOpenDocument"
Option Explicit
Public document As cDocument

' This module wraps around cDocument
'
Public Function OpenDocument()
On Error GoTo errHandler
    Set document = New cDocument

    document.OpenDocument
    ActiveWorkbook.Saved = True
exitHandler:
    Set document = Nothing
    Exit Function
errHandler:
    Select Case Err.number
    Case Else
        MsgBox "modOpenDocument::OpenDocument() " & Err.number & ": " & Err.Description
    End Select
    GoTo exitHandler
End Function

' InQuest injected base64 decoded content
' zq/z{O

INQUEST-PP=macro
