Attribute VB_Name = "Checklists"
Option Explicit
'--------------------------------------------------------------------------------------------------
' Module Name: Common
' Copyright (c) 2003, Rhonda Ltd
' Module Description:
' This module is designed to add checklists to inspector form
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' A00.01.00     01/27/2003  Yuri Vashchenko     Initial Creation
'--------------------------------------------------------------------------------------------------
' Definitions of global variables
Private Const CHECKLIST_TYPE_ROW_NUMBER = 4
Private Const CHECKLIST_SUB_TYPE_ROW_NUMBER = 5
Private Const CHECKLIST_TYPE_COLUMN_NUMBER = 3
Private Const CHECKLIST_SUB_TYPE_COLUMN_NUMBER = 3
'--------------------------------------------------------------------------------------------------
' Sub AddChecklists
' This sub adds checklists to inspector form
'--------------------------------------------------------------------------------------------------
Sub AddChecklists()
    Dim InspectorForm As Workbook
    Dim ChecklistsVobPath As String
    Dim ChecklistsFileName As String
    Dim ChecklistsWorkbook As Workbook
    Dim ProductType As String
    Dim ProductSubType As String
    Dim ChecklistProductType As String
    Dim ChecklistProductSubType As String
    Dim Checklist As Worksheet
    
    Set InspectorForm = FindWorkbook(FIND_INSPECTOR_FORM)
    
    If InspectorForm Is Nothing Then
        Exit Sub
    End If
    
    On Error GoTo SomethingWrong
    
    CheckField InspectorForm, "Type", "Product Type is Empty"
    
    ' Getting vob location of the checklists from document property
    ChecklistsVobPath = InspectorForm.CustomDocumentProperties("ChecklistsFileVobPath").Value
    
    ' Getting checklists file from the vob
    ChecklistsFileName = GetDocument(ChecklistsVobPath)
    
    Application.DisplayAlerts = False
    
    ' Opening checklists file
    Set ChecklistsWorkbook = Application.Workbooks.Open(ChecklistsFileName, , True)
    
    ' Initilizing variables
    ProductType = GetField(InspectorForm, "Type")
    ProductSubType = GetField(InspectorForm, "SubType")
    
    For Each Checklist In ChecklistsWorkbook.Worksheets
        ChecklistProductType = Checklist.Cells(CHECKLIST_TYPE_ROW_NUMBER, CHECKLIST_TYPE_COLUMN_NUMBER).Value
        ChecklistProductSubType = Checklist.Cells(CHECKLIST_SUB_TYPE_ROW_NUMBER, CHECKLIST_SUB_TYPE_COLUMN_NUMBER).Value
        If InStr(ChecklistProductType, ProductType) > 0 And InStr(ChecklistProductSubType, ProductSubType) > 0 Then
            Checklist.Copy After:=InspectorForm.Worksheets(InspectorForm.Worksheets.Count)
        End If
    Next Checklist
    
    ' Closing checklists file with no save chenges
    ChecklistsWorkbook.Close False
    Application.DisplayAlerts = False
SomethingWrong:
    Err.Clear
End Sub
Attribute VB_Name = "ClearCaseModule"
Option Explicit
'--------------------------------------------------------------------------------------------------
' Module Name: ClearCaseModule
' Copyright (c) 2001-2003, Rhonda Ltd
' Module Description:
' This module is designed to access data located in ClearCase vobs
' Import and Get functions are implemented
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' D00.00.22     02/14/2002  Yuri Vashchenko     Release before first inspection
' D00.00.24     03/04/2002  Yuri Vashchenko     Updated after formal Inspection (MOTrh02802)
' D00.00.25     05/31/2002  Yuri Vashchenko     Fixed bug when working with files (EOF)
' A00.01.00     01/24/2003  Yuri Vashchenko     Updated to support changed SelectFromListForm
'--------------------------------------------------------------------------------------------------
' Global Constants
Const ccmcFail = 0
Const ccmcSuccess = 1
Private Const MAX_WORKSPACES = 30

Const DEFAULT_WORKSPACE_KEY_NAME = _
         "HKEY_CURRENT_USER\Software\Rhonda\Tools\ClearCaseURL\defaultWorkspace"
Const ATTACHE_KEY = "HKEY_CURRENT_USER\Software\Atria\Attache\"

Const ATTACHE_STATE_SET_WS = 1
Const ATTACHE_STATE_READY = 2
Const ATTACHE_STATE_RESULT = 3

Type ClearCaseItemInfo
  Name As String
  version As String
  fullName As String
End Type

' Global Variables
' This variable used to store result of last operation
Public LastErrorCode As Long

' These arrays used to store available workspaces names and local pathes
'Dim WorkspaceName(MAX_WORKSPACES) As String
'Dim workspacePath(MAX_WORKSPACES) As String

' These varibales used to store selected workspace name and local path for it
Dim CurrentWorkspaceName As String
Dim CurrentWorkspacePath As String
'--------------------------------------------------------------------------------------------------
' CleanString
' This function removes quotation marks as well as
'   leading and trailing spaces.
' Input parameters: s - String to clean
'--------------------------------------------------------------------------------------------------
Function CleanString(s As String) As String
    s = Replace(s, """", "")
    s = Trim(s)
    CleanString = s
End Function
'--------------------------------------------------------------------------------------------------
' WorkspacePathToVobPath
' This function converts local workspace path to corresponding vob path
' This function also sets CurrentWorkspaceName and CurrentWorkspacePath
' varibales to the values which correspond to given Workspace Path
'--------------------------------------------------------------------------------------------------
Function WorkspacePathToVobPath(workspacePath As String) As String
    Dim result As String
    Dim i As Long
    Dim wsShell As Object
    Dim tempPath As String

    Set wsShell = CreateObject("WScript.Shell")
    
    CheckAndInitializeWorkspaces
    
    With SelectFromListForm.ListBox
        ' Checking for errors
        If .ListIndex = -1 Then
            LastErrorCode = ccmcFail
            WorkspacePathToVobPath = ""
            Exit Function ' WorkspacePathToVobPath
        End If
        
        ' Now we have array of workspaces and are ready to process it
        result = CleanString(workspacePath)
        
        For i = 1 To .ListCount
            tempPath = wsShell.RegRead(ATTACHE_KEY & .List(i - 1) & "\Path")
            
            ' Search for the workspace that current path belongs to
            If Left(LCase(result), Len(tempPath)) = tempPath Then
                ' Yes, we have found it!
                
                'Extracting vob path
                result = Right(result, Len(result) - Len(tempPath))
                
                ' Replacing "\" with "/"
                result = Replace(result, "\", "/")
            
                ' Taking into "" and returning the result
                WorkspacePathToVobPath = """" & result & """"
                
                LastErrorCode = ccmcSuccess
                Exit Function ' WorkspacePathToVobPath
            End If
        Next i
    End With
    
    ' We cannot find the workspace for this path :-( May be it is not really workspace path at all
    LastErrorCode = ccmcFail
    WorkspacePathToVobPath = workspacePath
End Function ' WorkspacePathToVobPath
'--------------------------------------------------------------------------------------------------
' GetDocument
' This function gets the document from the vob
' Input parameters:
'   Path = vob path
' Function returns local workspace path of got file
'--------------------------------------------------------------------------------------------------
Function GetDocument(path As String) As String
    Dim itemInfo As ClearCaseItemInfo
    itemInfo = GetItemInfo(path)
    GetDocument = GetItem(itemInfo)
End Function ' GetDocument
'--------------------------------------------------------------------------------------------------
' Import2VOB
' This sub imports the document into the vob
' Input parameters:
'   sWorkspacePath = workspace path for the file to import
'--------------------------------------------------------------------------------------------------
Function Import2VOB(workspacePath As String, WarningsOff As Boolean) As Boolean
    Dim vobPath As String
    Dim cmdLine As String
    
    Dim WShell As Object
    
    ' Getting corresponding vob path for the workspace path
    vobPath = WorkspacePathToVobPath(workspacePath)
    
    ' Checking for errors
    If LastErrorCode = ccmcFail Then
        Import2VOB = False
        If WarningsOff Then Exit Function
        If vobPath = "" Then
            MsgBox "Cannot get the list of workspaces"
        Else
            MsgBox "Cannot convert workspace path to vob path." + Chr(13) + " Probably source file:" + vobPath + " is not at workspace"
        End If
    Else
        Import2VOB = True
        ' Importing file using Attcmd command-line utility
        Set WShell = CreateObject("WScript.Shell")
        
        cmdLine = "cmd /c Attcmd -ws " + CurrentWorkspaceName + " import -ci " + vobPath
        WShell.Run cmdLine, 1, True
    End If
End Function ' Import2VOB

Sub GetAndOpen(items As String)
    Dim item As String
    Dim pos As Long
    
    items = Trim(items)
    
    items = Replace(items, vbCrLf, " ")
    items = Replace(items, vbCr, " ")
    items = Replace(items, vbLf, " ")
    
    Do While Len(items) > 0
        item = ""
        If Left(items, 1) = """" Then
            pos = InStr(2, items, """")
            If pos = 0 Then
                items = Mid(items, 2)
            Else
                item = CleanString(Mid(items, 1, pos))
                items = Mid(items, pos + 1)
            End If
        Else
            pos = InStr(items, " ")
            If pos > 0 Then
                item = CleanString(Left(items, pos))
                items = Mid(items, pos + 1)
            Else
                item = CleanString(items)
                items = ""
            End If
        End If
        items = Trim(items)
        
        OpenFromVob item
    Loop
End Sub
Sub OpenFromVob(vobPath As String)
    Dim wsShell As Object
    Dim itemInfo As ClearCaseItemInfo
    Dim wsPath As String

    Set wsShell = CreateObject("WScript.Shell")
    
    If InStr(vobPath, "/vob") = 0 Then
        wsShell.Exec vobPath
        Exit Sub
    End If
    
    itemInfo = GetItemInfo(vobPath)
    wsPath = GetItem(itemInfo)
    If wsPath <> "" Then
        wsShell.Run """" & wsPath & """"
    End If
End Sub
' ************************************************************
' ************************************************************

Function GetItemInfo(fullName As String) As ClearCaseItemInfo
    Dim result As ClearCaseItemInfo
    Dim atatPos As Long
    
    ' XX. Get item name
    atatPos = InStr(fullName, "@@")
    If atatPos > 0 Then
        result.Name = Left(fullName, atatPos - 1)
        result.version = Mid(fullName, atatPos + 2)
    Else
        result.Name = fullName
        result.version = ""
    End If
    
    If result.version <> "" Then
        result.fullName = fullName
    Else
        ' remove last "@@", if exists
        result.fullName = result.Name
    End If
    
    GetItemInfo = result
End Function

Private Sub CheckAndInitializeWorkspaces()
    Dim wsShell As Object
    
    Set wsShell = CreateObject("WScript.Shell")
    
    If CurrentWorkspaceName = "" Then
        InitializeWorkspaces
        If CurrentWorkspaceName = "" Then
            Err.Raise 1, , "Cannot select workspace"
        Else
            wsShell.RegWrite DEFAULT_WORKSPACE_KEY_NAME, CurrentWorkspaceName
        End If
    End If
End Sub

' ************************************************************
' ************************************************************
Private Sub InitializeWorkspaces()
    Dim i As Long
    Dim str As String
    Dim defaultWorkspace As String
    Dim currentIndex As Long
    Dim wsShell As Object

    On Error Resume Next

    Set wsShell = CreateObject("WScript.Shell")
    
    CurrentWorkspaceName = ""
    CurrentWorkspacePath = ""
    
    defaultWorkspace = wsShell.RegRead(DEFAULT_WORKSPACE_KEY_NAME)
    Err.Clear
    
    ' *******************************************************
    ' XX. Read workspaces from registry and select default
    
    
    currentIndex = 0
    
    Load SelectFromListForm
    
    With SelectFromListForm.ListBox
        .Clear
        
        For i = 1 To MAX_WORKSPACES
            str = wsShell.RegRead(ATTACHE_KEY & "Workspaces\Dir" & i)
        
            If Err <> 0 Then
                Err.Clear
            Else
                .AddItem str
                If str = defaultWorkspace Then
                    .ListIndex = currentIndex
                End If
            End If
          
          currentIndex = currentIndex + 1
        Next

        If .ListCount > 0 Then
            If .ListIndex < 0 Then
                .ListIndex = 0
            End If
        
            If .ListCount > 1 Then
                SelectFromListForm.Show
            End If
        
            If .ListIndex <> -1 Then
                CurrentWorkspaceName = .List(.ListIndex)
                CurrentWorkspacePath = wsShell.RegRead(ATTACHE_KEY & CurrentWorkspaceName & "\Path")
            End If
        End If
    End With
    Err.Clear
End Sub

' ************************************************************
' ************************************************************
Function GetItem(itemInfo As ClearCaseItemInfo) As String
    Dim pathToElement As String
    Dim isDir As Boolean
    
    Dim wsShell As Object
    
    Set wsShell = CreateObject("WScript.Shell")
    
    ' XX. Get specified item class - is it Directory or not???
    isDir = IsVobDirectory(itemInfo.fullName)
    
    If Err <> 0 Then
        MsgBox Err.Description, vbCritical
        Exit Function
    End If
    
    ' XX. Get the specified item itself
    If isDir Then
        GetVobDirectory itemInfo
    Else
        GetVobFile itemInfo
    End If
    
    If Err <> 0 Then
        MsgBox Err.Description, vbCritical
        Exit Function
    End If
    
    ' XX. Open specified item
    pathToElement = Replace(CurrentWorkspacePath & itemInfo.Name, "/", "\")
    
    If isDir Then
        If itemInfo.version <> "" Then
            pathToElement = pathToElement & "@@"
        End If
    End If
    
    GetItem = CleanString(pathToElement)

End Function

' ********************************************************************
' ********************************************************************
Sub GetVobDirectory(itemInf As ClearCaseItemInfo)
    Dim myCommand As String
    
    CheckAndInitializeWorkspaces
    
    myCommand = "cmd /C attcmd -ws " & CurrentWorkspaceName & " get -ptime -overwrite -recurse """ & _
                               itemInf.fullName & """"

    InternalGetItem myCommand
End Sub

Sub GetVobFile(itemInf As ClearCaseItemInfo)
    Dim myCommand As String
    
    CheckAndInitializeWorkspaces
    
    myCommand = "cmd /C attcmd -ws " & CurrentWorkspaceName & _
                        " get -ptime -overwrite -recurse -to """ & itemInf.Name & _
                        """ """ & itemInf.fullName & """"

    InternalGetItem myCommand
End Sub

' ********************************************************************
' ********************************************************************
Sub InternalGetItem(attcmdLine As String)
    Dim attacheProcess As Object
    Dim currentState As Long
    Dim attLine As String
    Dim errorDesc As String
    Dim gggetRes As String
    Dim wsShell As Object
    
    currentState = ATTACHE_STATE_SET_WS
    errorDesc = ""
    gggetRes = ""
    
    On Error Resume Next

    Set wsShell = CreateObject("WScript.Shell")
    
    Set attacheProcess = wsShell.Exec(attcmdLine)
    
    While Not attacheProcess.StdOut.AtEndOfStream
        attLine = attacheProcess.StdOut.ReadLine
        
        Select Case currentState
            Case ATTACHE_STATE_SET_WS
                ' read "Setting workspace to `???'..."
                currentState = ATTACHE_STATE_READY
        
            Case ATTACHE_STATE_READY
                ' read "Ready" or empty line (if wrong workspace name)
                currentState = ATTACHE_STATE_RESULT
        
            Case ATTACHE_STATE_RESULT
                If IsAttacheError(attLine) Then
                    errorDesc = errorDesc & GetAttacheErrorDesc(attLine) & vbCrLf
                Else
                    'gggetRes = gggetRes & attLine & vbCrLf
                    'getterResult.innerText = gggetRes
                End If
        End Select
    Wend
    
    If errorDesc <> "" Then
        Err.Raise 1, , errorDesc
        Exit Sub
    End If
End Sub

' ********************************************************************
' ********************************************************************
Function IsVobDirectory(vobPath As String) As Boolean
    Dim result As Boolean
    Dim attacheProcess As Object
    Dim myCommand As String
    Dim currentState As Long
    Dim attLine As String
    Dim errorDesc As String
    Dim wsShell As Object
    
    currentState = ATTACHE_STATE_SET_WS
    errorDesc = ""
    result = False
    
    Set wsShell = CreateObject("WScript.Shell")
    
    CheckAndInitializeWorkspaces
    
    myCommand = "cmd /C attcmd -ws " & CurrentWorkspaceName & " desc -fmt ""%m"" """ & vobPath & """"
    Set attacheProcess = wsShell.Exec(myCommand)
    
    While Not attacheProcess.StdOut.AtEndOfStream
        attLine = attacheProcess.StdOut.ReadLine
        
        Select Case currentState
            Case ATTACHE_STATE_SET_WS
                ' read "Setting workspace to `???'..."
                currentState = ATTACHE_STATE_READY
        
            Case ATTACHE_STATE_READY
                ' read "Ready" or empty line (if wrong workspace name)
                currentState = ATTACHE_STATE_RESULT
        
            Case ATTACHE_STATE_RESULT
                If IsAttacheError(attLine) Then
                    errorDesc = errorDesc & GetAttacheErrorDesc(attLine) & vbCrLf
                End If
        
                If attLine = "directory version" Then
                    result = True
                Else
                    result = False
                End If
        End Select
    Wend
    
    If errorDesc <> "" Then
        Err.Raise 1, , errorDesc
        Exit Function
    End If
    
    IsVobDirectory = result
End Function

' ********************************************************************
' ********************************************************************
Function IsAttacheError(attacheResult As String) As Boolean
    Dim result
    result = False

    If InStr(attacheResult, "attcmd: Error: ") = 1 Then
        result = True
    End If

    IsAttacheError = result
End Function
' ********************************************************************
' ********************************************************************
Function GetAttacheErrorDesc(attacheResult As String) As String
    Dim result As String
    result = ""

    If InStr(attacheResult, "attcmd: Error: ") = 1 Then
        result = Mid(attacheResult, Len("attcmd: Error: ") + 1)
    End If

    GetAttacheErrorDesc = result
End Function
Attribute VB_Name = "Common"
Option Explicit
'--------------------------------------------------------------------------------------------------
' Module Name: Common
' Copyright (c) 2003, Rhonda Ltd
' Module Description:
' This module contains common subs and functions
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' A00.01.00     01/24/2003  Yuri Vashchenko     Initial Creation
' A00.01.05     02/20/2003  Yuri Vashchenko     Rewritten to work as Excel Addin
'--------------------------------------------------------------------------------------------------
' types
Public Type ParticipantInfo
    Name As String
    EmailAlias As String
    InspRole As String
    ProjRole As String
    PrepTime As Double      ' hours
    isRequired As Boolean
    isParticipated As Boolean
End Type

Public Type MeetingsInfo
    meetingsNumber As Integer
    isFormal As Boolean
    InspectionDate As Date
    InspectionTime As Double
    Location As String
End Type

Public Type Issue
    n As Long
    Page As String
    Section As String
    Description As String
    ResolvedStatus As String
    Severity As String
    Author As String
    AuthorHyperlink As String
    State As String
    ResolverComments As String
    VerifierComments As String
End Type

Public Type ColumnNumbers
    NColumnNumber As Long
    PageColumnNumber As Long
    SectionColumnNumber As Long
    descriptionColumnNumber As Long
    ResolvedStatusColumnNumber As Long
    SeverityColumnNumber As Long
    AuthorColumnNumber As Long
    StateColumnNumber As Long
    ResolverCommentsColumnNumber As Long
    VerifierCommentsColumnNumber As Long
End Type

' Definitions of global variables
'--------------------------------------------------------------------------------------------------

' Definitions of global constants
'--------------------------------------------------------------------------------------------------

Public Const FIND_MINUTES = 1
Public Const FIND_INSPECTOR_FORM = 2
Public Const FIND_ANY = 3

' Maximum number of Attendants of inspection
Public Const MAX_ATTENDANTS = 12

Public Const NAMES_COLUMN = 4                          ' Column number with participants names
Public Const ALIASES_COLUMN = 5                        ' Column number with participants email aliases

'Public Const NUMBER_OF_COLUMNS = 21                    ' Total number of columns in Issues worksheet
'Public Const PIF_NUMBER_OF_COLUMNS = 12                 ' (PIF) Total number of columns in Inspector Form worksheet in
'Public Const FIRST_ROW = CAPTIONS_ROW_END + 1          ' First row's number
'Public Const PIF_FIRST_ROW = 13                         ' (PIF) First row's number

Public Const IF_UPDATE_PATH = _
    "http://arthur/sites/process/Process%20Documents/Verification%20and%20Validation/Templates%20and%20References/Inspector_Form_Template.xls"
Public Const N_CAPTION = "N"                               ' Issues number column caption
Public Const CODE_TYPE = "Code"                            ' Type of inspection - "Code"
Public Const SECTION_CAPTION = "Section"                   ' Section column caption
Public Const MODULE_CAPTION = "Module"                     ' Module column caption
Public Const DESCRIPTION_CAPTION = "Description"           ' Descriptions column caption
Public Const HIDDEN_STATUS_CAPTION = "Hidden Status"       ' Hidden Status cloumn caption
Public Const SEVERITY_CAPTION = "Severity"                 ' Severity column caption
Public Const CR_CAPTION = "CR #"                           ' CR # column caption
' Estimated Rework Effort column caption
Public Const RESOLVED_STATUS_CAPTION = "Resolved Status"   ' Resolved Statuses (hidden) column caption
Public Const COMMENTS_CAPTION = "Comments"                 ' Comments column caption
Public Const AUTHOR_CAPTION = "Author"                     ' Author column caption
Public Const STATE_CAPTION = "State"                       ' State caption
Public Const RESOLVER_CAPTION = "Resolved Status"          ' Resolved Statuses (hidden) column caption
' Resolver Comments column caption
Public Const RESOLVER_COMMENTS_CAPTION = "Resolver Comments"
' Verifier Comments column caption
Public Const VERIFIER_COMMENTS_CAPTION = "Verifier Comments"

Public Const PIF_INSPECTOR_FORM_WORKSHEET_NUMBER = 2

Public Const WORK_PRODUCT_TYPE_COLUMN = 11

Public Const CAPTIONS_ROW_START = 3
Public Const CAPTIONS_ROW_END = 4

'Public Const PIF_CAPTIONS_ROW_START = 11
'Public Const PIF_CAPTIONS_ROW_END = 12

Public Const ISSUES_FOUND_CAPTION = "Issues Found"

Public Const VERIFIED_STRING = "Verified"

Public Const ERROR_STRING = "Error"
Public Const ERROR_OPERATIONAL_STRING = "Error Operational"
Public Const ERROR_MINOR_STRING = "Error Minor"
Public Const COMMENT_STRING = "Comment"
Public Const CHANGE_COMMENT_STRING = "Change/Comment"
Public Const INVESTIGATE_STRING = "Investigate"
Public Const CRITICAL_STRING = "Critical"
Public Const MAJOR_STRING = "Major"
Public Const MODERATE_STRING = "Moderate"
Public Const MINOR_STRING = "Minor"
Public Const OTHER_STRING = "Other"
Public Const OPERATIONAL_STRING = "Operational"

Public Const REQUIRED_STRING = "Required"

Public Const ISSUES_WORKSHEET_NAME = "Issues"
Public Const INSPECTION_WORKSHEET_NAME = "Inspection"
Public Const PIF_INVITATION_WORKSHEET_NAME = "Invitation"
Public Const PIF_INSPECTOR_FORM_WORKSHEET_NAME = "Inspector Form"
             
Public Const KNOWLEDGE_MANAGEMENT_KEYWORD = "Knowledge Management"
Public Const KNOW_PREPARE_KEYWORD = "Know Prepare"

Public Const PROCESS_IMPROVE_KEYWORD = "Process.Improve"
Public Const INSPECT_KEYWORD = "Inspect"
Public Const EVOLVE_KEYWORD = "Evolve"
Public Const MISC_KEYWORD = "Misc"
Public Const MGMT_PLAN_KEYWORD = "Mgmt Plan"
Public Const REQUIREMENTS_KEYWORD = "Req"
Public Const DESIGN_KEYWORD = "Design"
Public Const CODE_KEYWORD = "Cod"
Public Const UNIT_TEST_KEYWORD = "UT"
Public Const INTEGRATION_TEST_KEYWORD = "IT"
Public Const SYSTEM_TEST_KEYWORD = "System"
             
' Maximum number of rows to check if they are all empty to consider that all issues
' are processed
Const MAX_ROWS_TO_CHECK = 10
Const ISSUE_MIN_COLUMNS = 4 ' Number of columns to look at when checking fot the last issue

Public Const INSPECTOR_FORM_SUBJECT = "Project Inspector Form"
Public Const MINUTES_SUBJECT = "Project Inspection Minutes"
Public Const MAX_COLUMNS_IN_MEETING = 7
Public Const MEETING_DATE_CAPTION = "Date"
Public Const PERMANENT_PROJECTS = _
    "Knowledge Management;Process.Improve Engineering;Process.Improve Process.Mgmt;" & _
    "Process.Improve Project.Mgmt;Process.Improve Support"
Const MAX_MEETINGS = 20

Const MEETING_TIME_FROM_CAPTION = "Time From"
Const MEETING_TIME_TO_CAPTION = "Time To"
Const MEETING_LOCATION_CAPTION = "Location"
Const MEETING_DURATION_CAPTION = "Duration"
Const MEETING_TYPE_CAPTION = "Type"
Const MACROS_WORKBOOK_NAME = "rhInspection.xla"

Public Const MEETING_ROOM_SIGN = "*"
Public Const PROJECTOR_NAME = "Projector"

'--------------------------------------------------------------------------------------------------
' Function CheckSupportedBuild
' This function check that IF build is not older then supported by macros
'--------------------------------------------------------------------------------------------------
Function CheckSupportedBuild(IFwb As Workbook) As Boolean
    
    Dim addWb As Workbook
    Dim IFbuild As Long
    Dim addBuild As Long
    
    CheckSupportedBuild = True
    Set addWb = Workbooks(MACROS_WORKBOOK_NAME)
    
    addBuild = CLng(addWb.CustomDocumentProperties("IFBuildSupported"))
    IFbuild = CLng(IFwb.CustomDocumentProperties("Build"))
    
    If addBuild > IFbuild Then
        CheckSupportedBuild = False
    End If

End Function
'--------------------------------------------------------------------------------------------------
' Function addEmptyMeeting
' This function adds meeting to form with no fields filled
'--------------------------------------------------------------------------------------------------
Private Function addEmptyMeeting(atWorkbook As Workbook) As Long
    Dim atWorksheet As Worksheet
    Dim MeetingTemplate As Range
    Dim Meeting As Range
    Dim meetingNumber As Long
    
    ' Select proper worksheet
    With atWorkbook
        If .BuiltinDocumentProperties("Subject") = INSPECTOR_FORM_SUBJECT Then
            Set atWorksheet = .Worksheets(PIF_INVITATION_WORKSHEET_NAME)
        Else
            Set atWorksheet = .Worksheets(INSPECTION_WORKSHEET_NAME)
        End If
        
        On Error Resume Next
        Set MeetingTemplate = .Names("MeetingTemplate").RefersToRange
        
        If Err <> 0 Then
            MsgBox "This Form is not supported!", vbCritical
            Exit Function
        End If
        
        On Error GoTo 0
        
        Set Meeting = FindLastMeeting(atWorkbook, atWorksheet, meetingNumber)
        
        If Meeting Is Nothing Then
            MsgBox "Cannot add the meeting. Maximum number of meetings is reached", vbCritical
        Else
            atWorksheet.Unprotect
            
            MeetingTemplate.Copy
            Meeting.Insert Shift:=xlDown
            
            RenameMeetings atWorkbook, atWorksheet
            
            atWorksheet.Protect
        End If
    End With
    Application.CutCopyMode = False
    
    addEmptyMeeting = meetingNumber + 1
End Function
'--------------------------------------------------------------------------------------------------
' Sub AddMeeting
' This sub adds meeting (template) to the form
'--------------------------------------------------------------------------------------------------
Sub AddMeeting()
    Dim atWorkbook As Workbook
    
    ' Select proper workbook
    Set atWorkbook = FindWorkbook(FIND_ANY)
    
    If atWorkbook Is Nothing Then
        Exit Sub
    End If
    addEmptyMeeting atWorkbook
End Sub ' AddMeeting
'--------------------------------------------------------------------------------------------------
' Sub AddMeetingWithValues
' This sub adds meeting to the form and fills it with given values
'--------------------------------------------------------------------------------------------------
Sub AddMeetingWithValues(toWorkbook As Workbook, mDate As Date, mTime As Date, mDuration As Date, _
                         mLocation As String, mType As String)
    Dim meetingNumber As Long
'    ActivateField toWorkbook, "MeetingDate1"
    meetingNumber = addEmptyMeeting(toWorkbook)
    SetField toWorkbook, "MeetingDate" & meetingNumber, mDate
    SetField toWorkbook, "MeetingTimeFrom" & meetingNumber, mTime
    SetField toWorkbook, "MeetingTimeTo" & meetingNumber, mTime + mDuration
    SetField toWorkbook, "MeetingLocation" & meetingNumber, mLocation
    SetField toWorkbook, "MeetingType" & meetingNumber, mType
End Sub ' AddMeetingWithValues
'--------------------------------------------------------------------------------------------------
' Sub AddMeetingWithValues
' This sub adds meeting to the form and fills it with given values
'--------------------------------------------------------------------------------------------------
Sub AddOrUpdateMeeting(meetingIndex As Long, toWorkbook As Workbook, mDate As Date, _
                       mTime As Date, mDuration As Date, _
                       mLocation As String, mType As String)
    
    Dim meetingNumber As Long
    Dim atWorksheet As Worksheet

    With toWorkbook
        If .BuiltinDocumentProperties("Subject") = INSPECTOR_FORM_SUBJECT Then
            Set atWorksheet = .Worksheets(PIF_INVITATION_WORKSHEET_NAME)
        Else
            Set atWorksheet = .Worksheets(INSPECTION_WORKSHEET_NAME)
        End If
    End With
    
    FindLastMeeting toWorkbook, atWorksheet, meetingNumber

    While meetingNumber < meetingIndex
        meetingNumber = addEmptyMeeting(toWorkbook)
    Wend
    
'    ActivateField toWorkbook, "MeetingDate1"
    SetField toWorkbook, "MeetingDate" & meetingIndex, mDate
    SetField toWorkbook, "MeetingTimeFrom" & meetingIndex, mTime
    SetField toWorkbook, "MeetingTimeTo" & meetingIndex, mTime + mDuration
    SetField toWorkbook, "MeetingLocation" & meetingIndex, mLocation
    SetField toWorkbook, "MeetingType" & meetingIndex, mType
End Sub ' AddMeetingWithValues

'--------------------------------------------------------------------------------------------------
' Sub DeleteMeeting
' This sub Removes meeting under the cursor at the form
'--------------------------------------------------------------------------------------------------
Sub DeleteMeeting()
    Dim atWorkbook As Workbook
    Dim atWorksheet As Worksheet
    Dim Meeting As Range
    
    ' Select proper workbook
    Set atWorkbook = FindWorkbook(FIND_ANY)
    
    If atWorkbook Is Nothing Then
        Exit Sub
    End If
    
    ' Select proper worksheet
    With atWorkbook
        If .BuiltinDocumentProperties("Subject") = INSPECTOR_FORM_SUBJECT Then
            Set atWorksheet = .Worksheets(PIF_INVITATION_WORKSHEET_NAME)
        Else
            Set atWorksheet = .Worksheets(INSPECTION_WORKSHEET_NAME)
        End If
        
        On Error Resume Next
        ' Trying to access "MeetingTemplate" just to check that form is supported
        Set Meeting = .Names("MeetingTemplate").RefersToRange
        
        If Err <> 0 Then
            MsgBox "This Form is not supported!", vbCritical
            Exit Sub
        End If
        
        On Error GoTo 0
        
        Set Meeting = FindMeetingRange(atWorkbook, atWorksheet)
        
        If Meeting Is Nothing Then
            MsgBox "Cannot Delete the meeting. Active Cell does not belong to any meeting", _
                   vbCritical
            Exit Sub
        End If
        
        If NumberOfMeetings(atWorkbook) = 1 Then
            MsgBox "Cannot delete the only remaining meeting", vbCritical
            Exit Sub
        End If
        
        atWorksheet.Unprotect
         
        Meeting.Delete Shift:=xlUp
            
        RenameMeetings atWorkbook, atWorksheet
            
        atWorksheet.Protect
    End With
End Sub ' DeleteMeeting
'--------------------------------------------------------------------------------------------------
' Function FindMeetingRange
' This function looks for the meeting under cursor in the list of the meeting and returns
' the reference (Range) of this meeting
'--------------------------------------------------------------------------------------------------
Function FindMeetingRange(atWorkbook As Workbook, atWorksheet As Worksheet) As Range
    Dim RowIndex As Long
    Dim ColumnIndex As Long
    Dim IsMeeting As Boolean
    
    atWorkbook.Activate
    atWorksheet.Activate
    
    RowIndex = ActiveCell.Row
    
    IsMeeting = False
    
    With atWorksheet
        For ColumnIndex = 1 To MAX_COLUMNS_IN_MEETING
            ' Check if RowIndex is at first meeting row
            If InStr(UCase(.Cells(RowIndex, ColumnIndex).Value), UCase(MEETING_DATE_CAPTION)) > 0 _
            Then
                IsMeeting = True
                Set FindMeetingRange = Range(.Cells(RowIndex, 1), _
                                             .Cells(RowIndex + 1, MAX_COLUMNS_IN_MEETING))
                Exit For
            End If
            ' Check if RowIndex is at second meeting row
            If InStr(UCase(.Cells(RowIndex - 1, ColumnIndex).Value), _
                     UCase(MEETING_DATE_CAPTION)) > 0 Then
                IsMeeting = True
                Set FindMeetingRange = Range(.Cells(RowIndex - 1, 1), _
                                             .Cells(RowIndex, MAX_COLUMNS_IN_MEETING))
                Exit For
            End If
        Next ColumnIndex
    End With
    
    If IsMeeting = False Then
        Set FindMeetingRange = Nothing
    End If
End Function ' FindMeetingRange
'--------------------------------------------------------------------------------------------------
' Function FindLastMeeting
' This function looks for the last meeting in the list of the meeting and returns
' the reference (Range) of the leftmost cell below the last meeting
'--------------------------------------------------------------------------------------------------
Function FindLastMeeting(atWorkbook As Workbook, atWorksheet As Worksheet, _
                          ByRef meetingNumber As Long) As Range
    Dim RowIndex As Long
    Dim ColumnIndex As Long
    Dim DateFieldFound As Boolean
    
    meetingNumber = 0
    
    RowIndex = atWorkbook.Names("MeetingStartPosition").RefersToRange.Row + 2
    
    Do
        DateFieldFound = False
        For ColumnIndex = 1 To MAX_COLUMNS_IN_MEETING
            If InStr(UCase(atWorksheet.Cells(RowIndex, ColumnIndex).Value), _
                     UCase(MEETING_DATE_CAPTION)) > 0 Then
                meetingNumber = meetingNumber + 1
                DateFieldFound = True
                Exit For
            End If
        Next ColumnIndex
        If DateFieldFound = False Then
            Exit Do
        End If
        RowIndex = RowIndex + 2
    Loop
    
    If meetingNumber >= MAX_MEETINGS Then
        Set FindLastMeeting = Nothing
    Else
        Set FindLastMeeting = atWorksheet.Range(atWorksheet.Cells(RowIndex, 1).Address)
    End If

End Function ' FindLastMeeting

Function GetLastMeetingDate(theBook As Workbook) As Date
    Dim meetingsNumber As Long
    Dim strDate As String
    Dim theDate As Date
    Dim maxDate As Date
    Dim i As Integer
    
    meetingsNumber = NumberOfMeetings(theBook)
    
    maxDate = "1/1/1990"
    For i = 1 To meetingsNumber
        strDate = GetField(theBook, "MeetingDate" & i)
        theDate = CDate(strDate)
        strDate = GetField(theBook, "MeetingTimeTo" & i)
        theDate = theDate + CDate(strDate)
        If theDate > maxDate Then
            maxDate = theDate
        End If
    Next
    
    GetLastMeetingDate = maxDate

End Function

Function MeetingsAreInPast(theBook As Workbook) As Boolean

    On Error Resume Next
    If GetLastMeetingDate(theBook) < Now Then
        MeetingsAreInPast = True
    Else
        MeetingsAreInPast = False
    End If
    
    If Err.Number <> 0 Then MeetingsAreInPast = Null
    Err.Clear

End Function


'--------------------------------------------------------------------------------------------------
' Function NumberOfMeetings
' This counts all the meetings in the list
'--------------------------------------------------------------------------------------------------
Function NumberOfMeetings(atWorkbook As Workbook) As Long
    Dim RowIndex As Long
    Dim meetingNumber As Long
    Dim ColumnIndex As Long
    Dim DateFieldFound As Boolean
    Dim atWorksheet As Worksheet
    
    If atWorkbook.BuiltinDocumentProperties("Subject") = INSPECTOR_FORM_SUBJECT Then
        Set atWorksheet = atWorkbook.Worksheets(PIF_INVITATION_WORKSHEET_NAME)
    Else
        Set atWorksheet = atWorkbook.Worksheets(INSPECTION_WORKSHEET_NAME)
    End If
    
    meetingNumber = 0
    
    RowIndex = atWorkbook.Names("MeetingStartPosition").RefersToRange.Row + 2
    
    Do
        DateFieldFound = False
        For ColumnIndex = 1 To MAX_COLUMNS_IN_MEETING
            If InStr(UCase(atWorksheet.Cells(RowIndex, ColumnIndex).Value), _
                     UCase(MEETING_DATE_CAPTION)) > 0 Then
                meetingNumber = meetingNumber + 1
                DateFieldFound = True
                Exit For
            End If
        Next ColumnIndex
        If DateFieldFound = False Then
            Exit Do
        End If
        RowIndex = RowIndex + 2
    Loop
    
    NumberOfMeetings = meetingNumber
End Function ' NumberOfMeetings
'--------------------------------------------------------------------------------------------------
' RenameMeetings
' This sub redefines the following names for all the meetings:
' MeetingDateN, MeetingTimeFromN, MeetingTimeToN, MeetingDurationN, MeetingLocationN, MeetingTypeN,
' Where N is number from 1 to Total Number of Meetings
'--------------------------------------------------------------------------------------------------
Sub RenameMeetings(atWorkbook As Workbook, atWorksheet As Worksheet)
    Dim CurrentMeetingNumber As Long
    Dim RowIndex As Long
    Dim index
    Dim FormulaString As String
    Dim ColumnIndex As Long
    Dim MeetingFound As Boolean
    Dim CellValue As String
    
    ' Removing Names
    
    On Error Resume Next
    For index = 1 To MAX_MEETINGS
        With atWorkbook
            .Names("MeetingDate" + CStr(index)).Delete
            .Names("MeetingTimeFrom" + CStr(index)).Delete
            .Names("MeetingTimeTo" + CStr(index)).Delete
            .Names("MeetingDuration" + CStr(index)).Delete
            .Names("MeetingLocation" + CStr(index)).Delete
            .Names("MeetingType" + CStr(index)).Delete
        End With
    Next index
    
    CurrentMeetingNumber = 0
    
    RowIndex = atWorkbook.Names("MeetingStartPosition").RefersToRange.Row + 2
    
    MeetingFound = True
    
    ' Adding Names
    
    Do While MeetingFound = True
        MeetingFound = False
        
        For ColumnIndex = 1 To MAX_COLUMNS_IN_MEETING
            With atWorksheet
                CellValue = UCase(.Cells(RowIndex, ColumnIndex).Value)
                If InStr(CellValue, UCase(MEETING_DATE_CAPTION)) > 0 Then
                    CurrentMeetingNumber = CurrentMeetingNumber + 1
                    MeetingFound = True
                    atWorkbook.Names.Add "MeetingDate" + CStr(CurrentMeetingNumber), _
                                         Range(.Name + "!" + _
                                               CStr(.Cells(RowIndex, ColumnIndex + 1).Address))
                ElseIf InStr(CellValue, UCase(MEETING_TIME_FROM_CAPTION)) > 0 Then
                    MeetingFound = True
                    atWorkbook.Names.Add "MeetingTimeFrom" + CStr(CurrentMeetingNumber), _
                                         Range(.Name + "!" + _
                                               CStr(.Cells(RowIndex, ColumnIndex + 1).Address))
                ElseIf InStr(CellValue, UCase(MEETING_TIME_TO_CAPTION)) > 0 Then
                    MeetingFound = True
                    atWorkbook.Names.Add "MeetingTimeTo" + CStr(CurrentMeetingNumber), _
                                         Range(.Name + "!" + _
                                               CStr(.Cells(RowIndex, ColumnIndex + 1).Address))
                ElseIf InStr(CellValue, UCase(MEETING_LOCATION_CAPTION)) > 0 Then
                    MeetingFound = True
                    atWorkbook.Names.Add "MeetingLocation" + CStr(CurrentMeetingNumber), _
                                         Range(.Name + "!" + _
                                               CStr(.Cells(RowIndex, ColumnIndex + 1).Address))
                ElseIf InStr(CellValue, UCase(MEETING_DURATION_CAPTION)) > 0 Then
                    MeetingFound = True
                    atWorkbook.Names.Add "MeetingDuration" + CStr(CurrentMeetingNumber), _
                                         Range(.Name + "!" + _
                                               CStr(.Cells(RowIndex, ColumnIndex + 1).Address))
                ElseIf InStr(CellValue, UCase(MEETING_TYPE_CAPTION)) > 0 Then
                    MeetingFound = True
                    atWorkbook.Names.Add "MeetingType" + CStr(CurrentMeetingNumber), _
                                         Range(.Name + "!" + _
                                               CStr(.Cells(RowIndex, ColumnIndex + 1).Address))
                End If
            End With
        Next ColumnIndex
        RowIndex = RowIndex + 1
    Loop
    
    FormulaString = "="
    
    For index = 1 To CurrentMeetingNumber
        FormulaString = FormulaString + "MeetingDuration" + CStr(index) + "+"
    Next index
    
    FormulaString = Left(FormulaString, Len(FormulaString) - 1)
    
    atWorkbook.Names("TotalTime").RefersToRange.Cells(1, 1).Formula = FormulaString
    
End Sub ' RenameMeetings
'--------------------------------------------------------------------------------------------------
' Function getLongTime
' This function returns string representing time given as input parameter. Time may be more
' than 23:59. Return value has the following format: hh:mm
'--------------------------------------------------------------------------------------------------
Function getLongTime(time As Double) As String
    getLongTime = CStr(Int(CDbl(time * 24))) + ":" + Format(CStr(Round(((CDbl(time * 24)) - _
                                                            Int(CDbl(time * 24))) * 60, 2)), "00")
End Function
'--------------------------------------------------------------------------------------------------
' Function GetColumnNumber
' This function looks for specified column number at specified workbook and returns column number
' of searched column. The function returns 0 if column not found
'--------------------------------------------------------------------------------------------------
Function GetColumnNumber(WorksheetWithIssues As Worksheet, ColumnName As String) As Long
    Dim LastColumn As Long
    Dim CaptionsRow As Long
    Dim index As Long
    
    GetColumnNumber = 0
    
    CaptionsRow = FindFirstIssue(WorksheetWithIssues) - 2
    
    LastColumn = FindLastColumn(WorksheetWithIssues)
    
    For index = 1 To LastColumn
        If (Left(WorksheetWithIssues.Cells(CaptionsRow, index), Len(ColumnName)) = ColumnName) Or _
           (Left(WorksheetWithIssues.Cells(CaptionsRow + 1, index), Len(ColumnName)) _
           = ColumnName) Then
            ' We have found the column we look for
            GetColumnNumber = index
            Exit For
        End If
    Next index
End Function ' GetColumnNumber
'--------------------------------------------------------------------------------------------------
' Function GetColumnNumbers
' This function fills ColumnNumbers structure. It sets Field Number for each field if corresponding
'  column was found at specified worksheet, otherwise it sets 0
'--------------------------------------------------------------------------------------------------
Function GetColumnNumbers(WorksheetWithIssues As Worksheet) As ColumnNumbers
    Dim theColumnNumbers As ColumnNumbers
    Dim minWorkbook As Workbook
    Dim PageCaption As String                    ' Page or Line column caption
    Dim InspType As String
    
    Set minWorkbook = FindWorkbook(FIND_ANY)
    InspType = GetField(minWorkbook, "Type")
    
    PageCaption = "Page"
    If UCase(InspType) = UCase(CODE_TYPE) Then
        PageCaption = "Line"
    End If
    
    With theColumnNumbers
        .NColumnNumber = GetColumnNumber(WorksheetWithIssues, N_CAPTION)
        .PageColumnNumber = GetColumnNumber(WorksheetWithIssues, PageCaption)
        .SectionColumnNumber = GetColumnNumber(WorksheetWithIssues, SECTION_CAPTION)
        .descriptionColumnNumber = GetColumnNumber(WorksheetWithIssues, DESCRIPTION_CAPTION)
            
        .ResolvedStatusColumnNumber = GetColumnNumber(WorksheetWithIssues, RESOLVED_STATUS_CAPTION)
        .SeverityColumnNumber = GetColumnNumber(WorksheetWithIssues, SEVERITY_CAPTION)
            
        .AuthorColumnNumber = GetColumnNumber(WorksheetWithIssues, AUTHOR_CAPTION)
        .StateColumnNumber = GetColumnNumber(WorksheetWithIssues, STATE_CAPTION)
        .ResolverCommentsColumnNumber = _
            GetColumnNumber(WorksheetWithIssues, RESOLVER_COMMENTS_CAPTION)
            
        .VerifierCommentsColumnNumber = _
            GetColumnNumber(WorksheetWithIssues, VERIFIER_COMMENTS_CAPTION)
    End With
    GetColumnNumbers = theColumnNumbers
End Function ' GetColumnNumbers
'--------------------------------------------------------------------------------------------------
' GetIssue
' This function fills all the fields of Issue structure is can find and fill other fields with ""
' Input Parameters:
'    fromWorksheet = worksheet at Issue record is located
'    IssueRow = Row at fromWorksheet where Issue record is located
'--------------------------------------------------------------------------------------------------
Function GetIssue(fromWorksheet As Worksheet, IssueRow As Long, theColumnNumbers As ColumnNumbers) _
                  As Issue
    Dim theIssue As Issue
    
    With theColumnNumbers
        ' Initilizing fields
        theIssue.n = 0
        theIssue.Page = ""
        theIssue.Section = ""
        theIssue.Description = ""
        theIssue.ResolvedStatus = ""
        theIssue.Severity = ""
        theIssue.Author = ""
        theIssue.AuthorHyperlink = ""
        theIssue.State = ""
        theIssue.ResolverComments = ""
        theIssue.VerifierComments = ""
        
        On Error Resume Next
        
        ' Fill in the N field
        theIssue.n = fromWorksheet.Cells(IssueRow, .NColumnNumber).Value
        
        ' Fill in the Page field
        theIssue.Page = fromWorksheet.Cells(IssueRow, .PageColumnNumber).Value
    
        ' Fill in the Section field
        theIssue.Section = fromWorksheet.Cells(IssueRow, .SectionColumnNumber).Value
    
        ' Fill in the Description field
        theIssue.Description = fromWorksheet.Cells(IssueRow, .descriptionColumnNumber).Value
    
        ' Fill in the ResolvedStatus field
        theIssue.ResolvedStatus = fromWorksheet.Cells(IssueRow, .ResolvedStatusColumnNumber).Value
    
        ' Fill in the Severity field
        theIssue.Severity = fromWorksheet.Cells(IssueRow, .SeverityColumnNumber).Value
    
        ' Fill in the Author field
        With fromWorksheet.Cells(IssueRow, .AuthorColumnNumber)
            theIssue.Author = .Value
            If .Hyperlinks.Count > 0 Then
                theIssue.AuthorHyperlink = .Hyperlinks(1).SubAddress
            End If
        End With
    
        ' Fill in the State field
        theIssue.State = fromWorksheet.Cells(IssueRow, .StateColumnNumber).Value
    
        ' Fill in the Resolver Comments field
        theIssue.ResolverComments = fromWorksheet.Cells(IssueRow, _
                                                        .ResolverCommentsColumnNumber).Value
    
        ' Fill in the Verifier Comments field
        theIssue.VerifierComments = fromWorksheet.Cells(IssueRow, _
                                                        .VerifierCommentsColumnNumber).Value
    End With ' theColumnNumbers
    GetIssue = theIssue
End Function ' GetIssue
'--------------------------------------------------------------------------------------------------
' AddIssueToRow
' This sub adds an issue at the specified worksheet
' If the issue already exist then the sub does nothing
' Input Parameters:
'   toWorksheet - worksheet to add the issue to
'   theIssue - issue to add
'   toRow - row at the worksheet to add the issue to
'--------------------------------------------------------------------------------------------------
Sub AddIssueToRow(toRow As Long, _
                  toWorksheet As Worksheet, _
                  theIssue As Issue, _
                  theColumnNumbers As ColumnNumbers)
    On Error Resume Next
    
    With theIssue
        If (.Severity = CRITICAL_STRING) Or _
           (.Severity = MAJOR_STRING) Or _
           (.Severity = MODERATE_STRING) Then
            .Severity = OPERATIONAL_STRING
        ElseIf .Severity = OTHER_STRING Then
            .Severity = MINOR_STRING
        End If
    End With
    
    ' Adding new issue
    With theColumnNumbers
        toWorksheet.Cells(toRow, .PageColumnNumber).Value = theIssue.Page
        toWorksheet.Cells(toRow, .SectionColumnNumber).Value = theIssue.Section
        toWorksheet.Cells(toRow, .descriptionColumnNumber).Value = theIssue.Description
        toWorksheet.Cells(toRow, .SeverityColumnNumber).Value = theIssue.Severity
        
        With toWorksheet.Cells(toRow, .AuthorColumnNumber)
            .Value = theIssue.Author
            .Hyperlinks.Add Anchor:=toWorksheet.Cells(toRow, theColumnNumbers.AuthorColumnNumber), _
                            Address:="", _
                            SubAddress:=theIssue.AuthorHyperlink, _
                            ScreenTip:=theIssue.Author, _
                            TextToDisplay:=theIssue.Author
        End With
        
        toWorksheet.Cells(toRow, .StateColumnNumber).Value = theIssue.State
        
        toWorksheet.Cells(toRow, .ResolverCommentsColumnNumber).Value = _
                    theIssue.ResolverComments
        toWorksheet.Cells(toRow, .VerifierCommentsColumnNumber).Value = _
                    theIssue.VerifierComments
    End With ' theColumnNumbers
End Sub ' AddIssueToRow

'--------------------------------------------------------------------------------------------------
' AddIssue
' This sub adds an issue at the specified worksheet
' If the issue already exist then the sub does nothing
' Input Parameters:
'   toWorksheet - worksheet to add the issue to
'   theIssue - issue to add
'--------------------------------------------------------------------------------------------------
Sub AddIssue(toWorksheet As Worksheet, theIssue As Issue, theColumnNumbers As ColumnNumbers)
    Dim toRow As Long
    ' Checking if such issue is already in the list
    If Not IssueExists(toWorksheet, theIssue, theColumnNumbers) Then
        ' Is not found. Moving to the end of the list
        toRow = FindLastIssue(toWorksheet)
        If toRow = FindFirstIssue(toWorksheet) Then
            With theColumnNumbers
                If (toWorksheet.Cells(toRow, .PageColumnNumber).Value <> "") Or _
                   (toWorksheet.Cells(toRow, .SectionColumnNumber).Value <> "") Or _
                   (toWorksheet.Cells(toRow, .descriptionColumnNumber).Value <> "") Then
                    toRow = toRow + 1
                End If
            End With
        Else
            toRow = toRow + 1
        End If
        AddIssueToRow toRow, toWorksheet, theIssue, theColumnNumbers
    End If ' Not Issue_Exists
End Sub ' AddIssue
'--------------------------------------------------------------------------------------------------
' IssueExists
' This Function looks for the specified issue. If it is found
' the function returns True, else it returns False
' Input Parameters:
'   Page = Page Number (2nd column)
'   Section = Section Number (3rd column)
'   Description = Issue Description (4th column)
'--------------------------------------------------------------------------------------------------
Private Function IssueExists(atWorksheet As Worksheet, theIssue As Issue, _
                             theColumnNumbers As ColumnNumbers) As Boolean
    Dim CurrentRow As Long
    CurrentRow = FindFirstIssue(atWorksheet)
    
    ' Organizing loop to check if such issue is already in the list
    While Not TheLast(atWorksheet, CurrentRow)
        With atWorksheet
            ' Checking if issue at CurrentRow is the issue we are looking for
            If .Cells(CurrentRow, theColumnNumbers.PageColumnNumber).Value = theIssue.Page And _
               .Cells(CurrentRow, theColumnNumbers.SectionColumnNumber).Value = _
                     theIssue.Section And _
               Replace(.Cells(CurrentRow, theColumnNumbers.descriptionColumnNumber).Value, "'", "") = _
                     Replace(theIssue.Description, "'", "") Then
                ' We have found it! returning result and exiting function
                If theColumnNumbers.AuthorColumnNumber > 0 Then
                    If .Cells(CurrentRow, theColumnNumbers.AuthorColumnNumber).Value = _
                       theIssue.Author Then
                        IssueExists = True
                        Exit Function
                    End If
                Else
                    IssueExists = True
                    Exit Function
                End If
            End If
        End With
        CurrentRow = CurrentRow + 1
    Wend
    IssueExists = False
End Function ' IssueExists
'--------------------------------------------------------------------------------------------------
' FindLastColumn
' This sub returns the column number of the last coulmn at the specified worksheet.
'--------------------------------------------------------------------------------------------------
Function FindLastColumn(atWorksheet As Worksheet) As Long
    Dim CaptionsRow As Long
    Dim index As Long
    
    index = 1
    
    ' We will search for the beginning of the captions column and then for the last column
    
    CaptionsRow = FindFirstIssue(atWorksheet) - 2
    
    With atWorksheet
        ' Look for last column
        While (.Cells(CaptionsRow, index + 1) <> "") Or _
              (.Cells(CaptionsRow + 1, index + 1) <> "")
            index = index + 1
        Wend
                
        FindLastColumn = index
    End With
End Function ' FindLastColumn
'--------------------------------------------------------------------------------------------------
' FindFirstIssue
' This sub returns the row number of the last issue at the specified worksheet.
'--------------------------------------------------------------------------------------------------
Function FindFirstIssue(atWorksheet As Worksheet) As Long
    Dim index
    
    index = 1
    
    Do
        If index > 20 Then
            FindFirstIssue = 0
            Exit Function
        End If
        With atWorksheet
            If UCase(.Cells(index, 1).Value) = UCase(ISSUES_FOUND_CAPTION) Then
                ' We have found the captions row
                FindFirstIssue = index + 4
                Exit Function
            End If
        End With
        index = index + 1
    Loop
End Function ' FindFirstIssue
'--------------------------------------------------------------------------------------------------
' FindLastIssue
' This sub returns the row number of the last issue at the specified worksheet.
'--------------------------------------------------------------------------------------------------
Function FindLastIssue(atWorksheet As Worksheet) As Long
    Dim CurrentRow As Long
    ' Beginning from the start
    CurrentRow = FindFirstIssue(atWorksheet)
    
    ' Looking for the last issue
    While Not TheLast(atWorksheet, CurrentRow + 1)
        ' Proceeding to the next row
        CurrentRow = CurrentRow + 1
    Wend
    FindLastIssue = CurrentRow
End Function ' FindLastIssue
'--------------------------------------------------------------------------------------------------
' TheLast
' This function checks if specified Row-1 contains the last issue
' at specified worksheet
' Function returns true if all cells (from 2 to ISSUE_MIN_COLUMNS)
' in a row are empty, otherwise it returns False
'--------------------------------------------------------------------------------------------------
Function TheLast(atWorksheet As Worksheet, aRow As Long) As Boolean
    Dim i As Long
    Dim oneOfNextRows As Long
    Dim NumRows As Long
    Dim aRange As Range
    Dim aRegion As String
    
    ' Setting the initial result
    TheLast = True
    
    NumRows = 0
    ' Checking maximum of MaxRows rows
    For oneOfNextRows = 0 To MAX_ROWS_TO_CHECK - 1
        ' Checking all cells in the line
        For i = 2 To ISSUE_MIN_COLUMNS
            If atWorksheet.Cells(aRow + oneOfNextRows, i).Value <> "" Then
                ' Found non-empty cell
                TheLast = False
                Exit For
            End If
        Next i
        If TheLast = False Then
            Exit For
        End If
        NumRows = NumRows + 1
    Next oneOfNextRows
    
    If TheLast = True Then
        Exit Function
    End If
    
    If NumRows > 0 Then
        ' Selecting rows to delete
        aRegion = Trim(str(aRow)) + ":" + Trim(str(aRow + NumRows - 1))
        Set aRange = Range(aRegion)
        
        ' Deleting empty rows
        aRange.EntireRow.Delete
    End If
End Function ' TheLast
'--------------------------------------------------------------------------------------------------
' Sub ClearField
' This sub clears specified field at specified workbook
'--------------------------------------------------------------------------------------------------
Sub ClearField(fromWorkbook As Workbook, FieldName As String)
    fromWorkbook.Names(FieldName).RefersToRange.ClearContents
End Sub
'--------------------------------------------------------------------------------------------------
' Sub CopyRange
' This sub copies value of each cell from source range
' to the corresponding cell of destination range
' Input parameters:
' rFrom = Source range
' rTo = Destinatin range
'--------------------------------------------------------------------------------------------------
Sub CopyRange(rFrom As Range, rTo As Range)
    Dim r As Integer
    Dim c As Integer
    
    ' For each cell in source range
    For r = 1 To rFrom.Rows.Count
        For c = 1 To rFrom.Columns.Count
            ' Copy value to corresponding destination range
            rTo.Cells(r, c).Value = rFrom.Cells(r, c).Value
        Next c
    Next r
End Sub ' CopyRange
'--------------------------------------------------------------------------------------------------
' Sub FormatRange
' This sub sets style of specified range. It draws frames and sets other
' formatting attributes
'--------------------------------------------------------------------------------------------------
Sub FormatRange(aRange As Range, OutlineLeftBorderWeight As XlBorderWeight, _
                        OutlineRightBorderWeight As XlBorderWeight, _
                        OutlineTopBorderWeight As XlBorderWeight, _
                        OutlineBottomBorderWeight As XlBorderWeight, _
                        InsideHorizontalBorderWeight As XlBorderWeight, _
                        InsideVerticalBorderWeight As XlBorderWeight)
    
    Dim IsProtected As Boolean
    
    With aRange.Worksheet
        IsProtected = .ProtectContents
    
        If IsProtected Then .Unprotect
    End With
    
    ' Setting font properties
    With aRange.Font
        .Name = "Arial"
        .FontStyle = "Normal"
        .Size = 8
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ColorIndex = 55
    End With
    
    ' Redrawing borders
    ' Removing unneeded lines
    aRange.Borders(xlDiagonalDown).LineStyle = xlNone
    aRange.Borders(xlDiagonalUp).LineStyle = xlNone
    
    ' Drawing Left sides
    If OutlineLeftBorderWeight <> 0 Then
        With aRange.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = OutlineLeftBorderWeight
            .ColorIndex = 16
        End With
    End If
    
    ' Drawing Top sides
    If OutlineTopBorderWeight <> 0 Then
        With aRange.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = OutlineTopBorderWeight
            .ColorIndex = 16
        End With
    End If
    
    ' Drawing Bottom sides
    If OutlineBottomBorderWeight <> 0 Then
        With aRange.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = OutlineBottomBorderWeight
            .ColorIndex = 16
        End With
    End If
    
    ' Drawing Right sides
    If OutlineRightBorderWeight <> 0 Then
        With aRange.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = OutlineRightBorderWeight
            .ColorIndex = 16
        End With
    End If
    
    ' Drawing Inside Vertical lines
    If InsideVerticalBorderWeight <> 0 Then
        If aRange.Columns.Count > 1 Then
            With aRange.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = InsideVerticalBorderWeight
                .ColorIndex = 16
            End With
        End If
    End If
    
    ' If there are more then one row to draw Drawing Inside horizontal lines
    If InsideHorizontalBorderWeight <> 0 Then
        If aRange.Rows.Count > 1 Then
            With aRange.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = InsideHorizontalBorderWeight
                .ColorIndex = 16
            End With
        End If
    End If

    If IsProtected Then
        aRange.Worksheet.Protect
    End If
End Sub ' FormatRange
'--------------------------------------------------------------------------------------------------
' Sub DeleteRow
' This sub deletes one or more (Count) rows from aWorksheet worksheet
' beginning from aRow row
' Input parameters
' aRow = First row to delete
' Coung = number of rows to delete
' aWorksheet = worksheet with rows to delete
'--------------------------------------------------------------------------------------------------
Sub DeleteRow(atWorksheet As Worksheet, aRow As Long, Count As Integer)
    Dim i As Integer
    
    For i = 1 To Count
        With atWorksheet
            .Range(.Cells(i + aRow - 1, 1), _
                   .Cells(i + aRow - 1, FindLastColumn(atWorksheet))).Delete (xlShiftUp)
        End With
    Next i
End Sub ' DeleteRow
'--------------------------------------------------------------------------------------------------
' Function GetField
' This function returns the value of specified field
' Input parameters
' FieldName = name of the field
'--------------------------------------------------------------------------------------------------
Public Function GetField(atWorkbook As Workbook, FieldName As String) As Variant
    On Error Resume Next
    GetField = atWorkbook.Names(FieldName).RefersToRange.Cells(1, 1).Value
    If Err.Number <> 0 Then
        GetField = ""
    End If
End Function ' GetField
'--------------------------------------------------------------------------------------------------
' Sub SetField
' This sub sets specified value for the specified field
' Input parameters:
'   toWorkbook - workbook where field to set is located
'   aField - name of the field
'   aValue - value to set
'--------------------------------------------------------------------------------------------------
Public Sub SetField(toWorkbook As Workbook, aField As String, aValue As Variant)
    toWorkbook.Names(aField).RefersToRange.Cells(1, 1).Value = aValue
End Sub
'--------------------------------------------------------------------------------------------------
' Sub ActivateField
' This sub activates given worksheet and sets focus to
' specified field
' Input parameters
' Name = name of the field to activate
'--------------------------------------------------------------------------------------------------
Sub ActivateField(atWorkbook As Workbook, FieldName As String)
    ' Activating INSPECTION_WORKSHEET_NAME worksheet
    atWorkbook.Names(FieldName).RefersToRange.Worksheet.Activate
    
    ' Setting focus to the specified field
    atWorkbook.Names(FieldName).RefersToRange.Activate
End Sub ' ActivateField
'--------------------------------------------------------------------------------------------------
' Sub CheckField
' This sub checks if specified field is empty and if so
' displays specified message and sets focus to this field
' Input parameters
' FieldName = name of the field to check
' Message = message to display if field is empty
'--------------------------------------------------------------------------------------------------
Sub CheckField(atWorkbook As Workbook, FieldName As String, Message As String)
    If GetField(atWorkbook, FieldName) = 0 Then
        MsgBox Message, vbCritical
        ActivateField atWorkbook, FieldName
        Error 513
    End If
End Sub ' CheckField
'--------------------------------------------------------------------------------------------------
' Function GetFileName
' This function returns extracted file name from a full vob path
'--------------------------------------------------------------------------------------------------
Function GetFileName(atWorkbook As Workbook) As String
    Dim n As Long
    Dim s As String
    
    ' s is a result. Taking full vob path from "Path" field
    s = GetField(atWorkbook, "Path")
    
    ' Removing any ""
    s = Replace(s, """", "")
    
    ' Looking for "@@"
    n = InStr(s, "@@")
    
    ' If found taking the string before "@@"
    If n > 0 Then s = Left(s, n - 1)
    
    ' Looking for filename (trying to remove directory path)
    n = InStrRev(s, "/")
    
    ' If found directories - taking only file name
    If n > 0 Then s = Right(s, Len(s) - n)
    
    ' Looking for extension - we do not need it
    n = InStrRev(s, ".")
    
    ' If there is an extension - taking only file name
    If n > 0 Then s = Left(s, n - 1)
    
    ' Returning result
    GetFileName = s
End Function ' GetFileName
'--------------------------------------------------------------------------------------------------
' Sub Renumber
' This sub calls FindWorkbook to find proper workbook and then calls RenubmerWorkbook to renumber it
'--------------------------------------------------------------------------------------------------
Sub Renumber()
    Dim atWorkbook As Workbook
    
    Set atWorkbook = FindWorkbook(FIND_ANY)
    
    If atWorkbook Is Nothing Then
        Exit Sub
    End If
    
    RenumberWorkbook atWorkbook
End Sub
'--------------------------------------------------------------------------------------------------
' RenumberWorkbook
' This sub determines if given argument is Inspector Form or Minutes and calls corresponding
' Renumber sub to renumber it
'--------------------------------------------------------------------------------------------------
Sub RenumberWorkbook(theWorkbook As Workbook)
    If theWorkbook.BuiltinDocumentProperties("Subject") = MINUTES_SUBJECT Then
        RenumberMinutes theWorkbook
    ElseIf theWorkbook.BuiltinDocumentProperties("Subject") = INSPECTOR_FORM_SUBJECT Then
        RenumberInspectorForm theWorkbook
    End If
End Sub ' RenumberWorkbook
'--------------------------------------------------------------------------------------------------
' CheckSavedAndSave
' This sub checks if workbook has been saved. If it was not saved then this sub calls
' RenumberWorkbook to renumber issues in specified form.
' After renumbering it saves specified workbook with autogenerated name
'--------------------------------------------------------------------------------------------------
Function CheckSavedAndSave(theWorkbook As Workbook) As String
    Dim fname
    Dim s As String
    Dim tempString As String
    
    CheckSavedAndSave = ""
    
    ' Checking that the form has been saved
    If Not theWorkbook.Saved Then
        ' Ask the user if (s)he wants to continue
        If MsgBox("To continue you must save this form. Do you want to do it now?", vbYesNo) = vbYes Then
            ' generating filename
            s = GetField(theWorkbook, "Project")
            If s = PROCESS_IMPROVE_KEYWORD Then
                s = GetFileName(theWorkbook)
            End If
            
            ' adding inspection ID
            tempString = GetField(theWorkbook, "PCR")
            If tempString <> "" Then
                s = s + "_" + tempString
            End If
            
            On Error Resume Next
            
            ' adding CR ID
            tempString = GetField(theWorkbook, "TriggerCR")
            If tempString <> "" Then
                s = s + "_" + tempString
            End If
            
            ' adding inspector name if it is inspector form
            If theWorkbook.BuiltinDocumentProperties("Subject") = INSPECTOR_FORM_SUBJECT Then
                tempString = GetField(theWorkbook, "InspectorName")
                If tempString <> "" Then
                    s = s + "_IF_" + tempString
                Else
                    s = s + "_IF"
                End If
            End If
            
            s = s + "_" + Format(CDate(Now), "yyyy-mm-dd")
            
            ' Displaying "SaveAs" dialog
            fname = Application.GetSaveAsFilename(InitialFileName:=s, FileFilter:="Microsoft Excel Workbook (*.xls), *.xls")
            If fname = False Then
                Exit Function
            End If
            
            If InStr(fname, ".xls") = 0 Then
                fname = fname & ".xls"
            End If
            
            RenumberWorkbook theWorkbook
            theWorkbook.SaveAs fname
        Else
            Exit Function
        End If
    End If
    
    If theWorkbook.Saved Then
        CheckSavedAndSave = theWorkbook.Name
    Else
        CheckSavedAndSave = ""
    End If
    
End Function ' CheckSavedAndSave
'--------------------------------------------------------------------------------------------------
' CreateButton
' This sub creates specified button at the specified toolbar.
' It also sets the specified button face and assigns button
' specified macro
' Input parameters:
'   Bar - Command bar to add button to
'   bName - Name of the button to add
'   mName - Name of the macro to assign
'   bFaceID - ID of button face to set
'--------------------------------------------------------------------------------------------------
Sub CreateButton(Bar As CommandBar, bName As String, mName As String, bFaceID As Long)
    Dim IsFound As Boolean
    Dim aControl As CommandBarControl
    Dim Button As CommandBarButton
    IsFound = False
    
    ' Trying to find the button by it's name
    For Each aControl In Bar.Controls
        If UCase$(aControl.Caption) = UCase$(bName) Then
            IsFound = True
            Set Button = aControl
        End If
    Next aControl
    
    If Not IsFound Then ' create button
        Set Button = Bar.Controls.Add(msoControlButton)
        Button.Caption = bName
        Button.Style = msoButtonIconAndCaption
    End If
    
    Button.OnAction = mName
    Button.FaceId = bFaceID
End Sub ' CreateButton

Sub ShowAdvanced()
    Dim Bar As CommandBar
    
    For Each Bar In Application.CommandBars
        If UCase$(Bar.Name) = UCase$("Advanced Inspection Tools") Then
            Bar.ShowPopup
            Exit Sub
        End If
    Next Bar

End Sub
Attribute VB_Name = "GenerateIssues"
Option Explicit
'--------------------------------------------------------------------------------------------------
' Module Name: Generate_Issues
' Copyright (c) 2003, Rhonda Ltd
' Module Description:
' This module is designed to generate issues based on
' comments at specified MS Word document
'--------------------------------------------------------------------------------------------------
' Revision History
' Version       Date        Author              Description9670
' D00.00.23     02/22/2002  Yuri Vashchenko     Initial Creation
' D00.00.24     03/04/2002  Yuri Vashchenko     Updated after formal Inspection (MOTrh02802)
' D00.00.30     08/13/2002  Yuri Vashchenko     Updated to support Revisions (MOTrh03741)
' A00.02.00     03/03/2003  Yuri Vashchenko     Updated to remove macros from Inspector Form
'--------------------------------------------------------------------------------------------------
' Type definition
Private Type Revision
    RType As Long
    Page As Long
    Section As String
    RText As String
    Description As String
    RRange As Variant
End Type
'--------------------------------------------------------------------------------------------------
' Sub AddIssueFromRev
' This sub adds issue based on data from given Revision
'--------------------------------------------------------------------------------------------------
Sub AddIssueFromRev(atWorksheet As Worksheet, Rev As Revision, theColumnNumbers As ColumnNumbers)
    Dim theIssue As Issue
    With theIssue
        .Author = ""
        .AuthorHyperlink = ""
        .Description = Rev.Description
        .n = 0
        .Page = Rev.Page
        .ResolvedStatus = ""
        .ResolverComments = ""
        .Section = Rev.Section
        .Severity = "<TBD>"
        .State = "New"
        .VerifierComments = ""
    End With
    AddIssue atWorksheet, theIssue, theColumnNumbers
End Sub
'--------------------------------------------------------------------------------------------------
' Sub GenerateIssuesFromWordComments
' This sub adds issues from Word revisions and comments
'--------------------------------------------------------------------------------------------------
Sub GenerateIssuesFromWordComments()
    ' Defining MS Word constants
    Const wdActiveEndPageNumber = 3
    Const wdFirstCharacterLineNumber = 10
    
    Const wdRevisionDelete = 2
    Const wdRevisionInsert = 1
    Const wdRevisionReplace = 9
    Const wdRevisionProperty = 3
    
    ' Defining variables
    Dim Rev As Revision
    Dim OldRev As Revision
    Dim Word
    Dim Doc
    Dim c
    Dim r
    Dim dlgAnswer
    
    Dim InspectorFormWorkbook As Workbook
    Dim InspectorFormWorksheet As Worksheet
    
    Dim theColumnNumbers As ColumnNumbers
    
    Set InspectorFormWorkbook = FindWorkbook(FIND_INSPECTOR_FORM)
    
    If InspectorFormWorkbook Is Nothing Then
        Exit Sub
    End If
    
    On Error Resume Next
    
    Set InspectorFormWorksheet = _
        InspectorFormWorkbook.Worksheets(PIF_INSPECTOR_FORM_WORKSHEET_NAME)
    
    If Err <> 0 Then
        ' Error accured when we were trying to access PIF_INSPECTOR_FORM_WORKSHEET_NAME worksheet
        MsgBox ("Inspector Form Workbook does not contain 'Inspector Form' worksheet")
        Err.Clear
        Exit Sub
    End If
    
    dlgAnswer = Application.GetOpenFilename("Word Documents (*.doc), *.doc", _
                                            1, "Generate Issues from document", "Generate")
    
    If dlgAnswer = False Then
        ' Drawing Borders and assign issues numbers
        Renumber
        ' Do nothing - exit
        Exit Sub
    End If
    
    theColumnNumbers = GetColumnNumbers(InspectorFormWorksheet)
    
    On Error Resume Next
    ' Starting MS Word
    Set Word = CreateObject("Word.Application")
    
    ' Trying to open the document in MS Word
       
    ' Accessing the first document
    Set Doc = Word.Documents.Open(dlgAnswer)
        
    ' Looping through all comments
    For Each c In Doc.Comments
            
    ' Getting comment's page
        With Rev
            .Page = c.Reference.Information(wdActiveEndPageNumber)
            
            ' Getting comment's line number
            .Section = "Line: " + str(c.Reference.Information(wdFirstCharacterLineNumber))
            
            ' Getting comment's description
            .Description = "Comment: """ & c.Range.Text & """ to: """ & c.Scope & """"
            
            ' Adding issue to the list
        End With ' Rev
        AddIssueFromRev InspectorFormWorksheet, Rev, theColumnNumbers
    Next c
    
    ' Setting impossible value
    OldRev.RType = 100
    
    ' Looping through all Revisions
    For Each r In Doc.Revisions
        
        Rev.RType = r.Type

        ' Processing Type of Revision
        If (Rev.RType = wdRevisionDelete) Or _
            (Rev.RType = wdRevisionInsert) Or _
            (Rev.RType = wdRevisionReplace) Or _
            (Rev.RType = wdRevisionProperty) Then
        
            With Rev
            
                Set .RRange = r.Range
                
                ' Getting Revision's page
                .Page = .RRange.Information(wdActiveEndPageNumber)
                
                ' Getting Revision's line number
                .Section = "Line: " + str(.RRange.Information(wdFirstCharacterLineNumber))
                
                ' Getting Revision's description
                .RText = .RRange.Text
                .Description = .RRange.Text
                
                ' Processing Type of Revision
                Select Case .RType
                    Case wdRevisionDelete
                        .Description = "Delete: " & .Description
                    Case wdRevisionInsert
                        .Description = "Insert: " & .Description
                    Case wdRevisionReplace
                        .Description = "Replace: " & .Description
                    Case wdRevisionProperty
                        .Description = """" & .Description & """: " & r.FormatDescription
                End Select
            End With ' Rev
            
            With OldRev
                If .RType <> 100 Then
                    ' Detect Replace (delete then insert)
                    If (.RType = wdRevisionDelete) And _
                        (Rev.RType = wdRevisionInsert) And _
                        (.RRange.Start + Len(.RText) = Rev.RRange.Start) Then
                        
                        Rev.Description = "Replace """ + .RText + """ with """ + Rev.RText + """"
                        
                        Rev.RType = 100
                        AddIssueFromRev InspectorFormWorksheet, Rev, theColumnNumbers
                    Else
                        ' Detect Replace (insert then delete)
                        If (Rev.RType = wdRevisionDelete) And _
                            (.RType = wdRevisionInsert) And _
                            (.RRange.Start + Len(.RText) = Rev.RRange.Start) Then
                            
                            Rev.Description = _
                                "Replace """ + .RText + """ with """ + Rev.RText + """"
                            
                            Rev.RType = 100
                            AddIssueFromRev InspectorFormWorksheet, Rev, theColumnNumbers
                        Else
                            ' Adding issue to the list
                            AddIssueFromRev InspectorFormWorksheet, OldRev, theColumnNumbers
                        End If
                    End If
                End If ' .RType <> 100
                
                ' Copy new data to old data
                .RType = Rev.RType
                .Page = Rev.Page
                .Section = Rev.Section
                .RText = Rev.RText
                .Description = Rev.Description
                Set .RRange = Rev.RRange
            End With ' OldRev
        End If
    Next r
    
    ' Adding the last Revision
    If OldRev.RType <> 100 Then
        AddIssueFromRev InspectorFormWorksheet, OldRev, theColumnNumbers
    End If
    
    ' Closing document
    Doc.Close
    ' Closing MS Word
    Word.Quit
    
    ' Drawing Borders and assign issues numbers
    Renumber
End Sub ' GenerateIssuesFromWordComments
Attribute VB_Name = "GetDocumentData"
Option Explicit
'--------------------------------------------------------------------------------------------------
' Module Name: Get_Document_Data
' Copyright (c) 2001-2003, Rhonda Ltd
' Module Description:
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' D00.00.22     02/14/2002  Yuri Vashchenko     Initial Creation
' D00.00.24     03/04/2002  Yuri Vashchenko     Updated after formal Inspection (MOTrh02802)
' A00.01.00     01/24/2003  Yuri Vashchenko     Updated to remove ActiveWorkbook usage
'--------------------------------------------------------------------------------------------------

'--------------------------------------------------------------------------------------------------
' CleanupFields
' This sub clears the values of the following fields:
'   Project
'   Title
'   Type
'   Version
'   Date
'   Size
'--------------------------------------------------------------------------------------------------
Private Sub CleanupFields(atWorkbook As Workbook)
    ClearField atWorkbook, "Project"
    ClearField atWorkbook, "Title"
    ClearField atWorkbook, "Type"
    ClearField atWorkbook, "Version"
    ClearField atWorkbook, "Date"
    ClearField atWorkbook, "Size"
End Sub
'--------------------------------------------------------------------------------------------------
' GetDocData
' This sub tries to get document from the vob and fill in the
' following fields (based on document properties):
'   Project
'   Title
'   Type
'   Version
'   Date
'   Size
' Currently supported document types are only MS Word (*.doc) and
' MS Excel (*.xls) documents
'--------------------------------------------------------------------------------------------------
Sub GetDocData()
    Dim path As String
    Dim NumPages As Long
    Dim DocApp
    Dim Document
    Dim IsDoc As Boolean
    Dim aRange
    Dim atWorkbook As Workbook
    Dim ProjectName As String
    Dim Project As Range
    Dim DocSubject As String
    Dim DocCategory As String
    
    Set atWorkbook = FindWorkbook(FIND_ANY)
    
    If atWorkbook Is Nothing Then
        Exit Sub
    End If
    
    ' Do not stop on errors
    On Error Resume Next
    
    ' Getting vob path to document to get
    path = Trim(GetField(atWorkbook, "Path"))
    
    ' Check for error
    If path = "" Then
        MsgBox "You must specify the path for the document", vbCritical
        ActivateField atWorkbook, "Path"
        Exit Sub
    End If
    
    ' Checking for supported document types
    If InStr(path, ".doc") = 0 And InStr(path, ".xls") = 0 Then
        MsgBox "Getting data is supported only for MS Word (*.doc) and MS Excel (*.xls) documents", vbCritical
        ActivateField atWorkbook, "Path"
        Exit Sub
    End If
    
    IsDoc = (InStr(path, ".doc") <> 0)
    
    ' Getting document from the vob
    path = ClearCaseModule.GetDocument(path)
    
    ' Check for error
    If path = "" Then
        MsgBox "Failed to get document", vbCritical
        Exit Sub
    End If
 
    ' Setting application cursor to hourglass
    Application.Cursor = xlWait
    
    ' Starting either MSWord or MSExcell to open document
    If IsDoc Then
        Set DocApp = CreateObject("Word.Application")
        Set Document = DocApp.Documents.Open(path)
    Else
        Set DocApp = CreateObject("Excel.Application")
        path = Replace(path, """", "")
        Set Document = DocApp.Workbooks.Open(path)
    End If
    
    ' Clear fields before fillling
    CleanupFields atWorkbook
    
    ' Trying to get values of document properties and fill in the fields
    
    ProjectName = Document.CustomDocumentProperties("DOC_PROJECT").Value
    
    If ProjectName = "Rhonda Process" Then
        ProjectName = PROCESS_IMPROVE_KEYWORD
    End If
    
    DocSubject = Document.BuiltinDocumentProperties("Subject")
    DocCategory = Document.BuiltinDocumentProperties("Category")
    
    If ((DocSubject = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
       (DocSubject = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
       (DocCategory = "Course")) Then
        ProjectName = KNOWLEDGE_MANAGEMENT_KEYWORD
    End If
    
    SetField atWorkbook, "Project", ""
    
    For Each Project In Range("ProjectList").Cells
        If ProjectName = Project.Value Then
            SetField atWorkbook, "Project", ProjectName
            Exit For
        End If
    Next Project
    
    SetField atWorkbook, "Title", Document.BuiltinDocumentProperties("Title").Value
    SetField atWorkbook, "Version", Document.CustomDocumentProperties("DOC_REVISION").Value
    SetField atWorkbook, "Date", Document.CustomDocumentProperties("DOC_DATE").Value
    
    ' Trying to detect Rhonda Process Document
    If Document.BuiltinDocumentProperties("Subject").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|" Then
        SetField atWorkbook, "Type", "Process Document"
        SetField atWorkbook, "CurrentPhase", "N/A - For Process Inspections only"
    Else
        SetField atWorkbook, "SubType", Document.BuiltinDocumentProperties("Category").Value
    End If
    
    ' Trying to calculate the number of pages in the MSWord document
    If IsDoc Then
        ' Selecting the whole document
        Set aRange = Document.Range
        aRange.WholeStory
        
        ' Going to the end of the document
        aRange.GoTo 1, -1
        
        ' Getting total number of pages
        NumPages = Document.BuiltinDocumentProperties("Number of Pages").Value
    Else
        ' Getting total number of worksheets in MSExcel document
        NumPages = Document.Worksheets.Count
    End If
    
    ' Setting the field value
    SetField atWorkbook, "Size", NumPages
    
    ' Closing the document
    Document.Close 0
    If IsDoc Then
        DocApp.Quit 0
    End If
    
    ' Restoring default cursor
    Application.Cursor = xlDefault
End Sub ' Get_Doc_Data
'--------------------------------------------------------------------------------------------------
' OpenDocument
' This sub tries to get file from the vob and open it
' with the program that is associated with the file's extension
'--------------------------------------------------------------------------------------------------
Sub OpenDocument()
    Dim path As String
    Dim atWorkbook As Workbook
    
    Set atWorkbook = FindWorkbook(FIND_ANY)
    
    If atWorkbook Is Nothing Then
        Exit Sub
    End If
    
    ' Do not stop on errors
    On Error Resume Next
    
    ' Getting vob path to document to open
    path = Trim(GetField(atWorkbook, "Path"))
    
    ' Check for error
    If path = "" Then
        MsgBox "Vob Path field is empty! Nothing to open", vbCritical
        ActivateField atWorkbook, "Path"
        Exit Sub
    End If
    
    GetAndOpen path
    
End Sub ' OpenDocument


Attribute VB_Name = "InspectorForm"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------------------------------------------
' Class Module Name: InspectorForm
' Copyright (c) 2001-2003, Rhonda Ltd
' Module Description:
' This module is designed to create and delete "PIF Tools" toolbar
' Import and Get functions are implemented
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' D00.00.22     02/14/2002  Yuri Vashchenko     Initial Creation
' A00.01.00     01/27/2003  Yuri Vashchenko     Updated to remove Activeworkbook usage
'                                               Added "S|fffd|nd Form" button creation
'                                               Added "Add Checklist(s)" button creation
' A00.01.05     02/20/2003  Yuri Vashchenko     Imported from Inspector Form Template and
'                                               Rewritten to work as Excel Addin
'--------------------------------------------------------------------------------------------------
Option Explicit

Private WithEvents myWorkbooks As Excel.Application
Attribute myWorkbooks.VB_VarHelpID = -1
Private myObject As InspectorForm
'--------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------
Public Sub InitializeHandler()
    Set myWorkbooks = Excel.Application
    Set myObject = Me
End Sub
'--------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------
Private Sub myWorkbooks_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    If Sh.Name = PIF_INVITATION_WORKSHEET_NAME Then
        InvitationWorksheetChange Sh, Target
    End If
End Sub
'--------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------
Private Sub myWorkbooks_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If Wb.BuiltinDocumentProperties("Subject") = INSPECTOR_FORM_SUBJECT Then
        Workbook_WindowActivate Wn
    End If
End Sub
'--------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------
Private Sub Workbook_WindowActivate(ByVal Wn As Window)
    Dim IsFound As Boolean
    Dim IsAdvFound As Boolean
    Dim Bar As CommandBar
    Dim AdvBar As CommandBar
    Dim cb As CommandBar
        
    IsFound = False
    IsAdvFound = False
        
    For Each cb In Application.CommandBars
        If UCase$(cb.Name) = UCase$("Inspection Tools") Then
            IsFound = True
            Set Bar = cb
            If IsAdvFound And IsFound Then Exit For
        End If
        If UCase$(cb.Name) = UCase$("Advanced Inspection Tools") Then
            IsAdvFound = True
            Set AdvBar = cb
            If IsAdvFound And IsFound Then Exit For
        End If
    Next cb
    
    If Not IsFound Then ' create bar
        Set Bar = Application.CommandBars.Add(Name:="Inspection Tools", position:=msoBarTop, _
                                              Temporary:=True)
        Set AdvBar = Application.CommandBars.Add(Name:="Advanced Inspection Tools", position:=msoBarPopup, _
                                              Temporary:=True)
    End If
    
    Bar.Visible = True
    
    CreateButton Bar, "Generate Invitation", "GenerateInvitation", 363
    CreateButton Bar, "S|fffd|nd Form", "CreateMessage", 363
    CreateButton Bar, "Word Issues", "GenerateIssuesFromWordComments", 42
    CreateButton Bar, "Gather Minutes", "GatherMinutes", 303
    CreateButton Bar, "More Functions", "ShowAdvanced", 29

    CreateButton AdvBar, "Add Meeting", "AddMeeting", 1098
    CreateButton AdvBar, "Delete Meeting", "DeleteMeeting", 1657
    CreateButton AdvBar, "Renumber Issues", "Renumber", 210
    CreateButton AdvBar, "Get Document Data", "GetDocData", 109
    CreateButton AdvBar, "Open Document", "OpenDocument", 23
    CreateButton AdvBar, "Add Checklist(s)", "AddChecklists", 220
    CreateButton AdvBar, "Update People", "UpdatePeople", 362
    CreateButton AdvBar, "Update Projects", "UpdateProjects", 229
    CreateButton AdvBar, "Insert Rows", "InsertRows", 296
    CreateButton AdvBar, "Delete Rows", "DeleteRows", 293

End Sub
'--------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------
Private Function CheckInspector(inspectorName As String, position As Long, atWorkbook As Workbook) As String
    Dim i As Long
    Dim tempString As String
    Dim ParticipantName As String
    
    CheckInspector = ""
    
    If inspectorName = "" Then
        Exit Function
    End If
    For i = 1 To MAX_ATTENDANTS
        If i <> position Then
            ParticipantName = "InspectorName" + Trim(str(i))
            tempString = GetField(atWorkbook, ParticipantName)
            If tempString = "" Then
                Exit Function
            End If
            If tempString = inspectorName Then
                CheckInspector = "Duplicate Attendants Names detected! Name" + str(i) + " = Name" + str(position)
            End If
        End If
    Next i
End Function
'--------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------
Private Sub InvitationWorksheetChange(ByVal InvitationWorksheet As Worksheet, ByVal Target As Range)
    Dim Participant As Long
    Dim changedWorkbook As Workbook
    Dim tempString As String
    
    Set changedWorkbook = Target.Worksheet.Parent
   
    For Participant = 1 To MAX_ATTENDANTS
        tempString = "InspectorName" + CStr(Participant)
        If Target.Address = changedWorkbook.Names(tempString).RefersToRange.Address Then
            tempString = CheckInspector(Target.Value, Participant, changedWorkbook)
            If tempString <> "" Then
                Target.ClearContents
                Target.Activate
                MsgBox tempString
            End If
            Exit For
        End If
        tempString = "Inspector" + CStr(Participant) + "MeetingRole"
        If Target.Address = changedWorkbook.Names(tempString).RefersToRange.Address Then
            If (InStr(GetField(changedWorkbook, tempString), "Mod") > 0) Or _
               (InStr(GetField(changedWorkbook, tempString), "Au") > 0) Then
                SetField changedWorkbook, "inspector" + CStr(Participant) + "required", _
                         REQUIRED_STRING
            End If
        End If
    Next Participant
End Sub
Attribute VB_Name = "Invitation"
Option Explicit
'--------------------------------------------------------------------------------------------------
' Module Name: Invitation
' Copyright (c) 2001-2003, Rhonda Ltd
' Module Description:
' This module is designed to generate outlook invitation for
'  the inspection in base of form's fields
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' D00.00.22     02/14/2002  Yuri Vashchenko     Initial Creation
' D00.00.24     03/04/2002  Yuri Vashchenko     Updated after formal Inspection (MOTrh02802)
' D00.00.35     12/03/2002  Yuri Vashchenko     Replaced "Process Improve" with "Process.Improve"
'                                                   during Invitation generating
' A00.01.00     01/27/2003  Yuri Vashchenko     Updated to not include meeting organizer into
'                                                   To: field in Outlook invitation
'                                               Added "CreateMessage" macro to create message to
'                                                   Autor, Moderator and Writer
' A00.02.01     07/08/2003  Yuri Vashchenko     Updated to Support several meetings per one insp.,
'                                                   Added Projector resource support
'               08/21/2003  Yuri Vashchenko     Updated to Support new TimeMetrics Form
'                                              (insert correct KeyWord between project and Inspect)
' A00.02.02     07/13/2005  Igor Alexandrov     Added new checks of inspection's roles (CheckRoles
'                                               function) per PCR MOTrh07148
' A00.02.03     12/21/2005  Igor Alexandrov     Updated to support several meeting rooms
'                                               per PCR MOTrh07187
' A00.02.04     01/18/2006  Igor Alexandrov     Added check that IF build is not older then
'                                               supported by macros and IF updating procedure
' A00.02.05     01/30/2006  Igor Alexandrov     Changed MEETING_ROOM_NAME to MEETING_ROOM_SIGN = "*"
'                                               to support Conference Hall meetings
' A00.02.06     04/26/2006  Igor Alexandrov     Procedure UpdateProjects is changed to get
'                                               projects list from RhondaDB
' A00.02.07     08/16/2006  Igor Alexandrov     Procedure UpdateProjects is changed to support
'                                               several Process.Improve domains
' A00.03.00     06/04/2006  Igor Alexandrov     Export inspection data to RhondaDB is implemented
'                                               Support of Rhonda Timetracking form is added
'                                               Support of WBS code is added
'--------------------------------------------------------------------------------------------------
' Definitions of global variables

' Outlook Meeting Request
Dim OutlookMeetingRequest

' Constants

' Array for storing Attendants' availability
Dim FreeBusy(Common.MAX_ATTENDANTS + 1) As String
'--------------------------------------------------------------------------------------------------
' Function GetParticipantsInfo
' Returns array of user defined type "ParticipantInfo" with information about participants
'--------------------------------------------------------------------------------------------------
Function GetParticipantsInfo(fromWorkbook As Workbook) As ParticipantInfo()
    Dim isMinutes As Boolean
    Dim Person As String
    Dim PersonNumber As String
    Dim arrParticipants() As ParticipantInfo
    Dim i As Long
    
    If fromWorkbook.BuiltinDocumentProperties("Subject") = INSPECTOR_FORM_SUBJECT Then
        isMinutes = False
    Else
        isMinutes = True
    End If
    
    ' Selecting all attendants, one after another
    For i = 1 To MAX_ATTENDANTS
        
        PersonNumber = CStr(i)
        
        ' Name
        Person = GetField(fromWorkbook, "InspectorName" + PersonNumber)
        If Person = "" Then Exit For
        ReDim Preserve arrParticipants(i - 1)
        arrParticipants(i - 1).Name = Person
        
        ' Email Alias
        arrParticipants(i - 1).EmailAlias = FindAliasByName(Person, fromWorkbook)
        
        ' Meeting Role
        arrParticipants(i - 1).InspRole = GetField(fromWorkbook, "Inspector" + PersonNumber + "MeetingRole")
        
        ' Project Role
        arrParticipants(i - 1).ProjRole = GetField(fromWorkbook, "Inspector" + PersonNumber + "ProjectRole")
     
        ' If fromWorkbook is Minutes than getting preparation time and participation
        If isMinutes Then
            
            ' Preparation Time in hours
            arrParticipants(i - 1).PrepTime = _
                GetHours(GetField(fromWorkbook, "Inspector" + PersonNumber + "PrepTime"))
            
            
            ' Participated
            If GetField(fromWorkbook, "Inspector" + PersonNumber + "Participated") = "Yes" Then
                arrParticipants(i - 1).isParticipated = True
            Else: arrParticipants(i - 1).isParticipated = False
            End If
        
        Else
            ' Required / Optional
            If GetField(fromWorkbook, "Inspector" + PersonNumber + "Required") = "Required" Then
                arrParticipants(i - 1).isRequired = True
            Else: arrParticipants(i - 1).isParticipated = False
            End If
        
        End If
        
    Next i
      
    GetParticipantsInfo = arrParticipants

End Function ' GetParticipantsInfo

'--------------------------------------------------------------------------------------------------
' Function FindAliasByName
' Returns email alias of requested person
'--------------------------------------------------------------------------------------------------
Function FindAliasByName(strName As String, aBook As Workbook) As String
    Dim intRow As Integer
    Dim intColumn As Integer
    Dim aSheet As Worksheet

    ' Getting row and column number of email alias cell of target person
    intRow = aBook.Names("PeopleList").RefersToRange.Find(strName, LookIn:=xlValues).Row
    intColumn = aBook.Names("PeopleEmailAliases").RefersToRange.Column
    ' Getting target worksheet
    Set aSheet = aBook.Names("PeopleEmailAliases").RefersToRange.Worksheet
    
    FindAliasByName = aSheet.Cells(intRow, intColumn).Value

End Function

'--------------------------------------------------------------------------------------------------
' GetAttendants
' Funciton returns the list of all Attendants for the inspection
' format: Name / Meeting Role / Project Role / Required
'--------------------------------------------------------------------------------------------------
Private Function GetAttendants(InspectorForm As Workbook) As String
    Dim arrAttendants() As ParticipantInfo
    Dim result As String
    Dim i As Integer
    
    arrAttendants = GetParticipantsInfo(InspectorForm)
    
    result = ""
    
    ' Selecting all attendants, one after another
    For i = 0 To UBound(arrAttendants)
        
        ' Name
        result = result & arrAttendants(i).Name
        
        ' Meeting Role
        result = result + " " & arrAttendants(i).InspRole
        
        ' Project Role
        result = result + " / " & arrAttendants(i).ProjRole
        
        ' Required / Optional
        If arrAttendants(i).isRequired Then
            result = result + " (Required)" & Chr(13)
        Else: result = result + " (Optional)" & Chr(13)
        End If
     Next
      GetAttendants = result
End Function ' GetAttendants

'--------------------------------------------------------------------------------------------------
' CheckRoles
' Funciton checks that all attendies are ok and returns True if yes
'--------------------------------------------------------------------------------------------------
Private Function CheckRoles(atWorkbook As Workbook) As Boolean
    Dim AuthorsNumber As Integer
    Dim InspectorsNumber As Integer
    Dim ModersNumber As Integer
    Dim PresentersNumber As Integer
    Dim RecodersNumber As Integer
'    Dim SQA As Boolean
    Dim i As Integer
    Dim PersonNumber As String
    Dim Person As String
    Dim tempString As String
    Dim Btt As Integer
    
    CheckRoles = True
'    SQA = False
    
    For i = 1 To MAX_ATTENDANTS
        ' Getting the name of next Inspector
        PersonNumber = Trim(str(i))
        Person = GetField(atWorkbook, "InspectorName" + PersonNumber)
        
        ' if Inspector name is empty we are at the end of the list - Exiting
        If Person = "" Then
            Exit For
        End If
        
        ' Checking for the "Meeting Role" field
        CheckField atWorkbook, "Inspector" & PersonNumber & "MeetingRole", Person & " 's Meeting Role is empty"
        tempString = GetField(atWorkbook, "Inspector" + PersonNumber + "MeetingRole")
        
        If InStr(tempString, "Author") > 0 Then
            AuthorsNumber = AuthorsNumber + 1
        End If
        If InStr(tempString, "Moderator") > 0 Then
            ModersNumber = ModersNumber + 1
        End If
        If InStr(tempString, "Rec") > 0 Then
            RecodersNumber = RecodersNumber + 1
        End If
        If InStr(tempString, "Pres") > 0 Then
            PresentersNumber = PresentersNumber + 1
        End If
        If InStr(tempString, "Insp") > 0 Then
            InspectorsNumber = InspectorsNumber + 1
        End If
        
        ' Project Role
'        tempString = GetField(atWorkbook, "Inspector" + PersonNumber + "ProjectRole")
'        If InStr(tempString, "SQA") > 0 Then
'            SQA = True
'        End If
        
        ' Checking for the "Required" field
        CheckField atWorkbook, "Inspector" + PersonNumber + "Required", "Please select if " + Person + " is Required or Optional"
    Next i
    
    On Error GoTo ErrorHandle
    
    If AuthorsNumber < 1 Then
        MsgBox ("This inspection has no Author role!"), vbCritical
        Error 513
    ElseIf AuthorsNumber > 1 Then
        Btt = MsgBox("Are you sure that you have " & AuthorsNumber & " authors on inspection?", _
        vbYesNo + vbQuestion)
        Select Case Btt
            Case vbNo
                Error 513
        End Select
    End If
'    If SQA = False Then
'        MsgBox ("You have to invite an SQA engineer!"), vbCritical
'        Error 513
'    End If
    
    'If InspType = "Formal" Then
        If ModersNumber < 1 Then
           MsgBox ("This inspection has no Moderator role!"), vbCritical
            Error 513
        ElseIf ModersNumber > 1 Then
            MsgBox ("This inspection has more than one Moderators!"), vbCritical
            Error 513
        End If
        If RecodersNumber < 1 Then
            MsgBox ("This inspection has no Recorder role!"), vbCritical
            Error 513
        ElseIf RecodersNumber > 1 Then
            MsgBox ("This inspection has more than one Recorders!"), vbCritical
            Error 513
        End If
        If PresentersNumber < 1 Then
            MsgBox ("This inspection has no Presenter role!"), vbCritical
            Error 513
        ElseIf PresentersNumber > 1 Then
            MsgBox ("This inspection has more than one Presenters!"), vbCritical
            Error 513
        End If
        If InspectorsNumber < 2 Then
            MsgBox ("You have to invite at least two inspectors!"), vbCritical
            Error 513
        End If
    'End If
    
    Exit Function

ErrorHandle:
    CheckRoles = False
    Err.Clear

End Function ' CheckRoles

'--------------------------------------------------------------------------------------------------
' CheckFields
' Funciton checks that all required fields are not empty and
' returns True if yes, and False if at least one required field
' is empty
'--------------------------------------------------------------------------------------------------
Private Function CheckFields(atWorkbook As Workbook) As Boolean
    Dim i As Long
    Dim s As String
    Dim TotalMeetings As Long
    Dim InspType As String
    Dim tempString As String
    
    ' If we go until the end it is the success
    CheckFields = True
    
    InspType = "Formal"
    
    ' Check if the form is multy-meeting form
    On Error Resume Next
    
    ' Trying to access "MeetingDate1" name
    s = CStr(atWorkbook.Names("MeetingDate1").RefersToRange.Value)
    
    ' If error occured - there is not such name and it is not multy-meeting form
    If Err <> 0 Then
        Err.Clear
        ' This form doen't support multy-meeting. Process it as usual
        
        On Error GoTo SomethingWrong
        
        ' Checking "Planned Date" field
        CheckField atWorkbook, "PlannedDate", "Planned Date is empty"
        
        ' Checking "Planned Time From" field
        CheckField atWorkbook, "PlannedTimeFrom", "Planned Time From is empty"
        
        ' Checking "Planned Time To" field
        CheckField atWorkbook, "PlannedTimeTo", "Planned Time To is empty"
        
        ' Checking "Meeting Location" field
        CheckField atWorkbook, "Location", "Meeting Location is empty"
    Else
        ' The form is multy-meeting supported form. Process all meetings.
        ' Get total number of meetings in this form
        TotalMeetings = NumberOfMeetings(atWorkbook)
        
        On Error GoTo SomethingWrong
        
        For i = 1 To TotalMeetings
            s = CStr(i)
            
            ' Checking "Meeting Date(i)" field
            CheckField atWorkbook, "MeetingDate" + s, "Date for meeting " + s + " is empty"
            
            ' Checking "Meeting Time From(i)" field
            CheckField atWorkbook, "MeetingTimeFrom" + s, "Time From " + s + " is empty"
            
            ' Checking "Meeting Time To(i)" field
            CheckField atWorkbook, "MeetingTimeTo" + s, "Time To " + s + " is empty"
            
            ' Checking "Meeting Location(i)" field
            CheckField atWorkbook, "MeetingLocation" + s, "Meeting Location " + s + " is empty"
        
            ' Checking "Meeting Type(i)" field
            CheckField atWorkbook, "MeetingType" + s, "Meeting Type " + s + " is empty"
            tempString = GetField(atWorkbook, "MeetingType" + s)
            If tempString = "Mini Inspection" Then
                InspType = "Mini"
            End If
        Next i
    End If
    
    ' Checking "TriggerCR" field
    If GetField(atWorkbook, "Type") = "Code" Then
        CheckField atWorkbook, "TriggerCR", "TriggerCR is empty"
    End If
    
    ' Checking "Product Title" field
    CheckField atWorkbook, "Title", "Product Title is empty"
    
    ' Checking "Product Type" field
    CheckField atWorkbook, "Type", "Product Type is empty"
    
    ' Checking "Product Version" field
    CheckField atWorkbook, "Version", "Product Version is empty"
    
    ' Checking "Product Size" field
    CheckField atWorkbook, "Size", "Product size is empty"
    
    ' Checking "Vob Path" field
    CheckField atWorkbook, "Path", "Product location is empty"
    
    ' For each attendie
    If CheckRoles(atWorkbook) = False Then
        GoTo SomethingWrong
    End If
    
    Exit Function
SomethingWrong:
    CheckFields = False
    Err.Clear
End Function ' CheckFields
'--------------------------------------------------------------------------------------------------
' GenerateSubject
' Funciton generates and returns the subject for Meeting Request
' subject is based on values of the corresponding fields:
'   Project and Title
'--------------------------------------------------------------------------------------------------
Private Function GenerateSubject(InspectorForm As Workbook, meetingNumber As String) As String
    Dim ProjectName As String
    Dim TriggerCR As String
    Dim tempString As String
    Dim WPTypeKeyword As String    ' Keyword for work product type
    Dim WPType As String           ' Work Product Type
    Dim WPGeneralType As String
    Dim WBScodeProperty As Object
    Dim strWBScode As String
    
    Const olText = 1
    
    ' Getting the project name
    ProjectName = GetField(InspectorForm, "Project")
    
    If InStr(ProjectName, PROCESS_IMPROVE_KEYWORD) > 0 Then
        tempString = ProjectName & " " & EVOLVE_KEYWORD
    ElseIf ProjectName = KNOWLEDGE_MANAGEMENT_KEYWORD Then
        tempString = KNOW_PREPARE_KEYWORD
    Else
        WPType = GetField(InspectorForm, "Type")
        WPGeneralType = GetField(InspectorForm, "iType")
        Select Case WPGeneralType
            Case "Docs"
                If WPType = "Unknown" Then
                    WPTypeKeyword = MISC_KEYWORD
                ElseIf WPType = "Training Materials" Then
                    WPTypeKeyword = KNOW_PREPARE_KEYWORD
                Else
                    WPTypeKeyword = MGMT_PLAN_KEYWORD
                End If
            Case "Requirements"
                WPTypeKeyword = REQUIREMENTS_KEYWORD
            Case "Design"
                WPTypeKeyword = DESIGN_KEYWORD
            Case "Code"
                If WPType = "Code" Then
                    WPTypeKeyword = CODE_KEYWORD
                End If
            Case "Test"
                If (WPType = "Integration Test") Or (WPType = "Sanity Test Plan") Or _
                   (WPType = "Detailed Test Development Plan") Or (WPType = "Release Test Execution Plan") Or _
                   (WPType = "Sanity Test Plan") Or (WPType = "Test Code/Procedures") Or _
                   (WPType = "Test Design Specification") Or (WPType = "Test Development Project Plan") Or _
                   (WPType = "Test Environments Requirements") Or (WPType = "Test Execution Project Plan") Or _
                   (WPType = "Test Models") Or (WPType = "Testware Release Plan") Or (WPType = "") Then
                    WPTypeKeyword = INTEGRATION_TEST_KEYWORD
                ElseIf WPType = "System Test" Then
                    WPTypeKeyword = SYSTEM_TEST_KEYWORD
                ElseIf WPType = "Unit Test" Then
                    WPTypeKeyword = UNIT_TEST_KEYWORD
                End If
        End Select
        tempString = ProjectName & " " & WPTypeKeyword & " " & INSPECT_KEYWORD
     
        strWBScode = GetField(InspectorForm, "WBScode")
        If strWBScode <> "" Then
            ' Set ProblemID property
            Set WBScodeProperty = OutlookMeetingRequest.UserProperties.Add("fldWBSCode", olText)
            WBScodeProperty.Value = strWBScode
            tempString = tempString & " " & strWBScode
        End If
    End If
    
    If meetingNumber = "0" Then
        tempString = tempString + " Inspection "
    Else
        tempString = tempString + " // " + GetField(InspectorForm, "MeetingType" + meetingNumber)
    End If
    
    tempString = tempString + " of " + GetField(InspectorForm, "Title")
    
    TriggerCR = GetField(InspectorForm, "TriggerCR")
    
    If TriggerCR <> "" Then
        tempString = tempString + " changes made per CR " + TriggerCR
    End If
    
    ' Generating result
    GenerateSubject = tempString
End Function      ' GenerateSubject
'--------------------------------------------------------------------------------------------------
' GenerateMeetingRequest
' Sub generates the meeting request in Outlook for this inspection
' Sub calls Geterate_Subject function to generate subject for the
' meeting message
'--------------------------------------------------------------------------------------------------
Private Sub GenerateMeetingRequest(InspectorForm As Workbook, meetingNumber As String)
    Dim myRequiredAttendee
    Dim myResourceAttendee
    Dim i As Long
    Dim Person As String
    Dim MeetingLocation As String
    Dim MeetingRoomEmail As String
    Dim ProjectorEmail As String
    Dim aLocation As Range
    
    ' Outlook's Constants
    Const olMeeting = 1
    Const olRequired = 1
    Const olOptional = 2
    Const olResource = 3
    
    ' Getting the address of the meeting room resource from MeetingRoomAddress custom document property
    ProjectorEmail = InspectorForm.CustomDocumentProperties("ProjectorAddress").Value
    
    ' Setting type of Outlook Item
    OutlookMeetingRequest.MeetingStatus = olMeeting
    
    ' Generating Subject of the message
    OutlookMeetingRequest.Subject = GenerateSubject(InspectorForm, meetingNumber)
    
    If meetingNumber = "0" Then
        ' Setting field "Location" for the message
        MeetingLocation = GetField(InspectorForm, "Location")
        OutlookMeetingRequest.Location = MeetingLocation
        
        ' Calculating Start date and time and setting corresponding field in the message
        OutlookMeetingRequest.Start = CDate(GetField(InspectorForm, "PlannedDate")) + _
                                      CDate(GetField(InspectorForm, "PlannedTimeFrom"))
        ' Calculating duration of the meeting and setting corresponding field in the message
        OutlookMeetingRequest.Duration = (GetField(InspectorForm, "PlannedTimeTo") - _
                                          GetField(InspectorForm, "PlannedTimeFrom")) * 1440
    Else
        ' Setting field "Location" for the message
        MeetingLocation = GetField(InspectorForm, "MeetingLocation" + meetingNumber)
        OutlookMeetingRequest.Location = MeetingLocation
        
        ' Calculating Start date and time and setting corresponding field in the message
        OutlookMeetingRequest.Start = CDate(GetField(InspectorForm, "MeetingDate" + _
                                                                    meetingNumber)) + _
                                      CDate(GetField(InspectorForm, "MeetingTimeFrom" + _
                                                                    meetingNumber))
        ' Calculating duration of the meeting and setting corresponding field in the message
        OutlookMeetingRequest.Duration = GetField(InspectorForm, "MeetingDuration" + _
                                                                 meetingNumber) * 1440
    End If
    
    ' Capturing Meeting room email from list
    i = 0
    For Each aLocation In Range("LocationList").Cells
        i = i + 1
        If MeetingLocation = aLocation.Value Then
            MeetingRoomEmail = Range("LocationAddresses").Cells(i, 1).Value
            Exit For
        End If
    Next aLocation
    
    ' Clearing the Free/Busy statuses array (set everyone as free)
    For i = 0 To MAX_ATTENDANTS
        FreeBusy(i) = String(48 * 30, "0")
    Next i
    
    ' Do not stop on errors
    On Error Resume Next
    
    ' For each attendie
    For i = 1 To MAX_ATTENDANTS
        ' Getting the name of the person
        Person = GetField(InspectorForm, "InspectorName" + Trim(str(i)))
        
        ' If it is empty - we are at the end of the list
        If Person = "" Then Exit For
        
        ' Do not add Organizer
        If Person <> OutlookMeetingRequest.Session.CurrentUser Then
            ' Adding the name of the person into recipients list
            Set myRequiredAttendee = OutlookMeetingRequest.Recipients.Add(Person)
            
            ' Getting it's free/busy status
            If meetingNumber = "0" Then
                FreeBusy(i) = myRequiredAttendee.FreeBusy(CDate(GetField(InspectorForm, _
                                                                         "PlannedDate")), 30)
            Else
                FreeBusy(i) = myRequiredAttendee.FreeBusy(CDate(GetField(InspectorForm, _
                                                               "MeetingDate" + meetingNumber)), 30)
            End If
            ' Calculating if the person is required on the meeting or optional
            Person = GetField(InspectorForm, "Inspector" + Trim(str(i)) + "Required")
            
            ' Setting if the person is required on the meeting or optional
            If Person = "Required" Then
                myRequiredAttendee.Type = olRequired
            Else
                myRequiredAttendee.Type = olOptional
            End If
        End If
    Next i
    
    ' We will try to add meeting room as a resource. We will display error if fail
    On Error GoTo Display_Error
    
    ' Checking if Meeting room is planned location for the meeting
    If InStr(UCase(MeetingLocation), UCase(MEETING_ROOM_SIGN)) > 0 Then
        ' Adding Meeting Room into recipients list
        Set myResourceAttendee = OutlookMeetingRequest.Recipients.Add(MeetingRoomEmail)
        
        ' Gettign it's free/busy status
        If meetingNumber = "0" Then
            FreeBusy(0) = myResourceAttendee.FreeBusy(CDate(GetField(InspectorForm, _
                                                                     "PlannedDate")), 30)
        Else
            FreeBusy(0) = myResourceAttendee.FreeBusy(CDate(GetField(InspectorForm, _
                                                            "MeetingDate" + meetingNumber)), 30)
        End If
        ' Setting Meeting room as a resource
        myResourceAttendee.Type = olResource
    End If
    
    If InStr(UCase(MeetingLocation), UCase(PROJECTOR_NAME)) > 0 Then
        ' Adding Meeting Room into recipients list
        Set myResourceAttendee = OutlookMeetingRequest.Recipients.Add(ProjectorEmail)
        
        ' Gettign it's free/busy status
        If meetingNumber = "0" Then
            FreeBusy(MAX_ATTENDANTS + 1) = _
                myResourceAttendee.FreeBusy(CDate(GetField(InspectorForm, "PlannedDate")), 30)
        Else
            FreeBusy(MAX_ATTENDANTS + 1) = _
                myResourceAttendee.FreeBusy(CDate(GetField(InspectorForm, _
                                                           "MeetingDate" + meetingNumber)), 30)
        End If
        ' Setting Meeting room as a resource
        myResourceAttendee.Type = olResource
    End If
    
    ' Completed
    Exit Sub
Display_Error:
    ' Problems with meeting room. Display the message
    MsgBox "Unable to add Meeting Room or Projector as a resource or get its availability!"
End Sub ' GenerateMeetingRequest
'--------------------------------------------------------------------------------------------------
' GenerateBody
' Sub generates the message body for outlook meeting request
' for this inspection
' Sub tryes to open special template and replace all fields with
' the corresponding values
' Sub calls Get_Attendants function to generate list of attendants
' among with their roles
'--------------------------------------------------------------------------------------------------
Private Sub GenerateBody(InspectorForm As Workbook, meetingNumber As String)
    Dim Template As String
    
    Template = GetField(InspectorForm, "InvitationText")
    
    ' Setting value for the <Product_Type> field
    If meetingNumber = "0" Then
        Template = Replace(Template, "<Inspection_Type>", _
                                     GetField(InspectorForm, "Formal Inspection"))
    Else
        Template = Replace(Template, "<Inspection_Type>", _
                                     GetField(InspectorForm, "MeetingType" + meetingNumber))
    End If
    
    ' Setting value for the <Product_Type> field
    Template = Replace(Template, "<Product_Type>", GetField(InspectorForm, "Type"))
    
    ' Setting value for the <Project_Name> field
    Template = Replace(Template, "<Project_Name>", GetField(InspectorForm, "Project"))
    
    ' Setting value for the <Product_Title> field
    Template = Replace(Template, "<Product_Title>", GetField(InspectorForm, "Title"))
    
    ' Setting value for the <Product_Version> field
    Template = Replace(Template, "<Product_Version>", GetField(InspectorForm, "Version"))
    
    ' Setting value for the <Product_Size> field in appropriate units
    Template = Replace(Template, "<Product_Size>", GetField(InspectorForm, "Size") & _
                                                   " " & GetField(InspectorForm, "Unit"))
    
    ' Setting value for the <Product_Location> field
    Template = Replace(Template, "<Product_Location>", GetField(InspectorForm, "Path"))
    
    ' Setting value for the <Product_ClearCase> field
    Template = Replace(Template, "<Product_ClearCase>", GetField(InspectorForm, "Clearcase"))
    
    ' Setting value for the <Meeting_Date> field in format 14-Mar-2002
    If meetingNumber = "0" Then
        ' Setting value for the <Meeting_Date> field in format 14-Mar-2002
        Template = Replace(Template, "<Meeting_Date>", _
                                     Format(CDate(GetField(InspectorForm, "PlannedDate")), _
                                            "DD-MMM-YYYY"))
        ' Setting value for the <HH:MM - HH:MM> field
        Template = Replace(Template, "<HH:MM - HH:MM>", _
                      Format(CDate(GetField(InspectorForm, "PlannedTimeFrom")), "h:mm") + " - " + _
                      Format(CDate(GetField(InspectorForm, "PlannedTimeTo")), "h:mm"))
        ' Setting value for the <Meeting_Location> field
        Template = Replace(Template, "<Meeting_Location>", GetField(InspectorForm, "Location"))
        ' Setting value for the <PIF_Time> field
        Template = Replace(Template, "<PIF_Time>", Format(CDate(GetField(InspectorForm, _
                                               "PlannedTimeFrom")) - 2.08333333333333E-02, "h:mm"))
    Else
        ' Setting value for the <Meeting_Date> field in format 14-Mar-2002
        Template = Replace(Template, "<Meeting_Date>", _
                           Format(CDate(GetField(InspectorForm, "MeetingDate" + meetingNumber)), _
                                  "DD-MMM-YYYY"))
        ' Setting value for the <HH:MM - HH:MM> field
        Template = Replace(Template, "<HH:MM - HH:MM>", _
                       Format(CDate(GetField(InspectorForm, "MeetingTimeFrom" + meetingNumber)), _
                              "h:mm") + " - " + _
                       Format(CDate(GetField(InspectorForm, "MeetingTimeTo" + meetingNumber)), _
                              "h:mm"))
        ' Setting value for the <Meeting_Location> field
        Template = Replace(Template, "<Meeting_Location>", _
                                     GetField(InspectorForm, "MeetingLocation" + meetingNumber))
        ' Setting value for the <PIF_Time> field
        Template = Replace(Template, "<PIF_Time>", Format(CDate(GetField(InspectorForm, _
                               "MeetingTimeFrom" + meetingNumber)) - 2.08333333333333E-02, "h:mm"))
    End If
    
    ' Setting value for the <Reinspection> field
    Template = Replace(Template, "<Reinspection>", GetField(InspectorForm, "Reinspection"))
    
    ' Setting value for the <Attendants> field
    Template = Replace(Template, "<Attendants>", GetAttendants(InspectorForm))
    
    ' Setting value for the <Signature> field
    Template = Replace(Template, "<Signature>", OutlookMeetingRequest.Session.CurrentUser)
    
    ' Setting the body of the message
    OutlookMeetingRequest.body = Template
    
End Sub ' GenerateBody
'--------------------------------------------------------------------------------------------------
' IsFree
' Function returns 0 if all inspectors, Projector and Meeting Room
' (if specified as a resource) are free at specified period of time
' Function returns 1 if Meeting Room is busy (if specified as a
' resource)
' Function returns 2 if any required attendant is busy.
' Function returns 4 if any optional attendant is busy
' Function returns 8 if Projector is busy (if specified as a resource)
' Function can return the combination of above values
' Function returns -1 if the values of "PlannedTimeFrom" or
' "PlannedTimeTo" are incorrect
' Function uses "PlannedTimeFrom" and "PlannedTimeTo" to get
' specific period of time
' Function uses FreeBusy array to find out if the person free or
' busy at specified period
'--------------------------------------------------------------------------------------------------
Private Function IsFree(InspectorForm As Workbook, meetingNumber As String) As Long
    Dim TimeFrom As Long
    Dim TimeTo As Long
    Dim Duration As Long
    Dim FreeParticipant As String
    Dim ParticipantNumber As String
    Dim FieldName As String
    Dim i As Long
    
    ' Calculating <From>-<To> period in 30 minutes units
    If meetingNumber = "0" Then
        TimeFrom = CDate(GetField(InspectorForm, "PlannedTimeFrom")) * 24 * 2 + 1
        TimeTo = CDate(GetField(InspectorForm, "PlannedTimeTo")) * 24 * 2 + 1
    Else
        TimeFrom = CDate(GetField(InspectorForm, "MeetingTimeFrom" + meetingNumber)) * 24 * 2 + 1
        TimeTo = CDate(GetField(InspectorForm, "MeetingTimeTo" + meetingNumber)) * 24 * 2 + 1
    End If
    Duration = TimeTo - TimeFrom
    
    ' If ending time less than or equal to beginning time
    If Duration < 1 Then
        ' Setting initial result
        IsFree = -1
        Exit Function
    End If
    
    FreeParticipant = String(Duration, "0")
    
    ' Setting the initial result
    IsFree = 0
    
    If meetingNumber = "0" Then
        FieldName = "Location"
    Else
        FieldName = "MeetingLocation" + meetingNumber
    End If
    
    
    ' Checking for meeting room avaliability
    If InStr(UCase(GetField(InspectorForm, FieldName)), MEETING_ROOM_SIGN) > 0 Then
        ' For each 30 minutes unit in the period
        If Mid(FreeBusy(0), TimeFrom, Duration) <> FreeParticipant Then
            ' Setting the result - Meeting room is busy
            IsFree = 1
        End If
    End If
    
    ' Checking for Projector avaliability
    If InStr(UCase(GetField(InspectorForm, FieldName)), PROJECTOR_NAME) > 0 Then
        ' For each 30 minutes unit in the period
        If Mid(FreeBusy(MAX_ATTENDANTS + 1), TimeFrom, Duration) <> FreeParticipant Then
            ' Setting the result - Projector is busy
            IsFree = IsFree Or 8
        End If
    End If
    
    ' For each attendant
    For i = 1 To MAX_ATTENDANTS
        ParticipantNumber = Trim(str(i))
        
        ' If attendant name is empty that we are at the end of the list
        If GetField(InspectorForm, "InspectorName" + ParticipantNumber) = "" Then
            Exit For
        End If
        
        ' For each 30 minutes unit in the period
        
        If Mid(FreeBusy(i), TimeFrom, Duration) <> FreeParticipant Then
            If UCase(GetField(InspectorForm, "Inspector" + ParticipantNumber + "Required")) = _
               UCase(REQUIRED_STRING) Then
                IsFree = IsFree Or 2
            Else
                IsFree = IsFree Or 4
            End If
        End If
    Next i ' Go to the next Attendant
End Function ' Is_Free

'--------------------------------------------------------------------------------------------------
' Sub GenerateInvitation
' This sub Generates outlook invitation (mail message to s_end)
' Sub calls Generate_Meeting_Request to generate message itself
' Sub calls Geterate_Body sub to generate body for the
' meeting message
' It also checks that form has been saved and attaches it to the
' generated message
'--------------------------------------------------------------------------------------------------
Sub GenerateInvitation()
    Dim myOlApp As Variant
    Dim myNamespace As Variant
    Dim myFolder As Variant
    Dim myExplorer As Variant
    Dim Free As Long
    Dim Message As String
    Dim InspectorForm As Workbook
    Dim fname As String
    Dim TotalMeetings As Long
    Dim s As String
    Dim i As Long
    Dim response As Long
    
    ' Outlook constants
    Const olFolderCalendar = 9
    Const olMeeting = 1
    Const FormName = "IPM.Appointment.TimeMetricsRhondaDB"
    
    Set InspectorForm = FindWorkbook(FIND_INSPECTOR_FORM)
    
    If InspectorForm Is Nothing Then
        Exit Sub
    End If

    If CheckSupportedBuild(InspectorForm) = False Then
        response = MsgBox("Your Inspector Form Template is out of date!" & Chr(10) _
            & "           Do you want to update it now?", vbYesNo)
        If response = vbYes Then
            InspectorForm.FollowHyperlink Address:=IF_UPDATE_PATH, NewWindow:=False
        Else: MsgBox "You have to update Inspector Form Template to continue your work"
        End If
        Exit Sub
     End If
    
    ' Checking that all required fields are not empty
    If CheckFields(InspectorForm) Then
        ' Creating Outlook instance, explorer and make Calendar folder current
        Set myOlApp = CreateObject("Outlook.Application")
        Set myNamespace = myOlApp.GetNamespace("MAPI")
        Set myFolder = myNamespace.GetDefaultFolder(olFolderCalendar)
        Set myExplorer = myOlApp.Explorers.Add(myFolder, 1)
        Set myExplorer.CurrentFolder = myNamespace.GetDefaultFolder(olFolderCalendar)
            
        GatherDataAndPost2RhondaDB InspectorForm, False
        
        fname = CheckSavedAndSave(InspectorForm)
        
        If fname = "" Then
            Exit Sub
        End If
        
        ' Check if the form is multy-meeting form
        On Error Resume Next
        
        ' Trying to access "MeetingDate1" name
        s = CStr(InspectorForm.Names("MeetingDate1").RefersToRange.Value)
        
        ' If error occured - there is not such name and it is not multy-meeting form
        If Err <> 0 Then
            Err.Clear
            ' This form doen't support multy-meeting. Process it as usual
            
            On Error GoTo 0
            
            ' Creating Outlook Appointment Item
            Set OutlookMeetingRequest = myExplorer.CurrentFolder.items.Add(FormName)
            
            ' Setting it's type
            OutlookMeetingRequest.MeetingStatus = olMeeting
            
            ' Generating meeting request
            GenerateMeetingRequest InspectorForm, "0"
            
            ' Calling Is_Free to get attendants and meeting room availability
            Free = IsFree(InspectorForm, "0")
            
            If Free <> 0 Then
                Message = ""
                ' If Meeting room is busy include it into the message
                If (Free And 1) <> 0 Then
                    Message = "Meeting Room is busy!" + Chr(13)
                End If
                
                ' If any of Required attendants is busy include it into the message
                If (Free And 2) <> 0 Then
                    Message = Message + "At least one of the required attendants is busy!" + Chr(13)
                End If
                
                ' If any of Optional attendants is busy include it into the message
                If (Free And 4) <> 0 Then
                    Message = Message + "At least one of the optional attendants is busy!" + Chr(13)
                End If
                
                ' Complete the message
                Message = Message + "Do you want to continue?"
                
                ' Ask the user if (s)he wants to continue
                If MsgBox(Message, vbYesNo) = vbNo Then
                    ' If (s)he doesn't - exit sub
                    Exit Sub
                End If
            End If
            
            ' Calling Generate_Body to Generate Message body
            GenerateBody InspectorForm, "0"
            
            ' Add this form as an attachment
            OutlookMeetingRequest.Attachments.Add InspectorForm.fullName
                        
            ' We have done it! Display Generated message
            OutlookMeetingRequest.Display
        Else
            ' The form is multy-meeting supported form. Process all meetings.
            ' Get total number of meetings in this form
            TotalMeetings = NumberOfMeetings(InspectorForm)
            On Error GoTo 0
            
            For i = 1 To TotalMeetings
                s = CStr(i)
                
                ' Creating Outlook Appointment Item
                Set OutlookMeetingRequest = myExplorer.CurrentFolder.items.Add(FormName)
                
                ' Setting it's type
                OutlookMeetingRequest.MeetingStatus = olMeeting
            
                ' Generating meeting request
                GenerateMeetingRequest InspectorForm, s
                
                ' Calling Is_Free to get attendants and meeting room availability
                Free = IsFree(InspectorForm, s)
                
                If Free <> 0 Then
                    Message = ""
                    ' If Meeting room is busy include it into the message
                    If (Free And 1) <> 0 Then
                        Message = "Meeting Room is busy!" + Chr(13)
                    End If
                    
                    ' If any of Required attendants is busy include it into the message
                    If (Free And 2) <> 0 Then
                        Message = Message + "At least one of the required attendants is busy!" + Chr(13)
                    End If
                    
                    ' If any of Optional attendants is busy include it into the message
                    If (Free And 4) <> 0 Then
                        Message = Message + "At least one of the optional attendants is busy!" + Chr(13)
                    End If
                    
                    ' Complete the message
                    Message = Message + "Do you want to continue?"
                    
                    ' Ask the user if (s)he wants to continue
                    If MsgBox(Message, vbYesNo) = vbNo Then
                        ' If (s)he doesn't - exit sub
                        Exit Sub
                    End If
                End If
                
                ' Calling Generate_Body to Generate Message body
                GenerateBody InspectorForm, s
                
                ' Add this form as an attachment
                OutlookMeetingRequest.Attachments.Add InspectorForm.fullName
                
                ' We have done it! Display Generated message
                OutlookMeetingRequest.Display

            Next i
        End If
    End If
End Sub ' GenerateInvitation
'--------------------------------------------------------------------------------------------------
' Sub CreateMessage
' It also checks that form has been saved and attaches it to the
' generated message
'--------------------------------------------------------------------------------------------------
Sub CreateMessage()
    Dim myOlApp As Object
    Dim InspectorForm As Workbook
    Dim OutlookMessage As Object
    Dim userName As String
    Dim ParticipantNumber As String
    Dim ParticipantName As String
    Dim ParticipantMeetingRole As String
    Dim i As Long
    Dim fname As String
    
    ' Outlook constants
    Const olMailItem = 0
    
    Set InspectorForm = FindWorkbook(FIND_INSPECTOR_FORM)
    
    If InspectorForm Is Nothing Then
        Exit Sub
    End If
    
    On Error GoTo SomethingWrong
    
    ' Checking that all required fields are filled
    CheckField InspectorForm, "InspectorName", "Inspector Name is empty"
    CheckField InspectorForm, "PreparationTime", "Inspector Preparation Time is empty"
        
    ' Creating Outlook instance
    Set myOlApp = CreateObject("Outlook.Application")
        
    ' Creating Outlook Appointment Item
    Set OutlookMessage = myOlApp.CreateItem(olMailItem)
    
    ' What is the name of current outlook user?
    userName = OutlookMessage.Session.CurrentUser
    
    ' Trying to add Author, Moderator and Writer as Recipients
    For i = 1 To MAX_ATTENDANTS
        ParticipantNumber = Trim(str(i))
        ' If attendant name is empty that we are at the end of the list
        ParticipantName = GetField(InspectorForm, "InspectorName" + ParticipantNumber)
        If ParticipantName = "" Then
            Exit For
        End If
        
        ' Getting Participant's Meeting Role
        ParticipantMeetingRole = GetField(InspectorForm, "Inspector" + ParticipantNumber + "MeetingRole")
    
        If InStr(ParticipantMeetingRole, "Aut") > 0 Or _
           InStr(ParticipantMeetingRole, "Mod") > 0 Or _
           InStr(ParticipantMeetingRole, "Rec") > 0 Then
            OutlookMessage.Recipients.Add ParticipantName
        End If
    Next i ' Go to the next Attendant
    
    ' Setting Subject
    OutlookMessage.Subject = GenerateSubject(InspectorForm, "0") + ". " + userName
    
    ' Checking that the form has been saved
        fname = CheckSavedAndSave(InspectorForm)
        
        If fname = "" Then
            Exit Sub
        End If
        
    ' Add this form as an attachment
    OutlookMessage.Attachments.Add InspectorForm.fullName
        
    ' We have done it! Display Generated message
    OutlookMessage.Display
    Exit Sub
SomethingWrong:
    Err.Clear
End Sub ' CreateMessage
'--------------------------------------------------------------------------------------------------
' Sub Post2RhondaDB
' Posts input string with inspection data into RhodnaDB
'--------------------------------------------------------------------------------------------------
Private Function Post2RhondaDB(PostString As String) As String
    
    Dim myRequest As Object
    
    Const ADD_INSPECTION_URL = "http://rhondadb.rhonda.ru/pls/public/pub_api.add_inspection"
    
    Set myRequest = CreateObject("Msxml2.XMLHTTP")
    Call myRequest.Open("POST", ADD_INSPECTION_URL, False)
    myRequest.setRequestHeader "Content-Type", "text/html"
    myRequest.Send CStr(PostString)
    
    If myRequest.Status = "200" Then
        Post2RhondaDB = myRequest.responseText
    Else: Err.Raise 513, , "Cannot connect to RhondaDB"
    End If
    
End Function ' Post2RhondaDB

'--------------------------------------------------------------------------------------------------
' Sub GatherDataAndPost2RhondaDB
' Gathers inspection data to post into RhondaDB
'--------------------------------------------------------------------------------------------------
Sub GatherDataAndPost2RhondaDB(sourceBook As Workbook, isFinal As Boolean)
    Dim inspID As String
    Dim strHiddenInspID As String
    Dim strProject As String
    Dim strProductType As String
    Dim strTriggerCR As String
    Dim dblSize As Double
    Dim strDisposition As String
    Dim strUnit As String
    Dim isReinspection As Boolean
    Dim intErrorsOperational As Integer
    Dim intErrorsMinor As Integer
    Dim dblTotalPrepTime As Double
    Dim strPath As String
    Dim arrAttendants() As ParticipantInfo
    Dim strAttendants As String
    Dim i As Integer
    Dim intInspectors As Integer
    Dim Meetings As MeetingsInfo
    Dim arrFieldNames()
    Dim arrFieldValues()
    Dim strResult As String
    Dim strResponse As String
    
    arrFieldNames = Array("p_inspect_id", "p_project", "p_product_category", "p_is_formal", _
        "p_trigger_cr", "p_insp_date", "p_meetings_number", "p_inspectors_number", "p_prep_time", _
        "p_insp_time", "p_inspected_size", "p_status", "p_measure_unit", "p_location", "p_reinspect", _
        "p_filelocation", "p_oper_errors", "p_minor_errors", "p_participants_info", "p_inspection_cr", "p_is_closed")
    
    ' getting participants info
    arrAttendants = GetParticipantsInfo(sourceBook)
    
    ' getting Project name
    strProject = GetField(sourceBook, "Project")
    
    ' if process improvement or knowledge management inspection do not post data to RhondaDB
    If InStr(PERMANENT_PROJECTS, strProject) > 0 Then
        Exit Sub
    End If
    
    ' getting common fields' values
    inspID = GetField(sourceBook, "PCR")
    inspID = Replace(inspID, Chr(34), "") ' replacing quotes
    inspID = Replace(inspID, "'", "") ' replacing quotes
    strProductType = GetField(sourceBook, "Type")
    strTriggerCR = GetField(sourceBook, "TriggerCR")
    strTriggerCR = Replace(strTriggerCR, Chr(34), "") ' replacing quotes
    strTriggerCR = Replace(strTriggerCR, "'", "") ' replacing quotes
    dblSize = CDbl(GetField(sourceBook, "Size"))
    strUnit = GetField(sourceBook, "Unit")
    strPath = GetField(sourceBook, "Path")
    
    If GetField(sourceBook, "Reinspection") = "Yes" Then
        isReinspection = True
    End If
    
    Meetings = GetMeetingsInfo(sourceBook)
    
    If isFinal Then
        ' getting inspection minutes fields' names
        strHiddenInspID = GetField(sourceBook, "HiddenInspectionID")
        intErrorsOperational = CInt(GetField(sourceBook, "ErrorsOperational"))
        intErrorsMinor = CInt(GetField(sourceBook, "ErrorsMinor"))
        strDisposition = GetField(sourceBook, "Disposition")
        
        For i = 0 To UBound(arrAttendants)
            ' Getting participants info into string variable. Format:
            ' <participant Email Alias>;<meeting role>;<prep time>;<is_attended>Chr(10)
            strAttendants = strAttendants & arrAttendants(i).EmailAlias & ";" & _
                EncodeRole(arrAttendants(i).InspRole) & ";" & arrAttendants(i).PrepTime _
                & ";" & ToString(arrAttendants(i).isParticipated) & Chr(10)
            ' counting inspectors
            If arrAttendants(i).InspRole <> "Author" Then
                ' counted as inspector only if prepared or participated in meetings
                If arrAttendants(i).isParticipated Or arrAttendants(i).PrepTime > 0 Then
                    intInspectors = intInspectors + 1
                    dblTotalPrepTime = dblTotalPrepTime + arrAttendants(i).PrepTime
                End If
            End If
         Next i
        If Len(strAttendants) > 0 Then strAttendants = Left(strAttendants, Len(strAttendants) - 1)
    
    Else
        ' getting inspection form fields' names
        For i = 0 To UBound(arrAttendants)
            ' Getting participants info into string variable. Format:
            ' <participant Email Alias>;<meeting role>;<prep time>;<is_attended>Chr(10)
            strAttendants = strAttendants & arrAttendants(i).EmailAlias & ";" & _
                EncodeRole(arrAttendants(i).InspRole) & ";" & arrAttendants(i).PrepTime _
                & ";" & ToString(arrAttendants(i).isParticipated) & Chr(10)
            ' counting everyone who is not author as inspector
            If arrAttendants(i).InspRole <> "Author" Then
                intInspectors = intInspectors + 1
            End If
        Next i
        
    End If
    
    arrFieldValues = Array(strHiddenInspID, strProject, strProductType, ToString(Meetings.isFormal), _
        strTriggerCR, ToString(Meetings.InspectionDate), CStr(Meetings.meetingsNumber), CStr(intInspectors), _
        ToString(dblTotalPrepTime), ToString(Meetings.InspectionTime), ToString(dblSize), strDisposition, strUnit, _
        Meetings.Location, ToString(isReinspection), strPath, CStr(intErrorsOperational), _
        CStr(intErrorsMinor), strAttendants, inspID, ToString(isFinal))
  
    strResult = FormatPostString(arrFieldNames, arrFieldValues)
    
    strResponse = Post2RhondaDB(strResult)
    
    If strResponse <> "" Then
        If Right(strResponse, 1) = Chr(10) Then
            strResponse = Left(strResponse, Len(strResponse) - 1)
        End If
    End If
    
    If isFinal And strResponse <> "" Then
        If GetField(sourceBook, "isClosed") <> "1" Or strResponse <> strHiddenInspID Then
            SetField sourceBook, "HiddenInspectionID", strResponse
            SetField sourceBook, "isClosed", 1
            sourceBook.Save
            MsgBox "Minutes Workbook has been changed and saved." & Chr(13) & _
                "Please update it on its main storage location!", vbExclamation
        End If
    ElseIf isFinal And strResponse = "" Then
        MsgBox "Unable to export data into RhondaDB!" & Chr(10) & _
            "Please address this issue to SQA Group", vbExclamation
    ElseIf isFinal = False And strResponse <> "" Then
        SetField sourceBook, "HiddenInspectionID", strResponse
    End If
    
End Sub ' GatherDataAndPost2RhondaDB
'--------------------------------------------------------------------------------------------------
' Function EncodeRole
' Encodes meeting role for RhondaDB:
' author = "A", moderator = "M", all other roles are treated as inspector = "I"
'--------------------------------------------------------------------------------------------------
Function EncodeRole(strRawRole As String) As String
    
    If strRawRole = "Author" Then
        EncodeRole = "A"
        Exit Function
    ElseIf InStr(strRawRole, "Moderator") > 0 Then
        EncodeRole = "M"
        Exit Function
    Else: EncodeRole = "I"
    End If

End Function

'--------------------------------------------------------------------------------------------------
' Function FormatPostString
' Creates single string variant from array of fields' names and array of fields' values
' for posting to RhondaDB
'--------------------------------------------------------------------------------------------------
Function FormatPostString(arrFieldName(), arrFieldValue()) As String
    Dim strResult As String
    Dim FieldName
    Dim i As Integer
    
    i = 0: strResult = ""
    For Each FieldName In arrFieldName
        If i = 0 Then
            strResult = CStr(FieldName) & "=" & CStr(arrFieldValue(i))
        Else
            strResult = strResult & "&" & CStr(FieldName) & "=" & CStr(arrFieldValue(i))
        End If
        i = i + 1
    Next
    
    FormatPostString = strResult
End Function ' FormatPostString
'--------------------------------------------------------------------------------------------------
' Function ToString
' Converts variants of different types into string for posting to RhondaDB
'--------------------------------------------------------------------------------------------------
Function ToString(ByVal theValue As Variant) As String

    If VarType(theValue) = vbBoolean Then
        ' converting boolean - true as "1", false as "0"
        If theValue Then
            ToString = "1"
        Else: ToString = "0"
        End If
        Exit Function
    ElseIf VarType(theValue) = vbDate Then
        ' converting date - "mm/dd/yyyy"
        ToString = Month(theValue) & "/" & Day(theValue) & "/" & Year(theValue)
        Exit Function
    ElseIf VarType(theValue) = vbInteger Then
        ' converting integer 0 = ""
        If theValue = 0 Then
            ToString = ""
        Else
            ToString = CStr(theValue)
        End If
    ElseIf VarType(theValue) = vbDouble Then
        theValue = Round(theValue, 2)
        ToString = Replace(CStr(theValue), ",", ".")
    End If

End Function ' ToString
'--------------------------------------------------------------------------------------------------
' Function GetMeetingsInfo
' Gathers inspection info from meetings data into variant of user defined type "MeetingsInfo"
'--------------------------------------------------------------------------------------------------
Function GetMeetingsInfo(atWorkbook As Workbook) As MeetingsInfo
    Dim RowIndex As Long
    Dim meetingNumber As Long
    Dim ColumnIndex As Long
    Dim DateFieldFound As Boolean
    Dim atWorksheet As Worksheet
    Dim Meeting As MeetingsInfo
    Dim dblMeetingsDutation As Double
    
    
    If atWorkbook.BuiltinDocumentProperties("Subject") = INSPECTOR_FORM_SUBJECT Then
        Set atWorksheet = atWorkbook.Worksheets(PIF_INVITATION_WORKSHEET_NAME)
    Else
        Set atWorksheet = atWorkbook.Worksheets(INSPECTION_WORKSHEET_NAME)
    End If
    
    meetingNumber = 0
    dblMeetingsDutation = 0
    RowIndex = atWorkbook.Names("MeetingStartPosition").RefersToRange.Row + 2
    
    Do
        DateFieldFound = False
        For ColumnIndex = 1 To MAX_COLUMNS_IN_MEETING
            If InStr(UCase(atWorksheet.Cells(RowIndex, ColumnIndex).Value), _
                     UCase(MEETING_DATE_CAPTION)) > 0 Then
                meetingNumber = meetingNumber + 1
                DateFieldFound = True
                
                If meetingNumber = 1 Then
                    Meeting.InspectionDate = CDate(GetField(atWorkbook, "MeetingDate" & meetingNumber))
                    If GetField(atWorkbook, "MeetingType" & meetingNumber) = "Mini Inspection" Then
                        Meeting.isFormal = False
                    Else: Meeting.isFormal = True
                    End If
                    Meeting.Location = GetField(atWorkbook, "MeetingLocation" & meetingNumber)
                End If
                
                dblMeetingsDutation = dblMeetingsDutation + _
                    GetHours(GetField(atWorkbook, "MeetingTimeTo" & meetingNumber), _
                    GetField(atWorkbook, "MeetingTimeFrom" & meetingNumber))
                
                Exit For
            End If
        Next ColumnIndex
        If DateFieldFound = False Then
            Exit Do
        End If
        RowIndex = RowIndex + 2
    Loop
    
    Meeting.meetingsNumber = meetingNumber
    Meeting.InspectionTime = dblMeetingsDutation
    
    GetMeetingsInfo = Meeting
    
End Function ' GetMeetingsInfo

'--------------------------------------------------------------------------------------------------
' Function GetHours
' Gets difference between two dates (actually they include only time) in hours as Double
' if start time is omitted (optional) than uses default (noon)
'--------------------------------------------------------------------------------------------------
Private Function GetHours(endDate As Date, Optional startDate As Date) As Double

    GetHours = Round(CDbl(DateDiff("n", startDate, endDate)) / 60, 2)

End Function
Attribute VB_Name = "Minutes"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------------------------------------------
' Class Module Name: Minutes
' Copyright (c) 2003, Rhonda Ltd
' Module Description:
' This module is designed to create and delete "Minutes Tools" toolbar
' Import and Get functions are implemented
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' A00.01.05     02/20/2003  Yuri Vashchenko     Imported from Minutes Template and
'                                               Rewritten to work as Excel Addin
'--------------------------------------------------------------------------------------------------
Option Explicit

Private WithEvents myWorkbooks As Excel.Application
Attribute myWorkbooks.VB_VarHelpID = -1
Private myObject As Minutes
'--------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------
Public Sub InitializeHandler()
    Set myWorkbooks = Excel.Application
    Set myObject = Me
End Sub

'--------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------
Private Sub myWorkbooks_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If Wb.BuiltinDocumentProperties("Subject") = MINUTES_SUBJECT Then
        Workbook_WindowActivate Wn
    End If
End Sub
'--------------------------------------------------------------------------------------------------
' WorkbookWindowActivate
' This sub automatically redraws and reassigns macros to
' corresponding buttons when the window is activated
'--------------------------------------------------------------------------------------------------
Private Sub Workbook_WindowActivate(ByVal Wn As Window)
    Dim IsFound As Boolean
    Dim IsAdvFound As Boolean
    Dim Bar As CommandBar
    Dim AdvBar As CommandBar
    Dim cb As CommandBar
        
    IsFound = False
    IsAdvFound = False
        
    For Each cb In Application.CommandBars
        If UCase$(cb.Name) = UCase$("Inspection Tools") Then
            IsFound = True
            Set Bar = cb
            If IsAdvFound And IsFound Then Exit For
        End If
        If UCase$(cb.Name) = UCase$("Advanced Inspection Tools") Then
            IsAdvFound = True
            Set AdvBar = cb
            If IsAdvFound And IsFound Then Exit For
        End If
    Next cb
    
    If Not IsFound Then ' create bar
        Set Bar = Application.CommandBars.Add(Name:="Inspection Tools", position:=msoBarTop, _
                                              Temporary:=True)
    End If
    If Not IsAdvFound Then
        Set AdvBar = Application.CommandBars.Add(Name:="Advanced Inspection Tools", position:=msoBarPopup, _
                                              Temporary:=True)
    End If
    
    Bar.Visible = True
    
    CreateButton Bar, "Gather Minutes", "GatherMinutes", 303
    CreateButton Bar, "Process Minutes", "ProcessMinutes.ProcessMinutes", 187
    CreateButton Bar, "S|fffd|nd Minutes", "GenerateMailMessage", 363
    CreateButton Bar, "Close Inspection", "CloseInspection", 225
    CreateButton Bar, "More Functions", "ShowAdvanced", 29
    
    CreateButton AdvBar, "Renumber Issues", "Renumber", 210
    CreateButton AdvBar, "Sort By Author", "SortIssuesByAuthor", 356
    CreateButton AdvBar, "Sort By Location", "SortIssuesByLocation", 315
    CreateButton AdvBar, "Open Document", "OpenDocument", 23
    CreateButton AdvBar, "Update People", "UpdatePeople", 362
    CreateButton AdvBar, "Update Projects", "UpdateProjects", 229
    CreateButton AdvBar, "Add Meeting", "AddMeeting", 1098
    CreateButton AdvBar, "Delete Meeting", "DeleteMeeting", 1657
    CreateButton AdvBar, "Import Minutes to VOB", "ImportMinutes", 271
    
End Sub

'--------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------
Private Sub myWorkbooks_WorkbookBeforeSave(ByVal Wb As Workbook, ByVal SaveAsUI As Boolean, Cancel As Boolean)
    If Wb.BuiltinDocumentProperties("Subject") = MINUTES_SUBJECT Then
        If ProcessMinutes.CheckIfReady4Closure(Wb) = False Then
            Cancel = True
        End If
    End If
End Sub

Attribute VB_Name = "ProcessMinutes"
Option Explicit
'--------------------------------------------------------------------------------------------------
' Module Name: ProcessMinutes
' Copyright (c) 2001-2003, Rhonda Ltd
' Module Description:
' This module is designed to Gather total minutes from inspector forms
' and to process them.
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' D00.00.20     06/04/2002  Yuri Vashchenko     Initial Creation
' D00.00.26     08/13/2002  Yuri Vashchenko     Updated Effectiveness per MOTrh03888
' D00.00.33     09/20/2002  Yuri Vashchenko     Updated Effectiveness per MOTrh04020
' D00.00.34     11/18/2002  Yuri Vashchenko     Updated per MOTrh04209 (Added TriggerCR)
' D00.00.35     11/22/2002  Yuri Vashchenko     Updated per MOTrh04289 (FreezeNumbers)
' D00.00.36     11/26/2002  Yuri Vashchenko     Updated per MOTrh04304 (Check build number of IF)
' D00.00.37     11/27/2002  Yuri Vashchenko     Verifier, Est. Rework and Compl. date
'                                               are no more required fields
' A00.01.00     01/23/2003  Yuri Vashchenko     Add support for ODC fields (MOTrh04484)
'               03/26/2003  Yuri Vashchenko     Fixed bugs: 1. Trying to update protected sheet
'                                                   when generating minutes
'                                                           2. Formulas break when no accepted
'                                                   issues exist
' A00.02.01     07/09/2003  Yuri Vashchenko     Fixed bugs: 1. Sort by Author Macro
'                                                           2.
'                                               Added: 1. multy-meeting support
'                                                      2. LIBdd support
'--------------------------------------------------------------------------------------------------

'--------------------------------------------------------------------------------------------------
' Global variables

'--------------------------------------------------------------------------------------------------
' constants

Private Const OPERATIONAL_SEVERITY_WEIGHT = 16
Private Const MINOR_SEVERITY_WEIGHT = 4
Private Const INVESTIGATE_SEVERITY_WEIGHT = 8
Private Const REJECT_SEVERITY_WEIGHT = 1

Private Const PROCESS_PIF = 1
Private Const DO_NOT_PROCESS_PIF = 2
Private Const CANCEL_PIF_PROCESSING = 3
'--------------------------------------------------------------------------------------------------
' IsClean
' This function checks if fields on specified workbook is empty.
' The function returns True if fields are empty, otherwise it returns False
'--------------------------------------------------------------------------------------------------
Function IsClean(theWorkbook As Workbook) As Boolean
    Dim Meeting As Long
    Dim TotalMeetings As Long
    Dim s As String
    
    IsClean = True
    
    On Error Resume Next
    
    ' Trying to access "MeetingDate1" field
    s = CStr(theWorkbook.Names("MeetingDate1").RefersToRange.Value)
    
    If Err <> 0 Then
        ' There is no "MeetingDate1" field
        Err.Clear
        If GetField(theWorkbook, "PlannedDate") <> "" Then
            IsClean = False
        ElseIf GetField(theWorkbook, "PlannedTimeFrom") <> "" Then
            IsClean = False
        ElseIf GetField(theWorkbook, "Location") <> "" Then
            IsClean = False
        End If
    Else
        TotalMeetings = NumberOfMeetings(theWorkbook)
        
        For Meeting = 1 To TotalMeetings
            s = CStr(Meeting)
            If GetField(theWorkbook, "MeetingDate" + s) <> "" Then
                IsClean = False
            ElseIf GetField(theWorkbook, "MeetingTimeFrom" + s) <> "" Then
                IsClean = False
            ElseIf GetField(theWorkbook, "MeetingLocation" + s) <> "" Then
                IsClean = False
            End If
        Next
    End If
    
    On Error GoTo 0
    
    If IsClean = False Then
        Exit Function
    End If
    
    If GetField(theWorkbook, "Reinspection") <> "" Then
        IsClean = False
    ElseIf GetField(theWorkbook, "PCR") <> "" Then
        IsClean = False
    ElseIf GetField(theWorkbook, "Title") <> "" Then
        IsClean = False
    ElseIf GetField(theWorkbook, "Type") <> "" Then
        IsClean = False
    ElseIf GetField(theWorkbook, "Size") <> "" Then
        IsClean = False
    ElseIf GetField(theWorkbook, "Path") <> "" Then
        IsClean = False
    End If
End Function ' IsClean
'--------------------------------------------------------------------------------------------------
' CorrectLinks
' This sub corrects hyperlinks to original issues
'--------------------------------------------------------------------------------------------------
Private Sub CorrectLinks(MinutesWorkbook As Workbook)
    Dim mIssues As Worksheet
    Dim pIssues As Worksheet
    Dim aRow As Long
    Dim AuthorColumnNumber As Long
    Dim PIFSeverityColumnNumber As Long
    Dim SeverityColumnNumber As Long
    Dim OffsetDescriptionSeverity As Long
    Dim IssueAtWorksheetFromPIF As Range
    Dim IssueAddress As String
    Dim WorksheetName As String
    
    Set mIssues = MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME)
    
    aRow = FindFirstIssue(mIssues)
    
    AuthorColumnNumber = GetColumnNumber(mIssues, AUTHOR_CAPTION)
    SeverityColumnNumber = GetColumnNumber(mIssues, SEVERITY_CAPTION)
    
    ' Update each hyperlink
    While Not TheLast(mIssues, aRow)
        If (AuthorColumnNumber > 0) Then
            If mIssues.Cells(aRow, AuthorColumnNumber).Hyperlinks.Count > 0 Then
                IssueAddress = mIssues.Cells(aRow, AuthorColumnNumber).Hyperlinks(1).SubAddress
                If mIssues.Cells(aRow, AuthorColumnNumber).Hyperlinks.Count > 0 Then
                    WorksheetName = Replace(Left(IssueAddress, InStr(IssueAddress, "!") - 1), "'", "")
                    Set pIssues = MinutesWorkbook.Worksheets(WorksheetName)
                    With pIssues
                        Set IssueAtWorksheetFromPIF = .Range(IssueAddress)
                    End With
                    
                    PIFSeverityColumnNumber = GetColumnNumber(IssueAtWorksheetFromPIF.Worksheet, _
                                                              SEVERITY_CAPTION)
                    
                    If PIFSeverityColumnNumber > 0 Then
                        OffsetDescriptionSeverity = PIFSeverityColumnNumber - _
                         GetColumnNumber(IssueAtWorksheetFromPIF.Worksheet, DESCRIPTION_CAPTION)
                    Else
                        OffsetDescriptionSeverity = 0
                    End If
                    If OffsetDescriptionSeverity > 0 Then
                        With pIssues
                            If .ProtectContents = True Then
                                .Unprotect
                            End If
                        End With
                        With IssueAtWorksheetFromPIF.Offset(0, OffsetDescriptionSeverity)
                            .NumberFormat = "0;;"
                            .ClearContents
                            If (PIFSeverityColumnNumber > 0) And _
                               (OffsetDescriptionSeverity > 0) Then
                                .Formula = "='Issues'!" & mIssues.Cells(aRow, SeverityColumnNumber). _
                                    Address & ""
                            End If
                        End With
                    End If
                End If
            End If
        End If
        aRow = aRow + 1
    Wend
End Sub ' CorrectLinks
'--------------------------------------------------------------------------------------------------
' Perpare
' Intermediate sub
'--------------------------------------------------------------------------------------------------
Private Sub Prepare(MinutesWorkbook As Workbook)
    Dim mIssues As Worksheet
    Dim i As Long
    
    Set mIssues = MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME)
    i = FindFirstIssue(mIssues)
    While Not TheLast(mIssues, i)
        i = i + 1
    Wend
    
    SetNames MinutesWorkbook, i
End Sub ' Perpare
'--------------------------------------------------------------------------------------------------
' SortByLocation
' This sub sorts all lines on "issues" worksheet by Page and Section
'--------------------------------------------------------------------------------------------------
Sub SortByLocation(MinutesWorkbook As Workbook)
    Dim issues As Range
    
    Set issues = MinutesWorkbook.Names("AllIssues").RefersToRange
    
    ' If there are more than 1 line to sort sort it
    If issues.Rows.Count > 1 Then
        If UCase(GetField(MinutesWorkbook, "Type")) = "CODE" Then
            issues.Sort _
                Key1:=MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME).Range("C5"), _
                Key2:=MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME).Range("B5")
        Else
            issues.Sort _
                Key1:=MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME).Range("B5"), _
                Key2:=MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME).Range("C5")
        End If
    End If
    
    ' Calling CorrectLinks to correct links
    CorrectLinks MinutesWorkbook
    
    ' Calling RenumberMinutes to renumber issues and redraw borders
    RenumberMinutes MinutesWorkbook
End Sub ' SortIssuesByLocation
'--------------------------------------------------------------------------------------------------
' SortIssuesByLocation
' This sub sorts all lines on "issues" worksheet by Page and Section
'--------------------------------------------------------------------------------------------------
Sub SortIssuesByLocation()
    Dim MinutesWorkbook As Workbook
    
    Set MinutesWorkbook = FindWorkbook(FIND_MINUTES)
    
    If MinutesWorkbook Is Nothing Then
        Exit Sub
    End If
    
    Prepare MinutesWorkbook
    
    SortByLocation MinutesWorkbook
End Sub
'--------------------------------------------------------------------------------------------------
' SortIssuesByAuthor
' This sub sorts all lines on "issues" worksheet by Author
'--------------------------------------------------------------------------------------------------
Sub SortIssuesByAuthor()
    Dim FaultsRange As Range
    Dim MinutesWorkbook As Workbook
    Dim FaultsWorksheet As Worksheet
    Dim AuthorColumn As Long
    
    Set MinutesWorkbook = FindWorkbook(FIND_MINUTES)
    
    If MinutesWorkbook Is Nothing Then
        Exit Sub
    End If
    
    Set FaultsWorksheet = MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME)
    AuthorColumn = GetColumnNumber(FaultsWorksheet, AUTHOR_CAPTION)
    
    If AuthorColumn > 0 Then
        
        ' Make sure current workbook is correct and the names are set correctly
        Prepare MinutesWorkbook
        
        Set FaultsRange = MinutesWorkbook.Names("AllIssues").RefersToRange
        
        ' If there are more than 1 line to sort sort it
        If FaultsRange.Rows.Count > 1 Then
            FaultsRange.Sort _
                Key1:=FaultsWorksheet.Cells(FindFirstIssue(FaultsWorksheet), AuthorColumn), _
                Key2:="", _
                Key3:=""
        End If
        
        ' Calling CorrectLinks to correct links
        CorrectLinks MinutesWorkbook
        
        ' Calling RenumberMinutes to renumber issues and redraw borders
        RenumberMinutes MinutesWorkbook
    End If
End Sub ' SortIssuesByAuthor
'--------------------------------------------------------------------------------------------------
' Sub RenumberMinutes
' This sub renumbers issues and redraws borders
' It also corrects styles of cells
' This sub also sets CurrentRow global variable to the last non empty row
'--------------------------------------------------------------------------------------------------
Sub RenumberMinutes(MinutesWorkbook As Workbook)
    Dim issuesWorksheet As Worksheet
    Dim ResolvedStatusColumnNumber As Long
    Dim StateColumnNumber As Long
    Dim CurrentRow As Long
    
    ' If any error display error message
    On Error Resume Next
    
    ' Trying to access ISSUES_WORKSHEET_NAME worksheet
    Set issuesWorksheet = MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME)
    
    CurrentRow = FindFirstIssue(issuesWorksheet)
    
    If Err <> 0 Then
        MsgBox ("Cannot access 'Issues' worksheet")
        Err.Clear
        Exit Sub
    End If
    
    ResolvedStatusColumnNumber = GetColumnNumber(issuesWorksheet, RESOLVED_STATUS_CAPTION)
    StateColumnNumber = GetColumnNumber(issuesWorksheet, STATE_CAPTION)
    
    ' Stop on errors
    On Error GoTo 0
    
    ' Renumbering first row - setting formula and number format
    If Not TheLast(issuesWorksheet, CurrentRow) Then
        issuesWorksheet.Cells(CurrentRow, 1).Formula = "=A4+1"
        issuesWorksheet.Cells(CurrentRow, 1).NumberFormat = "000"
    Else
        SetNames MinutesWorkbook, CurrentRow
        Exit Sub
    End If
    
    CurrentRow = CurrentRow + 1
    
    ' Renumbering remaiming rows - setting formula and number format
    While Not TheLast(issuesWorksheet, CurrentRow)
        ' Formula will be "=<address of previous row> + 1"
        issuesWorksheet.Cells(CurrentRow, 1).Formula = _
            "=" & issuesWorksheet.Cells(CurrentRow - 1, 1).Address(False, False) & "+1"
        issuesWorksheet.Cells(CurrentRow, 1).NumberFormat = "000"
        CurrentRow = CurrentRow + 1
    Wend
    
    ' Calling FormatIssues to redraw borders
    FormatIssues MinutesWorkbook, CurrentRow
    
    ' Calling SetNames to redefine Names to new range
    SetNames MinutesWorkbook, CurrentRow
End Sub ' RenumberMinutes
'--------------------------------------------------------------------------------------------------
' Sub CleanupMinutes
' This sub clears all fields, clears list of issues and removes
' any added worksheets
'--------------------------------------------------------------------------------------------------
Sub CleanupMinutes(MinutesWorkbook As Workbook)
    Dim Ws As Worksheet
    Dim issuesWorksheet As Worksheet
    Dim TotalMeetings As Long
    Dim s As String
    
    ' Trying to remove extra worksheets
    If MinutesWorkbook.Worksheets.Count > 4 Then
        Application.DisplayAlerts = False
        For Each Ws In MinutesWorkbook.Worksheets
            If Ws.Name <> INSPECTION_WORKSHEET_NAME And _
                Ws.Name <> ISSUES_WORKSHEET_NAME And _
                Ws.Name <> "Help" And _
                Ws.Name <> "Data" Then
                Ws.Delete
            End If
        Next Ws
        Application.DisplayAlerts = True
    End If
    
    Set issuesWorksheet = MinutesWorkbook.Worksheets(INSPECTION_WORKSHEET_NAME)
    
    Prepare MinutesWorkbook
    
    issuesWorksheet.Unprotect
    
    ' Clearing Issues Worksheet Fields
    ClearField MinutesWorkbook, "AllIssues"
    
    On Error Resume Next
    
    ' Clearing Inspection Worksheet Fields
    ' Clearing Inspection Section Fields
    ' Trying to access "MeetingDate1" field
    s = CStr(MinutesWorkbook.Names("MeetingDate1").RefersToRange.Value)
    
    If Err <> 0 Then
        ' There is no "MeetingDate1" field
        Err.Clear
        ClearField MinutesWorkbook, "PlannedDate"
        ClearField MinutesWorkbook, "PlannedTimeFrom"
        ClearField MinutesWorkbook, "PlannedTimeTo"
        ClearField MinutesWorkbook, "ActualDate"
        ClearField MinutesWorkbook, "ActualTimeFrom"
        ClearField MinutesWorkbook, "ActualTimeTo"
        ClearField MinutesWorkbook, "Location"
    Else
        ' This form is multy-meeting supported form. Deleting all meetings except the last
        Do
            TotalMeetings = NumberOfMeetings(MinutesWorkbook)
            
            If TotalMeetings = 1 Then
                Exit Do
            End If
            
            ActivateField MinutesWorkbook, "MeetingDate1"
            DeleteMeeting
        Loop
        ' and clearing fields in this meeting
        ClearField MinutesWorkbook, "MeetingDate1"
        ClearField MinutesWorkbook, "MeetingTimeFrom1"
        ClearField MinutesWorkbook, "MeetingTimeTo1"
        ClearField MinutesWorkbook, "MeetingLocation1"
        ClearField MinutesWorkbook, "MeetingType1"
    End If
    
    On Error GoTo 0
    
    ' Clearing Inspection Section Fields
    ClearField MinutesWorkbook, "Reinspection"
    ClearField MinutesWorkbook, "PCR"
    ClearField MinutesWorkbook, "TriggerCR"
    ClearField MinutesWorkbook, "Clearcase"
    
    ' Clearing Work Product Section Fields
    ClearField MinutesWorkbook, "Project"
    ClearField MinutesWorkbook, "Title"
    ClearField MinutesWorkbook, "Type"
    ClearField MinutesWorkbook, "Part"
    ClearField MinutesWorkbook, "Version"
    ClearField MinutesWorkbook, "Date"
    ClearField MinutesWorkbook, "Size"
    ClearField MinutesWorkbook, "Path"
    
    ' Clearing Attendants Section Fields
    ClearField MinutesWorkbook, "Participants"
    ClearField MinutesWorkbook, "PrepTimes"
    ClearField MinutesWorkbook, "Effectivenesses"
    ClearField MinutesWorkbook, "Participation"
    
    ' Clearing Summary Fields
    ClearField MinutesWorkbook, "VerifierIs"
    ClearField MinutesWorkbook, "CompletionDate"
        
    ' Removing Borders
    MinutesWorkbook.Names("AllIssues").RefersToRange.Borders.LineStyle = xlNone
    
    ' Calling SetNames to redefine Names
    SetNames MinutesWorkbook, FindFirstIssue(MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME))
        
End Sub ' CleanupMinutes
'--------------------------------------------------------------------------------------------------
' Function CheckInspectionData
' This function returns "" if values of fields in two given workbooks
' are identical (inspection data only)
' otherwise it returns name of the field where difference was discovered
' input parameters:
' p, m - worksheets to compare
' NOTE:
'    firstWorkbookMeetings = 0 or
'    secondWorkbookMeetings = 0 means that corresponding workbook doesn't support multy-meeting
'--------------------------------------------------------------------------------------------------
Private Function CheckInspectionData(firstWorkbook As Workbook, secondWorkbook As Workbook) As String
    Dim firstWorkbookMeetings As Long
    Dim secondWorkbookMeetings As Long
    Dim Meeting As Long
    Dim s As String
    
    On Error Resume Next
    
    ' Trying to access "MeetingDate1" field
    s = CStr(firstWorkbook.Names("MeetingDate1").RefersToRange.Value)
    
    If Err <> 0 Then
        ' There is no "MeetingDate1" field
        Err.Clear
        firstWorkbookMeetings = 0
    Else
        firstWorkbookMeetings = NumberOfMeetings(firstWorkbook)
    End If
    
    ' Trying to access "MeetingDate1" field
    s = CStr(secondWorkbook.Names("MeetingDate1").RefersToRange.Value)
    
    If Err <> 0 Then
        ' There is no "MeetingDate1" field
        Err.Clear
        secondWorkbookMeetings = 0
    Else
        secondWorkbookMeetings = NumberOfMeetings(secondWorkbook)
    End If
    
    CheckInspectionData = ""
    
    ' Comparing "PlannedDate" fields
    If (firstWorkbookMeetings = 0) And (secondWorkbookMeetings = 0) Then
        ' Comparing "PlannedDate" fields
        If GetField(firstWorkbook, "PlannedDate") <> GetField(secondWorkbook, "PlannedDate") Then
            CheckInspectionData = "Planned Date"
            Exit Function
        End If
        
        ' Comparing "PlannedTimeFrom" fields
        If GetField(firstWorkbook, "PlannedTimeFrom") <> _
           GetField(secondWorkbook, "PlannedTimeFrom") Then
            CheckInspectionData = "Planned Time From"
            Exit Function
        End If
        
        ' Comparing "PlannedTimeTo" fields
        If GetField(firstWorkbook, "PlannedTimeTo") <> _
           GetField(secondWorkbook, "PlannedTimeTo") Then
            CheckInspectionData = "Planned Time To"
            Exit Function
        End If
        
        ' Comparing "Location" fields
        If GetField(firstWorkbook, "Location") <> GetField(secondWorkbook, "Location") Then
            CheckInspectionData = "Location"
            Exit Function
        End If
    ElseIf (firstWorkbookMeetings = 0) And (secondWorkbookMeetings > 0) Then
        ' Comparing "PlannedDate" fields
        If GetField(firstWorkbook, "PlannedDate") <> GetField(secondWorkbook, "MeetingDate1") Then
            CheckInspectionData = "Meeting Date 1"
            Exit Function
        End If
        
        ' Comparing "PlannedTimeFrom" fields
        If GetField(firstWorkbook, "PlannedTimeFrom") <> _
           GetField(secondWorkbook, "MeetingTimeFrom1") Then
            CheckInspectionData = "Meeting Time From 1"
            Exit Function
        End If
        
        ' Comparing "PlannedTimeTo" fields
        If GetField(firstWorkbook, "PlannedTimeTo") <> _
           GetField(secondWorkbook, "MeetingTimeTo1") Then
            CheckInspectionData = "Meeting Time To 1"
            Exit Function
        End If
        
        ' Comparing "Location" fields
        If GetField(firstWorkbook, "Location") <> GetField(secondWorkbook, "MeetingLocation1") Then
            CheckInspectionData = "Meeting Location 1"
            Exit Function
        End If
    ElseIf (firstWorkbookMeetings > 0) And (secondWorkbookMeetings = 0) Then
        ' Comparing "PlannedDate" fields
        If GetField(firstWorkbook, "MeetingDate1") <> GetField(secondWorkbook, "PlannedDate") Then
            CheckInspectionData = "Meeting Date 1"
            Exit Function
        End If
        
        ' Comparing "PlannedTimeFrom" fields
        If GetField(firstWorkbook, "MeetingTimeFrom1") <> _
           GetField(secondWorkbook, "PlannedTimeFrom") Then
            CheckInspectionData = "Meeting Time From 1"
            Exit Function
        End If
        
        ' Comparing "PlannedTimeTo" fields
        If GetField(firstWorkbook, "MeetingTimeTo1") <> _
           GetField(secondWorkbook, "PlannedTimeTo") Then
            CheckInspectionData = "Meeting Time To 1"
            Exit Function
        End If
        
        ' Comparing "Location" fields
        If GetField(firstWorkbook, "MeetingLocation1") <> GetField(secondWorkbook, "Location") Then
            CheckInspectionData = "Meeting Location 1"
            Exit Function
        End If
    Else
        For Meeting = 1 To WorksheetFunction.min(firstWorkbookMeetings, secondWorkbookMeetings)
            s = CStr(Meeting)
            
            ' Comparing "MeetingDate(i)" fields
            If GetField(firstWorkbook, "MeetingDate" + s) <> _
               GetField(secondWorkbook, "MeetingDate" + s) Then
                CheckInspectionData = "Meeting Date " + s
                Exit Function
            End If
            
            ' Comparing "MeetingTimeFrom(i)" fields
            If GetField(firstWorkbook, "MeetingTimeFrom" + s) <> _
               GetField(secondWorkbook, "MeetingTimeFrom" + s) Then
                CheckInspectionData = "Meeting Time From " + s
                Exit Function
            End If
            
            ' Comparing "MeetingTimeTo(i)" fields
            If GetField(firstWorkbook, "MeetingTimeTo" + s) <> _
               GetField(secondWorkbook, "MeetingTimeTo" + s) Then
                CheckInspectionData = "Meeting Time To" + s
                Exit Function
            End If
            
            ' Comparing "MeetingLocation(i)" fields
            If GetField(firstWorkbook, "MeetingLocation" + s) <> _
               GetField(secondWorkbook, "MeetingLocation" + s) Then
                CheckInspectionData = "Meeting Location " + s
                Exit Function
            End If
            
            ' Comparing "MeetingType(i)" fields
            If GetField(firstWorkbook, "MeetingType" + s) <> _
               GetField(secondWorkbook, "MeetingType" + s) Then
                CheckInspectionData = "Meeting Type " + s
                Exit Function
            End If
        Next Meeting
    End If
    
    ' Comparing "Reinspection" fields
    If GetField(firstWorkbook, "Reinspection") <> GetField(secondWorkbook, "Reinspection") Then
        CheckInspectionData = "Reinspection"
        Exit Function
    End If
    
    ' Comparing "PCR" fields
    If GetField(firstWorkbook, "PCR") <> GetField(secondWorkbook, "PCR") Then
        CheckInspectionData = "DISSECT ID"
        Exit Function
    End If
    
    ' Comparing "TriggerCR" fields
    If GetField(firstWorkbook, "TriggerCR") <> GetField(secondWorkbook, "TriggerCR") Then
        CheckInspectionData = "TriggerCR"
        Exit Function
    End If
    
    ' Comparing "Clearcase" fields
    If GetField(firstWorkbook, "Clearcase") <> GetField(secondWorkbook, "Clearcase") Then
        CheckInspectionData = "Config Spec"
        Exit Function
    End If
End Function ' CheckInspectionData
'--------------------------------------------------------------------------------------------------
' Function CheckWorkProduct
' This function returns "" if values of fields in two given worksheets
' are identical (work product data only)
' otherwise it returns name of the field where difference was discovered
' input parameters:
' p, m - worksheets to compare
'--------------------------------------------------------------------------------------------------
Private Function CheckWorkProduct(firstWorkbook As Workbook, secondWorkbook As Workbook) As String
    CheckWorkProduct = ""
    
    On Error Resume Next
    
    ' Comparing "Project" fields
    If GetField(firstWorkbook, "Project") <> GetField(secondWorkbook, "Project") Then
        CheckWorkProduct = "Project"
        Exit Function
    End If
    
    ' Comparing "Title" fields
    If GetField(firstWorkbook, "Title") <> GetField(secondWorkbook, "Title") Then
        CheckWorkProduct = "Title"
        Exit Function
    End If
    
    ' Comparing "Type" fields
    If GetField(firstWorkbook, "Type") <> GetField(secondWorkbook, "Type") Then
        CheckWorkProduct = "Type"
        Exit Function
    End If
    
    ' Comparing "Part" fields
    If GetField(firstWorkbook, "Part") <> GetField(secondWorkbook, "Part") Then
        CheckWorkProduct = "Part"
        Exit Function
    End If
    
    ' Comparing "Version" fields
    If GetField(firstWorkbook, "Version") <> GetField(secondWorkbook, "Version") Then
        CheckWorkProduct = "Version"
        Exit Function
    End If
    
    ' Comparing "Date" fields
    If GetField(firstWorkbook, "Date") <> GetField(secondWorkbook, "Date") Then
        CheckWorkProduct = "Date"
        Exit Function
    End If
    
    ' Comparing "Size" fields
    If GetField(firstWorkbook, "Size") <> GetField(secondWorkbook, "Size") Then
        CheckWorkProduct = "Size"
        Exit Function
    End If
    
    ' Comparing "Path" fields
    If GetField(firstWorkbook, "Path") <> GetField(secondWorkbook, "Path") Then
        CheckWorkProduct = "Path"
        Exit Function
    End If
End Function ' CheckCheckWorkProduct
'--------------------------------------------------------------------------------------------------
' Function CheckAttendants
' This function returns "" if values of fields in two given worksbooks
' are identical (attendants data only)
' otherwise it returns name of the field where difference was discovered
' input parameters:
' firstWorkbook, secondWorkbook - workbooks to compare
'--------------------------------------------------------------------------------------------------
Private Function CheckAttendants(firstWorkbook As Workbook, secondWorkbook As Workbook) As Boolean
    Dim tempString As String
    Dim index As Integer
    
    CheckAttendants = True
    
    ' For each possible inspector
    For index = 1 To MAX_ATTENDANTS
        ' Checking inspector's name
        tempString = "InspectorName" & Trim(str(index))
        If GetField(firstWorkbook, tempString) <> GetField(secondWorkbook, tempString) Then
            CheckAttendants = False
            Exit Function
        End If
        
        ' Checking inspector's meeting role
        tempString = "Inspector" & Trim(str(index)) & "MeetingRole"
        If GetField(firstWorkbook, tempString) <> GetField(secondWorkbook, tempString) Then
            CheckAttendants = False
            Exit Function
        End If
        
        ' Checking inspector's project role
        tempString = "Inspector" & Trim(str(index)) & "ProjectRole"
        If GetField(firstWorkbook, tempString) <> GetField(secondWorkbook, tempString) Then
            CheckAttendants = False
            Exit Function
        End If
    Next index
End Function ' CheckAttendants
'--------------------------------------------------------------------------------------------------
' Function CheckPIFBeforProcessing
' This function checks PIFWorkbook to ensure that it is
' correct PIF (for this inspection) and returns PROCESS_PIF if everything is ok
' otherwise it returns DO_NOT_PROCESS_PIF or CANCEL_PIF_PROCESSING
'--------------------------------------------------------------------------------------------------
Private Function CheckPIFBeforProcessing(PIFWorkbook As Workbook, MinutesWorkbook As Workbook) _
                 As Long
    Dim PIFInvitationWorksheet As Worksheet
    Dim MinutesInspectionWorksheet As Worksheet
    Dim tempString As String
    Dim result As Long
    
    ' Initilazing result
    CheckPIFBeforProcessing = PROCESS_PIF
    
    ' Checking that current window is PIF
    If PIFWorkbook.BuiltinDocumentProperties("Subject") <> INSPECTOR_FORM_SUBJECT Then
        ' If not - return False
        CheckPIFBeforProcessing = DO_NOT_PROCESS_PIF
        Exit Function
    End If
    
    Set PIFInvitationWorksheet = PIFWorkbook.Worksheets(PIF_INVITATION_WORKSHEET_NAME)
    Set MinutesInspectionWorksheet = MinutesWorkbook.Worksheets(INSPECTION_WORKSHEET_NAME)
    
    ' Checking that inspector name is not empty
    If GetField(PIFWorkbook, "InspectorName") = "" Then
        ' If it is empry - show error message
        MsgBox ("Inspector Form with Unspecified Inspector Name detected and skipped" & Chr(13) & "Name: " & PIFWorkbook.Name)
        
        ' and Positioning focus to empty cell for user could correct it
        ActivateField PIFWorkbook, "InspectorName"
        
        ' return false
        CheckPIFBeforProcessing = DO_NOT_PROCESS_PIF
        Exit Function
    End If
    
    ' if it is not the first PIF to process
    If Not IsClean(MinutesWorkbook) Then
        
        ' Comparing inspection data
        tempString = CheckInspectionData(PIFWorkbook, MinutesWorkbook)
        If tempString <> "" Then
            ' If it is not equal - show error message and return false
            result = MsgBox("PIF for other Inspection, '" + tempString + "' field detected!" + _
                             Chr(13) + "Name: " + PIFWorkbook.Name + _
                             "Do you want to process this PIF?", vbYesNoCancel)
            Select Case result
                Case vbYes
                    CheckPIFBeforProcessing = PROCESS_PIF
                Case vbNo
                    CheckPIFBeforProcessing = DO_NOT_PROCESS_PIF
                Case Else
                    CheckPIFBeforProcessing = CANCEL_PIF_PROCESSING
            End Select
            Exit Function
        End If
        
        ' Comparing work product data
        tempString = CheckWorkProduct(PIFWorkbook, MinutesWorkbook)
        If tempString <> "" Then
            ' If it is not equal - show error message and return false
            result = MsgBox("PIF for other Inspection, '" + tempString + "' field detected!" + _
                             Chr(13) + "Name: " + PIFWorkbook.Name + _
                             "Do you want to process this PIF?", vbYesNoCancel)
            Select Case result
                Case vbYes
                    CheckPIFBeforProcessing = PROCESS_PIF
                Case vbNo
                    CheckPIFBeforProcessing = DO_NOT_PROCESS_PIF
                Case Else
                    CheckPIFBeforProcessing = CANCEL_PIF_PROCESSING
            End Select
            Exit Function
        End If
    End If
End Function ' CheckPIFBeforProcessing
'--------------------------------------------------------------------------------------------------
' Function FillNames
' This function fills all fields in minutes title page with values
' taken from PIF
' NOTE:
'    fromWorkbookMeetings = 0 or
'    toWorkbookMeetings = 0 means that corresponding workbook doesn't support multy-meeting
'--------------------------------------------------------------------------------------------------
Private Function FillNames(fromWorkbook As Workbook, toWorkbook As Workbook) As Boolean
    Dim MinutesInspectionWorksheet As Worksheet
    Dim fromWorkbookMeetings As Long
    Dim toWorkbookMeetings As Long
    Dim Meeting As Long
    Dim s As String
    
    Set MinutesInspectionWorksheet = toWorkbook.Worksheets(INSPECTION_WORKSHEET_NAME)
    
    On Error Resume Next
    
    ' Trying to access "MeetingDate1" field
    s = CStr(fromWorkbook.Names("MeetingDate1").RefersToRange.Value)
    
    If Err <> 0 Then
        ' There is no "MeetingDate1" field
        Err.Clear
        fromWorkbookMeetings = 0
    Else
        fromWorkbookMeetings = NumberOfMeetings(fromWorkbook)
    End If
    
    ' Trying to access "MeetingDate1" field
    s = CStr(toWorkbook.Names("MeetingDate1").RefersToRange.Value)
    
    If Err <> 0 Then
        ' There is no "MeetingDate1" field
        Err.Clear
        toWorkbookMeetings = 0
    Else
        toWorkbookMeetings = NumberOfMeetings(toWorkbook)
    End If
    
    FillNames = True
    
    ' If name are filled do nothing
    If IsClean(toWorkbook) Then
        ' Copy all fields from PIF to Minutes
        If (fromWorkbookMeetings = 0) And (toWorkbookMeetings = 0) Then
            CopyRange fromWorkbook.Names("PlannedDate").RefersToRange, _
                      toWorkbook.Names("PlannedDate").RefersToRange
                      
            CopyRange fromWorkbook.Names("PlannedTimeFrom").RefersToRange, _
                      toWorkbook.Names("PlannedTimeFrom").RefersToRange
                      
            CopyRange fromWorkbook.Names("PlannedTimeTo").RefersToRange, _
                      toWorkbook.Names("PlannedTimeTo").RefersToRange
                      
            CopyRange fromWorkbook.Names("Location").RefersToRange, _
                      toWorkbook.Names("Location").RefersToRange
        ElseIf (fromWorkbookMeetings = 0) And (toWorkbookMeetings > 0) Then
            CopyRange fromWorkbook.Names("PlannedDate").RefersToRange, _
                      toWorkbook.Names("MeetingDate1").RefersToRange
                      
            CopyRange fromWorkbook.Names("PlannedTimeFrom").RefersToRange, _
                      toWorkbook.Names("MeetingTimeFrom1").RefersToRange
                      
            CopyRange fromWorkbook.Names("PlannedTimeTo").RefersToRange, _
                      toWorkbook.Names("MeetingTimeTo1").RefersToRange
                      
            CopyRange fromWorkbook.Names("Location").RefersToRange, _
                      toWorkbook.Names("MeetingLocation1").RefersToRange
                      
            ' Copying total planned time field - it is not a formula any more
            MinutesInspectionWorksheet.Unprotect
            CopyRange fromWorkbook.Names("TotalTimePlanned").RefersToRange, _
                      toWorkbook.Names("TotalTimePlanned").RefersToRange
            MinutesInspectionWorksheet.Protect
        ElseIf (fromWorkbookMeetings > 0) And (toWorkbookMeetings = 0) Then
            CopyRange fromWorkbook.Names("MeetingDate1").RefersToRange, _
                      toWorkbook.Names("PlannedDate").RefersToRange
                      
            CopyRange fromWorkbook.Names("MeetingTimeFrom1").RefersToRange, _
                      toWorkbook.Names("PlannedTimeFrom").RefersToRange
                      
            CopyRange fromWorkbook.Names("MeetingTimeTo1").RefersToRange, _
                      toWorkbook.Names("PlannedTimeTo").RefersToRange
                      
            CopyRange fromWorkbook.Names("MeetingLocation1").RefersToRange, _
                      toWorkbook.Names("Location").RefersToRange
        Else
            Do
                toWorkbookMeetings = NumberOfMeetings(toWorkbook)
                If toWorkbookMeetings >= fromWorkbookMeetings Then
                    Exit Do
                Else
                    ActivateField toWorkbook, "MeetingDate1"
                    AddMeeting
                End If
            Loop
            For Meeting = 1 To WorksheetFunction.min(fromWorkbookMeetings, toWorkbookMeetings)
                s = CStr(Meeting)
                CopyRange fromWorkbook.Names("MeetingDate" + s).RefersToRange, _
                          toWorkbook.Names("MeetingDate" + s).RefersToRange
                          
                CopyRange fromWorkbook.Names("MeetingTimeFrom" + s).RefersToRange, _
                          toWorkbook.Names("MeetingTimeFrom" + s).RefersToRange
                          
                CopyRange fromWorkbook.Names("MeetingTimeTo" + s).RefersToRange, _
                          toWorkbook.Names("MeetingTimeTo" + s).RefersToRange
                          
                CopyRange fromWorkbook.Names("MeetingLocation" + s).RefersToRange, _
                          toWorkbook.Names("MeetingLocation" + s).RefersToRange
                          
                CopyRange fromWorkbook.Names("MeetingType" + s).RefersToRange, _
                          toWorkbook.Names("MeetingType" + s).RefersToRange
            Next Meeting
            
            ' Copying total planned time field - it is not a formula any more
            MinutesInspectionWorksheet.Unprotect
            CopyRange fromWorkbook.Names("TotalTimePlanned").RefersToRange, _
                      toWorkbook.Names("TotalTimePlanned").RefersToRange
            MinutesInspectionWorksheet.Protect
        End If
                  
        CopyRange fromWorkbook.Names("Participants").RefersToRange, _
                  toWorkbook.Names("Participants").RefersToRange
        
        CopyRange fromWorkbook.Names("Reinspection").RefersToRange, _
                  toWorkbook.Names("Reinspection").RefersToRange
                  
        CopyRange fromWorkbook.Names("PCR").RefersToRange, _
                  toWorkbook.Names("PCR").RefersToRange
                  
        CopyRange fromWorkbook.Names("TriggerCR").RefersToRange, _
                  toWorkbook.Names("TriggerCR").RefersToRange
                  
        CopyRange fromWorkbook.Names("ClearCase").RefersToRange, _
                  toWorkbook.Names("ClearCase").RefersToRange
                  
        CopyRange fromWorkbook.Names("Project").RefersToRange, _
                  toWorkbook.Names("Project").RefersToRange
                  
        CopyRange fromWorkbook.Names("Title").RefersToRange, _
                  toWorkbook.Names("Title").RefersToRange
                  
        CopyRange fromWorkbook.Names("Type").RefersToRange, _
                  toWorkbook.Names("Type").RefersToRange
                  
        CopyRange fromWorkbook.Names("Part").RefersToRange, _
                  toWorkbook.Names("Part").RefersToRange
                  
        CopyRange fromWorkbook.Names("Version").RefersToRange, _
                  toWorkbook.Names("Version").RefersToRange
                  
        CopyRange fromWorkbook.Names("Date").RefersToRange, _
                  toWorkbook.Names("Date").RefersToRange
                  
        CopyRange fromWorkbook.Names("Size").RefersToRange, _
                  toWorkbook.Names("Size").RefersToRange
                  
        CopyRange fromWorkbook.Names("Path").RefersToRange, _
                  toWorkbook.Names("Path").RefersToRange
    Else
        If CheckAttendants(fromWorkbook, toWorkbook) = False Then
            FillNames = SyncronizeAttendants(fromWorkbook, toWorkbook)
        End If
    End If ' IsClean(toWorkbook)
End Function ' FillNames
'--------------------------------------------------------------------------------------------------
' SyncronizeAttendants
' This function tries to syncronize attendants at specified Minues and Inspector Form
' The function returns True if the list was syncronized, otherwize it returns False
'--------------------------------------------------------------------------------------------------
Private Function SyncronizeAttendants(PIFWorkbook As Workbook, MinutesWorkbook As Workbook) As Boolean
    Dim PIFIndex As Long
    Dim MinutesIndex As Long
    Dim index As Long
    Dim PIFInspectorName As String
    Dim MinutesInspectorName As String
    Dim tempString As String
    Dim IsInspectorFound As Boolean
    Dim InspectorIndex As Long
    Dim MeetingRoleFieldName As String
    Dim ProjectRoleFieldName As String
    
    IsInspectorFound = False
    InspectorIndex = MAX_ATTENDANTS + 1
    
    On Error Resume Next
    
    SyncronizeAttendants = True
    
    ' For each inspector in Inspector Form
    ' get his/her name
    PIFInspectorName = GetField(PIFWorkbook, "InspectorName")
    
    IsInspectorFound = False
    
    ' Look for corresponding inspector in Minutes
    For MinutesIndex = 1 To MAX_ATTENDANTS
        ' get his/her name
        MinutesInspectorName = GetField(MinutesWorkbook, "InspectorName" + CStr(MinutesIndex))
        If MinutesInspectorName = "" Then
            ' we have not found the inspector
            InspectorIndex = MinutesIndex
            Exit For
        End If
        If PIFInspectorName = MinutesInspectorName Then
            ' we have found the inspector
            IsInspectorFound = True
            Exit For
        End If
    Next MinutesIndex
    
    ' we have not found the inspector
    If Not IsInspectorFound Then
        If InspectorIndex > MAX_ATTENDANTS Then
            MsgBox ("Cannot add " + PIFInspectorName + " to the list of attendants because " + _
                    "maximum number of attendats are already in the list")
            SyncronizeAttendants = False
            Exit Function
        End If
        
        
        For index = 1 To MAX_ATTENDANTS
            tempString = GetField(PIFWorkbook, "InspectorName" + CStr(index))
            If tempString = "" Then
                MsgBox ("Cannot add " + PIFInspectorName + _
                        " to the list of attendants to Minutes because " + _
                        "he/she is not in the list of attendants in the Inspector Form")
                SyncronizeAttendants = False
                Exit Function
            End If
            If tempString = PIFInspectorName Then
                PIFIndex = index
                Exit For
            End If
        Next index
        
        SetField MinutesWorkbook, "InspectorName" + CStr(InspectorIndex), PIFInspectorName
        
        ' Adding inspector from PIF to Minutes
        MeetingRoleFieldName = "Inspector" + CStr(PIFIndex) + "MeetingRole"
        ProjectRoleFieldName = "Inspector" + CStr(PIFIndex) + "ProjectRole"
        
        tempString = GetField(PIFWorkbook, MeetingRoleFieldName)
        SetField MinutesWorkbook, MeetingRoleFieldName, tempString
        
        tempString = GetField(PIFWorkbook, ProjectRoleFieldName)
        SetField MinutesWorkbook, ProjectRoleFieldName, tempString
    End If ' Not IsInspectorFound
End Function ' SyncronizeAttendants

'--------------------------------------------------------------------------------------------------
' Sub FillPrepTime
' This sub copies preparation time for all participants to the
' title page of minutes
'--------------------------------------------------------------------------------------------------
Private Sub FillPrepTime(fromWorkbook As Workbook, toWorkbook As Workbook)
    Dim aName As Name
    Dim inspectorName As String
    Dim tempString As String
    Dim pTimeInMinutes As Double
    Dim pTimeInIF As Double
    Dim pTMS As String   ' Preparation Time in Minutes String
    Dim pTIFS As String  ' Preparation Time in Inspector Form String
    Dim result As Long
    
    ' Loop through all names in Minutes to find inspectors
    For Each aName In toWorkbook.Names
        If Len(aName.Name) > 13 Then
            ' If it is inspector's name than fill his preparation time
            If (Left(aName.Name, 13) = "InspectorName") Then
                inspectorName = aName.RefersToRange.Value
                If inspectorName = GetField(fromWorkbook, "InspectorName") Then
                    tempString = "Inspector" & Right(aName.Name, Len(aName.Name) - 13) & "PrepTime"
                    pTimeInMinutes = GetField(toWorkbook, tempString)
                    pTimeInIF = GetField(fromWorkbook, "PreparationTime")
                    pTMS = getLongTime(pTimeInMinutes)
                    pTIFS = getLongTime(pTimeInIF)
                    If pTimeInMinutes <> 0 Then
                        If pTimeInMinutes <> pTimeInIF Then
                            result = MsgBox("The " + inspectorName + "'s preparation time is " + _
                                    pTMS + " in Minutes Form." + Chr(13) + _
                                    "The " + inspectorName + "'s preparation time is " + _
                                    pTIFS + " in Inspector Form." + Chr(13) + _
                                    "Do you want to: (Yes) Sum both values, " + _
                                    "(No) Leave it as is or (Cancel) Replace " + _
                                    pTMS + " with " + pTIFS + "?", _
                                vbYesNoCancel + vbQuestion)
                        Else
                            result = MsgBox("The " + inspectorName + "'s preparation time is " + _
                                    pTMS + " in Minutes Form." + Chr(13) + _
                                    "The " + inspectorName + "'s preparation time is " + _
                                    pTIFS + " in Inspector Form." + Chr(13) + _
                                    "Do you want to: (Yes) Sum both values or " + _
                                    "(No) Leave it as is?", vbYesNo + vbQuestion)
                        End If
                        If result = vbYes Then
                            pTimeInMinutes = pTimeInMinutes + pTimeInIF
                        ElseIf result = vbCancel Then
                            pTimeInMinutes = pTimeInIF
                        End If
                    Else
                        pTimeInMinutes = pTimeInIF
                    End If ' pTime <> 0
                    SetField toWorkbook, tempString, pTimeInMinutes
                    Exit For
                End If
            End If
        End If
    Next
End Sub ' FillPrepTime
'--------------------------------------------------------------------------------------------------
' Function CalculateIssuesIndex
' This function calculates sum of accepted or duplicated issues with corresponding
' weights.
' The function takes the following parameters:
'    atWorksheet - worksheet from MinutesWorkbook to process
'    FromRow - first row with issues
'    SeverityColumn - "Severity" column number
'--------------------------------------------------------------------------------------------------
Private Function CalculateIssuesIndex(atWorksheet As Worksheet, _
                                      fromRow As Long, SeverityColumn As Long) As Long
    Dim aRow As Long                    ' Current Row
    Dim SOperational As Long            ' Operational Severity
    Dim SMinor As Long                  ' Minor Severity
    Dim SInvestigate As Long            ' Investigate Severity
    Dim SReject As Long
                    
    ' Initilizing variables
    aRow = fromRow
    SOperational = 0
    SMinor = 0
    SInvestigate = 0
    SReject = 0
    
    If SeverityColumn = 0 Then
        CalculateIssuesIndex = 0
        Exit Function
    End If
    
    ' Going through all inspector's issues
    While Not TheLast(atWorksheet, aRow)
        
        ' Processing the Severity of the issue
        Select Case atWorksheet.Cells(aRow, SeverityColumn).Value
            Case "Operational"
                SOperational = SOperational + 1
            Case "Minor"
                SMinor = SMinor + 1
            Case "Investigate"
                SInvestigate = SInvestigate + 1
            Case "Fault Rejected"
                SReject = SReject + 1
        End Select
        
        ' Go to next issue
        aRow = aRow + 1
    Wend
    
    ' Calculating index
    CalculateIssuesIndex = OPERATIONAL_SEVERITY_WEIGHT * SOperational + _
                           MINOR_SEVERITY_WEIGHT * SMinor + _
                           INVESTIGATE_SEVERITY_WEIGHT * SInvestigate + _
                           REJECT_SEVERITY_WEIGHT * SReject
End Function '  CalculateIssuesIndex
'--------------------------------------------------------------------------------------------------
' Sub FillEffectiveness
' This sub calculates each inspector's
' effectiveness
'--------------------------------------------------------------------------------------------------
Private Sub FillEffectiveness(MinutesWorkbook As Workbook)
    Dim aName As Name                   ' Name
    Dim tempString As String            ' Temporal String variable
    Dim PrepTimeFieldName As String
    Dim inspectorName As String         ' Name of current inspector
    Dim InspectorWorksheet As Worksheet ' Processed Worksheet
    Dim Effectiveness As Double         ' Inspector's Effectiveness
    Dim TotalIndex As Long              ' Index of all accepted and duplicated issues (All Inspectors)
    Dim InspectorIndex As Long          ' Index of all accepted and duplicated issues (Current Inspector)
    Dim firstRow As Long
    
    Dim SeverityColumnNumber As Long
    
    ' Setting ISSUES_WORKSHEET_NAME worksheet to calculate index
    Set InspectorWorksheet = MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME)
    
    SeverityColumnNumber = GetColumnNumber(InspectorWorksheet, SEVERITY_CAPTION)
    
    firstRow = FindFirstIssue(InspectorWorksheet)
    
    ' Calculating overal index (all accepted issues of all inspectors)
    If SeverityColumnNumber > 0 Then
        TotalIndex = CalculateIssuesIndex(InspectorWorksheet, firstRow, SeverityColumnNumber)
    End If
    
    For Each aName In MinutesWorkbook.Names
        
        On Error Resume Next
        
        ' Looking for inspector name
        If (Left(aName.Name, 13) = "InspectorName") Then
            If Len(aName.Name) > 13 Then
                inspectorName = aName.RefersToRange.Value

                If inspectorName <> "" Then
                    
                    ' Field to fill effectiveness
                    tempString = "Inspector" & Right(aName.Name, Len(aName.Name) - 13) & _
                                 "Effectiveness"
                    PrepTimeFieldName = "Inspector" & Right(aName.Name, Len(aName.Name) - 13) & _
                                 "PrepTime"
                    ' Setting worksheet variable
                    Set InspectorWorksheet = MinutesWorkbook.Worksheets(inspectorName)
                    
                    If Err <> 0 Then
                        Err.Clear
                    Else
                        firstRow = FindFirstIssue(InspectorWorksheet)
                        
                        ' Calculating inspector's index (all accepted issues of current inspector)
                        SeverityColumnNumber = GetColumnNumber(InspectorWorksheet, SEVERITY_CAPTION)
                        If SeverityColumnNumber > 0 Then
                            InspectorIndex = CalculateIssuesIndex(InspectorWorksheet, _
                                                                  firstRow, SeverityColumnNumber)
                        End If
                        
                        
                        If InspectorIndex = 0 Or TotalIndex = 0 Then
                            SetField MinutesWorkbook, tempString, ""
                        Else
                            Effectiveness = InspectorIndex / TotalIndex
                            ' Setting Effectiveness
                            SetField MinutesWorkbook, tempString, Effectiveness
                        End If
                    End If
                End If
            End If
        End If
    Next
End Sub ' FillEffectiveness
'--------------------------------------------------------------------------------------------------
' Sub FillIssues
' This sub adds (copies) all issues from PIF (Wkbk) to the ISSUES_WORKSHEET_NAME
' worksheet
'--------------------------------------------------------------------------------------------------
Private Sub FillIssues(fromWorkbook As Workbook, toWorkbook As Workbook)
    Dim Severities As Range
    Dim MinutesIssuesWorksheet As Worksheet
    Dim aRow As Long
    Dim fromRow As Long
    Dim Link As String
    Dim inspectorName As String
    Dim PIFWorksheet As Worksheet
    Dim fromPIFWorksheet As Worksheet
    Dim IssueNumber As String
    Dim theIssue As Issue
    Dim PIFIssuesColumnNumbers As ColumnNumbers
    Dim PIFFirstRow As Long
    Dim fromPIFIssuesColumnNumbers As ColumnNumbers
    Dim fromPIFFirstRow As Long
    Dim fromDescription As String
            
    ' Initilizing variables
    inspectorName = GetField(fromWorkbook, "InspectorName")
    
    Set MinutesIssuesWorksheet = toWorkbook.Worksheets(ISSUES_WORKSHEET_NAME)
    Set PIFWorksheet = toWorkbook.Worksheets(inspectorName)
    Set fromPIFWorksheet = fromWorkbook.Worksheets(PIF_INSPECTOR_FORM_WORKSHEET_NAME)
    
    ' Findings all available columns at PIF worksheet
    PIFIssuesColumnNumbers = GetColumnNumbers(PIFWorksheet)
    
    PIFFirstRow = FindFirstIssue(PIFWorksheet) - 1
    
    fromPIFIssuesColumnNumbers = GetColumnNumbers(fromPIFWorksheet)
    
    fromPIFFirstRow = FindFirstIssue(fromPIFWorksheet) - 1
    
    aRow = PIFFirstRow
    fromRow = fromPIFFirstRow
    
    If PIFWorksheet.Cells(PIFFirstRow, PIFIssuesColumnNumbers.NColumnNumber) = "" Then
        RenumberWorksheet PIFWorksheet
    End If
    
    ' For each non empty row
    While Not TheLast(PIFWorksheet, aRow + 1)
        
        aRow = aRow + 1
        fromRow = fromRow + 1
        
        ' Setting Issue Fields
        theIssue = GetIssue(PIFWorksheet, aRow, PIFIssuesColumnNumbers)
        fromDescription = fromPIFWorksheet.Cells(fromRow, _
                                          fromPIFIssuesColumnNumbers.descriptionColumnNumber).Value
        
        If Len(fromDescription) > Len(theIssue.Description) Then
            If theIssue.Description = Left(fromDescription, Len(theIssue.Description)) Then
                theIssue.Description = fromDescription
                PIFWorksheet.Cells(aRow, PIFIssuesColumnNumbers.descriptionColumnNumber).Value = _
                    fromDescription
            End If
        End If
        
        ' Adding hiperlink to corresponding original issue (to the corresponding worksheet)
        Link = "'" & inspectorName & "'!" & _
            PIFWorksheet.Cells(aRow, PIFIssuesColumnNumbers.descriptionColumnNumber).Address
        
        theIssue.AuthorHyperlink = Link
        
        ' Initilizing feilds for this issue
        IssueNumber = Format(PIFWorksheet.Cells(aRow, 1).Value, "000")
        theIssue.Author = inspectorName & " (" & IssueNumber & ")"
        
        theIssue.State = "New"
        
        AddIssue MinutesIssuesWorksheet, theIssue, GetColumnNumbers(MinutesIssuesWorksheet)
        
    Wend ' Not TheLast
    
    ' Set Border style for the last "Severity" cell
    If aRow >= PIFFirstRow Then
        ' Setting range variable
        With PIFWorksheet
            Set Severities = _
                Range(.Cells(PIFFirstRow, PIFIssuesColumnNumbers.SeverityColumnNumber), _
                      .Cells(FindLastIssue(PIFWorksheet), _
                             PIFIssuesColumnNumbers.SeverityColumnNumber))
            FormatRange Severities, xlThin, xlMedium, 0, xlMedium, xlThin, xlThin
        End With
    End If
End Sub ' FillIssues
'--------------------------------------------------------------------------------------------------
' Sub AddWorkSheet
' This sub adds (copies) worksheet with issues from PIF (Wkbk)
' to the Minutes workbook as separate worksheet and renames it
' according to inspector's name.
'--------------------------------------------------------------------------------------------------
Private Sub AddWorkSheet(fromWorkbook As Workbook, toWorkbook As Workbook)
    Dim inspectorName As String
    Dim InspectorWorksheet As Worksheet
    Dim InspectorWorksheetName As String
    Dim SeverityCells As Range
    Dim SeverityColumn As Long
    Dim PIFCaptionsRow As Long
    
    ' Getting inspector name
    inspectorName = GetField(fromWorkbook, "InspectorName")
    
    On Error Resume Next
    
    Err.Clear
    
    ' Trying to access page we want to add. If error occures then we will add the worksheet
    Set InspectorWorksheet = toWorkbook.Worksheets(inspectorName)
    
    If Err.Number <> 0 Then
        ' Getting source worksheet name
        InspectorWorksheetName = fromWorkbook.Worksheets(PIF_INSPECTOR_FORM_WORKSHEET_NUMBER).Name
        
        ' Copying it to Minutes workbook
        fromWorkbook.Worksheets(InspectorWorksheetName).Copy After:=toWorkbook.Worksheets("Data")
        
        ' Renaiming new worksheet
        toWorkbook.Worksheets(InspectorWorksheetName).Name = inspectorName
        
        Set InspectorWorksheet = toWorkbook.Worksheets(inspectorName)
    
        InspectorWorksheet.Unprotect
        
        SeverityColumn = GetColumnNumber(InspectorWorksheet, SEVERITY_CAPTION)
        
        If SeverityColumn = 0 Then
            SeverityColumn = FindLastColumn(InspectorWorksheet) + 1
        End If
        
        PIFCaptionsRow = FindFirstIssue(InspectorWorksheet) - 2
        Set SeverityCells = Range(InspectorWorksheet.Cells(PIFCaptionsRow, SeverityColumn), _
                                     InspectorWorksheet.Cells(PIFCaptionsRow + 1, _
                                                        SeverityColumn))
        
        ' Set text and style of added "Severity" caption cell
        With SeverityCells
            .Cells(1, 1).Value = SEVERITY_CAPTION
            .Merge
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = True
            .Font.Bold = True
        End With
        With SeverityCells.Interior
            .ColorIndex = 15
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
        End With
        
        FormatRange SeverityCells, xlThin, xlMedium, xlMedium, xlMedium, xlThin, xlThin
    End If
    
    ' Deleting extra Names
    With toWorkbook
        .Names("InspectorName").Delete
        .Names("PreparationTime").Delete
    End With
    
End Sub ' AddWorkSheet
'--------------------------------------------------------------------------------------------------
' Sub FormatIssues
' This sub formats issues on Minutes ISSUES_WORKSHEET_NAME worksheet
' from the FIRSTROW until CurrentRow row
' It sets all Font properties and borders
'--------------------------------------------------------------------------------------------------
Sub FormatIssues(MinutesWorkbook As Workbook, toRow)
    Dim CurrentIssue As Range
    Dim issuesWorksheet As Worksheet
    Dim firstRow As Long
    
    Set issuesWorksheet = MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME)
    
    firstRow = FindFirstIssue(issuesWorksheet)
    
    ' Initilizing range variable
    With issuesWorksheet
        Set CurrentIssue = Range(.Cells(firstRow, 1), .Cells(toRow - 1, _
                                 FindLastColumn(issuesWorksheet)))
    End With
    
    FormatRange CurrentIssue, xlMedium, xlMedium, xlMedium, xlMedium, xlThin, xlThin
End Sub ' FormatIssues
'--------------------------------------------------------------------------------------------------
' Sub SetNames
' This sub redefines "Allissues", "Statuses" and "Origins" names.
' It sets corresponding range from the beginning until aRow row.
' Input parameters:
' aRow = row number of the last issue in the list
' Minutes global variable should be set to minutes workbook
'--------------------------------------------------------------------------------------------------
Private Sub SetNames(MinutesWorkbook As Workbook, aRow As Long)
    Dim MinutesIssues As Worksheet
    Dim aRange As Range
    Dim StateColumn As Long
    Dim ResolvedStatusColumn As Long
    Dim firstRow As Long
    Dim SeverityColumn As Long
    
    ' Initilizing variables
    Set MinutesIssues = MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME)
    
    firstRow = FindFirstIssue(MinutesIssues)
    
    StateColumn = GetColumnNumber(MinutesIssues, STATE_CAPTION)
    SeverityColumn = GetColumnNumber(MinutesIssues, SEVERITY_CAPTION)
    ResolvedStatusColumn = GetColumnNumber(MinutesIssues, RESOLVED_STATUS_CAPTION)
    
    If aRow = firstRow Then
        aRow = firstRow + 1
    End If

    ' Redefining names
    With MinutesIssues
        Set aRange = Range(.Cells(firstRow, 1), .Cells(aRow - 1, FindLastColumn(MinutesIssues)))
        MinutesWorkbook.Names.Add Name:="AllIssues", RefersTo:=aRange
        If StateColumn > 0 Then
            Set aRange = Range(.Cells(firstRow, StateColumn), .Cells(aRow - 1, StateColumn))
            MinutesWorkbook.Names.Add Name:="States", RefersTo:=aRange
        End If
        If SeverityColumn > 0 Then
            Set aRange = Range(.Cells(firstRow, SeverityColumn), .Cells(aRow - 1, SeverityColumn))
            MinutesWorkbook.Names.Add Name:="Severity", RefersTo:=aRange
        End If
        If ResolvedStatusColumn > 0 Then
            Set aRange = Range(.Cells(firstRow, ResolvedStatusColumn), .Cells(aRow - 1, _
                                                                               ResolvedStatusColumn))
            MinutesWorkbook.Names.Add Name:="ResolvedStatuses", RefersTo:=aRange
        End If
    End With
End Sub ' SetNames
'--------------------------------------------------------------------------------------------------
' Sub GatherMinutes
' This sub collects Inspector names, inspection data, preparation time
' and Issues of each opened PIF (Inspector Form) and fills
' corresponding fields in Minutes. It generates total list of all
' issues of all inspectors on ISSUES_WORKSHEET_NAME worksheet
' To do so sub calls corresponding subs and functions
'--------------------------------------------------------------------------------------------------
Sub GatherMinutes()
Attribute GatherMinutes.VB_Description = "Macro recorded 9/6/2001 by Yuri Vashchenko"
Attribute GatherMinutes.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim PIFWorkbook As Workbook
    Dim MinutesWorkbook As Workbook
    Dim issuesWorksheet As Worksheet
    Dim CurrentRow As Long
    Dim result As Long
    Dim strHiddenInspID As String

    ' Look for open minutes workbook
    Set MinutesWorkbook = FindWorkbook(FIND_MINUTES)
    
    If MinutesWorkbook Is Nothing Then
        Exit Sub
    End If
    
    Set issuesWorksheet = MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME)
    
    If Not IsClean(MinutesWorkbook) Then
        result = MsgBox("Do you want to clear all the fields in Minutes before processing?", _
                        vbYesNoCancel)
        
        If result = vbCancel Then
            Exit Sub
        ElseIf result = vbYes Then
            CleanupMinutes MinutesWorkbook
        End If
    End If ' Not IsClean(MinutesWorkbook)
    
    ' Processing each opened workbook
    For Each PIFWorkbook In Application.Workbooks
        ' Checking for validity
        result = CheckPIFBeforProcessing(PIFWorkbook, MinutesWorkbook)
        If result = CANCEL_PIF_PROCESSING Then
            Exit Sub
        ElseIf result = PROCESS_PIF Then
            ' Getting hidden inspection id
            If GetField(PIFWorkbook, "HiddenInspectionID") <> "" Then
                strHiddenInspID = GetField(PIFWorkbook, "HiddenInspectionID")
            End If
            
            ' Filling Title page fields
            If FillNames(PIFWorkbook, MinutesWorkbook) Then
                ' Updating preparation time
                FillPrepTime PIFWorkbook, MinutesWorkbook
                
                ' Adding worksheet
                AddWorkSheet PIFWorkbook, MinutesWorkbook
                
                ' Adding issues of this inspector to list
                FillIssues PIFWorkbook, MinutesWorkbook
            End If
        End If
    Next PIFWorkbook
    
    SetField MinutesWorkbook, "HiddenInspectionID", strHiddenInspID
    
    ' Redefining names
    CurrentRow = FindLastIssue(issuesWorksheet)
    
    SetNames MinutesWorkbook, CurrentRow
    
    ' If number of issues in the list greater than 0
    If CurrentRow > FindFirstIssue(issuesWorksheet) Then
        ' Sorting list of issues by location
        SortByLocation MinutesWorkbook
        
        ' Show generated issues
        issuesWorksheet.Activate
    End If
End Sub ' GatherMinutes

'--------------------------------------------------------------------------------------------------
' Function CheckIfReady4Closure
' Checks whether inspection ready to be closed or not and triggers closure if yes
' Returns False if not all fields are filled and minutes should not be saved
'--------------------------------------------------------------------------------------------------
Function CheckIfReady4Closure(theBook As Workbook) As Boolean
    Dim dlgAnswer
    Dim i
    
    CheckIfReady4Closure = True
    
    ' If inspection is already closed or there is no isClosed name in template then
    ' do not close the inspection
    On Error Resume Next
    If GetField(theBook, "isClosed") = "1" Then Exit Function
    If Err.Number <> 0 Then Exit Function
    On Error GoTo 0
    
    i = CInt(GetField(theBook, "TotalIssues"))
    If GetField(theBook, "Disposition") = "Cancelled" Or AllIssuesAreVerified(theBook, True) And _
            MeetingsAreInPast(theBook) Or GetField(theBook, "Disposition") = "Accept" And _
            MeetingsAreInPast(theBook) And CInt(GetField(theBook, "TotalIssues")) = 0 Then
        dlgAnswer = MsgBox("Looks like this inspection is ready to be closed!" & _
            Chr(13) & "Do you want to close the inspection?", vbYesNo + vbQuestion)
        If dlgAnswer = vbYes Then
            If CheckFieldsBeforeClose(theBook, False) Then
                GatherDataAndPost2RhondaDB theBook, True
            Else
                CheckIfReady4Closure = False
            End If
        Else
            CheckIfReady4Closure = False
        End If
    End If

End Function
'--------------------------------------------------------------------------------------------------
' Sub CloseInspection
' Verifies inspection and sends data to RhondaDB (if it ready to closure)
'--------------------------------------------------------------------------------------------------
Sub CloseInspection()
    Dim theBook As Workbook
    Dim dlgAnswer
        
    Set theBook = FindWorkbook(FIND_MINUTES)
    
    If theBook Is Nothing Then Exit Sub
    
    On Error Resume Next
    If GetField(theBook, "isClosed") = "1" Then
        If Err.Number > 0 Then Exit Sub
        dlgAnswer = MsgBox("              Inspection is already closed!" & _
            Chr(13) & "Do you want to update inspection data in RhondaDB?", vbYesNo + vbQuestion)
        If dlgAnswer = vbNo Then
            Exit Sub
        End If
    End If
    On Error GoTo 0

    If CheckFieldsBeforeClose(theBook, False) Then
        GatherDataAndPost2RhondaDB theBook, True
    End If
    
End Sub
    
'--------------------------------------------------------------------------------------------------
' Function CheckFieldsBeforeClose
' Verifies inspection data before closure
'--------------------------------------------------------------------------------------------------
Function CheckFieldsBeforeClose(theBook As Workbook, WarningsOff As Boolean) As Boolean
    
    CheckFieldsBeforeClose = False
    
    If CheckMinutesFields(theBook) Then
        If GetField(theBook, "Disposition") <> "Cancelled" Then
            If MeetingsAreInPast(theBook) = False Then
                If WarningsOff Then Exit Function
                MsgBox "Inspection cannot be closed while at least one meeting is scheduled to a future time!", vbCritical
                Exit Function
            End If
            If CInt(GetField(theBook, "TotalIssues")) = 0 And GetField(theBook, "Disposition") = "Accept" Then
                CheckFieldsBeforeClose = True
                Exit Function
            End If
            If CInt(GetField(theBook, "Investigates")) > 0 Then
                If WarningsOff Then Exit Function
                MsgBox "Closed inspection cannot contain investigates!", vbCritical
                Exit Function
            End If
            If AllIssuesAreVerified(theBook, WarningsOff) = False Then
                If WarningsOff Then Exit Function
                MsgBox "         All issues must be verified before inspection closure!" & Chr(13) & _
                    "For all postponed issues CRs should be submitted and their IDs specified", vbCritical
                Exit Function
            End If
        End If
    Else: Exit Function
    End If
    
    CheckFieldsBeforeClose = True

End Function

'--------------------------------------------------------------------------------------------------
' Function SeveritySet4AllIssues
' Verifies that for all inspection issues "Severity" is set
'--------------------------------------------------------------------------------------------------
Function SeveritySet4AllIssues(theBook As Workbook, WarningsOff As Boolean)
    Dim aRange As Range
    Dim i As Integer
    Dim MinutesIssues As Worksheet
    Dim IssueNumberColumn As Long
    Dim strIssueNumber As String
    Dim dlgAnswer
    
    SeveritySet4AllIssues = True
    Set MinutesIssues = theBook.Worksheets(ISSUES_WORKSHEET_NAME)
    IssueNumberColumn = GetColumnNumber(MinutesIssues, N_CAPTION)
    
    ' if "Severity" name is not defined then no issues exists
    On Error Resume Next
    Set aRange = theBook.Names("Severity").RefersToRange
    If Err.Number > 0 Then
        SeveritySet4AllIssues = Null
        Exit Function
    End If
    On Error GoTo 0
    
    For i = 1 To aRange.Count
        If aRange(i).Value = "" Then
            SeveritySet4AllIssues = False
            If WarningsOff Then Exit Function
            strIssueNumber = MinutesIssues.Cells(aRange(i).Row, IssueNumberColumn).Value
            MinutesIssues.Activate
            aRange(i).Select
            dlgAnswer = MsgBox("Severity should be specified for issue " & strIssueNumber & "!" & _
                Chr(13) & "Continue to look through the issues?", vbYesNo + vbQuestion)
            If dlgAnswer = vbNo Then
                Exit Function
            End If
        End If
    Next i

End Function

'--------------------------------------------------------------------------------------------------
' Function AllIssuesAreVerified
' Verifies that all inspection issues are in Verified state
' For all postponed issues CR ## should be specified
'--------------------------------------------------------------------------------------------------
Function AllIssuesAreVerified(theBook As Workbook, WarningsOff As Boolean)
    Dim aRange As Range
    Dim i As Integer
    Dim MinutesIssues As Worksheet
    Dim IssueNumberColumn As Long
    Dim ResolverCommentsColumn As Long
    Dim strIssueNumber As String
    Dim dlgAnswer
    
    Set MinutesIssues = theBook.Worksheets(ISSUES_WORKSHEET_NAME)
    
    IssueNumberColumn = GetColumnNumber(MinutesIssues, N_CAPTION)
    ResolverCommentsColumn = GetColumnNumber(MinutesIssues, RESOLVER_COMMENTS_CAPTION)
    
    ' if "states" name is not defined then no issues exists
    On Error Resume Next
    Set aRange = theBook.Names("States").RefersToRange
    If Err.Number > 0 Then
        AllIssuesAreVerified = Null
        Exit Function
    End If
    On Error GoTo 0
    
    AllIssuesAreVerified = True
    
    With MinutesIssues
        For i = 1 To aRange.Count
            If aRange(i).Value = "Postponed" Then
                If Trim(.Cells(aRange(i).Row, ResolverCommentsColumn).Value) = "" Then
                    AllIssuesAreVerified = False
                    If WarningsOff Then Exit Function
                    strIssueNumber = .Cells(aRange(i).Row, IssueNumberColumn).Value
                    MinutesIssues.Activate
                    .Cells(aRange(i).Row, ResolverCommentsColumn).Select
                    dlgAnswer = MsgBox("No CR# is specified for postponed issue " & strIssueNumber & "!" & _
                        Chr(13) & "Continue to look through the issues?", vbYesNo + vbQuestion)
                    If dlgAnswer = vbNo Then
                        Exit Function
                    End If
                End If
            ElseIf aRange(i).Value <> "Verified" Then
                AllIssuesAreVerified = False
                If WarningsOff Then Exit Function
                strIssueNumber = .Cells(aRange(i).Row, IssueNumberColumn).Value
                MinutesIssues.Activate
                .Cells(aRange(i).Row, aRange(i).Column).Select
                dlgAnswer = MsgBox("Issue " & strIssueNumber & " is not in 'Verified' state!" & Chr(13) & _
                    "Continue to look through the issues?", vbYesNo + vbQuestion)
                If dlgAnswer = vbNo Then
                    Exit Function
                End If
            End If
        Next i
    End With

End Function

'--------------------------------------------------------------------------------------------------
' Sub ProcessMinutes
' This sub removes issues that have "Fault Rejected" severity.
' This sub also sets final severity on corresponding worksheets.
'--------------------------------------------------------------------------------------------------
Sub ProcessMinutes()
    Dim issues As Worksheet
    Dim MinutesWorkbook As Workbook
    Dim PIFWorksheet As Worksheet
    Dim aRow As Long
    Dim AuthorColumn As Long
    Dim OffsetPIFDescriptionPIFSeverity As Long
    Dim SeverityColumn As Long
    Dim PIFDescriptionColumn As Long
    
    Set MinutesWorkbook = FindWorkbook(FIND_MINUTES)
    
    If MinutesWorkbook Is Nothing Then
        Exit Sub
    End If
    
    If SeveritySet4AllIssues(MinutesWorkbook, False) = False Then
        MsgBox "Severity should be set for all issues to Process Minutes!", vbCritical
        Exit Sub
    End If
    
    ' Initilizing variables
    Set issues = MinutesWorkbook.Worksheets(ISSUES_WORKSHEET_NAME)
    
    AuthorColumn = GetColumnNumber(issues, AUTHOR_CAPTION)
    SeverityColumn = GetColumnNumber(issues, SEVERITY_CAPTION)
    
    aRow = FindFirstIssue(issues)
    
    On Error Resume Next
    
    ' Go through all rows
    While Not TheLast(issues, aRow)
        With Range(issues.Cells(aRow, AuthorColumn).Hyperlinks(1).SubAddress)
            ' Setting worksheet variable to corresponding inspector's worksheet
            Set PIFWorksheet = .Worksheet
            
            PIFDescriptionColumn = GetColumnNumber(PIFWorksheet, DESCRIPTION_CAPTION)
            
            OffsetPIFDescriptionPIFSeverity = _
                GetColumnNumber(PIFWorksheet, SEVERITY_CAPTION) - PIFDescriptionColumn
            
            ' Update severity on corresponding worksheet
            .Offset(0, OffsetPIFDescriptionPIFSeverity).Value = _
                issues.Cells(aRow, SeverityColumn).Value
        End With
        ' If SeverityColumn of issue is "Fault Rejected"
        With issues.Cells(aRow, SeverityColumn)
            If .Value = "Fault Rejected" Then
                ' Delete it
                DeleteRow issues, aRow, 1
            Else
                aRow = aRow + 1
            End If
        End With
    Wend
    
    ' Calculating Inspector effectiveness
    FillEffectiveness MinutesWorkbook
            
    ' Renumber issues, redraw borders, refedine names
    RenumberMinutes MinutesWorkbook
    
End Sub ' ProcessMinutes
Attribute VB_Name = "SelectFromListForm"
Attribute VB_Base = "0{CAB8AFF3-81B1-4386-9794-F2F4F87BB3D0}{83CECCE8-B0E6-4CFE-AC9A-B24F55A33854}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------------------------------------------
' Module Name: SelectFromListForm
' Copyright (c) 2001-2003, Rhonda Ltd
' Module Description:
' This module is designed to support SelectFromList form
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' D00.00.20     06/04/2002  Yuri Vashchenko     Initial Creation
' A00.01.00     01/24/2003  Yuri Vashchenko     Remove Workspace specific names
'--------------------------------------------------------------------------------------------------
Option Explicit
'--------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------
Private Sub OKButton_Click()
    Me.Hide
End Sub
'--------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------
Private Sub CancelButton_Click()
    Me.ListBox.ListIndex = -1
    Me.Hide
End Sub
Attribute VB_Name = "SendMinutes"
Option Explicit
'--------------------------------------------------------------------------------------------------
' Module Name: SendMinutes
' Copyright (c) 2001-2003, Rhonda Ltd
' Module Description:
' This module is designed to verify values of fields, to put
' minutes into the vob and to send notification to all affected persons
'--------------------------------------------------------------------------------------------------
' Revision History
' Version       Date        Author              Description
' D00.00.20     06/06/2002  Yuri Vashchenko     Initial Creation
' A00.01.00     1/23/2003   Yuri Vashchenko     Bug Fixes
' A00.02.01     7/10/2003    Yuri Vashchenko    Added: 1. multy-meeting support
'                                                      2. LIBdd support
'--------------------------------------------------------------------------------------------------
' Global Variables
Dim myItem
'--------------------------------------------------------------------------------------------------
' Function CheckMinutesFields
' This function returns true if all required fields are not empty
'--------------------------------------------------------------------------------------------------
Function CheckMinutesFields(atWorkbook As Workbook) As Boolean
    Dim i As Integer
    Dim Person As String
    Dim s As String
    Dim TotalMeetings  As Long
    Dim Meeting As Long
    
    ' Initilizing result
    CheckMinutesFields = True
    
    On Error Resume Next
    
    ' Trying to access "MeetingDate1" field
    s = CStr(atWorkbook.Names("MeetingDate1").RefersToRange.Value)
    
    If Err <> 0 Then
        ' There is no "MeetingDate1" field
        Err.Clear
        
        ' If empty field found - stop checking
        On Error GoTo ErrorHandler
        
        ' Checking "PlannedDate" field
        CheckField atWorkbook, "PlannedDate", "Planned Date is empty"
        
        ' Checking "PlannedTimeFrom" field
        CheckField atWorkbook, "PlannedTimeFrom", "Planned Time From is empty"
        
        ' Checking "PlannedTimeTo" field
        CheckField atWorkbook, "PlannedTimeTo", "Planned Time To is empty"
        
        ' Checking "ActualDate" field
        CheckField atWorkbook, "ActualDate", "Actual Date is empty"
        
        ' Checking "ActualTimeFrom" field
        CheckField atWorkbook, "ActualTimeFrom", "Actual Time From is empty"
        
        ' Checking "ActualTimeTo" field
        CheckField atWorkbook, "ActualTimeTo", "Actual Time To is empty"
        
        ' Checking "Location" field
        CheckField atWorkbook, "Location", "Meeting Location is empty"
    Else
        ' If empty field found - stop checking
        On Error GoTo ErrorHandler
        
        TotalMeetings = NumberOfMeetings(atWorkbook)
        
        For Meeting = 1 To TotalMeetings
            s = CStr(Meeting)
            
            ' Checking "MeetingDate(i)" field
            CheckField atWorkbook, "MeetingDate" + s, "Meeting Date " + s + " is empty"
            
            ' Checking "MeetingTimeFrom(i)" field
            CheckField atWorkbook, "MeetingTimeFrom" + s, "Meeting Time From " + s + " is empty"
            
            ' Checking "MeetingTimeTo(i)" field
            CheckField atWorkbook, "MeetingTimeTo" + s, "Meeting Time To " + s + " is empty"
            
            ' Checking "MeetingLocation(i)" field
            CheckField atWorkbook, "MeetingLocation" + s, "Meeting Location " + s + " is empty"
            
            ' Checking "MeetingType(i)"
            CheckField atWorkbook, "MeetingType" + s, "Meeting Type " + s + " is empty"
        Next Meeting
    End If
    
    ' Checking "Title" field
    CheckField atWorkbook, "Title", "Product Title is empty"
    
    ' Checking "Type" field
    CheckField atWorkbook, "Type", "Product Type is empty"
    
    ' Checking "Version" field
    CheckField atWorkbook, "Version", "Product Version is empty"
    
    ' Checking "Size" field
    CheckField atWorkbook, "Size", "Product size is empty"
    
    ' Checking "Path" field
    CheckField atWorkbook, "Path", "Product location is empty"
    
    ' Checking "Disposition" field
    CheckField atWorkbook, "Disposition", "Disposition is empty"
    
    For i = 1 To 12
        Person = GetField(atWorkbook, "InspectorName" + CStr(i))
        If Person = "" Then Exit For
        
        ' Checking "MeetingRole" field
        CheckField atWorkbook, "Inspector" + CStr(i) + "MeetingRole", Person + "'s Meeting Role is empty"
        
        ' Checking "Required" field
        CheckField atWorkbook, "Inspector" + CStr(i) + "Participated", "Please select if " + Person + " was present at the meeting"
    Next i
    
    ' If everything is ok
    Exit Function
ErrorHandler:
    ' Error occured
    CheckMinutesFields = False
End Function ' CheckMinutesFields
'--------------------------------------------------------------------------------------------------
' Function GenerateSubject
' This function returns generated subject for mail message
' Subject format is:
' "<Project_Name> // Inspection Minutes of <Title>_<ActualDate>" or
' "Process Improve // Inspection Minutes of <Title>_<ActualDate>"
'--------------------------------------------------------------------------------------------------
Private Function GenerateSubject(atWorkbook As Workbook) As String
    Dim ProjectName As String
    Dim s As String
    Dim tempString As String
    Dim TotalMeetings As Long
    Dim Meeting As Long
    
    ' Getting project name
    ProjectName = GetField(atWorkbook, "Project")
    
    ' If it is empty or project is Rhonda Process then it is "Process Improve"
    If (ProjectName = "") Or (ProjectName = "Rhonda Process") Then
        s = "Process.Improve "
    ElseIf ProjectName = KNOWLEDGE_MANAGEMENT_KEYWORD Then
        s = KNOW_PREPARE_KEYWORD & " "
    Else
        s = ProjectName & " // "
    End If
    
    s = s + "Inspection Minutes of " & GetField(atWorkbook, "Title") & " " & _
        GetField(atWorkbook, "TriggerCR") & "/" & GetField(atWorkbook, "PCR") & " of "
    
    On Error Resume Next
    
    tempString = CStr(atWorkbook.Names("MeetingDate1").RefersToRange.Value)
    
    ' If error occured - there is not such name and it is not multy-meeting form
    If Err <> 0 Then
        Err.Clear
        s = s + Format(CDate(GetField(atWorkbook, "ActualDate")), "yyyy-mm-dd")
    Else
        TotalMeetings = NumberOfMeetings(atWorkbook)
        For Meeting = TotalMeetings To 1 Step -1
            tempString = CStr(Meeting)
            If InStr(GetField(atWorkbook, "MeetingType" + tempString), "Inspection") > 0 Then
                s = s + Format(CDate(GetField(atWorkbook, "MeetingDate" + tempString)), _
                               "yyyy-mm-dd") + ", "
            End If
        Next Meeting
        If Right(s, 2) = ", " Then
            s = Left(s, Len(s) - 2)
        End If
    End If
    
    ' Generating result
    GenerateSubject = s
End Function ' GenerateSubject
'--------------------------------------------------------------------------------------------------
' Sub GenerateMessage
' This sub generates mail message (without a body)
' It calls GenerateSubject to generate subject and
' adds all affected persons as recipients
' Message is stored at myItem global variable
'--------------------------------------------------------------------------------------------------
Private Sub GenerateMessage(atWorkbook As Workbook)
    Dim i As Integer
    Dim Person As String
    Dim Verifier As String
    
    ' Generating subject
    myItem.Subject = GenerateSubject(atWorkbook)
    
    Verifier = GetField(atWorkbook, "VerifierIs")
    
    ' Adding recipients
    For i = 1 To 12
        Person = GetField(atWorkbook, "InspectorName" + CStr(i))
        If Person <> "" Then
            myItem.Recipients.Add (Person)
            If Person = Verifier Then
                Verifier = ""
            End If
        End If
    Next i
    
    ' Adding verifier as recipient (if necessary)
    If Verifier <> "" Then
        myItem.Recipients.Add (GetField(atWorkbook, "VerifierIs"))
    End If
End Sub ' GenerateMessage
'--------------------------------------------------------------------------------------------------
' Sub GenerateBody
' This sub generates a body for the mail message
' It uses template located at "MinutesMessageTemplatePath" and
' replaces all <Fields> with actual values
' Message body is stored at myItem global variable
' Input parameters:
' VOBPath is vob path to minutes
'--------------------------------------------------------------------------------------------------
Private Sub GenerateBody(atWorkbook As Workbook, vobPath As String)
    
    Const olFormatHTML = 2
    
    Dim TriggerCR As String
    Dim InspectionCR As String
    Dim Hyperlink As String
    Dim s As String
    Dim ts As String ' Temp String
    Dim WPType As String
    Dim TotalFaults As Long
    Dim OperationalFaults As Long
    Dim Size As Double
    Dim TotalMeetings As Long
    Dim Meeting As Long
    Dim MeetingsInfo As String
    
    On Error Resume Next
    
    ' Trying to access "MeetingDate1" field
    s = CStr(atWorkbook.Names("MeetingDate1").RefersToRange.Value)
    
    If Err <> 0 Then
        ' There is no "MeetingDate1" field
        Err.Clear
        TotalMeetings = 0
    Else
        TotalMeetings = NumberOfMeetings(atWorkbook)
    End If
    
    ' Getting template text
    s = GetField(atWorkbook, "HtmlMessage")
    
    ' Replacing template [Fields] with actual values
    Size = GetField(atWorkbook, "Size")
   
    MeetingsInfo = ""
   
    If TotalMeetings = 0 Then
        MeetingsInfo = MeetingsInfo + "  <tr>" + vbCrLf
        MeetingsInfo = MeetingsInfo + "    <td width=""4%"" align=""center"">" + _
                       "<font size=""2"" face=""Arial"">" + ts + "</font></td>" + vbCrLf
        MeetingsInfo = MeetingsInfo + "    <td width=""14%"" align=""center"">" + _
                       "<font size=""2"" face=""Arial"">" + _
                       Format(CDate(GetField(atWorkbook, "ActualDate")), "mm/dd/yyyy") + _
                       "</font></td>" + vbCrLf
        MeetingsInfo = MeetingsInfo + "    <td width=""12%"" align=""center"">" + _
                       "<font size=""2"" face=""Arial"">" + _
                       Format(CDate(GetField(atWorkbook, "ActualTimeFrom")), "HH:MM") + _
                       "</font></td>" + vbCrLf
        MeetingsInfo = MeetingsInfo + "    <td width=""12%"" align=""center"">" + _
                       "<font size=""2"" face=""Arial"">" + _
                       Format(CDate(GetField(atWorkbook, "ActualTimeTo")) - _
                              CDate(GetField(atWorkbook, "ActualTimeFrom")), "HH:MM") + _
                       "</font></td>" + vbCrLf
        MeetingsInfo = MeetingsInfo + "    <td width=""35%"" align=""center"">" + _
                       "<font size=""2"" face=""Arial"">" + _
                       GetField(atWorkbook, "Location") + "</font></td>" + vbCrLf
        MeetingsInfo = MeetingsInfo + "    <td width=""25%"" align=""center"">" + _
                       "<font size=""2"" face=""Arial"">Inspection</font></td>" + vbCrLf
        MeetingsInfo = MeetingsInfo + "  </tr>"
        
        TotalMeetings = 1
    Else
        For Meeting = 1 To TotalMeetings
            ts = CStr(Meeting)
            
            MeetingsInfo = MeetingsInfo + "  <tr>" + vbCrLf
            MeetingsInfo = MeetingsInfo + "    <td width=""4%"" align=""center"">" + _
                           "<font size=""2"" face=""Arial"">" + ts + "</font></td>" + vbCrLf
            MeetingsInfo = MeetingsInfo + "    <td width=""14%"" align=""center"">" + _
                           "<font size=""2"" face=""Arial"">" + _
                           Format(CDate(GetField(atWorkbook, "MeetingDate" + ts)), "mm/dd/yyyy") + _
                           "</font></td>" + vbCrLf
            MeetingsInfo = MeetingsInfo + "    <td width=""12%"" align=""center"">" + _
                           "<font size=""2"" face=""Arial"">" + _
                           Format(CDate(GetField(atWorkbook, "MeetingTimeFrom" + ts)), "HH:MM") + _
                           "</font></td>" + vbCrLf
            MeetingsInfo = MeetingsInfo + "    <td width=""12%"" align=""center"">" + _
                           "<font size=""2"" face=""Arial"">" + _
                           Format(CDate(GetField(atWorkbook, "MeetingDuration" + ts)), "HH:MM") + _
                           "</font></td>" + vbCrLf
            MeetingsInfo = MeetingsInfo + "    <td width=""35%"" align=""center"">" + _
                           "<font size=""2"" face=""Arial"">" + _
                           GetField(atWorkbook, "MeetingLocation" + ts) + "</font></td>" + vbCrLf
            MeetingsInfo = MeetingsInfo + "    <td width=""25%"" align=""center"">" + _
                           "<font size=""2"" face=""Arial"">" + _
                           GetField(atWorkbook, "MeetingType" + ts) + "</font></td>" + vbCrLf
            MeetingsInfo = MeetingsInfo + "  </tr>"
            
        Next Meeting
    End If
    
    s = Replace(s, "[Meetings]", MeetingsInfo)
    
    
    s = Replace(s, "[ProductSize]", Size)
    s = Replace(s, "[Unit]", GetField(atWorkbook, "Unit"))
    s = Replace(s, "[Product_Title]", GetField(atWorkbook, "Title"))
    s = Replace(s, "[ProductType]", GetField(atWorkbook, "Type"))
    s = Replace(s, "[Project_Name]", GetField(atWorkbook, "Project"))
    s = Replace(s, "[Disposition]", GetField(atWorkbook, "Disposition"))
    s = Replace(s, "[Op. Err.]", GetField(atWorkbook, "ErrorsOperational"))
    s = Replace(s, "[Min. Err.]", GetField(atWorkbook, "ErrorsMinor"))
    s = Replace(s, "[Investig.]", GetField(atWorkbook, "Investigates"))
    s = Replace(s, "[Rejected]", GetField(atWorkbook, "Rejected"))
    s = Replace(s, "[Tot._Iss.]", GetField(atWorkbook, "TotalIssues"))
    
    
    If GetField(atWorkbook, "Type") = "" Then
        WPType = ""
    Else
        WPType = Application.WorksheetFunction.VLookup(Range("Type"), _
                                                       Range("WPTypeUnitPrepTimeType"), _
                                                       11, _
                                                       False)
    End If
    
    s = Replace(s, "[IFD-Type]", "IFD-" & WPType)
    
    
    TotalFaults = GetField(atWorkbook, "ErrorsOperational") + _
                  GetField(atWorkbook, "ErrorsMinor")
    
    OperationalFaults = GetField(atWorkbook, "ErrorsOperational")
    
    If Size > 0 Then
        s = Replace(s, "[IFD]", Round(GetField(atWorkbook, "IFD"), 4))
        s = Replace(s, "[IFD-Total]", Round(CDbl(TotalFaults) / CDbl(Size), 4))
        s = Replace(s, "[IFD-Op.]", Round(CDbl(OperationalFaults) / CDbl(Size), 4))
    Else
        s = Replace(s, "[IFD]", "N/A", 4)
        s = Replace(s, "[IFD-Total]", "N/A")
        s = Replace(s, "[IFD-Op.]", "N/A")
    End If
    
    s = Replace(s, "[IPR-Type]", "IPR-" & WPType)
    s = Replace(s, "[IPR]", Round(GetField(atWorkbook, "IPR"), 4))
    s = Replace(s, "[IR-Type]", "IR-" & WPType)
    s = Replace(s, "[IR]", Round(Size / CDbl(GetField(atWorkbook, "TotalTimeActual") * 24), 4))
    s = Replace(s, "[Total_Issues]", GetField(atWorkbook, "TotalIssues"))
    s = Replace(s, "[Verifier]", GetField(atWorkbook, "VerifierIs"))
    
    s = Replace(s, "[Completion_Date]", GetField(atWorkbook, "CompletionDate"))
    
    On Error Resume Next
    Err.Clear
    
    
    ' Getting TriggerCR
    TriggerCR = Trim(GetField(atWorkbook, "TriggerCR"))
    
    ' Getting InspectionCR
    InspectionCR = GetField(atWorkbook, "PCR")
    
    ' Creating hyperlink (if it is WSD DDTS CR) to CR
    If Left(TriggerCR, 3) = "LIB" Then
        Hyperlink = "<a href=""http://wsd-ddts.pcs.mot.com/ddts_auth/ddts_main?id=" + _
                    TriggerCR + """>" + TriggerCR + "</a>"
        s = Replace(s, "[TriggerCRID]", Hyperlink)
    Else
        s = Replace(s, "[TriggerCRID]", TriggerCR)
    End If
    
    ' Creating hyperlink (if it is DISSECT Inspection) to Inspection
    If InStr(UCase(InspectionCR), "LV") > 0 Then
        Hyperlink = "<a href=""http://insp.pcs.mot.com/showmeet.pl?" + _
                    Replace(InspectionCR, "LV", "") + """>" + InspectionCR + "</a>"
        s = Replace(s, "[PCRID]", Hyperlink)
    Else
        s = Replace(s, "[PCRID]", InspectionCR)
    End If
    
    ' Creating hyperlink (if form has vob-like filename) to vob
    If InStr(vobPath, "/vob") > 0 Then
        Hyperlink = "<a href=""clearcase:" + Replace(vobPath, """", "") + """>" + vobPath + "</a>"
        s = Replace(s, "[VOB_Path]", Hyperlink)
    Else
        s = Replace(s, "[VOB_Path]", vobPath)
    End If
    
    ' Adding signature - name of the current user
    s = Replace(s, "[Signature]", myItem.Session.CurrentUser)
    
    ' Storing result
    On Error Resume Next
    
    myItem.BodyFormat = olFormatHTML
    myItem.HTMLBody = s
    
End Sub ' GenerateBody

Sub ImportMinutes()
    Dim atWorkbook As Workbook
    Dim fname

    Set atWorkbook = FindWorkbook(FIND_MINUTES)
    fname = CheckSavedAndSave(atWorkbook)
    
    If fname = "" Then
        Exit Sub
    End If
    
    fname = atWorkbook.fullName

    If ClearCaseModule.Import2VOB(CStr(fname), False) Then
        MsgBox "Minutes have been succefully imported."
    Else
        MsgBox "Unable to import minutes." & _
            Chr(13) & "File must be saved into your workspace."
    End If

End Sub
'--------------------------------------------------------------------------------------------------
' Sub GenerateMailMessage
' This sub asks user if he wants to import minutes into vob and
' it he is it calls ClearCaseModule.ImportDocument to do it
' After that the sub generates outlook mail message, attaches this
' file (minutes) and shows it in the Outlook
'--------------------------------------------------------------------------------------------------
Sub GenerateMailMessage()
    Dim myOlApp As Variant
    Dim atWorkbook As Workbook
    Dim Res As Long
    Dim fname
    
    ' Defining constant
    Const olMailItem = 0
    
    Set atWorkbook = FindWorkbook(FIND_MINUTES)
    
    If atWorkbook Is Nothing Then
        Exit Sub
    End If
    
    ' Checking that all required feilds are not empty
    If CheckMinutesFields(atWorkbook) = False Then
        Exit Sub
    End If
    
    ' Checking that severity set for all issues
    If SeveritySet4AllIssues(atWorkbook, False) = False Then
        MsgBox "Severity should be set for all issues to Send Minutes!", vbCritical
        Exit Sub
    End If
    
    fname = CheckSavedAndSave(atWorkbook)
    
    If fname = "" Then
        Exit Sub
    End If
    
    fname = atWorkbook.fullName
    
    If InStr(1, CStr(fname), "\vob", vbTextCompare) > 0 Then
        ' Asking the user if he wants to import minutes into the vob
        Res = MsgBox("Do you want to import minutes into vob?", vbYesNoCancel)
        ' If he do not want to do anything - exit sub
        If Res = vbCancel Then
            Exit Sub
        ElseIf Res = vbYes Then
            ' Import minutes to the vob
            If ClearCaseModule.Import2VOB(CStr(fname), False) = False Then
                Res = MsgBox("Unable to import minutes." & _
                    Chr(13) & "File must be saved into your workspace." & _
                    Chr(13) & "Continue with Send without import?", vbYesNo + vbQuestion)
                If Res = vbNo Then Exit Sub
            End If
        End If
    End If
    
    On Error Resume Next
    
    ' Preparing to generate Outlook email message
    Set myOlApp = CreateObject("Outlook.Application")
    Set myItem = myOlApp.CreateItem(olMailItem)
    
    ' Generating message
    GenerateMessage atWorkbook
    
    ' Generating body
    GenerateBody atWorkbook, ClearCaseModule.WorkspacePathToVobPath(CStr(fname))
    
    ' Adding this file as attachment
    myItem.Attachments.Add atWorkbook.fullName
    
    ' Displaying generated Outlook mail message
    myItem.Display
    
End Sub ' GenerateMailMessage

Attribute VB_Name = "ServiceProcedures"
Option Explicit
'--------------------------------------------------------------------------------------------------
' Module Name: Renumber
' Copyright (c) 2001-2003, Rhonda Ltd
' Module Description:
' This module is designed to renumber issues on Inspector Form
' worksheet as well as redraw borders
' It also contains some subs to insert and delete rows at the
' Inspector Form worksheet
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' D00.00.01     10/03/2001  Yuri Vashchenko     Initial Creation
' D00.00.22     02/14/2002  Yuri Vashchenko     Updated popi information. Added some comments
' D00.00.24     03/04/2002  Yuri Vashchenko     Updated after formal Inspection (MOTrh02802)
' A00.01.00     01/24/2003  Yuri Vashchenko     Updated to remove Activeworkbook usage
'--------------------------------------------------------------------------------------------------

' Global Variable
Dim CurrentRow As Long
'--------------------------------------------------------------------------------------------------
' RenumberWorksheet
' This sub automatically renumbers issues in specified
' worksheet. It calls The_Last function to check that all issues
' were processed
'--------------------------------------------------------------------------------------------------
Sub RenumberWorksheet(atWorksheet As Worksheet)
    ' Unprotecting worksheet
    atWorksheet.Unprotect
    
    ' Execution will stop and error will be shown if accured
'    On Error GoTo 0
    
    ' Start from the beginning
    CurrentRow = FindFirstIssue(atWorksheet)
    
    ' First row are processed different way
    ' If we are not reached the end set formula for first cell in the row, otherwise exit sub
    If Not TheLast(atWorksheet, CurrentRow) Then
        ' Formula is: The value from previous cell + 1
        atWorksheet.Cells(CurrentRow, 1).Formula = "=" & atWorksheet.Cells(CurrentRow - 1, 1).Address(False, False) & "+1"
        
        ' Setting number format "000" (it is 3-digit form to be sorted correctly)
        atWorksheet.Cells(CurrentRow, 1).NumberFormat = "000"
    Else
        atWorksheet.Protect
        Exit Sub
    End If
    
    ' Moving to the second row
    CurrentRow = CurrentRow + 1
    
    ' While not the last row
    While Not TheLast(atWorksheet, CurrentRow)
        ' Setting the same formula: Previous value + 1
        atWorksheet.Cells(CurrentRow, 1).Formula = "=" & atWorksheet.Cells(CurrentRow - 1, 1).Address(False, False) & "+1"
        
        ' Setting number format "000" (it is 3-digit form to be sorted correctly)
        atWorksheet.Cells(CurrentRow, 1).NumberFormat = "000"
        
        ' Proceeding to the next row
        CurrentRow = CurrentRow + 1
    Wend
    
    ' Draw the borders
    FormatPIF atWorksheet
    
    ' Complete. Protect worksheet and Exit sub
    atWorksheet.Protect
End Sub ' RenumberWorksheet
'--------------------------------------------------------------------------------------------------
' RenumberInspectorForm
' This sub automatically renumbers issues in PIF_INSPECTOR_FORM_WORKSHEET_NAME
' worksheet. It calls The_Last function to check that all issues
' were processed
'--------------------------------------------------------------------------------------------------
Sub RenumberInspectorForm(InspectorForm As Workbook)
    Dim InspectorFormWorksheet As Worksheet
    
    ' Trying to access PIF_INSPECTOR_FORM_WORKSHEET_NAME worksheet. If error occures catch it
    On Error Resume Next
    
    Set InspectorFormWorksheet = InspectorForm.Worksheets(PIF_INSPECTOR_FORM_WORKSHEET_NAME)
    
    If Err <> 0 Then
        ' Error accured when we were trying to access PIF_INSPECTOR_FORM_WORKSHEET_NAME worksheet
        MsgBox ("Inspector Form Workbook does not contain 'Inspector Form' worksheet")
        Err.Clear
        Exit Sub
    End If
    
    RenumberWorksheet InspectorFormWorksheet
    
End Sub ' Renumber
'--------------------------------------------------------------------------------------------------
' FormatPIF
' This sub draw the borders for all the issues
' CurrentRow varuable must be set to maximum row number to draw
' border for
'--------------------------------------------------------------------------------------------------
Private Sub FormatPIF(InspectorFormWorksheet As Worksheet)
    Dim CurrentIssue As Range
    
    ' Setting the Range of cells to draw border for
    Set CurrentIssue = _
        Range(InspectorFormWorksheet.Cells(FindFirstIssue(InspectorFormWorksheet), 1), _
        InspectorFormWorksheet.Cells(CurrentRow - 1, FindLastColumn(InspectorFormWorksheet)))
    
    FormatRange CurrentIssue, xlMedium, xlMedium, xlMedium, xlMedium, xlThin, xlThin
    
End Sub ' Format_PIF
'--------------------------------------------------------------------------------------------------
' DeleteRows
' This sub deletes the selected rows
' After deleting it calls Renumber to renumber issues and redraw
' borders
'--------------------------------------------------------------------------------------------------
Sub DeleteRows()
    Dim InspectorForm As Workbook
    Dim InspectorFormWorksheet As Worksheet
    
    Set InspectorForm = FindWorkbook(FIND_INSPECTOR_FORM)
    
    If InspectorForm Is Nothing Then
        Exit Sub
    End If
    
    ' Warning the user
    If MsgBox("This operation cannot be undone!" + Chr(13) + _
      "Are you sure you want to permanently delete all selected rows " + Chr(13) + _
      "at the 'Inspector Form' worksheet?", vbYesNo, "Warning!") = vbYes Then
        On Error Resume Next
        
        ' Setting the variable
        Set InspectorFormWorksheet = InspectorForm.Worksheets(PIF_INSPECTOR_FORM_WORKSHEET_NAME)
        
        If Err <> 0 Then
            ' Error accured when we were trying to access PIF_INSPECTOR_FORM_WORKSHEET_NAME worksheet
            MsgBox ("Inspector Form Workbook does not contain 'Inspector Form' worksheet")
            Err.Clear
            Exit Sub
        End If
        
        ' Activating PIF_INSPECTOR_FORM_WORKSHEET_NAME worksheet
        InspectorFormWorksheet.Activate
        
        ' Unprotecting PIF_INSPECTOR_FORM_WORKSHEET_NAME worksheet
        InspectorFormWorksheet.Unprotect
        
        ' Deleting all rows in selection
        Selection.Rows.EntireRow.Delete
    
        ' Calling Renumber sub
        RenumberWorksheet InspectorFormWorksheet
        
        ' Protecting PIF_INSPECTOR_FORM_WORKSHEET_NAME worksheet
        InspectorFormWorksheet.Protect
    End If
End Sub ' DeleteRows
'--------------------------------------------------------------------------------------------------
' InsertRows
' This sub inserts row
' After inserting it calls Renumber to renumber issues and redraw
' the borders
'--------------------------------------------------------------------------------------------------
Sub InsertRows()
    Dim InspectorForm As Workbook
    Dim InspectorFormWorksheet As Worksheet
    Dim aRow As Range
    Dim descriptionColumnNumber As Long
    Dim firstRow As Long
    
    Set InspectorForm = FindWorkbook(FIND_INSPECTOR_FORM)
    
    If InspectorForm Is Nothing Then
        Exit Sub
    End If
    
    On Error Resume Next
    
    ' Setting the variable
    Set InspectorFormWorksheet = InspectorForm.Worksheets(PIF_INSPECTOR_FORM_WORKSHEET_NAME)
    
    firstRow = FindFirstIssue(InspectorFormWorksheet)
    
    If Err <> 0 Then
        ' Error accured when we were trying to access PIF_INSPECTOR_FORM_WORKSHEET_NAME worksheet
        MsgBox ("Inspector Form Workbook does not contain 'Inspector Form' worksheet")
        Err.Clear
        Exit Sub
    End If
    
    ' Activating PIF_INSPECTOR_FORM_WORKSHEET_NAME worksheet
    InspectorFormWorksheet.Activate
    
    ' Do not allow the user to inspert rows before the first
    For Each aRow In Selection.Rows
        If aRow.Row <= firstRow Then
            MsgBox "Cannot insert a row before the first row! Aborting operation"
            Exit Sub
        End If
    Next aRow
    
    ' Unprotecting PIF_INSPECTOR_FORM_WORKSHEET_NAME worksheet
    InspectorFormWorksheet.Unprotect
    
    ' Inserting rows
    Selection.EntireRow.Insert
    
    descriptionColumnNumber = GetColumnNumber(InspectorFormWorksheet, DESCRIPTION_CAPTION)
    
    ' Filling inserted rows with something
    If descriptionColumnNumber > 0 Then
        For Each aRow In Selection.Rows
            InspectorFormWorksheet.Cells(aRow.Row, descriptionColumnNumber).Value = "<TBD>"
            ' If the row has been inserted before First Row too
        Next aRow
    End If
    
    ' Calling Renumber sub
    RenumberWorksheet InspectorFormWorksheet
    
    ' Protecting PIF_INSPECTOR_FORM_WORKSHEET_NAME worksheet
    InspectorFormWorksheet.Protect
End Sub ' InsertRows
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'--------------------------------------------------------------------------------------------------
' Module Name: ThisWorkbook
' Copyright (c) 2001-2003, Rhonda Ltd
' Module Description:
' This module is designed to create and delete "Minutes Tools" toolbar
' Import and Get functions are implemented
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' D00.00.20     06/04/2002  Yuri Vashchenko     Initial Creation
' A00.01.05     02/20/2003  Yuri Vashchenko     Imported from Minutes Template and
'                                               Rewritten to work as Excel Addin
'--------------------------------------------------------------------------------------------------
Option Explicit

Dim theMinutes As New Minutes
Dim theInspectorForm As New InspectorForm
'--------------------------------------------------------------------------------------------------
' WorkbookOpen
' This sub shows version number during opening the file
'--------------------------------------------------------------------------------------------------
Private Sub Workbook_Open()
    theMinutes.InitializeHandler
    theInspectorForm.InitializeHandler
End Sub
Attribute VB_Name = "UpdateData"
Option Explicit
'--------------------------------------------------------------------------------------------------
' Module Name: UpdateData
' Copyright (c) 2001-2003, Rhonda Ltd
' Module Description:
' This module is designed to update list of persons or list of
' projects on hidden "Data" worksheet
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' D00.00.20     06/06/2002  Yuri Vashchenko     Imported from PIF
' D00.00.28     08/12/2002  Yuri Vashchenko     Updated to add "recommended preparation time" field
' A00.01.00     01/24/2003  Yuri Vashchenko     Updated (Removed all references to ActiveWorkbook
'--------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------
' UpdatePeople
' This sub gets engineers' names from RhondaDB
' and lists them at "Data" hidden worksheet
'--------------------------------------------------------------------------------------------------
Sub UpdatePeople()
    Dim strName As String
    Dim strAlias As String
    Dim CurrentRow As Long
    Dim DataSheet As Worksheet
    Dim WorkbookToUpdate As Workbook
    Dim NamesColumn As Long
    Dim AliasesColumn As Long
    Dim xmlDoc As Object
    Dim xmlNodeList As Object
    Dim i As Long
    Dim xmlNode As Object
    
    Const ENGINEERS_LIST_URL = "http://rhondadb.rhonda.ru/pls/public/pub_api.get_engineers_names"
    
    On Error Resume Next

    Set WorkbookToUpdate = FindWorkbook(FIND_ANY)
    
    If WorkbookToUpdate Is Nothing Then
        Exit Sub
    End If
    
    NamesColumn = WorkbookToUpdate.Names("PeopleList").RefersToRange.Column
    AliasesColumn = WorkbookToUpdate.Names("PeopleEmailAliases").RefersToRange.Column
    
    If Err.Number Then
        If NamesColumn = 0 Then
            NamesColumn = NAMES_COLUMN
        End If
        If AliasesColumn = 0 Then
            AliasesColumn = ALIASES_COLUMN
        End If
        Err.Clear
    End If
    
    ' Current Row is a counter for rows
    CurrentRow = 2
    
    ' Accessing Data Worksheet
    Set DataSheet = WorkbookToUpdate.Worksheets("Data")
    
    On Error GoTo UpdatePeople_Error
     
     ' Trying to open the file for reading
    Set xmlDoc = CreateObject("Msxml2.DOMDocument.4.0")
    xmlDoc.async = False
    xmlDoc.resolveExternals = False
    xmlDoc.Load (ENGINEERS_LIST_URL)
      
    If xmlDoc.parseError.errorCode <> 0 Then
        Err.Raise (513)
    End If
      
    Set xmlNodeList = xmlDoc.getElementsByTagName("engineer")
    For i = 0 To (xmlNodeList.Length - 1)
        Set xmlNode = xmlNodeList.item(i)
        
        strName = xmlNode.selectSingleNode("name_eng").Text
        strAlias = xmlNode.selectSingleNode("alias").Text
        
        DataSheet.Cells(CurrentRow, NamesColumn) = strName
        DataSheet.Cells(CurrentRow, AliasesColumn) = strAlias
        
        ' Proceeding to the next row
        CurrentRow = CurrentRow + 1
    Next
    
    ' Now we should update Excel's Name "PeopleList" which points the range with all persons' names
    If CurrentRow > 2 Then
        WorkbookToUpdate.Names.Add Name:="PeopleList", RefersTo:=Range(DataSheet.Cells(2, NamesColumn), DataSheet.Cells(CurrentRow - 1, NamesColumn))
        WorkbookToUpdate.Names.Add Name:="PeopleEmailAliases", RefersTo:=Range(DataSheet.Cells(2, AliasesColumn), DataSheet.Cells(CurrentRow - 1, AliasesColumn))
    End If
    
    MsgBox i + 1 & " name(s) successfully loaded."
    
    ' Completed
    Exit Sub

' If failed to retrieving peoples list
UpdatePeople_Error::
    MsgBox "Error Accessing the Engineers list (" & ENGINEERS_LIST_URL & ")"

End Sub ' Update_People
'--------------------------------------------------------------------------------------------------
' UpdateProjects
' This sub reads all project names from RhondaDB via HTTP by URL which is at
' "ProjectListPath" Custom property
' and lists them at "Data" hidden worksheet
'--------------------------------------------------------------------------------------------------
Sub UpdateProjects()
    Dim CurrentRow As Long
    Dim DataSheet As Worksheet
    Dim WorkbookToUpdate As Workbook
    Dim arrProjects() As String
    Dim strProjects As String
    Dim n As Variant
    Dim xmlDoc As Object
    Dim strURL As String
    Dim xmlNodeList As Object
    Dim i As Long
    Dim xmlNode As Object

    Set WorkbookToUpdate = FindWorkbook(FIND_ANY)
    
    If WorkbookToUpdate Is Nothing Then
        Exit Sub
    End If
    
    ' Current Row is a counter for rows
    CurrentRow = 2
    
    ' Accessing Data Worksheet
    Set DataSheet = WorkbookToUpdate.Worksheets("Data")
    
    ' Getting the name of the file to read list of projects from
    strURL = WorkbookToUpdate.CustomDocumentProperties("ProjectListURL").Value
    
    ' Trying to open the file for reading
    On Error GoTo Display_Error:
    
    Set xmlDoc = CreateObject("Msxml2.DOMDocument.4.0")
        xmlDoc.async = False
        xmlDoc.resolveExternals = False
        xmlDoc.Load (strURL)
    If (xmlDoc.parseError.errorCode <> 0) Then
        Dim myErr As Error
        Set myErr = xmlDoc.parseError
        MsgBox ("XML error " & myErr.Reason)
    Else
      Set xmlNodeList = xmlDoc.getElementsByTagName("item")
        For i = 0 To (xmlNodeList.Length - 1)
            Set xmlNode = xmlNodeList.item(i)
            If xmlNode.getAttribute("id") < 0 Then
                strProjects = strProjects & xmlNode.selectSingleNode("code").Text & ";"
            End If
        Next
    End If
    
    strProjects = strProjects & PERMANENT_PROJECTS
    arrProjects = Split(strProjects, ";", -1, 1)
    
    For Each n In arrProjects
        If Trim(n) <> "" Then
            DataSheet.Cells(CurrentRow, 1) = n
            CurrentRow = CurrentRow + 1
        End If
    Next
            
    ' Display errors and stop execution if any
    On Error GoTo 0
    
    ' Now we should update Excel's Name "ProjectList" which points the range with all projects' names
    If CurrentRow > 2 Then
        WorkbookToUpdate.Names.Add Name:="ProjectList", RefersTo:=Range(DataSheet.Cells(2, 1), DataSheet.Cells(CurrentRow - 1, 1))
    Else
        WorkbookToUpdate.Names.Add Name:="ProjectList", RefersTo:=Range(DataSheet.Cells(2, 1), DataSheet.Cells(1, 1))
    End If
    
    ' Sorting all projects in accending order
    WorkbookToUpdate.Names("ProjectList").RefersToRange.Sort Key1:=WorkbookToUpdate.Names("ProjectList").RefersToRange
    ' Completed
    Exit Sub
' If failed to retrieving projects list
Display_Error:
    MsgBox "Error Accessing the projects list (" & strURL & ")"
    Exit Sub

End Sub ' Update_Projects

Attribute VB_Name = "WorkbookFinder"
Option Explicit
'--------------------------------------------------------------------------------------------------
' Module Name: FindWorkbook
' Copyright (c) 2003, Rhonda Ltd
' Module Description:
' This module is designed to Find and select document
'    it can be Inspector Form or Minutes
'--------------------------------------------------------------------------------------------------
'
' Revision History
' Version       Date        Author              Description
' A00.01.00     01/22/2003  Yuri Vashchenko     Initial Creation
' A00.01.05     02/20/2003  Yuri Vashchenko     Joined Inspector Form, Minutes and AnyWorkbook
'--------------------------------------------------------------------------------------------------
' Definitions of global variables

' Global Constants
Public Const MAX_FORMS = 150            ' Maximum number of opened both inspector forms and minutes

Private Const INSPECTOR_FORM_SUBJECT = "Project Inspector Form"
Private Const MINUTES_SUBJECT = "Project Inspection Minutes"

Public Const MINUTES_TEMPLATE_VOB_PATH = _
                 "/vob/RhondaProcess/Verification_and_Validation/Templates_References/Minutes_Template.xls"

Public Const INSPECTOR_FORM_TEMPLATE_VOB_PATH = _
                 "/vob/RhondaProcess/Verification_and_Validation/Templates_References/Inspector_Form_Template.xls"
'--------------------------------------------------------------------------------------------------
' AskGetAndOpenWorkbook
' This function
'   Asks the user if he/she wants to get needed workbook from the vob and
'   if the user selects yes gets and opens corresponding workbook
' Input Parameters:
'   WhatToFind: Specified what type of workbook to find
'       FIND_MINUTES         To Get and Open Minutes;
'       FIND_INSPECTOR_FORM  To Get and Open Inspector Form and
'       FIND_ANY            To Get and Open either Inspector Form or Minutes
'--------------------------------------------------------------------------------------------------
Private Function AskGetAndOpenWorkbook(WhatToFind As Long) As Workbook
    Dim MessageText As String
    Dim PathToForm As String
    Dim result As Long
    
    ' Prepare message text (request) to ask the user
    Select Case WhatToFind
        Case FIND_MINUTES
            MessageText = "This Macro requires that Minutes Template workbook is opened" + _
                Chr(13) + "Do you want to get empty Minutes Template from the vob and open it?"
        Case FIND_INSPECTOR_FORM
            MessageText = "This Macro requires that Inspector Form Template workbook is opened" + _
                Chr(13) + _
                "Do you want to get empty Inspector Form Template from the vob and open it?"
        Case FIND_ANY
            MessageText = "This Macro requires that Inspector Form Template or Minutes " + _
            "Template workbook is opened" + Chr(13) + _
            "Do you want to get empty Inspector Form Template from the vob and open it?"
    End Select
    
    ' Ask the user if he/she wants to get needed workbook from the vob
    If MsgBox(MessageText, vbYesNo, "Form not found") = vbYes Then
        ' Select appropriate template vob path and set it to PathToForm variable
        Select Case WhatToFind
            Case FIND_MINUTES
                PathToForm = MINUTES_TEMPLATE_VOB_PATH
            Case FIND_INSPECTOR_FORM
                PathToForm = INSPECTOR_FORM_TEMPLATE_VOB_PATH
            Case FIND_ANY
                MessageText = "Do you want to open Inspector Form Template or Minutes Template?" + _
                    Chr(13) + "Please select 'Yes' for Inspector Form or 'No' for Minutes Template"
                result = MsgBox(MessageText, vbYesNoCancel, "Form not found")
                If result = vbCancel Then
                    Set AskGetAndOpenWorkbook = Nothing
                    Exit Function
                ElseIf result = vbYes Then
                    PathToForm = INSPECTOR_FORM_TEMPLATE_VOB_PATH
                Else
                    PathToForm = MINUTES_TEMPLATE_VOB_PATH
                End If ' Result = vbCancel
        End Select
    Else
        ' User doesn't want to get form from the vob and open it
        Set AskGetAndOpenWorkbook = Nothing
        Exit Function
    End If ' MsgBox(MessageText, vbYesNo, "Form not found") = vbYes
    
    ' Trying to get form from the vob
    PathToForm = GetDocument(PathToForm)
    
    ' Setting result
    If PathToForm = "" Then
        Set AskGetAndOpenWorkbook = Nothing
        Exit Function
    Else
        Set AskGetAndOpenWorkbook = Application.Workbooks.Open(PathToForm)
    End If
End Function ' AskGetAndOpenWorkbook
'--------------------------------------------------------------------------------------------------
' Function FindWorkbook
' This function looks for opened workbooks and
'   Asks the user to select the one to work with
' Input Parameters:
'   WhatToFind: Specified what type of workbook to find
'       FIND_MINUTES         To Look for Minutes;
'       FIND_INSPECTOR_FORM  To Look for Inspector Form and
'       FIND_ANY            To Look for both, Inspector Form and Minutes
'--------------------------------------------------------------------------------------------------
Public Function FindWorkbook(WhatToFind As Long) As Workbook
    Dim tempWorkbook As Workbook
    Dim FormName(MAX_FORMS) As String
    Dim NumberOfFormsFound As Long
    Dim i As Long
    Dim DocSubject As String
    
    Set tempWorkbook = ActiveWorkbook
    
    If tempWorkbook Is Nothing Then
        Set FindWorkbook = AskGetAndOpenWorkbook(WhatToFind)
        Exit Function
    End If
    
    DocSubject = tempWorkbook.BuiltinDocumentProperties("Subject")
    
    ' If current window is searching Form then we will not serarch for it.
    Select Case WhatToFind
        Case FIND_MINUTES
            If DocSubject = MINUTES_SUBJECT Then
                Set FindWorkbook = tempWorkbook
                Exit Function
            End If
        Case FIND_INSPECTOR_FORM
            If DocSubject = INSPECTOR_FORM_SUBJECT Then
                Set FindWorkbook = tempWorkbook
                Exit Function
            End If
        Case FIND_ANY
            If (DocSubject = INSPECTOR_FORM_SUBJECT) Or (DocSubject = MINUTES_SUBJECT) Then
                Set FindWorkbook = tempWorkbook
                Exit Function
            End If
    End Select
    
    NumberOfFormsFound = 0
    
    For Each tempWorkbook In Application.Workbooks
        DocSubject = tempWorkbook.BuiltinDocumentProperties("Subject")
        Select Case WhatToFind
            Case FIND_MINUTES
                If DocSubject = MINUTES_SUBJECT Then
                    ' We have found form! Increase total number
                    NumberOfFormsFound = NumberOfFormsFound + 1
                    FormName(NumberOfFormsFound) = tempWorkbook.Name
                End If
            Case FIND_INSPECTOR_FORM
                If DocSubject = INSPECTOR_FORM_SUBJECT Then
                    ' We have found form! Increase total number
                    NumberOfFormsFound = NumberOfFormsFound + 1
                    FormName(NumberOfFormsFound) = tempWorkbook.Name
                End If
            Case FIND_ANY
                If (DocSubject = INSPECTOR_FORM_SUBJECT) Or (DocSubject = MINUTES_SUBJECT) Then
                    ' We have found form! Increase total number
                    NumberOfFormsFound = NumberOfFormsFound + 1
                    FormName(NumberOfFormsFound) = tempWorkbook.Name
                End If
        End Select
    Next tempWorkbook
    
    If NumberOfFormsFound = 0 Then
        Set FindWorkbook = AskGetAndOpenWorkbook(WhatToFind)
        Exit Function
    End If
    
    If NumberOfFormsFound = 1 Then
        Set FindWorkbook = Application.Workbooks(FormName(1))
    Else
        ' Loading Form
        Load SelectFromListForm
        
        ' Beginning to initilize it
        Select Case WhatToFind
            Case FIND_MINUTES
                With SelectFromListForm
                    .Caption = "Select Minutes"
                    .Label1.Caption = "Available Minutes:"
                End With
            Case FIND_INSPECTOR_FORM
                With SelectFromListForm
                    .Caption = "Select Inspector Form"
                    .Label1.Caption = "Available Inspector Forms:"
                End With
            Case FIND_ANY
                With SelectFromListForm
                    .Caption = "Select Form"
                    .Label1.Caption = "Available Forms:"
                End With
        End Select
        
        With SelectFromListForm.ListBox
            ' Clearing List box with minutes names
            .Clear
            .MultiSelect = fmMultiSelectSingle
            
            ' Adding items to ListBox
            For i = 1 To NumberOfFormsFound
                ' Adding item ListBox
                .AddItem (FormName(i))
            Next i
            
            ' Setting Selected workspace name to the first one
            .ListIndex = 0
            
            ' Displaying the form to the user
            SelectFromListForm.Show
            
            ' If "Cancel" was pressed
            If .ListIndex = -1 Then
                Set FindWorkbook = AskGetAndOpenWorkbook(WhatToFind)
                Exit Function
            End If
            
            ' Congratulations! User selected some Workspace Name and we know which!
            Set FindWorkbook = Application.Workbooks(FormName(.ListIndex))
        End With ' SelectFromListForm.ListBox
    End If ' NumberOfFormsFound = 1
End Function ' FindWorkbook

' InQuest injected base64 decoded content
' "{"u
' "{"u
' "{)y
' j{Ly
' "{)y
' +x)h

INQUEST-PP=macro
