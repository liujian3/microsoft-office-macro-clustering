Attribute VB_Name = "FormattingModule"
Option Explicit
Sub FormatReport()
    
    Dim ThisWkSht As Worksheet
    Dim AggStatsStartRW As Integer, SalesPenStartRW As Integer, i As Integer, rw As Integer, NumConfigColumns As Integer, LastReportRW As Integer
    
    Application.ScreenUpdating = False
    ThisWorkbook.Activate
    Set ThisWkSht = ActiveSheet
    
    'Get the starting row number for the Aggregate Stats (Header row starts at Sect 3 item 0)
    AggStatsStartRW = 1
    Do
        AggStatsStartRW = AggStatsStartRW + 1
    Loop Until (ThisWkSht.Range("A" & CStr(AggStatsStartRW)).Value = "3" And ThisWkSht.Range("B" & CStr(AggStatsStartRW)).Value = "0")
         
    'Get the number of Config Columns
    i = 5
    While (ThisWkSht.Cells(9, i).Value <> "")
            NumConfigColumns = NumConfigColumns + 1
            i = i + 1
    Wend
        
    '-----Report Formatting-----
       
        'Merge and Center the report titles (there are 4 title rows, each must be merged separately)
        For rw = 1 To 4
            With ThisWkSht.Range(Cells(rw, 3), Cells(rw, NumConfigColumns + 6))
                .HorizontalAlignment = xlCenter
                .MergeCells = True
            End With
        Next rw
            
        'Merge and Center Preset Quantities title
        With ThisWkSht.Range("E6", Cells(6, NumConfigColumns + 4))
            .HorizontalAlignment = xlCenter
            .MergeCells = True
        End With
            
        'Bold Sum and Sales Wtd Avg cells
        ThisWkSht.Range(Cells(7, NumConfigColumns + 5), Cells(7, NumConfigColumns + 6)).Font.Bold = True
        ThisWkSht.Range(Cells(7, NumConfigColumns + 5), Cells(7, NumConfigColumns + 6)).Interior.Pattern = xlNone
        ThisWkSht.Range(Cells(8, NumConfigColumns + 5), Cells(8, NumConfigColumns + 6)).Interior.Pattern = xlNone
        
        'Bold and underline section header rows
        With ThisWkSht.Range("C" & CStr(AggStatsStartRW) & ",C" & CStr(AggStatsStartRW + 8) & ",C" & CStr(AggStatsStartRW + 15)).Font
            .Bold = True
            .Underline = xlUnderlineStyleSingle
        End With
            
        'Bold Availability and Balanced Availability rows
        ThisWkSht.Range(Cells(AggStatsStartRW + 12, 3), Cells(AggStatsStartRW + 12, NumConfigColumns + 6)).Font.Bold = True
        ThisWkSht.Range(Cells(AggStatsStartRW + 14, 3), Cells(AggStatsStartRW + 14, NumConfigColumns + 6)).Font.Bold = True
            
        'Bold Aggregate Sales Penetrations option titles
        SalesPenStartRW = AggStatsStartRW + 16
        While (ThisWkSht.Range("A" & CStr(SalesPenStartRW)).Value = "6")
            If (ThisWkSht.Range("B" & CStr(SalesPenStartRW)).Value = "0") Then
                ThisWkSht.Range("C" & CStr(SalesPenStartRW)).Font.Bold = True
            End If
            SalesPenStartRW = SalesPenStartRW + 1
        Wend
        LastReportRW = SalesPenStartRW
                
        'Remove any <BR> tags that make it through Excel writer
        Cells.Replace What:="<BR>", Replacement:=" ", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False
                
        'Remove Extra shading
        ThisWkSht.Range(Cells(7, NumConfigColumns + 7), Cells(100, 100)).Interior.Pattern = xlNone
        ThisWkSht.Columns(NumConfigColumns + 6).EntireColumn.AutoFit
        
        '----------------------------Additional Cell formating----------------------------
        ThisWkSht.Range("C1").Font.Size = 14
        '----Area AggStats Section----
        'Avg MSRP - Currency
        ThisWkSht.Range(Cells(AggStatsStartRW + 1, 5), Cells(AggStatsStartRW + 1, NumConfigColumns + 6)).NumberFormat = "$#,##0"
        'Units Sold
        ThisWkSht.Range(Cells(AggStatsStartRW + 2, 5), Cells(AggStatsStartRW + 2, NumConfigColumns + 6)).NumberFormat = "#,##0"
        '% Sold
        ThisWkSht.Range(Cells(AggStatsStartRW + 3, 5), Cells(AggStatsStartRW + 3, NumConfigColumns + 6)).NumberFormat = "0%"
        'Inventory
        ThisWkSht.Range(Cells(AggStatsStartRW + 4, 5), Cells(AggStatsStartRW + 4, NumConfigColumns + 6)).NumberFormat = "#,##0"
        'Availability
        ThisWkSht.Range(Cells(AggStatsStartRW + 5, 5), Cells(AggStatsStartRW + 5, NumConfigColumns + 6)).NumberFormat = "#,##0"
        '% Availability
        ThisWkSht.Range(Cells(AggStatsStartRW + 6, 5), Cells(AggStatsStartRW + 6, NumConfigColumns + 6)).NumberFormat = "0%"
        'Relative Time to Turn
        ThisWkSht.Range(Cells(AggStatsStartRW + 7, 5), Cells(AggStatsStartRW + 7, NumConfigColumns + 6)).NumberFormat = "0.0"
        '----Dealer Stats Section----
        'Units Sold
        ThisWkSht.Range(Cells(AggStatsStartRW + 9, 5), Cells(AggStatsStartRW + 9, NumConfigColumns + 6)).NumberFormat = "#,##0"
        '% Sold
        ThisWkSht.Range(Cells(AggStatsStartRW + 10, 5), Cells(AggStatsStartRW + 10, NumConfigColumns + 6)).NumberFormat = "0%"
        'Inventory
        ThisWkSht.Range(Cells(AggStatsStartRW + 11, 5), Cells(AggStatsStartRW + 11, NumConfigColumns + 6)).NumberFormat = "#,##0"
        'Availability
        ThisWkSht.Range(Cells(AggStatsStartRW + 12, 5), Cells(AggStatsStartRW + 12, NumConfigColumns + 6)).NumberFormat = "#,##0"
        '% Availability
        ThisWkSht.Range(Cells(AggStatsStartRW + 13, 5), Cells(AggStatsStartRW + 13, NumConfigColumns + 6)).NumberFormat = "0%"
        
        'Balanced Availability - Don't round, because it is pre-rounded
        ThisWkSht.Range(Cells(AggStatsStartRW + 14, 5), Cells(AggStatsStartRW + 14, NumConfigColumns + 6)).NumberFormat = "#,##0"
       
        Dim endRow As Integer
        endRow = AggStatsStartRW + 15
        While (Cells(endRow, 1) <> "")
            endRow = endRow + 1
        Wend
        endRow = endRow - 1
        LastReportRW = endRow
                        
        Dim BalancedAvailability As Integer
        Dim Availability As Integer
        Dim col As Integer
        
        For col = 5 To NumConfigColumns + 5
            Availability = Round(Cells(AggStatsStartRW + 12, col), 0)
            BalancedAvailability = Round(Cells(AggStatsStartRW + 14, col), 0)
            If (BalancedAvailability - Availability >= 2) Then
                Cells(AggStatsStartRW + 12, col).Interior.ColorIndex = 4
                Cells(AggStatsStartRW + 14, col).Interior.ColorIndex = 8
            End If
        Next
       
        'if sold units=0, Relative Time to Turn should be "N/A"
        Dim unitsSold As Integer
        unitsSold = -1
        For col = 5 To NumConfigColumns + 4
            unitsSold = Cells(AggStatsStartRW + 2, col).Value
            If (unitsSold = 0) Then
                Cells(AggStatsStartRW + 7, col).Value = "N/A"
                Cells(AggStatsStartRW + 7, col).HorizontalAlignment = xlRight
            End If
        Next
        
       'Pass the starting cell for the 1st cell that needs to be formatted
        Dim j As Integer
        For i = 1 To 52
            If i >= 5 Then
                If i <= 52 Then
                    For j = 0 + AggStatsStartRW To endRow
                        Call FormattingModule.FormatSalesPen(j + 17, i)
                    Next
                End If
            End If
        Next
        
        'Bold the titles for options
        For j = 0 + AggStatsStartRW To endRow
            Call FormattingModule.FormatTitlesBold(j + 16)
        Next
        
        'Hide the first two columns
        ThisWkSht.Range("A:B").Columns.Hidden = True
        
        'Page Setup
        With ThisWkSht.PageSetup
            .LeftMargin = Application.InchesToPoints(0.5)
            .RightMargin = Application.InchesToPoints(0.5)
            .TopMargin = Application.InchesToPoints(0.5)
            .BottomMargin = Application.InchesToPoints(0.5)
            .HeaderMargin = Application.InchesToPoints(0.3)
            .FooterMargin = Application.InchesToPoints(0.3)
            .PrintArea = ThisWkSht.Range(Cells(1, 3), Cells(LastReportRW - 1, NumConfigColumns + 6)).Address()
            .Zoom = False
            .FitToPagesWide = 1
            .FitToPagesTall = 1
        End With
            
        ThisWkSht.Name = "Inventory Balancing"
        Application.ScreenUpdating = True
End Sub

Sub FormatTitlesBold(row As Integer)
    Range(Cells(row, 4).Address).Select
    If ActiveCell.Text = "" Then
        Range(Cells(row, 3).Address).Select
        ActiveCell.Font.Bold = True
    End If
End Sub

Sub FormatSalesPen(row As Integer, col As Integer)
    
    'row and col are initial starting points for Aggregate Sales Penetrations
    Range(Cells(row, col).Address).Select
    If ActiveCell.Text <> "" Then
    Dim cellLen As Integer
    Dim parenPos As Integer
    Dim beforeParenLen As Integer
    Dim tempString As String
    parenPos = InStr(1, ActiveCell.Text, "(", 1)
    cellLen = Len(ActiveCell.Text)
    If cellLen > 0 Then
        beforeParenLen = parenPos - 1
        tempString = Left(ActiveCell.Text, parenPos - 1)
        If tempString = "0 " Then
            tempString = Mid(ActiveCell.Text, parenPos, Len(ActiveCell.Text) - 1)
            If tempString = "(0)" Then
                With ActiveCell.Font
                    .ColorIndex = 15
                End With
            ElseIf tempString = "(100)" Then
                With ActiveCell.Font
                    .ColorIndex = 15
                End With
            Else
                With ActiveCell.Font
                    .ColorIndex = 1
                End With
            End If
        ElseIf tempString = "100 " Then
            tempString = Mid(ActiveCell.Text, parenPos, Len(ActiveCell.Text) - 1)
            If tempString = "(0)" Then
                With ActiveCell.Font
                .ColorIndex = 15
                End With
            ElseIf tempString = "(100)" Then
                With ActiveCell.Font
                    .ColorIndex = 15
                End With
            Else
                With ActiveCell.Font
                    .ColorIndex = 1
                End With
            End If
        Else
            With ActiveCell.Font
                .ColorIndex = 1
            End With
        End If

        ActiveCell.HorizontalAlignment = xlRight
        ActiveCell.Font.Size = 8
        
    End If
    End If
    
End Sub


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' Revised Nov 3

Sub Spread_Orders_Click()
    
        Dim ThisWkSht As Worksheet
        Dim AreaPCTSoldRW As Integer, DealerAvailabilityRW As Integer, i As Integer, NumConfigColumns As Integer
        
        ThisWorkbook.Activate
        Set ThisWkSht = ActiveSheet
    
   
        'Get the row number for the of the %Sold row (Sect 3 Item 3)
        AreaPCTSoldRW = 1
        Do
            AreaPCTSoldRW = AreaPCTSoldRW + 1
        Loop Until (ThisWkSht.Range("A" & CStr(AreaPCTSoldRW)).Value = "3" And ThisWkSht.Range("B" & CStr(AreaPCTSoldRW)).Value = "3")
         
        'Get the row number for the of the Dealer Availability row (Sect 4 Item 5)
        DealerAvailabilityRW = 1
        Do
            DealerAvailabilityRW = DealerAvailabilityRW + 1
        Loop Until (ThisWkSht.Range("A" & CStr(DealerAvailabilityRW)).Value = "4" And ThisWkSht.Range("B" & CStr(DealerAvailabilityRW)).Value = "5")
                  
        'Get the number of Config Columns
        i = 5
        While (ThisWkSht.Cells(9, i).Value <> "")
              NumConfigColumns = NumConfigColumns + 1
              i = i + 1
        Wend
    
    
    Const intMaxNumPConfigs = 100
    Const dblHiRunnerPref = 1.0001
    
    Dim intII As Integer
    Dim intJJ As Integer
    Dim intIImax As Integer
    Dim dblMax As Double
    Dim dblRegionSales(1 To intMaxNumPConfigs) As Double
    Dim intDealerAvailable(1 To intMaxNumPConfigs) As Integer
    Dim intDealerOpportunity(1 To intMaxNumPConfigs) As Integer
    Dim intConstrained(1 To intMaxNumPConfigs) As Integer
    Dim intTotalToOrder As Integer
    Dim intLeftToOrder As Integer
    Dim intNumToOrder As Integer
    Dim intIIMaxOpp As Integer
    Dim dblMaxOpp As Double
    Dim intTotalDealerAvailable As Integer
    Dim strTemp As String
    Dim intTemp As Integer
    Dim intTotalTemp As Integer
    Dim Response
    Dim blnBlank As Boolean
    
    ' Initialize
    For intII = 1 To intMaxNumPConfigs
      intConstrained(intII) = -1
    Next intII
    
    ThisWkSht.Select
    
    ' Get data
    intTotalToOrder = ThisWkSht.Range("C7").Value
    intLeftToOrder = intTotalToOrder
    intTotalDealerAvailable = 0
    intTotalTemp = 0
    For intII = 1 To NumConfigColumns
      dblRegionSales(intII) = Range("D" + CStr(AreaPCTSoldRW)).Offset(0, intII).Value
      intDealerAvailable(intII) = Range("D" + CStr(DealerAvailabilityRW)).Offset(0, intII).Value
      intTotalDealerAvailable = intTotalDealerAvailable + intDealerAvailable(intII)
      
      ' Read and check preset order counts
      strTemp = Range("D7").Offset(0, intII).Value
      blnBlank = False
      If strTemp = "" Then
        blnBlank = True
      End If
      If (Not (blnBlank) And Not (IsNumeric(strTemp))) Then
        Response = MsgBox("Preset order counts entered in row 7 must be integers greater than or equal to 0.  Try again.", , "Inventory Balancer error message:")
        Exit Sub
      End If
      If Not (blnBlank) Then
        intTemp = CInt(strTemp)
        If CInt(strTemp) <> CDbl(strTemp) Then
          Response = MsgBox("Preset order counts entered in row 7 must be integers.  Try again.", , "Inventory Balancer error message:")
          Exit Sub
        End If
        If intTemp < 0 Then
          Response = MsgBox("Preset order counts entered in row 7 must be greater than or equal to 0.  Try again.", , "Inventory Balancer error message:")
          Exit Sub
        End If
        
        intTotalTemp = intTotalTemp + intTemp
        intConstrained(intII) = intTemp
        intDealerOpportunity(intII) = intTemp
        intDealerAvailable(intII) = intDealerAvailable(intII) + intTemp
        intLeftToOrder = intLeftToOrder - intTemp
      End If
    Next intII
    
    If intTotalTemp > intTotalToOrder Then
      Response = MsgBox("The preset order counts in row 7 are greater than the total to order in cell C7.  Try again.", , "Inventory Balancer error message:")
      Exit Sub
    End If
    
    ' Allocate intLeftToOrder one at a time
    For intJJ = 1 To intLeftToOrder
      intIIMaxOpp = -1
      dblMaxOpp = -1
      For intII = 1 To NumConfigColumns
        
        If intConstrained(intII) = -1 Then  ' This partial config is not constrained
          If (dblMaxOpp < dblRegionSales(intII) * dblHiRunnerPref - intDealerAvailable(intII) / (intTotalDealerAvailable + intLeftToOrder)) Then
            intIIMaxOpp = intII
            dblMaxOpp = dblRegionSales(intII) * dblHiRunnerPref - intDealerAvailable(intII) / (intTotalDealerAvailable + intLeftToOrder)
          End If
        End If ' This partial config is not constrained
      Next intII
      intDealerOpportunity(intIIMaxOpp) = intDealerOpportunity(intIIMaxOpp) + 1
      intDealerAvailable(intIIMaxOpp) = intDealerAvailable(intIIMaxOpp) + 1
    Next intJJ
    
    'write results
    For intII = 1 To NumConfigColumns
      If intDealerOpportunity(intII) > 0 Then
        Range("D8").Offset(0, intII).Value = intDealerOpportunity(intII)
      ElseIf (intDealerOpportunity(intII) = 0) Then
        Range("D8").Offset(0, intII).Value = Range("D7").Offset(0, intII).Value
      Else
        Range("D8").Offset(0, intII).Value = ""
      End If
    Next intII

End Sub



Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()

    On Error GoTo ErrHandler:
    Sheets("Si2InvRawTemplate").Visible = True
    Sheets("Si2InvRawTemplate").Select

        
    Call FormattingModule.FormatReport
    
    'Remove the FormattingModule
    Application.DisplayAlerts = False
    On Error Resume Next
    ThisWorkbook.VBProject.VBComponents.Remove ThisWorkbook.VBProject.VBComponents("FormattingModule")
    Application.DisplayAlerts = True
    
    Sheets("Export Message").Visible = False
    Exit Sub

ErrHandler:
    Sheets("Export Message").Visible = True
    Sheets("Si2InvRawTemplate").Visible = False
End Sub

' InQuest injected base64 decoded content
' )^J)
' /j)ZnW

INQUEST-PP=macro
