Attribute VB_Name = "Arbeitszeiten"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmbkmin, 483, 0, MSForms, CommandButton"
Attribute VB_Control = "cmbGotoHeute, 482, 1, MSForms, CommandButton"


Option Explicit

Private Sub cmbkmin_Click()
   ActiveWindow.WindowState = xlNormal
    With ActiveWindow
        .Top = 4
        .Left = -0.5
    End With
    With ActiveWindow
        .Width = 765.75
        .Height = 253.5
    End With
    
    ActiveWindow.NewWindow
    With ActiveWindow
        .Top = 253.75
        .Left = 7.75
    End With
    With ActiveWindow
        .Width = 757.5
        .Height = 216
    End With
    Sheets("Spesen und Auslagen").Visible = True
    Sheets("Spesen und Auslagen").Select
    
    ActiveWindow.SmallScroll Down:=5
    
    'HWR:
    Windows.Arrange ArrangeStyle:=xlHorizontal
End Sub

Private Sub Worksheet_Activate()
' Autor: PFU
' Datum: 28.06.2001
' Zweck: Men|fffd|punkte aktivieren

    '' SFE 2014-04-11
    If isBulkImport() Then
        Exit Sub
    End If
    
    SetEnableToggleMenuButton True
    SetEnableToggleAllComment True

End Sub

Private Sub cmbGotoHeute_Click()
  'Dim A
  '  A = Day(Date) + 6
  '  Arbeitszeiten.Range("D4").Activate
  '  Debug.Print "{right " & A & "}{left 7}"
  '  SendKeys "{right " & A & "}{left 7}"

' FLE 16.08.2002
' Springen zu Heute soll auch bei angezeigten toggle kommentaren erfolgen
    Application.ScreenUpdating = False
        
        Arbeitszeiten.Range("D3").Activate
        While ActiveCell.Value < Date
            ActiveCell.offset(RowOffset:=0, columnOffset:=1).Activate
        Wend
        
        If ActiveCell.Value = Date Then
            ActiveCell.offset(RowOffset:=1, columnOffset:=0).Activate
            SendKeys "{DOWN}{UP}"
        Else
            Arbeitszeiten.Range("D3").Activate
            SendKeys "{DOWN}"
        End If
        
    Application.ScreenUpdating = True

End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
'FLE 16.08.2002
'Zweck: bei rechter maustaste auf zelle pr|fffd|fen, ob auswahlliste
'        angezeigt werden soll.
'        ist hier sonderfall, da projektelisten f|fffd|r interne- und kunden- projekte

    If IsCell(Target) Then
        If IsInListActivationRange(Target, "LAR_ArbeitszeitenProjekte") Then
            ListBoxProjekte Target, Cancel
        End If
    End If
            
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Pr|fffd|fen verschiedener Eingaben auf G|fffd|ltigkeit

Dim r As Range
Dim OneCell As Boolean
Dim Cell As Range

    ' Bei Import kein Check
    '' SFE 2014-04-11
    If isBulkImport() Then
        Exit Sub
    End If
        
    If UserInputCheck > 0 Then Exit Sub

    ' Routine |fffd|ndern ggf zellwerte. Dann keine 2. Abarbeitung!
        Static Running As Boolean
        If Running Then Exit Sub
        Running = True
        ScreenUpdating False
    
    ' Pr|fffd|fen ob Target eine Celle oder mehrere Zellen
        OneCell = IsCell(Target)
    
    ' a-z in A-Z wandeln sofern ein Char
        
        If OneCell Then
            If IsOneLowerChar(Target) Then Target = UCase(Target)
        
        Else
            For Each Cell In Target.Cells
                If IsOneLowerChar(Cell) Then Target = UCase(Cell)
            Next
        End If
        
    ' 1. Test auf Doppelte Projektnummer
    ' nur, wenn Target in Spalte A und
    ' Zeile Inputzeile_Min_Arbeitszeit bis Inputzeile_Max_Arbeitszeit
    
        CheckProjectNum Target
    
    ' 2. Test auf eintrag in Zeile, die schon ProjectID hat.
    
        ' a.) Im Eingabebereich?
            
            If OneCell Then
                CheckProjectNumAlready Target
            Else
                ' falls user viele zellen Kopiert
                For Each Cell In Target.Cells
                    CheckProjectNumAlready Cell
                Next
            End If
            
    ' 3. Test auf eingabe eines Kommentars
        Dim T As Range
            If OneCell Then
                copyComment Target
            Else
                ' falls user viele zellen Kopiert
                For Each T In Target.Cells
                    copyComment T
                Next
            End If
    
    ' R|fffd|cksetzen Doppeleinsprungbremse
        Running = False
        ScreenUpdating True
    
End Sub

Sub copyComment(Target As Range)
' Autor: PFU
' Datum: 17.06.2001
' Zweck: Kopiert nach eingabe eine Arbeitszeitkommentar diesen
'        in den Kommentar der linken nachbarzelle zwecks
'        |fffd|bersicht, welche Komentare schon da sind.

    Dim r As Range
    Dim k As Comment
   
    Dim Txt As String
    Dim lokalRangeOffset
  
   ' 1. vorkommen einer Kommentarzell in Spalte 5, dann jede 4. Spalte
        ' Wo sind wir gerade? -1 = Stundenspalte; 0 = kommentar, +1 = Von ; +2 = Bis
        lokalRangeOffset = ((Target.Column - 5) Mod 4)
        
        
    ' Wenn Zelle leer
    If Target = "" Then
        '{|fffd| 24.07.2001 l|fffd|schen des Kommentars wenn Zelle leer ist}
        ' Wenn Stundenspalte und zelle = "" dann Block l|fffd|schen
            If lokalRangeOffset = -1 Then
            
                Target.offset(0, 1) = ""
                Set k = Target.Comment
                If Not k Is Nothing Then k.Delete
                Target.offset(0, 2) = ""
                Target.offset(0, 3) = ""
            End If
        '{|fffd| 24.07.2001}
        
        'FLE 19.08.2002
    ' Bei Import ende
        If UserInputCheck > 0 Then Exit Sub
       ' Exit Sub          ' diese zeile heraus genommen
    End If
    
   
   
    If IsKommentarEingabe(Target) Then
        ' OK akuelle Zelle ist eine Kommentarzelle.
            Set r = Target.offset(0, -1 - lokalRangeOffset)
        
        ' Schutz aufheben
            r.Parent.Unprotect ProtectKW
            If Target.offset(0, -lokalRangeOffset).Value <> "" Then
                Txt = "Text: " & Target.offset(0, -lokalRangeOffset).Value & vbLf
            End If
            If (Target.offset(0, 1 - lokalRangeOffset).Value) <> "" Then
                Txt = Txt & "Von : " & CDate(Target.offset(0, 1 - lokalRangeOffset).Value) & vbLf
            End If
            If (Target.offset(0, 2 - lokalRangeOffset).Value) <> "" Then
            Txt = Txt & "Bis : " & CDate(Target.offset(0, 2 - lokalRangeOffset).Value) & vbLf
            End If
            If r.Comment Is Nothing Then
                If Not (IsEmpty(Txt) Or Txt = "") Then
                    Set k = r.AddComment(Txt)
                    FormatComment k
                End If
            Else
                If IsEmpty(Txt) Or Txt = "" Then
                    r.Comment.Delete
                Else
                    Set k = r.Comment
                    k.Text Txt
                    FormatComment k
                End If
            End If
            
'' SFE 2014-04-11
        If Not isBulkImport() Then
            r.Parent.Protect Password:=ProtectKW
        End If
    End If
End Sub

Sub InsertProjektinfo2Comment(Target As Range)
' Autor: PFU
' Datum: 28.06.2001
' Zweck: Kopiert nach eingabe Projekt kennung
'        Projektcode etc in Spalte B

    Dim r As Range
    Dim s As String
    Dim k As Comment
     ' Kommentartext zusammensetzen
     
    Dim Result
    
    ' Kommentstring zusammensetzen
        s = GetProjektInfo(Target)
        
    ' OK akuelle Zelle ist eine Kommontarzelle.
        Set r = Target.offset(0, 1)
        r.Parent.Unprotect ProtectKW
        
        If r.Comment Is Nothing Then
            Set k = r.AddComment(s)
        Else
            If IsEmpty(Target.Value) Then
                r.Comment.Delete
            Else
                Set k = r.Comment
                k.Text s
            End If
        End If
        FormatComment k
        
        
    If Not isBulkImport() Then
        r.Parent.Protect Password:=ProtectKW
    End If
End Sub


Function GetProjektInfo(lfd)
' Autor: PFU
' Datum: 28.06.2001
' Zweck: Sammelt und Formatiert Info zu projekt
'
    Dim r As Range
    Dim s As String
    
        Set r = Application.Names("Projekt_ID_Baan").RefersToRange
        Set r = r.Columns(1).Find(What:=lfd, lookin:=xlValues, _
        LookAt:=xlWhole)
        If IsNumeric(lfd) Then
                s = "Projektinfo: " & vbLf
            s = s & "  ProjektNr-SD&C      : " & r.offset(0, 10) & vbLf
            s = s & "  T|fffd|tigkeitselement  : " & r.offset(0, 8) & " / " & r.offset(0, 4) & vbLf
            s = s & "  Unbillable-Code    : " & r.offset(0, 9) & " / " & r.offset(0, 5) & vbLf
            s = s & "  Projekteigner Kst. : " & r.offset(0, 11) & vbLf
        
        Else
                s = "Projektinfo: " & vbLf
            s = s & "  interne T|fffd|tigkeit  : " & r.offset(0, 3) & vbLf
            s = s & "                      (" & r.offset(0, 4) & ")" & vbLf
            s = s & "  Kostenstelle Ma.   : " & r.offset(0, 11) & vbLf
        End If
        GetProjektInfo = s
End Function



Sub CheckProjectNumAlready(Target As Range)
' Autor: PFU
' Datum: 17.06.2001
' Zweck: Pr|fffd|ft, ob in aktueller Zeile eine Projektnummer vorhanden ist.
    If IsCell(Target) Then
        If Target.Row >= Inputzeile_Min_Arbeitszeit And _
            Target.Row <= Inputzeile_Max_Arbeitszeit And _
            Target.Column >= InputSpalte_Min_Arbeitszeit And _
            Target.Column <= InputSpalte_Max_Arbeitszeit Then
                ' Ja, dann pr|fffd|fen, ob in 1. Spalte Projektid fehlt,
                ' dann fehlermeldung
                If Target.offset(0, -Target.Column + 1) = "" Then
                    MsgBox "F|fffd|r Zeile '" & Target.Row & "' fehlt ein Projekt." & vbCrLf & vbCrLf & "Geben Sie in der 1. Spalte ein Projekt ein.", vbCritical, "Eingabe noch nicht erlaubt...!"
                    Target = Empty
                End If
        End If
    End If
End Sub


Sub CheckProjectNum(Target As Range)
' Autor: PFU
' Datum: 17.06.2001
' Zweck: Test auf Doppelte Projektnummer
'        nur, wenn Target in
'        Spalte A und Zeile Inputzeile_Min_Arbeitszeit bis
'       Inputzeile_Max_Arbeitszeit
  
 Dim c As Range
  
    ' Nur eine zelle erlaubt
    If IsCell(Target) Then
        If Target.Column = 1 And _
                  Target.Row >= Inputzeile_Min_Arbeitszeit And _
                  Target.Row <= Inputzeile_Max_Arbeitszeit And _
                  IsCell(Target) _
            Then
                If IsDoubleProjectNo(Target) Then
                    ' fehler: Doppeltes Vorkommen der ProjektID
                    MsgBox "Doppelter Eintrag eines Projektes nicht erlaubt.", vbCritical, "Fehler bei Projekteingabe..."
                    Target.Value = ""
                Else
                    
                    ' alles OK: Projektid ist einzig in Liste.
                    ' Dann eintrag des Projektes in Zeitabrechnungstabelle
                    If IsValidProjectID(Target) Then
                        ' In Nachbarzelle Kommentar eintragen
                        InsertProjektinfo2Comment Target
                    Else
                        ' keine Meldung bei leerstring
                        If Target <> "" Then
                            MsgBox "ProjektID ist ung|fffd|ltig.", vbCritical, "Neues Projekt..."
                            Target = ""
                        End If
                        If Not Target.offset(0, 1).Comment Is Nothing Then
                            Target.offset(0, 1).Comment.Delete
                        End If
                    End If
                        ' neue Methode
                        ZA_ShowLinesWithP
                End If
            End If
        Else
            'Projektnur g|fffd|ltigkeitstest: bei mehrere Zellen meldung
            ' das diese hier nicht erlaubt ist.
            Set c = Target.Cells(1, 1)
            If c.Column = 1 And _
                  c.Row >= Inputzeile_Min_Arbeitszeit And _
                  c.Row <= Inputzeile_Max_Arbeitszeit Then
                MsgBox "Mehrere Zellen bearbeiten hier nicht erlaubt!", vbCritical, "Eingabepr|fffd|fung..."
            End If
        End If
End Sub


Function IsValidProjectID(ByVal Target As Excel.Range) As Boolean
' Autor : PFU
' Datum : 12.02.2001
' Zweck : Pr|fffd|ft, ob in Target (Celle), eine g|fffd|ltige
'         ProjektID enthalten ist.

Dim r As Range
Dim Found As Range
Dim Result As Boolean
Dim msg As New objResultMSG

    
    If Target = "" Then
        Result = False
        GoTo IsValidProjectID_Finish
    End If
       
    ' Durchsuchbereich bestimmen
    Set r = ActiveWorkbook.Names("Projekt_ID_Liste").RefersToRange
    
    'Suche nach Vorkommen der in Target |fffd|bergebenen ProjektID
    Set Found = r.Find(What:=Target, _
                        lookin:=xlValues, _
                        LookAt:=xlWhole, _
                        SearchOrder:=xlByColumns, _
                        MatchCase:=False)
    If Found Is Nothing Then
        ' Nicht gefunden
        Result = False
    Else
        ' gefunden
        If Not IsCell(Found) Then
            Result = False
            MsgBox "Doppelte ProjektIDs in der ProjektTabelle"
        Else
            ' test, ob neben der ProjektID auch ProjektCode vorhanden ist.
            Result = Found.offset(0, Col_Offset_IsValidProjectID_CheckProjektID).Value <> ""
        End If
    End If
    
    ' Wenn g|fffd|ltige Projekt id und ID nicht buchstabe, dann Pr|fffd|fen, ob alle
    ' Werte eingegeben
    
        If IsNumeric(Found) Then
            If Found.offset(0, 8) = "" Then msg.Error = "Element fehlt."
            If Found.offset(0, 10) = "" Then msg.Error = "SD&C-Code fehlt."
            If Found.offset(0, 11) = "" Then msg.Error = "Projekt-Kostenstelle fehlt."
            If msg.Error <> "" Then
                MsgBox msg.Error & vbCrLf & vbCrLf & "Bitte erg|fffd|nzen Sie die Werte...", vbCritical, "Fehlende Projektdaten"
                Found.Parent.Visible = True
                Found.Parent.Select
                Found.offset(0, 8).Activate
            End If
            
        End If
IsValidProjectID_Finish:
 
    IsValidProjectID = Result
    
End Function


Function IsDoubleProjectNo(ByVal Target As Excel.Range) As Boolean
' Autor : PFU
' Datum : 12.02.2001
' Zweck : Pr|fffd|fe, ob Projekt nur einmal eingegeben.
' Return: True, wenn Anzahl der neuen ProjektID im
'         benannten Bereich "Arbeitszeitprojekte"
'         |fffd|fter als 1 mal vorkommt, sonst false.


    ' Da diese Routine Zellenwert |fffd|ndert, soll Doppelaufruf vermieden werden.
        
        Dim r As Range
        
    
        
        'Bereich aus Name "Arbeitszeitprojekte" holen
        Set r = ActiveWorkbook.Names("Arbeitszeitprojekte").RefersToRange
        
        ' Wenn ProjektID Anzahl gr|fffd||fffd|e 1, dann gibts Haue!
        'IsDoubleProjectNo = AnzahlWenn(R, Target.Value) > 1
        IsDoubleProjectNo = Application.WorksheetFunction.CountIf(r, Target.Value) > 1
             
       
End Function

Private Sub Zur|fffd|ck_Click()
   GoBack
End Sub

Private Sub Worksheet_Deactivate()
' Autor: PFU
' Datum: 28.06.2001
' Zweck: Men|fffd|punkte deaktivieren
        
    If isBulkImport() Then
        Exit Sub
    End If
        
    SetEnableToggleMenuButton False
    SetEnableToggleAllComment False

End Sub






Attribute VB_Name = "AuswertungProjekte"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "AuswertungSpesen"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Berechnung_Pauschale"
Sub Pauschale()
'
' Pauschale Makro 14.06.2013
' Marco Engelmann
'
'
    ScreenUpdating False
    Monatscheck
    mdiff = Cells(1, 1)
    Sheets("Mitarbeiter Info").Visible = True
    ActiveWorkbook.Sheets("Mitarbeiter Info").Unprotect ProtectKW
    Sheets("Mitarbeiter Info").Select
    
    'Datum setzen
    startdat = Cells(19, 2)
    Cells(19, 2) = "01." & Right(Cells(10, 11), 2) & "." & Left(Cells(10, 11), 2) + 2000
    
    'Check: sind die Monate fortlaufend?
    If mdiff = 1 Then
        abfrage_msgbox = False
        NeuerMonat (abfrage_msgbox)
    Else
        If mdiff < 1 Then
            MsgBox ("Aktueller Monat ist kleiner oder gleich zum Vormonat. Es wird keine Aktion durchgef|fffd|hrt.")
        Else
            MsgBox ("Es werden/wird " & mdiff - 1 & " Wert/e eingef|fffd|gt ")
            For i = 1 To mdiff - 1
                abfrage_msgbox = False
                NeuerMonat (abfrage_msgbox)
            Next
            Cells(19, 2) = startdat
        End If
    End If
    
    Sheets("Mitarbeiter Info").Visible = True
    ActiveWorkbook.Sheets("Mitarbeiter Info").Protect ProtectKW
    Sheets("Mitarbeiter Info").Select
    ScreenUpdating True
End Sub
Sub Pauschale_berechnen()
    Sheets("Arbeitszeiten").Visible = True
    Sheets("Mitarbeiter Info").Visible = True
    ActiveWorkbook.Sheets("Mitarbeiter Info").Unprotect ProtectKW
    Sheets("Mitarbeiter Info").Select
    'Initialisieren (bei "neuer Monat")

    'Kopieren, Verschieben und Formeln einsetzen
    Range("K10:W18").Cut Destination:=Range("K11:W19")
    Range("K6:T6").Copy
    Range("K10").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
        
    Range("U9").FormulaR1C1 = "=SUM(R[1]C:R[9]C)"
    Range("V9").FormulaR1C1 = "=SUM(R[1]C:R[9]C)"
    Range("W9").FormulaR1C1 = "=0"
    
    Range("U10").Select
    Selection.FormulaR1C1 = "=IF(OR(RC[2]=R39C2,R[-1]C[2]<R40C2),RC[-9],""X"")"
    Selection.AutoFill Destination:=Range("U10:U18")
    
    Range("V10").Select
    Selection.FormulaR1C1 = "=IF(OR(RC[1]=R39C2,R[-1]C[1]<R40C2),RC[-9],""X"")"
    Selection.AutoFill Destination:=Range("V10:V18")
    
    Range("W10").Select
    Selection.FormulaR1C1 = "=RC[-11]+R[-1]C"
    Selection.AutoFill Destination:=Range("W10:W18")
    
    'Letzte Zeile L|fffd|schen
    Range("K19:W19").Delete
    
    'Kopieren des Monatswerts in MA-Info
    'Wert Neu nach Wert Alt
    Cells(26, 2) = Cells(34, 2)
    Cells(27, 2) = Cells(35, 2)
    Cells(30, 2) = Cells(6, 12)
    Cells(31, 2) = Cells(6, 13)
    ' Kopieren der ermittelten Werte in "Alt"
    Cells(34, 2) = Cells(6, 19)
    Cells(35, 2) = Cells(6, 20)
    'Zur|fffd|ckgesetzt Wert setzen
    Cells(32, 2) = Cells(6, 18)
    
    'Formatieren
    Range("K10:W18").Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
    If Cells(39, 2) = "Nein" Then
        Range("M7").Copy
        Range("B38").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                :=False, Transpose:=False
    End If
    
    Range("K10:T18").Locked = False
    Range("K10:T18").FormulaHidden = False

    ActiveWorkbook.Sheets("Mitarbeiter Info").Protect ProtectKW
    ScreenUpdating True
End Sub

Sub Pauschale_bearbeiten()
   
    ActiveSheet.CommandButton3.Visible = True
    ActiveSheet.CommandButton1.Visible = False
    ActiveSheet.CommandButton2.Visible = False
    ScreenUpdating False
    
    'Spalten ausblenden
    ActiveWorkbook.Sheets("Mitarbeiter Info").Unprotect ProtectKW
    Columns("A:I").Select
    Selection.EntireColumn.Hidden = True
    ActiveWindow.Zoom = 120
    
    'bearbeitbaren Bereich entsch|fffd|tzen und markieren
    Range("L10:M18").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Color = -16776961
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Color = -16776961
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -16776961
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Color = -16776961
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Range("N18:W18").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Color = -4165632
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Color = -4165632
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -4165632
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Color = -4165632
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    'Bearbeitung vorbereiten
    Selection.Locked = False
    Selection.FormulaHidden = False
    
    'Formeln einf|fffd|gen
    Range("N10").Select
    Selection.FormulaR1C1 = "=IF(R[1]C[4]=""Ja"",0,R[1]C[2])"
    Selection.AutoFill Destination:=Range("N10:N17")
    
    Range("O10").Select
    Selection.FormulaR1C1 = "=IF(R[1]C[3]=""Ja"",0,R[1]C[2])"
    Selection.AutoFill Destination:=Range("O10:O17")
    
    Range("P10").Select
    Selection.FormulaR1C1 = "=RC[-2]+RC[-4]"
    Selection.AutoFill Destination:=Range("P10:P17")
    
    Range("q10").Select
    Selection.FormulaR1C1 = "=RC[-4]+RC[-2]"
    Selection.AutoFill Destination:=Range("q10:q17")
    
    Range("r10").Select
    Selection.FormulaR1C1 = "=IF(AND(RC[-4]>R40C2,R9C22*2<R9C21),""Ja"",""Nein"")"
    Selection.AutoFill Destination:=Range("r10:r17")
    
    Range("S10").Select
    Selection.FormulaR1C1 = "=IF(RC[-1]=""Ja"",0,RC[-3])"
    Selection.AutoFill Destination:=Range("S10:s17")
    
    Range("t10").Select
    Range("T10").FormulaR1C1 = "=IF(RC[-2]=""Ja"",0,RC[-3])"
    Selection.AutoFill Destination:=Range("t10:t17")
    
    Range("L10").Select
    ScreenUpdating True
End Sub

Sub Pauschal_bearbeiten_beenden()

    ScreenUpdating False
    ActiveWorkbook.Sheets("Mitarbeiter Info").Unprotect ProtectKW

    'Kopieren der manipulierten Werte
    Cells(26, 2) = Cells(10, 14)
    Cells(27, 2) = Cells(10, 15)
    Cells(30, 2) = Cells(10, 12)
    Cells(31, 2) = Cells(10, 13)
    Cells(34, 2) = Cells(10, 19)
    Cells(35, 2) = Cells(10, 20)
    Cells(32, 2) = Cells(10, 18)
    
    Columns("A:I").Select
    Selection.EntireColumn.Hidden = False
    Range("L10:M18").Select
        
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Range("N18:W18").Select
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
  
    Range("N10:T17").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
  
    ActiveWindow.Zoom = 85
    
    Range("K10:T18").Select
    Sheets("Mitarbeiter Info").Select
    ActiveSheet.Unprotect
    Selection.Locked = False
    
    'Selection.FormulaHidden = True
    ActiveSheet.CommandButton3.Visible = False
    ActiveSheet.CommandButton1.Visible = True
    ActiveSheet.CommandButton2.Visible = True
    Range("B4").Select
    ActiveWorkbook.Sheets("Mitarbeiter Info").Protect ProtectKW
    ScreenUpdating True

End Sub
Sub Monatscheck()
    'Formel setzen f|fffd|r Abgleich der Monate
    Sheets("Start").Select
    ActiveWorkbook.Sheets("Start").Unprotect ProtectKW
    'Formel gibt Differenz des letzen erfassten Monats zum aktuellen an (Jahres|fffd|bergang wird ber|fffd|cksichtig)
    Range("A1").FormulaR1C1 = _
       "=(((YEAR('Mitarbeiter Info'!R19C2)-2000)*100+MONTH('Mitarbeiter Info'!R19C2))-'Mitarbeiter Info'!R10C11)-(((YEAR('Mitarbeiter Info'!R19C2)-2000)-LEFT('Mitarbeiter Info'!R10C11,2))*88)"
    ActiveWorkbook.Sheets("Start").Protect ProtectKW
End Sub



Attribute VB_Name = "Const_and_Global"
Option Explicit
    
    #Const DoDebug = False 'Wenn True, dann Debugausgaben
    
    
    '{|fffd| 24.07.2001
        'Public Const Interfaceversion = "1.0"
        Public SourceVersion As String
        Public Const Interfaceversion = "5.0"
    
    Public Const InterfaceversionPropName = "InterfaceVersion"
    
    Public Const cm_pro_Punkt = 0.03527336
    Public Const KOMMENT_SIZE = 8
    Public Const KOMMENT_FONT = "Courier New"
    
    Public Const A1_EN = "Analysis Toolpak"
    Public Const A2_EN = "Analysis Toolpak - VBA"
    Public Const A1_DE = "Analyse-Funktionen"
    Public Const A2_DE = "Analyse-Funktionen - VBA"
    Public Const A1_2007 = "Analyse-Funktionen"
    Public Const A2_2007 = "Analyse-Funktionen - VBA"
    Public Const A1_2010_en = "Analysis ToolPak"
    Public Const A2_2010_en = "Analysis ToolPak - VBA"
    Public Const A1_2010_de = "Analyse-Funktionen"
    Public Const A2_2010_de = "Analyse-Funktionen - VBA"

' Sheetnames
    Public Const WS_AZ = "Arbeitszeiten"
    Public Const WS_Start = "Start"
    Public Const WS_MA = "Mitarbeiter Info"
    Public Const WS_AU = "Auslagen"
    Public Const WS_SuA = "Spesen und Auslagen"
    Public Const WS_PR = "Projekte"
' neues Sheet km-Abrechnung (ASC 03.07.2001)
    Public Const WS_kmA = "km-Abrechnung"
  
    
    

' RangeNames

    Public Const RNG_AZ_VT = "Arbeitszeiten_Verteilung"
    
' Kleineste und gr|fffd||fffd|te Zeile / Spalte des Eingabebereichs
' f|fffd|r Projektzeitaufzeilung
    
    Public Const Inputzeile_Min_Arbeitszeit = 14
    Public Const Inputzeile_Max_Arbeitszeit = 53
    Public Const ProtectKW = "Ottochen"
    Public Const InputSpalte_Min_Arbeitszeit = 4
    Public Const InputSpalte_Max_Arbeitszeit = 127
    

    Public Const Col_Offset_IsValidProjectID_CheckProjektID = 2
    Public Const Error_Receiver = "Thomas Bonke"
    Public Const CLR_ForImport = 1
    Public Const CLR_ForNewMonth = 2
' *****
' IO

        Public Const Default_Export_File_Ext = "*.*"

    ' Z|fffd|hler f|fffd|r Verbot des Userinputchecks. bei 0 Check erlaubt.
        Public UserInputCheck As Integer

    ' Worksheetnamen als Konstanten
        Public Const wsn_IO = "InOut"
    
    ' Bereichsnamen im Workbook
        Public Const rg_StartCellAddress = "A1"


' ******************************************************************************************
' Variablen
' ******************************************************************************************

        
        'Public WB_Main_Name As String
        Public WB_IO As Workbook
        Global ToggleMenuButton As CommandBarButton
        Global ToggleAllComment As CommandBarButton
        Global ToggleDeuEng As CommandBarButton
            'Im tag von ToggleDeuEng wird Status gespeichert
        
        
    ' definiert immer das aktuelle Ziel f|fffd|r n|fffd|chste IO Schreiboperaton
    ' wird in ClearIO initialisiert,
    ' und in jeder schreibenden routine aktualisiert.
        
        Public IOTarget As Range
        
        Global SymbListe As objSymbList
        ' liste, die sich zustand aller Symbolleisten merkt
        ' beim setzen wird eingelesen,
        ' beim resett auf nothing wird zur|fffd|ckgeschrieben

        Global SB As New objStatusbar
        
        
' ******************************************************************************************
' men|fffd|barnames
' ******************************************************************************************
    Public ZA_Menue As CommandBar


' ************************************************************************
' festlegungen etc.
' ************************************************************************

Sub FormatComment(k As Comment)
' Autor: PFU
' Datum: 28.06.2001
' Zweck: Formatiert ein Kommentarobjekt

    Dim EndOfBold As Integer  'anzahl zeichen, die fett formatiert werden
   
    If Not k Is Nothing Then
        If k.Text = "" Then Exit Sub
        EndOfBold = InStr(k.Text, vbLf)
        ' Fehler ignorieren. Auf manchen rechnern / ExcelVersionen wird
        ' Fehler erzeugt. V|fffd|llig unklar, wieso!
        On Error Resume Next
        With k.Shape.TextFrame
            .AutoSize = True
            .Characters.Font.name = KOMMENT_FONT
            .Characters.Font.Size = KOMMENT_SIZE
            .Characters(0, EndOfBold).Font.Bold = msoTrue
        End With
    End If
End Sub



Attribute VB_Name = "Datumsfunktionen"
Option Explicit

'Ermittelt den Ostersonntag eines Jahres
Function Ostern(Yr As Integer) As Date
   Dim D As Integer
   D = (((255 - 11 * (Yr Mod 19)) - 21) Mod 30) + 21
   Ostern = DateSerial(Yr, 3, 1) + D + (D > 48) + 6 - _
    ((Yr + Yr \ 4 + D + (D > 48) + 1) Mod 7)
End Function

'Ermittelt den Starttag der ersten Woche des |fffd|bergebenen Jahres
'Per Default ist die erste Woche eines Jahres die Woche, die mindestens
'4 Kalendertage enth|fffd|lt
Function StartFirstWeek(myYear As Integer) As Date
    Dim StartDay As Date
    Dim FirstDay As Date
    Dim myWeekday As Integer
    
    FirstDay = CDate("1.1." & myYear)
    myWeekday = Weekday(FirstDay, vbMonday) - 1
    If myWeekday <= 3 Then
        StartDay = CDate("1.1." & myYear) - myWeekday
    Else
        StartDay = CDate("1.1." & myYear) + 7 - myWeekday
    End If
    StartFirstWeek = StartDay
End Function

'Ermittelt den Starttag (Montag) der x-ten Woche des |fffd|bergebenen Jahres
'R|fffd|ckgabewert -99: ung|fffd|ltige Woche
Function StartWeek(myYear As Integer, myWeek As Integer) As Date
    Dim FirstWeek As Date
    Dim myDate As Date
        
    If (myWeek < 1) Or (myWeek > 53) Then
        myDate = -99
        Return
    End If
    'Beginn erste Woche im Jahr ermitteln
    FirstWeek = StartFirstWeek(myYear)
    'Beginn angegebene Woche ermitteln
    myDate = DateAdd("ww", myWeek - 1, FirstWeek)
    
    If (myWeek = 53) And (myDate = StartFirstWeek(myYear + 1)) Then
        myDate = -99
    End If
    StartWeek = myDate
End Function


'Ermittelt die Woche im Jahr zu einem |fffd|bergebenen Datum
'2. Parameter gibt an, ob f|fffd|r Daten, die in eine Woche des Vor- oder Folgejahres geh|fffd|ren,
'negative Wochennummern geliefert werden sollen
'Beispiele: 30.12.1997 geh|fffd|rt zu KW 01 aus 1998
'           02.01.1999 geh|fffd|rt zu KW 53 aus 1998
'R|fffd|ckgabewert -1: Datum geh|fffd|rt zur ersten Woche (KW 01) im Folgejahr
'R|fffd|ckgabewert -52: Datum geh|fffd|rt zur letzten Woche (KW 52) des Vorjahres
Function GetWeek(myDate As Date, Optional bNegativeValues As Boolean = True) As Integer
    Dim myYear As Integer
    Dim FirstDay As Date
    Dim myWeek As Integer
    Dim PreviousYear As Boolean
        
    myYear = Year(myDate)
    FirstDay = StartFirstWeek(myYear)
    If FirstDay > myDate Then
        myYear = myYear - 1
        FirstDay = StartFirstWeek(myYear)
        PreviousYear = True
    End If
    myWeek = (DateDiff("d", FirstDay, myDate) \ 7) + 1
    If (myWeek = 53) And (StartWeek(myYear, myWeek) = -99) Then
        If bNegativeValues Then
            myWeek = -1
        Else
            myWeek = 1
        End If
    End If
    If PreviousYear Then
        If bNegativeValues Then
            myWeek = -myWeek
        End If
    End If
    GetWeek = myWeek
End Function

'Ermittelt den ersten Tag der Woche zum zugeh|fffd|rigen Datum
Function StartWeekDate(myDate As Date) As Date
    Dim myWeek As Integer
    Dim ret As Date
        
    myWeek = GetWeek(myDate)
    If (myWeek = -1) Then
        ret = StartWeek(Year(myDate) + 1, -myWeek)
    ElseIf (myWeek <= -52) Then
        ret = StartWeek(Year(myDate) - 1, -myWeek)
    Else
        ret = StartWeek(Year(myDate), myWeek)
    End If
    StartWeekDate = ret
End Function

Attribute VB_Name = "Doku_konzepte"
'Konzepte

' Namensvergabe f|fffd|r Bereiche

' LAR_name  : List Activation Range.
'             Es mu|fffd| dazu ein LRS_name geben
'             Arbeitet mit Utility "CheckList".
'             Name mu|fffd| 2. Parameter sein.
'             Click mit Rechter Maustaste aktiviert ggf  Auswahlliste
              
' LRS_name  : List Row Source
'             Es mu|fffd| dazu ein LAR_name geben
'             Arbeitet mit Utility "CheckList".
'             Name mu|fffd| 2. Parameter sein.
'             Bereich, dem Stammdaten enthalten sind. |fffd|blicherweise
'             2-5 spaltig
              
Attribute VB_Name = "Export"
Option Explicit
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Export aller Eingabedaten
'         Vorgaben: Unabh|fffd|ngig von sonstigen Tools



Sub DoExport()
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Hauptroutine Export, Knopf zeigt auf diese Routine
'         F|fffd|r alles Zum Export aus
   
' Struktur der Quelle:

' 1. Spalte: namen, jetzt noch nicht richtig genutzt
' 2. Spalte: name des Worksheets aus dem Feld stammt
' 3. Spalte: Adresse der Zelle in Worksheet
' 4. Spalte: Wert der Zelle
   
    Dim FileName As String
    Dim ws As Worksheet
    Dim Cell As Range
    Dim ProjNummer As Integer
    Dim PlfNummer As Integer
    Dim Plf_P_Nummer As Integer
    Dim Proj_Code As String
    Dim r As Range
    Dim RowNumber As Integer
    Dim Projektname As String
    Dim i As Integer
    Dim strFileCheck As String
    
     'Plausibili|fffd|tspr|fffd|fungen vor dem Export (BAL)
    If ActiveWorkbook.Sheets("Mitarbeiter Info").Range("MaPersonalnummer") = "" Then
        MsgBox "Bitte die Personalnummer im Stammdatenblatt angeben", vbCritical, "Hinweis"
         Mitarbeiter_Info.Visible = xlSheetVisible
         Exit Sub
    End If
    
    If ActiveWorkbook.Sheets("Mitarbeiter Info").Range("MaKuerzel") = "" Then
        MsgBox "Bitte das Mitarbeiterk|fffd|rzel in Grossbuchstaben angeben", vbCritical, "Hinweis"
        Exit Sub
    End If
    
    If Len(Trim(ActiveWorkbook.Sheets("Mitarbeiter Info").Range("MaKuerzel").Value)) = 3 Then
       If Not ActiveWorkbook.Sheets("Mitarbeiter Info").Range("MaKuerzel").Value Like UCase(ActiveWorkbook.Sheets("Mitarbeiter Info").Range("MaKuerzel").Value) Then
            MsgBox "Bitte das Mitarbeiterk|fffd|rzel in Grossbuchstaben angeben", vbCritical, "Hinweis"
            Exit Sub
        End If
    End If
    
    ' Format der Projektnummer |fffd|berpr|fffd|fen (BAL)
     For Each Cell In Arbeitszeiten.Range("A18:A518").Cells
      
      If Not (Cell.Text Like "IT" _
        Or Cell.Text Like "IA" _
        Or Cell.Text Like "IM" _
        Or Cell.Text Like "H" _
        Or Cell.Text Like "P" _
        Or Cell.Text Like "S" _
        Or Cell.Text Like "W" _
        Or Cell.Text Like "X" _
        Or Cell.Text Like "IE" _
        Or Cell.Text Like "IJ" _
        Or Cell.Text Like "IR" _
        Or Cell.Text Like "IU" _
        Or Cell.Text Like "IV" _
        Or Cell.Text Like "IX" _
        Or Cell.Text Like "IY") Then

        PlfNummer = CInt(Cell.Value)
        If PlfNummer >= 1 Then
            For i = 24 To 500
              Plf_P_Nummer = Sheets("Projekte").Cells(i + 1, 1).Value
              If (Plf_P_Nummer = PlfNummer) Then
                Proj_Code = Sheets("Projekte").Range("K" & i + 1).Value
                      
                      If Not Proj_Code Like "#####-###" Then
                        
                           If Not Proj_Code Like "#####-###-###" Then
                           Projektname = Sheets("Projekte").Range("D" & i + 1).Value
                             MsgBox "Der Projektcode f|fffd|r das Projekt " + Projektname + " ist nicht korrekt formatiert", vbCritical, "Hinweis"
                             Exit Sub
                           End If
                      
                      End If
'
              End If
            Next i
            
        Else:
        End If
     End If
    Next Cell
    
    If Export_Path() <> "" Then
        SB.SetSB "Export "
         
        ' erzeuge Ziel
            ClearIO
        
        ' Statusmeldung
            SB.Dot
        
        '{|fffd| 24.07.2001
        ' W|fffd|hrend schreiben Startsheet anzeigen
            WB_Main.Activate
        
        ' Schreibe datengruppen in Ziel
            Writeall
        
        ' Statusmeldung
            SB.Dot
            
        ' InOut Sheet speichern
        
        strFileCheck = ExportFileName("xls")
        
        If Len(Dir(strFileCheck)) > 0 Then
             ' Datei vorhanden -> R|fffd|ckfrage
           i = MsgBox("Datei bereits vorhanden, |fffd|berschreiben?", vbYesNo)
                If i = 6 Then
                     WB_IO.SaveAs FileName:=ExportFileName("xls"), FileFormat:=xlExcel7
                Else
                     Exit Sub
                     
                End If
        Else
             ' Datei nicht vorhanden -> gleich speichern
                 WB_IO.SaveAs FileName:=ExportFileName("xls"), FileFormat:=xlExcel7
        End If
        
        ' Statusmeldung
            SB.Dot
        
        ' ziel Schliessen
            WB_IO.Close False
    
        ' Statusmeldung l|fffd|schen
            SB.Reset
        
        '{|fffd| 24.07.2001
        ' fertigmeldung
            MsgBox "Export der Gesamtdaten abgeschlossen.", vbInformation, "Export..."
    Else
        MsgBox "Bitte erst Datei speichern, bevor der Export gestartet wird.", vbOKOnly + vbExclamation, "Zeitabrechnung Export"
    End If
End Sub

Sub Writeall()
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Folgende Sheet auf zu speichernde Zellen untersuchen
'         "Arbeitszeiten", "Reisekosten", "Feiertage",
'         "Mitarbeiter Info", "Parameter", "Projekte",
'          "Urlaub", "Auslagen"

    Dim rng_Quelle As Range
    Dim ws As Worksheet
    
    For Each ws In WB_Main.Sheets
        Set rng_Quelle = ws.UsedRange
        Select Case ws.name

' FLE 15.08.2002
' Export soll auch f|fffd|r die Spalte Bemerkung in Tabelle km-Abrechnung erfolgen
         
         Case "Arbeitszeiten", "Spesen und Auslagen", _
                "Mitarbeiter Info", _
                "Parameter", "Projekte", "Urlaub", "km-Abrechnung", "Zeitabrechnung"
            
            WriteBlock rng_Quelle, ws.name
        End Select
        
        ' Nach dem Schreiben eines jedes Sheets in Zieldatei
        '   eine Zeile Platz lassen
        
            IncRow IOTarget
    Next
  
End Sub



Sub WriteBlock(rng_Quelle As Range, DatagroupName As String)
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Schreibt Inhalt aller nicht leeren
'         unlocked Zellen in InOut-Sheet

    
    Dim c As Range
    IOTarget = DatagroupName
    IncRow IOTarget

    For Each c In rng_Quelle
        
           If Not IsNull(c) And Not IsEmpty(c) And Not c.Locked Then
           
            If DatagroupName = "Mitarbeiter Info" And c.Address = "$B$23" Then
             
            Else
            SB.Dot
              
               ' Wert des Feldes
               
               '{|fffd| 24.07.2001 neu}
                    ' Formelpr|fffd|fung auf HasFormula reicht nicht. In den User
                    ' |fffd|nderbaren Feldern kann z.B. stehen:
                    ' =24+24. Solche Ausdr|fffd|cke sollen erhalten bleiben.

                    If c.Formula <> "" Then
                         IOTarget.offset(0, 3) = c.Formula
                        ' Typ des Wertes
                            IOTarget.offset(0, 4) = TypeName(c.Formula)
                         GoSub Write_Line
                    ElseIf c.HasFormula Then
                         'Eingabefelder k|fffd|nnen formeln enthalten, z.b. STD()
                         IOTarget.offset(0, 3) = c.Formula
                        ' Typ des Wertes
                            IOTarget.offset(0, 4) = TypeName(c.Formula)
                         GoSub Write_Line
                    Else
                        If c.Value <> "" Then
                            IOTarget.offset(0, 3) = c.Value
                        ' Typ des Wertes
                            IOTarget.offset(0, 4) = TypeName(c.Value)
                            GoSub Write_Line
                        End If
                    End If
               '{|fffd| 24.07.2001 neu}
               
'               '{|fffd| 24.07.2001 Alt}
'                    If C.HasFormula Then
'                        'Eingabefelder k|fffd|nnen formeln enthalten, z.b. STD()
'                        IOTarget.offset(0, 3) = C.Formula
'                    Else
'                        IOTarget.offset(0, 3) = C.Value
'                    End If
'                '{|fffd| 24.07.2001 Alt}
               ' n|fffd|chste Zeile zum schreiben
               IncRow IOTarget
            End If
           End If
       Next
       Exit Sub
       
Write_Line:
    ' Name des Feldes
        IOTarget = DatagroupName
    ' Sheetname des Feldes
        IOTarget.offset(0, 1) = c.Parent.name
    ' Adresse im Sheet
        IOTarget.offset(0, 2) = c.Address
    Return
End Sub

Sub ClearIO()
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Erzeugt Export-Workbook + Worksheet und setzt
'         Zeiger darauf


    Dim ws As Worksheet
    
    
    
    ' neues Workbook
        Workbooks.Add
    
        Set WB_IO = ActiveWorkbook
        
    ' Alle Sheets entfernen
        Application.DisplayAlerts = False
        For Each ws In Sheets
            On Error Resume Next
                ws.Delete
            On Error GoTo 0
        Next
        Application.DisplayAlerts = True
    ' Neue Tabelle
        Sheets(1).name = wsn_IO
    
    ' Tabelle, Zelle aktivieren
        Sheets(1).Activate
        Range("A1").Activate
    
    ' IOTarget initialisieren
        Set IOTarget = ActiveCell
    
    ' Interfache Versionskennung in File schreiben
        Dim DPs As DocumentProperties
        Dim DP As DocumentProperty
        Set DPs = WB_IO.CustomDocumentProperties
        DPs.Add name:=InterfaceversionPropName, LinkToContent:=False, Value:=Interfaceversion, Type:=msoPropertyTypeString
    
End Sub


Attribute VB_Name = "Feiertage"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Option Explicit

Attribute VB_Name = "Import"
Option Explicit

Sub DoImport()
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Hauptroutine Import, Knopf zeigt auf diese Routine
'         F|fffd|r alles Zum Import aus


    Dim WB_IO As Workbook
    Dim Cell As Range
    
    If Export_Path() <> "" Then
        SB.SetSB "Import der Daten..."
    
        ' IO-File laden
            If OpenIOFile(WB_IO) Then
                
                ' Schreiben
                    ScreenUpdating False
                ' Keine Test wie bei Usereingaben
                    UserInputCheckNo
                
                 ' FLE 20.08.2002
                 ' Zeitabrechnungblock anzeigen; wenn er vor import nicht vorhanden ist und
                 ' eine genommene gleitzeit importiert werden soll, mu|fffd| auch die zelle vorhanden sein
                 Application.DisplayStatusBar = True
                 SB.SetSB ("Zeitabrechnung zur|fffd|cksetzen")
                 Zeitabrechnungsblock_Set
    
                
                ' {|fffd| 24.07.2001
                ' programmlogik da: F|fffd|r Importfileversion unterschciedliche Routinen
                ' z.zt noch keine unterschiede existent
                
                    Select Case SourceVersion
                        Case "1.0"
                            MsgBox "Import File Version " & SourceVersion
                            ClearRanges CLR_ForImport
                            Write2Target_V1 WB_IO
                            
                        Case "1.1"
                            MsgBox "Import File Version " & SourceVersion
                            ClearRanges CLR_ForImport
                            Write2Target_V2 WB_IO
                            
                        Case "DataUpdate V1.0"
                            MsgBox "Data-Update V1.0 " & SourceVersion
                            Write2Target_V1 WB_IO
                            
                        Case "Feiertage V1.0"
                            MsgBox "Feiertage-Update" & SourceVersion
                            Write2Target_V3 WB_IO
                            
                        Case "5.0"
                            MsgBox "Import File Version " & SourceVersion
                            ClearRanges CLR_ForImport
                            Write2Target_V2_5 WB_IO
                            
                        Case Else
                            MsgBox "Falsche Version der Quelldatei", vbCritical, "Import nicht m|fffd|glich.."
                            GoTo DoImport_Finish
                    End Select
                       
                ' Korrektur der Datentypen bestimmter eingelesener Werte
                    SB.SetSB ("Datenkorrekturen durchf|fffd|hren")
                     ' projekte Elemente
                        For Each Cell In Projekte.Range("LAR_T|fffd|tigkeitselement").Cells
                               Cell = CStr(Cell.Value)
                        Next
                    
                    ' projekte UB-Code
                        For Each Cell In Projekte.Range("LAR_Unbillability").Cells
                               Cell = CStr(Cell.Value)
                        Next
                        
                    ' In Arbeitszeiten lfdnr Projekt mu|fffd| Wert als String |fffd|bergeben werden
                        For Each Cell In Arbeitszeiten.Range("AZ_Clear_Input_2").Cells
                               Cell = CStr(Cell.Value)
                        Next
    
                    ' In Spesen und Auslagen lfdnr Projekt mu|fffd| Wert als String |fffd|bergeben werden
                        For Each Cell In Spesen_und_Auslagen.Range("SuA_lfd_is_string").Cells
                               Cell = CStr(Cell.Value)
                        Next
                    
                    ' Standardprojekt
                        For Each Cell In Mitarbeiter_Info.Range("LAR_Standardprojekt").Cells
                               Cell = CStr(Cell.Value)
                        Next
                        
                        
                ' Arbeitszeiterl|fffd|uterungen auch
                ' an Kommentar |fffd|bergeben
                    InitComment
                    
DoImport_Finish:
                ' Freigabe userinputcheck
                    UserInputCheckYes
    
                ' Quelle Schlie|fffd|en
                    
                    WB_IO.Close False
            End If
            
         ' Pr|fffd|fen, ob automatische sprachzuweisung f|fffd|r Internal Service
            FixedLanguage
            
            ScreenUpdating True
            SB.Reset
        
         ' Monatsanzeige im Startsheet aktualisieren
            Monat2Start
            
            'FLE 19.08.2002
            'block f|fffd|r gleizeit eintrag akzualisieren
        
        Dim R2 As Range
        Set R2 = ActiveWorkbook.Names("LAR_Gleitzeit").RefersToRange
        If R2 <> "Ja" Then
            Zeitabrechnungsblock_Clear
        End If
    
        UserInputCheck = True
          
        ' fertigmeldung
            MsgBox "Import abgeschlossen.", vbInformation, "Import..."
    Else
        MsgBox "Bitte erst Datei speichern, bevor der Import gestartet wird.", vbOKOnly + vbExclamation, "Zeitabrechnung Import"
    End If
End Sub

Function OpenIOFile(WB_IO As Workbook) As Boolean
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : |fffd|ffnet Datei nach userauswahl und setzt
'         Zeiger auf Bereich zum lesen.


    On Error GoTo OpenIOFile_Err
    Dim FN
    FN = GetFilename()
    
    If FN = "" Then
        MsgBox "Keine Datei gew|fffd|hlt. ABBRUCH!", vbInformation, "Import..."
        OpenIOFile = False
        Exit Function
    Else
        Workbooks.Open FileName:=FN
    End If
    Set WB_IO = ActiveWorkbook
    
    ' Check Interfaceversion
    Dim DP As DocumentProperty
    
    Set DP = WB_IO.CustomDocumentProperties(InterfaceversionPropName)
    If Not DP Is Nothing Then
    '{|fffd| 24.07.2001
        SourceVersion = DP.Value
    Else
        MsgBox "Falsche Version der Importdatei: Importversionskennung nicht vorhanden."
        OpenIOFile = False
        Exit Function
    End If
    
    '{|fffd| 24.07.2001
        WB_Main.Activate
    Start.Visible = xlSheetVisible
    'Start.Visible = xlSheetHidden
    
    OpenIOFile = True
Exit Function
OpenIOFile_Err:
    
    If Err = 5 Then
        Resume Next
    Else
    End If
End Function

Sub Write2Target_V1_5(WB_IO As Workbook)
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Schreibt aus IO-Sheet direkt an Ziel.

' V1 hat keine Datentypangaben in Datei
' alle eingelesenen Werte werden in String gewandelt.
    
    Dim c As Range          ' Eine Zelle aus quelle
    Dim Target As Range     ' Eine Zelle im ziel
    Dim ws As Worksheet     ' Ziel Worksheet
    Dim WSN As String       ' Name des Worksheet
    Dim TempRng As Range
    
    Dim msg As New objResultMSG
    
    Dim SuA_Check As Boolean  ' False: Spezialbehandlung f|fffd|r SuA noch nicht ausgef|fffd|hrt.
    Dim Q_SuA_Count As Integer
    ' Anzahl SuA-Zeilen in Importfile
    
    
    On Error GoTo Write2Target_V1_5_Err
    
    SB.SetSB "Schreiben der Importdaten..." & WB_IO.name
        
    Dim rng_IO  As Range
    
    ' Qellbereich bestimmen
        Set rng_IO = WB_IO.Sheets(1).UsedRange
    
    ' Jeden aus Quelle an Ziel schreiben
        For Each c In rng_IO.Columns(1).Cells
            If c.offset(0, 1) <> "" Then
                'SFE 30.04.2009: Feiertrage nicht mehr importieren
                If c.offset(0, 1) <> "Feiertage" Then
                    WSN = c.offset(0, 1)
                    Set ws = WB_Main.Sheets(WSN)
                    Set Target = ws.Range(c.offset(0, 2))
                    Target = c.offset(0, 3).Value
                End If
            End If
Write2Target_V1_5_Weiter:
        Next
        
    If msg.Error <> "" And Not isBulkImport Then
        MsgBox msg.Error, vbInformation, "Fehler beim Import..."
    End If
    Exit Sub
Write2Target_V1_5_Err:
    
    ' F|fffd|r SuA : Pr|fffd|fen, ob zuwenig Zeilen in Ziel
    
    If Err = 1004 Then
        If WSN = "Spesen und Auslagen" Then
            'ja, also zeile einf|fffd|gen
            ' aktivieren der Zelle
                Target.Parent.Visible = True
                Target.Parent.Activate
                Target.Select
                Target.Activate
            ' zeile einf|fffd|gen
                Spesen_und_Auslagen.cmbInsertNewLine_Click
            ' target korrigieren nach Einf|fffd|gen der Zeile
                Set Target = Target.offset(-1, 0)
            ' und weiter mit einf|fffd|gen
                Target.Parent.Visible = False
                Resume
        Else
            ' Diese Meldung nur einmal speichern.
            If msg.Error = "" Then msg.Error = "Es wurde versucht, in gesperrte Bereiche zu schreiben (Importdatei: " & WB_IO.name & " / Zielbereich: " & WSN & "!" & Chr(Target.Column + 64) & Target.Row & "). Bitte sende deine Importdatei an """ & Error_Receiver & """"
            Debug.Print "(Importdatei: " & WB_IO.name & " / Zielbereich: " & WSN & "!" & Chr(Target.Column + 64) & Target.Row & ")"
            Resume Write2Target_V1_5_Weiter
        End If
    Else
        MsgBox Err.Description, vbCritical, "Write2Target_V1_5..."
        Resume Next
    End If
End Sub

Function Write2Target_V1(WB_IO As Workbook) As Boolean

' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Schreibt aus IO-Sheet direkt an Ziel.

' V1 hat keine Datentypangaben in Datei
' alle eingelesenen Werte werden in String gewandelt.
    
' FLE 16.04.2007 Anpassung Import an Version
    Dim c As Range          ' Eine Zelle aus quelle
    Dim Target As Range     ' Eine Zelle im ziel
    Dim ws As Worksheet     ' Ziel Worksheet
    Dim WSN As String       ' Name des Worksheet
    Dim TempRng As Range
    
    Dim msg As New objResultMSG
    
    Dim SuA_Check As Boolean  ' False: Spezialbehandlung f|fffd|r SuA noch nicht ausgef|fffd|hrt.
    Dim Q_SuA_Count As Integer
    ' Anzahl SuA-Zeilen in Importfile
    
    
    On Error GoTo Write2Target_V1_Err
    SB.SetSB "Schreiben der Importdaten..."
        
    Dim rng_IO  As Range
    
    ' Qellbereich bestimmen
        Set rng_IO = WB_IO.Sheets(1).UsedRange
    
    ' Jeden aus Quelle an Ziel schreiben
        For Each c In rng_IO.Columns(1).Cells
            'WB_IO.u
            If c.offset(0, 1) <> "" Then
                WSN = c.offset(0, 1)
                Set ws = WB_Main.Sheets(WSN)
                Set Target = ws.Range(c.offset(0, 2))
                If ws.name = "Spesen und Auslagen" Then
                   If Target.Cells.Column < 6 Then
                        Target = c.offset(0, 3).Value
                   ElseIf Target.Cells.Column < 18 Then
                        Target.offset(0, 5) = c.offset(0, 3).Value
                   Else
                        Target.offset(0, 4) = c.offset(0, 3).Value
                   
                   End If
                Else
                    Target = c.offset(0, 3).Value
                End If
            End If
Write2Target_V1_Weiter:
        Next
        
        
        
        
        
    If msg.Error <> "" Then
        MsgBox msg.Error, vbInformation, "Fehler beim Import..."
        Write2Target_V1 = False
    Else
        Write2Target_V1 = True
    End If
    
    
    Exit Function
Write2Target_V1_Err:
    
    ' F|fffd|r SuA : Pr|fffd|fen, ob zuwenig Zeilen in Ziel
    
    If Err = 1004 Then
        If WSN = "Spesen und Auslagen" Then
            'ja, also zeile einf|fffd|gen
            ' aktivieren der Zelle
                Target.Parent.Visible = True
                Target.Parent.Activate
                Target.Select
                Target.Activate
            ' zeile einf|fffd|gen
                Spesen_und_Auslagen.cmbInsertNewLine_Click
            ' target korrigieren nach Einf|fffd|gen der Zeile
                Set Target = Target.offset(-1, 0)
            ' und weiter mit einf|fffd|gen
                Target.Parent.Visible = False
                Resume
        Else
            ' Diese Meldung nur einmal speichern.
            If msg.Error = "" Then msg.Error = "Es wurde versucht, in gesperrte Bereiche zu schreiben. Bitte sende Sie ihre Importdatei an """ & Error_Receiver & """"
            Resume Write2Target_V1_Weiter
        End If
    Else
        MsgBox Err.Description, vbCritical, "Write2Target_V1..."
        Resume Next
    End If
End Function


Sub Write2Target_V2_5(WB_IO As Workbook)
' Autor : FLE
' Datum : 16.04.2007
' Zweck : Schreibt aus IO-Sheet direkt an Ziel.

    Write2Target_V1_5 WB_IO
    
End Sub
Sub Write2Target_V2(WB_IO As Workbook)
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Schreibt aus IO-Sheet direkt an Ziel.
Dim ws As Worksheet
Dim Cell As Range

    If Write2Target_V1(WB_IO) Then
        
' f|fffd|r alle erfassten Tage werden beim Import der alten Version 1.1
' pro forma die Daten der Art des Einsatzes auf Dienstreise
' gesetzt, Die Art des Einsatzes mu|fffd| dann manuell gepflegt werden

        Set ws = WB_Main.Sheets("Spesen und Auslagen")
        ws.Unprotect ProtectKW
        
            For Each Cell In ws.Range("LAR_SpesenAuslagenProjekte").Cells
                If Cell.offset(0, -1) <> vbNullString Then
                   Cell.offset(0, 3) = "D"
                   Cell.offset(0, 5) = "WAHR"
                       Cell.offset(0, 6) = "WAHR"
                   Cell.offset(0, 7) = "N"
                   
                End If
            Next
        
        
        If Not isBulkImport() Then
            ws.Protect ProtectKW
        End If
        Set ws = Nothing
        
        
        MsgBox "Der Import erfolgte mit einer alteren Version der Importdatei." & vbCr & vbCr & _
               "F|fffd|r alle S|fffd|tze in Spesen und Auslagen wurde die Art des Einsatzes auf Dienstreise (D) eingestellt." & vbCr & vbCr & _
               "Bitte pflegen Sie das Feld Art des Einsatzes in den Spesen und Auslagen nach dem Import!", vbInformation + vbOKOnly, "Hinweis zum Import"
    
    End If
    
    
End Sub


Sub Write2Target_V3(WB_IO As Workbook)
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Nur Feiertage lesen

    
    Dim c As Range          ' Eine Zelle aus quelle
    Dim Target As Range     ' Eine Zelle im ziel
    Dim ws As Worksheet     ' Ziel Worksheet
    Dim WSN As String       ' Name des Worksheet
    Dim TempRng As Range
    
    Dim msg As New objResultMSG
    
    Dim SuA_Check As Boolean  ' False: Spezialbehandlung f|fffd|r SuA noch nicht ausgef|fffd|hrt.
    Dim Q_SuA_Count As Integer
    ' Anzahl SuA-Zeilen in Importfile
    
    
    On Error GoTo Write2Target_V3_Err
    
    SB.SetSB "Schreiben der Feiertagsdaten..."
    
    ClearFeiertage
        
    Dim rng_IO  As Range
    
    ' Qellbereich bestimmen
        Set rng_IO = WB_IO.Sheets(1).UsedRange
    
    ' Jeden aus Quelle an Ziel schreiben
        For Each c In rng_IO.Columns(1).Cells
            'WB_IO.u
            If c.offset(0, 1) <> "" Then
                WSN = c.offset(0, 1)
                If WSN = "Feiertage" Then
                    Set ws = WB_Main.Sheets(WSN)
                    Set Target = ws.Range(c.offset(0, 2))
                    Target = c.offset(0, 3).Value
                End If
            End If
Write2Target_V3_Weiter:
        Next
        
    If msg.Error <> "" Then
        MsgBox msg.Error, vbInformation, "Fehler beim Import..."
    End If
    Exit Sub
    
Write2Target_V3_Err:
    MsgBox Err.Description, vbCritical, "Write2Target_V3..."
End Sub

Attribute VB_Name = "ImportMATB"
Option Explicit
Type tTBSatz
    AktMonat As Date
    MaPersonalnummer As String
    MaKuerzel As String
    MaVName As String
    MaNName As String
    Kunde As String
    Projekt As String
    Proj_Kst As String
    VertrCode As String
    Stunden As Double
    APKunde As String
    APSD_C As String
    Element As String
    SD_CCode As String
End Type

Type tSASatz
    Datum As Date
    PersonalNr As String
    K|fffd|rzel As String
    Vorname As String
    Nachname As String
    lfdNr As String
    Kunde As String
    Projekt As String
    Element As String
    UnbillabeGrund As String
    APKunde As String
    APSDC As String
    T|fffd|tigkeitsart As String
    UBCode As String
    SDCCode As String
    KST As String
    Art_des_Einsatzes As String
    genehm_durch_GF As String
    VMAvon As Date
    VMAbis As Date
    VMAGB As Double
    VMAAbzug As Double
    VMAErstattung As Double
    FKEKunde As Double
    FKESDC As Double
    FKE As Double
    EBEBelegNr As String
    EBEKunde As Double
    EBESDC As Double
    EBEKennzSt As String
    EBEBezahltvon As String
    Bemerkungen As String
End Type

Public Function get_AllFileNamen()
    Dim f As Variant
    Dim i As Integer
    Dim lngZeile As Long
    Dim lngZeileSA As Long
    Dim lngLastRowSA As Long
    Dim h As Integer
    Dim letzteZeile As Variant
    
    lngZeile = 2
    lngZeileSA = 2
    Call clearWS
    Call clearWSSA
    
    f = Application.GetOpenFilename("Zeitabrechnung-Export (*.xls), *.xls", , "Zeitabrechnung-Import...", MultiSelect:=True)
    If IsArray(f) Then
       
        For i = 1 To UBound(f)
            doImportMA (f(i))
            Call readDynBereich(lngZeile)
            lngLastRowSA = lngZeileSA
            Call readDynBereichSA(lngZeileSA)
            Call setSrcToTrgSatzSA3(lngLastRowSA, lngZeileSA)
            ClearRanges CLR_ForImport
        Next i
       
        'l|fffd|scht die Leerzeilen im Tabellenblatt 'Alle_MA_Spesen_und_Auslagen'
        letzteZeile = |fffd|bersichtSpesen.Cells(Cells.Rows.count, 1).End(xlUp).Row
    
        For h = 2 To letzteZeile
            With |fffd|bersichtSpesen
                If .Cells(h, 6).Value = "" Then
                    If .Cells(h, 1).Value = "" Then
                        GoTo EndOfLoop
                    Else
                        .Rows(h & ":" & h).Delete Shift:=xlUp
                        h = h - 1
                    End If
                End If
            End With
EndOfLoop:
        Next h
       
        ActiveWorkbook.Worksheets("Zeitabrechnung").Visible = False
        |fffd|bersichtProjekte.Visible = True
        AuswertungProjekte.Unprotect ProtectKW
        AuswertungSpesen.Unprotect ProtectKW
        'Aktualisieren der Pivot-Tabellen
        ActiveWorkbook.RefreshAll
       
        MsgBox UBound(f) & " Datei(en) verarbeitet." & vbCr & vbCr & lngZeile - 1 & " Zeile(n) stellt.", vbOKOnly, "Hinweis"
    Else
       MsgBox "Keine Datei verarbeitet.", vbOKOnly, "Hinweis"
    End If
End Function

Private Function OpenIOFile_2(WB_IO As Workbook, strFileName As String) As Boolean
    On Error GoTo OpenIOFile_2_Err
    
    Workbooks.Open FileName:=strFileName
    
    Set WB_IO = ActiveWorkbook
    
    
    ' Check Interfaceversion
    Dim DP As DocumentProperty
    
    Set DP = WB_IO.CustomDocumentProperties(InterfaceversionPropName)
    If Not DP Is Nothing Then
        SourceVersion = DP.Value
    Else
        MsgBox "Falsche Version der Importdatei: Importversionskennung nicht vorhanden." & vbCr & _
               "Datei: " & strFileName
        OpenIOFile_2 = False
        Exit Function
    End If
    
        WB_Main.Activate
''    Start.Visible = xlSheetVisible
    Start.Visible = xlSheetHidden
    OpenIOFile_2 = True
Exit Function
OpenIOFile_2_Err:
    
    If Err = 5 Then
        Resume Next
    Else
    End If
End Function

Private Sub doImportMA(strFileName As String)
    Dim WB_IO As Workbook
    Dim Cell As Range
    
        SB.SetSB "Import der Daten..."
        ' IO-File laden
            If OpenIOFile_2(WB_IO, strFileName) Then
            SB.SetSB "Import der Daten..." & strFileName
                
                ' Schreiben
                    ScreenUpdating False
                ' Keine Test wie bei Usereingaben
                    UserInputCheckNo
                
                    Zeitabrechnungsblock_Set
    
                    Select Case SourceVersion
                            
                        Case "5.0"
                            'MsgBox "Import File Version " & SourceVersion
                            ClearRanges CLR_ForImport
                            Write2Target_V2_5 WB_IO
                        
                        Case Else
                            MsgBox "Falsche Version der Quelldatei" & vbCr & _
                            strFileName, vbCritical, "Import nicht m|fffd|glich.."
                    End Select
                       
                ' Korrektur der Datentypen bestimmter eingelesener Werte
                      ' projekte Elemente
                        For Each Cell In Projekte.Range("LAR_T|fffd|tigkeitselement").Cells
                               Cell = CStr(Cell.Value)
                        Next
                    
                    ' projekte UB-Code
                        For Each Cell In Projekte.Range("LAR_Unbillability").Cells
                               Cell = CStr(Cell.Value)
                        Next
                        
                    ' In Arbeitszeiten lfdnr Projekt mu|fffd| Wert als String |fffd|bergeben werden
                        For Each Cell In Arbeitszeiten.Range("AZ_Clear_Input_2").Cells
                               Cell = CStr(Cell.Value)
                        Next
    
                    ' In Spesen und Auslagen lfdnr Projekt mu|fffd| Wert als String |fffd|bergeben werden
                        For Each Cell In Spesen_und_Auslagen.Range("SuA_lfd_is_string").Cells
                               Cell = CStr(Cell.Value)
                        Next
                    
                    ' Standardprojekt
                        For Each Cell In Mitarbeiter_Info.Range("LAR_Standardprojekt").Cells
                               Cell = CStr(Cell.Value)
                        Next
                        
                        
                    
DoImport_Finish:
                ' Freigabe userinputcheck
                    UserInputCheckYes
    
                ' Quelle Schlie|fffd|en
                    
                    WB_IO.Close False
            End If
            
         ' Pr|fffd|fen, ob automatische sprachzuweisung f|fffd|r Internal Service
            FixedLanguage
            
            ScreenUpdating True
            SB.Reset
        
         ' Monatsanzeige im Startsheet aktualisieren
            Monat2Start
            
         'block f|fffd|r gleizeit eintrag akzualisieren
        
        Dim R2 As Range
        Set R2 = ActiveWorkbook.Names("LAR_Gleitzeit").RefersToRange
        If R2 <> "Ja" Then
            Zeitabrechnungsblock_Clear
        End If
    
        UserInputCheck = True
End Sub

Private Sub readDynBereich(lngZeile As Long)
    Dim r As Range
    Dim rQuelle As Range
    Dim Zielsatz As tTBSatz
    
    Set r = ActiveWorkbook.Names("ZA_Dynamischerbereich").RefersToRange
    
    'Standardprojekt nicht im Dyn-Bereich
    Set rQuelle = r.Cells(0, 1)
        Zielsatz = setSrcToTrgSatz(rQuelle)
        If lngZeile <> 2 Then
            lngZeile = lngZeile + 1
        End If
        Call schreibeZielSatz(Zielsatz, lngZeile)
            
        For Each rQuelle In r.Columns(1).Cells
            If rQuelle.Cells(1, 1).Value <> vbNullString Then
                Zielsatz = setSrcToTrgSatz(rQuelle)
                lngZeile = lngZeile + 1
                Call schreibeZielSatz(Zielsatz, lngZeile)
            End If
        Next
        
    Set rQuelle = Nothing
    Set r = Nothing

End Sub

Private Function setSrcToTrgSatz(rQuelle As Range) As tTBSatz
On Error Resume Next
    setSrcToTrgSatz.AktMonat = Mitarbeiter_Info.Range("AktMonat")
    setSrcToTrgSatz.MaPersonalnummer = Mitarbeiter_Info.Range("MaPersonalnummer")
    setSrcToTrgSatz.MaKuerzel = Mitarbeiter_Info.Range("MaKuerzel")
    setSrcToTrgSatz.MaVName = Mitarbeiter_Info.Range("MaVName")
    setSrcToTrgSatz.MaNName = Mitarbeiter_Info.Range("MaNName")
    setSrcToTrgSatz.Kunde = rQuelle.Cells(1, 1)
    setSrcToTrgSatz.Projekt = rQuelle.Cells(1, 2)
    setSrcToTrgSatz.Proj_Kst = rQuelle.Cells(1, 4)
    setSrcToTrgSatz.VertrCode = rQuelle.Cells(1, 5)
    If rQuelle.Cells(1, 6) = vbNullString Then
        setSrcToTrgSatz.Stunden = 0
    Else
        setSrcToTrgSatz.Stunden = CDbl(rQuelle.Cells(1, 6))
    End If
    If rQuelle.Cells(1, 10) <> 0 Then
        setSrcToTrgSatz.APKunde = rQuelle.Cells(1, 10)
    End If
    If rQuelle.Cells(1, 11) <> "--" Then
        setSrcToTrgSatz.APSD_C = rQuelle.Cells(1, 11)
    End If
    setSrcToTrgSatz.Element = rQuelle.Cells(1, 12)
    setSrcToTrgSatz.SD_CCode = rQuelle.Cells(1, 13)
On Error GoTo 0
End Function

Private Sub schreibeZielSatz(Zielsatz As tTBSatz, lngZeile As Long)
    Dim ws As Worksheet
    
    Set ws = |fffd|bersichtProjekte
    With ws
        .Unprotect ProtectKW
            .Cells(lngZeile, 1) = Zielsatz.AktMonat
            .Cells(lngZeile, 2) = Zielsatz.MaPersonalnummer
            .Cells(lngZeile, 3) = Zielsatz.MaKuerzel
            .Cells(lngZeile, 4) = Zielsatz.MaVName
            .Cells(lngZeile, 5) = Zielsatz.MaNName
            .Cells(lngZeile, 6) = Zielsatz.Kunde
            .Cells(lngZeile, 7) = Zielsatz.Projekt
            .Cells(lngZeile, 8) = Zielsatz.Proj_Kst
            .Cells(lngZeile, 9) = Zielsatz.VertrCode
            .Cells(lngZeile, 10) = Zielsatz.Stunden
            .Cells(lngZeile, 11) = Zielsatz.APKunde
            .Cells(lngZeile, 12) = Zielsatz.APSD_C
            .Cells(lngZeile, 13) = Zielsatz.Element
            .Cells(lngZeile, 14) = Zielsatz.SD_CCode
    End With
    
    Set ws = Nothing

End Sub

Private Sub clearWS()
    Dim ws As Worksheet
    
    Set ws = |fffd|bersichtProjekte
    With ws
        .Unprotect ProtectKW
        .Range("A2", "N6000").ClearContents
        
    End With
    Set ws = Nothing

End Sub

'liest die Tabelle im Tabellenblatt 'Spesen_und_Auslagen' aus
Private Sub readDynBereichSA(lngZeileSA As Long)
    Dim s As Range
    Dim sQuelle As Range
    Dim pQuelle As Range
    Dim zielsatzSA As tSASatz

    Set s = ActiveWorkbook.Names("LAR_SpesenAuslagenProjekte").RefersToRange

        'f|fffd|r die 1. Zeile
        Set sQuelle = s.Cells(0, 0)
         zielsatzSA = setSrcToTrgSatzSA(sQuelle)
            If lngZeileSA <> 2 Then
               lngZeileSA = lngZeileSA + 1
            End If

         Call schreibeZielSatzSA(zielsatzSA, lngZeileSA)

        'f|fffd|r alle folgenden Zeilen
        For Each sQuelle In s.Columns(1).Cells
            If Not IsEmpty(sQuelle) Then
                zielsatzSA = setSrcToTrgSatzSA2(sQuelle)
                lngZeileSA = lngZeileSA + 1
                Call schreibeZielSatzSA(zielsatzSA, lngZeileSA)
            End If
        Next

    Set sQuelle = Nothing
    Set s = Nothing

End Sub


'ordnet den einzelnen Spalten 'Alle_MA_Spesen_und_Auslagen' den richtigen Bezug aus der Tabelle 'Spesen_und_Auslagen' zu
Private Function setSrcToTrgSatzSA(sQuelle As Range) As tSASatz
    Dim g As Integer

    setSrcToTrgSatzSA.Datum = sQuelle.Cells(2, 1)
    setSrcToTrgSatzSA.PersonalNr = Mitarbeiter_Info.Range("MAPersonalnummer")
    setSrcToTrgSatzSA.K|fffd|rzel = Mitarbeiter_Info.Range("MAKuerzel")
    setSrcToTrgSatzSA.Vorname = Mitarbeiter_Info.Range("MAVName")
    setSrcToTrgSatzSA.Nachname = Mitarbeiter_Info.Range("MANName")
    setSrcToTrgSatzSA.lfdNr = sQuelle.Cells(2, 2)
    setSrcToTrgSatzSA.Art_des_Einsatzes = sQuelle.Cells(2, 5)
    setSrcToTrgSatzSA.genehm_durch_GF = sQuelle.Cells(2, 6)
    setSrcToTrgSatzSA.VMAvon = sQuelle.Cells(2, 10)
    setSrcToTrgSatzSA.VMAbis = sQuelle.Cells(2, 11)
    setSrcToTrgSatzSA.VMAGB = sQuelle.Cells(2, 12)
    setSrcToTrgSatzSA.VMAAbzug = sQuelle.Cells(2, 13)
    setSrcToTrgSatzSA.VMAErstattung = sQuelle.Cells(2, 14)
    setSrcToTrgSatzSA.FKEKunde = sQuelle.Cells(2, 15)
    setSrcToTrgSatzSA.FKESDC = sQuelle.Cells(2, 16)
    setSrcToTrgSatzSA.FKE = sQuelle.Cells(2, 17)
    setSrcToTrgSatzSA.EBEBelegNr = sQuelle.Cells(2, 18)
    setSrcToTrgSatzSA.EBEKunde = sQuelle.Cells(2, 19)
    setSrcToTrgSatzSA.EBESDC = sQuelle.Cells(2, 20)
    setSrcToTrgSatzSA.EBEKennzSt = sQuelle.Cells(2, 21)
    setSrcToTrgSatzSA.EBEBezahltvon = sQuelle.Cells(2, 22)
    setSrcToTrgSatzSA.Bemerkungen = sQuelle.Cells(2, 23)

End Function

'weist den Spalteneintr|fffd|gen den richtigen Bezug zu
Private Function setSrcToTrgSatzSA2(sQuelle As Range) As tSASatz

    setSrcToTrgSatzSA2.Datum = sQuelle.Cells(2, 0)
    setSrcToTrgSatzSA2.PersonalNr = Mitarbeiter_Info.Range("MAPersonalnummer")
    setSrcToTrgSatzSA2.K|fffd|rzel = Mitarbeiter_Info.Range("MAKuerzel")
    setSrcToTrgSatzSA2.Vorname = Mitarbeiter_Info.Range("MAVName")
    setSrcToTrgSatzSA2.Nachname = Mitarbeiter_Info.Range("MANName")
    setSrcToTrgSatzSA2.lfdNr = sQuelle(2, 1)
    setSrcToTrgSatzSA2.Art_des_Einsatzes = sQuelle.Cells(2, 4)
    setSrcToTrgSatzSA2.genehm_durch_GF = sQuelle.Cells(2, 5)
    setSrcToTrgSatzSA2.VMAvon = sQuelle.Cells(2, 9)
    setSrcToTrgSatzSA2.VMAbis = sQuelle.Cells(2, 10)
    setSrcToTrgSatzSA2.VMAGB = sQuelle.Cells(2, 11)
    setSrcToTrgSatzSA2.VMAAbzug = sQuelle.Cells(2, 12)
    setSrcToTrgSatzSA2.VMAErstattung = sQuelle.Cells(2, 13)
    setSrcToTrgSatzSA2.FKEKunde = sQuelle.Cells(2, 14)
    setSrcToTrgSatzSA2.FKESDC = sQuelle.Cells(2, 15)
    setSrcToTrgSatzSA2.FKE = sQuelle.Cells(2, 16)
    setSrcToTrgSatzSA2.EBEBelegNr = sQuelle.Cells(2, 17)
    setSrcToTrgSatzSA2.EBEKunde = sQuelle.Cells(2, 18)
    setSrcToTrgSatzSA2.EBESDC = sQuelle.Cells(2, 19)
    setSrcToTrgSatzSA2.EBEKennzSt = sQuelle.Cells(2, 20)
    setSrcToTrgSatzSA2.EBEBezahltvon = sQuelle.Cells(2, 21)
    setSrcToTrgSatzSA2.Bemerkungen = sQuelle.Cells(2, 22)

End Function

'weist zu der lfdNr die zugeh|fffd|rigen Spalten aus dem Tabellenblatt 'Projekte' zu
Private Function setSrcToTrgSatzSA3(lngRowFrom As Long, lngRowTo As Long) As tSASatz
    Dim g, k As Integer
    Dim letzteZelle As Variant
    Dim letzteZeile As Variant
    
    If lngRowFrom > 2 Then
        lngRowFrom = lngRowFrom + 1
    End If
    letzteZelle = Projekte.Cells(Cells.Rows.count, 1).End(xlUp).Row
    letzteZeile = |fffd|bersichtSpesen.Cells(Cells.Rows.count, 1).End(xlUp).Row

    For g = 5 To letzteZelle
        For k = lngRowFrom To lngRowTo
            If Projekte.Cells(g, 1) <> "" Then
                If |fffd|bersichtSpesen.Cells(k, 6) = Projekte.Cells(g, 1) Then
                    |fffd|bersichtSpesen.Cells(k, 7) = Projekte.Cells(g, 3)
                    |fffd|bersichtSpesen.Cells(k, 8) = Projekte.Cells(g, 4)
                    |fffd|bersichtSpesen.Cells(k, 9) = Projekte.Cells(g, 5)
                    |fffd|bersichtSpesen.Cells(k, 10) = Projekte.Cells(g, 6)
                    |fffd|bersichtSpesen.Cells(k, 11) = Projekte.Cells(g, 7)
                    |fffd|bersichtSpesen.Cells(k, 12) = Projekte.Cells(g, 8)
                    |fffd|bersichtSpesen.Cells(k, 13) = Projekte.Cells(g, 9)
                    |fffd|bersichtSpesen.Cells(k, 14) = Projekte.Cells(g, 10)
                    |fffd|bersichtSpesen.Cells(k, 15) = Projekte.Cells(g, 11)
                    |fffd|bersichtSpesen.Cells(k, 16) = Projekte.Cells(g, 12)
                End If
            End If
        Next k
    Next g
    

End Function

'schreibt die Werte aus der Tabelle 'Spesen_und_Auslagen' und 'Projekte' in die Tabelle 'Alle_MA_Spesen_und_Auslagen'
Private Sub schreibeZielSatzSA(zielsatzSA As tSASatz, lngZeileSA As Long)
    Dim wsSA As Worksheet

    Set wsSA = |fffd|bersichtSpesen
    With wsSA
        .Unprotect ProtectKW
            .Cells(lngZeileSA, 1) = zielsatzSA.Datum
            .Cells(lngZeileSA, 2) = zielsatzSA.PersonalNr
            .Cells(lngZeileSA, 3) = zielsatzSA.K|fffd|rzel
            .Cells(lngZeileSA, 4) = zielsatzSA.Vorname
            .Cells(lngZeileSA, 5) = zielsatzSA.Nachname
            .Cells(lngZeileSA, 6) = zielsatzSA.lfdNr
            .Cells(lngZeileSA, 7) = zielsatzSA.Kunde
            .Cells(lngZeileSA, 8) = zielsatzSA.Projekt
            .Cells(lngZeileSA, 9) = zielsatzSA.Element
            .Cells(lngZeileSA, 10) = zielsatzSA.UnbillabeGrund
            .Cells(lngZeileSA, 11) = zielsatzSA.APKunde
            .Cells(lngZeileSA, 12) = zielsatzSA.APSDC
            .Cells(lngZeileSA, 13) = zielsatzSA.T|fffd|tigkeitsart
            .Cells(lngZeileSA, 14) = zielsatzSA.UBCode
            .Cells(lngZeileSA, 15) = zielsatzSA.SDCCode
            .Cells(lngZeileSA, 16) = zielsatzSA.KST
            .Cells(lngZeileSA, 17) = zielsatzSA.Art_des_Einsatzes
            .Cells(lngZeileSA, 18) = zielsatzSA.genehm_durch_GF
            .Cells(lngZeileSA, 19) = zielsatzSA.VMAvon
            .Cells(lngZeileSA, 20) = zielsatzSA.VMAbis
            .Cells(lngZeileSA, 21) = zielsatzSA.VMAGB
            .Cells(lngZeileSA, 22) = zielsatzSA.VMAAbzug
            .Cells(lngZeileSA, 23) = zielsatzSA.VMAErstattung
            .Cells(lngZeileSA, 24) = zielsatzSA.FKEKunde
            .Cells(lngZeileSA, 25) = zielsatzSA.FKESDC
            .Cells(lngZeileSA, 26) = zielsatzSA.FKE
            .Cells(lngZeileSA, 27) = zielsatzSA.EBEBelegNr
            .Cells(lngZeileSA, 28) = zielsatzSA.EBEKunde
            .Cells(lngZeileSA, 29) = zielsatzSA.EBESDC
            .Cells(lngZeileSA, 30) = zielsatzSA.EBEKennzSt
            .Cells(lngZeileSA, 31) = zielsatzSA.EBEBezahltvon
            .Cells(lngZeileSA, 32) = zielsatzSA.Bemerkungen
    End With

    Set wsSA = Nothing

End Sub

'w|fffd|hlt das Tabellenblatt 'Alle_MA_Spesen_und_Auslagen' aus und l|fffd|scht den Inhalt der Tabelle bis auf die Spalten Monat und Jahr
Private Sub clearWSSA()
    Dim wsSA As Worksheet

    Set wsSA = |fffd|bersichtSpesen
    With wsSA
        .Unprotect ProtectKW
        .Range("A2", "AF6000").ClearContents
    End With

    Set wsSA = Nothing

End Sub






Attribute VB_Name = "InputOutput"
Option Explicit



Function ExportFileNameShort(Ext As String) As String
' Autor: Peter Fuchs
' Datum: 10.05.2001
' Zweck: Liefert Dateinamen f|fffd|r Exportfile
'        Setzt Dateinamen aus Mitarbeiterk|fffd|rzel
'        und Abrechnungszeitraum zusammen

Dim r As String
Dim ws As Worksheet
    
    Set ws = WB_Main.Worksheets("Mitarbeiter Info")
    r = "ZE_" & ws.Range("MAKuerzel")
    r = r & "_" & Format(CDate(ws.Range("AktMonat")), "yymm") & "."
    If Ext = "" Then
        r = r & Default_Export_File_Ext
    Else
        r = r & Ext
    End If
    ExportFileNameShort = r

End Function
Function ExportFileName(Optional Ext As String)
' Autor: Peter Fuchs
' Datum: 10.05.2001
' Zweck: Liefert Dateinamen f|fffd|r Exportfile
'        Setzt Dateinamen aus Mitarbeiterk|fffd|rzel
'        und Abrechnungszeitraum zusammen
    ExportFileName = Export_Path() & "\" & ExportFileNameShort(Ext)
End Function

Function Export_Path()
' Autor: Peter Fuchs
' Datum: 10.05.2001
' Zweck: Liefert Pfad f|fffd|r Exportfile

    Dim r As String
    
    r = WB_Main.FullName
    Export_Path = LinkesEnde(r, "\")
    
End Function

Function GetFilename()
    Dim a
    Dim b As String
    
        a = "Zeitabrechnung-Export (*.xls), *.xls"
    
    ' Pfad einstellen
        ' Klammern im Dir-Namen tauschen, soda|fffd| Sendkeyskompatibel
        b = ReplaceOneChar(Export_Path, "(", "{(}")
        b = ReplaceOneChar(b, ")", "{)}")
        SendKeys b & "~", False
    
    ' FileDialog |fffd|ffnen
        GetFilename = Application.GetOpenFilename(a, , "Zeitabrechnung-Import...")
        If TypeName(GetFilename) = "Boolean" Then GetFilename = ""
    
End Function

Attribute VB_Name = "MInfo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Option Explicit


Attribute VB_Name = "Main"
#Const IsExcel97 = True

Option Explicit


' Regeln:   T|fffd|tigkeitsbericht sind alle Worksheet
'           mit Anfang "TB" ausser TBVorlage siehe IsTB

 
' ***************************************************************

   #If IsExcel97 Then
        Public Const PI_BaanPCode = 1
        Public Const PI_SDCPCode = 2
        Public Const PI_KundenName = 3
        Public Const PI_Projekttitel = 4
        Public Const PI_ElementCode = 5
        Public Const PI_Elementtext = 6
        Public Const PI_Code = 7
        Public Const PI_Code_Text = 8
        Public Const PI_Billable = 9
        Public Const PI_Teamcode = 10
    #Else
        Enum ProjectInfoTyp
            PI_BaanPCode = 1
            PI_SDCPCode = 2
            PI_KundenName = 3
            PI_Projekttitel = 4
            PI_ElementCode = 5
            PI_Elementtext = 6
            PI_Code = 7
            PI_Code_Text = 8
            PI_Billable = 9
            PI_Teamcode = 10
        End Enum
    #End If
    
    #If IsExcel97 Then
            Public Const VN_BillableHours = 1
            Public Const VN_UnBillableHours = 2
            Public Const VN_Pauschale = 3
            Public Const VN_Strecke_billable_km = 4
            Public Const VN_Strecke_unbillable_km = 5
            Public Const VN_Auslagen_Billable_EUR = 6
            Public Const VN_Auslagen_unbillable_EUR = 7
    ' elseteil im Modul objBaanInterface
    #End If
     
    
    
Public Sub INIT_Zeitabrechnung()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Sammlung aller Routinen, die beim Start der Anwendung
'        Zeitabrechnung ausgef|fffd|hrt werden sollten.
'

    On Error GoTo INIT_Zeitabrechnung_Err

    'Stratbildschirm einblenden
    ' WICHTIG: Muss nach CreatSymb aufgerufen werden
    '   wg Initialisierungen
      ShowStart

    'Sicherstellen, das notwendige Addins vorhanden sind.
       CheckAddIn
       
   
    'Blattschutz einschalten
        ProtectAllSheets
   ' Info2 initialisieren
        Monat2Start
        
        
        
    Exit Sub
INIT_Zeitabrechnung_Err:
    
    Select Case Err.Number
    Case 9 ' Indexfehler, wenn Add-Inn unbekannt.
        MsgBox "Installieren Sie das fehlende Add-In " & vbCrLf & """Analyse-Funktionen - VBA""" & " und starten Sie" & vbCrLf & "die Anwendung erneut.", vbCritical, "Fehler Nr.: " & Err.Number
        Application.Quit
    Case Else
        MsgBox Err.Description, vbCritical, "Fehler Nr.: " & Err.Number
    End Select
End Sub


Sub SymbCreate()
' Autor: Peter Fuchs
' Datum: 10.05.2001
' Zweck: Symbolleiste f|fffd|r Sheet-Zugrif
    
    Dim cb As CommandBar
    Dim CBC As CommandBarControl
    Dim Button As CommandBarButton
    
  
    ' Symbolleiste ggf. l|fffd|schen
        On Error Resume Next
        CommandBars("Zeiterfassung_Start").Delete
        
     
    If isBulkImport() Then
        Exit Sub
    End If
    
    ' neue Symbolleiste zusammensetzen
         Set ZA_Menue = CommandBars.Add("Zeiterfassung_Start", msoBarTop, False, True)
         With ZA_Menue
            
         'Start
            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
            With Button
                .Caption = "Start"
                .OnAction = "GoBack"
                .Visible = True
                .Enabled = True
                '.TooltipText = "Kehrt zum Start" & vbLf & "-Men|fffd| zur|fffd|ck."
                .Style = msoButtonCaption
            End With
         
         'Arbeitszeiten
            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
            With Button
                .Caption = "Arbeitszeiten"
                .OnAction = "Start.AZ_Click"
                .Visible = True
                .Enabled = True
                '.TooltipText = "Kehrt zum Start" & vbLf & "-Men|fffd| zur|fffd|ck."
                .Style = msoButtonCaption
            End With
            
         'Stammdaten
            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
            With Button
                .Caption = "Stammdaten"
                .OnAction = "Start.Stamm_Click"
                .Visible = True
                .Enabled = True
                '.TooltipText = "Kehrt zum Start" & vbLf & "-Men|fffd| zur|fffd|ck."
                .Style = msoButtonCaption
            End With
            
         'Zeitabrechnung
            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
            With Button
                .Caption = "Zeitabrechnung"
                .OnAction = "Start.ZA_Click"
                .Visible = True
                .Enabled = True
                '.TooltipText = "Kehrt zum Start" & vbLf & "-Men|fffd| zur|fffd|ck."
                .Style = msoButtonCaption
            End With
        
        'T|fffd|tigkeitsberichte
            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
            With Button
                .Caption = "T|fffd|tigkeitsberichte"
                .OnAction = "Start.TB_Click"
                .Visible = True
                .Enabled = True
                '.TooltipText = "Kehrt zum Start" & vbLf & "-Men|fffd| zur|fffd|ck."
                .Style = msoButtonCaption
            End With
        
        'Auslagen / Spesen
            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
            With Button
                .Caption = "Auslagen / Spesen"
                .OnAction = "Start.AL_Click"
                .Visible = True
                .Enabled = True
                '.TooltipText = "Kehrt zum Start" & vbLf & "-Men|fffd| zur|fffd|ck."
                .Style = msoButtonCaption
            End With
            
        'Urlaub
            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
            With Button
                .Caption = "Urlaub"
                .OnAction = "Start.UL_Click"
                .Visible = True
                .Enabled = True
                '.TooltipText = "Kehrt zum Start" & vbLf & "-Men|fffd| zur|fffd|ck."
                .Style = msoButtonCaption
            End With
           
           

           
        ' Men|fffd|block anh|fffd|ngen
           MenuCreate
           
        ' Symboleiste einschalten
            ZA_Menue.Visible = True
        End With
End Sub

Sub MenuCreate()
' Autor:
' Datum: 12.02.2001
' Zweck: Men|fffd|befehle einbauen, Shortcuts definieren
'
    
    
    Dim cb As CommandBar
    Dim CBC As CommandBarControl
    Dim Button As CommandBarButton
    
    
    
    'Set CBC = CommandBars("Worksheet Menu Bar").Controls.Add(Type:=msoControlPopup)
    Set CBC = CommandBars("Zeiterfassung_Start").Controls.Add(Type:=msoControlPopup)
        CBC.Caption = ("&Zeiterfassung")
        CBC.BeginGroup = True
    
     With CBC
     
     ' Zur|fffd|ck-Button
            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
            With Button
                .Caption = "Zur|fffd|ck"
                .OnAction = "GoBack"
                .Visible = True
                .Enabled = True
                .TooltipText = "Kehrt zum Start" & vbLf & "-Men|fffd| zur|fffd|ck."
                .Style = msoButtonCaption
            End With
    
    ' Toggle Comment-Button
            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
            With Button
                .Caption = "Toggle Comment"
                .OnAction = "ToggleAZCommentView"
                .Visible = True
                .Enabled = True
                .TooltipText = "Schaltet Kommentarspalte zu" & vbLf & "aktueller Spalte ein."
                .Style = msoButtonCaption
                .ShortcutText = "Strg-K"
                .BeginGroup = True
            End With
    
            'Button merken und  Strg-K zuordnen
                Set ToggleMenuButton = Button
                Application.MacroOptions Macro:="ToggleAZCommentView", HasShortcutKey:=True, ShortcutKey:="k"
                ToggleMenuButton.Enabled = False
        
        ' Toggle ToggleAllCommentCols
            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
            With Button
                .Caption = "Toggle alle Kommentarspalten"
                .OnAction = "ToggleAllCommentCols"
                .Visible = True
                .Enabled = True
                .TooltipText = "Schaltet alle Kommentar-" & vbLf & "spalten ein oder aus."
                .Style = msoButtonCaption
                .ShortcutText = "Strg-L"
            End With
            Button.Enabled = False
            
            'Button merken und  Strg-L zuordnen
                Set ToggleAllComment = Button
                Application.MacroOptions Macro:="ToggleAllCommentCols", HasShortcutKey:=True, ShortcutKey:="l"
                ToggleAllComment.Enabled = False
            
        
        ' Toggle Deutsche Formelwerte nach English
            If Not IsExcel2010() Then
                Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
                With Button
                    .Caption = "Englische Formeln"
                    .OnAction = "ToggleDeutschEnglish"
                    .Visible = True
                    .Enabled = True
                    .TooltipText = "Schaltet alle Kommentar-" & vbLf & "spalten ein oder aus."
                    .Style = msoButtonCaption
                    .ShortcutText = "Strg-L"
                    .BeginGroup = True
                End With
                Button.Enabled = False
            End If
            
            'Button merken
                Set ToggleDeuEng = Button
                ToggleDeuEng.Enabled = True
        
        ' Aktuelles Blatt als PDF exportieren / drucken
            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
            With Button
                .Caption = "Aktuelles Blatt als PDF drucken"
                .OnAction = "PrintCurrentSheetAsPDF"
                .Visible = True
                .Enabled = True
                .TooltipText = "Erzeugt PDF der aktuellen Seite"
                .Style = msoButtonCaption
                .BeginGroup = True
            End With
          
          ' Reset des Men|fffd|s
            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
            With Button
                .Caption = "Reset Worksheet"
                .OnAction = "ResetWorksheet"
                .Visible = True
                .Enabled = True
                .TooltipText = "Workbook erneut initialisieren."
                .Style = msoButtonCaption
                .BeginGroup = True
            End With
                
                
'          ' Reset des Men|fffd|s
'            Set Button = .Controls.Add(Type:=msoControlButton, ID:=2)
'            With Button
'                .Caption = "Fahrtzeiteneingabe"
'                .OnAction = "AZ_und_Spesen"
'                .Visible = True
'                .Enabled = True
'                .TooltipText = "Spezielle Ansicht f|fffd|r Fahrzeiteingabe"
'                .Style = msoButtonCaption
'                .BeginGroup = True
'            End With
'

                
    End With

 
End Sub

Public Sub MenuDelete()
    
    Dim cb As CommandBar
        On Error GoTo finish
    
    Set cb = CommandBars("Zeiterfassung_Start")
    
    If Not CommandBars("Zeiterfassung_Start") Is Nothing Then
        CommandBars("Zeiterfassung_Start").Delete
    End If

Exit Sub
finish:
    If Err = 5 Then
        Exit Sub
    Else
        MsgBox Err.Description, vbCritical, "MenuDelete"
    End If
    Resume
End Sub



Public Sub DelTB()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: L|fffd|scht alle TBs ohne Vorlage
'
    Dim ws As Worksheet
    For Each ws In ThisWorkbook.Worksheets
        If IsTB(ws) Then ws.Delete
    Next
End Sub

Public Sub CreateTB()
' Autor:
' Datum: 12.02.2001
' Zweck: Erzeuge TBS
' Autor:   WHA
' Datum: 25.02.2001
' Zweck: Ausschalten von L|fffd|schen nicht ben|fffd|tigte TB - funktioniert nicht

    Dim sht As Worksheet
   
    Dim ProjektLfd As Variant
    Dim AnzStd As Variant
    Dim Zelle As Range
    Dim TBName As String
    Dim ShtAZ As Worksheet
    
    Application.DisplayAlerts = False
        
    Set ShtAZ = ThisWorkbook.Sheets("Arbeitszeiten")

    'PFU: Erinnerung
    'MsgBox "Bitte auch Auslagen und Spesenbericht ausf|fffd|llen", vbInformation, "Ach ja.."
    
    ' L|fffd|schen
    DelTB
    
    'Erzeugen TB
    ScreenUpdating False
    For Each Zelle In ShtAZ.Range("AktiveProjekteKurz")
        CreateOneTB Zelle
    Next
    
    
    ' Ausblenden der Vorlage
    Sheets("TBVorlage").Visible = False
    
    Application.DisplayAlerts = True
    ScreenUpdating True
End Sub


Sub CreateOneTB(Zelle As Range)
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Sammlung aller Routinen, die beim Start der Anwendung
'            Zeitabrechnung ausgef|fffd|hrt werden sollten.
' Autor:   WHA
' Datum: 25.02.2001
' Zweck: TBVorlage einblenden und aktivieren, sonst Fehler
    
    Dim TBName As String
        TBName = "TB" & Zelle
        ' Projektnummer existiert.
        If Len(TBName) > 2 Then
            ' WHA: Einblenden und Aktivieren der Vorlage
            ActivateSheet ("TBVorlage")
            ' Kopieren
            Sheets("TBVorlage").Copy After:=Sheets("TBVorlage")
            ' Umbenenenen
            Sheets("TBVorlage (2)").name = TBName
            ' WHA: Schreibschutz entfernen
            Sheets(TBName).Unprotect (ProtectKW)
            ' Sheet auf Projekt "eichen".
            Sheets(TBName).Range("A4") = Zelle
            ' WHA: Schreibschutz wieder setzen
            Sheets(TBName).Protect (ProtectKW)
            ' Unklar
            ' Sheets("TBVorlage (2)").Delete
        End If
End Sub

Sub DelUnusedTBs(sht As Worksheet)
        
    On Error GoTo DelUnusedTBs_Err
    
    Dim ProjektLfd
    Dim ShtAZ As Worksheet
    Dim AnzStd
    
    If IsTB(sht) Then
        ProjektLfd = Val(Mid(sht.name, 3))
        If ProjektLfd = 0 Then ProjektLfd = Mid(sht.name, 3)

        AnzStd = WorksheetFunction.VLookup(ProjektLfd, ShtAZ.Range("AktiveProjekte"), 66, False)
        If IsEmpty(AnzStd) Then
            If sht.name <> "TBVorlage" Then Sheets(sht.name).Delete
        Else
            If AnzStd = 0 Then Sheets(sht.name).Delete
            AnzStd = Empty
        End If
    End If

Exit Sub
DelUnusedTBs_Err:
    
    Select Case Err.Number
    Case 9, 1004
        Resume Next
    Case Else
        MsgBox Err.Description, vbCritical, "Fehler Nr.: " & Err.Number
    End Select
End Sub


'*************************************************************
'** Code PFU
'** 12.02.2001
'*************************************************************


Public Sub NeuerMonat(abfrage_msgbox)
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Wickelt alle Aktionen ab, um Worksheet f|fffd|r Erfassung
'        des n|fffd|chsten Monats vorzubereiten:
'           - sicherheitsabfrage

'           - Gleitzeit sichern
'           - AktMonat auf n|fffd|chsten Ersten setzen
'           - Bereiche leeren
'           - TBs l|fffd|schen
'           - TBs einf|fffd|gen
'           - HWR: Monatsanzeige auf der Startseite aktualisieren
'

    '
        Inc UserInputCheck
    '
        SB.SetSB "neuer Monat... "
        
    ' MEN 04.7.2013
    ' Pr|fffd|fen ob Monat konsistent
    If abfrage_msgbox = True Then
        Berechnung_Pauschale.Monatscheck
        If Cells(1, 1) <> 1 Then
            MsgBox ("Der Datumswert f|fffd|r den Monat wurde manuell ge|fffd|ndert und f|fffd|hrt zu potenziell zu Inkosistenzen. Bitte pr|fffd|fen und ggf. den Button 'Pauschale manuell berechnen' verwenden. Es wird kein Monatswechsel durchgef|fffd|hrt.")
            Exit Sub
        End If
    End If
    
    ' Fragen ob User neuen Monat will, wenn nein Exit
    If abfrage_msgbox = True Then
        If MsgBox("Es wird zum n|fffd|chsten Monat gewechselt." & vbCrLf & "Eingaben zum aktuellen Monat werden gel|fffd|scht." & vbCrLf & vbCrLf & "Ist das OK?", vbQuestion + vbYesNo, "Zum n|fffd|chsten Monat wechseln") <> vbYes Then Exit Sub
        'Berechnen bei Nutzung des Buttons
        Berechnung_Pauschale.Pauschale_berechnen
    End If
    ' Gleitzeit sichern
        SaveGleitzeit

    ' FLE 16.08.2002
    ' Wert f|fffd|r auszuzahlenden |fffd|berstunden in Zeitabrechnung l|fffd|schen
  
    Dim R2 As Range
    Set R2 = ActiveWorkbook.Names("LAR_Gleitzeit").RefersToRange
    If R2 = "Ja" Then
        Application.Sheets("Zeitabrechnung").Range("ZA_Ausgezahlte_UebStd").Value = vbNullString
    End If
        
    ' Datum der Zeiterfassung plus 1 Monat
        Dim D As Date
        D = Range(ActiveWorkbook.Names("AktMonat")).Value
        D = DateAdd("m", 1, D)
        Range(ActiveWorkbook.Names("AktMonat")).Value = D
        
    ' Bereiche L|fffd|schen
        ClearRanges CLR_ForNewMonth
    
    ' l|fffd|schen und erneut erzeugen aller T|fffd|tigkeitsberichte
        ResetTBs
        
    'Wieder auf Startblatt gehen
        HideAllSheets
        
    ' MEN 06.06.2013
    ' Pauschale Berechnen bei Nutzung der n manuellen Manipulation
    If abfrage_msgbox = False Then
        Berechnung_Pauschale.Pauschale_berechnen
    End If
    
    'HWR: Monatsanzeige auf der Startseite aktualisieren
    Monat2Start

    SB.Reset
    'ActiveWorkbook.HighlightChangesOnScreen = True
End Sub

Sub ResetTBs()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Entfernt alle T|fffd|tigkeitsberichts-Sheet aus Workbook
'        und f|fffd|gt neue wieder ein.

        Dim ws As Worksheet
        Application.DisplayAlerts = False
        For Each ws In ActiveWorkbook.Worksheets
            
'Debug.Print ws.Name, IsTB(ws)
                ' Wenn T|fffd|tigkeitsbericht, dann l|fffd|schen
                If IsTB(ws) Then
                    ActiveWorkbook.Worksheets(ws.name).Delete
                End If
        Next
        Application.DisplayAlerts = True
    'einf|fffd|gen aller T|fffd|tigkeitsberichte je nach Projektliste
    CreateTB

End Sub

Sub ClearFeiertage()
    Dim r As Range
    Dim ws As Worksheet
    
    UserInputCheckNo
        SB.SetSB "Bereiche Leeren"

    ' Feiertage
        Set ws = Feiertage
        ws.Unprotect ProtectKW
        ws.Visible = xlSheetVisible
        ws.Select
            Set r = ws.Range("Feiertage_Clear_1")
            r.ClearContents
        ws.Visible = False
        ws.Protect ProtectKW
End Sub

Sub ClearRanges(Version)
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Leert alle Bereiche, die f|fffd|r neuen Monat leer sein sollten.
'           Wichtiger Hinweis: Benannte bereich Clear ist
'           erheblicher schneller als durch alle zellen zu gehen.
'        Unterschiede in den gel|fffd|schten bereichen nach Version
'        CLR_ForImport, CLR_ForNewMonth

    
    Dim r As Range
    Dim ws As Worksheet
    
    UserInputCheckNo
        SB.SetSB "Bereiche Leeren"
        
    If Version = CLR_ForImport Or Version = CLR_ForNewMonth Then
        Set ws = Arbeitszeiten
            GoSub ClearRanges_init
                Set r = ws.Range("AZ_Clear_Input_1")
                r.ClearContents
                Set r = ws.Range("AZ_Clear_Input_2")
                r.ClearContents
                Set r = ws.Range("AZ_Clear_Input_3")
                r.ClearContents
                Set r = ws.Range("AZ_Clear_Input_4_1_5")
                r.ClearContents
                Set r = ws.Range("AZ_Clear_Input_4_11_15")
                r.ClearContents
                Set r = ws.Range("AZ_Clear_Input_4_16_20")
                r.ClearContents
                Set r = ws.Range("AZ_Clear_Input_4_21_25")
                r.ClearContents
                Set r = ws.Range("AZ_Clear_Input_4_26_31")
                r.ClearContents
                Set r = ws.Range("AZ_Clear_Input_4_6_10")
                r.ClearContents
                Clear_Comment
            GoSub ClearRanges_exit
    End If
    
    ' Projekte eingabebereiche leeren
    If Version = CLR_ForImport Then
        Set ws = Projekte
        GoSub ClearRanges_init
        ws.Select
            Set r = ws.Range("PRJ_Clear_1")
            r.ClearContents
            Set r = ws.Range("PRJ_Clear_2")
            r.ClearContents
            Set r = ws.Range("PRJ_Clear_3")
            r.ClearContents
            Set r = ws.Range("PRJ_Claer_4")
            r.ClearContents
        GoSub ClearRanges_exit
    End If
    
    
    ' Mitarbeiter
    If Version = CLR_ForImport Then
        Set ws = Mitarbeiter_Info
        GoSub ClearRanges_init
            Set r = Mitarbeiter_Info.Range("Ma_clear_1")
            GoSub ClearRanges_init
                r.ClearContents
                Set r = ws.Range("Ma_clear_2")
                r.ClearContents
                Set r = ws.Range("Ma_clear_3")
                r.ClearContents
                Set r = ws.Range("MA_Clear_4")
                r.ClearContents
                
        GoSub ClearRanges_exit
    End If
    
    ' Spesen und Auslagen eingabebereiche leeren
    If Version = CLR_ForImport Or Version = CLR_ForNewMonth Then
        Set ws = Spesen_und_Auslagen
        GoSub ClearRanges_init
            Set r = ws.Range("SuA_Clear_1")
            r.ClearContents
            Set r = ws.Range("SuA_Clear_2")
            r.ClearContents
            Set r = ws.Range("SuA_Clear_3")
            r.ClearContents
            Set r = ws.Range("SuA_Clear_4")
            r.ClearContents
            Set r = ws.Range("SuA_Clear_5")
            r.ClearContents
            Set r = ws.Range("SuA_Clear_6")
            r.ClearContents
        GoSub ClearRanges_exit
    End If
     
    ' Urlaub
    If Version = CLR_ForImport Then
        Set ws = Urlaub
        GoSub ClearRanges_init
            Set r = ws.Range("Urlaub_Clear_1")
            r.ClearContents
            Set r = ws.Range("Urlaub_Clear_2")
            r.ClearContents
            Set r = ws.Range("Urlaub_Clear_3")
            r.ClearContents
        GoSub ClearRanges_exit
    End If
    
    ' FLE 20.08.2002
    ' km-Abrechnung
    If Version = CLR_ForImport Then
        Set ws = km_Abrechnung
        GoSub ClearRanges_init
            Set r = ws.Range("kmAbrechnung_Clear_1")
            r.ClearContents
        GoSub ClearRanges_exit
    End If
    
    ' Anzahl zeilen in Spesen und Auslagen auf normalwert
        Reset_SuA_Lines
      
      
    UserInputCheckYes
    SB.Reset
    
    Exit Sub
    
ClearRanges_init:
    ws.Unprotect ProtectKW
    ws.Visible = xlSheetVisible
    ws.Select
Return
    
ClearRanges_exit:
    
    ws.Visible = False
    ws.Protect ProtectKW
Return
End Sub

Sub SaveGleitzeit()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: |fffd|bertr|fffd|gt aktuellen Kontostand der Gleitzeitstunden
'        sofern MitarbeiterInfo Gleitzeit = "JA"
'        Wert aus zeitabrechnung: Saldo wird in Mitarbeiter_Info
'        Gleitzeitstand eingetragen.

    ' Pr|fffd|fen ob Gleitzeit |fffd|berhaupt von interesse
        If ActiveWorkbook.Names("MaGleitzeit").RefersToRange.Value = "Nein" Then Exit Sub
    
    ' Ja, Gleitzeit ist interessant.
    ' also Holen ' und |fffd|bertragen
        ActiveWorkbook.Names("MaGleitzeitBisher").RefersToRange.Value = _
        ActiveWorkbook.Names("ZA_GleitzeitSaldoNeu").RefersToRange.Value
        
End Sub

Sub ZA_ShowLinesWithP()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: In der Zeitabrechnung werden alle Zeilen ausgeblendet,
'        f|fffd|r die kein Projekt existiert. ( Erste Spalte = "")

Dim r As Range
Dim Found As Range
Dim FoundFirst As String
Dim OldWS As Worksheet

    Set OldWS = ActiveSheet

    Set r = ActiveWorkbook.Names("ZA_Dynamischerbereich").RefersToRange
    
    ' Alle zeilen einblenden
        ' Sheet aktivieren
        r.Parent.Activate
        ' Schutz aufheben
        UnProtectActiveSheet
            r.EntireRow.Hidden = False
        
    
    ' Alle zeilen mit leerer zelle ausblenden
        Set Found = r.Find(What:="", _
                            lookin:=xlValues, _
                            LookAt:=xlWhole, _
                            SearchOrder:=xlByColumns, _
                            MatchCase:=False)
        
        ' alle gefunden Zellen ausblenden
        If Not Found Is Nothing Then
            ' merken erster gefundener wert, um suche abbrechen zu k|fffd|nnen
            'FoundFirst = Found.Address
            Do
                Found.EntireRow.Hidden = True
                Set Found = r.FindNext
            Loop While Not Found Is Nothing 'And (Found.Address <> FoundFirst)
        End If
        
        ProtectActiveSheet
        OldWS.Activate
End Sub

Sub Reset_SuA_Lines()
' Autor: PFU
' Datum: 30.06.2001
' Zweck: Anzahl zeilen in Spesen_und_Auslagen r|fffd|cksetzen
        
        Dim r As Range
        Set r = Spesen_und_Auslagen.Range("SuR_SortEnd")
        
        Spesen_und_Auslagen.Unprotect ProtectKW
        Spesen_und_Auslagen.Visible = xlSheetVisible
        Spesen_und_Auslagen.Select
        Do
            'ASCTEST
            If r.Row > 60 Then
                r.offset(-1, 0).EntireRow.Delete
            Else
                Exit Do
            End If
        Loop
        Spesen_und_Auslagen.Visible = xlSheetHidden
        Spesen_und_Auslagen.Protect ProtectKW
End Sub
Attribute VB_Name = "Mitarbeiter_Info"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 24, 0, MSForms, CommandButton"
Attribute VB_Control = "CommandButton2, 25, 1, MSForms, CommandButton"
Attribute VB_Control = "CommandButton3, 26, 2, MSForms, CommandButton"


Option Explicit

Private Sub CommandButton1_Click()
    Pauschale
End Sub

Private Sub CommandButton2_Click()
    Pauschale_bearbeiten
End Sub

Private Sub CommandButton3_Click()
    Pauschal_bearbeiten_beenden
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
' Autor: PFU
' Datum: 28.06.2001
' Zweck: bei rechter amustaste auf zelle pr|fffd|fen, ob auswahlliste
'        angezeigt werden soll.

    If IsCell(Target) Then
            If CheckList(Target, "Status", Cancel) Then
        ElseIf CheckList(Target, "Kostenstellen", Cancel) Then
        ElseIf CheckList(Target, "Arbeitsplatz", Cancel) Then
        ElseIf CheckList(Target, "Dienstwagen", Cancel) Then
        ElseIf CheckList(Target, "Gleitzeit", Cancel) Then
        ElseIf CheckList(Target, "Standardprojekt", Cancel) Then
        ElseIf CheckList(Target, "vorw_Art_Einsatzes", Cancel) Then
       
        End If
    End If
    
End Sub


Private Sub Worksheet_Change(ByVal Target As Excel.Range)
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Pr|fffd|fen verschiedener Eingaben auf G|fffd|ltigkeit


' Abh|fffd|ngig vom Status des Mitarbeites werden ver|fffd|nderungen vorgenommen.
' Wenn Status = "AN" Dann :
' - |fffd|berschrift in Sheet "Zeitabrechnung" = "Zeitabrechnung"
' - Zeitabrechnung mit vollem Abrechnungsblock
' folgende namen werden erwartet

Dim OneCell As Boolean
Dim Cell As Range

    ' Bei Import kein Check
    If isBulkImport() Then
        Exit Sub
    End If
        
        If UserInputCheck > 0 Then Exit Sub

    ' Routine |fffd|ndern ggf zellwerte. Dann keine 2. Abarbeitung!
        Static Running As Boolean
        If Running Then Exit Sub
        Running = True
        ScreenUpdating False
    
    
    ' Pr|fffd|fen ob Target eine Celle oder mehrere Zellen
        OneCell = IsCell(Target)
        
    ' a-z in A-Z wandeln sofern ein Char
        
        If OneCell Then
            If IsOneLowerChar(Target) Then Target = UCase(Target)
        Else
            For Each Cell In Target.Cells
                If IsOneLowerChar(Cell) Then Target = UCase(Cell)
            Next
        End If

    
    
    'Check ob zelle = Statuszelle
    
        ' If "='" & Target.Worksheet.name & "'!" &
        ' Target.Address = ActiveWorkbook.Names().RefersTo Then
      
        If IsInRange(Mitarbeiter_Info.Range("MaStatus"), Target) Then
            ' |fffd|nderung an Zelle MaStatus !
            Select Case Target.Value
                Case "AN"
                    SetMa_AN_Option
                Case "FB", "SD&C"
                    SetMa_FB_Option
                Case Else
                    MsgBox "unbekannte MaStatus-Option", vbCritical, "Fehler in " & Application.ActiveSheet.name & ": " & "Worksheet_Change..."
            End Select
        End If
        
    ' 2. Anzeige aktueller Monat auf Startsheet
        Monat2Start
    
    ' 3. Wenn user Standardprojekt |fffd|ndert, in Arbeitszeiten
    '    kommentarzeile nachf|fffd|hren
        
        If IsInRange(Mitarbeiter_Info.Range("LAR_Standardprojekt"), Target) Then
           Arbeitszeiten.InsertProjektinfo2Comment Target
        End If
        
    ' 4. wenn Dienstwagen auf JA , dann km-Seite unsichtbar
        If OneCell And IsInRange(Mitarbeiter_Info.Range("LAR_Dienstwagen"), Target) Then
            If Target.Value = "JA" Then
                ' Sichtbarkeit der km-Abrechnung
                    ThisWorkbook.Worksheets(WS_kmA).Visible = False
            End If
        End If
       
        If OneCell And IsInRange(Mitarbeiter_Info.Range("LAR_Gleitzeit"), Target) Then
            If UCase(Target.Value) = "JA" Then
                ' Einblenden des Gleitzeitblocks
                    Zeitabrechnungsblock_Set
            Else
                ' Ausblenden des Gleitzeitblocks
                    Zeitabrechnungsblock_Clear
            End If
        End If
    
        If OneCell And IsInRange(Mitarbeiter_Info.Range("LAR_vorw_Art_Einsatzes"), Target) Then
            If Target.Value = vbNullString Then
                MsgBox "Kennzeichen f|fffd|r vorwiegende Art des Einsatzes darf nicht leer sein", vbCritical + vbOKOnly
            Else
'               auf g|fffd|ltige Eingabe pr|fffd|fen
                Call Check_Art_Einsatz(Target)
'               Klartext zum Kennzeichen anzeigen
                Call Text_Art_Einsatz(Target)
            End If
        End If
    
    
    
    ' R|fffd|cksetzen Doppeleinsprungbremse
        Running = False
        ScreenUpdating True

End Sub

Sub SetMa_AN_Option()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Setzen aller Besonderheiten, wenn Status des Mitarbeites
'        = AN

    Dim r As Range
    Dim R2 As Range

    Set r = ActiveWorkbook.Names("ZA_|fffd|berschrift").RefersToRange
    'Blattschutz Ausschalten
    ActiveWorkbook.Sheets("Zeitabrechnung").Unprotect ProtectKW
    r.Value = "Zeitabrechnung"  'Wert setzen
    'Blatt sichtbar machen
    ScreenUpdating False
    ScreenUpdating False
    
    
    'ActiveWorkbook.Worksheets("Zeitabrechnung").Visible = True
    
    Set R2 = ActiveWorkbook.Names("LAR_Gleitzeit").RefersToRange
    If R2 = "Ja" Then
        Zeitabrechnungsblock_Set
    Else
        Zeitabrechnungsblock_Clear
    End If
    
    'Blattschutz wieder einschalten und Blatt ausblenden
    ActiveWorkbook.Sheets("Zeitabrechnung").Protect ProtectKW, DrawingObjects:=True, Contents:=True, Scenarios:=True
    'ActiveWorkbook.Worksheets("Zeitabrechnung").Visible = False
    ScreenUpdating True
End Sub

Sub SetMa_FB_Option()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Setzen aller Besonderheiten, wenn Status des Mitarbeites
'        = FB, CMG

    Dim r As Range
    
    'Name der Zeitabrechnung auf Projekt|fffd|bersicht setzen
    Set r = ActiveWorkbook.Names("ZA_|fffd|berschrift").RefersToRange
    'Blattschutz Ausschalten
    ActiveWorkbook.Sheets("Zeitabrechnung").Unprotect ProtectKW
    r.Value = "Projekt|fffd|bersicht" 'Wert setzen
     'Blatt sichtbar machen
    ScreenUpdating False
    ActiveWorkbook.Worksheets("Zeitabrechnung").Visible = True
       
    ' In zeitabrechnung Abrechnungsblock entfernen
    Zeitabrechnungsblock_Clear
    'Blattschutz wieder einschalten und Blatt ausblenden
    ActiveWorkbook.Sheets("Zeitabrechnung").Protect ProtectKW, DrawingObjects:=True, Contents:=True, Scenarios:=True
    ActiveWorkbook.Worksheets("Zeitabrechnung").Visible = False
    ScreenUpdating True
End Sub

Function CheckData(Optional ForBaan = False) As Boolean
' Autor: PFU
' Datum: 24.07.2001
' Zweck: pr|fffd|fen, ob alle Mitarbeiter-Daten da sind

    Dim msg As New objResultMSG  ' Sammel Meldungen
    
    ' eigntlicher test auf existenz
    ' keine pr|fffd|fung der wertebereiche !
    
    If NamedCell("MaVname") = "" Then msg.Error = "Vorname fehlt"
    If NamedCell("MaNname") = "" Then msg.Error = "Nachname fehlt"
    If NamedCell("MaKuerzel") = "" Then msg.Error = "Kurzkennung f|fffd|r Person fehlt"
    If NamedCell("LAR_Status") = "" Then msg.Error = "Mitarbeiterstatus fehlt"
    If NamedCell("LAR_Standardprojekt") = "" Then msg.Error = "Standardprojekt fehlt"
    If NamedCell("LAR_Kostenstellen") = "" Then msg.Error = "Kostenstellen fehlt"
    If NamedCell("LAR_Arbeitsplatz") = "" Then msg.Error = "Angaben zur Art des Arbeitsplatzes fehlen"
    If NamedCell("LAR_Dienstwagen") = "" Then msg.Error = "Angaben zum Dienstwagen fehlen"
    If NamedCell("LAR_Gleitzeit") = "" Then msg.Error = "Angaben zur Gleitzeit fehlen"
    If NamedCell("MAStreckeWhgSdc") = "" Then msg.Error = "MAStrecke Whg SD&C fehlt"
    If NamedCell("MaSollarbeitszeit") = "" Then msg.Error = "Die Sollarbeitszeit in Stunden fehlt"
    If NamedCell("MaEintritt") = "" Then msg.Error = "Das Eintrittsdatum des Mitarbeiters fehlt"
    If NamedCell("AktMonat") = "" Then msg.Error = "Das Datum f|fffd|r den Aktuellen Monat fehlt."
    If NamedCell("LAR_vorw_Art_Einsatzes") = "" Then msg.Error = "Angaben zur vorwiegenden Art des Einsatzes fehlen."

    CheckData = True
    
    ' Codeversion f|fffd|r pr|fffd|fung von Baan-export: user hat keine Wahl
    If msg.Error <> "" Then
        If ForBaan Then
            MsgBox msg.Error & vbCrLf & vbCrLf & "Bitte erg|fffd|nzen Sie die" & vbCrLf & "fehlenden Daten und " & vbCrLf & "rufen die Exportfunktion" & vbCrLf & "erneut auf.", vbCritical, "Export nicht m|fffd|glich..."
            CheckData = False
            Mitarbeiter_Info.Visible = xlSheetVisible
            Mitarbeiter_Info.Select
        Else
    ' Codeversion f|fffd|r pr|fffd|fung von speichern: User hat Wahl
            If MsgBox(msg.Error & vbCrLf & vbCrLf & "Wollen Sie jetzt erg|fffd|nzen?", vbCritical + vbYesNo, "Fehlende Mitarbeiterdaten...") = vbYes Then
                CheckData = False
                Mitarbeiter_Info.Visible = xlSheetVisible
                Mitarbeiter_Info.Select
            End If
        End If
    End If
End Function

Private Function NamedCell(name) As Range
    Set NamedCell = Mitarbeiter_Info.Range(name)
End Function


Private Sub Text_Art_Einsatz(Target As Range)
'Klartext f|fffd|r Arten des Einsatzes ermitteln und schreiben

Dim Arbeitsplatz As Range
Dim WS_Quelle As Worksheet
Dim WS_Ziel As Worksheet
Dim r_Quelle As Range
Dim i_Quelle As Long

    On Error GoTo Text_Art_Einsatz_Err
    
    Set WS_Ziel = Mitarbeiter_Info

    If Target.Value = vbNullString Then
    
        WS_Ziel.Unprotect ProtectKW
        Target.offset(0, 1) = vbNullString
        WS_Ziel.Protect ProtectKW
    
    Else
    '   Arbeitsplatz aus Mitarbeiterinfo holen
        Set Arbeitsplatz = Mitarbeiter_Info.Range("LAR_Arbeitsplatz")
        
    '   ist ein Arbeitsplatz Kennzeichen vorhanden
        If Arbeitsplatz = vbNullString Then
            MsgBox "F|fffd|r den Mitarbeiter ist kein Arbeitsplatz-Kennzeichen vorhanden." & vbCr & _
                   "Bitte unter Stammdaten / Mitarbeiter Info pflegen.", vbCritical + vbOKOnly
            Target.Value = vbNullString
        Else
    
            Set WS_Quelle = Parameter
            Set r_Quelle = WS_Quelle.Range("LRS_ART_Einsatz")
    
    
            For i_Quelle = 1 To UBound(r_Quelle.Value2)
                If (r_Quelle.Value2(i_Quelle, 1) = Target.Value) And _
                   (r_Quelle.Value2(i_Quelle, 3) = Arbeitsplatz) Then
                        
                       WS_Ziel.Unprotect ProtectKW
                       Target.offset(0, 1) = r_Quelle.Value2(i_Quelle, 2)
                       WS_Ziel.Protect ProtectKW
                
                End If
            Next i_Quelle
        
    
            Set WS_Quelle = Nothing
            Set r_Quelle = Nothing
    
        End If
    End If
    Set WS_Ziel = Nothing

Exit Sub

Text_Art_Einsatz_Err:
        MsgBox Error, vbCritical, "Fehler Nr.:" & Err
        Exit Sub
End Sub


Attribute VB_Name = "PDFmaker"
Option Explicit

Const GSWIN_DIR = "C:\Programme\Ghostscript\gs8.00"
Const GSWIN_PROG = GSWIN_DIR & "\" & "bin\gswin32.exe"
Const GSWIN_OPTS1 = "-dCompatibilityLevel#1.2 -q -dSAFER -dNOPAUSE -dBATCH -sDEVICE#pdfwrite -sOutputFile#"
Const GSWIN_OPTS2 = " -dCompatibilityLevel#1.2 -c .setpdfwrite -f"
Const PRINTER_NAME = "Generic Postscript Printer"
Const WINDOW_TITLE = "PDF-Erzeugung"


Public Sub PrintCurrentSheetAsPDF()

    Dim ws As Worksheet
    Dim FN_PS As String
    Dim FN_PDF As String
    Dim Command As String
    Dim RunResult
    Dim i
    
    Dim fs As FileSystemObject
    Dim TempDir As String
    
    Application.Cursor = xlWait
    Set fs = CreateObject("Scripting.FileSystemObject")
    TempDir = fs.GetSpecialFolder(TemporaryFolder) & "\"
    
On Error GoTo PrintCurrentSheetAsPDF_Err
    
    If Dir(GSWIN_PROG) = "" Then
        MsgBox "Um ein PDF-Dokument zu erzeugen, wird vorausgesetzt, dass Ghostscript 8.00 im Verzeichnis '" & GSWIN_DIR & "' installiert ist." & vbCrLf & "Die PDF-Generierung ist daher zurzeit nicht m|fffd|glich.", vbCritical + vbOKOnly, WINDOW_TITLE
        GoTo ExitPoint
    End If
    
    Set ws = ActiveWorkbook.ActiveSheet
    
    FN_PS = TempDir & Replace(ws.name, Chr(32), "_") & ".ps"
    FN_PDF = TempDir & Replace(ws.name, Chr(32), "_") & ".pdf"
    
    ' PostscriptDatei erzeugen
On Error GoTo PrinterErr
        ws.PrintOut , , , , PRINTER_NAME, True, , FN_PS
    
    ' Postscript nach PDF Wandel
        Command = GSWIN_PROG & " " & GSWIN_OPTS1 & FN_PDF & GSWIN_OPTS2 & " " & FN_PS
        RunResult = Shell(Command, vbHide)
    ' Warten
        i = Timer
        Debug.Print "Start: "; i
        While Timer < i + 2
            DoEvents
        Wend
        Debug.Print "END  : "; Timer
        
On Error GoTo DelFileErr
    ' PostscriptDatei l|fffd|schen
        Kill FN_PS
    
On Error GoTo PDFDisplayErr
    ' generierte Datei |fffd|ffnen
        Command = "cmd.exe /c " & FN_PDF
        Shell Command, vbMinimizedFocus
        
ExitPoint:
        Application.Cursor = xlDefault
        Exit Sub

PrintCurrentSheetAsPDF_Err:
        MsgBox Err.Description
        Resume Next
PrinterErr:
        MsgBox "Um ein PDF-Dokument erzeugen zu k|fffd|nnen, muss ein lokaler Postscript-Drucker mit dem Namen '" & PRINTER_NAME & "' eingerichtet sein.", vbOKOnly + vbCritical, WINDOW_TITLE
        Resume ExitPoint
DelFileErr:
        MsgBox "Beim L|fffd|schen der tempor|fffd|ren Postscript-Datei " & FN_PS & " ist ein Fehler aufgetreten." & vbCrLf & "PDF-Erzeugung abgebrochen.", vbOKOnly + vbCritical, WINDOW_TITLE
        Resume ExitPoint
PDFDisplayErr:
        MsgBox "Datei " & FN_PDF & " erzeugt."
        Resume Next
End Sub
Attribute VB_Name = "Parameter"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Option Explicit




Attribute VB_Name = "Projekte"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Option Explicit

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
' Autor: PFU
' Datum: 28.06.2001
' Zweck: bei rechter amustaste auf zelle pr|fffd|fen, ob auswahlliste
'        angezeigt werden soll.


    If IsCell(Target) Then
            If CheckList(Target, "T|fffd|tigkeitselement", Cancel) Then
        ElseIf CheckList(Target, "Unbillability", Cancel) Then
        ElseIf CheckList(Target, "TeamCodes", Cancel) Then
        End If
    End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Pr|fffd|fen verschiedener Eingaben auf G|fffd|ltigkeit

    Dim OneCell As Boolean
    Dim Cell As Range
    Dim PlfNummer As Integer
    Dim PlfWert As String
    Dim Plf_P_Nummer As Integer
    Dim i As Integer
    Dim wert As String
    Dim Col As String
    Dim r As Long


    ' Bei Import kein Check
    If isBulkImport() Then
        Exit Sub
    End If
    
        If UserInputCheck > 0 Then Exit Sub

    ' Routine |fffd|ndern ggf zellwerte. Dann keine 2. Abarbeitung!
        Static Running As Boolean
        If Running Then Exit Sub
        Running = True
        ScreenUpdating False
    
    ' Pr|fffd|fen ob Target eine Celle oder mehrere Zellen
        OneCell = IsCell(Target)
        
    ' a-z in A-Z wandeln sofern ein Char
        
        If OneCell Then
            If IsOneLowerChar(Target) Then Target = UCase(Target)
        Else
            For Each Cell In Target.Cells
                If IsOneLowerChar(Cell) Then Target = UCase(Cell)
            Next
        End If
      
    ' R|fffd|cksetzen Doppeleinsprungbremse
        Running = False
        ScreenUpdating True
        
       ' Wenn auf ein Projekt Stunden gebucht wurden, darf dieses nicht gel|fffd|scht werden
        For Each Cell In Arbeitszeiten.Range("EC18:EC54").Cells
        PlfWert = Cell.Text
        If (IsNumeric(PlfWert)) Then
        PlfNummer = CInt(Cell.Text)
        If PlfNummer >= 1 And PlfNummer < 1000 Then
      
            For i = 24 To 123
              Plf_P_Nummer = Sheets("Projekte").Cells(i + 1, 1).Value
              If (Plf_P_Nummer = PlfNummer) Then

'                 If Sheets("Projekte").Range(Cells(i + 1, "C"), Cells(i + 1, "L")).Text = "" Then
'                        MsgBox "Bebuchtes Projekt Lfd.Nr. " + CStr(Plf_P_Nummer) + " darf nicht gel|fffd|scht werden", vbCritical, "Hinweis"
'                        Application.UndoCola
'                     Exit Sub
'                 End If
                 
                 If (Sheets("Projekte").Cells(i + 1, "C").Text = "" Or Sheets("Projekte").Cells(i + 1, "D").Text = "") Then
                        MsgBox "Bebuchtes Projekt Lfd.Nr. " + CStr(Plf_P_Nummer) + " darf nicht gel|fffd|scht werden", vbCritical, "Hinweis"
                        Application.Undo
                     Exit Sub
                 End If
              End If
            Next i
        Else
              i = i + 1
        End If
     End If
    Next Cell
  
End Sub



Attribute VB_Name = "RangeCheck"
Option Explicit
' Autor : Peter Fuchs
' Datum : 16.06.2001
' Zweck : Rountinen, um Festzustellen, ob zelle in bestimmtem Bereich enthalten ist.


Public Function IsKommentarEingabe(r As Range) As Boolean
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : IsT zelle eine der Kommentareingabezellen?
     
     IsKommentarEingabe = _
        IsCell(r) _
        And r.Column >= InputSpalte_Min_Arbeitszeit _
        And r.Column <= InputSpalte_Max_Arbeitszeit - 2 _
        And r.Row >= Inputzeile_Min_Arbeitszeit _
        And r.Row <= Inputzeile_Max_Arbeitszeit _
        And ( _
                  ((r.Column - 5) Mod 4 = 0) _
               Or ((r.Column - 5) Mod 4 = 1) _
               Or ((r.Column - 5) Mod 4 = 2) _
            )
     '  ab der 5. jede 4. spalte
     '  oder in den beiden benachbarten spalten Von und Bis
    
    
End Function

Public Function IsAZ_VT(Cell As Range) As Boolean
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Zelle ist im Range Arbeitszeiten_Verteilung
     
    
    Dim r As Range
    
    If IsCell(Cell) Then
    
        Set r = WB_Main.Names(RNG_AZ_VT).RefersToRange
        If Not Cell Is Nothing Then
            IsAZ_VT = IsInRange(r, Cell)
        Else
            IsAZ_VT = Null
        End If
    Else
        MsgBox "Auswahl darf nur eine Zelle sein!", vbInformation, "Info..."
        IsAZ_VT = Null
    End If
End Function





Attribute VB_Name = "Spesen_und_Auslagen"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmbSort, 75, 1, MSForms, CommandButton"
Attribute VB_Control = "cmbInsertNewLine, 73, 2, MSForms, CommandButton"


Option Explicit



Private Sub Worksheet_Change(ByVal Target As Excel.Range)
' Autor: PFU
' Datum: 24.07.2001
' Zweck: Pr|fffd|fen verschiedener Eingaben auf G|fffd|ltigkeit

Dim OneCell As Boolean
Dim Cell As Range

    ' Bei Import kein Check
    If isBulkImport() Then
        Exit Sub
    End If
    
        If UserInputCheck > 0 Then Exit Sub

    ' Routine |fffd|ndern ggf zellwerte. Dann keine 2. Abarbeitung!
        Static Running As Boolean
        If Running Then Exit Sub
        Running = True
        ScreenUpdating False

    ' Pr|fffd|fen ob Target eine Celle oder mehrere Zellen
        OneCell = IsCell(Target)
        
    ' a-z in A-Z wandeln sofern ein Char
        
        If OneCell Then
            If IsOneLowerChar(Target) Then Target = UCase(Target)
        Else
            For Each Cell In Target.Cells
                If IsOneLowerChar(Cell) Then Target = UCase(Cell)
                
            Next
        End If
    
    
    ' FLE 16.08.2002
    ' Datum nur f|fffd|r den aktuellen Monat zulassen
        If OneCell Then
            If Target.Column = 2 Then
                If IsDate(Target) Then
                    If ((Month(Target) <> Month(Application.Names("aktmonat").RefersToRange.Value)) Or _
                       (Year(Target) <> Year(Application.Names("aktmonat").RefersToRange.Value))) And _
                       (Target <> vbNullString) Then
                                MsgBox "Das Datum liegt nicht im Abrechnungsmonat.", vbCritical, "Eingabe-Pr|fffd|fung..."
                                Target = vbNullString
                                Call set_Datum_ArtEinsatz(Target, True)
                    Else
                        Call set_Datum_ArtEinsatz(Target, False)
                    End If
                Else
                    MsgBox "Es wurde kein Datum eingetragen.", vbCritical, "Eingabe-Pr|fffd|fung..."
                    Target = vbNullString
                    Call set_Datum_ArtEinsatz(Target, True)
                End If
            End If
        End If
        
        
    ' Wenn User Projekt eingibt, dann pr|fffd|fen, ob Datum bereits
    ' da ist, sonst ablehnen.
        If IsCell(Target) Then
            If IsInRange(Spesen_und_Auslagen.Range("SuA_lfdProjektNr"), Target) Then
                'Ja, User gibt projekt ein.
                ' pr|fffd|fen, ob links daneben ein Datum steht.
                
                If Not IsDate(Target.offset(0, -1).Value) Then
                    MsgBox "Bitte geben Sie zuerst ein Datum in Spalte B ein.", vbCritical, "Eingabe-Pr|fffd|fung..."
                    Target = ""
                    GoTo Worksheet_Change_Finish
                End If
            End If
        End If
        
    ' Wenn User Art des Einsatzes |fffd|ndert
        If IsCell(Target) Then
            If IsInRange(Spesen_und_Auslagen.Range("LAR_Art_Einsatz"), Target) Then
                'Ja, User gibt Art des Einsatz ein.

'               G|fffd|ltigkeit der Eingabe pfr|fffd|fen
                If Check_Art_Einsatz(Target) Then
                 If Target = "S" Then
                    MsgBox "Ist die Sonderregelung genehmigt?" & vbCr & _
                           "Bitte die Genehmigung dokumentieren.", vbInformation + vbOKOnly
                 End If
                 
                 Call Set_Art_Einsatz_Felder(False, Target)
                Else
                 Call Set_Art_Einsatz_Felder(True, Target)
                End If
            
            
            End If
        Else
            For Each Cell In Target.Cells
                
                If IsInRange(Spesen_und_Auslagen.Range("LAR_Art_Einsatz"), Cell) Then
                    'Ja, User gibt Art des Einsatz ein.
    
    '               G|fffd|ltigkeit der Eingabe pfr|fffd|fen
                    If Check_Art_Einsatz(Cell) Then
                     Call Set_Art_Einsatz_Felder(False, Cell)
                    Else
                     Call Set_Art_Einsatz_Felder(True, Cell)
                    End If
                
                
                End If
                    
            Next
        
        End If
        
        
'Wenn user Daten in Abwesenheit ab eintragen will
        If IsCell(Target) Then
            If IsInRange(Spesen_und_Auslagen.Range("Abwesenheit_ab"), Target) Then
                'Ja, User gibt Abwesenheit ab ein.

                If Target.offset(0, -3) <> True Then
                     Target.Value = vbNullString
                     MsgBox "Zeiteingabe nicht m|fffd|glich", vbInformation + vbOKOnly
                End If
            End If
            If IsInRange(Spesen_und_Auslagen.Range("Abwesenheit_an"), Target) Then
                'Ja, User gibt Abwesenheit an ein.

                If Target.offset(0, -4) <> True Then
                     Target.Value = vbNullString
                     MsgBox "Zeiteingabe nicht m|fffd|glich", vbInformation + vbOKOnly
                End If
            End If
        Else
            For Each Cell In Target.Cells
                If IsInRange(Spesen_und_Auslagen.Range("Abwesenheit_ab"), Cell) Then
                    'Ja, User gibt Abwesenheit ab ein.
    
                    If Cell.offset(0, -3) <> True Then
                         Cell.Value = vbNullString
                    End If
                End If
                If IsInRange(Spesen_und_Auslagen.Range("Abwesenheit_an"), Cell) Then
                    'Ja, User gibt Abwesenheit an ein.
    
                    If Cell.offset(0, -4) <> True Then
                         Cell.Value = vbNullString
                    End If
                End If
            Next
        End If
        
'Wenn user Daten in Kilometer unbillable eintragen will
        If IsCell(Target) Then
            If IsInRange(Spesen_und_Auslagen.Range("Strecke_unbillable_km"), Target) Then
                'Ja, User gibt Kilometer ein.

                If Target.offset(0, -8) <> True Then
                     Target.Value = vbNullString
                     MsgBox "Kilometereingabe nicht m|fffd|glich", vbInformation + vbOKOnly
                End If
            End If
         
         Else
            For Each Cell In Target.Cells
                If IsInRange(Spesen_und_Auslagen.Range("Strecke_unbillable_km"), Cell) Then
                    'Ja, User gibt Kilometer ein.
    
                    If Cell.offset(0, -7) <> True Then
                         Cell.Value = vbNullString
                    End If
                End If
            Next
         End If
 
 
        
        
Worksheet_Change_Finish:
       
    ' R|fffd|cksetzen Doppeleinsprungbremse
       Running = False
       ScreenUpdating True
       
End Sub


Public Sub cmbInsertNewLine_Click()

' Autor: PFU
' Datum: 28.06.2001
' Zweck: f|fffd|gt in erlaubtem bereich eine neue zeile ein.
'        Erlaubter Bereich Zeile 11 bis 49
'        Kopiert Zeile 24
'


    Dim r As Range
    Dim Q As Range
    Dim Cell As Range

    Dim c As Range
    Dim CA As Range
    Dim CE As Range
    Set r = ActiveCell
    Set Q = Spesen_und_Auslagen.Rows(24)
    
    ' pr|fffd|fen ob in g|fffd|ltigem Bereich
    Set CA = Spesen_und_Auslagen.Range("SuR_SortStart")
    Set CE = Spesen_und_Auslagen.Range("SuR_SortEnd")
    If r.Row > CA.Row And r.Row <= CE.Row Then
        ' Shutz freigeben
            Spesen_und_Auslagen.Unprotect ProtectKW
        ' Neue zeile einf|fffd|gen
            r.EntireRow.Insert xlShiftDown
            
        ' Zeile kopieren
            Spesen_und_Auslagen.Unprotect ProtectKW
            Q.Copy r.offset(-1, 0).EntireRow
        ' neue aktuelle Zelle setzen
            Set r = r.offset(-1, 0)
        ' in neuer kopierter Zeile werte l|fffd|schen
            Set Q = Range("A" & r.Row & ":AA" & r.Row)
            For Each Cell In Q
                If Not Cell.Locked Then
                    Cell = Empty
'                    Debug.Print Cell.Address
                End If
            Next
        ' Sch|fffd|tzen
            Spesen_und_Auslagen.Protect ProtectKW
    Else
        MsgBox "Zeilen Einf|fffd|gen im Bereich Zeile " & CA.Row & " bis " & CE.Row & " m|fffd|glich!", vbInformation, "Neue Zeile..."
    End If
    
End Sub


Private Sub cmbSort_Click()
' Autor: PFU
' Datum: 28.06.2001
' Zweck: definiert Sortbereich aus zwei benannten Feldern.
'        neue Zeile kann nur zwischen benannten feldern eingetragen werden
'        also w|fffd|chst der sortierberich mit.
   
    Dim r As Range
    ' Sortbereich
        Set r = Range(Range("SuR_SortStart"), Range("Sur_SortEnd"))
    ' schutz freigeben
        Spesen_und_Auslagen.Unprotect ProtectKW
    ' Sortieren
        r.Sort Cells(1, 2), xlAscending, Cells(1, 3), , xlAscending
    ' sch|fffd|tzen
        Spesen_und_Auslagen.Protect ProtectKW
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
' Autor: PFU
' Datum: 28.06.2001
' Zweck: bei rechter maustaste auf zelle pr|fffd|fen, ob auswahlliste
'        angezeigt werden soll.


    If CheckList(Target, "Anfahrtweg", Cancel) Then
    ElseIf CheckList(Target, "ReisekostenBemerkung", Cancel) Then
    ElseIf CheckList(Target, "Art_Einsatz_Sonder", Cancel) Then
    
    End If


'FLE 16.08.2002
'        ist hier sonderfall, da projektelisten f|fffd|r interne- und kunden- projekte
        
        If IsCell(Target) Then
            If IsInListActivationRange(Target, "LAR_SpesenAuslagenProjekte") Then
                ListBoxProjekte Target, Cancel
            ElseIf IsInListActivationRange(Target, "LAR_Art_Einsatz") Then
                ListBox_ArtEinsatz Target, Cancel

            End If
        End If
End Sub
 
Private Sub Set_Art_Einsatz_Felder(Clear As Boolean, Target As Range)
'Pr|fffd|fen, ob der Eingabewert im Bereich der m|fffd|glichen Arten des Einsatzes liegt

Dim Arbeitsplatz As Range
Dim ws As Worksheet
Dim WS_Ziel As Worksheet
Dim r_Quelle As Range
Dim i_Quelle As Long

    On Error GoTo Set_Art_Einsatz_Felder_Err

    Set WS_Ziel = Spesen_und_Auslagen
    WS_Ziel.Unprotect ProtectKW
    
    If Clear Then
        Target.offset(RowOffset:=0, columnOffset:=1).Value = vbNullString
        Target.offset(RowOffset:=0, columnOffset:=2).Value = vbNullString
        Target.offset(RowOffset:=0, columnOffset:=3).Value = vbNullString
        Target.offset(RowOffset:=0, columnOffset:=4).Value = vbNullString
        Target.offset(RowOffset:=0, columnOffset:=5).Value = vbNullString
        Target.offset(RowOffset:=0, columnOffset:=6).Value = vbNullString
        Target.offset(RowOffset:=0, columnOffset:=11).Value = vbNullString
    
    Else
   
    '   Arbeitsplatz aus Mitarbeiterinfo holen
        Set Arbeitsplatz = Mitarbeiter_Info.Range("LAR_Arbeitsplatz")
        
    '   ist ein Arbeitsplatz Kennzeichen vorhanden
        If Arbeitsplatz <> vbNullString Then
            Set ws = Parameter
    
            Set r_Quelle = ws.Range("LRS_ART_Einsatz")
    
            For i_Quelle = 1 To UBound(r_Quelle.Value2)
                If (r_Quelle.Value2(i_Quelle, 1) = Target.Value) And _
                   (r_Quelle.Value2(i_Quelle, 3) = Arbeitsplatz) Then
    'Felder f|fffd|r Verpflegungsmehraufwendung und Fahrkostenerstattung setzen
                       Target.offset(RowOffset:=0, columnOffset:=2).Value = r_Quelle.Value2(i_Quelle, 4)
                       If Target.offset(RowOffset:=0, columnOffset:=2).Value <> True Then
                            Target.offset(RowOffset:=0, columnOffset:=5).Value = vbNullString
                            Target.offset(RowOffset:=0, columnOffset:=6).Value = vbNullString
                       End If
                       
                       Target.offset(RowOffset:=0, columnOffset:=3).Value = r_Quelle.Value2(i_Quelle, 5)
                       If Target.offset(RowOffset:=0, columnOffset:=3).Value <> True Then
                            Target.offset(RowOffset:=0, columnOffset:=11).Value = vbNullString
                       End If
                       
                       Target.offset(RowOffset:=0, columnOffset:=4).Value = r_Quelle.Value2(i_Quelle, 6)
                End If
            Next i_Quelle
        
    
            Set ws = Nothing
            Set r_Quelle = Nothing
    
         End If
       
       
    End If
       
   WS_Ziel.Protect ProtectKW
   Set WS_Ziel = Nothing

Exit Sub

Set_Art_Einsatz_Felder_Err:
        MsgBox Error, vbCritical, "Fehler Nr.:" & Err
        Exit Sub
End Sub

Private Sub set_Datum_ArtEinsatz(Target As Range, Clear As Boolean)
'wenn ein g|fffd|ltiges Datum eingetragen wurde, soll auch
'vorwiegende Art des Einsatzes eingetragen werden

Dim ArtEinsatz As Range
Dim Arbeitsplatz As Range
Dim ws As Worksheet
Dim WS_Ziel As Worksheet
Dim r_Quelle As Range
Dim i_Quelle As Long

    On Error GoTo set_Datum_ArtEinsatz_Err

        Set WS_Ziel = Spesen_und_Auslagen
        WS_Ziel.Unprotect ProtectKW

        If Clear Then
'Felder f|fffd|r Verpflegungsmehraufwendung und Fahrkostenerstattung setzen
            Target.offset(RowOffset:=0, columnOffset:=4).Value = vbNullString
            Target.offset(RowOffset:=0, columnOffset:=5).Value = vbNullString
            Target.offset(RowOffset:=0, columnOffset:=6).Value = vbNullString
            Target.offset(RowOffset:=0, columnOffset:=7).Value = vbNullString
            Target.offset(RowOffset:=0, columnOffset:=8).Value = vbNullString
            Target.offset(RowOffset:=0, columnOffset:=9).Value = vbNullString
            Target.offset(RowOffset:=0, columnOffset:=10).Value = vbNullString
            Target.offset(RowOffset:=0, columnOffset:=15).Value = vbNullString

        Else
        '   Arbeitsplatz aus Mitarbeiterinfo holen
            Set Arbeitsplatz = Mitarbeiter_Info.Range("LAR_Arbeitsplatz")
        '   vorwiegende Art des Einsatzes aus Mitarbeiterinfo holen
            Set ArtEinsatz = Mitarbeiter_Info.Range("LAR_vorw_Art_Einsatzes")
    
            If ArtEinsatz <> vbNullString Then
    
                
                Set ws = Parameter
        
                Set r_Quelle = ws.Range("LRS_ART_Einsatz")
        
                For i_Quelle = 1 To UBound(r_Quelle.Value2)
                    If (r_Quelle.Value2(i_Quelle, 1) = ArtEinsatz) And _
                       (r_Quelle.Value2(i_Quelle, 3) = Arbeitsplatz) Then
        'Felder f|fffd|r Verpflegungsmehraufwendung und Fahrkostenerstattung setzen
                           Target.offset(RowOffset:=0, columnOffset:=4).Value = r_Quelle.Value2(i_Quelle, 1)
                           Target.offset(RowOffset:=0, columnOffset:=5).Value = vbNullString
                           Target.offset(RowOffset:=0, columnOffset:=6).Value = r_Quelle.Value2(i_Quelle, 4)
                           Target.offset(RowOffset:=0, columnOffset:=7).Value = r_Quelle.Value2(i_Quelle, 5)
                           Target.offset(RowOffset:=0, columnOffset:=8).Value = r_Quelle.Value2(i_Quelle, 6)
                           Target.offset(RowOffset:=0, columnOffset:=9).Value = vbNullString
                           Target.offset(RowOffset:=0, columnOffset:=10).Value = vbNullString
                           Target.offset(RowOffset:=0, columnOffset:=15).Value = vbNullString
                    End If
                Next i_Quelle
            
        
                Set ws = Nothing
                Set r_Quelle = Nothing
                Set ArtEinsatz = Nothing
                Set Arbeitsplatz = Nothing
    
    
            End If
        End If

        WS_Ziel.Protect ProtectKW
        Set WS_Ziel = Nothing

Exit Sub

set_Datum_ArtEinsatz_Err:
        MsgBox Error, vbCritical, "Fehler Nr.:" & Err
        Exit Sub

End Sub
Attribute VB_Name = "Start"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Info, 18, 1, MSForms, TextBox"
Attribute VB_Control = "Info2, 19, 2, MSForms, TextBox"
Attribute VB_Control = "cbm_Import, 17, 3, MSForms, CommandButton"
Attribute VB_Control = "cbm_Export, 16, 4, MSForms, CommandButton"
Attribute VB_Control = "cmbNeuerMonat, 12, 5, MSForms, CommandButton"
Attribute VB_Control = "UL_Print, 11, 6, MSForms, CommandButton"
Attribute VB_Control = "UL, 10, 7, MSForms, CommandButton"
Attribute VB_Control = "AL_Print, 9, 8, MSForms, CommandButton"
Attribute VB_Control = "AL, 8, 9, MSForms, CommandButton"
Attribute VB_Control = "TB_Print, 7, 10, MSForms, CommandButton"
Attribute VB_Control = "TB, 6, 11, MSForms, CommandButton"
Attribute VB_Control = "ZA_Print, 5, 12, MSForms, CommandButton"
Attribute VB_Control = "ZA, 4, 13, MSForms, CommandButton"
Attribute VB_Control = "Stamm, 3, 14, MSForms, CommandButton"
Attribute VB_Control = "AZ, 2, 15, MSForms, CommandButton"


Option Explicit


Private Sub cbm_Export_Click()
    DoExport
End Sub

Private Sub cbm_Import_Click()
    DoImport
End Sub



Private Sub cmb_ExportAlles_Click()
    DoExport
End Sub

Private Sub cmbNeuerMonat_Click()
    NeuerMonat (True)
End Sub




Private Sub Info_Change()

End Sub

Private Sub Worksheet_Activate()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Wenn User Start-Tabelle aktiviert, dann sollen alle
'        anderes ausgeschaltet werden, damit |fffd|bersicht auf dem
'        Desktop herrscht!
    
    If isBulkImport() Then
        Exit Sub
    End If
    
    GoBack
    
End Sub

Private Sub AL_Click()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Sheet AUslagen einschalten
' Autor: WH|fffd|
' Datum: 25.03.2001
' Zweck: Nur f|fffd|r Angestellte

    If ActiveWorkbook.Sheets("Mitarbeiter Info").Range("MaStatus") <> "AN" Then
        MsgBox "Nur f|fffd|r Angestellte!", vbCritical, "Hinweis"
    Else
        HideAllSheets
        
                
        If UCase(ActiveWorkbook.Sheets("Mitarbeiter Info").Range("LAR_Dienstwagen")) <> "JA" Then
            ActivateSheet ("km-Abrechnung")
        End If
        
        ActivateSheet ("Spesen und Auslagen")
        Spesen_und_Auslagen.Range("B10").Activate
    
    End If
End Sub

Private Sub AL_Print_Click()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Sheet Auslagen drucken
' Autor: WH|fffd|
' Datum: 25.03.2001
' Zweck: Nur f|fffd|r Angestellte
    If ActiveWorkbook.Sheets("Mitarbeiter Info").Range("MaStatus") <> "AN" Then
        MsgBox "Nur f|fffd|r Angestellte!", vbCritical, "Hinweis"
    Else
        AL_Click
        'ActiveSheet.PrintOut
        ThisWorkbook.Worksheets(WS_SuA).PrintOut
        'Nur Wenn Mitarbeiter keinen Dienstwagen hat, ausdrucken
        If UCase(ActiveWorkbook.Sheets("Mitarbeiter Info").Range("LAR_Dienstwagen")) <> "JA" Then
            ThisWorkbook.Worksheets(WS_kmA).PrintOut
        End If
    End If
    
End Sub

Private Sub AZ_Click()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Sheet f|fffd|r Eingabe der Arbeitszeit aktivieren,
'        dann Togglebutton aktivieren.
    
    HideAllSheets
    ' Einschalten, Wenn Arbeitszeiteingabe
    
    SetEnableToggleMenuButton True
    ActivateSheet WS_PR
    ActivateSheet WS_SuA
    ActivateSheet WS_AZ
        
End Sub



Private Sub cmb_Export_Click()
' Autor: PFU
' Datum: 01.05.2001
' Zweck: Export Starten

    DoExport
    
End Sub

Private Sub cmb_Import_Click()
' Autor: PFU
' Datum: 01.05.2001
' Zweck: Import Starten
    
    DoImport
   
End Sub


Private Sub NeuMonat_Click()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Neuen Monat einf|fffd|gen
    
    NeuerMonat True
End Sub

Private Sub Stamm_Click()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Alle Sheets mt Stammdaten aktivieren
    
    HideAllSheets
 '  ActivateSheet ("|fffd|nderungen zu 2.3.2")
    ActivateSheet ("Projekte")
    ActivateSheet ("Feiertage")
    ActivateSheet ("Mitarbeiter Info")
    Mitarbeiter_Info.Range("B4").Activate
    
End Sub

Private Sub TB_Click()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Erzeuge und zeige alle T|fffd|tigkeitsberichte an
    
    Dim ws As Worksheet
    HideAllSheets
    CreateTB
    For Each ws In ThisWorkbook.Worksheets
        If IsTB(ws) Then
            ''Debug.Print WS.name
            If ws.Range("TB_ProjektStunden").Value <> "" _
                And ws.Range("TB_ProjektStunden").Value <> 0 Then
                ws.Visible = xlSheetVisible
            Else
                ws.Visible = xlSheetHidden
            End If
        End If
    Next
    '.Range("H5").Activate

End Sub

Private Sub TB_Print_Click()
' Autor: PFU
' Datum: 12.02.2001
' Zweck:
    
    Dim ws As Worksheet
    HideAllSheets
    CreateTB
    
    For Each ws In ThisWorkbook.Worksheets
        If IsTB(ws) Then
            If ws.Range("TB_ProjektStunden").Value <> "" Then
                ws.PrintOut
            End If
        End If
    Next
End Sub

Private Sub UL_Click()
' Autor: PFU
' Datum: 12.02.2001
' Zweck:
' Autor: WH|fffd|
' Datum: 25.03.2001
' Zweck: Nur f|fffd|r Angestellte
    If ActiveWorkbook.Sheets("Mitarbeiter Info").Range("MaStatus") <> "AN" Then
        MsgBox "Nur f|fffd|r Angestellte!", vbCritical, "Hinweis"
    Else
        HideAllSheets
        ActivateSheet ("Feiertage")
        ActivateSheet ("Urlaub")
    End If
End Sub

Private Sub UL_Print_Click()
' Autor: PFU
' Datum: 12.02.2001
' Zweck:
' Autor: WH|fffd|
' Datum: 25.03.2001
' Zweck: Nur f|fffd|r Angestellte
    
    If ActiveWorkbook.Sheets("Mitarbeiter Info").Range("MaStatus") <> "AN" Then
        MsgBox "Nur f|fffd|r Angestellte!", vbCritical, "Hinweis"
    Else
        UL_Click
        ActiveSheet.PrintOut
    End If
    

End Sub


Private Sub ZA_Click()
' Autor: PFU
' Datum: 12.02.2001
' Zweck:
    
    HideAllSheets
    ZA_ShowLinesWithP
    ActivateSheet ("Zeitabrechnung")
    Zeitabrechnung.Range("F53").Activate
End Sub

Private Sub ZA_Print_Click()
' Autor: PFU
' Datum: 12.02.2001
' Zweck:
    
    ZA_Click
    ActiveSheet.PrintOut
End Sub
Attribute VB_Name = "TBVorlage"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True







Attribute VB_Name = "TBVorlage1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True







Attribute VB_Name = "TBVorlage2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True







Attribute VB_Name = "TBVorlage3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True







Attribute VB_Name = "Urlaub"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



Option Explicit

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
' Autor: PFU
' Datum: 28.06.2001
' Zweck: bei rechter amustaste auf zelle pr|fffd|fen, ob auswahlliste
'        angezeigt werden soll.


    If CheckList(Target, "Urlaub", Cancel) Then
    End If
    
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

' Autor: FLE
' Datum: 23.10.2002
' Zweck: Leerzeichen links oder rechts abschneiden

   ' Bei Import kein Check
    If isBulkImport() Then
        Exit Sub
    End If
    
        If UserInputCheck > 0 Then Exit Sub
        
        If Len(Target) = Len(Trim(Target)) Then
        ' a-z in A-Z wandeln sofern ein Char
            If IsOneLowerChar(Target) Then Target = UCase(Target)
        Else
            Target = UCase(Trim(Target))
        End If
End Sub


Attribute VB_Name = "Utility"
Option Explicit

Function IsTB(ws As Worksheet) As Boolean
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Pr|fffd|ft, ob |fffd|bergebenes Worksheet zur Gruppe
'        der T|fffd|tigkeitsbericht geh|fffd|rt.

    IsTB = Left(ws.name, 2) = "TB" And ws.name <> "TBVorlage"
End Function

Function IsInRange(r As Range, Cell As Range) As Boolean
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Pr|fffd|ft, ob Cell in Range enthalten ist

    Dim i As Range

    Set i = Application.Intersect(r, Cell)
    If i Is Nothing Then
        IsInRange = False
        Exit Function
    Else
        IsInRange = True
    End If
End Function


Public Function IsCell(r As Range)
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Pr|fffd|ft, ob |fffd|bergebener Bereich genau eine Zelle ist

    IsCell = r.Rows.count = 1 And r.Columns.count = 1
    
End Function

Function FD(s) As String
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Formatiert datum zu String, pr|fffd|ft auf reine Uhrzeit
'        und formatiert entsprechend
    
    Dim D
    If s = "" Then
        FD = ""
        Exit Function
    End If
    D = CDate(s)
    If D < 1 Then
        FD = Format(D, "hh:nn")
    ElseIf Hour(D) = 0 And Minute(D) = 0 Then
        FD = Format(D, "dd.mm.yyyy")
    Else
        FD = Format(D, "dd.mm.yyyy hh:nn")
    End If
    
End Function



Function ListBoxProjekte(Target As Range, Cancel As Boolean) As Boolean
' FLE 19.08.2002
' f|fffd|r projekte gibt es zwei verschieden bereiche -> unterscheidung nach intern- und kunden-projekte

Dim f As frm_Auswahlliste

    On Error GoTo ListBoxProjekte_Err
    
    Set f = New frm_Auswahlliste
''                If MsgBox("Soll ein internes Projekt eingef|fffd|gt werden?", vbYesNo + vbDefaultButton2 + vbQuestion, "Frage") = vbYes Then
''                    f.rowsource = "LSR_interneProjekte"
''                    f.frmCaption = f.frmCaption & ": " & "interne Projekte"
''                Else
                    f.rowsource = "LRS_KundenProjekte"
                    f.frmCaption = f.frmCaption & ": " & "Kundenprojekte"
''                End If
                
                f.Show
                
                ' User hat abbruch gedr|fffd|ckt ?
                    If f Is Nothing Then
                        Exit Function
                    End If
                    
                ' result vergeben
                    Target = f.Result
                    
                ' Formular schliessen
                    Set f = Nothing
                
                ' kein kontextmen|fffd|
                    Cancel = True
                
                ' Abgearbeitet melden
                   ListBoxProjekte = True
    Exit Function
ListBoxProjekte_Err:
    If Err = -2147418105 Then
       ' MsgBox "Abbruch...", vbInformation, "Auswahl abgebrochen..."
    Else
        MsgBox Error, vbCritical, "Fehler Nr.:" & Err
        Exit Function
    End If
End Function
Function ListBox_ArtEinsatz(Target As Range, Cancel As Boolean) As Boolean
' FLE 04.04.2007
' f|fffd|r projekte gibt es zwei verschieden bereiche -> unterscheidung nach intern- und kunden-projekte

Dim f As frm_Auswahlliste

    On Error GoTo ListBox_ArtEinsatz_Err

' Aufbereiten des Bereiches f|fffd|r Anzeige der Arten Einsatz
If set_Anzeigebereich Then
' Sheet von Ziel anzeigen
    Target.Application.Worksheets(Target.Worksheet.name).Select

    Set f = New frm_Auswahlliste
                f.rowsource = "LRS_Art_Einsatz_Disp"
                f.frmCaption = f.frmCaption & ": " & "Art des Einsatzes"
                
                f.Show
                
                ' User hat abbruch gedr|fffd|ckt oder auch Nichts?
                    If f Is Nothing Then
                        Exit Function
                    End If
                    
                ' result vergeben
                    If f.Result <> vbNullString Then
                        Target = f.Result
                    End If
                    
                ' Formular schliessen
                    Set f = Nothing
                
                ' kein kontextmen|fffd|
                    Cancel = True
                
                ' Abgearbeitet melden
                   ListBox_ArtEinsatz = True
Else
                ' kontextmen|fffd|
                    Cancel = False
                
                ' Fehler melden
                   ListBox_ArtEinsatz = False

End If
    Exit Function
ListBox_ArtEinsatz_Err:
    If Err = -2147418105 Then
       ' MsgBox "Abbruch...", vbInformation, "Auswahl abgebrochen..."
    Else
        MsgBox Error, vbCritical, "Fehler Nr.:" & Err
        Exit Function
    End If
End Function
Sub PrintAllSheets_BW()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Stellt Alle Sheets auf Schwarzweiss-Druck
   
Dim ws As Worksheet
    For Each ws In Worksheets
        ws.PageSetup.BlackAndWhite = False
    Next
End Sub


Sub ProtectAllSheets()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Stellt Alle Sheets auf Blattschutz EIN
    
    On Error GoTo ProtectAllSheets_Err
    Dim Sh As Worksheet
    
    
    For Each Sh In ActiveWorkbook.Sheets
'Debug.Print Sh.name, TypeName(Sh)
        If Sh.name <> "Auswertung Projekte" And Sh.name <> "Auswertung Spesen" Then
            Sh.Protect ProtectKW, DrawingObjects:=True, Contents:=True, Scenarios:=True
        Else
            Sh.Unprotect ProtectKW
        End If
    Next
Exit Sub
ProtectAllSheets_Err:
    Select Case Err
    Case 1004
        Resume Next
    Case Else
        MsgBox Err.Description, vbInformation, "Fehlercode " & Err.Number
    End Select
End Sub

Sub UnProtectAllSheets()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Stellt Alle Sheets auf Blattschutz AUS
    
    'Dim sh As Worksheet
    Dim O As Object
    ScreenUpdating False
    On Error GoTo UnProtectAllSheets_Err
    For Each O In ActiveWorkbook.Sheets
        O.Unprotect ProtectKW
    Next
    ScreenUpdating True
    Exit Sub
UnProtectAllSheets_Err:
    Select Case Err
    Case 1004
        Resume Next
    Case Else
        MsgBox Err.Description, vbInformation, "Fehlercode " & Err.Number
    End Select
End Sub

Sub ProtectActiveSheet()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Blattschutz f|fffd|r aktives Sheet EIN
'

    If ActiveSheet.name <> "Start" Then
        ActiveSheet.Protect ProtectKW, DrawingObjects:=True, Contents:=True, Scenarios:=True
    End If
End Sub

Sub UnProtectActiveSheet()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Blattschutz f|fffd|r aktives Sheet AUS
'
    ActiveSheet.Unprotect ProtectKW
End Sub

Public Sub HideAllSheets(Optional Dont As Boolean = False)
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Bis auf Start alle Ausblenden
   ' Dim ws As Worksheet
   ' ge|fffd|ndert von worksheet auf objekt, um auch Dialoge
   ' ausschalten zu k|fffd|nnen
    
    On Error GoTo HideAllSheets_Err
    Dim O As Object
    
       If Not Start.Visible = xlSheetVisible Then ShowStart
       
       For Each O In ThisWorkbook.Sheets
                If O.name <> WS_Start Then
                    If Dont = False Then
                        If O.Visible = True Then O.Visible = False
                    Else
                        O.Visible = Dont
                    End If
                End If
       Next
    
    Exit Sub
HideAllSheets_Err:
    MsgBox Error, vbInformation, "Fehlernr.: " & Err
    Debug.Print Error
    Resume Next
End Sub

Sub ShowStart()
    On Error GoTo ShowStart_Err
        Start.Visible = True
        Start.Activate
    Exit Sub
ShowStart_Err:
        MsgBox Error, , Err
End Sub


Public Sub GoBack()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Aktion des Knopfes Zur|fffd|ck im Men|fffd|:
'        zeige nur Start-Sheet
    'Application.ScreenUpdating = False
    
    HideAllSheets
    'Application.ScreenUpdating = True
End Sub


Sub ActivateSheet(N As String)
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Aktiviere Sheet mit Namen N


    Dim ws As Worksheet
    Set ws = ThisWorkbook.Worksheets(N)
    ws.Visible = True
    ws.Activate
End Sub

Sub CheckAddIn()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: 1. Pr|fffd|fen, ob notwendige AddIns vorhanden,
'        2. Anpassen auf Deutsch / Englisch
'        3. Formel anspassen aus Deutsch / Englisch


    On Error GoTo CheckAddIn_Err
    Dim ADDInName As String
    Dim AddinNotAvailable As Boolean
    Dim c As String

' hier f|fffd|r 2010 Version und unterschiedliche Sprachversionen der AddIns
Dim l_AdIn As String
Dim l_counter As Integer


    AddinNotAvailable = False

    UserInputCheck = False
    If IsGermanVersion() And IsExcel_LT_2007 Then

        ADDInName = A1_DE
        AddIns(ADDInName).Installed = True
        If AddIns(ADDInName).Installed Then
            c = c & " - " & ADDInName & " installiert!" & vbCrLf

        Else
            AddinNotAvailable = True
        End If

        ADDInName = A2_DE
        AddIns(ADDInName).Installed = True
        If AddIns(ADDInName).Installed Then
            c = c & " - " & ADDInName & " installiert!" & vbCrLf
        Else
            AddinNotAvailable = True
        End If

        If AddinNotAvailable Then
            MsgBox "Bitte Installieren Sie folgende AddIns:" & _
             vbCrLf & vbCrLf & _
             " - " & A1_DE & vbCrLf & _
             " - " & A2_DE & vbCrLf, vbCritical, "Anwendung mu|fffd| geschlossen werden."
             ActiveWorkbook.Close False
        End If
        ' Formeln auf Deutsch umstellen
            ReplaceCellsWith "NETWORKDAYS", "NETTOARBEITSTAGE"

    ' English
    ElseIf IsEnglishVersion() And IsExcel_LT_2007 Then
       ' 1. Addin
        ADDInName = A1_EN
        AddIns(ADDInName).Installed = True
        If AddIns(ADDInName).Installed Then
            c = c & " - " & ADDInName & " installiert!" & vbCrLf
        Else
            AddinNotAvailable = True
        End If

        ' 2.Addin
        ADDInName = A2_EN
        AddIns(ADDInName).Installed = True
        If AddIns(ADDInName).Installed Then
            c = c & " - " & ADDInName & " installiert!" & vbCrLf
        Else
            AddinNotAvailable = True
        End If

        ' Alles OK ?
        If AddinNotAvailable Then
            MsgBox "Bitte Installieren Sie folgende AddIns:" & _
             vbCrLf & vbCrLf & _
             " - " & A1_EN & vbCrLf & _
             " - " & A2_EN & vbCrLf, vbCritical, "Anwendung mu|fffd| geschlossen werden."
             ActiveWorkbook.Close False
        Else
            ' Formeln auf Englisch umstellen
            ReplaceCellsWith "NETTOARBEITSTAGE", "NETWORKDAYS"
        End If
    ElseIf IsExcel2007() Then
       ' 1. Addin
        ADDInName = A1_2007
        AddIns(ADDInName).Installed = True
        If AddIns(ADDInName).Installed Then
            c = c & " - " & ADDInName & " installiert!" & vbCrLf
        Else
            AddinNotAvailable = True
        End If

        ' 2.Addin
        ADDInName = A2_2007
        AddIns(ADDInName).Installed = True
        If AddIns(ADDInName).Installed Then
            c = c & " - " & ADDInName & " installiert!" & vbCrLf
        Else
            AddinNotAvailable = True
        End If

        ' Alles OK ?
        If AddinNotAvailable Then
            MsgBox "Bitte Installieren Sie folgende AddIns:" & _
             vbCrLf & vbCrLf & _
             " - " & A1_EN & vbCrLf & _
             " - " & A2_EN & vbCrLf, vbCritical, "Anwendung mu|fffd| geschlossen werden."
             ActiveWorkbook.Close False
        Else
            ' Formeln auf Englisch umstellen
            ReplaceCellsWith "NETTOARBEITSTAGE", "NETWORKDAYS"
        End If
        
    ElseIf IsExcel2010() Then
       
       l_counter = 0
    
       ' 1. Addin
        l_AdIn = "A1"
        ADDInName = A1_2010_en
        AddIns(ADDInName).Installed = True
        If AddIns(ADDInName).Installed Then
            c = c & " - " & ADDInName & " installiert!" & vbCrLf
        Else
            AddinNotAvailable = True
        End If

        ' 2.Addin
        l_AdIn = "A2"
        ADDInName = A2_2010_en
        AddIns(ADDInName).Installed = True
        If AddIns(ADDInName).Installed Then
            c = c & " - " & ADDInName & " installiert!" & vbCrLf
        Else
            AddinNotAvailable = True
        End If

        ' Alles OK ?
        If AddinNotAvailable Then
            MsgBox "Bitte Installieren Sie folgende AddIns:" & _
             vbCrLf & vbCrLf & _
             " - " & A1_EN & vbCrLf & _
             " - " & A2_EN & vbCrLf, vbCritical, "Anwendung mu|fffd| geschlossen werden."
             ActiveWorkbook.Close False
        Else
            ' Formeln auf Englisch umstellen
            ReplaceCellsWith "NETTOARBEITSTAGE", "NETWORKDAYS"
        End If
    
            'Erg|fffd|nzungen f|fffd|r Excel2013 (BAL)
        ElseIf IsExcel2013() Then

         l_counter = 0
    
       ' 1. Addin
        l_AdIn = "A1"
        ADDInName = A1_2010_en
        AddIns(ADDInName).Installed = True
        If AddIns(ADDInName).Installed Then
            c = c & " - " & ADDInName & " installiert!" & vbCrLf
        Else
            AddinNotAvailable = True
        End If

        ' 2.Addin
        l_AdIn = "A2"
        ADDInName = A2_2010_en
        AddIns(ADDInName).Installed = True
        If AddIns(ADDInName).Installed Then
            c = c & " - " & ADDInName & " installiert!" & vbCrLf
        Else
            AddinNotAvailable = True
        End If

        ' Alles OK ?
        If AddinNotAvailable Then
            MsgBox "Bitte Installieren Sie folgende AddIns:" & _
             vbCrLf & vbCrLf & _
             " - " & A1_EN & vbCrLf & _
             " - " & A2_EN & vbCrLf, vbCritical, "Anwendung mu|fffd| geschlossen werden."
             ActiveWorkbook.Close False
        Else
            ' Formeln auf Englisch umstellen
            ReplaceCellsWith "NETTOARBEITSTAGE", "NETWORKDAYS"
        End If
        
        'Erg|fffd|nzungen f|fffd|r Excel2013 (BAL)
        ElseIf IsExcel2016() Then

         l_counter = 0
    
       ' 1. Addin
        l_AdIn = "A1"
        ADDInName = A1_2010_en
        AddIns(ADDInName).Installed = True
        If AddIns(ADDInName).Installed Then
            c = c & " - " & ADDInName & " installiert!" & vbCrLf
        Else
            AddinNotAvailable = True
        End If

        ' 2.Addin
        l_AdIn = "A2"
        ADDInName = A2_2010_en
        AddIns(ADDInName).Installed = True
        If AddIns(ADDInName).Installed Then
            c = c & " - " & ADDInName & " installiert!" & vbCrLf
        Else
            AddinNotAvailable = True
        End If

        ' Alles OK ?
        If AddinNotAvailable Then
            MsgBox "Bitte Installieren Sie folgende AddIns:" & _
             vbCrLf & vbCrLf & _
             " - " & A1_EN & vbCrLf & _
             " - " & A2_EN & vbCrLf, vbCritical, "Anwendung mu|fffd| geschlossen werden."
             ActiveWorkbook.Close False
        Else
            ' Formeln auf Englisch umstellen
            ReplaceCellsWith "NETTOARBEITSTAGE", "NETWORKDAYS"
        End If
       
    
    Else
        MsgBox "F|fffd|r Excelversion nicht vorbereitet." & vbCrLf & vbCrLf & "Wenden Sie sich an die Entwickler." & vbCrLf & vbCrLf & "xlCountryCode = (" & Application.International(xlCountryCode) & """"
        Application.Quit
    End If
    Exit Sub
    UserInputCheck = True
CheckAddIn_Err:
    If Err = 91 Then
        'SetWB_Main
        Resume
    Else
        l_counter = l_counter + 1
        If l_counter > 2 Then
            MsgBox Error, , "Fehler Nr." & Err
        Else
            If IsExcel2010() Then
                If l_AdIn = "A1" Then
                    ADDInName = A1_2010_de
                
                ElseIf l_AdIn = "A2" Then
                    ADDInName = A2_2010_de
                
                End If
                
                ElseIf IsExcel2013() Then
                If l_AdIn = "A1" Then
                    ADDInName = A1_2010_de
                
                ElseIf l_AdIn = "A2" Then
                    ADDInName = A2_2010_de
                
                End If
                
                ElseIf IsExcel2016() Then
                If l_AdIn = "A1" Then
                    ADDInName = A1_2010_de
                
                ElseIf l_AdIn = "A2" Then
                    ADDInName = A2_2010_de
                
                End If
                
            End If
        End If
        Resume 'Next
    End If
    UserInputCheck = True
End Sub

Function IsEnglishVersion() As Boolean
' Autor: PFU
' Datum: 28.05.2001
' Zweck: Liefert True, wenn Excel in englischer Version installiert ist.
    IsEnglishVersion = Application.International(xlCountryCode) = 1
End Function

Function IsGermanVersion() As Boolean
' Autor: PFU
' Datum: 28.05.2001
' Zweck: Liefert True, wenn Excel in deutscher Version installiert ist.
    IsGermanVersion = Application.International(xlCountryCode) = 49
End Function

Function IsExcel2007() As Boolean
   'Falls die Zeiterfassung in Excel 2007 laufen soll, muss zu Anfang auf englische Formeln umgestellt werden
    IsExcel2007 = Application.Version = "12.0"
End Function

Function IsExcel_LT_2007() As Boolean
   'Falls die Zeiterfassung in Excel 2007 laufen soll, muss zu Anfang auf englische Formeln umgestellt werden
    If Application.Version < "12.0" Then
        IsExcel_LT_2007 = True
    Else
        IsExcel_LT_2007 = False
    End If
'''''    IsExcel2007 = Application.Version = "12.0"
End Function


Function IsExcel2010() As Boolean
   'Falls die Zeiterfassung in Excel 2010 laufen soll, muss zu Anfang auf englische Formeln umgestellt werden
    IsExcel2010 = Application.Version = "14.0"
End Function
Function IsExcel2013() As Boolean
   'Falls die Zeiterfassung in Excel 2013 laufen soll, muss zu Anfang auf englische Formeln umgestellt werden
    IsExcel2013 = Application.Version = "15.0"
End Function
Function IsExcel2016() As Boolean
   'Falls die Zeiterfassung in Excel 2016 laufen soll, muss zu Anfang auf englische Formeln umgestellt werden
    IsExcel2016 = Application.Version = "16.0"
End Function

Sub ListAddins()
' Autor: PFU
' Datum: 28.05.2001
' Zweck: listet alle addin-namen auf.
' Anmerkung: namen ist verschieden von denen des ADD-IN "Add-Ins"
    
    Dim a As AddIn
    For Each a In AddIns
        Debug.Print a.name, a.FullName
    Next
End Sub

Sub FindCellsWith(Suchmuster)
' Autor: PFU
' Datum: 28.05.2001
' Zweck: sucht in allen sheet vorkommen eines Suchtextes in Formel
'        und druckt die Adresse und Formel in testfenster

    
  
    Dim ws As Worksheet
    Dim Area As Range
    Dim FirstFoundAddress As String
    Dim FoundAddress As String
    Dim FoundCell As Range
    
    
    For Each ws In Worksheets
        Set Area = ws.UsedRange
        'Debug.Print WS.name, Area.Address
        Set FoundCell = Area.Find(What:=Suchmuster, lookin:=xlFormulas)
        If Not IsNothing(FoundCell) Then
            FirstFoundAddress = ws.name & "!" & FoundCell.Address
        Else
            FirstFoundAddress = "-"
        End If
        'Debug.Print FoundAddress
      
        Do While Not IsNothing(FoundCell) And FirstFoundAddress <> FoundAddress
            'If FirstFoundAddress = FoundAddress Then Exit Do
            'FoundAddress = WS.name & "!" & FoundCell.Address
'            Debug.Print WS.Name; "!" & FoundCell.Address, FoundCell.Formula
            Set FoundCell = Area.FindNext(FoundCell)
            If Not IsNothing(FoundCell) Then FoundAddress = ws.name & "!" & FoundCell.Address Else FoundAddress = "-"
        Loop
    Next
End Sub

Sub ReplaceCellsWith(ReplaceWhat, ReplaceWith)
' Autor: PFU
' Datum: 28.05.2001
' Zweck: Ersetzt in allen Sheets ausser start Text
    
    
    Inc UserInputCheck
    
    Dim ws As Worksheet
    Dim Found  As Boolean
    Dim c As Range
    
    On Error GoTo ReplaceCellsWith_Err
    For Each ws In Worksheets
        
        If ws.name <> "Start" And ws.name <> "Auswertung Projekte" And ws.name <> "Auswertung Spesen" Then
            ws.Unprotect ProtectKW
'            Debug.Print WS.Name; WS.UsedRange.Address;
            
              ' Replace funktioniert nicht, wiso ist nicht klar
              ' Found = WS.UsedRange.Cells.Replace(What:=ReplaceWhat, Replacement:=ReplaceWith, lookat:=xlPart)
        
              For Each c In ws.UsedRange.Cells
                If InStr(c.Formula, ReplaceWhat) Then
                    If c.Formula <> "" Then
                       ' Debug.Print C.Address; C.Formula;
                        c.Formula = Replace(c.Formula, ReplaceWhat, ReplaceWith)
                    End If
                End If
              Next
               ' Debug.Print Found
            ws.Protect ProtectKW
        End If
        
    Next
    Dec UserInputCheck
    Exit Sub
ReplaceCellsWith_Err:
'    If Err = 1004 Then
'       Resume Next
'    'Else
        MsgBox Err.Description, vbCritical, "ReplaceCellWith-Error..."
        Dec UserInputCheck
        Resume Next
'    End If
End Sub

Function ReplaceinCell(c As Range, RWhat, Rwith)
    If InStr(c.Formula, RWhat) > 0 Then
        
    End If
End Function

Sub ClearAllInputCells()
' Autor: PFU
' Datum: 28.05.2001
' Zweck: leer ALLE ! Eingabefelder

    
    Dim ws As Worksheet
    Dim Area As Range
    Dim Cell As Range
    
    UserInputCheckNo
    
    For Each ws In Worksheets
        Set Area = ws.UsedRange
        For Each Cell In Area.Cells
            If Cell.Locked = False Then
                'Debug.Print WS.name & "!" & Cell.Address; Cell.Value
                Cell.Value = Empty
            End If
        Next
    Next
    
    UserInputCheckYes
    Clear_Comment
End Sub


Function IsNothing(O As Object) As Boolean
' Autor: PFU
' Datum: 28.05.2001
' Zweck: True, wenn objektvariable auf nix zeigt
    
    If O Is Nothing Then
        IsNothing = True
    Else
        IsNothing = False
    End If
End Function

Sub RowHeight_Optimal()
' Autor: PFU
' Datum: 10.05.2001
' Zweck: Formatiert zuvor selektierten Bereich auf optimale
'        H|fffd|he. Sinnvoll f|fffd|r Zellen mit Zeilenumbruch.
    Selection.Rows.AutoFit
End Sub


Function LinkesEnde(s As String, c As String) As String
' Autor: PFU
' Datum: 10.05.2001
' Zweck: Linken Teil von S, sucht von rechts nach Muster C

    Dim L As Integer
    If Len(c) <> 1 Then
        MsgBox "Parameterfehler in Funktion LinkesEnde", vbCritical
        Stop
    End If
    
    For L = Len(s) To 1 Step -1
        If Mid$(s, L, 1) = c Then Exit For
    Next
    
    If L > 0 Then
        LinkesEnde = Mid$(s, 1, L - 1)
    Else
        LinkesEnde = ""
    End If
End Function

Sub NextLine(s As String, ByRef NL As String, ByRef Rest As String)
' Autor: PFU
' Datum: 10.05.2001
' Zweck: Liefert aus string s in NL die N|fffd|chste Zeile,
'        in Rest den Rest des String

    Dim pos As Long
    
    pos = InStr(s, vbCrLf)
    If pos > 0 Then
        NL = Mid$(s, 1, pos - 1)
        Rest = Mid$(s, pos + 2, Len(s))
    Else
        NL = s
        Rest = ""
    End If
End Sub



Function k2p(s)
' Autor: PFU
' Datum: 10.05.2001
' Zweck: Wandel komma zu Punkt

    Dim i As Integer
    Dim r As String
    If IsNull(s) Then Exit Function
    If InStr(s, ",") > 0 Then
        For i = 1 To Len(s)
            r = r & IIf(Mid$(s, i, 1) = ",", ".", Mid$(s, i, 1))
        Next
        k2p = r
    Else
        k2p = s
    End If
End Function


Function e_Isdate(c As Range) As Boolean
' Autor: PFU
' Datum: 10.05.2001
' Zweck: Pr|fffd|ft ob zellinhalt eine Datum sein kann
    e_Isdate = IsDate(c)
End Function
 
Function e_Typename(c As Range)
' Autor: PFU
' Datum: 10.05.2001
' Zweck: Liefert typnamen der |fffd|bergebenen zelle
    
    Dim V As Variant
    V = c
    e_Typename = TypeName(V)
End Function
 
Public Sub ToggleAllCommentCols()
Attribute ToggleAllCommentCols.VB_ProcData.VB_Invoke_Func = "l\n14"
' Autor: PFU
' Datum: 17.07.2001
' Zweck: Schaltet alle Kommentarspalten ein oder aus.

    Dim c As Range
    Dim r As Range
    Dim L As Integer
    
    Static ToggleAllCommentCols_Status As Boolean
    If IsEmpty(ToggleAllCommentCols_Status) Then
        ToggleAllCommentCols_Status = True
    End If
    UnProtectActiveSheet
    Set c = ActiveCell
    
    ' Ist Zelle im Zielbereich Arbeitszeiten_Verteilung
    If IsAZ_VT(c) Then
        ' Status umschalten
        ToggleAllCommentCols_Status = Not ToggleAllCommentCols_Status
        ' StartSpalte setzen
        Set r = WB_Main.Names(RNG_AZ_VT).RefersToRange.EntireColumn
        
        If ToggleAllCommentCols_Status Then
            'Normalansicht: Stundenspalte ein, Rest aus
            Set r = WB_Main.Names(RNG_AZ_VT).RefersToRange
            Set r = r.Cells(1, 1).EntireColumn
            ' F|fffd|r jeden Tag des Monats
            For L = 1 To 31
                r.offset(0, 1).Hidden = True
                r.offset(0, 2).Hidden = True
                r.offset(0, 3).Hidden = True
                ' und r zur n|fffd|chsten datumsspalte schicken
                Set r = r.offset(0, 4)
            Next
        Else
            ' Alles einschalten
           r.Columns.Hidden = False
        End If
    Else
        MsgBox "Funtion nur m|fffd|glich, wenn" & vbCrLf & "sich die aktive Zelle im" & vbCrLf & "Bereich der Stundeneingabe" & vbCrLf & "im Sheet Arbeitszeiten" & vbCrLf & "befindet.", vbInformation, "Alle Kommentar Spalten ein/aus..."
    End If
    ProtectActiveSheet
End Sub

Public Sub ToggleAZCommentView()
Attribute ToggleAZCommentView.VB_ProcData.VB_Invoke_Func = "k\n14"
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Schaltet nebenstehende Kommentarspalte ein oder aus,
'        Schaltet vorherige Kommentarspalte aus.
' |fffd|nderungen
' Autor: WH|fffd|
' Datum: 23.03.2001
' Zweck: Zu jeder Kommentarspalte 2 Spalten f|fffd|r abweichende Arbeitszeit von/bis
'
    Static LastComment As Range ' merkt sich letzte eingeschaltete Kommentzelle
    Dim r As Range
    
    'Ist aktive Zelle im Bereich f|fffd|r Toggel?
        Set r = ActiveWorkbook.Names("AZ_Stunden_Erl|fffd|uterung").RefersToRange
        If IsInRange(r, ActiveCell) Then
        'Jede 4. Zelle = Stunden, danach 1. = Kommentar 2. Zeit von 3. Zeit bis
        'Mod 4: 0=1, 1=0, 2=-1, 3=-2
           Set r = ActiveCell.offset(0, 1 - (ActiveCell.Column Mod 4))
            
            ' |fffd|nderungen nur an ungesch|fffd|tztem Sheet m|fffd|glich
            UnProtectActiveSheet
            If r.ColumnWidth = 0 Then
                r.ColumnWidth = 30
                r.offset(0, 1).ColumnWidth = 5
                r.offset(0, 2).ColumnWidth = 5
            Else
                r.ColumnWidth = 0
                r.offset(0, 1).ColumnWidth = 0
                r.offset(0, 2).ColumnWidth = 0
            End If
            
            
            ' Ausschalten der Letzten Kommentzeilen
            If Not LastComment Is Nothing Then
                If LastComment.Address <> r.Address Then
                    LastComment.EntireColumn.Hidden = True
                    LastComment.offset(0, 1).EntireColumn.Hidden = True
                    LastComment.offset(0, 2).EntireColumn.Hidden = True
                End If
            End If
            
            'Blattschutz wieder einschalten
            
            ProtectActiveSheet
            
            ' Merken der letzten geschalteten Spalte
            Set LastComment = r
        End If
End Sub

Sub ToggleDeutschEnglish()
' Autor: PFU
' Datum: 28.05.2001
' Zweck: Schaltet DeuEng Formeln Um
    
    If ToggleDeuEng Is Nothing Then
        SymbCreate
    End If
    If ToggleDeuEng.Tag = "DEU" Or ToggleDeuEng.Tag = "" Then
        ' Ist Deutsch also nach English
            ' Status|fffd|nderung merken
                ToggleDeuEng.Tag = "ENG"
                ToggleDeuEng.Caption = "Deutsche Formeln"
            
            ' Formeln auf Deutsch umstellen
                ReplaceCellsWith "NETTOARBEITSTAGE", "NETWORKDAYS"
    Else
        ' Ist Englisch, also nach Deutsch
            ' Status|fffd|nderung merken
                ToggleDeuEng.Tag = "DEU"
                ToggleDeuEng.Caption = "Englische Formeln"
             ' Formeln auf Deutsch umstellen
                ReplaceCellsWith "NETWORKDAYS", "NETTOARBEITSTAGE"
    End If
End Sub

Sub ShowParent(r As Range)
' Autor: PFU
' Datum: 28.05.2001
' Zweck: blendet Sheet eines Ranges ein
    
    r.Parent.Visible = True
End Sub


Function FindMy(What, Where As String, r As Range) As Range
' Autor: PFU
' Datum: 28.05.2001
' Zweck: mit der eingebauten Find-Funktion f|fffd|r Rangeobjekte gibt es
'        immer wieder Probleme.
'        Diese funktion ist ein schnellschu|fffd| da wenig  zeit.

' Sucht Muster in 1. Zeile oder Spalte abh|fffd|ngig von Where
' und liefert Zelle Zur|fffd|ck.
' What mu|fffd| in Zelle vollst|fffd|ndig enthalten sein.

' Zeichenkettenvergleich !!

    
    Dim lookin As Range
    Dim c As Range
    Dim Result As Range
    
    If UCase(Where) = "ROW" Then
       Set lookin = r.Rows(1).Cells
    Else
        Set lookin = r.Columns(1).Cells
    End If
    
    For Each c In lookin.Cells
     If CStr(c) = What Then
        Set Result = c
        Exit For
     End If
    Next
        
    Set FindMy = Result
End Function


Sub ScreenUpdating(W As Boolean)

' Z|fffd|hlen, wie oft updating ausgeschaltet wird
' wenn off = 0 dann wieder updating einschalten
    Static off As Integer
 
    If W = False Then ' einschalten
        off = off + 1
    Else
        off = off - 1
    End If
    
    If off > 0 Then
        Application.ScreenUpdating = False
    Else
        Application.ScreenUpdating = True
    End If
    
End Sub


Sub IncRow(r As Range)
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Setzt Adresse des |fffd|bergebenen Ranges eine Zeile runter
            
        Set r = r.offset(1)
End Sub


Function ReplaceOneChar(s, SearchPattern, ReplacePattern)
' Autor : Peter Fuchs
' Datum : 14.06.2001
' Zweck : Ersetzt in S ein String durch eine anderes Muster

    If Len(SearchPattern) > 1 Then
        MsgBox "Searchpattern darf nur ein Zeichen lang sein."
        Exit Function
    End If
    
    Dim c As String
    Dim k As Integer
    Dim r As String
    
    For k = 1 To Len(s)
        c = Mid$(s, k, 1)
        If c = SearchPattern Then
            r = r & ReplacePattern
        Else
            r = r & c
        End If
    Next
    
    ReplaceOneChar = r
End Function

Public Function Replace(ByRef s, What, Width)
    
    Dim p As Integer
    Dim r As String
    
    p = InStr(s, What)
    r = s
    While p > 0
        r = Mid$(r, 1, p - 1) + Width + Mid$(r, p + Len(What), Len(s))
        p = InStr(r, What)
    Wend
    Replace = r
End Function

Sub InitComment()
' Autor : Peter Fuchs
' Datum : 17.06.2001
' Zweck : Kopiert Zell-Text in Kommentar der linken nachbar-Zelle

    Dim c As Range
    Dim r As Range
    
    Dim ws As Worksheet
    
    
    SB.SetSB "Kommentare eintragen ... "
    
    For Each c In Arbeitszeiten.Range(RNG_AZ_VT)
        Arbeitszeiten.copyComment c
    Next
    
    SB.Reset
    
End Sub

Sub Clear_Comment()
' Autor : Peter Fuchs
' Datum : 17.06.2001
' Zweck : L|fffd|scht aus Arbeiteszeiten EIngabebereich alle Comments

    Dim Cell As Range
    Dim r As Range
    Set r = Arbeitszeiten.Range("AZ_ClearComment")
    For Each Cell In r.Cells
        If Not Cell.Comment Is Nothing Then Cell.Comment.Delete
    Next
End Sub

Function Version() As String
' Autor : Peter Fuchs
' Datum : 17.06.2001
' Zweck : Liefert fertigen Versionsstring aus den Dokumenteigenschaften
On Error GoTo Version_err
  
  Version = "Version " & ActiveWorkbook.CustomDocumentProperties.item("Version") _
    & " vom " & ActiveWorkbook.CustomDocumentProperties.item("VersionDate")

Version_Finish:
    Exit Function
    
Version_err:
    Version = " -- Attribute fehlern ! -- "
    Resume Version_Finish
End Function

Sub Monat2Start()
    ' Anzegeige aktueller monat auf startsheet
        Start.Info2.Value = Format(Mitarbeiter_Info.Range("AktMonat"), "mmmm YYYY")
    
    ' Anzeige der Version auf Startsheet
        Dim c As Object
        Set c = Start.Info
        c = Version() & vbLf & vbLf
End Sub

Function cm2Punkt(W) As Single
    cm2Punkt = W / cm_pro_Punkt
End Function

Function Punkt2cm(W) As Single
    Punkt2cm = cm_pro_Punkt * W
End Function


Function IsInListActivationRange(r As Range, RangeWhereActive As String) As Boolean
' Autor: PFU
' Datum: 28.06.2001
' Zweck: Pr|fffd|fen, ob Zelle in definiertem Bereich
' Hier:  Eingabebereich f|fffd|r T|fffd|tigkeitsart zu einem Projekt
' Input: R : targetzelle, in der User liste gefordert hat
'        RangeWhereActive: Bereichsname, in dem Liste aktiviert werden darf

Dim Result
Dim RWA As Range

        On Error GoTo IsInListActivationRange_Err
        
    ' Name in Range wandeln
        Set RWA = Application.Names(RangeWhereActive).RefersToRange
    ' Test, ob name OK
        
        If RWA Is Nothing Then
            ' nicht OK : Fehlermeldung
            MsgBox "Fehlerhafter Bereichsname " & RangeWhereActive
            Result = False
        Else
            ' Ja: Ok
            ' Test, ob Zielzelle in Aktivierungsbereich
                Set RWA = Application.Intersect(r, RWA)
                If RWA Is Nothing Then
                   Result = False
                Else
                    Result = True
                End If
        End If
        IsInListActivationRange = Result
        Exit Function
IsInListActivationRange_Err:
        If Err = 1004 Then
            MsgBox "Bereich nicht gefunden"
            Result = False
            Exit Function
        Else
            MsgBox Err.Description, vbCritical, "Fehler " & Err
        End If
End Function


Function CheckList(Target As Range, RangeName As String, Cancel As Boolean) As Boolean
' Autor: PFU
' Datum: 29.06.2001
' Zweck: Pr|fffd|fen ob zelle in definiertem LAR (ListActivationRange),
'        wenn ja, Liste mit info aus LRS (list Row Source) |fffd|ffnen.
'        und Userwahl an Target zur|fffd|ckgeben.

' Return:True, wenn Liste ge|fffd|ffnet wurde.

    
    Dim f As frm_Auswahlliste
    On Error GoTo CheckList_Err
    If IsInListActivationRange(Target, "LAR_" & RangeName) Then
'Sonderbehandlung f|fffd|r Art des Einsatzes
        If RangeName = "vorw_Art_Einsatzes" Then
'LAR_vorw_Art_Einsatzes
           ListBox_ArtEinsatz Target, Cancel
        Else
            Set f = New frm_Auswahlliste
            f.rowsource = "LRS_" & RangeName
            f.frmCaption = f.frmCaption & ": " & RangeName
            
            ' ab hier spezialfunktion: es solf f|fffd|r Range Anfahrtweg
            ' zus|fffd|tzlich wert aus 2. Spalte in bemerkung eingeb|fffd|gt werden.
                Dim offset
                If RangeName = "Anfahrtweg" Then
                    If Target.Column = 16 Then
                        offset = 9
                    ElseIf Target.Column = 17 Then
                        offset = 8
                    End If
                    
                    f.Define2ndReturn 2, 0, offset, True, True
                End If
            
            f.Show
            
            ' User hat abbruch gedr|fffd|ckt ?
                If f Is Nothing Then
                    Exit Function
                End If
                
            ' result vergeben
                Target = f.Result
                
            ' ab hier spezialfunktion: es soll f|fffd|r Range Anfahrtweg
            ' zus|fffd|tzlich wert aus 2. Spalte in bemerkung eingeb|fffd|gt werden.
            ' unfertig, code funktioniert, aber unsch|fffd|n
            ' Semikolon entfernt, da Baan-Schnittstelle diese Sonderzeuchen nicht vertr|fffd|gt
            
                If RangeName = "Anfahrtweg" Then
' hier offset - 1, -> weil Baan -Spalte weg
                    Target.offset(0, offset - 1) = f.Result2 & " " & Target.offset(0, offset)
                End If
                
            ' Formular schliessen
                Set f = Nothing
            
            ' kein kontextmen|fffd|
                Cancel = True
        End If
            
            ' Abgearbeitet melden
                CheckList = True
    Else
        CheckList = False
    End If
    Exit Function
CheckList_Err:
    If Err = -2147418105 Then
       ' MsgBox "Abbruch...", vbInformation, "Auswahl abgebrochen..."
    Else
        MsgBox Error, vbCritical, "Fehler Nr.:" & Err
        Exit Function
    End If
End Function
Function RB(wert, Stellen) As String
    If Len(wert) < Stellen Then
        RB = Space(Stellen - Len(wert)) & wert
    Else
        RB = wert
    End If
End Function

Public Sub Zeitabrechnungsblock_Set()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: F|fffd|gt in Zeitabrechnung den hier n|fffd|tigen
'        Stundenabrechnungsbereich ein.

    Dim ws As Worksheet
    Dim Vis                 ' Merken der Sichtbarkeit
    Dim ZeitabrechnungWS As Worksheet
    
    'Merken des aktuellen Sheets
        Set ws = ActiveSheet
     'ZASheet setzen
        Set ZeitabrechnungWS = ActiveWorkbook.Worksheets("Zeitabrechnung")
    ' Sichtbarkeit merken und einschalten
        Vis = ZeitabrechnungWS.Visible
        ZeitabrechnungWS.Visible = xlSheetVisible
    ' |fffd|berschreibquelle selektieren
        ZeitabrechnungWS.Select
        UnProtectActiveSheet
        ActiveWorkbook.Names("ZA_Block").RefersToRange.Select
    ' In Zwiswchenablage
        Selection.Copy
    ' Ziel selektieren
        ActiveWorkbook.Names("ZA_Block_Ziel").RefersToRange.Select
    ' Aus Zwischenablage
        ActiveSheet.Paste
    ' Sichtbarkeit zur|fffd|cksetzen
       Application.Names("ZA_Ausgezahlte_UebStd").RefersToRange.Select
       ZeitabrechnungWS.Visible = Vis
        ProtectActiveSheet
    'zur|fffd|ck zum alten Worksheet
        ws.Select
        
End Sub
Public Sub Zeitabrechnungsblock_Clear()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: L|fffd|scht in Projekt|fffd|bersicht den hier unn|fffd|tigen
'        Stundenabrechnungsbereich.

    Dim ws As Worksheet
    Dim Vis                 ' Merken der Sichtbarkeit
    Dim ZeitabrechnungWS As Worksheet
    
    'Merken des aktuellen Sheets
        Set ws = ActiveSheet
    'ZASheet setzen
        Set ZeitabrechnungWS = ActiveWorkbook.Worksheets("zeitabrechnung")
    ' Sichtbarkeit merken und einschalten
        Vis = ZeitabrechnungWS.Visible
        ZeitabrechnungWS.Visible = xlSheetVisible
    ' |fffd|berschreibquelle selektieren
        ZeitabrechnungWS.Select
        UnProtectActiveSheet
        ActiveWorkbook.Names("ZA_OverwriteBlock").RefersToRange.Select
    ' In Zwiswchenablage
        Selection.Copy
    ' ziel selektieren
        ActiveWorkbook.Names("ZA_for_Clear").RefersToRange.Select
    ' Aus zwischenablage
        ActiveSheet.Paste
    ' Sichtbarkeit wiederherstellen
        Application.Names("ZA_Ausgezahlte_UebStd").RefersToRange.Select
        ZeitabrechnungWS.Visible = Vis
        ProtectActiveSheet
    'zur|fffd|ck zum alten Worksheet
        ws.Select
    
End Sub





Function IsBigTextChar(W) As Boolean
    IsBigTextChar = _
        Len(W) = 1 _
        And W >= "A" _
        And W <= "Z"
End Function

Function Std(c As Range)
' Autor: PFU
' Datum: 29.06.2001
' Zweck: Berechnet aus bis -von dezimale stunden
   Dim D As Date
   If IsNumeric(c.offset(0, 3)) And IsNumeric(c.offset(0, 2)) Then
      D = CDate(c.offset(0, 3)) - CDate(c.offset(0, 2))
      Std = Hour(D) + Minute(D) / 60
   End If
End Function

Sub SetEnableToggleMenuButton(W)
' Autor: PFU
' Datum: 24.07.2001
' Zweck: Pr|fffd|fen ob Variable gesetzt, wenn nein, setzen und wert |fffd|bergeben
    On Error GoTo SetEnableToggleMenuButton_Err
    If isBulkImport() Then
        Exit Sub
    End If

    If ToggleMenuButton Is Nothing Then SymbCreate
    ToggleMenuButton.Enabled = W
    Exit Sub
SetEnableToggleMenuButton_Err:
    SymbCreate
    Resume
End Sub

Sub SetEnableToggleAllComment(W)
' Autor: PFU
' Datum: 24.07.2001
' Zweck: Pr|fffd|fen ob Variable gesetzt, wenn nein, setzen und wert |fffd|bergeben
    On Error GoTo SetEnableToggleAllComment_Err
    If isBulkImport() Then
        Exit Sub
    End If
    
    If ToggleAllComment Is Nothing Then SymbCreate
    ToggleAllComment.Enabled = W
    Exit Sub
SetEnableToggleAllComment_Err:
    SymbCreate
    Resume
End Sub

Function IsOneLowerChar(s)

' Autor: PFU
' Datum: 24.07.2001
' Zweck: Pr|fffd|fen ob in S  ein Buchstabe zwischen "a" und "z" |fffd|bergeben wird.
    
    If s = "" Then
        IsOneLowerChar = False
    Else
       IsOneLowerChar = (Len(s) = 1) And (s >= "a") And (s <= "z")
    End If
    
End Function


Sub ResetWorksheet()
' Autor : Peter Fuchs
' Datum : 30.07.2001
' Zweck : Workbook initialisieren

    ' Symbolleisten status merken
        Set SymbListe = New objSymbList
        
    ' Einschalten der Symbolleiste "Zeiterfassung_Start"
        SymbCreate
        
   
    ' Pr|fffd|fen, ob Deutsch oder Englische Umgebung
        CheckAddIn
    
    
    ' Usereingaben sollen |fffd|berpr|fffd|ft werden (nicht bei Import)
        UserInputCheck = 0
    
End Sub

Public Sub UserInputCheckNo()
' Autor : Peter Fuchs
' Datum : 30.07.2001
' Zweck : Wenn Kein Check gew|fffd|nscht, UserInputCheck heraufz|fffd|hlten
    
    UserInputCheck = UserInputCheck + 1
End Sub

Public Sub UserInputCheckYes()
' Autor : Peter Fuchs
' Datum : 30.07.2001
' Zweck : Wenn ein Check gew|fffd|nscht, UserInputCheck herabz|fffd|hlen.

    If UserInputCheck > 0 Then
        UserInputCheck = UserInputCheck - 1
    End If
End Sub

Sub Inc(ByRef W)
    W = W + 1
End Sub

Sub Dec(ByRef W)
    W = W - 1
End Sub


Sub FixedLanguage()
    ' Pr|fffd|ft, ob in Mitarbeiter_info
    ' Defaultlanguage f|fffd|r Internal Services gesezt
    ' gesetzt.
    
    Dim r As Range
    SB.SetSB ("Sprache setzen")
    If IsExcel2010() Then
        ' Formeln auf Englisch umstellen
        ReplaceCellsWith "NETTOARBEITSTAGE", "NETWORKDAYS"
        
         ElseIf IsExcel2013() Then
        ' Formeln auf Englisch umstellen
        ReplaceCellsWith "NETTOARBEITSTAGE", "NETWORKDAYS"
        ElseIf IsExcel2016() Then
        ' Formeln auf Englisch umstellen
        ReplaceCellsWith "NETTOARBEITSTAGE", "NETWORKDAYS"
    
    Else
        Set r = WB_Main.Names("DefaultLanguage").RefersToRange
        Select Case r
            Case "DEU"
                ' Formeln auf Deutsch umstellen
                ReplaceCellsWith "NETWORKDAYS", "NETTOARBEITSTAGE"
            Case "ENG"
                ' Formeln auf Englisch umstellen
                ReplaceCellsWith "NETTOARBEITSTAGE", "NETWORKDAYS"
            Case Else
                
        End Select
    End If
End Sub

Private Function set_Anzeigebereich() As Boolean
Dim Arbeitsplatz As Range
Dim ws As Worksheet
Dim r_Quelle As Range
Dim r_Ziel As Range

Dim i_Quelle As Long
Dim i_Ziel As Long

    On Error GoTo set_Anzeigebereich_Err

'   Arbeitsplatz aus Mitarbeiterinfo holen
    Set Arbeitsplatz = Mitarbeiter_Info.Range("LAR_Arbeitsplatz")
    
'   ist ein Arbeitsplatz Kennzeichen vorhanden
    If Arbeitsplatz = vbNullString Then
        MsgBox "F|fffd|r den Mitarbeiter ist kein Arbeitsplatz-Kennzeichen vorhanden." & vbCr & _
               "Bitte unter Stammdaten / Mitarbeiter Info pflegen.", vbCritical + vbOKOnly
        set_Anzeigebereich = False
    Else
'       f|fffd|llen des Bereiches zum Anzeigen der Arten des Arbeitsplatzes
'       in abh|fffd|ngigkeit des Arbeitsplatzkennzeichen
        Set ws = Parameter
        Set r_Quelle = ws.Range("LRS_ART_Einsatz")
        Set r_Ziel = ws.Range("LRS_ART_Einsatz_Disp")
        GoSub ClearRanges_init
        r_Ziel.ClearContents
        i_Ziel = 1

        For i_Quelle = 1 To UBound(r_Quelle.Value2)
            If r_Quelle.Value2(i_Quelle, 1) <> "" Then
                If r_Quelle.Value2(i_Quelle, 3) = Arbeitsplatz Then
                   r_Ziel.Cells(i_Ziel, 1).Value = r_Quelle.Value2(i_Quelle, 1)
                   r_Ziel.Cells(i_Ziel, 2).Value = r_Quelle.Value2(i_Quelle, 2)
                   i_Ziel = i_Ziel + 1
                End If
            End If
        Next i_Quelle
        
        Set r_Ziel = Nothing
        Set r_Quelle = Nothing
        GoSub ClearRanges_exit
        Set ws = Nothing
        set_Anzeigebereich = True
    End If

    Set Arbeitsplatz = Nothing


Exit Function

ClearRanges_init:
    ws.Unprotect ProtectKW
Return
    
ClearRanges_exit:
    ws.Protect ProtectKW
Return


set_Anzeigebereich_Err:
        MsgBox Error, vbCritical, "Fehler Nr.:" & Err
        set_Anzeigebereich = False
        Exit Function
End Function

Function Check_Art_Einsatz(Target As Range) As Boolean
'Pr|fffd|fen, ob der Eingabewert im Bereich der m|fffd|glichen Arten des Einsatzes liegt

Dim Arbeitsplatz As Range
Dim ws As Worksheet
Dim r_Quelle As Range
Dim i_Quelle As Long

    On Error GoTo Check_Art_Einsatz_Err
    Check_Art_Einsatz = False

'   Arbeitsplatz aus Mitarbeiterinfo holen
    Set Arbeitsplatz = Mitarbeiter_Info.Range("LAR_Arbeitsplatz")
    
'   ist ein Arbeitsplatz Kennzeichen vorhanden
    If Arbeitsplatz = vbNullString Then
        MsgBox "F|fffd|r den Mitarbeiter ist kein Arbeitsplatz-Kennzeichen vorhanden." & vbCr & _
               "Bitte unter Stammdaten / Mitarbeiter Info pflegen.", vbCritical + vbOKOnly
        Target.Value = vbNullString
    Else

        Set ws = Parameter

        Set r_Quelle = ws.Range("LRS_ART_Einsatz")


        For i_Quelle = 1 To UBound(r_Quelle.Value2)
            If (r_Quelle.Value2(i_Quelle, 1) = Target.Value) And _
               (r_Quelle.Value2(i_Quelle, 3) = Arbeitsplatz) Then
                   Check_Art_Einsatz = True
            End If
        Next i_Quelle
    
        If Not Check_Art_Einsatz Then
            If Target.Value <> vbNullString Then
                MsgBox "Der eingegebene Wert, " & Target.Value & ", ist nicht g|fffd|ltig.", vbCritical + vbOKOnly
                Target.Value = vbNullString
            End If
        End If

        
        Set ws = Nothing
        Set r_Quelle = Nothing



    End If
Exit Function

Check_Art_Einsatz_Err:
        MsgBox Error, vbCritical, "Fehler Nr.:" & Err
        Check_Art_Einsatz = False
        Exit Function
End Function


'Generic Functio to read a document property
Function ReadProp(sPropName As String) As Variant

Dim bCustom As Boolean
Dim sValue As String

  On Error GoTo ErrHandlerReadProp
  'Try the built-in properties first
  'An error will occur if the property doesn't exist
  sValue = ActiveWorkbook.BuiltinDocumentProperties(sPropName).Value
  ReadProp = sValue
  Exit Function

ContinueCustom:
  bCustom = True

Custom:
  sValue = ActiveWorkbook.CustomDocumentProperties(sPropName).Value
  ReadProp = sValue
  Exit Function

ErrHandlerReadProp:
  Err.Clear
  'The boolean bCustom has the value False, if this is the first
  'time that the errorhandler is runned
  If Not bCustom Then
    'Continue to see if the property is a custom documentproperty
    Resume ContinueCustom
  Else
    'The property wasn't found, return an empty string
    ReadProp = ""
    Exit Function
  End If

End Function

'Genereic procedure to set a document property
Public Sub WriteProp(sPropName As String, sValue As String, _
      Optional lType As Long = msoPropertyTypeString)

'In the above declaration, "Optional lType As Long = msoPropertyTypeString" means
'that if the Document Property's Type is Text, we don't need to include the lType argument
'when we call the procedure; but if it's any other Prpperty Type (e.g. date) then we do

Dim bCustom As Boolean

  On Error GoTo ErrHandlerWriteProp

  'Try to write the value sValue to the custom documentproperties
  'If the customdocumentproperty does not exists, an error will occur
  'and the code in the errorhandler will run
  ActiveWorkbook.BuiltinDocumentProperties(sPropName).Value = sValue
  'Quit this routine
  Exit Sub

Proceed:
  'We know now that the property is not a builtin documentproperty,
  'but a custom documentproperty, so bCustom = True
  bCustom = True

Custom:
  'Try to set the value for the customproperty sPropName to sValue
  'An error will occur if the documentproperty doesn't exist yet
  'and the code in the errorhandler will take over
  ActiveWorkbook.CustomDocumentProperties(sPropName).Value = sValue
  Exit Sub

AddProp:
  'We came here from the errorhandler, so know we know that
  'property sPropName is not a built-in property and that there's
  'no custom property with this name
  'Add it
  On Error Resume Next
  ActiveWorkbook.CustomDocumentProperties.Add name:=sPropName, _
    LinkToContent:=False, Type:=lType, Value:=sValue

  If Err Then
    'If we still get an error, the value isn't valid for the Property Type
    'e,g an invalid date was used
    Debug.Print "The Property " & Chr(34) & _
     sPropName & Chr(34) & " couldn't be written, because " & _
     Chr(34) & sValue & Chr(34) & _
     " is not a valid value for the property type"
  End If

  Exit Sub

ErrHandlerWriteProp:
  Select Case Err
    Case Else
   'Clear the error
   Err.Clear
   'bCustom is a boolean variable, if the code jumps to this
   'errorhandler for the first time, the value for bCustom is False
   If Not bCustom Then
     'Continue with the code after the label Proceed
     Resume Proceed
   Else
     'The errorhandler was executed before because the value for
     'the variable bCustom is True, therefor we know that the
     'customdocumentproperty did not exist yet, jump to AddProp,
     'where the property will be made
     Resume AddProp
   End If
  End Select

End Sub

'Ermitteln, ob BulkImport aktiviert ist
'ist der Fall, wenn entsprechende Dokumenteigenschaft gesetzt wurde
Function isBulkImport() As Boolean
    Dim bBulk As Boolean
    
    bBulk = IIf(ReadProp("BulkImport") = True, True, False)
    isBulkImport = bBulk
End Function

Attribute VB_Name = "Utility_often_used"
Option Explicit

Sub Doit()
    TBVorlage.Visible = True
    Projekte.Visible = True
End Sub

Public Sub ShowAllSheet()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Schaltet alle Sheets ein.

    HideAllSheets (True)
    UnProtectAllSheets
End Sub

Sub ListofNames()
' Autor: PFU
' Datum: 12.02.2001
' Zweck: Erzeugt Neues Sheet mit liste aller
'        benannten Bereiche und deren Zelleadresse
 
Dim NeuesTabellenblatt  As Worksheet
Dim i
Dim nm As name

    Set NeuesTabellenblatt = Worksheets.Add
    i = 1
    For Each nm In ActiveWorkbook.Names
        NeuesTabellenblatt.Cells(i, 1).Value = nm.name
        NeuesTabellenblatt.Cells(i, 2).Value = "'" & nm.RefersTo
        i = i + 1
    Next
    NeuesTabellenblatt.Columns("A:B").AutoFit
End Sub


Attribute VB_Name = "WB_Main"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Option Explicit

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
' Autor: PFU
' Datum: 28.06.2001
' Zweck: vor speichern pr|fffd|fen, ob Mitarbeiter daten vollst|fffd|ndig

    If isBulkImport() Then
        Exit Sub
    End If
    
    Cancel = Not Mitarbeiter_Info.CheckData

End Sub

Private Sub Workbook_Activate()
    If isBulkImport() Then
        Exit Sub
    End If
    
    ResetWorksheet
End Sub


Private Sub Workbook_Deactivate()
    If isBulkImport() Then
        Exit Sub
    End If
    
    ' Symbolleisten Resetten
        Set SymbListe = Nothing

    ' menu entfernen
        MenuDelete
        
    
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    If isBulkImport() Then
        Exit Sub
    End If
    
    On Error Resume Next
    MInfo.Visible = True
    ActiveSheet.Visible = xlSheetHidden
End Sub



Private Sub Workbook_Open()
    On Error GoTo Workbook_Open_Err
    
    If Not isBulkImport() Then
        Application.ScreenUpdating = False
        INIT_Zeitabrechnung
        Application.ScreenUpdating = True
    Else
        Application.ScreenUpdating = False
        |fffd|bersichtProjekte.Visible = True
        |fffd|bersichtSpesen.Visible = True
        AuswertungProjekte.Visible = True
        AuswertungSpesen.Visible = True
        Start.Visible = False
        |fffd|bersichtProjekte.Activate
        Application.ScreenUpdating = True
    End If
    
    Application.DisplayStatusBar = True

    Exit Sub
Workbook_Open_Err:
    MsgBox Error, , "Fehler Nr.:" & Err
End Sub


Attribute VB_Name = "Zeitabrechnung"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





Attribute VB_Name = "frm_Auswahlliste"
Attribute VB_Base = "0{B881828B-00F2-4D13-89C7-9276D105A78C}{5AF2D729-9A0C-4778-85B2-4131693E8F47}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Autor :    Peter Fuchs
' Datum :    28.06.2001
' Zweck :    Allgemeines Formular um auswahllisten zur verf|fffd|gung zu stellen
' Anwendung: Userform instantiieren.
'            Rowsource auf Quellebereich f|fffd|r Liste setzen
'            ggf. R|fffd|ckgabespalte setzen, Default = 0 (1. Spalte)
'            frm-Caption setzen. Default = Auswahlliste
' Hinweise:  - Anzahl spalten f|fffd|r Liste wird aus breite der Rowsource ermittelt.
'            - in Rowsource ist 1. Spalte |fffd|berschrift
Option Explicit

' Nummer der Spalte, aus der Zur|fffd|ckgegeben werden soll.
    Private ResultCol_ As Integer
' Nummer der 2. Spalte, aus der Zur|fffd|ckgegeben werden soll.
    ' Wenn Wert 0 keine 2. R|fffd|ckgabe
    Private ResultCol_2_ As Integer
    ' Es wird davon Ausgegangen, da|fffd| 2. Result in festem relativem Bezug zur Zielzuelle steht.
    ' Der Kann hier definiert werden.
    Private Result2RowOffset As Integer
    Private Result2ColOffset As Integer
    ' Soll 2. Result angeh|fffd|ngt werden ?
    Private Result2Add2Target As Boolean
    ' Soll wenn Result2Add2Target  true, an anfang geh|fffd|ngt werden?
    Private Result2Add2Front As Boolean
    
    'SFE 01.11.2004 Bugfix f|fffd|r korrekte Darstellung der Auswahlliste
    Private lWidth_ As Integer 'Breite der Auswahlliste
    Private lHeigth_ As Integer 'H|fffd|he der Auswahlliste

Private NoAction As Boolean

Public Sub Define2ndReturn(ColNo, RowOffset, ColOffset, Optional Add As Boolean = False, Optional Add2Front As Boolean = False)
' Autor : Peter Fuchs
' Datum : 28.06.2001
' Zweck : Definieren einer 2. R|fffd|ckgabe
        
        If ColNo <= Me.lst_Auswahl.ColumnCount Then
            ResultCol_2_ = ColNo
        Else
            MsgBox "Definition der 2. Returnspalte ung|fffd|ltig." & vbCrLf & "Spalte exitiert nicht.", vbCritical, "frm_Auswahlliste"
            Exit Sub
        End If
        Result2ColOffset = ColOffset
        Result2RowOffset = RowOffset
        Result2Add2Target = Add
        Result2Add2Front = Add2Front
End Sub

'SFE 01.11.2004 Workaround f|fffd|r korrekte Anzeige der Auswahlliste
Private Sub UserForm_Activate()
    Me.lst_Auswahl.Width = lWidth_
    Me.lst_Auswahl.Height = lHeigth_
End Sub

Private Sub UserForm_Initialize()
    ResultCol_ = 0
    Me.lst_Auswahl.SetFocus
End Sub


Private Sub lst_Auswahl_Change()
    If Not NoAction Then Me.Hide
End Sub

Public Property Get Result() As Variant
    If Not IsNull(Me.lst_Auswahl) Then
        Result = Me.lst_Auswahl.Column(ResultCol)
    End If
End Property
Public Property Get Result2() As Variant
    If IsNull(ResultCol_2_) Or ResultCol_2_ = 0 Then
        Result2 = Null
    Else
        Result2 = Me.lst_Auswahl.Column(ResultCol_2_ - 1)
    End If
End Property

Public Property Let Result2(ByVal vNewValue As Variant)
    MsgBox "Result2 ist readonly", vbCritical, "frm_Auswahlliste"
End Property


Public Property Get frmCaption() As Variant
    frmCaption = Me.Caption
End Property

Public Property Let frmCaption(ByVal vNewValue As Variant)
    Me.Caption = vNewValue
End Property

Public Property Get rowsource() As Variant
    rowsource = Me.lst_Auswahl.rowsource
    
End Property

Public Property Let rowsource(ByVal vNewValue As Variant)
    Dim r As Range
    
    On Error GoTo let_rowsource_Err
    NoAction = True
        ' Listboxinhalt auf Bereichnamen setzen
            Me.lst_Auswahl.rowsource = vNewValue
        ' Anzahl der Spalten aus Bereich auf Listbox |fffd|bertragen
            Set r = Application.Names(vNewValue).RefersToRange
            Me.lst_Auswahl.ColumnCount = r.Columns.count
        ' Wenn 2 Spalten, dann Spaltenbreite = 2cm,4cm,4cm
        
Dim RR
RR = 0.4
        
            Select Case r.Columns.count
                Case 1
                    Me.ListWidths = "10cm"
                    lWidth_ = cm2Punkt(10)
                    Me.Width = lst_Auswahl.Left + lWidth_ + lst_Auswahl.Left + cm2Punkt(RR)
                Case 2
                    Me.ListWidths = "2cm;8cm"
                    lWidth_ = cm2Punkt(10)
                    Me.Width = lst_Auswahl.Left + lWidth_ + lst_Auswahl.Left + cm2Punkt(RR)
                Case 3
                    Me.ListWidths = "2cm;5cm;5cm"
                    lWidth_ = cm2Punkt(12)
                    Me.Width = lst_Auswahl.Left + lWidth_ + lst_Auswahl.Left + cm2Punkt(RR)
                Case 4
                    ' FLE 16.08.2002
                    ' Ausnahme f|fffd|r alle Projekte in Arbeitszeiten und Spesen und Auslagen
                    If vNewValue = "LSR_interneProjekte" Or vNewValue = "LRS_KundenProjekte" Then
                        Me.ListWidths = "2cm;0cm;5cm;5cm"
                        lWidth_ = cm2Punkt(12)
                        Me.Width = lst_Auswahl.Left + lWidth_ + lst_Auswahl.Left + cm2Punkt(RR)
                    Else
                        Me.ListWidths = "2cm;4cm;4cm;4cm"
                        lWidth_ = cm2Punkt(14)
                        Me.Width = lst_Auswahl.Left + lWidth_ + lst_Auswahl.Left + cm2Punkt(RR)
                    End If
                Case 5
                    Me.ListWidths = "2cm;3cm;3cm;3cm;3cm"
                    lWidth_ = cm2Punkt(14.2)
                    Me.Width = lst_Auswahl.Left + lWidth_ + lst_Auswahl.Left + cm2Punkt(RR)
                Case Else
                    MsgBox "Quellbereich f|fffd|r Auswahlliste enth|fffd|lt falsche Anzahl Spalten: " & r.Columns.count
            End Select
           
            If r.Rows.count > 30 Then
                Me.Height = Me.Height + cm2Punkt(6)
                lHeigth_ = Me.lst_Auswahl.Height + cm2Punkt(6)
            ElseIf r.Rows.count > 20 Then
                Me.Height = Me.Height + cm2Punkt(4)
                lHeigth_ = Me.lst_Auswahl.Height + cm2Punkt(4)
            ElseIf r.Rows.count > 10 Then
                Me.Height = Me.Height + cm2Punkt(2)
                lHeigth_ = Me.lst_Auswahl.Height + cm2Punkt(2)
            Else
                Me.Height = Me.Height
                lHeigth_ = Me.lst_Auswahl.Height
            End If

            Me.lst_Auswahl.Width = lWidth_
            Me.lst_Auswahl.Height = lHeigth_
    NoAction = False

    Exit Property
    
let_rowsource_Err:
    MsgBox Error, vbCritical, "Fehler in Objekt Auswahlliste..."
End Property



Public Property Get ResultCol() As Variant
    ResultCol = ResultCol_
End Property

Public Property Let ResultCol(ByVal vNewValue As Variant)
    ResultCol = ResultCol_
    
End Property

Public Property Get ColWidths() As Variant
    ColWidths = Me.lst_Auswahl.ColumnWidths
End Property

Public Property Let ColWidths(ByVal vNewValue As Variant)
    Me.lst_Auswahl.ColumnWidths = vNewValue
End Property

Public Property Get ListWidths() As Variant
    ListWidths = Punkt2cm(Me.lst_Auswahl.Width)
End Property

Public Property Let ListWidths(ByVal vNewValue As Variant)
    Me.lst_Auswahl.ColumnWidths = vNewValue
End Property


Private Sub lst_Auswahl_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = vbKeyEscape Then
        Me.Hide
    End If
End Sub

Attribute VB_Name = "km_Abrechnung"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Option Explicit

Private Sub Worksheet_Activate()
Dim i As Integer

For i = 11 To 41
    If Cells(i, 8) = "" Then
        If Cells(i, 10) <> "" Then
            Cells(i, 8).Value = Cells(i, 10).Value
        End If
    End If
Next i
    'Range("J11:J41").Select
    'Selection.Copy
    'Range("H11").Select
    'Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub


Attribute VB_Name = "objNodeCounter"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Option Explicit

Dim Counter_ As Long
Dim Name_ As String

Public Property Get Counter() As Variant
    Counter = Counter_
End Property

Public Property Let Counter(ByVal vNewValue As Variant)
    Counter_ = vNewValue
End Property

Public Property Get name() As Variant
    name = Name_
End Property

Public Property Let name(ByVal vNewValue As Variant)
    Name_ = vNewValue
End Property

Sub Inc()
    Counter_ = Counter_ + 1
End Sub
Sub Dec()
    Counter_ = Counter_ - 1
End Sub
Attribute VB_Name = "objNodeCounterList"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Option Explicit

  Dim c As New Collection
    
   

Sub Add(name)
    Dim NN As objNodeCounter
    Set NN = New objNodeCounter
    On Error GoTo Add_Err
        c.Add NN, name
        NN.Counter = 1
        NN.name = name
Add_Finish:
    Exit Sub
Add_Err:
    ' Object schon da
    If Err = 457 Then
        c.item(name).Inc
        Resume Add_Finish
    Else
        MsgBox Error, , Err
        Stop
    End If
End Sub
Sub remove(name As String)
    c.remove name
End Sub

Function item(index) As objNodeCounter
On Error GoTo item_err
    Set item = c.item(index)
    Exit Function
item_err:
    Select Case Err
        Case 5
            'MsgBox "Element nicht gefunden." & vbCrLf & vbCrLf & "INDEX:=" & index
            
            Resume Next
        Case Else
            MsgBox Error & " / " & Err
            Exit Function
    End Select
End Function

Function first() As objNodeCounter
    Set first = c.item(1)
End Function

Function last() As objNodeCounter
    Set last = c.item(c.count)
End Function

Function count()
    count = c.count
End Function

Sub Reset()
    Dim L As Long
    For L = 1 To c.count
     c.remove (1)
    Next
End Sub
Sub Show()
    Dim nc As objNodeCounter
    For Each nc In c
        Debug.Print Format(nc.Counter, "000") & " " & nc.name
    Next
End Sub
Attribute VB_Name = "objResultMSG"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



' Autor:   Peter Fuchs
' Datum:   10.05.2001
' Zweck:   Ausgabe von Fehlermeldungen

Option Explicit

Private Error_ As String
Private Meldung_ As String

Public Property Get Error() As Variant
    Error = Error_
End Property

Public Property Let Error(ByVal vNewValue As Variant)
    Error_ = Error_ & vbCrLf & " - " & vNewValue
End Property

Public Property Get Meldung() As Variant
    Meldung = Meldung_
End Property

Public Property Let Meldung(ByVal vNewValue As Variant)
    Meldung_ = Meldung_ & IIf(Meldung_ <> "", vbCrLf, "") & vNewValue
End Property

Public Sub ResetError()
    Error_ = ""
End Sub

Public Sub ResetMeldung()
    Meldung_ = ""
End Sub


Sub Show(Title As String)
' Autor: Peter Fuchs
' Datum: 10.05.2001
' Zweck: Zusammenfassung der Meldungsausgabe nach Import/Export

    Dim a As String
    Dim b As String

    If Meldung_ = "" Then
        b = "Es wurden keine Aktionen ausgef|fffd|hrt." & vbCrLf
    Else
        b = "Folgende Aktionen wurden ausgef|fffd|hrt: "
        b = b & vbCrLf & vbCrLf & Meldung_ & vbCrLf & vbCrLf
    End If
    If Error_ <> "" Then
        a = b & "Dabei sind folgende Fehler aufgetreten: " & vbCrLf & vbCrLf
        a = a & Error_
    End If

    MsgBox IIf(Error_ = "", b, a), vbInformation, Title & IIf(Error_ = "", " erfolgreich ", "") & "beendet..."

End Sub

Attribute VB_Name = "objStatusbar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit
    Const maxSBLen = 50

Dim msg_ As String

Sub SetSB(s)
    msg_ = s
    Application.StatusBar = msg_
End Sub

Sub Dot()
    If Len(Application.StatusBar) > maxSBLen Then
        Application.StatusBar = msg_
    Else
        Application.StatusBar = Application.StatusBar & "."
    End If
End Sub

Sub Reset()
    Application.StatusBar = ""
End Sub
Attribute VB_Name = "objSymb"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





' Autor: PFU
' Datum: 24.06.2001
' Zweck: Objekt zum speichern von name und sichtbarkeit einer
'        Symbollleiste


Option Explicit

Private Name_ As String         ' name der Symbolleiste
Private Visible_ As Boolean     ' Sichtbarkeit der Symbolleiste
'Private Enabled_ As Boolean      ' Aktivierung der  Symbolleiste
Public Property Get name() As Variant
    name = Name_
End Property

Public Property Let name(ByVal vNewValue As Variant)
    Name_ = vNewValue
End Property

Public Property Get Visible() As Variant
    Visible = Visible_
End Property

Public Property Let Visible(ByVal vNewValue As Variant)
    Visible_ = vNewValue
End Property

'Public Property Get Enabled() As Variant
'    Enabled = Enabled_
'End Property
'
'Public Property Let Enabled(ByVal vNewValue As Variant)
'    Enabled_ = vNewValue
'End Property
Attribute VB_Name = "objSymbList"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





' Autor: PFU
' Datum: 24.06.2001
' Zweck: Liste speichern von objSymb


Option Explicit

Public Liste As New Collection


Private Sub Add(name As String, Visible As Boolean) ', Enabled As Boolean)
' Autor: PFU
' Datum: 24.06.2001
' Zweck: einfugen eines Objektes in Liste

    Dim s As New objSymb
    If name = "" Then
        MsgBox "name der Sysmbolleiste fehlt." & vbCrLf & vbCrLf & _
         "Nichts hinzugef|fffd|gt.", vbCritical, "SymbListe Add Error"
        Exit Sub
    End If
    s.name = name
    s.Visible = Visible
    's.Enabled = Enabled
    Liste.Add s
    
End Sub

Private Sub Class_Initialize()
' Autor: PFU
' Datum: 24.06.2001
' Zweck: F|fffd|gt alle Commandbars in liste ein

    
    Dim cb As CommandBar
    On Error GoTo Class_Initialize_Err
    For Each cb In CommandBars
        If cb.name <> "Worksheet Menu Bar" _
        And cb.name <> "Zeiterfassung_Start" _
        And cb.Enabled _
        And cb.Type <> msoBarTypePopup _
        And cb.Visible Then
            Add cb.name, True
            cb.Visible = False
' Debug.Print CB.Name, CB.Enabled, CB.Visible
        End If
        
    Next
    List
    Exit Sub
Class_Initialize_Err:
    If Err = -2147467259 Then
        Resume Next
    Else
        MsgBox Error, , Err
        Stop
    End If
End Sub

Private Sub Class_Terminate()
' Autor: PFU
' Datum: 24.06.2001
' Zweck: F|fffd|r alle Objekte in Liste
'        Symbollsite auf gemerkten Zustand setzen

    Dim s As objSymb
    Dim cb As CommandBar
        For Each s In Liste
            If s.name <> "Seagate" Then
                Set cb = CommandBars(s.name)
                'Debug.Print CB.Name, CB.Enabled, CB.Visible
                 cb.Visible = s.Visible
             End If
        Next
End Sub

Sub List()
    Dim s As objSymb
    For Each s In Liste
        Debug.Print s.name & Space(33 - Len(s.name)) & s.Visible
    Next
End Sub
Attribute VB_Name = "|fffd|bersichtProjekte"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "btnImportMATB, 1, 0, MSForms, CommandButton"
Option Explicit

Private Sub btnImportMATB_Click()
   get_AllFileNamen
End Sub

Attribute VB_Name = "|fffd|bersichtSpesen"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


' InQuest injected base64 decoded content
' '.+-

INQUEST-PP=macro
