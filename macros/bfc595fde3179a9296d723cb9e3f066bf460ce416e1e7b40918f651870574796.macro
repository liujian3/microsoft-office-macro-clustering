Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'*****************************************************************************************
' Ersteller:        Iwo Zwiker
' Beschreibung:
' Version:          1.0.1
' History:
'   - 1.0.0     Code muss erneuert werden k|fffd|nnen.                   ERLEDIGT
'   - 1.0.1     Verbuchen von Debitor und Ausmass                   IN BEARBEITUNG
'               muss gesetzt werden k|fffd|nnen.
'*****************************************************************************************
Public Sub Workbook_Open()
    
    Dim Code_vorhanden As Boolean
    Dim vbp As VBProject                ' Codevorlage Projekt
    Dim vbc As VBComponent              ' Codevorlage Module
    
    Set Exl = GetApplication("Excel.Application")
    Set eBook = Exl.ActiveWorkbook
    
    Code_vorhanden = False
    Set vbp = eBook.VBProject
    For Each vbc In vbp.VBComponents
        If vbc.Type = 1 And vbc.Name = "modGlobals" Then Code_vorhanden = True
    Next vbc
    If Code_vorhanden = False Then Exit Sub
    Call Set_Sorba_Schnitstellen
    
    db.Load
    db.SessionKeepAlive True
    ' Hier muss zuserst festgelegt werden, um was f|fffd|r einen Ausdruck es sich handelt.
    Druck_Type = db.ComponentSettingsReadString("DEVISPRINT", "Drucktype", "")
    Select Case Druck_Type
    Case "Kalkulationsliste"
        Call Start_DQ_Prints
    Case Else
        Call Define_Sheet_For_Edit
    End Select
    db.SessionKeepAlive False
    db.Unload
End Sub

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Variabelliste, 1, 0, MSForms, ListBox"
Attribute VB_Control = "Konstruckte, 2, 1, MSForms, ListBox"
Attribute VB_Control = "lstAdressfelder, 34, 2, MSForms, ListBox"
Attribute VB_Control = "Adressdefinition, 33, 3, MSForms, TextBox"
Attribute VB_Control = "Files, 15, 4, MSForms, ListBox"
Attribute VB_Control = "txtZusStartposition, 49, 6, MSForms, TextBox"
Attribute VB_Control = "optinklLeerZeilen, 70, 7, MSForms, OptionButton"
Attribute VB_Control = "optexklLeerZeilen, 71, 8, MSForms, OptionButton"
Attribute VB_Control = "imgInklLeerZeilen, 72, 9, MSForms, Image"
Attribute VB_Control = "imgExklLeerZeilen, 73, 10, MSForms, Image"
Private Sub Adressdefinition_Change()
    If Adressdefinition.Text <> "" Then
        db.ComponentSettingsWriteString "DEVISPRINT", "Adressdefinition", Create_Adressdefinition(Adressdefinition.Text)
    End If
End Sub

Private Sub Adressdefinition_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
'    If KeyCode = 13 Then
'        ActiveSheet.Adressdefinition.Text = ActiveSheet.Adressdefinition.Text & vbLf
'    End If
End Sub

Private Sub Files_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call Read_Variabellisten_For_Edit(Files.Value)
End Sub

Private Sub Konstruckte_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    If optinklLeerZeilen.Value = True Then
        Call Create_TextFeld(Konstruckte.Value & " | " & Create_Adressdefinition(ActiveSheet.Adressdefinition.Text) & " | inkl", Rahmen:=False, Textfeldname:=Trim(Left(Konstruckte.Value, 25)))
    Else
        Call Create_TextFeld(Konstruckte.Value & " | " & Create_Adressdefinition(ActiveSheet.Adressdefinition.Text) & " | exkl", Rahmen:=False, Textfeldname:=Trim(Left(Konstruckte.Value, 25)))
    End If
End Sub

Private Sub lstAdressfelder_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    ActiveSheet.Adressdefinition.Text = ActiveSheet.Adressdefinition.Text & Trim(Left(lstAdressfelder.Value, 10))
End Sub

Private Sub Variabelliste_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call Create_TextFeld(Variabelliste.Value, Rahmen:=False, Textfeldname:=Trim(Left(Variabelliste.Value, 20)))
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    If Cells(Target.Row, 17) = "0" Then
        Cells(Target.Row, 17) = "1"
        Cells(Target.Row, 8) = "("
        Cells(Target.Row, 10) = ")"
    ElseIf Cells(Target.Row, 17) = "1" Then
        Cells(Target.Row, 17) = "0"
        Cells(Target.Row, 8) = ""
        Cells(Target.Row, 10) = ""
    End If
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    Cancel = True
End Sub

Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    Cancel = True
End Sub

Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    Cancel = True
End Sub

Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    Cancel = True
End Sub

Attribute VB_Name = "frmPrintDialog_DQ"
Attribute VB_Base = "0{9491513E-4716-496E-98E8-74BC14A5C28A}{0123FB16-F8F7-4E72-8292-F5B02C5F76E3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim objekt As String

Private Sub butCancel_Click()
    db.ComponentSettingsWriteString "DEVIPRINT", "Abbruch", "True"
    Me.Hide
End Sub

Private Sub butOK_Click()
    Call Set_Fonts
    Call Save_KLC_Print_Settings
    Call Write_VWV_Werte_to_DB
    Me.Hide
    Call Start_Devisprint_DQ
End Sub

Private Sub butSaveasStandard_Click()
    Call Write_Settings(frmPrintDialog_DQ)
End Sub

Private Sub cboEinrichtungstyp_Change()
    If txtEinrichtungstyp.Text <> "" Then
        txtEinrichtungstyp.Text = txtEinrichtungstyp.Text & "," & cboEinrichtungstyp.Value
    Else
        txtEinrichtungstyp.Text = cboEinrichtungstyp.Value
    End If
End Sub

Private Sub cboElementcode_Change()
    If txtElementcode.Text <> "" Then
        txtElementcode.Text = txtElementcode.Text & "," & cboElementcode.Value
    Else
        txtElementcode.Text = cboElementcode.Value
    End If
End Sub

Private Sub cboKAG_Change()
    If txtKAG.Text <> "" Then
        txtKAG.Text = txtKAG.Text & "," & cboKAG.Value
    Else
        txtKAG.Text = cboKAG.Value
    End If
End Sub

Private Sub cboKapitel_Change()
    If txtKapitel.Text = "0:Alle Kapitel" And cboKapitel.Value <> "" Then txtKapitel.Text = ""
    If txtKapitel.Text <> "" Then
        txtKapitel.Text = txtKapitel.Text & "," & cboKapitel.Value
    Else
        txtKapitel.Text = cboKapitel.Value
    End If
End Sub

Private Sub cboKategorie_Change()
    If txtKategorie.Text <> "" Then
        txtKategorie.Text = txtKategorie.Text & "," & cboKategorie.Value
    Else
        txtKategorie.Text = cboKategorie.Value
    End If
End Sub

Private Sub cboNachtrag_Change()
    If txtNachtrag.Text <> "" Then
        txtNachtrag.Text = txtNachtrag.Text & "," & cboNachtrag.Value
    Else
        txtNachtrag.Text = cboNachtrag.Value
    End If
End Sub

Private Sub cboObjekt_Change()
    If txtObjekt.Text <> "" Then
        txtObjekt.Text = txtObjekt.Text & "," & cboObjekt.Value
    Else
        txtObjekt.Text = cboObjekt.Value
    End If
End Sub

Private Sub cboPoslage_Change()
    If txtPosLage.Text <> "" Then
        txtPosLage.Text = txtPosLage.Text & "," & cboPoslage.Value
    Else
        txtPosLage.Text = cboPoslage.Value
    End If
End Sub

Private Sub cboVariante_Change()
If txtVariante.Text <> "" Then
    txtVariante.Text = txtVariante.Text & "," & cboVariante.Value
Else
    txtVariante.Text = cboVariante.Value
End If
End Sub

Private Sub chkAlleHPOS_Click()
    If chkAlleHPOS.Value = True Then chkKapitel_HPOS.Value = False
End Sub

Private Sub chkKapitel_HPOS_Click()
    If chkKapitel_HPOS.Value = True Then chkAlleHPOS.Value = False
End Sub

Private Sub chkNurPositionen_Click()
    If chkNurPositionen.Value = True Then
        opt_Inkl_nicht_kalk_Pos.Visible = True
        opt_Exkl_nicht_kalk_Pos.Visible = True
        opt_Inkl_nicht_kalk_Pos.Value = False
        opt_Exkl_nicht_kalk_Pos.Value = True
    Else
        opt_Inkl_nicht_kalk_Pos.Visible = False
        opt_Exkl_nicht_kalk_Pos.Visible = False
        opt_Inkl_nicht_kalk_Pos.Value = False
        opt_Exkl_nicht_kalk_Pos.Value = False
        If optnachResultat.Value = True Or optnachLohnstunden.Value = True Then
            optnachPositionsNummern.Value = True
            optnachLohnstunden.Value = False
            optnachResultat.Value = False
        End If
    End If
End Sub

Private Sub MPDruckeinstellungen_Change()

End Sub

Private Sub optnachLohnstunden_Click()
    If optnachLohnstunden.Value = True Then
        chkNurPositionen.Value = True
    Else
'        chkNurPositionen.Value = False
    End If
End Sub

Private Sub optnachResultat_Click()
    If optnachResultat.Value = True Then
        chkNurPositionen.Value = True
    Else
'        chkNurPositionen.Value = False
    End If
End Sub

Private Sub UserForm_Activate()
    Dim Filepath As String
    Dim TMPPfad As String
    Dim thMDS As Long
    Dim i As Long
    
    Call Read_KLC_Print_Settings
    With frmPrintDialog_DQ
        Call Read_Settings(frmPrintDialog_DQ)
        Call Read_KV_WV_Variabel_Popups
        .cboDruckumfang.AddItem "Normaltext"
        .cboDruckumfang.AddItem "Kurztext"
        .cboDruckumfang.AddItem "Suchtitel"
        .cboDruckumfang.AddItem "Alternativtext"
        .cboDruckumfang.Value = "Normaltext"
        
        .cboSummenbildung.AddItem "Kap./Teilkap/Zusammenst"
        .cboSummenbildung.AddItem "Kapitel/Teilkap."
        .cboSummenbildung.AddItem "Nur Kapitel"
        .cboSummenbildung.AddItem "Nur Positionen"
        .cboSummenbildung.AddItem "Nur Summen"
        .cboSummenbildung.Value = "Kap./Teilkap/Zusammenst"
        Call Fill_Sort_Combos
        .txtVon.Text = "01.01.1001"
        .txtBis.Text = "99.99.9999"
    End With
    
    dq.ProjectGetName Filepath
    db.strPathChangeExt TMPPfad, Filepath, ".mds"
    If db.ioFileExist(TMPPfad) = True Then
        thMDS = db.TableOpenExt(TMPPfad, "", 0)
        With frmPrintDialog_DQ
            Call Fill_KapitelCombo
            Call Fill_Gliederungs_Combos
            '.chkESRDrucken.Value = Len(Trim(db.GetFieldValue(thMDS, 0, "ESR_PRINT")))
            .chkGliederung.Value = Len(Trim(db.getfieldvalue(thMDS, 0, "GLIEDERUNG")))
            .chkAusmass.Value = Len(Trim(db.getfieldvalue(thMDS, 0, "AUSMASSE")))
            .chkVorausmass.Value = Len(Trim(db.getfieldvalue(thMDS, 0, "VORMASS")))
            
            .chkVorbemloeschen.Value = Len(Trim(db.getfieldvalue(thMDS, 0, "REM_REMARK")))
            .chkKeinDekblatt.Value = Len(Trim(db.getfieldvalue(thMDS, 0, "REM_TITLE")))
            .chkKonditionsbezug.Value = Len(Trim(db.getfieldvalue(thMDS, 0, "KOND_BEZ")))
            .chkNurSummen.Value = Len(Trim(db.getfieldvalue(thMDS, 0, "SUMS_ONLY")))
        End With
        db.tableclose thMDS
    End If
End Sub

Private Sub Fill_KapitelCombo()    ' Public
    Dim Filepath As String
    Dim DqpDatei As String
    Dim i As Integer
    
    dq.ProjectGetName Filepath
    db.strPathChangeExt DqpDatei, Filepath, ".dqp"
    thGRK = db.TableOpenExt(DqpDatei, "", 0)
    frmPrintDialog_DQ.cboKapitel.AddItem "0:Alle Kapitel"
    For i = 0 To db.GetRecordCount(thGRK) - 1
        If db.FieldIsEmpty(thGRK, i, "GRK") = False Then
            frmPrintDialog_DQ.cboKapitel.AddItem CStr(i + 1) & ":" & Trim(db.getfieldvalue(thGRK, i, "GRK"))
        End If
    Next i
    frmPrintDialog_DQ.cboKapitel.Value = "0:Alle Kapitel"
End Sub

Private Sub Fill_Gliederungs_Combos()
    Dim thDQO As Long
    Dim thQuery As Long
    Dim Count As String
    Dim i As Long
    Dim j As Long
    
    Dim Feldliste(1 To 8) As String
    Dim AlterEintrag As String
    
    Feldliste(1) = "KAT"
    Feldliste(2) = "OBJEKT_1"
    Feldliste(3) = "OBJEKT_2"
    Feldliste(4) = "OBJEKT_3"
    Feldliste(5) = "KAG"
    Feldliste(6) = "ELEMENT"
    Feldliste(7) = "EINRTYP"
    Feldliste(8) = "NACHTRAG"
        
    thDQO = db.TableOpenExt(db.DirRoot() & "\ExcelPrint\Faktura.dqo", "", 0)
    If db.GetRecordCount(thDQO) > 0 Then
        For i = 1 To 8
            thQuery = db.OpenQueryDB(thDQO, "SELECT " & Feldliste(i) & " ORDER BY " & Feldliste(i))
            Count = db.GetRecordCount(thQuery) - 1
            For j = 0 To Count
                If AlterEintrag <> Trim(db.getfieldvalue(thQuery, j, Feldliste(i))) And Trim(db.getfieldvalue(thQuery, j, Feldliste(i))) <> "" Then
                    AlterEintrag = Trim(db.getfieldvalue(thQuery, j, Feldliste(i)))
                    If i = 1 Then frmPrintDialog_DQ.cboKategorie.AddItem AlterEintrag
                    If i = 2 Then frmPrintDialog_DQ.cboObjekt.AddItem AlterEintrag
                    If i = 3 Then frmPrintDialog_DQ.cboPoslage.AddItem AlterEintrag
                    If i = 4 Then frmPrintDialog_DQ.cboVariante.AddItem AlterEintrag
                    If i = 5 Then frmPrintDialog_DQ.cboKAG.AddItem AlterEintrag
                    If i = 6 Then frmPrintDialog_DQ.cboElementcode.AddItem AlterEintrag
                    If i = 7 Then frmPrintDialog_DQ.cboEinrichtungstyp.AddItem AlterEintrag
                    If i = 8 Then frmPrintDialog_DQ.cboNachtrag.AddItem AlterEintrag
                End If
            Next j
            db.CloseQueryDB thQuery
        Next i
    End If
    db.tableclose thDQO
End Sub

Private Sub Fill_Sort_Combos()
    Dim Feldliste(1 To 5) As String
    Dim i As Long
    
    Feldliste(1) = "Kapitel"
    Feldliste(2) = "Objekt"
    Feldliste(3) = "KAG"
    Feldliste(4) = "Element"
    Feldliste(5) = "Varianten"
    
    For i = 1 To 5
        frmPrintDialog_DQ.cboSort.AddItem Feldliste(i)
    Next i
    
    frmPrintDialog_DQ.cboSort.Text = Feldliste(1)
End Sub

Private Sub Read_CQPrintsettings()    ' Public
    Dim thCQList As Long
    Dim TMPZuschlag As String
    Dim TMPSplit() As String
    
    If db.ioFileExist(db.DirRoot() & "\CQKList.dbf") = True Then
        thCQList = db.TableOpenExt(db.DirRoot() & "\CQKList.dbf", "", 0)
        With frmPrintDialog_DQ
            .txtMindestbetrag.Text = Trim(db.getfieldvalue(thCQList, 0, "MIN_RESR"))
            .txtProzent.Text = Trim(db.getfieldvalue(thCQList, 0, "MIN_PROZ"))
            .chkAllePositionen.Value = Len(Trim(db.getfieldvalue(thCQList, 0, "ALLE_POS")))
            .chkKostenelemente.Value = Len(Trim(db.getfieldvalue(thCQList, 0, "KELEM")))
            .chkZuschlaege.Value = Len(Trim(db.getfieldvalue(thCQList, 0, "ZUSCHL")))
            .chkKapitelsummen.Value = Len(Trim(db.getfieldvalue(thCQList, 0, "KAP_SUM")))
            .chkNurKapitel.Value = Len(Trim(db.getfieldvalue(thCQList, 0, "KAP_ONLY")))
            .chkNichtkalkPos.Value = Len(Trim(db.getfieldvalue(thCQList, 0, "NOT_CALC")))
            .chkNurPositionen.Value = Len(Trim(db.getfieldvalue(thCQList, 0, "POS_ONLY")))
            .optnachPositionsNummern.Value = Len(Trim(db.getfieldvalue(thCQList, 0, "IDX_POSNR")))
            .optnachResultat.Value = Len(Trim(db.getfieldvalue(thCQList, 0, "IDX_RES")))
'            .optnachLohnstunden.Value = Len(Trim(db.GetFieldValue(thCQList, 0, "IDX_LVAL")))
            Call Fill_Zuschlags_Combo
            TMPZuschlag = Trim(db.getfieldvalue(thCQList, 0, "PRINT_ZUS"))
            TMPSplit = Split(TMPZuschlag, "::")
            If UBound(TMPSplit) > 0 Then
                .cboZuschlaege.Value = TMPSplit(1)
            Else
                .cboZuschlaege.Value = "Nur gesamt"
            End If
        End With
        db.tableclose thCQList
    End If
End Sub

Private Sub Fill_Zuschlags_Combo()    ' Public
    Dim i As Integer
    With frmPrintDialog_DQ
        .cboZuschlaege.AddItem ("Nur gesamt")
        .cboZuschlaege.AddItem ("Alle drucken")
        For i = 1 To 10
            .cboZuschlaege.AddItem ("Zuschlag" & CStr(i))
        Next i
    End With
End Sub

Public Sub Read_KV_WV_Variabel_Popups()
    Dim thVwv As Long
    Dim ArrPopupValues() As String
    Dim i As Long
    Dim j As Long
    Dim Count As Long
    Dim NewObject As Control
    Dim NewObjectTitle As Control
    Dim Zeile As Double
    Dim Spalte As Double
    
    ' DFL    Public Type mit Feldwerten (Enth|fffd|lt momentan nur VWV-Felder)
    ReDim DFL(0)
        
    thVwv = db.TableOpenExt(db.DirRoot() & "\ExcelPrint\Faktura.vwv", "", 0)
    
    Count = ActiveSheet.Shapes.Count
    For i = 1 To Count
        If Count < i Then Exit For
        Split_DB = Split(ActiveSheet.Shapes(i).Name, "_")
        If UBound(Split_DB) > 0 Then
            If UCase(Split_DB(0)) = "VWV" Then
                If DFL(UBound(DFL)).Feldname <> "" Then ReDim Preserve DFL(UBound(DFL) + 1)
                DFL(UBound(DFL)).Feldname = ""
                For j = 1 To UBound(Split_DB)
                    If DFL(UBound(DFL)).Feldname <> "" Then DFL(UBound(DFL)).Feldname = DFL(UBound(DFL)).Feldname & "_"
                    DFL(UBound(DFL)).Feldname = DFL(UBound(DFL)).Feldname & Split_DB(j)
                Next j
                db.GetFieldInfo thVwv, DFL(UBound(DFL)).Feldname, DFL(UBound(DFL)).TYPENAME, DFL(UBound(DFL)).FELDLEN, DFL(UBound(DFL)).DECIMALS, DFL(UBound(DFL)).EXTYPE
                db.GetFieldTitleByName thVwv, DFL(UBound(DFL)).Feldname, DFL(UBound(DFL)).Feldtitel
            End If
        End If
    Next i
    
    If UBound(DFL) >= 0 And DFL(0).Feldname <> "" Then
        With frmPrintDialog_DQ.Controls("MPDruckeinstellungen").Pages("Page6")
            Zeile = 12
            For i = 0 To UBound(DFL)
                Select Case UCase(DFL(i).EXTYPE)
                Case "POPUP"
                    Set NewObjectTitle = .Controls.Add("Forms.Label.1", "l" & DFL(i).Feldname, Visible)
                    NewObjectTitle.Left = 6
                    NewObjectTitle.Top = Zeile + 6
                    NewObjectTitle.Height = 12
                    NewObjectTitle.Width = 75
                    NewObjectTitle.Caption = DFL(i).Feldtitel
                    Set NewObjectTitle = Nothing
                    
                    Set NewObject = .Controls.Add("Forms.ComboBox.1", "cbo" & DFL(i).Feldname, Visible)
                    NewObject.Left = 80
                    NewObject.Top = Zeile
                    NewObject.Height = 15.75
                    NewObject.Width = 110
                    Set NewObject = Nothing
                    
                    Call Read_Combo_Eintr|fffd|ge(thVwv, DFL(i).Feldname, ArrPopupValues)
                    For j = 0 To UBound(ArrPopupValues)
                        ' Hier muss auf das ner erstellte Object zugegriffen werden.
                        .Controls("cbo" & DFL(i).Feldname).AddItem ArrPopupValues(j)
                    Next j
                Case Else
                    Set NewObjectTitle = .Controls.Add("Forms.Label.1", "l" & DFL(i).Feldname, Visible)
                    NewObjectTitle.Left = 6
                    NewObjectTitle.Top = Zeile + 6
                    NewObjectTitle.Height = 12
                    NewObjectTitle.Width = 75
                    NewObjectTitle.Caption = DFL(i).Feldtitel
                    Set NewObjectTitle = Nothing
                    
                    Set NewObject = .Controls.Add("Forms.TextBox.1", "txt" & DFL(i).Feldname, Visible)
                    NewObject.Left = 80
                    NewObject.Top = Zeile
                    NewObject.Height = 15.75
                    NewObject.Width = 110
                    NewObject.Text = Trim(db.getfieldvalue(thVwv, 0, DFL(i).Feldname))
                    Set NewObject = Nothing
                End Select
                Zeile = Zeile + 18
            Next i
        End With
    End If
    
    db.tableclose thVwv
    Call Read_KVWV_Values
End Sub

Public Sub Read_KVWV_Values()
    Dim thVwv As Long
    Dim TMPVwvPfad As String
    Dim i As Long
        
    If ProjektPfad <> "" Then
        db.strPathChangeExt TMPVwvPfad, ProjektPfad, ".vwv"
        If db.ioFileExist(TMPVwvPfad) Then
            thVwv = db.tableopen(TMPVwvPfad)
            With frmPrintDialog_DQ.Controls("MPDruckeinstellungen").Pages("Page6")
                For i = 0 To UBound(DFL)
                    If DFL(i).Feldname <> "" Then
                        If Left(DFL(i).Feldname, 5) <> "RECH_" And Left(DFL(i).Feldname, 4) <> "REF_" Then
                            Select Case UCase(DFL(i).EXTYPE)
                            Case "POPUP"
                                .Controls("cbo" & DFL(i).Feldname).Value = Trim(db.getfieldvalue(thVwv, 0, DFL(i).Feldname))
                            Case Else
                                .Controls("txt" & DFL(i).Feldname).Value = Trim(db.getfieldvalue(thVwv, 0, DFL(i).Feldname))
                            End Select
                        End If
                    End If
                Next i
            End With
            db.tableclose thVwv
        End If
    End If
End Sub

Public Sub Read_Combo_Eintr|fffd|ge(TableHandle As Long, Feldname As String, ArrPopupValues() As String)
    Dim ComboEintrag As String
    Dim SplitCombo() As String
    Dim FeldNr As Long
    
    ReDim ArrPopupValues(0)
    
    FeldNr = db.GetFieldNr(TableHandle, Feldname)
    db.ComboGetFirst TableHandle, 0, FeldNr, ComboEintrag
    If Trim(ComboEintrag) <> "" Then
        SplitCombo = Split(ComboEintrag, "::")
        ArrPopupValues(UBound(ArrPopupValues)) = Trim(SplitCombo(0))
        db.ComboGetNext TableHandle, ComboEintrag
        Do While Trim(ComboEintrag) <> ""
            SplitCombo = Split(ComboEintrag, "::")
            If ArrPopupValues(UBound(ArrPopupValues)) <> "" Then ReDim Preserve ArrPopupValues(UBound(ArrPopupValues) + 1)
            ArrPopupValues(UBound(ArrPopupValues)) = Trim(SplitCombo(0))
            db.ComboGetNext TableHandle, ComboEintrag
        Loop
    End If
End Sub
Attribute VB_Name = "modDefinition_Sheets"
Public Sub Define_Sheet_For_Edit()
    '**********************************************
    ' Das Titelblatt wird f|fffd|r das Erstellen
    ' neuer Vorlagen eingerichtet:
    '**********************************************
    Call Fill_Files
    Call Fill_Adressen
    Call Read_Variabellisten_For_Edit(ActiveSheet.Files.Text)
    Call Read_Variabellisten_For_Edit("Adressdefinition")
    'Call Erase_All_Gridlines
End Sub

Public Sub Define_Titel_Sheet()
    If ErrorHandler = True Then On Error GoTo errHandler
    Select Case Druck_Type
    Case "Kalkulationsliste"
        With eSheet
            '*****************************************************************************************
            ' Spaltenformatierungen festlegen
            '*****************************************************************************************
            .Cells.Select
            Call Set_Font_Format("Standard")
            .Columns("A:A").NumberFormat = "@"
            .Columns("A:A").HorizontalAlignment = xlRight
            .Columns("B:B").NumberFormat = "@"
            .Columns("B:B").HorizontalAlignment = xlRight
            .Columns("C:C").NumberFormat = "@"
            .Columns("C:C").HorizontalAlignment = xlRight
            .Columns("F:F").NumberFormat = "0.000"      ' Als Zahl mit 3 Kommastellen definieren
            .Columns("G:G").NumberFormat = "#,##0.00"   ' Einheitspreis als W|fffd|hrungsfeld definieren
            .Columns("I:I").NumberFormat = "#,##0.00"   ' Resultat als W|fffd|hrungsfeld definieren
        End With
    Case Else
    End Select
    Exit Sub
errHandler:
    On Error Resume Next
End Sub

Public Sub Define_Detail_Sheet()
    If ErrorHandler = True Then On Error GoTo errHandler
    Select Case Druck_Type
    Case "Kalkulationsliste"
        With eSheet
            '*****************************************************************************************
            ' Spaltenformatierungen festlegen
            '*****************************************************************************************
            .Cells.Select
            Call Set_Font_Format("Standard")
            .Columns("A:A").NumberFormat = "@"
            .Columns("A:A").HorizontalAlignment = xlRight
            .Columns("B:B").NumberFormat = "@"
            .Columns("B:B").HorizontalAlignment = xlRight
            .Columns("C:C").NumberFormat = "@"
            .Columns("C:C").HorizontalAlignment = xlRight
            .Columns("F:F").NumberFormat = "0.000"      ' Als Zahl mit 3 Kommastellen definieren
            .Columns("G:G").NumberFormat = "#,##0.00"   ' Einheitspreis als W|fffd|hrungsfeld definieren
            .Columns("I:I").NumberFormat = "#,##0.00"   ' Resultat als W|fffd|hrungsfeld definieren
        End With
    Case Else
    End Select
    Exit Sub
errHandler:
    On Error Resume Next
End Sub

Public Sub Define_Header_Detail_Sheet()
    Dim Split_Projekt() As String
    
    If ProjektPfad <> "" Then
        Split_Projekt = Split(ProjektPfad, "\")
        ProjektName = Split_Projekt(UBound(Split_Projekt) - 1)
    End If

    With eSheet
        .Range("A1:D1").Select
        Call Set_Font_Format("Master")
        
        .Range("D1").Value = ProjektName & " / " & Proj.Beschreibung
        .Range("A2:D2").Select
        Call Set_Font_Format("Kapitel")
        
        .Range("D2").Value = Offertsumme
        .Range("D2").HorizontalAlignment = xlLeft
        .Range("D2").NumberFormat = "#,##0.00"   ' Resultat als W|fffd|hrungsfeld definieren
        
        .Range("A3:I3").Merge
        .Range("A3").HorizontalAlignment = xlLeft
        .Range("A3").Value = "Gliederung: " & Get_Gliederung_Daten
        .Range("A3").Select
        Call Set_Font_Format("Memofeld")
        
        .Range("I1").Value = Date
        .Range("I1").NumberFormat = "dd/mm/yyyy;@"
        .Range("I1").Select
        Call Set_Font_Format("Teilkapitel")
    End With
End Sub

Public Sub Define_Kapitelsummen_Daten()
    If ErrorHandler = True Then On Error GoTo errHandler
    With eSheet
        '*****************************************************************************************
        ' Spaltenformatierungen festlegen
        '*****************************************************************************************
        .Cells.Select
        Call Set_Font_Format("Standard")
        
        .Range("A1").Value = "GRK"
        .Range("B1").Value = "Kapitel"
        .Range("C1").Value = "Teilkapitel"
        .Range("D1").Value = "Objekt"
        .Range("E1").Value = "Resultat"
        .Range("F1").Value = "Anteil"
        .Range("G1").Value = "Lohn h"
        .Range("H1").Value = "Lohnk."
        .Range("I1").Value = "Materialk."
        .Range("J1").Value = "Inventark."
        .Range("K1").Value = "Fremdl."
        
        .Columns("A:A").NumberFormat = "@"              ' Grundkatalog as Text definieren
        .Columns("A:A").HorizontalAlignment = xlLeft    ' Text Linksb|fffd|ndig
        .Columns("B:B").NumberFormat = "@"              ' Kapitel as Text definieren
        .Columns("B:B").HorizontalAlignment = xlLeft    ' Text Linksb|fffd|ndig
        .Columns("C:C").NumberFormat = "@"              ' Teilkapitel as Text definieren
        .Columns("C:C").HorizontalAlignment = xlLeft    ' Text Linksb|fffd|ndig
        .Columns("D:D").NumberFormat = "@"              ' Objekt as Text definieren
        .Columns("D:D").HorizontalAlignment = xlLeft    ' Text Linksb|fffd|ndig
        
        .Columns("E:E").NumberFormat = "#,##0.00"       ' Resultat als W|fffd|hrungsfeld definieren
        .Columns("F:F").NumberFormat = "0.00%"          ' Anteil als Prozent definieren mit 2 Kommastellen
        .Columns("G:G").NumberFormat = "0.000"          ' Lohnstunden mit 3 Kommastellen formatieren
        .Columns("H:H").NumberFormat = "#,##0.00"       ' Lohnkosten als W|fffd|hrungsfeld definieren
        .Columns("I:I").NumberFormat = "#,##0.00"       ' Materialkosten als W|fffd|hrungsfeld definieren
        .Columns("J:J").NumberFormat = "#,##0.00"       ' Inventarkosten als W|fffd|hrungsfeld definieren
        .Columns("K:K").NumberFormat = "#,##0.00"       ' Fremdleistungen als W|fffd|hrungsfeld definieren
    End With
    Set eSheet = Exl.Sheets("Kapitelsummen")
    eSheet.Activate
    With eSheet.PageSetup
        .Orientation = xlLandscape
        .LeftMargin = Application.InchesToPoints(0)
        .RightMargin = Application.InchesToPoints(0)
        .TopMargin = Application.InchesToPoints(0.5)
        .BottomMargin = Application.InchesToPoints(0.5)
        .HeaderMargin = Application.InchesToPoints(0)
        .FooterMargin = Application.InchesToPoints(0)
    End With
    Exit Sub
errHandler:
    On Error Resume Next
End Sub
Attribute VB_Name = "modDevisprint"
Public Sub Start_Devisprint_DQ()
    Call Create_Faktura_Tables_DQ
    Call Print_Adressen
    CurrentLine = 10
    CurrentPage = 1
    ReDim GLSumme(0)                        ' Wird f|fffd|r die Gliederungssumme ben|fffd|tigt.
    Exl.Visible = ExcelSichtbar
    Exl.StatusBar = StatusText
    Exl.ScreenUpdating = ExcelScreenUpdate
'*********************************************************************
' Detailseiten drucken.
'*********************************************************************
    If frmPrintDialog_DQ.chkTitelblattOnly.Value = False Then
        Set eSheet = Exl.Sheets.Item("Details")         ' Details von Ausdruck
        eSheet.Activate
        Offertsumme = Get_Offertsumme
        Call Define_Detail_Sheet
        Call Define_Header_Detail_Sheet
        Call Print_Daten
    '*********************************************************************
    ' Alle Tempor|fffd|ren Daten in Sheet l|fffd|schen (Zwischensumme)
    '*********************************************************************
        eSheet.Range("K:M").Delete
        eSheet.Columns("L:N").Select
        Selection.EntireColumn.Hidden = True
        eSheet.Range("A1").Activate
    Else
        Set eSheet = Exl.Sheets.Item("Details")         ' Details von Ausdruck
        eSheet.Activate
        eSheet.Visible = xlSheetHidden
    End If
    db.tableclose thSIVKLC
    db.tableclose thSIVPOS
'*********************************************************************
' Die Titelseite wird erste am Schluss gedruckt, damit eventuelle
' Daten w|fffd|hrend dem Ausdruck noch berechnet werden k|fffd|nnten.
'*********************************************************************
    Set eSheet = Exl.Sheets.Item("Titelblatt")         ' Titelblatt von Ausdruck
    eSheet.Activate
    Call Define_Titel_Sheet
'    Call Print_Adressen
    Call Print_Titelblatt
'*********************************************************************
' Alle Tempor|fffd|ren Daten in Sheet l|fffd|schen
' (Daten, die Tom f|fffd|r seine Berechnungen ben|fffd|tigt.)
'*********************************************************************
    eSheet.Columns("N:Q").Select
    Selection.EntireColumn.Hidden = True
'*********************************************************************
' Alle Gitterlinien entfernen
'*********************************************************************
    Call Erase_All_Gridlines
    
'   Mit Hilfe dieses Abschnittes kann das Detailsheet gesperrt werden.
'   Wird dieser Abschnitt aktiviert, so kann nicht mehr gruppiert werden.
'    Set eSheet = Exl.Sheets.Item("Details")         ' Details von Ausdruck
'    eSheet.Activate
'    eSheet.Protect Password:="Joshua", DrawingObjects:=True, Contents:=True, Scenarios:=True
    
    db.tableclose thFaktura
    db.tableclose thAusmass
    db.tableclose thKLC
    db.tableclose thGRK
    Call Delete_Faktura_Tables
End Sub

Public Sub Create_Faktura_Tables_DQ()
'    Dim Ausmass As Boolean
'    Dim Vorausmass As Boolean
    Dim KurzText As Boolean
    Dim LangText As Boolean
    Dim SuchTitel As Boolean
    Dim AlternativText As Boolean
    Dim Sel_Kapitel As String
    Dim All_Kapitel As String
    Dim Not_Print_Kapitel As String
    
    KurzText = False
    LangText = False
    SuchTitel = False
    AlternativText = False
    If frmPrintDialog_DQ.cboDruckumfang.Value = "Kurztext" Then KurzText = True
    If frmPrintDialog_DQ.cboDruckumfang.Value = "Normaltext" Then LangText = True
    If frmPrintDialog_DQ.cboDruckumfang.Value = "Suchtitel" Then SuchTitel = True
    If frmPrintDialog_DQ.cboDruckumfang.Value = "Alternativtext" Then AlternativText = True
    
    If KurzText = False And LangText = False And SuchTitel = False And AlternativText = False Then
        LangText = True
    End If
    
    If Trim(frmPrintDialog_DQ.txtKapitel.Text) = "" Then frmPrintDialog_DQ.txtKapitel.Text = "0:Alle Kapitel"
    If frmPrintDialog_DQ.txtKapitel.Text <> "0:Alle Kapitel" Then
        All_Kapitel = Read_All_Kapitel()
        Sel_Kapitel = frmPrintDialog_DQ.txtKapitel.Text
        Not_Print_Kapitel = Get_Not_Selected_Kapitel(All_Kapitel, Sel_Kapitel)
        Call Update_DQP(Not_Print_Kapitel)
    Else
        Call Update_DQP(frmPrintDialog_DQ.txtKapitel.Text)
    End If
    
    dq.QueryFakturaCreate True, frmPrintDialog_DQ.chkAllePositionen.Value, frmPrintDialog_DQ.chkVerbuchtePositionen.Value, frmPrintDialog_DQ.txtKategorie.Value, frmPrintDialog_DQ.txtObjekt.Text, frmPrintDialog_DQ.txtPosLage.Value, _
                          frmPrintDialog_DQ.txtVariante.Value, frmPrintDialog_DQ.txtKAG.Value, frmPrintDialog_DQ.txtElementcode.Value, _
                          frmPrintDialog_DQ.txtEinrichtungstyp.Value, "", frmPrintDialog_DQ.txtNachtrag.Value, _
                          frmPrintDialog_DQ.txtVon.Text, frmPrintDialog_DQ.txtBis.Text, "", frmPrintDialog_DQ.txtAbPosNr.Text, _
                          frmPrintDialog_DQ.txtBisPosNr.Text, Not_Print_Kapitel, False
    If frmPrintDialog_DQ.chkAusmass.Value = True Or frmPrintDialog_DQ.chkVorausmass.Value = True Then
        dq.QueryFakturaGliederungsFlags frmPrintDialog_DQ.chkAusmass.Value, frmPrintDialog_DQ.chkVorausmass.Value, frmPrintDialog_DQ.chkAllePositionen.Value, True, frmPrintDialog_DQ.chkPosohneResult.Value
    End If
    
    dq.QueryFakturaExecute True, False, False, False, False, True, False, False, False, frmPrintDialog_DQ.chkNurSummen.Value, LangText, KurzText, SuchTitel, AlternativText
    dq.QueryFakturaHandles thFaktura, thAusmass, thKLC, thGRK
    thSIVKLC = db.tableopen(db.DirRoot() & "\Excelprint\Faktura.sivklc")
    thSIVPOS = db.tableopen(db.DirRoot() & "\Excelprint\Faktura.sivpos")
End Sub

Public Sub Update_DQP(Kapitel As String)
    Dim thKapitelDQP As Long
    Dim DQPCount As Long
    Dim SplitKapitel() As String
    Dim SplitKapitelNR() As String
    Dim GRKNr As Long
    Dim i As Long
    
    If db.ioFileExist(db.DirRoot() & "\Excelprint\Faktura.dqp") = True Then
        thKapitelDQP = db.tableopen(db.DirRoot() & "\Excelprint\Faktura.dqp")
        db.TableSetIndex thKapitelDQP, "GRK"
        
        If Kapitel = "0:Alle Kapitel" Then
            If db.GetRecordCount(thKapitelDQP) > 0 Then
                ' Alle Kapitel f|fffd|r Ausdruck setzten.
                DQPCount = db.GetRecordCount(thKapitelDQP) - 1
                For i = 0 To DQPCount
                    db.SetFieldBool thKapitelDQP, i, "NO_PRINT", False
                Next i
            End If
        Else
            If db.GetRecordCount(thKapitelDQP) > 0 Then
                ' Alle Kapitel f|fffd|r Ausdruck setzten.
                DQPCount = db.GetRecordCount(thKapitelDQP) - 1
                For i = 0 To DQPCount
                    db.SetFieldBool thKapitelDQP, i, "NO_PRINT", False
                Next i
                
                SplitKapitel = Split(Kapitel, ",")
                For i = 0 To UBound(SplitKapitel)
                    SplitKapitelNR = Split(SplitKapitel(i), ":")
                    GRKNr = CLng(SplitKapitelNR(0)) - 1
                    If GRKNr >= 0 Then
                        db.SetFieldBool thKapitelDQP, GRKNr, "NO_PRINT", True
                    End If
                Next i
            End If
        End If
        db.tableclose thKapitelDQP
    End If
End Sub

Public Sub Print_Adressen()
    Dim Ref_maxLen As Long
    Dim Rech_maxLen As Long
    Dim Filepath As String
    Dim VwvDatei As String
    
    dq.ProjectGetName Filepath
    db.strPathChangeExt VwvDatei, Filepath, ".vwv"

    thAdressen = db.TableOpenExt(VwvDatei, "", 0)
    Call Read_Proj_Infos(thAdressen)
    db.tableclose thAdressen
End Sub

Public Sub Draw_KLCTable_Summen(Code As String, StartSummen As Long, Zuschlag As Double, Optional Total As Boolean = False)
    Static TableSumme As Double
    Dim TMPSummeexlk As Double
    Dim TMPSummeinkl As Double
    TMPSummeexlk = 0
    TMPSummeinkl = 0
    
    If eSheet.Range("A" & StartSummen) = "A" Then Exit Sub
    
    With eSheet
        .Range("A" & StartSummen & ":J" & CurrentLine - 1).Select
        Exl.Selection.Rows.Group
        
        .Range("A" & CurrentLine & ":C" & CurrentLine).Merge
        .Range("H" & CurrentLine & ":I" & CurrentLine).Merge
'        .Range("H" & CurrentLine).NumberFormat = "#,##0.00000"
        .Range("H" & CurrentLine).NumberFormat = "#,##0.00"
        Select Case Code        ' Summen f|fffd|r Basis drucken
        Case "L", "l"
            .Range("D" & CurrentLine).Value = "Summe Lohn"
        Case "M", "m"
            .Range("D" & CurrentLine).Value = "Summe Material"
        Case "I", "i"
            .Range("D" & CurrentLine).Value = "Summe Inventar"
        Case "F", "f"
            .Range("D" & CurrentLine).Value = "Summe Fremdleistung"
        Case "H", "h", "R", "r"
            .Range("D" & CurrentLine).Value = "Summe suissetec Material"
        End Select
        For i = StartSummen To CurrentLine - 1
            If .Range("H" & i).Value <> "" Then
                If .Range("A" & i).Value <> "A" Then
                    TMPSummeexlk = TMPSummeexlk + CDbl(.Range("H" & i).Value)
                End If
            End If
        Next i
        .Range("H" & CurrentLine).FormulaLocal = "=RUNDEN(" & TMPSummeexlk & "*20;0)/20"
        CurrentLine = CurrentLine + 1
        .Range("A" & CurrentLine & ":C" & CurrentLine).Merge
        .Range("H" & CurrentLine & ":I" & CurrentLine).Merge
'        .Range("H" & CurrentLine).NumberFormat = "#,##0.00000"
        .Range("H" & CurrentLine).NumberFormat = "#,##0.00"
        ' Summen f|fffd|r Zuschl|fffd|ge drucken
        .Range("D" & CurrentLine).Value = "Kalkulationszuschlag"
        .Range("H" & CurrentLine).Value = Zuschlag
        
        '********************************
        ' Schriftart setzen
        '********************************
        .Range("A" & CurrentLine - 1 & ":J" & CurrentLine).Select
        Call Set_Font_Format("Zwischensumme")
        
        
        CurrentLine = CurrentLine + 1
        .Range("A" & CurrentLine & ":C" & CurrentLine).Merge
        .Range("H" & CurrentLine & ":I" & CurrentLine).Merge
'        .Range("H" & CurrentLine).NumberFormat = "#,##0.00000"
        .Range("H" & CurrentLine).NumberFormat = "#,##0.00"
        Select Case Code        ' Summen f|fffd|r Total Detailtabelle drucken
        Case "L", "l"
            .Range("D" & CurrentLine).Value = "Total Lohn"
        Case "M", "m"
            .Range("D" & CurrentLine).Value = "Total Material"
        Case "I", "i"
            .Range("D" & CurrentLine).Value = "Total Inventar"
        Case "F", "f"
            .Range("D" & CurrentLine).Value = "Total Fremdleistung"
        Case "H", "h", "R", "r"
            .Range("D" & CurrentLine).Value = "Total suissetec Material"
        End Select
        TMPSummeinkl = TMPSummeexlk + Zuschlag
        .Range("H" & CurrentLine).FormulaLocal = "=RUNDEN(" & TMPSummeinkl & "*20;0)/20"
        .Range("A" & CurrentLine & ":J" & CurrentLine).Select
        Call Set_Font_Format("Summen")
        TableSumme = TableSumme + TMPSummeinkl
        
        .Range("A" & CurrentLine - 2 & ":I" & CurrentLine).Select
        Call ExcelDraw_Rahmen(Exl, Grid:=True, HorizontalGrid:=True, VerticalGrid:=True)
        
        ReDim Preserve ArrGattung(UBound(ArrGattung) + 1)
        ArrGattung(UBound(ArrGattung)) = CurrentLine - 1
        
        If Total = True Then
            CurrentLine = CurrentLine + 1
            .Range("A" & CurrentLine & ":C" & CurrentLine).Merge
            .Range("H" & CurrentLine & ":I" & CurrentLine).Merge
'            .Range("H" & CurrentLine).NumberFormat = "#,##0.00000"
            .Range("H" & CurrentLine).NumberFormat = "#,##0.00"
            .Range("D" & CurrentLine).Value = "Gesammttotal Position"
            .Range("H" & CurrentLine).FormulaLocal = "=RUNDEN(" & TableSumme & "*20;0)/20"
            .Range("A" & CurrentLine & ":J" & CurrentLine).Select
            Call Set_Font_Format("Summen")
            .Range("A" & CurrentLine & ":I" & CurrentLine).Select
            Call ExcelDraw_Rahmen(Exl, Grid:=True, VerticalGrid:=True)
            TableSumme = 0
            '********************************
            ' Gruppierungen setzten
            '********************************
            ' Gesammte Tabelle Gruppieren
'            .Range("A" & ArrGattung(0) & ":J" & CurrentLine - 1).Select
'            Exl.Selection.Rows.Group
            For i = 1 To UBound(ArrGattung) Step 2
                If .Range("A" & ArrGattung(i - 1)).Value <> "A" Then
                    .Range("A" & ArrGattung(i - 1) & ":J" & ArrGattung(i)).Select
                Else
                    .Range("A" & ArrGattung(i - 1) + 1 & ":J" & ArrGattung(i)).Select
                End If
                Exl.Selection.Rows.Group
            Next i
        Else
            ReDim Preserve ArrGattung(UBound(ArrGattung) + 1)
            ArrGattung(UBound(ArrGattung)) = CurrentLine + 1
        End If
    End With
End Sub

Public Sub Write_Settings(frmPrint As UserForm)
'    db.ComponentSettingsWriteInteger "DEVISPRINT", "ohne_Seitenumbruch", CLng(frmPrint.chkohneSeitenumbruch.Value) * -1
    db.ComponentSettingsWriteInteger "DEVISPRINT", "inkl_Zwischensumme", CLng(frmPrint.chkinklZwischensumme.Value) * -1
    db.ComponentSettingsWriteInteger "DEVISPRINT", "Leistungspos_mit_POSNR", CLng(frmPrint.chkAlleHPOS.Value) * -1
    db.ComponentSettingsWriteInteger "DEVISPRINT", "Leistungspos_mit_Kapitel_POSNR", CLng(frmPrint.chkKapitel_HPOS.Value) * -1
End Sub

Public Sub Read_Settings(frmPrint As UserForm)
'    frmPrint.chkohneSeitenumbruch.Value = db.ComponentSettingsReadInteger("DEVISPRINT", "ohne_Seitenumbruch", 0)
    frmPrint.chkinklZwischensumme.Value = db.ComponentSettingsReadInteger("DEVISPRINT", "inkl_Zwischensumme", 0)
    frmPrint.chkAlleHPOS.Value = db.ComponentSettingsReadInteger("DEVISPRINT", "Leistungspos_mit_POSNR", 0)
    frmPrint.chkKapitel_HPOS.Value = db.ComponentSettingsReadInteger("DEVISPRINT", "Leistungspos_mit_Kapitel_POSNR", 0)

    DruckLayout = db.ComponentSettingsReadString("DEVISPRINT", "Drucktype", "")
    DruckVorlage = db.ComponentSettingsReadString("DEVISPRINT", "Druckvorlage", "")
End Sub

Public Sub Read_KLC_Print_Settings()
    Dim thCQKList As Long
    If db.ioFileExist(db.DirRoot & "\DQ\CQKList.dbf") = True Then
        thCQKList = db.tableopen(db.DirRoot & "\DQ\CQKList.dbf")
        If db.GetRecordCount(thCQKList) > 0 Then
            With frmPrintDialog_DQ
                .optnachPositionsNummern.Value = Len(Trim(db.getfieldvalue(thCQKList, 0, "IDX_POSNR")))
                .optnachResultat.Value = Len(Trim(db.getfieldvalue(thCQKList, 0, "IDX_RES")))
'                .optnachLohnstunden.Value = Len(Trim(db.GetFieldValue(thCQKList, 0, "IDX_LVAL")))
                .txtMindestbetrag.Text = Trim(db.getfieldvalue(thCQKList, 0, "MIN_RES"))
                .txtProzent.Text = Trim(db.getfieldvalue(thCQKList, 0, "MIN_PROZ"))
'                .chkKostenelemente.Value = db.GetFieldBool(thCQKList, 0, "KELEM")
'                .chkZuschlaege.Value = db.GetFieldBool(thCQKList, 0, "ZUSCHL")
'                .chkNichtkalkPos.Value = db.GetFieldBool(thCQKList, 0, "NOT_CALC")
'                .chkAllePositionen.Value = db.GetFieldBool(thCQKList, 0, "ALLE_POS")
'                .chkNurKapitel.Value = db.GetFieldBool(thCQKList, 0, "KAP_ONLY")
'                .chkNurPositionen.Value = db.GetFieldBool(thCQKList, 0, "POS_ONLY")
            End With
        End If
        db.tableclose thCQKList
    End If
End Sub

Public Sub Save_KLC_Print_Settings()
    Dim thCQKList As Long
    If db.ioFileExist(db.DirRoot & "\DQ\CQKList.dbf") = True Then
        thCQKList = db.tableopen(db.DirRoot & "\DQ\CQKList.dbf")
        If db.GetRecordCount(thCQKList) > 0 Then
            With frmPrintDialog_DQ
                db.SetFieldBool thCQKList, 0, "IDX_POSNR", .optnachPositionsNummern.Value
                db.SetFieldBool thCQKList, 0, "IDX_RES", .optnachResultat.Value
'                db.SetFieldBool thCQKList, 0, "IDX_LVAL", .optnachLeistungswert.Value
                db.SetFieldValue thCQKList, 0, "MIN_RES", .txtMindestbetrag.Text
                db.SetFieldValue thCQKList, 0, "MIN_PROZ", .txtProzent.Text
                db.SetFieldBool thCQKList, 0, "KELEM", .chkKostenelemente.Value
                db.SetFieldBool thCQKList, 0, "ZUSCHL", .chkZuschlaege.Value
                db.SetFieldBool thCQKList, 0, "NOT_CALC", .chkNichtkalkPos.Value
                db.SetFieldBool thCQKList, 0, "ALLE_POS", .chkAllePositionen.Value
                db.SetFieldBool thCQKList, 0, "KAP_ONLY", .chkNurKapitel.Value
                db.SetFieldBool thCQKList, 0, "POS_ONLY", .chkNurPositionen.Value
            End With
        End If
        db.tableclose thCQKList
    End If
End Sub

Public Function Get_Offertsumme() As Double
    Dim TMPCollection As Long
    Get_Offertsumme = 0
    db.SeekSetField thFaktura, "CO", "C"
    TMPCollection = db.CollCreateSeek(thFaktura, True)
    If db.GetRecordCount(TMPCollection) >= 1 Then
        Get_Offertsumme = db.getfielddouble(TMPCollection, 0, "RES")
    End If
    db.colldelete TMPCollection
End Function
Attribute VB_Name = "modGlobals"
'****************************************************************
' LineColor
'****************************************************************
Public Const xlColorIndexAutomatic As Long = -4105
Public Const xlColorIndexNone As Long = -4142
'****************************************************************
' LineWidth
'****************************************************************
Public Const xlHairline As Long = 1
Public Const xlMedium As Long = -4138
Public Const xlThick As Long = 4
Public Const xlThin As Long = 2
'****************************************************************
' Textpositionierung
'****************************************************************
Public Const xlRight As Long = -4152
Public Const xlShiftDown As Long = -4121
Public Const xlShiftToRight As Long = -4161

Public Exl As Excel.Application                         ' Excel Anwendung
Public eBook As Excel.Workbook                          ' Excel Arbeitsbereich
Public eSheet As Excel.Worksheet                        ' Excel zu bearbeitende Tabelle

'Public Exl As Object                                     ' Excel Anwendung
'Public eBook As Object                                   ' Excel Arbeitsbereich
'Public eSheet As Object                                  ' Excel zu bearbeitende Tabelle

Public Type Schriftarten
    Standard As Font
    Master As Font
    Kapitel As Font
    Teilkapitel As Font
    Ausmass As Font
    Vorausmass As Font
    Kalkulationsliste As Font
    Summen As Font
    Memofelder As Font
    Zwischensumme As Font
End Type
Public Fonts As Schriftarten
Public Type Projekt_Informationen
    Sachbearbeiter As String
    Rechnungsnummer As String
    Vorbemerkungen As String
    Offertnummer As String
    Beschreibung As String
    Titel_Sachb As String
    Titel_Rechnr As String
    Titel_Vorbem As String
    Titel_OffNr As String
    Titel_Beschr As String
End Type
Public Type Dynamische_Feldliste
    Feldname As String
    Feldtitel As String
    TYPENAME As String  ' Char, Long, usw.
    FELDLEN As Long     ' Feldlenge inkl. Kommastellen
    DECIMALS As Long    ' Anzahl Kommastellen
    EXTYPE As String    ' Popup, Alphanumerisch, Nummerisch, usw.
End Type
Public DFL() As Dynamische_Feldliste

Public ArrGattung() As String
Public RTF_Texte() As String
Public RTF_NR() As String
Public Picture_NR() As String
Public Picture_Pfad() As String
Public TMPZuschlag As Double

Public Proj As Projekt_Informationen

Public thProjekt As Long
Public thFaktura As Long
Public thAusmass As Long
Public thGRK As Long
Public thKLC As Long
Public thSIVPOS As Long
Public thSIVKLC As Long
Public thDQD_Original As Long
Public thDQM_Original As Long
Public thKLC_Original As Long
Public thDQP_Original As Long
Public thAdressen As Long

Public Vorlagedatei As String
Public Vorlagepfad As String                            ' Enth|fffd|lt den Vorlageordner
Public DocumentPfad As String
Public CurrentLine As Long                              ' Excel Aktuelle Zeile
Public CurrentPage As Long                              ' Excel Aktuelle Seite
Public Const ErrorHandler As Boolean = False

Public Const Zwischenzeilenh|fffd|he As Long = 9.75

Public Bemerkungen As String                            ' Wird verwendet, um festzustellen, welche Bemerkungen geladen werden m|fffd|ssen.
Public ProjektPfad As String                            ' Hier wird der Projektpfad gespeichert.
Public Projektschluessel As String
Public Vorbemerkung As String                           ' Position f|fffd|r das einf|fffd|gen des Wordobjektes wird gespeichert.
Public Schlussbemerkung As String                       ' Position f|fffd|r das einf|fffd|gen des Wordobjektes wird gespeichert.

Public StartPosition_GLSummen As String
Public EndPosition_GLSummen As String

Public VorbDrucken As Boolean
Public SchbDrucken As Boolean
Public Aktuelle_Bemerkung As String
Public Zwischensumme As Double
Public Offertsumme As Double
Public TMPKapitelline As Long                           ' Wird ben|fffd|tigt, um abzufangen, dass nicht auf der gleichen Zeile 2 Seitenumbr|fffd|che get|fffd|tigt werden.
Public DruckLayout As String
Public DruckVorlage As String
Public Bilder_Drucken As Integer
Public Startposition_Kalkulation As Double
Public db As Variant
Public dq As Variant
Public pro As Variant
Public Druck_Type As String                             ' Enth|fffd|lt den Ausdruckstype (zB. Rechnung,Devis,Offerte...)
Public Druck_Modul As String                            ' Enth|fffd|lt das Modul von Sorba, von wo der Ausruck gestartet wurde.
Public StartPosition_KapitelSummen As String
Public EndPosition_KapitelSummen As String
Public Kapitelsummen_Line As Long

Public Sub Set_Sorba_Schnitstellen()
    Set db = CreateObject("SBOdbctrl.SBOdb")
    Set dq = CreateObject("SBOdqctrl.SBOdq")
    Set pro = CreateObject("SBOproctrl.SBOpro")
End Sub

Public Sub Remove_Sorba_Schnittstellen()
    Set db = Nothing
    Set dq = Nothing
    Set pro = Nothing
End Sub

Attribute VB_Name = "modKapitelsummen"
Public Sub Print_Kapitelsummen()
    Dim i As Long
    Dim PTable As PivotTable
    Dim PField As PivotField
    Dim Split_Stat() As String
    Dim Split_Row() As String
    Dim Split_Column() As String
    Dim Design As String
    
    Call Read_Kapitel_Teilkapitel_Texte
    
    If StartPosition_KapitelSummen <> "" And EndPosition_KapitelSummen <> "" Then
        Set PTable = Exl.ActiveWorkbook.PivotCaches.Add(xlDatabase, "Kapiteldaten!" & StartPosition_KapitelSummen & ":" & EndPosition_KapitelSummen).CreatePivotTable _
                            (TableDestination:="Kapitelsummen!R3C1", _
                            TableName:="Kapitelsummen", Defaultversion:=xlReport4)
        
        With PTable
            .PivotSelect "", xlDataAndLabel, True
            .Format xlReport4
        End With
        ' Zeilen einrichten
        Set PField = PTable.PivotFields("GRK")
        With PField
            .Orientation = xlRowField
            .Position = 1
        End With
        Set PField = PTable.PivotFields("Kapitel")
        With PField
            .Orientation = xlRowField
            .Position = 2
            .Caption = "Kap"
        End With
        Set PField = PTable.PivotFields("Teilkapitel")
        With PField
            .Orientation = xlRowField
            .Position = 3
            .Caption = "TKap"
        End With
        Set PField = PTable.PivotFields("Objekt")
        With PField
            .Orientation = xlRowField
            .Position = 4
        End With
        ' Spalten einrichten
        PTable.AddDataField PTable.PivotFields("Resultat"), "Summe von Resultat", xlSum
        PTable.AddDataField PTable.PivotFields("Anteil"), "Summe von Anteil", xlSum
        PTable.AddDataField PTable.PivotFields("Lohn h"), "Summe von Lohn h", xlSum
        PTable.AddDataField PTable.PivotFields("Lohnk."), "Summe von Lohnk.", xlSum
        PTable.AddDataField PTable.PivotFields("Materialk."), "Summe von Materialk.", xlSum
        PTable.AddDataField PTable.PivotFields("Inventark."), "Summe von Inventark.", xlSum
        PTable.AddDataField PTable.PivotFields("Fremdl."), "Summe von Fremdl.", xlSum
        
        ' Formatierung der Spaltendaten definieren
        PTable.PivotFields("Summe von Resultat").NumberFormat = "#,##0.00"
        PTable.PivotFields("Summe von Anteil").NumberFormat = "0.00%"
        PTable.PivotFields("Summe von Lohn h").NumberFormat = "0.00"
        PTable.PivotFields("Summe von Lohnk.").NumberFormat = "#,##0.00"
        PTable.PivotFields("Summe von Materialk.").NumberFormat = "#,##0.00"
        PTable.PivotFields("Summe von Inventark.").NumberFormat = "#,##0.00"
        PTable.PivotFields("Summe von Fremdl.").NumberFormat = "#,##0.00"
        
        ' Spaltenbreiten definieren.
        With eSheet
            .Range("A:A").ColumnWidth = 4
            .Range("B:B").ColumnWidth = 4
            .Range("C:C").ColumnWidth = 4
            .Range("D:D").ColumnWidth = 35
            .Range("E:E").ColumnWidth = 11.88
            .Range("F:F").ColumnWidth = 9
            .Range("G:G").ColumnWidth = 10
            .Range("H:H").ColumnWidth = 10.63
            .Range("I:I").ColumnWidth = 10.63
            .Range("J:J").ColumnWidth = 10.63
            .Range("K:K").ColumnWidth = 10.63
        End With
        
        eSheet.Cells.Select
        Selection.Font.Size = Fonts.Standard.Size
        
        eSheet.Rows("4:4").Select
        ActiveWindow.FreezePanes = True
        eSheet.Range("A1").Select
    End If
End Sub

Public Sub Print_Kapitelsummen_Daten(TMPColl As Long, i As Long)
    If Kapitelsummen_Line <= 0 Then
        Kapitelsummen_Line = 2          ' F|fffd|r den Start auf 2. Zeile setzen.
        StartPosition_KapitelSummen = "R1C1"
    End If
    With Exl.Sheets("Kapiteldaten")
        .Range("A" & Kapitelsummen_Line).Value = Get_GRK_Name(TMPColl, i)                                           ' GRK
        .Range("B" & Kapitelsummen_Line).Value = Left(db.getfieldvalue(TMPColl, i, "POSNR"), 1) & "00"              ' Kapitel
        .Range("C" & Kapitelsummen_Line).Value = Left(db.getfieldvalue(TMPColl, i, "POSNR"), 2) & "0"               ' Teilkapitel
        .Range("D" & Kapitelsummen_Line).Value = db.getfieldvalue(TMPColl, i, "OBJKEY")                             ' Objekt
        .Range("E" & Kapitelsummen_Line).Value = db.getfieldvalue(TMPColl, i, "RES")                                ' Resultat
        If Offertsumme > 0 Then
            .Range("F" & Kapitelsummen_Line).Value = db.getfielddouble(TMPColl, i, "RES") / Offertsumme             ' Anteil
        Else
            .Range("F" & Kapitelsummen_Line).Value = db.getfielddouble(TMPColl, i, "RES")                           ' Anteil
        End If
        .Range("G" & Kapitelsummen_Line).Value = db.getfieldvalue(TMPColl, i, "TLOHN")                              ' Total Lohn Stunden
        .Range("H" & Kapitelsummen_Line).Value = db.getfieldvalue(TMPColl, i, "LO")                                 ' Lohnkosten
        .Range("I" & Kapitelsummen_Line).Value = db.getfieldvalue(TMPColl, i, "MA")                                 ' Materialkosten
        .Range("J" & Kapitelsummen_Line).Value = db.getfieldvalue(TMPColl, i, "IV")                                 ' Inventarkosten
        .Range("K" & Kapitelsummen_Line).Value = db.getfieldvalue(TMPColl, i, "FL")                                 ' Fremdleistungen
    End With
    EndPosition_KapitelSummen = "R" & CStr(Kapitelsummen_Line) & "C11"
    Kapitelsummen_Line = Kapitelsummen_Line + 1
End Sub

Public Sub Read_Kapitel_Teilkapitel_Texte()
    Dim RecCount As Long
    Dim MRecCount As Long
    Dim ORecCount As Long
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim Kapitelfound As Boolean
    Dim Teilkapitelfound As Boolean
    Dim GrundkatalogNr As String
    Dim Kapitel As String
    Dim Teilkapitel As String
    Dim TMPFaktura As Long
    Dim TMPMasterfilter As Long
    Dim Split_Endpos() As String
    Dim TMPEndPos As Long
    Dim thObj As Long
    Dim ObjStr As String
    Dim CollObj As Long
    '*********************************************************************************************************************
    ' Devi filtern
    '*********************************************************************************************************************
    db.SeekSetField thDQD_Original, "NR", ">0.0000009999"
    db.SeekSetField thDQD_Original, "CO", "! "
    db.SeekSetField thDQD_Original, "CO", "!C"
    db.SeekSetField thDQD_Original, "CO", "!D"
    db.SeekSetField thDQD_Original, "CO", "!S"
    db.SeekSetField thDQD_Original, "CO", "!U"
    db.SeekSetField thDQD_Original, "CO", "!H"
    db.SeekSetField thDQD_Original, "TEXT", "! "
    TMPFaktura = db.CollCreateSeek(thDQD_Original, False)
    Split_Endpos = Split(EndPosition_KapitelSummen, "C")
    TMPEndPos = CLng(Right(Split_Endpos(0), Len(Split_Endpos(0)) - 1))
    
    If db.ioFileExist(db.DirRoot() & "\ExcelPrint\Faktura.dqo") = True Then
        thObj = db.tableopen(db.DirRoot() & "\ExcelPrint\Faktura.dqo")
        If db.GetRecordCount(thObj) > 0 Then
            ORecCount = db.GetRecordCount(thObj) - 1
        End If
    End If
    
    Set eSheet = Exl.Sheets("Kapiteldaten")
    If db.GetRecordCount(TMPFaktura) > 0 Then
        With eSheet
            For i = 2 To TMPEndPos
                GrundkatalogNr = Left(.Range("A" & i).Value, 3)
                RecCount = db.GetRecordCount(TMPFaktura) - 1
                For j = 0 To RecCount
                    If Trim(db.getfieldvalue(TMPFaktura, j, "POSNR")) = GrundkatalogNr Then
                        db.SeekSetField TMPFaktura, "NR", ">" & db.getfielddouble(TMPFaktura, j, "NR")
                        db.SeekSetField TMPFaktura, "NR", "<" & db.getfielddouble(TMPFaktura, j, "NR") + 100000
                        TMPMasterfilter = db.CollCreateSeek(TMPFaktura, False)
                        If db.GetRecordCount(TMPMasterfilter) > 0 Then
                            MRecCount = db.GetRecordCount(TMPMasterfilter) - 1
                            Kapitel = Trim(.Range("B" & i).Value)
                            Teilkapitel = Trim(.Range("C" & i).Value)
                            ObjStr = Trim(.Range("D" & i).Value)
                            Kapitelfound = False
                            Teilkapitelfound = False
                            For k = 0 To MRecCount
                                If Trim(db.getfieldvalue(TMPMasterfilter, k, "POSNR")) = Kapitel And Kapitelfound = False Then
                                    .Range("B" & i).Value = Kapitel & " " & Trim(db.getfieldvalue(TMPMasterfilter, k, "TEXT"))
                                    Kapitelfound = True
                                End If
                                If Trim(db.getfieldvalue(TMPMasterfilter, k, "POSNR")) = Teilkapitel And Teilkapitelfound = False Then
                                    If db.FieldIsEmpty(TMPMasterfilter, k, "STEXT") = False Then
                                        .Range("C" & i).Value = Teilkapitel & " " & Trim(db.getfieldvalue(TMPMasterfilter, k, "STEXT"))
                                    Else
                                        .Range("C" & i).Value = Teilkapitel & " " & Trim(db.getfieldvalue(TMPMasterfilter, k, "TEXT"))
                                    End If
                                    Teilkapitelfound = True
                                End If
                                If Kapitelfound = True And Teilkapitelfound = True Then Exit For
                            Next k
                            If ObjStr <> "" And thObj > 0 Then
                                For k = 0 To ORecCount
                                    If Trim(db.getfieldvalue(thObj, k, "OBJKEY")) = ObjStr Then
                                        ObjStr = Trim(db.getfieldvalue(thObj, k, "OBJEKT_1"))
                                        Exit For
                                    End If
                                Next k
                                db.SeekSetField thObj, "OBJEKT_2", " "
                                db.SeekSetField thObj, "OBJEKT_3", " "
                                db.SeekSetField thObj, "PRIMVAR", " "
                                db.SeekSetField thObj, "KAG", " "
                                db.SeekSetField thObj, "ELEMENT", " "
                                db.SeekSetField thObj, "EINRTYP", " "
                                db.SeekSetField thObj, "NACHTRAG", " "
                                db.SeekSetField thObj, "KAT", " "
                                db.SeekSetField thObj, "OBJEKT_1", ObjStr
                                CollObj = db.CollCreateSeek(thObj, False)
                                If db.GetRecordCount(CollObj) > 0 Then
                                    ObjStr = ObjStr & " : " & Trim(db.getfieldvalue(CollObj, 0, "OBJTEXT")) & Trim(db.getfieldvalue(CollObj, 0, "OBJTEXT2"))
                                    .Range("D" & i).Value = Trim(ObjStr)
                                End If
                                db.colldelete CollObj
                            End If
                        End If
                        db.colldelete TMPMasterfilter
                    End If
                Next j
            Next i
        End With
    End If
    Set eSheet = Exl.Sheets("Kapitelsummen")
    db.colldelete TMPFaktura
    db.tableclose thObj
End Sub
Attribute VB_Name = "modPrintDaten"
Private Declare Function OemToChar Lib "user32" Alias "OemToCharA" (ByVal lpszSrc As String, ByVal lpstDst As String) As Long

Public Sub Print_Daten()
    Call Print_Daten_CQ
End Sub

Sub Print_Daten_CQ()
    Dim TMPColl As Long
    Dim Count As Long
    Dim i As Long                               ' Z|fffd|hler
    Dim j As Long                               ' Z|fffd|hler
    Dim k As Long                               ' Z|fffd|hler
    Dim CollAusmass As Long
    Dim TMPKlcColl As Long
    Dim TMPPosColl As Long
    Dim Beschreibung As String
    Dim TMPBeschreibung As String
    Dim TMPCode As String
    Dim TMPCollWidth As Double
    Dim Header_Printed As Boolean
    Dim TCount As Long
    Dim KLine As Long
    Dim Kapitel As Boolean
    Dim OldLine As Long
    Dim BeschrCount As Long
    Dim Hirarchie1 As String                    ' Mit Hilfe dieses Hirarchie-Strings wird festgelegt, welcher Code die oberste Hirarchiestufe darstellt.
    Dim SubTableHirarchie As String
    Dim SubTableCount As Long
    Dim StartSummen As Long
    Dim TableSumme As Long
    Dim Total_Vorausmass As Double
    Dim Total_Ausmass_bisher As Double
    Dim Total_Ausmass_neu As Double
    Dim BildPfad As String
    Dim eShape As Shape
    Dim Bild_Dateiname As String
    Dim KapitelNr As String
    Dim KapitelName As String
    Dim Split_Beschr() As String
    Dim TextMenge As String
    Dim TextPreis As String
    Dim TextResultat As String
    Dim ProzOfferte As Double                   ' Prozent der Offertsumme
    Dim TMPResultat As Double                   ' Resultat der gedruckten Positionen
    Dim LWERT As String
    Dim MENGE As String
    
    Dim RecNr1 As Long                          ' \
    Dim RecNr2 As Long                          '  > Werden ben|fffd|tigt, um zu pr|fffd|fen, ob Position gedruckt werden soll.
    Dim Drucken As Boolean                      ' /
    '*********************************************************************************************************************
    ' Devi filtern
    '*********************************************************************************************************************
    db.SeekSetField thFaktura, "NR", ">0.0000009999"
    '***********************************************
    ' Nur Positionen drucken, wenn eine der
    ' untenstehenden Abfragen zutrift.
    '***********************************************
    If IsNumeric(frmPrintDialog_DQ.txtMindestbetrag.Text) = True Or IsNumeric(frmPrintDialog_DQ.txtProzent.Text) = True Or _
       frmPrintDialog_DQ.optnachResultat.Value = True Or frmPrintDialog_DQ.optnachLohnstunden.Value = True Then
        db.SeekSetField thFaktura, "CO", "D"
    End If
    '***********************************************
    ' Filter setzen f|fffd|r Mindestbetrag
    '***********************************************
    If IsNumeric(frmPrintDialog_DQ.txtMindestbetrag.Text) = True And Trim(frmPrintDialog_DQ.txtMindestbetrag.Text) <> "" Then
        db.SeekSetField thFaktura, "RES", ">" & CStr(CDbl(frmPrintDialog_DQ.txtMindestbetrag.Text) - 0.01)
        If frmPrintDialog_DQ.optnachPositionsNummern.Value = True Then
            frmPrintDialog_DQ.optnachPositionsNummern.Value = False
            frmPrintDialog_DQ.optnachResultat.Value = True
        End If
    End If
    '***********************************************
    ' Filter setzen f|fffd|r Mindestprozent der Offerte
    '***********************************************
    If IsNumeric(frmPrintDialog_DQ.txtProzent.Text) = True And Trim(frmPrintDialog_DQ.txtProzent.Text) <> "" Then
        ProzOfferte = Offertsumme / 100 * CDbl(frmPrintDialog_DQ.txtProzent.Text)
        If frmPrintDialog_DQ.optnachPositionsNummern.Value = True Then
            frmPrintDialog_DQ.optnachPositionsNummern.Value = False
            frmPrintDialog_DQ.optnachResultat.Value = True
        End If
    End If
    '***********************************************
    ' Filter setzen f|fffd|r Sortierung nach Resultat
    '***********************************************
    If frmPrintDialog_DQ.optnachResultat.Value = True Then
        db.SeekSetField thFaktura, "RES", "! "
    End If
    '***********************************************
    ' Filter setzen f|fffd|r Sortierung nach Lohnstunden
    '***********************************************
    If frmPrintDialog_DQ.optnachLohnstunden.Value = True Then
        db.SeekSetField thFaktura, "TLOHN", "! "
        If frmPrintDialog_DQ.chkAllePositionen.Value = False Then
            db.SeekSetField thFaktura, "RES", "! "
        End If
    End If
    '***********************************************
    ' Filter setzen f|fffd|r nur nicht Kalkulierte Positionen
    '***********************************************
    If frmPrintDialog_DQ.chkNichtkalkPos.Value = True Then
        db.SeekSetField thFaktura, "CO", "D"
        db.SeekSetField thFaktura, "ETAPPE", " "
    End If
    '***********************************************
    ' Filter setzen f|fffd|r nicht Kalkulierte Positionen
    '***********************************************
    If frmPrintDialog_DQ.chkNurPositionen.Value = True Then
        If frmPrintDialog_DQ.opt_Exkl_nicht_kalk_Pos.Value = True Then
            db.SeekSetField thFaktura, "ETAPPE", "! "
        End If
    End If
    
    TMPColl = db.CollCreateSeek(thFaktura, True)
    
    '***********************************************
    ' Index setzen f|fffd|r Sortierung nach Resultat
    '***********************************************
    If frmPrintDialog_DQ.optnachResultat.Value = True Then
        db.TableSetIndex TMPColl, "RES,TLOHN"
        db.TableReverseIndex TMPColl
    End If
    '***********************************************
    ' Index setzen f|fffd|r Sortierung nach Lohnstunden
    '***********************************************
    If frmPrintDialog_DQ.optnachLohnstunden.Value = True Then
        db.TableSetIndex TMPColl, "TLOHN,RES"
        db.TableReverseIndex TMPColl
    End If
    Count = db.GetRecordCount(TMPColl) - 1
    If Trim(db.getfieldvalue(TMPColl, 0, "CO")) = "M" Or _
       Trim(db.getfieldvalue(TMPColl, 0, "CO")) = "K" Then
        Hirarchie1 = Trim(db.getfieldvalue(TMPColl, 0, "CO"))
    End If
    CurrentLine = 5
    CurrentPage = 1
    If frmPrintDialog_DQ.chkKapitelsummen.Value = True Then
        Set eSheet = Exl.Sheets("Kapiteldaten")
        eSheet.Activate
        Call Define_Kapitelsummen_Daten
        Set eSheet = Exl.Sheets("Details")
        eSheet.Activate
    Else
        Call Delete_Not_Require_Sheets("Kapitelsummen,Kapiteldaten")
    End If
    For k = 0 To 1
        db.winProgressStart "Daten werden |fffd|bertragen.", Count, 0
        For i = 0 To Count
            DoEvents
            If (db.FieldIsEmpty(TMPColl, i, "TEXT") = False Or db.FieldIsEmpty(TMPColl, i, "RES") = False) And _
                Left(Trim(db.getfieldvalue(TMPColl, i, "RES")), 3) <> "---" And _
                Left(Trim(db.getfieldvalue(TMPColl, i, "TEXT")), 3) <> "---" And _
                Left(Trim(db.getfieldvalue(TMPColl, i, "TEXT")), 3) <> "***" Then
                '*************************************************************************************************************
                ' Beschreibungen zusammenfassen
                '*************************************************************************************************************
                TMPCode = Trim(db.getfieldvalue(TMPColl, i, "CO"))
                Beschreibung = ""
                BeschrCount = 1
                Do While Trim(db.getfieldvalue(TMPColl, i, "CO")) = TMPCode
                    TMPBeschreibung = Trim(db.getfieldvalue(TMPColl, i, "TEXT"))
                    If Beschreibung <> "" And Left(TMPBeschreibung, 1) = "." Then Beschreibung = Beschreibung & vbLf
                    If Right(TMPBeschreibung, 1) <> "-" Then TMPBeschreibung = TMPBeschreibung & " "
                    If Right(TMPBeschreibung, 1) = "-" Then TMPBeschreibung = Left(TMPBeschreibung, Len(TMPBeschreibung) - 1)
                    Beschreibung = Beschreibung & TMPBeschreibung
                    If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "D" Then
                        TMPCode = "Exit"
                    ElseIf Trim(db.getfieldvalue(TMPColl, i, "CO")) = "S" Then
                        Beschreibung = Beschreibung & Trim(db.getfieldvalue(TMPColl, i, "STEXT"))
                        TMPCode = "Exit"
                    ElseIf Left(Trim(db.getfieldvalue(TMPColl, i, "POSNR")), 1) = "R" Then
                        TMPCode = "Exit"
                    Else
                        If i < Count Then
                            If Left(Trim(db.getfieldvalue(TMPColl, i + 1, "RES")), 3) <> "---" And _
                               Left(Trim(db.getfieldvalue(TMPColl, i + 1, "TEXT")), 3) <> "---" And _
                               Left(Trim(db.getfieldvalue(TMPColl, i + 1, "TEXT")), 3) <> "***" Then
                                If i >= Count Or Trim(db.getfieldvalue(TMPColl, i + 1, "CO")) <> TMPCode Or Left(Trim(db.getfieldvalue(TMPColl, i + 1, "TEXT")), 3) = "---" _
                                              Or Left(Trim(db.getfieldvalue(TMPColl, i + 1, "TEXT")), 3) = "***" Then
                                    TMPCode = "Exit"
                                Else
                                    If db.getfieldvalue(TMPColl, i + 1, "POSNRG") <> db.getfieldvalue(TMPColl, i, "POSNRG") Then
                                        TMPCode = "Exit"
                                    Else
                                        BeschrCount = BeschrCount + 1
                                        i = i + 1
                                    End If
                                End If
                            Else
                                TMPCode = "Exit"
                            End If
                        Else
                            TMPCode = "Exit"
                        End If
                    End If
                Loop
                '*************************************************************************************************************
                ' Schriftarten setzten
                '*************************************************************************************************************
                With eSheet
                    If Trim(db.getfieldvalue(TMPColl, i, "CO")) = Hirarchie1 Or (IsNumeric(db.getfieldvalue(TMPColl, i, "POSNR")) = True And _
                            db.getfielddouble(TMPColl, i, "POSNR") / 100 = Int(db.getfielddouble(TMPColl, i, "POSNR") / 100) And _
                            Left(Trim(db.getfieldvalue(TMPColl, i + 1, "TEXT")), 3) = "---") Then
                        .Range("D" & CurrentLine & ":G" & CurrentLine).Merge
                        .Range("A" & CurrentLine & ":J" & CurrentLine).Select
                        Call Set_Font_Format("Master")
                    ElseIf Trim(db.getfieldvalue(TMPColl, i, "CO")) = "T" And Left(Trim(db.getfieldvalue(TMPColl, i + 1, "TEXT")), 3) = "---" Then
                        .Range("A" & CurrentLine & ":J" & CurrentLine).Select
                        Call Set_Font_Format("Teilkapitel")
                    ElseIf Trim(db.getfieldvalue(TMPColl, i, "CO")) = "K" And Left(Trim(db.getfieldvalue(TMPColl, i + 1, "TEXT")), 3) = "---" Then
                        .Range("A" & CurrentLine & ":J" & CurrentLine).Select
                        Call Set_Font_Format("Kapitel")
                    Else
                        If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "S" Then
                            .Range("A" & CurrentLine & ":J" & CurrentLine).Select
                            Call Set_Font_Format("Summen")
                        End If
                    End If
                End With
                '*************************************************************************************************************
                ' Daten drucken
                '*************************************************************************************************************
                With eSheet
                    '*************************************************************************************************************
                    ' Informationen, die f|fffd|r das Makro von Tom ben|fffd|tigt werden.
                    .Range("O" & CurrentLine).Value = db.getfieldvalue(TMPColl, i, "CO")
                    RecordID = db.RecordIDFind(TMPColl, i)
                    .Range("P" & CurrentLine).Value = RecordID
                    .Range("Q" & CurrentLine).Value = db.getfieldvalue(TMPColl, i, "EINH")
                    '*************************************************************************************************************
                    If Trim(db.getfieldvalue(TMPColl, i, "POSNR")) <> Trim(db.getfieldvalue(TMPColl, i - BeschrCount, "POSNR")) Then
                        .Range("A" & CurrentLine & ":B" & CurrentLine).Merge
                        .Range("A" & CurrentLine).Value = Trim(db.getfieldvalue(TMPColl, i, "POSNR"))
                    End If
                    If Trim(db.getfieldvalue(TMPColl, i, "POSNRG")) <> Trim(db.getfieldvalue(TMPColl, i - BeschrCount, "POSNRG")) Then
                        .Range("C" & CurrentLine).Value = Trim(db.getfieldvalue(TMPColl, i, "POSNRG"))
                    End If
                    .Range("A" & CurrentLine & ":C" & CurrentLine).Select
                    Exl.Selection.VerticalAlignment = xlTop
                    .Range("A" & CurrentLine).HorizontalAlignment = xlLeft
                    .Range("C" & CurrentLine).HorizontalAlignment = xlLeft
                    .Range("A" & CurrentLine & ":C" & CurrentLine).Select
                    Selection.Locked = True
    
                    Call Get_Text_Array(Beschreibung, Split_Beschr)
                    For j = 0 To UBound(Split_Beschr)
                        .Range("D" & CurrentLine).Value = Trim(Split_Beschr(j))
                         If j < UBound(Split_Beschr) Then
                            .Range("D" & CurrentLine).Select
                            Exl.Selection.WrapText = True
                            Exl.Selection.VerticalAlignment = xlTop
                            TMPCollWidth = .Range("D" & CurrentLine).ColumnWidth
                            .Range("D" & CurrentLine).ColumnWidth = .Range("D" & CurrentLine).ColumnWidth + _
                                                                    .Range("E" & CurrentLine).ColumnWidth + _
                                                                    .Range("F" & CurrentLine).ColumnWidth + _
                                                                    .Range("G" & CurrentLine).ColumnWidth
                            .Range(CurrentLine & ":" & CurrentLine).Rows.AutoFit
                            .Range("D" & CurrentLine & ":G" & CurrentLine).Merge
                            .Range("D" & CurrentLine).ColumnWidth = TMPCollWidth
                            .Range("D" & CurrentLine).Select
                            Selection.Locked = True
                            
                            CurrentLine = CurrentLine + 1
                        Else
                            If Trim(db.getfieldvalue(TMPColl, i, "CO")) <> "D" Then
                                .Range("D" & CurrentLine).Select
                                Exl.Selection.WrapText = True
                                Exl.Selection.VerticalAlignment = xlTop
                                TMPCollWidth = .Range("D" & CurrentLine).ColumnWidth
                                .Range("D" & CurrentLine).ColumnWidth = .Range("D" & CurrentLine).ColumnWidth + _
                                                                        .Range("E" & CurrentLine).ColumnWidth + _
                                                                        .Range("F" & CurrentLine).ColumnWidth + _
                                                                        .Range("G" & CurrentLine).ColumnWidth
                                .Range(CurrentLine & ":" & CurrentLine).Rows.AutoFit
                                .Range("D" & CurrentLine & ":G" & CurrentLine).Merge
                                .Range("D" & CurrentLine).ColumnWidth = TMPCollWidth
                                .Range("D" & CurrentLine).Select
                                Selection.Locked = True
                            Else
                                .Range("D" & CurrentLine).Select
                                Selection.Locked = True
                            End If
                        End If
                    Next j
                    'If Trim(db.GetFieldValue(TMPColl, i, "CO")) = "K" Or Trim(db.GetFieldValue(TMPColl, i, "CO")) = "H" Then
                    If Trim(db.getfieldvalue(TMPColl, i, "CO")) <> "D" Then
                        If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "S" Then
                            .Range("I" & CurrentLine).Value = db.getfieldvalue(TMPColl, i, "RES")
                        End If
                    Else
                        If frmPrintDialog_DQ.chkGliederung.Value = True Then
                            Call Print_Objektgliederung_CQ(CurrentLine, TMPColl, i)
                        End If
                        If frmPrintDialog_DQ.chkAlleHPOS.Value = True Then
                            If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "D" Then
                                .Range("A" & CurrentLine & ":B" & CurrentLine).Merge
                                .Range("A" & CurrentLine).Value = Trim(db.getfieldvalue(TMPColl, i, "POSNR"))
                            End If
                        End If
                        If frmPrintDialog_DQ.chkKapitel_HPOS.Value = True Then
                            If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "D" Then
                                .Range("A" & CurrentLine & ":B" & CurrentLine).Merge
                                .Range("A" & CurrentLine).Value = Left(Get_GRK_Name(TMPColl, i), 3) & "." & Trim(db.getfieldvalue(TMPColl, i, "POSNR"))
                            End If
                        End If
                        TextMenge = ""
                        TextPreis = ""
                        TextResultat = ""
                        dq.DQDExtendedTextGet TMPColl, i, TextMenge, TextPreis, TextResultat
                        If frmPrintDialog_DQ.chkNurSummen.Value = False Then
                            If Trim(db.getfieldvalue(TMPColl, i, "EINH")) <> "P" And Trim(db.getfieldvalue(TMPColl, i, "EINH")) <> "Z" And Trim(db.getfieldvalue(TMPColl, i, "CO")) <> "S" Then
                                .Range("E" & CurrentLine).Value = db.getfieldvalue(TMPColl, i, "EINH")
                                .Range("E" & CurrentLine).Select
                                Selection.Locked = True
                            End If
                            If db.FieldIsEmpty(TMPColl, i, "MENGE") = False And TextMenge = "" Then
                                .Range("F" & CurrentLine).Value = db.getfieldvalue(TMPColl, i, "MENGE")
                            ElseIf TextMenge <> "" Then
                                .Range("F" & CurrentLine).Value = TextMenge
                            End If
                            If db.FieldIsEmpty(TMPColl, i, "EINHPR") = False And TextPreis = "" Then
                                .Range("G" & CurrentLine).Value = db.getfieldvalue(TMPColl, i, "EINHPR")
                            ElseIf TextPreis <> "" Then
                                .Range("G" & CurrentLine).Value = TextPreis
                            End If
                            If TextResultat = "" Then
                                .Range("I" & CurrentLine).Value = db.getfieldvalue(TMPColl, i, "RES")
                            Else
                                .Range("I" & CurrentLine).Value = TextResultat
                            End If
                        Else
                            If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "S" Then
                                If TextResultat = "" Then
                                    .Range("I" & CurrentLine).Value = db.getfieldvalue(TMPColl, i, "RES")
                                Else
                                    .Range("I" & CurrentLine).Value = TextResultat
                                End If
                            End If
                        End If
                    End If
                    '*************************************************************************************************************
                    ' Kapitelposition speichern.
                    '*************************************************************************************************************
                    If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "M" And Trim(db.getfieldvalue(TMPColl, i - BeschrCount - 1, "CO")) <> "M" Then
                        KLine = CurrentLine
                    End If
                    If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "K" And Trim(db.getfieldvalue(TMPColl, i - BeschrCount - 1, "CO")) <> "K" Then
                        KLine = CurrentLine
                    End If
                    If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "T" And Trim(db.getfieldvalue(TMPColl, i - BeschrCount - 1, "CO")) <> "T" Then
                        KLine = CurrentLine
                    End If
                    If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "D" And Trim(db.getfieldvalue(TMPColl, i - BeschrCount - 1, "CO")) <> "D" And _
                        db.FieldIsEmpty(TMPColl, i, "EINH") = False Then
                        If frmPrintDialog_DQ.chkGliederung.Value = True Then
                            KLine = CurrentLine - 1
                        Else
                            KLine = CurrentLine
                        End If
                    End If
                    If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "S" And Trim(db.getfieldvalue(TMPColl, i - BeschrCount - 1, "CO")) = "S" And _
                        db.FieldIsEmpty(TMPColl, i, "RES") = True And db.FieldIsEmpty(dmpcoll, i, "TEXT") = True Then
                        KLine = CurrentLine
                    End If
                    '*************************************************************************************************************
                    ' Kalkulationsliste drucken falls erw|fffd|nscht.
                    '*************************************************************************************************************
                    If frmPrintDialog_DQ.chkKalkulationsdaten.Value = True Then
                        If db.FieldIsEmpty(TMPColl, i, "EINH") = False And Trim(db.getfieldvalue(TMPColl, i, "CO")) <> "S" Then
                            '********************************************************
                            ' Daten in Kalkulationssummen-Sheet schreiben,
                            ' f|fffd|r Auswertungen und Statistiken.
                            '********************************************************
                            If frmPrintDialog_DQ.chkKapitelsummen.Value = True Then
                                Call Print_Kapitelsummen_Daten(TMPColl, i)
                            End If
                            ' Hier geh|fffd|ren diese Daten hin, die f|fffd|r die ganze Position gelten:
                            ' - Gruppenleistung
                            ' - Etappe
                            ' - Leistungswert
                            ' - Total Lohnstunden
                            CurrentLine = CurrentLine + 1
                            '***********************************************
                            ' Schriftarten zuweisen f|fffd|r Positions-Kalkulationsdaten
                            '***********************************************
                            .Range("A" & CurrentLine & ":G" & CurrentLine).Select
                            .Range("A" & CurrentLine & ":G" & CurrentLine).Merge
                            .Range("A" & CurrentLine).HorizontalAlignment = xlLeft
                            '***********************************************
                            ' Daten drucken
                            '***********************************************
'                            .Range("A" & CurrentLine).Value = "Gruppenleistung: " & Trim(db.GetFieldValue(TMPColl, i, "GL")) & " / " & _
'                                                              "Etappe: " & Trim(db.GetFieldValue(TMPColl, i, "ETAPPE")) & " / " & _
'                                                              "Leistungswert: " & Trim(db.GetFieldValue(TMPColl, i, "LWERT")) & " / " & _
'                                                              "Total Lohnstunden: " & Trim(db.GetFieldValue(TMPColl, i, "TLOHN"))
                            If Trim(db.getfieldvalue(TMPColl, i, "LWERT")) = "" Then
                                LWERT = "0"
                            Else
                                LWERT = Trim(db.getfieldvalue(TMPColl, i, "LWERT"))
                            End If
                            If Trim(db.getfieldvalue(TMPColl, i, "MENGE")) = "" Then
                                MENGE = "0"
                            Else
                                MENGE = Trim(db.getfieldvalue(TMPColl, i, "MENGE"))
                            End If
                            .Range("A" & CurrentLine).Value = "Gruppenleistung: " & Trim(db.getfieldvalue(TMPColl, i, "GL")) & " / " & _
                                                              "Etappe: " & Trim(db.getfieldvalue(TMPColl, i, "ETAPPE")) & " / " & _
                                                              "Leistungswert: " & Trim(db.getfieldvalue(TMPColl, i, "LWERT")) & " / " & _
                                                              "Total Lohnstunden: " & CStr(CDbl(LWERT) * CDbl(MENGE))
                            If Offertsumme > 0 Then
                                .Range("I" & CurrentLine).Value = db.getfielddouble(TMPColl, i, "RES") / Offertsumme
                            Else
                                .Range("I" & CurrentLine).Value = db.getfielddouble(TMPColl, i, "RES")
                            End If
                            .Range("I" & CurrentLine).Style = "Percent"
                            .Range("I" & CurrentLine).NumberFormat = "0.00%"
                            .Range("A" & CurrentLine & ":I" & CurrentLine).Select
                            Call ExcelDraw_Rahmen(Exl)
                            '***********************************************
                            ' Detailliste der Kalkulation drucken
                            '***********************************************
                            db.SeekSetField thKLC, "NR1", db.getfieldvalue(TMPColl, i, "NR")
                            db.SeekSetField thKLC, "BEZ", "! "
                            TMPKlcColl = db.CollCreateSeek(thKLC, True)
                            If db.GetRecordCount(TMPKlcColl) > 0 Then
                                SubTableCount = 1
                                TableSumme = 0
                                TMPZuschlag = 0
                                ReDim ArrGattung(0)
                                For j = 0 To db.GetRecordCount(TMPKlcColl) - 1
                                    If db.FieldIsEmpty(TMPKlcColl, j, "BEZ") = False Then
                                        '***********************************************
                                        ' Summen und |fffd|bertitel der Kalkulationsdaten drucken
                                        '***********************************************
                                        If Trim(db.getfieldvalue(TMPKlcColl, j, "GATTUNG")) <> "A" Then
                                            If j >= 0 And ArrGattung(0) = "" Then
                                                ArrGattung(0) = CurrentLine + 1
                                            End If
                                        End If
                                        If SubTableHirarchie <> Trim(db.getfieldvalue(TMPKlcColl, j, "GATTUNG")) Then
                                            If SubTableHirarchie <> "" Then
                                                CurrentLine = CurrentLine + 1
                                                Call Draw_KLCTable_Summen(SubTableHirarchie, StartSummen, TMPZuschlag)
                                                TMPZuschlag = 0
                                                StartSummen = CurrentLine + 1
                                            End If
                                            If SubTableHirarchie = "" Then StartSummen = CurrentLine + 1
                                            SubTableHirarchie = Trim(db.getfieldvalue(TMPKlcColl, j, "GATTUNG"))
                                            SubTableCount = SubTableCount + 1
                                        End If
                                        TMPZuschlag = TMPZuschlag + db.getfielddouble(TMPKlcColl, j, "ZUSCHL_FR")
                                        CurrentLine = CurrentLine + 1
                                        '***********************************************
                                        ' Zeile formatieren
                                        '***********************************************
                                        Call Format_Kalk_Detail_Line
                                        '***********************************************
                                        ' Daten drucken
                                        '***********************************************
                                        .Range("A" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "GATTUNG"))
                                        .Range("B" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "KO_EL_ART")) & " " & _
                                                                          Trim(db.getfieldvalue(TMPKlcColl, j, "POSNR")) & " " & _
                                                                          Trim(db.getfieldvalue(TMPKlcColl, j, "POSNRG"))
                                        If frmPrintDialog_DQ.chkinklZuschlagNr.Value = True Then
                                            If Trim(db.getfieldvalue(TMPKlcColl, j, "ZURECHART")) <> "" Then
                                                .Range("D" & CurrentLine).WrapText = True
                                                If db.getfielddouble(TMPKlcColl, j, "ZUSCHLAG") >= 0 Then
                                                    .Range("D" & CurrentLine).Value = db.getfielddouble(TMPKlcColl, j, "ZUSCHLAG") + 1 & ": " & Trim(db.getfieldvalue(TMPKlcColl, j, "BEZ")) & vbLf & "Zurechnungsart: " & Trim(Left(db.getfieldvalue(TMPKlcColl, j, "ZURECHART"), 8))
                                                Else
                                                    .Range("D" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "BEZ")) & vbLf & "Zurechnungsart: " & Trim(Left(db.getfieldvalue(TMPKlcColl, j, "ZURECHART"), 8))
                                                End If
                                                .Rows(CurrentLine).AutoFit
                                            Else
                                                If db.getfielddouble(TMPKlcColl, j, "ZUSCHLAG") >= 0 Then
                                                    .Range("D" & CurrentLine).Value = db.getfielddouble(TMPKlcColl, j, "ZUSCHLAG") + 1 & ": " & Trim(db.getfieldvalue(TMPKlcColl, j, "BEZ"))
                                                Else
                                                    .Range("D" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "BEZ"))
                                                End If
                                            End If
                                        Else
                                            If Trim(db.getfieldvalue(TMPKlcColl, j, "ZURECHART")) <> "" Then
                                                .Range("D" & CurrentLine).WrapText = True
                                                .Range("D" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "BEZ")) & vbLf & "Zurechnungsart: " & Trim(Left(db.getfieldvalue(TMPKlcColl, j, "ZURECHART"), 8))
                                                .Rows(CurrentLine).AutoFit
                                            Else
                                                .Range("D" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "BEZ"))
                                            End If
                                        End If
                                        .Range("E" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "EINH"))
                                        .Range("F" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "MENGE"))
                                        If .Range("A" & CurrentLine).Value = "A" Then
                                            .Range("G" & CurrentLine).Value = "GL: " & Trim(db.getfieldvalue(TMPKlcColl, j, "GL"))
                                        Else
                                            .Range("G" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "NETTOPR"))
                                        End If
                                        If .Range("A" & CurrentLine).Value = "A" Then
                                            .Range("H" & CurrentLine).Value = CDbl(Trim(db.getfieldvalue(TMPKlcColl, j, "RES"))) + db.getfielddouble(TMPKlcColl, j, "ZUSCHL_FR")
                                        Else
                                            .Range("H" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "RES"))
                                        End If
                                        If db.GetFieldBool(TMPKlcColl, j, "NO_GL") = True Or db.GetFieldBool(TMPKlcColl, j, "GL_OVERALL") = True Then
                                            .Range("J" & CurrentLine).Value = "*"
                                        End If
                                        '******************************************
                                        ' Formatierungen f|fffd|r Kategorien setzen.
                                        '******************************************
                                        If .Range("A" & CurrentLine).Value = "A" Then
                                            .Range("A" & CurrentLine & ":J" & CurrentLine).Font.Bold = True
                                        End If
                                        '******************************************
                                        ' Rahmen um die ganze Position zeichnen.
                                        '******************************************
                                        .Range("A" & CurrentLine & ":I" & CurrentLine).Select
                                        Call ExcelDraw_Rahmen(Exl, Grid:=True, VerticalGrid:=True)
                                    End If
                                Next j
                                
                                CurrentLine = CurrentLine + 1
                                Call Draw_KLCTable_Summen(SubTableHirarchie, StartSummen, TMPZuschlag, True)
                                SubTableHirarchie = ""
                            Else
                                ' Es k|fffd|nnte sich noch um eine suissetec Kalkulation handeln.
                                db.SeekSetField thSIVPOS, "NR1", db.getfieldvalue(TMPColl, i, "NR")
                                TMPPosColl = db.CollCreateSeek(thSIVPOS, True)
                                If db.GetRecordCount(TMPPosColl) = 1 Then
                                    ' Als erstes werden die Lohndaten gedruckt.
                                    ReDim ArrGattung(0)
                                    CurrentLine = CurrentLine + 1
                                    StartSummen = CurrentLine
                                    TMPZuschlag = 0
                                    SubTableHirarchie = "L"
                                    SubTableCount = 0
                                    If db.getfielddouble(TMPPosColl, 0, "B_ZEIT") > 0 Then
                                        '***********************************************
                                        ' Zeile formatieren
                                        '***********************************************
                                        Call Format_Kalk_Detail_Line
                                        '***********************************************
                                        ' Daten drucken
                                        '***********************************************
                                        ArrGattung(0) = CurrentLine
                                        If SubTableCount = 0 Then SubTableCount = 1
                                        .Range("A" & CurrentLine).Value = "L"
                                        .Range("B" & CurrentLine).Value = "" 'Trim(db.getfieldvalue(TMPPosColl, 0, "NPKPOS"))
                                        .Range("D" & CurrentLine).Value = "Arbeitsvorbereitung"
                                        .Range("E" & CurrentLine).Value = "h"
                                        .Range("F" & CurrentLine).Value = db.getfielddouble(TMPPosColl, 0, "B_ZEIT")
                                        .Range("G" & CurrentLine).Value = db.getfielddouble(TMPPosColl, 0, "L_NETTO_A")
                                        .Range("H" & CurrentLine).FormulaLocal = "=RUNDEN(F" & CurrentLine & "*G" & CurrentLine & "*20;0)/20"
                                        .Range("A" & CurrentLine & ":I" & CurrentLine).Select
                                        Call ExcelDraw_Rahmen(Exl, Grid:=True, VerticalGrid:=True)
                                        CurrentLine = CurrentLine + 1
                                        SubTableCount = SubTableCount + 1
                                    End If
                                    If db.getfielddouble(TMPPosColl, 0, "F_ZEIT") > 0 Then
                                        '***********************************************
                                        ' Zeile formatieren
                                        '***********************************************
                                        Call Format_Kalk_Detail_Line
                                        '***********************************************
                                        ' Daten drucken
                                        '***********************************************
                                        If ArrGattung(UBound(ArrGattung)) = "" Then ArrGattung(0) = CurrentLine
                                        If SubTableCount = 0 Then SubTableCount = 1
                                        .Range("A" & CurrentLine).Value = "L"
                                        .Range("B" & CurrentLine).Value = "" 'Trim(db.getfieldvalue(TMPPosColl, 0, "NPKPOS"))
                                        .Range("D" & CurrentLine).Value = "Fabrikation"
                                        .Range("E" & CurrentLine).Value = "h"
                                        .Range("F" & CurrentLine).Value = db.getfielddouble(TMPPosColl, 0, "F_ZEIT")
                                        .Range("G" & CurrentLine).Value = db.getfielddouble(TMPPosColl, 0, "L_NETTO_F")
                                        .Range("H" & CurrentLine).FormulaLocal = "=RUNDEN(F" & CurrentLine & "*G" & CurrentLine & "*20;0)/20"
                                        .Range("A" & CurrentLine & ":I" & CurrentLine).Select
                                        Call ExcelDraw_Rahmen(Exl, Grid:=True, VerticalGrid:=True)
                                        CurrentLine = CurrentLine + 1
                                        SubTableCount = SubTableCount + 1
                                    End If
                                    If db.getfielddouble(TMPPosColl, 0, "M_ZEIT") > 0 Then
                                        '***********************************************
                                        ' Zeile formatieren
                                        '***********************************************
                                        Call Format_Kalk_Detail_Line
                                        '***********************************************
                                        ' Daten drucken
                                        '***********************************************
                                        If ArrGattung(UBound(ArrGattung)) = "" Then ArrGattung(0) = CurrentLine
                                        If SubTableCount = 0 Then SubTableCount = 1
                                        .Range("A" & CurrentLine).Value = "L"
                                        .Range("B" & CurrentLine).Value = "" 'Trim(db.getfieldvalue(TMPPosColl, 0, "NPKPOS"))
                                        .Range("D" & CurrentLine).Value = "Montage"
                                        .Range("E" & CurrentLine).Value = "h"
                                        .Range("F" & CurrentLine).Value = db.getfielddouble(TMPPosColl, 0, "M_ZEIT")
                                        .Range("G" & CurrentLine).Value = db.getfielddouble(TMPPosColl, 0, "L_NETTO_M")
                                        .Range("H" & CurrentLine).FormulaLocal = "=RUNDEN(F" & CurrentLine & "*G" & CurrentLine & "*20;0)/20"
                                        .Range("A" & CurrentLine & ":I" & CurrentLine).Select
                                        Call ExcelDraw_Rahmen(Exl, Grid:=True, VerticalGrid:=True)
                                    End If
                                    ' Nun werden noch die Kalkulationsdaten gedruckt.
                                    db.SeekSetField thSIVKLC, "NR1", db.getfieldvalue(TMPColl, i, "NR")
                                    db.SeekSetField thSIVKLC, "BEZ", "!Lohnposition"
                                    TMPKlcColl = db.CollCreateSeek(thSIVKLC, True)
                                    If db.GetRecordCount(TMPKlcColl) > 0 Then
                                        If SubTableCount >= 1 Then
                                            CurrentLine = CurrentLine + 1
                                            .Range("A" & CurrentLine & ":I" & CurrentLine).Select
                                            Call ExcelDraw_Rahmen(Exl, Grid:=True, VerticalGrid:=True)
                                            Call Draw_KLCTable_Summen(SubTableHirarchie, StartSummen, TMPZuschlag)
                                        End If
                                        SubTableHirarchie = ""
                                        StartSummen = CurrentLine + 1
                                        SubTableCount = 0
                                        TableSumme = 0
                                        TMPZuschlag = 0
                                        For j = 0 To db.GetRecordCount(TMPKlcColl) - 1
                                            If SubTableCount = 0 Then SubTableCount = 1
                                            If db.FieldIsEmpty(TMPKlcColl, j, "BEZ") = False Then
                                                '***********************************************
                                                ' Summen und |fffd|bertitel der Kalkulationsdaten drucken
                                                '***********************************************
                                                If j >= 0 And ArrGattung(UBound(ArrGattung)) = "" Then
                                                    ArrGattung(UBound(ArrGattung)) = CurrentLine + 1
                                                End If
                                                If SubTableHirarchie <> Trim(db.getfieldvalue(TMPKlcColl, j, "GATTUNG")) Then
                                                    If SubTableHirarchie = "" Then StartSummen = CurrentLine + 1
                                                    SubTableHirarchie = Trim(db.getfieldvalue(TMPKlcColl, j, "GATTUNG"))
                                                End If
                                                CurrentLine = CurrentLine + 1
                                                '***********************************************
                                                ' Zeile formatieren
                                                '***********************************************
                                                Call Format_Kalk_Detail_Line
                                                '***********************************************
                                                ' Daten drucken
                                                '***********************************************
                                                .Range("A" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "GATTUNG"))
                                                .Range("B" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "ART_NR"))
                                                .Range("D" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "BEZ"))
                                                .Range("E" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "EINH"))
                                                .Range("F" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "MENGE"))
                                                .Range("G" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "NETTOPR"))
                                                If IsNumeric(Trim(db.getfieldvalue(TMPKlcColl, j, "RES"))) = True Then
                                                    .Range("H" & CurrentLine).FormulaLocal = "=RUNDEN(" & db.getfielddouble(TMPKlcColl, j, "RES") & " * 20;0)/20"
                                                Else
                                                    .Range("H" & CurrentLine).Value = Trim(db.getfieldvalue(TMPKlcColl, j, "RES"))
                                                End If
                                                '******************************************
                                                ' Formatierungen f|fffd|r Kategorien setzen.
                                                '******************************************
                                                If .Range("A" & CurrentLine).Value = "A" Then
                                                    .Range("A" & CurrentLine & ":J" & CurrentLine).Font.Bold = True
                                                End If
                                                '******************************************
                                                ' Rahmen um die ganze Position zeichnen.
                                                '******************************************
                                                .Range("A" & CurrentLine & ":I" & CurrentLine).Select
                                                Call ExcelDraw_Rahmen(Exl, Grid:=True, VerticalGrid:=True)
                                            End If
                                        Next j
                                        CurrentLine = CurrentLine + 1
                                        TMPZuschlag = TMPZuschlag + db.getfielddouble(TMPPosColl, 0, "MAT_WK") * (db.getfielddouble(TMPPosColl, 0, "A_MF") - 1)
                                    Else
                                        CurrentLine = CurrentLine + 1
                                    End If
                                    db.colldelete TMPKlcColl
                                    If SubTableCount >= 1 Then Call Draw_KLCTable_Summen(SubTableHirarchie, StartSummen, TMPZuschlag, True)
                                    SubTableHirarchie = ""
                                End If
                                db.colldelete TMPPosColl
                            End If
                            CurrentLine = CurrentLine + 1
                            eSheet.Rows(CurrentLine & ":" & CurrentLine).RowHeight = Zwischenzeilenh|fffd|he
                            db.colldelete TMPKlcColl
                        End If
                    End If
                End With
                '*************************************************************************************************************
                ' Unterstreichen falls n|fffd|tig
                '*************************************************************************************************************
                If Left(Trim(db.getfieldvalue(TMPColl, i + 1, "TEXT")), 3) = "---" Or _
                        Left(Trim(db.getfieldvalue(TMPColl, i + 1, "TEXT")), 3) = "***" Then
                    eSheet.Range("D" & CurrentLine).Select
                    eSheet.Range("D" & CurrentLine).Font.Underline = xlUnderlineStyleSingle
                    i = i + 1
                End If
                If Left(Trim(db.getfieldvalue(TMPColl, i + 1, "RES")), 3) = "---" Then
                    eSheet.Range("I" & CurrentLine).Select
                    If i <= Count - 3 Then
                        If Trim(db.getfieldvalue(TMPColl, i + 2, "CO")) = Hirarchie1 Then
                            Call ExcelDraw_Rahmen(Exl, FrameLineStyle:=xlDouble, FrameLineWidth:=xlThick, EdgeLeft:=False, EdgeRight:=False, EdgeTop:=False)
                            CurrentLine = CurrentLine + 1
                            eSheet.Rows(CurrentLine & ":" & CurrentLine).RowHeight = 2
                        Else
                            Call ExcelDraw_Rahmen(Exl, EdgeLeft:=False, EdgeRight:=False, EdgeTop:=False)
                        End If
                    Else
                        Call ExcelDraw_Rahmen(Exl, FrameLineStyle:=xlDouble, FrameLineWidth:=xlThick, EdgeLeft:=False, EdgeRight:=False, EdgeTop:=False)
                    End If
                    i = i + 1
                End If
                '*************************************************************************************************************
                ' Abst|fffd|nde setzen.
                '*************************************************************************************************************
                If Trim(db.getfieldvalue(TMPColl, i, "CO")) = Hirarchie1 Then
                    CurrentLine = CurrentLine + 1
                    eSheet.Rows(CurrentLine & ":" & CurrentLine).RowHeight = Zwischenzeilenh|fffd|he
                End If
                If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "D" And Trim(db.getfieldvalue(TMPColl, i + 1, "CO")) = "K" Then
                    CurrentLine = CurrentLine + 1
                    eSheet.Rows(CurrentLine & ":" & CurrentLine).RowHeight = Zwischenzeilenh|fffd|he
                End If
                If Trim(db.getfieldvalue(TMPColl, i, "CO")) <> "S" And Trim(db.getfieldvalue(TMPColl, i + 1, "CO")) = "S" Then
                    CurrentLine = CurrentLine + 1
                    eSheet.Rows(CurrentLine & ":" & CurrentLine).RowHeight = Zwischenzeilenh|fffd|he
                End If
                If Left(Trim(db.getfieldvalue(TMPColl, i, "RES")), 3) = "---" And Trim(db.getfieldvalue(TMPColl, i - 1, "CO")) = "S" And _
                    Trim(db.getfieldvalue(TMPColl, i - 2, "CO")) = "D" Then
                    CurrentLine = CurrentLine + 1
                    eSheet.Rows(CurrentLine & ":" & CurrentLine).RowHeight = Zwischenzeilenh|fffd|he
                End If
                If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "T" Then
                    CurrentLine = CurrentLine + 1
                    eSheet.Rows(CurrentLine & ":" & CurrentLine).RowHeight = Zwischenzeilenh|fffd|he
                End If
                If Trim(db.getfieldvalue(TMPColl, i, "CO")) = "S" And (Trim(db.getfieldvalue(TMPColl, i + 1, "CO")) <> "S" Or db.FieldIsEmpty(TMPColl, i + 1, "RES") = True) Then
                    CurrentLine = CurrentLine + 1
                    eSheet.Rows(CurrentLine & ":" & CurrentLine).RowHeight = Zwischenzeilenh|fffd|he
                End If
                If db.getfielddouble(TMPColl, i, "POSNR") / 100 = Int(db.getfielddouble(TMPColl, i, "POSNR") / 100) And _
                   Trim(db.getfieldvalue(TMPColl, i, "CO")) = "K" And _
                   Trim(db.getfieldvalue(TMPColl, i, "POSNR")) <> Trim(db.getfieldvalue(TMPColl, i + 1, "POSNR")) Then
                        CurrentLine = CurrentLine + 1
                        eSheet.Rows(CurrentLine & ":" & CurrentLine).RowHeight = Zwischenzeilenh|fffd|he
                End If
                '*************************************************************************************************************
                ' N|fffd|chste Zeile aktivieren
                '*************************************************************************************************************
                CurrentLine = CurrentLine + 1
            End If
            If CurrentLine > 65500 Then i = Count       ' Es sind zu viele Datens|fffd|tze vorhanden
            If db.winProgressShow(i, 1) = -1 Then Exit For
            If ProzOfferte > 0 Then
                TMPResultat = TMPResultat + db.getfielddouble(TMPColl, i, "RES")
                If TMPResultat >= ProzOfferte Then
                    Exit For
                End If
            End If
        Next i
        
        db.winProgressEnd
        If k = 0 Then
            If ProzOfferte > 0 Then
                If TMPResultat >= ProzOfferte Then
                    Exit For
                End If
            End If
            If frmPrintDialog_DQ.optnachLohnstunden.Value = True Then
                '***********************************************
                ' Positionen drucken, dessen Lohnstunden 0 sind.
                '***********************************************
                db.colldelete TMPColl
                db.SeekSetField thFaktura, "NR", ">0.0000009999"
                db.SeekSetField thFaktura, "CO", "D"
                If frmPrintDialog_DQ.chkAllePositionen.Value = False Then
                    db.SeekSetField thFaktura, "RES", "! "
                End If
                db.SeekSetField thFaktura, "TLOHN", " "
                TMPColl = db.CollCreateSeek(thFaktura, False)
                Count = db.GetRecordCount(TMPColl) - 1
                '***********************************************
                ' Index setzen f|fffd|r Sortierung nach Resultat, da
                ' die Lohnstunden bei allen leer sind.
                '***********************************************
                For j = 0 To Count
                    If db.FieldIsEmpty(TMPColl, j, "RES") = True Then
                        db.SetFieldBool TMPColl, j, "SEL", True
                    End If
                Next j
                db.TableSetIndex TMPColl, "SEL,RES"
                db.TableReverseIndex TMPColl
            Else
                '***********************************************
                ' Filter setzen f|fffd|r Sortierung nach Resultat
                '***********************************************
                If frmPrintDialog_DQ.optnachResultat.Value = True And frmPrintDialog_DQ.chkAllePositionen.Value = True Then
                    db.colldelete TMPColl
                    db.SeekSetField thFaktura, "NR", ">0.0000009999"
                    db.SeekSetField thFaktura, "CO", "D"
                    db.SeekSetField thFaktura, "RES", " "
                    TMPColl = db.CollCreateSeek(thFaktura, False)
                    Count = db.GetRecordCount(TMPColl) - 1
                    '***********************************************
                    ' Index setzen f|fffd|r Sortierung nach Resultat
                    '***********************************************
                    db.TableSetIndex TMPColl, "RES,TLOHN"
                    db.TableReverseIndex TMPColl
                Else
                    k = 1
                End If
            End If
        End If
    Next k
    If frmPrintDialog_DQ.chkKapitelsummen.Value = True Then
        Set eSheet = Exl.Sheets("Kapiteldaten")
        eSheet.Visible = False
        Set eSheet = Exl.Sheets("Kapitelsummen")
        eSheet.Activate
        Call Print_Kapitelsummen
        Set eSheet = Exl.Sheets("Details")
        eSheet.Activate
    End If
    db.colldelete (TMPColl)
End Sub

Public Sub Format_Kalk_Detail_Line()
    '***********************************************
    ' Schriftart setzten
    '***********************************************
    eSheet.Range("A" & CurrentLine & ":J" & CurrentLine).Select
    Call Set_Font_Format("Kalkulationsliste")
    eSheet.Range("A" & CurrentLine).HorizontalAlignment = xlLeft
    '***********************************************
    ' Als Text formatieren
    '***********************************************
    eSheet.Range("B" & CurrentLine & ":C" & CurrentLine).Merge
    eSheet.Range("B" & CurrentLine).NumberFormat = "@"
    eSheet.Range("B" & CurrentLine).HorizontalAlignment = xlLeft
    eSheet.Range("E" & CurrentLine).NumberFormat = "@"
    eSheet.Range("E" & CurrentLine).HorizontalAlignment = xlLeft
    eSheet.Range("H" & CurrentLine & ":I" & CurrentLine).Merge
    eSheet.Range("H" & CurrentLine).HorizontalAlignment = xlRight
'    eSheet.Range("H" & CurrentLine).NumberFormat = "#,##0.00000"
    eSheet.Range("H" & CurrentLine).NumberFormat = "#,##0.00"
End Sub

Public Sub Print_Objektgliederung_CQ(CurrentLine As Long, TMPColl As Long, RecNr As Long)
    With eSheet
        If db.FieldIsEmpty(TMPColl, RecNr, "EINH") = False Then
            CurrentLine = CurrentLine + 1
            .Range("D" & CurrentLine).Value = db.getfieldvalue(TMPColl, RecNr, "OBJKEY")
        End If
    End With
End Sub

Public Function Get_GRK_Name(TMPColl As Long, RecNr As Long) As String
    Dim GRKText As String
    Dim GRKJahr As String
    Dim GRKNr As String
    Dim TMPNr As Long
    Dim InfoText As String
    Dim i As Long
    Dim RecCount As Long
    
    If thGRK > 0 Then
        db.tableclose thGRK
    End If
    If thGRK <= 0 Then
        thGRK = db.TableOpenExt(db.DirRoot() & "\ExcelPrint\Faktura.dqp", "", 0)
        db.TableSetIndex thGRK, "GRK"
        RecCount = db.GetRecordCount(thGRK) - 1
    End If
    
    TMPNr = CLng(Trim(db.getfieldvalue(TMPColl, RecNr, "NR")) / 100000)
    For i = 0 To RecCount
        If db.getfielddouble(thGRK, i, "L_NR") = TMPNr Then
            GRKNr = Mid(Trim(db.getfieldvalue(thGRK, i, "GRK")), 2, 3)
            GRKJahr = db.getfieldvalue(thGRK, i, "GRK")
            Exit For
        End If
    Next i
    
    If GRKText = "" Then
        db.ioInfoFileRead Left(db.DirNetDir(False), Len(db.DirNetDir(False)) - 6) & "DQGRK\" & GRKJahr, InfoText
        If InfoText <> "" Then GRKText = InfoText
    End If
    db.tableclose thGRK
    Get_GRK_Name = GRKText
End Function

Public Sub Print_MitFilter_CQ(CurrentLine As Long, TMPAusmass As Long, RecNr As Long)
    Static Old_Filter_Text_CQ
    With eSheet
        If dq.QueryFakturaMassIsValid(TMPAusmass, RecNr) = True Then ' Muss pr|fffd|fen, ob es Gliederungen enth|fffd|lt.
            If db.FieldIsEmpty(TMPAusmass, RecNr, "KAT") = False Then TMPFilterText = "Kategorie: " & Trim(db.getfieldvalue(TMPAusmass, RecNr, "KAT")) & " / "
            If db.FieldIsEmpty(TMPAusmass, RecNr, "OBJEKT_1") = False Then TMPFilterText = TMPFilterText & "Objekt: " & Trim(db.getfieldvalue(TMPAusmass, RecNr, "OBJEKT_1")) & " / "
            If db.FieldIsEmpty(TMPAusmass, RecNr, "OBJEKT_2") = False Then TMPFilterText = TMPFilterText & "Pos.Lage: " & Trim(db.getfieldvalue(TMPAusmass, RecNr, "OBJEKT_2")) & " / "
            If db.FieldIsEmpty(TMPAusmass, RecNr, "OBJEKT_3") = False Then TMPFilterText = TMPFilterText & "Variante: " & Trim(db.getfieldvalue(TMPAusmass, RecNr, "OBJEKT_3")) & " / "
            If db.FieldIsEmpty(TMPAusmass, RecNr, "KAG") = False Then TMPFilterText = TMPFilterText & "KAG: " & Trim(db.getfieldvalue(TMPAusmass, RecNr, "KAG")) & " / "
            If db.FieldIsEmpty(TMPAusmass, RecNr, "ELEMENT") = False Then TMPFilterText = TMPFilterText & "Elem: " & Trim(db.getfieldvalue(TMPAusmass, RecNr, "ELEMENT")) & " / "
            If db.FieldIsEmpty(TMPAusmass, RecNr, "NACHTRAG") = False Then TMPFilterText = TMPFilterText & "Nachtrag: " & Trim(db.getfieldvalue(TMPAusmass, RecNr, "NACHTRAG")) & " / "
            If db.FieldIsEmpty(TMPAusmass, RecNr, "VORBEM") = False Then TMPFilterText = TMPFilterText & "Vorbem: " & Trim(db.getfieldvalue(TMPAusmass, RecNr, "VORBEM")) & "   "
            
            If Len(TMPFilterText) > 1 Then TMPFilterText = Left(TMPFilterText, Len(TMPFilterText) - 3)
 '           If Old_Filter_Text_CQ <> TMPFilterText Then
                If TMPFilterText <> "" Then
                    .Range("B" & CurrentLine & ":F" & CurrentLine).Merge
                    .Range("B" & CurrentLine & ":F" & CurrentLine).Select
                    .Range("B" & CurrentLine & ":F" & CurrentLine).Font.Size = 6
                    .Range("B" & CurrentLine).HorizontalAlignment = xlLeft
                    .Range(CurrentLine & ":" & CurrentLine).RowHeight = 10.5
                    
                    .Range("B" & CurrentLine).Value = TMPFilterText
                    .Range("B" & CurrentLine & ":F" & CurrentLine).Select
                    Call ExcelDraw_Rahmen(Exl, Grid:=True, VerticalGrid:=True)
                    CurrentLine = CurrentLine + 1
 '                   Old_Filter_Text_CQ = TMPFilterText
                End If
 '           End If
        End If
    End With
End Sub

Attribute VB_Name = "modPrintHeader"
Public Function Get_Gliederung_Daten() As String
    Get_Gliederung_Daten = ""
    
    If frmPrintDialog_DQ.txtKapitel.Text <> "" And frmPrintDialog_DQ.txtKapitel.Text <> "0:Alle Kapitel" Then Get_Gliederung_Daten = "Kapitel: " & frmPrintDialog_DQ.txtKapitel.Text & " / "
    If frmPrintDialog_DQ.txtKategorie.Text <> "" Then Get_Gliederung_Daten = Get_Gliederung_Daten & "Kategorie: " & frmPrintDialog_DQ.txtKategorie.Text & " / "
    If frmPrintDialog_DQ.txtObjekt.Text <> "" Then Get_Gliederung_Daten = Get_Gliederung_Daten & "Objekt: " & frmPrintDialog_DQ.txtObjekt.Text & " / "
    If frmPrintDialog_DQ.txtPosLage.Text <> "" Then Get_Gliederung_Daten = Get_Gliederung_Daten & "Pos.Lage: " & frmPrintDialog_DQ.txtPosLage.Text & " / "
    If frmPrintDialog_DQ.txtVariante.Text <> "" Then Get_Gliederung_Daten = Get_Gliederung_Daten & "Variante: " & frmPrintDialog_DQ.txtVariante.Text & " / "
    If frmPrintDialog_DQ.txtKAG.Text <> "" Then Get_Gliederung_Daten = Get_Gliederung_Daten & "KAG: " & frmPrintDialog_DQ.txtKAG.Text & " / "
    If frmPrintDialog_DQ.txtElementcode.Text <> "" Then Get_Gliederung_Daten = Get_Gliederung_Daten & "Elem: " & frmPrintDialog_DQ.txtElementcode.Text & " / "
    If frmPrintDialog_DQ.txtNachtrag.Text <> "" Then Get_Gliederung_Daten = Get_Gliederung_Daten & "Nachtrag: " & frmPrintDialog_DQ.txtNachtrag.Text & " / "
    If frmPrintDialog_DQ.txtVorbemerkungen.Text <> "" Then Get_Gliederung_Daten = Get_Gliederung_Daten & "Vorbem: " & frmPrintDialog_DQ.txtVorbemerkungen.Text & "   "
    
    If Len(Get_Gliederung_Daten) > 1 Then Get_Gliederung_Daten = Left(Get_Gliederung_Daten, Len(Get_Gliederung_Daten) - 3)
    If Get_Gliederung_Daten = "" Then Get_Gliederung_Daten = "Gesamt"
End Function

Attribute VB_Name = "modPrintStarts"
Public Sub Start_DQ_Prints()
    Dim Filepath As String
    Filepath = db.DirRoot() & "\ExcelPrint\Faktura.dqd"
    Vorlagepfad = db.DirNetDir(False) & "\Vorlagen"
    DocumentPfad = db.ComponentSettingsReadString("DEVISPRINT", "DocumentVorlagepfad", Vorlagepfad)
    ProjektPfad = db.ComponentSettingsReadString("DEVISPRINT", "Projektpfad", Vorlagepfad)
    Projektschluessel = db.ComponentSettingsReadString("DEVISPRINT", "Projektschl|fffd|ssel", "")
    If db.ioFileExist(Filepath) = True Then
        Call Copy_Workbook
        Call Delete_Variabelliste
        thProjekt = dq.ProjectOpen(db.DirRoot() & "\ExcelPrint\Faktura.dqd")
        dq.ProjectGetHandles thDQD_Original, thDQM_Original, thKLC_Original, thDQP_Original
        Call Set_Fonts
        frmPrintDialog_DQ.Show 1
        If ProjektPfad <> "" Then
            Call Change_Save_Pfad(DocumentPfad)
            Call Update_Original_VWV_File
        End If
        dq.ProjectClose
    End If
End Sub

Attribute VB_Name = "modPrintTitelblatt"
Public Sub Print_Titelblatt()
    Call Print_Titelblatt_DQ
End Sub

Public Sub Print_Titelblatt_DQ()
    Dim TMPColl As Long
    Dim Count As Long
    Dim i As Long
    Dim j As Long
    Dim Drucken As Boolean
    Dim Rahmenstart As Long
    Dim Rahmenende As Long
    Dim Zus_Start As Long
    Dim Zus_Ende As Long
    Dim TextfeldGrenze As Double
    Dim Vergleichsbetrag As Double
    Dim Textfelder() As String
    Dim Seitenumbruch As Range
    Dim TextfeldVerschiebung As Double
    
    Call Print_Object_Daten
    Call Print_Footer_And_Header_Daten
'    TextfeldGrenze = Read_Next_Textfeld_Row(Startposition_Kalkulation, Textfelder())
'    If TextfeldGrenze = 0 Then TextfeldGrenze = 65000
''    Rahmenstart = CurrentLine
''    CurrentLine = CurrentLine + 1
'    Rahmenstart = Startposition_Kalkulation - 1
'    CurrentLine = Startposition_Kalkulation
'    Zus_Start = CurrentLine
'    '*********************************************************************************************************************
'    ' Zusammenstellung filtern
'    '*********************************************************************************************************************
'    db.SeekSetField thFaktura, "NR", "<0.0000000099"
'    db.SeekSetField thFaktura, "CO", "S"
''    db.SeekSetField thFaktura, "CO", "C"
'    TMPColl = db.CollCreateSeek(thFaktura, True)
'    '*********************************************************************************************************************
'    ' Zusammenstellung drucken
'    '*********************************************************************************************************************
'    Count = db.GetRecordCount(TMPColl) - 1
'    For i = 0 To Count
'        If db.FieldIsEmpty(TMPColl, i, "TEXT") = False Or db.FieldIsEmpty(TMPColl, i, "RES") = False Then
'            If db.GetFieldValue(TMPColl, i, "RES") = "------------" Then
'                With eSheet
'                    .Range("I" & CurrentLine - 1).Select
'                    Call ExcelDraw_Rahmen(Exl, EdgeLeft:=False, EdgeRight:=False, EdgeTop:=False)
'                End With
'                Exit For
'            Else
'                With eSheet
'                    .Range("A" & CurrentLine & ":B" & CurrentLine).Merge
'                    .Range("A" & CurrentLine).Value = Trim(db.GetFieldValue(TMPColl, i, "POSNR"))
'                    .Range("C" & CurrentLine).Value = Trim(db.GetFieldValue(TMPColl, i, "POSNRG"))
'                    .Range("D" & CurrentLine & ":G" & CurrentLine).Merge
'                    .Range("D" & CurrentLine).Value = db.GetFieldValue(TMPColl, i, "TEXT")
'                    .Range("I" & CurrentLine).Value = db.GetFieldValue(TMPColl, i, "RES")
'                    .Range("A" & CurrentLine & ":J" & CurrentLine).Select
'                    'Call Set_Font_Format("Standard")
'                End With
'                ' Hier muss gepr|fffd|ft werden, ob die Textfelder Verschoben werden m|fffd|ssen.
'                CurrentLine = CurrentLine + 1
'                If TextfeldGrenze <= CurrentLine Then
'                    TextfeldVerschiebung = TextfeldVerschiebung + eSheet.Rows(CurrentLine - 1).RowHeight
'                    For j = 0 To UBound(Textfelder)
'                        ActiveSheet.Shapes(Textfelder(j)).Select
'                        Selection.ShapeRange.IncrementTop eSheet.Rows(CurrentLine - 1).RowHeight
'                    Next j
'                End If
'            End If
'        End If
'        If CurrentLine > 65000 Then i = Count
'    Next i
'    db.CollDelete (TMPColl)
'    Zus_Ende = CurrentLine
'    '*********************************************************************************************************************
'    ' Abstand zwischen Zusammenstellung und Konditionen erstellen
'    '*********************************************************************************************************************
'    ' Hier muss gepr|fffd|ft werden, ob die Textfelder Verschoben werden m|fffd|ssen.
'    CurrentLine = CurrentLine + 1
'    If TextfeldGrenze <= CurrentLine Then
'        TextfeldVerschiebung = TextfeldVerschiebung + eSheet.Rows(CurrentLine - 1).RowHeight
'        For j = 0 To UBound(Textfelder)
'            ActiveSheet.Shapes(Textfelder(j)).Select
'            Selection.ShapeRange.IncrementTop eSheet.Rows(CurrentLine - 1).RowHeight
'        Next j
'    End If
'    '*********************************************************************************************************************
'    ' Konditionenblatt filtern
'    '*********************************************************************************************************************
'    db.SeekSetField thFaktura, "CO", "C"
'    TMPColl = db.CollCreateSeek(thFaktura, True)
'    '*********************************************************************************************************************
'    ' Konditionenblatt drucken
'    '*********************************************************************************************************************
'    Count = db.GetRecordCount(TMPColl) - 1
'    For i = 0 To Count
'        If db.FieldIsEmpty(TMPColl, i, "TEXT") = False Or db.FieldIsEmpty(TMPColl, i, "RES") = False Then
'            If db.FieldIsEmpty(TMPColl, i, "RES") = False And Left(Trim(db.GetFieldValue(TMPColl, i, "RES")), 3) <> "---" Then
'                Drucken = True
'                If Trim(db.GetFieldValue(TMPColl, i, "EINH")) = "Z" Then
'                    If db.GetFieldDouble(TMPColl, i, "RES") = Vergleichsbetrag Then
'                        Drucken = False
'                    Else
'                        If Left(Trim(db.GetFieldValue(TMPColl, i - 1, "RES")), 3) = "---" Or Left(Trim(db.GetFieldValue(TMPColl, i + 1, "RES")), 3) = "---" Then
'                            With eSheet
'                                .Range("I" & CurrentLine).Select
'                                Call ExcelDraw_Rahmen(Exl, EdgeLeft:=False, EdgeRight:=False, EdgeTop:=True, EdgeBottom:=False)
'                            End With
'                        End If
'                    End If
'                    Vergleichsbetrag = db.GetFieldDouble(TMPColl, i, "RES")
'                End If
'                If Drucken = True Then
'                    With eSheet
'                        '*****************************************************************************
'                        ' Daten f|fffd|r Tom
'                        .Range("N" & CurrentLine).Value = Trim(db.GetFieldValue(TMPColl, i, "POSNR"))
'                        .Range("O" & CurrentLine).Value = Trim(db.GetFieldValue(TMPColl, i, "POSNRG"))
'                        .Range("P" & CurrentLine).Value = Trim(db.GetFieldValue(TMPColl, i, "EINH"))
'                        .Range("Q" & CurrentLine).Value = Len(Trim(db.GetFieldValue(TMPColl, i, "XCHG_ALT")))
'                        '*****************************************************************************
'                        .Range("D" & CurrentLine).Value = db.GetFieldValue(TMPColl, i, "TEXT")
'                        If Len(Trim(db.GetFieldValue(TMPColl, i, "XCHG_ALT"))) = 1 Then
'                            .Range("I" & CurrentLine).Value = Trim(db.GetFieldValue(TMPColl, i, "RES"))
'                            .Range("H" & CurrentLine).NumberFormat = "@"
'                            .Range("H" & CurrentLine).HorizontalAlignment = xlRight
'                            .Range("H" & CurrentLine).Value = "("
'                            .Range("J" & CurrentLine).NumberFormat = "@"
'                            .Range("J" & CurrentLine).HorizontalAlignment = xlLeft
'                            .Range("J" & CurrentLine).Value = ")"
'                        Else
'                            .Range("I" & CurrentLine).Value = db.GetFieldValue(TMPColl, i, "RES")
'                        End If
'                        If Trim(db.GetFieldValue(TMPColl, i, "EINH")) <> "P" And Trim(db.GetFieldValue(TMPColl, i, "EINH")) <> "Z" Then
'                            .Range("E" & CurrentLine).Value = db.GetFieldValue(TMPColl, i, "EINH")
'                        End If
'                        .Range("F" & CurrentLine).Value = db.GetFieldValue(TMPColl, i, "MENGE")
'                        .Range("G" & CurrentLine).Value = db.GetFieldValue(TMPColl, i, "EINHPR")
'                        .Range("A" & CurrentLine & ":J" & CurrentLine).Select
'                        'Call Set_Font_Format("Standard")
'                    End With
'                    ' Hier muss gepr|fffd|ft werden, ob die Textfelder Verschoben werden m|fffd|ssen.
'                    CurrentLine = CurrentLine + 1
'                    If TextfeldGrenze <= CurrentLine Then
'                        TextfeldVerschiebung = TextfeldVerschiebung + eSheet.Rows(CurrentLine - 1).RowHeight
'                        For j = 0 To UBound(Textfelder)
'                            ActiveSheet.Shapes(Textfelder(j)).Select
'                            Selection.ShapeRange.IncrementTop eSheet.Rows(CurrentLine - 1).RowHeight
'                        Next j
'                    End If
'                End If
'            End If
'        End If
'        If CurrentLine > 65000 Then i = Count
'    Next i
'    db.CollDelete (TMPColl)
'    eSheet.Range("I" & CurrentLine - 1).Select
'    Call ExcelDraw_Rahmen(Exl, FrameLineWidth:=xlThick, FrameLineStyle:=xlDouble, EdgeLeft:=False, EdgeRight:=False, EdgeTop:=False)
'    eSheet.Range("A" & CurrentLine - 1 & ":J" & CurrentLine - 1).Select
'    Call Set_Font_Format("Teilkapitel")
'    ' Rahmen und Schattierung zeichnen
'    Rahmenende = CurrentLine
'    eSheet.Range("A" & Rahmenstart & ":J" & Rahmenende).Select
'    Call ExcelDraw_Rahmen(Exl)
'    Call ExcelDraw_Rahmen(Exl, FrameLineWidth:=xlThick, EdgeLeft:=False, EdgeTop:=False)
'    eSheet.Range("A" & CurrentLine).Select
'    eSheet.Range("A" & CurrentLine).Value = " "
'    ' Es muss die gesammte Zusammenstellung auf die zweite seite verschoben werden.
'    ' Zudem m|fffd|ssen die Textfelder, die nach unten verschoben wurden ebenfalls wieder zur|fffd|ckgeschoben werden.
'    If eSheet.HPageBreaks.Count >= 1 Then
'        eSheet.Rows(CStr(Zus_Start - 1) & ":" & CStr(Zus_Ende + 1)).Select
'        Selection.Copy
'        Set Seitenumbruch = ActiveSheet.HPageBreaks(ActiveSheet.HPageBreaks.Count).Location ' Auslesen des Seitenumbruches
'        '*******************************************************************
'        ' Da oben und unten eine weitere Zeile kopiert wird,
'        ' und vom Seitenumbruch ein abstand von 2 Zeilen gemacht wird,
'        ' muss hier noch 4 dazugez|fffd|hlt werden
'        '*******************************************************************
'        CurrentLine = Seitenumbruch.Row + Zus_Ende - Zus_Start + 4
'        eSheet.Range("A" & CurrentLine).Select
'        ActiveSheet.Paste
'        eSheet.Range("A" & CurrentLine & ":J" & CurrentLine + Zus_Ende - Zus_Start + 3).Select
'        Call ExcelDraw_Rahmen(Exl)
'        Call ExcelDraw_Rahmen(Exl, FrameLineWidth:=xlThick, EdgeLeft:=False, EdgeTop:=False)
'
'        eSheet.Rows(CurrentLine + Zus_Ende - Zus_Start + 1 & ":" & CurrentLine + Zus_Ende - Zus_Start + 1).Select
'        Selection.Delete Shift:=xlUp
'
'        eSheet.Rows(CStr(Zus_Start) & ":" & CStr(Zus_Ende)).Select
'        Selection.Delete Shift:=xlUp
'        eSheet.Range("A1").Select
'        '*******************************************************************
'        ' Alle Textfelder, die verschoben wurden, m|fffd|ssen wieder
'        ' zur|fffd|ckgesetzt werden.
'        '*******************************************************************
'        For j = 0 To UBound(Textfelder)
'            ActiveSheet.Shapes(Textfelder(j)).Select
'            Selection.ShapeRange.IncrementTop TextfeldVerschiebung * -1
'        Next j
'    End If
    If frmPrintDialog_DQ.txtWasserzeichen <> "" And frmPrintDialog_DQ.chkWasserzeichen = True Then
        Call Wasserzeichen_setzen(frmPrintDialog_DQ.txtWasserzeichen)
    End If
End Sub

Public Function Get_Personal_Telefon_Number(PersonalName As String) As String
    Dim Personalstamm As String
    Dim thPersonal As Long
    Dim collPersonal As Long
    
    Get_Personal_Telefon_Number = ""
    
    Personalstamm = Left(db.DirNetDir(False), Len(db.DirNetDir(False)) - 6) & "AQDAT\KFM\Dom_Pers.dbf"
    
    thPersonal = db.TableOpenExt(Personalstamm, "share", 0)
    db.SeekSetField thPersonal, "SUCH_NAME", PersonalName
    collPersonal = db.CollCreateSeek(thPersonal, False)
    If db.GetRecordCount(collPersonal) > 0 Then
        Get_Personal_Telefon_Number = Trim(db.getfieldvalue(collPersonal, 0, "PERS_TEL"))
    End If
    db.colldelete collPersonal
    db.tableclose thPersonal
End Function

Attribute VB_Name = "modPublicFunctions"
Public Sub Debug_Modus()
    Dim x As Integer
    x = 10 / 0
End Sub

Public Sub Change_Save_Pfad(Pfad As String)
    Dim vbp As VBProject                ' Codevorlage Projekt
    Dim vbc As VBComponent              ' Codevorlage Module
    Dim Bar As CommandBar
    Dim Cont As CommandBarControl
    Dim Sub1 As String
    Dim Sub2 As String
    Dim Sub3 As String
    Dim Codezeilen As String
    
    Set vbp = Exl.ActiveWorkbook.VBProject
    For Each vbc In vbp.VBComponents
        If vbc.Type = 100 Then
            If vbc.Name = Exl.ActiveWorkbook.VBProject.VBComponents(3).Name Then
                With Exl.ActiveWorkbook.VBProject.VBComponents
                    .Item(vbc.Name).CodeModule.DeleteLines 1, .Item(vbc.Name).CodeModule.CountOfLines
                    Sub1 = "Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)" & vbCrLf & _
                           "    On Error Resume Next" & vbCrLf & _
                           "    ChDir " & """" & Pfad & """" & vbCrLf & _
                           "End Sub" & vbCrLf & vbCrLf
                    Sub2 = "Private Sub Workbook_Open()" & vbCrLf & _
                           "    Dim Cont As CommandBarControl" & vbCrLf & _
                           "    Dim eSheet as Excel.Worksheet" & vbCrLf & vbCrLf & _
                           "    Application.OnKey ""^c"", """" 'disable Kopieren" & vbCrLf & _
                           "    Application.OnKey ""^v"", """" 'disable Einf|fffd|gen" & vbCrLf & _
                           "    Set Cont = Application.CommandBars.FindControl(Type:=msoControlButton, ID:=19)" & vbCrLf & _
                           "    Cont.Visible = False" & vbCrLf & _
                           "    Set Cont = Application.CommandBars.FindControl(Type:=msoControlSplitButtonPopup, ID:=6002)" & vbCrLf & _
                           "    Cont.Visible = False" & vbCrLf & _
                           "    Set Cont = Nothing" & vbCrLf & _
                           "    Application.CommandBars(1).Controls(2).Visible = False" & vbCrLf & _
                           "    Application.CommandBars(1).Controls(3).Visible = False" & vbCrLf & _
                           "    Set eSheet = Application.Sheets.Item(2)" & vbCrLf & _
                           "    eSheet.Activate" & vbCrLf & _
                           "    eSheet.EnableSelection = xlUnlockedCells" & vbCrLf & _
                           "    Set eSheet = Application.Sheets.Item(1)" & vbCrLf & _
                           "    eSheet.Activate" & vbCrLf & _
                           "    eSheet.EnableSelection = xlUnlockedCells" & vbCrLf & _
                           "End Sub" & vbCrLf & vbCrLf
                    Sub3 = "Private Sub Workbook_BeforeClose(Cancel As Boolean)" & vbCrLf & _
                           "    Dim Cont As CommandBarControl" & vbCrLf & vbCrLf & _
                           "    Application.OnKey ""^c"" 'enable Kopieren" & vbCrLf & _
                           "    Application.OnKey ""^v"" 'enable Einf|fffd|gen" & vbCrLf & _
                           "    Set Cont = Application.CommandBars.FindControl(Type:=msoControlButton, ID:=19)" & vbCrLf & _
                           "    Cont.Visible = True" & vbCrLf & _
                           "    Set Cont = Application.CommandBars.FindControl(Type:=msoControlSplitButtonPopup, ID:=6002)" & vbCrLf & _
                           "    Cont.Visible = True" & vbCrLf & _
                           "    Set Cont = Nothing" & vbCrLf & _
                           "    Application.CommandBars(1).Controls(2).Visible = True" & vbCrLf & _
                           "    Application.CommandBars(1).Controls(3).Visible = True" & vbCrLf & _
                           "End Sub" & vbCrLf & vbCrLf
                    Codezeilen = Sub1 & Sub2 & Sub3
                    .Item(vbc.Name).CodeModule.AddFromString (Codezeilen)
                End With
                Exl.OnKey "^c", ""
                Exl.OnKey "^v", ""
                Set Cont = Exl.CommandBars.FindControl(Type:=msoControlButton, ID:=19)
                Cont.Visible = False
                Set Cont = Exl.CommandBars.FindControl(Type:=msoControlSplitButtonPopup, ID:=6002)
                Cont.Visible = False
                Set Cont = Nothing
                Exl.CommandBars(1).Controls(2).Visible = False
                Exl.CommandBars(1).Controls(3).Visible = False
                Exit For
            End If
        End If
    Next vbc
End Sub

Public Function GetApplication(AppClass As String) As Object
    Const vbErr_AppNotRun = 429
    On Error Resume Next
    
    Set GetApplication = GetObject(Class:=AppClass)
    If Err.Number = vbErr_AppNotRun Then
        Set GetApplication = CreateObject(Class:=AppClass)
    End If
    On Error GoTo 0
End Function

Public Sub Erase_All_Gridlines()
    Dim i As Integer
    '*********************************************************************
    ' Alle Gitterlinien entfernen
    '*********************************************************************
    For i = 1 To Exl.Sheets.Count
        Set eSheet = Exl.Sheets.Item(i)
        eSheet.Activate
        eSheet.Range("A1").Select
        ActiveWindow.DisplayGridlines = False
        ' Zeigt Seitengr|fffd|sse mit gestrichelter Linie.
        ActiveWindow.View = xlPageBreakPreview
        ActiveWindow.View = xlNormalView
    Next i
    Set eSheet = Exl.Sheets.Item("Titelblatt")
    eSheet.Activate
End Sub

Public Sub Delete_Vorlagesheet()
    Exl.Workbooks.Item(1).Close SaveChanges:=False
End Sub

Public Function Read_All_Kapitel() As String
    Dim Filepath As String
    Dim DqpDatei As String
    Dim i As Integer
    
    dq.ProjectGetName Filepath
    db.strPathChangeExt DqpDatei, Filepath, ".dqp"
    thGRK = db.TableOpenExt(DqpDatei, "", 0)
    For i = 0 To db.GetRecordCount(thGRK) - 1
        If db.FieldIsEmpty(thGRK, i, "GRK") = False Then
            If Read_All_Kapitel <> "" Then Read_All_Kapitel = Read_All_Kapitel & ","
            Read_All_Kapitel = Read_All_Kapitel & i + 1 & ":" & Trim(db.getfieldvalue(thGRK, i, "GRK"))
        End If
    Next i
    db.tableclose thGRK
End Function

Public Function Get_Not_Selected_Kapitel(All_Kapitel As String, Sel_Kapitel As String) As String
    Dim Split_Sel_Kapitel() As String
    Dim Split_Sel_Kapitel1() As String
    Dim Split_Nr() As String
    Dim i As Integer
        
    If Sel_Kapitel <> "Alle Kapitel" Then
        Get_Not_Selected_Kapitel = All_Kapitel
        Split_Sel_Kapitel = Split(Sel_Kapitel, ",")
        For i = 0 To UBound(Split_Sel_Kapitel)
            Get_Not_Selected_Kapitel = Replace(Get_Not_Selected_Kapitel, Split_Sel_Kapitel(i), "")
            Get_Not_Selected_Kapitel = Replace(Get_Not_Selected_Kapitel, ",,", ",")
        Next i
    Else
        Get_Not_Selected_Kapitel = ""
    End If
    Get_Not_Selected_Kapitel = Replace(Get_Not_Selected_Kapitel, ",,", ",")
    If Left(Get_Not_Selected_Kapitel, 1) = "," Then Get_Not_Selected_Kapitel = Right(Get_Not_Selected_Kapitel, Len(Get_Not_Selected_Kapitel) - 1)
End Function

Public Sub Set_Filter_Kapitel_In_Faktura_TMP()
    Dim SelKapitel As String
    Dim SplitSelKapitel1() As String
    Dim SplitSelKapitel2() As String
    Dim KapitelRecNr() As Double
    Dim TMPFakturaColl() As Long
    Dim i As Long
    ReDim KapitelRecNr(0)
    ReDim TMPFakturaColl(0)
    
    If frmPrintDialog_DQ.txtKapitel.Text <> "" And frmPrintDialog_DQ.txtKapitel.Text <> "0:Alle Kapitel" Then
        
        db.SeekSetField thFaktura, "NR", "<0.0000000099"
        TMPFakturaColl(0) = db.CollCreateSeek(thFaktura, True)
        
        SelKapitel = frmPrintDialog_DQ.txtKapitel.Text
        SplitSelKapitel1 = Split(SelKapitel, ",")
        For i = 0 To UBound(SplitSelKapitel1)
            SplitSelKapitel2 = Split(SplitSelKapitel1(i), ":")
            ReDim Preserve KapitelRecNr(UBound(KapitelRecNr) + 2)
            KapitelRecNr(UBound(KapitelRecNr) - 1) = (CInt(SplitSelKapitel2(0)) - 1) * 100000
            KapitelRecNr(UBound(KapitelRecNr)) = (CInt(SplitSelKapitel2(0))) * 100000
        Next i
        For i = 1 To UBound(KapitelRecNr) Step 2
            db.SeekSetField thFaktura, "NR", ">" & CStr(KapitelRecNr(i))
            db.SeekSetField thFaktura, "NR", "<" & CStr(KapitelRecNr(i + 1))
            ReDim Preserve TMPFakturaColl(UBound(TMPFakturaColl) + 1)
            TMPFakturaColl(UBound(TMPFakturaColl)) = db.CollCreateSeek(thFaktura, True)
        Next i
        For i = 1 To UBound(TMPFakturaColl)
            db.TableAppendTable TMPFakturaColl(i), TMPFakturaColl(0)
        Next i
        db.CollSwapHandles TMPFakturaColl(0), thFaktura
        For i = 0 To UBound(TMPFakturaColl)
            db.colldelete TMPFakturaColl(i)
        Next i
    End If
End Sub

Public Sub Delete_Faktura_Tables()
    dq.QueryFakturaDelete
End Sub

Public Sub Set_Fonts()
    Set Fonts.Standard = eBook.Sheets.Item("Details").Range("M3").Font
    Set Fonts.Master = eBook.Sheets.Item("Details").Range("M4").Font
    Set Fonts.Kapitel = eBook.Sheets.Item("Details").Range("M5").Font
    Set Fonts.Teilkapitel = eBook.Sheets.Item("Details").Range("M6").Font
    Set Fonts.Ausmass = eBook.Sheets.Item("Details").Range("M7").Font
    Set Fonts.Vorausmass = eBook.Sheets.Item("Details").Range("M8").Font
    Set Fonts.Kalkulationsliste = eBook.Sheets.Item("Details").Range("M9").Font
    Set Fonts.Summen = eBook.Sheets.Item("Details").Range("M10").Font
    Set Fonts.Zwischensumme = eBook.Sheets.Item("Details").Range("M11").Font
    Set Fonts.Memofelder = eBook.Sheets.Item("Details").Range("M12").Font
End Sub

Public Function ExcelDraw_Rahmen(Exl As Excel.Application, Optional Grid As Boolean = False, Optional HorizontalGrid As Boolean = False, Optional VerticalGrid As Boolean = False, _
                Optional GridLineStyle As Long = 1, Optional GridLineWidth As Long = 2, Optional GridLineColor As Long = -4105, _
                Optional FrameLineStyle As Long = 1, Optional FrameLineWidth As Long = 2, Optional FrameLineColor As Long = -4105, _
                Optional EdgeLeft As Boolean = True, Optional EdgeTop As Boolean = True, Optional EdgeBottom As Boolean = True, Optional EdgeRight As Boolean = True)
    ' Die Selectionierung, um die der Rahmen gezogen werden soll,
    ' muss schon gegeben sein, bevor diese Function aufgerufen wird.
    If EdgeLeft = True Then
        With Exl.Selection.Borders(xlEdgeLeft)
            .LineStyle = FrameLineStyle
            .Weight = FrameLineWidth
            .ColorIndex = FrameLineColor
        End With
    End If
    If EdgeTop = True Then
        With Exl.Selection.Borders(xlEdgeTop)
            .LineStyle = FrameLineStyle
            .Weight = FrameLineWidth
            .ColorIndex = FrameLineColor
        End With
    End If
    If EdgeBottom = True Then
        With Exl.Selection.Borders(xlEdgeBottom)
            .LineStyle = FrameLineStyle
            .Weight = FrameLineWidth
            .ColorIndex = FrameLineColor
        End With
    End If
    If EdgeRight = True Then
        With Exl.Selection.Borders(xlEdgeRight)
            .LineStyle = FrameLineStyle
            .Weight = FrameLineWidth
            .ColorIndex = FrameLineColor
        End With
    End If
    If Grid = True Then
        If HorizontalGrid = True Then
            Exl.Selection.Borders(xlInsideHorizontal).LineStyle = GridLineStyle
            Exl.Selection.Borders(xlInsideHorizontal).Weight = GridLineWidth
            Exl.Selection.Borders(xlInsideHorizontal).ColorIndex = GridLineColor
        End If
        If VerticalGrid = True Then
            Exl.Selection.Borders(xlInsideVertical).LineStyle = GridLineStyle
            Exl.Selection.Borders(xlInsideVertical).Weight = GridLineWidth
            Exl.Selection.Borders(xlInsideVertical).ColorIndex = GridLineColor
        End If
    Else
        Exl.Selection.Borders(xlInsideVertical).LineStyle = xlNone
    End If
End Function

Public Sub Read_Proj_Infos(thPrint As Long)
    Dim Titel As String
    Dim ProjektPfad As String
    Dim ProDatei As String
    Dim thPro As Long
    Dim Filepath As String
    Dim lSachb As Long
    Dim lRechNr As Long
    Dim lVorbem1 As Long
    Dim lVorbem2 As Long
    Dim lVorbem3 As Long
    
    lSachb = db.GetFieldNr(thPrint, "SACHB")
    lRechNr = db.GetFieldNr(thPrint, "RECH-NR")
    lVorbem1 = db.GetFieldNr(thPrint, "VORBEM1")
    lVorbem2 = db.GetFieldNr(thPrint, "VORBEM2")
    lVorbem3 = db.GetFieldNr(thPrint, "VORBEM3")
    
    If lSachb > 0 Then db.GetFieldTitleByName thPrint, "SACHB", Proj.Titel_Sachb
    If lRechNr > 0 Then db.GetFieldTitleByName thPrint, "RECH-NR", Proj.Titel_Rechnr
    If lVorbem1 > 0 Then db.GetFieldTitleByName thPrint, "VORBEM1", Proj.Titel_Vorbem
    If Len(Proj.Titel_Vorbem) > 1 Then
        Proj.Titel_Vorbem = Left(Proj.Titel_Vorbem, Len(Proj.Titel_Vorbem) - 1)
    Else
        Proj.Titel_Vorbem = ""
    End If
    If lSachb > 0 Then Proj.Sachbearbeiter = Trim(db.getfieldvalue(thPrint, 0, "SACHB"))
    If lRechNr > 0 Then Proj.Rechnungsnummer = Trim(db.getfieldvalue(thPrint, 0, "RECH-NR"))
    If lVorbem1 > 0 And lVorbem2 > 0 And lVorbem3 > 0 Then Proj.Vorbemerkungen = Trim(db.getfieldvalue(thPrint, 0, "VORBEM1")) & _
                            Trim(db.getfieldvalue(thPrint, 0, "VORBEM2")) & _
                            Trim(db.getfieldvalue(thPrint, 0, "VORBEM3"))

    dq.ProjectGetName Filepath
    db.strPathChangeExt ProDatei, Filepath, ".pro"
    thPro = db.TableOpenExt(ProDatei, "", 0)
    Proj.Beschreibung = Trim(db.getfieldvalue(thPro, 0, "PRJDESCR"))
    db.tableclose thPro
End Sub

Public Sub Create_TextFeld(Inhalt As String, Optional Left As Single = 18.75, Optional Top As Single = 30.75, Optional Width As Single = 174, Optional Height As Single = 93.75, Optional Rahmen As Boolean = False, Optional Textfeldname As String = "")
'
' Inhalt muss mit vbLf getrennt werden.
' Zur Sicherheit wird der String noch |fffd|berpr|fffd|ft und alle vbCrLf
' mit vbLf ersetzt.
'
    '********************************************************************************************
    ' Zeichnen des Textfeldes
    '********************************************************************************************
    Inhalt = Replace(Inhalt, vbCrLf, vbLf)
    ActiveSheet.Shapes.AddTextbox(msoTextOrientationHorizontal, Left, Top, Width, Height).Select
    With Selection.Font
        .Name = "Verdana"
        .FontStyle = "Standard"
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ColorIndex = xlAutomatic
    End With
    '********************************************************************************************
    ' Rahmen um das Textfeld entfernen
    '********************************************************************************************
    If Rahmen = False Then
        Selection.ShapeRange.Fill.Visible = msoTrue
        Selection.ShapeRange.Fill.Solid
        Selection.ShapeRange.Fill.ForeColor.SchemeColor = 65
        Selection.ShapeRange.Fill.Transparency = 0#
        Selection.ShapeRange.Line.Weight = 0.75
        Selection.ShapeRange.Line.DashStyle = msoLineSolid
        Selection.ShapeRange.Line.Style = msoLineSingle
        Selection.ShapeRange.Line.Transparency = 0#
        Selection.ShapeRange.Line.Visible = msoFalse
    End If
    '********************************************************************************************
    ' Dem Textfeld einen Namen geben.
    '********************************************************************************************
    If Textfeldname <> "" Then
        Selection.Name = Textfeldname
    End If
    '********************************************************************************************
    ' Textfeld mit gew|fffd|nschtem Inhalt f|fffd|llen.
    '********************************************************************************************
    Selection.Characters.Text = Inhalt
End Sub

Public Sub Copy_Workbook()
    Exl.Sheets.Select
    Exl.Sheets(1).Activate
    Exl.Sheets.Copy
End Sub

Public Sub Delete_Not_Require_Sheets(Sheetnames As String)
    Dim SplitSheets() As String
    Dim i As Long
    
    If Sheetnames = "" Then Exit Sub
    Exl.DisplayAlerts = False
    SplitSheets = Split(Sheetnames, ",")
    For i = 0 To UBound(SplitSheets)
        Exl.Sheets(SplitSheets(i)).Delete
    Next i
    Exl.DisplayAlerts = True
End Sub

Public Function Read_Adresse(Feldinhalt As String) As String
    Dim Feldliste As String
    Dim thPRA As Long
    Dim CollPra As Long
    Dim Split_pra() As String
    Dim Split_Felder1() As String
    Dim Split_Felder2() As String
    Dim Split_Projekt() As String
    Dim ProjektName As String
    Dim TMPPfad As String
    Dim Adresszeile As String
    Dim i As Long
    Dim j As Long
    
    Read_Adresse = ""
    If Feldinhalt = "" Then Exit Function
    Split_pra = Split(Feldinhalt, " | ")
    If Split_pra(1) = "" Then
        Feldliste = "ANREDE /n NAME,VORNAME /n STRASSE /n PLZ,ORT"
    Else
        Feldliste = Split_pra(1)
    End If
    If ProjektPfad = "" Then Exit Function
    Split_Projekt = Split(ProjektPfad, "\")
    db.strPathFileName ProjektPfad, ProjektName, False
    TMPPfad = Left(ProjektPfad, Len(ProjektPfad) - Len(ProjektName) - 4)
    thPRA = db.tableopen(db.DirRoot() & "\ExcelPrint\Faktura.pra")
'    thPRA = db.TableOpenExt(TMPPfad & ProjektName & ".pra", "share", 0)
    db.SeekSetField thPRA, "ADRTYP", Trim(Right(Split_pra(0), Len(Split_pra(0)) - 4))
    db.SeekSetField thPRA, "PRJKEY", Projektschluessel
    CollPra = db.CollCreateSeek(thPRA, False)
    If db.GetRecordCount(CollPra) > 0 Then
        Split_Felder1 = Split(Feldliste, " /n ")
        For i = 0 To UBound(Split_Felder1)
            Split_Felder2 = Split(Split_Felder1(i), ",")
            Adresszeile = ""
            For j = 0 To UBound(Split_Felder2)
'                    If Trim(db.GetFieldValue(CollPra, 0, Split_Felder2(j))) <> "" Then
                    If Adresszeile <> "" Then Adresszeile = Adresszeile & " "
                    Adresszeile = Adresszeile & Trim(db.getfieldvalue(CollPra, 0, Split_Felder2(j)))
'                    End If
            Next j
            If Trim(Split_pra(2)) = "exkl" Then
                If Adresszeile <> "" Then
                    If Trim(Read_Adresse) <> "" Then
                        Read_Adresse = Read_Adresse & vbLf & Adresszeile
                    Else
                        Read_Adresse = Adresszeile
                    End If
                End If
            Else
                If Trim(Read_Adresse) <> "" Then
                    Read_Adresse = Read_Adresse & vbLf & Adresszeile
                Else
                    Read_Adresse = Adresszeile
                End If
            End If
        Next i
    End If
    db.colldelete CollPra
    db.tableclose thPRA
End Function

Public Sub Set_Font_Format(Schrift As String)
    Select Case Schrift
    Case "Standard"
        Selection.Font.Name = Fonts.Standard.Name
        Selection.Font.Size = Fonts.Standard.Size
        Selection.Font.Bold = Fonts.Standard.Bold
        Selection.Font.Italic = Fonts.Standard.Italic
        Selection.Font.Color = Fonts.Standard.Color
        Selection.Font.Background = Fonts.Standard.Background
        Selection.Font.Shadow = Fonts.Standard.Shadow
        Selection.Font.Strikethrough = Fonts.Standard.Strikethrough
    Case "Master"
        Selection.Font.Name = Fonts.Master.Name
        Selection.Font.Size = Fonts.Master.Size
        Selection.Font.Bold = Fonts.Master.Bold
        Selection.Font.Italic = Fonts.Master.Italic
        Selection.Font.Color = Fonts.Master.Color
        Selection.Font.Background = Fonts.Master.Background
        Selection.Font.Shadow = Fonts.Master.Shadow
        Selection.Font.Strikethrough = Fonts.Master.Strikethrough
    Case "Kapitel"
        Selection.Font.Name = Fonts.Kapitel.Name
        Selection.Font.Size = Fonts.Kapitel.Size
        Selection.Font.Bold = Fonts.Kapitel.Bold
        Selection.Font.Italic = Fonts.Kapitel.Italic
        Selection.Font.Color = Fonts.Kapitel.Color
        Selection.Font.Background = Fonts.Kapitel.Background
        Selection.Font.Shadow = Fonts.Kapitel.Shadow
        Selection.Font.Strikethrough = Fonts.Kapitel.Strikethrough
    Case "Teilkapitel"
        Selection.Font.Name = Fonts.Teilkapitel.Name
        Selection.Font.Size = Fonts.Teilkapitel.Size
        Selection.Font.Bold = Fonts.Teilkapitel.Bold
        Selection.Font.Italic = Fonts.Teilkapitel.Italic
        Selection.Font.Color = Fonts.Teilkapitel.Color
        Selection.Font.Background = Fonts.Teilkapitel.Background
        Selection.Font.Shadow = Fonts.Teilkapitel.Shadow
        Selection.Font.Strikethrough = Fonts.Teilkapitel.Strikethrough
    Case "Ausmass"
        Selection.Font.Name = Fonts.Ausmass.Name
        Selection.Font.Size = Fonts.Ausmass.Size
        Selection.Font.Bold = Fonts.Ausmass.Bold
        Selection.Font.Italic = Fonts.Ausmass.Italic
        Selection.Font.Color = Fonts.Ausmass.Color
        Selection.Font.Background = Fonts.Ausmass.Background
        Selection.Font.Shadow = Fonts.Ausmass.Shadow
        Selection.Font.Strikethrough = Fonts.Ausmass.Strikethrough
    Case "Vorausmass"
        Selection.Font.Name = Fonts.Vorausmass.Name
        Selection.Font.Size = Fonts.Vorausmass.Size
        Selection.Font.Bold = Fonts.Vorausmass.Bold
        Selection.Font.Italic = Fonts.Vorausmass.Italic
        Selection.Font.Color = Fonts.Vorausmass.Color
        Selection.Font.Background = Fonts.Vorausmass.Background
        Selection.Font.Shadow = Fonts.Vorausmass.Shadow
        Selection.Font.Strikethrough = Fonts.Vorausmass.Strikethrough
    Case "Kalkulationsliste"
        Selection.Font.Name = Fonts.Kalkulationsliste.Name
        Selection.Font.Size = Fonts.Kalkulationsliste.Size
        Selection.Font.Bold = Fonts.Kalkulationsliste.Bold
        Selection.Font.Italic = Fonts.Kalkulationsliste.Italic
        Selection.Font.Color = Fonts.Kalkulationsliste.Color
        Selection.Font.Background = Fonts.Kalkulationsliste.Background
        Selection.Font.Shadow = Fonts.Kalkulationsliste.Shadow
        Selection.Font.Strikethrough = Fonts.Kalkulationsliste.Strikethrough
    Case "Summen"
        Selection.Font.Name = Fonts.Summen.Name
        Selection.Font.Size = Fonts.Summen.Size
        Selection.Font.Bold = Fonts.Summen.Bold
        Selection.Font.Italic = Fonts.Summen.Italic
        Selection.Font.Color = Fonts.Summen.Color
        Selection.Font.Background = Fonts.Summen.Background
        Selection.Font.Shadow = Fonts.Summen.Shadow
        Selection.Font.Strikethrough = Fonts.Summen.Strikethrough
    Case "Zwischensumme"
        Selection.Font.Name = Fonts.Zwischensumme.Name
        Selection.Font.Size = Fonts.Zwischensumme.Size
        Selection.Font.Bold = Fonts.Zwischensumme.Bold
        Selection.Font.Italic = Fonts.Zwischensumme.Italic
        Selection.Font.Color = Fonts.Zwischensumme.Color
        Selection.Font.Background = Fonts.Zwischensumme.Background
        Selection.Font.Shadow = Fonts.Zwischensumme.Shadow
        Selection.Font.Strikethrough = Fonts.Zwischensumme.Strikethrough
    Case "Memofelder"
        Selection.Font.Name = Fonts.Memofelder.Name
        Selection.Font.Size = Fonts.Memofelder.Size
        Selection.Font.Bold = Fonts.Memofelder.Bold
        Selection.Font.Italic = Fonts.Memofelder.Italic
        Selection.Font.Color = Fonts.Memofelder.Color
        Selection.Font.Background = Fonts.Memofelder.Background
        Selection.Font.Shadow = Fonts.Memofelder.Shadow
        Selection.Font.Strikethrough = Fonts.Memofelder.Strikethrough
    Case "Spezial"
        Selection.Font.Name = "Verdana"
        Selection.Font.Size = 14
        Selection.Font.Bold = False
    End Select
'    Exl.Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
End Sub

Public Sub Get_Text_Array(Text As String, Split_Text() As String)
Dim i As Long
Dim j As Long
Dim TextCount As Double
Dim TMPSplit() As String

ReDim Split_Text(0)
If Len(Text) > 1024 Then
    TMPSplit = Split(Text, " ")
    TextCount = 0
    Start = TextCount
    For i = 0 To UBound(TMPSplit)
        TextCount = TextCount + Len(TMPSplit(i)) + 1
        If TextCount > 1024 Then
            TextCount = Len(TMPSplit(i)) + 1
            ReDim Preserve Split_Text(UBound(Split_Text) + 1)
        End If
        If Split_Text(UBound(Split_Text)) <> "" Then Split_Text(UBound(Split_Text)) = Split_Text(UBound(Split_Text)) & " "
        Split_Text(UBound(Split_Text)) = Split_Text(UBound(Split_Text)) & TMPSplit(i)
    Next i
Else
    Split_Text(0) = Text
End If
End Sub

Public Sub Write_VWV_Werte_to_DB()
    Dim i As Long
    Dim thVwv As Long

    If UBound(DFL) >= 0 And Trim(DFL(0).Feldname) <> "" Then
        thVwv = db.TableOpenExt(db.DirRoot() & "\ExcelPrint\Faktura.vwv", "", 0)
        With frmPrintDialog_DQ.Controls("MPDruckeinstellungen").Pages("Page6")
            For i = 0 To UBound(DFL)
                Select Case UCase(DFL(i).EXTYPE)
                Case "POPUP"
                    db.SetFieldValue thVwv, 0, DFL(i).Feldname, .Controls("cbo" & DFL(i).Feldname).Text
                Case Else
                    db.SetFieldValue thVwv, 0, DFL(i).Feldname, .Controls("txt" & DFL(i).Feldname).Text
                End Select
            Next i
        End With
        db.tableclose thVwv
    End If
End Sub

Public Sub Update_Original_VWV_File()
    Dim i As Long
    Dim thVwv As Long
    Dim VWV_Pfad As String
    
    If UBound(DFL) >= 0 And Trim(DFL(0).Feldname) <> "" Then
        db.strPathChangeExt VWV_Pfad, ProjektPfad, ".vwv"
        thVwv = db.tableopen(VWV_Pfad)
        With frmPrintDialog_DQ.Controls("MPDruckeinstellungen").Pages("Page6")
            For i = 0 To UBound(DFL)
                If DFL(i).Feldname <> "" Then
                    ' Abfrage ob es sich bei der VWV-Variable um eine Adresse handelt.
                    ' Adressen d|fffd|rfen nicht zur|fffd|ckgeschrieben werden.
                    If Left(DFL(i).Feldname, 5) <> "RECH_" And Left(DFL(i).Feldname, 4) <> "REF_" Then
                        Select Case UCase(DFL(i).EXTYPE)
                        Case "POPUP"
                            db.SetFieldValue thVwv, 0, DFL(i).Feldname, .Controls("cbo" & DFL(i).Feldname).Text
                        Case Else
                            db.SetFieldValue thVwv, 0, DFL(i).Feldname, .Controls("txt" & DFL(i).Feldname).Text
                        End Select
                    End If
                End If
            Next i
        End With
        db.tableclose thVwv
    End If
End Sub

Attribute VB_Name = "modVariabelliste"
Public Sub Delete_Variabelliste()
On Error GoTo errHandler
    Select Case Druck_Type
    Case "Kalkulationsliste"
        ActiveSheet.Range("L2").Value = ""
        ActiveSheet.Range("L6").Value = ""
        ActiveSheet.Range("L26").Value = ""
        ActiveSheet.Range("L30").Value = ""
        ActiveSheet.Range("L36").Value = ""
        ActiveSheet.Range("L45").Value = ""
        ActiveSheet.Range("L46").Value = ""
    End Select
    
    ActiveSheet.Shapes("Variabelliste").Select
    Selection.Delete
    ActiveSheet.Shapes("Konstruckte").Select
    Selection.Delete
    ActiveSheet.Shapes("Files").Select
    Selection.Delete
    ActiveSheet.Shapes("Adressdefinition").Select
    Selection.Delete
    ActiveSheet.Shapes("lstAdressfelder").Select
    Selection.Delete
    ActiveSheet.Shapes("txtZusStartposition").Select
    Startposition_Kalkulation = CDbl(ActiveSheet.txtZusStartposition.Text)
    Selection.Delete
    ActiveSheet.Shapes("optexklLeerZeilen").Select
    Selection.Delete
    ActiveSheet.Shapes("optinklLeerZeilen").Select
    Selection.Delete
    ActiveSheet.Shapes("imgExklLeerZeilen").Select
    Selection.Delete
    ActiveSheet.Shapes("imgInklLeerZeilen").Select
    Selection.Delete

errHandler:
    On Error Resume Next
End Sub

Public Sub Read_Variabellisten_For_Edit(Dateiname As String)
    Dim i As Long
    Dim j As Long
    Dim thPro As Long
    Dim Count_Pro As Long
    Dim thVwv As Long
    Dim Count_Vwv As Long
    Dim FieldName As String
    Dim FieldTitel As String
    Dim Split_Projekt() As String
    Dim ProjektName As String
    Dim Adressdefinitionstext As String
    
'    If ProjektPfad = "" Then Exit Sub
'    Split_Projekt = Split(ProjektPfad, "\")
'    ProjektName = Split_Projekt(UBound(Split_Projekt) - 1)
    Select Case Dateiname
    Case "Projektquick"
'        If db.ioFileExist(ProjektPfad & ProjektName & ".pro") = True Then
            thPro = db.tableopen(db.DirRoot() & "\ExcelPrint\Feldnamen.pro")
'            thPro = db.TableOpenExt(ProjektPfad & ProjektName & ".pro", "", 0)
            Count_Pro = db.GetFieldCount(thPro)
            With ActiveSheet.Variabelliste
                .Clear
                For i = 0 To Count_Pro - 1
                    db.GetFieldName thPro, i, FieldName
                    For j = 20 To Len(FieldName) Step -1
                        FieldName = FieldName & " "
                    Next j
                    db.GetFieldTitle thPro, i, FieldTitel
                    .AddItem "PRO_" & FieldName & " " & FieldTitel
                Next i
            End With
            db.tableclose thPro
'        End If
    Case "Vwv Daten"
'        If db.ioFileExist(ProjektPfad & ProjektName & ".vwv") = True Then
            thPro = db.tableopen(db.DirRoot() & "\ExcelPrint\Feldnamen.vwv")
'            thPro = db.TableOpenExt(ProjektPfad & ProjektName & ".vwv", "", 0)
            Count_Pro = db.GetFieldCount(thPro)
            With ActiveSheet.Variabelliste
                .Clear
                For i = 0 To Count_Pro - 1
                    db.GetFieldName thPro, i, FieldName
                    For j = 20 To Len(FieldName) Step -1
                        FieldName = FieldName & " "
                    Next j
                    db.GetFieldTitle thPro, i, FieldTitel
                    .AddItem "VWV_" & FieldName & " " & FieldTitel
                Next i
            End With
            db.tableclose thPro
'        End If
    Case "Allgemeine Daten"
        If db.ioFileExist(db.DirRoot() & "\QPHEADER.DBF") = True Then
            thPro = db.TableOpenExt(db.DirRoot() & "\QPHEADER.DBF", "read", 0)
            Count_Pro = db.GetFieldCount(thPro)
            With ActiveSheet.Variabelliste
                .Clear
                For i = 0 To Count_Pro - 1
                    db.GetFieldName thPro, i, FieldName
                    For j = 20 To Len(FieldName) Step -1
                        FieldName = FieldName & " "
                    Next j
                    db.GetFieldTitle thPro, i, FieldTitel
                    .AddItem "DBF_" & FieldName & " " & FieldTitel
                Next i
            End With
            db.tableclose thPro
        End If
    Case "Adressdefinition"
'        If db.ioFileExist(ProjektPfad & ProjektName & ".pra") = True Then
            thPro = db.tableopen(db.DirRoot() & "\ExcelPrint\Feldnamen.pra")
'            thPro = db.TableOpenExt(ProjektPfad & ProjektName & ".pra", "", 0)
            Count_Pro = db.GetFieldCount(thPro)
            With ActiveSheet.lstAdressfelder
                .Clear
                For i = 0 To Count_Pro - 1
                    db.GetFieldName thPro, i, FieldName
                    For j = 10 To Len(FieldName) Step -1
                        FieldName = FieldName & " "
                    Next j
                    db.GetFieldTitle thPro, i, FieldTitel
                    .AddItem FieldName & " " & FieldTitel
                Next i
            End With
            db.tableclose thPro
            Adressdefinitionstext = Trim(db.ComponentSettingsReadString("DEVISPRINT", "Adressdefinition", "Anrede /n Name,Vorname /n Strasse /n PLZ,Ort"))
            Adressdefinitionstext = Replace(Adressdefinitionstext, " /n ", vbLf)
            ActiveSheet.Adressdefinition.Text = Adressdefinitionstext
'        End If
    End Select
End Sub

Public Sub Print_Object_Daten()
Dim i As Long
Dim j As Long
Dim Split_DB() As String
Dim Count As Long
Dim thTable As Long
Dim Feld As Shape

Count = ActiveSheet.Shapes.Count
For i = 1 To Count
    If Count < i Then Exit For
    Split_DB = Split(ActiveSheet.Shapes(i).Name, "_")
    If UBound(Split_DB) > 0 Then
        If UCase(Split_DB(0)) = "DBF" Or UCase(Split_DB(0)) = "VWV" Or UCase(Split_DB(0)) = "PRO" Or UCase(Split_DB(0)) = "PRA" Then
'            Select Case UCase(Split_DB(0))
'            Case "DBF"  ' QPHeadres
'                thTable = db.TableOpenExt(db.DirRoot() & "\QPHeader." & Split_DB(0), "read", 0)
'            Case "VWV"  ' Vwv Variblen
'                thTable = db.TableOpenExt(db.DirRoot() & "\ExcelPrint\Faktura." & Split_DB(0), "", 0)
'            Case "PRO"  ' Projektquickdaten
'                thTable = db.TableOpenExt(db.DirRoot() & "\ExcelPrint\Faktura." & Split_DB(0), "", 0)
'            Case "PRA"  ' Adressen, die in Projektquick zugeordnet wurden.
'                thTable = db.TableOpenExt(db.DirRoot() & "\ExcelPrint\Faktura." & Split_DB(0), "", 0)
'            End Select
            Select Case UCase(Split_DB(0))
            Case "DBF"  ' QPHeadres
                thTable = db.tableopen(db.DirRoot() & "\QPHeader." & Split_DB(0))
            Case "VWV"  ' Vwv Variblen
                thTable = db.tableopen(db.DirRoot() & "\ExcelPrint\Faktura." & Split_DB(0))
            Case "PRO"  ' Projektquickdaten
                thTable = db.tableopen(db.DirRoot() & "\ExcelPrint\Faktura." & Split_DB(0))
            Case "PRA"  ' Adressen, die in Projektquick zugeordnet wurden.
                thTable = db.tableopen(db.DirRoot() & "\ExcelPrint\Faktura." & Split_DB(0))
            End Select
            Set Feld = ActiveSheet.Shapes(i)
            Feld.Select
            If UBound(Split_DB) > 1 Then
                For j = 2 To UBound(Split_DB)
                    Split_DB(1) = Split_DB(1) & "_" & Split_DB(j)
                Next j
            End If
            If UCase(Split_DB(0)) <> "PRA" Then
                If Trim(db.getfieldvalue(thTable, 0, Split_DB(1))) = "" Then
                    Feld.Delete
                    i = i - 1
                    Count = Count - 1
                Else
                    Select Case Feld.Type
                    Case msoTextEffect
                        Feld.TextEffect.Text = Trim(db.getfieldvalue(thTable, 0, Split_DB(1)))
                    Case msoTextBox
                        Selection.Text = Trim(db.getfieldvalue(thTable, 0, Split_DB(1)))
                        Selection.AutoSize = True
                    Case Else
                        Selection.Text = Trim(db.getfieldvalue(thTable, 0, Split_DB(1)))
                    End Select
                End If
            Else
                If Feld.Type = msoTextEffect Then
                    Feld.TextEffect.Text = Read_Adresse(Feld.TextEffect.Text)
                    If Feld.TextEffect.Text = "" Then
                        Feld.Delete
                        i = i - 1
                        Count = Count - 1
                    End If
                Else
                    Select Case Feld.Type
                    Case msoTextEffect
                        Feld.TextEffect.Text = Read_Adresse(Feld.TextEffect.Text)
                        If Feld.TextEffect.Text = "" Then
                            Feld.Delete
                            i = i - 1
                            Count = Count - 1
                        End If
                    Case msoTextBox
                        Selection.Text = Read_Adresse(Selection.Text)
                        Selection.AutoSize = True
                        If Selection.Text = "" Then
                            Feld.Delete
                            i = i - 1
                            Count = Count - 1
                        End If
                    Case Else
                        Selection.Text = Read_Adresse(Selection.Text)
                        If Selection.Text = "" Then
                            Feld.Delete
                            i = i - 1
                            Count = Count - 1
                        End If
                    End Select
                End If
            End If
            db.tableclose thTable
            Set Feld = Nothing
        End If
    End If
Next i
End Sub

Public Sub Print_Footer_And_Header_Daten()
Dim i As Long
Dim j As Long
Dim k As Long
Dim Split_HF() As String
Dim Split_DBFeld() As String
Dim Split_Leer() As String
Dim thTable As Long
Dim Suchstring As String
Dim HeaderLeft As String
Dim HeaderCenter As String
Dim HeaderRight As String
Dim FooterLeft As String
Dim FooterCenter As String
Dim FooterRight As String

With ActiveSheet.PageSetup
    HeaderLeft = .LeftHeader
    HeaderCenter = .CenterHeader
    HeaderRight = .RightHeader
    FooterLeft = .LeftFooter
    FooterCenter = .CenterFooter
    FooterRight = .RightFooter
End With
For i = 1 To 6
    If i = 1 Then Split_HF = Split(HeaderLeft, "{")
    If i = 2 Then Split_HF = Split(HeaderCenter, "{")
    If i = 3 Then Split_HF = Split(HeaderRight, "{")
    If i = 4 Then Split_HF = Split(FooterLeft, "{")
    If i = 5 Then Split_HF = Split(FooterCenter, "{")
    If i = 6 Then Split_HF = Split(FooterRight, "{")
    If UBound(Split_HF) > 0 Then
        For k = 1 To UBound(Split_HF)
            Select Case UCase(Left(Split_HF(k), 3))
            Case "DBF"  ' QPHeadres
                Split_DBFeld = Split(Split_HF(k), "}")
                thTable = db.TableOpenExt(db.DirRoot() & "\QPHeader." & Left(Split_DBFeld(0), 3), "read", 0)
            Case "VWV"  ' Vwv Variblen
                Split_DBFeld = Split(Split_HF(k), "}")
                thTable = db.TableOpenExt(db.DirRoot() & "\ExcelPrint\Faktura." & Left(Split_DBFeld(0), 3), "", 0)
            Case "PRO"  ' Projektquickdaten
                Split_DBFeld = Split(Split_HF(k), "}")
                thTable = db.TableOpenExt(db.DirRoot() & "\ExcelPrint\Faktura." & Left(Split_DBFeld(0), 3), "", 0)
            End Select
            Suchstring = Right(Split_DBFeld(0), Len(Split_DBFeld(0)) - 4)
            If Trim(db.getfieldvalue(thTable, 0, Suchstring)) = "" Then
                ' Text kann entfernt werden.
                If i = 1 Then HeaderLeft = Replace(HeaderLeft, "{" & Split_DBFeld(0) & "}", "")
                If i = 2 Then HeaderCenter = Replace(HeaderCenter, "{" & Split_DBFeld(0) & "}", "")
                If i = 3 Then HeaderRight = Replace(HeaderRight, "{" & Split_DBFeld(0) & "}", "")
                If i = 4 Then FooterLeft = Replace(FooterLeft, "{" & Split_DBFeld(0) & "}", "")
                If i = 5 Then FooterCenter = Replace(FooterCenter, "{" & Split_DBFeld(0) & "}", "")
                If i = 6 Then FooterRight = Replace(FooterRight, "{" & Split_DBFeld(0) & "}", "")
            Else
                If i = 1 Then HeaderLeft = Replace(HeaderLeft, "{" & Split_DBFeld(0) & "}", Trim(db.getfieldvalue(thTable, 0, Suchstring)))
                If i = 2 Then HeaderCenter = Replace(HeaderCenter, "{" & Split_DBFeld(0) & "}", Trim(db.getfieldvalue(thTable, 0, Suchstring)))
                If i = 3 Then HeaderRight = Replace(HeaderRight, "{" & Split_DBFeld(0) & "}", Trim(db.getfieldvalue(thTable, 0, Suchstring)))
                If i = 4 Then FooterLeft = Replace(FooterLeft, "{" & Split_DBFeld(0) & "}", Trim(db.getfieldvalue(thTable, 0, Suchstring)))
                If i = 5 Then FooterCenter = Replace(FooterCenter, "{" & Split_DBFeld(0) & "}", Trim(db.getfieldvalue(thTable, 0, Suchstring)))
                If i = 6 Then FooterRight = Replace(FooterRight, "{" & Split_DBFeld(0) & "}", Trim(db.getfieldvalue(thTable, 0, Suchstring)))
            End If
            db.tableclose thTable
            Set Feld = Nothing
        Next k
    End If
Next i
With ActiveSheet.PageSetup
    .LeftHeader = HeaderLeft
    .CenterHeader = HeaderCenter
    .RightHeader = HeaderRight
    .LeftFooter = FooterLeft
    .CenterFooter = FooterCenter
    .RightFooter = FooterRight
End With
End Sub

Public Sub Fill_Files()
    With ActiveSheet.Files
        .AddItem "Projektquick"
        .AddItem "Vwv Daten"
        .AddItem "Allgemeine Daten"
        .Text = "Vwv Daten"
    End With
End Sub

Public Sub Fill_Adressen()
    Dim thPRA As Long
    Dim CollPra As Long
    Dim Count As Long
    Dim i As Long
    Dim j As Long
    Dim AdressTyp As String
    Dim Split_Projekt() As String
    Dim ProjektName As String
    Dim thDBDOC As Long
    
    thDBDOC = db.DBDocOpen(db.DirNetDir(False) & "\Replica\Standard.pro", "share")
    
    thPRA = db.TableOpenExt(db.DirNetDir(False) & "\Replica\Standard.pra", "share", 1)
    db.SeekSetField thPRA, "ADRTYP", "! "
    CollPra = db.CollCreateSeek(thPRA, True)
    db.TableSetIndex CollPra, "ADRTYP"
    Count = db.GetRecordCount(CollPra) - 1
    With ActiveSheet.Konstruckte
        For i = 0 To Count
            If AdressTyp <> Trim(db.getfieldvalue(CollPra, i, "ADRTYP")) Then
                AdressTyp = Trim(db.getfieldvalue(CollPra, i, "ADRTYP"))
'                    For j = 20 To Len(AdressTyp) Step -1
'                        AdressTyp = AdressTyp & " "
'                    Next j
                .AddItem "PRA_" & AdressTyp
            End If
        Next i
    End With
    
    db.colldelete CollPra
    db.tableclose thPRA
    db.DBDocClose thDBDOC
End Sub

Public Function Create_Adressdefinition(Definition As String)
    Create_Adressdefinition = Replace(Definition, vbCrLf, " /n ")
End Function

Sub Wasserzeichen_setzen(Wasserzeichen As String)
    Const H|fffd|he As Double = 595
    Const Breite As Double = 455
    Dim Positioniert As Boolean
    Dim eShape As Excel.Shape
    Dim Schrift As String
    
    Positioniert = False
    Schrift = "Verdana"
    If Wasserzeichen <> "" Then Wasserzeichen = Replace(Wasserzeichen, " ", vbCrLf)
    Do While Positioniert = False
        DoEvents
        Set eShape = eSheet.Shapes.AddTextEffect(msoTextEffect1, Wasserzeichen, Schrift, 94, msoTrue, msoFalse, 0, 0)
        With eShape
            .Select
            .Name = "Wasserzeichen"
            .IncrementRotation -45
            .Line.Weight = 0.5
            .Line.ForeColor.RGB = RGB(0, 0, 0)
            .Line.BackColor.RGB = RGB(255, 255, 255)
            .Fill.Visible = msoFalse
        End With

'        MsgBox "Breite: " & eShape.Width & vbCrLf & "H|fffd|he: " & eShape.Height
        
        If Breite - eShape.Width > 2 And H|fffd|he - eShape.Height > 2 Then
            eShape.IncrementLeft (Breite - eShape.Width) / 2
            eShape.IncrementTop (H|fffd|he - eShape.Height) / 2
            Positioniert = True
        Else
            ' Meldung, ob der Text automatisch angepasst werden soll oder nicht.
            ' - Wenn ja dann wird die Schriftgr|fffd|sse bis auf maximal 80 zur|fffd|ckgesetzt.
            '    Hat der Text dann immer noch nicht platz, soll bei nein weitergemacht werden.
            ' - Wenn nein sollte ein anderer Text eingegeben werden k|fffd|nnen.
            MsgBox "Das Wasserzeichen hat keinen Platz auf der Seite." & vbCrLf & "Bitte geben Sie einen anderen Text ein.", vbOKOnly, "TEXTGR|fffd|SSE FALSCH"
            eShape.Delete
            Wasserzeichen = InputBox("Bitte geben sie einen anderen Text f|fffd|r das Wasserzeichen ein.", "Wasserzeichen")
        End If
    Loop
End Sub

Public Function Read_Next_Textfeld_Row(Startposition_Kalkulation As Double, Textfelder() As String) As Double
' Die Variable Textfelder() wird einen String zur|fffd|ckliefern, der alle Felder
' enth|fffd|lt, die unterhalb der Startposition liegen.
Dim Top As Double
Dim Count As Long
Dim i As Long
Dim Startpos As Double
Dim Felder As Long

Read_Next_Textfeld_Row = 0
If Startposition_Kalkulation <= 1 Then Exit Function

For i = 1 To Startposition_Kalkulation
    Startpos = Startpos + ActiveSheet.Rows(i).RowHeight
Next i
Count = ActiveSheet.Shapes.Count
Felder = 0
For i = 1 To Count
    If Count < i Then Exit For
    ActiveSheet.Shapes(i).Select
    If Selection.Top > Startpos Then
        ReDim Preserve Textfelder(Felder)
        Textfelder(Felder) = Selection.Name
        If Selection.Top < Read_Next_Textfeld_Row Or Read_Next_Textfeld_Row = 0 Then Read_Next_Textfeld_Row = Selection.Top
        Felder = Felder + 1
    End If
Next i
If Read_Next_Textfeld_Row < 1 Then Exit Function
Read_Next_Textfeld_Row = Startposition_Kalkulation + ((Read_Next_Textfeld_Row - Startpos) / 12.75)
Read_Next_Textfeld_Row = Int(Read_Next_Textfeld_Row) - 1  ' mindestens eine Zeile abstand zwischen Zusammenfassung und n|fffd|chstem Textfeld
End Function


' InQuest injected base64 decoded content
' )^J)

INQUEST-PP=macro
