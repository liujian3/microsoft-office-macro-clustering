Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "modHW1F"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 2, 0, MSForms, CommandButton"
Attribute VB_Control = "ComboBox1, 3, 1, MSForms, ComboBox"
'Option Explicit
Option Base 1
Option Compare Text

Private hasBeenInitialised As Boolean

Private Sub Worksheet_Activate()
    hasBeenInitialised = False
    ComboBox1.Clear
    ComboBox1.AddItem ("Clear Grid")
    ComboBox1.AddItem ("2y CMS")
    ComboBox1.AddItem ("5y CMS")
    ComboBox1.AddItem ("10y CMS")
    ComboBox1.AddItem ("20y CMS")
    ComboBox1.AddItem ("30y CMS")
    ComboBox1.AddItem ("5y Diagonal")
    ComboBox1.AddItem ("10y Diagonal")
    ComboBox1.AddItem ("15y Diagonal")
    ComboBox1.AddItem ("20y Diagonal")
    ComboBox1.AddItem ("25y Diagonal")
    ComboBox1.AddItem ("30y Diagonal")
    ComboBox1.AddItem ("40y Diagonal")
    ComboBox1.AddItem ("50y Diagonal")
    hasBeenInitialised = True
End Sub


Private Sub generateSwaptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    clearSwaptions
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_SwaptionDefs")
    Dim strikeAdd$: strikeAdd = Range("NX_" & asn & "_M_StrikeValue").Address
    Dim ID$
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim flavourAdd$: flavourAdd = Range("NX_" & asn & "_M_FlavourValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue").Address
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_ModelValue").Address
    Dim sptnIDAdd$: sptnIDAdd = Range("NX_" & asn & "_M_SwaptionIDValue").Address
    Dim convAdd$: convAdd = Range("NX_" & asn & "_M_ConventionValue").Address
    ' fill in the swaptions
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                rngOt.Cells(counter, 3).Formula = "=" & strikeAdd
                ID = prefixVal & "." & modelVal & "." & rngIn.Cells(j, 1).Value & "." & rngIn.Cells(1, i).Value
                rngOt.Cells(counter, 4).Formula = "= nxInstrumentSwaptionTenor(" & _
                    prefixVal & "&" & invCom & "." & invCom & "&" & modelVal & "&" & invCom & "." & rngIn.Cells(j, 1).Value & "." & rngIn.Cells(1, i).Value & invCom _
                    & "," & CcyAdd & "," & flavourAdd _
                    & "," & rngOt.Cells(counter, 1).Address & "," & rngOt.Cells(counter, 2).Address _
                    & "," & strikeAdd & "," & sptnIDAdd & "," & convAdd & ")"
            End If
        Next
    Next
    
    If counter = 0 Then Exit Sub
    Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 4)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_SwaptionDefs", RefersTo:=Selection

    Selection.Interior.ColorIndex = 2
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    
    Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & prefixVal & "&" & invCom & "." & invCom & "&" & modelVal & "&" & invCom & ".Collection" & invCom & "," & CcyAdd & "," _
        & Range(rngOt.Cells(1, 4).Offset(-1, 0), rngOt.Cells(counter, 4)).Address & ")"
    
    Range("E11").Select
    
    
    ActiveSheet.Calculate
End Sub

Private Sub ComboBox1_Change()
    If hasBeenInitialised = False Then Exit Sub
    Application.ScreenUpdating = False
    Select Case ComboBox1.Text
        Case "CLEAR GRID":   clearSwaptionSelectionGrid
                             clearSwaptions
                             ActiveSheet.Calculate
                             Exit Sub
        Case "2y CMS":       populateCMS "2y"
        Case "5y CMS":       populateCMS "5y"
        Case "10y CMS":      populateCMS "10y"
        Case "20y CMS":      populateCMS "20y"
        Case "30y CMS":      populateCMS "30y"
        Case "5y Diagonal":  populateDiagonal 5
        Case "10y Diagonal": populateDiagonal 10
        Case "15y Diagonal": populateDiagonal 15
        Case "20y Diagonal": populateDiagonal 20
        Case "25y Diagonal": populateDiagonal 25
        Case "30y Diagonal": populateDiagonal 30
        Case "40y Diagonal": populateDiagonal 40
        Case "50y Diagonal": populateDiagonal 50
        Case Else
            MsgBox "Fatal error in swaption creation"
            Exit Sub
    End Select
    generateSwaptions
    ActiveSheet.Calculate
End Sub

Private Sub CommandButton1_Click()
    generateSwaptions
End Sub

' clear the swaptions
Private Sub clearSwaptions()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SwaptionDefs")
    Range(rng.Cells(1, 1), rng.Cells(rng.Rows.Count, rng.Columns.Count)).Clear
End Sub

' clear swaption selection area
Private Sub clearSwaptionSelectionGrid()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SelectionGrid")
    Range(rng.Cells(2, 2), rng.Cells(rng.Rows.Count, rng.Columns.Count)).FormulaArray = ""
End Sub

Private Sub populateCMS(CMSTenor$)
    Dim i As Integer, j As Integer
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SelectionGrid")
    For i = 1 To rng.Columns.Count
        If rng.Cells(1, i) = CMSTenor Then
            For j = 2 To rng.Rows.Count
                rng.Cells(j, i) = "Y"
            Next j
            Exit Sub
        End If
    Next
End Sub

Private Sub populateDiagonal(tenorYrs As Integer)
    Dim i As Integer
    For i = 1 To tenorYrs - 1
        doIndividualOption i & "Y", tenorYrs - i & "Y"
    Next
End Sub

Private Sub doIndividualOption(optTenor$, swapTenor$)
    Dim i As Integer, j As Integer
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SelectionGrid")
    Dim foundSwap As Boolean: foundSwap = False
    For i = 1 To rng.Columns.Count
        If rng.Cells(1, i) = swapTenor Then
            foundSwap = True
            Exit For
        End If
    Next
    If foundSwap Then
        For j = 1 To rng.Rows.Count
            If rng.Cells(j, 1) = optTenor$ Then
                rng.Cells(j, i) = "Y"
                Exit For
            End If
        Next
    End If
End Sub


Attribute VB_Name = "repCashflows2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    Application.ScreenUpdating = False
    doOneTable "NX_" & ActiveSheet.Name & "_R_CF_ReportID1", "NX_" & ActiveSheet.Name & "_R_CF_ReportOut1"
    doOneTable "NX_" & ActiveSheet.Name & "_R_CF_ReportID2", "NX_" & ActiveSheet.Name & "_R_CF_ReportOut2"
    Application.ScreenUpdating = True
End Sub

Private Sub doOneTable(IdRngName$, outRngName$)
    On Error GoTo errorHandler
    Dim outRng As Range: Set outRng = Range(outRngName)
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(IdRngName).Cells(1))
    Dim size As Integer: size = UBound(temp) - 1
    outRng.Clear
    If size = 0 Then Exit Sub
    Range(outRng.Cells(1), outRng.Cells(1).Offset(size - 1, 2)).Select
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection
    Selection.FormulaArray = "=nxLibView(R[-3]C,R[-1]C:R[-1]C[2])"
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2
        .Pattern = xlSolid
    End With
    outRng.Cells(1).Select
    Range(Selection, Selection.End(xlDown)).Select
    Selection.NumberFormat = "[$-409]d-mmm-yyyy;@"
    outRng.Cells(1).Offset(0, 1).Select
    Range(Selection, Selection.End(xlDown)).Select
    Range(Selection, Selection.End(xlToRight)).Select
    Selection.Style = "Comma"
    Range("E2").Formula = "=Today()"
    Range("E3").Formula = "=Now()"
errorHandler:
    Range("E2") = Range("E2").Value
    Range("E3") = Range("E3").Value
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub
Attribute VB_Name = "repDeltaGammaLadders"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    Dim outRngName$: outRngName = "NX_" & ActiveSheet.Name & "_R_IRDelta_Output"
    Dim inRngName$:   inRngName = "NX_" & ActiveSheet.Name & "_R_IRDelta_Input"
    On Error GoTo errorHandler
    Application.ScreenUpdating = False
    Dim outRng As Range: Set outRng = Range(outRngName)
    outRng.Clear
    ' resize the range
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1))
    Dim rsize As Long: rsize = UBound(temp) - 1
    If rsize = 0 Then Exit Sub
    temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1), "Instrument")
    rsize = UBound(temp)
    outRng.Select
    Dim headRange As Range
    outRng.Cells(1, 1).Offset(-1, 0).Select
    Set headRange = Range(Selection, Selection.End(xlToRight))
    Dim cSize As Integer: cSize = headRange.Columns.Count
    Range(outRng.Cells(1, 1), outRng.Cells(rsize, cSize)).Select
    
    Selection.FormulaArray = "=NxLibView(" & Range(inRngName).Cells(1, 1).Address & "," & headRange.Address & ")"
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection
    
    'format
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2: .Pattern = xlSolid
    End With
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    ActiveSheet.Calculate
    Range("C5").Formula = "=Today()"
    Range("C6").Formula = "=Now()"
errorHandler:
    Range("C5") = Range("C5").Value
    Range("C6") = Range("C6").Value
    Application.ScreenUpdating = True
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub

Attribute VB_Name = "repSwaptionVegaGrid"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    Dim outRngName$: outRngName = "NX_" & ActiveSheet.Name & "_R_IRVega_Output"
    Dim inRngName$:   inRngName = "NX_" & ActiveSheet.Name & "_R_IRVega_Input"
    On Error GoTo errorHandler
    Application.ScreenUpdating = False
    Dim outRng As Range: Set outRng = Range(outRngName)
    ' resize the vega
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1))
    Dim rsize As Integer: rsize = UBound(temp)
    Dim cSize As Integer: cSize = UBound(temp, 2)
    outRng.Clear
    If rsize - 1 = 0 Then Exit Sub
    Range(outRng.Cells(1, 1), outRng.Cells(rsize, cSize)).Select
    Selection.FormulaArray = "=NxLibView(" & Range(inRngName).Cells(1, 1).Address & ")"
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection

    'format
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2: .Pattern = xlSolid
    End With
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    Range(outRng.Cells(1, 1), outRng.Cells(rsize, 1)).Select
    Selection.Interior.ColorIndex = 55
    Selection.Font.ColorIndex = 2
    Range(outRng.Cells(1, 1), outRng.Cells(1, cSize)).Select
    Selection.Interior.ColorIndex = 55
    Selection.Font.ColorIndex = 2
    Range(outRng.Cells(2, 2), outRng.Cells(rsize, 2)).Select
    Selection.Font.Bold = True
    Range(outRng.Cells(rsize, 2), outRng.Cells(rsize, cSize)).Select
    Selection.Font.Bold = True

    ActiveSheet.Calculate
    Range("C5").Formula = "=Today()"
    Range("C6").Formula = "=Now()"
errorHandler:
    Range("C5") = Range("C5").Value
    Range("C6") = Range("C6").Value
    Application.ScreenUpdating = True
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub


INQUEST-PP=macro
