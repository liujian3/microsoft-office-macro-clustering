Attribute VB_Name = "Module1"

Attribute VB_Name = "M|fffd|dulo1"
Sub Macro1()
Attribute Macro1.VB_Description = "Macro gravada em 19/08/2007 por Reinaldo Bortone"
Attribute Macro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
' Macro gravada em 19/08/2007 por Reinaldo Bortone
'Sheets("Lottery numbers").Select
End Sub
Attribute VB_Name = "M|fffd|dulo2"
Sub Macro2()
Attribute Macro2.VB_Description = "Macro gravada em 19/08/2007 por Reinaldo Bortone"
Attribute Macro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro2 Macro
' Macro gravada em 19/08/2007 por Reinaldo Bortone
'

'
    Range("A8:P200").Select
    Selection.ClearContents
    Range("A8").Select
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "btnMoreNumbers, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "btnCopyDown, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "btnHelp, 4, 2, MSForms, CommandButton"


Option Explicit
Const TITLE_ROW As String = "B3"
Const RESULTS_ROW As String = "B4"
Const HEAD_OF_LIST As String = "B8"
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Some slightly kludgy code in here to work around problems
' with Excel 95

' Copy numbers to head of past picks list
Private Sub btnCopyDown_Click()
Dim rHeadOfList As Range
Dim rResultsRow As Range

Dim iNumValues As Integer

    iNumValues = Worksheets("Help").Range("B3").Value
    
    With Worksheets("Lottery numbers")
        Set rResultsRow = Range(.Range(RESULTS_ROW), .Range(RESULTS_ROW).Offset(0, iNumValues - 1))
        Set rHeadOfList = .Range(HEAD_OF_LIST)
    End With
    
    Application.ScreenUpdating = False
                      
    ActiveSheet.Rows(rHeadOfList.Row).Select
    Selection.Insert Shift:=xlShiftDown
    
    With Worksheets("Lottery numbers")
        Set rHeadOfList = Range(.Range(HEAD_OF_LIST), .Range(HEAD_OF_LIST).Offset(0, iNumValues - 1))
    End With
    rHeadOfList.Offset(0, -1) = Date
    rResultsRow.Copy rHeadOfList
End Sub

' Switch to the Help sheet
Private Sub btnHelp_Click()
    Worksheets("Help").Activate
End Sub

' Generate new set of numbers
Private Sub btnMoreNumbers_Click()
Dim rTitleRow As Range
Dim rResultsRow As Range

Dim iNumValues As Integer
Dim iMinValue As Integer
Dim iMaxValue As Integer

Dim iResults() As Integer
Dim i As Integer
Dim iLimit As Integer
Dim iPick As Integer
Dim iTmp As Integer

Dim iRequiredVals() As Integer
Dim iNumRequired As Integer
Dim bFoundDuplicates As Boolean

    ' Get parameters
    Set rTitleRow = Worksheets("Lottery numbers").Range(TITLE_ROW)
    Set rResultsRow = Worksheets("Lottery numbers").Range(RESULTS_ROW)

    With Worksheets("Help")

    iMinValue = .Range("B1").Value
    iMaxValue = .Range("B2").Value
    iNumValues = .Range("B3").Value
        
    ' Basic error checks
    If iMinValue >= iMaxValue Then
        MsgBox "Your MINIMUM value should be smaller than the MAXIMUM value", vbOKOnly, "Mistake"
        .Activate
        End
    End If
    
    If iNumValues > iMaxValue - iMinValue + 1 Then
        MsgBox "You have asked for more values than are possible if they are not to repeat", vbOKOnly, "Mistake"
        .Activate
        End
    End If
    
    ' Get user-specified required values, eliminating duplicates
    iNumRequired = 0    ' Count number of required values
    While .Cells(1, 5 + iNumRequired).Value <> 0
        iNumRequired = iNumRequired + 1
    Wend
        
    If iNumRequired > 1 Then
        iTmp = 0    ' Keeps count of duplicate deletions
        Do
            bFoundDuplicates = False

            .Range("E1", .Cells(1, 5 + iNumRequired)).Sort _
                Key1:=.Range("E1"), _
                Order1:=xlAscending, _
                Header:=xlNo, _
                Orientation:=xlLeftToRight, _
                OrderCustom:=1
                
            ' Kill duplicates
            For i = 1 To iNumRequired - iTmp - 1
                If .Cells(1, 4 + i).Value = .Cells(1, 5 + i).Value Then
                    bFoundDuplicates = True
                    iTmp = iTmp + 1
                    .Cells(1, 4 + i).ClearContents
                End If
            Next
        Loop While bFoundDuplicates ' Just in case we missed one
    End If
    
    iNumRequired = iNumRequired - iTmp
                
    If iNumRequired > iNumValues Then
        .Activate
        MsgBox "Your 'Always include' list is bigger than 'Number of values'", vbOKOnly, "Mistake"
        End
    End If
       
    ' Get required values into array
    If iNumRequired > 0 Then
        ReDim iRequiredVals(iNumRequired)
        For i = 1 To iNumRequired
            iRequiredVals(i) = .Cells(1, 4 + i).Value
            If iRequiredVals(i) < iMinValue Or iRequiredVals(i) > iMaxValue Then
                .Activate
                MsgBox "A required number [" + CStr(iRequiredVals(i)) + "] is outside the range specified by the minimum/maximum values", vbOKOnly, "Mistake"
                End
            End If
        Next
    End If
        
    End With
        
    
    ' Pick the numbers
    
    ' Generate an array of available values
    ReDim iResults(iMaxValue - iMinValue + 1)
    For i = 1 To UBound(iResults)
        iResults(i) = iMinValue + i - 1
    Next
    
    
    ' Randomise its order
    ' It is sufficient to partly randomise the order, according to the
    ' required number of values, since the shuffled elements accumulate
    ' from the far end of the array towards the front. We can shuffle
    ' 'n' times and then pluck the last 'n' values from the array
    
    Randomize                           ' Seed random number generator with system time
    iLimit = UBound(iResults) - 1       ' Set limit 1 below maximum array index
    For i = 1 To iNumValues
        If i <= iNumRequired Then       ' Force selection of required values first
            iPick = iRequiredVals(iNumRequired - i + 1) - iMinValue + 1
        Else                            ' Else do a random pick
            iPick = Int((iLimit) * Rnd) + 1 ' Pick a random array element from index 1 to iLimit
        End If
        
        iTmp = iResults(iLimit + 1)     ' Swap this element with the one above iLimit
        iResults(iLimit + 1) = iResults(iPick)
        iResults(iPick) = iTmp
        iLimit = iLimit - 1             ' Reduce limit by 1
    Next
       
    
    ' Extract required number of values from upper end of the array
    
    Application.ScreenUpdating = False
    
    iTmp = UBound(iResults)
    For i = 0 To iNumValues - 1
        rTitleRow.Offset(0, i).Value = i + 1
        rResultsRow.Offset(0, i).Value = iResults(iTmp - i)
    Next
    
    ' Sort results in ascending order
    
    Range(rResultsRow.Cells, rResultsRow.Offset(0, iNumValues - 1).Cells).Select
    Selection.Sort Orientation:=xlLeftToRight, Order1:=xlAscending, Key1:=rResultsRow
    Range("A1").Select

End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "btnUnhelp, 2, 0, MSForms, CommandButton"


Option Explicit

Private Sub btnUnhelp_Click()
    Worksheets("Lottery numbers").Activate
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
Dim iNumVals As Integer
Dim strError As String
Dim rRangeTo As Range

    If ActiveSheet.Name <> "Help" Then Exit Sub
    If Target.Address <> "$B$3" Then Exit Sub
       
    iNumVals = Range("B2").Value - Range("B1").Value + 1

    strError = ""
    If Target.Address = "$B$3" Then
        Select Case Target.Value
            Case Is <= 2: strError = "Too small"
            Case Is > iNumVals: strError = "More than the available values in the minimum -> maximum range"
            Case Is > 20: strError = "Too big"
        End Select
    End If
    
    If Len(strError) > 0 Then
        MsgBox strError, vbOKOnly, "Error"
        Target.Value = 6
        Exit Sub
    End If
    
    ' Adjust formatting of results row
    
    iNumVals = Target.Value
    Application.ScreenUpdating = False
    
   With Worksheets("Lottery numbers")
        .Range("C1:Z7").Clear
        .Range("B4").ClearContents
        
        Set rRangeTo = .Range(.Range("B1:B7"), .Range("B1:B7").Offset(0, iNumVals - 1))
        .Range("B1:B7").Copy
        rRangeTo.PasteSpecial Paste:=xlFormats
        
        .Range("B3").AutoFill .Range(.Range("B3"), .Range("B3").Offset(0, iNumVals - 1)), xlFillSeries
        
        .Range("A1:A7").Copy
        .Range("A1:A7").Offset(0, iNumVals + 1).PasteSpecial Paste:=xlFormats
        
        .Activate
        SendKeys ("{esc}")
        .Range(.Range("A1"), .Range("A1:A7").Offset(0, iNumVals + 1)).Select
        ActiveWindow.Zoom = True
        .Range("A1").Select
        .btnMoreNumbers.Width = .Range(.Range("B3"), .Range("B3").Offset(0, iNumVals - 1)).Width
    End With
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Option Explicit

Private Sub Workbook_Open()
    Worksheets("Lottery numbers").Activate
Application.CommandBars(1).Controls("ajuda").Visible = False
Application.CommandBars(1).Controls("janela").Visible = False
Application.CommandBars(1).Controls("dados").Visible = False
Application.CommandBars(1).Controls("ferramentas").Visible = False
Application.CommandBars(1).Controls("Formatar").Visible = False
Application.CommandBars(1).Controls("Inserir").Visible = False
Application.CommandBars(1).Controls("Exibir").Visible = False
Application.CommandBars(1).Controls("Editar").Visible = False

Application.DisplayFormulaBar = False
With ActiveWindow
.DisplayWorkbookTabs = False
End With

End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
Application.CommandBars(1).Controls("ajuda").Visible = True
Application.CommandBars(1).Controls("janela").Visible = True
Application.CommandBars(1).Controls("dados").Visible = True
Application.CommandBars(1).Controls("ferramentas").Visible = True
Application.CommandBars(1).Controls("Formatar").Visible = True
Application.CommandBars(1).Controls("Inserir").Visible = True
Application.CommandBars(1).Controls("Exibir").Visible = True
Application.CommandBars(1).Controls("Editar").Visible = True

Application.DisplayFormulaBar = True
End Sub


INQUEST-PP=macro
