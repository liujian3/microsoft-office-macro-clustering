Attribute VB_Name = "Active_Directory"
Option Explicit

Public Function GetMailboxUserName() As String

    Dim objApp As Outlook.Application
    Dim objNS As Outlook.Namespace
    Dim objInbox As Outlook.MAPIFolder
    Dim strName As String
    Dim intPos As Integer

    Set objApp = CreateObject("Outlook.Application")
    Set objNS = objApp.GetNamespace("MAPI")
    Set objInbox = objNS.GetDefaultFolder(olFolderInbox)
    strName = objInbox.Parent.Name
    GetMailboxUserName = Replace(strName, "Mailbox - ", "")
    Set objInbox = Nothing
    Set objNS = Nothing
    Set objApp = Nothing

End Function

Public Function GetSeniorEngineer() As String

    Dim objApp As New Outlook.Application
    Dim objNameSpace As Outlook.Namespace
    Dim objRecipients As MAPI.Recipients
    Dim objRecipient As MAPI.Recipient
    Dim objSession As MAPI.Session
    Dim intAnswer As Integer
    
    On Error GoTo errHandler
    Set objSession = CreateObject("MAPI.Session")
    objSession.Logon "", "", False, False
    
    On Error GoTo leaveSub
    If objSession Is Nothing Then
        MsgBox "Outlook needs to be open to display the Nissan Global address book, " & vbCrLf & "Please open 'Outlook' and press this button again. ", vbOKOnly + vbInformation
        Exit Function
    End If
    
    Set objRecipients = objSession.AddressBook(Title:="Select your Senior Engineer's name", OneAddress:=True, RecipLists:=1, ToLabel:="&Senior Engineer")
    
    If objRecipients.Count = 0 Then
        intAnswer = MsgBox("Please select the name of the person you are sending this Concession form to, for approval", vbOKCancel + vbInformation)
        If intAnswer = vbCancel Then
            GetSeniorEngineer = vbNullString
            Exit Function
        End If
    End If
    
    Set objRecipient = objRecipients(1)
    GetSeniorEngineer = objRecipient.Name
    
    Set objApp = Nothing
    Set objNameSpace = Nothing
    Set objRecipients = Nothing
    Set objRecipient = Nothing
    Set objSession = Nothing
    
    Exit Function
        
errHandler:
   MsgBox "Outlook needs to be open to display the Nissan Global address book, " & vbCrLf & "Please open 'Outlook' and press this button again. ", vbOKOnly + vbInformation
    Exit Function
    
leaveSub:
    Exit Function
    
End Function

Public Function GetInspector() As String

    Dim objApp As New Outlook.Application
    Dim objNameSpace As Outlook.Namespace
    Dim objRecipients As MAPI.Recipients
    Dim objRecipient As MAPI.Recipient
    Dim objSession As MAPI.Session
    Dim intAnswer As Integer
    
    On Error GoTo errHandler
    Set objSession = CreateObject("MAPI.Session")
    objSession.Logon "", "", False, False
    
    On Error GoTo leaveSub
    If objSession Is Nothing Then
        MsgBox "Outlook needs to be open to display the Nissan Global address book, " & vbCrLf & "Please open 'Outlook' and press this button again. ", vbOKOnly + vbInformation
        Exit Function
    End If
    
    Set objRecipients = objSession.AddressBook(Title:="Select the Inspector's name", OneAddress:=True, RecipLists:=1, ToLabel:="&Inspector")
    
    If objRecipients.Count = 0 Then
        intAnswer = MsgBox("Please select the name of the Inspector you are adding", vbOKCancel + vbInformation)
        If intAnswer = vbCancel Then
            GetInspector = vbNullString
            Exit Function
        End If
    End If
    
    Set objRecipient = objRecipients(1)
    GetInspector = objRecipient.Name
    
    Set objApp = Nothing
    Set objNameSpace = Nothing
    Set objRecipients = Nothing
    Set objRecipient = Nothing
    Set objSession = Nothing
    
    Exit Function
        
errHandler:
   MsgBox "Outlook needs to be open to display the Nissan Global address book, " & vbCrLf & "Please open 'Outlook' and press this button again. ", vbOKOnly + vbInformation
    Exit Function
    
leaveSub:
    Exit Function
    
End Function

Public Function GetQAEngineer() As String

    Dim objApp As New Outlook.Application
    Dim objNameSpace As Outlook.Namespace
    Dim objRecipients As MAPI.Recipients
    Dim objRecipient As MAPI.Recipient
    Dim objSession As MAPI.Session
    Dim intAnswer As Integer
    
    On Error GoTo errHandler
    Set objSession = CreateObject("MAPI.Session")
    objSession.Logon "", "", False, False
    
    On Error GoTo leaveSub
    If objSession Is Nothing Then
        MsgBox "Outlook needs to be open to display the Nissan Global address book, " & vbCrLf & "Please open 'Outlook' and press this button again. ", vbOKOnly + vbInformation
        Exit Function
    End If
    
    Set objRecipients = objSession.AddressBook(Title:="Select the QA Engineer's name", OneAddress:=True, RecipLists:=1, ToLabel:="&QA Engineer")
    
    If objRecipients.Count = 0 Then
        intAnswer = MsgBox("Please select the name of the QA Engineer you are adding", vbOKCancel + vbInformation)
        If intAnswer = vbCancel Then
            GetQAEngineer = vbNullString
            Exit Function
        End If
    End If
    
    Set objRecipient = objRecipients(1)
    GetQAEngineer = objRecipient.Name
    
    Set objApp = Nothing
    Set objNameSpace = Nothing
    Set objRecipients = Nothing
    Set objRecipient = Nothing
    Set objSession = Nothing
    
    Exit Function
        
errHandler:
   MsgBox "Outlook needs to be open to display the Nissan Global address book, " & vbCrLf & "Please open 'Outlook' and press this button again. ", vbOKOnly + vbInformation
    Exit Function
    
leaveSub:
    Exit Function
    
End Function

Public Sub GetUsersADInfo(LoginName As String)
'PURPOSE: Display information that is available in
'the Active Directory about a given user

'PARAMETER: Login Name for user

'REQUIRES: Windows 2000 ADSI, LDAP Provider
'Proper Security Credentials.

    Dim conn As New ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim oRoot As IADs
    Dim oDomain As IADs
    Dim strBase As String
    Dim strDomain As String

    Dim strFilter As String
    Dim strAttribs As String
    Dim strDepth As String
    Dim strQuery As String
    Dim strAns As String

    Dim user As IADsUser

    On Error GoTo errHandler:

    'Get user Using LDAP/ADO.  There is an easier way
    'to bind to a user object using the WinNT provider,
    'but this way is a better for educational purposes
    Set oRoot = GetObject("LDAP://rootDSE")
    'work in the default domain
    strDomain = oRoot.Get("defaultNamingContext")
    Set oDomain = GetObject("LDAP://" & strDomain)
    strBase = "<" & oDomain.ADsPath & ">"

    strFilter = "(&(objectCategory=person)(objectClass=user)(name=" _
          & LoginName & "))"
    strAttribs = "adsPath"
    strDepth = "subTree"

    strQuery = strBase & ";" & strFilter & ";" & strAttribs & ";" & strDepth

    conn.Open _
      "Data Source=Active Directory Provider;Provider=ADsDSOObject"

    Set rs = conn.Execute(strQuery)

    If Not rs.EOF Then
        Set user = GetObject(rs("adsPath"))
        With user
            On Error Resume Next
            strUsername = .FirstName & " " & .LastName
            strUserEmail = .EmailAddress
            strUserPhone = .TelephoneNumber
        End With
        Exit Sub
    End If

    Exit Sub

errHandler:

    On Error Resume Next
    If Not rs Is Nothing Then
        If rs.State <> 0 Then rs.Close
        Set rs = Nothing
    End If

    If Not conn Is Nothing Then
        If conn.State <> 0 Then conn.Close
        Set conn = Nothing
    End If

    Set oRoot = Nothing
    Set oDomain = Nothing
End Sub
Attribute VB_Name = "Database"
Option Explicit

Public Sub DeleteNCMAR(str As String)

    Dim fso As Scripting.FileSystemObject
    Dim fil As Scripting.File
    
    Set fso = New Scripting.FileSystemObject
    Dim strDeletedFilePath As String
    
    On Error Resume Next
    Set fil = fso.GetFile(str)
    fil.Delete
    
End Sub

Private Sub UpdateDatabase()

    Dim strFilename As String
    Dim rngNCMAR As Range
    Dim strConcernRank As String
    Dim strIssueNumber As String
    Dim strPartNumber As String
    Dim i As Integer

    Application.ScreenUpdating = False

    'Call OpenList
    'Find row for this NCMAR no in the list
    If IsWorkbookOpen("LIST.xls") Then
        Set wkbLIST = Workbooks("LIST.xls")
    Else
        Set wkbLIST = Workbooks.Open("\\Uk-ntce-s0001\n_vy0\vy0\KIM\EXPERIMENT\LIST.xls")
    End If
    
    If Len(strNCMARNumber) = 5 Then strNCMARNumber = Mid(strNCMARNumber, 2)
    On Error Resume Next
    Set rngNCMAR = wkbLIST.Worksheets(1).[A:A].Find(strNCMARNumber)
   
    With ThisWorkbook.Worksheets(2)
        rngNCMAR.Offset(0, 1) = intNumberOfIssues
        rngNCMAR.Offset(0, 2) = strReasonCode
        rngNCMAR.Offset(0, 5) = .[DesignGroup]
    End With
    With ThisWorkbook.Worksheets(1)
        If intNumberOfIssues >= 2 Then
            For i = 0 To Val(intNumberOfIssues) - 1
                If i = Val(intNumberOfIssues) - 1 Then
                    strIssueNumber = strIssueNumber & .[IssueNumber].Offset(i, 0)
                    strPartNumber = strPartNumber & .[PartNumber].Offset(i, 0)
                Else
                    strIssueNumber = strIssueNumber & .[IssueNumber].Offset(i, 0) & Chr(10)
                    strPartNumber = strPartNumber & .[PartNumber].Offset(i, 0) & Chr(10)
                End If
            Next i
        Else
            strIssueNumber = .[IssueNumber]
            strPartNumber = .[PartNumber]
        End If
    
        rngNCMAR.Offset(0, 4) = strRank
        rngNCMAR.Offset(0, 5) = .[DesignGroup]
        rngNCMAR.Offset(0, 6) = .[DesignNoteNumber]
        rngNCMAR.Offset(0, 7) = strPartNumber
        rngNCMAR.Offset(0, 8) = strIssueNumber
        rngNCMAR.Offset(0, 9) = strSupplierCode
        rngNCMAR.Offset(0, 10) = strSupplierName
        rngNCMAR.Offset(0, 11) = .[PartName]
        rngNCMAR.Offset(0, 12) = .[RejectQuantity]
        rngNCMAR.Offset(0, 14) = .[ConcernDescription]
        rngNCMAR.Offset(0, 15) = .[RaisedBy]
        rngNCMAR.Offset(0, 16) = strQAEngineer
        rngNCMAR.Offset(0, 17) = .[ConcernSource]
        rngNCMAR.Offset(0, 18) = .[DateRaised]
        strFilename = .[NCMARNumber] & strRank & strPartsAllocation & ".xls"
    End With
    
    'Shutdown Database for other users
    wkbLIST.Close SaveChanges:=True
    
    If strUsername = Sheet3.[LeadInspector] Then
        Sheet3.[Status] = "AWAITING LEAD INSPECTOR APPROVAL"
    Else
        Sheet3.[Status] = "RAISED"
    End If
    
    strNCMARFilename = strIncompletePath & strFilename
    ThisWorkbook.SaveAs Filename:=strNCMARFilename
    
    MsgBox "NCMAR No :- " & strNCMARNumber & " has been added to the NCMAR Database" & vbCrLf & _
        "and saved to the '1 - INCOMPLETE' folder", vbOKOnly + vbInformation
    
    boolComplete = True
    
    If strUsername = Sheet3.[LeadInspector] Then
        SetNCMARMenuBarStates 0, 0, 0, 0, 1, 0, 1
    Else
        If Sheet1.[RejectQuantity] > 0 Then
            SetNCMARMenuBarStates 0, 0, 0, 1, 0, 0, 1
        ElseIf Sheet1.[RejectQuantity] = 0 Then
            SetNCMARMenuBarStates 0, 0, 1, 0, 0, 0, 1
        ElseIf Sheet1.[RejectQuantity] = vbNullString Then
            SetNCMARMenuBarStates 0, 0, 1, 1, 0, 0, 1
        End If
    End If
    
End Sub

Function IsWorkbookOpen(wbName As String) As Long
    
    Dim i As Long
    For i = Workbooks.Count To 1 Step -1
        If Workbooks(i).Name = wbName Then Exit For
    Next
    IsWorkbookOpen = i
    
End Function
Attribute VB_Name = "Global_Variables"
Option Explicit

Public strBasePath As String
Public strIncompletePath As String
Public strCompletePath As String
Public strRejectedPath As String
Public strConcessionPath As String
Public strAcceptedPath As String

Public strTemplate As String

Public strUsername As String
Public strUserPhone As String
Public strUserEmail As String

Public strStatus As String
Public strNCMARFilename As String
Public strFilename As String

Public intNumberOfIssues As Integer
Public strReasonCode As String
Public strSupplierName As String
Public strSupplierCode As String
Public str1stFiveDigits As String
Public str2ndFiveDigits As String
Public strRank As String
Public strPartsAllocation As String
Public strQAEngineer As String

Public strNCMARNumber As String

Public bytCalendar As Byte

Public boolComplete As Boolean

Public wkbLIST As Workbook
Public bytUserNumber As Byte

Public strDPCRRangeNames(1 To 25) As String
Public strNCMARRangeNames(1 To 25) As String

Public boolCopyFinished As Boolean
Public strFORMSC As String

Public intPictureLeft As Integer
Public intPictureTop As Integer
Attribute VB_Name = "Initialise"
Option Explicit
Attribute VB_Name = "LogUserDetails"
Option Explicit
Attribute VB_Name = "MenuBars"
Option Explicit

Public Sub SetNCMARMenuBarStates(boolNewNCMAR As Boolean, boolUpdateDatabase As Boolean, _
    boolAcceptParts As Boolean, boolRejectParts As Boolean, boolAcceptReject As Boolean, _
    boolResubmit As Boolean, boolSendDPCRToEngineer As Boolean)

    On Error GoTo errtrap

    With CommandBars("NCMAR")
        .Controls(1).Enabled = boolNewNCMAR
        .Controls(2).Enabled = boolUpdateDatabase
        .Controls(3).Enabled = boolAcceptParts
        .Controls(4).Enabled = boolRejectParts
        .Controls(5).Enabled = boolAcceptReject
        .Controls(6).Enabled = boolResubmit
        .Controls(7).Enabled = boolSendDPCRToEngineer
    End With
    
    Exit Sub

    'if problem, allow button press
errtrap:
    With CommandBars("NCMAR")
        .Controls(1).Enabled = True
        .Controls(2).Enabled = False
        .Controls(3).Enabled = False
        .Controls(4).Enabled = False
        .Controls(5).Enabled = False
        .Controls(6).Enabled = False
    End With
    
End Sub

Public Sub SetDPCRMenuBarStates(bool As Boolean)

    With CommandBars("DPCR")
        .Controls(1).Enabled = bool
        .Controls(2).Enabled = Not bool
    End With
    
End Sub
Attribute VB_Name = "NCMAR"
Option Explicit

Private Sub GetNCMARNumber()

    Dim strThisYear As String
    Dim rng As Range

    If IsWorkbookOpen("LIST.xls") Then
        Set wkbLIST = Workbooks("LIST.xls")
    Else
        Set wkbLIST = Workbooks.Open("\\Uk-ntce-s0001\n_vy0\vy0\KIM\EXPERIMENT\LIST.xls")
    End If
    
    'OpenList
    'Calculate new Report number and add it to the FORMS
    With wkbLIST.Worksheets(1)
        On Error Resume Next
        Set rng = .[A:A].Find(vbNullString)
    End With
    
    strThisYear = Year(Date)
    With Sheet3
        If strThisYear > .[LatestYear] Then
            .[LatestYear] = strThisYear
            .[FirstNCMARRaised] = False
            strNCMARNumber = Right(strThisYear, 2) & "001"
            rng = strNCMARNumber
        Else
            strNCMARNumber = rng.Offset(-1, 0) + 1
            rng = strNCMARNumber
        End If
    End With
    
    If Len(strNCMARNumber) = 4 Then strNCMARNumber = "0" & strNCMARNumber
    
    wkbLIST.Close SaveChanges:=True

End Sub

Private Sub Resubmit()
    
    Sheet3.[Status] = "AWAITING LEAD INSPECTOR APPROVAL"

    SendToLeadInspector
    
End Sub
Attribute VB_Name = "Picture"
Option Explicit

Private Sub ResizePicture()

    Dim sngHeight As Single
    Dim sngWidth

    With Selection.ShapeRange
    
        sngHeight = .Height
        sngWidth = .Width
        
        If sngHeight > 200 Then
            Do Until .Height <= 200
                .ScaleHeight 0.9, msoFalse
            Loop
        ElseIf sngHeight < 200 Then
            Do Until .Height >= 200
                .ScaleHeight 1.1, msoFalse
            Loop
        End If
        
        If sngWidth > 350 Then
            Do Until .Width <= 350
                .ScaleWidth 0.9, msoFalse
            Loop
        ElseIf sngWidth < 350 Then
            Do Until .Width >= 350
                .ScaleWidth 1.1, msoFalse
            Loop
        End If
        
    End With
    
End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

    'This sub helps the Lead Inspector to maintain the NCMAR form by
    'adding the 'correct' name of an Inspector or QA Engineer whenever
    'the Inpsectors or QA Engineers change. This form uses Active Directory
    'so the names must be recognisable to Active Directory. Therefore, we show
    'the global address book so that the name selected is always in the right format
    
    If Not Intersect(Target, [C2:C6000]) Is Nothing Then
        On Error Resume Next
        'If there is already a name there then delete it
        If Target <> vbNullString Then
            Target = vbNullString
        Else    'Show the address book
            Target = GetInspector
            If Target.Value = vbNullString Then
                Target.Offset(0, 1).Select
                Exit Sub
            Else
                GetUsersADInfo Target.Value
                Sheet1.Hyperlinks.Add Target, "mailto:" & strUserEmail
            End If
        End If
        Target.Offset(0, 1).Select
    End If
    If Not Intersect(Target, [H2:H6000]) Is Nothing Then
        On Error Resume Next
        If Target <> vbNullString Then
            Target = vbNullString
        Else
            Target = GetQAEngineer
            If Target.Value = vbNullString Then 'bsoltan- added this loop to check for hitting cancel
                Target.Offset(0, 1).Select
                Exit Sub
            Else
                GetUsersADInfo Target.Value
                Sheet1.Hyperlinks.Add Target, "mailto:" & strUserEmail
            End If
        End If
        Target.Offset(0, 1).Select
    End If

End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub CheckInputs()

    Dim i As Integer
    Dim strRange As String
    Dim boolMissingInput As Boolean

    '************* START CHECKING ***************
    '********************************************
    
    For i = 1 To UBound(strDPCRRangeNames)
        strRange = strDPCRRangeNames(i)
        On Error GoTo errHandler
        If IsEmpty(Sheet1.Range(strRange)(1, 1)) Then
            boolMissingInput = True
            Sheet1.Range(strRange).Interior.Color = vbRed
        End If
    Next i
    
    '************* END CHECKING *****************
    '********************************************
    
    If boolMissingInput Then
        MsgBox "Please complete ALL red boxes", vbOKOnly + vbExclamation, "Form Incomplete!"
        Exit Sub
    End If

errHandler:
    Call setDPCRRangeNames
    Resume Next

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    If Not boolCopyFinished Then Exit Sub
    
    If Target.Interior.Color = vbRed Then
        If Not IsEmpty(Target) Then Target.Interior.Color = vbWhite
    End If
    
End Sub
Attribute VB_Name = "Showcase"
Option Explicit

Public Sub CopyIssue(strTarget As String)

    Dim wks As Worksheet
    Dim wkb As Workbook
    Dim strEmail As String
    Dim rng As Range
    
    Set wkb = Workbooks.Open("\\Uk-ntce-s0001\n_vy0\vy0\KIM\EXPERIMENT\FORMS SC\NCMAR SHOWCASE RESULT.xls")
    Set wks = wkb.Worksheets(1)
    
    With ThisWorkbook.Worksheets(1)
        Set rng = .Range(strTarget)
        str1stFiveDigits = wks.[M1]
        str2ndFiveDigits = wks.[N1]
        rng = str1stFiveDigits & " " & str2ndFiveDigits
        rng.Offset(0, 1) = wks.[L1]
        rng.Offset(0, 4) = wks.[G1]
    End With
    
    wks.Cells.ClearContents
    
    Application.DisplayAlerts = False
    wkb.Close SaveChanges:=True
    Application.DisplayAlerts = True
    
    'On Error Resume Next
    Open "\\Uk-ntce-s0001\n_vy0\vy0\KIM\EXPERIMENT\FORMS SC\NumberOfUsers.txt" For Input As #1
        Input #1, bytUserNumber
    Close #1
        
    If bytUserNumber > 0 Then
        bytUserNumber = bytUserNumber - 1
        Open "\\Uk-ntce-s0001\n_vy0\vy0\KIM\EXPERIMENT\FORMS SC\NumberOfUsers.txt" For Output As #1
            Write #1, bytUserNumber
        Close #1
    End If
    
    Set wks = Nothing
    Set wkb = Nothing
    
    Application.ScreenUpdating = True
    Application.ScreenUpdating = False

End Sub
Attribute VB_Name = "Temp_Save"
Option Explicit
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
 
Attribute VB_Name = "eMail"
Option Explicit

Public Sub SendToSupplier(strFilepath As String, strSupplierName As String, strTemplate As String)

    Dim objApp As Outlook.Application
    Dim objMail As Outlook.MailItem
    
    Set objApp = CreateObject("Outlook.Application")
    Set objMail = objApp.CreateItemFromTemplate("\\Uk-ntce-s0001\n_vy0\vy0\VYS\VY6\QA\RANKT NCMAR-DPCR\E MAIL\" & strTemplate)
    
    With objMail
        Select Case strTemplate
            Case "NCMAR A-B NON REJECT PARTS FROM SUPPLIERS.oft"
                .Body = "Find attached Non Conforming Material Action Report NCMAR and reply form NCMAR2." _
                & Chr(10) & "Within 10 working days please close concern, E-Mail the completed NCMAR2 form to " & strQAEngineer & " of VY4." & Chr(10) & Chr(10) & _
                "Regards"
            Case "NCMAR A-C URGENT NTCE REJECT QUALITY CONCERN.oft"
                .Body = "Find attached Non Conforming Material Action Report NCMAR and reply form NCMAR 2." & Chr(10) & Chr(10) & _
                        "Within 24 hours please confirm the replacement or rework parts date with your VY4 purchase contact." & Chr(10) & _
                        "Within 10 working days please close concern by sending the completed NCMAR 2 form to Ray Creasey or Fernando Burguneo VY4." & _
                        Chr(10) & Chr(10) & "Best regards"
        End Select
        .To = strSupplierName
        .FlagIcon = olRedFlagIcon
        .Attachments.Add strFilepath
        .Display
    End With
    
    Set objApp = Nothing
    Set objMail = Nothing

End Sub

Public Sub SendToQAEngineer(strFilepath As String, strAddress As String)

    Dim objApp As Outlook.Application
    Dim objMail As Outlook.MailItem
    
    Set objApp = CreateObject("Outlook.Application")
    Set objMail = CreateItem(olMailItem)
    
    Sheet3.[Status] = "DPCR - SENT TO QA ENGINEER"
    strNCMARNumber = Sheet1.[NCMARNumber]
    
    With objMail
        .To = strAddress
        .Subject = "NCMAR No." & strNCMARNumber & " - Approved by Senior"
        .Display
        .FlagIcon = olGreenFlagIcon
        .Attachments.Add strFilepath
        .Send
    End With
    
    Set objApp = Nothing
    Set objMail = Nothing
    
    ThisWorkbook.Close SaveChanges:=True

End Sub

Public Sub SendRejectEmail(Optional strRejectReason As String)

    Dim objApp As Outlook.Application
    Dim objMail As Outlook.MailItem
    Dim strInspector As String
    Dim strInspectorAddress As String
    
    Set objApp = CreateObject("Outlook.Application")
    Set objMail = objApp.CreateItem(olMailItem)
    
    strInspector = Sheet3.[InspectorsName]
    strNCMARNumber = Sheet1.[NCMARNumber]

    strFilename = strRejectedPath & ThisWorkbook.Name
    strFilename = Replace(strFilename, " ", "%20")

    With objMail
        .To = "ntce.inspection@ntc-europe.co.uk"
        .Subject = strInspector & ": NCMAR " & strNCMARNumber & " REJECTED"
        .FlagIcon = olRedFlagIcon
        .BodyFormat = olFormatHTML
        .HTMLBody = "<html><body><p>The following <a href=" & strFilename & ">NCMAR</a> has been rejected for the following reasons:</p><p>" & strRejectReason & "</p></body></html>"
        .Send
    End With
    
    Set objApp = Nothing
    Set objMail = Nothing

End Sub

Public Sub SendDPCRReply(bool As Boolean)

    Dim objApp As Outlook.Application
    Dim objMail As Outlook.MailItem
    Dim strSubject As String
    Dim strSenior As String
    
    Set objApp = CreateObject("Outlook.Application")
    Set objMail = objApp.CreateItem(olMailItem)
    
    Select Case bool
        Case True: strSubject = "DPCR " & ThisWorkbook.Name & " - Engineer Approved"
        Case True: strSubject = "DPCR " & ThisWorkbook.Name & " - Engineer Rejected"
    End Select
        
    strSenior = GetSeniorEngineer
        
    Sheet3.[Status] = "DPCR - AWAITING ENGINEER APPROVAL"
    TemporarySave
        
    With objMail
        .To = strSenior
        .CC = "ntce.inspection@ntc-europe.co.uk"
        .Subject = strSubject
        .Attachments.Add strFilename
        .Send
    End With
    
    Set objApp = Nothing
    Set objMail = Nothing
    
    MsgBox "Your response has been sent to the Inspector" & vbCrLf & _
        "This workbook will now close", vbOKOnly + vbInformation
        
    ThisWorkbook.Close SaveChanges:=True

End Sub
Attribute VB_Name = "frmCalendar"
Attribute VB_Base = "0{6AFF7242-4C08-4FF5-9EB6-02F578694832}{F365480A-F253-42BA-82F7-CD541C291DEA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public Sub Calendar_click()
    
    Select Case bytCalendar
        Case 1: frmDPCRInput.tbxReplyDueDate = format(Calendar.Value, "dd/mm/yyyy")
        Case 1: frmDPCRResponse.tbxPartsAvailable = format(Calendar.Value, "dd/mm/yyyy")
        Case 1: frmDPCRResponse.tbxPartsRequired = format(Calendar.Value, "dd/mm/yyyy")
        
    End Select
    
End Sub

Public Sub UserForm_Activate()

    Calendar.Year = Year(Now)
    Calendar.Month = Month(Now)
    Calendar.Day = Day(Now)

End Sub
Attribute VB_Name = "frmDPCRInput"
Attribute VB_Base = "0{096CBB70-67A0-4CAA-88DE-E03DB0A8CC8B}{432075E2-DF65-4D67-B1E4-08F6B54C56AB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Dim strImportantPart As String

Private Sub tbxReplyDueDate_Enter()

    bytCalendar = 1
    frmCalendar.Show

End Sub

Private Sub opbImportantA_Click()

    strImportantPart = "A"
    
    opbImportantA.BackColor = &HE0E0E0
    opbImportantB.BackColor = &HE0E0E0
    opbImportantNo.BackColor = &HE0E0E0

End Sub

Private Sub opbImportantB_Click()

    strImportantPart = "B"
   
    opbImportantA.BackColor = &HE0E0E0
    opbImportantB.BackColor = &HE0E0E0
    opbImportantNo.BackColor = &HE0E0E0

End Sub

Private Sub opbImportantNo_Click()

    strImportantPart = "No"

    opbImportantA.BackColor = &HE0E0E0
    opbImportantB.BackColor = &HE0E0E0
    opbImportantNo.BackColor = &HE0E0E0

End Sub

Private Sub cmbEnter_Click()

    Dim boolInputError As Boolean
    Dim rng As Range

    'to add extra details not available from ShowCase
    
    '************* START CHECKING ******************************
    
    If fraImportantPart.Visible = True Then
        If opbImportantA.Value = False And opbImportantB.Value = False And _
            opbImportantNo.Value = False Then
            opbImportantA.BackColor = vbRed
            opbImportantB.BackColor = vbRed
            opbImportantNo.BackColor = vbRed
            boolInputError = True
        End If
    End If
    
    If tbxReplyDueDate.Value = vbNullString Or Not IsDate(tbxReplyDueDate.Value) Then
        frmCalendar.Show
        MsgBox "Please enter the date that the Engineer must respond by", vbOKOnly + vbInformation
    End If
    
    If boolInputError = True Then
        MsgBox "Please enter ALL the information in the red boxes", vbOKOnly + vbCritical
        Exit Sub
    End If
    
    '************** End Checking ********************************
    
    Select Case strImportantPart
        Case "A"
            Sheet4.Shapes("ImportantA").Visible = True
            Sheet4.Shapes("ImportantB").Visible = False
        Case "B"
            Sheet4.Shapes("ImportantA").Visible = False
            Sheet4.Shapes("ImportantB").Visible = True
        Case "No"
            Sheet4.Shapes("ImportantA").Visible = False
            Sheet4.Shapes("ImportantB").Visible = False
    End Select
    
    Application.ScreenUpdating = True

    Unload Me

End Sub

Attribute VB_Name = "frmDPCRResponse"
Attribute VB_Base = "0{7B127CE8-E00C-4B1C-BCBE-210131063997}{7B2EB281-9FC3-444B-A0AD-29D8D67908FC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Dim boolInputError As Boolean

Private Sub UserForm_Activate()

    boolInputError = False

End Sub

Private Sub cmbFinish_Click()
    
    '************* START CHECKING ******************************
    
    If tbxPartsAvailable = vbNullString And cboPartsAvailable.Value = vbNullString Then
        tbxPartsAvailable.BackColor = vbRed
        cboPartsAvailable.BackColor = vbRed
        boolInputError = True
    End If
    
    If tbxPartsRequired.Value = vbNullString Then
        tbxPartsRequired.BackColor = vbRed
        boolInputError = True
    End If
    
    If tbxDesignTestDecision = vbNullString Then
        tbxDesignTestDecision.BackColor = vbRed
        boolInputError = True
    End If
    
    If boolInputError = True Then
        MsgBox "Please enter ALL the information in the red boxes", vbOKOnly + vbCritical
        Exit Sub
    End If
    
    '************** End Checking ********************************

    Unload Me

End Sub

Private Sub tbxPartsAVailable_Enter()

    bytCalendar = 2
    frmCalendar.Show

End Sub

Private Sub tbxPartsRequired_Enter()

    bytCalendar = 3
    frmCalendar.Show

End Sub
Attribute VB_Name = "frmDesignAuthorise"
Attribute VB_Base = "0{ED94B6D0-C02A-4F2F-B5D0-D3A21CBC4747}{9BC546FA-DF63-4DE2-B226-9F5012223AB5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmbApprove_Click()

    If [PartsAvailableDate] = vbNullString And [BuildTestRequiredDate] = vbNullString And _
        [DesignTestDecision] = vbNullString Then
        frmDPCRResponse.Show
        Exit Sub
    End If
    
    strUsername = GetMailboxUserName
    GetUsersADInfo strUsername
    
    If Sheet3.[Status] = "DPCR - AWAITING ENGINEER APPROVAL" Then
        [EngineerSignature] = strUsername
        [EngineerSignDate] = Date
        Sheet3.[Status] = "DPCR - ENGINEER APPROVED"
    Else
        [SeniorSignature] = strUsername
        [SeniorSignDate] = Date
        Sheet3.[Status] = "DPCR - SENIOR APPROVED"
    End If
    
    TemporarySave
    
    SendDPCRReply (True)

End Sub

Private Sub cmbReject_Click()

    If [PartsAvailableDate] = vbNullString And [BuildTestRequiredDate] = vbNullString And _
        [DesignTestDecision] = vbNullString Then
        frmDPCRResponse.Show
        Exit Sub
    End If
    
    GetUsersADInfo strUsername
    
    If Sheet3.[Status] = "DPCR - AWAITING ENGINEER APPROVAL" Then
        [EngineerSignature] = strUsername
        [EngineerSignDate] = Date
        Sheet3.[Status] = "DPCR - ENGINEER REJECTED"
    Else
        [SeniorSignature] = strUsername
        [SeniorSignDate] = Date
        Sheet3.[Status] = "DPCR - SENIOR REJECTED"
    End If
    
    TemporarySave
    
    SendDPCRReply (False)

End Sub
Attribute VB_Name = "frmInspectionAuthorise"
Attribute VB_Base = "0{5F3070C2-5705-4B33-A269-4B0C59D58792}{30495A14-FD40-40DE-A13B-756208612E78}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit



Private Sub cmbApprove_Click()

    Dim strSupplierMail As String
    Dim strFilename As String

    If strTemplate = vbNullString Then
        MsgBox "Please choose an NCMAR template or select 'Concession'", vbOKOnly + vbCritical
        Exit Sub
    End If
    
    If strTemplate = "NCMAR FOR PARTS FROM JAPAN.oft" Then
        MsgBox "Please raise a Global Rank", vbOKOnly + vbCritical
        Exit Sub
    End If
    
    strFilename = ThisWorkbook.FullName

    strSupplierMail = Sheet3.[SupplierContactEmails]
    SendToSupplier strFilename, strSupplierMail, strTemplate
    strStatus = "SENT TO SUPPLIER"
    Sheet3.[Status] = strStatus
    
    Sheet3.Visible = xlSheetVeryHidden
    AddSentDateToDatabase
    
    ThisWorkbook.SaveAs Filename:=strCompletePath & ThisWorkbook.Name
    
    DeleteNCMAR strFilename
    
    ThisWorkbook.Close SaveChanges:=False
    
End Sub

Private Sub cmbCorrect_Click()

    Dim strInspectorEmail As String
    Dim strRejectReason As String
    
    strRejectReason = tbxRejectReason.Value

    If strRejectReason = vbNullString Then
        MsgBox "Please give the reason(s) why you are rejecting the NCMAR", vbOKOnly + vbCritical
        Exit Sub
    End If

    With Sheet3
        .[Status] = "NCMAR - LEAD INSPECTOR REJECTED"
        strInspectorEmail = .[InspectorsEmail]
    End With
    
    Call SendRejectEmail(strRejectReason)
    
    ThisWorkbook.SaveAs Filename:=strRejectedPath & ThisWorkbook.Name
        
    DeleteNCMAR strIncompletePath & ThisWorkbook.Name
        
    MsgBox "Your decision has been emailed back to " & Sheet1.[RaisedBy] & vbCrLf & _
        "and moved to the '2 - CORRECTIONS REQUIRED' folder", vbOKOnly + vbInformation
    
    ThisWorkbook.Close SaveChanges:=False
    
End Sub

Public Sub cmbRejectAndDelete_Click()

    Dim strFilename As String
    
    strFilename = ThisWorkbook.FullName

    Sheet3.[Status] = "REJECT - PERMANENT DELETION"

    DeleteRecordFromDatabase
    
    MsgBox "The NCMAR has been deleted from the database" & vbCrLf & _
        "and from the '1 - INCOMPLETE' folder", vbOKOnly + vbInformation
        
    Open "\\Uk-ntce-s0001\n_vy0\vy0\KIM\EXPERIMENT\FORMS SC\NCMARToBeDeleted.txt" For Output As #1
            Write #1, ThisWorkbook.FullName
    Close #1
    
    ThisWorkbook.Close SaveChanges:=True

End Sub

Private Sub opbABNonReject_Click()

    strTemplate = "NCMAR A-B NON REJECT PARTS FROM SUPPLIERS.oft"

End Sub

Private Sub opbABQualityCritical_Click()

    strTemplate = "NCMAR A-B QUALITY CRITICAL VES Parts.oft"

End Sub

Private Sub opbACUrgent_Click()

    strTemplate = "NCMAR A-C URGENT NTCE REJECT QUALITY CONCERN.oft"

End Sub

Private Sub opbCNoData_Click()

    strTemplate = "NCMAR C NO INSPECTION DATA.oft"

End Sub

Private Sub opbCNonReject_Click()

    strTemplate = "NCMAR C NON REJECT PARTS FROM SUPPLIER.oft"
    
End Sub

Private Sub opbJapan_Click()

    strTemplate = "NCMAR FOR PARTS FROM JAPAN.oft"

End Sub

Private Sub UserForm_Activate()

    Sheet1.Shapes("tbxRank").Select
    strRank = Selection.Characters.Text
    
    Select Case strRank
        Case "A", "B"
            opbCNoData.Visible = False
            opbCNonReject.Visible = False
        Case "C"
            opbABNonReject.Visible = False
            opbABQualityCritical.Visible = False
    End Select

End Sub
Attribute VB_Name = "frmIssueAction"
Attribute VB_Base = "0{8AC33C17-E298-4604-870C-775451DE6C45}{52B35F35-1F48-4A3F-AD33-0B4CCB0A7265}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub opbAcceptParts_Click()

    Dim intAnswer As Integer

    intAnswer = MsgBox("Please complete the DPCR form and then click the 'Accept Parts' button", vbOKCancel + vbInformation)
    If intAnswer = vbCancel Then
        frmIssueAction.Show
    Else
        Sheet4.Select
        Sheet4.Shapes("cmbAccept").Visible = msoTrue
    End If

End Sub

Private Sub opbRaiseNewForm_Click()

    Workbooks.Open Filename:=strBasePath & "FORMS - NEW FORMAT.xls"
    
    ThisWorkbook.Close SaveChanges:=True
End Sub

Private Sub opbRejectParts_Click()

    Sheet1.Visible = xlSheetVeryHidden

End Sub

Private Sub UserForm_Activate()

    strFilename = ThisWorkbook.FullName
    strFilename = Replace(strFilename, " ", "%20")

End Sub

Private Sub opbSendToEngineer_Click()

    TemporarySave
    SendDPCRToEngineer
    
    Sheet3.[Status] = "CONCESSION AWAITING ENGINEER APPROVAL"
    
    MsgBox "Your NCMAR has been sent to the Engineer for approval", vbOKOnly & vbInformation
    
    ThisWorkbook.Close SaveChanges:=True

End Sub

Private Sub opbSendToLeadInspector_Click()

    SendToLeadInspector
    
    Sheet3.[Status] = "AWAITING LEAD INSPECTOR APPROVAL"
    
    MsgBox "Your NCMAR has been sent to " & strUsername, vbOKOnly & vbInformation
    
    ThisWorkbook.Close SaveChanges:=True

End Sub

Private Sub opbNothing_Click()

    ThisWorkbook.Close SaveChanges:=False

End Sub
Attribute VB_Name = "frmNCMARInput"
Attribute VB_Base = "0{B6BD2B85-52C9-4FE7-B1BE-15D5C1B9D78F}{A7DEFCF8-7892-485D-8E15-4487E3638767}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Dim strConcernSource As String
Dim strImportantPart As String

Private Sub lbxConcernSource_Click()

    strConcernSource = lbxConcernSource.Value
    lbxConcernSource.BackColor = vbWhite

End Sub

Private Sub lbxReasonCode_Click()

    strReasonCode = Left(lbxReasonCode.Value, 1)
    If strReasonCode = "1" Then
        fraImportantPart.Visible = False
        lblImportantPart.Visible = False
        opbRankA.Enabled = False
        opbRankB.Enabled = False
        opbRankC.Value = True
        opbRankC.Enabled = False
    Else
        fraImportantPart.Visible = True
        lblImportantPart.Visible = True
        opbRankA.Enabled = True
        opbRankB.Enabled = True
        opbRankC.Enabled = True
        opbRankC.Value = False
    End If
    lbxReasonCode.BackColor = vbWhite

End Sub

Private Sub opbImportantA_Click()

    strImportantPart = "A"
    If strReasonCode <> "1" Then
        opbRankA.Value = True
        fraRank.Visible = False
        lblRank.Visible = False
        imgRankHelp.Visible = False
    Else
        fraRank.Visible = True
        lblRank.Visible = True
        imgRankHelp.Visible = True
    End If
    
    opbImportantA.BackColor = &HE0E0E0
    opbImportantB.BackColor = &HE0E0E0
    opbImportantNo.BackColor = &HE0E0E0

End Sub

Private Sub opbImportantB_Click()

    strImportantPart = "B"
    If strReasonCode <> "1" Then
        opbRankA.Value = True
        fraRank.Visible = False
        lblRank.Visible = False
        imgRankHelp.Visible = False
    Else
        fraRank.Visible = True
        lblRank.Visible = True
        imgRankHelp.Visible = True
    End If
    opbImportantA.BackColor = &HE0E0E0
    opbImportantB.BackColor = &HE0E0E0
    opbImportantNo.BackColor = &HE0E0E0

End Sub

Private Sub opbImportantNo_Click()

    strImportantPart = "No"
    lblRank.Visible = True
    fraRank.Visible = True
    imgRankHelp.Visible = True
    opbRankA.Value = False
    opbImportantA.BackColor = &HE0E0E0
    opbImportantB.BackColor = &HE0E0E0
    opbImportantNo.BackColor = &HE0E0E0

End Sub

Private Sub opbNML_Click()

    strPartsAllocation = "N"

End Sub

Private Sub opbNRD_Click()

    strPartsAllocation = "N"

End Sub

Private Sub opbNTCE_Click()

    strPartsAllocation = ""

End Sub

Private Sub imgRankHelp_Click()

    frmRankHelp.Show
    
End Sub

Private Sub opbRankA_Click()

    strRank = "A"
    opbRankA.BackColor = &HE0E0E0
    opbRankB.BackColor = &HE0E0E0
    opbRankC.BackColor = &HE0E0E0

End Sub

Private Sub opbRankB_Click()

    strRank = "B"
    opbRankA.BackColor = &HE0E0E0
    opbRankB.BackColor = &HE0E0E0
    opbRankC.BackColor = &HE0E0E0

End Sub

Private Sub opbRankC_Click()

    strRank = "C"
    opbRankA.BackColor = &HE0E0E0
    opbRankB.BackColor = &HE0E0E0
    opbRankC.BackColor = &HE0E0E0

End Sub

Private Sub opbNTCES_Click()

    strPartsAllocation = "N"

End Sub

Private Sub tbxConcernDescription_Enter()

    tbxConcernDescription.BackColor = vbWhite

End Sub

Private Sub tbxConcernDescription_Exit(ByVal Cancel As MSForms.ReturnBoolean)

    If tbxConcernDescription.Value <> vbNullString Then
        tbxConcernDescription.BackColor = vbWhite
    Else
        tbxConcernDescription.BackColor = vbRed
    End If

End Sub

Private Sub cmbEnter_Click()

    Dim boolInputError As Boolean
    Dim rng As Range
    Dim strQAPhone As String

    'to add extra details not available from ShowCase
    
    '************* START CHECKING ******************************
    
    If tbxConcernDescription.Value = vbNullString Then
        tbxConcernDescription.BackColor = vbRed
        boolInputError = True
    End If
    
    If tbxRejectQuantity.Value = vbNullString Or Not IsNumeric(tbxRejectQuantity) Then
        tbxRejectQuantity.BackColor = vbRed
        boolInputError = True
    End If
    
    If tbxOKQuantity.Value = vbNullString Or Not IsNumeric(tbxOKQuantity) Then
        tbxOKQuantity.BackColor = vbRed
        boolInputError = True
    End If
    
    If tbxNumberOfIssues.Value = vbNullString Or Not IsNumeric(tbxNumberOfIssues) Then
        tbxNumberOfIssues.BackColor = vbRed
        boolInputError = True
    End If
    
    If fraRank.Visible = True Then
        If opbRankA.Value = False And opbRankB.Value = False And opbRankC = False Then
            opbRankA.BackColor = vbRed
            opbRankB.BackColor = vbRed
            opbRankC.BackColor = vbRed
            boolInputError = True
        End If
    End If
    
    If fraImportantPart.Visible = True Then
        If opbImportantA.Value = False And opbImportantB.Value = False And _
            opbImportantNo.Value = False Then
            opbImportantA.BackColor = vbRed
            opbImportantB.BackColor = vbRed
            opbImportantNo.BackColor = vbRed
            boolInputError = True
        End If
    End If
    
    If strConcernSource = vbNullString Then
        lbxConcernSource.BackColor = vbRed
        boolInputError = True
    End If
    
    If lbxReasonCode.Value = Null Then
        lbxReasonCode.BackColor = vbRed
        boolInputError = True
    End If
    
    If boolInputError = True Then
        MsgBox "Please enter ALL the information in the red boxes", vbOKOnly + vbCritical
        Exit Sub
    End If
    
    '************** End Checking ********************************
    
    Application.ScreenUpdating = False
    
    GetUsersADInfo (strUsername)
    
    strUsername = StrConv(strUsername, vbUpperCase)
    
    On Error Resume Next
    Set rng = Sheet3.[QAEngineers].Find(strQAEngineer, LookAt:=xlWhole)
    If Not rng Is Nothing Then
        strQAEngineer = rng.Offset(0, 1)
        strQAPhone = rng.Offset(0, 2)
    End If
        
    With ThisWorkbook.Worksheets(1)
        .[NCMARNumber] = strNCMARNumber
        .[DateRaised] = Date
        .[RejectQuantity] = tbxRejectQuantity.Value
        .[OKQuantity] = tbxOKQuantity.Value
        .[ConcernSource] = StrConv(strConcernSource, vbUpperCase)
        .[ConcernDescription] = StrConv(tbxConcernDescription.Value, vbUpperCase) 'Concern Description
        .[DeliveredQuantity] = Val(tbxRejectQuantity) + Val(tbxOKQuantity)
        .[RaisedBy] = strUsername
        .Shapes("tbxRank").Select
        Selection.Characters.Text = strRank
        .[FurtherInfoMessage] = "FOR FURTHER INFORMATION PLEASE CONTACT " & strUsername & _
            " (" & strUserPhone & ") OR " & strQAEngineer & " (QA ENGINEER) on " & strQAPhone
    End With
    
    intNumberOfIssues = Val(tbxNumberOfIssues.Value)
    
    Sheet3.[InspectorsName] = strUsername
    
    Select Case strImportantPart
        Case "A"
            Sheet4.Shapes("ImportantA").Visible = True
            Sheet4.Shapes("ImportantB").Visible = False
        Case "B"
            Sheet4.Shapes("ImportantA").Visible = False
            Sheet4.Shapes("ImportantB").Visible = True
        Case "No"
            Sheet4.Shapes("ImportantA").Visible = False
            Sheet4.Shapes("ImportantB").Visible = False
    End Select
    
    AddIssueRows intNumberOfIssues
    
    SetNCMARMenuBarStates 0, 1, 0, 0, 0, 0, 0

    ThisWorkbook.Worksheets(1).[PartNumber].Select

    Application.ScreenUpdating = True
    
    Sheet1.CheckSpelling
    
    boolCopyFinished = True

    Unload Me
    
End Sub

Private Sub AddIssueRows(intNumberOfIssues As Integer)

    Dim i As Byte
    Dim intHeight As Integer
    Dim rng As Range
    
    If intNumberOfIssues = 1 Then Exit Sub
    
    Set rng = Sheet1.[NCMAR_Photos]
    
    With Sheet1
        For i = 1 To intNumberOfIssues - 1
            .Rows(8).Select
            Selection.Copy
            .Rows(9).Select
            Selection.Insert Shift:=xlDown
            Selection.ClearContents
            
            intHeight = rng.RowHeight
            intHeight = intHeight - 16.5
            rng.RowHeight = intHeight
        Next i
    End With
    
    Sheet4.Select
    Set rng = Sheet4.[DPCR_Photos]
    
    With Sheet4
        For i = 1 To intNumberOfIssues - 1
            .Rows(8 + i - 1).Select
            Selection.Copy
            .Rows(8 + i).Select
            Selection.Insert Shift:=xlDown
            
            intHeight = rng.RowHeight
            intHeight = intHeight - 16.5
            rng.RowHeight = intHeight
        Next i
    End With

    Sheet1.Select
    
End Sub

Private Sub UserForm_Initialize()

    GetUsersADInfo strUsername
    lblInspector.Caption = strUsername

End Sub
Attribute VB_Name = "frmRankHelp"
Attribute VB_Base = "0{9BA2A64C-E796-4DBF-BED6-6DE563036B84}{06F1EA85-FF79-47D1-AE8B-A5A4904245AE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



' InQuest injected base64 decoded content
' -zak

INQUEST-PP=macro
