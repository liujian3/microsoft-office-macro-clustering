Attribute VB_Name = "Frm_BuildRequest"
Attribute VB_Base = "0{11C5C27C-C14F-46A6-8BD9-4160BF71F1F8}{D5962574-60C7-4A2B-A47A-DCD678C01BC1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub btn_Cancel_Click()
Unload Me
End Sub

Private Sub btn_Request_Click()
On Error Resume Next
If IsInternetConnected Then
    ThisWorkbook.FollowHyperlink Address:=Frm_BuildRequest.Lbl_Lnk, NewWindow:=True
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "SamacSys - EPW"
End If
Unload Me
End Sub
Attribute VB_Name = "Frm_Find"
Attribute VB_Base = "0{2795B2CB-3E65-4BF9-993C-9DF5FDE8984B}{957522BF-41B5-44CC-8426-D52555D015CE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
#If VBA7 Then
    Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwflags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, ByVal lpMultiByteStr As LongPtr, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As Long
#Else
    Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwflags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, ByVal lpMultiByteStr As Long, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
#End If

Public url As String
'URLEncode supporting UTF-8 encoding
Private Const CP_UTF8 = 65001

Private Sub Btn_OK_Click()
Dim partID As Long
Dim manufPartNo As String

'Frm_PleaseWait.Show vbModeless

partID = Cbo_MPN.Column(0)
manufPartNo = UCase(Cbo_MPN.Column(1))

GetPart partID, manufPartNo

End Sub

Private Sub Btn_RequestPart_Click()
'PartRequest
On Error Resume Next

searchStr = Replace(Txt_MPN, Space(1), "%20")

If IsInternetConnected Then
    ThisWorkbook.FollowHyperlink Address:="http://componentsearchengine.com/search.html?searchString=" & searchStr, NewWindow:=True
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "SamacSys - EPW"
End If

End Sub

Private Sub Btn_Search_Click()
Dim result As String
Dim myURL As String
Dim oReq As Object
Dim strArray() As String
Dim searchStr As String

manufacturerID = Cbo_Manufacturer.Column(0)
searchStr = Txt_MPN

If manufacturerID = 0 And Len(searchStr) < 3 Then
    MsgBox "Please enter a minimum of 3 characters for the search term.", vbInformation, "SamacSys - EPW"
    Exit Sub
End If

If searchStr = "*" Then searchStr = vbNullString

Cbo_MPN.Clear

Set oReq = CreateObject("MSXML2.XMLHTTP")

RndNo = RandomNumbers(1, 1000000)

designerID = GetSetting("EPW", "User Details", "DesignerID", "")

If manufacturerID = 0 Then
    myURL = url & "/q/parts.php?partNumber=" & URLEncode(searchStr) & "&did=" & designerID & "&t=" & RndNo
Else
    myURL = url & "/q/parts.php?manufacturerID=" & manufacturerID & "&partNumber=" & URLEncode(searchStr) & "&did=" & designerID & "&t=" & RndNo
End If

'Debug.Print myURL
oReq.Open "GET", myURL, False, "epwRead", "libraryC4rd"
oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
oReq.send
result = oReq.responseText

Set oReq = Nothing

If Left(result, 6) = "Error:" Then
    MsgBox result, vbCritical, "SamacSys - EPW"
    Exit Sub
End If

If result <> vbNullString Then
    Lbl_RequestPart.Visible = False
    Lbl_RequestPart2.Visible = False
    Btn_RequestPart.Visible = False
    strArray = Split(result, vbCrLf)
'    Cbo_MPN.AddItem
    For i = 0 To UBound(strArray) - 1
        ResponseTxt = Replace(strArray(i), vbLf, vbNullString)

        FirstCommaI = InStr(1, ResponseTxt, ",")
        ID = Mid(ResponseTxt, 1, FirstCommaI - 1)

        MPN = Mid(ResponseTxt, FirstCommaI + 1)

        Cbo_MPN.AddItem ID
        Cbo_MPN.List(i, 1) = MPN
    Next
    Cbo_MPN.ListIndex = 0
    
'    Lbl_cntMPN.Caption = UBound(strArray) & " Part Numbers Found"
    Cbo_MPN.Enabled = True
    Btn_OK.Enabled = True
'    Cbo_MPN.Value = Cbo_MPN.List(0, 1)
Else
'    Lbl_cntMPN.Caption = "0 Part Numbers Found"
    Lbl_RequestPart.Visible = True
    Lbl_RequestPart2.Visible = True
    On Error Resume Next
    
    searchStr = Replace(Txt_MPN, Space(1), "%20")
    
    If IsInternetConnected Then
        ThisWorkbook.FollowHyperlink Address:="http://componentsearchengine.com/search.html?searchString=" & searchStr, NewWindow:=True
    Else
        MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "SamacSys - EPW"
    End If
'    Btn_RequestPart.Visible = True
End If


End Sub

Private Sub Cbo_Manufacturer_Change()
If Replace(Cbo_Manufacturer, Space(1), vbNullString) <> vbNullString Then
    Btn_Search.Enabled = True
Else
    Btn_Search.Enabled = False
End If
End Sub

Private Sub UserForm_Initialize()

Dim result As String
Dim myURL As String
Dim oReq As Object
Dim strArray() As String

url = GetSetting("EPW", "Settings", "URL", "")

Cbo_Manufacturer.Clear

Set oReq = CreateObject("MSXML2.XMLHTTP")

RndNo = RandomNumbers(1, 1000000)
designerID = GetSetting("EPW", "User Details", "DesignerID", "")

myURL = url & "/q/manufacturers.php?withPartStatusID=6" & "&did=" & designerID & "&t=" & RndNo
oReq.Open "GET", myURL, False, "epwRead", "libraryC4rd"
oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
oReq.send
result = oReq.responseText

Set oReq = Nothing

If Left(result, 6) = "Error:" Then
    MsgBox result, vbCritical, "SamacSys - EPW"
    Exit Sub
End If

'All Manufacturers
Cbo_Manufacturer.AddItem 0
Cbo_Manufacturer.List(0, 1) = "All Manufacturers"

strArray = Split(result, vbCrLf)
If UBound(strArray) <> 0 Then
    For i = 0 To UBound(strArray) - 1
        ResponseTxt = Replace(strArray(i), vbLf, vbNullString)

        FirstCommaI = InStr(1, ResponseTxt, ",")
        ID = Mid(ResponseTxt, 1, FirstCommaI - 1)

        manufacturer = Mid(ResponseTxt, FirstCommaI + 1)

        Cbo_Manufacturer.AddItem ID
        Cbo_Manufacturer.List(i + 1, 1) = manufacturer
    Next
    Cbo_Manufacturer.ListIndex = 0
End If


End Sub
Public Function RandomNumbers(Lowest As Long, Highest As Long, _
Optional Decimals As Integer)
   Application.Volatile  'Remove this line to "freeze" the numbers
   If IsMissing(Decimals) Or Decimals = 0 Then
      Randomize
      RandomNumbers = Int((Highest + 1 - Lowest) * Rnd + Lowest)
   Else
      Randomize
      RandomNumbers = Round((Highest - Lowest) * Rnd + Lowest, Decimals)
   End If
End Function

Function GetData(url As String) As String
Dim oReq As Object

    Set oReq = Nothing    ' Release the object.
    Set oReq = CreateObject("MSXML2.XMLHTTP")

    oReq.Open "GET", url, False
    oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    oReq.send
    GetData = oReq.responseText
    Set oReq = Nothing

End Function
Public Function UTF16To8(ByVal UTF16 As String) As String
Dim sBuffer As String
Dim lLength As Long
If UTF16 <> "" Then
    lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, 0, 0, 0, 0)
    sBuffer = Space$(lLength)
    lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, StrPtr(sBuffer), Len(sBuffer), 0, 0)
    sBuffer = StrConv(sBuffer, vbUnicode)
    UTF16To8 = Left$(sBuffer, lLength - 1)
Else
    UTF16To8 = ""
End If
End Function

Public Function URLEncode(StringVal As String, Optional SpaceAsPlus As Boolean = False, Optional UTF8Encode As Boolean = True) As String

Dim StringValCopy As String: StringValCopy = IIf(UTF8Encode, UTF16To8(StringVal), StringVal)
Dim StringLen As Long: StringLen = Len(StringValCopy)

If StringLen > 0 Then
    ReDim result(StringLen) As String
    Dim i As Long, CharCode As Integer
    Dim char As String, Space As String

  If SpaceAsPlus Then Space = "+" Else Space = "%20"

  For i = 1 To StringLen
    char = Mid$(StringValCopy, i, 1)
    CharCode = Asc(char)
    result(i) = "%" & Hex(CharCode)
  Next i
  URLEncode = Join(result, "")

End If
End Function
Attribute VB_Name = "Frm_PartRequest"
Attribute VB_Base = "0{146DB2F0-1DA1-416D-BD7D-58D0D5A0A4B0}{27819ABD-401E-4047-A69C-AA595AF6AF6D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
#If VBA7 Then
    Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwflags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, ByVal lpMultiByteStr As LongPtr, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As Long
    Private Declare PtrSafe Function LoadCursor Lib "User32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    Private Declare PtrSafe Function SetCursor Lib "User32" (ByVal hCursor As Long) As Long
#Else
    Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwflags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, ByVal lpMultiByteStr As Long, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
    Private Declare Function LoadCursor Lib "User32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    Private Declare Function SetCursor Lib "User32" (ByVal hCursor As Long) As Long
#End If

Private Const IDC_HAND As Long = 32649&
Public url As String
'URLEncode supporting UTF-8 encoding
Private Const CP_UTF8 = 65001

Private Sub Txt_Author_Change()
If Replace(Txt_Author, Space(1), vbNullString) <> vbNullString Then
    Btn_OK.Enabled = True
Else
    Btn_OK.Enabled = False
End If
End Sub

Private Sub btn_Cancel_Click()
Unload Me
End Sub

Private Sub Btn_Submit_Click()
Dim result As String
Dim myURL As String
Dim oReq As Object
Dim strArray() As String
Dim manufacturer As String
Dim MPN As String
Dim DatasheetLink As String
Dim WinLogin As String
Dim designerID As String
Dim PkgCatID As String

PkgCatID = Cbo_PkgCat.Column(0)
manufacturer = Cbo_Manufacturer.Column(0)
MPN = Txt_FullManufPartNo.Text
PinCnt = Txt_PinCnt.Text
DatasheetLink = Txt_DatasheetLink.Text

designerID = GetSetting("EPW", "User Details", "DesignerID", "")
'MyMAC = Replace(Worksheets("Setup").Range("D2").Value, "-", vbNullString)
'SplitMAC1 = fChangeBase(Hex2Dec(Left(MyMAC, 6)), 10, 32)
'SplitMAC2 = fChangeBase(Hex2Dec(Mid(MyMAC, 7, 6)), 10, 32)
'While Len(SplitMAC1) < 5
'    SplitMAC1 = "0" & SplitMAC1
'Wend
'While Len(SplitMAC2) < 5
'    SplitMAC2 = "0" & SplitMAC2
'Wend
'MyMAC = SplitMAC1 & SplitMAC2
'WinLogin = GetWinLogin

Set oReq = CreateObject("MSXML2.XMLHTTP")

RndNo = RandomNumbers(1, 1000000)

myURL = url & "/r/pr.php?manufacturerID=" & URLEncode(manufacturer) & "&partNumber=" & URLEncode(MPN) & "&pinCount=" & PinCnt & "&datasheetURL=" & URLEncode(DatasheetLink) & "&did=" & designerID & "&packageCategory=" & PkgCatID & "&t=" & RndNo
'Debug.Print myURL
oReq.Open "GET", myURL, False, "epwRead", "libraryC4rd"
oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
oReq.send
result = oReq.responseText

result = Replace(result, vbLf, vbNullString)

MsgBox result, vbInformation, "ECAD Part Wizard"

CloseForm:

Unload Me

End Sub

Private Sub Cbo_Manufacturer_Change()
Dim manufacturer As String
Dim MPN As String
Dim PinCnt As String
Dim DatasheetLink As String
Dim PkgCat As String

PkgCat = Cbo_PkgCat.Text
manufacturer = Cbo_Manufacturer.Text
MPN = Txt_FullManufPartNo.Text
PinCnt = Txt_PinCnt.Text
DatasheetLink = Txt_DatasheetLink.Text
If Replace(PkgCat, Space(1), vbNullString) <> vbNullString And Replace(manufacturer, Space(1), vbNullString) <> vbNullString And Replace(MPN, Space(1), vbNullString) <> vbNullString And Replace(PinCnt, Space(1), vbNullString) <> vbNullString And Replace(DatasheetLink, Space(1), vbNullString) <> vbNullString Then
    Btn_Submit.Enabled = True
Else
    Btn_Submit.Enabled = False
End If
End Sub

Private Sub Cbo_PkgCat_Change()
Dim manufacturer As String
Dim MPN As String
Dim PinCnt As String
Dim DatasheetLink As String
Dim PkgCat As String

PkgCat = Cbo_PkgCat.Text
manufacturer = Cbo_Manufacturer.Text
MPN = Txt_FullManufPartNo.Text
PinCnt = Txt_PinCnt.Text
DatasheetLink = Txt_DatasheetLink.Text
If Replace(PkgCat, Space(1), vbNullString) <> vbNullString And Replace(manufacturer, Space(1), vbNullString) <> vbNullString And Replace(MPN, Space(1), vbNullString) <> vbNullString And Replace(PinCnt, Space(1), vbNullString) <> vbNullString And Replace(DatasheetLink, Space(1), vbNullString) <> vbNullString Then
    Btn_Submit.Enabled = True
Else
    Btn_Submit.Enabled = False
End If
End Sub

Private Sub Lbl_PkgCat_Click()
On Error Resume Next
If IsInternetConnected Then
    url = GetSetting("EPW", "Settings", "URL", "")
    ThisWorkbook.FollowHyperlink Address:=url & "/packageCategories.html", NewWindow:=True
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.", vbExclamation, "SamacSys - EPW"
End If

End Sub

Private Sub Lbl_PkgCat_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
SetCursor LoadCursor(0, IDC_HAND)
End Sub

Private Sub Txt_DatasheetLink_Change()
Dim manufacturer As String
Dim MPN As String
Dim PinCnt As String
Dim DatasheetLink As String
Dim PkgCat As String

PkgCat = Cbo_PkgCat.Text
manufacturer = Cbo_Manufacturer.Text
MPN = Txt_FullManufPartNo.Text
PinCnt = Txt_PinCnt.Text
DatasheetLink = Txt_DatasheetLink.Text
If Replace(PkgCat, Space(1), vbNullString) <> vbNullString And Replace(manufacturer, Space(1), vbNullString) <> vbNullString And Replace(MPN, Space(1), vbNullString) <> vbNullString And Replace(PinCnt, Space(1), vbNullString) <> vbNullString And Replace(DatasheetLink, Space(1), vbNullString) <> vbNullString Then
    Btn_Submit.Enabled = True
Else
    Btn_Submit.Enabled = False
End If
End Sub

Private Sub Txt_FullManufPartNo_Change()
Dim manufacturer As String
Dim MPN As String
Dim PinCnt As String
Dim DatasheetLink As String
Dim PkgCat As String

PkgCat = Cbo_PkgCat.Text
manufacturer = Cbo_Manufacturer.Text
MPN = Txt_FullManufPartNo.Text
PinCnt = Txt_PinCnt.Text
DatasheetLink = Txt_DatasheetLink.Text
If Replace(PkgCat, Space(1), vbNullString) <> vbNullString And Replace(manufacturer, Space(1), vbNullString) <> vbNullString And Replace(MPN, Space(1), vbNullString) <> vbNullString And Replace(PinCnt, Space(1), vbNullString) <> vbNullString And Replace(DatasheetLink, Space(1), vbNullString) <> vbNullString Then
    Btn_Submit.Enabled = True
Else
    Btn_Submit.Enabled = False
End If
End Sub

Private Sub Txt_PinCnt_Change()
Dim manufacturer As String
Dim MPN As String
Dim PinCnt As String
Dim DatasheetLink As String
Dim PkgCat As String

'Check PinCount has been entered as an integer
If Txt_PinCnt.Text <> vbNullString Then
    If Not IsNumeric(Txt_PinCnt) Or InStr(Txt_PinCnt, ".") <> 0 Or Txt_PinCnt = 0 Then
        MsgBox "Please Enter Integer Value for Pin Count.", vbOKOnly, "SamacSys EPW"
        Txt_PinCnt.Text = vbNullString
        Exit Sub
    End If
End If

PkgCat = Cbo_PkgCat.Text
manufacturer = Cbo_Manufacturer.Text
MPN = Txt_FullManufPartNo.Text
PinCnt = Txt_PinCnt.Text
DatasheetLink = Txt_DatasheetLink.Text
If Replace(PkgCat, Space(1), vbNullString) <> vbNullString And Replace(manufacturer, Space(1), vbNullString) <> vbNullString And Replace(MPN, Space(1), vbNullString) <> vbNullString And Replace(PinCnt, Space(1), vbNullString) <> vbNullString And Replace(DatasheetLink, Space(1), vbNullString) <> vbNullString Then
    Btn_Submit.Enabled = True
Else
    Btn_Submit.Enabled = False
End If


End Sub

Private Sub UserForm_Initialize()

Dim result As String
Dim myURL As String
Dim oReq As Object
Dim strArray() As String
Dim MAN As String
Dim PkgCat As String
Dim PkgCalc As String

url = GetSetting("EPW", "Settings", "URL", "")

Cbo_PkgCat.Clear
Set oReq = CreateObject("MSXML2.XMLHTTP")
RndNo = RandomNumbers(1, 1000000)
myURL = url & "/q/packageCategories.php?&t=" & RndNo
oReq.Open "GET", myURL, False, "epwRead", "libraryC4rd"
oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
oReq.send
result = oReq.responseText

LstI = 1
strArray = Split(result, vbCrLf)
If UBound(strArray) <> 0 Then
    Cbo_PkgCat.AddItem
    For i = 0 To UBound(strArray) - 1
        ResponseTxt = Replace(strArray(i), vbLf, vbNullString)
        TabI1 = InStr(1, ResponseTxt, vbTab)
        PkgCatID = Mid(ResponseTxt, 1, TabI1 - 1)
        TabI2 = InStr(TabI1 + 1, ResponseTxt, vbTab)
        PkgCat = Mid(ResponseTxt, TabI1 + 1, TabI2 - TabI1 - 1)
        PkgCalc = Mid(ResponseTxt, TabI2 + 1)
        If PkgCalc = "1" Or PkgCatID = "999" Then
            Cbo_PkgCat.AddItem PkgCatID
            Cbo_PkgCat.List(LstI, 1) = PkgCat
            LstI = LstI + 1
        End If
    Next
    Cbo_PkgCat.Text = vbNullString
End If

Set oReq = Nothing

Cbo_Manufacturer.Clear

Set oReq = CreateObject("MSXML2.XMLHTTP")

RndNo = RandomNumbers(1, 1000000)

designerID = GetSetting("EPW", "User Details", "DesignerID", "")

myURL = url & "/q/manufacturers.php?" & "&did=" & designerID & "&t=" & RndNo
oReq.Open "GET", myURL, False, "epwRead", "libraryC4rd"
oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
oReq.send
result = oReq.responseText

strArray = Split(result, vbCrLf)
If UBound(strArray) <> 0 Then
    Cbo_Manufacturer.AddItem
    For i = 0 To UBound(strArray) - 1
        ResponseTxt = Replace(strArray(i), vbLf, vbNullString)
        CommaI = InStr(1, ResponseTxt, ",")
        ID = Mid(ResponseTxt, 1, CommaI - 1)
        MAN = Mid(ResponseTxt, CommaI + 1)
        Cbo_Manufacturer.AddItem ID
        Cbo_Manufacturer.List(i + 1, 1) = MAN
    Next
    Cbo_Manufacturer.Text = vbNullString
End If

Set oReq = Nothing

If Frm_Find.Cbo_Manufacturer.Value = "All Manufacturers" Then
    Cbo_Manufacturer.Text = vbNullString
Else
    Cbo_Manufacturer.Text = Frm_Find.Cbo_Manufacturer.Value
End If

Txt_FullManufPartNo.Text = Frm_Find.Txt_MPN.Value
Unload Frm_Find

End Sub
Public Function RandomNumbers(Lowest As Long, Highest As Long, Optional Decimals As Integer)
   Application.Volatile  'Remove this line to "freeze" the numbers
   If IsMissing(Decimals) Or Decimals = 0 Then
      Randomize
      RandomNumbers = Int((Highest + 1 - Lowest) * Rnd + Lowest)
   Else
      Randomize
      RandomNumbers = Round((Highest - Lowest) * Rnd + Lowest, Decimals)
   End If
End Function

Function GetData(url As String) As String
Dim oReq As Object

    Set oReq = Nothing    ' Release the object.
    Set oReq = CreateObject("MSXML2.XMLHTTP")

    oReq.Open "GET", url, False
    oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    oReq.send
    GetData = oReq.responseText
    Set oReq = Nothing

End Function
Public Function UTF16To8(ByVal UTF16 As String) As String
Dim sBuffer As String
Dim lLength As Long
If UTF16 <> "" Then
    lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, 0, 0, 0, 0)
    sBuffer = Space$(lLength)
    lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, StrPtr(sBuffer), Len(sBuffer), 0, 0)
    sBuffer = StrConv(sBuffer, vbUnicode)
    UTF16To8 = Left$(sBuffer, lLength - 1)
Else
    UTF16To8 = ""
End If
End Function

Public Function URLEncode(StringVal As String, Optional SpaceAsPlus As Boolean = False, Optional UTF8Encode As Boolean = True) As String

Dim StringValCopy As String: StringValCopy = IIf(UTF8Encode, UTF16To8(StringVal), StringVal)
Dim StringLen As Long: StringLen = Len(StringValCopy)

If StringLen > 0 Then
    ReDim result(StringLen) As String
    Dim i As Long, CharCode As Integer
    Dim char As String, Space As String

  If SpaceAsPlus Then Space = "+" Else Space = "%20"

  For i = 1 To StringLen
    char = Mid$(StringValCopy, i, 1)
    CharCode = Asc(char)
    result(i) = "%" & Hex(CharCode)
  Next i
  URLEncode = Join(result, "")

End If
End Function
Attribute VB_Name = "Frm_PleaseWait"
Attribute VB_Base = "0{A746CE97-3009-4271-9C9B-BE7C68E983B5}{00E6D21D-46BA-4C9A-AA1B-D6BCFF7DCD50}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "Frm_SubmitBug"
Attribute VB_Base = "0{BF6A75BF-A70D-4185-9520-5317F988A4A4}{E2BDE5F1-E9A2-45B0-A7C5-99EA30BF0C9C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
#If VBA7 Then
    Private Declare PtrSafe Function GetVersionExA Lib "kernel32" (lpVersionInformation As OSVERSIONINFO) As Integer
    'URLEncode supporting UTF-8 encoding
    Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwflags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, ByVal lpMultiByteStr As LongPtr, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As Long
    Private Declare PtrSafe Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long
#Else
    Private Declare Function GetVersionExA Lib "kernel32" (lpVersionInformation As OSVERSIONINFO) As Integer
    'URLEncode supporting UTF-8 encoding
    Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwflags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, ByVal lpMultiByteStr As Long, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
    Private Declare Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long
#End If

Private Const LOCALE_SDECIMAL As Long = &HE

Public url As String
Private Type OSVERSIONINFO
    dwOSVersionInfoSize As Long
    dwMajorVersion As Long
    dwMinorVersion As Long
    dwBuildNumber As Long
    dwPlatformId As Long
    szCSDVersion As String * 128
End Type

'URLEncode supporting UTF-8 encoding
Private Const CP_UTF8 = 65001
Public Function GetInfo(ByVal lInfo As Long) As String
    Dim Buffer As String
    Dim Ret As String
    Buffer = String$(256, 0)
    Ret = GetLocaleInfo(LOCALE_USER_DEFAULT, lInfo, Buffer, Len(Buffer))
    If Ret > 0 Then
        GetInfo = Left$(Buffer, Ret - 1)
    Else
        GetInfo = ""
    End If
End Function

Public Function getOS() As String
    Dim osinfo As OSVERSIONINFO
    Dim retvalue As Integer

    osinfo.dwOSVersionInfoSize = 148
    osinfo.szCSDVersion = Space$(128)
    retvalue = GetVersionExA(osinfo)

    Select Case osinfo.dwMajorVersion + osinfo.dwMinorVersion / 10
        Case 5#
            getOS = "Windows 2000"
        Case 5.1
            getOS = "Windows XP (32-bit)"
        Case 5.2
            getOS = "Windows XP (64-bit), 2003 Server, Windows Server 2003 R2"
        Case 6#
            getOS = "Windows Vista, 2008 Server"
        Case 6.1
            getOS = "Windows 7, 2008 Server R2"
        Case 6.2
            getOS = "Windows 8, Windows Server 2012"
        Case 6.3
            getOS = "Windows 8.1, Windows Server 2012 R2"
        Case 10#
            getOS = "Windows 10 Insider Preview, Windows Server Technical Preview"
        Case Else
            getOS = "Other version"
    End Select
End Function

Private Sub btn_Cancel_Click()
Unload Me
End Sub

Private Sub Btn_Submit_Click()
Dim result As String
Dim designerID As String
Dim OpSys As String
Dim OfficeVer As Variant
Dim bugData As Variant
Dim Desc As String
Dim partID As Long
Dim Target As Long
Dim epwVer As Variant
Dim prtVer As Variant

Is64bit = Len(Environ("ProgramW6432")) > 0
If Is64bit Then
    OpSys = getOS & " (64-bit)"
Else
    OpSys = getOS & " (32-bit)"
End If

Target = 0
If Chk_Pkg Then Target = Target + 1
If Chk_Pin Then Target = Target + 2
If Chk_Data Then Target = Target + 4
If Chk_Other Then Target = Target + 128
If Cbo_Type = "Application" Then Target = Target + 256
If Cbo_Type = "ECAD Export" Then Target = Target + 512

DecimalSymbol = GetInfo(LOCALE_SDECIMAL)
OfficeVer = Replace(Application.Version, DecimalSymbol, ".")

designerID = GetSetting("EPW", "User Details", "DesignerID", "")

Desc = Txt_Desc.Text
partID = Worksheets("Setup").Range("D3")
epwVer = Replace(Worksheets("Setup").Range("D1"), DecimalSymbol, ".")
epwVer = Replace(Worksheets("Setup").Range("D9"), DecimalSymbol, ".")

If Cbo_Type = "Application" Then
    bugData = "did=" & designerID & "&ev=" & epwVer & "&osv=" & URLEncode(OpSys) & "&ofv=" & OfficeVer & "&d=" & URLEncode(Desc) & "&t=" & Target
'    Debug.Print bugData
Else
    bugData = "did=" & designerID & "&p=" & partID & "&pv=" & prtVer & "&ev=" & epwVer & "&osv=" & URLEncode(OpSys) & "&ofv=" & OfficeVer & "&d=" & URLEncode(Desc) & "&t=" & Target
End If

result = PostData(bugData, url & "/r/bug.php")
result = Replace(result, vbLf, vbNullString)

MsgBox result, vbInformation, "ECAD Part Wizard"

CloseForm:

Unload Me

End Sub

Private Sub Cbo_Type_Change()
Dim BugType As String
Dim Desc As String

If Cbo_Type.Value = "Part" Then
    Frm_PartReasons.Visible = True
Else
    Frm_PartReasons.Visible = False
End If

BugType = Cbo_Type.Text
Desc = Txt_Desc.Text

If (Cbo_Type.Value = "Application" Or Cbo_Type.Value = "ECAD Export") And BugType <> vbNullString And Replace(Desc, Space(1), vbNullString) <> vbNullString Or (Cbo_Type.Value = "Part" And BugType <> vbNullString And Replace(Desc, Space(1), vbNullString) <> vbNullString And (Chk_Pin Or Chk_Pkg Or Chk_Data Or Chk_Other)) Then
    Btn_Submit.Enabled = True
Else
    Btn_Submit.Enabled = False
End If

End Sub

Private Sub Chk_Data_Click()
If Not Chk_Pin And Not Chk_Pkg And Not Chk_Data And Not Chk_Other Then
    Btn_Submit.Enabled = False
ElseIf Cbo_Type.Text <> vbNullString And Replace(Txt_Desc.Text, Space(1), vbNullString) <> vbNullString Then
    Btn_Submit.Enabled = True
End If
End Sub

Private Sub Chk_Other_Click()
If Not Chk_Pin And Not Chk_Pkg And Not Chk_Data And Not Chk_Other Then
    Btn_Submit.Enabled = False
ElseIf Cbo_Type.Text <> vbNullString And Replace(Txt_Desc.Text, Space(1), vbNullString) <> vbNullString Then
    Btn_Submit.Enabled = True
End If
End Sub

Private Sub Chk_Pin_Change()
If Not Chk_Pin And Not Chk_Pkg And Not Chk_Data And Not Chk_Other Then
    Btn_Submit.Enabled = False
ElseIf Cbo_Type.Text <> vbNullString And Replace(Txt_Desc.Text, Space(1), vbNullString) <> vbNullString Then
    Btn_Submit.Enabled = True
End If
End Sub

Private Sub Chk_Pkg_Click()
If Not Chk_Pin And Not Chk_Pkg And Not Chk_Data And Not Chk_Other Then
    Btn_Submit.Enabled = False
ElseIf Cbo_Type.Text <> vbNullString And Replace(Txt_Desc.Text, Space(1), vbNullString) <> vbNullString Then
    Btn_Submit.Enabled = True
End If
End Sub

Private Sub Txt_Desc_Change()
Dim BugType As String
Dim Desc As String

BugType = Cbo_Type.Text
Desc = Txt_Desc.Text


If (Cbo_Type.Value = "Application" Or Cbo_Type.Value = "ECAD Export") And BugType <> vbNullString And Replace(Desc, Space(1), vbNullString) <> vbNullString Or (Cbo_Type.Value = "Part" And BugType <> vbNullString And Replace(Desc, Space(1), vbNullString) <> vbNullString And (Chk_Pin Or Chk_Pkg Or Chk_Data Or Chk_Other)) Then
    Btn_Submit.Enabled = True
Else
    Btn_Submit.Enabled = False
End If

End Sub

Private Sub UserForm_Initialize()

Dim result As String
Dim myURL As String
Dim oReq As Object
Dim strArray() As String

url = GetSetting("EPW", "Settings", "URL", "")

Txt_Desc.Text = vbNullString

Cbo_Type.AddItem "Application"
If Worksheets("Template").Range("A1") <> vbNullString Or Frm_Find.Cbo_MPN.Value <> vbNullString Then
    Cbo_Type.AddItem "Part"
    Cbo_Type.AddItem "ECAD Export"
Else
    Cbo_Type.ListIndex = 0
End If
'Cbo_Manufacturer.Text = Frm_Find.Cbo_Manufacturer.Value

If Frm_Find.Cbo_MPN.Value <> vbNullString Then
    Cbo_Type.Text = "Part"
    Chk_Other = 1
    Txt_Desc.Text = "Problem downloading " & Frm_Find.Cbo_MPN.Value & " from " & Frm_Find.Cbo_Manufacturer.Value
    Unload Frm_Find
End If

End Sub
Public Function RandomNumbers(Lowest As Long, Highest As Long, Optional Decimals As Integer)
   Application.Volatile  'Remove this line to "freeze" the numbers
   If IsMissing(Decimals) Or Decimals = 0 Then
      Randomize
      RandomNumbers = Int((Highest + 1 - Lowest) * Rnd + Lowest)
   Else
      Randomize
      RandomNumbers = Round((Highest - Lowest) * Rnd + Lowest, Decimals)
   End If
End Function

Function GetData(url As String) As String
Dim oReq As Object

    Set oReq = Nothing    ' Release the object.
    Set oReq = CreateObject("MSXML2.XMLHTTP")

    oReq.Open "GET", url, False
    oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    oReq.send
    GetData = oReq.responseText
    Set oReq = Nothing

End Function
Public Function UTF16To8(ByVal UTF16 As String) As String
Dim sBuffer As String
Dim lLength As Long
If UTF16 <> "" Then
    lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, 0, 0, 0, 0)
    sBuffer = Space$(lLength)
    lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, StrPtr(sBuffer), Len(sBuffer), 0, 0)
    sBuffer = StrConv(sBuffer, vbUnicode)
    UTF16To8 = Left$(sBuffer, lLength - 1)
Else
    UTF16To8 = ""
End If
End Function

Public Function URLEncode(StringVal As String, Optional SpaceAsPlus As Boolean = False, Optional UTF8Encode As Boolean = True) As String

Dim StringValCopy As String: StringValCopy = IIf(UTF8Encode, UTF16To8(StringVal), StringVal)
Dim StringLen As Long: StringLen = Len(StringValCopy)

If StringLen > 0 Then
    ReDim result(StringLen) As String
    Dim i As Long, CharCode As Integer
    Dim char As String, Space As String

  If SpaceAsPlus Then Space = "+" Else Space = "%20"

  For i = 1 To StringLen
    char = Mid$(StringValCopy, i, 1)
    CharCode = Asc(char)
    result(i) = "%" & Hex(CharCode)
  Next i
  URLEncode = Join(result, "")

End If
End Function
Function PostData(Data As Variant, url As String) As String
Dim oReq As Object

    Set oReq = Nothing    ' Release the object.
    Set oReq = CreateObject("MSXML2.XMLHTTP")
    oReq.Open "POST", url, False
    oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    oReq.send Data
    PostData = oReq.responseText
    Set oReq = Nothing

End Function
Attribute VB_Name = "Module1"
#If VBA7 Then
    Public Declare PtrSafe Function XCellCompile Lib "SolutionPackerAddIn.dll" Alias "DummyFunc0" () As Long
    Private Declare PtrSafe Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
    Private Declare PtrSafe Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
    Private Declare PtrSafe Function EnumProcesses Lib "PSAPI.DLL" (lpidProcess As Long, ByVal cb As Long, cbNeeded As Long) As Long
    Private Declare PtrSafe Function EnumProcessModules Lib "PSAPI.DLL" (ByVal hProcess As Long, lphModule As Long, ByVal cb As Long, lpcbNeeded As Long) As Long
    Private Declare PtrSafe Function GetModuleBaseName Lib "PSAPI.DLL" Alias "GetModuleBaseNameA" (ByVal hProcess As Long, ByVal hModule As Long, ByVal lpFileName As String, ByVal nSize As Long) As Long
    Public Declare PtrSafe Function LoadLibrary Lib "kernel32" Alias "LoadLibraryA" (ByVal libFileName As String) As Long
    Public Declare PtrSafe Function GetExternalExcelApp Lib "xcutil.dll" (ByVal seachedCaption As String, ByVal fullMatch As Boolean, ByRef result As Variant) As Long
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
    Private Declare PtrSafe Function GetUserNameAPI Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
    Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwflags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, ByVal lpMultiByteStr As LongPtr, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As Long
    Private Declare PtrSafe Function InternetGetConnectedState Lib "wininet.dll" (ByRef dwflags As Long, ByVal dwReserved As Long) As Long
    Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare PtrSafe Function GetWindowLong Lib "User32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
    Private Declare PtrSafe Function SetWindowLong Lib "User32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
#Else
    Public Declare Function XCellCompile Lib "SolutionPackerAddIn.dll" Alias "DummyFunc0" () As Long
    Private Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
    Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
    Private Declare Function EnumProcesses Lib "PSAPI.DLL" (lpidProcess As Long, ByVal cb As Long, cbNeeded As Long) As Long
    Private Declare Function EnumProcessModules Lib "PSAPI.DLL" (ByVal hProcess As Long, lphModule As Long, ByVal cb As Long, lpcbNeeded As Long) As Long
    Private Declare Function GetModuleBaseName Lib "PSAPI.DLL" Alias "GetModuleBaseNameA" (ByVal hProcess As Long, ByVal hModule As Long, ByVal lpFileName As String, ByVal nSize As Long) As Long
    Public Declare Function LoadLibrary Lib "kernel32" Alias "LoadLibraryA" (ByVal libFileName As String) As Long
    Public Declare Function GetExternalExcelApp Lib "xcutil.dll" (ByVal seachedCaption As String, ByVal fullMatch As Boolean, ByRef result As Variant) As Long
    Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
    Private Declare Function GetUserNameAPI Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
    Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwflags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, ByVal lpMultiByteStr As Long, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
    Private Declare Function InternetGetConnectedState Lib "wininet.dll" (ByRef dwflags As Long, ByVal dwReserved As Long) As Long
    Private Declare Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function GetWindowLong Lib "User32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
    Private Declare Function SetWindowLong Lib "User32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long

#End If



Public SDD_HOME As String
Private Const PROCESS_VM_READ = &H10
Private Const PROCESS_QUERY_INFORMATION = &H400

'URLEncode supporting UTF-8 encoding
Private Const CP_UTF8 = 65001
Private Const INTERNET_CONNECTION_MODEM As Long = &H1
Private Const INTERNET_CONNECTION_LAN As Long = &H2
Private Const INTERNET_CONNECTION_PROXY As Long = &H4
Private Const INTERNET_CONNECTION_OFFLINE As Long = &H20


Function IsInternetConnected() As Boolean
    Dim L As Long
    Dim r As Long
    r = InternetGetConnectedState(L, 0&)
    If r = 0 Then
        IsInternetConnected = False
    Else
        If r <= 4 Then
            IsInternetConnected = True
        Else
            IsInternetConnected = False
        End If
    End If
End Function
Function GetWinLogin() As String
Dim lpBuff As String * 25
GetUserNameAPI lpBuff, 25
GetWinLogin = Left(lpBuff, InStr(lpBuff, Chr(0)) - 1)
End Function
Sub Trim(Control As IRibbonControl)
    Sheets("Trimmed").Cells.ClearContents
    Selection.Copy
    Sheets("Trimmed").Select
    Sheets("Trimmed").Range("A1").Select
    Sheets("Trimmed").Paste
End Sub

Sub SetPinNo(Control As IRibbonControl)
Sheets("Setup").Cells(1, 2).Value = ColLett(Selection.Column)
MsgBox "Pin Number/Alphanumeric Column Set to " & ColLett(Selection.Column), vbOKOnly, "ECAD Part Wizard"
End Sub

Sub SetPinLabel(Control As IRibbonControl)
Sheets("Setup").Cells(2, 2).Value = ColLett(Selection.Column)
MsgBox "Pin Label/Function Column Set to " & ColLett(Selection.Column), vbOKOnly, "ECAD Part Wizard"
End Sub

Sub Keep(Control As IRibbonControl)
Cols2Keep = ExtractColumns(Selection.Address(columnabsolute:=False))
Sheets("Setup").Cells(3, 2).Value = Cols2Keep

If Cols2Keep <> vbNullString Then MsgBox "Column(s) " & Cols2Keep & " set to Keep.", vbOKOnly, "ECAD Part Wizard"
End Sub

Sub SetGate(Control As IRibbonControl)
If Worksheets("Template").Range("A1") <> vbNullString Then
    If ActiveSheet.Name <> "Template" Then
        Worksheets("Template").Activate
    Else
        If Selection.Columns.Count > 1 Then
            MsgBox "Please make your selection under a single column before assigning gates.", vbOKOnly, "ECAD Part Wizard"
        Else
            frm_SetGate.Show
        End If
    End If
End If
End Sub
Sub SetType(Control As IRibbonControl)
If Worksheets("Template").Range("A1") <> vbNullString Then
    If ActiveSheet.Name <> "Template" Then
        Worksheets("Template").Activate
    Else
        If Selection.Columns.Count > 1 Then
            MsgBox "Please make your selection under a single column before setting pin type.", vbOKOnly, "ECAD Part Wizard"
        Else
            frm_SetType.Show
        End If
    End If
End If
End Sub
Sub SetSwap(Control As IRibbonControl)
If Worksheets("Template").Range("A1") <> vbNullString Then
    If ActiveSheet.Name <> "Template" Then
        Worksheets("Template").Activate
    Else
        If Selection.Columns.Count > 1 Then
            MsgBox "Please make your selection under a single column before setting pin swap.", vbOKOnly, "ECAD Part Wizard"
        Else
            frm_SetSwap.Show
        End If
    End If
End If
End Sub

Function AutoAssignPinSide(FlipPinsR As Boolean)
Dim FirstRow As Integer
Dim LastRow As Integer

Worksheets("Template").Activate

'Sort by Pin Group
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[[GateSort]]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With


r = 2
startRow = 2
PinCnt = 0
'GateNo = 0
PrevGate = Sheets("Template").Cells(r, 1).Value
CurrGate = PrevGate
While PrevGate <> vbNullString
    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(r, 1).Value
    If CurrGate = PrevGate Then
        PinCnt = PinCnt + 1
    Else

        endRow = r - 1

        If (PinCnt / 2 - Int(PinCnt / 2)) <> 0 Then
            LeftPinCnt = Round(PinCnt / 2 + 0.5)
        Else
            LeftPinCnt = Round(PinCnt / 2)
        End If

        For Row = startRow To endRow - (PinCnt - LeftPinCnt)
        'Left Pins
            Sheets("Template").Cells(Row, 1).Select
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 12398126
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            With Selection.Font
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = 0
            End With

        Next Row
        
        For Row = startRow + LeftPinCnt To endRow
        'Right Pins
            Sheets("Template").Cells(Row, 1).Select
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 3051456
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            With Selection.Font
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = 0
            End With
        Next Row
        
        'Flip Right Pins
        If FlipPinsR Then
            FirstRow = startRow + LeftPinCnt
            LastRow = endRow
            FlipPins FirstRow, LastRow
        End If
        
        startRow = endRow + 1
        PinCnt = 0
        r = r - 1
    End If
    
    r = r + 1
    
Wend

End Function

Function AutoAssignPinSideLRA()
Dim FirstRow As Integer
Dim LastRow As Integer

Worksheets("Template").Activate

'Sort by Pin Group
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[[GateSort]]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With


r = 2
startRow = 2
PinCnt = 0
'GateNo = 0
PrevGate = Sheets("Template").Cells(r, 1).Value
CurrGate = PrevGate
While PrevGate <> vbNullString
    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(r, 1).Value
    If CurrGate = PrevGate Then
        PinCnt = PinCnt + 1
    Else

        endRow = r - 1

        If (PinCnt / 2 - Int(PinCnt / 2)) <> 0 Then
            LeftPinCnt = Round(PinCnt / 2 + 0.5)
        Else
            LeftPinCnt = Round(PinCnt / 2)
        End If

        For Row = startRow To endRow
            If Row Mod 2 = 0 Then  'Left Pins
                Sheets("Template").Cells(Row, 1).Select
                With Selection.Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = 12398126
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                With Selection.Font
                    .ThemeColor = xlThemeColorDark1
                    .TintAndShade = 0
                End With
            Else 'Right Pins
                Sheets("Template").Cells(Row, 1).Select
                With Selection.Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = 3051456
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                With Selection.Font
                    .ThemeColor = xlThemeColorDark1
                    .TintAndShade = 0
                End With
            End If

        Next Row
        
        startRow = endRow + 1
        PinCnt = 0
        r = r - 1
    End If
    
    r = r + 1
    
Wend

End Function


Function FlipPins(FirstRow As Integer, LastRow As Integer)
Dim Rng1 As Range, Rng2 As Range
Dim arr1 As Variant, arr2 As Variant

RowCnt = (LastRow - FirstRow) + 1

If (RowCnt Mod 2) = 0 Then
    FlipCnt = RowCnt / 2
Else
    FlipCnt = Application.WorksheetFunction.RoundDown((RowCnt / 2), 0)
End If

ActiveSheet.Unprotect Password:="m1llenn1ums4r0s"

For Row = 1 To FlipCnt Step 1
    Set Rng1 = Range(Cells(FirstRow, 1), Cells(FirstRow, 9))
    Set Rng2 = Range(Cells(LastRow, 1), Cells(LastRow, 9))
    Application.ScreenUpdating = False
    arr1 = Rng1.Value
    arr2 = Rng2.Value
    Rng1.Value = arr2
    Rng2.Value = arr1
    Application.ScreenUpdating = True
    FirstRow = FirstRow + 1
    LastRow = LastRow - 1
Next Row

ActiveSheet.Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True

End Function
Function AutoAssignPinSideLBRT()
Dim LastRow As Integer

Worksheets("Template").Activate

'Sort by Pin Group
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[[#All],[GateSort]]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With


r = 2
startRow = 2
PinCnt = 0
'GateNo = 0
PrevGate = Sheets("Template").Cells(r, 1).Value
CurrGate = PrevGate
While PrevGate <> vbNullString
    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(r, 1).Value
    If CurrGate = PrevGate Then
        PinCnt = PinCnt + 1
    Else

        endRow = r - 1

'        If (PinCnt / 4 - Int(PinCnt / 4)) <> 0 Then
'        If PinCnt >= 4 Then
'            LeftPinCnt = WorksheetFunction.RoundDown(PinCnt / 4, 0)
'        Else
            LeftPinCnt = WorksheetFunction.RoundUp(PinCnt / 4, 0)
            RightPinCnt = WorksheetFunction.RoundUp((PinCnt - LeftPinCnt) / 3, 0)
            TopPinCnt = WorksheetFunction.RoundUp((PinCnt - (LeftPinCnt + RightPinCnt)) / 2, 0)
'        End If
'        Else
'            LeftPinCnt = Round(PinCnt / 4)
'        End If
        
        BottomPinCnt = PinCnt - (LeftPinCnt + RightPinCnt + TopPinCnt)
        
'        Debug.Print "EndRow = " & EndRow
        
'        Debug.Print "Pin Count = " & PinCnt
        
'        Debug.Print "Left = " & LeftPinCnt
'        Debug.Print "Right = " & RightPinCnt
'        Debug.Print "Top = " & TopPinCnt
'        Debug.Print "Bottom = " & BottomPinCnt

        For Row = startRow To endRow - (RightPinCnt + TopPinCnt + BottomPinCnt)
        'Left Pins
            Sheets("Template").Cells(Row, 1).Select
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 12398126
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            With Selection.Font
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = 0
            End With
            
        Next Row
        
        
        For Row = startRow + LeftPinCnt To endRow - (TopPinCnt + BottomPinCnt)
'         For Row = StartRow + LeftPinCnt + RightPinCnt + TopPinCnt To EndRow
        'Bottom Pins
            Sheets("Template").Cells(Row, 1).Select
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 2997037
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            With Selection.Font
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = 0
            End With
        
        Next Row
        
        For Row = startRow + LeftPinCnt + RightPinCnt To endRow - (BottomPinCnt)
'        For Row = StartRow + LeftPinCnt To EndRow - (TopPinCnt + BottomPinCnt)
        'Right Pins
            Sheets("Template").Cells(Row, 1).Select
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 3051456
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            With Selection.Font
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = 0
            End With

        Next Row
        
        FlipPins startRow + LeftPinCnt + RightPinCnt, endRow - (BottomPinCnt)
        
        For Row = startRow + LeftPinCnt + RightPinCnt + TopPinCnt To endRow
'        For Row = StartRow + LeftPinCnt + RightPinCnt To EndRow - (BottomPinCnt)
        'Top Pins
            Sheets("Template").Cells(Row, 1).Select
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 3289809
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            With Selection.Font
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = 0
            End With
        Next Row
        
        LastRow = endRow
        FlipPins startRow + LeftPinCnt + RightPinCnt + TopPinCnt, LastRow
        
        startRow = endRow + 1
        PinCnt = 0
        r = r - 1
    End If
    
    r = r + 1
    
Wend

End Function
Function AutoAssignPinSideType()

Worksheets("Template").Activate

'Sort by Fracture then Type
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[GateSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Type]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

r = 2
startRow = 2
PinCnt = 0
NonIOPG = 0
LeftNonIOPG = 0
RightNonIOPG = 0
'GateNo = 0
PrevGate = Sheets("Template").Cells(r, 1).Value
CurrGate = PrevGate
While PrevGate <> vbNullString
    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(r, 1).Value
    If CurrGate = PrevGate Then
        If Worksheets("Template").Cells(startRow + PinCnt, 4) <> "Input" And Worksheets("Template").Cells(startRow + PinCnt, 4) <> "Output" And Worksheets("Template").Cells(startRow + PinCnt, 4) <> "Power" And Worksheets("Template").Cells(startRow + PinCnt, 4) <> "Ground" Then NonIOPG = NonIOPG + 1
        PinCnt = PinCnt + 1
    Else
    
    
        If (NonIOPG / 2 - Int(NonIOPG / 2)) <> 0 Then
            LeftNonIOPGcnt = Round(NonIOPG / 2 + 0.5)
        Else
            LeftNonIOPGcnt = Round(NonIOPG / 2)
        End If
        
        RightNonIOPGcnt = NonIOPG - LeftNonIOPGcnt

        endRow = r - 1

'        If (PinCnt / 4 - Int(PinCnt / 4)) <> 0 Then
'        If PinCnt >= 4 Then
'            LeftPinCnt = WorksheetFunction.RoundDown(PinCnt / 4, 0)
'        Else
'            LeftPinCnt = WorksheetFunction.RoundUp(PinCnt / 4, 0)
'            RightPinCnt = WorksheetFunction.RoundUp((PinCnt - LeftPinCnt) / 3, 0)
'            TopPinCnt = WorksheetFunction.RoundUp((PinCnt - (LeftPinCnt + RightPinCnt)) / 2, 0)
'        End If
'        Else
'            LeftPinCnt = Round(PinCnt / 4)
'        End If
        
        BottomPinCnt = PinCnt - (LeftPinCnt + RightPinCnt + TopPinCnt)
        
'        Debug.Print "NonIOPG = " & NonIOPG
'        Debug.Print "LeftNonIOPGcnt = " & LeftNonIOPGcnt
'        Debug.Print "RightNonIOPGcnt = " & RightNonIOPGcnt
'        Debug.Print "EndRow = " & EndRow
'        Debug.Print "Pin Count = " & PinCnt
'        Debug.Print "Left = " & LeftPinCnt
'        Debug.Print "Right = " & RightPinCnt
'        Debug.Print "Top = " & TopPinCnt
'        Debug.Print "Bottom = " & BottomPinCnt

        For Row = startRow To endRow
        'Left Pins
        
        If (Worksheets("Template").Cells(Row, 4) <> "Input" And Worksheets("Template").Cells(Row, 4) <> "Output" And Worksheets("Template").Cells(Row, 4) <> "Power" And Worksheets("Template").Cells(Row, 4) <> "Ground" And LeftNonIOPG <= LeftNonIOPGcnt) Then
            LeftNonIOPG = LeftNonIOPG + 1
        ElseIf (Worksheets("Template").Cells(Row, 4) <> "Input" And Worksheets("Template").Cells(Row, 4) <> "Output" And Worksheets("Template").Cells(Row, 4) <> "Power" And Worksheets("Template").Cells(Row, 4) <> "Ground" And RightNonIOPG <= RightNonIOPGcnt) Then
            RightNonIOPG = RightNonIOPG + 1
        End If
        
        If Worksheets("Template").Cells(Row, 4) = "Input" Or (Worksheets("Template").Cells(Row, 4) <> "Input" And Worksheets("Template").Cells(Row, 4) <> "Output" And Worksheets("Template").Cells(Row, 4) <> "Power" And Worksheets("Template").Cells(Row, 4) <> "Ground" And LeftNonIOPG <= LeftNonIOPGcnt) Then
            Sheets("Template").Cells(Row, 1).Select
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 12398126
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            With Selection.Font
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = 0
            End With
        
        ElseIf Worksheets("Template").Cells(Row, 4) = "Output" Or (Worksheets("Template").Cells(Row, 4) <> "Input" And Worksheets("Template").Cells(Row, 4) <> "Output" And Worksheets("Template").Cells(Row, 4) <> "Power" And Worksheets("Template").Cells(Row, 4) <> "Ground" And RightNonIOPG <= RightNonIOPGcnt) Then
        'Right Pins
            Sheets("Template").Cells(Row, 1).Select
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 3051456
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            With Selection.Font
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = 0
            End With

        'Top Pins
        ElseIf Worksheets("Template").Cells(Row, 4) = "Power" Then
            Sheets("Template").Cells(Row, 1).Select
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 3289809
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            With Selection.Font
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = 0
            End With

        'Bottom Pins
        ElseIf Worksheets("Template").Cells(Row, 4) = "Ground" Then
            Sheets("Template").Cells(Row, 1).Select
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 2997037
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            With Selection.Font
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = 0
            End With
        End If
        Next Row
        
        startRow = endRow + 1
        PinCnt = 0
        NonIOPG = 0
        LeftNonIOPG = 0
        RightNonIOPG = 0
        r = r - 1
    End If
    
    r = r + 1
    
Wend
End Function
Sub AutoPins(Control As IRibbonControl)
If Worksheets("Template").Range("A1") <> vbNullString Then
    If ActiveSheet.Name <> "Template" Then Worksheets("Template").Activate
    frm_SetPinSide.Show
End If
End Sub

Sub LeftPins(Control As IRibbonControl)
If Worksheets("Template").Range("A1") <> vbNullString Then
    If ActiveSheet.Name <> "Template" Then
        Worksheets("Template").Activate
    Else
        If Selection.Column <> 1 Then
            MsgBox "Please make your selection under " & Chr(34) & "Fracture" & Chr(34) & " (Column A)", vbOKOnly, "ECAD Part Wizard"
            Exit Sub
        End If
        For Each c In Selection
            If c <> vbNullString Then
                c.Select
                With Selection.Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = 12398126
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                With Selection.Font
                    .ThemeColor = xlThemeColorDark1
                    .TintAndShade = 0
                End With
            End If
        Next c
    End If
End If
End Sub

Sub RightPins(Control As IRibbonControl)
If Worksheets("Template").Range("A1") <> vbNullString Then
    If ActiveSheet.Name <> "Template" Then
        Worksheets("Template").Activate
    Else
        If Selection.Column <> 1 Then
            MsgBox "Please make your selection under " & Chr(34) & "Fracture" & Chr(34) & " (Column A)", vbOKOnly, "ECAD Part Wizard"
            Exit Sub
        End If
        For Each c In Selection
            If c <> vbNullString Then
                c.Select
                With Selection.Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = 3051456
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                With Selection.Font
                    .ThemeColor = xlThemeColorDark1
                    .TintAndShade = 0
                End With
            End If
        Next c
    End If
End If
End Sub

Sub TopPins(Control As IRibbonControl)
If Worksheets("Template").Range("A1") <> vbNullString Then
    If ActiveSheet.Name <> "Template" Then
        Worksheets("Template").Activate
    Else
        If Selection.Column <> 1 Then
            MsgBox "Please make your selection under " & Chr(34) & "Fracture" & Chr(34) & " (Column A)", vbOKOnly, "ECAD Part Wizard"
            Exit Sub
        End If
            For Each c In Selection
            If c <> vbNullString Then
                c.Select
                With Selection.Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = 3289809
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                With Selection.Font
                    .ThemeColor = xlThemeColorDark1
                    .TintAndShade = 0
                End With
            End If
            Next c
    End If
End If
End Sub

Sub BottomPins(Control As IRibbonControl)
If Worksheets("Template").Range("A1") <> vbNullString Then
    If ActiveSheet.Name <> "Template" Then
        Worksheets("Template").Activate
    Else
        If Selection.Column <> 1 Then
            MsgBox "Please make your selection under " & Chr(34) & "Fracture" & Chr(34) & " (Column A)", vbOKOnly, "ECAD Part Wizard"
            Exit Sub
        End If
        For Each c In Selection
        If c <> vbNullString Then
            c.Select
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 2997037
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            With Selection.Font
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = 0
            End With
        End If
        Next c
    End If
End If
End Sub

Sub ApplyTemplate(Control As IRibbonControl)

ApplyPinsTemplate False
    
End Sub


Public Function ApplyPinsTemplate(Import As Boolean)
Dim tbl As ListObject
Dim Alphanumeric As Boolean

Alphanumeric = False

'Check that Pin Number and Pin Label/Function Columns have been set.
If Sheets("Setup").Cells(1, 2).Value = vbNullString Or Sheets("Setup").Cells(2, 2).Value = vbNullString Then
    MsgBox "Please set Pin Number and Pin Label Columns before applying the Template.", vbOKOnly, "ECAD Part Wizard"
    Exit Function
End If

SheetName = ActiveSheet.Name

NoOfKeepCols = 0

Sheets("Template").Cells.Delete

'Sheets("Template").Cells.ClearContents

Sheets("Original").Columns(Sheets("Setup").Cells(1, 2).Value & ":" & Sheets("Setup").Cells(1, 2).Value).Copy
Sheets("Template").Select
Sheets("Template").Columns("B:B").Select
Sheets("Template").Paste
Sheets("Original").Columns(Sheets("Setup").Cells(2, 2).Value & ":" & Sheets("Setup").Cells(2, 2).Value).Copy
Sheets("Template").Columns("C:C").Select
Sheets("Template").Paste

'Type
Sheets("Original").Columns("C:C").Copy
Sheets("Template").Columns("D:D").Select
Sheets("Template").Paste

'Bank
Sheets("Original").Columns("D:D").Copy
Sheets("Template").Columns("F:F").Select
Sheets("Template").Paste

'AlphaSort
Sheets("Original").Columns("E:E").Copy
Sheets("Template").Columns("H:H").Select
Sheets("Template").Paste

'Process Keep Columns
If Sheets("Setup").Cells(3, 2).Value = vbNullString Then
    GoTo SkipKeepCols
ElseIf InStr(Sheets("Setup").Cells(3, 2).Value, ",") = 0 Then
    If InStr(Sheets("Setup").Cells(3, 2).Value, ":") = 0 Then
        Sheets(SheetName).Columns(Sheets("Setup").Cells(3, 2).Value & ":" & Sheets("Setup").Cells(3, 2).Value).Copy
    Else
        Sheets(SheetName).Columns(Sheets("Setup").Cells(3, 2).Value).Copy
    End If
    Sheets("Template").Select
    Sheets("Template").Columns("G:G").Select
    Sheets("Template").Paste
    
    NoOfKeepCols = Selection.Columns.Count
    
Else

'Contains Commas

End If

SkipKeepCols:

Sheets("Setup").Cells(5, 2).Value = 9 + NoOfKeepCols

Sheets("Template").Rows("1:1").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
Sheets("Template").Cells(1, 1).Value = "Fracture"
Sheets("Template").Cells(1, 2).Value = "Number"
Sheets("Template").Cells(1, 3).Value = "Name"
Sheets("Template").Cells(1, 4).Value = "Type"
Sheets("Template").Cells(1, 5).Value = "Swap"
Sheets("Template").Cells(1, 6).Value = "Bank"
Sheets("Template").Cells(1, 7).Value = "Seq."
Sheets("Template").Cells(1, 8).Value = "AlphaNumSort"
Sheets("Template").Cells(1, 9).Value = "GateSort"

For c = 10 To 10 + NoOfKeepCols - 1
    Sheets("Template").Cells(1, c).Value = "Keep" & (c - 9)
Next c


'Find last Row
r = 2

If Not IsNumeric(Sheets("Template").Cells(r, 2)) Then
    Alphanumeric = True
    Worksheets("Setup").Range("B91") = "TRUE"
End If

While Sheets("Template").Cells(r, 2).Value <> vbNullString
'    Sheets("Template").Cells(r, 4).Value = "Undefined"
    Sheets("Template").Cells(r, 5).Value = 0
'    If Alphanumeric Then
'        Sheets("Template").Cells(R, 8) = "=GetAlpha(B" & R & ")"
'        Sheets("Template").Cells(R, 9) = "=GetNumeric(B" & R & ")"
'        Sheets("Template").Cells(R, 10) = "=Len(H" & R & ")"
'    End If
    r = r + 1
Wend

Sheets("Setup").Cells(14, 2).Value = r - 2

ActiveSheet.ListObjects.Add(, Range(Sheets("Template").Cells(1, 1), Sheets("Template").Cells(r - 1, 10 + NoOfKeepCols - 1)), , 1).Name = "Table1"
ActiveSheet.ListObjects("Table1").TableStyle = "TableStyleMedium15"

Range("Table1[Type]").Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=Setup!$B$20:$B$31"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = True
    End With

ActiveSheet.Range(Columns(1), Columns(9 + NoOfKeepCols - 1)).AutoFit
ActiveSheet.Columns("D:D").ColumnWidth = 30


ActiveWindow.SplitColumn = 0
ActiveWindow.SplitRow = 1
ActiveWindow.FreezePanes = True



'Switch back to "ECAD Part Wizard" ribbon tab from "Design" tab
Sheets("Template").Cells(1, 10 + NoOfKeepCols).Select

If Alphanumeric And Not Import Then


    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[AlphaNumSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
'    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Alpha]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
'    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Numeric]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    r = 2
    While Sheets("Template").Cells(r, 2).Value <> vbNullString
        Sheets("Template").Cells(r, 7) = r - 1
        r = r + 1
    Wend
ElseIf Not Alphanumeric Then
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Number]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    r = 2
    While Sheets("Template").Cells(r, 2).Value <> vbNullString
        Sheets("Template").Cells(r, 7) = r - 1
        r = r + 1
    Wend
End If

'Check for 2 pin part and offer list of passive types e.g. Resistor; Inductor; Non-polarised Capacitor; Polarised Capacitor etc...

Set tbl = ActiveSheet.ListObjects("Table1")
If tbl.DataBodyRange.Rows.Count = 2 Then
    frm_SetPassive.Show
End If



End Function
Public Function SortTemplate()

r = 2
If Not IsNumeric(ActiveWorkbook.Worksheets("Template").Cells(r, 2)) Then
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[AlphaNumSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
'            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Alpha]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
'            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Numeric]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

    While ActiveWorkbook.Worksheets("Template").Cells(r, 2).Value <> vbNullString
        ActiveWorkbook.Worksheets("Template").Cells(r, 7) = r - 1
        r = r + 1
    Wend
Else
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[GateSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(46, 46, 189)
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(192, 143, 46)
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(209, 50, 50)
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(45, 187, 45)
    With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End If

ActiveWorkbook.Worksheets("Template").Unprotect Password:="m1llenn1ums4r0s"

ActiveWorkbook.Worksheets("Template").Range("Table1[[Fracture]:[GateSort]]").AutoFilter
ActiveWorkbook.Worksheets("Template").Range("A1:F1").Locked = False
ActiveWorkbook.Worksheets("Template").Range("Table1[Fracture]").Locked = False
ActiveWorkbook.Worksheets("Template").Range("Table1[GateSort]").Locked = False
ActiveWorkbook.Worksheets("Template").Range("Table1[[Type]:[Bank]]").Locked = False

ActiveWorkbook.Worksheets("Template").Columns("H:I").EntireColumn.Hidden = True

Sheets("Setup").Cells(101, 2).Value = "TRUE"

'Switch back to "ECAD Part Wizard" ribbon tab from "Design" tab

ActiveWorkbook.Worksheets("Template").Cells(1, Sheets("Setup").Range("B5").Value + 1).Locked = False
ActiveWorkbook.Worksheets("Template").Cells(1, Sheets("Setup").Range("B5").Value + 1).Select
ActiveWorkbook.Worksheets("Template").Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True

End Function

Public Function ExtractColumns(SelectedRange As String) As String

If InStr(SelectedRange, "$") <> 0 Then
    MsgBox "Please click on the column letter(s) to select those that you wish to keep (holding down the Ctrl key for multiple selections).", vbOKOnly, "ECAD Part Wizard"
    ExtractColumns = vbNullString
    Exit Function
End If

CommaIndex = InStr(1, SelectedRange, ",")
If CommaIndex = 0 Then
    ColonIndex = InStr(1, SelectedRange, ":")
    If Mid(SelectedRange, 1, ColonIndex - 1) = Mid(SelectedRange, ColonIndex + 1) Then
        KeepCols = Mid(SelectedRange, ColonIndex + 1)
    Else
'        Debug.Print SelectedRange
        KeepCols = SelectedRange
    End If
Else
    ColonIndex = InStr(1, SelectedRange, ":")
    
    If Mid(SelectedRange, 1, ColonIndex - 1) = Mid(SelectedRange, ColonIndex + 1, CommaIndex - ColonIndex - 1) Then
        KeepCols = "," & Mid(SelectedRange, 1, ColonIndex - 1)
    Else
        KeepCols = Mid(SelectedRange, 1, CommaIndex - 1)
    End If
    
    Do
        NextCommaIndex = InStr(CommaIndex + 1, SelectedRange, ",")
        
        ColonIndex = InStr(CommaIndex + 1, SelectedRange, ":")
        
        If NextCommaIndex = 0 Then
            NextColumn = Mid(SelectedRange, ColonIndex + 1)
        Else
            NextColumn = Mid(SelectedRange, ColonIndex + 1, NextCommaIndex - ColonIndex - 1)
        End If
        
        If Mid(SelectedRange, CommaIndex + 1, ColonIndex - CommaIndex - 1) = NextColumn Then
            KeepCols = KeepCols & "," & Mid(SelectedRange, CommaIndex + 1, ColonIndex - CommaIndex - 1)
        Else
            If NextCommaIndex = 0 Then
                KeepCols = KeepCols & "," & Mid(SelectedRange, CommaIndex + 1)
            Else
                KeepCols = KeepCols & "," & Mid(SelectedRange, CommaIndex + 1, NextCommaIndex - CommaIndex - 1)
            End If
        End If
        
        CommaIndex = InStr(CommaIndex + 1, SelectedRange, ",")
    Loop While CommaIndex <> 0
    
    If Left(KeepCols, 1) = "," Then KeepCols = Mid(KeepCols, 2)
        

End If

    ExtractColumns = KeepCols

End Function

'reads the value for the registry key i_RegKey
'if the key cannot be found, the return value is ""
Function RegKeyRead(i_RegKey As String) As String
Dim myWS As Object

  On Error Resume Next
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  'read key from registry
  RegKeyRead = myWS.RegRead(i_RegKey)
End Function

Sub Save(Control As IRibbonControl)
If Worksheets("Template").Range("A1") <> vbNullString Then
    DocName = Worksheets("Setup").Range("B18")
    Set clipboard = New MSForms.DataObject
    clipboard.SetText DocName
    clipboard.PutInClipboard
    If Val(Application.Version) < 15 Then
        Application.SendKeys "%FA", False 'Save As
    Else
        Application.SendKeys "%FACB", False 'Save As Browse
    End If
End If
End Sub

Sub GetDatasheet(Control As IRibbonControl)
ThisWorkbook.FollowHyperlink Address:="http://livepartlibrary.com/cse.html", NewWindow:=True
End Sub

Sub VideoHelp(Control As IRibbonControl)
ThisWorkbook.FollowHyperlink Address:="http://www.youtube.com/playlist?list=PLplkj5egDoEloeAupmwTUgx4nglSUj7Fm", NewWindow:=True
End Sub

Sub Recommend(Control As IRibbonControl)
ThisWorkbook.FollowHyperlink Address:="mailto:?subject=Check out the free ECAD Part Wizard from SamacSys&body=Hi,%0A%0AI am using the brilliant ECAD Part Wizard from RS Components find out more by clicking here <http://www.rs-online.com/designspark/electronics/eng/nodes/view/type:knowledge-item/slug:ecad-part-wizard>"
End Sub


Private Function IsProcessRunning(ByVal sProcess As String) As Boolean
Const MAX_PATH As Long = 260
Dim lProcesses() As Long, lModules() As Long, n As Long, lRet As Long, hProcess As Long
Dim sName As String
sProcess = UCase$(sProcess)
ReDim lProcesses(1023) As Long
If EnumProcesses(lProcesses(0), 1024 * 4, lRet) Then
For n = 0 To (lRet \ 4) - 1
hProcess = OpenProcess(PROCESS_QUERY_INFORMATION Or PROCESS_VM_READ, 0, lProcesses(n))
If hProcess Then
ReDim lModules(1023)
If EnumProcessModules(hProcess, lModules(0), 1024 * 4, lRet) Then
sName = String$(MAX_PATH, vbNullChar)
GetModuleBaseName hProcess, lModules(0), sName, MAX_PATH
sName = Left$(sName, InStr(sName, vbNullChar) - 1)
If Len(sName) = Len(sProcess) Then
If sProcess = UCase$(sName) Then IsProcessRunning = True: Exit Function
End If
End If
End If
CloseHandle hProcess
Next n
End If
End Function

Sub Scratchpad(Control As IRibbonControl)
frm_Scratchpad.Show
End Sub

Function GetPath() As String
GetPath = ActiveWorkbook.Path
End Function

Public Function ColLett(Col As Integer) As String
    If Col > 26 Then
        ColLett = ColLett((Col - (Col Mod 26)) / 26) + Chr(Col Mod 26 + 64)
    Else
        ColLett = Chr(Col + 64)
    End If
End Function

Function GetExtraSpaces(AscLn As String, StartSpace As Integer) As Integer
Dim Start As Integer

Start = StartSpace

SpaceCnt = 0

While Mid(AscLn, Start + 1, 1) = Space(1)
    SpaceCnt = SpaceCnt + 1
    Start = Start + 1
Wend


GetExtraSpaces = SpaceCnt

End Function

Function RemovePaddingSpaces(AscLn As String) As String


' Delete any Carriage Returns
        AscLn = Replace(AscLn, vbCr, vbNullString)
' Delete any Line Feeds
        AscLn = Replace(AscLn, vbLf, vbNullString)
' Delete any Tabs
        AscLn = Replace(AscLn, vbTab, vbNullString)

    Do While Right(AscLn, 1) = Space(1) ' Delete any excess spaces
        AscLn = Left(AscLn, Len(AscLn) - 1)
    Loop
    
    RemovePaddingSpaces = AscLn

End Function
Function GenerateSP()
frm_ProgressBar.Show
End Function
Function GenerateSP2()

ActiveSheet.Unprotect Password:="m1llenn1ums4r0s"

Cells.Select
Selection.Delete Shift:=xlUp
Range("A1").Select


Dim GateCnt As Integer
Dim GateNo As Integer
Dim SYMname As String

Dim BoxWidthLR As Double
Dim BoxWidthTB As Double
Dim PinPitch As Double

'On Error GoTo OnErrorGetObject

If Not Sheets("Setup").Cells(101, 2).Value Then ActiveWorkbook.Worksheets("Template").Activate


If Sheets("Setup").Cells(110, 2) = "None (Box)" Then

    PinDecal = Sheets("Setup").Cells(11, 2).Value
    If PinDecal = "PINSHORT" Then
        PinLength = 100
        pnx = 60
        pny = 10
        pnmx = 140
        pnmy = 10
    Else
        PinLength = 200
        pnx = 140
        pny = 20
        pnmx = 230
        pnmy = 0
    End If
    
    'LogFam = cbo_LogFam.Value
    'PinPitch = Sheets("Setup").Cells(12, 2).Value
    PinPitch = 200
    'SYMname = txt_SYM.Value
    'PCBdecals = cbo_PCB.Value
    'PTname = txt_PT.Value
    LeftPinCnt = 0
    RightPinCnt = 0
    TopPinCnt = 0
    BotPinCnt = 0
    TopPinLen = 0
    BotPinLen = 0
    LeftPinLen = 0
    RightPinLen = 0
    GateCnt = 0
    r = 2
    PrevGate = Sheets("Template").Cells(r, 1).Value
    
    BoxCellRow = 8
    NextBoxCellRow = 8
    BoxCellCol = 4
    
    startRow = 2
    CurrGate = Sheets("Template").Cells(r, 1).Value
    While PrevGate <> vbNullString
        PrevGate = CurrGate
        CurrGate = Sheets("Template").Cells(r, 1).Value
        
        If CurrGate = PrevGate Then
            If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then
                LeftPinCnt = LeftPinCnt + 1
                If LeftPinLen < Len(Sheets("Template").Cells(r, 3)) Then LeftPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then
                RightPinCnt = RightPinCnt + 1
                If RightPinLen < Len(Sheets("Template").Cells(r, 3)) Then RightPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then
                TopPinCnt = TopPinCnt + 1
                If TopPinLen < Len(Sheets("Template").Cells(r, 3)) Then TopPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then
                BotPinCnt = BotPinCnt + 1
                If BotPinLen < Len(Sheets("Template").Cells(r, 3)) Then BotPinLen = Len(Sheets("Template").Cells(r, 3))
            End If
        Else
             
    
            GateCnt = GateCnt + 1
            
            
            If LeftPinCnt <> 0 Then
                OriginPin = "Left"
            ElseIf TopPinCnt <> 0 Then
                OriginPin = "Top"
            ElseIf RightPinCnt <> 0 Then
                OriginPin = "Right"
            ElseIf BotPinCnt <> 0 Then
                OriginPin = "Bottom"
            End If
            
            If LeftPinCnt > RightPinCnt Then
                PinCntLR = LeftPinCnt
            Else
                PinCntLR = RightPinCnt
            End If
            
            If TopPinCnt = 0 Then
                TopOffset = PinPitch
            Else
                TopOffset = RoundToNearest((TopPinLen * 50) + 200, 100)
            End If
            
            If BotPinCnt = 0 Then
                BotOffset = PinPitch
            Else
                BotOffset = RoundToNearest((BotPinLen * 50) + 200, 100)
            End If
        
            BoxHeightTB = TopOffset + BotOffset
            
            If PinCntLR = 0 Then
                BoxHeightLR = 0
            Else
                BoxHeightLR = ((PinCntLR - 1) * PinPitch)
            End If
            
            BoxHeight = RoundToNearest(BoxHeightLR + BoxHeightTB, 100)
    
            If TopPinCnt > BotPinCnt Then
                PinCntTB = TopPinCnt
            Else
                PinCntTB = BotPinCnt
            End If
            
            If LeftPinLen + RightPinLen = 0 Then
                BoxWidthLR = 0
            Else
                BoxWidthLR = RoundToNearest(((LeftPinLen + RightPinLen) * 50) + 200, 100)
            End If
            
            BoxWidthTB = RoundToNearest((PinCntTB * PinPitch) + PinPitch, 100)
            
            If BoxWidthLR > BoxWidthTB Then
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthLR, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthLR, 100)
                End If
            Else
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthTB, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthTB, 100)
                End If
            End If
            
            PinCnt = LeftPinCnt + RightPinCnt + TopPinCnt + BotPinCnt
            
'            Debug.Print "No of Gates = " & GateCnt
'            Debug.Print "No of Left Pins = " & LeftPinCnt
'            Debug.Print "No of Right Pins = " & RightPinCnt
'            Debug.Print "No of Top Pins = " & TopPinCnt
'            Debug.Print "No of Bottom Pins = " & BotPinCnt
'            Debug.Print "Max. Left Pin Length = " & LeftPinLen
'            Debug.Print "Max. Right Pin Length = " & RightPinLen
'            Debug.Print "Max. Top Pin Length = " & TopPinLen
'            Debug.Print "Max. Bottom Pin Length = " & BotPinLen
'            Debug.Print "Box Width = " & BoxWidth
'            Debug.Print "Box Height = " & BoxHeight
'            Debug.Print "Pin Decal = " & PinDecal
'            Debug.Print "Top Offset = " & TopOffset
'            Debug.Print "Bottom Offset = " & BotOffset
'            Debug.Print "Origin Pin = " & OriginPin
            
    
                OffsetX = PinLength
                OffsetY = TopOffset
    
    
'            Debug.Print "X Offset = " & OffsetX
'            Debug.Print "Y Offset = " & OffsetY
          
            
    'Draw Box
    
        
        Range(Cells(BoxCellRow, BoxCellCol), Cells((BoxHeight / 100) + BoxCellRow - 1, (BoxWidth / 100) + BoxCellCol - 1)).Select
        
        Selection.Borders(xlDiagonalDown).LineStyle = xlNone
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        Selection.Borders(xlInsideVertical).LineStyle = xlNone
        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
        
        
    '    Cells(BoxCellRow, BoxCellCol).Select
            
            
            
            
    'Left Pins
            For lt = 1 To LeftPinCnt
            
'                Debug.Print BoxCellRow
            
'                Debug.Print (BoxCellRow - 1) + RoundDownToNearest(((BoxHeight / 100) + ((LeftPinCnt) - 2)) / 2, 1) + (((lt * 1) - 1) * 2)
                
                Range(Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((lt - 1) * 2), BoxCellCol - 2), Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((lt - 1) * 2), BoxCellCol - 1)).Select
    
                With Selection.Borders(xlEdgeBottom)
                    .LineStyle = xlContinuous
                    .Color = -4379090
                    .TintAndShade = 0
                    .Weight = xlMedium
                End With
                Selection.MergeCells = True
                Selection.VerticalAlignment = xlBottom
                Selection.HorizontalAlignment = xlRight
                    
                ActiveCell.Value = Sheets("Template").Cells(startRow, 2).Value
                
                
                
                Range(Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((lt - 1) * 2), BoxCellCol), Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((lt - 1) * 2) + 1, BoxCellCol + RoundToNearest((LeftPinLen - 1) / 2, 1))).Select
                Selection.MergeCells = True
                Selection.VerticalAlignment = xlCenter
                Selection.HorizontalAlignment = xlLeft
                
                ActiveCell.Value = Sheets("Template").Cells(startRow, 3).Value
                startRow = startRow + 1
    
            Next lt
            
    'Right Pins
    
                For rt = 1 To RightPinCnt
                
'                Debug.Print (BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((rt - 1) * 2)
                
                   Range(Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((rt - 1) * 2), (BoxWidth / 100) + BoxCellCol), Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((rt - 1) * 2), (BoxWidth / 100) + BoxCellCol + 1)).Select
                
    '                Range(Cells(rt + (rt + 1) + (OffsetY / 100), (BoxWidth / 100) + BoxCellCol), Cells(rt + (rt + 1) + (OffsetY / 100), (BoxWidth / 100) + BoxCellCol + 1)).Select
                    
                    With Selection.Borders(xlEdgeBottom)
                        .LineStyle = xlContinuous
                        .Color = -13725760
                        .TintAndShade = 0
                        .Weight = xlMedium
                    End With
                    
                    Selection.MergeCells = True
                    
                    Selection.VerticalAlignment = xlBottom
                    Selection.HorizontalAlignment = xlLeft
                        
                    ActiveCell.Value = Sheets("Template").Cells(startRow, 2).Value
                    
                    Range(Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((rt - 1) * 2), (BoxWidth / 100) + BoxCellCol - 1), Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((rt - 1) * 2) + 1, (BoxWidth / 100) + BoxCellCol - 1 - RoundToNearest(RightPinLen / 2, 1))).Select
                    Selection.MergeCells = True
                    Selection.VerticalAlignment = xlCenter
                    Selection.HorizontalAlignment = xlRight
                    
                    ActiveCell.Value = Sheets("Template").Cells(startRow, 3).Value
                    startRow = startRow + 1
                Next rt
    
    'Top Pins
    
                For tt = 1 To TopPinCnt
                    
                    Range(Cells(BoxCellRow - 1, (BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((TopPinCnt * 2) - 2)) / 2, 1) + (((tt * 1) - 1) * 2)), Cells(BoxCellRow - 2, (BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((TopPinCnt * 2) - 2)) / 2, 1) + (((tt * 1) - 1) * 2))).Select
    
    
                    With Selection.Borders(xlEdgeRight)
                        .LineStyle = xlContinuous
                        .Color = -13487407
                        .TintAndShade = 0
                        .Weight = xlMedium
                    End With
                    
                    Selection.Orientation = 90
                    Selection.VerticalAlignment = xlBottom
                    Selection.HorizontalAlignment = xlRight
                    Selection.MergeCells = True
                    
                    ActiveCell.Value = Sheets("Template").Cells(startRow, 2).Value
                    
    
                    
                    Range(Cells(BoxCellRow, (BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((TopPinCnt * 2) - 2)) / 2, 1) + (((tt * 1) - 1) * 2)), Cells(BoxCellRow + RoundToNearest(TopPinLen / 2, 1), ((BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((TopPinCnt * 2) - 2)) / 2, 1) + (((tt * 1) - 1) * 2)) + 1)).Select
                    Selection.MergeCells = True
                    Selection.Orientation = 90
                    Selection.VerticalAlignment = xlTop
                    Selection.HorizontalAlignment = xlCenter
                    
                    ActiveCell.Value = Sheets("Template").Cells(startRow, 3).Value
                    startRow = startRow + 1
    
                Next tt
    
    'Bottom Pins
    
                For bt = 1 To BotPinCnt
            
                    
                    Range(Cells(BoxCellRow + (BoxHeight / 100), (BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((BotPinCnt * 2) - 2)) / 2, 1) + (((bt * 1) - 1) * 2)), Cells(BoxCellRow + (BoxHeight / 100) + 1, (BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((BotPinCnt * 2) - 2)) / 2, 1) + (((bt * 1) - 1) * 2))).Select
    
                    With Selection.Borders(xlEdgeRight)
                        .LineStyle = xlContinuous
                        .Color = -13780179
                        .TintAndShade = 0
                        .Weight = xlMedium
                    End With
                    Selection.MergeCells = True
                    Selection.Orientation = 90
                    Selection.VerticalAlignment = xlTop
                    Selection.HorizontalAlignment = xlRight
                    
                    
                    ActiveCell.Value = Sheets("Template").Cells(startRow, 2).Value
                    
                    
                    Range(Cells(BoxCellRow + (BoxHeight / 100) - 1, (BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((BotPinCnt * 2) - 2)) / 2, 1) + (((bt * 1) - 1) * 2)), Cells(BoxCellRow + (BoxHeight / 100) - 1 - RoundToNearest(BotPinLen / 2, 1), ((BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((BotPinCnt * 2) - 2)) / 2, 1) + (((bt * 1) - 1) * 2)) + 1)).Select
                    Selection.MergeCells = True
                    Selection.Orientation = 90
                    Selection.VerticalAlignment = xlBottom
                    Selection.HorizontalAlignment = xlCenter
                    
                    ActiveCell.Value = Sheets("Template").Cells(startRow, 3).Value
                    startRow = startRow + 1
                Next bt
    
    
                Cells(BoxCellRow, BoxCellCol + (BoxWidth / 100) + 1).Select
                ActiveCell.Value = Sheets("Template").Cells(startRow - 1, 1).Value
                Selection.Font.Bold = True

            BoxCellCol = BoxCellCol + ((BoxWidth / 100) + 10)
            
            If BoxCellRow + (BoxHeight / 100) > NextBoxCellRow Then NextBoxCellRow = BoxCellRow + (BoxHeight / 100)
            If GateCnt Mod 5 = 0 Then
                BoxCellRow = NextBoxCellRow + 6
                BoxCellCol = 4
            End If
            
            Cells(BoxCellRow, BoxCellCol).Select
    
            LeftPinCnt = 0
            RightPinCnt = 0
            TopPinCnt = 0
            BotPinCnt = 0
            TopPinLen = 0
            BotPinLen = 0
            LeftPinLen = 0
            RightPinLen = 0
            
            r = r - 1
                    
    
        End If
    
        PrevGate = CurrGate
        r = r + 1
    '
    
        
    Wend
ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Non-Polarised)" Then
'Lines
    Range("E8:E11").Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Right Pin
    Range("F9:H9").Select

    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -4379090
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Left Pin
    Range("B9:D9").Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -13725760
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
    Range("C3").Select

ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Polarised)" Then

'Boxes
    Range("E8:E11").Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
    Range("G8:G11").Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
        With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
'Polarisation Marker +
    Range("B7:B8").Select
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Range("B7:C7").Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Right Pin
    Range("H9:J9").Select

    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -4379090
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Left Pin
    Range("B9:D9").Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -13725760
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
    Range("C3").Select

ElseIf Sheets("Setup").Cells(110, 2) = "Inductor" Then

    ActiveSheet.Shapes.AddShape(msoShapeArc, 71.5, 101.5, 14.25, 14.25).Select
    With Selection.ShapeRange
        .Adjustments.Item(1) = -180
        .Line.ForeColor.ObjectThemeColor = msoThemeColorText1
        .Line.Weight = 1.25
    End With

    ActiveSheet.Shapes.AddShape(msoShapeArc, 100, 101.5, 14.25, 14.25).Select
    With Selection.ShapeRange
        .Adjustments.Item(1) = -180
        .Line.ForeColor.ObjectThemeColor = msoThemeColorText1
        .Line.Weight = 1.25
    End With
    ActiveSheet.Shapes.AddShape(msoShapeArc, 128.5, 101.5, 14.25, 14.25).Select
    With Selection.ShapeRange
        .Adjustments.Item(1) = -180
        .Line.ForeColor.ObjectThemeColor = msoThemeColorText1
        .Line.Weight = 1.25
    End With
    ActiveSheet.Shapes.AddShape(msoShapeArc, 157, 101.5, 14.25, 14.25).Select
    With Selection.ShapeRange
        .Adjustments.Item(1) = -180
        .Line.ForeColor.ObjectThemeColor = msoThemeColorText1
        .Line.Weight = 1.25
    End With
    
'Left Pin
    Range("B9:D9").Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -13725760
        .TintAndShade = 0
        .Weight = xlMedium
    End With

'Right Pin
    Range("M9:O9").Select

    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -4379090
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    




ElseIf Sheets("Setup").Cells(110, 2) = "Resistor" Then
'Box
    Range("E9:J10").Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Right Pin
    Range("K9:M9").Select

    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -4379090
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Left Pin
    Range("B9:D9").Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -13725760
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
    Range("C3").Select

End If

If Range("B10").Borders(xlEdgeTop).LineStyle = 1 Then
    Range("C3").Select
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
End If

ActiveSheet.Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True
ActiveSheet.EnableSelection = xlUnlockedCells

End Function
Public Function RoundToNearest(fNumber As Double, fToNearest As Double) As Long
    Dim fMod As Double
    fMod = fNumber Mod fToNearest
    If fMod <> 0 Then
        If fMod < (fToNearest / 2) Then
            'Round down
            RoundToNearest = fNumber - fMod
        Else
            'Round up
            RoundToNearest = (fNumber - fMod) + fToNearest
        End If
    Else
        RoundToNearest = fNumber
    End If
End Function
Public Function RoundDownToNearest(fNumber As Double, fToNearest As Double) As Long
    Dim fMod As Double
    fMod = fNumber Mod fToNearest
    If fMod <> 0 Then
        RoundDownToNearest = fNumber - fMod
    Else
        RoundDownToNearest = fNumber
    End If
End Function

Sub Descend(Control As IRibbonControl)
If Worksheets("Template").Range("A1") <> vbNullString Then
    If ActiveSheet.Name <> "Template" Then
        Worksheets("Template").Activate
    Else
    
        FieldName = Cells(1, Selection.Column)
        
        If FieldName <> vbNullString Then
    
            ActiveSheet.Unprotect Password:="m1llenn1ums4r0s"
            
            ActiveSheet.ListObjects("Table1").Sort.SortFields.Clear
            
            If FieldName = "Number" And Not IsNumeric(ActiveWorkbook.Worksheets("Template").Cells(2, 2)) Then
                ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
                ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[AlphaNumSort]"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
    '            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Alpha]"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
    '            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Numeric]"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
                With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
                    .Header = xlYes
                    .MatchCase = False
                    .Orientation = xlTopToBottom
                    .SortMethod = xlPinYin
                    .Apply
                End With
            ElseIf FieldName = "Fracture" Then
                ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
                ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[GateSort]"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
    '            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Alpha]"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
    '            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Numeric]"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
                With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
                    .Header = xlYes
                    .MatchCase = False
                    .Orientation = xlTopToBottom
                    .SortMethod = xlPinYin
                    .Apply
                End With
            Else
            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[[#Headers],[" & FieldName & "]]"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
                With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
                    .Header = xlYes
                    .MatchCase = False
                    .Orientation = xlTopToBottom
                    .SortMethod = xlPinYin
                    .Apply
                End With
            End If
            ActiveSheet.Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True
        End If
    End If
End If
End Sub

Sub Ascend(Control As IRibbonControl)

If Worksheets("Template").Range("A1") <> vbNullString Then

    If ActiveSheet.Name <> "Template" Then
        Worksheets("Template").Activate
    Else
    
        FieldName = Cells(1, Selection.Column)
        
        If FieldName <> vbNullString Then
    
            ActiveSheet.Unprotect Password:="m1llenn1ums4r0s"
            
            ActiveSheet.ListObjects("Table1").Sort.SortFields.Clear
        
            If FieldName = "Number" And Not IsNumeric(ActiveWorkbook.Worksheets("Template").Cells(2, 2)) Then
                ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
                ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[AlphaNumSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    '            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Alpha]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    '            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Numeric]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
                With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
                    .Header = xlYes
                    .MatchCase = False
                    .Orientation = xlTopToBottom
                    .SortMethod = xlPinYin
                    .Apply
                End With
            ElseIf FieldName = "Fracture" Then
                ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
                ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[GateSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    '            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Alpha]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    '            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Numeric]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
                With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
                    .Header = xlYes
                    .MatchCase = False
                    .Orientation = xlTopToBottom
                    .SortMethod = xlPinYin
                    .Apply
                End With
    
            Else
                ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[[#Headers],[" & FieldName & "]]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
                With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
                    .Header = xlYes
                    .MatchCase = False
                    .Orientation = xlTopToBottom
                    .SortMethod = xlPinYin
                    .Apply
                End With
            End If
            ActiveSheet.Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True
        End If
    End If
End If
End Sub

Sub AboutRS(Control As IRibbonControl)
On Error Resume Next
If IsInternetConnected Then
    ThisWorkbook.FollowHyperlink Address:="http://www.rs-online.com/designspark/electronics/eng/nodes/view/type:tool/slug:ecad-part-wizard/preview:true", NewWindow:=True
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "SamacSys - EPW"
End If
End Sub

Sub AboutSamacSys(Control As IRibbonControl)
On Error Resume Next
If IsInternetConnected Then
    ThisWorkbook.FollowHyperlink Address:="http://www.samacsys.com/aboutus/", NewWindow:=True
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "SamacSys - EPW"
End If

End Sub

Function GetAlpha(Alphanumeric As String) As String
For i = 1 To Len(Alphanumeric)
    If IsNumeric(Mid(Alphanumeric, i, 1)) Then
        StartNumeric = i
        GoTo FoundAlpha
    End If
Next i

FoundAlpha:
GetAlpha = Left(Alphanumeric, StartNumeric - 1)

End Function

Function GetNumeric(Alphanumeric As String) As Integer
For i = 1 To Len(Alphanumeric)
    If IsNumeric(Mid(Alphanumeric, i, 1)) Then
        StartNumeric = i
        GoTo FoundAlpha
    End If
Next i

FoundAlpha:
GetNumeric = Mid(Alphanumeric, StartNumeric)
End Function

Sub Export(Control As IRibbonControl)
    Dim UFHWnd As Long    ' HWnd of UserForm
    Dim WinInfo As Long   ' Values associated with the UserForm window
    Dim r As Long
    Const GWL_STYLE = -16
    Const WS_SIZEBOX = &H40000
    Const WS_USER  As Long = &H4000
    
If Worksheets("Template").Range("A1") <> vbNullString Then


    Load frm_ExportECAD  ' Load the form into memory but don't make it visible
    UFHWnd = FindWindow("ThunderDFrame", frm_ExportECAD.Caption)  ' find the HWnd of the UserForm
    If UFHWnd = 0 Then
        ' cannot find form
        Debug.Print "frm_ExportECAD not found"
        Exit Sub
    End If
    
    WinInfo = GetWindowLong(UFHWnd, GWL_STYLE)      ' get the style word (32-bit Long)
    WinInfo = WinInfo Or WS_SIZEBOX                 ' set the WS_SIZEBOX bit
    r = SetWindowLong(UFHWnd, GWL_STYLE, WinInfo)   ' set the style word to the modified value.
    frm_ExportECAD.Show

End If

End Sub

Function Submit_Bug()
Dim userID As String
Dim email As String
Dim result As String
Dim myURL As String
Dim oReq As Object

'If Worksheets("Template").Range("A1") <> vbNullString Then


    If IsInternetConnected And CheckDatabaseAccess Then
    
        'Check UserID and Email address against database.  If Yes then pop PartRequest form.  If No pop message for user to check registered email address.
        email = GetSetting("EPW", "User Details", "Email", "")
        designerID = GetSetting("EPW", "User Details", "designerID", "")
        
        Set oReq = CreateObject("MSXML2.XMLHTTP")
        
        RndNo = RandomNumbers(1, 1000000)
        
        url = GetSetting("EPW", "Settings", "URL", "")

        myURL = url & "/q/eac.php?did=" & designerID & "&e=" & URLEncode(email) & "&t=" & RndNo
        oReq.Open "GET", myURL, False, "epwRead", "libraryC4rd"
        oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
        oReq.send
        result = oReq.responseText
        result = Replace(result, vbLf, vbNullString)
        
        If InStr(result, "Yes") Then
            Frm_SubmitBug.Show
        Else
            MsgBox "Please check your email address as this does not match our records.", vbExclamation, "ECAD Part Wizard"
            frm_AppRegistration.Show
        End If
        
        'On Error Resume Next
        'ThisWorkbook.FollowHyperlink Address:="http://www.samacsys.com/part-request/", NewWindow:=True
    Else
        MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "SamacSys - EPW"
    End If

'End If


'On Error Resume Next
'If IsInternetConnected Then
'    ThisWorkbook.FollowHyperlink Address:="http://www.samacsys.com/epw-bug-report/", NewWindow:=True
'Else
'    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "SamacSys - EPW"
'End If

End Function

Sub SubmitBug(Control As IRibbonControl)
Submit_Bug
End Sub

Sub Feedback(Control As IRibbonControl)
On Error Resume Next
If IsInternetConnected Then
    ThisWorkbook.FollowHyperlink Address:="http://www.samacsys.com/epw-review/", NewWindow:=True
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "SamacSys - EPW"
End If
End Sub

Sub EmailFriends(Control As IRibbonControl)
ThisWorkbook.FollowHyperlink Address:="mailto:?subject=Check out the ECAD Part Wizard from SamacSys&body=Hi %0A%0AI'm using the brilliant ECAD Part Wizard from SamacSys.  Visit http://www.samacsys.com/products/epw/ for more infomation."
End Sub

Sub RequestPart(Control As IRibbonControl)

PartRequest

End Sub

Function PartRequest()

Dim userID As String
Dim email As String
Dim result As String
Dim myURL As String
Dim oReq As Object

If IsInternetConnected And CheckDatabaseAccess Then

    'Check UserID and Email address against database.  If Yes then pop PartRequest form.  If No pop message for user to check registered email address.
    email = GetSetting("EPW", "User Details", "Email", "")
    designerID = GetSetting("EPW", "User Details", "designerID", "")
    
    Set oReq = CreateObject("MSXML2.XMLHTTP")
    
    RndNo = RandomNumbers(1, 1000000)
    
    url = GetSetting("EPW", "Settings", "URL", "")
    
    
    myURL = url & "/q/EPWpartRequestMessage.php?did=" & designerID & "&t=" & RndNo
    
    oReq.Open "GET", myURL, False, "epwRead", "libraryC4rd"
    oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    oReq.send
    result = oReq.responseText

    MsgBox result, vbInformation, "SamacSys - EPW"
    If InStr(UCase(result), "DUE TO HIGH DEMAND") <> 0 Or InStr(UCase(result), "REQUEST DISABLED") <> 0 Then
        Unload Frm_Find
        Exit Function
    End If
    
    myURL = url & "/q/eac.php?did=" & designerID & "&e=" & URLEncode(email) & "&t=" & RndNo
    Debug.Print myURL
    oReq.Open "GET", myURL, False, "epwRead", "libraryC4rd"
    oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    oReq.send
    result = oReq.responseText
    result = Replace(result, vbLf, vbNullString)
    
    If InStr(result, "Yes") Then
        Frm_PartRequest.Show
'        Frm_PartRequest.Cbo_Manufacturer = MAN
'        Frm_PartRequest.Txt_FullManufPartNo = MPN
    Else
        MsgBox "Please check your email address as this does not match our records.", vbExclamation, "ECAD Part Wizard"
        frm_AppRegistration.Show
    End If
    
    'On Error Resume Next
    'ThisWorkbook.FollowHyperlink Address:="http://www.samacsys.com/part-request/", NewWindow:=True
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "SamacSys - EPW"
End If

End Function

Sub PinUp(Control As IRibbonControl)
If Worksheets("Template").Range("A1") <> vbNullString Then
    If ActiveSheet.Name <> "Template" Then
        Worksheets("Template").Activate
    Else
        Row = Selection.Row
        If Row = 2 Then Exit Sub
        ActiveSheet.Unprotect Password:="m1llenn1ums4r0s"
        Set Rng1 = Range(Cells(Row, 1), Cells(Row, 9))
        Col1 = Cells(Row, 1).Interior.Color
        Set Rng2 = Range(Cells(Row - 1, 1), Cells(Row - 1, 9))
        Col2 = Cells(Row - 1, 1).Interior.Color
        Application.ScreenUpdating = False
        arr1 = Rng1.Value
        arr2 = Rng2.Value
        Rng1.Value = arr2
        Cells(Row, 1).Interior.Color = Col2
        Rng2.Value = arr1
        Cells(Row - 1, 1).Interior.Color = Col1
        Cells(Row - 1, 1).Select
        Application.ScreenUpdating = True
        ActiveSheet.Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True
    End If
End If
End Sub

Sub PinDown(Control As IRibbonControl)
Dim Rng1 As Range, Rng2 As Range
Dim arr1 As Variant, arr2 As Variant

If Worksheets("Template").Range("A1") <> vbNullString Then
    If ActiveSheet.Name <> "Template" Then
        Worksheets("Template").Activate
    Else
        Row = Selection.Row
        If Worksheets("Template").Range("A" & Row + 1) = vbNullString Then Exit Sub
        ActiveSheet.Unprotect Password:="m1llenn1ums4r0s"
        Set Rng1 = Range(Cells(Row, 1), Cells(Row, 9))
        Col1 = Cells(Row, 1).Interior.Color
        Set Rng2 = Range(Cells(Row + 1, 1), Cells(Row + 1, 9))
        Col2 = Cells(Row + 1, 1).Interior.Color
        Application.ScreenUpdating = False
        arr1 = Rng1.Value
        arr2 = Rng2.Value
        Rng1.Value = arr2
        Cells(Row, 1).Interior.Color = Col2
        Rng2.Value = arr1
        Cells(Row + 1, 1).Interior.Color = Col1
        Cells(Row + 1, 1).Select
        Application.ScreenUpdating = True
        ActiveSheet.Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True
    End If
End If
End Sub

Sub PinFlip(Control As IRibbonControl)
Dim LastRow As Long
Dim Rng1 As Range, Rng2 As Range
Dim arr1 As Variant, arr2 As Variant

'Get number of selected cells
SelRng = Selection.Address(False, False)

If InStr(SelRng, ",") <> 0 Then
    MsgBox "Please select a single range of pins to flip.", vbInformation, "SamacSys - EPW"
    Exit Sub
End If

ActiveSheet.Unprotect Password:="m1llenn1ums4r0s"

RowCnt = Range(SelRng).Rows.Count
FirstRow = Range(SelRng).Rows(1).Row
LastRow = Range(SelRng).Rows(RowCnt).Row

If (RowCnt Mod 2) = 0 Then
    FlipCnt = RowCnt / 2
Else
    FlipCnt = Application.WorksheetFunction.RoundDown((RowCnt / 2), 0)
End If

If FlipCnt <> 0 Then
    For Row = 1 To FlipCnt Step 1
        Set Rng1 = Range(Cells(FirstRow, 1), Cells(FirstRow, 9))
        Col1 = Cells(FirstRow, 1).Interior.Color
        Set Rng2 = Range(Cells(LastRow, 1), Cells(LastRow, 9))
        Col2 = Cells(LastRow, 1).Interior.Color
        Application.ScreenUpdating = False
        arr1 = Rng1.Value
        arr2 = Rng2.Value
        Rng1.Value = arr2
        Cells(FirstRow, 1).Interior.Color = Col2
        Rng2.Value = arr1
        Cells(LastRow, 1).Interior.Color = Col1
        Application.ScreenUpdating = True
        FirstRow = FirstRow + 1
        LastRow = LastRow - 1
    Next Row
End If
ActiveSheet.Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True

End Sub


Function PostModelData(Action As Integer, schematicTool As String, layoutTool As String, DesignSparkID As String)
Dim oReq As Object
Dim designerID As String
Dim partID As String

'Build RequestString
AttrRow = 1
'reqStr = vbNullString
Do While Worksheets("Attributes").Cells(AttrRow, 1).Value <> vbNullString
'    If Worksheets("Attributes").Cells(AttrRow, 1).Value = "Supplier_Name" Then
'        reqStr = reqStr & "&supplier=" & Worksheets("Attributes").Cells(AttrRow, 2).Value
    If Worksheets("Attributes").Cells(AttrRow, 1).Value = "RS Part Number" Then RSpn = Worksheets("Attributes").Cells(AttrRow, 2).Value
'    ElseIf Worksheets("Attributes").Cells(AttrRow, 1).Value = "Manufacturer_Name" Then
'        reqStr = reqStr & "&manuf=" & Worksheets("Attributes").Cells(AttrRow, 2).Value
'    ElseIf Worksheets("Attributes").Cells(AttrRow, 1).Value = "Manufacturer_Part_Number" Then
'        reqStr = reqStr & "&partNo=" & Worksheets("Attributes").Cells(AttrRow, 2).Value
'    End If
    AttrRow = AttrRow + 1
Loop

'MyMAC = Replace(Worksheets("Setup").Range("D2").Value, "-", vbNullString)
'SplitMAC1 = fChangeBase(Hex2Dec(Left(MyMAC, 6)), 10, 32)
'SplitMAC2 = fChangeBase(Hex2Dec(Mid(MyMAC, 7, 6)), 10, 32)
'While Len(SplitMAC1) < 5
'    SplitMAC1 = "0" & SplitMAC1
'Wend
'While Len(SplitMAC2) < 5
'    SplitMAC2 = "0" & SplitMAC2
'Wend
'MyMAC = SplitMAC1 & SplitMAC2
partID = Worksheets("Setup").Range("D3").Value
'WinLogin = GetWinLogin
designerID = GetSetting("EPW", "User Details", "DesignerID", "")

'MsgBox MyMAC


'lt = layoutTool
'1   DesignSpark
'2   PADS Layout
'3   Allegro PCB
'4   Altium Designer
'5   CADSTAR
'6   Pulsonix
'7   TARGET 3001!
'st = schematicTool
'1   DesignSpark
'2   PADS Logic
'3   xDX Designer
'4   Altium Designer
'5   OrCAD Capture
'6   CADSTAR
'7   Pulsonix
'8   TARGET 3001!
'a = action
'1   ModelRequested
'2   ModelDownloaded
'3   ModelOpened
'4   ModelExported
'o = orderNo
's = supplier
'p = partID
'm = MAC Address
'd = designSpark ID

'Optional fields
'orderNo , supplierID, schematicTool, layoutTool, designSparkID

'Set oReq = Nothing    ' Release the object.

Set oReq = CreateObject("MSXML2.XMLHTTP")

url = GetSetting("EPW", "Settings", "URL", "")
oReq.Open "POST", url & "/r/a.php?p=" & partID & "&a=" & Action & "&did=" & designerID & "&s=3&o=" & RSpn & "&st=" & schematicTool & "&lt=" & layoutTool, False, "epwRead", "libraryC4rd"
oReq.send

Set oReq = Nothing


End Function



Function Hex2Dec(n1 As String) As Long
    Dim nl1 As Long
    Dim nGVal As Long
    Dim nSteper As Long
    Dim nCount As Long
    Dim X As Long
    Dim nVal As Long
    Dim Stepit As Long
    Dim hVal As String
    
    nl1 = Len(n1)
    nGVal = 0
    nSteper = 16
    nCount = 1
    For X = nl1 To 1 Step -1
       hVal = UCase(Mid$(n1, X, 1))
       Select Case hVal
         Case "A"
           nVal = 10
         Case "B"
           nVal = 11
         Case "C"
           nVal = 12
         Case "D"
           nVal = 13
         Case "E"
           nVal = 14
         Case "F"
           nVal = 15
         Case Else
           nVal = Val(hVal)
       End Select
       Stepit = (nSteper ^ (nCount - 1))
       nGVal = nGVal + nVal * Stepit
       nCount = nCount + 1
    Next X
    Hex2Dec = nGVal
End Function

Public Function fChangeBase(lOldNoString As String, lOldBase As Integer, lNewBase As Integer) As String
'fCHANGEBASE
' ------------------------------------------------------------------------
' Numeric number base changing function
' by Alan C. Buchanan, Somerset, BA5 1PN, U.K.- September
2003
' ------------------------------------------------------------------------
' Feed a number in any base together with an integer number indicating the base.
' Also feed a second integer giving the base into which the number is to be converted.
' The function will return the given number in the new base.
' (The function will handle fractional number (i.e. with a point).)
'
' Restrictions:-
' a) The order in which the 'digits' in the supplied number string occur must conform to
' those shown in the lNewDigit string shown below.
' b) As supplied the function handles bases between 2 and 62
' c) The function works by converting the given number to base10 and then converting
' this base10 number to the target base. It follows that the accuracy of the
' conversion depends on the accuracy of the (double-byte) base10 arithmetic.
' Accuracy begins to get lost for numbers greater than 999999999999999 .
' d) Fractional arithmetic, the conversion of the fractional part of any number, may also
' be inaccurate (depending on the two bases involved).
'
' (My understanding is that the IEEE 754 standard imposes a limit on the accuracy but
' perhaps both these precision problems could be fixed by using a high precision arithmetic add-in
' like, for example , xlPrecision (http://precisioncalc.com/What%20is%20xlPrecision.html).
' I have not tried such an add-in as including one would mean that the function would be
' limited to users would had it.)
'
' Usage :-
' You are free to use this function, for personal use and as a basis for further
' experiment, under General Open Source conditions (GPL).
' If, however, you incorporate it into a commercial product, please forward a
' suitable contribution for the Buchanan coffers!

Dim lNewDigits As String
Dim lPoint As Integer
Dim lIntegerPart As String
Dim lFractionalPart As String
Dim lBase10Ver As Double
lNewDigits = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"


If lOldBase < 2 Or lOldBase > 62 Or lNewBase < 2 Or lNewBase > 62 Then
MsgBox "Bases must be between 2 and 62", vbOKOnly + vbCritical
fChangeBase = 0
Exit Function
End If

lBase10Ver = fToBase10(lOldNoString, lOldBase, lNewDigits)
fChangeBase = fFromBase10(lBase10Ver, lNewBase, lNewDigits)


End Function

Private Function fToBase10(lOldNoString As String, lBase As Integer, lNewDigits As String) As Double
' This function takes a string representing a number in base<n> and returns its base10 equivalent

Dim lPower As Integer
Dim lNewNo As Double
Dim lMulti As Integer
Dim lChar As String
Dim lLengthNo As Integer
Dim lPoint As Integer
Dim X As Long

lLengthNo = Len(lOldNoString)
X = lLengthNo
lPower = 0
lNewNo = 0

' Find the fractional point - if there is one.(The point character is assumed to be a full stop.)
lPoint = InStr(lOldNoString, ".")
' set the highest power to the length of the integer part of the number less one.
If lPoint > 0 Then
lPower = lPoint - 2
Else
lPower = lLengthNo - 1
End If

' loop for each 'digit' in the original number from left to right decreasing the exponent
' by one on each iteration. Find the position of the corresponding 'digit' in the all-digits list.
' Accumulate the given based raised to this power, times the Position Number
' to get the base10 number output.
For X = 1 To lLengthNo
' isolate the next 'digit'
lChar = Mid(lOldNoString, X, 1)
If lChar <> "." Then ' unless this is the decimal point.....
lMulti = InStr(lNewDigits, lChar) ' find the offset position of the character in the 'digits' string
If lMulti > 0 Then
If lMulti >= lBase Then ' If the 'digit' position is outside those permitted for number of this base, then the number is invalid.
MsgBox "Invalid 'digits' for this number base", vbOKOnly + vbCritical
fToBase10 = 0
Exit Function
End If
lNewNo = lNewNo + ((lBase ^ lPower) * lMulti)
End If
lPower = lPower - 1
End If
Next X

fToBase10 = lNewNo

End Function

Private Function fFromBase10(lBase10No As Double, lNewBase As Integer, lNewDigits As String) As String

Dim lPower As Integer
Dim lNewNo As String
Dim lDiv As Integer
Dim lBaseXpower As Double
Dim lWork As Double
Dim lRounding As Double
lPower = 0

' find the highest power of the new base that is less than or equal to the base10
' version of the original number.
Do While lNewBase ^ lPower <= lBase10No
lPower = lPower + 1
Loop
lPower = lPower - 1

' working backwards from the higest divisible power, locate the
'digit' that
' correspons to that divisor. Construct the new number 'digit' by
'digit'
Do While lPower >= 0 Or lBase10No > 0
If lPower = -1 Then ' if this is the 1st fractional place, then insert a point
lNewNo = lNewNo & "."
End If
lBaseXpower = (lNewBase ^ lPower)
If lPower < 0 Then ' this if clause is to mitigate for the fact that VBA does not do fractional division accuratly
lRounding = ((lNewBase ^ (lPower - 1)) / 2)
lDiv = Int((lBase10No / lBaseXpower) + lRounding)
If lDiv >= lNewBase Then
lDiv = lDiv - 1
End If
Else
lDiv = Int((lBase10No / lBaseXpower))
End If



If lDiv > 0 Then ' append the relevant 'digit' to the right-hand end of the number.
lNewNo = lNewNo & Mid(lNewDigits, lDiv, 1)
Else
lNewNo = lNewNo & "0"
End If
lWork = lDiv * lBaseXpower
If lPower <= 0 And lBase10No <= lWork + 9E-17 Then ' the v.small number added here is once again because VBA fractional arithmatic is not totally acurate
lBase10No = 0
Else
lBase10No = lBase10No - lWork ' calculate the remaining part of the input number
End If

lPower = lPower - 1
Loop

fFromBase10 = lNewNo

End Function

Sub UserDetails(Control As IRibbonControl)
frm_AppRegistration.Show
End Sub

Public Function UTF16To8(ByVal UTF16 As String) As String
Dim sBuffer As String
Dim lLength As Long
If UTF16 <> "" Then
    lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, 0, 0, 0, 0)
    sBuffer = Space$(lLength)
    lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, StrPtr(sBuffer), Len(sBuffer), 0, 0)
    sBuffer = StrConv(sBuffer, vbUnicode)
    UTF16To8 = Left$(sBuffer, lLength - 1)
Else
    UTF16To8 = ""
End If
End Function

Public Function URLEncode(ByVal Text As String) As String
    Dim i As Integer
    Dim acode As Integer
    Dim char As String
    
    URLEncode = Replace(Text, vbCrLf, "%0D%0A")
    
    For i = Len(URLEncode) To 1 Step -1
        acode = Asc(Mid$(URLEncode, i, 1))
        Select Case acode
            Case 48 To 57, 65 To 90, 97 To 122
                ' don't touch alphanumeric chars
            Case 32
                ' replace space with "+"
                Mid$(URLEncode, i, 1) = "+"
            Case Else
                ' replace punctuation chars with "%hex"
                URLEncode = Left$(URLEncode, i - 1) & "%" & Hex$(acode) & Mid$ _
                    (URLEncode, i + 1)
        End Select
    Next
    
    URLEncode = Replace(Text, "%D%A", "%0D%0A")
    
End Function

Public Function URLDecode(sEncodedURL As String) As String

On Error GoTo Catch

Dim iLoop   As Integer
Dim sRtn    As String
Dim sTmp    As String

If Len(sEncodedURL) > 0 Then
    ' Loop through each char
    For iLoop = 1 To Len(sEncodedURL)
        sTmp = Mid(sEncodedURL, iLoop, 1)
        sTmp = Replace(sTmp, "+", " ")
        ' If char is % then get next two chars
        ' and convert from HEX to decimal
        If sTmp = "%" And Len(sEncodedURL) + 1 > iLoop + 2 Then
            sTmp = Mid(sEncodedURL, iLoop + 1, 2)
            sTmp = Chr(CDec("&H" & sTmp))
            ' Increment loop by 2
            iLoop = iLoop + 2
        End If
        sRtn = sRtn & sTmp
    Next
    URLDecode = sRtn
End If

Finally:
    Exit Function
Catch:
    URLDecode = ""
    Resume Finally
End Function


Sub OpenGuide(Control As IRibbonControl)
OpenHelpGuide
End Sub
Function OpenHelpGuide()
RndNo = RandomNumbers(1, 1000000)

On Error Resume Next
If IsInternetConnected Then
    ThisWorkbook.FollowHyperlink Address:="http://www.samacsys.com/epw-help/" & "?&t=" & RndNo, NewWindow:=True
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "SamacSys - EPW"
End If
End Function
Sub OpenQuickStart(Control As IRibbonControl)

RndNo = RandomNumbers(1, 1000000)

On Error Resume Next
If IsInternetConnected Then
    ThisWorkbook.FollowHyperlink Address:="http://www.samacsys.com/epw-quick-start/" & "?&t=" & RndNo, NewWindow:=True
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "SamacSys - EPW"
End If
End Sub
Function CheckDatabaseAccess() As Boolean
Dim result As String
Dim myURL As String
Dim oReq As Object

On Error Resume Next

Set oReq = CreateObject("MSXML2.XMLHTTP")
RndNo = RandomNumbers(1, 1000000)
result = vbNullString

    url = GetSetting("EPW", "Settings", "URL", "")

    myURL = url & "/part_entry/manufacturers.php" & "?&t=" & RndNo
'    Debug.Print myURL
    oReq.setTimeouts 5000, 5000, 5000, 5000
    oReq.Open "GET", myURL, False, "epwRead", "libraryC4rd"
    oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    oReq.send
    result = oReq.responseText
    
'    Debug.Print result
    
    If InStr(result, "* Other *") = 0 And url <> vbNullString Then
        CheckDatabaseAccess = False
    Else
        CheckDatabaseAccess = True
    End If
    
End Function



Attribute VB_Name = "Module2"
#If VBA7 Then
    Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef Destination As Any, ByRef Source As Any, ByVal numbytes As Long)
    Public Declare PtrSafe Function GetAdaptersInfo Lib "iphlpapi.dll" (ByRef pAdapterInfo As Any, ByRef pOutBufLen As Long) As Long
    Public Declare PtrSafe Function GetNumberOfInterfaces Lib "iphlpapi.dll" (ByRef pdwNumIf As Long) As Long
    Public Declare PtrSafe Function GetIfEntry Lib "iphlpapi.dll" (ByRef pIfRow As Any) As Long
    Private Declare PtrSafe Function GetIfTable Lib "iphlpapi.dll" (ByRef pIfTable As Any, ByRef pdwSize As Long, ByVal bOrder As Long) As Long

#Else
    Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef Destination As Any, ByRef Source As Any, ByVal numbytes As Long)
    Public Declare Function GetAdaptersInfo Lib "iphlpapi.dll" (ByRef pAdapterInfo As Any, ByRef pOutBufLen As Long) As Long
    Public Declare Function GetNumberOfInterfaces Lib "iphlpapi.dll" (ByRef pdwNumIf As Long) As Long
    Public Declare Function GetIfEntry Lib "iphlpapi.dll" (ByRef pIfRow As Any) As Long
    Private Declare Function GetIfTable Lib "iphlpapi.dll" (ByRef pIfTable As Any, ByRef pdwSize As Long, ByVal bOrder As Long) As Long
#End If

Public ChkStr As String
Public ChkSum As String
Public ExpDat As String
Public Msg As String
Public Lnk As String
Public Ver As String
Public InstallVer As String

Public Enum Hive
HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
HKEY_USERS
HKEY_CURRENT_CONFIG
End Enum

Public Function GetMAC() As String
  
  Dim oWMIService As Object
  Dim vAdapters As Variant
  Dim oAdapter As Object
  Dim lIndex As Long
  Dim lMatchIndex As Long
  Dim vResult As Variant
  
   ' Adapters are pulled from the Windows Management Instrumentation database
  ' The currently used adapter has a MAC address and an IP address that is not 0.0.0.0
  Set oWMIService = GetObject("winmgmts:\\" & "." & "\root\cimv2")
  Set vAdapters = oWMIService.ExecQuery("SELECT * FROM Win32_NetworkAdapterConfiguration WHERE IPEnabled = True")
  For Each oAdapter In vAdapters
      If Not IsNull(oAdapter.MACaddress) And IsArray(oAdapter.IpAddress) Then
          lMatchIndex = -1
          For lIndex = 0 To UBound(oAdapter.IpAddress)
              If Not oAdapter.IpAddress(lIndex) = "0.0.0.0" Then
                  lMatchIndex = lIndex
                  Exit For
              End If
          Next lIndex
          If Not lMatchIndex < 0 Then
              GetMAC = oAdapter.MACaddress
          End If
      End If
 Next
  
End Function

' Convert a byte array containing a MAC address to a hex string
Private Function MAC2String(AdrArray() As Byte) As String
    Dim aStr As String, hexStr As String, i%
    
    For i = 0 To 5
        If (i > UBound(AdrArray)) Then
            hexStr = "00"
        Else
            hexStr = Hex$(AdrArray(i))
        End If
        
        If (Len(hexStr) < 2) Then hexStr = "0" & hexStr
        aStr = aStr & hexStr
        If (i < 5) Then aStr = aStr & "-"
    Next i
    
    MAC2String = aStr
    
End Function
Function CheckLicenses(Hostid As String, OpenCnt As Long) As Boolean
    Dim strURL As String
    Dim oReq As Object
    Dim oDOM As Object
    Dim oNodeList As IXMLDOMNodeList
    
    Set oReq = Nothing    ' Release the object.
    Set oDOM = Nothing    ' Release the object.

    Set oReq = CreateObject("MSXML2.XMLHTTP")
    Set oDOM = CreateObject("MSXML2.DOMDocument.3.0")
    oDOM.async = False
    
    On Error GoTo NoInternetConnection
    If File_Exists("C:\EPW\" & Hostid & ".xml") Then
        oReq.Open "POST", "C:\EPW\" & Hostid & ".xml", False
    Else
        oReq.Open "POST", "http://www.livepartlibrary.com/LPL/Licenses/" & Hostid & ".xml?t=" & OpenCnt, False
    End If
    oReq.send
    oDOM.LoadXML (oReq.responseText)
    Set oReq = Nothing
    
    On Error GoTo NoHostid
    Set oNodeList = oDOM.getElementsByTagName("HOST-" & Hostid)

    If oNodeList.Length = 0 Then
        CheckLicenses = False
        Exit Function
    End If
    
    ChkStr = "HOST-" & Hostid
    
    If CheckLicense(oDOM.getElementsByTagName("HOST-" & Hostid)) Then
        CheckLicenses = True
    Else
        CheckLicenses = False
    End If
   
    ChkStr = ChkStr & "HOST-" & Hostid
'    Debug.Print ChkStr
    If MD5(ChkStr) <> ChkSum Then
        MsgBox "License Invalid!", vbCritical, "ECAD Part Wizard"
        ActiveWorkbook.Close SaveChanges:=False
    ElseIf ExpDat <> "NONE" Then
        If DateDiff("d", Format(Now(), "dd/mm/yyyy"), ExpDat) < 0 Then
            MsgBox "License Expired " & ExpDat, vbCritical, "ECAD Part Wizard"
            ActiveWorkbook.Close SaveChanges:=False
        End If
    End If
    
'    Worksheets("Setup").Cells(2, 4) = Hostid
    
Exit Function
NoInternetConnection:
MsgBox "No Internet Connection or the ECAD Part Wizard License Server is Temporarily Unavailable!", vbCritical, "ECAD Part Wizard"
ActiveWorkbook.Close SaveChanges:=False
NoHostid:
CheckLicenses = False
End Function

Function CheckLicense(ByRef Nodes As MSXML2.IXMLDOMNodeList) As Boolean
Dim xNode As MSXML2.IXMLDOMNode
For Each xNode In Nodes
    For i = 0 To xNode.ChildNodes.Length - 1
        If xNode.ChildNodes(i).nodeName <> "CHKSUM" Then
            If xNode.ChildNodes(i).nodeName = "EXPDATE" Then ExpDat = xNode.ChildNodes(i).Text
'            Debug.Print xNode.ChildNodes(I).nodeName & "=" & xNode.ChildNodes(I).Text
            ChkStr = ChkStr & xNode.ChildNodes(i).nodeName & "=" & xNode.ChildNodes(i).Text
        Else
            ChkSum = xNode.ChildNodes(i).Text
        End If
        
        If xNode.ChildNodes(i).nodeName = "EPW" Then
            If xNode.ChildNodes(i).Text = "True" Then
                CheckLicense = True
            End If
        End If
    Next i
Next xNode
'Debug.Print CheckLicense
If Not CheckLicense Then CheckLicense = False
End Function

Function AddMissingRefs(SDD_HOME As String)
On Error Resume Next
ActiveWorkbook.VBProject.References.AddFromFile SDD_HOME & "\Programs\powerlogic.exe"
ActiveWorkbook.VBProject.References.AddFromFile SDD_HOME & "\Programs\powerpcb.exe"
End Function

Function MaximizeActiveWindow()
On Error Resume Next
Application.ActiveWindow.WindowState = xlMaximized
End Function

Function GetHive(hivetype As Hive) As Variant
' return enumerated value depending on the hive chosen
Select Case hivetype
Case 0
GetHive = &H80000000 ' HKEY_CLASSES_ROOT
Case 1
GetHive = &H80000001 ' HKEY_CURRENT_USER
Case 2
GetHive = &H80000002 ' HKEY_LOCAL_MACHINE
Case 3
GetHive = &H80000003 ' HKEY_USERS
Case 4
GetHive = &H80000005 ' HKEY_CURRENT_CONFIG
End Select
End Function

Function GetStringValFromRegistry(hivetype As Hive, registryKey As String, _
keyValue As String) As String
Dim objReg As Object
Dim strKeyPath As String
Dim ValueName As String
Dim strValue As String
Set objReg = GetStdRegProv
strKeyPath = registryKey
ValueName = keyValue
' put key value into strValue variable
objReg.GetStringValue GetHive(hivetype), strKeyPath, ValueName, strValue
GetStringValFromRegistry = strValue
End Function
Function GetStdRegProv() As Object
' http://msdn.microsoft.com/en-us/library/aa394600(VS.85).aspx
Dim strComputer As String
strComputer = "."
Set GetStdRegProv = GetObject("winmgmts:" _
& "{impersonationLevel=impersonate}!\\" _
& strComputer & "\root\default:StdRegProv")
End Function

Function CreateKeyValue(hivetype As Hive, registryKey As String, keyName As String, keyValue As String)
Dim objReg As Object
Dim strKeyPath As String
Dim strValueName As String
Dim strValue As String
Set objReg = GetStdRegProv
strKeyPath = registryKey
strValueName = keyName
strValue = keyValue
' create the key value
objReg.SetStringValue GetHive(hivetype), strKeyPath, strValueName, strValue
End Function
Function GetMessages(OpenCnt As String)
    Dim strURL As String
    Dim oReq As Object
    Dim oDOM As Object
    Dim oNodeList As IXMLDOMNodeList
    
    Set oReq = Nothing    ' Release the object.
    Set oDOM = Nothing    ' Release the object.
    
    Set oReq = CreateObject("MSXML2.ServerXMLHTTP")
    Set oDOM = CreateObject("MSXML2.DOMDocument.3.0")
    oDOM.async = False
    
    On Error GoTo EndFunc
    oReq.Open "POST", "http://www.livepartlibrary.com/LPL/messages.xml?t=" & OpenCnt, False
    oReq.send ""
    oDOM.LoadXML (oReq.responseText)
    Set oReq = Nothing

    RetrieveMessages oDOM.getElementsByTagName("Messages")

EndFunc:
End Function

Function RetrieveMessages(ByRef Nodes As MSXML2.IXMLDOMNodeList)
Dim xNode As MSXML2.IXMLDOMNode
Dim i As Integer

For Each xNode In Nodes
    For i = 0 To xNode.ChildNodes.Length - 1
        If xNode.ChildNodes(i).nodeName = "MsgLn1SPW" Then
            Msg = xNode.ChildNodes(i).Text & Chr(13) & Chr(10)
        ElseIf xNode.ChildNodes(i).nodeName = "MsgLn2SPW" Then
            Msg = Msg & xNode.ChildNodes(i).Text & Chr(13) & Chr(10)
        ElseIf xNode.ChildNodes(i).nodeName = "MsgLn3SPW" Then
            Msg = Msg & xNode.ChildNodes(i).Text & Chr(13) & Chr(10)
        ElseIf xNode.ChildNodes(i).nodeName = "MsgLn4SPW" Then
            Msg = Msg & xNode.ChildNodes(i).Text & Chr(13) & Chr(10)
        ElseIf xNode.ChildNodes(i).nodeName = "MsgLnkSPW" Then
            Lnk = xNode.ChildNodes(i).Text
        ElseIf xNode.ChildNodes(i).nodeName = "VerSPW" Then
            Ver = xNode.ChildNodes(i).Text
        End If
    Next i
Next xNode

frm_Message.Show

End Function
Public Function File_Exists(ByVal sPathName As String, Optional Directory As Boolean) As Boolean

'Returns True if the passed sPathName exist
'Otherwise returns False
On Error Resume Next
If sPathName <> "" Then

If IsMissing(Directory) Or Directory = False Then

File_Exists = (Dir$(sPathName) <> "")
Else

File_Exists = (Dir$(sPathName, vbDirectory) <> "")
End If

End If
End Function


Attribute VB_Name = "Module3"
' Derived from the RSA Data Security, Inc. MD5 Message-Digest Algorithm,
' as set out in the memo RFC1321.
'
' See the VB6 project that accompanies this sample for full code comments on how
' it works.
'
' ASP VBScript code for generating an MD5 'digest' or 'signature' of a string. The
' MD5 algorithm is one of the industry standard methods for generating digital
' signatures. It is generically known as a digest, digital signature, one-way
' encryption, hash or checksum algorithm. A common use for MD5 is for password
' encryption as it is one-way in nature, that does not mean that your passwords
' are not free from a dictionary attack.
'
' This is 'free' software with the following restrictions:
'
' You may not redistribute this code as a 'sample' or 'demo'. However, you are free
' to use the source code in your own code, but you may not claim that you created
' the sample code. It is expressly forbidden to sell or profit from this source code
' other than by the knowledge gained or the enhanced value added by your own code.
'
' Use of this software is also done so at your own risk. The code is supplied as
' is without warranty or guarantee of any kind.
'
' Should you wish to commission some derivative work based on this code provided
' here, or any consultancy work, please do not hesitate to contact us.
'
' Web Site:  http://www.frez.co.uk
' E-mail:    sales@frez.co.uk

Private Const BITS_TO_A_BYTE = 8
Private Const BYTES_TO_A_WORD = 4
Private Const BITS_TO_A_WORD = 32

Private m_lOnBits(30)
Private m_l2Power(30)


Private Function LShift(lValue, iShiftBits)
    If iShiftBits = 0 Then
        LShift = lValue
        Exit Function
    ElseIf iShiftBits = 31 Then
        If lValue And 1 Then
            LShift = &H80000000
        Else
            LShift = 0
        End If
        Exit Function
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If

    If (lValue And m_l2Power(31 - iShiftBits)) Then
        LShift = ((lValue And m_lOnBits(31 - (iShiftBits + 1))) * m_l2Power(iShiftBits)) Or &H80000000
    Else
        LShift = ((lValue And m_lOnBits(31 - iShiftBits)) * m_l2Power(iShiftBits))
    End If
End Function

Private Function RShift(lValue, iShiftBits)
    If iShiftBits = 0 Then
        RShift = lValue
        Exit Function
    ElseIf iShiftBits = 31 Then
        If lValue And &H80000000 Then
            RShift = 1
        Else
            RShift = 0
        End If
        Exit Function
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If

    RShift = (lValue And &H7FFFFFFE) \ m_l2Power(iShiftBits)

    If (lValue And &H80000000) Then
        RShift = (RShift Or (&H40000000 \ m_l2Power(iShiftBits - 1)))
    End If
End Function

Private Function RotateLeft(lValue, iShiftBits)
    RotateLeft = LShift(lValue, iShiftBits) Or RShift(lValue, (32 - iShiftBits))
End Function

Private Function AddUnsigned(lX, lY)
    Dim lX4
    Dim lY4
    Dim lX8
    Dim lY8
    Dim lResult

    lX8 = lX And &H80000000
    lY8 = lY And &H80000000
    lX4 = lX And &H40000000
    lY4 = lY And &H40000000

    lResult = (lX And &H3FFFFFFF) + (lY And &H3FFFFFFF)

    If lX4 And lY4 Then
        lResult = lResult Xor &H80000000 Xor lX8 Xor lY8
    ElseIf lX4 Or lY4 Then
        If lResult And &H40000000 Then
            lResult = lResult Xor &HC0000000 Xor lX8 Xor lY8
        Else
            lResult = lResult Xor &H40000000 Xor lX8 Xor lY8
        End If
    Else
        lResult = lResult Xor lX8 Xor lY8
    End If

    AddUnsigned = lResult
End Function

Private Function F(X, Y, z)
    F = (X And Y) Or ((Not X) And z)
End Function

Private Function G(X, Y, z)
    G = (X And z) Or (Y And (Not z))
End Function

Private Function H(X, Y, z)
    H = (X Xor Y Xor z)
End Function

Private Function i(X, Y, z)
    i = (Y Xor (X Or (Not z)))
End Function

Private Sub ff(a, B, c, d, X, s, ac)
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(B, c, d), X), ac))
    a = RotateLeft(a, s)
    a = AddUnsigned(a, B)
End Sub

Private Sub GG(a, B, c, d, X, s, ac)
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(B, c, d), X), ac))
    a = RotateLeft(a, s)
    a = AddUnsigned(a, B)
End Sub

Private Sub HH(a, B, c, d, X, s, ac)
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(B, c, d), X), ac))
    a = RotateLeft(a, s)
    a = AddUnsigned(a, B)
End Sub

Private Sub II(a, B, c, d, X, s, ac)
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(i(B, c, d), X), ac))
    a = RotateLeft(a, s)
    a = AddUnsigned(a, B)
End Sub

Private Function ConvertToWordArray(sMessage)
    Dim lMessageLength
    Dim lNumberOfWords
    Dim lWordArray()
    Dim lBytePosition
    Dim lByteCount
    Dim lWordCount

    Const MODULUS_BITS = 512
    Const CONGRUENT_BITS = 448

    lMessageLength = Len(sMessage)

    lNumberOfWords = (((lMessageLength + ((MODULUS_BITS - CONGRUENT_BITS) \ BITS_TO_A_BYTE)) \ (MODULUS_BITS \ BITS_TO_A_BYTE)) + 1) * (MODULUS_BITS \ BITS_TO_A_WORD)
    ReDim lWordArray(lNumberOfWords - 1)

    lBytePosition = 0
    lByteCount = 0
    Do Until lByteCount >= lMessageLength
        lWordCount = lByteCount \ BYTES_TO_A_WORD
        lBytePosition = (lByteCount Mod BYTES_TO_A_WORD) * BITS_TO_A_BYTE
        lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(Asc(Mid(sMessage, lByteCount + 1, 1)), lBytePosition)
        lByteCount = lByteCount + 1
    Loop

    lWordCount = lByteCount \ BYTES_TO_A_WORD
    lBytePosition = (lByteCount Mod BYTES_TO_A_WORD) * BITS_TO_A_BYTE

    lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(&H80, lBytePosition)

    lWordArray(lNumberOfWords - 2) = LShift(lMessageLength, 3)
    lWordArray(lNumberOfWords - 1) = RShift(lMessageLength, 29)

    ConvertToWordArray = lWordArray
End Function

Private Function WordToHex(lValue)
    Dim lByte
    Dim lCount

    For lCount = 0 To 3
        lByte = RShift(lValue, lCount * BITS_TO_A_BYTE) And m_lOnBits(BITS_TO_A_BYTE - 1)
        WordToHex = WordToHex & Right("0" & Hex(lByte), 2)
    Next
End Function

Public Function MD5(sMessage)
    Dim X
    Dim k
    Dim AA
    Dim BB
    Dim CC
    Dim DD
    Dim a
    Dim B
    Dim c
    Dim d

    Const S11 = 7
    Const S12 = 12
    Const S13 = 17
    Const S14 = 22
    Const S21 = 5
    Const S22 = 9
    Const S23 = 14
    Const S24 = 20
    Const S31 = 4
    Const S32 = 11
    Const S33 = 16
    Const S34 = 23
    Const S41 = 6
    Const S42 = 10
    Const S43 = 15
    Const S44 = 21
    
        m_lOnBits(0) = CLng(1)
    m_lOnBits(1) = CLng(3)
    m_lOnBits(2) = CLng(7)
    m_lOnBits(3) = CLng(15)
    m_lOnBits(4) = CLng(31)
    m_lOnBits(5) = CLng(63)
    m_lOnBits(6) = CLng(127)
    m_lOnBits(7) = CLng(255)
    m_lOnBits(8) = CLng(511)
    m_lOnBits(9) = CLng(1023)
    m_lOnBits(10) = CLng(2047)
    m_lOnBits(11) = CLng(4095)
    m_lOnBits(12) = CLng(8191)
    m_lOnBits(13) = CLng(16383)
    m_lOnBits(14) = CLng(32767)
    m_lOnBits(15) = CLng(65535)
    m_lOnBits(16) = CLng(131071)
    m_lOnBits(17) = CLng(262143)
    m_lOnBits(18) = CLng(524287)
    m_lOnBits(19) = CLng(1048575)
    m_lOnBits(20) = CLng(2097151)
    m_lOnBits(21) = CLng(4194303)
    m_lOnBits(22) = CLng(8388607)
    m_lOnBits(23) = CLng(16777215)
    m_lOnBits(24) = CLng(33554431)
    m_lOnBits(25) = CLng(67108863)
    m_lOnBits(26) = CLng(134217727)
    m_lOnBits(27) = CLng(268435455)
    m_lOnBits(28) = CLng(536870911)
    m_lOnBits(29) = CLng(1073741823)
    m_lOnBits(30) = CLng(2147483647)

    m_l2Power(0) = CLng(1)
    m_l2Power(1) = CLng(2)
    m_l2Power(2) = CLng(4)
    m_l2Power(3) = CLng(8)
    m_l2Power(4) = CLng(16)
    m_l2Power(5) = CLng(32)
    m_l2Power(6) = CLng(64)
    m_l2Power(7) = CLng(128)
    m_l2Power(8) = CLng(256)
    m_l2Power(9) = CLng(512)
    m_l2Power(10) = CLng(1024)
    m_l2Power(11) = CLng(2048)
    m_l2Power(12) = CLng(4096)
    m_l2Power(13) = CLng(8192)
    m_l2Power(14) = CLng(16384)
    m_l2Power(15) = CLng(32768)
    m_l2Power(16) = CLng(65536)
    m_l2Power(17) = CLng(131072)
    m_l2Power(18) = CLng(262144)
    m_l2Power(19) = CLng(524288)
    m_l2Power(20) = CLng(1048576)
    m_l2Power(21) = CLng(2097152)
    m_l2Power(22) = CLng(4194304)
    m_l2Power(23) = CLng(8388608)
    m_l2Power(24) = CLng(16777216)
    m_l2Power(25) = CLng(33554432)
    m_l2Power(26) = CLng(67108864)
    m_l2Power(27) = CLng(134217728)
    m_l2Power(28) = CLng(268435456)
    m_l2Power(29) = CLng(536870912)
    m_l2Power(30) = CLng(1073741824)


    X = ConvertToWordArray(sMessage)

    a = &H67452301
    B = &HEFCDAB89
    c = &H98BADCFE
    d = &H10325476

    For k = 0 To UBound(X) Step 16
        AA = a
        BB = B
        CC = c
        DD = d

        ff a, B, c, d, X(k + 0), S11, &HD76AA478
        ff d, a, B, c, X(k + 1), S12, &HE8C7B756
        ff c, d, a, B, X(k + 2), S13, &H242070DB
        ff B, c, d, a, X(k + 3), S14, &HC1BDCEEE
        ff a, B, c, d, X(k + 4), S11, &HF57C0FAF
        ff d, a, B, c, X(k + 5), S12, &H4787C62A
        ff c, d, a, B, X(k + 6), S13, &HA8304613
        ff B, c, d, a, X(k + 7), S14, &HFD469501
        ff a, B, c, d, X(k + 8), S11, &H698098D8
        ff d, a, B, c, X(k + 9), S12, &H8B44F7AF
        ff c, d, a, B, X(k + 10), S13, &HFFFF5BB1
        ff B, c, d, a, X(k + 11), S14, &H895CD7BE
        ff a, B, c, d, X(k + 12), S11, &H6B901122
        ff d, a, B, c, X(k + 13), S12, &HFD987193
        ff c, d, a, B, X(k + 14), S13, &HA679438E
        ff B, c, d, a, X(k + 15), S14, &H49B40821

        GG a, B, c, d, X(k + 1), S21, &HF61E2562
        GG d, a, B, c, X(k + 6), S22, &HC040B340
        GG c, d, a, B, X(k + 11), S23, &H265E5A51
        GG B, c, d, a, X(k + 0), S24, &HE9B6C7AA
        GG a, B, c, d, X(k + 5), S21, &HD62F105D
        GG d, a, B, c, X(k + 10), S22, &H2441453
        GG c, d, a, B, X(k + 15), S23, &HD8A1E681
        GG B, c, d, a, X(k + 4), S24, &HE7D3FBC8
        GG a, B, c, d, X(k + 9), S21, &H21E1CDE6
        GG d, a, B, c, X(k + 14), S22, &HC33707D6
        GG c, d, a, B, X(k + 3), S23, &HF4D50D87
        GG B, c, d, a, X(k + 8), S24, &H455A14ED
        GG a, B, c, d, X(k + 13), S21, &HA9E3E905
        GG d, a, B, c, X(k + 2), S22, &HFCEFA3F8
        GG c, d, a, B, X(k + 7), S23, &H676F02D9
        GG B, c, d, a, X(k + 12), S24, &H8D2A4C8A

        HH a, B, c, d, X(k + 5), S31, &HFFFA3942
        HH d, a, B, c, X(k + 8), S32, &H8771F681
        HH c, d, a, B, X(k + 11), S33, &H6D9D6122
        HH B, c, d, a, X(k + 14), S34, &HFDE5380C
        HH a, B, c, d, X(k + 1), S31, &HA4BEEA44
        HH d, a, B, c, X(k + 4), S32, &H4BDECFA9
        HH c, d, a, B, X(k + 7), S33, &HF6BB4B60
        HH B, c, d, a, X(k + 10), S34, &HBEBFBC70
        HH a, B, c, d, X(k + 13), S31, &H289B7EC6
        HH d, a, B, c, X(k + 0), S32, &HEAA127FA
        HH c, d, a, B, X(k + 3), S33, &HD4EF3085
        HH B, c, d, a, X(k + 6), S34, &H4881D05
        HH a, B, c, d, X(k + 9), S31, &HD9D4D039
        HH d, a, B, c, X(k + 12), S32, &HE6DB99E5
        HH c, d, a, B, X(k + 15), S33, &H1FA27CF8
        HH B, c, d, a, X(k + 2), S34, &HC4AC5665

        II a, B, c, d, X(k + 0), S41, &HF4292244
        II d, a, B, c, X(k + 7), S42, &H432AFF97
        II c, d, a, B, X(k + 14), S43, &HAB9423A7
        II B, c, d, a, X(k + 5), S44, &HFC93A039
        II a, B, c, d, X(k + 12), S41, &H655B59C3
        II d, a, B, c, X(k + 3), S42, &H8F0CCC92
        II c, d, a, B, X(k + 10), S43, &HFFEFF47D
        II B, c, d, a, X(k + 1), S44, &H85845DD1
        II a, B, c, d, X(k + 8), S41, &H6FA87E4F
        II d, a, B, c, X(k + 15), S42, &HFE2CE6E0
        II c, d, a, B, X(k + 6), S43, &HA3014314
        II B, c, d, a, X(k + 13), S44, &H4E0811A1
        II a, B, c, d, X(k + 4), S41, &HF7537E82
        II d, a, B, c, X(k + 11), S42, &HBD3AF235
        II c, d, a, B, X(k + 2), S43, &H2AD7D2BB
        II B, c, d, a, X(k + 9), S44, &HEB86D391

        a = AddUnsigned(a, AA)
        B = AddUnsigned(B, BB)
        c = AddUnsigned(c, CC)
        d = AddUnsigned(d, DD)
    Next

    MD5 = LCase(WordToHex(a) & WordToHex(B) & WordToHex(c) & WordToHex(d))
End Function
Attribute VB_Name = "Module4"
#If VBA7 Then
    Private Declare PtrSafe Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long
#Else
    Private Declare Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long
#End If

Private Const LOCALE_SDECIMAL As Long = &HE
Public Function GetInfo(ByVal lInfo As Long) As String
    Dim Buffer As String
    Dim Ret As String
    Buffer = String$(256, 0)
    Ret = GetLocaleInfo(LOCALE_USER_DEFAULT, lInfo, Buffer, Len(Buffer))
    If Ret > 0 Then
        GetInfo = Left$(Buffer, Ret - 1)
    Else
        GetInfo = ""
    End If
End Function
Function GenerateFP()
frm_ProgressBarFP.Show
End Function
Function GenerateFP2()
Dim GateCnt As Integer
Dim GateNo As Integer
Dim PinCnt As Integer
Dim SYMname As String
Dim SymbolFile As String
Dim BoxWidthLR As Double
Dim BoxWidthTB As Double
Dim PinPitch As Double
Dim EmailBody As String
Dim PadDefs() As String
Dim DecalAscLn As String
Dim SpaceIndex As Integer
Dim NextSpaceIndex As Integer
Dim FirstSpaceIndex As Integer
Dim PrevSpaceIndex As Integer
Dim SpaceIndex1 As Integer
Dim SpaceIndex2 As Integer
Dim SpaceIndex3 As Integer
Dim PrevDecalAscLn As String
Dim NextDecal As Boolean
Dim DecalNo As Integer
Dim IsPTH As Boolean
Dim tbl As ListObject
Dim SkipPadDef As Boolean
Dim LayerNo As Integer
Dim ScaleFactor As Double
Dim Shp As Shape
Dim NoOfPads As Integer
Dim SheetXoffset As Double
Dim SheetYoffset As Double
Dim SheetYoffsetScaled As Double
Dim ArcRotation As Double
Dim SweepAngle As Double
Dim ExistingFP As Boolean
Dim Dshape As Boolean
Dim Dfound As Boolean
Dim Dlength As Double
Dim Side As String
Dim PinsLR As Integer
Dim PinsTB As Integer
Dim L As Integer
Dim B As Integer
Dim r As Integer
Dim t As Integer
Dim PctDone As Single
Dim AscRows As Integer
Dim LineWidth As Double
Dim tCount As Integer
Dim LastSeqNo As Integer
Dim FirstPinNo As Integer
Dim LastPinNo As Integer

tCount = 0

DecimalSymbol = GetInfo(LOCALE_SDECIMAL)

Application.ScreenUpdating = False

ActiveSheet.Unprotect Password:="m1llenn1ums4r0s"

For Each Shp In ActiveSheet.Shapes
    If Shp.Type = msoAutoShape Or Shp.Type = msoTextBox Then Shp.Delete
Next Shp

ExistingFP = Worksheets("Setup").Range("B102")

If Right(Worksheets("Footprint Preview").Range("A1"), 1) = "N" Or Right(Worksheets("Footprint Preview").Range("A1"), 3) = "N-D" Or Right(Worksheets("Footprint Preview").Range("A1"), 1) = "B" Then
    WorksheetName = "FP-N"
ElseIf Right(Worksheets("Footprint Preview").Range("A1"), 1) = "L" Or Right(Worksheets("Footprint Preview").Range("A1"), 3) = "L-D" Or Right(Worksheets("Footprint Preview").Range("A1"), 1) = "C" Then
    WorksheetName = "FP-L"
ElseIf Right(Worksheets("Footprint Preview").Range("A1"), 1) = "M" Or Right(Worksheets("Footprint Preview").Range("A1"), 3) = "M-D" Or Right(Worksheets("Footprint Preview").Range("A1"), 1) = "A" Then
    WorksheetName = "FP-M"
Else
    WorksheetName = "FP-N"
End If

On Error Resume Next
LastSeqNo = Worksheets("Template").ListObjects("Table1").ListRows.Count
For TempRow = 2 To LastSeqNo + 1
    If Worksheets("Template").Range("G" & TempRow) = 1 Then FirstPin = Worksheets("Template").Range("B" & TempRow)
    If Worksheets("Template").Range("G" & TempRow) = LastSeqNo Then LastPin = Worksheets("Template").Range("B" & TempRow)
Next TempRow

AscRows = 4
Do
AscRows = AscRows + 1
Loop While Worksheets(WorksheetName).Range("A" & AscRows) <> vbNullString

If AscRows <> 5 Then

    IsPTH = False
    
    DecalHdrRow = 4
    DecalNo = 1
    Row = 4
    StartCol = 0
    ScaleFactor = Worksheets("Footprint Preview").Range("B11")
    
    SheetXoffset = MMToExcel(95) '105cm (half A4 Width)
    
    SheetYoffsetScaled = MMToExcel(170) / ScaleFactor
    SheetYoffset = MMToExcel(100) / 3
    
    Do
    
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        If Row = DecalHdrRow Then
        
        SpaceIndex = InStr(1, DecalAscLn, Space(1))
        
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
        SpaceIndex = SpaceIndex + ExtraSpaces
        
        DecalName = Left(DecalAscLn, SpaceIndex - 1 - ExtraSpaces)
    
        Worksheets("Footprint Preview").Range("A1") = DecalName
        
        If Right(DecalName, 2) = "-D" Then
            Dshape = True
            PinsTB = Worksheets("Setup").Range("B92")
            PinsLR = Worksheets("Setup").Range("B93")
            L = PinsLR
            B = PinsLR + PinsTB
            r = (2 * PinsLR) + PinsTB
            t = (2 * PinsLR) + (2 * PinsTB)
            
            Dfound = False
        End If
        
        If DecalNo = 1 Then
            For i = 1 To 8
            If i = 1 Then units = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
            SpaceIndex = InStr(SpaceIndex + 1, DecalAscLn, Space(1))
            ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
            SpaceIndex = SpaceIndex + ExtraSpaces
            If i = 7 Then NoOfPads = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
            Next i
        Else
            StartCol = StartCol + 5
        End If
        
        
        ReDim Preserve PadDefs(NoOfPads, (DecalNo * 8) - 1)
        
        PadDefs(0, StartCol) = DecalName
        
        
        NoOfPadstacks = Mid(DecalAscLn, SpaceIndex + 1, Len(DecalAscLn) - (InStr(SpaceIndex + 1, DecalAscLn, Space(1))))
        
        End If
        
        If Left(DecalAscLn, 6) = "COPCLS" And Dshape And Not Dfound Then
        Dfound = True
        Row = Row + 1
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
        FirstPnt = Val(Mid(DecalAscLn, 1, NextSpaceIndex - 1))
        Row = Row + 1
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        For i = 1 To 7
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 1 Then ArcStartX = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
            If i = 7 Then ArcUPX = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
        
        Dlength = (ArcStartX - FirstPnt) + (ArcUPX - ArcStartX)
        
        End If
        
        
        If Left(DecalAscLn, 1) = "T" Then
            
            
            FirstSpaceIndex = InStr(DecalAscLn, Space(1))
            
            If (FirstSpaceIndex = 2 And (IsNumeric(Mid(DecalAscLn, 3, 1)) Or (Mid(DecalAscLn, 3, 1) = "-"))) Or (IsNumeric(Mid(DecalAscLn, 2, 1))) Or (Mid(DecalAscLn, 2, 1) = "-") Then
                
                LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
                PinNo = Mid(DecalAscLn, LastSpaceIndex + 1)
                
                tCount = tCount + 1
                
                    TempRow = 2
                    Do While CStr(Worksheets("Template").Cells(TempRow, 2).Value) <> PinNo
                        If Worksheets("Template").Cells(TempRow, 2).Value = vbNullString Then
                            PadDefs(PinNo, StartCol + 7) = PinNo
                            GoTo ExitLoop
                        End If
                        TempRow = TempRow + 1
                    Loop
                    If IsNumeric(PinNo) Then
                        If PinNo = CStr(FirstPin) Then FirstPinNo = Worksheets("Template").Cells(TempRow, 7)
                        If PinNo = CStr(LastPin) Then LastPinNo = Worksheets("Template").Cells(TempRow, 7)
                        PinNo = Worksheets("Template").Cells(TempRow, 7)
                    Else
                        If PinNo = FirstPin Then FirstPinNo = tCount
                        If PinNo = LastPin Then LastPinNo = tCount
                        PinNo = tCount
                    End If
                    PadDefs(PinNo, StartCol + 7) = Worksheets("Template").Cells(TempRow, 2).Value

ExitLoop:
                
                If FirstSpaceIndex = 2 Then
                    NextSpaceIndex = InStr(3, DecalAscLn, Space(1))
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                    NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                    PinX = Mid(DecalAscLn, 3, NextSpaceIndex - 3)
                    If PinNo = 1 Then Pin1X = PinX
                Else
                    NextSpaceIndex = InStr(2, DecalAscLn, Space(1))
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                    NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                    PinX = Mid(DecalAscLn, 2, NextSpaceIndex - ExtraSpaces - 2)
                End If
                PinY = Mid(DecalAscLn, NextSpaceIndex + 1, InStr(NextSpaceIndex + 1, DecalAscLn, Space(1)) - NextSpaceIndex - 1)
                If PinNo = 1 Then Pin1Y = PinY
                
                PadDefs(PinNo, StartCol + 4) = PinX
                PadDefs(PinNo, StartCol + 5) = PinY
        
            End If
            
        End If
        
        If Left(DecalAscLn, 3) = "PAD" Then
        
        SpaceIndex1 = InStr(1, DecalAscLn, Space(1))
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex1)
        SpaceIndex1 = SpaceIndex1 + ExtraSpaces
        SpaceIndex2 = InStr(SpaceIndex1 + 1, DecalAscLn, Space(1))
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex2)
        SpaceIndex2 = SpaceIndex2 + ExtraSpaces
        
        SpaceIndex2 = InStr(5, DecalAscLn, Space(1))
        Pad = Mid(DecalAscLn, SpaceIndex1 + 1, SpaceIndex2 - SpaceIndex1 - 1)
        
        LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
        DrillSize = Mid(DecalAscLn, LastSpaceIndex + 1)
        
        If DrillSize <> 0 Then IsPTH = True
        
        Row = Row + 1
        'Mounted Side (Top)
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        'Get Pad Shape
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        For i = 1 To 3
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 1 Then PadLayer = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            
            If i = 2 Then PadWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            
            If i = 3 And NextSpaceIndex <> 0 Then
                Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            Else
                Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
            End If
        
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
        
        'Debug.Print "PadLayer = " & PadLayer
        'Debug.Print "PadWidth = " & PadWidth
        'Debug.Print "Shape = " & Shape
        
        If Shape = "R" Or Shape = "S" Then
            If Shape = "R" Then
                Shape = "Round"
            ElseIf Shape = "S" Then
                Shape = "Rectangle"
            End If
            PadHeight = PadWidth
            PadRotation = 0
        ElseIf Shape = "RF" Then
            Shape = "Rectangle"
            For i = 4 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If ExistingFP Then
                    If i = 5 Then PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                Else
                    If i = 4 Then PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                End If
        
        '        If PadRotation = 0 Then
        '            PadRotation = 90
        '        ElseIf PadRotation = 90 Then
        '            PadRotation = 0
        '        End If
                If ExistingFP Then
                    If i = 6 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    If i = 7 And PadHeight = 0 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                Else
                    If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                End If
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
        ElseIf Shape = "OF" Then
            Shape = "Finger"
            For i = 4 To 6
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 4 Then PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If PadRotation = 0 Then
                    PadRotation = 90
                ElseIf PadRotation = 90 Then
                    PadRotation = 0
                End If
                If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 6 And PadHeight = 0 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
        End If
        
        'BuildPadDef
        PadDef = Shape & "," & PadWidth & "," & PadHeight & "," & DrillSize
        
        If Shape = "E" Then PadShape = "Ellipse"
        If Shape = "R" Or Shape = "RF" Or Shape = "S" Then PadShape = "Rect"
        
        If Pad = 0 Then
            For i = 1 To NoOfPads
                If PadDefs(i, StartCol) = vbNullString Then
                    PadDefs(i, StartCol) = Shape
                    PadDefs(i, StartCol + 1) = PadWidth
                    PadDefs(i, StartCol + 2) = PadHeight
                    PadDefs(i, StartCol + 3) = DrillSize
                End If
                If PadDefs(i, StartCol + 6) = vbNullString Then PadDefs(i, StartCol + 6) = PadRotation
            Next i
        Else
            PadDefs(Pad, StartCol) = Shape
            PadDefs(Pad, StartCol + 1) = PadWidth
            PadDefs(Pad, StartCol + 2) = PadHeight
            PadDefs(Pad, StartCol + 3) = DrillSize
            PadDefs(Pad, StartCol + 6) = PadRotation
        End If
        
        'Debug.Print "Pad Rotation = " & PadRotation
        
        'Skip Inner Layers
        Row = Row + 1
        
        'Opposite Side (Bottom)
        Row = Row + 1
        'Bottom
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        DecalAscLn = Worksheets(WorksheetName).Cells(Row, 1).Value
        For i = 1 To 3
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 1 Then PadLayer = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            If i = 2 Then PadWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            If i = 3 And NextSpaceIndex <> 0 Then
                Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            Else
                Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
            End If
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
        
        If Shape = "R" Or Shape = "S" Then
            If Shape = "R" Then Shape = "E"
            PadHeight = PadWidth
            PadRotation = 0
        ElseIf Shape = "RF" Then
            Shape = "R"
            For i = 4 To 6
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
        End If
        
        If Shape = "E" Then PadShape = "Ellipse"
        If Shape = "R" Or Shape = "RF" Or Shape = "S" Then PadShape = "Rect"
        
        End If
        
        Row = Row + 1
        
        If Worksheets(WorksheetName).Cells(Row, 1).Value = vbNullString And Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString Then
            DecalHdrRow = Row + 1
            DecalNo = DecalNo + 1
        End If
        
        PctDone = (Row / AscRows) * 80
        UpdateProgressBarFP PctDone
    
    Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")
    
    'Remove Padding Spaces
    DecalAscLn = RemovePaddingSpaces(DecalAscLn)
    
    Row = 3
    StartCol = 0
    
    NextDecal = True
    
    If Not IsPTH Or Not Chk_UseExisting Then
        Pin1X = 0
        Pin1Y = 0
    End If
    
    Do
    
        If NextDecal Then
            For i = 1 To NoOfPads
                'Based on i we need to determine which pins are on the Left, Right, Top and Bottom for D-shape pad rotation
                If i <= L Then
                    Side = "Left"
                ElseIf i > L And i <= B Then
                    Side = "Bottom"
                ElseIf i > B And i <= r Then
                    Side = "Right"
                ElseIf i > r And i <= t Then
                    Side = "Top"
                End If
                CreatePads PadDefs(i, 0), Val(PadDefs(i, 1)), Val(PadDefs(i, 2)), Val(PadDefs(i, 3)), MMToExcel(Val(PadDefs(i, 4))), MMToExcel(Val(PadDefs(i, 5))), Val(PadDefs(i, 6)), SheetXoffset, SheetYoffset, 1, Dshape, Dlength, Side
                CreatePads PadDefs(i, 0), Val(PadDefs(i, 1)), Val(PadDefs(i, 2)), Val(PadDefs(i, 3)), MMToExcel(Val(PadDefs(i, 4))), MMToExcel(Val(PadDefs(i, 5))), Val(PadDefs(i, 6)), SheetXoffset, SheetYoffsetScaled, ScaleFactor, Dshape, Dlength, Side
    '            If i Mod 2 = 1 Then
'                If i = 1 Or i = NoOfPads Then
'                    AddPinNumber PadDefs(i, 7), MMToExcel(Val(PadDefs(i, 4))), MMToExcel(Val(PadDefs(i, 5))), SheetXoffset, SheetYoffsetScaled, ScaleFactor
'                End If
                
                PctDone = 80 + ((i / NoOfPads) * 20)
                UpdateProgressBarFP PctDone
                
            Next i
            NextDecal = False
            StartCol = StartCol + 4
            
            AddPinNumber PadDefs(FirstPinNo, 7), MMToExcel(Val(PadDefs(FirstPinNo, 4))), MMToExcel(Val(PadDefs(FirstPinNo, 5))), SheetXoffset, SheetYoffsetScaled, ScaleFactor
            AddPinNumber PadDefs(LastPinNo, 7), MMToExcel(Val(PadDefs(LastPinNo, 4))), MMToExcel(Val(PadDefs(LastPinNo, 5))), SheetXoffset, SheetYoffsetScaled, ScaleFactor
            
        End If
    
        PrevDecalAscLn = DecalAscLn
    
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        If DecalAscLn = "REF-DES" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, PrevDecalAscLn, Space(1))
                If i = 1 Then RefDesX = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 2 Then RefDesY = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 7 Then LAYER = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(PrevDecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LAYER = 26 Then
            End If
        End If
        
        If DecalAscLn = "*" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, PrevDecalAscLn, Space(1))
                If i = 1 Then Pin1IdentX = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 2 Then Pin1IdentY = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LAYER = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(PrevDecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LAYER = 26 Then
            End If
        End If
        
        If Left(DecalAscLn, 6) = "CIRCLE" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 3 Then LineWidth = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                If i = 4 Then LAYER = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LAYER = 26 Or LAYER = 27 Then
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                CircleX1 = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
                CircleY1 = Val(Mid(DecalAscLn, LastSpaceIndex + 1))
    '            Debug.Print DecalAscLn
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                CircleX2 = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
                CircleY2 = Val(Mid(DecalAscLn, LastSpaceIndex + 1))
                
                
                CircleDia = Abs(CircleX1 - CircleX2)
                CircleRad = CircleDia / 2
                
                If CircleX1 <= CircleX2 Then
                    CircleX = CircleX1
                Else
                    CircleX = CircleX2
                End If
                
                CreateCircles CDbl(CircleX), CDbl(CircleY1 + CircleRad), CDbl(CircleDia), CDbl(CircleDia), CInt(LAYER), SheetXoffset, SheetYoffset, 1, LineWidth
                CreateCircles CDbl(CircleX), CDbl(CircleY1 + CircleRad), CDbl(CircleDia), CDbl(CircleDia), CInt(LAYER), SheetXoffset, SheetYoffsetScaled, ScaleFactor, LineWidth
    
            End If
        End If
        
        If Left(DecalAscLn, 6) = "CLOSED" Then
        
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 4
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 2 Then NoOfXY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 3 Then LineWidth = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
            LayerNumRef = vbNullString
    '        If LayerNo = 20 Or LayerNo = 25 Then
            If LayerNo = 20 Then
                LayerNumRef = 30
            ElseIf LayerNo = 26 Then
                LayerNumRef = 18
            ElseIf LayerNo = 27 Then
                LayerNumRef = 28
            End If
            
            If LayerNumRef <> vbNullString Then
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                PrevXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                For i = 1 To NoOfXY - 1
                    Row = Row + 1
                    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                    FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                    NextXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                    PrevX = Val(Left(PrevXY, InStr(PrevXY, Space(1)) - 2)) - Pin1X
                    PrevY = Val(Mid(PrevXY, InStr(PrevXY, Space(1)) + 1)) - Pin1Y
                    NextX = Val(Left(NextXY, InStr(NextXY, Space(1)) - 2)) - Pin1X
                    NextY = Val(Mid(NextXY, InStr(NextXY, Space(1)) + 1)) - Pin1Y
                    CreateOutlines CDbl(PrevX), CDbl(PrevY), CDbl(NextX), CDbl(NextY), LayerNo, SheetXoffset, SheetYoffset, 1
                    CreateOutlines CDbl(PrevX), CDbl(PrevY), CDbl(NextX), CDbl(NextY), LayerNo, SheetXoffset, SheetYoffsetScaled, ScaleFactor
                    PrevXY = NextXY
                Next i
            End If
        End If
        
        If Left(DecalAscLn, 4) = "OPEN" Then
        
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 4
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 2 Then LineCount = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 3 Then LineWidth = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
            LayerNumRef = vbNullString
            
            If LayerNo = 26 Then
                LayerNumRef = 18
            ElseIf LayerNo = 27 Then
                LayerNumRef = 28
            End If
            
            If LayerNumRef <> vbNullString Then
                
    'Check for arc within OPEN section lines
                ArcFound = False
                For Line = 1 To LineCount
                    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row + Line, 1).Value)
                    FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                    If FirstSpaceIndex + ExtraSpaces <> InStrRev(DecalAscLn, Space(1)) Then
                        ArcFound = True
                        GoTo CreateArc
                    End If
                Next Line
                     
CreateArc:
                
                If ArcFound Then
                
                    Row = Row + Line
                    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                    
                    PrevSpaceIndex = 0
                    NextSpaceIndex = 0
                    For i = 1 To 6
                        NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                        If i = 3 Then StartAngle = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                        If i = 4 Then SweepAngle = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                        If i = 5 Then LLPX = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                        If i = 6 Then LLPY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                        ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                        NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                        PrevSpaceIndex = NextSpaceIndex
                    Next i
                    
                    ArcRotation = Left(StartAngle, Len(StartAngle) - 1) & "." & Right(StartAngle, 1)
                    SweepAngle = Left(SweepAngle, Len(SweepAngle) - 1) & "." & Right(SweepAngle, 1)
                    URPY = Mid(DecalAscLn, InStrRev(DecalAscLn, Space(1)) + 1)
                    
                    SweepAngle = SweepAngle / 10
                    ArcRotation = ArcRotation
                    
                    Radius = (URPY - LLPY) / 2
                    ArcCenterX = LLPX + Radius
                    ArcCenterY = LLPY + Radius
                    
                    Debug.Print SweepAngle
                    If SweepAngle < 0 Then
'                        SweepAngle = SweepAngle + 180
                        SweepAngle = SweepAngle
                    End If
                    
                    CreateArcs CDbl(LLPX + Radius), CDbl(URPY), CDbl(Radius), CDbl(Radius), ArcRotation, SweepAngle, LayerNo, SheetXoffset, SheetYoffset, 1
                    CreateArcs CDbl(LLPX + Radius), CDbl(URPY), CDbl(Radius), CDbl(Radius), ArcRotation, SweepAngle, LayerNo, SheetXoffset, SheetYoffsetScaled, ScaleFactor
'                    CreateArcs CDbl(LLPX + Radius), CDbl(URPY), CDbl(Radius), CDbl(Radius), SweepAngle, ArcRotation, LayerNo, SheetXoffset, SheetYoffset, 1
'                    CreateArcs CDbl(LLPX + Radius), CDbl(URPY), CDbl(Radius), CDbl(Radius), SweepAngle, ArcRotation, LayerNo, SheetXoffset, SheetYoffsetScaled, ScaleFactor
                    
    '                Row = Row + 1 'Skip SecondXY for arc
                
                Else
                    For Line = 1 To LineCount - 1
    
                        If Line = 1 Then
                            Row = Row + 1
                            DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                            FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                            ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                            FirstXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                            FirstX = Val(Left(FirstXY, InStr(FirstXY, Space(1)) - 2)) - Pin1X
                            FirstY = Val(Mid(FirstXY, InStr(FirstXY, Space(1)) + 1)) - Pin1Y
                        Else
                            FirstX = NextX
                            FirstY = NextY
                        End If
                        
                        Row = Row + 1
                        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                        FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                        ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                        NextXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                        NextX = Val(Left(NextXY, InStr(NextXY, Space(1)) - 2)) - Pin1X
                        NextY = Val(Mid(NextXY, InStr(NextXY, Space(1)) + 1)) - Pin1Y
                        
'                        Debug.Print CDbl(FirstX) & " - " & CDbl(FirstY) & " - " & CDbl(NextX) & " - " & CDbl(NextY) & " - " & LayerNo
                        
                        CreateOutlines CDbl(FirstX), CDbl(FirstY), CDbl(NextX), CDbl(NextY), LayerNo, SheetXoffset, SheetYoffset, 1
                        CreateOutlines CDbl(FirstX), CDbl(FirstY), CDbl(NextX), CDbl(NextY), LayerNo, SheetXoffset, SheetYoffsetScaled, ScaleFactor
                    Next Line
                End If
            End If
        End If
        
        Row = Row + 1
        
        
    If Worksheets(WorksheetName).Cells(Row, 1).Value = vbNullString And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString And Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*") Then
        NextDecal = True
    End If
                      
    Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")

    

End If

ActiveSheet.Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True
ActiveSheet.EnableSelection = xlUnlockedCells

Unload frm_ProgressBarFP

End Function


Function CreatePads(Shape As String, Width As Double, Length As Double, Drill As Double, X As Double, Y As Double, Rotation As Double, OffsetX As Double, OffsetY As Double, ScaleFactor As Double, Dshape As Boolean, Dlength As Double, Side As String)

If Shape = "Round" Then
    If Dshape Then
        Length = Dlength
'        Debug.Print Side
        If Side = "Left" Then
            Rotation = 90
        ElseIf Side = "Bottom" Then
            Rotation = 0
        ElseIf Side = "Right" Then
            Rotation = 270
        ElseIf Side = "Top" Then
            Rotation = 180
        End If
        ActiveSheet.Shapes.AddShape(msoShapeRound2SameRectangle, OffsetX + (X - (MMToExcel(Width) / 2)) * ScaleFactor, ((OffsetY) - Y - (MMToExcel(Length) / 2)) * ScaleFactor, MMToExcel(Width) * ScaleFactor, MMToExcel(Length) * ScaleFactor).Select
        With Selection.ShapeRange
            .Adjustments.Item(1) = 0.5
            .Line.Visible = msoFalse
            .Fill.ForeColor.RGB = RGB(0, 0, 255)
            .Fill.Solid
            .IncrementRotation Rotation
        End With
    
    Else
        ActiveSheet.Shapes.AddShape(msoShapeOval, OffsetX + (X - (MMToExcel(Width) / 2)) * ScaleFactor, ((OffsetY) - Y - (MMToExcel(Length) / 2)) * ScaleFactor, MMToExcel(Width) * ScaleFactor, MMToExcel(Length) * ScaleFactor).Select
        With Selection.ShapeRange
            .Line.Visible = msoFalse
            .Fill.ForeColor.RGB = RGB(0, 0, 255)
            .Fill.Solid
        End With
    End If
ElseIf Shape = "Rectangle" Then
    If Rotation = 0 Then
        TmpWidth = Width
        Width = Length
        Length = TmpWidth
    End If
    ActiveSheet.Shapes.AddShape(msoShapeRectangle, OffsetX + (X - (MMToExcel(Width) / 2)) * ScaleFactor, ((OffsetY) - Y - (MMToExcel(Length) / 2)) * ScaleFactor, MMToExcel(Width) * ScaleFactor, MMToExcel(Length) * ScaleFactor).Select
    With Selection.ShapeRange
        .Line.Visible = msoFalse
        .Fill.ForeColor.RGB = RGB(0, 0, 255)
        .Fill.Solid
    End With
ElseIf Shape = "Finger" Then
    If Rotation = 90 Then
        TmpWidth = Width
        Width = Length
        Length = TmpWidth
    End If
    ActiveSheet.Shapes.AddShape(msoShapeRoundedRectangle, OffsetX + (X - (MMToExcel(Width) / 2)) * ScaleFactor, ((OffsetY) - Y - (MMToExcel(Length) / 2)) * ScaleFactor, MMToExcel(Width) * ScaleFactor, MMToExcel(Length) * ScaleFactor).Select
    With Selection.ShapeRange
        .Adjustments.Item(1) = 0.5
        .Line.Visible = msoFalse
        .Fill.ForeColor.RGB = RGB(0, 0, 255)
        .Fill.Solid
    End With
End If

'Drill
If Drill <> 0 Then
    ActiveSheet.Shapes.AddShape(msoShapeOval, OffsetX + (X - (MMToExcel(Drill) / 2)) * ScaleFactor, ((OffsetY) - Y - (MMToExcel(Drill) / 2)) * ScaleFactor, MMToExcel(Drill) * ScaleFactor, MMToExcel(Drill) * ScaleFactor).Select
    With Selection.ShapeRange
        .Line.Visible = msoFalse
        .Fill.ForeColor.RGB = RGB(0, 0, 0)
        .Fill.Solid
    End With
End If
End Function
Function MMToExcel(Measurement As Double) As Double
MMToExcel = Measurement * 2.66666666666667
End Function

Function CreateOutlines(StartX As Double, StartY As Double, EndX As Double, EndY As Double, LayerNo As Integer, OffsetX As Double, OffsetY As Double, ScaleFactor As Double)
    ActiveSheet.Shapes.AddConnector(msoConnectorStraight, OffsetX + (MMToExcel(StartX)) * ScaleFactor, ((OffsetY) - MMToExcel(StartY)) * ScaleFactor, OffsetX + (MMToExcel(EndX)) * ScaleFactor, ((OffsetY) - MMToExcel(EndY)) * ScaleFactor).Select
    With Selection.ShapeRange
        .ZOrder msoSendToBack
        If LayerNo = 26 Then
            .Line.Weight = 0.5 * ScaleFactor
            .Line.ForeColor.RGB = RGB(192, 192, 192)
        ElseIf LayerNo = 27 Then
            .Line.Weight = 0.5 * ScaleFactor
            .Line.ForeColor.RGB = RGB(255, 173, 91)
        Else
            .Line.Weight = 0.25 * ScaleFactor
            .Line.ForeColor.RGB = RGB(255, 0, 255)
        End If
    End With
'    ActiveSheet.Shapes.AddShape(msoShapeOval, OffsetX + (MMToExcel(StartX)) * ScaleFactor, ((OffsetY / 3) + MMToExcel(StartY)) * ScaleFactor, 0.31, 0.31).Select
'    With Selection.ShapeRange
'        .Line.Visible = msoFalse
'    End With

'    If LayerNo = 26 And ScaleFactor <> 1 Then
'        ActiveSheet.Shapes.AddShape(msoShapeOval, (OffsetX - ((0.5 * ScaleFactor) / 2)) + (MMToExcel(StartX)) * ScaleFactor, (((OffsetY / 3) + MMToExcel(StartY)) * ScaleFactor) - ((0.5 * ScaleFactor) / 2), 5, 5).Select
'        With Selection.ShapeRange
'            .Line.Visible = msoFalse
'            .Fill.ForeColor.RGB = RGB(192, 192, 192)
'        End With
'    ElseIf LayerNo = 27 And ScaleFactor <> 1 Then
'        ActiveSheet.Shapes.AddShape(msoShapeOval, (OffsetX - ((0.5 * ScaleFactor) / 2)) + (MMToExcel(StartX)) * ScaleFactor, (((OffsetY / 3) + MMToExcel(StartY)) * ScaleFactor) - ((0.5 * ScaleFactor) / 2), 5, 5).Select
'        With Selection.ShapeRange
'            .Line.Visible = msoFalse
'            .Fill.ForeColor.RGB = RGB(255, 173, 91)
'        End With
'    ElseIf ScaleFactor <> 1 Then
'        ActiveSheet.Shapes.AddShape(msoShapeOval, (OffsetX - ((0.25 * ScaleFactor) / 2)) + (MMToExcel(StartX)) * ScaleFactor, (((OffsetY / 3) + MMToExcel(StartY)) * ScaleFactor) - ((0.25 * ScaleFactor) / 2), 2.5, 2.5).Select
'        With Selection.ShapeRange
'            .Line.Visible = msoFalse
'            .Fill.ForeColor.RGB = RGB(255, 0, 255)
'        End With
'    End If
End Function

Function CreateCircles(X As Double, Y As Double, Width As Double, Length As Double, LayerNo As Integer, OffsetX As Double, OffsetY As Double, ScaleFactor As Double, LineWidth As Double)
    ActiveSheet.Shapes.AddShape(msoShapeOval, OffsetX + (MMToExcel(X)) * ScaleFactor, ((OffsetY) - MMToExcel(Y)) * ScaleFactor, (MMToExcel(Width)) * ScaleFactor, (MMToExcel(Length)) * ScaleFactor).Select
    With Selection.ShapeRange
        If LayerNo = 26 Then 'Silkscreen
'            Debug.Print LineWidth
'            Debug.Print Width
            .Line.Weight = 0.5 * ScaleFactor
            If CStr(Width) = CStr(LineWidth) Then
                With Selection.ShapeRange.Fill
                    .Visible = msoTrue
                    .ForeColor.RGB = RGB(192, 192, 192)
                    .ForeColor.TintAndShade = 0
                    .Transparency = 0
                    .Solid
                End With
            Else
                .Fill.Visible = msoFalse
            End If
            .Line.ForeColor.RGB = RGB(192, 192, 192)
        ElseIf LayerNo = 27 Then 'Assembly Top
            .Line.Weight = 0.5 * ScaleFactor
            .Fill.Visible = msoFalse
            .Line.ForeColor.RGB = RGB(255, 173, 91)
        Else
            .Line.Weight = 0.25 * ScaleFactor
            .Line.ForeColor.RGB = RGB(255, 0, 255)
        End If
    End With
End Function

Function AddPinNumber(PinNo As String, X As Double, Y As Double, OffsetX As Double, OffsetY As Double, ScaleFactor As Double)
Dim txtBox As TextBox

Set txtBox = ActiveSheet.TextBoxes.Add((OffsetX + X * ScaleFactor) - 25, (((OffsetY) - Y) * ScaleFactor) - 12.5, 50, 25)
With txtBox
    .Text = PinNo
End With

With ActiveSheet.Shapes(txtBox.Name)
    .Line.Visible = msoFalse
    .Fill.Visible = msoFalse
    .TextFrame2.VerticalAnchor = msoAnchorMiddle
    .TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
End With

With txtBox.ShapeRange.TextFrame2.TextRange.Font.Fill
    .Visible = msoTrue
    .ForeColor.ObjectThemeColor = msoThemeColorBackground1
    .ForeColor.TintAndShade = 0
'        .ForeColor.Brightness = 0
    .Transparency = 0
    .Solid
End With

With txtBox.ShapeRange.TextFrame2.TextRange.Font.Line
    .Visible = msoTrue
    .Weight = 0.25
    .ForeColor.ObjectThemeColor = msoThemeColorText1
    .ForeColor.TintAndShade = 0
'        .ForeColor.Brightness = 0
    .Transparency = 0
End With
With txtBox.ShapeRange.TextFrame2.TextRange.Font
    .NameComplexScript = "Arial Black"
    .NameFarEast = "Arial Black"
    .Name = "Arial Black"
    .Size = Round(2 * ScaleFactor, 0)
End With
    
End Function

Function CreateArcs(X As Double, Y As Double, Width As Double, Length As Double, Rotation As Double, SweepAngle As Double, LayerNo As Integer, OffsetX As Double, OffsetY As Double, ScaleFactor As Double)
    ActiveSheet.Shapes.AddShape(msoShapeArc, OffsetX + (MMToExcel(X)) * ScaleFactor, ((OffsetY) - MMToExcel(Y)) * ScaleFactor, (MMToExcel(Width)) * ScaleFactor, (MMToExcel(Length)) * ScaleFactor).Select
    With Selection.ShapeRange
        Debug.Print Rotation
        Debug.Print SweepAngle
        
        Adj1 = -(Rotation + SweepAngle)
'        If Adj1 > 360 Then Adj1 = Adj1 - 360
        
        Adj2 = -Rotation
'        If Adj2 > 360 Then Adj2 = Adj2 - 360

        If Adj1 > Adj2 Then
            .Adjustments.Item(1) = Adj2
            .Adjustments.Item(2) = Adj1
        Else
            .Adjustments.Item(1) = Adj1
            .Adjustments.Item(2) = Adj2
        End If

        If LayerNo = 26 Then
            .Line.Weight = 0.5 * ScaleFactor
            .Line.ForeColor.RGB = RGB(192, 192, 192)
        ElseIf LayerNo = 27 Then
            .Line.Weight = 0.5 * ScaleFactor
            .Line.ForeColor.RGB = RGB(255, 173, 91)
        Else
            .Line.Weight = 0.25 * ScaleFactor
            .Line.ForeColor.RGB = RGB(255, 0, 255)
        End If
    End With
End Function

Sub UpdateProgressBarFP(PctDone As Single)
    With frm_ProgressBarFP

        ' Update the Caption property of the Frame control.
        .Lbl_Percentage.Caption = Format(PctDone, "##") & "% Completed"

        ' Widen the Label control.
        .Lbl_Progress.Width = PctDone * 2

    End With

    ' The DoEvents allows the UserForm to update.
    DoEvents
End Sub



Attribute VB_Name = "Module5"
Function PrepareForCompiling()
On Error Resume Next
ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:="m1llenn1ums4r0s"
ActiveWorkbook.VBProject.References.Remove ThisWorkbook.VBProject.References("dspcb")
Worksheets("Setup").Range("D2") = vbNullString
Worksheets("Setup").Range("D8") = "FALSE"
Worksheets("Setup").Range("D9") = 1.85 'Change to release version
ActiveWorkbook.Save
Debug.Print "XCellCompile"
End Function

Function RemoveDSPCB()
ActiveWorkbook.VBProject.References.Remove ThisWorkbook.VBProject.References("dspcb")
End Function

Function Unprotect()
ActiveWorkbook.Unprotect Password:="m1llenn1ums4r0s"
End Function

Function Protect()
ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:="m1llenn1ums4r0s"
End Function
Sub Find(Control As IRibbonControl)

If IsInternetConnected And CheckDatabaseAccess Then

    If Worksheets("Template").Range("A1") <> vbNullString Then
        Ans = MsgBox("Would you like to find another part which will clear the existing one?", vbYesNo, "ECAD Part Wizard")
        If Ans = vbYes Then
            ResetEPW
            Frm_Find.Show
'            ActiveWorkbook.Close SaveChanges:=False
        Else
            Exit Sub
        End If
    Else
        Frm_Find.Show
    End If
    
Else

    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "ECAD Part Wizard"

End If

End Sub

Function ResetEPW()
'Setup
Worksheets("Setup").Range("B1") = "A"
Worksheets("Setup").Range("B2") = "B"
Worksheets("Setup").Range("B3") = vbNullString
Worksheets("Setup").Range("B4") = "B"
Worksheets("Setup").Range("B5") = vbNullString

Worksheets("Setup").Range("B8") = vbNullString
Worksheets("Setup").Range("B10:B12") = vbNullString
Worksheets("Setup").Range("B14:B19") = vbNullString
Worksheets("Setup").Range("C13") = vbNullString
Worksheets("Setup").Range("D1") = 0
Worksheets("Setup").Range("D2:D3") = vbNullString

Worksheets("Setup").Range("C15:E15") = vbNullString

Worksheets("Setup").Range("B72") = vbNullString
Worksheets("Setup").Range("B91") = "FALSE"
Worksheets("Setup").Range("B92:B93") = vbNullString
Worksheets("Setup").Range("B101") = "FALSE"

Worksheets("Setup").Range("B110") = "None (Box)"

'Original
Sheets("Original").Cells.Clear

'Template
Sheets("Template").Unprotect Password:="m1llenn1ums4r0s"
Sheets("Template").Cells.Clear
Sheets("Template").Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True

'Attributes
Sheets("Attributes").Unprotect Password:="m1llenn1ums4r0s"
Sheets("Attributes").Range("B2:B10") = vbNullString
Sheets("Attributes").Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True
Sheets("Attributes").EnableSelection = xlUnlockedCells

'Symbol(s) Preview
Sheets("Symbol(s) Preview").Unprotect Password:="m1llenn1ums4r0s"
Sheets("Symbol(s) Preview").Cells.Clear
For Each Shp In Sheets("Symbol(s) Preview").Shapes
    If Shp.Type = msoAutoShape Or Shp.Type = msoTextBox Then Shp.Delete
Next Shp
'Sheets("Symbol(s) Preview").Range("A1").Select
Sheets("Symbol(s) Preview").Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True
Sheets("Symbol(s) Preview").EnableSelection = xlUnlockedCells

'Footprint Preview
Sheets("Footprint Preview").Unprotect Password:="m1llenn1ums4r0s"

For Each Shp In Sheets("Footprint Preview").Shapes
    If Shp.Type = msoAutoShape Or Shp.Type = msoTextBox Then Shp.Delete
Next Shp

Sheets("Footprint Preview").Range("A1") = vbNullString
Sheets("Footprint Preview").Range("B11") = 2

Sheets("Footprint Preview").Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True
Sheets("Footprint Preview").EnableSelection = xlUnlockedCells

'FP-N
Sheets("FP-N").Cells.ClearContents
'FP-L
Sheets("FP-L").Cells.ClearContents
'FP-M
Sheets("FP-M").Cells.ClearContents

End Function


Function GetPart(partID As Long, manufPartNo As String)

Dim result As String
Dim myURL As String
Dim oReq As Object
Dim strArray() As String
Dim strArray2() As String
Dim starRating As Integer
Dim starLimit As Integer
starLimit = 2

Unload Frm_Find

Frm_PleaseWait.Show vbModeless
Frm_PleaseWait.Repaint

'partID = Cbo_MPN.Column(0)
'ManufPartNo = UCase(Cbo_MPN.Column(1))
manufPartNo = Replace(manufPartNo, "\", "_")
manufPartNo = Replace(manufPartNo, "/", "_")
manufPartNo = Replace(manufPartNo, ":", "_")
manufPartNo = Replace(manufPartNo, "*", "_")
manufPartNo = Replace(manufPartNo, "?", "_")
manufPartNo = Replace(manufPartNo, Chr(34), "_")
manufPartNo = Replace(manufPartNo, "<", "_")
manufPartNo = Replace(manufPartNo, ">", "_")
manufPartNo = Replace(manufPartNo, "|", "_")

'Base Symbol Name
Worksheets("Setup").Range("B10") = manufPartNo
'Part Type Name
Worksheets("Setup").Range("B18") = manufPartNo

Set oReq = CreateObject("MSXML2.XMLHTTP")

RndNo = RandomNumbers(1, 1000000)

designerID = GetSetting("EPW", "User Details", "DesignerID", "")
url = GetSetting("EPW", "Settings", "URL", "")

myURL = url & "/q/partDetails.php?partID=" & partID & "&did=" & designerID & "&dataFormat=2" & "&t=" & RndNo
'Debug.Print myURL
oReq.Open "GET", myURL, False, "epwRead", "libraryC4rd"
oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
oReq.send
result = oReq.responseText

Set oReq = Nothing

If Left(result, 6) = "Error:" Then
    MsgBox result, vbCritical, "ECAD Part Wizard"
    Exit Function
End If

strArray = Split(result, vbLf)
If UBound(strArray) <> 0 Then

    Worksheets("Attributes").Unprotect Password:="m1llenn1ums4r0s"

    PinRow = 1
    For i = 0 To UBound(strArray) - 1
        ResponseTxt = Replace(strArray(i), vbCr, vbNullString)
        ResponseTxt = Replace(ResponseTxt, vbLf, vbNullString)
        ResponseTxt = Replace(ResponseTxt, vbCrLf, vbNullString)
        
        If Left(ResponseTxt, 3) = "ID," Then
            Worksheets("Setup").Range("D3") = Mid(ResponseTxt, 4)
        ElseIf Left(ResponseTxt, 14) = "RS_PartNumber," Then
            Worksheets("Attributes").Range("B2") = Mid(ResponseTxt, 15)
        ElseIf Left(ResponseTxt, 11) = "Confidence," Then
            starRating = CInt(Mid(ResponseTxt, 12))
        ElseIf Left(ResponseTxt, 12) = "PackageType," Then
            pkgType = Mid(ResponseTxt, 13)
        ElseIf Left(ResponseTxt, 19) = "RS_OtherPartNumber," Then
            Worksheets("Attributes").Range("B10") = Mid(ResponseTxt, 20)
        ElseIf Left(ResponseTxt, 18) = "Allied_PartNumber," Then
            Worksheets("Attributes").Range("B8") = Mid(ResponseTxt, 19)
        ElseIf Left(ResponseTxt, 13) = "Manufacturer," Then
            Worksheets("Attributes").Range("B3") = Mid(ResponseTxt, 14)
        ElseIf Left(ResponseTxt, 11) = "PartNumber," Then
            Worksheets("Attributes").Range("B4") = Mid(ResponseTxt, 12)
        ElseIf Left(ResponseTxt, 12) = "Description," Then
            Worksheets("Attributes").Range("B5") = URLDecode(Mid(ResponseTxt, 13))
        ElseIf Left(ResponseTxt, 13) = "DatasheetURL," Then
            Worksheets("Attributes").Hyperlinks.Add Worksheets("Attributes").Range("B6"), Mid(ResponseTxt, 14)
        ElseIf Left(ResponseTxt, 7) = "Height," Then
            CommaI = InStr(8, ResponseTxt, ",")
            Worksheets("Attributes").Range("B7") = Mid(ResponseTxt, CommaI + 1)
        ElseIf Left(ResponseTxt, 19) = "RS_OtherPartNumber," Then
            Worksheets("Attributes").Range("B10") = Mid(ResponseTxt, 20)
        ElseIf Left(ResponseTxt, 9) = "PinCount," Then
            Worksheets("Setup").Range("B14") = Mid(ResponseTxt, 10)
        ElseIf Left(ResponseTxt, 12) = "PartVersion," Then
            prtVer = Mid(ResponseTxt, 13)
        ElseIf Left(ResponseTxt, 15) = "PackageVersion," Then
            PkgVer = Mid(ResponseTxt, 16)
        ElseIf Left(ResponseTxt, 20) = "ReferenceDesignator," Then
            Worksheets("Setup").Range("C17") = Mid(ResponseTxt, 21)
        ElseIf Left(ResponseTxt, 16) = "Top/Bottom Pins," Then
            Worksheets("Setup").Range("B92") = Mid(ResponseTxt, 17, Len(ResponseTxt) - 17)
        ElseIf Left(ResponseTxt, 16) = "Left/Right Pins," Then
            Worksheets("Setup").Range("B93") = Mid(ResponseTxt, 17, Len(ResponseTxt) - 17)
        ElseIf Left(ResponseTxt, 15) = "Number of Rows," Then
            Worksheets("Setup").Range("B72") = Mid(ResponseTxt, 16, Len(ResponseTxt) - 16)
        End If
        
        If Left(ResponseTxt, 10) = "Pin Detail" Then
            Tab1 = InStr(12, ResponseTxt, vbTab)
            Worksheets("Original").Cells(PinRow, 1) = Mid(ResponseTxt, 12, Tab1 - 12)
            Tab2 = InStr(Tab1 + 1, ResponseTxt, vbTab)
            Worksheets("Original").Cells(PinRow, 2) = Mid(ResponseTxt, Tab1 + 1, Tab2 - Tab1 - 1)
            Tab3 = InStr(Tab2 + 1, ResponseTxt, vbTab)
            Worksheets("Original").Cells(PinRow, 3) = Mid(ResponseTxt, Tab2 + 1, Tab3 - Tab2 - 1)
            Tab4 = InStr(Tab3 + 1, ResponseTxt, vbTab)
            Worksheets("Original").Cells(PinRow, 4) = Mid(ResponseTxt, Tab3 + 1, Tab4 - Tab3 - 1)
            Worksheets("Original").Cells(PinRow, 5) = Mid(ResponseTxt, Tab4 + 1)
            PinRow = PinRow + 1
        End If
        
    Next
    
    If pkgType = "SON" Then Worksheets("Setup").Range("B72") = 2
    
    If Worksheets("Setup").Range("B72") = 2 Then
        If Worksheets("Setup").Range("B96") <> 0 Then
            PinsLR = CInt(Worksheets("Setup").Range("B14")) - 1
        Else
           PinsLR = CInt(Worksheets("Setup").Range("B14"))
        End If
        Worksheets("Setup").Range("B93") = PinsLR / 2
        
    End If

    Worksheets("Attributes").Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True
    Worksheets("Setup").Range("D1") = prtVer & "." & PkgVer

End If

If InStr(result, "Footprint(Nominal):") = 0 Or InStr(result, "Pin Detail") = 0 Or InStr(result, "<pre>Error: ") <> 0 Then
    Unload Frm_PleaseWait
    MsgBox "There was a problem with downloading, please submit a bug against this Part." & vbCrLf & vbCrLf & "Thank you.", vbCritical, "ECAD Part Wizard"
    Submit_Bug
    Exit Function
Else
    FootprintData = Mid(result, InStr(result, "Footprint(Nominal):"))
End If


manufPartNo = Worksheets("Attributes").Range("B4")
manufPartNo = Replace(manufPartNo, "\", "_")
manufPartNo = Replace(manufPartNo, "/", "_")
manufPartNo = Replace(manufPartNo, ":", "_")
manufPartNo = Replace(manufPartNo, "*", "_")
manufPartNo = Replace(manufPartNo, "?", "_")
manufPartNo = Replace(manufPartNo, Chr(34), "_")
manufPartNo = Replace(manufPartNo, "<", "_")
manufPartNo = Replace(manufPartNo, ">", "_")
manufPartNo = Replace(manufPartNo, "|", "_")

'Base Symbol Name
Worksheets("Setup").Range("B10") = manufPartNo
'Part Type Name
Worksheets("Setup").Range("B18") = manufPartNo


Worksheets("Template").Unprotect Password:="m1llenn1ums4r0s"
ApplyPinsTemplate True

Row = 1
While Worksheets("Original").Cells(Row, 1) <> vbNullString
    Worksheets("Template").Cells(Row + 1, 1) = "Fracture-A" 'Fracture
'    Worksheets("Template").Cells(Row + 1, 4) = Worksheets("Original").Cells(Row, 3) 'Pin Type
'    Worksheets("Template").Cells(Row + 1, 6) = Worksheets("Original").Cells(Row, 4) 'Bank
'    Worksheets("Template").Cells(Row + 1, 8) = Worksheets("Original").Cells(Row, 5) 'AlphaNumSort
    Worksheets("Template").Cells(Row + 1, 9) = 1 'GateSort
'    Worksheets("Original").Cells(Row, 3) = vbNullString
    Row = Row + 1
Wend

SortTemplate
AutoAssignPinSide False


Worksheets("Setup").Cells(102, 2) = "TRUE"

Worksheets("Template").Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True

strArray = Split(FootprintData, "</pre>")
If UBound(strArray) <> 0 Then

    For i = 0 To UBound(strArray) - 1
        ResponseTxt = strArray(i)
'        Debug.Print ResponseTxt
        If InStr(ResponseTxt, "Footprint(Nominal):") <> 0 Then
            fpSheet = "FP-N"
            ResponseTxt = Mid(ResponseTxt, InStr(ResponseTxt, "Footprint(Nominal):") + 26)
            Worksheets(fpSheet).Range("A2") = "*PADS-LIBRARY-PCB-DECALS-V9*"
        ElseIf InStr(ResponseTxt, "Footprint(Least):") <> 0 Then
            fpSheet = "FP-L"
            ResponseTxt = Mid(ResponseTxt, InStr(ResponseTxt, "Footprint(Least):") + 24)
            Worksheets(fpSheet).Range("A2") = "*PADS-LIBRARY-PCB-DECALS-V9*"
        ElseIf InStr(ResponseTxt, "Footprint(Most):") <> 0 Then
            fpSheet = "FP-M"
            ResponseTxt = Mid(ResponseTxt, InStr(ResponseTxt, "Footprint(Most):") + 23)
            Worksheets(fpSheet).Range("A2") = "*PADS-LIBRARY-PCB-DECALS-V9*"
        End If
        strArray2 = Split(ResponseTxt, vbLf)
        For I2 = 0 To UBound(strArray2)
            If strArray2(I2) <> vbNullString Then
                If I2 = 0 Then
                    SpaceI = InStr(strArray2(I2), Space(1))
                    fpName = Left(strArray2(I2), SpaceI - 1)
                    If fpSheet = "FP-N" Then
                        Worksheets("Setup").Range("C15") = fpName
                        Worksheets("Footprint Preview").Range("A1") = fpName
                    ElseIf fpSheet = "FP-L" Then
                        Worksheets("Setup").Range("D15") = fpName
                    ElseIf fpSheet = "FP-M" Then
                        Worksheets("Setup").Range("E15") = fpName
                    End If
                End If
                Worksheets(fpSheet).Range("A" & I2 + 4) = strArray2(I2)
            End If
        Next
    Next
End If

ActiveWorkbook.Worksheets("Template").Unprotect Password:="m1llenn1ums4r0s"
ActiveWorkbook.Worksheets("Template").Cells(1, Sheets("Setup").Range("B5").Value + 1).Locked = False
ActiveWorkbook.Worksheets("Template").Cells(1, Sheets("Setup").Range("B5").Value + 1).Select
ActiveWorkbook.Worksheets("Template").Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True

PostModelData 3, vbNullString, vbNullString, vbNullString

If starRating < starLimit Then
    MsgBox "Warning - User contributed part!" & vbCrLf & "Please take extra care when checking.", vbExclamation, "ECAD Part Wizard"
End If

Unload Frm_PleaseWait

End Function


Function TestBuildEPW()
BuildEPW "00000", False, vbNullString
End Function

Function BuildEPW(Content As String, File As Boolean, WebPrefix As String)
Dim result As String
Dim myURL As String
Dim oReq As Object
Dim strArray() As String
Dim strArray2() As String

On Error Resume Next

Set oReq = CreateObject("MSXML2.XMLHTTP")

RndNo = RandomNumbers(1, 1000000)
result = vbNullString

designerID = GetSetting("EPW", "User Details", "DesignerID", "")

If Not File Then
    url = GetSetting("EPW", "Settings", "URL", "")
    myURL = url & "/q/partDetails.php?partID=" & Content & "&did=" & designerID & "&dataFormat=2" & "&t=" & RndNo
    
    oReq.setTimeouts 5000, 5000, 5000, 5000
    oReq.Open "GET", myURL, False, "epwRead", "libraryC4rd"
    oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    oReq.send
    result = oReq.responseText
    
    If InStr(result, "Status,Released") = 0 Then
        MsgBox "This part is almost ready. You have 3 options:" & vbCrLf & vbCrLf & "1. Find Alternate" & vbCrLf & "2. Online Build" & vbCrLf & "3. Request we build it for FREE!", vbInformation, "Find Alternate, Build or Request"
        If WebPrefix = vbNullString Then
            ThisWorkbook.FollowHyperlink Address:="http://www.componentsearchengine.com/partRequest.html?partID=" & Content, NewWindow:=True
        Else
            ThisWorkbook.FollowHyperlink Address:="http://" & WebPrefix & ".componentsearchengine.com/partRequest.html?partID=" & Content, NewWindow:=True
        End If
        Exit Function
    ElseIf InStr(result, "Internal Server Error") <> 0 Or result = vbNullString Then
        result = vbNullString
        myURL = "http://www.samacsys.com/EPWS/" & Content & ".epw?&t=" & RndNo
        oReq.Open "GET", myURL, False
        oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
        oReq.send
        result = oReq.responseText
    End If
    
    If Left(result, 6) = "Error:" Then
        MsgBox result, vbCritical, "SamacSys - EPW"
        Exit Function
    End If
    
    If result = vbNullString Then Exit Function
    
Else
    myURL = Content
    oReq.Open "GET", myURL, False
    oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    oReq.send
    result = oReq.responseText
End If

FootprintData = Mid(result, InStr(result, "Footprint(Nominal):"))

strArray = Split(result, vbLf)
If UBound(strArray) <> 0 Then

    Worksheets("Attributes").Unprotect Password:="m1llenn1ums4r0s"

    PinRow = 1
    For i = 0 To UBound(strArray) - 1
        ResponseTxt = Replace(strArray(i), vbCr, vbNullString)
        ResponseTxt = Replace(ResponseTxt, vbLf, vbNullString)
        ResponseTxt = Replace(ResponseTxt, vbCrLf, vbNullString)
        
        If Left(ResponseTxt, 3) = "ID," Then
            Worksheets("Setup").Range("D3") = Mid(ResponseTxt, 4)
        ElseIf Left(ResponseTxt, 14) = "RS_PartNumber," Then
            Worksheets("Attributes").Range("B2") = Mid(ResponseTxt, 15)
        ElseIf Left(ResponseTxt, 19) = "RS_OtherPartNumber," Then
            Worksheets("Attributes").Range("B10") = Mid(ResponseTxt, 20)
        ElseIf Left(ResponseTxt, 18) = "Allied_PartNumber," Then
            Worksheets("Attributes").Range("B8") = Mid(ResponseTxt, 19)
        ElseIf Left(ResponseTxt, 13) = "Manufacturer," Then
            Worksheets("Attributes").Range("B3") = Mid(ResponseTxt, 14)
        ElseIf Left(ResponseTxt, 11) = "PartNumber," Then
            Worksheets("Attributes").Range("B4") = Mid(ResponseTxt, 12)
        ElseIf Left(ResponseTxt, 12) = "Description," Then
            Worksheets("Attributes").Range("B5") = URLDecode(Mid(ResponseTxt, 13))
        ElseIf Left(ResponseTxt, 13) = "DatasheetURL," Then
            Worksheets("Attributes").Hyperlinks.Add Worksheets("Attributes").Range("B6"), Mid(ResponseTxt, 14)
        ElseIf Left(ResponseTxt, 7) = "Height," Then
            CommaI = InStr(8, ResponseTxt, ",")
            Worksheets("Attributes").Range("B7") = Mid(ResponseTxt, CommaI + 1)
        ElseIf Left(ResponseTxt, 19) = "RS_OtherPartNumber," Then
            Worksheets("Attributes").Range("B10") = Mid(ResponseTxt, 20)
        ElseIf Left(ResponseTxt, 9) = "PinCount," Then
            Worksheets("Setup").Range("B14") = Mid(ResponseTxt, 10)
        ElseIf Left(ResponseTxt, 12) = "PartVersion," Then
            prtVer = Mid(ResponseTxt, 13)
        ElseIf Left(ResponseTxt, 15) = "PackageVersion," Then
            PkgVer = Mid(ResponseTxt, 16)
        ElseIf Left(ResponseTxt, 20) = "ReferenceDesignator," Then
            Worksheets("Setup").Range("C17") = Mid(ResponseTxt, 21)
        ElseIf Left(ResponseTxt, 16) = "Top/Bottom Pins," Then
            Worksheets("Setup").Range("B92") = Mid(ResponseTxt, 17, Len(ResponseTxt) - 17)
        ElseIf Left(ResponseTxt, 16) = "Left/Right Pins," Then
            Worksheets("Setup").Range("B93") = Mid(ResponseTxt, 17, Len(ResponseTxt) - 17)
        ElseIf Left(ResponseTxt, 15) = "Number of Rows," Then
            Worksheets("Setup").Range("B72") = Mid(ResponseTxt, 16, Len(ResponseTxt) - 16)
        End If
        
        If Left(ResponseTxt, 10) = "Pin Detail" Then
            Tab1 = InStr(12, ResponseTxt, vbTab)
            Worksheets("Original").Cells(PinRow, 1) = Mid(ResponseTxt, 12, Tab1 - 12)
            Tab2 = InStr(Tab1 + 1, ResponseTxt, vbTab)
            Worksheets("Original").Cells(PinRow, 2) = Mid(ResponseTxt, Tab1 + 1, Tab2 - Tab1 - 1)
            Tab3 = InStr(Tab2 + 1, ResponseTxt, vbTab)
            Worksheets("Original").Cells(PinRow, 3) = Mid(ResponseTxt, Tab2 + 1, Tab3 - Tab2 - 1)
            Tab4 = InStr(Tab3 + 1, ResponseTxt, vbTab)
            Worksheets("Original").Cells(PinRow, 4) = Mid(ResponseTxt, Tab3 + 1, Tab4 - Tab3 - 1)
            Worksheets("Original").Cells(PinRow, 5) = Mid(ResponseTxt, Tab4 + 1)
            PinRow = PinRow + 1
        End If
        
    Next
    
    If Worksheets("Setup").Range("B72") = 2 Then Worksheets("Setup").Range("B93") = CInt(Worksheets("Setup").Range("B14") / 2)

    Worksheets("Attributes").Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True
    Worksheets("Setup").Range("D1") = prtVer & "." & PkgVer

End If

manufPartNo = Worksheets("Attributes").Range("B4")
manufPartNo = Replace(manufPartNo, "\", "_")
manufPartNo = Replace(manufPartNo, "/", "_")
manufPartNo = Replace(manufPartNo, ":", "_")
manufPartNo = Replace(manufPartNo, "*", "_")
manufPartNo = Replace(manufPartNo, "?", "_")
manufPartNo = Replace(manufPartNo, Chr(34), "_")
manufPartNo = Replace(manufPartNo, "<", "_")
manufPartNo = Replace(manufPartNo, ">", "_")
manufPartNo = Replace(manufPartNo, "|", "_")

'Base Symbol Name
Worksheets("Setup").Range("B10") = manufPartNo
'Part Type Name
Worksheets("Setup").Range("B18") = manufPartNo


Worksheets("Template").Unprotect Password:="m1llenn1ums4r0s"
ApplyPinsTemplate True



Row = 1
While Worksheets("Original").Cells(Row, 1) <> vbNullString
    Worksheets("Template").Cells(Row + 1, 1) = "Fracture-A" 'Fracture
    Worksheets("Template").Cells(Row + 1, 4) = Worksheets("Original").Cells(Row, 3) 'Pin Type
    Worksheets("Template").Cells(Row + 1, 6) = Worksheets("Original").Cells(Row, 4) 'Bank
    Worksheets("Template").Cells(Row + 1, 8) = Worksheets("Original").Cells(Row, 5) 'AlphaNumSort
    Worksheets("Template").Cells(Row + 1, 9) = 1 'GateSort
'    Worksheets("Original").Cells(Row, 3) = vbNullString
    Row = Row + 1
Wend

SortTemplate
AutoAssignPinSide False


Worksheets("Setup").Cells(102, 2) = "TRUE"

Worksheets("Template").Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True

strArray = Split(FootprintData, "</pre>")
If UBound(strArray) <> 0 Then

    For i = 0 To UBound(strArray) - 1
        ResponseTxt = strArray(i)
'        Debug.Print ResponseTxt
        If InStr(ResponseTxt, "Footprint(Nominal):") <> 0 Then
            fpSheet = "FP-N"
            ResponseTxt = Mid(ResponseTxt, InStr(ResponseTxt, "Footprint(Nominal):") + 26)
            Worksheets(fpSheet).Range("A2") = "*PADS-LIBRARY-PCB-DECALS-V9*"
        ElseIf InStr(ResponseTxt, "Footprint(Least):") <> 0 Then
            fpSheet = "FP-L"
            ResponseTxt = Mid(ResponseTxt, InStr(ResponseTxt, "Footprint(Least):") + 24)
            Worksheets(fpSheet).Range("A2") = "*PADS-LIBRARY-PCB-DECALS-V9*"
        ElseIf InStr(ResponseTxt, "Footprint(Most):") <> 0 Then
            fpSheet = "FP-M"
            ResponseTxt = Mid(ResponseTxt, InStr(ResponseTxt, "Footprint(Most):") + 23)
            Worksheets(fpSheet).Range("A2") = "*PADS-LIBRARY-PCB-DECALS-V9*"
        End If
        strArray2 = Split(ResponseTxt, vbLf)
        For I2 = 0 To UBound(strArray2)
            If strArray2(I2) <> vbNullString Then
                If I2 = 0 Then
                    SpaceI = InStr(strArray2(I2), Space(1))
                    fpName = Left(strArray2(I2), SpaceI - 1)
                    If fpSheet = "FP-N" Then
                        Worksheets("Setup").Range("C15") = fpName
                        Worksheets("Footprint Preview").Range("A1") = fpName
                    ElseIf fpSheet = "FP-L" Then
                        Worksheets("Setup").Range("D15") = fpName
                    ElseIf fpSheet = "FP-M" Then
                        Worksheets("Setup").Range("E15") = fpName
                    End If
                End If
                Worksheets(fpSheet).Range("A" & I2 + 4) = strArray2(I2)
            End If
        Next
    Next
End If

ActiveWorkbook.Worksheets("Template").Unprotect Password:="m1llenn1ums4r0s"
ActiveWorkbook.Worksheets("Template").Cells(1, Sheets("Setup").Range("B5").Value + 1).Locked = False
ActiveWorkbook.Worksheets("Template").Cells(1, Sheets("Setup").Range("B5").Value + 1).Select
ActiveWorkbook.Worksheets("Template").Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True

PostModelData 3, vbNullString, vbNullString, vbNullString

Set oReq = Nothing

End Function

Public Function RandomNumbers(Lowest As Long, Highest As Long, _
Optional Decimals As Integer)
   Application.Volatile  'Remove this line to "freeze" the numbers
   If IsMissing(Decimals) Or Decimals = 0 Then
      Randomize
      RandomNumbers = Int((Highest + 1 - Lowest) * Rnd + Lowest)
   Else
      Randomize
      RandomNumbers = Round((Highest - Lowest) * Rnd + Lowest, Decimals)
   End If
End Function

Function ExportDS(File As String)

Dim GateCnt As Integer
Dim GateNo As Integer
Dim SYMname As String
Dim SymbolFile As String
Dim BoxWidthLR As Double
Dim BoxWidthTB As Double
Dim PinPitch As Double
Dim PadDefs() As String
Dim DecalAscLn As String
Dim SpaceIndex As Integer
Dim NextSpaceIndex As Integer
Dim FirstSpaceIndex As Integer
Dim PrevSpaceIndex As Integer
Dim SpaceIndex1 As Integer
Dim SpaceIndex2 As Integer
Dim SpaceIndex3 As Integer
Dim PrevDecalAscLn As String
Dim NextDecal As Boolean
Dim DecalNo As Integer
Dim IsPTH As Boolean
Dim tbl As ListObject
Dim SkipPadDef As Boolean
Dim IsDshape As Boolean

'On Error GoTo OnErrorGetObject

ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Fracture]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(46, 46, 189)
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(192, 143, 46)
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(209, 50, 50)
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(45, 187, 45)
With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With


IsDshape = False
PinLength = 200
PCBdecal = Worksheets("Setup").Range("C15")
RefDesPrefix = Worksheets("Setup").Range("C17")
PinPitch = 100
SYMname = Worksheets("Setup").Range("B10")
PTName = Worksheets("Setup").Range("B18")

LeftPinCnt = 0
RightPinCnt = 0
TopPinCnt = 0
BotPinCnt = 0
LeftPinLen = 0
RightPinLen = 0
TopPinLen = 0
BotPinLen = 0
GateCnt = 0
r = 2
PrevGate = Sheets("Template").Cells(r, 1).Value

SymbolFile = File
Open SymbolFile For Output As #1

'If Chk_UseExisting Then
If Right(PCBdecal, 1) = "N" Or Right(PCBdecal, 3) = "N-D" Then
    WorksheetName = "FP-N"
ElseIf Right(PCBdecal, 1) = "L" Or Right(PCBdecal, 3) = "L-D" Then
    WorksheetName = "FP-L"
ElseIf Right(PCBdecal, 1) = "M" Or Right(PCBdecal, 3) = "M-D" Then
    WorksheetName = "FP-M"
Else
    WorksheetName = "FP-N"
End If
'Else
'    WorksheetName = "PFW"
'End If

If Right(PCBdecal, 3) = "N-D" Or Right(PCBdecal, 3) = "L-D" Or Right(PCBdecal, 3) = "M-D" Then IsDshape = True


IsPTH = False

LastDotIndex = InStrRev(Worksheets(WorksheetName).Cells(1, 1).Value, ".")
DesignSparkFile = Left(Worksheets(WorksheetName).Cells(1, 1).Value, LastDotIndex) & "dsl"

Print #1, "DESIGNSPARK_INTERMEDIATE_ASCII"
Print #1,
Print #1, "(asciiHeader"


'Retrieve Padstack Information from PADS Decal ASCII to derive padStyleDefs
PadDefLst = ","
DecalHdrRow = 4
DecalNo = 1
Row = 4
StartCol = 0

If Not IsDshape Then

    Do
    
    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
    
    'Debug.Print Worksheets(WorksheetName).Cells(Row, 1).Value
    'Retrieve number of different padstack definitions
    If Row = DecalHdrRow Then
    'SpaceIndex = SkipSpaces(DecalAscLn, 1)
    
    SpaceIndex = InStr(1, DecalAscLn, Space(1))
    
    ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
    SpaceIndex = SpaceIndex + ExtraSpaces
    
    DecalName = Left(DecalAscLn, SpaceIndex - 1 - ExtraSpaces)
'    Debug.Print DecalName
    
    If DecalNo = 1 Then
        For i = 1 To 8
        If i = 1 Then units = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
        SpaceIndex = InStr(SpaceIndex + 1, DecalAscLn, Space(1))
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
        SpaceIndex = SpaceIndex + ExtraSpaces
        If i = 7 Then NoOfPads = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
        Next i
        
        If units = "I" Then
            Print #1, vbTab & "(fileUnits MIL)"
        ElseIf units = "M" Then
            Print #1, vbTab & "(fileUnits MM)"
        End If
        Print #1, ")"
        Print #1, "(library Library_1"
    Else
        StartCol = StartCol + 4
    End If
    'Debug.Print NoOfPads

    
    'Debug.Print StartCol
    ReDim Preserve PadDefs(NoOfPads, (DecalNo * 4) - 1)
    
    PadDefs(0, StartCol) = DecalName
    
    
    NoOfPadstacks = Mid(DecalAscLn, SpaceIndex + 1, Len(DecalAscLn) - (InStr(SpaceIndex + 1, DecalAscLn, Space(1))))
    'Debug.Print DecalName
    End If
    
    If Left(DecalAscLn, 1) = "T" Then
        
        FirstSpaceIndex = InStr(DecalAscLn, Space(1))
        
        If (FirstSpaceIndex = 2 And (IsNumeric(Mid(DecalAscLn, 3, 1)) Or (Mid(DecalAscLn, 3, 1) = "-"))) Or (IsNumeric(Mid(DecalAscLn, 2, 1))) Or (Mid(DecalAscLn, 2, 1) = "-") Then
            
            LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
            PinNo = Mid(DecalAscLn, LastSpaceIndex + 1)
            
            If Not IsNumeric(PinNo) Then
                TempRow = 2
                Do While Worksheets("Template").Cells(TempRow, 2).Value <> PinNo Or Worksheets("Template").Cells(TempRow, 2).Value = vbNullString
    '                Debug.Print Worksheets("Template").Cells(TempRow, 2).Value
                    TempRow = TempRow + 1
                Loop
                PinNo = Worksheets("Template").Cells(TempRow, 7)
            End If
            
            If FirstSpaceIndex = 2 Then
                NextSpaceIndex = InStr(3, DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PinX = Mid(DecalAscLn, 3, NextSpaceIndex - 3)
                If PinNo = 1 Then Pin1X = PinX
            Else
                NextSpaceIndex = InStr(2, DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PinX = Mid(DecalAscLn, 2, NextSpaceIndex - ExtraSpaces - 2)
            End If
            PinY = Mid(DecalAscLn, NextSpaceIndex + 1, InStr(NextSpaceIndex + 1, DecalAscLn, Space(1)) - NextSpaceIndex - 1)
            If PinNo = 1 Then Pin1Y = PinY
    '        Debug.Print PinNo
    '        Debug.Print PinX
    '        Debug.Print PinY
            
            PadDefs(PinNo, StartCol + 1) = PinX
            PadDefs(PinNo, StartCol + 2) = PinY
            
        End If
        
    End If
    
    If Left(DecalAscLn, 3) = "PAD" Then
    'DesignSpark Pad Shapes
    'Ellipse (E)
    'Rect (R)
    
    
    SpaceIndex1 = InStr(1, DecalAscLn, Space(1))
    ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex1)
    SpaceIndex1 = SpaceIndex1 + ExtraSpaces
    SpaceIndex2 = InStr(SpaceIndex1 + 1, DecalAscLn, Space(1))
    ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex2)
    SpaceIndex2 = SpaceIndex2 + ExtraSpaces
    
    SpaceIndex2 = InStr(5, DecalAscLn, Space(1))
    Pad = Mid(DecalAscLn, SpaceIndex1 + 1, SpaceIndex2 - SpaceIndex1 - 1)
    'Debug.Print "Pad = " & Pad
    
    LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
    DrillSize = Mid(DecalAscLn, LastSpaceIndex + 1)
    
    If DrillSize <> 0 Then IsPTH = True
    
    'Debug.Print "Drill Size = " & DrillSize
    
    Row = Row + 1
    'Mounted Side (Top)
    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
    'Debug.Print DecalAscLn
    
    'Get Pad Shape
    PrevSpaceIndex = 0
    NextSpaceIndex = 0
    For i = 1 To 3
        NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
        If i = 1 Then PadLayer = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        
        If i = 2 Then PadWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        
        If i = 3 And NextSpaceIndex <> 0 Then
            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        Else
            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
        End If
        
        
        
        
        ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
        NextSpaceIndex = NextSpaceIndex + ExtraSpaces
        PrevSpaceIndex = NextSpaceIndex
    Next i
    
    'Debug.Print "PadLayer = " & PadLayer
    'Debug.Print "PadWidth = " & PadWidth
    'Debug.Print "Shape = " & Shape
    
    If Shape = "R" Or Shape = "S" Then
        If Shape = "R" Then Shape = "E"
        PadHeight = PadWidth
        PadRotation = 0
    ElseIf Shape = "RF" Then
        Shape = "R"
        For i = 4 To 7
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
    '        If Chk_UseExisting Then
                If i = 5 Then
                    PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                End If
                If i = 6 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 7 And PadHeight = 0 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '        Else
    '            If i = 4 Then
    '                PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '            End If
    '            If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '        End If
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
    
        Next i
        
    '    Debug.Print "PadHeight = " & PadHeight
    
    End If
    
    'BuildPadDef
    PadDef = Shape & "W" & PadWidth & "L" & PadHeight & "H" & DrillSize
    
    If Shape = "E" Then PadShape = "Ellipse"
    If Shape = "R" Or Shape = "RF" Or Shape = "S" Then PadShape = "Rect"
    
    
'    Debug.Print PadDefLst
    If InStr(PadDefLst, "," & PadDef & ",") <> 0 Then
        SkipPadDef = True
    Else
        SkipPadDef = False
    End If
    
    If Not SkipPadDef Then
        Print #1, vbTab & "(padStyleDef " & Chr(34) & PadDef & Chr(34)
        Print #1, vbTab & vbTab & "(holeDiam " & DrillSize & ")"
        Print #1, vbTab & vbTab & "(padShape (layerNumRef 1) (padShapeType " & PadShape & ")  (shapeWidth " & PadWidth & ") (shapeHeight " & PadHeight & "))"
    End If
    
    If PadRotation = 0 Then
        PadRotation = 90
    ElseIf PadRotation = 90 Then
        PadRotation = 0
    End If
    
    'Debug.Print DecalNo
    If Pad = 0 Then
        For i = 1 To NoOfPads
            If PadDefs(i, StartCol) = vbNullString Then PadDefs(i, StartCol) = PadDef
            If PadDefs(i, StartCol + 3) = vbNullString Then PadDefs(i, StartCol + 3) = PadRotation
        Next i
    Else
        PadDefs(Pad, StartCol) = PadDef
        PadDefs(Pad, StartCol + 3) = PadRotation
    End If
    
    'Debug.Print "Pad Rotation = " & PadRotation
    
    'Skip Inner Layers
    Row = Row + 1
    
    'Opposite Side (Bottom)
    Row = Row + 1
    'Bottom
    PrevSpaceIndex = 0
    NextSpaceIndex = 0
    DecalAscLn = Worksheets(WorksheetName).Cells(Row, 1).Value
    For i = 1 To 3
        NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
        If i = 1 Then PadLayer = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        If i = 2 Then PadWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        If i = 3 And NextSpaceIndex <> 0 Then
            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        Else
            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
        End If
        ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
        NextSpaceIndex = NextSpaceIndex + ExtraSpaces
        PrevSpaceIndex = NextSpaceIndex
    Next i
    
    If Shape = "R" Or Shape = "S" Then
        If Shape = "R" Then Shape = "E"
        PadHeight = PadWidth
        PadRotation = 0
    ElseIf Shape = "RF" Then
        Shape = "R"
        For i = 4 To 6
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
    End If
    
    If Shape = "E" Then PadShape = "Ellipse"
    If Shape = "R" Or Shape = "RF" Or Shape = "S" Then PadShape = "Rect"
    
    
    If Not SkipPadDef Then
        Print #1, vbTab & vbTab & "(padShape (layerNumRef 16) (padShapeType " & PadShape & ")  (shapeWidth " & PadWidth & ") (shapeHeight " & PadHeight & "))"
        Print #1, vbTab & ")"
        PadDefLst = PadDefLst & PadDef & ","
    End If
    
    End If
    
    Row = Row + 1
    
    If Worksheets(WorksheetName).Cells(Row, 1).Value = vbNullString And Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString Then
        DecalHdrRow = Row + 1
        DecalNo = DecalNo + 1
    End If
    
    'Debug.Print Worksheets(WorksheetName).Cells(Row + 1, 1).Value
    
    Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")
    
    
    Print #1, vbTab & "(textStyleDef " & Chr(34) & "Normal" & Chr(34)
    Print #1, vbTab & vbTab & "(font"
    Print #1, vbTab & vbTab & vbTab & "(fontType Stroke)"
    Print #1, vbTab & vbTab & vbTab & "(fontFace " & Chr(34) & "Helvetica" & Chr(34) & ")"
    If units = "I" Then
        Print #1, vbTab & vbTab & vbTab & "(fontHeight 50)"
        Print #1, vbTab & vbTab & vbTab & "(strokeWidth 5)"
    Else
        Print #1, vbTab & vbTab & vbTab & "(fontHeight 1.27)"
        Print #1, vbTab & vbTab & vbTab & "(strokeWidth 0.127)"
    End If
    Print #1, vbTab & vbTab & ")"
    Print #1, vbTab & ")"
    
    'Remove Padding Spaces
    DecalAscLn = RemovePaddingSpaces(DecalAscLn)
    
    Row = 3
    StartCol = 0
    
    NextDecal = True
    
    If Not IsPTH Or Not Chk_UseExisting Then
        Pin1X = 0
        Pin1Y = 0
    End If
    
    Do
    
        
    
        If NextDecal Then
            Print #1, vbTab & "(patternDef " & Chr(34) & PadDefs(0, StartCol) & Chr(34) & " (originalName " & Chr(34) & PadDefs(0, StartCol) & Chr(34) & ")"
            Print #1, vbTab & vbTab & "(multiLayer"
        
            For i = 1 To NoOfPads
                Print #1, vbTab & vbTab & vbTab & "(pad (padNum " & i & ") (padStyleRef " & PadDefs(i, StartCol) & ") (pt " & CDbl(PadDefs(i, StartCol + 1)) - Pin1X & ", " & CDbl(PadDefs(i, StartCol + 2)) - Pin1Y & ") (rotation " & PadDefs(i, StartCol + 3) & "))"
            '    Debug.Print PadDefs(i, 0)
            Next i
            Print #1, vbTab & vbTab & ")"
            NextDecal = False
            StartCol = StartCol + 4
        End If
    
    
        PrevDecalAscLn = DecalAscLn
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        If DecalAscLn = "REF-DES" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, PrevDecalAscLn, Space(1))
                If i = 1 Then RefDesX = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 2 Then RefDesY = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 7 Then LAYER = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(PrevDecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LAYER = 26 Then
                Print #1, vbTab & vbTab & "(layerContents (layerNumRef 18)"
                Print #1, vbTab & vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt " & RefDesX - Pin1X & ", " & RefDesY - Pin1Y & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & ") (isVisible True))"
                Print #1, vbTab & vbTab & ")"
            End If
        End If
        
        If DecalAscLn = "*" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, PrevDecalAscLn, Space(1))
                If i = 1 Then Pin1IdentX = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 2 Then Pin1IdentY = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LAYER = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(PrevDecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LAYER = 26 Then
                Print #1, vbTab & vbTab & "(layerContents (layerNumRef 18)"
                Print #1, vbTab & vbTab & vbTab & "(arc (pt " & Pin1IdentX - Pin1X & ", " & Pin1IdentY - Pin1Y & ") (radius 5) (startAngle 0.0) (sweepAngle 0.0) (width 10))"
                Print #1, vbTab & vbTab & ")"
                Print #1, vbTab & vbTab & "(layerContents (layerNumRef 18)"
                Print #1, vbTab & vbTab & vbTab & "(arc (pt " & Pin1IdentX - Pin1X & ", " & Pin1IdentY - Pin1Y & ") (radius 5) (startAngle 180.0) (sweepAngle 180.0) (width 10))"
                Print #1, vbTab & vbTab & ")"
            End If
        End If
        
        If Left(DecalAscLn, 6) = "CIRCLE" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LAYER = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LAYER = 26 Then
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                CircleX1 = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
                CircleY1 = Mid(DecalAscLn, LastSpaceIndex + 1)
    '            Debug.Print DecalAscLn
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                CircleX2 = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
                CircleY2 = Mid(DecalAscLn, LastSpaceIndex + 1)
    '            Debug.Print DecalAscLn
                
                CircleRad = (CircleX2 - CircleX1) / 2
    
                Print #1, vbTab & vbTab & "(layerContents (layerNumRef 18)"
                Print #1, vbTab & vbTab & vbTab & "(arc (pt " & CircleX1 + CircleRad - Pin1X & ", " & CircleY1 - Pin1Y & ") (radius " & CircleRad & ") (startAngle 0.0) (sweepAngle 0.0) (width " & LineWidth & "))"
                Print #1, vbTab & vbTab & ")"
                Print #1, vbTab & vbTab & "(layerContents (layerNumRef 18)"
                Print #1, vbTab & vbTab & vbTab & "(arc (pt " & CircleX1 + CircleRad - Pin1X & ", " & CircleY1 - Pin1Y & ") (radius " & CircleRad & ") (startAngle 180.0) (sweepAngle 180.0) (width " & LineWidth & "))"
                Print #1, vbTab & vbTab & ")"
            End If
        End If
        
        If Left(DecalAscLn, 6) = "CLOSED" Then
        
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 4
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 2 Then NoOfXY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
            LayerNumRef = vbNullString
            If LayerNo = 20 Or LayerNo = 25 Then
                LayerNumRef = 30
            ElseIf LayerNo = 26 Then
                LayerNumRef = 18
            ElseIf LayerNo = 27 Then
                LayerNumRef = 28
            End If
            
            If LayerNumRef <> vbNullString Then
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                PrevXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                For i = 1 To NoOfXY - 1
                    Row = Row + 1
                    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                    FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                    NextXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                    PrevX = Left(PrevXY, InStr(PrevXY, Space(1)) - 1) - Pin1X
                    PrevY = Mid(PrevXY, InStr(PrevXY, Space(1)) + 1) - Pin1Y
                    NextX = Left(NextXY, InStr(NextXY, Space(1)) - 1) - Pin1X
                    NextY = Mid(NextXY, InStr(NextXY, Space(1)) + 1) - Pin1Y
                    Print #1, vbTab & vbTab & "(layerContents (layerNumRef " & LayerNumRef & ")"
                    Print #1, vbTab & vbTab & vbTab & "(line (pt " & PrevX & " " & PrevY & ") (pt " & NextX & " " & NextY & ") (width " & LineWidth & "))"
                    Print #1, vbTab & vbTab & ")"
                    PrevXY = NextXY
                Next i
            End If
        End If
        
        If Left(DecalAscLn, 4) = "OPEN" Then
        
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 4
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
            LayerNumRef = vbNullString
            
            If LayerNo = 26 Then
                LayerNumRef = 18
            ElseIf LayerNo = 27 Then
                LayerNumRef = 28
            End If
            
            If LayerNumRef <> vbNullString Then
                Print #1, vbTab & vbTab & "(layerContents (layerNumRef " & LayerNumRef & ")"
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                
    'Check for arc
                FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                
                If FirstSpaceIndex + ExtraSpaces <> InStrRev(DecalAscLn, Space(1)) Then
                
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                For i = 1 To 6
                    NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                    If i = 3 Then StartAngle = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    If i = 4 Then SweepAngle = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    If i = 5 Then LLPX = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    If i = 6 Then LLPY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                    NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                    PrevSpaceIndex = NextSpaceIndex
                Next i
                
                StartAngle = Left(StartAngle, Len(StartAngle) - 1) & "." & Right(StartAngle, 1)
                SweepAngle = Left(SweepAngle, Len(SweepAngle) - 1) & "." & Right(SweepAngle, 1)
                URPY = Mid(DecalAscLn, InStrRev(DecalAscLn, Space(1)) + 1)
                
                Radius = (URPY - LLPY) / 2
                ArcCenterX = LLPX + Radius
                ArcCenterY = LLPY + Radius
                
                Print #1, vbTab & vbTab & vbTab & "(arc (pt " & ArcCenterX - Pin1X & ", " & ArcCenterY - Pin1Y & ") (radius " & Radius & ") (startAngle " & StartAngle & ") (sweepAngle " & SweepAngle & ") (width " & LineWidth & "))"
    
                Row = Row + 1 'Skip SecondXY for arc
                
                Else
                    FirstXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                    FirstX = Left(FirstXY, InStr(FirstXY, Space(1)) - 1) - Pin1X
                    FirstY = Mid(FirstXY, InStr(FirstXY, Space(1)) + 1) - Pin1Y
    
                    Row = Row + 1
                    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                    NextXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                    NextX = Left(NextXY, InStr(NextXY, Space(1)) - 1) - Pin1X
                    NextY = Mid(NextXY, InStr(NextXY, Space(1)) + 1) - Pin1Y
                    Print #1, vbTab & vbTab & vbTab & "(line (pt " & FirstX & " " & FirstY & ") (pt " & NextX & " " & NextY & ") (width " & LineWidth & "))"
                End If
                Print #1, vbTab & vbTab & ")"
            End If
        End If
        
        Row = Row + 1
        
        
    If Worksheets(WorksheetName).Cells(Row, 1).Value = vbNullString And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString And Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*") Then
        Print #1, vbTab & ")"
        NextDecal = True
    End If
              
    
              
    Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")
    
    Print #1, vbTab & ")"

Else
    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
    
    'Debug.Print Worksheets(WorksheetName).Cells(Row, 1).Value
    'Retrieve number of different padstack definitions
    If Row = DecalHdrRow Then
        'SpaceIndex = SkipSpaces(DecalAscLn, 1)
        
        SpaceIndex = InStr(1, DecalAscLn, Space(1))
        
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
        SpaceIndex = SpaceIndex + ExtraSpaces
        
        DecalName = Left(DecalAscLn, SpaceIndex - 1 - ExtraSpaces)
'        Debug.Print DecalName
        
        If DecalNo = 1 Then
            For i = 1 To 8
            If i = 1 Then units = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
            SpaceIndex = InStr(SpaceIndex + 1, DecalAscLn, Space(1))
            ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
            SpaceIndex = SpaceIndex + ExtraSpaces
            If i = 7 Then NoOfPads = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
            Next i
            
            If units = "I" Then
                Print #1, vbTab & "(fileUnits MIL)"
            ElseIf units = "M" Then
                Print #1, vbTab & "(fileUnits MM)"
            End If
            Print #1, ")"
            Print #1, "(library Library_1"
        Else
            StartCol = StartCol + 4
        End If
    End If
End If

startRow = 2
CurrGate = Sheets("Template").Cells(r, 1).Value
While PrevGate <> vbNullString
    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(r, 1).Value
    
    
    
    If CurrGate = PrevGate Then
        If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then
            LeftPinCnt = LeftPinCnt + 1
            If LeftPinLen < Len(Sheets("Template").Cells(r, 3)) Then LeftPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then
            RightPinCnt = RightPinCnt + 1
            If RightPinLen < Len(Sheets("Template").Cells(r, 3)) Then RightPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then
            TopPinCnt = TopPinCnt + 1
            If TopPinLen < Len(Sheets("Template").Cells(r, 3)) Then TopPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then
            BotPinCnt = BotPinCnt + 1
            If BotPinLen < Len(Sheets("Template").Cells(r, 3)) Then BotPinLen = Len(Sheets("Template").Cells(r, 3))
        End If
    Else
         

        GateCnt = GateCnt + 1
        
        Print #1, vbTab & "(symbolDef " & Chr(34) & SYMname & "-" & Num2Lett(GateCnt) & Chr(34) & " (originalName " & Chr(34) & SYMname & "-" & Num2Lett(GateCnt) & Chr(34) & ")"
        Print #1,
        
        If Sheets("Setup").Cells(110, 2) = "None (Box)" Then
            
            If LeftPinCnt <> 0 Then
                OriginPin = "Left"
            ElseIf TopPinCnt <> 0 Then
                OriginPin = "Top"
            ElseIf RightPinCnt <> 0 Then
                OriginPin = "Right"
            ElseIf BotPinCnt <> 0 Then
                OriginPin = "Bottom"
            End If
            
            If LeftPinCnt > RightPinCnt Then
                PinCntLR = LeftPinCnt
            Else
                PinCntLR = RightPinCnt
            End If
            
            If TopPinCnt = 0 Then
                TopOffset = PinPitch
            Else
                TopOffset = RoundToNearest((TopPinLen * 50) + 200, 100)
            End If
            
            If BotPinCnt = 0 Then
                BotOffset = PinPitch
            Else
                BotOffset = RoundToNearest((BotPinLen * 50) + 200, 100)
            End If
        
            BoxHeightTB = TopOffset + BotOffset
            
            If PinCntLR = 0 Then
                BoxHeightLR = 0
            Else
    '            BoxHeightLR = (PinCntLR * PinPitch) + PinPitch
                BoxHeightLR = ((PinCntLR - 1) * PinPitch)
            End If
            
            BoxHeight = RoundToNearest(BoxHeightLR + BoxHeightTB, 100)
    
            If TopPinCnt > BotPinCnt Then
                PinCntTB = TopPinCnt
            Else
                PinCntTB = BotPinCnt
            End If
            
            If LeftPinLen + RightPinLen = 0 Then
                BoxWidthLR = 0
            Else
                BoxWidthLR = RoundToNearest(((LeftPinLen + RightPinLen) * 50) + 200, 100)
            End If
            
            BoxWidthTB = RoundToNearest((PinCntTB * PinPitch) + PinPitch, 100)
            
            If BoxWidthLR > BoxWidthTB Then
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthLR, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthLR, 100)
                End If
            Else
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthTB, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthTB, 100)
                End If
            End If
            
            PinCnt = LeftPinCnt + RightPinCnt + TopPinCnt + BotPinCnt
            
            If OriginPin = "Left" Then
                OffsetX = PinLength
                OffsetY = TopOffset
            ElseIf OriginPin = "Top" Then
                OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
                OffsetY = -(PinLength)
            ElseIf OriginPin = "Right" Then
                OffsetX = -PinLength - BoxWidth
                OffsetY = TopOffset
            ElseIf OriginPin = "Bottom" Then
                OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
                OffsetY = PinLength + BoxHeight
            End If
    
            PinNum = 1
            
            'Left Pins
            For lt = 1 To LeftPinCnt
                Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt 0 mils " & -(lt - 1) * PinPitch & " mils) (rotation 0) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & PinLength + 25 & " mils " & (-(lt - 1) * PinPitch) - 25 & " mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                Print #1, vbTab & vbTab & "))"
                PinNum = PinNum + 1
            Next lt
            
            'Right Pins
            If OriginPin = "Right" Then
                For rt = 1 To RightPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt 0 mils " & -(rt - 1) * PinPitch & " mils) (rotation 180) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & -PinLength & " mils " & (-(rt - 1) * PinPitch) - 25 & " mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next rt
            ElseIf OriginPin = "Left" Then
                For rt = 1 To RightPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & (PinLength * 2) + BoxWidth & " mils " & -(rt - 1) * PinPitch & " mils) (rotation 180) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & PinLength + BoxWidth & " mils " & (-(rt - 1) * PinPitch) - 25 & " mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next rt
            ElseIf OriginPin = "Top" Then
                For rt = 1 To RightPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & BoxWidth + OffsetX + PinLength & " mils " & -((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset) & " mils) (rotation 180) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & BoxWidth + OffsetX & " mils " & (-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) - 25 & " mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next rt
            End If
            
            'Top Pins
            If OriginPin = "Top" Then
                For tt = 1 To TopPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & RoundDownToNearest((tt - 1) * PinPitch, PinPitch) & " mils 0 mils) (rotation 270) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & RoundDownToNearest((tt - 1) * PinPitch, PinPitch) + 25 & " mils " & -PinLength & " mils) (rotation 90) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next tt
            ElseIf OriginPin = "Left" Then
                For tt = 1 To TopPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " mils " & OffsetY + PinLength & " mils) (rotation 270) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) + 25 & " mils " & OffsetY & " mils) (rotation 90) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next tt
            End If
            
            'Bottom Pins
            If OriginPin = "Bottom" Then
                For bt = 1 To BotPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " mils 0 mils) (rotation 90) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) + 25 & " mils " & PinLength + 25 & " mils) (rotation 90) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next bt
             ElseIf OriginPin = "Left" Then
                For bt = 1 To BotPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " mils " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " mils) (rotation 90) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) + 25 & " mils " & -BotOffset - ((PinCntLR - 1) * PinPitch) + 25 & " mils) (rotation 90) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next bt
             ElseIf OriginPin = "Right" Then
                For bt = 1 To BotPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & RoundDownToNearest(-PinLength - ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch) & " mils " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " mils) (rotation 90) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & RoundDownToNearest(-PinLength - ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch) + 25 & " mils " & -BotOffset - (PinCntLR * PinPitch) + 25 & " mils) (rotation 90) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next bt
             ElseIf OriginPin = "Top" Then
                For bt = 1 To BotPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " mils " & -BoxHeight - (2 * PinLength) & " mils) (rotation 90) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) + 25 & " mils " & -BoxHeight - PinLength + 25 & " mils) (rotation 90) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next bt
            End If
            
            Print #1,
            
            'Pieces
            Print #1, vbTab & vbTab & "(line (pt " & OffsetX & " mils " & OffsetY & " mils) (pt " & OffsetX + BoxWidth & " mils " & OffsetY & " mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt " & OffsetX + BoxWidth & " mils " & OffsetY & " mils) (pt " & OffsetX + BoxWidth & " mils " & OffsetY - BoxHeight & " mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt " & OffsetX + BoxWidth & " mils " & OffsetY - BoxHeight & " mils) (pt " & OffsetX & " mils " & OffsetY - BoxHeight & " mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt " & OffsetX & " mils " & OffsetY - BoxHeight & " mils) (pt " & OffsetX & " mils " & OffsetY & " mils) (width 10 mils))"
            Print #1,
            
            If RightPinCnt = 0 Then
                Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt " & OffsetX + BoxWidth + 50 & " mils " & OffsetY - (BoxHeight / 2) + 50 & " mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Else
                Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt " & OffsetX + BoxWidth + 50 & " mils " & OffsetY + 250 & " mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            End If
            
        ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Non-Polarised)" Then
            
            Print #1, vbTab & vbTab & "(pin (pinNum 1) (pt 0 mils 0 mils) (rotation 0) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 225 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1, vbTab & vbTab & "(pin (pinNum 2) (pt 500 mils 0 mils) (rotation 180) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 500 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1,
            
            Print #1, vbTab & vbTab & "(line (pt 220 mils 100 mils) (pt 220 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 280 mils 100 mils) (pt 280 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 200 mils 0 mils) (pt 220 mils 0 mils) (width 6 mils))"
            Print #1, vbTab & vbTab & "(line (pt 280 mils 0 mils) (pt 300 mils 0 mils) (width 6 mils))"
    
            Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt 350 mils 150 mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            
        ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Polarised)" Then
        
            Print #1, vbTab & vbTab & "(pin (pinNum 1) (pt 0 mils 0 mils) (rotation 0) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 225 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1, vbTab & vbTab & "(pin (pinNum 2) (pt 500 mils 0 mils) (rotation 180) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 500 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1,
            
            Print #1, vbTab & vbTab & "(line (pt 200 mils 100 mils) (pt 200 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 200 mils -100 mils) (pt 230 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 230 mils -100 mils) (pt 230 mils 100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 230 mils 100 mils) (pt 200 mils 100 mils) (width 10 mils))"
            
            'Fill Lines for positive plate
            Print #1, vbTab & vbTab & "(line (pt 210 mils 90 mils) (pt 210 mils -90 mils) (width 20 mils))"
            Print #1, vbTab & vbTab & "(line (pt 220 mils 90 mils) (pt 220 mils -90 mils) (width 20 mils))"
            
            Print #1, vbTab & vbTab & "(line (pt 300 mils 100 mils) (pt 300 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 300 mils -100 mils) (pt 270 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 270 mils -100 mils) (pt 270 mils 100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 270 mils 100 mils) (pt 300 mils 100 mils) (width 10 mils))"
            
            Print #1, vbTab & vbTab & "(line (pt 180 mils 50 mils) (pt 140 mils 50 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 160 mils 70 mils) (pt 160 mils 30 mils) (width 10 mils))"
    
            Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt 350 mils 150 mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"

        
        ElseIf Sheets("Setup").Cells(110, 2) = "Inductor" Then
        
            Print #1, vbTab & vbTab & "(pin (pinNum 1) (pt 0 mils 0 mils) (rotation 0) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 225 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1, vbTab & vbTab & "(pin (pinNum 2) (pt 800 mils 0 mils) (rotation 180) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 600 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1,
            
            Print #1, vbTab & vbTab & vbTab & "(arc (pt 250 mils 0 mils) (radius 50 mils) (startAngle 0.0) (sweepAngle 180.0) (width 10 mils))"
            Print #1, vbTab & vbTab & vbTab & "(arc (pt 350 mils 0 mils) (radius 50 mils) (startAngle 0.0) (sweepAngle 180.0) (width 10 mils))"
            Print #1, vbTab & vbTab & vbTab & "(arc (pt 450 mils 0 mils) (radius 50 mils) (startAngle 0.0) (sweepAngle 180.0) (width 10 mils))"
            Print #1, vbTab & vbTab & vbTab & "(arc (pt 550 mils 0 mils) (radius 50 mils) (startAngle 0.0) (sweepAngle 180.0) (width 10 mils))"
        
            Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt 650 mils 150 mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
        
        ElseIf Sheets("Setup").Cells(110, 2) = "Resistor" Then
        
            Print #1, vbTab & vbTab & "(pin (pinNum 1) (pt 0 mils 0 mils) (rotation 0) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 225 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1, vbTab & vbTab & "(pin (pinNum 2) (pt 700 mils 0 mils) (rotation 180) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 500 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1,
            
            Print #1, vbTab & vbTab & "(line (pt 200 mils 50 mils) (pt 500 mils 50 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 500 mils 50 mils) (pt 500 mils -50 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 500 mils -50 mils) (pt 200 mils -50 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 200 mils -50 mils) (pt 200 mils 50 mils) (width 10 mils))"
    
            Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt 550 mils 150 mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
        
        End If
            
        Print #1,
        Print #1, vbTab & ")"


        LeftPinCnt = 0
        RightPinCnt = 0
        TopPinCnt = 0
        BotPinCnt = 0
        LeftPinLen = 0
        RightPinLen = 0
        
        r = r - 1

    End If

    PrevGate = CurrGate
    r = r + 1
     
Wend


'Blank Line
Print #1,
Print #1, vbTab & "(compDef " & Chr(34) & PTName & Chr(34) & " (originalName " & Chr(34) & PTName & Chr(34) & ") (compHeader (numPins " & Sheets("Setup").Cells(14, 2).Value & ") (numParts " & GateCnt & ") (refDesPrefix " & RefDesPrefix & ")"
Print #1, vbTab & vbTab & ")"
r = 2
PinCnt = 0
GateNo = 1
PrevGate = Sheets("Template").Cells(r, 1).Value
CurrGate = PrevGate
While PrevGate <> vbNullString
    
    CurrGate = Sheets("Template").Cells(r, 1).Value
    If CurrGate = PrevGate Then
        PinCnt = PinCnt + 1
        Print #1, vbTab & vbTab & "(compPin " & Chr(34) & Sheets("Template").Cells(r, 2).Value & Chr(34) & " (pinName " & Chr(34) & Sheets("Template").Cells(r, 3).Value & Chr(34) & ") (partNum " & GateNo & ") (symPinNum " & PinCnt & ") (gateEq 0) (pinEq 0) (pinType Bidirectional))"
    Else
    
        Print #1, vbTab & vbTab & "(attachedSymbol (partNum " & GateNo & ") (altType Normal) (symbolName " & Chr(34) & SYMname & "-" & Num2Lett(GateNo) & Chr(34) & "))"
        GateNo = GateNo + 1
        
        PinCnt = 0
        r = r - 1
    End If
    PrevGate = CurrGate
    r = r + 1

Wend

Set tbl = Worksheets("Template").ListObjects("Table1")
NoOfPads = tbl.DataBodyRange.Rows.Count

Print #1, vbTab & vbTab & "(attachedPattern (patternNum 1) (patternName " & Chr(34) & DecalName & Chr(34) & ")"
Print #1, vbTab & vbTab & vbTab & "(numPads " & NoOfPads & ")"
Print #1, vbTab & vbTab & vbTab & "(padPinMap"

For i = 1 To NoOfPads
    If Not IsNumeric(Sheets("Template").Cells(i + 1, 2).Value) Then
        PadNum = Sheets("Template").Cells(i + 1, 7).Value
    Else
        PadNum = Sheets("Template").Cells(i + 1, 2).Value
    End If
    Print #1, vbTab & vbTab & vbTab & vbTab & "(padNum " & PadNum & ") (compPinRef " & Chr(34) & Sheets("Template").Cells(i + 1, 2).Value & Chr(34) & ")"

Next i

Print #1, vbTab & vbTab & vbTab & ")"
Print #1, vbTab & vbTab & ")"

'Attributes

AttrRow = 1

Do While Sheets("Attributes").Cells(AttrRow, 1).Value <> vbNullString
    Print #1, vbTab & vbTab & "(attr " & Chr(34) & Sheets("Attributes").Cells(AttrRow, 1).Value & Chr(34) & " " & Chr(34) & Sheets("Attributes").Cells(AttrRow, 2).Value & Chr(34) & ")"
    AttrRow = AttrRow + 1
Loop

Print #1, vbTab & ")"
Print #1,
Print #1, ")"
Close #1

End Function

Public Function Num2Lett(Num As Integer) As String
    If Num > 26 Then
        Num2Lett = ColLett((Num - (Num Mod 26)) / 26) + Chr(Num Mod 26 + 64)
    Else
        Num2Lett = Chr(Num + 64)
    End If
End Function

Sub ImportEPW(Control As IRibbonControl)
Dim partID As String
Dim EPWfile As String

Dim epwMAN As String 'Manufacturer
Dim epwMPN As String 'Manufacturer Part Number
Dim epwSPN As String 'Supplier Part Number
Dim epwDSL As String 'Datasheet Link
Dim epwWSP As String 'Website Prefix
Dim epwCKS As String 'Checksum
Dim epwPIN As String
Dim epwPKG As String
Dim epwFMT As String 'Format
Dim epwDES As String
Dim epwIMG As String
Dim epwTID As String
Dim epwPNA As String
Dim epwSNA As String

Dim BuildRequest As String

If IsInternetConnected And CheckDatabaseAccess Then
    If Worksheets("Template").Range("A1") <> vbNullString Then
        Ans = MsgBox("Would you like to find another part which will clear the existing one?", vbYesNo, "ECAD Part Wizard")
        If Ans = vbYes Then
            ResetEPW
            GoTo ImportFile
'            ActiveWorkbook.Close SaveChanges:=False
        Else
            Exit Sub
        End If
    Else
ImportFile:
        EPWfile = FindEPW
        If EPWfile = vbNullString Then Exit Sub
        partID = vbNullString
        epwWSP = vbNullString
        Open EPWfile For Input As #1
        While Not EOF(1)
            Line Input #1, epwFileLine
            If IsNumeric(epwFileLine) Then partID = epwFileLine
            If Mid(epwFileLine, 1, 4) = "mna=" Then epwMAN = Mid(epwFileLine, 5)
            If Mid(epwFileLine, 1, 2) = "m=" Then epwMAN = Mid(epwFileLine, 3)
            If Mid(epwFileLine, 1, 4) = "mpn=" Then epwMPN = Mid(epwFileLine, 5)
            If Mid(epwFileLine, 1, 2) = "p=" Then epwMPN = Mid(epwFileLine, 3)
            If Mid(epwFileLine, 1, 4) = "pna=" Then epwPNA = Mid(epwFileLine, 5)
            If Mid(epwFileLine, 1, 4) = "sna=" Then epwSNA = Mid(epwFileLine, 5)
            If Mid(epwFileLine, 1, 4) = "spn=" Then epwSPN = Mid(epwFileLine, 5)
            If Mid(epwFileLine, 1, 2) = "c=" Then epwSPN = Mid(epwFileLine, 3)
            If Mid(epwFileLine, 1, 2) = "d=" Then epwDSL = Mid(epwFileLine, 3)
            If Mid(epwFileLine, 1, 2) = "i=" Then epwIMG = Mid(epwFileLine, 3)
            If Mid(epwFileLine, 1, 2) = "w=" Then epwWSP = Mid(epwFileLine, 3)
            If Mid(epwFileLine, 1, 3) = "pc=" Then epwPIN = Mid(epwFileLine, 4)
            If Mid(epwFileLine, 1, 3) = "pk=" Then epwPKG = Mid(epwFileLine, 4)
            If Mid(epwFileLine, 1, 3) = "de=" Then epwDES = Mid(epwFileLine, 4)
            If Mid(epwFileLine, 1, 3) = "id=" Then epwTID = Mid(epwFileLine, 4)
            If Mid(epwFileLine, 1, 4) = "fmt=" Then epwFMT = Mid(epwFileLine, 5)
            If Mid(epwFileLine, 1, 3) = "ck=" Then epwCKS = Mid(epwFileLine, 4)
        Wend
            
        If epwPNA = vbNullString Then epwPNA = epwWSP
            
        If partID = vbNullString Then
    
            Set oReq = CreateObject("MSXML2.XMLHTTP")

            RndNo = RandomNumbers(1, 1000000)
            url = GetSetting("EPW", "Settings", "URL", "")
            myURL = url & "/q/pnq.php?mna=" & URLEncode(epwMAN) & "&mpn=" & URLEncode(epwMPN) & "&pna=" & URLEncode(epwPNA) & "&sna=" & URLEncode(epwSNA) & "&spn=" & URLEncode(epwSPN) & "&d=" & URLEncode(epwDSL) & "&i=" & URLEncode(epwIMG) & "&w=" & URLEncode(epwWSP) & "&pc=" & epwPIN & "&pk=" & URLEncode(epwPKG) & "&de=" & URLEncode(epwDES) & "&id=" & URLEncode(epwTID) & "&fmt=" & epwFMT & "&ck=" & epwCKS & "&t=" & RndNo
            oReq.Open "GET", myURL, False, "epwRead", "libraryC4rd"
            oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
            oReq.send
            response = oReq.responseText
            
            Set oReq = Nothing
            
            responseArray = Split(response, vbLf)

            If Mid(responseArray(0), 1, 7) = "PartID=" Then
                partID = Mid(responseArray(0), 8)
            Else
                MsgBox response, vbCritical, "SamacSys - ECAD Part Wizard"
            End If
            
        End If

        Close #1
        
        BuildEPW partID, False, epwWSP

    End If
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.  If so, please whitelist " & Chr(34) & "https://search.samacsys.com" & Chr(34) & ".", vbExclamation, "ECAD Part Wizard"
End If
End Sub
Public Function FindEPW() As String

With Application.FileDialog(msoFileDialogFilePicker) 'Grab copy of the Office file dialog (pick folders)
.AllowMultiSelect = False 'Select only one file
.Title = "Locate EPW File" 'Set dialog title
.ButtonName = "Import" 'Set the button caption
.Filters.Clear 'Make sure the filter list is clear
.Filters.Add "EPW Files", "*.epw"

'Set initial path
.InitialFileName = "C:\"
.InitialView = msoFileDialogViewList

'Show the dialog and test the return
If .Show = 0 Then
'didn't pick a file - exit sub
Exit Function
End If

'Should be only one file name - grab it
FindEPW = .SelectedItems(1) 'Full path

On Error Resume Next 'Set error trap

End With

End Function





Sub lista_Referencji()
Dim ref, Msg$
    Msg = ""
For Each ref In ActiveWorkbook.VBProject.References
    Msg = Msg & ref.Name & vbCr
    Msg = Msg & ref.Description & vbCr
    Msg = Msg & ref.FullPath & vbCr & vbCr
Next ref
    MsgBox Msg, , " Reference for: " & ActiveWorkbook.Name
'    Debug.Print Msg
End Sub
Public Sub ProjectReferencesList()
    Dim i                   As Long
    Dim vbProj              As Object  'VBIDE.VBProject
    Dim VBComp              As Object 'VBIDE.VBComponent
    Set vbProj = Application.VBE.ActiveVBProject
    Dim strTmp              As String
    On Error Resume Next
    For i = 1 To vbProj.References.Count
        With vbProj.References.Item(i)
'            Debug.Print "Description: " & .Description & vbNewLine & _
'                        "FullPath: " & .FullPath & vbNewLine & _
'                        "Major/Minor: " & .Major & "." & .Minor & vbNewLine & .Name    '; .Type
            strTmp = ""
            strTmp = .FullPath
'            Debug.Print "-------------------"
        End With
    Next
End Sub

Sub List_Available_References()
Dim i As Long
'Debug.Print "Reference", "GUID", , , "Path"

For i = 1 To ThisWorkbook.VBProject.References.Count
    With ThisWorkbook.VBProject.References(i)
'        Debug.Print .Name, .GUID, .FullPath
    End With
Next i
End Sub



Sub Sample()
    ColName = "AA"
'    Debug.Print Range(ColName & 1).Column
End Sub



Attribute VB_Name = "Module6"
Sub Main()
Dim PctDone As Single
Dim TotalPinCnt As Integer
Application.ScreenUpdating = False
' Initialize variables.


ActiveSheet.Unprotect Password:="m1llenn1ums4r0s"

Cells.Select
Selection.Delete Shift:=xlUp
Range("A1").Select


Dim GateCnt As Integer
Dim GateNo As Integer
Dim SYMname As String

Dim BoxWidthLR As Double
Dim BoxWidthTB As Double
Dim PinPitch As Double

'On Error GoTo OnErrorGetObject

If Not Sheets("Setup").Cells(101, 2).Value Then ActiveWorkbook.Worksheets("Template").Activate


If Sheets("Setup").Cells(110, 2) = "None (Box)" Then

    PinDecal = Sheets("Setup").Cells(11, 2).Value
    If PinDecal = "PINSHORT" Then
        PinLength = 100
        pnx = 60
        pny = 10
        pnmx = 140
        pnmy = 10
    Else
        PinLength = 200
        pnx = 140
        pny = 20
        pnmx = 230
        pnmy = 0
    End If
    
    PinCount = 0 'Used by the Progress Bar
    'LogFam = cbo_LogFam.Value
    'PinPitch = Sheets("Setup").Cells(12, 2).Value
    PinPitch = 200
    'SYMname = txt_SYM.Value
    'PCBdecals = cbo_PCB.Value
    'PTname = txt_PT.Value
    LeftPinCnt = 0
    RightPinCnt = 0
    TopPinCnt = 0
    BotPinCnt = 0
    TopPinLen = 0
    BotPinLen = 0
    LeftPinLen = 0
    RightPinLen = 0
    GateCnt = 0
    r = 2
    PrevGate = Sheets("Template").Cells(r, 1).Value
    TotalPinCnt = Sheets("Setup").Range("B14").Value
    
    BoxCellRow = 8
    NextBoxCellRow = 8
    BoxCellCol = 4
    
    startRow = 2
    CurrGate = Sheets("Template").Cells(r, 1).Value
    
    While PrevGate <> vbNullString
    
'    Debug.Print r - 1
    

    
    
        PrevGate = CurrGate
        CurrGate = Sheets("Template").Cells(r, 1).Value
        
        If CurrGate = PrevGate Then
        
'            PctDone = ((r - 1) / (TotalPinCnt + 1)) * 50
'            UpdateProgressBar PctDone
        
            If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then
                LeftPinCnt = LeftPinCnt + 1
                If LeftPinLen < Len(Sheets("Template").Cells(r, 3)) Then LeftPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then
                RightPinCnt = RightPinCnt + 1
                If RightPinLen < Len(Sheets("Template").Cells(r, 3)) Then RightPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then
                TopPinCnt = TopPinCnt + 1
                If TopPinLen < Len(Sheets("Template").Cells(r, 3)) Then TopPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then
                BotPinCnt = BotPinCnt + 1
                If BotPinLen < Len(Sheets("Template").Cells(r, 3)) Then BotPinLen = Len(Sheets("Template").Cells(r, 3))
            End If
            
            
            
            
        Else
            
            
            GateCnt = GateCnt + 1
            
            
            If LeftPinCnt <> 0 Then
                OriginPin = "Left"
            ElseIf TopPinCnt <> 0 Then
                OriginPin = "Top"
            ElseIf RightPinCnt <> 0 Then
                OriginPin = "Right"
            ElseIf BotPinCnt <> 0 Then
                OriginPin = "Bottom"
            End If
            
            If LeftPinCnt > RightPinCnt Then
                PinCntLR = LeftPinCnt
            Else
                PinCntLR = RightPinCnt
            End If
            
            If TopPinCnt = 0 Then
                TopOffset = PinPitch
            Else
                TopOffset = RoundToNearest((TopPinLen * 50) + 200, 100)
            End If
            
            If BotPinCnt = 0 Then
                BotOffset = PinPitch
            Else
                BotOffset = RoundToNearest((BotPinLen * 50) + 200, 100)
            End If
        
            BoxHeightTB = TopOffset + BotOffset
            
            If PinCntLR = 0 Then
                BoxHeightLR = 0
            Else
                BoxHeightLR = ((PinCntLR - 1) * PinPitch)
            End If
            
            BoxHeight = RoundToNearest(BoxHeightLR + BoxHeightTB, 100)
    
            If TopPinCnt > BotPinCnt Then
                PinCntTB = TopPinCnt
            Else
                PinCntTB = BotPinCnt
            End If
            
            If LeftPinLen + RightPinLen = 0 Then
                BoxWidthLR = 0
            Else
                BoxWidthLR = RoundToNearest(((LeftPinLen + RightPinLen) * 50) + 200, 100)
            End If
            
            BoxWidthTB = RoundToNearest((PinCntTB * PinPitch) + PinPitch, 100)
            
            If BoxWidthLR > BoxWidthTB Then
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthLR, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthLR, 100)
                End If
            Else
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthTB, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthTB, 100)
                End If
            End If
            
            PinCnt = LeftPinCnt + RightPinCnt + TopPinCnt + BotPinCnt
            
            
'            Debug.Print "No of Gates = " & GateCnt
'            Debug.Print "No of Left Pins = " & LeftPinCnt
'            Debug.Print "No of Right Pins = " & RightPinCnt
'            Debug.Print "No of Top Pins = " & TopPinCnt
'            Debug.Print "No of Bottom Pins = " & BotPinCnt
'            Debug.Print "Max. Left Pin Length = " & LeftPinLen
'            Debug.Print "Max. Right Pin Length = " & RightPinLen
'            Debug.Print "Max. Top Pin Length = " & TopPinLen
'            Debug.Print "Max. Bottom Pin Length = " & BotPinLen
'            Debug.Print "Box Width = " & BoxWidth
'            Debug.Print "Box Height = " & BoxHeight
'            Debug.Print "Pin Decal = " & PinDecal
'            Debug.Print "Top Offset = " & TopOffset
'            Debug.Print "Bottom Offset = " & BotOffset
'            Debug.Print "Origin Pin = " & OriginPin
            
    
            OffsetX = PinLength
            OffsetY = TopOffset
    

'            Debug.Print "X Offset = " & OffsetX
'            Debug.Print "Y Offset = " & OffsetY
          
            
    'Draw Box
    
        
        Range(Cells(BoxCellRow, BoxCellCol), Cells((BoxHeight / 100) + BoxCellRow - 1, (BoxWidth / 100) + BoxCellCol - 1)).Select
        
        Selection.Borders(xlDiagonalDown).LineStyle = xlNone
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        Selection.Borders(xlInsideVertical).LineStyle = xlNone
        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
        
        
    '    Cells(BoxCellRow, BoxCellCol).Select
            
    'Left Pins
            For lt = 1 To LeftPinCnt
            
'                Debug.Print BoxCellRow
            
'                Debug.Print (BoxCellRow - 1) + RoundDownToNearest(((BoxHeight / 100) + ((LeftPinCnt) - 2)) / 2, 1) + (((lt * 1) - 1) * 2)
                
                Range(Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((lt - 1) * 2), BoxCellCol - 2), Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((lt - 1) * 2), BoxCellCol - 1)).Select
    
                With Selection.Borders(xlEdgeBottom)
                    .LineStyle = xlContinuous
                    .Color = -4379090
                    .TintAndShade = 0
                    .Weight = xlMedium
                End With
                Selection.MergeCells = True
                Selection.VerticalAlignment = xlBottom
                Selection.HorizontalAlignment = xlRight
                    
                ActiveCell.Value = Sheets("Template").Cells(startRow, 2).Value
                
                
                
                Range(Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((lt - 1) * 2), BoxCellCol), Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((lt - 1) * 2) + 1, BoxCellCol + RoundToNearest((LeftPinLen - 1) / 2, 1))).Select
                Selection.MergeCells = True
                Selection.VerticalAlignment = xlCenter
                Selection.HorizontalAlignment = xlLeft
                
                ActiveCell.Value = Sheets("Template").Cells(startRow, 3).Value
                startRow = startRow + 1
                
                PinCount = PinCount + 1
'                Debug.Print PinCount
                
                PctDone = (PinCount / TotalPinCnt) * 100
                UpdateProgressBar PctDone
                
            Next lt
            
    'Bottom Pins
    
            For bt = 1 To BotPinCnt
        
                
                Range(Cells(BoxCellRow + (BoxHeight / 100), (BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((BotPinCnt * 2) - 2)) / 2, 1) + (((bt * 1) - 1) * 2)), Cells(BoxCellRow + (BoxHeight / 100) + 1, (BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((BotPinCnt * 2) - 2)) / 2, 1) + (((bt * 1) - 1) * 2))).Select
    
                With Selection.Borders(xlEdgeRight)
                    .LineStyle = xlContinuous
                    .Color = -13780179
                    .TintAndShade = 0
                    .Weight = xlMedium
                End With
                Selection.MergeCells = True
                Selection.Orientation = 90
                Selection.VerticalAlignment = xlTop
                Selection.HorizontalAlignment = xlRight
                
                
                ActiveCell.Value = Sheets("Template").Cells(startRow, 2).Value
                
                
                Range(Cells(BoxCellRow + (BoxHeight / 100) - 1, (BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((BotPinCnt * 2) - 2)) / 2, 1) + (((bt * 1) - 1) * 2)), Cells(BoxCellRow + (BoxHeight / 100) - 1 - RoundToNearest(BotPinLen / 2, 1), ((BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((BotPinCnt * 2) - 2)) / 2, 1) + (((bt * 1) - 1) * 2)) + 1)).Select
                Selection.MergeCells = True
                Selection.Orientation = 90
                Selection.VerticalAlignment = xlBottom
                Selection.HorizontalAlignment = xlCenter
                
                ActiveCell.Value = Sheets("Template").Cells(startRow, 3).Value
                startRow = startRow + 1
                
                PinCount = PinCount + 1
 '               Debug.Print PinCount
                
                PctDone = (PinCount / TotalPinCnt) * 100
                UpdateProgressBar PctDone
                
            Next bt
            
    'Right Pins
    
            For rt = 1 To RightPinCnt
            
'                Debug.Print (BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((rt - 1) * 2)
            
               Range(Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((rt - 1) * 2), (BoxWidth / 100) + BoxCellCol), Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((rt - 1) * 2), (BoxWidth / 100) + BoxCellCol + 1)).Select
            
'                Range(Cells(rt + (rt + 1) + (OffsetY / 100), (BoxWidth / 100) + BoxCellCol), Cells(rt + (rt + 1) + (OffsetY / 100), (BoxWidth / 100) + BoxCellCol + 1)).Select
                
                With Selection.Borders(xlEdgeBottom)
                    .LineStyle = xlContinuous
                    .Color = -13725760
                    .TintAndShade = 0
                    .Weight = xlMedium
                End With
                
                Selection.MergeCells = True
                
                Selection.VerticalAlignment = xlBottom
                Selection.HorizontalAlignment = xlLeft
                    
                ActiveCell.Value = Sheets("Template").Cells(startRow, 2).Value
                
                Range(Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((rt - 1) * 2), (BoxWidth / 100) + BoxCellCol - 1), Cells((BoxCellRow - 1) + (Abs(OffsetY) / 100) + ((rt - 1) * 2) + 1, (BoxWidth / 100) + BoxCellCol - 1 - RoundToNearest(RightPinLen / 2, 1))).Select
                Selection.MergeCells = True
                Selection.VerticalAlignment = xlCenter
                Selection.HorizontalAlignment = xlRight
                
                ActiveCell.Value = Sheets("Template").Cells(startRow, 3).Value
                startRow = startRow + 1
                
                PinCount = PinCount + 1
 '               Debug.Print PinCount
                
                PctDone = (PinCount / TotalPinCnt) * 100
                UpdateProgressBar PctDone
                
            Next rt
    
    'Top Pins
    
            For tt = 1 To TopPinCnt
                
                Range(Cells(BoxCellRow - 1, (BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((TopPinCnt * 2) - 2)) / 2, 1) + (((tt * 1) - 1) * 2)), Cells(BoxCellRow - 2, (BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((TopPinCnt * 2) - 2)) / 2, 1) + (((tt * 1) - 1) * 2))).Select


                With Selection.Borders(xlEdgeRight)
                    .LineStyle = xlContinuous
                    .Color = -13487407
                    .TintAndShade = 0
                    .Weight = xlMedium
                End With
                
                Selection.Orientation = 90
                Selection.VerticalAlignment = xlBottom
                Selection.HorizontalAlignment = xlRight
                Selection.MergeCells = True
                
                ActiveCell.Value = Sheets("Template").Cells(startRow, 2).Value
                

                
                Range(Cells(BoxCellRow, (BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((TopPinCnt * 2) - 2)) / 2, 1) + (((tt * 1) - 1) * 2)), Cells(BoxCellRow + RoundToNearest(TopPinLen / 2, 1), ((BoxCellCol - 1) + RoundDownToNearest(((BoxWidth / 100) - ((TopPinCnt * 2) - 2)) / 2, 1) + (((tt * 1) - 1) * 2)) + 1)).Select
                Selection.MergeCells = True
                Selection.Orientation = 90
                Selection.VerticalAlignment = xlTop
                Selection.HorizontalAlignment = xlCenter
                
                ActiveCell.Value = Sheets("Template").Cells(startRow, 3).Value
                startRow = startRow + 1
                
                PinCount = PinCount + 1
'                Debug.Print PinCount
                
                PctDone = (PinCount / TotalPinCnt) * 100
                UpdateProgressBar PctDone

            Next tt
    
                Cells(BoxCellRow, BoxCellCol + (BoxWidth / 100) + 1).Select
                ActiveCell.Value = Sheets("Template").Cells(startRow - 1, 1).Value
                Selection.Font.Bold = True

            BoxCellCol = BoxCellCol + ((BoxWidth / 100) + 10)
            
            If BoxCellRow + (BoxHeight / 100) > NextBoxCellRow Then NextBoxCellRow = BoxCellRow + (BoxHeight / 100)
            If GateCnt Mod 5 = 0 Then
                BoxCellRow = NextBoxCellRow + 6
                BoxCellCol = 4
            End If
            
            Cells(BoxCellRow, BoxCellCol).Select
    
            LeftPinCnt = 0
            RightPinCnt = 0
            TopPinCnt = 0
            BotPinCnt = 0
            TopPinLen = 0
            BotPinLen = 0
            LeftPinLen = 0
            RightPinLen = 0
            
            r = r - 1
                    
    
        End If
    
        PrevGate = CurrGate
        

        
        
        r = r + 1
        


        
    '
    
        
    Wend
    
'For j = 51 To 100
'For k = 1 To TotalPinCnt
'    Debug.Print k
'Next k
'UpdateProgressBar j
'Next j
    
    
ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Non-Polarised)" Then
'Lines
    Range("E8:E11").Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Right Pin
    Range("F9:H9").Select

    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -4379090
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Left Pin
    Range("B9:D9").Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -13725760
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
    Range("C3").Select

ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Polarised)" Then

'Boxes
    Range("E8:E11").Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
    Range("G8:G11").Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
        With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
'Polarisation Marker +
    Range("B7:B8").Select
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Range("B7:C7").Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Right Pin
    Range("H9:J9").Select

    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -4379090
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Left Pin
    Range("B9:D9").Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -13725760
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
    Range("C3").Select

ElseIf Sheets("Setup").Cells(110, 2) = "Inductor" Then

    ActiveSheet.Shapes.AddShape(msoShapeArc, 71.5, 101.5, 14.25, 14.25).Select
    With Selection.ShapeRange
        .Adjustments.Item(1) = -180
        .Line.ForeColor.ObjectThemeColor = msoThemeColorText1
        .Line.Weight = 1.25
    End With

    ActiveSheet.Shapes.AddShape(msoShapeArc, 100, 101.5, 14.25, 14.25).Select
    With Selection.ShapeRange
        .Adjustments.Item(1) = -180
        .Line.ForeColor.ObjectThemeColor = msoThemeColorText1
        .Line.Weight = 1.25
    End With
    ActiveSheet.Shapes.AddShape(msoShapeArc, 128.5, 101.5, 14.25, 14.25).Select
    With Selection.ShapeRange
        .Adjustments.Item(1) = -180
        .Line.ForeColor.ObjectThemeColor = msoThemeColorText1
        .Line.Weight = 1.25
    End With
    ActiveSheet.Shapes.AddShape(msoShapeArc, 157, 101.5, 14.25, 14.25).Select
    With Selection.ShapeRange
        .Adjustments.Item(1) = -180
        .Line.ForeColor.ObjectThemeColor = msoThemeColorText1
        .Line.Weight = 1.25
    End With
    
'Left Pin
    Range("B9:D9").Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -13725760
        .TintAndShade = 0
        .Weight = xlMedium
    End With

'Right Pin
    Range("M9:O9").Select

    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -4379090
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    




ElseIf Sheets("Setup").Cells(110, 2) = "Resistor" Then
'Box
    Range("E9:J10").Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Right Pin
    Range("K9:M9").Select

    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -4379090
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Left Pin
    Range("B9:D9").Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -13725760
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
    Range("C3").Select
    
ElseIf Sheets("Setup").Cells(110, 2) = "Diode" Then
'Cathode Line
    
    ActiveSheet.Shapes.AddConnector(msoConnectorStraight, 56.25, 90, 56.25, 140).Select
    With Selection.ShapeRange
        .Line.ForeColor.ObjectThemeColor = msoThemeColorText1
        .Line.Weight = 1.25
    End With
    
'Triangle
    ActiveSheet.Shapes.AddShape(msoShapeIsoscelesTriangle, 56.25, 90, 50, 50).Select
    Selection.ShapeRange.IncrementRotation 270
    Selection.ShapeRange.ShapeStyle = msoShapeStylePreset7
    With Selection.ShapeRange.Line
        .Visible = msoTrue
        .ForeColor.RGB = RGB(0, 0, 0)
        .Transparency = 0
        .Weight = 1.25
    End With

'Right Pin
    Range("H9:J9").Select

    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -4379090
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
'Left Pin
    Range("B9:D9").Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -13725760
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
    Range("C3").Select

End If

If Range("B10").Borders(xlEdgeTop).LineStyle = 1 Then
    Range("C3").Select
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
End If

ActiveSheet.Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True
ActiveSheet.EnableSelection = xlUnlockedCells

'For i = 1 To 100
'    For j = 1 To 1000
'        Cells(i, 1).Value = j
'    Next j
'    PctDone = i
'    UpdateProgressBar PctDone
'Next i

          Unload frm_ProgressBar
      End Sub

      Sub UpdateProgressBar(PctDone As Single)
          With frm_ProgressBar

              ' Update the Caption property of the Frame control.
              .Lbl_Percentage.Caption = Format(PctDone, "##") & "% Completed"

              ' Widen the Label control.
              .Lbl_Progress.Width = PctDone * 2

          End With

          ' The DoEvents allows the UserForm to update.
          DoEvents
      End Sub




Attribute VB_Name = "Module7"
'Handle 64-bit and 32-bit Office
#If VBA7 Then
  Declare PtrSafe Function GlobalUnlock Lib "kernel32" (ByVal hMem As LongPtr) As Long
  Declare PtrSafe Function GlobalLock Lib "kernel32" (ByVal hMem As LongPtr) As Long
  Declare PtrSafe Function GlobalAlloc Lib "kernel32" (ByVal wFlags As LongPtr, ByVal dwBytes As LongPtr) As Long
  Declare PtrSafe Function CloseClipboard Lib "User32" () As Long
  Declare PtrSafe Function OpenClipboard Lib "User32" (ByVal hwnd As LongPtr) As Long
  Declare PtrSafe Function EmptyClipboard Lib "User32" () As Long
  Declare PtrSafe Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long
  Declare PtrSafe Function SetClipboardData Lib "User32" (ByVal wFormat As LongPtr, ByVal hMem As LongPtr) As Long
#Else
  Declare Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long
  Declare Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long
  Declare Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long
  Declare Function CloseClipboard Lib "User32" () As Long
  Declare Function OpenClipboard Lib "User32" (ByVal hwnd As Long) As Long
  Declare Function EmptyClipboard Lib "User32" () As Long
  Declare Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long
  Declare Function SetClipboardData Lib "User32" (ByVal wFormat As Long, ByVal hMem As Long) As Long
#End If

Public Const GHND = &H42
Public Const CF_TEXT = 1
Public Const MAXSIZE = 4096

Function ClipBoard_SetData(MyString As String)
'PURPOSE: API function to copy text to clipboard
'SOURCE: www.msdn.microsoft.com/en-us/library/office/ff192913.aspx

Dim hGlobalMemory As Long, lpGlobalMemory As Long
Dim hClipMemory As Long, X As Long

'Allocate moveable global memory
  hGlobalMemory = GlobalAlloc(GHND, Len(MyString) + 1)

'Lock the block to get a far pointer to this memory.
  lpGlobalMemory = GlobalLock(hGlobalMemory)

'Copy the string to this global memory.
  lpGlobalMemory = lstrcpy(lpGlobalMemory, MyString)

'Unlock the memory.
  If GlobalUnlock(hGlobalMemory) <> 0 Then
    MsgBox "Could not unlock memory location. Copy aborted."
    GoTo OutOfHere2
  End If

'Open the Clipboard to copy data to.
  If OpenClipboard(0&) = 0 Then
    MsgBox "Could not open the Clipboard. Copy aborted."
    Exit Function
  End If

'Clear the Clipboard.
  X = EmptyClipboard()

'Copy the data to the Clipboard.
  hClipMemory = SetClipboardData(CF_TEXT, hGlobalMemory)

OutOfHere2:
  If CloseClipboard() = 0 Then
    MsgBox "Could not close Clipboard."
  End If

End Function

Function GetFileContent(Name As String) As String
    Dim intUnit As Integer
     
    On Error GoTo ErrGetFileContent
    intUnit = FreeFile
    Open Name For Input As intUnit
    GetFileContent = Input(LOF(intUnit), intUnit)
ErrGetFileContent:
    Close intUnit
    Exit Function
End Function

Sub CopyFileToClipboard(File As String)
'PURPOSE: Copy a given text to the clipboard (using Windows API)
'SOURCE: www.TheSpreadsheetGuru.com
'NOTES: Must have above API declaration and ClipBoard_SetData function in your code

Dim txt As String

'Put some text inside a string variable
  txt = GetFileContent(File)

'Place text into the Clipboard
   ClipBoard_SetData "$CF_TARGET_CXF" & vbCrLf & txt

End Sub

Sub CopyTextToClipboard(Text As String)
'PURPOSE: Copy a given text to the clipboard (using Windows API)
'SOURCE: www.TheSpreadsheetGuru.com
'NOTES: Must have above API declaration and ClipBoard_SetData function in your code

Dim txt As String

'Put some text inside a string variable
  txt = Text

'Place text into the Clipboard
   ClipBoard_SetData txt

End Sub


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    If Not Sheets("Setup").Cells(101, 2).Value And Sheets("Template").Cells(1, 1).Value <> vbNullString Then
        Set TemplateSheet = ThisWorkbook.Worksheets("Template")
        TemplateSheet.Activate
        TemplateSheet.ListObjects("Table1").Sort.SortFields.Clear
        TemplateSheet.ListObjects("Table1").Sort.SortFields.Add Key:=TemplateSheet.Range("I1"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        TemplateSheet.ListObjects("Table1").Sort.SortFields.Add(TemplateSheet.Range("A1"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(46, 46, 189)
        TemplateSheet.ListObjects("Table1").Sort.SortFields.Add(TemplateSheet.Range("A1"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(45, 187, 45)
        TemplateSheet.ListObjects("Table1").Sort.SortFields.Add(TemplateSheet.Range("A1"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(192, 143, 46)
        TemplateSheet.ListObjects("Table1").Sort.SortFields.Add(TemplateSheet.Range("A1"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(209, 50, 50)
        With TemplateSheet.ListObjects("Table1").Sort
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
        
        Sheets("Setup").Cells(101, 2).Value = "TRUE"
        ActiveWorkbook.Worksheets("Symbol(s) Preview").Activate
    End If
End Sub
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
    Sheets("Setup").Cells(101, 2).Value = "FALSE"
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    On Error Resume Next
    Sheets("Setup").Cells(101, 2).Value = "FALSE"
End Sub
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
If Range("B11") <> 2 And Range("B11") <> 3 And Range("B11") <> 4 And Range("B11") <> 5 Then
    MsgBox "Please enter integer scale from 2 to 5.", vbOKOnly, "ECAD Part Wizard"
    Range("B11") = 2
    Exit Sub
End If
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Declare Function OpenClipboard& Lib "User32" (ByVal hwnd As Long)
Private Declare Function EmptyClipboard Lib "User32" () As Long
Private Declare Function CloseClipboard& Lib "User32" ()
Private Declare Function GetUserNameAPI Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, ByRef nSize As Long) As Long
Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwflags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, ByVal lpMultiByteStr As Long, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
Private Declare Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long
Private Const LOCALE_SDECIMAL As Long = &HE
Private Const CP_UTF8 = 65001
Public Function GetInfo(ByVal lInfo As Long) As String
Dim Buffer As String
Dim Ret As String
Buffer = String$(256, 0)
Ret = GetLocaleInfo(LOCALE_USER_DEFAULT, lInfo, Buffer, Len(Buffer))
If Ret > 0 Then
GetInfo = Left$(Buffer, Ret - 1)
Else
GetInfo = ""
End If
End Function
Private Sub Workbook_BeforeClose(ByRef Cancel As Boolean)
ActiveWorkbook.Unprotect Password:="m1llenn1ums4r0s"
ClearClipboard
Application.ActiveWorkbook.Close SaveChanges:=False
End Sub
Public Sub ClearClipboard()
OpenClipboard 0&
EmptyClipboard
CloseClipboard
End Sub
Function GetWinLogin() As String
Dim lpBuff As String * 25
GetUserNameAPI lpBuff, 25
GetWinLogin = Left(lpBuff, InStr(lpBuff, Chr(0)) - 1)
End Function
Private Sub Workbook_Open()
smiupo7m8a &H500, 2, StrPtr("ociyv5dtjs")
smiupo7m8a &H480, ObjPtr(Application), 0
End Sub
Public Sub ow744om35x()
Dim RndNo As Long
Dim CurrEPWver As String
Dim UpdateNotes As String
Dim Alert As String
Dim DnldStr As String
Dim DesignSparkExe As String
Application.DisplayStatusBar = False
Application.EnableCancelKey = xlDisabled
Application.OnKey "{F1}", ""
DecimalSymbol = GetInfo(LOCALE_SDECIMAL)
RndNo = RandomNumbers(1, 1000000)
designerID = GetSetting("EPW", "User Details", "designerID", "")
url = GetSetting("EPW", "Settings", "URL", "")
DesignSparkExe = GetSetting("EPW", "Settings", "DesignSpark", "")
Worksheets("Setup").Range("D2").Value = Replace(GetMAC, "-", vbNullString)
If designerID = vbNullString Or url = vbNullString Then
frm_AppRegistration.Show
Else
Worksheets("Setup").Range("D8").Value = "TRUE"
End If
MaximizeActiveWindow
If IsInternetConnected And CheckDatabaseAccess Then
epwVer = Replace(Worksheets("Setup").Range("D9"), DecimalSymbol, ".")
UpdateNotes = vbNullString
Alert = vbNullString
result = GetData(url & "/q/EPWversionInfo.php?version=" & epwVer & "&t=" & RndNo)
strArray = Split(result, vbLf)
If UBound(strArray) <> 0 Then
For i = 0 To UBound(strArray) - 1
If Left(strArray(i), 15) = "CurrentVersion=" And Len(strArray(i)) > 15 Then CurrVer = Mid(strArray(i), 16)
If strArray(i) = "*BeginUpdateNotes*" Then
i = i + 1
While strArray(i) <> "*EndUpgradeNotes*"
If UpdateNotes = vbNullString Then
UpdateNotes = strArray(i)
Else
UpdateNotes = UpdateNotes & vbCrLf & strArray(i)
End If
i = i + 1
Wend
End If
If strArray(i) = "*BeginAlert*" Then
i = i + 1
While strArray(i) <> "*EndAlert*"
If Alert = vbNullString Then
Alert = strArray(i)
Else
Alert = Alert & vbLf & strArray(i)
End If
i = i + 1
Wend
End If
Next
If UpdateNotes <> vbNullString Or Alert <> vbNullString Then
If UpdateNotes <> vbNullString Then
frm_Message.Lbl_Download.Caption = "New version available! Please click here to download EPW" & Replace(CurrVer, ".", "v")
frm_Message.Lbl_Link = "http://d3334l18tj1bhy.cloudfront.net/EPW" & Replace(CurrVer, ".", "v") & ".zip"
frm_Message.Txt_UpdateNotes.Text = UpdateNotes
End If
If Alert <> vbNullString Then frm_Message.Txt_Alert.Text = Alert
frm_Message.Show
End If
If URLExists("http://www.samacsys.com/EPWBanner.gif?t=" & RndNo) Then frm_Banner.Show
If Worksheets("Setup").Range("B72") = 2 Then Worksheets("Setup").Range("B93") = CInt(Worksheets("Setup").Range("B14") / 2)
Worksheets("Attributes").Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True
End If
prtverEPW = Worksheets("Setup").Range("D1")
pkgverEPW = Worksheets("Setup").Range("D3")
MAN = URLEncode(Worksheets("Attributes").Range("B3"))
MPN = URLEncode(Worksheets("Attributes").Range("B4"))
If MAN <> vbNullString And MPN <> vbNullString Then
result = GetData(url & "/q/versionInfo.php?manufacturer=" & MAN & "&partNumber=" & MPN & "&did=" & designerID & "&t=" & RndNo)
PkgVerI = InStrRev(result, "=")
PkgVer = Mid(result, PkgVerI + 1)
PrtVerI = InStrRev(result, "=", PkgVerI - 1)
CommaI = InStrRev(result, ",", PkgVerI - 1)
prtVer = Mid(result, PrtVerI + 1, CommaI - PrtVerI - 1)
If Worksheets("Setup").Range("D1") <> prtVer & "." & PkgVer Then
MsgBox "A newer version of this model is available.  Please re-download, and you will be presented with the latest version.", vbInformation, "SamacSys - EPW"
End If
End If
End If
On Error Resume Next
ActiveWorkbook.VBProject.References.AddFromFile DesignSparkExe
Unload frm_Splash
End Sub
Function GetData(ByRef url As String) As String
Dim oReq As Object
Set oReq = Nothing
Set oReq = CreateObject("MSXML2.XMLHTTP")
oReq.Open "GET", url, False, "epwRead", "libraryC4rd"
oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
oReq.send
GetData = oReq.responseText
Set oReq = Nothing
End Function
Public Function URLEncode(ByRef StringVal As String, Optional ByRef SpaceAsPlus As Boolean = False, Optional ByRef UTF8Encode As Boolean = True) As String
Dim StringValCopy As String
StringValCopy = IIf(UTF8Encode, UTF16To8(StringVal), StringVal)
Dim StringLen As Long
StringLen = Len(StringValCopy)
If StringLen > 0 Then
ReDim result(StringLen) As String
Dim i As Long, CharCode As Integer
Dim char As String, Space As String
If SpaceAsPlus Then Space = "+" Else Space = "%20"
For i = 1 To StringLen
char = Mid$(StringValCopy, i, 1)
CharCode = Asc(char)
result(i) = "%" & Hex(CharCode)
Next
URLEncode = Join(result, "")
End If
End Function
Public Function UTF16To8(ByVal UTF16 As String) As String
Dim sBuffer As String
Dim lLength As Long
If UTF16 <> "" Then
lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, 0, 0, 0, 0)
sBuffer = Space$(lLength)
lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, StrPtr(sBuffer), Len(sBuffer), 0, 0)
sBuffer = StrConv(sBuffer, vbUnicode)
UTF16To8 = Left$(sBuffer, lLength - 1)
Else
UTF16To8 = ""
End If
End Function
Public Function Clean(ByRef InString As String) As String
Dim X As Integer
For X = 1 To Len(InString)
If Asc(Mid(InString, X, 1)) > 31 And Asc(Mid(InString, X, 1)) < 127 Then
Clean = Clean & Mid(InString, X, 1)
End If
Next
End Function
Function fShellRun()
Dim oShellObject, oFileSystemObject, sShellRndTmpFile, oFile
Set oShellObject = CreateObject("Wscript.Shell")
Set oFileSystemObject = CreateObject("Scripting.FileSystemObject")
sShellRndTmpFile = Application.TemplatesPath & oFileSystemObject.GetTempName
oShellObject.Run "%comspec% /c """ & Chr(34) & Environ("SDD_HOME") & "\pads\win32\bin\Lmutil.exe" & Chr(34) & " lmhostid -n -flexid > " & Chr(34) & sShellRndTmpFile & Chr(34), 0, True
Set oFile = oFileSystemObject.GetFile(sShellRndTmpFile)
If oFile.Size <> 0 Then fShellRun = oFileSystemObject.OpenTextFile(sShellRndTmpFile, 1).ReadAll
oFileSystemObject.DeleteFile sShellRndTmpFile, True
Set oShellObject = Nothing
End Function
Function FSO()
Dim s As String
Set FSO = CreateObject("Scripting.FileSystemObject")
Dim objFile
Set objFile = FSO.GetFile("C:\Users\Paul\AppData\Roaming\Microsoft\Templates\rad16492.tmp")
Set FSO = Nothing
End Function
Public Function FileExists(ByVal sPathName As String, Optional ByRef Directory As Boolean) As Boolean
On Error Resume Next
If sPathName <> "" Then
If IsMissing(Directory) Or Directory = False Then
FileExists = (Dir$(sPathName) <> "")
Else
FileExists = (Dir$(sPathName, vbDirectory) <> "")
End If
End If
End Function
Public Function RandomNumbers(ByRef Lowest As Long, ByRef Highest As Long, Optional ByRef Decimals As Integer)
Application.Volatile
If IsMissing(Decimals) Or Decimals = 0 Then
Randomize
RandomNumbers = Int((Highest + 1 - Lowest) * Rnd + Lowest)
Else
Randomize
RandomNumbers = Round((Highest - Lowest) * Rnd + Lowest, Decimals)
End If
End Function
Function URLExists(ByRef url As String) As Boolean
Dim Request As Object
Dim ff As Integer
Dim rc As Variant
On Error GoTo EndNow
Set Request = CreateObject("WinHttp.WinHttpRequest.5.1")
With Request
.Open "GET", url, False
.send
rc = .statusText
End With
Set Request = Nothing
If rc = "OK" Then URLExists = True
Set Request = Nothing
Exit Function
EndNow:
Set Request = Nothing
End Function
Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
smiupo7m8a &H502, ObjPtr(Sh), ObjPtr(Target)
End Sub

Attribute VB_Name = "frm_AppRegistration"
Attribute VB_Base = "0{748086C6-3666-41DA-89AB-F63E67C73EA8}{D8191549-AB4C-464F-829F-54F6DCF84AE0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
#If VBA7 Then
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal ms As Long)
    Private Declare PtrSafe Function GetUserNameAPI Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
    Private Declare PtrSafe Function LoadCursor Lib "User32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    Private Declare PtrSafe Function SetCursor Lib "User32" (ByVal hCursor As Long) As Long
    Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwflags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, ByVal lpMultiByteStr As LongPtr, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As Long
#Else
    Private Declare Sub Sleep Lib "kernel32" (ByVal ms As Long)
    Private Declare Function GetUserNameAPI Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
    Private Declare Function LoadCursor Lib "User32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    Private Declare Function SetCursor Lib "User32" (ByVal hCursor As Long) As Long
    Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwflags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, ByVal lpMultiByteStr As Long, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
#End If

Private Const IDC_HAND As Long = 32649&
'URLEncode supporting UTF-8 encoding
Private Const CP_UTF8 = 65001


Private Sub btn_Cancel_Click()
Registered = Worksheets("Setup").Range("D8")
If Not Registered Then Application.ActiveWorkbook.Close SaveChanges:=False
Unload Me
End Sub

Private Sub Btn_Update_Click()
Dim UserName As String
Dim email As String
Dim WinLogin As String
Dim Company As String
Dim DesignSparkID As String
Dim designerID As String
Dim RndNo As Long


If IsInternetConnected And CheckDatabaseAccess Then

    'Dim Counter As Long, LastOpen As String, Msg As String
    UserName = txt_Name
    email = txt_Email
    
    'Check for required fields
    ReqFlds = vbNullString
    If Replace(UserName, Space(1), vbNullString) = vbNullString Then ReqFlds = ReqFlds & ", " & "Name"
    If Replace(email, Space(1), vbNullString) = vbNullString Then ReqFlds = ReqFlds & ", " & "Email Address"
    
    If ReqFlds <> vbNullString Then
        MsgBox "The following fields are required: " & Mid(ReqFlds, 3), vbInformation, "SamacSys - ECAD Part Wizard"
        Exit Sub
    End If
    
    'Check for valid Email Address
    
    If Not IsEmailValid(email) Then
        MsgBox "Please enter a valid Email Address.", vbInformation, "SamacSys - ECAD Part Wizard"
        Exit Sub
    End If
    
    'Check Terms and Conditions
    If Not Chk_TC Then
        MsgBox "Please note that you must agree the terms and conditions in order to use ECAD Part Wizard.", vbInformation, "SamacSys - EPW"
        Exit Sub
    End If
    
    RndNo = RandomNumbers(1, 1000000)
    
    Company = txt_Company
    DesignSparkID = txt_DesignSparkID
    
    'Update the information and store it
    SaveSetting "EPW", "User Details", "Name", txt_Name.Value
    SaveSetting "EPW", "User Details", "Company", txt_Company.Value
    SaveSetting "EPW", "User Details", "Email", txt_Email.Value
    SaveSetting "EPW", "User Details", "DesignSparkID", txt_DesignSparkID.Value
    SaveSetting "EPW", "Settings", "URL", "https://search.samacsys.com"
    If Chk_OptIn Then
        Optin = 7
        SaveSetting "EPW", "User Details", "Opt-in", Optin
    Else
        Optin = 3
        SaveSetting "EPW", "User Details", "Opt-in", Optin
    End If
    
    url = GetSetting("EPW", "Settings", "URL", "")
    
    'http://search.samacsys.com/r/u.php?n=Jeremy%20Sonander&e=jeremy@sonander.org&m=MyMac&u=jeremy&c=SonanderLtd&d=JSonander
    
    'm = MAC, encoded as before
    'u = Windows Login Username
    'n = Name (as they input for themselves)
    'e = Email
    'c = Company
    'd = DesignSpark ID
    
    MyMAC = Replace(Worksheets("Setup").Range("D2").Value, ":", vbNullString)
    SplitMAC1 = fChangeBase(Hex2Dec(Left(MyMAC, 6)), 10, 32)
    SplitMAC2 = fChangeBase(Hex2Dec(Mid(MyMAC, 7, 6)), 10, 32)
    While Len(SplitMAC1) < 5
        SplitMAC1 = "0" & SplitMAC1
    Wend
    While Len(SplitMAC2) < 5
        SplitMAC2 = "0" & SplitMAC2
    Wend
    MyMAC = SplitMAC1 & SplitMAC2
    WinLogin = GetWinLogin
    
    result = GetData(url & "/r/u.php?n=" & URLEncode(UserName) & "&e=" & URLEncode(email) & "&m=" & MyMAC & "&u=" & URLEncode(WinLogin) & "&c=" & URLEncode(Company) & "&d=" & URLEncode(DesignSparkID) & "&i=" & Optin & "&t=" & RndNo)
    
    EqualsIndex = InStr(result, "=")
    
    Worksheets("Setup").Range("D8") = "TRUE"
    SaveSetting "EPW", "User Details", "DesignerID", Val(Mid(result, EqualsIndex + 1))
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.", vbExclamation, "SamacSys - EPW"
End If
Unload Me

End Sub

Private Sub Lbl_TC_Click()
On Error Resume Next
If IsInternetConnected Then
    ThisWorkbook.FollowHyperlink Address:="http://www.samacsys.com/epw-terms", NewWindow:=True
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.", vbExclamation, "SamacSys - EPW"
End If

End Sub

Private Sub Lbl_TC_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
SetCursor LoadCursor(0, IDC_HAND)
End Sub

Private Sub Lbl_OI_Click()
On Error Resume Next
If IsInternetConnected Then
    ThisWorkbook.FollowHyperlink Address:="http://www.samacsys.com/opt-in", NewWindow:=True
Else
    MsgBox "Unable to access the internet!" & vbCrLf & vbCrLf & "Note: This maybe due to proxy or firewall settings.", vbExclamation, "SamacSys - EPW"
End If
End Sub

Private Sub Lbl_OI_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
SetCursor LoadCursor(0, IDC_HAND)
End Sub

Private Sub UserForm_Initialize()


' Get settings from registry
UserName = GetSetting("EPW", "User Details", "Name", "")
Company = GetSetting("EPW", "User Details", "Company", "")
email = GetSetting("EPW", "User Details", "Email", "")
DesignSparkID = GetSetting("EPW", "User Details", "DesignSparkID", "")
designerID = GetSetting("EPW", "User Details", "DesignerID", "")
Optin = GetSetting("EPW", "User Details", "Opt-in", "")

If designerID <> vbNullString Then
    Chk_TC.Visible = False
    Lbl_TC.Visible = False
End If

If Optin = 3 Then
    Chk_OptIn = 0
Else
    Chk_OptIn = 1
End If

'Display the information
txt_Name = UserName
txt_Email = email
txt_Company = Company
txt_DesignSparkID = DesignSparkID
txt_DesignerID = designerID

End Sub

Function GetWinLogin() As String
Dim lpBuff As String * 25
GetUserNameAPI lpBuff, 25
GetWinLogin = Left(lpBuff, InStr(lpBuff, Chr(0)) - 1)
End Function

Function GetData(url As String) As String
Dim oReq As Object

    Set oReq = Nothing    ' Release the object.
    Set oReq = CreateObject("MSXML2.XMLHTTP")
    oReq.Open "GET", url, False, "epwRead", "libraryC4rd"
    oReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    oReq.send
    GetData = oReq.responseText
    Set oReq = Nothing

End Function
Public Function UTF16To8(ByVal UTF16 As String) As String
Dim sBuffer As String
Dim lLength As Long
If UTF16 <> "" Then
    lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, 0, 0, 0, 0)
    sBuffer = Space$(lLength)
    lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, StrPtr(sBuffer), Len(sBuffer), 0, 0)
    sBuffer = StrConv(sBuffer, vbUnicode)
    UTF16To8 = Left$(sBuffer, lLength - 1)
Else
    UTF16To8 = ""
End If
End Function

Public Function URLEncode(StringVal As String, Optional SpaceAsPlus As Boolean = False, Optional UTF8Encode As Boolean = True) As String

Dim StringValCopy As String: StringValCopy = IIf(UTF8Encode, UTF16To8(StringVal), StringVal)
Dim StringLen As Long: StringLen = Len(StringValCopy)

If StringLen > 0 Then
    ReDim result(StringLen) As String
    Dim i As Long, CharCode As Integer
    Dim char As String, Space As String

  If SpaceAsPlus Then Space = "+" Else Space = "%20"

  For i = 1 To StringLen
    char = Mid$(StringValCopy, i, 1)
    CharCode = Asc(char)
    result(i) = "%" & Hex(CharCode)
  Next i
  URLEncode = Join(result, "")

End If
End Function



Function IsEmailValid(strEmail)
    Dim strArray As Variant
    Dim strItem As Variant
    Dim i As Long, c As String, blnIsItValid As Boolean
    blnIsItValid = True
     
    i = Len(strEmail) - Len(Application.Substitute(strEmail, "@", ""))
    If i <> 1 Then IsEmailValid = False: Exit Function
    ReDim strArray(1 To 2)
    strArray(1) = Left(strEmail, InStr(1, strEmail, "@", 1) - 1)
    strArray(2) = Application.Substitute(Right(strEmail, Len(strEmail) - Len(strArray(1))), "@", "")
    For Each strItem In strArray
        If Len(strItem) <= 0 Then
            blnIsItValid = False
            IsEmailValid = blnIsItValid
            Exit Function
        End If
        For i = 1 To Len(strItem)
            c = LCase(Mid(strItem, i, 1))
            If InStr("abcdefghijklmnopqrstuvwxyz_-.", c) <= 0 And Not IsNumeric(c) Then
                blnIsItValid = False
                IsEmailValid = blnIsItValid
                Exit Function
            End If
        Next i
        If Left(strItem, 1) = "." Or Right(strItem, 1) = "." Then
            blnIsItValid = False
            IsEmailValid = blnIsItValid
            Exit Function
        End If
    Next strItem
    If InStr(strArray(2), ".") <= 0 Then
        blnIsItValid = False
        IsEmailValid = blnIsItValid
        Exit Function
    End If
    i = Len(strArray(2)) - InStrRev(strArray(2), ".")
    If i <> 2 And i <> 3 Then
        blnIsItValid = False
        IsEmailValid = blnIsItValid
        Exit Function
    End If
    If InStr(strEmail, "..") > 0 Then
        blnIsItValid = False
        IsEmailValid = blnIsItValid
        Exit Function
    End If
    IsEmailValid = blnIsItValid
End Function

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    '==========
    ' don't close form here
'    Cancel = True
    ' do what the Cancel button does
    Btn_Update_Click
    ' presumably the Cancel button also closes the form
    '==========
  End If
End Sub

Attribute VB_Name = "frm_Banner"
Attribute VB_Base = "0{B737AB20-C9DC-46B6-8D96-AB25428998CB}{64A3BDEC-87E2-4484-8D05-8D4FEF11D259}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
#If VBA7 Then
    Private Declare PtrSafe Function LoadCursor Lib "User32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    Private Declare PtrSafe Function SetCursor Lib "User32" (ByVal hCursor As Long) As Long

#Else
    Private Declare Function LoadCursor Lib "User32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    Private Declare Function SetCursor Lib "User32" (ByVal hCursor As Long) As Long
#End If

Private Const IDC_HAND As Long = 32649&


Private Sub UserForm_Initialize()


RndNo = RandomNumbers(1, 1000000)
'http://www.samacsys.com/EPWBanner.gif
'http://www.livepartlibrary.com/LPL/Images/25405_Banner728x90_v3_REV.gif
WebBrowser1.Navigate "about:<html><body scroll='no'><img src='http://www.samacsys.com/EPWBanner.gif" & "?t=" & RndNo & "'></img><STYLE>BODY { border-style:none;}</STYLE></body></html>"




End Sub


Attribute VB_Name = "frm_ExportECAD"
Attribute VB_Base = "0{DF5EA77F-5B3E-4324-A19B-62FEC3055E78}{2FC5917C-5752-4E6A-AE63-8B8FAA79747B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
#If VBA7 Then
    Private Declare PtrSafe Function XCellCompile Lib "SolutionPackerAddIn.dll" Alias "DummyFunc0" () As Long
    Private Declare PtrSafe Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
    Private Declare PtrSafe Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
    Private Declare PtrSafe Function EnumProcesses Lib "PSAPI.DLL" (lpidProcess As Long, ByVal cb As Long, cbNeeded As Long) As Long
    Private Declare PtrSafe Function EnumProcessModules Lib "PSAPI.DLL" (ByVal hProcess As Long, lphModule As Long, ByVal cb As Long, lpcbNeeded As Long) As Long
    Private Declare PtrSafe Function GetModuleBaseName Lib "PSAPI.DLL" Alias "GetModuleBaseNameA" (ByVal hProcess As Long, ByVal hModule As Long, ByVal lpFileName As String, ByVal nSize As Long) As Long
    Private Declare PtrSafe Function LoadLibrary Lib "kernel32" Alias "LoadLibraryA" (ByVal libFileName As String) As Long
    Private Declare PtrSafe Function GetExternalExcelApp Lib "xcutil.dll" (ByVal seachedCaption As String, ByVal fullMatch As Boolean, ByRef result As Variant) As Long
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
    Private Declare PtrSafe Function GetUserNameAPI Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
    Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwflags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, ByVal lpMultiByteStr As LongPtr, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As Long
    Private Declare PtrSafe Function InternetGetConnectedState Lib "wininet.dll" (ByRef dwflags As Long, ByVal dwReserved As Long) As Long
    Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare PtrSafe Function GetWindowLong Lib "User32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
    Private Declare PtrSafe Function SetWindowLong Lib "User32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare PtrSafe Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long
#Else
    Private Declare Function XCellCompile Lib "SolutionPackerAddIn.dll" Alias "DummyFunc0" () As Long
    Private Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
    Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
    Private Declare Function EnumProcesses Lib "PSAPI.DLL" (lpidProcess As Long, ByVal cb As Long, cbNeeded As Long) As Long
    Private Declare Function EnumProcessModules Lib "PSAPI.DLL" (ByVal hProcess As Long, lphModule As Long, ByVal cb As Long, lpcbNeeded As Long) As Long
    Private Declare Function GetModuleBaseName Lib "PSAPI.DLL" Alias "GetModuleBaseNameA" (ByVal hProcess As Long, ByVal hModule As Long, ByVal lpFileName As String, ByVal nSize As Long) As Long
    Private Declare Function LoadLibrary Lib "kernel32" Alias "LoadLibraryA" (ByVal libFileName As String) As Long
    Private Declare Function GetExternalExcelApp Lib "xcutil.dll" (ByVal seachedCaption As String, ByVal fullMatch As Boolean, ByRef result As Variant) As Long
    Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
    Private Declare Function GetUserNameAPI Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
    Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwflags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, ByVal lpMultiByteStr As Long, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
    Private Declare Function InternetGetConnectedState Lib "wininet.dll" (ByRef dwflags As Long, ByVal dwReserved As Long) As Long
    Private Declare Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function GetWindowLong Lib "User32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
    Private Declare Function SetWindowLong Lib "User32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long
#End If

Private Const LOCALE_SDECIMAL As Long = &HE
Public SDD_HOME As String
Public Success As Boolean
Private Const PROCESS_VM_READ = &H10
Private Const PROCESS_QUERY_INFORMATION = &H400

Public Function GetInfo(ByVal lInfo As Long) As String
    Dim Buffer As String
    Dim Ret As String
    Buffer = String$(256, 0)
    Ret = GetLocaleInfo(LOCALE_USER_DEFAULT, lInfo, Buffer, Len(Buffer))
    If Ret > 0 Then
        GetInfo = Left$(Buffer, Ret - 1)
    Else
        GetInfo = ""
    End If
End Function

Private Sub Btn_Add_Click()
Dim obj As Object
Dim CompName As String
Dim PackageName As String
Dim PrtLib As String
Dim result As Integer
Dim errorString As String
Dim strText As String
Dim FileCXF As String

If Chk_PL_SCH Then
    ExportPL
    PostModelData 4, 2, 2, vbNullString
'Debug.Print "Add to PADS Logic"

On Error GoTo OnErrorGetObject

part = Txt_PartName

Debug.Print part

Set powerLogicApp = GetObject(, "PowerLogic.Application")

If IsNull(part) Or part = vbNullString Then
    Msg = "No Part Type Specified"
    MsgBox Msg, , "SamacSys - ECAD Part Wizard"
Else
    
    'Deselects all objects
    
    Call powerLogicApp.ActiveDocument.SelectObjects(, , False)
    
    On Error GoTo PartNotFound
    
    Set NewPart = powerLogicApp.ActiveDocument.ActiveSheet.AddGate(part, , , 0, 0)
    NewPart.Selected = True
    AddedComp = powerLogicApp.ActiveDocument.Gates(NewPart.Name).Component.Name
    Call powerLogicApp.ProcessCommand(561)
    
    powerLogicApp.ActiveDocument.ActiveView.Refresh

End If

    Set powerLogicApp = Nothing

Exit Sub

OnErrorGetObject:
    Msg = "Cannot connect to a running PADS Logic Session!"
    MsgBox Msg, , "SamacSys - ECAD Part Wizard"
    Exit Sub
PartNotFound:
    Msg = part & " does not exist in any of the open libraries."
    MsgBox Msg, , "SamacSys - ECAD Part Wizard"


ElseIf Chk_DS_SCH Then

    ExportDS
    PostModelData 4, 1, 1, vbNullString
    
    'Function AddComponentOnCursor(CompName As String, PackageName As String, LibraryName As String) As Integer
    
    
    CompName = Left(Txt_PartName.Value, 30)
    PackageName = Left(cbo_PCB.Value, 30)
    
    'On Error GoTo OnErrorGetObjectDesignSpark
    
    Set obj = CreateObject("dspcb.application")
    obj.Show
    obj.SetUserCtrl
    
    PrtLib = cbo_LibLst.List(cbo_LibLst.ListIndex, 1)
    PrtLibName = cbo_LibLst
    
    Debug.Print CompName
    Debug.Print PackageName
    Debug.Print PrtLib
    Debug.Print PrtLibName
    
    obj.AddComponentOnCursor CompName, PackageName, PrtLib, result
'    obj.GetLastErrorString errorString
    
    'Debug.Print result
'    If result = 1 Then MsgBox errorString
    
    Set obj = Nothing
    

    
    'Exit Sub
    'OnErrorGetObjectDesignSpark:
    '        Msg = "Cannot connect to a running DesignSpark Session!"
    '        MsgBox Msg, vbCritical, "ECAD Part Wizard"
    '        Exit Sub
    
ElseIf Chk_T3001 Then


    Debug.Print "Copy contents of CXF to clipboard"
    
    FileCXF = ExportT3001
    
    CopyFileToClipboard FileCXF
    
'    strText = GetFileContent(FileCXF)
'    MsgBox strText
    
'    Set clipboard = New MSForms.DataObject
'    clipboard.SetText "$CF_TARGET_CXF" & vbCrLf & strText
'    clipboard.PutInClipboard
    
End If
    
End Sub

Private Sub btn_Browse_Click()

ExportPath = FindFolder
If ExportPath <> vbNullString Then
    If Right(ExportPath, 1) <> "\" Then ExportPath = ExportPath & "\"
    txt_ExportDir.Text = ExportPath
    Sheets("Setup").Range("B16") = ExportPath
    
    If Chk_DX_SCH Then
        If Not DirExists(ExportPath & "sym/") Then
            MkDir ExportPath & "sym/"
        End If
    End If
End If

End Sub
Public Function FindFolder() As String

With Application.FileDialog(msoFileDialogFolderPicker) 'Grab copy of the Office file dialog (pick folders)
.AllowMultiSelect = False 'Select only one file
.Title = "Locate Folder" 'Set dialog title
.ButtonName = "Select" 'Set the button caption

'Set initial path
If Sheets("Setup").Range("B16").Value = vbNullString Then
    .InitialFileName = "C:\"
Else
    .InitialFileName = Sheets("Setup").Range("B16").Value
End If

.InitialView = msoFileDialogViewList

'Show the dialog and test the return
If .Show = 0 Then
'didn't pick a file - exit sub
Exit Function
End If

'Should be only one file name - grab it
FindFolder = .SelectedItems(1) 'Full path

On Error Resume Next 'Set error trap

End With

End Function

Public Function DirExists(OrigFile As String)
Dim fs
Set fs = CreateObject("Scripting.FileSystemObject")
DirExists = fs.FolderExists(OrigFile)
Set fs = Nothing
End Function

Private Sub btn_Cancel_Click()
Unload Me
End Sub

Private Sub Btn_ExpImpGuides_Click()
    ThisWorkbook.FollowHyperlink Address:="http://www.samacsys.com/epw-ecad-exports/", NewWindow:=True
End Sub

Private Sub Btn_OK_Click()

Success = False

If Chk_PL_SCH Then
    ExportPL
    If Success Then PostModelData 4, 2, 2, vbNullString
ElseIf Chk_T3001 Then
    ExportT3001
    If Success Then PostModelData 4, 8, 7, vbNullString
ElseIf Chk_PX_SCH Then
    ExportPX
    If Success Then PostModelData 4, 7, 6, vbNullString
ElseIf Chk_DS_SCH Then
    ExportDS
    If Success Then PostModelData 4, 1, 1, vbNullString
ElseIf Chk_PreDS_SCH Then
    ExportPreDS
    If Success Then PostModelData 4, 1, 1, vbNullString
ElseIf Chk_DX_SCH And Chk_PL_PCB Then
    ExportDXPL
    If Success Then PostModelData 4, 3, 2, vbNullString
ElseIf Chk_DX_SCH And Chk_AP_PCB Then
    ExportDXAP
    If Success Then PostModelData 4, 3, 3, vbNullString
ElseIf Chk_OC_SCH And Chk_PL_PCB Then
    ExportOCPL
    If Success Then PostModelData 4, 5, 2, vbNullString
ElseIf Chk_OC_SCH And Chk_AP_PCB Then
    If Not Sheets("Setup").Range("B91") Then
        ExportOCAP
    Else
        ExportOC
    End If
    PostModelData 4, 5, 3, vbNullString
ElseIf Chk_CS_SCH Then
    ExportCS
    If Success Then PostModelData 4, 6, 5, vbNullString
ElseIf Chk_AD_SCH Then
    ExportAD
    If Success Then PostModelData 4, 4, 4, vbNullString
ElseIf Chk_DX_SCH Then
    ExportDX
    If Success Then PostModelData 4, 3, vbNullString, vbNullString
ElseIf Chk_PL_PCB Then
    ExportPL_PCB
    If Success Then PostModelData 4, vbNullString, 2, vbNullString
ElseIf Chk_OC_SCH Then
    ExportOC
    If Success Then PostModelData 4, 5, vbNullString, vbNullString
ElseIf Chk_AP_PCB And Not Sheets("Setup").Range("B91") Then
    ExportAP
    If Success Then PostModelData 4, vbNullString, 3, vbNullString
End If

If Success Then Unload Me

End Sub

Private Sub Btn_REE_Click()
ThisWorkbook.FollowHyperlink Address:="mailto:info@samacsys.com?subject=Request additional ECAD Export support&body=Hi %0A%0AI would like to see ECAD system xxx supported by EPW."
End Sub

Private Sub cbo_LibLst_Change()
If Chk_T3001 Then
    BuildSubCats
End If
End Sub

Private Sub cbo_LibLst_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
If Chk_T3001 Then BuildCats
End Sub
Function BuildSubCats()

On Error Resume Next

cbo_SubCat.Clear

startRow = cbo_LibLst.List(cbo_LibLst.ListIndex, 1)
endRow = cbo_LibLst.List(cbo_LibLst.ListIndex, 2)
SubCatIndex = 0

For Row = startRow To endRow
    LastSpaceIndex = InStrRev(Worksheets("Attributes").Range("G" & Row), Space(1))
    cbo_SubCat.AddItem Mid((Worksheets("Attributes").Range("G" & Row)), 5, LastSpaceIndex - 5)
    
    cbo_SubCat.List(SubCatIndex, 1) = Mid((Worksheets("Attributes").Range("G" & Row)), LastSpaceIndex + 1)
    SubCatIndex = SubCatIndex + 1
Next Row

cbo_SubCat.Value = cbo_SubCat.List(0)

End Function

Function BuildCatsFromAttributes()
    LibLstIndex = -1
    Row = 2
    PrevRow = Row + 1
    While Worksheets("Attributes").Range("G" & Row) <> vbNullString
        
        If Left(Worksheets("Attributes").Range("G" & Row), 5) = "$CAT " Then
            cbo_LibLst.AddItem (Mid(Worksheets("Attributes").Range("G" & Row), 6))

            If LibLstIndex <> -1 Then
                cbo_LibLst.List(LibLstIndex, 1) = PrevRow
                cbo_LibLst.List(LibLstIndex, 2) = Row - 1
                PrevRow = Row + 1
            End If
            LibLstIndex = LibLstIndex + 1
        End If
        
        Row = Row + 1
    Wend
End Function

Function BuildCats()

On Error Resume Next

If Chk_T3001 And cbo_LibLst.ListCount = 0 Then

    WrkShtNm = ActiveSheet.Name
    
    Worksheets("Attributes").Activate
    ActiveSheet.Unprotect Password:="m1llenn1ums4r0s"
    
    Worksheets("Attributes").Range("G1").Select
    Worksheets("Attributes").PasteSpecial Format:="Unicode Text", Link:=False, DisplayAsIcon:=False, NoHTMLFormatting:=True
    
    LibLstIndex = -1
    Row = 2
    PrevRow = Row + 1
    While Worksheets("Attributes").Range("G" & Row) <> vbNullString
        
        If Left(Worksheets("Attributes").Range("G" & Row), 5) = "$CAT " Then
            cbo_LibLst.AddItem (Mid(Worksheets("Attributes").Range("G" & Row), 6))

            If LibLstIndex <> -1 Then
                cbo_LibLst.List(LibLstIndex, 1) = PrevRow
                cbo_LibLst.List(LibLstIndex, 2) = Row - 1
                PrevRow = Row + 1
            End If
            LibLstIndex = LibLstIndex + 1
        End If
        
        Row = Row + 1
    Wend

    If LibLstIndex = -1 Then
        CopyTextToClipboard "$CF_TARGET_CAT_REQ"
    Else
        cbo_LibLst.List(LibLstIndex, 1) = PrevRow
        cbo_LibLst.List(LibLstIndex, 2) = Row - 1
    End If
    
    Worksheets("Attributes").Range("B6").Select
    
    ActiveSheet.Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True

    Worksheets(WrkShtNm).Activate

End If

End Function

Private Sub Chk_AD_PCB_Click()
If Chk_AD_PCB Then
    Chk_AD_SCH = 1
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_PL_SCH = 0
    Chk_DX_SCH = 0
    Chk_PL_PCB = 0
    Chk_OC_SCH = 0
    Chk_AP_PCB = 0
    Chk_CS_SCH = 0
    Chk_CS_PCB = 0
    Chk_PreDS_SCH = 0
    Chk_PreDS_PCB = 0
    Chk_PX_SCH = 0
    Chk_PX_PCB = 0
    Show_PCB
Else
    Chk_AD_SCH = 0
End If
Enable_btn_OK
End Sub

Private Sub Chk_AD_SCH_Click()
If Chk_AD_SCH Then
    Chk_AD_PCB = 1
    Chk_DS_SCH.Enabled = False
    Chk_DS_PCB.Enabled = False
    Chk_PL_SCH.Enabled = False
    Chk_DX_SCH.Enabled = False
    Chk_PL_PCB.Enabled = False
    Chk_OC_SCH.Enabled = False
    Chk_AP_PCB.Enabled = False
    Chk_CS_SCH.Enabled = False
    Chk_CS_PCB.Enabled = False
    Chk_PreDS_SCH.Enabled = False
    Chk_PreDS_PCB.Enabled = False
    Chk_T3001.Enabled = False
    Chk_PX_SCH.Enabled = False
    Chk_PX_PCB.Enabled = False
    
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_PL_SCH = 0
    Chk_DX_SCH = 0
    Chk_PL_PCB = 0
    Chk_OC_SCH = 0
    Chk_AP_PCB = 0
    Chk_CS_SCH = 0
    Chk_CS_PCB = 0
    Chk_PreDS_SCH = 0
    Chk_PreDS_PCB = 0
    Chk_PX_SCH = 0
    Chk_PX_PCB = 0
    
    Show_SCH
Else
    Chk_AD_PCB = 0
    Chk_DS_SCH.Enabled = True
    Chk_DS_PCB.Enabled = True
    If Has_PL_SCH Then Chk_PL_SCH.Enabled = True
    If Has_PL_PCB Then Chk_PL_PCB.Enabled = True
    Chk_DX_SCH.Enabled = True
    Chk_OC_SCH.Enabled = True
    Chk_AP_PCB.Enabled = True
    Chk_CS_SCH.Enabled = True
    Chk_CS_PCB.Enabled = True
    Chk_PreDS_SCH.Enabled = True
    Chk_PreDS_PCB.Enabled = True
    Chk_T3001.Enabled = True
    Chk_PX_SCH.Enabled = True
    Chk_PX_PCB.Enabled = True
    
    Hide_ALL
    
End If
Enable_btn_OK
End Sub

Private Sub Chk_AP_PCB_Click()
If Chk_AP_PCB Then

    Chk_DS_SCH.Enabled = False
    Chk_DS_PCB.Enabled = False
    Chk_PL_SCH.Enabled = False
    Chk_PL_PCB.Enabled = False
    Chk_CS_SCH.Enabled = False
    Chk_CS_PCB.Enabled = False
    Chk_AD_SCH.Enabled = False
    Chk_AD_PCB.Enabled = False
    Chk_PreDS_SCH.Enabled = False
    Chk_PreDS_PCB.Enabled = False
    Chk_T3001.Enabled = False
    Chk_PX_SCH.Enabled = False
    Chk_PX_PCB.Enabled = False

    
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_PL_SCH = 0
    Chk_PL_PCB = 0
    Chk_CS_SCH = 0
    Chk_CS_PCB = 0
    Chk_AD_SCH = 0
    Chk_AD_PCB = 0
    Chk_PreDS_SCH = 0
    Chk_PreDS_PCB = 0
    Chk_PX_SCH = 0
    Chk_PX_PCB = 0
    
    Show_PCB
    
Else
    Chk_OC_SCH = 0
    Chk_DX_SCH = 0
    
    Chk_DS_SCH.Enabled = True
    Chk_DS_PCB.Enabled = True
    If Has_PL_SCH Then Chk_PL_SCH.Enabled = True
    If Has_PL_PCB Then Chk_PL_PCB.Enabled = True
    Chk_CS_SCH.Enabled = True
    Chk_CS_PCB.Enabled = True
    Chk_AD_SCH.Enabled = True
    Chk_AD_PCB.Enabled = True
    Chk_PreDS_SCH.Enabled = True
    Chk_PreDS_PCB.Enabled = True
    Chk_T3001.Enabled = True
    Chk_PX_SCH.Enabled = True
    Chk_PX_PCB.Enabled = True
    
    Hide_ALL
    
End If
Enable_btn_OK
End Sub

Private Sub Chk_CS_PCB_Click()
If Chk_CS_PCB Then

    Chk_CS_SCH = 1
    Chk_DS_SCH.Enabled = False
    Chk_DS_PCB.Enabled = False
    Chk_PL_SCH.Enabled = False
    Chk_PL_PCB.Enabled = False
    Chk_OC_SCH.Enabled = False
    Chk_AP_PCB.Enabled = False
    Chk_AD_SCH.Enabled = False
    Chk_AD_PCB.Enabled = False
    Chk_PreDS_SCH.Enabled = False
    Chk_PreDS_PCB.Enabled = False
    
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_PL_SCH = 0
    Chk_DX_SCH = 0
    Chk_PL_PCB = 0
    Chk_OC_SCH = 0
    Chk_AP_PCB = 0
    Chk_PreDS_SCH = 0
    Chk_PreDS_PCB = 0
    Chk_PX_SCH = 0
    Chk_PX_PCB = 0
    
    Show_PCB
Else
    Chk_CS_SCH = 0
End If
Enable_btn_OK
End Sub

Private Sub Chk_CS_SCH_Click()
If Chk_CS_SCH Then
    Chk_CS_PCB = 1
    Chk_DS_SCH.Enabled = False
    Chk_DS_PCB.Enabled = False
    Chk_PL_SCH.Enabled = False
    Chk_DX_SCH.Enabled = False
    Chk_PL_PCB.Enabled = False
    Chk_OC_SCH.Enabled = False
    Chk_AP_PCB.Enabled = False
    Chk_AD_SCH.Enabled = False
    Chk_AD_PCB.Enabled = False
    Chk_T3001.Enabled = False
    Chk_PX_SCH.Enabled = False
    Chk_PX_PCB.Enabled = False

    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_PL_SCH = 0
    Chk_DX_SCH = 0
    Chk_PL_PCB = 0
    Chk_OC_SCH = 0
    Chk_AP_PCB = 0
    Chk_AD_SCH = 0
    Chk_AD_PCB = 0
    Chk_PreDS_SCH = 0
    Chk_PreDS_PCB = 0
    Chk_PX_SCH = 0
    Chk_PX_PCB = 0
    
    Show_SCH
    
Else
    Chk_CS_PCB = 0
    
    Chk_DS_SCH.Enabled = True
    Chk_DS_PCB.Enabled = True
    Chk_DX_SCH.Enabled = True
    If Has_PL_SCH Then Chk_PL_SCH.Enabled = True
    If Has_PL_PCB Then Chk_PL_PCB.Enabled = True
    Chk_OC_SCH.Enabled = True
    Chk_AP_PCB.Enabled = True
    Chk_AD_SCH.Enabled = True
    Chk_AD_PCB.Enabled = True
    Chk_T3001.Enabled = True
    Chk_PX_SCH.Enabled = True
    Chk_PX_PCB.Enabled = True
    
    Hide_ALL
    
End If
Enable_btn_OK
End Sub
Private Sub Chk_DS_PCB_Click()
    If Chk_DS_PCB Then
    
        Chk_DS_SCH = 1
        
        Chk_PL_SCH = 0
        Chk_DX_SCH = 0
        Chk_PL_PCB = 0
        Chk_OC_SCH = 0
        Chk_AP_PCB = 0
        Chk_CS_SCH = 0
        Chk_CS_PCB = 0
        Chk_PreDS_SCH = 0
        Chk_PreDS_PCB = 0
        Chk_PX_SCH = 0
        Chk_PX_PCB = 0
        
        If SetDesignSparkExe Then
            Show_PCB
        Else
            Chk_DS_SCH = 0
            Chk_DS_PCB = 0
            
            If Has_PL_SCH Then Chk_PL_SCH.Enabled = True
            If Has_PL_PCB Then Chk_PL_PCB.Enabled = True
            Chk_DX_SCH.Enabled = True
            Chk_OC_SCH.Enabled = True
            Chk_AP_PCB.Enabled = True
            Chk_CS_SCH.Enabled = True
            Chk_CS_PCB.Enabled = True
            Chk_PreDS_SCH.Enabled = True
            Chk_PreDS_PCB.Enabled = True
            
            Hide_ALL
        End If
    Else
        Chk_DS_SCH = 0
    End If
    Enable_btn_OK
End Sub
Public Function FindDSPCBexe() As String

With Application.FileDialog(msoFileDialogFilePicker) 'Grab copy of the Office file dialog (pick folders)
.AllowMultiSelect = False 'Select only one file
.Title = "Locate DesignSpark.exe" 'Set dialog title
.ButtonName = "Select" 'Set the button caption
.Filters.Clear
.Filters.Add "DesignSpark Executable", "*.exe"
'Set initial path
.InitialFileName = "C:\"

.InitialView = msoFileDialogViewList

'Show the dialog and test the return
If .Show = 0 Then
'didn't pick a file - exit sub
Exit Function
End If

'Should be only one file name - grab it
FindDSPCBexe = .SelectedItems(1) 'Full path

On Error Resume Next 'Set error trap

End With

End Function
Function RegKeyExists(i_RegKey As String) As Boolean
Dim myWS As Object
 
  On Error GoTo ErrorHandler
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  'try to read the registry key
  myWS.RegRead i_RegKey
  'key was found
  RegKeyExists = True
  Exit Function
   
ErrorHandler:
  'key was not found
  RegKeyExists = False
End Function
Function IsVBATrusted() As Boolean

    Const HKEY_CURRENT_USER = &H80000001
    
    Dim sComputer As String
    Dim sOfficeVersion As String
    Dim sKeyPath As String
    Dim sValueName As String
    Dim lValue As Long
    Dim oReg As Object
    
    DecimalSymbol = GetInfo(LOCALE_SDECIMAL)
    sOfficeVersion = Replace(Application.Version, DecimalSymbol, ".")
    sComputer = "."
    sKeyPath = "Software\Microsoft\Office\" & sOfficeVersion & "\Excel\Security"
    sKeyPath2 = "Software\Policies\Microsoft\Office\" & sOfficeVersion & "\Excel\Security"
    
    'Check for existence of AccessVBOM registry key
    If Not RegKeyExists("HKEY_CURRENT_USER\" & sKeyPath & "\AccessVBOM") And Not RegKeyExists("HKEY_CURRENT_USER\" & sKeyPath2 & "\AccessVBOM") Then
        IsVBATrusted = False
        Exit Function
    End If
    
    Set oReg = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & sComputer & "\root\default:StdRegProv")
    sValueName = "AccessVBOM"
    oReg.GetDWORDValue HKEY_CURRENT_USER, sKeyPath, sValueName, lValue
    
    IsVBATrusted = lValue

End Function

Private Sub Chk_DS_Sch_Click()
    If Chk_DS_SCH Then
    
    
        Chk_PL_SCH.Enabled = False
        Chk_DX_SCH.Enabled = False
        Chk_PL_PCB.Enabled = False
        Chk_OC_SCH.Enabled = False
        Chk_AP_PCB.Enabled = False
        Chk_CS_SCH.Enabled = False
        Chk_CS_PCB.Enabled = False
        Chk_AD_SCH.Enabled = False
        Chk_AD_PCB.Enabled = False
        Chk_PreDS_SCH.Enabled = False
        Chk_PreDS_PCB.Enabled = False
        Chk_T3001.Enabled = False
        Chk_PX_SCH.Enabled = False
        Chk_PX_PCB.Enabled = False
    
        Chk_DS_PCB = 1
        
        Chk_PL_SCH = 0
        Chk_DX_SCH = 0
        Chk_PL_PCB = 0
        Chk_OC_SCH = 0
        Chk_AP_PCB = 0
        Chk_CS_SCH = 0
        Chk_CS_PCB = 0
        Chk_PreDS_SCH = 0
        Chk_PreDS_PCB = 0
        Chk_PX_SCH = 0
        Chk_PX_PCB = 0
        
        If SetDesignSparkExe Then
            Show_SCH
        Else
            Chk_DS_SCH = 0
            Chk_DS_PCB = 0
            
            If Has_PL_SCH Then Chk_PL_SCH.Enabled = True
            If Has_PL_PCB Then Chk_PL_PCB.Enabled = True
            Chk_DX_SCH.Enabled = True
            Chk_OC_SCH.Enabled = True
            Chk_AP_PCB.Enabled = True
            Chk_CS_SCH.Enabled = True
            Chk_CS_PCB.Enabled = True
            Chk_PreDS_SCH.Enabled = True
            Chk_PreDS_PCB.Enabled = True
            Chk_AD_SCH.Enabled = True
            Chk_AD_PCB.Enabled = True
            Chk_T3001.Enabled = True
            Chk_PX_SCH.Enabled = True
            Chk_PX_PCB.Enabled = True
            
            Hide_ALL
        End If
    Else
    
        Chk_DS_PCB = 0
        If Has_PL_SCH Then Chk_PL_SCH.Enabled = True
        If Has_PL_PCB Then Chk_PL_PCB.Enabled = True
        Chk_DX_SCH.Enabled = True
        Chk_OC_SCH.Enabled = True
        Chk_AP_PCB.Enabled = True
        Chk_CS_SCH.Enabled = True
        Chk_CS_PCB.Enabled = True
        Chk_PreDS_SCH.Enabled = True
        Chk_PreDS_PCB.Enabled = True
        Chk_AD_SCH.Enabled = True
        Chk_AD_PCB.Enabled = True
        Chk_T3001.Enabled = True
        Chk_PX_SCH.Enabled = True
        Chk_PX_PCB.Enabled = True
        
        Hide_ALL
        
    End If
    Enable_btn_OK
End Sub
Function SetDesignSparkExe() As Boolean
    DSPCBexe = GetSetting("EPW", "Settings", "DesignSpark", "")
    If DSPCBexe = vbNullString Then
        MsgBox "Please browse to locate DesignSpark.exe.  The default location is as follows:" & vbCrLf & vbCrLf & "C:\Program Files\DesignSpark\DesignSpark PCB 7.0\DesignSpark.exe (for 32-bit OS)" & _
        vbCrLf & vbCrLf & "C:\Program Files (x86)\DesignSpark\DesignSpark PCB 7.0\DesignSpark.exe (for 64-bit OS)", vbInformation, "SamacSys - EPW"
        DSPCBexe = FindDSPCBexe
        If DSPCBexe <> vbNullString Then
            SaveSetting "EPW", "Settings", "DesignSpark", DSPCBexe
        Else
           SetDesignSparkExe = False
           Exit Function
        End If
    End If
    On Error Resume Next
    
    Lbl_DesignSpark.Caption = "Using " & Chr(34) & DSPCBexe & Chr(34) & " Click here to change."
'Check TrustVBA
    If Not IsVBATrusted Then
        frm_TrustVBA.Show
        Unload Me
    End If
    ActiveWorkbook.VBProject.References.AddFromFile DSPCBexe
    SetDesignSparkExe = True
End Function
Function ChangeDesignSparkExe()
        On Error Resume Next
        ActiveWorkbook.VBProject.References.Remove ThisWorkbook.VBProject.References("dspcb")
        MsgBox "Please browse to locate DesignSpark.exe.  The default location is as follows:" & vbCrLf & vbCrLf & "C:\Program Files\DesignSpark\DesignSpark PCB 7.0\DesignSpark.exe (for 32-bit OS)" & _
        vbCrLf & vbCrLf & "C:\Program Files (x86)\DesignSpark\DesignSpark PCB 7.0\DesignSpark.exe (for 64-bit OS)", vbInformation, "SamacSys - EPW"
        DSPCBexe = FindDSPCBexe
        If DSPCBexe <> vbNullString Then
            SaveSetting "EPW", "Settings", "DesignSpark", DSPCBexe
            Lbl_DesignSpark.Caption = "Using " & Chr(34) & DSPCBexe & Chr(34) & " Click here to change."
        Else
           Exit Function
        End If
    ActiveWorkbook.VBProject.References.AddFromFile DSPCBexe
    Unload Me
End Function
Private Sub Chk_DX_SCH_Click()
If Chk_DX_SCH Then
    Chk_DS_SCH.Enabled = False
    Chk_DS_PCB.Enabled = False
    Chk_PL_SCH.Enabled = False
    Chk_OC_SCH.Enabled = False
    Chk_CS_SCH.Enabled = False
    Chk_CS_PCB.Enabled = False
    Chk_AD_SCH.Enabled = False
    Chk_AD_PCB.Enabled = False
    Chk_PreDS_SCH.Enabled = False
    Chk_PreDS_PCB.Enabled = False
    Chk_T3001.Enabled = False
    Chk_PX_SCH.Enabled = False
    Chk_PX_PCB.Enabled = False
    
    Chk_PreAD_SCH = 0
    Chk_PreAD_PCB = 0
    Chk_AD_SCH = 0
    Chk_AD_PCB = 0
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_PL_SCH = 0
    Chk_OC_SCH = 0
    Chk_CS_SCH = 0
    Chk_CS_PCB = 0
    Chk_PX_SCH = 0
    Chk_PX_PCB = 0
    
    Show_SCH
    
Else
    Chk_PL_PCB = 0
    Chk_AP_PCB = 0
    
    Chk_PreDS_SCH.Enabled = True
    Chk_PreDS_PCB.Enabled = True
    Chk_DS_SCH.Enabled = True
    Chk_DS_PCB.Enabled = True
    If Has_PL_SCH Then Chk_PL_SCH.Enabled = True
    If Has_PL_PCB Then Chk_PL_PCB.Enabled = True
    Chk_OC_SCH.Enabled = True
    Chk_CS_SCH.Enabled = True
    Chk_CS_PCB.Enabled = True
    Chk_AD_SCH.Enabled = True
    Chk_AD_PCB.Enabled = True
    Chk_T3001.Enabled = True
    Chk_PX_SCH.Enabled = True
    Chk_PX_PCB.Enabled = True
    
    Hide_ALL
    
End If
Enable_btn_OK
End Sub

Private Sub Chk_OC_SCH_Click()
If Chk_OC_SCH Then
    Chk_DS_SCH.Enabled = False
    Chk_DS_PCB.Enabled = False
    Chk_PL_SCH.Enabled = False
    Chk_DX_SCH.Enabled = False
    Chk_CS_SCH.Enabled = False
    Chk_CS_PCB.Enabled = False
    Chk_AD_SCH.Enabled = False
    Chk_AD_PCB.Enabled = False
    Chk_PreDS_SCH.Enabled = False
    Chk_PreDS_PCB.Enabled = False
    Chk_T3001.Enabled = False
    Chk_PX_SCH.Enabled = False
    Chk_PX_PCB.Enabled = False
    
    Chk_PreDS_SCH = 0
    Chk_PreDS_PCB = 0
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_PL_SCH = 0
    Chk_DX_SCH = 0
    Chk_CS_SCH = 0
    Chk_CS_PCB = 0
    Chk_AD_SCH = 0
    Chk_AD_PCB = 0
    Chk_PX_SCH = 0
    Chk_PX_PCB = 0
    
    Show_SCH
    
Else
    Chk_OC_SCH = 0
    Chk_AP_PCB = 0
    Chk_PL_PCB = 0
    
    Chk_PreDS_SCH.Enabled = True
    Chk_PreDS_PCB.Enabled = True
    Chk_DS_SCH.Enabled = True
    Chk_DS_PCB.Enabled = True
    If Has_PL_SCH Then Chk_PL_SCH.Enabled = True
    If Has_PL_PCB Then Chk_PL_PCB.Enabled = True
    Chk_DX_SCH.Enabled = True
    Chk_CS_SCH.Enabled = True
    Chk_CS_PCB.Enabled = True
    Chk_AD_SCH.Enabled = True
    Chk_AD_PCB.Enabled = True
    Chk_T3001.Enabled = True
    Chk_PX_SCH.Enabled = True
    Chk_PX_PCB.Enabled = True
    
    Hide_ALL
    
End If
Enable_btn_OK
End Sub

Private Sub Chk_PL_PCB_Click()
If Chk_PL_PCB Then
    Chk_DS_SCH.Enabled = False
    Chk_DS_PCB.Enabled = False
    Chk_AP_PCB.Enabled = False
    Chk_CS_SCH.Enabled = False
    Chk_CS_PCB.Enabled = False
    Chk_AD_SCH.Enabled = False
    Chk_AD_PCB.Enabled = False
    Chk_PreDS_SCH.Enabled = False
    Chk_PreDS_PCB.Enabled = False
    Chk_T3001.Enabled = False
    Chk_PX_SCH.Enabled = False
    Chk_PX_PCB.Enabled = False
    
    
    Chk_PreDS_SCH = 0
    Chk_PreDS_PCB = 0
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_AP_PCB = 0
    Chk_CS_SCH = 0
    Chk_CS_PCB = 0
    Chk_AD_SCH = 0
    Chk_AD_PCB = 0
    Chk_PX_SCH = 0
    Chk_PX_PCB = 0
    
    Show_PCB
    
Else
    Chk_PL_SCH = 0
    Chk_DX_SCH = 0
    Chk_OC_SCH = 0
    
    Chk_PreDS_SCH.Enabled = True
    Chk_PreDS_PCB.Enabled = True
    Chk_DS_SCH.Enabled = True
    Chk_DS_PCB.Enabled = True
    Chk_OC_SCH.Enabled = True
    Chk_AP_PCB.Enabled = True
    Chk_CS_SCH.Enabled = True
    Chk_CS_PCB.Enabled = True
    Chk_AD_SCH.Enabled = True
    Chk_AD_PCB.Enabled = True
    Chk_T3001.Enabled = True
    Chk_PX_SCH.Enabled = True
    Chk_PX_PCB.Enabled = True
    
    Hide_ALL
    
End If
Enable_btn_OK
End Sub

Private Sub Chk_PL_SCH_Click()
If Chk_PL_SCH Then
    Chk_PL_PCB = 1
    Chk_DS_SCH.Enabled = False
    Chk_DS_PCB.Enabled = False
    Chk_DX_SCH.Enabled = False
    Chk_OC_SCH.Enabled = False
    Chk_AP_PCB.Enabled = False
    Chk_CS_SCH.Enabled = False
    Chk_CS_PCB.Enabled = False
    Chk_AD_SCH.Enabled = False
    Chk_AD_PCB.Enabled = False
    Chk_PreDS_SCH.Enabled = False
    Chk_PreDS_PCB.Enabled = False
    Chk_T3001.Enabled = False
    Chk_PX_SCH.Enabled = False
    Chk_PX_PCB.Enabled = False
    
    Chk_AD_SCH = 0
    Chk_AD_PCB = 0
    
    Chk_PreDS_SCH = 0
    Chk_PreDS_PCB = 0
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_DX_SCH = 0
    Chk_OC_SCH = 0
    Chk_AP_PCB = 0
    Chk_CS_SCH = 0
    Chk_CS_PCB = 0
    Chk_PX_SCH = 0
    Chk_PX_PCB = 0
    
    Show_SCH
'    Show_PCB
    
Else
    Chk_PL_PCB = 0
    Chk_PreDS_SCH.Enabled = True
    Chk_PreDS_PCB.Enabled = True
    Chk_DS_SCH.Enabled = True
    Chk_DS_PCB.Enabled = True
    Chk_DX_SCH.Enabled = True
    Chk_OC_SCH.Enabled = True
    Chk_AP_PCB.Enabled = True
    Chk_CS_SCH.Enabled = True
    Chk_CS_PCB.Enabled = True
    Chk_AD_SCH.Enabled = True
    Chk_AD_PCB.Enabled = True
    Chk_T3001.Enabled = True
    Chk_PX_SCH.Enabled = True
    Chk_PX_PCB.Enabled = True
    
    Hide_ALL
    
End If
Enable_btn_OK
End Sub


Private Sub Chk_PX_PCB_Click()
If Chk_PX_PCB Then
    Chk_PX_SCH = 1
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_PL_SCH = 0
    Chk_DX_SCH = 0
    Chk_PL_PCB = 0
    Chk_OC_SCH = 0
    Chk_AP_PCB = 0
    Chk_CS_SCH = 0
    Chk_CS_PCB = 0
    Chk_PreDS_SCH = 0
    Chk_PreDS_PCB = 0
    Chk_AD_SCH = 0
    Chk_AD_PCB = 0
    Show_PCB
Else
    Chk_PX_SCH = 0
'    Hide_ALL
End If
Enable_btn_OK
End Sub

Private Sub Chk_PX_SCH_Click()
If Chk_PX_SCH Then
    Chk_PX_PCB = 1
    Chk_DS_SCH.Enabled = False
    Chk_DS_PCB.Enabled = False
    Chk_PL_SCH.Enabled = False
    Chk_DX_SCH.Enabled = False
    Chk_PL_PCB.Enabled = False
    Chk_OC_SCH.Enabled = False
    Chk_AP_PCB.Enabled = False
    Chk_CS_SCH.Enabled = False
    Chk_CS_PCB.Enabled = False
    Chk_PreDS_SCH.Enabled = False
    Chk_PreDS_PCB.Enabled = False
    Chk_T3001.Enabled = False
    Chk_AD_SCH.Enabled = False
    Chk_AD_PCB.Enabled = False
    
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_PL_SCH = 0
    Chk_DX_SCH = 0
    Chk_PL_PCB = 0
    Chk_OC_SCH = 0
    Chk_AP_PCB = 0
    Chk_CS_SCH = 0
    Chk_CS_PCB = 0
    Chk_PreDS_SCH = 0
    Chk_PreDS_PCB = 0
    Chk_AD_SCH = 0
    Chk_AD_PCB = 0
    
    Show_SCH
Else
    Chk_PX_PCB = 0
    Chk_DS_SCH.Enabled = True
    Chk_DS_PCB.Enabled = True
    If Has_PL_SCH Then Chk_PL_SCH.Enabled = True
    If Has_PL_PCB Then Chk_PL_PCB.Enabled = True
    Chk_DX_SCH.Enabled = True
    Chk_OC_SCH.Enabled = True
    Chk_AP_PCB.Enabled = True
    Chk_CS_SCH.Enabled = True
    Chk_CS_PCB.Enabled = True
    Chk_PreDS_SCH.Enabled = True
    Chk_PreDS_PCB.Enabled = True
    Chk_T3001.Enabled = True
    Chk_AD_SCH.Enabled = True
    Chk_AD_PCB.Enabled = True
    
    Hide_ALL
    
End If
Enable_btn_OK





End Sub

Private Sub Chk_T3001_Click()
If Chk_T3001 Then

    LaunchTARGET3001

    If Sheets("Setup").Range("C13").Value = vbNullString Then
        WrkShtNm = ActiveSheet.Name

        Worksheets("Attributes").Activate
        Worksheets("Attributes").Columns("G:G").Select
        Selection.ClearContents
    
        Worksheets("Attributes").Range("B6").Select
    
        Worksheets(WrkShtNm).Activate
    
        cbo_LibLst.Clear
        cbo_SubCat.Clear

'        Set clipboard = New MSForms.DataObject
        CopyTextToClipboard "$CF_TARGET_CAT_REQ"
'        clipboard.PutInClipboard
    End If
    
    Chk_T3001 = 1
    
    Chk_PL_SCH.Enabled = False
    Chk_PL_PCB.Enabled = False
    Chk_DS_SCH.Enabled = False
    Chk_DS_PCB.Enabled = False
    Chk_DX_SCH.Enabled = False
    Chk_OC_SCH.Enabled = False
    Chk_AP_PCB.Enabled = False
    Chk_CS_SCH.Enabled = False
    Chk_CS_PCB.Enabled = False
    Chk_AD_SCH.Enabled = False
    Chk_AD_PCB.Enabled = False
    Chk_PreDS_SCH.Enabled = False
    Chk_PreDS_PCB.Enabled = False
    Chk_PX_SCH.Enabled = False
    Chk_PX_PCB.Enabled = False
    
    
    Chk_PL_SCH = 0
    Chk_PL_PCB = 0
    Chk_AD_SCH = 0
    Chk_AD_PCB = 0
    Chk_PreDS_SCH = 0
    Chk_PreDS_PCB = 0
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_DX_SCH = 0
    Chk_OC_SCH = 0
    Chk_AP_PCB = 0
    Chk_CS_SCH = 0
    Chk_CS_PCB = 0
    Chk_PX_SCH = 0
    Chk_PX_PCB = 0
    
    Show_SCH
    Show_PCB
    
Else
    
    Chk_PL_SCH.Enabled = True
    Chk_PL_PCB.Enabled = True
    Chk_PreDS_SCH.Enabled = True
    Chk_PreDS_PCB.Enabled = True
    Chk_DS_SCH.Enabled = True
    Chk_DS_PCB.Enabled = True
    Chk_DX_SCH.Enabled = True
    Chk_OC_SCH.Enabled = True
    Chk_AP_PCB.Enabled = True
    Chk_CS_SCH.Enabled = True
    Chk_CS_PCB.Enabled = True
    Chk_AD_SCH.Enabled = True
    Chk_AD_PCB.Enabled = True
    Chk_PX_SCH.Enabled = True
    Chk_PX_PCB.Enabled = True
    
    Hide_ALL
    
End If
Enable_btn_OK
End Sub
Function Enable_btn_OK()
If Chk_DS_SCH And Chk_DS_PCB Then
    If cbo_LibPCB.ListCount <> 0 Then
        Btn_OK.Enabled = True
        Show_PRT
    End If
ElseIf Chk_T3001 Or ((Chk_PreDS_SCH Or Chk_PL_SCH Or Chk_OC_SCH Or Chk_CS_SCH Or Chk_AD_SCH Or Chk_PX_SCH) And (Chk_PreDS_PCB Or Chk_AP_PCB Or Chk_CS_PCB Or Chk_AD_PCB Or Chk_PX_PCB)) Then
    Btn_OK.Enabled = True
    Show_PRT
ElseIf Chk_DX_SCH Or Chk_PL_PCB Or Chk_OC_SCH Or Chk_AP_PCB Then
    Btn_OK.Enabled = True
    Show_PRT
Else
    Btn_OK.Enabled = False
End If
End Function

Function Show_SCH()
If Chk_DS_SCH Or Chk_PreDS_SCH Then

    cbo_PinLength.Clear
    cbo_PinPitch.Clear
    
    Lbl_BaseName.Visible = True
    txt_BaseName.Visible = True
    txt_BaseName.Value = Sheets("Setup").Cells(10, 2).Value
    
    Lbl_PinLength.Visible = True
    Lbl_PinLength.Caption = "Pin Length"
    cbo_PinLength.Visible = True
    cbo_PinLength.AddItem ("100")
    cbo_PinLength.AddItem ("200")
    If Sheets("Setup").Cells(8, 2).Value = vbNullString Then
        cbo_PinLength.Value = cbo_PinLength.List(1)
    Else
        cbo_PinLength.Value = Sheets("Setup").Cells(8, 2).Value
    End If
    
    Lbl_PinPitch.Visible = True
    Lbl_PinPitch.Caption = "Pin Pitch"
    cbo_PinPitch.Visible = True
    cbo_PinPitch.AddItem ("100")
    cbo_PinPitch.AddItem ("200")
    If Sheets("Setup").Cells(12, 2).Value = vbNullString Or Sheets("Setup").Cells(12, 2).Value <> "100" Or Sheets("Setup").Cells(12, 2).Value <> "200" Then
        cbo_PinPitch.Value = cbo_PinPitch.List(0)
    Else
        cbo_PinPitch.Value = Sheets("Setup").Cells(12, 2).Value
    End If
    
    Lbl_Export.Caption = "Note: Symbol/Footprint and Part Names exceeding 30 characters will be truncated."
    
    If Chk_DS_SCH Then
    
    
        Lbl_LibSym.Visible = True
        cbo_LibSym.Visible = True
        
        
        Dim obj As Object
        Dim libName As String
        On Error Resume Next
        Set obj = CreateObject("dspcb.application")
        obj.Show
        obj.SetUserCtrl
    
        libType = ltSymbol
            obj.GetFirstLibraryName libType, libName
            i = 0
            cbo_LibSym.Clear
            While (libName <> "")
                LastSlashIndex = InStrRev(libName, "\")
                cbo_LibSym.AddItem Mid(libName, LastSlashIndex + 1)
                cbo_LibSym.List(i, 1) = libName
                obj.GetNextLibraryName libType, libName
                i = i + 1
            Wend
            cbo_LibSym.ListIndex = 0
            
        Set obj = Nothing
    
    End If

    
    
ElseIf Chk_PL_SCH Then
    
    cbo_PinLength.Clear
    cbo_PinPitch.Clear
    
    Lbl_BaseName.Visible = True
    txt_BaseName.Visible = True
    txt_BaseName.Value = Sheets("Setup").Cells(10, 2).Value
    
    Lbl_PinLength.Visible = True
    Lbl_PinLength.Caption = "Pin Decal"
    cbo_PinLength.Visible = True

    Lbl_PinPitch.Visible = True
    Lbl_PinPitch.Caption = "Pin Pitch"
    cbo_PinPitch.Visible = True
    cbo_PinPitch.AddItem ("100")
    cbo_PinPitch.AddItem ("200")
    If Sheets("Setup").Cells(12, 2).Value = vbNullString Or Sheets("Setup").Cells(12, 2).Value <> "100" Or Sheets("Setup").Cells(12, 2).Value <> "200" Then
        cbo_PinPitch.Value = cbo_PinPitch.List(0)
    Else
        cbo_PinPitch.Value = Sheets("Setup").Cells(12, 2).Value
    End If
    
    Lbl_Export.Caption = "Note: Pin Names exceeding 40 characters will be truncated."
    
    Btn_Add.Enabled = True
    
ElseIf Chk_DX_SCH Then
    cbo_PinPitch.Clear
    
    Lbl_BaseName.Visible = True
    txt_BaseName.Visible = True
    txt_BaseName.Value = Sheets("Setup").Cells(10, 2).Value

    Lbl_PinPitch.Visible = True
    Lbl_PinPitch.Caption = "Pin Pitch"
    cbo_PinPitch.Visible = True
    cbo_PinPitch.AddItem ("0.1")
    cbo_PinPitch.AddItem ("0.2")
    If Sheets("Setup").Cells(12, 2).Value = vbNullString Or Sheets("Setup").Cells(12, 2).Value <> "0.1" Or Sheets("Setup").Cells(12, 2).Value <> "0.2" Then
        cbo_PinPitch.Value = cbo_PinPitch.List(0)
    Else
        cbo_PinPitch.Value = Sheets("Setup").Cells(12, 2).Value
    End If
    
    Btn_Add.Enabled = False
    
ElseIf Chk_OC_SCH Then
    cbo_PinLength.Clear
    cbo_PinPitch.Clear
    
    Lbl_PinLength.Visible = True
    Lbl_PinLength.Caption = "Pin Length"
    cbo_PinLength.Visible = True
    cbo_PinLength.AddItem ("100")
    cbo_PinLength.AddItem ("200")
    If Sheets("Setup").Cells(8, 2).Value = vbNullString Then
        cbo_PinLength.Value = cbo_PinLength.List(1)
    Else
        cbo_PinLength.Value = Sheets("Setup").Cells(8, 2).Value
    End If
    
    Lbl_PinPitch.Visible = True
    Lbl_PinPitch.Caption = "Pin Pitch"
    cbo_PinPitch.Visible = True
    cbo_PinPitch.AddItem ("100")
    cbo_PinPitch.AddItem ("200")
    If Sheets("Setup").Cells(12, 2).Value = vbNullString Or Sheets("Setup").Cells(12, 2).Value <> "100" Or Sheets("Setup").Cells(12, 2).Value <> "200" Then
        cbo_PinPitch.Value = cbo_PinPitch.List(0)
    Else
        cbo_PinPitch.Value = Sheets("Setup").Cells(12, 2).Value
    End If
    
    Lbl_PinShape.Visible = True
    cbo_PinShape.Visible = True
    cbo_PinShape.AddItem ("Line")
    cbo_PinShape.AddItem ("Clock")
    cbo_PinShape.AddItem ("Dot")
    cbo_PinShape.AddItem ("Dot-Clock")
    cbo_PinShape.AddItem ("Short Clock")
    cbo_PinShape.AddItem ("Short Dot")
    cbo_PinShape.AddItem ("Short Dot Clock")
    cbo_PinShape.AddItem ("Short")
    cbo_PinShape.AddItem ("Zero Length")

    If Sheets("Setup").Cells(19, 2).Value = vbNullString Then
        cbo_PinShape.Value = cbo_PinShape.List(0)
    Else
        cbo_PinShape.Value = Sheets("Setup").Cells(19, 2).Value
    End If
    
    Btn_Add.Enabled = False
    
ElseIf Chk_CS_SCH Or Chk_AD_SCH Or Chk_PX_SCH Then
    cbo_PinLength.Clear
    cbo_PinPitch.Clear
    
    Lbl_BaseName.Visible = True
    txt_BaseName.Visible = True
    txt_BaseName.Value = Sheets("Setup").Cells(10, 2).Value
    
    Lbl_PinLength.Visible = True
    Lbl_PinLength.Caption = "Pin Length"
    cbo_PinLength.Visible = True
    cbo_PinLength.AddItem ("100")
    cbo_PinLength.AddItem ("200")
    If Sheets("Setup").Cells(8, 2).Value = vbNullString Then
        cbo_PinLength.Value = cbo_PinLength.List(1)
    Else
        cbo_PinLength.Value = Sheets("Setup").Cells(8, 2).Value
    End If
    
    Lbl_PinPitch.Visible = True
    Lbl_PinPitch.Caption = "Pin Pitch"
    cbo_PinPitch.Visible = True
    cbo_PinPitch.AddItem ("100")
    cbo_PinPitch.AddItem ("200")
    If Sheets("Setup").Cells(12, 2).Value = vbNullString Or Sheets("Setup").Cells(12, 2).Value <> "100" Or Sheets("Setup").Cells(12, 2).Value <> "200" Then
        cbo_PinPitch.Value = cbo_PinPitch.List(0)
    Else
        cbo_PinPitch.Value = Sheets("Setup").Cells(12, 2).Value
    End If
    
    Lbl_Export.Caption = "Note: A suffix of asterisk " & Chr(34) & "*" & Chr(34) & " in a pin name denotes negation."

    Btn_Add.Enabled = False
    
    If Chk_AD_SCH Then MsgBox "Currently our files have to enter Altium through a translator, we are working with Altium to improve this for you so please bear with us and keep supporting EPW. To help speed this up please feel free to mention it to your local Altium representative. Thank you.", vbInformation, "SamacSys - EPW"
    If Chk_PX_SCH Then MsgBox "Currently our files have to enter Pulsonix through a translator, we are working with Pulsonix to improve this for you so please bear with us and keep supporting EPW. To help speed this up please feel free to mention it to your local Pulsonix representative. Thank you.", vbInformation, "SamacSys - EPW"

ElseIf Chk_T3001 Then
    cbo_PinLength.Clear
    cbo_PinPitch.Clear
    
    Lbl_BaseName.Visible = True
    txt_BaseName.Visible = True
    txt_BaseName.Value = Sheets("Setup").Cells(10, 2).Value
    
    Lbl_PinLength.Visible = True
    Lbl_PinLength.Caption = "Pin Length in mm"
    cbo_PinLength.Visible = True
    cbo_PinLength.AddItem ("2.54")
    cbo_PinLength.AddItem ("5.08")
    If Sheets("Setup").Cells(8, 2).Value = vbNullString Then
        cbo_PinLength.Value = cbo_PinLength.List(1)
    Else
        cbo_PinLength.Value = Sheets("Setup").Cells(8, 2).Value
    End If
    
    Lbl_PinPitch.Visible = True
    Lbl_PinPitch.Caption = "Pin Pitch in mm"
    cbo_PinPitch.Visible = True
    cbo_PinPitch.AddItem ("2.54")
    cbo_PinPitch.AddItem ("5.08")
    If Sheets("Setup").Cells(12, 2).Value = vbNullString Or Sheets("Setup").Cells(12, 2).Value <> "2.54" Or Sheets("Setup").Cells(12, 2).Value <> "5.08" Then
        cbo_PinPitch.Value = cbo_PinPitch.List(0)
    Else
        cbo_PinPitch.Value = Sheets("Setup").Cells(12, 2).Value
    End If
    
    If Sheets("Setup").Range("B13").Value <> vbNullString And Sheets("Setup").Range("C13").Value <> vbNullString Then
        BuildCatsFromAttributes
        cbo_LibLst.Value = Sheets("Setup").Range("B13").Value
        cbo_SubCat.Value = Sheets("Setup").Range("C13").Value
    End If
    
'    Lbl_Export.Caption = "Note: A suffix of asterisk " & Chr(34) & "*" & Chr(34) & " in a pin name denotes negation."

    Btn_Add.Enabled = True
    
End If

End Function

Function Show_PCB()

    If (Chk_AD_PCB Or Chk_CS_PCB) And Right(Sheets("Setup").Range("C15").Value, 2) = "-D" Then
        Img_WarningD.Visible = True
    ElseIf Chk_AP_PCB And Sheets("Setup").Range("B91") Then
        Img_WarningAN.Visible = True
    Else
        Lbl_PinCnt.Visible = True
        Txt_PinCnt.Visible = True
        Lbl_PCB.Visible = True
        cbo_PCB.Visible = True
        
        cbo_PCB.Clear
        
        If (Chk_PreDS_PCB Or Chk_DS_PCB) And Right(Sheets("Setup").Range("C15").Value, 2) = "-D" Then
            If Sheets("Setup").Range("C15").Value <> vbNullString Then cbo_PCB.AddItem Mid((Sheets("Setup").Range("C15").Value), 1, Len(Sheets("Setup").Range("C15").Value) - 2)
            If Sheets("Setup").Range("D15").Value <> vbNullString Then cbo_PCB.AddItem Mid((Sheets("Setup").Range("D15").Value), 1, Len(Sheets("Setup").Range("D15").Value) - 2)
            If Sheets("Setup").Range("E15").Value <> vbNullString Then cbo_PCB.AddItem Mid((Sheets("Setup").Range("E15").Value), 1, Len(Sheets("Setup").Range("E15").Value) - 2)
        Else
            If Sheets("Setup").Range("C15").Value <> vbNullString Then cbo_PCB.AddItem (Sheets("Setup").Range("C15").Value)
            If Sheets("Setup").Range("D15").Value <> vbNullString Then cbo_PCB.AddItem (Sheets("Setup").Range("D15").Value)
            If Sheets("Setup").Range("E15").Value <> vbNullString Then cbo_PCB.AddItem (Sheets("Setup").Range("E15").Value)
        End If
        
        If Sheets("Setup").Range("B15").Value = vbNullString Then
            cbo_PCB.Value = cbo_PCB.List(0)
        Else
            cbo_PCB.Value = Sheets("Setup").Range("B15").Value
        End If
        
        If Chk_PL_PCB Then
            Lbl_LibPCB.Visible = True
            cbo_LibPCB.Visible = True
        ElseIf Chk_DS_PCB Then
            Lbl_LibPCB.Visible = True
            cbo_LibPCB.Visible = True
            
            Dim obj As Object
            Dim libName As String
            
            On Error Resume Next
            Set obj = CreateObject("dspcb.application")
            obj.Show
            obj.SetUserCtrl
        
            libType = ltFootprint
            obj.GetFirstLibraryName libType, libName
            i = 0
            cbo_LibPCB.Clear
            While (libName <> "")
                LastSlashIndex = InStrRev(libName, "\")
                cbo_LibPCB.AddItem Mid(libName, LastSlashIndex + 1)
                cbo_LibPCB.List(i, 1) = libName
                obj.GetNextLibraryName libType, libName
                i = i + 1
            Wend
            cbo_LibPCB.ListIndex = 0
            Set obj = Nothing

            If cbo_LibPCB.ListCount = 0 Then
                Btn_OK.Enabled = False
                Lbl_Export = "7.03 or higher not present please check the box for an earlier version of DesignSpark"
            End If

        End If
    End If
    
End Function
Function Hide_ALL()
    Lbl_BaseName.Visible = False
    txt_BaseName.Visible = False
    Lbl_PinShape.Visible = False
    cbo_PinShape.Visible = False
    Lbl_PinLength.Visible = False
    cbo_PinLength.Visible = False
    Lbl_PinPitch.Visible = False
    cbo_PinPitch.Visible = False
    Lbl_LibSym.Visible = False
    cbo_LibSym.Visible = False
    
    Lbl_SubCat.Visible = False
    cbo_SubCat.Visible = False
    
    Lbl_PinCnt.Visible = False
    Txt_PinCnt.Visible = False
    Lbl_PCB.Visible = False
    cbo_PCB.Visible = False
    Lbl_LibPCB.Visible = False
    cbo_LibPCB.Visible = False
    
    Lbl_PartName.Visible = False
    Txt_PartName.Visible = False
    Lbl_ExportDir.Visible = False
    txt_ExportDir.Visible = False
    btn_Browse.Visible = False
    Lbl_RefDesPrefix.Visible = False
    txt_RDP.Visible = False
    cbo_LogFam.Visible = False
    Lbl_LibLst.Visible = False
    cbo_LibLst.Visible = False
    
    Img_WarningD.Visible = False
    Img_WarningAN.Visible = False
    
    Lbl_Export.Caption = vbNullString
    Lbl_DesignSpark.Caption = vbNullString
    
    Btn_Add.Enabled = False
    
End Function

Function Show_PRT()
Dim LibLstDone As Boolean
Dim LibPCBDone As Boolean
Dim LogFamDone As Boolean
Dim PinLstDone As Boolean

'Debug.Print Chk_PreDS_SCH

If Chk_PL_SCH Then

    Lbl_PartName.Visible = True
    Txt_PartName.Visible = True
    Lbl_RefDesPrefix.Visible = True
    cbo_LogFam.Visible = True
    Lbl_LibLst.Visible = True
    cbo_LibLst.Visible = True
    
    cbo_LibLst.Clear
    cbo_LibPCB.Clear

    LaunchPADS True, True
    
    LibLstDone = False
    LogFamDone = False
    PinLstDone = False
    
    PLini = SDD_HOME & "\Programs\powerlogic.ini"
    PPini = SDD_HOME & "\Programs\powerpcb.ini"
    If Len(Dir$(PLini)) = 0 Then
        MsgBox PLini & " does not exist", vbInformation, "ECAD Part Wizard"
        Exit Function
    ElseIf Len(Dir$(PPini)) = 0 Then
        MsgBox PPini & " does not exist", vbInformation, "ECAD Part Wizard"
        Exit Function
    End If
    
    Open PLini For Input As #1
    
    Line Input #1, PLiniLn
    
    Do
    Line Input #1, PLiniLn
    
    If InStr(1, PLiniLn, "[Logic_Family_List]") <> 0 Then
        Line Input #1, PLiniLn
    
        While Left(PLiniLn, 6) = "LogFam"
            r = r + 1
            EqualsI = InStr(1, PLiniLn, "=")
            CommaI = InStr(1, PLiniLn, ",")
            LogFam = Mid(PLiniLn, EqualsI + 1, CommaI - EqualsI - 1)
            RefDesPrefix = Mid(PLiniLn, CommaI + 1)
            cbo_LogFam.AddItem (LogFam)
            cbo_LogFam.List(cbo_LogFam.ListCount - 1, 1) = RefDesPrefix
            Line Input #1, PLiniLn
        Wend
        LogFamDone = True
    End If
    
    If InStr(1, PLiniLn, "[Library_List]") <> 0 Then
        Line Input #1, PLiniLn
        LibNames = vbNullString
    
        While Left(PLiniLn, 3) = "Lib" Or Left(PLiniLn, 12) = "Synchronize="
            If Left(PLiniLn, 12) = "Synchronize=" Then GoTo SkipLn
            DblQuoteI1 = InStr(1, PLiniLn, Chr(34))
            DblQuoteI2 = InStr(DblQuoteI1 + 1, PLiniLn, Chr(34))
            libName = Mid(PLiniLn, DblQuoteI1 + 1, DblQuoteI2 - DblQuoteI1 - 1)
            LibNames = LibNames & ":" & libName
            cbo_LibLst.AddItem (libName)
SkipLn:
            Line Input #1, PLiniLn
        Wend
        
        If InStr(1, LibNames & ":", ":" & cbo_LibLst.Value & ":") = 0 Then cbo_LibLst.Value = vbNullString
        LibLstDone = True
    
    End If
    
    If InStr(1, PLiniLn, "[Pin_Decal_List]") <> 0 Then
        Line Input #1, PLiniLn
        While Left(PLiniLn, 3) = "Pin"
            EqualsI = InStr(1, PLiniLn, "=")
            pinName = Mid(PLiniLn, EqualsI + 1)
            cbo_PinLength.AddItem (pinName)
            Line Input #1, PLiniLn
        Wend
        PinLstDone = True
    End If
    
    If LibLstDone And LogFamDone And PinLstDone Then Exit Do
    
    Loop While Not EOF(1)
    
    Close #1
    
    Open PPini For Input As #2
    
    Line Input #2, PPiniLn
    
    Do
    Line Input #2, PPiniLn
    
    If InStr(1, PPiniLn, "[Library_List]") <> 0 Then
        Line Input #2, PPiniLn
        LibNames = vbNullString
        While Left(PPiniLn, 3) = "Lib" Or Left(PPiniLn, 12) = "Synchronize="
            If Left(PPiniLn, 12) = "Synchronize=" Then GoTo SkipLn2
            DblQuoteI1 = InStr(1, PPiniLn, Chr(34))
            DblQuoteI2 = InStr(DblQuoteI1 + 1, PPiniLn, Chr(34))
            libName = Mid(PPiniLn, DblQuoteI1 + 1, DblQuoteI2 - DblQuoteI1 - 1)
            LibNames = LibNames & ":" & libName
            cbo_LibPCB.AddItem (libName)
SkipLn2:
            Line Input #2, PPiniLn
        Wend
        If InStr(1, LibNames & ":", ":" & cbo_LibPCB.Value & ":") = 0 Then cbo_LibPCB.Value = vbNullString
        LibPCBDone = True
    End If
    
    If LibPCBDone Then Exit Do
    
    Loop While Not EOF(2)
    
    Close #2

    
    txt_BaseName.Value = Sheets("Setup").Cells(10, 2).Value
    
    If Sheets("Setup").Cells(11, 2).Value = vbNullString Then
        cbo_PinLength.Value = cbo_PinLength.List(0)
    Else
        cbo_PinLength.Value = Sheets("Setup").Cells(11, 2).Value
    End If
    
'    If Sheets("Setup").Cells(12, 2).Value = vbNullString Then
'        cbo_PinPitch.Value = cbo_PinPitch.List(0)
'    Else
'        cbo_PinPitch.Value = Sheets("Setup").Cells(12, 2).Value
'    End If
    
    If Sheets("Setup").Cells(7, 2).Value = vbNullString Then
        cbo_LibLst.Value = cbo_LibLst.List(0)
    Else
        cbo_LibLst.Value = Sheets("Setup").Cells(7, 2).Value
    End If
    
    If Sheets("Setup").Cells(13, 2).Value = vbNullString Then
        cbo_LibPCB.Value = cbo_LibPCB.List(0)
    Else
        cbo_LibPCB.Value = Sheets("Setup").Cells(13, 2).Value
    End If
    
    If Sheets("Setup").Cells(17, 2).Value = vbNullString Then
        cbo_LogFam.Value = cbo_LogFam.List(0)
    Else
        cbo_LogFam.Value = Sheets("Setup").Cells(17, 2).Value
    End If
        
    Txt_PartName.Value = Sheets("Setup").Cells(18, 2).Value
    
ElseIf Chk_DS_SCH Or Chk_PreDS_SCH Then

    Lbl_PartName.Visible = True
    Txt_PartName.Visible = True
    Txt_PartName.Value = Sheets("Setup").Cells(18, 2).Value
    
    Lbl_RefDesPrefix.Visible = True
    txt_RDP.Visible = True
    txt_RDP.Value = Sheets("Setup").Cells(17, 3).Value
    

    
    If Chk_DS_SCH Then
        cbo_LibLst.Visible = True
        
        Dim obj As Object
        Dim libNameDS As String
        On Error Resume Next
        Set obj = CreateObject("dspcb.application")
        obj.Show
        obj.SetUserCtrl
    
        libType = ltComponent
        obj.GetFirstLibraryName libType, libNameDS
        i = 0
        cbo_LibLst.Clear
        While (libNameDS <> "")
            LastSlashIndex = InStrRev(libNameDS, "\")
            cbo_LibLst.AddItem Mid(libNameDS, LastSlashIndex + 1)
            cbo_LibLst.List(i, 1) = libNameDS
            obj.GetNextLibraryName libType, libNameDS
            i = i + 1
        Wend
        cbo_LibLst.ListIndex = 0
        Set obj = Nothing
        
        Btn_Add.Enabled = True
        
        'Symbol Library
        If Sheets("Setup").Range("B9").Value <> vbNullString Then cbo_LibSym.Value = Sheets("Setup").Range("B9").Value
        'Footprint Library
        If Sheets("Setup").Range("B13").Value <> vbNullString Then cbo_LibPCB.Value = Sheets("Setup").Range("B13").Value
        'Part Library
        If Sheets("Setup").Range("B7").Value <> vbNullString Then cbo_LibLst.Value = Sheets("Setup").Range("B7").Value
        
    Else
        Lbl_ExportDir.Visible = True
        txt_ExportDir.Visible = True
        btn_Browse.Visible = True
        txt_ExportDir.Value = Sheets("Setup").Range("B16").Value
    End If

ElseIf Chk_CS_SCH Or Chk_OC_SCH Or Chk_AP_PCB Then

    Lbl_PartName.Visible = True
    Txt_PartName.Visible = True
    Txt_PartName.Value = Sheets("Setup").Cells(18, 2).Value
    
    Lbl_RefDesPrefix.Visible = True
    txt_RDP.Visible = True
    txt_RDP.Value = Sheets("Setup").Cells(17, 3).Value
    
    Lbl_ExportDir.Visible = True
    txt_ExportDir.Visible = True
    btn_Browse.Visible = True
    txt_ExportDir.Value = Sheets("Setup").Range("B16").Value
    
ElseIf Chk_T3001 Then

    Lbl_LibLst.Visible = True
    cbo_LibLst.Visible = True
    Lbl_LibLst.Caption = "Category"
    
    Lbl_SubCat.Visible = True
    cbo_SubCat.Visible = True

    Lbl_PartName.Visible = True
    Txt_PartName.Visible = True
    Txt_PartName.Value = Sheets("Setup").Cells(18, 2).Value
    
    Lbl_RefDesPrefix.Visible = True
    txt_RDP.Visible = True
    txt_RDP.Value = Sheets("Setup").Cells(17, 3).Value
    
    Lbl_ExportDir.Visible = True
    txt_ExportDir.Visible = True
    btn_Browse.Visible = True
    txt_ExportDir.Value = Sheets("Setup").Range("B16").Value
    
ElseIf Chk_AD_SCH Or Chk_PX_SCH Then

    Lbl_PartName.Visible = True
    Txt_PartName.Visible = True
    Txt_PartName.Value = Sheets("Setup").Cells(18, 2).Value
    
    Lbl_ExportDir.Visible = True
    txt_ExportDir.Visible = True
    btn_Browse.Visible = True
    txt_ExportDir.Value = Sheets("Setup").Range("B16").Value
    
ElseIf Chk_DX_SCH Then

    Lbl_PartName.Visible = True
    Txt_PartName.Visible = True
    Txt_PartName.Value = Sheets("Setup").Cells(18, 2).Value
    
    Lbl_RefDesPrefix.Visible = True
    txt_RDP.Visible = True
    txt_RDP.Value = Sheets("Setup").Cells(17, 3).Value
    
    Lbl_ExportDir.Visible = True
    txt_ExportDir.Visible = True
    btn_Browse.Visible = True
    
    If Sheets("Setup").Range("B16").Value <> vbNullString Then
        txt_ExportDir.Value = Sheets("Setup").Range("B16").Value
        If Not DirExists(txt_ExportDir.Value & "sym/") Then
            MkDir txt_ExportDir.Value & "sym/"
        End If
    End If
    
End If


If Chk_PL_PCB And Not Chk_PL_SCH Then

    Lbl_PartName.Visible = True
    Txt_PartName.Visible = True
    Lbl_RefDesPrefix.Visible = True
    cbo_LogFam.Visible = True
    Lbl_LibLst.Visible = True
    cbo_LibLst.Visible = True
    
    cbo_LibLst.Clear
    cbo_LibPCB.Clear

    LaunchPADS False, True
    
    LibLstDone = False
    LogFamDone = False
    
    PLini = SDD_HOME & "\Programs\powerpcb.ini"
    If Len(Dir$(PLini)) = 0 Then
        MsgBox PLini & " does not exist", vbInformation, "ECAD Part Wizard"
        Exit Function
    End If
    
    Open PLini For Input As #1
    
    Line Input #1, PLiniLn
    
    Do
    Line Input #1, PLiniLn
    
    If InStr(1, PLiniLn, "[Logic_Family_List]") <> 0 Then
        Line Input #1, PLiniLn
    
        While Left(PLiniLn, 6) = "LogFam"
            r = r + 1
            EqualsI = InStr(1, PLiniLn, "=")
            CommaI = InStr(1, PLiniLn, ",")
            LogFam = Mid(PLiniLn, EqualsI + 1, CommaI - EqualsI - 1)
            RefDesPrefix = Mid(PLiniLn, CommaI + 1)
            cbo_LogFam.AddItem (LogFam)
            cbo_LogFam.List(cbo_LogFam.ListCount - 1, 1) = RefDesPrefix
            Line Input #1, PLiniLn
        Wend
        LogFamDone = True
    End If
    
    If InStr(1, PLiniLn, "[Library_List]") <> 0 Then
        Line Input #1, PLiniLn
        LibNames = vbNullString
    
        While Left(PLiniLn, 3) = "Lib" Or Left(PLiniLn, 12) = "Synchronize="
            If Left(PLiniLn, 12) = "Synchronize=" Then GoTo SkipLine
            DblQuoteI1 = InStr(1, PLiniLn, Chr(34))
            DblQuoteI2 = InStr(DblQuoteI1 + 1, PLiniLn, Chr(34))
            libName = Mid(PLiniLn, DblQuoteI1 + 1, DblQuoteI2 - DblQuoteI1 - 1)
            LibNames = LibNames & ":" & libName
            cbo_LibLst.AddItem (libName)
            cbo_LibPCB.AddItem (libName)
SkipLine:
            Line Input #1, PLiniLn
        Wend
        
        If InStr(1, LibNames & ":", ":" & cbo_LibPCB.Value & ":") = 0 Then cbo_LibPCB.Value = vbNullString
        If InStr(1, LibNames & ":", ":" & cbo_LibLst.Value & ":") = 0 Then cbo_LibLst.Value = vbNullString
        LibLstDone = True
    
    End If
    
    If LibLstDone And LogFamDone Then Exit Do
    
    Loop While Not EOF(1)
    
    Close #1
    
    If Sheets("Setup").Cells(13, 2).Value = vbNullString Then
        cbo_LibPCB.Value = cbo_LibPCB.List(0)
        cbo_LibLst.Value = cbo_LibLst.List(0)
    Else
        cbo_LibPCB.Value = Sheets("Setup").Cells(13, 2).Value
        cbo_LibLst.Value = Sheets("Setup").Cells(13, 2).Value
    End If
    
    If Sheets("Setup").Cells(17, 2).Value = vbNullString Then
        cbo_LogFam.Value = cbo_LogFam.List(0)
    Else
        cbo_LogFam.Value = Sheets("Setup").Cells(17, 2).Value
    End If
        
    Txt_PartName.Value = Sheets("Setup").Cells(18, 2).Value

End If

End Function
Function LaunchTARGET3001()
TargetExe = GetStringValFromRegistry(HKEY_CLASSES_ROOT, "T3001file\Shell\open\command\", "")
TargetExe = Mid(TargetExe, 1, Len(TargetExe) - 5)
If Not IsProcessRunning("TarV18.exe") Then Call Shell(TargetExe)
End Function
Function LaunchPADS(Logic As Boolean, Layout As Boolean)

'Debug.Print Logic

If Logic Then
    PadsExe = GetStringValFromRegistry(HKEY_CLASSES_ROOT, "PowerLogic.Schematic\shell\open\command\", "")
    PadsExe = Mid(PadsExe, 1, Len(PadsExe) - 5)
    SDD_HOME = Mid(PadsExe, 1, InStr(PadsExe, "SDD_HOME") + 7)
    If Not IsProcessRunning("powerlogic.exe") Then Call Shell(PadsExe)
End If

If Layout Then
    PadsExe = GetStringValFromRegistry(HKEY_CLASSES_ROOT, "PowerPCB.Design\shell\open\command\", "")
    PadsExe = Mid(PadsExe, 1, Len(PadsExe) - 5)
    SDD_HOME = Mid(PadsExe, 1, InStr(PadsExe, "SDD_HOME") + 7)
    If Not IsProcessRunning("powerpcb.exe") Then Call Shell(PadsExe)
End If

'Call AddMissingRefs(SDD_HOME)
End Function
Private Function IsProcessRunning(ByVal sProcess As String) As Boolean
Const MAX_PATH As Long = 260
Dim lProcesses() As Long, lModules() As Long, n As Long, lRet As Long, hProcess As Long
Dim sName As String
sProcess = UCase$(sProcess)
ReDim lProcesses(1023) As Long
If EnumProcesses(lProcesses(0), 1024 * 4, lRet) Then
For n = 0 To (lRet \ 4) - 1
hProcess = OpenProcess(PROCESS_QUERY_INFORMATION Or PROCESS_VM_READ, 0, lProcesses(n))
If hProcess Then
ReDim lModules(1023)
If EnumProcessModules(hProcess, lModules(0), 1024 * 4, lRet) Then
sName = String$(MAX_PATH, vbNullChar)
GetModuleBaseName hProcess, lModules(0), sName, MAX_PATH
sName = Left$(sName, InStr(sName, vbNullChar) - 1)
If Len(sName) = Len(sProcess) Then
If sProcess = UCase$(sName) Then IsProcessRunning = True: Exit Function
End If
End If
End If
CloseHandle hProcess
Next n
End If
End Function
Public Function Num2Lett(Num As Integer) As String
    If Num > 26 Then
        Num2Lett = ColLett((Num - (Num Mod 26)) / 26) + Chr(Num Mod 26 + 64)
    Else
        Num2Lett = Chr(Num + 64)
    End If
End Function
Function GetPinTypePL(PinType As String) As String

If PinType = "Output" Then
    GetPinTypePL = "S" 'Source
ElseIf PinType = "Bidirectional" Then
    GetPinTypePL = "B"
ElseIf PinType = "Open Collector" Then
    GetPinTypePL = "C"
ElseIf PinType = "Or-Tieable Source (PADS Logic Only)" Then
    GetPinTypePL = "O"
ElseIf PinType = "Tristate" Then
    GetPinTypePL = "T"
ElseIf PinType = "Input" Then
    GetPinTypePL = "L" 'Load
ElseIf PinType = "Terminator" Then
    GetPinTypePL = "Z"
ElseIf PinType = "Power" Then
    GetPinTypePL = "P"
ElseIf PinType = "Ground" Then
    GetPinTypePL = "G"
ElseIf PinType = "Undefined" Then
    GetPinTypePL = "U"
Else
    GetPinTypePL = "U"
End If

End Function

Function ExportPL()

ExportPL_SCH
ExportPL_PCB
    
End Function

Function ExportPX()

ExportPX_SCH
ExportPX_PCB

End Function
Function ExportPL_SCH()
    Dim GateCnt As Integer
    Dim GateNo As Integer
    Dim SYMname As String
    Dim SymbolFile As String
    Dim BoxWidthLR As Double
    Dim BoxWidthTB As Double
    Dim PinPitch As Double
    'On Error GoTo OnErrorGetObject
    
    MissingValues = vbNullString
    
    If Replace(txt_BaseName.Value, Space(1), vbNullString) = vbNullString Then
        MissingValues = MissingValues & ", " & "Symbol Base Name"
    Else
        txt_BaseName.Value = Replace(txt_BaseName.Value, Space(1), vbNullString)
        Sheets("Setup").Cells(10, 2).Value = txt_BaseName.Value
    End If
    
    Sheets("Setup").Cells(11, 2).Value = cbo_PinLength.Value
    
    Sheets("Setup").Cells(12, 2).Value = cbo_PinPitch.Value
    
    Sheets("Setup").Cells(13, 2).Value = cbo_LibPCB.Value
    
    If Replace(cbo_PCB.Value, Space(1), vbNullString) = vbNullString Then
        MissingValues = MissingValues & ", " & "Footprint Name"
    Else
        Sheets("Setup").Cells(15, 2).Value = cbo_PCB.Value
    End If
    
    'If Chk_UseExisting Then
        Sheets("Setup").Cells(102, 2).Value = "TRUE"
    'Else
    '    Sheets("Setup").Cells(102, 2).Value = "FALSE"
    'End If
    
    Sheets("Setup").Cells(14, 2).Value = Txt_PinCnt.Value
    
    Sheets("Setup").Cells(7, 2).Value = cbo_LibLst.Value
    
    Sheets("Setup").Cells(17, 2).Value = cbo_LogFam.Value
    Sheets("Setup").Cells(17, 3).Value = cbo_LogFam.Column(1)
    
    
    If Replace(Txt_PartName.Value, Space(1), vbNullString) = vbNullString Then
        MissingValues = MissingValues & ", " & "Part Name"
    Else
        Txt_PartName.Value = Replace(Txt_PartName.Value, Space(1), vbNullString)
        Sheets("Setup").Cells(18, 2).Value = Txt_PartName.Value
    End If
    
    If MissingValues <> vbNullString Then
        MsgBox "Please Enter Value for " & Mid(MissingValues, 3), vbOKOnly, "Part Wizard"
        Exit Function
    End If
    
    Success = True
    
        ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
        ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[GateSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(46, 46, 189)
        ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(192, 143, 46)
        ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(209, 50, 50)
        ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(45, 187, 45)
        With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    
    Set powerLogicApp = GetObject(, "PowerLogic.Application")
    filePath = powerLogicApp.DefaultFilePath & "\"
    
    PinDecal = cbo_PinLength.Value
    If PinDecal = "PINSHORT" Then
        PinLength = 100
        pnx = 60
        pny = 10
        pnmx = 140
        pnmy = 10
    Else
        PinLength = 200
        pnx = 140
        pny = 20
        pnmx = 230
        pnmy = 0
    End If
    
    libName = cbo_LibLst.Value
    Set LibPT = powerLogicApp.Libraries(libName)
    LogFam = cbo_LogFam.Value
    PinPitch = cbo_PinPitch.Value
    SYMname = txt_BaseName.Value
    PCBdecal = cbo_PCB.Value
    PTName = Txt_PartName.Value
    LeftPinCnt = 0
    RightPinCnt = 0
    TopPinCnt = 0
    BotPinCnt = 0
    LeftPinLen = 0
    RightPinLen = 0
    TopPinLen = 0
    BotPinLen = 0
    GateCnt = 0
    r = 2
    PrevGate = Sheets("Template").Cells(r, 1).Value
    
    startRow = 2
    CurrGate = Sheets("Template").Cells(r, 1).Value
    While PrevGate <> vbNullString
        PrevGate = CurrGate
        CurrGate = Sheets("Template").Cells(r, 1).Value
        
        If CurrGate = PrevGate Then
            If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then
                LeftPinCnt = LeftPinCnt + 1
                If LeftPinLen < Len(Sheets("Template").Cells(r, 3)) Then LeftPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then
                RightPinCnt = RightPinCnt + 1
                If RightPinLen < Len(Sheets("Template").Cells(r, 3)) Then RightPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then
                TopPinCnt = TopPinCnt + 1
                If TopPinLen < Len(Sheets("Template").Cells(r, 3)) Then TopPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then
                BotPinCnt = BotPinCnt + 1
                If BotPinLen < Len(Sheets("Template").Cells(r, 3)) Then BotPinLen = Len(Sheets("Template").Cells(r, 3))
            End If
        Else
    
            GateCnt = GateCnt + 1
            
            SymbolFile = filePath & SYMname & "-" & Num2Lett(GateCnt) & ".c"
            Open SymbolFile For Output As #1
            'Control Statement
            Print #1, "*PADS-LIBRARY-SCH-DECALS-V9*"
            'Blank Line
            Print #1,
            
            If LeftPinCnt <> 0 Then
                OriginPin = "Left"
            ElseIf TopPinCnt <> 0 Then
                OriginPin = "Top"
            ElseIf RightPinCnt <> 0 Then
                OriginPin = "Right"
            ElseIf BotPinCnt <> 0 Then
                OriginPin = "Bottom"
            End If
            
            If LeftPinCnt > RightPinCnt Then
                PinCntLR = LeftPinCnt
            Else
                PinCntLR = RightPinCnt
            End If
            
            If TopPinCnt = 0 Then
                TopOffset = PinPitch
            Else
                TopOffset = RoundToNearest((TopPinLen * 50) + 200, 100)
            End If
            
            If BotPinCnt = 0 Then
                BotOffset = PinPitch
            Else
                BotOffset = RoundToNearest((BotPinLen * 50) + 200, 100)
            End If
        
            BoxHeightTB = TopOffset + BotOffset
            
            If PinCntLR = 0 Then
                BoxHeightLR = 0
            Else
                BoxHeightLR = ((PinCntLR - 1) * PinPitch)
            End If
            
            BoxHeight = RoundToNearest(BoxHeightLR + BoxHeightTB, 100)
    
            If TopPinCnt > BotPinCnt Then
                PinCntTB = TopPinCnt
            Else
                PinCntTB = BotPinCnt
            End If
            
            If LeftPinLen + RightPinLen = 0 Then
                BoxWidthLR = 0
            Else
                BoxWidthLR = RoundToNearest(((LeftPinLen + RightPinLen) * 50) + 400, 100)
            End If
            
'            Debug.Print "BoxWidthLR = " & BoxWidthLR
'            Debug.Print "PinCntTB = " & PinCntTB
            
            BoxWidthTB = RoundToNearest((PinCntTB * PinPitch) + PinPitch, 100)
'            Debug.Print "Test..." & PinCntTB Mod 2
            
            If BoxWidthLR > BoxWidthTB Then
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthLR, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthLR, 100)
                End If
            Else
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthTB, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthTB, 100)
                End If
            End If
            
            PinCnt = LeftPinCnt + RightPinCnt + TopPinCnt + BotPinCnt
            
            If OriginPin = "Left" Then
                OffsetX = PinLength
                OffsetY = TopOffset
            ElseIf OriginPin = "Top" Then
                If TopPinCnt > BotPinCnt Then
                    OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
                Else
                    OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
                End If
                OffsetY = -(PinLength)
            ElseIf OriginPin = "Right" Then
                OffsetX = -PinLength - BoxWidth
                OffsetY = TopOffset
            ElseIf OriginPin = "Bottom" Then
                If BotPinCnt > TopPinCnt Then
                    OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
                Else
                    OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
                End If
                OffsetY = PinLength + BoxHeight
            End If
            
            
            
'            Debug.Print "X Offset = " & OffsetX
'            Debug.Print "Y Offset = " & OffsetY
    
            If Sheets("Setup").Cells(110, 2) = "None (Box)" Then
                'Header
                    Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 1 0 " & PinCnt & " 0"
                    Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
                'Labels
                If TopPinCnt = 0 Then
                    Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY + 50 & " 0 12 100 10"
                ElseIf RightPinCnt = 0 Then
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) + 50 & " 0 8 100 10"
                Else
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY + 50 & " 0 8 100 10"
                End If
                Print #1, "REF-DES"
                
                If BotPinCnt = 0 Then
                    Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY - (BoxHeight) - 50 & " 0 12 100 10"
                ElseIf RightPinCnt = 0 Then
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) - 50 & " 0 8 100 10"
                Else
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - BoxHeight - 50 & " 0 8 100 10"
                End If
                Print #1, "PART-TYPE"
                
                If BotPinCnt = 0 Then
                    Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY - (BoxHeight) - 150 & " 0 12 100 10"
                ElseIf RightPinCnt = 0 Then
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) - 150 & " 0 8 100 10"
                Else
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - BoxHeight - 150 & " 0 8 100 10"
                End If
                Print #1, "*"
                
                If BotPinCnt = 0 Then
                    Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY - (BoxHeight) - 250 & " 0 12 100 10"
                 ElseIf RightPinCnt = 0 Then
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) - 250 & " 0 8 100 10"
                Else
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - BoxHeight - 250 & " 0 8 100 10"
                End If
                
                Print #1, "*"
                'Pieces
            
            
                Print #1, "CLOSED 5 10 0 -1"
                Print #1, OffsetX & " " & OffsetY
                Print #1, OffsetX + BoxWidth & " " & OffsetY
                Print #1, OffsetX + BoxWidth & " " & OffsetY - BoxHeight
                Print #1, OffsetX & " " & OffsetY - BoxHeight
                Print #1, OffsetX & " " & OffsetY
                'Terminals
                
                'Left Pins
                For lt = 1 To LeftPinCnt
                    Print #1, "T0" & " " & -(lt - 1) * PinPitch & " 0 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next lt
                
                'Right Pins
                If OriginPin = "Right" Then
                    For rt = 1 To RightPinCnt
                        Print #1, "T0 " & -(rt - 1) * PinPitch & " 0 2 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next rt
                ElseIf OriginPin = "Left" Then
                    For rt = 1 To RightPinCnt
                        Print #1, "T" & (PinLength * 2) + BoxWidth & " " & -(rt - 1) * PinPitch & " 0 2 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next rt
                ElseIf OriginPin = "Top" Then
                    For rt = 1 To RightPinCnt
                    'Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & BoxWidth + OffsetX + PinLength & ", " & -((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset) & ") (rotation 180) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & BoxWidth + OffsetX & ", " & (-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) - 25 & ") (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
        
                        Print #1, "T" & BoxWidth + OffsetX + PinLength & " " & -((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset) & " 0 2 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next rt
                End If
                
                'Top Pins
                If OriginPin = "Top" Then
                    For tt = 1 To TopPinCnt
                        Print #1, "T" & RoundDownToNearest((tt - 1) * PinPitch, PinPitch) & " 0 90 4 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next tt
                ElseIf OriginPin = "Left" Then
                    For tt = 1 To TopPinCnt
                        Print #1, "T" & RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " " & OffsetY + PinLength; " 90 4 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next tt
                End If
                
                'Bottom Pins
                If OriginPin = "Bottom" Then
                    For bt = 1 To BotPinCnt
                        Print #1, "T" & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " 0 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next bt
                 ElseIf OriginPin = "Left" Then
                    For bt = 1 To BotPinCnt
                        Print #1, "T" & RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next bt
                 ElseIf OriginPin = "Right" Then
                    For bt = 1 To BotPinCnt
                        Print #1, "T" & RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch) & " " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next bt
                 ElseIf OriginPin = "Top" Then
                    For bt = 1 To BotPinCnt
                        Print #1, "T" & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " " & -BoxHeight - (2 * PinLength) & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next bt
                End If
                
            ElseIf Sheets("Setup").Cells(110, 2) = "Resistor" Then
                'Header
                Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 1 0 " & PinCnt & " 24"
                Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
                'Labels
    
                Print #1, "350 150 0 12 100 10"
                Print #1, "REF-DES"
                
                Print #1, "350 -150 0 12 100 10"
                Print #1, "PART-TYPE"
                
                Print #1, "350 -250 0 12 100 10"
                Print #1, "*"
                Print #1, "350 -350 0 12 100 10"
                Print #1, "*"
                'Pieces
    
                Print #1, "CLOSED 5 10 0 -1"
                Print #1, "200 50"
                Print #1, "500 50"
                Print #1, "500 -50"
                Print #1, "200 -50"
                Print #1, "200 50"
                Print #1, "T0 0 0 0 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Print #1, "T700 0 0 2 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                
            ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Non-Polarised)" Then
                'Header
                    Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 4 0 " & PinCnt & " 24"
                    Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
                'Labels
    
                Print #1, "250 200 0 28 100 10"
                Print #1, "REF-DES"
                
                Print #1, "250 -200 0 28 100 10"
                Print #1, "PART-TYPE"
                
                Print #1, "250 -300 0 28 100 10"
                Print #1, "*"
                Print #1, "250 -400 0 28 100 10"
                Print #1, "*"
                'Pieces
    
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "220 100"
                Print #1, "220 -100"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "280 100"
                Print #1, "280 -100"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "200 0"
                Print #1, "220 0"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "280 0"
                Print #1, "300 0"
                Print #1, "T0 0 0 0 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Print #1, "T500 0 0 2 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
            ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Polarised)" Then
                'Header
                Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 4 0 " & PinCnt & " 24"
                Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
                'Labels
    
                Print #1, "250 200 0 28 100 10"
                Print #1, "REF-DES"
                
                Print #1, "250 -200 0 28 100 10"
                Print #1, "PART-TYPE"
                
                Print #1, "250 -300 0 28 100 10"
                Print #1, "*"
                Print #1, "250 -400 0 28 100 10"
                Print #1, "*"
                'Pieces
                
                Print #1, "CLOSED 5 10 0 -1"
                Print #1, "200 100"
                Print #1, "200 -100"
                Print #1, "230 -100"
                Print #1, "230 100"
                Print #1, "200 100"
                Print #1, "COPCLS 5 10 0 -1"
                Print #1, "300 100"
                Print #1, "300 -100"
                Print #1, "270 -100"
                Print #1, "270 100"
                Print #1, "300 100"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "180 50"
                Print #1, "140 50"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "160 70"
                Print #1, "160 30"
                
                Print #1, "T0 0 0 0 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Print #1, "T500 0 0 2 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                
            ElseIf Sheets("Setup").Cells(110, 2) = "Inductor" Then
                'Header
                Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 4 0 " & PinCnt & " 24"
                Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
                'Labels
    
                Print #1, "400 150 0 12 100 10"
                Print #1, "REF-DES"
                
                Print #1, "400 -100 0 12 100 10"
                Print #1, "PART-TYPE"
                
                Print #1, "400 -200 0 12 100 10"
                Print #1, "*"
                Print #1, "400 -300 0 12 100 10"
                Print #1, "*"
                'Pieces
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "200 0 1777 -1754 200 -52 300 48"
                Print #1, "300 0"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "300 0 1777 -1754 300 -52 400 48"
                Print #1, "400 0"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "400 0 1777 -1754 400 -52 500 48"
                Print #1, "500 0"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "500 0 1777 -1754 500   -52   600   48"
                Print #1, "600 0"
                
                Print #1, "T0 0 0 0 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Print #1, "T800 0 0 2 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                
            ElseIf Sheets("Setup").Cells(110, 2) = "Diode" Then
                'Header
                Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 2 0 " & PinCnt & " 24"
                Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
                'Labels
    
                Print #1, "300 150 0 12 100 10"
                Print #1, "REF-DES"
                
                Print #1, "300 -150 0 12 100 10"
                Print #1, "PART-TYPE"
                
                Print #1, "300 -250 0 12 100 10"
                Print #1, "*"
                Print #1, "300 -350 0 12 100 10"
                Print #1, "*"
                'Pieces
    
                Print #1, "CLOSED 4 10 0 -1"
                Print #1, "200 0"
                Print #1, "400 100"
                Print #1, "400 -100"
                Print #1, "200 0"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "200 100"
                Print #1, "200 -100"
                
                Print #1, "T0 0 0 0 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Print #1, "T600 0 0 2 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                
            End If
            Print #1,
            Print #1, "*END*"
    
            Close #1
            
    '        ImportSymbols SYMname & "-" & Num2Lett(GateCnt), SymbolFile
    
            LeftPinCnt = 0
            RightPinCnt = 0
            TopPinCnt = 0
            BotPinCnt = 0
            LeftPinLen = 0
            RightPinLen = 0
            
            r = r - 1
            
            
            If LibPT.GetLibraryItems(2, UCase(SYMname) & "-" & Num2Lett(GateCnt)).Count = 1 Then
                Answer = MsgBox("Symbol " & SYMname & "-" & Num2Lett(GateCnt) & " already exists - OK to overwrite?", vbYesNo, "Part Wizard")
                If Answer = vbYes Then
                    Set LibImport = LibPT.ImportLibraryItems2(filePath & SYMname & "-" & Num2Lett(GateCnt) & ".c")
                End If
            Else
                Set LibImport = LibPT.ImportLibraryItems(filePath & SYMname & "-" & Num2Lett(GateCnt) & ".c")
'                MsgBox "Symbol " & SYMname & "-" & Num2Lett(GateCnt) & " saved to library " & LibPT.Name, vbOKOnly, "Part Wizard"
            End If
            
    
        End If
    
        PrevGate = CurrGate
        r = r + 1
        
    
        
    Wend
    
    
    'Write Part Type Definition
    'Debug.Print "Logic Family = " & LogFam
    
    PartTypeFile = filePath & PTName & ".p"
    Open PartTypeFile For Output As #1
    'Control Statement
    Print #1, "*PADS-LIBRARY-PART-TYPES-V9*"
    'Blank Line
    Print #1,
    
    AttrCnt = 0
    While Sheets("Attributes").Cells(AttrCnt + 1, 1) <> vbNullString
        AttrCnt = AttrCnt + 1
    Wend
    'Header
    Print #1, PTName & " " & PCBdecal & " I " & LogFam & " " & AttrCnt & " " & GateCnt & " 0 0 0"
    Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
    
    'Attributes
    AttrRow = 1
    While Sheets("Attributes").Cells(AttrRow, 1) <> vbNullString
        Print #1, Chr(34) & Sheets("Attributes").Cells(AttrRow, 1) & Chr(34) & " " & Sheets("Attributes").Cells(AttrRow, 2)
        AttrRow = AttrRow + 1
    Wend
    
    r = 2
    startRow = 2
    PinCnt = 0
    GateNo = 0
    PrevGate = Sheets("Template").Cells(r, 1).Value
    CurrGate = PrevGate
    While PrevGate <> vbNullString
        PrevGate = CurrGate
        CurrGate = Sheets("Template").Cells(r, 1).Value
        If CurrGate = PrevGate Then
            PinCnt = PinCnt + 1
        Else
            GateNo = GateNo + 1
            endRow = r - 1
            Print #1, "GATE 1 " & PinCnt & " 0"
            Print #1, SYMname & "-" & Num2Lett(GateNo)
                            
            For Row = startRow To endRow
                'Process PinNames inc. Negation
                pinName = Sheets("Template").Cells(Row, 3).Value
                NegFound = False
                For c = 1 To Len(pinName)
                    If Mid(pinName, c, 1) = "*" Then
                        NegFound = True
                        pinName = Left(pinName, c - 1) & "\" & Mid(pinName, c + 1)
                        c = c + 1
                    ElseIf Mid(pinName, c, 1) = "/" And NegFound Then
                        pinName = Left(pinName, c - 1) & "\" & Mid(pinName, c)
                        NegFound = False
                    End If
                Next c
                If Len(pinName) > 40 Then pinName = Left(pinName, 40)
                Print #1, Sheets("Template").Cells(Row, 2).Value & " " & Sheets("Template").Cells(Row, 5).Value & " " & GetPinTypePL(Sheets("Template").Cells(Row, 4).Value) & " " & pinName
            Next Row
'            Debug.Print StartRow & " - " & EndRow
    
    
    
            startRow = endRow + 1
            PinCnt = 0
            r = r - 1
        End If
        
        r = r + 1
        
    Wend
    
    Print #1,
    Print #1, "*END*"
    
    Close #1
    
    If LibPT.GetLibraryItems(0, UCase(PTName)).Count = 1 Then
        Answer = MsgBox("Part Type " & PTName & " already exists - OK to overwrite?", vbYesNo, "ECAD Part Wizard")
        If Answer = vbYes Then
            Set LibImport = LibPT.ImportLibraryItems2(filePath & PTName & ".p")
        End If
    Else

        Set LibImport = LibPT.ImportLibraryItems(filePath & PTName & ".p")
'        MsgBox "Part Type " & PTName & " saved to library " & LibPT.Name, vbOKOnly, "ECAD Part Wizard"
    End If

    
    'Print #1,
    'Print #1, "*END*"
    
    'Close #1
End Function

Function ExportPX_SCH()
    Dim GateCnt As Integer
    Dim GateNo As Integer
    Dim SYMname As String
    Dim SymbolFile As String
    Dim BoxWidthLR As Double
    Dim BoxWidthTB As Double
    Dim PinPitch As Double
    'On Error GoTo OnErrorGetObject
    
    MissingValues = vbNullString
    
    If Replace(txt_BaseName.Value, Space(1), vbNullString) = vbNullString Then
        MissingValues = MissingValues & ", " & "Symbol Base Name"
    Else
        txt_BaseName.Value = Replace(txt_BaseName.Value, Space(1), vbNullString)
        Sheets("Setup").Cells(10, 2).Value = txt_BaseName.Value
    End If
    
    Sheets("Setup").Cells(11, 2).Value = cbo_PinLength.Value
    
    Sheets("Setup").Cells(12, 2).Value = cbo_PinPitch.Value
    
    Sheets("Setup").Cells(13, 2).Value = cbo_LibPCB.Value
    
    If Replace(cbo_PCB.Value, Space(1), vbNullString) = vbNullString Then
        MissingValues = MissingValues & ", " & "Footprint Name"
    Else
        Sheets("Setup").Cells(15, 2).Value = cbo_PCB.Value
    End If
    
    'If Chk_UseExisting Then
        Sheets("Setup").Cells(102, 2).Value = "TRUE"
    'Else
    '    Sheets("Setup").Cells(102, 2).Value = "FALSE"
    'End If
    
    Sheets("Setup").Cells(14, 2).Value = Txt_PinCnt.Value
    
    Sheets("Setup").Cells(7, 2).Value = cbo_LibLst.Value
    
    Sheets("Setup").Cells(17, 2).Value = cbo_LogFam.Value
    Sheets("Setup").Cells(17, 3).Value = cbo_LogFam.Column(1)
    
    
    If Replace(Txt_PartName.Value, Space(1), vbNullString) = vbNullString Then
        MissingValues = MissingValues & ", " & "Part Name"
    Else
        Txt_PartName.Value = Replace(Txt_PartName.Value, Space(1), vbNullString)
        Sheets("Setup").Cells(18, 2).Value = Txt_PartName.Value
    End If
    
    If MissingValues <> vbNullString Then
        MsgBox "Please Enter Value for " & Mid(MissingValues, 3), vbOKOnly, "Part Wizard"
        Exit Function
    End If
    
    Success = True
    
        ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
        ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[GateSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(46, 46, 189)
        ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(192, 143, 46)
        ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(209, 50, 50)
        ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(45, 187, 45)
        With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    
    filePath = txt_ExportDir.Value
    
    PinDecal = cbo_PinLength.Value
    If PinDecal = "PINSHORT" Then
        PinLength = 100
        pnx = 60
        pny = 10
        pnmx = 140
        pnmy = 10
    Else
        PinLength = 200
        pnx = 140
        pny = 20
        pnmx = 230
        pnmy = 0
    End If
    
    libName = cbo_LibLst.Value
    LogFam = cbo_LogFam.Value
    PinPitch = cbo_PinPitch.Value
    SYMname = txt_BaseName.Value
    PCBdecal = cbo_PCB.Value
    PTName = Txt_PartName.Value
    LeftPinCnt = 0
    RightPinCnt = 0
    TopPinCnt = 0
    BotPinCnt = 0
    LeftPinLen = 0
    RightPinLen = 0
    TopPinLen = 0
    BotPinLen = 0
    GateCnt = 0
    r = 2
    PrevGate = Sheets("Template").Cells(r, 1).Value
    
    startRow = 2
    CurrGate = Sheets("Template").Cells(r, 1).Value
    While PrevGate <> vbNullString
        PrevGate = CurrGate
        CurrGate = Sheets("Template").Cells(r, 1).Value
        
        If CurrGate = PrevGate Then
            If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then
                LeftPinCnt = LeftPinCnt + 1
                If LeftPinLen < Len(Sheets("Template").Cells(r, 3)) Then LeftPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then
                RightPinCnt = RightPinCnt + 1
                If RightPinLen < Len(Sheets("Template").Cells(r, 3)) Then RightPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then
                TopPinCnt = TopPinCnt + 1
                If TopPinLen < Len(Sheets("Template").Cells(r, 3)) Then TopPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then
                BotPinCnt = BotPinCnt + 1
                If BotPinLen < Len(Sheets("Template").Cells(r, 3)) Then BotPinLen = Len(Sheets("Template").Cells(r, 3))
            End If
        Else
    
            GateCnt = GateCnt + 1
            
            SymbolFile = filePath & SYMname & "-" & Num2Lett(GateCnt) & ".c"
            Open SymbolFile For Output As #1
            Debug.Print SymbolFile
            'Control Statement
            Print #1, "*PADS-LIBRARY-SCH-DECALS-V9*"
            'Blank Line
            Print #1,
            
            If LeftPinCnt <> 0 Then
                OriginPin = "Left"
            ElseIf TopPinCnt <> 0 Then
                OriginPin = "Top"
            ElseIf RightPinCnt <> 0 Then
                OriginPin = "Right"
            ElseIf BotPinCnt <> 0 Then
                OriginPin = "Bottom"
            End If
            
            If LeftPinCnt > RightPinCnt Then
                PinCntLR = LeftPinCnt
            Else
                PinCntLR = RightPinCnt
            End If
            
            If TopPinCnt = 0 Then
                TopOffset = PinPitch
            Else
                TopOffset = RoundToNearest((TopPinLen * 50) + 200, 100)
            End If
            
            If BotPinCnt = 0 Then
                BotOffset = PinPitch
            Else
                BotOffset = RoundToNearest((BotPinLen * 50) + 200, 100)
            End If
        
            BoxHeightTB = TopOffset + BotOffset
            
            If PinCntLR = 0 Then
                BoxHeightLR = 0
            Else
                BoxHeightLR = ((PinCntLR - 1) * PinPitch)
            End If
            
            BoxHeight = RoundToNearest(BoxHeightLR + BoxHeightTB, 100)
    
            If TopPinCnt > BotPinCnt Then
                PinCntTB = TopPinCnt
            Else
                PinCntTB = BotPinCnt
            End If
            
            If LeftPinLen + RightPinLen = 0 Then
                BoxWidthLR = 0
            Else
                BoxWidthLR = RoundToNearest(((LeftPinLen + RightPinLen) * 50) + 400, 100)
            End If
            
'            Debug.Print "BoxWidthLR = " & BoxWidthLR
'            Debug.Print "PinCntTB = " & PinCntTB
            
            BoxWidthTB = RoundToNearest((PinCntTB * PinPitch) + PinPitch, 100)
'            Debug.Print "Test..." & PinCntTB Mod 2
            
            If BoxWidthLR > BoxWidthTB Then
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthLR, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthLR, 100)
                End If
            Else
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthTB, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthTB, 100)
                End If
            End If
            
            PinCnt = LeftPinCnt + RightPinCnt + TopPinCnt + BotPinCnt
            
            If OriginPin = "Left" Then
                OffsetX = PinLength
                OffsetY = TopOffset
            ElseIf OriginPin = "Top" Then
                If TopPinCnt > BotPinCnt Then
                    OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
                Else
                    OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
                End If
                OffsetY = -(PinLength)
            ElseIf OriginPin = "Right" Then
                OffsetX = -PinLength - BoxWidth
                OffsetY = TopOffset
            ElseIf OriginPin = "Bottom" Then
                If BotPinCnt > TopPinCnt Then
                    OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
                Else
                    OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
                End If
                OffsetY = PinLength + BoxHeight
            End If
            
            
            
'            Debug.Print "X Offset = " & OffsetX
'            Debug.Print "Y Offset = " & OffsetY
    
            If Sheets("Setup").Cells(110, 2) = "None (Box)" Then
                'Header
                    Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 1 0 " & PinCnt & " 0"
                    Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
                'Labels
                If TopPinCnt = 0 Then
                    Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY + 50 & " 0 12 100 10"
                ElseIf RightPinCnt = 0 Then
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) + 50 & " 0 8 100 10"
                Else
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY + 50 & " 0 8 100 10"
                End If
                Print #1, "REF-DES"
                
                If BotPinCnt = 0 Then
                    Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY - (BoxHeight) - 50 & " 0 12 100 10"
                ElseIf RightPinCnt = 0 Then
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) - 50 & " 0 8 100 10"
                Else
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - BoxHeight - 50 & " 0 8 100 10"
                End If
                Print #1, "PART-TYPE"
                
                If BotPinCnt = 0 Then
                    Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY - (BoxHeight) - 150 & " 0 12 100 10"
                ElseIf RightPinCnt = 0 Then
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) - 150 & " 0 8 100 10"
                Else
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - BoxHeight - 150 & " 0 8 100 10"
                End If
                Print #1, "*"
                
                If BotPinCnt = 0 Then
                    Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY - (BoxHeight) - 250 & " 0 12 100 10"
                 ElseIf RightPinCnt = 0 Then
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) - 250 & " 0 8 100 10"
                Else
                    Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - BoxHeight - 250 & " 0 8 100 10"
                End If
                
                Print #1, "*"
                'Pieces
            
            
                Print #1, "CLOSED 5 10 0 -1"
                Print #1, OffsetX & " " & OffsetY
                Print #1, OffsetX + BoxWidth & " " & OffsetY
                Print #1, OffsetX + BoxWidth & " " & OffsetY - BoxHeight
                Print #1, OffsetX & " " & OffsetY - BoxHeight
                Print #1, OffsetX & " " & OffsetY
                'Terminals
                
                'Left Pins
                For lt = 1 To LeftPinCnt
                    Print #1, "T0" & " " & -(lt - 1) * PinPitch & " 0 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next lt
                
                'Right Pins
                If OriginPin = "Right" Then
                    For rt = 1 To RightPinCnt
                        Print #1, "T0 " & -(rt - 1) * PinPitch & " 0 2 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next rt
                ElseIf OriginPin = "Left" Then
                    For rt = 1 To RightPinCnt
                        Print #1, "T" & (PinLength * 2) + BoxWidth & " " & -(rt - 1) * PinPitch & " 0 2 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next rt
                ElseIf OriginPin = "Top" Then
                    For rt = 1 To RightPinCnt
                    'Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & BoxWidth + OffsetX + PinLength & ", " & -((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset) & ") (rotation 180) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & BoxWidth + OffsetX & ", " & (-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) - 25 & ") (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
        
                        Print #1, "T" & BoxWidth + OffsetX + PinLength & " " & -((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset) & " 0 2 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next rt
                End If
                
                'Top Pins
                If OriginPin = "Top" Then
                    For tt = 1 To TopPinCnt
                        Print #1, "T" & RoundDownToNearest((tt - 1) * PinPitch, PinPitch) & " 0 90 4 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next tt
                ElseIf OriginPin = "Left" Then
                    For tt = 1 To TopPinCnt
                        Print #1, "T" & RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " " & OffsetY + PinLength; " 90 4 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next tt
                End If
                
                'Bottom Pins
                If OriginPin = "Bottom" Then
                    For bt = 1 To BotPinCnt
                        Print #1, "T" & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " 0 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next bt
                 ElseIf OriginPin = "Left" Then
                    For bt = 1 To BotPinCnt
                        Print #1, "T" & RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next bt
                 ElseIf OriginPin = "Right" Then
                    For bt = 1 To BotPinCnt
                        Print #1, "T" & RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch) & " " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next bt
                 ElseIf OriginPin = "Top" Then
                    For bt = 1 To BotPinCnt
                        Print #1, "T" & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " " & -BoxHeight - (2 * PinLength) & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                        Print #1, "P-520 0 0 2 -80 0 0 2 0"
                    Next bt
                End If
                
            ElseIf Sheets("Setup").Cells(110, 2) = "Resistor" Then
                'Header
                Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 1 0 " & PinCnt & " 24"
                Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
                'Labels
    
                Print #1, "350 150 0 12 100 10"
                Print #1, "REF-DES"
                
                Print #1, "350 -150 0 12 100 10"
                Print #1, "PART-TYPE"
                
                Print #1, "350 -250 0 12 100 10"
                Print #1, "*"
                Print #1, "350 -350 0 12 100 10"
                Print #1, "*"
                'Pieces
    
                Print #1, "CLOSED 5 10 0 -1"
                Print #1, "200 50"
                Print #1, "500 50"
                Print #1, "500 -50"
                Print #1, "200 -50"
                Print #1, "200 50"
                Print #1, "T0 0 0 0 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Print #1, "T700 0 0 2 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                
            ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Non-Polarised)" Then
                'Header
                    Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 4 0 " & PinCnt & " 24"
                    Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
                'Labels
    
                Print #1, "250 200 0 28 100 10"
                Print #1, "REF-DES"
                
                Print #1, "250 -200 0 28 100 10"
                Print #1, "PART-TYPE"
                
                Print #1, "250 -300 0 28 100 10"
                Print #1, "*"
                Print #1, "250 -400 0 28 100 10"
                Print #1, "*"
                'Pieces
    
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "220 100"
                Print #1, "220 -100"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "280 100"
                Print #1, "280 -100"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "200 0"
                Print #1, "220 0"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "280 0"
                Print #1, "300 0"
                Print #1, "T0 0 0 0 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Print #1, "T500 0 0 2 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
            ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Polarised)" Then
                'Header
                Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 4 0 " & PinCnt & " 24"
                Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
                'Labels
    
                Print #1, "250 200 0 28 100 10"
                Print #1, "REF-DES"
                
                Print #1, "250 -200 0 28 100 10"
                Print #1, "PART-TYPE"
                
                Print #1, "250 -300 0 28 100 10"
                Print #1, "*"
                Print #1, "250 -400 0 28 100 10"
                Print #1, "*"
                'Pieces
                
                Print #1, "CLOSED 5 10 0 -1"
                Print #1, "200 100"
                Print #1, "200 -100"
                Print #1, "230 -100"
                Print #1, "230 100"
                Print #1, "200 100"
                Print #1, "COPCLS 5 10 0 -1"
                Print #1, "300 100"
                Print #1, "300 -100"
                Print #1, "270 -100"
                Print #1, "270 100"
                Print #1, "300 100"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "180 50"
                Print #1, "140 50"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "160 70"
                Print #1, "160 30"
                
                Print #1, "T0 0 0 0 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Print #1, "T500 0 0 2 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                
            ElseIf Sheets("Setup").Cells(110, 2) = "Inductor" Then
                'Header
                Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 4 0 " & PinCnt & " 24"
                Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
                'Labels
    
                Print #1, "400 150 0 12 100 10"
                Print #1, "REF-DES"
                
                Print #1, "400 -100 0 12 100 10"
                Print #1, "PART-TYPE"
                
                Print #1, "400 -200 0 12 100 10"
                Print #1, "*"
                Print #1, "400 -300 0 12 100 10"
                Print #1, "*"
                'Pieces
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "200 0 1777 -1754 200 -52 300 48"
                Print #1, "300 0"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "300 0 1777 -1754 300 -52 400 48"
                Print #1, "400 0"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "400 0 1777 -1754 400 -52 500 48"
                Print #1, "500 0"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "500 0 1777 -1754 500   -52   600   48"
                Print #1, "600 0"
                
                Print #1, "T0 0 0 0 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Print #1, "T800 0 0 2 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                
            ElseIf Sheets("Setup").Cells(110, 2) = "Diode" Then
                'Header
                Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 2 0 " & PinCnt & " 24"
                Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
                'Labels
    
                Print #1, "300 150 0 12 100 10"
                Print #1, "REF-DES"
                
                Print #1, "300 -150 0 12 100 10"
                Print #1, "PART-TYPE"
                
                Print #1, "300 -250 0 12 100 10"
                Print #1, "*"
                Print #1, "300 -350 0 12 100 10"
                Print #1, "*"
                'Pieces
    
                Print #1, "CLOSED 4 10 0 -1"
                Print #1, "200 0"
                Print #1, "400 100"
                Print #1, "400 -100"
                Print #1, "200 0"
                Print #1, "OPEN 2 10 0 -1"
                Print #1, "200 100"
                Print #1, "200 -100"
                
                Print #1, "T0 0 0 0 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Print #1, "T600 0 0 2 140 20 0 2 230 0 0 16 PIN"
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
                
            End If
            Print #1,
            Print #1, "*END*"
    
            Close #1
    
            LeftPinCnt = 0
            RightPinCnt = 0
            TopPinCnt = 0
            BotPinCnt = 0
            LeftPinLen = 0
            RightPinLen = 0
            
            r = r - 1
            
            
            
    
        End If
    
        PrevGate = CurrGate
        r = r + 1
        
    
        
    Wend
    
    
    'Write Part Type Definition
    'Debug.Print "Logic Family = " & LogFam
    
    PartTypeFile = filePath & PTName & ".p"
    Open PartTypeFile For Output As #1
    'Control Statement
    Print #1, "*PADS-LIBRARY-PART-TYPES-V9*"
    'Blank Line
    Print #1,
    
    AttrCnt = 0
    While Sheets("Attributes").Cells(AttrCnt + 1, 1) <> vbNullString
        AttrCnt = AttrCnt + 1
    Wend
    'Header
    Print #1, PTName & " " & PCBdecal & " I ANA " & AttrCnt & " " & GateCnt & " 0 0 0"
    Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
    
    'Attributes
    AttrRow = 1
    While Sheets("Attributes").Cells(AttrRow, 1) <> vbNullString
        Print #1, Chr(34) & Sheets("Attributes").Cells(AttrRow, 1) & Chr(34) & " " & Sheets("Attributes").Cells(AttrRow, 2)
        AttrRow = AttrRow + 1
    Wend
    
    r = 2
    startRow = 2
    PinCnt = 0
    GateNo = 0
    PrevGate = Sheets("Template").Cells(r, 1).Value
    CurrGate = PrevGate
    While PrevGate <> vbNullString
        PrevGate = CurrGate
        CurrGate = Sheets("Template").Cells(r, 1).Value
        If CurrGate = PrevGate Then
            PinCnt = PinCnt + 1
        Else
            GateNo = GateNo + 1
            endRow = r - 1
            Print #1, "GATE 1 " & PinCnt & " 0"
            Print #1, SYMname & "-" & Num2Lett(GateNo)
                            
            For Row = startRow To endRow
                'Process PinNames inc. Negation
                pinName = Sheets("Template").Cells(Row, 3).Value
                NegFound = False
                For c = 1 To Len(pinName)
                    If Mid(pinName, c, 1) = "*" Then
                        NegFound = True
                        pinName = Left(pinName, c - 1) & "\" & Mid(pinName, c + 1)
                        c = c + 1
                    ElseIf Mid(pinName, c, 1) = "/" And NegFound Then
                        pinName = Left(pinName, c - 1) & "\" & Mid(pinName, c)
                        NegFound = False
                    End If
                Next c
                If Len(pinName) > 40 Then pinName = Left(pinName, 40)
                Print #1, Sheets("Template").Cells(Row, 2).Value & " " & Sheets("Template").Cells(Row, 5).Value & " " & GetPinTypePL(Sheets("Template").Cells(Row, 4).Value) & " " & pinName
            Next Row
            startRow = endRow + 1
            PinCnt = 0
            r = r - 1
        End If
        
        r = r + 1
        
    Wend
    
    Print #1,
    Print #1, "*END*"
    
    Close #1
    
End Function


Function ExportPL_PCB()
Dim GateNo As Integer

SYMname = txt_BaseName.Value
PTName = Txt_PartName.Value
PCBdecal = cbo_PCB.Value

    'If Chk_UseExisting Then
If Right(PCBdecal, 1) = "N" Or Right(PCBdecal, 3) = "N-D" Then
    WorksheetName = "FP-N"
ElseIf Right(PCBdecal, 1) = "L" Or Right(PCBdecal, 3) = "L-D" Then
    WorksheetName = "FP-L"
ElseIf Right(PCBdecal, 1) = "M" Or Right(PCBdecal, 3) = "M-D" Then
    WorksheetName = "FP-M"
Else
    WorksheetName = "FP-N"
End If
    'Else
    '    WorksheetName = "PFW"
    'End If

    On Error GoTo OnErrorGetObjectPowerPCB
    Set powerPCBApp = GetObject(, "PowerPCB.Application")
    filePath = powerPCBApp.DefaultFilePath & "\"
    
    'Write PADS PCB Decal file
    PCBDecalFile = filePath & PCBdecal & ".d"
    Open PCBDecalFile For Output As #1
    Print #1, Sheets(WorksheetName).Cells(2, 1)
    Print #1, Sheets(WorksheetName).Cells(3, 1)
    'Print #1, Sheets(WorksheetName).Cells(4, 1)
    'Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
    RowFP = 4
    Do
        DecalLn = Sheets(WorksheetName).Cells(RowFP, 1)
    '    If Left(DecalLn, 2) = "T " Then DecalLn = "T" & Mid(DecalLn, 3)
    '    If InStr(1, DecalLn, " RF ") Then DecalLn = Replace(DecalLn, " RF ", " RF 0 ")
        Print #1, DecalLn
        RowFP = RowFP + 1
    Loop While Sheets(WorksheetName).Cells(RowFP, 1) <> vbNullString
    
    Print #1,
    Print #1, "*END*"
    
    Close #1
    
    

    Set Lib = powerPCBApp.Libraries(cbo_LibPCB)
'    On Error Resume Next
    
    
    If Lib.GetLibraryItems(1, PCBdecal).Count = 1 Then
        Answer = MsgBox("Footprint " & PCBdecal & " already exists - OK to overwrite?", vbYesNo, "ECAD Part Wizard")
        If Answer = vbYes Then
            Set LibImport = Lib.ImportLibraryItems2(filePath & PCBdecal & ".d")
        End If
    Else
        Set LibImport1 = Lib.ImportLibraryItems(filePath & PCBdecal & ".d")
'        MsgBox "Footprint " & PCBdecal & " saved to library " & Lib.Name, vbOKOnly, "ECAD Part Wizard"
    End If
    
    
    If Not Chk_PL_SCH Then
        'Write Part Type Definition
        'Debug.Print "Logic Family = " & LogFam
        
        PartTypeFile = filePath & PTName & ".p"
        Open PartTypeFile For Output As #1
        'Control Statement
        Print #1, "*PADS-LIBRARY-PART-TYPES-V9*"
        'Blank Line
        Print #1,
        
        AttrCnt = 0
        While Sheets("Attributes").Cells(AttrCnt + 1, 1) <> vbNullString
            AttrCnt = AttrCnt + 1
        Wend
        'Header
        Print #1, PTName & " " & PCBdecal & " I UND " & AttrCnt & " 0 0 0 0"
        Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
        
        'Attributes
        AttrRow = 1
        While Sheets("Attributes").Cells(AttrRow, 1) <> vbNullString
            Print #1, Chr(34) & Sheets("Attributes").Cells(AttrRow, 1) & Chr(34) & " " & Sheets("Attributes").Cells(AttrRow, 2)
            AttrRow = AttrRow + 1
        Wend
        
'        R = 2
'        StartRow = 2
'        PinCnt = 0
'        GateNo = 0
'        PrevGate = Sheets("Template").Cells(R, 1).Value
'        CurrGate = PrevGate
'        While PrevGate <> vbNullString
'            PrevGate = CurrGate
'            CurrGate = Sheets("Template").Cells(R, 1).Value
'            If CurrGate = PrevGate Then
'                PinCnt = PinCnt + 1
'            Else
'                GateNo = GateNo + 1
'                EndRow = R - 1
'                Print #1, "GATE 1 " & PinCnt & " 0"
'                Print #1, SYMname & "-" & Num2Lett(GateNo)
'
'                For Row = StartRow To EndRow
'                    Print #1, Sheets("Template").Cells(Row, 2).Value & " " & Sheets("Template").Cells(Row, 5).Value & " " & GetPinTypePL(Sheets("Template").Cells(Row, 4).Value) & " " & Sheets("Template").Cells(Row, 3).Value
'                Next Row
'                Debug.Print StartRow & " - " & EndRow
        
        
        
'                StartRow = EndRow + 1
'                PinCnt = 0
'                R = R - 1
'            End If
            
'            R = R + 1
            
'        Wend
        
        Print #1,
        Print #1, "*END*"
        
        Close #1
        
        If Lib.GetLibraryItems(0, UCase(PTName)).Count = 1 Then
            Answer = MsgBox("Part Type " & PTName & " already exists - OK to overwrite?", vbYesNo, "ECAD Part Wizard")
            If Answer = vbYes Then
                Set LibImport = Lib.ImportLibraryItems2(filePath & PTName & ".p")
            End If
        Else
'        Debug.Print FilePath & PTName & ".p"
            Set LibImport = Lib.ImportLibraryItems(filePath & PTName & ".p")
'            MsgBox "Part Type " & PTName & " saved to library " & Lib.Name, vbOKOnly, "ECAD Part Wizard"
        End If
    End If
    Set powerPCBApp = Nothing
    Unload Me
Exit Function
OnErrorGetObjectPowerPCB:
        Msg = "Cannot connect to a running PADS Layout Session!"
        MsgBox Msg, vbCritical, "ECAD Part Wizard"
        Exit Function
End Function

Function ExportPX_PCB()
Dim GateNo As Integer

SYMname = txt_BaseName.Value
PTName = Txt_PartName.Value
PCBdecal = cbo_PCB.Value

    'If Chk_UseExisting Then
If Right(PCBdecal, 1) = "N" Or Right(PCBdecal, 3) = "N-D" Then
    WorksheetName = "FP-N"
ElseIf Right(PCBdecal, 1) = "L" Or Right(PCBdecal, 3) = "L-D" Then
    WorksheetName = "FP-L"
ElseIf Right(PCBdecal, 1) = "M" Or Right(PCBdecal, 3) = "M-D" Then
    WorksheetName = "FP-M"
Else
    WorksheetName = "FP-N"
End If
    'Else
    '    WorksheetName = "PFW"
    'End If

    filePath = txt_ExportDir.Value
    
    'Write PADS PCB Decal file
    PCBDecalFile = filePath & PCBdecal & ".d"
    Open PCBDecalFile For Output As #1
    Print #1, Sheets(WorksheetName).Cells(2, 1)
    Print #1, Sheets(WorksheetName).Cells(3, 1)
    'Print #1, Sheets(WorksheetName).Cells(4, 1)
    'Print #1, "TIMESTAMP " & Format(Now(), "yyyy.mm.dd.hh.mm.ss")
    RowFP = 4
    Do
        DecalLn = Sheets(WorksheetName).Cells(RowFP, 1)
    '    If Left(DecalLn, 2) = "T " Then DecalLn = "T" & Mid(DecalLn, 3)
    '    If InStr(1, DecalLn, " RF ") Then DecalLn = Replace(DecalLn, " RF ", " RF 0 ")
        Print #1, DecalLn
        RowFP = RowFP + 1
    Loop While Sheets(WorksheetName).Cells(RowFP, 1) <> vbNullString
    
    Print #1,
    Print #1, "*END*"
    
    Close #1
        
    Unload Me

End Function


Function CreateDS(filePath As String)
Dim GateCnt As Integer
Dim GateNo As Integer
Dim SYMname As String
Dim SymbolFile As String
Dim BoxWidthLR As Double
Dim BoxWidthTB As Double
Dim PinPitch As Double
Dim PadDefs() As String
Dim DecalAscLn As String
Dim SpaceIndex As Integer
Dim NextSpaceIndex As Integer
Dim FirstSpaceIndex As Integer
Dim PrevSpaceIndex As Integer
Dim SpaceIndex1 As Integer
Dim SpaceIndex2 As Integer
Dim SpaceIndex3 As Integer
Dim PrevDecalAscLn As String
Dim NextDecal As Boolean
Dim DecalNo As Integer
Dim IsPTH As Boolean
Dim tbl As ListObject
Dim SkipPadDef As Boolean
Dim tCount As Integer
Dim Dshape As Boolean
Dim Dlength As Double
Dim Dfound As Boolean

tCount = 0
Dfound = False
Dshape = False
Success = True

DecimalSymbol = GetInfo(LOCALE_SDECIMAL)

ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[GateSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(46, 46, 189)
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(192, 143, 46)
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(209, 50, 50)
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(45, 187, 45)
With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With

'FilePath = txt_ExportDir.Value
If Right(filePath, 1) <> "\" Then filePath = filePath & "\"
PinLength = cbo_PinLength.Value
PCBdecal = cbo_PCB.Value 'PKG_TYPE
RefDesPrefix = txt_RDP.Value 'REFDES
PinPitch = cbo_PinPitch.Value
SYMname = Left(txt_BaseName.Value, 28)
PTName = Left(Txt_PartName.Value, 30)

LeftPinCnt = 0
RightPinCnt = 0
TopPinCnt = 0
BotPinCnt = 0
LeftPinLen = 0
RightPinLen = 0
TopPinLen = 0
BotPinLen = 0
GateCnt = 0
r = 2
PrevGate = Sheets("Template").Cells(r, 1).Value

SymbolFile = filePath & Txt_PartName.Value & ".dsl"
Open SymbolFile For Output As #1
'Control Statement
'Print #1, "DESIGNSPARK_INTERMEDIATE_ASCII"
'Print #1,
'Print #1, "(asciiHeader (fileUnits MIL))"
'Print #1,
'Print #1, "(library Library_1"
'Print #1, vbTab & "(textStyleDef " & Chr(34) & "Normal" & Chr(34)
'Print #1, vbTab & vbTab & "(font"
'Print #1, vbTab & vbTab & vbTab & "(fontType Stroke)"
'Print #1, vbTab & vbTab & vbTab & "(fontFace " & Chr(34) & "Helvetica" & Chr(34) & ")"
'Print #1, vbTab & vbTab & vbTab & "(fontHeight 50)"
'Print #1, vbTab & vbTab & vbTab & "(strokeWidth 5)"
'Print #1, vbTab & vbTab & ")"
'Print #1, vbTab & ")"
'Print #1,


'If Chk_UseExisting Then
If Right(PCBdecal, 1) = "N" Or Right(PCBdecal, 3) = "N-D" Then
    WorksheetName = "FP-N"
ElseIf Right(PCBdecal, 1) = "L" Or Right(PCBdecal, 3) = "L-D" Then
    WorksheetName = "FP-L"
ElseIf Right(PCBdecal, 1) = "M" Or Right(PCBdecal, 3) = "M-D" Then
    WorksheetName = "FP-M"
Else
    WorksheetName = "FP-N"
End If
'Else
'    WorksheetName = "PFW"
'End If

IsPTH = False

LastDotIndex = InStrRev(Worksheets(WorksheetName).Cells(1, 1).Value, ".")
DesignSparkFile = Left(Worksheets(WorksheetName).Cells(1, 1).Value, LastDotIndex) & "dsl"

Print #1, "DESIGNSPARK_INTERMEDIATE_ASCII"
Print #1,
Print #1, "(asciiHeader"


'Retrieve Padstack Information from PADS Decal ASCII to derive padStyleDefs
PadDefLst = ","
DecalHdrRow = 4
DecalNo = 1
Row = 4
StartCol = 0

If Not Img_WarningD.Visible Then

    Do
    
    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
    
    'Debug.Print Worksheets(WorksheetName).Cells(Row, 1).Value
    'Retrieve number of different padstack definitions
    If Row = DecalHdrRow Then
    'SpaceIndex = SkipSpaces(DecalAscLn, 1)
    
    SpaceIndex = InStr(1, DecalAscLn, Space(1))
    
    ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
    SpaceIndex = SpaceIndex + ExtraSpaces
    
    DecalName = Left(DecalAscLn, SpaceIndex - 1 - ExtraSpaces)
    
    If Right(DecalName, 2) = "-D" Then
        Dshape = True
        DecalName = Mid(DecalName, 1, Len(DecalName) - 2)
        
        PinsTB = Worksheets("Setup").Range("B92")
        PinsLR = Worksheets("Setup").Range("B93")

        LeftPads = PinsLR
        BottomPads = PinsLR + PinsTB
        RightPads = (2 * PinsLR) + PinsTB
        TopPads = (2 * PinsLR) + (2 * PinsTB)
        
    End If
    
    Debug.Print DecalName
    
    If DecalNo = 1 Then
        For i = 1 To 8
        If i = 1 Then units = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
        SpaceIndex = InStr(SpaceIndex + 1, DecalAscLn, Space(1))
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
        SpaceIndex = SpaceIndex + ExtraSpaces
        If i = 7 Then NoOfPads = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
        Next i
        
        If units = "I" Then
            Print #1, vbTab & "(fileUnits MIL)"
        ElseIf units = "M" Then
            Print #1, vbTab & "(fileUnits MM)"
        End If
        Print #1, ")"
        Print #1, "(library Library_1"
    Else
        StartCol = StartCol + 4
    End If
    'Debug.Print NoOfPads

    
    'Debug.Print StartCol
    ReDim Preserve PadDefs(NoOfPads, (DecalNo * 4) - 1)
    
    PadDefs(0, StartCol) = DecalName
    
    
    NoOfPadstacks = Mid(DecalAscLn, SpaceIndex + 1, Len(DecalAscLn) - (InStr(SpaceIndex + 1, DecalAscLn, Space(1))))
    'Debug.Print DecalName
    End If
    
    If Left(DecalAscLn, 6) = "COPCLS" And Dshape And Not Dfound Then
        Dfound = True
        Row = Row + 1
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        NextSpaceIndex = InStr(1, DecalAscLn, Space(1))
        FirstPnt = Val(Mid(DecalAscLn, 1, NextSpaceIndex - 1))
'        Debug.Print "First Point = " & FirstPnt
        Row = Row + 1
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        For i = 1 To 7
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 1 Then ArcStartX = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
            If i = 7 Then ArcUPX = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
        
'        Debug.Print "ArcStartX = " & ArcStartX
'        Debug.Print "ArcUPX = " & ArcUPX
        
        Dlength = (ArcStartX - FirstPnt) + (ArcUPX - ArcStartX)
'        Debug.Print "Dlength = " & Dlength
    End If

    
    If Left(DecalAscLn, 1) = "T" Then
        
        FirstSpaceIndex = InStr(DecalAscLn, Space(1))
        
        If (FirstSpaceIndex = 2 And (IsNumeric(Mid(DecalAscLn, 3, 1)) Or (Mid(DecalAscLn, 3, 1) = "-"))) Or (IsNumeric(Mid(DecalAscLn, 2, 1))) Or (Mid(DecalAscLn, 2, 1) = "-") Then
            
            LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
            PinNo = Mid(DecalAscLn, LastSpaceIndex + 1)
            tCount = tCount + 1
'            If Not IsNumeric(PinNo) Then
                TempRow = 2
                
                Do While CStr(Worksheets("Template").Cells(TempRow, 2).Value) <> PinNo And CStr(Worksheets("Template").Cells(TempRow, 2).Value) <> vbNullString
                    TempRow = TempRow + 1
                Loop
                If CStr(Worksheets("Template").Cells(TempRow, 2).Value) <> vbNullString Then
                    If IsNumeric(PinNo) Then
                        PinNo = Worksheets("Template").Cells(TempRow, 7)
                    Else
                        PinNo = tCount
                    End If
                End If
'            End If
            
            If FirstSpaceIndex = 2 Then
                NextSpaceIndex = InStr(3, DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PinX = Mid(DecalAscLn, 3, NextSpaceIndex - 3)
                If PinNo = 1 Then Pin1X = PinX
            Else
                NextSpaceIndex = InStr(2, DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PinX = Mid(DecalAscLn, 2, NextSpaceIndex - ExtraSpaces - 2)
            End If
            PinY = Mid(DecalAscLn, NextSpaceIndex + 1, InStr(NextSpaceIndex + 1, DecalAscLn, Space(1)) - NextSpaceIndex - 1)
            If PinNo = 1 Then Pin1Y = PinY
    '        Debug.Print PinNo
    '        Debug.Print PinX
    '        Debug.Print PinY
            
            PadDefs(PinNo, StartCol + 1) = PinX
            PadDefs(PinNo, StartCol + 2) = PinY
            
        End If
        
    End If
    
    If Left(DecalAscLn, 3) = "PAD" Then
    'DesignSpark Pad Shapes
    'Ellipse (E)
    'Rect (R)
    
    
    SpaceIndex1 = InStr(1, DecalAscLn, Space(1))
    ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex1)
    SpaceIndex1 = SpaceIndex1 + ExtraSpaces
    SpaceIndex2 = InStr(SpaceIndex1 + 1, DecalAscLn, Space(1))
    ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex2)
    SpaceIndex2 = SpaceIndex2 + ExtraSpaces
    
    SpaceIndex2 = InStr(5, DecalAscLn, Space(1))
    Pad = Mid(DecalAscLn, SpaceIndex1 + 1, SpaceIndex2 - SpaceIndex1 - 1)
'    Debug.Print "Pad = " & Pad
    
    LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
    DrillSize = Mid(DecalAscLn, LastSpaceIndex + 1)
    
    If DrillSize <> 0 Then IsPTH = True
    
'    Debug.Print "Drill Size = " & DrillSize
    
    Row = Row + 1
    'Mounted Side (Top)
    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
    'Debug.Print DecalAscLn
    
    'Get Pad Shape
    PrevSpaceIndex = 0
    NextSpaceIndex = 0
    For i = 1 To 3
        NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
        If i = 1 Then PadLayer = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        
        If i = 2 Then PadWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        
        If i = 3 And NextSpaceIndex <> 0 Then
            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        Else
            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
        End If
        
        
        
        
        ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
        NextSpaceIndex = NextSpaceIndex + ExtraSpaces
        PrevSpaceIndex = NextSpaceIndex
    Next i
    
    '
'    Debug.Print "PadLayer = " & PadLayer
'    Debug.Print "PadWidth = " & PadWidth
'    Debug.Print "Shape = " & Shape
    
    If Shape = "R" Or Shape = "S" Then
        If Shape = "R" Or Shape = "OF" Then Shape = "E"
        PadHeight = PadWidth
        PadRotation = 0
    ElseIf Shape = "RF" Then
        Shape = "R"
        For i = 4 To 7
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
    '        If Chk_UseExisting Then
                If i = 5 Then
                    PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                End If
                If i = 6 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 7 And PadHeight = 0 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '        Else
    '            If i = 4 Then
    '                PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '            End If
    '            If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '        End If
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
    
        Next i
        
    '    Debug.Print "PadHeight = " & PadHeight
    ElseIf Shape = "OF" Then
        Shape = "E"
        For i = 4 To 7
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
    '        If Chk_UseExisting Then
    '            If i = 5 Then
    '                PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '            End If
    '            If i = 6 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '            If i = 7 And PadHeight = 0 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '        Else
                If i = 4 Then
                    PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                End If
                If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
'            End If
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
    
        Next i
        
    '    Debug.Print "PadHeight = " & PadHeight
    
    End If
    
    'BuildPadDef
    PadDef = Shape & "W" & PadWidth & "L" & PadHeight & "H" & DrillSize
'    Debug.Print PadDef
    If Shape = "E" Then PadShape = "Ellipse"
    If Shape = "R" Or Shape = "RF" Or Shape = "S" Then PadShape = "Rect"
    
    
'    Debug.Print PadDefLst
    If InStr(PadDefLst, "," & PadDef & ",") <> 0 Then
        SkipPadDef = True
    Else
        SkipPadDef = False
    End If
    
    If Not SkipPadDef Then
        If Pad = 0 And Dshape Then
'            Debug.Print Replace(Dlength, DecimalSymbol, ".")
            Print #1, vbTab & "(padStyleDef " & Chr(34) & "RW" & PadWidth & "L" & Replace(Dlength, DecimalSymbol, ".") & "H0" & Chr(34)
            Print #1, vbTab & vbTab & "(holeDiam " & DrillSize & ")"
            Print #1, vbTab & vbTab & "(padShape (layerNumRef 1) (padShapeType Rect)  (shapeWidth " & PadWidth & ") (shapeHeight " & Replace(Dlength, DecimalSymbol, ".") & "))"
        Else
            Print #1, vbTab & "(padStyleDef " & Chr(34) & PadDef & Chr(34)
            Print #1, vbTab & vbTab & "(holeDiam " & DrillSize & ")"
            Print #1, vbTab & vbTab & "(padShape (layerNumRef 1) (padShapeType " & PadShape & ")  (shapeWidth " & PadWidth & ") (shapeHeight " & PadHeight & "))"
        End If
    End If
    
    
    
    
    If PadRotation = 0 Then
        PadRotation = 90
    ElseIf PadRotation = 90 Then
        PadRotation = 0
    End If
    
    'Debug.Print DecalNo
    If Pad = 0 Then
        For i = 1 To NoOfPads
            If Dshape Then
                If PadDefs(i, StartCol) = vbNullString Then PadDefs(i, StartCol) = "RW" & PadWidth & "L" & Dlength & "H0"
            Else
                If PadDefs(i, StartCol) = vbNullString Then PadDefs(i, StartCol) = PadDef
            End If
            If PadDefs(i, StartCol + 3) = vbNullString Then PadDefs(i, StartCol + 3) = PadRotation
        Next i
    Else
        PadDefs(Pad, StartCol) = PadDef
        PadDefs(Pad, StartCol + 3) = PadRotation
    End If
    
    'Debug.Print "Pad Rotation = " & PadRotation
    
    'Skip Inner Layers
    Row = Row + 1
    
    'Opposite Side (Bottom)
    Row = Row + 1
    'Bottom
    PrevSpaceIndex = 0
    NextSpaceIndex = 0
    DecalAscLn = Worksheets(WorksheetName).Cells(Row, 1).Value
    For i = 1 To 3
        NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
        If i = 1 Then PadLayer = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        If i = 2 Then PadWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        If i = 3 And NextSpaceIndex <> 0 Then
            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        Else
            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
        End If
        ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
        NextSpaceIndex = NextSpaceIndex + ExtraSpaces
        PrevSpaceIndex = NextSpaceIndex
    Next i
    
    If Shape = "R" Or Shape = "S" Then
        If Shape = "R" Then Shape = "E"
        PadHeight = PadWidth
        PadRotation = 0
    ElseIf Shape = "RF" Then
        Shape = "R"
        For i = 4 To 6
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
    End If
    
    If Shape = "E" Then PadShape = "Ellipse"
    If Shape = "R" Or Shape = "RF" Or Shape = "S" Then PadShape = "Rect"
    
    
    If Not SkipPadDef Then
        Print #1, vbTab & vbTab & "(padShape (layerNumRef 16) (padShapeType " & PadShape & ")  (shapeWidth " & PadWidth & ") (shapeHeight " & PadHeight & "))"
        Print #1, vbTab & ")"
        PadDefLst = PadDefLst & PadDef & ","
    End If
    
    End If
    
    Row = Row + 1
    
    If Worksheets(WorksheetName).Cells(Row, 1).Value = vbNullString And Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString Then
        DecalHdrRow = Row + 1
        DecalNo = DecalNo + 1
    End If
    
    'Debug.Print Worksheets(WorksheetName).Cells(Row + 1, 1).Value
    
    Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")
    
    
    Print #1, vbTab & "(textStyleDef " & Chr(34) & "Normal" & Chr(34)
    Print #1, vbTab & vbTab & "(font"
    Print #1, vbTab & vbTab & vbTab & "(fontType Stroke)"
    Print #1, vbTab & vbTab & vbTab & "(fontFace " & Chr(34) & "Helvetica" & Chr(34) & ")"
    If units = "I" Then
        Print #1, vbTab & vbTab & vbTab & "(fontHeight 50)"
        Print #1, vbTab & vbTab & vbTab & "(strokeWidth 5)"
    Else
        Print #1, vbTab & vbTab & vbTab & "(fontHeight 1.27)"
        Print #1, vbTab & vbTab & vbTab & "(strokeWidth 0.127)"
    End If
    Print #1, vbTab & vbTab & ")"
    Print #1, vbTab & ")"
    
    'Remove Padding Spaces
    DecalAscLn = RemovePaddingSpaces(DecalAscLn)
    
    Row = 3
    StartCol = 0
    
    NextDecal = True
    
    If Not IsPTH Or Not Chk_UseExisting Then
        Pin1X = 0
        Pin1Y = 0
    End If
    
    Do
    
        
    
        If NextDecal Then
            Print #1, vbTab & "(patternDef " & Chr(34) & Left(PadDefs(0, StartCol), 30) & Chr(34) & " (originalName " & Chr(34) & Left(PadDefs(0, StartCol), 30) & Chr(34) & ")"
            Print #1, vbTab & vbTab & "(multiLayer"
        
            For i = 1 To NoOfPads
                If Dshape Then
                    If (i > LeftPads And i <= BottomPads) Or (i > RightPads And i <= TopPads) Then
                        Print #1, vbTab & vbTab & vbTab & "(pad (padNum " & i & ") (padStyleRef " & PadDefs(i, StartCol) & ") (pt " & Replace(Val(PadDefs(i, StartCol + 1)) - Pin1X, DecimalSymbol, ".") & ", " & Replace(Val(PadDefs(i, StartCol + 2)) - Pin1Y, DecimalSymbol, ".") & ") (rotation 0))"
                    Else
                        Print #1, vbTab & vbTab & vbTab & "(pad (padNum " & i & ") (padStyleRef " & PadDefs(i, StartCol) & ") (pt " & Replace(Val(PadDefs(i, StartCol + 1)) - Pin1X, DecimalSymbol, ".") & ", " & Replace(Val(PadDefs(i, StartCol + 2)) - Pin1Y, DecimalSymbol, ".") & ") (rotation " & PadDefs(i, StartCol + 3) & "))"
                    End If
                Else
                    Print #1, vbTab & vbTab & vbTab & "(pad (padNum " & i & ") (padStyleRef " & PadDefs(i, StartCol) & ") (pt " & Replace(Val(PadDefs(i, StartCol + 1)) - Pin1X, DecimalSymbol, ".") & ", " & Replace(Val(PadDefs(i, StartCol + 2)) - Pin1Y, DecimalSymbol, ".") & ") (rotation " & PadDefs(i, StartCol + 3) & "))"
                End If
            '    Debug.Print PadDefs(i, 0)
            Next i
            Print #1, vbTab & vbTab & ")"
            NextDecal = False
            StartCol = StartCol + 4
        End If
    
    
        PrevDecalAscLn = DecalAscLn
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        If DecalAscLn = "REF-DES" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, PrevDecalAscLn, Space(1))
                If i = 1 Then RefDesX = Val(Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                If i = 2 Then RefDesY = Val(Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                If i = 7 Then LAYER = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(PrevDecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
'            Debug.Print "X = " & RefDesX
'            Debug.Print "Y = " & RefDesY
'            Debug.Print "Layer = " & LAYER
            If LAYER = 1 Or LAYER = 26 Then
                Print #1, vbTab & vbTab & "(layerContents (layerNumRef 18)"
                Print #1, vbTab & vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt " & Replace((RefDesX - Pin1X), DecimalSymbol, ".") & ", " & Replace((RefDesY - Pin1Y), DecimalSymbol, ".") & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & ") (isVisible True))"
                Print #1, vbTab & vbTab & ")"
            End If
        End If
        
        If DecalAscLn = "*" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, PrevDecalAscLn, Space(1))
                If i = 1 Then Pin1IdentX = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 2 Then Pin1IdentY = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LAYER = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(PrevDecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LAYER = 26 Then
                Print #1, vbTab & vbTab & "(layerContents (layerNumRef 18)"
                Print #1, vbTab & vbTab & vbTab & "(arc (pt " & Replace((Pin1IdentX - Pin1X), DecimalSymbol, ".") & ", " & Replace((Pin1IdentY - Pin1Y), DecimalSymbol, ".") & ") (radius 5) (startAngle 0.0) (sweepAngle 0.0) (width 10))"
                Print #1, vbTab & vbTab & ")"
                Print #1, vbTab & vbTab & "(layerContents (layerNumRef 18)"
                Print #1, vbTab & vbTab & vbTab & "(arc (pt " & Replace((Pin1IdentX - Pin1X), DecimalSymbol, ".") & ", " & Replace((Pin1IdentY - Pin1Y), DecimalSymbol, ".") & ") (radius 5) (startAngle 180.0) (sweepAngle 180.0) (width 10))"
                Print #1, vbTab & vbTab & ")"
            End If
        End If
        
        If Left(DecalAscLn, 6) = "CIRCLE" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LAYER = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LAYER = 26 Or LAYER = 27 Then
                If LAYER = 26 Then
                    LayerNumRef = 18
                ElseIf LAYER = 27 Then
                    LayerNumRef = 28
                End If
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                CircleX1 = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
                CircleY1 = Val(Mid(DecalAscLn, LastSpaceIndex + 1))
                Debug.Print DecalAscLn
                Debug.Print "CircleX1 = " & CircleX1
                Debug.Print "CircleY1 = " & CircleY1
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                CircleX2 = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
                CircleY2 = Val(Mid(DecalAscLn, LastSpaceIndex + 1))
    '            Debug.Print DecalAscLn
    
                CircleDia = Abs(CircleX1 - CircleX2)
                CircleRad = CircleDia / 2
                
                If CircleX1 <= CircleX2 Then
                    CenterX = CircleX1 + CircleRad
                Else
                    CenterX = CircleX2 + CircleRad
                End If
    
    
                Print #1, vbTab & vbTab & "(layerContents (layerNumRef " & LayerNumRef & ")"
                Print #1, vbTab & vbTab & vbTab & "(arc (pt " & Replace(CenterX, DecimalSymbol, ".") & ", " & Replace(CircleY1, DecimalSymbol, ".") & ") (radius " & Replace(CircleRad, DecimalSymbol, ".") & ") (startAngle 0.0) (sweepAngle 0.0) (width " & LineWidth & "))"
                Print #1, vbTab & vbTab & ")"
                Print #1, vbTab & vbTab & "(layerContents (layerNumRef " & LayerNumRef & ")"
                Print #1, vbTab & vbTab & vbTab & "(arc (pt " & Replace(CenterX, DecimalSymbol, ".") & ", " & Replace(CircleY1, DecimalSymbol, ".") & ") (radius " & Replace(CircleRad, DecimalSymbol, ".") & ") (startAngle 180.0) (sweepAngle 180.0) (width " & LineWidth & "))"
                Print #1, vbTab & vbTab & ")"
            End If
        End If
        
        If Left(DecalAscLn, 6) = "CLOSED" Then
        
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 4
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 2 Then NoOfXY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
            LayerNumRef = vbNullString
            If LayerNo = 20 Or LayerNo = 25 Then
                LayerNumRef = 30
            ElseIf LayerNo = 26 Then
                LayerNumRef = 18
            ElseIf LayerNo = 27 Then
                LayerNumRef = 28
            End If
            
            If LayerNumRef <> vbNullString Then
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                PrevXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                For i = 1 To NoOfXY - 1
                    Row = Row + 1
                    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                    FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                    NextXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                    PrevX = Val(Left(PrevXY, InStr(PrevXY, Space(1)) - 2)) - Pin1X
                    PrevY = Val(Mid(PrevXY, InStr(PrevXY, Space(1)) + 1)) - Pin1Y
                    NextX = Val(Left(NextXY, InStr(NextXY, Space(1)) - 2)) - Pin1X
                    NextY = Val(Mid(NextXY, InStr(NextXY, Space(1)) + 1)) - Pin1Y
                    Print #1, vbTab & vbTab & "(layerContents (layerNumRef " & LayerNumRef & ")"
                    Print #1, vbTab & vbTab & vbTab & "(line (pt " & Replace(PrevX, DecimalSymbol, ".") & " " & Replace(PrevY, DecimalSymbol, ".") & ") (pt " & Replace(NextX, DecimalSymbol, ".") & " " & Replace(NextY, DecimalSymbol, ".") & ") (width " & LineWidth & "))"
                    Print #1, vbTab & vbTab & ")"
                    PrevXY = NextXY
                Next i
            End If
        End If
        
        If Left(DecalAscLn, 4) = "OPEN" Then
        
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 4
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 2 Then LineCount = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
            LayerNumRef = vbNullString
            
            If LayerNo = 26 Then
                LayerNumRef = 18
            ElseIf LayerNo = 27 Then
                LayerNumRef = 28
            End If
            
            If LayerNumRef <> vbNullString Then
                Print #1, vbTab & vbTab & "(layerContents (layerNumRef " & LayerNumRef & ")"
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                
    'Check for arc
                FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                
                If FirstSpaceIndex + ExtraSpaces <> InStrRev(DecalAscLn, Space(1)) Then
                
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                For i = 1 To 6
                    NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                    If i = 3 Then StartAngle = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    If i = 4 Then SweepAngle = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    If i = 5 Then LLPX = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    If i = 6 Then LLPY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                    NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                    PrevSpaceIndex = NextSpaceIndex
                Next i
                
                Debug.Print StartAngle
                Debug.Print SweepAngle
                Debug.Print LLPX
                Debug.Print LLPY
                
                StartAngle = Left(StartAngle, Len(StartAngle) - 1) & "." & Right(StartAngle, 1)
                SweepAngle = Left(SweepAngle, Len(SweepAngle) - 1) & "." & Right(SweepAngle, 1)
                URPY = Mid(DecalAscLn, InStrRev(DecalAscLn, Space(1)) + 1)
                
                Debug.Print "URPY = " & URPY
                
                Radius = (URPY - LLPY) / 2
                ArcCenterX = LLPX + Radius
                ArcCenterY = LLPY + Radius
                
                Print #1, vbTab & vbTab & vbTab & "(arc (pt " & ArcCenterX - Pin1X & ", " & ArcCenterY - Pin1Y & ") (radius " & Radius & ") (startAngle " & StartAngle & ") (sweepAngle " & SweepAngle & ") (width " & LineWidth & "))"
    
                Row = Row + 1 'Skip SecondXY for arc
                
                Else
                    For Line = 1 To LineCount - 1
                
                        If Line = 1 Then
                            FirstXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                            FirstX = Val(Left(FirstXY, InStr(FirstXY, Space(1)) - 2)) - Pin1X
                            FirstY = Val(Mid(FirstXY, InStr(FirstXY, Space(1)) + 1)) - Pin1Y
                        Else
                            FirstX = NextX
                            FirstY = NextY
                        End If
        
                        Row = Row + 1
                        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                        NextSpaceIndex = InStr(DecalAscLn, Space(1))
                        ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                        NextXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                        NextX = Val(Left(NextXY, InStr(NextXY, Space(1)) - 2)) - Pin1X
                        NextY = Val(Mid(NextXY, InStr(NextXY, Space(1)) + 1)) - Pin1Y
                        Print #1, vbTab & vbTab & vbTab & "(line (pt " & Replace(FirstX, DecimalSymbol, ".") & " " & Replace(FirstY, DecimalSymbol, ".") & ") (pt " & Replace(NextX, DecimalSymbol, ".") & " " & Replace(NextY, DecimalSymbol, ".") & ") (width " & LineWidth & "))"
                    
                    Next Line
                
                End If
                Print #1, vbTab & vbTab & ")"
            End If
        End If
        
        Row = Row + 1
        
        
    If Worksheets(WorksheetName).Cells(Row, 1).Value = vbNullString And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString And Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*") Then
        Print #1, vbTab & ")"
        NextDecal = True
    End If
              
    Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")
    
    Print #1, vbTab & ")"

Else
    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
    
    'Debug.Print Worksheets(WorksheetName).Cells(Row, 1).Value
    'Retrieve number of different padstack definitions
    If Row = DecalHdrRow Then
        'SpaceIndex = SkipSpaces(DecalAscLn, 1)
        
        SpaceIndex = InStr(1, DecalAscLn, Space(1))
        
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
        SpaceIndex = SpaceIndex + ExtraSpaces
        
        DecalName = Left(DecalAscLn, SpaceIndex - 1 - ExtraSpaces)
'        Debug.Print DecalName
        
        If DecalNo = 1 Then
            For i = 1 To 8
            If i = 1 Then units = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
            SpaceIndex = InStr(SpaceIndex + 1, DecalAscLn, Space(1))
            ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
            SpaceIndex = SpaceIndex + ExtraSpaces
            If i = 7 Then NoOfPads = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
            Next i
            
            If units = "I" Then
                Print #1, vbTab & "(fileUnits MIL)"
            ElseIf units = "M" Then
                Print #1, vbTab & "(fileUnits MM)"
            End If
            Print #1, ")"
            Print #1, "(library Library_1"
        Else
            StartCol = StartCol + 4
        End If
    End If
End If

'***********************
'***SYMBOL DEFINITION***
'***********************

startRow = 2
CurrGate = Sheets("Template").Cells(r, 1).Value
While PrevGate <> vbNullString
    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(r, 1).Value
    
    If CurrGate = PrevGate Then
        If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then
            LeftPinCnt = LeftPinCnt + 1
            If LeftPinLen < Len(Sheets("Template").Cells(r, 3)) Then LeftPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then
            RightPinCnt = RightPinCnt + 1
            If RightPinLen < Len(Sheets("Template").Cells(r, 3)) Then RightPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then
            TopPinCnt = TopPinCnt + 1
            If TopPinLen < Len(Sheets("Template").Cells(r, 3)) Then TopPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then
            BotPinCnt = BotPinCnt + 1
            If BotPinLen < Len(Sheets("Template").Cells(r, 3)) Then BotPinLen = Len(Sheets("Template").Cells(r, 3))
        End If
    Else
    
        Debug.Print "Left Pin Len = " & LeftPinLen
        Debug.Print "Bottom Pin Len = " & BotPinLen
        Debug.Print "Right Pin Len = " & RightPinLen
        Debug.Print "Top Pin Len = " & TopPinLen

        GateCnt = GateCnt + 1
        
        Print #1, vbTab & "(symbolDef " & Chr(34) & SYMname & "-" & Num2Lett(GateCnt) & Chr(34) & " (originalName " & Chr(34) & SYMname & "-" & Num2Lett(GateCnt) & Chr(34) & ")"
        Print #1,
        
        If Sheets("Setup").Cells(110, 2) = "None (Box)" Then
            
            
            
            If LeftPinCnt <> 0 Then
                OriginPin = "Left"
            ElseIf TopPinCnt <> 0 Then
                OriginPin = "Top"
            ElseIf RightPinCnt <> 0 Then
                OriginPin = "Right"
            ElseIf BotPinCnt <> 0 Then
                OriginPin = "Bottom"
            End If
            
            If LeftPinCnt > RightPinCnt Then
                PinCntLR = LeftPinCnt
            Else
                PinCntLR = RightPinCnt
            End If
            
            If TopPinCnt = 0 Then
                TopOffset = PinPitch
            Else
                TopOffset = RoundToNearest((TopPinLen * 50) + 200, 100)
            End If
            
            Debug.Print "TopOffset = " & TopOffset
            
            If BotPinCnt = 0 Then
                BotOffset = PinPitch
            Else
                BotOffset = RoundToNearest((BotPinLen * 50) + 200, 100)
            End If
            
            Debug.Print "BotOffset = " & BotOffset
        
            BoxHeightTB = TopOffset + BotOffset
            
            If PinCntLR = 0 Then
                BoxHeightLR = 0
            Else
    '            BoxHeightLR = (PinCntLR * PinPitch) + PinPitch
                BoxHeightLR = ((PinCntLR - 1) * PinPitch)
            End If
            
            BoxHeight = RoundToNearest(BoxHeightLR + BoxHeightTB, 100)
            
            Debug.Print "Box Height = " & BoxHeight
    
            If TopPinCnt > BotPinCnt Then
                PinCntTB = TopPinCnt
            Else
                PinCntTB = BotPinCnt
            End If
            
            If LeftPinLen + RightPinLen = 0 Then
                BoxWidthLR = 0
            Else
                BoxWidthLR = RoundToNearest(((LeftPinLen + RightPinLen) * 50) + 200, 100)
            End If
            
            BoxWidthTB = RoundToNearest((PinCntTB * PinPitch) + PinPitch, 100)
            
            If BoxWidthLR > BoxWidthTB Then
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthLR, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthLR, 100)
                End If
            Else
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthTB, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthTB, 100)
                End If
            End If
            
            Debug.Print "Box Width = " & BoxWidth
            
            PinCnt = LeftPinCnt + RightPinCnt + TopPinCnt + BotPinCnt
            
            If OriginPin = "Left" Then
                OffsetX = PinLength
                OffsetY = TopOffset
            ElseIf OriginPin = "Top" Then
                OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
                OffsetY = -(PinLength)
            ElseIf OriginPin = "Right" Then
                OffsetX = -PinLength - BoxWidth
                OffsetY = TopOffset
            ElseIf OriginPin = "Bottom" Then
                OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
                OffsetY = PinLength + BoxHeight
            End If
    
            PinNum = 1
            
            'Left Pins
            For lt = 1 To LeftPinCnt
                Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt 0 mils " & -(lt - 1) * PinPitch & " mils) (rotation 0) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinDes (text (pt " & PinLength - 25 & " mils " & -(lt - 1) * PinPitch & " mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))) (pinName (text (pt " & PinLength + 25 & " mils " & (-(lt - 1) * PinPitch) - 25 & " mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                Print #1, vbTab & vbTab & "))"
                PinNum = PinNum + 1
            Next lt
            
            'Right Pins
            If OriginPin = "Right" Then
                For rt = 1 To RightPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt 0 mils " & -(rt - 1) * PinPitch & " mils) (rotation 180) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinDes (text (pt " & -PinLength + 25 & " mils " & -(rt - 1) * PinPitch & " mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & ")))(pinName (text (pt " & -PinLength & " mils " & (-(rt - 1) * PinPitch) - 25 & " mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next rt
            ElseIf OriginPin = "Left" Then
                For rt = 1 To RightPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & (PinLength * 2) + BoxWidth & " mils " & -(rt - 1) * PinPitch & " mils) (rotation 180) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinDes (text (pt " & PinLength + BoxWidth + 25 & " mils " & -(rt - 1) * PinPitch & " mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))) (pinName (text (pt " & PinLength + BoxWidth & " mils " & (-(rt - 1) * PinPitch) - 25 & " mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next rt
            ElseIf OriginPin = "Top" Then
                For rt = 1 To RightPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & BoxWidth + OffsetX + PinLength & " mils " & -((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset) & " mils) (rotation 180) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinDes (text (pt " & BoxWidth + OffsetX + 25 & " mils " & -((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset) & " mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))) (pinName (text (pt " & BoxWidth + OffsetX & " mils " & (-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) - 25 & " mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next rt
            End If
            
            'Top Pins
            If OriginPin = "Top" Then
                For tt = 1 To TopPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & RoundDownToNearest((tt - 1) * PinPitch, PinPitch) & " mils 0 mils) (rotation 270) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinDes (text (pt " & RoundDownToNearest((tt - 1) * PinPitch, PinPitch) & " mils " & -PinLength + 25 & " mils) (rotation 90) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))) (pinName (text (pt " & RoundDownToNearest((tt - 1) * PinPitch, PinPitch) + 25 & " mils " & -PinLength & " mils) (rotation 90) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next tt
            ElseIf OriginPin = "Left" Then
                For tt = 1 To TopPinCnt
                
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " mils " & OffsetY + PinLength & " mils) (rotation 270) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinDes (text (pt " & RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " mils " & OffsetY + 25 & " mils) (rotation 90) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))) (pinName (text (pt " & RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) + 25 & " mils " & OffsetY & " mils) (rotation 90) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    
                    
                    
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next tt
            End If
            
            'Bottom Pins
            If OriginPin = "Bottom" Then
                For bt = 1 To BotPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " mils 0 mils) (rotation 90) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinDes (text (pt " & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " mils " & PinLength - 25 & " mils) (rotation 90) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))) (pinName (text (pt " & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) + 25 & " mils " & PinLength + 25 & " mils) (rotation 90) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next bt
                
                
             ElseIf OriginPin = "Left" Then
                For bt = 1 To BotPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " mils " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " mils) (rotation 90) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinDes (text (pt " & RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " mils " & -BotOffset - ((PinCntLR - 1) * PinPitch) - 25 & " mils)"
                    
                    
                    
                    
                    
                    Print #1, vbTab & vbTab & "(rotation 90) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))) (pinName (text (pt " & RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) + 25 & " mils " & -BotOffset - ((PinCntLR - 1) * PinPitch) + 25 & " mils) (rotation 90) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next bt
                
                
                
             ElseIf OriginPin = "Right" Then
                For bt = 1 To BotPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & RoundDownToNearest(-PinLength - ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch) & " mils " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " mils) (rotation 90) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinDes (text (pt " & RoundDownToNearest(-PinLength - ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch) & " mils " & -BotOffset - ((PinCntLR - 1) * PinPitch) - 25 & " mils) (rotation 90) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))) (pinName (text (pt " & RoundDownToNearest(-PinLength - ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch) + 25 & " mils " & -BotOffset - (PinCntLR * PinPitch) + 25 & " mils) (rotation 90) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next bt
             ElseIf OriginPin = "Top" Then
                For bt = 1 To BotPinCnt
                    Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " mils " & -BoxHeight - (2 * PinLength) & " mils) (rotation 90) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinDes (text (pt " & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " mils " & -BoxHeight - (PinLength) - 25 & " mils) (rotation 90) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))) (pinName (text (pt " & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) + 25 & " mils " & -BoxHeight - PinLength + 25 & " mils) (rotation 90) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                    Print #1, vbTab & vbTab & "))"
                    PinNum = PinNum + 1
                Next bt
            End If
            
            Print #1,
            
            'Pieces
            Print #1, vbTab & vbTab & "(line (pt " & OffsetX & " mils " & OffsetY & " mils) (pt " & OffsetX + BoxWidth & " mils " & OffsetY & " mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt " & OffsetX + BoxWidth & " mils " & OffsetY & " mils) (pt " & OffsetX + BoxWidth & " mils " & OffsetY - BoxHeight & " mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt " & OffsetX + BoxWidth & " mils " & OffsetY - BoxHeight & " mils) (pt " & OffsetX & " mils " & OffsetY - BoxHeight & " mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt " & OffsetX & " mils " & OffsetY - BoxHeight & " mils) (pt " & OffsetX & " mils " & OffsetY & " mils) (width 10 mils))"
            Print #1,
            
            If RightPinCnt = 0 Then
                Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt " & OffsetX + BoxWidth + 50 & " mils " & OffsetY - (BoxHeight / 2) + 50 & " mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Else
                Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt " & OffsetX + BoxWidth + 50 & " mils " & OffsetY + 250 & " mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            End If
            
        ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Non-Polarised)" Then
            
            Print #1, vbTab & vbTab & "(pin (pinNum 1) (pt 0 mils 0 mils) (rotation 0) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 225 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1, vbTab & vbTab & "(pin (pinNum 2) (pt 500 mils 0 mils) (rotation 180) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 500 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1,
            
            Print #1, vbTab & vbTab & "(line (pt 220 mils 100 mils) (pt 220 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 280 mils 100 mils) (pt 280 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 200 mils 0 mils) (pt 220 mils 0 mils) (width 6 mils))"
            Print #1, vbTab & vbTab & "(line (pt 280 mils 0 mils) (pt 300 mils 0 mils) (width 6 mils))"
    
            Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt 350 mils 150 mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            
        ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Polarised)" Then
        
            Print #1, vbTab & vbTab & "(pin (pinNum 1) (pt 0 mils 0 mils) (rotation 0) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 225 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1, vbTab & vbTab & "(pin (pinNum 2) (pt 500 mils 0 mils) (rotation 180) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 500 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1,
            
            Print #1, vbTab & vbTab & "(line (pt 200 mils 100 mils) (pt 200 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 200 mils -100 mils) (pt 230 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 230 mils -100 mils) (pt 230 mils 100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 230 mils 100 mils) (pt 200 mils 100 mils) (width 10 mils))"
            
            'Fill Lines for positive plate
            Print #1, vbTab & vbTab & "(line (pt 210 mils 90 mils) (pt 210 mils -90 mils) (width 20 mils))"
            Print #1, vbTab & vbTab & "(line (pt 220 mils 90 mils) (pt 220 mils -90 mils) (width 20 mils))"
            
            Print #1, vbTab & vbTab & "(line (pt 300 mils 100 mils) (pt 300 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 300 mils -100 mils) (pt 270 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 270 mils -100 mils) (pt 270 mils 100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 270 mils 100 mils) (pt 300 mils 100 mils) (width 10 mils))"
            
            Print #1, vbTab & vbTab & "(line (pt 180 mils 50 mils) (pt 140 mils 50 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 160 mils 70 mils) (pt 160 mils 30 mils) (width 10 mils))"
    
            Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt 350 mils 150 mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"

        
        ElseIf Sheets("Setup").Cells(110, 2) = "Inductor" Then
        
            Print #1, vbTab & vbTab & "(pin (pinNum 1) (pt 0 mils 0 mils) (rotation 0) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 225 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1, vbTab & vbTab & "(pin (pinNum 2) (pt 800 mils 0 mils) (rotation 180) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 600 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1,
            
            Print #1, vbTab & vbTab & vbTab & "(arc (pt 250 mils 0 mils) (radius 50 mils) (startAngle 0.0) (sweepAngle 180.0) (width 10 mils))"
            Print #1, vbTab & vbTab & vbTab & "(arc (pt 350 mils 0 mils) (radius 50 mils) (startAngle 0.0) (sweepAngle 180.0) (width 10 mils))"
            Print #1, vbTab & vbTab & vbTab & "(arc (pt 450 mils 0 mils) (radius 50 mils) (startAngle 0.0) (sweepAngle 180.0) (width 10 mils))"
            Print #1, vbTab & vbTab & vbTab & "(arc (pt 550 mils 0 mils) (radius 50 mils) (startAngle 0.0) (sweepAngle 180.0) (width 10 mils))"
        
            Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt 650 mils 150 mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
        
        ElseIf Sheets("Setup").Cells(110, 2) = "Resistor" Then
        
            Print #1, vbTab & vbTab & "(pin (pinNum 1) (pt 0 mils 0 mils) (rotation 0) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 225 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1, vbTab & vbTab & "(pin (pinNum 2) (pt 700 mils 0 mils) (rotation 180) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 500 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1,
            
            Print #1, vbTab & vbTab & "(line (pt 200 mils 50 mils) (pt 500 mils 50 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 500 mils 50 mils) (pt 500 mils -50 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 500 mils -50 mils) (pt 200 mils -50 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 200 mils -50 mils) (pt 200 mils 50 mils) (width 10 mils))"
    
            Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt 550 mils 150 mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
        
        ElseIf Sheets("Setup").Cells(110, 2) = "Diode" Then
        
            Print #1, vbTab & vbTab & "(pin (pinNum 1) (pt 0 mils 0 mils) (rotation 0) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 225 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Left" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1, vbTab & vbTab & "(pin (pinNum 2) (pt 600 mils 0 mils) (rotation 180) (pinLength 200 mils) (pinDisplay (dispPinName false)) (pinName (text (pt 400 mils -25 mils) (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
            Print #1, vbTab & vbTab & "))"
            Print #1,
            
            Print #1, vbTab & vbTab & "(line (pt 200 mils 100 mils) (pt 200 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 200 mils 0 mils) (pt 400 mils 100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 200 mils 0 mils) (pt 400 mils -100 mils) (width 10 mils))"
            Print #1, vbTab & vbTab & "(line (pt 400 mils 100 mils) (pt 400 mils -100 mils) (width 10 mils))"
    
            Print #1, vbTab & vbTab & "(attr " & Chr(34) & "RefDes" & Chr(34) & " " & Chr(34) & "RefDes" & Chr(34) & " (pt 450 mils 150 mils) (isVisible True) (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
                
        
        End If
            
        Print #1,
        Print #1, vbTab & ")"


        LeftPinCnt = 0
        RightPinCnt = 0
        TopPinCnt = 0
        BotPinCnt = 0
        LeftPinLen = 0
        RightPinLen = 0
        
        r = r - 1

    End If

    PrevGate = CurrGate
    r = r + 1
     
Wend


'Blank Line
Print #1,
Print #1, vbTab & "(compDef " & Chr(34) & PTName & Chr(34) & " (originalName " & Chr(34) & PTName & Chr(34) & ") (compHeader (numPins " & Sheets("Setup").Cells(14, 2).Value & ") (numParts " & GateCnt & ") (refDesPrefix " & RefDesPrefix & ")"
Print #1, vbTab & vbTab & ")"
r = 2
PinCnt = 0
GateNo = 1
PrevGate = Sheets("Template").Cells(r, 1).Value
CurrGate = PrevGate
While PrevGate <> vbNullString
    
    CurrGate = Sheets("Template").Cells(r, 1).Value
    If CurrGate = PrevGate Then
        PinCnt = PinCnt + 1
'Process Negated Pin Names
        pinName = Sheets("Template").Cells(r, 3).Value
        NegFound = False
        For c = 1 To Len(pinName)
            If Mid(pinName, c, 1) = "*" Then
                NegFound = True
                pinName = Left(pinName, c - 1) & "__" & Mid(pinName, c + 1)
                c = c + 1
            ElseIf Mid(pinName, c, 1) = "/" And NegFound Then
                pinName = Left(pinName, c - 1) & "__" & Mid(pinName, c)
                NegFound = False
            End If
        Next c
        
        Print #1, vbTab & vbTab & "(compPin " & Chr(34) & Sheets("Template").Cells(r, 2).Value & Chr(34) & " (pinName " & Chr(34) & pinName & Chr(34) & ") (partNum " & GateNo & ") (symPinNum " & PinCnt & ") (gateEq 0) (pinEq 0) (pinType Bidirectional))"
    Else
    
        Print #1, vbTab & vbTab & "(attachedSymbol (partNum " & GateNo & ") (altType Normal) (symbolName " & Chr(34) & SYMname & "-" & Num2Lett(GateNo) & Chr(34) & "))"
        GateNo = GateNo + 1
        
        PinCnt = 0
        r = r - 1
    End If
    PrevGate = CurrGate
    r = r + 1

Wend

Set tbl = Worksheets("Template").ListObjects("Table1")
NoOfPads = tbl.DataBodyRange.Rows.Count

Print #1, vbTab & vbTab & "(attachedPattern (patternNum 1) (patternName " & Chr(34) & Left(DecalName, 30) & Chr(34) & ")"
Print #1, vbTab & vbTab & vbTab & "(numPads " & NoOfPads & ")"
Print #1, vbTab & vbTab & vbTab & "(padPinMap"

For i = 1 To NoOfPads
'    If Not IsNumeric(Sheets("Template").Cells(I + 1, 2).Value) Then
        PadNum = Sheets("Template").Cells(i + 1, 7).Value
'    Else
'        PadNum = Sheets("Template").Cells(I + 1, 2).Value
'    End If
    Print #1, vbTab & vbTab & vbTab & vbTab & "(padNum " & PadNum & ") (compPinRef " & Chr(34) & Sheets("Template").Cells(i + 1, 2).Value & Chr(34) & ")"

Next i

Print #1, vbTab & vbTab & vbTab & ")"
Print #1, vbTab & vbTab & ")"

'Attributes

AttrRow = 1

Do While Sheets("Attributes").Cells(AttrRow, 1).Value <> vbNullString
    Print #1, vbTab & vbTab & "(attr " & Chr(34) & Sheets("Attributes").Cells(AttrRow, 1).Value & Chr(34) & " " & Chr(34) & Sheets("Attributes").Cells(AttrRow, 2).Value & Chr(34) & ")"
    AttrRow = AttrRow + 1
Loop

Print #1, vbTab & ")"
Print #1,
Print #1, ")"
Close #1
On Error GoTo Finish2
Finish2:
Unload Me

End Function

Function ExportDS()
Dim obj As Object
Dim libName As String
Dim result As Integer
Dim PrtPath As String
Dim Overwrite As Boolean
Dim errorString As String
Dim SymLib As String
Dim PcbLib As String
Dim PrtLib As String

'On Error GoTo OnErrorGetObject

MissingValues = vbNullString

If Replace(txt_BaseName.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Symbol Base Name"
Else
    Sheets("Setup").Cells(10, 2).Value = txt_BaseName.Value
End If

If Replace(Txt_PartName.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Part Name"
Else
    Sheets("Setup").Cells(18, 2).Value = Txt_PartName.Value
End If

If Replace(txt_RDP.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Ref. Des. Prefix"
Else
    Sheets("Setup").Cells(17, 3).Value = txt_RDP.Value
End If

If Not Img_WarningD.Visible And Replace(cbo_PCB.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Footprint Name"
Else
    Sheets("Setup").Cells(15, 2).Value = cbo_PCB.Value
End If

Sheets("Setup").Cells(102, 2).Value = "TRUE"

Sheets("Setup").Cells(8, 2).Value = cbo_PinLength.Value
Sheets("Setup").Cells(12, 2).Value = cbo_PinPitch.Value

Sheets("Setup").Cells(18, 2).Value = Txt_PartName.Value

Sheets("Setup").Range("B7").Value = cbo_LibLst.Value
Sheets("Setup").Range("B9").Value = cbo_LibSym.Value
Sheets("Setup").Range("B13").Value = cbo_LibPCB.Value

If MissingValues <> vbNullString Then
    MsgBox "Please Enter Value for " & Mid(MissingValues, 3), vbOKOnly, "ECAD Part Wizard"
    Exit Function
End If


SymLib = cbo_LibSym.List(cbo_LibSym.ListIndex, 1)
PcbLib = cbo_LibPCB.List(cbo_LibPCB.ListIndex, 1)
PrtLib = cbo_LibLst.List(cbo_LibLst.ListIndex, 1)
RemoveReadOnly SymLib
RemoveReadOnly PcbLib
RemoveReadOnly PrtLib

SlashIndex = InStrRev(PrtLib, "\")
PrtPath = Left(PrtLib, SlashIndex)

CreateDS PrtPath

FileDSL = PrtPath & Txt_PartName.Value & ".dsl"

Set obj = CreateObject("dspcb.application")
obj.Show
obj.SetUserCtrl

'result = 0 = rvOk
'result = 1 = rvError
'result = 2 = rvAlreadyExists

'Import Symbol(s)

Debug.Print FileDSL
Debug.Print ltSymbol
Debug.Print SymLib

obj.AddToLibrary FileDSL, ltSymbol, SymLib, False, result
obj.GetLastErrorString errorString

If result = 1 Then
    MsgBox errorString
ElseIf result = 2 Then 'Symbol already exists
    Answer = MsgBox(errorString & vbCrLf & vbCrLf & "OK to overwrite?", vbYesNo, "SamacSys - EPW")
    If Answer = vbYes Then obj.AddToLibrary FileDSL, ltSymbol, SymLib, True, result
'    Debug.Print result
End If

'Import Footprint
If Not IsNull(PcbLib) Then
    obj.AddToLibrary FileDSL, ltFootprint, PcbLib, False, result
    obj.GetLastErrorString errorString
    
    If result = 1 Then
        MsgBox errorString
    ElseIf result = 2 Then 'Footprint already exists
        Answer = MsgBox(errorString & vbCrLf & vbCrLf & "OK to overwrite?", vbYesNo, "SamacSys - EPW")
        If Answer = vbYes Then obj.AddToLibrary FileDSL, ltFootprint, PcbLib, True, result
'        Debug.Print result
    End If
End If

'Import Component
obj.AddToLibrary FileDSL, ltComponent, PrtLib, False, result
obj.GetLastErrorString errorString

If result = 1 Then
    MsgBox errorString
ElseIf result = 2 Then 'Component already exists
    Answer = MsgBox(errorString & vbCrLf & vbCrLf & "OK to overwrite?", vbYesNo, "SamacSys - EPW")
    If Answer = vbYes Then obj.AddToLibrary FileDSL, ltComponent, PrtLib, True, result
'    Debug.Print result
End If

Set obj = Nothing


End Function


Function ExportPreDS()


'On Error GoTo OnErrorGetObject

MissingValues = vbNullString

If Replace(txt_BaseName.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Symbol Base Name"
Else
    Sheets("Setup").Cells(10, 2).Value = txt_BaseName.Value
End If

If Replace(Txt_PartName.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Part Name"
Else
    Sheets("Setup").Cells(18, 2).Value = Txt_PartName.Value
End If

If Replace(txt_ExportDir.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Export Directory"
Else
    Sheets("Setup").Range("B16").Value = txt_ExportDir.Value
End If

If Replace(txt_RDP.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Ref. Des. Prefix"
Else
    Sheets("Setup").Cells(17, 3).Value = txt_RDP.Value
End If

If Not Img_WarningD.Visible And Replace(cbo_PCB.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Footprint Name"
Else
    Sheets("Setup").Cells(15, 2).Value = cbo_PCB.Value
End If

'If Chk_UseExisting Then
    Sheets("Setup").Cells(102, 2).Value = "TRUE"
'Else
'    Sheets("Setup").Cells(102, 2).Value = "FALSE"
'End If

Sheets("Setup").Cells(8, 2).Value = cbo_PinLength.Value
Sheets("Setup").Cells(12, 2).Value = cbo_PinPitch.Value

Sheets("Setup").Cells(18, 2).Value = Txt_PartName.Value

If MissingValues <> vbNullString Then
    MsgBox "Please Enter Value for " & Mid(MissingValues, 3), vbOKOnly, "ECAD Part Wizard"
    Exit Function
End If

CreateDS txt_ExportDir.Value

End Function

Function ExportDXPL()

ExportDX
ExportPL_PCB

End Function

Function ExportDXAP()

ExportDX
ExportAP
Unload Me

End Function

Function ExportOCPL()

ExportOC
ExportPL_PCB

End Function
Function WriteCapEDIF(Path As String, Symbol As String, Footprint As String)

SymbolFile = Path & Symbol & ".edf"
Open SymbolFile For Output As #1

Print #1,
Print #1, "(edif"
Print #1, "  (rename &" & Symbol & " " & Chr(34) & Symbol & Chr(34) & ")"
Print #1, "  (edifVersion 2 0 0)"
Print #1, "  (edifLevel 0)"
Print #1, "  (keywordMap"
Print #1, "    (keywordLevel 0))"
Print #1, "  (status"
Print #1, "    (written"
Print #1, "      (timeStamp 2014 5 16 13 4 47)"
Print #1, "      (program " & Chr(34) & "cap2edif" & Chr(34) & ""
Print #1, "        (version " & Chr(34) & "Elgris Technologies, Inc. Schematic Writer version SPB 16.50_1.083 built Apr 11 2011" & Chr(34) & "))"
Print #1, "      (author " & Chr(34) & "Capture" & Chr(34) & ")"
Print #1, "      (dataOrigin " & Chr(34) & "OrCAD Capture" & Chr(34) & ""
Print #1, "        (version " & Chr(34) & "SPB 16.50" & Chr(34) & "))))"
Print #1, "  (library DEFAULT"
Print #1, "    (edifLevel 0)"
Print #1, "    (technology"
Print #1, "      (numberDefinition"
Print #1, "        (scale 1"
Print #1, "          (e 254 -6)"
Print #1, "          (unit DISTANCE))"
Print #1, "        (gridMap 1 1))"
Print #1, "      (figureGroup PIN"
Print #1, "        (color 100 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 10)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 7)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))))"
Print #1, "    (cell PIN_ZERO"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_ZERO"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)))"
Print #1, "    (cell PIN_ZERO_INVIS"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_ZERO_INVIS"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)))"
Print #1, "    (cell PIN_SHORT"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_SHORT"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)"
Print #1, "        (contents"
Print #1, "          (figure"
Print #1, "            (figureGroupOverride PIN"
Print #1, "              (fillPattern 1 1"
Print #1, "                (boolean"
Print #1, "                  (boolean"
Print #1, "                    (false)))))"
Print #1, "            (path"
Print #1, "              (pointList"
Print #1, "                (pt 0 0)"
Print #1, "                (pt 10 0))))))))"
Print #1, "  (library " & Symbol
Print #1, "    (edifLevel 0)"
Print #1, "    (technology"
Print #1, "      (numberDefinition"
Print #1, "        (scale 1"
Print #1, "          (e 254 -6)"
Print #1, "          (unit DISTANCE))"
Print #1, "        (gridMap 1 1))"
Print #1, "      (figureGroup PARTBODY"
Print #1, "        (color 0 0 100)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PINNUMBER"
Print #1, "        (color 0 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PINNAME"
Print #1, "        (color 0 25 50)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PARTREFERENCE"
Print #1, "        (color 0 0 50)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup DISPLAYPROPERTY"
Print #1, "        (color 0 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 8)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 5)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PIN"
Print #1, "        (color 100 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 10)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 7)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))))"
Print #1, "    (cell " & Symbol & "_A"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property"
Print #1, "        (rename PCB_FOOTPRINT " & Chr(34) & "PCB Footprint" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & Footprint & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename SOURCE_PACKAGE " & Chr(34) & "Source Package" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & Symbol & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename NUMBER_DEVICES_IN_PACKAGE " & Chr(34) & "Number devices in Package" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & "1" & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename POSITIONINPACKAGE " & Chr(34) & "PositionInPackage" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & "" & Chr(34) & "))"
Print #1, "      (view"
Print #1, "        (rename " & Symbol & "_A_NORMAL " & Chr(34) & Symbol & "_A.Normal" & Chr(34) & ")"
Print #1, "        (viewType SCHEMATIC)"
Print #1, "        (interface"
Print #1, "          (port &1"
Print #1, "            (designator " & Chr(34) & "1" & Chr(34) & ")"
Print #1, "            (property"
Print #1, "              (rename NAME " & Chr(34) & "Name" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "1" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename TYPE " & Chr(34) & "Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "PAS" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PACKAGEPORTNUMBERS " & Chr(34) & "PackagePortNumbers" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "1" & Chr(34) & ")))"
Print #1, "          (port &2"
Print #1, "            (designator " & Chr(34) & "2" & Chr(34) & ")"
Print #1, "            (property"
Print #1, "              (rename NAME " & Chr(34) & "Name" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "2" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename TYPE " & Chr(34) & "Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "PAS" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PACKAGEPORTNUMBERS " & Chr(34) & "PackagePortNumbers" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "2" & Chr(34) & ")))"
Print #1, "          (designator " & Chr(34) & "C?" & Chr(34) & ")"
Print #1, "          (symbol"
Print #1, "            (property"
Print #1, "              (rename PCB_FOOTPRINT " & Chr(34) & "PCB Footprint" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & Footprint & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename ORIGINALSYMBOLORIGIN " & Chr(34) & "OriginalSymbolOrigin" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "(0,0)" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename VALUE " & Chr(34) & "Value" & Chr(34) & ")"
Print #1, "              (string"
Print #1, "                (stringDisplay " & Chr(34) & Symbol & Chr(34) & ""
Print #1, "                  (display"
Print #1, "                    (figureGroupOverride DISPLAYPROPERTY"
Print #1, "                      (textHeight 9)"
Print #1, "                      (property TEXTWIDTH"
Print #1, "                        (integer 6)"
Print #1, "                        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "                    (justify UPPERLEFT)"
Print #1, "                    (origin"
Print #1, "                      (pt -10 -20))))))"
Print #1, "            (property"
Print #1, "              (rename IMPLEMENTATION " & Chr(34) & "Implementation" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename IMPLEMENTATION_TYPE " & Chr(34) & "Implementation Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "<none>" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NUMBERS_VISIBLE " & Chr(34) & "Pin Numbers Visible" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "False" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NAMES_VISIBLE " & Chr(34) & "Pin Names Visible" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "False" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NAMES_ROTATE " & Chr(34) & "Pin Names Rotate" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "True" & Chr(34) & "))"
Print #1, "            (userData backgroundColor"
Print #1, "              (color 100 100 100)"
Print #1, "              (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & "))"
Print #1, "            (portImplementation"
Print #1, "              (name &1"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNAME"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify CENTERLEFT)"
Print #1, "                  (origin"
Print #1, "                    (pt 6 -10))))"
Print #1, "              (keywordDisplay designator"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNUMBER"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify LOWERRIGHT)"
Print #1, "                  (origin"
Print #1, "                    (pt -8 -10))))"
Print #1, "              (figure"
Print #1, "                (figureGroupOverride PIN"
Print #1, "                  (fillPattern 1 1"
Print #1, "                    (boolean"
Print #1, "                      (boolean"
Print #1, "                        (false)))))"
Print #1, "                (path"
Print #1, "                  (pointList"
Print #1, "                    (pt -10 -10)"
Print #1, "                    (pt 0 -10))))"
Print #1, "              (connectLocation"
Print #1, "                (figure PARTBODY"
Print #1, "                  (dot"
Print #1, "                    (pt -10 -10)))))"
Print #1, "            (portImplementation"
Print #1, "              (name &2"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNAME"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify CENTERRIGHT)"
Print #1, "                  (origin"
Print #1, "                    (pt 8 -10))))"
Print #1, "              (keywordDisplay designator"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNUMBER"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (origin"
Print #1, "                    (pt 18 -10))))"
Print #1, "              (figure"
Print #1, "                (figureGroupOverride PIN"
Print #1, "                  (fillPattern 1 1"
Print #1, "                    (boolean"
Print #1, "                      (boolean"
Print #1, "                        (false)))))"
Print #1, "                (path"
Print #1, "                  (pointList"
Print #1, "                    (pt 20 -10)"
Print #1, "                    (pt 10 -10))))"
Print #1, "              (connectLocation"
Print #1, "                (figure PARTBODY"
Print #1, "                  (dot"
Print #1, "                    (pt 20 -10)))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 0 -10)"
Print #1, "                  (pt 2 -10))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 8 -10)"
Print #1, "                  (pt 10 -10))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 2 0)"
Print #1, "                  (pt 2 -20))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 8 0)"
Print #1, "                  (pt 8 -20))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 0 -10)"
Print #1, "                  (pt 0 -10))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 10 -10)"
Print #1, "                  (pt 10 -10))))"
Print #1, "            (keywordDisplay designator"
Print #1, "              (display PARTREFERENCE"
Print #1, "                (justify LOWERLEFT)"
Print #1, "                (origin"
Print #1, "                  (pt -10 -2)))))))))"
Print #1, "  (design " & Symbol & "_A"
Print #1, "    (cellRef " & Symbol & "_A"
Print #1, "      (libraryRef " & Symbol & "))))"

Close #1

End Function
Function WriteCapPolEDIF(Path As String, Symbol As String, Footprint As String)

SymbolFile = Path & Symbol & ".edf"
Open SymbolFile For Output As #1

Print #1,
Print #1, "(edif"
Print #1, "  (rename &" & Symbol & " " & Chr(34) & Symbol & Chr(34) & ")"
Print #1, "  (edifVersion 2 0 0)"
Print #1, "  (edifLevel 0)"
Print #1, "  (keywordMap"
Print #1, "    (keywordLevel 0))"
Print #1, "  (status"
Print #1, "    (written"
Print #1, "      (timeStamp 2014 5 16 16 9 20)"
Print #1, "      (program " & Chr(34) & "cap2edif" & Chr(34) & ""
Print #1, "        (version " & Chr(34) & "Elgris Technologies, Inc. Schematic Writer version SPB 16.50_1.083 built Apr 11 2011" & Chr(34) & "))"
Print #1, "      (author " & Chr(34) & "Capture" & Chr(34) & ")"
Print #1, "      (dataOrigin " & Chr(34) & "OrCAD Capture" & Chr(34) & ""
Print #1, "        (version " & Chr(34) & "SPB 16.50" & Chr(34) & "))))"
Print #1, "  (library DEFAULT"
Print #1, "    (edifLevel 0)"
Print #1, "    (technology"
Print #1, "      (numberDefinition"
Print #1, "        (scale 1"
Print #1, "          (e 254 -6)"
Print #1, "          (unit DISTANCE))"
Print #1, "        (gridMap 1 1))"
Print #1, "      (figureGroup PIN"
Print #1, "        (color 100 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 10)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 7)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))))"
Print #1, "    (cell PIN_ZERO"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_ZERO"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)))"
Print #1, "    (cell PIN_ZERO_INVIS"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_ZERO_INVIS"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)))"
Print #1, "    (cell PIN_SHORT"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_SHORT"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)"
Print #1, "        (contents"
Print #1, "          (figure"
Print #1, "            (figureGroupOverride PIN"
Print #1, "              (fillPattern 1 1"
Print #1, "                (boolean"
Print #1, "                  (boolean"
Print #1, "                    (false)))))"
Print #1, "            (path"
Print #1, "              (pointList"
Print #1, "                (pt 0 0)"
Print #1, "                (pt 10 0))))))))"
Print #1, "  (library " & Symbol
Print #1, "    (edifLevel 0)"
Print #1, "    (technology"
Print #1, "      (numberDefinition"
Print #1, "        (scale 1"
Print #1, "          (e 254 -6)"
Print #1, "          (unit DISTANCE))"
Print #1, "        (gridMap 1 1))"
Print #1, "      (figureGroup PARTBODY"
Print #1, "        (color 0 0 100)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PINNUMBER"
Print #1, "        (color 0 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PINNAME"
Print #1, "        (color 0 25 50)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PARTREFERENCE"
Print #1, "        (color 0 0 50)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup DISPLAYPROPERTY"
Print #1, "        (color 0 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 8)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 5)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PIN"
Print #1, "        (color 100 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 10)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 7)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))))"
Print #1, "    (cell " & Symbol
Print #1, "      (cellType GENERIC)"
Print #1, "      (property"
Print #1, "        (rename PCB_FOOTPRINT " & Chr(34) & "PCB Footprint" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & Footprint & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename SOURCE_PACKAGE " & Chr(34) & "Source Package" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & Symbol & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename NUMBER_DEVICES_IN_PACKAGE " & Chr(34) & "Number devices in Package" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & "1" & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename POSITIONINPACKAGE " & Chr(34) & "PositionInPackage" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & "" & Chr(34) & "))"
Print #1, "      (view"
Print #1, "        (rename " & Symbol & "_NORMAL " & Chr(34) & Symbol & ".Normal" & Chr(34) & ")"
Print #1, "        (viewType SCHEMATIC)"
Print #1, "        (interface"
Print #1, "          (port &1"
Print #1, "            (designator " & Chr(34) & "1" & Chr(34) & ")"
Print #1, "            (property"
Print #1, "              (rename NAME " & Chr(34) & "Name" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "1" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename TYPE " & Chr(34) & "Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "PAS" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PACKAGEPORTNUMBERS " & Chr(34) & "PackagePortNumbers" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "1" & Chr(34) & ")))"
Print #1, "          (port &2"
Print #1, "            (designator " & Chr(34) & "2" & Chr(34) & ")"
Print #1, "            (property"
Print #1, "              (rename NAME " & Chr(34) & "Name" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "2" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename TYPE " & Chr(34) & "Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "PAS" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PACKAGEPORTNUMBERS " & Chr(34) & "PackagePortNumbers" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "2" & Chr(34) & ")))"
Print #1, "          (designator " & Chr(34) & "C?" & Chr(34) & ")"
Print #1, "          (symbol"
Print #1, "            (property"
Print #1, "              (rename ORIGINALSYMBOLORIGIN " & Chr(34) & "OriginalSymbolOrigin" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "(0,0)" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename VALUE " & Chr(34) & "Value" & Chr(34) & ")"
Print #1, "              (string"
Print #1, "                (stringDisplay " & Chr(34) & Symbol & Chr(34) & ""
Print #1, "                  (display"
Print #1, "                    (figureGroupOverride DISPLAYPROPERTY"
Print #1, "                      (textHeight 9)"
Print #1, "                      (property TEXTWIDTH"
Print #1, "                        (integer 6)"
Print #1, "                        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "                    (justify UPPERLEFT)"
Print #1, "                    (origin"
Print #1, "                      (pt -10 -20))))))"
Print #1, "            (property"
Print #1, "              (rename IMPLEMENTATION " & Chr(34) & "Implementation" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename IMPLEMENTATION_TYPE " & Chr(34) & "Implementation Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "<none>" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NUMBERS_VISIBLE " & Chr(34) & "Pin Numbers Visible" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "False" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NAMES_VISIBLE " & Chr(34) & "Pin Names Visible" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "False" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NAMES_ROTATE " & Chr(34) & "Pin Names Rotate" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "True" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PCB_FOOTPRINT " & Chr(34) & "PCB Footprint" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & Footprint & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename SOURCE_PACKAGE " & Chr(34) & "Source Package" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & Symbol & Chr(34) & "))"
Print #1, "            (userData backgroundColor"
Print #1, "              (color 100 100 100)"
Print #1, "              (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & "))"
Print #1, "            (portImplementation"
Print #1, "              (name &1"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNAME"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify CENTERLEFT)"
Print #1, "                  (origin"
Print #1, "                    (pt 6 -10))))"
Print #1, "              (keywordDisplay designator"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNUMBER"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify LOWERRIGHT)"
Print #1, "                  (origin"
Print #1, "                    (pt -8 -10))))"
Print #1, "              (figure"
Print #1, "                (figureGroupOverride PIN"
Print #1, "                  (fillPattern 1 1"
Print #1, "                    (boolean"
Print #1, "                      (boolean"
Print #1, "                        (false)))))"
Print #1, "                (path"
Print #1, "                  (pointList"
Print #1, "                    (pt -10 -10)"
Print #1, "                    (pt 0 -10))))"
Print #1, "              (connectLocation"
Print #1, "                (figure PARTBODY"
Print #1, "                  (dot"
Print #1, "                    (pt -10 -10)))))"
Print #1, "            (portImplementation"
Print #1, "              (name &2"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNAME"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify CENTERRIGHT)"
Print #1, "                  (origin"
Print #1, "                    (pt 8 -10))))"
Print #1, "              (keywordDisplay designator"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNUMBER"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (origin"
Print #1, "                    (pt 18 -10))))"
Print #1, "              (figure"
Print #1, "                (figureGroupOverride PIN"
Print #1, "                  (fillPattern 1 1"
Print #1, "                    (boolean"
Print #1, "                      (boolean"
Print #1, "                        (false)))))"
Print #1, "                (path"
Print #1, "                  (pointList"
Print #1, "                    (pt 20 -10)"
Print #1, "                    (pt 10 -10))))"
Print #1, "              (connectLocation"
Print #1, "                (figure PARTBODY"
Print #1, "                  (dot"
Print #1, "                    (pt 20 -10)))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 0 -10)"
Print #1, "                  (pt 0 -10))))"
Print #1, "            (figure"
Print #1, "              (figureGroupOverride PARTBODY"
Print #1, "                (fillPattern 1 1"
Print #1, "                  (boolean"
Print #1, "                    (boolean"
Print #1, "                      (false)))))"
Print #1, "              (rectangle"
Print #1, "                (pt 0 -20)"
Print #1, "                (pt 3 0)))"
Print #1, "            (figure PARTBODY"
Print #1, "              (rectangle"
Print #1, "                (pt 7 -20)"
Print #1, "                (pt 10 0)))"
Print #1, "            (annotate"
Print #1, "              (stringDisplay " & Chr(34) & "+" & Chr(34) & ""
Print #1, "                (display PARTBODY"
Print #1, "                  (justify UPPERLEFT)"
Print #1, "                  (origin"
Print #1, "                    (pt -8 0)))))"
Print #1, "            (keywordDisplay designator"
Print #1, "              (display PARTREFERENCE"
Print #1, "                (justify LOWERLEFT)"
Print #1, "                (origin"
Print #1, "                  (pt -10 -2)))))))))"
Print #1, "  (design " & Symbol
Print #1, "    (cellRef " & Symbol
Print #1, "      (libraryRef " & Symbol & "))))"


Close #1

End Function
Function WriteIndEDIF(Path As String, Symbol As String, Footprint As String)

SymbolFile = Path & Symbol & ".edf"
Open SymbolFile For Output As #1

Print #1,
Print #1, "(edif"
Print #1, "  (rename &" & Symbol & " " & Chr(34) & Symbol & Chr(34) & ")"
Print #1, "  (edifVersion 2 0 0)"
Print #1, "  (edifLevel 0)"
Print #1, "  (keywordMap"
Print #1, "    (keywordLevel 0))"
Print #1, "  (status"
Print #1, "    (written"
Print #1, "      (timeStamp 2014 5 16 18 49 28)"
Print #1, "      (program " & Chr(34) & "cap2edif" & Chr(34) & ""
Print #1, "        (version " & Chr(34) & "Elgris Technologies, Inc. Schematic Writer version SPB 16.50_1.083 built Apr 11 2011" & Chr(34) & "))"
Print #1, "      (author " & Chr(34) & "Capture" & Chr(34) & ")"
Print #1, "      (dataOrigin " & Chr(34) & "OrCAD Capture" & Chr(34) & ""
Print #1, "        (version " & Chr(34) & "SPB 16.50" & Chr(34) & "))))"
Print #1, "  (library DEFAULT"
Print #1, "    (edifLevel 0)"
Print #1, "    (technology"
Print #1, "      (numberDefinition"
Print #1, "        (scale 1"
Print #1, "          (e 254 -6)"
Print #1, "          (unit DISTANCE))"
Print #1, "        (gridMap 1 1))"
Print #1, "      (figureGroup PIN"
Print #1, "        (color 100 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 10)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 7)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))))"
Print #1, "    (cell PIN_ZERO"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_ZERO"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)))"
Print #1, "    (cell PIN_ZERO_INVIS"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_ZERO_INVIS"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)))"
Print #1, "    (cell PIN_SHORT"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_SHORT"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)"
Print #1, "        (contents"
Print #1, "          (figure"
Print #1, "            (figureGroupOverride PIN"
Print #1, "              (fillPattern 1 1"
Print #1, "                (boolean"
Print #1, "                  (boolean"
Print #1, "                    (false)))))"
Print #1, "            (path"
Print #1, "              (pointList"
Print #1, "                (pt 0 0)"
Print #1, "                (pt 10 0))))))))"
Print #1, "  (library " & Symbol
Print #1, "    (edifLevel 0)"
Print #1, "    (technology"
Print #1, "      (numberDefinition"
Print #1, "        (scale 1"
Print #1, "          (e 254 -6)"
Print #1, "          (unit DISTANCE))"
Print #1, "        (gridMap 1 1))"
Print #1, "      (figureGroup PARTBODY"
Print #1, "        (color 0 0 100)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PINNUMBER"
Print #1, "        (color 0 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PINNAME"
Print #1, "        (color 0 25 50)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PARTREFERENCE"
Print #1, "        (color 0 0 50)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup DISPLAYPROPERTY"
Print #1, "        (color 0 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 8)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 5)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PIN"
Print #1, "        (color 100 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 10)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 7)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))))"
Print #1, "    (cell " & Symbol
Print #1, "      (cellType GENERIC)"
Print #1, "      (property"
Print #1, "        (rename PCB_FOOTPRINT " & Chr(34) & "PCB Footprint" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & Footprint & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename SOURCE_PACKAGE " & Chr(34) & "Source Package" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & Symbol & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename NUMBER_DEVICES_IN_PACKAGE " & Chr(34) & "Number devices in Package" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & "1" & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename POSITIONINPACKAGE " & Chr(34) & "PositionInPackage" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & "" & Chr(34) & "))"
Print #1, "      (view"
Print #1, "        (rename " & Symbol & "_NORMAL " & Chr(34) & Symbol & ".Normal" & Chr(34) & ")"
Print #1, "        (viewType SCHEMATIC)"
Print #1, "        (interface"
Print #1, "          (port &1"
Print #1, "            (designator " & Chr(34) & "1" & Chr(34) & ")"
Print #1, "            (property"
Print #1, "              (rename NAME " & Chr(34) & "Name" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "1" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename TYPE " & Chr(34) & "Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "PAS" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PACKAGEPORTNUMBERS " & Chr(34) & "PackagePortNumbers" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "1" & Chr(34) & ")))"
Print #1, "          (port &2"
Print #1, "            (designator " & Chr(34) & "2" & Chr(34) & ")"
Print #1, "            (property"
Print #1, "              (rename NAME " & Chr(34) & "Name" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "2" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename TYPE " & Chr(34) & "Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "PAS" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PACKAGEPORTNUMBERS " & Chr(34) & "PackagePortNumbers" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "2" & Chr(34) & ")))"
Print #1, "          (designator " & Chr(34) & "L?" & Chr(34) & ")"
Print #1, "          (symbol"
Print #1, "            (property"
Print #1, "              (rename ORIGINALSYMBOLORIGIN " & Chr(34) & "OriginalSymbolOrigin" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "(0,5)" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename VALUE " & Chr(34) & "Value" & Chr(34) & ")"
Print #1, "              (string"
Print #1, "                (stringDisplay " & Chr(34) & Symbol & Chr(34) & ""
Print #1, "                  (display"
Print #1, "                    (figureGroupOverride DISPLAYPROPERTY"
Print #1, "                      (textHeight 9)"
Print #1, "                      (property TEXTWIDTH"
Print #1, "                        (integer 6)"
Print #1, "                        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "                    (justify UPPERLEFT)"
Print #1, "                    (origin"
Print #1, "                      (pt 0 -10))))))"
Print #1, "            (property"
Print #1, "              (rename IMPLEMENTATION " & Chr(34) & "Implementation" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename IMPLEMENTATION_TYPE " & Chr(34) & "Implementation Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "<none>" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NUMBERS_VISIBLE " & Chr(34) & "Pin Numbers Visible" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "False" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NAMES_VISIBLE " & Chr(34) & "Pin Names Visible" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "False" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NAMES_ROTATE " & Chr(34) & "Pin Names Rotate" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "True" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PCB_FOOTPRINT " & Chr(34) & "PCB Footprint" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & Footprint & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename SOURCE_PACKAGE " & Chr(34) & "Source Package" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & Symbol & Chr(34) & "))"
Print #1, "            (userData backgroundColor"
Print #1, "              (color 100 100 100)"
Print #1, "              (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & "))"
Print #1, "            (portImplementation"
Print #1, "              (name &1"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNAME"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify CENTERLEFT)"
Print #1, "                  (origin"
Print #1, "                    (pt 6 -10))))"
Print #1, "              (keywordDisplay designator"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNUMBER"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify LOWERRIGHT)"
Print #1, "                  (origin"
Print #1, "                    (pt -8 -10))))"
Print #1, "              (figure"
Print #1, "                (figureGroupOverride PIN"
Print #1, "                  (fillPattern 1 1"
Print #1, "                    (boolean"
Print #1, "                      (boolean"
Print #1, "                        (false)))))"
Print #1, "                (path"
Print #1, "                  (pointList"
Print #1, "                    (pt -10 -10)"
Print #1, "                    (pt 0 -10))))"
Print #1, "              (connectLocation"
Print #1, "                (figure PARTBODY"
Print #1, "                  (dot"
Print #1, "                    (pt -10 -10)))))"
Print #1, "            (portImplementation"
Print #1, "              (name &2"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNAME"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify CENTERRIGHT)"
Print #1, "                  (origin"
Print #1, "                    (pt 38 -10))))"
Print #1, "              (keywordDisplay designator"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNUMBER"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (origin"
Print #1, "                    (pt 48 -10))))"
Print #1, "              (figure"
Print #1, "                (figureGroupOverride PIN"
Print #1, "                  (fillPattern 1 1"
Print #1, "                    (boolean"
Print #1, "                      (boolean"
Print #1, "                        (false)))))"
Print #1, "                (path"
Print #1, "                  (pointList"
Print #1, "                    (pt 50 -10)"
Print #1, "                    (pt 40 -10))))"
Print #1, "              (connectLocation"
Print #1, "                (figure PARTBODY"
Print #1, "                  (dot"
Print #1, "                    (pt 50 -10)))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 0 -10)"
Print #1, "                  (pt 0 -10))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (openShape"
Print #1, "                (curve"
Print #1, "                  (arc"
Print #1, "                    (pt 10 -10)"
Print #1, "                    (pt 5 -5)"
Print #1, "                    (pt 0 -10)))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (openShape"
Print #1, "                (curve"
Print #1, "                  (arc"
Print #1, "                    (pt 20 -10)"
Print #1, "                    (pt 15 -5)"
Print #1, "                    (pt 10 -10)))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (openShape"
Print #1, "                (curve"
Print #1, "                  (arc"
Print #1, "                    (pt 30 -10)"
Print #1, "                    (pt 25 -5)"
Print #1, "                    (pt 20 -10)))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (openShape"
Print #1, "                (curve"
Print #1, "                  (arc"
Print #1, "                    (pt 40 -10)"
Print #1, "                    (pt 35 -5)"
Print #1, "                    (pt 30 -10)))))"
Print #1, "            (keywordDisplay designator"
Print #1, "              (display PARTREFERENCE"
Print #1, "                (justify UPPERLEFT)"
Print #1, "                (origin"
Print #1, "                  (pt 0 5)))))))))"
Print #1, "  (design " & Symbol
Print #1, "    (cellRef " & Symbol
Print #1, "      (libraryRef " & Symbol & "))))"

Close #1

End Function
Function WriteResEDIF(Path As String, Symbol As String, Footprint As String)

SymbolFile = Path & Symbol & ".edf"
Open SymbolFile For Output As #1

Print #1,
Print #1, "(edif"
Print #1, "  (rename &" & Symbol & " " & Chr(34) & Symbol & Chr(34) & ")"
Print #1, "  (edifVersion 2 0 0)"
Print #1, "  (edifLevel 0)"
Print #1, "  (keywordMap"
Print #1, "    (keywordLevel 0))"
Print #1, "  (status"
Print #1, "    (written"
Print #1, "      (timeStamp 2014 5 16 18 41 12)"
Print #1, "      (program " & Chr(34) & "cap2edif" & Chr(34) & ""
Print #1, "        (version " & Chr(34) & "Elgris Technologies, Inc. Schematic Writer version SPB 16.50_1.083 built Apr 11 2011" & Chr(34) & "))"
Print #1, "      (author " & Chr(34) & "Capture" & Chr(34) & ")"
Print #1, "      (dataOrigin " & Chr(34) & "OrCAD Capture" & Chr(34) & ""
Print #1, "        (version " & Chr(34) & "SPB 16.50" & Chr(34) & "))))"
Print #1, "  (library DEFAULT"
Print #1, "    (edifLevel 0)"
Print #1, "    (technology"
Print #1, "      (numberDefinition"
Print #1, "        (scale 1"
Print #1, "          (e 254 -6)"
Print #1, "          (unit DISTANCE))"
Print #1, "        (gridMap 1 1))"
Print #1, "      (figureGroup PIN"
Print #1, "        (color 100 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 10)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 7)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))))"
Print #1, "    (cell PIN_ZERO"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_ZERO"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)))"
Print #1, "    (cell PIN_ZERO_INVIS"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_ZERO_INVIS"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)))"
Print #1, "    (cell PIN_SHORT"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_SHORT"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)"
Print #1, "        (contents"
Print #1, "          (figure"
Print #1, "            (figureGroupOverride PIN"
Print #1, "              (fillPattern 1 1"
Print #1, "                (boolean"
Print #1, "                  (boolean"
Print #1, "                    (false)))))"
Print #1, "            (path"
Print #1, "              (pointList"
Print #1, "                (pt 0 0)"
Print #1, "                (pt 10 0))))))))"
Print #1, "  (library " & Symbol
Print #1, "    (edifLevel 0)"
Print #1, "    (technology"
Print #1, "      (numberDefinition"
Print #1, "        (scale 1"
Print #1, "          (e 254 -6)"
Print #1, "          (unit DISTANCE))"
Print #1, "        (gridMap 1 1))"
Print #1, "      (figureGroup PARTBODY"
Print #1, "        (color 0 0 100)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PINNUMBER"
Print #1, "        (color 0 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PINNAME"
Print #1, "        (color 0 25 50)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PARTREFERENCE"
Print #1, "        (color 0 0 50)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup DISPLAYPROPERTY"
Print #1, "        (color 0 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 8)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 5)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PIN"
Print #1, "        (color 100 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 10)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 7)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))))"
Print #1, "    (cell " & Symbol
Print #1, "      (cellType GENERIC)"
Print #1, "      (property"
Print #1, "        (rename PCB_FOOTPRINT " & Chr(34) & "PCB Footprint" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & Footprint & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename SOURCE_PACKAGE " & Chr(34) & "Source Package" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & Symbol & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename NUMBER_DEVICES_IN_PACKAGE " & Chr(34) & "Number devices in Package" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & "1" & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename POSITIONINPACKAGE " & Chr(34) & "PositionInPackage" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & "" & Chr(34) & "))"
Print #1, "      (view"
Print #1, "        (rename " & Symbol & "_NORMAL " & Chr(34) & Symbol & ".Normal" & Chr(34) & ")"
Print #1, "        (viewType SCHEMATIC)"
Print #1, "        (interface"
Print #1, "          (port &1"
Print #1, "            (designator " & Chr(34) & "1" & Chr(34) & ")"
Print #1, "            (property"
Print #1, "              (rename NAME " & Chr(34) & "Name" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "1" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename TYPE " & Chr(34) & "Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "PAS" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PACKAGEPORTNUMBERS " & Chr(34) & "PackagePortNumbers" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "1" & Chr(34) & ")))"
Print #1, "          (port &2"
Print #1, "            (designator " & Chr(34) & "2" & Chr(34) & ")"
Print #1, "            (property"
Print #1, "              (rename NAME " & Chr(34) & "Name" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "2" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename TYPE " & Chr(34) & "Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "PAS" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PACKAGEPORTNUMBERS " & Chr(34) & "PackagePortNumbers" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "2" & Chr(34) & ")))"
Print #1, "          (designator " & Chr(34) & "R?" & Chr(34) & ")"
Print #1, "          (symbol"
Print #1, "            (property"
Print #1, "              (rename ORIGINALSYMBOLORIGIN " & Chr(34) & "OriginalSymbolOrigin" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "(0,5)" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename VALUE " & Chr(34) & "Value" & Chr(34) & ")"
Print #1, "              (string"
Print #1, "                (stringDisplay " & Chr(34) & Symbol & Chr(34) & ""
Print #1, "                  (display"
Print #1, "                    (figureGroupOverride DISPLAYPROPERTY"
Print #1, "                      (textHeight 9)"
Print #1, "                      (property TEXTWIDTH"
Print #1, "                        (integer 6)"
Print #1, "                        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "                    (justify UPPERLEFT)"
Print #1, "                    (origin"
Print #1, "                      (pt 0 -10))))))"
Print #1, "            (property"
Print #1, "              (rename IMPLEMENTATION " & Chr(34) & "Implementation" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename IMPLEMENTATION_TYPE " & Chr(34) & "Implementation Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "<none>" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NUMBERS_VISIBLE " & Chr(34) & "Pin Numbers Visible" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "False" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NAMES_VISIBLE " & Chr(34) & "Pin Names Visible" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "False" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NAMES_ROTATE " & Chr(34) & "Pin Names Rotate" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "True" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PCB_FOOTPRINT " & Chr(34) & "PCB Footprint" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & Footprint & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename SOURCE_PACKAGE " & Chr(34) & "Source Package" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & Symbol & Chr(34) & "))"
Print #1, "            (userData backgroundColor"
Print #1, "              (color 100 100 100)"
Print #1, "              (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & "))"
Print #1, "            (portImplementation"
Print #1, "              (name &1"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNAME"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify CENTERLEFT)"
Print #1, "                  (origin"
Print #1, "                    (pt 6 -5))))"
Print #1, "              (keywordDisplay designator"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNUMBER"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify LOWERRIGHT)"
Print #1, "                  (origin"
Print #1, "                    (pt -8 -5))))"
Print #1, "              (figure"
Print #1, "                (figureGroupOverride PIN"
Print #1, "                  (fillPattern 1 1"
Print #1, "                    (boolean"
Print #1, "                      (boolean"
Print #1, "                        (false)))))"
Print #1, "                (path"
Print #1, "                  (pointList"
Print #1, "                    (pt -10 -5)"
Print #1, "                    (pt 0 -5))))"
Print #1, "              (connectLocation"
Print #1, "                (figure PARTBODY"
Print #1, "                  (dot"
Print #1, "                    (pt -10 -5)))))"
Print #1, "            (portImplementation"
Print #1, "              (name &2"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNAME"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify CENTERRIGHT)"
Print #1, "                  (origin"
Print #1, "                    (pt 28 -5))))"
Print #1, "              (keywordDisplay designator"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNUMBER"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (origin"
Print #1, "                    (pt 38 -5))))"
Print #1, "              (figure"
Print #1, "                (figureGroupOverride PIN"
Print #1, "                  (fillPattern 1 1"
Print #1, "                    (boolean"
Print #1, "                      (boolean"
Print #1, "                        (false)))))"
Print #1, "                (path"
Print #1, "                  (pointList"
Print #1, "                    (pt 40 -5)"
Print #1, "                    (pt 30 -5))))"
Print #1, "              (connectLocation"
Print #1, "                (figure PARTBODY"
Print #1, "                  (dot"
Print #1, "                    (pt 40 -5)))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 0 -5)"
Print #1, "                  (pt 0 -5))))"
Print #1, "            (figure"
Print #1, "              (figureGroupOverride PARTBODY"
Print #1, "                (fillPattern 1 1"
Print #1, "                  (boolean"
Print #1, "                    (boolean"
Print #1, "                      (false)))))"
Print #1, "              (polygon"
Print #1, "                (pointList"
Print #1, "                  (pt 0 -10)"
Print #1, "                  (pt 0 0)"
Print #1, "                  (pt 30 0)"
Print #1, "                  (pt 30 -10))))"
Print #1, "            (keywordDisplay designator"
Print #1, "              (display PARTREFERENCE"
Print #1, "                (justify UPPERLEFT)"
Print #1, "                (origin"
Print #1, "                  (pt 0 10)))))))))"
Print #1, "  (design " & Symbol
Print #1, "    (cellRef " & Symbol
Print #1, "      (libraryRef " & Symbol & "))))"


Close #1

End Function
Function WriteDioEDIF(Path As String, Symbol As String, Footprint As String)

SymbolFile = Path & Symbol & ".edf"
Open SymbolFile For Output As #1

Print #1,
Print #1, "(edif"
Print #1, "  (rename &" & Symbol & " " & Chr(34) & Symbol & Chr(34) & ")"
Print #1, "  (edifVersion 2 0 0)"
Print #1, "  (edifLevel 0)"
Print #1, "  (keywordMap"
Print #1, "    (keywordLevel 0))"
Print #1, "  (status"
Print #1, "    (written"
Print #1, "      (timeStamp 2014 5 16 18 41 12)"
Print #1, "      (program " & Chr(34) & "cap2edif" & Chr(34) & ""
Print #1, "        (version " & Chr(34) & "Elgris Technologies, Inc. Schematic Writer version SPB 16.50_1.083 built Apr 11 2011" & Chr(34) & "))"
Print #1, "      (author " & Chr(34) & "Capture" & Chr(34) & ")"
Print #1, "      (dataOrigin " & Chr(34) & "OrCAD Capture" & Chr(34) & ""
Print #1, "        (version " & Chr(34) & "SPB 16.50" & Chr(34) & "))))"
Print #1, "  (library DEFAULT"
Print #1, "    (edifLevel 0)"
Print #1, "    (technology"
Print #1, "      (numberDefinition"
Print #1, "        (scale 1"
Print #1, "          (e 254 -6)"
Print #1, "          (unit DISTANCE))"
Print #1, "        (gridMap 1 1))"
Print #1, "      (figureGroup PIN"
Print #1, "        (color 100 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 10)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 7)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))))"
Print #1, "    (cell PIN_ZERO"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_ZERO"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)))"
Print #1, "    (cell PIN_ZERO_INVIS"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_ZERO_INVIS"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)))"
Print #1, "    (cell PIN_SHORT"
Print #1, "      (cellType GENERIC)"
Print #1, "      (property CELLTYPE"
Print #1, "        (string " & Chr(34) & "symbolPort" & Chr(34) & ")"
Print #1, "        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))"
Print #1, "      (view PIN_SHORT"
Print #1, "        (viewType GRAPHIC)"
Print #1, "        (interface)"
Print #1, "        (contents"
Print #1, "          (figure"
Print #1, "            (figureGroupOverride PIN"
Print #1, "              (fillPattern 1 1"
Print #1, "                (boolean"
Print #1, "                  (boolean"
Print #1, "                    (false)))))"
Print #1, "            (path"
Print #1, "              (pointList"
Print #1, "                (pt 0 0)"
Print #1, "                (pt 10 0))))))))"
Print #1, "  (library " & Symbol
Print #1, "    (edifLevel 0)"
Print #1, "    (technology"
Print #1, "      (numberDefinition"
Print #1, "        (scale 1"
Print #1, "          (e 254 -6)"
Print #1, "          (unit DISTANCE))"
Print #1, "        (gridMap 1 1))"
Print #1, "      (figureGroup PARTBODY"
Print #1, "        (color 0 0 100)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PINNUMBER"
Print #1, "        (color 0 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PINNAME"
Print #1, "        (color 0 25 50)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PARTREFERENCE"
Print #1, "        (color 0 0 50)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 9)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 6)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup DISPLAYPROPERTY"
Print #1, "        (color 0 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 8)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 5)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "      (figureGroup PIN"
Print #1, "        (color 100 0 0)"
Print #1, "        (cornerType TRUNCATE)"
Print #1, "        (endType TRUNCATE)"
Print #1, "        (textHeight 10)"
Print #1, "        (pathWidth 0)"
Print #1, "        (fillPattern 1 1"
Print #1, "          (boolean"
Print #1, "            (boolean"
Print #1, "              (true))))"
Print #1, "        (property ETCFONTNAME"
Print #1, "          (string " & Chr(34) & "Arial" & Chr(34) & ")"
Print #1, "          (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & ")"
Print #1, "          (property SUFFIX"
Print #1, "            (string " & Chr(34) & "def" & Chr(34) & ")))"
Print #1, "        (property TEXTWIDTH"
Print #1, "          (integer 7)"
Print #1, "          (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & "))))"
Print #1, "    (cell " & Symbol
Print #1, "      (cellType GENERIC)"
Print #1, "      (property"
Print #1, "        (rename PCB_FOOTPRINT " & Chr(34) & "PCB Footprint" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & Footprint & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename SOURCE_PACKAGE " & Chr(34) & "Source Package" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & Symbol & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename NUMBER_DEVICES_IN_PACKAGE " & Chr(34) & "Number devices in Package" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & "1" & Chr(34) & "))"
Print #1, "      (property"
Print #1, "        (rename POSITIONINPACKAGE " & Chr(34) & "PositionInPackage" & Chr(34) & ")"
Print #1, "        (string " & Chr(34) & "" & Chr(34) & "))"
Print #1, "      (view"
Print #1, "        (rename " & Symbol & "_NORMAL " & Chr(34) & Symbol & ".Normal" & Chr(34) & ")"
Print #1, "        (viewType SCHEMATIC)"
Print #1, "        (interface"
Print #1, "          (port &1"
Print #1, "            (designator " & Chr(34) & "1" & Chr(34) & ")"
Print #1, "            (property"
Print #1, "              (rename NAME " & Chr(34) & "Name" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "1" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename TYPE " & Chr(34) & "Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "PAS" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PACKAGEPORTNUMBERS " & Chr(34) & "PackagePortNumbers" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "1" & Chr(34) & ")))"
Print #1, "          (port &2"
Print #1, "            (designator " & Chr(34) & "2" & Chr(34) & ")"
Print #1, "            (property"
Print #1, "              (rename NAME " & Chr(34) & "Name" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "2" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename TYPE " & Chr(34) & "Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "PAS" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PACKAGEPORTNUMBERS " & Chr(34) & "PackagePortNumbers" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "2" & Chr(34) & ")))"
Print #1, "          (designator " & Chr(34) & "D?" & Chr(34) & ")"
Print #1, "          (symbol"
Print #1, "            (property"
Print #1, "              (rename ORIGINALSYMBOLORIGIN " & Chr(34) & "OriginalSymbolOrigin" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "(0,5)" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename VALUE " & Chr(34) & "Value" & Chr(34) & ")"
Print #1, "              (string"
Print #1, "                (stringDisplay " & Chr(34) & Symbol & Chr(34) & ""
Print #1, "                  (display"
Print #1, "                    (figureGroupOverride DISPLAYPROPERTY"
Print #1, "                      (textHeight 9)"
Print #1, "                      (property TEXTWIDTH"
Print #1, "                        (integer 6)"
Print #1, "                        (owner " & Chr(34) & "Schematic_TSC" & Chr(34) & ")))"
Print #1, "                    (justify UPPERLEFT)"
Print #1, "                    (origin"
Print #1, "                      (pt 0 -20))))))"
Print #1, "            (property"
Print #1, "              (rename IMPLEMENTATION " & Chr(34) & "Implementation" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename IMPLEMENTATION_TYPE " & Chr(34) & "Implementation Type" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "<none>" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NUMBERS_VISIBLE " & Chr(34) & "Pin Numbers Visible" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "False" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NAMES_VISIBLE " & Chr(34) & "Pin Names Visible" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "False" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PIN_NAMES_ROTATE " & Chr(34) & "Pin Names Rotate" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & "True" & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename PCB_FOOTPRINT " & Chr(34) & "PCB Footprint" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & Footprint & Chr(34) & "))"
Print #1, "            (property"
Print #1, "              (rename SOURCE_PACKAGE " & Chr(34) & "Source Package" & Chr(34) & ")"
Print #1, "              (string " & Chr(34) & Symbol & Chr(34) & "))"
Print #1, "            (userData backgroundColor"
Print #1, "              (color 100 100 100)"
Print #1, "              (owner " & Chr(34) & "Electronic Tools Company" & Chr(34) & "))"
Print #1, "            (portImplementation"
Print #1, "              (name &1"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNAME"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify CENTERLEFT)"
Print #1, "                  (origin"
Print #1, "                    (pt 6 -10))))"
Print #1, "              (keywordDisplay designator"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNUMBER"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify LOWERRIGHT)"
Print #1, "                  (origin"
Print #1, "                    (pt -8 -10))))"
Print #1, "              (figure"
Print #1, "                (figureGroupOverride PIN"
Print #1, "                  (fillPattern 1 1"
Print #1, "                    (boolean"
Print #1, "                      (boolean"
Print #1, "                        (false)))))"
Print #1, "                (path"
Print #1, "                  (pointList"
Print #1, "                    (pt -10 -10)"
Print #1, "                    (pt 0 -10))))"
Print #1, "              (connectLocation"
Print #1, "                (figure PARTBODY"
Print #1, "                  (dot"
Print #1, "                    (pt -10 -10)))))"
Print #1, "            (portImplementation"
Print #1, "              (name &2"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNAME"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (justify CENTERRIGHT)"
Print #1, "                  (origin"
Print #1, "                    (pt 18 -10))))"
Print #1, "              (keywordDisplay designator"
Print #1, "                (display"
Print #1, "                  (figureGroupOverride PINNUMBER"
Print #1, "                    (visible"
Print #1, "                      (false)))"
Print #1, "                  (origin"
Print #1, "                    (pt 28 -10))))"
Print #1, "              (figure"
Print #1, "                (figureGroupOverride PIN"
Print #1, "                  (fillPattern 1 1"
Print #1, "                    (boolean"
Print #1, "                      (boolean"
Print #1, "                        (false)))))"
Print #1, "                (path"
Print #1, "                  (pointList"
Print #1, "                    (pt 30 -10)"
Print #1, "                    (pt 20 -10))))"
Print #1, "              (connectLocation"
Print #1, "                (figure PARTBODY"
Print #1, "                  (dot"
Print #1, "                    (pt 30 -10)))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 0 -10)"
Print #1, "                  (pt 0 -10))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 0 0)"
Print #1, "                  (pt 0 -20))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 0 -10)"
Print #1, "                  (pt 20 0))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 20 0)"
Print #1, "                  (pt 20 -20))))"
Print #1, "            (figure PARTBODY"
Print #1, "              (path"
Print #1, "                (pointList"
Print #1, "                  (pt 20 -20)"
Print #1, "                  (pt 0 -10))))"
Print #1, "            (keywordDisplay designator"
Print #1, "              (display PARTREFERENCE"
Print #1, "                (justify UPPERLEFT)"
Print #1, "                (origin"
Print #1, "                  (pt 0 10)))))))))"
Print #1, "  (design " & Symbol
Print #1, "    (cellRef " & Symbol
Print #1, "      (libraryRef " & Symbol & "))))"


Close #1

End Function

Function ExportOC()
Dim GateCnt As Integer
Dim GateNo As Integer
Dim SYMname As String
Dim SymbolFile As String
Dim BoxWidthLR As Double
Dim BoxWidthTB As Double
Dim PinPitch As Double

Dim PCBdecal As String
Dim Alphanumeric As Boolean
Dim filePath As String

'Dim SpaceIndex3 As Integer
'On Error GoTo OnErrorGetObject
Dim SkipPadDef As Boolean
Dim Dshape As Boolean
Dim Dfound As Boolean
Dim pthPadstackCnt As Integer

Alphanumeric = False

MissingValues = vbNullString

If Replace(Txt_PartName.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Part Name"
Else
    Txt_PartName.Value = Replace(Txt_PartName.Value, Space(1), vbNullString)
    Sheets("Setup").Cells(10, 2).Value = Txt_PartName.Value
End If

Sheets("Setup").Cells(8, 2).Value = cbo_PinLength.Value
Sheets("Setup").Cells(12, 2).Value = cbo_PinPitch.Value

If Replace(txt_ExportDir.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Export Directory"
Else
    Sheets("Setup").Range("B16").Value = txt_ExportDir.Value
End If

Sheets("Setup").Cells(102, 2).Value = "TRUE"
Sheets("Setup").Cells(15, 2).Value = cbo_PCB.Value
Sheets("Setup").Cells(14, 2).Value = Txt_PinCnt.Value
Sheets("Setup").Cells(17, 3).Value = txt_RDP.Value

If MissingValues <> vbNullString Then
    MsgBox "Please Enter Value for " & Mid(MissingValues, 3), vbOKOnly, "Part Wizard"
    Exit Function
End If

Success = True

ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[GateSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(46, 46, 189)
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(192, 143, 46)
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(209, 50, 50)
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(45, 187, 45)
With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With

'Check for duplicate Pin Names
TempRow = 2
ActiveSheet.Unprotect Password:="m1llenn1ums4r0s"
Do
    ChkPN = Worksheets("Template").Range("C" & TempRow)
'    Debug.Print ChkPN
    TempRow2 = TempRow + 1
    RenameNo = 1
    Do
        If Worksheets("Template").Range("C" & TempRow2) = ChkPN Then
            Worksheets("Template").Range("C" & TempRow2) = ChkPN & "_" & RenameNo
            RenameNo = RenameNo + 1
        End If
        TempRow2 = TempRow2 + 1
    Loop While Worksheets("Template").Range("B" & TempRow2) <> vbNullString
    TempRow = TempRow + 1
Loop While Worksheets("Template").Range("B" & TempRow) <> vbNullString
ActiveSheet.Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True

filePath = txt_ExportDir.Value

PinCntPCB = Txt_PinCnt.Value
PinLength = cbo_PinLength.Value * 100
LogFam = txt_RDP.Value
PinPitch = cbo_PinPitch.Value
SYMname = Txt_PartName.Value
SYMname = Replace(SYMname, "+", "_")
SYMname = Replace(SYMname, "-", "_")
SYMname = Replace(SYMname, "*", "_")
SYMname = Replace(SYMname, "/", "_")
SYMname = Replace(SYMname, ",", "_")
SYMname = Replace(SYMname, ".", "_")

PCBdecal = cbo_PCB.Value
LeftPinCnt = 0
RightPinCnt = 0
TopPinCnt = 0
BotPinCnt = 0
LeftPinLen = 0
RightPinLen = 0
TopPinLen = 0
BotPinLen = 0

NoOfGates = 0
r = 2
PrevGate = Sheets("Template").Cells(r, 1).Value
CurrGate = Sheets("Template").Cells(r, 1).Value
While PrevGate <> vbNullString
    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(r, 1).Value
    If CurrGate <> PrevGate Then NoOfGates = NoOfGates + 1
    PrevGate = CurrGate
    r = r + 1
Wend

'Debug.Print "No of Gates = " & NoOfGates

GateCnt = 0
r = 2
PrevGate = Sheets("Template").Cells(r, 1).Value
CurrGate = Sheets("Template").Cells(r, 1).Value
startRow = 2

While PrevGate <> vbNullString
    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(r, 1).Value
    
    If CurrGate = PrevGate Then
        If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then
            LeftPinCnt = LeftPinCnt + 1
            If LeftPinLen < Len(Sheets("Template").Cells(r, 3)) Then LeftPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then
            RightPinCnt = RightPinCnt + 1
            If RightPinLen < Len(Sheets("Template").Cells(r, 3)) Then RightPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then
            TopPinCnt = TopPinCnt + 1
            If TopPinLen < Len(Sheets("Template").Cells(r, 3)) Then TopPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then
            BotPinCnt = BotPinCnt + 1
            If BotPinLen < Len(Sheets("Template").Cells(r, 3)) Then BotPinLen = Len(Sheets("Template").Cells(r, 3))
        End If
    Else
        GateCnt = GateCnt + 1
        If Sheets("Setup").Cells(110, 2) = "None (Box)" Then
        
            If GateCnt = 1 Then
                SymbolFile = filePath & SYMname & ".edf"
                Open SymbolFile For Output As #1

                'Control Statements
                Print #1,
                Print #1, "(EDIF"
                Print #1, "  (rename &" & SYMname & " " & Chr(34) & SYMname & Chr(34) & ")"
                Print #1, "  (EDIFVersion 2 0 0)"
                Print #1, "  (EDIFLevel 0)"
                Print #1, "  (keywordMap (keywordLevel 0))"
                Print #1, "  (status"
                Print #1, "    (written"
                Print #1, "      (timestamp " & Format(Now(), "yyyy m d h m s") & ")"
                Print #1, "      (dataOrigin " & Chr(34) & "ECAD Part Wizard" & Chr(34) & ")"
                Print #1, "      (program " & Chr(34) & "EPW - SamacSys" & Chr(34)
                Print #1, "        (version " & Chr(34) & Worksheets("Setup").Cells(1, 4).Value & Chr(34) & "))))"
                Print #1, "  (library"
                Print #1, "  (rename &" & SYMname & " " & Chr(34) & SYMname & Chr(34) & ")"
                Print #1, "    (EDIFLevel 0)"
                Print #1, "    (technology"
                Print #1, "      (numberDefinition (scale 1 (e 254 -9) (unit DISTANCE)))"
                Print #1, "      (userData GRIDRESOLUTION (integer 10000 10000))"
                Print #1, "      (figureGroup DEFAULT (pathWidth 1000) (textHeight 10000))"
                Print #1, "      (figureGroup PINSTYLE (pathWidth 900) (textHeight 9100))"
                Print #1, "      (figureGroup PROPERTY (pathWidth 1000) (textHeight 9000))"
                Print #1, "      (figureGroup PINNUMBER (pathWidth 1000) (textHeight 9000))"
                Print #1, "      (figureGroup PINNAME (pathWidth 1000) (textHeight 9000))"
                Print #1, "      (figureGroup COMMENT (pathWidth 1000) (textHeight 9000))"
                Print #1, "      (figureGroup PIN (pathWidth 1000) (textHeight 9000))"
                Print #1, "      (figureGroup BOX (pathWidth 1000) (textHeight 10000))"
                Print #1, "    )"
            End If
            
            
            If LeftPinCnt <> 0 Then
                OriginPin = "Left"
            ElseIf TopPinCnt <> 0 Then
                OriginPin = "Top"
            ElseIf RightPinCnt <> 0 Then
                OriginPin = "Right"
            ElseIf BotPinCnt <> 0 Then
                OriginPin = "Bottom"
            End If
            
            If LeftPinCnt > RightPinCnt Then
                PinCntLR = LeftPinCnt
            Else
                PinCntLR = RightPinCnt
            End If
            
            If TopPinCnt = 0 Then
                TopOffset = PinPitch
            Else
                TopOffset = RoundToNearest((TopPinLen * 50) + 200, 100)
            End If
            
            If BotPinCnt = 0 Then
                BotOffset = PinPitch
            Else
                BotOffset = RoundToNearest((BotPinLen * 50) + 200, 100)
            End If
        
            BoxHeightTB = TopOffset + BotOffset
            
            If PinCntLR = 0 Then
                BoxHeightLR = 0
            Else
                BoxHeightLR = ((PinCntLR - 1) * PinPitch)
            End If
            
            BoxHeight = RoundToNearest(BoxHeightLR + BoxHeightTB, 100)
    
            If TopPinCnt > BotPinCnt Then
                PinCntTB = TopPinCnt
            Else
                PinCntTB = BotPinCnt
            End If
            
            If LeftPinLen + RightPinLen = 0 Then
                BoxWidthLR = 0
            Else
                BoxWidthLR = RoundToNearest(((LeftPinLen + RightPinLen) * 50) + 400, 100)
            End If
            
            BoxWidthTB = RoundToNearest((PinCntTB * PinPitch) + PinPitch, 100)
            
            If BoxWidthLR > BoxWidthTB Then
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthLR, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthLR, 100)
                End If
            Else
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthTB, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthTB, 100)
                End If
            End If
            
            PinCnt = LeftPinCnt + RightPinCnt + TopPinCnt + BotPinCnt
            
            BoxHeight = BoxHeight * 100
            BoxWidth = BoxWidth * 100
            PinPitch = PinPitch * 100
            BoxHeight = BoxHeight

            
            If OriginPin = "Left" Then
                OffsetX = PinLength
                OffsetY = TopOffset
            ElseIf OriginPin = "Top" Then
                If TopPinCnt > BotPinCnt Then
                    OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
                Else
                    OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
                End If
                OffsetY = -(PinLength)
            ElseIf OriginPin = "Right" Then
                OffsetX = -PinLength - BoxWidth
                OffsetY = TopOffset
            ElseIf OriginPin = "Bottom" Then
                If BotPinCnt > TopPinCnt Then
                    OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
                Else
                    OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
                End If
                OffsetY = PinLength + BoxHeight
            End If
            
            OffsetY = OffsetY * 100
            BotOffset = BotOffset * 100
            
            'Header
            Print #1, "    (cell"
            Print #1, "      (rename &" & SYMname & "_" & Num2Lett(GateCnt) & " " & Chr(34) & SYMname & "_" & Num2Lett(GateCnt) & Chr(34) & ")"
            Print #1, "      (cellType GENERIC)"
            If NoOfGates > 1 Then
                PositionInPackage = vbNullString
                For i = 1 To NoOfGates
                    If i = GateCnt Then
                        PositionInPackage = PositionInPackage & "," & Num2Lett(GateCnt)
                    Else
                        PositionInPackage = PositionInPackage & ",_"
                    End If
                Next i
                PositionInPackage = Mid(PositionInPackage, 2)
                Print #1, "      (property (rename SOURCE_PACKAGE " & Chr(34) & "Source Package" & Chr(34) & ") (string " & Chr(34) & SYMname & Chr(34) & "))"
                Print #1, "      (property (rename DESIGNATOR " & Chr(34) & "Designator" & Chr(34) & ") (string " & Chr(34) & GateCnt & Chr(34) & "))"
                Print #1, "      (property (rename PACKAGEHETEROGENEOUS " & Chr(34) & "PackageHeterogeneous" & Chr(34) & ") (string " & Chr(34) & SYMname & Chr(34) & "))"
                Print #1, "      (property (rename POSITIONINPACKAGE " & Chr(34) & "PositionInPackage" & Chr(34) & ") (string " & Chr(34) & PositionInPackage & Chr(34) & "))"
                Print #1, "      (property (rename NUMBER_DEVICES_IN_PACKAGE " & Chr(34) & "Number devices in Package" & Chr(34) & ") (string " & Chr(34) & "1" & Chr(34) & "))"
            End If
            Print #1, "      (view"
            Print #1, "        (rename NORMAL " & Chr(34) & "Normal" & Chr(34) & ")"
            Print #1, "        (viewType SCHEMATIC)"
            Print #1, "        (interface"
            Print #1, "          (designator " & Chr(34) & LogFam & Chr(34) & ")"
            Print #1, "          (property (rename PACKAGENAME " & Chr(34) & "PackageName" & Chr(34) & ") (string " & Chr(34) & SYMname & Chr(34) & ") (owner " & Chr(34) & "DataXpress" & Chr(34) & "))"
            If NoOfGates > 1 Then
                Print #1, "          (property (rename ISHETEROGENEOUS " & Chr(34) & "IsHeterogeneous" & Chr(34) & ") (string " & Chr(34) & "True" & Chr(34) & ") (owner " & Chr(34) & "DataXpress" & Chr(34) & "))"
            Else
                Print #1, "          (property (rename ISHETEROGENEOUS " & Chr(34) & "IsHeterogeneous" & Chr(34) & ") (string " & Chr(34) & "False" & Chr(34) & ") (owner " & Chr(34) & "DataXpress" & Chr(34) & "))"
            End If
            Print #1, "          (property (rename DEVICESINVIEW " & Chr(34) & "DevicesInView" & Chr(34) & ") (string " & Chr(34) & "1" & Chr(34) & ") (owner " & Chr(34) & "DataXpress" & Chr(34) & "))"
            Print #1, "          (property (rename DEVICESINPACKAGE " & Chr(34) & "DevicesInPackage" & Chr(34) & ") (string " & Chr(34) & "1" & Chr(34) & ") (owner " & Chr(34) & "DataXpress" & Chr(34) & "))"
            Print #1, "          (property (rename DEVICEDESIGNATOR " & Chr(34) & "DeviceDesignator" & Chr(34) & ") (string " & Chr(34) & Num2Lett(GateCnt) & Chr(34) & ") (owner " & Chr(34) & "DataXpress" & Chr(34) & "))"
            Print #1, "          (property (rename DEVICENUMBERING " & Chr(34) & "DeviceNumbering" & Chr(34) & ") (string " & Chr(34) & "Alpha" & Chr(34) & ") (owner " & Chr(34) & "DataXpress" & Chr(34) & "))"
            Print #1, "          (property (rename PCB_32_FOOTPRINT " & Chr(34) & "PCB Footprint" & Chr(34) & ") (string " & Chr(34) & PCBdecal & Chr(34) & "))"
                      
'Attributes
            AttrRow = 1
            While Sheets("Attributes").Cells(AttrRow, 1) <> vbNullString
                Print #1, "          (property (rename &" & Replace(Sheets("Attributes").Cells(AttrRow, 1), Space(1), "_") & " " & Chr(34) & Sheets("Attributes").Cells(AttrRow, 1) & Chr(34) & ") (string " & Chr(34) & Replace(Sheets("Attributes").Cells(AttrRow, 2), "%", "percent") & Chr(34) & "))"
                AttrRow = AttrRow + 1
            Wend
                
            Print #1, "          (property (rename &_60__32_VALUE_32__62_ " & Chr(34) & "< Value >" & Chr(34) & ") (string " & Chr(34) & SYMname & Chr(34) & "))"
            Print #1, "          (property (rename VALUE " & Chr(34) & "Value" & Chr(34) & ") (string " & Chr(34) & "Value" & Chr(34) & "))"
                        
            PrevStartRow = startRow
'            PinCnt = LeftPinCnt + RightPinCnt + TopPinCnt + BotPinCnt
            
            For t = 1 To PinCnt
            
                pinName = Worksheets("Template").Cells(startRow, 3)
                pinName = Replace(pinName, "-", "M")
                pinName = Replace(pinName, "+", "P")
                pinName = Replace(pinName, "*", "_")
                pinName = Replace(pinName, "/", "_")
                pinName = Replace(pinName, ".", "_")
                pinName = Replace(pinName, "[", "_")
                pinName = Replace(pinName, "]", "_")
                pinName = Replace(pinName, "(", "_")
                pinName = Replace(pinName, ")", "_")
            
                Print #1, "         (port"
                Print #1, "            (rename &" & pinName & " " & Chr(34) & pinName & Chr(34) & ")"
                Print #1, "            (designator " & Chr(34) & Worksheets("Template").Cells(startRow, 2) & Chr(34) & ")"
                '            (property (rename PORTTYPE "PORTTYPE") (string "supply") (owner "Schematic_TSC"))
                '            (direction INOUT)
                '            (direction INPUT)
                '            (direction OUTPUT)
                Print #1, "            (property (rename ORDER " & Chr(34) & "Order" & Chr(34) & ") (string " & Chr(34) & t - 1 & Chr(34) & ") (owner " & Chr(34) & "OrCAD" & Chr(34) & "))"
                Print #1, "          )"
                startRow = startRow + 1
            Next t
                    
            startRow = PrevStartRow
                    
            Print #1, "          (symbol"
       
             'portImplementation
             TermNo = 1
            'Left Pins
            For lt = 1 To LeftPinCnt
            
                pinName = Worksheets("Template").Cells(startRow, 3)
                pinName = Replace(pinName, "-", "M")
                pinName = Replace(pinName, "+", "P")
                pinName = Replace(pinName, "*", "_")
                pinName = Replace(pinName, "/", "_")
                pinName = Replace(pinName, ".", "_")
                pinName = Replace(pinName, "[", "_")
                pinName = Replace(pinName, "]", "_")
                pinName = Replace(pinName, "(", "_")
                pinName = Replace(pinName, ")", "_")
            
                Print #1, "            (portImplementation"
                Print #1, "              (name &" & pinName & " (display PINNAME (justify CENTERLEFT) (orientation R0) (origin (pt 0 " & (-(lt - 1) * PinPitch) - OffsetY & "))))"
                Print #1, "              (keywordDisplay DESIGNATOR (display PINNUMBER (justify LOWERRIGHT) (orientation R0) (origin (pt 0 " & (-(lt - 1) * PinPitch) - OffsetY & "))))"
                Print #1, "              (figure PIN (path (pointList (pt " & -OffsetX & " " & (-(lt - 1) * PinPitch) - OffsetY & ") (pt 0 " & (-(lt - 1) * PinPitch) - OffsetY & "))))"
                Print #1, "              (connectLocation (figure BOX (dot (pt " & -OffsetX & " " & (-(lt - 1) * PinPitch) - OffsetY & "))))"
                Print #1, "            )"
                startRow = startRow + 1
            Next lt
                            
            
            'Right Pins
                For rt = 1 To RightPinCnt
                
                pinName = Worksheets("Template").Cells(startRow, 3)
                pinName = Replace(pinName, "-", "M")
                pinName = Replace(pinName, "+", "P")
                pinName = Replace(pinName, "*", "_")
                pinName = Replace(pinName, "/", "_")
                pinName = Replace(pinName, ".", "_")
                pinName = Replace(pinName, "[", "_")
                pinName = Replace(pinName, "]", "_")
                pinName = Replace(pinName, "(", "_")
                pinName = Replace(pinName, ")", "_")
                
                    Print #1, "            (portImplementation"
                    Print #1, "              (name &" & pinName & " (display PINNAME (justify CENTERRIGHT) (orientation R0) (origin (pt " & BoxWidth & " " & (-(rt - 1) * PinPitch) - OffsetY & "))))"
                    Print #1, "              (keywordDisplay DESIGNATOR (display PINNUMBER (justify LOWERLEFT) (orientation R0) (origin (pt " & BoxWidth & " " & (-(rt - 1) * PinPitch) - OffsetY & "))))"
                    Print #1, "              (figure PIN (path (pointList (pt " & PinLength + BoxWidth & " " & (-(rt - 1) * PinPitch) - OffsetY & ") (pt " & BoxWidth & " " & (-(rt - 1) * PinPitch) - OffsetY & "))))"
                    Print #1, "              (connectLocation (figure BOX (dot (pt " & PinLength + BoxWidth & " " & (-(rt - 1) * PinPitch) - OffsetY & "))))"
                    Print #1, "            )"
                    startRow = startRow + 1
                Next rt
            
            'Top Pins
                For tt = 1 To TopPinCnt
                
                pinName = Worksheets("Template").Cells(startRow, 3)
                pinName = Replace(pinName, "-", "M")
                pinName = Replace(pinName, "+", "P")
                pinName = Replace(pinName, "*", "_")
                pinName = Replace(pinName, "/", "_")
                pinName = Replace(pinName, ".", "_")
                pinName = Replace(pinName, "[", "_")
                pinName = Replace(pinName, "]", "_")
                pinName = Replace(pinName, "(", "_")
                pinName = Replace(pinName, ")", "_")
                    
'                    Print #1, "T" & RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " " & OffsetY + PinLength; " 90 4 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "            (portImplementation"
                    Print #1, "              (name &" & pinName & " (display PINNAME (justify CENTERRIGHT) (orientation R90) (origin (pt " & RoundDownToNearest(((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " 0))))"
                    Print #1, "              (keywordDisplay DESIGNATOR (display PINNUMBER (justify LOWERLEFT) (orientation R90) (origin (pt " & RoundDownToNearest(((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " 0))))"
                    Print #1, "              (figure PIN (path (pointList (pt " & RoundDownToNearest(((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " " & PinLength & ") (pt " & RoundDownToNearest(((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " 0))))"
                    Print #1, "              (connectLocation (figure BOX (dot (pt " & RoundDownToNearest(((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " " & PinLength & "))))"
                    Print #1, "            )"
                    startRow = startRow + 1
                Next tt
'            End If
            
            'Bottom Pins
                For bt = 1 To BotPinCnt
                
                pinName = Worksheets("Template").Cells(startRow, 3)
                pinName = Replace(pinName, "-", "M")
                pinName = Replace(pinName, "+", "P")
                pinName = Replace(pinName, "*", "_")
                pinName = Replace(pinName, "/", "_")
                pinName = Replace(pinName, ".", "_")
                pinName = Replace(pinName, "[", "_")
                pinName = Replace(pinName, "]", "_")
                pinName = Replace(pinName, "(", "_")
                pinName = Replace(pinName, ")", "_")
                    
'                    Print #1, "T" & RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "            (portImplementation"
                    Print #1, "              (name &" & pinName & " (display PINNAME (justify CENTERLEFT) (orientation R90) (origin (pt " & RoundDownToNearest(((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " " & -BoxHeight & "))))"
                    Print #1, "              (keywordDisplay DESIGNATOR (display PINNUMBER (justify LOWERRIGHT) (orientation R90) (origin (pt " & RoundDownToNearest(((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " " & -BoxHeight & "))))"
                    Print #1, "              (figure PIN (path (pointList (pt " & RoundDownToNearest(((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " " & -BoxHeight - PinLength & ") (pt " & RoundDownToNearest(((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " " & -BoxHeight & "))))"
                    Print #1, "              (connectLocation (figure BOX (dot (pt " & RoundDownToNearest(((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " " & -BoxHeight - PinLength & "))))"
                    Print #1, "            )"
                    startRow = startRow + 1
                Next bt
                        
            'Box Graphic
                      
            Print #1, "            (figure BOX"
            Print #1, "              (path (pointList (pt 0 0) (pt " & BoxWidth & " 0)))"
            Print #1, "              (path (pointList (pt " & BoxWidth & " 0) (pt " & BoxWidth & " " & -BoxHeight & ")))"
            Print #1, "              (path (pointList (pt " & BoxWidth & " " & -BoxHeight & ") (pt 0 " & -BoxHeight & ")))"
            Print #1, "              (path (pointList (pt 0 " & -BoxHeight & ") (pt 0 0)))"
            Print #1, "            )"
            
            'Ref Des
            If TopPinCnt = 0 Then
                PTX = 0
                PTY = -2000
                Justify = "(justify LOWERLEFT)"
            ElseIf RightPinCnt = 0 Then
                PTX = BoxWidth + 5000
                PTY = -(BoxHeight / 2) + 5000
                Justify = "(justify CENTERLEFT)"
            Else
                PTX = BoxWidth + 5000
                PTY = 5000
                Justify = "(justify CENTERLEFT)"
            End If
            
            Print #1, "            (keywordDisplay DESIGNATOR (display PROPERTY " & Justify & " (orientation R0) (origin (pt " & PTX & " " & PTY & "))))"
            
            
            If BotPinCnt = 0 Then
                Print #1, "            (propertyDisplay &_60__32_VALUE_32__62_ (display PROPERTY (justify UPPERLEFT) (orientation R0) (origin (pt 0 " & -BoxHeight & "))))"
            ElseIf RightPinCnt = 0 Then
                Print #1, "            (propertyDisplay &_60__32_VALUE_32__62_ (display PROPERTY (justify CENTERLEFT) (orientation R0) (origin (pt " & BoxWidth + 5000 & " " & -(BoxHeight / 2) - 5000 & "))))"
            Else
                Print #1, "            (propertyDisplay &_60__32_VALUE_32__62_ (display PROPERTY (justify CENTERLEFT) (orientation R0) (origin (pt " & BoxWidth + 5000 & " " & -BoxHeight - 5000 & "))))"
            End If
            Print #1, "          )"
            Print #1, "        )"
            Print #1, "      )"
            Print #1, "    )"
            Print #1, "  )"
            Print #1, ")"
            Close #1

        ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Non-Polarised)" Then
            WriteCapEDIF filePath, SYMname, PCBdecal
            ExportAP
        ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Polarised)" Then
            WriteCapPolEDIF filePath, SYMname, PCBdecal
            ExportAP
        ElseIf Sheets("Setup").Cells(110, 2) = "Inductor" Then
            WriteIndEDIF filePath, SYMname, PCBdecal
            ExportAP
        ElseIf Sheets("Setup").Cells(110, 2) = "Resistor" Then
            WriteResEDIF filePath, SYMname, PCBdecal
            ExportAP
        ElseIf Sheets("Setup").Cells(110, 2) = "Diode" Then
            WriteDioEDIF filePath, SYMname, PCBdecal
            ExportAP
        End If
       
'        ImportSymbols SYMname & "-" & Num2Lett(GateCnt), SymbolFile

        LeftPinCnt = 0
        RightPinCnt = 0
        TopPinCnt = 0
        BotPinCnt = 0
        LeftPinLen = 0
        RightPinLen = 0
        PinPitch = cbo_PinPitch.Value

        r = r - 1
        
    End If

    PrevGate = CurrGate
    r = r + 1
    
Wend




End Function



Function ExportAP()

Dim DecalAscLn As String
Dim SpaceIndex As Integer
Dim PadDefs() As String
Dim NextSpaceIndex As Integer
Dim SpaceIndex1 As Integer
Dim SpaceIndex2 As Integer
Dim pthPadstackCnt As Integer
Dim PrevDecalAscLn As String
Dim FirstSpaceIndex As Integer
Dim tCount As Integer

tCount = 0

'Dim Alphanumeric As Boolean
'Dim FilePath As String
'Dim PCBdecal As String
'Dim SkipPadDef As Boolean
'Dim Dshape As Boolean
'Dim Dfound As Boolean


MissingValues = vbNullString

If Replace(txt_ExportDir.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Export Directory"
Else
    Sheets("Setup").Range("B16").Value = txt_ExportDir.Value
End If

'If Chk_UseExisting Then
    Sheets("Setup").Cells(102, 2).Value = "TRUE"
'Else
'    Sheets("Setup").Cells(102, 2).Value = "FALSE"
'End If

Sheets("Setup").Cells(8, 2).Value = cbo_PinLength.Value
Sheets("Setup").Cells(12, 2).Value = cbo_PinPitch.Value

Sheets("Setup").Cells(18, 2).Value = Txt_PartName.Value

If MissingValues <> vbNullString Then
    MsgBox "Please Enter Value for " & Mid(MissingValues, 3), vbOKOnly, "ECAD Part Wizard"
    Exit Function
End If

Success = True

PCBdecal = cbo_PCB.Value
filePath = txt_ExportDir.Value

'Export PCB Components

'If Chk_UseExisting Then
If Right(PCBdecal, 1) = "N" Or Right(PCBdecal, 3) = "N-D" Then
    WorksheetName = "FP-N"
ElseIf Right(PCBdecal, 1) = "L" Or Right(PCBdecal, 3) = "L-D" Then
    WorksheetName = "FP-L"
ElseIf Right(PCBdecal, 1) = "M" Or Right(PCBdecal, 3) = "M-D" Then
    WorksheetName = "FP-M"
Else
    WorksheetName = "FP-N"
End If
'Else
'    WorksheetName = "PFW"
'End If

PadstackFile = filePath & "padstacks.scr"
Open PadstackFile For Output As #1

Print #1, "setwindow Form.padedit"

Print #1, "######################## New PadStack #########################"



'SOLDERMASK_TOP
'FORM padedit grid row 4
'FORM padedit geometry Circle
'FORM padedit width 90
'FORM padedit height 90
'FORM padedit x_offset 0
'FORM padedit y_offset 0
'FORM padedit geometry_th Null
'FORM padedit geometry_ant Null
'SOLDERMASK_BOTTOM
'FORM padedit grid row 5
'FORM padedit geometry Circle
'FORM padedit width 90
'FORM padedit height 90
'FORM padedit x_offset 0
'FORM padedit y_offset 0
'FORM padedit geometry_th Null
'FORM padedit geometry_ant Null
'PASTEMASK_TOP
'FORM padedit grid row 6
'FORM padedit geometry Circle
'FORM padedit width 90
'FORM padedit height 90
'FORM padedit x_offset 0
'FORM padedit y_offset 0
'FORM padedit geometry_th Null
'FORM padedit geometry_ant Null
'PASTEMASK_BOTTOM
'FORM padedit grid row 7
'FORM padedit geometry Circle
'FORM padedit width 90
'FORM padedit height 90
'FORM padedit x_offset 0
'FORM padedit y_offset 0
'FORM padedit geometry_th Null
'FORM padedit geometry_ant Null

'Retrieve Padstack Information from PADS Decal ASCII to derive padStyleDefs

PadDefLst = ","
DecalHdrRow = 4
DecalNo = 1
Row = 4
StartCol = 0
PCNo = 0
pthPadstackCnt = 0


Do

    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
    
    'Debug.Print Worksheets(WorksheetName).Cells(Row, 1).Value
    'Retrieve number of different padstack definitions
    If Row = DecalHdrRow Then
        'SpaceIndex = SkipSpaces(DecalAscLn, 1)
        
        SpaceIndex = InStr(1, DecalAscLn, Space(1))
        
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
        SpaceIndex = SpaceIndex + ExtraSpaces
        
        DecalName = Left(DecalAscLn, SpaceIndex - 1 - ExtraSpaces)
'        Debug.Print DecalName
        
        If DecalNo = 1 Then
            For i = 1 To 8
            If i = 1 Then units = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
            SpaceIndex = InStr(SpaceIndex + 1, DecalAscLn, Space(1))
            ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
            SpaceIndex = SpaceIndex + ExtraSpaces
            If i = 7 Then NoOfPads = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
            Next i
            If units = "I" Then
                units = "Mils"
                Multiplier = 2540
            ElseIf units = "M" Then
                units = "Millimeter"
                Multiplier = 100000
            End If
        '    Print #1, ")"
        '    Print #1, "(library Library_1"
        Else
            StartCol = StartCol + 4
        End If
        'Debug.Print NoOfPads
        
        'Debug.Print StartCol
        ReDim Preserve PadDefs(NoOfPads, (DecalNo * 4) - 1)
        
        PadDefs(0, StartCol) = DecalName
        
        NoOfPadstacks = Mid(DecalAscLn, SpaceIndex + 1, Len(DecalAscLn) - (InStr(SpaceIndex + 1, DecalAscLn, Space(1))))
        'Debug.Print DecalName
        
        If Right(DecalName, 2) = "-D" Then
            Dshape = True
            PinsTB = Worksheets("Setup").Range("B92")
            PinsLR = Worksheets("Setup").Range("B93")
'            Debug.Print PinsTB
'            Debug.Print PinsLR
            
            L = PinsLR
            B = PinsLR + PinsTB
            r = (2 * PinsLR) + PinsTB
            t = (2 * PinsLR) + (2 * PinsTB)
            
'            Debug.Print L
'            Debug.Print B
'            Debug.Print R
'            Debug.Print t
            
            Dfound = False
        End If
        
    End If
    
    If Left(DecalAscLn, 6) = "COPCLS" And Dshape And Not Dfound Then
        Dfound = True
        Row = Row + 1
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        NextSpaceIndex = InStr(1, DecalAscLn, Space(1))
        FirstPnt = Mid(DecalAscLn, 1, NextSpaceIndex - 1)
        Row = Row + 1
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        For i = 1 To 7
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 1 Then ArcStartX = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            If i = 7 Then ArcUPX = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
        
        Dlength = (ArcStartX - FirstPnt) + (ArcUPX - ArcStartX)
'        Debug.Print Dlength
    End If
    
    If Left(DecalAscLn, 1) = "T" Then
        
        FirstSpaceIndex = InStr(DecalAscLn, Space(1))
        
        If (FirstSpaceIndex = 2 And (IsNumeric(Mid(DecalAscLn, 3, 1)) Or (Mid(DecalAscLn, 3, 1) = "-"))) Or (IsNumeric(Mid(DecalAscLn, 2, 1))) Or (Mid(DecalAscLn, 2, 1) = "-") Then
            
            LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
            PinNo = Mid(DecalAscLn, LastSpaceIndex + 1)
            tCount = tCount + 1
            
'        If Not IsNumeric(PinNo) Then
            Alphanumeric = True
            TempRow = 2
            Do While CStr(Worksheets("Template").Cells(TempRow, 2).Value) <> PinNo Or CStr(Worksheets("Template").Cells(TempRow, 2).Value) = vbNullString
'                Debug.Print Worksheets("Template").Cells(TempRow, 2).Value
                TempRow = TempRow + 1
            Loop
            If CStr(Worksheets("Template").Cells(TempRow, 2).Value) <> vbNullString Then
                If IsNumeric(PinNo) Then
                    PinNo = Worksheets("Template").Cells(TempRow, 7)
                Else
                    PinNo = tCount
                End If
            End If
'        End If
            
            If FirstSpaceIndex = 2 Then
                NextSpaceIndex = InStr(3, DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PinX = Mid(DecalAscLn, 3, NextSpaceIndex - 3)
                If PinNo = 1 Then Pin1X = PinX
            Else
                NextSpaceIndex = InStr(2, DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PinX = Mid(DecalAscLn, 2, NextSpaceIndex - ExtraSpaces - 2)
            End If
            PinY = Mid(DecalAscLn, NextSpaceIndex + 1, InStr(NextSpaceIndex + 1, DecalAscLn, Space(1)) - NextSpaceIndex - 1)
            If PinNo = 1 Then Pin1Y = PinY
            
            PadDefs(PinNo, StartCol + 1) = PinX
            PadDefs(PinNo, StartCol + 2) = PinY
            
        End If
        
    End If

    If Left(DecalAscLn, 3) = "PAD" Then
        'DesignSpark Pad Shapes
        'Ellipse (E)
        'Rect (R)
        
        
        SpaceIndex1 = InStr(1, DecalAscLn, Space(1))
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex1)
        SpaceIndex1 = SpaceIndex1 + ExtraSpaces
        SpaceIndex2 = InStr(SpaceIndex1 + 1, DecalAscLn, Space(1))
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex2)
        SpaceIndex2 = SpaceIndex2 + ExtraSpaces
        
        SpaceIndex2 = InStr(5, DecalAscLn, Space(1))
        Pad = Mid(DecalAscLn, SpaceIndex1 + 1, SpaceIndex2 - SpaceIndex1 - 1)
        'Debug.Print "Pad = " & Pad
        
        LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
        DrillSize = Mid(DecalAscLn, LastSpaceIndex + 1)
    
        If DrillSize <> 0 Then IsPTH = True
        
        'Debug.Print "Drill Size = " & DrillSize
        
        Row = Row + 1
        'Mounted Side (Top)
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
'        Debug.Print DecalAscLn
    
        'Get Pad Shape
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        For i = 1 To 3
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 1 Then PadLayer = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            
            If i = 2 Then PadWidth = Round(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1), 3)
            
            If i = 3 And NextSpaceIndex <> 0 Then
                Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            Else
                Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
            End If
            
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
    
'        Debug.Print "PadLayer = " & PadLayer
'        Debug.Print "PadWidth = " & PadWidth
'        Debug.Print "Shape = " & Shape
    
        If Shape = "R" Or Shape = "S" Then
            If Shape = "R" Then Shape = "E"
            PadHeight = PadWidth
            PadRotation = 0
        ElseIf Shape = "RF" Then
                Shape = "R"
            For i = 4 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 5 Then
                    PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
'                    Debug.Print "PadRotation = " & PadRotation
                    If PadRotation = 0 Then
                        PadRotation = 90
                    ElseIf PadRotation = 90 Then
                        PadRotation = 0
                    End If
                End If

                If i = 6 Then PadHeight = Round(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1), 3)
                If i = 7 And PadHeight = 0 Then PadHeight = Round(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1), 3)
'                If i = 6 And PadHeight = 0 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
        
            Next i
        ElseIf Shape = "OF" Then
            Shape = "F"
            For i = 4 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
        '        If Chk_UseExisting Then
        '            If i = 5 Then
        '                PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        '            End If
        '            If i = 6 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        '            If i = 7 And PadHeight = 0 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        '        Else
                    If i = 4 Then
                        PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                        If PadRotation = 0 Then
                            PadRotation = 90
                        ElseIf PadRotation = 90 Then
                            PadRotation = 0
                        End If
                    End If
                    If i = 5 Then PadHeight = Round(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1), 3)
        '        End If
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
        
            Next i
            
'            Debug.Print "PadHeight = " & PadHeight
        
        End If
    
        'BuildPadDef
        PadDef = Replace(Shape & "W" & PadWidth & "L" & PadHeight & "H" & DrillSize & "A" & PadRotation, ".", "_")
'        Debug.Print PadDef
        
        If InStr(PadDefLst, "," & PadDef & ",") <> 0 Then
            SkipPadDef = True
        Else
            SkipPadDef = False
        End If
        
        
        If Pad = 0 Then
            For i = 1 To NoOfPads
                If i = 1 And Dshape Then Dwidth = PadWidth
                If PadDefs(i, StartCol) = vbNullString Then PadDefs(i, StartCol) = PadDef
                If PadDefs(i, StartCol + 3) = vbNullString Then PadDefs(i, StartCol + 3) = PadRotation
            Next i
        Else
            PadDefs(Pad, StartCol) = PadDef
            PadDefs(Pad, StartCol + 3) = PadRotation
        End If
        
        If Not SkipPadDef Then
            Print #1, "pse_new"
            Print #1, "fillin " & Chr(34) & PadDef & ".pad" & Chr(34)
            
            Print #1, "FORM padedit units " & units
            'FORM padedit decimal_places 4
        
            If Shape = "E" Then
                PadShape = "Circle"
            ElseIf Shape = "R" Or Shape = "RF" Then
                PadShape = "Rectangle"
            ElseIf Shape = "S" Then
                PadShape = "Square"
            ElseIf Shape = "F" Then
                PadShape = "Oblong"
            End If
        
            'Layers tab
            Print #1, "FORM padedit layers"
            'BEGIN LAYER
            Print #1, "FORM padedit grid row 1"
            Print #1, "FORM padedit geometry " & PadShape
            Print #1, "FORM padedit width " & PadWidth
            Print #1, "FORM padedit height " & PadHeight
            Print #1, "FORM padedit x_offset 0"
            Print #1, "FORM padedit y_offset 0"
            Print #1, "FORM padedit geometry_th Null"
            Print #1, "FORM padedit geometry_ant Null"
            'Debug.Print DecalNo

            'Skip Inner Layers
            Row = Row + 1
            'DEFAULT INTERNAL
            If DrillSize <> 0 Then
                Print #1, "FORM padedit grid row 2"
                Print #1, "FORM padedit geometry " & PadShape
                Print #1, "FORM padedit width " & PadWidth
                Print #1, "FORM padedit height " & PadHeight
                Print #1, "FORM padedit x_offset 0"
                Print #1, "FORM padedit y_offset 0"
                Print #1, "FORM padedit geometry_th Null"
                Print #1, "FORM padedit geometry_ant Null"
            
                'Opposite Side (Bottom)
                Row = Row + 1
                'Bottom
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                DecalAscLn = Worksheets(WorksheetName).Cells(Row, 1).Value
                For i = 1 To 3
                    NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                    If i = 1 Then PadLayer = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    If i = 2 Then PadWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    If i = 3 And NextSpaceIndex <> 0 Then
                        Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    Else
                        Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
                    End If
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                    NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                    PrevSpaceIndex = NextSpaceIndex
                Next i
            
                If Shape = "R" Or Shape = "S" Then
                    If Shape = "R" Then Shape = "E"
                    PadHeight = PadWidth
                    PadRotation = 0
                ElseIf Shape = "RF" Then
                    Shape = "R"
                    For i = 4 To 6
                        NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                        If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                        ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                        NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                        PrevSpaceIndex = NextSpaceIndex
                    Next i
                End If
            
                If Shape = "E" Then PadShape = "Circle"
                If Shape = "R" Or Shape = "RF" Then PadShape = "Rectangle"
                If Shape = "S" Then PadShape = "Square"
                
                'END LAYER
                Print #1, "FORM padedit grid row 3"
                Print #1, "FORM padedit geometry " & PadShape
                Print #1, "FORM padedit width " & PadWidth
                Print #1, "FORM padedit height " & PadHeight
                Print #1, "FORM padedit x_offset 0"
                Print #1, "FORM padedit y_offset 0"
                Print #1, "FORM padedit geometry_th Null"
                Print #1, "FORM padedit geometry_ant Null"
                
                pthPadstackCnt = pthPadstackCnt + 1
                'Parameters Tab
                Print #1, "FORM padedit parameters"
                'Drill/Slot hole
                Print #1, "FORM padedit through_hole YES"
                Print #1, "FORM padedit hole_size_y " & DrillSize
                Print #1, "FORM padedit hole_size_x " & DrillSize
                'Drill/Slot symbol
                Print #1, "FORM padedit drill_fig Cross"
                Print #1, "FORM padedit characters " & ColLett(pthPadstackCnt)
                If units = "Mils" Then drlsymsize = 50
                If units = "Millimeter" Then drlsymsize = 1.27
                Print #1, "FORM padedit drill_width " & drlsymsize
                Print #1, "FORM padedit drill_height " & drlsymsize
                Print #1, "FORM padedit plating Plated"
            Else
                Print #1, "FORM padedit single YES"
                Print #1, "FORM padedit plating Non-Plated"
            End If

            Print #1, "pse_save_as"
            Print #1, "fillin " & Chr(34) & PadDef & ".Pad" & Chr(34)
            
            PadDefLst = PadDefLst & PadDef & ","
            
        End If
    End If

    Row = Row + 1
    
    If Worksheets(WorksheetName).Cells(Row, 1).Value = vbNullString And Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString Then
        DecalHdrRow = Row + 1
        DecalNo = DecalNo + 1
    End If
    
    
    
Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")

'Debug.Print "D-shape Pad Definition = " & Replace("DW" & Dwidth & "L" & Dlength, ".", "_")
'D-shape padstack example
If Dshape And Dfound Then
    Print #1, "pse_new"
    Print #1, "fillin " & Chr(34) & Replace("DW" & Dwidth & "L" & Dlength, ".", "_") & ".pad" & Chr(34)
    Print #1, "FORM padedit units & units"
    Print #1, "FORM padedit layers"
    Print #1, "FORM padedit grid row 1"
    Print #1, "FORM padedit geometry Shape"
    Print #1, "FORM padedit shapebutton"
    Print #1, "fillin " & Chr(34) & Replace("DW" & Dwidth & "L" & Dlength, ".", "_") & Chr(34)
    Print #1, "FORM padedit x_offset 0"
    Print #1, "FORM padedit y_offset 0"
    Print #1, "FORM padedit geometry_th Null"
    Print #1, "FORM padedit geometry_ant Null"
    Print #1, "FORM padedit single YES"
    Print #1, "FORM padedit parameters"
    Print #1, "FORM padedit plating Non-Plated"
    Print #1, "pse_save_as"
    Print #1, "fillin " & Chr(34) & Replace("DW" & Dwidth & "L" & Dlength, ".", "_") & ".pad" & Chr(34)
End If

Print #1, "#pse_exit"
Print #1, "FORM padedit done"
 
Print #1, "# end of padstack script"

Close #1

'Create D-shape script
If Dshape And Dfound Then
DshapeFile = filePath & "d-shape.scr"
DshapePadDef = Replace("DW" & Dwidth & "L" & Dlength, ".", "_")
Open DshapeFile For Output As #3

Print #3, "Version 16.5"

Print #3, "setwindow pcb"
Print #3, "new"
Print #3, "newdrawfillin " & Chr(34) & DshapePadDef & ".dra" & Chr(34) & " " & Chr(34) & "Shape Symbol" & Chr(34)
Print #3, "setwindow pcb"
Print #3, "generaledit"
Print #3, "prmed"
Print #3, "setwindow FORM.prmedit"
Print #3, "FORM prmedit design"
Print #3, "FORM prmedit units " & units
Print #3, "FORM prmedit accuracy 3"
Print #3, "FORM prmedit move_x 10"
Print #3, "FORM prmedit move_y 10"
Print #3, "FORM prmedit display"
Print #3, "setwindow FORM.prmedit"
Print #3, "FORM prmedit view_grids_button"
Print #3, "setwindow FORM.grid"
Print #3, "FORM grid non_etch non_etch_x_grids 1"
Print #3, "FORM grid non_etch non_etch_y_grids 1"
Print #3, "FORM grid top subclass_x_grids 1"
Print #3, "FORM grid top subclass_y_grids 1"
Print #3, "FORM grid bottom subclass_x_grids 1"
Print #3, "FORM grid bottom subclass_y_grids 1"
Print #3, "FORM grid display YES"
Print #3, "FORM grid done"
Print #3, "setwindow FORM.prmedit"
Print #3, "FORM prmedit done"
Print #3, "setwindow pcb"
Print #3, "shape add rect"
Print #3, "pick grid " & -(0.5 * Dwidth) & " " & (0.5 * Dlength)
'Print #3, "pick grid -0.15 0.75"
Print #3, "pick grid " & (0.5 * Dwidth) & " " & (-(0.5 * Dlength) + (0.5 * Dwidth))
'Print #3, "pick grid 0.15 -0.6"
Print #3, "shape add circle"
Print #3, "pick grid 0 " & (-(0.5 * Dlength) + (0.5 * Dwidth))
'Print #3, "pick grid 0 -0.6"
Print #3, "pick grid 0 " & -(0.5 * Dlength)
'Print #3, "pick grid 0 -0.75"
Print #3, "shape merge shapes"
Print #3, "pick grid " & -(0.5 * Dwidth) & " " & (0.5 * Dlength)
'Print #3, "pick grid -0.15 0.75"
Print #3, "pick grid 0 " & -(0.5 * Dlength)
'Print #3, "pick grid 0 -0.75"
Print #3, "Save"


Close #3
End If




FootprintFile = filePath & "footprint.scr"
Open FootprintFile For Output As #2


Print #2, "# **************************New Pattern starts here************************"
Print #2, "Version 14#"
Print #2, "setwindow pcb"
Print #2, "new"
Print #2, "newdrawfillin " & Chr(34) & PCBdecal & ".dra" & Chr(34) & " " & Chr(34) & "Package Symbol" & Chr(34)
Print #2, "prmed"
Print #2, "setwindow Form.prmedit"
Print #2, "FORM prmedit design"
Print #2, "FORM prmedit type Package"
Print #2, "FORM prmedit units " & units
Print #2, "FORM prmedit size Other"
Print #2, "FORM prmedit accuracy 2"
Print #2, "FORM prmedit width 2711"
Print #2, "FORM prmedit height 2436"
Print #2, "FORM prmedit apply"
Print #2, "FORM prmedit x -1095.5"
Print #2, "FORM prmedit y -1245.5"
Print #2, "FORM prmedit apply"
Print #2, "FORM prmedit lock_mode Line"
Print #2, "FORM prmedit lock_direction Off"
Print #2, "FORM prmedit apply"
Print #2, "FORM prmedit done"
Print #2, "setwindow pcb"
Print #2, "Status"
Print #2, "setwindow Form.Status"
Print #2, "FORM status lock_direction Off"
Print #2, "FORM status lock_mode line"
Print #2, "FORM status symbol_mirror NO"
Print #2, "FORM status drawing_size"
Print #2, "FORM status done"
Print #2, "setwindow pcb"
Print #2, "window center; pick     0.0     0.0"


Print #2, "define subclass"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name ASSEMBLY_TOP"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name SILKSCREEN_TOP"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PIN pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name PASTEMASK_TOP"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PIN pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name SOLDERMASK_TOP"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name PLACE_BOUND_TOP"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name PLACE_BOUND_BOTTOM"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PIN pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name SOLDERMASK_BOTTOM"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PIN pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name PASTEMASK_BOTTOM"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name SILKSCREEN_BOTTOM"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name ASSEMBLY_BOTTOM"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass BOARD_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name DIMENSION"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass BOARD_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name OUTLINE"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name ASSEMBLY_TOP"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name PLACE_BOUND_TOP"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name PLACE_BOUND_BOTTOM"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass MANUFACTURING pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name NO_PROBE_TOP"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass MANUFACTURING pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name NO_PROBE_BOTTOM"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name CONTACT_AREA"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name CUTOUTSLOTS"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name DIEBONDPADS"
Print #2, "setwindow Form.subclass"
Print #2, "FORM subclass PACKAGE_GEOMETRY pick"
Print #2, "setwindow Form.subclass_nonetch"
Print #2, "FORM subclass_nonetch name WIREBONDS"
Print #2, "FORM subclass done"

'Remove Padding Spaces
DecalAscLn = RemovePaddingSpaces(DecalAscLn)

Row = 3
StartCol = 0
FigNo = 0
NextDecal = True

If Not IsPTH Or Not Chk_UseExisting Then
    Pin1X = 0
    Pin1Y = 0
End If

Do

    If NextDecal Then

        
    
        For i = 1 To NoOfPads
            If Dshape And Dfound And i <= t Then
                PadDef = DshapePadDef
                If i <= L Then
                    PadRotation = 90 'Left
                ElseIf i > L And i <= B Then
                    PadRotation = 180 'Bottom
                ElseIf i > B And i <= r Then
                    PadRotation = 270 'Right
                ElseIf i > r And i <= t Then
                    PadRotation = 0 'Top
                End If
            Else
                PadDef = PadDefs(i, StartCol)
                PadRotation = PadDefs(i, StartCol + 3)
'                Debug.Print i & " - " & PadRotation
            End If
            Print #2, "Add Pin"
            Print #2, "setwindow Form.mini"
            Print #2, "FORM mini offsetx 0.00"
            Print #2, "FORM mini offsety 0.00"
            Print #2, "FORM mini rotate_pin " & PadRotation
            Print #2, "Add Pin"
            Print #2, "setwindow Form.mini"
            Print #2, "FORM mini pad_name " & PadDef
            Print #2, "setwindow Form.mini"
            If Alphanumeric Then
                Print #2, "FORM mini next_pin_number " & Worksheets("Template").Cells(i + 1, 2)
            Else
                Print #2, "FORM mini next_pin_number " & i
            End If
            Print #2, "setwindow pcb"
            Print #2, "pick " & (PadDefs(i, StartCol + 1)) - Pin1X & " " & PadDefs(i, StartCol + 2) - Pin1Y
            Print #2, "done"
        Next i
        NextDecal = False
        StartCol = StartCol + 4
    End If

    PrevDecalAscLn = DecalAscLn
    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
    
    If DecalAscLn = "REF-DES" Then
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        For i = 1 To 7
            NextSpaceIndex = InStr(NextSpaceIndex + 1, PrevDecalAscLn, Space(1))
            If i = 1 Then RefDesX = Val(Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
            If i = 2 Then RefDesY = Val(Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
            If i = 7 Then LAYER = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            ExtraSpaces = GetExtraSpaces(PrevDecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
        If LAYER = 26 Or LAYER = 1 Then
        
'            Print #2, "setwindow pcb"
'            Print #2, "generaledit"
'            Print #2, "Label refdes"
'            Print #2, "setwindow FORM.mini"
'            Print #2, "FORM mini subclass SILKSCREEN_TOP"
'            Print #2, "setwindow pcb"
'            Print #2, "setwindow pcb"
'            Print #2, "pick 0.00 0.00"
'            Print #2, "text " & txt_RDP.Value & "*"
'            Print #2, "done"
        
            Print #2, "setwindow pcb"
            Print #2, "Label refdes"
            Print #2, "setwindow Form.mini"
            Print #2, "FORM mini class REF DES"
            Print #2, "FORM mini subclass SILKSCREEN_TOP"
            Print #2, "FORM mini text_block 3"
            Print #2, "FORM mini text_justification Center"
            Print #2, "FORM mini angle 0"
            Print #2, "FORM mini mirror NO"
            Print #2, "setwindow pcb"
            Print #2, "pick " & RefDesX - Pin1X & " " & RefDesY - Pin1Y
            Print #2, "Text " & txt_RDP.Value & "*"
            Print #2, "done"
        End If
    End If
    
    If DecalAscLn = "*" Then
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        For i = 1 To 7
            NextSpaceIndex = InStr(NextSpaceIndex + 1, PrevDecalAscLn, Space(1))
            If i = 1 Then Pin1IdentX = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            If i = 2 Then Pin1IdentY = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            If i = 4 Then LAYER = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            ExtraSpaces = GetExtraSpaces(PrevDecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
        If LAYER = 26 Then
'            Print #2, "   (FIGURE FIG" & FigNo & " LC15 LAY38"
'            Print #2, "    (OUTLINE (PT " & Round(50000000 + ((Pin1IdentX - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((Pin1IdentY - Pin1Y) * Multiplier), 0) & ")"
'            Print #2, "     (CWSEMI (PT " & Round(50000000 + ((Pin1IdentX - Pin1X) * Multiplier), 0) & " " & Round(50000000 + (((Pin1IdentY - Pin1Y) + 10) * Multiplier), 0) & "))"
'            Print #2, "     (CWSEMI (PT " & Round(50000000 + ((Pin1IdentX - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((Pin1IdentY - Pin1Y) * Multiplier), 0) & "))"
'            Print #2, "    )"
'            Print #2, "   )"
            FigNo = FigNo + 1

        End If
    End If
    
    If Left(DecalAscLn, 6) = "CIRCLE" Then
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        For i = 1 To 7
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            If i = 4 Then LAYER = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
        If LAYER = 26 Or LAYER = 1 Then
            LayerRef = "SILKSCREEN_TOP"
        ElseIf LAYER = 27 Then
            LayerRef = "ASSEMBLY_TOP"
        End If
        If LAYER = 26 Or LAYER = 27 Or LAYER = 1 Then
            Row = Row + 1
            DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
'            Debug.Print DecalAscLn
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            CircleX1 = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
            LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
            CircleY1 = Val(Mid(DecalAscLn, LastSpaceIndex + 1))
'            Debug.Print DecalAscLn
            Row = Row + 1
            DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            CircleX2 = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
            LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
            CircleY2 = Val(Mid(DecalAscLn, LastSpaceIndex + 1))
'            Debug.Print DecalAscLn
            
            CircleDia = Abs(CircleX1 - CircleX2)
            CircleRad = CircleDia / 2
            
            CenterX1 = CircleX1 + CircleRad
            
            Print #2, "Add Circle"
            Print #2, "setwindow FORM.mini"
            Print #2, "FORM mini class PACKAGE GEOMETRY"
            Print #2, "FORM mini subclass " & LayerRef
            Print #2, "setwindow FORM.mini"
            Print #2, "FORM mini line_width " & LineWidth
            Print #2, "setwindow pcb"
            Print #2, "pick " & CenterX1 & " " & CircleY1
            Print #2, "pick " & CenterX1 + CircleRad + 0.005 & " " & CircleY1
            Print #2, "done"
            
'            Print #2, "   (FIGURE FIG" & FigNo & " LC15 LAY38"
'            Print #2, "    (OUTLINE (PT " & Round(50000000 + ((CircleX1 - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((CircleY1 - Pin1Y) * Multiplier), 0) & ")"
'            Print #2, "     (CWSEMI (PT " & Round(50000000 + ((CircleX1 - Pin1X) * Multiplier), 0) & " " & Round(50000000 + (((CircleY1 - Pin1Y) + CircleDia) * Multiplier), 0) & "))"
'            Print #2, "     (CWSEMI (PT " & Round(50000000 + ((CircleX1 - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((CircleY1 - Pin1Y) * Multiplier), 0) & "))"
'            Print #2, "    )"
'            Print #2, "   )"
'            FigNo = FigNo + 1

        End If
    End If
    
    If Left(DecalAscLn, 6) = "CLOSED" Then
    
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        For i = 1 To 4
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 2 Then NoOfXY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
        
        LayerRef = vbNullString
        If LayerNo = 20 Or LayerNo = 25 Then
            LayerRef = "PLACE_BOUND_TOP"
        ElseIf LayerNo = 26 Then
            LayerRef = "SILKSCREEN_TOP"
        ElseIf LayerNo = 27 Then
            LayerRef = "ASSEMBLY_TOP"
        End If
        
'        If LayerRef = "LAY40" Then
'            LCNo = 13
'        ElseIf LayerRef = "LAY38" Then
'            LCNo = 7
'        ElseIf LayerRef = "LAY42" Then
'            LCNo = 11
'        End If
        
        If LayerRef <> vbNullString Then
            Row = Row + 1
            DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
            FirstSpaceIndex = InStr(DecalAscLn, Space(1))
            ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
            PrevXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
            For i = 1 To NoOfXY - 1
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                NextXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                PrevX = Val(Left(PrevXY, InStr(PrevXY, Space(1)) - 2)) - Pin1X
                PrevY = Val(Mid(PrevXY, InStr(PrevXY, Space(1)) + 1)) - Pin1Y
                NextX = Val(Left(NextXY, InStr(NextXY, Space(1)) - 2)) - Pin1X
                NextY = Val(Mid(NextXY, InStr(NextXY, Space(1)) + 1)) - Pin1Y
                
                
                Print #2, "Add Line"
                Print #2, "setwindow FORM.mini"
                Print #2, "FORM mini class PACKAGE GEOMETRY"
                Print #2, "FORM mini subclass " & LayerRef
                Print #2, "setwindow FORM.mini"
                Print #2, "FORM mini line_width " & LineWidth
                Print #2, "FORM mini lock_direction Off"
                Print #2, "setwindow pcb"
                Print #2, "pick " & PrevX & " " & PrevY
                Print #2, "pick " & NextX & " " & NextY
                Print #2, "done"
                
                
                
'                Print #2, "   (FIGURE FIG" & FigNo & " LC" & LCNo & " " & LayerRef
'                Print #2, "    (OPENSHAPE (PT " & Round(50000000 + (PrevX * Multiplier), 0) & " " & Round(50000000 + (PrevY * Multiplier), 0) & ") (PT " & Round(50000000 + (NextX * Multiplier), 0) & " " & Round(50000000 + (NextY * Multiplier), 0) & ")))"
                FigNo = FigNo + 1
                PrevXY = NextXY
            Next i
        End If
    End If
    
    If Left(DecalAscLn, 4) = "OPEN" Then
    
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        For i = 1 To 4
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 2 Then LineCount = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
        
        LayerRef = vbNullString
        If LayerNo = 26 Then
            LayerRef = "SILKSCREEN_TOP"
        ElseIf LayerNo = 27 Then
            LayerRef = "ASSEMBLY_TOP"
        End If
        
'        If LayerRef = "LAY38" Then
'            LCNo = 7
'        ElseIf LayerRef = "LAY42" Then
'            LCNo = 11
'        End If
        
        If LayerRef <> vbNullString Then
            Row = Row + 1
            DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
            
'Check for arc
            FirstSpaceIndex = InStr(DecalAscLn, Space(1))
            ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
            
            If FirstSpaceIndex + ExtraSpaces <> InStrRev(DecalAscLn, Space(1)) Then
            
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 6
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 3 Then StartAngle = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then SweepAngle = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 5 Then LLPX = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 6 Then LLPY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
            StartAngle = Left(StartAngle, Len(StartAngle) - 1) & "." & Right(StartAngle, 1)
            SweepAngle = Left(SweepAngle, Len(SweepAngle) - 1) & "." & Right(SweepAngle, 1)
            URPY = Mid(DecalAscLn, InStrRev(DecalAscLn, Space(1)) + 1)
            
            Radius = (URPY - LLPY) / 2
            ArcCenterX = LLPX + Radius
            ArcCenterY = LLPY + Radius
            
'CADSTAR ARC

'            Print #2, vbTab & vbTab & vbTab & "(arc (pt " & ArcCenterX - Pin1X & ", " & ArcCenterY - Pin1Y & ") (radius " & Radius & ") (startAngle " & StartAngle & ") (sweepAngle " & SweepAngle & ") (width " & LineWidth & "))"

                Print #2, "Add rarc"
                Print #2, "setwindow FORM.mini"
                Print #2, "FORM mini class PACKAGE GEOMETRY"
                Print #2, "FORM mini subclass " & LayerRef
                Print #2, "setwindow FORM.mini"
                Print #2, "FORM mini line_width " & LineWidth
                Print #2, "FORM mini lock_direction Off"
                Print #2, "setwindow pcb"
                Print #2, "pick " & ArcCenterX & " " & ArcCenterY
                Print #2, "pick " & ArcCenterX + Radius & " " & ArcCenterY
                Print #2, "angle " & -SweepAngle
                Print #2, "done"

            Row = Row + 1 'Skip SecondXY for arc
            
            Else
                For Line = 1 To LineCount - 1
            
                    If Line = 1 Then
                        FirstXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                        FirstX = Val(Left(FirstXY, InStr(FirstXY, Space(1)) - 2)) - Pin1X
                        FirstY = Val(Mid(FirstXY, InStr(FirstXY, Space(1)) + 1)) - Pin1Y
                    Else
                        FirstX = NextX
                        FirstY = NextY
                    End If

                    Row = Row + 1
                    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                    NextSpaceIndex = InStr(DecalAscLn, Space(1))
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                    NextXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                    NextX = Val(Left(NextXY, InStr(NextXY, Space(1)) - 2)) - Pin1X
                    NextY = Val(Mid(NextXY, InStr(NextXY, Space(1)) + 1)) - Pin1Y
                
'CADSTAR LINE

                    Print #2, "Add Line"
                    Print #2, "setwindow FORM.mini"
                    Print #2, "FORM mini class PACKAGE GEOMETRY"
                    Print #2, "FORM mini subclass " & LayerRef
                    Print #2, "setwindow FORM.mini"
                    Print #2, "FORM mini line_width " & LineWidth
                    Print #2, "FORM mini lock_direction Off"
                    Print #2, "setwindow pcb"
                    Print #2, "pick " & FirstX & " " & FirstY
                    Print #2, "pick " & NextX & " " & NextY
                    Print #2, "done"
                
                Next Line


'                Print #2, "   (FIGURE FIG" & FigNo & " LC" & LCNo & " " & LayerRef
'                FigNo = FigNo + 1
'                Print #2, "    (OPENSHAPE (PT " & Round(50000000 + (FirstX * Multiplier), 0) & " " & Round(50000000 + (FirstY * Multiplier), 0) & ") (PT " & Round(50000000 + (NextX * Multiplier), 0) & " " & Round(50000000 + (NextY * Multiplier), 0) & ")))"
                
'                Print #2, vbTab & vbTab & vbTab & "(line (pt " & FirstX & " " & FirstY & ") (pt " & NextX & " " & NextY & ") (width " & LineWidth & "))"

            End If
'            Print #2, vbTab & vbTab & ")"
        End If
    End If
    
    Row = Row + 1
    
    
If Worksheets(WorksheetName).Cells(Row, 1).Value = vbNullString And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString And Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*") Then
'    Print #2, vbTab & ")"
    NextDecal = True
End If
                    
Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")

'Print #2, "   (PAD 1 (PT 28876500 55292500) PC0 THRU"
'Print #2, "    (ORIENT 90000)"
'Print #2, "    (EXITS FREE)"
'Print #2, "    (FIRSTPAD)"
'Print #2, "    (PADIDENTIFIER " & Chr(34) & "1" & Chr(34) & ")"
'Print #2, "   )"
'Print #2, "  )"
'Print #2, " )"
'Print #2, ")"

Print #2, "Create Symbol"
Print #2, "fillin " & Chr(34) & PCBdecal & Chr(34)
Print #2, "setwindow pcb"
Print #2, "trapsize 503"
Print #2, "dbdoctor"
Print #2, "setwindow Form.dbdoctor_allegro"
Print #2, "FORM dbdoctor_allegro drc YES"
Print #2, "FORM dbdoctor_allegro shapes YES"
Print #2, "FORM dbdoctor_allegro execute"
Print #2, "setwindow pcb"
Print #2, "save_as"
Print #2, "fillin " & Chr(34) & PCBdecal & Chr(34)
Print #2, "setwindow pcb"
Print #2, "#exit"


Close #2

'Create Batch file for running Allegro Scripts
BatchFile = filePath & "BuildFootprint.bat"
Open BatchFile For Output As #4

If Dshape And Dfound Then Print #4, "allegro -s " & Chr(34) & filePath & "d-shape.scr" & Chr(34)

Print #4, "pad_designer -s " & Chr(34) & filePath & "padstacks.scr" & Chr(34)

Print #4, "allegro -s " & Chr(34) & filePath & "footprint.scr" & Chr(34)

Print #4, "exit"

Close #4

End Function
Function ExportOCAP()

ExportOC
ExportAP

End Function
Function WriteCPA()
    Print #1, "(CADSTARPCB"
    Print #1, " (HEADER"
    Print #1, "  (FORMAT LIBRARY 2 18)"
    Print #1, "  (JOBFILE " & Chr(34) & Chr(34) & ")"
    Print #1, "  (JOBTITLE " & Chr(34) & Chr(34) & ")"
    Print #1, "  (GENERATOR " & Chr(34) & Chr(34) & ")"
    Print #1, "  (RESOLUTION"
    Print #1, "   (METRIC HUNDREDTH MICRON)"
    Print #1, "  )"
    Print #1, "  (TIMESTAMP " & Format(Now(), "yyyy m d h m s") & ")"
    Print #1, " )"
    Print #1, " (ASSIGNMENTS"
    Print #1, "  (LAYERDEFS"
    Print #1, "   (LAYERSTACK LAY7 LAY9 LAY12 LAY14 LAY18 LAY10 LAY16 LAY6 LAY8 LAY17"
    Print #1, "     LAY11 LAY19 LAY15 LAY13"
    Print #1, "   )"
    Print #1, "   (LAYER LAY0 " & Chr(34) & "(All Layers)" & Chr(34)
    Print #1, "    (ALLLAYER)"
    Print #1, "   )"
    Print #1, "   (LAYER LAY1 " & Chr(34) & "(All Electrical Layers)" & Chr(34)
    Print #1, "    (ALLELEC)"
    Print #1, "   )"
    Print #1, "   (LAYER LAY2 " & Chr(34) & "(All Documentation Layers)" & Chr(34)
    Print #1, "    (ALLDOC)"
    Print #1, "   )"
    Print #1, "   (LAYER LAY3 " & Chr(34) & "(Undefined)" & Chr(34)
    Print #1, "    (NOLAYER)"
    Print #1, "   )"
    Print #1, "   (LAYER LAY4 " & Chr(34) & "(Component Copper)" & Chr(34)
    Print #1, "    (ASSCOMPCOPP)"
    Print #1, "   )"
    Print #1, "   (LAYER LAY5 " & Chr(34) & "(Jumper)" & Chr(34)
    Print #1, "    (JUMPERLAYER)"
    Print #1, "   )"
    Print #1, "   (LAYER LAY6 " & Chr(34) & "Top Elec" & Chr(34)
    Print #1, "    (ELEC 1"
    Print #1, "     (BIAS UNBIASED)"
    Print #1, "     (LAYERHEIGHT 0)"
    Print #1, "    )"
    Print #1, "   )"
    Print #1, "   (LAYER LAY7 " & Chr(34) & "Construction" & Chr(34)
    Print #1, "    (DOC)"
    Print #1, "   )"
    Print #1, "   (LAYER LAY8 " & Chr(34) & "Bottom Elec" & Chr(34)
Print #1, "    (ELEC 2"
Print #1, "     (BIAS UNBIASED)"
Print #1, "     (LAYERHEIGHT 0)"
Print #1, "    )"
Print #1, "   )"
Print #1, "   (LAYER LAY9 " & Chr(34) & "Drill Drawing" & Chr(34)
Print #1, "    (DOC)"
Print #1, "   )"
Print #1, "   (LAYER LAY10 " & Chr(34) & "Top silk" & Chr(34)
Print #1, "    (NONELEC 1)"
Print #1, "    (LASUBTYP LAYERSUBTYPE_SILKSCREEN)"
Print #1, "   )"
Print #1, "   (LAYER LAY11 " & Chr(34) & "Bottom silk" & Chr(34)
Print #1, "    (NONELEC 2)"
Print #1, "    (LASUBTYP LAYERSUBTYPE_SILKSCREEN)"
Print #1, "   )"
Print #1, "   (LAYER LAY12 " & Chr(34) & "Top Placement" & Chr(34)
Print #1, "    (NONELEC 1)"
Print #1, "    (LASUBTYP LAYERSUBTYPE_PLACEMENT)"
Print #1, "   )"
Print #1, "   (LAYER LAY13 " & Chr(34) & "Bottom Placement" & Chr(34)
Print #1, "    (NONELEC 2)"
Print #1, "    (LASUBTYP LAYERSUBTYPE_PLACEMENT)"
Print #1, "   )"
Print #1, "   (LAYER LAY14 " & Chr(34) & "Top Assembly" & Chr(34)
Print #1, "    (NONELEC 1)"
Print #1, "    (LASUBTYP LAYERSUBTYPE_ASSEMBLY)"
Print #1, "   )"
Print #1, "   (LAYER LAY15 " & Chr(34) & "Bottom Assembly" & Chr(34)
Print #1, "    (NONELEC 2)"
Print #1, "    (LASUBTYP LAYERSUBTYPE_ASSEMBLY)"
Print #1, "   )"
Print #1, "   (LAYER LAY16 " & Chr(34) & "Top Solder Resist" & Chr(34)
Print #1, "    (NONELEC 1)"
Print #1, "    (LASUBTYP LAYERSUBTYPE_SOLDERRESIST)"
Print #1, "   )"
Print #1, "   (LAYER LAY17 " & Chr(34) & "Bottom Solder Resist" & Chr(34)
Print #1, "    (NONELEC 2)"
Print #1, "    (LASUBTYP LAYERSUBTYPE_SOLDERRESIST)"
Print #1, "   )"
Print #1, "   (LAYER LAY18 " & Chr(34) & "Top Paste" & Chr(34)
Print #1, "    (NONELEC 1)"
Print #1, "    (LASUBTYP LAYERSUBTYPE_PASTE)"
Print #1, "   )"
Print #1, "   (LAYER LAY19 " & Chr(34) & "Bottom Paste" & Chr(34)
Print #1, "    (NONELEC 2)"
Print #1, "    (LASUBTYP LAYERSUBTYPE_PASTE)"
Print #1, "   )"
Print #1, "  )"
Print #1, "  (CODEDEFS"
Print #1, "   (LINECODE LC11 " & Chr(34) & "Silkscreen Outline 1" & Chr(34) & " 2540"
Print #1, "    (STYLE SOLID)"
Print #1, "   )"
Print #1, "   (LINECODE LC14 " & Chr(34) & "Assembly Outline 1" & Chr(34) & " 2540"
Print #1, "    (STYLE SOLID)"
Print #1, "   )"
Print #1, "   (LINECODE LC15 " & Chr(34) & "Placement Outline 1" & Chr(34) & " 2540"
Print #1, "    (STYLE SOLID)"
Print #1, "   )"
Print #1, "   (LINECODE LC16 " & Chr(34) & "Pin 1 Ident" & Chr(34) & " 50800"
Print #1, "    (STYLE SOLID)"
Print #1, "   )"
Print #1, "   (TEXTCODE TC10 " & Chr(34) & "Component Name" & Chr(34) & " 3000 60000 40000)"
Print #1, "   (SPACINGCODE P_P 100000)"
Print #1, "   (SPACINGCODE P_C 100000)"
Print #1, "   (SPACINGCODE C_C 100000)"
Print #1, "   (SPACINGCODE H_H 100000)"
'   (PADCODE PC80 "RW0.65L1.525H0"
'    (RECTANGLE 65000 43750 43750)
'   )
'   (ATTRNAME AT0 "Component Category"
'    (ATTROWNER COMPONENT)
'   )
'   (ATTRNAME AT1 "assembly_name"
'    (ATTROWNER COMPONENT)
'   )
'   (ATTRNAME AT2 "Value"
'    (ATTROWNER COMPONENT)
'   )
'   (ATTRNAME AT3 "thm_power_diss"
'    (ATTROWNER COMPONENT)
'   )
'   (ATTRNAME AT4 "placement"
'    (ATTROWNER COMPONENT)
'   )
'   (ATTRNAME AT5 "silkscrn_name"
'    (ATTROWNER COMPONENT)
'   )
'   (ATTRNAME AT6 "Manufacturers Part Number"
'    (ATTROWNER COMPONENT)
'   )
'   (ATTRNAME AT7 "Height"
'    (ATTROWNER SYMDEF)
'   )
'   (ATTRNAME AT8 "Drawing_Name"
'    (ATTROWNER DOCSYMBOL)
'   )
'   (ATTRNAME AT9 "Client"
'    (ATTROWNER DOCSYMBOL)
End Function



Function ExportCS()
Dim GateCnt As Integer
Dim GateNo As Integer
Dim SYMname As String
Dim SymbolFile As String
Dim BoxWidthLR As Double
Dim BoxWidthTB As Double
Dim PinPitch As Double
Dim EmailBody As String
Dim DecalAscLn As String
Dim SpaceIndex As Integer
Dim PadDefs() As String
Dim NextSpaceIndex As Integer
Dim SpaceIndex1 As Integer
Dim SpaceIndex2 As Integer
Dim PrevDecalAscLn As String
Dim FirstSpaceIndex As Integer
Dim Alphanumeric As Boolean
Dim SkipPadDef As Boolean
Dim PadCodes() As String
Dim tCount As Integer

tCount = 0


Alphanumeric = False

MissingValues = vbNullString

If Replace(txt_BaseName.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Symbol Base Name"
Else
    txt_BaseName.Value = Replace(txt_BaseName.Value, Space(1), vbNullString)
    Sheets("Setup").Cells(10, 2).Value = txt_BaseName.Value
End If

Sheets("Setup").Cells(8, 2).Value = cbo_PinLength.Value

'If Replace(Txt_PinPitch.Value, Space(1), vbNullString) = vbNullString Then
'    MissingValues = MissingValues & ", " & "Symbol Pin Pitch"
'Else
    Sheets("Setup").Cells(12, 2).Value = cbo_PinPitch.Value
'End If

If Replace(txt_ExportDir.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Export Directory"
Else
    Sheets("Setup").Range("B16").Value = txt_ExportDir.Value
End If

'If Chk_UseExisting Then
    Sheets("Setup").Cells(102, 2).Value = "TRUE"
'Else
'    Sheets("Setup").Cells(102, 2).Value = "FALSE"
'End If

Sheets("Setup").Cells(15, 2).Value = cbo_PCB.Value

Sheets("Setup").Cells(14, 2).Value = Txt_PinCnt.Value

'Sheets("Setup").Cells(16, 2).Value = cbo_LibLst.Value

Sheets("Setup").Cells(17, 3).Value = txt_RDP.Value

If Replace(Txt_PartName.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Part Name"
Else
    Txt_PartName.Value = Replace(Txt_PartName.Value, Space(1), vbNullString)
    Sheets("Setup").Cells(18, 2).Value = Txt_PartName.Value
End If

If MissingValues <> vbNullString Then
    MsgBox "Please Enter Value for " & Mid(MissingValues, 3), vbOKOnly, "ECAD Part Wizard"
    Exit Function
End If

    Success = True

    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[GateSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(46, 46, 189)
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(192, 143, 46)
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(209, 50, 50)
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(45, 187, 45)
    With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

filePath = txt_ExportDir.Value & "\"

PinCntPCB = Txt_PinCnt.Value
PinLength = cbo_PinLength.Value
LogFam = txt_RDP.Value
PinPitch = cbo_PinPitch.Value
BaseName = txt_BaseName.Value
'Replace illegal characters from symbol base name
BaseName = Replace(BaseName, "+", "-plus-")
BaseName = Replace(BaseName, "*", "_")
BaseName = Replace(BaseName, "?", "_")
BaseName = Replace(BaseName, "&", "_")
BaseName = Replace(BaseName, "|", "_")
BaseName = Replace(BaseName, "[", "_")
BaseName = Replace(BaseName, "]", "_")
BaseName = Replace(BaseName, "(", "_")
BaseName = Replace(BaseName, ")", "_")
BaseName = Replace(BaseName, "{", "_")
BaseName = Replace(BaseName, "}", "_")
BaseName = Replace(BaseName, "<", "_")
BaseName = Replace(BaseName, ">", "_")


PCBdecal = cbo_PCB.Value
PTName = Replace(Txt_PartName.Value, ",", "_")
PTName = Replace(PTName, "+", "-plus-")
PTName = Replace(PTName, "*", "_")
PTName = Replace(PTName, "?", "_")
PTName = Replace(PTName, "&", "_")
PTName = Replace(PTName, "|", "_")
PTName = Replace(PTName, "[", "_")
PTName = Replace(PTName, "]", "_")
PTName = Replace(PTName, "(", "_")
PTName = Replace(PTName, ")", "_")
PTName = Replace(PTName, "{", "_")
PTName = Replace(PTName, "}", "_")
PTName = Replace(PTName, "<", "_")
PTName = Replace(PTName, ">", "_")
LeftPinCnt = 0
RightPinCnt = 0
TopPinCnt = 0
BotPinCnt = 0
LeftPinLen = 0
RightPinLen = 0
TopPinLen = 0
BotPinLen = 0
GateCnt = 0
NoOfGates = 1

'Determine Gate Count
r = 2
PrevGate = Sheets("Template").Cells(r, 1).Value
CurrGate = Sheets("Template").Cells(r, 1).Value
While CurrGate <> vbNullString
    If CurrGate <> PrevGate Then NoOfGates = NoOfGates + 1
    PrevGate = CurrGate
    r = r + 1
    CurrGate = Sheets("Template").Cells(r, 1).Value
Wend

r = 2
PrevGate = Sheets("Template").Cells(r, 1).Value

startRow = 2
CurrGate = Sheets("Template").Cells(r, 1).Value
While PrevGate <> vbNullString
    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(r, 1).Value
    
    If CurrGate = PrevGate Then
        If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then
            LeftPinCnt = LeftPinCnt + 1
            If LeftPinLen < Len(Sheets("Template").Cells(r, 3)) Then LeftPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then
            RightPinCnt = RightPinCnt + 1
            If RightPinLen < Len(Sheets("Template").Cells(r, 3)) Then RightPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then
            TopPinCnt = TopPinCnt + 1
            If TopPinLen < Len(Sheets("Template").Cells(r, 3)) Then TopPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then
            BotPinCnt = BotPinCnt + 1
            If BotPinLen < Len(Sheets("Template").Cells(r, 3)) Then BotPinLen = Len(Sheets("Template").Cells(r, 3))
        End If
    Else
        
        GateCnt = GateCnt + 1
        If NoOfGates <> 1 Then
            SYMname = BaseName & "-" & Num2Lett(GateCnt)
        Else
            SYMname = BaseName
        End If
        SymbolFile = filePath & SYMname & ".csa"

        
        Open SymbolFile For Output As #1
        'Control Statements
Print #1, "(CADSTARSCM"
Print #1, " (HEADER"
Print #1, "  (FORMAT SYMBOL 2 16)"
Print #1, "  (JOBFILE " & Chr(34) & "" & Chr(34) & ")"
Print #1, "  (JOBTITLE " & Chr(34) & "" & Chr(34) & ")"
Print #1, "  (GENERATOR " & Chr(34) & "" & Chr(34) & ")"
Print #1, "  (RESOLUTION(METRIC HUNDREDTH MICRON))"
Print #1, "  (TIMESTAMP " & Format(Now(), "yyyy m d h m s") & ")"
Print #1, " )"
Print #1, " (ASSIGNMENTS"
Print #1, "  (CODEDEFS"
Print #1, "   (LINECODE LC1 " & Chr(34) & "Symbol Outline" & Chr(34) & " 10160"
Print #1, "    (STYLE SOLID)"
Print #1, "   )"
Print #1, "   (LINECODE LC2 " & Chr(34) & "Symbol Terminal" & Chr(34) & " 10160"
Print #1, "    (STYLE SOLID)"
Print #1, "   )"
Print #1, "   (TEXTCODE TC0 " & Chr(34) & "(Pin Name/Number)" & Chr(34) & " 15240 152400 152400)"
Print #1, "   (TEXTCODE TC5 " & Chr(34) & "Text Size 60/43/6" & Chr(34) & " 15240 152400 109220)"
Print #1, "   (TEXTCODE TC8 " & Chr(34) & "Symbol Name" & Chr(34) & " 10000 200000 0"
Print #1, "    (FONT " & Chr(34) & "Arial" & Chr(34) & " 400 0)"
Print #1, "   )"
Print #1, "   (TERMINALCODE TC0 " & Chr(34) & "Terminal" & Chr(34) & ""
Print #1, "    (CROSS 127000 0)"
Print #1, "   )"
Print #1, "   (ATTRNAME AT0 " & Chr(34) & "pcb_zone" & Chr(34) & ""
Print #1, "    (ATTROWNER ALL_ITEMS)"
Print #1, "   )"
Print #1, "   (ATTRNAME AT1 " & Chr(34) & "tolerance" & Chr(34) & ""
Print #1, "    (ATTROWNER ALL_ITEMS)"
Print #1, "   )"
Print #1, "   (ATTRNAME AT2 " & Chr(34) & "voltage" & Chr(34) & ""
Print #1, "    (ATTROWNER ALL_ITEMS)"
Print #1, "   )"
Print #1, "   (ATTRNAME AT3 " & Chr(34) & "wattage" & Chr(34) & ""
Print #1, "    (ATTROWNER ALL_ITEMS)"
Print #1, "   )"
Print #1, "   (ATTRNAME AT4 " & Chr(34) & "Value" & Chr(34) & ""
Print #1, "    (ATTROWNER ALL_ITEMS)"
Print #1, "   )"
Print #1, "   (ATTRNAME AT5 " & Chr(34) & "sim_model" & Chr(34) & ""
Print #1, "    (ATTROWNER ALL_ITEMS)"
Print #1, "   )"
Print #1, "   (ATTRNAME AT6 " & Chr(34) & "Description" & Chr(34) & ""
Print #1, "    (ATTROWNER SYMBOL)"
Print #1, "   )"
Print #1, "  )"
Print #1, "  (GRIDS"
Print #1, "   (WORKINGGRID"
Print #1, "    (STEPGRID " & Chr(34) & "" & Chr(34) & " 50800 50800)"
Print #1, "   )"
Print #1, "   (SCREENGRID"
Print #1, "    (STEPGRID " & Chr(34) & "(Screen Grid)" & Chr(34) & " 254000 254000)"
Print #1, "   )"
Print #1, "  )"
Print #1, "  (SETTINGS"
Print #1, "   (UNITS THOU)"
Print #1, "   (UNITSPRECISION 1)"
Print #1, "   (INTERLINEGAP 0)"
Print #1, "   (BARLINEGAP 0)"
Print #1, "   (ALLOWBARTEXT)"
Print #1, "   (DESIGNORIGIN (PT 0 0))"
Print #1, "   (DESIGNAREA (PT 0 0) (PT 100000000 100000000))"
Print #1, "   (DESIGNLIMIT (PT 100000000 100000000))"
Print #1, "   (ANGULARPRECISION 1)"
Print #1, "  )"
Print #1, " )"
Print #1, " (DEFAULTS"
Print #1, "  (DFLTSHAPETYPE OUTLINE)"
Print #1, "  (OUTLDFLTS LC1"
Print #1, "   (CLEAR)"
Print #1, "  )"
Print #1, "  (TEXTDFLTS TC5)"
Print #1, "  (ORIGINDFLTS TC8)"
Print #1, "  (ATTRDFLTS TC8)"
Print #1, "  (PINNOOFFSET 50800)"
Print #1, "  (PINNOANGLE 0)"
Print #1, " )"
Print #1, " (LIBRARY"

        
If Sheets("Setup").Cells(110, 2) = "None (Box)" Then
        
        If LeftPinCnt <> 0 Then
            OriginPin = "Left"
        ElseIf TopPinCnt <> 0 Then
            OriginPin = "Top"
        ElseIf RightPinCnt <> 0 Then
            OriginPin = "Right"
        ElseIf BotPinCnt <> 0 Then
            OriginPin = "Bottom"
        End If
        
        If LeftPinCnt > RightPinCnt Then
            PinCntLR = LeftPinCnt
        Else
            PinCntLR = RightPinCnt
        End If
        
        If TopPinCnt = 0 Then
            TopOffset = PinPitch
        Else
            TopOffset = RoundToNearest((TopPinLen * 50) + 200, 100)
        End If
        
        If BotPinCnt = 0 Then
            BotOffset = PinPitch
        Else
            BotOffset = RoundToNearest((BotPinLen * 50) + 200, 100)
        End If
    
        BoxHeightTB = TopOffset + BotOffset
        
        If PinCntLR = 0 Then
            BoxHeightLR = 0
        Else
            BoxHeightLR = ((PinCntLR - 1) * PinPitch)
        End If
        
        BoxHeight = RoundToNearest(BoxHeightLR + BoxHeightTB, 100)

        If TopPinCnt > BotPinCnt Then
            PinCntTB = TopPinCnt
        Else
            PinCntTB = BotPinCnt
        End If
        
        If LeftPinLen + RightPinLen = 0 Then
            BoxWidthLR = 0
        Else
            BoxWidthLR = RoundToNearest(((LeftPinLen + RightPinLen) * 50) + 200, 100)
        End If
        
        BoxWidthTB = RoundToNearest((PinCntTB * PinPitch) + PinPitch, 100)
        
        If BoxWidthLR > BoxWidthTB Then
            If PinCntTB Mod 2 Then
                BoxWidth = RoundToNearest(BoxWidthLR, 200)
            Else
                BoxWidth = RoundToNearest(BoxWidthLR, 100)
            End If
        Else
            If PinCntTB Mod 2 Then
                BoxWidth = RoundToNearest(BoxWidthTB, 200)
            Else
                BoxWidth = RoundToNearest(BoxWidthTB, 100)
            End If
        End If
        
        PinCnt = LeftPinCnt + RightPinCnt + TopPinCnt + BotPinCnt
        
        If OriginPin = "Left" Then
            OffsetX = PinLength
            OffsetY = TopOffset
        ElseIf OriginPin = "Top" Then
            If TopPinCnt > BotPinCnt Then
                OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
            Else
                OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
            End If
            OffsetY = -(PinLength)
        ElseIf OriginPin = "Right" Then
            OffsetX = -PinLength - BoxWidth
            OffsetY = TopOffset
        ElseIf OriginPin = "Bottom" Then
            If BotPinCnt > TopPinCnt Then
                OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
            Else
                OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
            End If
            OffsetY = PinLength + BoxHeight
        End If

        'Header
        
        StartX = ((2 * BoxWidth) + (2 * PinLength)) * 2540
        StartY = ((2 * BoxHeight) + (2 * PinLength)) * 2540
        
        If RightPinCnt = 0 Then
            PTX = StartX + ((OffsetX + BoxWidth + 50) * 2540)
            PTY = StartY + ((OffsetY - (BoxHeight / 2) - 50) * 2540)
        Else
            PTX = StartX + ((OffsetX + BoxWidth + 50) * 2540)
            PTY = StartY + ((OffsetY - BoxHeight - 50) * 2540)
        End If
                      
        FigNo = 0
        
        'Pin Graphics
        'Left Pins
        For lt = 1 To LeftPinCnt
            If FigNo = 0 Then
                Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT " & StartX & " " & StartY + ((-(lt - 1) * PinPitch) * 2540) & ")"
                Print #1, "   (VERSION 1)"
            End If
            Print #1, "   (FIGURE FIG" & FigNo & " LC2 NO_SHEET"
            Print #1, "    (OPENSHAPE (PT " & StartX & " " & StartY + ((-(lt - 1) * PinPitch) * 2540) & ") (PT " & StartX + (PinLength * 2540) & " " & StartY + ((-(lt - 1) * PinPitch) * 2540) & "))"
            Print #1, "   )"
            FigNo = FigNo + 1
        Next lt
                
        'Right Pins
        If OriginPin = "Right" Then
            For rt = 1 To RightPinCnt
                If FigNo = 0 Then
                    Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT " & StartX & " " & StartY + ((-(rt - 1) * PinPitch) * 2540) & ")"
                    Print #1, "   (VERSION 1)"
                End If
                Print #1, "   (FIGURE FIG" & FigNo & " LC2 NO_SHEET"
                Print #1, "    (OPENSHAPE (PT " & StartX & " " & StartY + ((-(rt - 1) * PinPitch) * 2540) & ") (PT " & StartX - (PinLength * 2540) & " " & StartY + ((-(rt - 1) * PinPitch) * 2540) & "))"
                Print #1, "   )"
                FigNo = FigNo + 1
            Next rt
        ElseIf OriginPin = "Left" Then
            For rt = 1 To RightPinCnt
                If FigNo = 0 Then
                    Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT " & StartX + (((PinLength * 2) + BoxWidth) * 2540) & " " & StartY + ((-(rt - 1) * PinPitch) * 2540) & ")"
                    Print #1, "   (VERSION 1)"
                End If
                Print #1, "   (FIGURE FIG" & FigNo & " LC2 NO_SHEET"
                Print #1, "    (OPENSHAPE (PT " & StartX + (((PinLength * 2) + BoxWidth) * 2540) & " " & StartY + ((-(rt - 1) * PinPitch) * 2540) & ") (PT " & (StartX + (((PinLength * 2) + BoxWidth) * 2540)) - (PinLength * 2540) & " " & StartY + ((-(rt - 1) * PinPitch) * 2540) & "))"
                Print #1, "   )"
                FigNo = FigNo + 1
            Next rt
        ElseIf OriginPin = "Top" Then
            For rt = 1 To RightPinCnt
                If FigNo = 0 Then
                    Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT " & StartX + ((BoxWidth + OffsetX + PinLength) * 2540) & " " & StartY + ((-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 2540) & ")"
                    Print #1, "   (VERSION 1)"
                End If
                Print #1, "   (FIGURE FIG" & FigNo & " LC2 NO_SHEET"
                Print #1, "    (OPENSHAPE (PT " & StartX + ((BoxWidth + OffsetX + PinLength) * 2540) & " " & StartY + ((-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 2540) & ") (PT " & (StartX + ((BoxWidth + OffsetX + PinLength) * 2540)) - (PinLength * 2540) & " " & StartY + ((-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 2540) & "))"
                Print #1, "   )"
                FigNo = FigNo + 1
            Next rt
        End If
        
        'Top Pins
        If OriginPin = "Top" Then
            For tt = 1 To TopPinCnt
                If FigNo = 0 Then
                    Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT " & StartX + ((RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY & ")"
                    Print #1, "   (VERSION 1)"
                End If
                Print #1, "   (FIGURE FIG" & FigNo & " LC2 NO_SHEET"
                Print #1, "    (OPENSHAPE (PT " & StartX + ((RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY & ") (PT " & StartX + ((RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY - (PinLength * 2540) & "))"
                Print #1, "   )"
                FigNo = FigNo + 1
            Next tt
        ElseIf OriginPin = "Left" Then
            For tt = 1 To TopPinCnt
                If FigNo = 0 Then
                    Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT " & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((OffsetY + PinLength) * 2540) & ")"
                    Print #1, "   (VERSION 1)"
                End If
                Print #1, "   (FIGURE FIG" & FigNo & " LC2 NO_SHEET"
                Print #1, "    (OPENSHAPE (PT " & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((OffsetY + PinLength) * 2540) & ") (PT " & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 2540) & " " & (StartY + ((OffsetY + PinLength) * 2540)) - (PinLength * 2540) & "))"
                Print #1, "   )"
                FigNo = FigNo + 1
            Next tt
        End If
        
        'Bottom Pins
        If OriginPin = "Bottom" Then
            For bt = 1 To BotPinCnt
                If FigNo = 0 Then
                    Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT " & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY & ")"
                    Print #1, "   (VERSION 1)"
                End If
                Print #1, "   (FIGURE FIG" & FigNo & " LC2 NO_SHEET"
                Print #1, "    (OPENSHAPE (PT " & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY & ") (PT " & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY + (PinLength * 2540) & "))"
                Print #1, "   )"
                FigNo = FigNo + 1
            Next bt
         ElseIf OriginPin = "Left" Then
            For bt = 1 To BotPinCnt
                If FigNo = 0 Then
                    Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT " & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540) & ")"
                    Print #1, "   (VERSION 1)"
                End If
                Print #1, "   (FIGURE FIG" & FigNo & " LC2 NO_SHEET"
                Print #1, "    (OPENSHAPE (PT " & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540) & ") (PT " & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 2540) & " " & (StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540)) + (PinLength * 2540) & "))"
                Print #1, "   )"
                FigNo = FigNo + 1
            Next bt
         ElseIf OriginPin = "Right" Then
            For bt = 1 To BotPinCnt
                If FigNo = 0 Then
                    Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT " & StartX + ((RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540) & ")"
                    Print #1, "   (VERSION 1)"
                End If
                Print #1, "   (FIGURE FIG" & FigNo & " LC2 NO_SHEET"
                Print #1, "    (OPENSHAPE (PT " & StartX + ((RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540) & ") (PT " & StartX + ((RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 2540) & " " & (StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540)) + (PinLength * 2540) & "))"
                Print #1, "   )"
                FigNo = FigNo + 1
            Next bt
         ElseIf OriginPin = "Top" Then
            For bt = 1 To BotPinCnt
                If FigNo = 0 Then
                    Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT " & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY + ((-BoxHeight - (2 * PinLength)) * 2540) & ")"
                    Print #1, "   (VERSION 1)"
                End If
                Print #1, "   (FIGURE FIG" & FigNo & " LC2 NO_SHEET"
                Print #1, "    (OPENSHAPE (PT " & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY + ((-BoxHeight - (2 * PinLength)) * 2540) & ") (PT " & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540) & " " & (StartY + ((-BoxHeight - (2 * PinLength)) * 2540)) + (PinLength * 2540) & "))"
                Print #1, "   )"
                FigNo = FigNo + 1
            Next bt
        End If
        
'Box Graphic
            Print #1, "   (FIGURE FIG" & FigNo & " LC1 NO_SHEET"
            Print #1, "    (OUTLINE (PT " & StartX + (OffsetX * 2540) & " " & StartY + (OffsetY * 2540) & ") (PT " & StartX + ((OffsetX + BoxWidth) * 2540) & " " & StartY + (OffsetY * 2540) & ") (PT " & StartX + ((OffsetX + BoxWidth) * 2540) & " " & StartY + ((OffsetY - BoxHeight) * 2540) & ") (PT " & StartX + (OffsetX * 2540) & " " & StartY + ((OffsetY - BoxHeight) * 2540) & ") (PT " & StartX + (OffsetX * 2540) & " " & StartY + (OffsetY * 2540) & "))"
            Print #1, "   )"
            
 'Terminal X's
 TermNo = 1
        'Left Pins
        For lt = 1 To LeftPinCnt
            Print #1, "    (TERMINAL " & TermNo & " TC0 (PT " & StartX & " " & StartY + ((-(lt - 1) * PinPitch) * 2540) & "))"
            TermNo = TermNo + 1
        Next lt
                
        'Right Pins
        If OriginPin = "Right" Then
            For rt = 1 To RightPinCnt
                Print #1, "    (TERMINAL " & TermNo & " TC0 (PT " & StartX & " " & StartY + ((-(rt - 1) * PinPitch) * 2540) & "))"
                TermNo = TermNo + 1
            Next rt
        ElseIf OriginPin = "Left" Then
            For rt = 1 To RightPinCnt
                Print #1, "    (TERMINAL " & TermNo & " TC0 (PT " & StartX + (((PinLength * 2) + BoxWidth) * 2540) & " " & StartY + ((-(rt - 1) * PinPitch) * 2540) & "))"
                TermNo = TermNo + 1
            Next rt
        ElseIf OriginPin = "Top" Then
            For rt = 1 To RightPinCnt
                Print #1, "    (TERMINAL " & TermNo & " TC0 (PT " & StartX + ((BoxWidth + OffsetX + PinLength) * 2540) & " " & StartY + ((-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 2540) & "))"
                TermNo = TermNo + 1
            Next rt
        End If
        
        'Top Pins
        If OriginPin = "Top" Then
            For tt = 1 To TopPinCnt
                Print #1, "    (TERMINAL " & TermNo & " TC0 (PT " & StartX + ((RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY & "))"
                TermNo = TermNo + 1
            Next tt
        ElseIf OriginPin = "Left" Then
            For tt = 1 To TopPinCnt
                Print #1, "    (TERMINAL " & TermNo & " TC0 (PT " & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((OffsetY + PinLength) * 2540) & "))"
                TermNo = TermNo + 1
            Next tt
        End If
        
        'Bottom Pins
        If OriginPin = "Bottom" Then
            For bt = 1 To BotPinCnt
                Print #1, "    (TERMINAL " & TermNo & " TC0 (PT " & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY & "))"
                TermNo = TermNo + 1
            Next bt
         ElseIf OriginPin = "Left" Then
            For bt = 1 To BotPinCnt
                Print #1, "    (TERMINAL " & TermNo & " TC0 (PT " & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540) & "))"
                TermNo = TermNo + 1
            Next bt
         ElseIf OriginPin = "Right" Then
            For bt = 1 To BotPinCnt
                Print #1, "    (TERMINAL " & TermNo & " TC0 (PT " & StartX + ((RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540) & "))"
                TermNo = TermNo + 1
            Next bt
         ElseIf OriginPin = "Top" Then
            For bt = 1 To BotPinCnt
                Print #1, "    (TERMINAL " & TermNo & " TC0 (PT " & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY + ((-BoxHeight - (2 * PinLength)) * 2540) & "))"
                TermNo = TermNo + 1
            Next bt
        End If
            
'Ref Des
        If TopPinCnt = 0 Then
            PTX = StartX + ((OffsetX + (BoxWidth / 2)) * 2540)
            PTY = StartY + ((OffsetY + 50) * 2540)
            Alignment = "     (ALIGN BOTTOMCENTER)"
        ElseIf RightPinCnt = 0 Then
            PTX = StartX + ((OffsetX + BoxWidth + 50) * 2540)
            PTY = StartY + ((OffsetY - (BoxHeight / 2) + 50) * 2540)
            Alignment = "     (ALIGN BOTTOMLEFT)"
        Else
            PTX = StartX + ((OffsetX + BoxWidth + 50) * 2540)
            PTY = StartY + ((OffsetY + 50) * 2540)
            Alignment = "     (ALIGN BOTTOMLEFT)"
        End If
        
        Print #1, "    (TEXTLOC SYMBOL_NAME TC8 (PT " & PTX & " " & PTY & ")"
        Print #1, Alignment
        Print #1, "    )"

'Pin Labels
 LblNo = 1
        'Left Pins
        For lt = 1 To LeftPinCnt
            Print #1, "    (PINLABELLOC " & LblNo & " TC8 (PT " & StartX + (PinLength * 2540) + 50800 & " " & StartY + ((-(lt - 1) * PinPitch) * 2540) & ")"
            Print #1, "     (ALIGN CENTERLEFT)"
            Print #1, "    )"
            LblNo = LblNo + 1
        Next lt
                
        'Right Pins
        If OriginPin = "Right" Then
            For rt = 1 To RightPinCnt
                Print #1, "    (PINLABELLOC " & LblNo & " TC8 (PT " & StartX - (PinLength * 2540) - 50800 & " " & StartY + ((-(rt - 1) * PinPitch) * 2540) & ")"
                Print #1, "     (ALIGN CENTERRIGHT)"
                Print #1, "    )"
                LblNo = LblNo + 1
            Next rt
        ElseIf OriginPin = "Left" Then
            For rt = 1 To RightPinCnt
                Print #1, "    (PINLABELLOC " & LblNo & " TC8 (PT " & StartX + (((PinLength * 2) + BoxWidth) * 2540) - (PinLength * 2540) - 50800 & " " & StartY + ((-(rt - 1) * PinPitch) * 2540) & ")"
                Print #1, "     (ALIGN CENTERRIGHT)"
                Print #1, "    )"
                LblNo = LblNo + 1
            Next rt
        ElseIf OriginPin = "Top" Then
            For rt = 1 To RightPinCnt
                Print #1, "    (PINLABELLOC " & LblNo & " TC8 (PT " & StartX + ((BoxWidth + OffsetX + PinLength) * 2540) - (PinLength * 2540) - 50800 & " " & StartY + ((-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 2540) & ")"
                Print #1, "     (ALIGN CENTERRIGHT)"
                Print #1, "    )"
                LblNo = LblNo + 1
            Next rt
        End If
        
        'Top Pins
        If OriginPin = "Top" Then
            For tt = 1 To TopPinCnt
                Print #1, "    (PINLABELLOC " & LblNo & " TC8 (PT " & StartX + ((RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY - (PinLength * 2540) - 50800 & ")"
                Print #1, "     (ORIENT 90000)"
                Print #1, "     (ALIGN CENTERRIGHT)"
                Print #1, "    )"
                LblNo = LblNo + 1
            Next tt
        ElseIf OriginPin = "Left" Then
            For tt = 1 To TopPinCnt
                Print #1, "    (PINLABELLOC " & LblNo & " TC8 (PT " & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((OffsetY + PinLength) * 2540) - (PinLength * 2540) - 50800 & ")"
                Print #1, "     (ORIENT 90000)"
                Print #1, "     (ALIGN CENTERRIGHT)"
                Print #1, "    )"
                LblNo = LblNo + 1
            Next tt
        End If
        
        'Bottom Pins
        If OriginPin = "Bottom" Then
            For bt = 1 To BotPinCnt
                Print #1, "    (PINLABELLOC " & LblNo & " TC8 (PT " & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY + (PinLength * 2540) + 50800 & ")"
                Print #1, "     (ORIENT 90000)"
                Print #1, "     (ALIGN CENTERLEFT)"
                Print #1, "    )"
                LblNo = LblNo + 1
            Next bt
         ElseIf OriginPin = "Left" Then
            For bt = 1 To BotPinCnt
                Print #1, "    (PINLABELLOC " & LblNo & " TC8 (PT " & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540) + (PinLength * 2540) + 50800 & ")"
                Print #1, "     (ORIENT 90000)"
                Print #1, "     (ALIGN CENTERLEFT)"
                Print #1, "    )"
                LblNo = LblNo + 1
            Next bt
         ElseIf OriginPin = "Right" Then
            For bt = 1 To BotPinCnt
                Print #1, "    (PINLABELLOC " & LblNo & " TC8 (PT " & StartX + ((RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540) + (PinLength * 2540) + 50800 & ")"
                Print #1, "     (ORIENT 90000)"
                Print #1, "     (ALIGN CENTERLEFT)"
                Print #1, "    )"
                LblNo = LblNo + 1
            Next bt
         ElseIf OriginPin = "Top" Then
            For bt = 1 To BotPinCnt
                Print #1, "    (PINLABELLOC " & LblNo & " TC8 (PT " & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY + ((-BoxHeight - (2 * PinLength)) * 2540) + (PinLength * 2540) + 50800 & ")"
                Print #1, "     (ORIENT 90000)"
                Print #1, "     (ALIGN CENTERLEFT)"
                Print #1, "    )"
                LblNo = LblNo + 1
            Next bt
        End If
        
'Pin Numbers

 NumNo = 1
        'Left Pins
        For lt = 1 To LeftPinCnt
            Print #1, "    (PINNUMNAMELOC " & NumNo & " TC8 (PT " & StartX + (PinLength * 2540) - 50800 & " " & StartY + ((-(lt - 1) * PinPitch) * 2540) & ")"
            Print #1, "     (ALIGN BOTTOMRIGHT)"
            Print #1, "    )"
            NumNo = NumNo + 1
        Next lt
                
        'Right Pins
        If OriginPin = "Right" Then
            For rt = 1 To RightPinCnt
                Print #1, "    (PINNUMNAMELOC " & NumNo & " TC8 (PT " & StartX - (PinLength * 2540) + 50800 & " " & StartY + ((-(rt - 1) * PinPitch) * 2540) & ")"
                Print #1, "     (ALIGN BOTTOMLEFT)"
                Print #1, "    )"
                NumNo = NumNo + 1
            Next rt
        ElseIf OriginPin = "Left" Then
            For rt = 1 To RightPinCnt
                Print #1, "    (PINNUMNAMELOC " & NumNo & " TC8 (PT " & StartX + (((PinLength * 2) + BoxWidth) * 2540) - (PinLength * 2540) + 50800 & " " & StartY + ((-(rt - 1) * PinPitch) * 2540) & ")"
                Print #1, "     (ALIGN BOTTOMLEFT)"
                Print #1, "    )"
                NumNo = NumNo + 1
            Next rt
        ElseIf OriginPin = "Top" Then
            For rt = 1 To RightPinCnt
                Print #1, "    (PINNUMNAMELOC " & NumNo & " TC8 (PT " & StartX + ((BoxWidth + OffsetX + PinLength) * 2540) - (PinLength * 2540) + 50800 & " " & StartY + ((-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 2540) & ")"
                Print #1, "     (ALIGN BOTTOMLEFT)"
                Print #1, "    )"
                NumNo = NumNo + 1
            Next rt
        End If
        
        'Top Pins
        If OriginPin = "Top" Then
            For tt = 1 To TopPinCnt
                Print #1, "    (PINNUMNAMELOC " & NumNo & " TC8 (PT " & StartX + ((RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY - (PinLength * 2540) + 50800 & ")"
                Print #1, "     (ORIENT 90000)"
                Print #1, "     (ALIGN BOTTOMLEFT)"
                Print #1, "    )"
                NumNo = NumNo + 1
            Next tt
        ElseIf OriginPin = "Left" Then
            For tt = 1 To TopPinCnt
                Print #1, "    (PINNUMNAMELOC " & NumNo & " TC8 (PT " & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((OffsetY + PinLength) * 2540) - (PinLength * 2540) + 50800 & ")"
                Print #1, "     (ORIENT 90000)"
                Print #1, "     (ALIGN BOTTOMLEFT)"
                Print #1, "    )"
                NumNo = NumNo + 1
            Next tt
        End If
        
        'Bottom Pins
        If OriginPin = "Bottom" Then
            For bt = 1 To BotPinCnt
                Print #1, "    (PINNUMNAMELOC " & NumNo & " TC8 (PT " & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY + (PinLength * 2540) - 50800 & ")"
                Print #1, "     (ORIENT 90000)"
                Print #1, "     (ALIGN BOTTOMRIGHT)"
                Print #1, "    )"
                NumNo = NumNo + 1
            Next bt
         ElseIf OriginPin = "Left" Then
            For bt = 1 To BotPinCnt
                Print #1, "    (PINNUMNAMELOC " & NumNo & " TC8 (PT " & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540) + (PinLength * 2540) - 50800 & ")"
                Print #1, "     (ORIENT 90000)"
                Print #1, "     (ALIGN BOTTOMRIGHT)"
                Print #1, "    )"
                NumNo = NumNo + 1
            Next bt
         ElseIf OriginPin = "Right" Then
            For bt = 1 To BotPinCnt
                Print #1, "    (PINNUMNAMELOC " & NumNo & " TC8 (PT " & StartX + ((RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 2540) & " " & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540) + (PinLength * 2540) - 50800 & ")"
                Print #1, "     (ORIENT 90000)"
                Print #1, "     (ALIGN BOTTOMRIGHT)"
                Print #1, "    )"
                NumNo = NumNo + 1
            Next bt
         ElseIf OriginPin = "Top" Then
            For bt = 1 To BotPinCnt
                Print #1, "    (PINNUMNAMELOC " & NumNo & " TC8 (PT " & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540) & " " & StartY + ((-BoxHeight - (2 * PinLength)) * 2540) + (PinLength * 2540) - 50800 & ")"
                Print #1, "     (ORIENT 90000)"
                Print #1, "     (ALIGN BOTTOMRIGHT)"
                Print #1, "    )"
                NumNo = NumNo + 1
            Next bt
        End If

ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Non-Polarised)" Then

        Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT 2540000 2032000)"
        Print #1, "   (VERSION 1)"

        Print #1, "   (FIGURE FIG0 LC2 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 2540000 2032000) (PT 3098800 2032000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG1 LC1 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 3098800 2286000) (PT 3098800 1778000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG2 LC1 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 3251200 1778000) (PT 3251200 2286000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG3 LC2 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 3810000 2032000) (PT 3251200 2032000))"
        Print #1, "   )"
        Print #1, "   (TERMINAL 1 TC0 (PT 2540000 2032000))"
        Print #1, "   (TERMINAL 2 TC0 (PT 3810000 2032000))"
        Print #1, "   (TEXTLOC SYMBOL_NAME TC8 (PT 3175000 2413000)"
        Print #1, "    (ALIGN BOTTOMCENTER)"
        Print #1, "   )"
        Print #1, "   (PINNUMNAMELOC 2 TC8 (PT 3302000 2032000)"
        Print #1, "    (ALIGN BOTTOMLEFT)"
        Print #1, "   )"
        Print #1, "   (PINNUMNAMELOC 1 TC8 (PT 3022600 2032000)"
        Print #1, "    (ALIGN BOTTOMRIGHT)"
        Print #1, "   )"


ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Polarised)" Then

        Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT 2540000 2032000)"
        Print #1, "   (VERSION 1)"
        
        Print #1, "   (FIGURE FIG0 LC2 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 2946400 2209800) (PT 2946400 2108200))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG1 LC1 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 2997200 2159000) (PT 2895600 2159000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG2 LC1 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 2540000 2032000) (PT 3048000 2032000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG3 LC1 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 3048000 1778000) (PT 3124200 1778000) (PT 3124200 2286000) (PT 3048000 2286000) (PT 3048000 1778000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG4 LC2 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 3810000 2032000) (PT 3302000 2032000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG5 LC1 NO_SHEET"
        Print #1, "    (SOLID (PT 3225800 1778000) (PT 3302000 1778000) (PT 3302000 2286000) (PT 3225800 2286000) (PT 3225800 1778000))"
        Print #1, "   )"
        Print #1, "   (TERMINAL 1 TC0 (PT 2540000 2032000))"
        Print #1, "   (TERMINAL 2 TC0 (PT 3810000 2032000))"
        Print #1, "   (TEXTLOC SYMBOL_NAME TC8 (PT 3175000 2413000)"
        Print #1, "    (ALIGN BOTTOMCENTER)"
        Print #1, "   )"
        Print #1, "   (PINNUMNAMELOC 2 TC8 (PT 3352800 2032000)"
        Print #1, "    (ALIGN BOTTOMLEFT)"
        Print #1, "   )"
        Print #1, "   (PINNUMNAMELOC 1 TC8 (PT 2971800 2032000)"
        Print #1, "    (ALIGN BOTTOMRIGHT)"
        Print #1, "   )"

ElseIf Sheets("Setup").Cells(110, 2) = "Inductor" Then

        Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT 2540000 2032000)"
        Print #1, "   (VERSION 1)"

        Print #1, "   (FIGURE FIG0 LC1 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 3810000 2032000)"
        Print #1, "     (CWARC (PT 3937000 2032000) (PT 4064000 2032000))"
        Print #1, "    )"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG1 LC1 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 3048000 2032000)"
        Print #1, "     (CWARC (PT 3175000 2032000) (PT 3302000 2032000))"
        Print #1, "    )"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG2 LC1 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 3302000 2032000)"
        Print #1, "     (CWARC (PT 3429000 2032000) (PT 3556000 2032000))"
        Print #1, "    )"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG3 LC1 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 3556000 2032000)"
        Print #1, "     (CWARC (PT 3683000 2032000) (PT 3810000 2032000))"
        Print #1, "    )"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG4 LC2 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 2540000 2032000) (PT 3048000 2032000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG5 LC2 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 4572000 2032000) (PT 4064000 2032000))"
        Print #1, "   )"
        Print #1, "   (TERMINAL 1 TC0 (PT 2540000 2032000))"
        Print #1, "   (TERMINAL 2 TC0 (PT 4572000 2032000))"
        Print #1, "   (TEXTLOC SYMBOL_NAME TC8 (PT 3556000 2413000)"
        Print #1, "    (ALIGN CENTERCENTER)"
        Print #1, "   )"
        Print #1, "   (PINNUMNAMELOC 2 TC8 (PT 4114800 2032000)"
        Print #1, "    (ALIGN BOTTOMLEFT)"
        Print #1, "   )"
        Print #1, "   (PINNUMNAMELOC 1 TC8 (PT 2971800 2032000)"
        Print #1, "    (ALIGN BOTTOMRIGHT)"
        Print #1, "   )"


ElseIf Sheets("Setup").Cells(110, 2) = "Resistor" Then

        Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT 2540000 2032000)"
        Print #1, "   (VERSION 1)"

        Print #1, "   (FIGURE FIG0 LC2 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 2540000 2032000) (PT 3048000 2032000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG1 LC1 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 3048000 1905000) (PT 3810000 1905000) (PT 3810000 2159000) (PT 3048000 2159000) (PT 3048000 1905000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG2 LC2 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 4318000 2032000) (PT 3810000 2032000))"
        Print #1, "   )"
        Print #1, "   (TERMINAL 1 TC0 (PT 2540000 2032000))"
        Print #1, "   (TERMINAL 2 TC0 (PT 4318000 2032000))"
        Print #1, "   (TEXTLOC SYMBOL_NAME TC8 (PT 3429000 2413000)"
        Print #1, "    (ALIGN CENTERCENTER)"
        Print #1, "   )"
        Print #1, "   (PINNUMNAMELOC 2 TC8 (PT 3860800 2082800)"
        Print #1, "    (ALIGN BOTTOMLEFT)"
        Print #1, "   )"
        Print #1, "   (PINNUMNAMELOC 1 TC8 (PT 2971800 2032000)"
        Print #1, "    (ALIGN BOTTOMRIGHT)"
        Print #1, "   )"
        
ElseIf Sheets("Setup").Cells(110, 2) = "Diode" Then

        Print #1, "  (SYMDEF L0 " & Chr(34) & SYMname & Chr(34) & " " & Chr(34) & "" & Chr(34) & " (PT 2540000 2032000)"
        Print #1, "   (VERSION 1)"

        Print #1, "   (FIGURE FIG0 LC2 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 2540000 2032000) (PT 3048000 2032000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG1 LC1 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 3048000 2286000) (PT 3048000 1778000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG2 LC1 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 3048000 2032000) (PT 3556000 2286000) (PT 3556000 1778000) (PT 3048000 2032000))"
        Print #1, "   )"
        Print #1, "   (FIGURE FIG3 LC2 NO_SHEET"
        Print #1, "    (OPENSHAPE (PT 4064000 2032000) (PT 3556000 2032000))"
        Print #1, "   )"
        Print #1, "   (TERMINAL 1 TC0 (PT 2540000 2032000))"
        Print #1, "   (TERMINAL 2 TC0 (PT 4064000 2032000))"
        Print #1, "   (TEXTLOC SYMBOL_NAME TC8 (PT 3429000 2413000)"
        Print #1, "    (ALIGN CENTERCENTER)"
        Print #1, "   )"
        Print #1, "   (PINNUMNAMELOC 1 TC8 (PT 2971800 2032000)"
        Print #1, "    (ALIGN BOTTOMRIGHT)"
        Print #1, "   )"
        Print #1, "   (PINNUMNAMELOC 2 TC8 (PT 3632200 2032000)"
        Print #1, "    (ALIGN BOTTOMLEFT)"
        Print #1, "   )"

End If

            Print #1, "  )"
            Print #1, " )"
            Print #1, ")"
        Close #1

        LeftPinCnt = 0
        RightPinCnt = 0
        TopPinCnt = 0
        BotPinCnt = 0
        LeftPinLen = 0
        RightPinLen = 0
        
        r = r - 1
        


    End If

    PrevGate = CurrGate
    r = r + 1
    

    
Wend

'Write Part Definition

PartFile = filePath & PTName & ".lib"
Open PartFile For Output As #1

Print #1, "# FORMAT 32"
Print #1,
Print #1, "+N0 'root' &"
Print #1, "'" & PTName & "'"
Print #1,
If Worksheets("Attributes").Range("B5") <> vbNullString Then
    Print #1, "." & PTName & " :1 ;" & Worksheets("Attributes").Range("B5")
Else
    Print #1, "." & PTName & " :1"
End If
If PCBdecal = vbNullString Then
    Print #1, Chr(34) & "NULL" & Chr(34)
Else
    If IsNumeric(Left(PCBdecal, 1)) Then
        Print #1, Chr(34) & PCBdecal & Chr(34)
    Else
        Print #1, PCBdecal
    End If
End If
Print #1, "*STM " & LogFam
Print #1, "*NGS"

Row = 2
PNM = "*PNM"

If Sheets("Template").Cells(Row, 7).Value <> vbNullString Then Alphanumeric = True

If Alphanumeric Then

    While Sheets("Template").Cells(Row, 1).Value <> vbNullString
        PNM = PNM & " " & Sheets("Template").Cells(Row, 7).Value & "=" & Sheets("Template").Cells(Row, 2).Value
        If Len(PNM) > 450 And (Sheets("Template").Cells(Row + 1, 1).Value) <> vbNullString Then
            If Left(PNM, 1) = "*" Then
                Print #1, PNM & " &"
            Else
                Print #1, Mid(PNM, 2) & " &"
            End If
            PNM = vbNullString
        End If
        Row = Row + 1
    Wend
    
    If Left(PNM, 1) = "*" Then
        Print #1, PNM
    Else
        Print #1, Mid(PNM, 2)
    End If

End If

Row = 2

PLB = "*PLB"

While Sheets("Template").Cells(Row, 1).Value <> vbNullString
'Process Negated Pin Names
    pinName = Sheets("Template").Cells(Row, 3).Value
    NegFound = False
    For c = 1 To Len(pinName)
        If Mid(pinName, c, 1) = "*" Then
            NegFound = True
            pinName = Left(pinName, c - 1) & "'" & Mid(pinName, c + 1)
            c = c + 1
        ElseIf Mid(pinName, c, 1) = "/" And NegFound Then
            pinName = Left(pinName, c - 1) & "'" & Mid(pinName, c)
            NegFound = False
        End If
    Next c
    If NegFound Then pinName = pinName & "'"


    If Alphanumeric Then
        PLB = PLB & " " & Sheets("Template").Cells(Row, 7).Value & "=" & Chr(34) & pinName & Chr(34)
    Else
        PLB = PLB & " " & Sheets("Template").Cells(Row, 2).Value & "=" & Chr(34) & pinName & Chr(34)
    End If
    If Len(PLB) > 450 And (Sheets("Template").Cells(Row + 1, 1).Value) <> vbNullString Then
        If Left(PLB, 1) = "*" Then
            Print #1, PLB & " &"
        Else
            Print #1, Mid(PLB, 2) & " &"
        End If
        PLB = vbNullString
    End If
    Row = Row + 1
Wend

If Left(PLB, 1) = "*" Then
    Print #1, PLB
Else
    Print #1, Mid(PLB, 2)
End If
'Name/Pin Visibility?
'Print #1, "*NPV"
Print #1, "*MXP " & PinCntPCB
Print #1, "*DFN " & PTName

'Attributes
AttrRow = 1
While Sheets("Attributes").Cells(AttrRow, 1) <> vbNullString
'@!AttrName (AttrValue) - Symbol & Component Type
'~!AttrName (AttrValue) - Part Definition Type
    If Sheets("Attributes").Cells(AttrRow, 2) <> vbNullString And Sheets("Attributes").Cells(AttrRow, 1) <> "Description" Then
        If Sheets("Attributes").Cells(AttrRow, 1) = "Datasheet Link" Then
            Print #1, "~!Link Datasheet (" & Sheets("Attributes").Cells(AttrRow, 2) & ")"
        Else
            Print #1, "~!" & Sheets("Attributes").Cells(AttrRow, 1) & " (" & Sheets("Attributes").Cells(AttrRow, 2) & ")"
        End If
    End If
    AttrRow = AttrRow + 1
Wend

r = 2

GateNo = 1
PrevGate = Sheets("Template").Cells(r, 1).Value
CurrGate = PrevGate
Pins = vbNullString

If NoOfGates <> 1 Then
    SYMname = BaseName & "-" & Num2Lett(GateNo)
Else
    SYMname = BaseName
End If

'Debug.Print SYMname & "-" & Num2Lett(GateNo)
If IsNumeric(Left(SYMname, 1)) Then
    Print #1, Chr(34) & SYMname & Chr(34)
Else
    Print #1, SYMname
End If

While PrevGate <> vbNullString



    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(r, 1).Value
    If CurrGate = PrevGate And CurrGate <> vbNullString Then
'First Pin for Gate-A and all other pins except the first for Gate-B onwards
'        Debug.Print Sheets("Template").Cells(R, 2).Value
        If Alphanumeric Then
            Pins = Pins & " " & Sheets("Template").Cells(r, 7).Value & "."
        Else
            Pins = Pins & " " & Sheets("Template").Cells(r, 2).Value & "."
        End If
    ElseIf CurrGate <> vbNullString Then
        GateNo = GateNo + 1
'        Debug.Print SYMname & "-" & Num2Lett(GateNo)
'First Pin for Gate-B onwards
        Print #1, Mid(Pins, 2)
        If IsNumeric(Left(SYMname, 1)) Then
            Print #1, Chr(34) & BaseName & "-" & Num2Lett(GateNo) & Chr(34)
        Else
            Print #1, BaseName & "-" & Num2Lett(GateNo)
        End If
        Pins = vbNullString
        If Alphanumeric Then
            Pins = Pins & " " & Sheets("Template").Cells(r, 7).Value & "."
        Else
            Pins = Pins & " (" & Sheets("Template").Cells(r, 2).Value & ")."
        End If
'        Debug.Print Sheets("Template").Cells(R, 2).Value
    End If
    
    If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then 'Left
        Pins = Pins & "1!" & GetPinTypeCS(Sheets("Template").Cells(r, 4))
        If Len(Pins) > 450 And (CurrGate = Sheets("Template").Cells(r + 1, 1).Value) Then
            Print #1, Mid(Pins, 2) & " &"
            Pins = vbNullString
        End If
    ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then ' Right
        Pins = Pins & "1!" & GetPinTypeCS(Sheets("Template").Cells(r, 4))
        If Len(Pins) > 450 And (CurrGate = Sheets("Template").Cells(r + 1, 1).Value) Then
            Print #1, Mid(Pins, 2) & " &"
            Pins = vbNullString
        End If
    ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then ' Top
        Pins = Pins & "0!" & GetPinTypeCS(Sheets("Template").Cells(r, 4))
        If Len(Pins) > 450 And (CurrGate = Sheets("Template").Cells(r + 1, 1).Value) Then
            Print #1, Mid(Pins, 2) & " &"
            Pins = vbNullString
        End If
    ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then 'Bottom
        Pins = Pins & "0!" & GetPinTypeCS(Sheets("Template").Cells(r, 4))
        If Len(Pins) > 450 And (CurrGate = Sheets("Template").Cells(r + 1, 1).Value) Then
            Print #1, Mid(Pins, 2) & " &"
            Pins = vbNullString
        End If
    End If
            
    r = r + 1
    
Wend

'Debug.Print pins

    Print #1, Mid(Pins, 2)
'    Print #1, Mid(Pins, 2, Len(Pins) - 3)
    Print #1,
    Print #1, ".END"
    
Close #1

'Export PCB Components

'If Chk_UseExisting Then
If Right(PCBdecal, 1) = "N" Or Right(PCBdecal, 3) = "N-D" Then
    WorksheetName = "FP-N"
ElseIf Right(PCBdecal, 1) = "L" Or Right(PCBdecal, 3) = "L-D" Then
    WorksheetName = "FP-L"
ElseIf Right(PCBdecal, 1) = "M" Or Right(PCBdecal, 3) = "M-D" Then
    WorksheetName = "FP-M"
Else
    WorksheetName = "FP-N"
End If
'Else
'    WorksheetName = "PFW"
'End If

If Not Img_WarningD.Visible Then
    FootprintFile = filePath & PCBdecal & ".cpa"
    Open FootprintFile For Output As #1
    
    WriteCPA
    
    'Retrieve Padstack Information from PADS Decal ASCII to derive padStyleDefs
    PadDefLst = ","
    DecalHdrRow = 4
    DecalNo = 1
    Row = 4
    StartCol = 0
    PCNo = 0
    
    Do
    
    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
    
    'Debug.Print Worksheets(WorksheetName).Cells(Row, 1).Value
    'Retrieve number of different padstack definitions
    If Row = DecalHdrRow Then
    'SpaceIndex = SkipSpaces(DecalAscLn, 1)
    
    SpaceIndex = InStr(1, DecalAscLn, Space(1))
    
    ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
    SpaceIndex = SpaceIndex + ExtraSpaces
    
    DecalName = Left(DecalAscLn, SpaceIndex - 1 - ExtraSpaces)
    'Debug.Print DecalName
    
    If DecalNo = 1 Then
        For i = 1 To 8
        If i = 1 Then units = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
        SpaceIndex = InStr(SpaceIndex + 1, DecalAscLn, Space(1))
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
        SpaceIndex = SpaceIndex + ExtraSpaces
        If i = 7 Then NoOfPads = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
        Next i
        
        If units = "I" Then
            Multiplier = 2540
        ElseIf units = "M" Then
            Multiplier = 100000
        End If
    '    Print #1, ")"
    '    Print #1, "(library Library_1"
    Else
        StartCol = StartCol + 4
    End If
    'Debug.Print NoOfPads
    
    'Debug.Print StartCol
    ReDim Preserve PadDefs(NoOfPads, (DecalNo * 4) - 1)
    
    PadDefs(0, StartCol) = DecalName
    
    
    NoOfPadstacks = Mid(DecalAscLn, SpaceIndex + 1, Len(DecalAscLn) - (InStr(SpaceIndex + 1, DecalAscLn, Space(1))))
    'Debug.Print DecalName
    End If
    
    If Left(DecalAscLn, 1) = "T" Then
        
        FirstSpaceIndex = InStr(DecalAscLn, Space(1))
        
        If (FirstSpaceIndex = 2 And (IsNumeric(Mid(DecalAscLn, 3, 1)) Or (Mid(DecalAscLn, 3, 1) = "-"))) Or (IsNumeric(Mid(DecalAscLn, 2, 1))) Or (Mid(DecalAscLn, 2, 1) = "-") Then
            
            LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
            PinNo = Mid(DecalAscLn, LastSpaceIndex + 1)
            tCount = tCount + 1
'            If Not IsNumeric(PinNo) Then
                TempRow = 2
                
                Do While CStr(Worksheets("Template").Cells(TempRow, 2).Value) <> PinNo And CStr(Worksheets("Template").Cells(TempRow, 2).Value) <> vbNullString
                    TempRow = TempRow + 1
                Loop
                If CStr(Worksheets("Template").Cells(TempRow, 2).Value) <> vbNullString Then
                    If IsNumeric(PinNo) Then
                        PinNo = Worksheets("Template").Cells(TempRow, 7)
                    Else
                        PinNo = tCount
                    End If
                End If
'            End If
            
            If FirstSpaceIndex = 2 Then
                NextSpaceIndex = InStr(3, DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PinX = Mid(DecalAscLn, 3, NextSpaceIndex - 3)
                If PinNo = 1 Then Pin1X = PinX
            Else
                NextSpaceIndex = InStr(2, DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PinX = Mid(DecalAscLn, 2, NextSpaceIndex - ExtraSpaces - 2)
            End If
            PinY = Mid(DecalAscLn, NextSpaceIndex + 1, InStr(NextSpaceIndex + 1, DecalAscLn, Space(1)) - NextSpaceIndex - 1)
            If PinNo = 1 Then Pin1Y = PinY
    '        Debug.Print PinNo
    '        Debug.Print PinX
    '        Debug.Print PinY
            
            PadDefs(PinNo, StartCol + 1) = PinX
            PadDefs(PinNo, StartCol + 2) = PinY
            
        End If
        
    End If
    
    If Left(DecalAscLn, 3) = "PAD" Then
    'DesignSpark Pad Shapes
    'Ellipse (E)
    'Rect (R)
    
    SpaceIndex1 = InStr(1, DecalAscLn, Space(1))
    ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex1)
    SpaceIndex1 = SpaceIndex1 + ExtraSpaces
    SpaceIndex2 = InStr(SpaceIndex1 + 1, DecalAscLn, Space(1))
    ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex2)
    SpaceIndex2 = SpaceIndex2 + ExtraSpaces
    
    SpaceIndex2 = InStr(5, DecalAscLn, Space(1))
    Pad = Mid(DecalAscLn, SpaceIndex1 + 1, SpaceIndex2 - SpaceIndex1 - 1)
    'Debug.Print "Pad = " & Pad
    
    LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
    DrillSize = Mid(DecalAscLn, LastSpaceIndex + 1)
    
    If DrillSize <> 0 Then IsPTH = True
    'Debug.Print "Drill Size = " & DrillSize
    
    Row = Row + 1
    'Mounted Side (Top)
    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
    'Debug.Print DecalAscLn
    
    'Get Pad Shape
    PrevSpaceIndex = 0
    NextSpaceIndex = 0
    For i = 1 To 3
        NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
        If i = 1 Then PadLayer = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        
        If i = 2 Then PadWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        
        If i = 3 And NextSpaceIndex <> 0 Then
            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        Else
            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
        End If
    
        ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
        NextSpaceIndex = NextSpaceIndex + ExtraSpaces
        PrevSpaceIndex = NextSpaceIndex
    Next i
    
    If Shape = "R" Or Shape = "S" Then
        If Shape = "R" Then Shape = "E"
        PadHeight = PadWidth
        PadRotation = 0
    ElseIf Shape = "RF" Then
        Shape = "R"
        For i = 4 To 7
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
    '        If Chk_UseExisting Then
                If i = 5 Then
                    PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                End If
                If i = 6 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 7 And PadHeight = 0 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '        Else
    '            If i = 4 Then
    '                PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '            End If
    '            If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '        End If
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
    
        Next i
        
'        Debug.Print "PadHeight = " & PadHeight
    ElseIf Shape = "OF" Then
        Shape = "F"
        For i = 4 To 7
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
    '        If Chk_UseExisting Then
    '            If i = 5 Then
    '                PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '            End If
    '            If i = 6 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '            If i = 7 And PadHeight = 0 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '        Else
                If i = 4 Then
                    PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                End If
                If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
    '        End If
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
    
        Next i
        
'        Debug.Print "PadHeight = " & PadHeight
    End If
    
    'BuildPadDef
    PadDef = Shape & "W" & PadWidth & "L" & PadHeight & "H" & DrillSize ' & "A" & PadRotation
    If InStr(PadDefLst, "," & PadDef & ",") <> 0 Then
        SkipPadDef = True
    Else
        SkipPadDef = False
    End If
    
    If Not SkipPadDef Then
        ReDim Preserve PadCodes(PCNo)
        If Shape = "E" Then
            PadShape = "ROUND"
            Print #1, "   (PADCODE PC" & PCNo & " " & Chr(34) & PadDef & Chr(34)
            Print #1, "    (ROUND " & Round(PadWidth * Multiplier, 0) & ")"
            If DrillSize <> 0 Then Print #1, "    (DRILL " & Round(DrillSize * Multiplier, 0) & ")"
            Print #1, "   )"
            PCNo = PCNo + 1
        ElseIf Shape = "R" Or Shape = "RF" Then
            PadShape = "RECTANGLE"
            Print #1, "   (PADCODE PC" & PCNo & " " & Chr(34) & PadDef & Chr(34)
            Print #1, "    (RECTANGLE " & Round(PadWidth * Multiplier, 0) & " " & Round(((PadHeight - PadWidth) / 2) * Multiplier, 0) & " " & Round(((PadHeight - PadWidth) / 2) * Multiplier, 0) & ")"
'            If PadRotation <> 0 Then Print #1, "     (ORIENT " & PadRotation * 1000 & ")"
            If DrillSize <> 0 Then Print #1, "    (DRILL " & Round(DrillSize * Multiplier, 0) & ")"
            Print #1, "   )"
            PCNo = PCNo + 1
        ElseIf Shape = "F" Then
            PadShape = "FINGER"
            Print #1, "   (PADCODE PC" & PCNo & " " & Chr(34) & PadDef & Chr(34)
            Print #1, "    (FINGER " & Round(PadWidth * Multiplier, 0) & " " & Round(((PadHeight - PadWidth) / 2) * Multiplier, 0) & " " & Round(((PadHeight - PadWidth) / 2) * Multiplier, 0) & ")"
'            If PadRotation <> 0 Then Print #1, "     (ORIENT " & PadRotation * 1000 & ")"
            If DrillSize <> 0 Then Print #1, "    (DRILL " & Round(DrillSize * Multiplier, 0) & ")"
            Print #1, "   )"
            PCNo = PCNo + 1
        ElseIf Shape = "S" Then
            PadShape = "SQUARE"
            Print #1, "   (PADCODE PC" & PCNo & " " & Chr(34) & PadDef & Chr(34)
            Print #1, "    (SQUARE " & Round(PadWidth * Multiplier, 0) & ")"
            If DrillSize <> 0 Then Print #1, "    (DRILL " & Round(DrillSize * Multiplier, 0) & ")"
            Print #1, "   )"
            PCNo = PCNo + 1
        End If
        PadCodes(PCNo - 1) = PadDef
        PadDefLst = PadDefLst & PadDef & ","
    End If
    
    'Debug.Print DecalNo
    If Pad = 0 Then
        For i = 1 To NoOfPads
            If PadDefs(i, StartCol) = vbNullString Then PadDefs(i, StartCol) = PadDef
            If PadDefs(i, StartCol + 3) = vbNullString Then PadDefs(i, StartCol + 3) = PadRotation
        Next i
    Else
        PadDefs(Pad, StartCol) = PadDef
        PadDefs(Pad, StartCol + 3) = PadRotation
    End If
    
    'Skip Inner Layers
    Row = Row + 1
    
    'Opposite Side (Bottom)
    Row = Row + 1
    'Bottom
    PrevSpaceIndex = 0
    NextSpaceIndex = 0
    DecalAscLn = Worksheets(WorksheetName).Cells(Row, 1).Value
    For i = 1 To 3
        NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
        If i = 1 Then PadLayer = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        If i = 2 Then PadWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        If i = 3 And NextSpaceIndex <> 0 Then
            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
        Else
            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
        End If
        ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
        NextSpaceIndex = NextSpaceIndex + ExtraSpaces
        PrevSpaceIndex = NextSpaceIndex
    Next i
    
    If Shape = "R" Or Shape = "S" Then
        If Shape = "R" Then Shape = "E"
        PadHeight = PadWidth
        PadRotation = 0
    ElseIf Shape = "RF" Then
        Shape = "R"
        For i = 4 To 6
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
    End If
    
    If Shape = "E" Then PadShape = "ROUND"
    If Shape = "R" Or Shape = "RF" Then PadShape = "RECTANGLE"
    If Shape = "S" Then PadShape = "SQUARE"
    
    End If
    
    Row = Row + 1
    
    If Worksheets(WorksheetName).Cells(Row, 1).Value = vbNullString And Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString Then
        DecalHdrRow = Row + 1
        DecalNo = DecalNo + 1
    End If
    
    Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")
    

    Print #1, "   (ATTRNAME AT0 " & Chr(34) & "Component Category" & Chr(34)
    Print #1, "    (ATTROWNER COMPONENT)"
    Print #1, "   )"
    Print #1, "   (ATTRNAME AT1 " & Chr(34) & "assembly_name" & Chr(34)
    Print #1, "    (ATTROWNER COMPONENT)"
    Print #1, "   )"
    Print #1, "   (ATTRNAME AT2 " & Chr(34) & "Value" & Chr(34)
    Print #1, "    (ATTROWNER COMPONENT)"
    Print #1, "   )"
    Print #1, "   (ATTRNAME AT3 " & Chr(34) & "thm_power_diss" & Chr(34)
    Print #1, "    (ATTROWNER COMPONENT)"
    Print #1, "   )"
    Print #1, "   (ATTRNAME AT4 " & Chr(34) & "placement" & Chr(34)
    Print #1, "    (ATTROWNER COMPONENT)"
    Print #1, "   )"
    Print #1, "   (ATTRNAME AT5 " & Chr(34) & "silkscrn_name" & Chr(34)
    Print #1, "    (ATTROWNER COMPONENT)"
    Print #1, "   )"
    Print #1, "   (ATTRNAME AT6 " & Chr(34) & "Manufacturers Part Number" & Chr(34)
    Print #1, "    (ATTROWNER COMPONENT)"
    Print #1, "   )"
    Print #1, "   (ATTRNAME AT7 " & Chr(34) & "Height" & Chr(34)
    Print #1, "    (ATTROWNER SYMDEF)"
    Print #1, "   )"
    Print #1, "   (ATTRNAME AT8 " & Chr(34) & "Drawing_Name" & Chr(34)
    Print #1, "    (ATTROWNER DOCSYMBOL)"
    Print #1, "   )"
    Print #1, "   (ATTRNAME AT9 " & Chr(34) & "Client" & Chr(34)
    Print #1, "    (ATTROWNER DOCSYMBOL)"
    Print #1, "   )"
    Print #1, "   (ATTRNAME AT10 " & Chr(34) & "RefDes" & Chr(34)
    Print #1, "    (ATTROWNER COMPONENT)"
    Print #1, "   )"
    Print #1, "  )"
    Print #1, "  (TECHNOLOGY"
    Print #1, "   (UNITS MM)"
    Print #1, "   (UNITSPRECISION 2)"
    Print #1, "   (INTERLINEGAP 20)"
    Print #1, "   (BARLINEGAP 20)"
    Print #1, "   (ALLOWBARTEXT)"
    Print #1, "   (ANGULARPRECISION 1)"
    Print #1, "   (MAXPHYSLAYER 2)"
    Print #1, "   (DESIGNORIGIN (PT 0 0))"
    Print #1, "   (DESIGNAREA (PT 0 0) (PT 100000000 100000000))"
    Print #1, "   (PINNOOFFSET 50800)"
    Print #1, "   (PINNOANGLE 0)"
    Print #1, "   (DESIGNLIMIT (PT 100000000 100000000))"
    Print #1, "  )"
    Print #1, " )"
    Print #1, " (LIBRARY"
    Print #1, "  (HIERARCHY"
    Print #1, "   (ROOTFOLDER F0 " & Chr(34) & "root" & Chr(34)
    Print #1, "    (SYMDEFLIST L0)"
    Print #1, "   )"
    Print #1, "  )"
    
    'Remove Padding Spaces
    DecalAscLn = RemovePaddingSpaces(DecalAscLn)
    
    Row = 3
    StartCol = 0
    FigNo = 0
'    NextDecal = True
    
    If Not IsPTH Or Not Chk_UseExisting Then
        Pin1X = 0
        Pin1Y = 0
    End If
    
    Print #1, "  (SYMDEF L0 " & Chr(34) & PadDefs(0, StartCol) & Chr(34) & " " & Chr(34) & Chr(34) & " (PT 50000000 50000000)"
    Print #1, "   (VERSION 1)"
    
    Do
    
'        If NextDecal Then

        

'            NextDecal = False
'            StartCol = StartCol + 4
'        End If
    
        PrevDecalAscLn = DecalAscLn
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        If DecalAscLn = "REF-DES" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, PrevDecalAscLn, Space(1))
                If i = 1 Then RefDesX = Val(Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                If i = 2 Then RefDesY = Val(Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                If i = 7 Then LAYER = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(PrevDecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LAYER = 26 Or LAYER = 1 Then
'                Print #1, "   (TEXTLOC (ATTRREF AT0) TC7 LAY38 (PT " & Round(50000000 + ((RefDesX - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((RefDesY - Pin1Y) * Multiplier), 0) & ") (ALIGN CENTERCENTER))"
                textLoc1 = "   (TEXTLOC COMP_NAME TC10 LAY10 (PT " & Round(50000000 + ((RefDesX - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((RefDesY - Pin1Y) * Multiplier), 0) & ")"
                textLoc2 = "    (ALIGN CENTERCENTER)"
                textLoc3 = "   )"

'                (TEXTLOC COMP_NAME TC25 LAY38 (PT 3145500 2586000))
            End If
        End If
        
        If DecalAscLn = "*" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, PrevDecalAscLn, Space(1))
                If i = 1 Then Pin1IdentX = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 2 Then Pin1IdentY = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LAYER = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(PrevDecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LAYER = 26 Then
                Print #1, "   (FIGURE FIG" & FigNo & " LC16 LAY10"
                Print #1, "    (OUTLINE (PT " & Round(50000000 + ((Pin1IdentX - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((Pin1IdentY - Pin1Y) * Multiplier), 0) & ")"
                Print #1, "     (CWSEMI (PT " & Round(50000000 + ((Pin1IdentX - Pin1X) * Multiplier), 0) & " " & Round(50000000 + (((Pin1IdentY - Pin1Y) + 10) * Multiplier), 0) & "))"
                Print #1, "     (CWSEMI (PT " & Round(50000000 + ((Pin1IdentX - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((Pin1IdentY - Pin1Y) * Multiplier), 0) & "))"
                Print #1, "    )"
                Print #1, "   )"
                FigNo = FigNo + 1
    
            End If
        End If
        
        If Left(DecalAscLn, 6) = "CIRCLE" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LAYER = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LAYER = 26 Or LAYER = 27 Then
                If LayerNo = 26 Then
                    LayerRef = "LAY10"
                ElseIf LayerNo = 27 Then
                    LayerRef = "LAY14"
                End If
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                CircleX1 = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
                CircleY1 = Val(Mid(DecalAscLn, LastSpaceIndex + 1))
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                CircleX2 = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
                CircleY2 = Val(Mid(DecalAscLn, LastSpaceIndex + 1))
                
                
                CircleDia = Abs(CircleX1 - CircleX2)
                CircleRad = CircleDia / 2
                
                CenterX1 = CircleX1 + CircleRad
                CenterY1 = CircleY1 - CircleRad
                
                
                Print #1, "   (FIGURE FIG" & FigNo & " LC16 " & LayerRef
                Print #1, "    (OUTLINE (PT " & Round(50000000 + ((CenterX1 - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((CenterY1 - Pin1Y) * Multiplier), 0) & ")"
                Print #1, "     (CWSEMI (PT " & Round(50000000 + ((CenterX1 - Pin1X) * Multiplier), 0) & " " & Round(50000000 + (((CenterY1 - Pin1Y) + CircleDia) * Multiplier), 0) & "))"
                Print #1, "     (CWSEMI (PT " & Round(50000000 + ((CenterX1 - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((CenterY1 - Pin1Y) * Multiplier), 0) & "))"
                Print #1, "    )"
                Print #1, "   )"
                FigNo = FigNo + 1
    
            End If
        End If
        
        If Left(DecalAscLn, 6) = "CLOSED" Then
        
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 4
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 2 Then NoOfXY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
            LayerRef = vbNullString
            If LayerNo = 20 Or LayerNo = 25 Then
                LayerRef = "LAY12"
            ElseIf LayerNo = 26 Then
                LayerRef = "LAY10"
            ElseIf LayerNo = 27 Then
                LayerRef = "LAY14"
            End If
            
            If LayerRef = "LAY12" Then
                LCNo = 15
            ElseIf LayerRef = "LAY10" Then
                LCNo = 11
            ElseIf LayerRef = "LAY14" Then
                LCNo = 14
            End If
            
            If LayerRef <> vbNullString Then
                Outline = vbNullString
'                Row = Row + 1
'                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
'                FirstSpaceIndex = InStr(DecalAscLn, Space(1))
'                ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
'                PrevXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                For i = 1 To NoOfXY
                    Row = Row + 1
                    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                    FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                    NextXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
'                    PrevX = Val(Left(PrevXY, InStr(PrevXY, Space(1)) - 1)) - Pin1X
'                    PrevY = Val(Mid(PrevXY, InStr(PrevXY, Space(1)) + 1)) - Pin1Y
                    NextX = Val(Left(NextXY, InStr(NextXY, Space(1)) - 2)) - Pin1X
                    NextY = Val(Mid(NextXY, InStr(NextXY, Space(1)) + 1)) - Pin1Y
                    
                    Outline = Outline & " (PT " & Round(50000000 + (NextX * Multiplier), 0) & " " & Round(50000000 + (NextY * Multiplier), 0) & ")"

'                    PrevXY = NextXY
                Next i
                    Print #1, "   (FIGURE FIG" & FigNo & " LC" & LCNo & " " & LayerRef
                    Print #1, "    (OUTLINE" & Outline & ")"
                    Print #1, "   )"
                    FigNo = FigNo + 1
            End If
        End If
        
        If Left(DecalAscLn, 4) = "OPEN" Then
        
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 4
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 2 Then LineCount = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
            LayerRef = vbNullString
            If LayerNo = 26 Then
                LayerRef = "LAY10"
            ElseIf LayerNo = 27 Then
                LayerRef = "LAY14"
            End If
            
            If LayerRef = "LAY10" Then
                LCNo = 11
            ElseIf LayerRef = "LAY14" Then
                LCNo = 14
            End If
            
            If LayerRef <> vbNullString Then
    '            Print #1, "   (FIGURE FIG" & FigNo & " LC" & LCNo & " " & LayerRef
    '            Print #1, vbTab & vbTab & "(layerContents (layerNumRef " & LayerNumRef & ")"
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                
    'Check for arc
                FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                
                If FirstSpaceIndex + ExtraSpaces <> InStrRev(DecalAscLn, Space(1)) Then
                
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                For i = 1 To 6
                    NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                    If i = 3 Then StartAngle = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    If i = 4 Then SweepAngle = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    If i = 5 Then LLPX = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    If i = 6 Then LLPY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                    NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                    PrevSpaceIndex = NextSpaceIndex
                Next i
                
                StartAngle = Left(StartAngle, Len(StartAngle) - 1) & "." & Right(StartAngle, 1)
                SweepAngle = Left(SweepAngle, Len(SweepAngle) - 1) & "." & Right(SweepAngle, 1)
                URPY = Mid(DecalAscLn, InStrRev(DecalAscLn, Space(1)) + 1)
                
                Radius = (URPY - LLPY) / 2
                ArcCenterX = LLPX + Radius
                ArcCenterY = LLPY + Radius
                
    'CADSTAR ARC?
    '            Print #1, vbTab & vbTab & vbTab & "(arc (pt " & ArcCenterX - Pin1X & ", " & ArcCenterY - Pin1Y & ") (radius " & Radius & ") (startAngle " & StartAngle & ") (sweepAngle " & SweepAngle & ") (width " & LineWidth & "))"
    
                Row = Row + 1 'Skip SecondXY for arc
                
                Else
                    For Line = 1 To LineCount - 1
                    
                        If Line = 1 Then
                            FirstXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                            FirstX = Val(Left(FirstXY, InStr(FirstXY, Space(1)) - 2)) - Pin1X
                            FirstY = Val(Mid(FirstXY, InStr(FirstXY, Space(1)) + 1)) - Pin1Y
                        Else
                            FirstX = NextX
                            FirstY = NextY
                        End If
                        
                        Row = Row + 1
                        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                        NextSpaceIndex = InStr(DecalAscLn, Space(1))
                        ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                        NextXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                        NextX = Val(Left(NextXY, InStr(NextXY, Space(1)) - 2)) - Pin1X
                        NextY = Val(Mid(NextXY, InStr(NextXY, Space(1)) + 1)) - Pin1Y
                    
    'CADSTAR LINE
                        Print #1, "   (FIGURE FIG" & FigNo & " LC" & LCNo & " " & LayerRef
                        FigNo = FigNo + 1
                        Print #1, "    (OPENSHAPE (PT " & Round(50000000 + (FirstX * Multiplier), 0) & " " & Round(50000000 + (FirstY * Multiplier), 0) & ") (PT " & Round(50000000 + (NextX * Multiplier), 0) & " " & Round(50000000 + (NextY * Multiplier), 0) & "))"
                        Print #1, "   )"
                    Next Line
    '                Print #1, vbTab & vbTab & vbTab & "(line (pt " & FirstX & " " & FirstY & ") (pt " & NextX & " " & NextY & ") (width " & LineWidth & "))"
    
                End If
    '            Print #1, vbTab & vbTab & ")"
            End If
        End If
        
        Row = Row + 1
        
        
'    If Worksheets(WorksheetName).Cells(Row, 1).Value = vbNullString And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString And Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*") Then
'        Print #1, vbTab & ")"
'        NextDecal = True
'    End If
                        
    Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")
    
    
    For i = 1 To NoOfPads
        For PC = 0 To UBound(PadCodes)
            If PadDefs(i, StartCol) = PadCodes(PC) Then GoTo PrintPAD
        Next PC
PrintPAD:
        RotationTxt = vbNullString
        If PadDefs(i, StartCol + 3) <> 0 Then
            RotationTxt = " (ORIENT " & PadDefs(i, StartCol + 3) * 1000 & ")"
        End If
        If IsPTH Then
            Print #1, "   (PAD " & i & " (PT " & Round(50000000 + (((CDbl(PadDefs(i, StartCol + 1))) - Pin1X) * Multiplier), 0) & " " & Round(50000000 + (((CDbl(PadDefs(i, StartCol + 2))) - Pin1Y) * Multiplier), 0) & ") PC" & PC & " THRU" & RotationTxt
        Else
            Print #1, "   (PAD " & i & " (PT " & Round(50000000 + (((CDbl(PadDefs(i, StartCol + 1))) - Pin1X) * Multiplier), 0) & " " & Round(50000000 + (((CDbl(PadDefs(i, StartCol + 2))) - Pin1Y) * Multiplier), 0) & ") PC" & PC & " TOP" & RotationTxt
        End If
        If i = 1 Then Print #1, "    (FIRSTPAD)"
        Print #1, "    (PADIDENTIFIER " & Chr(34) & i & Chr(34) & ")"
        Print #1, "   )"
    Next i
    Print #1, textLoc1
    Print #1, textLoc2
    Print #1, textLoc3
    Print #1, "  )"
    Print #1, " )"
    Print #1, ")"
    Print #1,
    Close #1
End If
On Error GoTo Finish

Finish:
Unload Me

End Function
Function GetPinTypeDX(PinType As String) As String

If PinType = "Output" Then
    GetPinTypeDX = "OUT"
ElseIf PinType = "Bidirectional" Then
    GetPinTypeDX = "BI"
ElseIf PinType = "Open Collector" Then
    GetPinTypeDX = "OCL"
ElseIf PinType = "Open Emitter (DxDesigner Only)" Then
    GetPinTypeDX = "OEM"
ElseIf PinType = "Tristate" Then
    GetPinTypeDX = "TRI"
ElseIf PinType = "Input" Then
    GetPinTypeDX = "IN"
ElseIf PinType = "Terminator" Then
    GetPinTypeDX = "TERMINAL"
ElseIf PinType = "Power" Then
    GetPinTypeDX = "POWER"
ElseIf PinType = "Ground" Then
    GetPinTypeDX = "GROUND"
ElseIf PinType = "Undefined" Then
    GetPinTypeDX = "IN"
Else
    GetPinTypeDX = "IN"
End If

End Function

Function GetPinTypeCS(PinType As String) As String

If PinType = "Output" Then
    GetPinTypeCS = "Y"
ElseIf PinType = "Tristate" Then
    GetPinTypeCS = "T"
ElseIf PinType = "Input" Then
    GetPinTypeCS = "I"
ElseIf PinType = "Power" Then
    GetPinTypeCS = "P"
ElseIf PinType = "Ground" Then
    GetPinTypeCS = "G"
ElseIf PinType = "Output pin not OR tieable (CS)" Then
    GetPinTypeCS = "N"
ElseIf PinType = "Output pin not normally OR tieable (CS)" Then
    GetPinTypeCS = "Q"
ElseIf PinType = "Tristate input pin (CS)" Then
    GetPinTypeCS = "TI"
ElseIf PinType = "Tristate output pin (CS)" Then
    GetPinTypeCS = "TD"
ElseIf PinType = "Undefined" Then
    GetPinTypeCS = "U"
Else
    GetPinTypeCS = "U"
End If

End Function

Function ExportAD()

Dim GateCnt As Integer
Dim GateNo As Integer
Dim SYMname As String
Dim SymbolFile As String
Dim BoxWidthLR As Double
Dim BoxWidthTB As Double
Dim PinPitch As Double
Dim DecalAscLn As String
Dim NextSpaceIndex As Integer
Dim PrevSpaceIndex As Integer
Dim Alphanumeric As Boolean
'On Error GoTo OnErrorGetObject

MissingValues = vbNullString

If Replace(txt_BaseName.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Symbol Base Name"
Else
    txt_BaseName.Value = Replace(txt_BaseName.Value, Space(1), vbNullString)
    Sheets("Setup").Cells(10, 2).Value = txt_BaseName.Value
End If

Sheets("Setup").Cells(8, 2).Value = cbo_PinLength.Value
Sheets("Setup").Cells(12, 2).Value = cbo_PinPitch.Value

If Replace(Txt_PartName.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Part Name"
Else
    Txt_PartName.Value = Replace(Txt_PartName.Value, Space(1), vbNullString)
    Sheets("Setup").Cells(18, 2).Value = Txt_PartName.Value
End If

'If Chk_UseExisting Then
    Sheets("Setup").Cells(102, 2).Value = "TRUE"
'Else
'    Sheets("Setup").Cells(102, 2).Value = "FALSE"
'End If

If Replace(txt_ExportDir.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Export Directory"
Else
    Sheets("Setup").Range("B16").Value = txt_ExportDir.Value
End If

Sheets("Setup").Cells(15, 2).Value = cbo_PCB.Value

If MissingValues <> vbNullString Then
    MsgBox "Please Enter Value for " & Mid(MissingValues, 3), vbOKOnly, "Part Wizard"
    Exit Function
End If

    Success = True

    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[GateSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(46, 46, 189)
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(192, 143, 46)
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(209, 50, 50)
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(45, 187, 45)
    With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
PinLength = cbo_PinLength.Value
If PinLength = 100 Then
    PinDecal = "PINSHORT"
    pnx = 60
    pny = 10
    pnmx = 140
    pnmy = 10
Else
    PinDecal = "PIN"
    pnx = 140
    pny = 20
    pnmx = 230
    pnmy = 0
End If

filePath = txt_ExportDir.Value

PinPitch = cbo_PinPitch.Value
SYMname = txt_BaseName.Value
PCBdecal = cbo_PCB.Value
PTName = Txt_PartName.Value

LeftPinCnt = 0
RightPinCnt = 0
TopPinCnt = 0
BotPinCnt = 0
LeftPinLen = 0
RightPinLen = 0
TopPinLen = 0
BotPinLen = 0
GateCnt = 0
r = 2
PrevGate = Sheets("Template").Cells(r, 1).Value

'Check if Alphanumeric.  If not Alphanumeric create library ASCII files, otherwise create design ASCII files.

If Not Worksheets("Setup").Range("B91") Then
    
    SymbolFile = filePath & PTName & ".c"
    Open SymbolFile For Output As #1
    'Control Statement
    Print #1, "*PADS-LIBRARY-SCH-DECALS-V4*"
    
    startRow = 2
    CurrGate = Sheets("Template").Cells(r, 1).Value
    While PrevGate <> vbNullString
        PrevGate = CurrGate
        CurrGate = Sheets("Template").Cells(r, 1).Value
            
        If CurrGate = PrevGate Then
            If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then
                LeftPinCnt = LeftPinCnt + 1
                If LeftPinLen < Len(Sheets("Template").Cells(r, 3)) Then LeftPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then
                RightPinCnt = RightPinCnt + 1
                If RightPinLen < Len(Sheets("Template").Cells(r, 3)) Then RightPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then
                TopPinCnt = TopPinCnt + 1
                If TopPinLen < Len(Sheets("Template").Cells(r, 3)) Then TopPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then
                BotPinCnt = BotPinCnt + 1
                If BotPinLen < Len(Sheets("Template").Cells(r, 3)) Then BotPinLen = Len(Sheets("Template").Cells(r, 3))
            End If
        Else
             
            GateCnt = GateCnt + 1
            
    
            'Blank Line
            Print #1,
            
            If LeftPinCnt <> 0 Then
                OriginPin = "Left"
            ElseIf TopPinCnt <> 0 Then
                OriginPin = "Top"
            ElseIf RightPinCnt <> 0 Then
                OriginPin = "Right"
            ElseIf BotPinCnt <> 0 Then
                OriginPin = "Bottom"
            End If
            
            If LeftPinCnt > RightPinCnt Then
                PinCntLR = LeftPinCnt
            Else
                PinCntLR = RightPinCnt
            End If
            
            If TopPinCnt = 0 Then
                TopOffset = PinPitch
            Else
                TopOffset = RoundToNearest((TopPinLen * 50) + 200, 100)
            End If
            
            If BotPinCnt = 0 Then
                BotOffset = PinPitch
            Else
                BotOffset = RoundToNearest((BotPinLen * 50) + 200, 100)
            End If
        
            BoxHeightTB = TopOffset + BotOffset
            
            If PinCntLR = 0 Then
                BoxHeightLR = 0
            Else
    '            BoxHeightLR = (PinCntLR * PinPitch) + PinPitch
                BoxHeightLR = ((PinCntLR - 1) * PinPitch)
            End If
            
            BoxHeight = RoundToNearest(BoxHeightLR + BoxHeightTB, 100)
    
            If TopPinCnt > BotPinCnt Then
                PinCntTB = TopPinCnt
            Else
                PinCntTB = BotPinCnt
            End If
            
            If LeftPinLen + RightPinLen = 0 Then
                BoxWidthLR = 0
            Else
                BoxWidthLR = RoundToNearest(((LeftPinLen + RightPinLen) * 50) + 400, 100)
            End If
            
            BoxWidthTB = RoundToNearest((PinCntTB * PinPitch) + PinPitch, 100)
            
            If BoxWidthLR > BoxWidthTB Then
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthLR, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthLR, 100)
                End If
            Else
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthTB, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthTB, 100)
                End If
            End If
            
            PinCnt = LeftPinCnt + RightPinCnt + TopPinCnt + BotPinCnt
            
            If OriginPin = "Left" Then
                OffsetX = PinLength
                OffsetY = TopOffset
            ElseIf OriginPin = "Top" Then
                OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
                OffsetY = -(PinLength)
            ElseIf OriginPin = "Right" Then
                OffsetX = -PinLength - BoxWidth
                OffsetY = TopOffset
            ElseIf OriginPin = "Bottom" Then
                OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
                OffsetY = PinLength + BoxHeight
            End If
    
            'Header
            Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 1 0 " & PinCnt & " 0"
            Print #1, Chr(34) & "Default Font" & Chr(34)
            Print #1, Chr(34) & "Default Font" & Chr(34)
            'Labels
            If TopPinCnt = 0 Then
                Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY + 50 & " 0 12 100 10 " & Chr(34) & "Default Font" & Chr(34)
            ElseIf RightPinCnt = 0 Then
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) + 50 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            Else
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY + 50 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            End If
            Print #1, "REF-DES"
            
            If BotPinCnt = 0 Then
                Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY - (BoxHeight) - 50 & " 0 12 100 10 " & Chr(34) & "Default Font" & Chr(34)
            ElseIf RightPinCnt = 0 Then
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) - 50 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            Else
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - BoxHeight - 50 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            End If
            Print #1, "PART-TYPE"
            
            If BotPinCnt = 0 Then
                Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY - (BoxHeight) - 150 & " 0 12 100 10 " & Chr(34) & "Default Font" & Chr(34)
            ElseIf RightPinCnt = 0 Then
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) - 150 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            Else
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - BoxHeight - 150 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            End If
            Print #1, "*"
            
            If BotPinCnt = 0 Then
                Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY - (BoxHeight) - 250 & " 0 12 100 10 " & Chr(34) & "Default Font" & Chr(34)
             ElseIf RightPinCnt = 0 Then
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) - 250 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            Else
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - BoxHeight - 250 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            End If
            
            Print #1, "*"
            'Pieces
            Print #1, "CLOSED 5 10 0 -1"
            Print #1, OffsetX & " " & OffsetY
            Print #1, OffsetX + BoxWidth & " " & OffsetY
            Print #1, OffsetX + BoxWidth & " " & OffsetY - BoxHeight
            Print #1, OffsetX & " " & OffsetY - BoxHeight
            Print #1, OffsetX & " " & OffsetY
            'Terminals
            
            'Left Pins
            For lt = 1 To LeftPinCnt
                Print #1, "T0" & " " & -(lt - 1) * PinPitch & " 0 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
            Next lt
            
            'Right Pins
            If OriginPin = "Right" Then
                For rt = 1 To RightPinCnt
                    Print #1, "T0 " & -(rt - 1) * PinPitch & " 0 2 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next rt
            ElseIf OriginPin = "Left" Then
                For rt = 1 To RightPinCnt
                    Print #1, "T" & (PinLength * 2) + BoxWidth & " " & -(rt - 1) * PinPitch & " 0 2 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next rt
            ElseIf OriginPin = "Top" Then
                For rt = 1 To RightPinCnt
                'Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & BoxWidth + OffsetX + PinLength & ", " & -((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset) & ") (rotation 180) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & BoxWidth + OffsetX & ", " & (-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) - 25 & ") (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
    
                    Print #1, "T" & BoxWidth + OffsetX + PinLength & " " & -((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset) & " 0 2 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next rt
            End If
            
            'Top Pins
            If OriginPin = "Top" Then
                For tt = 1 To TopPinCnt
                    Print #1, "T" & RoundDownToNearest((tt - 1) * PinPitch, PinPitch) & " 0 90 4 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next tt
            ElseIf OriginPin = "Left" Then
                For tt = 1 To TopPinCnt
                    Print #1, "T" & RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " " & OffsetY + PinLength; " 90 4 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next tt
            End If
            
            'Bottom Pins
            If OriginPin = "Bottom" Then
                For bt = 1 To BotPinCnt
                    Print #1, "T" & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " 0 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next bt
             ElseIf OriginPin = "Left" Then
                For bt = 1 To BotPinCnt
                    Print #1, "T" & RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next bt
             ElseIf OriginPin = "Right" Then
                For bt = 1 To BotPinCnt
                    Print #1, "T" & RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch) & " " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next bt
             ElseIf OriginPin = "Top" Then
                For bt = 1 To BotPinCnt
                    Print #1, "T" & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " " & -BoxHeight - (2 * PinLength) & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next bt
            End If
            
    '        ImportSymbols SYMname & "-" & Num2Lett(GateCnt), SymbolFile
    
            LeftPinCnt = 0
            RightPinCnt = 0
            TopPinCnt = 0
            BotPinCnt = 0
            LeftPinLen = 0
            RightPinLen = 0
            
            r = r - 1
            
            
    
        End If
    
        PrevGate = CurrGate
        r = r + 1
        
    
        
    Wend
    
    Print #1,
    Print #1, "*END*"
    
    Close #1
    
    
    
    If Right(PCBdecal, 1) = "N" Or Right(PCBdecal, 3) = "N-D" Then
        WorksheetName = "FP-N"
    ElseIf Right(PCBdecal, 1) = "L" Or Right(PCBdecal, 3) = "L-D" Then
        WorksheetName = "FP-L"
    ElseIf Right(PCBdecal, 1) = "M" Or Right(PCBdecal, 3) = "M-D" Then
        WorksheetName = "FP-M"
    Else
        WorksheetName = "FP-N"
    End If
    
    
    
    If Not Img_WarningD.Visible Then
        'Write PADS PCB Decal file
        PCBDecalFile = filePath & PCBdecal & ".d"
        Open PCBDecalFile For Output As #1
        Print #1, "*PADS-LIBRARY-PCB-DECALS-V4*"
        Print #1, Sheets(WorksheetName).Cells(3, 1)
        
        
        RowFP = 4
        
        Do
            DecalAscLn = Sheets(WorksheetName).Cells(RowFP, 1)
            If Left(DecalAscLn, 9) = "TIMESTAMP" Then GoTo SkipRowFP
            If Left(DecalAscLn, 15) = "Geometry.Height" Then DecalAscLn = Chr(34) & "Geometry.Height" & Chr(34) & Mid(DecalAscLn, 16)
        'Remove Corner type from Pad Stacks (Square and Rectangular Pad Shapes Only)
            Print #1, DecalAscLn
            If Left(DecalAscLn, 3) = "PAD" Then
                PrevSpaceIndex = 0
                NextSpaceIndex = 0
                For i = 1 To 3
                    NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                    If i = 3 Then PadAscLns = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                    NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                    PrevSpaceIndex = NextSpaceIndex
                Next i
                
                For P = 1 To PadAscLns
                    RowFP = RowFP + 1
                    DecalAscLn = Sheets(WorksheetName).Cells(RowFP, 1)
'                    Debug.Print DecalAscLn
                    PrevSpaceIndex = 0
                    NextSpaceIndex = 0
                    For i = 1 To 3
                        NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                        If i = 3 And NextSpaceIndex <> 0 Then
                            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                        Else
                            Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
                        End If
                        ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                        NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                        PrevSpaceIndex = NextSpaceIndex
                    Next i
                    
                    If Shape = "RF" Then 'Rectangular Pad
                        NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                        Print #1, Left(DecalAscLn, PrevSpaceIndex - ExtraSpaces - 1) & Mid(DecalAscLn, NextSpaceIndex)
                    ElseIf Shape = "S" Then 'Square Pad
                        Print #1, Left(DecalAscLn, NextSpaceIndex - ExtraSpaces - 1)
                    Else
                        Print #1, DecalAscLn
                    End If
                    
                Next P
        
            End If
            
SkipRowFP:
            RowFP = RowFP + 1
        Loop While DecalAscLn <> vbNullString
        
        Print #1, "*END*"
        
        Close #1
    End If
    'Write Part Type Definition
    'Debug.Print "Logic Family = " & LogFam
    
    PartTypeFile = filePath & PTName & ".p"
    Open PartTypeFile For Output As #1
    'Control Statement
    Print #1, "*PADS-LIBRARY-PART-TYPES-V4*"
    'Blank Line
    Print #1,
    Print #1, PTName & " " & PCBdecal & " I ANA 0 " & GateCnt & " 0 0 0 0"
    
    r = 2
    startRow = 2
    PinCnt = 0
    GateNo = 0
    PrevGate = Sheets("Template").Cells(r, 1).Value
    CurrGate = PrevGate
    While PrevGate <> vbNullString
        PrevGate = CurrGate
        CurrGate = Sheets("Template").Cells(r, 1).Value
        If CurrGate = PrevGate Then
            PinCnt = PinCnt + 1
        Else
            GateNo = GateNo + 1
            endRow = r - 1
            Print #1, "G:" & SYMname & "-" & Num2Lett(GateNo) & " 0 " & PinCnt
                            
            For Row = startRow To endRow
'                PinName = Sheets("Template").Cells(Row, 3).Value
'                NegFound = False
'                For c = 1 To Len(PinName)
'                    If Mid(PinName, c, 1) = "*" Then
'                        NegFound = True
'                        PinName = Left(PinName, c - 1) & "\" & Mid(PinName, c + 1)
'                        c = c + 1
'                    ElseIf Mid(PinName, c, 1) = "/" And NegFound Then
'                        PinName = Left(PinName, c - 1) & "\" & Mid(PinName, c)
'                        NegFound = False
'                    End If
'                Next c
'                If Len(PinName) > 40 Then PinName = Left(PinName, 40)
                Print #1, Sheets("Template").Cells(Row, 2).Value & "." & Sheets("Template").Cells(Row, 5).Value & "." & GetPinTypePL(Sheets("Template").Cells(Row, 4).Value) & "." & Sheets("Template").Cells(Row, 3).Value
            Next Row
            startRow = endRow + 1
            PinCnt = 0
            r = r - 1
        End If
        r = r + 1
    Wend
    
    Print #1,
    Print #1, "*END*"
    
    Close #1
    
Else

    'Write PADS Logic Design ASCII file
    SchAscFile = filePath & PTName & ".txt"
    Open SchAscFile For Output As #1
    
    Print #1, "*PADS-LOGIC-V2005.2* DESIGN EXPORT FILE FROM PADS LOGIC V2005.2"
    Print #1, "*SHT*   1 $$$NONE -1 $$$NONE"
    Print #1, "*CAEDECAL*  ITEMS"
    Print #1,
    
    Print #1, "PIN              34000 34000 100 10 100 10 4 1 0 0 0 1"
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, "140 20 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "REF-DES"
    Print #1, "230 0 0 8 100 10 " & "Default Font" & Chr(34)
    Print #1, "PART-TYPE"
    Print #1, "-520 0 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "-80 0 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "OPEN   2   10  255"
    Print #1, "0     0"
    Print #1, "200   0"
    Print #1,
    
    Print #1, "PINB             34000 34000 100 10 100 10 4 2 0 0 0 1"
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, "130 14 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "REF-DES"
    Print #1, "230 0 0 8 100 10 " & "Default Font" & Chr(34)
    Print #1, "PART-TYPE"
    Print #1, "-500 10 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "-30 14 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "OPEN   2   10  255"
    Print #1, "0     0"
    Print #1, "140   0"
    Print #1, "CIRCLE 2   10  255"
    Print #1, "140   0"
    Print #1, "190   0"
    Print #1,
    
    Print #1, "PCLK             33500 33180 100 10 100 10 4 2 0 0 0 1"
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, "130 14 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "REF-DES"
    Print #1, "280 0 0 8 100 10 " & "Default Font" & Chr(34)
    Print #1, "PART-TYPE"
    Print #1, "-500 10 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "-30 14 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "OPEN   2   10  255"
    Print #1, "0     0"
    Print #1, "200   0"
    Print #1, "OPEN   3   10  255"
    Print #1, "200   30"
    Print #1, "260   0"
    Print #1, "200   -30"
    Print #1,
    
    Print #1, "PCLKB            33500 33180 100 10 100 10 4 3 0 0 0 1"
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, "130 14 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "REF-DES"
    Print #1, "280 0 0 8 100 10 " & "Default Font" & Chr(34)
    Print #1, "PART-TYPE"
    Print #1, "-500 10 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "-30 14 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "OPEN   3   10  255"
    Print #1, "200   30"
    Print #1, "260   0"
    Print #1, "200   -30"
    Print #1, "OPEN   2   10  255"
    Print #1, "0     0"
    Print #1, "140   0"
    Print #1, "CIRCLE 2   10  255"
    Print #1, "190   0"
    Print #1, "140   0"
    Print #1,
    
    Print #1, "PINIEB           34000 34000 100 10 100 10 4 1 0 0 0 1"
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, "130 14 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "REF-DES"
    Print #1, "220 0 0 8 100 10 " & "Default Font" & Chr(34)
    Print #1, "PART-TYPE"
    Print #1, "-500 10 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "-30 14 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "OPEN   4   10  255"
    Print #1, "0     0"
    Print #1, "200   0"
    Print #1, "140   30"
    Print #1, "140   0"
    Print #1,
    
    Print #1, "PINORB           34000 34000 100 10 100 10 4 2 0 0 0 1"
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, "130 14 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "REF-DES"
    Print #1, "300 0 0 8 100 10 " & "Default Font" & Chr(34)
    Print #1, "PART-TYPE"
    Print #1, "-500 10 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "-30 14 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "OPEN   2   10  255"
    Print #1, "0     0"
    Print #1, "180   0"
    Print #1, "CIRCLE 2   10  255"
    Print #1, "230   0"
    Print #1, "180   0"
    Print #1,
    
    Print #1, "PINSHORT         34000 34000 100 10 100 10 4 1 0 0 0 1"
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, "60 10 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "REF-DES"
    Print #1, "140 10 0 8 100 10 " & "Default Font" & Chr(34)
    Print #1, "PART-TYPE"
    Print #1, "-530 10 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "-70 10 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "OPEN   2   10  255"
    Print #1, "0     0"
    Print #1, "100   0"
    Print #1,
    
    Print #1, "PINVRTS          34000 34000 100 10 100 10 4 1 0 0 3 1"
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, Chr(34) & "Default Font" & Chr(34)
    Print #1, "20 -80 0 0 100 10 " & "Default Font" & Chr(34)
    Print #1, "REF-DES"
    Print #1, "-20 -40 0 9 100 10 " & "Default Font" & Chr(34)
    Print #1, "PART-TYPE"
    Print #1, "-500 10 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "-30 14 0 1 100 10 " & "Default Font" & Chr(34)
    Print #1, "*"
    Print #1, "OPEN   2   10  255"
    Print #1, "0     -100"
    Print #1, "0     0"
    Print #1,
    
    startRow = 2
    CurrGate = Sheets("Template").Cells(r, 1).Value
    While PrevGate <> vbNullString
        PrevGate = CurrGate
        CurrGate = Sheets("Template").Cells(r, 1).Value
            
        If CurrGate = PrevGate Then
            If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then
                LeftPinCnt = LeftPinCnt + 1
                If LeftPinLen < Len(Sheets("Template").Cells(r, 3)) Then LeftPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then
                RightPinCnt = RightPinCnt + 1
                If RightPinLen < Len(Sheets("Template").Cells(r, 3)) Then RightPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then
                TopPinCnt = TopPinCnt + 1
                If TopPinLen < Len(Sheets("Template").Cells(r, 3)) Then TopPinLen = Len(Sheets("Template").Cells(r, 3))
            ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then
                BotPinCnt = BotPinCnt + 1
                If BotPinLen < Len(Sheets("Template").Cells(r, 3)) Then BotPinLen = Len(Sheets("Template").Cells(r, 3))
            End If
        Else
             
            GateCnt = GateCnt + 1
            
            If LeftPinCnt <> 0 Then
                OriginPin = "Left"
            ElseIf TopPinCnt <> 0 Then
                OriginPin = "Top"
            ElseIf RightPinCnt <> 0 Then
                OriginPin = "Right"
            ElseIf BotPinCnt <> 0 Then
                OriginPin = "Bottom"
            End If
            
            If LeftPinCnt > RightPinCnt Then
                PinCntLR = LeftPinCnt
            Else
                PinCntLR = RightPinCnt
            End If
            
            If TopPinCnt = 0 Then
                TopOffset = PinPitch
            Else
                TopOffset = RoundToNearest((TopPinLen * 50) + 200, 100)
            End If
            
            If BotPinCnt = 0 Then
                BotOffset = PinPitch
            Else
                BotOffset = RoundToNearest((BotPinLen * 50) + 200, 100)
            End If
        
            BoxHeightTB = TopOffset + BotOffset
            
            If PinCntLR = 0 Then
                BoxHeightLR = 0
            Else
    '            BoxHeightLR = (PinCntLR * PinPitch) + PinPitch
                BoxHeightLR = ((PinCntLR - 1) * PinPitch)
            End If
            
            BoxHeight = RoundToNearest(BoxHeightLR + BoxHeightTB, 100)
    
            If TopPinCnt > BotPinCnt Then
                PinCntTB = TopPinCnt
            Else
                PinCntTB = BotPinCnt
            End If
            
            If LeftPinLen + RightPinLen = 0 Then
                BoxWidthLR = 0
            Else
                BoxWidthLR = RoundToNearest(((LeftPinLen + RightPinLen) * 50) + 400, 100)
            End If
            
            BoxWidthTB = RoundToNearest((PinCntTB * PinPitch) + PinPitch, 100)
            
            If BoxWidthLR > BoxWidthTB Then
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthLR, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthLR, 100)
                End If
            Else
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthTB, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthTB, 100)
                End If
            End If
            
            PinCnt = LeftPinCnt + RightPinCnt + TopPinCnt + BotPinCnt
            
            If OriginPin = "Left" Then
                OffsetX = PinLength
                OffsetY = TopOffset
            ElseIf OriginPin = "Top" Then
                OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
                OffsetY = -(PinLength)
            ElseIf OriginPin = "Right" Then
                OffsetX = -PinLength - BoxWidth
                OffsetY = TopOffset
            ElseIf OriginPin = "Bottom" Then
                OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
                OffsetY = PinLength + BoxHeight
            End If
    
            'Header
            Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 1 0 " & PinCnt & " 0"
            Print #1, Chr(34) & "Default Font" & Chr(34)
            Print #1, Chr(34) & "Default Font" & Chr(34)
            'Labels
            If TopPinCnt = 0 Then
                Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY + 50 & " 0 12 100 10 " & Chr(34) & "Default Font" & Chr(34)
            ElseIf RightPinCnt = 0 Then
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) + 50 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            Else
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY + 50 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            End If
            Print #1, "REF-DES"
            
            If BotPinCnt = 0 Then
                Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY - (BoxHeight) - 50 & " 0 12 100 10 " & Chr(34) & "Default Font" & Chr(34)
            ElseIf RightPinCnt = 0 Then
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) - 50 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            Else
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - BoxHeight - 50 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            End If
            Print #1, "PART-TYPE"
            
            If BotPinCnt = 0 Then
                Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY - (BoxHeight) - 150 & " 0 12 100 10 " & Chr(34) & "Default Font" & Chr(34)
            ElseIf RightPinCnt = 0 Then
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) - 150 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            Else
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - BoxHeight - 150 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            End If
            Print #1, "*"
            
            If BotPinCnt = 0 Then
                Print #1, OffsetX + (BoxWidth / 2) & " " & OffsetY - (BoxHeight) - 250 & " 0 12 100 10 " & Chr(34) & "Default Font" & Chr(34)
             ElseIf RightPinCnt = 0 Then
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - (BoxHeight / 2) - 250 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            Else
                Print #1, OffsetX + BoxWidth + 50 & " " & OffsetY - BoxHeight - 250 & " 0 8 100 10 " & Chr(34) & "Default Font" & Chr(34)
            End If
            
            Print #1, "*"
            'Pieces
            Print #1, "CLOSED 5 10 0 -1"
            Print #1, OffsetX & " " & OffsetY
            Print #1, OffsetX + BoxWidth & " " & OffsetY
            Print #1, OffsetX + BoxWidth & " " & OffsetY - BoxHeight
            Print #1, OffsetX & " " & OffsetY - BoxHeight
            Print #1, OffsetX & " " & OffsetY
            'Terminals
            
            'Left Pins
            For lt = 1 To LeftPinCnt
                Print #1, "T0" & " " & -(lt - 1) * PinPitch & " 0 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                Print #1, "P-520 0 0 2 -80 0 0 2 0"
            Next lt
            
            'Right Pins
            If OriginPin = "Right" Then
                For rt = 1 To RightPinCnt
                    Print #1, "T0 " & -(rt - 1) * PinPitch & " 0 2 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next rt
            ElseIf OriginPin = "Left" Then
                For rt = 1 To RightPinCnt
                    Print #1, "T" & (PinLength * 2) + BoxWidth & " " & -(rt - 1) * PinPitch & " 0 2 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next rt
            ElseIf OriginPin = "Top" Then
                For rt = 1 To RightPinCnt
                'Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & BoxWidth + OffsetX + PinLength & ", " & -((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset) & ") (rotation 180) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & BoxWidth + OffsetX & ", " & (-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) - 25 & ") (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
    
                    Print #1, "T" & BoxWidth + OffsetX + PinLength & " " & -((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset) & " 0 2 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next rt
            End If
            
            'Top Pins
            If OriginPin = "Top" Then
                For tt = 1 To TopPinCnt
                    Print #1, "T" & RoundDownToNearest((tt - 1) * PinPitch, PinPitch) & " 0 90 4 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next tt
            ElseIf OriginPin = "Left" Then
                For tt = 1 To TopPinCnt
                    Print #1, "T" & RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch) & " " & OffsetY + PinLength; " 90 4 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next tt
            End If
            
            'Bottom Pins
            If OriginPin = "Bottom" Then
                For bt = 1 To BotPinCnt
                    Print #1, "T" & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " 0 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next bt
             ElseIf OriginPin = "Left" Then
                For bt = 1 To BotPinCnt
                    Print #1, "T" & RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch) & " " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next bt
             ElseIf OriginPin = "Right" Then
                For bt = 1 To BotPinCnt
                    Print #1, "T" & RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch) & " " & -BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next bt
             ElseIf OriginPin = "Top" Then
                For bt = 1 To BotPinCnt
                    Print #1, "T" & RoundDownToNearest((bt - 1) * PinPitch, PinPitch) & " " & -BoxHeight - (2 * PinLength) & " 90 0 " & pnx & " " & pny & " 0 2 " & pnmx & " " & pnmy & " 0 16 " & PinDecal
                    Print #1, "P-520 0 0 2 -80 0 0 2 0"
                Next bt
            End If
            
    '        ImportSymbols SYMname & "-" & Num2Lett(GateCnt), SymbolFile
    
            LeftPinCnt = 0
            RightPinCnt = 0
            TopPinCnt = 0
            BotPinCnt = 0
            LeftPinLen = 0
            RightPinLen = 0
            
            r = r - 1
        
        End If
    
        PrevGate = CurrGate
        r = r + 1
        
    
        
    Wend
    
    Print #1,
    Print #1, "*PARTTYPE*   ITEMS"
    Print #1,
    
    Print #1, PTName & " " & PCBdecal & " I " & RefDesPrefix & " 0 " & GateCnt & " 0 0 0 0"
    
    r = 2
    startRow = 2
    PinCnt = 0
    GateNo = 0
    PrevGate = Sheets("Template").Cells(r, 1).Value
    CurrGate = PrevGate
    While PrevGate <> vbNullString
        PrevGate = CurrGate
        CurrGate = Sheets("Template").Cells(r, 1).Value
        If CurrGate = PrevGate Then
            PinCnt = PinCnt + 1
        Else
            GateNo = GateNo + 1
            endRow = r - 1
            Print #1, "G:" & SYMname & "-" & Num2Lett(GateNo) & " 0 " & PinCnt
                            
            For Row = startRow To endRow
                Print #1, Sheets("Template").Cells(Row, 2).Value & "." & Sheets("Template").Cells(Row, 5).Value & "." & GetPinTypePL(Sheets("Template").Cells(Row, 4).Value) & "." & Sheets("Template").Cells(Row, 3).Value
            Next Row
            startRow = endRow + 1
            PinCnt = 0
            r = r - 1
        End If
        r = r + 1
    Wend
    
    
    
    
    Print #1,
    Print #1, "*END*     OF ASCII OUTPUT FILE"
    
    Close #1
    
End If

Finish:
Unload Me


End Function

Function ExportDX()
Dim GateCnt As Integer
Dim GateNo As Integer
Dim SYMname As String
Dim SymbolFile As String
Dim BoxWidthLR As Double
Dim BoxWidthTB As Double
Dim PinPitch As Double
Dim PinPitchStr As String
Dim DecalAscLn As String
Dim SpaceIndex As Integer
'On Error GoTo OnErrorGetObject

MissingValues = vbNullString

If Replace(txt_BaseName.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Symbol Base Name"
Else
    Sheets("Setup").Cells(10, 2).Value = txt_BaseName.Value
End If

If Replace(txt_ExportDir.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Symbol Library Directory"
Else
    Sheets("Setup").Range("B16").Value = txt_ExportDir.Value
End If

Sheets("Setup").Cells(11, 2).Value = cbo_PinLength.Value
Sheets("Setup").Cells(12, 2).Value = cbo_PinPitch.Value
Sheets("Setup").Cells(13, 2).Value = cbo_LibPCB.Value

'If Replace(cbo_PCB.Value, Space(1), vbNullString) = vbNullString Then
'    MissingValues = MissingValues & ", " & "Footprint Name(s)"
'Else
    Sheets("Setup").Cells(15, 2).Value = cbo_PCB.Value
'End If

'If Chk_UseExisting Then
    Sheets("Setup").Cells(102, 2).Value = "TRUE"
'Else
'    Sheets("Setup").Cells(102, 2).Value = "FALSE"
'End If

Sheets("Setup").Cells(14, 2).Value = Txt_PinCnt.Value

If Replace(txt_RDP.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Ref. Des. Prefix"
Else
    Sheets("Setup").Cells(17, 3).Value = txt_RDP.Value
End If

Sheets("Setup").Cells(18, 2).Value = Txt_PartName.Value

If MissingValues <> vbNullString Then
    MsgBox "Please Enter Value for " & Mid(MissingValues, 3), vbOKOnly, "ECAD Part Wizard"
    Exit Function
End If

    Success = True

    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[GateSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(46, 46, 189)
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(192, 143, 46)
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(209, 50, 50)
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(45, 187, 45)
    With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

filePath = txt_ExportDir.Value & "sym\"

PinLength = 200

RefDesPrefix = txt_RDP.Value 'REFDES

PinPitchStr = Replace(cbo_PinPitch.Value, DecimalSymbol, ".")
If PinPitchStr = "0.1" Then
    PinPitch = 100
ElseIf PinPitchStr = "0.2" Then
    PinPitch = 200
End If

SYMname = txt_BaseName.Value 'Symbol Name
PCBdecal = cbo_PCB.Value 'PKG_TYPE
PTName = Txt_PartName.Value 'DEVICE
LeftPinCnt = 0
RightPinCnt = 0
TopPinCnt = 0
BotPinCnt = 0
LeftPinLen = 0
RightPinLen = 0
TopPinLen = 0
BotPinLen = 0

HETERO = vbNullString
Row = 2
GateCnt = 1
PrevGate = Sheets("Template").Cells(Row, 1).Value
CurrGate = Sheets("Template").Cells(Row, 1).Value
HETERO = SYMname & "-" & Num2Lett(GateCnt)
While CurrGate <> vbNullString
    If CurrGate <> PrevGate Then
        GateCnt = GateCnt + 1
        HETERO = HETERO & "," & SYMname & "-" & Num2Lett(GateCnt)
    End If
    Row = Row + 1
    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(Row, 1).Value
Wend

GateCnt = 0
r = 2
PrevGate = Sheets("Template").Cells(r, 1).Value
Row = 2
CurrGate = Sheets("Template").Cells(r, 1).Value
While PrevGate <> vbNullString
    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(r, 1).Value
    
    If CurrGate = PrevGate Then
        If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then
            LeftPinCnt = LeftPinCnt + 1
            If LeftPinLen < Len(Sheets("Template").Cells(r, 3)) Then LeftPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then
            RightPinCnt = RightPinCnt + 1
            If RightPinLen < Len(Sheets("Template").Cells(r, 3)) Then RightPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then
            TopPinCnt = TopPinCnt + 1
            If TopPinLen < Len(Sheets("Template").Cells(r, 3)) Then TopPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then
            BotPinCnt = BotPinCnt + 1
            If BotPinLen < Len(Sheets("Template").Cells(r, 3)) Then BotPinLen = Len(Sheets("Template").Cells(r, 3))
        End If
    Else
         
        PinCnt = 1
        GateCnt = GateCnt + 1
        
        
        SymbolFile = filePath & Replace(SYMname, ".", "_") & "-" & Num2Lett(GateCnt) & ".1"
        Open SymbolFile For Output As #1
        'Control Statement
        Print #1, "V 54"
        Print #1, "K 1"
        'Blank Line
'        Print #1,
        
        If LeftPinCnt <> 0 Then
            OriginPin = "Left"
        ElseIf TopPinCnt <> 0 Then
            OriginPin = "Top"
        ElseIf RightPinCnt <> 0 Then
            OriginPin = "Right"
        ElseIf BotPinCnt <> 0 Then
            OriginPin = "Bottom"
        End If
        
        If LeftPinCnt > RightPinCnt Then
            PinCntLR = LeftPinCnt
        Else
            PinCntLR = RightPinCnt
        End If
        
        If TopPinCnt = 0 Then
            TopOffset = PinPitch
        Else
            TopOffset = RoundToNearest((TopPinLen * 50) + 200, 100)
        End If
        
        If BotPinCnt = 0 Then
            BotOffset = PinPitch
        Else
            BotOffset = RoundToNearest((BotPinLen * 50) + 200, 100)
        End If
    
        BoxHeightTB = TopOffset + BotOffset
        
        If PinCntLR = 0 Then
            BoxHeightLR = 0
        Else
            BoxHeightLR = ((PinCntLR - 1) * PinPitch)
        End If
        
        BoxHeight = RoundToNearest(BoxHeightLR + BoxHeightTB, 100)

        If TopPinCnt > BotPinCnt Then
            PinCntTB = TopPinCnt
        Else
            PinCntTB = BotPinCnt
        End If
        
        If LeftPinLen + RightPinLen = 0 Then
            BoxWidthLR = 0
        Else
            BoxWidthLR = RoundToNearest(((LeftPinLen + RightPinLen) * 50) + 200, 100)
        End If
        
        BoxWidthTB = RoundToNearest((PinCntTB * PinPitch) + PinPitch, 100)
        
        If BoxWidthLR > BoxWidthTB Then
            If PinCntTB Mod 2 Then
                BoxWidth = RoundToNearest(BoxWidthLR, 200)
            Else
                BoxWidth = RoundToNearest(BoxWidthLR, 100)
            End If
        Else
            If PinCntTB Mod 2 Then
                BoxWidth = RoundToNearest(BoxWidthTB, 200)
            Else
                BoxWidth = RoundToNearest(BoxWidthTB, 100)
            End If
        End If
        
        If OriginPin = "Left" Then
            OffsetX = PinLength
            OffsetY = TopOffset
        ElseIf OriginPin = "Top" Then
            OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
            OffsetY = -(PinLength)
        ElseIf OriginPin = "Right" Then
            OffsetX = -PinLength - BoxWidth
            OffsetY = TopOffset
        ElseIf OriginPin = "Bottom" Then
            OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
            OffsetY = PinLength + BoxHeight
        End If

        If Sheets("Setup").Cells(110, 2) = "None (Box)" Then
            'Symbol Outline
            Print #1, "D " & (OffsetX - PinLength) * 2540 & " " & (OffsetY + PinLength) * 2540 & " " & (OffsetX + BoxWidth + PinLength) * 2540 & " " & (OffsetY - BoxHeight - PinLength) * 2540
    
            'Symbol Type (MODULE)
            Print #1, "Y 1"
            'Header
    '        Print #1, SYMname & "-" & Num2Lett(GateCnt) & " 0 0 100 10 100 10 4 1 0 " & PinCnt & " 0"
            
            'Symbol Properties
            'REFDES
            If TopPinCnt = 0 Then
                Print #1, "U " & (OffsetX + (BoxWidth / 2)) * 2540 & " " & (OffsetY + 100) * 2540 & " 254000 0 5 3 REFDES=" & RefDesPrefix & "?"
            ElseIf RightPinCnt = 0 Then
                Print #1, "U " & (OffsetX + BoxWidth + 50) * 2540 & " " & (OffsetY - (BoxHeight / 2) + 50) * 2540 & " 254000 0 2 3 REFDES=" & RefDesPrefix & "?"
            Else
                Print #1, "U " & (OffsetX + BoxWidth + 50) * 2540 & " " & (OffsetY + 50) * 2540 & " 254000 0 2 3 REFDES=" & RefDesPrefix & "?"
            End If
            
            

    
            'DEVICE
            If PTName = vbNullString Then PTName = "?"
            If BotPinCnt = 0 Then
                Print #1, "U " & (OffsetX + (BoxWidth / 2)) * 2540 & " " & (OffsetY - (BoxHeight) - 100) * 2540 & " 254000 0 5 3 DEVICE=" & PTName
            ElseIf RightPinCnt = 0 Then
                Print #1, "U " & (OffsetX + BoxWidth + 50) * 2540 & " " & (OffsetY - (BoxHeight / 2) - 50) * 2540 & " 254000 0 2 3 DEVICE=" & PTName
            Else
                Print #1, "U " & (OffsetX + BoxWidth + 50) * 2540 & " " & (OffsetY - BoxHeight - 50) * 2540 & " 254000 0 2 3 DEVICE=" & PTName
            End If
            
            'PKG_TYPE
            If PCBdecal = vbNullString Then PCBdecal = "?"
            If BotPinCnt = 0 Then
                Print #1, "U " & (OffsetX + (BoxWidth / 2)) * 2540 & " " & (OffsetY - (BoxHeight) - 200) * 2540 & " 254000 0 5 0 PKG_TYPE=" & PCBdecal
            ElseIf RightPinCnt = 0 Then
                Print #1, "U " & (OffsetX + BoxWidth + 50) * 2540 & " " & (OffsetY - (BoxHeight / 2) - 150) * 2540 & " 254000 0 2 0 PKG_TYPE=" & PCBdecal
            Else
                Print #1, "U " & (OffsetX + BoxWidth + 50) * 2540 & " " & (OffsetY - BoxHeight - 150) * 2540 & " 254000 0 2 0 PKG_TYPE=" & PCBdecal
            End If
            
            'HETERO
            If InStr(1, HETERO, ",") <> 0 Then
                If BotPinCnt = 0 Then
                    Print #1, "U " & (OffsetX + (BoxWidth / 2)) * 2540 & " " & (OffsetY - (BoxHeight) - 300) * 2540 & " 254000 0 5 0 HETERO=" & HETERO
                ElseIf RightPinCnt = 0 Then
                    Print #1, "U " & (OffsetX + BoxWidth + 50) * 2540 & " " & (OffsetY - (BoxHeight / 2) - 250) * 2540 & " 254000 0 2 0 HETERO=" & HETERO
                Else
                    Print #1, "U " & (OffsetX + BoxWidth + 50) * 2540 & " " & (OffsetY - BoxHeight - 250) * 2540 & " 254000 0 2 0 HETERO=" & HETERO
                End If
            End If
            
            
'Other Attributes
            AttrRow = 1
            AttrOffsetY = 400
            While Sheets("Attributes").Cells(AttrRow, 1) <> vbNullString
                If BotPinCnt = 0 Then
                    Print #1, "U " & (OffsetX + (BoxWidth / 2)) * 2540 & " " & (OffsetY - (BoxHeight) - AttrOffsetY) * 2540 & " 254000 0 5 0 " & Sheets("Attributes").Cells(AttrRow, 1) & "=" & Sheets("Attributes").Cells(AttrRow, 2)
                ElseIf RightPinCnt = 0 Then
                    Print #1, "U " & (OffsetX + BoxWidth + 50) * 2540 & " " & (OffsetY - (BoxHeight / 2) - (AttrOffsetY - 50)) * 2540 & " 254000 0 2 0 " & Sheets("Attributes").Cells(AttrRow, 1) & "=" & Sheets("Attributes").Cells(AttrRow, 2)
                Else
                    Print #1, "U " & (OffsetX + BoxWidth + 50) * 2540 & " " & (OffsetY - BoxHeight - (AttrOffsetY - 50)) * 2540 & " 254000 0 2 0 " & Sheets("Attributes").Cells(AttrRow, 1) & "=" & Sheets("Attributes").Cells(AttrRow, 2)
                End If
                AttrOffsetY = AttrOffsetY + 100
                AttrRow = AttrRow + 1
            Wend

            
                  
            'FORWARD_PCB
                Print #1, "U 0 0 254000 0 1 0 FORWARD_PCB=1"
            
            'Box
            Print #1, "b " & OffsetX * 2540 & " " & OffsetY * 2540 & " " & (OffsetX + BoxWidth) * 2540 & " " & (OffsetY - BoxHeight) * 2540
    
            'Terminals
            
            'Left Pins
            For lt = 1 To LeftPinCnt
                Print #1, "P " & PinCnt & " 0 " & -(lt - 1) * (PinPitch * 2540) & " " & PinLength * 2540 & " " & -(lt - 1) * (PinPitch * 2540) & " 0 2 0"
                Print #1, "L 558800 " & -(lt - 1) * (PinPitch * 2540) & " 228600 0 2 0 1 0 " & Sheets("Template").Cells(Row, 3).Value
                Print #1, "A 457200 " & -(lt - 1) * (PinPitch * 2540) & " 203200 0 9 3 #=" & Sheets("Template").Cells(Row, 2).Value
                Print #1, "A 0 0 9 0 3 0 PINTYPE=" & GetPinTypeDX(Sheets("Template").Cells(Row, 4).Value)
                PinCnt = PinCnt + 1
                Row = Row + 1
            Next lt
            
            'Right Pins
            If OriginPin = "Right" Then
                For rt = 1 To RightPinCnt
                    Print #1, "P " & PinCnt & " 0 " & (-(rt - 1) * PinPitch) * 2540 & " " & -PinLength * 2540 & " " & (-(rt - 1) * PinPitch) * 2540 & " 0 3 0"
                    Print #1, "L " & (-PinLength - 20) * 2540 & " " & (-(rt - 1) * PinPitch) * 2540 & " 228600 0 8 0 1 0 " & Sheets("Template").Cells(Row, 3).Value
                    Print #1, "A " & (-PinLength + 20) * 2540 & " " & (-(rt - 1) * PinPitch) * 2540 & " 203200 0 3 3 #=" & Sheets("Template").Cells(Row, 2).Value
                    Print #1, "A 0 0 9 0 3 0 PINTYPE=" & GetPinTypeDX(Sheets("Template").Cells(Row, 4).Value)
                    PinCnt = PinCnt + 1
                    Row = Row + 1
                Next rt
            ElseIf OriginPin = "Left" Then
                For rt = 1 To RightPinCnt
                    Print #1, "P " & PinCnt & " " & 1016000 + (BoxWidth * 2540) & " " & -(rt - 1) * (PinPitch * 2540) & " " & 508000 + (BoxWidth * 2540) & " " & -(rt - 1) * (PinPitch * 2540) & " 0 3 0"
                    Print #1, "L " & 508000 + ((BoxWidth - 20) * 2540) & " " & -(rt - 1) * (PinPitch * 2540) & " 228600 0 8 0 1 0 " & Sheets("Template").Cells(Row, 3).Value
                    Print #1, "A " & 558800 + (BoxWidth * 2540) & " " & -(rt - 1) * (PinPitch * 2540) & " 203200 0 3 3 #=" & Sheets("Template").Cells(Row, 2).Value
                    Print #1, "A 0 0 9 0 3 0 PINTYPE=" & GetPinTypeDX(Sheets("Template").Cells(Row, 4).Value)
                    PinCnt = PinCnt + 1
                    Row = Row + 1
                Next rt
            ElseIf OriginPin = "Top" Then
                For rt = 1 To RightPinCnt
                'Print #1, vbTab & vbTab & "(pin (pinNum " & PinNum & ") (pt " & BoxWidth + OffsetX + PinLength & ", " & -((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset) & ") (rotation 180) (pinLength " & PinLength & " mils) (pinDisplay (dispPinName true)) (pinName (text (pt " & BoxWidth + OffsetX & ", " & (-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) - 25 & ") (rotation 0) (justify " & Chr(34) & "Right" & Chr(34) & ") (textStyleRef " & Chr(34) & "Normal" & Chr(34) & "))"
    
                    Print #1, "P " & PinCnt & " " & (BoxWidth + OffsetX + PinLength) * 2540 & " " & (-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 2540 & " " & (BoxWidth + OffsetX) * 2540 & " " & (-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 2540 & " 0 3 0"
                    Print #1, "L " & (BoxWidth + OffsetX - 20) * 2540 & " " & (-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 2540 & " 228600 0 8 0 1 0 " & Sheets("Template").Cells(Row, 3).Value
                    Print #1, "A " & (BoxWidth + OffsetX + 20) * 2540 & " " & (-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 2540 & " 203200 0 3 3 #=" & Sheets("Template").Cells(Row, 2).Value
                    Print #1, "A 0 0 9 0 3 0 PINTYPE=" & GetPinTypeDX(Sheets("Template").Cells(Row, 4).Value)
                    PinCnt = PinCnt + 1
                    Row = Row + 1
                Next rt
            End If
            
            'Top Pins
            If OriginPin = "Top" Then
                For tt = 1 To TopPinCnt
                    Print #1, "P " & PinCnt & " " & (RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 2540 & " 0 " & (RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 2540 & " " & -PinLength * 2540 & " 0 0 0"
                    Print #1, "L " & (RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 2540 & " " & (-PinLength - 20) * 2540 & " 228600 1 8 0 1 0 " & Sheets("Template").Cells(Row, 3).Value
                    Print #1, "A " & (RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 2540 & " " & (-PinLength + 20) * 2540 & " 203200 1 3 3 #=" & Sheets("Template").Cells(Row, 2).Value
                    Print #1, "A 0 0 9 0 3 0 PINTYPE=" & GetPinTypeDX(Sheets("Template").Cells(Row, 4).Value)
                    PinCnt = PinCnt + 1
                    Row = Row + 1
                Next tt
            ElseIf OriginPin = "Left" Then
                For tt = 1 To TopPinCnt
                    Print #1, "P " & PinCnt & " " & (RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 2540 & " " & (OffsetY + PinLength) * 2540 & " " & (RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 2540 & " " & OffsetY * 2540 & " 0 0 0"
                    Print #1, "L " & (RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 2540 & " " & (OffsetY - 20) * 2540 & " 228600 1 8 0 1 0 " & Sheets("Template").Cells(Row, 3).Value
                    Print #1, "A " & (RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 2540 & " " & (OffsetY + 20) * 2540 & " 203200 1 3 3 #=" & Sheets("Template").Cells(Row, 2).Value
                    Print #1, "A 0 0 9 0 3 0 PINTYPE=" & GetPinTypeDX(Sheets("Template").Cells(Row, 4).Value)
                    PinCnt = PinCnt + 1
                    Row = Row + 1
                Next
            End If
            
            'Bottom Pins
            If OriginPin = "Bottom" Then
                For bt = 1 To BotPinCnt
                    Print #1, "P " & PinCnt & " " & (RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540 & " 0 " & " " & (RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540 & " " & PinLength * 2540 & " 0 1 0"
                    Print #1, "L " & (RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540 & " " & (PinLength + 20) * 2540 & " 228600 1 2 0 1 0 " & Sheets("Template").Cells(Row, 3).Value
                    Print #1, "A " & (RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540 & " " & (PinLength - 20) * 2540 & " 203200 1 9 3 #=" & Sheets("Template").Cells(Row, 2).Value
                    Print #1, "A 0 0 9 0 3 0 PINTYPE=" & GetPinTypeDX(Sheets("Template").Cells(Row, 4).Value)
                    PinCnt = PinCnt + 1
                    Row = Row + 1
                Next bt
             ElseIf OriginPin = "Left" Then
                For bt = 1 To BotPinCnt
                    Print #1, "P " & PinCnt & " " & (RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 2540 & " " & (-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540 & " " & (RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 2540 & " " & (-BotOffset - ((PinCntLR - 1) * PinPitch)) * 2540 & " " & " 0 1 0"
                    Print #1, "L " & (RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 2540 & " " & (-BotOffset - ((PinCntLR - 1) * PinPitch) + 20) * 2540 & " 228600 1 2 0 1 0 " & Sheets("Template").Cells(Row, 3).Value
                    Print #1, "A " & (RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 2540 & " " & (-BotOffset - ((PinCntLR - 1) * PinPitch) - 20) * 2540 & " 203200 1 9 3 #=" & Sheets("Template").Cells(Row, 2).Value
                    Print #1, "A 0 0 9 0 3 0 PINTYPE=" & GetPinTypeDX(Sheets("Template").Cells(Row, 4).Value)
                    PinCnt = PinCnt + 1
                    Row = Row + 1
                Next bt
             ElseIf OriginPin = "Right" Then
                For bt = 1 To BotPinCnt
                    Print #1, "P " & PinCnt & " " & (RoundDownToNearest(-PinLength - ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 2540 & " " & (-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 2540 & " " & (RoundDownToNearest(-PinLength - ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 2540 & " " & (-BotOffset - (PinCntLR * PinPitch)) * 2540 & " 0 1 0"
                    Print #1, "L " & (RoundDownToNearest(-PinLength - ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 2540 & " " & (-BotOffset - ((PinCntLR - 1) * PinPitch) + 20) * 2540 & " 228600 1 2 0 1 0 " & Sheets("Template").Cells(Row, 3).Value
                    Print #1, "A " & (RoundDownToNearest(-PinLength - ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 2540 & " " & (-BotOffset - ((PinCntLR - 1) * PinPitch) - 20) * 2540 & " 203200 1 9 3 #=" & Sheets("Template").Cells(Row, 2).Value
                    Print #1, "A 0 0 9 0 3 0 PINTYPE=" & GetPinTypeDX(Sheets("Template").Cells(Row, 4).Value)
                    PinCnt = PinCnt + 1
                    Row = Row + 1
                Next bt
             ElseIf OriginPin = "Top" Then
                For bt = 1 To BotPinCnt
                    Print #1, "P " & PinCnt & " " & (RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540 & " " & (-BoxHeight - (2 * PinLength)) * 2540 & " " & (RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540 & " " & (-BoxHeight - (PinLength)) * 2540 & " 0 1 0"
                    Print #1, "L " & (RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540 & " " & (-BoxHeight + 20 - (PinLength)) * 2540 & " 228600 1 2 0 1 0 " & Sheets("Template").Cells(Row, 3).Value
                    Print #1, "A " & (RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 2540 & " " & (-BoxHeight - 20 - (PinLength)) * 2540 & " 203200 1 9 3 #=" & Sheets("Template").Cells(Row, 2).Value
                    Print #1, "A 0 0 9 0 3 0 PINTYPE=" & GetPinTypeDX(Sheets("Template").Cells(Row, 4).Value)
                    PinCnt = PinCnt + 1
                    Row = Row + 1
                Next bt
            End If
        ElseIf Sheets("Setup").Cells(110, 2) = "Resistor" Then
        
            'Symbol Outline
            Print #1, "D 0 508000 1778000 -508000"
            'Symbol Type (MODULE)
            Print #1, "Y 1"
            'Symbol Properties
            Print #1, "U 889000 381000 254000 0 5 3 REFDES=R?"
            Print #1, "U 889000 -381000 254000 0 5 3 Manufacturer Part Number=?"
            Print #1, "U 889000 -762000 254000 0 5 0 DEVICE=?"
            Print #1, "U 889000 -1016000 254000 0 5 0 PKG_TYPE=?"
            'FORWARD_PCB
            Print #1, "U 0 0 254000 0 1 0 FORWARD_PCB=1"
            'Box
            Print #1, "b 508000 -127000 1270000 127000"
            'Pins
            Print #1, "P 1 0 0 508000 0 0 2 0"
            Print #1, "L 558800 0 228600 0 2 0 0 0 A"
            Print #1, "A 457200 0 203200 0 9 0 #=1"
            Print #1, "A 0 0 0 0 3 0 PINTYPE=IN"
            Print #1, "P 2 1778000 0 1270000 0 0 3 0"
            Print #1, "L 1219200 0 228600 0 8 0 0 0 B"
            Print #1, "A 1320800 0 203200 0 3 0 #=2"
            Print #1, "A 0 0 0 0 3 0 PINTYPE=IN"
            
        ElseIf Sheets("Setup").Cells(110, 2) = "Diode" Then
            
            'Symbol Outline
            Print #1, "D 0 508000 1524000 -508000"
            'Symbol Type (MODULE)
            Print #1, "Y 1"
            'Symbol Properties
            Print #1, "U 762000 381000 254000 0 5 3 REFDES=D?"
            Print #1, "U 762000 -381000 254000 0 5 3 Manufacturer Part Number=?"
            Print #1, "U 889000 -762000 254000 0 5 0 DEVICE=?"
            Print #1, "U 889000 -1016000 254000 0 5 0 PKG_TYPE=?"
            'FORWARD_PCB
            Print #1, "U 0 -508000 254000 0 1 0 FORWARD_PCB=1"
            'Lines
            Print #1, "l 2 508000 -254000 508000 254000"
            Print #1, "l 4 1016000 254000 1016000 -254000 508000 0 1016000 254000"
            'Pins
            Print #1, "P 1 0 0 508000 0 0 2 0"
            Print #1, "L 558800 0 228600 0 2 0 0 0 A"
            Print #1, "A 457200 0 203200 0 9 0 #=1"
            Print #1, "A 0 0 0 0 3 0 PINTYPE=IN"
            Print #1, "P 2 1524000 0 1016000 0 0 3 0"
            Print #1, "L 965200 0 228600 0 8 0 0 0 B"
            Print #1, "A 1066800 0 203200 0 3 0 #=2"
            Print #1, "A -254000 0 0 0 3 0 PINTYPE=IN"
            
        ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Non-Polarised)" Then
        
            'Symbol Outline
            Print #1, "D 0 762000 1270000 -762000"
            'Symbol Type (MODULE)
            Print #1, "Y 1"
            'Symbol Properties
            Print #1, "U 635000 508000 254000 0 5 3 REFDES=C?"
            Print #1, "U 635000 -508000 254000 0 5 3 Manufacturer Part Number=?"
            Print #1, "U 889000 -762000 254000 0 5 0 DEVICE=?"
            Print #1, "U 889000 -1016000 254000 0 5 0 PKG_TYPE=?"
            'FORWARD_PCB
            Print #1, "U 0 0 254000 0 1 0 FORWARD_PCB=1"
            'Lines
            Print #1, "l 2 558800 254000 558800 -254000"
            Print #1, "l 2 711200 254000 711200 -254000"
            Print #1, "l 2 508000 0 558800 0"
            Print #1, "l 2 711200 0 762000 0"
            'Pins
            Print #1, "P 1 0 0 508000 0 0 2 0"
            Print #1, "L 558800 0 228600 0 2 0 0 0 A"
            Print #1, "A 457200 0 203200 0 9 0 #=1"
            Print #1, "A 0 0 0 0 3 0 PINTYPE=IN"
            Print #1, "P 2 1270000 0 762000 0 0 3 0"
            Print #1, "L 711200 0 228600 0 8 0 0 0 B"
            Print #1, "A 812800 0 203200 0 3 0 #=2"
            Print #1, "A -508000 0 0 0 3 0 PINTYPE=IN"
        
        ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Polarised)" Then
        
            'Symbol Outline
            Print #1, "D 0 762000 1270000 -762000"
            'Symbol Type (MODULE)
            Print #1, "Y 1"
            'Symbol Properties
            Print #1, "U 635000 508000 254000 0 5 3 REFDES=C?"
            Print #1, "U 635000 -508000 254000 0 5 3 Manufacturer Part Number=?"
            Print #1, "U 889000 -762000 254000 0 5 0 DEVICE=?"
            Print #1, "U 889000 -1016000 254000 0 5 0 PKG_TYPE=?"
            'FORWARD_PCB
            Print #1, "U 0 0 254000 0 1 0 FORWARD_PCB=1"
            'Boxes and Lines
            Print #1, "b 508000 -254000 584200 254000"
            Print #1, "b 685800 -254000 762000 254000"
            Print #1, "|GRPHSTL -1 1 0 1"
            Print #1, "l 2 457200 127000 355600 127000"
            Print #1, "l 2 406400 76200 406400 177800"
            'Pins
            Print #1, "P 1 0 0 508000 0 0 2 0"
            Print #1, "L 558800 0 228600 0 2 0 0 0 A"
            Print #1, "A 457200 0 203200 0 9 0 #=1"
            Print #1, "A 0 0 0 0 3 0 PINTYPE=IN"
            Print #1, "P 2 1270000 0 762000 0 0 3 0"
            Print #1, "L 711200 0 228600 0 8 0 0 0 B"
            Print #1, "A 812800 0 203200 0 3 0 #=2"
            Print #1, "A -508000 0 0 0 3 0 PINTYPE=IN"
        
        
        ElseIf Sheets("Setup").Cells(110, 2) = "Inductor" Then
        
            Print #1, "D 0 508000 2032000 -508000"
            'Symbol Type (MODULE)
            Print #1, "Y 1"
            'Symbol Properties
            Print #1, "U 1016000 381000 254000 0 5 3 REFDES=L?"
            Print #1, "U 1016000 -254000 254000 0 5 3 Manufacturer Part Number=?"
            Print #1, "U 889000 -762000 254000 0 5 0 DEVICE=?"
            Print #1, "U 889000 -1016000 254000 0 5 0 PKG_TYPE=?"
            'FORWARD_PCB
            Print #1, "U 0 0 254000 0 1 0 FORWARD_PCB=1"
            'Arcs
            Print #1, "a 508000 0 635000 127000 762000 0"
            Print #1, "a 762000 0 889000 127000 1016000 0"
            Print #1, "a 1016000 0 1143000 127000 1270000 0"
            Print #1, "a 1270000 0 1397000 127000 1524000 0"
            'Pins
            Print #1, "P 1 0 0 508000 0 0 2 0"
            Print #1, "L 558800 0 228600 0 2 0 0 0 A"
            Print #1, "A 457200 0 203200 0 9 0 #=1"
            Print #1, "A 0 0 0 0 3 0 PINTYPE=IN"
            Print #1, "P 2 2032000 0 1524000 0 0 3 0"
            Print #1, "L 1473200 0 228600 0 8 0 0 0 B"
            Print #1, "A 1574800 0 203200 0 3 0 #=2"
            Print #1, "A 254000 0 0 0 3 0 PINTYPE=IN"
        
        End If
        
        
        Print #1, "E"

        Close #1

        LeftPinCnt = 0
        RightPinCnt = 0
        TopPinCnt = 0
        BotPinCnt = 0
        LeftPinLen = 0
        RightPinLen = 0
        
        r = r - 1
        

    End If

    PrevGate = CurrGate
    r = r + 1
    

    
Wend

End Function

Private Sub Chk_PreDS_PCB_Click()
If Chk_PreDS_PCB Then
    Chk_PreDS_SCH = 1
    
    Chk_PL_SCH = 0
    Chk_DX_SCH = 0
    Chk_PL_PCB = 0
    Chk_OC_SCH = 0
    Chk_AP_PCB = 0
    Chk_CS_SCH = 0
    Chk_CS_PCB = 0
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_PX_SCH = 0
    Chk_PX_PCB = 0
    
    Show_PCB
    
Else
    Chk_PreDS_SCH = 0
End If
Enable_btn_OK
End Sub

Private Sub Chk_PreDS_SCH_Click()
If Chk_PreDS_SCH Then
    Chk_PreDS_PCB = 1
    
    Chk_PL_SCH.Enabled = False
    Chk_DX_SCH.Enabled = False
    Chk_PL_PCB.Enabled = False
    Chk_OC_SCH.Enabled = False
    Chk_AP_PCB.Enabled = False
    Chk_CS_SCH.Enabled = False
    Chk_CS_PCB.Enabled = False
    Chk_AD_SCH.Enabled = False
    Chk_AD_PCB.Enabled = False
    Chk_DS_SCH.Enabled = False
    Chk_DS_PCB.Enabled = False
    Chk_T3001.Enabled = False
    Chk_PX_SCH.Enabled = False
    Chk_PX_PCB.Enabled = False
    
    Chk_AD_SCH = 0
    Chk_AD_PCB = 0
    Chk_PL_SCH = 0
    Chk_DX_SCH = 0
    Chk_PL_PCB = 0
    Chk_OC_SCH = 0
    Chk_AP_PCB = 0
    Chk_CS_SCH = 0
    Chk_CS_PCB = 0
    Chk_DS_SCH = 0
    Chk_DS_PCB = 0
    Chk_PX_SCH = 0
    Chk_PX_PCB = 0
    
    Show_SCH
    
Else
    Chk_PreDS_PCB = 0
    
    If Has_PL_SCH Then Chk_PL_SCH.Enabled = True
    If Has_PL_PCB Then Chk_PL_PCB.Enabled = True
    Chk_DX_SCH.Enabled = True
    Chk_OC_SCH.Enabled = True
    Chk_AP_PCB.Enabled = True
    Chk_CS_SCH.Enabled = True
    Chk_CS_PCB.Enabled = True
    Chk_AD_SCH.Enabled = True
    Chk_AD_PCB.Enabled = True
    Chk_DS_SCH.Enabled = True
    Chk_DS_PCB.Enabled = True
    Chk_T3001.Enabled = True
    Chk_PX_SCH.Enabled = True
    Chk_PX_PCB.Enabled = True
    
    Hide_ALL
    
End If
Enable_btn_OK



End Sub

Private Sub Img_WarningAN_Click()
ThisWorkbook.FollowHyperlink Address:="mailto:info@samacsys.com?subject=Allegro Alphanumerics&body=Please accept this email as a request for EPW to support Alphanumerics in Allegro Layout."
End Sub

Private Sub Lbl_DesignSpark_Click()
ChangeDesignSparkExe
End Sub

Private Sub UserForm_Initialize()

Dim PadsExe As String
'Check if PADS is installed
If Not Has_PL_SCH Then Chk_PL_SCH.Enabled = False
If Not Has_PL_PCB Then Chk_PL_PCB.Enabled = False

End Sub
Function Has_PL_SCH() As Boolean
If IsRegKey("HKEY_CLASSES_ROOT\PowerLogic.Schematic\shell\open\command\") Then
    Has_PL_SCH = True
Else
    Has_PL_SCH = False
End If

End Function
Function Has_PL_PCB() As Boolean
If IsRegKey("HKEY_CLASSES_ROOT\PowerPCB.Design\shell\open\command\") Then
    Has_PL_PCB = True
Else
    Has_PL_PCB = False
End If

End Function

Function IsRegKey(RegKey As String) As Boolean

With CreateObject("WScript.Shell")
  On Error Resume Next            ' turn off error trapping
    sValue = .RegRead(RegKey)     ' read attempt
    IsRegKey = (Err.Number = 0)   ' test for success
  On Error GoTo 0                 ' restore error trapping
End With

End Function

Sub RemoveReadOnly(filePath As String)
    Dim FSO As Object
    Dim fil As Object
    Set FSO = CreateObject("Scripting.FileSystemObject")
    Set fil = FSO.GetFile(filePath)

    If fil.Attributes And 1 Then '1 = ReadOnly
        fil.Attributes = fil.Attributes - 1
    End If
End Sub


Function ExportT3001() As String
Dim GateCnt As Integer
Dim GateNo As Integer
Dim SYMname As String
Dim SymbolFile As String
Dim BoxWidthLR As Double
Dim BoxWidthTB As Double
Dim PinPitch As Double
Dim EmailBody As String
Dim DecalAscLn As String
Dim SpaceIndex As Integer
Dim PadDefs() As String
Dim NextSpaceIndex As Integer
Dim SpaceIndex1 As Integer
Dim SpaceIndex2 As Integer
Dim PrevDecalAscLn As String
Dim FirstSpaceIndex As Integer
Dim Alphanumeric As Boolean
Dim SkipPadDef As Boolean
Dim PadCodes() As String
Dim tCount As Integer
Dim outlinesArray() As String
Dim outlinesArrayRow As Integer
Dim pinFunction As Integer

tCount = 0


Alphanumeric = False

MissingValues = vbNullString

If Replace(txt_BaseName.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Symbol Base Name"
Else
    txt_BaseName.Value = Replace(txt_BaseName.Value, Space(1), vbNullString)
    Sheets("Setup").Cells(10, 2).Value = txt_BaseName.Value
End If

Sheets("Setup").Cells(8, 2).Value = cbo_PinLength.Value

'If Replace(Txt_PinPitch.Value, Space(1), vbNullString) = vbNullString Then
'    MissingValues = MissingValues & ", " & "Symbol Pin Pitch"
'Else
    Sheets("Setup").Cells(12, 2).Value = cbo_PinPitch.Value
'End If

If Replace(txt_ExportDir.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Export Directory"
Else
    Sheets("Setup").Range("B16").Value = txt_ExportDir.Value
End If

'If Chk_UseExisting Then
    Sheets("Setup").Cells(102, 2).Value = "TRUE"
'Else
'    Sheets("Setup").Cells(102, 2).Value = "FALSE"
'End If

Sheets("Setup").Cells(15, 2).Value = cbo_PCB.Value

Sheets("Setup").Cells(14, 2).Value = Txt_PinCnt.Value

Sheets("Setup").Cells(17, 3).Value = txt_RDP.Value

Sheets("Setup").Range("B13").Value = cbo_LibLst.Value
Sheets("Setup").Range("C13").Value = cbo_SubCat.Value

If Replace(Txt_PartName.Value, Space(1), vbNullString) = vbNullString Then
    MissingValues = MissingValues & ", " & "Part Name"
Else
    Txt_PartName.Value = Replace(Txt_PartName.Value, Space(1), vbNullString)
    Sheets("Setup").Cells(18, 2).Value = Txt_PartName.Value
End If

If MissingValues <> vbNullString Then
    MsgBox "Please Enter Value for " & Mid(MissingValues, 3), vbOKOnly, "ECAD Part Wizard"
    Exit Function
End If

    Success = True

    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[AlphaNumSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

filePath = txt_ExportDir.Value
If Right(filePath, 1) <> "\" Then filePath = filePath & "\"

PinCntPCB = Txt_PinCnt.Value
PinLength = cbo_PinLength.Value
If PinLength = 2.54 Then PinLength = 100
If PinLength = 5.08 Then PinLength = 200
'Debug.Print PinLength
LogFam = txt_RDP.Value
PinPitch = cbo_PinPitch.Value
If PinPitch = 2.54 Then PinPitch = 100
If PinPitch = 5.08 Then PinPitch = 200
BaseName = txt_BaseName.Value
PCBdecal = cbo_PCB.Value
PTName = Replace(Txt_PartName.Value, ",", "_")
LeftPinCnt = 0
RightPinCnt = 0
TopPinCnt = 0
BotPinCnt = 0
LeftPinLen = 0
RightPinLen = 0
TopPinLen = 0
BotPinLen = 0
GateCnt = 0
NoOfGates = 1


If Right(PCBdecal, 1) = "N" Or Right(PCBdecal, 3) = "N-D" Then
    WorksheetName = "FP-N"
ElseIf Right(PCBdecal, 1) = "L" Or Right(PCBdecal, 3) = "L-D" Then
    WorksheetName = "FP-L"
ElseIf Right(PCBdecal, 1) = "M" Or Right(PCBdecal, 3) = "M-D" Then
    WorksheetName = "FP-M"
Else
    WorksheetName = "FP-N"
End If

'***DETERMINE NUMBER OF OUTLINES***
    Row = 4
    packageOutlines = 0
    
    Do
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        
        If Left(DecalAscLn, 6) = "CIRCLE" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LayerNo = 26 Or LayerNo = 20 Then
                packageOutlines = packageOutlines + 1
            End If
        End If
        
        If Left(DecalAscLn, 6) = "CLOSED" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 4
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 2 Then NoOfXY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LayerNo = 26 Or LayerNo = 20 Then
                packageOutlines = packageOutlines + (NoOfXY - 1)
            End If
        End If
        
        If Left(DecalAscLn, 4) = "OPEN" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 4
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 2 Then LineCount = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
            If LayerNo = 26 Or LayerNo = 20 Then
'                Debug.Print LineCount
                packageOutlines = packageOutlines + (LineCount - 1)
            End If

        End If
        Row = Row + 1

    Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")

    Debug.Print "pkgOutlines = " & packageOutlines

    ReDim outlinesArray(packageOutlines, 9)
    outlinesArrayRow = 1
    
    'Determine Gate Count
    r = 2
    PrevGate = Sheets("Template").Cells(r, 1).Value
    CurrGate = Sheets("Template").Cells(r, 1).Value
    
    While CurrGate <> vbNullString
        If CurrGate <> PrevGate Then NoOfGates = NoOfGates + 1
        PrevGate = CurrGate
        r = r + 1
        CurrGate = Sheets("Template").Cells(r, 1).Value
    Wend
    
    If NoOfGates <> 1 Then
        SYMname = BaseName & "-" & Num2Lett(GateCnt)
    Else
        SYMname = BaseName
    End If
    SymbolFile = filePath & Replace(BaseName, ".", "_") & ".CXF"
    
    
    Open SymbolFile For Output As #1






'Export PCB Components


If Not Img_WarningD.Visible Then
    
    'Retrieve Padstack Information from PADS Decal ASCII to derive padStyleDefs
    PadDefLst = ","
    DecalHdrRow = 4
    DecalNo = 1
    Row = 4
    StartCol = 0
    PCNo = 0
    
    Do
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        'Debug.Print Worksheets(WorksheetName).Cells(Row, 1).Value
        'Retrieve number of different padstack definitions
        If Row = DecalHdrRow Then
            
            SpaceIndex = InStr(1, DecalAscLn, Space(1))
            
            ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
            SpaceIndex = SpaceIndex + ExtraSpaces
            
            DecalName = Left(DecalAscLn, SpaceIndex - 1 - ExtraSpaces)
            
            If DecalNo = 1 Then
                For i = 1 To 8
                    If i = 1 Then units = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
                    SpaceIndex = InStr(SpaceIndex + 1, DecalAscLn, Space(1))
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex)
                    SpaceIndex = SpaceIndex + ExtraSpaces
                    If i = 7 Then NoOfPads = Mid(DecalAscLn, SpaceIndex + 1, InStr(SpaceIndex + 1, DecalAscLn, Space(1)) - SpaceIndex - 1)
                Next i
                If units = "I" Then
                    Multiplier = 254000
                ElseIf units = "M" Then
                    Multiplier = 1000000
                End If
                CompHeight = "COMPONENT_HEIGHT=" & Worksheets("Attributes").Range("B7") * Multiplier
            Else
                StartCol = StartCol + 8
            End If
        
            ReDim Preserve PadDefs(NoOfPads, (DecalNo * 8) - 1)
            PadDefs(0, StartCol) = DecalName
            
            NoOfPadstacks = Mid(DecalAscLn, SpaceIndex + 1, Len(DecalAscLn) - (InStr(SpaceIndex + 1, DecalAscLn, Space(1))))
    
        End If
    
   
   
    '***OUTLINES***

'        If DecalAscLn = "*" Then
'            PrevSpaceIndex = 0
'            NextSpaceIndex = 0
'            For i = 1 To 7
'                NextSpaceIndex = InStr(NextSpaceIndex + 1, PrevDecalAscLn, Space(1))
'                If i = 1 Then Pin1IdentX = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
'                If i = 2 Then Pin1IdentY = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
'                If i = 4 Then LAYER = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
'                ExtraSpaces = GetExtraSpaces(PrevDecalAscLn, NextSpaceIndex)
'                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
'                PrevSpaceIndex = NextSpaceIndex
'            Next i
'            If LAYER = 26 Then
'                Print #1, "   (FIGURE FIG" & FigNo & " LC15 LAY38"
'                Print #1, "    (OUTLINE (PT " & Round(50000000 + ((Pin1IdentX - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((Pin1IdentY - Pin1Y) * Multiplier), 0) & ")"
'                Print #1, "     (CWSEMI (PT " & Round(50000000 + ((Pin1IdentX - Pin1X) * Multiplier), 0) & " " & Round(50000000 + (((Pin1IdentY - Pin1Y) + 10) * Multiplier), 0) & "))"
'                Print #1, "     (CWSEMI (PT " & Round(50000000 + ((Pin1IdentX - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((Pin1IdentY - Pin1Y) * Multiplier), 0) & "))"
'                Print #1, "    )"
'                Print #1, "   )"
'                FigNo = FigNo + 1
'
'            End If
'        End If
        
        If Left(DecalAscLn, 6) = "CIRCLE" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
                If LayerNo = 26 Then
                    LayerRef = "4"
'                ElseIf LayerNo = 20 Then
'                    LayerRef = "4" 'Courtyard
                End If
                
                If LayerRef = "4" Then
                
                    Row = Row + 1
                    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                    PrevSpaceIndex = 0
                    NextSpaceIndex = 0
                    NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                    CircleX1 = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                    LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
                    CircleY1 = Val(Mid(DecalAscLn, LastSpaceIndex + 1))
                    Row = Row + 1
                    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                    PrevSpaceIndex = 0
                    NextSpaceIndex = 0
                    NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                    CircleX2 = Val(Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                    LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
                    CircleY2 = Val(Mid(DecalAscLn, LastSpaceIndex + 1))
                    
                    CircleDia = Abs(CircleX1 - CircleX2)
                    CircleRad = CircleDia / 2
                    
                    CenterX1 = CircleX1 + CircleRad
                    CenterY1 = CircleY1 - CircleRad
                    
                    'DISK    XM=-3693785 YM=-1280297 RADIUS=300000   LAYER=4
                    
    '                Debug.Print "outlinesArrayRow = " & outlinesArrayRow
                    
                    outlinesArray(outlinesArrayRow, 1) = "DISK"
                    outlinesArray(outlinesArrayRow, 2) = "XM=" & CenterX1 * Multiplier
                    outlinesArray(outlinesArrayRow, 3) = "YM=" & CenterY1 * Multiplier
                    outlinesArray(outlinesArrayRow, 4) = "RADIUS=" & CircleDia * Multiplier
                    outlinesArray(outlinesArrayRow, 5) = "LAYER=" & LayerRef
                    outlinesArrayRow = outlinesArrayRow + 1
    '                Print #1, "   (FIGURE FIG" & FigNo & " LC15 " & LayerRef
    '                Print #1, "    (OUTLINE (PT " & Round(50000000 + ((CenterX1 - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((CenterY1 - Pin1Y) * Multiplier), 0) & ")"
    '                Print #1, "     (CWSEMI (PT " & Round(50000000 + ((CenterX1 - Pin1X) * Multiplier), 0) & " " & Round(50000000 + (((CenterY1 - Pin1Y) + CircleDia) * Multiplier), 0) & "))"
    '                Print #1, "     (CWSEMI (PT " & Round(50000000 + ((CenterX1 - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((CenterY1 - Pin1Y) * Multiplier), 0) & "))"
    '                Print #1, "    )"
    '                Print #1, "   )"
                    FigNo = FigNo + 1
                End If
        End If
        
        If Left(DecalAscLn, 6) = "CLOSED" Then
        
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 4
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 2 Then NoOfXY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
            LayerRef = vbNullString
            'Layer 25 used for 3D Outline?
            If LayerNo = 20 Then
                LayerRef = "4" 'Courtyard
            ElseIf LayerNo = 26 Then
                LayerRef = "4" 'Silkscreen Top
            End If
            
            If LayerRef = 4 Then
                Outline = vbNullString
                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                PrevXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                PrevX = Val(Left(PrevXY, InStr(PrevXY, Space(1)) - 2)) - Pin1X
                PrevY = Val(Mid(PrevXY, InStr(PrevXY, Space(1)) + 1)) - Pin1Y
                
'                Debug.Print "No of XY = " & NoOfXY
                For i = 2 To NoOfXY
                    Row = Row + 1
                    DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                    FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                    NextXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                    NextX = Val(Left(NextXY, InStr(NextXY, Space(1)) - 2)) - Pin1X
                    NextY = Val(Mid(NextXY, InStr(NextXY, Space(1)) + 1)) - Pin1Y
                    outlinesArray(outlinesArrayRow, 1) = "LINE"
                    outlinesArray(outlinesArrayRow, 2) = "X1=" & PrevX * Multiplier
                    outlinesArray(outlinesArrayRow, 3) = "Y1=" & PrevY * Multiplier
                    outlinesArray(outlinesArrayRow, 4) = "X2=" & NextX * Multiplier
                    outlinesArray(outlinesArrayRow, 5) = "Y2=" & NextY * Multiplier
                    outlinesArray(outlinesArrayRow, 6) = "WIDTH=300000"
                    outlinesArray(outlinesArrayRow, 7) = "LAYER=" & LayerRef
                    outlinesArray(outlinesArrayRow, 8) = "PROPERTIES=0"
                    If LayerNo = 26 Then
                        outlinesArray(outlinesArrayRow, 9) = "DASHED=0"
                    Else
                        outlinesArray(outlinesArrayRow, 9) = "DASHED=1"
                    End If
                    
                    outlinesArrayRow = outlinesArrayRow + 1
                    
                    PrevX = NextX
                    PrevY = NextY
                Next i
            End If
        End If
        
        If Left(DecalAscLn, 4) = "OPEN" Then
        
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 4
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 2 Then NoOfXY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 3 Then LineWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 4 Then LayerNo = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
            LayerRef = vbNullString
            'Layer 25 used for 3D Outline?
            If LayerNo = 20 Then
                LayerRef = "4" 'Courtyard
            ElseIf LayerNo = 26 Then
                LayerRef = "4" 'Silkscreen Top
            End If
            
            If LayerRef <> vbNullString Then

                Row = Row + 1
                DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                
    'Check for arc
                FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
'
                If FirstSpaceIndex + ExtraSpaces <> InStrRev(DecalAscLn, Space(1)) Then
                    Debug.Print "Arc Found!"
'                    PrevSpaceIndex = 0
'                    NextSpaceIndex = 0
'                    For i = 1 To 6
'                        NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
'                        If i = 3 Then StartAngle = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
'                        If i = 4 Then SweepAngle = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
'                        If i = 5 Then LLPX = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
'                        If i = 6 Then LLPY = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
'                        ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
'                        NextSpaceIndex = NextSpaceIndex + ExtraSpaces
 '                       PrevSpaceIndex = NextSpaceIndex
 '                   Next i
 ''
 '                   StartAngle = Left(StartAngle, Len(StartAngle) - 1) & "." & Right(StartAngle, 1)
 '                   SweepAngle = Left(SweepAngle, Len(SweepAngle) - 1) & "." & Right(SweepAngle, 1)
 '                   URPY = Mid(DecalAscLn, InStrRev(DecalAscLn, Space(1)) + 1)
 '
 '                   Radius = (URPY - LLPY) / 2
 '                   ArcCenterX = LLPX + Radius
 '                   ArcCenterY = LLPY + Radius
 '
        'CADSTAR ARC?
        '            Print #1, vbTab & vbTab & vbTab & "(arc (pt " & ArcCenterX - Pin1X & ", " & ArcCenterY - Pin1Y & ") (radius " & Radius & ") (startAngle " & StartAngle & ") (sweepAngle " & SweepAngle & ") (width " & LineWidth & "))"
        
'                    Row = Row + 1 'Skip SecondXY for arc
                
                Else
                
                
                    If LayerRef = 4 Then
                        Debug.Print DecalAscLn
                        Outline = vbNullString
'                        Row = Row + 1
'                        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                        FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                        ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                        PrevXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                        PrevX = Val(Left(PrevXY, InStr(PrevXY, Space(1)) - 2)) - Pin1X
                        PrevY = Val(Mid(PrevXY, InStr(PrevXY, Space(1)) + 1)) - Pin1Y
                        
                        Debug.Print "No of XY = " & NoOfXY
                        For i = 2 To NoOfXY
                            Row = Row + 1
                            DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
                            Debug.Print DecalAscLn
                            FirstSpaceIndex = InStr(DecalAscLn, Space(1))
                            ExtraSpaces = GetExtraSpaces(DecalAscLn, FirstSpaceIndex)
                            NextXY = Replace(DecalAscLn, Space(ExtraSpaces + 1), ", ")
                            NextX = Val(Left(NextXY, InStr(NextXY, Space(1)) - 2)) - Pin1X
                            NextY = Val(Mid(NextXY, InStr(NextXY, Space(1)) + 1)) - Pin1Y
                            outlinesArray(outlinesArrayRow, 1) = "LINE"
                            outlinesArray(outlinesArrayRow, 2) = "X1=" & PrevX * Multiplier
                            outlinesArray(outlinesArrayRow, 3) = "Y1=" & PrevY * Multiplier
                            outlinesArray(outlinesArrayRow, 4) = "X2=" & NextX * Multiplier
                            outlinesArray(outlinesArrayRow, 5) = "Y2=" & NextY * Multiplier
                            outlinesArray(outlinesArrayRow, 6) = "WIDTH=300000"
                            outlinesArray(outlinesArrayRow, 7) = "LAYER=" & LayerRef
                            outlinesArray(outlinesArrayRow, 8) = "PROPERTIES=0"
                            If LayerNo = 26 Then
                                outlinesArray(outlinesArrayRow, 9) = "DASHED=0"
                            Else
                                outlinesArray(outlinesArrayRow, 9) = "DASHED=1"
                            End If
                            
                            outlinesArrayRow = outlinesArrayRow + 1
                            
                            PrevX = NextX
                            PrevY = NextY
                        Next i
                    End If

                End If
    '            Print #1, vbTab & vbTab & ")"
            End If
        End If
    
    
    
        If Left(DecalAscLn, 1) = "T" Then
            
            FirstSpaceIndex = InStr(DecalAscLn, Space(1))
            
            If (FirstSpaceIndex = 2 And (IsNumeric(Mid(DecalAscLn, 3, 1)) Or (Mid(DecalAscLn, 3, 1) = "-"))) Or (IsNumeric(Mid(DecalAscLn, 2, 1))) Or (Mid(DecalAscLn, 2, 1) = "-") Then
                
                LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
                PinNo = Mid(DecalAscLn, LastSpaceIndex + 1)
                tCount = tCount + 1
                
                
    '            If Not IsNumeric(PinNo) Then
                    TempRow = 2
                    
                    Do While CStr(Worksheets("Template").Cells(TempRow, 2).Value) <> PinNo And CStr(Worksheets("Template").Cells(TempRow, 2).Value) <> vbNullString
                        TempRow = TempRow + 1
                    Loop
                    If CStr(Worksheets("Template").Cells(TempRow, 2).Value) <> vbNullString Then
                        If IsNumeric(PinNo) Then
                            PinNo = Worksheets("Template").Cells(TempRow, 7)
                        Else
                            PinNo = tCount
                        End If
                    End If
    '            End If
                
                If FirstSpaceIndex = 2 Then
                    NextSpaceIndex = InStr(3, DecalAscLn, Space(1))
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                    NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                    PinX = Mid(DecalAscLn, 3, NextSpaceIndex - 3)
                    If PinNo = 1 Then Pin1X = PinX
                Else
                    NextSpaceIndex = InStr(2, DecalAscLn, Space(1))
                    ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                    NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                    PinX = Mid(DecalAscLn, 2, NextSpaceIndex - ExtraSpaces - 2)
                End If
                PinY = Mid(DecalAscLn, NextSpaceIndex + 1, InStr(NextSpaceIndex + 1, DecalAscLn, Space(1)) - NextSpaceIndex - 1)
                If PinNo = 1 Then Pin1Y = PinY
                
                PadDefs(PinNo, StartCol + 1) = PinX
                PadDefs(PinNo, StartCol + 2) = PinY
                
            End If
            
        End If
        
        If Left(DecalAscLn, 3) = "PAD" Then
        
        SpaceIndex1 = InStr(1, DecalAscLn, Space(1))
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex1)
        SpaceIndex1 = SpaceIndex1 + ExtraSpaces
        SpaceIndex2 = InStr(SpaceIndex1 + 1, DecalAscLn, Space(1))
        ExtraSpaces = GetExtraSpaces(DecalAscLn, SpaceIndex2)
        SpaceIndex2 = SpaceIndex2 + ExtraSpaces
        
        SpaceIndex2 = InStr(5, DecalAscLn, Space(1))
        Pad = Mid(DecalAscLn, SpaceIndex1 + 1, SpaceIndex2 - SpaceIndex1 - 1)
        
        LastSpaceIndex = InStrRev(DecalAscLn, Space(1))
        DrillSize = Mid(DecalAscLn, LastSpaceIndex + 1)
        
        If DrillSize <> 0 Then IsPTH = True
        
        Row = Row + 1
        'Mounted Side (Top)
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        'Get Pad Shape
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        For i = 1 To 3
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 1 Then PadLayer = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            
            If i = 2 Then PadWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            
            If i = 3 And NextSpaceIndex <> 0 Then
                Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            Else
                Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
            End If
        
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
        
        If Shape = "R" Or Shape = "S" Then
            If Shape = "R" Then PadShape = 0
            If Shape = "S" Then PadShape = 2
            PadHeight = PadWidth
            PadRotation = 0
        ElseIf Shape = "RF" Then
            PadShape = 2
            For i = 4 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 5 Then
                    PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                End If
                If i = 6 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                If i = 7 And PadHeight = 0 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            
        ElseIf Shape = "OF" Then
            PadShape = 3
            For i = 4 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 4 Then
                    PadRotation = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                End If
                If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
        
            Next i
            
    '        Debug.Print "PadHeight = " & PadHeight
        End If
    
        'BuildPadDef
        PadDef = Shape & "W" & PadWidth & "L" & PadHeight & "H" & DrillSize ' & "A" & PadRotation
        If InStr(PadDefLst, "," & PadDef & ",") <> 0 Then
            SkipPadDef = True
        Else
            SkipPadDef = False
        End If
        
        If Not SkipPadDef Then
            ReDim Preserve PadCodes(PCNo)
            PCNo = PCNo + 1
            PadCodes(PCNo - 1) = PadDef
            PadDefLst = PadDefLst & PadDef & ","
        End If
        
        If PadRotation = 0 Then
            PadRotation = 90
        ElseIf PadRotation = 90 Then
            PadRotation = 0
        End If
        
        
        'Debug.Print DecalNo
        If Pad = 0 Then
            For i = 1 To NoOfPads
                If PadDefs(i, StartCol) = vbNullString Then PadDefs(i, StartCol) = PadDef
                If PadDefs(i, StartCol + 3) = vbNullString Then PadDefs(i, StartCol + 3) = PadRotation
                If PadDefs(i, StartCol + 4) = vbNullString Then PadDefs(i, StartCol + 4) = PadWidth
                If PadDefs(i, StartCol + 5) = vbNullString Then PadDefs(i, StartCol + 5) = PadHeight
                If PadDefs(i, StartCol + 6) = vbNullString Then PadDefs(i, StartCol + 6) = PadShape
                If PadDefs(i, StartCol + 7) = vbNullString Then PadDefs(i, StartCol + 7) = DrillSize
            Next i
        Else
            PadDefs(Pad, StartCol) = PadDef
            PadDefs(Pad, StartCol + 3) = PadRotation
            PadDefs(Pad, StartCol + 4) = PadWidth
            PadDefs(Pad, StartCol + 5) = PadHeight
            PadDefs(Pad, StartCol + 6) = PadShape
            PadDefs(Pad, StartCol + 7) = DrillSize
        End If
        
        'Skip Inner Layers
        Row = Row + 1
        
        'Opposite Side (Bottom)
        Row = Row + 1
        'Bottom
        PrevSpaceIndex = 0
        NextSpaceIndex = 0
        DecalAscLn = Worksheets(WorksheetName).Cells(Row, 1).Value
        For i = 1 To 3
            NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
            If i = 1 Then PadLayer = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            If i = 2 Then PadWidth = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            If i = 3 And NextSpaceIndex <> 0 Then
                Shape = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
            Else
                Shape = Mid(DecalAscLn, PrevSpaceIndex + 1)
            End If
            ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
            NextSpaceIndex = NextSpaceIndex + ExtraSpaces
            PrevSpaceIndex = NextSpaceIndex
        Next i
        
        If Shape = "R" Or Shape = "S" Then
            If Shape = "R" Then PadShape = 0
            If Shape = "S" Then PadShape = 2
            PadHeight = PadWidth
            PadRotation = 0
        ElseIf Shape = "RF" Then
            PadShape = 2
            For i = 4 To 6
                NextSpaceIndex = InStr(NextSpaceIndex + 1, DecalAscLn, Space(1))
                If i = 5 Then PadHeight = Mid(DecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(DecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
        End If
        
        End If
        
        Row = Row + 1
        
        If Worksheets(WorksheetName).Cells(Row, 1).Value = vbNullString And Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString Then
            DecalHdrRow = Row + 1
            DecalNo = DecalNo + 1
        End If
    
    Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")
    
'Debug.Print PinCntPCB
'Debug.Print packageOutlines

'Control Statements
Print #1, "COMPONENT" & vbTab & "NAME=" & BaseName & vbTab & "VALUE=" & BaseName & vbTab & "PREFIX=" & LogFam & vbTab & "SYMBOLS=" & NoOfGates & vbTab & "PACKAGE=" & PinCntPCB + packageOutlines + 2 & vbTab & "PROPERTIES=6"
Print #1, "ARTICLE_RS-COMPONENTS=" & Worksheets("Attributes").Range("B2")
Print #1, "MANUFACTURER=" & Worksheets("Attributes").Range("B3")
Print #1, "COMPONENT_NAME=" & Worksheets("Attributes").Range("B4")
Print #1, "DATASHEET=" & Worksheets("Attributes").Range("B6")
Print #1, "COMPONENT_TYPE_ID=" & cbo_SubCat.List(cbo_SubCat.ListIndex, 1)
Print #1, CompHeight
 

Print #1, "PACKAGE" & vbTab & "NAME=" & DecalName & vbTab & "X1=0" & vbTab & "Y1=0" & vbTab & "LAYER=4"

For outlines = LBound(outlinesArray) + 1 To UBound(outlinesArray)
    If outlinesArray(outlines, 1) = "DISK" Then
        Print #1, outlinesArray(outlines, 1) & vbTab & outlinesArray(outlines, 2) & vbTab & outlinesArray(outlines, 3) & vbTab & outlinesArray(outlines, 4) & vbTab & outlinesArray(outlines, 5)
    ElseIf outlinesArray(outlines, 1) = "LINE" Then
        Print #1, outlinesArray(outlines, 1) & vbTab & outlinesArray(outlines, 2) & vbTab & outlinesArray(outlines, 3) & vbTab & outlinesArray(outlines, 4) & vbTab & outlinesArray(outlines, 5) & vbTab & outlinesArray(outlines, 6) & vbTab & outlinesArray(outlines, 7) & vbTab & outlinesArray(outlines, 8) & vbTab & outlinesArray(outlines, 9)
    End If
Next outlines
    
    'Remove Padding Spaces
    DecalAscLn = RemovePaddingSpaces(DecalAscLn)
    
    Row = 3
    StartCol = 0
    FigNo = 0
    NextDecal = True
    
    If Not IsPTH Or Not Chk_UseExisting Then
        Pin1X = 0
        Pin1Y = 0
    End If
    
    Do

'PAD    XM=-650000    YM=-950000    WIDTH=350000    HEIGHT=1000000    LAYER=2    PINNUMBER=1

'PAD identifier
'XM=-650000    YM=-950000    center coordinates [nm], default = 0
'WIDTH=350000    pad width [nm], default = 0
'HEIGHT=1000000    pad height [nm], default = 0
'LAYER=2    on copper top only, SMD pad. 0 for symbols elements. Default = 0
'PINNUMBER=1    number for assignment PIN to PAD, 0 = no pin for that pad = default
'FORM=3     pad form, 0=round , 1=octagonal, 2=rectangular, 3=oblong (default), 4=polygonal (see POLY_PAD property below)
'ROUNDED=0    rounding [%]. Integer. For rectangular pad form only
'ROTATION=0    all angles 0 .. 360, floating point value, max 4. decimal digits, [,] or [.] as decimal separator possible.
'0=right=default, 90=top, 180=left, 270=bottom
'DRILL=800000    drill hole [nm]. No drill = 0 = default
'PADNAME=C23    optional for alphanumeric pad names
'STOP=0    solder stop mask: 0=standard, 1=pad completly free, 2=only drill hole free, 3=pad completely covered
'PASTE=0    solder paste: 0=standard, 1=pad covered with paste, 2=no paste
'PROPERTIES=0     how many user-defined property lines follow? (Default=0)

        If NextDecal Then
'            Print #1, "  (SYMDEF L0 " & Chr(34) & PadDefs(0, StartCol) & Chr(34) & " " & Chr(34) & Chr(34) & " (PT 50000000 50000000)"
'            Print #1, "   (VERSION 1)"
            
            For i = 1 To NoOfPads
                For PC = 0 To UBound(PadCodes)
                    If PadDefs(i, StartCol) = PadCodes(PC) Then GoTo PrintPAD
                Next PC
PrintPAD:
                RotationTxt = vbNullString
                If PadDefs(i, StartCol + 3) <> 0 Then
                    RotationTxt = " (ORIENT " & PadDefs(i, StartCol + 3) * 1000 & ")"
                End If
'                If IsPTH Then
'                    Print #1, "   (PAD " & i & " (PT " & Round(50000000 + (((CDbl(PadDefs(i, StartCol + 1))) - Pin1X) * Multiplier), 0) & " " & Round(50000000 + (((CDbl(PadDefs(i, StartCol + 2))) - Pin1Y) * Multiplier), 0) & ") PC" & PC & " THRU" & RotationTxt & ")"
'                Else
'                    Print #1, "   (PAD " & i & " (PT " & Round(50000000 + (((CDbl(PadDefs(i, StartCol + 1))) - Pin1X) * Multiplier), 0) & " " & Round(50000000 + (((CDbl(PadDefs(i, StartCol + 2))) - Pin1Y) * Multiplier), 0) & ") PC" & PC & " TOP" & RotationTxt & ")"
                    Print #1, "PAD" & vbTab & "XM=" & Round((CDbl(PadDefs(i, StartCol + 1)) * Multiplier), 0) & vbTab & "YM=" & Round((CDbl(PadDefs(i, StartCol + 2)) * Multiplier), 0) & vbTab & "WIDTH=" & Round(PadDefs(i, StartCol + 4) * Multiplier, 0) & vbTab & "HEIGHT=" & Round(PadDefs(i, StartCol + 5) * Multiplier, 0) & vbTab & "LAYER=2" & vbTab & "PINNUMBER=" & Sheets("Template").Cells(i + 1, 7) & vbTab & "FORM=" & PadDefs(i, StartCol + 6) & vbTab & "ROTATION=" & PadDefs(i, StartCol + 3) & vbTab & "DRILL=" & PadDefs(i, StartCol + 7) * Multiplier & vbTab & "PADNAME=" & Sheets("Template").Cells(i + 1, 2)
'                End If

            Next i
            NextDecal = False
            StartCol = StartCol + 8
        End If

        PrevDecalAscLn = DecalAscLn
        DecalAscLn = RemovePaddingSpaces(Worksheets(WorksheetName).Cells(Row, 1).Value)
        
        If DecalAscLn = "REF-DES" Then
            PrevSpaceIndex = 0
            NextSpaceIndex = 0
            For i = 1 To 7
                NextSpaceIndex = InStr(NextSpaceIndex + 1, PrevDecalAscLn, Space(1))
                If i = 1 Then RefDesX = Val(Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                If i = 2 Then RefDesY = Val(Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1))
                If i = 7 Then LAYER = Mid(PrevDecalAscLn, PrevSpaceIndex + 1, NextSpaceIndex - PrevSpaceIndex - 1)
                ExtraSpaces = GetExtraSpaces(PrevDecalAscLn, NextSpaceIndex)
                NextSpaceIndex = NextSpaceIndex + ExtraSpaces
                PrevSpaceIndex = NextSpaceIndex
            Next i
            If LAYER = 26 Or LAYER = 1 Then
'                Print #1, "   (TEXTLOC COMP_NAME TC25 LAY38 (PT " & Round(50000000 + ((RefDesX - Pin1X) * Multiplier), 0) & " " & Round(50000000 + ((RefDesY - Pin1Y) * Multiplier), 0) & ") (ALIGN CENTERCENTER))"
                Print #1, "TEXT" & vbTab & "CONTENT=0" & vbTab & "X1=" & Round((RefDesX - Pin1X) * Multiplier, 0) & vbTab & "Y1=" & Round((RefDesY - Pin1Y * Multiplier), 0) & vbTab & "WIDTH=1500000" & vbTab & "HEIGHT=1500000" & vbTab & "FONT=DIN-ISO-ANSI" & vbTab & "LAYER=4" & vbTab & "WEIGHT=10" & vbTab & "FUNCTION=1"
'TEXT    CONTENT=SO14    X1=-3865000 Y1=-5230000 WIDTH=1500000   HEIGHT=1500000  FONT=DIN-ISO-ANSI   LAYER=4 WEIGHT=10   FUNCTION=2  GERMAN=!WERT    ENGLISH=!WERT   FRENCH=!WERT
            End If
        End If
        

        Row = Row + 1
        
    If Worksheets(WorksheetName).Cells(Row, 1).Value = vbNullString And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString And Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*") Then
        NextDecal = True
    End If
                        
    Loop While (Worksheets(WorksheetName).Cells(Row, 1).Value <> vbNullString Or Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> vbNullString) And (Worksheets(WorksheetName).Cells(Row + 1, 1).Value <> "*END*")

End If

ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[GateSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(46, 46, 189)
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(192, 143, 46)
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(209, 50, 50)
ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add(Range("Table1[Fracture]"), xlSortOnCellColor, xlAscending, , xlSortNormal).SortOnValue.Color = RGB(45, 187, 45)
With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With


r = 2
PrevGate = Sheets("Template").Cells(r, 1).Value
startRow = 2
CurrGate = Sheets("Template").Cells(r, 1).Value
FigNo = 2

While PrevGate <> vbNullString
    PrevGate = CurrGate
    CurrGate = Sheets("Template").Cells(r, 1).Value
    
    If CurrGate = PrevGate Then
        If Sheets("Template").Cells(r, 1).Interior.ColorIndex = 55 Then
            LeftPinCnt = LeftPinCnt + 1
            If LeftPinLen < Len(Sheets("Template").Cells(r, 3)) Then LeftPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 45 Then
            RightPinCnt = RightPinCnt + 1
            If RightPinLen < Len(Sheets("Template").Cells(r, 3)) Then RightPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 53 Then
            TopPinCnt = TopPinCnt + 1
            If TopPinLen < Len(Sheets("Template").Cells(r, 3)) Then TopPinLen = Len(Sheets("Template").Cells(r, 3))
        ElseIf Sheets("Template").Cells(r, 1).Interior.ColorIndex = 50 Then
            BotPinCnt = BotPinCnt + 1
            If BotPinLen < Len(Sheets("Template").Cells(r, 3)) Then BotPinLen = Len(Sheets("Template").Cells(r, 3))
        End If
    Else
        
        GateCnt = GateCnt + 1
        
        If Sheets("Setup").Cells(110, 2) = "None (Box)" Then
            
            If LeftPinCnt <> 0 Then
                OriginPin = "Left"
            ElseIf TopPinCnt <> 0 Then
                OriginPin = "Top"
            ElseIf RightPinCnt <> 0 Then
                OriginPin = "Right"
            ElseIf BotPinCnt <> 0 Then
                OriginPin = "Bottom"
            End If
            
            If LeftPinCnt > RightPinCnt Then
                PinCntLR = LeftPinCnt
            Else
                PinCntLR = RightPinCnt
            End If
            
            If TopPinCnt = 0 Then
                TopOffset = PinPitch
            Else
                TopOffset = RoundToNearest((TopPinLen * 50) + 200, 100)
            End If
            
            If BotPinCnt = 0 Then
                BotOffset = PinPitch
            Else
                BotOffset = RoundToNearest((BotPinLen * 50) + 200, 100)
            End If
        
            BoxHeightTB = TopOffset + BotOffset
            
            If PinCntLR = 0 Then
                BoxHeightLR = 0
            Else
                BoxHeightLR = ((PinCntLR - 1) * PinPitch)
            End If
            
            BoxHeight = RoundToNearest(BoxHeightLR + BoxHeightTB, 100)
        
            If TopPinCnt > BotPinCnt Then
                PinCntTB = TopPinCnt
            Else
                PinCntTB = BotPinCnt
            End If
            
            If LeftPinLen + RightPinLen = 0 Then
                BoxWidthLR = 0
            Else
                BoxWidthLR = RoundToNearest(((LeftPinLen + RightPinLen) * 50) + 200, 100)
            End If
            
            BoxWidthTB = RoundToNearest((PinCntTB * PinPitch) + PinPitch, 100)
            
            If BoxWidthLR > BoxWidthTB Then
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthLR, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthLR, 100)
                End If
            Else
                If PinCntTB Mod 2 Then
                    BoxWidth = RoundToNearest(BoxWidthTB, 200)
                Else
                    BoxWidth = RoundToNearest(BoxWidthTB, 100)
                End If
            End If
            
            PinCnt = LeftPinCnt + RightPinCnt + TopPinCnt + BotPinCnt
            
            If OriginPin = "Left" Then
                OffsetX = PinLength
                OffsetY = TopOffset
            ElseIf OriginPin = "Top" Then
                If TopPinCnt > BotPinCnt Then
                    OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
                Else
                    OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
                End If
                OffsetY = -(PinLength)
            ElseIf OriginPin = "Right" Then
                OffsetX = -PinLength - BoxWidth
                OffsetY = TopOffset
            ElseIf OriginPin = "Bottom" Then
                If BotPinCnt > TopPinCnt Then
                    OffsetX = -RoundToNearest(BoxWidth / (BotPinCnt + 1), 100)
                Else
                    OffsetX = -RoundToNearest(BoxWidth / (TopPinCnt + 1), 100)
                End If
                OffsetY = PinLength + BoxHeight
            End If
            
        '        StartX = ((2 * BoxWidth) + (2 * PinLength)) * 25400
        '        StartY = ((2 * BoxHeight) + (2 * PinLength)) * 25400
            StartX = 0
            StartY = 0
            
'            FigNo = 2
            If NoOfGates = 1 Then
                suffix = vbNullString
            Else
                suffix = LCase(Num2Lett(GateCnt))
            End If
            
            Debug.Print "Box Width = " & BoxWidth
            Debug.Print "OffsetX = " & OffsetX
            
            Print #1, "SYMBOL" & vbTab & "X1=" & StartX & vbTab & "Y1=" & StartY & vbTab & "LAYER=101" & vbTab & "SUFFIX=" & suffix & vbTab & "NUMBER=" & GateCnt & vbTab & "ELEMENTS=" & PinCnt + 6
            
            Print #1, "LINE" & vbTab & "X1=" & StartX + (OffsetX * 25400) & vbTab & "Y1=" & StartY + (OffsetY * 25400) & vbTab & "X2=" & StartX + ((OffsetX + BoxWidth) * 25400) & vbTab & "Y2=" & StartY + (OffsetY * 25400) & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "LINE" & vbTab & "X1=" & StartX + ((OffsetX + BoxWidth) * 25400) & vbTab & "Y1=" & StartY + (OffsetY * 25400) & vbTab & "X2=" & StartX + ((OffsetX + BoxWidth) * 25400) & vbTab & "Y2=" & StartY + ((OffsetY - BoxHeight) * 25400) & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "LINE" & vbTab & "X1=" & StartX + ((OffsetX + BoxWidth) * 25400) & vbTab & "Y1=" & StartY + ((OffsetY - BoxHeight) * 25400) & vbTab & "X2=" & StartX + (OffsetX * 25400) & vbTab & "Y2=" & StartY + ((OffsetY - BoxHeight) * 25400) & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "LINE" & vbTab & "X1=" & StartX + (OffsetX * 25400) & vbTab & "Y1=" & StartY + ((OffsetY - BoxHeight) * 25400) & vbTab & "X2=" & StartX + (OffsetX * 25400) & vbTab & "Y2=" & StartY + (OffsetY * 25400) & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
        
            'Pin Graphics
            'Left Pins
            For lt = 1 To LeftPinCnt
                pinName = NegateT3001(Worksheets("Template").Cells(FigNo, 3))
                PINNUMBER = Worksheets("Template").Cells(FigNo, 2)
                pinFunction = GetTargetPinFunction(Worksheets("Template").Cells(FigNo, 4))
                If IsNumeric(PINNUMBER) Then
                    Print #1, "PIN" & vbTab & "X1=" & StartX & vbTab & "Y1=" & StartY + ((-(lt - 1) * PinPitch) * 25400) & vbTab & "PINNUMBER=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                Else
                    Print #1, "PIN" & vbTab & "X1=" & StartX & vbTab & "Y1=" & StartY + ((-(lt - 1) * PinPitch) * 25400) & vbTab & "PINNUMBER=" & Worksheets("Template").Cells(FigNo, 7) & vbTab & "PADNAME=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                End If
                Print #1, "TEXT" & vbTab & "CONTENT=" & pinName & vbTab & "X1=" & StartX + (PinLength * 25400) + 508000 & vbTab & "Y1=" & (StartY + ((-(lt - 1) * PinPitch) * 25400)) - 750000 & vbTab & "WIDTH=800000" & vbTab & "HEIGHT=1500000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=10" & vbTab & "FUNCTION=5"
                FigNo = FigNo + 1
            Next lt
                    
            'Right Pins
            If OriginPin = "Right" Then
                For rt = 1 To RightPinCnt
                    pinName = NegateT3001(Worksheets("Template").Cells(FigNo, 3))
                    PINNUMBER = Worksheets("Template").Cells(FigNo, 2)
                    pinFunction = GetTargetPinFunction(Worksheets("Template").Cells(FigNo, 4))
                    If IsNumeric(PINNUMBER) Then
                        Print #1, "PIN" & vbTab & "X1=" & StartX & vbTab & "Y1=" & StartY + ((-(rt - 1) * PinPitch) * 25400) & vbTab & "PINNUMBER=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=180.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    Else
                        Print #1, "PIN" & vbTab & "X1=" & StartX & vbTab & "Y1=" & StartY + ((-(rt - 1) * PinPitch) * 25400) & vbTab & "PINNUMBER=" & Worksheets("Template").Cells(FigNo, 7) & vbTab & "PADNAME=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=180.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    End If
                    Print #1, "TEXT" & vbTab & "CONTENT=" & pinName & vbTab & "X1=" & StartX - (PinLength * 25400) - 508000 & vbTab & "Y1=" & (StartY + ((-(rt - 1) * PinPitch) * 25400)) - 750000 & vbTab & "WIDTH=800000" & vbTab & "HEIGHT=1500000" & vbTab & "RIGHT=YES" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=10" & vbTab & "FUNCTION=5"
                    FigNo = FigNo + 1
                Next rt
            ElseIf OriginPin = "Left" Then
                For rt = 1 To RightPinCnt
                    pinName = NegateT3001(Worksheets("Template").Cells(FigNo, 3))
                    PINNUMBER = Worksheets("Template").Cells(FigNo, 2)
                    pinFunction = GetTargetPinFunction(Worksheets("Template").Cells(FigNo, 4))
                    If IsNumeric(PINNUMBER) Then
                        Print #1, "PIN" & vbTab & "X1=" & StartX + (((PinLength * 2) + BoxWidth) * 25400) & vbTab & "Y1=" & StartY + ((-(rt - 1) * PinPitch) * 25400) & vbTab & "PINNUMBER=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=180.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    Else
                        Print #1, "PIN" & vbTab & "X1=" & StartX + (((PinLength * 2) + BoxWidth) * 25400) & vbTab & "Y1=" & StartY + ((-(rt - 1) * PinPitch) * 25400) & vbTab & "PINNUMBER=" & Worksheets("Template").Cells(FigNo, 7) & vbTab & "PADNAME=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=180.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    End If
                    Print #1, "TEXT" & vbTab & "CONTENT=" & pinName & vbTab & "X1=" & StartX + (((PinLength * 2) + BoxWidth) * 25400) - (PinLength * 25400) - 508000 & vbTab & "Y1=" & (StartY + ((-(rt - 1) * PinPitch) * 25400)) - 750000 & vbTab & "WIDTH=800000" & vbTab & "HEIGHT=1500000" & vbTab & "RIGHT=YES" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=10" & vbTab & "FUNCTION=5"
                    FigNo = FigNo + 1
                Next rt
            ElseIf OriginPin = "Top" Then
                For rt = 1 To RightPinCnt
                    pinName = NegateT3001(Worksheets("Template").Cells(FigNo, 3))
                    PINNUMBER = Worksheets("Template").Cells(FigNo, 2)
                    pinFunction = GetTargetPinFunction(Worksheets("Template").Cells(FigNo, 4))
                    If IsNumeric(PINNUMBER) Then
                        Print #1, "PIN" & vbTab & "X1=" & StartX + ((BoxWidth + OffsetX + PinLength) * 25400) & vbTab & "Y1=" & StartY + ((-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 25400) & vbTab & "PINNUMBER=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=180.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    Else
                        Print #1, "PIN" & vbTab & "X1=" & StartX + ((BoxWidth + OffsetX + PinLength) * 25400) & vbTab & "Y1=" & StartY + ((-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 25400) & vbTab & "PINNUMBER=" & Worksheets("Template").Cells(FigNo, 7) & vbTab & "PADNAME=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=180.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    End If
                    Print #1, "TEXT" & vbTab & "CONTENT=" & pinName & vbTab & "X1=" & StartX + ((BoxWidth + OffsetX + PinLength) * 25400) - (PinLength * 25400) - 508000 & vbTab & "Y1=" & (StartY + ((-((rt - 1) * PinPitch) - (2 * PinPitch + TopOffset)) * 25400)) - 750000 & vbTab & "WIDTH=800000" & vbTab & "HEIGHT=1500000" & vbTab & "RIGHT=YES" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=10" & vbTab & "FUNCTION=5"
                    FigNo = FigNo + 1
                Next rt
            End If

            'Top Pins
            If OriginPin = "Top" Then
                For tt = 1 To TopPinCnt
                pinName = NegateT3001(Worksheets("Template").Cells(FigNo, 3))
                PINNUMBER = Worksheets("Template").Cells(FigNo, 2)
                pinFunction = GetTargetPinFunction(Worksheets("Template").Cells(FigNo, 4))
                If IsNumeric(PINNUMBER) Then
                    Print #1, "PIN" & vbTab & "X1=" & StartX + ((RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 25400) & vbTab & "Y1=" & StartY & vbTab & "PINNUMBER=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=270.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                Else
                    Print #1, "PIN" & vbTab & "X1=" & StartX + ((RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 25400) & vbTab & "Y1=" & StartY & vbTab & "PINNUMBER=" & Worksheets("Template").Cells(FigNo, 7) & vbTab & "PADNAME=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=270.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                End If
                Print #1, "TEXT" & vbTab & "CONTENT=" & pinName & vbTab & "X1=" & StartX + ((RoundDownToNearest((tt - 1) * PinPitch, PinPitch)) * 25400) + 750000 & vbTab & "Y1=" & StartY - (PinLength * 25400) - 508000 & vbTab & "WIDTH=800000" & vbTab & "HEIGHT=1500000" & vbTab & "RIGHT=YES" & vbTab & "FONT=ARIAL" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "WEIGHT=10" & vbTab & "FUNCTION=5"
                FigNo = FigNo + 1
                Next tt
            ElseIf OriginPin = "Left" Then
                For tt = 1 To TopPinCnt
                    pinName = NegateT3001(Worksheets("Template").Cells(FigNo, 3))
                    PINNUMBER = Worksheets("Template").Cells(FigNo, 2)
                    pinFunction = GetTargetPinFunction(Worksheets("Template").Cells(FigNo, 4))
                    If IsNumeric(PINNUMBER) Then
                        Print #1, "PIN" & vbTab & "X1=" & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 25400) & vbTab & "Y1=" & StartY + ((OffsetY + PinLength) * 25400) & vbTab & "PINNUMBER=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=270.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    Else
                        Print #1, "PIN" & vbTab & "X1=" & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 25400) & vbTab & "Y1=" & StartY + ((OffsetY + PinLength) * 25400) & vbTab & "PINNUMBER=" & Worksheets("Template").Cells(FigNo, 7) & vbTab & "PADNAME=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=270.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    End If
                    Print #1, "TEXT" & vbTab & "CONTENT=" & pinName & vbTab & "X1=" & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((TopPinCnt * PinPitch) - PinPitch)) / 2) + ((tt - 1) * PinPitch), PinPitch)) * 25400) & vbTab & "Y1=" & (StartY + ((OffsetY + PinLength) * 25400)) - (PinLength * 25400) - 508000 & vbTab & "WIDTH=800000" & vbTab & "HEIGHT=1500000" & vbTab & "RIGHT=YES" & vbTab & "FONT=ARIAL" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "WEIGHT=10" & vbTab & "FUNCTION=5"
                    FigNo = FigNo + 1
                Next tt
            End If

            'Bottom Pins
            If OriginPin = "Bottom" Then
                For bt = 1 To BotPinCnt
                    pinName = NegateT3001(Worksheets("Template").Cells(FigNo, 3))
                    PINNUMBER = Worksheets("Template").Cells(FigNo, 2)
                    pinFunction = GetTargetPinFunction(Worksheets("Template").Cells(FigNo, 4))
                    If IsNumeric(PINNUMBER) Then
                        Print #1, "PIN" & vbTab & "X1=" & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 25400) & vbTab & "Y1=" & StartY & vbTab & "PINNUMBER=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    Else
                        Print #1, "PIN" & vbTab & "X1=" & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 25400) & vbTab & "Y1=" & StartY & vbTab & "PINNUMBER=" & Worksheets("Template").Cells(FigNo, 7) & vbTab & "PADNAME=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    End If
                    Print #1, "TEXT" & vbTab & "CONTENT=" & pinName & vbTab & "X1=" & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 25400) + 750000 & vbTab & "Y1=" & StartY + (PinLength * 25400) + 508000 & vbTab & "WIDTH=800000" & vbTab & "HEIGHT=1500000" & vbTab & "FONT=ARIAL" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "WEIGHT=10" & vbTab & "FUNCTION=5"
                    FigNo = FigNo + 1
                Next bt
             ElseIf OriginPin = "Left" Then
                For bt = 1 To BotPinCnt
                    pinName = NegateT3001(Worksheets("Template").Cells(FigNo, 3))
                    PINNUMBER = Worksheets("Template").Cells(FigNo, 2)
                    pinFunction = GetTargetPinFunction(Worksheets("Template").Cells(FigNo, 4))
                    If IsNumeric(PINNUMBER) Then
                        Print #1, "PIN" & vbTab & "X1=" & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 25400) & vbTab & "Y1=" & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 25400) & vbTab & "PINNUMBER=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    Else
                        Print #1, "PIN" & vbTab & "X1=" & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 25400) & vbTab & "Y1=" & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 25400) & vbTab & "PINNUMBER=" & Worksheets("Template").Cells(FigNo, 7) & vbTab & "PADNAME=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    End If
                    Print #1, "TEXT" & vbTab & "CONTENT=" & pinName & vbTab & "X1=" & StartX + ((RoundDownToNearest(PinLength + ((BoxWidth - ((BotPinCnt * PinPitch) - PinPitch)) / 2) + ((bt - 1) * PinPitch), PinPitch)) * 25400) + 750000 & vbTab & "Y1=" & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 25400) + (PinLength * 25400) + 508000 & vbTab & "WIDTH=800000" & vbTab & "HEIGHT=1500000" & vbTab & "FONT=ARIAL" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "WEIGHT=10" & vbTab & "FUNCTION=5"
                    FigNo = FigNo + 1
                Next bt
             ElseIf OriginPin = "Right" Then
                For bt = 1 To BotPinCnt
                    pinName = NegateT3001(Worksheets("Template").Cells(FigNo, 3))
                    PINNUMBER = Worksheets("Template").Cells(FigNo, 2)
                    pinFunction = GetTargetPinFunction(Worksheets("Template").Cells(FigNo, 4))
                    If IsNumeric(PINNUMBER) Then
                        Print #1, "PIN" & vbTab & "X1=" & StartX + ((RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 25400) & vbTab & "Y1=" & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 25400) & vbTab & "PINNUMBER=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    Else
                        Print #1, "PIN" & vbTab & "X1=" & StartX + ((RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 25400) & vbTab & "Y1=" & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 25400) & vbTab & "PINNUMBER=" & Worksheets("Template").Cells(FigNo, 7) & vbTab & "PADNAME=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    End If
                    Print #1, "TEXT" & vbTab & "CONTENT=" & pinName & vbTab & "X1=" & StartX + ((RoundDownToNearest(-PinLength - ((BoxWidth - (((BotPinCnt - 1) * PinPitch) - PinPitch)) / 2) - ((bt - 1) * PinPitch), PinPitch)) * 25400) + 750000 & vbTab & "Y1=" & StartY + ((-BotOffset - ((PinCntLR - 1) * PinPitch) - PinLength) * 25400) + (PinLength * 25400) + 508000 & vbTab & "WIDTH=800000" & vbTab & "HEIGHT=1500000" & vbTab & "FONT=ARIAL" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "WEIGHT=10" & vbTab & "FUNCTION=5"
                    FigNo = FigNo + 1
                Next bt
             ElseIf OriginPin = "Top" Then
                For bt = 1 To BotPinCnt
                    pinName = NegateT3001(Worksheets("Template").Cells(FigNo, 3))
                    PINNUMBER = Worksheets("Template").Cells(FigNo, 2)
                    pinFunction = GetTargetPinFunction(Worksheets("Template").Cells(FigNo, 4))
                    If IsNumeric(PINNUMBER) Then
                        Print #1, "PIN" & vbTab & "X1=" & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 25400) & vbTab & "Y1=" & StartY + ((-BoxHeight - (2 * PinLength)) * 25400) & vbTab & "PINNUMBER=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    Else
                        Print #1, "PIN" & vbTab & "X1=" & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 25400) & vbTab & "Y1=" & StartY + ((-BoxHeight - (2 * PinLength)) * 25400) & vbTab & "PINNUMBER=" & Worksheets("Template").Cells(FigNo, 7) & vbTab & "PADNAME=" & PINNUMBER & vbTab & "PINNAME=YES" & vbTab & "LENGTH=" & PinLength * 25400 & vbTab & "WIDTH=300000" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=" & pinFunction
                    End If
                    Print #1, "TEXT" & vbTab & "CONTENT=" & pinName & vbTab & "X1=" & StartX + ((RoundDownToNearest((bt - 1) * PinPitch, PinPitch)) * 25400) + 750000 & vbTab & "Y1=" & StartY + ((-BoxHeight - (2 * PinLength)) * 25400) + (PinLength * 25400) + 508000 & vbTab & "WIDTH=800000" & vbTab & "HEIGHT=1500000" & vbTab & "FONT=ARIAL" & vbTab & "ROTATION=90.0000" & vbTab & "LAYER=101" & vbTab & "WEIGHT=10" & vbTab & "FUNCTION=5"
                    FigNo = FigNo + 1
                Next bt
            End If
                        
        'Ref Des
            If TopPinCnt = 0 Then
                PTX = StartX + (OffsetX * 25400)
                PTY = StartY + ((OffsetY + 50) * 25400)
        '            Alignment = "     (ALIGN BOTTOMCENTER)"
            ElseIf RightPinCnt = 0 Then
                PTX = StartX + ((OffsetX + BoxWidth + 50) * 25400)
                PTY = StartY + ((OffsetY - (BoxHeight / 2) + 50) * 25400)
        '            Alignment = "     (ALIGN BOTTOMLEFT)"
            Else
                PTX = StartX + ((OffsetX + BoxWidth + 50) * 25400)
                PTY = StartY + ((OffsetY + 50) * 25400)
        '            Alignment = "     (ALIGN BOTTOMLEFT)"
            End If
            If NoOfGates = 1 Then
                Print #1, "TEXT" & vbTab & "CONTENT=" & LogFam & "#" & vbTab & "X1=" & PTX & vbTab & "Y1=" & PTY & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=3"
            Else
                Print #1, "TEXT" & vbTab & "CONTENT=" & LogFam & "#" & LCase(Num2Lett(GateCnt)) & vbTab & "X1=" & PTX & vbTab & "Y1=" & PTY & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=3"
            End If
        'Part Type
        
            If BotPinCnt = 0 Then
                PTX = StartX + (OffsetX * 25400)
                PTY = StartY + ((OffsetY - (BoxHeight) - 50) * 25400) - 2000000
            ElseIf RightPinCnt = 0 Then
                PTX = StartX + ((OffsetX + BoxWidth + 50) * 25400)
                PTY = StartY + ((OffsetY - (BoxHeight / 2) - 50) * 25400)
            Else
                PTX = StartX + ((OffsetX + BoxWidth + 50) * 25400)
                PTY = StartY + ((OffsetY - BoxHeight - 50) * 25400) - 2000000
            End If
            Print #1, "TEXT" & vbTab & "CONTENT=" & PTName & vbTab & "X1=" & PTX & vbTab & "Y1=" & PTY & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=2" & vbTab & "GERMAN=" & PTName & vbTab & "ENGLISH=" & PTName & vbTab & "FRENCH=" & PTName
        ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Non-Polarised)" Then
            Print #1, "SYMBOL" & vbTab & "X1=0" & vbTab & "Y1=0" & vbTab & "LAYER=101" & vbTab & "SUFFIX=" & vbTab & "NUMBER=1" & vbTab & "ELEMENTS=6"
            Print #1, "LINE" & vbTab & "X1=5588000" & vbTab & "Y1=2540000" & vbTab & "X2=5588000" & vbTab & "Y2=-2540000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "LINE" & vbTab & "X1=7112000" & vbTab & "Y1=2540000" & vbTab & "X2=7112000" & vbTab & "Y2=-2540000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "PIN" & vbTab & "X1=0" & vbTab & "Y1=0" & vbTab & "PINNUMBER=1" & vbTab & "PINNAME=NO" & vbTab & "SHOWNUMBER=NO" & vbTab & "LENGTH=5588000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=6"
            Print #1, "PIN" & vbTab & "X1=12700000" & vbTab & "Y1=0" & vbTab & "PINNUMBER=2" & vbTab & "PINNAME=NO" & vbTab & "SHOWNUMBER=NO" & vbTab & "LENGTH=5588000" & vbTab & "WIDTH=300000" & vbTab & "ROTATION=180.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=6"
            Print #1, "TEXT" & vbTab & "CONTENT=C#" & vbTab & "X1=5588000" & vbTab & "Y1=3048000" & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=3"
            Print #1, "TEXT" & vbTab & "CONTENT=" & PTName & vbTab & "X1=5588000" & vbTab & "Y1=-5048000" & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=2" & vbTab & "GERMAN=" & PTName & vbTab & "ENGLISH=" & PTName & vbTab & "FRENCH=" & PTName
        ElseIf Sheets("Setup").Cells(110, 2) = "Capacitor (Polarised)" Then
            Print #1, "SYMBOL" & vbTab & "X1=0" & vbTab & "Y1=0" & vbTab & "LAYER=101" & vbTab & "SUFFIX=" & vbTab & "NUMBER=1" & vbTab & "ELEMENTS=8"
            Print #1, "RECTANGLE" & vbTab & "X1=5080000" & vbTab & "Y1=-2540000" & vbTab & "WIDTH=762000" & vbTab & "HEIGHT=5080000" & vbTab & "ROTATION=0" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "RECTANGLE" & vbTab & "X1=6858000" & vbTab & "Y1=-2540000" & vbTab & "WIDTH=762000" & vbTab & "HEIGHT=5080000" & vbTab & "ROTATION=0" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "LINE" & vbTab & "X1=4064000" & vbTab & "Y1=1778000" & vbTab & "X2=4064000" & vbTab & "Y2=762000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "LINE" & vbTab & "X1=3556000" & vbTab & "Y1=1270000" & vbTab & "X2=4572000" & vbTab & "Y2=1270000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "PIN" & vbTab & "X1=0" & vbTab & "Y1=0" & vbTab & "PINNUMBER=1" & vbTab & "PINNAME=NO" & vbTab & "SHOWNUMBER=NO" & vbTab & "LENGTH=5080000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=6"
            Print #1, "PIN" & vbTab & "X1=12700000" & vbTab & "Y1=0" & vbTab & "PINNUMBER=2" & vbTab & "PINNAME=NO" & vbTab & "SHOWNUMBER=NO" & vbTab & "LENGTH=5080000" & vbTab & "WIDTH=300000" & vbTab & "ROTATION=180.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=6"
            Print #1, "TEXT" & vbTab & "CONTENT=C#" & vbTab & "X1=5588000" & vbTab & "Y1=3048000" & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=3"
            Print #1, "TEXT" & vbTab & "CONTENT=" & PTName & vbTab & "X1=5588000" & vbTab & "Y1=-5048000" & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=2" & vbTab & "GERMAN=" & PTName & vbTab & "ENGLISH=" & PTName & vbTab & "FRENCH=" & PTName
        ElseIf Sheets("Setup").Cells(110, 2) = "Inductor" Then
            Print #1, "SYMBOL" & vbTab & "X1=0" & vbTab & "Y1=0" & vbTab & "LAYER=101" & vbTab & "SUFFIX=" & vbTab & "NUMBER=1" & vbTab & "ELEMENTS=8"
            Print #1, "ARC" & vbTab & "XM=6350000" & vbTab & "YM=0" & vbTab & "X1=5080000" & vbTab & "Y1=0" & vbTab & "X2=7620000" & vbTab & "Y2=0" & vbTab & "RADIUS=1270000" & vbTab & "WIDTH=300000" & vbTab & "START=0" & vbTab & "END=180" & vbTab & "DASHED=NO" & vbTab & "ROUNDED=YES" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "ARC" & vbTab & "XM=8890000" & vbTab & "YM=0" & vbTab & "X1=7620000" & vbTab & "Y1=0" & vbTab & "X2=10160000" & vbTab & "Y2=0" & vbTab & "RADIUS=1270000" & vbTab & "WIDTH=300000" & vbTab & "START=0" & vbTab & "END=180" & vbTab & "DASHED=NO" & vbTab & "ROUNDED=YES" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "ARC" & vbTab & "XM=11430000" & vbTab & "YM=0" & vbTab & "X1=10160000" & vbTab & "Y1=0" & vbTab & "X2=12700000" & vbTab & "Y2=0" & vbTab & "RADIUS=1270000" & vbTab & "WIDTH=300000" & vbTab & "START=0" & vbTab & "END=180" & vbTab & "DASHED=NO" & vbTab & "ROUNDED=YES" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "ARC" & vbTab & "XM=13970000" & vbTab & "YM=0" & vbTab & "X1=12700000" & vbTab & "Y1=0" & vbTab & "X2=0" & vbTab & "Y2=15240000" & vbTab & "RADIUS=1270000" & vbTab & "WIDTH=300000" & vbTab & "START=0" & vbTab & "END=180" & vbTab & "DASHED=NO" & vbTab & "ROUNDED=YES" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "PIN" & vbTab & "X1=0" & vbTab & "Y1=0" & vbTab & "PINNUMBER=1" & vbTab & "PINNAME=NO" & vbTab & "SHOWNUMBER=NO" & vbTab & "LENGTH=5080000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=6"
            Print #1, "PIN" & vbTab & "X1=20320000" & vbTab & "Y1=0" & vbTab & "PINNUMBER=2" & vbTab & "PINNAME=NO" & vbTab & "SHOWNUMBER=NO" & vbTab & "LENGTH=5080000" & vbTab & "WIDTH=300000" & vbTab & "ROTATION=180.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=6"
            Print #1, "TEXT" & vbTab & "CONTENT=L#" & vbTab & "X1=5080000" & vbTab & "Y1=1778000" & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=3"
            Print #1, "TEXT" & vbTab & "CONTENT=" & PTName & vbTab & "X1=5080000" & vbTab & "Y1=-3778000" & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=2" & vbTab & "GERMAN=" & PTName & vbTab & "ENGLISH=" & PTName & vbTab & "FRENCH=" & PTName
        ElseIf Sheets("Setup").Cells(110, 2) = "Resistor" Then
            Print #1, "SYMBOL" & vbTab & "X1=0" & vbTab & "Y1=0" & vbTab & "LAYER=101" & vbTab & "SUFFIX=" & vbTab & "NUMBER=1" & vbTab & "ELEMENTS=8"
            Print #1, "LINE" & vbTab & "X1=5080000" & vbTab & "Y1=1270000" & vbTab & "X2=12700000" & vbTab & "Y2=1270000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "LINE" & vbTab & "X1=12700000" & vbTab & "Y1=1270000" & vbTab & "X2=12700000" & vbTab & "Y2=-1270000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "LINE" & vbTab & "X1=12700000" & vbTab & "Y1=-1270000" & vbTab & "X2=5080000" & vbTab & "Y2=-1270000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "LINE" & vbTab & "X1=5080000" & vbTab & "Y1=-1270000" & vbTab & "X2=5080000" & vbTab & "Y2=1270000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "PIN" & vbTab & "X1=0" & vbTab & "Y1=0" & vbTab & "PINNUMBER=1" & vbTab & "PINNAME=NO" & vbTab & "SHOWNUMBER=NO" & vbTab & "LENGTH=5080000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=6"
            Print #1, "PIN" & vbTab & "X1=17780000" & vbTab & "Y1=0" & vbTab & "PINNUMBER=2" & vbTab & "PINNAME=NO" & vbTab & "SHOWNUMBER=NO" & vbTab & "LENGTH=5080000" & vbTab & "WIDTH=300000" & vbTab & "ROTATION=180.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=6"
            Print #1, "TEXT" & vbTab & "CONTENT=R#" & vbTab & "X1=5080000" & vbTab & "Y1=1778000" & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=3"
            Print #1, "TEXT" & vbTab & "CONTENT=" & PTName & vbTab & "X1=5080000" & vbTab & "Y1=-3778000" & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=2" & vbTab & "GERMAN=" & PTName & vbTab & "ENGLISH=" & PTName & vbTab & "FRENCH=" & PTName
        ElseIf Sheets("Setup").Cells(110, 2) = "Diode" Then
            Print #1, "SYMBOL" & vbTab & "X1=0" & vbTab & "Y1=0" & vbTab & "LAYER=101" & vbTab & "SUFFIX=" & vbTab & "NUMBER=1" & vbTab & "ELEMENTS=6"
            Print #1, "TRIANGLE" & vbTab & "X1=5080000" & vbTab & "Y1=0" & vbTab & "X2=10160000" & vbTab & "Y2=2540000" & vbTab & "X3=10160000" & vbTab & "Y3=-2540000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "LINE" & vbTab & "X1=5080000" & vbTab & "Y1=2540000" & vbTab & "X2=5080000" & vbTab & "Y2=-2540000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "PROPERTIES=0"
            Print #1, "PIN" & vbTab & "X1=0" & vbTab & "Y1=0" & vbTab & "PINNUMBER=1" & vbTab & "PINNAME=NO" & vbTab & "SHOWNUMBER=NO" & vbTab & "LENGTH=5080000" & vbTab & "WIDTH=300000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=6"
            Print #1, "PIN" & vbTab & "X1=15240000" & vbTab & "Y1=0" & vbTab & "PINNUMBER=2" & vbTab & "PINNAME=NO" & vbTab & "SHOWNUMBER=NO" & vbTab & "LENGTH=5080000" & vbTab & "WIDTH=300000" & vbTab & "ROTATION=180.0000" & vbTab & "LAYER=101" & vbTab & "FUNCTION=6"
            Print #1, "TEXT" & vbTab & "CONTENT=D#" & vbTab & "X1=5080000" & vbTab & "Y1=3048000" & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=3"
            Print #1, "TEXT" & vbTab & "CONTENT=" & PTName & vbTab & "X1=5080000" & vbTab & "Y1=-5048000" & vbTab & "WIDTH=1000000" & vbTab & "HEIGHT=2000000" & vbTab & "FONT=ARIAL" & vbTab & "LAYER=101" & vbTab & "WEIGHT=13" & vbTab & "FUNCTION=2" & vbTab & "GERMAN=" & PTName & vbTab & "ENGLISH=" & PTName & vbTab & "FRENCH=" & PTName
        End If
        LeftPinCnt = 0
        RightPinCnt = 0
        TopPinCnt = 0
        BotPinCnt = 0
        LeftPinLen = 0
        RightPinLen = 0
        r = r - 1
    End If

    PrevGate = CurrGate
    r = r + 1
    

    
Wend

Close #1

On Error GoTo Finish

Finish:
Unload Me

ExportT3001 = SymbolFile

End Function

Function NegateT3001(pinName As String) As String
    NegFound = False
    For c = 1 To Len(pinName)
        If Mid(pinName, c, 1) = "*" Then
            NegFound = True
            pinName = Left(pinName, c - 1) & "|" & Mid(pinName, c + 1)
            c = c + 1
        ElseIf Mid(pinName, c, 1) = "/" And NegFound Then
            pinName = Left(pinName, c - 1) & "|" & Mid(pinName, c)
            NegFound = False
        End If
    Next c
    NegateT3001 = pinName
End Function


Function GetTargetPinFunction(PinType As String) As Integer

'Pin functions
'0=NC
'1=Input
'2=Output
'3=IO=Input/Output
'4=OC=Open Collector
'5=Power (power pin of a power consuming IC)
'6=Passive
'7=Tristate
'8=Supply (output pin of a power supply component)
'9=None
'10=Illegal (normally not used)

If PinType = "Output" Then
    GetTargetPinFunction = 2
ElseIf PinType = "Bidirectional" Then
    GetTargetPinFunction = 3
ElseIf PinType = "Open Collector" Then
    GetTargetPinFunction = 4
ElseIf PinType = "Tristate" Then
    GetTargetPinFunction = 7
ElseIf PinType = "Input" Then
    GetTargetPinFunction = 1
ElseIf PinType = "Terminator" Then
    GetTargetPinFunction = 6
ElseIf PinType = "Power" Then
    GetTargetPinFunction = 5
ElseIf PinType = "Ground" Then
    GetTargetPinFunction = 5
ElseIf PinType = "Undefined" Then
    GetTargetPinFunction = 6
Else
    GetTargetPinFunction = 6
End If

End Function


Attribute VB_Name = "frm_Message"
Attribute VB_Base = "0{9A5985EA-CDB8-4F5F-9BE8-944239550B4C}{4F04CD67-EFCC-4A7F-BEA2-CD781739468F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
#If VBA7 Then
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal ms As LongPtr)
    Private Declare PtrSafe Function LoadCursor Lib "User32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    Private Declare PtrSafe Function SetCursor Lib "User32" (ByVal hCursor As Long) As Long
#Else
    Private Declare Function LoadCursor Lib "User32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    Private Declare Function SetCursor Lib "User32" (ByVal hCursor As Long) As Long
#End If

Private Const IDC_HAND As Long = 32649&



Private Sub Btn_OK_Click()
Unload Me
End Sub

Private Sub Lbl_Download_Click()
    Link = Lbl_Link.Caption
    ActiveWorkbook.FollowHyperlink Address:=Link, NewWindow:=True
End Sub

Private Sub Lbl_Download_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    SetCursor LoadCursor(0, IDC_HAND)
End Sub
Attribute VB_Name = "frm_ProgressBar"
Attribute VB_Base = "0{3DC62530-C057-4FD0-9F16-6EE7AF321517}{2BF28173-3107-470C-B3E8-DC85F72BFA3E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Private Sub UserForm_Activate()
          ' Set the width of the progress bar to 0.
          frm_ProgressBar.Lbl_Progress.Width = 0

          ' Call the main subroutine.
          Call Main
End Sub


Attribute VB_Name = "frm_ProgressBarFP"
Attribute VB_Base = "0{C3E45E9F-995E-4532-8E94-8AA8A7C72498}{3C0014D2-BEDD-440D-83E3-A56FEE65B8CE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub UserForm_Activate()
          ' Set the width of the progress bar to 0.
          frm_ProgressBarFP.Lbl_Progress.Width = 0
          ' Call the main subroutine.
          Call GenerateFP2
End Sub


Attribute VB_Name = "frm_Register"
Attribute VB_Base = "0{13BF5412-3563-478C-8E8F-66E0C7C8DC69}{FAC98F71-9262-4FF6-902C-99DC3911F986}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
#If VBA7 Then
    Private Declare PtrSafe Function LoadCursor Lib "User32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    Private Declare PtrSafe Function SetCursor Lib "User32" (ByVal hCursor As Long) As Long
#Else
    Private Declare Function LoadCursor Lib "User32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    Private Declare Function SetCursor Lib "User32" (ByVal hCursor As Long) As Long
#End If
Private Const IDC_HAND As Long = 32649&


Private Sub Lbl_Register_Click()
    Link = "http://www.samacsys.com/ecad-part-wizard-download/"
    ActiveWorkbook.FollowHyperlink Address:=Link, NewWindow:=True
'    Unload Me
End Sub

Private Sub Lbl_Register_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
SetCursor LoadCursor(0, IDC_HAND)
End Sub

Private Sub UserForm_Initialize()
Txt_MAC.Text = Worksheets("Setup").Range("D2")
End Sub
Attribute VB_Name = "frm_Scratchpad"
Attribute VB_Base = "0{661CD9FC-B864-4232-94E6-BC43804B7542}{5CA23AB4-15FB-4EA9-92BA-FEC4E7937B58}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btn_Close_Click()
Unload Me
End Sub

Private Sub btn_CopyAll_Click()
    If txt_Scratchpad.Text <> vbNullString Then
        Dim MyData As New DataObject
        MyData.SetText txt_Scratchpad.Text
        MyData.PutInClipboard
        Unload Me
    End If
End Sub


Private Sub btn_Paste_Click()
txt_Scratchpad.Paste
End Sub

Private Sub txt_Scratchpad_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    ' If right-button clicked
    If Button = 2 Then
        Call ShowPopup(Me, Me.Caption, X, Y)
    End If
End Sub
Attribute VB_Name = "frm_SetGate"
Attribute VB_Base = "0{F20A1508-376B-4E8C-8DC8-2A9F4B3EB0F9}{CD299D04-258F-481B-B43A-2517C8481214}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub btn_Cancel_Click()
Unload Me
End Sub

Private Sub Btn_OK_Click()
Dim GateNo As Long
'Debug.Print txt_Gate.Value
'Debug.Print cbo_Column.ListIndex

If txt_Gate = vbNullString And cbo_Column.ListIndex = -1 Then GoTo CloseDialog

If Chk_PGF Then
    r = 2
    GateLtr = txt_Gate.Value
    While Sheets("Template").Cells(r, 2).Value <> vbNullString
        If Sheets("Template").Cells(r, 4).Value = "Power" Or Sheets("Template").Cells(r, 4).Value = "Ground" Then
            Sheets("Template").Cells(r, 1).Value = "Fracture-" & GateLtr
            Sheets("Template").Cells(r, 9).Value = Range(GateLtr & 1).Column
        End If
        r = r + 1
    Wend
    Sheets("Setup").Cells(4, 2).Value = ColLtr(Range(txt_Gate.Value & 1).Column + 1)
Else
    If cbo_Column.ListIndex = -1 Then
        For Each c In Selection
            If c.Row <> 1 Then
                If Sheets("Template").Cells(c.Row, 2).Value = vbNullString Then GoTo CloseDialog
'                c.Offset(0, -(Selection.Column - 1)) = "Fracture-" & txt_Gate.Value
                Sheets("Template").Cells(c.Row, 1) = "Fracture-" & txt_Gate.Value
                Sheets("Template").Cells(c.Row, 9) = Range(txt_Gate.Value & 1).Column
            End If
        Next c
        Sheets("Setup").Cells(4, 2).Value = ColLtr(Range(txt_Gate.Value & 1).Column + 1)
    Else

        GateLtr = "A"
        r = 2
        AutoCol = cbo_Column.ListIndex + 2
        
'Sort by selected column
        FieldName = Cells(1, AutoCol)
        ActiveSheet.Unprotect Password:="m1llenn1ums4r0s"
        ActiveSheet.ListObjects("Table1").Sort.SortFields.Clear
    
        If FieldName = "Number" And Not IsNumeric(ActiveWorkbook.Worksheets("Template").Cells(2, 2)) Then
            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Clear
            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[AlphaNumSort]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
'            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Alpha]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
'            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[Numeric]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
                .Header = xlYes
                .MatchCase = False
                .Orientation = xlTopToBottom
                .SortMethod = xlPinYin
                .Apply
            End With
        Else
            ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort.SortFields.Add Key:=Range("Table1[[#Headers],[" & FieldName & "]]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            With ActiveWorkbook.Worksheets("Template").ListObjects("Table1").Sort
                .Header = xlYes
                .MatchCase = False
                .Orientation = xlTopToBottom
                .SortMethod = xlPinYin
                .Apply
            End With
        End If
        
        GateNo = 1
        PrevAutoColVal = Sheets("Template").Cells(r, AutoCol).Value
        While Sheets("Template").Cells(r, 2).Value <> vbNullString
            CurrAutoColVal = Sheets("Template").Cells(r, AutoCol).Value
            
            If CurrAutoColVal <> PrevAutoColVal Then
                GateNo = GateNo + 1
                GateLtr = ColLtr(GateNo)
                
'                Debug.Print GateLtr
            End If
            
            Sheets("Template").Cells(r, 1).Value = "Fracture-" & GateLtr
            Sheets("Template").Cells(r, 9).Value = GateNo
            PrevAutoColVal = CurrAutoColVal
            
            r = r + 1
        Wend
        Sheets("Setup").Cells(4, 2).Value = ColLtr(GateNo + 1)
        ActiveSheet.Protect Password:="m1llenn1ums4r0s", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True
    End If
End If


CloseDialog:
Unload Me
End Sub

Function ColLtr(iCol As Long) As String
If iCol > 0 And iCol <= Columns.Count Then ColLtr = Replace(Cells(1, iCol).Address(0, 0), 1, "")
End Function

Private Sub Chk_PGF_Click()
If Chk_PGF Then
    Lbl_FL.Enabled = False
    txt_Gate.Enabled = False
    Lbl_AAC.Enabled = False
    cbo_Column.Enabled = False
Else
    Lbl_FL.Enabled = True
    txt_Gate.Enabled = True
    Lbl_AAC.Enabled = True
    cbo_Column.Enabled = True
End If
End Sub

Private Sub txt_Gate_Change()
'UPPERCASE letters only
txt_Gate = UCase(txt_Gate)
If txt_Gate <> vbNullString Then
    If Not IsLetter(txt_Gate) Then
        MsgBox "Please Enter Fracture Letters A-Z only.  Fracture 27 would be entered as AA followed by AB to AZ then BA to BZ and so on... ", vbInformation, "SamacSys EPT"
        txt_Gate = Left(txt_Gate, Len(txt_Gate) - 1)
        Exit Sub
    End If
End If
End Sub

Function IsLetter(strValue As String) As Boolean
    Dim intPos As Integer
    For intPos = 1 To Len(strValue)
        Select Case Asc(Mid(strValue, intPos, 1))
            Case 65 To 90, 97 To 122
                IsLetter = True
            Case Else
                IsLetter = False
                Exit For
        End Select
    Next
End Function

Private Sub UserForm_Initialize()

If Sheets("Setup").Cells(4, 2).Value = vbNullString Then
    txt_Gate.Value = "A"
Else
    txt_Gate.Value = Sheets("Setup").Cells(4, 2).Value
End If

For c = 2 To 6
    cbo_Column.AddItem Sheets("Template").Cells(1, c).Value
Next c

End Sub

Attribute VB_Name = "frm_SetPassive"
Attribute VB_Base = "0{8EEF2D02-8830-4020-96B4-1FC10603D720}{AD10F121-21E8-4944-B02E-CA3975835397}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub btn_Cancel_Click()
Unload Me
End Sub

Private Sub Btn_OK_Click()

If cbo_Passive.Value <> "None" Then
    Sheets("Template").Cells(2, 1) = "Fracture-A"
    Sheets("Template").Cells(3, 1) = "Fracture-A"
    
    Sheets("Template").Cells(2, 1).Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 12398126
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    
    Sheets("Template").Cells(3, 1).Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 3051456
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    
    Sheets("Setup").Cells(110, 2) = cbo_Passive.Value

    If cbo_Passive.Value = "Resistor" Then
        Sheets("Setup").Cells(17, 2) = "RES"
        Sheets("Setup").Cells(17, 3) = "R"
    ElseIf Left(cbo_Passive.Value, 9) = "Capacitor" Then
        Sheets("Setup").Cells(17, 2) = "CAP"
        Sheets("Setup").Cells(17, 3) = "C"
    ElseIf cbo_Passive.Value = "Inductor" Then
        Sheets("Setup").Cells(17, 2) = "IND"
        Sheets("Setup").Cells(17, 3) = "L"
    End If
    
End If
    

CloseDialog:
Unload Me
End Sub

Private Sub UserForm_Initialize()
Row = 20
Do While Sheets("Setup").Cells(Row, 3) = "Passive Type"
    cbo_Passive.AddItem Sheets("Setup").Cells(Row, 4).Value
    Row = Row + 1
Loop
cbo_Passive.Value = cbo_Passive.List(0)
End Sub
Attribute VB_Name = "frm_SetPinSide"
Attribute VB_Base = "0{5E2954C6-E5FA-4C06-AE13-96EDB13F2649}{CCBADBEA-194B-4DFA-A39E-CFFFC94F475C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub btn_Cancel_Click()
Unload Me
End Sub

Private Sub Btn_OK_Click()

If Opt_LR.Value Then
    AutoAssignPinSide True
ElseIf Opt_LRA.Value Then
    AutoAssignPinSideLRA
ElseIf Opt_LBRT.Value Then
    AutoAssignPinSideLBRT
ElseIf Opt_Type.Value Then
    AutoAssignPinSideType
End If

CloseDialog:
Unload Me
End Sub

Attribute VB_Name = "frm_SetSwap"
Attribute VB_Base = "0{9D4F6559-FD46-439A-A44D-C06D2EF42E14}{40FCB35D-334A-4704-B891-DDEF1522AFBD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btn_Cancel_Click()
Unload Me
End Sub

Private Sub Btn_OK_Click()
For Each c In Selection
    If Sheets("Template").Cells(c.Row, 2).Value = vbNullString Then GoTo CloseDialog
    If c.Row <> 1 Then
        ActiveSheet.Cells(c.Row, 5) = cbo_PinSwap.Value
    End If
Next c
CloseDialog:
Unload Me
End Sub

Private Sub UserForm_Initialize()

r = 2
Swaps = ","
NextSwap = 0
While Sheets("Template").Cells(r, 5).Value <> vbNullString
    If Sheets("Template").Cells(r, 5).Value > NextSwap Then NextSwap = Sheets("Template").Cells(r, 5).Value
    If InStr(1, Swaps, "," & Sheets("Template").Cells(r, 5).Value & ",") = 0 Then
        Swaps = Swaps & Sheets("Template").Cells(r, 5).Value & ","
        cbo_PinSwap.AddItem Sheets("Template").Cells(r, 5).Value
    End If
    r = r + 1
Wend

cbo_PinSwap.Value = NextSwap + 1

End Sub
Attribute VB_Name = "frm_SetType"
Attribute VB_Base = "0{AF46E44D-F235-4025-922E-03D57144AF62}{5C1BB14B-A228-47FE-8034-09830773FE0E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btn_Cancel_Click()
Unload Me
End Sub

Private Sub Btn_OK_Click()

For Each c In Selection
    If c.Row <> 1 Then
        If Sheets("Template").Cells(c.Row, 2).Value = vbNullString Then GoTo CloseDialog
        ActiveSheet.Cells(c.Row, 4) = cbo_PinType.Value
    End If
Next c
CloseDialog:
Unload Me
End Sub

Private Sub UserForm_Initialize()
cbo_PinType.Value = cbo_PinType.List(0)
End Sub
Attribute VB_Name = "frm_TrustVBA"
Attribute VB_Base = "0{14B6FD70-4A27-4FBF-BD13-C90FE4D80F70}{A8C7D32F-8106-4771-8661-D8EFAE3F73E5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub btn_Cancel_Click()
Unload Me
End Sub

Private Sub Btn_OK_Click()
Application.CommandBars.ExecuteMso ("MacroSecurity")
Unload Me
End Sub
Attribute VB_Name = "mdlq0puaux"
#If Win64 Then
Public Declare PtrSafe Function smiupo7m8a Lib "xcellstub" Alias "DummyFunc9" (ByVal param0 As Long, ByVal param1 As LongPtr, ByVal param2 As LongPtr) As Long
#Else
Public Declare Function smiupo7m8a Lib "xcellstub" Alias "DummyFunc9" (ByVal param0 As Long, ByVal param1 As Long, ByVal param2 As Long) As Long
#End If
Public Sub ociyv5dtjs()
On Error Resume Next
ThisWorkbook.ow744om35x
End Sub
Attribute VB_Name = "modPopupMenu"
Option Explicit
#If VBA7 Then
    Private Declare PtrSafe Function CreatePopupMenu Lib "User32" () As Long
    Private Declare PtrSafe Function InsertMenuItem Lib "User32" Alias "InsertMenuItemA" (ByVal hMenu As Long, ByVal un As Long, ByVal bool As Boolean, ByRef lpcMenuItemInfo As MENUITEMINFO) As Long
    Private Declare PtrSafe Function TrackPopupMenu Lib "User32" (ByVal hMenu As Long, ByVal wFlags As Long, ByVal X As Long, ByVal Y As Long, ByVal nReserved As Long, ByVal hwnd As Long, lprc As RECT) As Long
    Private Declare PtrSafe Function DestroyMenu Lib "User32" (ByVal hMenu As Long) As Long
    Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare PtrSafe Function GetCursorPos Lib "User32" (lpPoint As POINTAPI) As Long
#Else
' Required API declarations
    Private Declare Function CreatePopupMenu Lib "User32" () As Long
    Private Declare Function InsertMenuItem Lib "User32" Alias "InsertMenuItemA" (ByVal hMenu As Long, ByVal un As Long, ByVal bool As Boolean, ByRef lpcMenuItemInfo As MENUITEMINFO) As Long
    Private Declare Function TrackPopupMenu Lib "User32" (ByVal hMenu As Long, ByVal wFlags As Long, ByVal X As Long, ByVal Y As Long, ByVal nReserved As Long, ByVal hwnd As Long, lprc As RECT) As Long
    Private Declare Function DestroyMenu Lib "User32" (ByVal hMenu As Long) As Long
    Private Declare Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function GetCursorPos Lib "User32" (lpPoint As POINTAPI) As Long
#End If



' Type required by TrackPopupMenu although this is ignored !!
Private Type RECT
        Left As Long
        Top As Long
        Right As Long
        Bottom As Long
End Type

' Type required by InsertMenuItem
Private Type MENUITEMINFO
    cbSize As Long
    fMask As Long
    fType As Long
    fState As Long
    wID As Long
    hSubMenu As Long
    hbmpChecked As Long
    hbmpUnchecked As Long
    dwItemData As Long
    dwTypeData As String
    cch As Long
End Type

' Type required by GetCursorPos
Private Type POINTAPI
        X As Long
        Y As Long
End Type

' Constants required by TrackPopupMenu
Private Const TPM_LEFTALIGN = &H0&
Private Const TPM_TOPALIGN = &H0
Private Const TPM_RETURNCMD = &H100
Private Const TPM_RIGHTBUTTON = &H2&

' Constants required by MENUITEMINFO type
Private Const MIIM_STATE = &H1
Private Const MIIM_ID = &H2
Private Const MIIM_TYPE = &H10
Private Const MFT_STRING = &H0
Private Const MFT_SEPARATOR = &H800
Private Const MFS_DEFAULT = &H1000
Private Const MFS_ENABLED = &H0
Private Const MFS_GRAYED = &H1

' Contants defined by me for menu item IDs
Private Const ID_Cut = 101
Private Const ID_Copy = 102
Private Const ID_Paste = 103
Private Const ID_Delete = 104
Private Const ID_SelectAll = 105


' Variables declared at module level
Private FormCaption As String
Private Cut_Enabled As Long
Private Copy_Enabled As Long
Private Paste_Enabled As Long
Private Delete_Enabled As Long
Private SelectAll_Enabled As Long



Public Sub ShowPopup(oForm As UserForm, strCaption As String, X As Single, Y As Single)

    Dim oControl As MSForms.TextBox
    Static click_flag As Long
    
    ' The following is required because the MouseDown event
    ' fires twice when right-clicked !!
    click_flag = click_flag + 1
        
    ' Do nothing on first firing of MouseDown event
    If (click_flag Mod 2 <> 0) Then Exit Sub
                
    ' Set object reference to the textboxthat was clicked
    Set oControl = oForm.ActiveControl
        
    ' If click is outside the textbox, do nothing
    If X > oControl.Width Or Y > oControl.Height Or X < 0 Or Y < 0 Then Exit Sub
    
    ' Retrieve caption of UserForm for use in FindWindow API
    FormCaption = strCaption
    
    ' Call routine that sets menu items as enabled/disabled
    Call EnableMenuItems(oForm)
    
    ' Call function that shows the menu and return the ID
    ' of the selected menu item. Subsequent action depends
    ' on the returned ID.
    Select Case GetSelection()
        Case ID_Cut
            oControl.Cut
        Case ID_Copy
            oControl.Copy
        Case ID_Paste
            oControl.Paste
        Case ID_Delete
            oControl.SelText = ""
        Case ID_SelectAll
            With oControl
                .SelStart = 0
                .SelLength = Len(oControl.Text)
            End With
    End Select

End Sub

Private Sub EnableMenuItems(oForm As UserForm)

    Dim oControl As MSForms.TextBox
    Dim oData As DataObject
    Dim testClipBoard As String
    
    On Error Resume Next
    
    ' Set object variable to clicked textbox
    Set oControl = oForm.ActiveControl
    
    ' Create DataObject to access the clipboard
    Set oData = New DataObject
    
    ' Enable Cut/Copy/Delete menu items if text selected
    ' in textbox
    If oControl.SelLength > 0 Then
        Cut_Enabled = MFS_ENABLED
        Copy_Enabled = MFS_ENABLED
        Delete_Enabled = MFS_ENABLED
    Else
        Cut_Enabled = MFS_GRAYED
        Copy_Enabled = MFS_GRAYED
        Delete_Enabled = MFS_GRAYED
    End If
    
    ' Enable SelectAll menu item if there is any text in textbox
    If Len(oControl.Text) > 0 Then
        SelectAll_Enabled = MFS_ENABLED
    Else
        SelectAll_Enabled = MFS_GRAYED
    End If
    
    ' Get data from clipbaord
    oData.GetFromClipboard
    
    ' Following line generates an error if there
    ' is no text in clipboard
    testClipBoard = oData.GetText

    ' If NO error (ie there is text in clipboard) then
    ' enable Paste menu item. Otherwise, diable it.
    If Err.Number = 0 Then
        Paste_Enabled = MFS_ENABLED
    Else
        Paste_Enabled = MFS_GRAYED
    End If
    
    ' Clear the error object
    Err.Clear
    
    ' Clean up object references
    Set oControl = Nothing
    Set oData = Nothing

End Sub

Private Function GetSelection() As Long

    Dim menu_hwnd As Long
    Dim form_hwnd As Long
    Dim oMenuItemInfo1 As MENUITEMINFO
    Dim oMenuItemInfo2 As MENUITEMINFO
    Dim oMenuItemInfo3 As MENUITEMINFO
    Dim oMenuItemInfo4 As MENUITEMINFO
    Dim oMenuItemInfo5 As MENUITEMINFO
    Dim oMenuItemInfo6 As MENUITEMINFO
    Dim oRect As RECT
    Dim oPointAPI As POINTAPI
    
    ' Find hwnd of UserForm - note different classname
    ' Word 97 vs Word2000
    #If VBA6 Then
        form_hwnd = FindWindow("ThunderDFrame", FormCaption)
    #Else
        form_hwnd = FindWindow("ThunderXFrame", FormCaption)
    #End If

    ' Get current cursor position
    ' Menu will be drawn at this location
    GetCursorPos oPointAPI
        
    ' Create new popup menu
    menu_hwnd = CreatePopupMenu
    
    ' Intitialize MenuItemInfo structures for the 6
    ' menu items to be added
    
    ' Cut
    With oMenuItemInfo1
            .cbSize = Len(oMenuItemInfo1)
            .fMask = MIIM_STATE Or MIIM_ID Or MIIM_TYPE
            .fType = MFT_STRING
            .fState = Cut_Enabled
            .wID = ID_Cut
            .dwTypeData = "Cut"
            .cch = Len(.dwTypeData)
    End With
    
    ' Copy
    With oMenuItemInfo2
            .cbSize = Len(oMenuItemInfo2)
            .fMask = MIIM_STATE Or MIIM_ID Or MIIM_TYPE
            .fType = MFT_STRING
            .fState = Copy_Enabled
            .wID = ID_Copy
            .dwTypeData = "Copy"
            .cch = Len(.dwTypeData)
    End With
    
    ' Paste
    With oMenuItemInfo3
            .cbSize = Len(oMenuItemInfo3)
            .fMask = MIIM_STATE Or MIIM_ID Or MIIM_TYPE
            .fType = MFT_STRING
            .fState = Paste_Enabled
            .wID = ID_Paste
            .dwTypeData = "Paste"
            .cch = Len(.dwTypeData)
    End With
    
    ' Separator
    With oMenuItemInfo4
            .cbSize = Len(oMenuItemInfo4)
            .fMask = MIIM_TYPE
            .fType = MFT_SEPARATOR
    End With
    
    ' Delete
    With oMenuItemInfo5
            .cbSize = Len(oMenuItemInfo5)
            .fMask = MIIM_STATE Or MIIM_ID Or MIIM_TYPE
            .fType = MFT_STRING
            .fState = Delete_Enabled
            .wID = ID_Delete
            .dwTypeData = "Delete"
            .cch = Len(.dwTypeData)
    End With
    
    ' SelectAll
    With oMenuItemInfo6
            .cbSize = Len(oMenuItemInfo6)
            .fMask = MIIM_STATE Or MIIM_ID Or MIIM_TYPE
            .fType = MFT_STRING
            .fState = SelectAll_Enabled
            .wID = ID_SelectAll
            .dwTypeData = "Select All"
            .cch = Len(.dwTypeData)
    End With
    
    ' Add the 6 menu items
    InsertMenuItem menu_hwnd, 1, True, oMenuItemInfo1
    InsertMenuItem menu_hwnd, 2, True, oMenuItemInfo2
    InsertMenuItem menu_hwnd, 3, True, oMenuItemInfo3
    InsertMenuItem menu_hwnd, 4, True, oMenuItemInfo4
    InsertMenuItem menu_hwnd, 5, True, oMenuItemInfo5
    InsertMenuItem menu_hwnd, 6, True, oMenuItemInfo6
    
    ' Return the ID of the item selected by the user
    ' and set it the return value of the function
    GetSelection = TrackPopupMenu _
                    (menu_hwnd, _
                     TPM_LEFTALIGN Or TPM_TOPALIGN Or TPM_RETURNCMD Or TPM_RIGHTBUTTON, _
                     oPointAPI.X, oPointAPI.Y, _
                     0, form_hwnd, oRect)
        
    ' Destroy the menu
    DestroyMenu menu_hwnd

End Function

' InQuest injected base64 decoded content
' 'z{ly
' x%IH
' ?zx?

INQUEST-PP=macro
