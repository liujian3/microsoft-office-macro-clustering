Attribute VB_Name = "mGlobals"
Option Explicit
Option Private Module

Public Type e8v
e8w(0 To 3) As Long
e8x As Long
e8y As Long
End Type

Public Type e8z
e9a(1 To 4) As Double
End Type

Public Const e9b As Long = 20
Public Type e9c
e9d(0 To e9b) As Double
End Type

Public Type e9e
e9f As Boolean
e9g As Boolean
e9h As Boolean
e9i As Boolean
e9j As Boolean
e9k As Boolean
e9l As Long
e9m As Long
e9n As Long
e9o As Long
e9p As Long
e9q As Long
e9r As Long
e9s As Long
e9t As Long
e9u As Long
e9v As Long
e9w As Double
e9x As Long
e9y As Long
e9z As Long
f0a As Long
f0b As Long
f0c As Long
f0d As Long
f0e As e8v
f0f As e8v
f0g As Double
f0h As Double
f0i As Double
f0j As Double
f0k As Double
f0l As Double
f0m As Double
f0n As Double
f0o As Variant
End Type

Public Const f0p As Long = 1
Public Const f0q As Long = 36
Public Type f0r
f0s As Boolean
f0t(f0p To f0q) As Long
End Type

Public Const f0u As Long = 0
Public Const f0v As Long = 59
Public Type f0w
f0x As Boolean
f0y(f0u To f0v) As String
End Type


Public Const f5i As Long = 2
Public Const f5j As Long = 1
Public Const f5k As Long = 0
Public Const f5l As Long = 1
Public Const f5m As Long = 2
Public Const f5n As Long = 0
Public Const f5o As Long = 1
Public Const f5p As Long = 2
Public Const f5q As Boolean = True
Public Const f5r As Boolean = False
Public Const f5s As Long = -e9b
Public Const f5t As Long = 7
Public Const f5u As Long = 1
Public Const f5v As Long = 255
Public Const f5w As Long = 2
Public Const f5x As Long = 32767
Public Const f5y As Long = 0
Public Const f5z As Long = 255
Public Const f6a = 0
Public Const f6b = 0
''''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| f6c = 4
Public Const f6c = 4
'''
Public Const f6d = 0#
Public Const f6e = 1#
Public Const f6f = False
Public Const f6g = False
Public Const f6i = False
Public Const f6j = False
Public Const f6k = False
Public Const f6l As Long = 2
Public Const f6m As Long = 3
Public Const f6n As Long = 11
Public Const f6o As Long = 12
Public Const f6p As Long = 21
Public Const f6q As Long = 22
Public Const f6r As Long = -1
Public Const f6s As Long = 0
Public Const f6t As Long = 1
Public Const f6u As Long = 2
Public Const f6v As Long = 3
Public Const f6w As Long = 4
Public Const f6x As Long = 5
Public Const f6y As Long = 6
Public Const f6z As Long = 7
Public Const f7a As Long = 99
Public Const f7b As Long = 1
Public Const f7c As Long = 2
Public Const f7d As Long = 3
Public Const f7e As Long = 4
Public Const f7f As Long = 0
Public Const f7g As Long = 1
Public Const f7h As Long = 2
Public Const f7i As Double = -1#
Public Const f7j As Double = 1#
Public Const f7k As Long = 5
Public Const f7l As Long = -5
Public Const f7m As Long = -4
Public Const f7n As Long = -3
Public Const f7o As Long = -2
Public Const f7p As Long = -1
Public Const f7q As Long = 255
Public Const f7r As Long = 0
Public Const f7s As Long = 1
Public Const f7t As Long = 2
Public Const f7u As Long = 3
Public Const f7v As Long = 4
Public Const f7w As Long = 5
Public Const f7x As Long = 6
Public Const f7y As Long = 7
Public Const f7z As Long = 8
Public Const f8a As Long = 9
Public Const f8b As Long = 10
Public Const f8c As Long = 11
Public Const f8d As Long = 12
Public Const f8e As Long = 13
Public Const f8f As Long = 14
Public Const f8g As Long = 15
Public Const f8h As Long = 16
Public Const f8i As Long = 17
Public Const f8j As Long = 18
Public Const f8k As Long = 19
Public Const f8l As Long = 20
Public Const f8m As Long = 21
Public Const f8n As Long = 22
Public Const f8o As Long = 23
Public Const f8p As Long = 24
Public Const f8q As Long = 25
Public Const f8r As Long = 26
Public Const f8s As Long = 27
Public Const f8t As Long = 28
Public Const f8u As Long = 29
Public Const f8v As Long = 30
Public Const f8w As Long = 31
Public Const f8x As Long = 32
Public Const f8y As Long = 33
Public Const f8z As Long = 34
Public Const f9a As Long = 35
Public Const f9b As Long = 36
Public Const f9c As Long = 37
Public Const f9d As Long = 38
Public Const f9e As Long = 39
Public Const f9f As Long = 40
Public Const f9g As Long = 41
Public Const f9h As Long = 42
Public Const f9i As Long = 43
Public Const f9j As Long = 44
Public Const f9k As Long = 45
Public Const f9l As Long = 46
Public Const f9m As Long = 47
Public Const f9n As Long = 48
Public Const f9o As Long = 49
Public Const f9p As Long = 50
Public Const f9q As Long = 51
Public Const f9r As Long = 52
Public Const f9s As Long = 53
Public Const f9t As Long = 54
Public Const f9u As Long = 55
Public Const f9v As Long = 56
Public Const f9w As Long = 57
Public Const f9x As Long = 58
Public Const f9y As Long = 59
Public Const f9z As Long = 101
Public Const g0a As Long = 103
Public Const g0b As Long = 102
Public Const g0c As Long = 104
Public Const g0d As Long = 105
Public Const g0e As Long = 106
Public Const g0f As Long = 107
Public Const g0g As Long = 108
Public Const g0h As Long = 201
Public Const g0i As Long = 202
Public Const g0j As Long = 203
Public Const g0k As Long = 204
Public Const g0l As Long = 205
Public Const g0m As Long = 206
Public Const g0n As Long = 207
Public Const g0o As Long = 301
Public Const g0p As Long = 302
Public Const g0q As Long = 303
Public Const g0r As Long = 304
Public Const g0s As Long = 305
Public Const g0t As Long = 306
Public Const g0u As Long = 307
Public Const g0v As Long = 308
Public Const g0w As Long = 309
Public Const g0x As Long = 310
Public Const g0y As Long = 311
Public Const g0z As Long = 312
Public Const g1a As Long = 313
Public Const g1b As Long = 314
Public Const g1c As Long = 315
Public Const g1d As Long = 316
Public Const g1e As Long = 317
Public Const g1f As Long = 318
Public Const g1g As Long = 401
Public Const g1h As Long = 402
Public Const g1i As Long = 403
Public Const g1j As Long = 404
Public Const g1k As Long = 405
Public Const g1l As Long = 406
Public Const g1m As Long = 407
Public Const g1n As Long = 408
Public Const g1o As Long = 409
Public Const g1p As Long = 410
Public Const g1q As Long = 411
Public Const g1r As Long = 412
Public Const g1s As Long = 413
Public Const g1t As Long = 414
Public Const g1u As Long = 415
Public Const g1v As Long = 416
Public Const g1w As Long = 417
Public Const g1x As Long = 418
Public Const g1y As Long = 419
Public Const g1z As Long = 420
Public Const g2a As Long = 421
Public Const g2b As Long = 10000
Public Const g2c As Long = 901
Public Const g2d As Long = 902
Public Const g2e As Long = 903
Public Const g2f As Long = 904
Public Const g2g As String = ""
Public Const g2h As String = " "
Public Const g2i As String = "("
Public Const g2j As String = ")"
Public Const g2k As String = "["
Public Const g2l As String = "]"
Public Const g2m As String = "{"
Public Const g2n As String = "}"
Public Const g2o As String = "."
Public Const g2p As String = "..."
Public Const g2q As String = g2j & g2o
Public Const g2r As String = g2h & g2i
Public Const g2s As String = "'"
Public Const g2t As String = """"
Public Const g2u As String = g2h & "=" & g2h
Public Const g2v As String = ": "
Public Const g2w As String = ";" & g2h
Public Const g2x As String = ","
Public Const g2y As String = "," & g2h
Public Const g2z As String = "*X"
Public Const g3a As String = "^"
Public Const g3b As String = "+"
Public Const g3c As String = g2h & "+" & g2h
Public Const g3f As String = "Order"
Public Const g3g As String = "R|fffd|"
Public Const g3h As String = "Sum(E|fffd|)"
Public Const g3i As String = "Ax"
Public Const g3j As String = "Bx"
Public Const g3k As String = "TPOLY("
Public Const g4y As String = "X"
Public Const g6t As String = "in data area"
Public g7z As Boolean
Public g8a As Long
Public g8b As Boolean
Public g8c As Boolean
Public g8d As String
Public g8e As String
Public g8f As Long
Public g8g As Boolean
Public g8h As Boolean
Public g8i As Boolean
Public g8j As f0w
Public g8k(f5v) As Boolean
Public g8l(f5v) As Variant
Public g8m As Variant
Public g8n As Variant
Public g8o As Range
Public g8p As e9e
Public g8q As e9e
Public g8r As e9e
Public g8s As Long
Public g8t As Variant
Public g8u As Boolean
Public g8v As Boolean
Public g8w As Boolean
Public g8x As Boolean
Public g8y As Boolean
Public g8z As Variant
Public g9a As Boolean
Public g9b As Boolean
Public g9c As Boolean
Public g9d As Boolean
Public g9e As Long
Public g9f As Long
Public g9g As Long
Public g9h(f5v) As Variant
Public g9i(f5v) As Double
Public g9j(f5v) As Double
Public g9k(f5v) As Boolean
Public g9l(f5v) As Boolean
Attribute VB_Name = "mMain"
Option Explicit
Option Private Module
Option Base 1
Option Compare Text
'''
Public Function h3l(h3m As Double, h3n As Long, h3o, h3p As Long)
Dim h3q As Long
Dim h3r As Long
Dim h3s As Double
Dim h3t As Long, h3u As Long
Dim h3v As Long
Dim h3w As Long
Dim h3x As Long
Dim h3y As Double
If Not IsArray(h3o) Then
h3l = CVErr(xlErrRef)
Exit Function
End If
If IsObject(h3o) Then
h3q = h3o.Rows.Count
h3r = h3o.Columns.Count
Else
h3q = UBound(h3o, 1) - LBound(h3o, 1) + 1
On Error Resume Next
h3r = UBound(h3o, 2) - LBound(h3o, 2) + 1
On Error GoTo 0
End If
If h3q > 1 And h3r > 1 Then
h3l = CVErr(xlErrValue)
Exit Function
End If
If h3q = 1 Then h3x = h3r - 1 Else h3x = h3q - 1
If h3n > h3x Then
h3l = CVErr(xlErrValue)
Exit Function
End If
h3s = 0#
If h3p = 0 Then
For h3t = 0 To h3n
h3s = h3s + h3o(h3t + 1) * h3m ^ h3t
Next h3t
ElseIf h3p > 0 Then
h3w = h3p - 1
For h3t = h3p To h3n
h3v = h3t + 1
h3y = h3t
For h3u = 1 To h3w
h3y = h3y * (h3t - h3u)
Next h3u
h3s = h3s + h3y * h3o(h3v) * h3m ^ (h3t - h3p)
Next h3t
Else
h3l = CVErr(xlErrValue)
Exit Function
End If
h3l = h3s
End Function
'''
Public Function h3z(h4a As f0r, h4b, Optional h4c, Optional h4d, Optional h4e, Optional h4f, Optional h4g, Optional h4h, Optional h4i, Optional h4j, Optional h4k, Optional h4l, Optional h4m, Optional h4n, Optional h4o, Optional h4p, Optional h4q, Optional h4r, Optional h4s, Optional h4t, Optional h4u, Optional h4v, Optional h4w)
Dim h4x As Long
Dim h4y As Long
Dim h4z As Long
Dim h5a As Long
Dim h5b As Long
Dim h5c As Variant
Dim h5d As Boolean
g8g = g8s = f6m
g8h = g8s >= f6n
g8i = g8s >= f6p
If Not g8j.f0x Then j1g
g8p.f0o = h4d: g8q.f0o = h4c: g8r.f0o = h4e
g8p.f0d = f5o: g8q.f0d = f5n: g8r.f0d = f5p
g8p.e9x = f5i: g8q.e9x = f5i: g8r.e9x = f5j
h5c = i5w(h4q, f5k, 0)
If IsError(h5c) Then
g8y = True
g8t = i6e(xlErrValue, g0h, h4q, g8j.f0y(h4a.f0t(f8j)))
GoTo h5e
Else
g8y = h5c
End If
h5c = i5w(h4p, f5k, f6g, 0)
If IsError(h5c) Then
g8t = i6e(xlErrValue, g0k, h4p, g8j.f0y(h4a.f0t(f8i)))
GoTo h5e
Else
g8v = h5c
g8w = g8v
End If
If g8i Then
h5c = i5w(h4s, f5k, 0)
If IsError(h5c) Then
g8t = i6e(xlErrValue, g0i, h4s, g8j.f0y(h4a.f0t(f8l)))
GoTo h5e
Else
g9a = h5c
End If
End If
If Not IsObject(h4b) Then
g8t = i6e(xlErrRef, f9z, h4b, g8j.f0y(h4a.f0t(f7s)))
GoTo h5e
End If
g8r.e9y = h4b.Areas.Count
Set g8o = h4b
If g8g Then
If g8r.e9y = 1 Then
g9d = True
h5b = h4b.Rows.Count
h5c = i5w(h4u, f5l, f6b, f5y, f5z)
If IsError(h5c) Then
g8t = i6e(xlErrValue, g0a, h4u, g8j.f0y(f7t), f5y, f5z)
GoTo h5e
Else
g9e = h5c
End If
If h4v = 0 Then h4v = h5b - g9e
h5c = i5w(h4v, f5l, f6a, f5w, f5x)
If IsError(h5c) Then
g8t = i6e(xlErrValue, g0b, h4v, g8j.f0y(f7u), f5w, f5x)
GoTo h5e
Else
g9f = h5c
g9g = g9e + g9f
End If
If h5b Mod g9g = 0 Then
g8r.e9y = h5b / g9g
Else
g8t = i6e(xlErrRef, g0c, g8j.f0y(h4a.f0t(f7s)), h5b, g9g, g8j.f0y(h4a.f0t(f7t)), g8j.f0y(h4a.f0t(f7u)))
GoTo h5e
End If
Else
g9d = False
End If
For h4x = 1 To g8r.e9y
g8k(h4x) = False
Next h4x
If Not g9d Then
With g8o.Areas(1)
g8p.e9y = .Rows.Count
g8q.e9y = .Columns.Count
End With
End If
i6l 1
g8m = g8l(1)
g8n = g8m
If g8r.e9y >= f5u And g8r.e9y <= f5v Then
If g9d Then
For h4x = 1 To g8r.e9y
g9h(h4x) = g8o.Offset(g9e + (h4x - 1) * g9g, 0)(1, 1)
Next h4x
Else
For h4x = 1 To g8r.e9y
g9h(h4x) = g8o.Areas(h4x)(1, 1).Value
Next h4x
End If
For h4x = g8r.e9y + 1 To f5v
g9h(h4x) = Empty
Next h4x
Else
g8t = i6e(xlErrRef, g0d, g8r.e9y, f5u, f5v)
GoTo h5e
End If
g8r.e9z = g8r.e9y
Else
If g8r.e9y > 1 Then
g8t = i6e(xlErrRef, g0e, g8j.f0y(h4a.f0t(f7s)), h4b)
GoTo h5e
End If
g9d = True
g8m = h4b.Value
g8n = g8m
End If
With g8q
.e9y = UBound(g8n, 2)
If .e9y < .e9x Then
g8t = i6e(xlErrRef, g0f, g8j.f0y(h4a.f0t(f8u)), g8j.f0y(h4a.f0t(f7s)), .e9y, g8j.f0y(h4a.f0t(f8x)))
GoTo h5e
End If
.e9z = .e9y - .e9x + 1
g8p.f0a = .e9y
g8p.f0b = .e9z
End With
With g8p
.e9y = UBound(g8n, 1)
If .e9y < .e9x Then
g8t = i6e(xlErrRef, g0g, g8j.f0y(h4a.f0t(f8v)), g8j.f0y(h4a.f0t(f7s)), .e9y, g8j.f0y(h4a.f0t(f8y)))
GoTo h5e
End If
.e9z = .e9y - .e9x + 1
g8q.f0a = .e9y
g8q.f0b = .e9z
End With
If g8i Then
If g8s = f6q Then
h5c = i5w(h4f, f5l, f6c, 1, e9b)
If IsError(h5c) Then
g8t = i6e(xlErrValue, g0o, h4f, g8j.f0y(h4a.f0t(f7y)), 1, e9b)
GoTo h5e
Else
g8q.e9u = -h5c
g8p.e9u = f6s
End If
Else
h5c = i5w(h4g, f5l, f6c, 1, e9b)
If IsError(h5c) Then
g8t = i6e(xlErrValue, g0o, h4g, g8j.f0y(h4a.f0t(f7z)), 1, e9b)
GoTo h5e
Else
g8p.e9u = -h5c
g8q.e9u = f6s
End If
End If
i7l g8p
i7l g8q
Else
h5c = i5w(h4f, f5l, f6c, f5s, f5t)
If IsError(h5c) Then
g8t = i6e(xlErrValue, g0p, h4f, g8j.f0y(h4a.f0t(f7y)), f5s, f5t)
GoTo h5e
Else
With g8q
.e9u = Int(h5c)
If .e9u = f6x Then .e9w = h5c - .e9u
End With
i7l g8q
End If
h5c = i5w(h4g, f5l, f6c, f5s, f5t)
If IsError(h5c) Then
g8t = i6e(xlErrValue, g0p, h4g, g8j.f0y(h4a.f0t(f7z)), f5s, f5t)
GoTo h5e
Else
With g8p
.e9u = Int(h5c)
If .e9u = f6x Then .e9w = h5c - .e9u
End With
i7l g8p
End If
If g8g Then
h5c = i5w(h4h, f5l, f6c, f5s, f5t)
If IsError(h5c) Then
g8t = i6e(xlErrValue, g0p, h4h, g8j.f0y(h4a.f0t(f8a)), f5s, f5t)
GoTo h5e
Else
With g8r
.e9u = Int(h5c)
If .e9u = f6x Then .e9w = h5c - .e9u
End With
i7l g8r
End If
End If
End If
If g8h Then
h5c = i5w(h4w, f5k, f6k, 0)
If IsError(h5c) Then
g8t = i6e(xlErrValue, g0n, h4w, g8j.f0y(h4a.f0t(f8n)))
GoTo h5e
Else
g9c = h5c
End If
If Not i6c(h4r) Then
g8t = i6e(xlErrValue, g0j, h4r, g8j.f0y(f8k))
GoTo h5e
End If
If g8s = f6o Or g8s = f6q Then
If Not g9c Then
g8p.e9l = 1
h4x = 0
h5d = False
Do
h4x = h4x + 1
h5d = g8n(h4x, 1) = h4r
Loop Until h5d Or h4x = g8p.e9y
If h5d Then
g8q.e9l = h4x
Else
g8t = i6e(xlErrNA, g0q, h4r, g8j.f0y(h4a.f0t(f8k)), g8j.f0y(h4a.f0t(f9a)), g8j.f0y(h4a.f0t(f9b)), g8p.e9y)
GoTo h5e
End If
Else
If j2h(h4r, 1, g8p.e9y) Then
g8q.e9l = h4r
Else
g8t = i6e(xlErrNA, g1e, h4r, g8j.f0y(h4a.f0t(f8k)), g8j.f0y(h4a.f0t(f9b)), g8p.e9y, g8j.f0y(h4a.f0t(f8n)))
GoTo h5e
End If
End If
Else
If Not g9c Then
g8q.e9l = 1
h4x = 0
h5d = False
Do
h4x = h4x + 1
h5d = g8n(1, h4x) = h4r
Loop Until h5d Or h4x = g8q.e9y
If h5d Then
g8p.e9l = h4x
Else
g8t = i6e(xlErrNA, g0q, h4r, g8j.f0y(h4a.f0t(f8k)), g8j.f0y(h4a.f0t(f9a)))
GoTo h5e
End If
Else
If j2h(h4r, 1, g8q.e9y) Then
g8p.e9l = h4r
Else
g8t = i6e(xlErrNA, g1e, h4r, g8j.f0y(h4a.f0t(f8k)), g8j.f0y(h4a.f0t(f9b)), g8q.e9y, g8j.f0y(h4a.f0t(f8n)))
GoTo h5e
End If
End If
End If
Else
g8q.e9l = 1: g8q.e9n = 1
g8p.e9l = 1: g8p.e9n = 1
g8r.e9l = 1
End If
g8q.e9n = g8p.e9l
g8p.e9n = g8q.e9l
If Not i9s(h4a, g8q, h4c, h4i, h4l, f7v, f8b, f8e) Then GoTo h5e
If Not i9s(h4a, g8p, h4d, h4j, h4m, f7w, f8c, f8f) Then GoTo h5e
If g8g Then
If Not i9s(h4a, g8r, h4e, h4k, h4n, f7x, f8d, f8g) Then GoTo h5e
End If
If Not j0d(h4a, g8q, f7y, f7v) Then GoTo h5e
If Not j0d(h4a, g8p, f7z, f7w) Then GoTo h5e
If g8g Then
If Not j0d(h4a, g8r, f8a, f7x) Then GoTo h5e
End If
If g8i Then
h5c = i5w(h4t, f5k, f6j)
If IsError(h5c) Then
g8t = i6e(xlErrValue, g0l, h4t, g8j.f0y(h4a.f0t(f8m)))
GoTo h5e
Else
g9b = h5c
End If
End If
If Not j0u(h4a, g8q, f7y, f7v) Then GoTo h5e
g8p.e9o = g8q.e9m
If Not j0u(h4a, g8p, f7z, f7w) Then GoTo h5e
g8q.e9o = g8p.e9m
If g8g Then
If Not j0u(h4a, g8r, f8a, f7x) Then GoTo h5e
g8r.e9o = g8r.e9m
End If
If Not g8p.e9i And Not g8q.e9i Then
h5c = i5w(h4o, f5k, f6f)
    If IsError(h5c) Then
g8t = i6e(xlErrValue, g0m, h4o, g8j.f0y(h4a.f0t(f8h)))
GoTo h5e
Else
g8u = h5c
    End If
End If
    If g8c Or g8b Then
h3z = True
Else
h3z = True
End If
Exit Function
h5e:
h3z = False
End Function
'''
Public Function h5f(h5g As f0r)
Dim h5h As Long
Dim h5i As Long
Dim h5j As Long
Dim h5k As Variant
Dim h5l As Long
Dim h5m As Long
Dim h5n As Boolean
If Not g8q.e9i And g8p.e9i Then
With g8q
h5l = i8a(.e9o, .f0d)
g8x = h5l < .e9z
If .e9g Then
If Not g8x Then
h5l = .f0c
ElseIf h5l >= 1 Then
h5l = 0
For h5h = .e9x To .e9y
If i8y(h5h, g8q) Then h5l = h5l + 1
Next h5h
End If
End If
g8w = h5l < .e9z
If Not g8v Then
If g8w Then
h5f = i6e(xlErrValue, g1g, .e9z - h5l, g8j.f0y(h5g.f0t(f7y)), g8j.f0y(h5g.f0t(f8i)), True, j1j(h5g, g8p), g8g, j1j(h5g, g8r, g8g))
Exit Function
End If
Else
If h5l < 1 Then
h5f = i6e(xlErrNA, g1j, g8q.e9g, j1p(h5g, g8q), True, j1j(h5g, g8p), g8g, j1j(h5g, g8r, g8g))
Exit Function
ElseIf g8w Then
If Not g8i Then
If i2w(g8q) Then
h5f = i6e(xlErrNA, g1m, g8j.f0y(h5g.f0t(f7v)), g8q.f0o, g8q.e9g, j1p(h5g, g8q), g8x, j1j(h5g, g8p), g8g, j1j(h5g, g8r, g8g))
Exit Function
End If
End If
End If
End If
End With
ElseIf Not g8p.e9i And g8q.e9i Then
With g8p
h5l = i8a(.e9o, .f0d)
g8x = h5l < .e9z
If .e9g Then
If Not g8x Then
h5l = .f0c
ElseIf h5l >= 1 Then
h5l = 0
For h5h = .e9x To .e9y
If i8y(h5h, g8p) Then h5l = h5l + 1
Next h5h
End If
End If
g8w = h5l < .e9z
If Not g8v Then
If g8w Then
h5f = i6e(xlErrValue, g1h, .e9z - h5l, g8j.f0y(h5g.f0t(f7z)), g8j.f0y(h5g.f0t(f8i)), True, j1j(h5g, g8q), g8g, j1j(h5g, g8r, g8g))
Exit Function
End If
Else
If h5l < 1 Then
h5f = i6e(xlErrNA, g1k, g8p.e9g, j1p(h5g, g8p), True, j1j(h5g, g8q), g8g, j1j(h5g, g8r, g8g))
Exit Function
ElseIf g8w Then
If Not g8i Then
If i2w(g8p) Then
h5f = i6e(xlErrNA, g1n, g8j.f0y(h5g.f0t(f7w)), g8p.f0o, g8p.e9g, j1p(h5g, g8p), g8x, j1j(h5g, g8q), g8g, j1j(h5g, g8r, g8g))
Exit Function
End If
End If
End If
End If
End With
ElseIf Not g8p.e9i And Not g8q.e9i Then
h5m = g8p.e9z * g8q.e9z
h5l = i7n(g8m, 2, g8p.e9y, 2, g8q.e9y)
g8x = h5l < h5m
If g8p.e9g Or g8q.e9g Then
If Not g8x Then
h5l = g8p.f0c * g8q.f0c
ElseIf h5l >= 1 Then
h5l = 0
If (g8p.f0c * g8q.e9z) > (g8q.f0c * g8p.e9z) Then
For h5i = g8q.e9x To g8q.e9y
If i9e(h5i, g8q) Then
For h5j = g8p.e9x To g8p.e9y
If i8u(h5j, h5i, g8p) Then h5l = h5l + 1
Next h5j
End If
Next h5i
Else
For h5j = g8p.e9x To g8p.e9y
If i9e(h5j, g8p) Then
For h5i = g8q.e9x To g8q.e9y
If i8u(h5i, h5j, g8q) Then h5l = h5l + 1
Next h5i
End If
Next h5j
End If
End If
End If
g8w = h5l < h5m
If Not g8v Then
If g8w Then
h5f = i6e(xlErrValue, g1i, h5m - h5l, g8j.f0y(h5g.f0t(f8i)), g8g, j1j(h5g, g8r, g8g), g8g Or g8r.e9g, j1p(h5g, g8r, False))
Exit Function
End If
Else
If h5l < 1 Then
h5f = i6e(xlErrNA, g1l, g8q.e9g, j1p(h5g, g8q), g8p.e9g, j1p(h5g, g8p), True, g6t, g8g, j1j(h5g, g8r, g8g))
Exit Function
ElseIf g8w Then
If i3e Then
h5f = i6e(xlErrNA, g1o, g8j.f0y(h5g.f0t(f7v)), g8q.f0o, g8j.f0y(h5g.f0t(f7w)), g8p.f0o, g8q.e9g, j1p(h5g, g8q), g8p.e9g, j1p(h5g, g8p), g8x, g6t, g8g, j1j(h5g, g8r, g8g))
Exit Function
End If
End If
End If
End If
h5k = h6n
If IsError(h5k) Then
h5f = i6e(xlErrNA, CInt(h5k) - g2b)
Else
h5f = h5k
End If
End Function
'''
Private Function h6n()
Dim h6o As Variant
If g8p.e9i And g8q.e9i Then
h6n = g8m(g8p.e9m, g8q.e9m)
ElseIf Not g8q.e9i And g8p.e9i Then
If g8s < f6p Then
h6n = h7h(f7b, g8q, g8p)
Else
h6n = h6q(f7b, g8q, g8p)
End If
ElseIf Not g8p.e9i And g8q.e9i Then
If g8s < f6p Then
h6n = h7h(f7b, g8p, g8q)
Else
h6n = h6q(f7b, g8p, g8q)
End If
Else
If g8u Then
h6o = h7h(f7c, g8p, g8q)
If IsError(h6o) Then GoTo h6p
h6n = h7h(f7d, g8q, g8p)
Else
h6o = h7h(f7c, g8q, g8p)
If IsError(h6o) Then GoTo h6p
h6n = h7h(f7d, g8p, g8q)
End If
End If
Exit Function
h6p:
h6n = h6o
End Function
'''
Private Function h6q(ByVal h6r As Long, h6s As e9e, h6t As e9e)
Dim h6u As Long
Dim h6v As Long
Dim h6w As Long
Dim h6x As Long
Dim h6y() As Variant
Dim h6z As Variant
Dim h7a As Long
Dim h7b As Boolean
Dim h7c As Long
Dim h7d As Double
h7b = h6s.f0d = f5o
h6x = -h6s.e9u
h6u = h6x
h6v = 1
While h6u > 0
h6v = h6v + 1
h6s.e9u = -h6u
h6z = h7h(h6r, h6s, h6t)
h7a = CInt(h6z(-f7k))
If h7a = 0 Then h7a = 1
If h6v = 2 Then
ReDim h6y(0 To h7a + 1, -f7k To e9b)
h6y(0, f7l) = g3f
h6y(0, f7m) = g3g
h6y(0, f7n) = g3h
h6y(0, f7o) = g3i
h6y(0, f7p) = g3j
For h6w = 0 To e9b
Next h6w
End If
For h6w = -f7k To h7a
h6y(h6v, h6w) = h6z(h6w)
Next h6w
For h6w = h7a + 1 To h6x
h6y(h6v, h6w) = 0
Next h6w
h6u = h7a - 1
If h6v = 2 Or h6y(h6v, f7m) > h7d Then
h7d = h6y(h6v, f7m)
h7c = h6v
End If
Wend
For h6w = -f7k To e9b
h6y(1, h6w) = h6y(h7c, h6w)
Next h6w
h6q = h6y
End Function
'''
Private Function h7e(ByVal h7f As Long, ByVal h7g As Long) As Long
Select Case h7g
Case 1
h7e = f7a
Case 2
If h7f <> f6v Then h7e = f6w Else h7e = f6v
Case Else
h7e = h7f
End Select
End Function
'''
Private Function h7h(ByVal h7i As Long, h7j As e9e, h7k As e9e)
Dim h7l As Long, h7m As Long
Dim h7n As Long
Dim h7o As Long
Dim h7p As Double, h7q As Double, h7r As Double
Dim h7s As Double, h7t As Double, h7u As Double
Dim h7v As Double
Dim h7w(2) As Double
Dim h7x As Long, h7y As Long, h7z As Long, h8a As Long
Dim h8b As Long, h8c As Long, h8d As Long
Dim h8e As Long, h8f As Long
Dim h8g As Double, h8h As Double, h8i As Double
Dim h8j As e8z, h8k As e8z
Static h8l() As Double
Static h8m() As Boolean
Dim h8n() As Double
Dim h8o() As Double
Dim h8p() As Double
Dim h8q() As Double
Dim h8r() As Double
Dim h8s As Boolean
Dim h8t As Long
Dim h8u As e9c
Dim h8v As e9c
Dim h8w() As Variant
Dim h8x() As Double
Dim h8y As Variant
Dim h8z() As Double
Dim h9a As Double
Dim h9b As Double
Dim h9c As Double
Dim h9d As Double
Dim h9e  As Double
Dim h9f As Long, h9g As Long, h9h As Long
Dim h9i As Double
Dim h9j As Long
Dim h9k As Double
Dim h9l As Double
Dim h9m As Double
Dim h9n As Double
Dim h9o As Double
Dim h9p As Double
Dim h9q As Double
Dim h9r As Long
Dim h9s As Boolean
Dim h9t As Boolean
Dim h9u As Variant
Dim h9v As Variant
Dim h9w As Boolean
Dim h9x As Long
With h7j
h9w = .f0d = f5o
h9s = (.e9u = f6z Or .e9u <= f6r)
h9t = (h7k.e9u = f6z Or h7k.e9u <= f6r)
If h9s Then
h7l = .e9y - .e9x + 1
If .e9u = f6z Then
ReDim h8q(h7l) As Double
ReDim h8r(h7l) As Double
End If
Else
h7l = .f0e.e8y - .f0e.e8x + 1
End If
If g8w Then h7m = 0 Else h7m = h7l
ReDim h8n(h7l) As Double
ReDim h8p(h7l) As Double
Select Case h7i
Case f7d
h7o = 1
If h9s Then
If g8w Then
For h7x = 1 To h7l
If h8m(h7x) Then
h7m = h7m + 1
h8n(h7m) = i5p(h7x + 1, .e9l, h9w)
h8p(h7m) = h8l(h7x)
End If
Next h7x
Else
For h7x = 1 To h7l
h8n(h7x) = i5p(h7x + 1, .e9l, h9w)
h8p(h7x) = h8l(h7x)
Next h7x
End If
Else
h7y = .e9l
With h7j.f0e
If g8w Then
For h7x = 1 To h7l
If h8m(h7x) Then
h7m = h7m + 1
h8n(h7m) = i5p(.e8w(.e8x + h7x - 1), h7y, h9w)
h8p(h7m) = h8l(h7x)
End If
Next h7x
Else
For h7x = 1 To h7l
h8n(h7x) = i5p(.e8w(.e8x + h7x - 1), h7y, h9w)
h8p(h7x) = h8l(h7x)
Next h7x
End If
End With
h9r = h7e(.e9u, h7m)
End If
Case f7c
h7m = h7l
If h9s Then
If Not g8w Then
For h7x = 1 To h7l
h8n(h7x) = i5p(h7x + 1, .e9l, h9w)
Next h7x
End If
End If
If h9t Then
h7o = .f0b
Else
If g8w Then
h9u = i1u(f7g, h7k)
If IsError(h9u) Then
h7h = h9u
GoTo h9z
End If
End If
h7o = h7k.f0e.e8y - h7k.f0e.e8x + 1
End If
ReDim h8l(h7o) As Double
ReDim h8m(h7o) As Boolean
Case f7b
h7o = 1
If h9s Then
If g8w Then
For h7x = 1 To h7l
If i8y(h7x + 1, h7j) Then
h7m = h7m + 1
h8n(h7m) = i5p(h7x + 1, .e9l, h9w)
h8p(h7m) = i5l(h7x + 1, .e9o, h9w)
End If
Next h7x
Else
For h7x = 1 To h7l
h8n(h7x) = i5p(h7x + 1, .e9l, h9w)
h8p(h7x) = i5l(h7x + 1, .e9o, h9w)
Next h7x
End If
h8s = True
For h7x = 2 To h7l
If h8p(h7x) <> h8p(1) Then
h8s = False
Exit For
End If
Next h7x
Else
If g8w Then
h9u = i1u(f7f, h7j)
If IsError(h9u) Then
h7h = h9u
GoTo h9z
End If
End If
With h7j.f0e
h7m = .e8y - .e8x + 1
For h7x = 1 To h7m
h7y = .e8w(.e8x + h7x - 1)
h8n(h7x) = i5p(h7y, h7j.e9l, h9w)
h8p(h7x) = i5l(h7y, h7j.e9o, h9w)
Next h7x
End With
h9r = h7e(.e9u, h7m)
End If
Case Else
h9r = h7e(.e9u, h7m)
h7o = 1
For h7x = 1 To h7m
h8n(h7x) = g9i(h7x)
h8p(h7x) = g9j(h7x)
Next h7x
End Select
For h8a = 1 To h7o
If h7i = f7c Then
h9x = .e9o
If h9t Then
.e9o = h8a + 1
Else
.e9o = h7k.f0e.e8w(h7k.f0e.e8x + h8a - 1)
End If
If h9s Then
If g8w Then
h7m = 0
For h7x = 1 To h7l
If i8y(h7x + 1, h7j) Then
h7m = h7m + 1
h8n(h7m) = i5p(h7x + 1, .e9l, h9w)
h8p(h7m) = i5l(h7x + 1, .e9o, h9w)
End If
Next h7x
If h7m < 1 Then
h8m(h8a) = False
GoTo h9y
End If
Else
For h7x = 1 To h7l
h8p(h7x) = i5l(h7x + 1, .e9o, h9w)
Next h7x
End If
Else
If g8w Then
i6r h7j
h9u = i1u(f7f, h7j)
If IsError(h9u) Then
h8m(h8a) = False
GoTo h9y
End If
End If
h9r = .e9u
With h7j.f0e
h7m = .e8y - .e8x + 1
For h7x = 1 To h7m
h7y = .e8w(.e8x + h7x - 1)
h8n(h7x) = i5p(h7y, h7j.e9l, h9w)
h8p(h7x) = i5l(h7y, h7j.e9o, h9w)
Next h7x
End With
.e9o = h9x
End If
End If
If h9s Then
If h7m < 1 Then
h7h = CVErr(g2b + g2d)
GoTo h9z
ElseIf h7m = 1 And .e9u = f6z Then
h9r = f7a
Else
If .e9u <= f6r Then
h9r = .e9u
If -.e9u >= h7m Then
h8t = h7m - 1
Else
h8t = -.e9u
End If
ReDim h8x(h8t + 1, h8t + 1) As Double
ReDim h8z(h8t + 1) As Double
Else
If h7m > 2 Then
h9r = .e9u
Else
h9r = f6w
End If
End If
End If
End If
If h9r <= f6r Then
ReDim h8o(h7l) As Double
If h7m > 1 Then
h9a = (f7j - f7i) / (h8n(h7m) - h8n(1))
h9b = f7i - h9a * h8n(1)
For h7x = 1 To h7m
h8o(h7x) = h9a * h8n(h7x) + h9b
Next h7x
End If
End If
Select Case h9r
Case f6z
h8q(1) = 0
h8r(1) = 0
For h7x = 2 To h7m - 1
h7p = h8n(h7x - 1)
h7q = h8n(h7x)
h7r = h8n(h7x + 1)
h8i = (h7q - h7p) / (h7r - h7p)
h8g = h8i * h8q(h7x - 1) + 2#
h8q(h7x) = (h8i - 1) / h8g
h8h = (h8p(h7x + 1) - h8p(h7x)) / (h7r - h7q) - (h8p(h7x) - h8p(h7x - 1)) / (h7q - h7p)
h8r(h7x) = (6# * h8h / (h7r - h7p) - h8i * h8r(h7x - 1)) / h8g
Next h7x
h8q(h7m) = 0#
For h7x = h7m - 1 To 1 Step -1
h8q(h7x) = h8q(h7x) * h8q(h7x + 1) + h8r(h7x)
Next h7x
If .e9f Then
If .f0n <= h8n(2) Then
h8f = 2: h8e = 1
ElseIf .f0n > h8n(h7m) Then
h8f = h7m: h8e = h8f - 1
Else
h8e = 1
h8f = h7m
While h8f - h8e > 1
h7x = (h8f + h8e) \ 2
If .f0n <= h8n(h7x) Then h8f = h7x Else h8e = h7x
Wend
End If
Else
If .f0n >= h8n(2) Then
h8f = 2: h8e = 1
ElseIf .f0n < h8n(h7m) Then
h8f = h7m: h8e = h8f - 1
Else
h8e = 1
h8f = h7m
While h8f - h8e > 1
h7x = (h8f + h8e) \ 2
If .f0n >= h8n(h7x) Then h8f = h7x Else h8e = h7x
Wend
End If
End If
h7s = h8n(h8f) - h8n(h8e)
h7u = (h8n(h8f) - .f0n) / h7s
h7t = (.f0n - h8n(h8e)) / h7s
h7v = h7u * h8p(h8e) + h7t * h8p(h8f) + ((h7u ^ 3 - h7u) * h8q(h8e) + (h7t ^ 3 - h7t) * h8q(h8f)) * (h7s ^ 2) / 6
Case f6w
If .f0n = h8n(1) Then
h7v = h8p(1)
ElseIf .f0n = h8n(2) Then
h7v = h8p(2)
Else
h8g = (h8p(2) - h8p(1)) / (h8n(2) - h8n(1))
h8h = h8p(2) - h8g * h8n(2)
h7v = h8g * .f0n + h8h
End If
Case f6v
h8g = Abs(.f0n - h8n(1))
h8h = Abs(h8n(2) - .f0n)
If h8g < h8h Then
h7v = h8p(1)
ElseIf h8g > h8h Then
h7v = h8p(2)
Else
If .e9f Then
h7v = h8p(2)
Else
h7v = h8p(1)
End If
End If
Case f6x, f6y
For h7x = 1 To h7m
h8j.e9a(h7x) = h8n(h7x)
h8k.e9a(h7x) = h8p(h7x)
Next h7x
If h9r = f6x And .e9w > 0# Then
h9u = i0a(f6x, .f0m, .f0n, h7m, h8j, h8k, .e9f)
If IsError(h9u) Then
h7h = h9u
Exit Function
End If
h9v = i0a(f6y, .f0m, .f0n, h7m, h8j, h8k, .e9f)
If IsError(h9v) Then
h7h = h9v
Exit Function
End If
h7v = (1# - .e9w) * h9u + .e9w * h9v
Else
h9u = i0a(h9r, .f0m, .f0n, h7m, h8j, h8k, .e9f)
If IsError(h9u) Then
h7h = h9u
Exit Function
End If
h7v = h9u
End If
Case f7a
h7v = h8p(1)
Case Else
If (h8t > 0) And Not h8s Then
For h7x = 0 To h8t
h8b = h7x + 1
For h7y = 0 To h7x
h8c = h7y + 1
h8d = h7x + h7y
h8g = 0#
For h7z = 1 To h7m
h8g = h8g + h8o(h7z) ^ h8d
Next h7z
h8x(h8b, h8c) = h8g
h8x(h8c, h8b) = h8g
Next h7y
h8g = 0#
For h7z = 1 To h7m
h8g = h8g + h8p(h7z) * h8o(h7z) ^ h7x
Next h7z
h8z(h8b) = h8g
Next h7x
On Error Resume Next
h8y = Application.WorksheetFunction.MInverse(1)
h8y = Application.WorksheetFunction.MInverse(h8x)
On Error GoTo 0
If IsError(h8y) Or IsEmpty(h8y) Then
h7h = CVErr(g2b + g2e)
GoTo h9z
End If
For h7x = 0 To h8t
h8b = h7x + 1
h8g = 0#
For h7y = 0 To h8t
h8c = h7y + 1
h8g = h8g + h8z(h8c) * h8y(h8b, h8c)
Next h7y
h8u.e9d(h7x) = h8g
Next h7x
Else
h8u.e9d(0) = h8p(1)
End If
If g8s < f6p Then
h9c = h9a * .f0n + h9b
h7v = i7f(h8u, h9c, h8t)
Else
ReDim h8w(-f7k To e9b) As Variant
h8w(f7l) = h8t
i6u h8u, h8v, h9a, h9b, h8t, g9a
For h7x = 0 To h8t
h8w(h7x) = h8v.e9d(h7x)
Next h7x
If g9b Then
h9j = 2 * h7m - 1
Else
h9j = h7m
End If
h9i = 0#
For h7x = 1 To h7m
If g9a Then h9c = h8o(h7x) Else h9c = h8n(h7x)
h7v = i7f(h8v, h9c, h8t)
h9i = h9i + (h7v - h8p(h7x)) ^ 2
h9l = h9l + h8p(h7x)
h9m = h9m + h8p(h7x) ^ 2
h9n = h9n + h7v
h9o = h9o + h7v ^ 2
h9p = h9p + (h8p(h7x) * h7v)
If g9b And h7m > 2 Then
If h7x < h7m Then
If g9a Then
h9c = (h8o(h7x) + h8o(h7x + 1)) / 2#
Else
h9c = (h8n(h7x) + h8n(h7x + 1)) / 2#
End If
h7v = i7f(h8v, h9c, h8t)
h9e = (h8p(h7x) + h8p(h7x + 1)) / 2#
h9i = h9i + (h7v - h9e) ^ 2
h9l = h9l + h9e
h9m = h9m + h9e ^ 2
h9n = h9n + h7v
h9o = h9o + h7v ^ 2
h9p = h9p + (h9e * h7v)
End If
End If
Next h7x
h8w(f7n) = h9i
If (h8t > 0) And Not h8s Then
On Error Resume Next
h9k = (h9j * h9p - h9l * h9n) ^ 2 / ((h9j * h9m - h9l ^ 2) * (h9j * h9o - h9n ^ 2))
If Err.Number <> 0 Then
Err.Clear
h9k = 1#
End If
On Error GoTo 0
Else
h9k = 1#
End If
If h9k > 1# Or h9k < 0# Then h9k = 1#
h8w(f7m) = h9k
If g9a Then
h8w(f7o) = h9a
h8w(f7p) = h9b
Else
h8w(f7o) = g3k & g4y & g2x & h8t & g2x & g2m
For h7x = 0 To h8t - 1
h8w(f7o) = h8w(f7o) & h8v.e9d(h7x) & g2x
Next h7x
h8w(f7o) = h8w(f7o) & h8v.e9d(h8t) & g2n & g2j
If Len(h8w(f7o)) >= f7q Then h8w(f7o) = CVErr(xlErrNA)
h8w(f7p) = h8v.e9d(0)
If h8t > 0 Then
If h8v.e9d(1) < 0 Then
h8w(f7p) = h8w(f7p) & h8v.e9d(1) & g2z
Else
h8w(f7p) = h8w(f7p) & g3b & h8v.e9d(1) & g2z
End If
For h7x = 2 To h8t
If h8v.e9d(h7x) < 0 Then
h8w(f7p) = h8w(f7p) & h8v.e9d(h7x) & g2z & g3a & h7x
Else
h8w(f7p) = h8w(f7p) & g3b & h8v.e9d(h7x) & g2z & g3a & h7x
End If
Next h7x
End If
If Len(h8w(f7p)) >= f7q Then h8w(f7p) = CVErr(xlErrNA)
End If
h7h = h8w
GoTo h9z
End If
End Select
If h7i = f7c Then
h8m(h8a) = True
h8l(h8a) = h7v
End If
h9y:
Next h8a
h7h = h7v
h9z:
End With
End Function
'''
Private Function i0a(ByVal i0b As Long, ByVal i0c As Double, i0d As Double, ByVal i0e As Long, i0f As e8z, i0g As e8z, ByVal i0h As Boolean)
Dim i0i As Long
Dim i0j(1 To 2) As Double
Dim i0k(1 To 2) As Single
Dim i0l As Double, i0m As Double
Dim i0n As Double, i0o As Double
Dim i0p As Variant
For i0i = 1 To i0e - 2
i0p = i0q(i0b, i0h, i0d, i0f.e9a(i0i), i0f.e9a(i0i + 1), i0f.e9a(i0i + 2), i0g.e9a(i0i), i0g.e9a(i0i + 1), i0g.e9a(i0i + 2))
If IsError(i0p) Then
i0a = i0p
Exit Function
Else
i0j(i0i) = i0p
i0k(i0i) = i0j(i0i)
End If
Next i0i
If i0e = 4 Then
If i0k(1) <> i0k(2) Then
If i0c <> 0# Then
If i0d <= (i0f.e9a(3) + i0f.e9a(2)) / 2# Then
i0l = 2# * (i0d - i0f.e9a(2)) / (i0f.e9a(3) - i0f.e9a(2))
i0m = i0l ^ i0c
i0o = i0m / 2#
i0n = 1# - i0o
Else
i0l = 2# * (i0d - i0f.e9a(3)) / (i0f.e9a(2) - i0f.e9a(3))
i0m = i0l ^ i0c
i0n = i0m / 2#
i0o = 1# - i0n
End If
Else
i0o = (Sin(((i0d - i0f.e9a(2)) / (i0f.e9a(3) - i0f.e9a(2))) * 3.1415926535898 - 1.5707963267949) + 1) / 2
i0n = 1# - i0o
End If
i0a = i0n * i0j(1) + i0o * i0j(2)
Else
i0a = i0j(1)
End If
Else
i0a = i0j(1)
End If
End Function

Private Function i0q(ByVal i0r As Long, ByVal i0s As Boolean, ByVal i0t As Double, ByVal i0u As Double, ByVal i0v As Double, ByVal i0w As Double, ByVal i0x As Double, ByVal i0y As Double, ByVal i0z As Double)
Const i1a As Double = 0.000000000001
Dim i1b As Double, i1c As Double, i1d As Double
Dim i1e As Double, i1f As Double, i1g As Double, i1h As Double, i1i As Double
Dim i1j As Long
Dim i1k As Double
If i0t = i0u Then
i0q = i0x
Exit Function
ElseIf i0t = i0v Then
i0q = i0y
Exit Function
ElseIf i0t = i0w Then
i0q = i0z
Exit Function
End If
If i0r = f6y Then GoTo i1m
i1l:
i1b = ((i0v - i0w) * (i0x - i0z) + (i0w - i0u) * (i0y - i0z)) / (i0u ^ 2 * (i0v - i0w) + i0v ^ 2 * (i0w - i0u) + i0w ^ 2 * (i0u - i0v))
i1c = (i0y - i0z - i1b * (i0v ^ 2 - i0w ^ 2)) / (i0v - i0w)
i1d = i0x - i1b * i0u ^ 2 - i1c * i0u
i0q = i1b * i0t ^ 2 + i1c * i0t + i1d
Exit Function
i1m:
If i0s Then
If i0t < i0u Then
i1j = -1
ElseIf i0t > i0w Then
i1j = 1
End If
Else
If i0t > i0u Then
i1j = -1
ElseIf i0t < i0w Then
i1j = 1
End If
End If
If i0y = i0x Or i0y = i0z Then
GoTo i1n
ElseIf i0y > i0x Then
If i0y > i0z Then GoTo i1o
Else
If i0y < i0z Then GoTo i1o
End If
i1e = (i0x - i0y) / (i0v - i0u)
i1f = (i0z - i0x) / i1e
i1g = i0u - i0w
i1i = i1g - i1f
If Abs(i1i) <= i1a Then
GoTo i1l
End If
i1c = (i1f * i0w - i1g * i0v) / i1i
i1h = i0v + i1c
i1b = i1e * (i0u + i1c) * i1h
i1d = i0x - i1e * i1h
Select Case i1j
Case 0
i0q = i1b / (i0t + i1c) + i1d
Case -1
i1k = -i1b / (i0u + i1c) ^ 2
i0q = i0x + (i0t - i0u) * i1k
Case 1
i1k = -i1b / (i0w + i1c) ^ 2
i0q = i0z + (i0t - i0w) * i1k
End Select
Exit Function
i1n:
Select Case i1j
Case 0
i0q = i0y
Case -1
If i0y = i0x Then i0q = i0y Else i0q = CVErr(g2b + g1c)
Case 1
If i0y = i0z Then i0q = i0y Else i0q = CVErr(g2b + g1c)
End Select
Exit Function
i1o:
If i1j = 0 Then
i0q = i0y
Else
i0q = CVErr(g2b + g1c)
End If
End Function
'''
Private Function i1u(ByVal i1v As Long, i1w As e9e)
Dim i1x() As Boolean
Dim i1y As Boolean
Dim i1z As Boolean
Dim i2a As Long
Dim i2b As Long
Dim i2c As Boolean, i2d As Boolean, i2e As Boolean, i2f As Boolean
Dim i2g As Long, i2h As Long, i2i As Long
Dim i2j As Long
With i1w
If .f0d = f5o Then i2j = f5n Else i2j = f5o
ReDim i1x(.e9x - 1 To .e9y + 1)
i1y = False
i2k:
If i1y Then i6n i1w, False
i2h = .f0e.e8x
i2e = False
While Not i2e And i2h <= .f0e.e8y
i2g = .f0e.e8w(i2h)
If i1v = f7f Then
i2e = Not i8y(i2g, i1w)
If Not i2e Then i2e = (i8a(i2g, i2j) = 0)
Else
i2e = g9l(i2g)
End If
i2h = i2h + 1
Wend
If Not i2e Then
i1u = i1y
GoTo i2m
End If
i2a = 0
If i1v = f7f Then
For i2g = .e9x To .e9y
i1x(i2g) = Not i8y(i2g, i1w)
If Not i1x(i2g) Then i2a = i2a + 1
Next i2g
ElseIf i1v = f7g Then
For i2g = .e9x To .e9y
If Not i1x(i2g) Then i2a = i2a + 1
Next i2g
Else
For i2g = .e9x To .e9y
i1x(i2g) = g9l(i2g)
If Not i1x(i2g) Then i2a = i2a + 1
Next i2g
End If
If i2a = 1 Then
.e9u = f7a
For i2g = .e9x To .e9y
If Not i1x(i2g) Then Exit For
Next i2g
.f0e.e8w(2) = i2g
i1z = True
GoTo i2l
End If
If i2a < 1 Then
i1u = CVErr(g2b + g2c)
GoTo i2m
End If
i1x(.e9x - 1) = False
i1x(.e9y + 1) = False
i2f = .e9u = f6w Or .e9u = f6v
If i2f Then
If Not (i1x(.f0e.e8w(1)) Or i1x(.f0e.e8w(2))) Then
i1z = False
GoTo i2l
End If
If i1x(.f0e.e8w(1)) Then
While (.f0e.e8w(1) >= .e9x) And i1x(.f0e.e8w(1))
.f0e.e8w(1) = .f0e.e8w(1) - 1
Wend
If .f0e.e8w(1) = 1 Then
.f0e.e8w(1) = .f0e.e8w(2)
While i1x(.f0e.e8w(1))
.f0e.e8w(1) = .f0e.e8w(1) + 1
Wend
.f0e.e8w(2) = .f0e.e8w(1) + 1
End If
End If
If (.e9u = f6w Or .e9u = f6v) And i1x(.f0e.e8w(2)) Then
While (.f0e.e8w(2) <= .e9y) And i1x(.f0e.e8w(2))
.f0e.e8w(2) = .f0e.e8w(2) + 1
Wend
If .f0e.e8w(2) > .e9y Then
.f0e.e8w(2) = .f0e.e8w(1)
.f0e.e8w(1) = .f0e.e8w(1) - 1
While (.f0e.e8w(1) >= .e9x) And i1x(.f0e.e8w(1))
.f0e.e8w(1) = .f0e.e8w(1) - 1
Wend
End If
End If
Else
i2e = False
i2g = .f0e.e8x
While Not i2e And i2g <= .f0e.e8y
i2e = i1x(.f0e.e8w(i2g))
i2g = i2g + 1
Wend
If i2e Then
If i2a < 3 Then
If .e9u <> f6v Then .e9u = f6w
i1y = True
GoTo i2k
End If
Else
i1z = False
GoTo i2l
End If
If i1x(.f0e.e8w(1)) Then
While (.f0e.e8w(1) >= .e9x) And i1x(.f0e.e8w(1))
.f0e.e8w(1) = .f0e.e8w(1) - 1
Wend
If .f0e.e8w(1) >= .e9x Then
.f0e.e8w(0) = .f0e.e8w(1) - 1
Else
.f0e.e8w(0) = .e9x - 1
.f0e.e8w(1) = .f0e.e8w(2)
While i1x(.f0e.e8w(1))
.f0e.e8w(1) = .f0e.e8w(1) + 1
Wend
.f0e.e8w(2) = .f0e.e8w(1) + 1
.f0e.e8w(3) = .f0e.e8w(2) + 1
End If
End If
While (.f0e.e8w(0) >= .e9x) And i1x(.f0e.e8w(0))
.f0e.e8w(0) = .f0e.e8w(0) - 1
Wend
If i1x(.f0e.e8w(2)) Then
While (.f0e.e8w(2) <= .e9y) And i1x(.f0e.e8w(2))
.f0e.e8w(2) = .f0e.e8w(2) + 1
Wend
If .f0e.e8w(2) <= .e9y Then
.f0e.e8w(3) = .f0e.e8w(2) + 1
Else
.f0e.e8w(3) = .e9y + 1
.f0e.e8w(2) = .f0e.e8w(1)
.f0e.e8w(1) = .f0e.e8w(0)
.f0e.e8w(0) = .f0e.e8w(0) - 1
While (.f0e.e8w(0) >= .e9x) And i1x(.f0e.e8w(0))
.f0e.e8w(0) = .f0e.e8w(0) - 1
Wend
End If
End If
While (.f0e.e8w(3) <= .e9y) And i1x(.f0e.e8w(3))
.f0e.e8w(3) = .f0e.e8w(3) + 1
Wend
End If
i1z = True
i2l:
If i1z Then i6n i1w, False
i1u = i1z
i2m:
End With
End Function
'''
Private Function i2w(i2x As e9e)
Dim i2y As Long
Dim i2z As Long, i3a As Long
Dim i3b As Boolean
Dim i3c As Double
With i2x
i3a = .e9p
i2z = i3a - 1
If i8y(i2z, i2x) And i8y(i3a, i2x) Then GoTo i3d
i3b = False
i2y = i2z + 1
While Not i3b And i2y > 2
i2y = i2y - 1
i3b = i8y(i2y, i2x)
Wend
If i3b Then
i3c = i5t(.f0d, i2y)
If (.f0n >= i3c - .f0g And .f0n <= i3c + .f0g) Then GoTo i3d
End If
i3b = False
i2y = .e9p - 1
While Not i3b And i2y < .e9y
i2y = i2y + 1
i3b = i8y(i2y, i2x)
Wend
If i3b Then
i3c = i5t(.f0d, i2y)
If (.f0n >= i3c - .f0g And .f0n <= i3c + .f0g) Then GoTo i3d
End If
End With
i2w = True
Exit Function
i3d:
i2w = False
End Function
'''
Private Function i3e()
Dim i3f As Long, i3g As Long
Dim i3h As Long, i3i As Long
Dim i3j As Long, i3k As Long
Dim i3l As Long, i3m As Long
Dim i3n As Long, i3o As Long
Dim i3p As Boolean
i3h = g8p.e9p: i3j = i3h - 1
i3i = g8q.e9p: i3k = i3i - 1
i3p = False
i3f = i3l
While Not i3p And i3f <= i3n
i3g = i3m
While Not i3p And i3g <= i3o
i3g = i3g + 1
Wend
i3f = i3f + 1
Wend
If i3p Then GoTo i3q
i3p = False
i3f = i3l
While Not i3p And i3f <= i3n
i3f = i3f + 1
Wend
If i3p Then GoTo i3q
i3p = False
i3g = i3m
While Not i3p And i3g <= i3o
i3g = i3g + 1
Wend
If i3p Then GoTo i3q
i3e = True
Exit Function
i3q:
i3e = False
End Function
'''
Private Function i5l(ByVal i5m As Long, ByVal i5n As Long, Optional ByVal i5o As Boolean = True)
If i5o Then i5l = g8m(i5m, i5n) Else i5l = g8m(i5n, i5m)
End Function
'''
Private Function i5p(ByVal i5q As Long, ByVal i5r As Long, Optional ByVal i5s As Boolean = True)
If i5s Then i5p = g8n(i5q, i5r) Else i5p = g8n(i5r, i5q)
End Function
'''
Private Function i5t(ByVal i5u As Long, ByVal i5v As Long)
Select Case i5u
Case f5o
i5t = g8n(i5v, g8p.e9l)
Case f5n
i5t = g8n(g8q.e9l, i5v)
Case Else
i5t = g9h(i5v)
End Select
End Function
'''
Private Function i5w(i5x As Variant, ByVal i5y As Long, ParamArray i5z())
Dim i6a As Boolean
Dim i6b As Long
If IsEmpty(i5x) Then
i5w = i5z(0)
ElseIf IsArray(i5x) Then
i5w = CVErr(xlErrValue)
Else
Select Case i5y
Case f5k
If VarType(i5x) = vbBoolean Then
i5w = i5x
Else
i5w = CVErr(xlErrValue)
End If
Case f5l
If j2h(i5x, i5z(1), i5z(2)) Then
i5w = i5x
Else
i5w = CVErr(xlErrValue)
End If
Case f5m
If Application.WorksheetFunction.IsNumber(i5x) Then
i5w = i5x
Else
i5w = CVErr(xlErrValue)
End If
End Select
End If
End Function
'''
Private Function i6c(i6d)
If IsObject(i6d) Then
If (i6d.Rows.Count = 1 And i6d.Columns.Count = 1) Then
i6c = Not IsError(i6d) And Not IsEmpty(i6d)
Else
i6c = False
End If
Else
i6c = Not IsError(i6d)
End If
End Function
'''
Private Function i6e(ByVal i6f As Long, ByVal i6g As Long, ParamArray i6h())
Dim i6i As String
Dim i6j As String
Dim i6k As Variant
If UBound(i6h) >= 0 Then
If IsError(i6h(0)) Then i6k = i6h(0) Else i6k = CVErr(i6f)
Else
i6k = CVErr(i6f)
End If
If g8y Then
Select Case i6g
Case g0v
i6j = i6h(0) & g2o
Case g0x
i6j = i6j & g2q
Case g1c
i6i = ""
Select Case UBound(i6h)
End Select
Case g1j, g1k, g1l, g1t, g1u, g1v, g1w
Select Case UBound(i6h)
Case Else: i6j = g2o
End Select
i6i = g2g
End Select
Else
i6e = i6k
End If
End Function
'''
Private Sub i6l(ByVal i6m As Long)
If g9d Then
g8l(i6m) = g8o.Offset(g9e + (i6m - 1) * g9g, 0).Resize(g9f).Value
Else
g8l(i6m) = g8o.Areas(i6m).Resize(g8p.e9y, g8q.e9y).Value
End If
g8k(i6m) = True
End Sub
'''
Private Sub i6n(i6o As e9e, ByVal i6p As Boolean)
Dim i6q As Long
If i6o.e9k Or i6o.e9i Then Exit Sub
i6o.e9h = Not i6p
With i6o.f0e
If i6p Then
For i6q = 0 To 3
.e8w(i6q) = i6o.e9p - 2 + i6q
i6o.f0f.e8w(i6q) = .e8w(i6q)
Next i6q
i6o.e9u = h7e(i6o.e9u, i6o.f0c)
End If
Select Case i6o.e9u
Case f7a
.e8x = 1
.e8y = 1
.e8w(1) = .e8w(2)
Case f6w, f6v
.e8x = 1
.e8y = 2
Case Else
If .e8w(0) >= i6o.e9x Then
.e8x = 0
ElseIf .e8w(1) >= i6o.e9x Then
.e8x = 1
Else
.e8x = 2
End If
If .e8w(3) <= i6o.e9y Then .e8y = 3 Else .e8y = 2
End Select
If i6p Then
i6o.f0f.e8x = .e8x
i6o.f0f.e8y = .e8y
i6o.e9v = i6o.e9u
End If
End With
End Sub
'''
Private Sub i6r(i6s As e9e)
Dim i6t As Long
If Not i6s.e9h Then Exit Sub
i6s.e9h = False
i6s.e9u = i6s.e9v
With i6s.f0f
For i6t = 0 To 3
i6s.f0e.e8w(i6t) = .e8w(i6t)
Next i6t
i6s.f0e.e8x = .e8x
i6s.f0e.e8y = .e8y
End With
End Sub
'''
Private Sub i6u(i6v As e9c, i6w As e9c, i6x As Double, i6y As Double, ByVal i6z As Long, ByVal i7a As Boolean)
Static i7b(0 To e9b, 0 To e9b) As Long
Dim i7c As Long, i7d As Long
Dim i7e As Double
If i7a Then
For i7c = 0 To i6z
i6w.e9d(i7c) = i6v.e9d(i7c)
Next i7c
Else
If i7b(0, 0) = 0 Then
For i7c = 0 To e9b
i7b(i7c, 0) = 1
i7b(0, i7c) = 1
Next i7c
For i7c = 1 To e9b
For i7d = i7c To e9b - i7c
i7b(i7c, i7d) = i7b(i7c - 1, i7d) + i7b(i7c, i7d - 1)
i7b(i7d, i7c) = i7b(i7c, i7d)
Next i7d
Next i7c
End If
For i7c = 0 To i6z
i7e = 0#
For i7d = 0 To i6z - i7c
i7e = i7e + i6v.e9d(i7d + i7c) * i7b(i7c, i7d) * i6y ^ i7d
Next i7d
i6w.e9d(i7c) = i7e * i6x ^ i7c
Next i7c
End If
End Sub
'''
Private Function i7f(i7g As e9c, i7h As Double, ByVal i7i As Long)
Dim i7j As Long
Dim i7k As Double
For i7j = 0 To i7i
i7k = i7k + i7g.e9d(i7j) * i7h ^ i7j
Next i7j
i7f = i7k
End Function
'''
Private Sub i7l(i7m As e9e)
With i7m
.e9i = .e9u >= f6s And .e9u <= f6u
.e9j = .e9u = f6t Or .e9u = f6u
.e9k = .e9u <= f6r Or .e9u = f6z
End With
End Sub
'''
Function i7n(ByRef i7o As Variant, i7p As Long, i7q As Long, i7r As Long, i7s As Long) As Long
Dim i7t As Long
Dim i7u As Long
Dim i7v As Long
For i7t = i7p To i7q
For i7u = i7r To i7s
If Application.WorksheetFunction.IsNumber(i7o(i7t, i7u)) Then i7v = i7v + 1
Next i7u
Next i7t
i7n = i7v
End Function
'''
Private Function i8a(ByVal i8b As Long, ByVal i8c As Long) As Long
If i8c = f5n Then
i8a = i7n(g8m, i8b, i8b, 2, g8q.e9y)
Else
i8a = i7n(g8m, 2, g8p.e9y, i8b, i8b)
End If
End Function
'''
Private Function i8u(ByVal i8v As Long, ByVal i8w As Long, i8x As e9e) As Boolean
With i8x
If Not Application.WorksheetFunction.IsNumber(i5l(i8v, i8w, .f0d = f5o)) Then Exit Function
If Not Application.WorksheetFunction.IsNumber(i5t(.f0d, i8v)) Then Exit Function
i8u = True
End With
End Function
'''
Private Function i8y(ByVal i8z As Long, i9a As e9e) As Boolean
With i9a
If Not Application.WorksheetFunction.IsNumber(i5l(i8z, .e9o, .f0d = f5o)) Then Exit Function
If .e9g Then If Not Application.WorksheetFunction.IsNumber(i5t(.f0d, i8z)) Then Exit Function
i8y = True
End With
End Function
'''
Private Function i9e(ByVal i9f As Long, i9g As e9e) As Boolean
Dim i9h As Variant
With i9g
If .e9g Then
i9h = i5t(.f0d, i9f)
If .e9j Then
i9e = Not IsError(i9h) And Not IsEmpty(i9h)
Else
i9e = Application.WorksheetFunction.IsNumber(i9h)
End If
Else
i9e = True
End If
End With
End Function
'''
Private Function i9m(i9n As Long, i9o As e9e, Optional ByVal i9p As Boolean = True)
Dim i9q As Long
Dim i9r As Boolean
With i9o
If .e9g Then
i9q = i9n
i9r = False
If i9p Then
While Not i9r And i9q <= .e9y
If i9e(i9q, i9o) Then
i9r = True
i9n = i9q
Else
i9q = i9q + 1
End If
Wend
Else
While Not i9r And i9q >= .e9x
If i9e(i9q, i9o) Then
i9r = True
i9n = i9q
Else
i9q = i9q - 1
End If
Wend
End If
i9m = i9r
Else
i9m = i9n >= .e9x And i9n <= .e9y
End If
End With
End Function
'''
Private Function i9s(i9t As f0r, i9u As e9e, i9v As Variant, i9w As Variant, i9x As Variant, ByVal i9y As Long, ByVal i9z As Long, ByVal j0a As Long) As Boolean
Dim j0b As Variant
With i9u
If Not .e9i Then
If g8s < f6p Then
If Not IsNumeric(i9v) Or IsEmpty(i9v) Then
g8t = i6e(xlErrValue, g0r, i9v, g8j.f0y(i9t.f0t(i9y)), j1v(i9t, .f0d, True))
GoTo j0c
Else
.f0n = i9v
End If
j0b = i5w(i9w, f5m, f6d, 0)
If IsError(j0b) Then
g8t = i6e(xlErrValue, g0s, i9w, g8j.f0y(i9t.f0t(i9z)))
GoTo j0c
Else
.f0h = j0b
End If
If .e9u = f6x Or .e9u = f6y Then
j0b = i5w(i9x, f5m, f6e, 0)
If IsError(j0b) Then
g8t = i6e(xlErrValue, g0t, i9x, g8j.f0y(i9t.f0t(j0a)))
GoTo j0c
Else
.f0m = j0b
End If
End If
End If
Else
If Not i6c(i9v) Then
g8t = i6e(xlErrValue, g0u, i9v, g8j.f0y(i9t.f0t(i9y)))
GoTo j0c
End If
End If
End With
i9s = True
Exit Function
j0c:
i9s = False
End Function
'''
Private Function j0d(j0e As f0r, j0f As e9e, ByVal j0g As Long, ByVal j0h As Long) As Boolean
Dim j0i As Long
Dim j0j As Long
Dim j0k As Long
Dim j0l As Long
Dim j0m As Boolean
Dim j0n As Boolean
Dim j0o As Long
Dim j0p As String
Dim j0q As Variant
Dim j0r As Variant
Dim j0s As Boolean
With j0f
If .e9u <> f6s Then
.e9g = True
If .e9j Then
j0o = 0
For j0i = .e9x To .e9y
If i9e(j0i, j0f) Then j0o = j0o + 1
Next j0i
Else
Select Case .f0d
Case f5n
j0o = i7n(g8n, .e9l, .e9l, 2, .e9y)
Case f5o
j0o = i7n(g8n, 2, .e9y, .e9l, .e9l)
Case Else
j0o = Application.WorksheetFunction.Count(g9h)
End Select
End If
.f0c = j0o
If j0o < .e9z Then
If j0o < 1 Then
g8t = i6e(xlErrValue, g0v, j1p(j0e, j0f))
GoTo j0t
Else
If Not g8v Then
j0i = .e9x - 1
j0m = False
While Not j0m And j0i < .e9y
j0i = j0i + 1
j0m = Not i9e(j0i, j0f)
Wend
g8t = i6e(xlErrValue, g0w, i5t(.f0d, j0i), j1p(j0e, j0f), g8j.f0y(j0e.f0t(f8i)))
GoTo j0t
End If
End If
Else
.e9g = False
End If
j0k = .e9x
If j0o > 1 Then
j0n = True
j0m = False
j0s = False
While j0k < .e9y And Not j0m
If j0n Then
j0m = True
If i9m(j0k, j0f) Then
.e9q = j0k
If j0k < .e9y Then
j0l = j0k + 1
If i9m(j0l, j0f) Then
If j0o = 2 Then
If i5t(.f0d, j0k) = i5t(.f0d, j0l) Then
g8t = i6e(xlErrValue, g0x, j1p(j0e, j0f), j1v(j0e, .f0d, False), i5t(.f0d, j0k), i5t(.f0d, j0l))
GoTo j0t
End If
.e9r = j0l
End If
j0q = i5t(.f0d, j0k)
j0r = i5t(.f0d, j0l)
.e9f = j0q < j0r
j0s = j0q = j0r
j0m = False
End If
End If
End If
If j0m Then
g8t = i6e(xlErrNum, g2f)
GoTo j0t
Else
j0n = False
End If
Else
If i9m(j0l, j0f) Then
.e9r = j0l
If .e9f Then
j0m = i5t(.f0d, j0k) >= i5t(.f0d, j0l)
Else
j0m = i5t(.f0d, j0k) <= i5t(.f0d, j0l)
End If
If j0s Then j0m = True
End If
End If
If Not j0m Then
j0j = j0k: j0k = j0l: j0l = j0l + 1
End If
Wend
If j0m Then
j0p = j1p(j0e, j0f)
j0p = Right(j0p, Len(j0p) - InStr(1, j0p, g2h, vbBinaryCompare))
g8t = i6e(xlErrValue, g0x, j0p, j1v(j0e, .f0d, False), i5t(.f0d, j0j), i5t(.f0d, j0k), i5t(.f0d, j0l))
GoTo j0t
End If
Else
.e9f = True
i9m j0k, j0f
.e9q = j0k: .e9r = j0k
End If
If .e9f Then
.e9s = .e9q: .e9t = .e9r
Else
.e9s = .e9r: .e9t = .e9q
End If
If g8s < f6p And Not .e9j Then
If .e9f Then
.f0i = i5t(.f0d, .e9q)
.f0k = i5t(.f0d, .e9r)
Else
.f0i = i5t(.f0d, .e9r)
.f0k = i5t(.f0d, .e9q)
End If
If .f0h < 0# Then
.f0g = .f0h * (.f0i - .f0k)
Else
.f0g = .f0h
End If
.f0j = .f0i - .f0g
.f0l = .f0k + .f0g
If .f0n < .f0j Or .f0n > .f0l Then
g8t = i6e(xlErrNA, g0y, .f0o, g8j.f0y(j0e.f0t(j0h)), .f0j, .f0l)
GoTo j0t
End If
End If
End If
End With
j0d = True
Exit Function
j0t:
j0d = False
End Function
'''
Private Function j0u(j0v As f0r, j0w As e9e, ByVal j0x As Long, ByVal j0y As Long) As Boolean
Dim j0z As Long
Dim j1a As Long
Dim j1b As Long
Dim j1c As Boolean
Dim j1d As Boolean
Dim j1e As Variant
With j0w
If .e9i Then
If .e9u = f6s Then
If Not g9c Then
j1c = False
If g8h Then .e9m = 0 Else .e9m = .e9x - 1
Do
.e9m = .e9m + 1
j1e = i5t(.f0d, .e9m)
If Not IsError(j1e) Then j1c = j1e = .f0o
Loop Until j1c Or .e9m = .e9y
If Not j1c Then
g8t = i6e(xlErrNA, g0z, .f0o, g8j.f0y(j0v.f0t(j0y)), j1p(j0v, j0w, True))
GoTo j1f
End If
Else
If j2h(.f0o, 1, .e9y) Then
.e9m = .f0o
Else
g8t = i6e(xlErrNA, g1f, .f0o, g8j.f0y(j0v.f0t(j0y)), g8j.f0y(j0v.f0t(f9b)), .e9y, g8j.f0y(j0v.f0t(f8n)))
GoTo j1f
End If
End If
Else
If .e9f Then j0z = -1 Else j0z = 1
j1c = False
j1d = True
If .e9u = f6t Then
.e9m = .e9t
While Not j1c And j1d
j1d = i9m(.e9m, j0w, Not .e9f)
If j1d Then j1c = i5t(.f0d, .e9m) <= .f0o
If Not j1c Then .e9m = .e9m + j0z
Wend
If Not j1c Then
g8t = i6e(xlErrNA, g1a, .f0o, g8j.f0y(j0v.f0t(j0y)), g8j.f0y(j0v.f0t(j0x)), .e9u, j1p(j0v, j0w), i5t(.f0d, .e9s))
GoTo j1f
End If
Else
.e9m = .e9s
While Not j1c And j1d
j1d = i9m(.e9m, j0w, .e9f)
If j1d Then j1c = i5t(.f0d, .e9m) >= .f0o
If Not j1c Then .e9m = .e9m - j0z
Wend
If Not j1c Then
g8t = i6e(xlErrNA, g1b, .f0o, g8j.f0y(j0v.f0t(j0y)), g8j.f0y(j0v.f0t(j0x)), .e9u, j1p(j0v, j0w), i5t(.f0d, .e9t))
GoTo j1f
End If
End If
End If
ElseIf g8s < f6p Then
If .f0c = 1 Then
.e9p = .e9s
Else
j1a = .e9q + 1
i9m j1a, j0w
j1b = .e9r - 1
i9m j1b, j0w, False
If .e9f Then
If .f0n > i5t(.f0d, j1b) Then
.e9p = .e9r
Else
.e9p = j1a
j1c = False
j1d = True
While Not j1c
i9m .e9p, j0w
j1c = .f0n <= i5t(.f0d, .e9p)
If Not j1c Then .e9p = .e9p + 1
Wend
End If
Else
If .f0n < i5t(.f0d, j1b) Then
.e9p = .e9r
Else
.e9p = j1a
j1c = False
While Not j1c
i9m .e9p, j0w
j1c = .f0n >= i5t(.f0d, .e9p)
If Not j1c Then .e9p = .e9p + 1
Wend
End If
End If
End If
i6n j0w, True
End If
End With
j0u = True
Exit Function
j1f:
j0u = False
End Function
'''
Private Sub j1g()
With g8j
End With
End Sub
'''
Public Sub j1h(ByRef j1i As f0r)
With j1i
End With
End Sub
'''
Private Function j1j(j1k As f0r, j1l As e9e, Optional ByVal j1m = True) As String
Dim j1n As String
Dim j1o  As Long
If j1m Then
With j1l
j1n = g8j.f0y(j1k.f0t(f8r + .f0d))
If g8h Then
j1n = j1n & g2t & .f0o & g2t
Else
If .f0d = f5n Then j1o = f5o Else j1o = f5n
j1n = j1n & g2t & i5t(.f0d, .e9m) & g2t
End If
j1j = j1n
End With
End If
End Function
'''
Private Function j1p(j1q As f0r, j1r As e9e, Optional ByVal j1s As Boolean = True) As String
Dim j1t As String
Dim j1u  As Long
With j1r
j1t = g8j.f0y(j1q.f0t(f8o + .f0d))
If g8h And j1s Then
If .f0d = f5n Then j1u = f5o Else j1u = f5n
j1t = j1t & g2h & g2t & i5t(j1u, .e9l) & g2t
End If
j1p = j1t
End With
End Function
'''
Private Function j1v(j1w As f0r, ByVal j1x As Long, ByVal j1y As Boolean) As String
Dim j1z As String
If g8i Then Exit Function
j1v = j1z
End Function
'''
Private Function j2h(j2i As Variant, ByVal j2j As Long, ByVal j2k As Long) As Boolean
On Error GoTo j2l
If Application.WorksheetFunction.IsNumber(j2i) Then
If j2i = Int(j2i) Then
j2h = j2i >= j2j And j2i <= j2k
End If
End If
j2l:
End Function
Attribute VB_Name = "mPublic"
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(X, Y, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_XY)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_2D |fffd||fffd| (X-Y)-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| X-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Y-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n5"
Static j4w As f0r
g8s = f6l
If Not j4w.f0s Then j1h j4w
If Not h3z(j4w, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_XY, X, Y, , Interpolate, Interpolate, _
, f6d, f6d, , f6e, f6e, , f6f, f6g, Error_msg) Then
|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = g8t
Else
|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = h5f(j4w)
End If
End Function
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
