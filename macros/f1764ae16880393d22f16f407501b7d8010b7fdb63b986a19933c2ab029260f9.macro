Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "PL_VBA"
Function Fill_PL_Head(Ref As Integer)
' |fffd|bernahme der Vorlage in eine neue Packinglist
' Kopfdaten, G|fffd|ltigkeit der Farben etc

Dim i, k
Dim Reference
Dim Quelle, Ziel
Dim gefunden As Boolean
Dim Gueltigkeit
Dim GArray As Variant

Quelle = "Main"
Ziel = "Vorlage"
Sheets(Ziel).Visible = True
Sheets(Ziel).Select
'OrderNo, Remark
  Sheets(Ziel).Cells(4, 2).Value = Sheets(Quelle).Cells(13, 2).Value
  Sheets(Ziel).Cells(5, 2).Value = Sheets(Quelle).Cells(14, 2).Value

    ActiveSheet.Unprotect
    Range("E6").Select
    ActiveCell.FormulaR1C1 = "=SUM(R[5]C[-2]:R[94]C[-2])"
    Range("E7").Select
    ActiveCell.FormulaR1C1 = "=SUM(R[4]C[6]:R[93]C[6])"

'Gueltigkeit = "select color"
Quelle = "Vorgabedaten"
Sheets(Quelle).Visible = True
Sheets(Quelle).Select


            i = 2
            k = 2
            gefunden = False
            Do While Cells(i, 1) <> ""
               
               If (Ref * 1) = (Cells(i, 3) * 1) Then
        
                    Gueltigkeit = Sheets(Quelle).Cells(i, 7) & " - " & Sheets(Quelle).Cells(i, 8)
                    If Not gefunden Then
                        
                        GArray = Array(Sheets(Quelle).Cells(i, 7) & " - " & Sheets(Quelle).Cells(i, 8))
                        Sheets(Ziel).Range("B2") = Ref
                        Sheets(Ziel).Range("B3") = Sheets(Quelle).Cells(i, 5) 'Code
                        Sheets(Ziel).Range("E3") = Sheets(Quelle).Cells(i, 4) 'Name
                        
                    Else
                       
                        ReDim Preserve GArray(UBound(GArray) + 1)
                            'dem gerade hizugef|fffd|gten (und jetzt h|fffd|chstem Datenfeld)
                            'einen Wert zuweisen
                            GArray(UBound(GArray)) = Sheets(Quelle).Cells(i, 7) & " - " & Sheets(Quelle).Cells(i, 8)
                    End If
                    'SubTotlas
                    
                    Sheets(Ziel).Cells(100 + k - 1, 4).Value = Gueltigkeit
                    
                    k = k + 1
                    
                    gefunden = True
               End If
                i = i + 1
            Loop
          '  k = k - 1
            For i = k To 10 Step 1
                Sheets(Ziel).Cells(100 + i - 1, 4).Value = ""
            
            Next i
            
            If k = 1 Then
            
                MsgBox (Ref * 1) & " nicht gefunden", vbCritical, "Abbruch"
                Exit Function
            End If
            
            Sheets(Ziel).Select
               Range("D11").Select
                With Selection.Validation
                    .Delete
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                    xlBetween, Formula1:=Join(GArray, ",") '"ja;nein"
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .InputTitle = ""
                    .ErrorTitle = ""
                    .InputMessage = ""
                    .ErrorMessage = ""
                    .ShowInput = True
                    .ShowError = True
                End With

'sizes

    i = 2
    k = 2
    gefunden = False
    Do While Sheets(Quelle).Cells(i, 1) <> "" And gefunden = False
    
        If (Ref * 1) = (Sheets(Quelle).Cells(i, 3) * 1) Then
            gefunden = True
            Sheets(Ziel).Cells(10, 5).Value = Sheets(Quelle).Cells(i, 11).Value
            Sheets(Ziel).Cells(10, 6).Value = Sheets(Quelle).Cells(i, 12).Value
            Sheets(Ziel).Cells(10, 7).Value = Sheets(Quelle).Cells(i, 13).Value
            Sheets(Ziel).Cells(10, 8).Value = Sheets(Quelle).Cells(i, 14).Value
            Sheets(Ziel).Cells(10, 9).Value = Sheets(Quelle).Cells(i, 15).Value
            Sheets(Ziel).Cells(10, 10).Value = Sheets(Quelle).Cells(i, 16).Value
            Sheets(Ziel).Cells(10, 11).Value = Sheets(Quelle).Cells(i, 17).Value
            Sheets(Ziel).Cells(10, 12).Value = Sheets(Quelle).Cells(i, 18).Value
        End If
        i = i + 1
     Loop
        
   
   
   Range("A11").Select
  
Sheets(Ziel).Visible = False
Sheets(Quelle).Visible = False
 
End Function


Function CheckWSName(ByVal TName As String)
Dim WsTabelle As Worksheet
Dim WsTabelle2 As Worksheet
Dim TNameTmp As String
Dim i As Integer
Dim Name_OK As Boolean
i = 1
Name_OK = False

TNameTmp = TName

    For Each WsTabelle In Sheets
        
        If (WsTabelle.Name = TNameTmp) Then
            If (MsgBox("For this Item exists already a packinkglist in this file." & vbCrLf & "Generate a new one?", vbOKCancel, WsTabelle.Name) = vbOK) Then
                TNameTmp = TName & "_" & i
                     While Not Name_OK
                     
                         For Each WsTabelle2 In Sheets
                            Name_OK = True
                            If (WsTabelle2.Name = TNameTmp) Then
                                i = i + 1
                                TNameTmp = TName & "_" & i
                                Name_OK = False
                            End If
                          Next WsTabelle2
                      
                      Wend
                      
            Else
                TNameTmp = ""
                Exit Function
                      
            End If
         End If
            
    Next WsTabelle

CheckWSName = TNameTmp

End Function

Sub NewPacklist(Ref As Integer)
'
' Makro1 Makro
'
Dim WSName As String
Dim Quelle
'

Quelle = "Vorlage"

    WSName = CheckWSName(Ref)
    If (WSName = "") Then
        Exit Sub
    End If
    
    Fill_PL_Head (Ref)
    
    Sheets(Quelle).Range("A1:Q10").Copy
    Sheets.Add After:=Sheets(Sheets.Count)
    Sheets(Sheets.Count).Select
    Sheets(Sheets.Count).Name = WSName
    
    
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    Selection.PasteSpecial Paste:=xlPasteColumnWidths, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    
    Sheets(Quelle).Range("C11").Copy
    Sheets(WSName).Range("C11").PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
        
    Sheets(Quelle).Range("D11").Copy
    Range("D11").PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
        
    Sheets(Quelle).Range("M11:O11").Copy
    Sheets(WSName).Range("M11").PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
     
    Sheets(Quelle).Range("R11:Y11").Copy
 
    Range("R11:Y11").PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    
    
    Sheets(Quelle).Range("A11:Y11").Copy
   
    Range("A11:Y11").PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
   
   'summen pro Gr|fffd||fffd|e
   
    Sheets(Quelle).Range("A101:Y120").Copy
 
    Range("A101:Y120").PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    Range("A101:Y120").PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    
    Range("E6").Select
    ActiveCell.FormulaR1C1 = "=SUM(R[5]C[-2]:R[94]C[-2])"
    Range("E7").Select
    ActiveCell.FormulaR1C1 = "=SUM(R[4]C[9]:R[93]C[9])"
   
    
    Range("A11:B11").Locked = False
    Range("D11:L11").Locked = False
    Range("O11:Q11").Locked = False
    
    'gr|fffd||fffd|en
    If IsEmpty(Sheets(WSName).Cells(10, 5).Value) Then Sheets(WSName).Cells(11, 5).Value = "-"
    If IsEmpty(Sheets(WSName).Cells(10, 6).Value) Then Sheets(WSName).Cells(11, 6).Value = "-"
    If IsEmpty(Sheets(WSName).Cells(10, 7).Value) Then Sheets(WSName).Cells(11, 7).Value = "-"
    If IsEmpty(Sheets(WSName).Cells(10, 8).Value) Then Sheets(WSName).Cells(11, 8).Value = "-"
    If IsEmpty(Sheets(WSName).Cells(10, 9).Value) Then Sheets(WSName).Cells(11, 9).Value = "-"
    If IsEmpty(Sheets(WSName).Cells(10, 10).Value) Then Sheets(WSName).Cells(11, 10).Value = "-"
    If IsEmpty(Sheets(WSName).Cells(10, 11).Value) Then Sheets(WSName).Cells(11, 11).Value = "-"
    If IsEmpty(Sheets(WSName).Cells(10, 12).Value) Then Sheets(WSName).Cells(11, 12).Value = "-"
    
    
    Range("A11:Y11").Select
    Selection.AutoFill Destination:=Range("A11:Y100"), Type:=xlFillDefault
    'Ausblenden
    Columns("R:Y").Select
    ActiveSheet.Unprotect
    Selection.EntireColumn.Hidden = True
    
    Range("A11").Select
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
End Sub
Sub PLTunen()
' Packlist - vor Generierung aufr|fffd|umen, Druckbereich etc einstellen
On Error GoTo nexte

Dim WsTabelle As Worksheet
Dim i As Integer
Dim y


  For Each WsTabelle In Sheets
        
        If (WsTabelle.Name <> "Main") And (WsTabelle.Name <> "Vorlage") And (WsTabelle.Name <> "Vorgabedaten") Then
            ActiveSheet.Protect DrawingObjects:=False, Contents:=False, Scenarios:=False
            Sheets(WsTabelle.Name).Select
            If IsNull(Worksheets(WsTabelle.Name).UsedRange.Rows.Count) Then i = 0 Else i = Worksheets(WsTabelle.Name).UsedRange.Rows.Count
            If i > 1 Then
                Do While Cells(i, 1) = ""
                     i = i - 1
                Loop
                i = i + 2 'save
              Range("a11").Select
               ActiveSheet.Protect DrawingObjects:=False, Contents:=False, Scenarios:=False
              ActiveSheet.Range(Rows(i), Rows(100)).EntireRow.Hidden = True 'Ausblenden ist save
              Range("A11").Select
              'leere SubTotals ausblenden
              i = 102
              Do While Cells(i, 4) <> ""
                 i = i + 1
              Loop
            '  i = i - 1
              ActiveSheet.Range(Rows(i), Rows(114)).EntireRow.Hidden = True
              
             Sheets(WsTabelle.Name).PageSetup.PrintArea = "$A$1:$Q$115"
              ActiveSheet.PageSetup.Orientation = xlLandscape
              ActiveSheet.PageSetup.Zoom = False
              ActiveSheet.PageSetup.FitToPagesTall = 1
              ActiveSheet.PageSetup.FitToPagesWide = 1
              ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
               
            End If
        End If
nexte:

    Next WsTabelle




End Sub

 Function MovePackinglists()
'
' Verscheibt alle PackListen in neue Datei
'

'
Dim Blaetter() As Variant


Dim WsTabelle As Worksheet
Dim i As Integer
i = 0
Blaetter = Array("xxx")

    For Each WsTabelle In Sheets
        
        If (WsTabelle.Name <> "Main") And (WsTabelle.Name <> "Vorlage") And (WsTabelle.Name <> "Vorgabedaten") Then
            If (i = 0) Then
                Blaetter = Array(WsTabelle.Name)
            Else 'Array erweitern
            
                '######################################################
                'alte Datenfelder behalten und ein neues hinzuf|fffd|gen
                ReDim Preserve Blaetter(UBound(Blaetter) + 1)
                'dem gerade hizugef|fffd|gten (und jetzt h|fffd|chstem Datenfeld)
                'einen Wert zuweisen
                Blaetter(UBound(Blaetter)) = WsTabelle.Name
                '######################################################
            End If
      
            i = i + 1
        End If
    Next WsTabelle

    If i <> 0 Then
        Sheets(Blaetter).Select
        Sheets(Blaetter).Move
    Else
        MsgBox "No packinglists found to generate new shipment file - exit", vbOKOnly, "Nothing to do"
   End If
End Function


Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandNeuesBlatt, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CommandNewFile, 5, 1, MSForms, CommandButton"
Private Sub CommandNeuesBlatt_Click()


    Dim Reference As Integer


    'check auswahl
    If Len(Sheets("Main").Range("B12").Value) < 4 Or Sheets("Main").Range("B12").Value = "select item" Then
        MsgBox "Please select Item first!", vbOKOnly
        Exit Sub
    End If

    Reference = Left(Sheets("Main").Range("b12").Value, InStr(Sheets("Main").Range("b12").Value, " ")) * 1


    'nichts zu tun
    NewPacklist (Reference)



End Sub

Private Sub CommandNewFile_Click()
    PLTunen
    MovePackinglists
    
End Sub
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()

Me.Activate
 Range("C4").Select

End Sub


INQUEST-PP=macro
