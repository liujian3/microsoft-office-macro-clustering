Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "chkBoxIntegrated, 4, 2, MSForms, CheckBox"
Attribute VB_Control = "gen_source, 2, 3, MSForms, CommandButton"
Attribute VB_Control = "gen_pj_sheet, 1, 4, MSForms, CommandButton"
Option Explicit


Private Sub gen_pj_sheet_Click()
    
    'generate PJ HS Sheets
    generate_pj_sheet

    'generate symbolik sheets
    generate_symb_sheet
    
    Worksheets("Settings").Activate
End Sub

Private Sub gen_source_Click()

Dim src_path As String
Dim es_name As String
Dim error As Boolean
    
    src_path = Worksheets("Settings").Cells(1, 2)
    es_name = Worksheets("Settings").Cells(2, 2)
    
    Call read_workbook(error)
    
    'No error found in Workbook so we can start with the generation
    If Not error Then
        'generate source folders
        Call generate_src_folders
        
        'generate ESA
        Call generate_esa(src_path, es_name)
        
        'generate MC
        Call generate_mc(src_path, es_name)
                
        'generate IBN
        Call generate_ibn(src_path, es_name)
               
        'write symbolic
        Call generate_symbol_es(src_path, es_name)
    Else
        MsgBox "No source generation was made"
    End If
    
    Worksheets("Settings").Activate
    
End Sub


Attribute VB_Name = "Tabelle10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "codegenerator"
Option Explicit

'Funktion zum Pr|fffd|fen eines zu setzenden Bezugspfades
'Path gibt den Pfad an, der als Bezugspfad gesetzt werden soll (keiner gibt den aktuellen zur|fffd|ck)
'R|fffd|ckgabe enth|fffd|lt den String des Bezugspfades (Der Alte, falls es den zu setzenden nicht gibt)
Public Function SetDefaultPath(Optional path As String) As String
    Dim Fs As Object                        'Dateisystem

    'Dateisystem |fffd|ffnen
    Set Fs = CreateObject("Scripting.FileSystemObject")
    
    'Ausgang mit aktuellem Bezugspfad vorbelegen
    SetDefaultPath = Application.DefaultFilePath
    
    'Falls es den angegebenen Ordner nicht gibt
    If Fs.folderexists(path) = False Then
        'Falls ein Pfad angegeben wurde
        If path <> "" Then
            'Fehler anzeigen
            MsgBox "Pfad " & path & " existiert nicht!!"
        End If
        'Beenden
        Exit Function
    End If
    
    'Falls das letzte Zeichen des zu setzenden Pfades ein \ ist
    If Right(path, 1) = "\" Then
        '\ wegschneiden
        path = Left(path, Len(path) - 1)
    End If
            
    'Den Bezugspfad des Codegenerators auf den zu setzenden Pfad |fffd|ndern
    Application.DefaultFilePath = path
    
    'Bezugspfad an Ausgang schreiben
    SetDefaultPath = path

End Function

'Kompletten Dateistring aus Pfadname und Dateiname machen
'Path gibt den Pfadnamen an
'File gibt den Dateinamen an
'R|fffd|ckgabe enth|fffd|lt den Dateinamen mit integriertem Pfad
Public Function MakeFileName(path As String, Optional File As String = "") As String
    Dim Fs As Object                                            'Dateisystem
    Dim f As String                                             'Pfadname
    Dim f2 As Object                                            'Die Datei selbst
    Dim filename As String                                      'Dateiname
    
    'Dateisystem |fffd|ffnen
    Set Fs = CreateObject("Scripting.FileSystemObject")
           
    'Kein Pfad angegeben
    If Len(path) < 1 Then
        Exit Function
    End If
       
    'Wenn der ganz linke Buchstabe des Pfades kein "\" ist
    If Left(path, 1) <> "\" Then
        'Wenn der Pfad zu kurz ist
        If Len(path) < 2 Then
            'Pfad zum Bezugspfad hinzuf|fffd|gen
            f = Fs.buildpath(Application.DefaultFilePath, path)
        Else
            'Wenn das 2. Zeichen des Pfades kein ":" ist
            If Mid(path, 2, 1) <> ":" Then
                'Pfad zum Bezugspfad hinzuf|fffd|gen
                f = Fs.buildpath(Application.DefaultFilePath, path)
            Else
                'Pfad ist der angegebene Pfad
                f = path
            End If
        End If
    Else
        'Pfad ist der angegebene Pfad
        f = path
    End If
    
    'Zum Pfadnamen den Dateinamen hinzuf|fffd|gen
    filename = Fs.buildpath(f, File)
    
    'Wenn es die Datei gibt
    If Fs.FileExists(filename) = True Then
        'Wirklichen Dateinamen ermitteln
        Set f2 = Fs.GetFile(filename)
        'Dateiname ist der wirkliche Name
        MakeFileName = f2.path
    Else
        'Dateimame ist der obere Name
        MakeFileName = filename
    End If
End Function


Attribute VB_Name = "gen_esa"
Option Explicit
Sub generate_esa(strPath, es_name As String)

Dim i As Integer
Dim j As Integer
Dim k As Integer
Dim intAnzNhtAkt As Integer
Dim esbName As String
Dim esbBvName As String
Dim esbPnAdd As String
Dim esbIo2 As String
Dim mcName As String
Dim ackbName As String
Dim strPath_es As String
Dim strPath_fast As String
Dim strFileName As String
Dim strFileNamePathFast As String
Dim strFileNamePathEs As String
Dim strTemp As String
Dim strFast As String
Dim strDB As String
Dim intZeileSymbolik As Integer
Dim rowIdx As Integer
Dim strMcNumber As String
Dim rowIdx_esSheet_start As Integer
Dim rowIdx_esaSheet_start As Integer
Dim rowIdx_mcSheet_start As Integer
Dim load_voltage_switch As String
Dim esb_header_written As Boolean
Dim mc_header_written As Boolean
Dim mc_err_header_written As Boolean
Dim ack_header_written As Boolean
           
'#############################################################################################################
'general
'#############################################################################################################
    
rowIdx_esSheet_start = 1
rowIdx_esaSheet_start = 1
rowIdx_mcSheet_start = 1

Worksheets("ESA").Activate
strPath_es = strPath + "\" + es_name

'#############################################################################################################
' DATA BLOCKS
'#############################################################################################################
    
'F_ESA_DB
strFileName = "01_I_F_ESA_XX.awl"
Open MakeFileName(strPath_es, strFileName) For Output As #FileNr

For i = 1 To c_maxEsa
    If esa_data(i).own_esa Then
        Print #FileNr, "DATA_BLOCK " + """I_F_" + esa_data(i).name + """"
        Print #FileNr, """F_" + esa_data(i).name + """"
        Print #FileNr, "BEGIN"
        Print #FileNr, "END_DATA_BLOCK"
        Print #FileNr, ""
    End If
Next

Close 1
            
'#############################################################################################################
' MAIN SAFETY FC
'#############################################################################################################
    
strFileName = "09_F_FC_PB_GEN.awl"
Open MakeFileName(strPath_es, strFileName) For Output As #FileNr

Print #FileNr, "FUNCTION ""F_FC_PB_GEN"" : VOID"
Print #FileNr, "TITLE = MAIN SAFETY"
Print #FileNr, "BEGIN"

'-grn-
'Sichere Kommunikation
'For i = 2 To 11
    'strTemp = Worksheets("ES").Cells(i, 1)
    'If Worksheets("ES").Cells(i, 1).Interior.Color <> vbGreen And strTemp <> "" Then
        
        'Initialisierung neue Steuerung
        'blnHeaderOk = False
    
        'For j = 1 To intAnzESA
            'If Worksheets("ES").Cells(i, j + 1) = "x" Then
                    'HEADER
                    'If Not blnHeaderOk Then
                        'Print #FileNr, ""
                        'Print #FileNr, "NETWORK"
                        'Print #FileNr, "TITLE = Communication Receive " + strTemp
                        'Print #FileNr, "CALL ""F_RCVDP"", I_RCV_" + strTemp + " ("
                        'Print #FileNr, "DP_DP_ID:=" + Mid(strTemp, 4, 2) + Mid(es_name, 4, 2) + ","
                        'Print #FileNr, "TIMEOUT:=T#500ms,"
                        'Print #FileNr, "LADDR:=" + Trim(Str(intLADDR))
                        'intLADDR = intLADDR + 18
                    'End If
                    
                    'BITS
                    'If j = intAnzESA Then
                        'Print #FileNr, "RD_BO_"
                        'Print #FileNr, "NOP 0;"
                    'Else
                        
                    'End If
                    
                    'blnHeaderOk = True
            'End If
        'Next
    'End If
'Next

'Reintegration
Print #FileNr, ""
Print #FileNr, "NETWORK"
Print #FileNr, "TITLE = Hardware Acknowledgement"

Print #FileNr, vbTab + "u ""X_REINTEGRATION"";"
Print #FileNr, vbTab + "= L 0.0;"
Print #FileNr, vbTab + "BLD 103;"
Print #FileNr, vbTab + "CALL ""F_ACK_GL"", ""I_F_ACK_GL"" ("
Print #FileNr, vbTab + vbTab + "ACK_REI_GLOB := L 0.0);"
Print #FileNr, vbTab + "NOP 0;"

Print #FileNr, ""
Print #FileNr, "NETWORK"
Print #FileNr, "TITLE = Call Emergency Stop Areas"

Print #FileNr, vbTab + "CALL ""CALL_ESA"";"
Print #FileNr, vbTab + "NOP 0;"

Print #FileNr, ""
Print #FileNr, "NETWORK"
Print #FileNr, "TITLE = Call Main Contactors"

Print #FileNr, vbTab + "CALL ""CALL_MC"";"
Print #FileNr, vbTab + "NOP 0;"

Print #FileNr, ""
Print #FileNr, "NETWORK"
Print #FileNr, "TITLE = INPUT only for commissioning"

Print #FileNr, vbTab + "CALL ""CALL_INPUT_IBN"";"
Print #FileNr, vbTab + "NOP 0;"

Print #FileNr, ""
Print #FileNr, "NETWORK"
Print #FileNr, "TITLE = OUTPUT only for commissioning"

Print #FileNr, vbTab + "CALL ""CALL_OUTPUT_IBN"";"
Print #FileNr, vbTab + "NOP 0;"

Print #FileNr, "END_FUNCTION"

Close 1

'#############################################################################################################
' ESA
'#############################################################################################################
    
strFileName = "02_F_ESA_XX_GEN.awl"
Open MakeFileName(strPath_es, strFileName) For Output As #FileNr

intZeileSymbolik = 1

'Nothaltkreise abkoffern
For i = 1 To c_maxEsa
    If esa_data(i).own_esa Then
        Print #FileNr, "FUNCTION_BLOCK """ + "F_" + esa_data(i).name + "_GEN"""
        Print #FileNr, "TITLE = "
        Print #FileNr, ""
        Print #FileNr, "VAR_INPUT"
        Print #FileNr, "    V_TIME_DEL: TIME; //emergency stop area delay time"
        Print #FileNr, "END_VAR"
        Print #FileNr, "VAR"
        Print #FileNr, "   I_F_TP_ALL : ""F_TP"";"
        Print #FileNr, "   I_F_TP_HS : ""F_TP"";"
        Print #FileNr, "   I_ESTOP1 : ""F_ESTOP1"";"
        Print #FileNr, "   x_ack_all_pn : BOOL; //Acknowledge Button negative Edge"
        Print #FileNr, "   x_ack_hs_pn : BOOL; //Acknowledge Button negative Edge"
        Print #FileNr, "END_VAR"
        Print #FileNr, "VAR_TEMP"
        Print #FileNr, "   t_ack : BOOL; //internal acknowledge"
        Print #FileNr, "   t_esb : BOOL; //collecting Emergency Stop Buttons"
        Print #FileNr, "   t_esb_all : BOOL; //collecting Emergency Stop Buttons"
        Print #FileNr, "END_VAR"
        Print #FileNr, ""
        Print #FileNr, "BEGIN"
        Print #FileNr, ""
        
        If esa_data(i).count_ackb > 0 Then
        
            Print #FileNr, "NETWORK"
            Print #FileNr, "TITLE = Acknowledgement handshake"
        
            If esa_data(i).count_ackb > 1 Then
                Print #FileNr, "U(;"
                    'Quittiertaster abkoffern
                    For j = 1 To esa_data(i).count_ackb
                        If esa_data(i).ackb(j).function = "q" Then
                            Print #FileNr, "O """ & esa_data(i).ackb(j).name & """;"
                        End If
                    Next j
                Print #FileNr, ");"
            Else
                'Quittiertaster abkoffern
                For j = 1 To esa_data(i).count_ackb
                    If esa_data(i).ackb(j).function = "q" Then
                        Print #FileNr, "U """ & esa_data(i).ackb(j).name & """;"
                    End If
                Next j
            End If
            
            Print #FileNr, "= #t_ack;"
            Print #FileNr, "u #t_ack;"
            Print #FileNr, "FN #x_ack_hs_pn;"
            Print #FileNr, "= L 1.0;"
            Print #FileNr, "BLD 103;"
            Print #FileNr, "CALL #I_F_TP_HS ("
            Print #FileNr, "IN := L 1.0,"
            Print #FileNr, "PT := T#100ms,"
            Print #FileNr, "Q := ""F_GN_MAIN"".HS_OUT_" + esa_data(i).name + "_ACK);"
            Print #FileNr, "NOP 0;"
        End If
        Print #FileNr, ""
        
        Print #FileNr, "NETWORK"
        Print #FileNr, "TITLE = Acknowledgement"
    
        'own acknowledge buttons exists
        If esa_data(i).count_ackb > 0 Then
            
            Print #FileNr, "U(;"
            'internal acknowledge
            Print #FileNr, "O #t_ack;"
            'handshake acknowledge
            Print #FileNr, "O ""F_GN_MAIN"".HS_IN_" + esa_data(i).name + "_ACK;"
            Print #FileNr, ");"
        'only handshake acknowledge
        Else
            Print #FileNr, "U ""F_GN_MAIN"".HS_IN_" + esa_data(i).name + "_ACK;"
        End If
        
        Print #FileNr, "FN #x_ack_all_pn;"
        Print #FileNr, "= L 1.0;"
        Print #FileNr, "BLD 103;"
        Print #FileNr, "CALL #I_F_TP_ALL ("
        Print #FileNr, "IN := L 1.0,"
        Print #FileNr, "PT := T#100ms,"
        Print #FileNr, "Q := ""F_GN_MAIN""." + esa_data(i).name + "_ACK);"
        Print #FileNr, "NOP 0;"
        Print #FileNr, ""
        
        Print #FileNr, "NETWORK"
        Print #FileNr, "TITLE =Collect Emergency Stop Buttons"
        
        intAnzNhtAkt = 1
        
        'if there is no button, just take the external one -grn-
        If esa_data(i).count_esb > 0 Then
        
            'check emergency stop buttons
            For j = 1 To esa_data(i).count_esb
                If esa_data(i).esb(j).function = "x" Or esa_data(i).esb(j).function = "n" Then
                    If (intAnzNhtAkt Mod 5 = 0 And intAnzNhtAkt > 5) Or intAnzNhtAkt = 6 Then
                        Print #FileNr, "= #t_esb;"
                        Print #FileNr, ""
                        Print #FileNr, "NETWORK"
                        Print #FileNr, "TITLE =Collect Emergency Stop Buttons"
                        Print #FileNr, "U #t_esb;"
                    End If
                    
                    intAnzNhtAkt = intAnzNhtAkt + 1
                    
                    If esa_data(i).esb(j).function = "x" Then
                        Print #FileNr, "U """ + esa_data(i).esb(j).name + """;"
                    ElseIf esa_data(i).esb(j).function = "n" Then
                        Print #FileNr, "U(;"
                        Print #FileNr, "O """ + esa_data(i).esb(j).name + """;"
                        Print #FileNr, "O IBN1;"
                        Print #FileNr, ");"
                    End If
                End If
            Next
                                
            Print #FileNr, "= #t_esb;"
            Print #FileNr, "U #t_esb;"
        
        End If
        
        'check handshake emergency stop
        If esa_data(i).ext_ack Then
            Print #FileNr, "U ""F_GN_MAIN"".HS_IN_" + esa_data(i).name + "_ESB;"
        End If
        
        Print #FileNr, "= #t_esb_all;"
        
        'if there is no button, there is nothing to send -grn-
        If esa_data(i).count_esb > 0 Then
            'Prepare for Handshake
            Print #FileNr, ""
            Print #FileNr, "NETWORK"
            Print #FileNr, "TITLE =Prepare Bit for Safety Handshake"
            Print #FileNr, "U #t_esb; = ""F_GN_MAIN"".HS_OUT_" + esa_data(i).name + "_ESB;"
        End If
        
        Print #FileNr, ""
        Print #FileNr, "NETWORK"
        Print #FileNr, "TITLE =EStop"
        Print #FileNr, "U #t_esb_all;"
        Print #FileNr, "= L 1.0;"
        Print #FileNr, "BLD 103;"
        Print #FileNr, "U ""F_GN_MAIN""." + esa_data(i).name + "_ACK;"
        Print #FileNr, "=     L      1.2;"
        Print #FileNr, "BLD   103;"
        
        Print #FileNr, "CALL #I_ESTOP1 ("
        Print #FileNr, "E_STOP := L 1.0,"
        Print #FileNr, "ACK := L 1.2,"
        Print #FileNr, "TIME_DEL:= V_TIME_DEL,"
        Print #FileNr, "Q := ""F_GN_MAIN""." + esa_data(i).name + "_Q,"
        Print #FileNr, "Q_DELAY := ""F_GN_MAIN""." + esa_data(i).name + "_Q_DELAY,"
        Print #FileNr, "ACK_REQ := ""F_GN_MAIN""." + esa_data(i).name + "_ACK_REQ);"
        Print #FileNr, "NOP 0;"
        Print #FileNr, ""
        Print #FileNr, "END_FUNCTION_BLOCK"
        Print #FileNr, ""
    End If
Next
Close 1

'F_ESA_CALL
strFileName = "03_CALL_ESA_GEN.awl"
Open MakeFileName(strPath_es, strFileName) For Output As #FileNr

Print #FileNr, "FUNCTION """ + "CALL_ESA_GEN"": VOID"
Print #FileNr, "TITLE = "
Print #FileNr, "BEGIN"

For i = 1 To c_maxEsa
    If esa_data(i).own_esa Then
        If i < 10 Then
           strTemp = "0" + Trim(Str(i))
        Else
           strTemp = Trim(Str(i))
        End If
        Print #FileNr, "NETWORK"
        Print #FileNr, "TITLE =Call Emergency Stop Area " + strTemp
        Print #FileNr, "CALL ""F_" + esa_data(i).name + """ , ""I_F_" + esa_data(i).name + """ ("
        Print #FileNr, vbTab + "V_TIME_DEL:= T#0MS);"
        Print #FileNr, "NOP 0;"
    End If
Next

Print #FileNr, "END_FUNCTION"
Close 1
    
    
'#############################################################################################################
' SAFETY TO FAST HANDSHAKES START HERE
' Only for separate Safety PLC
'#############################################################################################################
    
If Not CBool(Worksheets("Settings").chkBoxIntegrated.Value) Then
    'Check Number of PLCs
    For i = 1 To c_maxFastPlc
        
        esb_header_written = False
        ack_header_written = False
        
        strFast = plc_data(i).name
        If strFast <> "" Then
            'New Source File per HS
            strPath_fast = strPath + "\" + strFast
            strFileName = "10_F_HS_" + es_name + "_" + strFast + ".awl"
            Open MakeFileName(strPath_fast, strFileName) For Output As #FileNr
        
            strDB = "DATA_BLOCK F_HS_" + es_name + "_" + strFast
            Print #FileNr, strDB
            Print #FileNr, "struct"
            Print #FileNr, "ES_" + strFast + ": struct"
            
            '##################################################################################
            'General signals
            Print #FileNr, vbTab + "GENERAL: struct"
            Print #FileNr, vbTab + "lifebit: bool; //lifebit"
            'generate load voltage on switches
            For j = 1 To plc_data(i).count_lvs
                load_voltage_switch = plc_data(i).loadVoltageName(j)
                If load_voltage_switch <> "" Then
                    strTemp = Replace(load_voltage_switch, "-", "_")
                    Print #FileNr, vbTab + "" + strTemp + ": bool; //switch load voltage on"
                End If
            Next
            Print #FileNr, vbTab + "end_struct;"
            Print #FileNr, ""
            
            '##################################################################################
            'Search ESB
            For j = 1 To c_maxEsb
                esbName = esb_data(j).name
                If esbName <> "" Then
                    If InStr(1, esbName, strFast) <> 0 Then
                        If esb_header_written = False Then
                            Print #FileNr, vbTab + "ESB: struct"
                            esb_header_written = True
                        End If
                        strTemp = Replace(esbName, "-", "_")
                        Print #FileNr, vbTab + strTemp + ":" + vbTab + "bool;"
                    End If
                End If
            Next
            If esb_header_written Then
                Print #FileNr, vbTab + "end_struct;"
                Print #FileNr, ""
            End If
            
            '##################################################################################
            Print #FileNr, vbTab + "MC: struct"
                'Search MCs for MC_OFF
                For j = 1 To c_maxMc
                    mcName = mc_data(j).name
                    If mcName <> "" Then
                        If InStr(1, mcName, strFast) <> 0 Then
                            strTemp = Replace(mcName, "-", "_")
                            Print #FileNr, vbTab + "X_" + strTemp + ":" + vbTab + "bool;"
                        End If
                    End If
                Next
            Print #FileNr, vbTab + "end_struct;"
            Print #FileNr, ""
            
            '##################################################################################
            Print #FileNr, vbTab + "MC_ERR: struct"
                'Search MCs for MC_ERR
                For j = 1 To c_maxMc
                    mcName = mc_data(j).name
                    If mcName <> "" Then
                        If InStr(1, mcName, strFast) <> 0 Then
                            strTemp = Replace(mcName, "-", "_")
                            Print #FileNr, vbTab + "X_" + strTemp + "_ERR" + ":" + vbTab + "bool;"
                        End If
                    End If
                Next
            Print #FileNr, vbTab + "end_struct;"
            Print #FileNr, ""
            
            '##################################################################################
            Print #FileNr, vbTab + "ESA: struct"
                'Search ESA for ESA_OFF
                For j = 1 To c_maxEsa
                    Print #FileNr, vbTab + esa_data(j).name + "_Q" + ":" + vbTab + "bool;"
                    Print #FileNr, vbTab + esa_data(j).name + "_ACK_REQ" + ":" + vbTab + "bool;"
                Next
            Print #FileNr, vbTab + "end_struct;"
            Print #FileNr, ""
            
            '##################################################################################
            Print #FileNr, vbTab + "PRJSPEC: struct"
                'Project Specific Handshakes
                rowIdx = 3
                Do Until Worksheets(strFast).Cells(rowIdx, 1) = ""
                    Print #FileNr, vbTab + "" & Worksheets(strFast).Cells(rowIdx, 1) & ": bool;   //" & Worksheets(strFast).Cells(rowIdx, 2) & ""
                    rowIdx = rowIdx + 1
                Loop
            Print #FileNr, vbTab + "end_struct;"
            Print #FileNr, "end_struct;"
            Print #FileNr, ""
            
            '##################################################################################
            Print #FileNr, strFast + "_ES" + ": struct"
            '##################################################################################
            'General signals
            Print #FileNr, vbTab + "GENERAL: struct"
            Print #FileNr, vbTab + "lifebit: bool; //lifebit"
            Print #FileNr, vbTab + "end_struct;"
            Print #FileNr, ""
            
            '##################################################################################
            'acknowledges
            For j = 1 To c_maxAckb
                ackbName = ackb_data(j).name
                If ackbName <> "" Then
                    If InStr(1, ackbName, strFast) <> 0 And Left(ackbName, 2) = "X_" Then
                        If ack_header_written = False Then
                            Print #FileNr, vbTab + "ACK: struct"
                            ack_header_written = True
                        End If
                        strTemp = Mid(ackbName, 3, 100)
                        strTemp = Replace(strTemp, "-", "_")
                        Print #FileNr, vbTab + strTemp + ":" + vbTab + "BOOL;"
                    End If
                Else
                    Exit For
                End If
            Next
            If ack_header_written Then
                Print #FileNr, vbTab + "end_struct;"
                Print #FileNr, ""
            End If
            
            '##################################################################################
            Print #FileNr, vbTab + "PRJSPEC: struct"
                'Project Specific Handshakes
                rowIdx = 3
                Do Until Worksheets(strFast).Cells(rowIdx, 1) = ""
                    Print #FileNr, vbTab + "" & Worksheets(strFast).Cells(rowIdx, 4) & ": bool;   //" & Worksheets(strFast).Cells(rowIdx, 5) & ""
                    rowIdx = rowIdx + 1
                Loop
            Print #FileNr, vbTab + "end_struct;"
            Print #FileNr, "end_struct;"
            Print #FileNr, ""
            Print #FileNr, "end_struct;"
            Print #FileNr, ""
            Print #FileNr, "BEGIN"
            Print #FileNr, "END_DATA_BLOCK"
            Print #FileNr, ""
            Close 1
        Else
            Exit For
        End If
        strFileNamePathFast = strPath_fast + "\" + strFileName
        strFileNamePathEs = strPath_es + "\" + strFileName
        FileCopy strFileNamePathFast, strFileNamePathEs
    Next
    
    'F_HS_FCs SAFETY to FAST (SAFETY FC)
    strFileName = "11_F_HS_CYCL.scl"
    Open MakeFileName(strPath_es, strFileName) For Output As #FileNr
    
    'Check Number of PLCs
    For i = 1 To c_maxFastPlc
        strFast = plc_data(i).name
        If strFast <> "" Then
            strDB = "F_HS_" + es_name + "_" + strFast
            Print #FileNr, "FUNCTION F_HS_" + es_name + "_" + strFast + "_CYCL: VOID"
            Print #FileNr, "BEGIN"
            '##################################################################################
            Print #FileNr, "//general signals"
            Print #FileNr, """" + strDB + """.ES_" + strFast + ".GENERAL.lifebit:= """ + strDB + """." + strFast + "_ES.GENERAL.lifebit;"
            For j = 1 To plc_data(i).count_lvs
                load_voltage_switch = plc_data(i).loadVoltageName(j)
                If load_voltage_switch <> "" Then
                    strTemp = Replace(load_voltage_switch, "-", "_")
                    Print #FileNr, """" + strDB + """.ES_" + strFast + ".GENERAL." + strTemp + ":= """ + plc_data(i).loadVoltageName(j) + """;"
                End If
            Next j
            '##################################################################################
            Print #FileNr, "//emergency stop button"
                'Search ESB
                For j = 1 To c_maxEsb
                    esbName = esb_data(j).name
                    If esbName <> "" Then
                        If InStr(1, esbName, strFast) <> 0 Then
                            strTemp = Replace(esbName, "-", "_")
                            Print #FileNr, """" + strDB + """.ES_" + strFast + ".ESB." + strTemp + ":= """ + esbName + """;"
                        End If
                    End If
                Next
            Print #FileNr, ""
            
            '##################################################################################
            Print #FileNr, "//main contactor off"
                'Search MCs for MC_OFF
                For j = 1 To c_maxMc
                    mcName = mc_data(j).name
                    If mcName <> "" Then
                        If InStr(1, mcName, strFast) <> 0 Then
                            If j < 10 Then
                                strMcNumber = "00" + Trim(Str(j))
                            ElseIf j < 100 Then
                                strMcNumber = "0" + Trim(Str(j))
                            Else
                                strMcNumber = Trim(Str(j))
                            End If
                            strTemp = Replace(mcName, "-", "_")
                            Print #FileNr, """" + strDB + """.ES_" + strFast + ".MC.X_" + strTemp + ":= ""F_GN_MAIN"".MC_" + strMcNumber + "_Q;"
                        End If
                    End If
                Next
            Print #FileNr, ""
            
            '##################################################################################
            Print #FileNr, "//main contactor error"
                'Search MCs for MC_ERR
                For j = 1 To c_maxMc
                    mcName = mc_data(j).name
                    If InStr(1, mcName, strFast) <> 0 Then
                        If j < 10 Then
                            strMcNumber = "00" + Trim(Str(j))
                        ElseIf j < 100 Then
                            strMcNumber = "0" + Trim(Str(j))
                        Else
                            strMcNumber = Trim(Str(j))
                        End If
                        strTemp = Replace(mcName, "-", "_")
                        Print #FileNr, """" + strDB + """.ES_" + strFast + ".MC_ERR.X_" + strTemp + "_ERR:= ""F_GN_MAIN"".MC_" + strMcNumber + "_ERR;"
                    End If
                Next
            Print #FileNr, ""
            
            '##################################################################################
            Print #FileNr, "//emergency stop area off"
                'Search ESA for ESA_OFF
                For j = 1 To c_maxEsa
                    Print #FileNr, """" + strDB + """.ES_" + strFast + ".ESA." + esa_data(j).name + "_Q:= ""F_GN_MAIN""." + esa_data(j).name + "_Q;"
                    Print #FileNr, """" + strDB + """.ES_" + strFast + ".ESA." + esa_data(j).name + "_ACK_REQ:= ""F_GN_MAIN""." + esa_data(j).name + "_ACK_REQ;"
                Next
            Print #FileNr, ""
                
            '##################################################################################
            Print #FileNr, "//emergency stop area reset"
            
            For j = 1 To c_maxAckb
                ackbName = ackb_data(j).name
                If ackbName <> "" Then
                    If InStr(1, ackbName, strFast) <> 0 And Left(ackbName, 2) = "X_" Then
                        strTemp = Mid(Replace(ackbName, "-", "_"), 3, 100)
                        Print #FileNr, """" + ackbName + """:= """ + strDB + """." + strFast + "_ES.ACK." + strTemp + ";"
                    End If
                End If
            Next
                
            Print #FileNr, ""
            Print #FileNr, "END_FUNCTION"
            Print #FileNr, ""
        Else
            Exit For
        End If
    Next
    
    Close 1
    
    'F_HS_FCs SAFETY to FAST (FAST FC)
    
    'Check Number of PLCs
    For i = 1 To c_maxFastPlc
        strFast = plc_data(i).name
        If strFast <> "" Then
            strPath_fast = strPath + "\" + strFast
            strFileName = "_F_HS_" + es_name + "_" + strFast + "_CYCL.awl"
            Open MakeFileName(strPath_fast, strFileName) For Output As #FileNr
        
            strDB = "F_HS_" + es_name + "_" + strFast
            Print #FileNr, "// NEW FC----------------------------------------------------"
            Print #FileNr, "FUNCTION F_HS_" + es_name + "_" + strFast + "_CYCL: VOID"
            Print #FileNr, "VAR_TEMP"
            Print #FileNr, vbTab + "t_b: BOOL;"
            Print #FileNr, "END_VAR"
            Print #FileNr, "BEGIN"
            '##################################################################################
            Print #FileNr, "NETWORK"
            Print #FileNr, "TITLE =communication to safety"
            Print #FileNr, "CALL ""S7-COM-SAFETY"" , ""I_S7_COM_SAFETY""  ("
            Print #FileNr, vbTab + "Verbindungs_ID           := W#16#??,"
            Print #FileNr, vbTab + "LOCAL_SEND_DATA          := ""F_HS_" + es_name + "_" + strFast + """." + strFast + "_ES,"
            Print #FileNr, vbTab + "REMOTE_RCV_DATA          := ""F_HS_" + es_name + "_" + strFast + """." + strFast + "_ES,"
            Print #FileNr, vbTab + "LOCAL_RCV_DATA           := ""F_HS_" + es_name + "_" + strFast + """.ES_" + strFast + ","
            Print #FileNr, vbTab + "REMOTE_SEND_DATA         := ""F_HS_" + es_name + "_" + strFast + """.ES_" + strFast; ","
            Print #FileNr, vbTab + "S7_COM_ERR               := X_ES_COM_ERR);"
            Print #FileNr, ""
    
            
            '##################################################################################
            Print #FileNr, "NETWORK"
            Print #FileNr, "TITLE =general signals"
            
            'toogle lifbit
            Print #FileNr, "un ""F_HS_" + es_name + "_" + strFast + """.ES_" + strFast + ".GENERAL.lifebit; = ""F_HS_" + es_name + "_" + strFast + """." + strFast + "_ES.GENERAL.lifebit;"
            
            'load voltage on
            For j = 1 To plc_data(i).count_lvs
                load_voltage_switch = plc_data(i).loadVoltageName(j)
                If load_voltage_switch <> "" Then
                    strTemp = Replace(load_voltage_switch, "-", "_")
                    Print #FileNr, "u ""F_HS_" + es_name + "_" + strFast + """.ES_" + strFast + ".GENERAL." + strTemp + "; = X_" + strTemp + ";"
                End If
            Next j
            
            Print #FileNr,
            
            '##################################################################################
            Print #FileNr, "NETWORK"
            Print #FileNr, "TITLE =emergency button pressed"
                'Search ESB
                For j = 1 To c_maxEsb
                    esbName = esb_data(j).name
                    esbBvName = esb_data(j).bv_name
                    esbPnAdd = esb_data(j).pn_add
                    esbIo2 = esb_data(j).io_2
                    'Error if BV for ESB is missing
                    If esbName <> "" And esbBvName = "" Then
                        MsgBox "BV missing"
                        Exit Sub
                    End If
                    If esbName <> "" And esbBvName <> "" Then
                        If InStr(1, esbName, strFast) <> 0 Then
                            Print #FileNr, "u """ + strDB + """.ES_" + strFast + ".ESB." + esbName + ";"
                            Print #FileNr, "on """ + strDB + """.ES_" + strFast + ".PRJSPEC." + strFast + "_" + esbBvName + "_24V_IO_1;"
                            If esbIo2 <> "" Then
                                Print #FileNr, "on """ + strDB + """.ES_" + strFast + ".PRJSPEC." + strFast + "_" + esbBvName + "_24V_IO_2;"
                            End If
                            Print #FileNr, "o """ + strDB + """.ES_" + strFast + ".PRJSPEC." + strFast + "_" + esbBvName + "_ACK_REQ;"
                            If esbPnAdd = "" Then
                                Print #FileNr, "o ""GN_VISU"".pn[1].sto[" + Right(esbBvName, 2) + "];"
                            Else
                                Print #FileNr, "o ""GN_VISU"".pn[1].sto[" + esbPnAdd + "];"
                            End If
                            Print #FileNr, "= ""X_" + esbName + """" + ";"
                        End If
                    End If
                Next
            Print #FileNr, ""
            
            '##################################################################################
            Print #FileNr, "NETWORK"
            Print #FileNr, "TITLE =contactor off"
                'Search MCs for MC_OFF
                For j = 1 To c_maxMc
                    mcName = mc_data(j).name
                    If mcName <> "" Then
                        If InStr(1, mcName, strFast) <> 0 Then
                            Print #FileNr, "u """ + strDB + """.ES_" + strFast + ".MC.X_" + mcName + "; = ""X_" + mcName + """;"
                        End If
                    End If
                Next
            Print #FileNr, ""
            
            '##################################################################################
            Print #FileNr, "NETWORK"
            Print #FileNr, "TITLE =contactor error"
                'Search MCs for MC_ERR
                For j = 1 To c_maxMc
                    mcName = mc_data(j).name
                    If mcName <> "" Then
                        If InStr(1, mcName, strFast) <> 0 Then
                            Print #FileNr, "u """ + strDB + """.ES_" + strFast + ".MC_ERR.X_" + mcName + "_ERR;"
                            Print #FileNr, "un """ + strDB + """.ES_" + strFast + ".PRJSPEC." + Worksheets("Settings").Cells(2, 2) + "_S11_24V_IO_1;"
                            Print #FileNr, "un """ + strDB + """.ES_" + strFast + ".PRJSPEC." + strFast + "_" + Mid(mcName, 5, 3) + "_ACK_REQ;"
                            Print #FileNr, "= ""X_" + mcName + "_ERR"";"
                        End If
                    End If
                Next
            Print #FileNr, ""
            
            '##################################################################################
            Print #FileNr, "NETWORK"
            Print #FileNr, "TITLE =emergency stop area"
                'Search ESA for ESA_OFF
                For j = 2 To c_maxEsa
                    For k = 2 To c_maxEsa
                        If Worksheets("ES").Cells(j, k) <> "" Then
                            Print #FileNr, "u """ + strDB + """.ES_" + strFast + ".ESA." + esa_data(k - 1).name + "_Q; = X_" + esa_data(k - 1).name + "_Q;"
                            Print #FileNr, "u """ + strDB + """.ES_" + strFast + ".ESA." + esa_data(k - 1).name + "_ACK_REQ; = X_" + esa_data(k - 1).name + "_ACK_REQ;"
                        End If
                    Next
                Next
            Print #FileNr, ""
            
            '##################################################################################
            'Print #FileNr, "NETWORK"
            'Print #FileNr, "TITLE =emergency area acknowledge"
            'For j = 1 To c_maxAckb
             '   ackbName = ackb_data(j).name
              '  If ackbName <> "" Then
               '     If InStr(1, ackbName, strFast) <> 0 Then
                '        Print #FileNr, "u """ + Mid(ackbName, 5, 100) + """; = """ + strDB + """." + strFast + "_ES.PRJSPEC." + ackbName + ";"
                 '   End If
                'End If
            'Next
            'Print #FileNr, ""
            
            '##################################################################################
            Print #FileNr, "NETWORK"
            Print #FileNr, "TITLE =PJ ES to FAST"
                For j = 3 To c_maxPjBit
                    If InStr(1, Worksheets(strFast).Cells(j, 1), "bit") <> 1 Then
                        If InStr(1, Worksheets(strFast).Cells(j, 1), "X_") <> 0 Then
                            Print #FileNr, "u """; strDB + """." + "ES_" + strFast + ".PRJSPEC." + Worksheets(strFast).Cells(j, 1) + "; = """ + Worksheets(strFast).Cells(j, 1) + """; "
                        Else
                            Print #FileNr, "u """; strDB + """." + "ES_" + strFast + ".PRJSPEC." + Worksheets(strFast).Cells(j, 1) + "; = " + """X_" + Worksheets(strFast).Cells(j, 1) + """;"
                        End If
                    End If
                Next
            Print #FileNr, ""
            
            '##################################################################################
            Print #FileNr, "NETWORK"
            Print #FileNr, "TITLE =PJ FAST to ES"
                For j = 3 To c_maxPjBit
                    If InStr(1, Worksheets(strFast).Cells(j, 4), "bit") <> 1 Then
                        If InStr(1, Worksheets(strFast).Cells(j, 4), strFast) <> 1 Then
                            Print #FileNr, "u """ + Worksheets(strFast).Cells(j, 4) + """; = """ + strDB + """." + strFast + "_ES.PRJSPEC." + ackbName + Worksheets(strFast).Cells(j, 4) + ";"
                        Else
                            Print #FileNr, "u """ + Mid(Worksheets(strFast).Cells(j, 4), 5, 100) + """; = """ + strDB + """." + strFast + "_ES.PRJSPEC." + ackbName + Worksheets(strFast).Cells(j, 4) + ";"
                        End If
                    End If
                Next
            Print #FileNr, ""
            
            Print #FileNr, "END_FUNCTION"
            Print #FileNr, ""
            Close 1
        Else
            Exit For
        End If
    Next
Else
'#############################################################################################################
' SAFETY TO FAST HANDSHAKES START HERE
' Only for integrated Safety PLC
'#############################################################################################################
    
    'F_HS_FCs SAFETY to FAST (SAFETY FC)
    strFileName = "11_F_HS_CYCL.scl"
    Open MakeFileName(strPath_es, strFileName) For Output As #FileNr
    
    'Take first PLC (there should be only one)
    strFast = plc_data(1).name
    If strFast <> "" Then
        strDB = "F_HS_" + es_name + "_" + strFast
        Print #FileNr, "FUNCTION F_HS_" + es_name + "_" + strFast + "_CYCL: VOID"
        Print #FileNr, "BEGIN"
        
        '##################################################################################
        Print #FileNr, "//main contactor error"
            'Search MCs for MC_ERR
            For j = 1 To c_maxMc
                mcName = mc_data(j).name
                If InStr(1, mcName, strFast) <> 0 Then
                    If j < 10 Then
                        strMcNumber = "00" + Trim(Str(j))
                    ElseIf j < 100 Then
                        strMcNumber = "0" + Trim(Str(j))
                    Else
                        strMcNumber = Trim(Str(j))
                    End If
                    strTemp = Replace(mcName, "-", "_")
                    Print #FileNr, "X_" + strTemp + "_ERR:= ""F_GN_MAIN"".MC_" + strMcNumber + "_ERR;"
                End If
            Next
        Print #FileNr, ""
        
        '##################################################################################
        Print #FileNr, "//emergency stop area off"
            'Search ESA for ESA_OFF
            For j = 1 To c_maxEsa
                Print #FileNr, "X_" + esa_data(j).name + "_Q:= ""F_GN_MAIN""." + esa_data(j).name + "_Q;"
                Print #FileNr, "X_" + esa_data(j).name + "_ACK_REQ:= ""F_GN_MAIN""." + esa_data(j).name + "_ACK_REQ;"
            Next
        Print #FileNr, ""
            
        Print #FileNr, ""
        Print #FileNr, "END_FUNCTION"
        Print #FileNr, ""
    End If
    
    Close 1
    
End If

'#############################################################################################################
' FAST TO SAFETY HANDSHAKES START HERE
'#############################################################################################################

'HS_FCs for FAST
'For i = 1 To 10

    'If Worksheets("Settings").Cells(i + 2, 2) <> "" Then

        'strFast = Worksheets("Settings").Cells(i + 2, 2)
        'strPath = Worksheets("Settings").Cells(1, 2)
        'strFileName = "_" + strFast + "_ES_HS.awl"
        'Open MakeFileName(strPath, strFileName) For Output As #FileNr
        
        'Print #FileNr, "FUNCTION FC_HS_" + Worksheets("Settings").Cells(i + 2, 2) + "_" + es_name + ": VOID"
        'Print #FileNr, "BEGIN"
        
        'For j = 1 To 1000
            'strTemp = Worksheets("ESA").Cells(j + 1, 1)
            
            'If strTemp <> "" Then
                'If InStr(1, strTemp, strFast) <> 0 And InStr(1, strTemp, "X_") Then
                    'Print #FileNr, vbTab + "u " + Mid(strTemp, 7, 100) + "; = ""HS_" + strFast + "_ES"".ACK." + Mid(strTemp, 3, 100) + ";"
                'End If
            'Else
                'Exit For
            'End If
        'Next
        
        'Print #FileNr, "END_FUNCTION"
        'Print #FileNr, ""
        
        'Close 1
    'Else
        'Exit For
    'End If
'Next

'-grn-
'HS_FCs for SAFETY
'strPath = Worksheets("Settings").Cells(1, 2)
'strFileName = "FAST_ES_HS.awl"
'Open MakeFileName(strPath, strFileName) For Output As #FileNr

'Print #FileNr, "FUNCTION FC_HS_FAST_" + es_name + ": VOID"
'Print #FileNr, "BEGIN"

'For i = 1 To 10

    'If Worksheets("Settings").Cells(i + 2, 2) <> "" Then
        
        'strFast = Worksheets("Settings").Cells(i + 2, 2)
        'Print #FileNr, "NETWORK"
        
        'For j = 1 To 1000
            'strTemp = Worksheets("ESA").Cells(j + 1, 1)
            
            'If strTemp <> "" Then
                'If InStr(1, strTemp, strFast) <> 0 And InStr(1, strTemp, "X_") Then
                    'Print #FileNr, vbTab + "u " + """HS_" + strFast + "_" + es_name + """.ACK." + Mid(strTemp, 3, 100) + "; = " + strTemp + ";"
                'End If
            'Else
                'Exit For
            'End If
        'Next

    'Else
        'Exit For
    'End If
'Next

'Print #FileNr, "END_FUNCTION"
'Print #FileNr, ""

'Close 1

'HS_DBs for FAST and SAFETY
'For i = 1 To 10

    'If Worksheets("Settings").Cells(i + 2, 2) <> "" Then

        'strFast = Worksheets("Settings").Cells(i + 2, 2)
        'strPath = Worksheets("Settings").Cells(1, 2)
        'strFileName = strFast + "_ES_HS_DB.awl"
        'Open MakeFileName(strPath, strFileName) For Output As #FileNr
        
        'strDB = "DATA_BLOCK HS_" + Worksheets("Settings").Cells(i + 2, 2) + "_" + es_name
        'Print #FileNr, strDB
        'Print #FileNr, "struct"
        '##################################################################################
        'Print #FileNr, vbTab + "ACK: struct"
        
        'For j = 1 To 1000
            'strTemp = Worksheets("ESA").Cells(j + 1, 1)
            
            'If strTemp <> "" Then
                'If InStr(1, strTemp, strFast) <> 0 And InStr(1, strTemp, "X_") Then
                    'strTemp = Mid(strTemp, 3, 100)
                    'Print #FileNr, vbTab + strTemp + ":" + vbTab + "BOOL;"
                'End If
            'Else
                'Exit For
            'End If
        'Next
        
        'Print #FileNr, vbTab + "end_struct;"
        'Print #FileNr, "end_struct;"
        'Print #FileNr, "BEGIN"
        'Print #FileNr, "END_DATA_BLOCK"
        
        'Close 1
    'Else
        'Exit For
    'End If
'Next

End Sub


Attribute VB_Name = "gen_ibn"
Option Explicit
Public Sub generate_ibn(strPath As String, es_name As String)

Dim i As Integer
Dim intZeileSymbolik As Integer
Dim intMerkerByteByte As Integer
Dim intMerkerByteBit As Integer
Dim strPath_es As String
Dim strFileName As String

strPath_es = strPath + "\" + es_name

'#############################################################################################################
' INPUT
'#############################################################################################################

strFileName = "07_CALL_INPUT_IBN_GEN.awl"
Open MakeFileName(strPath_es, strFileName) For Output As #FileNr

Print #FileNr, "FUNCTION """ + "CALL_INPUT_IBN_GEN"": VOID"
Print #FileNr, "TITLE = "
Print #FileNr, "VAR_TEMP"
Print #FileNr, "   t_b : BOOL;"
Print #FileNr, "END_VAR"
Print #FileNr, "BEGIN"
Print #FileNr, "NETWORK"
Print #FileNr, "TITLE =for commissioning"

For i = 1 To c_maxEsb + c_maxAckb
    If input_data(i) = "" Then
        Exit For
    End If
    
    Print #FileNr, "o """ + input_data(i) + """;"
Next i

Print #FileNr, "= #t_b;"

Print #FileNr, "END_FUNCTION"
Close 1

'#############################################################################################################
' OUTPUT
'#############################################################################################################

strFileName = "08_CALL_OUTPUT_IBN_GEN.awl"
Open MakeFileName(strPath_es, strFileName) For Output As #FileNr

Print #FileNr, "FUNCTION """ + "CALL_OUTPUT_IBN_GEN"": VOID"
Print #FileNr, "TITLE = "
Print #FileNr, "BEGIN"

For i = 1 To c_maxMc
    If mc_data(i).name = "" Then
        Exit For
    End If

    Print #FileNr, "NETWORK"
    Print #FileNr, "TITLE =" + mc_data(i).name + ""
    Print #FileNr, "u ""X_" + mc_data(i).name + "_IBN"";"
    Print #FileNr, "= """ + mc_data(i).name + """;"

Next i
Print #FileNr, "END_FUNCTION"
Close 1

End Sub
Attribute VB_Name = "gen_mc"
Option Explicit
Public Sub generate_mc(strPath As String, es_name As String)
    
Dim i As Integer
Dim j As Integer
Dim intZeileSymbolik As Integer
Dim intMerkerByteByte As Integer
Dim intMerkerByteBit As Integer
Dim strMerkerA_MC As String
Dim strMerkerA_MC_ERROR As String
Dim strMcNumber As String
Dim strMcName As String
Dim strPath_es As String
Dim strFileName As String
Dim strTemp As String
Dim start_col_con As Integer
Dim start_col_esa As Integer
Dim intAnzQuit As Integer
Dim intMerkerBit As Integer
Dim intMerkerByte As Integer
Dim strName As String
Dim esaIdx As Integer
            
Worksheets("internal").Activate
Columns("A:D").Select
Selection.ClearContents

Worksheets("MC").Activate
                    
strPath_es = strPath + "\" + es_name

strFileName = "04_I_F_MC_XXX.awl"
Open MakeFileName(strPath_es, strFileName) For Output As #FileNr
        
' start value|fffd|s
start_col_con = 2
start_col_esa = 3

'Hauptsch|fffd|tze abkoffern
For i = 1 To c_maxMc

    strMcName = mc_data(i).name
    
    'Letzter Hauptsch|fffd|tz
    If strMcName = "" Then
        Exit For
    End If
    
    If mc_data(i).function <> "" Then
        'Check, ob MC Ein, Zwei oder Dreistellig
        If i < 10 Then
            strMcNumber = "00" + Trim(Str(i))
        ElseIf i < 100 Then
            strMcNumber = "0" + Trim(Str(i))
        Else
            strMcNumber = Trim(Str(i))
        End If
    
        'Data Block
        Print #FileNr, "DATA_BLOCK """ + "I_F_MC_" + strMcNumber + """"
        Print #FileNr, """F_MC"""
        Print #FileNr, "BEGIN"
        Print #FileNr, "END_DATA_BLOCK"
        Print #FileNr, ""
    End If
Next
Close 1
    
strFileName = "05_F_MC_XXX_GEN.awl"
Open MakeFileName(strPath_es, strFileName) For Output As #FileNr

intZeileSymbolik = 1

'Hauptsch|fffd|tze abkoffern
For i = 1 To c_maxMc

    strMcName = mc_data(i).name
    
    'Letzter Hauptsch|fffd|tz
    If strMcName = "" Then
        Exit For
    End If
    
    If mc_data(i).function <> "" Then
    
        'Check, ob MC Ein, Zwei oder Dreistellig
        If i < 10 Then
            strMcNumber = "00" + Trim(Str(i))
        ElseIf i < 100 Then
            strMcNumber = "0" + Trim(Str(i))
        Else
            strMcNumber = Trim(Str(i))
        End If
        
        'Function
        Print #FileNr, "FUNCTION ""F_MC_" + strMcNumber + "_GEN"": VOID"
        Print #FileNr, "TITLE = Call Main Contactor"
        Print #FileNr, "VERSION : 0.1"
        Print #FileNr, ""
        Print #FileNr, "VAR_INPUT"
        Print #FileNr, "    V_TIME_VZ0: TIME;   //Delay Time Main Contactor"
        Print #FileNr, "    V_TIME_FDBACK: TIME;    //Delay Time Feedback Check"
        Print #FileNr, "    V_TIME_POW_UP_PROT: TIME;   //Delay Time Power Up"
        Print #FileNr, "END_VAR"
        Print #FileNr, ""
        Print #FileNr, "BEGIN"
        Print #FileNr, "NETWORK"
        Print #FileNr, "TITLE = Main Contactor " + strMcName
        
        'Check, welcher ESA aufgeschalten
        For j = 1 To c_maxEsa
            esaIdx = mc_data(i).esa(j)
            If esaIdx <> 0 Then
                If esa_data(esaIdx).own_esa Then
                    Print #FileNr, "U ""F_GN_MAIN""." + esa_data(esaIdx).name + "_Q_DELAY;"
                End If
            End If
        Next
        
        Print #FileNr, "= L 0.0;"
        Print #FileNr, "BLD 103;"
        
        'Check, Schl|fffd|sselschalter Schaltschrank -grn- hier Hardcoded
        If mc_data(i).loadVoltageName = "VKE1" Then
            Print #FileNr, "U ""F_GLOBDB"".VKE1;"
        Else
            Print #FileNr, "u """ + mc_data(i).loadVoltageName + """;"
        End If
        Print #FileNr, "= L 0.1;"
        Print #FileNr, "BLD 103;"
        
        'Unterschiedliche Syntax, wenn ein oder mehrere Quittierm|fffd|glichkeiten
        If mc_data(i).count_esa = 1 Then
            esaIdx = mc_data(i).esa(1)
            Print #FileNr, "U ""F_GN_MAIN""." + esa_data(esaIdx).name + "_ACK;"
        
        ElseIf mc_data(i).count_esa > 1 Then
            Print #FileNr, "U(;"
            For j = 1 To c_maxEsa
                esaIdx = mc_data(i).esa(j)
                If esaIdx <> 0 Then
                    If esa_data(esaIdx).own_esa Then
                        Print #FileNr, "O ""F_GN_MAIN""." + esa_data(esaIdx).name + "_ACK;"
                    End If
                End If
            Next
            Print #FileNr, ");"
        End If
        
        Print #FileNr, "= L 0.2;"
        Print #FileNr, "BLD 103;"
        
        Print #FileNr, "U """ + strMcName + "_OFF"";"
        Print #FileNr, "= L0.3;"
        Print #FileNr, "BLD 103;"
        
        strMerkerA_MC = "X_" + strMcName
        strMerkerA_MC_ERROR = "X_" + strMcName + "_ERR"
        
        intMerkerBit = intZeileSymbolik Mod 8
        intMerkerByte = intZeileSymbolik - intMerkerBit
        intMerkerByte = intMerkerByte / 8
        Worksheets("internal").Cells(intZeileSymbolik, 1) = "X_" + strMcName
        Worksheets("internal").Cells(intZeileSymbolik, 2) = "M " + Trim(Str(intMerkerByte + 3000)) + "." + Trim(Str(intMerkerBit))
        Worksheets("internal").Cells(intZeileSymbolik, 3) = "BOOL"
        intZeileSymbolik = intZeileSymbolik + 1
        
        intMerkerBit = intZeileSymbolik Mod 8
        intMerkerByte = intZeileSymbolik - intMerkerBit
        intMerkerByte = intMerkerByte / 8
        Worksheets("internal").Cells(intZeileSymbolik, 1) = "X_" + strMcName + "_ERR"
        Worksheets("internal").Cells(intZeileSymbolik, 2) = "M " + Trim(Str(intMerkerByte + 3000)) + "." + Trim(Str(intMerkerBit))
        Worksheets("internal").Cells(intZeileSymbolik, 3) = "BOOL"
        intZeileSymbolik = intZeileSymbolik + 1
        
        Print #FileNr, "CALL ""F_MC"" , ""I_F_MC_" + strMcNumber + """ ("
        Print #FileNr, "E_ESA := L 0.0,"
        Print #FileNr, "E_MAIN_SWITCH := L 0.1,"
        Print #FileNr, "E_ACK := L 0.2,"
        Print #FileNr, "E_MC_FDBACK:= L 0.3,"
        Print #FileNr, "V_TIME_VZ0:= #V_TIME_VZ0,"
        Print #FileNr, "V_TIME_FDBACK:= #V_TIME_FDBACK,"
        Print #FileNr, "V_TIME_POW_UP_PROT:= V_TIME_POW_UP_PROT,"
        Print #FileNr, "A_MC := ""F_GN_MAIN"".MC_" + strMcNumber + "_Q,"
        Print #FileNr, "A_MC_DELAY := ""F_GN_MAIN"".MC_" + strMcNumber + "_Q_DELAY,"
        Print #FileNr, "A_MC_ERROR := ""F_GN_MAIN"".MC_" + strMcNumber + "_ERR,"
        Print #FileNr, "A_MC_ACK_REQ := ""F_GN_MAIN"".MC_" + strMcNumber + "_ACK_REQ);"
        Print #FileNr, "NOP 0;"
        
        Print #FileNr, "NETWORK"
        Print #FileNr, "TITLE = Main Contactor " + strMcName
        Print #FileNr, "u ""F_GN_MAIN"".MC_" + strMcNumber + "_Q_DELAY;"
        Print #FileNr, "= """ + strMcName + """;"
        
        Print #FileNr, "END_FUNCTION"
        Print #FileNr, ""
    End If
Next

Close 1

'F_MC_CALL
strFileName = "06_CALL_MC_GEN.awl"
Open MakeFileName(strPath_es, strFileName) For Output As #FileNr

Print #FileNr, "FUNCTION """ + "CALL_MC_GEN"": VOID"
Print #FileNr, "TITLE = "
Print #FileNr, "BEGIN"

For i = 1 To c_maxMc

    strMcName = mc_data(i).name
    
    'Letzter Hauptsch|fffd|tz
    If strMcName = "" Then
        Exit For
    End If
    
    If mc_data(i).function <> "" Then
    
        'Check, ob MC Ein, Zwei oder Dreistellig
        If i < 10 Then
            strMcNumber = "00" + Trim(Str(i))
        ElseIf i < 100 Then
            strMcNumber = "0" + Trim(Str(i))
        Else
            strMcNumber = Trim(Str(i))
        End If
    
        Print #FileNr, "NETWORK"
        Print #FileNr, "TITLE =Call Main Contactor " + strMcNumber
        Print #FileNr, "CALL ""F_MC_" + strMcNumber + """("
        Print #FileNr, vbTab + "V_TIME_VZ0:= T#500MS,"
        Print #FileNr, vbTab + "V_TIME_FDBACK:= T#200MS,"
        Print #FileNr, vbTab + "V_TIME_POW_UP_PROT:= T#1S);"
        Print #FileNr, "NOP 0;"
    End If
Next

Print #FileNr, "END_FUNCTION"
Close 1

End Sub

Attribute VB_Name = "gen_symbol_es"
Option Explicit
Public Sub generate_symbol_es(strPath, es_name As String)

Dim i As Integer
Dim j As Integer
Dim intZeileSymbolik As Integer
Dim merkerByte As Integer
Dim merkerBit As Integer
Dim rowIdxVat(c_maxFastPlc) As Integer
Dim rowIdx As Integer
Dim strFast As String
Dim startNo_symb_hs As String

'#############################################################################################################
' write symbolic
'#############################################################################################################
Worksheets("Symb_ES").Activate
Columns("A:D").Select
Selection.ClearContents

'delete sheet for variable table
For i = 1 To c_maxFastPlc
    If plc_data(i).name <> "" Then
        strFast = "VAT_" + plc_data(i).name
        Worksheets(strFast).Activate
        Columns("A:A").Select
        Selection.ClearContents
    End If
Next i

'start values
merkerByte = 1000
merkerBit = 0
startNo_symb_hs = 3500


For i = 1 To c_maxFastPlc
    rowIdxVat(i) = 1
Next i
 
'generate VAT_XX for main contactor
For i = 1 To c_maxMc
    If mc_data(i).name = "" Then
        rowIdx = i
        Exit For
    End If

    'write symbolic
    Worksheets("Symb_ES").Cells(i, 1) = "X_" + mc_data(i).name + "_IBN"
    Worksheets("Symb_ES").Cells(i, 2) = "M " + Trim(Str(merkerByte)) + "." + Trim(Str(merkerBit))
    Worksheets("Symb_ES").Cells(i, 3) = "BOOL"
    Worksheets("Symb_ES").Cells(i, 4) = "only for commissioning"
    merkerBit = merkerBit + 1
    
    'increase merkerbyte if byte is at the end
    If merkerBit > 7 Then
        merkerByte = merkerByte + 1
        merkerBit = 0
    End If
    
    For j = 1 To c_maxFastPlc
        If plc_data(j).name <> "" Then
            If InStr(1, mc_data(i).name, plc_data(j).name) <> 0 Then
                strFast = "VAT_" + plc_data(j).name
                Worksheets(strFast).Cells(rowIdxVat(j), 1) = "// " + mc_data(i).name + ""
                Worksheets(strFast).Cells(rowIdxVat(j) + 1, 1) = "X_" + mc_data(i).name + "_IBN"
                Worksheets(strFast).Cells(rowIdxVat(j) + 2, 1) = "" + mc_data(i).name + ""
                Worksheets(strFast).Cells(rowIdxVat(j) + 3, 1) = "" + mc_data(i).name + "_OFF"
                rowIdxVat(j) = rowIdxVat(j) + 5
                Exit For
            End If
        Else
            Exit For
        End If
    Next j
Next i

'generate VAT_ESB
For i = 1 To c_maxEsb + c_maxAckb
    If input_data(i) = "" Then
        Exit For
    End If
    Worksheets("VAT_ESB").Cells(i, 1) = input_data(i)
Next i

'generate symbolic for safety plc
For i = 1 To c_maxFastPlc
    If plc_data(i).name <> "" Then
        Worksheets("Symb_ES").Cells(rowIdx, 1) = "F_HS_" + es_name + "_" + plc_data(i).name + ""
        Worksheets("Symb_ES").Cells(rowIdx, 2) = "DB " + Trim(Str(startNo_symb_hs + i)) + ""
        Worksheets("Symb_ES").Cells(rowIdx, 3) = "DB " + Trim(Str(startNo_symb_hs + i)) + ""
        Worksheets("Symb_ES").Cells(rowIdx, 4) = "handshake db for safety and plc communication"
        rowIdx = rowIdx + 1
        Worksheets("Symb_ES").Cells(rowIdx, 1) = "F_HS_" + es_name + "_" + plc_data(i).name + "_CYCL"
        Worksheets("Symb_ES").Cells(rowIdx, 2) = "FC " + Trim(Str(startNo_symb_hs + i)) + ""
        Worksheets("Symb_ES").Cells(rowIdx, 3) = "FC " + Trim(Str(startNo_symb_hs + i)) + ""
        Worksheets("Symb_ES").Cells(rowIdx, 4) = "handshake cylce for safety and plc communication"
        rowIdx = rowIdx + 1
        Worksheets("Symb_ES").Cells(rowIdx, 1) = "F_HS_" + es_name + "_" + plc_data(i).name + "_CYCL_P"
        Worksheets("Symb_ES").Cells(rowIdx, 2) = "FC " + Trim(Str(startNo_symb_hs + c_maxFastPlc + i)) + ""
        Worksheets("Symb_ES").Cells(rowIdx, 3) = "FC " + Trim(Str(startNo_symb_hs + c_maxFastPlc + i)) + ""
        Worksheets("Symb_ES").Cells(rowIdx, 4) = "project specific handshake cylce for safety and plc communication"
        rowIdx = rowIdx + 1
    End If
Next i

'generate symbolic for Cxx
For i = 1 To c_maxFastPlc
    If plc_data(i).name <> "" Then
        strFast = "Symb_" + plc_data(i).name
        Worksheets(strFast).Activate
        Columns("A:D").Select
        Selection.ClearContents
        rowIdx = 1
        For j = 3 To c_maxPjBit
            If InStr(1, Worksheets(plc_data(i).name).Cells(j, 1), "bit") <> 1 Then
                If InStr(1, Worksheets(plc_data(i).name).Cells(j, 1), "X_") <> 0 Then
                    Worksheets(strFast).Cells(rowIdx, 1) = Worksheets(plc_data(i).name).Cells(j, 1)
                    Worksheets(strFast).Cells(rowIdx, 2) = "M " + Trim(Str(merkerByte)) + "." + Trim(Str(merkerBit))
                    Worksheets(strFast).Cells(rowIdx, 3) = "BOOL"
                    Worksheets(strFast).Cells(rowIdx, 4) = Worksheets(plc_data(i).name).Cells(j, 2)
                    rowIdx = rowIdx + 1
                    merkerBit = merkerBit + 1
                    If merkerBit > 7 Then
                        merkerByte = merkerByte + 1
                        merkerBit = 0
                    End If
                Else
                    Worksheets(strFast).Cells(rowIdx, 1) = "X_" + Worksheets(plc_data(i).name).Cells(j, 1)
                    Worksheets(strFast).Cells(rowIdx, 2) = "M " + Trim(Str(merkerByte)) + "." + Trim(Str(merkerBit))
                    Worksheets(strFast).Cells(rowIdx, 3) = "BOOL"
                    Worksheets(strFast).Cells(rowIdx, 4) = Worksheets(plc_data(i).name).Cells(j, 2)
                    rowIdx = rowIdx + 1
                    merkerBit = merkerBit + 1
                    If merkerBit > 7 Then
                        merkerByte = merkerByte + 1
                        merkerBit = 0
                    End If
                End If
            End If
        Next
        
        
    End If
Next i
End Sub
Attribute VB_Name = "globale"
'global variables and constants

'constants
'###############################################################################
Public Const FileNr As Integer = 1              'Dateinummer zum Schreiben
Public Const c_maxEsPlc As Integer = 10           'maximal amount of es plc|fffd|s
Public Const c_maxFastPlc As Integer = 20         'maximal amount of normal plc|fffd|s
Public Const c_maxEsa As Integer = 64             'maximal amount of emergency stop areas
Public Const c_maxMc As Integer = 500             'maximal amount of main contactor
Public Const c_maxEsb As Integer = 500            'maximal amount of emergency stop buttons
Public Const c_maxAckb As Integer = 500           'maximal amount of acknowledge buttons
Public Const c_maxEsbPerEsa As Integer = 200      'maximal amount of emergency stop buttons per emergency stop area
Public Const c_maxAckbPerEsa As Integer = 200     'maximal amount of acknowledge buttons per emergency stop area
Public Const c_maxLvsPerFast As Integer = 10      'maximal amount of load voltage switch on per normal plc
Public Const c_maxPjBit As Integer = 100          'maximal amount of PJ bits

'types
'###############################################################################

'emergency stop buttons
Public Type esb_type
    name As String
    bv_name As String
    pn_add As String
    io_2 As String
    function As String
End Type

'acknowledge buttons
Public Type ackb_type
    name As String
    function As String
End Type
    
Public Type esa_type
    name As String
    own_esa As Boolean
    ext_ack As Integer
    count_esb As Integer
    count_ackb As Integer
    esb(c_maxEsbPerEsa) As esb_type
    ackb(c_maxAckbPerEsa) As ackb_type
End Type
    
Public Type mc_type
    name As String
    function As String
    loadVoltageName As String
    count_esa As Integer
    esa(c_maxEsa) As Integer
End Type

'plc data type
Public Type plc_type
    name As String
    loadVoltageName(c_maxLvsPerFast) As String
    count_lvs As Integer
End Type

'data array|fffd|s
'###############################################################################
Public plc_data(c_maxFastPlc) As plc_type
Public esa_data(c_maxEsa) As esa_type
Public mc_data(c_maxMc) As mc_type
Public esb_data(c_maxEsb) As esb_type
Public ackb_data(c_maxAckb) As ackb_type
Public input_data(c_maxEsb + c_maxAckb) As String
Attribute VB_Name = "poolfunction"
Option Explicit
Public Sub read_workbook(error As Boolean)

Dim i As Integer
Dim j As Integer
Dim k As Integer
Dim rowIdx As Integer
Dim colIdx As Integer
Dim esaIdx As Integer
Dim esa_esbIdx As Integer
Dim esbIdx As Integer
Dim esa_ackbIdx As Integer
Dim ackbIdx As Integer
Dim mcIdx As Integer
Dim inputIdx As Integer
Dim esb_function As String
Dim esb_string As String
Dim esb_bv_string As String
Dim esb_pn_string As String
Dim esb_io_2_string As String
Dim mc_string As String
Dim mc_load_voltage As String
Dim mc_function As String
Dim plc_blank As plc_type
Dim esa_blank As esa_type
Dim mc_blank As mc_type
Dim esb_blank As esb_type
Dim ackb_blank As ackb_type
Dim own_esPlc_name As String
Dim esPlc_name As String
Dim found As Boolean
Dim ownEsPlc_idx As Integer


'as default we have an error
error = True

'reset all data|fffd|s
For i = 1 To c_maxFastPlc
    plc_data(i) = plc_blank
Next i

For i = 1 To c_maxEsa
    esa_data(i) = esa_blank
Next i

For i = 1 To c_maxMc
    mc_data(i) = mc_blank
Next i

For i = 1 To c_maxEsb
    esb_data(i) = esb_blank
Next i

For i = 1 To c_maxAckb
    ackb_data(i) = ackb_blank
Next i

For i = 1 To c_maxEsb + c_maxAckb
    input_data(i) = ""
Next i

'own safety plc
own_esPlc_name = Worksheets("Settings").Cells(2, 2)
If own_esPlc_name = "" Then
    MsgBox "No safety plc name configured in cell B2"
    Worksheets("Settings").Cells(2, 2).Select
    Exit Sub
End If

'check if safety plc name is configured correct
found = False
For i = 1 To c_maxEsPlc
    rowIdx = i + 1
    esPlc_name = Worksheets("ES").Cells(rowIdx, 1)
    If esPlc_name <> "" Then
        If own_esPlc_name = esPlc_name Then
            'Own safety plc found in ES sheet
            found = True
            ownEsPlc_idx = i
            Exit For
        End If
    Else
        Exit For
    End If
Next i

'no safety plc configured in ES sheet
If found = False Then
    Worksheets("ES").Select
    Range(Cells(2, 1), Cells(11, 1)).Select
    MsgBox "Own safety plc " & own_esPlc_name & " is not configured in ES Sheet"
    Exit Sub
End If

'read own emergency stop area configuration
For i = 1 To c_maxEsa
    If i < 10 Then
        esa_data(i).name = "ESA_0" + Trim(Str(i))
    Else
        esa_data(i).name = "ESA_" + Trim(Str(i))
    End If
    rowIdx = ownEsPlc_idx + 1
    If Worksheets("ES").Cells(rowIdx, i + 1) <> "" Then
        esa_data(i).own_esa = True
    End If
Next i

'read external acknowledge for emergency stop area
For i = 1 To c_maxEsPlc
    rowIdx = i + 1
    If ownEsPlc_idx <> i Then
        esPlc_name = Worksheets("ES").Cells(rowIdx, 1)
        If esPlc_name <> "" Then
            For j = 1 To c_maxEsa
                If Worksheets("ES").Cells(rowIdx, j + 1) <> "" Then
                    If esa_data(j).own_esa = False Then
                        'todo text sauber machen
                        Worksheets("ES").Activate
                        Cells(rowIdx, j + 1).Select
                        MsgBox "You can|fffd|t deactivate this emergency area from this external safety plc without configured this emergency areo to your own plc"
                        Exit Sub
                    End If
                    
                    esa_data(j).ext_ack = True
                End If
            Next j
        Else
            Exit For
        End If
    End If
Next i

'read normal plc information|fffd|s
found = False
For i = 1 To c_maxFastPlc
    plc_data(i).name = Worksheets("Settings").Cells(3 + i, 2)
    If plc_data(i).name <> "" Then
        'normal plc configured
        found = True
        plc_data(i).count_lvs = 1
    End If
Next i

'no normal plc configured in settings sheet
If found = False Then
    MsgBox "No normal plc configured"
    Exit Sub
End If

'read emergency stop area informations
esbIdx = 1
ackbIdx = 1
inputIdx = 1
For i = 1 To c_maxEsa
    'set start column index
    colIdx = 4
    rowIdx = 2
    esa_esbIdx = 1
    esa_ackbIdx = 1
    Do
        esb_string = Worksheets("ESA").Cells(rowIdx, 4)
        esb_bv_string = Worksheets("ESA").Cells(rowIdx, 1)
        esb_pn_string = Worksheets("ESA").Cells(rowIdx, 2)
        esb_io_2_string = Worksheets("ESA").Cells(rowIdx, 3)
        If esb_string <> "" Then
            esb_function = Worksheets("ESA").Cells(rowIdx, colIdx + i)
            'check if the emergency / acknowledge button is allowed to work with this emergency area
            If esb_function <> "" And esa_data(i).own_esa = False Then
                Worksheets("ESA").Activate
                Cells(rowIdx, colIdx + i).Select
                MsgBox "This emergency stop area doesn|fffd|t belongs to the own safety plc"
                Exit Sub
            End If
            
            'emgergency button
            If esb_function = "x" Or esb_function = "n" Or esb_function = "n" Then
                esa_data(i).esb(esa_esbIdx).name = esb_string
                esa_data(i).esb(esa_esbIdx).function = esb_function
                esa_esbIdx = esa_esbIdx + 1
                If esa_esbIdx > c_maxEsbPerEsa Then
                    MsgBox "Too many emergency buttons per emergency area => increase const (c_maxEsbPerEsa)"
                    Exit Sub
                End If
                
                'save emergency button
                found = False
                For k = 1 To esbIdx
                    If esb_data(k).name = esb_string Then
                        found = True
                        Exit For
                    End If
                Next k
                If found = False Then
                    esb_data(esbIdx).name = esb_string
                    esb_data(esbIdx).bv_name = esb_bv_string
                    esb_data(esbIdx).pn_add = esb_pn_string
                    esb_data(esbIdx).io_2 = esb_io_2_string
                    esbIdx = esbIdx + 1
                    If esbIdx > c_maxEsb Then
                        MsgBox "Too many emergency buttons => increase const (c_maxEsb)"
                        Exit Sub
                    End If
                End If
            
            'acknowledge button
            ElseIf esb_function = "q" Then
                esa_data(i).ackb(esa_ackbIdx).name = esb_string
                esa_data(i).ackb(esa_ackbIdx).function = esb_function
                esa_ackbIdx = esa_ackbIdx + 1
                If esa_ackbIdx > c_maxAckbPerEsa Then
                    MsgBox "Too many acknowledge buttons per emergency area => increase const (c_maxAckbPerEsa)"
                    Exit Sub
                End If
            
                'save acknowledge button
                found = False
                For k = 1 To ackbIdx
                    If ackb_data(k).name = esb_string Then
                        found = True
                    End If
                Next k
                If found = False Then
                    ackb_data(ackbIdx).name = esb_string
                    ackbIdx = ackbIdx + 1
                    If ackbIdx > c_maxAckb Then
                        MsgBox "Too many acknowledge buttons => increase const (c_maxAckb)"
                        Exit Sub
                    End If
                End If
            
            'function not allowed
            ElseIf esb_function <> "" Then
                Worksheets("ESA").Activate
                Cells(rowIdx, colIdx + i).Select
                MsgBox "This function " & esb_function & " is not allowed"
                Exit Sub
            End If
            
            'save emergency button and acknowledge button for IBN call
            found = False
            For k = 1 To inputIdx
                If input_data(k) = esb_string Then
                    found = True
                End If
            Next k
            If found = False Then
                input_data(inputIdx) = esb_string
                inputIdx = inputIdx + 1
                If inputIdx > c_maxEsb + c_maxAckb Then
                    MsgBox "This error should never come"
                    Exit Sub
                End If
            End If
            
            rowIdx = rowIdx + 1
        End If
    Loop Until esb_string = ""
    esa_data(i).count_esb = esa_esbIdx - 1
    esa_data(i).count_ackb = esa_ackbIdx - 1
Next i

'read informations for main contactor
For i = 1 To c_maxMc
    rowIdx = 1 + i
    esaIdx = 1
    mc_string = Worksheets("MC").Cells(rowIdx, 2)
    mc_load_voltage = Worksheets("MC").Cells(rowIdx, 3)
    If mc_string <> "" Then
        mcIdx = 1
        'set start column index
        colIdx = 3
        For j = 1 To c_maxEsa
            mc_function = Worksheets("MC").Cells(rowIdx, colIdx + j)
            'emgergency button
            If mc_function = "x" Then
                mc_data(i).function = mc_function
                mc_data(i).esa(mcIdx) = j
                mcIdx = mcIdx + 1
            ElseIf mc_function <> "" Then
                Worksheets("MC").Activate
                Cells(rowIdx, colIdx + j).Select
                MsgBox "This function " & esb_function & " is not allowed"
                Exit Sub
            End If
            mc_data(i).name = mc_string
        Next j
        mc_data(i).count_esa = mcIdx - 1
        
        'save load voltage on switches
        If mc_load_voltage <> "" Then
            found = False
            If mc_load_voltage <> "VKE1" Then
                'we use an load voltage switch
                For j = 1 To c_maxFastPlc
                    If plc_data(j).name <> "" Then
                        If InStr(1, mc_load_voltage, plc_data(j).name) <> 0 Then
                            'search if this load voltage switch is a new one
                            For k = 1 To plc_data(j).count_lvs
                                If mc_load_voltage = plc_data(j).loadVoltageName(k) Then
                                    found = True
                                    Exit For
                                End If
                            Next k
                            'load voltage is new
                            If found = False Then
                                plc_data(j).loadVoltageName(plc_data(j).count_lvs) = mc_load_voltage
                                plc_data(j).count_lvs = plc_data(j).count_lvs + 1
                                If plc_data(j).count_lvs > c_maxLvsPerFast Then
                                    MsgBox "Too many ""load voltage on switches"" per plc => increase const (c_maxLvsPerFast)"
                                    Exit Sub
                                End If
                                'load voltage switch on saved
                                Exit For
                            Else
                                'load voltage switch is saved
                                Exit For
                            End If
                        End If
                    Else
                        Worksheets("MC").Activate
                        Cells(rowIdx, 3).Select
                        MsgBox "No correct plc configured for ""load voltage on switch"" """ & mc_load_voltage & """. Please enter VKE1 if you don|fffd|t need a ""load voltage switch""."
                        Exit Sub
                    End If
                Next j
            End If
            mc_data(i).loadVoltageName = mc_load_voltage
        Else
            MsgBox "Cell for load voltage on is empty for MC " & mc_string & ""
            Exit Sub
        End If
    Else
        Exit For
    End If
Next i

'all checks are ok
error = False

End Sub

Public Sub generate_src_folders()

Dim src_path As String
Dim es_name As String
Dim strPath_plc As String
Dim strFileName As String
Dim i As Integer

    src_path = Worksheets("Settings").Cells(1, 2)
    es_name = Worksheets("Settings").Cells(2, 2)
    
    strPath_plc = src_path + "\" + es_name
    
    'generate es plc folder
    If Dir(strPath_plc, vbDirectory) = "" Then
        MkDir (strPath_plc)
    
        strFileName = ".cvsignore"
        Open MakeFileName(strPath_plc, strFileName) For Output As #FileNr
        Close 1
    End If

    'generate plc folder
    For i = 1 To c_maxFastPlc
        If plc_data(i).name <> "" Then
            strPath_plc = src_path + "\" + plc_data(i).name
            If Dir(strPath_plc, vbDirectory) = "" Then
                MkDir (strPath_plc)
                strFileName = ".cvsignore"
                Open MakeFileName(strPath_plc, strFileName) For Output As #FileNr
                Close 1
            End If
        End If
    Next i
End Sub

Public Sub generate_pj_sheet()

Dim rowIdx As Integer
Dim fast_name As String
Dim fast_name_array(c_maxFastPlc) As String
Dim i As Integer
Dim j As Integer
Dim fast_count As Integer
Dim sheets_count As Integer
Dim sheet_name As String
Dim found As String

Worksheets("Settings").Activate
rowIdx = 4

' Check if plc|fffd|s ar configured
If Cells(rowIdx, 2) = "" Then
    MsgBox "No plc|fffd|s configured"
    Return
End If

'write configured plc|fffd|s names into fast array
i = 1
Do Until Cells(rowIdx, 2) = "" Or i >= c_maxFastPlc
    fast_name = Cells(rowIdx, 2)
    fast_name_array(i) = fast_name
    rowIdx = rowIdx + 1
    i = i + 1
Loop
fast_count = i - 1
    
'check sheets existing for the configured plc|fffd|s
sheets_count = Sheets.Count
For i = 1 To fast_count
    For j = 1 To sheets_count
        sheet_name = Sheets(j).name
        found = False
        If sheet_name = fast_name_array(i) Then
            'sheet for the plc exists
            found = True
            Exit For
        End If
    Next
    'add new sheet
    If found = False Then
        Sheets.Add before:=Sheets("internal")
        ActiveSheet.name = fast_name_array(i)
    
        'write headline and change the color
        Range("A1:B1").Select
        Selection.Merge
        Range("D1:E1").Select
        Selection.Merge
        
        Cells(1, 1) = "From ES to " & fast_name_array(i) & ""
        Cells(1, 4) = "From " & fast_name_array(i) & " to ES"
        Cells(2, 1) = "symbol"
        Cells(2, 4) = "symbol"
        Cells(2, 2) = "comment"
        Cells(2, 5) = "comment"
        Range("A1:B2").Select
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = -0.249977111117893
            .PatternTintAndShade = 0
        End With
        
        Selection.HorizontalAlignment = xlCenter
        
        Range("D1:E2").Select
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = -0.249977111117893
            .PatternTintAndShade = 0
        End With
        
        Selection.HorizontalAlignment = xlCenter
        
        'write default bit|fffd|s
        For j = 1 To 100
            Cells(2 + j, 1) = "bit" & j & ""
            Cells(2 + j, 4) = "bit" & j & ""
            Cells(2 + j, 2) = "reserve"
            Cells(2 + j, 5) = "reserve"
        Next
    End If
Next
End Sub

Public Sub generate_symb_sheet()

Dim rowIdx As Integer
Dim sheet_symb(c_maxFastPlc) As String
Dim sheet_vat(c_maxFastPlc) As String
Dim i As Integer
Dim j As Integer
Dim fast_count As Integer
Dim sheets_count As Integer
Dim sheet_name As String
Dim found As String

Worksheets("Settings").Activate
rowIdx = 4
    
' Check if plc|fffd|s ar configured
If Cells(rowIdx, 2) = "" Then
    MsgBox "No plc|fffd|s configured"
    Return
End If

'write configured plc|fffd|s names into fast array
i = 1
Do Until Cells(rowIdx, 2) = "" Or i >= c_maxFastPlc
    sheet_symb(i) = "Symb_" + Cells(rowIdx, 2)
    sheet_vat(i) = "VAT_" + Cells(rowIdx, 2)
    rowIdx = rowIdx + 1
    i = i + 1
Loop
fast_count = i - 1
    
sheets_count = Sheets.Count
For i = 1 To fast_count
    For j = 1 To sheets_count
        found = False
        If Sheets(j).name = "Symb_ES" Then
            'sheet for the plc exists
            found = True
            Exit For
        End If
    Next
    'add new sheet
    If found = False Then
        Sheets.Add before:=Sheets("internal")
        ActiveSheet.name = "Symb_ES"
        Exit For
    End If
Next

'check sheets existing for the configured plc|fffd|s
sheets_count = Sheets.Count
For i = 1 To fast_count
    For j = 1 To sheets_count
        sheet_name = Sheets(j).name
        found = False
        If sheet_name = sheet_symb(i) Then
            'sheet for the plc exists
            found = True
            Exit For
        End If
    Next
    'add new sheet
    If found = False Then
        Sheets.Add before:=Sheets("internal")
        ActiveSheet.name = sheet_symb(i)
    End If
Next

sheets_count = Sheets.Count
For i = 1 To fast_count
    For j = 1 To sheets_count
        found = False
        If Sheets(j).name = "VAT_ESB" Then
            'sheet for the plc exists
            found = True
            Exit For
        End If
    Next
    'add new sheet
    If found = False Then
        Sheets.Add before:=Sheets("internal")
        ActiveSheet.name = "VAT_ESB"
        Exit For
    End If
Next

'check sheets existing for the configured plc|fffd|s
sheets_count = Sheets.Count
For i = 1 To fast_count
    For j = 1 To sheets_count
        sheet_name = Sheets(j).name
        found = False
        If sheet_name = sheet_vat(i) Then
            'sheet for the plc exists
            found = True
            Exit For
        End If
    Next
    'add new sheet
    If found = False Then
        Sheets.Add before:=Sheets("internal")
        ActiveSheet.name = sheet_vat(i)
    End If
Next
End Sub




INQUEST-PP=macro
