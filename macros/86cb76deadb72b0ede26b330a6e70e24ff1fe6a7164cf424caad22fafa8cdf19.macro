Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Modul1"
'*******************************************************************************************
' St|fffd|cklistenvorlage f|fffd|r die Vorrichtungskonstruktion                           RAA2009-2011
' zum Import f|fffd|r Excel-Dateien aus CATIA Analyze - Bill of Material

' 0.99  21.02.2011 Neuausgabe
' 0.99a mit CAD-Link
' 0.99c div. Modifikationen
' 0.99e Pos.Nr. aus Spalte Number anstatt aus Dateinamen
' 1.00  erste allgemeine Ausgabe
' 1.10  Spalteninhalt nach Inhalt des 1.Zeichens unterschieden [A..Z][0..9][_]    10.10.2011
' 1.10  alle Inhalte zweisprachig angelegt                                        10.10.2011
' 2.0   Druckbereich wird vom Import gesetzt  Ausgabe in CDB                      13.10.2011
' 2.0a  Meldung wenn Kundendateinamen keinen Index enth|fffd|lt (ExtrBenenn)           20.10.2011
' 2.1   Meldung wenn STL-Anfang nicht gefunden werden kann                        03.12.2013
' 2.1   Aufruf der Tabelle aus CATIA ge|fffd|ndert von Namen auf Index                 03.12.2013
' 2.1a  CAD-Dok Linkanzeige mit Angabe des Index                                  29.04.2014
' 2.2   Umstellung auf HTML                                                       07.11.2016
'*******************************************************************************************

Option Base 1
Dim STLFileName As Variant                               ' Dateiname der Import-Datei
Dim STLSheet As String
Dim STLWorkBook As Workbook
Dim STLWorkBookname As String
Dim Zeile As String
Dim dummy As Variant
Dim ExcelVer As String                                   ' Excel-Version der Office Umgebung
Dim CurAssyName As String                                ' Name der Unterbaugruppe aus CATIA Liste
Dim CurPLRow As Integer                                  ' Aktuelle Zeile in der ZielSTL
Dim PrgN As String                                       ' Programmname
Dim DruckBerStr As String                                ' Druckbereich als String
Public ActionCode As Integer                             ' zur Unterteilung der Aktivit|fffd|ten der Sub STL()
Public deutsch As Boolean                                ' Spracheinstellung
Public Msg1, Msg2, Msg3, Msg4, Msg5 As String            ' Resourcen- und Meldetexte
Public Msg6, Msg7, Msg8, Msg10 As String                 ' Resourcen- und Meldetexte
Public Msg11, Msg12 As String                            ' Resourcen- und Meldetexte
Public SK1, SK2, SK3, SK4 As String
Dim fnam, fcol, fprp, fsze As Variant                    ' Fontattribute Name,Farbe,Stil,Gr|fffd||fffd|e
Const Std_Dir = "C:\CIMDatabase\temp\cdb_work"           ' Standard-CDB Work Verzeichnis
Public Const StartSpalte As Integer = 1                  ' erste Zelle (Spalte)
Public Const StartZeile As Integer = 12                  ' erste Zelle (Zeile)
Const StartZeileInBOM As Integer = 2                     ' Differenz zum ersten Eintrag in STL
Const StartKeywordInBOM As String = "Bill of Material"   ' Zeile St|fffd|cklistenbeginn in STL
Const SF_Name_r = 3                                      ' Schriftfeld Name Reihe
Const SF_Name_s = 8                                      ' Schriftfeld Name Spalte
Const SF_Datum_r = 3                                     ' Schriftfeld Datum Reihe
Const SF_Datum_s = 7                                     ' Schriftfeld Datum Spalte
Const LetzteSpalte As Integer = 14                       ' Integer der |fffd|u|fffd|erst rechten Spalte
'Const CADLinkPre As String = "cdb:byname/classname/model/CDB_View/batch?zeichnung.z_nummer="
Const CADLinkPre As String = "cdb:byname/opname/lk_url_redirect?id=docsearch_max_idx&index=highest&z_nummer="
Const CADLinkAdd As String = "&zeichnung.z_index="
Public Const Vers As String = "2.2"

Const btn1_d = " STL einlesen"
Const btn1_e = " read PartList"
Const btn4_d = " SF ausf|fffd|llen"
Const btn4_e = " fill Title block"
Const btn5_d = "ENDE"
Const btn5_e = "QUIT"
Const btn6_d = "Rahmen zeichnen"
Const btn6_e = "draw frame"
Const btn7_d = "Inhalt l|fffd|schen"
Const btn7_e = "delete contents"
Const btn8_d = "Rahmen l|fffd|schen"
Const btn8_e = "delete frame"
Const frm1_d = "Zeilen bearbeiten"
Const frm1_e = "modify row"
Const lbl4_d = "von"
Const lbl4_e = "from"
Const lbl5_d = "bis"
Const lbl5_e = "to"

Const Msg1_d = "Dieses Feld darf nicht leer sein"
Const Msg1_e = "This field must not be empty"
Const Msg2_d = "Fehler"
Const Msg2_e = "Error"
Const Msg3_d = "Der Wert VON darf nicht gleich oder gr|fffd||fffd|er als BIS sein!"
Const Msg3_e = "The value FROM should not be larger then TO!"
Const Msg4_d = "Der minimale Wert f|fffd|r VON ist "
Const Msg4_e = "The minimal value for FROM is "
Const Msg5_d = "Der Wert VON darf nicht kleiner sein als "
Const Msg5_e = "The value FROM should not be lower than "
Const Msg6_d = "Dieses Makro l|fffd|uft nicht mit Excel 97 oder |fffd|lteren Versionen"
Const Msg6_e = "This macro does|fffd|n run under Excel97 or older versions "
Const Msg7_d = "In dieser Arbeitsmappe ist schon eine zus|fffd|tzliche Tabelle enthalten"
Const Msg7_e = "In this workbook is already included an additional table"
Const Msg8_d = "STL einlesen vom Benuter abgebrochen"
Const Msg8_e = "Import Part List aborted by user"
Const Msg9 = "Information"
Const Msg10_d = "Wollen Sie diese Datei einlesen: "
Const Msg10_e = "Do you want to import: "
Const Msg11_d = "Der BOM-Anfang konnte nicht gefunden werden!"
Const Msg11_e = "The BOM-Start couldn|fffd|t be found!"
Const Msg12_d = "M|fffd|glicherweise ist die BOM-Datei leer."
Const Msg12_e = "Maybe the BOM-File is empty."


Const PrgN_d = "LK Betriebsmittel STL JIG"
Const PrgN_e = "LK Equipment PartList JIG"

Const SK1_d = "St|fffd|ckliste"                                        ' Textinhalte des St|fffd|cklistenkopfes
Const SK1_e = "Part List"
Const SK2_d = "Stck."
Const SK2_e = "Qty."
Const SK3_d = "Benennung"
Const SK3_e = "Description"
Const SK4_d = "Fertigungsma|fffd|e, Norm, Kurzbezeichnung, Beschichtung"
Const SK4_e = "product dimensions, standard, short Descr., Surf. treatment"
Const SK5_d = "Oberfl|fffd|che"
Const SK5_e = "Surface"
Const SK6_d = "Werkstoff"
Const SK6_e = "Material"
Const SK7_d = "H|fffd|rte"
Const SK7_e = "Hardness"
Const SK8_d = "Zeichnungs"
Const SK8_e = "Drawing"
Const SK9_d = "Datum"
Const SK9_e = "Date"
Const SK10_d = "|fffd|nderung"
Const SK10_e = "Change"
Const SK11_d = "|fffd|.I."
Const SK11_e = "R.L."
Const SK12_d = "-Nr."
Const SK12_e = "-No."
Const SK13_d = "Blatt"
Const SK13_e = "Page"
Const SK14_d = "bearb."
Const SK14_e = "drawn"
Const SK15_d = "gepr."
Const SK15_e = "checked"
Const SK16_d = "Norm"
Const SK16_e = "Standard"
Const SK17_d = "Artikel"
Const SK17_e = "Article"


Private Sub SetUp_BomHeader()
' |fffd|ndert die Texte des STL-Kopfes auf die lokale Sprache
If deutsch Then Tabelle1.Cells(1, 1) = SK1_d Else Tabelle1.Cells(1, 1) = SK1_e
If deutsch Then Tabelle1.Cells(11, 2) = SK2_d Else Tabelle1.Cells(11, 2) = SK2_e
If deutsch Then Tabelle1.Cells(11, 3) = SK3_d Else Tabelle1.Cells(11, 3) = SK3_e
If deutsch Then Tabelle1.Cells(11, 4) = SK4_d Else Tabelle1.Cells(11, 4) = SK4_e
If deutsch Then Tabelle1.Cells(11, 9) = SK5_d Else Tabelle1.Cells(11, 9) = SK5_e
If deutsch Then Tabelle1.Cells(11, 10) = SK6_d Else Tabelle1.Cells(11, 10) = SK6_e
If deutsch Then Tabelle1.Cells(11, 11) = SK7_d Else Tabelle1.Cells(11, 11) = SK7_e
If deutsch Then Tabelle1.Cells(11, 12) = SK8_d & SK12_d Else Tabelle1.Cells(11, 12) = SK8_e & SK12_e
If deutsch Then Tabelle1.Cells(2, 7) = SK9_d Else Tabelle1.Cells(2, 7) = SK9_e
If deutsch Then Tabelle1.Cells(10, 4) = SK9_d Else Tabelle1.Cells(10, 4) = SK9_e
If deutsch Then Tabelle1.Cells(10, 2) = SK10_d Else Tabelle1.Cells(10, 2) = SK10_e
If deutsch Then Tabelle1.Cells(10, 1) = SK11_d Else Tabelle1.Cells(10, 1) = SK11_e
If deutsch Then Tabelle1.Cells(3, 9) = SK3_d Else Tabelle1.Cells(3, 9) = SK3_e
If deutsch Then Tabelle1.Cells(7, 9) = SK1_d & SK12_d Else Tabelle1.Cells(7, 9) = SK1_e & SK12_e
If deutsch Then Tabelle1.Cells(7, 13) = SK13_d Else Tabelle1.Cells(7, 13) = SK13_e
If deutsch Then Tabelle1.Cells(3, 6) = SK14_d Else Tabelle1.Cells(3, 6) = SK14_e
If deutsch Then Tabelle1.Cells(4, 6) = SK15_d Else Tabelle1.Cells(4, 6) = SK15_e
If deutsch Then Tabelle1.Cells(5, 6) = SK16_d Else Tabelle1.Cells(5, 6) = SK16_e
If deutsch Then Tabelle1.Cells(2, 9) = SK17_d & SK12_d Else Tabelle1.Cells(2, 9) = SK17_e & SK12_e
End Sub


Private Sub SetUp_Language()
' setzt die Texte der Resourcen auf die gew|fffd|hlte Sprache
 If deutsch Then UserForm1.CommandButton1.Caption = btn1_d Else UserForm1.CommandButton1.Caption = btn1_e
 If deutsch Then UserForm1.CommandButton4.Caption = btn4_d Else UserForm1.CommandButton4.Caption = btn4_e
 If deutsch Then UserForm1.CommandButton5.Caption = btn5_d Else UserForm1.CommandButton5.Caption = btn5_e
 If deutsch Then UserForm1.CommandButton6.Caption = btn6_d Else UserForm1.CommandButton6.Caption = btn6_e
 If deutsch Then UserForm1.CommandButton7.Caption = btn7_d Else UserForm1.CommandButton7.Caption = btn7_e
 If deutsch Then UserForm1.CommandButton8.Caption = btn8_d Else UserForm1.CommandButton8.Caption = btn8_e
 If deutsch Then UserForm1.Frame1.Caption = frm1_d Else UserForm1.Frame1.Caption = frm1_e
 If deutsch Then UserForm1.Label4.Caption = lbl4_d Else UserForm1.Label4.Caption = lbl4_e
 If deutsch Then UserForm1.Label5.Caption = lbl5_d Else UserForm1.Label5.Caption = lbl5_e
 If deutsch Then Msg1 = Msg1_d Else Msg1 = Msg1_e
 If deutsch Then Msg2 = Msg2_d Else Msg2 = Msg2_e
 If deutsch Then Msg3 = Msg3_d Else Msg3 = Msg3_e
 If deutsch Then Msg4 = Msg4_d Else Msg4 = Msg4_e
 If deutsch Then Msg5 = Msg5_d Else Msg5 = Msg5_e
 If deutsch Then Msg6 = Msg6_d Else Msg6 = Msg6_e
 If deutsch Then Msg7 = Msg7_d Else Msg7 = Msg7_e
 If deutsch Then Msg8 = Msg8_d Else Msg8 = Msg8_e
 If deutsch Then Msg10 = Msg10_d Else Msg10 = Msg10_e
 If deutsch Then Msg11 = Msg11_d Else Msg11 = Msg11_e
 If deutsch Then Msg12 = Msg12_d Else Msg12 = Msg12_e
 If deutsch Then UserForm1.Caption = PrgN_d & "   " & Vers Else UserForm1.Caption = PrgN_e & "   " & Vers
 If deutsch Then
  UserForm1.Image1.Visible = False
  UserForm1.Image2.Visible = True
 Else
  UserForm1.Image1.Visible = True
  UserForm1.Image2.Visible = False
 End If
 SetUp_BomHeader
End Sub


Public Sub STL()
 If ActionCode = 1 Then                            ' Sprachumschaltung aus der Userform
  SetUp_Language
  Exit Sub
 End If
 ExcelVer = Application.Version                    ' Excel-Version
 '***** Excel Versionen *******
 '  8 = Excel 97
 '  9 = Excel 2000
 ' 10 = Excel 2002/XP
 ' 11 = Excel 2003
 ' 12 = Excel 2007
 If Val(ExcelVer) < 9 Then
  MsgBox Msg6
  Exit Sub
 End If
 ' wenn WIN in deutsch, dann Userform in deutsch sonst englich
 If Application.International(1) = "49" Then deutsch = True Else deutsch = False
 SetUp_Language

 STLWorkBookname = ThisWorkbook.Name
 STLSheet = ActiveSheet.Name
 If Worksheets.Count > 1 Then
  dummy = MsgBox(Msg7, vbOKOnly, Msg2)
 Else
  UserForm1.Show
 End If
End Sub


Function OpenFile()
' Feststellen der Fontparameter
 Cells(StartZeile, StartSpalte).Select
 fnam = ActiveCell.Font.Name
 fcol = ActiveCell.Font.Color
 fprp = ActiveCell.Font.FontStyle
 fsze = ActiveCell.Font.Size
 ' Button STL Import
 ChDrive "C"
 ChDir Std_Dir
 Dim fd As FileDialog
 Set fd = Application.FileDialog(msoFileDialogFilePicker)
 fd.Filters.Clear
 fd.Filters.Add "HTML Dateien", "*.htm*"
 'fd.Filters.Add "Excel Dateien", "*.xls"
 If fd.Show = -1 Then
  STLFileName = fd.SelectedItems.Item(1)
 Else
  MsgBox ("Keine Datei gew|fffd|hlt")
 End If
 If STLFileName <> "" Then
  dummy = MsgBox(Msg10 + STLFileName + " ?", vbOKCancel, Msg9)
  If dummy = vbCancel Then DoNothing Else ReadBom
 End If
End Function


Private Function ExtrIdx(ByVal FN As String) As String
 ' extrahiere Index
 Dim pos As Integer
 Dim hilf As String
 hilf = FN
 pos = InStrRev(hilf, "-", -1, vbTextCompare)
 If pos > 0 Then
  hilf = Right(hilf, Len(hilf) - pos + 1)
 Else
  hilf = ""
 End If
 ExtrIdx = hilf
End Function


Private Function ExtractFileName(ByVal FN As String, oPath As Boolean, oExt As Boolean) As String
 ' schneidet bei oPath = true den Dateipfad ab / schneidet bei oExt  = true die Fileextension ab
 Dim pos As Integer
 Dim hilf As String
 hilf = FN
 If oExt = True Then
  ' Extention abscheiden
  pos = InStrRev(hilf, ".", -1, vbTextCompare)
  If pos <> 0 Then hilf = Left(hilf, pos - 1)
 End If
 If oPath = True Then
  ' Pfad abschneiden
  For i = 1 To Len(hilf)
   pos = InStr(1, hilf, "\")
   If pos <> 0 Then
    hilf = Right(hilf, Len(hilf) - pos)
   Else
    Exit For
   End If
  Next i
 End If
 ExtractFileName = hilf
End Function


Private Function Komma2Punkt(ByVal InWord As String) As String
' wandelt das erste Komma im String in einen Punkt (f|fffd|r Werkstoff)
Dim pos As Integer
Dim hilf As String
Dim WstSfx As String ' Werkstoff Suffix
Dim i As Integer
hilf = Trim(InWord)

If hilf <> "" Then
 pos = InStr(1, hilf, ",", vbTextCompare)
 If pos > 0 Then
  WstSfx = Right(hilf, Len(hilf) - pos)
  If Len(WstSfx) < 4 Then    ' wenn die L|fffd|nge des Suffix kleiner 4 ist
   For x = 1 To 4 - Len(WstSfx)
    WstSfx = WstSfx & "0"
   Next x
  End If
  Komma2Punkt = Left(hilf, pos - 1) & "." & WstSfx
 Else
  Komma2Punkt = hilf
 End If
End If
End Function


Private Sub ReadBom()
' bereitet die CATIA BOM auf und kopiert die Inhalte in die St|fffd|ckliste
Dim AktZeile, i As Integer
Dim StartRow, EndRow, Delta, RowCount As Integer
Dim found As Boolean
Dim ToolNr As String

Workbooks.Open STLFileName
 
Sheets(1).Select                                                           ' nimm die erste Tabelle
MsgBox (Sheets(1).Name)
Sheets(1).Move after:=Workbooks(STLWorkBookname).Sheets(1)                 ' h|fffd|nge sie an die STL an
Sheets(2).Name = "FromCATIA"                                               ' benenne sie um
Tabelle1.Select                                                            ' aktiviere die STL-Tabelle
i = 1
While Not InStr(Sheets("FromCATIA").Cells(i, 1), StartKeywordInBOM) = 1    ' r|fffd|cke vor bis StartKeyWord
 i = i + 1
 If i > 32000 Then
  MsgBox Msg11 & vbCr & Msg12, vbCritical, "Fehler"
  Sheets("FromCATIA").Select                                               ' aktiviere die Tabelle von CATIA
  Application.SendKeys ("{ENTER}")                                         ' best|fffd|tige die Frage mit ENTER
  ActiveSheet.Delete                                                       ' l|fffd|sche die Tabelle von CATIA
  Exit Sub
 End If
Wend
ToolNr = ExtrToolNr(Sheets("FromCATIA").Cells(i, 1))                       ' speichere die BM-Nr / Tool-Nr
Tabelle1.Cells(3, 10) = ExtrBenenn(Sheets("FromCATIA").Cells(i, 1), 1)     ' St|fffd|cklisten-Nr.
Tabelle1.Cells(8, 13) = ExtrPos(Sheets("FromCATIA").Cells(i, 1)) & ExtrIdx(Sheets("FromCATIA").Cells(i, 1))  ' Blatt

CurPLRow = StartZeile
i = i + StartZeileInBOM
While Sheets("FromCATIA").Cells(i, 3) <> ""                                ' arbeite alle Quellzeilen ab bis zur 1. Leerzeile
 Copy_PL_Row CurPLRow, i                                                   ' kopiere eine Zeile aus CATIA in die STL
 i = i + 1                                                                 ' r|fffd|cke eine Zeile weiter
Wend
' setze den Druckbereich auf die letzte Zeile
DruckBerStr = "$A$1:$M$" & CStr(CurPLRow - 1)
ActiveSheet.PageSetup.PrintArea = DruckBerStr
Decorate_Material
'Debug.Print DruckBerStr
'Debug.Print CurPLRow
 
Sheets("FromCATIA").Select                                                 ' aktiviere die Tabelle von CATIA
Application.SendKeys ("{ENTER}")                                           ' best|fffd|tige die Frage mit ENTER
ActiveSheet.Delete                                                         ' l|fffd|sche die Tabelle von CATIA
Sheets(STLSheet).Name = ToolNr                                             ' Tabelle nach BM Nr. umbenennen
Tabelle1.Cells(8, 9) = ToolNr                                              ' St|fffd|cklisten-Nr = BM Nr.
End Sub


Private Sub Copy_PL_Row(ByVal ZielZeile, QuellZeile As Integer)
' kopiere eine St|fffd|cklistenzeile (PL-Row)
Dim HCol As Integer
Dim LinkText As String
Dim bm As Integer         ' 1. Zeichen in der Quellzeile "Beginnt Mit"
Dim KuDatNam As String

KuDatNam = ExtractFileName(Sheets("FromCATIA").Cells(QuellZeile, 5), True, True)
bm = Asc(Left(KuDatNam, 1))
If bm = 95 Then Exit Sub                                                                ' wenn der KDN mit einem _ beginnt dann |fffd|berspringen
If CheckForBM_Nummer(KuDatNam) = False Then Exit Sub                                    ' wenn der KDN keinen _ hat dann |fffd|berspringen
' Linktext abh|fffd|ngig von dem Inhalt des Kundendateinamen
' beginnt mit Ziffer, dann normaler STL-Eintrag
' beginnt mit _, dann kein Eintrag
' beginnt mit [A..Z], dann "o.Z."

Select Case bm
Case 69
 If Left(KuDatNam, 3) = "EQJ" Then
  Tabelle1.Cells(ZielZeile, 3) = ExtrBenenn(Sheets("FromCATIA").Cells(QuellZeile, 5), 1)
  Tabelle1.Cells(ZielZeile, 4) = Sheets("FromCATIA").Cells(QuellZeile, 6)                ' Rohma|fffd|e = Revision
  LinkText = ExtrBMNumber(KuDatNam) & "_" & ExtrPos(KuDatNam) & ExtrIdx(KuDatNam)
 End If
Case 48 To 57:                                                                          ' ZIFFER
 Tabelle1.Cells(ZielZeile, 3) = ExtrBenenn(Sheets("FromCATIA").Cells(QuellZeile, 5), 1) ' Benenn
 Tabelle1.Cells(ZielZeile, 4) = Sheets("FromCATIA").Cells(QuellZeile, 6)                ' Rohma|fffd|e = Revision
 LinkText = ExtrBMNumber(KuDatNam) & "_" & ExtrPos(KuDatNam) & ExtrIdx(KuDatNam)        ' Text in der STL-Spalte f. CAD-Dok-Link
Case 65 To 90:                                                                          ' BUCHSTABE
 Tabelle1.Cells(ZielZeile, 3) = ExtrBenenn(Sheets("FromCATIA").Cells(QuellZeile, 5), 3) ' Benenn
 Tabelle1.Cells(ZielZeile, 4) = ExtrBenenn(Sheets("FromCATIA").Cells(QuellZeile, 5), 4) ' Benennungsrest
 LinkText = "o.Z."                                                                      ' Text in der STL-Spalte f. CAD-Dok-Link
End Select
' konstante Inhalte
Tabelle1.Cells(ZielZeile, 1) = Sheets("FromCATIA").Cells(QuellZeile, 1)                 ' Pos-Nr
Tabelle1.Cells(ZielZeile, 2) = Sheets("FromCATIA").Cells(QuellZeile, 2)                 ' St|fffd|ckzahl
Tabelle1.Cells(ZielZeile, 9) = Trim(Sheets("FromCATIA").Cells(QuellZeile, 7))           ' Oberfl|fffd|che = Definition
Tabelle1.Cells(ZielZeile, 10) = Komma2Punkt(Sheets("FromCATIA").Cells(QuellZeile, 8))   ' Werkstoff = Nomentklature
Tabelle1.Cells(ZielZeile, 11) = Trim(Sheets("FromCATIA").Cells(QuellZeile, 9))          ' H|fffd|rte = Description
' Erstellung des CAD-Dok-Links
CadDokLink Sheets("FromCATIA").Cells(QuellZeile, 3), Sheets("FromCATIA").Cells(QuellZeile, 4), LinkText, ZielZeile, 12
Decorate_Row CurPLRow
CurPLRow = CurPLRow + 1
End Sub


Private Function CheckForBM_Nummer(ByVal Param As String) As Boolean
 Dim hilf As String
 Dim pos As Integer
 hilf = Trim(Param)
 If hilf <> "" Then
  pos = InStr(1, hilf, "_", vbTextCompare)
 Else
  CheckForBM_Nummer = False
 End If
 If pos > 0 Then CheckForBM_Nummer = True Else CheckForBM_Nummer = False
End Function


Private Sub Search_Sub_PartList(ByVal SubAssy As String, StartFrom As Integer)
 ' wertet die Unterst|fffd|cklisten aus / nicht aktiv!!!
 Dim r As Integer
 Dim SearchFor As String
 r = StartFrom
 SearchFor = ExtractFileName(SubAssy, False, True)
 While InStr(1, Sheets("FromCATIA").Cells(r, 1), SearchFor, vbTextCompare) = 0
 r = r + 1
 Wend
 r = r + StartZeileInBOM
 While Sheets("FromCATIA").Cells(r, 1) <> ""
  Copy_PL_Row CurPLRow, r
  r = r + 1
 Wend
End Sub


Private Function ExtrToolNr(ByVal Param As String) As String
' extrahiert die Werkzeugnummer
Dim von, bis, lng As Integer
Dim hilf As String
hilf = Trim(Param)
If hilf <> "" Then
 hilf = Param
 von = InStr(1, hilf, ":", vbTextCompare)
 bis = InStr(1, hilf, "_", vbTextCompare)
 hilf = Mid(hilf, von + 1, bis - von - 1)
 ExtrToolNr = Trim(hilf)
End If
End Function


Private Function ExtrPos(ByVal Param As String) As String
' extrahiert die Positionsnummer aus dem CATIA Dateinamen
Dim hilf As String
Dim pos As Integer
 hilf = ""
 hilf = Trim(Param)
 pos = InStr(1, hilf, "_", vbTextCompare)
 hilf = Right(hilf, Len(hilf) - pos)
 pos = InStr(1, hilf, "_", vbTextCompare)
 If pos = 0 Then
  hilf = Left(hilf, 3)
 Else
  hilf = Left(hilf, pos - 1)
 End If
 ExtrPos = hilf
End Function


Private Function ExtrBenenn(ByVal Param As String, Typ As Integer) As String
' extrahiert die Benennung aus dem CATIA Dateinamen
' Typ1 = KDN (Kundendateiname) hat Ziffer am Anfang
' Typ2 = KDN hat Unterstrich am Anfang z.Z nicht in STL
' Typ3 = KDN hat Buchstaben am Anfang
' Typ4 = Benennungsrest von Typ3
Dim hilf As String
Dim pos, BnLen As Integer
hilf = LTrim(RTrim(Param))
If Typ = 1 Then
 pos = InStr(1, hilf, "_", vbTextCompare)
 hilf = Right(hilf, Len(hilf) - pos)
 pos = InStr(1, hilf, "_", vbTextCompare)
 hilf = Right(hilf, Len(hilf) - pos)
 pos = InStr(1, hilf, "-", vbTextCompare)
 If pos > 0 Then hilf = Left(hilf, pos - 1) Else MsgBox "Die Komponente " & Param & " hat keinen Index", vbCritical, "Fehler"
End If
If Typ = 3 Then
 pos = InStr(1, hilf, "_", vbTextCompare)
 hilf = Left(hilf, pos - 1)
End If
If Typ = 4 Then
 pos = InStr(1, hilf, "_", vbTextCompare)
 hilf = Right(hilf, Len(hilf) - pos)
 hilf = ExtractFileName(hilf, True, True)
 While PosOfIndex(hilf) > 0
  hilf = Left(hilf, PosOfIndex(hilf) - 1)
 Wend
End If
 ExtrBenenn = Trim(hilf)
End Function


Private Function PosOfIndex(ByVal KFileName As String) As Integer
' stellt fest ob die letzten Zeichen einem CAD-Dokumentenidex entsprechen
' gibt die Stelle des 1.Zeichens des Index zur|fffd|ck
' gibt einen negativen Wert zur|fffd|ck im Fehlerfalle
 Dim last As Integer   ' letzte Stelle
 Dim DVar As Integer   ' Designvariante
 Dim Ind_1 As Integer  ' 1. Stelle des Index
 Dim Ind_2 As Integer  ' 2. Stelle des Index
 Dim Ind_3 As Integer  ' 3. Stelle des Index
 Dim Ind_4 As Integer  ' 4. Stelle des Index
 Dim BS As String      ' Bindestrich
 Dim FS As Integer     ' Fehlerspeicher
 FS = 0
 last = Len(KFileName)
 'ist die letzte Stelle ein Buchstabe = Designvariante
 DVar = Asc(Mid(KFileName, last, 1))
 If (DVar < 65) Or (DVar > 90) Then FS = -1
 ' ist die vorletzte Stelle eine Ziffer = Index 4.Stelle
 Ind_4 = Asc(Mid(KFileName, last - 4, 1))
 If (Ind_4 < 48) Or (Ind_4 > 57) Then FS = FS - 1
 ' ist die drittletzte Stelle eine Ziffer = Index 3.Stelle
 Ind_3 = Asc(Mid(KFileName, last - 3, 1))
 If (Ind_3 < 48) Or (Ind_3 > 57) Then FS = FS - 1
 ' ist die viertletzte Stelle eine Ziffer = Index 2.Stelle
 Ind_2 = Asc(Mid(KFileName, last - 2, 1))
 If (Ind_2 < 48) Or (Ind_2 > 57) Then FS = FS - 1
 ' ist die f|fffd|nftletzte Stelle eine Ziffer = Index 1.Stelle
 Ind_1 = Asc(Mid(KFileName, last - 1, 1))
 If (Ind_1 < 48) Or (Ind_1 > 57) Then FS = FS - 1
 ' ist die sechstletzte Stelle ein Bindestrich
 If (Mid(KFileName, last - 5, 1) <> "-") Then FS = FS - 1
 If FS <> 0 Then PosOfIndex = FS Else PosOfIndex = last - 5
End Function


Private Function ExtrBMNumber(ByVal Param As String) As String
' extrahiert die BM-Nummer aus dem CATIA Dateinamen
Dim hilf As String
Dim pos As Integer
hilf = LTrim(RTrim(Param))
pos = InStr(1, hilf, "_", vbTextCompare)
hilf = Left(hilf, pos - 1)
ExtrBMNumber = hilf
End Function


Private Function ExtrDokExt(ByVal Param As String) As String
' wird von CADDokLink aufgerufen
Dim hilf As String
Dim pos, StrLng As Integer
 hilf = Param
 StrLng = Len(hilf)
 pos = InStr(hilf, "-")
 ExtrDokExt = Right$(hilf, StrLng - pos)
End Function


Private Sub CadDokLink(CADDokNr, CADDokIx, CADLink As String, Row, Col As Integer)
' erzeugt den Hyperlink zum CAD-Dokument
Dim Dlink As String
 If Trim(CADDokNr) <> "" Then
  Dlink = CADLinkPre & Trim(CADDokNr) & CADLinkAdd & Trim(CADDokIx)
  Tabelle1.Cells(Row, Col).Select
  ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:=Dlink, TextToDisplay:=CADLink
 Else
  Cells(Row, Col).Select
  ActiveCell.Hyperlinks.Delete
  ActiveCell.Clear
 End If
End Sub


Private Sub DoNothing()
' Benutzer hat keine Datei gew|fffd|hlt
 dummy = MsgBox(Msg8, vbOKOnly, Msg9)
 End
End Sub


Sub decorate_BOM(ByVal FromRow, ToRow As String)
' zeichne den Zeilenrahmen von / bis
Dim x, fr, tr As Integer
fr = Val(FromRow)
tr = Val(ToRow)
If fr < tr Then
 For x = fr To tr
  Decorate_Row (x)
 Next x
End If
Cells(StartZeile, StartSpalte).Select
End Sub


Private Sub Decorate_Row(ByVal CurRow As Integer)
' zeichnet die Zellrahmen
 Call Decorate_Cells(CurRow, 1, 1, "L")
 Call Decorate_Cells(CurRow, 2, 2, "I")
 Call Decorate_Cells(CurRow, 3, 3, "I")
 Call Decorate_Cells(CurRow, 4, 7, "I")
 Call Decorate_Cells(CurRow, 8, 8, "I")
 Call Decorate_Cells(CurRow, 9, 9, "I")
 Call Decorate_Cells(CurRow, 10, 10, "I")
 Call Decorate_Cells(CurRow, 11, 11, "I")
 Call Decorate_Cells(CurRow, 12, 13, "R")
End Sub


Private Sub Decorate_Cells(ByVal Zeile, ColFrom, ColTo As Integer, CellPos As String)
 ' versieht eine Zelle mit einem Rahmen
 ' L = links / I = innen / R = rechts
 If ColTo - ColFrom = 0 Then Cells(Zeile, ColFrom).Select
 If ColTo - ColFrom > 0 Then Range(Cells(Zeile, ColFrom), Cells(Zeile, ColTo)).Select
 Selection.Borders(xlEdgeBottom).LineStyle = xlThin
 If CellPos = "L" Then Selection.Borders(xlEdgeLeft).Weight = xlMedium
 If CellPos = "I" Then
  Selection.Borders(xlEdgeLeft).Weight = xlHairline
  Selection.Borders(xlEdgeRight).Weight = xlHairline
 End If
 If CellPos = "R" Then Selection.Borders(xlEdgeRight).Weight = xlMedium
End Sub


Sub Delete_BOM(ByVal FromRow, ToRow As String)
' l|fffd|scht den Inhalt der Zeilen von FromRow bis ToRow
Dim x, fr, tr As Integer
fr = Val(FromRow)
tr = Val(ToRow)
If fr < tr Then
 For x = fr To tr
  Delete_Row (x)
 Next x
End If
Cells(StartZeile, StartSpalte).Select
End Sub


Private Sub Delete_Row(ByVal CurRow As Integer)
' l|fffd|scht den Inhalt einer Zeile
 Tabelle1.Cells(CurRow, 1) = ""
 Tabelle1.Cells(CurRow, 2) = ""
 Tabelle1.Cells(CurRow, 3) = ""
 Tabelle1.Cells(CurRow, 4) = ""
 Tabelle1.Cells(CurRow, 9) = ""
 Tabelle1.Cells(CurRow, 10) = ""
 Tabelle1.Cells(CurRow, 11) = ""
 Tabelle1.Cells(CurRow, 12) = ""
 Tabelle1.Cells(CurRow, 12).Hyperlinks.Delete
End Sub


Sub UnDecorate_BOM(ByVal FromRow, ToRow As String)
' l|fffd|sche den Zeilenrahmen von / bis
Dim x, fr, tr As Integer
fr = Val(FromRow)
tr = Val(ToRow)
If fr < tr Then
 For x = fr To tr
  UnDecorate_Cells x, 1, 13
 Next x
End If
Cells(StartZeile, StartSpalte).Select
End Sub


Private Sub UnDecorate_Cells(ByVal Zeile, ColFrom, ColTo As Integer)
 ' l|fffd|scht den Rahmen der Zellen von ColFrom bis ColTo der Zeile
 ' L = links / I = innen / R = rechts
 If ColTo - ColFrom = 0 Then Cells(Zeile, ColFrom).Select
 If ColTo - ColFrom > 0 Then Range(Cells(Zeile, ColFrom), Cells(Zeile, ColTo)).Select
 Selection.Borders(xlEdgeBottom).LineStyle = xlNone
 Selection.Borders(xlEdgeLeft).LineStyle = xlNone
 Selection.Borders(xlEdgeRight).LineStyle = xlNone
End Sub


Function Fuelle_Schriftfeld()
' erg|fffd|nzt das Schriftfeld mit User und Datum
 Tabelle1.Cells(SF_Datum_r, SF_Datum_s) = Left(Date, 10)
 Tabelle1.Cells(SF_Name_r, SF_Name_s) = Environ("USERNAME")
End Function


Private Sub Decorate_Material()
Dim hilfOld, HilfNew As String
Dim x As Integer
x = 0
While Tabelle1.Cells(StartZeile + x, 1).Value <> ""
If IsNumeric(Tabelle1.Cells(StartZeile + x, 10).Value) And Len(Tabelle1.Cells(StartZeile + x, 10).Value) = 5 Then
 hilfOld = Tabelle1.Cells(StartZeile + x, 10).Value
 HilfNew = ""
 HilfNew = Left(hilfOld, 1) & "." & Right(hilfOld, 4)
 Tabelle1.Cells(StartZeile + x, 10).Value = HilfNew
End If

x = x + 1

Wend
End Sub
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{E62BA4BD-72B7-40EB-AB5A-594B2BBE6992}{1302DD34-38A2-4347-9B93-CF21E06C7CA3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
 OpenFile   ' STL Datei einlesen
End Sub

Private Sub CommandButton4_Click()
 Fuelle_Schriftfeld ' schreibe Name und Datum ins Schriftfeld
End Sub

Private Sub CommandButton5_Click()
 UserForm1.Hide     ' beende Makro
 End
End Sub


Private Sub CommandButton6_Click()
 If TextBox1.Text = "" Then TextBox1.Text = Str(StartZeile)
 If TextBox2.Text = "" Then
  MsgBox Msg1, vbCritical, Msg2
  TextBox2.SetFocus
  Exit Sub
 End If
  If Val(TextBox1.Text) < StartZeile Then
  MsgBox Msg5 & StartZeile
  Exit Sub
 End If
 If Val(TextBox1.Text) >= Val(TextBox2.Text) Then MsgBox Msg3, vbCritical, Msg2
 If Val(TextBox1.Text) < StartZeile Then
  MsgBox Msg4 & StartZeile, vbCritical, Msg2
  Exit Sub
 End If
 Modul1.decorate_BOM TextBox1.Text, TextBox2.Text
End Sub


Private Sub CommandButton7_Click()
' Inhalt l|fffd|schen
 If TextBox1.Text = "" Then TextBox1.Text = StartZeile
 If TextBox2.Text = "" Then
  MsgBox Msg1, vbCritical, Msg2
  TextBox2.SetFocus
  Exit Sub
 End If
  If Val(TextBox1.Text) < StartZeile Then
  MsgBox Msg5 & StartZeile
  Exit Sub
 End If
 If Val(TextBox1.Text) >= Val(TextBox2.Text) Then MsgBox Msg3, vbCritical, Msg2
 If Val(TextBox1.Text) < StartZeile Then
  MsgBox Msg4 & StartZeile, vbCritical, Msg2
  Exit Sub
 End If
 Modul1.Delete_BOM TextBox1.Text, TextBox2.Text
End Sub


Private Sub CommandButton8_Click()
' Rahmen l|fffd|schen
 If TextBox1.Text = "" Then TextBox1.Text = StartZeile
 If TextBox2.Text = "" Then
  MsgBox Msg1, vbCritical, Msg2
  TextBox2.SetFocus
  Exit Sub
 End If
 If Val(TextBox1.Text) < StartZeile Then
  MsgBox Msg5 & StartZeile
  Exit Sub
 End If
 If Val(TextBox1.Text) >= Val(TextBox2.Text) Then MsgBox Msg3, vbCritical, Msg2
 If Val(TextBox1.Text) < StartZeile Then
  MsgBox "Der minimale Wert f|fffd|r VON ist " & StartZeile, vbCritical, Msg2
  Exit Sub
 End If
 Modul1.UnDecorate_BOM TextBox1.Text, TextBox2.Text
End Sub


Private Sub Image1_Click()
 deutsch = True
 Image1.Visible = False
 Image2.Visible = True
 ActionCode = 1
 Modul1.STL
End Sub


Private Sub Image2_Click()
 deutsch = False
 Image1.Visible = True
 Image2.Visible = False
 ActionCode = 1
 Modul1.STL
End Sub


Private Sub TextBox1_Change()
 If Val(TextBox1.Text) < StartZeile Then TextBox1.Text = StartZeile
End Sub

Private Sub userform_show()
'If Application.International(1) = "49" Then deutsch = True Else deutsch = False
' SetUp_Language
End Sub

Private Sub UserForm_Initialize()
 'deutsch = False   ' nur zum Test
End Sub


INQUEST-PP=macro
