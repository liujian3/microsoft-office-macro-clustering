Attribute VB_Name = "EstaPasta_de_trabalho"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module2"
Declare Function GetActiveWindow Lib "user32" () As Long
Declare Function GetFocus Lib "user32" () As Long
Declare Function GetWindowWord Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long) As Integer
Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Integer, ByVal lParam As Long) As Long
Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Declare Function ExtractIcon Lib "Shell32.dll" Alias "ExtractIconA" (ByVal hInst As Long, ByVal lpszExeFileName As String, ByVal nIconIndex As Long) As Long
Declare Function DestroyIcon Lib "user32" (ByVal hIcon As Long) As Long
Declare Function SetFocusAPI Lib "user32" Alias "SetFocus" (ByVal hwnd As Long) As Long
'
' API Constants
'
Global Const WM_SETICON = &H80
Global Const GWL_HINSTANCE = (-6)
Global Const GWL_STYLE = (-16)
Global Const WS_SYSMENU = &H80000
Public Const SM_CXICON = 11
Public Const SM_CYICON = 12
Public Const SM_CXSMICON = 49
Public Const SM_CYSMICON = 50

Const SW_SHOW = 5
'
' Various Windows Handles
'
Dim hPreviousXLMAINBigIcon As Long
Dim hPreviousXLMAINSmallIcon As Long
Dim hPreviousEXCEL9BigIcon As Long
Dim hPreviousEXCEL9SmallIcon As Long
Dim hNewIcon As Long
Dim hInstanceExcel As Integer
Dim hWndXLMAIN As Long
Dim hWndEXCEL9 As Long

Function SetPerceptorIcon() As Boolean
    Dim theIconSource As String
    Dim theIconIndex As Long
    Dim istat As Long
    Application.EnableEvents = False    'Coloquei aqui para evitar bug de falta de retorno de COMAdd-ins no Excel 2000

    theIconSource = ThisWorkbook.Path & "\Applicat.ico"
    ' can be any valid windows icon source(.EXE, .DLL, .ICO)

    theIconIndex = 0
    ' the index to the icon within the source
    ' If this index is 0, the ExtractIcon function
    ' returns the first icon in the source

    istat = SetNewIcon(theIconSource, theIconIndex) ' do the deed
    SetPerceptorIcon = True
End Function


'   A routine to change the standard Excel Icons
Function SetNewIcon(theIconSource As String, theIconIndex As Long) As Long
    Dim L As Long
    ' Get handle to active window (Classname XLMAIN).
    hWndXLMAIN = FindWindow("XLMAIN", Application.Caption)
    L = SetFocusAPI(hWndXLMAIN)
    hWndEXCEL9 = GetFocus()
    ' Getthe icon from the source
    hNewIcon = ExtractIcon(0, theIconSource, 0)
    SetNewIcon = hNewIcon                       ' return code from function
    If hNewIcon = Null Or hNewIcon = 1 Then
        ' 1 means invalid icon source, 0means no icons in source
        MsgBox "icon not found"
        GoTo TidyUp
    End If
    hPreviousXLMAINBigIcon = SendMessage(hWndXLMAIN, WM_SETICON, 1, hNewIcon)  ' Big Icon
    hPreviousXLMAINSmallIcon = SendMessage(hWndXLMAIN, WM_SETICON, 0, hNewIcon) ' Small Icon
    hPreviousEXCEL9BigIcon = SendMessage(hWndEXCEL9, WM_SETICON, 1, hNewIcon)  ' Big Icon
    hPreviousEXCEL9SmallIcon = SendMessage(hWndEXCEL9, WM_SETICON, 0, hNewIcon) ' Small Icon
TidyUp:
End Function
'
'   A routine to restore the standard Excel Icons
Sub restoreXLIcon()
    Dim hIcon As Long
    Dim lRetv As Long

    hIcon = SendMessage(hWndXLMAIN, WM_SETICON, True, hPreviousXLMAINBigIcon)     ' restore Big Icon
    hIcon = SendMessage(hWndXLMAIN, WM_SETICON, False, hPreviousXLMAINSmallIcon)  ' restore Small Icon
    hIcon = SendMessage(hWndEXCEL9, WM_SETICON, True, hPreviousEXCEL9BigIcon)     ' restore Big Icon
    hIcon = SendMessage(hWndEXCEL9, WM_SETICON, False, hPreviousEXCEL9SmallIcon)  ' restore Small Icon
    lRetv = DestroyIcon(hIcon)      ' I think this is necessary to free memory reserved in ExtractIcon

End Sub

'From Bill Manville (Re: Message)
'MVP - Microsoft Excel, Oxford, England



Attribute VB_Name = "Module3"
Public DirP As String

Sub DesInstalar()
    If Application.Visible Then If Not ThisWorkbook.ReadOnly Then ThisWorkbook.ChangeFileAccess xlReadOnly 'No 2013 sobre visible
    If Application.Visible Then Application.DisplayFullScreen = True 'No 2013 sobre visible
    If Application.Visible Then Application.ScreenUpdating = True 'No 2013 sobre visible
    DirP = ThisWorkbook.Path
    UserForm1.Show
End Sub

Sub Remover()
   Op1 = UserForm2.|fffd|cones_Chb.Value
   Op2 = UserForm2.ArquivosPrograma_Chb.Value
   Op3 = UserForm2.ArquivosDados_Chb.Value
   If Application.Visible Then Application.ScreenUpdating = True 'No 2013 sobre visible
   If MsgBox("CPAP em: " & DirP & Chr(10) & Chr(10) & "Tem certeza que deseja remover" & IIf(Op1 And Op2 And Op3, " TUDO", ": " & IIf(Op1, Chr(10) & "- |fffd|cones", "") & IIf(Op2, Chr(10) & "- Arquivos do Programa", "") & IIf(Op3, Chr(10) & "- Arquivos de Dados", "")) & "?", vbQuestion + vbOKCancel, "CPAP - DesInstalar") = vbCancel Then Exit Sub

   DirP = ThisWorkbook.Path
   PathDesktop = Application.WorksheetFunction.Clean(GetRegistryValue(HKEY_CURRENT_USER, "Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders", "Desktop"))
   PathMenIni = Application.WorksheetFunction.Clean(GetRegistryValue(HKEY_CURRENT_USER, "Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders", "Programs"))

   'Testar direitos na rede criando e excluindo um diret|fffd|rio em n|fffd|vel do do cpap
   On Error Resume Next
   If Mid(DirP, 2, 1) = ":" Then ChDrive DirP
   ChDir DirP
   ChDir ".."
   RootDirP = CurDir
   If RootDirP <> "" Then
      FolderName = RootDirP & IIf(Right(RootDirP, 1) = "\", "", "\") & "~m110781.tmp"
      If Dir(FolderName, vbDirectory) = "" Then MkDir FolderName
      RmDir FolderName
      If Err.Number > 0 Then
         MsgBox "Seus direitos na rede n|fffd|o s|fffd|o suficientes para romover o CPAP", vbOKOnly, "CPAP"
         Exit Sub
      End If
   End If

   If Mid(PathDesktop, 2, 1) = ":" Then ChDrive PathDesktop
   ChDir PathDesktop

   UserForm2.Hide
   UserForm1.Hide

   Err.Clear
   'Removendo |fffd|cones (S|fffd| se existir em DirP para n|fffd|o remover de outros cpap)
   If Op1 Then
      Dim LstLnk()
      Lnk = Dir(DirP & "\*.lnk")
      Do While Lnk <> ""
         I = I + 1
         ReDim Preserve LstLnk(I - 1)
         LstLnk(I - 1) = Lnk
         Lnk = Dir()
      Loop
      Lnk = Dir(DirP & "\*.pif")
      Do While Lnk <> ""
         I = I + 1
         ReDim Preserve LstLnk(I - 1)
         LstLnk(I - 1) = Lnk
         Lnk = Dir()
      Loop
      For j = 1 To I
         If Not LCase(LstLnk(j - 1)) Like "*leiame*" Then
            If Dir(PathDesktop & "\" & LstLnk(j - 1)) <> "" Then Kill PathDesktop & "\" & LstLnk(j - 1)
            If Dir(PathMenIni & "\cpap\" & LstLnk(j - 1)) <> "" Then Kill PathMenIni & "\cpap\" & LstLnk(j - 1)
         End If
      Next

      'Se s|fffd| restar o leiame.txt, exclui a pasta do menu
      I = 0
      Lnk = Dir(PathMenIni & "\cpap\*.*")
      Do While Lnk <> ""
         If Not LCase(Lnk) Like "*leiame*" Then
            I = I + 1
         End If
         Lnk = Dir()
      Loop
      If I = 0 And Dir(PathMenIni & "\cpap", vbDirectory) <> "" Then
         Kill PathMenIni & "\cpap\*.*"
         RmDir PathMenIni & "\cpap"
      End If
   End If

   'Removendo Arquivos do programa
   If Op2 Then
      'Eliminando registros no windows. Sem verificar erro
      svErro = Err.Number
      If Dir(DirP & "\dsofile.dll") <> "" Then Shell "REGSVR32.EXE /u /s """ & DirP & "\dsofile.dll"""
      Err.Number = svErro
      Kill DirP & "\*.*"
   End If

   'Removendo dados
   If Op3 Then
      If Op2 = False Then
         'Preservar o m|fffd|nimo de arquivos de dados suficientes para rodar o cpap
         PreservarArq "banco", "cpap-mem.mac"
         PreservarArq "banco", "cpap-ind.xls"
         PreservarArq "banco", "anexo01.mtv"
         PreservarArq "banco", "anexo02.mtv"
         PreservarArq "banco", "contra01.mtv"
         PreservarArq "exp_plan", "Prom-Form-PreImpresso.dot"
         PreservarArq "exp_plan", "PromJatoTintaPapelA4-3pp.dot"
         PreservarArq "avulso", "Modelo-JustCivel-INPC.xls"
         PreservarArq "avulso", "Modelo-JustCivel-ORTN-BTN-INPC.xls"
         PreservarArq "avulso", "Modelo-JustCivel-ORTN-BTN-INPC-Expurgos.xls"
         PreservarArq "avulso", "Prom-Form-PreImpresso.dot"
         PreservarArq "avulso", "PromJatoTintaPapelA4-3pp.dot"
         PreservarArq "tabelas", "Exemp-01.xls"
      End If

      DelTree DirP & "\areceber"
      DelTree DirP & "\avulso"
      DelTree DirP & "\banco"
      DelTree DirP & "\exp_plan"
      DelTree DirP & "\tabelas"

      If Op2 = False Then
         'Recuperar o m|fffd|nimo de arquivos de dados suficientes para rodar o cpap

         If Dir(DirP & "\areceber", vbDirectory) = "" Then MkDir DirP & "\areceber"
         If Dir(DirP & "\avulso", vbDirectory) = "" Then MkDir DirP & "\avulso"
         If Dir(DirP & "\banco", vbDirectory) = "" Then MkDir DirP & "\banco"
         If Dir(DirP & "\exp_plan", vbDirectory) = "" Then MkDir DirP & "\exp_plan"
         If Dir(DirP & "\tabelas", vbDirectory) = "" Then MkDir DirP & "\tabelas"

         RecuperarArq "banco", "cpap-mem.mac"
         RecuperarArq "banco", "cpap-ind.xls"
         RecuperarArq "banco", "anexo01.mtv"
         RecuperarArq "banco", "anexo02.mtv"
         RecuperarArq "banco", "contra01.mtv"
         RecuperarArq "exp_plan", "Prom-Form-PreImpresso.dot"
         RecuperarArq "exp_plan", "PromJatoTintaPapelA4-3pp.dot"
         RecuperarArq "avulso", "Modelo-JustCivel-INPC.xls"
         RecuperarArq "avulso", "Modelo-JustCivel-ORTN-BTN-INPC.xls"
         RecuperarArq "avulso", "Modelo-JustCivel-ORTN-BTN-INPC-Expurgos.xls"
         RecuperarArq "avulso", "Prom-Form-PreImpresso.dot"
         RecuperarArq "avulso", "PromJatoTintaPapelA4-3pp.dot"
         RecuperarArq "tabelas", "Exemp-01.xls"
      End If
   End If

   If Op2 And Op3 Then
      If Dir(DirP & "\*.*") <> "" Then Kill DirP & "\*.*"
      DelTree DirP
   End If
   'Se for remo|fffd||fffd|o completa n|fffd|o emitir aviso de erro
   MsgBox IIf(Err.Number = 0 Or (Op2 And Op3), "REMO|fffd||fffd|O CONCLU|fffd|DA.", _
         "HOUVE FALHA NA REMO|fffd||fffd|O!" & Chr(10) & Chr(10) & "Talvez seus direitos na rede n|fffd|o sejam suficientes ou uma outra esta|fffd||fffd|o estava com algum arquivo aberto que n|fffd|o pode ser removido. Tente remover manualmente."), _
         vbOKOnly, "CPAP"
End Sub


Sub PreservarArq(nSubDir As String, nArq As String)
   If Dir(DirP & "\" & nSubDir & "\" & nArq) <> "" Then
      If Dir(DirP & "\" & nArq) <> "" Then Kill DirP & "\" & nArq
      Name DirP & "\" & nSubDir & "\" & nArq As DirP & "\" & nArq
   End If
End Sub

Sub RecuperarArq(nSubDir As String, nArq As String)
   If Dir(DirP & "\" & nArq) <> "" Then
      Name DirP & "\" & nArq As DirP & "\" & nSubDir & "\" & nArq
   End If
End Sub

Sub DelTree(nDir As String)
'Exclui nDir e todos seus arquivos e subpastas. |fffd| recorrente para subir na arvore
   nSubDir = SubDir(nDir)
   While nSubDir <> ""
      If nSubDir <> "" Then DelTree (nDir & "\" & nSubDir)
      nSubDir = SubDir(nDir)
   Wend
   If Dir(nDir & "\*.*") <> "" Then Kill nDir & "\*.*"
   RmDir nDir
End Sub

Function SubDir(nDir As String) As String
'Essa fun|fffd||fffd|o |fffd| necess|fffd|ria porque Dir("*.*" , vbdirectory) retorna '.'
'sendo necess|fffd|rio sugerir o primeiro caractere
   For I = 48 To 126
   If I >= 58 And I <= 63 Then GoTo SaltaChr
   If I >= 65 And I <= 94 Then GoTo SaltaChr
   If I = 96 Then GoTo SaltaChr
   If I >= 123 And I <= 125 Then GoTo SaltaChr
      fc = Chr(I)
KilledArq:
      SubDir = Dir(nDir & "\" & fc & "*.*", vbDirectory)
      If SubDir <> "" And Dir(nDir & "\" & SubDir) <> "" Then
         Kill nDir & "\" & SubDir
         GoTo KilledArq
      End If
      If SubDir <> "" And SubDir <> "." Then Exit For
SaltaChr:
   Next
   If SubDir = "." Then SubDir = ""
End Function

Public Function AppVisible() As Boolean 'No 2013 sobre visible
    AppVisible = Application.Visible
End Function
Attribute VB_Name = "Module4"
'Declara|fffd||fffd|es API
Const MAX_STRING As Long = 128
Public Const REG_BINARY = 3&
Public Const REG_DWORD = 4&
Declare Function RegOpenKeyA Lib "ADVAPI32.DLL" (ByVal hkey As Long, ByVal sKey As String, ByRef plKeyReturn As Long) As Long
Declare Function RegQueryValueExA Lib "ADVAPI32.DLL" (ByVal hkey As Long, ByVal sValueName As String, ByVal dwReserved As Long, ByRef lValueType As Long, ByVal sValue As String, ByRef lResultLen As Long) As Long
Declare Function RegCloseKey Lib "ADVAPI32.DLL" (ByVal hkey As Long) As Long
Public Const HKEY_CLASSES_ROOT = &H80000000
Public Const HKEY_CURRENT_USER = &H80000001
Public Const HKEY_LOCAL_MACHINE = &H80000002


'API VERIFICAR REGISTRO POR PASTAS PADR|fffd|ES
'Pass:
'|fffd||fffd| (1) the KEY (e.g., HKEY_CLASSES_ROOT),
'|fffd||fffd| (2) the SUBKEY (e.g., "Excel.Sheet.5"),
'|fffd||fffd| (3) the value's name (e.g., "" [for default] or "whatever")
Function GetRegistryValue(KEY As Long, SubKey As String, ValueName As String) As String
    Dim Buffer As String * MAX_STRING, ReturnCode As Long
    Dim KeyHdlAddr As Long, ValueType As Long, ValueLen As Long
    Dim TempBuffer As String, Counter As Integer
    ValueLen = MAX_STRING
    ReturnCode = RegOpenKeyA(KEY, SubKey, KeyHdlAddr)
    If ReturnCode = 0 Then
        ReturnCode = RegQueryValueExA(KeyHdlAddr, ValueName, _
                0&, ValueType, Buffer, ValueLen)
        RegCloseKey KeyHdlAddr
        'If successful ValueType contains data type
        'of value and ValueLen its length
        If ReturnCode = 0 Then
            Select Case ValueType
                Case REG_BINARY
                    For Counter = 1 To ValueLen
                        TempBuffer = TempBuffer & _
                                Stretch(Hex(Asc(Mid(Buffer, Counter, 1)))) & " "
                    Next
                    GetRegistryValue = TempBuffer
                Case REG_DWORD
                    TempBuffer = "0x"
                    For Counter = 4 To 1 Step -1
                        TempBuffer = TempBuffer & _
                                Stretch(Hex(Asc(Mid(Buffer, Counter, 1))))
                    Next
                    GetRegistryValue = TempBuffer
                Case Else
                    GetRegistryValue = Buffer
            End Select
            Exit Function
        End If
    End If
    GetRegistryValue = "Error"
End Function

Function Stretch(ByteStr As String) As String
    If Len(ByteStr) = 1 Then ByteStr = "0" & ByteStr
    Stretch = ByteStr
End Function

Sub TestAPI()
    'Teste 1 Outlook Journal
    MsgBox GetRegistryValue(HKEY_CURRENT_USER, "Software\Microsoft\Shared Tools\Outlook\Journaling\Microsoft Excel", "Enabled")
    I = GetRegistryValue(HKEY_CLASSES_ROOT, "MSCAL.Calendar", "")
    MsgBox Left(I, 23) = "Controle calend|fffd|rio 8.0" Or Left(I, 20) = "Calendar Control 9.0"
    'Teste 2 Resolu|fffd||fffd|o do v|fffd|deo
    MsgBox Application.WorksheetFunction.Clean(GetRegistryValue(HKEY_LOCAL_MACHINE, "Config\0001\Display\Settings", "Resolution"))
    'Teste 3 Pastas padr|fffd|es
    MsgBox GetRegistryValue(HKEY_CURRENT_USER, "Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders", "Desktop")
    MsgBox GetRegistryValue(HKEY_CURRENT_USER, "Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders", "Programs")
End Sub

Attribute VB_Name = "Plan1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Plan2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Plan3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Plan4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Plan5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{42F94003-271D-4B4E-A3D5-0129108DEA96}{51042CA4-B637-493F-AEA7-7E3663812488}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Tudo_Bt_Click()
    UserForm2.|fffd|cones_Chb.Value = True
    UserForm2.ArquivosPrograma_Chb.Value = True
    UserForm2.ArquivosDados_Chb.Value = True
    Remover
End Sub

Private Sub AlgunsItens_Bt_Click()
    UserForm2.|fffd|cones_Chb.Value = True
    UserForm2.ArquivosPrograma_Chb.Value = True
    UserForm2.ArquivosDados_Chb.Value = False
    UserForm2.Show
End Sub

Private Sub Cancelar_Bt_Click()
    Hide
End Sub

Private Sub UserForm_Initialize()
   Tudo_Bt.ControlTipText = "Remover de " & DirP
   AlgunsItens_Bt.ControlTipText = "Remover de " & DirP
End Sub
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{9B5A8056-3342-41BF-AF8A-1A0814D1BF74}{3E07967E-7FD9-46D0-923D-F7D7F4B737E2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub |fffd|cones_Chb_Click()
    Ok_Bt.Enabled = |fffd|cones_Chb.Value Or ArquivosPrograma_Chb.Value Or ArquivosDados_Chb.Value
    If ArquivosPrograma_Chb.Value And |fffd|cones_Chb.Value = False Then ArquivosPrograma_Chb.Value = False
End Sub

Private Sub ArquivosPrograma_Chb_Click()
    If ArquivosPrograma_Chb.Value Then |fffd|cones_Chb.Value = True
    Ok_Bt.Enabled = |fffd|cones_Chb.Value Or ArquivosPrograma_Chb.Value Or ArquivosDados_Chb.Value
End Sub

Private Sub ArquivosDados_Chb_Click()
    Ok_Bt.Enabled = |fffd|cones_Chb.Value Or ArquivosPrograma_Chb.Value Or ArquivosDados_Chb.Value
End Sub

Private Sub Cancelar_Bt_Click()
    Hide
End Sub

Public Sub Ok_Bt_Click()
    Remover
End Sub

Private Sub UserForm_Initialize()
  |fffd|cones_Chb.ControlTipText = "Remover de " & DirP
  ArquivosPrograma_Chb.ControlTipText = "Remover de " & DirP
  ArquivosDados_Chb.ControlTipText = "Remover de " & DirP
End Sub



INQUEST-PP=macro
