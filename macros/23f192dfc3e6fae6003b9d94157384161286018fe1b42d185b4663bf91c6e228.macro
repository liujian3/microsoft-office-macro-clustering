Attribute VB_Name = "Module1"
Option Explicit

Dim f, fs
Dim f_it, fs_it
Dim MDebug As Boolean


Sub Parser(path As String)
    Dim rep_sheet As Worksheet
    Dim tmp_sheet As Worksheet
    
    Dim teg_open_cell As String
    Dim teg_open_table As String
    Dim teg_close As String
    
    Dim qt As QueryTable
    Dim str_teg As String
    Dim str_val As String
    Dim str_label As String
    Dim target_cell As Range
    Dim tmp_cell As Range
    Dim tmp_row As Range
    Dim current_range As Range
    Dim tmp_range As Range
    Dim formArr()
    Dim i As Integer
    Dim tmp_path As String
        
    Dim TabStartRow, TabFinRow, TabLinesCnt As Integer
    Dim MyTabCols, MyGroupCol As Long
    Dim MySumCols As Variant
    Dim MyTabParams As String
'    MyTabCols = 16
'    MyGroupCol = 1
'    MySumCols = Array(5, 6, 7, 8, 9, 11, 12, 13, 14)
    Dim FieldInf
'    FieldInf = Array(Array(1, 1), Array(2, 1), Array(3, 1), Array(4, 1), _
'                     Array(5, 1), Array(6, 1), Array(7, 1), Array(8, xlYMDFormat), _
'                     Array(9, 1), Array(10, 1), Array(11, xlYMDFormat), Array(12, 1)) ' 5 -> xlYMDFormat, 1 -> xlGeneralFormat
    Dim c As Range
    Dim p_pr As String
        
    Set fs = CreateObject("Scripting.FileSystemObject")
    Set f = fs.OpenTextFile(path, 1, 0)
    Set fs_it = CreateObject("Scripting.FileSystemObject")
    
    teg_open_cell = "<open cell>"
    teg_open_table = "<open table>"
    teg_close = "</close>"
    
    If MDebug Then
      Set rep_sheet = Worksheets(2)
      Application.Worksheets(1).Cells.Copy
      Application.Worksheets(2).Cells.PasteSpecial Paste:=xlPasteAll
    Else
      Set rep_sheet = Worksheets(1)
      'On Error Resume Next
    End If
    
    Set current_range = rep_sheet.Cells
    Set tmp_sheet = Worksheets(Worksheets.Count)
    tmp_sheet.Activate
    
    Do While Not f.AtEndOfStream
       str_teg = f.ReadLine
       str_label = f.ReadLine
       str_val = f.ReadLine
       If InStr(str_label, "[P_PR]") > 0 Then
         p_pr = str_val
       End If
       
       Set target_cell = current_range.Find(What:=str_label, SearchOrder:=xlByRows)
       If Not target_cell Is Nothing Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
          '|fffd||fffd||fffd||fffd||fffd||fffd|
          If str_teg = teg_open_cell Then
             str_val = LTrim(str_val)
             str_val = MoveMinus(str_val)      '|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'             target_cell.Value = Replace(target_cell.Value, str_label, str_val, 1, 1, vbTextCompare)
             current_range.Replace What:=str_label, Replacement:=str_val, SearchOrder:=xlByRows
current_range.Rows.AutoFit

          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          ElseIf str_teg = teg_open_table Then
                TabStartRow = target_cell.Row
                TabLinesCnt = 0
'                MyTabParams = target_cell.Value
'                MyTabParams = Replace(MyTabParams, str_label, "")
                 target_cell.Value = Replace(target_cell.Value, str_label, "")
'                MyTabCols = Val(GetWord(MyTabParams, ":"))
'                MyGroupCol = Val(GetWord(MyTabParams, ":"))
'                MySumCols = GetColsList(MyTabParams)
                
'                target_cell.EntireRow.Copy
'                target_cell.Insert Shift:=xlDown
'                Set target_cell = current_range.Cells(TabStartRow, 1)
'                target_cell.Offset(1, 0).Value = str_label & "."
                
                tmp_sheet.Cells.Clear
                
                tmp_path = str_val
                Set f_it = fs_it.OpenTextFile(tmp_path, 1, 0)
                '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-------------------------------------------------
                Do While Not f_it.AtEndOfStream
                    str_val = f_it.ReadLine
                    Set tmp_cell = tmp_sheet.Cells(1, 1)
                    tmp_cell.EntireRow.Clear
                    tmp_cell.Value = str_val
                    tmp_cell.TextToColumns DataType:=xlDelimited, _
                                           ConsecutiveDelimiter:=False, _
                                           Tab:=True, _
                                           DecimalSeparator:=",", _
                                           TrailingMinusNumbers:=True
'                                          FieldInfo:=FieldInf ' 5 -> xlYMDFormat
'                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'                    For i = 0 To MyTabCols - 1
'                      If tmp_cell.Offset(0, i).Value = 0 Then
'                        tmp_cell.NumberFormat = "General"
'                        tmp_cell.Offset(0, i).Clear
'                      End If
'                    Next

                    target_cell.EntireRow.Copy
                    Set tmp_cell = tmp_sheet.Cells(2 + TabLinesCnt, 1)
                    Set tmp_row = tmp_cell.EntireRow
                    tmp_row.PasteSpecial Paste:=xlPasteAll
                    Set tmp_range = Range(tmp_row.Cells(1, 1), tmp_row.Cells(1, 4))
                    Set tmp_cell = tmp_sheet.Rows(1).Cells(1, 1)
                    
                    If tmp_cell.Value = "SALDO_N" Or tmp_cell.Value = "OBOROT" Or tmp_cell.Value = "SALDO_K" Then
                        tmp_row.Font.Bold = True
                        tmp_row.RowHeight = 25
                        tmp_range.UnMerge
                        tmp_row.Cells(1, 3).Clear
                        tmp_range.Merge
                        tmp_range.BorderAround LineStyle:=xlContinuous
                        tmp_range.HorizontalAlignment = xlLeft
                    Else
                        tmp_row.Font.Size = tmp_row.Font.Size - 1
                        tmp_range.HorizontalAlignment = xlRight
                    End If
                    
                    For Each c In tmp_sheet.Rows(1).Cells
                      Set tmp_cell = tmp_row.Find(What:="[" + CStr(c.Column) + "]", SearchOrder:=xlByRows)
                      If Not (tmp_cell Is Nothing) Then
                        tmp_cell.Value = c.Value
'                        tmp_cell.NumberFormat = " #,##0.00; -#,##0.00; "" ""??; @"  '# ##0,00; -# ##0,00; ??; @
                        If p_pr <> "X" Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                          If c.Column = 10 Or c.Column = 11 Then
                            tmp_cell.Value = ""
                          End If
                        End If
                      End If
                      If c.Column >= tmp_sheet.UsedRange.Columns.Count Then Exit For
                    Next c

'                    target_cell.EntireRow.Copy
'                    tmp_cell.EntireRow.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
'                                                    SkipBlanks:=False, Transpose:=False
'                    ProcessRow tmp_cell, tmp_sheet
'                    tmp_cell.Offset(0, 2).Value2 = Format(tmp_cell.Offset(0, 2).Value2, "0000000000")
'                    Set tmp_cell = tmp_cell.Offset(1, 0)
                    TabLinesCnt = TabLinesCnt + 1
                Loop
                f_it.Close
                'If MDebug = False Then fs_it.DeleteFile (tmp_path)
                '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|----------------------------------------------------
                
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
                If TabLinesCnt > 0 Then
                  Set tmp_range = tmp_sheet.Rows("2:" & CStr(TabLinesCnt + 1))
                  tmp_range.Copy
                  target_cell.Offset(1, 0).Insert Shift:=xlDown
                  tmp_range.Clear
                End If
                target_cell.EntireRow.Delete Shift:=xlUp
               
'                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'                If (MyTabCols = 0) Or (MyGroupCol = 0) Or (TabLinesCnt = 0) Then
'                  target_cell.EntireRow.Delete Shift:=xlUp
'                Else
'                  target_cell.EntireRow.Clear
'                  For i = 1 To MyTabCols
'                    target_cell.Offset(0, i - 1).Value = "Col" & Str(i)
'                  Next i
'                  With current_range
'                    Range(Cells(TabStartRow, 1), Cells(TabStartRow + TabLinesCnt, MyTabCols)).Subtotal _
'                                      GroupBy:=MyGroupCol, _
'                                      Function:=xlSum, _
'                                      TotalList:=MySumCols, _
'                                      SummaryBelowData:=xlSummaryBelow
'                    Rows(TabStartRow).EntireRow.Delete Shift:=xlUp
'                  End With
'                End If
                
'                Set target_cell = current_range.Find(str_label & ".", SearchOrder:=xlByRows)
'                If Not (target_cell Is Nothing) Then
'                  TabFinRow = target_cell.Row
'                  For i = TabStartRow To TabFinRow - 1
'                    With current_range
'                      If Cells(i, MyGroupCol).Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" Then
'                        Range(Cells(i, 1), Cells(i, MyTabCols)).Interior.ColorIndex = 34
'                        Range(Cells(i, 10), Cells(i, 10)).Font.Bold = 1
'                        Range(Cells(i, 12), Cells(i, 12)).Font.Bold = 1
'                        Cells(i, MyGroupCol).Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|:"
'                      ElseIf Right(Cells(i, MyGroupCol).Value, 4) = "|fffd||fffd||fffd||fffd|" Then
'                        Range(Cells(i, 1), Cells(i, MyTabCols)).Interior.ColorIndex = 35
'                        Set tmp_range = Range(Cells(i, 2), Cells(i, 5))
'                        tmp_range.Merge
'                        Range(Cells(i, 10), Cells(i, 10)).Font.Bold = 1
'                        Range(Cells(i, 12), Cells(i, 12)).Font.Bold = 1
'                      End If
'                    End With
'                  Next i
'                  current_range.Rows(TabFinRow).EntireRow.Delete Shift:=xlUp
'                End If

                rep_sheet.Activate
                '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          End If
       End If
       Do While str_val <> teg_close '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         str_val = f.ReadLine
       Loop
    Loop
    
    f.Close
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Do
      Set target_cell = current_range.Find(What:="&delete", SearchOrder:=xlByRows)
      If target_cell Is Nothing Then
        Exit Do
      Else
        target_cell.EntireRow.Delete Shift:=xlUp
      End If
    Loop

    'If MDebug = False Then fs.DeleteFile (path)
'    Set tmp_cell = Worksheets(1).Cells.Find(What:="[TMP]")
'    tmp_cell.Borders(xlEdgeTop).LineStyle = xlContinuous
'    tmp_cell.ClearContents
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
'    Set target_cell = current_range.Find("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|", SearchOrder:=xlByRows)
'    If Not (target_cell Is Nothing) Then   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'       target_cell.Value = Replace(target_cell.Value, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|", 1, 1, vbTextCompare)
'    End If
  MergeCell_RowHeightFit (Cells(3, 1))
End Sub


Sub Test()
   MDebug = True
   Parser ("C:\TEST\ZL_FI000020_D\data_params-092915.txt")
End Sub

Sub Z_Clear()
    Worksheets(2).Activate
    Cells.Delete
    Cells(1, 1).Select
    Worksheets(3).Activate
    Cells.Delete
    Cells(1, 1).Select
    Worksheets(1).Activate
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Module2"
'|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function MoveMinus(Val As String) As String
  If Right(Val, 1) = "-" Then
    MoveMinus = "-" + Left(Val, Len(Val) - 1)
  Else
    MoveMinus = Val
  End If
End Function

Function GetWord(Str As String, ByVal DelimChar As String) As String
  Dim i As Integer
  
  GetWord = ""
  i = InStr(Str, DelimChar)
  If (i > 0) Then
    GetWord = Left(Str, i - 1)
    Str = Mid(Str, i + Len(DelimChar))
  ElseIf (Str <> "") Then
    GetWord = Str
    Str = ""
  End If
End Function

Function GetColsList(Str As String) As Variant
  Dim i, n As Integer
  Dim TmpAr(1 To 100) As Integer
  Dim RetAr()
  
  GetColsList = Null
  n = 0
  While (Str <> "")
    n = n + 1
    TmpAr(n) = Val(GetWord(Str, ","))
  Wend
  ReDim RetAr(1 To n)
  For i = 1 To n
    RetAr(i) = TmpAr(i)
  Next i
  GetColsList = RetAr
End Function


'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub MergeCell_RowHeightFit(mCell As Range)
  Dim CurrentRowHeight As Single, MergedCellRgWidth As Single
  Dim CurrCell As Range
  Dim ActiveCellWidth As Single, PossNewRowHeight As Single

  If mCell.MergeCells Then
    With mCell.MergeArea
      If .WrapText = True Then
        Application.ScreenUpdating = False
        CurrentRowHeight = .RowHeight
        ActiveCellWidth = mCell.ColumnWidth
        For Each CurrCell In mCell.MergeArea
          MergedCellRgWidth = CurrCell.ColumnWidth + MergedCellRgWidth
        Next
        .MergeCells = False
        .Cells(1).ColumnWidth = MergedCellRgWidth
        .EntireRow.AutoFit
        PossNewRowHeight = .RowHeight
        .Cells(1).ColumnWidth = ActiveCellWidth
        .MergeCells = True
        .RowHeight = IIf(CurrentRowHeight > PossNewRowHeight, CurrentRowHeight, PossNewRowHeight)
      End If
    End With
  End If
End Sub


Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
