Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_Open()

End Sub

Private Sub Workbook_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Excel.Range, Cancel As Boolean)

  Dim ws As Worksheet
  Dim SheetIndex As Long
  Dim NoSheets As Long
    
  Set ws = Nothing
  Cancel = False
  
  NoSheets = SAPSheets.count
  
  Cancel = False
  For SheetIndex = 1 To NoSheets
    Set ws = SAPSheets.item(SheetIndex)
    If SheetIndex = ws.Index Then
      ThisWorkbook.Container.SendCustomEvent ("SELE")
      Cancel = True
      Exit For
    End If
  Next SheetIndex

End Sub
Attribute VB_Name = "SAPCellFormat"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private PrColorIndex As Long
Private PrFontName As String
Private PrFontSize As Long
Private PrFontBold As String * 1

Sub setFormat(SAPTableRow As Object)

  PrColorIndex = SAPTableRow("COLOR_INDEX") + SAPColorOffset
  PrFontName = SAPTableRow("FONT_NAME")
  PrFontSize = SAPTableRow("FONT_SIZE")
  PrFontBold = SAPTableRow("FONT_BOLD")

End Sub

Sub assignToRange(aRange As Range)

  On Error Resume Next 'ignore any errors
  
  With aRange.Interior
  
    If PrColorIndex > 0 Then
      .ColorIndex = PrColorIndex
    End If
    
  End With
  
  With aRange.Font
  
    If PrFontName <> "" Then
      .Name = PrFontName
    End If
  
    If PrFontSize > 0 Then
      .size = PrFontSize
    End If

    Select Case PrFontBold
      Case "0"
        .Bold = False
      Case "1"
        .Bold = True
      Case Else
        'no change
    End Select
    
  End With

End Sub



Attribute VB_Name = "SAPFormat"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private PrRowFormat As SAPRCFormat
Private PrColumnFormat As SAPRCFormat
Private PrCellFormat As SAPCellFormat
Private PrNumberFormat As SAPNumberFormat

Sub setFormat(SAPTableRow As Object)

  Dim Index As Long
  
  Index = SAPTableRow("ROW_FORMAT_INDEX")
  If Index > 0 Then
    On Error Resume Next
    Set PrRowFormat = SAPRCFormats.item(Index)
  Else
    Set PrRowFormat = Nothing
  End If
  
  Index = SAPTableRow("COLUMN_FORMAT_INDEX")
  If Index > 0 Then
    On Error Resume Next
    Set PrColumnFormat = SAPRCFormats.item(Index)
  Else
    Set PrColumnFormat = Nothing
  End If
  
  Index = SAPTableRow("CELL_FORMAT_INDEX")
  If Index > 0 Then
    On Error Resume Next
    Set PrCellFormat = SAPCellFormats.item(Index)
  Else
    Set PrCellFormat = Nothing
  End If
  
  Index = SAPTableRow("NUMBER_FORMAT_INDEX")
  If Index > 0 Then
    On Error Resume Next
    Set PrNumberFormat = SAPNumberFormats.item(Index)
  Else
    Set PrNumberFormat = Nothing
  End If

End Sub

Sub assignToRange(aRange As Range)

  If Not PrRowFormat Is Nothing Then
    PrRowFormat.assignToRangeRows aRange
  End If
  If Not PrColumnFormat Is Nothing Then
    PrColumnFormat.assignToRangeColumns aRange
  End If
  If Not PrCellFormat Is Nothing Then
    PrCellFormat.assignToRange aRange
  End If
  If Not PrNumberFormat Is Nothing Then
    PrNumberFormat.assignToRange aRange
  End If
  
End Sub




Attribute VB_Name = "SAPNumberFormat"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private PrFormatString As String

Sub setFormat(SAPTableRow As Object)

  PrFormatString = SAPNumberFormatToString(CellType:=SAPTableRow("TYPE"), _
                                           Decimals:=SAPTableRow("DECIMALS"), _
                                           MinDecimals:=SAPTableRow("MIN_DECIMALS"), _
                                           Scaling:=SAPTableRow("SCALING"), _
                                           ZeroRepresentation:=SAPTableRow("ZERO_REPRESENTATION"), _
                                           SignRepresentation:=SAPTableRow("SIGN_REPRESENTATION"), _
                                           SignReversal:=SAPTableRow("SIGN_REVERSAL"), _
                                           UnitWidth:=SAPTableRow("UNIT_WIDTH"), _
                                           Unit:=SAPTableRow("UNIT"), _
                                           Symbol:=SAPTableRow("SYMBOL"))

End Sub

Sub assignToRange(aRange As Range)

  On Error Resume Next 'ignore any errors
  aRange.NumberFormat = PrFormatString

End Sub
'*******************************************************************************
'  Convert Report Writer number format to Excel format string
'*******************************************************************************
Private Function SAPNumberFormatToString( _
    CellType As Variant, _
    Decimals As Variant, _
    MinDecimals As Variant, _
    Scaling As Variant, _
    ZeroRepresentation As Variant, _
    SignRepresentation As Variant, _
    SignReversal As Variant, _
    UnitWidth As Variant, _
    Unit As Variant, _
    Symbol As Variant) As String

  Dim PositiveFormat As String
  Dim NegativeFormat As String
  Dim TempFormat As String
  Dim TempUnit As String

  Dim iScal As Long
  Dim iDec As Long
  Dim iMinDec As Long
  Dim iWidth As Long

  Select Case CellType

    Case "T" 'text

      SAPNumberFormatToString = "@"

    Case "S" 'symbol

      SAPNumberFormatToString = """" & Symbol & """;""" & Symbol & """;""" & Symbol & """"

    Case Else

      PositiveFormat = "#,##0"

      'Scaling (only in factors of 1000)

      If IsNumeric(Scaling) Then
        iScal = Scaling
        PositiveFormat = PositiveFormat + String(iScal \ 3, ",")
      End If

      'Decimal places

      If IsNumeric(Decimals) Then
        iDec = Decimals
      Else
        iDec = 0
      End If
      If IsNumeric(MinDecimals) Then
        iMinDec = MinDecimals
      Else
        iMinDec = iDec
      End If
      If iDec > 0 Then
        PositiveFormat = PositiveFormat + "."
        If iMinDec > 0 Then
          PositiveFormat = PositiveFormat + String(iMinDec, "0")
        End If
        If iDec > iMinDec Then
          PositiveFormat = PositiveFormat + String(iDec - iMinDec, "#")
        End If
      End If

      'Sign Representation

      Select Case SignRepresentation
        Case "1"  'Prefix
          NegativeFormat = "-" + PositiveFormat
        Case "2"  'Suffix
          NegativeFormat = PositiveFormat + "-"
          PositiveFormat = PositiveFormat + "_-"
        Case "3"  'Paranthesis
          NegativeFormat = "(" + PositiveFormat + ")"
          PositiveFormat = PositiveFormat + "_)"
        Case "4"  'Debit/Credit
          NegativeFormat = PositiveFormat + "\ ""CR"""
          PositiveFormat = PositiveFormat + "\ ""DB"""
        Case "5"  'No sign
          NegativeFormat = PositiveFormat
        Case Else 'Default: Prefix
          NegativeFormat = "-" + PositiveFormat
      End Select

      'Sign reversal

      If SignReversal = "1" Then
        TempFormat = NegativeFormat
        NegativeFormat = PositiveFormat
        PositiveFormat = TempFormat
      End If

      'Units

      If IsNumeric(UnitWidth) Then
        iWidth = UnitWidth
        If iWidth > 0 Then
          TempUnit = "\ """ + Left(Unit + Space(iWidth), iWidth) + """"
          PositiveFormat = PositiveFormat + TempUnit
          NegativeFormat = NegativeFormat + TempUnit
        End If
      End If

      'Zero representation

      Select Case ZeroRepresentation
        Case "1"  '"0"
          SAPNumberFormatToString = PositiveFormat + ";" + NegativeFormat
        Case "2"  '"-"
          SAPNumberFormatToString = PositiveFormat + ";" + NegativeFormat + ";""-"""
        Case "3"  '" "
          SAPNumberFormatToString = PositiveFormat + ";" + NegativeFormat + ";"" """
        Case Else
          SAPNumberFormatToString = PositiveFormat + ";" + NegativeFormat
      End Select

  End Select

End Function


Attribute VB_Name = "SAPRCFormat"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private PrSize As Double
Private PrSuppressed As String * 1
Private PrAlignment As Long
Private PrLineStyleBegin As Long
Private PrLineWeightBegin As Long
Private PrLineStyleInside As Long
Private PrLineWeightInside As Long
Private PrLineStyleEnd As Long
Private PrLineWeightEnd As Long


Sub setFormat(SAPTableRow As Object)

  PrSize = SAPTableRow("SIZE")
  PrSuppressed = SAPTableRow("SUPPRESSED")
  PrAlignment = SAPTableRow("ALIGNMENT")
  PrLineStyleBegin = toXlLineStyle(SAPTableRow("LINE_STYLE_BEGIN"))
  PrLineWeightBegin = toXlLineWeight(SAPTableRow("LINE_WEIGHT_BEGIN"), PrLineStyleBegin)
  PrLineStyleInside = toXlLineStyle(SAPTableRow("LINE_STYLE_INSIDE"))
  PrLineWeightInside = toXlLineWeight(SAPTableRow("LINE_WEIGHT_INSIDE"), PrLineStyleInside)
  PrLineStyleEnd = toXlLineStyle(SAPTableRow("LINE_STYLE_END"))
  PrLineWeightEnd = toXlLineWeight(SAPTableRow("LINE_WEIGHT_END"), PrLineStyleEnd)

End Sub

Sub assignToRangeRows(aRange As Range)

  If PrSize > 0# Then
    aRange.RowHeight = PrSize
  End If

  'Supress
  Select Case PrSuppressed
    Case "0"
      aRange.EntireRow.Hidden = False
    Case "1"
      aRange.EntireRow.Hidden = True
    Case Else
  End Select

  'Alignment
  Select Case PrAlignment
    Case 1
      aRange.VerticalAlignment = xlVAlignTop
    Case 2
      aRange.VerticalAlignment = xlVAlignCenter
    Case 3
      aRange.VerticalAlignment = xlVAlignBottom
    Case 4
      aRange.VerticalAlignment = xlVAlignJustify
    Case Else
  End Select

  With aRange.Borders(xlEdgeTop)
    If PrLineStyleBegin <> 0 Then
      .LineStyle = PrLineStyleBegin
    End If
    If PrLineWeightBegin <> 0 Then
      .Weight = PrLineWeightBegin
    End If
  End With
  With aRange.Borders(xlInsideHorizontal)
    If PrLineStyleInside <> 0 Then
      On Error Resume Next
      .LineStyle = PrLineStyleInside
      On Error GoTo 0
    End If
    If PrLineWeightInside <> 0 Then
      On Error Resume Next
      .Weight = PrLineWeightInside
      On Error GoTo 0
    End If
  End With
  With aRange.Borders(xlEdgeBottom)
    If PrLineStyleEnd <> 0 Then
      .LineStyle = PrLineStyleEnd
    End If
    If PrLineWeightEnd <> 0 Then
      .Weight = PrLineWeightEnd
    End If
  End With

End Sub

Sub assignToRangeColumns(aRange As Range)

  If PrSize > 0# Then
    aRange.ColumnWidth = PrSize
  End If

  Select Case PrSuppressed
    Case "0"
      aRange.EntireColumn.Hidden = False
    Case "1"
      aRange.EntireColumn.Hidden = True
    Case Else
  End Select

  'Alignment
  Select Case PrAlignment
    Case -1
      aRange.HorizontalAlignment = xlHAlignGeneral
    Case 1
      aRange.HorizontalAlignment = xlHAlignLeft
    Case 2
      aRange.HorizontalAlignment = xlHAlignCenter
    Case 3
      aRange.HorizontalAlignment = xlHAlignRight
    Case 4
      aRange.HorizontalAlignment = xlHAlignJustify
    Case 5
      aRange.HorizontalAlignment = xlHAlignCenterAcrossSelection
    Case 6
      aRange.HorizontalAlignment = xlHAlignFill
    Case Else
  End Select


  With aRange.Borders(xlEdgeLeft)
    If PrLineStyleBegin <> 0 Then
      .LineStyle = PrLineStyleBegin
    End If
    If PrLineWeightBegin <> 0 Then
      .Weight = PrLineWeightBegin
    End If
  End With
  With aRange.Borders(xlInsideVertical)
    If PrLineStyleInside <> 0 Then
      On Error Resume Next
      .LineStyle = PrLineStyleInside
      On Error GoTo 0
    End If
    If PrLineWeightInside <> 0 Then
      On Error Resume Next
      .Weight = PrLineWeightInside
      On Error GoTo 0
    End If
  End With
  With aRange.Borders(xlEdgeRight)
    If PrLineStyleEnd <> 0 Then
      .LineStyle = PrLineStyleEnd
    End If
    If PrLineWeightEnd <> 0 Then
      .Weight = PrLineWeightEnd
    End If
  End With

End Sub

'*******************************************************************************
'*
'*   Converts SAP line style to Excel line style
'*
'*******************************************************************************
Private Function toXlLineStyle(SAPLineStyle As Long) As Long

  Select Case SAPLineStyle
    Case -1
      toXlLineStyle = xlLineStyleNone
    Case 1
      toXlLineStyle = xlContinuous
    Case 2
      toXlLineStyle = xlDash
    Case 3
      toXlLineStyle = xlDashDot
    Case 4
      toXlLineStyle = xlDashDotDot
    Case 5
      toXlLineStyle = xlDot
    Case 6
      toXlLineStyle = xlDouble
    Case 7
      toXlLineStyle = xlSlantDashDot
    Case Else
      toXlLineStyle = 0
  End Select

End Function

'*******************************************************************************
'*
'*   Converts SAP line weight to Excel line weight
'*
'*******************************************************************************
Private Function toXlLineWeight(SAPLineWeight As Long, xlLineStyle As Long) As Long

  If SAPLineWeight <= 0 Then
    toXlLineWeight = SAPLineWeight
  Else
    If xlLineStyle = xlDouble Then
      toXlLineWeight = 0
    Else
      toXlLineWeight = SAPLineWeight
    End If
  End If

End Function




Attribute VB_Name = "SAPSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit

Private Sub Worksheet_Activate()

End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Excel.Range, Cancel As Boolean)
  
  Dim ws As Worksheet
  Dim SheetIndex As Long
  Dim NoSheets As Long
    
  Set ws = Nothing
  Cancel = False
  
  NoSheets = SAPSheets.count
  
  Cancel = False
  For SheetIndex = 1 To NoSheets
    Set ws = SAPSheets.item(SheetIndex)
    If Me.Index = ws.Index Then
      ThisWorkbook.Container.SendCustomEvent ("SELE")
      Cancel = True
      Exit For
    End If
  Next SheetIndex
  

End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)

End Sub

Private Sub Worksheet_Calculate()

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

End Sub

Private Sub Worksheet_Deactivate()

End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)

End Sub

Private Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "SAPWorksheets"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private PrSheets As New Collection

'*******************************************************************************
'   Initialize SAP sheets collection
'*******************************************************************************
Private Sub Class_Initialize()

  Dim ws As Worksheet
  
  For Each ws In ThisWorkbook.Worksheets
    If Left(ws.CodeName, 8) = "SAPSheet" Then
      PrSheets.Add ws
      ws.Protect
    End If
  Next ws
  
  If Me.count = 0 Then
    Set ws = ThisWorkbook.Worksheets.Add
    PrSheets.Add ws
    ws.Protect
  End If

End Sub
'*******************************************************************************
'   Get number of SAP sheet
'*******************************************************************************
Property Get count() As Long
 
  count = PrSheets.count

End Property
'*******************************************************************************
'   Get SAP sheet by index
'*******************************************************************************
Property Get item(Index As Long) As Worksheet
 
  Dim ws As Worksheet
  Dim ws1 As Worksheet
  Dim NoSheets As Long
  Dim XlIndex As Long
  
  NoSheets = Me.count
  If Index <= NoSheets Then
    Set item = PrSheets.item(Index)
  Else
    Set ws1 = PrSheets.item(1)
    Set ws = PrSheets.item(NoSheets)
    While NoSheets < Index
'      Set ws = ThisWorkbook.Worksheets.Add(after:=ws)
      XlIndex = ws.Index
      Set ws = ThisWorkbook.Worksheets.Add(after:=ws)
'      ws1.Copy after:=ws
      XlIndex = XlIndex + 1
      Set ws = ThisWorkbook.Worksheets(XlIndex)
      ws.Protect
      PrSheets.Add ws
      NoSheets = Me.count
    Wend
    Set item = ws
  End If
  
End Property
'*******************************************************************************
'   Set sheet title
'*******************************************************************************
Property Let title(Index As Long, SAPTitle As String)

  Dim ws As Worksheet
  Dim XlTitle As String
  Dim I As Long
  Dim No As String
  Dim SLen As Long

    
  XlTitle = SAPTitle
  If XlTitle = "" Then
    XlTitle = "SAPSheet" & Index
  End If
  Set ws = Me.item(Index)
  On Error Resume Next
  ws.Name = XlTitle
  If err.Number <> 0 Then
'   Title is too long, containes invalid characters or is not unique
    XlTitle = SAPTitleToXlTitle(XlTitle)
    On Error Resume Next
    ws.Name = XlTitle
    If err.Number <> 0 Then
'     Title is not unique
      For I = 1 To 9
        No = I
        SLen = 29 - Len(No)
        On Error Resume Next
        ws.Name = Left(XlTitle, SLen) & "(" & No & ")"
        If err.Number = 0 Then
          Exit For
        End If
      Next I
    End If
  End If

End Property
'*******************************************************************************
'   Get sheet title
'*******************************************************************************
Property Get title(Index As Long) As String

  Dim ws As Worksheet
  
  Set ws = Me.item(Index)
  title = ws.Name

End Property
'*******************************************************************************
'   Convert SAP sheet title to valid Excel title
'*******************************************************************************
Private Function SAPTitleToXlTitle(SAPTitle As String) As String

  Dim I As Long
  Dim SLen As Long
  Dim XlTitle As String * 31
  
  XlTitle = SAPTitle
  SLen = Len(XlTitle)
  For I = 1 To SLen
    Select Case Mid(XlTitle, I, 1)
      Case "*", ":", "\", "/", "?"
        Mid(XlTitle, I, 1) = " "
      Case Else
    End Select
  Next I
  SAPTitleToXlTitle = XlTitle
  
End Function
Attribute VB_Name = "SAPmain"
Option Explicit

Public SAPSheets As New SAPWorksheets
Public SAPContainer As Object

Public SAPRCFormats As New Collection
Public SAPCellFormats As New Collection
Public SAPNumberFormats As New Collection
Public SAPFormats As New Collection

Private SaveScreenUpdating As Boolean

Public Const SAPColorOffset As Long = 0

'*******************************************************************************
'   Initialize Workbook (SAPSheets)
'*******************************************************************************
Public Sub Workbook_init(CountSheets As Long)

  Dim R3Sheets As Object
  Dim R3Sheet As Object
  
  Dim ws As Worksheet
  
  Dim SheetIndex As Long
  Dim LastSheetIndex As Long
  Dim NoSheets As Long
  Dim I As Long
  
  SaveScreenUpdating = Application.ScreenUpdating
  Application.ScreenUpdating = False
  
  Set SAPContainer = ThisWorkbook.Container
  Set R3Sheets = SAPContainer.tables("SHEETS").Table
  
  Call Workbook_setColors
  
  LastSheetIndex = 0
  For Each R3Sheet In R3Sheets.Rows
    SheetIndex = R3Sheet("INDEX")
    Set ws = SAPSheets.item(SheetIndex)
    
    ws.Visible = xlSheetVisible
    ws.Unprotect
    ws.Cells.Delete
    ws.Cells.Clear
    ws.Cells.ClearOutline
    
    If R3Sheet("TOTALS_ABOVE") = "1" Then
      ws.Outline.SummaryRow = xlSummaryAbove
    Else
      ws.Outline.SummaryRow = xlSummaryBelow
    End If
    If R3Sheet("TOTALS_LEFT") = "1" Then
      ws.Outline.SummaryColumn = xlSummaryOnLeft
    Else
      ws.Outline.SummaryColumn = xlSummaryOnRight
    End If

    ws.Cells.Interior.ColorIndex = SAPColorOffset + 1
    
    SAPSheets.title(SheetIndex) = R3Sheet("TITLE")
    For I = LastSheetIndex + 1 To SheetIndex - 1
      Set ws = SAPSheets.item(I)
      ws.Visible = xlSheetHidden
    Next I
    LastSheetIndex = SheetIndex
  Next R3Sheet
  
  NoSheets = SAPSheets.count
  For I = LastSheetIndex + 1 To NoSheets
    Set ws = SAPSheets.item(I)
    ws.Visible = xlSheetHidden
  Next I
  
End Sub
'*******************************************************************************
'   Receive row/column-oriented formats
'*******************************************************************************
Public Sub Workbook_receiveRCFormats()
 
  Dim SAPTable As Object
  Dim SAPTableRow As Object
  
  Dim SAPRCFormat As SAPRCFormat
  
  Dim Index As Long

  Dim NoItems As Long
  Dim I As Long

 
  Set SAPContainer = ThisWorkbook.Container
  Set SAPTable = SAPContainer.tables("RC_FORMATS").Table
  For Each SAPTableRow In SAPTable.Rows
    Index = SAPTableRow("INDEX")
    NoItems = SAPRCFormats.count
    If Index <= NoItems Then
      Set SAPRCFormat = SAPRCFormats.item(Index)
    Else
      For I = NoItems + 1 To Index
        Set SAPRCFormat = New SAPRCFormat
        SAPRCFormats.Add SAPRCFormat
      Next I
    End If
    SAPRCFormat.setFormat SAPTableRow
  Next SAPTableRow

End Sub
'*******************************************************************************
'   Receive scalar formats
'*******************************************************************************
Public Sub Workbook_receiveCellFormats()
 
  Dim SAPTable As Object
  Dim SAPTableRow As Object
  
  Dim SAPCellFormat As SAPCellFormat
  
  Dim Index As Long

  Dim NoItems As Long
  Dim I As Long

 
  Set SAPContainer = ThisWorkbook.Container
  Set SAPTable = SAPContainer.tables("CELL_FORMATS").Table
  For Each SAPTableRow In SAPTable.Rows
    Index = SAPTableRow("INDEX")
    NoItems = SAPCellFormats.count
    If Index <= NoItems Then
      Set SAPCellFormat = SAPCellFormats.item(Index)
    Else
      For I = NoItems + 1 To Index
        Set SAPCellFormat = New SAPCellFormat
        SAPCellFormats.Add SAPCellFormat
      Next I
    End If
    SAPCellFormat.setFormat SAPTableRow
  Next SAPTableRow

End Sub
'*******************************************************************************
'   Receive number formats
'*******************************************************************************
Public Sub Workbook_receiveNumberFormats()
 
  Dim SAPTable As Object
  Dim SAPTableRow As Object

  Dim SAPNumberFormat As SAPNumberFormat

  Dim Index As Long
  Dim NoItems As Long
  Dim I As Long

 
  Set SAPContainer = ThisWorkbook.Container

  Set SAPTable = SAPContainer.tables("NUMBER_FORMATS").Table
  For Each SAPTableRow In SAPTable.Rows
  
    Index = SAPTableRow("INDEX")
    NoItems = SAPNumberFormats.count
    If Index <= NoItems Then
      Set SAPNumberFormat = SAPNumberFormats.item(Index)
    Else
      For I = NoItems + 1 To Index
        Set SAPNumberFormat = New SAPNumberFormat
        SAPNumberFormats.Add SAPNumberFormat
      Next I
    End If
    SAPNumberFormat.setFormat SAPTableRow
    
  Next SAPTableRow

End Sub
'*******************************************************************************
'   Receive formats
'*******************************************************************************
Public Sub Workbook_receiveFormats()
 
  Dim SAPTable As Object
  Dim SAPTableRow As Object
  
  Dim SAPFormat As SAPFormat
  
  Dim Index As Long

  Dim NoItems As Long
  Dim I As Long

 
  Set SAPContainer = ThisWorkbook.Container
  Set SAPTable = SAPContainer.tables("FORMATS").Table
  For Each SAPTableRow In SAPTable.Rows
    Index = SAPTableRow("INDEX")
    NoItems = SAPFormats.count
    If Index <= NoItems Then
      Set SAPFormat = SAPFormats.item(Index)
    Else
      For I = NoItems + 1 To Index
        Set SAPFormat = New SAPFormat
        SAPFormats.Add SAPFormat
      Next I
    End If
    SAPFormat.setFormat SAPTableRow
  Next SAPTableRow

End Sub
'*******************************************************************************
'   Set color palette
'*******************************************************************************
Public Sub Workbook_setColors()

  Dim SAPTable As Object
  Dim SAPTableRow As Object

  Dim ColorIndex As Integer
  Dim ColorRed As Integer
  Dim ColorGreen As Integer
  Dim ColorBlue As Integer

  Set SAPContainer = ThisWorkbook.Container

' Process text cells

  Set SAPTable = SAPContainer.tables("COLORS").Table
  For Each SAPTableRow In SAPTable.Rows
    ColorIndex = SAPTableRow("COLOR_INDEX") + SAPColorOffset
    ColorRed = SAPTableRow("RED")
    ColorGreen = SAPTableRow("GREEN")
    ColorBlue = SAPTableRow("BLUE")
    ThisWorkbook.Colors(ColorIndex) = RGB(ColorRed, ColorGreen, ColorBlue)
  Next SAPTableRow

End Sub
'*******************************************************************************
'   Send selection
'*******************************************************************************Sub SAPSheet_getData(SheetId As Variant)
Public Sub Workbook_sendSelection()

  Dim SAPSheetsTable As Object
  Dim SAPSheetsTableRow As Object
  Dim SAPRangesTable As Object
  Dim SAPRangesTableRow As Object

  Dim SelectedRange As Range
  
  Dim SAPSheet As Worksheet
  
  Dim NoSheets As Long
  Dim SheetIndex As Long
  
  
  Set SAPSheetsTable = SAPContainer.tables("SHEETS").Table
  Set SAPRangesTable = SAPContainer.tables("RANGES").Table
  
  SAPSheetsTable.Rows.removeAll
  SAPRangesTable.Rows.removeAll

  NoSheets = SAPSheets.count
  For SheetIndex = 1 To NoSheets
    Set SAPSheet = SAPSheets.item(SheetIndex)
    Set SAPSheetsTableRow = SAPSheetsTable.Rows.Add
    SAPSheetsTableRow.cell(1) = SheetIndex
    SAPSheetsTableRow.cell(2) = SAPSheet.Name
    If SAPSheet.Name = ActiveSheet.Name Then
      SAPSheetsTableRow.cell(3) = "1"
    Else
      SAPSheetsTableRow.cell(3) = "0"
    End If
  Next SheetIndex
  
  If SAPSheetsTable.Rows.count = 0 Then
    Exit Sub
  End If
  
  For Each SelectedRange In Selection.Areas
    Set SAPRangesTableRow = SAPRangesTable.Rows.Add
    SAPRangesTableRow.cell(1) = SelectedRange.Row
    SAPRangesTableRow.cell(2) = SelectedRange.Column
    SAPRangesTableRow.cell(3) = SelectedRange.Rows.count
    SAPRangesTableRow.cell(4) = SelectedRange.Columns.count
  Next SelectedRange

End Sub
'*******************************************************************************
'   Receive format assignments
'*******************************************************************************Sub SAPSheet_getData(SheetId As Variant)
Public Sub Worksheet_receiveFormatAssignments(SheetIndex As Long)


  Dim SAPAreaTable As Object
  Dim SAPAreaTableRow As Object
  Dim SAPRangesTable As Object
  Dim SAPRangesTableRow As Object
  
  Dim SAPFormat As SAPFormat
    
  Dim ws As Worksheet
  Dim Area As Range
  Dim NewRange As Range
  
  Dim TempSheetIndex As Long
  Dim LastSheetIndex As Long
  
  Dim FormatIndex As Long
  Dim I As Long
  Dim P_From As Long
  Dim P_To As Long
  Dim RowIndexFrom As Long
  Dim RowIndexTo As Long
  Dim ColumnIndexFrom As Long
  Dim ColumnIndexTo As Long
  

' Process format assignments

  Set SAPAreaTable = SAPContainer.tables("FORMAT_ASSIGNMENTS").Table
  Set SAPRangesTable = SAPContainer.tables("RANGES").Table

  LastSheetIndex = 0
  For Each SAPAreaTableRow In SAPAreaTable.Rows
  
    TempSheetIndex = SAPAreaTableRow("SHEET_INDEX")
    If TempSheetIndex = 0 Then
      TempSheetIndex = SheetIndex
    End If
    If TempSheetIndex <> LastSheetIndex Then
      Set ws = SAPSheets.item(TempSheetIndex)
      LastSheetIndex = TempSheetIndex
    End If
    
 
    Set Area = Nothing
    
    FormatIndex = SAPAreaTableRow("FORMAT_INDEX")
    P_From = SAPAreaTableRow("P_FROM")
    P_To = SAPAreaTableRow("P_TO")
    If (FormatIndex > 0) And _
       (P_From <= P_To) Then
        
      For I = P_From To P_To
      
        Set SAPRangesTableRow = SAPRangesTable.Rows(I)
        RowIndexFrom = SAPRangesTableRow("ROW_OFFSET")
        ColumnIndexFrom = SAPRangesTableRow("COLUMN_OFFSET")
        RowIndexTo = RowIndexFrom + SAPRangesTableRow("HEIGHT") - 1
        ColumnIndexTo = ColumnIndexFrom + SAPRangesTableRow("WIDTH") - 1
        If RowIndexFrom = 0 And ColumnIndexFrom = 0 Then
          Set NewRange = ws.Cells
        ElseIf RowIndexFrom = 0 Then
          Set NewRange = ws.Range(ws.Columns(ColumnIndexFrom), _
                                  ws.Columns(ColumnIndexTo))
        ElseIf ColumnIndexFrom = 0 Then
          Set NewRange = ws.Range(ws.Rows(RowIndexFrom), _
                                  ws.Rows(RowIndexTo))
        Else
          If (RowIndexFrom <= RowIndexTo) And _
             (ColumnIndexFrom <= ColumnIndexTo) Then
            Set NewRange = ws.Range(ws.Cells(RowIndexFrom, ColumnIndexFrom), _
                                    ws.Cells(RowIndexTo, ColumnIndexTo))
          Else
            Set NewRange = Nothing
          End If
        End If
          
'       add new range to area
        If Not NewRange Is Nothing Then
          If Area Is Nothing Then
            Set Area = NewRange
          Else
            Set Area = Union(Area, NewRange)
          End If
        End If
          
      Next I
      
      If Not Area Is Nothing Then
        Set SAPFormat = SAPFormats.item(FormatIndex)
        SAPFormat.assignToRange Area
      End If
      
    End If

  Next SAPAreaTableRow

End Sub
'*******************************************************************************
'   Receive sheet texts
'*******************************************************************************Sub SAPSheet_getData(SheetId As Variant)
Public Sub Worksheet_receiveTexts(SheetIndex As Long)

  Dim R3Ranges  As Object
  Dim R3TextCells As Object
  Dim R3TextGrid As Object
  
  Dim R3Range As Object

  
  Dim ws As Worksheet
  Dim Range As Range
  
  Dim TempSheetIndex As Long
  Dim LastSheetIndex As Long
  
  Dim nro As Long
  Dim nco As Long
  Dim nrh As Long
  Dim ncw As Long
  
  Dim P_From As Long
  Dim P_To As Long
  
  
' Process text cells

  Set R3Ranges = SAPContainer.tables("DATA_RANGES").Table
  Set R3TextCells = SAPContainer.tables("TEXT_CELLS").Table
  Set R3TextGrid = SAPContainer.tables("TEXT_GRID").Table

  LastSheetIndex = 0
  For Each R3Range In R3Ranges.Rows
    
    TempSheetIndex = R3Range("SHEET_INDEX")
    If TempSheetIndex = 0 Then
      TempSheetIndex = SheetIndex
    End If
    If TempSheetIndex <> LastSheetIndex Then
      Set ws = SAPSheets.item(TempSheetIndex)
      LastSheetIndex = TempSheetIndex
    End If

    nro = R3Range("ROW_OFFSET")
    nco = R3Range("COLUMN_OFFSET")
    nrh = R3Range("HEIGHT")
    ncw = R3Range("WIDTH")
  
    Set Range = ws.Range(ws.Cells(nro, nco), ws.Cells(nro + nrh - 1, nco + ncw - 1))
    
    P_From = R3Range("P_FROM")
    P_To = R3Range("P_TO")
    If P_From <= P_To Then
      Set R3Range = R3TextCells.Ranges.Add
      R3Range.lowerbound = P_From
      R3Range.upperbound = P_To
      R3Range.leftbound = 1
      R3Range.rightbound = 3
      R3TextGrid.FreeTable
      R3TextGrid.data = R3Range.data
      Range.Value = R3TextGrid.fetchgrid(1, nrh, 2, ncw, 3).data
    Else
      Range.Value = ""
    End If
     
  Next R3Range

End Sub
'*******************************************************************************
'   Receive sheet numbers
'*******************************************************************************Sub SAPSheet_getData(SheetId As Variant)
Public Sub Worksheet_receiveNumbers(SheetIndex As Long)

  Dim R3Ranges  As Object
  Dim R3NumRanges As Object
  Dim R3NumCells As Object
  Dim R3NumGrid As Object

  Dim R3Range As Object

  Dim ws As Worksheet
  Dim Range As Range
  
  Dim TempSheetIndex As Long
  Dim LastSheetIndex As Long

  Dim nro As Long
  Dim nco As Long
  Dim nrh As Long
  Dim ncw As Long
  
  Dim P_From As Long
  Dim P_To As Long
  

  Set ws = SAPSheets.item(SheetIndex)
  
' Process data cells

  Set R3Ranges = SAPContainer.tables("DATA_RANGES").Table
  Set R3NumCells = SAPContainer.tables("NUM_CELLS").Table
  Set R3NumGrid = SAPContainer.tables("NUM_GRID").Table
 
  LastSheetIndex = 0
  For Each R3Range In R3Ranges.Rows
    
    TempSheetIndex = R3Range("SHEET_INDEX")
    If TempSheetIndex = 0 Then
      TempSheetIndex = SheetIndex
    End If
    If TempSheetIndex <> LastSheetIndex Then
      Set ws = SAPSheets.item(TempSheetIndex)
      LastSheetIndex = TempSheetIndex
    End If
  
    nro = R3Range("ROW_OFFSET")
    nco = R3Range("COLUMN_OFFSET")
    nrh = R3Range("HEIGHT")
    ncw = R3Range("WIDTH")
  
    
    Set Range = ws.Range(ws.Cells(nro, nco), ws.Cells(nro + nrh - 1, nco + ncw - 1))
    
    P_From = R3Range("P_FROM")
    P_To = R3Range("P_TO")
    If P_From <= P_To Then
      Set R3Range = R3NumCells.Ranges.Add
      R3Range.lowerbound = P_From
      R3Range.upperbound = P_To
      R3Range.leftbound = 1
      R3Range.rightbound = 3
      R3NumGrid.FreeTable
      R3NumGrid.data = R3Range.data
      Range.Value = R3NumGrid.fetchgrid(1, nrh, 2, ncw, 3).data
    Else
      Range.Value = 0
    End If
  
  Next R3Range

End Sub
'*******************************************************************************
'   Receive outlines
'*******************************************************************************Sub SAPSheet_getData(SheetId As Variant)
Public Sub Worksheet_receiveOutlines(SheetIndex As Long)
                                     
  Dim SAPTable  As Object
  Dim SAPTableRow As Object

  Dim ws As Worksheet
  
  Dim TempSheetIndex As Long
  Dim LastSheetIndex As Long
  
  Dim FromIndex As Long
  Dim ToIndex As Long
  

' Process data cells

  Set SAPTable = SAPContainer.tables("OUTLINES").Table

  LastSheetIndex = 0
  For Each SAPTableRow In SAPTable.Rows
    
    TempSheetIndex = SAPTableRow("SHEET_INDEX")
    If TempSheetIndex = 0 Then
      TempSheetIndex = SheetIndex
    End If
    If TempSheetIndex <> LastSheetIndex Then
      Set ws = SAPSheets.item(TempSheetIndex)
      LastSheetIndex = TempSheetIndex
    End If
        
    FromIndex = SAPTableRow("FROM_INDEX")
    ToIndex = SAPTableRow("TO_INDEX")
    If FromIndex > 0 And FromIndex <= ToIndex Then
      If SAPTableRow("RC_INDICATOR") = "R" Then
        ws.Range(ws.Rows(FromIndex), ws.Rows(ToIndex)).Rows.Group
      Else
        ws.Range(ws.Columns(FromIndex), ws.Columns(ToIndex)).Columns.Group
      End If
    End If
  
  Next SAPTableRow

End Sub
'*******************************************************************************
'
'*******************************************************************************
Public Sub Workbook_executeCommand(Command As Variant, SheetIndex As Long, Param As Variant)

  Dim NoSheets As Long
  Dim I As Long
  
  Dim SAPSheet As Worksheet
  
  Select Case Command
    Case "PR+"
      NoSheets = SAPSheets.count
      For I = 1 To NoSheets
        Set SAPSheet = SAPSheets.item(I)
        SAPSheet.Protect , , , , True
        SAPSheet.EnableOutlining = True
      Next I
    Case "PR-"
      NoSheets = SAPSheets.count
      For I = 1 To NoSheets
        Set SAPSheet = SAPSheets.item(I)
        SAPSheet.Unprotect
      Next I
    Case Else
    
  End Select
    
End Sub
'*******************************************************************************
'
'*******************************************************************************
Public Sub Workbook_activateSheet(SheetIndex As Long, Protection As Variant)

  Dim ws As Worksheet
  Dim NoSheets As Long
  
  NoSheets = SAPSheets.count
  If SheetIndex >= 1 And SheetIndex <= NoSheets Then
    Set ws = SAPSheets.item(SheetIndex)
    ws.Activate
  End If
 
  Call Workbook_executeCommand(Protection, SheetIndex, "")
  
  Application.ScreenUpdating = SaveScreenUpdating
  
End Sub


' InQuest injected base64 decoded content
' x)br

INQUEST-PP=macro
