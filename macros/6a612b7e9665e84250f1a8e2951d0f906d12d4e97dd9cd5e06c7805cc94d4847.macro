Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  AbortReading
End Sub

Private Sub Workbook_Open()
  Dim driverArray As Variant
  
  driverArray = ListODBCDrivers()
  
  Dim i As Long
  Dim y As Long
  y = 7
  For i = LBound(driverArray) To UBound(driverArray)
    Dim s As String
    s = GetDriverDLL(driverArray(i))
    If s <> "" Then
      Tabelle1.ComboBox2.AddItem driverArray(i)
      y = y + 1
    End If
  Next i
  
  Cells(4, 3) = GetDriverDLL(Tabelle1.ComboBox2)

End Sub
Attribute VB_Name = "DriverHandler"
Option Explicit

Private Const SQL_FETCH_NEXT As Long = 1
Private Const SQL_FETCH_FIRST As Long = 2
Private Const SQL_SUCCESS As Long = 0
Private Const SQL_NO_DATA_FOUND As Long = 100

Private Const SQL_NTS As Long = -3
Private Const SQL_DROP As Long = 1

Private Const SQL_MAX_DESC_LENGTH As Long = 128
Private Const SQL_MAX_DSN_LENGTH As Long = 32

Private Const SQL_NULL_HANDLE As Long = 0
Private Const SQL_HANDLE_ENV As Long = 1
Private Const SQL_HANDLE_DBC As Long = 2
Private Const SQL_HANDLE_STMT As Long = 3
Private Const SQL_HANDLE_DESC As Long = 4

Private Const SQL_ATTR_ODBC_VERSION As Long = 200
Private Const SQL_OV_ODBC3 As Long = 3
Private Const SQL_IS_INTEGER As Long = (-6)
Private Const ODBC_ADD_DSN As Long = 1
Private Const ODBC_BOTH_DSN As Long = 0
Private Const ODBC_USER_DSN As Long = 1
Private Const ODBC_SYSTEM_DSN As Long = 2
Private Const SQL_NEED_DATA As Long = 99
Private Const SQL_ERROR As Long = -1

#If Win64 Then
Private Declare PtrSafe Function SQLAllocEnv Lib "odbc32.dll" (ByRef phenv As LongPtr) As Integer
Private Declare PtrSafe Function SQLFreeEnv Lib "odbc32.dll" (ByVal hEnv As LongPtr) As Integer
Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
Declare PtrSafe Function SQLDrivers Lib "odbc32.dll" _
                                    (ByVal hEnv As LongPtr, _
                                     ByVal fDirection As Integer, _
                                     ByVal szDriverDesc As String, _
                                     ByVal cbDriverDescMax As Integer, _
                                     pcbDriverDesc As Integer, _
                                     ByVal szDriverAttr As String, _
                                     ByVal cbDrvrAttrMax As Integer, _
                                     pcbDrvrAttr As Integer) As Integer

#Else
Declare Function SQLAllocEnv Lib "odbc32.dll" (phenv As Long) As Integer
Declare Function SQLFreeEnv Lib "odbc32.dll" (ByVal hEnv As Long) As Integer
Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
Declare Function SQLDrivers Lib "odbc32.dll" _
                                    (ByVal hEnv As Long, _
                                     ByVal fDirection As Integer, _
                                     ByVal szDriverDesc As String, _
                                     ByVal cbDriverDescMax As Integer, _
                                     pcbDriverDesc As Integer, _
                                     ByVal szDriverAttr As String, _
                                     ByVal cbDrvrAttrMax As Integer, _
                                     pcbDrvrAttr As Integer) As Integer

#End If



'Gibt eine Liste aller im System installierten ODBC-Treiber in einem String-Array zur|fffd|ck
'Bsp.: ListODBCDrivers(0) >> "Microsoft Access-Treiber (*.mdb)"
Public Function ListODBCDrivers() As String()
    Dim ret As Long
    Dim j As Long
#If Win64 Then
    Dim hEnv As LongPtr
#Else
    Dim hEnv As Long
#End If
    Dim arrDrv() As String
    Dim strDriver As String * 512
    Dim strAttrib As String * 512
    Dim lDrv As Integer
    Dim lAtr As Integer

    ret = SQLAllocEnv(hEnv)
    Do While ret = SQL_SUCCESS
        ret = SQLDrivers(hEnv, SQL_FETCH_NEXT, strDriver, 512, lDrv, strAttrib, 512, lAtr)
        If ret <> SQL_NO_DATA_FOUND Then
            ReDim Preserve arrDrv(j)
            arrDrv(j) = Left(strDriver, lDrv)
'            Debug.Print "D:" & arrDrv(j)
            j = j + 1
        End If
    Loop
    ListODBCDrivers = arrDrv
    Call SQLFreeEnv(hEnv)

End Function




Public Function GetDriverDLL(strDriverName) As String
  Dim s As String
  s = RegKeyRead("HKEY_CURRENT_USER\SOFTWARE\ODBC\ODBC.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBC.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_CLASSES_ROOT\SOFTWARE\ODBC\ODBC.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If
  
  s = RegKeyRead("HKEY_CURRENT_USER\SOFTWARE\ODBC\ODBCINST.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_CLASSES_ROOT\SOFTWARE\ODBC\ODBCINST.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If
  
  s = RegKeyRead("HKEY_CURRENT_USER\SOFTWARE\WOW6432Node\ODBC\ODBC.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\ODBC\ODBC.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_CLASSES_ROOT\SOFTWARE\WOW6432Node\ODBC\ODBC.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If
  
  
  s = RegKeyRead("HKEY_CURRENT_USER\SOFTWARE\WOW6432Node\ODBC\ODBCINST.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\ODBC\ODBCINST.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_CLASSES_ROOT\SOFTWARE\WOW6432Node\ODBC\ODBCINST.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If
  
End Function

Private Function RegKeyRead(i_RegKey As String) As String
Dim myWS As Object

  On Error Resume Next
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  'read key from registry
  RegKeyRead = myWS.RegRead(i_RegKey)
End Function



Attribute VB_Name = "Globals"
Option Explicit

#If Win64 Then
Declare PtrSafe Function timeGetTime Lib "winmm.dll" () As Long
#Else
Declare Function timeGetTime Lib "winmm.dll" () As Long
#End If

Public G_Y As Long
Public G_iTimerSet As Double
Public G_Firstcall As Boolean
Public G_Connections(4) As Object

' Get Database Connection
Function GetConnection(ByRef errtxt As String, Optional ByVal waitendless As Boolean = False) As Object

        errtxt = ""
        Err.Clear
        On Error Resume Next
        
        Dim conn As Object
        Set conn = CreateObject("ADODB.Connection")
        conn.CursorLocation = 3
        Set GetConnection = Nothing
        Dim cnt As Long
        cnt = 0

        Dim tim As Single
        tim = Timer
checkAgain:
        conn.ConnectionTimeout = 5
        
        ' Read the User and the password from cell B3 and B4
        Dim conString As String
        If Tabelle1.ComboBox1.Value = "MS-SQL" Then
          conString = "Driver={" & Tabelle1.ComboBox2 & "};Server=" & Cells(5, 2) & ";Port=" & IIf(Cells(6, 2) <> "", Cells(6, 2), "1433") & ";Database=" & Cells(7, 2) & ";"
        Else
          conString = "Driver={" & Tabelle1.ComboBox2 & "};dbq=" & Cells(5, 2) & ":" & IIf(Cells(6, 2) <> "", Cells(6, 2), "1521") & IIf(Cells(7, 2) <> "", "/" & Cells(7, 2), "") & ";"
        End If
        
        conn.Open conString, Tabelle1.Cells(8, 2), Tabelle1.Cells(9, 2)
        
        ' Any errror? Try again!
        If Err.Number <> 0 Then
            errtxt = Err.Number & " - " & Err.Description
            Err.Clear
            Sleep 100
            cnt = cnt + 1
            If Not waitendless Then
                If cnt > 5 Then
                    Set conn = Nothing
                    Exit Function
                End If
                GoTo checkAgain
            End If
        End If
        
        ' Ok, thats it
        Err.Clear
        Set GetConnection = conn

End Function

' Commit one SQL and store results
Sub CheckSQL(pos As Long)
  
  ' Set timer for measurement
  Dim hrs As New HighResTimer
  hrs.DoStart
  hrs.StartCounting "Timecheck"
  
  
  ' Open the connection to the database
  Dim conn As Object
  Dim errstr As String
  
  If Tabelle1.Session = "Ein mal f|fffd|r alle SQLs" Then
    Set conn = G_Connections(1)
  ElseIf Tabelle1.Session = "Ein mal f|fffd|r jeden SQL" Then
    Set conn = G_Connections(pos)
  Else
    Set conn = GetConnection(errstr)
  End If
  
  

  Dim drs As Object
  Set drs = CreateObject("ADODB.Recordset")

  Dim rsCount As Long
  Dim rsSize As Long
  rsCount = 0
  
  ' Very simple open: "SELECT * FROM tablename" - Get the tablename from B5 - this is only a READ-ONLY test
  On Error GoTo nogo
  drs.Open Tabelle1.Cells(20 + pos, 2).Value, conn, ADODB.CursorTypeEnum.adOpenDynamic, ADODB.LockTypeEnum.adLockReadOnly
  
  ' Any data in the table?
  If Not drs.EOF Then
      Dim fld
      
      If G_Firstcall Then
        ' Count the field size with the first dataset
        For Each fld In drs.Fields
          If fld.Type = adLongVarWChar Or fld.Type = adLongVarChar Then
            rsSize = rsSize + fld.ActualSize
          Else
            rsSize = rsSize + fld.DefinedSize
          End If
        Next fld
      End If
      
      ' And now read all data
      Do While Not drs.EOF
          drs.MoveNext
          rsCount = rsCount + 1
      Loop
  End If
  drs.Close
  Set drs = Nothing
  
  ' Close connection
  If Tabelle1.Session = "Immer neu" Then
    conn.Close
  End If
  Set conn = Nothing

  ' Write results to the sheet
  Tabelle1.Cells(G_Y, 5 + (pos - 1) * 3 + 1) = hrs.GetCount("Timecheck")
  If G_Firstcall Then
    Tabelle1.Cells(44, 7 + (pos - 1) * 3) = rsSize
    Tabelle1.Cells(45, 7 + (pos - 1) * 3) = rsCount
  End If
  
  ' Stop timer
  hrs.DoStop
  
  Exit Sub
nogo:
  Tabelle1.Cells(G_Y, 5 + (pos - 1) * 3 + 1) = -3
  hrs.DoStop
  If Tabelle1.Session = "Immer neu" Then
    conn.Close
  End If
  Set conn = Nothing
  
End Sub


' Test reading
Private Sub DBTestRead()

  ' Store current time to Excel-Sheet
  Tabelle1.Cells(G_Y, 5) = Now
  CheckSQL 1
  CheckSQL 2
  CheckSQL 3
  CheckSQL 4
  
  ' Size the diagram to the new value amount (note: this is after the timer-results have been presented)
  ' Tabelle1.ChartObjects("Diagramm 3").Chart.SetSourceData Source:=Tabelle1.Range("=Speedtest!$E$46:$F$" & G_Y & ";Speedtest!$I$46:$I$" & G_Y & ";Speedtest!$L$46:$L$" & G_Y & ";Speedtest!$O$46:$O$" & G_Y), PlotBy:=xlColumns
  
  Tabelle1.ChartObjects("Diagramm 3").Chart.SeriesCollection(1).Values = "=Speedtest!$F$46:$F$" & G_Y
  Tabelle1.ChartObjects("Diagramm 3").Chart.SeriesCollection(2).Values = "=Speedtest!$I$46:$I$" & G_Y
  Tabelle1.ChartObjects("Diagramm 3").Chart.SeriesCollection(3).Values = "=Speedtest!$L$46:$L$" & G_Y
  Tabelle1.ChartObjects("Diagramm 3").Chart.SeriesCollection(4).Values = "=Speedtest!$O$46:$O$" & G_Y
  Tabelle1.ChartObjects("Diagramm 3").Chart.SeriesCollection(1).XValues = "=Speedtest!$E$46:$E$" & G_Y
  
  
  G_Firstcall = False

  G_Y = G_Y + 1
  
  ' set the next check
  G_iTimerSet = Now + TimeValue(CStr(Tabelle1.Cells(10, 2).Text))
  Application.OnTime G_iTimerSet, "DBTestRead"
  
End Sub

Sub AbortReading()

  If G_iTimerSet <> 0 Then
    Application.OnTime G_iTimerSet, "DBTestRead", , False
  End If
  G_iTimerSet = 0
  
  Dim i As Long
  For i = 1 To 4
    If Not G_Connections(i) Is Nothing Then
      G_Connections(i).Close
      Set G_Connections(i) = Nothing
    End If
  Next i

End Sub
Attribute VB_Name = "HighResTimer"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Enum TimeState
    Started
    Stopped
End Enum

Private startTime, endTime As Long
Private dur As Double
Private state As Currency
Private m_TimeCol As Collection

Public Function CollectionItemExists(c As Collection, name As String) As Boolean
  On Error GoTo notReadable
  Dim s As String
  s = CStr(c(name))
  CollectionItemExists = True
  Exit Function
  
notReadable:
  CollectionItemExists = False
End Function

Private Sub Class_Initialize()
    state = TimeState.Stopped
End Sub

Public Sub StartCounting(s As String)
  If CollectionItemExists(m_TimeCol, s) Then
    m_TimeCol.Remove s
  End If
  m_TimeCol.Add timeGetTime(), s
End Sub
Public Sub StopCounting(s As String)
  If CollectionItemExists(m_TimeCol, s) Then
    m_TimeCol.Remove s
  End If
End Sub

Function GetCount(s As String) As Double
  If Not CollectionItemExists(m_TimeCol, s) Then
    StartCounting s
    Exit Function
  End If
  GetCount = CDbl((timeGetTime() - m_TimeCol(s)) / 1000)
End Function


Public Sub DoStart()
    If state = TimeState.Started Then
        MsgBox "Cant' start, already started", vbCritical + vbSystemModal, "IDV-Suite DBSpeedTest"
        Exit Sub
    End If
    state = TimeState.Started
    startTime = timeGetTime()
    Set m_TimeCol = New Collection
End Sub

Public Function DoStop() As Double
    endTime = timeGetTime()
    If state = TimeState.Stopped Then
        MsgBox "Cant' start, already started", vbCritical + vbSystemModal, "IDV-Suite DBSpeedTest"
        Exit Function
    End If
    state = TimeState.Stopped
    dur = CDbl((endTime - startTime) / 1000)
    DoStop = dur
End Function

Public Property Get Duration() As Double
    If state = TimeState.Started Then
        MsgBox "Must call Stop() first", vbCritical + vbSystemModal, "IDV-Suite DBSpeedTest"
        Exit Function
    End If
    Duration = dur
End Property



Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "TestRead, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "AbortRead, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "ComboBox1, 8, 2, MSForms, ComboBox"
Attribute VB_Control = "ComboBox2, 9, 3, MSForms, ComboBox"
Attribute VB_Control = "Label1, 10, 4, MSForms, Label"
Attribute VB_Control = "Label2, 11, 5, MSForms, Label"
Attribute VB_Control = "TestConnection, 13, 6, MSForms, CommandButton"
Attribute VB_Control = "Session, 32, 7, MSForms, ComboBox"
Attribute VB_Control = "Label3, 33, 8, MSForms, Label"
Attribute VB_Control = "Label4, 34, 9, MSForms, Label"
Attribute VB_Control = "Label5, 35, 10, MSForms, Label"
Attribute VB_Control = "Label6, 37, 12, MSForms, Label"
Attribute VB_Control = "Label7, 38, 13, MSForms, Label"
Option Explicit


Private Sub AbortRead_Click()
  AbortReading
End Sub

Public Function LongFileName(ByVal short_name As String) As _
    String
Dim pos As Integer
Dim Result As String
Dim long_name As String

    ' Start after the drive letter if any.
    If Mid$(short_name, 2, 1) = ":" Then
        Result = Left$(short_name, 2)
        pos = 3
    Else
        Result = ""
        pos = 1
    End If

    ' Consider each section in the file name.
    Do While pos > 0
        ' Find the next \.
        pos = InStr(pos + 1, short_name, "\")

        ' Get the next piece of the path.
        If pos = 0 Then
            long_name = Dir$(short_name, vbNormal + _
                vbHidden + vbSystem + vbDirectory)
            If long_name = "" Then
              pos = InStrRev(short_name, "\")
              If pos > 0 Then
                long_name = Mid(short_name, pos + 1)
                pos = 0
              End If
            End If
        Else
            long_name = Dir$(Left$(short_name, pos - 1), _
                vbNormal + vbHidden + vbSystem + _
                vbDirectory)
        End If
        Result = Result & "\" & long_name
    Loop

    LongFileName = Result
End Function

Private Sub ComboBox2_Change()
  Cells(4, 3) = LongFileName(GetDriverDLL(ComboBox2))
End Sub


Private Sub TestConnection_Click()
  Dim o As Object
  Dim errstr As String
  Set o = GetConnection(errstr)
  If Not o Is Nothing Then
    Cells(16, 2).Value = "Verbindung erfolgreich! (" & Now & ")"
    o.Close
    Set o = Nothing
  Else
    Cells(16, 2).Value = "Verbindung nicht erfolgreich! (" & Now & ")" & vbCrLf & "Fehler: " & errstr
  End If
End Sub

Private Sub TestRead_Click()
  Tabelle1.Range("A1").Select
  Tabelle1.Range("E46:Q2000").ClearContents
  G_Y = 46
  G_iTimerSet = Now
  G_Firstcall = True
  
  Dim i As Long
  For i = 1 To 4
    Set G_Connections(i) = Nothing
  Next i
  
  Dim errstr As String
  
  If Tabelle1.Session = "Ein mal f|fffd|r alle SQLs" Then
      Set G_Connections(1) = GetConnection(errstr)
      If errstr <> "" Then
        MsgBox errstr, vbCritical
        AbortReading
        Exit Sub
      End If
  ElseIf Tabelle1.Session = "Ein mal f|fffd|r jeden SQL" Then
    For i = 1 To 4
      Set G_Connections(i) = GetConnection(errstr)
      If errstr <> "" Then
        MsgBox errstr, vbCritical
        AbortReading
        Exit Sub
      End If
    Next i
  End If
  
  Application.OnTime G_iTimerSet, "DBTestRead"
End Sub




INQUEST-PP=macro
