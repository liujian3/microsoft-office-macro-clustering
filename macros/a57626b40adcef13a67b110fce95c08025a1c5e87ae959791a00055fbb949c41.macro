Attribute VB_Name = "Actions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public noupdate As Boolean

Private Enum TableCols  'see also TPGToDoITem this enum should match the one there
   icNumber = 3
   icShowInStatus
   icevent
   icdate
   icsubject
   ictodo
   icResponsible
   icDueDate
   icstatus
End Enum

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)

If (InRange(Target, GetTable.ValuesRange.Resize(GetTable.ValuesRange.rows.Count + 1))) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext True, True
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim c
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "Worksheet_Change"

    If noupdate Then GoTo Fit:
    
    If Target.Column > icdate Then
        If Meeting.IsSelected And IsEmpty(Cells(Target.row, icevent)) And IsEmpty(Cells(Target.row, icdate)) Then
            'FetchDataFromMeeting but don't set the event if the user has already entered a date or an event
            Cells(Target.row, icevent).value = Meeting.Range("Meeting.Name").value
            Cells(Target.row, icdate).value = Meeting.Range("Meeting.Date").value
        Else                        ' FetchDefaultData
            CellFunctions.SetCellIfEmpty Target.row, icdate, Date
        End If
        CellFunctions.SetCellIfEmpty Target.row, icstatus, appGetLOCText("undone")
    ElseIf (Target.Column = icevent) And (Target.Cells.Count = 1) Then
        'if existing meeting selected then get date
        For Each c In MeetingDetails.Range("MeetingDetails").offset(0, 1)
            If c.value = Target.value Then
                Cells(Target.row, icdate).value = c.offset(0, 1).value
                Exit For
            End If
        Next
    End If
    
Fit:
    GetTable.bAutoFit = True
    If GetTable.CellAutoFit(Target) Then GoTo subend
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Actions.Worksheet_Change error:"
    Resume subend
End Sub

Private Function GetTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "GetTable"

    t.SetTable Me.Range("Actions.Table"), True, False, TemplateFirstrow, 10
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Actions.GetTable error:"
    Resume subend
End Function

Public Function GetActionItemsForStatusReport() As Collection
    Dim actionItems As Collection
    Dim actionItem As TPGToDoItem
    Dim R As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "GetActionItemsForStatusReport"

    Set actionItems = New Collection
    For Each R In GetShowInStatusRange
        If R.value = "x" Then
            Set actionItem = New TPGToDoItem
            actionItem.LoadFromTable R.row
            actionItems.Add actionItem
        End If
    Next
    Set GetActionItemsForStatusReport = actionItems

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Actions.GetActionItemsForStatusReport error:"
    Resume subend
End Function

Private Function GetShowInStatusRange() As Range
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "GetShowInStatusRange"

    Set GetShowInStatusRange = Intersect(Range("Actions.Table"), Cells(1, icShowInStatus).EntireColumn).Resize(Range("Actions.Table").rows.Count - 2).offset(1)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Actions.GetShowInStatusRange error:"
    Resume subend
End Function

Public Sub cmdClearFormat_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "cmdClearFormat_Click"

    GetTable.ClearFormat_Clicked

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Actions.cmdClearFormat_Click error:"
    Resume subend
End Sub

'Public Sub cmdHelp_Click()
'    Dim url As String
''#    url = "file:///" & Replace(ActiveWorkbook.Path, "\", "/") & "/TPG_ProjectHandbook_User-Guide.htm%23_Toc239754163"
'    url = "file:///" & Replace(ActiveWorkbook.Path, "\", "/") & "/TPG_ProjectHandbook_User-Guide.htm#_Toc239754163"
'    InlineHelp.OpenUrl url
'End Sub

Public Sub cmdSetFormat_Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "cmdSetFormat_Click"
    
    cmdSetFormat
        
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Actions.cmdSetFormat_Click error:"
    Resume subend
End Sub

Public Sub cmdSetFormat()
    Dim R As Range
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "cmdSetFormat"

    s = "Actions.Table"
    For Each R In GetTable.ValuesRange(1)
        Select Case R.offset(0, 7).value
        Case appGetLOCText("done")
            R.offset(0, 7).Interior.Color = RGB(112, 173, 71)
        Case appGetLOCText("undone")
            If R.offset(0, 6).value < Application.Names("Cover.StatusDate").RefersToRange.value Then
                R.offset(0, 7).Interior.Color = RGB(227, 0, 27)
            Else
                R.offset(0, 7).Interior.Color = RGB(255, 255, 255)
            End If
        Case appGetLOCText("ongoing")
            If R.offset(0, 6).value < Application.Names("Cover.StatusDate").RefersToRange.value Then
                R.offset(0, 7).Interior.Color = RGB(255, 192, 0)
            Else
                R.offset(0, 7).Interior.Color = RGB(255, 255, 255)
            End If
        Case Else
            R.offset(0, 7).Interior.Color = RGB(255, 255, 255)
        End Select
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Actions.cmdSetFormat error:"
    Resume subend
    
End Sub

Public Sub cmdAutoFilter_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "cmdAutoFilter_Click"

    GetTable.Autofilter_Clicked 1

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Actions.cmdAutoFilter_Click error:"
    Resume subend
End Sub

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "cmdInsert_Click"

    Me.noupdate = True
    
    GetTable.InsertRow_Clicked ActiveCell
    
    Me.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Actions.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "cmdDelete_Click"

    Me.noupdate = True
    
    GetTable.DeleteRow_Clicked ActiveCell
    Meeting.SyncActions
    Me.noupdate = False
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Actions.cmdDelete_Click error:"
    Resume subend
End Sub

Public Sub cmdSortAsc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "cmdSortAsc_Click"

    GetTable.Sort_Clicked ActiveCell, xlAscending

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Actions.cmdSortAsc_Click error:"
    Resume subend
End Sub

Public Sub cmdSortDesc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "cmdSortDesc_Click"

    GetTable.Sort_Clicked ActiveCell, xlDescending

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Actions.cmdSortDesc_Click error:"
    Resume subend
End Sub

Private Function GetColsOld() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "GetColsOld"

    cols.Add GetTPGColumn("date", 2, DateColumn)
    cols.Add GetTPGColumn("status", 3)
    cols.Add GetTPGColumn("todos", 5)
    cols.Add GetTPGColumn("responsible", 6)
    cols.Add GetTPGColumn("duedate", 7, DateColumn)
    
    Set GetColsOld = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Actions.GetColsOld error:"
    Resume subend
End Function

Private Function GetColsNoStatus20() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "GetColsNoStatus"

    cols.Add GetTPGColumn("event", 2)
    cols.Add GetTPGColumn("date", 3, DateColumn)
    cols.Add GetTPGColumn("status", 4)
    cols.Add GetTPGColumn("topic", 5)
    cols.Add GetTPGColumn("todos", 6)
    cols.Add GetTPGColumn("responsible", 7)
    cols.Add GetTPGColumn("duedate", 8, DateColumn)
    Set GetColsNoStatus20 = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Actions.GetColsNoStatus error:"
    Resume subend
End Function

Private Function GetColsNoStatus() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "GetColsNoStatus"

    cols.Add GetTPGColumn("event", 2)
    cols.Add GetTPGColumn("date", 3, DateColumn)
    cols.Add GetTPGColumn("topic", 4)
    cols.Add GetTPGColumn("todos", 5)
    cols.Add GetTPGColumn("responsible", 6)
    cols.Add GetTPGColumn("duedate", 7, DateColumn)
    cols.Add GetTPGColumn("status", 8)
    Set GetColsNoStatus = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Actions.GetColsNoStatus error:"
    Resume subend
End Function

Private Function GetCols20() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "GetCols"

    cols.Add GetTPGColumn("showinstatus", 1)
    cols.Add GetTPGColumn("event", 2)
    cols.Add GetTPGColumn("date", 3, DateColumn)
    cols.Add GetTPGColumn("status", 4)
    cols.Add GetTPGColumn("topic", 5)
    cols.Add GetTPGColumn("todos", 6)
    cols.Add GetTPGColumn("responsible", 7)
    cols.Add GetTPGColumn("duedate", 8, DateColumn)
    Set GetCols20 = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Actions.GetCols error:"
    Resume subend
End Function

Private Function GetCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "GetCols"

    cols.Add GetTPGColumn("showinstatus", 1)
    cols.Add GetTPGColumn("event", 2)
    cols.Add GetTPGColumn("date", 3, DateColumn)
    cols.Add GetTPGColumn("topic", 4)
    cols.Add GetTPGColumn("todos", 5)
    cols.Add GetTPGColumn("responsible", 6)
    cols.Add GetTPGColumn("duedate", 7, DateColumn)
    cols.Add GetTPGColumn("status", 8)
    Set GetCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Actions.GetCols error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    n.appendchild GetNodeFromTable(xmlDom, "actions", "action", GetTable.ValuesRange, GetCols)
    Set CreateXml = n.FirstChild

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Actions.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, sversion As String)
    
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "ImportXml"

    If Not Node Is Nothing Then
        
        reset
        Me.noupdate = True
'        Select Case sversion
'        Case "2.0.00", "2.0.01", "2.1.00"
'            If Not Node.FirstChild Is Nothing Then
'                If Node.FirstChild.FirstChild.BaseName = "showinstatus" Then
'                    ImportTableValues GetTable, Node, "action", GetCols20
'                Else
'                    ImportTableValues GetTable, Node, "action", GetColsNoStatus20
'                End If
'            End If
'        Case Else
            If Not Node.FirstChild Is Nothing Then
                If Node.FirstChild.FirstChild.BaseName = "showinstatus" Then
                    ImportTableValues GetTable, Node, "action", GetCols
                Else
                    ImportTableValues GetTable, Node, "action", GetColsNoStatus
                End If
            End If
'        End Select
        Me.noupdate = False
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Actions.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Actions", "reset"

    Me.noupdate = True
    GetTable.clear
    Me.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Actions.reset error:"
    Resume subend
End Sub

Attribute VB_Name = "Admin"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
'added for CRF Module
Private noupdate As Boolean

Private Sub Worksheet_Activate()
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "Worksheet_Activate"
'    modApp.UnprotectSheet Me
    If ModuleExists("SQLServerExport") Then
        Admin.rows(6).Hidden = False
        Admin.rows(7).Hidden = False
    Else
        Admin.rows(6).Hidden = True
        Admin.rows(7).Hidden = True
    End If
    If ModuleExists("MTA") Then
        Admin.Range("Admin.Methods.MTA").EntireRow.Hidden = False
    Else
        Admin.Range("Admin.Methods.MTA").EntireRow.Hidden = True
    End If
    If ModuleExists("CRF") Then
        Admin.Range("Admin.Methods.CRF").EntireRow.Hidden = False
    Else
        Admin.Range("Admin.Methods.CRF").EntireRow.Hidden = True
    End If
    
    'CRF Module
    Admin.Range("Admin.CRCategories").EntireColumn.Hidden = Not (ModuleExists("CRF"))
subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.Worksheet_Activate error:"
    Resume subend
End Sub

Public Function HasOrgUnit(orgUnit As String) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "HasOrgUnit"

'    HasOrgUnit = CellFunctions.IsStringInRange(orgUnit, Admin.Range("Admin.Org"))
    HasOrgUnit = False
    Dim c
    For Each c In Admin.Range("Admin.Org")
        If c.value = orgUnit Then
            HasOrgUnit = True
            Exit For
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Admin.HasOrgUnit error:"
    Resume subend
End Function

Public Function HasWorkCostType(wkt As String) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "HasWorkCostType"

    HasWorkCostType = CellFunctions.IsStringInRange(wkt, Admin.Range("Admin.WorkCostType"))

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Admin.HasWorkCostType error:"
    Resume subend
End Function

Public Function HasCostType(kt As String) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "HasCostType"

    HasCostType = CellFunctions.IsStringInRange(kt, Admin.Range("Admin.CostType"))

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Admin.HasCostType error:"
    Resume subend
End Function

Public Function HasComplexity(kt As String) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "HasComplexity"

    HasComplexity = CellFunctions.IsStringInRange(kt, Admin.Range("Admin.Complexity"))

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Admin.HasComplexity error:"
    Resume subend
End Function

Public Sub cmdAdminSave_Click()
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "cmdAdminSave_Click"
    
    Dim ct As TPGCostTypes
    Set ct = New TPGCostTypes
    ct.LoadFromAdmin
    If ct.Duplicates Then
        AppStopMsg appGetLOCText("msgduplicatecosttype")
        GoTo subend
    End If
    

'    UnprotectWorkbook "pmccTPG:-)"
'    UnprotectSheet Cover
    For i = 1 To 3
        If Admin.CustomFieldActive(i) Then
            Cover.Range("Cover.CFld" + Trim(CStr(i))).EntireRow.Hidden = False
        Else
            Cover.Range("Cover.CFld" + Trim(CStr(i))).EntireRow.Hidden = True
            Cover.Range("Cover.CFld" + Trim(CStr(i))).ClearContents
        End If
    Next
    
    'activate/deactivate modules
    If Me.Range("Admin.Module.PP").value = "x" Then
        SetCustomProperty Config, "ModulePersonalPlanning", "True"
    Else
        SetCustomProperty Config, "ModulePersonalPlanning", "False"
    End If
    
    'update ChangeRequestList if needed
    If (ModuleExists("CRF")) Then
            ChangeRequestList.SyncCategotyToChart
    End If

    
    'ProtectSheet Admin
    SetWBProtection False
    Cover.Activate
    SetVisibility Admin, xlSheetVeryHidden
    'ProtectWorkbook
'    ProtectSheet Cover
subend:
    Set ct = Nothing
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.cmdAdminSave_Click error:"
    Resume subend
End Sub

Public Function GetDepartmentAbbr(department As String) As String
    Dim abbr, result As String
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "GetDepartmentAbbr"

    result = department
    If Range("Admin.Org").Find(department) Is Nothing Then
        AppInfoMsg (appGetLOCText("adminDataMismatch"))
    Else
        abbr = Cells(Range("Admin.Org").Find(department).row, Range("Admin.OrgAbbr").Column).value
        If abbr <> "" Then result = abbr
    End If
    GetDepartmentAbbr = result

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Admin.GetDepartmentAbbr error:"
    Resume subend
End Function

Public Function GetDepartmentRate(department As String) As Double
    Dim abbr, result As String
    Dim c
    On Error GoTo suberr
'    modStack.PushCallStack "Admin", "GetDepartmentRate"

    For Each c In Admin.Range("Admin.Org")
        If c.value = department Then
            GetDepartmentRate = CDbl(c.offset(0, 1).value)
            Exit For
        End If
    Next
subend:
'    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Admin.GetDepartmentRate error:"
    Resume subend
End Function

Public Function GetDepartmentCostType(department As String) As String
    Dim abbr, result As String
    Dim c
    On Error GoTo suberr
'    modStack.PushCallStack "Admin", "GetDepartmentRate"
    
    For Each c In Admin.Range("Admin.Org")
        If c.value = department Then
            GetDepartmentCostType = CStr(c.offset(0, 2).value)
            Exit For
        End If
    Next
subend:
'    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Admin.GetDepartmentCostType error:"
    Resume subend
End Function

Public Function GetDepartmentColor(department As String, Optional bFont As Boolean = False) As Variant
    Dim result As Variant
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "GetDepartmentColor"

    If Range("Admin.Org").Find(department) Is Nothing Then
        If bFont Then
            result = RGB(0, 0, 0)
        Else
            result = RGB(255, 255, 255)
        End If
    Else
        If bFont Then
            result = Cells(Range("Admin.Org").Find(department).row, Range("Admin.Org").Column).Font.Color
        Else
            result = Cells(Range("Admin.Org").Find(department).row, Range("Admin.Org").Column).Interior.Color
        End If
    End If
    GetDepartmentColor = result

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Admin.GetDepartmentColor error:"
    Resume subend
End Function



Public Sub cmdAdminExport_Click()
    Dim filedialog
    Dim FileName As String
    Dim OBJXMLDOC As Variant
    Dim HEADING As Variant
    Dim top_node As Variant
    Dim MetadataNode As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "cmdAdminExport_Click"

    filedialog = Application.GetSaveAsFilename(ThisWorkbook.FullName & "_admin.xml", "Xml-Files (*.xml), *.xml")
    If filedialog <> False Then
        FileName = CStr(filedialog)
        
        
        ' Create the XML DOM object
        Set OBJXMLDOC = CreateObject("Microsoft.XMLDOM")
        OBJXMLDOC.async = False
                       
        
        ' NODE_PROCESSING_INSTRUCTION(7) --- reference http://www.devguru.com/Technologies/xmldom/quickref/obj_node.html
        Set HEADING = OBJXMLDOC.createNode(7, "xml", "")
        OBJXMLDOC.appendchild (HEADING)
        
        ' Set the root node
        Set top_node = OBJXMLDOC.createNode(1, "phbadmin", "")
        OBJXMLDOC.appendchild (top_node)
    
        Set MetadataNode = OBJXMLDOC.createNode(1, "metadata", "")
        AddNode OBJXMLDOC, MetadataNode, "version", "3.0.00"
        AddNode OBJXMLDOC, MetadataNode, "exportdate", Date
        AddNode OBJXMLDOC, MetadataNode, "exporttime", Time
        top_node.appendchild MetadataNode
        top_node.appendchild CreateXml(OBJXMLDOC)

        OBJXMLDOC.Save FileName
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.cmdAdminExport_Click error:"
    Resume subend
End Sub

Public Sub cmdAdminImport_Click()
    Dim metadata
    Dim filedialog
    Dim FileName As String
    Dim OBJXMLDOC As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "cmdAdminImport_Click"

    filedialog = Application.GetOpenFilename("Xml-Files (*.xml), *.xml")
    If filedialog <> False Then
        
        FileName = CStr(filedialog)
        
        ' Create the XML DOM object
        Set OBJXMLDOC = CreateObject("Microsoft.XMLDOM")
        OBJXMLDOC.async = False
        OBJXMLDOC.Load FileName
        
        Set metadata = OBJXMLDOC.SelectSingleNode("/phbadmin/metadata")
        If Not metadata Is Nothing Then
            'PHB Export file
            If (metadata.SelectSingleNode("version").Text = "1.0.1") Or _
                (metadata.SelectSingleNode("version").Text = "1.0.2") Or _
                (metadata.SelectSingleNode("version").Text = "3.0.00") Then
                noupdate = True
                ImportXml OBJXMLDOC.SelectSingleNode("phbadmin/admin")
                noupdate = False
                If (ModuleExists("CRF")) Then
                    ChangeRequestList.SyncCategotyToChart
                End If
            End If
        End If
    End If

subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.cmdAdminImport_Click error:"
    Resume subend
End Sub

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    Dim ncfld As Variant
    Dim nmod As Variant
    Dim cols As Collection
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    
    n.appendchild GetNodeFromTable(xmlDom, "complexity", "item", Me.Range("Admin.Complexity"))
    n.appendchild GetNodeFromTable(xmlDom, "category", "item", Me.Range("Admin.Category"))
    n.appendchild GetNodeFromTable(xmlDom, "impact", "item", Me.Range("Admin.Impact"))
    

    n.appendchild GetNodeFromTable(xmlDom, "statetag", "item", Me.Range("Admin.StateTag"))
    'n.appendchild GetNodeFromTable(xmlDom, "state", "item", Me.Range("Admin.State"))
    
    n.appendchild GetNodeFromTable(xmlDom, "costtype", "item", Me.Range("Admin.CostType"))
    n.appendchild GetNodeFromTable(xmlDom, "workcosttype", "item", Me.Range("Admin.WorkCostType"))
    
    'Added for SALK
    n.appendchild GetNodeFromTable(xmlDom, "portfolio", "item", Me.Range("Admin.Portfolio"))
    n.appendchild GetNodeFromTable(xmlDom, "department", "item", Me.Range("Admin.Department"))
    n.appendchild GetNodeFromTable(xmlDom, "unit", "item", Me.Range("Admin.Unit"))
    
    'added for CRF module
    If ModuleExists("CRF") Then
        n.appendchild GetNodeFromTable(xmlDom, "crcategory", "item", Me.Range("Admin.CRCategories"))
    End If
    
    AddNode xmlDom, n, "ressourceunits", Me.Range("Admin.ResourceUnits")
    AddNode xmlDom, n, "currency", Me.Range("Admin.Currency")
    AddNode xmlDom, n, "sqlserver", Me.Range("Admin.SQLServer")
    AddNode xmlDom, n, "database", Me.Range("Admin.DataBase")
    AddNode xmlDom, n, "cnntimeout", Me.Range("Admin.ConnectionTimeOut")
    AddNode xmlDom, n, "sqldateformat", Me.Range("Admin.SQLDateFormat")
    
    Set ncfld = xmlDom.createNode(1, "customfields", "")
    AddNode xmlDom, ncfld, "f1name", Me.Range("Admin.CFld1.Name")
    AddNode xmlDom, ncfld, "f2name", Me.Range("Admin.CFld2.Name")
    AddNode xmlDom, ncfld, "f3name", Me.Range("Admin.CFld3.Name")
    AddNode xmlDom, ncfld, "f1activate", Me.Range("Admin.CFld1.Activate")
    AddNode xmlDom, ncfld, "f2activate", Me.Range("Admin.CFld2.Activate")
    AddNode xmlDom, ncfld, "f3activate", Me.Range("Admin.CFld3.Activate")
    n.appendchild ncfld
    
    Set nmod = xmlDom.createNode(1, "modules", "")
    AddNode xmlDom, nmod, "PP", Me.Range("Admin.Module.PP")
    n.appendchild nmod
    
    Set cols = New Collection
    cols.Add GetTPGColumn("abbreviation", 1)
    cols.Add GetTPGColumn("name", 2)
    cols.Add GetTPGColumn("rate", 3)
    cols.Add GetTPGColumn("costtype", 4)
    n.appendchild GetNodeFromTable(xmlDom, "orgunits", "orgunit", Me.Range("Admin.OrgAbbr"), cols)
        
    Set cols = New Collection
    cols.Add GetTPGColumn("method", 1)
    
    For i = 1 To Me.Range("Admin.Complexity").rows.Count
        cols.Add GetTPGColumn("complexity_" & i, 1 + i)
    Next
    n.appendchild GetNodeFromTable(xmlDom, "methods", "method", Me.Range("Admin.Methods"), cols)
        
    Set CreateXml = n

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Admin.CreateXml error:"
    Resume subend
End Function

Public Sub reset(Optional bResetStates As Boolean = True)
    modStack.PushCallStack "Admin", "reset"
    Me.Range("Admin.Complexity").ClearContents
    Me.Range("Admin.Category").ClearContents
    Me.Range("Admin.Impact").ClearContents
    
    'modified for SALK
   ' If bResetStates Then Me.Range("Admin.StateTag").ClearContents 'dont clear Admin.State while it contains the translation formulas for statetag
   Me.Range("Admin.State").ClearContents
   
    Me.Range("Admin.CostType").ClearContents
    Me.Range("Admin.WorkCostType").ClearContents
    Me.Range("Admin.CRCategories").ClearContents
    Me.Range("Admin.ResourceUnits").ClearContents
    Me.Range("Admin.Currency").ClearContents
    Me.Range("Admin.SQLServer").ClearContents
    Me.Range("Admin.DataBase").ClearContents
    Me.Range("Admin.ConnectionTimeOut").ClearContents
    Me.Range("Admin.SQLDateFormat").ClearContents
    Me.Range("Admin.OrgAbbr").Resize(ColumnSize:=4).ClearContents
    getRange(Admin, "Admin.Methods", 0, 10, 0, 1).value = "O"
    Me.Range("Admin.CFld1.Name").ClearContents
    Me.Range("Admin.CFld2.Name").ClearContents
    Me.Range("Admin.CFld3.Name").ClearContents
    Me.Range("Admin.CFld1.Activate").ClearContents
    Me.Range("Admin.CFld2.Activate").ClearContents
    Me.Range("Admin.CFld3.Activate").ClearContents
    Me.Range("Admin.Module.PP").value = "x"
    
    'Added fpr SALK
    Me.Range("Admin.Portfolio").ClearContents
    Me.Range("Admin.Department").ClearContents
    Me.Range("Admin.Unit").ClearContents
    
    modStack.PopCallStack
End Sub

Public Sub ImportXml(Node As Variant)
    Dim i As Integer
    Dim n As Variant
    Dim Target As Range
    Dim nStateTag As Variant
        
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "ImportXml"

    If Not Node Is Nothing Then
    
    'removed for SALK
'        Set nStateTag = Node.SelectSingleNode("statetag")
'        If Not nStateTag Is Nothing Then
'            reset
'            ImportLookupValues Me.Range("Admin.StateTag"), Node, "statetag/item", 0
'        Else
'            reset (False) 'In case we have no statetag node in xml then don't reset the states'
'            AppStopMsg appGetLOCText("msgStatesNotImported")
'        End If
        
        'modified for SALK
        ImportLookupValues Me.Range("Admin.State"), Node, "state/item"
        
        ImportLookupValues Me.Range("Admin.Complexity"), Node, "complexity/item"
        ImportLookupValues Me.Range("Admin.Category"), Node, "category/item"
        ImportLookupValues Me.Range("Admin.Impact"), Node, "impact/item"
        ImportLookupValues Me.Range("Admin.CostType"), Node, "costtype/item"
        ImportLookupValues Me.Range("Admin.WorkCostType"), Node, "workcosttype/item"
        
        'Added for Salk
        If Not Node.SelectNodes("portfolio") Is Nothing Then
            ImportLookupValues Me.Range("Admin.Portfolio"), Node, "portfolio/item"
        End If
        If Not Node.SelectNodes("department") Is Nothing Then
            ImportLookupValues Me.Range("Admin.Department"), Node, "department/item"
        End If
        If Not Node.SelectNodes("unit") Is Nothing Then
            ImportLookupValues Me.Range("Admin.Unit"), Node, "unit/item"
        End If
            
        'added for CRF module
        If ModuleExists("CRF") And Not Node.SelectSingleNode("crcategory") Is Nothing Then
            ImportLookupValues Me.Range("Admin.CRCategories"), Node, "crcategory/item"
        End If
            
        Me.Range("Admin.ResourceUnits").value = Node.SelectSingleNode("ressourceunits").Text
        Me.Range("Admin.Currency").value = Node.SelectSingleNode("currency").Text
        
        'added for SALK
        If Not Node.SelectSingleNode("sqlserver") Is Nothing Then
            Me.Range("Admin.SQLServer").value = Node.SelectSingleNode("sqlserver").Text
            Me.Range("Admin.DataBase").value = Node.SelectSingleNode("database").Text
            Me.Range("Admin.ConnectionTimeOut").value = CastStringToVar(Node.SelectSingleNode("cnntimeout").Text)
            If Not Node.SelectSingleNode("sqldateformat") Is Nothing Then
              Me.Range("Admin.SQLDateFormat").value = CastStringToVar(Node.SelectSingleNode("sqldateformat").Text)
            End If
        End If
        
        If Not Node.SelectSingleNode("customfields") Is Nothing Then
            Me.Range("Admin.CFld1.Name").value = Node.SelectSingleNode("customfields/f1name").Text
            Me.Range("Admin.CFld2.Name").value = Node.SelectSingleNode("customfields/f2name").Text
            Me.Range("Admin.CFld3.Name").value = Node.SelectSingleNode("customfields/f3name").Text
            Me.Range("Admin.CFld1.Activate").value = Node.SelectSingleNode("customfields/f1activate").Text
            Me.Range("Admin.CFld2.Activate").value = Node.SelectSingleNode("customfields/f2activate").Text
            Me.Range("Admin.CFld3.Activate").value = Node.SelectSingleNode("customfields/f3activate").Text
        End If
        If Not Node.SelectSingleNode("modules") Is Nothing Then
            Me.Range("Admin.Module.PP").value = Node.SelectSingleNode("modules/PP").Text
        End If
'        i = 0
        i = 1
        For Each n In Node.SelectNodes("orgunits/orgunit")
            SetXMLValue Me.Range("Admin.OrgAbbr").Resize(1, 1).offset(i), n.SelectSingleNode("abbreviation").Text
            SetXMLValue Me.Range("Admin.OrgAbbr").Resize(1, 1).offset(i, 1), n.SelectSingleNode("name").Text
            SetXMLValue Me.Range("Admin.OrgAbbr").Resize(1, 1).offset(i, 2), n.SelectSingleNode("rate").Text
            SetXMLValue Me.Range("Admin.OrgAbbr").Resize(1, 1).offset(i, 3), n.SelectSingleNode("costtype").Text
            i = i + 1
        Next
        
        For Each n In Node.SelectNodes("methods/method")
            Set Target = Me.Range("Admin.Methods").Find(n.SelectSingleNode("method").Text)
            If Not Target Is Nothing Then
                For i = 1 To Me.Range("Admin.Complexity").rows.Count - 1
                    Target.offset(ColumnOffset:=i).value = n.SelectSingleNode("complexity_" & i).Text
                Next
            End If
        Next
        
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.ImportXml error:"
    Resume subend
End Sub

Public Sub ImportLookupValues(Target As Range, Node As Variant, rowxpath As String, Optional iOffset As Integer = 1)
    Dim n As Variant
    Dim i As Integer
'    i = 0
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "ImportLookupValues"

    i = iOffset
    For Each n In Node.SelectNodes(rowxpath)
        Target.Resize(1, 1).offset(i).value = n.Text
        i = i + 1
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.ImportLookupValues error:"
    Resume subend
End Sub

Public Sub cmdClearPHB_Click()
    
    Dim s As Worksheet
    
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "cmdClearPHB_Click"
    
    'modApp.ProtectAll
    If modApp.appQOCMsg(appGetLOCText("msgResetPHB")) = vbOK Then
        modRibbon.bnoRibbonUpdate = True
        bNoNormalProtectActionsRequired = True
        sActiveLicense = pStrVersion
Application.ScreenUpdating = False
        Cover.reset
Application.ScreenUpdating = False
        contents.reset
Application.ScreenUpdating = False
        Contract.reset
Application.ScreenUpdating = False
        Team.reset
Application.ScreenUpdating = False
        Com.reset
Application.ScreenUpdating = False
        Plan.reset
Application.ScreenUpdating = False
        WBS.reset
Application.ScreenUpdating = False
        WPDetails.reset
Application.ScreenUpdating = False
        Environment.reset
Application.ScreenUpdating = False
        If (sActiveLicense <> "K") And (sActiveLicense <> "C") Then
            Context.reset
            Application.ScreenUpdating = False
            Risk.reset
        Else
            Context_kiss.reset
            Application.ScreenUpdating = False
            Risk_kiss.reset
        End If
Application.ScreenUpdating = False
        Rules.reset
Application.ScreenUpdating = False
        StatusHist.reset
Application.ScreenUpdating = False
        Closure.reset
Application.ScreenUpdating = False
        MeetingDetails.reset
Application.ScreenUpdating = False
        Actions.reset
Application.ScreenUpdating = False
        Decisions.reset
Application.ScreenUpdating = False
        Info.reset
Application.ScreenUpdating = False
        wp.reset
Application.ScreenUpdating = False
'        Org.reset
'Application.ScreenUpdating = False
        
        RACI.UpdateRACI False
Application.ScreenUpdating = False
        WBS.CreateWBSStructure False
Application.ScreenUpdating = False
        Statusreport.clear
Application.ScreenUpdating = False
        Meeting.clear
Application.ScreenUpdating = False
        MST.UpdateMST False
Application.ScreenUpdating = False
        'Gantt.CreateGantt False
Application.ScreenUpdating = False
        'If sActiveLicense <> "K" Then WorkPlan.UpdateRessPlan False
Application.ScreenUpdating = False
        Work.update False
        Work.reset
Application.ScreenUpdating = False
        'If sActiveLicense <> "K" Then CostPlan.UpdateCostPlan False
Application.ScreenUpdating = False
        Cost.UpdateCost False
        Cost.reset

        'CRF Module
        If ModuleExists("CRF") Then
            Application.ScreenUpdating = False
            ChangeRequest.ClearValues
            Application.ScreenUpdating = False
            ChangeRequestList.reset
        End If
        
Application.ScreenUpdating = False
        Plan.BaselineLock False
Application.ScreenUpdating = False
        
        Plan.Range("Plan.BaselineSaveDate").value = ""
Application.ScreenUpdating = False
        wp.cmdUpdateResponsibles_Click
Application.ScreenUpdating = False
        Cover.cmdClearPicture_Click
        
        'recalc plan before resetting plan dependant sheets
        '(they don't have real reset methods, just update methods)
Application.ScreenUpdating = False
        Plan.Calculate
'removed for SALK
'Application.ScreenUpdating = False
'        If (sActiveLicense <> "K") And (sActiveLicense <> "C") Then CostPlan.UpdateCostPlan False
Application.ScreenUpdating = False
        If (sActiveLicense <> "K") And (sActiveLicense <> "C") Then WorkPlan.UpdateRessPlan False
Application.ScreenUpdating = False
        Gantt.CreateGantt False
Application.ScreenUpdating = False
        
        If ModuleExists("MTAServer") Then MTA.reset
Application.ScreenUpdating = False
        
        'for KISS we update the plan so that work(cost)types are already present
        If (sActiveLicense = "K") Or (sActiveLicense = "C") Then Plan.UpdatePlan_Click
Application.ScreenUpdating = False
        
        modApp.PrepareWorkbook
    End If
subend:
    bNoNormalProtectActionsRequired = False
    modRibbon.bnoRibbonUpdate = False
    modRibbon.RefreshRibbon
    UnprotectSheet Admin
'    ProtectSheet Cover
    Application.ScreenUpdating = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.cmdClearPHB_Click error:"
    Resume subend
End Sub

Public Sub cmdShowReleaseNotes_Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "cmdShowReleaseNotes_Click"

    frmReleaseNotes.Show

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.cmdShowReleaseNotes_Click error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' ChangePW
'
' @date     07.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub ChangePW()
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "ChangePW"

    frmAdminPW.Show

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.ChangePW error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' SetPW
' modifies the admin password
' @date     07.02.2011
' @author   wm
' @version  1.0
' @param    newPW       the new admin password
'---------------------------------------------------------------------------------------
'
Public Sub SetPW(newPW As String)
    
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "SetPW"

    modProperties.SetCustomProperty Me, "Password", newPW
    If frmAdminPW.visible Then Unload frmAdminPW
    MsgBox appGetLOCText("frmAdminSuccess"), vbInformation, "Project Handbook"

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.SetPW error:"
    Resume subend
End Sub

Public Sub cmdRenameOrgUnits_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "cmdRenameOrgUnits_Click"

    frmRenameOrgUnit.Show

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.cmdRenameOrgUnits_Click error:"
    Resume subend
End Sub

Public Function RenameOrgUnitInAdmin(iorgnr As Integer, sabbold As String, sorgold As String, sabbnew As String, sorgnew As String) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "RenameOrgUnitInAdmin"
Dim c As Variant
Dim iRow As Integer
iRow = Admin.Range("Admin.Org.Start").row
Admin.Cells(iRow + iorgnr, Admin.Range("Admin.Org").Column).value = sorgnew
Admin.Cells(iRow + iorgnr, Admin.Range("Admin.Org").Column - 1).value = sabbnew
RenameOrgUnitInAdmin = True
'For Each c In Admin.Range("Admin.Org")
'     If (c.Value = sorgold) And (c.offset(0, -1).Value = sabbold) Then
'        c.Value = sorgnew
'        c.offset(0, -1).Value = sabbnew
'        RenameOrgUnitInAdmin = True
'        Exit For
'     End If
'Next
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Admin.RenameOrgUnitInAdmin error:"
    Resume subend
End Function

Public Function GetCustomFieldName(ifieldidx As Integer) As String
GetCustomFieldName = Me.Range("Admin.CFld" + Trim(CStr(ifieldidx)) + ".Name").value
End Function

Public Function CustomFieldActive(ifieldidx As Integer) As Boolean
If Me.Range("Admin.CFld" + Trim(CStr(ifieldidx)) + ".Activate").value = "x" Then
    CustomFieldActive = True
End If
End Function

Public Function CustomFieldSettingOk(ifieldidx As Integer, sname As String, sactive As String) As Boolean
If (Me.Range("Admin.CFld" + Trim(CStr(ifieldidx)) + ".Name").value = sname) Then
    CustomFieldSettingOk = True
ElseIf sactive <> "x" Then
    CustomFieldSettingOk = True
End If
End Function

'-----------------------------------------------------------------------------------------------------------------
'--------(kissimport)
'-----------------------------------------------------------------------------------------------------------------
'For Kiss Module
Public Sub UpdateAdminWithKissContent(kissName As String)
Dim n, c, i As Integer, Complexity As Range
Dim Target As Range
Dim TG As New TPGTokenizer
Dim ar As Collection

    On Error GoTo suberr
    modStack.PushCallStack "Admin", "UpdateAdminWithKissContent"

        Set ar = New Collection
        ar.Add "Team"
        ar.Add "Org"
        ar.Add "Com"
        ar.Add "RACI"
        ar.Add "WP"
        ar.Add "WorkPlan"
        ar.Add "CostPlan"
        ar.Add "Environment" ' Stakeholder
        ar.Add "Rules"
        
        TG.FromCollection ar
        
        'Edit Complexity
        Set Complexity = Admin.Range("Admin.Complexity").Find(kissName)
        If Complexity Is Nothing Then
            i = 1
            For Each c In Admin.Range("Admin.Complexity")
                If Len(c) = 0 And i > 1 Then
                    c.value = kissName
                    Exit For
                End If
                i = i + 1
            Next
        Else
            For Each c In Admin.Range("Admin.Complexity")
            i = i + 1
                If c.value = kissName Then
                    Exit For
                End If
            Next
        End If

        Set ar = Nothing
        
subend:
    Set TG = Nothing
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.UpdateAdminWithKissContent error:"
    Resume subend
End Sub

'Added to kiss mod to rename WC if it exists
Public Sub RenameExterneKostenWC(externCostname As String, Dest As String)
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "RenameExterneKostenWC"
    
    For Each R In Admin.Range(Dest)
        If R.value <> "" Then
            If R.value = externCostname Then
                R.value = R.value & "_WC"
                GoTo subend
            End If
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.RenameExterneKostenWC error:"
    Resume subend
End Sub

Public Sub ImportXMLForKiss(rowName As String, Dest As String, Optional createAbr As Boolean = False, Optional personRate As Double = 0#)
Dim n, R As Range, c As Integer, lst As Collection, ofs As Integer
Dim TG As New TPGTokenizer

    On Error GoTo suberr
    modStack.PushCallStack "Admin", "ImportXMLForKiss"
    
    TG.FromRangeNoBlanks Admin.Range(Dest)
    
    ofs = TG.Count
     
    Select Case rowName
    Case "Personal", "Personalkosten"
        Set R = Admin.Range(Dest).Find(What:=rowName, LookAt:=xlWhole, MatchCase:=False, SearchFormat:=False)
            
        If Not R Is Nothing Then
            R.value = rowName
            
            'replace values on Org
            Range("Admin.Org").offset(0, 2).Replace What:=R.value, Replacement:="Personalkosten", LookAt:=xlWhole, _
                SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                ReplaceFormat:=False

            If createAbr Then
                If Admin.Cells(R.row, 3).value <> "" Then
                    Admin.Cells(R.row, 3).value = "Per"
                End If
                
                Admin.Cells(R.row, 5).value = personRate
            End If
            
        Else
            AssignToNextBlankRow Dest, rowName
            
            If rowName = "Personal" Then
                AssignToNextBlankRow Dest, personRate, 1
            End If
        End If
 
    Case Else
       c = 0
       If Not TG.Contains(rowName) And Len(rowName) > 0 Then
           c = c + 1
           TG.Add rowName
           
           Admin.Range(Dest).Resize(1, 1).offset(ofs + c, 0).value = rowName
           
           If c > 0 Then
               'Todo Fix me
               'SmoothGradient Admin.Range(dest).Resize(ofs + c, 1).offset(1, 0)
           End If
       End If
    End Select
    
subend:
    Set TG = Nothing
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.ImportXMLForKiss error:"
    Resume subend
End Sub

'Added for kiss
''Named range Admin.DepartmentInsertionPoint must be added on admin sheet
Public Sub ImportXMLForKissDept(Dest As String, personRate As Double)
Dim m As TPGDictionaryPair
Dim c As Integer
Dim TG As New TPGTokenizer
Dim s As Variant
Dim R As Range

    On Error GoTo suberr
    modStack.PushCallStack "Admin", "ImportXMLForKiss"

        TG.FromRangeNoBlanks Admin.Range("Admin.Org")

        c = 0
        For Each m In Import.NewTeamDept.Collection 'add new departments
            If Not TG.Contains(m.value) And Len(m.value) > 0 Then
                c = c + 1
                TG.Add m.value

                If TG.Count > 20 + c - 1 Then
                    '/**Fix for 1705**/
                    'Admin.Range("Admin.DepartmentInsertionPoint").Copy
                    RCopy Admin.Range("Admin.DepartmentInsertionPoint")
                    Admin.Range("Admin.DepartmentInsertionPoint").offset(1, 0).Insert
                    
                    Admin.Cells(Admin.Range("Admin.DepartmentInsertionPoint").offset(1, 0).row, 4).value = m.value
                    Admin.Cells(Admin.Range("Admin.DepartmentInsertionPoint").offset(1, 0).row, 3).value = Left(m.value, 3)
                    Admin.Cells(Admin.Range("Admin.DepartmentInsertionPoint").offset(1, 0).row, 6).value = personRate
                Else
                    AssignToNextBlankRow Dest, m.value
                    AssignToNextBlankRow Dest, "PersonalKosten", 2
                    AssignToNextBlankRow Dest, personRate, 1
                End If
            
'                If c > 0 Then
'                    'Todo Fix me
'                    'SmoothGradient Admin.Range(dest).Resize(ofs + c, 1).offset(1, 0)
'                End If
            End If
        Next

        
        'Todo cost type
        'get abbreviation
        For c = 2 To TG.ToCollection.Count + 1
            If Admin.Range(Dest).Cells(c, 1).value <> "" And Len(Admin.Range(Dest).Cells(c, 1).offset(0, -1).value) = 0 Then
                Admin.Range(Dest).Cells(c, 1).offset(0, -1).value = UCase(Left(Admin.Range(Dest).Cells(c, 1).value, 3))
            End If
        Next

subend:
    Set TG = Nothing
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.ImportXMLForKiss error:"
    Resume subend
End Sub


Private Sub AssignToNextBlankRow(rngStr As String, value As Variant, Optional ofs As Integer = 0)
    Dim R As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "AssignToNextBlankRow"
    
    For Each R In Admin.Range(rngStr).Resize(Admin.Range(rngStr).rows.Count - 1, 1).offset(1, 0)
        If R.offset(0, ofs).value = "" Then
            R.offset(0, ofs).value = value
            GoTo subend
        End If
    Next
    
    Debug.Print "No more space for new item on the list."

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.AssignToNextBlankRow error:"
    Resume subend
End Sub



'Added for SALK
Public Sub AppendOrgUnit(department As String)
    Dim rng As Range
    Dim R As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Admin", "AppendOrgUnit"
    
    If department = "" Then Exit Sub
    If Not Range("Admin.Unit").Find(department) Is Nothing Then Exit Sub

    Set rng = Range("Admin.Unit").Resize(Range("Admin.Unit").rows.Count - 1).offset(1) 'we don't want the first empty cell
    For Each R In rng
    
        If R.value = "" Then
            R.value = department
            GoTo subend
        End If
    Next
    AppInfoMsg ("Die neue Abteilung '" & department & "' konnte nicht hinzugef|fffd|gt werden weil die zul|fffd|ssige Anzahl von Abteilungen |fffd|berschritten wurde. Bitte gehen Sie auf die Admin Seite und reorganisieren Sie die Abteilungen.")

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Admin.AppendOrgUnit error:"
    Resume subend

End Sub
Attribute VB_Name = "CellFunctions"
Option Base 0
Option Explicit

Public Function GetFormulaR1C1(aCell As Range)
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "GetFormulaR1C1"

    If VBA.InStr(aCell.FormulaR1C1, "=") = 1 Then
        GetFormulaR1C1 = aCell.FormulaR1C1
    Else
        GetFormulaR1C1 = ""
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.GetFormulaR1C1 error:"
    Resume subend
End Function

'TODO: FIXME ... callstack disabled due to massive use of this one
Public Function GetRowOffset(CurrentRow As Integer, currentLevel As Integer) As Integer
    Dim irows As Integer
    Dim i As Integer
    Dim icLevel As Integer
    
    On Error GoTo suberr
    'modStack.PushCallStack "CellFunctions", "GetRowOffset"

    Application.Volatile True
    
    irows = Plan.Range("Plan.ProjectFooter").row - CurrentRow
    icLevel = Plan.Range("Plan.LevelColumn").Column
    
    For i = 1 To irows
        If Plan.Cells(CurrentRow + i, icLevel) <= currentLevel Then Exit For
    Next
    If i = irows + 1 Then
        GetRowOffset = i - 2
    Else
        GetRowOffset = i - 1
    End If

subend:
    'modStack.PopCallStack
    Exit Function
suberr:
    Debug.Print "CellFunctions.GetRowOffset error:"
    Resume subend
End Function

'TODO: FIXME ... callstack disabled due to massive use of this one
Public Function TaskHasHiddenChildren(lowerTask As Range, currentLevel As Integer, lowerLevel As Integer) As Boolean
    On Error Resume Next
    'modStack.PushCallStack "CellFunctions", "TaskHasHiddenChildren"

    TaskHasHiddenChildren = lowerTask.EntireRow.Hidden And currentLevel < lowerLevel

subend:
    'modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.TaskHasHiddenChildren error:"
    Resume subend
End Function

'TODO: FIXME ... callstack disabled due to massive use of this one
Public Function NewLeftLevel(currentLevel As Integer, upperLevel As Integer, upperWbs As String) As String
    On Error GoTo suberr
'    modStack.PushCallStack "CellFunctions", "NewLeftLevel"

    If (currentLevel <= upperLevel) Then
        Dim wbsSplit() As String
        Dim i As Integer
        Dim uboundSplit As Integer
        wbsSplit = Split(upperWbs, ".")
        uboundSplit = UBound(wbsSplit)
        If (uboundSplit > currentLevel) Then uboundSplit = currentLevel
        NewLeftLevel = ""
        For i = 0 To uboundSplit - 1
            NewLeftLevel = NewLeftLevel + wbsSplit(i) + "."
        Next i
        If uboundSplit > 0 Then
            NewLeftLevel = NewLeftLevel + VBA.Trim(CStr(CInt(wbsSplit(uboundSplit)) + 1))
        Else
            NewLeftLevel = upperWbs
        End If
    Else
        NewLeftLevel = upperWbs + ".1"
    End If

subend:
    'modStack.PopCallStack
    Exit Function
suberr:
    Debug.Print "CellFunctions.NewLeftLevel error:"
    Resume subend
End Function

Public Function GetNextPartOfWbs(WBS As String, level As Integer) As String
    Dim wbsSplit() As String
    Dim i As Integer
    Dim uboundSplit As Integer
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "GetNextPartOfWbs"

    wbsSplit = Split(WBS, ".")
    uboundSplit = UBound(wbsSplit)
    If (uboundSplit > level) Then uboundSplit = level
    GetNextPartOfWbs = ""
    For i = 0 To uboundSplit - 1
        GetNextPartOfWbs = GetNextPartOfWbs + wbsSplit(i) + "."
    Next i
    GetNextPartOfWbs = GetNextPartOfWbs + VBA.Trim(CStr(CInt(wbsSplit(uboundSplit)) + 1))

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.GetNextPartOfWbs error:"
    Resume subend
End Function

'TODO: FIXME ... callstack disabled due to massive use of this one
Public Function GetPartOfWbs(WBS As String, level As Integer) As String
    Dim wbsSplit() As String
    Dim i As Integer
    Dim uboundSplit As Integer
    On Error GoTo suberr
'    modStack.PushCallStack "CellFunctions", "GetPartOfWbs"

    wbsSplit = Split(WBS, ".")
    uboundSplit = UBound(wbsSplit)
    If (uboundSplit > level) Then uboundSplit = level
    GetPartOfWbs = ""
    For i = 0 To uboundSplit - 1
        GetPartOfWbs = GetPartOfWbs + wbsSplit(i) + "."
    Next i
    If uboundSplit > 0 Then
        GetPartOfWbs = GetPartOfWbs + wbsSplit(uboundSplit)
    Else
        GetPartOfWbs = Plan.Range("Plan.RootWBS").value
    End If
    'GetPartOfWbs = GetPartOfWbs + wbsSplit(uboundSplit)

subend:
    'modStack.PopCallStack
    Exit Function
suberr:
    Debug.Print "CellFunctions.GetPartOfWbs error:"
    Resume subend
End Function


'TODO: FIXME ... callstack disabled due to massive use of this one
Function InRange(range1 As Range, range2 As Range) As Boolean
' returns True if Range1 is within Range2
    Dim InterSectRange As Range
    On Error GoTo suberr
    'modStack.PushCallStack "CellFunctions", "InRange"

    Set InterSectRange = Application.Intersect(range1, range2)
    InRange = Not InterSectRange Is Nothing
    Set InterSectRange = Nothing

subend:
    'modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.InRange error:"
    Resume subend
End Function

Public Function IsStringInRange(s As String, R As Range) As Boolean
    Dim found As Range
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "IsStringInRange"

    Set found = R.Find(s)
    If found Is Nothing Then
        IsStringInRange = False
    Else
        If found.value = s Then
            IsStringInRange = True
        Else
            IsStringInRange = False
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.IsStringInRange error:"
    Resume subend
End Function

Function GetProjectWBSRange() As Range
    Dim planProjectHeader As Range
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "GetProjectWBSRange"

    Set planProjectHeader = Range("Plan.ProjectHeader")
    Dim planProjectFooter As Range
    Set planProjectFooter = Range("Plan.ProjectFooter")
    
    Dim wbsRange As Range
    Set wbsRange = Range("Plan!$" + VBA.Trim(CStr(planProjectHeader.row + 1)) + ":$" + VBA.Trim(CStr(planProjectFooter.row)))
    
    Set GetProjectWBSRange = wbsRange

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.GetProjectWBSRange error:"
    Resume subend
End Function

Function GetFirstColumnLetter(anyRange As Range) As String
    Dim columnLetter As String
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "GetFirstColumnLetter"

    columnLetter = VBA.Mid(anyRange.Address(0, 0), 1, InStr(1, anyRange.Address(0, 0), ":") - 1)
    GetFirstColumnLetter = columnLetter

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.GetFirstColumnLetter error:"
    Resume subend
End Function

'TODO: FIXME ... callstack disabled due to massive use of this one
Function GetWeekNo(anyDate As Date) As Integer
    On Error GoTo suberr
    'modStack.PushCallStack "CellFunctions", "GetWeekNo"

    GetWeekNo = DatePart("ww", anyDate, vbMonday, vbFirstFourDays)

subend:
    'modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.GetWeekNo error:"
    Resume subend
End Function

Function WeekDiff(date1 As Date, date2 As Date) As Integer
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "WeekDiff"

    WeekDiff = DateDiff("d", date1, date2) + 1 ' GetWeekNo(date2) - GetWeekNo(date1)
    WeekDiff = (WeekDiff \ 7) + IIf((WeekDiff Mod 7), 1, 0)
    If Weekday(date1, vbMonday) > Weekday(date2, vbMonday) Then WeekDiff = WeekDiff + 1

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.WeekDiff error:"
    Resume subend
End Function

Public Sub LockCell(targetRange As Range, locked As Boolean)
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "LockCell"

    targetRange.locked = locked
    targetRange.FormulaHidden = locked
    If locked Then
        targetRange.Interior.Color = RGB(242, 242, 242)
    Else
        targetRange.Interior.Color = RGB(255, 255, 255)
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.LockCell error:"
    Resume subend
End Sub

Public Sub sortRange(targetRange As Range, key As Range, SortOrder As XlSortOrder)
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "sortRange"
    
    targetRange.Sort Key1:=key, Order1:=SortOrder, Header:=xlNo, dataoption1:=xlSortTextAsNumbers

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    'AppErrMsg "CellFunctions.sortRange error:"
    Resume subend
End Sub

Public Function getRange(sht As Worksheet, Name As String, resizeRows As Integer, resizeCols As Integer, offsetRows As Integer, offsetCols As Integer) As Range
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "getRange"

    Set R = sht.Range(Name)
    If Not R Is Nothing Then
        Dim rows As Integer
        Dim cols As Integer
        If resizeRows > 0 Then rows = resizeRows Else rows = R.rows.Count + resizeRows
        If resizeCols > 0 Then cols = resizeCols Else cols = R.Columns.Count + resizeCols
        If (resizeCols + R.Columns.Count <= 0) Or (resizeRows + R.rows.Count <= 0) Then GoTo subend
        Set getRange = R.Resize(rows, cols).offset(offsetRows, offsetCols)
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.getRange error:" + Name + ":"
    Resume subend
End Function

Public Function SearchNameInRange(R As Range, Name As String) As Range
    Dim cell As Range
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "SearchNameInRange"

    For Each cell In R.Cells
        If cell.value = Name Then
            Set SearchNameInRange = cell
            GoTo subend
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.SearchNameInRange error:"
    Resume subend
End Function

Public Sub TableAddRow(Sheet As Worksheet, rangename As String, Optional CopyFromOffset As Integer = 0)
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "TableAddRow"

    Set R = Sheet.Range(rangename)
    TableInsertRow Sheet, rangename, R.row + R.rows.Count - 1, CopyFromOffset

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.TableAddRow error:"
    Resume subend
End Sub

Public Sub TableInsertRow(Sheet As Worksheet, rangename As String, InsertionRow As Integer, Optional CopyFromOffset As Integer = 0)
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "TableInsertRow"

    Set R = Sheet.Range(rangename)
    'Sheet.Range(rangename).Resize(1).offset(CopyFromOffset).EntireRow.Copy
    RCopy Sheet.Range(rangename).Resize(1).offset(CopyFromOffset).EntireRow
    'Sheet.Cells(InsertionRow, 1).EntireRow.Insert copyOrigin:=xlFormatFromLeftOrAbove
    CellFunctions.InsertWrapped Sheet.Cells(InsertionRow, 1).EntireRow
    Sheet.Cells(InsertionRow, 1).EntireRow.Hidden = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.TableInsertRow error:"
    Resume subend
End Sub

'TODO: FIXME ... takes ages to complete - this is one true performance killer!
Public Sub InsertWrapped(Target As Range, Optional Shift As Variant = "$", Optional copyOrigin As Integer = xlFormatFromLeftOrAbove)
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "InsertWrapped"
    
'    Application.Volatile (False)
'    Application.EnableEvents = False
'    Plan.EnableCalculation = False
'    Plan.EnableFormatConditionsCalculation = False
    'Dim i As Integer
    
    
    'modApp.EnableScreenUpdating
    If Shift <> "$" Then
        Target.Insert Shift:=Shift ', copyOrigin:=copyOrigin
    Else
        Target.Insert 'copyOrigin:=copyOrigin
    End If
    '/**fix for excel build 1705**/
    Application.CutCopyMode = False
    'modApp.DisableScreenUpdating
    'Application.Volatile (True)
'    Application.EnableEvents = True
'    Plan.EnableCalculation = True
'    Plan.EnableFormatConditionsCalculation = True
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.InsertWrapped error:"
    Resume subend
End Sub

Public Function CellsWrapped(Sheet As Worksheet, rowIndex As Integer, columnIndex As Integer, Optional raiseException As Boolean = True) As Range
    Dim minRow, minCol As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "CellsWrapped"

    minRow = rowIndex
    If rowIndex > Sheet.rows.Count Then minRow = Sheet.rows.Count
    
    minCol = columnIndex
    If columnIndex > Sheet.Columns.Count Then minCol = Sheet.Columns.Count
    
    If (columnIndex > Sheet.Columns.Count Or rowIndex > Sheet.rows.Count) And raiseException Then
        err.Raise Number:=8742, Description:=appGetLOCText("excelRangeExceeded")  '874 are the keys for TPG on a phone keypad
    End If
    
    Set CellsWrapped = Sheet.Cells(minRow, minCol)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.CellsWrapped error:"
    Resume subend
End Function


Public Sub ClearArrayFormulas(x As Range)
    Dim i As Integer
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "ClearArrayFormulas"

    For i = Plan.Range("Plan.WorkCostTemplate").Column To Plan.Range("Plan.WorkCostTemplateInsertionPoint").Column
        Set R = Plan.Cells(x.row, i)
        If R.HasArray Then
            R.formula = R.FormulaArray
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.ClearArrayFormulas error:"
    Resume subend
End Sub

Public Sub SetArrayFormulas(t As Range, s As Range)
    Dim i As Integer
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "SetArrayFormulas"

    For i = Plan.Range("Plan.WorkCostTemplate").Column To Plan.Range("Plan.WorkCostTemplateInsertionPoint").Column
        Set R = Plan.Cells(s.row, i)
        If R.HasArray Then
            Plan.Cells(t.row, R.Column).FormulaArray = AdjustFormula(R.FormulaArray, R, Plan.Cells(t.row, R.Column))
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.SetArrayFormulas error:"
    Resume subend
End Sub

Private Function AdjustFormula(formula As String, source As Range, Target As Range) As String
    Dim rcFormula As String
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "AdjustFormula"

    rcFormula = Application.ConvertFormula(formula, xlA1, xlR1C1, , source)
    AdjustFormula = Application.ConvertFormula(rcFormula, xlR1C1, xlA1, , Target)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.AdjustFormula error:"
    Resume subend
End Function

Public Sub SetViewDefinitionvalues(R As Range)
    Dim defs As Range
    Dim c As Range
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "SetViewDefinitionvalues"

    Set defs = Intersect(R, Plan.Range("Plan.ViewDefinitions").EntireRow)
    For Each c In defs.Resize(1)
        c.value = ""
    Next
    For Each c In defs
        If c.value = "$" Then c.value = "x"
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.SetViewDefinitionvalues error:"
    Resume subend
End Sub

Sub GetTimePhasedData(BaseColumn As Integer, StartPoint As Range, dStartP As Date, dFinishP As Date)
    Dim icStart As Integer
    Dim dStartW As Date
    Dim dFinishW As Date
    Dim dDayVal As Double
    Dim dMonthVal As Double
    Dim dSumVal As Double
    Dim dTotalVal As Double
    Dim dstart As Date
    Dim dfinish As Date
    Dim dOldval As Double

    
    Dim startRowIndex As Integer
    Dim endRowIndex As Integer
    Dim currentIndex As Integer
    Dim t As TPGTask
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "GetTimePhasedData"

    Set t = New TPGTask
    
    icStart = Sheets("Plan").Range("Plan.StartColumn").Column

    StartPoint.value = Plan.Cells(Plan.Range("Plan.ProjectHeader").row - 3, BaseColumn).value

    startRowIndex = Plan.Range("Plan.ProjectHeader").row + 1
    endRowIndex = Plan.Range("Plan.ProjectFooter").row - 1

    For currentIndex = startRowIndex To endRowIndex
        t.SetIndex currentIndex
        If t.IsWP Then
        
            If Sheets("Plan").Cells(currentIndex, icStart).value = "" Then
                dStartW = dStartP
            Else
                dStartW = Sheets("Plan").Cells(currentIndex, icStart).value
            End If
            If Sheets("Plan").Cells(currentIndex, icStart + 1).value = "" Then
                dFinishW = dFinishP
            Else
                dFinishW = Sheets("Plan").Cells(currentIndex, icStart + 1).value
            End If
                    
            If dStartW <= dFinishW Then
                dTotalVal = Plan.Cells(currentIndex, BaseColumn + 4).value
                dDayVal = dTotalVal / (DateDiff("d", dStartW, dFinishW) + 1)
                
                dstart = dStartW
                dSumVal = 0
                Do Until Month(dstart) = Month(dFinishW) And Year(dstart) = Year(dFinishW)
                    dfinish = DateAdd("m", 1, dstart)
                    dfinish = DateAdd("d", -1, DateSerial(Year(dfinish), Month(dfinish), 1))
                    
                    dOldval = StartPoint.offset(0, 1 + DateDiff("m", dStartP, dfinish)).value
                    dMonthVal = dDayVal * (DateDiff("d", dstart, dfinish) + 1)
                    StartPoint.offset(0, 1 + DateDiff("m", dStartP, dfinish)).value = dOldval + dMonthVal
                    
                    dstart = DateAdd("d", 1, dfinish)
                    dSumVal = dSumVal + dMonthVal
                Loop
                dOldval = StartPoint.offset(0, 1 + DateDiff("m", dStartP, dFinishW)).value
                StartPoint.offset(0, 1 + DateDiff("m", dStartP, dFinishW)).value = dOldval + dTotalVal - dSumVal
            End If
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.GetTimePhasedData error:"
    Resume subend
End Sub

Sub GetTimePhasedDataYears(BaseColumn As Integer, StartPoint As Range, dStartP As Date, dFinishP As Date)
    Dim icStart As Integer
    Dim dStartW As Date
    Dim dFinishW As Date
    Dim dDayVal As Double
    Dim dMonthVal As Double
    Dim dSumVal As Double
    Dim dTotalVal As Double
    Dim dstart As Date
    Dim dfinish As Date
    Dim dOldval As Double
    Dim dYearVal As Double
    
    Dim startRowIndex As Integer
    Dim endRowIndex As Integer
    Dim currentIndex As Integer
    Dim t As TPGTask
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "GetTimePhasedDataYears"

    Set t = New TPGTask
    
    icStart = Sheets("Plan").Range("Plan.StartColumn").Column

    StartPoint.value = Plan.Cells(Plan.Range("Plan.ProjectHeader").row - 3, BaseColumn).value

    startRowIndex = Plan.Range("Plan.ProjectHeader").row + 1
    endRowIndex = Plan.Range("Plan.ProjectFooter").row - 1

    For currentIndex = startRowIndex To endRowIndex
        t.SetIndex currentIndex
        If t.IsWP Then
        
            If Sheets("Plan").Cells(currentIndex, icStart).value = "" Then
                dStartW = dStartP
            Else
                dStartW = Sheets("Plan").Cells(currentIndex, icStart).value
            End If
            If Sheets("Plan").Cells(currentIndex, icStart + 1).value = "" Then
                dFinishW = dFinishP
            Else
                dFinishW = Sheets("Plan").Cells(currentIndex, icStart + 1).value
            End If
                    
            If dStartW <= dFinishW Then
                dTotalVal = Plan.Cells(currentIndex, BaseColumn + 4).value
                dDayVal = dTotalVal / (DateDiff("d", dStartW, dFinishW) + 1)
                
                dstart = dStartW
                dSumVal = 0
                Do Until Year(dstart) = Year(dFinishW)
                    dfinish = DateAdd("yyyy", 1, dstart)
                    dfinish = DateAdd("d", -1, DateSerial(Year(dfinish), 1, 1))
                    
                    dOldval = StartPoint.offset(0, 1 + DateDiff("yyyy", dStartP, dfinish)).value
                    dYearVal = dDayVal * (DateDiff("d", dstart, dfinish) + 1)
                    StartPoint.offset(0, 1 + DateDiff("yyyy", dStartP, dfinish)).value = dOldval + dYearVal
                    
                    dstart = DateAdd("d", 1, dfinish)
                    dSumVal = dSumVal + dYearVal
                Loop
                dOldval = StartPoint.offset(0, 1 + DateDiff("yyyy", dStartP, dFinishW)).value
                StartPoint.offset(0, 1 + DateDiff("yyyy", dStartP, dFinishW)).value = dOldval + dTotalVal - dSumVal
            End If
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.GetTimePhasedDataYears error:"
    Resume subend
End Sub

Function GetR1C1Address(r1c1address As String) As String
    Dim s As String
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "GetR1C1Address"

    s = r1c1address
    s = Replace(s, "Z", "R")
    s = Replace(s, "S", "C")
    GetR1C1Address = s

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.GetR1C1Address error:"
    Resume subend
End Function

Function GetDate(value As String) As Date
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "GetDate"

    If IsDate(value) Then GetDate = CDate(value)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.GetDate error:"
    Resume subend
End Function

Function AutoFitMergedCell(Target As Range, Optional MinHeight As Single) As Single
    On Error GoTo suberr
'    modStack.PushCallStack "CellFunctions", "AutoFitMergedCell"

    If Target.MergeCells Then
        Dim width1 As Single
        Dim width2 As Single
        Dim height1 As Single
        Dim c1 As Range
        Dim ma As Range
        width1 = 0
        
        If Target.Columns.Count > 1 Or Target.rows.Count > 1 Then
            Set ma = Target
            Set c1 = Target.Cells(1, 1)
        Else
            Set ma = Target.MergeArea
            Set c1 = Target
        End If
        
'        For Each c2 In ma
'            If Not c2.EntireColumn.hidden Then
'                width1 = width1 + c2.width
'            End If
'        Next
        width1 = ma.Width
        
        Target.UnMerge
        width2 = c1.ColumnWidth 'remember columnwidth
    
        c1.ColumnWidth = width1 / 5.29
    
        c1.EntireRow.AutoFit
        height1 = c1.RowHeight
        If MinHeight > height1 Then
            c1.RowHeight = MinHeight
            AutoFitMergedCell = MinHeight
        Else
            AutoFitMergedCell = height1
        End If
        c1.ColumnWidth = width2 'set orgiginal columnwidth
        ma.Merge
    End If

subend:
'    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.AutoFitMergedCell error:"
    Resume subend

End Function

Public Sub SetCellIfEmpty(row As Integer, col As Integer, value As Variant)
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "SetCellIfEmpty"

    If IsEmpty(Cells(row, col)) Then
        Cells(row, col).value = value
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.SetCellIfEmpty error:"
    Resume subend
End Sub


Sub SetXMLValue(Target As Range, value As String)
    Target.value = CastStringToVar(value)
End Sub

Sub SetDateValue(Target As Range, value As String)
    SetXMLValue Target, value

'    Dim v As Variant
'    v = Value
'    If IsDate(v) Or IsNumeric(v) Then
'        Target.Value = CDate(v)
'    Else
'        Target.Value = Value
'    End If
End Sub


Sub SetNumericValue(Target As Range, value As String)
    SetXMLValue Target, value
    
'    Dim v As Variant
'    v = Value
'    If IsNumeric(v) Then
'        Target.Value = CDbl(v)
'    Else
'        Target.Value = Value
'    End If
End Sub

Public Function AdvancedFind(rToSearch As Range, sToFind As String) As Range
    Dim rFound As Range
    Dim rHiddenCols As Range
    Dim rHiddenRows As Range
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "AdvancedFind"

    
    'unhide cols/rows
    Set rHiddenCols = UnHideColumns(rToSearch)
    Set rHiddenRows = UnHideRows(rToSearch)
    
    Set rFound = rToSearch.Find(What:=sToFind)
    
    'hide cols/rows
    Call HideRowsAndColumns(rHiddenCols, rHiddenRows)
    
    
    Set AdvancedFind = rFound

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.AdvancedFind error:"
    Resume subend
End Function

Public Sub HideRowsAndColumns(rHiddenCols As Range, rHiddenRows As Range)
    Dim R As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "HideRowsAndColumns"

    If Not rHiddenCols Is Nothing Then
        For Each R In rHiddenCols.Columns
            R.Columns.Hidden = True
        Next R
    End If
        
    If Not rHiddenRows Is Nothing Then
        rHiddenRows.rows.Hidden = True
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.HideRowsAndColumns error:"
    Resume subend
End Sub

Public Function UnHideColumns(rToSearch As Range) As Range
    Dim c As Range
    Dim rHiddenCols As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "UnHideColumns"

    Set rHiddenCols = Nothing
    
    For Each c In rToSearch.Columns
        If c.Hidden = True Then
            'unhide col
            c.Hidden = False
            
            'add to union range
            If rHiddenCols Is Nothing Then
                Set rHiddenCols = c
            Else
                Set rHiddenCols = Union(rHiddenCols, c)
            End If
        End If
    Next c
    Set UnHideColumns = rHiddenCols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.UnHideColumns error:"
    Resume subend
End Function


Public Function UnHideRows(rToSearch As Range) As Range
    Dim c As Range
    Dim rHiddenRows As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "UnHideRows"

    Set rHiddenRows = Nothing
    
    For Each c In rToSearch.rows
        If c.Hidden = True Then
            'unhide col
            
            'add to union range
            If rHiddenRows Is Nothing Then
                Set rHiddenRows = c
            Else
                Set rHiddenRows = Union(rHiddenRows, c)
            End If
        
        
        End If
    Next c
    
    If Not rHiddenRows Is Nothing Then
        rHiddenRows.rows.Hidden = False
    End If
    
    
    Set UnHideRows = rHiddenRows

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CellFunctions.UnHideRows error:"
    Resume subend
End Function

Public Function GetDemoStatusWithValid() As String
    Application.Volatile True
    If Demo Then
        GetDemoStatusWithValid = "DEMO VALID UNTIL " + CStr(Config_Lic.Range("Config.Demo.EndDate").value)
    End If
End Function

Public Function GetVersionNo() As String
    GetVersionNo = "v " & VERSION_NO
End Function

Public Sub CopyPasteRow64(sht As Worksheet, TemplateRow As Integer, InsertionRow As Integer)
'this copypaste sub
'due to automation error problems in 64-bit excel when executing copy-paste in a non-active sheet
'reason for this problem: UNKNOWN, it does not occur each time...??!!
'best only to use in 64-bit excel: so: user conditional compiling !!!! (#IF VBA7 ....)
Dim sactivesheet As String
Dim setbribbon As Boolean
Dim setbprotect As Boolean
On Error GoTo suberr

    'modCopyPaste.ReleasePasteControl

    If ActiveSheet.Name <> sht.Name Then
        If Not modRibbon.bnoRibbonUpdate Then
            setbribbon = True
            modRibbon.bnoRibbonUpdate = True
        End If
        If Not bNoNormalProtectActionsRequired Then
            setbprotect = True
            bNoNormalProtectActionsRequired = True
        End If
        sactivesheet = ActiveSheet.Name
        sht.Activate
        sht.Cells(InsertionRow, 1).Select
        sht.Cells(InsertionRow, 1).value = "a"
        sht.Cells(InsertionRow, 1).ClearContents
        
        '/**This will fix error for ver. 1705*/
        Application.CutCopyMode = False

        sht.Cells(InsertionRow, 1).EntireRow.Insert 'copyOrigin:=xlFormatFromLeftOrAbove
        
        '/**This will fix error for ver. 1705*/
        Application.CutCopyMode = False

        sht.Cells(TemplateRow, 1).EntireRow.Copy
        sht.Cells(InsertionRow, 1).EntireRow.PasteSpecial xlFormats
        
        '/**This will fix error for ver. 1705*/
        Application.CutCopyMode = False

        sht.Cells(TemplateRow, 1).EntireRow.Copy
        sht.Cells(InsertionRow, 1).EntireRow.PasteSpecial xlPasteValuesAndNumberFormats
        ActiveWorkbook.Sheets(sactivesheet).Select
    Else
        
        '/**This will fix error for ver. 1705*/
        Application.CutCopyMode = False

        sht.Cells(TemplateRow, 1).EntireRow.Copy
        sht.Cells(InsertionRow, 1).EntireRow.Insert 'copyOrigin:=xlFormatFromLeftOrAbove
        Exit Sub
    End If

subend:
    'modCopyPaste.ForcePasteSpecial
    If setbribbon Then modRibbon.bnoRibbonUpdate = False
    If setbprotect Then bNoNormalProtectActionsRequired = False
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.CopyPasteRow64 error:"
    Resume subend
End Sub
'/**This will fix error for ver. 1705*/
'Check Work and Costs SAP
Public Sub RCopy(ByRef R As Range, Optional Dest As Range)
    Application.CutCopyMode = False
    If Dest Is Nothing Then
        R.Copy
    Else
        R.Copy Dest
    End If
End Sub

'/**This will fix error for ver. 1705*/
'Check Work and Costs SAP
Public Sub RCut(ByRef R As Range, Optional Dest As Range)
    
    Application.CutCopyMode = False
    If Dest Is Nothing Then
        R.Cut
    Else
        R.Cut Dest
    End If
End Sub

'/**This will fix error for ver. 1705*/
Public Sub InsertWrappedOnly(Target As Range, Optional Shift As Variant = "$", Optional copyOrigin As Integer = xlFormatFromLeftOrAbove)
    Application.CutCopyMode = False
    
    InsertWrapped Target, Shift, copyOrigin
End Sub

'/**For Task Speed Enhance*/
Public Sub DisableAggregateSum()
    Dim R As Range
    Const f As String = "=fPlan.Sum"
    Const i As String = "=iogie()"
    
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "DisableAggregateSum"

    For Each R In Plan.UsedRange
        If R.hasFormula Then
            If R.formula = f Then
                R.formula = i
            End If
        End If
    Next
  
subend:

    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.DisableAggregateSum error:"
    Resume subend
End Sub

'/**For Task Speed Enhance*/
Public Sub EnableAggregateSum()
    Dim R As Range
    Const f As String = "=fPlan.Sum"
    Const i As String = "=iogie()"
    
    On Error GoTo suberr
    modStack.PushCallStack "CellFunctions", "EnableAggregateSum"

    For Each R In Plan.UsedRange
        If R.hasFormula Then
            If R.formula = i Then
                R.formula = f
            End If
        End If
    Next
  
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CellFunctions.EnableAggregateSum error:"
    Resume subend
End Sub
'/**Dummy Function for Plan Speed Enhancement*/
Public Function Iogie()
    'do nothing
    'dummy only
End Function
Attribute VB_Name = "ChangeRequest"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public noupdate As Boolean
Private bDirty As Boolean
Private oldStat As String


'change request fields
Const CRSingleFields As String = "Title,Date,Petitioner,Priority,WP,Category,StartDate,FinishDate,Status,ProjectSponsor,ProjectManager"
Const sCols As String = "Title,Date,Petitioner,WP,StartDate,BaseStart,FinishDate,BaseFinish,StatusDate,Category,ProjectSponsor,ProjectManager" 'text columns
Const lCols As String = "Priority,Status" 'look-up columns
Const tCols As String = "Trigger,Description,Documents"  'table columns - must be on the right order
Const cCols As String = "Resources,Costs" 'cost columns - must be on the right order

'container for oldvalues for CR
Private CROldVals As Collection

Private Property Get crApproved() As Boolean
    crApproved = (LCase(oldStat) = LCase(modApp.appGetLOCText("state_approved"))) _
        And Not Right(Range("ChangeRequest.CRNR").value, 5) = "-temp"
End Property

Private Sub GetOldValues()
    Dim ar, i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "GetOldValues"
    
    ar = Split(CRSingleFields, ",")

    Set CROldVals = New Collection
    For i = 0 To UBound(ar)
        CROldVals.Add Range("ChangeRequest." & ar(i)).value
    Next
    
    
    oldStat = Range("ChangeRequest.Status").value
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.GetOldValues error:"
    Resume subend
End Sub

Private Function IsDirty() As Boolean
    Dim ar, i As Integer

    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "IsDirty"
    
    IsDirty = False
    If CROldVals Is Nothing Then GoTo subend
   
    If bDirty Then
        IsDirty = True
        GoTo subend
    End If
       
    If Not CRSingleFields = "" Then
        ar = Split(CRSingleFields, ",")
              
        For i = 0 To UBound(ar)
            If CROldVals.Item(i + 1) <> Range("ChangeRequest." & ar(i)).value Then
                IsDirty = True
                GoTo subend
            End If
        Next
    End If
    
    If Not GetTriggerTable.IsTableEmpty Then IsDirty = True: GoTo subend
    If Not GetDescriptionTable.IsTableEmpty Then IsDirty = True: GoTo subend
    If Not GetDocumentsTable.IsTableEmpty Then IsDirty = True: GoTo subend
    If Not GetResourcesTable.IsTableEmpty Then IsDirty = True: GoTo subend
    If Not GetCostsTable.IsTableEmpty Then IsDirty = True: GoTo subend

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequest.IsDirty error:"
    Resume subend
End Function

Public Sub cboLoad()

    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "cboLoad"
    
    noupdate = True
    SetContent
    noupdate = False
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.cboLoad error:"
    Resume subend
End Sub

Public Sub SetContent()

    Dim iRow As Integer
    Dim selectedIndex As Integer
    Dim i As Integer
    Dim ic As Integer
    Dim Count As Integer
    Dim Table As TPGTable
    Dim TG As TPGTokenizer
    Dim t As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "setContent"
    
    If IsDemoVersion Then GoTo subend
        
    'clear cells
    Application.Calculation = xlCalculationManual
    ClearValues True
    
    oldStat = Range("ChangeRequest.Status").value

    selectedIndex = ChangeRequest.Range("ChangeRequest.Selected").value
    
    If selectedIndex = 1 Then
        
        'get values for sponsor and manager only as default
'        ChangeRequest.Range("ChangeRequest.ProjectSponsor").value = Cover.Range("Cover.ProjectSponsor").Cells(1, 1).value
'        ChangeRequest.Range("ChangeRequest.ProjectManager").value = Cover.Range("Cover.ProjectManager").Cells(1, 1).value
        GoTo subend
    
    End If
    
    iRow = ChangeRequestList.Range("ChangeRequestList.CRNR").Cells(selectedIndex, 1).row
    
    'CRNR
    ChangeRequest.Range("ChangeRequest.CRNR").value = ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.CRNRColumn").Column).value
    
    'copy values from CR List
    Set TG = New TPGTokenizer
    TG.Delimiter = ","
    
    TG.clear
    TG.FromString sCols
    For Each t In TG.ToCollection
        Range("ChangeRequest." & t).value = ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList." & t & "Column").Column).value
    Next

    TG.clear
    TG.FromString lCols
    For Each t In TG.ToCollection
        If Len(ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList." & t & "Column").Column).value) > 0 Then
            Range("ChangeRequest." & t).value = modApp.appGetLOCText(ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList." & t & "Column").Column).value)
        Else
            Range("ChangeRequest." & t).value = vbNullString
        End If
    Next

    ic = ChangeRequestList.Range("ChangeRequestList.DevCostsColumn").Column + 1 'Cost should always be last column
    
    'Get Tables
    TG.clear
    TG.FromString tCols
    For Each t In TG.ToCollection
        Select Case t
        Case "Trigger"
            Set Table = GetTriggerTable
        Case "Description"
            Set Table = GetDescriptionTable
        Case "Documents"
            Set Table = GetDocumentsTable
        Case Else
            Debug.Print "Table not yet included on collection"
            Exit For
        End Select
            
        Count = ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.Num" & t & "Column").Column).value
          
        'add code to add more rows
        If Count > 0 Then
            Do While Count > Table.ValuesRange(1).rows.Count
                'table.ValuesRange(1).Cells(1, 1).Select
                'cmdInsert_Click
                InsertRow Table.ValuesRange(1).Cells(1, 1)
            Loop
        
            For i = 1 To Count
                Table.ValuesRange(1).Cells(i, 1).value = ChangeRequestList.Cells(iRow, ic + i - 1).value
                
                If t = "Documents" Then 'links
                    Table.ValuesRange(1).Cells(i, 1).offset(0, 1).value = ChangeRequestList.Cells(iRow, ic + i - 1 + 1).value
                    'Add links
                    If ChangeRequestList.Cells(iRow, ic + i - 1 + 1).value <> "" Then
                        AddHyperLink Table.ValuesRange(1).Cells(i, 1).offset(0, 1)
'                        table.ValuesRange(1).Cells(i, 1).offset(0, 1).Hyperlinks.Add Anchor:=table.ValuesRange(1).Cells(i, 1).offset(0, 1), _
'                              Address:=ChangeRequestList.Cells(iRow, ic + i - 1 + 1).value
                    Else
                        Table.ValuesRange(1).Cells(i, 1).offset(0, 1).Hyperlinks.Delete
                    End If
                    ic = ic + 1
                End If
            Next
            
            ic = ic + Count
        End If
    Next
    
    TG.clear
    TG.FromString cCols
    For Each t In TG.ToCollection
        Select Case t
        Case "Resources"
            Set Table = GetResourcesTable
        Case "Costs"
            Set Table = GetCostsTable
        Case Else
            Debug.Print "Table not yet included on collection"
            Exit For
        End Select
        
        Count = ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.Num" & t & "Column").Column).value
          
        'add code to add more rows
        If Count > 0 Then
            Do While Count > Table.ValuesRange(1).rows.Count
                'table.ValuesRange(1).Cells(1, 1).Select
                'cmdInsert_Click
                InsertRow Table.ValuesRange(1).Cells(1, 1)
            Loop
            
            For i = 1 To Count
                Table.ValuesRange(1).Cells(i, 1).value = ChangeRequestList.Cells(iRow, ic + i - 1).value
                Table.ValuesRange(1).Cells(i, 1 + 1).value = ChangeRequestList.Cells(iRow, ic + i - 1 + 1).value
                Table.ValuesRange(1).Cells(i, 1 + 2).value = ChangeRequestList.Cells(iRow, ic + i - 1 + 2).value
                
                ic = ic + 2
            Next
            
            ic = ic + Count
            
        End If
    Next
    
    AutoFitMergedCell Me.Range("ChangeRequest.Title"), 15
    
    Application.Calculation = xlCalculationAutomatic
    GetOldValues

subend:
    Application.Calculation = xlCalculationAutomatic
    SetLock
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.setContent error:"
    Resume subend
End Sub

Private Sub AddHyperLink(R As Range)
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "AddHyperLink"
    
    R.Hyperlinks.Add Anchor:=R, Address:=R.value
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.AddHyperLink error:"
    Resume subend
End Sub


Private Sub ClearFieldValues(ar As String)
Dim n
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "ClearFieldValues"
    
    For Each n In Split(ar, ",")
        If Range("ChangeRequest." & n).MergeCells Then
            Range("ChangeRequest." & n).MergeArea.ClearContents
        Else
            Range("ChangeRequest." & n).ClearContents
        End If
    Next
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.ClearFieldValues error:"
    Resume subend
End Sub

'Public Sub ClearValues(Optional resetIndex As Boolean = False)
'Dim otherFields As String
'
'    On Error GoTo suberr
'    modStack.PushCallStack "ChangeRequest", "ClearValues"
'
'    UnprotectSheet Me
'
'    otherFields = "CRNR,StatusDate,BaseStart,BaseFinish"
'
'    'clear single fields
'    ClearFieldValues CRSingleFields
'
'    'clear CRNR and statusdate
'    ClearFieldValues otherFields
'
'    'clear tables
'    reset
'
'    Me.noupdate = True
'
'    If Not resetIndex Then
'        'reselect index 1
'        ChangeRequest.Range("ChangeRequest.Selected").value = 1
'    End If
'
'    bDirty = False
'
'subend:
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "ChangeRequest.ClearValues error:"
'    Resume subend
'End Sub

'Public Sub cmdSave_Click()
'Dim iRow As Integer, ic As Integer, Count As Integer ', skipCols As Integer
'Dim selectedIndex As Integer
'Dim template As Range, R As Range
'Dim n As Variant, T As Variant
'Dim table As TPGTable
'Dim TG As TPGTokenizer
'Dim sum As Double
'Dim dev As Double
'Dim d As New TPGDictionary
'
'    On Error GoTo suberr
'    modStack.PushCallStack "ChangeRequest", "cmdSave_Click"
'
'    If crApproved Then GoTo subend
'
'    noupdate = True
'
'    If IsDemoVersion Then GoTo subend
'
'    If IsDirty Then
'        If appQOCMsg(appGetLOCText("CRSave")) = vbCancel Then GoTo subend
'    Else
'        GoTo subend
'    End If
'
'    selectedIndex = ChangeRequest.Range("ChangeRequest.Selected").value
'
'    If selectedIndex = 1 Then 'New
'
'        iRow = ChangeRequestList.Range("ChangeRequestList.CRNR").Cells(selectedIndex, 1).row + 1
'
'        'create new row
'        Set template = ChangeRequestList.Cells(iRow - 1, ChangeRequestList.Range("ChangeRequestList.CRNR").Column)
'        ChangeRequestList.GetTable.InsertRow_Clicked template
'
'        ChangeRequestList.rows(iRow - 1).EntireRow.Hidden = True
'        ChangeRequestList.rows(iRow).EntireRow.Hidden = False
'
'    Else
'        iRow = ChangeRequestList.Range("ChangeRequestList.CRNR").Cells(selectedIndex, 1).row
'
'        ic = 1
'        'Clear Table Values
'        Do While Len(ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.DevCostsColumn").Column + ic).value) > 0
'            ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.DevCostsColumn").Column + ic).ClearContents
'            ic = ic + 1
'        Loop
'
'    End If
'
'        'CRNR
'        ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.CRNRColumn").Column).value = _
'                                        Replace(ChangeRequest.Range("ChangeRequest.CRNR").value, "-temp", "")
'
'        'copy values to CR List
'        Set TG = New TPGTokenizer
'        TG.Delimiter = ","
'
'        'simple fields
'        TG.clear
'        TG.FromString sCols
'        For Each n In TG.ToCollection
'            ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList." & n & "Column").Column).value = _
'                                                                        ChangeRequest.Range("ChangeRequest." & n).value
'        Next
'
'        'lookup fields
'        TG.clear
'        TG.FromString lCols
'        For Each n In TG.ToCollection
'            ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList." & n & "Column").Column).value = _
'                                                                        appGetLOCLookUpText(ChangeRequest.Range("ChangeRequest." & n).value, True)
'        Next
'
'        ic = ChangeRequestList.Range("ChangeRequestList.DevCostsColumn").Column + 1 'Cost should always be last column
'
'        TG.clear
'        TG.FromString tCols
'        For Each T In TG.ToCollection
'            Select Case T
'            Case "Trigger"
'                Set table = GetTriggerTable
'            Case "Description"
'                Set table = GetDescriptionTable
'            Case "Documents"
'                Set table = GetDocumentsTable
'            Case Else
'                Debug.Print "Table not yet included on collection"
'                Exit For
'            End Select
'
'            Count = 0
'            For Each R In table.ValuesRange(1)
'                If Not table.IsRowEmpty(R.row) Then
'                    Count = Count + 1
'                    ChangeRequestList.Cells(iRow, ic).value = R.value
'                    If T = "Documents" Then
'                        ChangeRequestList.Cells(iRow, ic + 1).value = R.offset(0, 1).value 'links
'                        ic = ic + 2
'                    Else
'                        ic = ic + 1
'                    End If
'                End If
'            Next
'            ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.Num" & T & "Column").Column).value = Count
'        Next
'
'        TG.clear
'        TG.FromString cCols
'        For Each T In TG.ToCollection
'            Select Case T
'            Case "Resources"
'                Set table = GetResourcesTable
'            Case "Costs"
'                Set table = GetCostsTable
'            Case Else
'                Debug.Print "Table not yet included on collection"
'                Exit For
'            End Select
'
'            Count = 0
'            sum = 0
'            dev = 0
'            For Each R In table.ValuesRange(1)
'                If Not table.IsRowEmpty(R.row) Then
'                    Count = Count + 1
'                    ChangeRequestList.Cells(iRow, ic).value = R.value
'                    ChangeRequestList.Cells(iRow, ic + 1).value = R.offset(0, 1).value
'                    ChangeRequestList.Cells(iRow, ic + 2).value = R.offset(0, 2).value
'                    sum = sum + R.offset(0, 2).value + R.offset(0, 1).value
'                    dev = dev + R.offset(0, 2).value
'                    ic = ic + 3
'
'                    'Get Values in dictionary
'                    If d.KeyExists(R.value) Then
'                        d.Replace R.value, d.GetValue(R.value) + R.offset(0, 1).value + R.offset(0, 2).value
'                    Else
'                        d.Add R.value, R.offset(0, 1).value + R.offset(0, 2).value
'                    End If
'
'                End If
'            Next
'            ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.Num" & T & "Column").Column).value = Count
'            ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.Total" & T & "Column").Column).value = sum
'            ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.Dev" & T & "Column").Column).value = dev
'        Next
'
'
'
'
'        If selectedIndex = 1 Then
'            'fix named range
'            ActiveWorkbook.Names.Add Name:="ChangeRequestList.CRNR", RefersTo:=ChangeRequestList.Range(template.offset(-1, 0), _
'                                     ChangeRequestList.Cells(iRow + ChangeRequestList.Range("ChangeRequestList.CRNR").rows.Count - 1, template.Column))
'        End If
'
'    'delete formula
''    ChangeRequestList.Calculate
''    With ChangeRequestList
''        With .Range(.Cells(iRow, .Range("ChangeRequestList.FirstColumn").Column + 1), .Cells(iRow, .Range("ChangeRequestList.LastColumn").Column - 1))
''            .Copy
''            .PasteSpecial xlValues
''        End With
''    End With
'
'    'Update Plan when approved
'    UpdateApprovedvaluesToPlan d, ChangeRequest.Range("ChangeRequest.WP").value
'
'    'reset values
'    ClearValues
'    If Not modRibbon.bnoRibbonUpdate Then modRibbon.RefreshRibbon
'
'subend:
'    Set d = Nothing
'    noupdate = False
'    SetLock
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "ChangeRequest.cmdSave_Click error:"
'    Resume subend
'End Sub

Private Sub UpdateApprovedvaluesToPlan(d As Variant, wp As String)
        Dim crApproved As Boolean
        Dim v As Variant
        Dim R As Range
        Dim iRow As Integer
        Dim iPlanView As Integer
        
        On Error GoTo suberr
        modStack.PushCallStack "ChangeRequest", "UpdateApprovedvaluesToPlan"
        
        crApproved = (LCase(Range("ChangeRequest.Status").value) = LCase(modApp.appGetLOCText("state_approved")))

        If crApproved And d.Count > 0 And Len(ChangeRequest.Range("ChangeRequest.WP").value) > 0 Then
            'Debug.Print d.Count
            bNoNormalProtectActionsRequired = True
            Plan.Activate
            iPlanView = Plan.Range("Plan.SelectedView").value
            Plan.Range("Plan.SelectedView").value = 1
            Plan.UserAction_ChangeView
            ChangeRequest.Activate

            iRow = GetRow(Plan.Range("Plan.WPs"), wp)
            
            'UPDATE DATES
            If Len(Range("ChangeRequest.StartDate").value) > 0 Then
                Plan.Cells(iRow, Plan.Range("Plan.BaseStart").Column).value = Range("ChangeRequest.StartDate").value
            End If

            If Len(Range("ChangeRequest.FinishDate").value) > 0 Then
                Plan.Cells(iRow, Plan.Range("Plan.BaseFinish").Column).value = Range("ChangeRequest.FinishDate").value
            End If
            
            For Each v In d.Collection
                Set R = Plan.Range("Plan.ProjectHeader").offset(-3, 0).Find(CStr(v.key), , xlValues, xlWhole, , , False)
                If R Is Nothing Then
                    AppStopMsg appGetLOCText("ResourceNotInPlan") & ": " & CDbl(v.value)
                Else
                    Plan.Cells(iRow, R.offset(3, 0).Column).value = CDbl(v.value)
                End If
            Next
            
            Plan.Activate
            Plan.Range("Plan.SelectedView").value = iPlanView
            Plan.UserAction_ChangeView
            
            
        End If
        
        'reset values
        ClearValues
        
subend:
        ChangeRequest.Activate
        'ChangeRequest.noupdate = False
        bNoNormalProtectActionsRequired = False
        modStack.PopCallStack
        Exit Sub
suberr:
        AppErrMsg "ChangeRequest.UpdateApprovedvaluesToPlan error:"
        Resume subend
    End Sub


Private Function GetTriggerTable() As TPGTable
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "GetTriggerTable"

    Set t = New TPGTable
    t.DisableAutoColor = True
    t.SetTable Me.Range("ChangeRequest.TriggerTable"), True, False, TemplateFirstrow, 3
    Set GetTriggerTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequest.GetTriggerTable error:"
    Resume subend
End Function

Private Function GetDescriptionTable() As TPGTable
    Dim t As TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "GetDescriptionTable"

    Set t = New TPGTable
    t.DisableAutoColor = True
    t.SetTable Me.Range("ChangeRequest.DescriptionTable"), True, False, TemplateFirstrow, 3
    Set GetDescriptionTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequest.GetDescriptionTable error:"
    Resume subend
End Function

Private Function GetDocumentsTable() As TPGTable
    Dim t As TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "GetDocumentsTable"

    Set t = New TPGTable
    t.DisableAutoColor = True
    t.SetTable Me.Range("ChangeRequest.DocumentsTable"), True, False, TemplateFirstrow, 2
    Set GetDocumentsTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequest.GetDocumentsTable error:"
    Resume subend
End Function

Private Function GetResourcesTable() As TPGTable
    Dim t As TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "GetResourcesTable"

    Set t = New TPGTable
    t.DisableAutoColor = True
    t.SetTable Me.Range("ChangeRequest.ResourcesTable"), True, False, TemplateBeforeHeader, 3, Me.Range("ChangeRequest.CostsTable")
    Set GetResourcesTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequest.GetResourcesTable error:"
    Resume subend
End Function

Private Function GetCostsTable() As TPGTable
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "GetCostsTable"

    Set t = New TPGTable
    t.DisableAutoColor = True
    t.SetTable Me.Range("ChangeRequest.CostsTable"), True, False, TemplateBeforeHeader, 3, Me.Range("ChangeRequest.ResourcesTable")
    Set GetCostsTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequest.GetCostsTable error:"
    Resume subend
End Function

Private Function GetCols() As Collection
    Dim cols As New Collection
        
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "GetCols"
    
'    Cols.Add GetTPGColumn("linkname", 1)
'    Cols.Add GetTPGColumn("linkurl", 2)
'    Set GetCols = Cols
    
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequest.GetCols error:"
    Resume subend
End Function

Private Function GetRow(lookUpRange As Range, value As String) As Integer
Dim R As Range
    
    On Error GoTo suberr
    'modStack.PushCallStack "ChangeRequest", "GetRow"
    
    GetRow = 0
    For Each R In lookUpRange
        If Trim(LCase(R.value)) = Trim(LCase(value)) Then
            GetRow = R.row
            Exit Function
        End If
    Next
    
subend:
    'modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequest.GetRow error:"
    Resume subend
End Function

Public Sub cmdUpdate_Click()
    Dim s As String
    Dim c As Range
    Dim R As Range
    Dim iPlanView As Integer
    Dim iRow As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "cmdUpdate_Click"
    
    If crApproved Then GoTo noplanupdate
    
    If appQOCMsg(appGetLOCText("ContractUpdateBasis")) = vbCancel Then GoTo subend
    
    ChangeRequest.noupdate = True
    bNoNormalProtectActionsRequired = True
    Plan.Activate
    iPlanView = Plan.Range("Plan.SelectedView").value
    Plan.Range("Plan.SelectedView").value = 1
    Plan.UserAction_ChangeView
    ChangeRequest.Activate
    
    iRow = GetRow(Plan.Range("Plan.WPs"), ChangeRequest.Range("ChangeRequest.WP"))
    
    If iRow = 0 Then GoTo subend
    
    If Plan.Cells(iRow, Plan.Range("Plan.BaseStart").Column).value = "" Then
        Range("ChangeRequest.BaseStart").value = ""
    Else
        Range("ChangeRequest.BaseStart").value = Plan.Cells(iRow, Plan.Range("Plan.BaseStart").Column).value
    End If
       
    If Plan.Cells(iRow, Plan.Range("Plan.BaseFinish").Column).value = "" Then
        Range("ChangeRequest.Basefinish").value = ""
    Else
        Range("ChangeRequest.BaseFinish").value = Plan.Cells(iRow, Plan.Range("Plan.BaseFinish").Column).value
    End If
    
    'modified for SALK
'    s = "ChangeRequest.Resources"
'    For Each c In Range(s).offset(3, 1).Resize(Range(s).rows.Count - 3, 1)
'        If c.value <> "" Then
'            Set r = Plan.Range("Plan.ProjectHeader").offset(-3, 0).Find(c.value, , xlValues, xlWhole, , , False)
'            If r Is Nothing Then
'                AppStopMsg appGetLOCText("ResourceNotInPlan") & ": " & c.value
'            Else
'                c.offset(0, 1).value = Plan.Cells(iRow, r.offset(3, 0).Column).value
'            End If
'        End If
'    Next
'
'
'    For Each c In Range(s).offset(3, 7).Resize(Range(s).rows.Count - 3, 1)
'        If c.value <> "" Then
'            Set r = Intersect(Plan.Range("Plan.WorkCostColumns"), Plan.Range("Plan.ProjectHeader").offset(-3, 0)).Find(c.value, , xlValues, xlWhole, , , False)
'            If r Is Nothing Then
'                Set r = Plan.Range("Plan.ProjectHeader").offset(-3, 0).Find(c.value, , xlValues, xlWhole, , , False)
'                If r Is Nothing Then
'                    AppStopMsg appGetLOCText("CostTypeNotInPlan") & ": " & c.value
'                Else
'                    c.offset(0, 1).value = Plan.Cells(iRow, r.offset(3, 0).Column).value
'                End If
'            Else
'                    c.offset(0, 1).value = Plan.Cells(iRow, r.offset(3, 0).Column).value
'            End If
'        End If
'    Next
    
    Plan.Activate
    Plan.Range("Plan.SelectedView").value = iPlanView
    Plan.UserAction_ChangeView
    
subend:
    ChangeRequest.Activate
    bDirty = True
    ChangeRequest.noupdate = False
    bNoNormalProtectActionsRequired = False
noplanupdate:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.cmdUpdate_Click error:"
    Resume subend
End Sub

Public Sub cmdInsert_Click()
    Dim R As Range
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "cmdInsert_Click"
        
    If crApproved Then GoTo subend
       
    If GetTriggerTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetDescriptionTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetDocumentsTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    
    Select Case sActiveLicense
       Case "D"
       Case Else
           Set R = Application.Intersect(ActiveCell, Range("ChangeRequest.Resources"))
           If Not R Is Nothing Then
               Dim WorkCostTypesCount As Integer
               Dim cts As TPGCostTypes
               Set cts = New TPGCostTypes
               cts.LoadFromWorkTypes
               WorkCostTypesCount = cts.Count
           
               Set t = GetResourcesTable
               If t.CanInsert(ActiveCell) Then
                   t.InsertRow ActiveCell.row
                   GoTo subend
               End If
                           
               Set t = GetCostsTable
               If t.CanInsert(ActiveCell) Then  'And ActiveCell.row > T.firstrow + WorkCostTypesCount Then
                   t.InsertRow ActiveCell.row
                   GoTo subend
               End If
           End If
       End Select
     
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.cmdInsert_Click error:"
    Resume subend
End Sub

Private Sub InsertRow(RR As Range)
    Dim R As Range
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "cmdInsert_Click"
        
    If crApproved Then GoTo subend
       
    If GetTriggerTable.InsertRow_Clicked(RR, False) Then GoTo subend
    If GetDescriptionTable.InsertRow_Clicked(RR, False) Then GoTo subend
    If GetDocumentsTable.InsertRow_Clicked(RR, False) Then GoTo subend
    
    Select Case sActiveLicense
       Case "D"
       Case Else
           Set R = Application.Intersect(RR, Range("ChangeRequest.Resources"))
           If Not R Is Nothing Then
               Dim WorkCostTypesCount As Integer
               Dim cts As TPGCostTypes
               Set cts = New TPGCostTypes
               cts.LoadFromWorkTypes
               WorkCostTypesCount = cts.Count
           
               Set t = GetResourcesTable
               If t.CanInsert(RR) Then
                   t.InsertRow RR.row
                   GoTo subend
               End If
                           
               Set t = GetCostsTable
               If t.CanInsert(RR) Then  'And ActiveCell.row > T.firstrow + WorkCostTypesCount Then
                   t.InsertRow RR.row
                   GoTo subend
               End If
           End If
       End Select
     
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    Dim R As Range
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "cmdDelete_Click"
    
    If crApproved Then GoTo subend
    
    If GetTriggerTable.DeleteRow_Clicked(ActiveCell, False) Then
        bDirty = True
        GoTo subend
    ElseIf GetDescriptionTable.DeleteRow_Clicked(ActiveCell, False) Then
        bDirty = True
        GoTo subend
    ElseIf GetDocumentsTable.DeleteRow_Clicked(ActiveCell, False) Then
        bDirty = True
        GoTo subend
    End If
    
    Set R = Application.Intersect(ActiveCell, Range("ChangeRequest.Resources"))
    If Not R Is Nothing Then
        
        Set t = GetResourcesTable
        If t.CanDelete(ActiveCell) Then
            If appQOCMsg(appGetLOCText("DeleteRow")) = vbOK Then
                t.DeleteRow ActiveCell
            End If
            bDirty = True
            GoTo subend
        End If
    
        Set t = GetCostsTable
        If t.CanDelete(ActiveCell) Then 'And ActiveCell.row >= T.firstrow + WorkCostTypesCount Then
            If appQOCMsg(appGetLOCText("DeleteRow")) = vbOK Then
                t.DeleteRow ActiveCell
            End If
            bDirty = True
            GoTo subend
        End If
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.cmdDelete_Click error:"
    Resume subend
End Sub


Public Sub reset()
    
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "reset"
    
    noupdate = True
    
    GetTriggerTable.clear
    GetDescriptionTable.clear
    GetDocumentsTable.clear
    
    
    GetResourcesTable.clear
    GetCostsTable.clear
    
    ChangeRequest.Range("ChangeRequest.CRNR").MergeArea.ClearContents
    'FormatCostTypes New TPGCostTypes
'    ....
    noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.reset error:"
    Resume subend
End Sub


'this is to auto fix resources when updated on contract
    Private Sub Worksheet_Activate()
        On Error GoTo suberr
        'modStack.PushCallStack "ChangeRequest", "Worksheet_Activate"
        
        bDirty = False
        GetOldValues

        SetLock 'Range("ChangeRequest.Selected").Value

        'If Not modConst.bNoNormalProtectActionsRequired Then
        'UpdateDDLResourceTable "ChangeRequest.ResourcesTable", "Contract.ResourcesTable"
        'UpdateDDLResourceTable "ChangeRequest.CostsTable", "Contract.CostTable"
        'End If
        
subend:
        noupdate = False
        'modStack.PopCallStack
        Exit Sub
suberr:
        AppErrMsg "ChangeRequest.Worksheet_Activate error:"
        Resume subend
    End Sub

Public Sub AddResources()
    Dim s As String
    Dim TG As New TPGTokenizer
    s = "Contract.ResourcesTable"
    TG.FromRangeNoBlanks Contract.Range(s).offset(1, 2).Resize(Contract.Range(s).rows.Count - 3, 1)

    Do While TG.Count > GetResourcesTable.ValuesRange(1).rows.Count
        InsertRow GetResourcesTable.ValuesRange(1).Cells(1, 1)
    Loop
    
    TG.ToRange GetResourcesTable.ValuesRange(1).Cells(1, 1)
    
    s = "Contract.CostTable"
    TG.FromRangeNoBlanks Contract.Range(s).offset(1, 2).Resize(Contract.Range(s).rows.Count - 3, 1)
    
    Do While TG.Count > GetCostsTable.ValuesRange(1).rows.Count
        InsertRow GetCostsTable.ValuesRange(1).Cells(1, 1)
    Loop
    
    TG.ToRange GetCostsTable.ValuesRange(1).Cells(1, 1)
    
End Sub


'Private Sub UpdateDDLResourceTable(Target As String, source As String)
'    Dim R As Range
'
'    On Error GoTo suberr
'    modStack.PushCallStack "ChangeRequest", "UpdateDDLResourceTable"
'
'    modApp.UnprotectSheet Me
'    With ChangeRequest.Range(Target).Resize(ChangeRequest.Range(Target).rows.Count - 2, 1).offset(1, 1).Validation
'        .Delete
'        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
'        xlBetween, Formula1:="=" & Contract.Name & "!" & Contract.Range(source).Resize(Contract.Range(source).rows.Count - 3, 1).offset(1, 2).Address
'        .IgnoreBlank = True
'        .InCellDropdown = True
'        .ShowInput = True
'        .ShowError = True
'    End With
'
'    'change validation on templaterow
'    With ChangeRequest.Range(Target).Resize(1, 1).offset(-1, 1).Validation
'        .Delete
'        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
'        xlBetween, Formula1:="=" & Me.Name & "!" & Contract.Range(source).Resize(Contract.Range(source).rows.Count - 3, 1).offset(1, 2).Address
'        .IgnoreBlank = True
'        .InCellDropdown = True
'        .ShowInput = True
'        .ShowError = True
'    End With
'
'subend:
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "ChangeRequest.UpdateDDLResourceTable error:"
'    Resume subend
'End Sub



'Private Sub SetLock(Optional index As String)
'    Dim lck As Boolean
'    Dim n
'
'    On Error GoTo suberr
'    modStack.PushCallStack "ChangeRequest", "SetLock"
'
'    lck = False
'
'    If crApproved Then
'        lck = True
'    End If
'
'    modApp.UnprotectSheet ChangeRequest
'    For Each n In Split(CRSingleFields, ",")
'        If Range("ChangeRequest." & n).MergeCells Then
'            Range("ChangeRequest." & n).MergeArea.locked = lck
'        Else
'            Range("ChangeRequest." & n).locked = lck
'        End If
'    Next
'
'    For Each n In Split(tCols, ",")
'        If Range("ChangeRequest." & n & "Table").MergeCells Then
'            Range("ChangeRequest." & n & "Table").MergeArea.locked = lck
'        Else
'            Range("ChangeRequest." & n & "Table").locked = lck
'        End If
'
'        'lock header
'        If Range("ChangeRequest." & n & "Table").rows(1).MergeCells Then
'            Range("ChangeRequest." & n & "Table").rows(1).MergeArea.locked = True
'        Else
'            Range("ChangeRequest." & n & "Table").rows(1).locked = True
'        End If
'
'        'lock footer
'        If Range("ChangeRequest." & n & "Table").rows(Range("ChangeRequest." & n & "Table").rows.Count).MergeCells Then
'            Range("ChangeRequest." & n & "Table").rows(Range("ChangeRequest." & n & "Table").rows.Count).MergeArea.locked = True
'        Else
'            Range("ChangeRequest." & n & "Table").rows(Range("ChangeRequest." & n & "Table").rows.Count).locked = True
'        End If
'
'    Next
'
'    For Each n In Split(cCols, ",")
'        If Range("ChangeRequest." & n & "Table").MergeCells Then
'            Range("ChangeRequest." & n & "Table").MergeArea.locked = lck
'        Else
'            Range("ChangeRequest." & n & "Table").locked = lck
'        End If
'
'        'lock header
'        If Range("ChangeRequest." & n & "Table").rows(1).MergeCells Then
'            Range("ChangeRequest." & n & "Table").rows(1).MergeArea.locked = True
'        Else
'            Range("ChangeRequest." & n & "Table").rows(1).locked = True
'        End If
'
'        'lock footer
'        If Range("ChangeRequest." & n & "Table").rows(Range("ChangeRequest." & n & "Table").rows.Count).MergeCells Then
'            Range("ChangeRequest." & n & "Table").rows(Range("ChangeRequest." & n & "Table").rows.Count).MergeArea.locked = True
'        Else
'            Range("ChangeRequest." & n & "Table").rows(Range("ChangeRequest." & n & "Table").rows.Count).locked = True
'        End If
'    Next
'
'subend:
'    If Not ChangeRequest.ProtectContents Then
'        modApp.EnsureUIProtection Me
'    End If
'
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "ChangeRequest.SetLock error:"
'    Resume subend
'End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
Exit Sub
    On Error GoTo suberr
    'modStack.PushCallStack "ChangeRequest", "Worksheet_BeforeRightClick"
    
    If (InRange(Target, Me.Range("ChangeRequest.TriggerTable"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("ChangeRequest.DescriptionTable"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("ChangeRequest.DocumentsTable"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("ChangeRequest.ResourcesTable"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("ChangeRequest.CostsTable"))) Then
        modContextMenu.BuildTableContext False, False
    Else
        modContextMenu.RestoreDefaultMenu
    End If

subend:
    'modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.Worksheet_BeforeRightClick error:"
    Resume subend
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
        If noupdate Then GoTo Fit:

        On Error GoTo suberr
        'modStack.PushCallStack "Contract", "Worksheet_Change"
        'Application.EnableEvents = False
        
        'create CRNR if needed
        If IsDirty And (Len(Range("ChangeRequest.CRNR").value) = 0) Then
            GenCRNR
        End If
        
        Application.ScreenUpdating = False
        
        If InRange(Target, Range("ChangeRequest.WP")) Then
            If UpdateBaseValues(Target) Then GoTo subend
        ElseIf InRange(Target, Range("ChangeRequest.Title")) Then
            CellFunctions.AutoFitMergedCell Target, 15
        ElseIf InRange(Target, Range("ChangeRequest.StartDate")) Then
            GoTo subend
        ElseIf InRange(Target, Range("ChangeRequest.FinishDate")) Then
            GoTo subend
        ElseIf InRange(Target, Range("ChangeRequest.Status")) Then
            If SetStatusDate(Target) Then GoTo subend
        End If
        
        If Not InRange(Target, Range("ChangeRequest.Info")) Then
            If InRange(Target, Range("ChangeRequest.Resources")) Then
                'when updating actual values of resources we recalc the corresponding actual workcost
                If InRange(Target, GetResourcesTable.ValuesRange(3)) Then
                    UpdateActualWorkCost Target
                End If
                GoTo subend
            End If
            
        End If
        
Fit:
            
            If Not InRange(Target, Range("ChangeRequest.Info")) And Not InRange(Target, Range("ChangeRequest.Resources")) Then
                If GetTriggerTable.Mergedfit(Target) Then GoTo subend
                If GetDescriptionTable.Mergedfit(Target) Then GoTo subend
                If GetDocumentsTable.Mergedfit(Target) Then
        '            If Target.Column = GetDocumentsTable.ValuesRange(4).Column And Target.Columns.Count = 1 Then
        '                AddHyperLink Target
        '            End If
                    GoTo subend
                End If
            End If
            
       
subend:
        Application.EnableEvents = True
        Application.ScreenUpdating = False
        
        'modStack.PopCallStack
        Exit Sub
suberr:
        AppErrMsg "Contract.Worksheet_Change error:"
        Resume subend
    End Sub

Private Sub UpdateActualWorkCost(Target As Range)
    Dim swc As String
    Dim c As Range
    Dim sum As Double
    If Not IsError(Me.Cells(Target.row, Me.Range("ChangeRequest.RateColumn").Column + 1).value) Then
        swc = Me.Cells(Target.row, Me.Range("ChangeRequest.RateColumn").Column + 1).value
        sum = 0
        'make sum of all actual values for this workcosttype
        For Each c In GetResourcesTable.ValuesRange(3)
            If Not IsError(Me.Cells(c.row, Me.Range("ChangeRequest.RateColumn").Column + 1).value) Then
                If Me.Cells(c.row, Me.Range("ChangeRequest.RateColumn").Column + 1).value = swc Then
                    sum = sum + (c.value * Me.Cells(c.row, Me.Range("ChangeRequest.RateColumn").Column).value)
                End If
            End If
        Next
        'find workcosttype in costtable and update actual column for this costtype
        For Each c In GetCostsTable.ValuesRange(1)
            If c.value = swc Then
                c.offset(0, 2).value = sum
                Exit For
            End If
        Next
    End If
End Sub

Private Function UpdateBaseValues(R As Range) As Boolean
        On Error GoTo suberr
        modStack.PushCallStack "Contract", "UpdateBaseValues"
        Dim fnoupdate As Boolean

        If R.Address = Range("ChangeRequest.WP").Address And Not noupdate Then
            'If GetResourcesTable.IsTableEmpty And GetCostsTable.IsTableEmpty Then GoTo subend
            
            'remove records if any
            noupdate = True
            GetResourcesTable.ValuesRange(3).ClearContents
            GetCostsTable.ValuesRange(3).ClearContents
            
            AddResources
            cmdUpdate_Click 'refresh base values whenever wp is changed
            UpdateBaseValues = True
        End If
        
subend:
        modStack.PopCallStack
        Exit Function
suberr:
        AppErrMsg "Contract.UpdateBaseValues error:"
        Resume subend
    End Function

Private Function SetStatusDate(R As Range) As Boolean
    On Error GoTo suberr
'    modStack.PushCallStack "Contract", "SetStatusDate"
    
    If R.Address = Range("ChangeRequest.Status").Address Then
          ChangeRequest.Range("ChangeRequest.statusdate").value = Date
          SetStatusDate = True
    End If
        
subend:
'    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.SetStatusDate error:"
    Resume subend
End Function

Private Function GenCRNR() As Boolean
    On Error GoTo suberr
'    modStack.PushCallStack "ChangeRequest", "GenCRNR"
    
    If IsDirty And Len(Range("ChangeRequest.CRNR").value) = 0 And noupdate = False Then
        Range("ChangeRequest.CRNR").value = IIf(Cover.Range("Cover.ProjectNo").value = "", "CR-", Cover.Range("Cover.ProjectNo").value & "_") & _
                                             ChangeRequestList.Range("ChangeRequestList.CRNR").rows.Count & "-temp"
        'Get PM and PS on cover sheet
        ChangeRequest.Range("ChangeRequest.ProjectSponsor").value = Cover.Range("Cover.ProjectSponsor").Cells(1, 1).value
        ChangeRequest.Range("ChangeRequest.ProjectManager").value = Cover.Range("Cover.ProjectManager").Cells(1, 1).value
        GenCRNR = True
    End If
    
subend:
'    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequest.GenCRNR error:"
    Resume subend
End Function

Private Sub Worksheet_Deactivate()
    On Error GoTo suberr
    'modStack.PushCallStack "ChangeRequest", "Worksheet_Deactivate"
    
    modContextMenu.RestoreDefaultMenu
    Set CROldVals = Nothing
    noupdate = False
    
subend:
    'modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.Worksheet_Deactivate error:"
    Resume subend
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    On Error GoTo suberr
    'modStack.PushCallStack "ChangeRequest", "Worksheet_SelectionChange"
    
    'get old values if on open of workbook CR is active
    If CROldVals Is Nothing Then
        GetOldValues
    End If
      
subend:
    'modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.Worksheet_SelectionChange error:"
    Resume subend
End Sub


Private Sub SetLock(Optional index As String)
    Dim lck As Boolean
    Dim n, m
    
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "SetLock"
    
   
    lck = False
    
    If crApproved Then
        lck = True
    End If
    
    'modApp.UnprotectSheet ChangeRequest
    For Each n In Split(CRSingleFields, ",")
        If Range("ChangeRequest." & n).MergeCells Then
            Range("ChangeRequest." & n).MergeArea.locked = lck
        Else
            Range("ChangeRequest." & n).locked = lck
        End If
    Next
    
    For Each n In Split(tCols, ",")
        If Range("ChangeRequest." & n & "Table").MergeCells Then
            Range("ChangeRequest." & n & "Table").MergeArea.locked = lck
        Else
            Range("ChangeRequest." & n & "Table").locked = lck
        End If
        
        'lock header
        If Range("ChangeRequest." & n & "Table").rows(1).MergeCells Then
            Range("ChangeRequest." & n & "Table").rows(1).MergeArea.locked = True
        Else
            Range("ChangeRequest." & n & "Table").rows(1).locked = True
        End If
        
        'lock footer
        If Range("ChangeRequest." & n & "Table").rows(Range("ChangeRequest." & n & "Table").rows.Count).MergeCells Then
            Range("ChangeRequest." & n & "Table").rows(Range("ChangeRequest." & n & "Table").rows.Count).MergeArea.locked = True
        Else
            Range("ChangeRequest." & n & "Table").rows(Range("ChangeRequest." & n & "Table").rows.Count).locked = True
        End If
        
        'lock left cells
        For Each m In Range("ChangeRequest." & n & "Table").Resize(Range("ChangeRequest." & n & "Table").rows.Count - 1, 1).offset(1, 0)
            m.locked = True
        Next

        'lock right cells
        For Each m In Range("ChangeRequest." & n & "Table").Resize(Range("ChangeRequest." & n & "Table").rows.Count - 1, 1).offset(1, Range("ChangeRequest." & n & "Table").Columns.Count - 1)
            m.locked = True
        Next
        
    Next
    
    For Each n In Split(cCols, ",")
        If Range("ChangeRequest." & n & "Table").MergeCells Then
            Range("ChangeRequest." & n & "Table").MergeArea.locked = lck
        Else
            Range("ChangeRequest." & n & "Table").locked = lck
        End If
        
        'lock header
        If Range("ChangeRequest." & n & "Table").rows(1).MergeCells Then
            Range("ChangeRequest." & n & "Table").rows(1).MergeArea.locked = True
        Else
            Range("ChangeRequest." & n & "Table").rows(1).locked = True
        End If
        
        'lock footer
        If Range("ChangeRequest." & n & "Table").rows(Range("ChangeRequest." & n & "Table").rows.Count).MergeCells Then
            Range("ChangeRequest." & n & "Table").rows(Range("ChangeRequest." & n & "Table").rows.Count).MergeArea.locked = True
        Else
            Range("ChangeRequest." & n & "Table").rows(Range("ChangeRequest." & n & "Table").rows.Count).locked = True
        End If
        
        'lock left cells
        For Each m In Range("ChangeRequest." & n & "Table").Resize(Range("ChangeRequest." & n & "Table").rows.Count - 1, 1).offset(1, 0)
            m.locked = True
        Next

        'lock right cells
        For Each m In Range("ChangeRequest." & n & "Table").Resize(Range("ChangeRequest." & n & "Table").rows.Count - 1, 1).offset(1, Range("ChangeRequest." & n & "Table").Columns.Count - 1)
            m.locked = True
        Next
    Next
    
subend:
'    If Not ChangeRequest.ProtectContents Then
'        modApp.EnsureUIProtection Me
'    End If

    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.SetLock error:"
    Resume subend
End Sub
'------------------
Public Sub cmdSave_Click()
        Dim iRow As Integer, ic As Integer, Count As Integer ', skipCols As Integer
        Dim selectedIndex As Integer
        Dim template As Range, R As Range
        Dim n As Variant, t As Variant
        Dim Table As TPGTable
        Dim TG As TPGTokenizer
        Dim sum As Double
        Dim dev As Double
        Dim d As New TPGDictionary

        On Error GoTo suberr
        modStack.PushCallStack "ChangeRequest", "cmdSave_Click"
        
        If crApproved Then GoTo subend
        
        noupdate = True
        
        If IsDemoVersion Then GoTo subend
        
        If IsDirty Then
            If appQOCMsg(appGetLOCText("CRSave")) = vbCancel Then GoTo subend
        Else
            GoTo subend
        End If
        
        selectedIndex = ChangeRequest.Range("ChangeRequest.Selected").value
        
        If selectedIndex = 1 Then 'New

            iRow = ChangeRequestList.Range("ChangeRequestList.CRNR").Cells(selectedIndex, 1).row + 1
            
            'create new row
            Set template = ChangeRequestList.Cells(iRow - 1, ChangeRequestList.Range("ChangeRequestList.CRNR").Column)
            ChangeRequestList.GetTable.InsertRow_Clicked template
            
            ChangeRequestList.rows(iRow - 1).EntireRow.Hidden = True
            ChangeRequestList.rows(iRow).EntireRow.Hidden = False
            
        Else
            iRow = ChangeRequestList.Range("ChangeRequestList.CRNR").Cells(selectedIndex, 1).row
            
            ic = 1
            'Clear Table Values
            Do While Len(ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.DevCostsColumn").Column + ic).value) > 0
                ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.DevCostsColumn").Column + ic).ClearContents
                ic = ic + 1
            Loop
            
        End If
        
            'CRNR
            ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.CRNRColumn").Column).value = _
                                            Replace(ChangeRequest.Range("ChangeRequest.CRNR").value, "-temp", "")

            'copy values to CR List
            Set TG = New TPGTokenizer
            TG.Delimiter = ","
            
            'simple fields
            TG.clear
            TG.FromString sCols
            For Each n In TG.ToCollection
                ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList." & n & "Column").Column).value = _
                                                                            ChangeRequest.Range("ChangeRequest." & n).value
                'we disable wraptext to avoid unnec. high rows when adjusting rowheight for visible fields
                ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList." & n & "Column").Column).WrapText = False
            Next
            
            'lookup fields
            TG.clear
            TG.FromString lCols
            For Each n In TG.ToCollection
                ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList." & n & "Column").Column).value = _
                                                                            appGetLOCLookUpText(ChangeRequest.Range("ChangeRequest." & n).value, True)
            Next
            
            ic = ChangeRequestList.Range("ChangeRequestList.DevCostsColumn").Column + 1 'Cost should always be last column
            
            TG.clear
            TG.FromString tCols
            For Each t In TG.ToCollection
                Select Case t
                Case "Trigger"
                    Set Table = GetTriggerTable
                Case "Description"
                    Set Table = GetDescriptionTable
                Case "Documents"
                    Set Table = GetDocumentsTable
                Case Else
                    Debug.Print "Table not yet included on collection"
                    Exit For
                End Select
                
                Count = 0
                For Each R In Table.ValuesRange(1)
                    If Not Table.IsRowEmpty(R.row) Then
                        Count = Count + 1
                        ChangeRequestList.Cells(iRow, ic).value = R.value
                        If t = "Documents" Then
                            ChangeRequestList.Cells(iRow, ic + 1).value = R.offset(0, 1).value 'links
                            ic = ic + 2
                        Else
                            ic = ic + 1
                        End If
                    End If
                Next
                ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.Num" & t & "Column").Column).value = Count
            Next
            
            TG.clear
            TG.FromString cCols
            For Each t In TG.ToCollection
                Select Case t
                Case "Resources"
                    Set Table = GetResourcesTable
                Case "Costs"
                    Set Table = GetCostsTable
                Case Else
                    Debug.Print "Table not yet included on collection"
                    Exit For
                End Select
                
                Count = 0
                sum = 0
                dev = 0
                For Each R In Table.ValuesRange(1)
                    'code fixed to edit only items with changed
                    If Not Table.IsRowEmpty(R.row) And R.offset(0, 2).value <> "" Then
                        Count = Count + 1
                        ChangeRequestList.Cells(iRow, ic).value = R.value
                        ChangeRequestList.Cells(iRow, ic + 1).value = R.offset(0, 1).value
                        ChangeRequestList.Cells(iRow, ic + 2).value = R.offset(0, 2).value
                        sum = sum + R.offset(0, 2).value + R.offset(0, 1).value
                        dev = dev + R.offset(0, 2).value
                        ic = ic + 3
                        
                        'Get Values in dictionary
                        If d.KeyExists(R.value) Then
                            d.Replace R.value, d.GetValue(R.value) + R.offset(0, 1).value + R.offset(0, 2).value
                        Else
                            d.Add R.value, R.offset(0, 1).value + R.offset(0, 2).value
                        End If
                        
                    End If
                Next
                ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.Num" & t & "Column").Column).value = Count
                ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.Total" & t & "Column").Column).value = sum
                ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.Dev" & t & "Column").Column).value = dev
            Next
            
            
            
                               
            If selectedIndex = 1 Then
                'fix named range
                ActiveWorkbook.Names.Add Name:="ChangeRequestList.CRNR", RefersTo:=ChangeRequestList.Range(template.offset(-1, 0), _
                                         ChangeRequestList.Cells(iRow + ChangeRequestList.Range("ChangeRequestList.CRNR").rows.Count - 1, template.Column))
            End If
            
        'delete formula
        '    ChangeRequestList.Calculate
        '    With ChangeRequestList
        '        With .Range(.Cells(iRow, .Range("ChangeRequestList.FirstColumn").Column + 1), .Cells(iRow, .Range("ChangeRequestList.LastColumn").Column - 1))
        '            .Copy
        '            .PasteSpecial xlValues
        '        End With
        '    End With
        'set rowheight
        AutoFitMergedCell ChangeRequestList.Cells(iRow, 5), 14
        
        If Not modRibbon.bnoRibbonUpdate Then modRibbon.RefreshRibbon
        
        'Update Plan when approved
        If (LCase(Range("ChangeRequest.Status").value) = LCase(modApp.appGetLOCText("state_approved"))) Then
            UpdateApprovedvaluesToPlan d, ChangeRequest.Range("ChangeRequest.WP").value
        Else
            'reset values
            ClearValues
        End If

subend:
        Set d = Nothing
        noupdate = False
        'SetLock
        modStack.PopCallStack
        Exit Sub
suberr:
        AppErrMsg "ChangeRequest.cmdSave_Click error:"
        Resume subend
    End Sub

Public Sub ClearValues(Optional resetIndex As Boolean = False)
Dim otherFields As String
    
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "ClearValues"
    
    'UnprotectSheet Me
        
    otherFields = "CRNR,StatusDate,BaseStart,BaseFinish"
    
    'clear single fields
    ClearFieldValues CRSingleFields

    'clear CRNR and statusdate
    ClearFieldValues otherFields
    
    AutoFitMergedCell Me.Range("Changerequest.Title"), 15

    'clear tables
    reset
    
    Me.noupdate = True
    
    If Not resetIndex Then
        'reselect index 1
        ChangeRequest.Range("ChangeRequest.Selected").value = 1
    End If
    
    bDirty = False
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.ClearValues error:"
    Resume subend
End Sub

Public Sub UpdateDDLResourceTable(Target As String, source As String)
    Dim R As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequest", "UpdateDDLResourceTable"
    
    If Not Me.ProtectContents Then
    'modApp.UnprotectSheet Me
        With ChangeRequest.Range(Target).Resize(ChangeRequest.Range(Target).rows.Count - 2, 1).offset(1, 1).Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:="=" & Contract.Name & "!" & Contract.Range(source).Resize(Contract.Range(source).rows.Count - 3, 1).offset(1, 2).Address
            .IgnoreBlank = True
            .InCellDropdown = True
            .ShowInput = True
            .ShowError = True
        End With
    
        'change validation on templaterow
        With ChangeRequest.Range(Target).Resize(1, 1).offset(-1, 1).Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:="=" & Me.Name & "!" & Contract.Range(source).Resize(Contract.Range(source).rows.Count - 3, 1).offset(1, 2).Address
            .IgnoreBlank = True
            .InCellDropdown = True
            .ShowInput = True
            .ShowError = True
        End With
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequest.UpdateDDLResourceTable error:"
    Resume subend
End Sub



Attribute VB_Name = "ChangeRequestList"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Dim noupdate As Boolean

Private Const sCols As String = "crnr,title,petitioner,wp,priority,category,status,projectsponsor,projectmanager" 'text columns
Private Const dCols As String = "date,startdate,finishdate,basestart,basefinish,statusdate" 'date columns
Private Const iCols As String = "numtrigger,numdescription,numdocuments,numresources,numcosts,totalresources,devresources,totalcosts,devcosts" 'integer columns

Public Function GetTable() As TPGTable
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequestList", "GetTable"

    Set t = New TPGTable
    t.SetTable Me.Range("ChangeRequestList.Table"), True, False, TemplateFirstrow, 1
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequestList.GetTable error:"
    Resume subend
End Function



Public Sub ShowDashboard_Click()
    Dim c As ChartObject

    On Error GoTo suberr
    'modStack.PushCallStack "ChangeRequestList", "ShowDashboard"
    
    UnprotectSheet Me
    ChangeRequestList.Shapes("ChangeRequestList.Chart.Category").visible = Not ChangeRequestList.Range("ChangeRequestList.ShowDashboard").value
    
    With ChangeRequestList.Range("ChangeRequestList.Block.Dashboard").EntireRow
        .Hidden = ChangeRequestList.Range("ChangeRequestList.ShowDashboard").value
        ChangeRequestList.Range("ChangeRequestList.ShowDashboard").value = Not .Hidden
    End With

    If ChangeRequestList.Range("ChangeRequestList.ShowDashboard").value Then

        'modShapes.SetCharts Me

        SetPieDataLabels "ChangeRequestList.Chart.Priority"
        SetPieDataLabels "ChangeRequestList.Chart.Status"
    End If

subend:
    EnsureUIProtection Me
    'modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequestList.ShowDashboard error:"
    Resume subend
End Sub

Public Sub cmdJumpToCRF_Click()
    On Error GoTo suberr
'    modStack.PushCallStack "Plan", "cmdJumpToProject_Click"

    If ActiveCell.row > Range("ChangeRequestList.CRNR").Cells(1, 1).row And _
       ActiveCell.row < Range("ChangeRequestList.CRNR").Cells(Range("ChangeRequestList.CRNR").rows.Count + 1, 1).row Then
        ChangeRequest.Range("ChangeRequest.Selected").value = ActiveCell.row - Range("ChangeRequestList.CRNR").Cells(1, 1).row + 1
        ChangeRequest.cboLoad
        ChangeRequest.Activate
    End If

subend:
'    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.cmdJumpToProject_Click error:"
    Resume subend
End Sub

Private Function GetCols() As Collection
    Dim cols As New Collection

    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequestList", "GetCols"

'    Cols.Add GetTPGColumn("linkname", 1)
'    Cols.Add GetTPGColumn("linkurl", 2)
'    Set GetCols = Cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequestList.GetCols error:"
    Resume subend
End Function

Public Sub cmdInsert_Click()

    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequestList", "cmdInsert_Click"

    GetTable.InsertRow_Clicked ActiveCell

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequestList.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()

    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequestList", "cmdDelete_Click"

    GetTable.DeleteRow_Clicked ActiveCell

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequestList.cmdDelete_Click error:"
    Resume subend
End Sub

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    Dim c, s
    Dim nrecord, ntable
    Dim found As Boolean
    Dim t As TPGTokenizer
    Dim sumExt As Integer
    Dim R As Range, extraText As String

    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequestList", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    Set t = New TPGTokenizer


    Set ntable = xmlDom.createNode(1, "crlists", "")

    
    If ChangeRequestList.Range("ChangeRequestList.CRNR").rows.Count > 1 Then
        For Each c In ChangeRequestList.Range("ChangeRequestList.CRNR").Resize(ChangeRequestList.Range("ChangeRequestList.CRNR").rows.Count - 1, 1).offset(1, 0)
            found = False
            If c.value <> "" Then
                Set nrecord = xmlDom.createNode(1, "crf", "")
                found = True

                t.Delimiter = ","
                t.clear
                t.FromString sCols
                For Each s In t.ToCollection
                    AddNode xmlDom, nrecord, CStr(s), ChangeRequestList.Cells(c.row, _
                        ChangeRequestList.Range("ChangeRequestList." & s & "Column").Column).value
                Next

                t.clear
                t.FromString dCols
                For Each s In t.ToCollection
                    AddNode xmlDom, nrecord, CStr(s), ChangeRequestList.Cells(c.row, ChangeRequestList.Range("ChangeRequestList." & s & "Column").Column).value
                Next

                t.clear
                t.FromString iCols
                For Each s In t.ToCollection
                    AddNode xmlDom, nrecord, CStr(s), ChangeRequestList.Cells(c.row, ChangeRequestList.Range("ChangeRequestList." & s & "Column").Column).value
                Next

'                T.Delimiter = "|"
'                T.clear
                extraText = ""
                s = "DevCosts" 'last column of num and sums on data

                sumExt = Application.WorksheetFunction.sum(Range(ChangeRequestList.Cells(c.row, ChangeRequestList.Range("ChangeRequestList.NumTriggerColumn").Column), _
                            ChangeRequestList.Cells(c.row, ChangeRequestList.Range("ChangeRequestList.NumDescriptionColumn").Column))) + _
                            ChangeRequestList.Cells(c.row, ChangeRequestList.Range("ChangeRequestList.NumDocumentsColumn").Column).value * 2 + _
                            ChangeRequestList.Cells(c.row, ChangeRequestList.Range("ChangeRequestList.NumResourcesColumn").Column).value * 3 + _
                            ChangeRequestList.Cells(c.row, ChangeRequestList.Range("ChangeRequestList.NumCostsColumn").Column).value * 3


                If Not sumExt = 0 Then
'                    T.FromRange ChangeRequestList.Range(ChangeRequestList.Cells(c.row, ChangeRequestList.Range("ChangeRequestList." & s & "Column").Column + 1), _
'                                ChangeRequestList.Cells(c.row, ChangeRequestList.Range("ChangeRequestList." & s & "Column").Column + _
'                                sumExt))
                    For Each R In ChangeRequestList.Range(ChangeRequestList.Cells(c.row, ChangeRequestList.Range("ChangeRequestList." & s & "Column").Column + 1), _
                                ChangeRequestList.Cells(c.row, ChangeRequestList.Range("ChangeRequestList." & s & "Column").Column + _
                                sumExt))
                    extraText = extraText & "|" & R.value
                    Next
                    AddNode xmlDom, nrecord, "Extra", Right(extraText, Len(extraText) - 1)
                    'AddNode xmlDom, nrecord, "Extra", T.ToString
                End If
            End If

            If found Then ntable.appendchild nrecord
        Next
    End If

    n.appendchild ntable

    Set CreateXml = n
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequestList.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, sversion As String)
    Dim i As Integer
    Dim iRow As Integer, iRowData As Integer

    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequestList", "ImportXml"

    ChangeRequest.ClearValues
    reset

    If Not Node Is Nothing Then


        iRow = ChangeRequestList.Range("ChangeRequestList.CRNR").Cells(1, 1).row

        For i = GetTable.RowsCount To Node.SelectNodes("crlists/crf").length
            GetTable.AddRow
            iRow = iRow + 1
        Next

        ActiveWorkbook.Names.Add Name:="ChangeRequestList.CRNR", RefersTo:=ChangeRequestList.Range(ChangeRequestList.Range("ChangeRequestList.CRNR").Cells(1, 1), _
                                     ChangeRequestList.Cells(iRow, ChangeRequestList.Range("ChangeRequestList.CRNR").Column))

        'add data
        ImportRowValuesByColumnList Node, "crlists/crf", sCols, ChangeRequestList.Range("ChangeRequestList.CRNR").Cells(1, 1).row + 1

        ImportRowValuesByColumnList Node, "crlists/crf", dCols, ChangeRequestList.Range("ChangeRequestList.CRNR").Cells(1, 1).row + 1

        ImportRowValuesByColumnList Node, "crlists/crf", iCols, ChangeRequestList.Range("ChangeRequestList.CRNR").Cells(1, 1).row + 1

        'add extra

        ImportRowValuesByColumnList Node, "crlists/crf", "Extra", ChangeRequestList.Range("ChangeRequestList.CRNR").Cells(1, 1).row + 1, True

    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequestList.ImportXml error:"
    Resume subend
End Sub

Private Sub ImportRowValuesByColumnList(Node As Variant, rowxpath, colsListStr As String, iRow As Integer, Optional getExtra As Boolean = False)
    Dim t As TPGTokenizer
    Dim n, s, last As String
    Dim i As Integer

    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequestList", "ImportRowValuesByColumnList"

    Set t = New TPGTokenizer
    If getExtra Then
        t.Delimiter = "|"
    Else
        t.Delimiter = ","
    End If
    last = "DevCosts"

    For Each n In Node.SelectNodes(rowxpath)
        If Not getExtra Then
            t.clear
            t.FromString colsListStr
            For Each s In t.ToCollection
                If Not n.SelectSingleNode(CStr(s)) Is Nothing Then
                    With ChangeRequestList.Cells(iRow, _
                            ChangeRequestList.Range(ChangeRequestList.CodeName & "." & CStr(s) & "Column").Column)
                            .value = CastStringToVar(n.SelectSingleNode(CStr(s)).Text)
                    End With
                End If

            Next

        Else
            If Not n.SelectSingleNode(colsListStr) Is Nothing Then
                i = 0
                t.clear
                t.FromString n.SelectSingleNode(colsListStr).Text

                For Each s In t.ToCollection
                    ChangeRequestList.Cells(iRow, ChangeRequestList.Range(ChangeRequestList.CodeName & "." & last & "Column").Column).offset(0, 1 + i).value = CastStringToVar(s)
                    i = i + 1
                Next
            End If

        End If

        iRow = iRow + 1
    Next

subend:
    Set t = Nothing
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequestList.ImportRowValuesByColumnList error:"
    Resume subend
End Sub

Public Sub reset()

    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequestList", "reset"

    noupdate = True
    GetTable.clear

    'hide row 0
    ChangeRequestList.Range("ChangeRequestList.CRNR").EntireRow.Hidden = True
    noupdate = False
    
    'hide dashboard if it is not hidden
   ' If Not ChangeRequestList.Range("ChangeRequestList.Block.Dashboard").EntireRow.Hidden Then
     '   ShowDashboard_Click
  '  End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequestList.reset error:"
    Resume subend
End Sub

'/*NamedRange required on Admin: Admin.CRCategories*/
Public Sub SyncCategotyToChart()
Dim R As Range, c As Integer

        On Error GoTo suberr
        modStack.PushCallStack "ChangeRequestList", "SyncCategotyToChart"
        
        Application.EnableEvents = False
        UnprotectSheet Me
        c = 0
        
        'clear contents
        ChangeRequestList.Range("ChangeRequestList.CategoryCounts").ClearContents
        ChangeRequestList.Range("ChangeRequestList.CategoryNames").ClearContents

        For Each R In Admin.Range("Admin.CRCategories")
            If R.value <> "" Then
            c = c + 1
                ChangeRequestList.Range("ChangeRequestList.CategoryCountFormula").Copy
                ChangeRequestList.Range("ChangeRequestList.CategoryCounts").Cells(c, 1).PasteSpecial
                ChangeRequestList.Range("ChangeRequestList.CategoryNames").Cells(c, 1).value = R.value

            End If

            If c > 10 Then
                Debug.Print "WARNING MORE THAN 10 Categories"
                Exit For
            End If
        Next
        
        If c > 0 Then '--check added when there are no cat
            With ChangeRequestList.ChartObjects("ChangeRequestList.Chart.Category").Chart
                .FullSeriesCollection(1).Values = "=" & _
                            ChangeRequestList.Name & "!" & ChangeRequestList.Range("ChangeRequestList.CategoryCounts").Resize(c, 1).Address '"!$AD$7:$AD$11"
                .FullSeriesCollection(1).XValues = "=" & _
                            ChangeRequestList.Name & "!" & ChangeRequestList.Range("ChangeRequestList.CategoryNames").Resize(c, 1).Address '"$AE$7:$AE$11"
            End With
        End If
subend:
    '    modApp.EnsureUIProtection Me
        Application.EnableEvents = True
        modStack.PopCallStack
        Application.ScreenUpdating = True
        Exit Sub
suberr:
        AppErrMsg "ChangeRequestList.SyncCategotyToChart error:"
        Resume subend
End Sub



Private Sub Worksheet_Activate()
    On Error GoTo suberr
        modStack.PushCallStack "ChangeRequestList", "Worksheet_Activate"
        If (ModuleExists("CRF")) Then
            UnprotectSheet Me
            If Not ChangeRequestList.Range("ChangeRequestList.Block.Dashboard").EntireRow.Hidden Then
                RepositionCharts
                SetPieDataLabels "ChangeRequestList.Chart.Priority"
                SetPieDataLabels "ChangeRequestList.Chart.Status"
            End If
        End If
        
        'added to autofit cells
        AutoFitCells

subend:
        'EnsureUIProtection Me
        modStack.PopCallStack
        Exit Sub
suberr:
        AppErrMsg "ChangeRequestList.Worksheet_Activate error:"
        Resume subend
End Sub

'added to autofit cells
Public Sub AutoFitCells()
    Dim R As Range
    
     ''remove this line when autofit has been enabled and range "ChangeRequestList.LookupTable" has been added
    AddRangeNameForAutoFit
    
    'do not remove this code
    For Each R In ChangeRequestList.Range("ChangeRequestList.LookupTable")
            GetLookupTable.bAutoFit = True
            GetLookupTable.CellAutoFit R
    Next
    
    ChangeRequestList.Range("ChangeRequestList.LookupTable").Cells(2, 1).EntireRow.Hidden = True
    
End Sub

'added to autofit cells
Public Function GetLookupTable() As TPGTable
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "ChangeRequestList", "GetLookupTable"

    Set t = New TPGTable
    t.SetTable Me.Range("ChangeRequestList.LookupTable"), False, False, TemplateFirstrow, 1
    Set GetLookupTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ChangeRequestList.GetLookupTable error:"
    Resume subend
End Function


'run this code to add autofit on ChangeRequestList
'this code can be deleted once the range name has been added to the ChangeRequestList
Public Sub AddRangeNameForAutoFit()
Dim s As String
Dim R As Range
s = "ChangeRequestList.LookupTable"
    If Not RangeExists(s) Then
        Set R = ChangeRequestList.Range("ChangeRequestList.Table").Resize(, 4).offset(0, 30)
        ActiveWorkbook.Names.Add s, R
        R.EntireColumn.Hidden = True
        
        R.Cells(1, 1).EntireColumn.ColumnWidth = 28
        R.Cells(1, 2).EntireColumn.ColumnWidth = 18
        R.Cells(1, 3).EntireColumn.ColumnWidth = 18
        R.Cells(1, 4).EntireColumn.ColumnWidth = 18
        R.WrapText = True
    End If
    
End Sub

'run this code to add autofit on ChangeRequestList
'this code can be deleted once the range name has been added to the ChangeRequestList
Private Function RangeExists(s As String) As Boolean
    On Error GoTo Nope
    RangeExists = Range(s).Count > 0
Nope:
End Function


Private Sub RepositionCharts()
Dim chtobj As ChartObject
        Dim rTopCell As Range
        Dim ExcelIstMAnchmalEchtKomisch As Double



        Set chtobj = Me.ChartObjects("ChangeRequestList.Chart.Priority")
        With chtobj
            .Top = 126
            .Left = 885.5 - 42
            .Height = 166
            .Width = 187
        End With
        With chtobj.Chart.PlotArea
            ExcelIstMAnchmalEchtKomisch = .Top
            .Top = 24.6
            .Left = 48 - 42 '53.3
            .Height = 88.9922834645669
            .Width = 88.9922834645669
            .Top = 24.6
            .Left = 48 '53.3
        End With
        Set chtobj = Nothing
        
        Set chtobj = Me.ChartObjects("ChangeRequestList.Chart.Status")
        With chtobj
            .Top = 126
            .Left = 703 - 34
            .Height = 166
            .Width = 202
        End With
        With chtobj.Chart.PlotArea
            ExcelIstMAnchmalEchtKomisch = .Top
            .Top = 24.6
            .Left = 48.3 - 34
            .Height = 93.3271653543307
            .Width = 93.3271653543307
            .Top = 24.6
            .Left = 48.3
        End With
        Set chtobj = Nothing
        
        Set chtobj = Me.ChartObjects("ChangeRequestList.Chart.Category")
        With chtobj
            .Top = 126
            .Left = 190.5 - 35
            .Height = 174
            .Width = 518 '532
        End With
        With chtobj.Chart.PlotArea
            ExcelIstMAnchmalEchtKomisch = .Top
            .Top = 0
            .Left = 118 - 35
            .Height = 144
            .Width = 486
            .Top = 0
            .Left = 118
        End With
        Set chtobj = Nothing
    
End Sub

Private Sub SetPieDataLabels(chartName As String)
    Dim cht As Chart
    
    On Error GoTo suberr
    'modStack.PushCallStack "ChangeRequestList", "SetPieDataLabels"
    
    Set cht = ChangeRequestList.ChartObjects(chartName).Chart

        Dim ser As Series
        For Each ser In cht.SeriesCollection
            
            Dim vals As Variant
            vals = ser.Values

            'include this line if you want to reestablish labels before deleting
            ser.ApplyDataLabels xlDataLabelsShowLabel, , , , False, True, False, True, False
            ser.DataLabels.Position = xlLabelPositionOutsideEnd   'xlLabelPositionBestFit
            'loop through values and delete 0-value labels
            Dim i As Integer
            For i = LBound(vals) To UBound(vals)
                If vals(i) = 0 Then
                    With ser.Points(i)
                        If .HasDataLabel Then
                            .DataLabel.Delete
                        End If
                    End With
                End If
            Next i
        Next ser
subend:
    
    'modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ChangeRequestList.SetPieDataLabels error:"
    Resume subend
End Sub






Private Sub Worksheet_Deactivate()
    UnprotectSheet Me
End Sub


Attribute VB_Name = "Changes"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'added for SALK
Private actionInsertDelete As Boolean

Private Function GetTable() As TPGTable
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Changes", "GetTable"

    Set t = New TPGTable
    t.SetTable Me.Range("Changes.Table"), True, False, TemplateFirstrow, 5 ', , 16
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Changes.GetTable error:"
    Resume subend
End Function

Private Function GetCols() As Collection
    Dim cols As New Collection
    
    cols.Add GetTPGColumn("versionnr", 1)
    cols.Add GetTPGColumn("date", 2)
    cols.Add GetTPGColumn("changes", 3)
    cols.Add GetTPGColumn("responsible", 4)

    Set GetCols = cols
End Function

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Changes", "cmdInsert_Click"

    If IsDemoVersion Then GoTo subend
    
    actionInsertDelete = True
    
    GetTable.InsertRow_Clicked ActiveCell

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Changes.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Changes", "cmdDelete_Click"

    If IsDemoVersion Then GoTo subend
    
    actionInsertDelete = True
    
    GetTable.DeleteRow_Clicked ActiveCell

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Changes.cmdDelete_Click error:"
    Resume subend
End Sub

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "Changes", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    n.appendchild GetNodeFromTable(xmlDom, "changes", "row", GetTable.ValuesRange, GetCols)
        
    Set CreateXml = n

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Changes.CreateXml error:"
    Resume subend
End Function


Public Sub ImportXml(Node As Variant)
    On Error GoTo suberr
    modStack.PushCallStack "Changes", "ImportXml"

    If Not Node Is Nothing Then
        
        reset
        ImportTableValues GetTable, Node, "changes/row", GetCols
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Changes.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Changes", "reset"

    GetTable.clear

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Changes.reset error:"
    Resume subend
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    If (InRange(Target, GetTable.ValuesRange)) And (Target.Areas.Count = 1) Then
        modContextMenu.BuildTableContext False, False
    Else
        modContextMenu.RestoreDefaultMenu
    End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo suberr
    modStack.PushCallStack "Changes", "Worksheet_Change"
    
    'added to fix actions on delete
    If actionInsertDelete Then
        actionInsertDelete = False
        GoTo subend
    End If
    
    
    GetTable.bAutoFit = True
    GetTable.CellAutoFit Target
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Changes.Worksheet_Change error:"
    Resume subend
End Sub



Attribute VB_Name = "ClassProvider"
Option Explicit

Public Function New_TPGTask() As TPGTask
    On Error GoTo suberr
    modStack.PushCallStack "ClassProvider", "New_TPGTask"

    Set New_TPGTask = New TPGTask

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ClassProvider.New_TPGTask error:"
    Resume subend
End Function

Public Function GetTypeColor(lookup As Range, value As String) As Variant
    Dim hit As Range
    On Error GoTo suberr
    modStack.PushCallStack "ClassProvider", "GetTypeColor"

    Set hit = lookup.Find(value)
    If Not hit Is Nothing Then
        GetTypeColor = hit.Interior.Color
    Else
        GetTypeColor = RGB(255, 255, 255)
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ClassProvider.GetTypeColor error:"
    Resume subend
End Function

Function GetTPGColumn(Name As String, index As Integer, Optional ColumnType As TPGColumnType = TextColumn, Optional TagType As phbLocalizationItem = phbLocalizationItemAny) As TPGColumn
    Dim c As TPGColumn
    On Error GoTo suberr
    modStack.PushCallStack "ClassProvider", "GetTPGColumn"

    Set c = New TPGColumn
    c.ColumnName = Name
    c.columnIndex = index
    c.ColumnType = ColumnType
    c.TagType = TagType
    Set GetTPGColumn = c

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ClassProvider.GetTPGColumn error:"
    Resume subend
End Function

Public Function GetTPGValueColor(value As String, Color As Long) As TPGValueColor
    Dim vc As TPGValueColor
    On Error GoTo suberr
    modStack.PushCallStack "ClassProvider", "GetTPGValueColor"

    Set vc = New TPGValueColor
    vc.value = value
    vc.Color = Color
    Set GetTPGValueColor = vc

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ClassProvider.GetTPGValueColor error:"
    Resume subend
End Function

Public Function GetTPGMergeRange(StartCol As Integer, EndCol As Integer) As TPGMergeRange
    Dim mr As New TPGMergeRange
    On Error GoTo suberr
    modStack.PushCallStack "ClassProvider", "GetTPGMergeRange"

    mr.StartCol = StartCol
    mr.EndCol = EndCol
    Set GetTPGMergeRange = mr

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "ClassProvider.GetTPGMergeRange error:"
    Resume subend
End Function
Attribute VB_Name = "Closure"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public noupdate As Boolean


Private Sub Worksheet_Activate()
    'added for SALK
    ChartObjects("Closure.Chrt.Resources").visible = False
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (Target.Areas.Count = 1) Then
    If (InRange(Target, Me.Range("Closure.RemActions"))) Or (InRange(Target, Me.Range("Closure.Impression"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("Closure.Objectives"))) Or (InRange(Target, Me.Range("Closure.Performance"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("Closure.ResCost"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("Closure.Management"))) Or (InRange(Target, Me.Range("Closure.Experience"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("Closure.Context"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("Closure.Table.Resources"))) Then
        modContextMenu.BuildTableContext False, False
    Else
        modContextMenu.RestoreDefaultMenu
    End If
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "Worksheet_Change"
    If Not noupdate Then
        'added for SALK
        If GetResourcesTable.Mergedfit(Target) Then GoTo subend
        
        If GetImpressionTable.Mergedfit(Target) Then GoTo subend
        If GetObjectivesTable.Mergedfit(Target) Then GoTo subend
        If GetPerformanceTable.Mergedfit(Target) Then GoTo subend
        If GetResCostTable.Mergedfit(Target) Then GoTo subend
        If GetManagementTable.Mergedfit(Target) Then GoTo subend
        If GetExperienceTable.Mergedfit(Target) Then GoTo subend
        If GetRemActionsTable.Mergedfit(Target) Then GoTo subend
        If GetContextTable.Mergedfit(Target) Then GoTo subend
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Closure.Worksheet_Change error:"
    Resume subend
End Sub

Public Sub cmdUpdate_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "cmdUpdate_Click"
    
    If IsDemoVersion Then GoTo subend
    
    Dim contractTable As TPGTable
    Dim closureTable As TPGTable
    Dim i As Integer
    
    
    Closure.noupdate = True
    If appQOCMsg(appGetLOCText("msgObjectivesReset")) = vbOK Then
        'Objectives
        Set contractTable = Contract.GetObjectivesTable
        Set closureTable = GetObjectivesTable
        
        closureTable.clear
        Range("Closure.ObjectivesRatingTotal").value = "..."
        
        For i = 1 To contractTable.RowsCount
            If i > closureTable.RowsCount Then
                closureTable.AddRow
            End If
            
            closureTable.ValuesRange.Cells(i, 1).value = contractTable.ValuesRange.Cells(i, 2).value
            CellFunctions.AutoFitMergedCell closureTable.ValuesRange.Cells(i, 1), 16
            closureTable.ValuesRange.Cells(i, 8).value = "..."
        Next
        UpdateStatus
    End If
subend:
    Closure.noupdate = False
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Closure.cmdUpdate_Click error:"
    Resume subend
End Sub

'added for SALK
Public Function GetResourcesTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "GetResourcesTable"

    t.SetTable Me.Range("Closure.Table.Resources"), True, False, TemplateFirstrow, 1
    Set GetResourcesTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Closure.GetResourcesTable error:"
    Resume subend
End Function

Private Sub UpdateStatus()
    Dim i As Integer
    'Schedule
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "UpdateStatus"

    
    Statusreport.cmdUpdate_Click
    
    Closure.noupdate = True
    Range("Closure.Start").value = Statusreport.Range("Status.Start").value
    Range("Closure.Finish").value = Statusreport.Range("Status.Finish").value
    Range("Closure.BaseStart").value = Statusreport.Range("Status.BaseStart").value
    Range("Closure.BaseFinish").value = Statusreport.Range("Status.BaseFinish").value
        
    Range("Closure.ScheduleForecastOffset").value = Statusreport.Range("Status.ScheduleForecastOffset").value
    Range("Closure.ScheduleForecastBar").value = Statusreport.Range("Status.ScheduleForecastBar").value
    Range("Closure.ScheduleBaseOffset").value = Statusreport.Range("Status.ScheduleBaseOffset").value
    Range("Closure.ScheduleBaseBar").value = Statusreport.Range("Status.ScheduleBaseBar").value
    
    
    'added for SALK - enable this
    CopyStatusResourceToClosure

    Me.Activate
    
    'modified for SALK
    For i = 0 To 3
        Closure.Range("Closure.BaseCost").offset(0, i).value = Statusreport.Range("Status.BaseCost").offset(0, i).value
    Next
      
    
    'Resources, Cost and Profit
'    Range("Closure.BaseWork").value = Statusreport.Range("Status.BaseWork").value
'    Range("Closure.ActualWork").value = Statusreport.Range("Status.BaseWork").offset(0, 2).value
'    Range("Closure.BaseCost").value = Statusreport.Range("Status.BaseCost").value
'    Range("Closure.ActualCost").value = Statusreport.Range("Status.BaseCost").offset(0, 2).value
    Closure.noupdate = False
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Closure.UpdateStatus error:"
    Resume subend
End Sub

'Added for SALK
Private Sub CopyStatusResourceToClosure()
    Dim rRow As Range, c As Range
    Dim rRowTarget As Range
    Dim i As Integer, j As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "CopyStatusResourceToClosure"
    
    GetResourcesTable.clear
    
    With Statusreport.GetResourcesTable
        For Each rRow In .ValuesRange.rows
            Set rRowTarget = GetResourcesTable.GetFreeRange
            For i = 1 To WorksheetFunction.Min(.ColumnsCount, GetResourcesTable.ColumnsCount)
                If i > 1 Then
                    j = i + 1
                Else
                    j = i
                End If
            
                If Not rRowTarget.Cells(j).hasFormula Then rRowTarget.Cells(j).value = rRow.Cells(i).value
            Next
        Next
    End With
    
    If Closure.GetResourcesTable.RowsCount > 1 Then
        If Closure.Cells(GetResourcesTable.firstrow, 4) = "" And _
          Closure.Cells(GetResourcesTable.firstrow, 7) = "" And _
          Closure.Cells(GetResourcesTable.firstrow, 8) = "" And _
          Closure.Cells(GetResourcesTable.firstrow, 9) = "" Then
          
          Closure.Cells(GetResourcesTable.firstrow, 1).EntireRow.Delete
        End If
    End If
    
    For Each c In GetResourcesTable.ValuesRange(1)
        GetResourcesTable.Mergedfit c
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Closure.CopyStatusResourceToClosure error:"
    Resume subend
End Sub

Private Function GetImpressionTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "GetImpressionTable"

    t.SetTable Me.Range("Closure.Impression"), True, False, TemplateFirstrow, 4, , 16
    Set GetImpressionTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Closure.GetImpressionTable error:"
    Resume subend
End Function

Private Function GetObjectivesTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "GetObjectivesTable"

    t.SetTable Me.Range("Closure.Objectives"), True, False, TemplateBeforeHeader, 4, , 16
    Set GetObjectivesTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Closure.GetObjectivesTable error:"
    Resume subend
End Function

Private Function GetPerformanceTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "GetPerformanceTable"

    t.SetTable Me.Range("Closure.Performance"), True, False, TemplateFirstrow, 4, , 16
    Set GetPerformanceTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Closure.GetPerformanceTable error:"
    Resume subend
End Function

Private Function GetResCostTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "GetResCostTable"

    t.SetTable Me.Range("Closure.ResCost"), True, False, TemplateFirstrow, 4, , 16
    Set GetResCostTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Closure.GetResCostTable error:"
    Resume subend
End Function

Private Function GetManagementTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "GetManagementTable"

    t.SetTable Me.Range("Closure.Management"), True, False, TemplateFirstrow, 4, , 16
    Set GetManagementTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Closure.GetManagementTable error:"
    Resume subend
End Function

Private Function GetContextTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "GetContextTable"

    t.SetTable Me.Range("Closure.Context"), True, False, TemplateFirstrow, DefaultRowHeight:=16
    Set GetContextTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Closure.GetContextTable error:"
    Resume subend
End Function

Private Function GetExperienceTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "GetExperienceTable"

    t.SetTable Me.Range("Closure.Experience"), True, False, TemplateFirstrow, 4, , 16
    Set GetExperienceTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Closure.GetExperienceTable error:"
    Resume subend
End Function

Private Function GetRemActionsTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "GetRemActionsTable"

    t.SetTable Me.Range("Closure.RemActions"), True, False, TemplateFirstrow, 4, , 16
    Set GetRemActionsTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Closure.GetRemActionsTable error:"
    Resume subend
End Function

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "cmdInsert_Click"

    If IsDemoVersion Then GoTo subend
    
    
    
    Closure.noupdate = True
    InsertHandling
    Closure.noupdate = False
    
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Closure.cmdInsert_Click error:"
    Resume subend
End Sub

Private Sub InsertHandling()
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "InsertHandling"

    If GetImpressionTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetObjectivesTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetPerformanceTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetResCostTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetManagementTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetExperienceTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetRemActionsTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetContextTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    
    'added for SALK
    If GetResourcesTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Closure.InsertHandling error:"
    Resume subend

End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "cmdDelete_Click"

    If IsDemoVersion Then GoTo subend
    
    

    Closure.noupdate = True
    DeleteHandling
    Closure.noupdate = False
    
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Closure.cmdDelete_Click error:"
    Resume subend
    
End Sub

Private Sub DeleteHandling()
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "DeleteHandling"

    If GetImpressionTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetObjectivesTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetPerformanceTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetResCostTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetManagementTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetExperienceTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetRemActionsTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetContextTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    
    'added for SALK
    If GetResourcesTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Closure.DeleteHandling error:"
    Resume subend
End Sub

Private Function GetRemActionsCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "GetRemActionsCols"

    cols.Add GetTPGColumn("action", 1)
    cols.Add GetTPGColumn("responsible", 7)
    cols.Add GetTPGColumn("duedate", 8, DateColumn)
    
    Set GetRemActionsCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Closure.GetRemActionsCols error:"
    Resume subend
End Function

Private Function GetObjectivesCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "GetObjectivesCols"

    cols.Add GetTPGColumn("description", 1)
    cols.Add GetTPGColumn("rating", 8)
    
    Set GetObjectivesCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Closure.GetObjectivesCols error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
            
    
    Dim nImpression
    Set nImpression = xmlDom.createNode(1, "impression", "")
    AddNode xmlDom, nImpression, "rating", getRange(Me, "Closure.Overall.H3", 1, 1, 0, 8).value
    nImpression.appendchild GetNodeFromTable(xmlDom, "rows", "row", GetImpressionTable.ValuesRange)
    n.appendchild nImpression
    
    Dim nObjectives
    Set nObjectives = xmlDom.createNode(1, "objectives", "")
    AddNode xmlDom, nObjectives, "rating", Range("Closure.ObjectivesRatingTotal").value
    nObjectives.appendchild GetNodeFromTable(xmlDom, "rows", "row", GetObjectivesTable.ValuesRange, GetObjectivesCols)
    n.appendchild nObjectives
    
    Dim nPerformance
    Set nPerformance = xmlDom.createNode(1, "performance", "")
    AddNode xmlDom, nPerformance, "rating", getRange(Me, "Closure.Schedule.H3", 1, 1, 0, 8).value
    
    AddNode xmlDom, nPerformance, "start", Range("Closure.Start").value
    AddNode xmlDom, nPerformance, "basestart", Range("Closure.BaseStart").value
    AddNode xmlDom, nPerformance, "finish", Range("Closure.Finish").value
    AddNode xmlDom, nPerformance, "basefinish", Range("Closure.BaseFinish").value
    
    AddNode xmlDom, nPerformance, "scheduleforecastoffset", Range("Closure.ScheduleForecastOffset").value
    AddNode xmlDom, nPerformance, "schedulebaseoffset", Range("Closure.ScheduleBaseOffset").value
    AddNode xmlDom, nPerformance, "scheduleforecastbar", Range("Closure.ScheduleForecastBar").value
    AddNode xmlDom, nPerformance, "schedulebasebar", Range("Closure.ScheduleBaseBar").value
    
    nPerformance.appendchild GetNodeFromTable(xmlDom, "rows", "row", GetPerformanceTable.ValuesRange)
    n.appendchild nPerformance

    Dim nResCost
    Set nResCost = xmlDom.createNode(1, "rescost", "")
    AddNode xmlDom, nResCost, "rating", getRange(Me, "Closure.CostRes.H3", 1, 1, 0, 8).value
    
    'modified for SALK
'    AddNode xmlDom, nResCost, "basecost", Range("Closure.BaseCost").value
'    AddNode xmlDom, nResCost, "actualcost", Range("Closure.ActualCost").value
'    AddNode xmlDom, nResCost, "basework", Range("Closure.BaseWork").value
'    AddNode xmlDom, nResCost, "actualwork", Range("Closure.ActualWork").value
''    AddNode xmlDom, nResCost, "baseprofit", Range("Closure.BaseProfit").Value
''    AddNode xmlDom, nResCost, "actualprofit", Range("Closure.ActualProfit").Value

    AddNode xmlDom, nResCost, "alottedcost", Range("Closure.BaseCost").value
    AddNode xmlDom, nResCost, "forecastcost", Range("Closure.BaseCost").offset(0, 1).value
    AddNode xmlDom, nResCost, "basecost", Range("Closure.BaseCost").offset(0, 2).value
    
    nResCost.appendchild GetNodeFromTable(xmlDom, "rows", "row", GetResCostTable.ValuesRange)
    n.appendchild nResCost
    
    AddNode xmlDom, n, "work", GetResourcesTable.Serialize(Array(1, 4, 5, 6, 7, 8))

    Dim nContext
    Set nContext = xmlDom.createNode(1, "context", "")
    AddNode xmlDom, nContext, "rating", getRange(Me, "Closure.Context.H3", 1, 1, 0, 8).value
    nContext.appendchild GetNodeFromTable(xmlDom, "rows", "row", GetContextTable.ValuesRange)
    n.appendchild nContext
    
    Dim nManagement
    Set nManagement = xmlDom.createNode(1, "management", "")
    AddNode xmlDom, nManagement, "rating", getRange(Me, "Closure.Management.H3", 1, 1, 0, 8).value
    nManagement.appendchild GetNodeFromTable(xmlDom, "rows", "row", GetManagementTable.ValuesRange)
    n.appendchild nManagement
        
    n.appendchild GetNodeFromTable(xmlDom, "lessonslearned", "row", GetExperienceTable.ValuesRange)
    n.appendchild GetNodeFromTable(xmlDom, "remactions", "row", GetRemActionsTable.ValuesRange, GetRemActionsCols)
    
    Set CreateXml = n

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Closure.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, sversion As String)
   
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "ImportXml"

    If Not Node Is Nothing Then
        reset
        Me.noupdate = True
        
        getRange(Me, "Closure.Overall.H3", 1, 1, 0, 8).value = Node.SelectSingleNode("impression/rating").Text
        ImportTableValues GetImpressionTable, Node, "impression/rows/row"
        
        If VBA.Left(sversion, 3) = "1.0" Then
            ImportTableValues GetObjectivesTable, Node, "objectives/objective", GetObjectivesCols
        Else
            Range("Closure.ObjectivesRatingTotal").value = Node.SelectSingleNode("objectives/rating").Text
            ImportTableValues GetObjectivesTable, Node, "objectives/rows/row", GetObjectivesCols
        End If
                
        getRange(Me, "Closure.Schedule.H3", 1, 1, 0, 8).value = Node.SelectSingleNode("performance/rating").Text
        
        SetXMLValue Range("Closure.Start"), Node.SelectSingleNode("performance/start").Text
        SetXMLValue Range("Closure.BaseStart"), Node.SelectSingleNode("performance/basestart").Text
        SetXMLValue Range("Closure.Finish"), Node.SelectSingleNode("performance/finish").Text
        SetXMLValue Range("Closure.BaseFinish"), Node.SelectSingleNode("performance/basefinish").Text
        
        SetXMLValue Range("Closure.ScheduleForecastOffset"), Node.SelectSingleNode("performance/scheduleforecastoffset").Text
        SetXMLValue Range("Closure.ScheduleBaseOffset"), Node.SelectSingleNode("performance/schedulebaseoffset").Text
        SetXMLValue Range("Closure.ScheduleForecastBar"), Node.SelectSingleNode("performance/scheduleforecastbar").Text
        SetXMLValue Range("Closure.ScheduleBaseBar"), Node.SelectSingleNode("performance/schedulebasebar").Text
    
        ImportTableValues GetPerformanceTable, Node, "performance/rows/row"
        
        getRange(Me, "Closure.CostRes.H3", 1, 1, 0, 8).value = Node.SelectSingleNode("rescost/rating").Text
        
        'modified for SALK
        SetXMLValue Range("Closure.BaseCost"), Node.SelectSingleNode("rescost/alottedcost").Text
        SetXMLValue Range("Closure.BaseCost").offset(0, 1), Node.SelectSingleNode("rescost/forecastcost").Text
        SetXMLValue Range("Closure.BaseCost").offset(0, 2), Node.SelectSingleNode("rescost/basecost").Text
        
'        SetXMLValue Range("Closure.BaseWork"), Node.SelectSingleNode("rescost/basework").Text
'        SetXMLValue Range("Closure.ActualWork"), Node.SelectSingleNode("rescost/actualwork").Text
'        SetXMLValue Range("Closure.BaseCost"), Node.SelectSingleNode("rescost/basecost").Text
'        SetXMLValue Range("Closure.ActualCost"), Node.SelectSingleNode("rescost/actualcost").Text
        
'        If Not Node.SelectSingleNode("rescost/baseprofit") Is Nothing Then
'            SetNumericValue Range("Closure.BaseProfit"), Node.SelectSingleNode("rescost/baseprofit").Text
'        End If
'        If Not Node.SelectSingleNode("rescost/actualprofit") Is Nothing Then
'            SetNumericValue Range("Closure.ActualProfit"), Node.SelectSingleNode("rescost/actualprofit").Text
'        End If
    
        ImportTableValues GetResCostTable, Node, "rescost/rows/row"
        
        'added for SALK
        Dim c As Range
        GetResourcesTable.DeSerializeSkipLocked Array(1, 4, 5, 6, 7, 8), Node.SelectSingleNode("work").Text
        For Each c In GetResourcesTable.ValuesRange(2)
            GetResourcesTable.Mergedfit c
        Next
        
        If Not Node.SelectSingleNode("context/rating") Is Nothing Then 'erst ab Version 1.1
            getRange(Me, "Closure.Context.H3", 1, 1, 0, 8).value = Node.SelectSingleNode("context/rating").Text
            ImportTableValues GetContextTable, Node, "context/rows/row"
        End If
        
        getRange(Me, "Closure.Management.H3", 1, 1, 0, 8).value = Node.SelectSingleNode("management/rating").Text
        ImportTableValues GetManagementTable, Node, "management/rows/row"
        
        ImportTableValues GetExperienceTable, Node, "lessonslearned/row"
        ImportTableValues GetRemActionsTable, Node, "remactions/row", GetRemActionsCols
        
        Me.noupdate = False
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Closure.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Closure", "reset"

    Me.noupdate = True
    
    GetImpressionTable.clear
    getRange(Me, "Closure.Overall.H3", 1, 1, 0, 8).value = "..."
    
    GetObjectivesTable.clear
    Range("Closure.ObjectivesRatingTotal").value = "..."
    
    GetPerformanceTable.clear
    getRange(Me, "Closure.Schedule.H3", 1, 1, 0, 8).value = "..."
    
    'modified for SALK
    GetResCostTable.clear
    GetResourcesTable.clear
    getRange(Me, "Closure.CostRes.H3", 1, 1, 0, 8).value = "..."
    
    GetContextTable.clear
    getRange(Me, "Closure.Context.H3", 1, 1, 0, 8).value = "..."
    
    GetManagementTable.clear
    getRange(Me, "Closure.Management.H3", 1, 1, 0, 8).value = "..."
    
    GetExperienceTable.clear
    GetRemActionsTable.clear
        
    Range("Closure.Start").ClearContents
    Range("Closure.Finish").ClearContents
    Range("Closure.BaseStart").ClearContents
    Range("Closure.BaseFinish").ClearContents
        
    Range("Closure.ScheduleForecastOffset").ClearContents
    Range("Closure.ScheduleForecastBar").ClearContents
    Range("Closure.ScheduleBaseOffset").ClearContents
    Range("Closure.ScheduleBaseBar").ClearContents
        
    Range("Closure.BaseWork").ClearContents
    Range("Closure.ActualWork").ClearContents
    Range("Closure.BaseCost").ClearContents
    Range("Closure.ActualCost").ClearContents
'    Range("Closure.BaseProfit").ClearContents
'    Range("Closure.ActualProfit").ClearContents
    
    Me.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Closure.reset error:"
    Resume subend
End Sub

'Private Sub Worksheet_Deactivate()
'
'    Dim chtObj As ChartObject
'    Dim SearchRange As Range
'    Dim rCell As Range
'    Dim r As Range
'    Dim Counter As Integer
'
'    On Error GoTo subErr
'
'    modApp.UnprotectAndPerformSheet Me
'    modApp.UnprotectAndPerformSheet Config
'    Set SearchRange = getRange(Config, "Config.ChartDefinitions", 0, 1, 0, 0)
'
'    'generate range object with all the charts' names in it
'    With SearchRange
'        Set rCell = .Cells(1, 1)
'        For Counter = 1 To WorksheetFunction.CountIf(.Cells, Me.CodeName)
'            Set rCell = .Find(What:=Me.CodeName, After:=rCell, LookIn:=xlValues, _
'                              LookAt:=xlWhole, SearchOrder:=xlByRows, _
'                              SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
'            If Not rCell Is Nothing Then
'                If r Is Nothing Then
'                    Set r = rCell.Offset(0, 1)
'                Else
'                    Set r = Union(r, rCell.Offset(0, 1)) 'MsgBox rCell.value & " / " & rCell.Offset(0, 1).value
'                End If
'            End If
'        Next Counter
'    End With
'
'    'save chart positions to config
'    For Each chtObj In Me.ChartObjects
'        With r
'            Set rCell = .Find(chtObj.name, LookIn:=xlValues)
'            If Not rCell Is Nothing Then
'                With rCell  'chtObj.Chart.ChartArea
'                    .Offset(0, 1) = chtObj.Chart.ChartArea.Top
'                    .Offset(0, 2) = chtObj.Chart.ChartArea.Left
'                    .Offset(0, 3) = chtObj.Chart.ChartArea.Height
'                    .Offset(0, 4) = chtObj.Chart.ChartArea.Width
'                    .Offset(0, 5) = chtObj.Chart.PlotArea.Top
'                    .Offset(0, 6) = chtObj.Chart.PlotArea.Left
'                    .Offset(0, 7) = chtObj.Chart.PlotArea.Height
'                    .Offset(0, 8) = chtObj.Chart.PlotArea.Width
'                End With
'            End If
'        End With
'    Next
'
'SubEnd:
'    Exit Sub
'subErr:
'    AppErrMsg "SetCharts error:"
'    modApp.ProtectAndMakeReadySheet Config
'    modApp.ProtectAndMakeReadySheet Me
'    EnableScreenUpdating
'    Resume SubEnd
'End Sub
Attribute VB_Name = "Com"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Private Function GetTable() As TPGTable
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Com", "GetTable"

    Set t = New TPGTable
    t.SetTable Me.Range("Com.Table"), True, False, TemplateFirstrow, 5 ', , 16
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Com.GetTable error:"
    Resume subend
End Function

Private Function GetCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Com", "GetCols"

    cols.Add GetTPGColumn("meetingname", 1)
    cols.Add GetTPGColumn("content", 2)
    cols.Add GetTPGColumn("participants", 3)
    cols.Add GetTPGColumn("dates", 4)
    cols.Add GetTPGColumn("location", 5)

    Set GetCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Com.GetCols error:"
    Resume subend
End Function

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Com", "cmdInsert_Click"

    If IsDemoVersion Then GoTo subend
    
    GetTable.InsertRow_Clicked ActiveCell

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Com.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Com", "cmdDelete_Click"

    If IsDemoVersion Then GoTo subend
    
    GetTable.DeleteRow_Clicked ActiveCell

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Com.cmdDelete_Click error:"
    Resume subend
End Sub

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "Com", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    n.appendchild GetNodeFromTable(xmlDom, "rows", "row", GetTable.ValuesRange, GetCols)
        
    Set CreateXml = n

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Com.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant)
    On Error GoTo suberr
    modStack.PushCallStack "Com", "ImportXml"

    If Not Node Is Nothing Then
        
        reset
        ImportTableValues GetTable, Node, "rows/row", GetCols
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Com.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Com", "reset"

    GetTable.clear

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Com.reset error:"
    Resume subend
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (InRange(Target, GetTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext False, False
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
GetTable.bAutoFit = True
GetTable.CellAutoFit Target
End Sub

Attribute VB_Name = "Config"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub cmdEventLog_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Config", "cmdEventLog_Click"
    If ButtonsLocked Then GoTo subend

    frmEventLog.Show

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.cmdEventLog_Click error:"
    Resume subend
End Sub

Private Sub ConvertToDouble()

    On Error GoTo suberr
    modStack.PushCallStack "Config", "ConvertToDouble"

    Dim R As Range
    For Each R In selection
        R.value = CDbl2(R.value)
    Next
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.ConvertToDouble error:"
    Resume subend
End Sub
'Public Sub cmdFormatv3_Click()
'    Dim n As Name
'    Dim sht As Worksheet
'    Dim c As Range
'    Dim ssheet As String
'
'    On Error GoTo suberr
'    modStack.PushCallStack "Config", "cmdFormat_Click"
'
'    modConst.bNoNormalProtectActionsRequired = True
'
'    For Each n In ActiveWorkbook.Names
'        If VBA.Right(n.Name, 3) = ".H0" And VBA.Left(n.Name, 6) <> "Config" Then
'            'Call appCopyFont(Range("Config.H1"), n.RefersToRange)
'            Call appCopyInterior(Range("Config.H1"), n.RefersToRange)
'            Call appCopyAlignment(Range("Config.H1"), n.RefersToRange)
'            Call appCopyFont(Range("Config.H1"), n.RefersToRange.Resize(1))
'        End If
'    Next
'    For Each n In ActiveWorkbook.Names
'        If VBA.Right(n.Name, 3) = ".H2" And VBA.Left(n.Name, 6) <> "Config" Then
'            Call appCopyFont(Range("Config.H2"), n.RefersToRange)
'            'Call appCopyInterior(Range("Config.H1"), n.RefersToRange)
'            Call appCopyAlignment(Range("Config.H2"), n.RefersToRange)
'        End If
'    Next
'    For Each n In ActiveWorkbook.Names
'        If VBA.Right(n.Name, 3) = ".H3" And VBA.Left(n.Name, 6) <> "Config" Then
'            ssheet = LCase(Left(n.Name, Len(n.Name) - 3))
'            'exception for closure sheet (there we have multiple .H3 ranges...)
'            If Len(ssheet) > 7 Then
'                If (Left(ssheet, 7) = "closure") Then
'                    ssheet = "closure"
'                End If
'            End If
'            'exception for gantt (there we need to color entire row, except first cells in col)
'            If ssheet = "gantt" Then
'                Gantt.Range("Gantt.H3").EntireRow.Interior.Color = Config.Range("Config.H3").Interior.Color
'                With Gantt.Range("Gantt.H3").EntireRow.Font
'                    .Name = Config.Range("Config.H3").Font.Name
'                    .Bold = Config.Range("Config.H3").Font.Bold
'                    .Color = Config.Range("Config.H3").Font.Color
'                    .Background = Config.Range("Config.H3").Font.Background
'                    .FontStyle = Config.Range("Config.H3").Font.FontStyle
'                    .Italic = Config.Range("Config.H3").Font.Italic
'                    .Size = Config.Range("Config.H3").Font.Size
'                End With
'                Gantt.Range("Gantt.H3").Resize(3, 1).Interior.Color = RGB(242, 242, 242)
'                Gantt.Range("Gantt.H3").Resize(3, 1).offset(0, 1).Interior.Color = RGB(255, 255, 255)
'                Gantt.Range("Gantt.StartDate").Interior.Color = RGB(255, 255, 255)
'                Gantt.Range("Gantt.StartDate").Font.Color = RGB(0, 0, 0)
'                Gantt.Range("Gantt.StartDate").Font.Bold = False
'                Gantt.Range("Gantt.StartDate").Font.Size = 9
'                Gantt.Range("Gantt.StartDate").Font.Name = "Segoe UI"
'                Gantt.Range("Gantt.FinishDate").Interior.Color = RGB(255, 255, 255)
'                Gantt.Range("Gantt.FinishDate").Font.Color = RGB(0, 0, 0)
'                Gantt.Range("Gantt.FinishDate").Font.Bold = False
'                Gantt.Range("Gantt.FinishDate").Font.Size = 9
'                Gantt.Range("Gantt.FinishDate").Font.Name = "Segoe UI"
'            Else
'                For Each sht In ThisWorkbook.Sheets
'                    If LCase(sht.CodeName) = ssheet Then
'                        For Each c In sht.Range(n.Name)
'                            c.Interior.Color = Config.Range("Config.H3").Interior.Color
'                            With c.Font
'                                .Name = Config.Range("Config.H3").Font.Name
'                                .Bold = Config.Range("Config.H3").Font.Bold
'                                .Color = Config.Range("Config.H3").Font.Color
'                                .Background = Config.Range("Config.H3").Font.Background
'                                .FontStyle = Config.Range("Config.H3").Font.FontStyle
'                                .Italic = Config.Range("Config.H3").Font.Italic
'                                .Size = Config.Range("Config.H3").Font.Size
'                            End With
'                        Next
'
'                        'exception for WP: adjust color of cell bounderies
'                        If ssheet = "wp" Then
'                            With WP.Range("WP.HCustom")
'                                .Borders(xlDiagonalDown).LineStyle = xlNone
'                                .Borders(xlDiagonalUp).LineStyle = xlNone
'                                .Borders(xlEdgeLeft).LineStyle = xlNone
'                                With .Borders(xlEdgeTop)
'                                    .LineStyle = xlContinuous
'                                    .Color = Config.Range("Config.H3").Interior.Color
'                                    .TintAndShade = 0
'                                    .Weight = xlMedium
'                                End With
'                                With .Borders(xlEdgeBottom)
'                                    .LineStyle = xlContinuous
'                                    .Color = Config.Range("Config.H3").Interior.Color
'                                    .TintAndShade = 0
'                                    .Weight = xlMedium
'                                End With
'                                .Borders(xlEdgeRight).LineStyle = xlNone
'                                .Borders(xlInsideVertical).LineStyle = xlNone
'                                .Borders(xlInsideHorizontal).LineStyle = xlNone
'                            End With
'                        ElseIf ssheet = "statusreport" Then
'                            Statusreport.Range("Status.StatusRisk").Font.Color = Statusreport.Range("Status.StatusRisk").Interior.Color
'                            Statusreport.Range("Status.StatusProjectContext").Font.Color = Statusreport.Range("Status.StatusProjectContext").Interior.Color
'                        End If
'                    End If
'                Next
'            End If
'        End If
'    Next
'
'    FormatEnums Contract, 10
'    FormatEnums Closure
'    FormatEnums Meeting
'    FormatEnums Statusreport
'    FormatEnums Context, 10
'    FormatEnums WP
'
'    RACI.UpdateRACI False
'    CostPlan.UpdateCostPlan False
'    WorkPlan.UpdateRessPlan False
'
'    Me.Select
'subend:
'modConst.bNoNormalProtectActionsRequired = False
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "Contents.cmdFormat3_Click error:"
'    Resume subend
'End Sub
'
'
'
'Public Sub cmdFormat_Click()
'    Dim n As Name
'    Dim sht As Worksheet
'
'    On Error GoTo suberr
'    modStack.PushCallStack "Config", "cmdFormat_Click"
'    If ButtonsLocked Then GoTo subend
'
'modConst.bNoNormalProtectActionsRequired = True
'
'    'Set Pagesetup like on cover
'    For Each sht In ThisWorkbook.Sheets
'        If sht.PageSetup.Orientation = xlPortrait Then
'            If Not sht.CodeName = Cover.CodeName Then
'                sht.PageSetup.LeftHeader = Cover.PageSetup.LeftHeader
'                sht.PageSetup.CenterHeader = Cover.PageSetup.CenterHeader
'                sht.PageSetup.RightHeader = Cover.PageSetup.RightHeader
'
'                sht.PageSetup.LeftFooter = Cover.PageSetup.LeftFooter
'                sht.PageSetup.CenterFooter = Cover.PageSetup.CenterFooter
'                sht.PageSetup.RightFooter = Cover.PageSetup.RightFooter
'
'                sht.PageSetup.TopMargin = Cover.PageSetup.TopMargin
'                sht.PageSetup.BottomMargin = Cover.PageSetup.BottomMargin
'                sht.PageSetup.LeftMargin = Cover.PageSetup.LeftMargin
'                sht.PageSetup.RightMargin = Cover.PageSetup.RightMargin
'                sht.PageSetup.HeaderMargin = Cover.PageSetup.HeaderMargin
'                sht.PageSetup.FooterMargin = Cover.PageSetup.FooterMargin
'            End If
'        Else
'            If Not sht.CodeName = Team.CodeName Then
'                sht.PageSetup.LeftHeader = Team.PageSetup.LeftHeader
'                sht.PageSetup.CenterHeader = Team.PageSetup.CenterHeader
'                sht.PageSetup.RightHeader = Team.PageSetup.RightHeader
'
'                sht.PageSetup.LeftFooter = Team.PageSetup.LeftFooter
'                sht.PageSetup.CenterFooter = Team.PageSetup.CenterFooter
'                sht.PageSetup.RightFooter = Team.PageSetup.RightFooter
'
'                sht.PageSetup.TopMargin = Team.PageSetup.TopMargin
'                sht.PageSetup.BottomMargin = Team.PageSetup.BottomMargin
'                sht.PageSetup.LeftMargin = Team.PageSetup.LeftMargin
'                sht.PageSetup.RightMargin = Team.PageSetup.RightMargin
'                sht.PageSetup.HeaderMargin = Team.PageSetup.HeaderMargin
'                sht.PageSetup.FooterMargin = Team.PageSetup.FooterMargin
'            End If
'        End If
'        'sht.Activate
'    Next
'
''doesnt work on merged cells :-(
''
''    For Each n In ActiveWorkbook.Names
''        If VBA.Right(n.Name, 3) = ".H1" And VBA.Left(n.Name, 6) <> "Config" Then
''             n.RefersToRange.Style = Range("Config.H1").Style
''        End If
''    Next
''
''    For Each n In ActiveWorkbook.Names
''        If VBA.Right(n.Name, 3) = ".H2" And VBA.Left(n.Name, 6) <> "Config" Then
''             For Each r In n.RefersToRange.Cells
''                r.Style = Range("Config.H2").Style
''            Next
''        End If
''    Next
''
''    For Each n In ActiveWorkbook.Names
''        If VBA.Right(n.Name, 3) = ".H3" And VBA.Left(n.Name, 6) <> "Config" Then
''             n.RefersToRange.Style = Range("Config.H3").Style
''        End If
''    Next
''
''    For Each n In ActiveWorkbook.Names
''        If VBA.Right(n.Name, 3) = ".H4" And VBA.Left(n.Name, 6) <> "Config" Then
''             n.RefersToRange.Style = Range("Config.H4").Style
''        End If
''    Next
'
'    For Each n In ActiveWorkbook.Names
'        If VBA.Right(n.Name, 3) = ".H1" And VBA.Left(n.Name, 6) <> "Config" Then
'            Call appCopyFont(Range("Config.H1"), n.RefersToRange)
'            Call appCopyInterior(Range("Config.H1"), n.RefersToRange)
'            Call appCopyAlignment(Range("Config.H1"), n.RefersToRange)
'        End If
'    Next
'
'    For Each n In ActiveWorkbook.Names
'        If VBA.Right(n.Name, 3) = ".H2" And VBA.Left(n.Name, 6) <> "Config" Then
'            Call appCopyFont(Range("Config.H2"), n.RefersToRange)
'            Call appCopyInterior(Range("Config.H2"), n.RefersToRange)
'            Call appCopyAlignment(Range("Config.H2"), n.RefersToRange)
'        End If
'    Next
'
'    For Each n In ThisWorkbook.Names
'        If VBA.Right(n.Name, 3) = ".H3" And VBA.Left(n.Name, 6) <> "Config" Then
'            Call appCopyFont(Range("Config.H3"), ConvertNameToRange(n))
'            Call appCopyInterior(Range("Config.H3"), ConvertNameToRange(n))
'            'Call appCopyAlignment(Range("Config.H3"), n.RefersToRange)
'        End If
'    Next
'
''    For Each n In ActiveWorkbook.Names
''        If VBA.Right(n.Name, 3) = ".H4" And VBA.Left(n.Name, 6) <> "Config" Then
''            Call appCopyFont(Range("Config.H4"), n.RefersToRange)
''            Call appCopyInterior(Range("Config.H4"), n.RefersToRange)
''            'Call appCopyAlignment(Range("Config.H4"), n.RefersToRange)
''        End If
''    Next
''
''    For Each n In ActiveWorkbook.Names
''        If VBA.Right(n.Name, 3) = ".H5" And VBA.Left(n.Name, 6) <> "Config" Then
''            Call appCopyFont(Range("Config.H5"), n.RefersToRange)
''            Call appCopyInterior(Range("Config.H5"), n.RefersToRange)
''            'Call appCopyAlignment(Range("Config.H5"), n.RefersToRange)
''        End If
''    Next
'
'subend:
'modConst.bNoNormalProtectActionsRequired = False
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "Contents.cmdFormat_Click error:"
'    Resume subend
'End Sub
'



'---------------------------------------------------------------------------------------
' cmdChangeCompanyLogo_Click
' changes the company logo on the right side of the header area for all sheets
' an image has to be selected
' @date     03.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'

Public Sub cmdChangeCompanyLogo_Click()
    Dim sht As Worksheet
    Dim s As shape
    Dim LogoName As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Config", "cmdChangeCompanyLogo_Click"
    If ButtonsLocked Then GoTo subend
    'procedure changed, just showing a short guide instead
    
    MsgBox Chr(26) & " To add or change a logo, 3 things are needed:" & vbLf & _
            "   1." & vbTab & "Copy the new logo to the config sheet." & vbLf & _
            "   2." & vbTab & "Assign a unique name to the logo." & vbLf & _
            "   3." & vbTab & "Add it to the logo list using the <Add Image>" & vbLf & _
            vbTab & "button while having the logo selected. " & vbLf & _
            vbLf & _
            Chr(26) & " To change the order of the logos, use the arrow buttons" & vbLf & _
                   "    and move it to the desired position. Topmost position" & vbLf & _
                   "    in the list means rightmost positioning on the sheet." & vbLf & _
            vbLf & _
            Chr(26) & " To remove a logo, just delete the name from the" & vbLf & _
                   "    names list using the <Remove Image> button." & vbLf & _
            vbLf & _
            Chr(26) & " To alter spacing and distance to the edges of the .H1" & vbLf & _
                   "    area, edit the fields <Spacing> and <Indent>."
'            vbLf & _
'            Chr(26) & " To copy a logo name to a free spot in the names list," & vbLf & _
'            "   just click this button while having a logo selected.", vbInformation, "Project Handbook"
    GoTo subend
    
    'ActiveSheet.Shapes.Range(Array("CompanyLogo")).Select
    If Not TypeName(selection) = "Picture" Then
        MsgBox "select a picture first", vbInformation, "Project Handbook"
        GoTo subend
    End If
    LogoName = InputBox("Enter a Name for the Logo", "Set Logo", "CompanyLogo")
    
    'LogoName = "PMCCLogo"
    
    If selection.Name <> LogoName Then selection.Name = LogoName
    '/**Fix for 1705**/
    'selection.Copy
    RCopy selection
    For Each sht In ThisWorkbook.Sheets
        
        Select Case sht.CodeName
        Case "Admin", "WBS2", "WBS3", "StatusHist", "Loc", "Config", "WPInfo", "WPDetails", "MeetingDetails", "TableTest", "ReleaseNotes"
            'do nothing
        Case Else
            On Error Resume Next
            Set s = sht.Shapes(LogoName)
            On Error GoTo 0
        
            If Not s Is Nothing Then
                s.Delete
                sht.Paste
                modShapes.SetCompanyLogo sht, 4, 40, LogoName
                modShapes.CopySingleControl sht, LogoName
            End If
                 
        End Select
        
    Next
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.cmdFormat_Click error:"
    Resume subend
End Sub
    
'Private Function ShapeExists(Name As String) As Boolean
'    Dim i As Integer
'
'    On Error GoTo SubErr
'    modStack.PushCallStack "Config", "ShapeExists"
'
'    For i = 1 To Pictures.Count
'        If Pictures(i).Name = Name Then
'            ShapeExists = True
'        End If
'    Next
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "Config.ShapeExists error:"
'    Resume SubEnd
'End Function

'Private Sub CopyControls()
'    Dim s As shape
'    Dim sht As Worksheet
'    Dim r As Range
'    Dim lastRow As Integer
'
'    On Error GoTo SubErr
'    modStack.PushCallStack "Config", "CopyControls"
'
'    If MsgBox("gespeicherte Positionen werden |fffd|berschrieben", vbYesNo, "Copy Controls?") = vbNo Then GoTo SubEnd
'
'    Set r = Config.Range("Config.ControlDefinitions")
'    r.ClearContents
'    Set r = getRange(Config, "Config.ControlDefinitions", 0, 1, 0, 0)
'    lastRow = r.End(xlUp).row
'
'    For Each sht In Sheets
'        For Each s In sht.Shapes
'            If s.Type = msoFormControl Or _
'                s.Type = msoOLEControlObject Or _
'                s.Type = msoComment Or _
'                s.Type = msoPicture Or _
'                s.Type = msoShapeRectangle Then
'                'If (s.FormControlType = xlButtonControl) And (VBA.Mid(s.name, 1, 3) = "cmd") Then
'    '                MsgBox "title: " & s.name & vbCrLf & _
'    '                        "top: " & s.Top & vbCrLf & _
'    '                        "left: " & s.Left & vbCrLf & _
'    '                        "height: " & s.Height & vbCrLf & _
'    '                        "width: " & s.Width
'
'
'                    r.Cells(lastRow, 1).value = sht.CodeName
'                    r.Cells(lastRow, 2).value = s.Name
'                    r.Cells(lastRow, 3).value = s.top - s.TopLeftCell.top
'                    r.Cells(lastRow, 4).value = s.Left - s.TopLeftCell.Left
'                    r.Cells(lastRow, 5).value = s.Height
'                    r.Cells(lastRow, 6).value = s.Width
'                    r.Cells(lastRow, 7).value = s.TopLeftCell.Address
'                    lastRow = lastRow + 1
'
'                'End If
'            End If
'        Next
'    Next
'
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "Config.CopyControls error:"
'    Resume SubEnd
'End Sub


'Private Sub CheckAndRearrangeControls()
'    Dim sht As Worksheet
'    Dim cell As Range
'    Dim s As shape
'    Dim r As Range
'
'    'msoOLEControlObject    titelbild
'    'msoFormControl         form controls
'    'msoComment             comments (plan)
'    'msopicture             bild (company logo)
'
'    'Set r = Config.Range("Config.ControlDefinitions")
'    On Error GoTo SubErr
'    modStack.PushCallStack "Config", "CheckAndRearrangeControls"
'
'    If MsgBox("alle Objekte werden neu platziert", vbYesNo, "Rearrange Controls?") = vbNo Then GoTo SubEnd
'    Set r = getRange(Config, "Config.ControlDefinitions", 0, 1, 0, 0)
'    For Each sht In Sheets
'        For Each s In sht.Shapes
'            If s.Type = msoFormControl Or _
'                s.Type = msoOLEControlObject Or _
'                s.Type = msoComment Or _
'                s.Type = msoPicture Then
'                For Each cell In r
'                    If cell.value = sht.CodeName Then
'                        If cell.offset(0, 1).value = s.Name Then
'                            'checks and tolerance are for performance reasons
'                            If Abs(cell.offset(0, 2).value - s.top) > 0.25 Or _
'                                Abs(cell.offset(0, 3).value - s.Left) > 0.25 Or _
'                                Abs(cell.offset(0, 4).value - s.Height) > 0.25 Or _
'                                Abs(cell.offset(0, 5).value - s.Width) > 0.25 Then
'
'                                Range(cell, cell.offset(0, 5)).Font.ColorIndex = 3
'                                If Abs(cell.offset(0, 2).value - s.top) > 0.25 Then
'                                    cell.offset(0, 6).NumberFormat = "0.00"
'                                    cell.offset(0, 6).Font.ColorIndex = 3
'                                    cell.offset(0, 6).value = Abs(cell.offset(0, 2).value - s.top)
'                                Else
'                                    cell.offset(0, 6).value = 0
'                                End If
'                                If Abs(cell.offset(0, 3).value - s.Left) > 0.25 Then
'                                    cell.offset(0, 7).NumberFormat = "0.00"
'                                    cell.offset(0, 7).Font.ColorIndex = 3
'                                    cell.offset(0, 7).value = Abs(cell.offset(0, 3).value - s.Left)
'                                Else
'                                    cell.offset(0, 7).value = 0
'                                End If
'                                If Abs(cell.offset(0, 4).value - s.Height) > 0.25 Then
'                                    cell.offset(0, 8).NumberFormat = "0.00"
'                                    cell.offset(0, 8).Font.ColorIndex = 3
'                                    cell.offset(0, 8).value = Abs(cell.offset(0, 4).value - s.Height)
'                                Else
'                                    cell.offset(0, 8).value = 0
'                                End If
'                                If Abs(cell.offset(0, 5).value - s.Width) > 0.25 Then
'                                    cell.offset(0, 9).NumberFormat = "0.00"
'                                    cell.offset(0, 9).Font.ColorIndex = 3
'                                    cell.offset(0, 9).value = Abs(cell.offset(0, 5).value - s.Width)
'                                Else
'                                    cell.offset(0, 9).value = 0
'                                End If
'
''                                cell.Offset(0, 6).value = "(" & Abs(cell.Offset(0, 2).value - s.Top) & "/" & _
''                                                        Abs(cell.Offset(0, 3).value - s.Left) & "/" & _
''                                                        Abs(cell.Offset(0, 4).value - s.Height) & "/" & _
''                                                        Abs(cell.Offset(0, 5).value - s.Width) & ")"
''                                MsgBox "mispositioned item detected in sheet " & sht.CodeName & ":" & vbCrLf & _
''                                "title: " & s.name & vbCrLf & _
''                                "top: " & s.Top & " -> " & cell.Offset(0, 2).value & vbCrLf & _
''                                "left: " & s.Left & " -> " & cell.Offset(0, 3).value & vbCrLf & _
''                                "height: " & s.Height & " -> " & cell.Offset(0, 4).value & vbCrLf & _
''                                "width: " & s.Width & " -> " & cell.Offset(0, 5).value
'
'                                s.top = cell.offset(0, 2)
'                                s.Left = cell.offset(0, 3)
'                                s.Height = cell.offset(0, 4)
'                                s.Width = cell.offset(0, 5)
'                            End If
'                        End If
'                    End If
'                Next
'            End If
'        Next
'    Next
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "Config.CheckAndRearrangeControls error:"
'    Resume SubEnd
'
'End Sub



Public Sub SaveSingleChart(sht As Worksheet, chtobj As ChartObject)
'                            Optional iChartAreaTop As Integer, Optional iChartAreaLeft As Integer, _
'                            Optional iChartAreaHeight As Integer, Optional iChartAreaWidth As Integer, _
'                            Optional iPlotAreaTop As Integer, Optional iPlotAreaLeft As Integer, _
'                            Optional iPlotAreaHeight As Integer, Optional iPlotAreaWidth As Integer)
    
    Dim SearchRange As Range
    Dim rCell As Range
    Dim R As Range
    Dim Counter As Integer
    Dim rTopLeftCell As Range
    Dim rBottomRightCell As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Config", "SaveSingleChart"
    
   
    Set SearchRange = getRange(Config, "Config.ChartDefinitions", 0, 1, 0, 0)
    
    'generate range object with all the charts' names in it
    With SearchRange
        Set rCell = .Cells(1, 1)
        For Counter = 1 To WorksheetFunction.CountIf(.Cells, sht.CodeName)
            Set rCell = .Find(What:=sht.CodeName, After:=rCell, LookIn:=xlValues, _
                              LookAt:=xlWhole, SearchOrder:=xlByRows, _
                              SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
            If Not rCell Is Nothing Then
                If R Is Nothing Then
                    Set R = rCell.offset(0, 1)
                Else
                    Set R = Union(R, rCell.offset(0, 1)) 'MsgBox rCell.value & " / " & rCell.Offset(0, 1).value
                End If
            End If
        Next Counter
    End With
    
    'find chart object in this range and save it
    With R
        Set rCell = .Find(chtobj.Name, LookIn:=xlValues)
        If Not rCell Is Nothing Then
            Set rTopLeftCell = getRange(sht, chtobj.Name & ".TL", 0, 1, 0, 0)
            Set rBottomRightCell = getRange(sht, chtobj.Name & ".BR", 0, 1, 0, 0)
            'r.Cells(lastrow, 1).value = sht.CodeName
            'rCell.Offset(0, 1).value = chtObj.name
            rCell.offset(0, 1).value = chtobj.Chart.ChartArea.Top - rTopLeftCell.Top                                           'y to tlc
            rCell.offset(0, 2).value = chtobj.Chart.ChartArea.Left - rTopLeftCell.Left                                         'x to tlc
            rCell.offset(0, 3).value = chtobj.Chart.ChartArea.Top + chtobj.Chart.ChartArea.Height - rBottomRightCell.Top       'y to brc
            rCell.offset(0, 4).value = chtobj.Chart.ChartArea.Left + chtobj.Chart.ChartArea.Width - rBottomRightCell.Left      'x to brc
            rCell.offset(0, 5).value = chtobj.Chart.PlotArea.Top '- rTopLeftCell.Top                                           'y to CA.topleft
            rCell.offset(0, 6).value = chtobj.Chart.PlotArea.Left '- rTopLeftCell.Left                                         'x to CA.topleft
            rCell.offset(0, 7).value = rBottomRightCell.Top - (chtobj.Chart.ChartArea.Top + _
                                        chtobj.Chart.PlotArea.Top + chtobj.Chart.PlotArea.Height)                               'y to CA.bottomright
            rCell.offset(0, 8).value = rBottomRightCell.Left - (chtobj.Chart.ChartArea.Left + _
                                         chtobj.Chart.PlotArea.Left + chtobj.Chart.PlotArea.Width)                              'x to CA.bottomright
        End If
    End With
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "SetCharts error:"
    Resume subend
End Sub

Public Sub AssertVarType(Target As Range, vType As VbVarType)
    
    On Error GoTo suberr
    modStack.PushCallStack "Config", "AssertVarType"

    Dim R As Range
    For Each R In Target
        If VarType(R.value) <> vType Then R.Interior.Color = phbColorRed
    Next
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.AssertVarType error:"
    Resume subend
End Sub

Public Sub SetChartPlotLeft(sht As Worksheet, chtobj As ChartObject, dPlotAreaLeft As Double)

    Dim SearchRange As Range
    Dim rCell As Range
    Dim R As Range
    Dim Counter As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Config", "SetChartPlotLeft"
    
    
    'setScale
    Set SearchRange = getRange(Config, "Config.ChartDefinitions", 0, 1, 0, 0)
    
    'generate range object with all the charts' names in it
    With SearchRange
        Set rCell = .Cells(1, 1)
        For Counter = 1 To WorksheetFunction.CountIf(.Cells, sht.CodeName)
            Set rCell = .Find(What:=sht.CodeName, After:=rCell, LookIn:=xlValues, _
                              LookAt:=xlWhole, SearchOrder:=xlByRows, _
                              SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
            If Not rCell Is Nothing Then
                If R Is Nothing Then
                    Set R = rCell.offset(0, 1)
                Else
                    Set R = Union(R, rCell.offset(0, 1)) 'MsgBox rCell.value & " / " & rCell.Offset(0, 1).value
                End If
            End If
        Next Counter
    End With
    
    'find chart object in this range and save it
    With R
        Set rCell = .Find(chtobj.Name, LookIn:=xlValues)
        If Not rCell Is Nothing Then
            If dPlotAreaLeft = -1 Then
                rCell.offset(0, 6).value = rCell.offset(0, 11).value
            Else
                rCell.offset(0, 6).value = dPlotAreaLeft
            End If
        End If
    End With
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.SetCharts error:"
    Resume subend
End Sub

Private Sub Store2003()
    On Error GoTo suberr
    modStack.PushCallStack "Config", "Store2003"

    
    Me.Range("Config.ChartDefinitions2003").value = SerializePos(Me.Range("BD4"), Me.Range("BJ15"))
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.Store2003 error:"
    Resume subend
End Sub
Private Sub Store2007()
    On Error GoTo suberr
    modStack.PushCallStack "Config", "Store2007"

    
    Me.Range("Config.ChartDefinitions2007").value = SerializePos(Me.Range("BD4"), Me.Range("BJ15"))
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.Store2007 error:"
    Resume subend
End Sub
Private Sub Store2010()
    On Error GoTo suberr
    modStack.PushCallStack "Config", "Store2010"

    
    Me.Range("Config.ChartDefinitions2010").value = SerializePos(Me.Range("BD4"), Me.Range("BJ15"))
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.Store2010 error:"
    Resume subend
End Sub
Public Sub Load2003()
    On Error GoTo suberr
    modStack.PushCallStack "Config", "Load2003"

    
    DeSerializePos Me.Range("Config.ChartDefinitions2003").value, Me.Range("BD4"), Me.Range("BJ15")
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.Load2003 error:"
    Resume subend
End Sub
Public Sub Load2007()
    On Error GoTo suberr
    modStack.PushCallStack "Config", "Load2007"

    
    DeSerializePos Me.Range("Config.ChartDefinitions2007").value, Me.Range("BD4"), Me.Range("BJ15")
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.Load2007 error:"
    Resume subend
End Sub
Public Sub Load2010()
    On Error GoTo suberr
    modStack.PushCallStack "Config", "Load2010"

    
    DeSerializePos Me.Range("Config.ChartDefinitions2010").value, Me.Range("BD4"), Me.Range("BJ15")
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.Load2010 error:"
    Resume subend
End Sub

Private Sub DeSerializePos(val As String, cell1 As Range, cell2 As Range)
    
    Dim i As Integer
    Dim arr As Variant
    Dim cols As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Config", "DeSerializePos"

    Range(cell1, cell2).ClearContents
    cols = Range(cell1, cell2).Columns.Count
    arr = Split(val, vbLf)
    
    For i = 0 To UBound(arr)
        Range(cell1, cell2).Cells(1 + (i \ cols), 1 + (i Mod cols)) = arr(i)
    Next i

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.DeSerializePos error:"
    Resume subend
End Sub

Private Function SerializePos(cell1 As Range, cell2 As Range)
    Dim rCell As Range
    Dim sResult As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Config", "SerializePos"

    For Each rCell In Range(cell1, cell2)
        If sResult = "" Then
            sResult = rCell.value
        Else
            sResult = sResult & vbLf & rCell.value '& i & "||" & rCell.value
        End If
    Next
    SerializePos = sResult

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Config.SerializePos error:"
    Resume subend
End Function


Public Sub DeSerializeRange(val As String, R As Range)
    
    Dim i As Integer
    Dim arr As Variant
    Dim cols As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Config", "DeSerializePos"

    R.ClearContents
    cols = R.Columns.Count
    arr = Split(val, "|")
    
    For i = 0 To UBound(arr)
        R.Cells(1 + (i \ cols), 1 + (i Mod cols)) = arr(i)
    Next i

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.DeSerializePos error:"
    Resume subend
End Sub

Public Function SerializeRange(R As Range) As String
    Dim rCell As Range
    Dim sResult As String
    Dim bInitialized As Boolean
    
    On Error GoTo suberr
    modStack.PushCallStack "Config", "SerializeRange"

    For Each rCell In R
        If Not bInitialized Then
            sResult = rCell.value
            bInitialized = True
        Else
            sResult = sResult & "|" & rCell.value '& i & "||" & rCell.value
        End If
    Next
    SerializeRange = sResult

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Config.SerializeRange error:"
    Resume subend
End Function
'---------------------------------------------------------------------------------------
' Worksheet_Change
'
' @date     21.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
'Private Sub Worksheet_Change(ByVal Target As Range)
'    On Error GoTo SubErr
'    modStack.PushCallStack "Config", "Worksheet_Change"
'
'    If Not InRange(Target, Config.Range("Config.Logos")) Then GoTo SubEnd
'
'    MsgBox "please use the buttons to add, move or delete pictures.", vbExclamation, "Project Handbook"
'    Excel.Application.EnableEvents = False
'    Target.ClearContents
'    Target.Select
'    Excel.Application.EnableEvents = True
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "Config.Worksheet_Change error:"
'    Resume SubEnd
'End Sub


'---------------------------------------------------------------------------------------
' cmdMoveDown_Click
'
' @date     21.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub cmdMoveDown_Click()
    Dim tmp As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Config", "cmdMoveDown_Click"
    If ButtonsLocked Then GoTo subend
    Excel.Application.EnableEvents = False
    
    If InRange(ActiveCell, getRange(Config, "Config.Logos", -1, 1, 0, 0)) Then
        ActiveCell.offset(1, 0).Select
        tmp = ActiveCell.offset(-1, 0).value
        ActiveCell.offset(-1, 0) = ActiveCell.value
        ActiveCell.value = tmp
    End If

subend:
    Excel.Application.EnableEvents = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.cmdMoveDown_Click error:"
    Resume subend

End Sub


'---------------------------------------------------------------------------------------
' cmdMoveUp_Click
'
' @date     21.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub cmdMoveUp_Click()
    Dim tmp As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Config", "cmdMoveUp_Click"
    If ButtonsLocked Then GoTo subend
    Excel.Application.EnableEvents = False

    If InRange(ActiveCell, getRange(Config, "Config.Logos", -1, 1, 1, 0)) Then
        ActiveCell.offset(-1, 0).Select
        tmp = ActiveCell.offset(1, 0).value
        ActiveCell.offset(1, 0) = ActiveCell.value
        ActiveCell.value = tmp
    End If

subend:
    Excel.Application.EnableEvents = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.cmdMoveUp_Click error:"
    Resume subend

End Sub


'---------------------------------------------------------------------------------------
' cmdAddImage
'
' @date     21.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub cmdAddImage_Click()
    Dim rCell As Range
    Dim SearchRange As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Config", "cmdAddImage_Click"
    If ButtonsLocked Then GoTo subend
    Excel.Application.EnableEvents = False

    If TypeName(selection) = "Picture" Then
        Set SearchRange = Config.Range("Config.Logos")
        With SearchRange
            Set rCell = .Find(selection.Name)
        End With
        If Not rCell Is Nothing Then
            MsgBox "an image with this name is already listed.", vbInformation, "Project Handbook"
            GoTo subend
        End If
        For Each rCell In Config.Range("Config.Logos")
            If rCell.value = "" Then
                rCell.value = selection.Name
                GoTo subend
            End If
        Next
        MsgBox "no more spots available, please remove an entry first!", vbInformation, "Project Handbook"
        GoTo subend
    Else
        Application.Dialogs(xlDialogInsertPicture).Show
        'MsgBox "please select an image first.", vbInformation, "Project Handbook"
    End If

subend:
    Excel.Application.EnableEvents = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.cmdAddImage_Click error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' cmdDeleteImage
'
' @date     21.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub cmdDeleteImage_Click()
    
    Dim tmp As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Config", "cmdDeleteImage_Click"
    If ButtonsLocked Then GoTo subend
    Excel.Application.EnableEvents = False
    If InRange(ActiveCell, Config.Range("Config.Logos")) Then
        
        tmp = ActiveCell.Address
        While Not ActiveCell.offset(1, 0).value = ""
            cmdMoveDown_Click
        Wend
        ActiveCell.ClearContents
        Range(tmp).Select
    End If
    
subend:
    Excel.Application.EnableEvents = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.cmdDeleteImage_Click error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' ConfProtectAll
' remove unprotect flag
' @date     02.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub ConfProtectAll()
    On Error GoTo suberr
    modStack.PushCallStack "Config", "ConfProtectAll"
    'If ButtonsLocked Then GoTo SubEnd

    ProtectionRemoved False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.ConfProtectAll error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' ConfUnProtectAll
' set unprotect flag
' @date     02.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub ConfUnProtectAll()
    On Error GoTo suberr
    modStack.PushCallStack "Config", "ConfUnProtectAll"
    If ButtonsLocked Then GoTo subend

    ProtectionRemoved True

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.ConfUnProtectAll error:"
    Resume subend
End Sub

Private Sub ProtectionRemoved(bLock As Boolean)
    SetCustomProperty Config, "ProtectionRemoved", CStr(bLock)
End Sub



'---------------------------------------------------------------------------------------
' cmdPropertyBrowser
'
' @date     21.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub cmdPropertyBrowser()

    On Error GoTo suberr
    modStack.PushCallStack "Config", "cmdPropertyBrowser"
  '  If ButtonsLocked Then GoTo subend

    frmControlPanel.Show vbModeless

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.cmdPropertyBrowser error:"
    Resume subend
End Sub



Private Sub TestCamera()
    'Statusreport.UsedRange.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    'Worbooks("OtherBook.xls").Activate
    'Worksheets("Sheet2").Active
    'Range("B9").Select
    Statusreport.Range(Statusreport.PageSetup.PrintArea).CopyPicture Appearance:=xlScreen, Format:=xlPicture
'    Sheet2.Pictures.Add 10, 10, 10, 10
'    Application.CutCopyMode = False
    
    Config.Range("B60").Select
    ActiveSheet.Paste
    'Config.Pictures.Add 10, 10, 10, 10
    'ActiveSheet.Paste
End Sub

Public Sub cmdTest1()
    Debug.Print "method cmdTest1 called"
End Sub
Public Sub cmdTest2()
    Debug.Print "method cmdTest2 called"
End Sub
Public Sub cmdTest3()
    Debug.Print "method cmdTest3 called"
End Sub



'Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
'    If TypeName(selection) = "Picture" Then MsgBox "!"
'End Sub

Private Sub test123456()
    Dim cb As CommandButton
'    Set cb = Config.OLEObjects.Add(ClassType:="Forms.Commandbutton.1", Link:=False _
'        , DisplayAsIcon:=True, Left:=325, top:=10, Width:=87.75, Height _
'        :=29.25)
    
    Set Config.Shapes("CommandButton1").Picture = Config.Shapes("CompanyLogo")  'Application.CommandBars.FindControl(id:=3).Picture
End Sub


Sub Create_Command_Button_2007()

'

' Creates a Command button and Positions it

' Written by Shasur for http://vbadud.blogspot.com

Dim oOLE As OLEObject

' Add a Command Button

oOLE = Config.OLEObjects.Add(ClassType:="Forms.CommandButton.1", Left:=220, Top:=40, Height:=30, Width:=120)

oOLE.Object.Interior.Color = vbRed

' Move and Size with cells

oOLE.Placement = XlPlacement.xlMoveAndSize
oOLE.FaceId = 5
oOLE.Object.Caption = "Click Me..."


End Sub



Sub anotherTest()
    Dim r1 As Range
    Dim r2 As Range
    Dim r3 As Range
    
    
    Set r1 = Config.Cells(1, 1)
    Set r2 = Config.Range("B5:F7")
    Set r3 = Union(r1, r2)
    
    Debug.Print r3.Address
    

End Sub

Sub anotherTestReverse()
    Dim R As Range
    
    Set R = Config.Range("$B$10,$D$5:$F$7")
    R.Select
End Sub


'Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, cancel As Boolean)
'    Dim r As Range
'    On Error GoTo SubErr
'    modStack.PushCallStack "Config", "Worksheet_BeforeRightClick"
'    If ButtonsLocked Then GoTo SubEnd
'
'    If Not InRange(Target, Config.Range("I20")) Then
'        modContextMenu.RestoreDefaultMenu
'        GoTo SubEnd
'    End If
'    BuildCustomMenu FaceIDs
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg
'    Resume SubEnd
'End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
'    If Not InRange(Target, Me.Range("Config.License")) Then Exit Sub
'    If Target.Cells.Count > 1 Then Exit Sub
'
'    On Error GoTo suberr
'    modStack.PushCallStack "Config", "Worksheet_Change"
'
'    Select Case Target.Value
'        Case "Project": MakeProjectVersion
'        Case "Manager": MakeManagerVersion
'        Case "Full":    MakeFullVersion
'    End Select
'
'subend:
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "Config.Worksheet_Change error:"
'    Resume subend
End Sub

Private Sub Worksheet_Deactivate()
    modContextMenu.RestoreDefaultMenu
End Sub

Public Sub cmdBatchUpdate()
    If ButtonsLocked Then Exit Sub
    frmBatchImport.Show (vbModeless)
End Sub

'Private Sub Worksheet_SelectionChange(ByVal Target As Range)
'    If MV Is Nothing Then Set MV = New TPGMultiValueDDL
'    MV.Init
'End Sub


Private Sub UpdateModuleData()

    On Error GoTo suberr
    modStack.PushCallStack "Config", "UpdateModuleData"
    If ButtonsLocked Then GoTo subend

    Dim i As Integer
    Dim cb As CheckBox
    Dim cpname As String
    Dim rCell As Range: Set rCell = Me.Range("Config.Modules").offset(1, 0)
    
    For i = Me.CheckBoxes.Count To 1 Step -1
        Me.CheckBoxes(i).Delete
    Next
    
    For i = 1 To Me.CustomProperties.Count
        cpname = GetCustomProperty(Me, "dummy", i)
        If Left(cpname, 6) = "Module" Then
            Set cb = Me.CheckBoxes.Add(rCell.Left, rCell.Top, rCell.Width, rCell.Height)
            cb.Name = cpname
            cb.Caption = Replace(cpname, "Module", "")
            cb.OnAction = "Config.SetModule"
            Set rCell = rCell.offset(1, 0)
            If CBool(GetCustomProperty(Me, cpname)) Then cb.value = 1
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.UpdateModuleData error:"
    Resume subend
End Sub

Public Sub ListAvailableCustomPropertiesWithTheirValues()
Dim i As Integer
Dim cpname As String
    For i = 1 To Me.CustomProperties.Count
        cpname = GetCustomProperty(Me, "dummy", i)
        Debug.Print cpname + " - " + GetCustomProperty(Me, cpname)
    Next

End Sub

Public Sub SetModule()
Debug.Print Application.Caller
Debug.Print CStr(Me.CheckBoxes(Application.Caller).value = 1)

'    SetCustomProperty Me, Application.Caller, CStr(Me.CheckBoxes(Application.Caller).Value = 1)
'
'    If Application.Caller = "ModuleMTAServer" Then
'        If (Me.CheckBoxes(Application.Caller).Value = 1) Then
'            contents.EnableMTASheets
'            Me.Select
'        Else
'            contents.DisableMTASheets
'        End If
'    End If
End Sub


'Private Sub MakeDemoVersion()
'    'import DEMO Project
'    'import Cover picture
'    'import Rules pictures
'    'select WP with demodata
'    'select meeting with demodata
'    'select status with demo data
'    'select org chart
'
'    'start this
'
'    'Set Version to "D" on top of this page
'
'    'enter demo data in plan
'    'click update all sheets in plan
'
'    Const DEMOCOLOR = 5287936
'
'    On Error GoTo SubErr
'
'    UnprotectAll
'
'    With Admin
'        .Range("Admin.Complexity").offset(4, 0).Resize(1, 1).Value = "Demo"
'        .Range("Admin.Methods").offset(0, 5).Value = "M"
'
'        .Range("Admin.Costtype").Value = ""
'        .Range("Admin.Costtype").Resize(1, 1).Value = "Sonstige Kosten"
'
'        .Range("Admin.WorkCosttype").Value = ""
'        .Range("Admin.WorkCosttype").Resize(1, 1).Value = "Personal Kosten"
'
'        .Range("Admin.Org").Resize(, 3).Value = ""
'        .Range("Admin.Org").Resize(1, 1).Value = "Personal"
'        .Range("Admin.Org").Resize(1, 1).offset(0, 1).Value = 100
'        .Range("Admin.Org").Resize(1, 1).offset(0, 2).Value = "Personal Kosten"
'    End With
'
'    With Cover
'        .Reset
'        .Range("Cover.Version").Value = .Range("Cover.Version").Value & " Demo"
'        With .Range("Cover.ProjectName")
'            .Value = "DEMO"
'        End With
'
'        With .Range("Cover.Complexity")
'            .Value = "Demo"
'            UnprotectSheet Cover
'            .locked = True
'            .Interior.Color = RGB(242, 242, 242)
'        End With
'        UnprotectWorkbook "pmccTPG:-)"
'        .Tab.Color = DEMOCOLOR
'    End With
'
'    contents.Tab.Color = DEMOCOLOR
'
'    With Contract
'        .Reset
'        .Tab.Color = DEMOCOLOR
'
'        With .Range("Contract.ResourcesTable").Cells(2, 3)
'            .Value = "Personal"
'            UnprotectSheet Contract
'            .Interior.Color = RGB(242, 242, 242)
'            .locked = True
'        End With
'
'        With .Range("Contract.CostTable").Cells(3, 3)
'            .Value = "Sonstige Kosten"
'            'UnprotectSheet Contract
'            '.Interior.Color = RGB(242, 242, 242)
'            '.locked = True
'        End With
'
'    End With
'
'    Team.Reset
'    Team.Tab.Color = DEMOCOLOR
'
'    'Org is always locked
'    Com.Cells.locked = True
'    Plan.Reset
'    Plan.Tab.Color = DEMOCOLOR
'    'RACI is always locked
'    WBS.CreateWBSStructure False
'    WBS.Tab.Color = DEMOCOLOR
'    WP.Cells.locked = True
'    MST.Tab.Color = DEMOCOLOR
'    Gantt.Tab.Color = DEMOCOLOR
'    'Workplan is always locked
'    'Work is always locked
'    'Costplan is always locked
'    'Cost is always locked
'    Context.Cells.locked = True
'    Environment.Cells.locked = True
'    Risk.Cells.locked = True
'    Rules.Cells.locked = True
'    'StatusHist.reset
'    'Statusreport.Clear
'    Statusreport.Tab.Color = DEMOCOLOR
'    Closure.Cells.locked = True
'    Meeting.Cells.locked = True
'    'Actions.reset
'    Actions.Tab.Color = DEMOCOLOR
'    'Decisions.reset
'    Decisions.Tab.Color = DEMOCOLOR
'
'    PrepareWorkbook
'
'SubEnd:
'    Exit Sub
'
'SubErr:
'    AppErrMsg "modApp.MakeDemoVersion error:"
'    Resume SubEnd
'
'End Sub



Public Function PersonPlanningDataPresent() As Boolean
    Dim rCell As Range
    PersonPlanningDataPresent = False
    For Each rCell In Config.Range("Config.wts")
        If Not rCell.value = "" Then
            PersonPlanningDataPresent = True
            Exit For
        End If
    Next
End Function


Attribute VB_Name = "Config_Lic"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'REMARK: in order to add new modules to the sheet:
' > insert row in modules block (keep config_lic.modules range correct
' > add Module... name in Col A (font color white)
' > add clean name in Col B

Option Explicit
#If VBA7 Then
Private Declare PtrSafe Function GetTickCount Lib "kernel32" () As Long
#Else
Private Declare Function GetTickCount Lib "kernel32" () As Long
#End If

Dim bnoupdate As Boolean

Private Sub Worksheet_Change(ByVal Target As Range)

'Exit Sub

If bnoupdate Then Exit Sub

'when changing license
'depending on selected license we make adjustments in visible input fields and modules
If InRange(Target, Me.Range("Config.License")) Then
    Select Case Me.Range("Config.License").value
        Case "Full"
            Me.Range("Config_Lic.PrjName").EntireRow.Hidden = True
            Me.Range("Config_Lic.ManName").EntireRow.Hidden = True
            ResetModules
        Case "Project"
            Me.Range("Config_Lic.PrjName").EntireRow.Hidden = False
            Me.Range("Config_Lic.ManName").EntireRow.Hidden = True
            Me.Range("Config_Lic.PrjName").Select
            ResetModules
        Case "Manager"
            Me.Range("Config_Lic.PrjName").EntireRow.Hidden = True
            Me.Range("Config_Lic.ManName").EntireRow.Hidden = False
            Me.Range("Config_Lic.ManName").Select
            ResetModules
        Case "KISS"
            Me.Range("Config_Lic.PrjName").EntireRow.Hidden = True
            Me.Range("Config_Lic.ManName").EntireRow.Hidden = False
            Me.Range("Config_Lic.ManName").Select
            'lock modules section (user should not be able to change this for a KISS license
            Me.Range("Config_Lic.Modules").Interior.Color = RGB(242, 242, 242)
            Me.Range("Config_Lic.Modules").ClearContents
            Me.Range("Config_Lic.Modules").offset(1, 0).Resize(1, 1).value = "x"
            Me.Range("Config_Lic.Modules").locked = True
        Case "KISS Corporate"
            Me.Range("Config_Lic.PrjName").EntireRow.Hidden = True
            Me.Range("Config_Lic.ManName").EntireRow.Hidden = True
            'lock modules section (user should not be able to change this for a KISS Corporate license
            Me.Range("Config_Lic.Modules").Interior.Color = RGB(242, 242, 242)
            Me.Range("Config_Lic.Modules").ClearContents
            Me.Range("Config_Lic.Modules").offset(1, 0).Resize(1, 1).value = "x"
            Me.Range("Config_Lic.Modules").locked = True
    End Select
ElseIf InRange(Target, Me.Range("Config.LogoIndent3")) Then
    If Me.Range("Config.Logo3").value <> "NONE" Then
        If CInt(Me.Range("Config.LogoIndent3").value) < 0 Then
            AppStopMsg "Indent needs a value >=0. Please first correct this."
        Else
            If AdjustConfigLogoSize Then modShapes.PositionLogo_v3 Me
        End If
    End If
ElseIf InRange(Target, Me.Range("Config.Logo3")) Then
    If Me.Range("Config.Logo3").value = "CUSTOM" Then
        If Not CustomLogoPresent Then AppInfoMsg "No Custom present yet, please first import a logo."
    End If
    HideLogos
    'then show the selected logo in the header, if NONE selected then nothing will be shown
    If Me.Range("Config.Logo3").value <> "NONE" Then
        If AdjustConfigLogoSize Then modShapes.PositionLogo_v3 Me
    End If
End If

End Sub

Private Sub ResetModules()
    'if needed set modules back to std. (in case when changing back from KISS to ...
    If Me.Range("Config_Lic.Modules").offset(2, 0).Resize(1, 1).locked Then
        With Me.Range("Config_Lic.Modules")
            .Interior.Color = RGB(255, 255, 255) ')
            .ClearContents
            .locked = False
            .Resize(2, 1).value = "x"
            .Resize(2, 1).Interior.Color = RGB(242, 242, 242)
            .Resize(2, 1).locked = True
        End With
    End If
End Sub

Private Function CustomLogoPresent() As Boolean
Dim shape As shape
For Each shape In Me.Shapes
    If (shape.Type = msoPicture) And (shape.Name = "CUSTOM") Then
        CustomLogoPresent = True
    End If
Next
End Function

Private Sub HideLogos()
'hide all logos
Dim shape As shape
For Each shape In Me.Shapes
    If shape.Type = msoPicture Then
            shape.Top = Me.Cells(2, 1).Top
            shape.Left = Me.Cells(2, Me.Range("Config_Lic.PMCCLogoPos").Column).Left
            shape.visible = msoFalse
    End If
Next
    
End Sub

Private Sub MakeProjectVersion()
    On Error GoTo suberr
    modStack.PushCallStack "Config_Lic", "MakeProjectVersion"
    
    With Cover
        .noupdate = True
        With .Range("Cover.ProjectName")
            .value = Me.Range("Config_Lic.PrjName").value
            .locked = True
            .Interior.Color = RGB(242, 242, 242)
        End With
        .noupdate = False
    End With
    
    SetCustomProperty Config, "License", "P"
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config_Lic.MakeProjectVersion error:"
    Resume subend
End Sub

Private Sub MakeManagerVersion()
    On Error GoTo suberr
    modStack.PushCallStack "Config_Lic", "MakeManagerVersion"

    With Cover
        With .Range("Cover.Manager.Table").Cells(2, 2)
            .value = Me.Range("Config_Lic.ManName").value 'kein noupdate=true verwenden, weiil sonst hier keine GUID erzeugt wird !
            .locked = True
            .Interior.Color = RGB(242, 242, 242)
        End With
    End With
    
    Config.Range("Config.RolesContractLeft.Manager").value = ""
    Config.Range("Config.Roles.Manager").value = ""
    
    With Contract
        .Range("Contract.Managers").Cells(2, 3).locked = True
        .Range("Contract.Managers").Cells(2, 3).Interior.Color = RGB(242, 242, 242)
        .Range("Contract.Managers").Cells(2, 4).locked = True
        .Range("Contract.Managers").Cells(2, 4).Interior.Color = RGB(242, 242, 242)
    End With
    
    With Team
        .Range("Team.Table").Cells(2, Team.Range("Team.NameColumn").Column - 2).Resize(1, 6).locked = True
        .Range("Team.Table").Cells(2, Team.Range("Team.NameColumn").Column - 2).Resize(1, 6).Interior.Color = RGB(242, 242, 242)
        .Range("Team.Table").Cells(2, Team.Range("Team.RoleColumn").Column - 2).Resize(1, 6).locked = True
        .Range("Team.Table").Cells(2, Team.Range("Team.RoleColumn").Column - 2).Resize(1, 6).Interior.Color = RGB(242, 242, 242)
    End With
    
    SetCustomProperty Config, "License", "M"
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config_Lic.MakeManagerVersion error:"
    Resume subend
End Sub

Public Sub test()
    SetCustomProperty Config, "License", "F"
End Sub

Private Sub MakeFullVersion()

    On Error GoTo suberr
    modStack.PushCallStack "Config", "MakeFullVersion"

'    Config.Range("Config.RolesContractLeft.Manager").FormulaLocal = "=VLOOKUP(""Manager"";LOC.Table;Cover.LOC;FALSE)"
'    Config.Range("Config.Roles.Manager").FormulaLocal = "=VLOOKUP(""Manager"";LOC.Table;Cover.LOC;FALSE)"
    Config.Range("Config.RolesContractLeft.Manager").FormulaLocal = "=Config.Manager"
    Config.Range("Config.Roles.Manager").FormulaLocal = "=Config.Manager"

    With Cover
        With .Range("Cover.Manager.Table").Cells(2, 2)
            .value = ""  'kein noupdate=true verwenden, weiil sonst hier keine GUID erzeugt wird !
            .locked = False
            .Interior.Color = RGB(255, 255, 255)
        End With
    End With

    With Cover
        .noupdate = True
        With .Range("Cover.ProjectName")
            .value = ""
            .locked = False
            .Interior.Color = RGB(255, 255, 255)
        End With
        .noupdate = False
    End With

    With Contract
'        UnprotectSheet Contract
        .Range("Contract.Managers").Cells(2, 3).locked = False
        .Range("Contract.Managers").Cells(2, 3).Interior.Color = RGB(255, 255, 255)
        .Range("Contract.Managers").Cells(2, 4).locked = False
        .Range("Contract.Managers").Cells(2, 4).Interior.Color = RGB(255, 255, 255)
    End With

    With Team
'        UnprotectSheet Team
        .Range("Team.Table").Cells(2, Team.Range("Team.NameColumn").Column - 2).Resize(1, 6).locked = False
        .Range("Team.Table").Cells(2, Team.Range("Team.NameColumn").Column - 2).Resize(1, 6).Interior.Color = RGB(255, 255, 255)
        .Range("Team.Table").Cells(2, Team.Range("Team.RoleColumn").Column - 2).Resize(1, 6).locked = False
        .Range("Team.Table").Cells(2, Team.Range("Team.RoleColumn").Column - 2).Resize(1, 6).Interior.Color = RGB(255, 255, 255)
    End With

    SetCustomProperty Config, "License", "F"
    'PrepareWorkbook

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config.MakeFullVersion error:"
    Resume subend
End Sub

Public Sub cmdPrepWB_Click()
'we do not prepare a workbook with KISS license and default PMCC logo
If ((sActiveLicense = "K") Or (sActiveLicense = "C")) And (Range("Config.Logo3").value = "PMCC") Then
    AppStopMsg "Prepare Workbook is not possible: you have activated a KISS license, but the selected Logo is still the default PMCC logo. Please first select the PMCC KISS or CUSTOM logo and 'format all sheets' before continuing."
    Exit Sub
End If

modApp.PrepareWorkbook
End Sub

Public Sub cmdSetHeaderColor_Click()
Dim lcolor As Long
lcolor = CLng(PickNewColor)
If lcolor <> 0 Then
    Me.Range("Config.H0").Interior.Color = lcolor
    Me.Range("Config.H2").Interior.Color = lcolor
    Me.Range("Config_Lic.H0").Interior.Color = lcolor
    Me.Range("Config_Lic.H2").Interior.Color = lcolor
End If
End Sub

Public Sub cmdDefaultSettings_Click()
Dim lcolor As Long
Dim shape As shape
bnoupdate = True
lcolor = RGB(227, 0, 27)
    Me.Range("Config.H0").Interior.Color = lcolor
    Me.Range("Config.H2").Interior.Color = lcolor
    Me.Range("Config_Lic.H0").Interior.Color = lcolor
    Me.Range("Config_Lic.H2").Interior.Color = lcolor
lcolor = RGB(166, 166, 166)
    Me.Range("Config.H3").Interior.Color = lcolor
    Me.Range("Config_Lic.H3").Interior.Color = lcolor
lcolor = RGB(255, 255, 255)
    Me.Range("Config.H0").Font.Color = lcolor
    Me.Range("Config.H2").Font.Color = lcolor
    Me.Range("Config_Lic.H0").Font.Color = lcolor
    Me.Range("Config_Lic.H2").Font.Color = lcolor
    Me.Range("Config.H3").Font.Color = lcolor
    Me.Range("Config_Lic.H3").Font.Color = lcolor
Me.Range("Config.Logo3").value = "PMCC"
Me.Range("Config.LogoIndent3").value = 10
bnoupdate = False
For Each shape In Me.Shapes
    If (shape.Name = "CUSTOM") Then
        shape.Delete
        Exit For
    End If
Next
HideLogos
If AdjustConfigLogoSize Then modShapes.PositionLogo_v3 Me
End Sub

Public Sub cmdSetSubHeaderColor_Click()
Dim lcolor As Long
lcolor = CLng(PickNewColor)
If lcolor <> 0 Then
    Me.Range("Config.H3").Interior.Color = lcolor
    Me.Range("Config_Lic.H3").Interior.Color = lcolor
End If
End Sub

Public Sub cmdSetHeaderFont_Click()
Dim lcolor As Long
lcolor = CLng(PickNewColor)
If lcolor <> 0 Then
    Me.Range("Config.H0").Font.Color = lcolor
    Me.Range("Config.H2").Font.Color = lcolor
    Me.Range("Config_Lic.H0").Font.Color = lcolor
    Me.Range("Config_Lic.H2").Font.Color = lcolor
End If
End Sub

Public Sub cmdSetSubHeaderFont_Click()
Dim lcolor As Long
lcolor = CLng(PickNewColor)
If lcolor <> 0 Then
    Me.Range("Config.H3").Font.Color = lcolor
    Me.Range("Config_Lic.H3").Font.Color = lcolor
End If
End Sub

Public Sub cmdFormat_Click()
    Dim n As Name
    Dim sht As Worksheet
    Dim c As Range
    Dim ssheet As String
    Dim shape As shape
    Dim sconfiglogo3 As String
    Dim bfound As Boolean
    
    On Error GoTo suberr
    modStack.PushCallStack "Config_Lic", "cmdFormat_Click"
    
    'some checks before proceeding
    If CInt(Me.Range("Config.LogoIndent3").value) < 0 Then
        AppStopMsg "Indent needs a value >=0. Please first correct this."
        GoTo subend
    End If
    
    modConst.bNoNormalProtectActionsRequired = True
    
    Me.Range("Config.H2").Interior.Color = Me.Range("Config.H0").Interior.Color
    
    'Format H0
    For Each n In ActiveWorkbook.Names
        If VBA.Right(n.Name, 3) = ".H0" And VBA.Left(n.Name, 7) <> "Config." Then
            'Call appCopyFont(Range("Config.H1"), n.RefersToRange)
            Call appCopyInterior(Range("Config.H1"), n.RefersToRange)
            Call appCopyAlignment(Range("Config.H1"), n.RefersToRange)
            Call appCopyFont(Range("Config.H1"), n.RefersToRange.Resize(1))
            'code below to make sure we dont have a small colored border when logo on indent=0
            With n.RefersToRange
                .Borders(xlDiagonalDown).LineStyle = xlNone
                .Borders(xlDiagonalUp).LineStyle = xlNone
                .Borders(xlEdgeLeft).LineStyle = xlNone
                .Borders(xlEdgeTop).LineStyle = xlNone
                .Borders(xlEdgeBottom).LineStyle = xlNone
                With .Borders(xlEdgeRight)
                    .LineStyle = xlContinuous
                    .Color = RGB(255, 255, 255)
                    .TintAndShade = 0
                    .Weight = xlThin
                End With
                .Borders(xlInsideVertical).LineStyle = xlNone
                .Borders(xlInsideHorizontal).LineStyle = xlNone
            End With
        End If
    Next
    
    'Format H2
    For Each n In ActiveWorkbook.Names
        If VBA.Right(n.Name, 3) = ".H2" And VBA.Left(n.Name, 7) <> "Config." Then
            Call appCopyFont(Range("Config.H2"), n.RefersToRange)
            'Call appCopyInterior(Range("Config.H1"), n.RefersToRange)
            Call appCopyAlignment(Range("Config.H2"), n.RefersToRange)
        End If
    Next
    
    'Format H3
    For Each n In ActiveWorkbook.Names
        If VBA.Right(n.Name, 3) = ".H3" And VBA.Left(n.Name, 7) <> "Config." Then
            ssheet = LCase(Left(n.Name, Len(n.Name) - 3))
            'exception for closure sheet (there we have multiple .H3 ranges...)
            If Len(ssheet) > 7 Then
                If (Left(ssheet, 7) = "closure") Then
                    ssheet = "closure"
                End If
            End If
            'exception for gantt (there we need to color entire row, except first cells in col)
            If ssheet = "gantt" Then
                Gantt.Range("Gantt.H3").EntireRow.Interior.Color = Config_Lic.Range("Config.H3").Interior.Color
                With Gantt.Range("Gantt.H3").EntireRow.Font
                    .Name = Config_Lic.Range("Config.H3").Font.Name
                    .Bold = Config_Lic.Range("Config.H3").Font.Bold
                    .Color = Config_Lic.Range("Config.H3").Font.Color
                    .Background = Config_Lic.Range("Config.H3").Font.Background
                    .FontStyle = Config_Lic.Range("Config.H3").Font.FontStyle
                    .Italic = Config_Lic.Range("Config.H3").Font.Italic
                    .Size = Config_Lic.Range("Config.H3").Font.Size
                End With
                Gantt.Range("Gantt.H3").Resize(3, 1).Interior.Color = RGB(242, 242, 242)
                Gantt.Range("Gantt.H3").Resize(3, 1).offset(0, 1).Interior.Color = RGB(255, 255, 255)
                Gantt.Range("Gantt.StartDate").Interior.Color = RGB(255, 255, 255)
                Gantt.Range("Gantt.StartDate").Font.Color = RGB(0, 0, 0)
                Gantt.Range("Gantt.StartDate").Font.Bold = False
                Gantt.Range("Gantt.StartDate").Font.Size = 9
                Gantt.Range("Gantt.StartDate").Font.Name = "Segoe UI"
                Gantt.Range("Gantt.FinishDate").Interior.Color = RGB(255, 255, 255)
                Gantt.Range("Gantt.FinishDate").Font.Color = RGB(0, 0, 0)
                Gantt.Range("Gantt.FinishDate").Font.Bold = False
                Gantt.Range("Gantt.FinishDate").Font.Size = 9
                Gantt.Range("Gantt.FinishDate").Font.Name = "Segoe UI"
            Else
                For Each sht In ThisWorkbook.Sheets
                    If LCase(sht.CodeName) = ssheet Then
                        For Each c In sht.Range(n.Name)
                            c.Interior.Color = Config_Lic.Range("Config.H3").Interior.Color
                            With c.Font
                                .Name = Config_Lic.Range("Config.H3").Font.Name
                                .Bold = Config_Lic.Range("Config.H3").Font.Bold
                                .Color = Config_Lic.Range("Config.H3").Font.Color
                                .Background = Config_Lic.Range("Config.H3").Font.Background
                                .FontStyle = Config_Lic.Range("Config.H3").Font.FontStyle
                                .Italic = Config_Lic.Range("Config.H3").Font.Italic
                                .Size = Config_Lic.Range("Config.H3").Font.Size
                            End With
                        Next
                        
                        'exception for WP: adjust color of cell bounderies
                        If ssheet = "wp" Then
                            With wp.Range("WP.HCustom")
                                .Borders(xlDiagonalDown).LineStyle = xlNone
                                .Borders(xlDiagonalUp).LineStyle = xlNone
                                .Borders(xlEdgeLeft).LineStyle = xlNone
                                With .Borders(xlEdgeTop)
                                    .LineStyle = xlContinuous
                                    .Color = Config_Lic.Range("Config.H3").Interior.Color
                                    .TintAndShade = 0
                                    .Weight = xlMedium
                                End With
                                With .Borders(xlEdgeBottom)
                                    .LineStyle = xlContinuous
                                    .Color = Config_Lic.Range("Config.H3").Interior.Color
                                    .TintAndShade = 0
                                    .Weight = xlMedium
                                End With
                                .Borders(xlEdgeRight).LineStyle = xlNone
                                .Borders(xlInsideVertical).LineStyle = xlNone
                                .Borders(xlInsideHorizontal).LineStyle = xlNone
                            End With
                        ElseIf ssheet = "statusreport" Then
                            Statusreport.Range("Status.StatusRisk").Font.Color = Statusreport.Range("Status.StatusRisk").Interior.Color
                            Statusreport.Range("Status.StatusProjectContext").Font.Color = Statusreport.Range("Status.StatusProjectContext").Interior.Color
                            Statusreport.Range("Status.StatusOrgContext").Font.Color = Statusreport.Range("Status.StatusOrgContext").Interior.Color
                        End If
                    End If
                Next
            End If
        End If
    Next
    
    'Format Bullets
    FormatEnums Contract, 10
    FormatEnums Closure
    FormatEnums Meeting
    FormatEnums Statusreport
    FormatEnums Context, 10
    FormatEnums wp
    
    'Adjust LogoSize and set logo on sheets
    If AdjustConfigLogoSize Then
        For Each sht In ThisWorkbook.Sheets
            'change and reposition the logo (when there is no H0 then nothing will happen)
            modShapes.PositionLogo_v3 sht, True
        Next
    End If
    
    'copy logo to 'template new sheet' (and remove any other logos/shapes)
    For Each shape In NewTemplateSheet.Shapes
        shape.Delete
    Next
    For Each shape In Config_Lic.Shapes
        If shape.Name = Config_Lic.Range("Config.Logo3").value Then
           shape.Copy
           NewTemplateSheet.Paste
        End If
    Next

    RACI.UpdateRACI False
    CostPlan.UpdateCostPlan False
    WorkPlan.UpdateRessPlan False
    
    Me.Select
subend:
    modConst.bNoNormalProtectActionsRequired = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config_Lic.cmdFormat_Click error:"
    Resume subend

End Sub

Private Sub FormatEnums(sht As Worksheet, Optional icol2 As Integer = 0)
    On Error GoTo suberr
    modStack.PushCallStack "Config_Lic", "FormatEnums"
Dim i As Integer
Dim lcolor As Long
'if headerbck is white then darkgray for enum
'otherwise headerbck color for enum
If Range("Config.H1").Interior.Color = RGB(255, 255, 255) Then
    lcolor = Range("Config.H1").Font.Color
Else
    lcolor = Range("Config.H1").Interior.Color
End If
'by default only go through C column
For i = 5 To 300
    If (sht.Cells(i, 3).FormulaR1C1 = "=IF(RC[1]<>"""",""|fffd|"","""")") Or _
        (sht.Cells(i, 3).FormulaR1C1 = "=IF(RC[2]<>"""",""|fffd|"","""")") Then
        sht.Cells(i, 3).Font.Color = lcolor
    End If
Next
'if additional column update wanted
If icol2 > 0 Then
For i = 5 To 300
    If (sht.Cells(i, icol2).FormulaR1C1 = "=IF(RC[1]<>"""",""|fffd|"","""")") Or _
        (sht.Cells(i, icol2).FormulaR1C1 = "=IF(RC[2]<>"""",""|fffd|"","""")") Then
        sht.Cells(i, icol2).Font.Color = lcolor
    End If
Next
End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config_Lic.FormatEnums error:"
    Resume subend
End Sub

Public Sub cmdImportPicture_Click()
    Dim sname As Variant
    Dim dAspectRatio As Double
    Dim s As String
    Dim shape As shape
    
    On Error GoTo suberr
    modStack.PushCallStack "Config_Lic", "cmdImportPicture_Click"
    
    On Error GoTo suberr
    
    sname = LCase(Application.GetOpenFilename("All Files (*.*),*.*, Bitmaps (*.bmp),*.bmp, GIF Images (*.gif),(*.gif), JPEG Images (*.jpg),(*.jpg)"))
    If TypeName(ActiveSheet) <> "Worksheet" Then GoTo subend
    If sname <> False Then
        
        If Right(sname, 3) = "bmp" Or Right(sname, 3) = "gif" Or Right(sname, 3) = "jpg" Or Right(sname, 3) = "png" Then
            'first delete any custom logo present on the sheet
            For Each shape In Me.Shapes
                If (shape.Name = "CUSTOM") Then
                    shape.Delete
                    Exit For
                End If
            Next
            
            'for 2007 we need to unprotect
            If Application.Version = "12.0" Then UnprotectSheet Me
            
            s = "CUSTOM"
            Me.Shapes.AddPicture(sname, False, True, Config_Lic.Range("Config_Lic.LogoSpace").Left + 5, Config_Lic.Range("Config_Lic.LogoSpace").Top + 5, -1, -1).Name = s
            bnoupdate = True
            Me.Range("Config.Logo3").value = s
            HideLogos
            If AdjustConfigLogoSize Then modShapes.PositionLogo_v3 Me
            bnoupdate = False
        End If
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config_Lic.cmdImportPicture_Click error:"
    Resume subend
End Sub

Public Sub cmdSetLicense_Click()
Dim c As Range
Dim s As String
Dim smod As String

'first check some input for correctness
If (Me.Range("Config.License").value = "KISS") Or (Me.Range("Config.License").value = "Manager") Then
    If Me.Range("Config_Lic.ManName").value = "" Then
        AppStopMsg "Please first enter a name for the project manager"
        Exit Sub
    End If
ElseIf Me.Range("Config.License").value = "Project" Then
    If Me.Range("Config_Lic.PrjName").value = "" Then
        AppStopMsg "Please first enter a name for the project"
        Exit Sub
    End If
End If

'set modules
'remark: in order to add modules:
' > insert row in modules block (keep config_lic.modules range correct
' > add Module... name in Col A (font color white)
' > add clean name in Col B
For Each c In Me.Range("Config_Lic.Modules")
        If c.value = "x" Then
            If Not CBool2(GetCustomProperty(Config, c.offset(0, -2).value)) Then
                SetCustomProperty Config, c.offset(0, -2).value, "True"
                'when activating MTA: update contentssheet and admin sheet (to set module active)
                If c.offset(0, -2).value = "ModuleMTAServer" Then
                    contents.EnableMTASheets
                    Admin.Range("Admin.Methods.MTA").EntireRow.Hidden = False
                    Me.Select
                'same for CRF (change request)
                ElseIf c.offset(0, -2).value = "ModuleCRF" Then
                    contents.EnableCRFSheets
                    Admin.Range("Admin.Methods.CRF").EntireRow.Hidden = False
                    Me.Select
                End If
                'when activating program module we need to make sure 'programm' is available in admin.complexity
                If c.offset(0, -2).value = "ModuleSubProjectImport" Then
                    AddProgramToComplexity
                End If
            End If
        Else
            If CBool2(GetCustomProperty(Config, c.offset(0, -2).value)) Then
                SetCustomProperty Config, c.offset(0, -2).value, "False"
                If c.offset(0, -2).value = "ModuleMTAServer" Then
                    contents.DisableMTASheets
                    Admin.Range("Admin.Methods.MTA").EntireRow.Hidden = True
                    Me.Select
                'same for CRF (change request)
                ElseIf c.offset(0, -2).value = "ModuleCRF" Then
                    contents.DisableCRFSheets
                    Admin.Range("Admin.Methods.CRF").EntireRow.Hidden = True
                    Me.Select
                End If
            End If
        End If
Next

'set license (we can only change license when we start from a full license)
If GetCurrentLicense = "Full" Then
    Select Case Me.Range("Config.License").value
        Case "Project"
            MakeProjectVersion
        Case "Manager"
            MakeManagerVersion
        Case "KISS"
            MakeKISSVersion
        Case "KISS Corporate"
            MakeKISSCorporateVersion
    End Select
    'if the new license is not full we block this input field because we can not change anymore
    If Me.Range("Config.License").value <> "Full" Then
        Me.Range("Config.License").Interior.Color = RGB(242, 242, 242)
        Me.Range("Config.License").locked = True
        Me.Range("Config_Lic.ManName").Interior.Color = RGB(242, 242, 242)
        Me.Range("Config_Lic.ManName").locked = True
        Me.Range("Config_Lic.PrjName").Interior.Color = RGB(242, 242, 242)
        Me.Range("Config_Lic.PrjName").locked = True
    End If
End If

'update 'activelicense'
Me.Range("Config_Lic.ActiveLicense").value = GetCurrentLicense
sActiveLicense = pStrVersion

'set demo
If Me.Range("Config_Lic.D").value = "NO" Then
    SetCustomProperty Config_Lic, "Demo", "NO"
Else
    SetCustomProperty Config_Lic, "Demo", "YES"
End If

'update 'activemodules' on this sheet with listing of active modules
'sure it could have been simpler, but this way we check what is truely stored in the custom properties.... that's why.
For Each c In Me.Range("Config_Lic.Modules")
    s = GetCustomProperty(Config, c.offset(0, -2).value)
    If CBool2(s) Then
        If smod <> "" Then smod = smod + ", "
        smod = smod + LCase(c.offset(0, -1).value)
    End If
Next
If smod = "" Then smod = "NO ACTIVE MODULES"
Me.Range("Config_Lic.ActiveModules").value = smod

End Sub

Private Sub AddProgramToComplexity()
Dim c As Range
Dim bfound As Boolean
Dim bfirstemptyrow As Integer
For Each c In Admin.Range("Admin.Complexity").offset(1, 0)
    If (c.value = "") And (bfirstemptyrow = 0) Then bfirstemptyrow = c.row
    If (LCase(c.value) = "programm") Or (LCase(c.value) = "program") Then
        bfound = True
        Exit For
    End If
Next
If Not bfound Then
    Admin.Cells(bfirstemptyrow, Admin.Range("Admin.Complexity").Column).value = "Programm"
End If
End Sub

Attribute VB_Name = "Contents"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public noupdate As Boolean

Private Sub Worksheet_Activate()
    On Error GoTo suberr
    modStack.PushCallStack "Contents", "Worksheet_Activate"

    If ModuleExists("MSPImport") Then
        contents.Columns(9).Hidden = False
        contents.Columns(10).Hidden = False
        contents.Columns(11).Hidden = False
        contents.Columns(12).Hidden = False
'        Me.Shapes("cmdPublish").visible = msoTrue
'        Me.Shapes("ddlFormatOrder").visible = msoTrue
    Else
        contents.Columns(9).Hidden = True
        contents.Columns(10).Hidden = True
        contents.Columns(11).Hidden = True
        contents.Columns(12).Hidden = True
'        Me.Shapes("cmdPublish").visible = msoFalse
'        Me.Shapes("ddlFormatOrder").visible = msoFalse
    End If
    
'    If ModuleExists("CustomSheets") Then
'        Me.Shapes("cmdInsertSheet").visible = msoTrue
'        Me.Shapes("cmdDeleteSheet").visible = msoTrue
'    Else
'        Me.Shapes("cmdInsertSheet").visible = msoFalse
'        Me.Shapes("cmdDeleteSheet").visible = msoFalse
'    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.Worksheet_Activate error:"
    Resume subend
End Sub

Private Function AssertExcelVersion() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "AssertExcelVersion"

    If Application.Version = "12.0" Or Application.Version = "14.0" Or Application.Version = "15.0" Or Application.Version = "16.0" Then
        AssertExcelVersion = True
    Else
        AppInfoMsg appGetLOCText("msgPDFExportNotSupported")
        AssertExcelVersion = False
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Cover.AssertExcelVersion error:"
    Resume subend
End Function

Public Sub cmdExportPDF_Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "Contents", "cmdExportPDF_Click"
    Application.EnableEvents = False
    modStack.DeactivateProcedure "modShapes.SetLogos"
    
    If Not AssertExcelVersion Then GoTo subend
    
    Dim i As Integer
    Dim R As Range
    Dim s As String
    Dim A As Variant
    
    i = 0
    For Each R In contents.Range("Contents.Print").Cells
        If R.value = "x" Then
            s = s & R.offset(0, -3).value & "|"
            i = i + 1
        End If
    Next
    If s <> "" Then s = VBA.Left(s, VBA.Len(s) - 1)
    A = VBA.Split(s, "|")
        
    On Error GoTo AuswahlError
    'modApp.UnprotectWorkbook "pmccTPG:-)"
'    ProtectSheet Cover
    ThisWorkbook.Sheets(A).Select
    Sheets(A(0)).Activate
    
    
    
    ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, FileName:= _
        GetNextFileName() _
        , Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas _
        :=False, OpenAfterPublish:=True
'    ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, FileName:= _
'        ActiveWorkbook.FullName & ".pdf" _
'        , Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas _
'        :=False, OpenAfterPublish:=True
'    contents.Select
    Me.Select

'    Application.OnTime Now + TimeSerial(0, 0, 4), "modShapes.RearrangeControls"
    'modApp.UnprotectWorkbook "pmccTPG:-)"
'    Sheets(a(0)).ExportAsFixedFormat Type:=xlTypePDF, fileName:= _
'        ActiveWorkbook.FullName & ".pdf" _
'        , Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas _
'        :=False, OpenAfterPublish:=True
'    modApp.ProtectWorkbook
    
    
subend:
    Application.EnableEvents = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.cmdExportPDF_Click error:"
    Resume subend
AuswahlError:
    AppInfoMsg appGetLOCText("nosheetselected")
    Resume subend
End Sub

'added to avoid overwriting files
Public Function GetNextFileName() As String
    Dim file As String
    Dim max As Integer, newMax As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Contents", "GetNextFileName"
    
    max = 0
    file = Dir(ActiveWorkbook.FullName & "*.pdf")
    While (file <> "")
        
        file = Replace(file, ActiveWorkbook.Name, "")
        file = Replace(file, ".pdf", "")
        file = Replace(file, "(", "")
        file = Replace(file, ")", "")
            
        If file = "" Then
            newMax = 1
        Else
            newMax = CInt(file) + 1
        End If
        
        If max < newMax Then
            max = newMax
        End If
        
        file = Dir
    Wend
    
    If max = 0 Then
        GetNextFileName = ActiveWorkbook.FullName & ".pdf"
    Else
        GetNextFileName = ActiveWorkbook.FullName & "(" & max & ")" & ".pdf"
    End If
    
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contents.GetNextFileName error:"
    Resume subend
End Function

Public Sub cmdPrint_Click()
    Dim i As Integer
    Dim R As Range
    Dim s As String
    Dim A As Variant

    On Error GoTo suberr
    modStack.PushCallStack "Contents", "cmdPrint_Click"
    Application.EnableEvents = False
    modStack.DeactivateProcedure "modShapes.SetLogos"
    i = 0
    For Each R In contents.Range("Contents.Print").Cells
        If R.value = "x" Then
            s = s & R.offset(0, -3).value & "|"
            i = i + 1
        End If
    Next
    If s <> "" Then s = VBA.Left(s, VBA.Len(s) - 1)
    A = VBA.Split(s, "|")
        
    On Error GoTo AuswahlError
    ThisWorkbook.Sheets(A).Select
    Sheets(A(0)).Activate
    ActiveWindow.SelectedSheets.PrintPreview
    Me.Select 'Sheets(a(0)).Select

subend:
    Application.EnableEvents = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.cmdPrint_Click error:"
    Resume subend
AuswahlError:
    AppInfoMsg appGetLOCText("nosheetselected")
    Resume subend
End Sub



Public Sub cmdPublish_Click()
    Dim rCell As Range
    
    
    On Error GoTo suberr
    modStack.PushCallStack "Contents", "cmdPublish_Click"
    modStack.DeactivateProcedure "modShapes.SetLogos"
    
    For Each rCell In Range("Contents.Publish").Cells
        If rCell.value = "x" Then
            modSQL.PublishToSharepoint ThisWorkbook.Sheets(rCell.offset(0, -4).value), _
                                                           rCell.offset(0, 1).value, _
                                                           rCell.offset(0, 2).value, _
                                                           rCell.offset(0, 3).value
        End If
    Next
    
    
'    If s <> "" Then s = VBA.Left(s, VBA.Len(s) - 1)
'    a = VBA.Split(s, "|")
'
'    On Error GoTo AuswahlError
'    ThisWorkbook.Sheets(a).Select
'    Sheets(a(0)).Activate
'    ActiveWindow.SelectedSheets.PrintPreview
'    Sheets(a(0)).Select
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.cmdPublish_Click error:"
    Resume subend
AuswahlError:
    AppInfoMsg appGetLOCText("nosheetselected")
    Resume subend
End Sub


Private Function GetTable() As TPGTable
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Contents", "GetTable"

    Set t = New TPGTable
    t.SetTable Me.Range("Contents.Links.Table"), True, False, TemplateBeforeHeader, 5
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contents.GetTable error:"
    Resume subend
End Function

Private Function GetCols() As Collection
    Dim cols As New Collection
        
    On Error GoTo suberr
    modStack.PushCallStack "Contents", "GetCols"
    
    cols.Add GetTPGColumn("linkname", 1)
    cols.Add GetTPGColumn("linkurl", 2, urlcolumn)
    Set GetCols = cols
    
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "GetCols error:"
    Resume subend
End Function

Public Sub cmdMoveEntryUp_Click()
    Dim t As TPGTable
    Dim sheetToBeMoved As String
    Dim sheetStatic As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Contents", "cmdMoveEntryUp_Click"
    modConst.bNoNormalProtectActionsRequired = True
    
    Set t = GetMethodsTable
    If t.IsInTable(ActiveCell) Then
        If ActiveCell.row > t.firstrow() Then
            noupdate = True
            sheetToBeMoved = ActiveCell.Worksheet.Cells(ActiveCell.row, 5)
            sheetStatic = ActiveCell.Worksheet.Cells(ActiveCell.row - 1, 5)
            'move the table entry
            
            ActiveCell.Worksheet.Cells(ActiveCell.row, 1).EntireRow.Copy
            'ActiveCell.Worksheet.Cells(ActiveCell.Row - 1, 1).EntireRow.Insert copyOrigin:=xlFormatFromLeftOrAbove
            CellFunctions.InsertWrapped ActiveCell.Worksheet.Cells(ActiveCell.row - 1, 1).EntireRow
            ActiveCell.Worksheet.Cells(ActiveCell.row + 1, 1).EntireRow.Delete
            Cells(ActiveCell.row - 1, ActiveCell.Column).Select
            'move the corresponding sheet
'            modApp.UnprotectWorkbook "pmccTPG:-)"
            modApp.SetWBProtection False
            Sheets(sheetToBeMoved).Move Before:=Sheets(sheetStatic)
            Sheets(appGetLOCText("ContentsSheet")).Select
'            modApp.ProtectWorkbook
            noupdate = False
        End If
    End If
    
subend:
    bNoNormalProtectActionsRequired = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.cmdMoveEntryUp_Click error:"
    Resume subend
End Sub


Public Sub cmdMoveEntryDown_Click()
    Dim t As TPGTable
    Dim sheetToBeMoved As String
    Dim sheetStatic As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Contents", "cmdMoveEntryDown_Click"
    modConst.bNoNormalProtectActionsRequired = True
    
    Set t = GetMethodsTable
    If t.IsInTable(ActiveCell) Then
        If ActiveCell.row < t.lastrow() Then
            noupdate = True
            sheetToBeMoved = ActiveCell.Worksheet.Cells(ActiveCell.row, 5)
            sheetStatic = ActiveCell.Worksheet.Cells(ActiveCell.row + 1, 5)
            'move the table entry
            
            ActiveCell.Worksheet.Cells(ActiveCell.row, 1).EntireRow.Copy
            'ActiveCell.Worksheet.Cells(ActiveCell.Row + 2, 1).EntireRow.Insert copyOrigin:=xlFormatFromLeftOrAbove
            CellFunctions.InsertWrapped ActiveCell.Worksheet.Cells(ActiveCell.row + 2, 1).EntireRow
            ActiveCell.Worksheet.Cells(ActiveCell.row, 1).EntireRow.Delete
            Cells(ActiveCell.row + 1, ActiveCell.Column).Select
            'move the corresponding sheet
            modApp.SetWBProtection False
            Sheets(sheetToBeMoved).Move After:=Sheets(sheetStatic)
            Sheets(appGetLOCText("ContentsSheet")).Select
            noupdate = False
        End If
    End If
subend:
    modConst.bNoNormalProtectActionsRequired = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "cmdMoveEntryDown_Click error:"
    Resume subend
End Sub


Private Function GetMethodsTable() As TPGTable
    Dim t As TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contents", "GetMethodsTable"
    
    Set t = New TPGTable
    t.SetTable Me.Range("Contents.Methods.Table"), True, False, TemplateBeforeHeader, 5
    Set GetMethodsTable = t
    
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "GetMethodsTable error:"
    Resume subend
End Function

Public Sub cmdInsert_Click()

    On Error GoTo suberr
    modStack.PushCallStack "Contents", "cmdInsert_Click"
    
    GetTable.InsertRow_Clicked ActiveCell
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()

    On Error GoTo suberr
    modStack.PushCallStack "Contents", "cmdDelete_Click"
    
    GetTable.DeleteRow_Clicked ActiveCell
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "cmdDelete_Click error:"
    Resume subend
End Sub



'wird nicht ausgel|fffd|st, wenn Blatt gesch|fffd|tzt und Dropdown
'Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
'    Dim r As Range
'
'    On Error GoTo SubErr
'    Set r = Application.Intersect(Target, Range("Contents.Print"))
'    If Not r Is Nothing Then
'        If r.Value = "X" Then
'            r.Value = "-"
'        ElseIf r.Value = "-" Then
'            r.Value = "X"
'        End If
'    End If
'
'subEnd:
'   Exit Sub
'SubErr:
'    AppErrMsg "Contents.Worksheet_BeforeDoubleClick error:"
'    Resume subEnd
'End Sub


'change selection and print vice versa
Public Sub cmdInsertSheet()
    Dim sSheetName As String
    Dim oWorkSheet As Worksheet
    Dim iCurrentRow As Integer
    Dim iHeaderRow As Integer
    Dim iSheetRow As Integer
    Dim i As Integer
    Dim rprintarea As Range
    'added to get runtime codename of new sheet
    Dim sCodeName As String

    On Error Resume Next
    modStack.PushCallStack "Contents", "cmdInsertSheet_Click"

    If Not InRange(ActiveCell, GetMethodsTable.ValuesRange) Then GoTo subend
    sSheetName = UCase(InputBox(appGetLOCText("msgInputSheetName")))
    If sSheetName = "" Then GoTo subend
    ValidateSheetName sSheetName
    
    For Each oWorkSheet In ThisWorkbook.Worksheets
        If oWorkSheet.Name = sSheetName Then
            AppInfoMsg appGetLOCText("msgInvalidSheetName")
            GoTo subend
        End If
    Next
    
    'contents.noupdate = True
    Application.EnableEvents = False
    modApp.SetWBProtection False
    
    iCurrentRow = ActiveCell.row
    'i = ThisWorkbook.Worksheets(contents.Cells(iCurrentRow + 1, 4).Value).Index - 1
    
    'modified code so there will be codename at runtime
    SetVisibility ThisWorkbook.Worksheets("TEMPLATE NEW SHEET"), xlSheetVisible
    ThisWorkbook.Worksheets("TEMPLATE NEW SHEET").Copy Before:=ThisWorkbook.Worksheets(contents.Cells(iCurrentRow, 5).value)
    Set oWorkSheet = ThisWorkbook.Worksheets("TEMPLATE NEW SHEET (2)")
    SetVisibility ThisWorkbook.Worksheets("TEMPLATE NEW SHEET"), xlSheetVeryHidden

    sCodeName = oWorkSheet.CodeName
        
    oWorkSheet.Name = sSheetName
    SetCustomProperty oWorkSheet, "SheetType", "Custom"
    SetCustomProperty oWorkSheet, "SheetName", sSheetName
    SetCustomProperty oWorkSheet, "KeepUnprotected", "True"
    SetCustomProperty oWorkSheet, "IsConfigSheet", "False"
    SetCustomProperty oWorkSheet, "SheetScrollTop", "False"
    
    Dim iCols As Integer: iCols = Admin.Range("Admin.NewWSCols").value + 3 '2
    Dim irows As Integer: irows = Admin.Range("Admin.NewWSRows").value + 6 '5
    
    oWorkSheet.Cells.Font.Name = "Segoe UI"
    oWorkSheet.Cells.Interior.Color = RGB(242, 242, 242)

    oWorkSheet.rows(1).EntireRow.RowHeight = 10
    oWorkSheet.rows(2).EntireRow.RowHeight = 10
    oWorkSheet.rows(3).EntireRow.RowHeight = 43
    oWorkSheet.rows(4).EntireRow.RowHeight = 31
    oWorkSheet.rows(5).EntireRow.RowHeight = 7
    oWorkSheet.rows(irows).EntireRow.RowHeight = 10 '3.75
    
    oWorkSheet.Columns(1).EntireColumn.ColumnWidth = 1
    oWorkSheet.Columns(2).EntireColumn.ColumnWidth = 1
    oWorkSheet.Columns(iCols).EntireColumn.ColumnWidth = 1

    Set rprintarea = oWorkSheet.Range(oWorkSheet.Cells(2, 2), oWorkSheet.Cells(irows, iCols))
    With rprintarea
        .Interior.Pattern = xlNone
        .BorderAround xlContinuous, , 1
        .BorderAround xlContinuous, xlThin
        .Borders(xlEdgeBottom).Color = RGB(166, 166, 166)
        .Borders(xlEdgeTop).Color = RGB(166, 166, 166)
        .Borders(xlEdgeLeft).Color = RGB(166, 166, 166)
        .Borders(xlEdgeRight).Color = RGB(166, 166, 166)
    End With

    contents.Range(contents.Cells(3, 3), contents.Cells(4, 3)).Copy
    oWorkSheet.Cells(3, 3).Select
    oWorkSheet.Paste
    oWorkSheet.Cells(3, 3).value = sSheetName
    
    contents.Range(contents.Cells(3, 4), contents.Cells(4, 4)).Copy
    For i = 4 To iCols - 1
        oWorkSheet.Cells(3, i).Select
        oWorkSheet.Paste
    Next
    oWorkSheet.Cells(4, 3).formula = contents.Range("Contents.H2").Resize(1, 1).formula
    
    oWorkSheet.Cells(5, 1).Select
    ActiveWindow.FreezePanes = True
    ActiveWindow.DisplayHeadings = False
    'ActiveWindow.DisplayGridlines = False
 
    Dim rH1 As Range: Set rH1 = oWorkSheet.Range(oWorkSheet.Cells(3, 3), oWorkSheet.Cells(4, iCols - 1))
    
    'runtime sheet name and code name are the same
    ThisWorkbook.Names.Add sCodeName & ".H0", "=" & oWorkSheet.Name & "!" & rH1.Address
    modShapes.PositionLogo_v3 oWorkSheet
    
    'pagesetup
    Application.PrintCommunication = False
    oWorkSheet.PageSetup.PrintArea = rprintarea.Address
    oWorkSheet.PageSetup.FitToPagesWide = 1
    oWorkSheet.PageSetup.FitToPagesTall = 1
    Application.PrintCommunication = True
    
    'remove tabcolor
    oWorkSheet.Tab.ColorIndex = xlAutomatic
    oWorkSheet.Tab.TintAndShade = 0
    
    'update contents
    contents.Activate
    GetMethodsTable.InsertRow_Clicked ActiveCell
    contents.Cells(iCurrentRow, contents.Range("Contents.Sheets").Column).value = oWorkSheet.CodeName
    contents.Cells(iCurrentRow, 3).Font.Size = 9
    contents.Cells(iCurrentRow, 4).value = sSheetName
    contents.Cells(iCurrentRow, 4).locked = True
    contents.Cells(iCurrentRow, 5).value = sSheetName
    contents.Cells(iCurrentRow, 5).locked = True
    contents.Cells(iCurrentRow, 5).Hyperlinks(1).SubAddress = oWorkSheet.Name & "!A1"
    contents.Cells(iCurrentRow, 6).formula = Config.Range("CONFIG.FORMULA.VLOOKUP").formula
    contents.Cells(iCurrentRow, 6).locked = True
    contents.Cells(iCurrentRow, 6).Interior.Color = RGB(242, 242, 242)
    contents.Cells(iCurrentRow, 7).value = "x"
    contents.Cells(iCurrentRow, 7).locked = True
    contents.Cells(iCurrentRow, 7).Interior.Color = RGB(242, 242, 242)
    contents.Cells(iCurrentRow, 8).value = "-"
    contents.Cells(iCurrentRow, 8).locked = False
subend:

    Application.EnableEvents = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.cmdInsertSheet_Click error:"
    Resume subend
End Sub

Public Sub cmdDeleteSheet()
    
    Dim sht As Worksheet
    Dim rCell As Range
    
    On Error Resume Next
    modStack.PushCallStack "Contents", "cmdDeleteSheet_Click"

    If Not InRange(ActiveCell, GetMethodsTable.ValuesRange) Then GoTo subend
    If contents.Cells(ActiveCell.row, contents.Range("Contents.Sheets").Column).value <> "" Then
        For Each sht In ThisWorkbook.Worksheets
            If sht.CodeName = contents.Cells(ActiveCell.row, contents.Range("Contents.Sheets").Column).value Then Exit For
        Next
    Else
        For Each sht In ThisWorkbook.Worksheets
            If sht.Name = contents.Cells(ActiveCell.row, 4).value Then Exit For
        Next
    End If
    
    If Not sht Is Nothing Then
        If Not GetCustomProperty(sht, "SheetType") = "Custom" Then
            AppInfoMsg (appGetLOCText("msgNoCustomSheet"))
            GoTo subend
        End If
        
        Application.EnableEvents = False
        If Not GetMethodsTable.DeleteRow_Clicked(ActiveCell) Then GoTo subend
    
        Application.DisplayAlerts = False
        modApp.SetWBProtection False
       ' On Error Resume Next
        ThisWorkbook.Names(sht.CodeName & ".H0").Delete
        sht.Delete
    End If

subend:
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.cmdDeleteSheet_Click error:"
    Resume subend
End Sub

Private Sub ValidateSheetName(ByRef SheetName As String)
    Dim A$, B$, c$, i As Integer
    A$ = SheetName
    For i = 1 To Len(A$)
        B$ = Mid(A$, i, 1)
        If B$ Like "[A-Z,a-z]" Then
            c$ = c$ & B$
        End If
    Next i
    SheetName = c$
End Sub
    
Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
'09096 only rightclick in first col., in second col hyperlink input allowd
If (InRange(Target, GetTable.ValuesRange.Resize(, 1))) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext False, False
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim s As String
    Dim R As Range
    Dim bprotect As Boolean
    
    If noupdate Then Exit Sub
    
    On Error GoTo suberr
    
    modStack.PushCallStack "Contents", "Worksheet_Change"

    s = "Contents.Selection"
    Set R = Application.Intersect(Target, Range(s))
    If Not R Is Nothing Then
        If R.value = "-" Then
            '131015
            'UnprotectWorkbook "pmccTPG:-)"
            If ThisWorkbook.ProtectStructure Then
                SetWBProtection False
                bprotect = True
            End If
            SetVisibility Sheets(R.offset(0, -2).value), xlSheetHidden
            '131015
            'ProtectWorkbook
            
            With R.offset(0, 1)
                .value = "-"
                .Interior.Color = RGB(242, 242, 242)
                .locked = True
            End With
        Else
            '131015
            'UnprotectWorkbook "pmccTPG:-)"
            If ThisWorkbook.ProtectStructure Then
                SetWBProtection False
                bprotect = True
            End If
'                Sheets(r.Offset(0, -2).value).Visible = -1
            Sheets(R.offset(0, -2).value).visible = xlSheetVisible
            '131015 ProtectWorkbook
            With R.offset(0, 1)
                .value = "x"
                .Interior.Color = RGB(255, 255, 255)
                .locked = False
            End With
        End If
        '131015
        If bprotect Then SetWBProtection True
    End If
    s = "Contents.Links.Table"
    Set R = Application.Intersect(Target, Range(s).offset(1, 2).Resize(, 1))
    If Not R Is Nothing Then
        On Error Resume Next
        Target.Font.Name = "Segoe UI"
        Target.Font.Size = 9
        Set R = Nothing
        'reset formatting
        If Target.value = "" Then
            Target.Font.Color = RGB(0, 0, 0)
            Target.Font.Underline = False
        End If
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.Worksheet_Change error:"
    Resume subend
End Sub

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "Contents", "CreateXml"
    
    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    AddNode xmlDom, n, "sharepointdata", Config.SerializeRange(contents.Range("Contents.SharePointData"))
    
    
'    Set cols = New Collection
'    cols.add GetTPGColumn("name", 1)
'    cols.add GetTPGColumn("selection", 4)
'    cols.add GetTPGColumn("print", 5)
'    n.appendChild GetNodeFromTable(xmlDom, "methods", "method", GetRange(Me, "Contents.Methods.Table", -2, -2, 1, 1), cols)
    
    n.appendchild GetNodeFromTable(xmlDom, "links", "link", GetTable.ValuesRange, GetCols)
    
    
    Set CreateXml = n
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant)
Dim c As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Contents", "ImportXml"
    
    If Not Node Is Nothing Then
        
        reset
        ImportTableValues GetTable, Node, "links/link", GetCols
        
        If Not Node.SelectSingleNode("sharepointdata") Is Nothing Then
            Config.DeSerializeRange Node.SelectSingleNode("sharepointdata").Text, contents.Range("Contents.SharePointData")
        End If
        
        'correct font of importet urls in links table
        On Error Resume Next
        For Each c In Me.Range("Contents.Links.Table").offset(1, 2).Resize(Me.Range("Contents.Links.Table").rows.Count - 2, 1)
            If c.value <> "" Then
                c.Font.Name = "Segoe UI"
                c.Font.Size = 9
            End If
        Next
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
Dim c As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Contents", "reset"
    
    noupdate = True
    GetTable.clear
    'reset formatting in table
    For Each c In GetTable.ValuesRange
        c.MergeArea.Font.Color = RGB(0, 0, 0)
        c.MergeArea.Font.Underline = False
    Next
    contents.Range("Contents.SharePointData").ClearContents
    Me.Calculate
    modApp.SetContentsSheet
    noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "reset error:"
    Resume subend
End Sub

Public Sub EnableMTASheets()

    Dim iCurrentRow As Integer
    Dim s1 As String
    Dim s2 As String
    Dim bMTAalreadyactive
    Dim c As Range
    
    'first check whether module is already active
    For Each c In contents.Range("Contents.Sheets")
        If c.value = MTA.CodeName Then
            bMTAalreadyactive = True
            Exit For
        End If
    Next
    If bMTAalreadyactive Then
        Exit Sub
    End If
    
    On Error Resume Next
    modStack.PushCallStack "Contents", "EnableMTASheets"
    noupdate = True
    iCurrentRow = Me.Range("Contents.InsertRow").row
    SetWBProtection False
    MTA.Move Before:=Admin
    Me.Range("Contents.MTARow").EntireRow.Copy
    Me.Range("Contents.InsertRow").Insert
    Me.rows(Me.Range("Contents.InsertRow").row - 1).EntireRow.Hidden = False

subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.EnableMTASheets error:"
    Resume subend
End Sub

Public Sub DisableMTASheets()
    
    Dim rCell As Range
    Dim c As Variant
    Dim irowchangereq As Integer
    Dim irowchangecat As Integer
    
    'first see whether module is already inactive
    For Each c In contents.Range("Contents.Sheets")
        If c.value = MTA.CodeName Then
            irowchangereq = c.row
            Exit For
        End If
    Next
    
    If irowchangereq = 0 Then Exit Sub
    
    On Error Resume Next
    modStack.PushCallStack "Contents", "DisableMTASheets"
    noupdate = True
    If irowchangereq > 0 Then
        GetMethodsTable.DeleteRow Me.Cells(irowchangereq, 3)
    End If

subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.DisableMTASheets error:"
    Resume subend
End Sub

Public Sub EnableCRFSheets()

    Dim iCurrentRow As Integer
    Dim s1 As String
    Dim s2 As String
    Dim bCRFalreadyactive
    Dim c As Range
    
    'first check whether module is already active
    For Each c In contents.Range("Contents.Sheets")
        If c.value = ChangeRequest.CodeName Then
            bCRFalreadyactive = True
            Exit For
        End If
    Next
    If bCRFalreadyactive Then
        Exit Sub
    End If
    
    On Error Resume Next
    modStack.PushCallStack "Contents", "EnableCRFSheets"
    noupdate = True
    SetWBProtection False
        
    iCurrentRow = Me.Range("Contents.InsertRow").row
    ChangeRequest.Move Before:=Admin
    Me.Range("Contents.CRRow").EntireRow.Copy
    Me.Range("Contents.InsertRow").Insert
    Me.rows(Me.Range("Contents.InsertRow").row - 1).EntireRow.Hidden = False

    iCurrentRow = Me.Range("Contents.InsertRow").row
    ChangeRequestList.Move Before:=Admin
    Me.Range("Contents.CRLRow").EntireRow.Copy
    Me.Range("Contents.InsertRow").Insert
    Me.rows(Me.Range("Contents.InsertRow").row - 1).EntireRow.Hidden = False

subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.EnableCRFSheets error:"
    Resume subend
End Sub

Public Sub DisableCRFSheets()
    
    Dim rCell As Range
    Dim c As Variant
    Dim irowchangereq As Integer
    Dim irowchangecat As Integer
    
    On Error Resume Next
    modStack.PushCallStack "Contents", "DisableMTASheets"
    
    'delete CR row if present
    For Each c In contents.Range("Contents.Sheets")
        If c.value = ChangeRequest.CodeName Then
            irowchangereq = c.row
            Exit For
        End If
    Next
    If irowchangereq = 0 Then
        GoTo ChangeRequestList
    Else
        noupdate = True
        GetMethodsTable.DeleteRow Me.Cells(irowchangereq, 3)
    End If
    
ChangeRequestList:
    'delete CR row if present
    For Each c In contents.Range("Contents.Sheets")
        If c.value = ChangeRequestList.CodeName Then
            irowchangecat = c.row
            Exit For
        End If
    Next
    If irowchangecat > 0 Then
        noupdate = True
        GetMethodsTable.DeleteRow Me.Cells(irowchangecat, 3)
    End If

subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contents.DisableCRFSheets error:"
    Resume subend
End Sub

Attribute VB_Name = "Context"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public noupdate As Boolean


Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (InRange(Target, GetTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext False, False
ElseIf (InRange(Target, GetPreTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext False, False
ElseIf (InRange(Target, GetPastTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext False, False
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    
    On Error GoTo suberr
    modStack.PushCallStack "Context", "Worksheet_Change"
    
    If Not noupdate Then
        
        
        If GetPreTable.Mergedfit(Target) Then GoTo FitEnd
        If GetPastTable.Mergedfit(Target) Then GoTo FitEnd
        If GetTable.Mergedfit(Target) Then GoTo FitEnd
        
FitEnd:
        
    End If
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context.Worksheet_Change error:"
    Resume subend
End Sub

Private Function GetTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Context", "GetTable"
    
    t.SetTable Me.Range("Context.Projects.List"), True, False, TemplateFirstrow, 5, , 14
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Context.GetTable error:"
    Resume subend
End Function

Private Function GetPreTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Context", "GetPreTable"

    t.SetTable Me.Range("Context.Pre.List"), True, False, TemplateBeforeHeader, 7, Me.Range("Context.Past.List")
    Set GetPreTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Context.GetPreTable error:"
    Resume subend
End Function

Private Function GetPastTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Context", "GetPastTable"

    t.SetTable Me.Range("Context.Past.List"), True, False, TemplateBeforeHeader, 7, Me.Range("Context.Pre.List")
    Set GetPastTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Context.GetPastTable error:"
    Resume subend
End Function

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Context", "cmdInsert_Click"
    If IsDemoVersion Then GoTo subend
    Me.noupdate = True
    If GetTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetPreTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetPastTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Context", "cmdDelete_Click"

    If IsDemoVersion Then GoTo subend
    
    
    Me.noupdate = True
    
    If GetTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetPreTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetPastTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend

subend:
    noupdate = False
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context.cmdDelete_Click error:"
    Resume subend
End Sub

Private Function GetCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Context", "GetCols"

    cols.Add GetTPGColumn("name", 1)
    cols.Add GetTPGColumn("relation", 2)
    cols.Add GetTPGColumn("todos", 3)
    cols.Add GetTPGColumn("responsible", 9)
    cols.Add GetTPGColumn("duedate", 10, DateColumn)
    
    Set GetCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Context.GetCols error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "Context", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    
    n.appendchild GetNodeFromTable(xmlDom, "prephase", "row", getRange(Me, "Context.Pre.List", -2, 1, 1, 1))
    n.appendchild GetNodeFromTable(xmlDom, "pastphase", "row", getRange(Me, "Context.Past.List", -2, 1, 1, 1))
    n.appendchild GetNodeFromTable(xmlDom, "projects", "project", GetTable.ValuesRange, GetCols)
        
    Set CreateXml = n

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Context.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant)
    
    On Error GoTo suberr
    modStack.PushCallStack "Context", "ImportXml"

    If Not Node Is Nothing Then
       
        reset
        Me.noupdate = True
        
        ImportTableValues GetPreTable, Node, "prephase/row"
        ImportTableValues GetPastTable, Node, "pastphase/row"
        ImportTableValues GetTable, Node, "projects/project", GetCols
        
        Me.noupdate = False
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Context", "reset"

    Me.noupdate = True
    
    GetPreTable.clear
    GetPastTable.clear
    GetTable.clear
    
    Me.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context.reset error:"
    Resume subend
End Sub

'------------------------------------------------------------------------------------
'----- (kissimport)
'------------------------------------------------------------------------------------
'importing kiss in normal phb
Public Sub ImportXmlKiss(Node As Variant)
    On Error GoTo suberr
    modStack.PushCallStack "Context", "ImportXmlKiss"

    If Not Node Is Nothing Then
            reset
            Me.noupdate = True
                ImportTableValues GetTable, Node, "context_kiss", GetColsKiss
            Me.noupdate = False
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context.ImportXmlKiss error:"
    Resume subend
End Sub

Private Function GetColsKiss() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Context", "GetColsKiss"

    cols.Add GetTPGColumn("c1", 1)
    cols.Add GetTPGColumn("c3", 2)
    cols.Add GetTPGColumn("c8", 3)
    cols.Add GetTPGColumn("c9", 9)
    cols.Add GetTPGColumn("c10", 10, DateColumn)
    
    Set GetColsKiss = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Context.GetColsKiss error:"
    Resume subend
End Function


Attribute VB_Name = "Context_kiss"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private bFormatted As Boolean

Private Function GetTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "GetTable"

    t.SetTable Context_kiss.Range("Context_kiss.Table"), True, True, TemplateFirstrow, 5
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Context_kiss.GetTable error:"
    Resume subend
End Function

Public Sub cmdClearFormat_Click()
    Dim c As Range
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "cmdClearFormat_Click"

    For Each c In GetTable.ValuesRange(3)
        c.Interior.Color = RGB(255, 255, 255)
        c.Font.Color = RGB(0, 0, 0)
    Next
    
    SetCustomProperty Me, "FormattingEnabled", "False"

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context_kiss.cmdClearFormat_Click error:"
    Resume subend
End Sub

Public Sub cmdSetFormat_Click()
    Dim c As Range
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "cmdSetFormat_Click"
    
    For Each c In GetTable.ValuesRange(3)
        Select Case c.value
            Case LCase(appGetLOCText("critical"))
                c.Interior.Color = RGB(227, 0, 27)
                c.Font.Color = RGB(255, 255, 255)
            Case LCase(appGetLOCText("neutral"))
                c.Interior.Color = RGB(255, 192, 0)
                c.Font.Color = RGB(255, 255, 255)
            Case LCase(appGetLOCText("supporting"))
                c.Interior.Color = RGB(112, 173, 71)
                c.Font.Color = RGB(255, 255, 255)
            Case Else
                c.Interior.Color = RGB(255, 255, 255)
                c.Font.Color = RGB(0, 0, 0)
        End Select
    Next
    
    SetCustomProperty Me, "FormattingEnabled", "True"

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context_kiss.cmdSetFormat_Click error:"
    Resume subend
End Sub

Public Sub cmdAutoFilter_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "cmdAutoFilter_Click"

    GetTable.Autofilter_Clicked 2

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context_kiss.cmdAutoFilter_Click error:"
    Resume subend
End Sub

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "cmdInsert_Click"

    If IsDemoVersion Then GoTo subend
    
    GetTable.InsertRow_Clicked ActiveCell
    ActiveCell.EntireRow.AutoFit
    
    If CBool(GetCustomProperty(Me, "FormattingEnabled")) Then cmdSetFormat_Click

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context_kiss.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "cmdDelete_Click"

    If IsDemoVersion Then GoTo subend
    
    GetTable.DeleteRow_Clicked ActiveCell

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context_kiss.cmdDelete_Click error:"
    Resume subend
End Sub

Public Sub cmdSortAsc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "cmdSortAsc_Click"

    Dim rCell As Range
    If Not InRange(GetTable.ValuesRange, ActiveCell) Then
        Set rCell = GetTable.ValuesRange(3)
    Else
        Set rCell = ActiveCell
    End If
    GetTable.Sort_Clicked rCell, xlAscending

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context_kiss.cmdSortAsc_Click error:"
    Resume subend
End Sub

Public Sub cmdSortDesc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "cmdSortDesc_Click"

    Dim rCell As Range
    If Not InRange(GetTable.ValuesRange, ActiveCell) Then
        Set rCell = GetTable.ValuesRange(3)
    Else
        Set rCell = ActiveCell
    End If
    GetTable.Sort_Clicked rCell, xlDescending
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context_kiss.cmdSortDesc_Click error:"
    Resume subend
End Sub

Private Function GetCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "GetCols"

    cols.Add GetTPGColumn("c1", 1)
    cols.Add GetTPGColumn("c2", 2)
    cols.Add GetTPGColumn("c3", 3)
    cols.Add GetTPGColumn("c4", 4)
    cols.Add GetTPGColumn("c5", 5)
    cols.Add GetTPGColumn("c6", 6)
    cols.Add GetTPGColumn("c7", 7)
    cols.Add GetTPGColumn("c8", 8)
    cols.Add GetTPGColumn("c9", 9)
    cols.Add GetTPGColumn("c10", 10)
    
    Set GetCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Context_kiss.GetCols error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    n.appendchild GetNodeFromTable(xmlDom, "contexts_kiss", "context_kiss", GetTable.ValuesRange, GetCols)
        
    Set CreateXml = n.FirstChild

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Context_kiss.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, sversion As String)
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "ImportXml"

    If Not Node Is Nothing Then
        
        reset
        ImportTableValues GetTable, Node, "context_kiss", GetCols
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context_kiss.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "reset"

    GetTable.clear
    GetTable.ValuesRange.EntireRow.AutoFit

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context_kiss.reset error:"
    Resume subend
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (InRange(Target, GetTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext True, True
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    Dim iCost As Integer
    Dim iProbability As Integer
    Dim iPriority As Integer
    Dim rCost As Range
    Dim rProbability As Range
    Dim rPriority As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Context_kiss", "Worksheet_Change"

    If Not PreviousProcName = "" Then GoTo subend

    If InRange(Target, GetTable.ValuesRange(3)) Then
        If CBool(GetCustomProperty(Me, "FormattingEnabled")) Then cmdSetFormat_Click
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Context_kiss.Worksheet_Change error:"
    Resume subend
End Sub

Attribute VB_Name = "Contract"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public noupdate As Boolean

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (Target.Areas.Count = 1) Then
    If (InRange(Target, Me.Range("Contract.CostTable"))) Or (InRange(Target, Me.Range("Contract.ResourcesTable"))) Then
        'not for demo and kiss version
        If Not ((sActiveLicense = "K") Or (sActiveLicense = "C") Or (sActiveLicense = "D")) Then modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("Contract.Members"))) Or (InRange(Target, Me.Range("Contract.Objectives"))) Or (InRange(Target, Me.Range("Contract.Limitation"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("Contract.Managers"))) Then
        If Not ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("Contract.Phase"))) Or (InRange(Target, Me.Range("Contract.ProjectDeliverables"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("Contract.ProjectDescription"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("Contract.Dependencies"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("Contract.Milestones.Table"))) Then
        modContextMenu.BuildTableContext False, False
    ElseIf (InRange(Target, Me.Range("Contract.Annex.Table"))) Then
        modContextMenu.BuildTableContext False, False
    Else
        modContextMenu.RestoreDefaultMenu
    End If
Else
    modContextMenu.RestoreDefaultMenu
End If

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    If InRange(Target, getRange(Contract, "Contract.ResourcesTable", -2, 0, 1, 0)) And ModuleExists("CRF") Then
        'added for CR
        ChangeRequest.UpdateDDLResourceTable "ChangeRequest.ResourcesTable", "Contract.ResourcesTable"
    End If

    If noupdate Then Exit Sub
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "Worksheet_Change"
    
    If GetProjectDescriptionTable.Mergedfit(Target) Then GoTo FitEnd
    If GetProjectDeliverablesTable.Mergedfit(Target) Then GoTo FitEnd
    If GetObjectivesTable.Mergedfit(Target) Then GoTo FitEnd
    If GetLimitationTable.Mergedfit(Target) Then GoTo FitEnd
    If GetPhaseTable.Mergedfit(Target) Then GoTo FitEnd
    
    'added for SALK
    If GetDependenciesTable.Mergedfit(Target) Then GoTo FitEnd
    If GetMilestonesTable.Mergedfit(Target) Then GoTo FitEnd
    If GetAnnexTable.Mergedfit(Target) Then GoTo FitEnd
    GetCostTable.bAutoFit = True
    If GetCostTable.CellAutoFit(Target) Then GoTo subend
    
    If InRange(Target, Contract.Range("Contract.Team")) Then
        Dim member As TPGMember
        Dim col As Integer

        If InRange(Target, Contract.Range("Contract.Managers")) Then
            col = Contract.Range("Contract.Managers").Column + 1
        ElseIf InRange(Target, Contract.Range("Contract.Members")) Then
            col = Contract.Range("Contract.Members").Column + 1
        End If
        
        If col > 0 Then
            Target.EntireRow.AutoFit
            Set member = New TPGMember
            member.LoadMemberFromContract Contract.Cells(Target.row, col)
            member.SyncToTeam
            If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then Plan.UpdateRoles
            If member.Name = "" Then
                noupdate = True
                Contract.Cells(Target.row, col).value = ""
                noupdate = False
            End If
            If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then Cover.RefreshTeam
            bNoScrollTop = True
            Team.SetNames
            If (Target.Column = Contract.Range("Contract.Col.Name1").Column) Or (Target.Column = Contract.Range("Contract.Col.Name2").Column) Then
                Team.DuplicateNameCheck Target.value
            End If
            Me.Select
            bNoScrollTop = False
            
        End If
        
    ElseIf InRange(Target, getRange(Contract, "Contract.ResourcesTable", -2, 0, 1, 0)) Then
        Dim ctarget As String
        'we need to store targerange for the cellautofit call, in case of delete target can be null
        ctarget = Target.Address
        Dim cts As TPGCostTypes
        Set cts = New TPGCostTypes
        cts.LoadFromWorkTypes
        cts.SyncToContract
        'no format needed for KISS version
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then FormatCostTypes cts
        
        GetResourcesTable.bAutoFit = True
        If GetResourcesTable.CellAutoFit(Me.Range(ctarget)) Then GoTo subend
        
    ElseIf InRange(Target, Me.Range("Contract.StartDescription")) Then
        CellFunctions.AutoFitMergedCell Target, 15
        If Me.Range("Contract.StartDescription").MergeArea.Height > 30 Then
            Me.Range("Contract.StartDescription").RowHeight = Me.Range("Contract.StartDescription").MergeArea.Height - 30
        Else
            Me.Range("Contract.StartDescription").RowHeight = 15
        End If
    ElseIf InRange(Target, Me.Range("Contract.FinishDescription")) Then
        CellFunctions.AutoFitMergedCell Target, 30
        If Me.Range("Contract.FinishDescription").MergeArea.Height > 30 Then
            Me.Range("Contract.FinishDescription").RowHeight = Me.Range("Contract.FinishDescription").MergeArea.Height - 30
        Else
            Me.Range("Contract.FinishDescription").RowHeight = 15
        End If
    End If
FitEnd:
        
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contract.Worksheet_Change error:"
    Resume subend
End Sub

Private Function GetProjectDescriptionTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetProjectDescriptionTable"

    t.SetTable Me.Range("Contract.ProjectDescription"), True, False, TemplateFirstrow, 2
    Set GetProjectDescriptionTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetProjectDescriptionTable error:"
    Resume subend
End Function


'Added for SALK
Public Sub ShowBaselineDates_Click()
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "ShowBaselineDates_Click"
    
    If Contract.Range("Contract.ShowBaselineDates").value Then
        Range("Contract.BaseStart").Font.ColorIndex = xlAutomatic
        Range("Contract.BaseFinish").Font.ColorIndex = xlAutomatic
    Else
        Range("Contract.BaseStart").Font.ThemeColor = xlThemeColorDark1
        Range("Contract.BaseStart").Font.TintAndShade = -4.99893185216834E-02
        Range("Contract.BaseFinish").Font.ThemeColor = xlThemeColorDark1
        Range("Contract.BaseFinish").Font.TintAndShade = -4.99893185216834E-02
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contract.ShowBaselineDates_Click error:"
    Resume subend
End Sub


Private Function GetProjectDeliverablesTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetProjectDeliverablesTable"

    t.SetTable Me.Range("Contract.ProjectDeliverables"), True, False, TemplateFirstrow, 2
    Set GetProjectDeliverablesTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetProjectDeliverablesTable error:"
    Resume subend
End Function

'Added for SALK
Private Function GetDependenciesTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetDependenciesTable"

    t.SetTable Me.Range("Contract.Dependencies"), True, False, TemplateFirstrow, 2
    Set GetDependenciesTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetDependenciesTable error:"
    Resume subend
End Function


'Added for SALK
Private Function GetMilestonesTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetMilestonesTable"

    t.SetTable Me.Range("Contract.Milestones.Table"), True, False, TemplateFirstrow, 2
    Set GetMilestonesTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetMilestonesTable error:"
    Resume subend
End Function

'Added for SALK
Private Function GetAnnexTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetAnnexTable"

    t.SetTable Me.Range("Contract.Annex.Table"), True, False, TemplateFirstrow, 2
    Set GetAnnexTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetAnnexTable error:"
    Resume subend
End Function

'Added for SALK
Private Function GetAnnexCols() As Collection
    Dim cols As New Collection
    
    cols.Add GetTPGColumn("annex", 2)
    cols.Add GetTPGColumn("description", 5)
    
    Set GetAnnexCols = cols
End Function

Friend Function GetObjectivesTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetObjectivesTable"

    t.SetTable Me.Range("Contract.Objectives"), True, False, TemplateFirstrow, 2
    Set GetObjectivesTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetObjectivesTable error:"
    Resume subend
End Function

Private Function GetLimitationTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetLimitationTable"

    t.SetTable Me.Range("Contract.Limitation"), True, False, TemplateBeforeHeader, 2, Me.Range("Contract.Phase")
    Set GetLimitationTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetLimitationTable error:"
    Resume subend
End Function

Private Function GetPhaseTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetPhaseTable"

    t.SetTable Me.Range("Contract.Phase"), True, False, TemplateBeforeHeader, 2, Me.Range("Contract.Limitation")
    Set GetPhaseTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetPhaseTable error:"
    Resume subend
End Function

Friend Function GetResourcesTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetResourcesTable"

    t.SetTable Me.Range("Contract.ResourcesTable"), True, True, TemplateBeforeHeader, 2, Me.Range("Contract.CostTable")
    Set GetResourcesTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetResourcesTable error:"
    Resume subend
End Function

Friend Function GetCostTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetCostTable"

    t.SetTable Me.Range("Contract.CostTable"), True, True, TemplateBeforeHeader, 2, Me.Range("Contract.ResourcesTable")
    Set GetCostTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetCostTable error:"
    Resume subend
End Function

Friend Function GetManagersTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetManagersTable"

    t.SetTable Me.Range("Contract.Managers"), True, False, TemplateBeforeHeader, 2, Me.Range("Contract.Members")
    Set GetManagersTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetManagersTable error:"
    Resume subend
End Function

Friend Function GetMembersTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetMembersTable"

    t.SetTable Me.Range("Contract.Members"), True, False, TemplateBeforeHeader, 2, Me.Range("Contract.Managers")
    Set GetMembersTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetMembersTable error:"
    Resume subend
End Function

Public Sub cmdUpdate_Click()
    Dim s As String
    Dim c As Range
    Dim R As Range
    Dim iPlanView As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "cmdUpdate_Click"
    
    If appQOCMsg(appGetLOCText("ContractUpdateBasis")) = vbCancel Then GoTo subend
    
    Contract.noupdate = True
    bNoNormalProtectActionsRequired = True
    Plan.Activate
    iPlanView = Plan.Range("Plan.SelectedView").value
    Plan.Range("Plan.SelectedView").value = 1
    Plan.UserAction_ChangeView
    Contract.Activate
    
    If Plan.Range("Plan.BaseStart").value = "" Then
        Range("Contract.BaseStart").value = ""
    Else
        Range("Contract.BaseStart").value = Plan.Range("Plan.BaseStart").value
    End If
    If Plan.Range("Plan.BaseFinish").value = "" Then
        Range("Contract.Basefinish").value = ""
    Else
        Range("Contract.BaseFinish").value = Plan.Range("Plan.BaseFinish").value
    End If

'modified for SALK
'    s = "Contract.Resources"
'    For Each c In Range(s).offset(3, 2).Resize(Range(s).rows.Count - 5, 1)
'        If c.value <> "" Then
'            Set r = Plan.Range("Plan.ProjectHeader").offset(-3, 0).Find(c.value, , xlValues, xlWhole, , , False)
'            If r Is Nothing Then
'                AppStopMsg appGetLOCText("ResourceNotInPlan") & ": " & c.value
'            Else
'                c.offset(0, 2).value = r.offset(3, 0).value
'            End If
'        End If
'    Next
'
'    For Each c In Range(s).offset(3, 9).Resize(Range(s).rows.Count - 5, 1)
'        If c.value <> "" Then
'            Set r = Intersect(Plan.Range("Plan.WorkCostColumns"), Plan.Range("Plan.ProjectHeader").offset(-3, 0)).Find(c.value, , xlValues, xlWhole, , , False)
'            If r Is Nothing Then
'                Set r = Plan.Range("Plan.ProjectHeader").offset(-3, 0).Find(c.value, , xlValues, xlWhole, , , False)
'                If r Is Nothing Then
'                    AppStopMsg appGetLOCText("CostTypeNotInPlan") & ": " & c.value
'                Else
'                    c.offset(0, 2).value = r.offset(3, 0).value
'                End If
'            Else
'                    c.offset(0, 2).value = r.offset(3, 0).value
'            End If
'        End If
'    Next
    
subend:
    Plan.Activate
    Plan.Range("Plan.SelectedView").value = iPlanView
    Plan.UserAction_ChangeView
    Contract.Activate
    Contract.noupdate = False
    bNoNormalProtectActionsRequired = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contract.cmdUpdate_Click error:"
    Resume subend
End Sub

Public Sub cmdInsert_Click()
    Dim R As Range
    Dim t As TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "cmdInsert_Click"
    
    Contract.noupdate = True
    
    If GetProjectDescriptionTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetProjectDeliverablesTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetObjectivesTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetLimitationTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetPhaseTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    
    'added for SALK
    If GetDependenciesTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetMilestonesTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetAnnexTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
 
    'not for demo and kiss version
    If (((sActiveLicense <> "K") And (sActiveLicense <> "D")) And (sActiveLicense <> "C")) Then
        Set R = Application.Intersect(ActiveCell, Range("Contract.Resources"))
        If Not R Is Nothing Then
            Dim WorkCostTypesCount As Integer
            Dim cts As TPGCostTypes
            Set cts = New TPGCostTypes
            cts.LoadFromWorkTypes
            WorkCostTypesCount = cts.Count
        
            Set t = GetResourcesTable
            If t.CanInsert(ActiveCell) Then
                t.InsertRow ActiveCell.row
                FormatCostTypes cts
                GoTo subend
            End If
                        
            Set t = GetCostTable
            If t.CanInsert(ActiveCell) And ActiveCell.row > t.firstrow + WorkCostTypesCount Then
                t.InsertRow ActiveCell.row
                GoTo subend
            End If
        End If
    End If
    
    If InRange(Range("Contract.Managers"), ActiveCell) Then
        If sActiveLicense = "M" Then
            If ActiveCell.row = Range("Contract.Managers").row + 1 Then GoTo subend
        End If
        If GetManagersTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    End If
    
    If GetMembersTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
       
subend:
    noupdate = False
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contract.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    Dim R As Range
    Dim t As TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "cmdDelete_Click"
    
    Contract.noupdate = True
    Team.noupdate = True
    
    If GetProjectDescriptionTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then If GetProjectDeliverablesTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetObjectivesTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetLimitationTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetPhaseTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    
    'added for salk
    If GetDependenciesTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetMilestonesTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetAnnexTable.CanDelete(ActiveCell) Then
        If appQOCMsg(appGetLOCText("DeleteRow")) = vbOK Then
            'pdfName = StGuidWithoutSpecials(Contract.Cells(ActiveCell.row, Range("Contract.Annex.Table").Column + 1).value)
            'pdfName = VBA.Left(pdfName, 29) 'Excel 2003 does not support longer names for shapes. small risk for doubles ...
            'If DocumentExists(pdfName) Then Contract.OLEObjects(pdfName).Delete
            GetAnnexTable.DeleteRow ActiveCell
        End If
    End If
    
    'not for demo and kiss version
    If (((sActiveLicense <> "K") And (sActiveLicense <> "D")) And (sActiveLicense <> "C")) Then
        Set R = Application.Intersect(ActiveCell, Range("Contract.Resources"))
        If Not R Is Nothing Then
            Dim WorkCostTypesCount As Integer
            Dim cts As TPGCostTypes
            Set cts = New TPGCostTypes
            
            Set t = GetResourcesTable
            If t.CanDelete(ActiveCell) Then
                If appQOCMsg(appGetLOCText("DeleteRow")) = vbOK Then
                    t.DeleteRow ActiveCell
                    cts.LoadFromWorkTypes
                    cts.SyncToContract
                    FormatCostTypes cts
                End If
                GoTo subend
            End If
        
            Set t = GetCostTable
            If t.CanDelete(ActiveCell) And ActiveCell.row >= t.firstrow + WorkCostTypesCount Then
                If appQOCMsg(appGetLOCText("DeleteRow")) = vbOK Then
                    t.DeleteRow ActiveCell
                End If
                GoTo subend
            End If
        End If
    End If
  
    Dim member As TPGMember
    
    If GetManagersTable.CanDelete(ActiveCell) Then
        If sActiveLicense = "M" Then
            If ActiveCell.row = Range("Contract.Managers").row + 1 Then GoTo subend
        End If
        
        If appQOCMsg(appGetLOCText("DeleteRow")) = vbOK Then
            Set member = New TPGMember
            member.LoadMemberFromContract Contract.Cells(ActiveCell.row, Contract.Range("Contract.Managers").Column + 1)
            member.RemoveMemberFromTeam
            GetManagersTable.DeleteRow ActiveCell
            Cover.RefreshTeam
            Team.SetNames
            Me.Select
            'ProtectSheet team
        End If
    End If
    
    If GetMembersTable.CanDelete(ActiveCell) Then
        If appQOCMsg(appGetLOCText("DeleteRow")) = vbOK Then
            Set member = New TPGMember
            member.LoadMemberFromContract Contract.Cells(ActiveCell.row, Contract.Range("Contract.Members").Column + 1)
            member.RemoveMemberFromTeam
            GetMembersTable.DeleteRow ActiveCell
            Team.SetNames
            Me.Select
            'ProtectSheet team
        End If
        GoTo subend
    End If

subend:
    Team.noupdate = False
    Contract.noupdate = False
    
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contract.cmdDelete_Click error:"
    Resume subend

End Sub

Public Sub RefreshTeam()
    Dim member As TPGMember
    Dim p As String
    Dim cell As Range
    Dim rc As Integer
    Dim ro As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "RefreshTeam"
    
    
    noupdate = True
    ClearTeam
    
    p = appGetLOCText("participant")
    
    If ((sActiveLicense = "M") Or (sActiveLicense = "K")) Then
        Range("Contract.Managers").Cells(2, 2).value = Cover.Range("Cover.Manager.Table").Cells(2, 1).value
        Range("Contract.Managers").Cells(2, 3).value = Cover.Range("Cover.Manager.Table").Cells(2, 2).value
        Range("Contract.Managers").Cells(2, 4).value = appGetLOCText("role_manager")
        rc = -3: ro = 2
    Else
        rc = -2: ro = 1
    End If
    For Each cell In getRange(Team, "Team.Table", rc, 1, ro, 50)
        If cell.value <> "" Then
            Set member = New TPGMember
            member.LoadMemberFromTeam cell
            If member.Role <> p Then
                member.AddMemberToContract
            End If
        End If
    Next

subend:
    noupdate = False
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contract.RefreshTeam error:"
    Resume subend
End Sub

Private Sub ClearTeam()
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "ClearTeam"

    GetManagersTable.clear
    GetMembersTable.clear

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contract.ClearTeam error:"
    Resume subend
End Sub

Private Sub FormatCostTypes(wcts As TPGCostTypes)
    Dim R As Range
    Dim t As TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "FormatCostTypes"

    Set t = GetCostTable
    For Each R In t.ValuesRange(2)
        If R.row < t.firstrow + wcts.Count Then
            R.Resize(1, 3).locked = True
            R.Resize(1, 3).Interior.Color = RGB(242, 242, 242)
        Else
            R.Resize(1, 2).locked = False
            R.offset(0, 2).locked = True
            R.Resize(1, 2).Interior.Color = RGB(255, 255, 255)
            R.offset(0, 2).Interior.Color = RGB(242, 242, 242)
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contract.FormatCostTypes error:"
    Resume subend
End Sub

Private Function GetResCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetResCols"

    cols.Add GetTPGColumn("name", 2)
    cols.Add GetTPGColumn("contractwork", 3, NumColumn)
    cols.Add GetTPGColumn("basework", 4, NumColumn)
    
    Set GetResCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetResCols error:"
    Resume subend
End Function

Private Function GetCostCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetCostCols"

    cols.Add GetTPGColumn("name", 2)
    cols.Add GetTPGColumn("contractcost", 3, NumColumn)
    cols.Add GetTPGColumn("basecost", 4, NumColumn)
    
    Set GetCostCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetCostCols error:"
    Resume subend
End Function

Private Function GetManagersCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetManagersCols"

    cols.Add GetTPGColumn("guid", 1)
    cols.Add GetTPGColumn("name", 2)
    cols.Add GetTPGColumn("role", 3, tagColumn, phbLocalizationItemRole)
    cols.Add GetTPGColumn("department", 4)
    
    Set GetManagersCols = cols
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetManagersCols error:"
    Resume subend
End Function

Private Function GetMembersCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "GetMembersCols"

    cols.Add GetTPGColumn("guid", 1)
    cols.Add GetTPGColumn("name", 2)
    cols.Add GetTPGColumn("role", 3, tagColumn, phbLocalizationItemRole)
    cols.Add GetTPGColumn("department", 4)
    
    Set GetMembersCols = cols
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.GetMembersCols error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    
    n.appendchild GetNodeFromTable(xmlDom, "description", "row", GetProjectDescriptionTable.ValuesRange(2))
    n.appendchild GetNodeFromTable(xmlDom, "deliverables", "row", GetProjectDeliverablesTable.ValuesRange(2))
    
    'added for SALK
    n.appendchild GetNodeFromTable(xmlDom, "dependencies", "dependency", GetDependenciesTable.ValuesRange(2))
    n.appendchild GetNodeFromTable(xmlDom, "milestones", "milestone", GetMilestonesTable.ValuesRange(2))
    n.appendchild GetNodeFromTable(xmlDom, "annexes", "annex", GetAnnexTable.ValuesRange, GetAnnexCols)
    
    Dim nStart
    Set nStart = xmlDom.createNode(1, "projectstart", "")
    AddNode xmlDom, nStart, "description", Range("Contract.StartDescription").value
    AddNode xmlDom, nStart, "contractstart", Range("Contract.BaseStart").offset(0, -1).value
    AddNode xmlDom, nStart, "basestart", Range("Contract.BaseStart").value
    n.appendchild nStart
    
    Dim nFinish
    Set nFinish = xmlDom.createNode(1, "projectfinish", "")
    AddNode xmlDom, nFinish, "description", Range("Contract.FinishDescription").value
    AddNode xmlDom, nFinish, "contractfinish", Range("Contract.BaseFinish").offset(0, -1).value
    AddNode xmlDom, nFinish, "basefinish", Range("Contract.BaseFinish").value
    n.appendchild nFinish
  
    n.appendchild GetNodeFromTable(xmlDom, "objectives", "objective", GetObjectivesTable.ValuesRange(2))
    n.appendchild GetNodeFromTable(xmlDom, "limitations", "limitation", GetLimitationTable.ValuesRange(2))
    n.appendchild GetNodeFromTable(xmlDom, "phases", "phase", GetPhaseTable.ValuesRange(2))
        
    n.appendchild GetNodeFromTable(xmlDom, "resources", "resource", GetResourcesTable.ValuesRange, GetResCols)
    n.appendchild GetNodeFromTable(xmlDom, "costs", "cost", GetCostTable.ValuesRange, GetCostCols)
    
    '18/10/12: members and managers are exported because needed for contract view in portfolio (ppf)
    n.appendchild GetNodeFromTable(xmlDom, "managers", "manager", GetManagersTable.ValuesRange, GetManagersCols)
    n.appendchild GetNodeFromTable(xmlDom, "members", "member", GetMembersTable.ValuesRange, GetMembersCols)
    
    'added for SALK
    Dim nInvest
    Set nInvest = xmlDom.createNode(1, "infoinvest", "")
    AddNode xmlDom, nInvest, "newbuilt", Range("Contract.NewBuilt").value
    AddNode xmlDom, nInvest, "rebuilt", Range("Contract.ReBuilt").value
    AddNode xmlDom, nInvest, "provision", Range("Contract.Provision").value
    AddNode xmlDom, nInvest, "ohh", Range("Contract.OHH").value
    AddNode xmlDom, nInvest, "ao", Range("Contract.AO").value
    AddNode xmlDom, nInvest, "savings", Range("Contract.Savings").value
    AddNode xmlDom, nInvest, "area", Range("Contract.Area").value
    AddNode xmlDom, nInvest, "dept", Range("Contract.Dept").value
    AddNode xmlDom, nInvest, "yesno", Range("Contract.YesNo").value
    AddNode xmlDom, nInvest, "actionnr", Range("Contract.ActionNr").value
    n.appendchild nInvest
    
    Set CreateXml = n

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, sversion)
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "ImportXml"
    
    If Not Node Is Nothing Then
        
        reset
        Me.noupdate = True
                
        ImportTableValues GetProjectDescriptionTable, Node, "description/row", DefaultColumn:=2
        
        If Not Node.SelectSingleNode("deliverables") Is Nothing Then
            ImportTableValues GetProjectDeliverablesTable, Node, "deliverables/row", DefaultColumn:=2
        End If
        
        'added for SALK
        If Not Node.SelectSingleNode("dependencies") Is Nothing Then
            ImportTableValues GetDependenciesTable, Node, "dependencies/dependency", DefaultColumn:=2
        End If
        If Not Node.SelectSingleNode("milestones") Is Nothing Then
            ImportTableValues GetMilestonesTable, Node, "milestones/milestone", DefaultColumn:=2
        End If
        If Not Node.SelectNodes("annexes") Is Nothing Then
            ImportTableValues GetAnnexTable, Node, "annexes/annex", GetAnnexCols
        End If
            
        Range("Contract.StartDescription").value = Node.SelectSingleNode("projectstart/description").Text
        CellFunctions.AutoFitMergedCell Range("Contract.StartDescription"), 30
        If Me.Range("Contract.StartDescription").MergeArea.Height > 30 Then
            Me.Range("Contract.StartDescription").RowHeight = Me.Range("Contract.StartDescription").MergeArea.Height - 30
        Else
            Me.Range("Contract.StartDescription").RowHeight = 15
        End If
        SetXMLValue Range("Contract.BaseStart").offset(0, -1), Node.SelectSingleNode("projectstart/contractstart").Text
        SetXMLValue Range("Contract.BaseStart"), Node.SelectSingleNode("projectstart/basestart").Text
    
        Range("Contract.FinishDescription").value = Node.SelectSingleNode("projectfinish/description").Text
        CellFunctions.AutoFitMergedCell Range("Contract.FinishDescription"), 30
        If Me.Range("Contract.FinishDescription").MergeArea.Height > 30 Then
            Me.Range("Contract.FinishDescription").RowHeight = Me.Range("Contract.FinishDescription").MergeArea.Height - 30
        Else
            Me.Range("Contract.FinishDescription").RowHeight = 15
        End If
        SetXMLValue Range("Contract.BaseFinish").offset(0, -1), Node.SelectSingleNode("projectfinish/contractfinish").Text
        SetXMLValue Range("Contract.BaseFinish"), Node.SelectSingleNode("projectfinish/basefinish").Text
        
        ImportTableValues GetObjectivesTable, Node, "objectives/objective", DefaultColumn:=2
        
        ImportTableValues GetLimitationTable, Node, "limitations/limitation", DefaultColumn:=2
        ImportTableValues GetPhaseTable, Node, "phases/phase", DefaultColumn:=2
        
        ImportTableValues GetResourcesTable, Node, "resources/resource", GetResCols
        ImportTableValues GetCostTable, Node, "costs/cost", GetCostCols
        
        'Added for SALK
        Dim R As Range
        For Each R In GetResourcesTable.ValuesRange(2)
            If R.value <> "" Then
                GetResourcesTable.bAutoFit = True
                GetResourcesTable.CellAutoFit R
            End If
        Next
        
        For Each R In GetCostTable.ValuesRange(2)
            If R.value <> "" Then
                GetCostTable.bAutoFit = True
                GetCostTable.CellAutoFit R
            End If
        Next
        
        '(kissimport)
        If Import.ImportKISSinPHB Then
            'add additional orgs to contract
            AddAdditionalOrgs GetResourcesTable
            'Get details for Extern Cost
            GetExternCost
        End If
        
        Dim wcts As New TPGCostTypes
        wcts.LoadFromWorkTypes
        FormatCostTypes wcts

        RefreshTeam
        
        'added for salk
        If Not Node.SelectSingleNode("infoinvest") Is Nothing Then
           ' On Error Resume Next
            SetXMLValue Range("Contract.NewBuilt"), Node.SelectSingleNode("infoinvest/newbuilt").Text
            SetXMLValue Range("Contract.ReBuilt"), Node.SelectSingleNode("infoinvest/rebuilt").Text
            SetXMLValue Range("Contract.Provision"), Node.SelectSingleNode("infoinvest/provision").Text
            SetXMLValue Range("Contract.OHH"), Node.SelectSingleNode("infoinvest/ohh").Text
            SetXMLValue Range("Contract.AO"), Node.SelectSingleNode("infoinvest/ao").Text
            SetXMLValue Range("Contract.Savings"), Node.SelectSingleNode("infoinvest/savings").Text
            SetXMLValue Range("Contract.Area"), Node.SelectSingleNode("infoinvest/area").Text
            SetXMLValue Range("Contract.Dept"), Node.SelectSingleNode("infoinvest/dept").Text
            SetXMLValue Range("Contract.YesNo"), Node.SelectSingleNode("infoinvest/yesno").Text
            SetXMLValue Range("Contract.ActionNr"), Node.SelectSingleNode("infoinvest/actionnr").Text
           ' On Error GoTo 0
        End If
        
        
        Me.noupdate = False
        
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contract.ImportXML error:"
    Resume subend
End Sub


Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "reset"

    Me.noupdate = True
    
    GetProjectDescriptionTable.clear
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
        GetProjectDeliverablesTable.clear
    End If
    
    'added for SALK
    GetDependenciesTable.clear
    GetMilestonesTable.clear
    GetAnnexTable.clear
    
    Range("Contract.StartDescription").value = ""
    Range("Contract.BaseStart").offset(0, -1).ClearContents
    Range("Contract.BaseStart").ClearContents

    Range("Contract.FinishDescription").value = ""
    Range("Contract.BaseFinish").offset(0, -1).ClearContents
    Range("Contract.BaseFinish").ClearContents
    
    Me.Range("Contract.StartDescription").RowHeight = 15
    Me.Range("Contract.FinishDescription").RowHeight = 15
    
    GetObjectivesTable.clear
    
    GetLimitationTable.clear
    GetPhaseTable.clear
    
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
        GetResourcesTable.clear
        GetCostTable.clear
        FormatCostTypes New TPGCostTypes
    'for KISS we don't empty the entire table
    Else
        GetResourcesTable.ValuesRange(3).ClearContents
        GetResourcesTable.ValuesRange(4).ClearContents
        GetResourcesTable.ValuesRange(10).ClearContents
        GetResourcesTable.ValuesRange(11).ClearContents
    End If
    
    GetManagersTable.clear
    GetMembersTable.clear
    
    'Added for SALK
    Range("Contract.NewBuilt").value = ""
    Range("Contract.ReBuilt").value = ""
    Range("Contract.Provision").value = ""
    Range("Contract.OHH").value = ""
    Range("Contract.AO").value = ""
    Range("Contract.Savings").value = ""
    Range("Contract.Area").value = ""
    Range("Contract.Dept").value = ""
    Range("Contract.YesNo").value = ""
    Range("Contract.ActionNr").value = ""
    
    If (sActiveLicense = "M") Or (sActiveLicense = "K") Then
        Range("Contract.Managers").Cells(2, 2).value = Cover.Range("Cover.Manager.Table").Cells(2, 1).value
        Range("Contract.Managers").Cells(2, 3).value = Cover.Range("Cover.Manager.Table").Cells(2, 2).value
        Range("Contract.Managers").Cells(2, 4).value = appGetLOCText("role_manager")
    End If
    
    Me.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contract.reset error:"
    Resume subend
End Sub


















'Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
'    Dim n As Name
'    Dim r As Range
'    Dim bSkip As Boolean
'    'On Error Resume Next
'
''   For Each n In ThisWorkbook.Names
''        If VBA.Right(n.Name, 5) = "Table" Then
''            If InRange(n.RefersToRange, Target) Then Debug.Print n
''        End If
''    Next
'
'    On Error GoTo SubErr
'    'modStack.PushCallStack "Contract", "Worksheet_BeforeRightClick"
'
'    For Each n In ActiveWorkbook.Names
'        If n.RefersToRange.Worksheet.CodeName = Target.Worksheet.CodeName Then
'            If bSkip Then GoTo skip
'            If Right(n.Name, 10) = "Print_Area" Then GoTo skip
'            If InRange(Target, Target.Worksheet.Range(n.Name)) Then
'                Cancel = True
'                Debug.Print n.Name
'                Debug.Print n.RefersToRange.Address
'
'            End If
'         End If
'skip:
'        bSkip = False
'    Next
'
'SubEnd:
'    'modStack.PopCallStack
'    Exit Sub
'SubErr:
'    If Err.Number = 1004 Then
'        bSkip = True
'        Resume Next
'    Else
'        AppErrMsg "Contract.Worksheet_BeforeRightClick error:"
'    End If
'    Resume SubEnd
'End Sub























Rem SUBPROJECT-RELATED
Public Sub ImportSubProjectXml(Node As Variant)
    Dim i As Integer
    Dim n As Variant
    Dim cols As Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "ImportSubProjectXml"

    If Not Node Is Nothing Then
        Me.noupdate = True
                
        AppendToResourcesTable GetResourcesTable, Node, "resources/resource", GetResCols
        UpdateCostTable
        Me.noupdate = True
        AppendToCostTable GetCostTable, Node, "costs/cost", GetCostCols

        Me.noupdate = False
        RefreshTeam 'setNoUpdate:=False
        
        Me.noupdate = False
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contract.ImportSubProjectXml error:"
    Resume subend
End Sub
Private Sub AppendToResourcesTable(Table As TPGTable, Node As Variant, rowxpath As String, cols As Collection)
    Dim i As Integer
    Dim j As Integer
    Dim n As Variant
    Dim iRow As Integer
    Dim member As TPGMember
    Set member = New TPGMember
    
    If Table.GetUsedRange Is Nothing Then
        i = 0
    Else
        i = Table.GetUsedRange.rows.Count
    End If
    For Each n In Node.SelectNodes(rowxpath)
        If Not IsUsedResource(n) Then
            'create new entry in res table
            Table.AddRow
            i = i + 1
            For j = 1 To cols.Count
                Table.ValuesRange.Cells(i, cols(j).columnIndex).value = CastStringToVar(n.SelectSingleNode(cols(j).ColumnName).Text)
            Next
        Else
            'update value in res table
            iRow = GetResRow(n.SelectSingleNode("name").Text)
            If iRow > 0 Then
                For j = 2 To cols.Count
                    Table.ValuesRange.Cells((iRow - Table.ValuesRange.row) + 1, cols(j).columnIndex).value = Table.ValuesRange.Cells((iRow - Table.ValuesRange.row) + 1, cols(j).columnIndex).value + CastStringToVar(n.SelectSingleNode(cols(j).ColumnName).Text)
                Next
            End If
        End If
        Table.Mergedfit Table.ValuesRange.Cells(i, 1)
    Next
End Sub

Private Function GetResRow(sRes As String) As Integer
Dim c
For Each c In Contract.GetResourcesTable.ValuesRange.Resize(Contract.GetResourcesTable.ValuesRange.rows.Count, 1).offset(0, 1)
    If LCase(c.value) = LCase(sRes) Then
        GetResRow = c.row
        Exit For
    End If
Next
End Function

Private Function GetCostRow(sCost As String) As Integer
Dim c
For Each c In Contract.GetCostTable.ValuesRange.Resize(Contract.GetCostTable.ValuesRange.rows.Count, 1).offset(0, 1)
    If LCase(c.value) = LCase(sCost) Then
        GetCostRow = c.row
        Exit For
    End If
Next
End Function

Private Sub AppendToCostTable(Table As TPGTable, Node As Variant, rowxpath As String, cols As Collection)
    Dim i As Integer
    Dim j As Integer
    Dim iRow As Integer
    Dim n As Variant
    Dim member As TPGMember
    Set member = New TPGMember
    
    If Table.GetUsedRange Is Nothing Then
        i = 0
    Else
        i = Table.GetUsedRange.rows.Count
    End If
    For Each n In Node.SelectNodes(rowxpath)
        If Not IsUsedCost(n) Then
            'add cost to costtable
            Table.AddRow
            i = i + 1
            For j = 1 To cols.Count
                Table.ValuesRange.Cells(i, cols(j).columnIndex).value = CastStringToVar(n.SelectSingleNode(cols(j).ColumnName).Text)
            Next
'        Else
'            'update value in cost table
'            irow = GetCostRow(n.SelectSingleNode("name").Text)
'            If irow > 0 Then
'                For j = 2 To Cols.Count
'                    table.ValuesRange.Cells((irow - table.ValuesRange.row) + 1, Cols(j).columnIndex).Value = table.ValuesRange.Cells((irow - table.ValuesRange.row) + 1, Cols(j).columnIndex).Value + CastStringToVar(n.SelectSingleNode(Cols(j).ColumnName).Text)
'                Next
'            End If
        
        End If
        Table.Mergedfit Table.ValuesRange.Cells(i, 1)
    Next
End Sub

Private Sub UpdateCostTable()
    Dim cts As TPGCostTypes
    Set cts = New TPGCostTypes
    cts.LoadFromWorkTypes
    cts.SyncToContract
    FormatCostTypes cts
End Sub

Private Function IsUsedResource(aNode As Variant) As Boolean
    Dim s As String
    s = aNode.SelectSingleNode("name").Text
    IsUsedResource = IsStringInRange(s, Contract.Range("Contract.ResourcesTable"))
End Function

Private Function IsUsedCost(aNode As Variant) As Boolean
    Dim s As String
    s = aNode.SelectSingleNode("name").Text
    IsUsedCost = IsStringInRange(s, Contract.Range("Contract.CostTable"))
End Function

Public Function OrgUnitInUse(sorg As String) As Boolean
Dim s As String
Dim c
Dim bfound As Boolean

    s = "Contract.Resources"
    For Each c In Range(s).offset(3, 2).Resize(Range(s).rows.Count - 5, 1)
        If c.value <> "" Then
            If c.value = sorg Then
                bfound = True
                Exit For
            End If
        End If
    Next
    
    If Not bfound Then
        s = "Contract.Managers"
        For Each c In Range(s).offset(1, 4).Resize(Range(s).rows.Count - 2, 1)
            If c.value <> "" Then
                If c.value = sorg Then
                    bfound = True
                End If
            End If
        Next
    End If
    
    If Not bfound Then
        s = "Contract.Members"
        For Each c In Range(s).offset(1, 4).Resize(Range(s).rows.Count - 2, 1)
            If c.value <> "" Then
                If c.value = sorg Then
                    bfound = True
                End If
            End If
        Next
    End If
    
    OrgUnitInUse = bfound

End Function

Public Function RenameOrgUnitInContract(sorgold As String, sorgnew As String) As Boolean
Dim c As Variant
Dim icol As Integer
Dim irowstart As Integer
Dim irowend As Integer
Dim i As Integer
Dim s As String

    On Error GoTo suberr
    modStack.PushCallStack "Contract", "renameorgunitincontract"
    
    Me.noupdate = True

'resourcestable
    s = "Contract.Resources"
    For Each c In Range(s).offset(3, 2).Resize(Range(s).rows.Count - 5, 1)
        If c.value <> "" Then
            If c.value = sorgold Then
                c.value = sorgnew
                Exit For
            End If
        End If
    Next
    
    s = "Contract.Managers"
    For Each c In Range(s).offset(1, 4).Resize(Range(s).rows.Count - 2, 1)
        If c.value <> "" Then
            If c.value = sorgold Then
                c.value = sorgnew
            End If
        End If
    Next
    
    s = "Contract.Members"
    For Each c In Range(s).offset(1, 4).Resize(Range(s).rows.Count - 2, 1)
        If c.value <> "" Then
            If c.value = sorgold Then
                c.value = sorgnew
            End If
        End If
    Next
    
    RenameOrgUnitInContract = True
subend:
    Me.noupdate = False
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Contract.renameorgunitincontract error:"
    GoTo subend
End Function

Public Function ResourceInUse(sRes As String) As Boolean
Dim c As Range
On Error GoTo suberr
If sRes <> "" Then
    For Each c In Contract.Range("Contract.ResourcesTable").offset(1, 2).Resize(Contract.Range("Contract.ResourcesTable").rows.Count - 3, 1)
        If c.value = sRes Then
            ResourceInUse = True
            Exit For
        End If
    Next
End If
subend:
    Exit Function
suberr:
    AppErrMsg "Contract.ResourceInUse error:"
    GoTo subend
End Function

'-----------------------------------------------------------------
' (kissimport)
'-----------------------------------------------------------------
Private Sub GetExternCost()
    Dim c As Range
    Dim s As String
    Dim TP As New TPGCostType
    On Error GoTo suberr
    modStack.PushCallStack "Contract", "reset"
    
    s = "Contract.Resources"
    If Import.ImportKISSinPHB Then
        For Each c In Contract.Range(s).offset(3, 9).Resize(Contract.Range(s).rows.Count - 5, 1)
            If c.value = "Externe Kosten" Then
                TP.Name = c.value
                TP.BaseCost = c.offset(0, 2).value
                TP.ContractCost = c.offset(0, 1).value
                
                Set Import.ExternCost = TP
                GoTo subend
            End If
        Next
    End If
subend:
    Set TP = Nothing
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Contract.GetExternCost error:"
    Resume subend
End Sub

'-----------------------------------------------------------------

Attribute VB_Name = "Cost"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Const bChkCol = 3
Public bnoupdate As Boolean
Private Property Get chkCostChk(id As Integer) As CheckBox: Set chkCostChk = Me.CheckBoxes("costchk" + Trim(CStr(id))): End Property

Public Sub HideAllOrgUnits()
Dim i As Integer
Dim j As Integer
Dim icolcapa As Integer
Dim icoldate As Integer
Dim bvisible As Boolean

On Error GoTo suberr
modStack.PushCallStack "Cost", "HideAllOrgUnits"
bvisible = False 'True 'for debugging
bnoupdate = True
Application.ScreenUpdating = True
icolcapa = Me.Range("Cost.Col.Capa").Column
icoldate = Me.Range("Cost.Col.DateStart").Column
For i = 1 To 20
    Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).EntireRow.Hidden = Not bvisible
    'reset rescells and capacells
    For j = 1 To 5
        Me.Cells(Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).row, icoldate + (j - 1)).value = 0
    Next
    'uncheck checkbox
    Me.Cells(Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).row, bChkCol).value = "|fffd|"
Next

subend:
    Application.ScreenUpdating = True
    bnoupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cost.HideAllOrgUnits error:"
    Resume subend
End Sub

Private Sub testunhide()
SetPHBOrgUnits
End Sub

Public Sub SetPHBOrgUnits(Optional bResetChk As Boolean = True)
'hide and reset all Orgunits NOT part of this PHB
'show and fill Orgunits part of this PHB and set color
'we expect that timelinedata is already present (cfr update) AND startdate of timeline is SET
Dim i As Integer
Dim j As Integer
Dim icolcapa As Integer
Dim icoldate As Integer
Dim wctrange As Range
Dim ctrange As Range
Dim SearchRange As Range
Dim rCell As Range
Dim rReferenceCell As Range
Dim R As Range
Dim s As shape

On Error GoTo suberr
modStack.PushCallStack "Cost", "SetPHBOrgUnits"
Application.ScreenUpdating = False

bnoupdate = True
UpdateColor
Application.ScreenUpdating = False
Set wctrange = getRange(Plan, "Plan.WorkCostNameRange", 1, -2, 0, 1)
Set ctrange = getRange(Plan, "Plan.CostNameRange", 1, -2, 0, 1)
icolcapa = Me.Range("Cost.Col.Capa").Column
icoldate = Me.Range("Cost.Col.DateStart").Column
For i = 1 To 20
    If IsPHBCost(Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).Resize(1, 1).value, wctrange, ctrange) Then
        Application.ScreenUpdating = False
        Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).EntireRow.Hidden = False
        'reset rescells and capacells
        For j = 1 To 5
            Me.Cells(Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).row, icoldate + (j - 1)).value = 0
        Next
        'check checkbox
        If bResetChk Then Me.Cells(Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).row, bChkCol).value = "|fffd|"
        'fill costcells based on timelinedata in this sheet (below)
        FillCostData Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).Resize(1, 1).value, Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).row
    Else
        Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).EntireRow.Hidden = True
        'reset rescells and capacells
        For j = 1 To 5
            Me.Cells(Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).row, icoldate + (j - 1)).value = 0
        Next
        'uncheck checkbox
        Me.Cells(Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).row, bChkCol).value = "|fffd|"
    End If
Next
subend:
    bnoupdate = False
    Application.ScreenUpdating = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cost.SetPHBOrgUnits error:"
    Resume subend
End Sub

Private Sub FillCostData(sCost As String, iRow As Integer)
'for given dep we retreive data from timelinedata and put into irow
On Error GoTo suberr
modStack.PushCallStack "Cost", "FillCostData"
Dim i As Integer
Dim irowtimeline As Integer
Dim irowtimelinedate As Integer
Dim d As Date
Dim j As Integer
Dim y As Integer

'find timelinerow
irowtimelinedate = Me.Range("Cost.Start").row
For i = 1 To 20
    If Me.Cells(irowtimelinedate + i, Me.Range("Cost.Start").Column - 1).value = sCost Then
        irowtimeline = irowtimelinedate + i
        Exit For
    End If
Next
'loop dates
If irowtimeline > 0 Then
    For i = Me.Range("Cost.Start").Column To (Me.Range("Cost.Start").Column + 100)
        If Me.Cells(irowtimelinedate, i).value = "" Then Exit For
        y = Me.Cells(irowtimelinedate, i).value
        'find date(year) in orgtimeline
        For j = Me.Range("Cost.StartDate").Column To (Me.Range("Cost.StartDate").Column + 4)
            If Me.Cells(Me.Range("Cost.StartDate").row, j).value = y Then
                Me.Cells(iRow, j).value = Me.Cells(irowtimeline, i).value
                Exit For
            End If
        Next
    Next
End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cost.FilllCostData error:"
    Resume subend
End Sub

Private Sub UpdateColor()
Dim i As Integer
Dim s As String
Dim bfound As Boolean
Dim c As Range
On Error GoTo suberr
modStack.PushCallStack "Cost", "UpdateColor"

    With Me.ChartObjects("Cost.Chrt.Timephased").Chart
        For i = 1 To .SeriesCollection.Count - 1
            s = .SeriesCollection(i).Name
            If (s <> "") And (s <> "0") Then
                bfound = False
                For Each c In Admin.Range("Admin.Costtype")
                    If c.value = s Then
                        'set chart series color
                        .SeriesCollection(i).Interior.Color = c.Interior.Color 'Admin.Range("Admin.Org").Cells(i + 1, 1).Interior.Color
                        'set OrgUnitColor
                        Me.Range("Cost.Area.Org1").offset((i - 1) * 2, -1).Resize(1, 1).Interior.Color = c.Interior.Color 'Admin.GetDepartmentColor(Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).Resize(1, 1).Value)
                        Me.Range("Cost.Area.Org1").offset((i - 1) * 2, -1).Resize(1, 1).Font.Color = modApp.GetContrastColor(c.Interior.Color)
                        bfound = True
                        Exit For
                    End If
                Next
                If Not bfound Then
                    For Each c In Admin.Range("Admin.WorkCosttype")
                        If c.value = s Then
                            'set chart series color
                            .SeriesCollection(i).Interior.Color = c.Interior.Color 'Admin.Range("Admin.Org").Cells(i + 1, 1).Interior.Color
                            'set OrgUnitColor
                            Me.Range("Cost.Area.Org1").offset((i - 1) * 2, -1).Resize(1, 1).Interior.Color = c.Interior.Color 'Admin.GetDepartmentColor(Me.Range("Cost.Area.Org1").offset((i - 1) * 2, 0).Resize(1, 1).Value)
                            Me.Range("Cost.Area.Org1").offset((i - 1) * 2, -1).Resize(1, 1).Font.Color = modApp.GetContrastColor(c.Interior.Color)
                            bfound = True
                            Exit For
                        End If
                    Next
                End If
                If Not bfound Then
                    .SeriesCollection(i).Interior.Color = RGB(255, 255, 255)
                    Me.Range("Cost.Area.Org1").offset((i - 1) * 2, -1).Resize(1, 1).Interior.Color = RGB(255, 255, 255)
                    Me.Range("Cost.Area.Org1").offset((i - 1) * 2, -1).Resize(1, 1).Font.Color = RGB(255, 255, 255)
                End If
            Else
                .SeriesCollection(i).Interior.Color = RGB(255, 255, 255)
                Me.Range("Cost.Area.Org1").offset((i - 1) * 2, -1).Resize(1, 1).Interior.Color = RGB(255, 255, 255)
                Me.Range("Cost.Area.Org1").offset((i - 1) * 2, -1).Resize(1, 1).Font.Color = RGB(255, 255, 255)
            End If
        Next
    End With

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Work.UpdateColor error:"
    Resume subend
End Sub

Private Function IsPHBCost(s As String, wctrange As Range, ctrange As Range) As Boolean
Dim i As Integer
s = LCase(s)
IsPHBCost = False
If Not wctrange Is Nothing Then
    For i = wctrange.Columns.Count / 5 - 1 To 0 Step -1
        If LCase(wctrange.offset(0, i * 5).Resize(1, 1).value) = s Then
            IsPHBCost = True
            Exit For
        End If
    Next
End If
If Not IsPHBCost Then
    If Not ctrange Is Nothing Then
        For i = ctrange.Columns.Count / 5 - 1 To 0 Step -1
            If LCase(ctrange.offset(0, i * 5).Resize(1, 1).value) = s Then
                IsPHBCost = True
                Exit For
            End If
        Next
    End If
End If
End Function

'Private dPlotAreaLeft As Double

Public Sub cmdShowDataTable_Click()
    Dim i As Integer
    Dim ChartObject As Chart
    Dim iYAxisLeft As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Cost", "cmdShowDataTable_Click"
    
    UnprotectSheet Me
    
    i = (Plan.Range("Plan.WorkCostColumns").Columns.Count - 2) / Plan.Range("Plan.WorkCostTemplate").Columns.Count
    i = i + (Plan.Range("Plan.CostColumns").Columns.Count - 2) / Plan.Range("Plan.CostTemplate").Columns.Count
    
    Set ChartObject = Me.ChartObjects(3).Chart
    'If dPlotAreaLeft = 0 Then dPlotAreaLeft = ChartObject.PlotArea.Left
    iYAxisLeft = ChartObject.Axes(xlCategory, xlPrimary).Left
    ChartObject.HasLegend = False
    ChartObject.HasDataTable = True
    Cost.Range(Cells(getRange(Cost, "Cost.Chrt.Timephased.TL", 0, 1, 0, 0).row, 1), Cells(getRange(Cost, "Cost.Chrt.Timephased.BR", 0, 1, 0, 0).row, 1)).EntireRow.RowHeight = 12 + ((i + 1) * 1.5) ' 1 is for the table header
    If ChartObject.HasTitle Then ChartObject.ChartTitle.Text = ""
   
    'der untenstehende Code reduziert die durchschnittlich ca. 200 Schritte,
    'die zum Geradeziehen des Charts ben|fffd|tigt werden,  auf 6-8 Schritte
    Dim movement As Integer                            ' in pixels
    movement = 64  '128                                ' start with powers of 2
    'move over edge once
    While ChartObject.Axes(xlCategory, xlPrimary).Left > iYAxisLeft
        ChartObject.PlotArea.Left = ChartObject.PlotArea.Left - movement
        ChartObject.PlotArea.Width = ChartObject.PlotArea.Width + movement
    Wend
    movement = movement / 2
    While movement > 0
        If Abs(ChartObject.Axes(xlCategory, xlPrimary).Left - iYAxisLeft) <= 1 Then     'benutzen verschiedene Koordinatensysteme, daher die Toleranz
            movement = 0
        ElseIf ChartObject.Axes(xlCategory, xlPrimary).Left < iYAxisLeft Then           'move right
            ChartObject.PlotArea.Left = ChartObject.PlotArea.Left + movement
            ChartObject.PlotArea.Width = ChartObject.PlotArea.Width - movement
            movement = movement / 2
        Else                                                                            'move left
            ChartObject.PlotArea.Left = ChartObject.PlotArea.Left - movement
            ChartObject.PlotArea.Width = ChartObject.PlotArea.Width + movement
            movement = movement / 2
        End If
    Wend
    
    'save new positions to config
    Config.SetChartPlotLeft Me, Me.ChartObjects(3), ChartObject.PlotArea.Left
    modShapes.SetCharts Me
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cost.cmdShowDataTable_Click error:"
    Resume subend
End Sub

Public Sub cmdHideDataTable_Click()
    Dim ChartObject As Chart
    
    On Error GoTo suberr
    modStack.PushCallStack "Cost", "cmdHideDataTable_Click"
    
    UnprotectSheet Me
    
    Set ChartObject = Me.ChartObjects(3).Chart
    ChartObject.HasDataTable = False
    Cost.Range(Cells(getRange(Cost, "Cost.Chrt.Timephased.TL", 0, 1, 0, 0).row, 1), Cells(getRange(Cost, "Cost.Chrt.Timephased.BR", 0, 1, 0, 0).row, 1)).EntireRow.RowHeight = 12
    ChartObject.HasLegend = True
    If ChartObject.HasTitle Then ChartObject.ChartTitle.Text = ""
    
    'If dPlotAreaLeft <> 0 Then Config.SetChartPlotLeft Me, Me.ChartObjects(3), dPlotAreaLeft  'restore chart properties
    Config.SetChartPlotLeft Me, Me.ChartObjects(3), -1
    modShapes.SetCharts Me
    modShapes.SetCharts Me
    modShapes.SetCharts Me
    modShapes.SetCharts Me
    
    With ChartObject.Legend
        .Left = 20
        .Height = ChartObject.PlotArea.Height - 40
        .Top = 20 'ChartObject.PlotArea.Top + ChartObject.PlotArea.Height - 80
    End With
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cost.cmdHideDataTable_Click error:"
    Resume subend
End Sub

Public Sub cmdUpdate_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Cost", "cmdUpdate_Click"
    If IsDemoVersion Then GoTo subend
    UpdateCost True
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cost.cmdUpdate_Click error:"
    Resume subend
End Sub


Friend Sub UpdateCost(Validate As Boolean)
    Dim irH As Integer
    Dim irF As Integer
    Dim icL As Integer
    Dim iMonths As Integer
    Dim ic As Integer
    Dim icN As Integer
    Dim R As Range
    Dim i As Integer
    Dim sr As String
    Dim dStartP As Date
    Dim dFinishP As Date
    Dim icS As Integer
    Dim icT As Integer
    Dim d As Double
    Dim dmax As Double
    Dim newseries As Series
    Dim s As String
    Dim iYears As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Cost", "UpdateCost"
    bnoupdate = True

    'copy phases in level 1
    irH = Sheets("Plan").Range("Plan.ProjectHeader").row
    irF = Sheets("Plan").Range("Plan.ProjectFooter").row
    icL = Sheets("Plan").Range("Plan.LevelColumn").Column
    icN = Sheets("Plan").Range("Plan.TaskNameColumn").Column
    ic = Sheets("Plan").Range("Plan.CostTotalBaseColumn").Column
    icS = Sheets("Plan").Range("Plan.StartColumn").Column
    icT = Sheets("Plan").Range("Plan.TypColumn").Column
        
    sr = "Cost.Phases"
    Range(sr).ClearContents
    If Range(sr).rows.Count > 10 Then
        Range(sr).offset(1, 0).Resize(Range(sr).rows.Count - 10).EntireRow.Delete
    End If
    Range(Range("Cost.Start").EntireRow, Cells(Me.rows.Count, 1).EntireRow).ClearContents
    
    
    If Validate Then
        Plan.ValidatePlan
    End If

    UnprotectSheet Me
    
    Dim t As TPGTask
    Set t = New TPGTask
    
    Dim startRowIndex As Integer
    Dim endRowIndex As Integer
    Dim currentIndex As Integer
    Dim PhaseCount As Integer

    startRowIndex = Plan.Range("Plan.ProjectHeader").row + 1
    endRowIndex = Plan.Range("Plan.ProjectFooter").row - 1

    For currentIndex = startRowIndex To endRowIndex
        t.SetIndex currentIndex
        If t.IsPhase Then PhaseCount = PhaseCount + 1
    Next
    
    For i = Range(sr).rows.Count - 2 To PhaseCount - 1
        TableAddRow Me, sr
    Next
    
    Dim ChartObject As Chart
    Set ChartObject = Me.ChartObjects(2).Chart
    'Set ChartObject = Me.ChartObjects("Cost.Chrt.Progress").Chart
    
    ChartObject.SeriesCollection(1).Values = "=" & Me.Name & "!R" & Range(sr).row + 1 & "C10:R" & Range("Cost.PhaseInsertionPoint").row - 1 & "C10"
    
    i = 1
    For Each R In Sheets("Plan").Range(Sheets("Plan").Cells(irH + 1, icL), Sheets("Plan").Cells(irF - 1, icL))
        t.SetIndex R.row
        If t.IsPhase Then
            Range(sr).Cells(i + 1, 1) = t.GetTaskName 'Name
            Range(sr).Cells(i + 1, 2) = t.GetCellValue2(ic) 'Base
            Range(sr).Cells(i + 1, 3) = t.GetCellValue2(ic + 1) 'change
            Range(sr).Cells(i + 1, 4) = t.GetCellValue2(ic + 2) 'Actual
            Range(sr).Cells(i + 1, 5) = t.GetCellValue2(ic + 3) 'Remain
            Range(sr).Cells(i + 1, 6) = t.GetCellValue2(ic + 4) 'Forecast
            If Range(sr).Cells(i + 1, 2) <> 0 Then d = Range(sr).Cells(i + 1, 4) / Range(sr).Cells(i + 1, 2)
            If d > dmax Then dmax = d
            
            ChartObject.SeriesCollection(1).Points(i).Interior.Color = IIf(d > 1, RGB(227, 0, 27), RGB(127, 127, 127))

            i = i + 1
        End If
    Next
    
    dmax = (VBA.CInt(dmax * 10) + 1) / 10
    
    If dmax < 1 Then dmax = 1
    ChartObject.Axes(xlValue).MaximumScale = dmax
    
    s = "Cost.Phases"
    
    'build timeline
    If Sheets("Plan").Cells(irH, icS).value = "" Or Sheets("Plan").Cells(irH, icS + 1).value = "" Then
        Me.HideAllOrgUnits
        GoTo subend
    End If
    dStartP = Sheets("Plan").Cells(irH, icS).value
    dFinishP = Sheets("Plan").Cells(irH, icS + 1).value
    Range("Cost.Start").value = Year(dStartP)
    iYears = DateDiff("yyyy", dStartP, dFinishP)
    For i = 0 To iYears
        Range("Cost.Start").offset(0, i).value = Year(DateAdd("yyyy", i, dStartP))
    Next
    
    ' Count CostTypes
    Dim WorkCostTypesCount As Integer
    Dim CostTypesCount As Integer
    WorkCostTypesCount = (Plan.Range("Plan.WorkCostNameRange").Columns.Count - 2) / 5
    CostTypesCount = (Plan.Range("Plan.CostNameRange").Columns.Count - 2) / 5
    
    Range(Range("Cost.Start").offset(0, -1), Range("Cost.Start").End(xlToRight).offset(WorkCostTypesCount + CostTypesCount, 0)).Font.Color = RGB(242, 242, 242)
    
    If CostTypesCount + WorkCostTypesCount > 0 Then
    
        'last worktype for first series ...
        If CostTypesCount > 0 Then
            i = CostTypesCount + WorkCostTypesCount
            GetTimePhasedDataYears Plan.Range("Plan.CostNameRange").Column + 1 + (CostTypesCount - 1) * 5, Cost.Range("Cost.Start").offset(i, -1), dStartP, dFinishP
        Else
            i = WorkCostTypesCount
            GetTimePhasedDataYears Plan.Range("Plan.WorkCostNameRange").Column + 1 + (i - 1) * 5, Cost.Range("Cost.Start").offset(i, -1), dStartP, dFinishP
        End If
        
        'all other series ..
        For i = CostTypesCount + WorkCostTypesCount - 1 To WorkCostTypesCount + 1 Step -1
            GetTimePhasedDataYears Plan.Range("Plan.CostNameRange").Column + 1 + (i - WorkCostTypesCount - 1) * 5, Cost.Range("Cost.Start").offset(i, -1), dStartP, dFinishP
        Next
        
        If CostTypesCount = 0 Then WorkCostTypesCount = WorkCostTypesCount - 1
        For i = WorkCostTypesCount To 1 Step -1
            GetTimePhasedDataYears Plan.Range("Plan.WorkCostNameRange").Column + 1 + (i - 1) * 5, Cost.Range("Cost.Start").offset(i, -1), dStartP, dFinishP
        Next
        
        'set startdate of chart timeline
        Me.Range("Cost.StartDate").value = Me.Range("Cost.Start").value
        Me.Calculate
        
        'set budget
        SetBudget
        bnoupdate = True
        
        'we now have timelinedata for PHB resources and startdate of timeline is set
        'we can now show the PHB Orgunits
        Me.SetPHBOrgUnits
    Else
        'set budget
        SetBudget
        bnoupdate = True
    End If
    modShapes.SetCharts Me
    
subend:
    bnoupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cost.UpdateCost error:"
    Resume subend
End Sub

Public Sub reset()
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "Cost", "reset"
    bnoupdate = True
    Me.Range("Cost.StartDate").value = Year(Now)
    Me.Range("Cost.Budget").ClearContents
    For i = Me.Range("Cost.StartDate").Column To (Me.Range("Cost.StartDate").Column + 4)
        Me.Cells(Me.Range("Cost.Budget").row, i).value = 0
    Next
    bnoupdate = False
    Me.HideAllOrgUnits

subend:
    bnoupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cost.reset error:"
    Resume subend
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
If bnoupdate Then Exit Sub

If Target.Cells.Count = 2 Then
    If Target.Column = bChkCol + 1 Then Cancel = True
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
If bnoupdate Then Exit Sub
'Debug.Print target.Address + " CHANGE"
If Target.Address = Me.Range("Cost.StartDate").Address Then
    UnprotectSheet Me
    Me.SetPHBOrgUnits False
    SetBudget
ElseIf Target.Cells.Count = 1 Then
    'edit of capa data
    If (Target.row = Range("Cost.Budget.Row").row) Then
        If (Target.Column >= Me.Range("Cost.StartDate").Column) And (Target.Column <= Me.Range("Cost.EndDate").Column) Then
            UpdateBudget Target
        End If
    End If
End If
End Sub

Private Sub SetBudget()
On Error GoTo suberr
modStack.PushCallStack "Work", "SetBudget"
Dim i As Integer
Dim irowtimeline As Integer
Dim icolcapa As Integer
Dim d As Date
Dim j As Integer
Dim z As Integer
Dim iyear As Integer
Dim tlist As TPGTokenizer
Dim ibudgetyear As Integer
Dim irowbudget As Integer

bnoupdate = True
irowtimeline = Me.Range("Cost.StartDate").row
icolcapa = Me.Range("Cost.Col.Capa").Column
irowbudget = Me.Range("Cost.Budget").row
Set tlist = New TPGTokenizer

If Me.Range("Cost.Budget").value <> "" Then
    tlist.FromString Me.Range("Cost.Budget").value
End If

If tlist.Count > 0 Then
    For j = Me.Range("Cost.StartDate").Column To (Me.Range("Cost.StartDate").Column + 4)
        Me.Cells(irowbudget, j).value = 0
        iyear = Me.Cells(irowtimeline, j).value
        For z = 1 To tlist.Count
            ibudgetyear = CInt(Left(tlist.Item(z), InStr(tlist.Item(z), ";") - 1))
            If iyear = ibudgetyear Then
                Me.Cells(irowbudget, j).value = CDbl(Right(tlist.Item(z), Len(tlist.Item(z)) - InStr(tlist.Item(z), ";")))
                Exit For
            End If
        Next
    Next
Else
    For j = Me.Range("Cost.StartDate").Column To (Me.Range("Cost.StartDate").Column + 4)
        Me.Cells(irowbudget, j).value = 0
    Next
End If

subend:
    bnoupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cost.SetBudget error:"
    Resume subend
End Sub

Private Sub UpdateBudget(ByVal Target As Range)
Dim icapacol As Integer
Dim idaterow As Integer
Dim iyear As Integer
Dim s As String
Dim s2 As String
Dim i As Integer
Dim tlist As TPGTokenizer

On Error GoTo suberr
'NO MODSTACK USE FOR PERFORMANCE REASONS
'modStack.PushCallStack "Work", "UpdateCapa"
bnoupdate = True
icapacol = Me.Range("Cost.Col.Capa").Column
idaterow = Me.Range("Cost.StartDate").row

iyear = Me.Cells(idaterow, Target.Column)
s = Me.Cells(Target.row, icapacol).value
Set tlist = New TPGTokenizer
If s <> "" Then
    tlist.FromString s
End If
If tlist.Count > 0 Then
    For i = 1 To tlist.Count
        s2 = tlist.Item(i)
        s2 = Left(s2, InStr(s2, ";") - 1)
        If CInt(s2) = iyear Then
            tlist.Delete (i)
            Exit For
        End If
    Next
    If (Target.value <> "") Then
        If (IsNumeric(Target.value)) Then
            If Target.value > 0 Then tlist.Add Trim(CStr(iyear)) + ";" + Trim(CStr(Target.value))
        End If
    End If
Else
    If (Target.value <> "") Then
        If (IsNumeric(Target.value)) Then
            If Target.value > 0 Then tlist.Add Trim(CStr(iyear)) + ";" + Trim(CStr(Target.value))
        End If
    End If
End If
Me.Cells(Target.row, icapacol).value = tlist.ToString
'        SetSum Target.Row, tlist.ToString
Set tlist = Nothing

subend:
    bnoupdate = False
'    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cost.UpdateBudget error:"
    Resume subend
End Sub

Public Function CreateXml(xmlDom As Variant) As Variant
Dim n As Variant
On Error GoTo suberr
modStack.PushCallStack "Cost", "CreateXml"
Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
AddNode xmlDom, n, "budget", Me.Range("Cost.Budget").value
Set CreateXml = n
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Cost.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, sversion As String)
Dim i As Integer
Dim s As String
On Error GoTo suberr
modStack.PushCallStack "Cost", "ImportXml"
If (sversion >= "3.0.00") And (Not Node Is Nothing) Then
    Me.Range("Cost.Budget").value = Node.SelectSingleNode("budget").Text
End If
subend:
modStack.PopCallStack
Exit Sub
suberr:
AppErrMsg "Cost.ImportXml error:"
Resume subend
End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
If bnoupdate Then Exit Sub
'we need to capture click in checkbox cell so that we can change checkbox value (checked/unchecked)
If (Target.Cells.Count = 1) Then
    If Target.Column = bChkCol Then
        'if cell contains these characters we can be sure that it is a checkbox
        If (Target.Cells(1, 1).value = "|fffd|") Then
            bnoupdate = True
            Target.Cells(1, 1).value = "|fffd|"
            Me.Cells(Target.row, bChkCol + 1).Select
            bnoupdate = False
        ElseIf (Target.Cells(1, 1).value = "|fffd|") Then
            bnoupdate = True
            Target.Cells(1, 1).value = "|fffd|"
            Me.Cells(Target.row, bChkCol + 1).Select
            bnoupdate = False
        End If
    End If
End If
End Sub
Attribute VB_Name = "CostPlan"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub cmdUpdate_Click()
    On Error GoTo suberr
    modStack.PushCallStack "CostPlan", "cmdUpdate_Click"
    If IsDemoVersion Then GoTo suberr
    UpdateCostPlan True
    CostPlan.Range("CostPlan.H2").Resize(1, 1).offset(1, 0).Activate
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CostPlan.cmdUpdate_Click error:"
    Resume subend
End Sub

Public Sub UpdateCostPlan(Validate As Boolean)
    'modified for SALK
    Exit Sub
    On Error GoTo suberr
    modStack.PushCallStack "CostPlan", "UpdateCostPlan"
    
    If Validate Then
        Plan.ValidatePlan
    End If
    
    Dim rangePrintArea As Range
    Dim rH0 As Range
    
    Set rangePrintArea = Range(CostPlan.PageSetup.PrintArea)
    Set rangePrintArea = Range(Cells(2, 2), Cells(3, rangePrintArea.Columns.Count))
    rangePrintArea.Borders(xlEdgeRight).LineStyle = xlLineStyleNone
    
    Dim rAll As Range
    Set rAll = Range(Range("CostPlan.H2").offset(2, 0), Cells(CostPlan.rows.Count, 1)).EntireRow
    rAll.Delete
    
    Dim rPlan As Range
    Dim Target As Range
    
    Set rPlan = Plan.Range(Intersect(Plan.Range("Plan.Header"), Plan.Range("Plan.WBSColumn")), Intersect(Plan.Range("Plan.ResponsibleColumn"), Plan.Range("Plan.ProjectFooter")))
    Set Target = CostPlan.Range("CostPlan.H2").Resize(1, 1).offset(2, 0)
        '/**Fix for 1705**/
        'rPlan.Copy
        RCopy rPlan
        Target.PasteSpecial xlFormats
        'rPlan.Copy
        Target.PasteSpecial xlPasteValuesAndNumberFormats
        'rPlan.Copy
        Target.PasteSpecial Paste:=8    'xlPasteColumnWidths
    
    Dim functionsOffset As Integer
    functionsOffset = rPlan.Columns.Count
    
    Set rPlan = Plan.Range(Intersect(Plan.Range("Plan.Header"), Plan.Range("Plan.WorkCostTemplate").offset(0, 6)), Intersect(Plan.Range("Plan.ProjectFooter"), Plan.Range("Plan.CostTotalForecastColumn")))
    Set Target = CostPlan.Range("CostPlan.H2").Resize(1, 1).offset(2, functionsOffset)
        '/**Fix for 1705**/
        'rPlan.Copy
        RCopy rPlan
        Target.PasteSpecial xlFormats
        'rPlan.Copy
        Target.PasteSpecial xlPasteValuesAndNumberFormats
        'rPlan.Copy
        Target.PasteSpecial Paste:=8    'xlPasteColumnWidths
          
    'Set Border
    Dim rightlowercorner As Range
    Set rightlowercorner = Cells(Target.row + rPlan.rows.Count, Target.Column + rPlan.Columns.Count)
    rightlowercorner.EntireColumn.ColumnWidth = 1
    rightlowercorner.EntireRow.RowHeight = 10
    Me.Range(Cells(2, 2), Cells(2, Target.Column + rPlan.Columns.Count)).Interior.Pattern = xlNone
    Me.Range(Cells(5, 2), Cells(5, Target.Column + rPlan.Columns.Count)).Interior.Pattern = xlNone
    Me.Range(Cells(rightlowercorner.row, 2), Cells(rightlowercorner.row, Target.Column + rPlan.Columns.Count)).Interior.Pattern = xlNone
    Me.Range(Cells(5, 2), Cells(rightlowercorner.row, 2)).Interior.Pattern = xlNone
    Me.Range(Cells(2, rightlowercorner.Column), Cells(rightlowercorner.row, rightlowercorner.Column)).Interior.Pattern = xlNone
    Me.Range(Cells(1, rightlowercorner.Column + 1), Cells(5, rightlowercorner.Column + 100)).Interior.Pattern = xlNone
    Me.Range(Cells(1, rightlowercorner.Column + 1), Cells(5, rightlowercorner.Column + 100)).Borders.LineStyle = xlNone
    Me.Range(Cells(1, rightlowercorner.Column + 1), Cells(5, rightlowercorner.Column + 100)).Interior.Color = RGB(242, 242, 242)
               
    'Set Print Area
    Set rangePrintArea = Range(Cells(2, 2), rightlowercorner)
    rangePrintArea.BorderAround xlContinuous, xlThin
    rangePrintArea.Borders(xlEdgeBottom).Color = RGB(166, 166, 166)
    rangePrintArea.Borders(xlEdgeTop).Color = RGB(166, 166, 166)
    rangePrintArea.Borders(xlEdgeLeft).Color = RGB(166, 166, 166)
    rangePrintArea.Borders(xlEdgeRight).Color = RGB(166, 166, 166)
    CostPlan.PageSetup.PrintArea = rangePrintArea.Address
    
    'adjust H0
    Set rH0 = CostPlan.Range("C3", Cells(4, rightlowercorner.Column - 1))
    rH0.Interior.Color = Range("CostPlan.H0").Resize(1, 1).Interior.Color
    rH0.Borders.LineStyle = xlNone
    ActiveWorkbook.Names.Add Name:="CostPlan.H0", RefersTo:=rH0
    modShapes.PositionLogo_v3 Me
    
    'Delete unnecessary rows
    Range(CostPlan.Range("CostPlan.H2").offset(2, 0).EntireRow, CostPlan.Range("CostPlan.H2").offset(4, 0).EntireRow).Delete xlShiftUp
    
    CostPlan.Cells.locked = True
    CostPlan.Cells(8, 1).EntireRow.Hidden = True
    'hide weighting column!! reason: when copying from plan: the conditional formatting rules are copied, but the
    'copied rules refer to the wrong cells in costplan, so it does not function correctly
    CostPlan.Cells(1, 13).EntireColumn.Hidden = True
    Me.Activate
    If ActiveSheet Is Me Then
        ThisWorkbook.Windows(1).FreezePanes = False
        CostPlan.Range("K10").Select
        ThisWorkbook.Windows(1).FreezePanes = True
    End If
    
    
subend:
    
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CostPlan.UpdateCostPlan error:"
    Resume subend
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Cover"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public noupdate As Boolean

Public Sub ddlChangeLOC()
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "ddlChangeLOC"

    UnprotectSheet Cover
    SetWBProtection False
    Loc.ChangeLOC
    If Not modRibbon.bnoRibbonUpdate Then modRibbon.RefreshRibbon

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.ddlChangeLOC error:"
    Resume subend
End Sub

Private Function AssertExcelVersion() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "AssertExcelVersion"

    If Application.Version = "12.0" Or Application.Version = "14.0" Or Application.Version = "15.0" Or Application.Version = "16.0" Then
        AssertExcelVersion = True
    Else
        AppInfoMsg appGetLOCText("msgPDFExportNotSupported")
        AssertExcelVersion = False
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Cover.AssertExcelVersion error:"
    Resume subend
End Function


Public Sub cmdImport_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "cmdImport_Click"

    If IsDemoVersion Then GoTo subend
    ImportPHB

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.cmdImport_Click error:"
    Resume subend

End Sub

Public Sub cmdPublish2SQL_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "cmdPublish2SQL_Click"

    modPMCCSQL.ExportPHB2SQLServer
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.cmdPublish2SQL_Click error:"
    Resume subend
End Sub

Public Sub cmdExport_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "cmdExport_Click"

    ExportPHB

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.cmdExport_Click error:"
    Resume subend
End Sub

Public Sub cmdImportPicture_Click()
    Dim sname As Variant
    Dim s As Object
    Dim dAspectRatio As Double
    
    Const iLowerBorder = 530
    Const iUpperBorder = 85
    Const iRightBorder = 485
    Const iLeftBorder = 19
    Const iMaxHeight = iLowerBorder - iUpperBorder  ' 445
    Const iMaxWidth = iRightBorder - iLeftBorder    ' 480
    
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "cmdImportPicture_Click"
    
    On Error Resume Next
    Set s = Cover.Shapes("coverimg")
    On Error GoTo suberr
    
    sname = LCase(Application.GetOpenFilename("All Files (*.*),*.*, Bitmaps (*.bmp),*.bmp, GIF Images (*.gif),(*.gif), JPEG Images (*.jpg),(*.jpg)"))
    If TypeName(ActiveSheet) <> "Worksheet" Then GoTo subend
    If sname <> False Then
        If Not s Is Nothing Then
           s.Delete
        End If
        
        If Right(sname, 3) = "bmp" Or Right(sname, 3) = "gif" Or Right(sname, 3) = "jpg" Then
            'for 2007 we need to unprotect
            If Application.Version = "12.0" Then UnprotectSheet Me
            Cover.Range("Cover.Picture").EntireRow.Hidden = False
            Cover.Shapes.AddPicture(sname, False, True, 37, 100, 475, 430).Name = "coverimg"
        End If
        
        dAspectRatio = ActiveSheet.Shapes("coverimg").Width / ActiveSheet.Shapes("coverimg").Height
    
        If dAspectRatio < (iMaxWidth / iMaxHeight) Then                         'fit to y
            If ActiveSheet.Shapes("coverimg").Height > iMaxHeight Then
                ActiveSheet.Shapes("coverimg").Height = iMaxHeight
                ActiveSheet.Shapes("coverimg").Width = iMaxHeight / dAspectRatio
            End If
        Else                                                                    'fit to x
            If ActiveSheet.Shapes("coverimg").Width > iMaxHeight Then
                ActiveSheet.Shapes("coverimg").Width = iMaxHeight
                ActiveSheet.Shapes("coverimg").Height = iMaxHeight / dAspectRatio
            End If
        End If
        If ActiveSheet.Shapes("coverimg").Height < iMaxHeight Then
            ActiveSheet.Shapes("coverimg").Height = iMaxHeight
            ActiveSheet.Shapes("coverimg").Width = iMaxHeight / dAspectRatio
        End If
        If ActiveSheet.Shapes("coverimg").Width < iMaxHeight Then
            ActiveSheet.Shapes("coverimg").Width = iMaxHeight
            ActiveSheet.Shapes("coverimg").Height = iMaxHeight / dAspectRatio
        End If
    
        With ActiveSheet.Shapes("coverimg")
            .Top = (iMaxHeight - ActiveSheet.Shapes("coverimg").Height) / 2 + iUpperBorder
            .Left = (iMaxHeight - ActiveSheet.Shapes("coverimg").Width) / 2 + iLeftBorder
        End With
    End If

    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.cmdImportPicture_Click error:"
    Resume subend
End Sub

Public Sub cmdClearPicture_Click()
    Dim s As Object
    
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "cmdClearPicture_Click"
    
    On Error Resume Next
    Set s = Cover.Shapes("coverimg")
    On Error GoTo suberr

    If Not s Is Nothing Then
       'for 2007 we need to unprotect
       If Application.Version = "12.0" Then UnprotectSheet Me
       s.Delete
    End If
    
    Cover.Range("Cover.Picture").EntireRow.Hidden = True
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.cmdClearPicture_Click error:"
    Resume subend
End Sub


Public Sub cmdFormatPicture_Click()
    Dim s As Object
    
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "cmdFormatPicture_Click"
    
    On Error Resume Next
    Set s = Cover.Shapes("coverimg")
    On Error GoTo suberr

    If Not s Is Nothing Then
        'for 2007 we need to unprotect
        If Application.Version = "12.0" Then UnprotectSheet Me
        modApp.EnableScreenUpdating
        frmImageFormat.Show
        modApp.DisableScreenUpdating
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.cmdFormatPicture_Click error:"
    Resume subend
End Sub

Public Sub cmdAdmin_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "cmdAdmin_Click"
    
    If IsDemoVersion Then GoTo subend
    
    If Admin.visible = xlSheetVisible Then
        Admin.Activate
    Else
        frmPW.Show
    End If
subend:
'    ProtectWorkbook
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.cmdAdmin_Click error:"
    Resume subend
End Sub

Public Sub cmdInsertRole_Click()
    Dim s As String
    Dim i As Integer, offs As Integer
    Dim addr As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "cmdInsertRole_Click"
    
    s = "Cover.Owner.Table"
    If InRange(ActiveCell, Cover.Range(s)) Then
                
        Cover.noupdate = True
        
        'added for CRF
        i = Cover.Range("Cover.ProjectSponsor").row
        
        TableInsertRow Cover, s, ActiveCell.row
        FormatTeam
        
        'added for CRF
        offs = Cover.Range("Cover.ProjectSponsor").row - i
        ThisWorkbook.Names.Add "Cover.ProjectSponsor", "=" & Cover.Name & "!" & _
                               Cover.Range("Cover.ProjectSponsor").Resize(Cover.Range("Cover.ProjectSponsor").rows.Count + offs, 1).offset(0 - offs, 0).Address
        
        
        Cover.noupdate = False
        GoTo subend
    End If
    
    s = "Cover.Manager.Table"
    If InRange(ActiveCell, Cover.Range(s)) Then
        If Not ((sActiveLicense = "M") Or (sActiveLicense = "K") Or (sActiveLicense = "C")) Then
            
            Cover.noupdate = True
            
            'added for CRF
            i = Cover.Range("Cover.ProjectManager").row
            
            TableInsertRow Cover, s, ActiveCell.row
            FormatTeam
            
            'added for CRF
            offs = Cover.Range("Cover.ProjectManager").row - i
    
            ActiveWorkbook.Names.Add Name:="Cover.ProjectManager", RefersTo:="=" & Cover.Name & "!" & _
                                   Cover.Range("Cover.ProjectManager").Resize(Cover.Range("Cover.ProjectManager").rows.Count + offs, 1).offset(0 - offs, 0).Address
            
            Cover.noupdate = False
            GoTo subend
        End If
    End If

   
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.cmdInsertRole_Click error:"
    Resume subend
End Sub

Public Sub cmdDeleteRole_Click()
    Dim s As String
    Dim tablename As String
    Dim member As TPGMember
    
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "cmdDeleteRole_Click"
    
    s = "Cover.Owner.Table"
    If InRange(ActiveCell, getRange(Cover, s, -2, 1, 1, 1)) Then
        tablename = s
    End If
    
    s = "Cover.Manager.Table"
    If InRange(ActiveCell, getRange(Cover, s, -2, 1, 1, 1)) Then
        If Not ((sActiveLicense = "M") Or (sActiveLicense = "K") Or (sActiveLicense = "C")) Then
            tablename = s
        Else
            tablename = ""
        End If
    End If
    
    
    
    If tablename <> "" Then
        If Range(tablename).rows.Count > 3 Then
            If appQOCMsg(appGetLOCText("DeleteRow")) = vbOK Then
                
                noupdate = True
                Set member = New TPGMember
                member.LoadMemberFromCover Cover.Cells(ActiveCell.row, Cover.Range(tablename).Column)
                ActiveCell.EntireRow.Delete
                FormatTeam
                If member.Name <> "" Then
                    
                    
                    member.RemoveMemberFromContract
                    member.RemoveMemberFromTeam
                    Team.SetNames
                End If
                RefreshManagementLabels
                noupdate = False
                
                
                
            End If
        End If
        GoTo subend
    End If
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    
    
    
    AppErrMsg "Cover.cmdDeleteRole_Click error:"
    Resume subend

End Sub

Private Sub Worksheet_Activate()
    If Me.noupdate Then Exit Sub
    Dim i As Integer
    If ModuleExists("WPWeighting") Then
        Me.Range("Cover.Weighting").EntireRow.Hidden = False
    Else
        Me.Range("Cover.Weighting").EntireRow.Hidden = True
        Me.Range("Cover.Weighting").ClearContents
    End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim s As String
    Dim tablename As String
    Dim sM As String
    Dim sO As String
    Dim m As TPGMember
    Dim c As Range
    Dim R As Range
    Dim sinittime As String
    Dim rCell As Range
    
    
'sinittime = TimeStamp(4)
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "Worksheet_Change"
    
    If noupdate Then GoTo Fit
        
        s = "Cover.ProjectName"
        If InRange(Target, Range(s)) Then
            Dim Count As Integer
            Dim res As Integer
            res = 1
            For Count = 1 To Len(Target.Text)           'Increment thru
                Select Case Mid(Target.Text, Count, 1)
                    Case vbLf                'If it is a comma
                        res = res + 1 'Add 1 to list
                    Case Else           'Do nothing
                End Select
            Next
'            Target.EntireRow.RowHeight = 15 * res
            If res > 1 Then
                Target.EntireRow.RowHeight = 16 * res
            Else
                'this to allow autofit in case wordwrap is triggered
                Target.EntireRow.AutoFit
                If Target.EntireRow.RowHeight < 16 Then Target.EntireRow.RowHeight = 16
            End If
            'activate autofit on plan.headerrow
            Plan.Range("Plan.ProjectHeader").EntireRow.AutoFit
        End If
        
        s = "Cover.Complexity"
        If InRange(Target, Range(s)) Then
            
            'switch to program  is not possible when phb in personplanningmode
            If (InStr(LCase(Target.value), "program") > 0) Then
                If Plan.PersonsInPlan Then
                    AppStopMsg appGetLOCText("msgProgSwitchNotPossible")
                    Target.value = ""
                    GoTo subend
                Else
                    Set rCell = Team.Range("Team.IsResourceRange").Find("x", , xlValues, xlWhole)
                    'persons are selected as resource in team sheet, so we are in personplanning
                    If Not rCell Is Nothing Then
                        Set rCell = Nothing
                        AppStopMsg appGetLOCText("msgProgSwitchNotPossible")
                        Target.value = ""
                        GoTo subend
                    End If
                    Set rCell = Nothing
                End If
            End If
            
            sM = appGetLOCText("M")
            sO = appGetLOCText("O")
            
            contents.noupdate = True
            '131015
            'UnprotectWorkbook "pmccTPG:-)"
            SetWBProtection False
            
            Set R = contents.Range("Contents.Complexity")
            For Each c In R
                If IsError(c.value) Then
                    MsgBox "Check Admin"
                Else
                    'Excel.Application.EnableEvents = False
                    Select Case c.value
                    Case "-"
                            c.offset(0, 1).value = "-"
                            c.offset(0, 1).Interior.Color = RGB(242, 242, 242)
                            c.offset(0, 1).locked = True
                            c.offset(0, 2).value = "-"
                            c.offset(0, 2).Interior.Color = RGB(242, 242, 242)
                            c.offset(0, 2).locked = True
                            SetVisibility Sheets(c.offset(0, -1).value), xlSheetHidden
                    Case sM
                            c.offset(0, 1).value = "x"
                            c.offset(0, 1).Interior.Color = RGB(242, 242, 242)
                            c.offset(0, 1).locked = True
                            c.offset(0, 2).value = "x"
                            c.offset(0, 2).Interior.Color = RGB(255, 255, 255)
                            c.offset(0, 2).locked = False
                            SetVisibility Sheets(c.offset(0, -1).value), xlSheetVisible
                    Case sO
                            c.offset(0, 1).value = "-"
                            c.offset(0, 1).Interior.Color = RGB(255, 255, 255)
                            c.offset(0, 1).locked = False
                            c.offset(0, 2).value = "-"
                            c.offset(0, 2).Interior.Color = RGB(242, 242, 242)
                            c.offset(0, 2).locked = True
                            SetVisibility Sheets(c.offset(0, -1).value), xlSheetHidden
                    End Select
                    'Excel.Application.EnableEvents = True
                End If
            Next
            '131015 ProtectWorkbook
            contents.noupdate = False
            
        End If
        
        s = "Cover.Owner.Table"
        If InRange(Target, Range(s)) Then
            'this to allow autofit in case wordwrap is triggered
            Target.EntireRow.AutoFit
            If Target.EntireRow.RowHeight < 16 Then Target.EntireRow.RowHeight = 16
            
            tablename = s
        End If
        
        s = "Cover.Manager.Table"
        If InRange(Target, Range(s)) Then
            tablename = s
        End If
        
        If tablename <> "" Then
            Set m = New TPGMember
            m.LoadMemberFromCover Cover.Cells(Target.row, Range(s).Column)
            
            
            Cover.noupdate = True
            If m.Name = "" Then
                Cover.Cells(Target.row, Range(s).Column).value = ""
                m.RemoveMemberFromContract
                m.RemoveMemberFromTeam
            Else
                m.SyncToContract
                m.SyncToTeam
            End If
            
            
            RefreshManagementLabels
            Cover.noupdate = False
            Team.SetNames
            Team.DuplicateNameCheck Target.value
        End If
        
        CheckComplexity
        
Fit:
    s = "Cover.ProjectName"
    If InRange(Target, Range(s)) Then
       'this to allow autofit in case wordwrap is triggered
            Target.EntireRow.AutoFit
            If Target.EntireRow.RowHeight < 16 Then Target.EntireRow.RowHeight = 16
    End If
        
        
subend:
    modStack.PopCallStack
'Debug.Print "Cover.Change: " + GetTimeInMSDiff(sinittime, TimeStamp(4))
    Exit Sub
suberr:
    AppErrMsg "Cover.Worksheet_Change error:"
    Cover.noupdate = False
    Resume subend
End Sub

Public Sub RefreshTeam()
    Dim bprotect As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "RefreshTeam"
    
'    If Me.ProtectContents Then
'        UnprotectSheet Me
'        bprotect = True
'    End If

    Dim member As TPGMember
    Dim ProjectTeam As TPGMembers
    Dim m As String
    Dim o As String
    Dim m_off As Integer
    Dim o_off As Integer
    
    m = appGetLOCText("role_manager")
    o = appGetLOCText("role_owner")
    
    Set ProjectTeam = New TPGMembers
    
    ClearTeam
        
    Dim cell As Range
    m_off = 0
    o_off = 0
    For Each cell In Team.rGUIDs 'getRange(team, "Team.Table", -2, 1, 1, 2)
        If cell.value <> "" Then
            Set member = New TPGMember
            member.LoadMemberFromTeam cell
            
            If LCase(member.Role) = LCase(m) Or LCase(member.Role) = LCase(o) Then
                noupdate = True
                'modified for SALK
                If LCase(member.Role) = LCase(m) Then
                    If Not ((sActiveLicense = "M") Or (sActiveLicense = "K")) Then
                        member.AddNameToField Cover.Range("Cover.manager")
                        member.AddMemberToCover
                        
                        'added for CRF to adjust named range at cover
                        m_off = m_off + 1
                        ThisWorkbook.Names.Add "Cover.ProjectManager", "=" & Cover.Name & "!" & _
                                               Cover.Range("Cover.ProjectManager").Resize(m_off, 1).Address

                    End If
                ElseIf LCase(member.Role) = LCase(o) Then
                                       
                    member.AddNameToField Cover.Range("Cover.owner")
                    member.AddMemberToCover
                    
                    'added for CRF to adjust named range at cover
                    o_off = o_off + 1
                    ThisWorkbook.Names.Add "Cover.ProjectSponsor", "=" & Cover.Name & "!" & _
                                           Cover.Range("Cover.ProjectSponsor").Resize(o_off, 1).Address
                
                End If
            End If
        End If
    Next

    FormatTeam
    
subend:
'    If bprotect Then ProtectSheet Me
    noupdate = False
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.RefreshTeam error:"
    Resume subend
End Sub

Public Sub RefreshManagementLabels()
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "RefreshManagementLabels"

    
    noupdate = True
    Dim member As TPGMember

    'Dim ProjectTeamRange As Range
    Dim cell As Range
    Dim m As String
    Dim o As String
    m = LCase(appGetLOCText("role_manager"))
    o = LCase(appGetLOCText("role_owner"))

    Cover.Range("Cover.Owner").ClearContents
    If Not ((sActiveLicense = "M") Or (sActiveLicense = "K")) Then
        Cover.Range("Cover.Manager").ClearContents
    End If

    'Set ProjectTeamRange = Team.Range("Team.Table").Resize(Team.Range("Team.Table").rows.Count - 2, 2).offset(1, 3)

    For Each cell In Team.rGUIDs
        If cell.value <> "" Then
            Set member = New TPGMember
            member.LoadMemberFromTeam cell
            If LCase(member.Role) = m Then
                If Not ((sActiveLicense = "M") Or (sActiveLicense = "K")) Then
                    member.AddNameToField Cover.Range("Cover.manager")
                End If
            ElseIf LCase(member.Role) = o Then
                member.AddNameToField Cover.Range("Cover.owner")
            End If
        End If
    Next
    
    noupdate = False
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.RefreshManagementLabels error:"
    Resume subend
End Sub

Private Sub ClearTeam()
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "ClearTeam"

    Cover.noupdate = True
    
    s = "Cover.Owner.Table"
    If Range(s).rows.Count > 3 Then
        getRange(Cover, s, -3, 0, 2, 0).EntireRow.Delete
    End If
    Cover.Range(s).ClearContents
    Cover.Range("Cover.Owner").ClearContents
    
    If Not ((sActiveLicense = "M") Or (sActiveLicense = "K")) Then
        s = "Cover.Manager.Table"
        If Range(s).rows.Count > 3 Then
            getRange(Cover, s, -3, 0, 2, 0).EntireRow.Delete
        End If
        Cover.Range(s).ClearContents
        Cover.Range("Cover.Manager").ClearContents
    End If
    
    Cover.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.ClearTeam error:"
    Resume subend
End Sub

Private Sub FormatTeam()
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "FormatTeam"

    Cover.noupdate = True
    s = "Cover.Owner.Table"
    getRange(Cover, s, 0, 1, 0, -1).ClearContents
    getRange(Cover, s, 1, 1, 1, -1).formula = getRange(Cover, s, 1, 1, -1, -1).formula
    
    If Not ((sActiveLicense = "M") Or (sActiveLicense = "K") Or (sActiveLicense = "C")) Then
        s = "Cover.Manager.Table"
        getRange(Cover, s, 0, 1, 0, -1).ClearContents
        getRange(Cover, s, 1, 1, 1, -1).formula = getRange(Cover, s, 1, 1, -1, -1).formula
    End If
        
    Cover.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.FormatTeam error:"
    Resume subend
End Sub

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    Dim ncfld As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    AddNode xmlDom, n, "projectname", Range("Cover.ProjectName")
    AddNode xmlDom, n, "projectnumber", Range("Cover.ProjectNo")
    AddNode xmlDom, n, "portfolio", Range("Cover.Portfolio")
    AddNode xmlDom, n, "projectprogram", Range("Cover.ProjectProgram")
    AddNode xmlDom, n, "customer", Range("Cover.Customer")
    AddNode xmlDom, n, "complexity", Range("Cover.Complexity")
    AddNode xmlDom, n, "category", Range("Cover.Category")
    AddNode xmlDom, n, "impact", Range("Cover.Impact")
    AddNode xmlDom, n, "state", Loc.Tag(Range("Cover.State"))
    AddNode xmlDom, n, "statusdate", Range("Cover.Statusdate")
    AddNode xmlDom, n, "approvaldate", Range("Cover.Approvaldate")
    AddNode xmlDom, n, "customfield1", Range("Cover.CFld1")
    AddNode xmlDom, n, "customfield2", Range("Cover.CFld2")
    AddNode xmlDom, n, "customfield3", Range("Cover.CFld3")
    AddNode xmlDom, n, "weighting", Range("Cover.Weighting")
    
    Set ncfld = xmlDom.createNode(1, "customfieldsettings", "")
    AddNode xmlDom, ncfld, "f1name", Admin.Range("Admin.CFld1.Name")
    AddNode xmlDom, ncfld, "f2name", Admin.Range("Admin.CFld2.Name")
    AddNode xmlDom, ncfld, "f3name", Admin.Range("Admin.CFld3.Name")
    AddNode xmlDom, ncfld, "f1activate", Admin.Range("Admin.CFld1.Activate")
    AddNode xmlDom, ncfld, "f2activate", Admin.Range("Admin.CFld2.Activate")
    AddNode xmlDom, ncfld, "f3activate", Admin.Range("Admin.CFld3.Activate")
    n.appendchild ncfld
    Set CreateXml = n

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Cover.CreateXml error:"
    Resume subend
End Function

Sub testexim()

    On Error GoTo suberr
    modStack.PushCallStack "Cover", "testexim"

    Dim oXML As New TPGXML
    oXML.AppendObject Me
    oXML.WriteTo Me

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.testexim error:"
    Resume subend
End Sub

Public Sub ImportXml(Node As Variant, sversion As String)
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "ImportXml"

    If Not Node Is Nothing Then
        
        reset
        On Error Resume Next
        
        Me.noupdate = True
        
        If sActiveLicense <> "P" Then
            Range("Cover.ProjectName").value = Node.SelectSingleNode("projectname").Text
            'activate autofit on plan.headerrow
            Plan.Range("Plan.ProjectHeader").EntireRow.AutoFit
        End If
        Range("Cover.ProjectNo").value = Node.SelectSingleNode("projectnumber").Text
        If Not Node.SelectSingleNode("portfolio") Is Nothing Then Range("Cover.Portfolio").value = Node.SelectSingleNode("portfolio").Text
        If Not Node.SelectSingleNode("projectprogram") Is Nothing Then Range("Cover.ProjectProgram").value = Node.SelectSingleNode("projectprogram").Text
        Range("Cover.Customer").value = Node.SelectSingleNode("customer").Text
        Range("Cover.Complexity").value = Node.SelectSingleNode("complexity").Text
        Range("Cover.Category").value = Node.SelectSingleNode("category").Text
        
        'modified for SALK
        If Node.SelectSingleNode("impact") Is Nothing Then
            Range("Cover.Impact").value = Node.SelectSingleNode("department").Text
        Else
            Range("Cover.Impact").value = Node.SelectSingleNode("impact").Text
        End If
        
        Dim oldLOC As Long
        oldLOC = Cover.Range("Cover.LOC") - 1
        
        Range("Cover.State").value = Node.SelectSingleNode("state").Text   ' Loc.Translation(Node.SelectSingleNode("state").Text, phbLocalizationItemState)
        SetXMLValue Range("Cover.Statusdate"), Node.SelectSingleNode("statusdate").Text
        SetXMLValue Range("Cover.Approvaldate"), Node.SelectSingleNode("approvaldate").Text
        
        If Not Node.SelectSingleNode("weighting") Is Nothing Then
            If ModuleExists("WPWeighting") Then
                Range("Cover.Weighting").value = Node.SelectSingleNode("weighting").Text
            ElseIf LCase(Node.SelectSingleNode("weighting").Text) = "x" Then
                'if the importdata have weightingdata and this module is not active in this PHB
                'then we give a warning that these weighting data will not be imported
                appMsg appGetLOCText("msgnoweightingmodule"), vbExclamation
            End If
        End If
        
        'when importing kiss in normal phb we can skip this step
        If Not Import.ImportKISSinPHB Then
            If Not Node.SelectSingleNode("customfield1") Is Nothing Then
                Range("Cover.Cfld1").value = CastStringToVar(Node.SelectSingleNode("customfield1").Text)
                Range("Cover.Cfld2").value = CastStringToVar(Node.SelectSingleNode("customfield2").Text)
                Range("Cover.Cfld3").value = CastStringToVar(Node.SelectSingleNode("customfield3").Text)
            End If
        End If
        
        CheckComplexity
        RefreshTeam
        
        Me.noupdate = False
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "reset"
    
    ClearTeam
    Me.noupdate = True
    
    'depending on active license we cannot clear some fields
    If sActiveLicense <> "P" Then
        Cover.Range("Cover.ProjectName").ClearContents
        'activate autofit on plan.headerrow
        Plan.Range("Plan.ProjectHeader").EntireRow.AutoFit
    End If
    If (sActiveLicense <> "K") And (sActiveLicense <> "C") Then
        Cover.Range("Cover.Complexity").ClearContents
        For i = 1 To 3
            Me.Range("Cover.CFld" + Trim(CStr(i))).ClearContents
        Next
    End If
    
    Cover.Range("Cover.ProjectNo").ClearContents
    Cover.Range("Cover.Portfolio").ClearContents
    Cover.Range("Cover.ProjectProgram").ClearContents
    Cover.Range("Cover.Customer").ClearContents
    Cover.Range("Cover.Category").ClearContents
    Cover.Range("Cover.Impact").ClearContents
    Cover.Range("Cover.State").ClearContents
    Cover.Range("Cover.StatusDate").ClearContents
    Cover.Range("Cover.ApprovalDate").ClearContents
    Cover.Range("Cover.Weighting").ClearContents
    
    Me.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.reset error:"
    Resume subend
End Sub

Rem SUBPROJECT-RELATED

Private Sub CheckComplexity()

    On Error GoTo suberr
    modStack.PushCallStack "Cover", "CheckComplexity"
    
    Dim sCurrentComplexity As String
    Dim sPreviousComplexity As String
    
    sCurrentComplexity = Cover.Range("Cover.Complexity").value
    sPreviousComplexity = GetCustomProperty(Cover, "Complexity")
    
    If sCurrentComplexity = "" Then sCurrentComplexity = "na"
    
    If sCurrentComplexity <> sPreviousComplexity Then
        If InStr(LCase(sCurrentComplexity), "program") > 0 Then
            If CBool2(GetCustomProperty(Config, "ModuleSubProjectImport")) = True Then
                EnableProgram
            End If
        Else
            If InStr(LCase(sPreviousComplexity), "program") > 0 Then
                If CBool2(GetCustomProperty(Config, "ModuleSubProjectImport")) = True Then
                    DisableProgram
                End If
            End If
        End If
        
'        Select Case sCurrentComplexity
'            Case "Programm"
'                EnableProgram
'            Case Else
'                If sPreviousComplexity = "Programm" Then DisableProgram
'        End Select
        
        SetCustomProperty Cover, "Complexity", sCurrentComplexity
       
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.CheckComplexity error:"
    Resume subend
End Sub

Private Sub EnableProgram()

    On Error GoTo suberr
    modStack.PushCallStack "Cover", "EnableProgram"
    modConst.bNoNormalProtectActionsRequired = True
    Dim rCell As Range
    For Each rCell In Intersect(Loc.UsedRange, Loc.Range("LOC.EN"))
'        If (Loc.Cells(rcell.row, 2).Value <> "msgProgramNotAllowed") And _
'            (Loc.Cells(rcell.row, 2).Value <> "msgSubPrjImportOK") And _
'            (Loc.Cells(rcell.row, 2).Value <> "msgNewMembers") Then
        If (Left(Loc.Cells(rCell.row, 2).value, 3) <> "msg") Then
            If InStr(LCase(rCell.value), "project") > 0 Then
                rCell.value = Replace(rCell.value, "PROJECT", "PROGRAM")
                rCell.value = Replace(rCell.value, "Project", "Program")
                rCell.value = Replace(rCell.value, "project", "program")
            End If
        End If
    Next
    For Each rCell In Intersect(Loc.UsedRange, Loc.Range("LOC.DE"))
'        If (Loc.Cells(rcell.row, 2).Value <> "msgProgramNotAllowed") And _
'            (Loc.Cells(rcell.row, 2).Value <> "msgSubPrjImportOK") And _
'            (Loc.Cells(rcell.row, 2).Value <> "msgNewMembers") Then
        If (Left(Loc.Cells(rCell.row, 2).value, 3) <> "msg") Then
            If (InStr(LCase(rCell.value), "projekt") > 0) Then
                rCell.value = Replace(rCell.value, "PROJEKT", "PROGRAMM")
                rCell.value = Replace(rCell.value, "Projekt", "Programm")
                rCell.value = Replace(rCell.value, "projekt", "programm")
            End If
        End If
    Next
    For Each rCell In Intersect(Team.Range("Team.Table"), Team.Range("Team.RoleColumn"))
        rCell.value = Replace(rCell.value, "Projekt", "Programm")
    Next
    Team.Name = appGetLOCText("TeamSheet", True)
    'contents.Range("Contents.TeamLink").Hyperlinks(1).SubAddress = appGetLOCText("TeamSheet", True) & "!A1"
    Dim c As Variant
    Dim i As Integer
    For Each c In contents.Range("Contents.Sheets")
        If c.value = "Team" Then
            i = c.row
            Exit For
        End If
    Next
    If i > 0 Then
        contents.Cells(i, contents.Range("Contents.Complexity").Column - 1).Hyperlinks(1).SubAddress = appGetLOCText("TeamSheet", True) & "!A1"
    End If
    'SetCustomProperty Config, "ModuleSubProjectImport", "True"
subend:
    modConst.bNoNormalProtectActionsRequired = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.EnableProgram error:"
    Resume subend
End Sub

Private Sub DisableProgram()

    On Error GoTo suberr
    modStack.PushCallStack "Cover", "DisableProgram"
    modConst.bNoNormalProtectActionsRequired = True
    Dim rCell As Range
    For Each rCell In Intersect(Loc.UsedRange, Loc.Range("LOC.EN"))
        If (Loc.Cells(rCell.row, 2).value <> "msgProgramNotAllowed") And _
            (Loc.Cells(rCell.row, 2).value <> "msgSubPrjImportOK") And _
            (Loc.Cells(rCell.row, 2).value <> "msgNewMembers") Then
            If (InStr(LCase(rCell.value), "program") > 0) And (LCase(rCell.value) <> "programme") Then
                If (rCell.value <> "PROJECT PROGRAM") Then
                    rCell.value = Replace(rCell.value, "PROGRAM", "PROJECT")
                    rCell.value = Replace(rCell.value, "Program", "Project")
                    rCell.value = Replace(rCell.value, "program", "project")
                End If
            End If
        End If
    Next
    For Each rCell In Intersect(Loc.UsedRange, Loc.Range("LOC.DE"))
        If (Loc.Cells(rCell.row, 2).value <> "msgProgramNotAllowed") And _
            (Loc.Cells(rCell.row, 2).value <> "msgSubPrjImportOK") And _
            (Loc.Cells(rCell.row, 2).value <> "msgNewMembers") Then
            If InStr(LCase(rCell.value), "programm") > 0 Then
                rCell.value = Replace(rCell.value, "PROGRAMM", "PROJEKT")
                rCell.value = Replace(rCell.value, "Programm", "Projekt")
                rCell.value = Replace(rCell.value, "programm", "projekt")
            End If
        End If
    Next
    For Each rCell In Intersect(Team.Range("Team.Table"), Team.Range("Team.RoleColumn"))
        rCell.value = Replace(rCell.value, "Programm", "Projekt")
    Next
    'SetCustomProperty Config, "ModuleSubProjectImport", "False"
    Team.Name = appGetLOCText("TeamSheet", True)
    'contents.Range("Contents.TeamLink").Hyperlinks(1).SubAddress = appGetLOCText("TeamSheet", True) & "!A1"
    Team.Name = appGetLOCText("TeamSheet", True)
    Dim c As Variant
    Dim i As Integer
    For Each c In contents.Range("Contents.Sheets")
        If c.value = "Team" Then
            i = c.row
            Exit For
        End If
    Next
    If i > 0 Then
        contents.Cells(i, contents.Range("Contents.Complexity").Column - 1).Hyperlinks(1).SubAddress = appGetLOCText("TeamSheet", True) & "!A1"
    End If
subend:
    modConst.bNoNormalProtectActionsRequired = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Cover.DisableProgram error:"
    Resume subend
End Sub





Attribute VB_Name = "CustomizingNotes"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Decisions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public noupdate As Boolean

Private Enum cols
   icNumber = 3
   icShowInStatus
   icevent = 5 'GetTable.FirstCol
   icdate
   icsubject
   icdecision
   icResponsible
   icDueDate
   icstatus
End Enum

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (InRange(Target, GetTable.ValuesRange.Resize(GetTable.ValuesRange.rows.Count + 1))) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext True, True
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
Dim c
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "Worksheet_Change"

    If noupdate Then GoTo Fit:
    
    If Target.Column > icdate Then
        If Meeting.IsSelected And IsEmpty(Cells(Target.row, icevent)) And IsEmpty(Cells(Target.row, icdate)) Then
            'FetchDataFromMeeting but don't set the event if the user has already entered a date or an event
            Cells(Target.row, icevent).value = Meeting.Range("Meeting.Name").value
            Cells(Target.row, icdate).value = Meeting.Range("Meeting.Date").value
        Else                        ' FetchDefaultData
            CellFunctions.SetCellIfEmpty Target.row, icdate, Date
        End If
        CellFunctions.SetCellIfEmpty Target.row, icstatus, appGetLOCText("undone")
    ElseIf Target.Column = icevent Then
        'if existing meeting selected then get date
        For Each c In MeetingDetails.Range("MeetingDetails").offset(0, 1)
            If c.value = Target.value Then
                Cells(Target.row, icdate).value = c.offset(0, 1).value
                Exit For
            End If
        Next
    End If
    
Fit:
    'added for printing bug
    GetTable.bAutoFit = True
    If GetTable.CellAutoFit(Target) Then GoTo subend

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Decisions.Worksheet_Change error:"
    Resume subend
End Sub

Private Function GetTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "GetTable"

    t.SetTable Me.Range("Decisions.Table"), True, False, TemplateFirstrow, 10
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Decisions.GetTable error:"
    Resume subend
End Function

Public Function GetDecisionItemsForStatusReport() As Collection
    Dim decisionItems As Collection
    Dim decisionItem As TPGDecisionItem
    Dim R As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "GetDecisionItemsForStatusReport"

    Set decisionItems = New Collection
    For Each R In GetShowInStatusRange
        If R.value = "x" Then
            Set decisionItem = New TPGDecisionItem
            decisionItem.LoadFromTable R.row
            decisionItems.Add decisionItem
        End If
    Next
    Set GetDecisionItemsForStatusReport = decisionItems

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Decisions.GetDecisionItemsForStatusReport error:"
    Resume subend
End Function

Private Function GetShowInStatusRange() As Range
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "GetShowInStatusRange"

    Set GetShowInStatusRange = Intersect(Range("Decisions.Table"), Cells(1, icShowInStatus).EntireColumn).Resize(Range("Decisions.Table").rows.Count - 2).offset(1)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Decisions.GetShowInStatusRange error:"
    Resume subend
End Function


Public Sub cmdClearFormat_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "cmdClearFormat_Click"

    GetTable.ClearFormat_Clicked

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Decisions.cmdClearFormat_Click error:"
    Resume subend
End Sub

Public Sub cmdSetFormat_Click()
    Dim R As Range
    Dim s As String
    Dim iDateColOffset As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "cmdSetFormat_Click"
    
    s = "Decisions.Table"
    iDateColOffset = 6
    For Each R In GetTable.ValuesRange(1)
        Select Case R.offset(0, 7).value
        Case appGetLOCText("done")
            R.offset(0, 7).Interior.Color = RGB(112, 173, 71)
'            Range(r, r.offset(0, iDateColOffset)).Interior.Color = RGB(0, 176, 80)
        Case appGetLOCText("undone")
            If CDate(R.offset(0, iDateColOffset).value) < CDate(Cover.Range("Cover.StatusDate").value) Then
                R.offset(0, 7).Interior.Color = RGB(227, 0, 27)
'                Range(r, r.offset(0, iDateColOffset)).Interior.Color = RGB(255, 0, 0)
            Else
                R.offset(0, 7).Interior.Color = RGB(255, 255, 255)
'                Range(r, r.offset(0, iDateColOffset)).Interior.Color = RGB(255, 255, 255)
            End If
        Case Else
                R.offset(0, 7).Interior.Color = RGB(255, 255, 255)
'            Range(r, r.offset(0, iDateColOffset)).Interior.Color = RGB(255, 255, 255)
        End Select
    Next
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Decisions.cmdSetFormat_Click error:"
    Resume subend
End Sub

Public Sub cmdAutoFilter_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "cmdAutoFilter_Click"

    GetTable.Autofilter_Clicked 1

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Decisions.cmdAutoFilter_Click error:"
    Resume subend
End Sub

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "cmdInsert_Click"

    Me.noupdate = True
    
    GetTable.InsertRow_Clicked ActiveCell
    
    Me.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Decisions.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "cmdDelete_Click"

    Me.noupdate = True
    
    GetTable.DeleteRow_Clicked ActiveCell
    Meeting.SyncDecisions
    Me.noupdate = False
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Decisions.cmdDelete_Click error:"
    Resume subend
End Sub

Public Sub cmdSortAsc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "cmdSortAsc_Click"

    GetTable.Sort_Clicked ActiveCell, xlAscending

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Decisions.cmdSortAsc_Click error:"
    Resume subend
End Sub

Public Sub cmdSortDesc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "cmdSortDesc_Click"

    GetTable.Sort_Clicked ActiveCell, xlDescending

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Decisions.cmdSortDesc_Click error:"
    Resume subend
End Sub

Private Function GetColsOld() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "GetColsOld"

    cols.Add GetTPGColumn("date", 2, DateColumn)
    cols.Add GetTPGColumn("status", 3)
    cols.Add GetTPGColumn("topic", 4)
    cols.Add GetTPGColumn("decisions", 5)
    cols.Add GetTPGColumn("responsible", 6)
    cols.Add GetTPGColumn("duedate", 7, DateColumn)
    
    Set GetColsOld = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Decisions.GetColsOld error:"
    Resume subend
End Function

Private Function GetColsNoStatus20() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "GetColsNoStatus20"

    cols.Add GetTPGColumn("event", 2)
    cols.Add GetTPGColumn("date", 3, DateColumn)
    cols.Add GetTPGColumn("status", 4)
    cols.Add GetTPGColumn("topic", 5)
    cols.Add GetTPGColumn("decision", 6)
    cols.Add GetTPGColumn("responsible", 7)
    cols.Add GetTPGColumn("duedate", 8, DateColumn)
    Set GetColsNoStatus20 = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Decisions.GetColsNoStatus20 error:"
    Resume subend
End Function

Private Function GetColsNoStatus() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "GetColsNoStatus"

    cols.Add GetTPGColumn("event", 2)
    cols.Add GetTPGColumn("date", 3, DateColumn)
    cols.Add GetTPGColumn("topic", 4)
    cols.Add GetTPGColumn("decision", 5)
    cols.Add GetTPGColumn("responsible", 6)
    cols.Add GetTPGColumn("duedate", 7, DateColumn)
    cols.Add GetTPGColumn("status", 8)
    Set GetColsNoStatus = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Decisions.GetColsNoStatus error:"
    Resume subend
End Function

Private Function GetCols20() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "GetCols20"

    cols.Add GetTPGColumn("showinstatus", 1)
    cols.Add GetTPGColumn("event", 2)
    cols.Add GetTPGColumn("date", 3, DateColumn)
    cols.Add GetTPGColumn("status", 4)
    cols.Add GetTPGColumn("topic", 5)
    cols.Add GetTPGColumn("decisions", 6)
    cols.Add GetTPGColumn("responsible", 7)
    cols.Add GetTPGColumn("duedate", 8, DateColumn)
    Set GetCols20 = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Decisions.GetCols20 error:"
    Resume subend
End Function
Private Function GetCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "GetCols"

    cols.Add GetTPGColumn("showinstatus", 1)
    cols.Add GetTPGColumn("event", 2)
    cols.Add GetTPGColumn("date", 3, DateColumn)
    cols.Add GetTPGColumn("topic", 4)
    cols.Add GetTPGColumn("decisions", 5)
    cols.Add GetTPGColumn("responsible", 6)
    cols.Add GetTPGColumn("duedate", 7, DateColumn)
    cols.Add GetTPGColumn("status", 8)
    Set GetCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Decisions.GetCols error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    n.appendchild GetNodeFromTable(xmlDom, "decisions", "decision", GetTable.ValuesRange, GetCols)
    Set CreateXml = n.FirstChild

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Decisions.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, sversion As String)
    
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "ImportXml"

    If Not Node Is Nothing Then
        
        reset
        Me.noupdate = True
'        Select Case sversion
'        Case "2.0.00", "2.0.01", "2.1.00"
'            If Not Node.FirstChild Is Nothing Then
'                If Node.FirstChild.FirstChild.BaseName = "showinstatus" Then
'                    ImportTableValues GetTable, Node, "decision", GetCols20
'                Else
'                    ImportTableValues GetTable, Node, "decision", GetColsNoStatus20
'                End If
'            End If
'        Case Else
            If Not Node.FirstChild Is Nothing Then
                If Node.FirstChild.FirstChild.BaseName = "showinstatus" Then
                    ImportTableValues GetTable, Node, "decision", GetCols
                Else
                    ImportTableValues GetTable, Node, "decision", GetColsNoStatus
                End If
            End If
'        End Select
        Me.noupdate = False
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Decisions.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "reset"

    Me.noupdate = True
    GetTable.clear
    Me.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Decisions.reset error:"
    Resume subend
End Sub

Attribute VB_Name = "DisAssemble"
Option Explicit

Private Const vbext_ct_ClassModule = 2
Private Const vbext_ct_Document = 100
Private Const vbext_ct_MSForm = 3
Private Const vbext_ct_StdModule = 1

'Private Const sExcelPwd = "qwertz123456UIOP|fffd|*/()=?"

Private Sub WriteVBA()
'Public Sub WriteVBA(magicString As String)
    ' Extracts all VBA Code into separate files in a subfolder. For debugging only.
    ' For security reasons make this routine private before releasing
    'If magicString <> sExcelPwd Then GoTo SubEnd
    Dim fs
    Dim VBComp
    Dim fileExtension
    Dim exportFolder

    On Error GoTo suberr
    modStack.PushCallStack "DisAssemble", "WriteVBA"

        Set fs = CreateObject("Scripting.FileSystemObject")

        Application.visible = True

        exportFolder = ActiveWorkbook.Path & "\" & fs.GetBaseName(ActiveWorkbook.Name)
        If Not fs.FolderExists(exportFolder) Then fs.CreateFolder (exportFolder)

        For Each VBComp In ActiveWorkbook.VBProject.VBComponents
            Select Case VBComp.Type
                Case vbext_ct_Document, vbext_ct_ClassModule
                    fileExtension = ".txt"
                Case vbext_ct_MSForm
                    fileExtension = ".frm"
                Case vbext_ct_StdModule
                    fileExtension = ".bas"
                Case Else
                    fileExtension = ""
            End Select
            If fileExtension <> "" Then
                On Error Resume Next
                err.clear
                VBComp.Export exportFolder & "\" & VBComp.Name & fileExtension
                If err.Number <> 0 Then
                    MsgBox "Failed to export " & exportFolder & "\" & VBComp.Name & fileExtension
                End If
                On Error GoTo 0
            End If
        Next
'        Application.Quit

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "DisAssemble.WriteVBA error:"
    Resume subend
End Sub

Attribute VB_Name = "Environment"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private A() As Integer
Public noupdate As Boolean

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (InRange(Target, Me.Range("Environment.Table").offset(1, 0).Resize(Me.Range("Environment.Table").rows.Count - 1))) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext True, True
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "Worksheet_Change"
    If Not Me.noupdate Then
        GetTable.Mergedfit Target
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:

    AppErrMsg "Environment.Worksheet_Change error:"
    Resume subend
End Sub

Private Function GetTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "GetTable"

    t.SetTable Me.Range("Environment.Table"), True, False, TemplateFirstrow, 5
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Environment.GetTable error:"
    Resume subend
End Function

Public Sub cmdInsert_Click()
    Dim iRow As Integer
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "cmdInsert_Click"

    If IsDemoVersion Then GoTo subend
    
    Me.noupdate = True
    iRow = ActiveCell.row
    If GetTable.InsertRow_Clicked(ActiveCell) Then
        Me.Cells(iRow, 1).EntireRow.AutoFit
    End If
    Me.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Environment.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "cmdDelete_Click"

    If IsDemoVersion Then GoTo subend
    
    Me.noupdate = True
    GetTable.DeleteRow_Clicked ActiveCell
    Me.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Environment.cmdDelete_Click error:"
    Resume subend
End Sub

Public Sub cmdAutoFilter_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "cmdAutoFilter_Click"

    GetTable.Autofilter_Clicked 1

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Environment.cmdAutoFilter_Click error:"
    Resume subend
End Sub

Public Sub cmdSortAsc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "cmdSortAsc_Click"

    GetTable.Sort_Clicked ActiveCell, xlAscending

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Environment.cmdSortAsc_Click error:"
    Resume subend
End Sub

Public Sub cmdSortDesc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "cmdSortDesc_Click"

    GetTable.Sort_Clicked ActiveCell, xlDescending

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Environment.cmdSortDesc_Click error:"
    Resume subend
End Sub

Public Sub cmdClearFormat_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "cmdClearFormat_Click"

    GetTable.ClearFormat_Clicked

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Environment.cmdClearFormat_Click error:"
    Resume subend
End Sub

Public Sub cmdSetFormat_Click()
    Dim c As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "cmdSetFormat_Click"

    c.Add GetTPGValueColor(appGetLOCText("critical"), RGB(255, 0, 0))
    c.Add GetTPGValueColor(appGetLOCText("supporting"), RGB(0, 176, 80))
    GetTable.SetFormat_Clicked 4, c

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Environment.cmdSetFormat_Click error:"
    Resume subend
End Sub

Public Sub UpdateChart()
    Dim i As Integer
    Dim s As String
    Dim isc As Integer
    Dim ir As Integer
    Dim oldLOC As Integer
    Dim bFirstSeries As Boolean
    
    Dim rdata As Range
    Dim c As Range
    Dim icolimpact As Integer
    Dim icolinfl As Integer
    Dim icolatt As Integer
    Dim simp As String
    Dim sinfl As String
    Dim satt As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "UpdateChart"
    
    'If Not SavedProjects Is Nothing Then Set Projects = SavedProjects
    
    oldLOC = Cover.Range("Cover.LOC") - 1
    
    ReDim A(9) As Integer
    
    icolatt = Me.Range("Environment.Col.Att").Column 'bubblecolor
    icolinfl = Me.Range("Environment.Col.Infl").Column 'vert axis on chart
    icolimpact = Me.Range("Environment.Col.Impact").Column 'horiz. axis on chart
    
    UnprotectSheet Me
    With Me.ChartObjects(1).Chart
        For isc = .SeriesCollection.Count To 2 Step -1
            .SeriesCollection(isc).Delete
        Next
        
        isc = 0
        Set rdata = GetTable.ValuesRange.Resize(, 1)
        For Each c In rdata
            'we only add items to chart with a name, impact, influence and attitude value
            'other elements are ignored
            If Not c.EntireRow.Hidden Then
                If (c.value <> "") And (Me.Cells(c.row, icolatt).value <> "") And _
                    (Me.Cells(c.row, icolimpact).value <> "") And (Me.Cells(c.row, icolinfl).value <> "") Then
                        If bFirstSeries Then .SeriesCollection.Add c.offset(0, -1) 'rFind 'Plan.Cells(P.RowNo, icProjectNo) ' P("ProjectNo")
                        bFirstSeries = True
                        isc = isc + 1
                        simp = TranslateText(Me.Cells(c.row, icolimpact).value, oldLOC, 0)
                        sinfl = TranslateText(Me.Cells(c.row, icolinfl).value, oldLOC, 0)
                        satt = TranslateText(Me.Cells(c.row, icolatt).value, oldLOC, 0)
                        FormatSeries isc, c.offset(0, -1).value, simp, sinfl, satt, oldLOC
                        If isc = 255 Then
                            Application.ScreenUpdating = True
                            AppStopMsg appGetLOCText("msgMaxSeries255")
                            Exit For
                        End If
                End If
            End If
        Next
        
        .HasTitle = False
    End With

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Environment.UpdateChart error"
    Resume subend
End Sub

Private Sub FormatSeries(isc As Integer, sid As String, simp As String, sinfl As String, satt As String, oldLOC As Integer)
    Dim iState As Integer
    Dim iPercent As Integer
    Dim sCol As String
    
    Dim ix As Integer
    Dim iy As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "FormatSeries"
    
    With Me.ChartObjects(1).Chart
        With .SeriesCollection(isc)
            .Name = sid
            Select Case LCase(simp)
                Case "veryhigh"
                    ix = 1
                Case "high"
                    ix = 2
                Case "medium"
                    ix = 3
                Case "low"
                    ix = 4
                Case "verylow"
                    ix = 5
            End Select
            Select Case LCase(sinfl)
                Case "verylow"
                    iy = 1
                Case "low"
                    iy = 3
                Case "medium"
                    iy = 5
                Case "high"
                    iy = 7
                Case "veryhigh"
                    iy = 9
            End Select
            .Values = iy
            .XValues = ix
            .BubbleSizes = "={1}"
            Select Case LCase(satt)
                Case "stpositive"
                    .Interior.Color = RGB(112, 173, 71)
                Case "neutral"
                    .Interior.Color = RGB(255, 192, 0)
                Case "critical", "stcritical"
                    .Interior.Color = RGB(227, 0, 27)
            End Select
            '.Format.Fill.Transparency = 0.3
            .ApplyDataLabels
            .DataLabels.ShowSeriesName = True
            .DataLabels.ShowValue = False
            .DataLabels.Position = xlLabelPositionCenter
            .DataLabels.Font.Name = "Segoe UI"
            .DataLabels.Font.Size = 9 '8
            .DataLabels.Font.Color = RGB(255, 255, 255)
            .Border.LineStyle = xlNone
            .Shadow = False
            '.BubbleScale = 70
            .Has3DEffect = False
        End With
    End With

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Environment.FormatSeries error:"
    Resume subend
End Sub

Private Function GetColsSALK() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "GetCols"

'    Cols.Add GetTPGColumn("category", 1)
'    Cols.Add GetTPGColumn("name", 2)
'    Cols.Add GetTPGColumn("rating", 4)
'    Cols.Add GetTPGColumn("relation", 5)
'    Cols.Add GetTPGColumn("todos", 8)
'    Cols.Add GetTPGColumn("responsible", 11)
'    Cols.Add GetTPGColumn("duedate", 13, DateColumn)
    
    cols.Add GetTPGColumn("name", 1)
    cols.Add GetTPGColumn("category", 2)
    cols.Add GetTPGColumn("impact", 3)
'    Cols.Add GetTPGColumn("infl", 5)
    cols.Add GetTPGColumn("rating", 8)
 '   Cols.Add GetTPGColumn("actionneeded", 10)
    
    cols.Add GetTPGColumn("relation", 11)
    cols.Add GetTPGColumn("todos", 12)
    cols.Add GetTPGColumn("responsible", 13)
    cols.Add GetTPGColumn("duedate", 15)
  '  Cols.Add GetTPGColumn("state", 16)

    
    Set GetColsSALK = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Environment.GetCols error:"
    Resume subend
End Function

Private Function GetCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "GetCols"

'    Cols.Add GetTPGColumn("category", 1)
'    Cols.Add GetTPGColumn("name", 2)
'    Cols.Add GetTPGColumn("rating", 4)
'    Cols.Add GetTPGColumn("relation", 5)
'    Cols.Add GetTPGColumn("todos", 8)
'    Cols.Add GetTPGColumn("responsible", 11)
'    Cols.Add GetTPGColumn("duedate", 13, DateColumn)
    
    cols.Add GetTPGColumn("name", 1)
    cols.Add GetTPGColumn("descr", 2)
    cols.Add GetTPGColumn("impact", 3)
    cols.Add GetTPGColumn("infl", 5)
    cols.Add GetTPGColumn("att", 8)
    cols.Add GetTPGColumn("actionneeded", 10)
    
    cols.Add GetTPGColumn("measure", 11)
    cols.Add GetTPGColumn("responsible", 12)
    cols.Add GetTPGColumn("duedate", 14, DateColumn)
    cols.Add GetTPGColumn("state", 15)
    
    Set GetCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Environment.GetCols error:"
    Resume subend
End Function

Private Function GetColsOld() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "GetColsOld"

'    Cols.Add GetTPGColumn("category", 1)
    cols.Add GetTPGColumn("name", 1)
    cols.Add GetTPGColumn("relation", 2)
'    Cols.Add GetTPGColumn("rating", 4)
'    Cols.Add GetTPGColumn("relation", 5)
    cols.Add GetTPGColumn("todos", 11)
    cols.Add GetTPGColumn("responsible", 12)
    cols.Add GetTPGColumn("duedate", 14, DateColumn)
    
    Set GetColsOld = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Environment.GetColsOld error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    n.appendchild GetNodeFromTable(xmlDom, "stakeholders", "stakeholder", GetTable.ValuesRange, GetCols)
    Set CreateXml = n.FirstChild

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Environment.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, sversion As String)
    
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "ImportXml"

    If Not Node Is Nothing Then
        reset
        Me.noupdate = True
        
        If sversion = "1200" Then
            ImportTableValues GetTable, Node, "stakeholder", GetColsSALK
        Else
            If (sversion >= "3.0.00") Then
                ImportTableValues GetTable, Node, "stakeholder", GetCols
            Else
                ImportTableValues GetTable, Node, "stakeholder", GetColsOld
            End If
        End If
        Me.UpdateChart
        Me.noupdate = False
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Environment.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "reset"
    Me.noupdate = True
    GetTable.clear
    UpdateChart
    Me.noupdate = False
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Environment.reset error:"
    Resume subend
End Sub

Public Sub cmdShowHide_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Environment", "cmdShowHide_Click"
    
    If Me.Range("Environment.Area.Chrt").EntireRow.Hidden Then
        Me.Range("Environment.Area.Chrt").EntireRow.Hidden = False
        Me.Range("Environment.Area.Details").EntireColumn.Hidden = False
    Else
        Me.Range("Environment.Area.Chrt").EntireRow.Hidden = True
        Me.Range("Environment.Area.Details").EntireColumn.Hidden = True
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Environment.cmdShowHide_Click error:"
    Resume subend
End Sub

Attribute VB_Name = "Export"
Option Explicit

Public Sub ExportPHB()
    Dim filedialog
    Dim FileName As String
    Dim PlanningMode As String
    Dim bSwitchBack As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Export", "ExportPHB"

    bSwitchBack = False
    If ModuleExists("PersonalPlanning") Then
        Dim WTS As TPGWorkTypes
        Set WTS = New TPGWorkTypes
        WTS.Load
        PlanningMode = WTS.PlanningMode
        If PlanningMode = "Persons" Then
            If Not Plan.SwitchToDepartments("Export") Then Exit Sub
            bSwitchBack = True
        End If
    End If

    filedialog = Application.GetSaveAsFilename(ThisWorkbook.FullName & "_export.xml", "Xml-Files (*.xml), *.xml")
    If filedialog <> False Then
        FileName = CStr(filedialog)
        modRibbon.bnoRibbonUpdate = True
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then Plan.UpdatePlan_Click
        CreateXml FileName, , PlanningMode
        If bSwitchBack Then Plan.SwitchToPersons False
        AppInfoMsg appGetLOCText("done")
    End If

subend:
    modRibbon.bnoRibbonUpdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Export.ExportPHB error:"
    Resume subend
End Sub

Public Sub CreateXml(FileName As String, Optional ByRef sxml As String, Optional PlanningMode As String = "")
    Dim OBJXMLDOC As Variant
    Dim HEADING As Variant
    Dim top_node As Variant
    Dim MetadataNode As Variant
    Dim datanode As Variant
    
    
    ' Create the XML DOM object
    On Error GoTo suberr
    modStack.PushCallStack "Export", "CreateXml"

    Set OBJXMLDOC = CreateObject("Microsoft.XMLDOM")
    OBJXMLDOC.async = False
                   
    ' NODE_PROCESSING_INSTRUCTION(7) --- reference http://www.devguru.com/Technologies/xmldom/quickref/obj_node.html
    Set HEADING = OBJXMLDOC.createNode(7, "xml", "")
    OBJXMLDOC.appendchild (HEADING)
    
    sActiveLicense = pStrVersion 'once and a while we refresh the global sActivelicense var, to be sure it is correct
    
    ' Set the root node
    Set top_node = OBJXMLDOC.createNode(1, "phb", "")
    OBJXMLDOC.appendchild (top_node)

    Set MetadataNode = OBJXMLDOC.createNode(1, "metadata", "")
    AddNode OBJXMLDOC, MetadataNode, "version", VERSION_NO
    AddNode OBJXMLDOC, MetadataNode, "license", sActiveLicense
    AddNode OBJXMLDOC, MetadataNode, "exportdate", Date
    AddNode OBJXMLDOC, MetadataNode, "exporttime", Time
    
    'Added for SALK -- for PPF
    AddNode OBJXMLDOC, MetadataNode, "SALKType", modProperties.GetCustomProperty(Cover, "SALKType")
    
    AddNode OBJXMLDOC, MetadataNode, "language", Range("Cover.Loc").value - 1
    If ModuleExists("PersonalPlanning") Then AddNode OBJXMLDOC, MetadataNode, "planningmode", PlanningMode
    top_node.appendchild MetadataNode
    
    'top_node.appendchild Admin.CreateXml(objxmldoc)
    
    Set datanode = OBJXMLDOC.createNode(1, "data", "")
    datanode.appendchild Cover.CreateXml(OBJXMLDOC)
    datanode.appendchild contents.CreateXml(OBJXMLDOC)
    datanode.appendchild Contract.CreateXml(OBJXMLDOC)
    datanode.appendchild Team.CreateXml(OBJXMLDOC)
    
    'added for SALK
    datanode.appendchild Changes.CreateXml(OBJXMLDOC)
    
    datanode.appendchild Com.CreateXml(OBJXMLDOC)
    datanode.appendchild Plan.CreateXml(OBJXMLDOC)
    datanode.appendchild WBS.CreateXml(OBJXMLDOC)
    datanode.appendchild WPDetails.CreateXml(OBJXMLDOC)
    datanode.appendchild Environment.CreateXml(OBJXMLDOC)
    If (sActiveLicense <> "K") And (sActiveLicense <> "C") Then
        datanode.appendchild Risk.CreateXml(OBJXMLDOC)
        datanode.appendchild Context.CreateXml(OBJXMLDOC)
    Else
        datanode.appendchild Risk_kiss.CreateXml(OBJXMLDOC)
        datanode.appendchild Context_kiss.CreateXml(OBJXMLDOC)
    End If
    datanode.appendchild Rules.CreateXml(OBJXMLDOC)
    datanode.appendchild StatusHist.CreateXml(OBJXMLDOC)
    datanode.appendchild Closure.CreateXml(OBJXMLDOC)
    datanode.appendchild MeetingDetails.CreateXml(OBJXMLDOC)
    datanode.appendchild Actions.CreateXml(OBJXMLDOC)
    datanode.appendchild Decisions.CreateXml(OBJXMLDOC)
    datanode.appendchild Info.CreateXml(OBJXMLDOC)
    datanode.appendchild Work.CreateXml(OBJXMLDOC)
    datanode.appendchild Cost.CreateXml(OBJXMLDOC)
    
    'CRF module
    If ModuleExists("CRF") Then
        datanode.appendchild ChangeRequestList.CreateXml(OBJXMLDOC)
    End If
    
    If ModuleExists("MTAServer") Then
        datanode.appendchild MTA.CreateXml(OBJXMLDOC)
    End If
    top_node.appendchild datanode
    
    If FileName <> "" Then
        OBJXMLDOC.Save FileName
    Else
        sxml = OBJXMLDOC.SelectSingleNode("/phb").xml
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Export.CreateXml error:"
    Resume subend
End Sub

Public Function GetNode(Name As String, value As String) As String
    On Error GoTo suberr
    modStack.PushCallStack "Export", "GetNode"

    If value <> "" Then
        GetNode = GetStartTag(Name) + value + GetFinishTag(Name)
    Else
        GetNode = GetTag(Name)
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Export.GetNode error:"
    Resume subend
End Function

Public Function GetStartTag(Name As String)
    On Error GoTo suberr
    modStack.PushCallStack "Export", "GetStartTag"

    GetStartTag = "<" + Name + ">"

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Export.GetStartTag error:"
    Resume subend
End Function

Public Function GetFinishTag(Name As String)
    On Error GoTo suberr
    modStack.PushCallStack "Export", "GetFinishTag"

    GetFinishTag = "</" + Name + ">"

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Export.GetFinishTag error:"
    Resume subend
End Function

Public Function GetTag(Name As String)
    On Error GoTo suberr
    modStack.PushCallStack "Export", "GetTag"

    GetTag = "<" + Name + ">"

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Export.GetTag error:"
    Resume subend
End Function

Public Sub AddNode(xmlDom As Variant, Node As Variant, Name As String, value As Variant)
    Dim newNode As Variant
    On Error GoTo suberr
    modStack.PushCallStack "Export", "AddNode"

    Set newNode = xmlDom.createNode(1, Name, "")
    newNode.Text = CastVarToString(value)
    Node.appendchild newNode

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Export.AddNode error:"
    Resume subend
End Sub

Public Function GetNodeFromTable(xmlDom As Variant, Name As String, itemname As String, R As Range, Optional cols As Collection, Optional Fullscan As Boolean = False) As Variant
    Dim ntable As Variant
    Dim nrecord As Variant
    Dim c As Range
    Dim i As Integer
    Dim found As Boolean
    
    On Error GoTo suberr
    modStack.PushCallStack "Export", "GetNodeFromTable"

    Set ntable = xmlDom.createNode(1, Name, "")
    
    If Not Fullscan Then Set R = R.Resize(, 1)
    
    For Each c In R
        If cols Is Nothing Then
            If c.value <> "" Then
                AddNode xmlDom, ntable, itemname, c.value
            End If
        Else
            Set nrecord = xmlDom.createNode(1, itemname, "")
            found = False
            For i = 1 To cols.Count
'                If c.Offset(0, cols(i).ColumnIndex - 1).value <> "" Then Found = True
'                AddNode xmlDom, nRecord, cols(i).ColumnName, c.Offset(0, cols(i).ColumnIndex - 1).value
                If cols(i).ColumnType = FormulaColumn Then
                    If CellFunctions.GetFormulaR1C1(c.Cells(1, cols(i).columnIndex)) <> "" Then found = True
                    AddNode xmlDom, nrecord, cols(i).ColumnName, CellFunctions.GetFormulaR1C1(c.Cells(1, cols(i).columnIndex))
                ElseIf cols(i).ColumnType = tagColumn Then
                    If c.Cells(1, cols(i).columnIndex).value <> "" Then found = True
                    AddNode xmlDom, nrecord, cols(i).ColumnName, Loc.Tag(c.Cells(1, cols(i).columnIndex).value, cols(i).TagType)
                ElseIf cols(i).ColumnType = urlcolumn Then
                    If c.Cells(1, cols(i).columnIndex).value <> "" Then found = True
                    AddNode xmlDom, nrecord, cols(i).ColumnName, c.Cells(1, cols(i).columnIndex).value
                    If c.Cells(1, cols(i).columnIndex).Hyperlinks.Count > 0 Then
                        AddNode xmlDom, nrecord, "url" + cols(i).ColumnName, c.Cells(1, cols(i).columnIndex).Hyperlinks(1).Address
                    End If
                Else
                    If c.Cells(1, cols(i).columnIndex).value <> "" Then found = True
                    AddNode xmlDom, nrecord, cols(i).ColumnName, c.Cells(1, cols(i).columnIndex).value
                End If
            Next
            If found Then ntable.appendchild nrecord
        End If
    Next
    Set GetNodeFromTable = ntable

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Export.GetNodeFromTable error:"
    Resume subend
End Function

Attribute VB_Name = "Gantt"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private wholeColumnRangeTemp As Range
Public Enum ConnectionType
    Left2Left = 1
    left2right
    right2right
    right2left
End Enum

Public Sub cmdUpdate_Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "cmdUpdate_Click"
    CreateGantt True
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Gantt.cmdUpdate_Click error:"
    Resume subend
End Sub

Public Sub CreateGantt(Validate As Boolean)
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "CreateGantt"
 
    Dim ganttWorksheet As Worksheet
    Set ganttWorksheet = Gantt
    Dim wbsSheet As Worksheet
    Set wbsSheet = Plan

    DeleteAllTaskShapes

    If Validate Then
        If Not bDisableAllWarnings Then Plan.ValidatePlan
    End If

    Dim ganttStartDate As Date
    Dim ganttFinishDate As Date
    Dim maxUnits As Integer

    Dim startRowIndex As Integer
    Dim endRowIndex As Integer
    Dim currentIndex As Integer
    Dim currenttask As TPGTask
    Dim taskRowTemplate As Range
    Dim summaryRowTemplate As Range
    Dim milestoneRowTemplate As Range

    If (BaselineExists) Then
        Set taskRowTemplate = Range("Gantt.RowTemplate.Task")
        Set summaryRowTemplate = Range("Gantt.RowTemplate.SummaryTask")
        Set milestoneRowTemplate = Range("Gantt.RowTemplate.Milestone")
    Else
        Set taskRowTemplate = Range("Gantt.RowTemplate.ScheduleOnly.Task")
        Set summaryRowTemplate = Range("Gantt.RowTemplate.ScheduleOnly.SummaryTask")
        Set milestoneRowTemplate = Range("Gantt.RowTemplate.ScheduleOnly.Milestone")
    End If

    Set currenttask = New TPGTask
    startRowIndex = wbsSheet.Range("Plan.ProjectHeader").row
    endRowIndex = wbsSheet.Range("Plan.ProjectFooter").row - 1

     If Not ((InitialProcName = "Admin.cmdClearPHB_Click") Or (InitialProcName = "Cover.cmdAdmin_Click")) Then _
        modStack.ShowProgressBar endRowIndex - startRowIndex + 1, "Creating Gantt Chart", "TPGTask.SetIndex"


    Dim ganttStartRow As Integer
    Dim rowRange As Range
    ganttStartRow = Range("Gantt.HeaderMinor").row + 1
    Dim colIndex As Integer
    Dim contentStartRow As Range
    Dim showLevel As Integer
    Dim rowTemplate As Range
    showLevel = Range("Gantt.ShowLevel").value
    Set contentStartRow = ganttWorksheet.Cells(ganttStartRow, 1).EntireRow
    ganttWorksheet.Range(contentStartRow, ganttWorksheet.Cells(ganttWorksheet.rows.Count, 1).EntireRow).Delete xlShiftUp
    ganttWorksheet.Range(ganttWorksheet.Cells(1, Range("Gantt.GanttSplitColumn").Column + 1), _
        ganttWorksheet.Cells(Range("Gantt.HeaderMinor").row, ganttWorksheet.Columns.Count)).Delete xlShiftToLeft
    'ganttWorksheet.Range(ganttWorksheet.Cells(Range("Gantt.HeaderMajor").Row, Range("Gantt.GanttSplitColumn").Column + 1), _
    '    ganttWorksheet.Cells(Range("Gantt.HeaderMinor").Row, ganttWorksheet.Columns.count)).Delete xlShiftToLeft


    For currentIndex = startRowIndex To endRowIndex
        currenttask.SetIndex currentIndex

        If (currentIndex = startRowIndex) Then
            If currenttask.GetEarliestStartDate = 0 Then GoTo subend
            If currenttask.GetLatestFinishDate = 0 Then GoTo subend

            If (IsEmpty(Range("Gantt.StartDate"))) Then
                ganttStartDate = currenttask.GetEarliestStartDate
            Else
                ganttStartDate = Range("Gantt.StartDate").value
            End If
            If (IsEmpty(Range("Gantt.FinishDate"))) Then
                ganttFinishDate = currenttask.GetLatestFinishDate
            Else
                ganttFinishDate = Range("Gantt.FinishDate").value
            End If
            ganttStartDate = AdjustStartDateToScale(Range("Gantt.TimeScale").value, ganttStartDate)
            ganttFinishDate = AdjustFinishDateToScale(Range("Gantt.TimeScale").value, ganttFinishDate)
            maxUnits = GetUnits(Range("Gantt.TimeScale").value, ganttStartDate, ganttFinishDate)

            If maxUnits + Range("Gantt.GanttSplitColumn").Column > 256 Then
                ganttFinishDate = AddUnitToDate(Range("Gantt.TimeScale").value, ganttFinishDate, (maxUnits + Range("Gantt.GanttSplitColumn").Column - 256) * -1)
                maxUnits = GetUnits(Range("Gantt.TimeScale").value, ganttStartDate, ganttFinishDate)
            End If
        End If

        '1 all
        '2 as in plan
        '3 phases
        '4 phases and milestones
        '5 milestones
        If (showLevel = 1 Or currenttask.IsProjectSummaryTask Or _
            showLevel = 2 And Not currenttask.isHidden Or _
            showLevel = 3 And currenttask.GetLevel <= 1 Or _
            showLevel = 4 And (currenttask.GetLevel <= 1 Or currenttask.IsMilestone) Or _
            showLevel = 5 And currenttask.IsMilestone) Then

            Set rowRange = ganttWorksheet.Cells(ganttStartRow, 1)
            Select Case currenttask.GetTyp
                Case "W"
                    Set rowTemplate = taskRowTemplate
                Case "S", "P"
                    Set rowTemplate = summaryRowTemplate
                Case "M"
                    Set rowTemplate = milestoneRowTemplate
            End Select

            rowTemplate.Copy rowRange
            
            'added for SALK
            Application.CutCopyMode = False
            
            Set rowRange = ganttWorksheet.Range( _
                rowRange.EntireRow, _
                ganttWorksheet.Cells(rowRange.row + rowTemplate.rows.Count - 1, 1).EntireRow)

            rowRange.Hidden = False


            For colIndex = 1 To Range("Gantt.GanttSplitColumn").Column - 1
                SetShapeData currenttask, ganttWorksheet.Cells(ganttStartRow + 1, colIndex)
                SetShapeData currenttask, ganttWorksheet.Cells(ganttStartRow + 3, colIndex)
            Next colIndex

           'Now making the bars
            CreateBar rowRange.EntireRow, Range("Gantt.GanttSplitColumn").Column + 1, currenttask, ganttStartDate, ganttFinishDate, maxUnits

            ganttStartRow = ganttStartRow + rowTemplate.rows.Count
        End If
    Next currentIndex

    Dim runningDate As Date
    runningDate = ganttStartDate
    Dim scaleRange As Range
    Dim majorScaleRange As Range
    Dim dateHeaderRange As Range
    Dim majorRangeLength As Integer
    majorRangeLength = 1
    Dim lastDate As Date
    lastDate = DateSerial(1900, 1, 1)
    Dim lastOne As Boolean
    lastOne = False
    Dim shp As shape

    For colIndex = 1 To maxUnits
        If colIndex = maxUnits Then lastOne = True
        Set scaleRange = ganttWorksheet.Cells(Range("Gantt.HeaderMinor").row, Range("Gantt.GanttSplitColumn").Column + colIndex)
        Set majorScaleRange = ganttWorksheet.Cells(Range("Gantt.HeaderMajor").row, Range("Gantt.GanttSplitColumn").Column + colIndex)
        Set dateHeaderRange = ganttWorksheet.Cells(Range("Gantt.DateHeader").row, Range("Gantt.GanttSplitColumn").Column + colIndex)
        SetScaleHeading Range("Gantt.TimeScale").value, runningDate, scaleRange, majorScaleRange, ganttStartRow, dateHeaderRange, majorRangeLength, lastDate, lastOne
        lastDate = runningDate
        runningDate = AddUnitToDate(Range("Gantt.TimeScale").value, runningDate)
    Next colIndex

    If Not (wholeColumnRangeTemp Is Nothing) Then
        Set shp = AddShapeToRange(msoShapeRectangle, wholeColumnRangeTemp)
        shp.Name = "RCTSCH" + Trim(CStr(currenttask.GetID))
        shp.Fill.visible = msoFalse
        With shp.Line
            .visible = msoTrue
            .ForeColor.RGB = RGB(227, 0, 27)
            .Transparency = 0
            .Weight = 1
        End With
        Set shp = Nothing
        Set wholeColumnRangeTemp = Nothing
    End If

    If Me.Range("Gantt.ShowDep").value Then
        CreateConnectors
        Gantt.Range("Gantt.GanttSplitColumn").ColumnWidth = 5
    Else
        Gantt.Range("Gantt.GanttSplitColumn").ColumnWidth = 0.17
    End If
    
subend:
    Me.PageSetup.PrintArea = Me.UsedRange.Address
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Gantt.CreateGantt error:"
    Resume subend
End Sub

Private Sub CreateConnectors()
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "CreateConnectors"
    Dim snamepattern As String
    Dim snamepattern_mst As String
    Dim id As Integer
    Dim oPlan As TPGPlan
    Dim baselineset As Boolean
    
    Set oPlan = New TPGPlan
    If Not (IsEmpty(Plan.Range("Plan.BaselineSaveDate"))) Then
        snamepattern = "TSKSCH"
        snamepattern_mst = "MSTSCH"
        baselineset = True
    Else
        snamepattern = "TSKSCH"
        snamepattern_mst = "MSTSCH"
'        snamepattern = "TSKBSL"
'        snamepattern_mst = "MSTBSL"
        baselineset = False
    End If

    'loop through tsk shapes, per AP define dependencies and draw connectors
    Dim shp                 As Excel.shape
    Dim sr                  As Excel.ShapeRange
    For Each shp In Me.Shapes
        If (shp.Type = msoAutoShape Or shp.Type = msoCallout) And (Len(shp.Name) > 6) Then
            If (Left(shp.Name, 6) = snamepattern) Then
                id = CInt(Right(shp.Name, Len(shp.Name) - 6))
                'find precedents and draw conntectors for this taskid
                SetConnectors oPlan, shp, id, baselineset
            ElseIf (Left(shp.Name, 6) = snamepattern_mst) Then
                id = CInt(Right(shp.Name, Len(shp.Name) - 6))
                'find precedents and draw conntectors for this taskid
                SetConnectors oPlan, shp, id, baselineset
            End If
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Gantt.CreateConnectors error:"
    Resume subend
End Sub

Private Sub SetConnectors(oPlan As TPGPlan, shp As Excel.shape, id As Integer, bbaselineset As Boolean)
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "SetConnectors"

    Dim oTask As TPGPlanTask
    Dim v As Variant
    Dim bfound As Boolean

    'get task for given id
    For Each oTask In oPlan.Tasks
        If oTask.id = id Then
            bfound = True
            Exit For
        End If
    Next
    
    If bfound Then
        If bbaselineset Then
            'date is a formula
            If Left(oTask.FActStart, 1) = "=" Then
                SetConnectorsDetail id, oTask.RowNo, Plan.Range("Plan.StartColumn").Column, True, bbaselineset, shp
            End If
            If (oTask.taskType = "W") Then
                If Left(oTask.FActFinish, 1) = "=" Then
                    SetConnectorsDetail id, oTask.RowNo, Plan.Range("Plan.FinishColumn").Column, False, bbaselineset, shp
                End If
            End If
        Else
            'date is a formula
            If Left(oTask.FBaseStart, 1) = "=" Then
                SetConnectorsDetail id, oTask.RowNo, Plan.Range("Plan.BaselineStartColumn").Column, True, bbaselineset, shp
            End If
            If (oTask.taskType = "W") Then
                If Left(oTask.FBaseFinish, 1) = "=" Then
                    SetConnectorsDetail id, oTask.RowNo, Plan.Range("Plan.BaselineFinishColumn").Column, False, bbaselineset, shp
                End If
            End If
        End If
    End If

    Set oTask = Nothing
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Gantt.SetConnectors error:"
    Resume subend
End Sub
Private Sub SetConnectorsDetail(id As Integer, row As Integer, col As Integer, bstart As Boolean, bbaselineset As Boolean, shp As Excel.shape)
    Dim c1 As Range
    Dim c2 As Range
    Dim c3 As Range
    Dim parentid As Integer
    Dim parentshape As Excel.shape
    Dim oConnector As shape

    Set c1 = Plan.Cells(row, col)
    Set c2 = c1.DirectPrecedents
    If Not c2 Is Nothing Then
        'loop through precedents
        For Each c3 In c2
            If IsNumeric(Plan.Cells(c3.row, Plan.Range("Plan.IDColumn").Column).value) Then
                parentid = Plan.Cells(c3.row, Plan.Range("Plan.IDColumn").Column).value
                ' dont show connectors for selfprecedents
                If (parentid > 0) And (parentid <> id) Then
                    'find the correct shape with given id and baseline or not
                    Set parentshape = getshape(parentid, bbaselineset)
                    If Not parentshape Is Nothing Then
                        'now we need to connect shp with parentshape
                        If c3.Column = col Then
                            If bstart Then
                                AddConnectorBetweenShapes msoConnectorElbow, parentshape, shp, Left2Left
                            Else
                                AddConnectorBetweenShapes msoConnectorElbow, parentshape, shp, right2right
                            End If
                        Else
                            If bstart Then
                                AddConnectorBetweenShapes msoConnectorElbow, parentshape, shp, right2left
                            Else
                                AddConnectorBetweenShapes msoConnectorElbow, parentshape, shp, left2right
                            End If
                        End If
                    End If
                End If
            End If
        Next
    End If
    Set c2 = Nothing
    Set c1 = Nothing
End Sub


Private Sub AddConnectorBetweenShapes(ConnectorType As MsoConnectorType, _
                                          oBeginShape As shape, _
                                          oEndShape As shape, ctype As ConnectionType)

    ' NOTE: These connection site constants only work for rectangular shapes with
    '       4 connection points. The call to RerouteConnections below will
    '       automatically reroute the connector to the shortest path between the shapes.
    Const TOP_SIDE As Integer = 1
    Const LEFT_SIDE As Integer = 2
    Const BOTTOM_SIDE As Integer = 3
    Const RIGHT_SIDE As Integer = 4
    
    Dim oConnector As shape
    Dim x1 As Single
    Dim x2 As Single
    Dim y1 As Single
    Dim y2 As Single
    
    With oBeginShape
        x1 = .Left + .Width / 2
        y1 = .Top + .Height
    End With
    
    With oEndShape
        x2 = .Left + .Width / 2
        y2 = .Top
    End With
    
    ' Excel 2007 uses absolute coordinates for the second point,
    ' of the AddConnector function. Previous versions of Excel
    ' use relative coordinates. But, ... (continued below)
    If Application.Version < "12.0" Then
        x2 = x2 - x1
        y2 = y2 - y1
    End If
    
    Set oConnector = Me.Shapes.AddConnector(ConnectorType, x1, y1, x2, y2)
    oConnector.Name = "CON" + oBeginShape.Name + oEndShape.Name + Trim(CStr(ctype))
    ' ... you can use any positive Single values if you connect
    ' the end points with BeginConnect and EndConnect:
    Select Case ctype
        Case Left2Left
            oConnector.ConnectorFormat.BeginConnect oBeginShape, LEFT_SIDE
            oConnector.ConnectorFormat.EndConnect oEndShape, LEFT_SIDE
        Case left2right
            oConnector.ConnectorFormat.BeginConnect oBeginShape, LEFT_SIDE
            oConnector.ConnectorFormat.EndConnect oEndShape, RIGHT_SIDE
        Case right2right
            oConnector.ConnectorFormat.BeginConnect oBeginShape, RIGHT_SIDE
            oConnector.ConnectorFormat.EndConnect oEndShape, RIGHT_SIDE
        Case right2left
            oConnector.ConnectorFormat.BeginConnect oBeginShape, RIGHT_SIDE
            oConnector.ConnectorFormat.EndConnect oEndShape, LEFT_SIDE
    End Select
'    If bReroute Then oConnector.RerouteConnections
    
    With oConnector
        If .Connector Or .Type = msoLine Then
            .Line.EndArrowheadStyle = msoArrowheadTriangle
            .ShapeStyle = msoLineStylePreset17
            .Line.Weight = 0.75
            .Line.ForeColor.RGB = RGB(78, 138, 210)
            .Line.Transparency = 0
            .Shadow.visible = msoFalse
        End If
    End With
    
    Set oConnector = Nothing

End Sub

Private Function getshape(id As Integer, bbaselineset As Boolean) As Excel.shape

    Dim shp                 As Excel.shape
    Dim sr                  As Excel.ShapeRange
    Dim s2 As String
    Dim s As String
'    If bbaselineset Then
        s = "TSKSCH" + Trim(CStr(id))
        s2 = "MSTSCH" + Trim(CStr(id))
'    Else
'        s = "TSKBSL" + Trim(CStr(id))
'        s2 = "MSTBSL" + Trim(CStr(id))
'    End If
    
    For Each shp In Me.Shapes
        If (shp.Name = s) Or (shp.Name = s2) Then
            Set getshape = shp
            Exit For
        End If
    Next
End Function

Private Sub SetShapeData(currenttask As TPGTask, taskShape As Range)
    Dim planRangeName As String
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "SetShapeData"

    Set taskShape = taskShape.MergeArea
    If (Not IsEmpty(taskShape.Cells(1, 1))) Then
        planRangeName = taskShape.Cells(1, 1).value
        If (VBA.Left(planRangeName, 1) = "$" And VBA.Right(planRangeName, 1) = "$") Then
            planRangeName = Replace(planRangeName, "$", "")
'           currenttask.GetCell(planRangeName).Copy
'            taskShape.PasteSpecial xlPasteValuesAndNumberFormats

            'This is to improve speed
            taskShape.value = currenttask.GetCell(planRangeName).value
            taskShape.NumberFormat = currenttask.GetCell(planRangeName).NumberFormat
            
            Application.DisplayAlerts = False
            taskShape.IndentLevel = currenttask.GetCell(planRangeName).IndentLevel
            Application.DisplayAlerts = True
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Gantt.SetShapeData error:"
    Resume subend
End Sub

'ganttFinish wird garnicht verwendet Oo
Private Sub CreateBar(taskRow As Range, startingColumn As Integer, currenttask As TPGTask, ganttStart As Date, ganttFinish As Date, maxUnits As Integer)
    Dim timescale As Integer
    Dim barUnits As Integer
    Dim distanceFromStart As Integer
    Dim finishedUnits As Integer
    Dim barEnd As Integer
    Dim barStart As Integer
    Dim shp As shape
    Dim sprefix As String
    
    'Added for Gantt mod
    Dim startOff As Double
    Dim finishOff As Double
    Dim prog As Double
    
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "CreateBar"

    timescale = Range("Gantt.TimeScale").value
    
    If (currenttask.HasStartDate And currenttask.HasFinishDate) Then
    
        If currenttask.GetTyp = "M" Then
            If currenttask.GetStartDate < ganttStart Then GoTo subend
            If currenttask.GetFinishDate > ganttFinish Then GoTo subend
        End If
    
        barUnits = GetUnits(timescale, currenttask.GetStartDate, currenttask.GetFinishDate)
        distanceFromStart = GetUnits(timescale, ganttStart, currenttask.GetStartDate) - 1
        
        'Added for Gantt Mod
        startOff = GetPartOffset(timescale, currenttask.GetStartDate)
        finishOff = 1 - GetPartOffset(timescale, currenttask.GetFinishDate)
        
        
        If (distanceFromStart < 0) Then
            barUnits = barUnits + distanceFromStart
            distanceFromStart = 0
        End If
        
        If (barUnits + distanceFromStart > maxUnits) Then
            barUnits = maxUnits - distanceFromStart
        End If
        
        

        
        If (Not currenttask.IsMilestone) Then
                
            If currenttask.IsWP Then
                sprefix = "TSK"
            Else
                sprefix = "NTK"
            End If
            
            finishedUnits = Int(barUnits * (currenttask.GetProgress / 100))
            barStart = startingColumn + distanceFromStart
'----
            'first draw schedulebar (=actual)
            barEnd = barStart + barUnits - 1
            If (barEnd - barStart >= 0) Then
'                Range("Gantt.ScheduleBarTemplate").Copy
                If (BaselineExists) Then
'                    Gantt.Range(Gantt.Cells(taskRow.Row + 1, barStart), CellFunctions.CellsWrapped(Gantt, taskRow.Row + 1, barEnd)).PasteSpecial xlPasteFormats
                    Set shp = AddShapeToRange(msoShapeRectangle, Gantt.Range(Gantt.Cells(taskRow.row + 1, barStart), CellFunctions.CellsWrapped(Gantt, taskRow.row + 1, barEnd)), startOff, finishOff)
                Else
'                    Gantt.Range(Gantt.Cells(taskRow.Row + 1, barStart), Gantt.Cells(taskRow.Row + 3, barEnd)).PasteSpecial xlPasteFormats
                    Set shp = AddShapeToRange(msoShapeRectangle, Gantt.Range(Gantt.Cells(taskRow.row + 1, barStart), CellFunctions.CellsWrapped(Gantt, taskRow.row + 3, barEnd)), startOff, finishOff)
                End If
                shp.Name = sprefix + "SCH" + Trim(CStr(currenttask.GetID))
                shp.Line.visible = msoFalse
                With shp.Fill
                    .visible = msoTrue
                    'actual full line
                    If Not currenttask.IsWP Then
                        'phase
                        .ForeColor.RGB = RGB(128, 128, 128)
                        .Transparency = 0
                        .Solid
                    Else
                        'WP
                        'modified for SALK
                        '.ForeColor.RGB = RGB(91, 155, 213)
                        .ForeColor.RGB = RGB(153, 204, 0)
                        .Transparency = 0
                        .Solid
                    End If
'                    If currenttask.IsWP Then
'                        .ForeColor.RGB = RGB(91, 155, 213) '(141, 180, 226)
'                        .Transparency = 0
'                        .Solid
'                    Else
'                        .ForeColor.RGB = RGB(0, 0, 0)
'                        .Patterned msoPatternLightUpwardDiagonal
'                        .BackColor.RGB = RGB(91, 155, 213) '(141, 180, 226)
'                    End If
                End With
                Set shp = Nothing
            End If

            'then draw completed bar on top of schedule bar (reason, easier with connectors)
            If (finishedUnits > 0) Then
'                barUnits = barUnits - finishedUnits
                If startOff = 0 And finishOff = 0 Then
                    barEnd = barStart + finishedUnits - 1
                    prog = 1
                Else
                    prog = currenttask.GetProgress / 100
                End If
                If (BaselineExists) Then
                    Set shp = AddShapeToRange(msoShapeRectangle, Gantt.Range(Gantt.Cells(taskRow.row + 1, barStart), Gantt.Cells(taskRow.row + 1, barEnd)), startOff, finishOff, prog)
                Else
                    Set shp = AddShapeToRange(msoShapeRectangle, Gantt.Range(Gantt.Cells(taskRow.row + 1, barStart), Gantt.Cells(taskRow.row + 3, barEnd)), startOff, finishOff, prog)
                End If

                shp.Name = sprefix + "CPL" + Trim(CStr(currenttask.GetID))
                shp.Line.visible = msoFalse
                With shp.Fill
                    .visible = msoTrue
                    'actual progress line
                    If Not currenttask.IsWP Then
                        'phase
                        .ForeColor.RGB = RGB(0, 0, 0)
                        .Patterned msoPatternLightUpwardDiagonal
                        '.BackColor.RGB = RGB(128, 128, 128)
                        .BackColor.RGB = RGB(126, 197, 30)
'                        .Transparency = 0
'                        .Solid
                    Else
                        'WP
                        'modified for SALK
                        '.ForeColor.RGB = RGB(153, 204, 0)
                        .ForeColor.RGB = RGB(0, 0, 0)
                        .Patterned msoPatternLightUpwardDiagonal
                        '.BackColor.RGB = RGB(91, 155, 213)
                        .BackColor.RGB = RGB(126, 197, 30)
'                        .Transparency = 0
'                        .Solid
                    End If
'                    If currenttask.IsWP Then
'                        .ForeColor.RGB = RGB(54, 96, 146)
'                        .Transparency = 0
'                        .Solid
'                    Else
'                        .ForeColor.RGB = RGB(0, 0, 0)
'                        .Patterned msoPatternLightUpwardDiagonal
'                        .BackColor.RGB = RGB(54, 96, 146)
'                    End If
                End With
                Set shp = Nothing
            End If


'----
            
            
'            If (finishedUnits > 0) Then
''                Range("Gantt.ScheduleBarCompletedTemplate").Copy
'                If (BaselineExists) Then
''                    Gantt.Range(Gantt.Cells(taskRow.Row + 1, barStart), Gantt.Cells(taskRow.Row + 1, barEnd)).PasteSpecial xlPasteFormats
'                    Set shp = AddShapeToRange(msoShapeRectangle, Gantt.Range(Gantt.Cells(taskRow.Row + 1, barStart), Gantt.Cells(taskRow.Row + 1, barEnd)))
'
'                Else
''                    Gantt.Range(Gantt.Cells(taskRow.Row + 1, barStart), Gantt.Cells(taskRow.Row + 3, barEnd)).PasteSpecial xlPasteFormats
'                    Set shp = AddShapeToRange(msoShapeRectangle, Gantt.Range(Gantt.Cells(taskRow.Row + 1, barStart), Gantt.Cells(taskRow.Row + 3, barEnd)))
'                End If
'
'                shp.Name = "TSKCPL" + Trim(CStr(currenttask.GetID))
'                With shp.Fill
'                    .visible = msoTrue
'                    .ForeColor.RGB = RGB(54, 96, 146)
'                    .Transparency = 0
'                    .Solid
'                End With
'                shp.Line.visible = msoFalse
'                Set shp = Nothing
'
'            End If
'
'            barStart = startingColumn + distanceFromStart  + finishedUnits
'            barEnd = barStart + barUnits - 1
'            If (barEnd - barStart >= 0) Then
''                Range("Gantt.ScheduleBarTemplate").Copy
'                If (BaselineExists) Then
''                    Gantt.Range(Gantt.Cells(taskRow.Row + 1, barStart), CellFunctions.CellsWrapped(Gantt, taskRow.Row + 1, barEnd)).PasteSpecial xlPasteFormats
'                    Set shp = AddShapeToRange(msoShapeRectangle, Gantt.Range(Gantt.Cells(taskRow.Row + 1, barStart), CellFunctions.CellsWrapped(Gantt, taskRow.Row + 1, barEnd)))
'                Else
''                    Gantt.Range(Gantt.Cells(taskRow.Row + 1, barStart), Gantt.Cells(taskRow.Row + 3, barEnd)).PasteSpecial xlPasteFormats
'                    Set shp = AddShapeToRange(msoShapeRectangle, Gantt.Range(Gantt.Cells(taskRow.Row + 1, barStart), CellFunctions.CellsWrapped(Gantt, taskRow.Row + 3, barEnd)))
'                End If
'                shp.Name = "TSKSCH" + Trim(CStr(currenttask.GetID))
'                With shp.Fill
'                    .visible = msoTrue
'                    .ForeColor.RGB = RGB(141, 180, 226)
'                    .Transparency = 0
'                    .Solid
'                End With
'                shp.Line.visible = msoFalse
'                Set shp = Nothing
'            End If



        Else
            barStart = startingColumn + distanceFromStart
            If (barStart <= maxUnits + startingColumn) Then
                'Range("Gantt.ScheduleMilestoneTemplate").Copy Gantt.Cells(taskRow.Row + 1, barStart)
                Set shp = AddPointShapeToRange(msoShapeDiamond, Gantt.Cells(taskRow.row + 1, barStart), startOff)
'                Set shp = AddPointShapeRelativeToRange(msoShapeDiamond, Gantt.Cells(taskRow.row + 1, barStart), timeScale, currenttask.GetStartDate)
                shp.Name = "MSTSCH" + Trim(CStr(currenttask.GetID))
                With shp.Fill
                    .visible = msoTrue
                    .ForeColor.RGB = RGB(227, 0, 27)
                    .Transparency = 0
                    .Solid
                End With
                shp.Line.visible = msoFalse
                Set shp = Nothing
                
                If Not (BaselineExists) Then
                    Gantt.Range(Gantt.Cells(taskRow.row + 1, barStart), Gantt.Cells(taskRow.row + 3, barStart)).Merge
                    Gantt.Range(Gantt.Cells(taskRow.row + 1, barStart), Gantt.Cells(taskRow.row + 3, barStart)).VerticalAlignment = xlCenter
                    Gantt.Range(Gantt.Cells(taskRow.row + 1, barStart), Gantt.Cells(taskRow.row + 3, barStart)).HorizontalAlignment = xlCenter
                End If
            End If
        End If
        
        
    End If

    If (BaselineExists) Then
        If (currenttask.HasBaselineStartDate And currenttask.HasBaselineFinishDate) Then

            barUnits = GetUnits(timescale, currenttask.GetBaselineStartDate, currenttask.GetBaselineFinishDate)
            distanceFromStart = GetUnits(timescale, ganttStart, currenttask.GetBaselineStartDate) - 1
            If (distanceFromStart < 0) Then
                barUnits = barUnits + distanceFromStart
                distanceFromStart = 0
            End If

            If (barUnits + distanceFromStart > maxUnits) Then
                barUnits = maxUnits - distanceFromStart
            End If

            barStart = startingColumn + distanceFromStart
            barEnd = barStart + barUnits - 1

            'Added for Gantt Mod
            startOff = GetPartOffset(timescale, currenttask.GetBaselineStartDate)
            finishOff = 1 - GetPartOffset(timescale, currenttask.GetBaselineFinishDate)

            If (Not currenttask.IsMilestone) Then
                If currenttask.IsWP Then
                    sprefix = "TSK"
                Else
                    sprefix = "NTK"
                End If

                If (barEnd - barStart >= 0) Then

'                    Range("Gantt.BaselineBarTemplate").Copy
'                    Gantt.Range(Gantt.Cells(taskRow.Row + 3, startingColumn + distanceFromStart), Gantt.Cells(taskRow.Row + 3, startingColumn + distanceFromStart + barUnits - 1)).PasteSpecial xlPasteFormats
                    Set shp = AddShapeToRange(msoShapeRectangle, Gantt.Range(Gantt.Cells(taskRow.row + 3, startingColumn + distanceFromStart), Gantt.Cells(taskRow.row + 3, startingColumn + distanceFromStart + barUnits - 1)), startOff, finishOff)
                    shp.Name = sprefix + "BSL" + Trim(CStr(currenttask.GetID))
                    shp.Line.visible = msoFalse
                    With shp.Fill
                        .visible = msoTrue
                        'baseline bar
                        If currenttask.IsWP Then
                            'WP
                            .ForeColor.RGB = RGB(217, 217, 217)
                            .Transparency = 0
                            .Solid
                        Else
                            'Phase
                            .ForeColor.RGB = RGB(166, 166, 166)
                            .Transparency = 0
                            .Solid
'                            shp.Line.ForeColor.RGB = RGB(166, 166, 166)
'                            shp.Line.Weight = 1
'                            shp.Line.visible = msoTrue

'                            .ForeColor.RGB = RGB(0, 0, 0)
'                            .Patterned msoPatternLightUpwardDiagonal
'                            .BackColor.RGB = RGB(128, 128, 128)
                        End If
                    End With
                    shp.ZOrder msoSendToBack
                    Set shp = Nothing

                End If
            Else
                If (barStart <= maxUnits + startingColumn) Then
'                    Range("Gantt.BaselineMilestoneTemplate").Copy Gantt.Cells(taskRow.Row + 3, startingColumn + distanceFromStart)
                    Set shp = AddPointShapeToRange(msoShapeDiamond, Gantt.Cells(taskRow.row + 3, startingColumn + distanceFromStart), startOff)
                    'Set shp = AddPointShapeRelativeToRange(msoShapeDiamond, Gantt.Cells(taskRow.row + 1, barStart), timeScale, currenttask.GetBaselineStartDate)
                    shp.Name = "MSTBSL" + Trim(CStr(currenttask.GetID))
                    With shp.Fill
                        .visible = msoTrue
                        .ForeColor.RGB = RGB(217, 217, 217)
                        .Transparency = 0
                        .Solid
                    End With
                    shp.Line.visible = msoFalse
                    Set shp = Nothing
                End If
            End If
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Gantt.CreateBar error:"
    Resume subend
End Sub

Private Function GetUnits(timescale As Integer, StartDate As Date, FinishDate As Date) As Integer
    Dim barUnits As Integer
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "GetUnits"

    Select Case timescale
        Case 1 'days
            barUnits = DateDiff("d", StartDate, FinishDate)
            GetUnits = barUnits + 1
        Case 2 'weeks
            barUnits = WeekDiff(StartDate, FinishDate)
            GetUnits = barUnits
        Case 3 'months
            barUnits = DateDiff("m", StartDate, FinishDate)
            GetUnits = barUnits + 1
        Case 4 'quarters
            barUnits = DateDiff("q", StartDate, FinishDate)
            GetUnits = barUnits + 1
    End Select

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Gantt.GetUnits error:"
    Resume subend
End Function

Private Function AddUnitToDate(timescale As Integer, anyDate As Date, Optional units As Integer = 1) As Date
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "AddUnitToDate"

    Select Case timescale
        Case 1 'days
            AddUnitToDate = DateAdd("d", units, anyDate)
        Case 2 'weeks
            AddUnitToDate = DateAdd("d", units, anyDate)
            While (DatePart("w", AddUnitToDate) <> vbMonday)
                AddUnitToDate = DateAdd("d", units, AddUnitToDate)
            Wend
        Case 3 'months
            AddUnitToDate = DateAdd("m", units, anyDate)
        Case 4 'quarters
            AddUnitToDate = DateAdd("q", units, anyDate)
    End Select

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Gantt.AddUnitToDate error:"
    Resume subend
End Function

Private Function DateInScale(timescale As Integer, anyDate As Date, scaleDate As Date) As Boolean
    Dim scaleDateFinish As Date
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "DateInScale"

    scaleDateFinish = AddUnitToDate(timescale, scaleDate)
    DateInScale = anyDate >= scaleDate And anyDate < scaleDateFinish

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Gantt.DateInScale error:"
    Resume subend
End Function

Private Function AdjustStartDateToScale(timescale As Integer, anyDate As Date) As Date
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "AdjustStartDateToScale"

    AdjustStartDateToScale = anyDate
    Select Case timescale
        Case 1 'days
            AdjustStartDateToScale = DateAdd("d", -1, anyDate)
        Case 2 'weeks
            While (DatePart("w", AdjustStartDateToScale) <> vbMonday)
                AdjustStartDateToScale = DateAdd("d", -1, AdjustStartDateToScale)
            Wend
            AdjustStartDateToScale = DateAdd("d", -7, AdjustStartDateToScale)
        Case 3 'months
            AdjustStartDateToScale = DateSerial(DatePart("yyyy", anyDate), DatePart("m", anyDate), 1)
            AdjustStartDateToScale = DateAdd("m", -1, AdjustStartDateToScale)
        Case 4 'quarters
            AdjustStartDateToScale = DateSerial(DatePart("yyyy", anyDate), DatePart("m", anyDate), 1)
            AdjustStartDateToScale = DateAdd("m", -1, AdjustStartDateToScale)
            Dim mon As Integer
            mon = Month(AdjustStartDateToScale)
            While (mon <> 1 And mon <> 4 And mon <> 7 And mon <> 10)
                AdjustStartDateToScale = DateAdd("m", -1, AdjustStartDateToScale)
                mon = Month(AdjustStartDateToScale)
            Wend
    End Select

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Gantt.AdjustStartDateToScale error:"
    Resume subend
End Function

Private Function AdjustFinishDateToScale(timescale As Integer, anyDate As Date) As Date
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "AdjustFinishDateToScale"

    AdjustFinishDateToScale = anyDate
    Select Case timescale
        Case 1 'days
            AdjustFinishDateToScale = DateAdd("d", 1, anyDate)
        Case 2 'weeks
            While (DatePart("w", AdjustFinishDateToScale) <> vbMonday)
                AdjustFinishDateToScale = DateAdd("d", -1, AdjustFinishDateToScale)
            Wend
            AdjustFinishDateToScale = DateAdd("d", 7, AdjustFinishDateToScale)
        Case 3 'months
            AdjustFinishDateToScale = DateSerial(DatePart("yyyy", anyDate), DatePart("m", anyDate), 1)
            AdjustFinishDateToScale = DateAdd("m", 1, AdjustFinishDateToScale)
        Case 4 'quarters
            AdjustFinishDateToScale = DateSerial(DatePart("yyyy", anyDate), DatePart("m", anyDate), 1)
            AdjustFinishDateToScale = DateAdd("m", 1, AdjustFinishDateToScale)
            Dim mon As Integer
            mon = Month(AdjustFinishDateToScale)
            While (mon <> 1 And mon <> 4 And mon <> 7 And mon <> 10)
                AdjustFinishDateToScale = DateAdd("m", -1, AdjustFinishDateToScale)
                mon = Month(AdjustFinishDateToScale)
            Wend
    End Select

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Gantt.AdjustFinishDateToScale error:"
    Resume subend
End Function

Private Sub SetScaleHeading(timescale As Integer, anyDate As Date, targetMinorRange As Range, targetMajorRange As Range, MaxRows As Integer, dateHeaderRange As Range, ByRef majorRangeLength As Integer, lastDate As Date, lastOne As Boolean)
    Dim ganttWorksheet As Worksheet
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "SetScaleHeading"

    Set ganttWorksheet = Gantt
    Dim lastDateExists As Boolean
    Dim majorJump As Boolean
    Dim mergedArea As Range
    Dim wholeColumnRange As Range
    
    majorJump = False
    If (lastDate <> DateSerial(1900, 1, 1)) Then
        lastDateExists = True
    Else
        lastDateExists = False
    End If
    
    targetMajorRange.HorizontalAlignment = xlLeft
    
    dateHeaderRange.value = anyDate
    targetMinorRange.formula = GetFormula(timescale, False, targetMinorRange)
    
    'if timescale is for months - use auto translations
    If timescale = 3 Then
        targetMinorRange.formula = "=VLOOKUP(" & """" & "Mon" & Month(targetMinorRange.value) & """" & ",LOC.Table,Cover.LOC,FALSE)"
    End If
    
    targetMinorRange.NumberFormat = GetFormat(timescale, False, targetMinorRange)
    targetMinorRange.Orientation = GetFormatCell(timescale, False, targetMinorRange).Orientation
    targetMajorRange.formula = GetFormula(timescale, True, targetMajorRange)
    targetMajorRange.NumberFormat = GetFormat(timescale, True, targetMajorRange)
    targetMajorRange.Orientation = GetFormatCell(timescale, True, targetMajorRange).Orientation
        
    Select Case timescale
        Case 1 'days
            If (Not lastDateExists Or GetWeekNo(anyDate) <> GetWeekNo(lastDate)) Then
                majorJump = True
            End If
        Case 2 'weeks
            targetMinorRange.value = appGetLOCText("CW") + VBA.Format("00", GetWeekNo(anyDate))
            If (Not lastDateExists Or DatePart("m", anyDate) <> DatePart("m", lastDate)) Then
                majorJump = True
            End If
        Case 3 'months
            If (Not lastDateExists Or DatePart("yyyy", anyDate) <> DatePart("yyyy", lastDate)) Then
                majorJump = True
            End If
        Case 4 'quarters
            If (Not lastDateExists Or DatePart("yyyy", anyDate) <> DatePart("yyyy", lastDate)) Then
                majorJump = True
            End If
    End Select
    
    Set wholeColumnRange = ganttWorksheet.Range( _
                ganttWorksheet.Cells(targetMinorRange.row, targetMinorRange.Column), _
                ganttWorksheet.Cells(MaxRows - 1, targetMinorRange.Column))
    
    With wholeColumnRange.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .Color = RGB(235, 235, 235)
    End With
       
    If (majorJump) Then
    
            Set wholeColumnRange = ganttWorksheet.Range( _
                ganttWorksheet.Cells(targetMajorRange.row, targetMajorRange.Column), _
                ganttWorksheet.Cells(MaxRows - 1, targetMajorRange.Column))
 
            With wholeColumnRange.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlThin
                If (lastDateExists) Then
                .Color = RGB(191, 191, 191)
                End If
            End With
        
        
        
        Application.DisplayAlerts = False
        Set mergedArea = ganttWorksheet.Range(ganttWorksheet.Cells(targetMajorRange.row, targetMajorRange.Column - majorRangeLength), _
            ganttWorksheet.Cells(targetMajorRange.row + 1, targetMajorRange.Column - 1))
        mergedArea.Merge
        mergedArea.VerticalAlignment = xlCenter
        mergedArea.HorizontalAlignment = xlCenter
        
        If (lastOne) Then
            Set mergedArea = ganttWorksheet.Range(ganttWorksheet.Cells(targetMajorRange.row, targetMajorRange.Column), _
                ganttWorksheet.Cells(targetMajorRange.row + 1, targetMajorRange.Column))
            mergedArea.Merge
            mergedArea.VerticalAlignment = xlCenter
            mergedArea.HorizontalAlignment = xlCenter
        
            Set wholeColumnRange = ganttWorksheet.Range( _
                ganttWorksheet.Cells(targetMajorRange.row, targetMajorRange.Column), _
                ganttWorksheet.Cells(MaxRows - 1, targetMajorRange.Column))
            With wholeColumnRange.Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .Color = RGB(191, 191, 191)
            End With
        End If
            
        Application.DisplayAlerts = True
        
        majorRangeLength = 1
    Else
        If (lastOne) Then
            Application.DisplayAlerts = False
            Set mergedArea = ganttWorksheet.Range(ganttWorksheet.Cells(targetMajorRange.row, targetMajorRange.Column - majorRangeLength), _
                ganttWorksheet.Cells(targetMajorRange.row + 1, targetMajorRange.Column))
            mergedArea.Merge
            mergedArea.VerticalAlignment = xlCenter
            mergedArea.HorizontalAlignment = xlCenter
            Set wholeColumnRange = ganttWorksheet.Range( _
                ganttWorksheet.Cells(targetMajorRange.row, targetMajorRange.Column), _
                ganttWorksheet.Cells(MaxRows - 1, targetMajorRange.Column))
            With wholeColumnRange.Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .Color = RGB(191, 191, 191)
            End With
            
            Application.DisplayAlerts = True
        End If
        majorRangeLength = majorRangeLength + 1
    End If
    
    If Cover.Range("Cover.Statusdate").value <> "" Then
'        If (DateInScale(timeScale, Now, anyDate)) Then
        If (DateInScale(timescale, CDate(Cover.Range("Cover.Statusdate").value), anyDate)) Then
            Set wholeColumnRangeTemp = ganttWorksheet.Range( _
                ganttWorksheet.Cells(targetMinorRange.row, targetMinorRange.Column), _
                ganttWorksheet.Cells(MaxRows - 1, targetMinorRange.Column))
            
        End If
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Gantt.SetScaleHeading error:"
    Resume subend
End Sub

'currentCell wird auch nicht verwendet...
Private Function GetFormatCell(timescale As Integer, Major As Boolean, currentCell As Range) As Range
    Dim rangename As String
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "GetFormatCell"

    Select Case timescale
        Case 1 'days
            rangename = "Gantt.DayView."
        Case 2 'weeks
            rangename = "Gantt.WeekView."
        Case 3 'months
            rangename = "Gantt.MonthView."
        Case 4 'quarters
            rangename = "Gantt.QuarterView."
    End Select
    
    If (Major) Then
        rangename = rangename + "Major"
    Else
        rangename = rangename + "Minor"
    End If

    Dim formatRange As Range
    Set formatRange = Gantt.Cells(Range(rangename).row, Range(rangename).Column + 1)
    Set GetFormatCell = formatRange

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Gantt.GetFormatCell error:"
    Resume subend
End Function
Private Function GetFormat(timescale As Integer, Major As Boolean, currentCell As Range) As String
    Dim formatRange As Range
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "GetFormat"

    Set formatRange = GetFormatCell(timescale, Major, currentCell)

    GetFormat = VBA.UCase(VBA.Mid(formatRange.value, 1))
    GetFormat = Replace(Replace(GetFormat, "CURRENTCELL", currentCell.Address(False, False)), ";", ",")

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Gantt.GetFormat error:"
    Resume subend
End Function
Private Function GetFormula(timescale As Integer, Major As Boolean, currentCell As Range) As String
    Dim rangename As String
    On Error GoTo suberr
    modStack.PushCallStack "Gantt", "GetFormula"

    Select Case timescale
        Case 1 'days
            rangename = "Gantt.DayView."
        Case 2 'weeks
            rangename = "Gantt.WeekView."
        Case 3 'months
            rangename = "Gantt.MonthView."
        Case 4 'quarters
            rangename = "Gantt.QuarterView."
    End Select
    
    If (Major) Then
        rangename = rangename + "Major"
    Else
        rangename = rangename + "Minor"
    End If

    GetFormula = Replace(Replace(VBA.UCase(VBA.Mid(Range(rangename).value, 1)), "CURRENTCELL", currentCell.Address(False, False)), ";", ",")

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Gantt.GetFormula error:"
    Resume subend
End Function

Sub test()
    Static i As Integer
    i = i + 1
    Debug.Print i
End Sub

Private Sub DeleteAllTaskShapes()
    Dim arrShapeNames()     As Variant 'must be Variant to work with Shapes.Range()
    Dim shp                 As Excel.shape
    Dim sr                  As Excel.ShapeRange
    Dim i                   As Integer
    
    If Application.Version = "12.0" Then
        UnprotectSheet Me
        For Each shp In Me.Shapes
            If shp.Type = msoAutoShape Or shp.Type = msoCallout Then 'no buttons!
                If (Left(shp.Name, 3) = "TSK") Or (Left(shp.Name, 3) = "CON") Or (Left(shp.Name, 3) = "NTK") Or (Left(shp.Name, 3) = "MST") Or (Left(shp.Name, 3) = "RCT") Then
                    shp.Delete
                End If
            End If
        Next
    Else
        If Me.Shapes.Count > 0 Then ReDim arrShapeNames(Me.Shapes.Count - 1)
        i = 0
        For Each shp In Me.Shapes
            If shp.Type = msoAutoShape Or shp.Type = msoCallout Then 'no buttons!
                If (Left(shp.Name, 3) = "TSK") Or (Left(shp.Name, 3) = "CON") Or (Left(shp.Name, 3) = "NTK") Or (Left(shp.Name, 3) = "MST") Or (Left(shp.Name, 3) = "RCT") Then
                    arrShapeNames(i) = shp.Name
                    i = i + 1
                End If
            End If
        Next
        If i = 0 Then Exit Sub  ' there were no valid shapes
        ' The first ReDim may have included room for invalid
        ' shape types - in this case the buttons. This ReDim
        ' trims the array size down accordingly
        ReDim Preserve arrShapeNames(i - 1)
        Set sr = Me.Shapes.Range(arrShapeNames)
        sr.Select
        sr.Delete
        Set sr = Nothing
    End If
End Sub

Private Function AddShapeToRange(ShapeType As MsoAutoShapeType, _
                                 rRange As Range, Optional sOffset As Double = 0, Optional fOffset As Double = 0, _
                                 Optional perc As Double = 1) As shape
                                 
    With rRange
        Set AddShapeToRange = Me.Shapes.AddShape(ShapeType, .Left + rRange.Cells(1, 1).Width * sOffset, _
                             .Top - 1, IIf((.Width - (rRange.Cells(1, 1).Width * sOffset) - (rRange.Cells(1, rRange.Columns.Count).Width * fOffset)) < 1, 1, _
                             (.Width - (rRange.Cells(1, 1).Width * sOffset) - (rRange.Cells(1, rRange.Columns.Count).Width * fOffset))) * perc, .Height + 1)
     
    End With
End Function

Private Function AddPointShapeToRange(ShapeType As MsoAutoShapeType, _
                                 rRange As Range, Optional sOffset As Double = 0) As shape
Dim Sh As Single
Sh = rRange.Height

    With rRange
        'Set AddPointShapeToRange = Me.Shapes.AddShape(ShapeType, .Left + ((.Width / 2) - (sh / 2)), .Top, sh, sh)
        Set AddPointShapeToRange = Me.Shapes.AddShape(ShapeType, .Left + rRange.Cells(1, 1).Width * sOffset - (Sh / 2), .Top, Sh, Sh)
    End With
End Function

Private Function AddPointShapeRelativeToRange(ShapeType As MsoAutoShapeType, _
                                 rRange As Range, timescale As Integer, ddate As Date) As shape
Dim Sh As Single
Sh = rRange.Height
                                 
    Select Case timescale
        Case 1 'days
'            barUnits = DateDiff("d", StartDate, FinishDate)
'            GetUnits = barUnits + 1
            With rRange
                Set AddPointShapeRelativeToRange = Me.Shapes.AddShape(ShapeType, .Left + ((.Width / 2) - (Sh / 2)), .Top, Sh, Sh)
            End With
        Case 2 'weeks
'            barUnits = WeekDiff(StartDate, FinishDate)
'            GetUnits = barUnits
            With rRange
                Set AddPointShapeRelativeToRange = Me.Shapes.AddShape(ShapeType, .Left + ((.Width / 2) - (Sh / 2)), .Top, Sh, Sh)
            End With
        Case 3 'months
'            barUnits = DateDiff("m", StartDate, FinishDate)
'            GetUnits = barUnits + 1
            With rRange
                Set AddPointShapeRelativeToRange = Me.Shapes.AddShape(ShapeType, .Left + ((.Width / 2) - (Sh / 2)), .Top, Sh, Sh)
            End With
        Case 4 'quarters
'            barUnits = DateDiff("q", StartDate, FinishDate)
'            GetUnits = barUnits + 1
            With rRange
                Set AddPointShapeRelativeToRange = Me.Shapes.AddShape(ShapeType, .Left + ((.Width / 2) - (Sh / 2)), .Top, Sh, Sh)
            End With
    End Select
                                 
End Function

'Added for Gantt Mod
Private Function GetNumDays(d As Date)
    GetNumDays = Day(DateSerial(Year(d), Month(d) + 1, 1) - 1)
End Function

Private Function GetPartOffset(timescale As Integer, selected As Date) As Double

    Select Case timescale
        Case 1 'days
            GetPartOffset = 0
        Case 2 'weeks
            GetPartOffset = (Weekday(selected, vbMonday) - 1) / 7
        Case 3 'months
            GetPartOffset = Day(selected) / GetNumDays(selected)
        Case 4 'quarters
            GetPartOffset = (IIf(Month(selected) Mod 3 = 0, 2, (Month(selected) Mod 3) - 1) + Day(selected) / GetNumDays(selected)) / 3
            
        '    GetPartOffset = (IIf(Month(selected) Mod 3 = 0, 2, ((Month(selected) Mod 3)) - 1) / 3)
'            GetPartOffset = (Month(selected) Mod 3) / 3
'            GetPartOffset = IIf(GetPartOffset = 0, 1, GetPartOffset)
    End Select
End Function


Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Import"
Option Explicit
'(kissimport) Added for KISSIMPORT in normal PHB
Private pKissTeamNode As Variant
Private pKissImportCancel As Boolean
Private pNewTeamDept As TPGDictionary
Private pExternCost As TPGCostType
'this will prevent WT.SyncToPlan to double in PB
Public KissOnceSync As Boolean
Public ImportKISSinPHB As Boolean '=true when KISS is imported in normal PHB (not in kissphb!!)
Public KISSVersionForPHB As String
Public Property Get KissTeamNode() As Variant:    Set KissTeamNode = pKissTeamNode:                End Property
Public Property Let KissImportCancel(value As Boolean):     pKissImportCancel = value:                End Property
Public Property Set NewTeamDept(value As TPGDictionary):    Set pNewTeamDept = value:                End Property
Public Property Get NewTeamDept():    Set NewTeamDept = pNewTeamDept:                End Property
Public Property Set ExternCost(value As TPGCostType):    Set pExternCost = value:                End Property

'notes on KISS
'> there is a KISS license which turns the whole PHB in a KISS PHB
'you can import a KISS into a KISS PHB
'> there is also the possibility to import a KISS into an normal PHB
'these are 2 different subjects!!!!!
'the import of KISS in normal PHB is indicated in code with: (kissimport)
'> there is also the scenario where a normal PHB has KISS complexity, but otherwise a normal PHB
'this again is a different subject, kissimport is not applied here

Public Sub ImportPHB()
    Dim filedialog
    Dim FileName As String
    On Error GoTo suberr
    modStack.PushCallStack "Import", "ImportPHB"

    sActiveLicense = pStrVersion 'once and a while we refresh the global sActivelicense var, to be sure it is correct
    
    filedialog = Application.GetOpenFilename("Xml-Files (*.xml), *.xml")
    If filedialog <> False Then
        
        FileName = CStr(filedialog)
        modRibbon.bnoRibbonUpdate = True
        If ImportFromFile(FileName) Then
            SetContentsSheet
            Cover.Activate
            AppInfoMsg appGetLOCText("done")
        End If
    End If

subend:
    modRibbon.bnoRibbonUpdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Import.ImportPHB error:"
    Resume subend

End Sub

Private Function AssertCorrectAdmin(Node As Variant, CoverNode As Variant, Optional bCoverCheck As Boolean = True) As Boolean
    Dim n As Variant
    On Error GoTo suberr
    modStack.PushCallStack "Import", "AssertCorrectAdmin"

    AssertCorrectAdmin = True
    If Node Is Nothing Then GoTo subend 'when a MS-Project XML file is imported we don't have this node and we can't check correct admin data
    For Each n In Node.SelectNodes("worktypes/worktype")
        If Not Admin.HasOrgUnit(n.Text) Then
            modApp.AppStopMsg appGetLOCText("msgAdminMismatch") & "; OrgUnit: " & n.Text
            AssertCorrectAdmin = False
            GoTo subend
        End If
    Next

    For Each n In Node.SelectNodes("workcosttypes/workcosttype")
        If Not Admin.HasWorkCostType(n.Text) Then
            modApp.AppStopMsg appGetLOCText("msgAdminMismatch") & "; WorkCostType: " & n.Text
            AssertCorrectAdmin = False
            GoTo subend
        End If
    Next
    
    For Each n In Node.SelectNodes("costtypes/costtype")
        If Not Admin.HasCostType(n.Text) Then
            modApp.AppStopMsg appGetLOCText("msgAdminMismatch") & "; CostType: " & n.Text
            AssertCorrectAdmin = False
            GoTo subend
        End If
    Next
    
    If bCoverCheck Then
        'if customfieldsettings present in XML then they must correspond with admin settings
        'of this phb
        If Not CoverNode.SelectSingleNode("customfieldsettings") Is Nothing Then
            If Not (Admin.CustomFieldSettingOk(1, CoverNode.SelectSingleNode("customfieldsettings/f1name").Text, CoverNode.SelectSingleNode("customfieldsettings/f1activate").Text) And _
            Admin.CustomFieldSettingOk(2, CoverNode.SelectSingleNode("customfieldsettings/f2name").Text, CoverNode.SelectSingleNode("customfieldsettings/f2activate").Text) And _
            Admin.CustomFieldSettingOk(3, CoverNode.SelectSingleNode("customfieldsettings/f3name").Text, CoverNode.SelectSingleNode("customfieldsettings/f3activate").Text)) Then
                modApp.AppStopMsg appGetLOCText("msgAdminMismatchCustomFields")
                AssertCorrectAdmin = False
                GoTo subend
            End If
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Import.AssertCorrectAdmin error:"
    Resume subend
End Function

Public Function ImportFromFile(FileName As String)
    Dim metadata
    Dim sversion As String
    Dim OBJXMLDOC As Variant
    Dim language As Integer
    Dim sht As Worksheet
    Dim PersonsPlanned As Boolean

    ' Create the XML DOM object
    On Error GoTo suberr
    modStack.PushCallStack "Import", "ImportFromFile"
    bNoNormalProtectActionsRequired = True

    Set OBJXMLDOC = CreateObject("Microsoft.XMLDOM")
    OBJXMLDOC.async = False
    OBJXMLDOC.Load FileName
    
    Set metadata = OBJXMLDOC.SelectSingleNode("/phb/metadata")
    If Not metadata Is Nothing Then
        sversion = metadata.SelectSingleNode("version").Text
    
        'make sure we dont import not KISS version into KISS
        If (sActiveLicense = "K") Then
            If Not OBJXMLDOC.SelectSingleNode("/phb/metadata/license") Is Nothing Then
                If OBJXMLDOC.SelectSingleNode("/phb/metadata/license").Text <> "K" Then
                    modApp.AppStopMsg appGetLOCText("msgLicenseMismatchKISS")
                    GoTo subend
                End If
            Else
                If sversion >= "3.0.00" Then
                    'if the license node is not present then it surely can not be a KISS PHB
                    modApp.AppStopMsg appGetLOCText("msgLicenseMismatchKISS")
                    GoTo subend
                ElseIf OBJXMLDOC.SelectSingleNode("/phb/data/cover/complexity").Text <> "pm k.i.s.s.|fffd| Projekt" Then
                    modApp.AppStopMsg appGetLOCText("msgLicenseMismatchKISS")
                    GoTo subend
                'so, now we have an old PHB version with KISS complexity
                'now we look if it surely is a KISS PHB or not by presence of risks_kiss node
                ElseIf OBJXMLDOC.SelectSingleNode("phb/data/risks_kiss") Is Nothing Then
                    modApp.AppStopMsg appGetLOCText("msgLicenseMismatchKISS")
                    GoTo subend
                End If
            End If
            If OBJXMLDOC.SelectSingleNode("phb/data/team/members/member/name").Text <> Cover.Range("Cover.Manager.Table").Cells(2, 2).value Then
                AppStopMsg appGetLOCText("WrongManager")
                GoTo subend
            End If
        'in KISS CORPORATE we can import KISS and KISS corporate
        ElseIf (sActiveLicense = "C") Then
            If Not OBJXMLDOC.SelectSingleNode("/phb/metadata/license") Is Nothing Then
                If Not ((OBJXMLDOC.SelectSingleNode("/phb/metadata/license").Text = "K") Or _
                    (OBJXMLDOC.SelectSingleNode("/phb/metadata/license").Text = "C")) Then
                    modApp.AppStopMsg appGetLOCText("msgLicenseMismatchKISS")
                    GoTo subend
                End If
            Else
                If sversion >= "3.0.00" Then
                    'if the license node is not present then it surely can not be a KISS PHB
                    modApp.AppStopMsg appGetLOCText("msgLicenseMismatchKISS")
                    GoTo subend
                ElseIf OBJXMLDOC.SelectSingleNode("/phb/data/cover/complexity").Text <> "pm k.i.s.s.|fffd| Projekt" Then
                    modApp.AppStopMsg appGetLOCText("msgLicenseMismatchKISS")
                    GoTo subend
                'so, now we have an old PHB version with KISS complexity
                'now we look if it surely is a KISS PHB or not by presence of risks_kiss node
                ElseIf OBJXMLDOC.SelectSingleNode("phb/data/risks_kiss") Is Nothing Then
                    modApp.AppStopMsg appGetLOCText("msgLicenseMismatchKISS")
                    GoTo subend
                End If
            End If
        '(kissimport) if this PHB is not a KISS license but a FULL license, and we import a KISS PHB...
        'NOTE: we can not import a KISS PHB in a MANAGER or PROJECT LICENSE!!!!
        ElseIf (sActiveLicense = "F") Then
            KissOnceSync = True
            GetDetailsForImportKissVersion OBJXMLDOC
            If pKissImportCancel Then GoTo subend
        End If
        
        
        'check admin
        '(when importing kiss in normal phb we dont need to check the customfields on the cover)
        If Not AssertCorrectAdmin(OBJXMLDOC.SelectSingleNode("phb/data/plan"), OBJXMLDOC.SelectSingleNode("phb/data/cover"), (Not ImportKISSinPHB)) Then GoTo subend
        
        sversion = metadata.SelectSingleNode("version").Text
        language = CastStringToVar(metadata.SelectSingleNode("language").Text)
        If Not metadata.SelectSingleNode("planningmode") Is Nothing Then
            If ModuleExists("PersonalPlanning") Then
                If metadata.SelectSingleNode("planningmode").Text = "Persons" Then PersonsPlanned = True
            Else
                modApp.AppStopMsg appGetLOCText("msgNoPersonPlanningModule")
                GoTo subend
            End If
        End If
        
        'deactivate all autofilter for insertion
        For Each sht In ActiveWorkbook.Sheets
            If sht.AutoFilterMode Then sht.AutoFilterMode = False
        Next
        
        
        'modified for SALK
        If VBA.InStr("2.0.00|2.0.01|2.1.00|1200|1200" & VERSION_NO, sversion) Or VBA.InStr(sversion, "SALK Bau") Or VBA.InStr(sversion, "SALK Gesamt") Or VBA.InStr(sversion, "SALK IT") Then
            
            'custom SALK -- to be used on PPF
            If VBA.InStr(sversion, "SALK Bau") Or VBA.InStr(sversion, "SALK Gesamt") Or VBA.InStr(sversion, "SALK IT") Then
                SetCustomProperty Cover, "SALKType", sversion
            End If

            If sActiveLicense = "M" Then
                If OBJXMLDOC.SelectSingleNode("phb/data/team/members/member/name").Text <> Cover.Range("Cover.Manager.Table").Cells(2, 2).value Then
                    AppStopMsg appGetLOCText("WrongManager")
                    GoTo subend
                End If
            End If

            Cover.noupdate = True
            Cover.Range("Cover.SelectedLoc").value = language
            Cover.Range("Cover.Loc").value = language + 1
            Cover.ddlChangeLOC
            
            Config.Calculate
            
            'Admin 'wird hier nicht importiert
            Team.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/team"), sversion
            Cover.ImportXml OBJXMLDOC.SelectSingleNode("/phb/data/cover"), sversion
            contents.ImportXml OBJXMLDOC.SelectSingleNode("/phb/data/contents")
            Contract.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/contract"), sversion

            'Added for SALK
            If Not OBJXMLDOC.SelectSingleNode("phb/data/changes") Is Nothing Then
                Changes.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/changes")
            End If

            Com.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/com")
            Plan.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/plan"), sversion
            WBS.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/wbs")
            Environment.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/stakeholders"), sversion
            If (sActiveLicense <> "K") And (sActiveLicense <> "C") Then
                '(kissimport)
                If ImportKISSinPHB Then
                    Context.ImportXmlKiss OBJXMLDOC.SelectSingleNode("phb/data/contexts_kiss")
                    Risk.ImportXmlKiss OBJXMLDOC.SelectSingleNode("phb/data/risks_kiss"), sversion
                Else
                    Risk.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/risks"), sversion
                    Context.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/context")
                End If
            Else
                Risk_kiss.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/risks_kiss"), sversion
                Context_kiss.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/contexts_kiss"), sversion
            End If
            Rules.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/rules")
            Actions.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/actions"), sversion
            Decisions.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/decisions"), sversion
            Info.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/infos")
            WPDetails.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/wpdetails")
            StatusHist.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/statushist"), sversion
            Closure.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/closure"), sversion
            MeetingDetails.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/meetingdetails")
            Work.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/work"), sversion
            Cost.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/cost"), sversion
Application.ScreenUpdating = False
            'CRF Module
            If ModuleExists("CRF") Then
                If Not OBJXMLDOC.SelectSingleNode("phb/data/changerequestlist") Is Nothing Then
                    ChangeRequestList.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/changerequestlist"), sversion
                End If
            End If
'
            If ModuleExists("MTAServer") Then
                If (sversion >= "3.0.00") Then
                    If Not OBJXMLDOC.SelectSingleNode("phb/data/mta") Is Nothing Then
                        MTA.ImportXml OBJXMLDOC.SelectSingleNode("phb/data/mta")
                    End If
                ElseIf sversion = "1200" Then
                    If Not OBJXMLDOC.SelectSingleNode("phb/data/mta") Is Nothing Then
                        MTA.ImportXmlSALK OBJXMLDOC.SelectSingleNode("phb/data/mta")
                    End If
                End If
            End If
Application.ScreenUpdating = False

            bNoNormalProtectActionsRequired = True

            RefreshPHB
            
            ImportFromFile = True
        Else
            AppStopMsg appGetLOCText("WrongImportDataVersion") & " (" & metadata.SelectSingleNode("version").Text & ")." & vbLf & vbLf & _
                appGetLOCText("RequiredImportDataVersion") & " 2.0.00, 2.0.01, 2.1.00, " & VERSION_NO
        End If
    Else
    End If

    Application.ScreenUpdating = False
    If PersonsPlanned Then Plan.SwitchToPersons

subend:
    bNoNormalProtectActionsRequired = False
    Application.ScreenUpdating = True
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Import.ImportFromFile error:"
    Resume subend
End Function


Public Sub ImportTableValues(Table As TPGTable, Node As Variant, rowxpath As String, Optional cols As Collection, Optional DefaultColumn As Integer = 1, Optional Version As Variant)
    Dim i As Integer
    Dim j As Integer
    Dim n As Variant
    
    On Error Resume Next
    'for good reason. this way we can enable generic column import
    'TODO: code proper error handling
    modStack.PushCallStack "Import", "ImportTableValues"

    For i = Table.RowsCount + 1 To Node.SelectNodes(rowxpath).length
        Table.AddRow
    Next
    i = 0
    For Each n In Node.SelectNodes(rowxpath)
        i = i + 1
        If cols Is Nothing Then
            Table.ValuesRange.Cells(i, DefaultColumn).value = CastStringToVar(n.Text)
        Else
            For j = 1 To cols.Count
                Select Case cols(j).ColumnType
                    Case tagColumn
                        'modified for SALK
                        If Version = "3.0.00a" Then
                            Table.ValuesRange.Cells(i, cols(j).columnIndex).value = Loc.Translation(n.SelectSingleNode(cols(j).ColumnName).Text)
                        Else
                            Table.ValuesRange.Cells(i, cols(j).columnIndex).value = Loc.Translation(appGetLOCLookUpText(n.SelectSingleNode(cols(j).ColumnName).Text, True))
                        End If
                        
                    Case urlcolumn
                        Table.ValuesRange.Cells(i, cols(j).columnIndex).value = CastStringToVar(n.SelectSingleNode(cols(j).ColumnName).Text)
                        If Not n.SelectSingleNode("url" + cols(j).ColumnName) Is Nothing Then
                            If n.SelectSingleNode("url" + cols(j).ColumnName).Text <> "" Then
                                Table.ValuesRange.Cells(i, cols(j).columnIndex).Hyperlinks.Add Anchor:=Table.ValuesRange.Cells(i, cols(j).columnIndex), Address:=CastStringToVar(n.SelectSingleNode("url" + cols(j).ColumnName).Text)
                            End If
                        End If
                    '(kissimport)
                    Case probabilityColumn
                        Table.ValuesRange.Cells(i, cols(j).columnIndex).value = Risk.GetKissProbability(n.SelectSingleNode(cols(j).ColumnName).Text)
                    '(kissimport)
                    Case kissDepartment
                        If Not n.SelectSingleNode("id") Is Nothing Then
                            'modified for SALK
                            If Import.ImportKISSinPHB Then
                                Table.ValuesRange.Cells(i, cols(j).columnIndex).value = pNewTeamDept.GetValue(n.SelectSingleNode("id").Text)
                            Else
                                Table.ValuesRange.Cells(i, cols(j).columnIndex).value = n.SelectSingleNode("id").Text
                            End If
                        Else
                            'in 3.0 kiss we have a guid node instead of id node
                            Table.ValuesRange.Cells(i, cols(j).columnIndex).value = pNewTeamDept.GetValue(n.SelectSingleNode("guid").Text)
                        End If
                     
                     Case salkSubteam '-- addded for SALK
                        If Not n.SelectSingleNode("function") Is Nothing Then
                            Table.ValuesRange.Cells(i, cols(j).columnIndex).value = n.SelectSingleNode("function").Text
                        Else
                            Table.ValuesRange.Cells(i, cols(j).columnIndex).value = n.SelectSingleNode("Subteam").Text
                        End If
                     
                    Case Else
                        
                        Table.ValuesRange.Cells(i, cols(j).columnIndex).value = CastStringToVar(n.SelectSingleNode(cols(j).ColumnName).Text)
                End Select
            Next
        End If
        Table.Mergedfit Table.ValuesRange.Cells(i, 1)
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Import.ImportTableValues error:"
    Resume subend
End Sub

Public Sub RefreshPHB()
    Dim WTS As TPGWorkTypes
    Dim cts As TPGCostTypes
    
    On Error GoTo suberr
    modStack.PushCallStack "Import", "RefreshPHB"

    Application.ScreenUpdating = False

    Application.Calculate
        
    Team.cmdUpdate_Click
     
    'RACI.UpdateRACI False
        
    Application.ScreenUpdating = False
    WBS.CreateWBSStructure False
        
    
    'Update WP structure
    
    Set WTS = New TPGWorkTypes
    WTS.Load
    
    'modified for SALK --  note this are empty functions
    If Not WTS.Duplicates Then WTS.SyncToWP
    Set cts = New TPGCostTypes
    cts.Load
    If Not cts.Duplicates Then cts.SyncToWP
    
    
        
    Application.ScreenUpdating = False
    Statusreport.clear
        
    Meeting.clear
        
    Application.ScreenUpdating = False
    MST.UpdateMST False
        
    Gantt.CreateGantt True
    
 'modified for SALK
'Application.ScreenUpdating = False
'    WorkPlan.Activate
'Application.ScreenUpdating = False
'    WorkPlan.UpdateRessPlan False
        
Application.ScreenUpdating = False
    Work.update False
    
    
'remove for SALK
'    CostPlan.Activate
'Application.ScreenUpdating = False
'    CostPlan.UpdateCostPlan False
        
'    Cost.UpdateCost False
    
Application.ScreenUpdating = False
    RACI.Activate
Application.ScreenUpdating = False
    RACI.UpdateRACI False
    
    '(kissimport)
    If Import.ImportKISSinPHB Then
        Application.ScreenUpdating = False
        UpdateContractValues
    End If
    
    If (sActiveLicense = "K") Or (sActiveLicense = "C") Then
        'when KISS, update view to make sure role columns are hidden
        Application.ScreenUpdating = False
        Plan.UserAction_ChangeView (True)
    End If
    
Application.ScreenUpdating = False
    Cover.Activate
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Import.RefreshPHB error:"
    Resume subend
End Sub





Rem SUBPROJECT-RELATED
Public Sub ImportSubProject()
    Dim filedialog
    Dim FileName As String
    On Error GoTo suberr
    modStack.PushCallStack "Import", "ImportSubProject"

    filedialog = Application.GetOpenFilename("Xml-Files (*.xml), *.xml")
    If filedialog <> False Then
        
        FileName = CStr(filedialog)
        ImportSubProjectFromFile FileName
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Import.ImportSubProject error:"
    Resume subend
End Sub
Private Sub ImportSubProjectFromFile(FileName As String)
    Dim OBJXMLDOC As Variant
    Dim sversion As String
    Dim baselineInfo As String

    ' Create the XML DOM object
    On Error GoTo suberr
    modStack.PushCallStack "Import", "ImportSubProjectFromFile"

    Set OBJXMLDOC = CreateObject("Microsoft.XMLDOM")
    OBJXMLDOC.async = False
    OBJXMLDOC.Load FileName
    On Error GoTo suberr
    
    'check if correct PHB version
    If Not AssertPHB(OBJXMLDOC.SelectSingleNode("/phb/metadata")) Then GoTo subend
    sversion = OBJXMLDOC.SelectSingleNode("/phb/metadata/version").Text
    If sversion <> VERSION_NO Then
            AppStopMsg appGetLOCText("WrongImportDataVersion") & " (" & sversion & ")." & vbLf & vbLf & _
                appGetLOCText("RequiredImportDataVersion") & VERSION_NO
            GoTo subend
    End If
    'import PHB can not be a program phb
    If (InStr(LCase(OBJXMLDOC.SelectSingleNode("/phb/data/cover/complexity").Text), "program") > 0) Then
        AppStopMsg appGetLOCText("msgProgramNotAllowed")
        GoTo subend
    End If
    'check admin
    If Not AssertCorrectAdmin(OBJXMLDOC.SelectSingleNode("phb/data/plan"), OBJXMLDOC.SelectSingleNode("phb/data/cover"), False) Then GoTo subend
    
    baselineInfo = GetBaselineInfo(OBJXMLDOC)
    If Not ConfirmImportAndDeletion(OBJXMLDOC, FileName, baselineInfo) Then GoTo subend
    
    Team.ImportSubProjectXml OBJXMLDOC.SelectSingleNode("phb/data/team"), sversion
    Contract.ImportSubProjectXml OBJXMLDOC.SelectSingleNode("phb/data/contract")
    Plan.UpdatePlan_Click
    
    Plan.ImportSubProjectXml OBJXMLDOC.SelectSingleNode("phb/data/plan"), _
                            OBJXMLDOC.SelectSingleNode("/phb/data/cover/projectname").Text, _
                            OBJXMLDOC.SelectSingleNode("/phb/data/cover/projectnumber").Text, _
                            FileName, sversion

    AppInfoMsg appGetLOCText("msgSubPrjImportOK") & vbNewLine & GetImportedTeamMembers
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Import.ImportSubProjectFromFile error:"
    Resume subend
End Sub


Private Function GetImportedTeamMembers() As String
    Dim s As Variant
    Dim Names As String
    
    For Each s In Team.rememberNewMembers("")
        Names = Names & vbNewLine & s
    Next
    
    If Len(Names) > 0 Then Names = appGetLOCText("msgNewMembers") & vbNewLine & Names
    GetImportedTeamMembers = Names
    Team.rememberNewMembers "", True ' reset the static data
End Function


Private Function GetBaselineInfo(Node As Variant) As String
    GetBaselineInfo = ""
    If Plan.IsBaselineSet = (Node.SelectSingleNode("/phb/data/plan/baseline").Text = "") Then Exit Function
    
    If Plan.IsBaselineSet Then
        GetBaselineInfo = appGetLOCText("msgBaselineInfoSubBLSet")
    Else
        GetBaselineInfo = appGetLOCText("msgBaselineInfoMasterBLSet")
    End If
End Function

Private Function AssertPHB(metadata As Variant) As Boolean
    ' PHB or MSP this is the question
    AssertPHB = True
    If metadata Is Nothing Then
        AppInfoMsg appGetLOCText("msgImportNotSupported")
        AssertPHB = False
    End If
End Function

Private Function AssertProjectnumber(Node As Variant) As Boolean
    ' check if the sub projects project number is defined and if it differs from the master
    AssertProjectnumber = True
    If (Node.Text = "") Or (Node.Text = Cover.Range("Cover.ProjectNo")) Then
        AppInfoMsg appGetLOCText("msgNoProjectNumber")
        AssertProjectnumber = False
    End If
End Function

Private Function ConfirmImportAndDeletion(Node As Variant, FileName, baselineInfo As String) As Boolean
    Dim t As TPGTask
    Dim projectnumber As String
    Dim reimport As Boolean
    Dim subProjName As String
        
    ConfirmImportAndDeletion = False
    projectnumber = Node.SelectSingleNode("/phb/data/cover/projectnumber").Text
    
    Set t = New TPGTask
    reimport = t.FindSubProject(projectnumber)
    If reimport Then subProjName = appGetLOCText("msgSubproject") & vbNewLine & t.GetFullTaskName
    If modApp.appQOCMsg(appGetLOCText("msgImportWanted") & vbNewLine & _
                        subProjName & vbNewLine & _
                        baselineInfo & vbNewLine & _
                        appGetLOCText("proceed")) = vbOK Then
        t.DeleteTask confirm:=False
        ConfirmImportAndDeletion = True
    End If
End Function

Public Sub ImportMSProject()
    Dim filedialog
    Dim FileName As String
    Dim metadata
    Dim OBJXMLDOC As Variant
    Dim rCell As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Import", "ImportMSProject"
    
    'MSPImport only allowed when not in person planning mode
    If Plan.PersonsInPlan Then
        AppStopMsg appGetLOCText("msgMSPImportPersPlan")
        GoTo subend
    Else
        Set rCell = Team.Range("Team.IsResourceRange").Find("x", , xlValues, xlWhole)
        'persons are selected as resource in team sheet, so we are in personplanning
        If Not rCell Is Nothing Then
            AppStopMsg appGetLOCText("msgMSPImportPersPlan")
            GoTo subend
        End If
        Set rCell = Nothing
    End If

    filedialog = Application.GetOpenFilename("Xml-Files (*.xml), *.xml")
    If filedialog <> False Then
        FileName = CStr(filedialog)

        bNoNormalProtectActionsRequired = True
        Set OBJXMLDOC = CreateObject("Microsoft.XMLDOM")
        OBJXMLDOC.async = False
        OBJXMLDOC.Load FileName
        'Check MSP export file
        Set metadata = OBJXMLDOC.SelectSingleNode("/Project")
        If Not metadata Is Nothing Then
            If metadata.NamespaceURI = "http://schemas.microsoft.com/project" Then
                If OBJXMLDOC.SelectNodes("/Project/Tasks/Task").length > 0 Then
                    If Plan.ImportMSPCheck(OBJXMLDOC.SelectSingleNode("/Project/Tasks")) Then
                        Plan.ImportMSP OBJXMLDOC.SelectSingleNode("/Project/Tasks")
                        bNoNormalProtectActionsRequired = True
                        RefreshPHB
                        Plan.Activate
                        AppInfoMsg appGetLOCText("done")
                    End If
                End If
            End If
        Else
            AppStopMsg appGetLOCText("msgMSPImportNoMSP")
        End If
    End If

subend:
    bNoNormalProtectActionsRequired = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Import.ImportMSProject error:"
    Resume subend
End Sub


'------------------------------------------------------------------------------------
'(kissimport)
'------------------------------------------------------------------------------------
'Added for Kiss Module
Private Sub GetDetailsForImportKissVersion(OBJXMLDOC As Variant)
    Dim sWCT As String
    Dim personRate As Double
    Dim c As Range
    Dim bEmptyOrgAvailable As Boolean
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Import", "GetDetailsForImportKissVersion"

    'first find out if the importphb is kiss or not
    ImportKISSinPHB = False
    KISSVersionForPHB = ""
    If Not OBJXMLDOC.SelectSingleNode("phb/data/cover/complexity") Is Nothing Then
        If InStr(1, OBJXMLDOC.SelectSingleNode("phb/data/cover/complexity").Text, "k.i.s.s") Then
            'if we have KISS complexity we check if risks_kiss node exists to make sure it really is a KISS PHB
            'and not a normal PHB
            If Not (OBJXMLDOC.SelectSingleNode("phb/data/risks_kiss") Is Nothing) Then
                ImportKISSinPHB = True
                KISSVersionForPHB = OBJXMLDOC.SelectSingleNode("phb/metadata/version").Text
            'if no risks_kiss node we have a normal PHB (with kisscomplexity), so no KISSimport
            Else
                GoTo subend
            End If
        Else
            GoTo subend
        End If
    Else
        GoTo subend
    End If
        
    If OBJXMLDOC.SelectSingleNode("phb/data/team") Is Nothing Then
        pKissImportCancel = True
        GoTo subend
    End If
    
    'here we check if 'Personal' (the default KISS orgunit) is present as orgunit or can be added (ie empty row)
    'if not then we can not continue, so we cancel the kissimport
    If Not Admin.HasOrgUnit("Personal") Then
        bEmptyOrgAvailable = False
        'empty space available in admin.org?
        For Each c In Admin.Range("Admin.Org").Resize(Admin.Range("Admin.Org").rows.Count - 1, 1).offset(1, 0)
            If c.value = "" Then
                bEmptyOrgAvailable = True
                Exit For
            End If
        Next
        If Not bEmptyOrgAvailable Then
            modApp.AppStopMsg appGetLOCText("msgAdminMismatch") & "; OrgUnit: Personal"
            pKissImportCancel = True
            GoTo subend
        End If
    End If
    
    'check if updates are needed in admin, if so we warn user (with option to cancel import)
    s = AdminUpdatesNeededForKissImport(OBJXMLDOC.SelectSingleNode("phb/data/cover/complexity").Text)
    If s <> "" Then
        If appQOCMsg(Replace(appGetLOCText("frmKissImportAdminChanges"), "%1", s)) = vbCancel Then
            pKissImportCancel = True
            GoTo subend
        End If
    End If
    
    Set pKissTeamNode = OBJXMLDOC.SelectSingleNode("phb/data/team")
    
    'show form for department matching
    frmKissImport.Show
    
    If pKissImportCancel Or pNewTeamDept Is Nothing Then
        pKissImportCancel = True
        GoTo subend
    End If
    
    'Set Complexity
    Admin.UpdateAdminWithKissContent OBJXMLDOC.SelectSingleNode("phb/data/cover/complexity").Text
    
    'get person rate
    If KISSVersionForPHB < "3.0.00" Then
        If Not OBJXMLDOC.SelectSingleNode("phb/data/contract/costs/cost/basecost") Is Nothing _
           Or Not OBJXMLDOC.SelectSingleNode("phb/data/contract/resources/resource/basework") Is Nothing Then
            If CDbl(OBJXMLDOC.SelectSingleNode("phb/data/contract/resources/resource/basework").Text) > 0 Then
                personRate = CDbl(OBJXMLDOC.SelectSingleNode("phb/data/contract/costs/cost/basecost").Text) / _
                        CDbl(OBJXMLDOC.SelectSingleNode("phb/data/contract/resources/resource/basework").Text)
            Else
                personRate = 0#
            End If
        Else
            personRate = 0#
        End If
    Else
        'as of v3.0.00 kiss we store rate in customfield3 in cover sheet
        If Not OBJXMLDOC.SelectSingleNode("phb/data/cover/customfield3") Is Nothing Then
            personRate = CastStringToVar(OBJXMLDOC.SelectSingleNode("phb/data/cover/customfield3").Text)
        Else
            personRate = 0#
        End If
    End If
    
    'Department
    Admin.ImportXMLForKiss "Personal", "Admin.Org", True, personRate
    
    'Work
    Admin.ImportXMLForKiss "Personalkosten", "Admin.WorkCostType"
    
    'Department Others
    Admin.ImportXMLForKissDept "Admin.Org", personRate

    'Cost
    Admin.ImportXMLForKiss "Externe Kosten", "Admin.Costtype"
    Admin.RenameExterneKostenWC "Externe Kosten", "Admin.WorkCostType"
    
    'if v3.00 or higher we can set currency and unit in admin basd on customfield values
    If KISSVersionForPHB >= "3.0.00" Then
        If Not OBJXMLDOC.SelectSingleNode("phb/data/cover/customfield1") Is Nothing Then
            Admin.Range("Admin.ResourceUnits").value = OBJXMLDOC.SelectSingleNode("phb/data/cover/customfield2").Text
            Admin.Range("Admin.Currency").value = OBJXMLDOC.SelectSingleNode("phb/data/cover/customfield1").Text
        End If
    End If
    
    'recalc sheets
    Admin.Calculate
    contents.Calculate
        
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Import.GetDetailsForImportKissVersion error:"
    Resume subend
End Sub

Private Function AdminUpdatesNeededForKissImport(scompl As String) As String
Dim s As String
If Not Admin.HasOrgUnit("Personal") Then
    s = appGetLOCText("orgunit") + ": Personal; "
End If
If Not Admin.HasWorkCostType("Personalkosten") Then
    s = s + appGetLOCText("workcosttype") + ": Personalkosten; "
End If
If Not Admin.HasCostType("Externe Kosten") Then
    s = s + appGetLOCText("costtype") + ": Externe kosten; "
End If
If Not Admin.HasComplexity(scompl) Then
    s = s + appGetLOCText("complexity") + ": " + scompl + "; "
End If
If s <> "" Then
    AdminUpdatesNeededForKissImport = Left(s, Len(s) - 2)
End If
End Function

Public Sub AddAdditionalOrgs(ResourceTable As TPGTable)
    Dim TG As New TPGTokenizer
    Dim n As TPGDictionaryPair
    Dim i As Integer
    
    On Error Resume Next
    modStack.PushCallStack "Import", "AddAdditionalOrgs"
    
    TG.FromRangeNoBlanks ResourceTable.ValuesRange(2)
    i = TG.Count
    
    For Each n In pNewTeamDept.Collection
        If Not TG.Contains(CStr(n.value)) Then
            If i >= ResourceTable.RowsCount Then
                ResourceTable.InsertRow ResourceTable.ValuesRange(2).Cells(2, 1).row
            End If
                ResourceTable.ValuesRange(2).Cells(2, 1).value = CStr(n.value)
                TG.Add CStr(n.value)
            i = i + 1
        End If
    Next

    
subend:
    Set TG = Nothing
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Import.AddAdditionalOrgs error:"
    Resume subend
End Sub

Private Sub UpdateContractValues()
    Dim s As String
    Dim c As Range
    Dim R As Range
    On Error Resume Next
    modStack.PushCallStack "Import", "UpdateContractValues"
    
    If Import.ImportKISSinPHB Then
        s = "Contract.Resources"
        For Each c In Contract.Range(s).offset(3, 2).Resize(Contract.Range(s).rows.Count - 5, 1)
            If c.value <> "" Then
                If c.value <> "Personal" Then
                    Set R = Plan.Range("Plan.ProjectHeader").offset(-3, 0).Find(c.value, , xlValues, xlWhole, , , False)
                    If R Is Nothing Then
                        AppStopMsg appGetLOCText("ResourceNotInPlan") & ": " & c.value
                    Else
                        c.offset(0, 2).value = R.offset(3, 0).value
                        c.offset(0, 1).value = R.offset(3, 0).value
                        With Contract.Range(s).offset(3, 2).Resize(Contract.Range(s).rows.Count - 5, 1).Cells(1, 1).offset(0, 2)
                            .value = .value - R.offset(3, 0).value
                        End With
                        With Contract.Range(s).offset(3, 2).Resize(Contract.Range(s).rows.Count - 5, 1).Cells(1, 1).offset(0, 1)
                            .value = .value - R.offset(3, 0).value
                        End With
                        'c.offset(0, 1).value = r.offset(3, 4).value
                    End If
                End If
            End If
        Next
        
        For Each c In Contract.Range(s).offset(3, 9).Resize(Contract.Range(s).rows.Count - 5, 1)
            'check if Externe Kosten already exists
            If c.value = pExternCost.Name Then
                If Not pExternCost Is Nothing Then
                    c.value = pExternCost.Name
                    c.offset(0, 1).value = pExternCost.ContractCost
                    c.offset(0, 2).value = pExternCost.BaseCost
                    GoTo subend
                End If
            End If
        Next


        For Each c In Contract.Range(s).offset(3, 9).Resize(Contract.Range(s).rows.Count - 5, 1)
            If c.value = "" Then
                If Not pExternCost Is Nothing Then
                    c.value = pExternCost.Name
                    c.offset(0, 1).value = pExternCost.ContractCost
                    c.offset(0, 2).value = pExternCost.BaseCost
                    Exit For
                End If
            End If
        Next
   End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Import.UpdateContractValues error:"
    Resume subend
End Sub
'------------------------------------------------------------------------------------

Attribute VB_Name = "Info"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public noupdate As Boolean

Private Enum TableCols
   icNumber = 3
   icShowInStatus
   icevent
   icdate
   icsubject
   icinfo
   icResponsible
   icDueDate
   icstatus
End Enum

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (InRange(Target, GetTable.ValuesRange.Resize(GetTable.ValuesRange.rows.Count + 1))) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext True, True
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim c As Range
    On Error GoTo suberr
    modStack.PushCallStack "Info", "Worksheet_Change"
    
    If noupdate Then GoTo Fit:

    If Target.Column > icdate Then
        noupdate = True
        If Meeting.IsSelected And IsEmpty(Cells(Target.row, icevent)) And IsEmpty(Cells(Target.row, icdate)) Then
            'FetchDataFromMeeting but don't set the event if the user has already entered a date or an event
            Cells(Target.row, icevent).value = Meeting.Range("Meeting.Name").value
            Cells(Target.row, icdate).value = Meeting.Range("Meeting.Date").value
        Else                        ' FetchDefaultData
            CellFunctions.SetCellIfEmpty Target.row, icdate, Date
        End If
        CellFunctions.SetCellIfEmpty Target.row, icstatus, appGetLOCText("undone")
        noupdate = False
    ElseIf Target.Column = icevent Then
        'if existing meeting selected then get date
        For Each c In MeetingDetails.Range("MeetingDetails").offset(0, 1)
            If c.value = Target.value Then
                Cells(Target.row, icdate).value = c.offset(0, 1).value
                Exit For
            End If
        Next
    End If
    
Fit:
    GetTable.bAutoFit = True
    
    'added for printing
    If GetTable.CellAutoFit(Target) Then GoTo subend
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Info.Worksheet_Change error:"
    Resume subend
End Sub

Private Function GetTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Info", "GetTable"

    t.SetTable Me.Range("Info.Table"), True, False, TemplateFirstrow, 10
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Info.GetTable error:"
    Resume subend
End Function

Public Sub cmdClearFormat_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Info", "cmdClearFormat_Click"

    GetTable.ClearFormat_Clicked

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Info.cmdClearFormat_Click error:"
    Resume subend
End Sub

'Public Sub cmdHelp_Click()
'    Dim url As String
''#    url = "file:///" & Replace(ActiveWorkbook.Path, "\", "/") & "/TPG_ProjectHandbook_User-Guide.htm%23_Toc239754163"
'    url = "file:///" & Replace(ActiveWorkbook.Path, "\", "/") & "/TPG_ProjectHandbook_User-Guide.htm#_Toc239754163"
'    InlineHelp.OpenUrl url
'End Sub

Public Sub cmdSetFormat_Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "Info", "cmdSetFormat_Click"
    
    cmdSetFormat
        
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Info.cmdSetFormat_Click error:"
    Resume subend
End Sub

Public Sub cmdSetFormat()
    Dim R As Range
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Info", "cmdSetFormat"

    s = "Info.Table"
    For Each R In GetTable.ValuesRange(1)
        Select Case R.offset(0, 7).value
        Case appGetLOCText("done")
            R.offset(0, 7).Interior.Color = RGB(112, 173, 71)
        Case appGetLOCText("undone")
            If R.offset(0, 6).value < Cover.Range("Cover.StatusDate").value Then
                R.offset(0, 7).Interior.Color = RGB(227, 0, 27)
            Else
                R.offset(0, 7).Interior.Color = RGB(255, 255, 255)
            End If
        Case appGetLOCText("ongoing")
            If R.offset(0, 6).value < Cover.Range("Cover.StatusDate").value Then
                R.offset(0, 7).Interior.Color = RGB(255, 192, 0)
            Else
                R.offset(0, 7).Interior.Color = RGB(255, 255, 255)
            End If
        Case Else
            R.offset(0, 7).Interior.Color = RGB(255, 255, 255)
        End Select
    Next
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Info.cmdSetFormat error:"
    Resume subend
    
End Sub

Public Sub cmdAutoFilter_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Info", "cmdAutoFilter_Click"

    GetTable.Autofilter_Clicked 1

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Info.cmdAutoFilter_Click error:"
    Resume subend
End Sub

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Info", "cmdInsert_Click"

    Me.noupdate = True
    
    GetTable.InsertRow_Clicked ActiveCell
    
    Me.noupdate = False
    Me.Calculate

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Info.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Info", "cmdDelete_Click"

    Me.noupdate = True
    
    GetTable.DeleteRow_Clicked ActiveCell
    Meeting.SyncInfo
    
    Me.noupdate = False
    Me.Calculate
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Info.cmdDelete_Click error:"
    Resume subend
End Sub

Public Sub cmdSortAsc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Info", "cmdSortAsc_Click"

    GetTable.Sort_Clicked ActiveCell, xlAscending

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Info.cmdSortAsc_Click error:"
    Resume subend
End Sub

Public Sub cmdSortDesc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Info", "cmdSortDesc_Click"

    GetTable.Sort_Clicked ActiveCell, xlDescending

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Info.cmdSortDesc_Click error:"
    Resume subend
End Sub

Private Function GetCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Info", "GetCols"

    cols.Add GetTPGColumn("showinstatus", 1)
    cols.Add GetTPGColumn("event", 2)
    cols.Add GetTPGColumn("date", 3, DateColumn)
    cols.Add GetTPGColumn("topic", 4)
    cols.Add GetTPGColumn("information", 5)
    cols.Add GetTPGColumn("responsible", 6)
    cols.Add GetTPGColumn("duedate", 7, DateColumn)
    cols.Add GetTPGColumn("status", 8)
    Set GetCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Info.GetCols error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    On Error GoTo suberr
    modStack.PushCallStack "Info", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    n.appendchild GetNodeFromTable(xmlDom, "infos", "info", GetTable.ValuesRange, GetCols)
    Set CreateXml = n.FirstChild

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Info.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant)
    
    On Error GoTo suberr
    modStack.PushCallStack "Info", "ImportXml"

    If Not Node Is Nothing Then
        reset
        Me.noupdate = True
        ImportTableValues GetTable, Node, "info", GetCols
        Me.noupdate = False
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Info.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Info", "reset"

    Me.noupdate = True
    GetTable.clear
    Me.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Info.reset error:"
    Resume subend
End Sub

Attribute VB_Name = "InlineHelp"
Option Explicit

#If VBA7 Then
    Private Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
#Else
    Private Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
#End If

'// open file (quotes are used so that the actual value that is passed is "C:\test.doc"
Private Sub cmdOpen_Click()
    ShellExecute 0, vbNullString, "C:\test.doc", vbNullString, vbNullString, vbNormalFocus
End Sub

'// open url
Public Sub OpenUrl(url)
    ShellExecute 0, vbNullString, url, vbNullString, vbNullString, vbNormalFocus
End Sub

''// open email address
'Private Sub cmdOpen_Click()
'    ShellExecute 0, vbNullString, "mailto:support@vbweb.co.uk", vbNullString, vbNullString, vbNormalFocus
'End Sub
Attribute VB_Name = "Loc"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Property Get Locale() As phbLocalization:                    Locale = Cover.Range("Cover.SelectedLOC").value:                    End Property
Public Property Let Locale(Localization As phbLocalization):        Cover.Range("Cover.SelectedLOC").value = Localization: ChangeLOC:   End Property

Private Property Get PreviousLoc() As phbLocalization:              PreviousLoc = CLng(GetCustomProperty(Me, "PreviousLoc")):           End Property
Private Property Let PreviousLoc(Localization As phbLocalization):  SetCustomProperty Me, "PreviousLoc", CStr(Localization):            End Property

Private Property Get CurrentLoc() As phbLocalization:               CurrentLoc = CLng(GetCustomProperty(Me, "CurrentLoc")):             End Property
Private Property Let CurrentLoc(Localization As phbLocalization):   SetCustomProperty Me, "CurrentLoc", CStr(Localization):             End Property


Public Sub ChangeLOC()
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "ChangeLOC"
    
    If Locale = CurrentLoc Then GoTo subend
    
    modRibbon.bnoRibbonUpdate = True
    PreviousLoc = CurrentLoc
    
    Dim R As Range
    Dim c As Range
    Dim n As Name
    Dim sname As String
    Dim sht As Worksheet
    Dim sContentsSheetName As String
    Dim oldLOC As Long
    Dim s As shape
    
    Cover.noupdate = True
    Closure.noupdate = True
    Contract.noupdate = True
    Environment.noupdate = True
    Team.noupdate = True
    
    oldLOC = Cover.Range("Cover.LOC") - 1
    Cover.Range("Cover.LOC").value = Cover.Range("Cover.SelectedLOC").value + 1
    
    'change sheetnames and hyperlinks in contents
    For Each c In contents.Range("Contents.Sheets")
        If c.value <> "" Then
            sname = appGetLOCText(c.value & "Sheet", True)
            If sname <> "" Then
                For Each sht In Sheets
                    If ((sActiveLicense = "K") Or (sActiveLicense = "C")) And ((LCase(c.value) = "context") Or (LCase(c.value) = "risk")) Then
                        If sht.CodeName = c.value + "_kiss" Then
                            If sht.Name <> sname Then sht.Name = sname
                            c.offset(0, -11).Hyperlinks(1).SubAddress = sname & "!A1"
                            Exit For
                        End If
                    Else
                        If sht.CodeName = c.value Then
                            If sht.Name <> sname Then sht.Name = sname
                            c.offset(0, -11).Hyperlinks(1).SubAddress = sname & "!A1"
                            Exit For
                        End If
                    End If
                Next
            End If
        End If
    Next

    'change hyperlinks to contents in all sheets with Header H1
    sContentsSheetName = appGetLOCText("ContentsSheet")
    For Each n In ActiveWorkbook.Names
        If VBA.Right(n.Name, 3) = ".H1" Then
            For Each R In n.RefersToRange
                If R.Hyperlinks.Count > 0 Then R.Hyperlinks(1).SubAddress = sContentsSheetName & "!A1"
            Next
        End If
    Next
    
'    'change buttons texts
'    For Each sht In Sheets
'        If sht.CodeName <> "Config" Then
'            For Each s In sht.Shapes
'                If s.Type = msoFormControl Then
'                    If (s.FormControlType = xlButtonControl) And (VBA.Mid(s.Name, 1, 3) = "cmd") Then
''DEBUG
''If s.Name = "cmdRenameOrg" Then
''Debug.Print "changeloc change buttontexts: " + sht.CodeName + " - " + s.Name
''End If
'                        sname = appGetLOCText(s.Name)
'                        s.DrawingObject.Text = sname
'                    End If
'                End If
'            Next
'        End If
'    Next
    
    'change Lables
    For Each sht In Sheets
        For Each s In sht.Shapes
            If s.Type = msoFormControl Then
                If (s.FormControlType = xlLabel) And (VBA.Mid(s.Name, 1, 3) = "lbl") Then
                    sname = appGetLOCText(s.Name)
                    s.DrawingObject.Text = sname
                End If
            End If
        Next
    Next

    'change dropdownvalues
    If Cover.Range("Cover.State").value <> "" Then Cover.Range("Cover.State").value = Translation(Tag(Cover.Range("Cover.State"), phbLocalizationItemState, oldLOC))
    TranslateRoleCells getRange(Contract, "Contract.Team", -4, 1, 3, 3), oldLOC
    TranslateRoleCells getRange(Contract, "Contract.Team", -4, 1, 3, 10), oldLOC
    TranslateRoleCells Team.rRoles, oldLOC
    TranslateListCells Intersect(Plan.Range("Plan.Roles"), Plan.Range(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.ProjectFooter"))), oldLOC
    TranslateListCells getRange(Environment, "Environment.Table", -2, 1, 1, 4), oldLOC
    TranslateListCells getRange(Risk, "Risk.Table", -2, 1, 1, 7), oldLOC
    TranslateListCells getRange(Closure, "Closure.Impression", 1, 1, 0, 8), oldLOC
    TranslateListCells getRange(Closure, "Closure.Objectives", -2, 1, 1, 8), oldLOC
    TranslateListCells getRange(Closure, "Closure.ObjectivesRatingTotal", 0, 0, 0, 0), oldLOC
    TranslateListCells getRange(Closure, "Closure.Performance", 1, 1, -5, 8), oldLOC
    TranslateListCells getRange(Closure, "Closure.ResCost", 1, 1, -6, 8), oldLOC
'    TranslateListCells getRange(Closure, "Closure.OrgCom", 1, 1, 0, 8), oldLOC
    TranslateListCells getRange(Closure, "Closure.Management", 1, 1, 0, 8), oldLOC
    TranslateListCells getRange(Closure, "Closure.Context", 1, 1, 0, 8), oldLOC
    TranslateListCells getRange(Statusreport, "Status.StatusProgress", 0, 0, 0, 0), oldLOC
    TranslateListCells getRange(Statusreport, "Status.StatusSchedule", 0, 0, 0, 0), oldLOC
    TranslateListCells getRange(Statusreport, "Status.StatusWork", 0, 0, 0, 0), oldLOC
    TranslateListCells getRange(Statusreport, "Status.StatusCost", 0, 0, 0, 0), oldLOC
    TranslateListCells getRange(Statusreport, "Status.StatusRisk", 0, 0, 0, 0), oldLOC
    TranslateListCells getRange(Statusreport, "Status.StatusOrgContext", 0, 0, 0, 0), oldLOC
    TranslateListCells getRange(Statusreport, "Status.StatusProjectContext", 0, 0, 0, 0), oldLOC
    TranslateListCells getRange(Actions, "Actions.Table", -2, 2, 1, 2), oldLOC
    TranslateListCells getRange(Decisions, "Decisions.Table", -2, 2, 1, 2), oldLOC
    TranslateListCells Intersect(Plan.Range("Plan.StatusColumn"), Plan.Range(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.ProjectFooter").offset(-1))), oldLOC
    TranslateListCells wp.Range("WP.Protections"), oldLOC
    TranslateListCells getRange(Decisions, "Decisions.Table", -2, 1, 1, 4), oldLOC
    TranslateListCells getRange(Actions, "Actions.Table", -2, 1, 1, 4), oldLOC
    TranslateListCells getRange(Info, "Info.Table", -2, 1, 1, 8), oldLOC
    
    'CRF Module
    TranslateListCells getRange(ChangeRequest, "ChangeRequest.Priority", 1, 1, 0, 0), oldLOC
    TranslateListCells getRange(ChangeRequest, "ChangeRequest.Status", 1, 1, 0, 0), oldLOC
    
bNoNormalProtectActionsRequired = True
    Plan.Calculate
    RACI.UpdateRACI False
    
    'remove for SALK
    'CostPlan.UpdateCostPlan False
    WorkPlan.UpdateRessPlan False
    
    Plan.Range("Plan.Tag.AP").value = appGetLOCText("WP")
    Plan.Range("Plan.Tag.MS").value = appGetLOCText("MS")
    
    Cover.Select
 
    CurrentLoc = Locale
    
subend:
    bNoNormalProtectActionsRequired = False
    Cover.noupdate = False
    Closure.noupdate = False
    Contract.noupdate = False
    Environment.noupdate = False
    Team.noupdate = False
    modRibbon.bnoRibbonUpdate = False
   
    modStack.PopCallStack
    Exit Sub
suberr:
'Debug.Print sht.Name
    AppErrMsg "Cover.ChangeLOC error:"
    Resume subend
End Sub

Public Sub TranslateListCells(listCells As Range, Optional oldLOC As Long = -1)
    Dim rangeLOCFind As Range
    Dim listCell As Range
    Dim sValue As String
    Dim sNewValue As String
    Dim rangeValue As Range
    Dim rangeKey As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "TranslateListCells"

    If oldLOC = -1 Then oldLOC = PreviousLoc
    Set rangeLOCFind = Me.Range("LOC.Find").offset(0, oldLOC)
    
    For Each listCell In listCells
        If listCell.value <> "" Then
            sValue = listCell.value
            Set rangeValue = rangeLOCFind.Find(listCell.value, , xlValues, xlWhole, , , False)
            If Not rangeValue Is Nothing Then
                Set rangeKey = rangeValue.offset(0, -oldLOC)
                sNewValue = appGetLOCText(rangeKey.value)
                listCell.value = sNewValue
            End If
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.TranslateListCells error:"
    Resume subend
End Sub

Public Sub TranslateRoleCells(listCells As Range, Optional oldLOC As Long = -1)
    Dim rangeLOCFind As Range
    Dim listCell As Range
    Dim sValue As String
    Dim sNewValue As String
    Dim rangeValue As Range
    Dim rangeKey As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "TranslateListCells"

    If oldLOC = -1 Then oldLOC = PreviousLoc
    Set rangeLOCFind = Me.Range("LOC.Find.Roles").offset(0, oldLOC)
    
    For Each listCell In listCells
        If listCell.value <> "" Then
            sValue = listCell.value
            Set rangeValue = rangeLOCFind.Find(listCell.value, , xlValues, xlWhole, , , False)
            If Not rangeValue Is Nothing Then
                Set rangeKey = rangeValue.offset(0, -oldLOC)
                sNewValue = appGetLOCText(rangeKey.value)
                listCell.value = sNewValue
            End If
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.TranslateListCells error:"
    Resume subend
End Sub

Public Property Get Tag(Notion As String, _
                        Optional LocalizationItem As phbLocalizationItem = phbLocalizationItemAny, _
                        Optional Localization As phbLocalization = -1) As String
                        
    If Localization = -1 Then Localization = Locale
    Dim rFind As Range:     Set rFind = Intersect(Me.UsedRange, Me.Range("LOC.Find")).offset(0, Localization)
    
    Select Case LocalizationItem
        Case phbLocalizationItemAny:    'na
        Case phbLocalizationItemState:  Set rFind = Intersect(rFind, Me.Range("Loc.Rows.States"))
        Case phbLocalizationItemRole:   Set rFind = Intersect(rFind, Me.Range("Loc.Rows.Roles"))
    End Select
    
    Set rFind = rFind.Find(Notion)
    If rFind Is Nothing Then Exit Property
    Tag = rFind.offset(0, 0 - Localization).value
    
End Property

Public Property Get Translation(Tag As String, _
                        Optional LocalizationItem As phbLocalizationItem = phbLocalizationItemAny, _
                        Optional Localization As phbLocalization = -1) As String
                        
    If Tag = "" Then
        Translation = ""
        Exit Property
    End If
    
    If Localization = -1 Then Localization = Locale
    Dim rFind As Range:     Set rFind = Intersect(Me.UsedRange, Me.Range("LOC.Find"))
    
    Select Case LocalizationItem
        Case phbLocalizationItemAny:    'na
        Case phbLocalizationItemState:  Set rFind = Intersect(rFind, Me.Range("Loc.Rows.States"))
        Case phbLocalizationItemRole:   Set rFind = Intersect(rFind, Me.Range("Loc.Rows.Roles"))
    End Select
    
    Set rFind = rFind.Find(Tag)
    If rFind Is Nothing Then Exit Property
    
    Translation = rFind.offset(0, Localization).value
    
End Property

Attribute VB_Name = "MST"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private bTimeLineMonths As Boolean

Public Sub cmdUpdate_Click()
    On Error GoTo suberr
    modStack.PushCallStack "MST", "cmdUpdate_Click"
    UpdateMST True
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MST.cmdUpdate_Click error:"
    Resume subend
End Sub

Public Sub cmdShowHide_Click()
    On Error GoTo suberr
    modStack.PushCallStack "MST", "cmdShowHide_Click"
    
    If Me.Range("MST.Row.Chart").EntireRow.Hidden Then
        Me.Range("MST.Row.Chart").EntireRow.Hidden = False
        'rebuild chart
    Else
        Me.Range("MST.Row.Chart").EntireRow.Hidden = True
        'reset chart
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MST.cmdShowHide_Click error:"
    Resume subend
End Sub

Friend Sub UpdateMST(Validate As Boolean)
    
    Dim Project As New TPGProject
    Dim task As TPGProjectTask
    Dim rangeRowTemplate As Range
    Dim rangeTarget As Range
    Dim intRowIndex As Integer
    Dim btimelineok As Boolean
    Dim icurrentheight As Integer
    Dim ikeymstcount As Integer

    On Error GoTo suberr
    modStack.PushCallStack "MST", "U"
    
    'no chart for KISS
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
        'for 2007 we need to unprotect
        If Application.Version = "12.0" Then UnprotectSheet Me
        Me.DeleteEntireChart
    End If
    
    If Range("MST.HeaderRow").row + 1 < Range("MST.FooterRow").row Then
        Range(Range("MST.HeaderRow").offset(1, 0).EntireRow, Range("MST.FooterRow").offset(-1, 0).EntireRow).Delete xlShiftUp
    End If
    
    intRowIndex = Range("MST.HeaderRow").row
    Set rangeRowTemplate = Range("MST.RowTemplate")
    ikeymstcount = 0

    'no chart for KISS
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
        'if plan is not empty, we rebuild the timeline if we have start and end date
        If Plan.Range("Plan.ProjectHeader").row + 1 < Plan.Range("Plan.ProjectFooter").row Then
            If (Plan.Range("Plan.Start").value <> "") And (Plan.Range("Plan.Start").value <> "") Then
                If Me.Range("MST.Row.Chart").EntireRow.Hidden Then
                    Me.Range("MST.Row.Chart").EntireRow.Hidden = False
                End If
                btimelineok = Me.RebuildTimeLine 'bTimeLineMonths contains indication whether timeline is months / quarters
                icurrentheight = 1
                'count nr of keymilestones (= needed for chart)(this to decide on nr of levels in chart)
                For Each task In Project
                    If task("Typ") = "M" Then
                        If (task("KeyMST") = "x") Then ikeymstcount = ikeymstcount + 1
                    End If
                Next
            End If
        End If
    Else
        btimelineok = False
    End If
    
    For Each task In Project
        If task("Typ") = "M" Then
            intRowIndex = intRowIndex + 1
            Set rangeTarget = Me.Cells(intRowIndex, 1).EntireRow
            rangeRowTemplate.Copy
            CellFunctions.InsertWrapped rangeTarget
            Set rangeTarget = rangeTarget.offset(-1, 0)
            rangeTarget.Hidden = False
            
            Intersect(rangeTarget, Range("MST.PSPColumn")).value = task("WBS")
            Intersect(rangeTarget, Range("MST.MilestoneColumn")).value = task("TaskName")
            If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then Intersect(rangeTarget, Range("MST.KeyMSTColumn")).value = task("KeyMST")
            If task("BaselineStart") <> 0 Then
                Intersect(rangeTarget, Range("MST.BaselineColumn")).value = task("BaselineStart")
            End If
            If Application.Names("Plan.BaselineSaveDate").RefersToRange.value > 0 Then
                If task("Start") <> 0 Then
                    Intersect(rangeTarget, Range("MST.PlanColumn")).value = task("Start")
                End If
            End If
            If task("Progress") = 100 Then
                Intersect(rangeTarget, Range("MST.ActualColumn")).value = task("Start")
            End If
            rangeTarget.EntireRow.AutoFit
            
            'we show keymst on chart
            If (task("KeyMST") = "x") And btimelineok Then
                If task("Start") <> "" Then
                    SetMSTShape task("TaskName"), task("Start"), icurrentheight
                    'when more than 5 keymsts then we use 2 levels in chart
                    If ikeymstcount > 5 Then
                        Select Case icurrentheight
                            Case -1
                                icurrentheight = 3
                            Case -3
                                icurrentheight = 1
                            Case Else
                                icurrentheight = icurrentheight * -1
                        End Select
                    Else
                        icurrentheight = icurrentheight * -1
                    End If
                End If
            End If
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MST.UpdateMST error:"
    Resume subend
End Sub

Private Function GetTable() As TPGTable
    Dim t As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Decisions", "GetTable"

    t.SetTable Me.Range("MST.Table"), True, False, TemplateFirstrow, 10
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Decisions.GetTable error:"
    Resume subend
End Function

Public Sub cmdAutoFilter_Click()
    On Error GoTo suberr
    modStack.PushCallStack "MST", "cmdAutoFilter_Click"

    GetTable.Autofilter_Clicked 1

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MST.cmdAutoFilter_Click error:"
    Resume subend
End Sub

Public Sub DeleteEntireChart()
    On Error GoTo suberr
    modStack.PushCallStack "MST", "DeleteEntireChart"
    Dim s As shape
    For Each s In MST.Shapes
        If (Left(s.Name, 3) = "TL_") Or (Left(s.Name, 4) = "MST_") Then s.Delete
    Next
    Me.Range("MST.Row.Chart").EntireRow.Hidden = True
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MST.DeleteEntireChart error:"
    Resume subend
End Sub

Public Function RebuildTimeLine() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "MST", "RebuildTimeLine"

    Dim dstart As Date
    Dim dfinish As Date
    Dim iMonths As Integer
    Dim iQuarters As Integer
    Dim iUnits As Integer
    Dim i As Integer
    Dim rCell As Range
    Dim CurrentRect As shape
    Dim dCurrentTop As Double
    Dim dCurrentLeft As Double
    Dim dCurrentHeight As Double
    Dim dTotalWidth As Double
    Dim dCurrentWidth As Double
    Dim dcurrentdate As Date
    Dim ifontsize As Integer
    Dim imonth As Integer
    Dim iyear As Integer
    
    If (IsDate(Plan.Range("Plan.Start").value)) And (IsDate(Plan.Range("Plan.Finish").value)) Then
        imonth = Month(Plan.Range("Plan.Start").value)
        iyear = Year(Plan.Range("Plan.Start").value)
        dstart = DateSerial(iyear, imonth, 1)
        imonth = Month(Plan.Range("Plan.Finish").value)
        iyear = Year(Plan.Range("Plan.Finish").value)
        dfinish = DateSerial(iyear, imonth, 31)
        iMonths = DateDiff("m", dstart, dfinish) + 1
        'when projects runs over more than 12 months we represent quarters in chart
        If iMonths > 12 Then
            iQuarters = DateDiff("q", dstart, dfinish) + 1
            iUnits = iQuarters
            bTimeLineMonths = False
        Else
            iUnits = iMonths
            bTimeLineMonths = True
        End If
        
        dTotalWidth = MST.Range("MST.ChartArea").Width
        dCurrentTop = MST.Range("MST.ChartArea").Top + 50
        dCurrentLeft = MST.Range("MST.ChartArea").Left
        dCurrentHeight = 18 'MST.Range("MST.ChartArea").Height - 110
        dCurrentWidth = dTotalWidth / iUnits ' iMonths
        dcurrentdate = AdjustStartDateToScale(bTimeLineMonths, dstart) 'startdate of timeline
        
        If iUnits <= 8 Then
            ifontsize = 7
        Else
            ifontsize = 6
        End If
        
        For i = 1 To iUnits 'iMonths
            Set CurrentRect = MST.Shapes.AddShape(msoShapeRectangle, dCurrentLeft, dCurrentTop, dCurrentWidth + 2, dCurrentHeight)
            With CurrentRect
                .Name = "TL_" & Trim(CStr(Month(dcurrentdate))) & "_" & Trim(CStr(Year(dcurrentdate)))
                .Fill.ForeColor.RGB = RGB(191, 191, 191)
                .Line.visible = msoTrue
                .Line.ForeColor.RGB = RGB(166, 166, 166)
                .Line.Weight = 1
                .TextFrame2.WordWrap = msoTrue ' = msoFalse
                .TextFrame2.MarginTop = 0
                .TextFrame2.MarginBottom = 0
                .TextFrame2.MarginLeft = 0
                .TextFrame2.MarginRight = 0
                .TextFrame2.HorizontalAnchor = msoAnchorCenter
                .TextFrame2.VerticalAnchor = msoAnchorMiddle
                .TextFrame2.TextRange.Text = Format(dcurrentdate, "mmm-yyyy")
                .TextFrame2.TextRange.Font.Size = ifontsize
                .TextFrame2.TextRange.Font.Name = "Segoe UI"
                .TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
            End With
            dCurrentLeft = dCurrentLeft + dCurrentWidth
            If bTimeLineMonths Then
                dcurrentdate = DateAdd("m", 1, dcurrentdate)
            Else
                dcurrentdate = DateAdd("m", 3, dcurrentdate)
            End If
        Next
        RebuildTimeLine = True
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "MST.RebuildTimeLine error:"
    Resume subend
End Function

Private Function AdjustStartDateToScale(bmonth As Boolean, anyDate As Date) As Date
    On Error GoTo suberr
    modStack.PushCallStack "MST", "AdjustStartDateToScale"

    AdjustStartDateToScale = anyDate
    If bmonth Then
            AdjustStartDateToScale = DateSerial(DatePart("yyyy", anyDate), DatePart("m", anyDate), 1)
            'AdjustStartDateToScale = DateAdd("m", -1, AdjustStartDateToScale)
    Else 'quarter
            AdjustStartDateToScale = DateSerial(DatePart("yyyy", anyDate), DatePart("m", anyDate), 1)
            'AdjustStartDateToScale = DateAdd("m", -1, AdjustStartDateToScale)
            Dim mon As Integer
            mon = Month(AdjustStartDateToScale)
            While (mon <> 1 And mon <> 4 And mon <> 7 And mon <> 10)
                AdjustStartDateToScale = DateAdd("m", -1, AdjustStartDateToScale)
                mon = Month(AdjustStartDateToScale)
            Wend
    End If
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "MST.AdjustStartDateToScale error:"
    Resume subend
End Function

Public Sub test()
Me.DeleteEntireChart
Me.RebuildTimeLine
SetMSTShape "test milestone chart", CDate(Now()), 1
SetMSTShape "test milestone chart2", DateAdd("m", 1, Now()), -1
End Sub

Private Sub SetMSTShape(sname As String, ddate As Date, iheight As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "MST", "ResetTimeLine"

    Dim smst As shape
    Dim smstrect As shape
    Dim smstconn As shape
    Dim srect As shape
    Dim idaysinmonth As Integer
    Dim idaysinquarter As Integer
    Dim d As Date
    Dim dpartofunit As Double
    Dim dCurrentTop As Double
    Dim dCurrentLeft As Double
    Dim drectleft As Double
    Dim s As shape
    Dim dtimelinedate As Date
    
    'define required startdate for shape
    dtimelinedate = AdjustStartDateToScale(bTimeLineMonths, ddate)

    'find the correct rectangle
    For Each s In MST.Shapes
        If (s.AutoShapeType = msoShapeRectangle) And (s.Name = "TL_" & Trim(CStr(Month(dtimelinedate))) & "_" & Trim(CStr(Year(dtimelinedate)))) Then
            Set srect = s
            Exit For
        End If
    Next
    
    'found correct rectangle
    If Not srect Is Nothing Then
        If bTimeLineMonths Then
            d = DateAdd("m", 1, DateSerial(Year(ddate), Month(ddate), 1))
            d = DateAdd("d", -1, d)
            idaysinmonth = Day(d)
            dpartofunit = Day(ddate) / idaysinmonth
        Else
            d = DateAdd("m", 3, dtimelinedate)
            d = DateAdd("d", -1, d)
            idaysinquarter = DateDiff("d", dtimelinedate, d)
            dpartofunit = DateDiff("d", dtimelinedate, ddate) / idaysinquarter
        End If
        If (iheight < 0) Then
            dCurrentTop = srect.Top - 10 + (iheight * 10)
        Else
            dCurrentTop = srect.Top + srect.Height + (iheight * 10)
        End If
        dCurrentLeft = srect.Left + (dpartofunit * srect.Width) - 5
        Set smst = MST.Shapes.AddShape(msoShapeFlowchartDecision, dCurrentLeft, dCurrentTop, 10, 10)
        With smst
            .Name = "MST_" & Trim(CStr(Day(ddate))) & "_" & Trim(CStr(Month(ddate))) & "_" & Trim(CStr(Year(Date)))
            .Fill.ForeColor.RGB = RGB(226, 0, 26)
            .Line.visible = msoFalse
        End With
        drectleft = dCurrentLeft - 55
        If drectleft < 0 Then drectleft = 13 'drectleft = dCurrentLeft
        If (drectleft + 120) > 564 Then drectleft = 564 - 120
'        If (srect.Left + srect.Width) > 550 Then drectleft = srect.Left + srect.Width - 120 'we are at the right side
        If (iheight < 0) Then
            Set smstrect = MST.Shapes.AddShape(msoShapeRectangle, drectleft, smst.Top - 20, 120, 20)
        Else
            Set smstrect = MST.Shapes.AddShape(msoShapeRectangle, drectleft, smst.Top + 10, 120, 20)
        End If
        With smstrect
            .Name = "MST_RCT_" & Trim(CStr(Day(ddate))) & "_" & Trim(CStr(Month(ddate))) & "_" & Trim(CStr(Year(Date)))
            .Fill.visible = msoFalse
            .Line.visible = msoFalse
            .TextFrame2.WordWrap = msoTrue ' = msoFalse
            .TextFrame2.MarginTop = 0
            .TextFrame2.MarginBottom = 0
            .TextFrame2.MarginLeft = 0
            .TextFrame2.MarginRight = 0
            If drectleft = 13 Then ' dCurrentLeft Then
                .TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignLeft
'                .TextFrame2.HorizontalAnchor = msoAnchorNone
            ElseIf drectleft + 120 >= 564 Then
                .TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignRight
            Else
                .TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
                '.TextFrame2.HorizontalAnchor = msoAnchorCenter
            End If
            .TextFrame2.VerticalAnchor = msoAnchorMiddle
            .TextFrame2.TextRange.Text = sname + Chr(10) + CStr(ddate)
            .TextFrame2.TextRange.Font.Size = 6  '7
            .TextFrame2.TextRange.Font.Name = "Segoe UI"
            .TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(226, 0, 26)
        End With
        If (iheight < 0) Then
            Set smstconn = MST.Shapes.AddConnector(msoConnectorStraight, dCurrentLeft + 5, dCurrentTop + 10, dCurrentLeft + 5, srect.Top)
        Else
            Set smstconn = MST.Shapes.AddConnector(msoConnectorStraight, dCurrentLeft + 5, srect.Top + srect.Height + 1, dCurrentLeft + 5, dCurrentTop)
        End If
        With smstconn
            .Name = "MST_CONN_" & Trim(CStr(Day(ddate))) & "_" & Trim(CStr(Month(ddate))) & "_" & Trim(CStr(Year(Date)))
            .Fill.visible = msoFalse
            .Line.ForeColor.RGB = RGB(226, 0, 26)
            .Line.visible = msoTrue
            .Line.DashStyle = msoLineDash 'msoLineSquareDot  msoLineSysDash
            .Line.Weight = 1
        End With
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MST.SetMSTShape error:"
    Resume subend
End Sub

'Private Sub RebuildChart()
'On Error GoTo SubErr
'modStack.PushCallStack "MST", "RebuildChart"
'
'Me.RebuildTimeLine
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "MST.RebuildChart error:"
'    Resume SubEnd
'End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "MTA"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub test()
SaveReportDate Cover.Range("Cover.StatusDate").value
End Sub

Public Sub SaveReportDate(statusdate As Date)
'Exit Sub
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "SaveReportDate"

    If Plan.ValidateMilestones Then
        'we can only update for this statusdate when keymsts are present in plan
        If Plan.CountKeyMSTs > 0 Then
            'if the statusdate already exists then we first need to delete the latest date
            If MTA.Range("MTA.CurrentDate.Field").value = statusdate Then
                    DeleteLatestReport
            End If
            RightShiftHistory
            HandleMSDeletions
            SaveMilestoneHistory statusdate
            SortTable
            FormatTable
            UpdateColorIndexColumn
            CreateChartFromScratch
        End If
    Else
        AppStopMsg appGetLOCText("msginvalidmilestones")
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.SaveReportDate error:"
    Resume subend
End Sub

Private Sub DeleteLatestReport()
'Exit Sub
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "DeleteLatestReport"
    LeftShiftHistory
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.DeleteLatestReport error:"
    Resume subend
End Sub


'Public Sub cmdRemoveCurrentDay()
'
'    On Error GoTo suberr
'    modStack.PushCallStack "MTA", "cmdRemoveCurrentDay"
'
'    If Not AssertCurrentDay() Then GoTo subend
'
'    If appQOCMsg("Wollen Sie die heutigen Meilensteindaten aus der MTA entfernen") = vbCancel Then GoTo subend
'    LeftShiftHistory
'
'subend:
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "MTA.cmdRemoveCurrentDay error:"
'    Resume subend
'
'End Sub

Private Sub LeftShiftHistory()
    Dim upperLeftCell As Range
    Dim lowerRightCell As Range
    Dim toBeCopied As Range
    Dim icountdates As Integer
    Dim c
    Dim bdeletecolumn As Boolean
    
    ' if the table is still empty shift must not be performed
    If MTA.Range("MTA.CurrentDate.Field").value = "-" Then Exit Sub
    'first check if we need to delete a column
    bdeletecolumn = False
    icountdates = 0
    If (MTA.Range("MTA.Dates").Cells.Count - 1) > 4 Then
        bdeletecolumn = True
        icountdates = MTA.Range("MTA.Dates").Cells.Count - 1
    Else
        For Each c In MTA.Range("MTA.Dates")
            If c.value <> "" Then
                icountdates = icountdates + 1
            End If
        Next
    End If
    'copy or clear if only one column
    If icountdates > 1 Then
        Set upperLeftCell = MTA.Range("MTA.CurrentDate.Field").offset(ColumnOffset:=1)
        Set lowerRightCell = MTA.Cells(MTA.Range("MTA.Milestonehistory.Table").row + (MTA.Range("MTA.Milestonehistory.Table").rows.Count - 1), MTA.Range("MTA.CurrentDate.Field").Column + (icountdates - 1))
        Set toBeCopied = MTA.Range(upperLeftCell, lowerRightCell)
        toBeCopied.Copy
        upperLeftCell.offset(0, -1).Select
        MTA.Paste
    Else
        MTA.Range("MTA.CurrentDate.Field").Resize((MTA.Range("MTA.Milestonehistory.Table").rows.Count - 1), 1).ClearContents
    End If
    'clear or delete the column at the end
    If bdeletecolumn Then
        MTA.Range("MTA.Dates").offset(0, MTA.Range("MTA.Dates").Columns.Count - 2).Resize(1, 1).EntireColumn.Delete
    ElseIf icountdates > 1 Then
        MTA.Range("MTA.Dates").offset(0, icountdates - 1).Resize(MTA.Range("MTA.Milestonehistory.Table").rows.Count, 1).ClearContents
    End If
    
    MTA.Range("A1").Select 'cosmetic
End Sub


Private Function AssertCurrentDay() As Boolean
    If Date = MTA.Range("MTA.CurrentDate.Field").value Then
        AssertCurrentDay = True
    Else
        AssertCurrentDay = False
        AppInfoMsg "Nur die aktuellen Meilensteindaten des heutigen Tages k|fffd|nnen r|fffd|ckg|fffd|ngig gemacht werden."
    End If
End Function

Public Sub cmdSave_Click()
'
'    On Error GoTo suberr
'    modStack.PushCallStack "MTA", "cmdSave_Click"
'    Select Case PreviousProcName
'        Case "modSQL.GetMTAData"
'            UnprotectSheet MTA
'
'            UnHideMilestones
'            RightShiftHistory
'            HandleMSDeletions
'            SaveMilestoneHistory True
'            SortTable
'            FormatTable
'            UpdateColorIndexColumn
'            CreateChartFromScratch
'            ApplyFilter
'
'        Case Else
'            UnprotectSheet MTA
'
'            If Not AssertNewHistoryDate Then GoTo subend
'            If appQOCMsg("Die MST werden mit dem heutigen Kalendertag gespeichert. " & _
'                        "Achtung, es ist nur ein Status pro Tag speicherbar und gegebenenfalls nur an diesem Tag r|fffd|ckg|fffd|ngig zu machen! " & _
'                        "Wollen Sie fortfahren") = vbCancel Then GoTo subend
'
'            If NrOfMilestones = 0 Then GoTo subend
'
'            Plan.ValidateMilestones
'            UnHideMilestones
'            RightShiftHistory
'            HandleMSDeletions
'            SaveMilestoneHistory
'            SortTable
'            FormatTable
'            UpdateColorIndexColumn
'            CreateChartFromScratch
'            ApplyFilter
'
'    End Select
'
'subend:
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "MTA.cmdSave_Click error:"
'    Resume subend

End Sub

'Public Sub cmdToggleFilter_Click()
'
'
'    On Error GoTo suberr
'    modStack.PushCallStack "MTA", "cmdToggleFilter_Click"
'
'    If NrOfMilestones = 0 Then GoTo subend
'    UpdateColorIndexColumn
'    If MTA.Range("MTA.FilterSetting.Field").Value = 1 Then
'        MTA.Range("MTA.FilterSetting.Field").Value = 0
'    Else
'        MTA.Range("MTA.FilterSetting.Field").Value = 1
'    End If
'    ApplyFilter
'
'subend:
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "MTA.cmdToggleFilter_Click error:"
'    Resume subend
'
'End Sub


Private Function AssertNewHistoryDate() As Boolean
    If MTA.Range("MTA.CurrentDate.Field").EntireRow.Find(Cover.Range("Cover.StatusDate")) Is Nothing Then   'Hist date is new
        AssertNewHistoryDate = True
    Else
        AssertNewHistoryDate = False
        modApp.AppStopMsg appGetLOCText("msgMTAStatusDouble")
    End If
End Function

'Private Function AssertAllMilestoneDates() As Boolean
'    If MTA.Range("MTA.CurrentDate.Field").entireRow.Find(Date) Is Nothing Then
'        AssertAllMilestoneDates = True
'    Else
'        AssertAllMilestoneDates = False
'        modApp.AppStopMsg appGetLOCText("msgMSDatesNotComplete")
'    End If
'End Function

Public Sub cmdRefreshChart_Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "cmdRefreshChart_Click"
'    UnHideMilestones
    
'    If NrOfMilestones = 0 Then GoTo subend
'    UpdateColorIndexColumn
    CreateChartFromScratch
'    ApplyFilter

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.cmdRefreshChart_Click error:"
    Resume subend

End Sub

Private Sub UpdateColorIndexColumn()
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "UpdateColorIndexColumn"

    If MTA.Range("MTA.Milestonehistory.Table").rows.Count <= 2 Then GoTo subend
    For Each R In Intersect(MTA.Range("MTA.ColorIndex.Column"), GetMTAHistoryTable.ValuesRange)
         R.value = R.offset(ColumnOffset:=2).Interior.Color 'Index
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.UpdateColorIndexColumn error:"
    Resume subend
End Sub

'Private Sub ApplyFilter()
'    On Error GoTo suberr
'    modStack.PushCallStack "MTA", "ApplyFilter"
'
'    If MTA.Range("MTA.FilterSetting.Field").Value = 1 Then
'        HideUncheckedMilestones
'    Else
'        UnHideMilestones
'    End If
'
'subend:
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "MTA.ApplyFilter error:"
'    Resume subend
'End Sub

Private Sub HideUncheckedMilestones()
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "HideUncheckedMilestones"

    If MTA.Range("MTA.Milestonehistory.Table").rows.Count <= 2 Then GoTo subend
    For Each R In Intersect(MTA.Range("MTA.Filter.Column"), GetMTAHistoryTable.ValuesRange)
         If R.value <> "x" Then R.EntireRow.Hidden = True
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.HideUncheckedMilestones error:"
    Resume subend
End Sub

Private Sub UnHideMilestones()
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "UnHideMilestones"

    If MTA.Range("MTA.Milestonehistory.Table").rows.Count <= 2 Then GoTo subend
    For Each R In Intersect(MTA.Range("MTA.ColorIndex.Column"), GetMTAHistoryTable.ValuesRange)
         R.EntireRow.Hidden = False
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.UnHideMilestones error:"
    Resume subend
End Sub

Private Sub CreateChartFromScratch()
    Dim chartObj As ChartObject
'    Dim rangeName As String
    Dim chartName As String
    Dim rowNameRange As String
    Dim rowValuesRange As String
    Dim rowXValuesRange As String
    Dim i As Integer
    Dim columSize As Integer
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "CreateChartFromScratch"
    UnprotectSheet MTA
    If NrOfMilestones = 0 Then GoTo subend
    chartName = "MTA.MTAChart"
    'On Error Resume Next
       
    Dim rCell As Range
  
'    For Each rCell In Intersect(MTA.Range("MTA.Milestonehistory.Table"), MTA.Range("MTA.MSNames.Column")).Resize(MTA.Range("MTA.Milestonehistory.Table").rows.Count - 2, 1).offset(1, 0)
'        rCell.offset(0, -3).Value = rCell.Interior.ColorIndex
'    Next
            
    If MTA.ChartObjects.Count > 0 Then MTA.ChartObjects(chartName).Delete
    
    If (NrOfMilestones = 1) And (Me.Range("MTA.CurrentDate.Field").value = "-") Then
        GoTo subend
    End If
    
    '[AXDE]
    Me.Range("MTA.CurrentDate.Field").value = ConvertDateFormat(Me.Range("MTA.CurrentDate.Field").value)
    
'    Set chartObj = MTA.ChartObjects.Add _
'        (Left:=MTA.Range("E1").Left, _
'        Width:=MTA.Range("E1:K1").Width, _
'        Top:=MTA.Range("E4").Top, _
'        Height:=MTA.Range("E4:E32").Height)
    Set chartObj = MTA.ChartObjects.Add _
        (Left:=MTA.Range("E1").Left, _
        Width:=MTA.Range("E1:K1").Width, _
        Top:=MTA.Range("E4").Top, _
        Height:=MTA.Range("E4:E32").Height)
    With chartObj
        .Name = chartName
        ' set the data source
        .Chart.ChartType = xlLineMarkers
        .Chart.PlotArea.Format.Fill.ForeColor.RGB = RGB(242, 242, 242)
        ' create the rows
        Do While .Chart.SeriesCollection.Count < NrOfMilestones
            
           .Chart.SeriesCollection.newseries
           
           'MTA.ChartObjects(1).Chart.SeriesCollection("iogie").Name = "iogie2"
            
        Loop
        ' define row name and data range
        For i = 1 To NrOfMilestones
            'If MTA.Range("MTA.CurrentDate.Field").Offset(i, -1).Interior.ColorIndex = 15 Then GoTo dontDraw
            'milestonesDrawn = milestonesDrawn + 1
            columSize = GetLastStatusColumn - MTA.Range("MTA.CurrentDate.Field").Column + 1
            If columSize = 0 Then GoTo subend 'TODO: FIXME!
            If MTA.Range("MTA.CurrentDate.Field").offset(i, -1).value = "" Then GoTo subend ' otherwise chart generation crashes
            'If MTA.Range("MTA.CurrentDate.Field").Offset(i).value = "" Then GoTo SubEnd ' otherwise chart generation crashes
            
'            If Application.Version = "12.0" Then
'                rowNameRange = "=MTA!" & MTA.Range("MTA.CurrentDate.Field").offset(i, -1).Address(ReferenceStyle:=xlA1)
'            Else
'                rowNameRange = "=MTA!" & MTA.Range("MTA.CurrentDate.Field").offset(i, -1).Address(ReferenceStyle:=xlR1C1)
'            End If
            
            rowXValuesRange = "=MTA!" & MTA.Range("MTA.CurrentDate.Field").Resize(ColumnSize:=columSize).Address(ReferenceStyle:=xlR1C1)
            rowValuesRange = "=MTA!" & MTA.Range("MTA.CurrentDate.Field").Resize(ColumnSize:=columSize).offset(RowOffset:=i).Address(ReferenceStyle:=xlR1C1)
            
            With MTA.ChartObjects(chartName).Chart.SeriesCollection(i)
                .XValues = rowXValuesRange
                .Values = rowValuesRange
                
                .Border.Color = MTA.Range("MTA.CurrentDate.Field").offset(i, -2).Interior.Color
                .Border.Weight = xlThick
                .Border.LineStyle = xlContinuous
                .MarkerBackgroundColor = MTA.Range("MTA.CurrentDate.Field").offset(i, -2).Interior.Color
                .MarkerForegroundColor = MTA.Range("MTA.CurrentDate.Field").offset(i, -2).Interior.Color
                .MarkerStyle = xlDiamond
                .Smooth = False
                .MarkerSize = 12
                .Shadow = False
                
                .Name = rowNameRange
            End With
'dontDraw:
        Next
        'If milestonesDrawn = 0 Then GoTo SubEnd
        .Chart.HasLegend = False
        .Border.Weight = 1
        .Border.LineStyle = 0
        .Interior.ColorIndex = xlNone
        '.Chart.PlotArea.Interior.ColorIndex = xlNone
        .Chart.Axes(xlCategory, xlPrimary).HasTitle = True
        .Chart.Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text = appGetLOCText("reportdate")
        .Chart.Axes(xlCategory, xlPrimary).AxisTitle.Top = 1
        .Chart.Axes(xlCategory, xlPrimary).AxisTitle.Format.TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(89, 89, 89)
        .Chart.Axes(xlCategory, xlPrimary).AxisTitle.Format.TextFrame2.TextRange.Font.Name = "SEGOE UI"
        .Chart.Axes(xlCategory, xlPrimary).AxisTitle.Format.TextFrame2.TextRange.Font.Size = 11
        .Chart.Axes(xlValue, xlPrimary).HasTitle = True
        .Chart.Axes(xlValue, xlPrimary).AxisTitle.Characters.Text = appGetLOCText("milestone")
        .Chart.Axes(xlValue, xlPrimary).AxisTitle.Format.TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(89, 89, 89)
        .Chart.Axes(xlValue, xlPrimary).AxisTitle.Format.TextFrame2.TextRange.Font.Name = "SEGOE UI"
        .Chart.Axes(xlValue, xlPrimary).AxisTitle.Format.TextFrame2.TextRange.Font.Size = 11
        With .Chart.Axes(xlCategory)
            .MinimumScale = WorksheetFunction.Min(MTA.Range(GetDataRangeName)) 'mta.Range("MTA.MinDate").value
            .MaximumScale = WorksheetFunction.max(MTA.Range(GetDataRangeName)) 'mta.Range("MTA.MaxDate").value
            .MinorUnit = 31
            .MajorUnitIsAuto = True ' = 91
            .CrossesAt = WorksheetFunction.max(MTA.Range(GetDataRangeName))
            With .TickLabels
                .Alignment = xlCenter
                .offset = 100
                .ReadingOrder = xlContext
                .Orientation = 90
            End With
            With .Border
                .Weight = xlHairline
                .LineStyle = xlAutomatic
            End With
            .MajorTickMark = xlInside ' xlOutside
            .MinorTickMark = xlInside 'xlOutside
            .TickLabelPosition = xlHigh
            .HasMajorGridlines = True
            .HasMinorGridlines = False
            .MajorGridlines.Format.Line.ForeColor.RGB = RGB(217, 217, 217)
            .MajorGridlines.Format.Line.Weight = 0.5
            .MinorGridlines.Format.Line.ForeColor.RGB = RGB(217, 217, 217)
            .MinorGridlines.Format.Line.Weight = 0.5
            .Format.Line.ForeColor.RGB = RGB(217, 217, 217)
            .Format.Line.Weight = 0.5
        End With
        With .Chart.Axes(xlValue)
            .MinimumScale = WorksheetFunction.Min(MTA.Range(GetDataRangeName))
            .MaximumScale = WorksheetFunction.max(MTA.Range(GetDataRangeName))
            .MinorUnit = 31
            .MajorUnit = 91
            .CrossesAt = WorksheetFunction.max(MTA.Range(GetDataRangeName))
'            With .TickLabels
'                '.Alignment = xlLeft ' xlCenter
'                '.offset = -200
'                '.ReadingOrder = ' = xlContext
'                '.Orientation = 90
'            End With
            With .Border
                .Weight = xlHairline
                .LineStyle = xlAutomatic
            End With
            .MajorTickMark = xlInside ' xlOutside
            .MinorTickMark = xlInside ' xlOutside
            .TickLabelPosition = xlNextToAxis
            .HasMajorGridlines = True
            .HasMinorGridlines = False
            .TickLabelPosition = xlLow
            .MajorGridlines.Format.Line.ForeColor.RGB = RGB(217, 217, 217)
            .MajorGridlines.Format.Line.Weight = 0.5
            .MinorGridlines.Format.Line.ForeColor.RGB = RGB(217, 217, 217)
            .MinorGridlines.Format.Line.Weight = 0.5
            .Format.Line.ForeColor.RGB = RGB(217, 217, 217)
            .Format.Line.Weight = 0.5
        End With
        .Chart.PlotArea.Top = MTA.Range("B3").Top
        .Chart.Axes(xlCategory).AxisTitle.Top = 1

    End With
    AdjustTriangleShape 'chartObj

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.CreateChartFromScratch error:"
    Resume subend
End Sub

Private Sub AdjustTriangleShape() '(chartObj As ChartObject)
    Dim Triangle As shape
    Dim RectangleR As shape
    Dim RectangleB As shape
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "AdjustTriangleShape"

    SetCharts Me
    Set Triangle = MTA.Shapes("Triangle")
    Set RectangleR = MTA.Shapes("RectangleRight")
    Set RectangleB = MTA.Shapes("RectangleBottom")
    
    With Triangle
        .Top = MTA.Range("MTA.Inner.TL").Top - 5
        .Left = MTA.Range("MTA.Inner.TL").Left + 15
        .Width = MTA.Range("MTA.MTAChart.BR").Left - MTA.Range("MTA.Inner.TL").Left - 10
        .Height = MTA.Range("MTA.MTAChart.BR").Top - MTA.Range("MTA.Inner.TL").Top
        
        .ZOrder msoBringToFront
        .Fill.ForeColor.RGB = RGB(255, 255, 255)
        .Fill.Transparency = 0
    End With

    With RectangleR
        .Top = Triangle.Top
        .Left = Triangle.Left + Triangle.Width
        .Width = 10
        .Height = Triangle.Height

        .ZOrder msoBringToFront
        .Fill.Transparency = 0
    End With

    With RectangleB
        .Top = Triangle.Top + Triangle.Height
        .Left = Triangle.Left
        .Width = Triangle.Width
        .Height = 20

        .ZOrder msoBringToFront
        .Fill.Transparency = 0
    End With

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.AdjustTriangleShape error:"
    Resume subend
End Sub

Private Function NrOfMilestones() As Integer
    NrOfMilestones = MTA.Range("MTA.Milestonehistory.Table").rows.Count - 2
End Function

Private Sub HandleMSDeletions()
    Dim toBeDeleted As Collection
    Dim GUID As Variant
    Dim R As Range
    Set toBeDeleted = New Collection
    
    If GetMTAHistoryTableForExport.ValuesRange.rows.Count <= 1 Then Exit Sub
    For Each R In Intersect(MTA.Range("MTA.Milestonehistory.Table"), MTA.Range("MTA.GUID.Column")).Resize(MTA.Range("MTA.Milestonehistory.Table").rows.Count - 2).offset(1)
        'we only need keymsts
        If Not Plan.IsMilestone(R.value, True) Then toBeDeleted.Add R.value
    Next
    For Each GUID In toBeDeleted
        DeleteGuid GUID
    Next
End Sub

Private Sub DeleteGuid(ByVal GUID As String)
    Dim R As Range
    If GUID = "" Then Exit Sub
    For Each R In Intersect(MTA.Range("MTA.Milestonehistory.Table"), MTA.Range("MTA.GUID.Column"))
        If R.value = GUID Then
            If MTA.Range("MTA.Milestonehistory.Table").rows.Count <= 3 Then ' don't delete the last row
                reset
            Else
                R.EntireRow.Delete
                Exit Sub
            End If
        End If
    Next
End Sub

Private Sub SortTable()
    GetMTAHistoryTable2.Sort MTA.Range("MTA.Milestonehistory.Table").Resize(1, 1).offset(1, 1), xlAscending ', True
End Sub
Public Sub test2()
        MTA.Range("MTA.Dates").offset(0, 1).Resize(1, 1).EntireColumn.Insert Shift:=xlToRight, copyOrigin:=xlFormatFromLeftOrAbove

End Sub

Private Sub RightShiftHistory()
    Dim upperLeftCell As Range
    Dim lowerRightCell As Range
    Dim toBeCopied As Range
    Dim icountdates As Integer
    Dim c
    Dim binsertcolumn As Boolean
    
    ' if the table is still empty shift must not be performed
    If (MTA.Range("MTA.CurrentDate.Field").value = "-") Or (MTA.Range("MTA.CurrentDate.Field").value = "") Then Exit Sub
    'first check if we need to insert a column
    binsertcolumn = False
    icountdates = 0
    If (MTA.Range("MTA.Dates").Cells.Count - 1) = 4 Then
        For Each c In MTA.Range("MTA.Dates")
            If c.value <> "" Then
                icountdates = icountdates + 1
            End If
        Next
        If icountdates > 3 Then binsertcolumn = True
    Else
        icountdates = MTA.Range("MTA.Dates").Cells.Count - 1
        binsertcolumn = True
    End If
    If binsertcolumn Then
        MTA.Range("MTA.Dates").offset(0, icountdates).Resize(1, 1).EntireColumn.Insert Shift:=xlToRight, copyOrigin:=xlFormatFromLeftOrAbove
    End If
    'now prepare copy
    Set upperLeftCell = MTA.Range("MTA.CurrentDate.Field")
    Set lowerRightCell = MTA.Cells(MTA.Range("MTA.Milestonehistory.Table").row + (MTA.Range("MTA.Milestonehistory.Table").rows.Count - 1), MTA.Range("MTA.Dates").Column + (icountdates - 1))
    Set toBeCopied = MTA.Range(upperLeftCell, lowerRightCell)
    toBeCopied.Copy
    upperLeftCell.offset(0, 1).Select
    MTA.Paste
    'upperLeftCell.Offset(1, 1).value = "" 'delete the duplicated label
    MTA.Range("A1").Select 'cosmetic
End Sub

Private Sub SaveMilestoneHistory(statusdate As Date, Optional GetFromServer As Boolean = False)
    Dim GUID As Variant
    MTA.Range("MTA.CurrentDate.Field").value = statusdate ' = Cover.Range("Cover.StatusDate") 'Date
    If GetFromServer Then Exit Sub
    For Each GUID In Plan.GetMilestoneGuids
        UpdateOrAddMilestone (GUID)
    Next
End Sub

Private Sub UpdateOrAddMilestone(GUID As String)
    If MSExists(GUID) Then
        UpdateMilestone (GUID)
    Else
        AddMilestone (GUID)
    End If
End Sub

Private Function MSExists(GUID As String) As Boolean
    Dim R As Range
    Dim GUIDs As Range
    MSExists = False
    Set GUIDs = Intersect(MTA.Range("MTA.Milestonehistory.Table"), MTA.Range("MTA.GUID.Column"))
    For Each R In GUIDs
        If R.value = GUID Then
            MSExists = True
            Exit Function
        End If
    Next
End Function

Private Sub UpdateMilestone(GUID As String)
    Dim ms As TPGTask
    Dim GUIDs As Range
    Dim R As Range
    
    Set ms = New TPGTask
    ms.FindInPlanByUId GUID
    Set GUIDs = Intersect(MTA.Range("MTA.Milestonehistory.Table"), MTA.Range("MTA.GUID.Column"))
    For Each R In GUIDs
        If R.value = GUID Then
            R.offset(0, 1).value = ms.GetID
            R.offset(0, 4).value = ms.GetWBS
            R.offset(0, 5).value = ms.GetTaskName
            If ms.GetStartDate = 0 Then
                R.offset(0, 6).ClearContents
            Else
                R.offset(0, 6).value = ms.GetStartDate
            End If
            Exit Sub
        End If
    Next
End Sub

Private Sub AddMilestone(GUID As String)
    Dim ms As TPGTask
    Dim t As TPGTable
    
    Set ms = New TPGTask
    Set t = GetMTAHistoryTable
    
    ms.FindInPlanByUId GUID
    t.AddRow
    t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1).EntireRow.value = ""
    t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1).value = ms.GetUID
    t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 1).value = ms.GetID
    t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 2).value = 14277081
    t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 4).value = " " + ms.GetWBS
    t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 5).value = ms.GetTaskName
    If ms.GetStartDate = 0 Then
        t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 6).ClearContents
    Else
        t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 6).value = ms.GetStartDate
    End If
End Sub

Private Function GetDataRangeName() As String
    Dim rng As Range
    
    Set rng = MTA.Range("MTA.CurrentDate.Field").offset(0, -1).Resize(MTA.Range("MTA.Milestonehistory.Table").rows.Count - 1)
    GetDataRangeName = rng.Resize(ColumnSize:=GetLastStatusColumn - rng.Column + 1).Address
End Function

Private Function GetLastStatusColumn() As Integer
    Dim R As Range
    Dim rng As Range
    
    Set rng = MTA.Range(MTA.Range("MTA.CurrentDate.Field"), MTA.Cells(MTA.Range("MTA.CurrentDate.Field").row, MTA.Columns.Count))
    For Each R In rng
        If R.value = "" Then
            GetLastStatusColumn = R.Column - 1
            Exit Function
        End If
    Next
    GetLastStatusColumn = rng.Column
End Function

Private Sub FormatTable()
    Dim R As Range
    If GetMTAHistoryTableForExport.ValuesRange.rows.Count <= 1 Then Exit Sub
    Set R = GetMTAHistoryTableForExport.ValuesRange.Resize(GetMTAHistoryTableForExport.ValuesRange.rows.Count - 1, GetLastStatusColumn - 2).offset(1, 2)
    R.Font.Italic = False
    R.Borders(xlDiagonalDown).LineStyle = xlNone
    R.Borders(xlDiagonalUp).LineStyle = xlNone
    R.Borders(xlEdgeLeft).LineStyle = xlNone
    With R.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .Color = RGB(217, 217, 217)
    End With
    With R.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .Color = RGB(217, 217, 217)
    End With
    R.Borders(xlEdgeRight).LineStyle = xlNone
    R.Borders(xlInsideVertical).LineStyle = xlNone
    If R.rows.Count > 1 Then
        With R.Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .Color = RGB(217, 217, 217)
        End With
    End If
    R.Interior.Color = RGB(242, 242, 242)
    'FormatShowColumn Intersect(r, MTA.Range("MTA.Filter.Column"))
    SetMilestoneColors
    DeleteEmptyRows
End Sub

'Private Sub FormatShowColumn(r As Range)
'    With r.Validation
'        .Delete
'        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, operator:= _
'        xlBetween, Formula1:="=Config.SelectionList"
'        .IgnoreBlank = False
'        .InCellDropdown = True
'        .InputTitle = ""
'        .ErrorTitle = "Wert ung|fffd|ltig"
'        .InputMessage = ""
'        .ErrorMessage = "Wert ung|fffd|ltig"
'        .ShowInput = True
'        .ShowError = True
'    End With
'    With r.Interior
'        .Pattern = xlNone
'        If Application.Version = "12.0" Then
'            .TintAndShade = 0
'            .PatternTintAndShade = 0
'        End If
'    End With
'    r.locked = False
'    r.FormulaHidden = False
'    r.HorizontalAlignment = xlCenter
'End Sub


Private Sub DeleteEmptyRows()
    ' empty rows make trouble on chart creation
    Dim R As Range
    Dim rng As Range
    
    Set rng = Intersect(MTA.Range("MTA.Milestonehistory.Table"), MTA.Range("MTA.MSNames.Column")).Resize(MTA.Range("MTA.Milestonehistory.Table").rows.Count - 2).offset(1)
    If rng.rows.Count <= 1 Then Exit Sub ' never delete the last row
    For Each R In rng
        If R.value = "" Then R.EntireRow.Delete ' actually it is only the first empty row after resetting the table
    Next
End Sub


Private Sub SetMilestoneColors()
    Dim R As Range
    
    For Each R In Intersect(MTA.Range("MTA.ColorIndex.Column"), GetMTAHistoryTable.ValuesRange)
        R.offset(ColumnOffset:=2).Interior.Color = R.value
    Next
End Sub


Friend Function GetMTAHistoryTable() As TPGTable
    Dim t As New TPGTable
    t.SetTable MTA.Range("MTA.Milestonehistory.Table"), False, False, TemplateFirstrow, 1
    Set GetMTAHistoryTable = t
End Function

Friend Function GetMTAHistoryTable2() As TPGTable
    Dim t As New TPGTable
    t.SetTable MTA.Range("MTA.Table2"), False, False, TemplateFirstrow, 1
    Set GetMTAHistoryTable2 = t
End Function

Friend Function GetMTAHistoryTableForExport() As TPGTable
    Dim t As New TPGTable
    t.SetTable MTA.Range("MTA.Milestonehistory.Table").Resize(MTA.Range("MTA.Milestonehistory.Table").rows.Count + 1).offset(-1).EntireRow, False, False, TemplateFirstrow, 1
    Set GetMTAHistoryTableForExport = t
End Function

Private Function GetAllCols() As Collection
    Dim cols As New Collection
    Dim i As Integer
    
    i = 1
    Do While i <= 256
        If i >= MTA.Range("MTA.CurrentDate.Field").Column Then
            cols.Add GetTPGColumn("col" & i, i, DateColumn)
        Else
            cols.Add GetTPGColumn("col" & i, i)
        End If
        i = i + 1
    Loop
    Set GetAllCols = cols
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    Dim i As Integer
    Dim j As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "CreateXml"
    
    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    'we only export if we have dates
    If Me.Range("MTA.CurrentDate.Field").value = "-" Then
        Set CreateXml = n
        GoTo subend
    End If
    
    'first export dates
    Dim dnode As Variant
    Dim c As Range
    Set dnode = xmlDom.createNode(1, "dates", "")
    For Each c In Me.Range("MTA.Dates").Resize(1, Me.Range("MTA.Dates").Cells.Count - 1)
        If c.value <> "" Then
            AddNode xmlDom, dnode, "date", CastVarToString(c.value)
        Else
            Exit For
        End If
    Next
    n.appendchild dnode
    'now export rows (no tpgtable object here, because issues with insertrow...
    Dim tlist As TPGTokenizer
    Set tlist = New TPGTokenizer
    Dim datanode As Variant
    Dim rownode As Variant
    Set datanode = xmlDom.createNode(1, "data", "")
    For i = (Me.Range("MTA.Milestonehistory.Table").row + 1) To Me.Range("MTA.Milestonehistory.Table").row + (Me.Range("MTA.Milestonehistory.Table").rows.Count - 2)
        Set rownode = xmlDom.createNode(1, "row", "")
        AddNode xmlDom, rownode, "guid", Me.Cells(i, Me.Range("MTA.GUID.Column").Column).value
        AddNode xmlDom, rownode, "id", Me.Cells(i, Me.Range("MTA.ID.Column").Column).value
        AddNode xmlDom, rownode, "color", Me.Cells(i, Me.Range("MTA.ColorIndex.Column").Column).value
        AddNode xmlDom, rownode, "psp", Me.Cells(i, Me.Range("MTA.PSP.Column").Column).value
        AddNode xmlDom, rownode, "name", Me.Cells(i, Me.Range("MTA.MSNames.Column").Column).value
        'add all dates into tlist
        tlist.clear
        For Each c In Me.Range("MTA.Dates").Resize(1, Me.Range("MTA.Dates").Cells.Count - 1)
            If c.value <> "" Then
                tlist.Add CastVarToString(Me.Cells(i, c.Column))
            Else
                Exit For
            End If
        Next
        AddNode xmlDom, rownode, "dates", tlist.ToString
        datanode.appendchild rownode
        Set rownode = Nothing
    Next
    n.appendchild datanode
    Set CreateXml = n
    
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "MTA.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant)
    Dim n As Variant
    Dim i As Integer
    Dim j As Integer
    Dim idatecount As Integer
    Dim irowcount As Integer
    Dim t As TPGTable
    Dim tlist As TPGTokenizer
    
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "ImportXml"
    
    Me.reset
    If Not Node Is Nothing Then
        'first define nr of dates
        idatecount = Node.SelectNodes("dates/date").length
        'if needed add extra columns
        If idatecount > 4 Then
            For i = 5 To idatecount
                MTA.Range("MTA.Dates").offset(0, i - 1).Resize(1, 1).EntireColumn.Insert Shift:=xlToRight, copyOrigin:=xlFormatFromLeftOrAbove
            Next
        End If
        i = 1
        'import dates
        For Each n In Node.SelectNodes("dates/date")
            Me.Cells(MTA.Range("MTA.Dates").row, MTA.Range("MTA.CurrentDate.Field").Column + (i - 1)).value = CastStringToVar(n.Text)
            i = i + 1
        Next
        'if needed add extra rows
'        irowcount = Node.SelectNodes("data/row").length
'        If rowCount > 1 Then
'
'        End If
        'import rowdata
        i = 1
        Set t = GetMTAHistoryTable
        Set tlist = New TPGTokenizer
        For Each n In Node.SelectNodes("data/row")
            'if needed first add row
            If i > 1 Then
                t.AddRow
            End If
            t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1).value = CastStringToVar(n.SelectSingleNode("guid").Text)
            t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 1).value = CastStringToVar(n.SelectSingleNode("id").Text)
            t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 2).value = CastStringToVar(n.SelectSingleNode("color").Text)
            t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 4).value = n.SelectSingleNode("psp").Text
            t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 5).value = CastStringToVar(n.SelectSingleNode("name").Text)
            tlist.clear
            tlist.FromString n.SelectSingleNode("dates").Text
            For j = 1 To tlist.Count
                t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 5 + j).value = CastStringToVar(tlist.Item(j))
            Next
            i = i + 1
        Next
        FormatTable
        UpdateColorIndexColumn
        CreateChartFromScratch
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.ImportXml error:"
    Resume subend
End Sub


Public Sub ImportXmlSALK(Node As Variant)
    Dim n As Variant
    Dim i As Integer
    Dim j As Integer
    Dim idatecount As Integer
    Dim irowcount As Integer
    Dim t As TPGTable
    Dim tlist As TPGTokenizer
    
    
    
    Dim f As Variant, c As Variant, z As Integer, dCol As New Collection, d As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "ImportXmlSALK"
    
    Me.reset
    If Not Node Is Nothing Then
        'first define nr of dates
        
        Set f = Node.SelectSingleNode("milestones").FirstChild
        
        z = 0
        idatecount = 0
        If Not f Is Nothing Then

            For Each c In f.ChildNodes
                If z > 7 And Len(c.Text) > 0 Then
                    idatecount = idatecount + 1
                    dCol.Add c.Text
                End If
                z = z + 1
            Next
            
            
        End If
        
'        idatecount = Node.SelectNodes("dates/date").length
'        if needed add extra columns
        If dCol.Count > 4 Then
            For i = 5 To idatecount
                MTA.Range("MTA.Dates").offset(0, i - 1).Resize(1, 1).EntireColumn.Insert Shift:=xlToRight, copyOrigin:=xlFormatFromLeftOrAbove
            Next
        End If
        i = 1
        'import dates
        For Each d In dCol  'Node.SelectNodes("dates/date")
            Me.Cells(MTA.Range("MTA.Dates").row, MTA.Range("MTA.CurrentDate.Field").Column + (i - 1)).value = d
            i = i + 1
        Next
'        'if needed add extra rows
''        irowcount = Node.SelectNodes("data/row").length
''        If rowCount > 1 Then
''
''        End If
        'import rowdata
        i = 1
        Set t = GetMTAHistoryTable
        Set tlist = New TPGTokenizer
        For Each n In Node.SelectNodes("milestones/milestone") ' Node.SelectNodes("data/row")
            'if needed first add row
            
            'skip first row
            If i = 1 Then
                GoTo skipPlease
            End If
            
            If i > 2 Then
                t.AddRow
            End If
            
            t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1).value = n.SelectSingleNode("col3").Text
            t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 1).value = n.SelectSingleNode("col4").Text
            t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 2).value = n.SelectSingleNode("col5").Text
            t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 4).value = n.SelectSingleNode("col7").Text
            t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 5).value = n.SelectSingleNode("col8").Text
            'tlist.clear
            'tlist.FromString n.SelectSingleNode("dates").Text

            For j = 9 To 128
                If Not n.SelectSingleNode("col" & j) Is Nothing And Len(n.SelectSingleNode("col" & j).Text) > 0 Then
                    t.ValuesRange.Resize(1, 1).offset(t.ValuesRange.rows.Count - 1, 5 + j - 8).value = ConvertDateFormat(n.SelectSingleNode("col" & j).Text)
                End If
            Next
            
            
skipPlease:
 
            i = i + 1
            

        Next
        
        FormatTable
        UpdateColorIndexColumn
        CreateChartFromScratch
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.ImportXmlSALK error:"
    Resume subend
End Sub
'[AXDE] convert to local date format
Public Function ConvertDateFormat(d As String) As String
    Dim fDate As String
    Select Case Application.DecimalSeparator
    
    Case "."
        fDate = Format(Replace(d, ".", "/"), "mm/dd/yyyy") 'Replace(d, ".", "-")
    Case ","
        fDate = Format(Replace(d, "/", "."), "dd.mm.yyyy") 'Replace(d, "-", ".")
    Case Else
        fDate = d
    End Select
    ConvertDateFormat = fDate
End Function
Public Sub reset()
    Dim upperLeftCell As Range
    Dim lowerRightCell As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "Reset"
    UnprotectSheet MTA

    'delete chart
    If MTA.ChartObjects.Count > 0 Then MTA.ChartObjects(1).Delete

    MTA.Range("MTA.CurrentDate.Field").ClearContents
'    MTA.Range("MTA.FilterSetting.field").Value = 0
'    ApplyFilter
    GetMTAHistoryTable.clear
'    Set upperLeftCell = MTA.Range("MTA.CurrentDate.Field").offset(-2, 1)
'    Set lowerRightCell = MTA.Cells(MTA.Range("MTA.Milestonehistory.Table").row + MTA.Range("MTA.Milestonehistory.Table").rows.Count + 1, MTA.Cells.Columns.Count - 1)
'    MTA.Range(upperLeftCell, lowerRightCell).Delete
    
    'delete all added columns
    Do Until (MTA.Range("MTA.Dates").Cells.Count - 1) = 4
        MTA.Range("MTA.Dates").offset(0, (MTA.Range("MTA.Dates").Cells.Count - 2)).Resize(1, 1).EntireColumn.Delete
    Loop
    'clear contents
    MTA.Range("MTA.Dates").Resize(3, MTA.Range("MTA.Dates").Columns.Count - 1).ClearContents
    MTA.Range("MTA.CurrentDate.Field").value = "-"

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.Reset error:"
    Resume subend
End Sub

Public Sub cmdShowInvalid_Click()
    Dim Triangle As shape
    
    On Error GoTo suberr
    modStack.PushCallStack "MTA", "ShowInvalid"
    UnprotectSheet Me

    Set Triangle = Me.Shapes("Triangle")
    If Triangle.Fill.ForeColor.RGB = RGB(196, 196, 196) Then
        AdjustTriangleShape
    Else
        Me.Shapes("Triangle").ZOrder msoSendToBack
        Me.Shapes("Triangle").Fill.ForeColor.RGB = RGB(196, 196, 196)
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.ShowInvalid error:"
    Resume subend
    
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)

If (InRange(Target, Me.GetMTAHistoryTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildMTAContext
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub

Public Sub testcolor()
setMSTColor Me.Cells(41, 8)
End Sub

Public Sub setMSTColor(Target As Range)
'target has to be a valid MST row, and only one
Dim lcolor As Long

On Error GoTo suberr
modStack.PushCallStack "MTA", "setMSTColor"
    
lcolor = CLng(PickNewColor)
If lcolor > 0 Then
    Me.Cells(Target.row, Me.Range("MTA.ColorIndex.Column").Column).value = lcolor
    Me.Cells(Target.row, Me.Range("MTA.PSP.Column").Column).Interior.Color = lcolor
End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MTA.setMSTColor error:"
    Resume subend
End Sub


Attribute VB_Name = "Meeting"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
#If VBA7 Then
Private Declare PtrSafe Function GetTickCount Lib "kernel32" () As Long
#Else
Private Declare Function GetTickCount Lib "kernel32" () As Long
#End If
Private noupdate As Boolean
Public smeetingfilenamepdf As String

Private Sub Worksheet_Activate()
    On Error GoTo suberr
    'modStack.PushCallStack "Meeting", "Worksheet_Activate"
    ActiveSheet.UsedRange
    noupdate = False
    'when opening this sheet we make sure always to display invitation mode
    If Range("Meeting.Type") <> "Invitation" Then
        Me.cmdSetInvitation_Click
    End If
subend:
    'modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.Worksheet_Activate error:"
    Resume subend
End Sub

Public Sub cmdSendMail()

    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "cmdSendMail"

    Me.Range("Meeting.SendButton").Hyperlinks(1).Follow

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.cmdSendMail error:"
    Resume subend
End Sub

Public Sub SyncDecisions()
    Dim decisionsTable As TPGTable
    Dim c As Range
    Dim dataSource As Range
    Dim firstCycle As Boolean
    Dim i, j As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "SyncDecisions"

    noupdate = True
    Decisions.noupdate = True
    
    Set decisionsTable = GetDecisionsTable
    decisionsTable.clear
    i = 1
    firstCycle = True
    
    Set dataSource = Decisions.Range("Decisions.Table")
    For Each c In dataSource.Resize(dataSource.rows.Count - 2, 1).offset(1, 2)
        If c.value = Range("Meeting.Name").value And _
                c.offset(0, 1).value = Range("Meeting.Date").value And _
                Range("Meeting.Name").value <> "" And _
                Range("Meeting.Date").value <> "" Then
            If Not firstCycle Then
                decisionsTable.AddRow
            End If
            firstCycle = False
            For j = 2 To decisionsTable.ColumnsCount - 1
                Select Case j
                    Case 2:
                        decisionsTable.ValuesRange.Cells(i, j - 1).value = c.Cells(1, j + 5).value
                    Case 3:
                        decisionsTable.ValuesRange.Cells(i, j - 1).value = c.Cells(1, j).value
                    Case 4:
                        decisionsTable.ValuesRange.Cells(i, j).value = c.Cells(1, j).value
                        decisionsTable.Mergedfit decisionsTable.ValuesRange.Cells(i, j)
                    Case 5:
                        decisionsTable.ValuesRange.Cells(i, j).value = c.Cells(1, j).value
                    Case 6:
                        decisionsTable.ValuesRange.Cells(i, j + 1).value = c.Cells(1, j).value
                End Select
            
            Next j
            i = i + 1
        End If
    Next c
    
    Decisions.noupdate = False
    noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.SyncDecisions error:"
    Resume subend
End Sub

Public Function IsSelected() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "IsSelected"

    IsSelected = MeetingDetails.Range("A1").value <> 1

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Meeting.IsSelected error:"
    Resume subend
End Function

Public Sub SyncActions()
    Dim actionsTable As TPGTable
    Dim c As Range
    Dim dataSource As Range
    Dim firstCycle As Boolean
    Dim i, j As Integer
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "SyncActions"

    
    noupdate = True

    Set actionsTable = GetActionsTable
    actionsTable.clear
    i = 1
    firstCycle = True

    Set dataSource = Actions.Range("Actions.Table")
    For Each c In dataSource.Resize(dataSource.rows.Count - 2, 1).offset(1, 2)
        If c.value = Range("Meeting.Name").value And _
                c.offset(0, 1).value = Range("Meeting.Date").value And _
                Range("Meeting.Name").value <> "" And _
                Range("Meeting.Date").value <> "" Then
            If Not firstCycle Then
                actionsTable.AddRow
            End If
            firstCycle = False
            For j = 2 To actionsTable.ColumnsCount - 1
                Select Case j
                    Case 2:
                        actionsTable.ValuesRange.Cells(i, j - 1).value = c.Cells(1, j + 5).value
                    Case 3:
                        actionsTable.ValuesRange.Cells(i, j - 1).value = c.Cells(1, j).value
                    Case 4:
                        actionsTable.ValuesRange.Cells(i, j).value = c.Cells(1, j).value
                        actionsTable.Mergedfit actionsTable.ValuesRange.Cells(i, j)
                    Case 5:
                        actionsTable.ValuesRange.Cells(i, j).value = c.Cells(1, j).value
                    Case 6:
                        actionsTable.ValuesRange.Cells(i, j + 1).value = c.Cells(1, j).value
                End Select
            Next j
            i = i + 1
        End If
    Next c
    
    noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.SyncActions error:"
    Resume subend
End Sub


Public Sub cmdSave_Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "cmdSave_Click"
    
    If IsDemoVersion Then GoTo subend
    
    If VBA.Trim(Range("Meeting.Name").value) = "" Then
        AppStopMsg appGetLOCText("NoMeetingname")
        GoTo subend
    End If
    
    If appQOCMsg(appGetLOCText("SaveMeeting")) = vbCancel Then GoTo subend
    
    
    
    ResizeAndClearMeetingDetailsRange
    SaveSingleFields
    SaveAllTables
    'For setting start/finish time
    LoadAgenda
    
    If Not modRibbon.bnoRibbonUpdate Then modRibbon.RefreshRibbon
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.cmdSave_Click error:"
    Resume subend
End Sub

Private Sub SaveAllTables()
    Dim selectedColumn As Integer
    Dim selectedRow As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "SaveAllTables"

    selectedRow = MeetingDetails.Range("A1").value + 2
    'selectedRow = MeetingDetails.Range("MeetingDetails").rows.count + 2
    selectedColumn = 16
    
    SaveParticipantsTable selectedRow, selectedColumn
    SaveObjectivesTable selectedRow, selectedColumn
    SaveAgendaTable selectedRow, selectedColumn
    SaveDocumentsTable selectedRow, selectedColumn
    SaveDecisionsTable selectedRow, selectedColumn
    SaveTodosTable selectedRow, selectedColumn
    SaveInfoTable selectedRow, selectedColumn
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.SaveAllTables error:"
    Resume subend
End Sub
 
Private Sub SaveDocumentsTable(ByVal selectedRow As Integer, ByRef selectedColumn As Integer)
    Dim Count As Integer
    Dim R As Range

    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "SaveDocumentsTable"

    Count = 0
    For Each R In GetDocumentsTable.ValuesRange.Resize(GetDocumentsTable.ValuesRange.rows.Count, 1)
        If R.value <> "" Then
            Count = Count + 1
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn).value = R.value  'Document
            selectedColumn = selectedColumn + 1
        End If
    Next
    MeetingDetails.SetDocumentsCount (Count)

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.SaveDocumentsTable error:"
    Resume subend
End Sub

Private Sub SaveAgendaTable(selectedRow As Integer, ByRef selectedColumn As Integer)
    Dim Count As Integer
    Dim R As Range

    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "SaveAgendaTable"

    Count = 0
    For Each R In getRange(Me, "Meeting.Agenda.List", -3, 1, 2, 1)
        If (R.value <> "") And (R.value <> "|fffd|") Then
            Count = Count + 1
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn).value = R.value   'Topic
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 1).value = R.offset(0, 1).value  'Responsible
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 2).value = R.offset(0, 3).Text  'Duration
            selectedColumn = selectedColumn + 3
        ElseIf R.locked Then
            Count = Count + 1
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn).value = "[SUB]" + R.offset(0, 1).value   'Topic
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 1).value = R.offset(0, 3).value  'Responsible
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 2).value = R.offset(0, 5).Text  'Duration
            selectedColumn = selectedColumn + 3
        End If
    Next
    MeetingDetails.SetAgendaCount (Count)

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.SaveAgendaTable error:"
    Resume subend
End Sub


Private Sub SaveObjectivesTable(selectedRow As Integer, ByRef selectedColumn As Integer)
    Dim Count As Integer
    Dim R As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "SaveObjectivesTable"

    Count = 0
    For Each R In GetObjectivesTable.ValuesRange.Resize(GetObjectivesTable.ValuesRange.rows.Count, 1)
        If (R.value <> "") Or (R.offset(0, 1).value <> "") Or (R.offset(0, 2).value <> "") Then
            Count = Count + 1
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn).value = R.value  'Goal
            selectedColumn = selectedColumn + 1
        End If
    Next
    MeetingDetails.SetObjectivesCount (Count)

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.SaveObjectivesTable error:"
    Resume subend
End Sub

Private Sub SaveParticipantsTable(selectedRow As Integer, ByRef selectedColumn As Integer)
    Dim Count As Integer
    Dim R As Range
    Dim tlist As TPGTokenizer
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "SaveParticipantsTable"
    Set tlist = New TPGTokenizer
    Count = 0
    For Each R In GetParticipantsTable.ValuesRange.Resize(GetParticipantsTable.ValuesRange.rows.Count, 1)
        If R.value <> "" Then
            Count = Count + 1
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn).value = R.value  'Name
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 1).value = R.offset(0, 1).value 'orgunit
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 2).value = R.offset(0, 2).value 'remark
            tlist.clear
            tlist.Add R.offset(0, 3).value 'anwesend
            tlist.Add R.offset(0, 4).value 'entschuldigt
            tlist.Add R.offset(0, 5).value 'verteiler
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 3).value = tlist.ToString
            selectedColumn = selectedColumn + 4
        End If
    Next
    MeetingDetails.SetParticipantsCount Count

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.SaveParticipantsTable error:"
    Resume subend
End Sub

Private Sub SaveDecisionsTable(selectedRow As Integer, ByRef selectedColumn As Integer)
    Dim Count As Integer
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "SaveDecisionsTable"

    Count = 0
    For Each R In GetDecisionsTable.ValuesRange.Resize(GetDecisionsTable.ValuesRange.rows.Count, 1)
        If (R.value <> "") Or (R.offset(0, 1).value <> "") Or (R.offset(0, 2).value <> "") Then
            Count = Count + 1
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn).value = R.value  'status
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 1).value = R.offset(0, 1).value 'thema
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 2).value = R.offset(0, 3).value 'dec
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 3).value = R.offset(0, 4).value 'resp
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 4).value = CLng(R.offset(0, 6).value) 'date
            selectedColumn = selectedColumn + 5
        End If
    Next
    MeetingDetails.SetDecisionsCount Count

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.SaveDecisionsTable error:"
    Resume subend
End Sub

Private Sub SaveTodosTable(selectedRow As Integer, ByRef selectedColumn As Integer)
    Dim Count As Integer
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "SaveTodosTable"

    Count = 0
    For Each R In GetActionsTable.ValuesRange.Resize(GetActionsTable.ValuesRange.rows.Count, 1)
        If R.value <> "" Then
            Count = Count + 1
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn).value = R.value  'status
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 1).value = R.offset(0, 1).value 'thema
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 2).value = R.offset(0, 3).value 'todo
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 3).value = R.offset(0, 4).value 'resp
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 4).value = CLng(R.offset(0, 6).value) 'date
            selectedColumn = selectedColumn + 5
        End If
    Next
    MeetingDetails.SetTodosCount Count

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.SaveTodosTable error:"
    Resume subend
End Sub

Private Sub SaveInfoTable(selectedRow As Integer, ByRef selectedColumn As Integer)
    Dim Count As Integer
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "SaveInfoTable"

    Count = 0
    For Each R In GetInfoTable.ValuesRange.Resize(GetInfoTable.ValuesRange.rows.Count, 1)
        If (R.value <> "") Or (R.offset(0, 1).value <> "") Or (R.offset(0, 2).value <> "") Then
            Count = Count + 1
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn).value = R.value  'status
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 1).value = R.offset(0, 1).value 'thema
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 2).value = R.offset(0, 3).value 'info
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 3).value = R.offset(0, 4).value 'resp
            CellFunctions.CellsWrapped(MeetingDetails, selectedRow, selectedColumn + 4).value = CLng(R.offset(0, 6).value) 'date
            selectedColumn = selectedColumn + 5
        End If
    Next
    MeetingDetails.SetInfoCount Count

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.SaveInfoTable error:"
    Resume subend
End Sub

Private Function IsProtokoll() As Boolean
Dim c As Range
'it's a protokoll when todos, dec, notes registered
For Each c In Me.Range("Meeting.Decisions.List").offset(1, 3).Resize(Me.Range("Meeting.Decisions.List").rows.Count - 2, 1)
    If c.value <> "" Then
        IsProtokoll = True
        Exit For
    End If
Next
If Not IsProtokoll Then
    For Each c In Me.Range("Meeting.Actions.List").offset(1, 3).Resize(Me.Range("Meeting.Actions.List").rows.Count - 2, 1)
        If c.value <> "" Then
            IsProtokoll = True
            Exit For
        End If
    Next
End If
If Not IsProtokoll Then
    For Each c In Me.Range("Meeting.Info.List").offset(1, 3).Resize(Me.Range("Meeting.Info.List").rows.Count - 2, 1)
        If c.value <> "" Then
            IsProtokoll = True
            Exit For
        End If
    Next
End If
End Function

Private Sub SaveSingleFields()
    Dim selectedRow As Integer
    Dim s As String
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "SaveSingleFields"

    selectedRow = MeetingDetails.Range("A1").value + 2
    If IsProtokoll Then
        s = " (*)"
    Else
        s = ""
    End If
    'selectedRow = MeetingDetails.Range("MeetingDetails").rows.count + 2
    If VBA.Trim(Range("Meeting.Date").value) = "" Then
        CellFunctions.CellsWrapped(MeetingDetails, selectedRow, 1).value = Range("Meeting.Name").value & s
    Else
        CellFunctions.CellsWrapped(MeetingDetails, selectedRow, 1).value = Range("Meeting.Date").value & " " & Range("Meeting.Name").value & s
    End If
    CellFunctions.CellsWrapped(MeetingDetails, selectedRow, 2).value = Range("Meeting.Name").value
    CellFunctions.CellsWrapped(MeetingDetails, selectedRow, 3).value = Range("Meeting.Date").value
    
    CellFunctions.CellsWrapped(MeetingDetails, selectedRow, 4).value = Range("Meeting.StartTime").value
    CellFunctions.CellsWrapped(MeetingDetails, selectedRow, 5).value = Range("Meeting.EndTime").value
    
'    CellFunctions.CellsWrapped(MeetingDetails, selectedRow, 6).Value = Range("Meeting.Time").Value
    CellFunctions.CellsWrapped(MeetingDetails, selectedRow, 7).value = Range("Meeting.Location").value
    CellFunctions.CellsWrapped(MeetingDetails, selectedRow, 8).value = Range("Meeting.Start").Text

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.SaveSingleFields error:"
    Resume subend
End Sub

Private Sub ResizeAndClearMeetingDetailsRange()
    Dim R As Range
    Dim s As String
    Dim ir As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "ResizeAndClearMeetingDetailsRange"

    If VBA.Trim(Range("Meeting.Date").value) = "" Then
        Set R = MeetingDetails.Range("MeetingDetails").Find(Range("Meeting.Name").value, , xlValues, xlWhole, , , False)
        If R Is Nothing Then
            Set R = MeetingDetails.Range("MeetingDetails").Find(Range("Meeting.Name").value & " (*)", , xlValues, xlWhole, , , False)
        End If
    Else
        Set R = MeetingDetails.Range("MeetingDetails").Find(Range("Meeting.Date").value & " " & Range("Meeting.Name").value, , xlValues, xlWhole, , , False)
        If R Is Nothing Then
            Set R = MeetingDetails.Range("MeetingDetails").Find(Range("Meeting.Date").value & " " & Range("Meeting.Name").value & " (*)", , xlValues, xlWhole, , , False)
            If R Is Nothing Then
                Set R = MeetingDetails.Range("MeetingDetails").Find(Range("Meeting.Name").value & " (" & Range("Meeting.Date").value & ")", , xlValues, xlWhole, , , False)
                If R Is Nothing Then
                    Set R = MeetingDetails.Range("MeetingDetails").Find(Range("Meeting.Name").value, , xlValues, xlWhole, , , False)
                    If R Is Nothing Then
                        Set R = MeetingDetails.Range("MeetingDetails").Find(Range("Meeting.Name").value & " (*)", , xlValues, xlWhole, , , False)
                    End If
                End If
            End If
        End If
    End If
    
    If Not R Is Nothing Then
        ir = R.row
    Else
        Set R = MeetingDetails.Range("MeetingDetails")
        ir = R.row + R.rows.Count
        
        s = "=MeetingDetails!" & MeetingDetails.Range("MeetingDetails").Resize(MeetingDetails.Range("MeetingDetails").rows.Count + 1, 1).Address
        ThisWorkbook.Names("MeetingDetails").Delete
        ThisWorkbook.Names.Add "MeetingDetails", s
        
        If VBA.Trim(Range("Meeting.Date").value) = "" Then
            If ir > R.row + 1 Then
                RCut CellFunctions.CellsWrapped(MeetingDetails, ir, 1).EntireRow
                'CellFunctions.CellsWrapped(MeetingDetails, ir, 1).EntireRow.Cut
                CellFunctions.InsertWrapped MeetingDetails.Cells(R.row + 1, 1).EntireRow
                
                ir = R.row + 1
            End If
        End If
        MeetingDetails.Range("A1").value = ir - (MeetingDetails.Range("MeetingDetails").row - 1)
    End If
    MeetingDetails.Range(MeetingDetails.Cells(ir, 3), MeetingDetails.Cells(ir, Me.Columns.Count)).ClearContents

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.ResizeAndClearMeetingDetailsRange error:"
    Resume subend
End Sub

Public Sub cmdDeleteMeeting_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "cmdDeleteMeeting_Click"
    
    If IsDemoVersion Then GoTo subend
    
'    If MeetingDetails.Range("A1").value = 1 Then goto subend
    If Not IsSelected Then GoTo subend
    
    If appQOCMsg(appGetLOCText("DeleteMeeting")) = vbCancel Then GoTo subend
    
    
    MeetingDetails.Cells(MeetingDetails.selectedRow, 1).EntireRow.Delete
    Sheets("MeetingDetails").Range("A1").value = 1
    Load
    If Not modRibbon.bnoRibbonUpdate Then modRibbon.RefreshRibbon
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.cmdDeleteMeeting error:"
    Resume subend
End Sub

Public Sub cboMeeting_Changed()
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "cboMeeting_Changed"
    If IsDemoVersion Then GoTo subend
    Load
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.cboMeeting_Changed error:"
    Resume subend
End Sub

Private Sub Load()
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "Load"
    
    noupdate = True ' otherwise the change event makes problems when clearing tables
    reset
    LoadAllFields
    LoadAllTables
'    SyncDecisions
'    SyncActions
'    SyncInfo
    RefreshMeetingType True
    
subend:
    
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.Load error:"
    Resume subend
End Sub
 
Private Sub RefreshMeetingType(Optional bnosync As Boolean = False)
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "RefreshMeetingType"

    If Range("Meeting.Type") = "Invitation" Then
        cmdSetInvitation_Click
    Else
        cmdSetMinutes_Click bnosync
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.RefreshMeetingType error:"
    Resume subend
End Sub

Private Sub LoadAllTables()
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "LoadAllTables"

    LoadParticipants
    LoadObjectives
    LoadAgenda
    LoadDocuments
    LoadDecisions
    LoadTodos
    LoadInfo

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.LoadAllTables error:"
    Resume subend
End Sub

Private Sub LoadAllFields()
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "LoadAllFields"

    Range("Meeting.Name").value = MeetingDetails.Cells(MeetingDetails.selectedRow, 2).value
    Range("Meeting.Date").value = MeetingDetails.Cells(MeetingDetails.selectedRow, 3).value
    Range("Meeting.StartTime").value = MeetingDetails.Cells(MeetingDetails.selectedRow, 4).value
    Range("Meeting.EndTime").value = MeetingDetails.Cells(MeetingDetails.selectedRow, 5).value
'    Range("Meeting.Time").Value = MeetingDetails.Cells(MeetingDetails.selectedRow, 6).Value
    Range("Meeting.Location").value = MeetingDetails.Cells(MeetingDetails.selectedRow, 7).value
    Range("Meeting.Start").value = MeetingDetails.Cells(MeetingDetails.selectedRow, 8).value

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.LoadAllFields error:"
    Resume subend
End Sub

Public Sub cmdInsert_Click()
    Dim R As Range
    Dim s As String
    Dim ic1 As Integer
    Dim ic2 As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "cmdInsert_Click"
    
    If IsDemoVersion Then GoTo subend
    noupdate = True
    
    
    If GetParticipantsTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetObjectivesTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetDocumentsTable.InsertRow_Clicked(ActiveCell, False) Then GoTo subend
    
    s = "Meeting.Agenda.List"
    Set R = Application.Intersect(ActiveCell, Range(s))
    If Not R Is Nothing Then
        If ActiveCell.row > Range(s).Cells(3, 1).row Then
            ic1 = Range(s).Column
            ic2 = ic1 + 4
            'Range(s).Cells(4, 1).EntireRow.Copy
            RCopy Range(s).Cells(4, 1).EntireRow
            CellFunctions.InsertWrapped ActiveCell.EntireRow
            Range(Cells(ActiveCell.row, ic1 + 1), Cells(ActiveCell.row, ic2 + 2)).ClearContents
            Cells(ActiveCell.row, ic1 + 1).EntireRow.RowHeight = 16
            'we only set the formulas when needed
            If Not IsEmpty(Me.Range("Meeting.Start").offset(0, 2)) Then
                Cells(ActiveCell.row, ic1 + 5).FormulaR1C1 = "=R[-1]C[2]"
                If ActiveCell.row < Range(s).row + Range(s).rows.Count - 2 Then
                    Cells(ActiveCell.row + 1, ic1 + 5).FormulaR1C1 = "=R[-1]C[2]"
                End If
            End If
            'turn subitem into mainitem after paste
            If Cells(ActiveCell.row, ic1 + 1).locked Then
                Cells(ActiveCell.row, ic1 + 1).locked = False
                Meeting.Cells(ActiveCell.row, ic1 + 1).Font.Color = RGB(0, 0, 0)
                Meeting.Cells(ActiveCell.row, ic1 + 1).Font.Name = "Segoe UI"
                Meeting.Cells(ActiveCell.row, ic1 + 1).Font.Size = 9
                Meeting.Cells(ActiveCell.row, ic1 + 1).HorizontalAlignment = xlLeft
                Meeting.Cells(ActiveCell.row, ic1 + 1).VerticalAlignment = xlCenter
                Meeting.Cells(ActiveCell.row, ic1).Font.Color = Config_Lic.Range("Config.H1").Interior.Color
                Range(Cells(ActiveCell.row, ic1 + 2), Cells(ActiveCell.row, ic1 + 3)).UnMerge
                Range(Cells(ActiveCell.row, ic1 + 1), Cells(ActiveCell.row, ic1 + 3)).Merge
            End If
            GoTo subend
        End If
    End If

subend:
    
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.cmdInsert_Click error:"
    Resume subend
End Sub

Private Sub LoadAgenda()
    Dim i As Integer
    Dim iRow As Integer
    Dim s As String
    Dim current As Single
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "LoadAgenda"

    For i = Range("Meeting.Agenda.List").rows.Count - 3 To MeetingDetails.ActionsCount - 1
        TableAddRow Me, "Meeting.Agenda.List", 3
    Next
    
    For i = 1 To MeetingDetails.ActionsCount
        s = MeetingDetails.Cells(MeetingDetails.selectedRow, 16 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + ((i - 1) * 3)).value
        If Left(s, 5) = "[SUB]" Then
            s = Right(s, Len(s) - 5)
            iRow = Range("Meeting.Agenda.List").Cells(i + 2, 2).row
            Meeting.Range(Meeting.Cells(iRow, 4), Meeting.Cells(iRow, 6)).UnMerge
            Meeting.Range(Meeting.Cells(iRow, 5), Meeting.Cells(iRow, 6)).Merge
            Meeting.Cells(iRow, 5).value = s
            Meeting.Cells(iRow, 4).ClearContents
            Meeting.Cells(iRow, 4).value = "|fffd|"
            Meeting.Cells(iRow, 4).Font.Color = Config_Lic.Range("Config.H1").Interior.Color
            Meeting.Cells(iRow, 4).Font.Name = "Wingdings"
            Meeting.Cells(iRow, 4).Font.Size = 7
            Meeting.Cells(iRow, 4).HorizontalAlignment = xlRight
            Meeting.Cells(iRow, 4).VerticalAlignment = xlCenter
            Meeting.Cells(iRow, 4).locked = True
            Meeting.Cells(iRow, 3).Font.Color = RGB(255, 255, 255)
            current = AutoFitMergedCell(Meeting.Cells(iRow, 5), 16)
            If current > 0 Then Meeting.Cells(iRow, 5).EntireRow.RowHeight = current
            Range("Meeting.Agenda.List").Cells(i + 2, 5).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 17 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + ((i - 1) * 3)).value
            If i > 1 Then Range("Meeting.Agenda.List").Cells(i + 2, 6).formula = "=R[-1]C[2]"
            Range("Meeting.Agenda.List").Cells(i + 2, 7).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 18 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + ((i - 1) * 3)).value
            Range("Meeting.Agenda.List").Cells(i + 2, 8).formula = "=R[0]C[-2]+R[0]C[-1]"
        Else
            Range("Meeting.Agenda.List").Cells(i + 2, 2).value = s
            Range("Meeting.Agenda.List").Cells(i + 2, 5).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 17 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + ((i - 1) * 3)).value
            If i > 1 Then Range("Meeting.Agenda.List").Cells(i + 2, 6).formula = "=R[-1]C[2]"
            Range("Meeting.Agenda.List").Cells(i + 2, 7).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 18 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + ((i - 1) * 3)).value
            Range("Meeting.Agenda.List").Cells(i + 2, 8).formula = "=R[0]C[-2]+R[0]C[-1]"
            GetAgendaSubjectsTable.Mergedfit GetAgendaSubjectsTable.ValuesRange.Cells(i, 1)
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.LoadAgenda error:"
    Resume subend
End Sub


Private Sub LoadDocuments()
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "LoadDocuments"

    GetDocumentsTable.GrowUntil (MeetingDetails.DocumentsCount)
    For i = 1 To MeetingDetails.DocumentsCount
        GetDocumentsTable.ValuesRange.Cells(i, 1).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 16 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + (i - 1)).value
        GetDocumentsTable.Mergedfit GetDocumentsTable.ValuesRange.Cells(i, 1)
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.LoadDocuments error:"
    Resume subend
End Sub

Private Sub LoadParticipants()
    Dim i As Integer
    Dim tlist As TPGTokenizer
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "LoadParticipants"
    Set tlist = New TPGTokenizer
    GetParticipantsTable.GrowUntil (MeetingDetails.ParticipantsCount)
    For i = 1 To MeetingDetails.ParticipantsCount
        GetParticipantsTable.ValuesRange.Cells(i, 1).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 16 + ((i - 1) * 4)).value 'Name
        s = MeetingDetails.Cells(MeetingDetails.selectedRow, 19 + ((i - 1) * 4)).value 'anwesend,entschuldigt, verteiler
        tlist.clear
        tlist.FromString s
        If tlist.Count = 3 Then
            GetParticipantsTable.ValuesRange.Cells(i, 3).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 17 + ((i - 1) * 4)).value 'abteilung
            GetParticipantsTable.ValuesRange.Cells(i, 4).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 18 + ((i - 1) * 4)).value 'anmerkung
            If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
                'in case of KISS we have emailaddresses, so need to reset the formatting
                With GetParticipantsTable.ValuesRange.Cells(i, 4)
                    .Font.Name = "Segoe UI"
                    .Font.Size = 9
                    .Font.Color = RGB(0, 0, 0)
                    .Font.Underline = False
                End With
            End If
            GetParticipantsTable.ValuesRange.Cells(i, 5).value = tlist.Item(1)
            GetParticipantsTable.ValuesRange.Cells(i, 6).value = tlist.Item(2)
            GetParticipantsTable.ValuesRange.Cells(i, 7).value = tlist.Item(3)
        Else
            'old meetingdata
            GetParticipantsTable.ValuesRange.Cells(i, 3).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 18 + ((i - 1) * 4)).value 'abteilung
            GetParticipantsTable.ValuesRange.Cells(i, 4).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 19 + ((i - 1) * 4)).value 'anmerkung
            If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
                'in case of KISS we have emailaddresses, so need to reset the formatting
                With GetParticipantsTable.ValuesRange.Cells(i, 4)
                    .Font.Name = "Segoe UI"
                    .Font.Size = 9
                    .Font.Color = RGB(0, 0, 0)
                    .Font.Underline = False
                End With
            End If
        End If
        GetParticipantsTable.Mergedfit GetParticipantsTable.ValuesRange.Cells(i, 1)
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.LoadParticipants error:"
    Resume subend
End Sub

Private Sub LoadDecisions()
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "LoadDecisions"

    GetDecisionsTable.GrowUntil (MeetingDetails.DecisionsCount)
    For i = 1 To MeetingDetails.DecisionsCount
        GetDecisionsTable.ValuesRange.Cells(i, 1).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 16 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + ((i - 1) * 5)).value
        GetDecisionsTable.ValuesRange.Cells(i, 2).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 17 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + ((i - 1) * 5)).value
        GetDecisionsTable.ValuesRange.Cells(i, 4).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 18 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + ((i - 1) * 5)).value
        GetDecisionsTable.ValuesRange.Cells(i, 5).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 19 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + ((i - 1) * 5)).value
        If MeetingDetails.Cells(MeetingDetails.selectedRow, 20 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + ((i - 1) * 5)).value > 0 Then
            GetDecisionsTable.ValuesRange.Cells(i, 7).value = CDate(MeetingDetails.Cells(MeetingDetails.selectedRow, 20 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + ((i - 1) * 5)).value)
        End If
        GetDecisionsTable.Mergedfit GetDecisionsTable.ValuesRange.Cells(i, 1)
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.LoadDecisions error:"
    Resume subend
End Sub

Private Sub LoadTodos()
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "LoadTodos"

    GetActionsTable.GrowUntil (MeetingDetails.TodosCount)
    For i = 1 To MeetingDetails.TodosCount
        GetActionsTable.ValuesRange.Cells(i, 1).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 16 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + MeetingDetails.DecisionsCount * 5 + ((i - 1) * 5)).value
        GetActionsTable.ValuesRange.Cells(i, 2).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 17 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + MeetingDetails.DecisionsCount * 5 + ((i - 1) * 5)).value
        GetActionsTable.ValuesRange.Cells(i, 4).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 18 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + MeetingDetails.DecisionsCount * 5 + ((i - 1) * 5)).value
        GetActionsTable.ValuesRange.Cells(i, 5).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 19 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + MeetingDetails.DecisionsCount * 5 + ((i - 1) * 5)).value
        If MeetingDetails.Cells(MeetingDetails.selectedRow, 20 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + MeetingDetails.DecisionsCount * 5 + ((i - 1) * 5)).value > 0 Then
            GetActionsTable.ValuesRange.Cells(i, 7).value = CDate(MeetingDetails.Cells(MeetingDetails.selectedRow, 20 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + MeetingDetails.DecisionsCount * 5 + ((i - 1) * 5)).value)
        End If
        GetActionsTable.Mergedfit GetActionsTable.ValuesRange.Cells(i, 1)
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.LoadTodos error:"
    Resume subend
End Sub

Private Sub LoadInfo()
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "LoadInfo"

    GetInfoTable.GrowUntil (MeetingDetails.InfoCount)
    For i = 1 To MeetingDetails.InfoCount
        GetInfoTable.ValuesRange.Cells(i, 1).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 16 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + MeetingDetails.DecisionsCount * 5 + MeetingDetails.TodosCount * 5 + ((i - 1) * 5)).value
        GetInfoTable.ValuesRange.Cells(i, 2).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 17 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + MeetingDetails.DecisionsCount * 5 + MeetingDetails.TodosCount * 5 + ((i - 1) * 5)).value
        GetInfoTable.ValuesRange.Cells(i, 4).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 18 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + MeetingDetails.DecisionsCount * 5 + MeetingDetails.TodosCount * 5 + ((i - 1) * 5)).value
        GetInfoTable.ValuesRange.Cells(i, 5).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 19 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + MeetingDetails.DecisionsCount * 5 + MeetingDetails.TodosCount * 5 + ((i - 1) * 5)).value
        If MeetingDetails.Cells(MeetingDetails.selectedRow, 20 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + MeetingDetails.DecisionsCount * 5 + MeetingDetails.TodosCount * 5 + ((i - 1) * 5)).value > 0 Then
            GetInfoTable.ValuesRange.Cells(i, 7).value = CDate(MeetingDetails.Cells(MeetingDetails.selectedRow, 20 + MeetingDetails.ParticipantsCount * 4 + MeetingDetails.ObjectivesCount + MeetingDetails.ActionsCount * 3 + MeetingDetails.DocumentsCount + MeetingDetails.DecisionsCount * 5 + MeetingDetails.TodosCount * 5 + ((i - 1) * 5)).value)
        End If
        GetInfoTable.Mergedfit GetInfoTable.ValuesRange.Cells(i, 1)
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.LoadInfo error:"
    Resume subend
End Sub

Private Sub LoadObjectives()
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "LoadObjectives"

    GetObjectivesTable.GrowUntil (MeetingDetails.ObjectivesCount)
    For i = 1 To MeetingDetails.ObjectivesCount
        GetObjectivesTable.ValuesRange.Cells(i, 1).value = MeetingDetails.Cells(MeetingDetails.selectedRow, 16 + MeetingDetails.ParticipantsCount * 4 + (i - 1)).value
        GetObjectivesTable.Mergedfit GetObjectivesTable.ValuesRange.Cells(i, 1)
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.LoadObjectives error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    Dim R As Range
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "cmdDelete_Click"
    
    If IsDemoVersion Then GoTo subend
    
    
    
    If GetParticipantsTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    If GetObjectivesTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    noupdate = True
    If GetDocumentsTable.DeleteRow_Clicked(ActiveCell, False) Then GoTo subend
    noupdate = False
    
    s = "Meeting.Agenda.List"
    Set R = Application.Intersect(ActiveCell, Range(s))
    If Not R Is Nothing Then
        If Range(s).rows.Count > 5 And ActiveCell.row > Range(s).Cells(3, 1).row And ActiveCell.row < Range(s).Cells(Range(s).rows.Count, 1).row Then
            If appQOCMsg(appGetLOCText("DeleteRow")) = vbOK Then
                noupdate = True
                ActiveCell.EntireRow.Delete
                If ActiveCell.row < Range(s).row + Range(s).rows.Count - 1 Then
                    Cells(ActiveCell.row, Range(s).Column + 5).FormulaR1C1 = "=R[-1]C[2]"
                End If
                noupdate = False
            End If
            GoTo subend
        End If
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.cmdDelete_Click error:"
    Resume subend
End Sub

Public Sub ShowHideTimes()

    If IsDemoVersion Then Exit Sub
    If Meeting.Range("Meeting.Times").offset(-1, 0).Resize(1, 1).Font.Color = RGB(255, 255, 255) Then
        Me.cmdShowTimes_Click
    Else
        Me.cmdHideTimes_Click
    End If
End Sub

Public Sub cmdHideTimes_Click()
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "cmdHideTimes_Click"
    
    If IsDemoVersion Then GoTo subend

    s = "Meeting.Times"
    With Range(s).offset(-1, 0)
        .Font.Color = RGB(255, 255, 255)
        With .Interior
            .Pattern = xlNone
            '.TintAndShade = 0
            '.PatternTintAndShade = 0
        End With
    End With

subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.cmdHideTimes_Click error:"
    Resume subend
End Sub

Public Sub cmdShowTimes_Click()
    Dim s As String
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "cmdShowTimes_Click"
    
    If IsDemoVersion Then GoTo subend
    s = "Meeting.Times"
    Range(s).offset(-1, 0).Font.Color = RGB(89, 89, 89)
    
    For i = 2 To Range(s).Cells.Count - 3
        With Range(s).Cells(i)
            If .locked Then .Interior.Color = RGB(242, 242, 242)
        End With
    Next

subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.cmdShowTimes_Click error:"
    Resume subend
End Sub

Public Sub cmdUpdateDecActInfo_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "cmdUpdateDecActInfo_Click"
    Meeting.SyncActions
    Meeting.SyncDecisions
    Meeting.SyncInfo
    'make sure tables are hidden when invitation mode
    If Range("Meeting.Type") = "Invitation" Then
        GetDecisionsTable.Hide (2)
        GetActionsTable.Hide 2
        GetInfoTable.Hide 2
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.cmdUpdateDecActInfo_Click error:"
    Resume subend
End Sub
Public Sub cmdSetMinutes_Click(Optional bnosync As Boolean = False)
'    Dim c As Range
'    Dim r1 As Range
'    Dim r2 As Range
'    Dim i As Integer
'    Dim j As Integer
'    Dim d As Date
'    Dim b As Boolean
'    Dim table As New TPGTable
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "cmdSetMinutes_Click"
    
    If IsDemoVersion Then GoTo subend
    
'    If Not bnosync Then
'        Meeting.SyncActions
'        Meeting.SyncDecisions
'        Meeting.SyncInfo
'    End If
    
    Range("Meeting.Type") = "Minutes"
    
    GetDecisionsTable.Unhide 2
    GetActionsTable.Unhide 2
    GetInfoTable.Unhide 2
    
'    PrepareSendButton
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.cmdSetMinutes_Click error:"
    Resume subend
End Sub

Public Sub cmdSetInvitation_Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "cmdSetInvitation_Click"
    
    If IsDemoVersion Then GoTo subend
    
    

    Range("Meeting.Type") = "Invitation"
    GetDecisionsTable.Hide (2)
    GetActionsTable.Hide 2
    GetInfoTable.Hide 2
'    PrepareSendButton
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.cmdSetInvitation_Click error:"
    Resume subend
End Sub

Public Sub ddlDistributionList_Selected()
    Dim pCount As Integer
    Dim dlColumn As Integer
    Dim c As Range
    Dim R As Range
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "ddlDistributionList_Selected"
    
    
    If IsDemoVersion Then GoTo subend
    noupdate = True
    If Not appQOCMsg(appGetLOCText("ChangeDDL")) = vbOK Then GoTo subend
        
    'Clear table
    GetParticipantsTable.clear
    
    If Meeting.Range("Meeting.DL").value <= 1 Then GoTo subend
    
    dlColumn = Team.Range("Team.DLNames").Column + Range("Meeting.DL").value - 1
    Set R = Team.Range(Team.Cells(Team.Range("Team.TableHeader").row + 1, dlColumn), Team.Cells(Team.Range("Team.TableFooter").row - 1, dlColumn))
    
    'Count members in DL
    For Each c In R
        If c.value <> "" Then pCount = pCount + 1
    Next
    
    'Adjust needed rows
    GetParticipantsTable.GrowUntil (pCount)
    
    'Fill participants table
    i = 0
    For Each c In R
        If c.value <> "" Then
            i = i + 1
            GetParticipantsTable.ValuesRange.Cells(i, 1).value = Team.Cells(c.row, Team.Range("Team.NameColumn").Column).value
            GetParticipantsTable.ValuesRange.Cells(i, 1).offset(0, 1).value = Team.Cells(c.row, Team.Range("Team.DepartmentColumn").Column).value
            If Team.Cells(c.row, Team.Range("Team.EmailColumn").Column).value <> "" Then
                If InStr(Team.Cells(c.row, Team.Range("Team.EmailColumn").Column).value, "@") > 0 Then
                    GetParticipantsTable.ValuesRange.Cells(i, 1).offset(0, 5).value = "x"
                End If
            End If
        End If
    Next
'    PrepareSendButton

subend:
    
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.ddlDistributionList_Selected error:"
    Resume subend

End Sub

Function AppendText(ByRef s As String, Optional newline As String = "")
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "AppendText"

    s = s & vbCrLf & newline

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Meeting.AppendText error:"
    Resume subend
End Function

Public Sub clear()
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "Clear"

    
    
    MeetingDetails.Range("A1").value = 1
    Load
    
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.Clear error:"
    Resume subend
End Sub

Friend Function GetDecisionsTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "GetDecisionsTable"

    t.SetTable Me.Range("Meeting.Decisions.List"), False, False, TemplateFirstrow, 1, DefaultRowHeight:=14
    Set GetDecisionsTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Meeting.GetDecisionsTable error:"
    Resume subend
End Function

Friend Function GetAgendaSubjectsTable() As TPGTable
    ' This is only used for doing the MergedFit
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "GetAgendaSubjectsTable"

    t.SetTable Me.Range("Meeting.AgendaSubject.List"), False, False, TemplateFirstrow, 2, DefaultRowHeight:=14
    Set GetAgendaSubjectsTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Meeting.GetAgendaSubjectsTable error:"
    Resume subend
End Function

Friend Function GetDocumentsTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "GetDocumentsTable"

    t.SetTable Me.Range("Meeting.Documents.List"), False, False, TemplateFirstrow, 2, DefaultRowHeight:=14
    Set GetDocumentsTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Meeting.GetDocumentsTable error:"
    Resume subend
End Function

Public Function GetActionsTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "GetActionsTable"

    t.SetTable Me.Range("Meeting.Actions.List"), False, False, TemplateFirstrow, 1, DefaultRowHeight:=14
    Set GetActionsTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Meeting.GetActionsTable error:"
    Resume subend
End Function

Public Function GetInfoTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "GetInfoTable"

    t.SetTable Me.Range("Meeting.Info.List"), False, False, TemplateFirstrow, 1, DefaultRowHeight:=14
    Set GetInfoTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Meeting.GetInfoTable error:"
    Resume subend
End Function

Friend Function GetObjectivesTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "GetObjectivesTable"

    t.SetTable Me.Range("Meeting.Goals.List"), False, False, TemplateFirstrow, 2, DefaultRowHeight:=14
    Set GetObjectivesTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Meeting.GetObjectivesTable error:"
    Resume subend
End Function

Friend Function GetParticipantsTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "GetParticipantsTable"

    t.SetTable Me.Range("Meeting.Participants.List"), False, False, TemplateFirstrow, 2, DefaultRowHeight:=14
    Set GetParticipantsTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Meeting.GetParticipantsTable error:"
    Resume subend
End Function

'Private Sub PrepareSendButton()
'    Dim c As Range
'    Dim mailto As String
'    Dim mailAdress As String
'    Dim subject As String
'    Dim R As Range
'    Dim dlColumn As Integer
'
'    On Error GoTo suberr
'    modStack.PushCallStack "Meeting", "PrepareSendButton"
'
'    dlColumn = Team.Range("Team.DLNames").Column + Range("Meeting.DL").Value - 1
'    Set R = Team.Range(Team.Cells(Team.Range("Team.TableHeader").row + 1, dlColumn), Team.Cells(Team.Range("Team.TableFooter").row - 1, dlColumn))
'
'    mailto = "mailto:"
'    For Each c In R
'        mailAdress = Team.Cells(c.row, Team.Range("Team.EmailColumn").Column).Value
'        If c.Value <> "" And mailAdress <> "" Then
'            mailto = mailto & mailAdress & ";"
'        End If
'    Next
'
'    subject = appGetLOCText("SubjectMinutes")
'    If Meeting.Range("Meeting.Type") = "Invitation" Then
'        subject = appGetLOCText("SubjectInvitation")
'    End If
'    subject = subject & ", " & Meeting.Range("Meeting.Name") & ", " & Meeting.Range("Meeting.Date")
'
'    If Len(mailto) > 14 Then mailto = Left(mailto, Len(mailto) - 1)
'
'    Meeting.Hyperlinks.Add anchor:=Meeting.Range("Meeting.SendButton"), Address:= _
'        mailto & "?subject=" & subject, _
'        TextToDisplay:="Send"
'
'subend:
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "Meeting.PrepareSendButton error:"
'    Resume subend
'End Sub


Private Sub reset()
    Dim bupd As Boolean
    Dim R As Range
    Dim c
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "reset"

    Range("Meeting.Name").value = ""
    Range("Meeting.Date").value = ""
    Range("Meeting.StartTime").ClearContents
    Range("Meeting.EndTime").ClearContents
    Range("Meeting.Time").value = ""
    Range("Meeting.Location").value = ""
    
    GetObjectivesTable.clear
    GetActionsTable.clear
    GetDecisionsTable.clear
    GetParticipantsTable.clear
    GetDocumentsTable.clear
    GetInfoTable.clear
'    For Each c In getRange(Me, "Meeting.Agenda.List", -3, -1, 2, 1).Resize(, 1)
'        If Meeting.Cells(c.row, 3).MergeArea.Count > 1 Then
'        End If
'    Next
    getRange(Me, "Meeting.Agenda.List", -3, -1, 2, 1).ClearContents
    getRange(Me, "Meeting.Agenda.List", -3, -1, 2, 1).EntireRow.RowHeight = 16
    Do While Range("Meeting.Agenda.List").rows.Count > 6
        Cells(Range("Meeting.Agenda.List").row + Range("Meeting.Agenda.List").rows.Count - 2, 1).EntireRow.Delete
    Loop
    Set R = getRange(Me, "Meeting.Agenda.List", -4, 1, 3, 1)
    bupd = noupdate
    noupdate = True
    For Each c In R
        'convert subpionts into main points
        If c.locked Then
            c.locked = False
            c.Interior.Color = RGB(255, 255, 255)
            c.Font.Color = RGB(0, 0, 0)
            c.Font.Name = "Segoe UI"
            c.Font.Size = 9
            c.HorizontalAlignment = xlLeft
            c.VerticalAlignment = xlCenter
            c.offset(0, -1).Font.Color = Config_Lic.Range("Config.H1").Interior.Color
            Meeting.Range(Meeting.Cells(c.row, 5), Meeting.Cells(c.row, 6)).UnMerge
            Meeting.Range(Meeting.Cells(c.row, 4), Meeting.Cells(c.row, 6)).Merge
        End If
    Next
    noupdate = bupd
'        irow = Application.ActiveCell.Row
'        s = Meeting.Cells(irow, 4).Value
'        Meeting.Cells(irow, 4).MergeArea.ClearContents
'        Meeting.Cells(irow, 3).locked = False
'        Meeting.Cells(irow, 3).Interior.Color = RGB(255, 255, 255)
'        Meeting.Range(Meeting.Cells(irow, 4), Meeting.Cells(irow, 5)).UnMerge
'        Meeting.Range(Meeting.Cells(irow, 3), Meeting.Cells(irow, 5)).Merge
'        Meeting.Cells(irow, 3).Value = s
'        GetAgendaSubjectsTable.Mergedfit Meeting.Cells(irow, 3)
    
'    PrepareSendButton

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.reset error:"
    Resume subend
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
Dim R As Range

'when clicked in agenda subjectlist we give option to make sub/main item
Set R = Meeting.Range("Meeting.AgendaSubject.List").offset(2, 0).Resize(Meeting.Range("Meeting.AgendaSubject.List").rows.Count - 2)
If (InRange(Target, R)) And (Target.rows.Count = 1) Then
    If (Meeting.Cells(Target.row, 3).value = "|fffd|") And (Meeting.Cells(Target.row, 4).value <> "|fffd|") Then
        BuildMeetingAgendaContext True
    ElseIf (Meeting.Cells(Target.row, 5).value <> "") And (Meeting.Cells(Target.row, 4).value = "|fffd|") Then
        BuildMeetingAgendaContext False
    Else
        modContextMenu.BuildTableContext False, False
        'modContextMenu.RestoreDefaultMenu
    End If
ElseIf (Target.Areas.Count = 1) Then
    If (InRange(Target, Me.Range("Meeting.Agenda.List"))) Then
        BuildMeetingAgendaContext False, True
    ElseIf (InRange(Target, Me.Range("Meeting.Participants.List"))) Or (InRange(Target, Me.Range("Meeting.Goals.List"))) _
        Or (InRange(Target, Me.Range("Meeting.Documents.List"))) Then
        modContextMenu.BuildTableContext False, False
    Else
        modContextMenu.RestoreDefaultMenu
    End If
Else
    modContextMenu.RestoreDefaultMenu
End If

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo suberr
    Dim R As Range
    Dim current As Single
    
    If noupdate Then Exit Sub
    modStack.PushCallStack "Meeting", "Worksheet_Change"
    noupdate = True
    Set R = Meeting.Range("Meeting.AgendaSubject.List").offset(1, 0).Resize(Meeting.Range("Meeting.AgendaSubject.List").rows.Count - 2)
    'If changing meeting starttime  set agenda starttime
    If InRange(Target, Range("Meeting.StartTime")) Then
        Range("Meeting.Start").value = Range("Meeting.StartTime").value
    ElseIf (InRange(Target, R)) And (Target.rows.Count = 1) Then
        If Meeting.Cells(Target.row, 2).value = "|fffd|" Then
            GetAgendaSubjectsTable.Mergedfit Target
        'when we have a subitem in the agendalist then we need separate code for autofit
        Else
            current = AutoFitMergedCell(Target, 16)
            If current > 0 Then Target.EntireRow.RowHeight = current
        End If
    Else
        If GetParticipantsTable.Mergedfit(Target) Then
            'when entering an emailaddress in KISS we check 'verteiler'
            If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
                If InRange(Target, Meeting.GetParticipantsTable.ValuesRange(4)) Then
                    If InStr(Target, "@") > 0 Then
                        Target.Font.Name = "Segoe UI"
                        Target.Font.Size = 9
                        Target.Font.Color = RGB(0, 0, 0)
                        Target.Font.Underline = False
                        Meeting.Cells(Target.row, Target.Column + 3).value = "x"
                    Else
                        Meeting.Cells(Target.row, Target.Column + 3).ClearContents
                    End If
                End If
            End If
            GoTo subend
        End If
        If GetDocumentsTable.Mergedfit(Target) Then
            'also correct font (needed in case of hyperlink)
            Target.Font.Name = "Segoe UI"
            Target.Font.Size = 9
            GoTo subend
        End If
        If GetObjectivesTable.Mergedfit(Target) Then GoTo subend
        If GetActionsTable.Mergedfit(Target) Then GoTo subend
        If GetDecisionsTable.Mergedfit(Target) Then GoTo subend
        If GetInfoTable.Mergedfit(Target) Then GoTo subend
    End If

subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.Worksheet_Change error:"
    Resume subend
End Sub

Public Sub Rbn_MakeSubPoint()
Dim R As Range
If ActiveCell.rows.Count = 1 Then
    Set R = Meeting.Range("Meeting.AgendaSubject.List").offset(2, 0).Resize(Meeting.Range("Meeting.AgendaSubject.List").rows.Count - 2)
    If InRange(ActiveCell, R) Then
        If (Meeting.Cells(ActiveCell.row, 3).value = "|fffd|") And (Meeting.Cells(ActiveCell.row, 4).value <> "|fffd|") Then
            Meeting.UserAction_MakeSubPoint
        End If
    End If
End If
End Sub

Public Sub Rbn_MakeMainPoint()
Dim R As Range
If ActiveCell.rows.Count = 1 Then
    Set R = Meeting.Range("Meeting.AgendaSubject.List").offset(2, 0).Resize(Meeting.Range("Meeting.AgendaSubject.List").rows.Count - 2)
    If InRange(ActiveCell, R) Then
        If (Meeting.Cells(ActiveCell.row, 5).value <> "") And (Meeting.Cells(ActiveCell.row, 4).value = "|fffd|") Then
            Meeting.UserAction_MakeMainPoint
        End If
    End If
End If
End Sub

Public Sub UserAction_MakeSubPoint()
Dim iRow As Integer
Dim bupd As Boolean
Dim current As Single
Dim s As String
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "UserAction_MakeSubPoint"
    bupd = noupdate
    noupdate = True
    If (Application.selection.rows.Count = 1) Then
        iRow = Application.ActiveCell.row
        s = Application.selection.Cells(1, 1).value
        Application.selection.UnMerge
        Meeting.Range(Meeting.Cells(iRow, 5), Meeting.Cells(iRow, 6)).Merge
        Meeting.Cells(iRow, 5).value = s
        Meeting.Cells(iRow, 4).ClearContents
        Meeting.Cells(iRow, 4).value = "|fffd|"
        Meeting.Cells(iRow, 4).Font.Color = Config_Lic.Range("Config.H1").Interior.Color
        Meeting.Cells(iRow, 4).Font.Name = "Wingdings"
        Meeting.Cells(iRow, 4).Font.Size = 7
        Meeting.Cells(iRow, 4).HorizontalAlignment = xlRight
        Meeting.Cells(iRow, 4).VerticalAlignment = xlCenter
        Meeting.Cells(iRow, 4).locked = True
        'Meeting.Cells(irow, 4).Interior.Color = RGB(242, 242, 242)
        Meeting.Cells(iRow, 3).Font.Color = RGB(255, 255, 255)
        
        current = AutoFitMergedCell(Meeting.Cells(iRow, 5), 14)
        Meeting.Cells(iRow, 5).EntireRow.RowHeight = current
    End If

subend:
    noupdate = bupd
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.UserAction_MakeSubPoint error:"
    Resume subend
End Sub

Public Sub UserAction_MakeMainPoint()
Dim iRow As Integer
Dim s As String
Dim bupd As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "UserAction_MakeMainPoint"
    bupd = noupdate
    noupdate = True
    If (Application.selection.rows.Count = 1) Then
        iRow = Application.ActiveCell.row
        s = Meeting.Cells(iRow, 5).value
        Meeting.Cells(iRow, 5).MergeArea.ClearContents
        Meeting.Cells(iRow, 4).locked = False
        'Meeting.Cells(irow, 4).Interior.Color = RGB(255, 255, 255)
        Meeting.Cells(iRow, 4).Font.Color = RGB(0, 0, 0)
        Meeting.Cells(iRow, 4).Font.Name = "Segoe UI"
        Meeting.Cells(iRow, 4).Font.Size = 9
        Meeting.Cells(iRow, 4).HorizontalAlignment = xlLeft
        Meeting.Cells(iRow, 4).VerticalAlignment = xlCenter
        Meeting.Cells(iRow, 3).Font.Color = Config_Lic.Range("Config.H1").Interior.Color
        Meeting.Range(Meeting.Cells(iRow, 5), Meeting.Cells(iRow, 6)).UnMerge
        Meeting.Range(Meeting.Cells(iRow, 4), Meeting.Cells(iRow, 6)).Merge
        Meeting.Cells(iRow, 4).value = s
        GetAgendaSubjectsTable.Mergedfit Meeting.Cells(iRow, 4)
    End If

subend:
    noupdate = bupd
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.UserAction_MakeMainPoint error:"
    Resume subend
End Sub

Public Sub SendViaOutlook()

    Dim ref As References
    Dim rng As Range
    Dim OutApp As Object
    Dim OutMail As Object
    Dim c As Range
    Dim R As Range
    Dim subject As String
    Dim mailto As String
    Dim mailAdress As String
    Dim semailadr As String
    Dim dlColumn As Integer
    Dim sfilename As String

    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "Mail_Selection_Range_Outlook_Body"

'    sfilename = ActiveWorkbook.Path + "\" + appGetLOCText("minutes") + "_" & CStr(GetTickCount) & ".pdf"
    If Range("Meeting.Type") = "Minutes" Then
        sfilename = ActiveWorkbook.Path + "\" + appGetLOCText("minutes") + " "
    Else
        sfilename = ActiveWorkbook.Path + "\" + appGetLOCText("invitation") + " "
    End If
    
    If CStr(Meeting.Range("Meeting.Name").value) <> "" Then _
        sfilename = sfilename + CStr(Meeting.Range("Meeting.Name").value) + " "
    If CStr(Meeting.Range("Meeting.Date").value) <> "" Then _
        sfilename = sfilename + Trim(Replace(CStr(Meeting.Range("Meeting.Date").value), "/", "."))
    If Range("Meeting.Type") = "Minutes" Then
        If sfilename = ActiveWorkbook.Path + "\" + appGetLOCText("minutes") + " " Then
            sfilename = ActiveWorkbook.Path + "\" + appGetLOCText("minutes") & "_" & CStr(GetTickCount) & ".pdf"
        Else
            sfilename = sfilename + ".pdf"
        End If
    Else
        If sfilename = ActiveWorkbook.Path + "\" + appGetLOCText("invitation") + " " Then
            sfilename = ActiveWorkbook.Path + "\" + appGetLOCText("invitation") & "_" & CStr(GetTickCount) & ".pdf"
        Else
            sfilename = sfilename + ".pdf"
        End If
    End If
    
    Set R = Me.Range("Meeting.Participants")
    Set rng = Nothing
    On Error Resume Next
    'Only the visible cells in the selection
    If Range("Meeting.Type") = "Minutes" Then
        Set rng = Meeting.Range(Meeting.PageSetup.PrintArea)
    Else
        Set rng = Meeting.Range(Meeting.Cells(Meeting.Range(Meeting.PageSetup.PrintArea).row, Meeting.Range(Meeting.PageSetup.PrintArea).Column), _
                        Meeting.Cells(Meeting.Range("Meeting.InvitationMarker").row, Meeting.Range("Meeting.InvitationMarker").Column))
    End If

    On Error GoTo 0

    If rng Is Nothing Then
        MsgBox "The selection is not a range or the sheet is protected" & _
               vbNewLine & "please correct and try again.", vbOKOnly
        GoTo subend
    End If

    With Application
        .EnableEvents = False
        .ScreenUpdating = False
    End With

    'first create pdf
    Application.EnableEvents = False
    Me.ExportAsFixedFormat Type:=xlTypePDF, FileName:= _
        sfilename _
        , Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas _
        :=False, OpenAfterPublish:=False
    Me.Select
    Application.OnTime Now + TimeSerial(0, 0, 4), "modShapes.RearrangeControls"
    Application.EnableEvents = True
    smeetingfilenamepdf = sfilename

    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    For Each c In R
        If LCase(c.offset(0, 5).value) = "x" Then ''verteiler' has to be checked
            If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
                semailadr = Team.GetEmailAddress(c.value)
            Else
                'in KISS we take emailaddress from the email colum in the participants list (not from team sheet)
                If (InStr(c.offset(0, 2).value, "@") > 0) Then
                    semailadr = c.offset(0, 2).value
                Else
                    semailadr = ""
                End If
            End If
            If semailadr <> "" Then
'Debug.Print "addmail: " + semailadr
                mailto = mailto & semailadr & ";"
            End If
        End If
    Next

    subject = appGetLOCText("SubjectMinutes")
    If Meeting.Range("Meeting.Type") = "Invitation" Then
        subject = appGetLOCText("SubjectInvitation")
    End If
    subject = subject & ": " & Meeting.Range("Meeting.Name") & ", " & Meeting.Range("Meeting.Date")

    On Error Resume Next
    With OutMail
        .To = mailto
        .CC = ""
        .BCC = ""
        .BodyFormat = 2 'olFormatHTML
        .subject = subject
        .HTMLBody = RangetoHTML(rng)
        If Len(Dir$(sfilename)) > 0 Then
            .attachments.Add sfilename
        End If
        .display
    End With
    On Error GoTo 0

    With Application
        .EnableEvents = True
        .ScreenUpdating = True
    End With

    Set OutMail = Nothing
    Set OutApp = Nothing
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.Mail_Selection_Range_Outlook_Body error:", "Microsoft Outlook was not found."
    Resume subend
End Sub

Sub CreateAppt()
    Dim myoutlook As Object
    Dim myapt As Object
    Dim mailAdress As String
    Dim c As Variant
    Dim sfilename As String
    Dim raddresses As Range
    Dim rcontent As Range
    Dim dlColumn As Integer
    Dim semailadr As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "CreateAppt"
    
    If (Meeting.Range("Meeting.Date") = "") Or (Meeting.Range("Meeting.StartTime") = "") Then
        AppStopMsg (appGetLOCText("msgNoMeetingStart"))
        GoTo subend
    End If
    
'    sfilename = ActiveWorkbook.Path + "\" + appGetLOCText("invitation") & "_" & CStr(GetTickCount) & ".pdf"
    sfilename = ActiveWorkbook.Path + "\" + appGetLOCText("invitation") + " "
    
    If CStr(Meeting.Range("Meeting.Name").value) <> "" Then _
        sfilename = sfilename + CStr(Meeting.Range("Meeting.Name").value) + " "
    If CStr(Meeting.Range("Meeting.Date").value) <> "" Then _
        sfilename = sfilename + Trim(Replace(CStr(Meeting.Range("Meeting.Date").value), "/", "."))
    If sfilename = ActiveWorkbook.Path + "\" + appGetLOCText("invitation") + " " Then
        sfilename = ActiveWorkbook.Path + "\" + appGetLOCText("invitation") & "_" & CStr(GetTickCount) & ".pdf"
    Else
        sfilename = sfilename + ".pdf"
    End If
    
    Set raddresses = Me.Range("Meeting.Participants")
    
    Set rcontent = Nothing
    On Error Resume Next
    'Only the visible cells in the selection
    If Range("Meeting.Type") = "Minutes" Then
        Set rcontent = Meeting.Range(Meeting.PageSetup.PrintArea)
    Else
        Set rcontent = Meeting.Range(Meeting.Cells(Meeting.Range(Meeting.PageSetup.PrintArea).row, Meeting.Range(Meeting.PageSetup.PrintArea).Column), _
                        Meeting.Cells(Meeting.Range("Meeting.InvitationMarker").row, Meeting.Range("Meeting.InvitationMarker").Column))
    End If

    On Error GoTo 0

    If rcontent Is Nothing Then
        MsgBox "The selection is not a range or the sheet is protected" & _
               vbNewLine & "please correct and try again.", vbOKOnly
        GoTo subend
    End If
    
    With Application
        .EnableEvents = False
        .ScreenUpdating = False
    End With
    
    'first create pdf
    Application.EnableEvents = False
    Me.ExportAsFixedFormat Type:=xlTypePDF, FileName:= _
        sfilename _
        , Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas _
        :=False, OpenAfterPublish:=False
'    Application.OnTime Now + TimeSerial(0, 0, 4), "modShapes.RearrangeControls"
    Application.EnableEvents = True
    smeetingfilenamepdf = sfilename

    ' Create the Outlook session
    Set myoutlook = CreateObject("Outlook.Application")
    ' Create the AppointmentItem
    Set myapt = myoutlook.CreateItem(1)
    ' Set the appointment properties
    On Error Resume Next
    myapt.subject = appGetLOCText("SubjectInvitation") & ": " & Meeting.Range("Meeting.Name") & ", " & Meeting.Range("Meeting.Date")
    myapt.Location = Meeting.Range("Meeting.Location")
    myapt.Start = Meeting.Range("Meeting.Date") + Meeting.Range("Meeting.StartTime")
    For Each c In raddresses
        If LCase(c.offset(0, 5).value) = "x" Then ''verteiler' has to be checked
            If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
                semailadr = Team.GetEmailAddress(c.value)
            Else
                'in KISS we take emailaddress from the email colum in the participants list (not from team sheet)
                If (InStr(c.offset(0, 2).value, "@") > 0) Then
                    semailadr = c.offset(0, 2).value
                Else
                    semailadr = ""
                End If
            End If
            If semailadr <> "" Then
'Debug.Print "addmail: " + semailadr
                myapt.Recipients.Add semailadr
            End If
        End If
    Next
    
    myapt.MeetingStatus = 1
    myapt.BusyStatus = 2
    myapt.ReminderSet = False
    
    If Not IsEmpty(Me.Range("Meeting.Location")) Then myapt.Location = Me.Range("Meeting.Location").value
    If Not IsEmpty(Me.Range("Meeting.EndTime")) Then myapt.End = Meeting.Range("Meeting.Date") + Me.Range("Meeting.EndTime").value
    
    myapt.body = Meeting.Range("Meeting.Name")
    If Len(Dir$(sfilename)) > 0 Then
        myapt.attachments.Add sfilename
    Else
        AppInfoMsg appGetLOCText("msgPDFNotFound")
    End If
    myapt.display
    On Error GoTo 0

    With Application
        .EnableEvents = True
        .ScreenUpdating = True
    End With

    Set myapt = Nothing
    Set myoutlook = Nothing

subend:
    On Error Resume Next
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.CreateAppt:", err.Description
    Resume subend
End Sub

Private Function RangetoHTML(rng As Range)

    Dim fso As Object
    Dim ts As Object
    Dim TempFile As String
    Dim TempWB As Workbook

    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "RangetoHTML"

    TempFile = Environ$("temp") & "/" & Format(Now, "dd-mm-yy h-mm-ss") & ".htm"

    'Copy the range and create a new workbook to past the data in
    rng.Copy
    Set TempWB = Workbooks.Add(1)
    With TempWB.Sheets(1)
        .Cells(1).PasteSpecial Paste:=8
        .Cells(1).PasteSpecial xlPasteValues, , False, False
        .Cells(1).PasteSpecial xlPasteFormats, , False, False
        .Cells(1).Select
        Application.CutCopyMode = False
        On Error Resume Next
        .DrawingObjects.visible = True
        .DrawingObjects.Delete
        On Error GoTo 0
    End With

    'Publish the sheet to a htm file
    With TempWB.PublishObjects.Add( _
         SourceType:=xlSourceRange, _
         FileName:=TempFile, _
         Sheet:=TempWB.Sheets(1).Name, _
         source:=TempWB.Sheets(1).UsedRange.Address, _
         HtmlType:=xlHtmlStatic)
        .Publish (True)
    End With

    'Read all data from the htm file into RangetoHTML
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(TempFile).OpenAsTextStream(1, -2)
    RangetoHTML = ts.ReadAll
    ts.Close
    RangetoHTML = Replace(RangetoHTML, "align=center x:publishsource=", _
                          "align=left x:publishsource=")

    'Close TempWB
    TempWB.Close SaveChanges:=False

    'Delete the htm file we used in this function
    kill TempFile

    Set ts = Nothing
    Set fso = Nothing
    Set TempWB = Nothing

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Meeting.RangetoHTML error:"
    Resume subend
End Function

Public Sub SyncInfo()
    Dim infoTable As TPGTable
    Dim c As Range
    Dim dataSource As Range
    Dim firstCycle As Boolean
    Dim i, j As Integer
    On Error GoTo suberr
    modStack.PushCallStack "Meeting", "SyncActions"

    
    noupdate = True

    Set infoTable = GetInfoTable
    infoTable.clear
    i = 1
    firstCycle = True

    Set dataSource = Info.Range("Info.Table")
    For Each c In dataSource.Resize(dataSource.rows.Count - 2, 1).offset(1, 2)
        If c.value = Range("Meeting.Name").value And _
                c.offset(0, 1).value = Range("Meeting.Date").value And _
                Range("Meeting.Name").value <> "" And _
                Range("Meeting.Date").value <> "" Then
            If Not firstCycle Then
                infoTable.AddRow
            End If
            firstCycle = False
            For j = 2 To infoTable.ColumnsCount - 1
                Select Case j
                    Case 2:
                        infoTable.ValuesRange.Cells(i, j - 1).value = c.Cells(1, j + 5).value
                    Case 3:
                        infoTable.ValuesRange.Cells(i, j - 1).value = c.Cells(1, j).value
                    Case 4:
                        infoTable.ValuesRange.Cells(i, j).value = c.Cells(1, j).value
                        infoTable.Mergedfit infoTable.ValuesRange.Cells(i, j)
                    Case 5:
                        infoTable.ValuesRange.Cells(i, j).value = c.Cells(1, j).value
                    Case 6:
                        infoTable.ValuesRange.Cells(i, j + 1).value = c.Cells(1, j).value
                End Select
            Next j
            i = i + 1
        End If
    Next c
    
    noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Meeting.SyncInfo error:"
    Resume subend
End Sub

Attribute VB_Name = "MeetingDetails"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    Dim i As Integer
    Dim nrecord As Variant
    Dim c As Range
    Dim pCount As Integer
    Dim gCount As Integer
    Dim aCount As Integer
    Dim dCount As Integer
    Dim pnode As Variant
    Dim gNode As Variant
    Dim aNode As Variant
    Dim dnode As Variant
    Dim decCount As Integer
    Dim todCount As Integer
    Dim infCount As Integer
    Dim particpantNode As Variant
    Dim itemNode As Variant
    Dim decNode As Variant
    Dim todNode As Variant
    Dim infNode As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "MeetingDetails", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    
    For Each c In MeetingDetails.Range("MeetingDetails")
        If c.value <> "" Then
            Set nrecord = xmlDom.createNode(1, "meeting", "")
            AddNode xmlDom, nrecord, "id", c.value
            AddNode xmlDom, nrecord, "name", c.offset(0, 1).value
            AddNode xmlDom, nrecord, "date", c.offset(0, 2).value
            AddNode xmlDom, nrecord, "starttime", c.offset(0, 3).value
            AddNode xmlDom, nrecord, "endtime", c.offset(0, 4).value
'            AddNode xmlDom, nRecord, "time", c.offset(0, 5).Value
            AddNode xmlDom, nrecord, "location", c.offset(0, 6).value
            AddNode xmlDom, nrecord, "start", c.offset(0, 7).value
            pCount = c.offset(0, 8).value
            gCount = c.offset(0, 9).value
            aCount = c.offset(0, 10).value
            dCount = c.offset(0, 11).value
            decCount = c.offset(0, 12).value
            todCount = c.offset(0, 13).value
            infCount = c.offset(0, 14).value
            
            Set pnode = xmlDom.createNode(1, "participants", "")
            For i = 1 To pCount
                Set particpantNode = xmlDom.createNode(1, "participant", "")
                AddNode xmlDom, particpantNode, "name", c.offset(0, 15 + (i - 1) * 4).value
                AddNode xmlDom, particpantNode, "company", c.offset(0, 16 + (i - 1) * 4).value
                AddNode xmlDom, particpantNode, "department", c.offset(0, 17 + (i - 1) * 4).value
                AddNode xmlDom, particpantNode, "hint", c.offset(0, 18 + (i - 1) * 4).value
                pnode.appendchild particpantNode
            Next
            nrecord.appendchild pnode
        
            Set gNode = xmlDom.createNode(1, "goals", "")
            For i = 1 To gCount
                AddNode xmlDom, gNode, "goal", c.offset(0, 15 + pCount * 4 + (i - 1)).value
            Next
            nrecord.appendchild gNode
        
            Set aNode = xmlDom.createNode(1, "agenda", "")
            For i = 1 To aCount
                Set itemNode = xmlDom.createNode(1, "item", "")
                AddNode xmlDom, itemNode, "topic", c.offset(0, 15 + pCount * 4 + gCount + (i - 1) * 3).value
                AddNode xmlDom, itemNode, "responsible", c.offset(0, 16 + pCount * 4 + gCount + (i - 1) * 3).value
                AddNode xmlDom, itemNode, "duration", c.offset(0, 17 + pCount * 4 + gCount + (i - 1) * 3).value
                aNode.appendchild itemNode
            Next
            nrecord.appendchild aNode
            
            Set dnode = xmlDom.createNode(1, "documents", "")
            For i = 1 To dCount
                AddNode xmlDom, dnode, "document", c.offset(0, 15 + pCount * 4 + gCount + aCount * 3 + (i - 1)).value
            Next
            nrecord.appendchild dnode
            n.appendchild nrecord
            
            Set decNode = xmlDom.createNode(1, "decisions", "")
            For i = 1 To decCount
                Set particpantNode = xmlDom.createNode(1, "decision", "")
                AddNode xmlDom, particpantNode, "status", c.offset(0, 15 + pCount * 4 + gCount + aCount * 3 + dCount + (i - 1) * 5).value
                AddNode xmlDom, particpantNode, "subj", c.offset(0, 16 + pCount * 4 + gCount + aCount * 3 + dCount + (i - 1) * 5).value
                AddNode xmlDom, particpantNode, "dec", c.offset(0, 17 + pCount * 4 + gCount + aCount * 3 + dCount + (i - 1) * 5).value
                AddNode xmlDom, particpantNode, "resp", c.offset(0, 18 + pCount * 4 + gCount + aCount * 3 + dCount + (i - 1) * 5).value
                AddNode xmlDom, particpantNode, "date", c.offset(0, 19 + pCount * 4 + gCount + aCount * 3 + dCount + (i - 1) * 5).value
                decNode.appendchild particpantNode
            Next
            nrecord.appendchild decNode
            
            Set todNode = xmlDom.createNode(1, "todos", "")
            For i = 1 To todCount
                Set particpantNode = xmlDom.createNode(1, "todo", "")
                AddNode xmlDom, particpantNode, "status", c.offset(0, 15 + pCount * 4 + gCount + aCount * 3 + dCount + decCount * 5 + (i - 1) * 5).value
                AddNode xmlDom, particpantNode, "subj", c.offset(0, 16 + pCount * 4 + gCount + aCount * 3 + dCount + decCount * 5 + (i - 1) * 5).value
                AddNode xmlDom, particpantNode, "todo", c.offset(0, 17 + pCount * 4 + gCount + aCount * 3 + dCount + decCount * 5 + (i - 1) * 5).value
                AddNode xmlDom, particpantNode, "resp", c.offset(0, 18 + pCount * 4 + gCount + aCount * 3 + dCount + decCount * 5 + (i - 1) * 5).value
                AddNode xmlDom, particpantNode, "date", c.offset(0, 19 + pCount * 4 + gCount + aCount * 3 + dCount + decCount * 5 + (i - 1) * 5).value
                todNode.appendchild particpantNode
            Next
            nrecord.appendchild todNode
            
            Set infNode = xmlDom.createNode(1, "infos", "")
            For i = 1 To infCount
                Set particpantNode = xmlDom.createNode(1, "info", "")
                AddNode xmlDom, particpantNode, "status", c.offset(0, 15 + pCount * 4 + gCount + aCount * 3 + dCount + decCount * 5 + todCount * 5 + (i - 1) * 5).value
                AddNode xmlDom, particpantNode, "subj", c.offset(0, 16 + pCount * 4 + gCount + aCount * 3 + dCount + decCount * 5 + todCount * 5 + (i - 1) * 5).value
                AddNode xmlDom, particpantNode, "info", c.offset(0, 17 + pCount * 4 + gCount + aCount * 3 + dCount + decCount * 5 + todCount * 5 + (i - 1) * 5).value
                AddNode xmlDom, particpantNode, "resp", c.offset(0, 18 + pCount * 4 + gCount + aCount * 3 + dCount + decCount * 5 + todCount * 5 + (i - 1) * 5).value
                AddNode xmlDom, particpantNode, "date", c.offset(0, 19 + pCount * 4 + gCount + aCount * 3 + dCount + decCount * 5 + todCount * 5 + (i - 1) * 5).value
                infNode.appendchild particpantNode
            Next
            nrecord.appendchild infNode
            
        End If
    Next
    Set CreateXml = n

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "MeetingDetails.CreateXml error:"
    Resume subend
End Function

Sub testxml()

    On Error GoTo suberr
    modStack.PushCallStack "MeetingDetails", "testxml"

'    this.XML.AppendObject Me
'    this.XML.SaveAs
    
    this.xml.OpenFile
    this.xml.WriteTo Me

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MeetingDetails.testxml error:"
    Resume subend
End Sub

'Public Function SetSelectedRow(index As Integer)
'    MeetingDetails.Range("A1").value = index
'End Function

Public Function selectedRow() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "MeetingDetails", "selectedRow"

    selectedRow = MeetingDetails.Range("MeetingDetails").row + MeetingDetails.Range("A1").value - 1

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "MeetingDetails.selectedRow error:"
    Resume subend
End Function

Public Function SetParticipantsCount(Count As Integer)
'    On Error GoTo SubErr
'    modStack.PushCallStack "MeetingDetails", "SetParticipantsCount"
    MeetingDetails.Cells(selectedRow, 9).value = Count
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "MeetingDetails.SetParticipantsCount error:"
'    Resume SubEnd
End Function

Public Function SetDecisionsCount(Count As Integer)
'    On Error GoTo SubErr
'    modStack.PushCallStack "MeetingDetails", "SetDecisionsCount"
    MeetingDetails.Cells(selectedRow, 13).value = Count
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "MeetingDetails.SetDecisionsCount error:"
'    Resume SubEnd
End Function

Public Function SetTodosCount(Count As Integer)
'    On Error GoTo SubErr
'    modStack.PushCallStack "MeetingDetails", "SetActionsCount"
    MeetingDetails.Cells(selectedRow, 14).value = Count
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "MeetingDetails.SetActionsCount error:"
'    Resume SubEnd
End Function

Public Function SetInfoCount(Count As Integer)
'    On Error GoTo SubErr
'    modStack.PushCallStack "MeetingDetails", "SetInfoCount"
    MeetingDetails.Cells(selectedRow, 15).value = Count
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "MeetingDetails.SetInfoCount error:"
'    Resume SubEnd
End Function

Public Function ParticipantsCount() As Integer
'    On Error GoTo SubErr
'    modStack.PushCallStack "MeetingDetails", "ParticipantsCount"
    ParticipantsCount = MeetingDetails.Cells(selectedRow, 9).value
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "MeetingDetails.ParticipantsCount error:"
'    Resume SubEnd
End Function

Public Function DecisionsCount() As Integer
'    On Error GoTo SubErr
'    modStack.PushCallStack "MeetingDetails", "DecisionsCount"
    DecisionsCount = MeetingDetails.Cells(selectedRow, 13).value
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "MeetingDetails.DecisionsCount error:"
'    Resume SubEnd
End Function

Public Function TodosCount() As Integer
'    On Error GoTo SubErr
'    modStack.PushCallStack "MeetingDetails", "TodosCount"
    TodosCount = MeetingDetails.Cells(selectedRow, 14).value
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "MeetingDetails.TodosCount error:"
'    Resume SubEnd
End Function

Public Function InfoCount() As Integer
'    On Error GoTo SubErr
'    modStack.PushCallStack "MeetingDetails", "InfoCount"
    InfoCount = MeetingDetails.Cells(selectedRow, 15).value
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "MeetingDetails.InfoCount error:"
'    Resume SubEnd
End Function

Public Function ObjectivesCount() As Integer
'    On Error GoTo SubErr
'    modStack.PushCallStack "MeetingDetails", "ObjectivesCount"
    ObjectivesCount = MeetingDetails.Cells(selectedRow, 10).value
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "MeetingDetails.ObjectivesCount error:"
'    Resume SubEnd
End Function

Public Function SetObjectivesCount(Count As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "MeetingDetails", "SetObjectivesCount"

    MeetingDetails.Cells(selectedRow, 10).value = Count

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "MeetingDetails.SetObjectivesCount error:"
    Resume subend
End Function

Public Function ActionsCount() As Integer
'    On Error GoTo SubErr
'    modStack.PushCallStack "MeetingDetails", "ActionsCount"
    ActionsCount = MeetingDetails.Cells(selectedRow, 11).value
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "MeetingDetails.ActionsCount error:"
'    Resume SubEnd
End Function

Public Function SetActionsCount(Count As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "MeetingDetails", "SetActionsCount"

    MeetingDetails.Cells(selectedRow, 11).value = Count

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "MeetingDetails.SetActionsCount error:"
    Resume subend
End Function

Public Function DocumentsCount() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "MeetingDetails", "DocumentsCount"

    DocumentsCount = MeetingDetails.Cells(selectedRow, 12).value

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "MeetingDetails.DocumentsCount error:"
    Resume subend
End Function

Public Function SetDocumentsCount(Count As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "MeetingDetails", "SetDocumentsCount"

    MeetingDetails.Cells(selectedRow, 12).value = Count

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "MeetingDetails.SetDocumentsCount error:"
    Resume subend
End Function

Public Function AgendaCount() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "MeetingDetails", "AgendaCount"

    AgendaCount = MeetingDetails.Cells(selectedRow, 11).value

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "MeetingDetails.AgendaCount error:"
    Resume subend
End Function

Public Function SetAgendaCount(Count As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "MeetingDetails", "SetAgendaCount"

    MeetingDetails.Cells(selectedRow, 11).value = Count

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "MeetingDetails.SetAgendaCount error:"
    Resume subend
End Function


Public Sub ImportXml(Node As Variant)
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim l As Integer
    Dim m As Integer
    Dim x As Integer
    Dim y As Integer
    Dim z As Integer
    Dim n As Variant
    Dim c As Range
    Dim s As String
    Dim detailNode As Variant
    Dim bimportdec As Boolean
    
    On Error GoTo suberr
    modStack.PushCallStack "MeetingDetails", "ImportXml"

    If Not Node Is Nothing Then
        
        reset
        
        i = 0
        For Each n In Node.SelectNodes("meeting")
            i = i + 1
            Set c = getRange(Me, "MeetingDetails", 1, 1, i, 0)
            c.value = n.SelectSingleNode("id").Text
            c.offset(0, 1).value = n.SelectSingleNode("name").Text
            SetXMLValue c.offset(0, 2), n.SelectSingleNode("date").Text
            If Not n.SelectSingleNode("starttime") Is Nothing Then
                SetXMLValue c.offset(0, 3), n.SelectSingleNode("starttime").Text
                SetXMLValue c.offset(0, 4), n.SelectSingleNode("endtime").Text
            ElseIf Not n.SelectSingleNode("time") Is Nothing Then
                SetXMLValue c.offset(0, 3), n.SelectSingleNode("time").Text
            End If
            c.offset(0, 6).value = n.SelectSingleNode("location").Text
            SetXMLValue c.offset(0, 7), n.SelectSingleNode("start").Text
            
            c.offset(0, 8).value = n.SelectNodes("participants/participant").length
            c.offset(0, 9).value = n.SelectNodes("goals/goal").length
            c.offset(0, 10).value = n.SelectNodes("agenda/item").length
            c.offset(0, 11).value = n.SelectNodes("documents/document").length
            
            If Not n.SelectSingleNode("decisions") Is Nothing Then
                c.offset(0, 12).value = n.SelectNodes("decisions/decision").length
                c.offset(0, 13).value = n.SelectNodes("todos/todo").length
                c.offset(0, 14).value = n.SelectNodes("infos/info").length
                bimportdec = True
            Else
                c.offset(0, 12).value = 0
                c.offset(0, 13).value = 0
                c.offset(0, 14).value = 0
                bimportdec = False
            End If
            
            j = 0
            For Each detailNode In n.SelectNodes("participants/participant")
               j = j + 1
               c.offset(0, 15 + (j - 1) * 4).value = detailNode.SelectSingleNode("name").Text
               c.offset(0, 16 + (j - 1) * 4).value = detailNode.SelectSingleNode("company").Text
               c.offset(0, 17 + (j - 1) * 4).value = detailNode.SelectSingleNode("department").Text
               c.offset(0, 18 + (j - 1) * 4).value = detailNode.SelectSingleNode("hint").Text
            Next
            
            k = 0
            For Each detailNode In n.SelectNodes("goals/goal")
               k = k + 1
               c.offset(0, 15 + j * 4 + (k - 1)).value = detailNode.Text
            Next
            
            l = 0
            For Each detailNode In n.SelectNodes("agenda/item")
               l = l + 1
               c.offset(0, 15 + j * 4 + k + (l - 1) * 3).value = detailNode.SelectSingleNode("topic").Text
               c.offset(0, 16 + j * 4 + k + (l - 1) * 3).value = detailNode.SelectSingleNode("responsible").Text
               SetDateValue c.offset(0, 17 + j * 4 + k + (l - 1) * 3), detailNode.SelectSingleNode("duration").Text
            Next

            m = 0
            For Each detailNode In n.SelectNodes("documents/document")
               m = m + 1
               c.offset(0, 15 + j * 4 + k + l * 3 + (m - 1)).value = detailNode.Text
            Next
            
            If bimportdec Then
                x = 0
                For Each detailNode In n.SelectNodes("decisions/decision")
                   x = x + 1
                   c.offset(0, 15 + j * 4 + k + l * 3 + m + (x - 1) * 5).value = detailNode.SelectSingleNode("status").Text
                   c.offset(0, 16 + j * 4 + k + l * 3 + m + (x - 1) * 5).value = detailNode.SelectSingleNode("subj").Text
                   c.offset(0, 17 + j * 4 + k + l * 3 + m + (x - 1) * 5).value = detailNode.SelectSingleNode("dec").Text
                   c.offset(0, 18 + j * 4 + k + l * 3 + m + (x - 1) * 5).value = detailNode.SelectSingleNode("resp").Text
                   c.offset(0, 19 + j * 4 + k + l * 3 + m + (x - 1) * 5).value = CastStringToVar(detailNode.SelectSingleNode("date").Text)
                Next
                
                y = 0
                For Each detailNode In n.SelectNodes("todos/todo")
                   y = y + 1
                   c.offset(0, 15 + j * 4 + k + l * 3 + m + x * 5 + (y - 1) * 5).value = detailNode.SelectSingleNode("status").Text
                   c.offset(0, 16 + j * 4 + k + l * 3 + m + x * 5 + (y - 1) * 5).value = detailNode.SelectSingleNode("subj").Text
                   c.offset(0, 17 + j * 4 + k + l * 3 + m + x * 5 + (y - 1) * 5).value = detailNode.SelectSingleNode("todo").Text
                   c.offset(0, 18 + j * 4 + k + l * 3 + m + x * 5 + (y - 1) * 5).value = detailNode.SelectSingleNode("resp").Text
                   c.offset(0, 19 + j * 4 + k + l * 3 + m + x * 5 + (y - 1) * 5).value = CastStringToVar(detailNode.SelectSingleNode("date").Text)
                Next
                
                z = 0
                For Each detailNode In n.SelectNodes("infos/info")
                   y = y + 1
                   c.offset(0, 15 + j * 4 + k + l * 3 + m + x * 5 + y * 5 + (z - 1) * 5).value = detailNode.SelectSingleNode("status").Text
                   c.offset(0, 16 + j * 4 + k + l * 3 + m + x * 5 + y * 5 + (z - 1) * 5).value = detailNode.SelectSingleNode("subj").Text
                   c.offset(0, 17 + j * 4 + k + l * 3 + m + x * 5 + y * 5 + (z - 1) * 5).value = detailNode.SelectSingleNode("info").Text
                   c.offset(0, 18 + j * 4 + k + l * 3 + m + x * 5 + y * 5 + (z - 1) * 5).value = detailNode.SelectSingleNode("resp").Text
                   c.offset(0, 19 + j * 4 + k + l * 3 + m + x * 5 + y * 5 + (z - 1) * 5).value = CastStringToVar(detailNode.SelectSingleNode("date").Text)
                Next
                
            End If
            
        Next
        s = Me.Range("MeetingDetails").Resize(i + 1).Address
        Application.Names("MeetingDetails").Delete
        Application.Names.Add "MeetingDetails", "=MeetingDetails!" & s
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MeetingDetails.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "MeetingDetails", "reset"

    If Me.Range("MeetingDetails").rows.Count > 1 Then
        getRange(Me, "MeetingDetails", -1, 0, 1, 0).EntireRow.Delete
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "MeetingDetails.reset error:"
    Resume subend
End Sub

Attribute VB_Name = "NewTemplateSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Plan"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public noupdate As Boolean
Private CutWP_Id As String
Private CopyWP_Id As String

Enum WPDelActionType
'see frmReScheduler to match
    Cancelled = 1
    Confirmed = 2
    NoRelations = 3
End Enum

'Added for WP Relations
Private pDeleteTask As WPDelActionType
Public Property Let DeleteTask(value As WPDelActionType):     pDeleteTask = value:                End Property



Private Sub Worksheet_Activate()
    ActiveSheet.UsedRange
    Application.CutCopyMode = False
    If Cover.Range("Cover.Weighting").value = "x" Then
        Me.Range("Plan.WeightingColumn").EntireColumn.Hidden = False
    Else
        Me.Range("Plan.WeightingColumn").EntireColumn.Hidden = True
    End If
End Sub

Public Function IsBaselineSet() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "IsBaselineSet"

    IsBaselineSet = (Plan.Range("Plan.BaselineSaveDate").value = "")
    
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Plan.IsBaselineSet error:"
    Resume subend
End Function


Private Sub MoveTaskRange(days As Integer)
    Dim Table As TPGTable
    Dim R As Integer
    Dim rFirst As Long
    Dim rLast As Long
    Dim task As TPGTask
    Dim hasFormula As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "MoveTaskRange"

    hasFormula = False
    
    Set Table = New TPGTable
    Set task = New TPGTask
    
    rFirst = selection.row
    If rFirst < Plan.Range("Plan.ProjectHeader").row + 1 Then rFirst = Plan.Range("Plan.ProjectHeader").row + 1
    
    rLast = selection.row + selection.rows.Count - 1
    If rLast > Plan.Range("Plan.ProjectFooter").row - 1 Then rLast = Plan.Range("Plan.ProjectFooter").row - 1
    
    
    For R = rFirst To rLast
        task.SetIndex R
        If task.MoveDates(days) Then hasFormula = True
    Next
    If hasFormula Then AppInfoMsg (appGetLOCText("AreaContainsFormula"))
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.MoveTaskRange error:"
    Resume subend
End Sub

'Private Sub AdjustWPDropdownRange()
'    ' This has to be called after import and whenever a task gets created, deleted or moved up or down
'    Dim s As String
'
'    s = "=Plan!" & ThisWorkbook.Names("Plan.WPs").RefersToRange.Resize(ThisWorkbook.Names("Plan.WPs").RefersToRange.rows.count - 2, 1).Offset(1, 0).AddressLocal
'    ThisWorkbook.Names("Plan.WPDropdownList").Delete
'    ThisWorkbook.Names.Add "Plan.WPDropdownList", s
'End Sub

Public Sub cmdPlus1Day_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "cmdPlus1Day_Click"

    MoveTaskRange (1)

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.cmdPlus1Day_Click error:"
    Resume subend
End Sub

Public Sub cmdPlus1Week_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "cmdPlus1Week_Click"

    MoveTaskRange (7)

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.cmdPlus1Week_Click error:"
    Resume subend
End Sub

Public Sub cmdMinus1Day_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "cmdMinus1Day_Click"

    MoveTaskRange (-1)

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.cmdMinus1Day_Click error:"
    Resume subend
End Sub

Public Sub cmdMinus1Week_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "cmdMinus1Week_Click"

    MoveTaskRange (-7)

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.cmdMinus1Week_Click error:"
    Resume subend
End Sub


Public Sub UserAction_SetBaseline()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UserAction_SetBaseline"
    
    
    'modified for SALK
    If appMsg(appGetLOCText("PlanSetBaseline") & " ?", vbQuestion + vbOKCancel) = vbOK Then
    'baseline110716
    'if baseline not set yet then ask confirmation and set baseline
        If (IsEmpty(Range("Plan.BaselineSaveDate"))) Then
            'If appMsg(appGetLOCText("PlanSetBaseline") & " ?", vbQuestion + vbOKCancel) = vbOK Then
                ''SALK Note - on first save - only base dates are saved as baseline
                BaselineLock True
                Range("Plan.BaselineSaveDate").value = Now
                Range("Plan.BaselineSavedBefore").value = "1"
                AppInfoMsg appGetLOCText("baselineset")
            'End If
        'if baseline already set then show message and stop
        Else '-- modified for SALK
            'AppStopMsg appGetLOCText("msgBaselineAlreadySet")
            ''SALK Note -- both date and forecast saved -- forecast saved to alloted (template)
            SetBaseline  'True
            Range("Plan.BaselineSaveDate").value = Now
            AppInfoMsg appGetLOCText("baselineset")
        End If
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UserAction_SetBaseline error:"
    Resume subend
End Sub

Public Sub UserAction_ChangeView(Optional bNoFreezePanes As Boolean = False)
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UserAction_ChangeView"
    

    Dim rowIndex As Integer
    Dim ci As Integer
    Dim showAll As Boolean
    showAll = False
    rowIndex = Range("Plan.SelectedView").value
    If (rowIndex = 1) Then showAll = True 'there are some columns we never want to show like the cost and resources
    
    rowIndex = Range("Plan.ViewDefinitions").rows(rowIndex).row
    For ci = Range("Plan.ViewDefaultDefinitionAllColumns").Column To Range("Plan.ViewDefaultDefinitionAllColumns").Columns.Count + (Range("Plan.ViewDefaultDefinitionAllColumns").Column - 1)
       Plan.Cells(1, ci).EntireColumn.Hidden = (Not (showAll Or Plan.Cells(rowIndex, ci).Text = "x")) Or (Plan.Cells(rowIndex, ci).Text = "$") Or (Plan.Cells(rowIndex, ci).Text = "") 'modified for SALK
    Next ci
    If Not bNoFreezePanes Then
        ActiveWindow.FreezePanes = False
        If Plan.Cells(rowIndex, Plan.Range("Plan.WBSParentColumn").Column).value <> "" Then
            Intersect(Plan.Range("Plan.ProjectHeader").offset(1, 0), Plan.Range(Plan.Cells(rowIndex, Plan.Range("Plan.WBSParentColumn").Column).value)).offset(0, 1).Activate
            ActiveWindow.FreezePanes = True
        End If
    End If
    'make sure weighting is hidden when needed
    If Not (Cover.Range("Cover.Weighting").value = "x") Then
        Me.Range("Plan.WeightingColumn").EntireColumn.Hidden = True
    End If
    
subend:
   ' modShapes.RearrangeControls Me
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UserAction_ChangeView error:"
    Resume subend
End Sub

Public Sub UserAction_ShowLevel()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UserAction_ShowLevel"
    
    
    Dim listIndex As Integer
    listIndex = Range("Plan.CurrentShowLevel").value
    
    If (listIndex = 1) Then
        Range(Range("Plan.ProjectHeader").EntireRow, Range("Plan.ProjectFooter").EntireRow).Hidden = False
    Else
        Dim taskIndex As Integer
        Dim task As TPGTask
        Dim Hidden As Boolean
        Set task = New TPGTask
        For taskIndex = Range("Plan.ProjectHeader").row + 1 To Range("Plan.ProjectFooter").row - 1
            task.SetIndex taskIndex
            Hidden = False
            Select Case listIndex
                Case 2
                    Hidden = (task.GetLevel() <> 1)
                Case 3
                    Hidden = (Not task.IsMilestone)
                Case 4
                    Hidden = (task.GetLevel() <> 1) And (Not task.IsMilestone)
                Case 5 'Added for SALK
                    Hidden = (task.GetLevel() <> 1) And (Not task.IsFilter)
            End Select
            
            task.SetTaskHidden Hidden
        Next taskIndex
    End If
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UserAction_ShowLevel error:"
    Resume subend
End Sub

Public Sub UserAction_CreateNewTaskLine(milestone As Boolean)
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UserAction_CreateNewTaskLine"
    
    If (Plan.Range("Plan.ProjectFooter").row >= Plan.Range("Plan.ProjectHeader").row + 60) Then
        If IsDemoVersion Then GoTo subend
    End If

    
    
    Dim currenttask As TPGTask
    Set currenttask = GetTPGTask
    If Not (currenttask Is Nothing) Then
        currenttask.InsertTask milestone
     '   AdjustWPDropdownRange
    End If
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UserAction_CreateNewTaskLine error:"
    Resume subend
End Sub

Public Sub UserAction_SetMilestone()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UserAction_SetMilestone"
    
    
    Dim currenttask As TPGTask
    Set currenttask = GetTPGTask
    If Not (currenttask Is Nothing) Then
        currenttask.SetAsMilestone
    End If
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UserAction_SetMilestone error:"
    Resume subend
End Sub

Public Sub UserAction_CreateNewTask()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UserAction_CreateNewTask"
    Plan.noupdate = True
    UserAction_CreateNewTaskLine False

subend:
    Plan.noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UserAction_CreateNewTask error:"
    Resume subend
End Sub

Public Sub UserAction_CreateNewMilestone()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UserAction_CreateNewMilestone"

    UserAction_CreateNewTaskLine True

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UserAction_CreateNewMilestone error:"
    Resume subend
End Sub

Public Sub BlockIndent()
    Dim currentSheet As Worksheet
    Dim currenttask As TPGTask
    Dim upperTask As TPGTask
    Dim iFirstRow As Integer
    Dim ilastrow As Integer
    Dim iTasksColumn As Integer
    Dim rWPNames As Range
    Dim c As Variant
    Dim rBlock As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "BlockIndent"
    
    If Application.ActiveSheet.Name = Plan.Name Then
        iFirstRow = Plan.Range("Plan.ProjectHeader").row + 1
        ilastrow = Plan.Range("Plan.ProjectFooter").row
        iTasksColumn = Plan.Range("Plan.TaskNameColumn").Column
        Set rWPNames = Plan.Range(Plan.Cells(iFirstRow, iTasksColumn), Plan.Cells(ilastrow, iTasksColumn))
        Set rBlock = Intersect(selection, rWPNames)
    
        For Each c In rBlock
            Set currenttask = New TPGTask
            Set upperTask = New TPGTask
            currenttask.SetIndex c.row
            If Not currenttask Is Nothing Then
                upperTask.SetIndex currenttask.TaskRowIndex - 1
                If upperTask.GetTyp <> "S" And upperTask.GetTyp <> "P" Then
                    If sActiveLicense = "D" Then
                        If currenttask.GetTyp = "S" Then
                            appCNAMsg
                        ElseIf currenttask.GetLevel = 1 Then
                            currenttask.IndentTask
                        Else
                            appCNAMsg
                        End If
                    Else
                        currenttask.IndentTask
                    End If
                End If
                Set currenttask = Nothing
                Set upperTask = Nothing
            End If
        Next
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.BlockIndent error:"
    Resume subend
End Sub

Public Sub BlockOutdent()
    Dim currentSheet As Worksheet
    Dim currenttask As TPGTask
    Dim upperTask As TPGTask
    Dim iFirstRow As Integer
    Dim ilastrow As Integer
    Dim iTasksColumn As Integer
    Dim rWPNames As Range
    Dim c As Variant
    Dim rBlock As Range
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "BlockOutdent"
    
    If Application.ActiveSheet.Name = Plan.Name Then
        iFirstRow = Plan.Range("Plan.ProjectHeader").row + 1
        ilastrow = Plan.Range("Plan.ProjectFooter").row
        iTasksColumn = Plan.Range("Plan.TaskNameColumn").Column
        Set rWPNames = Plan.Range(Plan.Cells(iFirstRow, iTasksColumn), Plan.Cells(ilastrow, iTasksColumn))
        Set rBlock = Intersect(selection, rWPNames)
        
        For i = rBlock.Cells.Count To 1 Step -1
            'Debug.Print rBlock(i).Row 'Address + " (REVERSE)"
            Set currenttask = New TPGTask
            currenttask.SetIndex rBlock(i).row
            If Not currenttask Is Nothing Then
                currenttask.OutdentTask
                Set currenttask = Nothing
            End If
        Next i
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.BlockOutdent error:"
    Resume subend
End Sub

Public Sub UserAction_IndentTask()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UserAction_IndentTask"
    
'Debug.Print CStr(Application.selection.Cells.Count) + " - areas: " + CStr(Application.selection.Areas.Count)
    
    'if multiple cells selected in 1 block we do a blockindent
    If (Application.selection.Cells.Count > 1) And (Application.selection.Areas.Count = 1) Then
        Me.BlockIndent
    ElseIf (Application.selection.Cells.Count = 1) Then
        Dim currenttask As TPGTask
        Dim upperTask As New TPGTask
        Set currenttask = GetTPGTask
        If currenttask Is Nothing Then GoTo subend
        
        If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
            If (currenttask.GetTyp <> "W") And (currenttask.GetLevel > 0) Then
                AppInfoMsg (appGetLOCText("msgKissMaxLvl"))
                GoTo subend
            ElseIf (currenttask.GetLevel >= 2) Then
                AppInfoMsg (appGetLOCText("msgKissMaxLvl"))
                GoTo subend
            End If
            If (CountSummaryTasks >= 10) And (currenttask.GetLevel = 1) Then
                AppInfoMsg (appGetLOCText("msgKissMaxSummaryTasks"))
                GoTo subend
            End If
        End If
        
        upperTask.SetIndex currenttask.TaskRowIndex - 1
    
        If Not (currenttask Is Nothing) Then
            If upperTask.GetTyp <> "S" And upperTask.GetTyp <> "P" Then
                If sActiveLicense = "D" Then
                    If currenttask.GetTyp = "S" Then
                        appCNAMsg
                    ElseIf currenttask.GetLevel = 1 Then
                        currenttask.IndentTask
                    Else
                        appCNAMsg
                    End If
                Else
                    currenttask.IndentTask
                End If
            End If
        End If
    End If

subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UserAction_IndentTask error:"
    Resume subend
End Sub

Public Function CountSummaryTasks()
    Dim rangeTasktype As Range
    Dim countSummaryTask As Integer
    Dim cellTyp As Range
    On Error GoTo suberr

    Set rangeTasktype = Range(Intersect(Plan.Range("Plan.TypColumn"), Plan.Range("Plan.ProjectHeader")), Intersect(Plan.Range("Plan.TypColumn"), Plan.Range("Plan.ProjectFooter").offset(-1)))
    countSummaryTask = 0
    For Each cellTyp In rangeTasktype
        If cellTyp.value = "S" Then
            countSummaryTask = countSummaryTask + 1
        End If
    Next
    CountSummaryTasks = countSummaryTask

subend:
    Exit Function
suberr:
    AppErrMsg "Plan.CountSummaryTasks error:"
    Resume subend
End Function


Public Sub UserAction_OutdentTask()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UserAction_OutdentTask"
    
    'if multiple cells selected in 1 block we do a blockindent
    If (Application.selection.Cells.Count > 1) And (Application.selection.Areas.Count = 1) Then
        Me.BlockOutdent
    ElseIf (Application.selection.Cells.Count = 1) Then
        Dim currenttask As TPGTask
        Set currenttask = GetTPGTask
        If Not (currenttask Is Nothing) Then
            If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
                Dim upperTask As New TPGTask
                upperTask.SetIndex currenttask.TaskRowIndex - 1
                If (CountSummaryTasks >= 10) And (currenttask.GetLevel = 2) Then
                    If upperTask.GetLevel = 2 Then
                        AppInfoMsg (appGetLOCText("msgKissMaxSummaryTasks"))
                        Set upperTask = Nothing
                        Set currenttask = Nothing
                        GoTo subend
                    End If
                End If
                Set upperTask = Nothing
            End If
            
            currenttask.OutdentTask
        End If
        Set currenttask = Nothing
    End If

subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UserAction_OutdentTask error:"
    Resume subend
End Sub


Public Sub UserAction_DeleteTask()
    ' Delete task and demote predecessor if neccessary
    CutWP_Id = "" ' needed to distinguish between delete an cut when demoting predecessor
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UserAction_DeleteTask"
    
    
    Dim currenttask As TPGTask
    Set currenttask = GetTPGTask
    If (currenttask Is Nothing) Then GoTo subend
    Dim currentLevel As Integer, currentRowOffset As Integer
    Dim StartDate As Date, FinishDate As Date, blStart As Date, blFinish As Date
    
    StartDate = currenttask.GetStartDate
    FinishDate = currenttask.GetFinishDate
    blStart = currenttask.GetBaselineStartDate
    blFinish = currenttask.GetBaselineFinishDate
    currentLevel = currenttask.GetLevel
    currentRowOffset = currenttask.GetRowOffset
    
   
    UnprotectSheet Me
    'to be deleted
    frmReScheduler.Show
    
    If pDeleteTask = Cancelled Then GoTo subend
    If Not (currenttask.DeleteTask(pDeleteTask = NoRelations)) Then GoTo subend
    
    're-add this part
    DemotePredecessor currenttask, StartDate, FinishDate, blStart, blFinish, currentLevel, currentRowOffset
subend:
    'added this line to lock again
    EnsureUIProtection Plan

    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UserAction_DeleteTask error:"
    Resume subend
End Sub


'start & finish werden nicht verwendet
Private Sub DemotePredecessor(currenttask As TPGTask, _
                                Start As Date, Finish As Date, _
                                blStart As Date, blFinish As Date, _
                                currentLevel As Integer, currentRowOffset As Integer)
    Dim predecessor As TPGTask
    Dim predecessorOffset As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "DemotePredecessor"

    If CutWP_Id = "" Then ' we are deleting for cut it needs to be different then for delete
        predecessorOffset = 1
    Else
        predecessorOffset = 0
    End If
    
    Set predecessor = GetTPGTaskFromUId(Cells(currenttask.TaskRowIndex - predecessorOffset, Range("Plan.UIDColumn").Column).value)
    If predecessor Is Nothing Then GoTo subend
    
    If (Range("Plan.ProjectFooter").row - Range("Plan.ProjectHeader").row) <= 1 Then GoTo reformat
    If Not (predecessor.isSummarytask And predecessor.GetLevel = (currentLevel - 1) And _
            (predecessor.GetRowOffset = 1) Or (predecessor.GetRowOffset = currentRowOffset + 1)) Then GoTo reformat
            
    predecessor.FormatRow currentLevel - 1, "W", False
    
    predecessor.SetCellDate "Plan.BaselineStartColumn", blStart
    predecessor.SetCellDate "Plan.BaselineFinishColumn", blFinish
    
    If Not Plan.IsBaselineSet Then 'yes this looks as if it should be the other way around but it works
        predecessor.SetCellDate "Plan.BaselineStartColumn", blStart
        predecessor.SetCellDate "Plan.BaselineFinishColumn", blFinish
    End If
reformat:
    UserAction_Reformat

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.DemotePredecessor error:"
    Resume subend
End Sub

Public Sub UserAction_Reformat()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UserAction_Reformat"
    
    
    Dim currentRowIndex As Integer
    Dim currenttask As TPGTask
    Set currenttask = New TPGTask
    For currentRowIndex = Range("Plan.ProjectHeader").row + 1 To Range("Plan.ProjectFooter").row - 1
        currenttask.SetIndex currentRowIndex
        currenttask.FormatRow currenttask.GetLevel, currenttask.GetTyp, True
    Next currentRowIndex
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UserAction_Reformat error:"
    Resume subend
End Sub


Private Function GetTPGTask() As TPGTask
    Dim currentSheet As Worksheet
    Dim currenttask As TPGTask
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "GetTPGTask"

    Set currenttask = Nothing
    Set currentSheet = Application.ActiveSheet
    
    If (currentSheet.CodeName = "Plan") Then
        Dim currentCell As Range
        Set currentCell = Application.ActiveCell
        
        If (InRange(currentCell, GetProjectWBSRange)) Then
            Set currenttask = New TPGTask
            currenttask.SetIndex currentCell.row
        End If
    End If
    Set GetTPGTask = currenttask

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Plan.GetTPGTask error:"
    Resume subend
End Function

Private Function GetTPGTaskFromUId(uid As String) As TPGTask
    Dim task As New TPGTask
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "GetTPGTaskFromUId"

    If task.FindInPlanByUId(uid) Then
        Set GetTPGTaskFromUId = task
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Plan.GetTPGTaskFromUId error:"
    Resume subend
End Function

Public Function ContainsUid(uid As String) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "ContainsUid"

    ContainsUid = Not GetTPGTaskFromUId(uid) Is Nothing

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Plan.ContainsUid error:"
    Resume subend
End Function


Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "Worksheet_BeforeDoubleClick"
    
    If (Target.Column = Range("Plan.OpenCollapseColumn").Column) Then
        If (InRange(Target, GetProjectWBSRange())) Then
            
            
            Cancel = True
            Dim currenttask As TPGTask
            Dim lowerTask As TPGTask
            Set currenttask = New TPGTask
            Set lowerTask = New TPGTask
            Dim setToHidden As Boolean
            currenttask.SetIndex Target.row
            Dim rowIndex As Integer
            Dim hideStartingRowIndex As Integer
            hideStartingRowIndex = 30000
            Dim hideEndingRowIndex As Integer
            For rowIndex = Target.row + 1 To Range("Plan.ProjectFooter").row - 1
                lowerTask.SetIndex rowIndex
                hideEndingRowIndex = rowIndex
                If (lowerTask.GetLevel > currenttask.GetLevel) Then
                    If (rowIndex = Target.row + 1) Then
                        setToHidden = Not lowerTask.isHidden
                    End If
                    If (hideStartingRowIndex > rowIndex) Then hideStartingRowIndex = rowIndex
                Else
                    hideEndingRowIndex = hideEndingRowIndex - 1
                    Exit For
                End If
            Next rowIndex
            If (hideStartingRowIndex <= hideEndingRowIndex) Then
                Range(Me.rows(hideStartingRowIndex).EntireRow, Me.rows(hideEndingRowIndex).EntireRow).Hidden = setToHidden
            End If
subend:
            
        End If
    End If
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.Worksheet_BeforeDoubleClick error:"
    Resume subend
End Sub


Public Sub BaselineLock(locked As Boolean)
    Dim startRowIndex As Integer
    Dim endRowIndex As Integer
    Dim currentIndex As Integer
    Dim currenttask As TPGTask
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "BaselineLock"
UnprotectSheet Plan
    Set currenttask = New TPGTask
    startRowIndex = Range("Plan.ProjectHeader").row + 1
    endRowIndex = Range("Plan.ProjectFooter").row - 1
    For currentIndex = startRowIndex To endRowIndex
        currenttask.SetIndex currentIndex
        currenttask.LockBaseline locked
    Next currentIndex
    
    'change template
    Dim taskTemplateIndex As Integer
    taskTemplateIndex = Application.Range("plan.TaskTemplateLevel_W").row
    Dim milestoneTemplateIndex As Integer
    milestoneTemplateIndex = Application.Range("plan.TaskTemplateLevel_M").row
    
    Dim templateTask As TPGTask
    Set templateTask = New TPGTask
    
    templateTask.SetIndex taskTemplateIndex
    templateTask.LockBaseline locked

    templateTask.SetIndex milestoneTemplateIndex
    templateTask.LockBaseline locked

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.BaselineLock error:"
    Resume subend
End Sub

Public Sub cmdUpdateAllSheets_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "cmdUpdateAllSheets_Click"
Application.ScreenUpdating = False
bNoNormalProtectActionsRequired = True
    Select Case sActiveLicense
    Case "D"
        ValidatePlan
        'RACI.UpdateRACI False
Application.ScreenUpdating = False
        WBS.Activate
Application.ScreenUpdating = False
        WBS.CreateWBSStructure False
        MST.Activate
Application.ScreenUpdating = False
        MST.UpdateMST False
        Gantt.Activate
Application.ScreenUpdating = False
        Gantt.CreateGantt False
        'WorkPlan.UpdateRessPlan False
        'Work.Update False
        'CostPlan.UpdateCostPlan False
        'Cost.UpdateCost False
    Case Else
        ValidatePlan
Application.ScreenUpdating = False
        RACI.Activate
Application.ScreenUpdating = False
        RACI.UpdateRACI False
Application.ScreenUpdating = False
        WBS.Activate
Application.ScreenUpdating = False
        WBS.CreateWBSStructure False
Application.ScreenUpdating = False
        MST.Activate
Application.ScreenUpdating = False
        MST.UpdateMST False
Application.ScreenUpdating = False
        Gantt.Activate
Application.ScreenUpdating = False
        Gantt.CreateGantt False

'remove for SALK
'Application.ScreenUpdating = False
'        WorkPlan.Activate
'Application.ScreenUpdating = False
'        WorkPlan.UpdateRessPlan False
'Application.ScreenUpdating = False
'        Work.Activate
'Application.ScreenUpdating = False
'        Work.update False

'Application.ScreenUpdating = False
'        CostPlan.Activate
'Application.ScreenUpdating = False
'        CostPlan.UpdateCostPlan False
'Application.ScreenUpdating = False
'        Cost.Activate
'Application.ScreenUpdating = False
'        Cost.UpdateCost False
    End Select
    
Application.ScreenUpdating = False
    Plan.Activate
    ActiveSheet.UsedRange
    
subend:
Application.ScreenUpdating = True
bNoNormalProtectActionsRequired = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.cmdUpdateAllSheets_Click error:"
    Resume subend
End Sub

Private Sub SetBaseline()
    Dim startRowIndex As Integer
    Dim endRowIndex As Integer
    Dim currentIndex As Integer
    Dim currenttask As TPGTask
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "SetBaseline"

    UnprotectSheet Me

    Set currenttask = New TPGTask
    startRowIndex = Range("Plan.ProjectHeader").row + 1
    endRowIndex = Range("Plan.ProjectFooter").row - 1
    For currentIndex = startRowIndex To endRowIndex
        currenttask.SetIndex currentIndex
        currenttask.SetBaseline
    Next currentIndex
    
    'Templates
    currenttask.SetIndex Range("plan.TaskTemplateLevel_W").row
    currenttask.LockBaseline True

    currenttask.SetIndex Range("plan.TaskTemplateLevel_M").row
    currenttask.LockBaseline True

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.SetBaseline error:"
    Resume subend
    
End Sub

Public Sub ResetBaseline()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "ResetBaseline"
    
    If appQOCMsg(appGetLOCText("PlanResetBaseline")) = vbCancel Then GoTo subend
    BaselineLock False
    Range("Plan.BaselineSaveDate").value = ""
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.ResetBaseline error:"
    Resume subend
End Sub

Public Sub cmdShowHideBanner()
    Dim s As shape
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "cmdShowHideBanner"
    'when hidden then delete logo
    If Not Plan.Range("Plan.Banner").EntireRow.Hidden Then
        For Each s In Plan.Shapes
            If s.Name = Config_Lic.Range("Config.Logo3").value Then
                s.Delete
                Exit For
            End If
        Next
    End If
    Plan.Range("Plan.Banner").EntireRow.Hidden = Not (Plan.Range("Plan.Banner").EntireRow.Hidden)
    If Not Plan.Range("Plan.Banner").EntireRow.Hidden Then
        modShapes.PositionLogo_v3 Me, True
        Plan.Range("Plan.RootWBS").Select
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.cmdShowHideBanner error:"
    Resume subend
End Sub

Friend Function ValidatePlan() As Boolean
    Dim wbsSheet As Worksheet
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "ValidatePlan"

    Set wbsSheet = Plan
    Dim ErrorTasks As String
    Dim countErrorTasks As Integer
    Dim startRowIndex As Integer
    Dim endRowIndex As Integer
    Dim currentIndex As Integer
    Dim currenttask As TPGTask
    
    ErrorTasks = ""
    countErrorTasks = 0
    
    ValidatePlan = True
    Set currenttask = New TPGTask
    startRowIndex = wbsSheet.Range("Plan.ProjectHeader").row
    endRowIndex = wbsSheet.Range("Plan.ProjectFooter").row - 1

    For currentIndex = startRowIndex To endRowIndex
        currenttask.SetIndex currentIndex
        If Not currenttask.Valid Then
            ValidatePlan = False
            countErrorTasks = countErrorTasks + 1
            If countErrorTasks < 20 Then
                ErrorTasks = ErrorTasks & currenttask.GetWBS & " " & currenttask.GetTaskName & vbLf
            ElseIf countErrorTasks = 20 Then
                ErrorTasks = ErrorTasks & "..."
            End If
        End If
    Next
    
    If Not ValidatePlan Then
        ErrorTasks = countErrorTasks & " " & appGetLOCText("Invaliddates") & vbLf & vbLf & ErrorTasks
        AppInfoMsg ErrorTasks
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Plan.ValidatePlan error:"
    Resume subend
End Function

Public Sub CutWP_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "CutWP_Click"
    
    CutWP_Id = 0
    Dim currenttask As TPGTask
    Set currenttask = GetTPGTask
    If Not (currenttask Is Nothing) Then
        If Not currenttask.isSummarytask Then
            CutWP_Id = currenttask.GetUID
        End If
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.CutWP_Click error:"
    Resume subend
End Sub

Public Sub CopyWP_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "CopyWP_Click"
    
    CopyWP_Id = 0
    Dim currenttask As TPGTask
    Set currenttask = GetTPGTask
    If Not (currenttask Is Nothing) Then
        If Not currenttask.isSummarytask Then
            CopyWP_Id = currenttask.GetUID
        End If
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.CopyWP_Click error:"
    Resume subend
End Sub

Public Sub InsertCutWP_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "InsertCutWP_Click"

    Dim task As TPGTask
    Dim insertionPoint As Integer
    Dim level As Integer
    
    'if there is a copywp id then we copy
    If CopyWP_Id <> "" Then
        Me.InsertCopyWP_Click
        GoTo subend
    End If
    
    If CutWP_Id <> "" Then
        Set task = GetTPGTask
        If Not (task Is Nothing) Then
            insertionPoint = task.TaskRowIndex
            task.SetIndex insertionPoint - 1
            
            If task.isSummarytask Or task.IsProjectSummaryTask Then
                level = task.GetLevel + 1
            Else
                level = task.GetLevel
            End If
                        
            Set task = GetTPGTaskFromUId(CutWP_Id)
            If Not task Is Nothing Then
                 RCut Plan.Cells(task.TaskRowIndex, 1).EntireRow
                'Plan.Cells(task.TaskRowIndex, 1).EntireRow.Cut
                'Plan.Cells(insertionPoint, 1).EntireRow.Insert
                CellFunctions.InsertWrapped Plan.Cells(insertionPoint, 1).EntireRow
                Set task = GetTPGTaskFromUId(CutWP_Id)
                If task.GetLevel <> level Then
                    task.SetLevel level
                End If
            End If
        End If
        CutWP_Id = ""
        UnprotectSheet Me
        UserAction_Reformat
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.InsertCutWP_Click error:"
    Resume subend
End Sub

Public Sub InsertCopyWP_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "InsertCopyWP_Click"

    Dim task As TPGTask
    Dim insertionPoint As Integer
    Dim level As Integer
    Dim newguid As String
    
    If CopyWP_Id <> "" Then
        Set task = GetTPGTask
        If Not (task Is Nothing) Then
            insertionPoint = task.TaskRowIndex
            task.SetIndex insertionPoint - 1
            
            If task.isSummarytask Or task.IsProjectSummaryTask Then
                level = task.GetLevel + 1
            Else
                level = task.GetLevel
            End If
                        
            Set task = GetTPGTaskFromUId(CopyWP_Id)
            If Not task Is Nothing Then
                newguid = StGuidGen
                Plan.Cells(task.TaskRowIndex, 1).EntireRow.Copy
                'Plan.Cells(insertionPoint, 1).EntireRow.Insert
                CellFunctions.InsertWrapped Plan.Cells(insertionPoint, 1).EntireRow
                Plan.Cells(insertionPoint, Plan.Range("Plan.UidColumn").Column).value = newguid
                Set task = GetTPGTaskFromUId(newguid) 'CopyWP_Id)
                If task.GetLevel <> level Then
                    task.SetLevel level
                End If
                'now we also have to copy the WPDetailsInfo to the new WP
                WPDetails.CopyWPDetails CopyWP_Id, newguid
            End If
        End If
        CopyWP_Id = ""
        UnprotectSheet Me
        UserAction_Reformat
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.InsertCopyWP_Click error:"
    Resume subend
End Sub

Public Sub UpdatePlan_Click()
    Dim rCell As Range
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UpdatePlan_Click"
   
   'removed for SALK
'    'when phb in programmode then switch to person planning should not be possible
'    If (InStr(LCase(Cover.Range("Cover.Complexity").value), "program") > 0) Then
'        If Plan.PersonsInPlan Then
'            AppStopMsg appGetLOCText("msgProgSwitchNotPossible")
'            GoTo SubEnd
'        Else
'            Set rCell = Team.Range("Team.IsResourceRange").Find("x", , xlValues, xlWhole)
'            'persons are selected as resource in team sheet, so we are in personplanning
'            If Not rCell Is Nothing Then
'                Set rCell = Nothing
'                AppStopMsg appGetLOCText("msgProgSwitchNotPossible")
'                GoTo SubEnd
'            End If
'            Set rCell = Nothing
'        End If
'    End If
   
    Application.ScreenUpdating = False
    UpdateRoles
    Me.UpdatePrecedents
    
    'Removed for SALK
'    Application.ScreenUpdating = False
'    UpdateWork
'    Application.ScreenUpdating = False
'    UpdateCost

    wp.bDirty = False
    Application.ScreenUpdating = False
    wp.cboWPs_Change
    ActiveSheet.UsedRange
   ' RearrangeControls Me
subend:
    Application.ScreenUpdating = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UpdatePlan_Click error:"
    Resume subend
End Sub

Public Sub UpdateRoles()
    Dim cell As Range
    Dim member As TPGMember
    Dim ProjectTeam As TPGTeam
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UpdateRoles"

    Set ProjectTeam = New TPGTeam
    
    'sollten evtl. ne compare methode coden, um nicht jedesmal das ganze
    'team zu updaten, auch wenn da garkeine aenderung stattgefunden hat
    
    For Each cell In Team.rGUIDs
        If cell.value <> "" Then
            Set member = New TPGMember
            member.LoadMemberFromTeam cell
            If member.ShowInFD = True Then ProjectTeam.members.AddMember member
        End If
    Next
    
    'das hier kostet naemlich echt zeit
    ProjectTeam.SyncToPlan
    
    'KISS specific:
    'we have to update names in plan.responsiblecolumn + hide rolescolumns
    If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
        Plan.noupdate = True
        UpdateResponsibles
        Dim i As Integer
        For i = Plan.Range("Plan.RoleTemplate").Column + 1 To Plan.Range("Plan.RoleInsertionPoint").Column - 1
            Plan.Columns(i).EntireColumn.Hidden = True
        Next
        Plan.noupdate = False
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UpdateRoles error:"
    Resume subend
End Sub

Private Sub UpdateResponsibles()
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UpdateResponsibles"

    'if we have roles defined
    If Plan.Range("Plan.Roles").Columns.Count > 2 Then
        'we have to update names in plan.responsiblecolumn (= KISS specific)
        Dim FromRow As Integer: FromRow = Plan.Range("Plan.ProjectHeader").row + 1
        Dim ToRow As Integer: ToRow = Plan.Range("Plan.ProjectFooter").row - 1
        Dim Count As Integer: Count = Plan.Range("Plan.Roles").Columns.Count
        Dim i As Integer
        Dim R As Range
        
        For i = FromRow To ToRow
            Plan.Cells(i, Plan.Range("Plan.ResponsibleColumn").Column).value = ""
            For Each R In Intersect(Plan.Range("Plan.Roles").Resize(ColumnSize:=Count - 2).offset(ColumnOffset:=1), Plan.Range("$" + Trim(str(i)) + ":$" + Trim(str(i))))
                'we only register responsibles in KISS, no other roles
                If R.value <> "" Then
                    Plan.Cells(i, Plan.Range("Plan.ResponsibleColumn").Column).value = Plan.Cells(Plan.Range("Plan.ProjectHeader").row - 2, R.Column).value
                    Exit For
                End If
            Next
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UpdateResponsibles error:"
    Resume subend
End Sub

Private Sub UpdateWork()
    Dim WTS As TPGWorkTypes
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UpdateWork"

    Set WTS = New TPGWorkTypes
    WTS.Load
    If WTS.Duplicates Then
        AppInfoMsg appGetLOCText("worktypeduplicatesfound")
    Else
        WTS.SyncToPlan
        WTS.SyncToWP
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UpdateWork error:"
    Resume subend
End Sub

Private Sub UpdateCost()
    Dim cts As TPGCostTypes
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UpdateCost"

    Set cts = New TPGCostTypes
    cts.Load
    If cts.Duplicates Then
        AppInfoMsg appGetLOCText("costtypeduplicatesfound")
    Else
        cts.SyncToPlan
        cts.SyncToWP
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UpdateCost error:"
    Resume subend
End Sub

Public Function GetNodeWithWorkTypesDetails(xmlDom As Variant) As Variant
    Dim ntable As Variant
    
    Dim nrecord As Variant
    Dim c As Range
    Dim i As Integer
    Dim found As Boolean
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "GetNodeWithWorkTypesDetails"
    'n.appendchild GetNodeFromTable(xmlDom, "worktypes", "worktype", Plan.Range("Plan.WorkTypeNameRange"), , True)
    Set ntable = xmlDom.createNode(1, "worktypesdetails", "")
    For Each c In Plan.Range("Plan.WorkTypeNameRange")
            If c.value <> "" Then
                Set nrecord = xmlDom.createNode(1, "worktype", "")
                AddNode xmlDom, nrecord, "name", c.value
                AddNode xmlDom, nrecord, "rate", Admin.GetDepartmentRate(c.value)
                AddNode xmlDom, nrecord, "workcosttype", Admin.GetDepartmentCostType(c.value)
                ntable.appendchild nrecord
            End If
    Next
    Set GetNodeWithWorkTypesDetails = ntable

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Plan.GetNodeWithWorkTypesDetails error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    Dim cols As Collection
    Dim i As Integer
    Dim R As Range
    Dim rolesNode As Variant
    Dim roleNode As Variant
    Dim Count As Integer
    Dim t As TPGTokenizer
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "CreateXml"

    
    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
                                                            
    AddNode xmlDom, n, "baseline", Plan.Range("Plan.BaselineSaveDate").value
    AddNode xmlDom, n, "baselinesavedbefore", Plan.Range("Plan.BaselineSavedBefore").value 'baseline110716
    AddNode xmlDom, n, "status", Intersect(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.StatusColumn")).value
    AddNode xmlDom, n, "start", Intersect(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.StartColumn")).value
    AddNode xmlDom, n, "finish", Intersect(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.FinishColumn")).value
    AddNode xmlDom, n, "baselinestart", Intersect(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.BaselineStartColumn")).value
    AddNode xmlDom, n, "baselinefinish", Intersect(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.BaselineFinishColumn")).value
    
    If ModuleExists("PersonalPlanning") Then
        Set t = New TPGTokenizer
        t.Delimiter = "^"
        t.FromRange Config.Range(Config.Range("Config.WTSStart"), Config.Range("Config.WTSEnd").End(xlUp))
        AddNode xmlDom, n, "personplanning", t.ToString
    End If
    
    Set rolesNode = xmlDom.createNode(1, "roles", "")
    Count = Plan.Range("Plan.Roles").Columns.Count
    If Count > 2 Then
        For Each R In Intersect(Plan.Range("Plan.Roles").Resize(ColumnSize:=Count - 2).offset(ColumnOffset:=1), Plan.Range("Plan.ProjectHeader")).offset(-4)
            Set roleNode = xmlDom.createNode(1, "role", "")
            AddNode xmlDom, roleNode, "id", R.value
            AddNode xmlDom, roleNode, "name", R.offset(2).value
            rolesNode.appendchild roleNode
        Next
    End If
    n.appendchild rolesNode
    
    n.appendchild GetNodeFromTable(xmlDom, "worktypes", "worktype", Plan.Range("Plan.WorkTypeNameRange"), , True)
    n.appendchild GetNodeFromTable(xmlDom, "workcosttypes", "workcosttype", Plan.Range("Plan.WorkCostNameRange"), , True)
    n.appendchild GetNodeFromTable(xmlDom, "costtypes", "costtype", Plan.Range("Plan.CostNameRange"), , True)
    n.appendchild GetNodeWithWorkTypesDetails(xmlDom) 'we needed this extra info to check on rates
    
    Set cols = New Collection
    cols.Add GetTPGColumn("uid", Plan.Range("Plan.UIDColumn").Column)
    cols.Add GetTPGColumn("extid", Plan.Range("Plan.ExtIdColumn").Column)
    cols.Add GetTPGColumn("type", Plan.Range("Plan.TypColumn").Column)
    cols.Add GetTPGColumn("level", Plan.Range("Plan.LevelColumn").Column)
    cols.Add GetTPGColumn("taskname", Plan.Range("Plan.TaskNameColumn").Column)
    cols.Add GetTPGColumn("progress", Plan.Range("Plan.ProgressColumn").Column)
    cols.Add GetTPGColumn("weighting", Plan.Range("Plan.WeightingColumn").Column)
    cols.Add GetTPGColumn("keymst", Plan.Range("Plan.KeyMSTColumn").Column)
    cols.Add GetTPGColumn("status", Plan.Range("Plan.StatusColumn").Column)
    cols.Add GetTPGColumn("wpspec", Plan.Range("Plan.WPSpecColumn").Column)
    
    'Added for SALK
    cols.Add GetTPGColumn("filter", Plan.Range("Plan.FilterColumn").Column)
    
    cols.Add GetTPGColumn("basestart", Plan.Range("Plan.BaselineStartColumn").Column)
    cols.Add GetTPGColumn("basefinish", Plan.Range("Plan.BaselineFinishColumn").Column)
    cols.Add GetTPGColumn("start", Plan.Range("Plan.StartColumn").Column)
    cols.Add GetTPGColumn("finish", Plan.Range("Plan.FinishColumn").Column)
    
    cols.Add GetTPGColumn("basestartformula", Plan.Range("Plan.BaselineStartColumn").Column, FormulaColumn)
    cols.Add GetTPGColumn("basefinishformula", Plan.Range("Plan.BaselineFinishColumn").Column, FormulaColumn)
    cols.Add GetTPGColumn("startformula", Plan.Range("Plan.StartColumn").Column, FormulaColumn)
    cols.Add GetTPGColumn("finishformula", Plan.Range("Plan.FinishColumn").Column, FormulaColumn)
    
    
    For i = 1 To Intersect(Plan.Range("Plan.Roles"), Plan.Range("Plan.ProjectHeader")).offset(-4).Columns.Count - 2
        cols.Add GetTPGColumn("raci" & i, Plan.Range("Plan.Roles").Column + i)
    Next
    
    For i = 1 To (Plan.Range("Plan.WorkTypeNameRange").Columns.Count - 2) / 5
        cols.Add GetTPGColumn("base_wt_" & i, Plan.Range("Plan.WorkTypeNameRange").Column + 1 + ((i - 1) * 5))
        cols.Add GetTPGColumn("change_wt_" & i, Plan.Range("Plan.WorkTypeNameRange").Column + 2 + ((i - 1) * 5))
        cols.Add GetTPGColumn("actual_wt_" & i, Plan.Range("Plan.WorkTypeNameRange").Column + 3 + ((i - 1) * 5))
    Next
    
    'remove for SALK
'    For i = 1 To (Plan.Range("Plan.CostNameRange").Columns.Count - 2) / 5
'        Cols.Add GetTPGColumn("base_ct_" & i, Plan.Range("Plan.CostNameRange").Column + 1 + ((i - 1) * 5))
'        Cols.Add GetTPGColumn("change_ct_" & i, Plan.Range("Plan.CostNameRange").Column + 2 + ((i - 1) * 5))
'        Cols.Add GetTPGColumn("actual_ct_" & i, Plan.Range("Plan.CostNameRange").Column + 3 + ((i - 1) * 5))
'    Next
    'ADDED FOR SALK
    For i = 1 To (Plan.Range("Plan.CostNameRange").Columns.Count - 2) / 3
        cols.Add GetTPGColumn("alotted_ct_" & i, Plan.Range("Plan.CostNameRange").Column + 1 + ((i - 1) * 3))
        cols.Add GetTPGColumn("forecast_ct_" & i, Plan.Range("Plan.CostNameRange").Column + 2 + ((i - 1) * 3))
        cols.Add GetTPGColumn("base_ct_" & i, Plan.Range("Plan.CostNameRange").Column + 3 + ((i - 1) * 3))
    Next
    
    'for KISS we have an extra description column
    If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then cols.Add GetTPGColumn("description", Plan.Range("Plan.DescriptionColumn").Column)
    
    
    If Plan.Range("Plan.ProjectFooter").row > Plan.Range("Plan.ProjectHeader").row + 1 Then
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
            n.appendchild GetNodeFromTable(xmlDom, "tasks", "task", Plan.Range(Plan.Cells(Plan.Range("Plan.ProjectHeader").row + 1, 1), Plan.Cells(Plan.Range("Plan.ProjectFooter").row - 1, Plan.Range("Plan.CostTotalBaseColumn").Column)), cols)
        Else
            n.appendchild GetNodeFromTable(xmlDom, "tasks", "task", Plan.Range(Plan.Cells(Plan.Range("Plan.ProjectHeader").row + 1, 1), Plan.Cells(Plan.Range("Plan.ProjectFooter").row - 1, Plan.Range("Plan.DescriptionColumn").Column)), cols)
        End If
    End If
    Set CreateXml = n

    

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Plan.CreateXml error:"
    Resume subend

End Function

Public Sub ImportXml(Node As Variant, sversion As String)
    Dim i As Integer
    Dim iIndex As Integer
    Dim n As Variant
    Dim m As TPGMember
    Dim WTS As New TPGWorkTypes
    Dim WT As TPGWorkType
    Dim cts As New TPGCostTypes
    Dim ct As TPGCostType
    Dim tFooter As TPGTask
    Dim newTask As TPGTask
    Dim taskType As String
    Dim level As Integer
    Dim lastlevel As Integer
    Dim baseline As Boolean
    Dim bimportweight As Boolean
    Dim BaselineSavedBefore As Boolean 'baseline110716
    
    
 
    '/**Plan Speed Enhancement*/
    Dim prot As Boolean
    
    '(kissimport)
    Dim dRaci As TPGDictionary
    Dim rn As Variant
    Dim x As Integer '- determines integer for raci
    Dim TG As TPGTokenizer
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "ImportXml"
    
    Plan.noupdate = True
    If Not Node Is Nothing Then
    
        'we will only import weighting data if this module is active, otherwise the default 100% is applied
        If ModuleExists("WPWeighting") Then bimportweight = True
        
        reset
        
        'removed for SALK
'        If ModuleExists("PersonalPlanning") Then
'            If Not Node.SelectSingleNode("personplanning") Is Nothing Then
'                Dim t As New TPGTokenizer
'                t.Delimiter = "^"
'                t.FromString Node.SelectSingleNode("personplanning").Text
'                t.ToRange Config.Range("Config.WTSStart")
'            End If
'        End If
        
        Dim iActionCount As Integer
        
        For Each n In Node.SelectNodes("roles/role")
            iActionCount = iActionCount + 1
        Next
        
        ' 15 secs
        modStack.ShowProgressBar iActionCount, "Importing Team Members", "CellFunctions.InsertWrapped"
        For Each n In Node.SelectNodes("roles/role")
            Set m = New TPGMember
            m.GUID = n.SelectSingleNode("id").Text
            m.Name = n.SelectSingleNode("name").Text
            m.SyncToPlan
        Next

        ' 0
        For Each n In Node.SelectNodes("worktypes/worktype")
            Set WT = New TPGWorkType
            WT.Name = n.Text
            WT.GetCostType
            WTS.AddWorkType WT
        Next
        
        '9
        WTS.SyncToPlan

        '0
        For Each n In Node.SelectNodes("workcosttypes/workcosttype")
            Set ct = New TPGCostType
            ct.Name = n.Text
            ct.WorkCostType = True
            cts.Add ct
        Next
        For Each n In Node.SelectNodes("costtypes/costtype")
            Set ct = New TPGCostType
            ct.Name = n.Text
            cts.Add ct
        Next
        
        '12
        cts.SyncToPlan
        
        '(kissimport)
        If Import.ImportKISSinPHB Then
            'required to add Extern Cost on Plan
            UpdateWork
            wp.bDirty = False
            
            Set TG = New TPGTokenizer
            Set dRaci = New TPGDictionary
            'This will add/remove orgs on plan not on kiss
            TG.FromRangeNoBlanks Contract.Range("Contract.ResourcesTable").offset(1, 2).Resize(Contract.Range("Contract.ResourcesTable").rows.Count - 3, 1)
            i = 1
            If Node.SelectNodes("roles/role").length > 0 Then
                For Each rn In Node.SelectNodes("roles/role")
                    dRaci.Add i, TG.GetIndex(Import.NewTeamDept.GetValue(rn.SelectSingleNode("id").Text)) + 1
                    i = i + 1
                Next
            End If
        End If
            
        'Plan.Range("Plan.BaselineSaveDate").Value = Node.SelectSingleNode("baseline").Text
        
        'modified for SALK
        If IsDate(CastStringToVar(Node.SelectSingleNode("baseline").Text)) Then
            SetXMLValue Plan.Range("Plan.BaselineSaveDate"), Node.SelectSingleNode("baseline").Text
        Else
            'fix for empty baseline
            If Len(Node.SelectSingleNode("baseline").Text) > 0 Then
                Plan.Range("Plan.BaselineSaveDate").value = CDate(Split(Replace(Replace(Node.SelectSingleNode("baseline").Text, "/", "-"), ".", "-"), " ")(0))
            Else
                SetXMLValue Plan.Range("Plan.BaselineSaveDate"), Node.SelectSingleNode("baseline").Text
            End If
        End If
        
        
        
        'baseline110716
        If Not Node.SelectSingleNode("baselinesavedbefore") Is Nothing Then
            SetXMLValue Plan.Range("Plan.BaselineSavedBefore"), Node.SelectSingleNode("baselinesavedbefore").Text
        Else
            Range("Plan.BaselineSavedBefore").value = ""
        End If
        baseline = IsDate(Plan.Range("Plan.BaselineSaveDate").value)
        If Plan.Range("Plan.BaselineSavedBefore").value = "1" Then
            BaselineSavedBefore = True
        Else
            BaselineSavedBefore = False
        End If
                            
        'Templates
        Set newTask = New TPGTask
        newTask.SetIndex Range("plan.TaskTemplateLevel_W").row
        newTask.LockBaseline baseline
    
        newTask.SetIndex Range("plan.TaskTemplateLevel_M").row
        newTask.LockBaseline baseline
        
        If sversion <> "1.0.1" And sversion <> "1.0.2" Then
            Intersect(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.StatusColumn")).value = Node.SelectSingleNode("status").Text
        End If
        
        Set tFooter = New TPGTask
        tFooter.SetIndex (Plan.Range("Plan.ProjectFooter").row)
        
        iActionCount = 0
        For Each n In Node.SelectNodes("tasks/task")
            iActionCount = iActionCount + 1
        Next
        modStack.ShowProgressBar iActionCount, "Importing Tasks", "CellFunctions.InsertWrapped"
        
        
        '/**Plan Speed Enhancement*/
        prot = Plan.ProtectContents
       
        UnprotectSheet Plan
        DisableAggregateSum
        
        For Each n In Node.SelectNodes("tasks/task")
            taskType = n.SelectSingleNode("type").Text
            level = CastStringToVar(n.SelectSingleNode("level").Text)
            
            '--------------------------------------------------------------
            'unperformant - hier muss echt was getan werden
            '--------------------------------------------------------------
            tFooter.InsertTask (taskType = "M")         '<- 4 *50 ca !!!!!
            '--------------------------------------------------------------
            
            Set newTask = New TPGTask
            newTask.SetIndex tFooter.TaskRowIndex - 1
            
            'nodes did not exist in 1.0.1
            If Not n.SelectSingleNode("uid") Is Nothing Then _
                newTask.SetUid n.SelectSingleNode("uid").Text
            If Not n.SelectSingleNode("extid") Is Nothing Then _
                newTask.SetExtId n.SelectSingleNode("extid").Text
            
            newTask.SetTaskName n.SelectSingleNode("taskname").Text
            newTask.SetStatus n.SelectSingleNode("status").Text
            
            'for KISS we import an extra 'description' column when present
            If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
                If Not n.SelectSingleNode("description") Is Nothing Then _
                    newTask.SetDescription n.SelectSingleNode("description").Text
            End If
            
            'Added for SALK
            If Not n.SelectSingleNode("filter") Is Nothing Then _
                newTask.SetFilter n.SelectSingleNode("filter").Text
                
            If Not n.SelectSingleNode("wpspec") Is Nothing Then _
                newTask.SetWPSpec n.SelectSingleNode("wpspec").Text
            
            If lastlevel < level Then
                For i = lastlevel To level
                    newTask.IndentTask
                Next i
            ElseIf lastlevel > level Then
                For i = (level + 1) To lastlevel
                    newTask.OutdentTask
                Next i
            End If
            
            If bimportweight Then
                If Not n.SelectSingleNode("weighting") Is Nothing Then
                    newTask.SetWeighting CastStringToVar(n.SelectSingleNode("weighting").Text)
                End If
            End If
            
            Select Case taskType
                Case "W":
                    newTask.SetProgress CastStringToVar(n.SelectSingleNode("progress").Text)
                    x = 0 '(kissimport)
                    For i = 1 To Node.SelectNodes("roles/role").length
                        newTask.SetCellValue2 Plan.Range("Plan.Roles").Column + i, n.SelectSingleNode("raci" & i).Text
                        '(kissimport)
                        If Import.ImportKISSinPHB Then
                            If n.SelectSingleNode("raci" & i).Text = "R" Or n.SelectSingleNode("raci" & i).Text = "V" Then
                                x = i
                            End If
                        End If
                    Next
                    'SetDateOrFormula newTask, n, "Plan.BaselineStartColumn", "basestart"
                    'SetDateOrFormula newTask, n, "Plan.BaselineFinishColumn", "basefinish"
                    'If baseline Then
                    '    SetDateOrFormula newTask, n, "Plan.StartColumn", "start"
                    '    SetDateOrFormula newTask, n, "Plan.FinishColumn", "finish"
                    'End If
                    
                    'TODO: FIX ME
                    If Import.ImportKISSinPHB Then
                        '(kissimport)
                        If x = 0 Then
                            newTask.SetCellValue2 Plan.Range("Plan.WorkTypeNameRange").Column + 1 + ((1 - 1) * 5), (n.SelectSingleNode("base_wt_1").Text)
                            newTask.SetCellValue2 Plan.Range("Plan.WorkTypeNameRange").Column + 2 + ((1 - 1) * 5), (n.SelectSingleNode("change_wt_1").Text)
                            newTask.SetCellValue2 Plan.Range("Plan.WorkTypeNameRange").Column + 3 + ((1 - 1) * 5), (n.SelectSingleNode("actual_wt_1").Text)
                        Else
                            newTask.SetCellValue2 Plan.Range("Plan.WorkTypeNameRange").Column + 1 + ((dRaci.GetValue(x) - 1) * 5), (n.SelectSingleNode("base_wt_1").Text)
                            newTask.SetCellValue2 Plan.Range("Plan.WorkTypeNameRange").Column + 2 + ((dRaci.GetValue(x) - 1) * 5), (n.SelectSingleNode("change_wt_1").Text)
                            newTask.SetCellValue2 Plan.Range("Plan.WorkTypeNameRange").Column + 3 + ((dRaci.GetValue(x) - 1) * 5), (n.SelectSingleNode("actual_wt_1").Text)
                        End If
                    Else
                        For i = 1 To WTS.Count
                            'If IsNumeric(n.SelectSingleNode("base_wt_" & i).Text) Then _'
                                newTask.SetCellValue2 Plan.Range("Plan.WorkTypeNameRange").Column + 1 + ((i - 1) * 5), (n.SelectSingleNode("base_wt_" & i).Text)
                            'If IsNumeric(n.SelectSingleNode("change_wt_" & i).Text) Then _'
                                newTask.SetCellValue2 Plan.Range("Plan.WorkTypeNameRange").Column + 2 + ((i - 1) * 5), (n.SelectSingleNode("change_wt_" & i).Text)
                            'If IsNumeric(n.SelectSingleNode("actual_wt_" & i).Text) Then _'
                                newTask.SetCellValue2 Plan.Range("Plan.WorkTypeNameRange").Column + 3 + ((i - 1) * 5), (n.SelectSingleNode("actual_wt_" & i).Text)
                        Next
                    End If
                    
                    
                    'Modified for SALK
                    For i = 1 To Node.SelectNodes("costtypes/costtype").length
                        If Not n.SelectSingleNode("alotted_ct_" & i) Is Nothing Then
'                            If IsNumeric(n.SelectSingleNode("alotted_ct_" & i).Text) Then
                                newTask.SetCellValue2 Plan.Range("Plan.CostNameRange").Column + 1 + ((i - 1) * 3), (n.SelectSingleNode("alotted_ct_" & i).Text)
'                            If IsNumeric(n.SelectSingleNode("forecast_ct_" & i).Text) Then
                                newTask.SetCellValue2 Plan.Range("Plan.CostNameRange").Column + 2 + ((i - 1) * 3), (n.SelectSingleNode("forecast_ct_" & i).Text)
 '                           If IsNumeric(n.SelectSingleNode("base_ct_" & i).Text) Then
                                newTask.SetCellValue2 Plan.Range("Plan.CostNameRange").Column + 3 + ((i - 1) * 3), (n.SelectSingleNode("base_ct_" & i).Text)
                        Else
                            'If IsNumeric(n.SelectSingleNode("base_ct_" & i).Text) Then _'
'                                newTask.SetCellValue2 Plan.Range("Plan.CostNameRange").Column + 1 + ((i - 1) * 5), (n.SelectSingleNode("base_ct_" & i).Text)
'                            'If IsNumeric(n.SelectSingleNode("change_ct_" & i).Text) Then _'
'                                newTask.SetCellValue2 Plan.Range("Plan.CostNameRange").Column + 2 + ((i - 1) * 5), (n.SelectSingleNode("change_ct_" & i).Text)
'                            'If IsNumeric(n.SelectSingleNode("actual_ct_" & i).Text) Then _'
'                                newTask.SetCellValue2 Plan.Range("Plan.CostNameRange").Column + 3 + ((i - 1) * 5), (n.SelectSingleNode("actual_ct_" & i).Text)
                        
                        End If
                     
                    Next
                    

                 
                    
                Case "M"
                    newTask.SetProgress CastStringToVar(n.SelectSingleNode("progress").Text)
                    If Not n.SelectSingleNode("keymst") Is Nothing Then _
                        newTask.SetKeyMST n.SelectSingleNode("keymst").Text
                    'SetDateOrFormula newTask, n, "Plan.BaselineStartColumn", "basestart"
                    'If baseline Then
                    '    SetDateOrFormula newTask, n, "Plan.StartColumn", "start"
                    'End If
            End Select
            lastlevel = level
        Next
        
        'formeln k|fffd|nnen sich auch auf tasks untehab des aktuellen Tasks  beziehen, dashalb m|fffd|ssen
        'die Formeln erst nach den Tasks gesetzt werden
        iIndex = Plan.Range("Plan.ProjectHeader").row
        For Each n In Node.SelectNodes("tasks/task")
            iIndex = iIndex + 1
            Set newTask = New TPGTask
            newTask.SetIndex iIndex 'tFooter.TaskRowIndex - 1
            taskType = n.SelectSingleNode("type").Text
            Select Case taskType
                Case "W":
                    SetDateOrFormula newTask, n, "Plan.BaselineStartColumn", "basestart", sversion
                    SetDateOrFormula newTask, n, "Plan.BaselineFinishColumn", "basefinish", sversion
                    If baseline Or BaselineSavedBefore Then 'baseline110716
                        SetDateOrFormula newTask, n, "Plan.StartColumn", "start", sversion
                        SetDateOrFormula newTask, n, "Plan.FinishColumn", "finish", sversion
                    End If
                Case "M"
                    SetDateOrFormula newTask, n, "Plan.BaselineStartColumn", "basestart", sversion
                    If baseline Or BaselineSavedBefore Then 'baseline110716
                        SetDateOrFormula newTask, n, "Plan.StartColumn", "start", sversion
                    End If
            End Select
        Next
        
    End If

subend:

    '/**Plan Speed Enhancement*/
    EnableAggregateSum
    If prot Then ProtectSheet ActiveSheet

    '(kissimport)
    Set TG = Nothing
    Set dRaci = Nothing

    Plan.noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.ImportXml error:"
    Resume subend
End Sub

Private Sub SetDateOrFormula(task As TPGTask, xmlNode As Variant, rangename As String, NodeName As String, sversion As String)
    Dim sformula As String
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "SetDateOrFormula"

    If Not xmlNode.SelectSingleNode(NodeName & "formula") Is Nothing Then
        If xmlNode.SelectSingleNode(NodeName & "formula").Text <> "" Then
            If (sversion = "2.0.00") Or (sversion = "2.0.01") Or (sversion = "2.1.00") Then
                ' as of v.3.0.00 we added the duration column, so when importing formulas of older versions
                'we have to adjust the formula...
''                sformula = xmlNode.SelectSingleNode(NodeName & "formula").Text
''                sformula = Replace(sformula, "OFFSET(RC,0,-2)", "OFFSET(RC,0,-3)")
''                Task.SetCellFormula rangename, sformula
                '070316 FIX
                sformula = xmlNode.SelectSingleNode(NodeName & "formula").Text
                If InStr(sformula, "OFFSET(RC,0,-2)") > 0 Then
                    If IsDate(CastStringToVar(xmlNode.SelectSingleNode(NodeName).Text)) Then task.SetCellValue2 Plan.Range(rangename).Column, (xmlNode.SelectSingleNode(NodeName).Text)
                Else
                    task.SetCellFormula rangename, sformula
                End If
            Else
                task.SetCellFormula rangename, xmlNode.SelectSingleNode(NodeName & "formula").Text
            End If
        Else
            If IsDate(CastStringToVar(xmlNode.SelectSingleNode(NodeName).Text)) Then task.SetCellValue2 Plan.Range(rangename).Column, (xmlNode.SelectSingleNode(NodeName).Text)
        End If
    Else
        If IsDate(CastStringToVar(xmlNode.SelectSingleNode(NodeName).Text)) Then task.SetCellValue2 Plan.Range(rangename).Column, (xmlNode.SelectSingleNode(NodeName).Text)
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.SetDateOrFormula error:"
    Resume subend
End Sub

Public Function ImportMSPCheck(tasksNode As Variant) As Boolean
    Dim s As String
    Dim i As Integer
    Dim n As Variant
    Dim newTask As TPGTask
    Dim IsMilestone As Boolean
    Dim isSummarytask As Boolean
    Dim uid As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "ImportMSPCheck"

    ImportMSPCheck = False
    
    If Not tasksNode Is Nothing Then
        
        'check change of type from W to M or S having work or cost that would be deleted
        s = ""
        i = 0
        For Each n In tasksNode.SelectNodes("Task")
            'no empty lines and not the projectsumarytask
            If n.SelectSingleNode("IsNull").Text = 0 And n.SelectSingleNode("ID").Text <> "0" Then
                IsMilestone = (n.SelectSingleNode("Milestone").Text = "1")
                isSummarytask = (n.SelectSingleNode("Summary").Text = "1")
                
                If IsMilestone Or isSummarytask Then
                    uid = n.SelectSingleNode("UID").Text
                    Set newTask = New TPGTask
                
                    If newTask.FindInPlanByExtId(uid) Then
                        If newTask.GetTyp = "W" And newTask.HasData Then
                            s = s & newTask.GetWBS & " " & newTask.GetTaskName & VBA.vbLf
                            i = i + 1
                        End If
                    End If
                End If
            End If
            If i = 20 Then
                s = s & VBA.vbLf & "..." & VBA.vbLf
                Exit For 'msgbox becomes too big
            End If
        Next
        
        If i > 0 Then
            If appQOCMsg(appGetLOCText("MSPImportWarning") & VBA.vbLf & VBA.vbLf & s & VBA.vbLf & appGetLOCText("ContinueImport")) = VBA.vbOK Then
                ImportMSPCheck = True
            End If
        Else
            ImportMSPCheck = True
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Plan.ImportMSPCheck error:"
    Resume subend
End Function

Public Sub ImportMSP(tasksNode As Variant)
    Dim s As String
    Dim n As Variant
    Dim newTask As TPGTask
    Dim currenttask As TPGTask
    Dim IsMilestone As Boolean
    Dim isSummarytask As Boolean
    Dim uid As String
    Dim level As Integer
    Dim baseline As Boolean
    Dim Progress As Integer
    Dim typ As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "ImportMSP"

    If tasksNode Is Nothing Then GoTo subend
    
    
                
    baseline = IsDate(Plan.Range("Plan.BaselineSaveDate").value)
    Set currenttask = New TPGTask
    currenttask.SetIndex Plan.Range("Plan.ProjectHeader").row + 1
    For Each n In tasksNode.SelectNodes("Task")
        If n.SelectSingleNode("IsNull").Text = 0 And n.SelectSingleNode("ID").Text <> "0" Then
            uid = n.SelectSingleNode("UID").Text
            IsMilestone = (n.SelectSingleNode("Milestone").Text = "1")
            isSummarytask = (n.SelectSingleNode("Summary").Text = "1")
            level = n.SelectSingleNode("OutlineLevel").Text
            typ = "W"
            If isSummarytask Then
                typ = level
            ElseIf IsMilestone Then
                typ = "M"
            End If
            
            Set newTask = New TPGTask
            
            If currenttask.GetExtId = uid And currenttask.TaskRowIndex < Plan.Range("Plan.ProjectFooter").row Then
                'update currenttask
                newTask.SetIndex currenttask.TaskRowIndex
                'newTask.SetLevel level
                
                If typ <> newTask.GetTyp Then
                    newTask.FormatRow level, typ, False
                Else
                    newTask.FormatRow level, typ, True
                End If
            Else
                'find task
                If newTask.FindInPlanByExtId(uid) Then
                    'move task to current position
                                
                    'Plan.Cells(newTask.TaskRowIndex, 1).EntireRow.Cut
                    RCut Plan.Cells(newTask.TaskRowIndex, 1).EntireRow
                    CellFunctions.InsertWrapped Plan.Cells(currenttask.TaskRowIndex, 1).EntireRow
                    newTask.SetIndex currenttask.TaskRowIndex
                    If typ <> newTask.GetTyp Then
                        newTask.FormatRow level, typ, False
                    Else
                        newTask.FormatRow level, typ, True
                    End If
                Else
                    'Insert newTask
                    currenttask.InsertTask (IsMilestone)
                    newTask.SetIndex currenttask.TaskRowIndex - 1
                    newTask.SetCellValue "Plan.ExtIdColumn", n.SelectSingleNode("UID").Text
                    
                    newTask.FormatRow level, typ, False
                End If
            End If
            
            newTask.SetTaskName n.SelectSingleNode("Name").Text
            If Not isSummarytask Then
                Progress = n.SelectSingleNode("PercentComplete").Text
                If IsMilestone Then
                    If Progress = 100 Then
                        newTask.SetProgress 100
                    Else
                        newTask.SetProgress 0
                    End If
                Else
                    If Progress = 100 Then
                        newTask.SetProgress 100
                    ElseIf Progress >= 75 Then
                        newTask.SetProgress 75
                    ElseIf Progress >= 50 Then
                        newTask.SetProgress 50
                    ElseIf Progress >= 25 Then
                        newTask.SetProgress 25
                    Else
                        newTask.SetProgress 0
                    End If
                End If
                
                newTask.LockBaseline baseline
                If baseline Then
                    'TODO: FIX ME!
                    'If IsDate(n.SelectSingleNode("Start").text) Then newTask.SetCellValue2 Plan.Range("Plan.StartColumn").Column, CDate(n.SelectSingleNode("Start").text)
                    s = VBA.Left(n.SelectSingleNode("Start").Text, 10)
                    If IsDate(s) Then newTask.SetCellValue2 Plan.Range("Plan.StartColumn").Column, CDate(s)
                    If Not IsMilestone Then
                        'If IsDate(n.SelectSingleNode("Finish").text) Then newTask.SetCellValue2 Plan.Range("Plan.FinishColumn").Column, CDate(n.SelectSingleNode("Finish").text)
                        s = VBA.Left(n.SelectSingleNode("Finish").Text, 10)
                        If IsDate(s) Then newTask.SetCellValue2 Plan.Range("Plan.FinishColumn").Column, CDate(s)
                    End If
                Else
                    s = VBA.Left(n.SelectSingleNode("Start").Text, 10)
                    If IsDate(s) Then newTask.SetCellValue2 Plan.Range("Plan.BaselineStartColumn").Column, CDate(s)
                    If Not IsMilestone Then
                        s = VBA.Left(n.SelectSingleNode("Finish").Text, 10)
                        If IsDate(s) Then newTask.SetCellValue2 Plan.Range("Plan.BaselineFinishColumn").Column, CDate(s)
                    End If
                End If
            End If
            currenttask.SetIndex newTask.TaskRowIndex + 1
        End If
    Next
    
    'all remaining tasks with ExtId that were not imported again are now at the end of the tasklist and will be
    'set to level 1 and converted to W if typ is S
    With currenttask
        Do While .GetExtId <> ""
            .SetExtId ""
            If .GetTyp = "S" Then
                .FormatRow 1, "W", False
            Else
                .FormatRow 1, .GetTyp, True
            End If
            .SetIndex .TaskRowIndex + 1
        Loop
        
        If .TaskRowIndex < Plan.Range("Plan.ProjectFooter").row Then
            If .GetLevel <> 1 Then
                AppInfoMsg appGetLOCText("CkeckOutlineStructure")
            End If
        End If
    End With
            
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.ImportMSP error:"
    Resume subend
End Sub


Public Sub reset()
    Dim R As Range
    Dim firstrow As Integer
    Dim lastrow As Integer
    'Delete all tasks
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "reset"

    firstrow = Plan.Range("Plan.ProjectHeader").row + 1
    lastrow = Plan.Range("Plan.ProjectFooter").row - 1
    If lastrow - firstrow + 1 >= 1 Then
        Plan.Range(Plan.rows(firstrow), Plan.rows(lastrow)).EntireRow.Delete xlShiftUp
    End If
        
    'Delete RACI
    Set R = Range("Plan.Roles")
    If R.Columns.Count > 2 Then
        Me.Activate
        'MoveControlsHorizontally Plan, 0 - (r.columns.count - 2), "R", 25
        R.Resize(ColumnSize:=R.Columns.Count - 2).offset(ColumnOffset:=1).EntireColumn.Delete
    End If
    
    ''Code removed for SALK
'    'Delete Worktypes
'    If Me.Range("Plan.WorkTypeNameRange").Columns.Count > 2 Then
'        getRange(Me, "Plan.WorkTypeNameRange", 0, -2, 0, 1).EntireColumn.Delete
'    End If
'
'    'Delete WorkCostTypes
'    If Me.Range("Plan.WorkCostNameRange").Columns.Count > 2 Then
'        getRange(Me, "Plan.WorkCostNameRange", 0, -2, 0, 1).EntireColumn.Delete
'    End If
'
'    'Delete CostTypes
'    If Me.Range("Plan.CostNameRange").Columns.Count > 2 Then
'        getRange(Me, "Plan.CostNameRange", 0, -2, 0, 1).EntireColumn.Delete
'    End If
    
    BaselineLock False
    Range("Plan.BaselineSaveDate").value = ""
    Range("Plan.BaselineSavedBefore").value = "" 'baseline110716
    Intersect(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.StatusColumn")).value = "..."

    Set R = Intersect(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.WPSpecColumn"))
    R.value = ""
    R.Interior.Color = Intersect(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.ResponsibleColumn")).Interior.Color

    Config.Range("Config.WTS").ClearContents

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.reset error:"
    Resume subend
End Sub


'procedure wird nicht verwendet
Private Sub SetRenewGuids()
    Dim currenttask As TPGTask
    Dim startRowIndex As Integer
    Dim endRowIndex As Integer
    Dim currentIndex As Integer
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "SetRenewGuids"

    
    Set currenttask = New TPGTask
    
    startRowIndex = Plan.Range("Plan.ProjectHeader").row
    endRowIndex = Plan.Range("Plan.ProjectFooter").row - 1

    For currentIndex = startRowIndex To endRowIndex
        currenttask.SetIndex currentIndex
        currenttask.SetUid StGuidGen
    Next
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.SetRenewGuids error:"
    Resume subend
End Sub

Public Sub cmdJumpToWP_Click()
    Dim planWPTable As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "cmdJumpToWP_Click"

    Set planWPTable = New TPGTable
    On Error Resume Next ' zum Beispiel wenn das AP Sheet hidden ist wegen Komplexitaet Setting
    planWPTable.SetTable Me.Range("Plan.WPs"), True, False, TemplateBeforeHeader, 2
    If ActiveCell.row >= planWPTable.firstrow And ActiveCell.row <= planWPTable.lastrow Then
        WPDetails.Range("WPDetails!$A$1").value = ActiveCell.row - planWPTable.firstrow + 2
        wp.cboWPs_Change
        Sheets(appGetLOCText("WPSheet")).Select
    End If

subend:
    modStack.PopCallStack
    modApp.UnprotectSheet Plan ' we have to unprotect again, otherwise problems later
    Exit Sub
suberr:
    AppErrMsg "Plan.cmdJumpToWP_Click error:"
    Resume subend
End Sub


Public Sub ImportSQL()
    Dim s As String
    Dim newTask As TPGTask
    Dim currenttask As TPGTask
    Dim IsMilestone As Boolean
    Dim isSummarytask As Boolean
    Dim uid As String
    Dim level As Integer
    Dim baseline As Boolean
    Dim Progress As Integer
    Dim typ As String
    Dim task As TPGSQLTask
    Dim i As Integer
    Dim iWorkTypeColumn As Integer
    Dim rWorkType As Range
    Dim sDepartment As String
    Dim rCell As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "ImportSQL"
    
    If Not modSQL.GetSQLData Then GoTo subend
    'modSQL.AddTestData
    
    'sync missing OrgUnits to contract?
    Plan.UpdatePlan_Click
    For i = 1 To modSQL.cDepartments.Count
        sDepartment = modSQL.cDepartments(i)
        If Not sDepartment = "" Then
        
            With Contract.GetResourcesTable.ValuesRange(2)
                Set rCell = .Find(What:=sDepartment, LookIn:=xlValues, LookAt:=xlWhole, _
                             SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
            End With
            
            If rCell Is Nothing Then
                Contract.Activate
                If MsgBox(appGetLOCText("msgOrgUnitNotFound1") & sDepartment & appGetLOCText("msgOrgUnitNotFound2"), vbYesNo, "MS Project Import") = vbYes Then
                    With Contract.GetResourcesTable.ValuesRange(2)
                        Set rCell = .Find(What:="", LookIn:=xlValues, LookAt:=xlWhole, _
                                     SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
                    End With
                    If rCell Is Nothing Then
                        Set rCell = Contract.GetResourcesTable.ValuesRange(2).Cells(Contract.GetResourcesTable.ValuesRange(2).rows.Count, 1)
                        rCell.offset(2, 0).Select
                        Contract.cmdInsert_Click
                        rCell.offset(1, 0).value = sDepartment
                    Else
                        rCell.value = sDepartment
                    End If
                End If
                Plan.Activate
            End If
        End If
    Next
    Plan.UpdatePlan_Click
    
    baseline = IsDate(Plan.Range("Plan.BaselineSaveDate").value)
    Set currenttask = New TPGTask
    currenttask.SetIndex Plan.Range("Plan.ProjectHeader").row + 1
    
    If Not InitialProcName = "Admin.cmdClearPHB_Click" Then _
        modStack.ShowProgressBar modSQL.cTasks.Count, "Importing Plan from MS Project", "CellFunctions.InsertWrapped"
    
    For i = 2 To modSQL.cTasks.Count 'first task is project, not a task
        Set task = modSQL.cTasks(i)
    
        'If n.SelectSingleNode("IsNull").Text = 0 And n.SelectSingleNode("ID").Text <> "0" Then
            uid = task.sTaskGUID
            IsMilestone = task.bIsMilestone
            isSummarytask = task.bIsSummaryTask
            level = task.iOutlineLevel
            
            typ = "W"
            If isSummarytask Then
                typ = level
            ElseIf IsMilestone Then
                typ = "M"
            End If
            
            Set newTask = New TPGTask
            
            If currenttask.GetExtId = uid And currenttask.TaskRowIndex < Plan.Range("Plan.ProjectFooter").row Then
                'update currenttask
                newTask.SetIndex currenttask.TaskRowIndex
                'newTask.SetLevel level
                
                If typ <> newTask.GetTyp Then
                    newTask.FormatRow level, typ, False
                Else
                    newTask.FormatRow level, typ, True
                End If
            Else
                'find task
                If newTask.FindInPlanByExtId(uid) Then
                
                    'move task to current position
                    'Plan.Cells(newTask.TaskRowIndex, 1).EntireRow.Cut
                    RCut Plan.Cells(newTask.TaskRowIndex, 1).EntireRow
                    CellFunctions.InsertWrapped Plan.Cells(currenttask.TaskRowIndex, 1).EntireRow
                    newTask.SetIndex currenttask.TaskRowIndex
                    If typ <> newTask.GetTyp Then
                        newTask.FormatRow level, typ, False
                    Else
                        newTask.FormatRow level, typ, True
                    End If
                Else
                    currenttask.InsertTask (IsMilestone)
                    newTask.SetIndex currenttask.TaskRowIndex - 1
                    newTask.SetCellValue "Plan.ExtIdColumn", task.sTaskGUID
                    newTask.FormatRow level, typ, False
                End If
            End If
            
            newTask.SetTaskName task.sTaskName
            
            If Not isSummarytask Then
            
                Progress = task.dPctComplete
                If IsMilestone Then
                    If Progress = 100 Then
                        newTask.SetProgress 100
                    Else
                        newTask.SetProgress 0
                    End If
                Else
                    newTask.SetProgress Progress
                End If
                
               
                Dim j As Integer
                newTask.LockBaseline baseline
                If baseline Then
                    'TODO: FIX ME!
                    s = VBA.Left(task.dstart, 10)
                    If IsDate(s) Then newTask.SetCellValue2 Plan.Range("Plan.StartColumn").Column, CDate(s)
                    
                    If Not IsMilestone Then
                        s = VBA.Left(task.dfinish, 10)
                        If IsDate(s) Then newTask.SetCellValue2 Plan.Range("Plan.FinishColumn").Column, CDate(s)
                        
                        For j = 1 To task.cDepartment.Count
                            sDepartment = task.cDepartment(j)
                             'raises error 91 if it doesn't exist
                            iWorkTypeColumn = SearchNameInRange(Plan.Range("Plan.WorkTypeNameRange"), sDepartment).Column
                            If iWorkTypeColumn > 0 Then
                                Set rWorkType = Plan.Cells(newTask.TaskRowIndex, iWorkTypeColumn)
                                rWorkType.offset(0, 1).value = task.TotalWork(sDepartment) - rWorkType.value
                                rWorkType.offset(0, 2).value = task.ActualWork(sDepartment)
                                iWorkTypeColumn = 0
                            End If
                        Next
                        
                    End If
                
                Else
                    s = VBA.Left(task.dstart, 10)
                    If IsDate(s) Then newTask.SetCellValue2 Plan.Range("Plan.BaselineStartColumn").Column, CDate(s)
                    
                    If Not IsMilestone Then
                        s = VBA.Left(task.dfinish, 10)
                        If IsDate(s) Then newTask.SetCellValue2 Plan.Range("Plan.BaselineFinishColumn").Column, CDate(s)
                        
                        For j = 1 To task.cDepartment.Count
                            sDepartment = task.cDepartment(j)
                             'raises error 91 if it doesn't exist
                            iWorkTypeColumn = SearchNameInRange(Plan.Range("Plan.WorkTypeNameRange"), sDepartment).Column
                            If iWorkTypeColumn > 0 Then
                                Set rWorkType = Plan.Cells(newTask.TaskRowIndex, iWorkTypeColumn)
                                rWorkType.value = task.TotalWork(sDepartment)
                                rWorkType.offset(0, 2).value = task.ActualWork(sDepartment)
                                iWorkTypeColumn = 0
                            End If
                        Next
                    End If
                    
                End If
                
            End If
            currenttask.SetIndex newTask.TaskRowIndex + 1
        'End If
    Next
    Cover.Range("Cover.ProjectName") = task.sProjectName
    
    'all remaining tasks with ExtId that were not imported again are now at the end of the tasklist and will be
    'set to level 1 and converted to W if typ is S
    With currenttask
        Do While .GetExtId <> ""
            .SetExtId ""
            If .GetTyp = "S" Then
                .FormatRow 1, "W", False
            Else
                .FormatRow 1, .GetTyp, True
            End If
            .SetIndex .TaskRowIndex + 1
        Loop
        
        If .TaskRowIndex < Plan.Range("Plan.ProjectFooter").row Then
            If .GetLevel <> 1 Then
                AppInfoMsg appGetLOCText("CkeckOutlineStructure")
            End If
        End If
    End With
            
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    If err.Number = 91 Then Resume Next
    AppErrMsg
    Resume subend
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    On Error GoTo suberr
'perf improvement:
'    modStack.PushCallStack "Plan", "Worksheet_BeforeRightClick"

    Dim iFirstRow As Integer
    Dim ilastrow As Integer
    Dim iTasksColumn As Integer
    Dim rWPNames As Range
    Dim rBaseDates As Range
    Dim rFinishDates As Range
    
    iFirstRow = Plan.Range("Plan.ProjectHeader").row + 1
    ilastrow = Plan.Range("Plan.ProjectFooter").row
    iTasksColumn = Plan.Range("Plan.TaskNameColumn").Column
    Set rWPNames = Plan.Range(Plan.Cells(iFirstRow, iTasksColumn), Plan.Cells(ilastrow, iTasksColumn))
    Set rBaseDates = Plan.Range(Plan.Cells(iFirstRow, Plan.Range("Plan.BaselineStartColumn").Column), Plan.Cells(ilastrow, Plan.Range("Plan.BaselineFinishColumn").Column))
    Set rFinishDates = Plan.Range(Plan.Cells(iFirstRow, Plan.Range("Plan.StartColumn").Column), Plan.Cells(ilastrow, Plan.Range("Plan.FinishColumn").Column))
    
    If selection.Cells.Count > 1 Then
'        modContextMenu.RestoreDefaultMenu
        'only when one area selected in col. name we show grouptaskcontext
        If (InRange(Target, rWPNames)) And (Target.Areas.Count = 1) Then
            BuildGroupTaskContext
        Else
            modContextMenu.RestoreDefaultMenu
        End If
    ElseIf InRange(Target, rWPNames) Then ' Plan.Range("Plan.WPs").offset(0, 4)) Then
        'we don't have to show the copy function in the contextmenu when it's a phase
        If (Plan.Cells(Target.row, Plan.Range("Plan.TypColumn").Column).value <> "S") Then
            BuildTaskContext
        Else
            BuildTaskContext False
        End If
    ElseIf InRange(Target, rBaseDates) Then
        If Not Target.locked Then
            BuildTaskDateContext
        Else
            modContextMenu.RestoreDefaultMenu
        End If
    ElseIf InRange(Target, rFinishDates) Then
        If Not Target.locked Then
            BuildTaskDateContext
        Else
            modContextMenu.RestoreDefaultMenu
        End If
    Else
        modContextMenu.RestoreDefaultMenu
    End If

subend:
'    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.Worksheet_BeforeRightClick error:"
    Resume subend
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    If noupdate Then Exit Sub
    'KISS ONLY
    If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
        'in case of an update of the responsible of a task
        'we need to update the roles of this task, this to enable a correct export
        'of the task responsible
        If InRange(Target, Plan.Range("Plan.Responsiblecolumn")) Then
            If (Target.row > Plan.Range("Plan.ProjectHeader").row) And _
                (Target.row < Plan.Range("Plan.ProjectFooter").row) And _
                (Target.Cells.Count = 1) Then
                Dim Count As Integer: Count = Plan.Range("Plan.Roles").Columns.Count
                If Count > 2 Then
                    Dim R As Range
                    'reset all roles for current task
                    For Each R In Intersect(Plan.Range("Plan.Roles").Resize(ColumnSize:=Count - 2).offset(ColumnOffset:=1), Plan.Range("$" + Trim(str(Target.row)) + ":$" + Trim(str(Target.row))))
                        R.ClearContents
                    Next
                    If (Not IsEmpty(Target.value)) And (Target.value <> "") Then
                        'set new responsible in roles
                        For Each R In Intersect(Plan.Range("Plan.Roles").Resize(ColumnSize:=Count - 2).offset(ColumnOffset:=1), Plan.Range("Plan.ProjectHeader")).offset(-2)
                            If R.value = Target.value Then
                                Plan.Cells(Target.row, R.Column).value = appGetLOCText("R")
                            End If
                        Next
                    End If
                End If
            End If
        End If
    End If

End Sub

Private Sub Worksheet_Deactivate()
    modContextMenu.RestoreDefaultMenu
End Sub

Public Function IsMilestone(uid As String, Optional bonlykeymst As Boolean = False) As Boolean
    Dim c As Range
    IsMilestone = False
    For Each c In Plan.Range(Intersect(Plan.Range("Plan.UidColumn"), Plan.Range("Plan.ProjectHeader")), Intersect(Plan.Range("Plan.UidColumn"), Plan.Range("Plan.ProjectFooter")))
'        If c.value = uid And Plan.Cells(c.row, Plan.Range("Plan.MTAColumn").column) = "x" Then
        If c.value = uid And Plan.Cells(c.row, Plan.Range("Plan.TypColumn").Column) = "M" Then
            If bonlykeymst Then
                If LCase(Plan.Cells(c.row, Plan.Range("Plan.KeyMSTColumn").Column) = "x") Then
                    IsMilestone = True
                End If
            Else
                IsMilestone = True
            End If
            Exit Function
        End If
    Next
End Function


Public Function ValidateMilestones() As Boolean
    Dim Error As Boolean
    Dim ErrorTasks As String
    Dim countErrorTasks As Integer
    Dim startRowIndex As Integer
    Dim endRowIndex As Integer
    Dim currentIndex As Integer
    Dim currenttask As TPGTask
    
    ErrorTasks = ""
    countErrorTasks = 0
    
    ValidateMilestones = True
    Set currenttask = New TPGTask
    startRowIndex = Plan.Range("Plan.ProjectHeader").row
    endRowIndex = Plan.Range("Plan.ProjectFooter").row - 1

    For currentIndex = startRowIndex To endRowIndex
        currenttask.SetIndex currentIndex
        If Not currenttask.IsMilestone Then GoTo noMS
        If Not currenttask.Valid Then
            ValidateMilestones = False
            countErrorTasks = countErrorTasks + 1
            If countErrorTasks < 20 Then
                ErrorTasks = ErrorTasks & currenttask.GetWBS & " " & currenttask.GetTaskName & vbLf
            ElseIf countErrorTasks = 20 Then
                ErrorTasks = ErrorTasks & "..."
            End If
        End If
noMS:
    Next
    
    If Not ValidateMilestones Then
        ErrorTasks = countErrorTasks & " " & appGetLOCText("InvaliddatesMS") & vbLf & vbLf & ErrorTasks
        AppInfoMsg ErrorTasks
    End If
End Function

Public Function GetMilestoneGuids() As Collection
    Dim GUIDs As Collection
    Dim R As Range
    Dim t As TPGTask
    
    Set t = New TPGTask
    Set GUIDs = New Collection
    
    For Each R In Plan.Range(Intersect(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.UIDColumn")), Intersect(Plan.Range("Plan.ProjectFooter"), Plan.Range("Plan.UIDColumn")))
        If t.FindInPlanByUId(R.value) Then
            If t.IsMilestone Then
                'we only allow keymsts
                If LCase(t.GetKeyMST) = "x" Then
                    GUIDs.Add R.value
                End If
            End If
        End If
    Next
    Set GetMilestoneGuids = GUIDs
End Function





Rem SUBPROJECT-RELATED
Public Sub cmdImportSubProject_Click()
    Dim rCell As Range
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "cmdImportSubProject_Click"
    modConst.bNoNormalProtectActionsRequired = True

    'phb has to be in program mode
    If Cover.Range("Cover.Complexity").value <> "Programm" Then
        AppStopMsg appGetLOCText("msgNotInProgramMode")
        GoTo subend
    End If
    
    'subprojectImport only allowed when not in person planning mode
    If Plan.PersonsInPlan Then
        AppStopMsg appGetLOCText("msgSubPrjImportPersPlan")
        GoTo subend
    Else
        Set rCell = Team.Range("Team.IsResourceRange").Find("x", , xlValues, xlWhole)
        'persons are selected as resource in team sheet, so we are in personplanning
        If Not rCell Is Nothing Then
            AppStopMsg appGetLOCText("msgSubPrjImportPersPlan")
            GoTo subend
        End If
        Set rCell = Nothing
    End If

    Import.ImportSubProject
    Plan.Activate
    Plan.Calculate
    ActiveSheet.UsedRange

subend:
    modConst.bNoNormalProtectActionsRequired = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.cmdImportSubProject_Click error:"
    Resume subend
End Sub

Public Sub ImportSubProjectXml(Node As Variant, projName As String, projectnumber As String, projPath As String, sversion As String)
    ' the sub project team members must have been imported and the roles must have been updated before calling this
    Dim i As Integer
    Dim n As Variant
    Dim m As TPGMember
    Dim WTS As New TPGWorkTypes
    Dim WT As TPGWorkType
    Dim cts As New TPGCostTypes
    Dim ct As TPGCostType
    Dim tFooter As TPGTask
    Dim newTask As TPGTask
    Dim taskType As String
    Dim level As Integer
    Dim lastlevel As Integer
    Dim baseline As Boolean
    Dim positions As Collection
    Dim bimportweight As Boolean
        
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "ImportSubProjectXml"

    
    If Node Is Nothing Then GoTo subend
 
    '/**Plan Speed Enhancement*/
    Dim prot As Boolean
    
    
    'we will only import weighting data if this module is active, otherwise the default 100% is applied
    If ModuleExists("WPWeighting") Then bimportweight = True

'    Plan.Range("Plan.BaselineSaveDate").value = node.SelectSingleNode("baseline").text
    baseline = IsDate(Plan.Range("Plan.BaselineSaveDate").value)
    Application.ScreenUpdating = False
    'Templates
    Set newTask = New TPGTask
    newTask.SetIndex Range("plan.TaskTemplateLevel_W").row
    newTask.LockBaseline baseline

    newTask.SetIndex Range("plan.TaskTemplateLevel_M").row
    newTask.LockBaseline baseline
    
' Insert sub project header
'        Intersect(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.StatusColumn")).value = node.SelectSingleNode("status").text
            
    'find the insertion point
    Set tFooter = New TPGTask
    Set newTask = GetTPGTask
    If newTask Is Nothing Then
        tFooter.SetIndex (Plan.Range("Plan.ProjectFooter").row)
    Else
        tFooter.SetIndex (newTask.GetRootParentIndex)
    End If
    
    Application.ScreenUpdating = False
    tFooter.InsertTask (taskType = "S")
    
    Application.ScreenUpdating = False
    Set newTask = New TPGTask
    newTask.SetIndex tFooter.TaskRowIndex - 1
    Do While newTask.GetLevel > 1
        newTask.OutdentTask
    Loop
    Intersect(Plan.Cells(tFooter.GetCell("Plan.StatusColumn").row - 1, 1).EntireRow, Plan.Range("Plan.StatusColumn")).value = Node.SelectSingleNode("status").Text
    Intersect(Plan.Cells(tFooter.GetCell("Plan.StatusColumn").row - 1, 1).EntireRow, Plan.Range("Plan.TaskNameColumn")).value = projName
    Intersect(Plan.Cells(tFooter.GetCell("Plan.StatusColumn").row - 1, 1).EntireRow, Plan.Range("Plan.ExtIdColumn")).value = projectnumber & " | {Path " & projPath & "}"
    
    '/**Plan Speed Enhancement*/
    prot = Plan.ProtectContents
    UnprotectSheet Plan
    DisableAggregateSum
    
    
    For Each n In Node.SelectNodes("tasks/task")
        Application.ScreenUpdating = False
        taskType = n.SelectSingleNode("type").Text
        ' subprojects are imported always at level 1 thus we have to increment all other levels
        level = CastStringToVar(n.SelectSingleNode("level").Text) + 1
        
        tFooter.InsertTask (taskType = "M")
        Set newTask = New TPGTask
        newTask.SetIndex tFooter.TaskRowIndex - 1
        
        newTask.SetUid TPGGuid.StGuidGen
        
        If Not n.SelectSingleNode("uid") Is Nothing Then
            newTask.SetExtId projectnumber & " | " & n.SelectSingleNode("uid").Text
        Else
            newTask.SetExtId projectnumber & " | {nouid}"
        End If
        ' newTask.SetExtId n.SelectSingleNode("extid").text
        
        newTask.SetTaskName n.SelectSingleNode("taskname").Text
        newTask.SetStatus n.SelectSingleNode("status").Text
        
        If lastlevel < level Then
            For i = lastlevel To level
                newTask.IndentTask
            Next i
'            ElseIf lastlevel > level + 1 Then
        ElseIf lastlevel > level Then
            For i = level + 1 To lastlevel
                newTask.OutdentTask
            Next i
        End If
            
        If bimportweight Then
            If Not n.SelectSingleNode("weighting") Is Nothing Then
                newTask.SetWeighting CastStringToVar(n.SelectSingleNode("weighting").Text)
            End If
        End If
        
        Application.ScreenUpdating = False
        Select Case taskType
            Case "W":
                newTask.SetProgress CastStringToVar(n.SelectSingleNode("progress").Text)
                
                Set positions = GetRaciPositions(Node)
                For i = 1 To Node.SelectNodes("roles/role").length
                    newTask.SetCellValue2 Plan.Range("Plan.Roles").Column + positions(i), n.SelectSingleNode("raci" & i).Text
                Next
                
                SetDateOrFormula newTask, n, "Plan.BaselineStartColumn", "basestart", sversion
                SetDateOrFormula newTask, n, "Plan.BaselineFinishColumn", "basefinish", sversion
                
                If baseline Then
                    SetDateOrFormula newTask, n, "Plan.StartColumn", "start", sversion
                    SetDateOrFormula newTask, n, "Plan.FinishColumn", "finish", sversion
                End If
                
                Set positions = GetWorkTypePositions(Node)
                For i = 1 To Node.SelectNodes("worktypes/worktype").length
                    If IsNumeric(CastStringToVar(n.SelectSingleNode("base_wt_" & i).Text)) Then _
                        newTask.SetCellValue2 Plan.Range("Plan.WorkTypeNameRange").Column + positions(i) + 0, CastStringToVar(n.SelectSingleNode("base_wt_" & i).Text)
                    If IsNumeric(CastStringToVar(n.SelectSingleNode("change_wt_" & i).Text)) Then _
                        newTask.SetCellValue2 Plan.Range("Plan.WorkTypeNameRange").Column + positions(i) + 1, CastStringToVar(n.SelectSingleNode("change_wt_" & i).Text)
                    If IsNumeric(CastStringToVar(n.SelectSingleNode("actual_wt_" & i).Text)) Then _
                        newTask.SetCellValue2 Plan.Range("Plan.WorkTypeNameRange").Column + positions(i) + 2, CastStringToVar(n.SelectSingleNode("actual_wt_" & i).Text)
                Next
                Set positions = GetCostPositions(Node)
                For i = 1 To Node.SelectNodes("costtypes/costtype").length
                    If IsNumeric(CastStringToVar(n.SelectSingleNode("base_ct_" & i).Text)) Then _
                        newTask.SetCellValue2 positions(i) + 0, CastStringToVar(n.SelectSingleNode("base_ct_" & i).Text)
'                        newTask.SetCellValue2 Plan.Range("Plan.CostNameRange").Column + 1 + ((i - 1) * 6), CDbl(n.SelectSingleNode("base_ct_" & i).text)
                    If IsNumeric(CastStringToVar(n.SelectSingleNode("change_ct_" & i).Text)) Then _
                        newTask.SetCellValue2 positions(i) + 1, CastStringToVar(n.SelectSingleNode("change_ct_" & i).Text)
                    If IsNumeric(CastStringToVar(n.SelectSingleNode("actual_ct_" & i).Text)) Then _
                        newTask.SetCellValue2 positions(i) + 2, CastStringToVar(n.SelectSingleNode("actual_ct_" & i).Text)
'                    If IsNumeric(n.SelectSingleNode("obligo_ct_" & i).Text) Then _
'                        newTask.SetCellValue2 positions(i) + 3, CDbl(n.SelectSingleNode("obligo_ct_" & i).Text)
                Next
            Case "M"
                newTask.SetProgress CastStringToVar(n.SelectSingleNode("progress").Text)
                SetDateOrFormula newTask, n, "Plan.BaselineStartColumn", "basestart", sversion
                If baseline Then
                    SetDateOrFormula newTask, n, "Plan.StartColumn", "start", sversion
'                    If IsDate(n.SelectSingleNode("start").text) Then newTask.SetCellValue2 Plan.Range("Plan.StartColumn").column, CDate(n.SelectSingleNode("start").text)
                End If
                If Not n.SelectSingleNode("keymst") Is Nothing Then
                    newTask.SetKeyMST n.SelectSingleNode("keymst").Text
                End If
        End Select

        lastlevel = level
    Next
    Application.ScreenUpdating = False
    FoldImportedAPs newTask

subend:
    '/**Plan Speed Enhancement*/
    EnableAggregateSum
    If prot Then ProtectSheet ActiveSheet
 
    Application.ScreenUpdating = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.ImportSubProjectXml error:"
    Resume subend
End Sub

Private Sub FoldImportedAPs(lastAP As TPGTask)
    ' crawl from bottonm to top and fold all summary tasks
    Dim Cancel As Boolean
    Do While lastAP.GetLevel > 1
        lastAP.FindPrevious
        If lastAP.isSummarytask And lastAP.GetLevel = 2 Then Worksheet_BeforeDoubleClick (Plan.Cells(lastAP.TaskRowIndex, Range("Plan.OpenCollapseColumn").Column)), Cancel
    Loop
End Sub
Private Function GetRaciPositions(Node As Variant) As Collection
    ' the sub project team members must have been imported and the roles must have been updated beforehand
    Dim positions As Collection
    Dim n As Variant
    
    Set positions = New Collection
    For Each n In Node.SelectNodes("roles/role")
        positions.Add GetRaciPosition(n.SelectSingleNode("name").Text)
    Next
    Set GetRaciPositions = positions
End Function
Private Function GetRaciPosition(Name As String) As Integer
    Dim Roles, found As Range
    GetRaciPosition = 0
    
    Set Roles = Intersect(Range("Plan.Roles"), Range("Plan.Projectheader")).offset(-2)
    Set found = Roles.Find(Name, , xlValues, xlWhole, , , False)
    If found Is Nothing Then Exit Function
    GetRaciPosition = found.Column - Roles.Column
End Function

Private Function GetWorkTypePositions(Node As Variant) As Collection
    ' the sub projects contract must have been imported and the plan must have been updated beforehand
    Dim positions As Collection
    Dim n As Variant
    
    Set positions = New Collection
    For Each n In Node.SelectNodes("worktypes/worktype")
        positions.Add GetWorktypePosition(n.Text)
    Next
    Set GetWorkTypePositions = positions
End Function

Private Function GetWorktypePosition(Name As String) As Integer
    Dim worktypes, found As Range
    GetWorktypePosition = 0
    
    Set worktypes = Intersect(Range("Plan.WorkColumns"), Range("Plan.Projectheader")).offset(-3)
    Set found = worktypes.Find(Name, , xlValues, xlWhole, , , False)
    If found Is Nothing Then Exit Function
    GetWorktypePosition = found.Column - worktypes.Column
End Function

Private Function GetCostPositions(Node As Variant) As Collection
    ' the sub projects contract must have been imported and the plan must have been updated beforehand
    Dim positions As Collection
    Dim n As Variant
    
    Set positions = New Collection
'    For Each n In node.SelectNodes("workcosttypes/workcosttype")
'        positions.Add GetCostPosition(n.text)
'    Next
    For Each n In Node.SelectNodes("costtypes/costtype")
        positions.Add GetCostPosition(n.Text)
    Next
    Set GetCostPositions = positions
End Function

Private Function GetCostPosition(Name As String) As Integer
    Dim worktypes, found As Range
    GetCostPosition = 0
    
    Set worktypes = Intersect(Range("Plan.CostColumns"), Range("Plan.Projectheader")).offset(-3)
    Set found = worktypes.Find(Name, , xlValues, xlWhole, , , False)
    If found Is Nothing Then Exit Function
    GetCostPosition = found.Column ' - worktypes.Column
End Function

Rem PERSONAL PLANNING
Public Function SwitchToDepartments(Optional DisplayWarnings As String = "") As Boolean
    'werte speichern -> config
    'im team "x"e entfernen
    'plan auf departmentebene aktualisieren
    'werte aufaggregieren
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "SwitchToDepartments"
    
    Dim WTS As TPGWorkTypes
    Set WTS = New TPGWorkTypes
    WTS.Load
    If WTS.PlanningMode = "Departments" Then GoTo subend
    WTS.Save
    
    Dim i As Integer
    Dim cDepartments As New Collection
    Dim sDepsMissing As String
    Dim rCell As Range
    
    On Error Resume Next
    For i = 0 To WTS.Count
        cDepartments.Add WTS.WorkType(i).department, WTS.WorkType(i).department
    Next
    On Error GoTo suberr
    
    If DisplayWarnings <> "" Then
        For i = 1 To cDepartments.Count
            Set rCell = Contract.GetResourcesTable.ValuesRange.Find(cDepartments(i), , xlValues, xlWhole)
            If rCell Is Nothing Then sDepsMissing = sDepsMissing & vbLf & cDepartments(i)
        Next
    
    '    If sDepsMissing <> "" Then MsgBox "There are persons assigned but their respective departments are missing: " & sDepsMissing & _
    '                            vbLf & "These Departments will be ignored unless they get registered in the contract sheet."
        'TODO: departments automatisch in den auftrag synchronisieren
    
        If sDepsMissing <> "" Then
            Dim sWarning As String
            Dim sWarningTitle As String
            Select Case DisplayWarnings
                Case "Switch"
                    sWarning = "Es wurden Personen verplant, deren zugeh|fffd|rige " & vbLf & _
                               "Abteilung im Auftrag nicht angelegt ist: " & vbLf & sDepsMissing & vbLf & vbLf & _
                               "Diese Abteilungen werden nicht dargestellt, " & vbLf & _
                               "solange sie nicht im Auftrag angelegt sind." & vbLf & vbLf & _
                               "Bitte zuerst die Abteilungen anlegen im Auftrag?"
                    sWarningTitle = "Achtung"
                    If Cover.Range("Cover.LOC") = 2 Then
                        sWarning = "At least one person has been planned whose" & vbLf & _
                                   "Department does not exist in contract: " & vbLf & sDepsMissing & vbLf & vbLf & _
                                   "Thess departments will not be displayed as" & vbLf & _
                                   "long as they have not been created in contract." & vbLf & vbLf & _
                                   "Please first create the missing departments in the contract"
                        sWarningTitle = "Warning"
                    End If
                    MsgBox sWarning, vbOKOnly, sWarningTitle
                    Contract.Activate
                    SwitchToDepartments = False
                    GoTo subend
                               
                Case "Export"
                    sWarning = "Es wurden Personen verplant, deren zugeh|fffd|rige " & vbLf & _
                               "Abteilung im Auftrag nicht angelegt ist: " & vbLf & sDepsMissing & vbLf & vbLf & _
                               "Diese Abteilungen werden in kein Portfolio |fffd|ber- " & vbLf & _
                               "nommen, solange sie nicht im Auftrag angelegt sind." & vbLf & vbLf & _
                               "Bitte zuerst die Abteilungen anlegen im Auftrag?"
                    If Cover.Range("Cover.LOC") = 2 Then
                        sWarning = "At least one person has been planned whose" & vbLf & _
                                   "Department does not exist in contract: " & vbLf & sDepsMissing & vbLf & vbLf & _
                                   "These departments will not be exported to a portfolio" & vbLf & _
                                   "as long as they have not been created in contract." & vbLf & vbLf & _
                                   "Please first create the missing departments in the contract"
                        sWarningTitle = "Warning"
                    End If
                    MsgBox sWarning, vbOKOnly, sWarningTitle
                    Contract.Activate
                    SwitchToDepartments = False
                    GoTo subend
                Case Else
                    GoTo NoMessage
            End Select
            
            If MsgBox(sWarning, vbYesNo, "Achtung") = vbYes Then
                Contract.Activate
                SwitchToDepartments = False
                GoTo subend
            End If
NoMessage:
        End If
    End If
    Set WTS = New TPGWorkTypes
    WTS.Restore
    
    'Exit Sub
    
    For Each rCell In Team.GetTable.ValuesRange(1)
        If Team.Cells(rCell.row, Team.Range("Team.RoleColumn").Column).value <> "" Then
            rCell.value = ""
        Else
            rCell.value = ""
        End If
    Next
    Plan.UpdatePlan_Click
    
    Dim wts2 As TPGWorkTypes
    Set wts2 = New TPGWorkTypes
    wts2.Load
    
    wts2.AggregateFromPersons WTS
    
    If DisplayWarnings = "Switch" Then
        Select Case Cover.Range("Cover.LOC")
            Case 3: MsgBox "Wenn Sie nun |fffd|nderungen an der Planung vornehmen, so werden diese beim erneuten Umstellen auf Personenplanung verworfen und der Stand vor der Umstellung wird wieder hergestellt.", vbInformation, "Achtung"
            Case 2: MsgBox "If you make changes in planning, they will be lost if you switch back to personal planning again.", vbInformation, "Achtung"
            Case Else
        End Select
    End If
    SwitchToDepartments = True

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Plan.SwitchToDepartments error:"
    Resume subend
End Function

Public Sub SwitchToPersons(Optional DisplayWarnings As Boolean = False)
    'werte laden <- config
    'im tem "x"e setzen
    'plan auf personenebene aktualisieren
    'werte schreiben
    
    On Error GoTo suberr
    modStack.PushCallStack "Plan", "SwitchToPersons"
    
    Dim WTS As TPGWorkTypes
    Set WTS = New TPGWorkTypes
    WTS.Load
    
    If WTS.PlanningMode = "Persons" Then GoTo subend
    If DisplayWarnings Then
        Select Case Cover.Range("Cover.LOC")
            Case 3: If MsgBox("|fffd|nderungen seit der letzten Umstellung gehen verloren", vbOKCancel, "Achtung") = vbCancel Then GoTo subend
            Case 2: If MsgBox("All changes since last switch of planning mode will be lost", vbOKCancel, "Caution") = vbCancel Then GoTo subend
            Case Else
        End Select
    End If
    
    
    Set WTS = New TPGWorkTypes
    WTS.Restore
    
    Dim WT As New TPGWorkType
    Dim i As Integer
    Dim rCell As Range
    
    For i = 1 To WTS.Count
        Set WT = WTS.WorkType(i)
        Set rCell = Team.Range("Team.GUIDColumn").Find(WT.GUID, , xlFormulas, xlWhole)
        If Not rCell Is Nothing Then Team.Cells(rCell.row, Team.Range("Team.IsResourceColumn").Column).value = "x"
        Set rCell = Nothing
    Next
    
    Plan.UpdatePlan_Click
    WTS.WriteToPlan

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.SwitchToPersons error:"
    Resume subend
End Sub

Public Function PersonsInPlan() As Boolean
Dim c As Range
Dim s As String
PersonsInPlan = False
'take first ress. in plan an look whether it is a person
For Each c In Plan.Range("Plan.WorkTypeNameRange")
    If c.value <> "" Then
        s = c.value
        Exit For
    End If
Next
If s <> "" Then
    For Each c In Team.rNames
        If c.value = s Then
            PersonsInPlan = True
            Exit For
        End If
    Next
End If
End Function

Public Function OrgUnitsInPlan() As Boolean
Dim c As Range
Dim s As String
OrgUnitsInPlan = False
'take first ress. in plan an look whether it is a org unit
For Each c In Plan.Range("Plan.WorkTypeNameRange")
    If c.value <> "" Then
        s = c.value
        Exit For
    End If
Next
If s <> "" Then
    For Each c In Admin.Range("Admin.Org")
        If c.value = s Then
            OrgUnitsInPlan = True
            Exit For
        End If
    Next
End If
End Function



Public Sub cmdTogglePlanningMode()
    Dim WTS As TPGWorkTypes
    
    'when phb in program mode then switch to person planning should not be possible
    If (InStr(LCase(Cover.Range("Cover.Complexity").value), "program") > 0) Then
        AppStopMsg appGetLOCText("msgProgNoPersPlanning")
        GoTo subend
    End If
    
    Set WTS = New TPGWorkTypes
    WTS.Load
    
    If WTS.PlanningMode = "Persons" Then
        'we first have to make sure we really have persons in plan sheet
        'if not the its the first time loading persons into plan sheet
        If PersonsInPlan Then
            SwitchToDepartments "Switch"
        Else
'            If DisplayWarnings Then
                Select Case Cover.Range("Cover.LOC")
                    Case 3: If MsgBox("|fffd|nderungen seit der letzten Umstellung gehen verloren", vbOKCancel, "Achtung") = vbCancel Then GoTo subend
                    Case 2: If MsgBox("All changes since last switch of planning mode will be lost", vbOKCancel, "Caution") = vbCancel Then GoTo subend
                    Case Else
                End Select
'            End If
            Me.UpdatePlan_Click
        End If
    Else
        If Config.PersonPlanningDataPresent Then
            SwitchToPersons True
        Else
            AppStopMsg appGetLOCText("msgnopersplandata")
            Team.Activate
        End If
    End If
subend:
    Set WTS = Nothing
End Sub

'Public Function RenameOrgUnitInPlan(sorgold As String, sorgnew As String) As Boolean
'Dim c As Variant
'
'    On Error GoTo suberr
'    modStack.PushCallStack "Plan", "RenameOrgUnitInPlan"
'
'    For Each c In Plan.Range("Plan.WorkTypeNameRange")
'        If (c.Value <> "") And (c.Value = sorgold) Then
'            c.Value = sorgnew
'            Exit For
'        End If
'    Next
'    RenameOrgUnitInPlan = True
'subend:
'    modStack.PopCallStack
'    Exit Function
'suberr:
'    AppErrMsg "Plan.RenameOrgUnitInPlan error:"
'    GoTo subend
'End Function

Public Function RenameOrgUnitInPlan(sorgold As String, sorgnew As String) As Boolean
Dim c As Variant

    On Error GoTo suberr
    modStack.PushCallStack "Plan", "RenameOrgUnitInPlan"
    
    For Each c In Plan.Range("Plan.WorkTypeNameRange")
        If (c.value <> "") And (c.value = sorgold) Then
            c.value = sorgnew
            Exit For
        End If
    Next
    RenameOrgUnitInPlan = True
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Plan.RenameOrgUnitInPlan error:"
    GoTo subend
End Function

Public Sub UpdatePrecedents()
Dim i As Integer
Dim icol As Integer
Dim icoltyp As Integer
Dim icoloffset As Integer

    On Error GoTo suberr
    modStack.PushCallStack "Plan", "UpdatePrecedents"

    icol = Plan.Range("Plan.Col.Prec").Column
    icoltyp = Plan.Range("Plan.TypColumn").Column
    If Not (IsEmpty(Range("Plan.BaselineSaveDate"))) Then
        icoloffset = -3
    Else
        icoloffset = -6
    End If

    For i = Plan.Range("Plan.ProjectHeader").row To (Plan.Range("Plan.ProjectFooter").row - 1)
        If (Me.Cells(i, icoltyp) = "M") Or (Me.Cells(i, icoltyp) = "W") Then
            Me.Cells(i, icol).ClearContents
            If Left(Me.Cells(i, icol + icoloffset).formula, 1) = "=" Then
                Me.Cells(i, icol).value = getprec(Me.Cells(i, icol + icoloffset))
            End If
            Me.Cells(i, icol + 1).ClearContents
            If (Me.Cells(i, icoltyp) = "W") Then
                If Left(Me.Cells(i, icol + 1 + icoloffset).formula, 1) = "=" Then
                    Me.Cells(i, icol + 1).value = getprec(Me.Cells(i, icol + 1 + icoloffset))
                End If
            End If
        Else
            Me.Cells(i, icol).ClearContents
            Me.Cells(i, icol + 1).ClearContents
        End If
        
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Plan.UpdatePrecedents error:"
    GoTo subend
End Sub

Private Function getprec(R As Range) As String
On Error Resume Next

    Dim cell As Range, c As Range
    Set cell = R.DirectPrecedents
    Dim s As String

    If cell Is Nothing Then Exit Function

    For Each c In cell
        'Debug.Print c.Address
        'we excluded self-precedents
        If c.row <> R.row Then _
            s = s + Me.Cells(c.row, Me.Range("Plan.WBSColumn").Column).value + "; "
    Next
    If s <> "" Then getprec = Left(s, Len(s) - 2)

End Function

Public Function CountKeyMSTs() As Integer
    Dim Project As New TPGProject
    Dim task As TPGProjectTask
    Dim ikeymstcount As Integer
    If Plan.Range("Plan.ProjectHeader").row + 1 < Plan.Range("Plan.ProjectFooter").row Then
        For Each task In Project
            If task("Typ") = "M" Then
                If (task("KeyMST") = "x") Then ikeymstcount = ikeymstcount + 1
            End If
        Next
    End If
    CountKeyMSTs = ikeymstcount
End Function
'baseline110716
Public Function BaselineSavedBefore() As Boolean
If Me.Range("Plan.BaselineSavedBefore").value = "1" Then
    BaselineSavedBefore = True
Else
    BaselineSavedBefore = False
End If
End Function

Attribute VB_Name = "RACI"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub cmdUpdate_Click()
    On Error GoTo suberr
    modStack.PushCallStack "RACI", "cmdUpdate_Click"
    If IsDemoVersion Then GoTo subend
    UpdateRACI True
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "RACI.cmdUpdate_Click error:"
    Resume subend
End Sub

Friend Sub ShowRoleColumns()
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "RACI", "ShowRoleColumns"

    For i = 8 To (Plan.Range("Plan.Roles").Columns.Count + 4)
        Columns(i).Hidden = False
   '     Columns(i).ColumnWidth = 1.71
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "RACI.ShowRoleColumns error:"
    Resume subend
    
End Sub

Public Sub UpdateRACI(Validate As Boolean)
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "RACI", "UpdateRACI"
'    If Validate Then
'        Plan.ValidatePlan
'    End If
    
    Dim rangePrintArea As Range
    
    i = Range(PageSetup.PrintArea).Columns.Count - 1
'    Range(Range("RACI.H1").offset(0, 1), Cells(Range("RACI.H1").row, i)).Interior.Color = RGB(255, 255, 255)
    
    Set rangePrintArea = Range(RACI.PageSetup.PrintArea)
    Set rangePrintArea = Range(Cells(2, 2), Cells(3, rangePrintArea.Columns.Count))
    rangePrintArea.Borders(xlEdgeRight).LineStyle = xlLineStyleNone
    
    Dim rAll As Range
    Set rAll = Range(Range("RACI.H2").offset(2, 0), Cells(RACI.rows.Count, 1)).EntireRow
    rAll.Delete
    
    Dim rPlan As Range
    Dim Target As Range
    
    Set rPlan = Plan.Range(Intersect(Plan.Range("Plan.Header"), Plan.Range("Plan.WBSColumn")), Intersect(Plan.Range("Plan.TaskNameColumn"), Plan.Range("Plan.ProjectFooter")))
   
    Set Target = RACI.Range("RACI.H2").Resize(1, 1).offset(2, 0)
        '/**Fix for 1705**/
        'rPlan.Copy
        RCopy rPlan
        Target.PasteSpecial xlFormats
        RCopy rPlan
        Target.PasteSpecial xlPasteValuesAndNumberFormats
        RCopy rPlan
        Target.PasteSpecial xlPasteColumnWidths
    
    Dim functionsOffset As Integer
    functionsOffset = rPlan.Columns.Count
    
    Set rPlan = Plan.Range(Intersect(Plan.Range("Plan.Header"), Plan.Range("Plan.ResponsibleColumn")), Intersect(Plan.Range("Plan.BaselineStartColumn").offset(0, -1), Plan.Range("Plan.ProjectFooter")))
    Set Target = RACI.Range("RACI.H2").Resize(1, 1).offset(2, functionsOffset)
    
        '/**Fix for 1705**/
        'rPlan.Copy
        RCopy rPlan
        Target.PasteSpecial Paste:=8    'xlPasteColumnWidths
        RCopy rPlan
        Target.PasteSpecial xlFormats
        RCopy rPlan
        Target.PasteSpecial xlPasteValuesAndNumberFormats
        
    Range(Cells(Target.row + 1, 1), Cells(Target.row + 2, 1)).EntireRow.Delete
    'target.EntireColumn.hidden = False
    'target.Offset(0, 2).Resize(1, rPlan.Columns.count - 3).EntireColumn.hidden = False
    
    ShowRoleColumns
        
    'Set Border
    Dim rightlowercorner As Range
    Set rightlowercorner = Cells(Target.row + rPlan.rows.Count - 2, Target.Column + rPlan.Columns.Count)
    
'    If rightlowercorner.Left < 440 Then
'        rightlowercorner.offset(0, -1).EntireColumn.ColumnWidth = (440 - rightlowercorner.Left) / 5
'    End If

    rightlowercorner.EntireColumn.ColumnWidth = 1
    rightlowercorner.EntireRow.RowHeight = 10
    Me.Range(Cells(5, 2), Cells(5, Target.Column + rPlan.Columns.Count)).Interior.Pattern = xlNone
    Me.Range(Cells(2, 2), Cells(2, Target.Column + rPlan.Columns.Count)).Interior.Pattern = xlNone
    Me.Range(Cells(rightlowercorner.row, 2), Cells(rightlowercorner.row, Target.Column + rPlan.Columns.Count)).Interior.Pattern = xlNone
    Me.Range(Cells(5, 2), Cells(rightlowercorner.row, 2)).Interior.Pattern = xlNone
    Me.Range(Cells(2, rightlowercorner.Column), Cells(rightlowercorner.row, rightlowercorner.Column)).Interior.Pattern = xlNone
    Me.Range(Cells(1, rightlowercorner.Column + 1), Cells(5, rightlowercorner.Column + 150)).Interior.Pattern = xlNone
    Me.Range(Cells(1, rightlowercorner.Column + 1), Cells(5, rightlowercorner.Column + 150)).Borders.LineStyle = xlNone
    Me.Range(Cells(1, rightlowercorner.Column + 1), Cells(5, rightlowercorner.Column + 150)).Interior.Color = RGB(242, 242, 242)
               
    'Set Print Area
    Set rangePrintArea = Range(Cells(2, 2), rightlowercorner)
    rangePrintArea.BorderAround xlContinuous, xlThin
    rangePrintArea.Borders(xlEdgeBottom).Color = RGB(166, 166, 166)
    rangePrintArea.Borders(xlEdgeTop).Color = RGB(166, 166, 166)
    rangePrintArea.Borders(xlEdgeLeft).Color = RGB(166, 166, 166)
    rangePrintArea.Borders(xlEdgeRight).Color = RGB(166, 166, 166)
    rangePrintArea.Resize(rowsize:=4).Borders(xlInsideVertical).LineStyle = xlNone
    rangePrintArea.Resize(rowsize:=4).Borders(xlInsideHorizontal).LineStyle = xlNone
    RACI.PageSetup.PrintArea = rangePrintArea.Address
        
    i = Range(PageSetup.PrintArea).Columns.Count - 1
'    If i > Range("R1").Column Then i = Range("R1").Column
    'Range(Range("RACI.H1").offset(0, 1), Cells(Range("RACI.H1").row, i)).Interior.Color = Range("RACI.H1").Resize(1, 1).Interior.Color
    
    Dim rH1 As Range
     
     'Adjust H0 range
    Set rH1 = RACI.Range("C3", Cells(4, rightlowercorner.Column - 1))
    rH1.Interior.Color = Range("RACI.H1").Resize(1, 1).Interior.Color
    ActiveWorkbook.Names.Add Name:="RACI.H0", RefersTo:=rH1
        
'    If ThisWorkbook.ActiveSheet.CodeName = Me.CodeName Then
'        Range("RACI.H2").Resize(1, 1).Offset(1, 0).Activate
'    End If
    ' row 7 can be deleted
    RACI.Cells(9, 1).EntireRow.Delete
    RACI.Cells(6, 1).EntireRow.Delete
    RACI.Cells(7, 1).EntireRow.RowHeight = 90
    modShapes.PositionLogo_v3 Me
    
subend:
    
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "RACI.UpdateRACI error:"
    Resume subend
End Sub


Attribute VB_Name = "ReleaseNotes"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "RibbonConfig"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Risk"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Function GetTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "GetTable"

    t.SetTable Risk.Range("Risk.Table"), True, True, TemplateFirstrow, 5 ', , 16
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Risk.GetTable error:"
    Resume subend
End Function

Public Sub cmdClearFormat_Click()
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "cmdClearFormat_Click"
    For Each R In GetTable.ValuesRange(1)
         R.offset(0, 13).Interior.Color = RGB(255, 255, 255)
    Next
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk.cmdClearFormat_Click error:"
    Resume subend
End Sub

Public Sub cmdSetFormat_Click()
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "cmdSetFormat_Click"
    For Each R In GetTable.ValuesRange(1)
        Select Case R.offset(0, 13).value
            Case appGetLOCText("done")
                R.offset(0, 13).Interior.Color = RGB(112, 173, 71)
            Case appGetLOCText("undone")
                If R.offset(0, 12).value < Cover.Range("Cover.StatusDate").value Then
                    R.offset(0, 13).Interior.Color = RGB(227, 0, 27)
                Else
                    R.offset(0, 13).Interior.Color = RGB(255, 255, 255)
                End If
            Case appGetLOCText("ongoing")
                If R.offset(0, 12).value < Cover.Range("Cover.StatusDate").value Then
                    R.offset(0, 13).Interior.Color = RGB(255, 192, 0)
                Else
                    R.offset(0, 13).Interior.Color = RGB(255, 255, 255)
                End If
            Case Else
                R.offset(0, 13).Interior.Color = RGB(255, 255, 255)
        End Select
    Next
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk.cmdSetFormat_Click error:"
    Resume subend
End Sub

Public Sub cmdAutoFilter_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "cmdAutoFilter_Click"

    GetTable.Autofilter_Clicked 2

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk.cmdAutoFilter_Click error:"
    Resume subend
End Sub

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "cmdInsert_Click"

    If IsDemoVersion Then GoTo subend
    
    GetTable.InsertRow_Clicked ActiveCell
    ActiveCell.EntireRow.AutoFit

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "cmdDelete_Click"

    If IsDemoVersion Then GoTo subend
    
    GetTable.DeleteRow_Clicked ActiveCell

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk.cmdDelete_Click error:"
    Resume subend
End Sub

Public Sub cmdSortAsc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "cmdSortAsc_Click"

   GetTable.Sort_Clicked ActiveCell, xlAscending

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk.cmdSortAsc_Click error:"
    Resume subend
End Sub

Public Sub cmdSortDesc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "cmdSortDesc_Click"

    GetTable.Sort_Clicked ActiveCell, xlDescending

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk.cmdSortDesc_Click error:"
    Resume subend
End Sub

Private Function GetColsSALK() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "GetColsSALK"

    cols.Add GetTPGColumn("name", 1)
    cols.Add GetTPGColumn("description", 2)
    cols.Add GetTPGColumn("impact", 3)
    cols.Add GetTPGColumn("probpercent", 4, NumColumn)
    cols.Add GetTPGColumn("riskcost", 5, NumColumn)
    'cols.Add GetTPGColumn("budget", 6)
    cols.Add GetTPGColumn("delay", 7, NumColumn)
    'Cols.Add GetTPGColumn("priority", 8)
    cols.Add GetTPGColumn("riskstrategy", 9)
    
    'modified for SALK
    cols.Add GetTPGColumn("prevention", 10, NumColumn)
    cols.Add GetTPGColumn("preventioncost", 11, NumColumn)
    cols.Add GetTPGColumn("mitigation", 12)
'    Cols.Add GetTPGColumn("riskcat", 12)
'    Cols.Add GetTPGColumn("responsible", 13)
'    Cols.Add GetTPGColumn("duedate", 14, DateColumn)
'    Cols.Add GetTPGColumn("state", 15)
    
'    Cols.Add GetTPGColumn("measure", 10)
'    Cols.Add GetTPGColumn("riskcat", 11)
'    Cols.Add GetTPGColumn("responsible", 12)
'    Cols.Add GetTPGColumn("duedate", 13, DateColumn)
'    Cols.Add GetTPGColumn("state", 14)
    
    Set GetColsSALK = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Risk.GetColsSALK error:"
    Resume subend
End Function

Private Function GetCols3() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "GetCols3"

    cols.Add GetTPGColumn("name", 1)
    cols.Add GetTPGColumn("description", 2)
    cols.Add GetTPGColumn("extent", 3)
    cols.Add GetTPGColumn("probability", 4, NumColumn)
    cols.Add GetTPGColumn("riskcost", 5, NumColumn)
    'cols.Add GetTPGColumn("budget", 6)
    cols.Add GetTPGColumn("delay", 7, NumColumn)
    'cols.Add GetTPGColumn("priority", 8)
    cols.Add GetTPGColumn("riskstrategy", 9)
    
    'modified for SALK
    cols.Add GetTPGColumn("prevention", 10, NumColumn)
    cols.Add GetTPGColumn("preventioncost", 11, NumColumn)
    cols.Add GetTPGColumn("measure", 12) ' -- mitigation from SALK
    cols.Add GetTPGColumn("riskcat", 13)
    cols.Add GetTPGColumn("responsible", 14)
    cols.Add GetTPGColumn("duedate", 15, DateColumn)
    cols.Add GetTPGColumn("state", 16)
    
'    Cols.Add GetTPGColumn("measure", 10)
'    Cols.Add GetTPGColumn("riskcat", 11)
'    Cols.Add GetTPGColumn("responsible", 12)
'    Cols.Add GetTPGColumn("duedate", 13, DateColumn)
'    Cols.Add GetTPGColumn("state", 14)
    
    Set GetCols3 = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Risk.GetCols3 error:"
    Resume subend
End Function

'Private Function GetCols() As Collection
'    Dim Cols As New Collection
'
'    On Error GoTo SubErr
'    modStack.PushCallStack "Risk", "GetCols"
'
'    Cols.Add GetTPGColumn("name", 1)
'    Cols.Add GetTPGColumn("description", 2)
'    Cols.Add GetTPGColumn("riskcost", 3, NumColumn)
'    Cols.Add GetTPGColumn("probability", 4, NumColumn)
'    'cols.Add GetTPGColumn("budget", 5)
'    Cols.Add GetTPGColumn("delay", 6, NumColumn)
'    Cols.Add GetTPGColumn("priority", 7)
'    Cols.Add GetTPGColumn("extent", 8)
'    Cols.Add GetTPGColumn("prevention", 9)
'    Cols.Add GetTPGColumn("preventioncost", 10, NumColumn)
'    Cols.Add GetTPGColumn("mitigation", 11)
'
'    Set GetCols = Cols
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "Risk.GetCols error:"
'    Resume SubEnd
'End Function

Private Function GetColsOld() As Collection
'pre 3.0 PHBdata
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "GetColsOld"
    
    cols.Add GetTPGColumn("name", 1)
    cols.Add GetTPGColumn("description", 2)
    cols.Add GetTPGColumn("probability", 4, NumColumn)
    cols.Add GetTPGColumn("riskcost", 5, NumColumn)
    'cols.Add GetTPGColumn("budget", 5)
    cols.Add GetTPGColumn("delay", 7, NumColumn)
    'Cols.Add GetTPGColumn("priority", 8)
    
    Set GetColsOld = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Risk.GetColsOld error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    n.appendchild GetNodeFromTable(xmlDom, "risks", "risk", GetTable.ValuesRange, GetCols3)
        
    Set CreateXml = n.FirstChild

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Risk.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, sversion As String)
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "ImportXml"

    If Not Node Is Nothing Then
        
        reset
        
        If (sversion = "1200") Then
            ImportTableValues GetTable, Node, "risk", GetColsSALK
        Else
            If (sversion >= "3.0.00") Then
                ImportTableValues GetTable, Node, "risk", GetCols3
            Else
                ImportTableValues GetTable, Node, "risk", GetColsOld
            End If
        End If
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "reset"

    GetTable.clear
    
    GetTable.ValuesRange.EntireRow.AutoFit

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk.reset error:"
    Resume subend
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
Exit Sub

If (InRange(Target, GetTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext True, True
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Public Sub cmdShowHide_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "cmdShowHide_Click"
    
    If Me.Range("Risk.Area.Chart").EntireRow.Hidden Then
        Me.Range("Risk.Area.Chart").EntireRow.Hidden = False
        Me.Range("Risk.Area.Details").EntireColumn.Hidden = False
    Else
        Me.Range("Risk.Area.Chart").EntireRow.Hidden = True
        Me.Range("Risk.Area.Details").EntireColumn.Hidden = True
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk.cmdShowHide_Click error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------
'----------- (importkiss)
'---------------------------------------------------------------------------------
'importing kiss in normal phb
Public Sub ImportXmlKiss(Node As Variant, sversion As String)
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "ImportXmlKiss"

    If Not Node Is Nothing Then
        reset
        ImportTableValues GetTable, Node, "risk_kiss", GetColsKiss
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk.ImportXmlKiss error:"
    Resume subend
End Sub

Private Function GetColsKiss() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Risk", "GetColsKiss"
    
    cols.Add GetTPGColumn("c1", 1)
    cols.Add GetTPGColumn("c2", 2)
    cols.Add GetTPGColumn("c3", 3)
    cols.Add GetTPGColumn("c4", 4, probabilityColumn)
    'cols.Add GetTPGColumn("c5", 5, NumColumn)
    cols.Add GetTPGColumn("c7", 8)
    cols.Add GetTPGColumn("c8", 10)
    cols.Add GetTPGColumn("c9", 12)
    cols.Add GetTPGColumn("c10", 13, DateColumn)
    
    Set GetColsKiss = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Risk.GetColsKiss error:"
    Resume subend
End Function

Public Function GetKissProbability(p As String) As Double
Dim pr As Double

    On Error GoTo suberr
    modStack.PushCallStack "Risk", "GetKissProbability"
    
    Select Case p
    Case appGetLOCText("VeryLow")
        pr = 0.01
    Case appGetLOCText("Low")
        pr = 0.26
    Case appGetLOCText("medium")
        pr = 0.5
    Case appGetLOCText("high")
        pr = 0.74
    Case Else
        pr = 0.99
    End Select
GetKissProbability = pr

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Risk.GetKissProbability error:"
    Resume subend
End Function

Private Sub Worksheet_Change(ByVal Target As Range)
    GetTable.CellAutoFit Target
End Sub
Attribute VB_Name = "Risk_kiss"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private bFormatted As Boolean

Private Function GetTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "GetTable"

    t.SetTable Risk_kiss.Range("Risk_kiss.Table"), True, True, TemplateFirstrow, 5
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Risk_kiss.GetTable error:"
    Resume subend
End Function

Public Sub cmdClearFormat_Click()
    Dim c As Range
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "cmdClearFormat_Click"

    For Each c In GetTable.ValuesRange(7)
        c.Interior.Color = RGB(242, 242, 242)
        c.Font.Color = RGB(0, 0, 0)
    Next
    
    SetCustomProperty Me, "FormattingEnabled", "False"

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk_kiss.cmdClearFormat_Click error:"
    Resume subend
End Sub

Public Sub cmdSetFormat_Click()
    Dim c As Range
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "cmdSetFormat_Click"

    For Each c In GetTable.ValuesRange(7)
        Select Case c.value
            Case appGetLOCText("high")
                c.Interior.Color = RGB(227, 0, 27)
                c.Font.Color = RGB(255, 255, 255)
            Case appGetLOCText("medium")
                c.Interior.Color = RGB(255, 192, 0)
                c.Font.Color = RGB(255, 255, 255)
            Case appGetLOCText("low")
                c.Interior.Color = RGB(112, 173, 71)
                c.Font.Color = RGB(255, 255, 255)
            Case Else
                c.Interior.Color = RGB(242, 242, 242)
                c.Font.Color = RGB(0, 0, 0)
        End Select
    Next
    
    SetCustomProperty Me, "FormattingEnabled", "True"

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk_kiss.cmdSetFormat_Click error:"
    Resume subend
End Sub

Public Sub cmdAutoFilter_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "cmdAutoFilter_Click"

    GetTable.Autofilter_Clicked 2

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk_kiss.cmdAutoFilter_Click error:"
    Resume subend
End Sub

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "cmdInsert_Click"

    If IsDemoVersion Then GoTo subend
    
    GetTable.InsertRow_Clicked ActiveCell

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk_kiss.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "cmdDelete_Click"

    If IsDemoVersion Then GoTo subend
    
    GetTable.DeleteRow_Clicked ActiveCell

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk_kiss.cmdDelete_Click error:"
    Resume subend
End Sub

Public Sub cmdSortAsc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "cmdSortAsc_Click"

    Dim rCell As Range
    If Not InRange(GetTable.ValuesRange, ActiveCell) Then
        Set rCell = GetTable.ValuesRange(7)
    Else
        Set rCell = ActiveCell
    End If
    GetTable.Sort_Clicked rCell, xlAscending

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk_kiss.cmdSortAsc_Click error:"
    Resume subend
End Sub

Public Sub cmdSortDesc_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "cmdSortDesc_Click"

    Dim rCell As Range
    If Not InRange(GetTable.ValuesRange, ActiveCell) Then
        Set rCell = GetTable.ValuesRange(7)
    Else
        Set rCell = ActiveCell
    End If
    GetTable.Sort_Clicked rCell, xlDescending
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk_kiss.cmdSortDesc_Click error:"
    Resume subend
End Sub

Private Function GetCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "GetCols"

    cols.Add GetTPGColumn("c1", 1)
    cols.Add GetTPGColumn("c2", 2)
    cols.Add GetTPGColumn("c3", 3)
    cols.Add GetTPGColumn("c4", 4)
    cols.Add GetTPGColumn("c5", 5)
    cols.Add GetTPGColumn("c6", 6)
    cols.Add GetTPGColumn("c7", 7)
    cols.Add GetTPGColumn("c8", 8)
    cols.Add GetTPGColumn("c9", 9)
    cols.Add GetTPGColumn("c10", 10)
    
    Set GetCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Risk_kiss.GetCols error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    n.appendchild GetNodeFromTable(xmlDom, "risks_kiss", "risk_kiss", GetTable.ValuesRange, GetCols)
        
    Set CreateXml = n.FirstChild

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Risk_kiss.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, sversion As String)
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "ImportXml"

    If Not Node Is Nothing Then
        
        reset
        ImportTableValues GetTable, Node, "risk_kiss", GetCols
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk_kiss.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "reset"

    GetTable.clear
    GetTable.ValuesRange.EntireRow.AutoFit
    
    cmdClearFormat_Click
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk_kiss.reset error:"
    Resume subend
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (InRange(Target, GetTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext True, True
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    Dim iCost As Integer
    Dim iProbability As Integer
    Dim iPriority As Integer
    Dim rCost As Range
    Dim rProbability As Range
    Dim rPriority As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Risk_kiss", "Worksheet_Change"

    If Not PreviousProcName = "" Then GoTo subend

    If InRange(Target, GetTable.ValuesRange(3)) Then
        Set rCost = Target
        Set rProbability = Target.offset(0, 1)
        Set rPriority = Target.offset(0, 4)
    ElseIf InRange(Target, GetTable.ValuesRange(4)) Then
        Set rProbability = Target
        Set rCost = Target.offset(0, -1)
        Set rPriority = Target.offset(0, 3)
    Else
        GoTo subend
    End If
        
        
    Select Case rCost.value
        Case appGetLOCText("Low")
            iCost = 2
        Case appGetLOCText("medium")
            iCost = 4
        Case appGetLOCText("high")
            iCost = 6
        Case Else
            iCost = 0
    End Select
    
    Select Case rProbability
        Case appGetLOCText("Low")
            iProbability = 1
        Case appGetLOCText("medium")
            iProbability = 2
        Case appGetLOCText("high")
            iProbability = 3
        Case Else
            iProbability = 0
    End Select
    
    If (iProbability = 0) Or (iCost = 0) Then
        iPriority = -1
    Else
        iPriority = iCost + iProbability
    End If
    
    Select Case iPriority
        Case -1
            rPriority.value = ""
        Case Is < 5
            rPriority.value = appGetLOCText("Low")
        Case Is > 7
            rPriority.value = appGetLOCText("high")
        Case Else
            rPriority.value = appGetLOCText("medium")
    End Select
        
    If CBool(GetCustomProperty(Me, "FormattingEnabled")) Then cmdSetFormat_Click

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Risk_kiss.Worksheet_Change error:"
    Resume subend
End Sub

Attribute VB_Name = "Rules"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Function GetTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Rules", "GetTable"

    t.SetTable Me.Range("Rules.Table"), True, False, TemplateBeforeHeader, 5 ', , 16
    
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Rules.GetTable error:"
    Resume subend
End Function

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Rules", "cmdInsert_Click"

    If IsDemoVersion Then GoTo subend
    
    GetTable.InsertRow_Clicked ActiveCell

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Rules.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "Rules", "cmdDelete_Click"
    
    If IsDemoVersion Then GoTo subend
    
    If GetTable.CanDelete(ActiveCell) Then
        If appQOCMsg(appGetLOCText("DeleteRow")) = vbOK Then
            Dim imgName As String
            imgName = StGuidWithoutSpecials(Rules.Cells(ActiveCell.row, Range("Rules.Table").Column + 1).value)
            imgName = VBA.Left(imgName, 29) 'Excel 2003 does not support longer names for shapes. small risk for doubles ...
            If ShapeExists(imgName) Then Rules.Pictures(imgName).Delete
            GetTable.DeleteRow ActiveCell
        End If
    End If
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Rules.cmdDelete_Click error:"
    Resume subend
End Sub

Public Sub cmdDeletePicture_Click()
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Rules", "cmdDeletePicture_Click"
    If IsDemoVersion Then GoTo subend
    s = "Rules.Table"
    If InRange(ActiveCell, Rules.Range(s).offset(1, 1).Resize(Rules.Range(s).rows.Count - 2, Rules.Range(s).Columns.Count - 2)) Then
        Dim imgName As String
        imgName = StGuidWithoutSpecials(Rules.Cells(ActiveCell.row, Range(s).Column + 1).value)
        imgName = VBA.Left(imgName, 29) 'Excel 2003 does not support longer names for shapes. small risk for doubles ...
        'for 2007 we need to unprotect
        If Application.Version = "12.0" Then UnprotectSheet Me
        If ShapeExists(imgName) Then Rules.Pictures(imgName).Delete
        Rules.Cells(ActiveCell.row, Range(s).Column + 1).value = ""
        ActiveCell.EntireRow.AutoFit
    End If
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Rules.cmdDeletePicture_Click error:"
    Resume subend
    
End Sub

Private Function ShapeExists(Name As String) As Boolean
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Rules", "ShapeExists"

    For i = 1 To Pictures.Count
        If Pictures(i).Name = Name Then
            ShapeExists = True
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Rules.ShapeExists error:"
    Resume subend
End Function

Public Sub cmdInsertPicture_Click()
    Dim s As String
    Dim imgPath As Variant
    Dim imgName As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Rules", "cmdInsertPicture_Click"
    
    If IsDemoVersion Then GoTo subend
    
    imgPath = ""
    
    s = "Rules.Table"
    
    If InRange(ActiveCell, Rules.Range(s).offset(1, 1).Resize(Rules.Range(s).rows.Count - 2, Rules.Range(s).Columns.Count - 2)) Then
        imgPath = Application.GetOpenFilename("Rule images (*.jpg; *.bmp; *.gif),*.jpg;*.bmp;*gif", , "Import Picture")
        If imgPath = False Then
            GoTo subend
        Else
            cmdDeletePicture_Click
            'for 2007 we need to unprotect
            If Application.Version = "12.0" Then UnprotectSheet Me
            imgName = StGuidGen
            Rules.Cells(ActiveCell.row, Range(s).Column + 1).value = imgName
            Rules.Cells(ActiveCell.row, Range(s).Column + 2).Select
            Rules.Pictures.Insert(imgPath).Select
            selection.ShapeRange.LockAspectRatio = msoTrue
            imgName = StGuidWithoutSpecials(imgName) 'because of Excel 2003
            imgName = VBA.Left(imgName, 29) 'Excel 2003 does not support longer names for shapes. small risk for doubles ...
            selection.Name = imgName
            If selection.ShapeRange.Width > 110 Then selection.ShapeRange.Width = 110
            If selection.ShapeRange.Height > 50 Then selection.ShapeRange.Height = 50

            If selection.ShapeRange.Height + 15 > Rules.rows(ActiveCell.row).RowHeight Then Rules.rows(ActiveCell.row).RowHeight = selection.ShapeRange.Height + 20
            
            If Application.Version = "12.0" Then
                Rules.Pictures(imgName).Left = Rules.Cells(ActiveCell.row, 4).Left + 7.5
                Rules.Pictures(imgName).Top = Rules.Cells(ActiveCell.row, ActiveCell.Column).Top + 12.5
            Else
                selection.ShapeRange.IncrementTop 15
                selection.ShapeRange.IncrementLeft 10
            End If

        End If
    End If
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Rules.cmdInsertPicture_Click error:"
    Resume subend
    
End Sub

Private Function GetCols() As Collection
    Dim cols As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Rules", "GetCols"

    cols.Add GetTPGColumn("topic", 2)
    cols.Add GetTPGColumn("rule", 3)
    
    Set GetCols = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Rules.GetCols error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    On Error GoTo suberr
    modStack.PushCallStack "Rules", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    n.appendchild GetNodeFromTable(xmlDom, "rules", "rule", GetTable.ValuesRange, GetCols)
    Set CreateXml = n.FirstChild

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Rules.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant)
    On Error GoTo suberr
    modStack.PushCallStack "Rules", "ImportXml"

    If Not Node Is Nothing Then
        
        reset
        ImportTableValues GetTable, Node, "rule", GetCols
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Rules.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    Dim shp As shape
    On Error GoTo suberr
    modStack.PushCallStack "Rules", "reset"

    For Each shp In Me.Shapes
        If shp.Name <> Config_Lic.Range("Config.Logo3").value Then shp.Delete
    Next
    GetTable.clear

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Rules.reset error:"
    Resume subend
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (InRange(Target, GetTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext False, False
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
On Error GoTo suberr
    modStack.PushCallStack "Contract", "Worksheet_Change"
    
    GetTable.bAutoFit = True
    
    'added for printing
    If GetTable.CellAutoFit(Target) Then GoTo subend
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Rules.Worksheet_Change error:"
    Resume subend
End Sub
Attribute VB_Name = "Sort"
Option Explicit

Public Function SortCollection(ByVal c As Collection) As Collection
    Dim n As Long
    
    On Error GoTo suberr
    modStack.PushCallStack "Sort", "SortCollection"

    n = c.Count
    If n = 0 Then
        Set SortCollection = New Collection
        GoTo subend
    End If
    
    ' allocate index array
    ReDim index(1 To n) As Long
    Dim i As Long
    
    ' fill index array
    For i = 1 To n
        index(i) = i
    Next
    
    Dim swaps As Boolean
    swaps = True
    Do While swaps = True
        swaps = False
        For i = 1 To c.Count - 1
            If c(index(i)).Name > c(index(i + 1)).Name Then
                Exchange index, i, i + 1
                swaps = True
            End If
       Next
    Loop

    ' fill output collection
    Dim c2 As New Collection
    For i = 1 To n
        c2.Add c.Item(index(i)), c.Item(index(i)).Name
    Next
    Set SortCollection = c2

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Sort.SortCollection error:"
    Resume subend
End Function


' more flexible sorting for objects who provide a 'Compare' methode
'TODO: FIXME ... callstack disabled due to massive use of this one
Public Function FlexiSortCollection(ByVal c As Collection) As Collection
    Dim n As Long
    Dim i As Long
    Dim swaps As Boolean
    Dim c2 As Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "Sort", "FlexiSortCollection"

    n = c.Count
    If n = 0 Then
        Set FlexiSortCollection = New Collection
        GoTo subend
    End If
    
    ' allocate index array
    ReDim index(1 To n) As Long
    
    ' fill index array
    For i = 1 To n
        index(i) = i
    Next
    
    swaps = True
    Do While swaps = True
        swaps = False
        For i = 1 To c.Count - 1
            If c(index(i)).Compare(c(index(i + 1))) > 0 Then
                Exchange index, i, i + 1
                swaps = True
            End If
       Next
    Loop

    ' fill output collection
    Set c2 = New Collection
    For i = 1 To n
        c2.Add c.Item(index(i)), c.Item(index(i)).Name
    Next
    Set FlexiSortCollection = c2

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    If err.Number = 457 Then
        AppErrMsg "", "The reason is probably a duplicate name in Team"
    Else
        AppErrMsg "Sort.FlexiSortCollection error:"
    End If
    Resume subend
End Function

'TODO: FIXME ... callstack disabled due to massive use of this one
Private Sub Exchange(index() As Long, ByVal i As Long, ByVal j As Long)
    Dim temp As Long: temp = index(i)
   
    On Error GoTo suberr
    modStack.PushCallStack "Sort", "Exchange"

    index(i) = index(j)
    index(j) = temp

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Sort.Exchange error:"
    Resume subend
End Sub


Attribute VB_Name = "StatusHist"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub SetStatusHistRange()
    Dim rFirst As Range
    Dim rLast As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "StatusHist", "SetStatusHistRange"
    
    Set rFirst = Me.Cells(3, 1)
    Set rLast = Me.Cells(Me.UsedRange.rows.Count, 1)
    
    ThisWorkbook.Names("StatusHist").Delete
    ThisWorkbook.Names.Add "StatusHist", "=StatusHist!" & Me.Range(rFirst, rLast).Address

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "StatusHist.SetStatusHistRange error:"
    Resume subend
End Sub

Public Sub DeleteLatestReport()
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "StatusHist", "DeleteLatestReport"

    Set R = StatusHist.Range("StatusHist").Find(Statusreport.Range("Status.StatusDate").value, , xlValues, xlWhole, , , False)
    R.EntireRow.Delete

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "StatusHist.DeleteLatestReport error:"
    Resume subend
End Sub

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    Dim i As Integer
    Dim nrecord As Variant
    Dim c As Range
    Dim emptyrowscount As Integer
    Dim adsNode As Variant
    Dim adNode As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "StatusHist", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    
    For Each c In StatusHist.Range("StatusHist")
        If c.value <> "" Then
            Set nrecord = xmlDom.createNode(1, "statusreport", "")
            AddNode xmlDom, nrecord, "date", c.value
            AddNode xmlDom, nrecord, "status", c.offset(0, 1).value
            
            AddNode xmlDom, nrecord, "actionneeded", c.offset(0, 2).value
            AddNode xmlDom, nrecord, "statusprogress", c.offset(0, 3).value
            AddNode xmlDom, nrecord, "statusschedule", c.offset(0, 4).value
            AddNode xmlDom, nrecord, "statuswork", c.offset(0, 5).value
            AddNode xmlDom, nrecord, "statuscost", c.offset(0, 6).value
            AddNode xmlDom, nrecord, "statusrisk", c.offset(0, 7).value
            If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then AddNode xmlDom, nrecord, "statusorgcontext", c.offset(0, 8).value
            AddNode xmlDom, nrecord, "statusprojectcontext", c.offset(0, 9).value
            
            AddNode xmlDom, nrecord, "comment", c.offset(0, 10).value
            AddNode xmlDom, nrecord, "progress", c.offset(0, 11).value
            AddNode xmlDom, nrecord, "schedule", c.offset(0, 12).value
            AddNode xmlDom, nrecord, "work", c.offset(0, 13).value
            AddNode xmlDom, nrecord, "cost", c.offset(0, 14).value
            AddNode xmlDom, nrecord, "start", c.offset(0, 15).value
            AddNode xmlDom, nrecord, "finish", c.offset(0, 16).value
            AddNode xmlDom, nrecord, "basestart", c.offset(0, 17).value
            AddNode xmlDom, nrecord, "basefinish", c.offset(0, 18).value
            AddNode xmlDom, nrecord, "forecastoffset", c.offset(0, 19).value
            AddNode xmlDom, nrecord, "forcastbar", c.offset(0, 20).value
            AddNode xmlDom, nrecord, "baseoffset", c.offset(0, 21).value
            AddNode xmlDom, nrecord, "basebar", c.offset(0, 22).value
            AddNode xmlDom, nrecord, "basework", c.offset(0, 23).value
            AddNode xmlDom, nrecord, "changework", c.offset(0, 24).value
            AddNode xmlDom, nrecord, "actualwork", c.offset(0, 25).value
            AddNode xmlDom, nrecord, "remainwork", c.offset(0, 26).value
            AddNode xmlDom, nrecord, "forecastwork", c.offset(0, 27).value
            AddNode xmlDom, nrecord, "basecost", c.offset(0, 28).value
            AddNode xmlDom, nrecord, "changecost", c.offset(0, 29).value
            AddNode xmlDom, nrecord, "actualcost", c.offset(0, 30).value
            AddNode xmlDom, nrecord, "remaincost", c.offset(0, 31).value
            AddNode xmlDom, nrecord, "forecastcost", c.offset(0, 32).value
            
            'For SALK risk and resource table were swapped
            AddNode xmlDom, nrecord, "risk", c.offset(0, 34).value
           
            
            ' added for SALK
            AddNode xmlDom, nrecord, "resourcestable", c.offset(0, 33).value

            If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
                AddNode xmlDom, nrecord, "organisation", c.offset(0, 35).value
            End If
            AddNode xmlDom, nrecord, "context", c.offset(0, 36).value
            
            If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
                AddNode xmlDom, nrecord, "riskmatrix", c.offset(0, 37).value
            End If
'            AddNode xmlDom, nRecord, "keymst", c.offset(0, 38).Value 'NOT USED
'            AddNode xmlDom, nRecord, "rescostchart", c.offset(0, 39).Value 'NOT USED
            
            emptyrowscount = 0
            Set adsNode = xmlDom.createNode(1, "ads", "")
            For i = 1 To 50
                'If c.Offset(0, 37 + (i - 1) * 4).value <> "" Or c.Offset(0, 30 + (i - 1) * 4).value <> "" Or c.Offset(0, 31 + (i - 1) * 4).value <> "" Then
                If c.offset(0, 40 + (i - 1) * 6).value <> "" Or _
                    c.offset(0, 41 + (i - 1) * 6).value <> "" Or _
                    c.offset(0, 42 + (i - 1) * 6).value <> "" Or _
                    c.offset(0, 43 + (i - 1) * 6).value <> "" Or _
                    c.offset(0, 44 + (i - 1) * 6).value <> "" Or _
                    c.offset(0, 45 + (i - 1) * 6).value <> "" Then
                    Set adNode = xmlDom.createNode(1, "ad", "")
                    AddNode xmlDom, adNode, "type", c.offset(0, 40 + (i - 1) * 6).value
                    AddNode xmlDom, adNode, "status", c.offset(0, 41 + (i - 1) * 6).value
                    AddNode xmlDom, adNode, "subject", c.offset(0, 42 + (i - 1) * 6).value
                    AddNode xmlDom, adNode, "text", c.offset(0, 43 + (i - 1) * 6).value
                    AddNode xmlDom, adNode, "name", c.offset(0, 44 + (i - 1) * 6).value
                    AddNode xmlDom, adNode, "duedate", c.offset(0, 45 + (i - 1) * 6).value
                    adsNode.appendchild adNode
                Else
                    emptyrowscount = emptyrowscount + 1
                    If emptyrowscount > 3 Then Exit For
                End If
            Next
            nrecord.appendchild adsNode
            n.appendchild nrecord
        End If
    Next
    Set CreateXml = n

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "StatusHist.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, sversion As String)
    Dim i As Integer
    Dim j As Integer
    Dim n As Variant
    Dim c As Range
    Dim s As String
    Dim adsNode As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "StatusHist", "ImportXml"
    
    If Not Node Is Nothing Then
        
        reset
        
        'Added Mappimg if Import From SALK
        If sversion = "1200" Then
            ImportXmlSALK Node, sversion
            GoTo subend
        End If
        
        i = 0
        For Each n In Node.SelectNodes("statusreport")
            i = i + 1
            Set c = getRange(Me, "StatusHist", 1, 1, i, 0)
            c.value = CastStringToVar(n.SelectSingleNode("date").Text)
            c.offset(0, 1).value = CastStringToVar(n.SelectSingleNode("status").Text)
            
            If VBA.InStr("1.0.1|1.0.2|1.0.3|1.0.4", sversion) = 0 Then
                c.offset(0, 2).value = CastStringToVar(n.SelectSingleNode("actionneeded").Text)
                c.offset(0, 3).value = CastStringToVar(n.SelectSingleNode("statusprogress").Text)
                c.offset(0, 4).value = CastStringToVar(n.SelectSingleNode("statusschedule").Text)
                c.offset(0, 5).value = CastStringToVar(n.SelectSingleNode("statuswork").Text)
                c.offset(0, 6).value = CastStringToVar(n.SelectSingleNode("statuscost").Text)
                c.offset(0, 7).value = CastStringToVar(n.SelectSingleNode("statusrisk").Text)
                If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then c.offset(0, 8).value = CastStringToVar(n.SelectSingleNode("statusorgcontext").Text)
                c.offset(0, 9).value = CastStringToVar(n.SelectSingleNode("statusprojectcontext").Text)
            End If
            
            c.offset(0, 10).value = CastStringToVar(n.SelectSingleNode("comment").Text)
            c.offset(0, 11).value = CastStringToVar(n.SelectSingleNode("progress").Text)
            c.offset(0, 12).value = CastStringToVar(n.SelectSingleNode("schedule").Text)
            c.offset(0, 13).value = CastStringToVar(n.SelectSingleNode("work").Text)
            c.offset(0, 14).value = CastStringToVar(n.SelectSingleNode("cost").Text)
            c.offset(0, 15).value = CastStringToVar(n.SelectSingleNode("start").Text)
            c.offset(0, 16).value = CastStringToVar(n.SelectSingleNode("finish").Text)
            c.offset(0, 17).value = CastStringToVar(n.SelectSingleNode("basestart").Text)
            c.offset(0, 18).value = CastStringToVar(n.SelectSingleNode("basefinish").Text)
            c.offset(0, 19).value = CastStringToVar(n.SelectSingleNode("forecastoffset").Text)
            c.offset(0, 20).value = CastStringToVar(n.SelectSingleNode("forcastbar").Text)
            c.offset(0, 21).value = CastStringToVar(n.SelectSingleNode("baseoffset").Text)
            c.offset(0, 22).value = CastStringToVar(n.SelectSingleNode("basebar").Text)
            c.offset(0, 23).value = CastStringToVar(n.SelectSingleNode("basework").Text)
            
            Select Case sversion
            Case "1.0.1", "1.0.2"
                    c.offset(0, 24).value = CastStringToVar(n.SelectSingleNode("actualwork").Text)
                    c.offset(0, 25).value = CastStringToVar(n.SelectSingleNode("remainwork").Text)
                    c.offset(0, 26).value = CastStringToVar(n.SelectSingleNode("changework").Text)
            Case Else
                    c.offset(0, 24).value = CastStringToVar(n.SelectSingleNode("changework").Text)
                    c.offset(0, 25).value = CastStringToVar(n.SelectSingleNode("actualwork").Text)
                    c.offset(0, 26).value = CastStringToVar(n.SelectSingleNode("remainwork").Text)
            End Select
            c.offset(0, 27).value = CastStringToVar(n.SelectSingleNode("forecastwork").Text)
            c.offset(0, 28).value = CastStringToVar(n.SelectSingleNode("basecost").Text)
            
            Select Case sversion
            Case "1.0.1", "1.0.2"
                c.offset(0, 29).value = CastStringToVar(n.SelectSingleNode("actualcost").Text)
                c.offset(0, 30).value = CastStringToVar(n.SelectSingleNode("remaincost").Text)
                c.offset(0, 31).value = CastStringToVar(n.SelectSingleNode("changecost").Text)
            Case Else
                c.offset(0, 29).value = CastStringToVar(n.SelectSingleNode("changecost").Text)
                c.offset(0, 30).value = CastStringToVar(n.SelectSingleNode("actualcost").Text)
                c.offset(0, 31).value = CastStringToVar(n.SelectSingleNode("remaincost").Text)
            End Select
            c.offset(0, 32).value = CastStringToVar(n.SelectSingleNode("forecastcost").Text)
            
            'swapped resources and risk for SALK
            If VBA.InStr("1.0.1|1.0.2|1.0.3|1.0.4", sversion) = 0 Then
                c.offset(0, 34).value = CastStringToVar(n.SelectSingleNode("risk").Text)
'                c.offset(0, 34).Value = CastStringToVar(n.SelectSingleNode("riskbudget").Text)
            End If
            
            'Added for SALK
            'c.offset(0, 33).value = CastStringToVar(n.SelectSingleNode("resourcestable").Text)
            
            If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
                c.offset(0, 35).value = n.SelectSingleNode("organisation").Text
            End If
            If Not n.SelectSingleNode("context") Is Nothing Then _
                c.offset(0, 36).value = n.SelectSingleNode("context").Text
            j = 0
            
            If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
                If Not n.SelectSingleNode("riskmatrix") Is Nothing Then
                    c.offset(0, 37).value = n.SelectSingleNode("riskmatrix").Text
                   ' c.offset(0, 38).Value = n.SelectSingleNode("keymst").Text NOT USED
                   ' c.offset(0, 39).Value = n.SelectSingleNode("rescostchart").Text NOT USED
                End If
            End If
            
            For Each adsNode In n.SelectNodes("ads/ad")
                j = j + 1
                c.offset(0, 40 + (j - 1) * 6).value = adsNode.SelectSingleNode("type").Text
                If Not adsNode.SelectSingleNode("status") Is Nothing Then
                    c.offset(0, 41 + (j - 1) * 6).value = adsNode.SelectSingleNode("status").Text
                    c.offset(0, 42 + (j - 1) * 6).value = adsNode.SelectSingleNode("subject").Text
                End If
                If adsNode.SelectSingleNode("type").Text <> "M" Then
                    c.offset(0, 43 + (j - 1) * 6).value = adsNode.SelectSingleNode("text").Text
                    c.offset(0, 44 + (j - 1) * 6).value = adsNode.SelectSingleNode("name").Text
                    c.offset(0, 45 + (j - 1) * 6).value = CastStringToVar(adsNode.SelectSingleNode("duedate").Text)
                Else
                    c.offset(0, 43 + (j - 1) * 6).value = CastStringToVar(adsNode.SelectSingleNode("text").Text)
                    c.offset(0, 44 + (j - 1) * 6).value = CastStringToVar(adsNode.SelectSingleNode("name").Text)
                    c.offset(0, 45 + (j - 1) * 6).value = CastStringToVar(adsNode.SelectSingleNode("duedate").Text)
                End If
            Next
        Next
        s = Me.Range("Statushist").Resize(i + 1).Address
        Application.Names("StatusHist").Delete
        Application.Names.Add "StatusHist", "=StatusHist!" & s
        
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "StatusHist.ImportXML error:"
    Resume subend
End Sub


Private Sub ImportXmlSALK(Node As Variant, sversion As String)
    Dim i As Integer
    Dim j As Integer
    Dim n As Variant
    Dim c As Range
    Dim s As String
    Dim adsNode As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "StatusHist", "ImportXMLSALK"

        i = 0
        For Each n In Node.SelectNodes("statusreport")
            i = i + 1
            Set c = getRange(Me, "StatusHist", 1, 1, i, 0)
            c.value = CastStringToVar(n.SelectSingleNode("date").Text) '
            c.offset(0, 1).value = CastStringToVar(n.SelectSingleNode("status").Text) '
            
            If VBA.InStr("1.0.1|1.0.2|1.0.3|1.0.4", sversion) = 0 Then
                c.offset(0, 2).value = CastStringToVar(n.SelectSingleNode("actionneeded").Text) '
                c.offset(0, 3).value = CastStringToVar(n.SelectSingleNode("statusprogress").Text) '
                c.offset(0, 4).value = CastStringToVar(n.SelectSingleNode("statusschedule").Text) '
                c.offset(0, 5).value = CastStringToVar(n.SelectSingleNode("statuswork").Text) '
                c.offset(0, 6).value = CastStringToVar(n.SelectSingleNode("statuscost").Text) '
                
                'SALK no risk
                'c.offset(0, 7).value = CastStringToVar(n.SelectSingleNode("statusrisk").Text)
                
                
                If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then c.offset(0, 8).value = CastStringToVar(n.SelectSingleNode("statusorgcontext").Text)

                'SALK
                If Not n.SelectSingleNode("statusorgcom") Is Nothing Then _
                c.offset(0, 9).value = CastStringToVar(n.SelectSingleNode("statusorgcom").Text)
            End If
            
            c.offset(0, 10).value = CastStringToVar(n.SelectSingleNode("comment").Text) '
            c.offset(0, 11).value = CastStringToVar(n.SelectSingleNode("progress").Text) '
            c.offset(0, 12).value = CastStringToVar(n.SelectSingleNode("schedule").Text) '
            'c.offset(0, 13).value = CastStringToVar(n.SelectSingleNode("work").Text)
            c.offset(0, 14).value = CastStringToVar(n.SelectSingleNode("cost").Text) '
            c.offset(0, 15).value = CastStringToVar(n.SelectSingleNode("start").Text) '
            c.offset(0, 16).value = CastStringToVar(n.SelectSingleNode("finish").Text) '
            c.offset(0, 17).value = CastStringToVar(n.SelectSingleNode("basestart").Text) '
            c.offset(0, 18).value = CastStringToVar(n.SelectSingleNode("basefinish").Text) '
            c.offset(0, 19).value = CastStringToVar(n.SelectSingleNode("forecastoffset").Text) '
            c.offset(0, 20).value = CastStringToVar(n.SelectSingleNode("forcastbar").Text) '
            c.offset(0, 21).value = CastStringToVar(n.SelectSingleNode("baseoffset").Text) '
            c.offset(0, 22).value = CastStringToVar(n.SelectSingleNode("basebar").Text) '


             'SALK
            If Not n.SelectSingleNode("basework") Is Nothing Then _
            c.offset(0, 23).value = CastStringToVar(n.SelectSingleNode("basework").Text) '

            'note that this values are not used and are hidden, just added for mapping
            If Not n.SelectSingleNode("actualwork") Is Nothing Then _
            c.offset(0, 24).value = CastStringToVar(n.SelectSingleNode("actualwork").Text)

            If Not n.SelectSingleNode("remainwork") Is Nothing Then _
            c.offset(0, 25).value = CastStringToVar(n.SelectSingleNode("remainwork").Text)

            If Not n.SelectSingleNode("changework") Is Nothing Then _
            c.offset(0, 26).value = CastStringToVar(n.SelectSingleNode("changework").Text)

            If Not n.SelectSingleNode("forecastwork") Is Nothing Then _
            c.offset(0, 27).value = CastStringToVar(n.SelectSingleNode("forecastwork").Text)


            'SALK this are the new columns for COST
            c.offset(0, 28).value = CastStringToVar(n.SelectSingleNode("basecost").Text) 'verf|fffd|gt
            c.offset(0, 29).value = CastStringToVar(n.SelectSingleNode("changecost").Text) 'prognose
            c.offset(0, 30).value = CastStringToVar(n.SelectSingleNode("actualcost").Text) 'basis/plan2


            If Not n.SelectSingleNode("resourcestable") Is Nothing Then _
            c.offset(0, 33).value = CastStringToVar(n.SelectSingleNode("resourcestable").Text)

            If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
                c.offset(0, 35).value = n.SelectSingleNode("organisation").Text
            End If

            'SALK
            If Not n.SelectSingleNode("organisation") Is Nothing Then _
                c.offset(0, 36).value = n.SelectSingleNode("organisation").Text
            j = 0

            If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
                If Not n.SelectSingleNode("riskmatrix") Is Nothing Then
                    c.offset(0, 37).value = n.SelectSingleNode("riskmatrix").Text
                   ' c.offset(0, 38).Value = n.SelectSingleNode("keymst").Text NOT USED
                   ' c.offset(0, 39).Value = n.SelectSingleNode("rescostchart").Text NOT USED
                End If
            End If
            
            For Each adsNode In n.SelectNodes("ads/ad")
                j = j + 1
                c.offset(0, 40 + (j - 1) * 6).value = adsNode.SelectSingleNode("type").Text
                If Not adsNode.SelectSingleNode("status") Is Nothing Then
                    c.offset(0, 41 + (j - 1) * 6).value = adsNode.SelectSingleNode("status").Text
                    c.offset(0, 42 + (j - 1) * 6).value = adsNode.SelectSingleNode("subject").Text
                End If
                If adsNode.SelectSingleNode("type").Text <> "M" Then
                    c.offset(0, 43 + (j - 1) * 6).value = adsNode.SelectSingleNode("text").Text
                    c.offset(0, 44 + (j - 1) * 6).value = adsNode.SelectSingleNode("name").Text
                    c.offset(0, 45 + (j - 1) * 6).value = CastStringToVar(adsNode.SelectSingleNode("duedate").Text)
                Else
                    c.offset(0, 43 + (j - 1) * 6).value = CastStringToVar(adsNode.SelectSingleNode("text").Text)
                    c.offset(0, 44 + (j - 1) * 6).value = CastStringToVar(adsNode.SelectSingleNode("name").Text)
                    c.offset(0, 45 + (j - 1) * 6).value = CastStringToVar(adsNode.SelectSingleNode("duedate").Text)
                End If
            Next
        Next
        s = Me.Range("Statushist").Resize(i + 1).Address
        Application.Names("StatusHist").Delete
        Application.Names.Add "StatusHist", "=StatusHist!" & s
        
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "StatusHist.ImportXMLSALK error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "StatusHist", "reset"

    If Me.Range("StatusHist").rows.Count > 1 Then
        getRange(Me, "StatusHist", -1, 0, 1, 0).EntireRow.Delete
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "StatusHist.reset error:"
    Resume subend
End Sub

Attribute VB_Name = "Statusreport"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private noupdate As Boolean

'added for SALK
Private actionInsertDelete As Boolean

Private bTimeLineMonths As Boolean
Public Property Get ActionNeeded() As Boolean:      ActionNeeded = Me.Range("Status.ActionNeeded2").value = "|fffd|":               End Property
Public Property Let ActionNeeded(value As Boolean): Me.Range("Status.ActionNeeded2").value = IIf(value, "|fffd|", "|fffd|"):               End Property

Private Sub Worksheet_Activate()
    
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "Worksheet_Activate"

    noupdate = False
    'SetHistoryFields
'    If ModuleExists("MSPImport") Then
'        Me.Shapes("cmdPublish").visible = msoTrue
'    Else
'        Me.Shapes("cmdPublish").visible = msoFalse
'    End If
    
    'added for SALK
    ChartObjects("Status.Chart.Phases").visible = False
    Shapes("trafficWorkRed").visible = False
    Shapes("trafficWorkYellow").visible = False
    Shapes("trafficWorkGreen").visible = False
    
    
    
    'moved named range Status.Chart.Phases.TL by 1 row below

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.Worksheet_Activate error:"
    Resume subend
End Sub

Public Sub TrafficRed_Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "TrafficRed_Click"
    noupdate = True
    Me.Shapes("trafficRed").Fill.ForeColor.RGB = RGB(227, 0, 27)
    Me.Shapes("trafficYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Plan.Range("Plan.Status").value = appGetLOCText("Red")
subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.TrafficRed_Click error:"
    Resume subend
End Sub

Public Sub TrafficYellow_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "TrafficYellow_Click"
    
    noupdate = True
    
    Me.Shapes("trafficRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficYellow").Fill.ForeColor.RGB = RGB(255, 192, 0)
    Me.Shapes("trafficGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)

    Plan.Range("Plan.Status").value = appGetLOCText("Yellow")

subend:
    noupdate = False
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.TrafficYellow_Click error:"
    Resume subend
End Sub

Private Function AdjustStartDateToScale(bmonth As Boolean, anyDate As Date) As Date
    On Error GoTo suberr
    modStack.PushCallStack "Status", "AdjustStartDateToScale"

    AdjustStartDateToScale = anyDate
    If bmonth Then
            AdjustStartDateToScale = DateSerial(DatePart("yyyy", anyDate), DatePart("m", anyDate), 1)
            'AdjustStartDateToScale = DateAdd("m", -1, AdjustStartDateToScale)
    Else 'quarter
            AdjustStartDateToScale = DateSerial(DatePart("yyyy", anyDate), DatePart("m", anyDate), 1)
            'AdjustStartDateToScale = DateAdd("m", -1, AdjustStartDateToScale)
            Dim mon As Integer
            mon = Month(AdjustStartDateToScale)
            While (mon <> 1 And mon <> 4 And mon <> 7 And mon <> 10)
                AdjustStartDateToScale = DateAdd("m", -1, AdjustStartDateToScale)
                mon = Month(AdjustStartDateToScale)
            Wend
    End If
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Status.AdjustStartDateToScale error:"
    Resume subend
End Function

Public Function RebuildStatusMSTTimeLine() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Status", "RebuildStatusMSTTimeLine"

    Dim dstart As Date
    Dim dfinish As Date
    Dim iMonths As Integer
    Dim iQuarters As Integer
    Dim iUnits As Integer
    Dim i As Integer
    Dim rCell As Range
    Dim CurrentRect As shape
    Dim dCurrentTop As Double
    Dim dCurrentLeft As Double
    Dim dCurrentHeight As Double
    Dim dTotalWidth As Double
    Dim dCurrentWidth As Double
    Dim dcurrentdate As Date
    Dim ifontsize As Integer
    Dim imonth As Integer
    Dim iyear As Integer
    
    If (IsDate(Me.Range("Status.Start").value)) And (IsDate(Me.Range("Status.Finish").value)) Then
        imonth = Month(Me.Range("Status.Start").value)
        iyear = Year(Me.Range("Status.Start").value)
        dstart = DateSerial(iyear, imonth, 1)
        imonth = Month(Me.Range("Status.Finish").value)
        iyear = Year(Me.Range("Status.Finish").value)
        dfinish = DateSerial(iyear, imonth, 31)
        iMonths = DateDiff("m", dstart, dfinish) + 1
        'when projects runs over more than 12 months we represent quarters in chart
        If iMonths > 12 Then
            iQuarters = DateDiff("q", dstart, dfinish) + 1
            iUnits = iQuarters
            bTimeLineMonths = False
        Else
            iUnits = iMonths
            bTimeLineMonths = True
        End If
        
        dTotalWidth = Me.Range("Status.MSTChartArea").Width
        dCurrentTop = Me.Range("Status.MSTChartArea").Top + 60
        dCurrentLeft = Me.Range("Status.MSTChartArea").Left
        dCurrentHeight = 18 'MST.Range("MST.ChartArea").Height - 110
        dCurrentWidth = dTotalWidth / iUnits ' iMonths
        dcurrentdate = AdjustStartDateToScale(bTimeLineMonths, dstart) 'startdate of timeline
        
        If iUnits <= 8 Then
            ifontsize = 7
        Else
            ifontsize = 6
        End If
        
        For i = 1 To iUnits 'iMonths
            Set CurrentRect = Me.Shapes.AddShape(msoShapeRectangle, dCurrentLeft, dCurrentTop, dCurrentWidth + 2, dCurrentHeight)
            With CurrentRect
                .Name = "TL_" & Trim(CStr(Month(dcurrentdate))) & "_" & Trim(CStr(Year(dcurrentdate)))
                .Fill.ForeColor.RGB = RGB(191, 191, 191)
                .Line.visible = msoTrue
                .Line.ForeColor.RGB = RGB(166, 166, 166)
                .Line.Weight = 1
                .TextFrame2.WordWrap = msoTrue ' = msoFalse
                .TextFrame2.MarginTop = 0
                .TextFrame2.MarginBottom = 0
                .TextFrame2.MarginLeft = 0
                .TextFrame2.MarginRight = 0
                .TextFrame2.HorizontalAnchor = msoAnchorCenter
                .TextFrame2.VerticalAnchor = msoAnchorMiddle
                .TextFrame2.TextRange.Text = Format(dcurrentdate, "mmm-yyyy")
                .TextFrame2.TextRange.Font.Size = ifontsize
                .TextFrame2.TextRange.Font.Name = "Segoe UI"
                .TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
            End With
            dCurrentLeft = dCurrentLeft + dCurrentWidth
            If bTimeLineMonths Then
                dcurrentdate = DateAdd("m", 1, dcurrentdate)
            Else
                dcurrentdate = DateAdd("m", 3, dcurrentdate)
            End If
        Next
        RebuildStatusMSTTimeLine = True
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Status.RebuildStatusMSTTimeLine error:"
    Resume subend
End Function

Public Sub DeleteEntireMSTChart()
    On Error GoTo suberr
    modStack.PushCallStack "Status", "DeleteEntireMSTChart"
    Dim s As shape
    For Each s In Me.Shapes
        If (Left(s.Name, 3) = "TL_") Or (Left(s.Name, 4) = "MST_") Then s.Delete
    Next
'    Me.Range("Status.Row.MSTChart").EntireRow.Hidden = True
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.DeleteEntireMSTChart error:"
    Resume subend
End Sub

Private Sub SetMSTShape(sname As String, ddate As Date, iheight As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "Status", "ResetTimeLine"

    Dim smst As shape
    Dim smstrect As shape
    Dim smstconn As shape
    Dim srect As shape
    Dim idaysinmonth As Integer
    Dim idaysinquarter As Integer
    Dim d As Date
    Dim dpartofunit As Double
    Dim dCurrentTop As Double
    Dim dCurrentLeft As Double
    Dim drectleft As Double
    Dim s As shape
    Dim dtimelinedate As Date
    
    'define required startdate for shape
    dtimelinedate = AdjustStartDateToScale(bTimeLineMonths, ddate)

    'find the correct rectangle
    For Each s In Me.Shapes
        If (s.AutoShapeType = msoShapeRectangle) And (s.Name = "TL_" & Trim(CStr(Month(dtimelinedate))) & "_" & Trim(CStr(Year(dtimelinedate)))) Then
            Set srect = s
            Exit For
        End If
    Next
    
    'found correct rectangle
    If Not srect Is Nothing Then
        If bTimeLineMonths Then
            d = DateAdd("m", 1, DateSerial(Year(ddate), Month(ddate), 1))
            d = DateAdd("d", -1, d)
            idaysinmonth = Day(d)
            dpartofunit = Day(ddate) / idaysinmonth
        Else
            d = DateAdd("m", 3, dtimelinedate)
            d = DateAdd("d", -1, d)
            idaysinquarter = DateDiff("d", dtimelinedate, d)
            dpartofunit = DateDiff("d", dtimelinedate, ddate) / idaysinquarter
        End If
        If (iheight < 0) Then
            dCurrentTop = srect.Top - 10 + (iheight * 10)
        Else
            dCurrentTop = srect.Top + srect.Height + (iheight * 10)
        End If
        dCurrentLeft = srect.Left + (dpartofunit * srect.Width) - 5
        Set smst = Me.Shapes.AddShape(msoShapeFlowchartDecision, dCurrentLeft, dCurrentTop, 10, 10)
        With smst
            .Name = "MST_" & Trim(CStr(Day(ddate))) & "_" & Trim(CStr(Month(ddate))) & "_" & Trim(CStr(Year(Date)))
            .Fill.ForeColor.RGB = RGB(226, 0, 26)
            .Line.visible = msoFalse
        End With
        drectleft = dCurrentLeft - 55
        If drectleft < 0 Then drectleft = 13 'drectleft = dCurrentLeft
        If (drectleft + 120) > 582 Then drectleft = 582 - 120
'        If (srect.Left + srect.Width) > 550 Then drectleft = srect.Left + srect.Width - 120 'we are at the right side
        If (iheight < 0) Then
            Set smstrect = Me.Shapes.AddShape(msoShapeRectangle, drectleft, smst.Top - 20, 120, 20)
        Else
            Set smstrect = Me.Shapes.AddShape(msoShapeRectangle, drectleft, smst.Top + 10, 120, 20)
        End If
        With smstrect
            .Name = "MST_RCT_" & Trim(CStr(Day(ddate))) & "_" & Trim(CStr(Month(ddate))) & "_" & Trim(CStr(Year(Date)))
            .Fill.visible = msoFalse
            .Line.visible = msoFalse
            .TextFrame2.WordWrap = msoTrue ' = msoFalse
            .TextFrame2.MarginTop = 0
            .TextFrame2.MarginBottom = 0
            .TextFrame2.MarginLeft = 0
            .TextFrame2.MarginRight = 0
            If drectleft = 13 Then ' dCurrentLeft Then
                .TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignLeft
'                .TextFrame2.HorizontalAnchor = msoAnchorNone
            ElseIf drectleft + 120 >= 582 Then
                .TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignRight
            Else
                .TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
'                .TextFrame2.HorizontalAnchor = msoAnchorCenter
            End If
            .TextFrame2.VerticalAnchor = msoAnchorMiddle
            .TextFrame2.TextRange.Text = sname + Chr(10) + CStr(ddate)
            .TextFrame2.TextRange.Font.Size = 6  '7
            .TextFrame2.TextRange.Font.Name = "Segoe UI"
            .TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(226, 0, 26)
        End With
        If (iheight < 0) Then
            Set smstconn = Me.Shapes.AddConnector(msoConnectorStraight, dCurrentLeft + 5, dCurrentTop + 10, dCurrentLeft + 5, srect.Top)
        Else
            Set smstconn = Me.Shapes.AddConnector(msoConnectorStraight, dCurrentLeft + 5, srect.Top + srect.Height + 1, dCurrentLeft + 5, dCurrentTop)
        End If
        With smstconn
            .Name = "MST_CONN_" & Trim(CStr(Day(ddate))) & "_" & Trim(CStr(Month(ddate))) & "_" & Trim(CStr(Year(Date)))
            .Fill.visible = msoFalse
            .Line.ForeColor.RGB = RGB(226, 0, 26)
            .Line.visible = msoTrue
            .Line.DashStyle = msoLineDash 'msoLineSquareDot  msoLineSysDash
            .Line.Weight = 1
        End With
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.SetMSTShape error:"
    Resume subend
End Sub

Public Sub Traffic_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "Traffic_Click"
    noupdate = True
    
    Select Case Application.Caller
        Case "trafficProgressRed"
            Me.Range("Status.StatusProgress").value = appGetLOCText("Red")
            SetTrafficProgress
        Case "trafficProgressYellow"
            Me.Range("Status.StatusProgress").value = appGetLOCText("Yellow")
            SetTrafficProgress
        Case "trafficProgressGreen"
            Me.Range("Status.StatusProgress").value = appGetLOCText("Green")
            SetTrafficProgress
        Case "trafficScheduleRed"
            Me.Range("Status.StatusSchedule").value = appGetLOCText("Red")
            SetTrafficSchedule
        Case "trafficScheduleYellow"
            Me.Range("Status.StatusSchedule").value = appGetLOCText("Yellow")
            SetTrafficSchedule
        Case "trafficScheduleGreen"
            Me.Range("Status.StatusSchedule").value = appGetLOCText("Green")
            SetTrafficSchedule
        Case "trafficWorkRed"
            Me.Range("Status.StatusWork").value = appGetLOCText("Red")
            SetTrafficWork
        Case "trafficWorkYellow"
            Me.Range("Status.StatusWork").value = appGetLOCText("Yellow")
            SetTrafficWork
        Case "trafficWorkGreen"
            Me.Range("Status.StatusWork").value = appGetLOCText("Green")
            SetTrafficWork
        Case "trafficCostRed"
            Me.Range("Status.StatusCost").value = appGetLOCText("Red")
            SetTrafficCost
        Case "trafficCostYellow"
            Me.Range("Status.StatusCost").value = appGetLOCText("Yellow")
            SetTrafficCost
        Case "trafficCostGreen"
            Me.Range("Status.StatusCost").value = appGetLOCText("Green")
            SetTrafficCost
        Case "trafficRiskRed"
            Me.Range("Status.StatusRisk").value = appGetLOCText("Red")
            SetTrafficRisk
        Case "trafficRiskYellow"
            Me.Range("Status.StatusRisk").value = appGetLOCText("Yellow")
            SetTrafficRisk
        Case "trafficRiskGreen"
            Me.Range("Status.StatusRisk").value = appGetLOCText("Green")
            SetTrafficRisk
        Case "trafficContextRed"
            Me.Range("Status.StatusProjectContext").value = appGetLOCText("Red")
            SetTrafficContext
        Case "trafficContextYellow"
            Me.Range("Status.StatusProjectContext").value = appGetLOCText("Yellow")
            SetTrafficContext
        Case "trafficContextGreen"
            Me.Range("Status.StatusProjectContext").value = appGetLOCText("Green")
            SetTrafficContext
        Case "trafficOrgContextRed"
            Me.Range("Status.StatusOrgContext").value = appGetLOCText("Red")
            SetTrafficOrgContext
        Case "trafficOrgContextYellow"
            Me.Range("Status.StatusOrgContext").value = appGetLOCText("Yellow")
            SetTrafficOrgContext
        Case "trafficOrgContextGreen"
            Me.Range("Status.StatusOrgContext").value = appGetLOCText("Green")
            SetTrafficOrgContext
    End Select

subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.Traffic_Click error:"
    Resume subend
End Sub

Private Sub SetTrafficProgress()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "SetTrafficProgress"
    Me.Shapes("trafficProgressRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficProgressYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficProgressGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Select Case Me.Range("Status.StatusProgress").value
        Case appGetLOCText("Red")
            Me.Shapes("trafficProgressRed").Fill.ForeColor.RGB = RGB(227, 0, 27)
        Case appGetLOCText("Yellow")
            Me.Shapes("trafficProgressYellow").Fill.ForeColor.RGB = RGB(255, 192, 0)
        Case appGetLOCText("Green")
            Me.Shapes("trafficProgressGreen").Fill.ForeColor.RGB = RGB(112, 173, 71)
    End Select
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.SetTrafficProgress error:"
    Resume subend
End Sub
Private Sub SetTrafficSchedule()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "SetTrafficSchedule"
    Me.Shapes("trafficScheduleRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficScheduleYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficScheduleGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Select Case Me.Range("Status.StatusSchedule").value
        Case appGetLOCText("Red")
            Me.Shapes("trafficScheduleRed").Fill.ForeColor.RGB = RGB(227, 0, 27)
        Case appGetLOCText("Yellow")
            Me.Shapes("trafficScheduleYellow").Fill.ForeColor.RGB = RGB(255, 192, 0)
        Case appGetLOCText("Green")
            Me.Shapes("trafficScheduleGreen").Fill.ForeColor.RGB = RGB(112, 173, 71)
    End Select
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.SetTrafficSchedule error:"
    Resume subend
End Sub

Private Sub SetTrafficCost()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "SetTrafficCost"
    Me.Shapes("trafficCostRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficCostYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficCostGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Select Case Me.Range("Status.StatusCost").value
        Case appGetLOCText("Red")
            Me.Shapes("trafficCostRed").Fill.ForeColor.RGB = RGB(227, 0, 27)
        Case appGetLOCText("Yellow")
            Me.Shapes("trafficCostYellow").Fill.ForeColor.RGB = RGB(255, 192, 0)
        Case appGetLOCText("Green")
            Me.Shapes("trafficCostGreen").Fill.ForeColor.RGB = RGB(112, 173, 71)
    End Select
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.SetTrafficCost error:"
    Resume subend
End Sub

Private Sub SetTrafficWork()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "SetTrafficWork"
    Me.Shapes("trafficWorkRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficWorkYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficWorkGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Select Case Me.Range("Status.StatusWork").value
        Case appGetLOCText("Red")
            Me.Shapes("trafficWorkRed").Fill.ForeColor.RGB = RGB(227, 0, 27)
        Case appGetLOCText("Yellow")
            Me.Shapes("trafficWorkYellow").Fill.ForeColor.RGB = RGB(255, 192, 0)
        Case appGetLOCText("Green")
            Me.Shapes("trafficWorkGreen").Fill.ForeColor.RGB = RGB(112, 173, 71)
    End Select
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.SetTrafficWork error:"
    Resume subend
End Sub

Private Sub SetTrafficRisk()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "SetTrafficRisk"
    Me.Shapes("trafficRiskRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficRiskYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficRiskGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Select Case Me.Range("Status.StatusRisk").value
        Case appGetLOCText("Red")
            Me.Shapes("trafficRiskRed").Fill.ForeColor.RGB = RGB(227, 0, 27)
        Case appGetLOCText("Yellow")
            Me.Shapes("trafficRiskYellow").Fill.ForeColor.RGB = RGB(255, 192, 0)
        Case appGetLOCText("Green")
            Me.Shapes("trafficRiskGreen").Fill.ForeColor.RGB = RGB(112, 173, 71)
    End Select
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.SetTrafficRisk error:"
    Resume subend
End Sub

Private Sub SetTrafficContext()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "SetTrafficContext"
    Me.Shapes("trafficContextRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficContextYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficContextGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Select Case Me.Range("Status.StatusProjectContext").value
        Case appGetLOCText("Red")
            Me.Shapes("trafficContextRed").Fill.ForeColor.RGB = RGB(227, 0, 27)
        Case appGetLOCText("Yellow")
            Me.Shapes("trafficContextYellow").Fill.ForeColor.RGB = RGB(255, 192, 0)
        Case appGetLOCText("Green")
            Me.Shapes("trafficContextGreen").Fill.ForeColor.RGB = RGB(112, 173, 71)
    End Select
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.SetTrafficContext error:"
    Resume subend
End Sub

Private Sub SetTrafficOrgContext()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "SetTrafficOrgContext"
    Me.Shapes("trafficOrgContextRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficOrgContextYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficOrgContextGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Select Case Me.Range("Status.StatusOrgContext").value
        Case appGetLOCText("Red")
            Me.Shapes("trafficOrgContextRed").Fill.ForeColor.RGB = RGB(227, 0, 27)
        Case appGetLOCText("Yellow")
            Me.Shapes("trafficOrgContextYellow").Fill.ForeColor.RGB = RGB(255, 192, 0)
        Case appGetLOCText("Green")
            Me.Shapes("trafficOrgContextGreen").Fill.ForeColor.RGB = RGB(112, 173, 71)
    End Select
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.SetTrafficOrgContext error:"
    Resume subend
End Sub

Public Sub TrafficGreen_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "TrafficGreen_Click"
    
    noupdate = True
    Me.Shapes("trafficRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Me.Shapes("trafficGreen").Fill.ForeColor.RGB = RGB(112, 173, 71)
    Plan.Range("Plan.Status").value = appGetLOCText("Green")

subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.TrafficGreen_Click error:"
    Resume subend
End Sub

Public Function IsLatestReportSelected() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "IsLatestReportSelected"

    StatusHist.SetStatusHistRange
    IsLatestReportSelected = (WorksheetFunction.max(StatusHist.Range("StatusHist")) = Range("Status.StatusDate").value)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Statusreport.IsLatestReportSelected error:"
    Resume subend
End Function

Private Function IsSaveAllowed() As Boolean
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "IsSaveAllowed"

    IsSaveAllowed = True
    ' the selected report is the latest and therefore it can be overwritten
    If IsLatestReportSelected Then GoTo subend
    
    Set R = Application.Names("StatusHist").RefersToRange.Find(Range("Status.StatusDate").value, , xlValues, xlWhole, , , False)
    If Not R Is Nothing Then
        ' a report with the current status date has already been stored which is not the latest
        AppStopMsg appGetLOCText("StatusDateExists")
        IsSaveAllowed = False
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Statusreport.IsSaveAllowed error:"
    Resume subend
End Function



Public Sub cmdSave_Click()
    Dim s As String
    Dim R As Range
    Dim ic As Integer
    Dim ir As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "cmdSave_Click"
    
    noupdate = True
    
    If IsEmpty(Me.Range("Status.Statusdate").value) Then
        AppStopMsg appGetLOCText("StopSaveNoStatus")
        GoTo subend
    End If
    
    If appQOCMsg(appGetLOCText("SaveStatus")) = vbCancel Then GoTo subend
    If Not IsSaveAllowed Then GoTo subend
    
    If IsLatestReportSelected Then
        StatusHist.DeleteLatestReport 'otherwise we end up with two reports at the same day
    End If
    
    s = "=StatusHist!" & ThisWorkbook.Names("StatusHist").RefersToRange.Resize(ThisWorkbook.Names("StatusHist").RefersToRange.rows.Count + 1, 1).AddressLocal
    ThisWorkbook.Names("StatusHist").Delete
    ThisWorkbook.Names.Add "StatusHist", s
    
    Set R = StatusHist.Range("StatusHist")
    ir = R.row + R.rows.Count - 1
        
    With StatusHist
        .Cells(ir, 1).value = Range("Status.StatusDate").value
        .Cells(ir, 2).value = Plan.Range("Plan.Status").value

        .Cells(ir, 3).value = CStr(Me.ActionNeeded) ' Range("Status.ActionNeeded").Value
        .Cells(ir, 4).value = Range("Status.StatusProgress").value
        .Cells(ir, 5).value = Range("Status.StatusSchedule").value
        .Cells(ir, 6).value = Range("Status.StatusWork").value
        .Cells(ir, 7).value = Range("Status.StatusCost").value

        .Cells(ir, 8).value = Range("Status.StatusRisk").value 'mapped to statusOrgCom

        If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then _
            .Cells(ir, 9).value = Range("Status.StatusOrgContext").value
        .Cells(ir, 10).value = Range("Status.StatusProjectContext").value

        .Cells(ir, 11).value = Range("Status.Comment").value
        .Cells(ir, 12).value = Range("Status.ProgressPercent").value
        .Cells(ir, 13).value = Range("Status.SchedulePercent").value
        .Cells(ir, 14).value = Range("Status.WorkPercent").value
        .Cells(ir, 15).value = Range("Status.CostPercent").value
        .Cells(ir, 16).value = Range("Status.Start").value
        .Cells(ir, 17).value = Range("Status.Finish").value
        .Cells(ir, 18).value = Range("Status.BaseStart").value
        .Cells(ir, 19).value = Range("Status.BaseFinish").value
        .Cells(ir, 20).value = Range("Status.ScheduleForecastOffset").value
        .Cells(ir, 21).value = Range("Status.ScheduleForecastBar").value
        .Cells(ir, 22).value = Range("Status.ScheduleBaseOffset").value
        .Cells(ir, 23).value = Range("Status.ScheduleBaseBar").value
        .Cells(ir, 24).value = Range("Status.BaseWork").offset(0, 0).value
        .Cells(ir, 25).value = Range("Status.BaseWork").offset(0, 1).value
        .Cells(ir, 26).value = Range("Status.BaseWork").offset(0, 2).value
        .Cells(ir, 27).value = Range("Status.BaseWork").offset(0, 3).value
        .Cells(ir, 28).value = Range("Status.BaseWork").offset(0, 4).value
        .Cells(ir, 29).value = Range("Status.BaseCost").offset(0, 0).value
        .Cells(ir, 30).value = Range("Status.BaseCost").offset(0, 1).value
        .Cells(ir, 31).value = Range("Status.BaseCost").offset(0, 2).value
        .Cells(ir, 32).value = Range("Status.BaseCost").offset(0, 3).value
        .Cells(ir, 33).value = Range("Status.BaseCost").offset(0, 4).value
        

        'for SALK risk and Resources were swapped
        .Cells(ir, 35).value = Range("Status.Risk").value
'        .Cells(ir, 35).Value = Range("Status.RiskBudget").Value
'        .Cells(ir, 36).value = Range("Status.Organisation").value

        'added for SALK
        .Cells(ir, 34).value = GetResourcesTable.Serialize(Array(1, 3, 4, 5, 6, 7))
        

        If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
            .Cells(ir, 36).value = GetOrganisationTable.Serialize(Array(1))
        End If
        .Cells(ir, 37).value = GetContextTable.Serialize(Array(1))
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
            .Cells(ir, 38).value = StoreRiskMatrix
        End If
        .Cells(ir, 39).value = "" 'save keymsttable 'NOT USED
        .Cells(ir, 40).value = "" 'save resandcost figures for chart 'NOT USED
        ic = 41
        For Each R In getRange(Me, "Status.Actions.List", -2, 1, 1, 1)
            If R.value <> "" Then
                .Cells(ir, ic).value = "A"
                .Cells(ir, ic + 1).value = R.value
                .Cells(ir, ic + 2).value = R.offset(0, 1).value
                .Cells(ir, ic + 3).value = R.offset(0, 2).value
                .Cells(ir, ic + 4).value = R.offset(0, 5).value
                .Cells(ir, ic + 5).value = R.offset(0, 6).value
                ic = ic + 6
            End If
        Next

        For Each R In getRange(Me, "Status.Decisions.List", -2, 1, 1, 1)
            If R.value <> "" Then
                .Cells(ir, ic).value = "D"
                .Cells(ir, ic + 1).value = R.value
                .Cells(ir, ic + 2).value = R.offset(0, 1).value
                .Cells(ir, ic + 3).value = R.offset(0, 2).value
                .Cells(ir, ic + 4).value = R.offset(0, 5).value
                .Cells(ir, ic + 5).value = R.offset(0, 6).value
'                CellFunctions.CellsWrapped(StatusHist, ir, ic).value = "D"
'                CellFunctions.CellsWrapped(StatusHist, ir, ic + 1).value = r.value
'                CellFunctions.CellsWrapped(StatusHist, ir, ic + 2).value = r.Offset(0, 1).value
'                CellFunctions.CellsWrapped(StatusHist, ir, ic + 3).value = r.Offset(0, 2).value
                ic = ic + 6
            End If
        Next

        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
            For Each R In getRange(Me, "Status.MST.List", -2, 1, 1, 1)
                If R.value <> "" Then
                    .Cells(ir, ic).value = "M"
                    .Cells(ir, ic + 1).value = Trim(CStr(R.value)) + " aa" 'add text to PSPcode, otherwise interpretet as single in hist sheet (1.3 > 1,3)
                    .Cells(ir, ic + 2).value = R.offset(0, 1).value
                    .Cells(ir, ic + 3).value = R.offset(0, 4).value
                    .Cells(ir, ic + 4).value = R.offset(0, 5).value
                    .Cells(ir, ic + 5).value = R.offset(0, 6).value
                    ic = ic + 6
                End If
            Next
        End If
        
    End With
    
    'If MTA module active
    'then we update MTA sheet with this new statusreportdate
    If ModuleExists("MTAServer") Then
        If MTA.visible Then
            MTA.Select
            MTA.SaveReportDate Me.Range("Status.Statusdate").value
            Me.Select
        End If
    End If
    
    If Not modRibbon.bnoRibbonUpdate Then modRibbon.RefreshRibbon

subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.cmdSave_Click error:"
    Resume subend
End Sub


'function wird nicht verwendet
Private Function SerializeContextTable() As String
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "SerializeContextTable"

    SerializeContextTable = "Foo"

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Statusreport.SerializeContextTable error:"
    Resume subend
End Function

Public Sub cmdFirst_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "cmdFirst_Click"
    
    StatusHist.Range("A1").value = 1
    cboLoad
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.cmdFirst_Click error:"
    Resume subend
End Sub

Public Sub cmdPrevious_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "cmdPrevious_Click"
    
    If StatusHist.Range("A1").value > 1 Then StatusHist.Range("A1").value = StatusHist.Range("A1").value - 1
    cboLoad
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.cmdPrevious_Click error:"
    Resume subend
End Sub

Public Sub cmdNext_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "cmdNext_Click"
    
    If StatusHist.Range("A1").value <= StatusHist.Range("StatusHist").rows.Count - 1 Then StatusHist.Range("A1").value = StatusHist.Range("A1").value + 1
    cboLoad
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.cmdNext_Click error:"
    Resume subend
End Sub

Public Sub cboLoad()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "cboLoad"
'    noUpdate = True ' otherwise the change event makes problems when clearing tables
    LoadStatusreport
subend:
    
'    noUpdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    'modApp.ProtectSheet Me
    AppErrMsg "Status.cboLoad error:"
    Resume subend
End Sub


Public Sub LoadStatusreport()
    Dim R As Range
    Dim ic As Integer
    Dim ir As Integer
    Dim RA As Range
    Dim rD As Range
    Dim irA As Integer
    Dim irD As Integer
    Dim irM As Integer
    Dim mD As Range
    Dim at As TPGTable
    Dim dt As TPGTable
    Dim mt As TPGTable
    Dim c As Range
    Dim icurrentheight As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "LoadStatusreport"
    
    noupdate = True ' otherwise the change event makes problems when clearing tables
    ResetTables
    DeleteEntireMSTChart
    UnprotectSheet Me
    Me.ActionNeeded = False
    ic = 1
    Set R = Application.Names("StatusHist").RefersToRange
    ir = R.row + Sheets("StatusHist").Range("A1").value - 1
'    SetHistoryFields ir - 1
        
    With Sheets("StatusHist")
        Range("Status.StatusDate").value = .Cells(ir, 1).value
        Call SetTrafficLight(.Cells(ir, 2).value)
        Call SetTrend(.Cells(ir - 1, 2).value, .Cells(ir, 2).value)
        
        'Range("Status.ActionNeeded").Value = .Cells(ir, 3).Value
        Me.ActionNeeded = CBool2(.Cells(ir, 3).value)
        Range("Status.StatusProgress").value = .Cells(ir, 4).value
        SetTrafficProgress
        Range("Status.StatusSchedule").value = .Cells(ir, 5).value
        SetTrafficSchedule
        Range("Status.StatusWork").value = .Cells(ir, 6).value
        SetTrafficWork
        Range("Status.StatusCost").value = .Cells(ir, 7).value
        SetTrafficCost
        Range("Status.StatusRisk").value = .Cells(ir, 8).value
        SetTrafficRisk
        If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
            Range("Status.StatusOrgContext").value = .Cells(ir, 9).value
            SetTrafficOrgContext
        End If
        Range("Status.StatusProjectContext").value = .Cells(ir, 10).value
        SetTrafficContext
        Range("Status.Comment").value = .Cells(ir, 11).value
        Range("Status.ProgressPercent").value = .Cells(ir, 12).value
        Range("Status.SchedulePercent").value = .Cells(ir, 13).value
        Range("Status.WorkPercent").value = .Cells(ir, 14).value
        Range("Status.CostPercent").value = .Cells(ir, 15).value
        Range("Status.Start").value = .Cells(ir, 16).value
        Range("Status.Finish").value = .Cells(ir, 17).value
        Range("Status.BaseStart").value = .Cells(ir, 18).value
        Range("Status.BaseFinish").value = .Cells(ir, 19).value
        Range("Status.ScheduleForecastOffset").value = .Cells(ir, 20).value
        Range("Status.ScheduleForecastBar").value = .Cells(ir, 21).value
        Range("Status.ScheduleBaseOffset").value = .Cells(ir, 22).value
        Range("Status.ScheduleBaseBar").value = .Cells(ir, 23).value
        Range("Status.BaseWork").offset(0, 0).value = .Cells(ir, 24).value
        Range("Status.BaseWork").offset(0, 1).value = .Cells(ir, 25).value
        Range("Status.BaseWork").offset(0, 2).value = .Cells(ir, 26).value
        Range("Status.BaseWork").offset(0, 3).value = .Cells(ir, 27).value
        Range("Status.BaseWork").offset(0, 4).value = .Cells(ir, 28).value
        Range("Status.BaseCost").offset(0, 0).value = .Cells(ir, 29).value
        Range("Status.BaseCost").offset(0, 1).value = .Cells(ir, 30).value
        Range("Status.BaseCost").offset(0, 2).value = .Cells(ir, 31).value
        Range("Status.BaseCost").offset(0, 3).value = .Cells(ir, 32).value
        Range("Status.BaseCost").offset(0, 4).value = .Cells(ir, 33).value
        
        Range("Status.Risk").value = .Cells(ir, 35).value
        
        'Added for SALK
        GetResourcesTable.DeSerializeSkipFormulas Array(1, 3, 4, 5, 6, 7), .Cells(ir, 34).value
        
        If GetResourcesTable.RowsCount > 1 Then
            If Statusreport.Cells(GetResourcesTable.firstrow, 4) = "" And _
              Statusreport.Cells(GetResourcesTable.firstrow, 6) = "" And _
              Statusreport.Cells(GetResourcesTable.firstrow, 7) = "" And _
              Statusreport.Cells(GetResourcesTable.firstrow, 8) = "" Then
              
              Statusreport.Cells(GetResourcesTable.firstrow, 1).EntireRow.Delete
            End If
        End If
        
        For Each c In GetResourcesTable.ValuesRange(1)
            GetResourcesTable.Mergedfit c
        Next

        If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
            GetOrganisationTable.DeSerialize Array(1), .Cells(ir, 36).value
            'autofit
            For Each c In GetOrganisationTable.ValuesRange.Resize(, 1)
                AutoFitMergedCell c, 16
            Next
        End If
        GetContextTable.DeSerialize Array(1), .Cells(ir, 37).value
        'autofilt
        For Each c In GetContextTable.ValuesRange.Resize(, 1)
            AutoFitMergedCell c, 16
        Next
        
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
            LoadRiskMatrix .Cells(ir, 38).value
        End If
        
        ' .Cells(ir, 39).Value >> keymsttable 'NOT USED
        
        ' .Cells(ir, 40).Value >> rescostchartdata ' NOT USED
        
        Set RA = Range("Status.Actions.List").offset(1, 1).Resize(Range("Status.Actions.List").rows.Count - 2, 6)
        RA.ClearContents
        irA = 1
        
        Set rD = Range("Status.Decisions.List").offset(1, 1).Resize(Range("Status.Decisions.List").rows.Count - 2, 6)
        rD.ClearContents
        irD = 1
        
        Set mD = Range("Status.MST.List").offset(1, 1).Resize(Range("Status.MST.List").rows.Count - 2, 6)
        mD.ClearContents
        irM = 1
        
        ic = 41
        Set at = GetActionsTable
        Set dt = GetDecisionsTable
        Set mt = GetMSTTable
        Do Until .Cells(ir, ic).value = ""
            Select Case .Cells(ir, ic).value
            Case "A"
                If irA > at.RowsCount Then at.AddRow
                at.ValuesRange.Cells(irA, 1).value = .Cells(ir, ic + 1).value
                at.ValuesRange.Cells(irA, 2).value = .Cells(ir, ic + 2).value
                at.ValuesRange.Cells(irA, 3).value = .Cells(ir, ic + 3).value
                at.ValuesRange.Cells(irA, 6).value = .Cells(ir, ic + 4).value
                at.ValuesRange.Cells(irA, 7).value = .Cells(ir, ic + 5).value
                at.Mergedfit at.ValuesRange.Cells(irA, 1)
                irA = irA + 1
            Case "D"
                If irD > dt.RowsCount Then dt.AddRow
                dt.ValuesRange.Cells(irD, 1).value = .Cells(ir, ic + 1).value
                dt.ValuesRange.Cells(irD, 2).value = .Cells(ir, ic + 2).value
                dt.ValuesRange.Cells(irD, 3).value = .Cells(ir, ic + 3).value
                dt.ValuesRange.Cells(irD, 6).value = .Cells(ir, ic + 4).value
                dt.ValuesRange.Cells(irD, 7).value = .Cells(ir, ic + 5).value
                dt.Mergedfit dt.ValuesRange.Cells(irD, 1)
                irD = irD + 1
            Case "M"
                'no MST list and chart for KISS
                If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
                    If irM > mt.RowsCount Then mt.AddRow
                    mt.ValuesRange.Cells(irM, 1).EntireRow.Hidden = True
                    mt.ValuesRange.Cells(irM, 1).value = Left(.Cells(ir, ic + 1).value, Len(.Cells(ir, ic + 1).value) - 2)
                    mt.ValuesRange.Cells(irM, 2).value = .Cells(ir, ic + 2).value
                    mt.ValuesRange.Cells(irM, 5).value = .Cells(ir, ic + 3).value
                    mt.ValuesRange.Cells(irM, 6).value = .Cells(ir, ic + 4).value
                    mt.ValuesRange.Cells(irM, 7).value = .Cells(ir, ic + 5).value
                    'mt.Mergedfit mt.ValuesRange.Cells(irM, 1)
                    irM = irM + 1
                End If
            End Select
            'ic = ic + 4
            ic = ic + 6
        Loop
    End With
    
    'show mstchart if needed
    'only display mst chart when there are keymilesstones
    If (irM - 1) = 0 Then
        Me.Range("Status.Row.MSTChart").EntireRow.Hidden = True
    Else
        Me.Range("Status.Row.MSTChart").EntireRow.Hidden = False
        If Me.RebuildStatusMSTTimeLine Then
            icurrentheight = 1
            For Each c In Me.Range("Status.MST.List").Resize(Me.Range("Status.MST.List").rows.Count - 2, 1).offset(1, 2)
                If (c.value <> "") And (c.offset(0, 2).value <> "") Then
                    SetMSTShape c.value, c.offset(0, 2).value, icurrentheight
                    'when more than 5 keymsts then we use 2 levels in chart
                    If (irM - 1) > 5 Then
                        Select Case icurrentheight
                            Case -1
                                icurrentheight = 3
                            Case -3
                                icurrentheight = 1
                            Case Else
                                icurrentheight = icurrentheight * -1
                        End Select
                    Else
                        icurrentheight = icurrentheight * -1
                    End If
                End If
            Next
        End If
    End If
    
    FormatStatusChart
    FormatCostPhaseChart
    modShapes.RearrangeControls Me
    noupdate = False
    
subend:
     
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.LoadStatusreport error:"
    Resume subend
End Sub

Private Sub SetTrend(s1 As String, s2 As String)

On Error GoTo suberr
modStack.PushCallStack "Statusreport", "SetTrend"

 Select Case s1
     Case appGetLOCText("green")
        Select Case s2
            Case appGetLOCText("green")
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(192, 192, 192)
             Case appGetLOCText("yellow")
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(227, 0, 27)
             Case appGetLOCText("red")
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(227, 0, 27)
             Case Else
                Me.Range("Status.Trend").value = ""
        End Select
     Case appGetLOCText("yellow")
        Select Case s2
            Case appGetLOCText("green")
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(112, 173, 71)
             Case appGetLOCText("yellow")
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(192, 192, 192)
             Case appGetLOCText("red")
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(227, 0, 27)
             Case Else
                Me.Range("Status.Trend").value = ""
        End Select
     Case appGetLOCText("red")
        Select Case s2
            Case appGetLOCText("green")
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(112, 173, 71)
             Case appGetLOCText("yellow")
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(112, 173, 71)
             Case appGetLOCText("red")
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(192, 192, 192)
             Case Else
                Me.Range("Status.Trend").value = ""
        End Select
     Case Else
'        Me.Range("Status.Trend").Value = ""
        Me.Range("Status.Trend").value = "|fffd|"
        Me.Range("Status.Trend").Font.Color = RGB(192, 192, 192)
End Select

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.SetTrend error:"
    Resume subend
End Sub

Public Sub cmdUpdate_Click()
    Dim i As Integer
    Dim d As Double
    Dim rCell As Range
        
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "cmdUpdate_Click"
    noupdate = True
    
    'for 2007 we need to unprotect
    If Application.Version = "12.0" Then UnprotectSheet Me
    DeleteEntireMSTChart

    If IsEmpty(Application.Names("Plan.BaselineSaveDate").RefersToRange.value) Then
        AppStopMsg appGetLOCText("StopUpdateStatusNoBaseline")
        GoTo subend
    End If
    
    If IsEmpty(Cover.Range("Cover.Statusdate").value) Then
        AppStopMsg appGetLOCText("StopUpdateStatusNoDate")
        GoTo subend
    End If
    
    Range("Status.Statusdate").value = Cover.Range("Cover.Statusdate").value
    
    UpdateTrafficLightAndTrend
    
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
        'for 2007 we need to unprotect
        If Application.Version = "12.0" Then UnprotectSheet Me
        UpdateRiskMatrix
    End If
    
    'Progress
    d = Plan.Range("Plan.Progress").value / 100
    Me.Range("Status.ProgressPercent").value = d
    
    'schedule
    d = 0
    If IsDate(Plan.Range("Plan.BaseFinish").value) And IsDate(Plan.Range("Plan.Basestart").value) And IsDate(Me.Range("Status.Statusdate").value) Then
        d = DateDiff("d", Plan.Range("Plan.BaseFinish").value, Plan.Range("Plan.Basestart").value)
        d = DateDiff("d", Me.Range("Status.Statusdate").value, Plan.Range("Plan.Basestart").value) / d
    End If
    Range("Status.SchedulePercent").value = d
    
    'modified for SALK
'    'Work
'    d = Plan.Range("Plan.BaseWork").value
'    If d <> 0 Then d = Plan.Range("Plan.BaseWork").offset(0, 2).value / Plan.Range("Plan.BaseWork").value
'    Range("Status.WorkPercent").value = d
'
'    'Cost
'    d = Plan.Range("Plan.BaseCost").value
'    If d <> 0 Then d = Plan.Range("Plan.BaseCost").offset(0, 2).value / Plan.Range("Plan.BaseCost").value
'    Range("Status.CostPercent").value = d

    'Cost
    d = Plan.Range("Plan.BaseCost").offset(0, 2).value
    If d <> 0 Then d = Plan.Range("Plan.BaseCost").value / d
    Range("Status.CostPercent").value = d
            
    FormatStatusChart
    
    UpdateSchedule
    
    'Resources and cost
    For i = 0 To 4
        Range("Status.BaseWork").offset(0, i).value = Plan.Range("Plan.BaseWork").offset(0, i).value
        Range("Status.BaseCost").offset(0, i).value = Plan.Range("Plan.BaseCost").offset(0, i).value
        
    Next

    'Risk
'    Range("Status.RiskBudget").Value = Risk.Range("Risk.RiskBudget").Value
    
    'added for SALK -- fetches values from Contract
    UpdateResourcesTable
    
    UpdateActions
    UpdateDecisions
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
        UpdateMST
    End If
    modShapes.RearrangeControls Me
    FormatCostPhaseChart
    
    
    'SetHistoryFields
subend:
    noupdate = False
    ProtectSheet Me
    modStack.PopCallStack
    'for 2007 we need to unprotect
    If Application.Version = "12.0" Then EnsureUIProtection Me
    Exit Sub
suberr:
    AppErrMsg "Status.cmdUpdate_Click error:"
    Resume subend
End Sub

Private Sub UpdateTrafficLightAndTrend()
    Dim ilastrow As Integer
    Dim rCell As Range
    Dim slast As String
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "UpdateTrafficLightAndTrend"

    Set rCell = StatusHist.Range("Statushist").Find(Cover.Range("Cover.Statusdate").value)
    If Not rCell Is Nothing Then
        ilastrow = rCell.row - 1
    Else
        ilastrow = StatusHist.Range("Statushist").rows.Count + 2
    End If
    slast = StatusHist.Cells(ilastrow, 2)
    
    Select Case Plan.Range("Plan.Status").value
    Case "..."
        Me.Shapes("trafficRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
        Me.Shapes("trafficYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        Me.Shapes("trafficGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
        Me.Range("Status.Trend").value = "|fffd|"
        Me.Range("Status.Trend").Font.Color = RGB(192, 192, 192)
    Case appGetLOCText("Red")
        Me.Shapes("trafficRed").Fill.ForeColor.RGB = RGB(227, 0, 27)
        Me.Shapes("trafficYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        Me.Shapes("trafficGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
        Select Case slast
            Case appGetLOCText("Red")
                Me.Range("Status.Trend").value = "|fffd|" 'grey arrow equal
                Me.Range("Status.Trend").Font.Color = RGB(192, 192, 192)
            Case appGetLOCText("Yellow")
                Me.Range("Status.Trend").value = "|fffd|" 'red arrow down
                Me.Range("Status.Trend").Font.Color = RGB(227, 0, 27)
            Case appGetLOCText("Green")
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(227, 0, 27)
            Case Else
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(192, 192, 192)
        End Select
    Case appGetLOCText("Yellow")
        Me.Shapes("trafficRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
        Me.Shapes("trafficYellow").Fill.ForeColor.RGB = RGB(255, 192, 0)
        Me.Shapes("trafficGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
        Select Case slast
            Case appGetLOCText("Red")
                Me.Range("Status.Trend").value = "|fffd|" 'green arrow up
                Me.Range("Status.Trend").Font.Color = RGB(112, 173, 71)
            Case appGetLOCText("Yellow")
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(192, 192, 192)
            Case appGetLOCText("Green")
                Me.Range("Status.Trend").value = "|fffd|" 'red arrow down
                Me.Range("Status.Trend").Font.Color = RGB(227, 0, 27)
            Case Else
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(192, 192, 192)
        End Select
    Case appGetLOCText("Green")
        Me.Shapes("trafficRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
        Me.Shapes("trafficYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
        Me.Shapes("trafficGreen").Fill.ForeColor.RGB = RGB(112, 173, 71)
        Select Case slast
            Case appGetLOCText("Red")
                Me.Range("Status.Trend").value = "|fffd|" 'green arrow up
                Me.Range("Status.Trend").Font.Color = RGB(112, 173, 71)
            Case appGetLOCText("Yellow")
                Me.Range("Status.Trend").value = "|fffd|" 'green arrow up
                Me.Range("Status.Trend").Font.Color = RGB(112, 173, 71)
            Case appGetLOCText("Green")
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(192, 192, 192)
            Case Else
                Me.Range("Status.Trend").value = "|fffd|"
                Me.Range("Status.Trend").Font.Color = RGB(192, 192, 192)
        End Select
    End Select

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.UpdateTrafficLightAndTrend error:"
    Resume subend
End Sub

Private Sub UpdateSchedule()
    Dim i As Integer
    Dim dstart As Date
    Dim dfinish As Date
    
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "UpdateSchedule"

    Range("Status.Start").value = Plan.Range("Plan.Start").value
    Range("Status.Finish").value = Plan.Range("Plan.Finish").value
    Range("Status.BaseStart").value = Plan.Range("Plan.BaseStart").value
    Range("Status.BaseFinish").value = Plan.Range("Plan.BaseFinish").value
    
    If Range("Status.Start").value <= Range("Status.BaseStart").value Then
        dstart = Range("Status.Start").value
        Range("Status.ScheduleForecastOffset").value = 0
        
        If Range("Status.Finish").value <= Range("Status.BaseFinish").value Then
            dfinish = Range("Status.BaseFinish").value
            i = DateDiff("d", dstart, dfinish)
            If i = 0 Then i = 1
            Range("Status.ScheduleBaseOffset").value = DateDiff("d", Range("Status.Start").value, Range("Status.BaseStart").value) / i
            Range("Status.ScheduleBaseBar").value = 1 - Range("Status.ScheduleBaseOffset").value
            Range("Status.ScheduleForecastBar").value = DateDiff("d", Range("Status.Start").value, Range("Status.Finish").value) / i
        Else
            dfinish = Range("Status.Finish").value
            i = DateDiff("d", dstart, dfinish)
            Range("Status.ScheduleBaseOffset").value = DateDiff("d", Range("Status.Start").value, Range("Status.BaseStart").value) / i
            Range("Status.ScheduleBaseBar").value = DateDiff("d", Range("Status.BaseStart").value, Range("Status.BaseFinish").value) / i
            Range("Status.ScheduleForecastBar").value = 1
        End If
    Else
        dstart = Range("Status.BaseStart").value
        Range("Status.ScheduleBaseOffset").value = 0
        
        If Range("Status.Finish").value <= Range("Status.BaseFinish").value Then
            dfinish = Range("Status.BaseFinish").value
            i = DateDiff("d", dstart, dfinish)
            Range("Status.ScheduleForecastOffset").value = DateDiff("d", Range("Status.BaseStart").value, Range("Status.Start").value) / i
            Range("Status.ScheduleBaseBar").value = 1
            Range("Status.ScheduleForecastBar").value = DateDiff("d", Range("Status.Start").value, Range("Status.Finish").value) / i
        Else
            dfinish = Range("Status.Finish").value
            i = DateDiff("d", dstart, dfinish)
            Range("Status.ScheduleForecastOffset").value = DateDiff("d", Range("Status.BaseStart").value, Range("Status.Start").value) / i
            Range("Status.ScheduleBaseBar").value = DateDiff("d", Range("Status.BaseStart").value, Range("Status.BaseFinish").value) / i
            Range("Status.ScheduleForecastBar").value = 1 - Range("Status.ScheduleForecastOffset").value
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.UpdateSchedule error:"
    Resume subend
End Sub

Private Sub UpdateAction(actionsTable As TPGTable, toDoItem As TPGToDoItem, lineNumber As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "UpdateAction"

    actionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 0).value = toDoItem.Status
    actionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 1).value = toDoItem.subject
    actionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 2).value = toDoItem.action
    actionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 5).value = toDoItem.Responsible
    If toDoItem.dueDate = 0 Then
        actionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 6).value = ""
    Else
        actionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 6).value = toDoItem.dueDate
    End If
    actionsTable.Mergedfit actionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 0)

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.UpdateAction error:"
    Resume subend
End Sub

Private Sub UpdateActions()
    Dim i As Integer
    Dim toDoItems As Collection
    Dim actionsTable As TPGTable
    Dim toDoItem As TPGToDoItem
    
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "UpdateActions"

    Set actionsTable = GetActionsTable
    Set toDoItems = Actions.GetActionItemsForStatusReport
    
    actionsTable.clear
    If toDoItems.Count < 1 Then GoTo subend
    actionsTable.GrowUntil toDoItems.Count
    
    i = 0
    For Each toDoItem In toDoItems
        UpdateAction actionsTable, toDoItem, i
        i = i + 1
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.UpdateActions error:"
    Resume subend
End Sub

Private Sub UpdateMST()
    Dim i As Integer
    Dim mt As TPGTable
    Dim irM As Integer
    Dim Project As New TPGProject
    Dim task As TPGProjectTask
    Dim btimelineok As Boolean
    Dim icnt As Integer
    Dim c As Range
    Dim icurrentheight As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "UpdateMST"

    Set mt = GetMSTTable
    mt.clear
    'make sure the first (and only) row stays hidden
    mt.ValuesRange.Cells(1, 1).EntireRow.Hidden = True
    irM = 1
    
    For Each task In Project
        If task("Typ") = "M" Then
            If (task("KeyMST") = "x") Then
                If irM > mt.RowsCount Then mt.AddRow
                mt.ValuesRange.Cells(irM, 1).EntireRow.Hidden = True
                mt.ValuesRange.Cells(irM, 1).value = task("WBS")
                mt.ValuesRange.Cells(irM, 2).value = task("TaskName")
                If task("BaselineStart") <> 0 Then mt.ValuesRange.Cells(irM, 5).value = task("BaselineStart")
                If Application.Names("Plan.BaselineSaveDate").RefersToRange.value > 0 Then
                    If task("Start") <> 0 Then
                        mt.ValuesRange.Cells(irM, 6).value = task("Start")
                    End If
                End If
                If task("Progress") = 100 Then
                    mt.ValuesRange.Cells(irM, 7).value = task("Start")
                End If
              '  mt.Mergedfit mt.ValuesRange.Cells(irM, 1)
                irM = irM + 1
                icnt = icnt + 1
            End If
        End If
    Next
    
    'only display mst chart when there are keymilesstones
    If icnt = 0 Then
        Me.Range("Status.Row.MSTChart").EntireRow.Hidden = True
    Else
        Me.Range("Status.Row.MSTChart").EntireRow.Hidden = False
        btimelineok = RebuildStatusMSTTimeLine 'bTimeLineMonths contains indication whether timeline is months / quarters
        icurrentheight = 1
        If btimelineok Then
            For Each c In Me.Range("Status.MST.List").Resize(Me.Range("Status.MST.List").rows.Count - 2, 1).offset(1, 2)
                If (c.value <> "") And (c.offset(0, 2).value <> "") Then
                    SetMSTShape c.value, c.offset(0, 2).value, icurrentheight
                    'when more than 5 keymsts then we use 2 levels in chart
                    If icnt > 5 Then
                        Select Case icurrentheight
                            Case -1
                                icurrentheight = 3
                            Case -3
                                icurrentheight = 1
                            Case Else
                                icurrentheight = icurrentheight * -1
                        End Select
                    Else
                        icurrentheight = icurrentheight * -1
                    End If
                End If
            Next
        End If
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.UpdateMST error:"
    Resume subend
End Sub

Private Sub UpdateDecision(decisionsTable As TPGTable, decisionItem As TPGDecisionItem, lineNumber As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "UpdateDecision"

    decisionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 0).value = decisionItem.Status
    decisionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 1).value = decisionItem.subject
    decisionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 2).value = decisionItem.decision
    decisionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 5).value = decisionItem.Responsible
    If decisionItem.dueDate = 0 Then
        decisionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 6).value = ""
    Else
        decisionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 6).value = decisionItem.dueDate
    End If
    decisionsTable.Mergedfit decisionsTable.ValuesRange.Resize(1, 1).offset(lineNumber, 1)

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.UpdateDecision error:"
    Resume subend
End Sub

Private Sub UpdateDecisions()
    Dim i As Integer
    Dim decisionItems As Collection
    Dim decisionsTable As TPGTable
    Dim decisionItem As TPGDecisionItem
    
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "UpdateDecisions"

    Set decisionsTable = GetDecisionsTable
    Set decisionItems = Decisions.GetDecisionItemsForStatusReport
    
    decisionsTable.clear
    If decisionItems.Count < 1 Then GoTo subend
    decisionsTable.GrowUntil decisionItems.Count
    
    i = 0
    For Each decisionItem In decisionItems
        UpdateDecision decisionsTable, decisionItem, i
        i = i + 1
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.UpdateDecisions error:"
    Resume subend
End Sub

Private Sub FormatCostPhaseChart()
 
    Dim barPrognose As Variant
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "FormatCostPhaseChart"

 
  
    Me.Calculate
    'UnprotectSheet Me
    Set barPrognose = Me.ChartObjects(4).Chart.SeriesCollection(1).Points(2)
    barPrognose.Format.Fill.ForeColor.RGB = RGB(191, 191, 191)
    If Me.Range("Status.BaseCost").offset(0, 1).value > Me.Range("Status.BaseCost").offset(0, 2).value Then
        barPrognose.Format.Fill.ForeColor.RGB = RGB(227, 0, 27)
    Else
        barPrognose.Format.Fill.ForeColor.RGB = RGB(191, 191, 191)
    End If
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.FormatCostPhaseChart error:"
    Resume subend
End Sub
Private Sub FormatStatusChart()
    Dim d As Double
    Dim dmax As Double
    Dim ChartObject As Chart
    
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "FormatStatusChart"

    Me.Calculate
    UnprotectSheet Me
    Set ChartObject = Me.ChartObjects(1).Chart
    
    dmax = Range("Status.ProgressPercent").value
    
    d = Range("Status.SchedulePercent").value
    If d > dmax Then dmax = d
    
    ChartObject.SeriesCollection(1).Points(3).Interior.Color = IIf(d > 1, RGB(227, 0, 27), RGB(192, 192, 192)) 'RGB(127, 127, 127))
    
    d = Range("Status.WorkPercent").value
    If d > dmax Then dmax = d
    
    ChartObject.SeriesCollection(1).Points(2).Interior.Color = IIf(d > 1, RGB(227, 0, 27), RGB(192, 192, 192)) 'RGB(127, 127, 127))
    
    d = Range("Status.CostPercent").value
    If d > dmax Then dmax = d
    
    ChartObject.SeriesCollection(1).Points(1).Interior.Color = IIf(d > 1, RGB(227, 0, 27), RGB(192, 192, 192)) 'RGB(127, 127, 127))
    
    If dmax < 1 Then
        dmax = 1
    Else
        'modified for SALK
        dmax = (VBA.CDbl(dmax * 10) + 1) / 10
    End If
    ChartObject.Axes(xlValue).MaximumScale = dmax

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.FormatStatusChart error:"
    Resume subend

End Sub

Private Sub SetTrafficLight(sStatus As String)
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "SetTrafficLight"
        
        Select Case sStatus
        Case "..."
            Statusreport.Shapes("trafficRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
            Statusreport.Shapes("trafficYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
            Statusreport.Shapes("trafficGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
        
        Case appGetLOCText("Red")
            Statusreport.Shapes("trafficRed").Fill.ForeColor.RGB = RGB(227, 0, 27)
            Statusreport.Shapes("trafficYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
            Statusreport.Shapes("trafficGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
        
        Case appGetLOCText("Yellow")
            Statusreport.Shapes("trafficRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
            Statusreport.Shapes("trafficYellow").Fill.ForeColor.RGB = RGB(255, 192, 0)
            Statusreport.Shapes("trafficGreen").Fill.ForeColor.RGB = RGB(255, 255, 255)
        
        Case appGetLOCText("Green")
            Statusreport.Shapes("trafficRed").Fill.ForeColor.RGB = RGB(255, 255, 255)
            Statusreport.Shapes("trafficYellow").Fill.ForeColor.RGB = RGB(255, 255, 255)
            Statusreport.Shapes("trafficGreen").Fill.ForeColor.RGB = RGB(112, 173, 71)
        
        End Select

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.SetTrafficLight error:"
    Resume subend
End Sub

Private Function GetContextTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "GetContextTable"

    t.SetTable Me.Range("Status.Context.Table"), False, False, TemplateFirstrow, 2, DefaultRowHeight:=14 '10.5
    Set GetContextTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Statusreport.GetContextTable error:"
    Resume subend
End Function


Private Function GetOrganisationTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "GetOrganisationTable"

    t.SetTable Me.Range("Status.Organisation.Table"), False, False, TemplateFirstrow, 2, DefaultRowHeight:=14
    Set GetOrganisationTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Statusreport.GetOrganisationTable error:"
    Resume subend
End Function

Private Function GetMSTTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "GetMSTTable"

    t.SetTable Me.Range("Status.MST.List"), True, False, TemplateFirstrow, 1, DefaultRowHeight:=10.5
    Set GetMSTTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Statusreport.GetMSTTable error:"
    Resume subend
End Function

Public Function GetResourcesTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "GetResourcesTable"

    t.SetTable Me.Range("Status.Table.Resources"), False, False, TemplateFirstrow, 1
    Set GetResourcesTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Statusreport.GetResourcesTable error:"
    Resume subend
End Function

Private Function GetActionsTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "GetActionsTable"

    t.SetTable Me.Range("Status.Actions.List"), True, False, TemplateFirstrow, 1, DefaultRowHeight:=10.5
    Set GetActionsTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Statusreport.GetActionsTable error:"
    Resume subend
End Function

Private Function GetDecisionsTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "GetDecisionsTable"

    t.SetTable Me.Range("Status.Decisions.List"), True, False, TemplateFirstrow, 1, DefaultRowHeight:=10.5
    Set GetDecisionsTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Statusreport.GetDecisionsTable error:"
    Resume subend
End Function

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "cmdInsert_Click"
    
    noupdate = True
    actionInsertDelete = True
    
'    If GetActionsTable.InsertRow_Clicked(ActiveCell) Then GoTo subEnd
'    If GetDecisionsTable.InsertRow_Clicked(ActiveCell) Then GoTo SubEnd
    If GetContextTable.InsertRow_Clicked(ActiveCell) Then GoTo subend
    If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
        If GetOrganisationTable.InsertRow_Clicked(ActiveCell) Then
            modShapes.RearrangeControls Me
            GoTo subend
        End If
    End If
    'Added for SALK
    If GetResourcesTable.InsertRow_Clicked(ActiveCell) Then GoTo subend
subend:
    
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.cmdDelete_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "cmdDelete_Click"
    
    noupdate = True
    actionInsertDelete = True
    
'    If GetActionsTable.DeleteRow_Clicked(ActiveCell) Then GoTo subEnd
'    If GetDecisionsTable.DeleteRow_Clicked(ActiveCell) Then GoTo SubEnd
    If GetContextTable.DeleteRow_Clicked(ActiveCell) Then GoTo subend
    If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
        If GetOrganisationTable.DeleteRow_Clicked(ActiveCell) Then
            modShapes.RearrangeControls Me
            GoTo subend
        End If
    End If
    'added for SALK
    If GetResourcesTable.DeleteRow_Clicked(ActiveCell) Then GoTo subend
subend:
    
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.cmdDelete_Click error:"
    Resume subend
End Sub



'Public Sub PublishToSharepoint()
'
'    On Error GoTo SubErr
'    modStack.PushCallStack "Statusreport", "PublishToSharepoint"
'
'    Statusreport.Range(Statusreport.PageSetup.PrintArea).ExportAsFixedFormat xlTypePDF, Admin.Range("Admin.SharepointLib").Text & _
'    Cover.Range("Cover.ProjectName") & "_Status_" & _
'    Mid(Date, 7, 4) & "_" & _
'    Mid(Date, 4, 2) & "_" & _
'    Mid(Date, 1, 2) & "_" & _
'    Mid(Time, 1, 2) & "_" & _
'    Mid(Time, 4, 2) & "_" & _
'    Mid(Time, 7, 2) & ".pdf"
'
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "Statusreport.PublishToSharepoint error:", "Unable to access the Sharepoint Document Library."
'    Resume SubEnd
'
'End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
If noupdate Then Exit Sub

If Target.Cells.Count = 6 Then
    If (Target.Column = Me.Range("Status.ActionNeeded2").Column - 6) And (Target.row = Me.Range("Status.ActionNeeded2").row) Then Cancel = True
End If
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (InRange(Target, GetContextTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext False, False
ElseIf (InRange(Target, GetResourcesTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext False, False
ElseIf ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
    If (InRange(Target, GetOrganisationTable.ValuesRange)) And (Target.Areas.Count = 1) Then
        modContextMenu.BuildTableContext False, False
    End If
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "Worksheet_Change"
    
    '
    
    If actionInsertDelete Then
        modShapes.RearrangeControls Me
        actionInsertDelete = False
        GoTo subend
    End If
    
    If noupdate Then GoTo subend
    
    If GetActionsTable.Mergedfit(Target) Then GoTo subend
    If GetDecisionsTable.Mergedfit(Target) Then GoTo subend
    If GetContextTable.Mergedfit(Target) Then GoTo subend
    
    If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
        If GetOrganisationTable.Mergedfit(Target) Then
            modShapes.RearrangeControls Me
        End If
    End If
    'added for SALK
    If GetResourcesTable.Mergedfit(Target) Then
        modShapes.RearrangeControls Me
        GoTo subend
    End If
    
  

    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.Worksheet_Change error:"
    Resume subend
End Sub

Private Sub ResetTables()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "ResetTables"
    UnprotectSheet Me
    Me.ActionNeeded = False
    Range("Status.StatusProgress").ClearContents 'Value = "..."
    Range("Status.StatusSchedule").ClearContents 'Value = "..."
    Range("Status.StatusWork").ClearContents 'Value = "..."
    Range("Status.StatusCost").ClearContents 'Value = "..."
    Range("Status.StatusRisk").ClearContents 'Value = "..."
    If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then Range("Status.StatusOrgContext").value = "..."
    Range("Status.StatusProjectContext").ClearContents 'Value = "..."
    SetTrafficProgress
    SetTrafficSchedule
    SetTrafficWork
    SetTrafficCost
    SetTrafficRisk
    SetTrafficContext
    If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then SetTrafficOrgContext
    
    GetDecisionsTable.clear
    GetActionsTable.clear
    
    'added for SALK
    GetResourcesTable.clear
    
    GetMSTTable.clear
    Me.Range("Status.MST.List").Resize(Me.Range("Status.MST.List").rows.Count - 2, 1).offset(1, 0).EntireRow.Hidden = True
    GetContextTable.clear
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
        ResetRisks
    Else
        GetOrganisationTable.clear
    End If
subend:
    ProtectSheet Me
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.ResetTables error:"
    Resume subend
End Sub

Public Sub clear()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "Clear"
    StatusHist.Range("A1").value = 1
subend:
    LoadStatusreport
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Status.Clear error:"
    Resume subend
End Sub

Private Function StoreRiskMatrix() As String
Dim i As Integer
Dim Matrix As shape
Dim RA As shape
Dim t As New TPGTokenizer

On Error GoTo suberr
modStack.PushCallStack "Statusreport", "StoreRiskMatrix"
Set Matrix = Me.Shapes("Status.RiskMatrix")
Set t = New TPGTokenizer
For i = 1 To 16
    Set RA = Matrix.GroupItems(i)
    t.Add RA.TextFrame2.TextRange.Text
Next
StoreRiskMatrix = t.ToString

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Statusreport.StoreRiskMatrix error:"
    Resume subend
End Function

Private Sub UpdateRiskMatrix()
'fill riskmatrix with data from matrix in risk sheet
Dim i As Integer
Dim Matrix As shape
Dim RA As shape

On Error GoTo suberr
modStack.PushCallStack "Statusreport", "UpdateRiskMatrix"
Set Matrix = Me.Shapes("Status.RiskMatrix")
For i = 1 To 16
    Set RA = Matrix.GroupItems(i)
    If i <= 4 Then
        RA.TextFrame2.TextRange.Text = Risk.Range("Risk.RiskMatrix1").offset(i - 1, 0).value
    ElseIf i <= 8 Then
        RA.TextFrame2.TextRange.Text = Risk.Range("Risk.RiskMatrix1").offset((i - 4) - 1, 1).value
    ElseIf i <= 12 Then
        RA.TextFrame2.TextRange.Text = Risk.Range("Risk.RiskMatrix1").offset((i - 8) - 1, 2).value
    Else
        RA.TextFrame2.TextRange.Text = Risk.Range("Risk.RiskMatrix1").offset((i - 12) - 1, 3).value
    End If
Next
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.UpdateRiskMatrix error:"
    Resume subend
End Sub

Private Sub LoadRiskMatrix(TokenString As String)
    Dim i As Integer
    Dim Matrix As shape
    Dim RA As shape
    Dim t As New TPGTokenizer

    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "LoadRiskMatrix"
    Set Matrix = Me.Shapes("Status.RiskMatrix")
    t.FromString TokenString
    If t.Count < 1 Then
        For i = 1 To 16
            Set RA = Matrix.GroupItems(i)
            RA.TextFrame2.TextRange.Text = ""
        Next
    Else
        For i = 1 To 16
            Set RA = Matrix.GroupItems(i)
            RA.TextFrame2.TextRange.Text = t.Tokens(i)
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.LoadRiskMatrix error:"
    Resume subend
End Sub

Public Sub ResetRisks()
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "ResetRisks"

    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim Matrix As shape
    Dim RA As shape
    Dim iSide As Integer
    Dim sVal As String
    Dim iVal As Integer
    Dim t As New TPGTokenizer
    
    'for 2007 we need to unprotect
    If Application.Version = "12.0" Then UnprotectSheet Me
    Set Matrix = Me.Shapes("Status.RiskMatrix")
    k = 1
    iSide = 23
    For i = 1 To 4
        For j = 1 To 4
            iVal = 0
            Set RA = Matrix.GroupItems(k)
            RA.Name = "RA_" & i & j
            RA.Height = iSide
            RA.Width = iSide
            RA.Left = i * (iSide) + Me.Range("Status.RiskAnchor").Left - iSide
            RA.Top = j * (iSide) + Me.Range("Status.RiskAnchor").Top - iSide
            RA.TextFrame2.TextRange.Text = ""
            k = k + 1
        Next
    Next
    Matrix.Left = Me.Range("Status.RiskAnchor").Left + 20
    Matrix.Top = Me.Range("Status.RiskAnchor").Top + 5

'    GetRiskTable.ValuesRange.ClearContents
'    For i = 1 To GetRiskTable.RowsCount - 5
'        GetRiskTable.DeleteRow GetRiskTable.ValuesRange(1).Cells(1, 1)
'    Next
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.ResetRisks error:"
    Resume subend
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
If noupdate Then Exit Sub
If Target.Cells.Count = 1 Then
    If InRange(Target, Me.Range("Status.ActionNeeded2")) Then
        If (Target.Cells(1, 1).value = "|fffd|") Then
            noupdate = True
            Target.Cells(1, 1).value = "|fffd|"
            Me.Cells(Target.row, Target.Column - 1).Select
            noupdate = False
        ElseIf (Target.Cells(1, 1).value = "|fffd|") Then
            noupdate = True
            Target.Cells(1, 1).value = "|fffd|"
            Me.Cells(Target.row, Target.Column - 1).Select
            noupdate = False
        End If
    End If
End If
End Sub


Public Sub UpdateResourcesTable()
    Dim c As Range, i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Statusreport", "UpdateResourcesTable"

    Dim rCell As Range
    Dim rFind As Range
    
    For Each rCell In Contract.GetResourcesTable.ValuesRange(2)
        If Not rCell.value = "" Then
            Set rFind = Union(GetResourcesTable.ValuesRange(1), GetResourcesTable.ValuesRange(2)).Find(rCell.value)
            If rFind Is Nothing Then GetResourcesTable.GetFreeRange.Cells(1).value = rCell.value
            
            i = i + 1
        End If
    Next
    
    If i < 1 Then GoTo subend
    
    If Statusreport.Cells(GetResourcesTable.firstrow, 4) = "" And _
      Statusreport.Cells(GetResourcesTable.firstrow, 6) = "" And _
      Statusreport.Cells(GetResourcesTable.firstrow, 7) = "" And _
      Statusreport.Cells(GetResourcesTable.firstrow, 8) = "" Then
      
      Statusreport.Cells(GetResourcesTable.firstrow, 1).EntireRow.Delete
    End If
    
    For Each c In GetResourcesTable.ValuesRange(1)
        GetResourcesTable.Mergedfit c
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Statusreport.UpdateResourcesTable error:"
    Resume subend
End Sub
Attribute VB_Name = "StringBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module    : StringBuilder
' Author    : wm
' Date      : 15.03.2011
' Purpose   : [WIP] - object for easier string handling (especially when using tokens).
'---------------------------------------------------------------------------------------

Option Explicit

Private str As String
Private TextSeperator As String
'Private Token As StringBuilderToken
Private cTokens As Collection
Attribute cTokens.VB_VarHelpID = -1




Private Sub Class_Initialize()
    TextSeperator = "|"
    Set cTokens = New Collection
End Sub


Public Property Let Delimiter(Delimiter As String)
    TextSeperator = Delimiter
    Set cTokens = Nothing
End Property

Public Sub TextSet(Text As String)
    str = Text
End Sub


Public Sub TextAdd(Text As String)
    str = str & Text
End Sub

Public Function ToString()
    ToString = str
End Function


Public Sub clear()
    str = ""
End Sub


Public Function TextContained(Text As String) As Boolean
    If InStr(str, Text) > 0 Then TextContained = True
End Function


Public Sub TokenAdd(Token As String)
    If str = "" Then
        str = Token
    Else
        str = str & TextSeperator & Token
    End If
End Sub


Public Sub TokenRemove(Token As String)
    Dim aTokens As Variant
    Dim sResult As String
    Dim i As Integer
    
    aTokens = Split(str, TextSeperator)
    For i = 0 To UBound(aTokens)
        If Not CStr(aTokens(i)) = Token Then
            If sResult = "" Then
                sResult = CStr(aTokens(i))
            Else
                sResult = sResult & TextSeperator & CStr(aTokens(i))
            End If
        End If
    Next
    str = sResult
    
End Sub


Public Function TokenContained(Token As String, Optional Text As String = "") As Boolean
    
    Dim aTokens As Variant
    Dim bfound As Boolean
    
    Dim i As Integer
    
    If Not Text = "" Then
        aTokens = Split(Text, TextSeperator)
    Else
        aTokens = Split(str, TextSeperator)
    End If
    For i = 0 To UBound(aTokens)
        If CStr(aTokens(i)) = Token Then bfound = True
    Next
    TokenContained = bfound

End Function

Public Function TokenCount() As Integer
    TokenCount = UBound(Split(str, TextSeperator)) + 1
End Function

Public Function Token(index As Integer) As String
    
    Dim aTokens As Variant
    aTokens = Split(str, TextSeperator)
    Token = aTokens(index - 1)
End Function

Attribute VB_Name = "TPGColumn"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public ColumnName As String
Public columnIndex As Integer
Public ColumnType As TPGColumnType
Public TagType As phbLocalizationItem

Public Enum TPGColumnType
    TextColumn = 0
    DateColumn
    NumColumn
    FormulaColumn
    tagColumn
    urlcolumn
    probabilityColumn '(kissimport)
    kissDepartment '(kissimport)
    salkSubteam '(SALK only)
End Enum

Public Function Compare(col As TPGColumn) As Integer
    Compare = 0
    If columnIndex < col.columnIndex Then Compare = -1
    If columnIndex > col.columnIndex Then Compare = 1
End Function

Public Property Get Name() As String
    Name = ColumnName
End Property
Attribute VB_Name = "TPGControl"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private icol As Integer
Private iRow As Integer
Private sname As String
Private rCell As Range
Private WithEvents oParent As TPGControlGrid
Attribute oParent.VB_VarHelpID = -1

Public Function Init(Target As Range, Grid As TPGControlGrid) As Boolean
    Set rCell = Target
    Set oParent = Grid
    sname = Target.value
    iRow = Target.offset(0, 1).value - 1
    icol = Target.offset(0, 2).value - 1
    If iRow > -1 And icol > -1 And sname <> "" Then Init = True
End Function

Private Sub oParent_EvtSetControlPosition(ws As Worksheet, Target As Range, ButtonHeight As Double, ButtonWidth As Double, VerticalSpace As Double, HorizontalSpace As Double)
    Dim oControl As shape
    Set oControl = ws.Shapes(sname)
    
    On Error Resume Next
    oControl.Left = Target.Left + icol * (ButtonWidth + HorizontalSpace)
    oControl.Top = Target.Top + iRow * (ButtonHeight + VerticalSpace)
    oControl.Width = ButtonWidth
    oControl.Height = ButtonHeight
    
End Sub
Attribute VB_Name = "TPGControlGrid"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private dButtonHeight As Double
Private dButtonWidth As Double
Private dVerticalSpace As Double
Private dHorizontalSpace As Double

Private bInitSuccess As Boolean
Private cControls As Collection
Private oWorkSheet As Worksheet
Private rControls As Range
Private rTarget As Range

Private Const DEFAULTHEIGHT As Single = 20
Private Const DEFAULTWIDTH As Single = 120
Private Const DEFAULTSPACE As Single = 2

Public Event EvtSetControlPosition _
        ( _
        ws As Worksheet, _
        Target As Range, _
        ButtonHeight As Double, _
        ButtonWidth As Double, _
        VerticalSpace As Double, _
        HorizontalSpace As Double _
        )

Private Sub Class_Initialize()
    Set cControls = New Collection
End Sub

Private Sub Class_Terminate()
    Set cControls = Nothing
End Sub

Public Function Init(ws As Worksheet) As Boolean
    Set oWorkSheet = ws
    
    Dim rCell As Range
    Dim i As Integer
    Dim control As TPGControl
    
    With Config.Range("Config.Controls.Sheet")
        Set rCell = .Cells(1, 1)
        For i = 1 To WorksheetFunction.CountIf(.Cells, ws.CodeName)
            Set rCell = .Find(What:=ws.CodeName, After:=rCell, LookIn:=xlValues, _
                              LookAt:=xlWhole, SearchOrder:=xlByRows, _
                              SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
            If Not rCell Is Nothing Then
                If rControls Is Nothing Then
                    Set rControls = rCell.offset(0, 1)
                Else
                    Set rControls = Union(rControls, rCell.offset(0, 1))
                End If
            End If
        Next i
    End With
    
    If Not rControls Is Nothing Then
        For Each rCell In rControls
            If rCell.value = "GRID" Then
                dVerticalSpace = rCell.offset(0, 1)
                dHorizontalSpace = rCell.offset(0, 2)
                dButtonHeight = rCell.offset(0, 3)
                dButtonWidth = rCell.offset(0, 4)
                On Error Resume Next
                If rCell.offset(0, 5).value <> "" Then Set rTarget = oWorkSheet.Range(rCell.offset(0, 5).value)
                On Error GoTo 0
                If Not rTarget Is Nothing Then bInitSuccess = True
            Else
                Set control = New TPGControl
                If control.Init(rCell, Me) Then cControls.Add control
            End If
        Next
        
        If dVerticalSpace + dHorizontalSpace + dButtonHeight + dButtonWidth = 0 Then
            dVerticalSpace = DEFAULTSPACE
            dHorizontalSpace = DEFAULTSPACE
            dButtonHeight = DEFAULTHEIGHT
            dButtonWidth = DEFAULTWIDTH
        End If
        
        If dButtonHeight > 0 And dButtonWidth > 0 Then Init = bInitSuccess
    End If
   
End Function

Public Sub ArrangeControls()
    RaiseEvent EvtSetControlPosition(oWorkSheet, _
        rTarget, _
        dButtonHeight * dYScale, _
        dButtonWidth * dXScale, _
        dVerticalSpace * dXScale, _
        dHorizontalSpace * dYScale)
End Sub
'
'Public Property Get ButtonHeight() As Double
'    ButtonHeight = dButtonHeight
'End Property
'
'Public Property Get ButtonWidth() As Double
'    ButtonWidth = dButtonWidth
'End Property
Attribute VB_Name = "TPGCostType"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Name As String
Public WorkCostType As Boolean
Public ContractCost As Single
Public BaseCost As Single
Public LoadedFrom As Range

Public Sub Load(namerange As Range)
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostType", "Load"

    Name = namerange.value
    WorkCostType = namerange.locked

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGCostType.Load error:"
    Resume subend
End Sub

'Friend Function FindInContract() As range
'    Dim Cell As range
'    For Each Cell In Contract.GetCostTable.ValuesRange(2)
'        If Cell.locked = False Then Exit For
'        If Cell.Value = Name Then
'            Set FindInContract = Cell
'            Exit Function
'        End If
'    Next
'End Function

Friend Function FindInPlan() As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostType", "FindInPlan"

    Set FindInPlan = SearchNameInRange(Plan.Range("Plan.WorkCostNameRange"), Name)
    If FindInPlan Is Nothing Then
        Set FindInPlan = SearchNameInRange(Plan.Range("Plan.CostNameRange"), Name)
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGCostType.FindInPlan error:"
    Resume subend
End Function

Public Function FindInWP() As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostType", "FindInWP"

    Set FindInWP = wp.GetCostTable.SearchNameInColumn(1, Name)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGCostType.FindInWP error:"
    Resume subend
End Function

Friend Sub AddToPlan()
    Dim R As Range
    Dim template As String
    Dim insertion As String
    Dim namerange As String
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostType", "AddToPlan"

    If WorkCostType = True Then
        template = "Plan.WorkCostTemplate"
        insertion = "Plan.WorkCostTemplateInsertionPoint"
        namerange = "Plan.WorkCostNameRange"
    Else
        template = "Plan.CostTemplate"
        insertion = "Plan.CostTemplateInsertionPoint"
        namerange = "Plan.CostNameRange"
    End If
    RCopy Plan.Range(template)
    'Plan.Range(template).Copy
    'Plan.Range(insertion).Insert copyOrigin:=xlFormatFromLeftOrAbove
    CellFunctions.InsertWrapped Plan.Range(insertion)
    Plan.Range(insertion).offset(, -5).Resize(, 5).EntireColumn.Hidden = False
    Set R = Intersect(Plan.Range(insertion), Plan.Range(namerange)).offset(0, -5)
    R.value = Name
    SetViewDefinitionvalues Plan.Range(insertion).offset(0, -5).Resize(, 5)

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGCostType.AddToPlan error:"
    Resume subend
End Sub

Friend Sub AddToWP()
    Dim Table As TPGTable
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostType", "AddToWP"

    Set Table = wp.GetCostTable
    'table.AddRow
    Set R = Table.ValuesRange.Cells(Table.RowsCount, 1)
    If Not IsEmpty(R.value) Then
        Table.AddRow
        Set R = R.offset(1, 0)
    End If
    R.value = Name
    R.offset(0, 1).Resize(1, 3).locked = WorkCostType
    If WorkCostType Then
        R.offset(0, 1).Resize(1, 3).Interior.Color = RGB(242, 242, 242)
    Else
        R.offset(0, 1).Resize(1, 3).Interior.Color = RGB(255, 255, 255)
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGCostType.AddToWP error:"
    Resume subend
End Sub

Friend Sub RearrangeInPlan(namerange As Range)
    Dim insertion As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostType", "RearrangeInPlan"

    If WorkCostType = True Then
        insertion = "Plan.WorkCostTemplateInsertionPoint"
    Else
        insertion = "Plan.CostTemplateInsertionPoint"
    End If
    
    RCut namerange.Resize(1, 5).EntireColumn
    'namerange.Resize(1, 5).EntireColumn.Cut
    'Plan.Range(insertion).Insert copyOrigin:=xlFormatFromLeftOrAbove
    CellFunctions.InsertWrapped Plan.Range(insertion)

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGCostType.RearrangeInPlan error:"
    Resume subend
End Sub

Friend Sub RearrangeInWP(namerange As Range)
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostType", "RearrangeInWP"

    
    RCut namerange.EntireRow
    'namerange.EntireRow.Cut
    'WP.Range("WP.CostInsertionPoint").Insert copyOrigin:=xlFormatFromLeftOrAbove
    CellFunctions.InsertWrapped wp.Range("WP.CostInsertionPoint")
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGCostType.RearrangeInWP error:"
    Resume subend
End Sub


Attribute VB_Name = "TPGCostTypes"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public IsInitialized As Boolean
Private CostTypes() As TPGCostType
Public Duplicates As Boolean

Public Sub Add(newCostType As TPGCostType)
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostTypes", "Add"

    If Not CostTypeNameExists(newCostType.Name) Then
        If IsInitialized Then
            ReDim Preserve CostTypes(UBound(CostTypes) + 1)
        Else
            ReDim CostTypes(1)
            IsInitialized = True
        End If
        Set CostTypes(UBound(CostTypes)) = newCostType
    Else
        Duplicates = True
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGCostTypes.Add error:"
    Resume subend
End Sub

Friend Function CostTypeNameExists(Name As String) As Boolean
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostTypes", "CostTypeNameExists"

    CostTypeNameExists = False
    If IsInitialized Then
        For i = 1 To UBound(CostTypes)
            If CostTypes(i).Name = Name Then
                CostTypeNameExists = True
                GoTo subend
            End If
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGCostTypes.CostTypeNameExists error:"
    Resume subend
End Function

Public Function Count() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostTypes", "count"

    If IsInitialized Then
        Count = UBound(CostTypes)
    Else
        Count = 0
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGCostTypes.count error:"
    Resume subend
End Function

Public Function CostType(index As Integer) As TPGCostType
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostTypes", "CostType"

     If IsInitialized Then
        Set CostType = CostTypes(index)
     End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGCostTypes.CostType error:"
    Resume subend
End Function

Public Function CostTypeByName(Name As String) As TPGCostType
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostTypes", "CostTypeByName"

    If IsInitialized Then
        For i = 1 To UBound(CostTypes)
            If CostTypes(i).Name = Name Then
                Set CostTypeByName = CostTypes(i)
            End If
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGCostTypes.CostTypeByName error:"
    Resume subend
End Function


Friend Sub LoadFromWorkTypes()
    Dim i As Integer
    Dim WT As TPGWorkType
    Dim ct As TPGCostType
    Dim WTS As TPGWorkTypes
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostTypes", "LoadFromWorkTypes"

    Set WTS = New TPGWorkTypes
    WTS.Load
    For i = 1 To WTS.Count
        Set WT = WTS.WorkType(i)
        WT.GetCostType
        Set ct = CostTypeByName(WT.CostTypeName)
        If Not ct Is Nothing Then
            ct.ContractCost = ct.ContractCost + WT.ContractWork * WT.CostRate
            ct.BaseCost = ct.BaseCost + WT.BaseWork * WT.CostRate
        Else
            Set ct = New TPGCostType
            ct.Name = WT.CostTypeName
            ct.WorkCostType = True
            ct.ContractCost = WT.ContractWork * WT.CostRate
            ct.BaseCost = WT.BaseWork * WT.CostRate
            Add ct
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGCostTypes.LoadFromWorkTypes error:"
    Resume subend
End Sub

Friend Sub Load()
'modified for SALK
'    Dim cell As Range
'    Dim ct As TPGCostType
'
'    On Error GoTo SubErr
'    modStack.PushCallStack "TPGCostTypes", "Load"
'
'    For Each cell In Contract.GetCostTable.ValuesRange(2)
'        If cell.value <> "" Then
'            Set ct = New TPGCostType
'            ct.Name = cell.value
'            If (Not cell.value = "Externe Kosten") And (Not cell.value = "External Costs") Then
'                ct.WorkCostType = cell.locked
'            End If
'            ct.ContractCost = cell.offset(0, 1).value
'            ct.BaseCost = cell.offset(0, 2).value
'            Add ct
'        End If
'    Next
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "TPGCostTypes.Load error:"
'    Resume SubEnd
End Sub

Public Sub LoadFromAdmin()
    Dim cell As Range
    Dim ct As TPGCostType
    
    For Each cell In Admin.Range("Admin.WorkCostType")
        If cell.value <> "" Then
            Set ct = New TPGCostType
            ct.Name = cell.value
            ct.WorkCostType = True
            Add ct
        End If
    Next
    
    For Each cell In Admin.Range("Admin.CostType")
        If cell.value <> "" Then
            Set ct = New TPGCostType
            ct.Name = cell.value
            ct.WorkCostType = False
            Add ct
        End If
    Next

End Sub

Friend Sub SyncToPlan()
    Dim i As Integer
    Dim ctrange As Range
    Dim namerange As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostTypes", "SyncToPlan"

    Set ctrange = getRange(Plan, "Plan.WorkCostNameRange", 1, -2, 0, 1)
    'Clear All unused WorkCostTypesTypes
    If Not ctrange Is Nothing Then
        For i = ctrange.Columns.Count / 5 - 1 To 0 Step -1
            Set namerange = ctrange.offset(0, i * 5).Resize(1, 1)
            If Not CostTypeNameExists(namerange.value) Then
                Plan.Range(Plan.Cells(1, namerange.Column), Plan.Cells(1, namerange.Column + 4)).EntireColumn.Delete
            End If
        Next
    End If
    Set ctrange = getRange(Plan, "Plan.CostNameRange", 1, -2, 0, 1)
    'Clear All unused CostTypesTypes
    If Not ctrange Is Nothing Then
        For i = ctrange.Columns.Count / 5 - 1 To 0 Step -1
            Set namerange = ctrange.offset(0, i * 5).Resize(1, 1)
            If Not CostTypeNameExists(namerange.value) Then
                Plan.Range(Plan.Cells(1, namerange.Column), Plan.Cells(1, namerange.Column + 4)).EntireColumn.Delete
            End If
        Next
    End If
    
    'Reorganize and add new Worktypes
    If Not IsEmpty(CostTypes) Then
    
        Dim iActionCount As Integer
        For i = 1 To UBound(CostTypes)
            Set namerange = CostType(i).FindInPlan
            
            If namerange Is Nothing Then
            ElseIf namerange.value = CostTypes(i).Name Then
            Else
                iActionCount = iActionCount + 1
            End If
        Next
        
        'If iActionCount > 1 Then
            If modStack.InitialProcName = "Cover.cmdImport_Click" Then
                modStack.ShowProgressBar i, "Importing Cost Types", "CellFunctions.InsertWrapped"
            Else
                If iActionCount > 1 Then modStack.ShowProgressBar iActionCount, "Synchronizing Cost Types", "CellFunctions.InsertWrapped"
            End If
        'End If
        
        For i = 1 To UBound(CostTypes)
            Set namerange = CostType(i).FindInPlan
            
            If namerange Is Nothing Then
                CostType(i).AddToPlan
            ElseIf namerange.value = CostTypes(i).Name Then
                'do nothing
            Else
                CostType(i).RearrangeInPlan namerange
            End If
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGCostTypes.SyncToPlan error:"
    Resume subend
End Sub

Friend Sub SyncToWP()
'modified for SALK
'    Dim ctrange As Range
'    Dim i As Integer
'
'    On Error GoTo SubErr
'    modStack.PushCallStack "TPGCostTypes", "SyncToWP"
'    wp.noupdate = True
'    Set ctrange = wp.GetCostTable.ValuesRange(1)
'    For i = ctrange.rows.Count To 1 Step -1
'        If Not IsEmpty(ctrange.Cells(i, 1).value) Then
'            If Not CostTypeNameExists(ctrange.Cells(i, 1).value) Then
'                wp.GetCostTable.DeleteRow ctrange.Cells(i, 1)
'            End If
'        End If
'    Next
'    If Not IsEmpty(CostTypes) Then
'        For i = 1 To UBound(CostTypes)
'            Set ctrange = CostType(i).FindInWP
'            If ctrange Is Nothing Then
'                CostType(i).AddToWP
'            Else
'                CostType(i).RearrangeInWP ctrange
'            End If
'        Next
'    End If
'
'SubEnd:
'    wp.noupdate = False
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "TPGCostTypes.SyncToWP error:"
'    Resume SubEnd
End Sub

Friend Sub SyncToContract()
    Dim i As Integer
    Dim R As Range
    Dim ct As TPGCostType

    On Error GoTo suberr
    modStack.PushCallStack "TPGCostTypes", "SyncToContract"

    Contract.noupdate = True

    'no adjust needed for KISS version
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then AdjustNeededRows

    Set R = Contract.GetCostTable.ValuesRange.Cells(1, 2)
    If Not IsEmpty(CostTypes) Then
        For i = 1 To UBound(CostTypes)
            Set ct = CostType(i)
            R.offset(i - 1, 0).value = ct.Name
            R.offset(i - 1, 1).value = ct.ContractCost
            R.offset(i - 1, 2).value = ct.BaseCost
            R.offset(i - 1).Resize(1, 3).locked = True
            R.offset(i - 1).Resize(1, 3).Interior.Color = RGB(242, 242, 242)
        Next
    End If

    Contract.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGCostTypes.SyncToContract error:"
    Resume subend
End Sub

Private Sub AdjustNeededRows()
    Dim currentRows As Integer
    Dim neededRows As Integer
    Dim cell As Range
    Dim diff As Integer
    Dim i As Integer
    Dim t As TPGTable
        
    On Error GoTo suberr
    modStack.PushCallStack "TPGCostTypes", "AdjustNeededRows"

    Set t = Contract.GetCostTable
    For Each cell In t.ValuesRange(2)
        If cell.locked = False Then Exit For
        currentRows = currentRows + 1
    Next
    If IsInitialized Then
        neededRows = UBound(CostTypes)
    Else
        neededRows = 0
    End If
    diff = neededRows - currentRows
    
    If neededRows > currentRows Then
        For i = 1 To diff
            t.AddWhiteSpace t.firstrow
        Next
    ElseIf neededRows < currentRows Then
        For i = -1 To diff Step -1
            t.DeleteRow t.ValuesRange.Cells(1, 1)
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGCostTypes.AdjustNeededRows error:"
    Resume subend
End Sub


Attribute VB_Name = "TPGDecisionItem"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public nr As Integer
Public showInStatus As Boolean
Public correspEvent As String
Public issueDate As Date
Public Status As String
Public subject As String
Public decision As String
Public Responsible As String
Public dueDate As Date

Private Enum TableCols
'see also the Actions code this enum should match the one there
   icNumber = 3
   icShowInStatus
   icevent
   icdate
   icsubject
   icdecision
   icResponsible
   icDueDate
   icstatus
End Enum

Public Sub LoadFromTable(lineNr As Integer)
    ' instanciate an action object from the Actions sheet
    On Error GoTo suberr
    modStack.PushCallStack "TPGDecisionItem", "LoadFromTable"

    nr = Decisions.Cells(lineNr, icNumber).value
    showInStatus = Decisions.Cells(lineNr, icShowInStatus) = "x"
    correspEvent = Decisions.Cells(lineNr, icevent).value
    issueDate = Decisions.Cells(lineNr, icdate).value
    Status = Decisions.Cells(lineNr, icstatus).value
    subject = Decisions.Cells(lineNr, icsubject).value
    decision = Decisions.Cells(lineNr, icdecision).value
    Responsible = Decisions.Cells(lineNr, icResponsible).value
    dueDate = Decisions.Cells(lineNr, icDueDate).value

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGDecisionItem.LoadFromTable error:"
    Resume subend
End Sub

Attribute VB_Name = "TPGDictionary"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public kv As Collection
Private dPair As TPGDictionaryPair
Public sDelimiter As String

'Added with CRF Module
Private Sub Class_Initialize()
    Set kv = New Collection
    'Set dPair = New TPGDictionaryPair
    Delimiter = "|" ' used on ToString
End Sub

Private Sub Class_Terminate()
    Set kv = Nothing
    Set dPair = Nothing
End Sub

Public Property Let Delimiter(Character As String)
    sDelimiter = Character
End Property

Public Property Get Collection() As Collection
    Set Collection = kv
End Property


Public Sub Add(key As Variant, val As Variant, Optional noErrMsg As Boolean = True)
    'key must be unique
    If Not KeyExists(key) Then
        Set dPair = New TPGDictionaryPair
        dPair.key = key
        dPair.value = val
        kv.Add dPair
        Set dPair = Nothing
    Else
        If Not noErrMsg Then
            Debug.Print "Key is not unique. Value=" & val & ", Key=" & key
        End If
    End If
End Sub

Public Property Get Count() As Integer
    Count = kv.Count
End Property

Public Property Get GetValueByIndex(index As Variant) As Variant
    GetValueByIndex = kv(index).value
End Property

Public Property Get GetKeyByIndex(index As Variant) As Variant
    GetKeyByIndex = kv(index).key
End Property

Public Property Get GetKeyIndex(key As Variant) As Variant
Dim c As Integer, k As Variant
c = 0
    For Each k In kv
        c = c + 1
        If k.key = key Then
            GetKeyIndex = c
            Exit Property
        End If
    Next
End Property


Public Property Get GetValue(key As Variant) As Variant
Dim i As Integer
    i = GetKeyIndex(key)
    If i = 0 Then
        Debug.Print "Key does not exist."
    Else
        GetValue = kv(i).value
    End If
End Property

Public Property Get KeyExists(key As Variant) As Boolean
Dim uniq As Boolean, k As Variant
uniq = False

For Each k In kv
    If k.key = key Then
        uniq = True
        Exit For
    End If
Next
KeyExists = uniq
End Property

Public Sub FromString(keyValString As String) ' Format ---- "key1=val1|key2=val2|....
    Dim v As Variant, kPair As Variant
    Dim i As Integer
    Me.clear
    v = Split(keyValString, sDelimiter)
    For i = 0 To UBound(v)
        kPair = Split(v(i), "=")
        If UBound(kPair) > 1 Then
            Set dPair = New TPGDictionaryPair
            dPair.key = kPair(0)
            dPair.value = kPair(1)
            kv.Add dPair
            Set dPair = Nothing
        End If
    Next
End Sub

Public Sub clear()
    Set kv = New Collection
    Set dPair = New TPGDictionaryPair
End Sub

Public Function Pop() As String
    Pop = kv(kv.Count).value
    kv.Remove (kv.Count)
End Function

Public Sub Delete(key As Variant)
Dim i As Integer
i = GetKeyIndex(key)
If i = 0 Then
    Debug.Print "Key does not exist."
Else
    kv.Remove (i)
End If

End Sub

Public Function Contains(val As Variant) As Boolean
Dim c As Boolean, v As Variant
c = False

For Each v In kv
    If v.value = val Then
        c = True
        Exit For
    End If
Next

Contains = c

End Function

Public Sub Replace(key As Variant, val As Variant)
Dim i As Integer
i = GetKeyIndex(key)
If i = 0 Then
    Debug.Print "Key does not exist."
Else
    kv(i).value = val
End If

End Sub

'New functions for Relations
Public Property Get GetKeyByValue(val As Variant) As Variant
Dim v As Variant
    For Each v In kv
        If v.value = val Then
            GetKeyByValue = v.key
            Exit Property
        End If
    Next
End Property

Attribute VB_Name = "TPGDictionaryPair"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public key As Variant
Public value As Variant


Attribute VB_Name = "TPGDynBtn"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module    : TPGDynBtn
' Author    : wm
' Date      : 15.03.2011
' Purpose   : generic button object
'---------------------------------------------------------------------------------------

Option Explicit
Private WithEvents mobjBtn As MSForms.CommandButton
Attribute mobjBtn.VB_VarHelpID = -1
Private msOnAction As String
'This has to be generic or call by name won't be able to find the methods in your form.
Private mobjParent As Object
 
Public Property Get Object() As MSForms.CommandButton
    Set Object = mobjBtn
End Property
 
Public Function Load(ByVal parentFormName As Object, ByVal btn As MSForms.CommandButton, ByVal procedure As String) As TPGDynBtn
    On Error GoTo suberr
    modStack.PushCallStack "TPGDynBtn", "Load"

    Set mobjParent = parentFormName
    Set mobjBtn = btn
    msOnAction = procedure
    Set Load = Me

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGDynBtn.Load error:"
    Resume subend
End Function
 
Private Sub Class_Terminate()
    On Error GoTo suberr
    modStack.PushCallStack "TPGDynBtn", "Class_Terminate"

    Set mobjParent = Nothing
    Set mobjBtn = Nothing

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGDynBtn.Class_Terminate error:"
    Resume subend
End Sub
 
Private Sub mobjBtn_Click()
    On Error GoTo suberr
    modStack.PushCallStack "TPGDynBtn", "mobjBtn_Click"

    CallByName mobjParent, msOnAction, VbMethod
    'CallByName msOnAction

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGDynBtn.mobjBtn_Click error:"
    Resume subend
End Sub

Attribute VB_Name = "TPGDynLbl"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module    : TPGDynLabel
' Author    : wm
' Date      : 15.03.2011
' Purpose   : generic label object
'---------------------------------------------------------------------------------------

Option Explicit
Private WithEvents mobjLbl As MSForms.Label
Attribute mobjLbl.VB_VarHelpID = -1
'Private msOnAction As String
'This has to be generic or call by name won't be able to find the methods in your form.
Private mobjParent As Object
'Public iLabelNo As Integer
 
Public Property Get Object() As MSForms.Label
    Set Object = mobjLbl
End Property
 
Public Function Load(ByVal parentFormName As Object, ByVal lbl As MSForms.Label) As TPGDynLbl
    On Error GoTo suberr
    modStack.PushCallStack "TPGDynLabel", "Load"

    Set mobjParent = parentFormName
    Set mobjLbl = lbl
   ' msOnAction = procedure
    Set Load = Me

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGDynLabel.Load error:"
    Resume subend
End Function
 
'Public Sub mobjLbl_Click()
'    CallByName mobjParent, msOnAction, VbMethod
'    'CallByName msOnAction
'End Sub

'Public Property Set LabelNo(i As Integer)
'    iLabelNo = i
'End Property

Private Sub Class_Terminate()
    On Error GoTo suberr
    modStack.PushCallStack "TPGDynLabel", "Class_Terminate"

    Set mobjParent = Nothing
    Set mobjLbl = Nothing

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGDynLabel.Class_Terminate error:"
    Resume subend
End Sub
 



Attribute VB_Name = "TPGEventBroker"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private WithEvents MyPlanObject As TPGPlan
Attribute MyPlanObject.VB_VarHelpID = -1
Public IsInitialized As Boolean

Public Sub Load()
    Set MyPlanObject = oPlan
    IsInitialized = True
End Sub

Private Sub Class_Initialize()
    Load
End Sub

Private Sub MyPlanObject_EvtNameBeforeChange(task As TPGPlanTask)
    Debug.Print "TPGEventBroker: Just received NameBeforeChange event."
    MyPlanObject.CancelNextEvent = True
End Sub

Private Sub MyPlanObject_EvtNameChanged(task As TPGPlanTask)
    Debug.Print "TPGEventBroker: Just received NameChanged event."
End Sub
Attribute VB_Name = "TPGGuid"
Option Explicit

Option Compare Binary

' Note that although Variants now have
' a VT_GUID type, this type is unsupported in VBA,
' so we must define our own here that will have the same
' binary layout as all GUIDs are expected by COM to
' have.
Public Type GUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(7) As Byte
End Type

'Changed ByVal lpsz As Long to ByVal lpsz As Longptr for 64-bit Compatibility
#If VBA7 Then
    Public Declare PtrSafe Function StringFromGUID2 Lib "ole32.dll" _
        (rclsid As GUID, ByVal lpsz As LongPtr, ByVal cbMax As Long) As Long
    Public Declare PtrSafe Function CoCreateGuid Lib "ole32.dll" _
        (rclsid As GUID) As Long
#Else
    Public Declare Function StringFromGUID2 Lib "ole32.dll" _
       (rclsid As GUID, ByVal lpsz As Long, ByVal cbMax As Long) As Long
    Public Declare Function CoCreateGuid Lib "ole32.dll" _
        (rclsid As GUID) As Long
#End If

'------------------------------------------------------------
'   StGuidGen
'
'   Generates a new GUID, returning it in canonical
'   (string) format
'------------------------------------------------------------
Public Function StGuidGen() As String
    Dim rclsid As GUID

    On Error GoTo suberr
    modStack.PushCallStack "TPGGuid", "StGuidGen"

    If CoCreateGuid(rclsid) = 0 Then
        StGuidGen = StGuidFromGuid(rclsid)
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGGuid.StGuidGen error:"
    Resume subend
End Function

'------------------------------------------------------------
'   StGuidFromGuid
'
'   Converts a binary GUID to a canonical (string) GUID.
'------------------------------------------------------------
Public Function StGuidFromGuid(rclsid As GUID) As String
    Dim rc As Long
    Dim stGuid As String

    ' 39 chars  for the GUID plus room for the Null char
    On Error GoTo suberr
    modStack.PushCallStack "TPGGuid", "StGuidFromGuid"

    stGuid = String$(40, vbNullChar)
    rc = StringFromGUID2(rclsid, StrPtr(stGuid), Len(stGuid) - 1)
    StGuidFromGuid = Left$(stGuid, rc - 1)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGGuid.StGuidFromGuid error:"
    Resume subend
End Function

Public Function StGuidWithoutSpecials(ByVal sguid As String) As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGGuid", "StGuidWithoutSpecials"

    If VBA.Left(sguid, 1) = "{" And VBA.Right(sguid, 1) = "}" Then
        sguid = VBA.Replace(sguid, "-", "_")
        sguid = VBA.Mid(sguid, 2, VBA.Len(sguid) - 2)
    
        StGuidWithoutSpecials = sguid
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGGuid.StGuidWithoutSpecials error:"
    Resume subend
End Function


Public Function StGuidWithSpecials(ByVal sguid As String) As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGGuid", "StGuidWithSpecials"

    sguid = "{" & VBA.Replace(sguid, "_", "-") & "}"
    StGuidWithSpecials = sguid

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGGuid.StGuidWithSpecials error:"
    Resume subend
End Function

Public Function StShortGuid(ByVal sguid As String) As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGGuid", "StShortGuid"

    If VBA.Left(sguid, 1) = "{" And VBA.Right(sguid, 1) = "}" Then
        sguid = VBA.Replace(sguid, "-", "")
        sguid = VBA.Mid(sguid, 2, VBA.Len(sguid) - 10)
    
        StShortGuid = sguid
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGGuid.StShortGuid error:"
    Resume subend
End Function




Attribute VB_Name = "TPGMember"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public ShowInFD As Boolean
Public ShowInOrg As Boolean
Public IsResource As Boolean
Public TeamOrder As Integer

Public GUID As String
Public Name As String
Public Role As String
Public Subteam As String
Public department As String
Public LoadedFromSheet As String

Public LoadedFrom As Range

Private Const ManagementList = 1
Private Const MemberList = 8

Private TeamColumns As Collection

Public Function GetLabel() As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "GetLabel"

    GetLabel = Name
    'modified for SALK
    'If department <> "" Then GetLabel = GetLabel + " (" + Admin.GetDepartmentAbbr(department) + ")"
    If department <> "" Then GetLabel = GetLabel  '+ " (" + Admin.GetDepartmentAbbr(department) + ")"

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMember.GetLabel error:"
    Resume subend
End Function

Public Sub SyncToPlan()
    Dim member As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "SyncToPlan"

    Set member = FindInPlan
    If member Is Nothing Then
        AddMemberToPlan
        'MoveControlsHorizontally Plan, 1, "R", 25
    Else
        UpdateMemberInPlan member
        RearrangeMemberInPlan member    ' unperformant - takes approx. 3 secs
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.SyncToPlan error:"
    Resume subend
End Sub

Public Sub SyncToTeam()
    Dim member As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "SyncToTeam"

    Set member = Team.GetTable.SearchNameInColumn(TeamColumns("GUID") - 3, GUID)
    If member Is Nothing Then
        If Name <> "" Then AddMemberToTeam
    Else
        UpdateMemberInTeam member
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.SyncToTeam error:"
    Resume subend
End Sub

'Public Sub SyncToCover()
'    Dim member As Range
'    Set member = FindInCover
'    If member Is Nothing Then
'        If name <> "" Then AddMemberToCover
'    Else
'        UpdateMemberInCover member
'    End If
'End Sub

Public Sub SyncToContract()
    Dim member As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "SyncToContract"
        
    Contract.noupdate = True
    Set member = FindInContract
    If member Is Nothing Then
        If Name <> "" Then AddMemberToContract
    Else
        UpdateMemberInContract member
    End If
    Contract.noupdate = False
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMembers.SyncToContract error."
    Resume subend
End Sub

Public Function FindInPlan() As Range
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "FindInPlan"

    If GUID <> "" Then
        Set R = Plan.Range("Plan.Roles")
        If R.Columns.Count > 2 Then
            Set FindInPlan = SearchNameInColumn(R.Resize(1, R.Columns.Count - 2).offset(Plan.Range("Plan.ProjectHeader").row - 5, 1))
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMember.FindInPlan error:"
    Resume subend
End Function

Public Function FindInTeam() As Range
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "FindInTeam"

    'TODO: einfaches find wuerde genuegen? wieso so verdammt umstaendlich?
    If GUID <> "" Then Set FindInTeam = SearchNameInColumn(Team.rGUIDs)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMember.FindInTeam error:"
    Resume subend
End Function

'Public Function FindInCover() As Range
'    If Guid <> "" Then
'        Set FindInCover = SearchNameInColumn(GetRange(Cover, "Cover.Owner.Table", -2, 1, 1, 0))
'        If FindInCover Is Nothing Then
'            Set FindInCover = SearchNameInColumn(GetRange(Cover, "Cover.Owner.Table", -2, 1, 1, 0))
'        End If
'    End If
'End Function

Public Function FindInContract() As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "FindInContract"

    If GUID <> "" Then
        Set FindInContract = Contract.GetManagersTable.SearchNameInColumn(1, GUID)
        If FindInContract Is Nothing Then
            Set FindInContract = Contract.GetMembersTable.SearchNameInColumn(1, GUID)
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMember.FindInContract error:"
    Resume subend
End Function

Private Function SearchNameInColumn(searchcolumn As Range) As Range
    Dim cell As Range
    Dim found As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "SearchNameInColumn"

    For Each cell In searchcolumn.Cells
        If cell.value = GUID Then
            found = True
            Set SearchNameInColumn = cell
            Exit For
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMember.SearchNameInColumn error:"
    Resume subend
End Function

Friend Sub AddMemberToPlan()
    Dim Target As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "AddMemberToPlan"

    Set Target = GetNextFreeRangeinPlan
    Target.value = GUID
    Target.offset(2).value = Name
    Target.EntireColumn.AutoFit
    'for KISS we don't make roles columns visible
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then SetViewDefinitionvalues Target.EntireColumn

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.AddMemberToPlan error:"
    Resume subend
End Sub

Friend Sub AddMemberToTeam()
    Dim Target As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "AddMemberToTeam"

    Team.noupdate = True
    Set Target = Team.GetTable.GetFreeRange.Cells(columnIndex:=TeamColumns("GUID"))
    
    Team.Cells(Target.row, TeamColumns("GUID")).value = GUID
    Team.Cells(Target.row, TeamColumns("Name")).value = Name
    Team.Cells(Target.row, TeamColumns("Role")).value = Role
    Team.Cells(Target.row, TeamColumns("Subteam")).value = Subteam
    Team.Cells(Target.row, TeamColumns("Department")).value = department
    Team.Cells(Target.row, TeamColumns("RACI")).value = "x"
    Team.Cells(Target.row, TeamColumns("Org")).value = "x"
    
    CellFunctions.AutoFitMergedCell Team.Cells(Target.row, TeamColumns("Name")), 14
    
'    Target.Value = GUID
'    Target.offset(0, 1).Value = Name
'    Target.offset(0, 2).Value = Role
'    'If ShowInFD = True Then target.Offset(0, 3).value = "x" Else target.Offset(0, 3).value = "-"
'    Target.offset(0, 3).Value = Subteam
'    Target.offset(0, 4).Value = "x"
'    Target.offset(0, 5).Value = Department
'    Target.offset(0, 6).Value = "x"
    Team.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.AddMemberToTeam error:"
    Resume subend
End Sub

Friend Sub AddMemberToContract()
    Dim Target As Range
    Dim Table As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "AddMemberToContract"

    Set Table = GetContractTable
    If Not Table Is Nothing Then
        Contract.noupdate = True
        Set Target = GetContractTable.GetFreeRange.Cells(columnIndex:=1)
        Target.value = GUID
        Target.offset(0, 1).value = Name
        Target.offset(0, 2).value = Role
        Target.offset(0, 3).value = department
        Target.EntireRow.AutoFit
        Contract.noupdate = False
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.AddMemberToContract error:"
    Resume subend
End Sub

Friend Sub AddMemberToCover()
    Dim Target As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "AddMemberToCover"

    Cover.noupdate = True
    Set Target = GetNextFreeRangeinCover
    If Not Target Is Nothing Then
        Target.value = GUID
        Target.offset(0, 1).value = Name
    End If
    Cover.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.AddMemberToCover error:"
    Resume subend
End Sub

Friend Sub AddNameToField(Target As Range)
    Dim content As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "AddNameToField"

    content = Target.value
    If content <> "" Then content = content + ", "
    content = content + Name
    Target.value = content

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.AddNameToField error:"
    Resume subend
End Sub

Friend Sub RemoveMemberFromPlan()
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "RemoveMemberFromPlan"

    Set R = FindInPlan
    If Not R Is Nothing Then
        R.EntireColumn.Delete
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.RemoveMemberFromPlan error:"
    Resume subend
End Sub

Friend Sub RemoveMemberFromContract()
    Dim R As Range
    Dim Table As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "RemoveMemberFromContract"

    Set Table = GetContractTable
    If Not Table Is Nothing Then
        Set R = GetContractTable.SearchNameInColumn(1, GUID)
        If Not R Is Nothing Then
            Contract.noupdate = True
            GetContractTable.DeleteRow R
            Contract.noupdate = False
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.RemoveMemberFromContract error:"
    Resume subend
End Sub

Friend Sub RemoveMemberFromTeam()
    Dim member As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "RemoveMemberFromTeam"

    Set member = FindInTeam
    If Not member Is Nothing Then
        Team.noupdate = True
        Team.GetTable.DeleteRow member
        'member.EntireRow.Delete
        Team.noupdate = False
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.RemoveMemberFromTeam error:"
    Resume subend
End Sub

'Friend Sub RemoveMemberFromCover()
'    Dim member As Range
'    Set member = FindInCover
'    If Not member Is Nothing Then
'        Cover.NoUpdate = True
'        member.EntireRow.Delete
'        Cover.NoUpdate = False
'    End If
'End Sub

Private Function GetNextFreeRangeinPlan() As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "GetNextFreeRangeinPlan"

    Plan.Range("Plan.RoleTemplate").Copy
    'Plan.Range("Plan.RoleInsertionPoint").Insert copyOrigin:=xlFormatFromLeftOrAbove
    CellFunctions.InsertWrapped Plan.Range("Plan.RoleInsertionPoint")
    Dim newColumn As Range
    Set newColumn = Plan.Range("Plan.RoleInsertionPoint").offset(, -1)
    newColumn.EntireColumn.Hidden = False
    Set GetNextFreeRangeinPlan = Plan.Cells(Range("Plan.ProjectHeader").row - 4, newColumn.Column)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMember.GetNextFreeRangeinPlan error:"
    Resume subend
End Function

Private Function GetNextFreeRangeinCover() As Range
    Dim cell As Range
    Dim R As Range
    Dim found As Boolean
    Dim tablename As String
    Dim insertionPoint As String
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "GetNextFreeRangeinCover"

    If LCase(Role) = LCase(appGetLOCText("role_owner")) Then
        tablename = "Cover.Owner.Table"
        insertionPoint = "Cover.Ownerinsertionpoint"
    ElseIf LCase(Role) = LCase(appGetLOCText("role_manager")) Then
        tablename = "Cover.Manager.Table"
        insertionPoint = "Cover.Managerinsertionpoint"
    End If
    
    If tablename <> "" Then
        found = False
        For Each cell In getRange(Cover, tablename, -2, 1, 1, 0)
            If cell.value = "" Then
                found = True
                Set GetNextFreeRangeinCover = cell
                Exit For
            End If
        Next
        
        If Not found Then
            TableAddRow Cover, tablename
            Set R = Cover.Range(tablename)
            Set GetNextFreeRangeinCover = Cover.Cells(Cover.Range(insertionPoint).row - 1, Cover.Range(tablename).Column)
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMember.GetNextFreeRangeinCover error:"
    Resume subend
    
End Function

Private Sub UpdateMemberInPlan(member As Range)
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "UpdateMemberInPlan"

    If member.offset(2).value <> Name Then
        member.offset(2).value = Name
        member.offset(2).offset.EntireColumn.AutoFit
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.UpdateMemberInPlan error:"
    Resume subend
End Sub

Private Sub RearrangeMemberInPlan(member As Range)
    Dim RolesHeader As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "RearrangeMemberInPlan"

    Set RolesHeader = getRange(Plan, "Plan.Roles", 1, 0, Plan.Range("Plan.ProjectHeader").row - 7, 0)
    RolesHeader.UnMerge
    
    'einfach spalte leeren / ueberschreiben statt cut / paste?
   RCut member.EntireColumn
    'member.EntireColumn.Cut
    
    'unperformant
    CellFunctions.InsertWrapped Plan.Range("Plan.RoleInsertionPoint")
'    Plan.Range("Plan.RoleInsertionPoint").Insert copyOrigin:=xlFormatFromLeftOrAbove
    RolesHeader.Merge

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.RearrangeMemberInPlan error:"
    Resume subend
End Sub

'Private Sub UpdateMemberInCover(member As Range)
'    Cover.NoUpdate = True
'    If member.offset(0, 1).value <> name Then member.offset(0, 1).value = name
'    Cover.NoUpdate = False
'End Sub

Private Sub UpdateMemberInTeam(member As Range)
    Dim MemberToUpdate As TPGMember
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "UpdateMemberInTeam"

    Set MemberToUpdate = New TPGMember
    MemberToUpdate.LoadMemberFromTeam member
    
    If Name = "" Then
        MemberToUpdate.RemoveMemberFromTeam
    Else
        Team.noupdate = True
        If Name <> MemberToUpdate.Name Then
            Team.Cells(member.row, TeamColumns("Name")).value = Name
            CellFunctions.AutoFitMergedCell Team.Cells(member.row, TeamColumns("Name")), 14
            
'            member.offset(0, 1).Value = Name
        End If
        
        If Not LoadedFromSheet = Cover.CodeName Then
            If Role <> MemberToUpdate.Role Then
'                    member.offset(0, 2).Value = Role
                    Team.Cells(member.row, TeamColumns("Role")).value = Role
            End If
    
            If department <> MemberToUpdate.department Then
                Team.Cells(member.row, TeamColumns("Department")).value = department
                'member.offset(0, 5).Value = Department
            End If
        End If
        Team.noupdate = False
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.UpdateMemberInTeam error:"
    Resume subend
End Sub


Private Sub UpdateMemberInContract(member As Range)
    Dim MemberToUpdate As TPGMember
    Dim Table As TPGTable
    Dim table2 As TPGTable
    Dim table2Column As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "UpdateMemberInContract"

    Set MemberToUpdate = New TPGMember
    MemberToUpdate.LoadMemberFromContract member
    
    If Name = "" Then
        MemberToUpdate.RemoveMemberFromContract
    Else
        Contract.noupdate = True
        If Name <> MemberToUpdate.Name Then
            member.offset(0, 1).value = Name
        End If
        
        If Not LoadedFromSheet = Cover.CodeName Then
            If Role <> MemberToUpdate.Role Then
                Set Table = GetContractTable
                Set table2 = MemberToUpdate.GetContractTable
                If table2 Is Nothing Then
                    table2Column = 0
                Else
                    table2Column = table2.FirstCol
                End If
                If Table Is Nothing Then
                    MemberToUpdate.RemoveMemberFromContract
                Else
                    If Table.FirstCol = table2Column Or MemberToUpdate.Role = "" Then
                        member.offset(0, 2).value = Role
                    Else
                        MemberToUpdate.RemoveMemberFromContract
                        AddMemberToContract
                    End If
                End If
            End If
            
            If department <> MemberToUpdate.department Then
                member.offset(0, 3).value = department
            End If
        End If
        Contract.noupdate = False
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.UpdateMemberInContract error:"
    Resume subend
End Sub

Public Sub LoadMemberFromContract(idRange As Range)
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "LoadMemberFromContract"

    Set LoadedFrom = idRange
    LoadedFromSheet = Contract.CodeName
    GUID = idRange.value
    Name = idRange.offset(0, 1).value
    Role = idRange.offset(0, 2).value
    If Name <> "" Then
        department = idRange.offset(0, 3).value
        If GUID = "" Then
            GUID = TPGGuid.StGuidGen
            Contract.noupdate = True
            idRange.value = GUID
            Contract.noupdate = False
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.LoadMemberFromContract error:"
    Resume subend
End Sub

Public Sub LoadMemberFromCover(idRange As Range)
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "LoadMemberFromCover"

    Set LoadedFrom = idRange
    LoadedFromSheet = Cover.CodeName
    GUID = idRange.value
    Name = idRange.offset(0, 1).value
    If InRange(idRange, Cover.Range("Cover.Owner.Table")) Then
        Role = appGetLOCText("role_owner")
    ElseIf InRange(idRange, Cover.Range("Cover.Manager.Table")) Then
        Role = appGetLOCText("role_manager")
    End If
    If Name <> "" Then
        If GUID = "" Then
            GUID = TPGGuid.StGuidGen
            Cover.noupdate = True
            idRange.value = GUID
            Cover.noupdate = False
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.LoadMemberFromCover error:"
    Resume subend
End Sub

Private Sub SetTeamOrder(pos As String)
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "SetTeamOrder"

    If pos = "x" Then
        TeamOrder = 10000 + Asc(Mid(Me.Name, 1, 1))
    Else
        TeamOrder = CInt(pos)
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.SetTeamOrder error:"
    Resume subend
End Sub

' Comparison used for sorting
'TODO: FIXME ... callstack disabled due to massive use of this one
Public Function Compare(member As TPGMember) As Integer
    Dim result As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "Compare"

    result = 0
    If TeamOrder > 10000 And member.TeamOrder > 10000 Then
        If Name < member.Name Then result = -1
        If Name > member.Name Then result = 1
    Else
        If TeamOrder < member.TeamOrder Then result = -1
        If TeamOrder > member.TeamOrder Then result = 1
    End If
    Compare = result

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMember.Compare error:"
    Resume subend
End Function


Public Sub LoadMemberFromTeam(idRange As Range)
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "LoadMemberFromTeam"

    Dim iRow As Integer: iRow = idRange.row

    Set LoadedFrom = Team.Cells(iRow, Team.Range("Team.GUIDColumn").Column)
    LoadedFromSheet = Team.CodeName
    GUID = Team.Cells(iRow, Team.Range("Team.GUIDColumn").Column).value
    Name = Team.Cells(iRow, Team.Range("Team.NameColumn").Column).value
    Role = Team.Cells(iRow, Team.Range("Team.RoleColumn").Column).value
    If Name <> "" Then
        'ShowInFD = (idRange.Offset(0, 3).value = "x")
        If GUID = "" Then
            Team.noupdate = True
            Team.Cells(iRow, Team.Range("Team.RACIColumn").Column).value = "x"
            Team.Cells(iRow, Team.Range("Team.OrgColumn").Column).value = "x"
            Team.noupdate = False
        End If
        ShowInFD = Team.Cells(iRow, Team.Range("Team.RACIColumn").Column).value <> "" And Team.Cells(iRow, Team.Range("Team.RACIColumn").Column).value <> "-"
        IsResource = Not ((Team.Cells(iRow, Team.Range("Team.IsResourceColumn").Column).value = "-") Or (Team.Cells(iRow, Team.Range("Team.IsResourceColumn").Column).value = ""))
        If ShowInFD Then SetTeamOrder (Team.Cells(iRow, Team.Range("Team.RACIColumn").Column).value)
        department = Team.Cells(iRow, Team.Range("Team.DepartmentColumn").Column).value
        Subteam = Team.Cells(iRow, Team.Range("Team.SubteamColumn").Column).value
        ShowInOrg = (Team.Cells(iRow, Team.Range("Team.OrgColumn").Column).value = "x")
        
        Dim members As TPGMembers
        Set members = New TPGMembers

        If GUID = "" Then
            GUID = TPGGuid.StGuidGen
            Team.noupdate = True
            idRange.value = GUID
            Team.noupdate = False
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMember.LoadMemberFromTeam error:"
    Resume subend
End Sub

Public Function GetContractTable() As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "TPGMember", "GetContractTable"

    If Role <> "" Then
        If Not Config.Range("Config.RolesContractRight").Find(Role, , xlValues) Is Nothing Then
            Set GetContractTable = Contract.GetMembersTable
        ElseIf Not Config.Range("Config.RolesContractLeft").Find(Role, , xlValues) Is Nothing Then
            Set GetContractTable = Contract.GetManagersTable
        End If
    End If
'    If Role = appGetLOCText("member") Or Role = appGetLOCText("participant") Or Role = "" Then
'        Set GetContractTable = Contract.GetMembersTable
'    Else
'        Set GetContractTable = Contract.GetManagersTable
'    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMember.GetContractTable error:"
    Resume subend
End Function


'Option Explicit
'
'Public guid As String
'Public name As String
'Public role As String
'Public ShowInFD As Boolean
'Public department As String
'Public ShowInOrg As Boolean
'Public LoadedFrom As Range
'Public LoadedFromSheet As String
'Public TeamOrder As Integer
'
'Private Const ManagementList = 1
'Private Const MemberList = 8
'
'
'Public Function GetLabel() As String
'    GetLabel = name
'    If department <> "" Then GetLabel = GetLabel + " (" + Admin.GetDepartmentAbbr(department) + ")"
'End Function
'
'Public Sub SyncToPlan()
'    Dim member As Range
'    Set member = FindInPlan
'    If member Is Nothing Then
'        AddMemberToPlan
'    Else
'        UpdateMemberInPlan member
'        RearrangeMemberInPlan member
'    End If
'End Sub
'
'Public Sub SyncToTeam()
'    Dim member As Range
'    Set member = team.GetTable.SearchNameInColumn(2, guid)
'    If member Is Nothing Then
'        If name <> "" Then AddMemberToTeam
'    Else
'        UpdateMemberInTeam member
'    End If
'End Sub
'
''Public Sub SyncToCover()
''    Dim member As Range
''    Set member = FindInCover
''    If member Is Nothing Then
''        If name <> "" Then AddMemberToCover
''    Else
''        UpdateMemberInCover member
''    End If
''End Sub
'
'Public Sub SyncToContract()
'    Dim member As Range
'
'    On Error GoTo subErr
'
'    Contract.noUpdate = True
'    Set member = FindInContract
'    If member Is Nothing Then
'        If name <> "" Then AddMemberToContract
'    Else
'        UpdateMemberInContract member
'    End If
'    Contract.noUpdate = False
'
'subEnd:
'    Exit Sub
'subErr:
'    AppErrMsg "TPGMembers.SyncToContract error."
'    Resume subEnd
'End Sub
'
'Public Function FindInPlan() As Range
'    Dim r As Range
'    Dim searchcolumn As Range
'    If guid <> "" Then
'        Set r = Plan.Range("Plan.Roles")
'        If r.Columns.count > 2 Then
'            Set FindInPlan = SearchNameInColumn(r.Resize(1, r.Columns.count - 2).Offset(Plan.Range("Plan.ProjectHeader").row - 5, 1))
'        End If
'    End If
'End Function
'
'Public Function FindInTeam() As Range
'    Dim r As Range
'    If guid <> "" Then
'        Set r = team.Range("Team.Table")
'        Set FindInTeam = SearchNameInColumn(r.Resize(r.rows.count - 2, 1).Offset(1, 2))
'    End If
'End Function
'
''Public Function FindInCover() As Range
''    If Guid <> "" Then
''        Set FindInCover = SearchNameInColumn(GetRange(Cover, "Cover.Owner.Table", -2, 1, 1, 0))
''        If FindInCover Is Nothing Then
''            Set FindInCover = SearchNameInColumn(GetRange(Cover, "Cover.Owner.Table", -2, 1, 1, 0))
''        End If
''    End If
''End Function
'
'Public Function FindInContract() As Range
'    If guid <> "" Then
'        Set FindInContract = Contract.GetManagersTable.SearchNameInColumn(1, guid)
'        If FindInContract Is Nothing Then
'            Set FindInContract = Contract.GetMembersTable.SearchNameInColumn(1, guid)
'        End If
'    End If
'End Function
'
'Private Function SearchNameInColumn(searchcolumn As Range) As Range
'    Dim cell As Range
'    Dim found As Boolean
'    For Each cell In searchcolumn.Cells
'        If cell.value = guid Then
'            found = True
'            Set SearchNameInColumn = cell
'            Exit For
'        End If
'    Next
'End Function
'
'Friend Sub AddMemberToPlan()
'    Dim Target As Range
'    Set Target = GetNextFreeRangeinPlan
'    Target.value = guid
'    Target.Offset(2).value = name
'    SetViewDefinitionvalues Target.EntireColumn
'End Sub
'
'Friend Sub AddMemberToTeam()
'    Dim Target As Range
'    team.noUpdate = True
'    Set Target = team.GetTable.GetFreeRange.Cells(columnIndex:=2)
'    Target.value = guid
'    Target.Offset(0, 1).value = name
'    Target.Offset(0, 2).value = role
'    'If ShowInFD = True Then target.Offset(0, 3).value = "x" Else target.Offset(0, 3).value = "-"
'    Target.Offset(0, 3).value = "x"
'    Target.Offset(0, 4).value = department
'    Target.Offset(0, 5).value = "x"
'    team.noUpdate = False
'End Sub
'
'Friend Sub AddMemberToContract()
'    Dim Target As Range
'    Dim table As TPGTable
'    Set table = GetContractTable
'    If Not table Is Nothing Then
'        Contract.noUpdate = True
'        Set Target = GetContractTable.GetFreeRange.Cells(columnIndex:=1)
'        Target.value = guid
'        Target.Offset(0, 1).value = name
'        Target.Offset(0, 2).value = role
'        Target.Offset(0, 3).value = department
'        Contract.noUpdate = False
'    End If
'End Sub
'
'Friend Sub AddMemberToCover()
'    Dim Target As Range
'    Cover.noUpdate = True
'    Set Target = GetNextFreeRangeinCover
'    If Not Target Is Nothing Then
'        Target.value = guid
'        Target.Offset(0, 1).value = name
'    End If
'    Cover.noUpdate = False
'End Sub
'
'Friend Sub AddNameToField(Target As Range)
'    Dim content As String
'    content = Target.value
'    If content <> "" Then content = content + ", "
'    content = content + name
'    Target.value = content
'End Sub
'
'Friend Sub RemoveMemberFromPlan()
'    Dim r As Range
'    Set r = FindInPlan
'    If Not r Is Nothing Then
'        r.EntireColumn.Delete
'    End If
'End Sub
'
'Friend Sub RemoveMemberFromContract()
'    Dim r As Range
'    Dim table As TPGTable
'    Set table = GetContractTable
'    If Not table Is Nothing Then
'        Set r = GetContractTable.SearchNameInColumn(1, guid)
'        If Not r Is Nothing Then
'            Contract.noUpdate = True
'            GetContractTable.DeleteRow r
'            Contract.noUpdate = False
'        End If
'    End If
'End Sub
'
'Friend Sub RemoveMemberFromTeam()
'    Dim member As Range
'    Set member = FindInTeam
'    If Not member Is Nothing Then
'        team.noUpdate = True
'        team.GetTable.DeleteRow member
'        'member.EntireRow.Delete
'        team.noUpdate = False
'    End If
'End Sub
'
''Friend Sub RemoveMemberFromCover()
''    Dim member As Range
''    Set member = FindInCover
''    If Not member Is Nothing Then
''        Cover.NoUpdate = True
''        member.EntireRow.Delete
''        Cover.NoUpdate = False
''    End If
''End Sub
'
'Private Function GetNextFreeRangeinPlan() As Range
'    Plan.Range("Plan.RoleTemplate").Copy
'    'Plan.Range("Plan.RoleInsertionPoint").Insert copyOrigin:=xlFormatFromLeftOrAbove
'    CellFunctions.InsertWrapped Plan.Range("Plan.RoleInsertionPoint")
'    Dim newColumn As Range
'    Set newColumn = Plan.Range("Plan.RoleInsertionPoint").Offset(, -1)
'    newColumn.EntireColumn.hidden = False
'    Set GetNextFreeRangeinPlan = Plan.Cells(Range("Plan.ProjectHeader").row - 4, newColumn.column)
'End Function
'
'Private Function GetNextFreeRangeinCover() As Range
'    Dim cell As Range
'    Dim r As Range
'    Dim found As Boolean
'    Dim tablename As String
'    Dim insertionPoint As String
'
'    If role = appGetLOCText("owner") Then
'        tablename = "Cover.Owner.Table"
'        insertionPoint = "Cover.Ownerinsertionpoint"
'    ElseIf role = appGetLOCText("role_manager") Then
'        tablename = "Cover.Manager.Table"
'        insertionPoint = "Cover.Managerinsertionpoint"
'    End If
'
'    If tablename <> "" Then
'        found = False
'        For Each cell In getRange(Cover, tablename, -2, 1, 1, 0)
'            If cell.value = "" Then
'                found = True
'                Set GetNextFreeRangeinCover = cell
'                Exit For
'            End If
'        Next
'
'        If Not found Then
'            TableAddRow Cover, tablename
'            Set r = Cover.Range(tablename)
'            Set GetNextFreeRangeinCover = Cover.Cells(Cover.Range(insertionPoint).row - 1, Cover.Range(tablename).column)
'        End If
'    End If
'
'End Function
'
'Private Sub UpdateMemberInPlan(member As Range)
'    If member.Offset(2).value <> name Then
'        member.Offset(2).value = name
'    End If
'End Sub
'
'Private Sub RearrangeMemberInPlan(member As Range)
'    Dim RolesHeader As Range
'    Set RolesHeader = getRange(Plan, "Plan.Roles", 1, 0, Plan.Range("Plan.ProjectHeader").row - 7, 0)
'    RolesHeader.UnMerge
'    member.EntireColumn.Cut
'    CellFunctions.InsertWrapped Plan.Range("Plan.RoleInsertionPoint")
''    Plan.Range("Plan.RoleInsertionPoint").Insert copyOrigin:=xlFormatFromLeftOrAbove
'    RolesHeader.Merge
'End Sub
'
''Private Sub UpdateMemberInCover(member As Range)
''    Cover.NoUpdate = True
''    If member.offset(0, 1).value <> name Then member.offset(0, 1).value = name
''    Cover.NoUpdate = False
''End Sub
'
'Private Sub UpdateMemberInTeam(member As Range)
'    Dim MemberToUpdate As TPGMember
'    Set MemberToUpdate = New TPGMember
'    MemberToUpdate.LoadMemberFromTeam member
'
'    If name = "" Then
'        MemberToUpdate.RemoveMemberFromTeam
'    Else
'        team.noUpdate = True
'        If name <> MemberToUpdate.name Then
'            member.Offset(0, 1).value = name
'        End If
'
'        If Not LoadedFromSheet = Cover.CodeName Then
'            If role <> MemberToUpdate.role Then
'                    member.Offset(0, 2).value = role
'            End If
'
'            If department <> MemberToUpdate.department Then
'                member.Offset(0, 4).value = department
'            End If
'        End If
'        team.noUpdate = False
'    End If
'End Sub
'
'
'Private Sub UpdateMemberInContract(member As Range)
'    Dim MemberToUpdate As TPGMember
'    Dim table As TPGTable
'    Dim table2 As TPGTable
'    Dim table2Column As Integer
'    Set MemberToUpdate = New TPGMember
'    MemberToUpdate.LoadMemberFromContract member
'
'    If name = "" Then
'        MemberToUpdate.RemoveMemberFromContract
'    Else
'        Contract.noUpdate = True
'        If name <> MemberToUpdate.name Then
'            member.Offset(0, 1).value = name
'        End If
'
'        If Not LoadedFromSheet = Cover.CodeName Then
'            If role <> MemberToUpdate.role Then
'                Set table = GetContractTable
'                Set table2 = MemberToUpdate.GetContractTable
'                If table2 Is Nothing Then
'                    table2Column = 0
'                Else
'                    table2Column = table2.FirstCol
'                End If
'                If table Is Nothing Then
'                    MemberToUpdate.RemoveMemberFromContract
'                Else
'                    If table.FirstCol = table2Column Or MemberToUpdate.role = "" Then
'                        member.Offset(0, 2).value = role
'                    Else
'                        MemberToUpdate.RemoveMemberFromContract
'                        AddMemberToContract
'                    End If
'                End If
'            End If
'
'            If department <> MemberToUpdate.department Then
'                member.Offset(0, 3).value = department
'            End If
'        End If
'        Contract.noUpdate = False
'    End If
'End Sub
'
'Public Sub LoadMemberFromContract(idRange As Range)
'    Set LoadedFrom = idRange
'    LoadedFromSheet = Contract.CodeName
'    guid = idRange.value
'    name = idRange.Offset(0, 1).value
'    role = idRange.Offset(0, 2).value
'    If name <> "" Then
'        department = idRange.Offset(0, 3).value
'        If guid = "" Then
'            guid = TPGGuid.StGuidGen
'            Contract.noUpdate = True
'            idRange.value = guid
'            Contract.noUpdate = False
'        End If
'    End If
'End Sub
'
'Public Sub LoadMemberFromCover(idRange As Range)
'    Set LoadedFrom = idRange
'    LoadedFromSheet = Cover.CodeName
'    guid = idRange.value
'    name = idRange.Offset(0, 1).value
'    If InRange(idRange, Cover.Range("Cover.Owner.Table")) Then
'        role = appGetLOCText("owner")
'    ElseIf InRange(idRange, Cover.Range("Cover.Manager.Table")) Then
'        role = appGetLOCText("role_manager")
'    End If
'    If name <> "" Then
'        If guid = "" Then
'            guid = TPGGuid.StGuidGen
'            Cover.noUpdate = True
'            idRange.value = guid
'            Cover.noUpdate = False
'        End If
'    End If
'End Sub
'
'Private Sub SetTeamOrder(pos As String)
'    If pos = "x" Then
'        TeamOrder = 10000 + Asc(Mid(Me.name, 1, 1))
'    Else
'        TeamOrder = CInt(pos)
'    End If
'End Sub
'
'' Comparison used for sorting
'Public Function Compare(member As TPGMember) As Integer
'    Dim result As Integer
'    result = 0
'    If TeamOrder > 10000 And member.TeamOrder > 10000 Then
'        If name < member.name Then result = -1
'        If name > member.name Then result = 1
'    Else
'        If TeamOrder < member.TeamOrder Then result = -1
'        If TeamOrder > member.TeamOrder Then result = 1
'    End If
'    Compare = result
'End Function
'
'
'Public Sub LoadMemberFromTeam(idRange As Range)
'    Set LoadedFrom = idRange
'    LoadedFromSheet = team.CodeName
'    guid = idRange.value
'    name = idRange.Offset(0, 1).value
'    role = idRange.Offset(0, 2).value
'    If name <> "" Then
'        'ShowInFD = (idRange.Offset(0, 3).value = "x")
'        ShowInFD = Not ((idRange.Offset(0, 3).value = "-") Or (idRange.Offset(0, 3).value = ""))
'        If ShowInFD Then SetTeamOrder (idRange.Offset(0, 3).value)
'        department = idRange.Offset(0, 4).value
'        ShowInOrg = (idRange.Offset(0, 5).value = "x")
'
'        Dim members As TPGMembers
'        Set members = New TPGMembers
'
'        If guid = "" Then
'            guid = TPGGuid.StGuidGen
'            team.noUpdate = True
'            idRange.value = guid
'            team.noUpdate = False
'        End If
'    End If
'End Sub
'
'Public Function GetContractTable() As TPGTable
'    If role <> "" Then
'        If Not Config.Range("Config.RolesContractRight").Find(role) Is Nothing Then
'            Set GetContractTable = Contract.GetMembersTable
'        ElseIf Not Config.Range("Config.RolesContractLeft").Find(role) Is Nothing Then
'            Set GetContractTable = Contract.GetManagersTable
'        End If
'    End If
''    If Role = appGetLOCText("member") Or Role = appGetLOCText("participant") Or Role = "" Then
''        Set GetContractTable = Contract.GetMembersTable
''    Else
''        Set GetContractTable = Contract.GetManagersTable
''    End If
'End Function


Private Sub Class_Initialize()
    Set TeamColumns = New Collection
    InitTeamColumns
End Sub

Private Sub InitTeamColumns()
    Dim n As Name
    Dim sCurrentName As String

    For Each n In ThisWorkbook.Names
        If Left(n.Name, 5) = "Team." Then
            If Right(n.Name, 6) = "Column" Then
                sCurrentName = Replace(n.Name, "Team.", "")
                sCurrentName = Replace(sCurrentName, "Column", "")
                If Not InStr(n.RefersTo, "#REF") > 0 Then
                    TeamColumns.Add n.RefersToRange.Column, sCurrentName
                End If
            End If
        End If
    Next
End Sub
Attribute VB_Name = "TPGMember2"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private oTeam As TPGTeam2
Private cValues As Collection
Private rMyCell As Range

Private Sub Class_Initialize()
    Set cValues = Nothing
End Sub

Private Sub Class_Terminate()
    Set cValues = Nothing
    Set oTeam = Nothing
    Set rMyCell = Nothing
End Sub

Public Sub Init(Target As Range, Team As TPGTeam2)
    Set rMyCell = Target
    Set oTeam = Team
End Sub

Public Sub GetGUID()
    Team.Cells(Me.RowNo, oTeam.Column("GUID")).value = StGuidGen
End Sub

Public Property Get RowNo() As Long
    RowNo = rMyCell.row
End Property

Public Property Get GenericProjectData(Column As Integer) As Variant
    GenericProjectData = Team.Cells(Me.RowNo, Column).value
End Property

Public Property Set Parent(Team As TPGTeam2)
    Set oTeam = Team
End Property

Public Property Get LoadedFromMemory() As Boolean
    If Not cValues Is Nothing Then LoadedFromMemory = True
End Property

'Just showcasing... not actually required to define any property
Public Property Get Name() As String
    Name = Me("Name")
End Property
Public Property Get GUID() As String
    GUID = Me("GUID")
End Property

Public Property Get value(ColumnName As Variant) As Variant
Attribute value.VB_UserMemId = 0
    Select Case TypeName(ColumnName)
        Case "Integer"
            If LoadedFromMemory Then
                value = cValues(ColumnName)
            Else
                value = Team.Cells(Me.RowNo, ColumnName).value
            End If
        Case "String"
            If LoadedFromMemory Then
                value = cValues(ColumnName)
            Else
                If oTeam.Column(CStr(ColumnName)) > 0 Then
                    value = Team.Cells(Me.RowNo, oTeam.Column(CStr(ColumnName))).value
                Else
                    value = Empty
                End If
            End If
        Case Else
            value = Empty
    End Select
End Property

Public Property Get DistributionList() As TPGTokenizer
    Dim t As New TPGTokenizer
    Dim R As Range
    For Each R In Team.Range(Team.Cells(Me.RowNo, oTeam.Column("DLStart")), Team.Cells(Me.RowNo, oTeam.Column("DLEnd")))
        If R.value = "x" Then t.Add Team.Cells(Team.Range("Team.TableHeader").row, R.Column).value
    Next
    Set DistributionList = t
End Property

Public Property Get ToTokenizer() As TPGTokenizer
    Dim t As New TPGTokenizer
    Dim i As Integer
    For i = 1 To oTeam.AllColumns.Count
        t.Add Team.Cells(Me.RowNo, oTeam.AllColumns(i)).value
    Next
    Set ToTokenizer = t
End Property

Public Property Get ToCollection() As Collection
    Dim c As New Collection
    Dim i As Integer

    For i = 1 To oTeam.AllColumns.Count
        c.Add Team.Cells(Me.RowNo, oTeam.AllColumns(i)).value, oTeam.key(i)
    Next
    Set ToCollection = c
End Property

Public Property Get ToString(Optional AddKeys As Boolean = False) As String
    Dim TValues As New TPGTokenizer
    Dim TKeys As New TPGTokenizer
    Dim TAll As New TPGTokenizer
    Dim i As Integer
    
    TAll.Delimiter = "^"
    TValues.Delimiter = "$"
    TKeys.Delimiter = "$"
    
    For i = 1 To oTeam.AllColumns.Count
        TValues.Add Team.Cells(Me.RowNo, oTeam.AllColumns(i)).value
        TKeys.Add oTeam.key(i)
    Next
    
    TAll.Add TValues.ToString
    If AddKeys Then TAll.Add TKeys.ToString
    ToString = TAll.ToString
End Property

Public Sub FromString(TokenString As String, Optional Keys As TPGTokenizer = Nothing)
    Dim TValues As New TPGTokenizer
    Dim TKeys As New TPGTokenizer
    Dim TAll As New TPGTokenizer
    Dim i As Integer
    
    Set cValues = New Collection
    
    TAll.Delimiter = "^"
    TValues.Delimiter = "$"
    TKeys.Delimiter = "$"
    
    TAll.FromString TokenString
    TValues.FromString TAll(1)
    
    If Not Keys Is Nothing Then
        Set TKeys = Keys
    Else
        TKeys.FromString TAll(2)
    End If
    
    For i = 1 To TValues.Count
        cValues.Add TValues(i), TKeys(i)
    Next
End Sub

Attribute VB_Name = "TPGMembers"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Role As String
Public IsInitialized As Boolean
Private members() As TPGMember

Public Sub AddMember(newMember As TPGMember)
    On Error GoTo suberr
    modStack.PushCallStack "TPGMembers", "AddMember"

    If Not MemberIdExists(newMember.GUID) Then
        If IsInitialized Then
            ReDim Preserve members(UBound(members) + 1)
        Else
            ReDim members(1)
            IsInitialized = True
        End If
        Set members(UBound(members)) = newMember
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMembers.AddMember error:"
    Resume subend
End Sub

Public Sub AddMemberByValues(id As String, Name As String, department As String, MemberRole As String)
    Dim newMember As TPGMember
    On Error GoTo suberr
    modStack.PushCallStack "TPGMembers", "AddMemberByValues"

    Set newMember = New TPGMember
    newMember.GUID = id
    newMember.Name = Name
    newMember.Role = MemberRole
    newMember.department = department
    AddMember newMember

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMembers.AddMemberByValues error:"
    Resume subend
End Sub

Friend Function MemberNameExists(Name As String) As Boolean
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGMembers", "MemberNameExists"

    MemberNameExists = False
    If IsInitialized Then
        For i = 1 To UBound(members)
            If members(i).Name = Name Then
                MemberNameExists = True
                GoTo subend
            End If
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMembers.MemberNameExists error:"
    Resume subend
End Function

Friend Function MemberIdExists(id As String) As Boolean
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGMembers", "MemberIdExists"

    MemberIdExists = False
    If IsInitialized Then
        For i = 1 To UBound(members)
            If members(i).GUID = id Then
                MemberIdExists = True
                GoTo subend
            End If
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMembers.MemberIdExists error:"
    Resume subend
End Function


Public Function Count() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGMembers", "count"

    If IsInitialized Then
        Count = UBound(members)
    Else
        Count = 0
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMembers.count error:"
    Resume subend
End Function

Public Function member(index As Integer) As TPGMember
    On Error GoTo suberr
    modStack.PushCallStack "TPGMembers", "member"

     If IsInitialized Then
        Set member = members(index)
     End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMembers.member error:"
    Resume subend
End Function

Public Function MemberById(GUID As String) As TPGMember
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGMembers", "MemberById"

    If IsInitialized Then
        For i = 1 To UBound(members)
            If member(i).GUID = GUID Then
                Set MemberById = member(i)
            End If
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGMembers.MemberById error:"
    Resume subend
End Function

Private Sub Class_Initialize()
    On Error GoTo suberr
    modStack.PushCallStack "TPGMembers", "Class_Initialize"

    IsInitialized = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGMembers.Class_Initialize error:"
    Resume subend
End Sub
Attribute VB_Name = "TPGMergeRange"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public StartCol As Integer
Public EndCol As Integer
Attribute VB_Name = "TPGMultiValueDDL"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Option Explicit
'
'Private T As TPGTokenizer
'Private WithEvents LB As MSForms.ListBox
'Private rTarget As Range
'Private rActivation As Range
'
'Private Sub Class_Initialize()
'    Set T = New TPGTokenizer
'    T.Delimiter = vbLf '"; "
'    'Set LB = Cover.ListBox1
'End Sub
'
'Private Sub Class_Terminate()
'    Set T = Nothing
'    Set LB = Nothing
'End Sub
'
'Public Sub Show()
'    WriteValues
'    Set rTarget = ActiveCell
'    If Target.offset(0, 1).Value <> "" Then
'        LB.ListFillRange = Target.offset(0, 1).Value
'        LB.Visible = True
'        LB.Left = Target.Left
'        LB.Top = Target.Top
'        LB.Width = Target.Width
'        LB.Height = 300
'
'
'        Dim Content As New TPGTokenizer
'        Content.Delimiter = T.Delimiter
'        Content.FromString rTarget.Value
'
'        Dim li As Integer
'        With LB
'            For li = 0 To .ListCount - 1
'                If Content.Contains(.List(li)) Then .Selected(li) = True
'            Next li
'        End With
'    Else
'        Me.Hide
'    End If
'End Sub
'
'Public Sub Hide()
'    WriteValues
'    LB.Visible = False
'End Sub
'
'Public Sub Init()
'    Dim sName As String
'    sName = GetCorrespondingRangeName(ActiveCell)
'    If GetCustomProperty(ActiveSheet, sName) <> "" Then
'        Enable sName
'    Else
'        Disable
'    End If
'End Sub
'
'Private Sub Enable(Name As String)
'    On Error GoTo SubErr
'    modStack.PushCallStack "TPGMultiValueDDL", "Enable"
'
'    WriteValues
'    Set rTarget = ActiveCell
'    CreateListBox
'
'    LB.ListFillRange = GetCustomProperty(ActiveSheet, Name)
'    LB.Visible = True
'    LB.Left = Target.Left
'    LB.Top = Target.Top
'    LB.Width = Target.Width
'    Dim Content As New TPGTokenizer
'    Content.Delimiter = T.Delimiter
'    Content.FromString rTarget.Value
'
'    Dim li As Integer
'    With LB
'        For li = 0 To .ListCount - 1
'            If Content.Contains(.List(li)) Then .Selected(li) = True
'        Next li
'    End With
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "TPGMultiValueDDL.Enable error:"
'    Resume SubEnd
'
'End Sub
'
'Private Sub Disable()
'    WriteValues
'    DeleteListBox
'End Sub
'
'Public Property Get Values() As String
'    Dim i As Integer, li As Integer
'    T.clear
'    li = 1
'    With LB
'        For li = 0 To .ListCount - 1
'            If .Selected(li) = True Then
'                If .List(li) <> "" Then T.Add (.List(li))
'                i = i + 1
'            End If
'        Next li
'    End With
'
'    Values = T.ToString
'End Property
'
'Public Property Get Target() As Range
'    Set Target = rTarget
'End Property
'
'Private Sub WriteValues()
'
'    If Not rTarget Is Nothing Then
'        If Not rTarget.offset(0, 1) = "" Then
'            WriteToCell
'        End If
'    End If
'
'End Sub
'
'Private Sub WriteToCell()
'
'    On Error GoTo SubErr
'    modStack.PushCallStack "TPGMultiValueDDL", "WriteToCell"
'
'    rTarget.Value = Me.Values
'    rTarget.WrapText = True
'    rTarget.EntireRow.AutoFit
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "TPGMultiValueDDL.WriteToCell error:"
'    Resume SubEnd
'End Sub
'
'
'Private Sub LB_LostFocus()
'    rTarget.Value = T.ToString
'End Sub
'
'Public Property Get Visible() As Boolean
'    Visible = LB.Visible
'End Property
'
'Public Property Let Delimiter(Delimiter As String)
'    T.Delimiter = Delimiter
'End Property
'
''Private Sub LB_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
''    Debug.Print KeyAscii
''    Select Case KeyAscii
''        Case 13: Me.Hide            'return
''        Case 27: LB.Visible = False 'escape
''        Case Else:
''    End Select
''End Sub
'
'
'
'
''Private Sub LB_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
''    Debug.Print X & "/" & Y & " - mousedown"
''End Sub
''
''Private Sub LB_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
''    Debug.Print X & "/" & Y & " - mouseover"
''End Sub
''
''Private Sub LB_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Data As MSForms.DataObject, ByVal X As Single, ByVal Y As Single, ByVal DragState As MSForms.fmDragState, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
''    Debug.Print X & "/" & Y & " - dragover"
''End Sub
''
''Private Sub LB_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Action As MSForms.fmAction, ByVal Data As MSForms.DataObject, ByVal X As Single, ByVal Y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
''    Debug.Print X & "/" & Y & " - drop/paste"
''End Sub
'
'Private Sub ListBox1_GotFocus()
'    Debug.Print "gotfocus"
'End Sub
'
'Private Sub ListBox1_LostFocus()
'    Debug.Print "lostfocus"
'End Sub
'
'Public Sub CreateListBox()
'    On Error GoTo SubErr
'    modStack.PushCallStack "TPGMultiValueDDL", "CreateListBox"
'
'    DeleteListBox
'
'    Set LB = ActiveSheet.OLEObjects.Add(ClassType:="Forms.ListBox.1", Link:=False, _
'        DisplayAsIcon:=False, Left:=758.823529411765, Top:=317.647058823529, _
'        Width:=198.529411764706, Height:=89.1176470588235).Object
'    LB.Name = "MultiValueDDL"
'    LB.MultiSelect = fmMultiSelectMulti
'    LB.Enabled = True
'    LB.locked = False
'    LB.Select
'    selection.locked = False
'
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "TPGMultiValueDDL.CreateListBox error:"
'    Resume SubEnd
'End Sub
'
'Public Sub DeleteListBox()
'
'    On Error Resume Next
'    Dim OLE As OLEObject
'    Set OLE = ActiveSheet.OLEObjects("MultiValueDDL")
'    If Not OLE Is Nothing Then DeleteOLEObject OLE
'
'End Sub
'
'Private Sub DeleteOLEObject(OLE As OLEObject)
'
'    On Error GoTo SubErr
'    modStack.PushCallStack "TPGMultiValueDDL", "DeleteOLEObject"
'
'    OLE.Delete
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "TPGMultiValueDDL.DeleteOLEObject error:"
'    Resume SubEnd
'End Sub
Attribute VB_Name = "TPGPlan"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Public Departments As Collection
Public CostTypes As Collection
Public WorkCostTypes As Collection
Public Tasks As Collection

Private bCancelNextEvent As Boolean
Private testdep As Collection

Public Event EvtNameBeforeChange(task As TPGPlanTask)
Public Event EvtNameChanged(task As TPGPlanTask)


Private Sub Class_Initialize()
    Load
End Sub

Private Sub Class_Terminate()
    Set Departments = Nothing
    Set CostTypes = Nothing
    Set WorkCostTypes = Nothing
    Set Tasks = Nothing
End Sub

Public Sub Load()

    Dim rCell As Range
    Dim rHeader As Range
    Dim rFooter As Range
    Dim sTemp As String
    Dim task As TPGPlanTask

    On Error GoTo suberr
    
    Set Departments = New Collection
    For Each rCell In Plan.Range("Plan.WorkTypeNameRange")
        If rCell.value <> sTemp And rCell.value <> "" Then
            sTemp = rCell.value
            Departments.Add sTemp, sTemp
        End If
    Next
    
    Set CostTypes = New Collection
    For Each rCell In Plan.Range("Plan.CostNameRange")
        If rCell.value <> sTemp And rCell.value <> "" Then
            sTemp = rCell.value
            CostTypes.Add sTemp, sTemp
        End If
    Next
    
    Set WorkCostTypes = New Collection
    For Each rCell In Plan.Range("Plan.WorkCostNameRange")
        If rCell.value <> sTemp And rCell.value <> "" Then
            sTemp = rCell.value
            WorkCostTypes.Add sTemp, sTemp
        End If
    Next
    
    Set rHeader = Plan.Cells(Plan.Range("Plan.ProjectHeader").row + 1, Plan.Range("Plan.TaskNameColumn").Column)
    Set rFooter = Plan.Cells(Plan.Range("Plan.ProjectFooter").row - 1, Plan.Range("Plan.TaskNameColumn").Column)
    Set Tasks = New Collection
    For Each rCell In Plan.Range(rHeader, rFooter)
        Set task = New TPGPlanTask
        task.Load rCell.row, Me
        Tasks.Add task, task.uid
    Next
    
    
'    Set testdep = New Collection
'    Dim fc As Integer
'    Dim lc As Integer
'    Dim dep As TPGPlanDepartment
'    For Each rCell In plan.Range("Plan.WorkTypeNameRange")
'        If rCell.value <> sTemp And rCell.value <> "" Then
'            If fc <> 0 Then
'                Set dep = New TPGPlanDepartment
'                dep.Load fc, lc
'                testdep.Add dep
'            End If
'            sTemp = rCell.value
'            fc = rCell.column
'        End If
'        lc = rCell.column
'    Next
'    Set dep = New TPGPlanDepartment
'    dep.Load fc, lc - 1
'    testdep.Add dep
    
subend:
    Exit Sub
suberr:
    If err.Number = 457 Then
        Resume Next
    Else
        Resume subend
    End If
End Sub


'---------------------------------------------------------------------------------------
' Custom Events
'---------------------------------------------------------------------------------------
'
Public Sub NameChanged(task As TPGPlanTask)
    RaiseEvent EvtNameChanged(task)
End Sub

Public Sub NameBeforeChange(task As TPGPlanTask)
    RaiseEvent EvtNameBeforeChange(task)
End Sub


'---------------------------------------------------------------------------------------
' CancelNextEvent
'
' @date     02.05.2011
' @author   wm
' @version  1.0
' @param    Cancel      the next action wil be cancelled if set to true
' @return   Boolean
'---------------------------------------------------------------------------------------
'
Public Property Get CancelNextEvent() As Boolean
    CancelNextEvent = bCancelNextEvent
    bCancelNextEvent = False
End Property

Public Property Let CancelNextEvent(ByVal Cancel As Boolean)
    bCancelNextEvent = Cancel
End Property
Attribute VB_Name = "TPGPlanTask"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private iRowNo As Integer
Private iID As Integer
Private sUID As String
Private sExtID As String
Private sTaskType As String
Private iLevel As Integer
Private sWBSParent As String
Private sWBS As String
Private sname As String
Private dProgress As Double
Private sStatus As String
Private sResponsible As String
Private dtBaseStart As Date
Private dtBaseFinish As Date
Private dtActStart As Date
Private dtActFinish As Date
Private bDatesDefined As Boolean
Private FsBaseStart As String
Private fsactstart As String
Private fsbasefinish
Private fsactfinish
Private WithEvents PlanClass As TPGPlan
Attribute PlanClass.VB_VarHelpID = -1

Public Sub Load(row As Integer, MyPlan As TPGPlan)
    
    'On Error GoTo suberr
    On Error Resume Next
    
    iRowNo = row
    Set PlanClass = MyPlan
    iID = Plan.Cells(row, Plan.Range("Plan.IDColumn").Column).value
    sUID = Plan.Cells(row, Plan.Range("Plan.uIDColumn").Column).value
    sExtID = Plan.Cells(row, Plan.Range("Plan.ExtIdColumn").Column).value
    sTaskType = Plan.Cells(row, Plan.Range("Plan.TypColumn").Column).value
    iLevel = Plan.Cells(row, Plan.Range("Plan.LevelColumn").Column).value
    sWBSParent = Plan.Cells(row, Plan.Range("Plan.WBSParentColumn").Column).value
    sWBS = Plan.Cells(row, Plan.Range("Plan.WBSColumn").Column).value
    sname = Plan.Cells(row, Plan.Range("Plan.TaskNameColumn").Column).value
    dProgress = Plan.Cells(row, Plan.Range("Plan.ProgressColumn").Column).value
    sStatus = Plan.Cells(row, Plan.Range("Plan.StatusColumn").Column).value
    sResponsible = Plan.Cells(row, Plan.Range("Plan.ResponsibleColumn").Column).value
    dtBaseStart = Plan.Cells(row, Plan.Range("Plan.BaselineStartColumn").Column).value
    FsBaseStart = Plan.Cells(row, Plan.Range("Plan.BaselineStartColumn").Column).formula
    dtBaseFinish = Plan.Cells(row, Plan.Range("Plan.BaselineFinishColumn").Column).value
    fsbasefinish = Plan.Cells(row, Plan.Range("Plan.BaselineFinishColumn").Column).formula
    dtActStart = Plan.Cells(row, Plan.Range("Plan.StartColumn").Column).value
    fsactstart = Plan.Cells(row, Plan.Range("Plan.StartColumn").Column).formula
    dtActFinish = Plan.Cells(row, Plan.Range("Plan.FinishColumn").Column).value
    fsactfinish = Plan.Cells(row, Plan.Range("Plan.FinishColumn").Column).formula
    
subend:
    Exit Sub
suberr:
    Debug.Print err.Number & "; " & err.Description
    Resume subend
End Sub



'---------------------------------------------------------------------------------------
' RowNo
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   Boolean
'---------------------------------------------------------------------------------------
'
Public Property Get RowNo() As Integer
    RowNo = iRowNo
End Property

Public Property Let RowNo(ByVal iRowNo As Integer)
    iRowNo = iRowNo
End Property


'---------------------------------------------------------------------------------------
' ID
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   Integer
'---------------------------------------------------------------------------------------
'
Public Property Get id() As Integer
    id = iID
End Property

Public Property Let id(ByVal iID As Integer)
    iID = iID
End Property

'---------------------------------------------------------------------------------------
' UID
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   String
'---------------------------------------------------------------------------------------
'
Public Property Get uid() As String
    uid = sUID
End Property

Public Property Let uid(ByVal sUID As String)
    sUID = sUID
End Property

'---------------------------------------------------------------------------------------
' ExtID
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   String
'---------------------------------------------------------------------------------------
'
Public Property Get extId() As String
    extId = sExtID
End Property

Public Property Let extId(ByVal sExtID As String)
    sExtID = sExtID
End Property


'---------------------------------------------------------------------------------------
' TaskType
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   String
'---------------------------------------------------------------------------------------
'
Public Property Get taskType() As String
    taskType = sTaskType
End Property

Public Property Let taskType(ByVal sTaskType As String)
    sTaskType = sTaskType
End Property

'---------------------------------------------------------------------------------------
' Level
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   Integer
'---------------------------------------------------------------------------------------
'
Public Property Get level() As Integer
    level = iLevel
End Property

Public Property Let level(ByVal iLevel As Integer)
    iLevel = iLevel
End Property

'---------------------------------------------------------------------------------------
' WBSParent
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   String
'---------------------------------------------------------------------------------------
'
Public Property Get WBSParent() As String
    WBSParent = sWBSParent
End Property

Public Property Let WBSParent(ByVal sWBSParent As String)
    sWBSParent = sWBSParent
End Property

'---------------------------------------------------------------------------------------
' WBS
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   String
'---------------------------------------------------------------------------------------
'
Public Property Get WBS() As String
    WBS = sWBS
End Property

Public Property Let WBS(ByVal sWBS As String)
    sWBS = sWBS
End Property

'---------------------------------------------------------------------------------------
' Name
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   String
'---------------------------------------------------------------------------------------
'
Public Property Get Name() As String
    Name = sname
End Property

Public Property Let Name(ByVal sname As String)
    PlanClass.NameBeforeChange Me
    If PlanClass.CancelNextEvent Then
        Debug.Print "Name change was cancelled"
        Exit Property
    End If
    sname = sname
    Plan.Cells(iRowNo, Plan.Range("Plan.TaskNameColumn").Column).value = sname
    PlanClass.NameChanged Me
End Property

'---------------------------------------------------------------------------------------
' Progress
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   Double
'---------------------------------------------------------------------------------------
'
Public Property Get Progress() As Double
    Progress = dProgress
End Property

Public Property Let Progress(ByVal dProgress As Double)
    dProgress = dProgress
End Property

'---------------------------------------------------------------------------------------
' Status
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   String
'---------------------------------------------------------------------------------------
'
Public Property Get Status() As String
    Status = sStatus
End Property

Public Property Let Status(ByVal sStatus As String)
    sStatus = sStatus
End Property

'---------------------------------------------------------------------------------------
' Responsible
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   String
'---------------------------------------------------------------------------------------
'
Public Property Get Responsible() As String
    Responsible = sResponsible
End Property

Public Property Let Responsible(ByVal sResponsible As String)
    sResponsible = sResponsible
End Property

'---------------------------------------------------------------------------------------
' BaseStart
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   Date
'---------------------------------------------------------------------------------------
'
Public Property Get BaseStart() As Date
    BaseStart = dtBaseStart
End Property

Public Property Let BaseStart(ByVal dtBaseStart As Date)
    dtBaseStart = dtBaseStart
End Property

Public Property Get FBaseStart() As String
    FBaseStart = FsBaseStart
End Property
Public Property Get FActStart() As String
    FActStart = fsactstart
End Property
Public Property Get FBaseFinish() As String
    FBaseFinish = fsbasefinish
End Property
Public Property Get FActFinish() As String
    FActFinish = fsactfinish
End Property

'---------------------------------------------------------------------------------------
' BaseFinish
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   Date
'---------------------------------------------------------------------------------------
'
Public Property Get BaseFinish() As Date
    BaseFinish = dtBaseFinish
End Property

Public Property Let BaseFinish(ByVal dtBaseFinish As Date)
    dtBaseFinish = dtBaseFinish
End Property

'---------------------------------------------------------------------------------------
' ActStart
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   Date
'---------------------------------------------------------------------------------------
'
Public Property Get ActStart() As Date
    ActStart = dtActStart
End Property

Public Property Let ActStart(ByVal dtActStart As Date)
    dtActStart = dtActStart
End Property

'---------------------------------------------------------------------------------------
' ActFinish
'
' @date     27.04.2011
' @author   wm
' @version  1.0
' @param
' @return   Date
'---------------------------------------------------------------------------------------
'
Public Property Get ActFinish() As Date
    ActFinish = dtActFinish
End Property

Public Property Let ActFinish(ByVal dtActFinish As Date)
    dtActFinish = dtActFinish
End Property

Private Sub PlanClass_EvtNameBeforeChange(task As TPGPlanTask)
    If task Is Me Then Exit Sub
'    If Task.RowNo - Me.RowNo = 1 Then Debug.Print "I'm Task " & Me.Name & " in row " & Me.RowNo & " and my successor's name is about to change!"
'    If Task.RowNo - Me.RowNo = -1 Then Debug.Print "I'm Task " & Me.Name & " in row " & Me.RowNo & " and my predecessor's name is about to change!"
    'If Me.WBSParent = Task.WBSParent Then Debug.Print "I'm Task " & Me.Name & " in row " & Me.RowNo & " and we share the same wbsparent!"
'    If Task.RowNo - Me.RowNo = 1 Then
'        Debug.Print "I'm Task " & Me.Name & " in row " & Me.RowNo & " and I cancel this change..."
'        PlanClass.CancelNextEvent = True
'    End If
End Sub

Private Sub PlanClass_EvtNameChanged(task As TPGPlanTask)
    If task Is Me Then Exit Sub
    If task.RowNo - Me.RowNo = 1 Then Debug.Print "* I'm Task " & Me.Name & " in row " & Me.RowNo & " and my successor's name just changed!"
    If task.RowNo - Me.RowNo = -1 Then Debug.Print "* I'm Task " & Me.Name & " in row " & Me.RowNo & " and my predecessor's name just changed!"
    If Me.WBSParent = task.WBSParent Then Debug.Print "* I'm Task " & Me.Name & " in row " & Me.RowNo & " and we share the same wbsparent!"
End Sub
Attribute VB_Name = "TPGProgressBar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module    : TPGProgressBar
' Author    : wm
' Date      : 15.03.2011
' Purpose   : provides control mechanisms for the frmProgress userform.
'---------------------------------------------------------------------------------------

Option Explicit

Private sDescription As String
Private iActionCount As Integer
Private iEntryLevel As Integer
Private sProcToWatch As String
Private iTicksElapsed As Integer
Private iPBCount As Integer
Private Const strDefaultMsg_c As String = "Working..."


'---------------------------------------------------------------------------------------
' Class_Initialize
' show userform, set init ticks, get multibarcount if set
' @date     31.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub Class_Initialize()
    frmProgress.Show vbModeless
    iTicksElapsed = 0
    iPBCount = modStack.iProgBarPartialProcCount
    'Excel.Application.Cursor = xlWait
    'Excel.Application.StatusBar = strDefaultMsg_c
    'iEntryLevel = modStack.ProcHierarchy
End Sub


'---------------------------------------------------------------------------------------
' Class_Terminate
' unload userform, set multibarcount if set, reset multibarcount if lifespan exceeded
' @date     31.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub Class_Terminate()
    Unload frmProgress
    If BarCount > 1 Then modStack.iProgBarPartialProcCount = iPBCount + 1
    If iPBCount = modStack.iProgBarPartialProcCount Then modStack.iProgBarPartialProcCount = 0
End Sub


'---------------------------------------------------------------------------------------
' EntryLevel
'
' @date     31.01.2011
' @author   wm
' @version  1.0
' @param    EntryLevel      hierarchy lvl of the stack
'---------------------------------------------------------------------------------------
'
Public Property Let EntryLevel(EntryLevel As Integer)
    iEntryLevel = EntryLevel
End Property


'---------------------------------------------------------------------------------------
' ActionCount
'
' @date     31.01.2011
' @author   wm
' @version  1.0
' @param    ActionCount     Number of Ticks
'---------------------------------------------------------------------------------------
'
Public Property Let ActionCount(ActionCount As Integer)
    iActionCount = ActionCount
    If iActionCount = 0 Then iActionCount = 1 'avoid division by zero
End Property


'---------------------------------------------------------------------------------------
' ProcToWatch
'
' @date     31.01.2011
' @author   wm
' @version  1.0
' @param    ProcToWatch     name of the process that the bar should tick when called
'---------------------------------------------------------------------------------------
'
Public Property Let ProcToWatch(ProcToWatch As String)
    sProcToWatch = ProcToWatch
End Property


'---------------------------------------------------------------------------------------
' Description
'
' @date     31.01.2011
' @author   wm
' @version  1.0
' @param    Description     description text for the bar's caption
'---------------------------------------------------------------------------------------
'
Public Property Let Description(Description As String)
    sDescription = Description
End Property


'---------------------------------------------------------------------------------------
' Update
' triggers a tick
' @date     31.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub update()
    If CurrentProcName = sProcToWatch Then
        iTicksElapsed = iTicksElapsed + 1
        Tick
        If BarCount > 1 Then MultiBar
        
        frmProgress.Repaint
        
    End If
    'exit if falling below the hierarchy level of the process that created the progressbar
    If modStack.ProcHierarchy < iEntryLevel Then Unload frmProgress
End Sub


'---------------------------------------------------------------------------------------
' Tick
' updates the bar
' @date     31.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub Tick()

    
    Dim pct As String
   
    pct = Strings.Format(CStr(((iTicksElapsed) / iActionCount) * 100), "##0")
    If (iTicksElapsed / iActionCount) * 100 > 100 Then pct = "100"
    
    'update form
    frmProgress.update (pct)
    
    'update statusbar
    'Application.StatusBar = "working: " & pct & "%"
    
    If sDescription = "" Then
        frmProgress.Caption = pct & "% " & InitialProcName
    Else
        frmProgress.Caption = pct & "% " & sDescription
    End If
    
        
End Sub


'---------------------------------------------------------------------------------------
' MultiBar
' updates the bar if it's a multibar
' @date     31.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub MultiBar()

    Dim pct As String
    
    pct = Strings.Format(CStr((((iPBCount) * (300 / BarCount) + (frmProgress.lblProgress.Width / BarCount)) / 300) * 100), "###")
    frmProgress.updateOverall (pct)
    frmProgress.Caption = frmProgress.Caption & " - " & pct & "% overall progress"
    
End Sub


'---------------------------------------------------------------------------------------
' BarCount
'
' @date     19.01.2011
' @author   wm
' @version  1.0
' @return   total amount of progressbars displayed
'---------------------------------------------------------------------------------------
'
Private Function BarCount() As Integer
    Dim result As Integer
    Select Case InitialProcName
        Case "modTest.test1"
            result = 3
'        Case "Plan.UpdatePlan_Click"
'            result = 3
        Case "Cover.cmdExport_Click"
            result = 3
        Case "Cover.cmdImport_Click"
            result = 5
        Case Else
            result = 1
    End Select
    BarCount = result
End Function
Attribute VB_Name = "TPGProject"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private cTasks As Collection
Private cColumns As Collection
Private cKeys As Collection

Private Sub Class_Initialize()
    Set cTasks = New Collection
    Set cColumns = New Collection
    Set cKeys = New Collection
    InitColumns
    InitTasks
End Sub

Private Sub Class_Terminate()
    Set cTasks = Nothing
    Set cColumns = Nothing
    Set cKeys = Nothing
End Sub

Function NewEnum() As IUnknown
Attribute NewEnum.VB_UserMemId = -4
Attribute NewEnum.VB_MemberFlags = "40"
    Set NewEnum = cTasks.[_NewEnum]
End Function

Private Function InitTasks()
    Dim rCell As Range
    Dim task As TPGProjectTask
    
    Dim bSuccess As Boolean: bSuccess = True
    Dim rHeader As Range: Set rHeader = Plan.Cells(Plan.Range("Plan.ProjectHeader").row + 1, Plan.Range("Plan.UIDColumn").Column)
    Dim rFooter As Range: Set rFooter = Plan.Cells(Plan.Range("Plan.ProjectFooter").row - 1, Plan.Range("Plan.UIDColumn").Column)
    
    If rHeader.row >= rFooter.row Then bSuccess = False
    For Each rCell In Plan.Range(rHeader, rFooter)
        If Not rCell.value = "" Then
            Set task = New TPGProjectTask
            task.Init rCell, Me
            cTasks.Add task, task.GUID
        End If
    Next
    InitTasks = bSuccess
End Function

Public Property Get task(index As Variant) As TPGProjectTask
Attribute task.VB_UserMemId = 0
    On Error GoTo suberr
    Set task = cTasks(index)
    Exit Property
suberr:
    Debug.Print "invalid index: <" & index & ">"
End Property

Public Property Get LoadedFromMemory() As Boolean
    LoadedFromMemory = Me(1).LoadedFromMemory
End Property

Private Sub InitColumns()
    Dim n As Name
    Dim sCurrentName As String

    For Each n In ThisWorkbook.Names
        If Left(n.Name, 5) = "Plan." Then
            If Right(n.Name, 6) = "Column" Then
                sCurrentName = Replace(n.Name, "Plan.", "")
                sCurrentName = Replace(sCurrentName, "Column", "")
                If Not InStr(n.RefersTo, "#REF") > 0 Then
                    cColumns.Add n.RefersToRange.Column, sCurrentName
                    cKeys.Add sCurrentName, CStr(n.RefersToRange.Column)
                End If
            End If
        End If
    Next
End Sub

Public Property Get Column(ColumnName As String) As Integer
    On Error GoTo suberr
    Column = CInt(cColumns(ColumnName))
subend:
    Exit Property
suberr:
    Debug.Print "there is no column with the name " & ColumnName
    Column = -1
End Property

Public Property Get key(ColumnNo As Integer) As String
    On Error GoTo suberr
    key = cKeys(CInt(ColumnNo))
subend:
    Exit Property
suberr:
    Debug.Print "there is element associated wit the key " & ColumnNo
    key = Empty
End Property

Public Property Get AllColumns() As Collection
    Set AllColumns = cColumns
End Property

Public Property Get ToString() As String
    Dim t As New TPGTokenizer
    Dim tCols As New TPGTokenizer
    Dim TKeys As New TPGTokenizer
    Dim Project As TPGProjectTask
    
    t.Delimiter = "|fffd|"
    tCols.FromCollection cColumns
    TKeys.FromCollection cKeys
    t.Add tCols.ToString
    t.Add TKeys.ToString
    
    For Each Project In cTasks
        t.Add Project.ToString
    Next
    ToString = t.ToString
End Property

Public Sub FromString(TokenString As String)
    Dim t As New TPGTokenizer
    Dim tCols As New TPGTokenizer
    Dim TKeys As New TPGTokenizer
    Dim Project As TPGProjectTask
    Dim i As Integer
    
    t.Delimiter = "|fffd|"
    t.FromString TokenString
    If t.Count < 3 Then Exit Sub
    
    Set cTasks = New Collection
    Set cColumns = Nothing
    Set cKeys = Nothing
    
    tCols.FromString t(1)
    TKeys.FromString t(2)
    Set cColumns = tCols.ToCollection
    Set cKeys = TKeys.ToCollection
    
    For i = 3 To t.Count
        Set Project = New TPGProjectTask
        Project.FromString t(i)
        Set Project.Parent = Me
        cTasks.Add Project, Project("UID")
    Next
End Sub


Attribute VB_Name = "TPGProjectTask"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private rMyCell As Range
Private oProject As TPGProject
Private cValues As Collection

Private Sub Class_Initialize()
    Set cValues = Nothing
End Sub

Private Sub Class_Terminate()
    Set cValues = Nothing
    Set oProject = Nothing
    Set rMyCell = Nothing
End Sub

Public Sub Init(Target As Range, Project As TPGProject)
    Set rMyCell = Target
    Set oProject = Project
End Sub

Public Property Set Parent(Project As TPGProject)
    Set oProject = Project
End Property
Public Property Get Parent() As TPGProject
    Set Parent = oProject
End Property

Public Property Get RowNo() As Long
    RowNo = rMyCell.row
End Property

Public Property Get EntireRow() As Range
    Set EntireRow = rMyCell.EntireRow
End Property

Public Property Get LoadedFromMemory() As Boolean
    If Not cValues Is Nothing Then LoadedFromMemory = True
End Property

Public Property Get value(ColumnName As Variant) As Variant
Attribute value.VB_UserMemId = 0
    Select Case TypeName(ColumnName)
        Case "Integer"
            If LoadedFromMemory Then
                value = cValues(ColumnName)
            Else
                value = Plan.Cells(Me.RowNo, ColumnName).value
            End If
        Case "String"
            If LoadedFromMemory Then
                value = cValues(ColumnName)
            Else
                If oProject.Column(CStr(ColumnName)) > 0 Then
                    value = Plan.Cells(Me.RowNo, oProject.Column(CStr(ColumnName))).value
                Else
                    value = Empty
                End If
            End If
        Case Else
            value = Empty
    End Select
End Property

Public Property Get ToCollection() As Collection
    Dim c As New Collection
    Dim i As Integer

    For i = 1 To oProject.AllColumns.Count
        c.Add Plan.Cells(Me.RowNo, oProject.AllColumns(i)).value, oProject.key(i)
    Next
    Set ToCollection = c
End Property

Public Property Get ToString() As String
    Dim TValues As New TPGTokenizer
    Dim TKeys As New TPGTokenizer
    Dim TAll As New TPGTokenizer
    Dim i As Integer
    
    TAll.Delimiter = "^"
    TValues.Delimiter = "$"
    TKeys.Delimiter = "$"
    
    For i = 1 To oProject.AllColumns.Count
        TValues.Add Plan.Cells(Me.RowNo, oProject.AllColumns(i)).value 'Me(oProject.AllColumns(i)) '
        TKeys.Add oProject.key(i)
    Next
    
    TAll.Add TValues.ToString
    TAll.Add TKeys.ToString
    ToString = TAll.ToString
End Property

Public Sub FromString(TokenString As String)
    Dim TValues As New TPGTokenizer
    Dim TKeys As New TPGTokenizer
    Dim TAll As New TPGTokenizer
    Dim i As Integer
    
    Set cValues = New Collection
    
    TAll.Delimiter = "^"
    TValues.Delimiter = "$"
    TKeys.Delimiter = "$"
    
    TAll.FromString TokenString
    TValues.FromString TAll(1)
    TKeys.FromString TAll(2)
    For i = 1 To TValues.Count
        cValues.Add TValues(i), TKeys(i)
    Next
End Sub



'Just showcasing... not actually necessary to define any getters
Public Property Get Name() As String
    Name = Me("TaskName")
End Property
Public Property Get Number() As String
    Number = Me("WBS")
End Property
Public Property Get GUID() As String
    GUID = Me("UID")
End Property


Public Property Get Duration() As Long
    Duration = CLng(Me("Finish")) - DateAdd("d", -1, Me("Start"))
'    Duration = CLng(Me("Finish")) - CLng(Me("Start"))
End Property

'
'Public Property Get ToTokenizer() As TPGTokenizer
'    Dim T As New TPGTokenizer
'    Dim i As Integer
'    For i = 1 To oProject.AllColumns.Count
'        T.Add Plan.Cells(Me.RowNo, oProject.AllColumns(i)).Value
'    Next
'    Set ToTokenizer = T
'End Property
'
'
'Public Property Get GenericProjectData(Column As Integer) As Variant
'    GenericProjectData = Plan.Cells(Me.RowNo, Column).Value
'End Property
'


Public Property Get Hidden() As Boolean
    Hidden = Plan.rows(Me.RowNo).EntireRow.Hidden
End Property
Public Property Let Hidden(value As Boolean)
    Plan.rows(Me.RowNo).EntireRow.Hidden = value
End Property

Public Property Get Collapsed()
    Collapsed = Me("OpenCollapse") = Chr(132)
End Property

Public Property Get ParentWBSNo() As String
    'intentionally not referring to parent wbs column because
    'this can be made invalid by setting the task to inactive
    Dim t As New TPGTokenizer
    t.Delimiter = "."
    t.FromString Me("WBS")
    t.Pop
    ParentWBSNo = t.ToString
End Property

Public Property Get HasDetails() As Boolean
    If Not WPDetails.Range("WPDetails").Find(Me.GUID) Is Nothing Then HasDetails = True
End Property

Public Property Get Inactive() As Boolean
    Inactive = Me("InactiveWP") = "x"
End Property

Public Sub Activate()
    Dim planWPTable As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "TPGSingleTask", "Activate"

    Set planWPTable = New TPGTable
    On Error Resume Next ' zum Beispiel wenn das AP Sheet hidden ist wegen Komplexitaet Setting
    planWPTable.SetTable Plan.Range("Plan.WPs"), True, False, TemplateBeforeHeader, 2
    If Me.RowNo >= planWPTable.firstrow And Me.RowNo <= planWPTable.lastrow Then
        WPDetails.Range("WPDetails!$A$1").value = Me.RowNo - planWPTable.firstrow + 2
        wp.cboWPs_Change
        Sheets(appGetLOCText("WPSheet")).Select
        'Sheets("WP").Select
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGSingleTask.Activate error:"
    Resume subend
End Sub

Public Property Get Work(Name As String) As TPGWorkCostElement
    Dim W As New TPGWorkCostElement
    W.Init Me, Plan.Range("Plan.WorkTypeNameRange").Find(Name)
    Set Work = W
End Property

Attribute VB_Name = "TPGSQLTask"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public sProjectName As String
Public sTaskName As String
Public iIndex As Integer
Public iOutlineLevel As Integer
Public dstart As Date
Public dfinish As Date
Public dPctComplete As Double
Public bIsMilestone As Boolean
Public bIsSummaryTask As Boolean
Public sTaskGUID As String
Public sParentTaskGUID As String
Public cSnapShotDates As Collection
Public cMileStoneDates As Collection

Public cDepartment As Collection
Private cActualWork As Collection
Private cTotalWork As Collection
Private iAssignmentCount As Integer
'Private cCostType As Collection
'Private cBaseWork As Collection

'---------------------------------------------------------------------------------------
' Class_Initialize
'
' @date     17.03.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub Class_Initialize()
    On Error GoTo suberr
    modStack.PushCallStack "TPGSQLTask", "Class_Initialize"

    Set cActualWork = New Collection
    Set cTotalWork = New Collection
    Set cDepartment = New Collection
    Set cSnapShotDates = New Collection
    Set cMileStoneDates = New Collection
    iAssignmentCount = 0

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGSQLTask.Class_Initialize error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' Class_Terminate
'
' @date     17.03.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub Class_Terminate()
    On Error GoTo suberr
    modStack.PushCallStack "TPGSQLTask", "Class_Terminate"

    Set cActualWork = Nothing
    Set cTotalWork = Nothing
    Set cDepartment = Nothing
    Set cSnapShotDates = Nothing
    Set cMileStoneDates = Nothing

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGSQLTask.Class_Terminate error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' ActualWork
'
' @date     17.03.2011
' @author   wm
' @version  1.0
' @param    Department
' @return   Variant
'---------------------------------------------------------------------------------------
'
Public Property Get ActualWork(department As String)
    On Error GoTo suberr
    modStack.PushCallStack "TPGSQLTask", "ActualWork"

    ActualWork = cActualWork(department)

subend:
    modStack.PopCallStack
    Exit Property
suberr:
    AppErrMsg "TPGSQLTask.ActualWork error:"
    Resume subend
End Property


'---------------------------------------------------------------------------------------
' TotalWork
'
' @date     17.03.2011
' @author   wm
' @version  1.0
' @param    Department
' @return   Variant
'---------------------------------------------------------------------------------------
'
Public Property Get TotalWork(department As String)
    On Error GoTo suberr
    modStack.PushCallStack "TPGSQLTask", "TotalWork"

    TotalWork = cTotalWork(department)

subend:
    modStack.PopCallStack
    Exit Property
suberr:
    AppErrMsg "TPGSQLTask.TotalWork error:"
    Resume subend
End Property


'---------------------------------------------------------------------------------------
' AddAssignment
' @purpose  adds an assignment to the task.
'           assigns the department name as key to the related collections so these can
'           be accessed from outside with just the department name.
'           ActualWork and TotalWork will be summed up.
' @date     17.03.2011
' @author   wm
' @version  1.0
' @param    Department      name of the department
'           ActualWork      amount of actual work being added to the department
'           TotalWork       amount of total work being added to the department
'---------------------------------------------------------------------------------------
'
Public Sub AddAssignment(department As String, ActualWork As Double, TotalWork As Double)
    On Error GoTo suberr
    modStack.PushCallStack "TPGSQLTask", "AddAssignment"

    iAssignmentCount = iAssignmentCount + 1
    
    If KeyExists(cDepartment, department) Then
        ActualWork = ActualWork + cActualWork(department)
        TotalWork = TotalWork + cTotalWork(department)
        cActualWork.Remove (department)
        cTotalWork.Remove (department)
    Else
        cDepartment.Add department, department
    End If
    
    cActualWork.Add ActualWork, department
    cTotalWork.Add TotalWork, department

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGSQLTask.AddAssignment error:"
    Resume subend
    
End Sub


Public Sub AddMilestone(SnapShotDate As Date, MileStoneDate As Date)
    On Error Resume Next
    cSnapShotDates.Add SnapShotDate ', CStr(MileStoneDate)
    cMileStoneDates.Add MileStoneDate, CStr(SnapShotDate)
End Sub
Attribute VB_Name = "TPGTable"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Enum TPGTemplatePosition
    TemplateBeforeHeader = 1
    TemplateFirstrow = 2
    TemplateBeforeFooter = 3
End Enum

'Public Enum TPGFormatColumn
'    FormatColumnStatus = 1
'    FormatColumn
'End Enum

Private m_TableRange As Range
Private m_HasSummaryRow As Boolean
Private m_HasRowHeaders As Boolean
Private m_TemplatePosition As TPGTemplatePosition
Private m_MinRows As Integer
Private m_SideTable As TPGTable
Private m_DefaultRowHeight As Single
'added to fix printing bug
Private Const DEFAULTHEIGHT As Single = 14
Private Const PERCPIXADJ As Single = 0.85
'This code was added to work on cells not merged but requires wrapping
Public bAutoFit As Boolean
'added for CRF - can be used to exclude sheets from auto format - Clear Row
Private m_NoAutoColor As Boolean

'added for SALK
Public Property Get Header() As Range
    Set Header = Me.ValuesRange.rows(1).offset(-1, 0)
End Property

'added for SALK
Public Property Get Columns() As Collection
    Dim rCell As Range
    Dim c As New Collection
    For Each rCell In Me.Header.Cells
        If (Not rCell.value = "" And Not IsEmpty(rCell.value)) Then c.Add rCell.Column - FirstCol + 1, CStr(rCell.value)
    Next
    Set Columns = c
End Property


Property Let DisableAutoColor(value As Boolean)
    m_NoAutoColor = value
End Property

'Added for CRF
Private Sub Class_Initialize()
    m_NoAutoColor = False
End Sub

Public Sub SetTable(Target As Range, hasrowheaders As Boolean, HasSummaryRow As Boolean, Optional TemplatePosition As TPGTemplatePosition = TemplateFirstrow, Optional MinRows As Integer = 5, Optional SideTable As Range, Optional DefaultRowHeight As Single)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "SetTable"

    m_MinRows = MinRows
    m_HasRowHeaders = hasrowheaders
    m_HasSummaryRow = HasSummaryRow
    m_TemplatePosition = TemplatePosition
    m_DefaultRowHeight = DefaultRowHeight
    Set m_TableRange = Target
    If Not SideTable Is Nothing Then
        Set m_SideTable = New TPGTable
        m_SideTable.SetTable SideTable, m_HasRowHeaders, m_HasSummaryRow, m_TemplatePosition, m_MinRows
    End If
    
    'added to fix printing bug
    If IsMissing(DefaultRowHeight) Or m_DefaultRowHeight = 0 Then
        m_DefaultRowHeight = DEFAULTHEIGHT
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.SetTable error:"
    Resume subend
End Sub

Property Get ValuesRange(Optional Column As Integer) As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "ValuesRange"

    If Column > 0 Then
        Set ValuesRange = m_TableRange.Worksheet.Range(m_TableRange.Worksheet.Cells(firstrow, FirstCol + Column - 1), m_TableRange.Worksheet.Cells(lastrow, FirstCol + Column - 1))
    Else
        Set ValuesRange = m_TableRange.Worksheet.Range(m_TableRange.Worksheet.Cells(firstrow, FirstCol), m_TableRange.Worksheet.Cells(lastrow, LastCol))
    End If

subend:
    modStack.PopCallStack
    Exit Property
suberr:
    AppErrMsg "TPGTable.ValuesRange error:"
    Resume subend
End Property

Property Get FirstCol() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "FirstCol"

    If ColumnsCount > 0 Then
        If m_HasRowHeaders Then
            FirstCol = m_TableRange.Column + 1
        Else
            FirstCol = m_TableRange.Column
        End If
    Else
        FirstCol = 0
    End If

subend:
    modStack.PopCallStack
    Exit Property
suberr:
    AppErrMsg "TPGTable.FirstCol error:"
    Resume subend
End Property

Property Get LastCol() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "LastCol"

    If RowsCount > 0 Then
        If m_HasRowHeaders Then
            LastCol = m_TableRange.Column + m_TableRange.Columns.Count - 2
        Else
            LastCol = m_TableRange.Column + m_TableRange.Columns.Count - 1
        End If
    Else
        LastCol = 0
    End If

subend:
    modStack.PopCallStack
    Exit Property
suberr:
    AppErrMsg "TPGTable.LastCol error:"
    Resume subend
End Property

Property Get TemplateRowIndex() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "TemplateRowIndex"

    Select Case m_TemplatePosition
        Case TPGTemplatePosition.TemplateBeforeHeader:
            TemplateRowIndex = m_TableRange.row - 1
        Case TPGTemplatePosition.TemplateFirstrow:
            TemplateRowIndex = m_TableRange.row + 1
        Case TPGTemplatePosition.TemplateBeforeFooter:
            TemplateRowIndex = FooterRow - 1
    End Select

subend:
    modStack.PopCallStack
    Exit Property
suberr:
    AppErrMsg "TPGTable.TemplateRowIndex error:"
    Resume subend
End Property

Property Get firstrow() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "firstrow"

    If RowsCount > 0 Then
        firstrow = m_TableRange.row + 1
    Else
        firstrow = 0
    End If

subend:
    modStack.PopCallStack
    Exit Property
suberr:
    AppErrMsg "TPGTable.firstrow error:"
    Resume subend
End Property

Property Get lastrow() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "lastRow"

    If RowsCount > 0 Then
        If m_HasSummaryRow Then
            lastrow = m_TableRange.row + m_TableRange.rows.Count - 3
        Else
            lastrow = m_TableRange.row + m_TableRange.rows.Count - 2
        End If
    Else
        lastrow = 0
    End If

subend:
    modStack.PopCallStack
    Exit Property
suberr:
    AppErrMsg "TPGTable.lastRow error:"
    Resume subend
End Property

Property Get FooterRow() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "FooterRow"

    If m_HasSummaryRow Then
        FooterRow = m_TableRange.row + RowsCount + 2
    Else
        FooterRow = m_TableRange.row + RowsCount + 1
    End If

subend:
    modStack.PopCallStack
    Exit Property
suberr:
    AppErrMsg "TPGTable.FooterRow error:"
    Resume subend
End Property

Property Get RowsCount() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "RowsCount"

    If m_HasSummaryRow Then
        RowsCount = m_TableRange.rows.Count - 3
    Else
        RowsCount = m_TableRange.rows.Count - 2
    End If

subend:
    modStack.PopCallStack
    Exit Property
suberr:
    AppErrMsg "TPGTable.RowsCount error:"
    Resume subend
End Property

Property Get ColumnsCount() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "ColumnsCount"

    If m_HasRowHeaders Then
        ColumnsCount = m_TableRange.Columns.Count - 2
    Else
        ColumnsCount = m_TableRange.Columns.Count
    End If

subend:
    modStack.PopCallStack
    Exit Property
suberr:
    AppErrMsg "TPGTable.ColumnsCount error:"
    Resume subend
End Property

Public Function Serialize(cols As Variant, Optional Delimiter As String = "|") As String
    Dim row As Range
    Dim c As Variant
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "Serialize"

    For Each row In ValuesRange.rows
        For Each c In cols
            Serialize = Serialize & row.Cells(columnIndex:=c) & Delimiter
        Next
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.Serialize error:"
    Resume subend
End Function

'Added for SALK
Public Sub DeSerializeSkipLocked(cols As Variant, Values As String, Optional Delimiter As String = "|")
    Dim nrOfRows As Integer
    Dim nrOfCols As Integer
    Dim valuesArray As Variant
    Dim i As Integer
    Dim row As Range
    Dim c As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "DeSerialize"

    valuesArray = Split(Values, Delimiter)
    If UBound(valuesArray) < 0 Then GoTo subend
    nrOfCols = UBound(cols) + 1
    nrOfRows = UBound(valuesArray) / nrOfCols
    
    clear
    GrowUntil (nrOfRows)
    i = 0
    For Each row In ValuesRange.rows
        For Each c In cols
            If Not (row.Cells(columnIndex:=c).locked) Then
                row.Cells(columnIndex:=c).value = valuesArray(i)
            End If
            i = i + 1
            If i >= UBound(valuesArray) Then GoTo subend
        Next
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.DeSerialize error:"
    Resume subend
End Sub

Public Sub DeSerialize(cols As Variant, Values As String, Optional Delimiter As String = "|")
    Dim nrOfRows As Integer
    Dim nrOfCols As Integer
    Dim valuesArray As Variant
    Dim i As Integer
    Dim row As Range
    Dim c As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "DeSerialize"

    valuesArray = Split(Values, Delimiter)
    If UBound(valuesArray) < 0 Then GoTo subend
    nrOfCols = UBound(cols) + 1
    nrOfRows = UBound(valuesArray) / nrOfCols
    
    clear
    GrowUntil (nrOfRows)
    i = 0
    For Each row In ValuesRange.rows
        For Each c In cols
            row.Cells(columnIndex:=c).value = valuesArray(i)
            i = i + 1
            If i >= UBound(valuesArray) Then GoTo subend
        Next
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.DeSerialize error:"
    Resume subend
End Sub

Public Function CanInsert(Target As Range) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "CanInsert"

    If InRange(m_TableRange, Target) Then
        If Target.row > m_TableRange.row And Target.row <= FooterRow Then
            CanInsert = True
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.CanInsert error:"
    Resume subend
End Function

Public Function CanDelete(Target As Range) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "CanDelete"

    If InRange(m_TableRange, Target) Then
        If RowsCount > 0 Then
            If Target.row > m_TableRange.row And Target.row <= lastrow Then
                CanDelete = True
            End If
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.CanDelete error:"
    Resume subend
End Function

Public Function IsRowEmpty(rowIndex As Integer) As Boolean
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "IsRowEmpty"

    If RowsCount > 0 Then
        If rowIndex >= firstrow And rowIndex <= lastrow Then
            For i = FirstCol To LastCol
                If m_TableRange.Worksheet.Cells(rowIndex, i).value <> "" Then
                    GoTo subend
                End If
            Next
            IsRowEmpty = True
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.IsRowEmpty error:"
    Resume subend
End Function

Public Function IsTableEmpty() As Boolean
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "IsTableEmpty"

    For i = firstrow To lastrow
        If Not IsRowEmpty(i) Then
            IsTableEmpty = False
            GoTo subend
        End If
    Next
    IsTableEmpty = True

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.IsTableEmpty error:"
    Resume subend
End Function


Private Function GetRowRange(rowIndex As Integer) As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "GetRowRange"

    If rowIndex >= firstrow And rowIndex <= lastrow Then
        Set GetRowRange = m_TableRange.Worksheet.Range(m_TableRange.Worksheet.Cells(rowIndex, FirstCol), m_TableRange.Worksheet.Cells(rowIndex, LastCol))
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.GetRowRange error:"
    Resume subend
End Function

'function wird nicht verwendet
Private Function GetColumnRange(columnIndex As Integer) As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "GetColumnRange"

    If columnIndex >= FirstCol And columnIndex <= LastCol Then
        Set GetColumnRange = ValuesRange(columnIndex) 'm_TableRange.Worksheet.Range(m_TableRange.Worksheet.Cells(firstrow, FirstCol + columnIndex - 1), m_TableRange.Worksheet.Cells(lastRow, FirstCol + columnIndex - 1))
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.GetColumnRange error:"
    Resume subend
End Function

Friend Function GetMergedCells() As Collection
    Dim i As Integer
    Dim c As Range
    Dim col As New Collection

    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "GetMergedCells"

    For i = FirstCol To LastCol
        Set c = m_TableRange.Worksheet.Cells(TemplateRowIndex, i)
        If c.MergeCells Then
            col.Add GetTPGMergeRange(c.MergeArea.Column, c.MergeArea.Column + c.MergeArea.Columns.Count - 1)
            i = i + c.MergeArea.Columns.Count - 1
        End If
    Next
    Set GetMergedCells = col

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.GetMergedCells error:"
    Resume subend
End Function

Public Sub AddRow()
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "AddRow"

    If m_HasSummaryRow Then
        InsertRow FooterRow - 1
    Else
        InsertRow FooterRow
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.AddRow error:"
    Resume subend
End Sub

Public Sub AppendTrailingRows(nrOfRows As Integer)
    ' modifies the table such that it will have at least 'nrOfRows' empty rows
    Dim nrOfEmptyRows As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "AppendTrailingRows"

    nrOfEmptyRows = emptyrowscount
    Do While nrOfEmptyRows < nrOfRows
        AddRow
        nrOfEmptyRows = nrOfEmptyRows + 1
    Loop

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.AppendTrailingRows error:"
    Resume subend
End Sub

Public Function emptyrowscount() As Integer
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "emptyrowscount"

    emptyrowscount = 0
    For i = firstrow To lastrow
        If IsRowEmpty(i) Then
            emptyrowscount = emptyrowscount + 1
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.emptyrowscount error:"
    Resume subend
End Function

Public Sub GrowUntil(limit As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "GrowUntil"

    Do While RowsCount < limit
        AddRow
    Loop
    Application.CutCopyMode = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.GrowUntil error:"
    Resume subend
End Sub

Private Sub setHidden(Hidden As Boolean, topOffset As Integer, bottomOffset As Integer)
    Dim firstrow, lastrow As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "setHidden"

    firstrow = ValuesRange.row - topOffset
    lastrow = ValuesRange.row + ValuesRange.rows.Count + bottomOffset
    m_TableRange.Worksheet.Range(m_TableRange.Worksheet.Cells(firstrow, 1), m_TableRange.Worksheet.Cells(lastrow, 1)).EntireRow.Hidden = Hidden

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.setHidden error:"
    Resume subend
End Sub

Public Sub Hide(Optional topOffset As Integer = 0, Optional bottomOffset As Integer = 0)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "Hide"

    setHidden True, topOffset, bottomOffset

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.Hide error:"
    Resume subend
End Sub

Public Sub Unhide(Optional topOffset As Integer = 0, Optional bottomOffset As Integer = 0)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "Unhide"

    setHidden False, topOffset, bottomOffset

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.Unhide error:"
    Resume subend
End Sub

Public Sub InsertRow(InsertionRow As Integer)
    Dim TemplateRow As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "InsertRow"

    TemplateRow = TemplateRowIndex
    
    If InsertionRow = FooterRow And m_HasSummaryRow Then InsertionRow = InsertionRow - 1
        
'    m_TableRange.Worksheet.Cells(TemplateRow, 1).EntireRow.Copy
'    'm_TableRange.Worksheet.Cells(InsertionRow, 1).EntireRow.Insert copyOrigin:=xlFormatFromLeftOrAbove
'    CellFunctions.InsertWrapped m_TableRange.Worksheet.Cells(InsertionRow, 1).EntireRow

'fix due to automation error problem in 64-bit excel (sometimes?!)
#If Win64 Then ' Win64 Then
    #If VBA7 Then
        RCopy m_TableRange.Worksheet.Cells(TemplateRow, 1).EntireRow
        'm_TableRange.Worksheet.Cells(TemplateRow, 1).EntireRow.Copy
        CellFunctions.InsertWrapped m_TableRange.Worksheet.Cells(InsertionRow, 1).EntireRow
    #Else
        CellFunctions.CopyPasteRow64 m_TableRange.Worksheet, TemplateRow, InsertionRow
    #End If
#Else
    RCopy m_TableRange.Worksheet.Cells(TemplateRow, 1).EntireRow
    'm_TableRange.Worksheet.Cells(TemplateRow, 1).EntireRow.Copy
    CellFunctions.InsertWrapped m_TableRange.Worksheet.Cells(InsertionRow, 1).EntireRow
#End If
    
    If m_TemplatePosition = TPGTemplatePosition.TemplateFirstrow Then
        ClearRow InsertionRow
        If Not m_SideTable Is Nothing Then m_SideTable.ClearRow InsertionRow
    End If
    m_TableRange.Worksheet.Cells(InsertionRow, 1).EntireRow.Hidden = False
    
    If Not m_SideTable Is Nothing Then m_SideTable.RemoveWhitespace InsertionRow

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.InsertRow error:"
    Resume subend
End Sub

Public Sub AddWhiteSpace(InsertionRow As Integer)
    Dim i As Integer
    Dim j As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "AddWhiteSpace"

    If Not IsRowEmpty(InsertionRow) Then
        If Not IsRowEmpty(lastrow) Then AddRow
        For i = lastrow - 1 To InsertionRow Step -1
            For j = FirstCol To LastCol
                m_TableRange.Worksheet.Cells(i + 1, j).value = m_TableRange.Worksheet.Cells(i, j).value
                If m_TableRange.Worksheet.Cells(i + 1, j).MergeCells Then
                    m_TableRange.Worksheet.Cells(i + 1, j).MergeArea.locked = m_TableRange.Worksheet.Cells(i, j).locked
                Else
                    m_TableRange.Worksheet.Cells(i + 1, j).locked = m_TableRange.Worksheet.Cells(i, j).locked
                End If
                m_TableRange.Worksheet.Cells(i + 1, j).Interior.Color = m_TableRange.Worksheet.Cells(i, j).Interior.Color
            Next
        Next
        ClearRow InsertionRow
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.AddWhiteSpace error:"
    Resume subend
End Sub

Public Sub DeleteRow(Target As Range)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "DeleteRow"

    If RowsCount <= m_MinRows Then
        AddRow
    End If
    If Not m_SideTable Is Nothing Then m_SideTable.AddWhiteSpace Target.row
    Target.EntireRow.Delete

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.DeleteRow error:"
    Resume subend
End Sub

Public Sub RemoveWhitespace(rowIndex As Integer)
    Dim i As Integer
    Dim j As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "RemoveWhitespace"

    For i = rowIndex To lastrow - 1
        For j = FirstCol To LastCol
            m_TableRange.Worksheet.Cells(i, j).value = m_TableRange.Worksheet.Cells(i + 1, j).value
            If m_TableRange.Worksheet.Cells(i + 1, j).MergeCells Then
                m_TableRange.Worksheet.Cells(i, j).MergeArea.locked = m_TableRange.Worksheet.Cells(i + 1, j).locked
            Else
                m_TableRange.Worksheet.Cells(i, j).locked = m_TableRange.Worksheet.Cells(i + 1, j).locked
            End If
            m_TableRange.Worksheet.Cells(i, j).Interior.Color = m_TableRange.Worksheet.Cells(i + 1, j).Interior.Color
        Next
    Next
    ClearRow lastrow

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.RemoveWhitespace error:"
    Resume subend
End Sub

Friend Sub ClearRow(rowIndex As Integer)
    Dim R As Range
    'GetRowRange(rowindex).ClearContents
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "ClearRow"

    For Each R In GetRowRange(rowIndex)
        If R.value <> "" Then
            If Not R.hasFormula Then
                If R.MergeCells Then
                    R.MergeArea.ClearContents
                Else
                    R.ClearContents
                End If
            End If
            If Not m_NoAutoColor Then 'added for CRF
                If R.locked Then
                    R.Interior.Color = RGB(242, 242, 242)
                Else
                    R.Interior.Color = RGB(255, 255, 255)
                End If
            End If
        End If
    Next
    If m_DefaultRowHeight > 0 Then
        GetRowRange(rowIndex).EntireRow.RowHeight = m_DefaultRowHeight
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.ClearRow error:"
    Resume subend
End Sub

Public Sub clear()
    Dim i As Integer
    Dim iFirst As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "Clear"

    If RowsCount > m_MinRows Then
        m_TableRange.Worksheet.Range(m_TableRange.Worksheet.Cells(firstrow + m_MinRows, 1), m_TableRange.Worksheet.Cells(lastrow, 1)).EntireRow.Delete
    End If
    For i = RowsCount + 1 To m_MinRows
        AddRow
    Next
    iFirst = firstrow
    For i = 0 To m_MinRows - 1
        ClearRow iFirst + i
    Next
    If m_DefaultRowHeight > 0 Then
        ValuesRange.EntireRow.RowHeight = m_DefaultRowHeight
    Else
        ValuesRange.EntireRow.AutoFit
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.Clear error:"
    Resume subend
End Sub

Public Sub SetFormat(Column As Integer, Settings As Collection, Optional bSingleCol As Boolean = False)
    Dim c As Range
    Dim i As Integer
        
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "SetFormat"

    For Each c In ValuesRange(Column) ' fixed - der alte code nimmt ne riesenrange statt ne einzelne spalte - ValuesRange.offset(0, column - 1)
        For i = 1 To Settings.Count
            If Settings(i).value = c.value Then
                If bSingleCol Then
                    c.Interior.Color = Settings(i).Color
                    'ValuesRange.Resize(1).offset(c.row - m_TableRange.row - 1).Interior.Color = Settings(i).Color
                Else
                    ValuesRange.Resize(1).offset(c.row - m_TableRange.row - 1).Interior.Color = Settings(i).Color
                End If
                Exit For
            End If
        Next
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.SetFormat error:"
    Resume subend
End Sub

Public Sub ClearFormat()
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "ClearFormat"

    If rows.Count > 0 Then
        ValuesRange.Interior.Color = RGB(255, 255, 255)
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.ClearFormat error:"
    Resume subend
End Sub

Public Sub Sort(Target As Range, SortOrder As XlSortOrder)
    Dim c As Collection
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "Sort"

    If CanDelete(Target) Then
        If RowsCount > 0 Then
            Set c = GetMergedCells
            If c.Count > 0 Then UnmergeCells
            ValuesRange.Sort Target, SortOrder
            If c.Count > 0 Then MergeCells c
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.Sort error:"
    Resume subend
End Sub

Public Function SearchNameInColumn(Column As Integer, value As String) As Range
    Dim cell As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "SearchNameInColumn"

    For Each cell In ValuesRange.Resize(ColumnSize:=1).offset(ColumnOffset:=Column - 1)
        If cell.value = value Then
            Set SearchNameInColumn = cell
            GoTo subend
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.SearchNameInColumn error:"
    Resume subend
End Function

Public Function OcurrencesOfNameInColumn(Column As Integer, value As String) As Integer
    Dim cell As Range
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "OcurrencesOfNameInColumn"

    i = 0
    For Each cell In ValuesRange.Resize(ColumnSize:=1).offset(ColumnOffset:=Column - 1)
        If cell.value = value And value <> "" Then
            i = i + 1
        End If
    Next
    OcurrencesOfNameInColumn = i

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.OcurrencesOfNameInColumn error:"
    Resume subend
End Function


Public Function GetFreeRange() As Range
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "GetFreeRange"

    For i = firstrow To lastrow
        If IsRowEmpty(i) Then
            Set GetFreeRange = m_TableRange.Worksheet.Range(m_TableRange.Worksheet.Cells(i, FirstCol), m_TableRange.Worksheet.Cells(i, LastCol))
            GoTo subend
        End If
    Next
    AddRow
    Set GetFreeRange = m_TableRange.Worksheet.Range(m_TableRange.Worksheet.Cells(lastrow, FirstCol), m_TableRange.Worksheet.Cells(lastrow, LastCol))

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.GetFreeRange error:"
    Resume subend
End Function

Public Function InsertRow_Clicked(Target As Range, Optional PerfomanceHandling As Boolean = True) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "InsertRow_Clicked"
    
    If PerfomanceHandling Then
        
    End If
    
    If Not m_TableRange Is Nothing Then
        If CanInsert(Target) Then
            InsertRow Target.row
            If ActiveCell.EntireRow.Hidden Then ActiveCell.offset(-1).Activate
            InsertRow_Clicked = True
        End If
    End If

subend:
    If PerfomanceHandling Then
        
    End If
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.TableInsertRow_Clicked error:"
    Resume subend
End Function

Public Function DeleteRow_Clicked(Target As Range, Optional PerfomanceHandling As Boolean = True) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "DeleteRow_Clicked"
    
    If PerfomanceHandling Then
        
    End If
    
    If Not m_TableRange Is Nothing Then
        If CanDelete(Target) Then
            If appQOCMsg(appGetLOCText("DeleteRow")) = vbOK Then
                DeleteRow Target
                If ActiveCell.EntireRow.Hidden Then ActiveCell.offset(-1).Activate
                DeleteRow_Clicked = True
            End If
        End If
    End If

subend:
    If PerfomanceHandling Then
        
    End If
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.DeleteRow_Clicked error:"
    Resume subend
End Function

Public Function Sort_Clicked(Target As Range, SortOrder As XlSortOrder) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "Sort_Clicked"
    
    
    If Not m_TableRange Is Nothing Then
        Sort Target, SortOrder
        Sort_Clicked = True
    End If

subend:
    
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.Sort_Clicked error:"
    Resume subend
End Function

Public Sub SetFormat_Clicked(Column As Integer, Settings As Collection, Optional bSingleCol As Boolean = False)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "SetFormat_Clicked"
    
    
    If Not m_TableRange Is Nothing Then
        SetFormat Column, Settings, bSingleCol
    End If

subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.SetFormat_Clicked error:"
    Resume subend
End Sub

Public Sub ClearFormat_Clicked()
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "ClearFormat_Clicked"
    
    
    If Not m_TableRange Is Nothing Then
        ClearFormat
    End If

subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.ClearFormat_Clicked error:"
    Resume subend
End Sub


Public Sub Autofilter_Clicked(iRowOffset As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "Autofilter_Clicked"
    
    If Not m_TableRange Is Nothing Then
        m_TableRange.offset(0, 1).Resize(m_TableRange.rows.Count - iRowOffset, m_TableRange.Columns.Count - 2).Autofilter
    End If

subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.Autofilter_Clicked error:"
    Resume subend
End Sub

Public Function IsInTable(Target As Range)
    On Error GoTo suberr
'    modStack.PushCallStack "TPGTable", "IsInTable"

    IsInTable = InRange(Target, ValuesRange)

subend:
'    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.IsInTable error:"
    Resume subend
End Function

Public Function Mergedfit(Target As Range) As Boolean
    Dim mr As TPGMergeRange
    Dim col As Collection
    Dim current As Single
    Dim max As Single
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "Mergedfit"

    If IsInTable(Target) Then
        Set col = GetMergedCells
        If col.Count > 0 Then
            For Each mr In col
                current = AutoFitMergedCell(m_TableRange.Worksheet.Cells(Target.row, mr.StartCol), m_DefaultRowHeight)
                If current > max Then max = current
            Next
            'modified to fix printing bug
            Target.EntireRow.RowHeight = max + DEFAULTHEIGHT * PERCPIXADJ 'added to fix merged autofit
        End If
        If Not m_SideTable Is Nothing Then
            Set col = m_SideTable.GetMergedCells
            If col.Count > 0 Then
                For Each mr In col
                    current = AutoFitMergedCell(m_TableRange.Worksheet.Cells(Target.row, mr.StartCol), m_DefaultRowHeight)
                    If current > max Then max = current
                Next
                Target.EntireRow.RowHeight = max
                'modified to fix printing bug
                Target.EntireRow.RowHeight = max + DEFAULTHEIGHT * PERCPIXADJ 'added to fix merged autofit
            End If
        End If
        Mergedfit = True
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.Mergedfit error:"
    Resume subend
End Function

Private Sub UnmergeCells()
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "UnmergeCells"

    ValuesRange.UnMerge

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.UnmergeCells error:"
    Resume subend
End Sub

Private Sub MergeCells(MergeRanges As Collection)
    Dim i As Integer
    Dim j As Integer
    Dim mr As TPGMergeRange
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "MergeCells"

    For i = firstrow To lastrow
        j = 0
        For Each mr In MergeRanges
            j = mr.StartCol
            m_TableRange.Worksheet.Range(m_TableRange.Worksheet.Cells(i, mr.StartCol), m_TableRange.Worksheet.Cells(i, mr.EndCol)).Merge
        Next
        If j > 0 Then Mergedfit m_TableRange.Worksheet.Cells(i, j)
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.MergeCells error:"
    Resume subend
End Sub


'This code was added to work on cells not merged but requires wrapping
Public Function CellAutoFit(Target As Range) As Boolean
    Dim max As Single
    On Error GoTo suberr
    
    If IsInTable(Target) And Not bAutoFit Then
        Target.EntireRow.AutoFit
        If m_DefaultRowHeight > Target.RowHeight Then
            Target.RowHeight = m_DefaultRowHeight
            max = m_DefaultRowHeight
        Else
            max = Target.RowHeight
        End If
        Target.RowHeight = max + DEFAULTHEIGHT * PERCPIXADJ 'added to fix merged autofit
        CellAutoFit = True
        bAutoFit = True
    End If
    
subend:
'    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTable.CellAutoFit error:"
    Resume subend
End Function


'added for SALK
Public Sub DeSerializeSkipFormulas(cols As Variant, Values As String, Optional Delimiter As String = "|")
    Dim nrOfRows As Integer
    Dim nrOfCols As Integer
    Dim valuesArray As Variant
    Dim i As Integer
    Dim row As Range
    Dim c As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTable", "DeSerializeSkipFormulas"

    valuesArray = Split(Values, Delimiter)
    If UBound(valuesArray) < 0 Then GoTo subend
    nrOfCols = UBound(cols) + 1
    nrOfRows = UBound(valuesArray) / nrOfCols
    
    clear
    GrowUntil (nrOfRows)
    i = 0
    For Each row In ValuesRange.rows
        For Each c In cols
            If Not row.Cells(columnIndex:=c).hasFormula Then
                row.Cells(columnIndex:=c).value = valuesArray(i)
            End If
            i = i + 1
            If i >= UBound(valuesArray) Then GoTo subend
        Next
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTable.DeSerializeSkipFormulas error:"
    Resume subend
End Sub


Rem SUBPROJECT-RELATED
Public Function GetUsedRange() As Range
    Dim i As Integer
'    Set GetUsedRange = m_TableRange.Worksheet.Range(m_TableRange.Worksheet.Cells(firstRow, FirstCol), m_TableRange.Worksheet.Cells(firstRow, LastCol))
    For i = firstrow To lastrow
        If Not IsRowEmpty(i) Then
            Set GetUsedRange = m_TableRange.Worksheet.Range(m_TableRange.Worksheet.Cells(firstrow, FirstCol), m_TableRange.Worksheet.Cells(i, LastCol))
'            Exit Function
        End If
    Next
End Function


Attribute VB_Name = "TPGTask"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Const TaskLevelRangeName As String = "plan.TaskTemplateLevel_"

Public TaskRowIndex As Integer
Private planWorksheet As Worksheet
Public iRowsToInsert As Integer


Public Function GetChildren() As TPGTask()
End Function

Public Function IsMilestone() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "isMilestone"

    If (planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.TypColumn").Column).Text = "M") Then
        IsMilestone = True
    Else
        IsMilestone = False
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.isMilestone error:"
    Resume subend
End Function


'Added for SALK
Public Function IsFilter() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "IsFilter"

    If (planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.FilterColumn").Column).Text <> "") Then
        IsFilter = True
    Else
        IsFilter = False
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.IsFilter error:"
    Resume subend
End Function

Public Function IsWP() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "IsWP"

    If (planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.TypColumn").Column).Text = "W") Then
        IsWP = True
    Else
        IsWP = False
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.IsWP error:"
    Resume subend
End Function

Public Function IsRootTask() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "IsRootTask"

    If GetUID = "" Then
        IsRootTask = True
    Else
        IsRootTask = False
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.IsRootTask error:"
    Resume subend
End Function


Public Function HasData() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "HasData"

    HasData = False
    With planWorksheet
        If (.Cells(TaskRowIndex, .Range("Plan.WorkBaseColumn").Column).value <> 0) Or _
           (.Cells(TaskRowIndex, .Range("Plan.WorkChangeColumn").Column).value <> 0) Or _
           (.Cells(TaskRowIndex, .Range("Plan.WorkActualColumn").Column).value <> 0) Or _
           (.Cells(TaskRowIndex, .Range("Plan.CostTotalBaseColumn").Column).value <> 0) Or _
           (.Cells(TaskRowIndex, .Range("Plan.CostTotalChangeColumn").Column).value <> 0) Or _
           (.Cells(TaskRowIndex, .Range("Plan.CostTotalActualColumn").Column).value <> 0) Then
           HasData = True
        End If
    End With

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.HasData error:"
    Resume subend
End Function


Public Function GetLevel() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetLevel"

    If (TaskRowIndex > -1) Then
        If (IsEmpty(planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.LevelColumn").Column).value)) Then
            GetLevel = -1
        Else
            GetLevel = planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.LevelColumn").Column).value
        End If
    Else
        GetLevel = -1
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetLevel error:"
    Resume subend
End Function

Public Sub SetLevel(level As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetLevel"

    planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.LevelColumn").Column).value = level
    IndentTaskName level

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetLevel error:"
    Resume subend
End Sub

Public Sub SetLevelWithoutFormat(level As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetLevelWithoutFormat"

    planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.LevelColumn").Column).value = level
    IndentTaskName level

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetLevelWithoutFormat error:"
    Resume subend
End Sub

Public Function GetWeight() As Double
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetWeight"

    GetWeight = GetCellValue("Plan.WeightingColumn")

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetWeight error:"
    Resume subend
End Function

Public Sub FormatRow(level As Integer, typ As String, formatOnly As Boolean)
    Dim currentSelection As Range
    Dim wpSpec As String
    Dim bhidden As Boolean
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "FormatRow"

    wpSpec = GetWPSpec
    Set currentSelection = ActiveCell
       
    Dim x As Range
    If (typ = "W" Or typ = "M") Then
        Set x = GetTaskRow(typ)
    Else
        Set x = GetTaskRow(VBA.Trim(CStr(level)))
    End If
    x.Copy
    
    Dim y As Range
    Set y = planWorksheet.rows(rowIndex:=TaskRowIndex).EntireRow
    bhidden = y.Hidden
    If (formatOnly) Then
        ClearArrayFormulas y
        y.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        SetArrayFormulas y, x
        SetLevelWithoutFormat level
    Else
        Dim TaskName As String
        Dim TaskProgress As Integer
        Dim taskStatus As String
        Dim taskUID As String
        Dim taskExtId As String
        Dim taskWeight As Double
        
        TaskName = GetTaskName
        TaskProgress = GetProgress
        taskWeight = GetWeight
        taskStatus = GetStatus
        taskUID = GetUID
        taskExtId = GetExtId
        x.Copy y
        SetTaskName TaskName
        SetStatus taskStatus
        If (typ = "M") Or (typ = "W") Then
            SetProgress TaskProgress
        End If
        SetWeighting taskWeight
        SetUid taskUID
        SetExtId taskExtId
        SetLevelWithoutFormat level
    End If
    SetWPSpec wpSpec
    y.Hidden = bhidden
        
    currentSelection.Select

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.FormatRow error:"
    Resume subend
End Sub

Public Function IsProjectSummaryTask() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "IsProjectSummaryTask"

    IsProjectSummaryTask = (TaskRowIndex = Plan.Range("Plan.ProjectHeader").row)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.IsProjectSummaryTask error:"
    Resume subend
End Function

Public Function isSummarytask() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "isSummarytask"

    If (planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.TypColumn").Column).Text = "S") Then
        isSummarytask = True
    Else
        isSummarytask = False
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.isSummarytask error:"
    Resume subend
End Function

Public Function IsPhase() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "IsPhase"

    If GetLevel = 1 Then
        IsPhase = True
    Else
        IsPhase = False
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.IsPhase error:"
    Resume subend
End Function

Public Function HasExtId() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "HasExtId"

    HasExtId = GetExtId <> ""

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.HasExtId error:"
    Resume subend
End Function

Public Function GetExtId() As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetExtId"

    GetExtId = GetCellValue("Plan.ExtIdColumn")

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetExtId error:"
    Resume subend
End Function

Public Function GetUID(Optional WithoutSpecials As Boolean = False) As String
    Dim s As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetUID"

    If WithoutSpecials Then
        s = GetCellValue("Plan.UIDColumn")
        s = StGuidWithoutSpecials(s)
    Else
        s = GetCellValue("Plan.UIDColumn")
    End If
    GetUID = s

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetUID error:"
    Resume subend
End Function

Public Sub SetExtId(extId As String)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetExtId"

    planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.ExtIdColumn").Column).value = extId

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetExtId error:"
    Resume subend
End Sub

Public Sub SetUid(uid As String)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetUid"

    planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.UIDColumn").Column).value = uid

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetUid error:"
    Resume subend
End Sub

Public Sub SetIndex(rowIndex As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetIndex"

    TaskRowIndex = rowIndex

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetIndex error:"
    Resume subend
End Sub

Public Function FindInPlan(pspcode As String) As Boolean
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "FindInPlan"

    Set R = Plan.Range("Plan.WBSColumn").Find(pspcode)
    If Not R Is Nothing Then
        SetIndex R.row
        FindInPlan = True
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.FindInPlan error:"
    Resume subend
End Function

Public Function FindInPlanByUId(ByVal uid As String) As Boolean
    Dim c As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "FindInPlanByUId"

    For Each c In Plan.Range(Intersect(Plan.Range("Plan.UidColumn"), Plan.Range("Plan.ProjectHeader")), Intersect(Plan.Range("Plan.UidColumn"), Plan.Range("Plan.ProjectFooter")))
        If c.value = uid Then
            SetIndex c.row
            FindInPlanByUId = True
            GoTo subend
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.FindInPlanByUId error:"
    Resume subend
End Function

Public Function FindInPlanByExtId(ByVal extId As String) As Boolean
    Dim c As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "FindInPlanByExtId"

    For Each c In Plan.Range(Intersect(Plan.Range("Plan.ExtIdColumn"), Plan.Range("Plan.ProjectHeader")), Intersect(Plan.Range("Plan.ExtIdColumn"), Plan.Range("Plan.ProjectFooter")))
        If c.value = extId Then
            SetIndex c.row
            FindInPlanByExtId = True
            GoTo subend
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.FindInPlanByExtId error:"
    Resume subend
End Function

Public Function GetWBS() As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetWBS"

    GetWBS = Trim(planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.WBSColumn").Column).Text)
    If (GetWBS = "") Then GetWBS = "0"

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetWBS error:"
    Resume subend
End Function

Public Function GetTyp() As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetTyp"

    GetTyp = planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.TypColumn").Column).Text

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetTyp error:"
    Resume subend
End Function

Public Function GetWPSpec() As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetWPSpec"

    GetWPSpec = planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.WPSpecColumn").Column).Text

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetWPSpec error:"
    Resume subend
End Function

Public Function GetKeyMST() As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetKeyMST"

    GetKeyMST = planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.KeyMSTColumn").Column).Text

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetKeyMST error:"
    Resume subend
End Function

Public Function GetResponsible() As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetResponsible"

    GetResponsible = planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.ResponsibleColumn").Column).Text

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetResponsible error:"
    Resume subend
End Function


Public Function GetWBSParent() As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetWBSParent"

    If (GetWBS = "") Then
        GetWBSParent = "1"
    ElseIf (InStr(1, GetWBS, ".") >= 1) Then
        GetWBSParent = VBA.Mid(GetWBS, 1, InStrRev(GetWBS, ".")) 'planWorksheet.Cells(TaskRowIndex, Range("Plan.WBSParentColumn").Column).Text
    Else
        GetWBSParent = GetWBS
    End If
    'If (GetWBSParent = "") Then GetWBSParent = "1"

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetWBSParent error:"
    Resume subend
End Function

Public Function InsertTask(milestone As Boolean) As TPGTask
    Dim taskRow As Range
    Dim newTask As TPGTask
    Dim upperTask As TPGTask
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "InsertTask"

    Set newTask = New TPGTask
    Set upperTask = New TPGTask
    Dim WBSParent As String
    Dim newWbsElementLevel As Integer
    
    upperTask.SetIndex TaskRowIndex - 1
        
    If (upperTask.GetLevel = 0) Then
        newWbsElementLevel = 1
        WBSParent = upperTask.GetWBSParent
    ElseIf (upperTask.GetLevel <= GetLevel) Then
        newWbsElementLevel = GetLevel
        WBSParent = GetWBSParent
    Else
        newWbsElementLevel = upperTask.GetLevel
        WBSParent = upperTask.GetWBSParent
    End If
    
    If (Not milestone) Then
        Set taskRow = GetTaskRow("W") 'GetTaskRow(vba.trim(CStr(newWbsElementLevel)))
    Else
        Set taskRow = GetTaskRow("M")
    End If

    Dim aRange As Range
    
    'irgendwie umstaendlich, oder? nur um die zeile TaskRowIndex auszuwaehlen...
    Set aRange = planWorksheet.rows(TaskRowIndex).EntireRow
    'aRange.Insert xlShiftDown
    
    
    '-------------------------------------------------------------------------------
    CellFunctions.InsertWrapped aRange, Shift:=xlShiftDown      '<- slow, ca. 4 secs
    '-------------------------------------------------------------------------------
    
    
    taskRow.Copy destination:=planWorksheet.rows(TaskRowIndex)
    planWorksheet.rows(TaskRowIndex).Hidden = False
    newTask.SetIndex TaskRowIndex
    SetIndex TaskRowIndex + 1
    
    newTask.SetUid StGuidGen ' Application.Range("plan.TaskMaxUID").Value + 1
    newTask.SetLevelWithoutFormat newWbsElementLevel

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.InsertTask error:"
    Resume subend
End Function

Public Sub IndentTask()
    Dim upperTask As TPGTask
    Dim newLevel As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "IndentTask"

    Set upperTask = New TPGTask
    upperTask.SetIndex TaskRowIndex - 1
    If upperTask.GetTyp <> "S" And upperTask.GetTyp <> "P" Then
        newLevel = GetLevel + 1
        'If (GetLevel <> -1 And GetLevel <= upperTask.GetLevel And upperTask.GetTyp <> "M") Then
        If (GetLevel <> -1 And GetLevel <= upperTask.GetLevel + 1) Then
            SetLevel newLevel
            
            If (newLevel > upperTask.GetLevel) Then
                upperTask.FormatRow newLevel - 1, "S", False
                'upperTask.IndentTaskName newLevel - 1
            End If
        
            If Me.GetTyp = "S" Then
                Me.FormatRow newLevel, "S", True
            End If
            
            Dim i As Integer
            Dim eol As Integer
            Dim iTask As TPGTask
            Set iTask = New TPGTask
            eol = planWorksheet.Range("Plan.ProjectFooter").row
            For i = TaskRowIndex + 1 To eol - 1
                iTask.SetIndex i
                If (iTask.GetLevel >= newLevel) Then
                    iTask.SetLevel iTask.GetLevel + 1
                Else
                    Exit For
                End If
            Next i
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.IndentTask error:"
    Resume subend
End Sub

Public Sub OutdentTask()
    Dim newLevel As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "OutdentTask"

    newLevel = GetLevel - 1
    If (newLevel > 0) Then
        SetLevel newLevel

        Dim upperTask As TPGTask
        Set upperTask = New TPGTask
        upperTask.SetIndex TaskRowIndex - 1
        If (newLevel + 1 > upperTask.GetLevel) Then
            upperTask.FormatRow upperTask.GetLevel, "W", False
            'upperTask.IndentTaskName upperTask.GetLevel
            'planWorksheet.Cells(upperTask.TaskRowIndex, Range("Plan.BaselineStartColumn").Column).ClearContents
        End If

        If Me.GetTyp = "S" Then
            Me.FormatRow newLevel, "S", True
        End If
        
        Dim i As Integer
        Dim eol As Integer
        Dim iTask As TPGTask
        Set iTask = New TPGTask
        eol = planWorksheet.Range("Plan.ProjectFooter").row
        For i = TaskRowIndex + 1 To eol - 1
            iTask.SetIndex i
            If (iTask.GetLevel > newLevel + 1) Then
                iTask.SetLevel iTask.GetLevel - 1
            ElseIf (iTask.GetLevel = newLevel + 1) Then
                FormatRow newLevel, "S", False
                'IndentTaskName newLevel
                Exit For
            Else
                Exit For
            End If
        Next i
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.OutdentTask error:"
    Resume subend
End Sub

'Public Function DeleteTask() As Boolean
'    On Error GoTo SubErr
'    modStack.PushCallStack "TPGTask", "DeleteTask"
'
'    DeleteTask = False
'    If (TaskRowIndex > planWorksheet.Range("Plan.ProjectHeader").Row And TaskRowIndex < planWorksheet.Range("Plan.ProjectFooter").Row) Then
'        If (appQOCMsg(appGetLOCText("questiondeletetask")) = vbOK) Then
'            If (GetTyp = "S") Then
'                Dim startToDeleteIndex As Integer
'                Dim endToDeleteIndex As Integer
'                startToDeleteIndex = TaskRowIndex
'                endToDeleteIndex = TaskRowIndex
'                Dim i As Integer
'                Dim eol As Integer
'                Dim currentLevel As Integer
'                currentLevel = GetLevel
'                Dim iTask As TPGTask
'                Set iTask = New TPGTask
'                eol = planWorksheet.Range("Plan.ProjectFooter").Row
'                For i = TaskRowIndex + 1 To eol - 1
'                    iTask.SetIndex i
'                    If (iTask.GetLevel > currentLevel) Then
'                        endToDeleteIndex = i
'                    Else
'                        Exit For
'                    End If
'                Next i
'                planWorksheet.Range(planWorksheet.rows(startToDeleteIndex).EntireRow, planWorksheet.rows(endToDeleteIndex).EntireRow).Delete xlShiftUp
'                DeleteTask = True
'            Else
'                planWorksheet.rows(rowIndex:=TaskRowIndex).Delete xlShiftUp
'                DeleteTask = True
'            End If
'        End If
'    End If
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "TPGTask.DeleteTask error:"
'    Resume SubEnd
'End Function

Public Sub IndentTaskName(level As Integer)
    Dim taskNameRange As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "IndentTaskName"

    Set taskNameRange = planWorksheet.Cells(TaskRowIndex, planWorksheet.Range("Plan.TaskNameColumn").Column)
    If (level > 15) Then level = 15
    If (taskNameRange.IndentLevel <> level) Then
        taskNameRange.IndentLevel = level
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.IndentTaskName error:"
    Resume subend
End Sub


Private Sub Class_Initialize()
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "Class_Initialize"

    Set planWorksheet = ThisWorkbook.Sheets("Plan")
    TaskRowIndex = -1

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.Class_Initialize error:"
    Resume subend
End Sub

Private Function GetTaskRow(level As String) As Range
    Dim rangename As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetTaskRow"

    If (level = "W") Then
        rangename = TaskLevelRangeName + level
    ElseIf (level = "M") Then
        rangename = TaskLevelRangeName + level
    Else
        If (CInt(level) > 5) Then level = "5"
        rangename = TaskLevelRangeName + level
    End If
    Set GetTaskRow = Application.Range(rangename).EntireRow

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetTaskRow error:"
    Resume subend
End Function

Public Sub SetAsMilestone()
    Dim typ As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetAsMilestone"

    typ = GetTyp()
    If (typ = "W" Or typ = "M") Then
        If (typ = "W") Then
            typ = "M"
            SetProgress 0
        ElseIf (typ = "M") Then
            typ = "W"
        End If
        FormatRow GetLevel(), typ, False
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetAsMilestone error:"
    Resume subend
End Sub

Public Sub SetTaskHidden(taskHidden As Boolean)
    Dim taskRow As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetTaskHidden"

    Set taskRow = planWorksheet.rows(rowIndex:=TaskRowIndex).EntireRow
    taskRow.Hidden = taskHidden

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetTaskHidden error:"
    Resume subend
End Sub

Public Function isHidden() As Boolean
    Dim taskRow As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "isHidden"

    Set taskRow = planWorksheet.rows(rowIndex:=TaskRowIndex).EntireRow
    isHidden = taskRow.Hidden

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.isHidden error:"
    Resume subend
End Function

Public Function GetRootParentIndex() As Integer
    Dim currenttask As TPGTask
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetRootParentIndex"

    Set currenttask = New TPGTask
    currenttask.SetIndex TaskRowIndex
    While (currenttask.GetLevel > 1)
        currenttask.SetIndex currenttask.TaskRowIndex - 1
    Wend
    GetRootParentIndex = currenttask.TaskRowIndex

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetRootParentIndex error:"
    Resume subend
End Function

Public Function GetCell(columnRangeName As String) As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetCell"

    Set GetCell = planWorksheet.Cells(TaskRowIndex, Range(columnRangeName).Column)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetCell error:"
    Resume subend
End Function

Public Function GetCell2(columnIndex As Integer) As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetCell2"

    Set GetCell2 = planWorksheet.Cells(TaskRowIndex, columnIndex)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetCell2 error:"
    Resume subend
End Function

Public Function GetCellValue2(columnIndex As Integer) As Variant
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetCellValue2"

    GetCellValue2 = planWorksheet.Cells(TaskRowIndex, columnIndex).value

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetCellValue2 error:"
    Resume subend
End Function

Public Function SetCellFormula(columnRangeName As String, formula As String, Optional CheckLock As Boolean = False)
    Dim currentCell As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetCellFormula"

    Set currentCell = GetCell(columnRangeName)
    If CheckLock Then
        If Not currentCell.locked Then currentCell.FormulaR1C1 = formula
    Else
        currentCell.FormulaR1C1 = formula
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.SetCellFormula error:"
    Resume subend
End Function

Public Sub SetCellValue(columnRangeName As String, anyValue As Variant, Optional CheckLock As Boolean = False, Optional CheckFormula As Boolean = False)
    Dim currentCell As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetCellValue"

    Set currentCell = GetCell(columnRangeName)
    If CheckFormula And currentCell.hasFormula Then GoTo subend
    If CheckLock And currentCell.locked Then GoTo subend
    
    currentCell.value = anyValue

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetCellValue error:"
    Resume subend
End Sub

Public Sub SetCellDate(columnRangeName As String, aDate As Date)
    ' to avoid if the date is 0 that '01.01.1900' is displayed
    Dim currentCell As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetCellDate"

    Set currentCell = GetCell(columnRangeName)
    If aDate = 0 Then
        currentCell.value = ""
    Else
        currentCell.value = aDate
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetCellDate error:"
    Resume subend
End Sub


Public Sub SetCellValue2(columnIndex As Integer, anyValue As Variant, Optional CheckLock As Boolean = False)
    Dim currentCell As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetCellValue2"

    Set currentCell = GetCell2(columnIndex)
    If TypeName(anyValue) = "String" Then anyValue = CastStringToVar(CStr(anyValue))
    If CheckLock Then
        If Not currentCell.locked Then currentCell.value = (anyValue)
    Else
        currentCell.value = (anyValue)
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetCellValue2 error:"
    Resume subend
End Sub

Public Function GetCellValue(columnRangeName As String) As Variant
    Dim currentCell As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetCellValue"

    Set currentCell = GetCell(columnRangeName) 'planWorksheet.Cells(TaskRowIndex, Range(columnRangeName).Column)
    GetCellValue = currentCell.value

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetCellValue error:"
    Resume subend
End Function

Public Function GetTaskName() As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetTaskName"

    GetTaskName = GetCellValue("Plan.TaskNameColumn")

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetTaskName error:"
    Resume subend
End Function

Public Function GetProgress() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetProgress"

    GetProgress = GetCellValue("Plan.ProgressColumn")

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetProgress error:"
    Resume subend
End Function

Public Function GetStatus() As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetStatus"

    GetStatus = GetCellValue("Plan.StatusColumn")

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetStatus error:"
    Resume subend
End Function

Public Function GetBaseValueCell(valuessettype As String, Name As String) As Range
    Dim R As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetBaseValueCell"

    Select Case VBA.LCase(valuessettype)
        Case "work":
            Set R = SearchNameInRange(Plan.Range("Plan.WorkTypeNameRange"), Name)
        Case "cost":
            Set R = SearchNameInRange(Plan.Range("Plan.WorkCostNameRange"), Name)
            If R Is Nothing Then
                Set R = SearchNameInRange(Plan.Range("Plan.CostNameRange"), Name)
            End If
    End Select
    If Not R Is Nothing Then
        Set GetBaseValueCell = Plan.Cells(TaskRowIndex, R.Column)
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetBaseValueCell error:"
    Resume subend
End Function

Public Sub SetTaskName(TaskName As String)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetTaskName"

    GetCell("Plan.TaskNameColumn").value = TaskName

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetTaskName error:"
    Resume subend
End Sub

Public Sub SetProgress(Progress As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetProgress"

    GetCell("Plan.ProgressColumn").value = Progress

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetProgress error:"
    Resume subend
End Sub

Public Sub SetWeighting(weighting As Double)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetWeighting"

    GetCell("Plan.WeightingColumn").value = weighting

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetWeighting error:"
    Resume subend
End Sub

Public Function MoveDates(days As Integer) As Boolean
    Dim showMessage As Boolean
    Dim baseline As String
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "MoveDates"

    showMessage = False
    
    baseline = ""
    If Plan.IsBaselineSet Then baseline = "Baseline"
    
    If (IsMilestone Or IsWP) And HasStartDate Then
        If GetCell("Plan." & baseline & "StartColumn").hasFormula Then
            showMessage = True
        Else
            SetCellValue "Plan." & baseline & "StartColumn", GetStartDate() + days, True
        End If
    End If
    If IsWP And HasFinishDate Then
        If GetCell("Plan." & baseline & "FinishColumn").hasFormula Then
            showMessage = True
        Else
            SetCellValue "Plan." & baseline & "FinishColumn", GetFinishDate() + days, True
        End If
    End If
    MoveDates = showMessage

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.MoveDates error:"
    Resume subend
End Function

'Public Sub SetDates(start As Date, finish As Date, blStart As Date, blFinish As Date)
'    If IsWP Then
'        SetCellValue "Plan.StartColumn", start, True
'        SetCellValue "Plan.BaselineStartColumn", blStart, True
'        SetCellValue "Plan.FinishColumn", finish, True
'        SetCellValue "Plan.BaselineFinishColumn", blFinish, True
'    End If
'End Sub

Public Sub SetStatus(Status As String)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetStatus"

    GetCell("Plan.StatusColumn").value = Status

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetStatus error:"
    Resume subend
End Sub

Public Sub SetKeyMST(skeymst As String)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetKeyMST"

    GetCell("Plan.KeyMSTColumn").value = skeymst

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetKeyMST error:"
    Resume subend
End Sub


'Added for SALK
Public Sub SetFilter(filter As String)
    GetCell("Plan.FilterColumn").value = filter
End Sub


Public Sub SetWPSpec(wpSpec As String)
    Dim wpSpecCell As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetWPSpec"
    
    wpSpec = CastStringToVar(wpSpec)
    Set wpSpecCell = GetCell("Plan.WPSpecColumn")
    If wpSpec = "x" Then
        wp.ShowWPSpecAsX wpSpecCell
    Else
        wp.ShowWPSpecAsList wpSpecCell, wpSpec
    End If

subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetWPSpec error:"
    Resume subend
End Sub

Public Sub SetBaseline()
    Dim i As Integer
    Dim forecastDistCol As Integer
    Dim forecastColIndex As Integer
    Dim changeDistCol As Integer
    Dim changeColIndex As Integer
    Dim baseColIndex As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetBaseline"
    
    'modified for SALK
    'forecastDistCol = 4
    forecastDistCol = 5
    changeDistCol = 1
    
    Dim baseColumnsIndexes() As Integer
    Dim WorkTypesCount As Integer
    Dim CostTypesCount As Integer
    
    ' initalize basecolumnsarray
    If Range("Plan.WorktypeNameRange").Columns.Count > 2 Then
        WorkTypesCount = getRange(Plan, "Plan.WorkTypeNameRange", 1, -2, 0, 1).Columns.Count / 5
    Else
        WorkTypesCount = 0
    End If
    
    If Range("Plan.CostNameRange").Columns.Count > 2 Then
        'modified for SALK
        'CostTypesCount = getRange(Plan, "Plan.CostNameRange", 1, -2, 0, 1).Columns.Count / 5
        CostTypesCount = getRange(Plan, "Plan.CostNameRange", 1, -2, 0, 1).Columns.Count / 6
    Else
        CostTypesCount = 0
    End If
    
    ReDim baseColumnsIndexes(WorkTypesCount + CostTypesCount + 2)
    
    ' fill work template + basecolumns
    baseColumnsIndexes(1) = planWorksheet.Range("Plan.WorkTemplate").Column
    For i = 1 To WorkTypesCount
        baseColumnsIndexes(i + 1) = baseColumnsIndexes(1) + 6 + (i - 1) * 5
    Next
    
    ' fill cost template + basecolumns
    baseColumnsIndexes(2 + WorkTypesCount) = planWorksheet.Range("Plan.CostTemplate").Column
    For i = 1 To CostTypesCount
        'modified for SALK
        'baseColumnsIndexes(i + 2 + WorkTypesCount) = baseColumnsIndexes(2 + WorkTypesCount) + 6 + (i - 1) * 5
        baseColumnsIndexes(i + 2 + WorkTypesCount) = baseColumnsIndexes(2 + WorkTypesCount) + 7 + (i - 1) * 6
    Next


    If (GetTyp = "W" Or GetTyp = "M") Then
        GetCell("Plan.BaselineStartColumn").FormulaR1C1 = GetCell("Plan.StartColumn").FormulaR1C1
        If (GetTyp = "W") Then
            GetCell("Plan.BaselineFinishColumn").FormulaR1C1 = GetCell("Plan.FinishColumn").FormulaR1C1
            For i = 1 To UBound(baseColumnsIndexes)
                baseColIndex = baseColumnsIndexes(i)
             
                forecastColIndex = baseColIndex + forecastDistCol
                SetCellValue2 baseColIndex, 0 'GetCellValue2(forecastColIndex) '[AXDE]v3 bug fix
                changeColIndex = baseColIndex + changeDistCol
                SetCellValue2 changeColIndex, 0
            Next i
        End If
        
        LockBaseline True
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetBaseline error:"
    Resume subend
End Sub

Public Sub LockBaseline(locked As Boolean)
    Dim baseColIndex As Integer
    Dim i As Integer
    Dim baseColumnsIndexes() As Integer
    Dim WorkTypesCount As Integer
    Dim CostTypesCount As Integer
    
    ' initalize basecolumnsarray
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "LockBaseline"

    If planWorksheet.Range("Plan.WorkTypeNameRange").Columns.Count > 2 Then
        WorkTypesCount = getRange(Plan, "Plan.WorkTypeNameRange", 1, -2, 0, 1).Columns.Count / 5
    End If
    'modified for SALK
    If planWorksheet.Range("Plan.CostNameRange").Columns.Count > 2 Then
        CostTypesCount = getRange(Plan, "Plan.CostNameRange", 1, -2, 0, 1).Columns.Count / 6
    End If
'    If planWorksheet.Range("Plan.CostNameRange").Columns.Count > 2 Then
'        CostTypesCount = getRange(Plan, "Plan.CostNameRange", 1, -2, 0, 1).Columns.Count / 5
'    End If
    ReDim baseColumnsIndexes(WorkTypesCount + CostTypesCount + 2)
    
    ' fill work template + basecolumns
    baseColumnsIndexes(1) = planWorksheet.Range("Plan.WorkTemplate").Column
    For i = 1 To WorkTypesCount
        baseColumnsIndexes(i + 1) = baseColumnsIndexes(1) + 6 + (i - 1) * 5
    Next
    
    ' fill cost template + basecolumns
    baseColumnsIndexes(2 + WorkTypesCount) = planWorksheet.Range("Plan.CostTemplate").Column
    'modified for SALK
    For i = 1 To CostTypesCount
        baseColumnsIndexes(i + 2 + WorkTypesCount) = baseColumnsIndexes(2 + WorkTypesCount) + 7 + (i - 1) * 6
    Next
'    For i = 1 To CostTypesCount
'        baseColumnsIndexes(i + 2 + WorkTypesCount) = baseColumnsIndexes(2 + WorkTypesCount) + 6 + (i - 1) * 5
'    Next

    If (GetTyp = "W") Then
        For i = 1 To UBound(baseColumnsIndexes)
            baseColIndex = baseColumnsIndexes(i)
            LockCell GetCell2(baseColIndex), locked
            LockCell GetCell2(baseColIndex + 1), Not locked
        Next i
    End If
    
    If (GetTyp = "W" Or GetTyp = "M") Then
        
        LockCell GetCell("Plan.BaselineStartColumn"), locked
        LockCell GetCell("Plan.StartColumn"), Not locked
        
        If (GetTyp = "W") Then
            LockCell GetCell("Plan.BaselineFinishColumn"), locked
            LockCell GetCell("Plan.FinishColumn"), Not locked
        End If
        
        'baseline110716   only when baseline was NOT saved before we set the values
        If Not Plan.BaselineSavedBefore Then
            If (locked) Then
    '            x = GetCellValue("Plan.StartColumn")
    '            GetCell("Plan.StartColumn").formula = ""
    '            GetCell("Plan.StartColumn").value = x
    ' 041115 bugfix, err mit formular1c1               GetCell("Plan.StartColumn").FormulaR1C1 = GetCell("Plan.BaselineStartColumn").FormulaR1C1
                    GetCell("Plan.StartColumn").FormulaR1C1 = GetCell("Plan.BaselineStartColumn").FormulaR1C1
                    'GetCell("Plan.StartColumn").Value = GetCell("Plan.BaselineStartColumn").Value
                If (GetTyp = "W") Then
    '                x = GetCellValue("Plan.FinishColumn")
    '                GetCell("Plan.FinishColumn").formula = ""
    '                GetCell("Plan.FinishColumn").value = x
    ' 041115 bugfix, err mit formular1c1                GetCell("Plan.FinishColumn").FormulaR1C1 = GetCell("Plan.BaselineFinishColumn").FormulaR1C1
                    GetCell("Plan.FinishColumn").FormulaR1C1 = GetCell("Plan.BaselineFinishColumn").FormulaR1C1
                    'GetCell("Plan.FinishColumn").Value = GetCell("Plan.BaselineFinishColumn").Value
                End If
            Else
                Dim sHelp As String
                sHelp = "offset(" + CellFunctions.GetFirstColumnLetter(planWorksheet.Range("Plan.StartColumn")) + VBA.Trim(CStr(TaskRowIndex)) + ",0,-3)"
                GetCell("Plan.StartColumn").formula = "=if(" + sHelp + "<>""""," + sHelp + ","""")"
                If (GetTyp = "W") Then
                    sHelp = "offset(" + CellFunctions.GetFirstColumnLetter(planWorksheet.Range("Plan.FinishColumn")) + VBA.Trim(CStr(TaskRowIndex)) + ",0,-3)"
                    GetCell("Plan.FinishColumn").formula = "=if(" + sHelp + "<>""""," + sHelp + ","""")"
                End If
            End If
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.LockBaseline error:"
    Resume subend
End Sub

Public Function GetStartDate() As Date
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetStartDate"

    If GetCellValue("Plan.StartColumn") <> "" Then
        GetStartDate = GetCellValue("Plan.StartColumn")
        GetStartDate = DateSerial(DatePart("yyyy", GetStartDate), DatePart("m", GetStartDate), DatePart("d", GetStartDate))
    End If
end_function:

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetStartDate error:"
    Resume subend
End Function

Public Function GetFinishDate() As Date
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetFinishDate"

    If (GetTyp = "M") Then
        If GetCellValue("Plan.StartColumn") = "" Then GoTo subend
        GetFinishDate = GetCellValue("Plan.StartColumn")
    Else
        If GetCellValue("Plan.FinishColumn") = "" Then GoTo subend
        GetFinishDate = GetCellValue("Plan.FinishColumn")
    End If
    GetFinishDate = DateSerial(DatePart("yyyy", GetFinishDate), DatePart("m", GetFinishDate), DatePart("d", GetFinishDate))

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetFinishDate error:"
    Resume subend
End Function

Public Function GetBaselineStartDate() As Date
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetBaselineStartDate"

    If GetCellValue("Plan.BaselineStartColumn") = "" Then GoTo subend
    GetBaselineStartDate = GetCellValue("Plan.BaselineStartColumn")
    GetBaselineStartDate = DateSerial(DatePart("yyyy", GetBaselineStartDate), DatePart("m", GetBaselineStartDate), DatePart("d", GetBaselineStartDate))

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetBaselineStartDate error:"
    Resume subend
End Function

Public Function GetBaselineFinishDate() As Date
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetBaselineFinishDate"

    If (GetTyp = "M") Then
        If GetCellValue("Plan.BaselineStartColumn") = "" Then GoTo subend
        GetBaselineFinishDate = GetCellValue("Plan.BaselineStartColumn")
    Else
        If GetCellValue("Plan.BaselineFinishColumn") = "" Then GoTo subend
        GetBaselineFinishDate = GetCellValue("Plan.BaselineFinishColumn")
    End If
    GetBaselineFinishDate = DateSerial(DatePart("yyyy", GetBaselineFinishDate), DatePart("m", GetBaselineFinishDate), DatePart("d", GetBaselineFinishDate))

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetBaselineFinishDate error:"
    Resume subend
End Function

Public Function GetEarliestStartDate() As Date
    Dim StartDate As Date
    Dim BaselineStartDate As Date
    
    On Error GoTo subend
    modStack.PushCallStack "TPGTask", "GetEarliestStartDate"

    StartDate = GetStartDate
    BaselineStartDate = GetBaselineStartDate
    
    If BaselineStartDate < StartDate Then
        GetEarliestStartDate = BaselineStartDate
    Else
        GetEarliestStartDate = StartDate
    End If
    
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetEarliestStartDate error:"
    Resume subend
End Function

Public Function GetLatestFinishDate() As Date
    Dim FinishDate As Date
    Dim BaselineFinishDate As Date
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetLatestFinishDate"

    FinishDate = GetFinishDate
    BaselineFinishDate = GetBaselineFinishDate
    
    If BaselineFinishDate > FinishDate Then
        GetLatestFinishDate = BaselineFinishDate
    Else
        GetLatestFinishDate = FinishDate
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetLatestFinishDate error:"
    Resume subend
    
End Function


Public Function HasStartDate() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "HasStartDate"

    HasStartDate = IsDate(GetCellValue("Plan.StartColumn"))

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.HasStartDate error:"
    Resume subend
End Function

Public Function HasFinishDate() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "HasFinishDate"

    If (GetTyp = "M") Then
        HasFinishDate = IsDate(GetCellValue("Plan.StartColumn"))
    Else
        HasFinishDate = IsDate(GetCellValue("Plan.FinishColumn"))
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.HasFinishDate error:"
    Resume subend
End Function
Public Function HasBaselineStartDate() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "HasBaselineStartDate"

    HasBaselineStartDate = IsDate(GetCellValue("Plan.BaselineStartColumn"))

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.HasBaselineStartDate error:"
    Resume subend
End Function

Public Function HasBaselineFinishDate() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "HasBaselineFinishDate"

    If (GetTyp = "M") Then
        HasBaselineFinishDate = IsDate(GetCellValue("Plan.BaselineStartColumn"))
    Else
        HasBaselineFinishDate = IsDate(GetCellValue("Plan.BaselineFinishColumn"))
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.HasBaselineFinishDate error:"
    Resume subend
End Function

Public Function GetID() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetID"

    GetID = GetCellValue("Plan.IDColumn")

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetID error:"
    Resume subend
End Function

Public Function GetRowOffset() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "GetRowOffset"

    GetRowOffset = GetCellValue("Plan.RowOffsetColumn")

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.GetRowOffset error:"
    Resume subend
End Function

Public Function Valid() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "Valid"

    Valid = True
        
    If IsWP Then
        If Not IsDate(GetCellValue("Plan.StartColumn")) Then Valid = False
        If Not IsDate(GetCellValue("Plan.FinishColumn")) Then Valid = False
        'If Not IsDate(GetCellValue("Plan.BaselineStartColumn")) Then Valid = False
        'If Not IsDate(GetCellValue("Plan.BaselineFinishColumn")) Then Valid = False
        If Valid Then
            If GetStartDate > GetFinishDate Then Valid = False
            'If GetBaselineStartDate > GetBaselineFinishDate Then Valid = False
        End If
    ElseIf IsMilestone Then
        If Not IsDate(GetCellValue("Plan.StartColumn")) Then Valid = False
        'If Not IsDate(GetCellValue("Plan.BaselineStartColumn")) Then Valid = False
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTask.Valid error:"
    Resume subend
End Function






Rem SUBPROJECT-RELATED
Public Function FindPrevious() 'As Boolean
    SetIndex TaskRowIndex - 1
'    FindPrevious = True
End Function

Public Function FindSubProject(projNr As String) As Boolean
    Dim c As Range
    For Each c In Plan.Range(Intersect(Plan.Range("Plan.ExtIdColumn"), Plan.Range("Plan.ProjectHeader")), Intersect(Plan.Range("Plan.ExtIdColumn"), Plan.Range("Plan.ProjectFooter")))
        If ExtIdIsSubProject(c.value, projNr) Then
            SetIndex c.row
            FindSubProject = True
            Exit Function
        End If
    Next
End Function


Private Function ExtIdIsSubProject(extId As String, projNr As String) As Boolean
    Dim x As Collection
    Dim s As Variant

    Set x = New Collection

    ExtIdIsSubProject = False

    If extId = "" Then
        Exit Function
    End If

    For Each s In Split(extId, " | {Path ")
        x.Add s
    Next

    If x.Count = 2 Then
        If x(1) = projNr Then
            ExtIdIsSubProject = True
        End If
    End If
End Function

Public Function GetFullTaskName() As String
    GetFullTaskName = GetCellValue("Plan.WPs")
End Function

Public Function DeleteTask(Optional confirm As Boolean = True) As Boolean
    DeleteTask = False
    If Not (TaskRowIndex > planWorksheet.Range("Plan.ProjectHeader").row And TaskRowIndex < planWorksheet.Range("Plan.ProjectFooter").row) Then Exit Function
    If confirm Then If (appQOCMsg(appGetLOCText("questiondeletetask")) <> vbOK) Then Exit Function
    If (GetTyp = "S") Then
        Dim startToDeleteIndex As Integer
        Dim endToDeleteIndex As Integer
        startToDeleteIndex = TaskRowIndex
        endToDeleteIndex = TaskRowIndex
        Dim i As Integer
        Dim eol As Integer
        Dim currentLevel As Integer
        currentLevel = GetLevel
        Dim iTask As TPGTask
        Set iTask = New TPGTask
        eol = planWorksheet.Range("Plan.ProjectFooter").row
        For i = TaskRowIndex + 1 To eol - 1
            iTask.SetIndex i
            If (iTask.GetLevel > currentLevel) Then
                endToDeleteIndex = i
            Else
                Exit For
            End If
        Next i
        planWorksheet.Range(planWorksheet.rows(startToDeleteIndex).EntireRow, planWorksheet.rows(endToDeleteIndex).EntireRow).Delete xlShiftUp
        DeleteTask = True
    Else
        planWorksheet.rows(rowIndex:=TaskRowIndex).Delete xlShiftUp
        DeleteTask = True
    End If
End Function

Public Sub SetDescription(taskDescription As String)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTask", "SetDescription"

    GetCell("Plan.DescriptionColumn").value = taskDescription

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTask.SetDescription error:"
    Resume subend
End Sub
Attribute VB_Name = "TPGTeam"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public IsInitialized As Boolean
Public members As TPGMembers
Public deps As Collection

Private Sub Class_Initialize()
    On Error GoTo suberr
    modStack.PushCallStack "TPGTeam", "Class_Initialize"

    IsInitialized = False
    Set deps = New Collection
    Set members = New TPGMembers

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTeam.Class_Initialize error:"
    Resume subend
End Sub

Public Sub AddDepartment(Name As String)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTeam", "AddDepartment"

    If Not DepartmentExists(Name) Then
        deps.Add Name, Name
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTeam.AddDepartment error:"
    Resume subend
End Sub

Public Sub RemoveDepartment(Name As String)
    On Error GoTo suberr
    modStack.PushCallStack "TPGTeam", "RemoveDepartment"

    If DepartmentExists(Name) Then deps.Remove Name

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTeam.RemoveDepartment error:"
    Resume subend
End Sub

Private Function DepartmentExists(Name As String) As Boolean
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTeam", "DepartmentExists"

    For i = 1 To deps.Count
        If deps(i) = Name Then
            DepartmentExists = True
            GoTo subend
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTeam.DepartmentExists error:"
    Resume subend
End Function

Public Function DepartmentCount() As Integer
    DepartmentCount = deps.Count
End Function

Public Function MembersOfDepartment(Name As String) As Integer
    Dim i As Integer
    Dim member As TPGMember
    Dim p As String
    Dim m As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTeam", "MembersOfDepartment"

    p = appGetLOCText("role_participant")
    m = appGetLOCText("role_member")
    For i = 1 To members.Count
        Set member = members.member(i)
        'modified for SALK
        If member.department = Name And (LCase(member.Role) = LCase(m) Or LCase(member.Role) = LCase(p)) Then
            MembersOfDepartment = MembersOfDepartment + 1
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTeam.MembersOfDepartment error:"
    Resume subend
End Function

Public Function MembersOfSubteam(Name As String) As Integer
    Dim i As Integer
    Dim member As TPGMember
    Dim p As String
    Dim m As String
    On Error GoTo suberr
    modStack.PushCallStack "TPGTeam", "MembersOfSubteam"

    p = appGetLOCText("role_participant")
    m = appGetLOCText("role_member")
    For i = 1 To members.Count
        Set member = members.member(i)
        If member.Subteam = Name And (member.Role = m Or member.Role = p) Then
            MembersOfSubteam = MembersOfSubteam + 1
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTeam.MembersOfSubteam error:"
    Resume subend
End Function

Public Function MaxOrgChartHeightSubteam(indexfrom As Integer, indexto As Integer)
    Dim i As Integer
    Dim h As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTeam", "MaxOrgChartHeightSubteam"

    MaxOrgChartHeightSubteam = 0
    For i = indexfrom To indexto
        h = SubTeamOrgChartHeight(deps(i))
        If h > MaxOrgChartHeightSubteam Then MaxOrgChartHeightSubteam = h
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTeam.MaxOrgChartHeightSubteam error:"
    Resume subend
End Function

Public Function SubTeamOrgChartHeight(subTeamName As String) As Integer
    Dim m As Integer
    Dim p As Integer
    Dim OrgChartHeight As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTeam", "SubTeamOrgChartHeight"

    OrgChartHeight = 0
    
    m = GetMembers(appGetLOCText("role_member"), Subteam:=subTeamName).Count
    p = GetMembers(appGetLOCText("role_participant"), Subteam:=subTeamName).Count
    If m + p > 0 Then
        SubTeamOrgChartHeight = 1
        If m > 0 Then SubTeamOrgChartHeight = SubTeamOrgChartHeight + m + 2
        If p > 0 Then SubTeamOrgChartHeight = SubTeamOrgChartHeight + p + 2
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTeam.SubTeamOrgChartHeight error:"
    Resume subend
End Function

Public Function MaxOrgChartHeight(indexfrom As Integer, indexto As Integer)
    Dim i As Integer
    Dim h As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGTeam", "MaxOrgChartHeight"

    MaxOrgChartHeight = 0
    For i = indexfrom To indexto
        h = DepartmentOrgChartHeight(deps(i))
        If h > MaxOrgChartHeight Then MaxOrgChartHeight = h
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTeam.MaxOrgChartHeight error:"
    Resume subend
End Function

'Public Function GetMembers(Optional RoleName As String = "$", Optional department As String = "$") As Collection
'    Dim returnValue As Collection
'    Dim Add As Boolean
'    Dim member As TPGMember
'    Dim i As Integer
'
'    Set returnValue = New Collection
'    For i = 1 To members.count
'        Add = True
'        Set member = members.member(i)
'        If RoleName <> "$" And member.role <> RoleName Then Add = False
'        If Add = True And department <> "$" And member.department <> department Then Add = False
'        If Add = True Then returnValue.Add member, member.guid
'    Next
'
'    Set GetMembers = returnValue
'End Function

Public Function GetMembers(Optional RoleName As String = "$", Optional department As String = "$", Optional Subteam As String = "$") As Collection
    Dim ReturnValue As Collection
    Dim Add As Boolean
    Dim member As TPGMember
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTeam", "GetMembers"

    Set ReturnValue = New Collection
    For i = 1 To members.Count
        Add = True
        Set member = members.member(i)
        If RoleName <> "$" And LCase(member.Role) <> LCase(RoleName) Then Add = False
        If Add = True And department <> "$" And member.department <> department Then Add = False
        If Add = True And Subteam <> "$" And member.Subteam <> Subteam Then Add = False
        If Add = True Then ReturnValue.Add member, member.GUID
    Next
    
    Set GetMembers = ReturnValue

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTeam.GetMembers error:"
    Resume subend
End Function

Public Function DepartmentOrgChartHeight(DepartmentName As String) As Integer
    Dim m As Integer
    Dim p As Integer
    Dim OrgChartHeight As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "TPGTeam", "DepartmentOrgChartHeight"

    OrgChartHeight = 0
    
    m = GetMembers(appGetLOCText("role_member"), DepartmentName).Count
    p = GetMembers(appGetLOCText("role_participant"), DepartmentName).Count
    If m + p > 0 Then
        DepartmentOrgChartHeight = 1
        If m > 0 Then DepartmentOrgChartHeight = DepartmentOrgChartHeight + m + 2
        If p > 0 Then DepartmentOrgChartHeight = DepartmentOrgChartHeight + p + 2
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGTeam.DepartmentOrgChartHeight error:"
    Resume subend
End Function

Public Sub SyncToPlan(Optional Sorted As Boolean = True)
    Dim idRange As Range
    Dim RoleIds As Range
    Dim i As Integer
    Dim sortedMembers As Collection
        
    'Delete all unnecassry rolecolumns
    On Error GoTo suberr
    modStack.PushCallStack "TPGTeam", "SyncToPlan"

    Set RoleIds = Plan.Range("Plan.Roles")
    If RoleIds.Columns.Count > 2 Then
        Set RoleIds = getRange(Plan, "Plan.Roles", 1, -2, Plan.Range("Plan.ProjectHeader").row - 5, 1)
        For i = RoleIds.Columns.Count - 1 To 0 Step -1
            If Not RoleIds.Columns.Count + i + RoleIds.Column > 256 Then
'                AppInfoMsg "Plan: " + appGetLOCText("excelRangeExceeded")
'            Else
                Set idRange = RoleIds.offset(0, i).Resize(1, 1) ' this fails if RoleIds.Columns.Count + i > 256
                If idRange.value = "" Or Not members.MemberIdExists(idRange.value) Then
                    idRange.EntireColumn.Delete
                    'MoveControlsHorizontally Plan, -1, "R", 25
                End If
            End If
        Next
    End If
    
    'unperformant
    If Sorted Then
        Set sortedMembers = FlexiSortCollection(GetMembers)
        
        Dim iActionCount As Integer
        Dim bCountUp As Boolean
        If sortedMembers.Count > RoleIds.Columns.Count Then
            iActionCount = sortedMembers.Count
        Else
            For i = 1 To sortedMembers.Count
                If RoleIds.Cells(1, i) <> sortedMembers(i).GUID Then bCountUp = True
                If sortedMembers(i).TeamOrder <= 20 And sortedMembers(i).TeamOrder <> i Then bCountUp = True
                If RoleIds.Cells(1, i).offset(2, 0) <> sortedMembers(i).Name Then bCountUp = True
                If bCountUp Then iActionCount = iActionCount + 1
            Next
        End If
        
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
            If iActionCount > 1 Then modStack.ShowProgressBar iActionCount, "Synchronizing Team", "CellFunctions.InsertWrapped"
        End If
        
        For i = 1 To sortedMembers.Count
            Dim bSyncNeeded As Boolean
            
            'different guid -> New Sync
            If RoleIds.Cells(1, i) <> sortedMembers(i).GUID Then bSyncNeeded = True
            'different TeamOrder -> New Sync
            If sortedMembers(i).TeamOrder <= 20 And sortedMembers(i).TeamOrder <> i Then bSyncNeeded = True
            'different name -> New Sync or just change name?
            If RoleIds.Cells(1, i).offset(2, 0).Text <> sortedMembers(i).Name Then bSyncNeeded = True
                
            'sort all remaining items, regardless of guid/name/teamorder
            '-> don't set bSyncNeeded to false again
            If bSyncNeeded Then sortedMembers(i).SyncToPlan
        Next
    Else
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then modStack.ShowProgressBar members.Count, "Synchronizing Team", "TPGMember.SyncToPlan"         ' "CellFunctions.InsertWrapped"
        For i = 1 To members.Count
            members.member(i).SyncToPlan
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGTeam.SyncToPlan error:"
    Resume subend
End Sub


Attribute VB_Name = "TPGTeam2"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private cMembers As Collection
Private cColumns As Collection
Private cKeys As Collection
Private oWorkSheet As Worksheet
Private rMembers As Range

Public Event EvtInitSuccessful(Team As TPGTeam2)
Public Event EvtSynchronize(Team As TPGTeam2)
Public Event EvtMemberBeforeDeletion(member As TPGMember2)
Public Event EvtMemberAdded(member As TPGMember2)
Public Event EvtAssertGUIDs()

Private Sub Class_Initialize()
    Set cMembers = New Collection
    Set cColumns = New Collection
    Set cKeys = New Collection
    Set oWorkSheet = Team
    Set rMembers = Team.rGUIDs
    InitColumns
    InitMembers
'    Set modConst.oTeam = Me
'    Plan.GetTeam
'    Team.GetTeam
'    RaiseEvent EvtInitSuccessful(Me)
End Sub

Private Sub Class_Terminate()
    Set cMembers = Nothing
    Set cColumns = Nothing
    Set cKeys = Nothing
End Sub

Function NewEnum() As IUnknown
Attribute NewEnum.VB_UserMemId = -4
Attribute NewEnum.VB_MemberFlags = "40"
    Set NewEnum = cMembers.[_NewEnum]
End Function

Private Sub InitColumns()
    Dim n As Name
    Dim sCurrentName As String

    For Each n In ThisWorkbook.Names
        If Left(n.Name, 5) = "Team." Then
            If Right(n.Name, 6) = "Column" Then
                sCurrentName = Replace(n.Name, "Team.", "")
                sCurrentName = Replace(sCurrentName, "Column", "")
                If Not InStr(n.RefersTo, "#REF") > 0 Then
                    cColumns.Add n.RefersToRange.Column, sCurrentName
                    cKeys.Add sCurrentName, CStr(n.RefersToRange.Column)
                End If
            End If
        End If
    Next
End Sub

Private Sub InitMembers()
    Dim rCell As Range
    Dim member As TPGMember2
    
    'eher auf namensspalte gehen? manchmal existiert ja eine GUID noch nicht zwangslaeufig
    For Each rCell In rMembers
        If rCell.value <> "" Or Team.Cells(rCell.row, Team.Range("Team.NameColumn").Column).value <> "" Then
            Set member = New TPGMember2
            member.Init rCell, Me
            If member("GUID") = "" Then member.GetGUID
            cMembers.Add member, member("GUID")
        End If
    Next
End Sub

Public Property Get member(index As Variant) As TPGMember2
Attribute member.VB_UserMemId = 0
    Set member = cMembers(index)
End Property

Public Property Get LoadedFromMemory() As Boolean
    LoadedFromMemory = Me(1).LoadedFromMemory
End Property

Public Property Get Count() As Integer
    Count = cMembers.Count
End Property

Public Property Get Column(ColumnName As String) As Integer
    On Error GoTo suberr
    Column = CInt(cColumns(ColumnName))
subend:
    Exit Property
suberr:
    Debug.Print "there is no column with the name " & ColumnName
    Column = -1
End Property

Public Property Get key(ColumnNo As Integer) As String
    On Error GoTo suberr
    key = cKeys(CInt(ColumnNo))
subend:
    Exit Property
suberr:
    Debug.Print "there is element associated wit the key " & ColumnNo
    key = Empty
End Property

Public Property Get AllColumns() As Collection
    Set AllColumns = cColumns
End Property
Public Property Get AllKeys() As Collection
    Set AllKeys = cKeys
End Property

Public Property Get ToString() As String
    Dim t As New TPGTokenizer
    Dim tCols As New TPGTokenizer
    Dim TKeys As New TPGTokenizer
    Dim member As TPGMember2
    
    t.Delimiter = "|fffd|"
    tCols.FromCollection cColumns
    TKeys.FromCollection cKeys
    t.Add tCols.ToString
    t.Add TKeys.ToString
    
    For Each member In cMembers
        t.Add member.ToString
    Next
    ToString = t.ToString
    
End Property

Public Sub FromString(TokenString As String)
    Dim t As New TPGTokenizer
    Dim tCols As New TPGTokenizer
    Dim TKeys As New TPGTokenizer
    Dim member As TPGMember2
    Dim i As Integer
    
    t.Delimiter = "|fffd|"
    t.FromString TokenString
    If t.Count < 3 Then Exit Sub
    
    Set cMembers = New Collection
    Set cColumns = Nothing
    Set cKeys = Nothing
    
    tCols.FromString t(1)
    TKeys.FromString t(2)
    Set cColumns = tCols.ToCollection
    Set cKeys = TKeys.ToCollection
    
    For i = 3 To t.Count
        Set member = New TPGMember2
        member.FromString t(i), TKeys
        Set member.Parent = Me
        cMembers.Add member, member("GUID")
    Next
    
End Sub
Attribute VB_Name = "TPGToDoItem"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public nr As Integer
Public showInStatus As Boolean
Public correspEvent As String
Public issueDate As Date
Public Status As String
Public subject As String
Public action As String
Public Responsible As String
Public dueDate As Date

Private Enum TableCols
'see also the Actions code this enum should match the one there
   icNumber = 3
   icShowInStatus
   icevent
   icdate
   icsubject
   ictodo
   icResponsible
   icDueDate
   icstatus
End Enum


Public Sub LoadFromTable(lineNr As Integer)
    ' instanciate an action object from the Actions sheet
    On Error GoTo suberr
    modStack.PushCallStack "TPGToDoItem", "LoadFromTable"

    nr = Actions.Cells(lineNr, icNumber).value
    showInStatus = Actions.Cells(lineNr, icShowInStatus) = "x"
    correspEvent = Actions.Cells(lineNr, icevent).value
    issueDate = Actions.Cells(lineNr, icdate).value
    Status = Actions.Cells(lineNr, icstatus).value
    subject = Actions.Cells(lineNr, icsubject).value
    action = Actions.Cells(lineNr, ictodo).value
    Responsible = Actions.Cells(lineNr, icResponsible).value
    dueDate = Actions.Cells(lineNr, icDueDate).value

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGToDoItem.LoadFromTable error:"
    Resume subend
End Sub
Attribute VB_Name = "TPGTokenizer"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Tokens As Collection
Private sDelimiter As String

Private Sub Class_Initialize()
    Set Tokens = New Collection
    Delimiter = "|"
End Sub

Private Sub Class_Terminate()
    Set Tokens = Nothing
End Sub

Public Property Get value() As Collection
Attribute value.VB_UserMemId = 0
    Set value = Tokens
End Property

Public Property Let Delimiter(Character As String)
    sDelimiter = Character
End Property

Public Sub Add(Token As Variant)
    If InStr(Token, sDelimiter) > 0 Then
        Debug.Print "TPGTokenizer: incompatible character within token <" & Token & ">: " & sDelimiter
        Token = Replace(Token, sDelimiter, " ")
    End If
    Tokens.Add CStr(Token)
End Sub

Public Property Get Count() As Integer
    Count = Tokens.Count
End Property

Public Property Get Item(index As Integer) As Variant
    Item = Tokens(index)
End Property

Public Property Get Delimiter() As String
    Delimiter = sDelimiter
End Property

Public Sub clear()
    Set Tokens = New Collection
End Sub

Public Function Pop() As String
    Pop = Tokens(Tokens.Count)
    Tokens.Remove (Tokens.Count)
End Function

Public Property Get Contains(Token As String)
    Dim v As Variant
    For Each v In Tokens
        If CStr(v) = Token Then
            Contains = True
            Exit Property
        End If
    Next
End Property

Public Property Get ToString() As String
    Dim Token As Variant
    Dim sResult As String
    Dim bStarted As Boolean
    For Each Token In Tokens
        If sResult = "" And bStarted = False Then
            sResult = CStr(Token)
            bStarted = True
        Else
            sResult = sResult & sDelimiter & CStr(Token)
        End If
    Next
    ToString = sResult
End Property

Public Sub FromString(TokenString As String)
    Dim v As Variant
    Dim i As Integer
    Me.clear
    v = Split(TokenString, sDelimiter)
    For i = 0 To UBound(v)
        Tokens.Add v(i)
    Next
End Sub

Public Sub ToRange(FirstCell As Range, Optional Horizontal As Boolean = False) ', Optional NoDirection As Boolean = False)
    Dim Token As Variant
    Dim rCell As Range
    Dim i As Integer
    Dim j As Integer
    
    
'    If NoDirection Then
'        i = i
'        For Each rCell In FirstCell
'            rCell.value = Tokens(i)
'            i = i + 1
'        Next
'        Exit Sub
'    End If
    
    If FirstCell.Cells.Count > 1 Then
        i = 1
        For Each rCell In FirstCell
            If IsNumeric(Tokens(i)) Then
                rCell.value = CDbl(Tokens(i))
            Else
                rCell.value = Tokens(i)
            End If
            i = i + 1
            'If rCell.MergeArea.Cells.Count > 1 Then i = i + rCell.MergeArea.Cells.Count - 1
        Next
    Else
        For Each Token In Tokens
            FirstCell.offset(i, j).NumberFormat = "@"
            FirstCell.offset(i, j).value = Token
            If Horizontal Then
                j = j + 1
            Else
                i = i + 1
            End If
        Next
    End If
    
End Sub

Public Sub FromRange(R As Range)
    Me.clear
    Dim rCell As Range
    For Each rCell In R
        Me.Add rCell.Text
    Next
End Sub


Public Property Get ToCollection() As Collection
    Set ToCollection = Tokens
End Property

Public Sub FromCollection(Collection As Collection)
    Dim i As Integer
    Me.clear
    For i = 1 To Collection.Count
        Me.Add Collection(i)
    Next
End Sub

Public Sub Delete(iIndex As Integer)
 Tokens.Remove (iIndex)
End Sub

Public Sub FromRangeNoBlanks(R As Range)
    Me.clear
    Dim rCell As Range
    For Each rCell In R
        If rCell.value <> "" And Not Me.Contains(rCell.value) Then
            Me.Add rCell.Text
        End If
    Next
End Sub

Public Property Get GetIndex(Token As String)
    Dim v As Variant
    Dim i As Integer 'zero-based index
    i = 0
    For Each v In Tokens
        If CStr(v) = Token Then
            GetIndex = i
            Exit Property
        End If
        i = i + 1
    Next
    GetIndex = -1
End Property

'Added for Plan Date WP Relations
Public Sub FromArray(Collection As Variant)
    Dim i As Integer
    Me.clear
    For i = 0 To UBound(Collection)
        Me.Add Collection(i)
    Next
End Sub

'added for copypaste module
Public Sub FromStringNoBlanks(TokenString As String)
    Dim v As Variant
    Dim i As Integer
    Me.clear
    v = Split(TokenString, sDelimiter)
    For i = 0 To UBound(v)
        If Len(v(i)) > 0 Then
            Tokens.Add v(i)
        End If
    Next
End Sub

Attribute VB_Name = "TPGUIHandler"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module    : TPGUIHandler
' Author    : wm
' Date      : 15.03.2011
' Purpose   : an object that - upon creation - sets the workbook into editable state and
'             - upon termination - resets it into user-mode state.
'---------------------------------------------------------------------------------------

Option Explicit

Private InitSht As Worksheet
Private Const sExcelPwd = "qwertz123456UIOP|fffd|*/()=?"
Private objApp As Excel.Application
Private sinittime As String
'Private sInitProc As String


'---------------------------------------------------------------------------------------
' Class_Initialize
' puts the workbook into editable state by removing
' protection and disabling screenupdating, etc.
' @date     02.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub Class_Initialize()
    Dim sht As Worksheet
    
    On Error GoTo suberr
    
    Set objApp = Excel.Application
    
    If LOGGING_ENABLED Then sinittime = TimeStamp(4)
    
    'set application settings
    objApp.Cursor = xlDefault ' xlWait
    objApp.ScreenUpdating = False
    objApp.EnableCancelKey = xlErrorHandler ' = xlDisabled '= xlErrorHandler
    objApp.DisplayAlerts = False
    'objApp.EnableEvents = False
    objApp.StatusBar = False
    objApp.DisplayStatusBar = True
    
    Set InitSht = ActiveSheet
    
    If (Application.Calculation <> xlCalculationManual) Then Application.Calculation = xlCalculationManual
    
'131015 due to uionly protection we dont need to unprotect
'for separate cases an unprotect is performed separately
'    '18.07.13
'    If (modStack.sInitProc <> "modApp.PrepareWorkbook") And _
'        (InStr(modStack.sInitProc, "Worksheet_Activate") <= 0) Then
'        UnProtectWS InitSht
'    End If
    
'131015 this was a performance killer!
'    ThisWorkbook.Unprotect sExcelPwd
    
    
    'ActiveWindow.DisplayWorkbookTabs = False

subend:
    
    Exit Sub
suberr:
    If err.Number = 18 Then
    End If
    Resume subend
End Sub

'---------------------------------------------------------------------------------------
' Class_Terminate
'
' puts the workbook into user interaction mode by
' setting protection and enabling screenupdating, etc.
' @date     02.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub Class_Terminate()
    Dim sht As Worksheet
    On Error Resume Next
    
    If Not DEV_MODE Then
        If Not modApp.ProtectionRemoved Then
            '131015
            'ThisWorkbook.Protect sExcelPwd, True
            '18.07.13
            If (modStack.sInitProc <> "modApp.PrepareWorkbook") And _
                (InStr(modStack.sInitProc, "Worksheet_Activate") <= 0) Then
'131015
'                ProtectWS InitSht
                'when we are still on the initsheet then ensureuiprotection
                'it is possible that we already changed to another sheet, in that case this is not needed
                If Application.ActiveSheet.CodeName = InitSht.CodeName Then
                    EnsureUIProtection InitSht
                Else
If DEBUG_MODE Then Debug.Print "UI.Terminate: skip uiprotect for " + InitSht.CodeName
                End If
            End If
        End If
    End If
    
    If (Application.Calculation <> xlCalculationAutomatic) Then Application.Calculation = xlCalculationAutomatic
    'reset application settings
    
    'objApp.EnableEvents = True
    objApp.DisplayAlerts = True
    objApp.Cursor = xlDefault
    objApp.StatusBar = False
    objApp.ScreenUpdating = True
    objApp.EnableCancelKey = xlInterrupt
    
    '131015 ensure WP protection
    If Not DEV_MODE Then
        If Not modApp.ProtectionRemoved Then
            If Not ThisWorkbook.ProtectStructure Then SetWBProtection True
        End If
    End If

    'log elapsed time to console
    If LOGGING_ENABLED Then
        Dim s As String
        Dim i As Integer
        For i = 20 To Len(ActiveSheet.CodeName) Step -1: s = s & " ": Next
        log ActiveSheet.CodeName & ":" & s & sInitProc & " finished, time elapsed: " & GetTimeInMSDiff(sinittime, TimeStamp(4))
    End If

End Sub

Public Property Let InitialProcName(ProcName As String)
    sInitProc = ProcName
End Property

Private Sub ProtectWS(sht As Worksheet)
    If sht.ProtectContents Then Exit Sub 'already protected
If DEBUG_MODE Then Debug.Print "UIHandler.ProtectWS " + sht.Name
    If GetCustomProperty(sht, "KeepUnprotected") = "True" Then Exit Sub
'    If sht.CodeName = "Admin" Or sht.CodeName = "MTA" Then ' allow cell formatting
    If (sht.CodeName = "Admin") Or ((sht.CodeName = "Team") And (ModuleExists("PersonalPlanning"))) Or (sht.CodeName = "MTA") Then ' allow cell formatting
        sht.Protect , True, True, True, False, True, False, False, False, False, True, False, False, False, True
    Else
        sht.Protect , True, True, True, False, False, False, False, False, False, True, False, False, False, True
    End If
End Sub

Private Sub UnProtectWS(sht As Worksheet)
    If Not sht.ProtectContents Then Exit Sub 'already protected
If DEBUG_MODE Then Debug.Print "UIHandler.UnProtectWS " + sht.Name
    sht.Unprotect 'sExcelPwd
End Sub











Attribute VB_Name = "TPGValueColor"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public value As String
Public Color As Long
Attribute VB_Name = "TPGWorkByDay"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private oParent As TPGWorkCostElement
Private eCategory As phbWorkCostCategory
Private cWorkByDay As Collection

Public Sub Init(Parent As TPGWorkCostElement, Category As phbWorkCostCategory)
    Set oParent = Parent
    eCategory = Category
    Populate
End Sub

Public Property Get Parent() As TPGWorkCostElement
    Set Parent = oParent
End Property

Public Property Get Category() As phbWorkCostCategory
    Category = eCategory
End Property

Public Property Get Count() As Long
    Count = cWorkByDay.Count
End Property

Public Sub List()
    Dim iStart As Long:         iStart = CLng(oParent.Parent("Start"))
    Dim iFinish As Long:        iFinish = CLng(oParent.Parent("Finish"))
    Dim i As Long
    For i = iStart To iFinish
        Debug.Print CDate(i) & ": " & cWorkByDay(CStr(i))
    Next
End Sub
    

Private Sub Populate()
    Set cWorkByDay = New Collection
    Dim iStart As Long:         iStart = CLng(oParent.Parent("Start"))
    Dim iFinish As Long:        iFinish = CLng(oParent.Parent("Finish"))
    Dim dDailyVal As Double:    dDailyVal = oParent.value(eCategory) / oParent.Parent.Duration
    Dim i As Long
    'Dim iWorkingDays As Long
    
'    For i = iStart To iFinish
'        If Weekday(CDate(i), vbMonday) < 6 Then
'            iWorkingDays = iWorkingDays + 1
'        End If
'    Next
    

    For i = iStart To iFinish
        cWorkByDay.Add dDailyVal, CStr(i)
    Next
    
End Sub
Attribute VB_Name = "TPGWorkCostElement"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private oParent As Object
Private sname As String
Private rTarget As Range

Public Sub Init(Parent As Object, Target As Range)
    If Parent Is Nothing Then Exit Sub
    If Target Is Nothing Then Exit Sub
    Set oParent = Parent
'    Select Case TypeName(oParent)
'        Case "TPGProjectTask":  Set rTarget = Intersect(Parent.EntireRow, Target.MergeArea.EntireColumn)
'        Case "TPGProject":      set rTarget =
'    End Select
    Set rTarget = Intersect(Parent.EntireRow, Target.MergeArea.EntireColumn)
End Sub

Public Property Get Parent() As Object
    Set Parent = oParent
End Property

Public Property Get Target() As Range
    Set Target = rTarget
End Property

Public Property Get value(Category As phbWorkCostCategory) As Double
    'Value = rTarget.Cells(Category)
    value = WorksheetFunction.sum(rTarget.Columns(Category))
End Property

Public Property Let value(Category As phbWorkCostCategory, val As Double)
    rTarget.Cells(Category).value = val
End Property

Public Property Get WorkByDay(Category As phbWorkCostCategory) As TPGWorkByDay
    Dim wbd As New TPGWorkByDay
    wbd.Init Me, Category
    Set WorkByDay = wbd
End Property
Attribute VB_Name = "TPGWorkType"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Name As String
Public CostTypeName As String
Public CostRate As Single
Public ContractWork As Single
Public BaseWork As Single
Public LoadedFrom As Range

Public IsPerson As Boolean
Public department As String
Public GUID As String

Public cTaskAssignments As Collection

Public Sub SyncToPlan()
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkType", "SyncToPlan"

    Set R = FindInPlan
    If R Is Nothing Then
        AddToPlan
    Else
        UpdateInPlan R
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGWorkType.SyncToPlan error:"
    Resume subend
End Sub

Public Function FindInPlan() As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkType", "FindInPlan"

    Set FindInPlan = SearchNameInRange(Plan.Range("Plan.WorkTypeNameRange"), Name)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGWorkType.FindInPlan error:"
    Resume subend
End Function

'Public Function FindInContract() As range
'    Set FindInContract = SearchNameInRange(GetRange(Contract, "Contract.Resources", -5, 1, 3, 2), Name)
'End Function

Public Function FindInWP() As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkType", "FindInWP"

    Set FindInWP = wp.GetWorkTable.SearchNameInColumn(1, Name)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGWorkType.FindInWP error:"
    Resume subend
End Function

Public Sub UpdateInPlan(namerange As Range)
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkType", "UpdateInPlan"

    If namerange.value <> Name Then namerange.value = Name
    If IsPerson Then
        Dim i As Integer
        Dim R As Range
        Set R = namerange.MergeArea.Cells(1, 1).offset(-1, 0)
        For i = 0 To namerange.MergeArea.Columns.Count - 1
            R.offset(0, i).value = R.offset(2, i).value & "_" & CostTypeName
            R.offset(-1, i).value = CostRate
        Next
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGWorkType.UpdateInPlan error:"
    Resume subend
End Sub

'Friend Sub AddToPlan()
'    Dim namerange As Range
'    On Error GoTo SubErr
'    modStack.PushCallStack "TPGWorkType", "AddToPlan"
'
'    Plan.Range("Plan.WorkTemplate").Copy
'    'Plan.Range("Plan.WorkTemplateInsertionPoint").Insert copyOrigin:=xlFormatFromLeftOrAbove
'    CellFunctions.InsertWrapped Plan.Range("Plan.WorkTemplateInsertionPoint")
'    Plan.Range("Plan.WorkTemplateInsertionPoint").offset(, -5).Resize(, 5).EntireColumn.hidden = False
'    Set namerange = Intersect(Plan.Range("Plan.WorkTemplateInsertionPoint"), Plan.Range("Plan.WorkTypeNameRange")).offset(0, -5)
'    namerange.Value = Name
'    SetViewDefinitionvalues Plan.Range("Plan.WorkTemplateInsertionPoint").offset(0, -5).Resize(, 5)
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "TPGWorkType.AddToPlan error:"
'    Resume SubEnd
'End Sub

Friend Sub AddToWP()
    Dim Table As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkType", "AddToWP"

    Set Table = wp.GetWorkTable
    If Not IsEmpty(Table.ValuesRange.Cells(Table.RowsCount, 1)) Then Table.AddRow
    Table.ValuesRange.Cells(Table.RowsCount, 1) = Name

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGWorkType.AddToWP error:"
    Resume subend
End Sub

Friend Sub RearrangeInPlan(namerange As Range)
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkType", "RearrangeInPlan"

    RCut namerange.Resize(1, 5).EntireColumn
    'namerange.Resize(1, 5).EntireColumn.Cut
    'Plan.Range("Plan.WorkTemplateInsertionPoint").Insert copyOrigin:=xlFormatFromLeftOrAbove
    CellFunctions.InsertWrapped Plan.Range("Plan.WorkTemplateInsertionPoint")

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGWorkType.RearrangeInPlan error:"
    Resume subend
End Sub

Friend Sub RearrangeInWP(namerange As Range)
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkType", "RearrangeInWP"
    
    
    RCut namerange.EntireRow
    'namerange.EntireRow.Cut
    'WP.Range("WP.WorkInsertionPoint").Insert copyOrigin:=xlFormatFromLeftOrAbove
    CellFunctions.InsertWrapped wp.Range("WP.WorkInsertionPoint")
    
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGWorkType.RearrangeInWP error:"
    Resume subend
End Sub

Friend Sub RemoveFromPlan()
    Dim namerange As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkType", "RemoveFromPlan"

    Set namerange = FindInPlan
    If Not namerange Is Nothing Then
        Plan.Range(Plan.Cells(1, namerange.Column), Plan.Cells(1, namerange.Column + 4)).EntireColumn.Delete
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGWorkType.RemoveFromPlan error:"
    Resume subend
End Sub
'
'Public Sub Load(namerange As Range)
'    On Error GoTo SubErr
'    modStack.PushCallStack "TPGWorkType", "Load"
'
'    Name = namerange.Value
'    ContractWork = namerange.offset(0, 1).Value
'    BaseWork = namerange.offset(0, 2).Value
'    Set LoadedFrom = namerange
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "TPGWorkType.Load error:"
'    Resume SubEnd
'End Sub

'Public Sub GetCostType()
'    Dim cell As Range
'    On Error GoTo SubErr
'    modStack.PushCallStack "TPGWorkType", "GetCostType"
'
'    For Each cell In Admin.Range("Admin.Org")
'        If cell.Value = Name Then
'            CostTypeName = cell.offset(0, 2).Value
'            CostRate = cell.offset(0, 1).Value
'            Exit For
'        End If
'    Next
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "TPGWorkType.GetCostType error:"
'    Resume SubEnd
'End Sub

'Friend Function FindCostTypeInPlan() As Range
'    Dim cell As Range
'
'    For Each cell In getRange(Contract, "Contract.Resources", -5, 1, 9, 3)
'        If cell.locked = False Then Exit For
'        If cell.value = CostType Then
'            Set FindCostTypeInPlan = cell
'        End If
'    Next
'End Function





Rem PERSONAL PLANNING

Friend Sub AddToPlan()
    Dim namerange As Range
    RCopy Plan.Range("Plan.WorkTemplate")
    'Plan.Range("Plan.WorkTemplate").Copy
    'Plan.Range("Plan.WorkTemplateInsertionPoint").Insert copyOrigin:=xlFormatFromLeftOrAbove
    CellFunctions.InsertWrapped Plan.Range("Plan.WorkTemplateInsertionPoint")
    Plan.Range("Plan.WorkTemplateInsertionPoint").offset(, -5).Resize(, 5).EntireColumn.Hidden = False
    Set namerange = Intersect(Plan.Range("Plan.WorkTemplateInsertionPoint"), Plan.Range("Plan.WorkTypeNameRange")).offset(0, -5)
    namerange.value = Name
    If IsPerson Then
        Dim i As Integer
        Dim R As Range
        Set R = namerange.MergeArea.Cells(1, 1).offset(-1, 0)
        For i = 0 To namerange.MergeArea.Columns.Count - 1
            R.offset(0, i).value = R.offset(2, i).value & "_" & CostTypeName
            R.offset(-1, i).value = CostRate
        Next
    
    End If
    SetViewDefinitionvalues Plan.Range("Plan.WorkTemplateInsertionPoint").offset(0, -5).Resize(, 5)
End Sub

Public Function Load(namerange As Range, Optional AsPerson As Boolean = False) As Boolean
    
    
    Set LoadedFrom = namerange
    
    If AsPerson Then
        IsPerson = True
        Name = Team.Cells(namerange.row, Team.Range("Team.NameColumn").Column)
        GUID = Team.Cells(namerange.row, Team.Range("Team.GUIDColumn").Column)
        department = Team.Cells(namerange.row, Team.Range("Team.DepartmentColumn").Column)
    Else
        Name = namerange.value
        ContractWork = namerange.offset(0, 1).value
        BaseWork = namerange.offset(0, 2).value
    End If
    
    If GetCostType Then Load = True
    
End Function

Public Function GetCostType() As Boolean
    Dim rCell As Range
    
    If IsPerson Then
        If department = "" Then GoTo NoCostType
        Set rCell = Admin.Range("Admin.Org").Find(department, , xlValues, xlWhole)
    Else
        Set rCell = Admin.Range("Admin.Org").Find(Name, , xlValues, xlWhole)
    End If
    
    If rCell Is Nothing Then GoTo NoCostType
    
    CostTypeName = rCell.offset(0, 2).value
    CostRate = rCell.offset(0, 1).value
    GetCostType = True
    Exit Function

NoCostType:
    
    If IsPerson Then
        Select Case Cover.Range("Cover.LOC")
            Case 3: AppInfoMsg ("Die Person " & Name & " ist als Ressource markiert, ist jedoch keiner Abteilung zugeordnet.")
            Case 2: AppInfoMsg ("The person " & Name & " is marked as resource but has no department assigned.")
            Case Else
        End Select
    End If
    
    GetCostType = False
    
End Function


Public Sub ReadFromCell(cell As Range)
    Dim t As New TPGTokenizer
    Dim TA As TPGTokenizer
    Dim i As Integer
    t.FromString cell.value
    
'    Name = T(1)
'    CostTypeName = T(2)
'    CostRate = T(3)
'    ContractWork = T(4)
'    BaseWork = T(5)
'    Set LoadedFrom = Range(T(6))
'    IsPerson = T(7)
'    Department = T(8)
'    GUID = T(9)
    Name = CastStringToVar(t(1))
    CostTypeName = CastStringToVar(t(2))
    CostRate = CastStringToVar(t(3))
    ContractWork = CastStringToVar(t(4))
    BaseWork = CastStringToVar(t(5))
    Set LoadedFrom = Range(t(6))
    IsPerson = CastStringToVar(t(7))
    department = CastStringToVar(t(8))
    GUID = CastStringToVar(t(9))
    
    For i = 10 To t.Count Step 4
        Set TA = New TPGTokenizer
        TA.Add CastStringToVar(t.Tokens(i))
        TA.Add CastStringToVar(t.Tokens(i + 1))
        TA.Add CastStringToVar(t.Tokens(i + 2))
        TA.Add CastStringToVar(t.Tokens(i + 3))
        cTaskAssignments.Add TA.ToString, CastStringToVar(t.Tokens(i))
    Next
    
End Sub

Public Sub WriteToPlan()
    If cTaskAssignments.Count < 1 Then Exit Sub
    
    Dim t As New TPGTokenizer
    Dim i As Integer
    
    Dim rMyRange As Range
    Dim rCell As Range
    Dim rPlanValues As Range
    
    Set rMyRange = Me.FindInPlan
    If rMyRange Is Nothing Then
        AppErrMsg Replace(appGetLOCText("msgwtypetoplan"), "%1", Name)
    Else
        Set rPlanValues = Intersect(Plan.Range("Plan.UIDColumn"), Plan.Range(Plan.Range("Plan.ProjectHeader").offset(1, 0), Plan.Range("Plan.ProjectFooter").offset(-1, 0)))
        For i = 1 To cTaskAssignments.Count
            t.FromString cTaskAssignments(i)
            Set rCell = rPlanValues.Find(t.Tokens(1), , xlFormulas, xlWhole)
            If Not rCell Is Nothing Then
                If Plan.Cells(rCell.row, Plan.Range("Plan.TypColumn").Column).value = "W" Then
                    Plan.Cells(rCell.row, rMyRange.Column).value = CastStringToVar(t.Tokens(2))
                    Plan.Cells(rCell.row, rMyRange.Column).offset(0, 1).value = CastStringToVar(t.Tokens(3))
                    Plan.Cells(rCell.row, rMyRange.Column).offset(0, 2).value = CastStringToVar(t.Tokens(4))
                End If
            End If
            Set rCell = Nothing
        Next
    End If
End Sub

Public Sub WriteToCell(cell As Range)
    
    Dim t As New TPGTokenizer
    Dim A As New TPGTokenizer
    Dim rMyRange As Range
    Dim rCell As Range
    Dim rPlanValues As Range
    Dim i As Integer
    
    Set rMyRange = Me.FindInPlan
    If rMyRange Is Nothing Then Exit Sub
    Set rPlanValues = Intersect(Plan.Range("Plan.UIDColumn"), Plan.Range(Plan.Range("Plan.ProjectHeader").offset(1, 0), Plan.Range("Plan.ProjectFooter").offset(-1, 0)))
    
    t.Add CastVarToString(Name)
    t.Add CastVarToString(CostTypeName)
    t.Add CastVarToString(CostRate)
    t.Add CastVarToString(ContractWork)
    t.Add CastVarToString(BaseWork)
    t.Add CastVarToString(LoadedFrom.Address)
    t.Add CastVarToString(IsPerson)
    t.Add CastVarToString(department)
    t.Add CastVarToString(GUID)
    
    For Each rCell In rPlanValues
        If Plan.Cells(rCell.row, Plan.Range("Plan.TypColumn").Column).value = "W" Then
            t.Add rCell.value
            t.Add CastVarToString(Plan.Cells(rCell.row, rMyRange.Column))                'base
            t.Add CastVarToString(Plan.Cells(rCell.row, rMyRange.Column).offset(0, 1))   'change
            t.Add CastVarToString(Plan.Cells(rCell.row, rMyRange.Column).offset(0, 2))   'actual
        End If
    Next
    
    cell.value = t.ToString
    
End Sub

Public Sub AggregateFromPersons(WT As TPGWorkType)
    If WT.cTaskAssignments.Count < 1 Then Exit Sub
    
    Dim t As New TPGTokenizer
    Dim i As Integer
    
    Dim rMyRange As Range
    Dim rCell As Range
    Dim rPlanValues As Range
    
    Set rMyRange = Me.FindInPlan
    Set rPlanValues = Intersect(Plan.Range("Plan.UIDColumn"), Plan.Range(Plan.Range("Plan.ProjectHeader").offset(1, 0), Plan.Range("Plan.ProjectFooter").offset(-1, 0)))
    
    For i = 1 To WT.cTaskAssignments.Count
        t.FromString WT.cTaskAssignments(i)
        Set rCell = rPlanValues.Find(t.Tokens(1), , xlFormulas, xlWhole)
        If Not rCell Is Nothing Then
            If Plan.Cells(rCell.row, Plan.Range("Plan.TypColumn").Column).value = "W" Then
                If IsNumeric(CastStringToVar(t.Tokens(2))) Then Plan.Cells(rCell.row, rMyRange.Column).value = Plan.Cells(rCell.row, rMyRange.Column).value + CDbl(CastStringToVar(t.Tokens(2)))
                If IsNumeric(CastStringToVar(t.Tokens(3))) Then Plan.Cells(rCell.row, rMyRange.Column).offset(0, 1).value = Plan.Cells(rCell.row, rMyRange.Column).offset(0, 1).value + CDbl(CastStringToVar(t.Tokens(3)))
                If IsNumeric(CastStringToVar(t.Tokens(4))) Then Plan.Cells(rCell.row, rMyRange.Column).offset(0, 2).value = Plan.Cells(rCell.row, rMyRange.Column).offset(0, 2).value + CDbl(CastStringToVar(t.Tokens(4)))
            End If
        End If
        Set rCell = Nothing
    Next
End Sub

Private Sub Class_Initialize()
    Set cTaskAssignments = New Collection
End Sub

Private Sub Class_Terminate()
    Set cTaskAssignments = Nothing
End Sub

Attribute VB_Name = "TPGWorkTypes"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public IsInitialized As Boolean
Private worktypes() As TPGWorkType
Public Duplicates As Boolean
Public PlanningMode As String
Private icount As Integer

Public Sub AddWorkType(newWorkType As TPGWorkType)
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkTypes", "AddWorkType"

    If Not WorkTypeNameExists(newWorkType.Name) Then
        If IsInitialized Then
            ReDim Preserve worktypes(UBound(worktypes) + 1)
        Else
            ReDim worktypes(1)
            IsInitialized = True
        End If
        Set worktypes(UBound(worktypes)) = newWorkType
    Else
        Duplicates = True
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGWorkTypes.AddWorkType error:"
    Resume subend
End Sub

Friend Function WorkTypeNameExists(Name As String) As Boolean
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkTypes", "WorkTypeNameExists"

    WorkTypeNameExists = False
    If IsInitialized Then
        For i = 1 To UBound(worktypes)
            If worktypes(i).Name = Name Then
                WorkTypeNameExists = True
                GoTo subend
            End If
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGWorkTypes.WorkTypeNameExists error:"
    Resume subend
End Function

Public Sub SyncToPlan()
    Dim i As Integer
    Dim wtrange As Range
    Dim namerange As Range
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkTypes", "SyncToPlan"

    Set wtrange = getRange(Plan, "Plan.WorkTypeNameRange", 1, -2, 0, 1)
    'Clear All unused WorkTypes
    If Not wtrange Is Nothing Then
        For i = wtrange.Columns.Count / 5 - 1 To 0 Step -1
            Set namerange = wtrange.offset(0, i * 5).Resize(1, 1)
            If Not WorkTypeNameExists(namerange.value) Then
                Plan.Range(Plan.Cells(1, namerange.Column), Plan.Cells(1, namerange.Column + 4)).EntireColumn.Delete
            End If
        Next
    End If
    'Reorganize and add new Worktypes
    If Not IsEmpty(worktypes) Then
    
        Dim iActionCount As Integer
        For i = 1 To UBound(worktypes)
            Set namerange = WorkType(i).FindInPlan
            
            If namerange Is Nothing Then
            ElseIf namerange.value = worktypes(i).Name Then
            Else
                iActionCount = iActionCount + 1
            End If
        Next
        
        'If iActionCount > 1 Then
            If modStack.InitialProcName = "Cover.cmdImport_Click" Then
                modStack.ShowProgressBar i, "Importing Work Types", "CellFunctions.InsertWrapped"
            Else
                'modStack.ShowProgressBar UBound(WorkTypes), "Synchronizing Work Types", "TPGWorkType.RearrangeInPlan"
                If iActionCount > 1 Then modStack.ShowProgressBar iActionCount, "Synchronizing Work Types", "CellFunctions.InsertWrapped"
            End If
        'End If
        
        For i = 1 To UBound(worktypes)
            Set namerange = WorkType(i).FindInPlan
        
            If namerange Is Nothing Then
                WorkType(i).AddToPlan
            ElseIf namerange.value = worktypes(i).Name Then
                WorkType(i).UpdateInPlan namerange
            Else
                WorkType(i).RearrangeInPlan namerange
            End If
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGWorkTypes.SyncToPlan error:"
    Resume subend
End Sub

Friend Sub SyncToWP()
'modified for SALK
'    Dim wtrange As Range
'    Dim i As Integer
'
'    On Error GoTo SubErr
'    modStack.PushCallStack "TPGWorkTypes", "SyncToWP"
'    wp.noupdate = True
'    Set wtrange = wp.GetWorkTable.ValuesRange(1)
'    For i = wtrange.rows.Count To 1 Step -1
'        If Not IsEmpty(wtrange.Cells(i, 1).value) Then
'            If Not WorkTypeNameExists(wtrange.Cells(i, 1).value) Then
'                wp.GetWorkTable.DeleteRow wtrange.Cells(i, 1)
'            End If
'        End If
'    Next
'    If Not IsEmpty(worktypes) Then
'        For i = 1 To UBound(worktypes)
'            Set wtrange = WorkType(i).FindInWP
'            If wtrange Is Nothing Then
'                WorkType(i).AddToWP
'            Else
'                WorkType(i).RearrangeInWP wtrange
'            End If
'        Next
'    End If
'
'SubEnd:
'    wp.noupdate = False
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "TPGWorkTypes.SyncToWP error:"
'    Resume SubEnd
End Sub

Public Function Count() As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkTypes", "count"

    If IsInitialized Then
        Count = UBound(worktypes)
    Else
        Count = 0
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGWorkTypes.count error:"
    Resume subend
End Function

Public Function WorkType(index As Integer) As TPGWorkType
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkTypes", "WorkType"

     If IsInitialized Then
        Set WorkType = worktypes(index)
     End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGWorkTypes.WorkType error:"
    Resume subend
End Function

Public Function WorkTypeByName(Name As String) As TPGWorkType
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkTypes", "WorkTypeByName"

    If IsInitialized Then
        For i = 1 To UBound(worktypes)
            If worktypes(i).Name = Name Then
                Set WorkTypeByName = worktypes(i)
            End If
        Next
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TPGWorkTypes.WorkTypeByName error:"
    Resume subend
End Function

Private Sub Class_Initialize()
    On Error GoTo suberr
    modStack.PushCallStack "TPGWorkTypes", "Class_Initialize"

    IsInitialized = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TPGWorkTypes.Class_Initialize error:"
    Resume subend
End Sub
'
'Public Sub Load(Optional r As Range)
'    Dim cell As Range
'    Dim WT As TPGWorkType
'    On Error GoTo SubErr
'    modStack.PushCallStack "TPGWorkTypes", "Load"
'
'    If r Is Nothing Then Set r = Contract.GetResourcesTable.ValuesRange(2)
'    For Each cell In r
'        If cell.Value <> "" Then
'            Set WT = New TPGWorkType
'            WT.Load cell
'            AddWorkType WT
'        End If
'    Next
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "TPGWorkTypes.Load error:"
'    Resume SubEnd
'End Sub




Rem PERSONAL PLANNING

Public Sub Load(Optional R As Range, Optional LoadAs As String = "$")
    Dim cell As Range
    Dim WT As TPGWorkType
    Dim rCell As Range
    Set rCell = Team.Range("Team.IsResourceRange").Find("x", , xlValues, xlWhole)
    If Not rCell Is Nothing Then
        PlanningMode = "Persons"        'persons as resources
    Else
        PlanningMode = "Departments"
    End If                              'departments as resources
    If LoadAs <> "$" Then PlanningMode = LoadAs
        
    Select Case PlanningMode
        Case "Persons"
            For Each rCell In Team.Range("Team.IsResourceRange")
                If rCell.value = "x" Then
                    Set WT = New TPGWorkType
                    If WT.Load(rCell, True) Then AddWorkType WT
                End If
            Next
            
        Case "Departments"
            If R Is Nothing Then Set R = Contract.GetResourcesTable.ValuesRange(2)
            For Each cell In R
                If cell.value <> "" Then
                    Set WT = New TPGWorkType
                    WT.Load cell
                    AddWorkType WT
                End If
            Next
            
        Case Else
            '?
    End Select
End Sub

Public Sub Save()
    Dim WT As TPGWorkType
    Dim i As Integer
    Dim rCell As Range
    
    Config.Range("Config.WTS").ClearContents
    
    Set rCell = Config.Range("Config.WTS").Cells(1, 1)
    For i = 1 To UBound(worktypes)
        Set WT = worktypes(i)
        WT.WriteToCell rCell.offset(i, 0)
    Next
End Sub

Public Sub Restore()
    Dim rCell As Range
    Dim WT As TPGWorkType
    
    For Each rCell In Config.Range("Config.wts")
        If Not rCell.value = "" Then
            Set WT = New TPGWorkType
            WT.ReadFromCell rCell
            AddWorkType WT
        End If
    Next
End Sub

Public Sub WriteToPlan()
    Dim WT As TPGWorkType
    Dim i As Integer
    
    For i = 1 To UBound(worktypes)
        Set WT = worktypes(i)
        WT.WriteToPlan
    Next
End Sub

Public Sub AggregateFromPersons(WTS As TPGWorkTypes)
    Dim WT As TPGWorkType
    Dim i As Integer
    Dim j As Integer
    
    For i = 1 To UBound(worktypes)
        Set WT = worktypes(i)
        For j = 1 To WTS.Count
            If WTS.WorkType(j).department = worktypes(i).Name Then
                worktypes(i).AggregateFromPersons WTS.WorkType(j)
            End If
        Next
    Next
End Sub

'
'Public Sub Switch()
'    Dim WT As TPGWorkType
'    Dim i As Integer
'    For i = 1 To UBound(WorkTypes)
'        Set WT = WorkTypes(i)
'        WT.WriteToCell Config.Range("Config.wts").Cells(1, 1)
'    Next
'    For i = 1 To UBound(WorkTypes)
'        Set WT = WorkTypes(i)
'        WT.ReadFromCell Config.Range("Config.wts").Cells(1, 1)
'    Next
'End Sub

Attribute VB_Name = "TPGXML"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module    : TPGXML
' Author    : wm
' Date      : 20.03.2012
' Purpose   : Class for easy creation of xml files
'             reference http://www.devguru.com/Technologies/xmldom/quickref/xmldom_intro.html
'---------------------------------------------------------------------------------------

Option Explicit

Private OBJXMLDOC As Variant
Private HEADING As Variant
Private ROOT_NODE As Variant
Private METADATA_NODE As Variant
Private DATA_NODE As Variant
Private m_SaveFileName As String
Private m_LoadFileName As String
Private m_DefaultFileName As String

Private Sub Class_Initialize()
    m_DefaultFileName = ThisWorkbook.FullName & "_export.xml"
    
    Set OBJXMLDOC = CreateObject("Microsoft.XMLDOM"):       OBJXMLDOC.async = False
    Set HEADING = OBJXMLDOC.createNode(7, "xml", ""):       OBJXMLDOC.appendchild (HEADING)
    Set ROOT_NODE = OBJXMLDOC.createNode(1, "root", ""):    OBJXMLDOC.appendchild (ROOT_NODE)

    Set METADATA_NODE = OBJXMLDOC.createNode(1, "metadata", "")
    AddNode OBJXMLDOC, METADATA_NODE, "origin", APP_NAME_SHORT
    AddNode OBJXMLDOC, METADATA_NODE, "version", VERSION_NO
    AddNode OBJXMLDOC, METADATA_NODE, "buildno", BuildNo
    AddNode OBJXMLDOC, METADATA_NODE, "lastmodified", LastModified
    AddNode OBJXMLDOC, METADATA_NODE, "exportdate", Date
    AddNode OBJXMLDOC, METADATA_NODE, "exporttime", Time
    AddNode OBJXMLDOC, METADATA_NODE, "language", Range("Cover.Loc").value - 1
    ROOT_NODE.appendchild METADATA_NODE
    
    Set DATA_NODE = OBJXMLDOC.createNode(1, "data", ""):    ROOT_NODE.appendchild DATA_NODE
End Sub

Private Sub Class_Terminate()
    kill
End Sub

Public Sub kill()
    Set HEADING = Nothing
    Set ROOT_NODE = Nothing
    Set METADATA_NODE = Nothing
    Set DATA_NODE = Nothing
    Set OBJXMLDOC = Nothing
End Sub

'---------------------------------------------------------------------------------------
' xml
'---------------------------------------------------------------------------------------
'
Public Property Get xml() As String
    xml = OBJXMLDOC.xml
End Property

Public Property Get NodeCount() As Long
    NodeCount = DATA_NODE.ChildNodes.length
End Property

Public Property Get Contains(NodeName As String) As Boolean
    Contains = Not DATA_NODE.SelectSingleNode(LCase(NodeName)) Is Nothing
End Property

Public Property Get datanode() As Variant
    Set datanode = DATA_NODE
End Property

Public Property Get Node(NodeName As String) As Variant
    If Me.Contains(NodeName) Then Set Node = DATA_NODE.SelectSingleNode(LCase(NodeName))
End Property

Public Property Get MetaNode(NodeName As String) As Variant
    If Not METADATA_NODE.SelectSingleNode(LCase(NodeName)) Is Nothing Then _
        Set MetaNode = METADATA_NODE.SelectSingleNode(LCase(NodeName))
End Property

'Private Property Get Version() As String
'    If Not MetaNode("version") Is Nothing Then Version = MetaNode("version").Text
'End Property

Public Property Get MetaAttribute(AttributeName As String) As String
    If Not MetaNode("AttributeName") Is Nothing Then MetaAttribute = MetaNode("AttributeName").Text
End Property

Public Property Get ElementsByTagName(TagName As String, Optional Node As Variant) As Variant
    If IsMissing(Node) Then
        Set ElementsByTagName = OBJXMLDOC.GetElementsByTagName(TagName)
    ElseIf TypeName(Node) = "IXMLDOMElement" Then
        Set ElementsByTagName = Node.GetElementsByTagName(TagName)
    Else
        Debug.Print "no nodes found for TagName <" & TagName & ">": Set ElementsByTagName = Nothing
    End If
End Property

Private Sub RebuildNodeStructure()
    If Not OBJXMLDOC.SelectSingleNode("root") Is Nothing Then
        Set ROOT_NODE = OBJXMLDOC.SelectSingleNode("root")
    ElseIf Not OBJXMLDOC.SelectSingleNode("phb") Is Nothing Then
        Set ROOT_NODE = OBJXMLDOC.SelectSingleNode("phb")
    ElseIf Not OBJXMLDOC.SelectSingleNode("ppf") Is Nothing Then
        Set ROOT_NODE = OBJXMLDOC.SelectSingleNode("ppf")
    ElseIf OBJXMLDOC.ChildNodes.length > 1 Then
        Set ROOT_NODE = OBJXMLDOC.ChildNodes(2)
    Else
        Exit Sub
    End If
    
    Set METADATA_NODE = ROOT_NODE.SelectSingleNode("metadata")
    Set DATA_NODE = ROOT_NODE.SelectSingleNode("data")
End Sub

Public Property Get Version() As TPGXMLVersion
    Dim v As New TPGXMLVersion: v.Init Me
    Set Version = v
End Property

'---------------------------------------------------------------------------------------
' save/load
'---------------------------------------------------------------------------------------
'
Public Sub LoadXML(xml As String)
    OBJXMLDOC.LoadXML xml
    RebuildNodeStructure
End Sub

Public Function LoadFileDialog() As String
    m_LoadFileName = ""
    Dim filedialog:     filedialog = Application.GetOpenFilename("Xml-Files (*.xml), *.xml")
    If filedialog <> False Then m_LoadFileName = CStr(filedialog)
    LoadFileDialog = m_LoadFileName
End Function

Public Function SaveFileDialog() As String
    m_SaveFileName = ""
    Dim filedialog:    filedialog = Application.GetSaveAsFilename(m_DefaultFileName, "Xml-Files (*.xml), *.xml")
    If filedialog <> False Then m_SaveFileName = CStr(filedialog)
    SaveFileDialog = m_SaveFileName
End Function

Public Sub LoadFromFile(Optional FileName As String = "")
    If FileName <> "" Then
        OBJXMLDOC.Load FileName
    ElseIf m_LoadFileName <> "" Then
        OBJXMLDOC.Load m_LoadFileName
    Else
        Debug.Print "filename missing. no file loaded.": Exit Sub
    End If
    RebuildNodeStructure
End Sub

Public Sub SaveToFile(Optional FileName As String = "")
    If FileName <> "" Then
        OBJXMLDOC.Save FileName
    ElseIf m_SaveFileName <> "" Then
        OBJXMLDOC.Save m_SaveFileName
    Else
        Debug.Print "filename missing. no file saved."
    End If
End Sub

Public Sub OpenFile()
    Me.LoadFromFile Me.LoadFileDialog
End Sub

Public Sub SaveAs()
    Me.SaveToFile Me.SaveFileDialog
End Sub





'---------------------------------------------------------------------------------------
' import/export
'---------------------------------------------------------------------------------------
'
Public Sub AppendObject(Object As Object)
    'TODO: should be unified to property get. trial & error via IUnknown is not really best practice
    If Object Is Nothing Then Exit Sub
    On Error Resume Next    'typically 438 will be the only error possible here
    If TypeName(Object) = "Worksheet" Then
        DATA_NODE.appendchild Object.CreateXml(OBJXMLDOC)
    Else
        DATA_NODE.appendchild (CallByName(Object, "ToXML", VbGet, OBJXMLDOC))
    End If
End Sub

Public Sub WriteTo(Object As Object)
    'TODO: should be unified to property get. trial & error via IUnknown is not really best practice
    On Error GoTo suberr
    If Object Is Nothing Then GoTo subend
    
    If TypeName(Object) = "Worksheet" Then
        Object.ImportXml Me.Node(Object.CodeName), Version
        'CallByName Object, "ImportXml", VbMethod, Me.Node(Object.CodeName)
    Else
        CallByName Object, "FromXML", VbMethod, Me.Node(Object.CodeName)
    End If

subend:
    Exit Sub
suberr:
    On Error Resume Next
    Select Case err.Number
        Case 449:   Resume Next     'argument not optional - not going to happen anymore
        Case 438:   Resume Next     'object doesn't support this property or method
    End Select
    Resume subend
End Sub

Public Sub ImportPHB()
    Dim ws As Object
    For Each ws In ThisWorkbook.Worksheets
        If Me.Contains(ws.CodeName) Then ws.ImportXml Me.Node(ws.CodeName), Version
    Next
End Sub
Attribute VB_Name = "TPGXMLVersion"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private oParent As TPGXML

Public Sub Init(Parent As TPGXML)
    If Not Parent.MetaNode("version") Is Nothing Then Set oParent = Parent
End Sub

Public Property Get Version() As Long
Attribute Version.VB_UserMemId = 0
    Version = ValidateLng(ToString)
End Property

Public Property Get Major() As Long
    Major = Split(TrimmedVersion, ".")(0)
End Property

Public Property Get Minor() As Long
    Minor = Split(TrimmedVersion, ".")(1)
End Property

Public Property Get BugFix() As Long
    BugFix = Split(TrimmedVersion, ".")(2)
End Property

Public Property Get Build() As String
    Build = oParent.MetaNode("buildno").Text
End Property

Public Property Get BuildNo() As Long
    BuildNo = ValidateLng(CStr(Split(Build, ".")(UBound(Split(Build, ".")))))
End Property

Public Property Get ToString() As String
    If Not oParent Is Nothing Then ToString = Trim(oParent.MetaNode("version").Text)
End Property

Private Property Get TrimmedVersion() As String
    TrimmedVersion = ValidateString(ToString, "[0-9,.]")
End Property

Public Property Get CustomerRevision() As String
    CustomerRevision = ValidateString(Right(ToString, 1), "[A-Z,a-z]")
End Property

Public Property Get Parent() As TPGXML
    Set Parent = oParent
End Property
Attribute VB_Name = "Team"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public noupdate As Boolean

Const block1 = 5 '4
Const block2 = 12 '11 '5
Const block3 = 19 '18 '7
Const block4 = 26 '25
Const block5 = 33 '32
Const block6 = 40 '39
Const block7 = 47 '46
'----------------------------------ORI TEAM CODE------------------------------------------------------
Public Property Get rGUIDs() As Range
    Set rGUIDs = Intersect(Team.GetTable.ValuesRange, Team.Range("Team.GUIDColumn"))
End Property
Public Property Get rNames() As Range
    Set rNames = Intersect(Team.GetTable.ValuesRange, Team.Range("Team.NameColumn"))
End Property
Public Property Get rRoles() As Range
    Set rRoles = Intersect(Team.GetTable.ValuesRange, Team.Range("Team.RoleColumn"))
End Property
Public Property Get rDepartments() As Range
    Set rDepartments = Intersect(Team.GetTable.ValuesRange, Team.Range("Team.DepartmentColumn"))
End Property

Public Sub ProjectTeam()
    Dim ProjectTeam As New TPGTeam2
    Dim member As TPGMember2
    For Each member In ProjectTeam
        Debug.Print member.DistributionList.ToString
    Next
End Sub

'Copy and Paste a row of the team table must not duplicate any guid
Private Sub AssertUniqueGuid(Target As Range)
    Dim GUID As String
    Dim t As TPGTable
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "Team", "AssertUniqueGuid"

    If Application.Intersect(Team.Range("Team.Table"), Cells(Target.row, Target.Column)) Is Nothing Then GoTo subend
    Team.noupdate = True
    Set t = GetTable()
    For Each R In Target.rows
        GUID = Team.Cells(R.row, Team.Range("Team.GUIDColumn").Column).value
        If t.OcurrencesOfNameInColumn(50, GUID) > 1 Then
            Team.Cells(R.row, Team.Range("Team.GUIDColumn").Column).value = ""
        End If
    Next
    Team.noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.AssertUniqueGuid error:"
    Resume subend
End Sub

Friend Function GetTable() As TPGTable
    Dim t As New TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "Team", "GetTable"

    t.SetTable Me.Range("Team.Table"), True, False, TemplateBeforeHeader, 10, , 16 ' 10.5
    Set GetTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.GetTable error:"
    Resume subend
End Function

Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Team", "cmdInsert_Click"
    
    If GetTable.CanInsert(ActiveCell) Then
        If sActiveLicense = "M" Then
            If ActiveCell.row = Range("Team.Table").row + 1 Then GoTo subend
        End If
        
        Team.noupdate = True
        GetTable.InsertRow ActiveCell.row
        Team.noupdate = False
        
    End If
       
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    Team.noupdate = False
    
    AppErrMsg "Team.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Team", "cmdDelete_Click"
    
    If GetTable.CanDelete(ActiveCell) Then
        If sActiveLicense = "M" Then
            If ActiveCell.row = Range("Team.Table").row + 1 Then GoTo subend
        End If
        
        If appQOCMsg(appGetLOCText("DeleteRow")) = vbOK Then
        
        
        Team.noupdate = True
        
        Dim member As New TPGMember
        member.LoadMemberFromTeam Team.Cells(ActiveCell.row, Team.Range("Team.GUIDColumn").Column)
        member.RemoveMemberFromContract
        GetTable.DeleteRow ActiveCell
        SetNames
        Me.Select
        Cover.RefreshTeam
        Team.noupdate = False
        
        
        End If
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    Team.noupdate = False
    
    
    AppErrMsg "Team.cmdDelete_Click error:"
    Resume subend
End Sub

Public Sub cmdInsertDL_Click()
    Dim R As Range
    Dim DL As Range
    Dim s As String
    Dim firstrow As Integer
    Dim lastrow As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "cmdInsertDL_Click"
    
    s = "Team.DLTable"
    Set R = Application.Intersect(ActiveCell, Range(s))
    If Not R Is Nothing Then
        If ActiveCell.Column >= Team.Range("Team.DLTable").Column And ActiveCell.Column < Team.Range("Team.DLTable").Column + Team.Range("Team.DLTable").Columns.Count Then
            
            
            Team.noupdate = True
            
            firstrow = Range(s).row
            lastrow = firstrow + Range(s).rows.Count - 3
            'Team.Range("Team.FirstDL").Copy
            RCopy Team.Range("Team.FirstDL")
            
            'ActiveCell.EntireColumn.Insert , copyOrigin:=xlFormatFromLeftOrAbove
            CellFunctions.InsertWrapped ActiveCell.EntireColumn
            Range(Cells(firstrow, ActiveCell.Column), Cells(lastrow, ActiveCell.Column)).ClearContents
            ActiveCell.EntireColumn.Hidden = False
            'Set new DL number
            Dim dlNumber As Integer
            dlNumber = 1
            For Each DL In Team.Range("Team.DLNames").Cells
                If IsNumeric(DL.value) And DL.value >= dlNumber Then dlNumber = DL.value + 1
            Next
            Intersect(Team.Range("Team.DLNames"), ActiveCell.EntireColumn).value = dlNumber
            SetDLNames
            'modShapes.MoveControlsHorizontally Me, 1, "R", 3
            modShapes.PositionLogo_v3 Me
        End If
    End If
   
subend:
    Team.noupdate = False
    
    modStack.PopCallStack
    Exit Sub
suberr:
    Team.noupdate = False
    AppErrMsg "Team.cmdInsertDL_Click error:"
    Resume subend
End Sub


Public Sub cmdDeleteDL_Click()
    Dim R As Range
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "cmdDeleteDL_Click"
    
    s = "Team.DLTable"
    Set R = Application.Intersect(ActiveCell, Range(s))
    If Not R Is Nothing Then
        If ActiveCell.Column > Team.Range("Team.FirstDL").Column And _
            ActiveCell.Column < Team.Range("Team.FirstDL").Column + Team.Range("Team.DLNames").Columns.Count - 1 And _
            Team.Range("Team.DLNames").Columns.Count > 3 Then
            If appQOCMsg(appGetLOCText("msgDeleteDL")) = vbOK Then
                
                Team.noupdate = True
                ActiveCell.EntireColumn.Delete
                SetDLNames
                'modShapes.MoveControlsHorizontally Me, -1, "R", 3
                modShapes.PositionLogo_v3 Me
            End If
        End If
    End If
    
subend:
    Team.noupdate = False
    
    modStack.PopCallStack
    Exit Sub
suberr:
    Team.noupdate = False
    AppErrMsg "Team.cmdDeleteDL_Click error:"
    Resume subend

End Sub

Private Sub SetDLNames()
    Dim dls, i As Integer
    Dim R As Range
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "SetDLNames"
    
    dls = Team.Range("Team.DLNames").Columns.Count - 2
    s = Config.Range("Config.DLNames").Resize(dls + 1).Address
    Application.Names("Config.DLNames").Delete
    Application.Names.Add "Config.DLNames", "=Config!" + s
    
    For i = 1 To dls + 1
        Config.Range("Config.DLNames").Cells(i).value = Team.Range("Team.DLNames").Cells(1, i).value
    Next
    Set R = getRange(Config, "Config.DLNames", 1, 1, dls + 1, 0)
    Do While R.value <> ""
        R.value = ""
        Set R = R.offset(1, 0)
    Loop
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.SetDLNames error."
    Resume subend
End Sub

Public Sub SetNames()
    Dim R As Range
    Dim c As Range
    Dim Count As Integer
    Dim s As String
    Dim brib As Boolean
    Dim bprt As Boolean
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "SetNames"
    If Not bnoRibbonUpdate Then
        modRibbon.bnoRibbonUpdate = True
        brib = True
    End If
    
    For Each c In Team.rNames
        If c.value <> "" Then
            Count = Count + 1
            Config.Cells(Count + 2, Config.Range("Config.Names").Column).value = c.value
        End If
    Next
    
    s = "=Config!" & Config.Range("Config.Names").Resize(Count + 1).Address
    ThisWorkbook.Names("Config.Names").Delete
    ThisWorkbook.Names.Add "Config.Names", s
    
    Set R = getRange(Config, "Config.Names", 1, 1, Count + 1, 0)
    Do While R.value <> ""
        R.value = ""
        Set R = R.offset(1, 0)
    Loop
    If Not PreviousProcName = "Team.reset" Then _
        sortRange Config.Range("Config.Names").offset(1), Config.Range("Config.Names").offset(1), xlAscending

    'update names in wpinfo sheet
    'SecureUnprotect WPInfo, "SetNames", Me.CodeName
    If Not bNoNormalProtectActionsRequired Then
        bNoNormalProtectActionsRequired = True '131015
        bprt = True
    End If
    Cover.noupdate = True
    Dim rwpinfo As Range
    Set rwpinfo = WPInfo.Range("WPInfo.Names").Resize(1, 1).offset(-1, 0)
    WPInfo.Range("WPInfo.Names").Delete (xlShiftUp)
    
    '/**Fix for 1705**/
    'Config.Range("Config.Names").Copy
    RCopy Config.Range("Config.Names")
    
    rwpinfo.offset(1, 0).PasteSpecial xlPasteValues
    s = "=WPInfo!" & rwpinfo.offset(1, 0).Resize(Count + 1).Address
    ThisWorkbook.Names.Add "WPInfo.Names", s
subend:
    Cover.noupdate = False
    If brib Then modRibbon.bnoRibbonUpdate = False
    If bprt Then bNoNormalProtectActionsRequired = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.SetNames error."
    Resume subend
End Sub

Private Function GetCols_1_0_3() As Collection
    Dim cols As New Collection
    Dim i As Integer

    On Error GoTo suberr
    modStack.PushCallStack "Team", "GetCols_1_0_3"

    cols.Add GetTPGColumn("company", 1)
    cols.Add GetTPGColumn("id", 2)
    cols.Add GetTPGColumn("name", 3)
    cols.Add GetTPGColumn("role", 4)
    cols.Add GetTPGColumn("fd", 6)
    cols.Add GetTPGColumn("department", 7)
    cols.Add GetTPGColumn("org", 8)
    cols.Add GetTPGColumn("phone", 9)
    cols.Add GetTPGColumn("email", 10)
    For i = 1 To Range("Team.DLNames").Columns.Count - 2
        cols.Add GetTPGColumn("dl" & i, 11 + i)
    Next
    Set GetCols_1_0_3 = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.GetCols_1_0_3 error:"
    Resume subend
End Function

Private Function GetCols_1_0_4() As Collection
    Dim cols As New Collection
    Dim i As Integer

    On Error GoTo suberr
    modStack.PushCallStack "Team", "GetCols_1_0_4"

    cols.Add GetTPGColumn("company", 1)
    cols.Add GetTPGColumn("id", 2)
    cols.Add GetTPGColumn("name", 3)
    cols.Add GetTPGColumn("role", 4)
    cols.Add GetTPGColumn("fd", 6)
    cols.Add GetTPGColumn("department", 7)
    cols.Add GetTPGColumn("org", 8)
    cols.Add GetTPGColumn("phone", 9)
    cols.Add GetTPGColumn("email", 10)
    For i = 1 To Range("Team.DLNames").Columns.Count - 2
        cols.Add GetTPGColumn("dl" & i, 12 + i)
    Next
    Set GetCols_1_0_4 = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.GetCols_1_0_4 error:"
    Resume subend
End Function

Private Function GetCols_1_1_0() As Collection
    Dim cols As New Collection
    Dim i As Integer

    On Error GoTo suberr
    modStack.PushCallStack "Team", "GetCols_1_1_0"

    cols.Add GetTPGColumn("company", 1)
    cols.Add GetTPGColumn("id", 2)
    cols.Add GetTPGColumn("name", 3)
    cols.Add GetTPGColumn("role", 4)
    cols.Add GetTPGColumn("subteam", 5)
    cols.Add GetTPGColumn("fd", 6)
    cols.Add GetTPGColumn("department", 7)
    cols.Add GetTPGColumn("org", 8)
    cols.Add GetTPGColumn("phone", 9)
    cols.Add GetTPGColumn("email", 10)
    For i = 1 To Range("Team.DLNames").Columns.Count - 2
        cols.Add GetTPGColumn("dl" & i, 13 + i)
    Next
    Set GetCols_1_1_0 = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.GetCols_1_1_0 error:"
    Resume subend
End Function

Private Property Get GenericCols() As Collection

    Dim cols As New Collection
    Dim t As New TPGTeam2
    Dim i As Integer
    For i = 1 To t.AllKeys.Count
        If CLng(t.AllColumns(i)) - 2 > 0 Then
            If t.AllKeys(i) = "Role" Then
                cols.Add GetTPGColumn(LCase(t.AllKeys(i)), CLng(t.AllColumns(i)) - 3, tagColumn, phbLocalizationItemRole)
            ElseIf t.AllKeys(i) = "Department" Then
                If Import.ImportKISSinPHB Then
                    'when importing KISS in normal PHB we need to set columntype, so that department is translated as needed
                    cols.Add GetTPGColumn(LCase(t.AllKeys(i)), CLng(t.AllColumns(i)) - 3, kissDepartment)
                Else
                    cols.Add GetTPGColumn(LCase(t.AllKeys(i)), CLng(t.AllColumns(i)) - 3)
                End If
            Else
                cols.Add GetTPGColumn(LCase(t.AllKeys(i)), CLng(t.AllColumns(i)) - 3)
            End If
        End If
    Next
    For i = 1 To Range("Team.DLNames").Columns.Count - 2
        cols.Add GetTPGColumn("dl" & i, (Range("Team.DLNames").Column - 3) + i)
    Next
    Set GenericCols = FlexiSortCollection(cols)
    
End Property



Private Property Get GenericColsSALK() As Collection

    Dim cols As New Collection
    Dim t As New TPGTeam2
    Dim i As Integer
    For i = 1 To t.AllKeys.Count
        If CLng(t.AllColumns(i)) - 2 > 0 Then
            
            If t.AllKeys(i) = "Role" Then
                cols.Add GetTPGColumn(LCase(t.AllKeys(i)), CLng(t.AllColumns(i)) - 3, tagColumn, phbLocalizationItemRole)
            ElseIf t.AllKeys(i) = "Department" Then
                
                If Import.ImportKISSinPHB Then
                    'when importing KISS in normal PHB we need to set columntype, so that department is translated as needed
                    cols.Add GetTPGColumn(LCase(t.AllKeys(i)), CLng(t.AllColumns(i)) - 3, kissDepartment)
                Else
                    cols.Add GetTPGColumn(LCase(t.AllKeys(i)), CLng(t.AllColumns(i)) - 3)
                End If
            ElseIf t.AllKeys(i) = "GUID" Then 'added for SALK -- borrowed kissdepartment
                cols.Add GetTPGColumn(LCase(t.AllKeys(i)), CLng(t.AllColumns(i)) - 3, kissDepartment)
            ElseIf t.AllKeys(i) = "Subteam" Then 'for SALK only
                cols.Add GetTPGColumn(LCase(t.AllKeys(i)), CLng(t.AllColumns(i)) - 3, salkSubteam)
            Else
                cols.Add GetTPGColumn(LCase(t.AllKeys(i)), CLng(t.AllColumns(i)) - 3)
            End If
        End If
    Next
    For i = 1 To Range("Team.DLNames").Columns.Count - 2
        cols.Add GetTPGColumn("dl" & i, (Range("Team.DLNames").Column - 3) + i)
    Next
    Set GenericColsSALK = FlexiSortCollection(cols)
    
End Property

Sub Checkasdfg()
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "Checkasdfg"

    Dim ox As New TPGXML
    ox.AppendObject Me
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.Checkasdfg error:"
    Resume subend
End Sub

Sub testcols()
    Dim t As New TPGTeam2
    Debug.Print t.ToString
    
    Dim T2 As New TPGTeam2
    T2.FromString t.ToString
    
    Debug.Print T2(1)("Name")
    
    Dim c As New Collection
    Set c = GetCols_1_1_0
    Dim x As New Collection
    Set x = GenericCols

End Sub


Private Function GetCols(Optional Version As String = "$") As Collection
    On Error GoTo suberr
    modStack.PushCallStack "Team", "GetCols"

    
    Set GetCols = GenericCols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.GetCols error:"
    Resume subend
End Function

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    'Dim Cols As Collection
    'Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")

    n.appendchild GetNodeFromTable(xmlDom, "distributionlists", "dl", Range("Team.DLNames"), , True)
    n.appendchild GetNodeFromTable(xmlDom, "members", "member", GetTable.ValuesRange, GetCols(VERSION_NO))
        
    Dim t As New TPGTokenizer
    Dim rCell As Range
    For Each rCell In Team.GetTable.ValuesRange(1)
        If Not Team.Cells(rCell.row, Team.Range("Team.GUIDColumn").Column).value = "" Then _
        t.Add rCell.Interior.Color
    Next
    AddNode xmlDom, n, "teamcolors", t.ToString
        
    Set CreateXml = n

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, Version As String)
    Dim dlCount As Integer
    Dim i As Integer
    Dim c As Range
    Dim s As String
    Dim n As Variant
    Dim icolemail As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "ImportXml"

    If Not Node Is Nothing Then
        
        reset
        Me.noupdate = True
        
        ' Import DLs
        dlCount = Node.SelectNodes("distributionlists/dl").length
        For i = Me.Range("Team.DlNames").Columns.Count To dlCount + 1
            'Team.Range("Team.FirstDL").Copy
            RCopy Team.Range("Team.FirstDL")
            'team.Range("Team.FirstDL").Offset(ColumnOffset:=1).EntireColumn.Insert , copyOrigin:=xlFormatFromLeftOrAbove
            CellFunctions.InsertWrapped Team.Range("Team.FirstDL").offset(ColumnOffset:=1).EntireColumn
            'MoveControlsHorizontally Me, 1, "R", 3
        Next
        
        i = 1
        For Each n In Node.SelectNodes("distributionlists/dl")
            i = i + 1
            Team.Range("Team.DLNames").Cells(1, i).value = CastStringToVar(n.Text)
            Team.Range("Team.DLNames").Cells(1, i).EntireColumn.Hidden = False
        Next
        SetDLNames
        
        ' Import Team
        If Import.ImportKISSinPHB Then
            '(kissimport)
            If Import.KISSVersionForPHB < "3.0.00" Then
                ImportTableValues GetTable, Node, "members/member", GetCols_Kiss
            Else
                ImportTableValues GetTable, Node, "members/member", GetCols(Version)
            End If
        Else
            If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
                'when KISS licence and importing old KISS data we have older colset (with id node instead of guid node)
                If Version < "3.0.00" Then
                    ImportTableValues GetTable, Node, "members/member", GetCols_Kiss(False)
                Else
                    ImportTableValues GetTable, Node, "members/member", GetCols(Version)
                End If
            Else
                If Version = "3.0.00a" Then
                    ImportTableValues GetTable, Node, "members/member", GetCols(Version), , Version
                Else
                    ImportTableValues GetTable, Node, "members/member", GenericColsSALK, , Version
                End If
            End If
        End If
        
        'Added for SALK
        If Version = "1200" Then
            i = GetTable.firstrow
            For Each n In Node.SelectNodes("members/member")
                Team.Range("Team.RACIColumn").Cells(i, 1).value = n.SelectSingleNode("fd").Text
                i = i + 1
            Next
        End If
        
        If (sActiveLicense = "M") Or (sActiveLicense = "K") Then
            Range("Team.Table").Cells(2, Team.Range("Team.GUIDColumn").Column - 2).value = Cover.Range("Cover.Manager.Table").Cells(2, 1).value
            Range("Team.Table").Cells(2, Team.Range("Team.GUIDColumn").Column - 2).MergeArea.locked = True
            Range("Team.Table").Cells(2, Team.Range("Team.NameColumn").Column - 2).value = Cover.Range("Cover.Manager.Table").Cells(2, 2).value
            Range("Team.Table").Cells(2, Team.Range("Team.NameColumn").Column - 2).MergeArea.locked = True
            Range("Team.Table").Cells(2, Team.Range("Team.RoleColumn").Column - 2).value = appGetLOCText("role_manager")
            Range("Team.Table").Cells(2, Team.Range("Team.RoleColumn").Column - 2).MergeArea.locked = True
            Range("Team.Table").Cells(2, Team.Range("Team.NameColumn").Column - 2).Resize(1, 12).locked = True
            Range("Team.Table").Cells(2, Team.Range("Team.NameColumn").Column - 2).Resize(1, 12).Interior.Color = RGB(242, 242, 242)
        
            s = appGetLOCText("role_manager")
            For Each c In Team.rRoles.offset(1, 0)
                If c.value = s Then c.value = ""
            Next
        End If
        
        'set correct font for emailaddress
        icolemail = Team.Range("Team.EmailColumn").Column
        For i = (Me.Range("Team.TableHeader").row + 1) To (Me.Range("Team.Tablefooter").row - 1)
            If Me.Cells(i, icolemail).value <> "" Then
                Me.Cells(i, icolemail).Font.Name = "Segoe UI"
                Me.Cells(i, icolemail).Font.Size = 9
            End If
        Next
        
        If Not Node.SelectSingleNode("teamcolors") Is Nothing Then
            Dim t As New TPGTokenizer
            Dim rCell As Range
            
            t.FromString Node.SelectSingleNode("teamcolors").Text
            i = 1
            
            For Each rCell In Team.GetTable.ValuesRange(1)
                If Not Team.Cells(rCell.row, Team.Range("Team.GUIDColumn").Column).value = "" Then
                    rCell.Interior.Color = t.Item(i)
                End If
                i = i + 1
            Next
        End If
        
        'Contract.RefreshTeam
        'Cover.RefreshTeam
        SetNames
        
        Me.noupdate = False
        
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.ImportXml error:"
    Resume subend
End Sub




Rem SUBPROJECT-RELATED
Public Sub ImportSubProjectXml(Node As Variant, sversion As String)
    Dim dlCount As Integer
    Dim i As Integer

    On Error GoTo suberr
    modStack.PushCallStack "Team", "ImportSubProjectXml"

    If Not Node Is Nothing Then
        Team.noupdate = True
        AppendTableValues GetTable, Node, "members/member", GetCols(sversion)
        Cover.RefreshTeam
        SetNames
        Team.noupdate = False
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.ImportSubProjectXml error:"
    Resume subend
End Sub


Public Function rememberNewMembers(memberName As String, Optional clear As Boolean = False) As Collection
    ' used for sub project import to keep track of imported members and display the contents when done
    Static newTeamMembers As Collection
    
    If newTeamMembers Is Nothing Then _
        Set newTeamMembers = New Collection
    
    If memberName <> "" Then _
        newTeamMembers.Add memberName
    
    If clear Then
        Do While newTeamMembers.Count > 0
            newTeamMembers.Remove (1)
        Loop
    End If
    
    Set rememberNewMembers = newTeamMembers
End Function

Private Sub AppendTableValues(Table As TPGTable, Node As Variant, rowxpath As String, cols As Collection)
    Dim i As Integer
    Dim j As Integer
    Dim n As Variant
    Dim newTeamMembers As Collection
    Dim member As TPGMember
    On Error GoTo suberr
    modStack.PushCallStack "Team", "AppendTableValues"

    Set member = New TPGMember
    Set newTeamMembers = New Collection
    
    If Table.GetUsedRange Is Nothing Then
        i = 0
    Else
        i = Table.GetUsedRange.rows.Count
    End If
    
    For Each n In Node.SelectNodes(rowxpath)
        If Not IsTeamMember(n) Then
            rememberNewMembers n.SelectSingleNode("name").Text
            Table.AddRow
            i = i + 1
            For j = 1 To cols.Count
                If cols(j).ColumnType = tagColumn Then
                    Table.ValuesRange.Cells(i, cols(j).columnIndex).value = Loc.Translation(n.SelectSingleNode(cols(j).ColumnName).Text)
                Else
                    Table.ValuesRange.Cells(i, cols(j).columnIndex).value = CastStringToVar(n.SelectSingleNode(cols(j).ColumnName).Text)
                End If
            Next
        End If
        Table.Mergedfit Table.ValuesRange.Cells(i, 1)
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.AppendTableValues error:"
    Resume subend
End Sub

Private Function IsTeamMember(aNode As Variant) As Boolean
    Dim s As String
    s = aNode.SelectSingleNode("name").Text
    IsTeamMember = IsStringInRange(s, Team.Range("Team.Table"))
End Function

Public Function RenameOrgUnitInTeam(sorgold As String, sorgnew As String) As Boolean
Dim c As Variant
Dim s As String
    On Error GoTo suberr
    modStack.PushCallStack "Team", "RenameOrgUnitInTeam"
    
    Me.noupdate = True
    s = "Team.Table"
    For Each c In Range(s).offset(1, Team.Range("Team.DepartmentColumn").Column - Team.Range(s).Column).Resize(Range(s).rows.Count - 2, 1)
        If c.value <> "" Then
            If c.value = sorgold Then
                c.value = sorgnew
            End If
        End If
    Next
    RenameOrgUnitInTeam = True
subend:
    Me.noupdate = False
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.RenameOrgUnitInTeam error:"
    GoTo subend
End Function

'-----------------------------------------------------------------------------------------------------------------
Public Sub cmdUpdate_Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "cmdUpdate_Click"
    
    If IsDemoVersion Then GoTo subend
    
    'only when we are NOT in a KISS licence
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
        Application.ScreenUpdating = False
        RefreshOrgChart
        RefreshRolesChart
        RefreshSubteamChart
        ddlSetView
    End If
subend:
    Application.ScreenUpdating = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.cmdUpdate_Click error:"
    Resume subend
End Sub

Public Sub ddlSetView()
    On Error GoTo suberr
    modStack.PushCallStack "Team", "ddlSetView"

    
    HideAll
    If Config.Range("Config.SelectedOrg").value = 1 Then  ' Departments
        RefreshOrgChart
        UnhideDepartments
    ElseIf Config.Range("Config.SelectedOrg").value = 2 Then ' Roles
        RefreshRolesChart
        UnhideRoles
    Else  ' Subteams
        RefreshSubteamChart
        UnhideSubteams
    End If
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.ddlSetView error:"
    Resume subend
End Sub

Private Sub UnhideRoles()
    On Error GoTo suberr
    modStack.PushCallStack "Team", "UnhideRoles"

    Range(Range("Org.Owner"), Range("Org.Assistants")).EntireRow.Hidden = False ' we re-use the departments header
    Range(Range("Org.StartRole").Cells(1), Range("Org.RoleFooter").Cells(1)).EntireRow.Hidden = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.UnhideRoles error:"
    Resume subend
End Sub

Private Sub UnhideSubteams()
    On Error GoTo suberr
    modStack.PushCallStack "Team", "UnhideSubteams"

    Range(Range("Org.OwnerSub").Cells(1), Range("Org.FooterSub").Cells(1)).EntireRow.Hidden = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.UnhideSubteams error:"
    Resume subend
End Sub


Private Sub UnhideDepartments()
    On Error GoTo suberr
    modStack.PushCallStack "Team", "UnhideDepartments"

    Range(Range("Org.Owner").Cells(1), Range("Org.Footer").Cells(1)).EntireRow.Hidden = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.UnhideDepartments error:"
    Resume subend
End Sub

Public Sub ShowHideChart()
    Dim bhidden As Boolean
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "ShowHideChart"

    If Config.Range("Config.SelectedOrg").value = 1 Then  ' Departments
        bhidden = Range("Org.Owner").EntireRow.Hidden
    ElseIf Config.Range("Config.SelectedOrg").value = 2 Then ' Roles
        bhidden = Range("Org.Owner").EntireRow.Hidden
    Else  ' Subteams
        bhidden = Range("Org.OwnerSub").EntireRow.Hidden
    End If
    
    ' if bhidden = TRUE then all is hidden and we have to show
    If bhidden Then
        If Config.Range("Config.SelectedOrg").value = 1 Then  ' Departments
            UnhideDepartments
        ElseIf Config.Range("Config.SelectedOrg").value = 2 Then ' Roles
            UnhideRoles
        Else  ' Subteams
            UnhideSubteams
        End If
    Else
    'otherwise hideall
        HideAll
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.ShowHideChart error:"
    Resume subend
End Sub

Private Sub HideAll()
    On Error GoTo suberr
    modStack.PushCallStack "Team", "HideAll"

    Range(Range("Org.Owner"), Range("Org.FooterSub")).EntireRow.Hidden = True

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.HideAll error:"
    Resume subend
End Sub


Friend Function GetMembersAsString(Role As String) As String
    Dim Team As TPGTeam
    Dim members As Collection
    Dim member As TPGMember
    Dim result As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "GetMembersAsString"

    Set Team = GetTeam
    Set members = Team.GetMembers(Role)
    For Each member In members
        result = result + member.GetLabel + ", "
    Next
    If Len(result) > 2 Then
        result = Left$(result, Len(result) - 2)
    End If
    GetMembersAsString = result

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.GetMembersAsString error:"
    Resume subend
End Function

Public Sub RefreshRolesChart()
    Dim membersString As String
    Dim participantsString As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "RefreshRolesChart"

    membersString = GetMembersAsString(appGetLOCText("role_member"))
    participantsString = GetMembersAsString(appGetLOCText("role_Participant"))
    
    Range("Org.ProjectTeamMembers").value = membersString
    AutoFitMergedCell Range("Org.ProjectTeamMembers"), 20
    Range("Org.Projectparticipants").value = participantsString
    AutoFitMergedCell Range("Org.Projectparticipants"), 20

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.RefreshRolesChart error:"
    Resume subend
End Sub

Friend Function GetTeam() As TPGTeam
    Dim ProjectTeam As TPGTeam
    Dim cell As Range
    Dim member As TPGMember
    Set ProjectTeam = New TPGTeam
        
    For Each cell In Team.rGUIDs
        Set member = New TPGMember
        member.LoadMemberFromTeam cell
        If member.ShowInOrg = True Then ProjectTeam.members.AddMember member
    Next
    Set GetTeam = ProjectTeam
End Function



Public Sub RefreshOrgChart()
    Dim cell As Range
    Dim j As Integer
    Dim ProjectTeam As TPGTeam
    Dim assistantLabel As String
    Dim coachLabel As String
    Dim controllerLabel As String
    Dim assistants As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "RefreshOrgChart"

    Set ProjectTeam = GetTeam
    
    For Each cell In Admin.Range("Admin.Unit")    '  Admin.Range("Admin.Org")
        If cell.value <> "" Then
            If ProjectTeam.MembersOfDepartment(cell.value) > 0 Then ProjectTeam.AddDepartment cell.value
        End If
    Next
    If ProjectTeam.MembersOfDepartment("") > 0 Then ProjectTeam.AddDepartment ""
        
    reset True
    
    'Set Owner, PM, etc...
    Me.Range("Org.Owner").Resize(1, 1).value = PrepareLabel(ProjectTeam.GetMembers(appGetLOCText("role_owner")), "ownershort")
    Me.Range("Org.Commitee").Resize(1, 1).value = PrepareLabel(ProjectTeam.GetMembers(appGetLOCText("role_committee")), "committeeshort")
    Me.Range("Org.Manager").Resize(1, 1).value = PrepareLabel(ProjectTeam.GetMembers(appGetLOCText("role_manager")), "managershort")
    assistantLabel = PrepareLabel(ProjectTeam.GetMembers(appGetLOCText("role_assistant")), "assistantshort")
    coachLabel = PrepareLabel(ProjectTeam.GetMembers(appGetLOCText("role_coach")), "coach")
    controllerLabel = PrepareLabel(ProjectTeam.GetMembers(appGetLOCText("role_controller")), "controllershort")
    
    assistants = ""
    If VBA.Len(assistantLabel) > 0 Then assistants = assistantLabel & ","
    If VBA.Len(coachLabel) > 0 Then assistants = assistants & coachLabel & ","
    If VBA.Len(controllerLabel) > 0 Then assistants = assistants & controllerLabel & ","
    If VBA.Len(assistants) > 0 Then assistants = VBA.Left(assistants, VBA.Len(assistants) - 1)
    Me.Range("org.assistants").Resize(1, 1).value = assistants
    
    AutoFitMergedCell Me.Range("Org.Owner").Resize(1, 1), 20
    AutoFitMergedCell Me.Range("Org.Commitee").Resize(1, 1), 15
    AutoFitMergedCell Me.Range("Org.Manager").Resize(1, 1), 20
    AutoFitMergedCell Me.Range("Org.assistants").Resize(1, 1), 15
    
    'Build Departmentstructure
    Dim TeamNumber As Integer
    TeamNumber = ProjectTeam.DepartmentCount
           
    Dim neededRows As Integer
    Dim StartPointOffset As Integer
    Dim Count As Integer
    Dim startDep As Integer
    Dim TeamsInRow As Integer
    StartPointOffset = 1
          
    Do While Count < TeamNumber
        TeamsInRow = GetLayout(TeamNumber - Count)
               
        startDep = Count + 1
        neededRows = ProjectTeam.MaxOrgChartHeight(startDep, startDep + TeamsInRow - 1) + 1
        
        CreateRows neededRows, StartPointOffset
        
        Dim StartPoint As Range
        For j = 1 To TeamsInRow
            Set StartPoint = Cells(Me.Range("Org.StartRow").offset(StartPointOffset).row, GetOffset(j, TeamsInRow))
            DrawDepartment ProjectTeam, ProjectTeam.deps(Count + j), StartPoint
        Next
        StartPointOffset = StartPointOffset + neededRows
        Count = Count + TeamsInRow
    Loop

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.RefreshOrgChart error:"
    Resume subend
End Sub

Public Sub RefreshSubteamChart()
    Dim cell As Range
    Dim j As Integer
    Dim ProjectTeam As TPGTeam
    Dim assistantLabel As String
    Dim coachLabel As String
    Dim controllerLabel As String
    Dim assistants As String
    Dim subTeamRange As Range
    
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "RefreshSubteamChart"

    Set ProjectTeam = GetTeam
    
    Set subTeamRange = Intersect(Team.Range("Team.SubteamColumn"), Team.GetTable.ValuesRange)
    
'    For Each cell In Admin.Range("Admin.Org")
    For Each cell In subTeamRange
        If cell.value <> "" Then
            If ProjectTeam.MembersOfSubteam(cell.value) > 0 Then ProjectTeam.AddDepartment cell.value
        End If
    Next
    If ProjectTeam.MembersOfDepartment("") > 0 Then ProjectTeam.AddDepartment ""
        
    'reset
    
    'Set Owner, PM, etc...
    Me.Range("Org.OwnerSub").Resize(1, 1).value = PrepareLabel(ProjectTeam.GetMembers(appGetLOCText("role_owner")), "ownershort")
    Me.Range("Org.CommiteeSub").Resize(1, 1).value = PrepareLabel(ProjectTeam.GetMembers(appGetLOCText("role_committee")), "committeeshort")
    Me.Range("Org.ManagerSub").Resize(1, 1).value = PrepareLabel(ProjectTeam.GetMembers(appGetLOCText("role_manager")), "managershort")
    assistantLabel = PrepareLabel(ProjectTeam.GetMembers(appGetLOCText("role_assistant")), "assistantshort")
    coachLabel = PrepareLabel(ProjectTeam.GetMembers(appGetLOCText("role_coach")), "coach")
    controllerLabel = PrepareLabel(ProjectTeam.GetMembers(appGetLOCText("role_controller")), "controllershort")
    
    assistants = ""
    If VBA.Len(assistantLabel) > 0 Then assistants = assistantLabel & ","
    If VBA.Len(coachLabel) > 0 Then assistants = assistants & coachLabel & ","
    If VBA.Len(controllerLabel) > 0 Then assistants = assistants & controllerLabel & ","
    If VBA.Len(assistants) > 0 Then assistants = VBA.Left(assistants, VBA.Len(assistants) - 1)
    Me.Range("org.assistantsSub").Resize(1, 1).value = assistants
    
    AutoFitMergedCell Me.Range("Org.OwnerSub").Resize(1, 1), 20
    AutoFitMergedCell Me.Range("Org.CommiteeSub").Resize(1, 1), 15
    AutoFitMergedCell Me.Range("Org.ManagerSub").Resize(1, 1), 20
    AutoFitMergedCell Me.Range("Org.assistantsSub").Resize(1, 1), 15
    
    'Build Departmentstructure
    Dim TeamNumber As Integer
    TeamNumber = ProjectTeam.DepartmentCount
           
    Dim neededRows As Integer
    Dim StartPointOffset As Integer
    Dim Count As Integer
    Dim startDep As Integer
    Dim TeamsInRow As Integer
    StartPointOffset = 1
          
    Do While Count < TeamNumber
        TeamsInRow = GetLayout(TeamNumber - Count)
               
        startDep = Count + 1
        neededRows = ProjectTeam.MaxOrgChartHeightSubteam(startDep, startDep + TeamsInRow - 1) + 1
        
        CreateRowsSub neededRows, StartPointOffset
        
        Dim StartPoint As Range
        For j = 1 To TeamsInRow
            Set StartPoint = Cells(Me.Range("Org.StartRowSub").offset(StartPointOffset).row, GetOffset(j, TeamsInRow))
            DrawDepartmentSub ProjectTeam, ProjectTeam.deps(Count + j), StartPoint
        Next
        StartPointOffset = StartPointOffset + neededRows
        Count = Count + TeamsInRow
    Loop

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.RefreshSubteamChart error:"
    Resume subend
End Sub

Private Sub CreateRowsSub(neededRows As Integer, StartPointOffset As Integer)
    Dim i As Integer
    Dim availableRows As Integer
    On Error GoTo suberr
    modStack.PushCallStack "Team", "CreateRowsSub"

    availableRows = Me.Range("Org.FooterSub").row - (Me.Range("Org.StartRowSub").row + StartPointOffset) - 1
    For i = availableRows To neededRows - 1
        CellFunctions.InsertWrappedOnly Me.Range("Org.FooterSub"), Shift:=xlShiftDown
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.CreateRowsSub error:"
    Resume subend
End Sub


Private Sub CreateRows(neededRows As Integer, StartPointOffset As Integer)
    Dim i As Integer
    Dim availableRows As Integer
    On Error GoTo suberr
    modStack.PushCallStack "Team", "CreateRows"

    availableRows = Me.Range("Org.Footer").row - (Me.Range("Org.StartRow").row + StartPointOffset) - 1
    For i = availableRows To neededRows - 1
        CellFunctions.InsertWrappedOnly Me.Range("Org.Footer"), Shift:=xlShiftDown
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.CreateRows error:"
    Resume subend
End Sub

Private Sub DrawDepartment(t As TPGTeam, DepartmentName As String, R As Range)
    Dim offset As Integer
    'Departmentname
    On Error GoTo suberr
    modStack.PushCallStack "Team", "DrawDepartment"

    '/**Fix for 1705**/
    'Me.Range("Org.TemplateDepartment").Copy
    RCopy Me.Range("Org.TemplateDepartment")
    
    R.PasteSpecial xlPasteFormats
    If DepartmentName = "" Then
        R.value = appGetLOCText("NoDepartment")
    Else
        R.value = DepartmentName
    End If
    offset = 1
    
    'Members and Participants
    offset = offset + DrawMembers(SortCollection(t.GetMembers(appGetLOCText("role_member"), DepartmentName)), R.offset(offset), appGetLOCText("orgmembers"))
    offset = offset + DrawMembers(SortCollection(t.GetMembers(appGetLOCText("role_Participant"), DepartmentName)), R.offset(offset), appGetLOCText("orgparticipants"))

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.DrawDepartment error:"
    Resume subend
    
End Sub

Private Sub DrawDepartmentSub(t As TPGTeam, DepartmentName As String, R As Range)
    Dim offset As Integer
    'Departmentname
    On Error GoTo suberr
    modStack.PushCallStack "Team", "DrawDepartmentSub"

    '/**Fix for 1705**/
    'Me.Range("Org.TemplateDepartment").Copy
    RCopy Me.Range("Org.TemplateDepartment")
    
    'r.PasteSpecial xlPasteFormats
    If DepartmentName = "" Then
        'r.value = appGetLOCText("NoDepartment")
    Else
        R.PasteSpecial xlPasteFormats
        R.value = DepartmentName
    End If
    offset = 1
    
    'Members and Participants
    offset = offset + DrawMembers(SortCollection(t.GetMembers(appGetLOCText("role_member"), Subteam:=DepartmentName)), R.offset(offset), appGetLOCText("orgmembers"))
    offset = offset + DrawMembers(SortCollection(t.GetMembers(appGetLOCText("role_Participant"), Subteam:=DepartmentName)), R.offset(offset), appGetLOCText("orgparticipants"))

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.DrawDepartmentSub error:"
    Resume subend
    
End Sub



Private Function DrawMembers(m As Collection, R As Range, title As String) As Integer
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "Team", "DrawMembers"

    If m.Count > 0 Then
        DrawField title, R, "Org.TemplateRole"
        For i = 1 To m.Count
            DrawField m(i).Name, R.offset(i), "Org.TemplateMember"
        Next
        DrawField "", R.offset(i), "Org.TemplateMember"
        DrawMembers = i + 1
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.DrawMembers error:"
    Resume subend
End Function

Private Sub DrawField(Text As String, Target As Range, template As String)
    On Error GoTo suberr
    modStack.PushCallStack "Team", "DrawField"

    '/**Fix for 1705**/
    'Me.Range(template).Copy
    RCopy Me.Range(template)
    
    Target.PasteSpecial xlPasteFormats
    Target.value = Text
    
    'Added for SALK
    Target.Font.Bold = True

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.DrawField error:"
    Resume subend
End Sub

Private Function PrepareLabel(members As Collection, RoleName As String) As String
    Dim Label As String
    Dim m As TPGMember
    On Error GoTo suberr
    modStack.PushCallStack "Team", "PrepareLabel"

    For Each m In SortCollection(members)
        Label = Label + m.GetLabel + ", "
    Next
    If VBA.Len(Label) > 0 Then
        Label = appGetLOCText(RoleName) & ": " + Label
        Label = VBA.Left(Label, Len(Label) - 2)
    End If
    PrepareLabel = Label

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.PrepareLabel error:"
    Resume subend
End Function

'die wird nicht verwendet.
Private Sub AddNameToField(Label As String, RoleRangeName As String, RoleName)
    Dim oldvalue As String
    Dim Field As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "AddNameToField"

    Set Field = Me.Range(RoleRangeName).Resize(1, 1)
    oldvalue = Field.value
    
    If Len(oldvalue) = 0 Then
        Select Case VBA.LCase(RoleRangeName)
            Case VBA.LCase("Org.Owner")
                Field.value = appGetLOCText("OwnerShort") & ": " & Label
            Case VBA.LCase("Org.Manager")
                Field.value = appGetLOCText("ManagerShort") & ": " & Label
            Case VBA.LCase("Org.Commitee")
                Field.value = appGetLOCText("CommitteeShort") & ": " & Label
            Case VBA.LCase("Org.Assistants")
                Field.value = RoleName & ": " & Label
        End Select
    Else
        If VBA.LCase(RoleRangeName) = VBA.LCase("Org.Assistants") Then
            Field.value = oldvalue & ", " & RoleName & ": " & Label
        Else
            Field.value = oldvalue & ", " & Label
        End If
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.AddNameToField error:"
    Resume subend
    
End Sub

Private Function GetLayout(Count As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "Team", "GetLayout"

    Select Case Count
        Case 1:
            GetLayout = 1
        Case 2:
            GetLayout = 1
        Case 3:
            GetLayout = 3
        Case 4:
            GetLayout = 3
        Case 5:
            GetLayout = 5
        Case 6:
            GetLayout = 3
        Case 7:
            GetLayout = 3
        Case 8:
            GetLayout = 5
        Case 9:
            GetLayout = 3
        Case 10:
            GetLayout = 5
        Case 11:
            GetLayout = 5
        Case 12:
            GetLayout = 5
        Case 13:
            GetLayout = 5
        Case 14:
            GetLayout = 7
        Case 15:
            GetLayout = 5
        Case Else:
            GetLayout = 7
    End Select

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.GetLayout error:"
    Resume subend
End Function

Private Function GetOffset(Count As Integer, depsPerRow As Integer)
    
    On Error GoTo suberr
    modStack.PushCallStack "Team", "GetOffset"

    Select Case depsPerRow
        Case 1:
            GetOffset = block4
        Case 3:
            Select Case Count
                Case 1:
                    GetOffset = block3
                Case 2:
                    GetOffset = block4
                Case 3:
                    GetOffset = block5
            End Select
        Case 5:
            Select Case Count
                Case 1:
                    GetOffset = block2
                Case 2:
                    GetOffset = block3
                Case 3:
                    GetOffset = block4
                Case 4:
                    GetOffset = block5
                Case 5:
                    GetOffset = block6
            End Select
        Case 7:
            Select Case Count
                Case 1:
                    GetOffset = block1
                Case 2:
                    GetOffset = block2
                Case 3:
                    GetOffset = block3
                Case 4:
                    GetOffset = block4
                Case 5:
                    GetOffset = block5
                Case 6:
                    GetOffset = block6
                Case 7:
                    GetOffset = block7
            End Select
    End Select

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.GetOffset error:"
    Resume subend
End Function

Public Sub reset(Optional bOrgOnly As Boolean = False)
Dim R As Range
Dim i As Integer
    'Delete org chart
    On Error GoTo suberr
    modStack.PushCallStack "Team", "reset"
    
    Me.noupdate = True

    'clear org part
    Me.Range("Org.Owner").ClearContents
    Me.Range("Org.Commitee").ClearContents
    Me.Range("Org.Manager").ClearContents
    Me.Range("Org.Assistants").ClearContents
    Me.Range("Org.OwnerSub").MergeArea.ClearContents
    Me.Range("Org.CommiteeSub").MergeArea.ClearContents
    Me.Range("Org.ManagerSub").MergeArea.ClearContents
    Me.Range("Org.AssistantsSub").MergeArea.ClearContents
    Me.Range("Org.ProjectTeamMembers").ClearContents
    Me.Range("Org.Projectparticipants").ClearContents
    If (Me.Range("Org.Footer").row - Me.Range("Org.StartRow").row) > 2 Then
        Me.Range(Me.Range("Org.StartRow").offset(1), Me.Range("Org.Footer").offset(-2)).Delete
    End If
    If (Me.Range("Org.FooterSub").row - Me.Range("Org.StartRowSub").row) > 2 Then
        Me.Range(Me.Range("Org.StartRowSub").offset(1), Me.Range("Org.FooterSub").offset(-2)).Delete
    End If
    
    If Not bOrgOnly Then
        '------------------------- ORI TEAMCODE
        'Reset DL List
        i = Me.Range("Team.DLNames").Columns.Count
        If Me.Range("Team.DLNames").Columns.Count > 3 Then
            Set R = getRange(Me, "Team.DLNames", 1, -3, 0, 2)
            R.EntireColumn.Delete
            'MoveControlsHorizontally Me, 3 - i, "R", 3
        End If
        Me.Range("Team.DLNames").EntireColumn.value = ""
        Me.Range("Team.DLNames").Cells(1, 2).value = "1"
        SetDLNames
        
        Dim rCell As Range
        For Each rCell In Team.GetTable.ValuesRange(1)
            rCell.Interior.Color = RGB(255, 255, 255)
        Next
        
        'Reset Table
        GetTable.clear
        If ((sActiveLicense = "K") Or (sActiveLicense = "D")) Then
            Range("Team.Table").Cells(2, Team.Range("Team.GUIDColumn").Column - 2).value = Cover.Range("Cover.Manager.Table").Cells(2, 1).value
            Range("Team.Table").Cells(2, Team.Range("Team.GUIDColumn").Column - 2).MergeArea.locked = True
            Range("Team.Table").Cells(2, Team.Range("Team.NameColumn").Column - 2).value = Cover.Range("Cover.Manager.Table").Cells(2, 2).value
            Range("Team.Table").Cells(2, Team.Range("Team.NameColumn").Column - 2).MergeArea.locked = True
            Range("Team.Table").Cells(2, Team.Range("Team.RoleColumn").Column - 2).value = appGetLOCText("role_manager")
            Range("Team.Table").Cells(2, Team.Range("Team.RoleColumn").Column - 2).MergeArea.locked = True
            Range("Team.Table").Cells(2, Team.Range("Team.NameColumn").Column - 2).Resize(1, 12).locked = True
            Range("Team.Table").Cells(2, Team.Range("Team.NameColumn").Column - 2).Resize(1, 12).Interior.Color = RGB(242, 242, 242)
        End If
        Range("Team.Table").EntireRow.AutoFit 'autoadjust rowheight
        SetNames
        '---------------------------------------------
        'hide orgchart after reset
        HideAll
    End If
    
subend:
    Me.noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.reset error:"
    Resume subend
End Sub

Private Sub Worksheet_Activate()
    On Error GoTo suberr
    modStack.PushCallStack "Team", "Worksheet_Activate"

'131015    If Me.ProtectContents Then UnprotectSheet Me

    If ModuleExists("PersonalPlanning") Then
        Me.Range("Team.IsResourceColumn").EntireColumn.Hidden = False
    Else
        Me.Range("Team.IsResourceColumn").EntireColumn.Hidden = True
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.Worksheet_Activate error:"
    Resume subend
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (InRange(Target, Me.Range("Team.Table"))) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext False, False
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo suberr
    If noupdate Then Exit Sub
    modStack.PushCallStack "Team", "Worksheet_Change"
    AssertUniqueGuid Target
    Dim member As TPGMember
    'Dim ProjectTeamRange As Range
    'Set ProjectTeamRange = getRange(Team, "Team.Table", -2, 6, 1, 4)
    If InRange(Target, Team.rNames.Resize(, 24)) And ((Target.Column < Team.Range("Team.SubteamColumn").Column) _
        Or (Target.Column >= Team.Range("Team.DepartmentColumn").Column)) Then 'TODO: why?
    'If InRange(Target, Team.rNames) Then
        Dim t As Range
        Set t = Target
        Set member = New TPGMember
        member.LoadMemberFromTeam Team.Cells(Target.row, Team.Range("Team.GUIDColumn").Column)
        member.SyncToContract
        If member.Name = "" Then
            noupdate = True
            Team.Cells(Target.row, Team.Range("Team.GUIDColumn").Column).value = ""
            Team.Cells(Target.row, Team.Range("Team.RACIColumn").Column).value = ""
            Team.Cells(Target.row, Team.Range("Team.OrgColumn").Column).value = ""
            noupdate = False
        End If
        If member.department <> "" And Team.Cells(Target.row, Team.Range("Team.DepartmentColumn").Column).value <> "" Then
            'modified for SALK
  
             Admin.AppendOrgUnit (Team.Cells(Target.row, Team.Range("Team.DepartmentColumn").Column).value)
'            If Not Contract.ResourceInUse(member.Department) Then
'                appMsg appGetLOCText("msgorgunitnotinuse"), vbInformation
'            End If
        End If
        Cover.noupdate = True
        Cover.RefreshTeam
        Cover.noupdate = False
        SetNames
        'if name was changed then do the duplicate check
        If Target.Column = Team.Range("Team.NameColumn").Column Then
            Me.DuplicateNameCheck CStr(Team.Cells(Target.row, Team.Range("Team.NameColumn").Column).value)
        End If
    ElseIf InRange(Target, Team.Range("Team.DLNames")) Then
        ActiveCell.EntireColumn.AutoFit
        SetDLNames
    ElseIf (Target.Column = Me.Range("Team.EmailColumn").Column) And _
        (Target.row > Me.Range("Team.TableHeader").row) Then
        On Error Resume Next
        Target.Font.Name = "Segoe UI"
        Target.Font.Size = 9
    End If
    If GetTable.Mergedfit(Target) Then GoTo subend
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Team.Worksheet_Change error:"
    Resume subend
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub

Public Function GetEmailAddress(sname As String) As String
Dim c As Range
For Each c In Me.rNames
    If c.value = sname Then
        GetEmailAddress = Me.Cells(c.row, Me.Range("Team.EmailColumn").Column).value
    End If
Next
End Function

Public Function GetResColor(sname As String) As Variant
Dim i As Integer
Dim icolname As Integer
Dim icolcolor As Integer
icolname = Team.Range("Team.NameColumn").Column
icolcolor = Team.Range("Team.IsResourceColumn").Column
GetResColor = RGB(255, 255, 255)
For i = (Me.Range("Team.TableHeader").row + 1) To (Me.Range("Team.Tablefooter").row - 1)
    If Me.Cells(i, icolname).value = sname Then
        GetResColor = Me.Cells(i, icolcolor).Interior.Color
        Exit For
    End If
Next
End Function

Public Sub DuplicateNameCheck(sname As String)
'look if sname occurs more than one time in the list of names
Dim icolname As Integer
Dim icount As Integer
Dim i As Integer
If sname = "" Then Exit Sub
icount = 0
icolname = Team.Range("Team.NameColumn").Column
For i = (Me.Range("Team.TableHeader").row + 1) To (Me.Range("Team.Tablefooter").row - 1)
    If LCase(Me.Cells(i, icolname).value) = LCase(sname) Then
        icount = icount + 1
        If icount > 1 Then Exit For
    End If
Next
If icount > 1 Then
    AppInfoMsg (Replace(appGetLOCText("msgduplicatename"), "%1", sname))
End If
End Sub

'-----------------------------------------------------------------------------
' (kissimport)
'-----------------------------------------------------------------------------

Private Function GetCols_Kiss(Optional bDepTranslation As Boolean = True) As Collection
    Dim cols As New Collection
    Dim i As Integer

    On Error GoTo suberr
    modStack.PushCallStack "Team", "GetCols_Kiss"

    cols.Add GetTPGColumn("company", 2)
    cols.Add GetTPGColumn("id", 50)
    cols.Add GetTPGColumn("name", 8)
    cols.Add GetTPGColumn("role", 14, tagColumn)
    cols.Add GetTPGColumn("subteam", 20)
    cols.Add GetTPGColumn("fd", 32)
    If bDepTranslation Then
        cols.Add GetTPGColumn("department", 26, kissDepartment)
    Else
        cols.Add GetTPGColumn("department", 26)
    End If
    cols.Add GetTPGColumn("org", 33)
    cols.Add GetTPGColumn("phone", 34)
    cols.Add GetTPGColumn("email", 40)
    cols.Add GetTPGColumn("dl1", 52)
    'For i = 1 To Range("Team.DLNames").Columns.Count - 2
      '  cols.Add GetTPGColumn("dl" & i, 13 + i)
    'Next
    Set GetCols_Kiss = cols

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Team.GetCols_Kiss error:"
    Resume subend
End Function

'-----------------------------------------------------------------------------

Attribute VB_Name = "TemplateSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Dim noupdate As Boolean

Private Function GetTable() As TPGTable
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "TemplateSheet", "GetTable"

'    Set T = New TPGTable
'    T.SetTable Me.Range("Contents.Links.Table"), True, False, TemplateBeforeHeader, 5
'    Set GetTable = T

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TemplateSheet.GetTable error:"
    Resume subend
End Function

Private Function GetCols() As Collection
    Dim cols As New Collection
        
    On Error GoTo suberr
    modStack.PushCallStack "TemplateSheet", "GetCols"
    
'    Cols.Add GetTPGColumn("linkname", 1)
'    Cols.Add GetTPGColumn("linkurl", 2)
'    Set GetCols = Cols
    
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TemplateSheet.GetCols error:"
    Resume subend
End Function

Public Sub cmdInsert_Click()

    On Error GoTo suberr
    modStack.PushCallStack "TemplateSheet", "cmdInsert_Click"
    
    GetTable.InsertRow_Clicked ActiveCell
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TemplateSheet.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()

    On Error GoTo suberr
    modStack.PushCallStack "TemplateSheet", "cmdDelete_Click"
    
    GetTable.DeleteRow_Clicked ActiveCell
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TemplateSheet.cmdDelete_Click error:"
    Resume subend
End Sub

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "TemplateSheet", "CreateXml"
    
    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
'    n.appendchild GetNodeFromTable(xmlDom, "links", "link", GetTable.ValuesRange, GetCols)
'...
    
    Set CreateXml = n
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "TemplateSheet.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant)
    
    On Error GoTo suberr
    modStack.PushCallStack "TemplateSheet", "ImportXml"
    
    If Not Node Is Nothing Then
'        reset
'        ImportTableValues GetTable, Node, "links/link", GetCols
'...
    End If
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TemplateSheet.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    
    On Error GoTo suberr
    modStack.PushCallStack "TemplateSheet", "reset"
    
    noupdate = True
'    GetTable.clear
'    ....
    noupdate = False

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "TemplateSheet.reset error:"
    Resume subend
End Sub


Attribute VB_Name = "TestFunctions"
Option Explicit

' functions to simplify PHB testing

'now revertable!
'paints all unprotected cells in a red grid
Public Sub HighlightAllUnprotectedCells(Optional PaintGrid As Boolean = True)
    Dim R As Range
    Dim s As Worksheet
    Dim addr As String
    'MsgBox "This macro is for testing only. Never save the PHB after you have performed this makro", vbInformation, "Attention"
    
    For Each s In Sheets
        
        If s.visible = xlSheetVisible Then
            s.Activate
            addr = s.PageSetup.PrintArea
            If addr <> "" Then
                s.Range(addr).Select
                Debug.Print "ShowAllUnprotectedCells processing: " & s.CodeName
                For Each R In selection
                    If Not R.locked Then
                        If PaintGrid Then
'                            If r.Interior.Pattern <> xlSolid Then
'                                debug.print "skipping cell " & s.CodeName & "." & r.Address & "; this cell already has a pattern on it."
'                            Else
                                R.Interior.PatternColor = 255
                                R.Interior.Pattern = xlGrid 'Color = 13551615
'                            End If
                        Else
'                            If r.Interior.Pattern <> xlGrid Then
'                                debug.print "skipping cell " & s.CodeName & "." & r.Address & "; this cell has a mismatching pattern on it."
'                            Else
                                R.Interior.PatternColorIndex = xlAutomatic
                                R.Interior.Pattern = xlSolid
'                            End If
                        End If
                    End If
                Next
            End If
        End If
        
    Next s
    'MsgBox "DONE. Remember: Never save the PHB after you have performed this makro", vbInformation, "Attention"
End Sub

Public Sub ExportNamedRanges()
'    If magicString <> sExcelPwd Then Exit Sub
    Dim fs
    Dim FileName As String
    Dim n As Name
    
    Set fs = CreateObject("Scripting.FileSystemObject")
    'If Not fs.FolderExists(GetExportFolder) Then fs.CreateFolder (GetExportFolder)

    FileName = ActiveWorkbook.Path & "\ranges_test.txt"
    fs = FreeFile()
    Open FileName For Output As fs
    Print #fs, Now() & "    " & ActiveWorkbook.FullName
    Write #fs,
    
    For Each n In ActiveWorkbook.Names
        Print #fs, n.Name & " : " & n.RefersTo
    Next
    Close #fs
End Sub


Sub makelastcell()
  'David McRitchie,  http://www.mvps.org/dmcritchie/excel/lastcell.htm
  Dim x As Long     'revised 2001-08-09 to remove false indication
  Dim str As String    'revised 2006-07-05 for lastcell to be is a merged cell
  Dim xLong As Long, clong As Long, rlong As Long
  On Error GoTo 0
  x = MsgBox("Do you want the activecell to become " & _
      "the lastcell" & Chr(10) & Chr(10) & _
      "Press OK to Eliminate all cells beyond " _
      & ActiveCell.Address(0, 0) & Chr(10) & _
      "Press CANCEL to leave sheet as it is", _
      vbOKCancel + vbCritical + vbDefaultButton2)
  If x = vbCancel Then Exit Sub
  str = ActiveCell.Address
  Range(ActiveCell.row + ActiveCell.MergeArea.rows.Count & ":" & Cells.rows.Count).Delete
  Range(Cells(1, ActiveCell.Column + ActiveCell.MergeArea.Columns.Count), _
     Cells(Cells.rows.Count, Cells.Columns.Count)).Delete
  xLong = ActiveSheet.UsedRange.rows.Count   'see J-Walkenbach tip 73
  xLong = ActiveSheet.UsedRange.Columns.Count 'might also help

  Beep
  rlong = Cells.SpecialCells(xlLastCell).row
  clong = Cells.SpecialCells(xlLastCell).Column
  If rlong <= ActiveCell.row And clong <= ActiveCell.Column Then Exit Sub
  MsgBox "Sorry, Have failed to make " & str & " your last cell, " _
     & "possible merged cells involved, check your results"
End Sub


Sub TestPlanClass()
    Dim oPlan As TPGPlan
    Dim oTask As TPGPlanTask
    Dim v As Variant

    Set oPlan = New TPGPlan

'    For Each v In oPlan.CostTypes
'        Debug.Print v
'    Next
'
'    For Each v In oPlan.Departments
'        Debug.Print v
'    Next

    For Each oTask In oPlan.Tasks
        Debug.Print oTask.uid & ": " & oTask.id & ": " & oTask.FBaseStart & ": " & oTask.BaseStart
    Next

'        Dim i As Integer
'        For i = 1 To oPlan.Tasks.Count
'            Debug.Print oPlan.Tasks(i).uid & ": " & oPlan.Tasks(i).id & ": " & oPlan.Tasks(i).StartDate
'        Next
    
    
'    oPlan.Tasks(6).Name = "modTask1"
End Sub


Sub tRaiseErr()


    On Error GoTo suberr
    modStack.PushCallStack "TestFunctions", "tRaiseErr"

    err.Raise 1234

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg
    Resume subend
End Sub


Sub testappendxml()

    Dim metadata
    Dim sversion As String
    Dim OBJXMLDOC As Variant
    Dim language As Integer
    Dim sht As Worksheet

    Set OBJXMLDOC = CreateObject("Microsoft.XMLDOM")
    OBJXMLDOC.async = False
    OBJXMLDOC.LoadXML Config.Range("I18")
    
    Set metadata = OBJXMLDOC.SelectSingleNode("/phb/metadata")
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_Activate()
    modCopyPaste.ForcePasteSpecial
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
On Error Resume Next
If Meeting.smeetingfilenamepdf <> "" Then
    KillMeetingFiles appGetLOCText("minutes") + "_"
    KillMeetingFiles appGetLOCText("invitation") + "_"
End If
End Sub

Public Sub KillMeetingFiles(sprefix As String)
On Error GoTo err
    Dim StrFile As String
    StrFile = Dir(ActiveWorkbook.Path + "\" + sprefix + "*.pdf")
    Do While Len(StrFile) > 0
        'Debug.Print StrFile
        kill ActiveWorkbook.Path + "\" + StrFile
        StrFile = Dir
    Loop
    Exit Sub
err:
Debug.Print err.Description
End Sub

Private Sub Workbook_Open()

'to DEACTIVATE a demo version:
'1. replace Demo with FALSE in the next line of code
'2. save and close this workbook
'3. reopen and activate macros
'4. unhide all sheets, goto config_lic, set license settings as required, run 'set license' and run 'prepareworkbook'
If Demo Then
    If Config_Lic.Range("Config.Demo.Finished").value = "finished" Then
        AppStopMsg appGetLOCText("msgDemoFinished")
        ActiveWorkbook.Close False
        Exit Sub
    Else
        Dim d As Variant
        d = Config_Lic.Range("Config.Demo.EndDate")
        If IsDate(d) Then
            If DateSerial(Year(Now()), Month(Now()), Day(Now())) > d Then
                AppStopMsg appGetLOCText("msgDemoFinishing")
                Config_Lic.Range("Config.Demo.Finished").value = "finished"
                ActiveWorkbook.Close True
                Exit Sub
            End If
        End If
    End If
End If

'enable uiprotection for activesheet
EnsureUIProtection ActiveSheet

sActiveLicense = pStrVersion

'If (Environ("COMPUTERNAME") = "BDO999") And (Environ("USERDOMAIN") = "BDO999") Then
'    SendKeys ("%{f11}")
'    Application.OnTime Now + TimeSerial(0, 0, 2), "ThisWorkbook.UnLockPHB"
'End If
End Sub

Private Sub Workbook_SheetActivate(ByVal Sh As Object)
'Debug.Print "activate " & Sh.Name

    On Error GoTo suberr
    modStack.PushCallStack "ThisWorkbook", "Workbook_SheetActivate"

    If Not IsConfigSheet(Sh) Then
        If (Sh.CodeName = "Work") Or (Sh.CodeName = "Statusreport") Or (Sh.CodeName = "WP") Then
            modShapes.RearrangeControls Sh
        End If
        
        modShapes.PositionLogo_v3 Sh
        
        If Sh.ChartObjects.Count > 0 Then
            modShapes.SetCharts Sh
        End If
        If Not bNoScrollTop Then
            If SheetScrollTop(Sh) Then appScrollTop
        End If
        If Not modRibbon.bnoRibbonUpdate Then modRibbon.RefreshRibbon
    Else
        If Not modRibbon.bnoRibbonUpdate Then modRibbon.RefreshRibbon
    End If

'18.07.13
If Not DEV_MODE Then
    If Not bNoNormalProtectActionsRequired Then
        If Not modApp.ProtectionRemoved Then
            'ProtectSheet sh
            EnsureUIProtection Sh
        End If
    End If
End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ThisWorkbook.Workbook_SheetActivate error:"
    Resume subend
End Sub
    


Private Sub UnLockPHB()
    On Error GoTo suberr
    modStack.PushCallStack "ThisWorkbook", "UnLockPHB"
    
    SendKeys ("^r")
    SendKeys ("{Tab}")
    SendKeys ("{Enter}")
    SendKeys ("QWERTZUIOP|fffd|*<yxcvbnm,.-")
    SendKeys ("{Enter}")

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ThisWorkbook.UnLockPHB error:"
    Resume subend
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

    On Error GoTo suberr
   ' modStack.PushCallStack "ThisWorkbook", "Workbook_BeforeSave"

'    If (CBool(GetCustomProperty(Config, "OpenedForEditing"))) Or (Config.visible = xlSheetVisible) Then
'        Dim iVersion As Integer
'
'        If Len(GetCustomProperty(Config, "CurrentVersion")) > 8 Then
'            iVersion = CInt(Right(GetCustomProperty(Config, "CurrentVersion"), 4))
'        Else
'            iVersion = 0
'        End If
'        SetCustomProperty Config, "LastEditDate", CStr(Now)
'        SetCustomProperty Config, "LastEditBy", Application.UserName
'        SetCustomProperty Config, "CurrentVersion", CStr(GetVersionNo & "." & Strings.Format(iVersion + 1, "0000"))
'        SetCustomProperty Config, "OpenedForEditing", "False"
'        'Config.Range("Config.CurrentVersion").value = GetVersionNo & "." & Strings.Format(iVersion + 1, "0000")
'        'Config.Range("Config.LastEditDate").value = Now
'    End If

subend:
'    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "ThisWorkbook.Workbook_BeforeSave error:"
    Resume subend
End Sub

Private Sub Workbook_Deactivate()
    modContextMenu.RestoreDefaultMenu
    
    modCopyPaste.ForcePasteSpecial
End Sub

Private Sub Workbook_SheetDeactivate(ByVal Sh As Object)
'18.07.13
'131015
If Not bNoNormalProtectActionsRequired Then UnprotectSheet Sh

'

End Sub
Attribute VB_Name = "WBS"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public noupdate As Boolean

'---------------------------------------------------------------------------------------
' SetColumnWidths
' restore the default column widths - solution to some strange excel bug
' @date     17.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub SetColumnWidths()
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "SetColumnWidths"

    
    Me.UsedRange.Columns.ColumnWidth = 2.14
    Me.Columns(1).ColumnWidth = 1 '0.42
    Me.Columns(2).ColumnWidth = 1 ' 4.29
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WBS.SetColumnWidths error:"
    Resume subend
End Sub

Private Sub Worksheet_Activate()
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "Worksheet_Activate"

    'appScrollTop
    SetColumnWidths
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WBS.Worksheet_Activate error:"
    Resume subend
End Sub

Public Sub cmdUpdate_Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "cmdUpdate_Click"
    
    CreateWBSStructure True
    SetColumnWidths
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WBS.cmdUpdate_Click error:"
    Resume subend
End Sub

Public Sub cmdGoToWP_Click()
    Dim n As Name
    Dim pspcode As String
    Dim row As Integer
    Dim R, rToBeSearched As Range
    Dim planWPTable As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "cmdGoToWP_Click"

    On Error GoTo subend ' for example if the WP sheet is hidden because of the complexity settings
    
    Set planWPTable = Plan.Range("Plan.WPs")
    
    For Each n In WBS.Names
        If VBA.InStr(n.NameLocal, "WBS.") Then
            If Not Intersect(Range(n.NameLocal), ActiveCell) Is Nothing Then
                pspcode = (Replace("{" + Split(n.NameLocal, ".")(1) + "}", "_", "-"))
                Set rToBeSearched = Intersect(Plan.Range(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.ProjectFooter")), Plan.Range("Plan.UIDColumn"))
                Set R = CellFunctions.AdvancedFind(rToBeSearched, pspcode)
                If R Is Nothing Then
                    row = planWPTable.row + 1
                Else
                    row = R.row
                End If
                WPDetails.Range("WPDetails!$A$1").value = row - planWPTable.row + 1
                wp.cboWPs_Change
                Sheets(appGetLOCText("WPSheet")).Select
                GoTo subend
            End If
        End If
    Next

subend:
    modStack.PopCallStack
    modApp.UnprotectSheet Me
    Exit Sub
suberr:
    AppErrMsg "WBS.cmdGoToWP_Click error:"
    Resume subend
End Sub

Private Sub ClearBorderRemnants()
    ' cosmetic that removes a disturbing cell border line
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "ClearBorderRemnants"

    With Range("A3:AK3")
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        .Borders(xlEdgeLeft).LineStyle = xlNone
        .Borders(xlEdgeTop).LineStyle = xlNone
        .Borders(xlEdgeBottom).LineStyle = xlNone
        .Borders(xlEdgeRight).LineStyle = xlNone
        .Borders(xlInsideVertical).LineStyle = xlNone
    End With

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WBS.ClearBorderRemnants error:"
    Resume subend
End Sub

Public Sub CreateWBSStructure(Validate As Boolean)
    Dim n As Name
    noupdate = True
        
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "CreateWBSStructure"
    UnprotectSheet WBS
    If Validate Then
        Plan.ValidatePlan
    End If
    
    Dim rangePrintArea As Range
    Set rangePrintArea = Range(WBS.PageSetup.PrintArea)
    Set rangePrintArea = Range(Cells(2, 2), Cells(5, rangePrintArea.Columns.Count))
    rangePrintArea.Borders(xlEdgeRight).LineStyle = xlLineStyleNone
    
    For Each n In WBS.Names
        If VBA.InStr(n.NameLocal, "WBS.") Then
            n.Delete
        End If
    Next
    
    Range(Range("WBS.H2").offset(2, 0), Cells(WBS.rows.Count, 1)).EntireRow.Delete
    With Cells
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        .Borders(xlEdgeLeft).LineStyle = xlNone
        .Borders(xlEdgeTop).LineStyle = xlNone
        .Borders(xlEdgeBottom).LineStyle = xlNone
        .Borders(xlEdgeRight).LineStyle = xlNone
        .Borders(xlInsideVertical).LineStyle = xlNone
        .Borders(xlInsideHorizontal).LineStyle = xlNone
    End With
    WBS.Range("wbs.H0").offset(2, 0).Resize(1000, 1).EntireRow.Interior.Pattern = xlNone
    
    Dim listIndex As Integer
    listIndex = Config.Range("Config.CurrentWBSTemplate").value
    
    Dim templateWbsSheet As Worksheet
    
    Set templateWbsSheet = Sheets("WBSTemplate" + VBA.Trim(CStr(listIndex)))
    
    
    Dim taskGapX As Integer
    Dim taskGapY As Integer
    taskGapX = 2
    taskGapY = 2
    
    Dim taskTemplate, template As Range
    Set taskTemplate = templateWbsSheet.Range(templateWbsSheet.Name + ".Task.NotStarted")
    Dim startingPoint As Range
    Set startingPoint = templateWbsSheet.Range(templateWbsSheet.Name + ".StartingPoint")
    
    Dim currenttask As TPGTask
    Set currenttask = New TPGTask
    currenttask.SetIndex Plan.Range("Plan.ProjectHeader").row
    Dim startingRowIndexForTasks As Integer
    startingRowIndexForTasks = startingPoint.row + taskTemplate.rows.Count + taskGapY
    Dim startingColumnIndexForTasks As Integer
    startingColumnIndexForTasks = startingPoint.Column
    
    Dim startRowIndex As Integer
    Dim endRowIndex As Integer
    Dim currentIndex As Integer
    Dim currentTaskRange As Range
    Dim currentX As Integer
    Dim currentY As Integer
    Dim maxCurrentX As Integer
    Dim level1Count As Integer
    startRowIndex = Plan.Range("Plan.ProjectHeader").row + 1
    endRowIndex = Plan.Range("Plan.ProjectFooter").row - 1
    level1Count = 0
    maxCurrentX = 0
    Dim lastRanges() As Range
    Dim currentLevel As Integer
    Dim lastlevel As Integer
    Dim i As Integer
    currentLevel = 0
    Set currentTaskRange = Nothing
    ReDim lastRanges(1) As Range
    Dim levelOneRanges() As Range
    ReDim levelOneRanges(1) As Range
    Dim maxY As Integer
    Dim maxX As Integer
    maxY = 0
    maxX = 0
    Dim rPhasesUnion As Range
    
    
    If endRowIndex > startRowIndex Then
    
        For currentIndex = startRowIndex To endRowIndex
            currenttask.SetIndex currentIndex
            
            If (Not currenttask.isHidden) Then
                 Set template = GetTemplate(templateWbsSheet.Name, currenttask)

                 lastlevel = currentLevel
                 currentLevel = currenttask.GetLevel
                
                 If (currenttask.GetLevel = 2) Then
                     currentX = startingColumnIndexForTasks
                     If (maxCurrentX < currentX) Then maxCurrentX = currentX
                 ElseIf (currenttask.GetLevel > 2) Then
                     currentX = startingColumnIndexForTasks + taskGapX * (currenttask.GetLevel - 2)
                     If (maxCurrentX < currentX) Then maxCurrentX = currentX
                 ElseIf (currenttask.GetLevel = 1) Then
                     If (maxCurrentX = 0) Then
                         startingColumnIndexForTasks = level1Count * template.Columns.Count + level1Count * taskGapX + startingPoint.Column
                         maxCurrentX = startingColumnIndexForTasks
                     Else
                         startingColumnIndexForTasks = maxCurrentX + taskTemplate.Columns.Count + taskGapX
                         maxCurrentX = startingColumnIndexForTasks
                     End If
                     currentX = startingColumnIndexForTasks
                     currentY = startingRowIndexForTasks
                     level1Count = level1Count + 1
                 End If
                 
                 
                 If (currentLevel > UBound(lastRanges)) Then
                     ReDim Preserve lastRanges(currentLevel) As Range
                 End If
                 
                 Set lastRanges(lastlevel) = currentTaskRange
                 
                 Set currentTaskRange = CellFunctions.CellsWrapped(WBS, currentY, currentX, raiseException:=False)
                 currentY = currentY + template.rows.Count + taskGapY
                 
                If currentTaskRange.Column + template.Columns.Count <= WBS.Columns.Count Then
                        '/**Fix for 1705**/
                        'template.Copy currentTaskRange
                        RCopy template, currentTaskRange
                    
                    If currenttask.GetTyp = "S" Then
                        If rPhasesUnion Is Nothing Then
                            Set rPhasesUnion = currentTaskRange.offset(0, 1).MergeArea
                        Else
                            Set rPhasesUnion = Union(rPhasesUnion, currentTaskRange.offset(0, 1).MergeArea)
                        End If
                        'Debug.Print currentTaskRange.offset(0, 1).MergeArea.Address
                    
                    
                    End If
                    
                    
                    Set currentTaskRange = WBS.Range(currentTaskRange, WBS.Cells(currentY + template.rows.Count - 1 - template.rows.Count - taskGapY, currentX + template.Columns.Count - 1))
                    If (maxY < currentTaskRange.row + currentTaskRange.rows.Count) Then
                        maxY = currentTaskRange.row + currentTaskRange.rows.Count
                    End If
                    If (maxX < currentTaskRange.Column + currentTaskRange.Columns.Count) Then
                        maxX = currentTaskRange.Column + currentTaskRange.Columns.Count
                    End If
                    
                    SetShapeData currenttask, currentTaskRange
                End If 'WBS.Columns.count
                    
                If (currentLevel <> 1) Then
                    If (lastlevel <= currentLevel) Then
                        If (Not lastRanges(lastlevel) Is Nothing) Then
                            ConnectRanges WBS, lastRanges(lastlevel), currentTaskRange
                        End If
                    ElseIf (Not lastRanges(currentLevel) Is Nothing) Then
                        ConnectRanges WBS, lastRanges(currentLevel), currentTaskRange
                    End If
                Else
                    If (level1Count > UBound(levelOneRanges)) Then
                        ReDim Preserve levelOneRanges(level1Count) As Range
                    End If
                    Set levelOneRanges(level1Count) = currentTaskRange
                End If
            End If
        Next currentIndex
        
        ClearBorderRemnants
        
        'project header
        currenttask.SetIndex Plan.Range("Plan.ProjectHeader").row
        currentX = (startingColumnIndexForTasks - startingPoint.Column) / 2 + startingPoint.Column
        currentY = startingPoint.row
        
        If currentX < WBS.Columns.Count Then
            Set currentTaskRange = WBS.Cells(currentY, currentX)
                '/**Fix for 1705**/
                'GetTemplate(templateWbsSheet.Name, currenttask).Copy currentTaskRange
                RCopy GetTemplate(templateWbsSheet.Name, currenttask), currentTaskRange
                
            Set currentTaskRange = WBS.Range(currentTaskRange, WBS.Cells(currentY + taskTemplate.rows.Count - 1, currentX + taskTemplate.Columns.Count - 1))
            SetShapeData currenttask, currentTaskRange
        Else
            AppInfoMsg ("WBS: " & appGetLOCText("excelRangeExceeded"))
        End If
        
        For i = 1 To UBound(levelOneRanges)
            ConnectProjectSummaryTask WBS, currentTaskRange, levelOneRanges(i)
        Next i
        
    End If
    
    If Not rPhasesUnion Is Nothing Then SetCustomProperty WBS, "SummaryTasksRange", rPhasesUnion.Address
    
    Dim borderCol As Integer
    borderCol = 37
    If maxX + startingPoint.Column > borderCol Then borderCol = maxX + startingPoint.Column
    WBS.Range(WBS.Cells(1, borderCol).EntireColumn, WBS.Cells(1, 256).EntireColumn).Delete
    WBS.Range(WBS.Cells(1, borderCol).EntireColumn, WBS.Cells(1, 256).EntireColumn).clear
    WBS.Range(WBS.Cells(1, borderCol).EntireColumn, WBS.Cells(1, 256).EntireColumn).ClearFormats
    
    'set printarea, border and surr. background
    Dim RangeAll As Range
    If maxY = 0 Then maxY = 3
    Set RangeAll = WBS.Range(WBS.Cells(2, 2), WBS.Cells(maxY + 3, borderCol))
    RangeAll.BorderAround xlContinuous, xlThin
    RangeAll.Borders(xlEdgeBottom).Color = RGB(166, 166, 166)
    RangeAll.Borders(xlEdgeTop).Color = RGB(166, 166, 166)
    RangeAll.Borders(xlEdgeLeft).Color = RGB(166, 166, 166)
    RangeAll.Borders(xlEdgeRight).Color = RGB(166, 166, 166)
    WBS.PageSetup.PrintArea = RangeAll.Address
    WBS.PageSetup.Orientation = xlLandscape
    Me.Cells(1, 1).EntireRow.Interior.Color = RGB(242, 242, 242)
    Me.Cells(1, 1).EntireColumn.Interior.Color = RGB(242, 242, 242)
    WBS.Range(WBS.Cells(1, borderCol + 1), WBS.Cells(1, borderCol + 50)).EntireColumn.Interior.Color = RGB(242, 242, 242)
    WBS.Range(WBS.Cells(maxY + 4, 1), WBS.Cells(maxY + 200, 1)).EntireRow.Interior.Color = RGB(242, 242, 242)
    WBS.Range(WBS.Cells(2, 2), WBS.Cells(2, borderCol)).Interior.Pattern = xlNone
    'adjust H0
    Dim rH0 As Range
    Set rH0 = WBS.Range("C3", Cells(4, borderCol - 1))
    rH0.Interior.Color = Range("WBS.H0").Resize(1, 1).Interior.Color
    rH0.Borders.LineStyle = xlNone
    ActiveWorkbook.Names.Add Name:="WBS.H0", RefersTo:=rH0
    modShapes.PositionLogo_v3 Me
    
subend:
    noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WBS.CreateWBSStructure error:"
    Resume subend
End Sub

Private Function GetTemplate(templateName As String, currenttask As TPGTask) As Range
    
    Dim rangename As String
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "GetTemplate"

    rangename = templateName + "."
    If (currenttask.IsProjectSummaryTask) Then
        rangename = rangename + "ProjectSummaryTask."
    ElseIf (currenttask.GetTyp = "S") Then
        rangename = rangename + "Task."
    ElseIf (currenttask.GetTyp = "M") Then
        rangename = rangename + "Milestone."
    Else
        rangename = rangename + "WorkPackage."
    End If
    
    If (currenttask.GetTyp <> "M") Then
        If (currenttask.GetProgress = 0) Then
            rangename = rangename + "NotStarted"
        ElseIf (currenttask.GetProgress = 100) Then
            rangename = rangename + "Completed"
        Else
            rangename = rangename + "Started"
        End If
    Else
        If (currenttask.GetProgress = 100) Then
            rangename = rangename + "Completed"
        Else
            rangename = rangename + "NotStarted"
        End If
    End If
    If (currenttask.GetTyp = "S") Then SetTemplateColor rangename, currenttask
    Set GetTemplate = Sheets(templateName).Range(rangename)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WBS.GetTemplate error:"
    Resume subend
End Function


Private Sub SetShapeData(currenttask As TPGTask, taskShape As Range)
    Dim rowIndex As Integer
    Dim columnIndex As Integer
    Dim planRangeName As String
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "SetShapeData"

    WBS.Names.Add "WBS." & currenttask.GetUID(True), "=" & Me.Name & "!" & taskShape.Address
    For rowIndex = 1 To taskShape.rows.Count
        For columnIndex = 1 To taskShape.Columns.Count
            If (Not IsEmpty(taskShape.Cells(rowIndex, columnIndex))) Then
                planRangeName = taskShape.Cells(rowIndex, columnIndex).value
                If (VBA.Left(planRangeName, 1) = "$" And VBA.Right(planRangeName, 1) = "$") Then
                    planRangeName = Replace(planRangeName, "$", "")
                    
                    'in case of start and finishcolumn we need to take the baseline columns when baselinenot saved yet...
                    If (planRangeName = "Plan.StartColumn") Or (planRangeName = "Plan.FinishColumn") Then
                        If (Plan.Range("Plan.BaselineSaveDate").value = "") Then
                            If (planRangeName = "Plan.StartColumn") Then
                                planRangeName = "Plan.BaselineStartColumn"
                            Else
                                planRangeName = "Plan.BaselineFinishColumn"
                            End If
                        End If
                    End If
                    
                    If Not currenttask.GetTyp = "M" Then
                        taskShape.Cells(rowIndex, columnIndex).value = currenttask.GetCellValue(planRangeName)
                    Else
                        'in case of a 'undone' milestone' we have to translate progress %  to text
                        If planRangeName = "Plan.ProgressColumn" Then
                            If currenttask.GetCellValue(planRangeName) = 0 Then
                                taskShape.Cells(rowIndex, columnIndex).value = appGetLOCText("undone")
                            Else
                                taskShape.Cells(rowIndex, columnIndex).value = appGetLOCText("done")
                            End If
                        Else
                            taskShape.Cells(rowIndex, columnIndex).value = currenttask.GetCellValue(planRangeName)
                        End If
                    End If
                End If
            End If
        Next columnIndex
    Next rowIndex
    ' set different border in case task has no baseline
    If currenttask.GetBaselineStartDate = 0 And Not Plan.IsBaselineSet And Range("WBS.MarkNodes").value Then
        If Config.Range("Config.CurrentWBSTemplate").value = 1 Then
            With WBS2.Range("WBSTemplate1.WorkPackage.NoBaseline").Borders
                taskShape.BorderAround .LineStyle, .Weight, .ColorIndex, .Color
            End With
        Else
            With WBS3.Range("WBSTemplate2.WorkPackage.NoBaseline").Borders
                taskShape.BorderAround .LineStyle, .Weight, .ColorIndex, .Color
            End With
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WBS.SetShapeData error:"
    Resume subend
End Sub

Private Sub ConnectProjectSummaryTask(currentSheet As Worksheet, projectSummaryTask As Range, range2 As Range)
    Dim startingPointX As Integer
    Dim startingPointY As Integer
    Dim endingPointX As Integer
    Dim endingPointY As Integer
    Dim currentCell As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "ConnectProjectSummaryTask"

    If (projectSummaryTask.Column > range2.Column) Then
        startingPointX = projectSummaryTask.Column + projectSummaryTask.Columns.Count / 2 - 1
        startingPointY = projectSummaryTask.row + projectSummaryTask.rows.Count
        endingPointX = range2.Column + range2.Columns.Count / 2
        endingPointY = startingPointY
        Set currentCell = currentSheet.Range(currentSheet.Cells(startingPointY, startingPointX), currentSheet.Cells(endingPointY, endingPointX))
        
        With currentCell.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 0
        End With
        With currentCell.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 0
        End With
        
        Set currentCell = currentSheet.Range(currentSheet.Cells(startingPointY + 1, startingPointX), currentSheet.Cells(endingPointY + 1, endingPointX))
        With currentCell.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 0
        End With
    ElseIf (projectSummaryTask.Column = range2.Column) Then
        startingPointX = projectSummaryTask.Column + projectSummaryTask.Columns.Count / 2 - 1
        startingPointY = projectSummaryTask.row + projectSummaryTask.rows.Count
        endingPointX = startingPointX
        endingPointY = startingPointY + 1
        Set currentCell = currentSheet.Range(currentSheet.Cells(startingPointY, startingPointX), currentSheet.Cells(endingPointY, endingPointX))
        
        With currentCell.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 0
        End With
    ElseIf (projectSummaryTask.Column < range2.Column) Then
        startingPointX = projectSummaryTask.Column + projectSummaryTask.Columns.Count / 2
        startingPointY = projectSummaryTask.row + projectSummaryTask.rows.Count
        endingPointX = range2.Column + range2.Columns.Count / 2 - 1
        endingPointY = startingPointY
        Set currentCell = currentSheet.Range(currentSheet.Cells(startingPointY, startingPointX), currentSheet.Cells(endingPointY, endingPointX))
        
        With currentCell.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 0
        End With
        With currentCell.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 0
        End With
        
        Set currentCell = currentSheet.Range(currentSheet.Cells(startingPointY + 1, startingPointX), currentSheet.Cells(endingPointY + 1, endingPointX))
        With currentCell.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 0
        End With
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WBS.ConnectProjectSummaryTask error:"
    Resume subend
End Sub

Private Sub ConnectRanges(currentSheet As Worksheet, range1 As Range, range2 As Range)
    Dim startingPointY As Integer
    Dim endingPointY As Integer
    Dim currentCell As Range
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "ConnectRanges"

    If (range1.Column = range2.Column) Then
        'same level
        startingPointY = range1.row + (range1.rows.Count / 2)
        endingPointY = range2.row + (range2.rows.Count / 2) - 1
        Set currentCell = currentSheet.Range(currentSheet.Cells(startingPointY, range1.Column - 1), currentSheet.Cells(endingPointY, range1.Column - 1))
        SetConnectionLineBorder currentCell, True
    ElseIf (range1.Column < range2.Column) Then
        startingPointY = range1.row + range1.rows.Count
        endingPointY = range2.row + (range2.rows.Count / 2) - 1
        Set currentCell = currentSheet.Range(currentSheet.Cells(startingPointY, range1.Column + 1), currentSheet.Cells(endingPointY, range2.Column - 1))
        SetConnectionLineBorder currentCell, False
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WBS.ConnectRanges error:"
    Resume subend
End Sub


Private Sub SetConnectionLineBorder(anyRange As Range, includeTop As Boolean)
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "SetConnectionLineBorder"

    If (includeTop) Then
        With anyRange.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 0
        End With
    End If

    With anyRange.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 0
    End With

    With anyRange.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 0
    End With

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WBS.SetConnectionLineBorder error:"
    Resume subend
End Sub


'procedure wird nicht verwendet
Private Sub SetBottomBorder(anyRange As Range)
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "SetBottomBorder"

    With anyRange.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 0
    End With

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WBS.SetBottomBorder error:"
    Resume subend
End Sub

Public Sub SetColor(ColorValue As Long)
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "SetColor"

    
    
    ActiveCell.MergeArea.Interior.Color = ColorValue
    'only summary tasks
    'If InStr(GetCustomProperty(WBS, "SummaryTasksRange"), ActiveCell.MergeArea.Address) > 0 Then _

        SetCustomProperty WBS, "Summary_" & ActiveCell.value, CStr(ColorValue)
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg
    Resume subend
End Sub

Private Sub SetTemplateColor(rangename As String, task As TPGTask)
    If GetCustomProperty(WBS, "Summary_" & task.GetTaskName) = "" Then
        WBS2.Range(rangename & ".NameFrame").MergeArea.Interior.Color = RGB(166, 166, 166)
    Else
        WBS2.Range(rangename & ".NameFrame").MergeArea.Interior.Color = GetCustomProperty(WBS, "Summary_" & task.GetTaskName)
    End If
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    Dim R As Range
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "Worksheet_BeforeRightClick"

    If GetCustomProperty(WBS, "SummaryTasksRange") = "" Then GoTo subend
    Set R = Me.Range(GetCustomProperty(WBS, "SummaryTasksRange"))
    If Not InRange(Target, R) Then
        modContextMenu.RestoreDefaultMenu
        GoTo subend
    End If
    modContextMenu.BuildCustomMenu (WBSContext)

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WBS.Worksheet_BeforeRightClick error:"
    Resume subend
End Sub

Private Sub Worksheet_Deactivate()
    modContextMenu.RestoreDefaultMenu
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim id As String
    Dim n As Name
    Dim template As Range
    Dim Field As String
    Dim x As Integer
    Dim y As Integer
    Dim targetCell As Range
   
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "Worksheet_Change"
    
    If noupdate Then GoTo subend
    
    For Each n In WBS.Names
        If VBA.InStr(n.NameLocal, "WBS.") > 0 And InRange(Target, Range(n.RefersTo)) Then
            id = Right(n.Name, VBA.Len(n.Name) - VBA.Len(appGetLOCText("WBSSheet")) - 5)
            id = StGuidWithSpecials(id)
            x = Target.row - Range(n.RefersTo).row
            y = Target.Column - Range(n.RefersTo).Column
            Exit For
        End If
    Next
    
    If id <> "" Then
        Dim t As TPGTask
        Set t = New TPGTask
        If t.FindInPlanByUId(id) Then
            Set template = GetTemplate("WBSTemplate" + VBA.Trim(CStr(Config.Range("Config.CurrentWBSTemplate").value)), t)
            If Not template Is Nothing Then
                Field = template.offset(x, y).Resize(1, 1).value
                Field = Mid(Field, 2, VBA.Len(Field) - 2)
                
                'in case of plan.startcolumn and plan.finishcolumn we need to switch to baselinecolumns when baseline not saved yet
                If (Field = "Plan.StartColumn") Or (Field = "Plan.FinishColumn") Then
                    If (Plan.Range("Plan.BaselineSaveDate").value = "") Then
                        If (Field = "Plan.StartColumn") Then
                            Field = "Plan.BaselineStartColumn"
                        Else
                            Field = "Plan.BaselineFinishColumn"
                        End If
                    End If
                End If
                
                Set targetCell = t.GetCell(Field)
                If Not targetCell Is Nothing Then
                    If Not targetCell.locked Then
                        If (t.GetTyp = "M") And (Field = "Plan.ProgressColumn") Then
                                'for a progress of a milestone we translate the text to % (0 or 100)
                                If Target.value = appGetLOCText("undone") Then
                                    targetCell.value = 0
                                Else
                                    targetCell.value = 100
                                End If
                        Else
                            targetCell.value = Target.value
                        End If
                    Else
                        AppStopMsg appGetLOCText("TargetLockedValueNotSet")
                    End If
                End If
            End If
        End If
    End If
    
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    
    AppErrMsg "WBS.Worksheet_Change error."
    Resume subend
End Sub



Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    Dim i As Integer
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    
    For i = 1 To Me.CustomProperties.Count
        s = GetCustomProperty(WBS, "dummy", i)
        If (Left(s, 8) = "Summary_") Then 'Or (Left(s, 12) = "Milestone_") Or (Left(s, 5) = "Task_") Then
            AddNode xmlDom, n, s, GetCustomProperty(WBS, s)
        End If
    Next
    
    Set CreateXml = n

subend:
    
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg
    Resume subend
End Function

Public Sub ImportXml(Node As Variant)
    Dim n As Variant
    
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "ImportXml"
   
    reset
    If Not Node Is Nothing Then
        For Each n In Node.ChildNodes
            SetCustomProperty Me, n.NodeName, n.Text
        Next
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg
    Resume subend
End Sub

Public Sub reset()
   
    Dim i As Integer
    Dim s As String
    Dim c As New Collection
    
    On Error GoTo suberr
    modStack.PushCallStack "WBS", "reset"
    
    For i = 1 To Me.CustomProperties.Count
        s = GetCustomProperty(WBS, "dummy", i)
        If (Left(s, 8) = "Summary_") Then c.Add s 'Or (Left(s, 12) = "Milestone_") Or (Left(s, 5) = "Task_") Then c.Add s
    Next
    For i = 1 To c.Count
        DeleteCustomProperty Me, c(i)
    Next

subend:
    Set c = Nothing
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg
    Resume subend
End Sub
Attribute VB_Name = "WBS2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "WBS3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "WP"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
'Neu
Public skipMsg As Boolean
Public noupdate As Boolean
Public bDirty As Boolean

Public Sub cmdSetImportPath_Click()
    Dim FD As filedialog
    
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdSetImportPath_Click"
    
    If IsDemoVersion Then GoTo subend
    
    Set FD = Application.filedialog(msoFileDialogFolderPicker)
    FD.AllowMultiSelect = False
    If FD.Show = -1 Then
        Range("WP.ImportPath").value = FD.SelectedItems(1)
    Else
        'Cancel
    End If
    Set FD = Nothing

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdSetImportPath_Click error:"
    Resume subend
End Sub

Public Sub cmdSetExportPath_Click()
    Dim FD As filedialog
    
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdSetExportPath_Click"
    
    If IsDemoVersion Then GoTo subend
    
    Set FD = Application.filedialog(msoFileDialogFolderPicker)
    FD.AllowMultiSelect = False
    If FD.Show = -1 Then
        Range("WP.ExportPath").value = FD.SelectedItems(1)
    Else
        'Cancel
    End If
    Set FD = Nothing

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdSetExportPath_Click error:"
    Resume subend
End Sub

Public Sub cmdUpdateResponsibles_Click()
    Dim i As Integer
    Dim ir, ir2 As Integer
    Dim ic As Integer
    Dim sAll As String
    Dim sRes As String
    
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdUpdateResponsibles_Click"
    
    If IsDemoVersion Then GoTo subend
    
    
    sAll = ""
    ic = Plan.Range("Plan.ResponsibleColumn").Column
    For ir = Plan.Range("Plan.ProjectHeader").row To Plan.Range("Plan.ProjectFooter").row
        sRes = Plan.Cells(ir, ic).value
        If sRes <> "" Then
            If InStr(sAll, sRes) = 0 Then
                sAll = sAll & ";" & sRes
            End If
        End If
    Next
    
    Config.Range("Config.WPResponsibles").ClearContents
    
    Dim A() As String
    A = Split(sAll, ";")
    For i = 0 To UBound(A)
        Config.Range("Config.WPResponsibles").Cells(i + 1, 1).value = A(i)
    Next
    ir = Config.Range("Config.WPResponsibles").row
    ir2 = ir + i - 1
    If ir2 < ir Then ir2 = ir
    ic = Config.Range("Config.WPResponsibles").Column
    Application.Names("Config.WPResponsibles").RefersTo = "=Config!" & Config.Range(Config.Cells(ir, ic), Config.Cells(ir2, ic)).Address
    
    sortRange Config.Range("Config.WPResponsibles").offset(1), Config.Range("Config.WPResponsibles").offset(1), xlAscending
    
    If Not modRibbon.bnoRibbonUpdate Then modRibbon.RefreshRibbon
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdUpdateResponsibles_Click error:"
    Resume subend
End Sub

Private Sub CleanWPDetails()
    Dim R As Range
    Dim i As Integer
    Dim task As TPGTask
    On Error GoTo suberr
    modStack.PushCallStack "WP", "CleanWPDetails"

    Set R = WPDetails.Range("WPDetails")
    For i = R.row + R.rows.Count - 1 To R.row + 1 Step -1
        Set task = New TPGTask
        If Not task.FindInPlanByUId(WPDetails.Cells(i, 1).value) Then
            SecureDelete WPDetails.Cells(i, 1)
        End If
    Next
    CleanWPIfNoDetails

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.CleanWPDetails error:"
    Resume subend
End Sub

Private Sub CleanWPIfNoDetails()
    Dim R As Range

    On Error GoTo suberr
    modStack.PushCallStack "WP", "CleanWPIfNoDetails"

    If HasDetails Then GoTo subend
    Set R = WPDetails.Range("WPDetails").Find(wp.Range("WP.UId").value)
    If R Is Nothing Then GoTo subend
    SecureDelete R

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.CleanWPIfNoDetails error:"
    Resume subend
End Sub

Private Sub SecureDelete(R As Range)
    On Error GoTo suberr
    modStack.PushCallStack "WP", "SecureDelete"

    If WPDetails.Range("WPDetails").rows.Count > 1 Then
        R.EntireRow.Delete
    Else
        R.EntireRow.value = ""
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.SecureDelete error:"
    Resume subend
End Sub


Public Function GetActionsTable() As TPGTable
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "WP", "GetActionsTable"

    Set t = New TPGTable
    t.SetTable Me.Range("WP.Actions.Table"), True, False, TemplateFirstrow, 5, , 16
    Set GetActionsTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.GetActionsTable error:"
    Resume subend
End Function

Public Function GetResultsTable() As TPGTable
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "WP", "GetResultsTable"

    Set t = New TPGTable
    t.SetTable Me.Range("WP.Results.Table"), True, False, TemplateFirstrow, 5, , 16
    Set GetResultsTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.GetResultsTable error:"
    Resume subend
End Function

Public Function GetWorkTable() As TPGTable
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "WP", "GetWorkTable"

    Set t = New TPGTable
    t.SetTable Me.Range("WP.WorkTable"), False, True, TemplateFirstrow, 1
    Set GetWorkTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.GetWorkTable error:"
    Resume subend
End Function

Public Function GetCostTable() As TPGTable
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "WP", "GetCostTable"

    Set t = New TPGTable
    t.SetTable Me.Range("WP.CostTable"), False, True, TemplateFirstrow, 1
    Set GetCostTable = t

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.GetCostTable error:"
    Resume subend
End Function


Public Sub cmdInsert_Click()
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdInsert_Click"
    If IsDemoVersion Then GoTo subend
    noupdate = True
    If GetActionsTable.InsertRow_Clicked(ActiveCell, True) Then
'        bDirty = True
    ElseIf GetResultsTable.InsertRow_Clicked(ActiveCell, True) Then
'        bDirty = True
    End If
    noupdate = False
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdInsert_Click error:"
    Resume subend
End Sub

Public Sub cmdDelete_Click()
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdDelete_Click"

    If IsDemoVersion Then GoTo subend
    noupdate = True
    If GetActionsTable.DeleteRow_Clicked(ActiveCell, True) Then
        bDirty = True
    ElseIf GetResultsTable.DeleteRow_Clicked(ActiveCell, True) Then
        bDirty = True
    End If
    noupdate = False
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdDelete_Click error:"
    Resume subend
End Sub

Public Sub ShowWPSpecAsX(ByVal cell As Range)
    On Error GoTo suberr
    modStack.PushCallStack "WP", "ShowWPSpecAsX"

    With cell.Validation
        .Delete
        '.Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
        '.IgnoreBlank = True
        '.InCellDropdown = True
        '.InputTitle = ""
        '.ErrorTitle = "Data invalid"
        '.InputMessage = ""
        '.ErrorMessage = "Data Invalid"
        '.ShowInput = True
        '.ShowError = True
    End With
    cell.FormulaR1C1 = "x"
    With cell.Interior
        .Color = RGB(242, 242, 242)
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
    End With
    cell.locked = True
    cell.FormulaHidden = True

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.ShowWPSpecAsX error:"
    Resume subend
End Sub
 
Public Sub ShowWPSpecAsList(ByVal cell As Range, value As String)
    On Error GoTo suberr
    modStack.PushCallStack "WP", "ShowWPSpecAsList"
    UnprotectSheet Plan
    With cell.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=Config.WPSpec"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Data invalid"
        .InputMessage = ""
        .ErrorMessage = "Data invalid"
        .ShowInput = True
        .ShowError = True
    End With
    cell.Interior.Color = RGB(255, 255, 255)
    cell.locked = False
    cell.FormulaHidden = True
    cell.value = value

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.ShowWPSpecAsList error:"
    Resume subend
End Sub

Public Sub SetContent(wbsNo As Integer)
    Dim c As Range
    Dim R As Range
    Dim i As Integer
    Dim Table As TPGTable
    Dim resultstable As TPGTable
    Dim task As New TPGTask
    Dim Count, rowCount As Integer
    Dim resultscount As Integer
    Dim current As Single
    
    On Error GoTo suberr
    modStack.PushCallStack "WP", "setContent"
    
    If IsDemoVersion Then GoTo subend
    
'    UnprotectAndPerformSheet WP
'    UnprotectAndPerformSheet Plan
'    noUpdate = True
    
    task.SetIndex Plan.Range("Plan.ProjectHeader").row + wbsNo - 2
        
    Set Table = GetActionsTable
    Table.clear
    Set resultstable = GetResultsTable
    resultstable.clear
    
    Range("WP.Uid").value = task.GetUID
    Range("WP.WBSNo").value = task.GetWBS
    
    Set R = WPDetails.Range("WPDetails").Find(Range("WP.Uid").value, , xlValues, xlWhole, , , False)
    If R Is Nothing Then
'        Range("WP.Results").Value = ""
    Else
'        Range("WP.Results").Value = r.offset(ColumnOffset:=1).Value
                
        Count = 0
        'contents
        If R.offset(ColumnOffset:=2).value = "" Then
            rowCount = 0
        Else
            rowCount = R.offset(ColumnOffset:=2).value
        End If
        For i = 1 To rowCount
            Count = Count + 1
            If Count > Table.RowsCount Then Table.AddRow
            Table.ValuesRange.Cells(Count, 1).value = R.offset(ColumnOffset:=3 + (Count - 1) * 4).value
            Table.Mergedfit (Table.ValuesRange.Cells(Count, 1))
            Table.ValuesRange.Cells(Count, 4).value = R.offset(ColumnOffset:=4 + (Count - 1) * 4).value
            Table.Mergedfit (Table.ValuesRange.Cells(Count, 4))
            Table.ValuesRange.Cells(Count, 5).value = R.offset(ColumnOffset:=5 + (Count - 1) * 4).value
            Table.Mergedfit (Table.ValuesRange.Cells(Count, 5))
            Table.ValuesRange.Cells(Count, 6).value = R.offset(ColumnOffset:=6 + (Count - 1) * 4).value
        Next
        'results
        resultscount = 0
        If R.offset(ColumnOffset:=1).value = "" Then
            rowCount = 0
        Else
            rowCount = R.offset(ColumnOffset:=1).value
        End If
        For i = 1 To rowCount
            resultscount = resultscount + 1
            If resultscount > resultstable.RowsCount Then resultstable.AddRow
            resultstable.ValuesRange.Cells(resultscount, 1).value = R.offset(ColumnOffset:=3 + ((Count) * 4) + (resultscount - 1)).value
            resultstable.Mergedfit (resultstable.ValuesRange.Cells(resultscount, 1))
        Next
    End If
                    
    'Header
    'Projectname needs to be locked, not tasksnames
    SetCell Range("WP.Name"), task.GetCell("Plan.TaskNameColumn")
    
    current = AutoFitMergedCell(Range("WP.Name"), 16.5)
    If current > 0 Then Range("WP.Name").EntireRow.RowHeight = current
        
    Range("WP.Responsibility").value = task.GetCellValue("Plan.ResponsibleColumn")
    
    SetCell Range("WP.Progress"), task.GetCell("Plan.ProgressColumn")
    Range("WP.Status").value = task.GetCellValue("Plan.StatusColumn")
    Set c = task.GetCell("Plan.BaselineStartColumn")
    SetCell Range("WP.BaseStart"), c, c.hasFormula
    Set c = task.GetCell("Plan.BaselineFinishColumn")
    SetCell Range("WP.BaseFinish"), c, c.hasFormula
    Set c = task.GetCell("Plan.StartColumn")
    SetCell Range("WP.Start"), c, c.hasFormula
    Set c = task.GetCell("Plan.FinishColumn")
    SetCell Range("WP.Finish"), c, c.hasFormula
    
    'Adapt progress field for milestone/work package
    Dim progressList As String
    If task.IsMilestone Then
        progressList = "=WPInfo.MSProgress"
    Else
        progressList = "=WPInfo.Progress"
    End If
    UnprotectSheet wp
    With wp.Range("WP.Progress").Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=progressList
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = "Invalid Data"
        .ShowInput = True
        .ShowError = True
   End With

    'Work
    For Each c In GetWorkTable.ValuesRange(1)
        Set R = task.GetBaseValueCell("work", c.value)
        If R Is Nothing Then
            'modified for SALK
            'AppStopMsg appGetLOCText("ResourceNotInPlan") & ": " & c.value
        Else
            SetCell c.offset(0, 1), R
            SetCell c.offset(0, 2), R.offset(ColumnOffset:=1)
            SetCell c.offset(0, 3), R.offset(ColumnOffset:=2)
        End If
    Next
    
    'Cost
    For Each c In GetCostTable.ValuesRange(1)
        Set R = task.GetBaseValueCell("cost", c.value)
        If R Is Nothing Then
            'modified for SALK
           ' AppStopMsg appGetLOCText("CostTypeNotInPlan") & ": " & c.value
        Else
            SetCell c.offset(0, 1), R
            SetCell c.offset(0, 2), R.offset(ColumnOffset:=1)
            SetCell c.offset(0, 3), R.offset(ColumnOffset:=2)
        End If
    Next
    
subend:
'    ProtectAndMakeReadySheet WP
'    ProtectAndMakeReadySheet Plan
'    noUpdate = False
    bDirty = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cboWBs_Change error:"
    Resume subend
End Sub

Public Sub cboWPs_Change()
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cboWPs_Change"
    ProcessDirtyState
    noupdate = True
    SetContent (WPDetails.Range("WPDetails.WBSNo").value)
    noupdate = False
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cboWPs_Change error:"
    Resume subend
End Sub

Public Sub cmdSave_Click(Optional bIsDirtySave As Boolean = False)
    Dim c As Range
    Dim R As Range
    Dim task As TPGTask
    
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdSave_Click"
    
    If IsDemoVersion Then GoTo subend
    
    If Range("WP.Uid").value = 0 Then GoTo subend
    If Not Plan.ContainsUid(Range("WP.Uid").value) Then GoTo subend 'someone might have deleted the task from plan
    If Not bIsDirtySave Then
        If appQOCMsg(appGetLOCText("WPSave")) = vbCancel Then GoTo subend
    Else
        If appQOCMsg(appGetLOCText("WPDirtySave")) = vbCancel Then GoTo subend
    End If
    
    CleanWPDetails
    SaveDetails
        
    ' Update values in Plan
    Set task = New TPGTask
    task.FindInPlanByUId Range("WP.Uid").value
    
    If task.TaskRowIndex > Plan.Range("Plan.ProjectHeader").row Then
        task.SetTaskName Range("WP.Name").Cells(1, 1).value
        task.SetStatus Range("WP.Status").value
        If Not Range("WP.Progress").locked Then task.SetProgress Range("WP.Progress").value
        ' Formulas are locked and therefore not updated
        If Not Range("WP.Start").locked Then task.SetCellValue "Plan.StartColumn", Range("WP.Start").value
        If Not Range("WP.Finish").locked Then task.SetCellValue "Plan.FinishColumn", Range("WP.Finish").value
        If Not Range("WP.BaseStart").locked Then task.SetCellValue "Plan.BaselineStartColumn", Range("WP.BaseStart").value
        If Not Range("WP.BaseFinish").locked Then task.SetCellValue "Plan.BaselineFinishColumn", Range("WP.BaseFinish").value
    End If
        
    'Work
    For Each c In GetWorkTable.ValuesRange(1)
        Set R = task.GetBaseValueCell("work", c.value)
        If R Is Nothing Then
            'AppStopMsg appGetLOCText("ResourceNotInPlan") & ": " & c.value
        Else
            If Not R.locked Then R.value = c.offset(0, 1)
            If Not R.offset(ColumnOffset:=1).locked Then R.offset(ColumnOffset:=1).value = c.offset(0, 2)
            If Not R.offset(ColumnOffset:=2).locked Then R.offset(ColumnOffset:=2).value = c.offset(0, 3)
        End If
    Next
    
    'Cost
    For Each c In GetCostTable.ValuesRange(1)
        Set R = task.GetBaseValueCell("cost", c.value)
        If R Is Nothing Then
            'modified for SALK
           ' AppStopMsg appGetLOCText("CostTypeNotInPlan") & ": " & c.value
        Else
            If Not R.locked Then R.value = c.offset(0, 1)
            If Not R.offset(ColumnOffset:=1).locked Then R.offset(ColumnOffset:=1).value = c.offset(0, 2)
            If Not R.offset(ColumnOffset:=2).locked Then R.offset(ColumnOffset:=2).value = c.offset(0, 3)
        End If
    Next

subend:
    bDirty = False
    If Not bIsDirtySave Then cboWPs_Change 'update view
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdSave_Click error:"
    Resume subend
End Sub

Private Sub SetCell(rTarget As Range, rSource As Range, Optional forceLock As Boolean = False)
    On Error GoTo suberr
    modStack.PushCallStack "WP", "SetCell"
    
    rTarget.locked = rSource.locked Or forceLock ' lock needs to be forced when cell contains formula
    
    If rSource.locked Or forceLock Then
        rTarget.Interior.Color = RGB(242, 242, 242)
    Else
        rTarget.Interior.Color = RGB(255, 255, 255)
    End If
    
    rTarget.value = rSource.value
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.SetCell error:"
    Resume subend
End Sub

Public Sub cmdFirst_Click()
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdFirst_Click"
    
    WPDetails.Range("WPDetails.WBSNo").value = 1
    cboWPs_Change
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdFirst_Click error:"
    Resume subend
End Sub

Public Sub cmdPrevious_Click()
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdPrevious_Click"
    
    If WPDetails.Range("WPDetails.WBSNo").value > 1 Then WPDetails.Range("WPDetails.WBSNo").value = WPDetails.Range("WPDetails.WBSNo").value - 1
    cboWPs_Change
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdPrevious_Click error:"
    Resume subend
End Sub

Public Sub cmdNext_Click()

    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdNext_Click"
    
    If WPDetails.Range("WPDetails.WBSNo").value < Plan.Range("Plan.WPs").rows.Count - 2 Then
        WPDetails.Range("WPDetails.WBSNo").value = WPDetails.Range("WPDetails.WBSNo").value + 1
    End If
    cboWPs_Change
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdNext_Click error:"
    Resume subend
End Sub

Private Sub ExportWPs(workpackages() As Integer, FileName As String)
    Dim rememberSelectedWP As Integer
    Dim wb As Workbook
    Dim workPackage As Variant
    Dim sPath As String
    Dim FileExtStr As String
    Dim FileFormatNum As Long
    Dim lcalc As Long
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "WP", "ExportWPs"

    rememberSelectedWP = WPDetails.Range("WPDetails.WBSNo").value
    
    sPath = Range("WP.ExportPath").value
    If sPath = "" Or VBA.Dir(sPath, vbDirectory) = "" Then
        AppStopMsg appGetLOCText("ExportPathNotValid")
        GoTo subend
    End If

    If VBA.Right(sPath, 1) = "\" Then Range("WP.ExportPath").value = Left(sPath, Len(sPath) - 1)
    
    'Neu
    skipMsg = False
    If Dir(sPath & "\" & FileName & FileExtStr) <> "" Then
        If appQOCMsg(appGetLOCText("msgOverwriteFile")) = vbCancel Then
        skipMsg = True
        GoTo subend
        End If
    End If
    
    Sheets("WPInfo").Copy
    Set wb = Application.ActiveWorkbook
    Me.Activate
    
    'For Each workPackage In workpackages
    For i = UBound(workpackages) To 0 Step -1
        workPackage = workpackages(i)
        WPDetails.Range("WPDetails.WBSNo").value = workPackage
        SetContent (WPDetails.Range("WPDetails.WBSNo").value)
        CopyWPToSheet wb
        Application.CutCopyMode = False  'empty Clipboard
    Next
    
    If val(Application.Version) < 12 Then
        FileExtStr = ".xls": FileFormatNum = -4143
    Else
        FileExtStr = ".xlsx": FileFormatNum = 51
    End If
    If appFileIsOpen(FileName & FileExtStr) Then Workbooks(FileName & FileExtStr).Close False
    
    wb.Worksheets("WPInfo").visible = xlHidden
    wb.Protect "0123456789", True
    'wb.CheckCompatibility = False
    
    'NEU
    Application.DisplayAlerts = False
    
    lcalc = Application.Calculation
    Application.Calculation = xlCalculationAutomatic
    wb.SaveAs sPath & "\" & FileName & FileExtStr, FileFormat:=FileFormatNum
    wb.Close False
    Application.Calculation = lcalc
    
    'NEU
    Application.DisplayAlerts = True
    
    WPDetails.Range("WPDetails.WBSNo").value = rememberSelectedWP
    SetContent (WPDetails.Range("WPDetails.WBSNo").value)
'    cboWPs_Change

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.ExportWPs error:"
    Resume subend

End Sub

Public Sub cmdExport_Click()
    ProcessDirtyState
    frmWPExport.Show
End Sub

Public Sub cmdExportXLS()
    Dim FileName As String
    Dim workpackages() As Integer
    Dim Responsible As String
    Dim showDone As Boolean
    Dim sPath As String
    
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdExportXLS"
    Unload frmWPExport
    showDone = False
    If IsDemoVersion Then GoTo subend
    
    sPath = Range("WP.ExportPath").value
    If sPath = "" Or VBA.Dir(sPath, vbDirectory) = "" Then
        AppStopMsg appGetLOCText("ExportPathNotValid")
        GoTo subend
    End If
    
    noupdate = True
    UnprotectWorkbook "pmccTPG:-)"
    WPInfo.visible = xlSheetVisible
    setWPInfo  'save ranges in WPInfo
    Select Case WhatToExport
        Case "singleWP":
            If appQOCMsg(appGetLOCText("WPExport") & vbNewLine & vbNewLine & GetSelectedWPName) = vbCancel Then GoTo subend
            FileName = Range("WP.WBSNo").value
            ReDim workpackages(0 To 0) ' As Integer
            workpackages(0) = WPDetails.Range("WPDetails.WBSNo").value
            ExportWPs workpackages, FileName
            showDone = True
        Case "singleResp":
            Responsible = GetSelectedResponsible
            GetWPsOfResponsible workpackages, Responsible
            If workpackages(0) <> 0 Then  'make sure that array has been initialized
                If appQOCMsg(appGetLOCText("WPExport") & vbNewLine & vbNewLine & Responsible & vbNewLine & vbNewLine & GetSelectedWPSpecFormatted) = vbCancel Then GoTo subend
                ExportWPs workpackages, Responsible  'responsible is used as filename
                showDone = True
            End If
        Case "allResp":
            Dim iRes As Integer
            If appQOCMsg(appGetLOCText("WPExport") & vbNewLine & vbNewLine & appGetLOCText("AllResponsibles") & vbNewLine & vbNewLine & GetSelectedWPSpecFormatted) = vbCancel Then GoTo subend
            For iRes = 2 To Config.Range("Config.WPResponsibles").rows.Count
                Responsible = Config.Range("Config.WPResponsibles").Cells(iRes).value
                GetWPsOfResponsible workpackages, Responsible
                If workpackages(0) <> 0 Then  'make sure that array has been initialized
                    ExportWPs workpackages, Responsible  'responsible is used as filename
                    showDone = True
                End If
            Next
    End Select
    'Neu
    If skipMsg = True Then GoTo subend
    If showDone Then AppInfoMsg appGetLOCText("done") Else AppInfoMsg appGetLOCText("noMatchingWPsFound")
subend:
    On Error Resume Next
    If WPInfo.visible = xlSheetVisible Then SetVisibility WPInfo, xlSheetVeryHidden
    SetWBProtection True
    noupdate = False
    bDirty = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdExportXLS error:"
    Resume subend
End Sub

Public Sub cmdExportPDF()
    Dim uid, uids As Range
    Dim i, rememberSelectedWP As Integer
    Dim showMessage As Boolean
    Dim task As TPGTask
    Dim sPath As String
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdExportPDF"

    Set task = New TPGTask
    Unload frmWPExport
    showMessage = True
    If IsDemoVersion Then GoTo subend
    
    sPath = Range("WP.ExportPath").value
    If sPath = "" Or VBA.Dir(sPath, vbDirectory) = "" Then
        AppStopMsg appGetLOCText("ExportPathNotValid")
        GoTo subend
    End If
    
    SetWBProtection False
    WPInfo.visible = xlSheetVisible
    setWPInfo
    SetVisibility WPInfo, xlSheetVeryHidden
    
    Dim FileName As String
    FileName = wp.Range("WP.ExportPath").value

    rememberSelectedWP = WPDetails.Range("WPDetails.WBSNo").value
    Set uids = Intersect(Plan.Range(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.ProjectFooter").offset(-1)), Plan.Range("Plan.UIDColumn"))
    i = 1
    
    
    Dim iActionCount As Integer
    For Each uid In uids.rows
        task.FindInPlanByUId (uid.value)
        If ResponsibleMatch(task.GetResponsible, rememberSelectedWP) And WPSpecMatch(task.GetWPSpec, rememberSelectedWP) And WPSelectionMatch(task.GetUID, rememberSelectedWP) Then iActionCount = iActionCount + 1
    Next
    modStack.ShowProgressBar iActionCount, "Exporting", "WP.cboWPs_Change"
    
    For Each uid In uids.rows
        task.FindInPlanByUId (uid.value)
        If ResponsibleMatch(task.GetResponsible, rememberSelectedWP) And WPSpecMatch(task.GetWPSpec, rememberSelectedWP) And WPSelectionMatch(task.GetUID, rememberSelectedWP) Then
'            If showMessage Then
'                If appQOCMsg(appGetLOCText("WPExport") & GetMessageText(rememberSelectedWP)) = vbCancel Then GoTo SubEnd
'                showMessage = False
'            End If
            WPDetails.Range("WPDetails.WBSNo").value = i + 1
            cboWPs_Change
            ActiveSheet.ExportAsFixedFormat _
                        Type:=xlTypePDF, _
                        FileName:=FileName & "\" & "WP " & Replace(wp.Range("WP.WBSNo").value, ".", "_") & ".pdf", _
                        Quality:=xlQualityStandard, _
                        IncludeDocProperties:=True, _
                        IgnorePrintAreas:=False, _
                        OpenAfterPublish:=False
        End If
        i = i + 1
    Next

    WPDetails.Range("WPDetails.WBSNo").value = rememberSelectedWP
    cboWPs_Change

subend:
    bDirty = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdExportPDF error:"
    Resume subend
End Sub

'Private Sub SetResultsOffset()
'    'stores the offset to the Results Field used during WP import
'    On Error GoTo SubErr
'    modStack.PushCallStack "WP", "SetResultsOffset"
'
'    WP.Cells(WP.Range("WP.Actions.Table").Row, WP.Range("WP.Actions.Table").Column + 1).Value = GetActionsTable.RowsCount
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "WP.SetResultsOffset error:"
'    Resume SubEnd
'End Sub


'function wird nicht verwendet
Private Function GetResultsOffset() As Integer
    'retrieves the offset to the Results Field used during WP import
    On Error GoTo suberr
    modStack.PushCallStack "WP", "GetResultsOffset"

    GetResultsOffset = wp.Cells(wp.Range("WP.Actions.Table").row, wp.Range("WP.Actions.Table").Column + 1).value

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.GetResultsOffset error:"
    Resume subend
End Function

Private Sub GetWPsOfResponsible(workpackages() As Integer, Responsible As String)
    ' fills all WPs of the corresponding responsible into parameter workpackages that match the WPSpec.
    Dim uid, uids As Range
    Dim i As Integer
    Dim task As TPGTask
    Dim selectedWPSpec As String
    
    On Error GoTo suberr
    modStack.PushCallStack "WP", "GetWPsOfResponsible"

    selectedWPSpec = GetSelectedWPSpec
    ReDim Preserve workpackages(0 To 0) As Integer
    workpackages(0) = 0
    
    Set task = New TPGTask
    Set uids = Intersect(Plan.Range(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.ProjectFooter").offset(-1)), Plan.Range("Plan.UIDColumn"))
    i = 0
    For Each uid In uids.rows
        task.FindInPlanByUId (uid.value)
        If ((task.GetResponsible = Responsible And task.GetResponsible <> "") And _
            ((VBA.InStr(selectedWPSpec, task.GetWPSpec) > 0 And task.GetWPSpec <> "") Or _
            selectedWPSpec = "")) And (Not task.IsRootTask) Then
                ReDim Preserve workpackages(0 To i) As Integer
                workpackages(i) = task.GetID + 2
                i = i + 1
        End If
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.GetWPsOfResponsible error:"
    Resume subend
End Sub

Private Function WhatToExport() As String
    On Error GoTo suberr
    modStack.PushCallStack "WP", "WhatToExport"

    If WPDetails.Range("WPDetails.WBSNo").value <> 1 Then 'And WPDetails.Range("WPDetails.Responsible").value = 1 Then
        WhatToExport = "singleWP"
    ElseIf WPDetails.Range("WPDetails.WBSNo").value = 1 And WPDetails.Range("WPDetails.Responsible").value = 1 Then
        WhatToExport = "allResp"
    Else
        WhatToExport = "singleResp"
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.WhatToExport error:"
    Resume subend
End Function

Private Sub AddEmptyRows()
    On Error GoTo suberr
    modStack.PushCallStack "WP", "AddEmptyRows"

    GetActionsTable.AppendTrailingRows wp.Range("WP.NrOfEmptyRows")
    GetResultsTable.AppendTrailingRows wp.Range("WP.NrOfEmptyRows")

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.AddEmptyRows error:"
    Resume subend
End Sub


Private Sub CopyWPToSheet(newWB As Workbook)
    Dim sht As Worksheet
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "WP", "CopyWPToSheet"

    Set sht = newWB.Sheets.Add(After:=newWB.Sheets(1))
    sht.Name = wp.Range("WP.WBSNo").value
    
    'Copy Data
    UnprotectSheet wp
    noupdate = True
    AddEmptyRows
  '  SetResultsOffset 'the results field location needs to be exported
    
    Application.DisplayAlerts = False
'    WP.Range("Print_Area").Copy
    wp.Range("Print_Area").offset(-1, -1).Resize(wp.Range("Print_Area").rows.Count + 1, wp.Range("Print_Area").Columns.Count + 1).Copy
    sht.Paste
    Application.DisplayAlerts = True
    
    'Adjust rows and columns
    For i = 1 To wp.Range("Print_Area").rows.Count + 1
        sht.Cells(i, 1).EntireRow.Hidden = wp.Cells(i, 1).EntireRow.Hidden
        sht.Cells(i, 1).EntireRow.RowHeight = wp.Cells(i, 1).EntireRow.RowHeight
    Next
    For i = 1 To wp.Range("Print_Area").Columns.Count + 1
        sht.Cells(1, i).EntireColumn.Hidden = wp.Cells(1, i).EntireColumn.Hidden
        sht.Cells(1, i).EntireColumn.ColumnWidth = wp.Cells(1, i).EntireColumn.ColumnWidth
    Next
    sht.Range(sht.Cells(1, wp.Range("Print_Area").Columns.Count + 2), sht.Cells(1, wp.Range("Print_Area").Columns.Count + 200)).EntireColumn.Interior.Color = RGB(242, 242, 242)
    sht.Range(sht.Cells(wp.Range("Print_Area").rows.Count + 2, 1), sht.Cells(wp.Range("Print_Area").rows.Count + 100, 1)).EntireRow.Interior.Color = RGB(242, 242, 242)
    
'    sht.Cells().locked = True

    'if there is already a logo in the destination sheet then delete it
    If sht.Shapes.Count = 1 Then sht.Shapes(1).Delete
    
    'copy logo
    Dim shape As shape
    Dim shapename As String
    For Each shape In wp.Shapes
        If shape.Type = msoPicture Then
            If shape.TopLeftCell.row <= wp.Range(wp.CodeName & ".H0").row Then
                shapename = shape.Name
                wp.Shapes(shapename).Copy
                sht.Paste destination:=sht.Cells(3, 3) 'Range("H0")
                Exit For
            End If
        End If
    Next
    
    'position logo
    Dim dLogoRatio As Double
    Dim indent As Integer
    Dim offset As Integer
    offset = 0
'    indent = Config.Range("Config.LogoIndent").Value
    indent = Config_Lic.Range("Config.LogoIndent3").value
    Set shape = sht.Shapes(shapename)
    Dim rCell As Range
    Set rCell = wp.Range(wp.CodeName & ".H0")
    i = rCell.Cells.Count
    Set rCell = wp.Range(wp.CodeName & ".H0").Cells(1, i)
'    dLogoRatio = (rCell.Height - indent * 2) / shape.Height
    dLogoRatio = (wp.Range(wp.CodeName & ".H0").EntireRow.Height - indent * 2) / shape.Height
    If Math.Abs((shape.Width * dLogoRatio) - shape.Width) > 0.5 Then _
        shape.Width = shape.Width * dLogoRatio
'    If Math.Abs((rCell.Top + indent) - shape.Top) > 0.5 Then _
'        shape.Top = rCell.Top + indent
'    If Math.Abs(((rCell.Left + rCell.Width) - indent - shape.Width - offset) - shape.Left) > 0.5 Then _
'        shape.Left = (rCell.Left + rCell.Width) - indent - shape.Width - offset
    If Math.Abs((wp.Range(wp.CodeName & ".H0").Top + indent) - shape.Top) > 0.5 Then _
        shape.Top = wp.Range(wp.CodeName & ".H0").Top + indent
    If Math.Abs(((wp.Range(wp.CodeName & ".H0").Left + wp.Range(wp.CodeName & ".H0").Width) - indent - shape.Width - offset) - shape.Left) > 0.5 Then _
        shape.Left = (wp.Range(wp.CodeName & ".H0").Left + wp.Range(wp.CodeName & ".H0").Width) - indent - shape.Width - offset
    
    newWB.Windows(1).DisplayGridlines = False
    newWB.Windows(1).DisplayHeadings = False
    
    ThisWorkbook.Activate
    SetProtection sht

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.CopyWPToSheet error:"
    Resume subend
End Sub

Private Sub SetProtection(sht As Worksheet)
    Dim R As Range
    Dim ir As Integer
    Dim sLocked As String
    
    On Error GoTo suberr
    modStack.PushCallStack "WP", "SetProtection"
    
    sLocked = appGetLOCText("locked")
    
    SetCellProtection sht.Range(wp.Range("WP.Name").Address), True
    
    'Start and finish dates might contain formulas. In this case they are locked on the WP. They must be locked on the exported WP too
    SetCellProtection sht.Range(Range("WP.BaseStart").Address), ((Range("WP.Schedule.Protection").value = sLocked) Or (Range("WP.BaseStart").locked))
    SetCellProtection sht.Range(Range("WP.BaseFinish").Address), ((Range("WP.Schedule.Protection").value = sLocked) Or (Range("WP.BaseFinish").locked))
    SetCellProtection sht.Range(Range("WP.Start").Address), ((Range("WP.Schedule.Protection").value = sLocked) Or (Range("WP.Start").locked))
    SetCellProtection sht.Range(Range("WP.Finish").Address), ((Range("WP.Schedule.Protection").value = sLocked) Or (Range("WP.Finish").locked))
    
    SetCellProtection sht.Range(Range("WP.Status").Address), Range("WP.Status.Protection").value = sLocked
    SetCellProtection sht.Range(Range("WP.Progress").Address), Range("WP.Progress.Protection").value = sLocked

'does not work:
'    If Range("WP.Progress.Protection").value = sLocked Then
'        With sht.Range(Range("WP.Progress").address).Validation
'            .Delete
'            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
'            .IgnoreBlank = True
'            .InCellDropdown = True
'            .ShowInput = True
'            .ShowError = True
'        End With
'    End If
   
 'modified for SALK
'    Set r = sht.Range(GetWorkTable.ValuesRange.Address)
'    For ir = 1 To r.rows.Count
'        SetCellProtection r.Cells(ir, 2), Range("WP.Work.Protection").value = sLocked Or Range("WP.Base.Protection").value = sLocked
'        SetCellProtection r.Cells(ir, 3), Range("WP.Work.Protection").value = sLocked Or Range("WP.Change.Protection").value = sLocked
'        SetCellProtection r.Cells(ir, 4), Range("WP.Work.Protection").value = sLocked Or Range("WP.Actual.Protection").value = sLocked
'    Next
            
    Set R = sht.Range(GetCostTable.ValuesRange.Address)
    For ir = 1 To R.rows.Count
        SetCellProtection R.Cells(ir, 2), Range("WP.Cost.Protection").value = sLocked Or Range("WP.Base.Protection").value = sLocked
        SetCellProtection R.Cells(ir, 3), Range("WP.Cost.Protection").value = sLocked Or Range("WP.Change.Protection").value = sLocked
        SetCellProtection R.Cells(ir, 4), Range("WP.Cost.Protection").value = sLocked Or Range("WP.Actual.Protection").value = sLocked
    Next
    
    With sht.PageSetup
        '.PrintTitleRows = ""
        '.PrintTitleColumns = ""
        .PrintArea = ""
        '.LeftHeader = ""
        '.CenterHeader = ""
        '.RightHeader = ""
        '.LeftFooter = ""
        '.CenterFooter = ""
        '.RightFooter = ""
        .LeftMargin = Application.InchesToPoints(0.787401575)
        .RightMargin = Application.InchesToPoints(0.787401575)
        .TopMargin = Application.InchesToPoints(0.984251969)
        .BottomMargin = Application.InchesToPoints(0.984251969)
        .HeaderMargin = Application.InchesToPoints(0.4921259845)
        .FooterMargin = Application.InchesToPoints(0.4921259845)
        .PrintHeadings = False
        .PrintGridlines = False
        .PrintComments = xlPrintNoComments
        '.PrintQuality = 600
        .CenterHorizontally = False
        .CenterVertically = False
        .Orientation = xlPortrait
        '.Draft = False
        .PaperSize = xlPaperA4
        .FirstPageNumber = xlAutomatic
        .Order = xlDownThenOver
        '.BlackAndWhite = False
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = 1
        .PrintErrors = xlPrintErrorsDisplayed
    End With
    
    sht.Protect "0123456789", True, True, True, False, False, False, False, False, True, True, False, True, False, True
       
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.SetProtection error:"
    Resume subend
End Sub

Private Sub SetCellProtection(Target As Range, locked As Boolean)
    On Error GoTo suberr
    modStack.PushCallStack "WP", "SetCellProtection"

    If locked Then
        Target.locked = True
        If Application.Version = "12.0" Then
            Target.Interior.Color = RGB(242, 242, 242)
        Else
            Target.Interior.ColorIndex = 15
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.SetCellProtection error:"
    Resume subend
End Sub

Public Sub cmdImport_Click()
    Dim sPath As String
    Dim iWP As Integer
    Dim iRes As Integer
    Dim sRes As String
    Dim sWBSNo As String
    Dim wb As Workbook
    Dim FileExtStr As String
    
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdImport_Click"
    
    If IsDemoVersion Then GoTo subend
    
    If val(Application.Version) < 12 Then
        FileExtStr = ".xls"
    Else
        FileExtStr = ".xlsx"
    End If
    
    sPath = Range("WP.ImportPath").value
    If sPath = "" Or Dir(sPath, vbDirectory) = "" Then
        AppStopMsg appGetLOCText("ImportPathNotValid")
        GoTo subend
    End If
    
    If VBA.Right(sPath, 1) = "\" Then Range("WP.ImportPath").value = Left(sPath, Len(sPath) - 1)
    
    iWP = WPDetails.Range("WPDetails.WBSNo").value
    iRes = WPDetails.Range("WPDetails.Responsible").value
    
    'All WPs for selected Responsible
    If iRes > 1 Then
        sRes = Config.Range("Config.WPResponsibles").Cells(iRes, 1).value
        
        If appQOCMsg(appGetLOCText("WPImport") & " (" & sRes & ")") = vbCancel Then GoTo subend
        
        If appFileIsOpen(sRes & FileExtStr) Then
            Set wb = Workbooks(sRes & FileExtStr)
        Else
            If Dir(sPath & "\" & sRes & FileExtStr) = "" Then
                AppStopMsg appGetLOCText("FileNotFound") & vbLf & vbLf & sPath & "\" & sRes & FileExtStr
                GoTo subend
            Else
                Set wb = Workbooks.Open(sPath & "\" & sRes & FileExtStr, False, True)
                Me.Activate
            End If
        End If
        ImportWP wb
        wb.Close
        Set wb = Nothing
    'only one WP
    ElseIf iWP > 1 Then
        sWBSNo = wp.Range("WP.WBSNo").value
        If appQOCMsg(appGetLOCText("WPImport") & " (" & sWBSNo & ")") = vbCancel Then GoTo subend
        
        If appFileIsOpen(sWBSNo & FileExtStr) Then
            Set wb = Workbooks(sWBSNo & FileExtStr)
        Else
            If Dir(sPath & "\" & sWBSNo & FileExtStr) = "" Then
                AppStopMsg appGetLOCText("FileNotFound") & vbLf & vbLf & sPath & "\" & sWBSNo & FileExtStr
                GoTo subend
            Else
                Set wb = Workbooks.Open(sPath & "\" & sWBSNo & FileExtStr, False, True)
                Me.Activate
            End If
        End If
        ImportWP wb
        wb.Close
        Set wb = Nothing
        'update view
'        cboWPs_Change
    
    'all WPs
    ElseIf iWP = 1 Then
        cmdUpdateResponsibles_Click
        
        If appQOCMsg(appGetLOCText("WPImport") & " (" & appGetLOCText("AllResponsibles") & ")") = vbCancel Then GoTo subend
        
        For iRes = 2 To Config.Range("Config.WPResponsibles").rows.Count
            sRes = Config.Range("Config.WPResponsibles").Cells(iRes, 1).value
            If appFileIsOpen(sRes & FileExtStr) Then
                Set wb = Workbooks(sRes & FileExtStr)
                ImportWP wb
                wb.Close
                Set wb = Nothing
            Else
                If Dir(sPath & "\" & sRes & FileExtStr) = "" Then
                    AppStopMsg appGetLOCText("FileNotFound") & vbLf & vbLf & sPath & "\" & sRes & FileExtStr
                    'GoTo SubEnd
                Else
                    Set wb = Workbooks.Open(sPath & "\" & sRes & FileExtStr, False, True)
                    Me.Activate
                    ImportWP wb
                    wb.Close
                    Set wb = Nothing
                End If
            End If
        Next
    End If
    
'    CleanWPDetails
    'update view
    cboWPs_Change
    
    AppInfoMsg appGetLOCText("done")
    
    
subend:
    bDirty = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdImport_Click error:"
    Resume subend
End Sub

Private Sub ImportWP(wb As Workbook)
    Dim Count As Integer
    Dim s As String
    Dim c As Range
    Dim R As Range
    Dim ic As Integer
    Dim ir As Integer
    Dim sht As Worksheet
    Dim sLocked As String
    Dim wpSpec As String
    Dim task As TPGTask
    Dim countresults As Integer
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "WP", "ImportWP"
    
    Me.noupdate = True
    For Each sht In wb.Sheets
        If sht.Name <> "WPInfo" Then
        
            Set task = New TPGTask
            task.FindInPlanByUId sht.Range(wp.Range("WP.Uid").Address).value
            
            If task Is Nothing Then
                AppStopMsg appGetLOCText("WBSNotFound") & " (" & sht.Name & ")"
            Else
                sLocked = appGetLOCText("locked")
                wpSpec = task.GetWPSpec
                
                'Header
                If (wp.Range("WP.Progress.Protection").value <> sLocked) Then task.SetCellValue "Plan.ProgressColumn", sht.Range(Range("WP.Progress").Address).value, True
                If (wp.Range("WP.Status.Protection").value <> sLocked) Then task.SetCellValue "Plan.StatusColumn", sht.Range(Range("WP.Status").Address).value, True
                If (wp.Range("WP.Schedule.Protection").value <> sLocked) Then
                    'if the cell contains a formula it is locked and we must not overwrite it with a value
                    task.SetCellValue "Plan.BaselineStartColumn", sht.Range(Range("WP.BaseStart").Address).value, True, True
                    task.SetCellValue "Plan.BaselineFinishColumn", sht.Range(Range("WP.BaseFinish").Address).value, True, True
                    task.SetCellValue "Plan.StartColumn", sht.Range(Range("WP.Start").Address).value, True, True
                    task.SetCellValue "Plan.FinishColumn", sht.Range(Range("WP.Finish").Address).value, True, True
                End If
                
                'modified for SALK
                'Work
'                If wp.Range("WP.Work.Protection").value <> sLocked Then
'                    For Each c In sht.Range(wb.Sheets("WPInfo").Range("WPInfo.Work").value).Resize(ColumnSize:=1)
'                        Set r = task.GetBaseValueCell("work", c.value)
'                        If r Is Nothing Then
'                            AppStopMsg appGetLOCText("ResourceNotInPlan") & ": " & c.value
'                        Else
'                           If (wp.Range("WP.Base.Protection").value <> sLocked) Then task.SetCellValue2 r.Column, c.offset(ColumnOffset:=1).value, True
'                           If (wp.Range("WP.Change.Protection").value <> sLocked) Then task.SetCellValue2 r.Column + 1, c.offset(ColumnOffset:=2).value, True
'                           If (wp.Range("WP.Actual.Protection").value <> sLocked) Then task.SetCellValue2 r.Column + 2, c.offset(ColumnOffset:=3).value, True
'                        End If
'                    Next
'                End If
                    
                'Cost
                If wp.Range("WP.Cost.Protection").value <> sLocked Then
                    For Each c In sht.Range(wb.Sheets("WPInfo").Range("WPInfo.Cost").value).Resize(ColumnSize:=1)
                        Set R = task.GetBaseValueCell("cost", c.value)
                        If R Is Nothing Then
                            'modified for SALK
                            ' AppStopMsg appGetLOCText("CostTypeNotInPlan") & ": " & c.value
                        Else
                           If (wp.Range("WP.Base.Protection").value <> sLocked) Then task.SetCellValue2 R.Column, c.offset(ColumnOffset:=1).value, True
                           If (wp.Range("WP.Change.Protection").value <> sLocked) Then task.SetCellValue2 R.Column + 1, c.offset(ColumnOffset:=2).value, True
                           If (wp.Range("WP.Actual.Protection").value <> sLocked) Then task.SetCellValue2 R.Column + 2, c.offset(ColumnOffset:=3).value, True
                        End If
                    Next
                End If
                
                ' Find or create new line in WPDetails
                Set R = WPDetails.Range("WPDetails").Find(task.GetUID, , xlValues, xlWhole, , , False)
                If Not R Is Nothing Then
                    ir = R.row
                Else
                    Set R = WPDetails.Range("WPDetails")
                    ir = R.row + R.rows.Count
                    'Application.Names("WPDetails").RefersToR1C1 = "=WPDetails!R" & r.Row & "C" & r.Column & ":R" & ir & "C" & r.Column
                    
                    s = "=WPDetails!" & ThisWorkbook.Names("WPDetails").RefersToRange.Resize(ThisWorkbook.Names("WPDetails").RefersToRange.rows.Count + 1, 1).AddressLocal
                    ThisWorkbook.Names("WPDetails").Delete
                    ThisWorkbook.Names.Add "WPDetails", s
                    
                    WPDetails.Cells(ir, 1).value = task.GetUID
                End If
                
                'import actions(contents)
                ic = 4
                Count = 0
                i = wb.Sheets("WPInfo").Range("WPInfo.Actions.Start").value + 1
                Do Until sht.Cells(i, 3).value = "PMCCSTOP"
                    If (sht.Cells(i, 4).value <> "") Or (sht.Cells(i, 7).value <> "") Or (sht.Cells(i, 8).value <> "") Or (sht.Cells(i, 9).value <> "") Then
                        wpSpec = "x"
                        Count = Count + 1
                        WPDetails.Cells(ir, ic).value = sht.Cells(i, 4).value
                        WPDetails.Cells(ir, ic + 1).value = sht.Cells(i, 7).value
                        WPDetails.Cells(ir, ic + 2).value = sht.Cells(i, 8).value
                        WPDetails.Cells(ir, ic + 3).value = sht.Cells(i, 9).value
                        ic = ic + 4
                    End If
                    i = i + 1
                Loop
'                For Each r In sht.Range(wb.Sheets("WPInfo").Range("WPInfo.Actions.Table").Value).Resize(GetResultOffset(wb, sht), ColumnSize:=1)
'                    If r.Value <> "" Or r.offset(0, 1).Value <> "" Or r.offset(0, 2).Value <> "" Then
'                        wpSpec = "x"
'                        Count = Count + 1
'                        WPDetails.Cells(ir, ic).Value = r.Value
'                        WPDetails.Cells(ir, ic + 1).Value = r.offset(0, 1).Value
'                        WPDetails.Cells(ir, ic + 2).Value = r.offset(0, 2).Value
'                        ic = ic + 3
'                    End If
'                Next
                WPDetails.Cells(ir, 3).value = Count
                'import results
                countresults = 0
                i = i + 2
                Do Until sht.Cells(i, 3).value = "PMCCSTOP"
                    If sht.Cells(i, 4).value <> "" Then
                        wpSpec = "x"
                        countresults = countresults + 1
                        WPDetails.Cells(ir, ic).value = sht.Cells(i, 4).value
                        ic = ic + 1
                    End If
                    i = i + 1
                Loop
'                For Each r In sht.Range(wb.Sheets("WPInfo").Range("WPInfo.Results.Table").Value)     '.Resize(GetResultOffset(wb, sht), ColumnSize:=1)
'                    If r.Value <> "" Then
'                        wpSpec = "x"
'                        countresults = countresults + 1
'                        WPDetails.Cells(ir, ic).Value = r.Value
'                        ic = ic + 1
'                    End If
'                Next
                WPDetails.Cells(ir, 2).value = countresults
                
                task.SetWPSpec wpSpec ' update wpspec on plan
            End If
        End If
    Next

subend:
    Me.noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.ImportWP error:"
    Resume subend
End Sub

'Private Function GetResultOffset(wb As Workbook, sht As Worksheet) As Integer
'    Dim actionTableRange As Range
'
'    On Error GoTo SubErr
'    modStack.PushCallStack "WP", "GetResultOffset"
'
'    Set actionTableRange = sht.Range(wb.Sheets("WPInfo").Range("WPInfo.Actions.Table").Value)
'    GetResultOffset = sht.Cells(actionTableRange.Row - 1, actionTableRange.Column).Value
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "WP.GetResultOffset error:"
'    Resume SubEnd
'End Function

'Private Sub ImportResults(wb As Workbook, sht As Worksheet, Row As Integer)
'    Dim actionTableRange As Range
'    Dim resultOffset As Integer
'    Dim results As String
'
'    On Error GoTo SubErr
'    modStack.PushCallStack "WP", "ImportResults"
'
'    Set actionTableRange = sht.Range(wb.Sheets("WPInfo").Range("WPInfo.Actions.Table").Value)
'    resultOffset = GetResultOffset(wb, sht)
'    results = sht.Cells(actionTableRange.Row + resultOffset + 3, 3)
'    ' Write values to WPDetails
'    WPDetails.Cells(Row, 2).Value = results
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "WP.ImportResults error:"
'    Resume SubEnd
'End Sub

Private Sub setWPInfo()
    On Error GoTo suberr
    modStack.PushCallStack "WP", "setWPInfo"

    WPInfo.Range("WPInfo.ProjectNo").value = Cover.Range("Cover.ProjectNo").value
    WPInfo.Range("WPInfo.ProjectFile").value = ActiveWorkbook.FullName
    WPInfo.Range("WPInfo.ExportDate").value = Now()
    WPInfo.Range("WPInfo.UserName").value = Application.UserName
    'modified for SALK
'    WPInfo.Range("WPInfo.Work").value = GetWorkTable.ValuesRange.Address
'    WPInfo.Range("WPInfo.Cost").value = GetCostTable.ValuesRange.Address
    WPInfo.Range("WPInfo.Actions.Start").value = Me.Range("WP.Actions.Start").row

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.setWPInfo error:"
    Resume subend
End Sub

Public Sub cmdPrint_Click()
    Dim uid, uids As Range
    Dim i, rememberSelectedWP As Integer
    Dim showMessage As Boolean
    Dim task As TPGTask
    On Error GoTo suberr
    modStack.PushCallStack "WP", "cmdPrint_Click"

    Set task = New TPGTask

    showMessage = True
    If IsDemoVersion Then GoTo subend
    
    
    UnprotectWorkbook "pmccTPG:-)"
    WPInfo.visible = xlSheetVisible
    setWPInfo
    SetVisibility WPInfo, xlSheetVeryHidden
    ProtectWorkbook
    

    rememberSelectedWP = WPDetails.Range("WPDetails.WBSNo").value
    Set uids = Intersect(Plan.Range(Plan.Range("Plan.ProjectHeader"), Plan.Range("Plan.ProjectFooter").offset(-1)), Plan.Range("Plan.UIDColumn"))
    i = 1
    For Each uid In uids.rows
        task.FindInPlanByUId (uid.value)
        If ResponsibleMatch(task.GetResponsible, rememberSelectedWP) And WPSpecMatch(task.GetWPSpec, rememberSelectedWP) And WPSelectionMatch(task.GetUID, rememberSelectedWP) Then
            If showMessage Then
                If appQOCMsg(appGetLOCText("WPPrint") & GetMessageText(rememberSelectedWP)) = vbCancel Then GoTo subend
                showMessage = False
            End If
            WPDetails.Range("WPDetails.WBSNo").value = i + 1
            cboWPs_Change
            wp.PrintOut
'            Debug.Print "About to print: " & wp.Range("WP.WBSNo").value & " " & wp.Range("WP.Name") & ";"
        End If
        i = i + 1
    Next

    WPDetails.Range("WPDetails.WBSNo").value = rememberSelectedWP
    cboWPs_Change

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.cmdPrint_Click error:"
    Resume subend
End Sub

Private Function GetMessageText(selection As Integer) As String
    Dim result As String
    
    On Error GoTo suberr
    modStack.PushCallStack "WP", "GetMessageText"

    If selection = 1 And WPDetails.Range("WPDetails.Responsible").value = 1 And wp.Range("wp.WPSpecFilter").value = 1 Then
        GetMessageText = vbNewLine + appGetLOCText("AllWPs")
    Else
        If selection <> 1 Then
            GetMessageText = vbNewLine + "(" + Plan.Range("Plan.WPs").rows(selection).value + ")"
            GoTo subend
        End If
        If WPDetails.Range("WPDetails.Responsible").value <> 1 Then
            result = vbNewLine + "(" + Config.Range("Config.WPResponsibles").rows(WPDetails.Range("WPDetails.Responsible").value).value + ")"
        End If
        If wp.Range("wp.WPSpecFilter").value <> 1 Then
            result = result + vbNewLine + "(" + Config.Range("Config.WPSpecFilter").rows(wp.Range("WP.WPSpecFilter").value).value + ")"
        End If
        
        GetMessageText = result
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.GetMessageText error:"
    Resume subend
End Function

Private Function ResponsibleMatch(Responsible As String, selection As Integer) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "WP", "ResponsibleMatch"

    If WPDetails.Range("WPDetails.Responsible").value = 1 Or selection > 1 Then 'selection of a single task overrides responsible setting
        ResponsibleMatch = True
    Else
        'If responsible = Config.Range("Config.WPResponsibles").rows(WPDetails.Range("WPDetails.Responsible").value).value Then
        If Responsible = GetSelectedResponsible Then
            ResponsibleMatch = True
        Else
            ResponsibleMatch = False
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.ResponsibleMatch error:"
    Resume subend
End Function

Private Function WPSpecMatch(wpSpec As String, selection As Integer) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "WP", "WPSpecMatch"

    If wp.Range("wp.WPSpecFilter").value = 1 Or selection > 1 Then 'selection of a single task overrides wpSpec setting
        WPSpecMatch = True
    Else
        If VBA.InStr(Config.Range("Config.WPSpecFilter").rows(wp.Range("WP.WPSpecFilter").value).value, wpSpec) > 0 And wpSpec <> "" Then
            WPSpecMatch = True
        Else
            WPSpecMatch = False
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.WPSpecMatch error:"
    Resume subend
End Function

Private Function WPSelectionMatch(selectedTask As String, selection As Integer) As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "WP", "WPSelectionMatch"

    If selection = 1 Then
        WPSelectionMatch = True
    Else
        If selectedTask = GetSelectedUID Then
            WPSelectionMatch = True
        Else
            WPSelectionMatch = False
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.WPSelectionMatch error:"
    Resume subend
End Function

Private Function GetSelectedUID() As String
    Dim rowNr As Integer
    On Error GoTo suberr
    modStack.PushCallStack "WP", "GetSelectedUID"

    rowNr = Plan.Range("Plan.ProjectHeader").row + WPDetails.Range("WPDetails!$A$1").value - 2
    GetSelectedUID = Plan.Range("Plan.UIDColumn").rows(rowNr).value

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.GetSelectedUID error:"
    Resume subend
End Function

Private Function GetSelectedResponsible() As String
    Dim iRes As Integer
    On Error GoTo suberr
    modStack.PushCallStack "WP", "GetSelectedResponsible"

    iRes = WPDetails.Range("WPDetails.Responsible").value
    GetSelectedResponsible = Config.Range("Config.WPResponsibles").Cells(iRes, 1).value

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.GetSelectedResponsible error:"
    Resume subend
End Function

Private Function GetSelectedWPSpec() As String
    On Error GoTo suberr
    modStack.PushCallStack "WP", "GetSelectedWPSpec"

    GetSelectedWPSpec = Config.Range("Config.WPSpecFilter").rows(wp.Range("WP.WPSpecFilter").value).value

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.GetSelectedWPSpec error:"
    Resume subend
End Function

Private Function GetSelectedWPSpecFormatted() As String
    On Error GoTo suberr
    modStack.PushCallStack "WP", "GetSelectedWPSpecFormatted"

    If GetSelectedWPSpec = "" Then
        GetSelectedWPSpecFormatted = ""
    Else
        GetSelectedWPSpecFormatted = "WPSpec: " & GetSelectedWPSpec & vbNewLine & vbNewLine
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.GetSelectedWPSpecFormatted error:"
    Resume subend
End Function

Private Function GetSelectedWPName() As String
    On Error GoTo suberr
    modStack.PushCallStack "WP", "GetSelectedWPName"

    GetSelectedWPName = Plan.Range("Plan.WPs").rows(WPDetails.Range("WPDetails.WBSNo").value).value

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.GetSelectedWPName error:"
    Resume subend
End Function

Public Sub reset()
    Dim t As TPGTable
    On Error GoTo suberr
    modStack.PushCallStack "WP", "reset"

    Set t = New TPGTable
    Me.noupdate = True
    
    Range("WP.Name").value = ""
    Range("WP.Responsibility").value = ""
    Range("WP.Progress") = ""
    Range("WP.Status").value = ""
    Range("WP.BaseStart") = ""
    Range("WP.BaseFinish") = ""
    Range("WP.Start") = ""
    Range("WP.Finish") = ""
    
    'modified for SALK
'    Set t = Me.GetWorkTable
'    t.clear
'
'    Set t = Me.GetCostTable
'    t.clear
    
    Set t = Me.GetActionsTable
    t.clear
    
    GetResultsTable.clear
    
    Range("WP.ImportPath").value = ""
    Range("WP.ExportPath").value = ""
    Me.noupdate = False

subend:
    bDirty = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.reset error:"
    Resume subend
End Sub

Private Sub Worksheet_Activate()
bDirty = False
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
If (InRange(Target, GetActionsTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext False, False
ElseIf (InRange(Target, GetResultsTable.ValuesRange)) And (Target.Areas.Count = 1) Then
    modContextMenu.BuildTableContext False, False
Else
    modContextMenu.RestoreDefaultMenu
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo suberr
    If Me.noupdate Then Exit Sub
    modStack.PushCallStack "WP", "Worksheet_Change"
    If (Target.Column < Me.Range("WP.Progress.Protection").Column) Then
        bDirty = True
    End If
    If GetActionsTable.Mergedfit(Target) Then GoTo subend
    If GetResultsTable.Mergedfit(Target) Then GoTo subend
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.Worksheet_Change error:"
    Resume subend
End Sub

Private Sub SaveDetails()
    Dim R As Range
    Dim ir, ic, Count As Integer
    Dim s As String
    Dim Table As TPGTable
    Dim workPackage As TPGTask
    
    ' Update WPSpec in Plan
    On Error GoTo suberr
    modStack.PushCallStack "WP", "SaveDetails"

    Set workPackage = New TPGTask
    workPackage.FindInPlanByUId (Range("WP.Uid").value)

    If Not workPackage.IsRootTask Then
        If Not HasDetails Then
            If workPackage.GetWPSpec = "o" Then
                workPackage.SetWPSpec "o"
            Else
                workPackage.SetWPSpec ""
            End If
            GoTo subend
        End If
        workPackage.SetWPSpec "x"
    End If
    
    ' Find or create new line in WPDetails
    Set R = WPDetails.Range("WPDetails").Find(Range("WP.Uid").value, , xlValues, xlWhole, , , False)
    If Not R Is Nothing Then
        ir = R.row
    Else
        Set R = WPDetails.Range("WPDetails")
        ir = R.row + R.rows.Count

        s = "=WPDetails!R" & R.row & "C" & R.Column & ":R" & ir & "C" & R.Column
        ThisWorkbook.Names("WPDetails").Delete
        ThisWorkbook.Names.Add "WPDetails", s

        WPDetails.Cells(ir, 1).value = Range("WP.Uid").value
    End If

    ' Write values to WPDetails
    Set Table = GetActionsTable
'    WPDetails.Cells(ir, 2).Value = Range("WP.Results").Value
    ic = 4
    Count = 0
    For Each R In Table.ValuesRange(1)
        If Not Table.IsRowEmpty(R.row) Then
            Count = Count + 1
            WPDetails.Cells(ir, ic).value = R.value
            WPDetails.Cells(ir, ic + 1).value = R.offset(0, 1).value
            WPDetails.Cells(ir, ic + 2).value = R.offset(0, 2).value
            WPDetails.Cells(ir, ic + 3).value = R.offset(0, 3).value
            ic = ic + 4
        End If
    Next
    WPDetails.Cells(ir, 3).value = Count
    Set Table = GetResultsTable
    Count = 0
    For Each R In Table.ValuesRange(1)
        If Not Table.IsRowEmpty(R.row) Then
            Count = Count + 1
            WPDetails.Cells(ir, ic).value = R.value
            ic = ic + 1
        End If
    Next
    WPDetails.Cells(ir, 2).value = Count

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WP.SaveDetails error:"
    Resume subend
End Sub

Private Function HasDetails() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "WP", "hasDetails"

    If GetResultsTable.IsTableEmpty And GetActionsTable.IsTableEmpty Then
        HasDetails = False
    Else
        HasDetails = True
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.hasDetails error:"
    Resume subend
End Function

Public Function RenameOrgUnitInWP(sorgold As String, sorgnew As String) As Boolean
Dim c As Variant
Dim s As String
    On Error GoTo suberr
    modStack.PushCallStack "WP", "RenameOrgUnitInWP"
    
    Me.noupdate = True
    s = "WP.WorkTable"
    For Each c In Range(s).offset(1, 0).Resize(Range(s).rows.Count - 3, 1)
        If c.value <> "" Then
            If c.value = sorgold Then
                c.value = sorgnew
                Exit For
            End If
        End If
    Next
    RenameOrgUnitInWP = True
subend:
    Me.noupdate = False
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WP.RenameOrgUnitInWP error:"
    GoTo subend
End Function

Private Sub ProcessDirtyState()
If bDirty Then
    cmdSave_Click True
    bDirty = False
End If
End Sub

Private Sub Worksheet_Deactivate()
ProcessDirtyState
End Sub
Attribute VB_Name = "WPDetails"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Function CreateXml(xmlDom As Variant) As Variant
    Dim n As Variant
    Dim i As Integer
    Dim nrecord As Variant
    Dim c As Range
    Dim emptyrowscount As Integer
    Dim contentNode As Variant
    Dim rownode As Variant
    Dim resultcount As Integer
    Dim resultnode As Variant
    Dim contentcount As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "WPDetails", "CreateXml"

    Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
    
    For Each c In WPDetails.Range("WPDetails")
        If c.value <> "" Then
            Set nrecord = xmlDom.createNode(1, "wp", "")
            AddNode xmlDom, nrecord, "uid", c.value
'            AddNode xmlDom, nRecord, "result", c.offset(0, 1).Value
            resultcount = c.offset(0, 1).value
            contentcount = c.offset(0, 2).value
            
            Set contentNode = xmlDom.createNode(1, "content", "")
            emptyrowscount = 0
            For i = 1 To contentcount
                Set rownode = xmlDom.createNode(1, "row", "")
                AddNode xmlDom, rownode, "text", c.offset(0, 3 + (i - 1) * 4).value
                AddNode xmlDom, rownode, "responsible", c.offset(0, 4 + (i - 1) * 4).value
                AddNode xmlDom, rownode, "state", c.offset(0, 5 + (i - 1) * 4).value
                AddNode xmlDom, rownode, "duedate", c.offset(0, 6 + (i - 1) * 4).value
                contentNode.appendchild rownode
            Next
            nrecord.appendchild contentNode
       
            Set resultnode = xmlDom.createNode(1, "results", "")
            For i = 1 To resultcount
                AddNode xmlDom, resultnode, "row", c.offset(0, 3 + (contentcount * 4) + (i - 1)).value
            Next
            nrecord.appendchild resultnode
            
            n.appendchild nrecord
       
       End If
    Next
    Set CreateXml = n

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WPDetails.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant)
    Dim i As Integer
    Dim j As Integer
    Dim z As Integer
    Dim n As Variant
    Dim c As Range
    Dim s As String
    Dim adsNode As Variant
    Dim workPackage As TPGTask
    Dim bimportresultstable As Boolean
    Dim ssingleresult As String
    
    On Error GoTo suberr
    modStack.PushCallStack "WPDetails", "ImportXml"

    If Not Node Is Nothing Then
        
        reset
        
        i = 0
        For Each n In Node.SelectNodes("wp")
            'if wp doesn't exist in plan anymore, then we don't need to import(otherwise problems)
            If WPExistsInPlan(n) Then
                i = i + 1
                Set c = getRange(Me, "WPDetails", 1, 1, i, 0)
                'node did not exist in 1.0.1
                If Not n.SelectSingleNode("uid") Is Nothing Then
                    c.value = n.SelectSingleNode("uid").Text
                    
                    ' Update WPSpec in Plan
                    Set workPackage = New TPGTask
                    workPackage.FindInPlanByUId n.SelectSingleNode("uid").Text
                    workPackage.SetWPSpec "x"
                End If
                
                'c.offset(0, 1).Value = n.SelectSingleNode("result").Text
                'older PHB versions don't have the results node
                ssingleresult = ""
                If Not n.SelectSingleNode("results") Is Nothing Then
                    bimportresultstable = True
                    c.offset(0, 1).value = n.SelectNodes("results/row").length
                ElseIf Not n.SelectSingleNode("result") Is Nothing Then
                    ssingleresult = n.SelectSingleNode("result").Text
                End If
                
                c.offset(0, 2).value = n.SelectNodes("content/row").length
                
                j = 0
                For Each adsNode In n.SelectNodes("content/row")
                   j = j + 1
                   c.offset(0, 3 + (j - 1) * 4).value = adsNode.SelectSingleNode("text").Text
                   c.offset(0, 4 + (j - 1) * 4).value = adsNode.SelectSingleNode("responsible").Text
                   If Not adsNode.SelectSingleNode("state") Is Nothing Then
                       c.offset(0, 5 + (j - 1) * 4).value = adsNode.SelectSingleNode("state").Text
                   End If
                   SetXMLValue c.offset(0, 6 + (j - 1) * 4), adsNode.SelectSingleNode("duedate").Text
                Next
                If bimportresultstable Then
                    z = 0
                    For Each adsNode In n.SelectNodes("results/row")
                       z = z + 1
                       c.offset(0, 3 + (j * 4) + (z - 1)).value = adsNode.Text
                    Next
                 'compatibility with old PHB version
                ElseIf ssingleresult <> "" Then
                       c.offset(0, 3 + (j * 4)).value = ssingleresult
                       c.offset(0, 1).value = 1
                End If
            End If
        Next
        
        s = Me.Range("WPDetails").Resize(i + 1).Address
        Application.Names("WPDetails").Delete
        Application.Names.Add "WPDetails", "=WPDetails!" & s
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WPDetails.ImportXml error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "WPDetails", "reset"

    If Me.Range("WPDetails").rows.Count > 1 Then
        getRange(Me, "WPDetails", -1, 0, 1, 0).EntireRow.Delete
    End If
    Range("WPDetails").EntireRow.value = ""

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WPDetails.reset error:"
    Resume subend
End Sub

Private Function WPExistsInPlan(Node As Variant) As Boolean
Dim sguid As String
Dim found As Range
On Error GoTo suberr
    WPExistsInPlan = False
    If Not Node.SelectSingleNode("uid") Is Nothing Then
        sguid = Node.SelectSingleNode("uid").Text
        
        Dim c As Range
        For Each c In Plan.Range(Intersect(Plan.Range("Plan.UidColumn"), Plan.Range("Plan.ProjectHeader")), Intersect(Plan.Range("Plan.UidColumn"), Plan.Range("Plan.ProjectFooter")))
            If c.value = sguid Then
                WPExistsInPlan = True
                Exit For
            End If
        Next
    End If
subend:
    Exit Function
suberr:
    AppErrMsg "WPDetails.WPExistsInPlan error."
    Resume subend
    
End Function

Public Sub CopyWPDetails(sGUIDold As String, sGUIDnew As String)
    On Error GoTo suberr
    modStack.PushCallStack "WPDetails", "CopyWPDetails"
    Dim irowold As Integer
    Dim c
    Dim R As Range
    Dim irnew As Integer
    Dim s As String
    
    'find row sguidold
    irowold = 0
    For Each c In Me.Range("WPDetails")
        If c.value = sGUIDold Then
            irowold = c.row
            Exit For
        End If
    Next
    
    'found row
    If irowold > 0 Then
        Set R = WPDetails.Range("WPDetails")
        irnew = R.row + R.rows.Count
        Me.Cells(irowold, 1).EntireRow.Copy
                'Plan.Cells(insertionPoint, 1).EntireRow.Insert
        CellFunctions.InsertWrapped Me.Cells(irnew, 1).EntireRow
        Me.Cells(irnew, 1).value = sGUIDnew
        s = "=WPDetails!R" & R.row & "C" & R.Column & ":R" & irnew & "C" & R.Column
        ThisWorkbook.Names("WPDetails").Delete
        ThisWorkbook.Names.Add "WPDetails", s
    End If
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WPDetails.CopyWPDetails error:"
    Resume subend
End Sub



Attribute VB_Name = "WPInfo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Work"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Const bChkCol = 3
Public bnoupdate As Boolean

Public Sub ResetDynOrgUnits()
Dim bnoupd As Boolean
Dim bscreenupd As Boolean
Dim firstrow As Integer
Dim lastrow As Integer
Dim s As shape
Dim i As Integer

On Error GoTo suberr
modStack.PushCallStack "Work", "ResetDynOrgUnits"
If Not bnoupdate Then
    bnoupdate = True
    bnoupd = True
End If
If Application.ScreenUpdating Then
    Application.ScreenUpdating = False
    bscreenupd = True
End If

'remove orgunits from timephased chart
For i = Me.ChartObjects(3).Chart.SeriesCollection.Count To 2 Step -1
        Me.ChartObjects(3).Chart.SeriesCollection(i).Delete
Next

'delete all orgunits
firstrow = Me.Range("Work.StartRow").row + 1
lastrow = Me.Range("Work.TemplateInsertionPoint").row - 1
If lastrow - firstrow + 1 >= 1 Then
    Me.Range(Me.rows(firstrow), Me.rows(lastrow)).EntireRow.Delete xlShiftUp
End If

subend:
    If bnoupd Then bnoupdate = False
    If bscreenupd Then Application.ScreenUpdating = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Work.ResetDynOrgUnits error:"
    Resume subend
End Sub

Public Sub ResetCapaBlock()
Dim firstrow As Integer
Dim lastrow As Integer

'delete all orgunits in capablock
firstrow = Me.Range("Work.CapaHeader").row + 1
lastrow = Me.Range("Work.CapaFooter").row - 1
If lastrow - firstrow + 1 >= 1 Then
    Me.Range(Me.rows(firstrow), Me.rows(lastrow)).EntireRow.Delete xlShiftUp
End If

End Sub

Public Sub SetDynOrgUnits(splanningmode As String)
'first reset dynorgunits
'then show and fill orgunits part of this phb
'we expect that timelinedata is already present (cfr update) AND startdate of timeline is SET
Dim i As Integer
Dim j As Integer
Dim wtrange As Range
Dim SearchRange As Range
Dim rCell As Range
Dim rReferenceCell As Range
Dim R As Range
Dim s As shape
Dim vcolor As Variant

Dim c As Range
Dim icolcapa As Integer
Dim icoldate As Integer
Dim irowdynorg As Integer
Dim isrs As Integer

On Error GoTo suberr
modStack.PushCallStack "Work", "SetDynOrgUnits"
isrs = 2
Application.ScreenUpdating = False
bnoupdate = True
'first reset
ResetDynOrgUnits

Set wtrange = getRange(Plan, "Plan.WorkTypeNameRange", 1, -2, 0, 1)
icolcapa = Me.Range("Work.Col.Capa").Column
icoldate = Me.Range("Work.Col.DateStart").Column
'Loop through orgunits in plan sheet and add them to WORK
For Each c In Plan.Range("Plan.WorkTypeNameRange")
        If c.value <> "" Then
            'copy orgtemplate
            '/**Fix for 1705**/
            'Me.Range("Work.OrgTemplate").EntireRow.Copy
            RCopy Me.Range("Work.OrgTemplate").EntireRow
            Me.Cells(Me.Range("Work.TemplateInsertionPoint").row, 1).EntireRow.Insert
            irowdynorg = Me.Range("Work.TemplateInsertionPoint").row - 3
            Me.Cells(irowdynorg, 1).EntireRow.Hidden = False
            Me.Cells(irowdynorg + 1, 1).EntireRow.Hidden = False
            Me.Cells(irowdynorg + 2, 1).EntireRow.Hidden = False
            Application.CutCopyMode = False
            
            'set org name and color
            'depending on planning mode we take color from admin.org or from team sheet
            Me.Cells(irowdynorg, Me.Range("Work.Col.OrgUnit").Column).value = c.value
            If LCase(splanningmode) = "persons" Then
                vcolor = Team.GetResColor(c.value)
            Else
                vcolor = Admin.GetDepartmentColor(c.value)
            End If
            Me.Cells(irowdynorg, Me.Range("Work.Col.OrgUnit").Column - 1).Interior.Color = vcolor
            If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
                Me.Cells(irowdynorg, Me.Range("Work.Col.OrgUnit").Column - 1).Font.Color = modApp.GetContrastColor(Me.Cells(irowdynorg, Me.Range("Work.Col.OrgUnit").Column - 1).Interior.Color)
            Else
                'for KISS we hide the checkbox because only one resource
                Me.Cells(irowdynorg, Me.Range("Work.Col.OrgUnit").Column - 1).Font.Color = vcolor
            End If
            
            'fill rescells based on timelinedata in this sheet (below)
            FillResData c.value, irowdynorg + 1
            
            'fill capadata
            FillCapaData irowdynorg
            
            'add to timephased chart
            Me.ChartObjects(3).Chart.SeriesCollection.Add Me.Cells(irowdynorg, Me.Range("Work.Col.ResStart").Column).offset(1, 0).Resize(1, 12)
            Me.ChartObjects(3).Chart.SeriesCollection(isrs).ChartType = xlColumnStacked
            Me.ChartObjects(3).Chart.SeriesCollection(isrs).Name = Me.Cells(irowdynorg, Me.Range("Work.Col.OrgUnit").Column).value
            Me.ChartObjects(3).Chart.SeriesCollection(isrs).Interior.Color = Me.Cells(irowdynorg, Me.Range("Work.Col.OrgUnit").Column - 1).Interior.Color
            isrs = isrs + 1
        End If
Next

subend:
    bnoupdate = False
    Application.ScreenUpdating = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Work.SetDynOrgUnits error:"
    Resume subend
End Sub

Private Sub UpdateDynOrgUnitData()
On Error GoTo suberr
modStack.PushCallStack "Work", "UpdateDynOrgUnitData"
Application.ScreenUpdating = False
bnoupdate = True
Dim i As Integer
Dim icolorg As Integer

icolorg = Me.Range("Work.Col.OrgUnit").Column
'loop through available orgunits and pro orgunit update data
For i = Me.Range("Work.StartRow").row + 1 To Me.Range("Work.TemplateInsertionPoint").row - 1
    If Me.Cells(i, icolorg).value <> "" Then
            'fill rescells based on timelinedata in this sheet
            FillResData Me.Cells(i, icolorg).value, i + 1
            'fill capadata
            FillCapaData i
    End If
Next

subend:
    bnoupdate = False
    Application.ScreenUpdating = True
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Work.UpdateDynOrgUnitData error:"
    Resume subend
End Sub

Private Sub FillResData(sdep As String, iRow As Integer)
'for given dep we retreive data from timelinedata and put into irow
On Error GoTo suberr
modStack.PushCallStack "Work", "FilllResData"
Dim i As Integer
Dim irowtimeline As Integer
Dim irowtimelinedate As Integer
Dim d As Date
Dim j As Integer

'first clear the data for this row
For j = Me.Range("Work.StartDate").Column To (Me.Range("Work.StartDate").Column + 11)
    Me.Cells(iRow, j).value = 0
Next
'find timelinerow
irowtimelinedate = Me.Range("Work.Start").row
For i = 1 To Admin.Range("Admin.Org").rows.Count
    If Me.Cells(irowtimelinedate + i, Me.Range("Work.Start").Column - 1).value = sdep Then
        irowtimeline = irowtimelinedate + i
        Exit For
    End If
Next
'loop dates
If irowtimeline > 0 Then
    For i = Me.Range("Work.Start").Column To (Me.Range("Work.Start").Column + 100)
        If Me.Cells(irowtimelinedate, i).value = "" Then Exit For
        d = CDate(Me.Cells(irowtimelinedate, i).value)
        'find date in orgtimeline
        For j = Me.Range("Work.StartDate").Column To (Me.Range("Work.StartDate").Column + 11)
            If CDate(Me.Cells(Me.Range("Work.StartDate").row, j).value) = d Then
                Me.Cells(iRow, j).value = Me.Cells(irowtimeline, i).value
                Exit For
            End If
        Next
    Next
End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Work.FilllResData error:"
    Resume subend
End Sub

Private Function IsPHBOrgUnit(s As String, wtrange As Range) As Boolean
Dim i As Integer
s = LCase(s)
'Clear All unused WorkTypes
If Not wtrange Is Nothing Then
    For i = wtrange.Columns.Count / 5 - 1 To 0 Step -1
        If LCase(wtrange.offset(0, i * 5).Resize(1, 1).value) = s Then
            IsPHBOrgUnit = True
            Exit For
        End If
    Next
End If
End Function


Public Sub cmdUpdate_Click()
    On Error GoTo suberr
    modStack.PushCallStack "Work", "cmdUpdate_Click"
    If IsDemoVersion Then GoTo subend
    update True
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Work.cmdUpdate_Click error:"
    Resume subend
End Sub

Public Sub reset()
    On Error GoTo suberr
    modStack.PushCallStack "Work", "reset"

    bnoupdate = True
    Me.Range("Work.StartDate").value = DateSerial(Year(Now), 1, 1)
    bnoupdate = False
    Me.ResetDynOrgUnits
    Me.ResetCapaBlock

subend:
    bnoupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Work.reset error:"
    Resume subend
End Sub

Friend Sub update(Validate As Boolean)
    Dim irH As Integer
    Dim irF As Integer
    Dim icL As Integer
    Dim ic As Integer
    Dim icN As Integer
    Dim R As Range
    Dim i As Integer
    Dim iMonths As Integer
    Dim sr As String
    Dim dStartP As Date
    Dim dFinishP As Date
    'Dim dStart As Date
    'Dim dFinish As Date
    'Dim dStartW As Date
    'Dim dFinishW As Date
    'Dim dFirstofNextMonth As Date
    Dim icS As Integer
    Dim icT As Integer
    'Dim dDayVal As Double
    'Dim dMonthVal As Double
    'Dim dSumVal As Double
    'Dim dTotalVal As Double
    'Dim dOldval As Double
    Dim d As Double
    Dim dmax As Double
    Dim newseries As Series
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "Work", "Update"
    bnoupdate = True
    'copy phases in level 1
    irH = Sheets("Plan").Range("Plan.ProjectHeader").row
    irF = Sheets("Plan").Range("Plan.ProjectFooter").row
    icL = Sheets("Plan").Range("Plan.LevelColumn").Column
    icN = Sheets("Plan").Range("Plan.TaskNameColumn").Column
    ic = Sheets("Plan").Range("Plan.WorkBaseColumn").Column
    icS = Sheets("Plan").Range("Plan.StartColumn").Column
    icT = Sheets("Plan").Range("Plan.TypColumn").Column
        
    sr = "Work.Phases"
    Range(sr).ClearContents
    If Range(sr).rows.Count > 10 Then
        Range(sr).offset(1, 0).Resize(Range(sr).rows.Count - 10).EntireRow.Delete
    End If
    Range(Range("Work.Start").EntireRow, Cells(Me.rows.Count, 1).EntireRow).ClearContents
    
    If Validate Then
        Plan.ValidatePlan
    End If

    UnprotectSheet Me

    Dim t As TPGTask
    Set t = New TPGTask

    Dim startRowIndex As Integer
    Dim endRowIndex As Integer
    Dim currentIndex As Integer
    Dim PhaseCount As Integer

    startRowIndex = Plan.Range("Plan.ProjectHeader").row + 1
    endRowIndex = Plan.Range("Plan.ProjectFooter").row - 1

    For currentIndex = startRowIndex To endRowIndex
        t.SetIndex currentIndex
        If t.IsPhase Then PhaseCount = PhaseCount + 1
    Next
    
    For i = Range(sr).rows.Count - 2 To PhaseCount - 1
        TableAddRow Me, sr
    Next
    
    Dim ChartObject As Chart
    Set ChartObject = Me.ChartObjects(2).Chart
    'Set ChartObject = Me.ChartObjects("Work.Chrt.Progress").Chart
    ChartObject.SeriesCollection(1).Values = "=" & Me.Name & "!R" & Range(sr).row + 1 & "C11:R" & Range("Work.PhaseInsertionPoint").row - 1 & "C11"

    dmax = 0
    i = 1
    For Each R In Sheets("Plan").Range(Sheets("Plan").Cells(irH + 1, icL), Sheets("Plan").Cells(irF - 1, icL))
        If R.value = 1 Then
            Range(sr).Cells(i + 1, 1) = R.offset(0, icN - icL).value 'Name
            Range(sr).Cells(i + 1, 3) = R.offset(0, ic - icL).value 'Base
            Range(sr).Cells(i + 1, 4) = R.offset(0, ic - icL + 1).value 'change
            Range(sr).Cells(i + 1, 5) = R.offset(0, ic - icL + 2).value 'Actual
            Range(sr).Cells(i + 1, 6) = R.offset(0, ic - icL + 3).value 'Remain
            Range(sr).Cells(i + 1, 7) = R.offset(0, ic - icL + 4).value 'Forecast
            If Range(sr).Cells(i + 1, 3) <> 0 Then d = Range(sr).Cells(i + 1, 5) / Range(sr).Cells(i + 1, 3)
            If d > dmax Then dmax = d
            
            ChartObject.SeriesCollection(1).Points(i).Interior.Color = IIf(d > 1, RGB(227, 0, 27), RGB(127, 127, 127))

            i = i + 1
        End If
    Next
    
    dmax = (VBA.CInt(dmax * 10) + 1) / 10
    
    If dmax < 1 Then dmax = 1
    ChartObject.Axes(xlValue).MaximumScale = dmax
     
    s = "Work.Phases"
    
'------------------3.0 changes as of here --------------------------------------------------------------
    'build timeline
    If Sheets("Plan").Cells(irH, icS).value = "" Or Sheets("Plan").Cells(irH, icS + 1).value = "" Then GoTo subend
    dStartP = Sheets("Plan").Cells(irH, icS).value
    dFinishP = Sheets("Plan").Cells(irH, icS + 1).value
    Range("Work.Start").value = DateSerial(Year(dStartP), Month(dStartP), 1)
    iMonths = DateDiff("m", dStartP, dFinishP)
    For i = 0 To iMonths
        Range("Work.Start").offset(0, i).value = DateSerial(Year(DateAdd("m", i, dStartP)), Month(DateAdd("m", i, dStartP)), 1)
    Next
    
    'Count Worktypes
    Dim WorkTypesCount As Integer
    WorkTypesCount = (Plan.Range("Plan.WorkTypeNameRange").Columns.Count - 2) / 5
    
    Dim WTS As TPGWorkTypes
    Set WTS = New TPGWorkTypes
    WTS.Load
    
    If WTS.PlanningMode = "Persons" Then
        Dim WTName As String
        If WorkTypesCount > 0 Then
            'last worktype for first series ...
            i = WorkTypesCount
            GetTimePhasedData Plan.Range("Plan.WorkTypeNameRange").Column + 1 + (i - 1) * 5, Work.Range("Work.Start").offset(i, -1), dStartP, dFinishP
            'all other series ..
            For i = WorkTypesCount - 1 To 1 Step -1
                GetTimePhasedData Plan.Range("Plan.WorkTypeNameRange").Column + 1 + (i - 1) * 5, Work.Range("Work.Start").offset(i, -1), dStartP, dFinishP
            Next
        End If
    Else
        If WorkTypesCount > 0 Then
            'last worktype for first series ...
            i = WorkTypesCount
            GetTimePhasedData Plan.Range("Plan.WorkTypeNameRange").Column + 1 + (i - 1) * 5, Work.Range("Work.Start").offset(i, -1), dStartP, dFinishP
        
            'all other series ..
            For i = WorkTypesCount - 1 To 1 Step -1
                GetTimePhasedData Plan.Range("Plan.WorkTypeNameRange").Column + 1 + (i - 1) * 5, Work.Range("Work.Start").offset(i, -1), dStartP, dFinishP
            Next
        End If
    End If
    
    'set startdate of chart timeline
    Me.Range("Work.StartDate").value = Me.Range("Work.Start").value
    Me.Calculate
    'we now have timelinedata for PHB resources and startdate of timeline is set
    'we can now show the PHB Orgunits
    Me.SetDynOrgUnits WTS.PlanningMode
    modShapes.SetCharts Me
    Set WTS = Nothing
subend:
    bnoupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Work.Update error:"
    Resume subend
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
If bnoupdate Then Exit Sub

If Target.Cells.Count = 2 Then
    If Target.Column = bChkCol + 1 Then Cancel = True
End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
If bnoupdate Then Exit Sub
'Debug.Print target.Address + " CHANGE"
If Target.Address = Me.Range("Work.StartDate").Address Then
    UnprotectSheet Me
    UpdateDynOrgUnitData
ElseIf Target.Cells.Count = 1 Then
    'edit of capa data
    If (Target.row > Me.Range("Work.StartRow").row) And (Target.row < Me.Range("Work.TemplateInsertionPoint").row) Then
        If (Target.Column >= Me.Range("Work.StartDate").Column) And (Target.Column <= Me.Range("Work.EndDate").Column) Then
            UpdateCapa Target
        End If
    End If
End If
End Sub

Private Sub UpdateCapa(ByVal Target As Range)
Dim icapacol As Integer
Dim idaterow As Integer
Dim ldate As Long
Dim s As String
Dim s2 As String
Dim i As Integer
Dim tlist As TPGTokenizer
Dim sorg As String
Dim bfound As Boolean
Dim irowcapa As Integer
Dim iorgcol As Integer

On Error GoTo suberr
'NO MODSTACK USE FOR PERFORMANCE REASONS
'modStack.PushCallStack "Work", "UpdateCapa"
bnoupdate = True
icapacol = Me.Range("Work.Col.Capa").Column
iorgcol = Me.Range("Work.Col.OrgUnit").Column
idaterow = Me.Range("Work.StartDate").row

ldate = Me.Cells(idaterow, Target.Column)
sorg = Me.Cells(Target.row, iorgcol).value
'get capadata for this orgunit
bfound = False
For i = Me.Range("Work.CapaHeader").row + 1 To Me.Range("Work.CapaFooter").row - 1
    If Me.Cells(i, iorgcol).value = sorg Then
        irowcapa = i
        bfound = True
    End If
Next
'if org not present yet in capablock then add row
If Not bfound Then
    'insert new dataline in capablock for this orgunit
    Me.Cells(Me.Range("Work.CapaFooter").row, 1).EntireRow.Insert
    irowcapa = Me.Range("Work.CapaFooter").row - 1
    Me.Cells(irowcapa, 1).EntireRow.Hidden = True
    Me.Cells(irowcapa, iorgcol).value = sorg
End If
'now we have irowcapa as our caparow and can update the capadata
s = Me.Cells(irowcapa, icapacol).value
Set tlist = New TPGTokenizer
If s <> "" Then
    tlist.FromString s
End If
If tlist.Count > 0 Then
    For i = 1 To tlist.Count
        s2 = tlist.Item(i)
        s2 = Left(s2, InStr(s2, ";") - 1)
        If CLng(s2) = ldate Then
            tlist.Delete (i)
            Exit For
        End If
    Next
    If (Target.value <> "") Then
        If (IsNumeric(Target.value)) Then
            If Target.value > 0 Then tlist.Add Trim(CStr(ldate)) + ";" + Trim(CStr(Target.value))
        End If
    End If
Else
    If (Target.value <> "") Then
        If (IsNumeric(Target.value)) Then
            If Target.value > 0 Then tlist.Add Trim(CStr(ldate)) + ";" + Trim(CStr(Target.value))
        End If
    End If
End If
Me.Cells(irowcapa, icapacol).value = tlist.ToString
Set tlist = Nothing

subend:
    bnoupdate = False
'    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Work.UpdateCapa error:"
    Resume subend
End Sub

Private Sub FillCapaData(iRow As Integer)
'for given dep we retreive data from capablock and put into irow according to dates
On Error GoTo suberr
modStack.PushCallStack "Work", "FillCapaData"
Dim i As Integer
Dim irowtimeline As Integer
Dim icolcapa As Integer
Dim d As Date
Dim j As Integer
Dim z As Integer
Dim ldate As Long
Dim tlist As TPGTokenizer
Dim lcapadate As Long
Dim irowcapa As Integer
Dim icolorg As Integer
Dim bfound As Boolean

'first clear the data for this row
For j = Me.Range("Work.StartDate").Column To (Me.Range("Work.StartDate").Column + 11)
    Me.Cells(iRow, j).value = 0
Next
'find timelinerow and capacol
irowtimeline = Me.Range("Work.StartDate").row
icolcapa = Me.Range("Work.Col.Capa").Column
icolorg = Me.Range("Work.Col.OrgUnit").Column
Set tlist = New TPGTokenizer
'find caparow for this org
For i = Me.Range("Work.CapaHeader").row + 1 To Me.Range("Work.CapaFooter").row - 1
    If Me.Cells(i, icolorg).value = Me.Cells(iRow, icolorg).value Then
        irowcapa = i
        bfound = True
        Exit For
    End If
Next
'we found something in the capablock for this org
If bfound Then
    If Me.Cells(irowcapa, icolcapa).value <> "" Then
        tlist.FromString Me.Cells(irowcapa, icolcapa).value
    End If
    
    If tlist.Count > 0 Then
        For j = Me.Range("Work.StartDate").Column To (Me.Range("Work.StartDate").Column + 11)
            ldate = Me.Cells(irowtimeline, j).value
            For z = 1 To tlist.Count
                lcapadate = CLng(Left(tlist.Item(z), InStr(tlist.Item(z), ";") - 1))
                If ldate = lcapadate Then
                    Me.Cells(iRow, j).value = CDbl(Right(tlist.Item(z), Len(tlist.Item(z)) - InStr(tlist.Item(z), ";")))
                    Exit For
                End If
            Next
        Next
    End If
End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Work.FillCapaData error:"
    Resume subend
End Sub

Public Function CreateXml(xmlDom As Variant) As Variant
Dim n As Variant
Dim i As Integer
Dim icolcapa As Integer
Dim nrecord As Variant

On Error GoTo suberr
modStack.PushCallStack "Work", "CreateXml"

Set n = xmlDom.createNode(1, VBA.LCase(Me.CodeName), "")
icolcapa = Me.Range("Work.Col.Capa").Column
For i = Me.Range("Work.CapaHeader").row + 1 To Me.Range("Work.CapaFooter").row - 1
    Set nrecord = xmlDom.createNode(1, "workcapa", "")
    AddNode xmlDom, nrecord, "org", Me.Cells(i, icolcapa - 1).value
    AddNode xmlDom, nrecord, "capa", Me.Cells(i, icolcapa).value
    n.appendchild nrecord
Next
Set CreateXml = n

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Work.CreateXml error:"
    Resume subend
End Function

Public Sub ImportXml(Node As Variant, sversion As String)
Dim i As Integer
Dim icolcapa As Integer
Dim s As String
Dim sorg As String
Dim iRow As Integer
Dim n As Variant

On Error GoTo suberr
modStack.PushCallStack "Work", "ImportXml"

bnoupdate = True
'make sure capablock is empty
ResetCapaBlock

If (sversion >= "3.0.00") And (Not Node Is Nothing) Then
    icolcapa = Me.Range("Work.Col.Capa").Column
    '!!! as of 12.8.16 we have a new XML format for this XML block so we have to look at XML dataformat
    'old format
    If Not Node.SelectSingleNode("workcapa1") Is Nothing Then
        For i = 1 To 20
            s = Node.SelectSingleNode("workcapa" + Trim(CStr(i))).Text
            If s <> "" Then
                'insert new dataline in capablock for this orgunit
                Me.Cells(Me.Range("Work.CapaFooter").row, 1).EntireRow.Insert
                iRow = Me.Range("Work.CapaFooter").row - 1
                Me.Cells(iRow, 1).EntireRow.Hidden = True
                'get orgunit for this dataline
                sorg = Admin.Cells(Admin.Range("admin.org").row + i, Admin.Range("admin.org").Column).value
                'set values
                Me.Cells(iRow, icolcapa - 1).value = sorg
                Me.Cells(iRow, icolcapa).value = s
            End If
        Next
    'new format
    Else
        For Each n In Node.SelectNodes("workcapa")
            'insert new dataline in capablock for this orgunit
            Me.Cells(Me.Range("Work.CapaFooter").row, 1).EntireRow.Insert
            iRow = Me.Range("Work.CapaFooter").row - 1
            Me.Cells(iRow, 1).EntireRow.Hidden = True
            'insert values
            Me.Cells(iRow, icolcapa - 1).value = CastStringToVar(n.SelectSingleNode("org").Text)
            Me.Cells(iRow, icolcapa).value = CastStringToVar(n.SelectSingleNode("capa").Text)
        Next
    End If
End If

subend:
bnoupdate = False
modStack.PopCallStack
Exit Sub
suberr:
AppErrMsg "Work.ImportXml error:"
Resume subend
End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
If bnoupdate Then Exit Sub
If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then Exit Sub 'for KISS we don't enable this (un)checking functionality because only one resource
'we need to capture click in checkbox cell so that we can change checkbox value (checked/unchecked)
If (Target.Cells.Count = 2) Then
    If Target.Column = bChkCol Then
        'if cell contains these characters we can be sure that it is a checkbox
        If (Target.Cells(1, 1).value = "|fffd|") Then
            bnoupdate = True
            Target.Cells(1, 1).value = "|fffd|"
            Me.Cells(Target.row, bChkCol + 1).Select
            bnoupdate = False
        ElseIf (Target.Cells(1, 1).value = "|fffd|") Then
            bnoupdate = True
            Target.Cells(1, 1).value = "|fffd|"
            Me.Cells(Target.row, bChkCol + 1).Select
            bnoupdate = False
        End If
    End If
End If
End Sub
Attribute VB_Name = "WorkPlan"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub cmdUpdate_Click()
    On Error GoTo suberr
    modStack.PushCallStack "WorkPlan", "cmdUpdate_Click"
    If IsDemoVersion Then GoTo subend
    UpdateRessPlan True
    WorkPlan.Range("WorkPlan.H2").Resize(1, 1).offset(1, 0).Select
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WorkPlan.cmdUpdate_Click error:"
    Resume subend
End Sub

Public Sub UpdateRessPlan(Validate As Boolean)
    On Error GoTo suberr
    modStack.PushCallStack "WorkPlan", "UpdateRessPlan"
    
    If Validate Then
        Plan.ValidatePlan
    End If
    
    Dim rangePrintArea As Range
    Dim rH0 As Range

    Set rangePrintArea = Range(WorkPlan.PageSetup.PrintArea)
    Set rangePrintArea = Range(Cells(1, 1), Cells(3, rangePrintArea.Columns.Count))
    rangePrintArea.Borders(xlEdgeRight).LineStyle = xlLineStyleNone
    
    Dim rAll As Range
    Set rAll = Range(Range("WorkPlan.H2").offset(1, 0), Cells(WorkPlan.rows.Count, 1)).EntireRow
    rAll.Delete
    
    Dim rPlan As Range
    Dim Target As Range
    
    Set rPlan = Plan.Range(Intersect(Plan.Range("Plan.Header"), Plan.Range("Plan.WBSColumn")), Intersect(Plan.Range("Plan.ResponsibleColumn"), Plan.Range("Plan.ProjectFooter")))
    Set Target = WorkPlan.Range("WorkPlan.H2").Resize(1, 1).offset(2, 0)
    '/**Fix for 1705**/
    'rPlan.Copy
    RCopy rPlan
    
    Target.PasteSpecial xlFormats
    RCopy rPlan
    Target.PasteSpecial xlPasteValuesAndNumberFormats
    RCopy rPlan
    Target.PasteSpecial Paste:=8    'xlPasteColumnWidths
    
    Dim functionsOffset As Integer
    functionsOffset = rPlan.Columns.Count
    
    Set rPlan = Plan.Range(Intersect(Plan.Range("Plan.Header"), Plan.Range("Plan.WorkTemplate").offset(0, 6)), Intersect(Plan.Range("Plan.ProjectFooter"), Plan.Range("Plan.WorkTotalColumns")))
    Set Target = WorkPlan.Range("WorkPlan.H2").Resize(1, 1).offset(2, functionsOffset)
    '/**Fix for 1705**/
    'rPlan.Copy
    RCopy rPlan
    Target.PasteSpecial Paste:=8    'xlPasteColumnWidths
    RCopy rPlan
    Target.PasteSpecial xlFormats
    RCopy rPlan
    Target.PasteSpecial xlPasteValuesAndNumberFormats
          
    'Set Border
    Dim rightlowercorner As Range
    Set rightlowercorner = Cells(Target.row + rPlan.rows.Count, Target.Column + rPlan.Columns.Count)
    rightlowercorner.EntireColumn.ColumnWidth = 1 '0.42
    rightlowercorner.EntireRow.RowHeight = 10 '3.75
    Me.Range(Cells(2, 2), Cells(2, Target.Column + rPlan.Columns.Count)).Interior.Pattern = xlNone
    Me.Range(Cells(5, 2), Cells(5, Target.Column + rPlan.Columns.Count)).Interior.Pattern = xlNone
    Me.Range(Cells(rightlowercorner.row, 2), Cells(rightlowercorner.row, Target.Column + rPlan.Columns.Count)).Interior.Pattern = xlNone
    Me.Range(Cells(5, 2), Cells(rightlowercorner.row, 2)).Interior.Pattern = xlNone
    Me.Range(Cells(2, rightlowercorner.Column), Cells(rightlowercorner.row, rightlowercorner.Column)).Interior.Pattern = xlNone
    Me.Range(Cells(1, rightlowercorner.Column + 1), Cells(5, rightlowercorner.Column + 200)).Interior.Pattern = xlNone
    Me.Range(Cells(1, rightlowercorner.Column + 1), Cells(5, rightlowercorner.Column + 200)).Borders.LineStyle = xlNone
    Me.Range(Cells(1, rightlowercorner.Column + 1), Cells(5, rightlowercorner.Column + 200)).Interior.Color = RGB(242, 242, 242)
    
    'Set Print Area and border
    Set rangePrintArea = Range(Cells(2, 2), rightlowercorner)
    rangePrintArea.BorderAround xlContinuous, xlThin
    rangePrintArea.Borders(xlEdgeBottom).Color = RGB(166, 166, 166)
    rangePrintArea.Borders(xlEdgeTop).Color = RGB(166, 166, 166)
    rangePrintArea.Borders(xlEdgeLeft).Color = RGB(166, 166, 166)
    rangePrintArea.Borders(xlEdgeRight).Color = RGB(166, 166, 166)
    WorkPlan.PageSetup.PrintArea = rangePrintArea.Address
    
    'adjust H0
    Set rH0 = WorkPlan.Range("C3", Cells(4, rightlowercorner.Column - 1))
    rH0.Interior.Color = Range("WorkPlan.H0").Resize(1, 1).Interior.Color
    rH0.Borders.LineStyle = xlNone
    ActiveWorkbook.Names.Add Name:="Workplan.H0", RefersTo:=rH0
    modShapes.PositionLogo_v3 Me
    
    'Delete unnecessary rows
    Range(WorkPlan.Range("WorkPlan.H2").offset(2, 0).EntireRow, WorkPlan.Range("WorkPlan.H2").offset(4, 0).EntireRow).Delete xlShiftUp
    
    WorkPlan.Cells.locked = True
    WorkPlan.Cells(8, 1).EntireRow.Hidden = True
    'hide weighting column!! reason: when copying from plan: the conditional formatting rules are copied, but the
    'copied rules refer to the wrong cells in workplan, so it does not function correctly
    WorkPlan.Cells(1, 13).EntireColumn.Hidden = True
    Me.Activate
    If ActiveSheet Is Me Then
        ThisWorkbook.Windows(1).FreezePanes = False
        WorkPlan.Range("K10").Select
        ThisWorkbook.Windows(1).FreezePanes = True
    End If


subend:
    
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WorkPlan.UpdateRessPlan error:"
    Resume subend
End Sub
Attribute VB_Name = "WorksheetFunctions"
Option Explicit


Sub asdfg()
    Dim R As Range
    For Each R In selection
        R.value = "state_" & R.value
    Next
End Sub

Private Function CountVisibleSheets() As Integer
    Dim ws As Worksheet
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "WorksheetFunctions", "CountVisibleSheets"

    i = 0
    For Each ws In ActiveWorkbook.Sheets
        If ws.visible = True Then i = i + 1
    Next
    CountVisibleSheets = i

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "WorksheetFunctions.CountVisibleSheets error:"
    Resume subend
End Function

Public Sub SetVisibility(sht As Worksheet, visibility As Integer)
    'Displays a meaningful error message if soemeone tries to hide the last visible worksheet.
    On Error GoTo suberr
    modStack.PushCallStack "WorksheetFunctions", "SetVisibility"

    If visibility <> xlSheetVisible And CountVisibleSheets <= 1 Then
        AppErrMsg appGetLOCText("allSheetsHidden")
        GoTo subend
    Else
        sht.visible = visibility
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "WorksheetFunctions.SetVisibility error:"
    Resume subend
End Sub



Attribute VB_Name = "frmAdminKISS"
Attribute VB_Base = "0{D3F337F5-BAE3-4993-AAB3-C29EFA6C291F}{78AD54CC-40AA-422C-AF3E-D55829E8AE9C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdChangePwd_Click()
    Admin.ChangePW
End Sub

Private Sub cmdResetBaseplan_Click()
    Plan.ResetBaseline
End Sub

Private Sub cmdResetPHB_Click()
    Admin.cmdClearPHB_Click
End Sub

Private Sub cmdSave_Click()
    Unload Me
End Sub


Private Sub UserForm_Initialize()
Me.Caption = appGetLOCText("ProjectHandbook")
Me.cmdResetBaseplan.Caption = appGetLOCText("frmadmkissbtn1")
Me.cmdResetPHB.Caption = appGetLOCText("frmadmkissbtn2")
Me.cmdSave.Caption = "OK" 'appGetLOCText("frmadmkissbtn4")
Me.cmdChangePwd.Caption = appGetLOCText("frmadmkissbtn3")
End Sub
Attribute VB_Name = "frmAdminPW"
Attribute VB_Base = "0{1573D5F5-8ECF-40B1-8C69-20E51EE9E13C}{CE9BC1D9-C70B-4640-A35D-86F5B390F137}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module    : frmAdminPW
' Author    : WolfgangM
' Date      : 21.02.2011
' Purpose   : absichtlich nicht den password char benutzt, weil ich das mit timern
'             zeitversetzt maskieren wollte... ist noch irgendwo auf der TODO liste
'---------------------------------------------------------------------------------------

Option Explicit

'change LOC-Text also if you make changes to this one!
Private Const MinPWLength = 6

Private sAdminPW As String
Private sSBAdminPW As String
Private iStage As Integer
Private bIncorrectPW As Boolean
Private bIncorrectConfirmation As Boolean
Private bChangeSuccess As Boolean
Private bPWTooShort As Boolean
    
'---------------------------------------------------------------------------------------
' UserForm_Initialize
'
' @date     21.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub UserForm_Initialize()
    On Error GoTo suberr
    modStack.PushCallStack "frmAdminPW", "UserForm_Initialize"

    Me.Left = 0
    frmAdminPW.Caption = appGetLOCText("frmAdminChangePW")
    lblAdminPW.Caption = appGetLOCText("frmAdminEnterCurrentPW")
    iStage = 0
    lblMsg.Caption = ""

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmAdminPW.UserForm_Initialize error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' UserForm_Terminate
'
' @date     21.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub UserForm_Terminate()
    On Error GoTo suberr
    modStack.PushCallStack "frmAdminPW", "UserForm_Terminate"

    If Not bChangeSuccess Then
        If iStage > 0 Then MsgBox appGetLOCText("frmAdminAbort"), vbInformation, "Project Handbook"
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmAdminPW.UserForm_Terminate error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' CheckEntry
'
' @date     21.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub CheckEntry()
    On Error GoTo suberr
    modStack.PushCallStack "frmAdminPW", "CheckEntry"

    Select Case iStage
        Case 0
            If sSBAdminPW = modProperties.GetCustomProperty(Admin, "Password") Then
                lblAdminPW.Caption = appGetLOCText("frmAdminEnterNewPW")
                iStage = 1
            Else
                bIncorrectPW = True
            End If
            
        Case 1
            If Len(sSBAdminPW) < MinPWLength Then
                bPWTooShort = True
            Else
                sAdminPW = sSBAdminPW
                lblAdminPW.Caption = appGetLOCText("frmAdminConfirmNewPW")
                iStage = 2
            End If
          
        Case 2
            If sSBAdminPW = sAdminPW Then
                bChangeSuccess = True
                lblMsg.Caption = "success!"
            Else
                bIncorrectConfirmation = True
                lblAdminPW.Caption = appGetLOCText("frmAdminEnterNewPW")
                iStage = 1
            End If
            
    End Select

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmAdminPW.CheckEntry error:"
    Resume subend
    
End Sub

'---------------------------------------------------------------------------------------
' tbAdminPW_Change
'
' @date     21.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub tbAdminPW_Change()
    On Error GoTo suberr
    modStack.PushCallStack "frmAdminPW", "tbAdminPW_Change"

    lblMsg.Caption = ""
    Dim s As String
    Dim i As Integer
    s = ""
    Select Case Len(tbAdminPW.Text) - Len(sSBAdminPW)
        Case 1
            sSBAdminPW = sSBAdminPW & Right(tbAdminPW.Text, 1)
        Case -1
            sSBAdminPW = Left(sSBAdminPW, Len(sSBAdminPW) - 1)
        Case Else
    End Select
    For i = 1 To Len(sSBAdminPW)
        s = s & "*"
    Next
    tbAdminPW.Text = s

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmAdminPW.tbAdminPW_Change error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' tbAdminPW_KeyDown
'
' @date     21.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub tbAdminPW_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error GoTo suberr
    modStack.PushCallStack "frmAdminPW", "tbAdminPW_KeyDown"

    If KeyCode = 13 Then
        CheckEntry
        sSBAdminPW = ""
        tbAdminPW.Text = ""
        tbAdminPW.SetFocus
    End If
    If bIncorrectPW Then
        lblMsg.Caption = appGetLOCText("frmAdminWrongPW")
        bIncorrectPW = False
    End If
    If bIncorrectConfirmation Then
        lblMsg.Caption = appGetLOCText("frmAdminWrongConfirmation")
        bIncorrectConfirmation = False
    End If
    If bPWTooShort Then
        lblMsg.Caption = appGetLOCText("frmAdminEmptyString")
        bPWTooShort = False
    End If
    If bChangeSuccess Then
        Call Admin.SetPW(sAdminPW)
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmAdminPW.tbAdminPW_KeyDown error:"
    Resume subend
End Sub





Attribute VB_Name = "frmBatchImport"
Attribute VB_Base = "0{5901E965-4064-4910-AD6A-0E976D5C10FA}{D6653A35-0E36-4AE9-B360-761CD813435D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


'TODO: in gantt.creategantt set validate to be dependent from this global boolean (declare first):
'bDisableAllWarnings
'set ImportFromFile to public
'add Button to Config
'Public Sub cmdBatchUpdate()
'    frmBatchImport.Show (vbModeless)
'End Sub

Option Explicit

Private sInputPath As String
Private sOutputPath As String
Private iFilesToProcess As Integer
Private iFilesProcessed As Integer
Private sCurrentFilename As String
Private sFileExtension As String
Private sErrString As String
Private iErrorCount As Integer

Private Sub UserForm_Initialize()
    iFilesProcessed = 0
    iErrorCount = 0
    sFileExtension = "xml"
    lblProgress2.Width = 0
    lblProgress3.Width = 0
    lblProgress.Caption = "   " & "no files selected"
    lblProgress2.Caption = "   " & "no files selected"
    Me.Left = 0
End Sub

Private Sub cmdInput_Click()
    With Application.filedialog(msoFileDialogFolderPicker)
        .InitialFileName = ThisWorkbook.Path & "\"
        .Show
        If .SelectedItems.Count = 0 Then Exit Sub
        sInputPath = .SelectedItems(1)
    End With
    If sInputPath = "" Then Exit Sub
    lblInput.Caption = " " & sInputPath
    iFilesToProcess = GetNoOfFilesInDir(sInputPath, sFileExtension)
    If iFilesToProcess > 0 Then
        lblProgress.Caption = "   " & iFilesProcessed & " / " & iFilesToProcess & " files processed, " & GetErrLbl
        lblProgress2.Caption = "   " & iFilesProcessed & " / " & iFilesToProcess & " files processed, " & GetErrLbl
    End If
End Sub

Private Sub cmdOutput_Click()
    With Application.filedialog(msoFileDialogFolderPicker)
        .InitialFileName = ThisWorkbook.Path & "\"
        .Show
        If .SelectedItems.Count = 0 Then Exit Sub
        sOutputPath = .SelectedItems(1)
    End With
    lblOutput.Caption = " " & sOutputPath
End Sub

Private Function GetNoOfFilesInDir(Path As String, Extension As String) As Integer
    Dim f As String
    Dim i As Integer
    
    ChDir Path
    f = Dir(Path & "\*." & Extension)
    
    While f <> ""
        i = i + 1
        f = Dir()
    Wend
    GetNoOfFilesInDir = i
End Function

Private Sub cmdBatchImport_Click()
    Dim f As String
    Dim sMyPath As String
    
    If sInputPath = "" Then
        MsgBox "Please select an input path first."
        Exit Sub
    End If
    If sOutputPath = "" Then
        MsgBox "Please select an output path first."
        Exit Sub
    End If
    
    sErrString = "Failed:"
    ChDir sInputPath
    f = Dir(sInputPath & "\*." & sFileExtension)
    sMyPath = ThisWorkbook.Path & "\" & ThisWorkbook.Name
    
    On Error GoTo suberr
    
    Excel.Application.DisplayAlerts = False
    bDisableAllWarnings = True
    PrepareWorkbook
    
    While f <> ""
        Dim sFile As String
        Dim i As Integer
        
        sCurrentFilename = f
        i = InStrRev(sCurrentFilename, ".") - 1
        sFile = Left(sCurrentFilename, i)
       
        If Import.ImportFromFile(sCurrentFilename) Then
            Cover.Activate
            Excel.Application.DisplayAlerts = False
            ThisWorkbook.SaveAs sOutputPath & "\" & sFile, ThisWorkbook.FileFormat
        Else
            DrawFailIndicator
        End If
        
        iFilesProcessed = iFilesProcessed + 1
        lblProgress.Caption = "   " & iFilesProcessed & " / " & iFilesToProcess & " files processed, " & GetErrLbl
        lblProgress2.Caption = "   " & iFilesProcessed & " / " & iFilesToProcess & " files processed, " & GetErrLbl
        lblProgress2.Width = iFilesProcessed / iFilesToProcess * 200
        lblProgress3.Width = iFilesProcessed / iFilesToProcess * 200
        Me.Repaint
        f = Dir()
    Wend
    Excel.Application.DisplayAlerts = False
    ThisWorkbook.SaveAs sMyPath
subend:
    If sErrString <> "Failed:" Then MsgBox sErrString
    Excel.Application.DisplayAlerts = True
    bDisableAllWarnings = False
    Exit Sub
    
suberr:
    
    Resume Next
End Sub


Private Sub DrawFailIndicator()
    sErrString = sErrString & vbLf & sCurrentFilename
    iErrorCount = iErrorCount + 1
    Dim lbl As MSForms.Label
    Set lbl = Me.Controls.Add("Forms.Label.1")
    With lbl
       .Top = lblProgress3.Top + 1.5
       .Left = lblProgress3.Left + lblProgress3.Width + 1.5
       .Height = lblProgress3.Height - 1.5
       .Width = 200 / iFilesToProcess - 1.5
       .Caption = ""
       .ForeColor = RGB(255, 0, 0)
       .BackColor = RGB(255, 0, 0)
    End With
End Sub

Private Function GetErrLbl() As String
    Select Case iErrorCount
        Case 0
            GetErrLbl = " no errors"
        Case 1
            GetErrLbl = CStr(iErrorCount) & " error"
        Case Else
            GetErrLbl = CStr(iErrorCount) & " errors"
    End Select
End Function
Attribute VB_Name = "frmControlPanel"
Attribute VB_Base = "0{B5CEAE03-4726-48B7-8BDC-0B3948E51C00}{96F21172-181A-4C90-95EE-6B262DA7A00A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module    : frmControlPanel
' Author    : WolfgangM
' Date      : 21.02.2011
' Purpose   : browser for easy handling of custom properties
'---------------------------------------------------------------------------------------

Option Explicit

Dim CurrentWorkSheet As Worksheet
Dim CurrentPropertyName As String



Private Sub UserForm_Initialize()
    Dim sht As Worksheet
    For Each sht In ThisWorkbook.Sheets
        'If sht.CustomProperties.Count > 0 Then
        cboSheet.AddItem sht.Name
    Next
    Me.Left = 0
    Me.cboSheet.SetFocus
    'TabStrip1.Tabs.Add , "Manager"
End Sub


Private Sub cmdAddProperty_Click()
    If CurrentWorkSheet Is Nothing Then MsgBox "no sheet selected", vbInformation, "Information": Exit Sub
    CurrentPropertyName = InputBox("choose a name", "add property to " & CurrentWorkSheet.Name, "")
    If CurrentPropertyName = "" Then Exit Sub
    If Not GetCustomProperty(CurrentWorkSheet, CurrentPropertyName) = "" Then
        If Not MsgBox("Property exists. Overwrite?", vbOKCancel, "phb") = vbOK Then Exit Sub
    End If
    
    SetCustomProperty CurrentWorkSheet, CurrentPropertyName, tbValue.Text
    UpdateCboName
    cboName.value = CurrentPropertyName
    tbValue.value = ""
    tbValue.SetFocus
    
End Sub


Private Sub cmdRemoveProperty_Click()
    If CurrentWorkSheet Is Nothing Then MsgBox "no sheet selected", vbInformation, "Information": Exit Sub
    CurrentPropertyName = cboName.value
    If CurrentPropertyName = "" Then MsgBox "no property selected", vbInformation, "Information": Exit Sub
    If Not MsgBox("are you sure?", vbOKCancel, "delete property") = vbOK Then Exit Sub
    
    DeleteCustomProperty CurrentWorkSheet, CurrentPropertyName
    UpdateCboName
    tbValue.value = ""
End Sub


Private Sub cmdClose_Click()
    Unload frmControlPanel
End Sub

Private Sub cmdSetValue_Click()
    If CurrentWorkSheet Is Nothing Then MsgBox "no sheet selected", vbInformation, "Information": Exit Sub
    If CurrentPropertyName = "" Then MsgBox "no property selected", vbInformation, "Information": Exit Sub
    SetCustomProperty CurrentWorkSheet, CurrentPropertyName, tbValue.Text
End Sub


Private Sub cboSheet_Change()
    UpdateCboName
    sbSheet.value = cboSheet.listIndex
    'sbName.value = 0
    
End Sub

Private Sub sbSheet_Change()
    If sbSheet.value > cboSheet.ListCount Then Exit Sub
    sbSheet.Min = 0
    sbSheet.max = cboSheet.ListCount - 1
    cboSheet.value = cboSheet.List(sbSheet.value)
    
End Sub


Private Sub cboName_Change()
    If cboName.listIndex = -1 Then Exit Sub
    UpdateTbValue
    sbName.value = cboName.listIndex
End Sub

Private Sub sbName_Change()
    If sbName.value > cboName.ListCount Then Exit Sub
    sbName.Min = 0
    sbName.max = cboName.ListCount - 1
    cboName.value = cboName.List(sbName.value)
    'If cboName.listIndex = -1 Then sbName.value = cboName.List(0)
End Sub



Private Sub UpdateCboName()
    Dim i As Integer
    
    On Error GoTo suberr
    cboName.clear
    
    If cboSheet.value = "" Then
        Set CurrentWorkSheet = Nothing
        cboName.value = ""
        Exit Sub
    End If
    
    Set CurrentWorkSheet = ThisWorkbook.Sheets(cboSheet.value)
    For i = 1 To CurrentWorkSheet.CustomProperties.Count
        cboName.AddItem GetCustomProperty(CurrentWorkSheet, "dummy", i)
    Next
    cboName.value = cboName.List(0)
    
subend:
    Exit Sub
suberr:
    If err.Number = 9 Then
        Set CurrentWorkSheet = Nothing
    Else
        Resume subend
    End If
End Sub

Private Sub UpdateTbValue()
    If cboName.value = "" Then
        tbValue.value = ""
        Exit Sub
    End If
    CurrentPropertyName = cboName.value
    tbValue.value = GetCustomProperty(CurrentWorkSheet, CurrentPropertyName)
End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

    If CloseMode = 0 Then
    
        Cancel = True
        
        
'        MsgBox "The X is disabled, please use the close button on" & vbLf & _
'                "the form or right-click a header area on any page.", vbCritical
    End If

End Sub

Attribute VB_Name = "frmEventLog"
Attribute VB_Base = "0{569F3F34-73A2-4372-838A-523CEC9722FB}{89818D79-64C9-4696-BE16-0F25534DD764}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private iScrollTop As Integer


Private Sub cmdEventLogClose_Click()
    On Error GoTo suberr
    modStack.PushCallStack "frmEventLog", "cmdEventLogClose_Click"

    Unload Me

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmEventLog.cmdEventLogClose_Click error:"
    Resume subend
End Sub


Private Sub UserForm_Initialize()
        
  
    
    Dim sht As Worksheet
    Dim n As Integer
    Dim z As Integer
    Dim i As Integer
    Dim firstrow As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "frmEventLog", "UserForm_Initialize"

    Set sht = Config
    firstrow = 3
    Dim j As Integer
    Dim space As String
    For j = 0 To 40
        space = space & Chr(175)
    Next
            
    With Me.ListBox1
        
        .BackColor = RGB(100, 100, 100)
        .ForeColor = RGB(205, 205, 225)
        .ColumnCount = 6
        .ColumnWidths = "100;30;30;200;200;50"
        .clear
        .AddItem
        .List(0, 0) = "Timestamp"
        .List(0, 1) = "Tag"
        .List(0, 2) = "ErrNo"
        .List(0, 3) = "ErrDesc"
        .List(0, 4) = "CallStack"
        .List(0, 5) = "Active Sheet"
        .AddItem
        For i = 0 To 5
            .List(1, i) = space
        Next
        z = 2
        
        For n = firstrow To sht.Range("BO65536").End(xlUp).row
            Dim v As Variant
            Dim vCS As Variant
            Dim contents As New Collection
            
            Dim sRawErrStr As String
            Dim sTimeStamp As String    '<TS>
            Dim sErrParams As String    '<ERR>
            Dim sEvtParams As String    '<EVT>
            Dim sCSContent As String    '<CS>
            Dim sActiveSht As String    '<AS>
            
            Dim iTagStart As Integer
            Dim iTagStop As Integer
            Dim sContent As String
            Dim sTag As String
            
            sRawErrStr = sht.Cells(n, 67).value
            While Len(sRawErrStr) > 1
                'opening tag
                iTagStart = InStr(sRawErrStr, "<")
                sRawErrStr = Right(sRawErrStr, Len(sRawErrStr) - iTagStart)
                iTagStop = InStr(sRawErrStr, ">")
                sTag = Left(sRawErrStr, iTagStop - 1)
                sRawErrStr = Right(sRawErrStr, Len(sRawErrStr) - iTagStop)
                
                'content
                iTagStart = InStr(sRawErrStr, "<")
                sContent = Left(sRawErrStr, iTagStart - 1)
                sRawErrStr = Right(sRawErrStr, Len(sRawErrStr) - iTagStart)
                
                'closing tag
                iTagStop = InStr(sRawErrStr, ">")
                sTag = Left(sRawErrStr, iTagStop - 1)
                sRawErrStr = Right(sRawErrStr, Len(sRawErrStr) - iTagStop)
                
                contents.Add (sContent)
            Wend
            
            
            
            'Timestamp
            sTimeStamp = contents(1)
            
            If contents.Count > 2 Then
                'Error Data
                sErrParams = contents(2)
                'Call Stack
                sCSContent = contents(3)
                'Active Sheet
                sActiveSht = contents(4)
            Else
                sEvtParams = contents(2)
            End If
            
            .AddItem
            .List(z, 0) = sTimeStamp
            
            If contents.Count > 2 Then
                .List(z, 5) = sActiveSht
                
                v = Split(sErrParams, "|")
                .List(z, 1) = "ERR"
                .List(z, 2) = v(0)
                .List(z, 3) = v(1)
                
                If Not sCSContent = "" Then
                    vCS = Split(sCSContent, "|")
                     .List(z, 4) = vCS(0)
                    For i = 1 To UBound(vCS)
                        .List(z, 4) = vCS(i)
                        .AddItem
                        z = z + 1
                        .List(z, 4) = vCS(i)
                    Next
                End If
            Else
                .List(z, 1) = "EVT"
                .List(z, 3) = sEvtParams
            End If
            
            .AddItem
            z = z + 1
            For i = 0 To 5
                .List(z, i) = space
            Next
            z = z + 1
            Set contents = Nothing
            
        Next n
    End With
    Set sht = Nothing

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmEventLog.UserForm_Initialize error:"
    Resume subend
  
End Sub

'Public Sub ShowDetail()
'    Dim s As String
'    Dim i As Integer
'    'frmImageFormat.DrawBuffer = 128000
'    iScrollTop = FrameReleaseNotes.ScrollTop
'    s = Right(FrameReleaseNotes.ActiveControl.name, Len(FrameReleaseNotes.ActiveControl.name) - 6)
'    i = CInt(s)
'    With tbReleaseNotesDetail
'        .WordWrap = True
'        .MultiLine = True
'        .text = ReleaseNotes.Cells(s, 8).text
'        .ScrollBars = fmScrollBarsVertical
'        .SetFocus
'    End With
'    FrameReleaseNotes.SetFocus
'    FrameReleaseNotes.ScrollTop = iScrollTop
'    'frmImageFormat.DrawBuffer = 32000
'End Sub

Private Sub DeSerializePos(val As String, cell1 As Range, cell2 As Range)
    
    Dim i As Integer
    Dim arr As Variant
    Dim cols As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "frmEventLog", "DeSerializePos"

    Range(cell1, cell2).ClearContents
    cols = Range(cell1, cell2).Columns.Count
    arr = Split(val, vbLf)
    
    For i = 0 To UBound(arr)
        Range(cell1, cell2).Cells(1 + (i \ cols), 1 + (i Mod cols)) = arr(i)
    Next i

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmEventLog.DeSerializePos error:"
    Resume subend
End Sub
Attribute VB_Name = "frmImageFormat"
Attribute VB_Base = "0{035B896B-77C2-40E8-AE8E-3233051FB210}{4537A84F-9748-459E-9BA0-4D6F7A481CA2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private oImage As shape
Private increment As Integer
Private iOriginalTop As Integer
Private iOriginalLeft As Integer
Private iOriginalWidth As Integer
Private iOriginalHeight As Integer
Private Const iLowerBorder = 530
Private Const iUpperBorder = 85
Private Const iRightBorder = 485
Private Const iLeftBorder = 5


Private Sub UserForm_Initialize()
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "UserForm_Initialize"

    Set oImage = Cover.Shapes("coverimg")
    iOriginalTop = oImage.Top
    iOriginalLeft = oImage.Left
    iOriginalWidth = oImage.Width
    iOriginalHeight = oImage.Height
    SpinButton1.max = 30
    SpinButton1.Min = 1
    SpinButton1.value = 15
    tbImgFormat.value = SpinButton1.value
    increment = SpinButton1.value
    
    lblMove.Caption = appGetLOCText("move")
    lblSize.Caption = appGetLOCText("size")
    Me.Caption = appGetLOCText("cmdFormatPicture")

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.UserForm_Initialize error:"
    Resume subend
End Sub

Private Sub UserForm_Terminate()

    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "UserForm_Terminate"
    
    Set oImage = Nothing

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.UserForm_Terminate error:"
    Resume subend
End Sub

Private Sub SpinButton1_spindown()
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "SpinButton1_spindown"

    increment = SpinButton1.value
    tbImgFormat.value = SpinButton1.value

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.SpinButton1_spindown error:"
    Resume subend
End Sub

Private Sub SpinButton1_SpinUp()
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "SpinButton1_SpinUp"

    increment = SpinButton1.value
    tbImgFormat.value = SpinButton1.value

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.SpinButton1_SpinUp error:"
    Resume subend
End Sub

Private Sub imgFormatOK_Click()
    ' make changes permanent
    Dim s As Object
    Dim SearchRange As Range
    Dim rCell As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "imgFormatOK_Click"
    
    Set SearchRange = getRange(Config, "Config.ControlDefinitions", 0, 1, 0, 1)
    Set s = oImage

    'find coverimg
    With SearchRange
        Set rCell = .Find("coverimg", LookIn:=xlValues)
        If Not rCell Is Nothing Then
            rCell.offset(0, 1) = s.Top
            rCell.offset(0, 2) = s.Left
            rCell.offset(0, 3) = s.Height
            rCell.offset(0, 4) = s.Width
        End If
    End With
    
    Unload Me
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "RearrangeControls error:"
    Unload Me
    Resume subend
    
End Sub

Private Sub imgFormatCancel_Click()
    'restore original values
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "imgFormatCancel_Click"

    oImage.Top = iOriginalTop
    oImage.Left = iOriginalLeft
    oImage.Width = iOriginalWidth
    oImage.Height = iOriginalHeight
    Unload Me

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.imgFormatCancel_Click error:"
    Resume subend
End Sub

Private Sub tbImgFormat_Change()
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "tbImgFormat_Change"

    If tbImgFormat.value > 0 And tbImgFormat.value <= 20 Then
        increment = tbImgFormat.value
    Else
        tbImgFormat.value = increment
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.tbImgFormat_Change error:"
    Resume subend
End Sub

Private Sub imgFormatMoveDown_Click()
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "imgFormatMoveDown_Click"

    If oImage.Top + oImage.Height + increment < iLowerBorder Then
        oImage.Top = oImage.Top + increment
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.imgFormatMoveDown_Click error:"
    Resume subend
End Sub

Private Sub imgFormatMoveUp_Click()
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "imgFormatMoveUp_Click"

    If oImage.Top - increment > iUpperBorder Then
        oImage.Top = oImage.Top - increment
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.imgFormatMoveUp_Click error:"
    Resume subend
End Sub

Private Sub imgFormatMoveLeft_Click()
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "imgFormatMoveLeft_Click"

    If oImage.Left - increment >= iLeftBorder Then
        oImage.Left = oImage.Left - increment
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.imgFormatMoveLeft_Click error:"
    Resume subend
End Sub

Private Sub imgFormatMoveRight_Click()
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "imgFormatMoveRight_Click"

    If oImage.Left + oImage.Width + increment < iRightBorder Then
        oImage.Left = oImage.Left + increment
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.imgFormatMoveRight_Click error:"
    Resume subend
End Sub

Private Sub imgFormatSizeDown_Click()
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "imgFormatSizeDown_Click"

    If oImage.Height >= increment Then
        oImage.Height = oImage.Height - increment
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.imgFormatSizeDown_Click error:"
    Resume subend
End Sub

Private Sub imgFormatSizeUp_Click()
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "imgFormatSizeUp_Click"

    If oImage.Top + oImage.Height + increment < iLowerBorder Then
        oImage.Height = oImage.Height + increment
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.imgFormatSizeUp_Click error:"
    Resume subend
End Sub

Private Sub imgFormatSizeLeft_Click()
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "imgFormatSizeLeft_Click"

    If oImage.Width >= increment Then
        oImage.Width = oImage.Width - increment
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.imgFormatSizeLeft_Click error:"
    Resume subend
End Sub

Private Sub imgFormatSizeRight_Click()
    On Error GoTo suberr
    modStack.PushCallStack "frmImageFormat", "imgFormatSizeRight_Click"

    If oImage.Left + oImage.Width + increment < iRightBorder Then
        oImage.Width = oImage.Width + increment
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmImageFormat.imgFormatSizeRight_Click error:"
    Resume subend
End Sub

Attribute VB_Name = "frmKissImport"
Attribute VB_Base = "0{3C10DB29-23E9-4966-977C-6E9A9AC94B97}{C770CED9-681F-4EFE-B112-637FDA1C877A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cboPHBDept_Change()
    lstTeam.List(lstTeam.listIndex, 4) = Me.cboPHBDept.Text
    'in the remaining of the list we will assign the new deptname to all depts with identical name as this one
    'this saves some work for the user, but if needed he can still overwrite...
    Dim i As Integer
    Dim s As String
    s = lstTeam.List(lstTeam.listIndex, 3)
    For i = (lstTeam.listIndex + 1) To (lstTeam.ListCount - 1)
        If Not (IsNull(lstTeam.List(i, 3)) Or (lstTeam.List(i, 3) = "")) Then
            If lstTeam.List(i, 3) = s Then
                If IsNull(lstTeam.List(i, 4)) Or (lstTeam.List(i, 4) = "") Then lstTeam.List(i, 4) = Me.cboPHBDept.Text
            End If
        End If
    Next
End Sub

Private Sub frmKissImportcmdCancel_Click()
    Import.KissImportCancel = True
    Unload Me
End Sub

Private Sub cmdNext_Click()
    If lstTeam.listIndex = lstTeam.ListCount - 1 Then
        lstTeam.listIndex = 0
    Else
        lstTeam.listIndex = lstTeam.listIndex + 1
    End If
End Sub

Private Sub frmKissImportcmdOK_Click()
    Dim resp
    
    If CountBlankDept > 0 Then
        MsgBox modApp.appGetLOCText("frmKissImportmsgCountBlankDept"), , modApp.appGetLOCText("frmKissImportTextWarning")
    Else
        Import.KissImportCancel = False
        SetNewTeamDept
        Unload Me
    End If
End Sub

Private Sub SetNewTeamDept()
    Dim d As New TPGDictionary
    Dim i As Integer


    'create code for dept
    For i = 0 To lstTeam.ListCount - 1
        If IsNull(lstTeam.List(i, 4)) Or Len(lstTeam.List(i, 4)) = 0 Then
            d.Add lstTeam.List(i, 0), lstTeam.List(i, 3)

        Else
            d.Add lstTeam.List(i, 0), lstTeam.List(i, 4)
        End If
       
    Next
    
    Set NewTeamDept = d
    Set d = Nothing
End Sub

Private Function CountBlankDept() As Integer
    Dim i As Integer
    Dim j As Integer
    
    j = 0
     
    For i = 0 To lstTeam.ListCount - 1
        If Len(lstTeam.List(i, 4)) = 0 Or IsNull(lstTeam.List(i, 4)) Then
            j = j + 1
        End If
    Next
    
    CountBlankDept = j
End Function


Private Function CountMissingDept() As TPGTokenizer
    Dim i As Integer
    Dim TG As New TPGTokenizer
     
    For i = 0 To lstTeam.ListCount - 1
        If IsNull(lstTeam.List(i, 4)) Or Len(lstTeam.List(i, 4)) = 0 Then
            If Not (IsNull(lstTeam.List(i, 3)) Or Len(lstTeam.List(i, 3))) = 0 Then
                TG.Add Replace(lstTeam.List(i, 3), ",", "<*>")
            End If
        End If
    Next
    
    Set CountMissingDept = TG
End Function

Private Sub cmdPrev_Click()
    With lstTeam
        If .listIndex < 1 Then
            .listIndex = .ListCount - 1
        Else
            .listIndex = .listIndex - 1
        End If
    End With
End Sub

Private Sub lstTeam_Click()
    Me.txtName.Text = lstTeam.Column(1, lstTeam.listIndex)
    Me.txtrole.Text = lstTeam.Column(2, lstTeam.listIndex)
    Me.txtKissDept.Text = lstTeam.Column(3, lstTeam.listIndex)
    Me.cboPHBDept.value = lstTeam.Column(4, lstTeam.listIndex)
End Sub

Private Sub UserForm_Initialize()
Dim R As Range
Dim n As Variant
Dim i As Integer
Dim TG As TPGTokenizer
Dim bfoundPersonal As Boolean

Import.KissImportCancel = True

'layout setting
frmKissImportLabelKiss.BackColor = RGB(227, 0, 27)
frmKissImportLabelKiss.ForeColor = RGB(255, 255, 255)

frmKissImportLabelNewPHB.BackColor = Config_Lic.Range("Config.H1").Interior.Color
frmKissImportLabelNewPHB.ForeColor = Config_Lic.Range("Config.H1").Font.Color

'add Admin Orgs
Me.cboPHBDept.clear
i = 0
bfoundPersonal = False

Set TG = New TPGTokenizer
TG.FromRangeNoBlanks Admin.Range("Admin.Org")

For Each R In Admin.Range("Admin.Org")
    If R.value <> "" Then
'        If Not bfoundPersonal And InStr(R.value, "Personal") Then
'            cboPHBDept.AddItem "Personal"
'            bfoundPersonal = True
'        Else
            cboPHBDept.AddItem R.value
'        End If
    End If
Next

'If Not bfoundPersonal Then
'    cboPHBDept.AddItem "Personal"
'End If

lstTeam.ColumnCount = 5
lstTeam.ColumnWidths = "0;125;125;125;125"
'lstTeam.ColumnHeads = True
'lstTeam.AddItem
'lstTeam.List(-1, 0) = "uid"
'lstTeam.List(-1, 1) = "name"
'lstTeam.List(-1, 2) = "role"
'lstTeam.List(-1, 3) = "kiss department"
'lstTeam.List(-1, 4) = "new department"

For Each n In Import.KissTeamNode.SelectNodes("members/member")
    With lstTeam
        .AddItem
        'uid
        If Not n.SelectSingleNode("id") Is Nothing Then
            .List(i, 0) = n.SelectSingleNode("id").Text
        'when importing 3.0 kiss we have a guid node instead of id node
        ElseIf Not n.SelectSingleNode("guid") Is Nothing Then
            .List(i, 0) = n.SelectSingleNode("guid").Text
        End If
        
        If Not n.SelectSingleNode("name") Is Nothing Then
            .List(i, 1) = n.SelectSingleNode("name").Text
        End If
        
        If Not n.SelectSingleNode("role") Is Nothing Then
            .List(i, 2) = modApp.appGetLOCText(n.SelectSingleNode("role").Text, True)
        End If
        
        If Not n.SelectSingleNode("department") Is Nothing Then
            .List(i, 3) = n.SelectSingleNode("department").Text
            
            If TG.Contains(n.SelectSingleNode("department").Text) Then
                .List(i, 4) = n.SelectSingleNode("department").Text
            End If
        End If

    End With

    i = i + 1
Next

If CountMissingDept.Count = 0 Then
 '   Unload Me
End If

AutoLang

Set TG = Nothing
End Sub

Private Sub AutoLang()
    Dim c As Variant
    
    Me.Caption = appGetLOCText("frmKissImportTitle")

    
    'Labels
    For Each c In Array("frmKissImportLabelKiss", "frmKissImportLabelNewPHB", "frmKissImportListName", "frmKissImportListFunction", _
                        "frmKissImportListDepartment", "frmKissImportListNewDepartment", "frmKissImportName", "frmKissImportRole", _
                        "frmKissImportKissDepartment", "frmKissImportNewDepartment", "frmKissImportcmdOK", "frmKissImportcmdCancel")
         Me.Controls(c).Caption = modApp.appGetLOCText(CStr(c))
'        Select Case TypeName(Me.Controls(c))
'        Case "Label"
'
'        Case "CommandButton"
'        End Select
    Next
End Sub
Attribute VB_Name = "frmPW"
Attribute VB_Base = "0{B223826C-829F-4C08-9A11-E8765F5312BA}{ECCA298F-8F6A-4DCD-BD91-E82C517DA7D2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub cmdCancel_Click()
    On Error GoTo suberr
    modStack.PushCallStack "frmPW", "cmdCancel_Click"

    Unload Me

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmPW.cmdCancel_Click error:"
    Resume subend
End Sub

Private Sub cmdOK_Click()
    On Error GoTo suberr
    modStack.PushCallStack "frmPW", "cmdOK_Click"

    sActiveLicense = pStrVersion
    'If txtPW.Text = Admin.Range("Admin.Password").offset(1, 0).value Then
    If txtPW.Text = modProperties.GetCustomProperty(Admin, "Password") Then
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
            UnprotectWorkbook "pmccTPG:-)"
            Admin.visible = xlSheetVisible
            ProtectWorkbook
            Admin.Activate
        Else
            frmAdminKISS.Show
        End If
    Else
        AppInfoMsg appGetLOCText("msgWrongPassword")
    End If
    Unload Me

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmPW.cmdOK_Click error:"
    Resume subend
End Sub

Private Sub UserForm_Initialize()
    On Error GoTo suberr
    modStack.PushCallStack "frmPW", "UserForm_Initialize"
    Me.Left = 0
    txtPW.Text = ""

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmPW.UserForm_Initialize error:"
    Resume subend
End Sub
Attribute VB_Name = "frmProgress"
Attribute VB_Base = "0{19DA38D7-9C26-4F9C-804D-BE9A4577B2C1}{E29EAA54-4126-4292-93E5-BAD73502D1E2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Initialize()
    Me.Left = 0
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then Cancel = True
End Sub

Public Sub update(pct As String)
    
    frmProgress.lblProgress.Width = 3 * CInt(pct)
    frmProgress.lblOverallProgress.Width = 0
    
End Sub


Public Sub updateOverall(pct As String)

    frmProgress.Height = 68
    
    frmProgress.Progress.Height = 36

    frmProgress.lblProgress.Height = 6
    frmProgress.lblProgress.Top = 24
    frmProgress.lblProgress.BackColor = 16776960

    frmProgress.lblOverallProgress.Height = 22
    frmProgress.lblOverallProgress.Top = 2
    frmProgress.lblOverallProgress.Width = 3 * CInt(pct)
    frmProgress.lblOverallProgress.BackColor = 16711680
    
End Sub
Attribute VB_Name = "frmReScheduler"
Attribute VB_Base = "0{DA991368-4622-44FF-B3EF-17D5E12A4994}{CE55FF42-9494-4B64-A1F4-E5E0AE2AB791}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Enum WPDelActionType
'see plan to match
    Cancelled = 1
    Confirmed = 2
    NoRelations = 3
End Enum

Private rowId As Integer
Private sht As Worksheet
Private dCols As New TPGDictionary
Private cTask As New TPGTask
Private IndieTasks As New TPGTokenizer
Private relCells As New TPGDictionary

Private tested As New TPGTokenizer

Private numFormat As String

Const BaseStartCol As String = "Plan.BaseStart"
Const BaseFinishCol As String = "Plan.BaseFinish"
Const StartCol As String = "Plan.Start"
Const FinishCol As String = "Plan.Finish"

Private Function GetDateString(d As Variant) As String
    If Not IsNull(d) Then
        GetDateString = Format(d, numFormat)
    End If
End Function

Private Function GetFixedDate(d As Variant) As Date
    Dim s As String
    If IsNull(d) Then
        Exit Function
    End If
    s = Format(CStr(d), numFormat)
    If IsDate(s) Then
        GetFixedDate = CDate(s)
        Exit Function
    End If
    s = Replace(s, "/", "-")
    If IsDate(s) Then
        GetFixedDate = CDate(s)
        Exit Function
    End If
    s = Replace(s, ".", "-")
    If IsDate(s) Then
        GetFixedDate = CDate(s)
        Exit Function
    End If
End Function



Private Function UpdateFormula() As String
    If Me.cboWBS.Text <> "" And Me.cboDateTypeF.Text <> "" Then
      Me.txbNewFormula.Text = "=" & Replace(Plan.Cells(Plan.Range("Plan.WPs").row + Me.cboWBS.listIndex, dCols.GetKeyByValue(Me.cboDateTypeF.Text)).Address, "$", "")
      If Me.cboOperation.Text <> "" Then
            Me.txbNewFormula.Text = Me.txbNewFormula.Text & Me.cboOperation.Text
            If Me.txbOffset.Text <> "" Then
                Me.txbNewFormula.Text = Me.txbNewFormula.Text & Me.txbOffset.Text
            End If
      End If
    End If
    
    If IsNumeric(Application.Evaluate(Me.txbNewFormula.Text)) Then
        Me.txbNewValue = GetDateString(CDate(Application.Evaluate(Me.txbNewFormula.Text)))
    End If
    
End Function

Private Sub SetFormula()
    If Len(Me.txbNewValue.Text) > 0 Then
        lstresched.Column(5, lstresched.listIndex) = Me.txbNewFormula.Text
        lstresched.Column(6, lstresched.listIndex) = GetDateString(GetFixedDate(Me.txbNewValue.Text))
        lstresched.Column(7, lstresched.listIndex) = Me.cboOperation.value
        lstresched.Column(8, lstresched.listIndex) = Me.txbOffset.Text
    End If
End Sub

Private Sub SetValue()
    If Len(Me.txbNewDate.Text) > 0 Then
        lstresched.Column(5, lstresched.listIndex) = vbNullString
        lstresched.Column(6, lstresched.listIndex) = GetDateString(GetFixedDate(Me.txbNewDate.Text))
        lstresched.Column(7, lstresched.listIndex) = vbNullString
        lstresched.Column(8, lstresched.listIndex) = vbNullString
    End If
End Sub

Private Sub btnfrmReschedulerCancel_Click()
    Plan.DeleteTask = Cancelled
    Unload Me
End Sub

Private Sub btnfrmReschedulerContinue_Click()
    'Check if all dependencies were checked
    If CountBlankDates > 0 Then
        MsgBox "Please set dates/formulas in order to proceed to delete.", vbCritical, "Warning."
    Else
        SetNewValues
        Plan.DeleteTask = Confirmed
        Unload Me
    End If
End Sub

Private Sub SetNewValues()
    Dim R As Integer
    Dim c As Integer
    For i = 0 To Me.lstresched.ListCount - 1
        R = lstresched.List(i, 9)
        c = dCols.GetKeyByValue(lstresched.List(i, 2))
        If Len(lstresched.List(i, 5)) = 0 Or IsNull(lstresched.List(i, 5)) Then 'value only
           sht.Cells(R, c).value = GetDateString(GetFixedDate(lstresched.List(i, 6)))
        Else ' formula
           sht.Cells(R, c).formula = lstresched.List(i, 5)
        End If
    Next
End Sub

Private Function CountBlankDates() As Integer
    Dim i As Integer
    Dim j As Integer
    
    j = 0
     
    For i = 0 To Me.lstresched.ListCount - 1
        If Len(lstresched.List(i, 6)) = 0 Or IsNull(lstresched.List(i, 6)) Then
            j = j + 1
        End If
    Next
    
    CountBlankDates = j
End Function

Private Sub btnSetFormula_Click()
    SetFormula
End Sub

Private Sub btnSetValue_Click()
    SetValue
End Sub

Private Sub btnUseDate_Click()
    UseDateValue
End Sub


Private Sub btnUseFormula_Click()
    UseFormula
End Sub

Private Sub cboDateTypeF_Change()
    UpdateFormula
End Sub

Private Sub cboOperation_Change()
    UpdateFormula
End Sub

Private Sub cboWBS_Change()
  UpdateFormula
End Sub

Private Sub cboWBS_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Me.cboWBS.Text = cTask.GetFullTaskName Then
        MsgBox "Please change WBS selected. This is the task you are trying to delete."
        Cancel = True
    ElseIf Left(Trim(Me.cboWBS.Text), Len(lstresched.Column(0, lstresched.listIndex))) = lstresched.Column(0, lstresched.listIndex) Then
        MsgBox "Please change WBS selected. This is the task selected on list view."
        Cancel = True
    ElseIf IndieTasks.Contains(Me.cboWBS.Text) Then
        MsgBox "Please change WBS selected. Selecting this task will cause circular dependency."
        Cancel = True
    End If
End Sub

Private Sub cmdPrev_Click()
    With Me.lstresched
        If .listIndex < 1 Then
            .listIndex = .ListCount - 1
        Else
            .listIndex = .listIndex - 1
        End If
    End With
End Sub

Private Sub cmdNext_Click()
    If Me.btnUseFormula Then Me.cboDateTypeF.SetFocus
    If Me.btnUseDate Then Me.cboDateType.SetFocus
    
    If lstresched.listIndex = lstresched.ListCount - 1 Then
        lstresched.listIndex = 0
    Else
        lstresched.listIndex = lstresched.listIndex + 1
    End If
End Sub

Private Sub lstresched_Click()
    If Me.btnUseDate Then
        UseDateValue
    End If
    
    If Me.btnUseFormula Then
        UseFormula
    End If
    
    'get data dates for selected
    SetDataDates
End Sub

Private Sub SetDataDates()
    Dim t As New TPGTask
    t.SetIndex CInt(lstresched.Column(9, lstresched.listIndex))
    With Me
        .txbBaseStart.Text = t.GetBaselineStartDate
        .txbBaseFinish.Text = t.GetBaselineFinishDate
        .txbStart.Text = t.GetStartDate
        .txbFinish.Text = t.GetFinishDate
    End With
    
    Set t = Nothing
End Sub

Private Sub UseDateValue()
    Me.txbNewValue.Text = vbNullString
    Me.txbOffset.Text = vbNullString
    
    If Not lstresched.listIndex = -1 Then
        Me.cboDateType.Text = lstresched.Column(2, lstresched.listIndex)
        Me.txbOldDate.Text = lstresched.Column(4, lstresched.listIndex)
        Me.txbNewDate.value = IIf(IsNull(lstresched.Column(6, lstresched.listIndex)), IIf(Len(Me.txbOldDate.Text) = 0, _
        GetDateString(GetFixedDate(Me.txbNewDate.value)), GetDateString(GetFixedDate(Me.txbOldDate.Text))), _
        GetDateString(GetFixedDate(lstresched.Column(6, lstresched.listIndex))))
    End If
End Sub

Private Sub UseFormula()
    If Not lstresched.listIndex = -1 Then
        Me.cboDateTypeF.Text = lstresched.Column(2, lstresched.listIndex)
        
        Me.txbNewDate.Text = vbNullString
        Me.cboOperation.value = lstresched.Column(7, lstresched.listIndex)
        Me.txbOffset.Text = IIf(IsNull(lstresched.Column(8, lstresched.listIndex)), 0, lstresched.Column(8, lstresched.listIndex))

        If Me.cboWBS.ListCount = 0 Then
            For Each R In Plan.Range("Plan.WPs")
                Me.cboWBS.AddItem R.value
            Next
        End If
        
    End If
End Sub

Private Function cancelDate(val As String) As Boolean
    cancelDate = Not IsDate(GetFixedDate(val))
    If cancelDate Then
        MsgBox "Date not valid."
    End If
End Function

Private Sub txbNewDate_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Cancel = cancelDate(Me.txbNewDate.Text)
End Sub

Private Function SetHeader(W As String) As String
    Dim h As New TPGTokenizer
    Dim Wi As New TPGTokenizer
    Dim wis As String
    Dim l As Double 'left
    Dim t As Double 'top
    Dim wid As Double
    l = 6
    t = 72
    
    h.FromString "WBS|Name|Type|Link|OldValue|NewLink|NewValue"
    Wi.Delimiter = ";"
    Wi.FromString W

    For i = 1 To h.Count
        With Me.Controls(Me.Name & h(i))
            .Left = l
            .Top = t
            .Width = Wi(i)
            l = l + .Width
            wid = wid + Wi(i)
        End With
    Next
    
    Me.lstresched.Width = wid
    SetHeader = W
End Function


Private Sub txbOffset_Change()
    UpdateFormula
End Sub

Private Sub txbOffset_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Not IsNumeric(Me.txbOffset.Text) Then
        MsgBox "Offset should be a number."
        Cancel = True
    End If
End Sub

Private Sub UserForm_Activate()
    Dim i As Integer
    Dim task As New TPGTask
    Dim f As String, g As Variant
    
    
    
    Me.btnUseDate.value = True
    
    If relCells Is Nothing Or relCells.Count > 0 Then
    
        ShowForm
        
        numFormat = cTask.GetCell(BaseStartCol).NumberFormat
    
        With lstresched
            .ColumnCount = 10 ' include row index
            .ColumnWidths = SetHeader("50;200;50;70;50;52;52") & ";0;0;0"
            .Width = 524
            For i = 1 To relCells.Count
                f = ""
                .AddItem
                    task.SetIndex sht.Range(relCells.GetKeyByIndex(i)).row
                    
                    'wbs
                    .List(i - 1, 0) = task.GetWBS
                    
                    'task name
                    .List(i - 1, 1) = task.GetTaskName
                    
                    'affected cell
'                    For Each g In Split(relCells.GetValueByIndex(i), ",")
'                        f = dCols.GetValue(CInt(g)) & IIf(Len(f) > 0, ",", "")
'                    Next
                    
                    .List(i - 1, 2) = dCols.GetValue(sht.Range(relCells.GetKeyByIndex(i)).Column)     'f 'dCols.GetValue(relCells.GetValueByIndex(i))
                    
                    'formula current value
                    For Each g In Split(relCells.GetValueByIndex(i), ",")
                        f = Replace(sht.Range(relCells.GetKeyByIndex(i)).formula, Replace(sht.Cells(rowId, CInt(g)).Address, "$", ""), dCols.GetValue(CInt(g)))
                    Next
                    
                    .List(i - 1, 3) = f 'sht.Range(relCells.GetKeyByIndex(i)).formula 'Replace(sht.Range(relCells.GetKeyByIndex(i)).formula, a, "")
                    
                    'current value
                    .List(i - 1, 4) = GetDateString(GetFixedDate(sht.Range(relCells.GetKeyByIndex(i)).value))
                    
                    
                    'new value type : formula or value
                    
                    'new value/formula
                    
                    'row index for getting data dates
                    .List(i - 1, 9) = sht.Range(relCells.GetKeyByIndex(i)).row
                    
            Next
        End With
        
        'Add indirect dependents
        For Each n In IndieTasks.ToCollection
            Me.lstIndirect.AddItem CStr(n)
        Next
    Else
        
        'no dependencies
        Plan.DeleteTask = NoRelations
        Unload Me
    End If
End Sub

Private Sub ShowForm()

    Me.StartUpPosition = 2
    Dim lTop As Long, lLeft As Long
    Dim lRow As Long, lCol As Long
     
    With ActiveWindow.VisibleRange
        lRow = .rows.Count / 2
        lCol = .Columns.Count / 2
    End With
     
    With Cells(lRow, lCol)
        lTop = .Top
        lLeft = .Left
    End With
     
    With Me
        .Top = lTop / 2
        .Left = lLeft
    End With
End Sub

Private Sub HideForm()
    With Me
        .Top = -1000
        .Left = 0
    End With
End Sub

Private Sub UserForm_Initialize()
    Dim Pindex As Integer
    
    HideForm
    
    'Plan.DeleteTask = False
    Plan.DeleteTask = Cancelled 'in case the form is closed by x button
    
    Set sht = ActiveSheet
    rowId = ActiveCell.row
    
    cTask.SetIndex rowId
    Pindex = cTask.GetRootParentIndex
    
    Me.txbWBS.Text = cTask.GetWBS
    Me.txbTaskName.Text = cTask.GetTaskName
    
    'Add date cols
    dCols.Add sht.Range(BaseStartCol).EntireColumn.Column, "BaseStart"
    dCols.Add sht.Range(BaseFinishCol).EntireColumn.Column, "BaseFinish"
    dCols.Add sht.Range(StartCol).EntireColumn.Column, "Start"
    dCols.Add sht.Range(FinishCol).EntireColumn.Column, "Finish"
    
    For Each n In ActiveCell.EntireRow.Dependents
        If (n.Column = sht.Range(BaseStartCol).EntireColumn.Column Or _
            n.Column = sht.Range(BaseFinishCol).EntireColumn.Column Or _
            n.Column = sht.Range(StartCol).EntireColumn.Column Or _
            n.Column = sht.Range(FinishCol).EntireColumn.Column) And _
            sht.Range("Plan.ProjectHeader").EntireRow.row < n.row And _
            Pindex < n.row And n.row <> rowId And Left(n.formula, 1) = "=" Then
            AddToChecked n, rowId
        End If
    Next
       
    Dim R As Variant
    For Each R In dCols.Collection
        cboDateType.AddItem R.value 'R.value
        cboDateTypeF.AddItem R.value
    Next
    
    'Operation
    For Each R In Array("+", "-", "*", "/")
        Me.cboOperation.AddItem R
    Next

End Sub


Private Sub AddToChecked(R As Variant, rowId As Integer)
    Dim f As String
    Dim operands As String
    Dim TG As New TPGTokenizer
    Dim n As Variant
    Dim kv As TPGDictionaryPair
    Dim sRange As String
    
    
    
    operands = "+,-,/,*"
    
    f = FixFormula(R.formula)
    TG.clear
    TG.Add f
    
    'check operands
    For Each n In Split(operands, ",")
        If InStr(1, f, n) Then
            TG.Delimiter = CStr(n)
            TG.FromArray Split(TG.ToString, CStr(n))
        End If
    Next
    
    For Each kv In dCols.Collection
        sRange = Replace(sht.Cells(rowId, kv.key).Address, "$", "")
        If Not tested.Contains(sRange) Then
            GetIndirectDependents sRange
            tested.Add sRange
        End If
            If TG.Contains(sRange) Then
                If relCells.KeyExists(R) Then
                    relCells.Replace R.Address, relCells.GetValue(R.Address) & "," & kv.key
                Else
                    relCells.Add R.Address, kv.key
                End If
            End If
    Next
    
End Sub

Private Sub GetIndirectDependents(rString As String)
'IndieTasks
Dim t As New TPGTask
    For Each n In sht.Range(rString).Dependents
        If (n.Column = sht.Range(BaseStartCol).EntireColumn.Column Or _
            n.Column = sht.Range(BaseFinishCol).EntireColumn.Column Or _
            n.Column = sht.Range(StartCol).EntireColumn.Column Or _
            n.Column = sht.Range(FinishCol).EntireColumn.Column) And _
            sht.Range("Plan.ProjectHeader").EntireRow.row < n.row And _
            Pindex < n.row And n.row <> rowId And Left(n.formula, 1) = "=" Then
                t.SetIndex n.row
                If Not IndieTasks.Contains(t.GetFullTaskName) And t.GetID <> cTask.GetID Then
                    IndieTasks.Add t.GetFullTaskName
                End If
        End If
    Next
End Sub

Private Function FixFormula(f As String) As String
'    Dim unwanteds As String
'    Dim n As Variant
'    unwanteds = "=,(,)"
'
'    For Each n In Split(unwanteds, ",")
'        f = Replace(f, CStr(n), "")
'    Next
'
'    FixFormula = f
        
     FixFormula = Replace(Replace(Replace(f, "=", ""), "(", ""), ")", "")

End Function

Attribute VB_Name = "frmReleaseNotes"
Attribute VB_Base = "0{E5AB1474-437B-4C57-9D28-C6EA191D58E0}{1FC92CFA-884D-42FD-923C-D77086D2DB04}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private iScrollTop As Integer


Private Sub cmdReleaseNotesClose_Click()
    On Error GoTo suberr
    modStack.PushCallStack "frmReleaseNotes", "cmdReleaseNotesClose_Click"

    Unload Me

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmReleaseNotes.cmdReleaseNotesClose_Click error:"
    Resume subend
End Sub


Private Sub UserForm_Initialize()
    
    Dim sht As Worksheet
    Dim n As Integer
    Dim z As Integer
    On Error GoTo suberr
    modStack.PushCallStack "frmReleaseNotes", "UserForm_Initialize"

    Set sht = Sheets("ReleaseNotes")
    With Me.ListBox1
        '.RowSource = Range("ReleaseNotes.Header") 'Cells(n, 2)
        '.locked = True
        '.ColumnHeads = True
        '.ColumnWidths = xlAutomatic
        .ColumnCount = 6
        .ColumnWidths = "50;50;100;100;50;500"
        .Width = 700
        .clear
        '.RowSource = "ReleaseNotes!B3:F3"
        .AddItem
        .List(0, 0) = sht.Cells(3, 3)
        .List(0, 1) = sht.Cells(3, 4)
        .List(0, 2) = sht.Cells(3, 5)
        .List(0, 3) = sht.Cells(3, 6)
        .List(0, 4) = sht.Cells(3, 7)
        .List(0, 5) = sht.Cells(3, 8)
        .AddItem
        .List(1, 0) = sht.Cells(4, 3)
        .List(1, 1) = sht.Cells(4, 4)
        .List(1, 2) = sht.Cells(4, 5)
        .List(1, 3) = sht.Cells(4, 6)
        .List(1, 4) = sht.Cells(4, 7)
        .List(1, 5) = sht.Cells(4, 8)
        z = 2
        For n = 4 To sht.Range("C65536").End(xlUp).row
            If sht.Cells(n, 2) = "x" Then
                .AddItem
                .List(z, 0) = sht.Cells(n, 3)
                .List(z, 1) = sht.Cells(n, 4)
                .List(z, 2) = sht.Cells(n, 5)
                .List(z, 3) = sht.Cells(n, 6)
                .List(z, 4) = sht.Cells(n, 7)
                .List(z, 5) = sht.Cells(n, 8)
                z = z + 1
            End If
        Next n
        
    End With
    Set sht = Nothing

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "frmReleaseNotes.UserForm_Initialize error:"
    Resume subend
  
End Sub

'Public Sub ShowDetail()
'    Dim s As String
'    Dim i As Integer
'    'frmImageFormat.DrawBuffer = 128000
'    iScrollTop = FrameReleaseNotes.ScrollTop
'    s = Right(FrameReleaseNotes.ActiveControl.name, Len(FrameReleaseNotes.ActiveControl.name) - 6)
'    i = CInt(s)
'    With tbReleaseNotesDetail
'        .WordWrap = True
'        .MultiLine = True
'        .text = ReleaseNotes.Cells(s, 8).text
'        .ScrollBars = fmScrollBarsVertical
'        .SetFocus
'    End With
'    FrameReleaseNotes.SetFocus
'    FrameReleaseNotes.ScrollTop = iScrollTop
'    'frmImageFormat.DrawBuffer = 32000
'End Sub


Attribute VB_Name = "frmRenameOrgUnit"
Attribute VB_Base = "0{06F80D48-6D5E-49F7-AB3B-7C5934F38D06}{2E618796-90AE-4521-8ED3-9C501B8863D3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cboOrgUnit_Change()
Dim s1 As String
Dim s2 As String
's1 = Left(cboOrgUnit.Value, InStr(cboOrgUnit.Value, ";") - 1)
s1 = Mid(cboOrgUnit.value, InStr(cboOrgUnit.value, ";") + 2, ((InStrRev(cboOrgUnit.value, ";") - 1) - (InStr(cboOrgUnit.value, ";") + 1)))
s2 = Right(cboOrgUnit.value, Len(cboOrgUnit.value) - (InStrRev(cboOrgUnit.value, ";") + 1))
Me.txtNewAbbrev = s1
Me.txtNewOrgUnit = s2
End Sub

Private Sub cmdAbbrechen_Click()
Unload Me
End Sub

Private Sub cmdAdd_Click()
Dim s As String
Dim i As Integer
Dim bexists As Boolean
Dim slist As String
If (Me.cboOrgUnit.value <> "") Then
    If Me.cboOrgUnit.value <> (Left(cboOrgUnit.value, InStr(cboOrgUnit.value, ";") - 1) + "; " + Me.txtNewAbbrev + "; " + Me.txtNewOrgUnit) Then
         If (Me.txtNewAbbrev <> "") And (Me.txtNewOrgUnit = "") Then
            AppStopMsg appGetLOCText("msgrenameinvalid")
            Exit Sub
         ElseIf (Me.txtNewAbbrev = "") And (Me.txtNewOrgUnit <> "") Then
            AppStopMsg appGetLOCText("msgrenameinvalid2")
            Exit Sub
         ElseIf (Me.txtNewAbbrev = "") And (Me.txtNewOrgUnit = "") Then
            'check if orgunit is not in use in PHB
            If Contract.OrgUnitInUse(Right(cboOrgUnit.value, Len(cboOrgUnit.value) - (InStrRev(cboOrgUnit.value, ";") + 1))) Then
                AppStopMsg appGetLOCText("msgorginuse")
                Exit Sub
            End If
            'If MsgBox(appGetLOCText("msgrenamerisk"), vbYesNo) = vbNo Then Exit Sub
         End If
        s = Me.cboOrgUnit.value + ">> " + Me.txtNewAbbrev + "; " + Me.txtNewOrgUnit
        bexists = False
        For i = 0 To (Me.lstrename.ListCount - 1)
            slist = Left(Me.lstrename.List(i), InStr(Me.lstrename.List(i), ">> ") - 1)
            If slist = Me.cboOrgUnit Then
                bexists = True
                Exit For
            End If
        Next
        If Not bexists Then
            Me.lstrename.AddItem s
        Else
            AppStopMsg (appGetLOCText("msgrenamepresent"))
        End If
    Else
        AppStopMsg (appGetLOCText("msgnorenamediff"))
    End If
Else
    AppStopMsg (appGetLOCText("msgnorenamedata"))
End If
End Sub

Private Sub cmdDelete_Click()
If Me.lstrename.listIndex >= 0 Then
    Me.lstrename.RemoveItem (Me.lstrename.listIndex)
End If
End Sub

Private Sub cmdOK_Click()
Dim i As Integer
If Me.lstrename.ListCount > 0 Then
    'execute renaming
    For i = 0 To (Me.lstrename.ListCount - 1)
        executerename Left(Me.lstrename.List(i), InStr(Me.lstrename.List(i), ">> ") - 1), Right(Me.lstrename.List(i), Len(Me.lstrename.List(i)) - (InStr(Me.lstrename.List(i), ">> ") + 2))
    Next
    AppInfoMsg (appGetLOCText("msgRenameDone"))
End If
Unload Me
End Sub

Private Sub executerename(sold As String, snew As String)
Dim i As Integer
Dim sabbold As String
Dim sorgold As String
Dim sabbnew As String
Dim sorgnew As String
Dim iorgnr As Integer

'sabbold = Left(sold, InStr(sold, ";") - 1)
'sorgold = Right(sold, Len(sold) - (InStr(sold, ";") + 1))

sabbold = Mid(cboOrgUnit.value, InStr(cboOrgUnit.value, ";") + 2, ((InStrRev(cboOrgUnit.value, ";") - 1) - (InStr(cboOrgUnit.value, ";") + 1)))
sorgold = Right(cboOrgUnit.value, Len(cboOrgUnit.value) - (InStrRev(cboOrgUnit.value, ";") + 1))
iorgnr = CInt(Left(sold, InStr(sold, ";") - 1))

sabbnew = Left(snew, InStr(snew, ";") - 1)
sorgnew = Right(snew, Len(snew) - (InStr(snew, ";") + 1))

'rename in admin
If Admin.RenameOrgUnitInAdmin(iorgnr, sabbold, sorgold, sabbnew, sorgnew) Then
    'rename in contract
    If Contract.RenameOrgUnitInContract(sorgold, sorgnew) Then
        'rename in team
        If Team.RenameOrgUnitInTeam(sorgold, sorgnew) Then
            'rename in plan
            If Plan.RenameOrgUnitInPlan(sorgold, sorgnew) Then
                'rename in ap
                wp.RenameOrgUnitInWP sorgold, sorgnew
            End If
        End If
    End If
End If
End Sub

Private Sub UserForm_Initialize()
Dim icount As Integer
Dim icol As Integer
Dim iRow As Integer
Dim i As Integer
icount = Admin.Range("Admin.Org").Cells.Count - 1
icol = Admin.Range("Admin.Org").Column
iRow = Admin.Range("Admin.Org").row + 1
Me.cboOrgUnit.clear
For i = iRow To (iRow + icount - 1)
    cboOrgUnit.AddItem (Trim(CStr(i - (iRow - 1))) + "; " + Admin.Cells(i, icol - 1).value + "; " + Admin.Cells(i, icol).value)
Next
'Dim c As Variant
'For Each c In Admin.Range("Admin.Org")
'    If c.Value <> "" Then cboOrgUnit.AddItem (c.offset(0, -1).Value + "; " + c.Value)
'Next
End Sub
Attribute VB_Name = "frmWPExport"
Attribute VB_Base = "0{36A08739-444B-443A-BEA9-4F79C09F8E31}{FFB9B9CB-57A7-4BDE-85B8-191771EE1F0B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton1_Click()
    wp.cmdExportXLS
End Sub

Private Sub CommandButton2_Click()
    wp.cmdExportPDF
End Sub

Private Sub CommandButton3_Click()
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Me.Left = 0
End Sub
Attribute VB_Name = "modApp"
Option Explicit
Option Private Module

Public Const pStrMsgBoxTitle = "project handbook"
Private Const sExcelPwd = "dfg456rtz-.,"     '""
Private Const sWPPwd = "asd123wer)"

Public Const DEV_MODE As Boolean = False
Public Const VERSION_NO = "3.0.00a"
Public Const DEBUG_MODE As Boolean = False 'logging concerning un/locking of sheets
Public Const BETA_MODE As Boolean = False 'when true then buildno is shown on cover

Public Sub PrepareWBLicense()
'this sub does only a partial prepare
'hidding config sheets, setting Confog_Lic sheet as default
'the full 'prepareworkbook' is done by the config user through a ribbon button in config_lic
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "PrepareWBLicense"
    UnprotectSheet ActiveSheet
    modRibbon.bnoRibbonUpdate = True
    modConst.bNoNormalProtectActionsRequired = True
    HideConfigSheets False
    HideRowAndColumnHeaders
    Config_Lic.Activate
    appScrollTop
    modRibbon.bnoRibbonUpdate = False
    modConst.bNoNormalProtectActionsRequired = False
    modRibbon.RefreshRibbon
    EnsureUIProtection Config_Lic
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.PrepareWBLicense error:"
    Resume subend
End Sub


Public Sub PrepareWorkbook()
'before running prepareworkbook please first goto COVER, then run this sub
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "PrepareWorkbook"
    modRibbon.bnoRibbonUpdate = True
    modConst.bNoNormalProtectActionsRequired = True
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
        HideConfigSheets
    Else
        'for KISS License the visibility of the Not-Config sheets was already set during 'Set License'
        'so we can not run the normal hideconfigsheets, we now only hide the true config sheets
        HideConfigSheetsKISS
    End If
    HideRowAndColumnHeaders
    Cover.Activate
    SetVisibility Admin, xlSheetVeryHidden
    modRibbon.bnoRibbonUpdate = False
    modConst.bNoNormalProtectActionsRequired = False
    modRibbon.RefreshRibbon
    EnsureUIProtection Cover
'141015    HideRowAndColumnHeaders
    'ActiveWindow.DisplayWorkbookTabs = False
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.PrepareWorkbook error:"
    Resume subend
End Sub

Private Sub UnhideAll()
    Dim sht As Worksheet
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "UnhideAll"

    SetWBProtection False
    modConst.bNoNormalProtectActionsRequired = True
    For Each sht In Sheets
        sht.visible = xlSheetVisible
    Next
    SetCustomProperty Config, "OpenedForEditing", "True"
'    LockButtons False
'    ActiveWindow.DisplayWorkbookTabs = True

subend:
    modConst.bNoNormalProtectActionsRequired = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.UnhideAll error:"
    Resume subend

End Sub
    
Private Sub DisableDemo()
Config_Lic.Range("Config_Lic.D").value = "NO"
End Sub
    
Private Sub ShowTabs()
    ActiveWindow.DisplayWorkbookTabs = True
End Sub
Public Function GetVersionNr() As String
        GetVersionNr = "v " & VERSION_NO
End Function

Public Function GetVersionNoCover() As String
    Dim s As String
    Application.Volatile True
    If Demo Then
        s = CStr(Config_Lic.Range("Config.Demo.EndDate").value)
        GetVersionNoCover = "v " & VERSION_NO & " DEMO VALID UNTIL " & s
    ElseIf BETA_MODE Then
        GetVersionNoCover = "v " & VERSION_NO & " Beta"
    Else
        GetVersionNoCover = "v " & VERSION_NO
    End If
End Function

Public Function GetCurrentLicense() As String
Select Case GetCustomProperty(Config, "License")
    Case "F"
        GetCurrentLicense = "Full"
    Case "M"
        GetCurrentLicense = "Manager"
    Case "P"
        GetCurrentLicense = "Project"
    Case "K"
        GetCurrentLicense = "KISS"
    Case "C"
        GetCurrentLicense = "KISS Corporate"
    Case Else
        GetCurrentLicense = "UNKNOWN !!!"
End Select
End Function
    
'Private Sub UnprotectAll()
'    Dim sht As Worksheet
'    On Error GoTo SubErr
''    modStack.PushCallStack "modApp", "ToggleProtection"
'
'    UnprotectWorkbook "pmccTPG:-)"
'    For Each sht In ThisWorkbook.Sheets
'        UnprotectSheet sht
'    Next
'    'EnableScreenUpdating
'
'SubEnd:
' '   modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "modApp.UnprotectAll error:"
'    Resume SubEnd
'End Sub

Public Sub ProtectAll()
    Dim sht As Worksheet
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "ToggleProtection"

    For Each sht In ThisWorkbook.Sheets
        
    Next
    ProtectWorkbook

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.ProtectAll error:"
    Resume subend
End Sub

Public Sub EnsureUIProtection(sht As Worksheet)
    If GetCustomProperty(sht, "KeepUnprotected") = "True" Then Exit Sub
    If (sht.ProtectionMode) And (sht.ProtectContents) Then Exit Sub
    Select Case sht.CodeName
        Case "Admin" ' allow cell formatting
If DEBUG_MODE Then Debug.Print "EnsureUIProtection " + sht.CodeName
            sht.Protect sExcelPwd, True, True, True, True, True, False, False, False, False, True, False, False, False, True
        Case "Config", "MeetingDetails", "StatusHist", "WPDetails", "RibbonConfig"
            'do nothing
'        Case "Config_Lic"
            'allow formatting
'            sht.Protect sExcelPwd, True, True, True, True, True, False, False, False, False, True, False, False, False, True
        Case "Team"
If DEBUG_MODE Then Debug.Print "EnsureUIProtection " + sht.CodeName
            If (ModuleExists("PersonalPlanning")) Then
                sht.Protect sExcelPwd, True, True, True, True, True, False, False, False, False, True, False, False, False, True
            Else
                sht.Protect sExcelPwd, True, True, True, True, False, False, False, False, False, True, False, False, False, True
            End If
        Case Else
If DEBUG_MODE Then Debug.Print "EnsureUIProtection " + sht.CodeName
            sht.Protect sExcelPwd, True, True, True, True, False, False, False, False, False, True, False, False, False, True
    End Select
End Sub

Public Sub SetWBProtection(Protect As Boolean)
    If Protect Then
If DEBUG_MODE Then Debug.Print "setWBProtection PROTECT"
        ThisWorkbook.Protect sWPPwd, True
    Else
If DEBUG_MODE Then Debug.Print "setWBProtection UNPROTECT"
        ThisWorkbook.Unprotect sWPPwd
    End If
End Sub

'Public Sub test()
' SetWBProtection True  'ThisWorkbook.Unprotect "qwertz123456UIOP|fffd|*/()=?"
'Debug.Print "ok"
'End Sub

Public Sub GotoAdmin()
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "GotoAdmin"
    If IsDemoVersion Then GoTo subend
    If Admin.visible = xlSheetVisible Then
        Admin.Activate
    Else
        frmPW.Show
    End If
subend:
    ProtectWorkbook
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.GotoAdmin error:"
    Resume subend
End Sub


Public Sub ProtectSheet(anySheet As Worksheet)
    On Error GoTo suberr
    'modStack.PushCallStack "modApp", "ProtectSheet"

    If anySheet.ProtectContents Then GoTo subend 'already protected
    If CBool2(GetCustomProperty(anySheet, "KeepUnprotected")) = True Then GoTo subend
If DEBUG_MODE Then Debug.Print "modApp.ProtectSheet: " + anySheet.Name
'    If anySheet.CodeName = "Admin" Then ' allow cell formatting
    If (anySheet.CodeName = "Admin") Or ((anySheet.CodeName = "Team") And (ModuleExists("PersonalPlanning"))) Then ' allow cell formatting
        anySheet.Protect sExcelPwd, True, True, True, False, True, False, False, False, False, True, False, False, False, True
    Else
        anySheet.Protect sExcelPwd, True, True, True, False, False, False, False, False, False, True, False, False, False, True
    End If

subend:
    'modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.ProtectSheet error:"
    Resume subend
End Sub


Sub HideConfigSheets(Optional bIncludeConfig_lic As Boolean = True)
    Dim sht As Worksheet
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "HideConfigSheets"

    modApp.SetWBProtection False
    For Each sht In Sheets

        Select Case sht.CodeName
            Case "NewTemplateSheet", "TemplateSheet", "CustomizingNotes", "WBS2", "WBS3", "StatusHist", "Loc", "Config", "WPInfo", "WPDetails", "MeetingDetails", "TableTest", "ReleaseNotes", "RibbonConfig"
                SetVisibility sht, xlSheetVeryHidden
            Case "Config_Lic"
                If bIncludeConfig_lic Then SetVisibility sht, xlSheetVeryHidden
            Case "Risk_kiss", "Context_kiss"
                    SetVisibility sht, xlSheetVeryHidden
            Case "MTA"
                If ModuleExists("MTAServer") Then
                    sht.visible = xlSheetVisible
                Else
                    SetVisibility sht, xlSheetVeryHidden
                End If
            Case "ChangeRequest", "ChangeRequestList"
                If ModuleExists("CRF") Then
                    sht.visible = xlSheetVisible
                Else
                    SetVisibility sht, xlSheetVeryHidden
                End If
            Case Else
                sht.visible = xlSheetVisible
        End Select
    Next
'    ProtectWorkbook
'    LockButtons True

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.HideConfigSheets error:"
    Resume subend
End Sub

Sub HideConfigSheetsKISS(Optional bIncludeConfig_lic As Boolean = True)
    Dim sht As Worksheet
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "HideConfigSheets"

    modApp.SetWBProtection False
    For Each sht In Sheets

        Select Case sht.CodeName
            Case "TemplateSheet", "CustomizingNotes", "WBS2", "WBS3", "StatusHist", "Loc", "Config", "WPInfo", "WPDetails", "MeetingDetails", "TableTest", "ReleaseNotes", "RibbonConfig"
                SetVisibility sht, xlSheetVeryHidden
            Case "Config_Lic"
                If bIncludeConfig_lic Then SetVisibility sht, xlSheetVeryHidden
            Case Else
        End Select
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.HideConfigSheetsKISS error:"
    Resume subend
End Sub

Private Sub HideRowAndColumnHeaders()
    Dim currentSht As Worksheet
    Dim sht As Worksheet
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "HideRowAndColumnHeaders"

    
    Set currentSht = ActiveSheet
    For Each sht In Sheets
        If sht.visible = xlSheetVisible Then
            sht.Activate
            
            ActiveWindow.DisplayHeadings = False
            ActiveWindow.DisplayGridlines = False
            
        End If
    Next
    'TODO: FIXME!
    currentSht.Activate
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.HideRowAndColumnHeaders error:"
    Resume subend
End Sub

Public Function appFileIsOpen(s As String) As Boolean
    Dim wb As Workbook
    
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "appFileIsOpen"
    
    appFileIsOpen = False
    For Each wb In Application.Workbooks
        If wb.Name = s Then
            appFileIsOpen = True
            GoTo subend
        End If
    Next
    
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modApp.appFileIsOpen error."
    Resume subend
End Function

Sub AppInfoMsg(sPrompt As String)
    appMsg sPrompt, vbInformation
End Sub


'---------------------------------------------------------------------------------------
' AppErrMsg
'
' @date     19.01.2011
' @author   wm
' @version  1.0
' @param    sPrompt         original prompt - deprecated
' @param    sCustomMessage  custom message to provide a possible reason for this error
'---------------------------------------------------------------------------------------
'
Sub AppErrMsg(Optional sPrompt As String = "", Optional sCustomMessage As String = "")
        
    Dim iErrNo As Integer
    Dim sErrDesc As String
    
    iErrNo = err.Number
    sErrDesc = err.Description
    err.clear
    
    Select Case iErrNo
    
        Case 18     'user tried to interrupt using CTRL + Break
            'modLog.logEvent "user interrupt trapped"
            Exit Sub
            
        Case 9998   'a user defined procedure is disabled
            If LOGGING_ENABLED Then Debug.Print "skipped user defined procedure: " & CurrentProcName
            Exit Sub
            
        Case 9999   'one or more general events are disabled
            If LOGGING_ENABLED Then Debug.Print "skipped general event: " & CurrentProcName
            Exit Sub
            
        Case Else
            Dim sCustom
            sCustom = ""
            If Not sCustomMessage = "" Then sCustom = sCustomMessage & vbLf
            
            'show error message
            appMsg "An error occured in procedure: " & modStack.InitialProcName & vbLf & sCustom & vbLf & _
                    "Error Number: " & vbTab & iErrNo & vbLf & _
                    "Error Location: " & vbTab & modStack.CurrentProcName & vbLf & _
                    "Error Description: " & vbTab & sErrDesc, vbExclamation
                    
            'log event
            'modLog.logEvent , iErrNo, sErrDesc, modStack.CurrentProcName
            
            
    End Select
'    If MsgBox("Do you want to create a logfile?", vbOKCancel, "Project Handbook") = vbOK Then
'        modLog.CreateLogFile
'    End If
    
End Sub

Sub AppStopMsg(sPrompt As String)
    appMsg sPrompt, vbCritical
End Sub

Function appQOCMsg(sPrompt)
    appQOCMsg = appMsg(sPrompt & " ?", vbQuestion + vbOKCancel)
End Function

Sub appCNAMsg()
    appMsg appGetLOCText("CommandNotAvailable"), vbInformation
End Sub

Function appMsg(ByVal sPrompt As String, MsgBoxStyle As VbMsgBoxStyle) As VbMsgBoxResult
    Application.ScreenUpdating = True
    appMsg = MsgBox(sPrompt, MsgBoxStyle, pStrMsgBoxTitle)
    Application.ScreenUpdating = False
End Function

Public Function IsDemoVersion() As Boolean
    On Error GoTo suberr
'    modStack.PushCallStack "modApp", "IsDemoVersion"

    If sActiveLicense = "D" Then
        appCNAMsg
        IsDemoVersion = True
    Else
        IsDemoVersion = False
    End If

subend:
'    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modApp.IsDemoVersion error:"
    Resume subend
End Function

Public Function IsProjectVersion() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "IsProjectVersion"

    If sActiveLicense = "P" Then
        appCNAMsg
        IsProjectVersion = True
    Else
        IsProjectVersion = False
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modApp.IsProjectVersion error:"
    Resume subend
End Function

Public Function appGetLOCSheet(sname As String) As Worksheet
    Dim sht As Worksheet
    
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "appGetLOCSheet"
    
    Set appGetLOCSheet = Nothing
    
    For Each sht In Sheets
        If sht.CodeName = sname Then
            Set appGetLOCSheet = sht
            Exit For
        End If
    Next
    
subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modApp.appGetLOCSheetName error"
    Resume subend
End Function

Public Function appGetLOCText(sText As String, Optional bnoerrmess As Boolean = False) As String
    Dim R As Range
    Dim lLoc As Long
    Dim sLOCText As String

    On Error GoTo suberr
'perf improvement
'    modStack.PushCallStack "modApp", "appGetLOCText"
        
    appGetLOCText = ""
    
    'Find Col from language in Cover
    'Set r = Sheets("LOC").Range("LOC.Header").Find(Range("Cover.LOC"))
    'If r Is Nothing Then
    '    AppStopMsg "Language not found."
    '    GoTo SubEnd
    'End If
    'lLoc = r.Column - Sheets("LOC").Range("LOC.Header").Column
    lLoc = Range("Cover.LOC").value - 1
    Set R = Sheets("LOC").Range("LOC.Find").Find(sText, , xlValues, xlWhole, , , False)
    If Not R Is Nothing Then
        sLOCText = R.offset(0, lLoc).value
        If sLOCText = "" Then
            If Not bnoerrmess Then AppStopMsg "No Text for '" & sText & "' in LOC"
        Else
            appGetLOCText = sLOCText
        End If
    Else
        If Not bnoerrmess Then AppStopMsg "Text not found in LOC: " & sText
    End If
    
subend:
'    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modApp.appGetLOCText error:"
    Resume subend
End Function

Public Function appGetLOCLookUpText(sText As String, Optional bnoerrmess As Boolean = False) As String
    Dim R As Range
    Dim lLoc As Long
    Dim sLOCText As String

    On Error GoTo suberr
'perf improvement
'    modStack.PushCallStack "modApp", "appGetLOCLookUpText"
        
    appGetLOCLookUpText = ""
    
    'Find Col from language in Cover
    'Set r = Sheets("LOC").Range("LOC.Header").Find(Range("Cover.LOC"))
    'If r Is Nothing Then
    '    AppStopMsg "Language not found."
    '    GoTo SubEnd
    'End If
    'lLoc = r.Column - Sheets("LOC").Range("LOC.Header").Column
    lLoc = Range("Cover.LOC").value - 1
    Set R = Sheets("LOC").Range("LOC.Find").offset(0, lLoc).Find(sText, , xlValues, xlWhole, , , False)
    If Not R Is Nothing Then
        sLOCText = R.offset(0, lLoc * -1).value
        If sLOCText = "" Then
            If Not bnoerrmess Then AppStopMsg "No Text for '" & sText & "' in LOC"
        Else
            appGetLOCLookUpText = sLOCText
        End If
    Else
        If Not bnoerrmess Then AppStopMsg "Text not found in LOC: " & sText
    End If
    
subend:
'    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modApp.appGetLOCLookUpText error:"
    Resume subend
End Function

Public Sub appCopyFont(r1 As Range, r2 As Range)
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "appCopyFont"

    On Error Resume Next
    With r2.Font
        .Name = r1.Font.Name
        .Bold = r1.Font.Bold
        .Color = r1.Font.Color
        .Background = r1.Font.Background
'        .ColorIndex = r1.Font.ColorIndex
        .FontStyle = r1.Font.FontStyle
        .Italic = r1.Font.Italic
        .Size = r1.Font.Size
        .Strikethrough = r1.Font.Strikethrough
        .Subscript = r1.Font.Subscript
        .Superscript = r1.Font.Superscript
        '.ThemeColor = r1.Font.ThemeColor
        '.ThemeFont = r1.Font.ThemeFont
        '.TintAndShade = r1.Font.TintAndShade
        .Underline = r1.Font.Underline
    End With

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.appCopyFont error:"
    Resume subend
End Sub

Public Sub appCopyInterior(r1 As Range, r2 As Range)
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "appCopyInterior"

    On Error Resume Next
    With r2.Interior
        .Color = r1.Interior.Color
        '.ColorIndex = r1.Interior.ColorIndex
        '.Gradient = r1.Interior.Gradient
        '.InvertIfNegative = r1.Interior.InvertIfNegative
        .Pattern = r1.Interior.Pattern
        .PatternColor = r1.Interior.PatternColor
        .PatternColorIndex = r1.Interior.PatternColorIndex
        '.PatternThemeColor = r1.Interior.PatternThemeColor
        '.PatternTintAndShade = r1.Interior.PatternTintAndShade 'not always supported
        '.ThemeColor = r1.Interior.ThemeColor
        '.TintAndShade = r1.Interior.TintAndShade 'not always supported
    End With

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.appCopyInterior error:"
    Resume subend
End Sub

Public Sub appCopyAlignment(r1 As Range, r2 As Range)
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "appCopyAlignment"

    On Error Resume Next
    With r2
        .HorizontalAlignment = r1.HorizontalAlignment
        .VerticalAlignment = r1.VerticalAlignment
        .WrapText = r1.WrapText
        .Orientation = r1.Orientation
        .AddIndent = r1.AddIndent
        .IndentLevel = r1.IndentLevel
    End With

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.appCopyAlignment error:"
    Resume subend
End Sub


Public Sub DisableScreenUpdating()
    On Error GoTo suberr
    'If modStack.mintStackPointer > 0 Then GoTo SubEnd
    'modStack.PushCallStack "modApp", "DisableScreenUpdating"

    If (Application.Calculation <> xlCalculationManual) Then
        Application.Calculation = xlCalculationManual
    End If
    Application.ScreenUpdating = False
    'Application.ScreenUpdating = False  ' this code is performed intentionally twice for some unknown reason this reduces screen flickering significantly

subend:
    'modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "error:"
    Resume subend
End Sub

Public Sub EnableScreenUpdating()
    On Error GoTo suberr
    'If modStack.mintStackPointer > 0 Then GoTo SubEnd
    'modStack.PushCallStack "modApp", "EnableScreenUpdating"

    If (Application.Calculation <> xlCalculationAutomatic) Then
        Application.Calculation = xlCalculationAutomatic
    End If
    Application.ScreenUpdating = True
    'Application.ScreenUpdating = True  ' this code is performed intentionally twice for some unknown reason this reduces screen flickering significantly

subend:
    'modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg " error:"
    Resume subend
End Sub


Public Sub UnprotectSheet(anySheet As Worksheet)
    On Error GoTo suberr
    'modStack.PushCallStack "modApp", "UnprotectSheet"
'    If Not anySheet.ProtectContents Then GoTo subend 'already unprotected
'If DEBUG_MODE Then Debug.Print "modApp.UnprotectSheet: " + anySheet.Name
    anySheet.Unprotect sExcelPwd

subend:
    'modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.UnprotectSheet error:"
    Resume subend
End Sub

Public Sub ProtectWorkbook()
    SetWBProtection True
'131015
'    On Error GoTo SubErr
'    modStack.PushCallStack "modApp", "ProtectWorkbook"
'
'    ThisWorkbook.Protect sExcelPwd, True
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "modApp.ProtectWorkbook error:"
'    Resume SubEnd
End Sub

Public Sub UnprotectWorkbook(code As String)
    SetWBProtection False
'131015
'    On Error GoTo SubErr
'    modStack.PushCallStack "modApp", "UnprotectWorkbook"
'
'    If code = "pmccTPG:-)" Then
'        ThisWorkbook.Unprotect sExcelPwd
'    End If
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "modApp.UnprotectWorkbook error:"
'    Resume SubEnd
End Sub

Public Function BaselineExists() As Boolean
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "BaselineExists"

    BaselineExists = Not IsEmpty(Application.Range("Plan.BaselineSaveDate"))

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modApp.BaselineExists error:"
    Resume subend
End Function

Public Sub appScrollTop()
    On Error GoTo suberr
'    modStack.PushCallStack "modApp", "appScrollTop"

    On Error Resume Next
    ActiveWindow.SmallScroll Down:=-65335

subend:
'    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.appScrollTop error:"
    Resume subend
End Sub


Sub FindHiddenPictures()
    Dim s As Worksheet
    Dim p As shape
    Dim c As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "FindHiddenPictures"

    For Each s In ThisWorkbook.Sheets
        c = 0
        For Each p In s.Shapes
           If p.Type = msoPicture Then
            c = c + 1
           End If
        Next
        If c > 1 Then MsgBox s.CodeName & ": " & c
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.FindHiddenPictures error:"
    Resume subend
End Sub


Public Sub Click()
    
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "Click"

    Run ActiveSheet.CodeName & "." & Application.Caller

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modApp.Click error:"
    Resume subend
End Sub

Public Function GetCorrespondingRangeName(Target As Range)
    Dim n As Name
    For Each n In ThisWorkbook.Names
        If n.RefersTo = "=" & Target.Parent.Name & "!" & Target.Address Then Exit For
    Next
    If Not n Is Nothing Then GetCorrespondingRangeName = n.Name
End Function


'---------------------------------------------------------------------------------------
' not registered as these will be used from within the callstack
'---------------------------------------------------------------------------------------
Private Sub LockButtons(bLock As Boolean)
    SetCustomProperty Config, "ButtonLock", CStr(bLock)
End Sub

Public Function ButtonsLocked() As Boolean
    ButtonsLocked = CBool2(GetCustomProperty(Config, "ButtonLock"))
End Function

Public Function ProtectionRemoved() As Boolean
    ProtectionRemoved = CBool2(GetCustomProperty(Config, "ProtectionRemoved"))
End Function

Public Function SheetScrollTop(sht As Worksheet) As Boolean
    'If GetCustomProperty(sht, "SheetScrollTop") = "" Then SetCustomProperty sht, "SheetScrollTop", "False"
    SheetScrollTop = CBool2(GetCustomProperty(sht, "SheetScrollTop"))
End Function

Public Function IsConfigSheet(sht As Worksheet) As Boolean
    'If GetCustomProperty(sht, "IsConfigSheet") = "" Then SetCustomProperty sht, "IsConfigSheet", "False"
    IsConfigSheet = CBool2(GetCustomProperty(sht, "IsConfigSheet"))
End Function

Public Function ModuleExists(ModuleName As String) As Boolean
'Debug.Print "begin moduleexists"
    If GetCustomProperty(Config, "Module" & ModuleName) = "" Then
'Debug.Print "end1 moduleexists"
        Exit Function
    End If
    ModuleExists = CBool2(GetCustomProperty(Config, "Module" & ModuleName))
'Debug.Print "end2 moduleexists"
End Function

'Sub setprprty()
'    Dim sht As Worksheet
'    For Each sht In ThisWorkbook.Sheets
'        SetCustomProperty sht, "IsConfigSheet", True
'        SetCustomProperty sht, "SheetScrollTop", True
'    Next
'End Sub


'---------------------------------------------------------------------------------------
' ***** the following functions depend on their special error handlers, *****
' *****     so default errorhandling is intentionally not provided      *****
'---------------------------------------------------------------------------------------
  

'---------------------------------------------------------------------------------------
' Exists
' check if an item exists in a collection
' @date     03.01.2011
' @author   wm
' @version  1.0
' @param    col     the collection
' @param    index   the index
' @return           True if item exists, False if not
'---------------------------------------------------------------------------------------
'
Public Function Exists(col, index) As Boolean
On Error GoTo ExistsTryNonObject
    Dim o As Object
 
    Set o = col(index)
    Exists = True
    Exit Function
 
ExistsTryNonObject:
    Exists = ExistsNonObject(col, index)
End Function
Private Function ExistsNonObject(col, index) As Boolean
On Error GoTo ExistsNonObjectErrorHandler
    Dim v As Variant
 
    v = col(index)
    ExistsNonObject = True
    Exit Function
 
ExistsNonObjectErrorHandler:
    ExistsNonObject = False
End Function
'---------------------------------------------------------------------------------------


'---------------------------------------------------------------------------------------
' KeyExists
' check if a certain key exists in a collection
' @date     03.01.2011
' @author   wm
' @version  1.0
' @param    col     the collection
' @param    Key     the key
' @return           True if key exists, False if not
'---------------------------------------------------------------------------------------
'
Function KeyExists(col As Collection, key As String) As Boolean
    Dim x As Variant

On Error GoTo err
    KeyExists = True
    x = col.Item(key)
    Exit Function

err:
    Select Case err.Number
        Case 5:
            KeyExists = False
            Resume Next
        Case 450:
            Resume Next
    End Select
End Function


'---------------------------------------------------------------------------------------
' CallerExists
'
' @date     04.01.2011
' @author   wm
' @version  1.0
' @return           true if initial call was triggered by a form control, False if not
'---------------------------------------------------------------------------------------
'
Public Function CallerExists() As Boolean
    Dim s As String
    s = GetCaller
    If s = "" Then
        CallerExists = False
    Else
        CallerExists = True
    End If
End Function


'---------------------------------------------------------------------------------------
' GetCaller
'
' @date     04.01.2011
' @author   wm
' @version  1.0
' @return           the name of the initially calling form control as String
'---------------------------------------------------------------------------------------
'
Public Function GetCaller() As String
Dim s As String
On Error GoTo suberr
    s = Application.Caller
    GetCaller = s
subend:
    Exit Function
suberr:
    If s = "" Then GetCaller = ""       'called from code
    Resume subend
End Function


Public Function FindCaller()
    Dim sht As Worksheet
    Dim s As shape
    
    On Error GoTo suberr
    modStack.PushCallStack "modApp", "FindCaller"

    For Each sht In ThisWorkbook.Worksheets
        For Each s In sht.Shapes
            'if s.c
            If s.Name = GetCaller Then Debug.Print s.Name & "/" & s.Parent.Name
        Next
    Next

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modApp.FindCaller error:"
    Resume subend
End Function

Public Property Get pStrVersion() As String
    pStrVersion = GetCustomProperty(Config, "License")
End Property

Public Sub SetContentsSheet()
' 270815
            Dim sM As String
            Dim sO As String
            Dim R As Range
            Dim c As Variant
            
            sM = appGetLOCText("M")
            sO = appGetLOCText("O")
            
            contents.noupdate = True
            SetWBProtection False
            Set R = contents.Range("Contents.Complexity")
            For Each c In R
                If IsError(c.value) Then
                    MsgBox "Check Admin"
                Else
                    'Excel.Application.EnableEvents = False
                    Select Case c.value
                    Case "-"
                            c.offset(0, 1).value = "-"
                            c.offset(0, 1).Interior.Color = RGB(242, 242, 242)
                            c.offset(0, 1).locked = True
                            c.offset(0, 2).value = "-"
                            c.offset(0, 2).Interior.Color = RGB(242, 242, 242)
                            c.offset(0, 2).locked = True
                            SetVisibility Sheets(c.offset(0, -1).value), xlSheetHidden
                    Case sM
                            c.offset(0, 1).value = "x"
                            c.offset(0, 1).Interior.Color = RGB(242, 242, 242)
                            c.offset(0, 1).locked = True
                            c.offset(0, 2).value = "x"
                            c.offset(0, 2).Interior.Color = RGB(255, 255, 255)
                            c.offset(0, 2).locked = False
                            SetVisibility Sheets(c.offset(0, -1).value), xlSheetVisible
                    Case sO
                            c.offset(0, 1).value = "-"
                            c.offset(0, 1).Interior.Color = RGB(255, 255, 255)
                            c.offset(0, 1).locked = False
                            c.offset(0, 2).value = "-"
                            c.offset(0, 2).Interior.Color = RGB(242, 242, 242)
                            c.offset(0, 2).locked = True
                            SetVisibility Sheets(c.offset(0, -1).value), xlSheetHidden
                    End Select
                    'Excel.Application.EnableEvents = True
                End If
            Next
'            ProtectWorkbook
            contents.noupdate = False

End Sub

Public Function TranslateText(s As String, oldLOC As Integer, newloc As Integer) As String
    Dim rangeLOC As Range
    Dim rangeLOCFind As Range
    Dim sValue As String
    Dim sNewValue As String
    Dim rangeValue As Range
    Dim rangeKey As Range
    Dim lLoc As Long
    
    TranslateText = s
    If s <> "" Then
        Set rangeLOCFind = Loc.Range("LOC.Find").offset(0, oldLOC)
        Set rangeValue = rangeLOCFind.Find(s, , xlValues, xlWhole, , , False)
        If Not rangeValue Is Nothing Then
            Set rangeKey = rangeValue.offset(0, -oldLOC)
            TranslateText = rangeKey.offset(0, newloc).value
        End If
    End If
End Function


'Picks new color
Function PickNewColor(Optional i_OldColor As Double = xlNone) As Double
Const BGColor As Long = 13160660  'background color of dialogue
Const ColorIndexLast As Long = 32 'index of last custom color in palette

Dim myOrgColor As Double          'original color of color index 32
Dim myNewColor As Double          'color that was picked in the dialogue
Dim myRGB_R As Integer            'RGB values of the color that will be
Dim myRGB_G As Integer            'displayed in the dialogue as
Dim myRGB_B As Integer            '"Current" color
  
  'save original palette color, because we don't really want to change it
  myOrgColor = ActiveWorkbook.Colors(ColorIndexLast)
  
  If i_OldColor = xlNone Then
    'get RGB values of background color, so the "Current" color looks empty
    Color2RGB BGColor, myRGB_R, myRGB_G, myRGB_B
  Else
    'get RGB values of i_OldColor
    Color2RGB i_OldColor, myRGB_R, myRGB_G, myRGB_B
  End If
  
  'call the color picker dialogue
  If Application.Dialogs(xlDialogEditColor).Show(ColorIndexLast, _
     myRGB_R, myRGB_G, myRGB_B) = True Then
    '"OK" was pressed, so Excel automatically changed the palette
    'read the new color from the palette
    PickNewColor = ActiveWorkbook.Colors(ColorIndexLast)
    'reset palette color to its original value
    ActiveWorkbook.Colors(ColorIndexLast) = myOrgColor
  Else
    '"Cancel" was pressed, palette wasn't changed
    'return old color (or xlNone if no color was passed to the function)
    PickNewColor = i_OldColor
  End If
End Function

'Converts a color to RGB values
Sub Color2RGB(ByVal i_Color As Long, _
              o_R As Integer, o_G As Integer, o_B As Integer)
  o_R = i_Color Mod 256
  i_Color = i_Color \ 256
  o_G = i_Color Mod 256
  i_Color = i_Color \ 256
  o_B = i_Color Mod 256
End Sub

Public Function GetContrastColor(lcolor As Long) As Long
'get contrasting color (black or light grey)
    Dim c As Long
    Dim R As Long
    Dim g As Long
    Dim B As Long
    Dim A As Double
'first translate color in RGB value
    c = lcolor
    R = c Mod 256
    g = c \ 256 Mod 256
    B = c \ 65536 Mod 256
'now define contrasting color
    A = 1 - (0.299 * R + 0.587 * g + 0.114 * B) / 255
    If A < 0.5 Then
        GetContrastColor = RGB(89, 89, 89) 'dark grey
    Else
        GetContrastColor = RGB(242, 242, 242) 'light grey
    End If
End Function

'
'Public Sub Click()
'Static test As Integer
'    Dim oButton As shape
'    'Dim v As Variant
'    Set oButton = ActiveSheet.Shapes(Application.Caller)
'    Run oButton.Parent.Name & "." & oButton.Name
'    'v = CallByName(oButton.Parent, oButton.Name, VbMethod)
'
'    test = test + 1
'    Debug.Print test
'End Sub
'
'
Attribute VB_Name = "modCompatibility"
Option Explicit
Option Private Module
Private Const DELIMITING_CHARACTER As String = "|fffd|"   'Chr(187)


Public Function CBool2(value As Variant) As Boolean
    On Error GoTo suberr
'    modStack.PushCallStack "modApp", "CBool2"

    Select Case TypeName(value)
        Case "String"
            If LCase(value) = "wahr" Then
                CBool2 = True
            Else
                CBool2 = CBool(value)
            End If
        Case Else:      CBool2 = CBool(value)
    End Select

subend:
 '   modStack.PopCallStack
    Exit Function
suberr:
    Resume subend
End Function


Public Function CDbl2(Expression As Variant) As Double
    Dim dResult As Double
    If ParseDecimal(Expression, dResult) Then CDbl2 = dResult
End Function


Public Function CStr2(Expression As Variant) As String
    CStr2 = CastVarToString(Expression)
End Function


Public Function CVar2(Expression As String) As Variant
    If IsObject(CastStringToVar(Expression)) Then
        Set CVar2 = CastStringToVar(Expression)
    Else
        CVar2 = CastStringToVar(Expression)
    End If
End Function


Public Property Get CastVarToString(value As Variant) As String
    
    If TypeName(value) = "Range" Then value = value.value
    
    If VarType(value) = vbString Then
        CastVarToString = value
        Exit Property
    End If
    If VarType(value) = vbEmpty Then
        CastVarToString = Empty
        Exit Property
    End If
    
    Dim val As Variant

    Select Case VarType(value)
        Case vbEmpty:       val = "vbNullString"
        Case vbObject:      val = "NULL"
        Case vbDate:        val = CLng(value)
        Case vbBoolean:     val = CLng(value)
        Case Else:          val = value
    End Select
    
    CastVarToString = CStr(VarType(value)) & DELIMITING_CHARACTER & CStr(val)

End Property

Public Property Get CastStringToVar(value As Variant) As Variant
    If InStr(value, DELIMITING_CHARACTER) = 0 Or TypeName(value) <> "String" Then
        CastStringToVar = value
        'legacy stuff and backwards compatibility
        If CastStringToVar = "" Then Exit Property
        If IsNumeric(value) Then
            CastStringToVar = CDbl(value)
            'we had problems with converting 0,2 and 0,06
            'these were incorrectly seen as dates
            'but as date can't have a , in the value
            'the next condition was added, to avoid these mistakes
            If (InStr(value, ",") > 0) Then
                Exit Property
            'also problems with conv ersion of "1.000" which is seen as date
            ElseIf (pointcount(CStr(value)) = 1) Then
                Exit Property
            End If
        End If
        If IsDate(value) Then CastStringToVar = CDate(value)
        Exit Property
    End If
    
    Dim iType As Long:      iType = Split(value, DELIMITING_CHARACTER)(0)
    Dim sText As String:    sText = Split(value, DELIMITING_CHARACTER)(1)
    
    Select Case iType
        Case vbEmpty:       CastStringToVar = ""
        Case vbObject:      Set CastStringToVar = Nothing
        Case vbDate:        CastStringToVar = Cast(CLng(sText), iType)
        Case vbBoolean:     CastStringToVar = Cast(CLng(sText), iType)
        Case Else:          CastStringToVar = Cast(sText, iType)
    End Select
    
'
'    If InStr(Value, DELIMITING_CHARACTER) = 0 Or TypeName(Value) <> "String" Then
'        CastStringToVar = Value
'        'legacy stuff and backwards compatibility
'        If CastStringToVar = "" Then Exit Property
'        If IsNumeric(Value) Then CastStringToVar = CDbl(Value)
'        If IsDate(Value) Then CastStringToVar = CDate(Value)
'        Exit Property
'    End If
'
'    Dim iType As Long:      iType = Split(Value, DELIMITING_CHARACTER)(0)
'    Dim sText As String:    sText = Split(Value, DELIMITING_CHARACTER)(1)
'
'    Select Case iType
'        Case vbEmpty:       CastStringToVar = ""
'        Case vbObject:      Set CastStringToVar = Nothing
'        Case vbDate:        CastStringToVar = Cast(CLng(sText), iType)
'        Case vbBoolean:     CastStringToVar = Cast(CLng(sText), iType)
'        Case Else:          CastStringToVar = Cast(sText, iType)
'    End Select
'
End Property

Public Function pointcount(s As String) As Integer
    pointcount = Len(s) - Len(Replace(s, ".", ""))
End Function

Public Function Cast(value As Variant, VarType As VbVarType) As Variant
    Select Case VarType
        Case vbEmpty:           Cast = Empty           '0          Empty (uninitialized)
        Case vbNull:            Cast = Null            '1          Null (no valid data)
        Case vbInteger:         Cast = CInt(value)     '2          Integer
        Case vbLong:            Cast = CLng(value)     '3          Long integer
        Case vbSingle:          Cast = CSng(value)     '4          Single-precision floating-point number
        Case vbDouble:          Cast = CDbl2(value)    '5          Double-precision floating-point number
        Case vbCurrency:        Cast = CCur(value)     '6          Currency value
        Case vbDate:            Cast = CDate(value)    '7          Date value
        Case vbString:          Cast = CStr(value)     '8          String
        Case vbObject:          Cast = Nothing         '9          Object
        Case vbError:           Cast = 9999            '10         Error value
        Case vbBoolean:         Cast = CBool2(value)   '11         Boolean value
        Case vbVariant:         Cast = CVar(value)     '12         Variant (used only with arrays of variants)
        Case vbDataObject:      Cast = Nothing         '13         Data access object
        Case vbDecimal:         Cast = CDec(value)     '14         Decimal value
        Case vbByte:            Cast = CByte(value)    '17         Byte value
        Case vbUserDefinedType: 'Cast =                '36         Variants that contain user-defined types
        Case vbArray:           'Cast =                '8192       Array
    End Select
End Function

Public Function TranslateENotation(sDecimalStr As String) As String
'we need something more intelligent than this:
'sDecimalStr = Format(sDecimalStr, "0.0000000000000")
'because of regional problems
'eg: in german settings : "5.37995965030262E-02" will be formatted wrongly by simply using format
'in english a notation with , will be formatted wrong also
    Dim bOutput As Boolean
    Dim lFirstNanPos As Long
    Dim lLastNanPos As Long
    Dim sFirstNan As String
    Dim sLastNan As String
    Dim lPos As Long
    Dim sFix As String
    Dim sFrac As String
    Dim bNeg As Boolean
    Dim soutput As String
    Dim doutput As Double
    Dim sE As String
    Dim iepos As Integer
    
    iepos = InStr(sDecimalStr, "E")
    sE = Right(sDecimalStr, Len(sDecimalStr) - (iepos - 1))
    sDecimalStr = Left(sDecimalStr, Len(sDecimalStr) - Len(sE))

    For lPos = 1 To Len(sDecimalStr)
        Select Case Mid(sDecimalStr, lPos, 1)
            Case "0" To "9"
            Case Else
                If (lFirstNanPos = 0) Then lFirstNanPos = lPos
                If (lPos > lLastNanPos) Then lLastNanPos = lPos
        End Select
    Next
    
    If (lFirstNanPos = 0) And (lLastNanPos = 0) Then
        ' just digits
        soutput = sDecimalStr
        bOutput = True
    ElseIf (lFirstNanPos = lLastNanPos) Then
        ' one separator --> decimal separator
        sFix = Left(sDecimalStr, lFirstNanPos - 1)
        sFrac = Mid(sDecimalStr, lFirstNanPos + 1)
    Else
        sFirstNan = Mid(sDecimalStr, lFirstNanPos, 1)
        sLastNan = Mid(sDecimalStr, lLastNanPos, 1)
        If StrComp(sFirstNan, sLastNan, VbCompareMethod.vbBinaryCompare) = 0 Then
            ' possibly all thousands separators
            soutput = Replace(sDecimalStr, sFirstNan, "", , , VbCompareMethod.vbBinaryCompare)
            bOutput = True
        Else
            ' first NAN probably thousands separator,
            ' last NAN probably decimal separator
            sFix = Replace(Left(sDecimalStr, lLastNanPos - 1), sFirstNan, "", , , VbCompareMethod.vbBinaryCompare)
            sFrac = Mid(sDecimalStr, lLastNanPos + 1)
        End If
    End If
    
    If Not bOutput Then
        ' put fix and frac together - Val always expects a dot as the decimal separator
        soutput = Trim(CStr(val(sFix & "." & sFrac)))
        bOutput = True
    End If

    TranslateENotation = Format(soutput + sE, "0.0000000000000")

End Function
Public Function ParseDecimal(ByVal sDecimalStr As String, ByRef fOutput As Double) As Boolean

    ' TheProjectGroup\JohannesF - 2010.01.07 (2.22)

    Dim bOutput As Boolean
    Dim lFirstNanPos As Long
    Dim lLastNanPos As Long
    Dim sFirstNan As String
    Dim sLastNan As String
    Dim lPos As Long
    Dim sFix As String
    Dim sFrac As String
    Dim bNeg As Boolean
    
    On Error GoTo Function_Error

    bOutput = False
    sDecimalStr = Trim(sDecimalStr)
    
    ' clip trailing non-digits to remove currency
    Do
        If Len(sDecimalStr) > 0 Then
            If Not IsNumeric(Right(sDecimalStr, 1)) Then
                sDecimalStr = Left(sDecimalStr, Len(sDecimalStr) - 1)
            Else
                Exit Do
            End If
        Else
            Exit Do
        End If
    Loop
    
    'clear 'E-0x'
    If InStr(sDecimalStr, "E") > 0 Then
'        sDecimalStr = Format(sDecimalStr, "0.0000000000000")
        sDecimalStr = TranslateENotation(sDecimalStr)
    End If
    
    If StrComp(Left(sDecimalStr, 1), "-", VbCompareMethod.vbBinaryCompare) = 0 Then
        sDecimalStr = Mid(sDecimalStr, 2)
        bNeg = True
    End If
    
    For lPos = 1 To Len(sDecimalStr)
  
        Select Case Mid(sDecimalStr, lPos, 1)
  
            Case "0" To "9"
      
            Case Else
                If (lFirstNanPos = 0) Then lFirstNanPos = lPos
                If (lPos > lLastNanPos) Then lLastNanPos = lPos
          
        End Select
    Next
    
    If (lFirstNanPos = 0) And (lLastNanPos = 0) Then
  
        ' just digits
        fOutput = val(sDecimalStr)
        bOutput = True
  
    ElseIf (lFirstNanPos = lLastNanPos) Then
  
        ' one separator --> decimal separator
        sFix = Left(sDecimalStr, lFirstNanPos - 1)
        sFrac = Mid(sDecimalStr, lFirstNanPos + 1)
  
    Else
        sFirstNan = Mid(sDecimalStr, lFirstNanPos, 1)
        sLastNan = Mid(sDecimalStr, lLastNanPos, 1)
        If StrComp(sFirstNan, sLastNan, VbCompareMethod.vbBinaryCompare) = 0 Then
  
            ' possibly all thousands separators
            fOutput = val(Replace(sDecimalStr, sFirstNan, "", , , VbCompareMethod.vbBinaryCompare))
            bOutput = True
  
        Else
      
            ' first NAN probably thousands separator,
            ' last NAN probably decimal separator
            sFix = Replace(Left(sDecimalStr, lLastNanPos - 1), sFirstNan, "", , , VbCompareMethod.vbBinaryCompare)
            sFrac = Mid(sDecimalStr, lLastNanPos + 1)
  
        End If
    End If
    
    If Not bOutput Then
        ' put fix and frac together - Val always expects a dot as the decimal separator
        fOutput = val(sFix & "." & sFrac)
        bOutput = True
    End If
    
    If bNeg Then fOutput = -fOutput

Function_End:
    On Error Resume Next
    ParseDecimal = bOutput
    Exit Function

Function_Error:
    Resume Function_End
    Resume

End Function




Public Function CollectionToArray(c As Collection) As Variant()
    Dim A() As Variant: ReDim A(0 To c.Count - 1)
    Dim i As Integer
    For i = 1 To c.Count
        A(i - 1) = CDbl(Strings.Format(c.Item(i), "#.000"))
    Next
    CollectionToArray = A
End Function

Public Function ArrayToCollection(v As Variant) As Collection
    Dim i As Long
    Dim c As New Collection
    For i = 0 To UBound(v)
        c.Add v(i)
    Next
    Set ArrayToCollection = c
End Function

Public Function RGBValues(Color As Long) As Collection
    Dim R, g, B As Long
    Dim c As New Collection
    
    R = Color Mod 256
    Color = Int(Color / 256)
    g = Color Mod 256
    B = Int(Color / 256)
    
    c.Add R, "r"
    c.Add g, "g"
    c.Add B, "b"
    Set RGBValues = c
End Function


Public Function ValidateText(Text As String) As String
    Dim A$, B$, c$, i As Integer
    A$ = Text
    For i = 1 To Len(A$)
        B$ = Mid(A$, i, 1)
        If B$ Like "[A-Z,a-z,0-9]" Then
            c$ = c$ & B$
        End If
    Next i
    ValidateText = c$
End Function


Public Function ValidateLng(Text As String) As Long
    On Error Resume Next
    Dim A$, B$, c$, i As Integer
    A$ = Text
    For i = 1 To Len(A$)
        B$ = Mid(A$, i, 1)
        If B$ Like "[0-9]" Then
            c$ = c$ & B$
        End If
    Next i
    ValidateLng = CLng(c$)
End Function

Public Function ValidateString(Text As String, Optional Validation As String = "[A-Z,a-z,0-9]") As String
    Dim A$, B$, c$, i As Integer
    A$ = Text
    For i = 1 To Len(A$)
        B$ = Mid(A$, i, 1)
        If B$ Like Validation Then
            c$ = c$ & B$
        End If
    Next i
    ValidateString = c$
End Function

Attribute VB_Name = "modConst"
'---------------------------------------------------------------------------------------
' Module    : modConst
' Author    : wm
' Date      : 15.03.2011
' Purpose   : central module for all constants, global vars and defined triggers
'---------------------------------------------------------------------------------------

Option Explicit
Option Private Module

'---------------------------------------------------------------------------------------
' here go all the global constants
'---------------------------------------------------------------------------------------

'enable global logging
Public Const LOGGING_ENABLED As Boolean = False

'should all sheets be force-protected whenever a user action stops?
Public Const SAFE_MODE As Boolean = False

'reset EventHandlers at the end of each procedure call?
Public Const RESET_EVENT_HANDLERS As Boolean = True

'because MS is too stupid to define constants...
Public Const xlColumnWidths = 8
Public Const xlPasteColumnWidths = 8

'storage string for config sheets
Public Const CONFIG_SHEETS As String = "WBS2|WBS3|StatusHist|Loc|Config|WPInfo|WPDetails|MeetingDetails|TableTest|ReleaseNotes"

'Admin PW
Public Const ADMIN_PW = "Start123"

Public Const APP_NAME As String = "TPG Project Handbook"
Public Const APP_NAME_SHORT As String = "PHB"

'crypt key
Public Const CODE_KEY = "krSOFeaQWPHjwAKSvmFjIvbIWheFsHdyKcALyyVPBmIOqwhBQVNljKoVRACMvdghiewAVXhuJmFBKjkIOZ"
                       
Public oPlan As TPGPlan
Public EventBroker As TPGEventBroker
Public MV As TPGMultiValueDDL

'---------------------------------------------------------------------------------------
' here go all the global variables
'---------------------------------------------------------------------------------------

Public bNoScrollTop As Boolean
'use in workbook sheetactivate: when true then no scrolltop executed
'was needed for contract sheet when team.setnames executed....

Public bNoNormalProtectActionsRequired As Boolean
'we use this variable to indicate with sheetactivate and inactivate
'if sheet has to be protected or not
'we set this var to TRUE when clearphb to avoid unnecesary (un)protect actions

Public sActiveLicense As String
'this variable is set during workbook.open event, so that it is always available
'it contains the lettercode of the active License (F,P;M,K,C)  (C=KISS corporate)
'when needing to check for current license in code then check agains this variable (performance!!!)

'control events
Public bEventDisableWorksheetChange As Boolean
Public bEventDisableWorksheetActivate As Boolean
Public bEventDisableWorksheetSelectionChange As Boolean
Public bEventDisableWorkbookSheetActivate As Boolean

'custom context menu enabled?
Public bCustomContextMenuActive As Boolean

'no warnings on import?
Public bDisableAllWarnings As Boolean

Public Property Get Demo() As Boolean:      Demo = GetCustomProperty(Config_Lic, "Demo") = "YES":               End Property

'---------------------------------------------------------------------------------------
' MZTools Template
'---------------------------------------------------------------------------------------
'
'    On Error GoTo SubErr
'    modStack.PushCallStack "{MODULE_NAME}", "{PROCEDURE_NAME}"
'
'    {PROCEDURE_BODY}
'
'SubEnd:
'    modStack.PopCallStack
'    Exit {PROCEDURE_TYPE}
'SubErr:
'    AppErrMsg "{MODULE_NAME}.{PROCEDURE_NAME} error:"
'    Resume SubEnd
'
'




Attribute VB_Name = "modContextMenu"
Option Explicit
Option Private Module

Public Enum Menutype
    TaskContext = 0
    DateContext = 1
    WBSContext = 2
    FaceIDs
End Enum

'Private sInsert As String
'Private sDelete As String
'Private sMilestone As String
'Private sIndent As String
'Private sOutdent As String
'Private sCut As String
'Private sPaste As String
'
''set on plan.activate
'Public Sub SetLocStrings()
'    sInsert = appGetLOCText("cmdInsertRow")
'    sDelete = appGetLOCText("cmdDeleteRow")
'    sMilestone = appGetLOCText("cmdMilestone")
'    sIndent = appGetLOCText("cmdIndentTask")
'    sOutdent = appGetLOCText("cmdOutdentTask")
'    sCut = appGetLOCText("cmdCutTask")
'    sPaste = appGetLOCText("cmdInsertCutTask")
'End Sub


Public Sub BuildCustomMenu(Menutype As Menutype)

     Select Case Menutype
        Case TaskContext
            BuildTaskContext
        Case DateContext
            BuildDateContext
        Case WBSContext
            BuildWBSContext
        Case FaceIDs
            BuildPictureContext
        Case Else
            RestoreDefaultMenu
    End Select
    
End Sub
Public Sub BuildMeetingAgendaContext(bSubPoint As Boolean, Optional bNoSubMain As Boolean = False)
    Dim ctrl As CommandBarControl
    DeleteDefaultMenu
    If Not bNoSubMain Then
        If bSubPoint Then
            Set ctrl = Application.CommandBars("Cell").Controls.Add
                ctrl.Caption = appGetLOCText("cmdMakeSubPoint")
                ctrl.OnAction = "Meeting.UserAction_MakeSubPoint"
                ctrl.FaceId = 39
            Else
            Set ctrl = Application.CommandBars("Cell").Controls.Add
                ctrl.Caption = appGetLOCText("cmdMakeMainPoint")
                ctrl.OnAction = "Meeting.UserAction_MakeMainPoint"
                ctrl.FaceId = 41
        End If
    End If
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdShowHideTimes")
        ctrl.OnAction = "Meeting.ShowHideTimes"
        ctrl.FaceId = 33
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdInsertRow")
        ctrl.OnAction = "ContextcmdInsert_Click"
        ctrl.FaceId = 296 '137
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdDeleteRow")
        ctrl.OnAction = "ContextcmdDelete_Click"
        ctrl.FaceId = 293 '138
End Sub
 
Public Sub ContextcmdInsert_Click()
ActiveSheet.cmdInsert_Click
End Sub
Public Sub ContextcmdDelete_Click()
ActiveSheet.cmdDelete_Click
End Sub
 
Public Sub ContextcmdSortDesc_Click()
ActiveSheet.cmdSortDesc_Click
End Sub

Public Sub ContextcmdSortAsc_Click()
ActiveSheet.cmdSortAsc_Click
End Sub

Public Sub ContextcmdAutoFilter_Click()
ActiveSheet.cmdAutoFilter_Click
End Sub
 
Public Sub BuildTableContext(bWithFilter As Boolean, bWithSort As Boolean)

    Dim ctrl As CommandBarControl
    DeleteDefaultMenu
    
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdInsertRow")
        ctrl.OnAction = "ContextcmdInsert_Click"
        ctrl.FaceId = 296 '137
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdDeleteRow")
        ctrl.OnAction = "ContextcmdDelete_Click"
        ctrl.FaceId = 293 '138
    If bWithFilter Then
        Set ctrl = Application.CommandBars("Cell").Controls.Add
            ctrl.Caption = appGetLOCText("cmdAutofilter")
            ctrl.OnAction = "ContextcmdAutoFilter_Click"
            ctrl.FaceId = 640
    End If
    If bWithSort Then
        Set ctrl = Application.CommandBars("Cell").Controls.Add
            ctrl.Caption = appGetLOCText("cmdSortAsc")
            ctrl.OnAction = "ContextcmdSortAsc_Click"
            ctrl.FaceId = 210
        Set ctrl = Application.CommandBars("Cell").Controls.Add
            ctrl.Caption = appGetLOCText("cmdSortDesc")
            ctrl.OnAction = "ContextcmdSortDesc_Click"
            ctrl.FaceId = 211
    End If
        
End Sub
 
 
Public Sub BuildTaskContext(Optional bWithTaskCopy As Boolean = True)

    Dim ctrl As CommandBarControl
    DeleteDefaultMenu
    
'    Dim i As Integer
'    For i = 0 To 999
'        Set ctrl = Application.CommandBars("Cell").Controls.Add
'            ctrl.Caption = Strings.Format(i, "000")
'            ctrl.FaceId = i
'    Next
'    Exit Sub
    
    If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
        Set ctrl = Application.CommandBars("Cell").Controls.Add
            ctrl.Caption = appGetLOCText("cmdJumpToWP")
            ctrl.OnAction = "Plan.cmdJumpToWP_Click"
            ctrl.FaceId = 136
    End If
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdMilestone")
        ctrl.OnAction = "Plan.UserAction_SetMilestone"
        ctrl.FaceId = 161
        
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdInsertRow")
        ctrl.OnAction = "Plan.UserAction_CreateNewTask"
        ctrl.FaceId = 296 '293 '137
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdDeleteRow")
        ctrl.OnAction = "Plan.UserAction_DeleteTask"
        ctrl.FaceId = 293 '296 '138
        
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdIndentTask")
        ctrl.OnAction = "Plan.UserAction_IndentTask"
        ctrl.FaceId = 39
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdOutdentTask")
        ctrl.OnAction = "Plan.UserAction_OutdentTask"
        ctrl.FaceId = 41
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdCutTask")
        ctrl.OnAction = "Plan.CutWP_Click"
        ctrl.FaceId = 21
    If bWithTaskCopy Then
        Set ctrl = Application.CommandBars("Cell").Controls.Add
            ctrl.Caption = appGetLOCText("cmdCopyTask")
            ctrl.OnAction = "Plan.CopyWP_Click"
            ctrl.FaceId = 19
    End If
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdInsertCutTask")
        ctrl.OnAction = "Plan.InsertCutWP_Click"
        ctrl.FaceId = 22
        
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdPlus1Day")
        ctrl.OnAction = "Plan.cmdPlus1Day_Click"
        ctrl.FaceId = 156
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdPlus1Week")
        ctrl.OnAction = "Plan.cmdPlus1Week_Click"
        ctrl.FaceId = 157
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdMinus1Day")
        ctrl.OnAction = "Plan.cmdMinus1Day_Click"
        ctrl.FaceId = 155
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdMinus1Week")
        ctrl.OnAction = "Plan.cmdMinus1Week_Click"
        ctrl.FaceId = 154
        
   Application.CommandBars("Cell").Controls(3).BeginGroup = True
   Application.CommandBars("Cell").Controls(5).BeginGroup = True
   Application.CommandBars("Cell").Controls(7).BeginGroup = True
    If bWithTaskCopy Then
       Application.CommandBars("Cell").Controls(10).BeginGroup = True
    Else
       Application.CommandBars("Cell").Controls(9).BeginGroup = True
    End If
   
End Sub

Public Sub BuildTaskDateContext()

    Dim ctrl As CommandBarControl
    DeleteDefaultMenu
        
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdPlus1Day")
        ctrl.OnAction = "Plan.cmdPlus1Day_Click"
        ctrl.FaceId = 156
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdPlus1Week")
        ctrl.OnAction = "Plan.cmdPlus1Week_Click"
        ctrl.FaceId = 157
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdMinus1Day")
        ctrl.OnAction = "Plan.cmdMinus1Day_Click"
        ctrl.FaceId = 155
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdMinus1Week")
        ctrl.OnAction = "Plan.cmdMinus1Week_Click"
        ctrl.FaceId = 154
        
End Sub


Public Sub BuildGroupTaskContext()

    Dim ctrl As CommandBarControl
    DeleteDefaultMenu
        
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdIndentTasks")
        ctrl.OnAction = "Plan.BlockIndent"
        ctrl.FaceId = 39
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdOutdentTasks")
        ctrl.OnAction = "Plan.BlockOutdent"
        ctrl.FaceId = 41
End Sub

Public Sub BuildMTAContext()

    Dim ctrl As CommandBarControl
    DeleteDefaultMenu
    
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cchangecolor")
        ctrl.OnAction = "modContextMenu.MTAClick"
        ctrl.FaceId = 1051
End Sub

Public Sub MTAClick()
    If selection.Cells.Count > 1 Then Exit Sub
    MTA.setMSTColor selection

End Sub

Private Sub BuildWBSContext()

    Dim rCell As Range
    Dim lcolor As Long
    Dim ctrl As CommandBarControl
    DeleteDefaultMenu
    
    For Each rCell In Config.Range("Config.Colors")
        Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = rCell.value
        lcolor = rCell.Interior.Color
        ctrl.OnAction = "'WBS.SetColor " & lcolor & "'"
    Next
    
End Sub


Private Sub BuildDateContext()

    Dim ctrl As CommandBarControl
    DeleteDefaultMenu
    
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdPlus1Day")
        ctrl.OnAction = "Plan.cmdPlus1Day_Click"
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdPlus1Week")
        ctrl.OnAction = "Plan.cmdPlus1Week_Click"
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdMinus1Day")
        ctrl.OnAction = "Plan.cmdMinus1Day_Click"
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdMinus1Week")
        ctrl.OnAction = "Plan.cmdMinus1Week_Click"
        
   Application.CommandBars("Cell").Controls(3).BeginGroup = True
   
End Sub

Private Sub DeleteDefaultMenu()
     
    Dim ctrl As CommandBarControl
    For Each ctrl In Application.CommandBars("Cell").Controls
        ctrl.Delete
    Next
     
End Sub


Public Sub RestoreDefaultMenu()
    Application.CommandBars("Cell").reset
End Sub


Private Sub BuildTestContext()

    Dim ctrl As CommandBarControl
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "modContextMenu", "BuildTestContext"

    DeleteDefaultMenu
    i = 25
    
    Set ctrl = Application.CommandBars("Cell").Controls.Add
        ctrl.Caption = appGetLOCText("cmdJumpToWP")
        ctrl.OnAction = "Click"
        
    Application.CommandBars(i).Height = 50 ' .Controls.Count           'Workbook Tabs
    Debug.Print Application.CommandBars(i).Controls(1).Caption
    Debug.Print Application.CommandBars(i).Height
    
    
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modContextMenu.BuildTestContext error:"
    Resume subend
   
End Sub


Private Sub DeleteWBMenu()
     
    Dim ctrl As CommandBarControl
    For Each ctrl In Application.CommandBars(13).Controls
        ctrl.Delete
    Next
     
End Sub


Private Sub PrintCMNames()
    Dim i As Integer
    Dim j As Integer
    Dim ctrl As CommandBarControl
    On Error Resume Next
    
    For i = 0 To Application.CommandBars.Count
        Set ctrl = Application.CommandBars(i).Controls.Add
        ctrl.Caption = "!!!!!! " & i
        ctrl.OnAction = "Plan.cmdJumpToWP_Click"
        
'        For j = 0 To Application.CommandBars(i).Controls.Count
'
'            If InStr(Application.CommandBars(i).Controls(j).Caption, "Change Picture") > 0 Then _
'                Debug.Print Strings.Format(i, "000") & ": " & Application.CommandBars(i).Name
'        Next
        Application.CommandBars(i).reset
    Next

End Sub

Private Sub BuildPictureContext()

    Dim ctrl As CommandBarControl
    Dim i As Integer
    On Error GoTo suberr
    modStack.PushCallStack "modContextMenu", "BuildPictureContext"

    DeleteDefaultMenu
    Dim oMask As stdole.IPictureDisp
    
    
    'Dim r As Range
    
    'Set r = Cover.Cells(2, 2)
    'Debug.Print r.DisplayFormat.
    'Set oMask = Config.Shapes("PMCCLogo")  'r.d.DisplayFormat 'r.CopyPicture(xlScreen, xlPicture)
    err.Raise 7777
    
    For i = 0 To 99
    
        Set ctrl = Application.CommandBars("Cell").Controls.Add
            ctrl.Caption = Strings.Format(CStr(i), "000")
            ctrl.OnAction = "Plan.cmdJumpToWP_Click"
            'ctrl.FaceId = i
            'ctrl.Mask = oMask
            'ctrl.ColorIndex = 4
            '[color=darkgreen]
        
    Next
  'Application.CommandBars("Cell").reset
  
  
'    Dim oCB As Office.CommandBar
'    Dim oCBBTools As Office.CommandBarPopup
'    Dim oPic As stdole.IPictureDisp
'    Dim oMask As stdole.IPictureDisp
'    '<LOAD THE PICTURE AND MASK OBJECTS>
'    Set oPic = LoadPicture("C:\Cat.bmp")
'    Set oMask = LoadPicture("C:\CatMask.bmp")
'    Set oCB = Application.CommandBars("Menu Bar")
'    Set oCBBTools = oCB.Controls("&Tools")
'    [color=darkgreen] '<ADD A NEW BUTTON>[/color]
'    Set oCBBCustom = oCBBTools.Controls.Add(msoControlButton, 1, , , True) '<PLACE OUR CUSTOM ITEM AT THE BOTTOM>
'    With oCBBCustom                                                        '<POSITION (0 BASED)>
'        .Caption = "Meow!"
'        .BeginGroup = True '<ADD A MENU SEPARATOR>
'        .Enabled = True
'        .Picture = oPic  '<OFFICE 2000 - 2007>
'        .Mask = oMask '<OFFICE 2002 - 2007>
'        .Visible = True
'    End With
    
    'oCB.Reset '<TO RESET THE COMMANDBAR>

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modContextMenu.BuildPictureContext error:"
    Resume subend
End Sub

Private Sub DeleteMenu(MenuNo As Integer)
     
    Dim ctrl As CommandBarControl
    On Error Resume Next
    For Each ctrl In Application.CommandBars(MenuNo).Controls
        ctrl.Delete
    Next
     
End Sub


Public Sub RestoreMenu(MenuNo As Integer)
    Application.CommandBars(MenuNo).reset
End Sub
Attribute VB_Name = "modCopyPaste"
Const m_sPasteProcedure_c As String = "PasteSpecial"
Const m_sUbndoProcedure_c As String = "UndoPasteSpecial"
Const m_Paste_Tag = "My_Paste_Options"
Const lIDPaste_c As Long = 22

Public Sub LockInterface()
    With Excel.Application
        .EnableEvents = False
        .ScreenUpdating = False
        '.Cursor = xlWait
        .Cursor = xlDefault
        .EnableCancelKey = xlErrorHandler
    End With
End Sub
Public Sub UnlockInterface()
    With Excel.Application
        .EnableEvents = True
        .ScreenUpdating = True
        .Cursor = xlDefault
        .EnableCancelKey = xlInterrupt
    End With
End Sub

'run on Workbook activate
Public Sub ForcePasteSpecial()
On Error GoTo Err_Hnd

    'LockInterface
    Excel.Application.OnKey "^v", m_sPasteProcedure_c
    Excel.Application.OnKey "+{INSERT}", m_sPasteProcedure_c
    'Excel.Application.OnKey "^x", m_sCutWarningProcedure_c
    
    ReplacePasteButtons

Exit_Proc:
    On Error Resume Next
   ' UnlockInterface
    Exit Sub
Err_Hnd:
End Sub

'run on workbook_close, workbook_deactivate
Public Sub ReleasePasteControl()
    On Error GoTo Err_Hnd
    
    Excel.Application.OnKey "^v"
    Excel.Application.OnKey "+{INSERT}"
    'Excel.Application.OnKey "^x"
    
    RestorePasteButtons

Exit_Proc:

    On Error Resume Next
    UnlockInterface
    Exit Sub
Err_Hnd:
End Sub

Private Sub RestorePasteButtons()
    Application.CommandBars("Cell").reset
    Application.CommandBars("Row").reset
    Application.CommandBars("Column").reset
End Sub

Private Sub ReplacePasteButtons()

    Dim oPasteBtns As Office.CommandBarControls
    Dim oPasteBtn As Office.CommandBarButton
    Dim oNewBtn As Office.CommandBarButton

    Set oPasteBtns = Excel.Application.CommandBars.FindControls(id:=lIDPaste_c)
    For Each oPasteBtn In oPasteBtns
        Set oNewBtn = oPasteBtn.Parent.Controls.Add(msoControlButton, Before:=oPasteBtn.index, Temporary:=True)
        oNewBtn.FaceId = lIDPaste_c
        oNewBtn.Caption = oPasteBtn.Caption
        oNewBtn.TooltipText = oPasteBtn.TooltipText
        oNewBtn.Style = oPasteBtn.Style
        oNewBtn.BeginGroup = oPasteBtn.BeginGroup
        oNewBtn.Tag = m_Paste_Tag
        oNewBtn.OnAction = m_sPasteProcedure_c
        oPasteBtn.visible = False
    Next
    
    For Each oPasteBtn In oPasteBtns
        If oPasteBtn.Tag <> m_Paste_Tag Then
            oPasteBtn.Delete
        End If
    Next

End Sub

Private Sub PasteSpecial()
'new code for pasting
Dim pH As New TPGTokenizer
Dim pV As New TPGTokenizer
Dim content As String
Dim h As Integer, v As Integer
Dim hCount As Integer
Dim nextHeight As Integer


If Excel.ActiveWorkbook Is Excel.ThisWorkbook Then
    
    content = GetTextFromClipboard
    
    If Len(content) > 0 Then
        pV.Delimiter = vbCrLf
        pV.FromStringNoBlanks content
        
        pH.Delimiter = vbTab
'        pH.FromStringNoBlanks pV(1)

'        hCount = pH.Count
    
'        If pV.Count - 1 < 2 And pH.Count < 2 Then
'            'single paste
'            Excel.Selection.PasteSpecial xlPasteValues, xlPasteSpecialOperationNone, True, False
'            Excel.Application.OnUndo "&Undo Paste", m_sUbndoProcedure_c
'        Else
            nextHeight = 0
            For v = 1 To pV.Count
                pH.FromStringNoBlanks pV(v)
                nextHeight = CopyToRange(pH.ToCollection, ActiveCell.offset(v - 1 + nextHeight, 0), True)
            Next
     '   End If
        
        Application.CutCopyMode = False
    End If
End If
End Sub

Public Function CopyToRange(Tokens As Collection, FirstCell As Range, Optional Horizontal As Boolean = False, _
                            Optional bShowErrorMessage As Boolean = True) As Integer ', Optional NoDirection As Boolean = False)

    Dim rCell As Range
    Dim i As Integer
    Dim j As Integer
    Dim numCells As Integer
    Dim offH As Integer
    Dim offV As Integer
    
    Set rCell = FirstCell.Cells(1, 1)
    
    'get numcells - return for next iteration if cell is merge
    If rCell.MergeCells Then
        If Horizontal Then
            numCells = rCell.MergeArea.rows.Count
        Else
            numCells = rCell.MergeArea.Columns.Count
        End If
    Else
        numCells = 1
    End If
    
    j = 1
    For i = 1 To Tokens.Count
    
        If Horizontal Then
            offH = j
            offV = 1
        Else
            offH = 1
            offV = j
        End If
        
        Set rCell = rCell.Cells(offV, offH)
        
        If Not rCell.locked And Not rCell.EntireColumn.Hidden And Not rCell.EntireRow.Hidden Then
            If IsNumeric(Tokens(i)) Then
                rCell.value = CDbl(Tokens(i))
            Else
                rCell.value = Tokens(i)
            End If
            
            
        Else
            If bShowErrorMessage And (Len(rCell) > 0 And Len(Tokens(i)) > 0) Then MsgBox "Cell : " & Replace(rCell.Address, "$", "") & " is locked for editing."
        End If

        If Horizontal Then
            j = 1 + rCell.MergeArea.Columns.Count
        Else
            j = 1 + rCell.MergeArea.rows.Count
        End If

    Next
    
End Function

Function GetTextFromClipboard()
    'No Library Reference required.
    
    Dim objClipBoard        As Object
    Dim lngCounter          As Long

    Set objClipBoard = CreateObject("new:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
    objClipBoard.GetFromClipboard

    For lngCounter = 1 To UBound(Application.ClipboardFormats)
        If Application.ClipboardFormats(lngCounter) = xlClipboardFormatText Then
            GetTextFromClipboard = objClipBoard.GetText(lngCounter)
        End If
    Next lngCounter

    Set objClipBoard = Nothing

End Function



Attribute VB_Name = "modEnum"
Option Explicit

Public Enum phbColorType
    phbColorBlack = 0                   'RGB(  0,  0,  0)
    phbColorGreyDark = 8421504          'RGB(128,128,128)
    phbColorGreyMedium = 12895428       'RGB(196,196,196)
    phbColorGreyLight = 15921906        'RGB(242,242,242)
    phbColorWhite = 16777215            'RGB(255,255,255)
    phbColorBlueNavy = 7602944          'RGB(  0,  3,116)
    phbColorBlueDark = 16711680         'RGB(  0,  0,255)
    phbColorBlueMedium = 16737792       'RGB(  0,102,255)
    phbColorBlueLight = 15849925        'RGB(197,217,241)
    phbColorRed = 255                   'RGB(255,  0,  0)
    phbColorYellow = 65535              'RGB(255,255,  0)
    phbColorGreen = 5287936             'RGB(  0,176, 80)
    phbColorOrange = 49407              'RGB(255,192,  0)
    phbColorTPG = 13209                 'RGB(153, 51,  0)
End Enum

Public Enum phbLocalization
    phbLocalizationEN = 1
    phbLocalizationDE
'    phbLocalizationFR
'    phbLocalizationES
'    phbLocalizationIT
'    phbLocalizationCN
'    phbLocalizationRU
End Enum

Public Enum phbLocalizationItem
    phbLocalizationItemAny = 0
    phbLocalizationItemState
    phbLocalizationItemRole
    phbLocalizationItemSheet
End Enum

Public Enum phbWorkCostCategory
    phbBase = 1
    phbChange
    phbActual
    phbRemain
    phbForecast
End Enum

Public Enum phbWorkCostType
    phbWork = 0
    phbCost
    phbWorkCost
End Enum

Public Enum phbResourceUnits
    phbManHours = 0
    phbManDays
End Enum



Function LongToRGB(Color As Long) As Collection
    Dim c As New Collection
    c.Add CByte(Color And 255), "R"
    c.Add CByte(Color \ 256 And 255), "G"
    c.Add CByte(Color \ 256 \ 256 And 255), "B"
    Set LongToRGB = c
End Function


'
'Function LongToRGB(Color As Long) As Collection
'
'    Dim c As New Collection
'    Dim sHex As String: sHex = String(6 - Len(Hex(Color)), "0") & Hex(Color)
'
'    c.Add CByte(val("&H" & Mid(sHex, 5, 2))), "R"
'    c.Add CByte(val("&H" & Mid(sHex, 3, 2))), "G"
'    c.Add CByte(val("&H" & Mid(sHex, 1, 2))), "B"
'
'    Set LongToRGB = c
'
'End Function
'
'Function RGBCon(Color As Long) As Variant
'
'    Dim sHex As String: sHex = Hex(Color)
'    While Len(sHex) < 6
'        sHex = "0" & sHex
'    Wend
'
'    Dim r As Byte:  r = val("&H" & Mid(sHex, 5, 2))
'    Dim g As Byte:  g = val("&H" & Mid(sHex, 3, 2))
'    Dim b As Byte:  b = val("&H" & Mid(sHex, 1, 2))
'
'    RGBCon = Array(r, g, b)
'
'End Function

'
'Public Function UnHex(sHex As String) As Long
'    UnHex = val("&H" & sHex)
'End Function

Attribute VB_Name = "modFunctions"
Option Explicit

'---------------------------------------------------------------------------------------
' AInStr
'
' @date     28.01.2011
' @author   wm
' @version  1.0
' @param    TextToSearchFor     text to search for
' @param    TextToSearchIn      text to search in
' @param    [TextSeperator]     text seperator used in TextToSearchIn
' @return   Boolean             true if text was found, false if not
'---------------------------------------------------------------------------------------
'
Public Function AInStr(TextToSearchFor As String, TextToSearchIn As String, Optional TextSeperator As String = "|") As Boolean
    Dim aTokens As Variant
    Dim bfound As Boolean
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "modFunctions", "AInStr"

    aTokens = Split(TextToSearchIn, TextSeperator)
    For i = 0 To UBound(aTokens)
        If CStr(aTokens(i)) = TextToSearchFor Then bfound = True
    Next
    AInStr = bfound

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modFunctions.AInStr error:"
    Resume subend
End Function


Public Sub SmoothColoring(Optional red As Integer = 0, _
                          Optional green As Integer = 0, _
                          Optional blue As Integer = 0, _
                          Optional redinc As Integer = 0, _
                          Optional greeninc As Integer = 0, _
                          Optional blueinc As Integer = 0, _
                          Optional PrintToCell As Boolean = False, _
                          Optional JumpToZero As Boolean = False)
    
    'SmoothColoring 225,250,225,-25,-10,-25
    Dim rCell As Range
    For Each rCell In selection
        rCell.Interior.Color = RGB(red, green, blue)
        If PrintToCell Then rCell.value = red & ";" & green & ";" & blue
        If JumpToZero Then
            Select Case red + redinc
                Case Is > 255
                    red = (red + redinc) - 255
                Case Is < 0
                    red = 255 - (red + redinc)
                Case Else
                    red = (red + redinc)
            End Select
            Select Case green + greeninc
                Case Is > 255
                    green = (green + greeninc) - 255
                Case Is < 0
                    green = 255 - (green + greeninc)
                Case Else
                    green = (green + greeninc)
            End Select
            Select Case blue + blueinc
                Case Is > 255
                    blue = (blue + blueinc) - 255
                Case Is < 0
                    blue = 255 - (blue + blueinc)
                Case Else
                    blue = (blue + blueinc)
            End Select
        Else
            Select Case red + redinc
                Case Is > 255
                    redinc = 0 - redinc
                Case Is < 0
                    redinc = 0 - redinc
                Case Else
                    red = (red + redinc)
            End Select
            Select Case green + greeninc
                Case Is > 255
                    greeninc = 0 - greeninc
                Case Is < 0
                    greeninc = 0 - greeninc
                Case Else
                    green = (green + greeninc)
            End Select
            Select Case blue + blueinc
                Case Is > 255
                    blueinc = 0 - blueinc
                Case Is < 0
                    blueinc = 0 - blueinc
                Case Else
                    blue = (blue + blueinc)
            End Select
        End If
        
    Next
End Sub



''---------------------------------------------------------------------------------------
'' PSGetKeys
''
'' @date     03.01.2011
'' @author   wm
'' @version  1.0
'' @return   String containing all keys stored in ProtectionStack at the time called
''---------------------------------------------------------------------------------------
''
'Public Function PSGetKeys() As String
'    Dim sht As Worksheet
'    Dim s As String
'    On Error GoTo SubErr
'    'modStack.PushCallStack "modStack", "PSGetKeys"
'
'    For Each sht In ThisWorkbook.Sheets
'        If KeyExists(ProtectionStack, sht.CodeName) Then
'            If s = "" Then
'                s = sht.CodeName
'            Else
'                s = s & "|" & sht.CodeName
'            End If
'        End If
'    Next
'    PSGetKeys = s
'
'SubEnd:
'    'modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "modStack.PSGetKeys error:"
'    Resume SubEnd
'End Function




Function SingleColorFromRGB(colorWanted As String, RGBValue As Long) As Long
    Dim rColor As Long, gColor As Long, bColor As Long
    If RGBValue < 0 Then GoTo ReturnError
     
    rColor = RGBValue Mod 256
    RGBValue = Int(RGBValue / 256)
    gColor = RGBValue Mod 256
    bColor = Int(RGBValue / 256)
     
    If bColor >= 256 Then GoTo ReturnError
     
    Select Case LCase(Trim(colorWanted))
    Case "red"
        SingleColorFromRGB = rColor
    Case "green"
        SingleColorFromRGB = gColor
    Case "blue"
        SingleColorFromRGB = bColor
    Case Else
        Rem colorWanted Is Not red, green, Or blue
        GoTo ReturnError
    End Select
    Exit Function
ReturnError:
    If TypeName(Application.Caller) = "Range" Then
        SingleColorFromRGB = "error"
    Else
        SingleColorFromRGB = -1
    End If
End Function



Public Sub SmoothGradient()
    Dim rFirst As Long, gFirst As Long, bFirst As Long, RGBValue As Long
    Dim rLast As Long, gLast As Long, bLast As Long, icount As Long
    Dim rOffset As Long, gOffset As Long, bOffset As Long
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "modFunctions", "SmoothGradient"

    icount = selection.Cells.Count
    
    If icount < 3 Then
        MsgBox "Please select at least 3 cells." & vbLf _
            & "Choose colors for the first cell" & vbLf _
            & "and the last cell before using this.", vbInformation, "Color a range"
        GoTo subend
    End If
    
    RGBValue = selection.Cells(1, 1).Interior.Color
    rFirst = RGBValue Mod 256
    RGBValue = Int(RGBValue / 256)
    gFirst = RGBValue Mod 256
    bFirst = Int(RGBValue / 256)
    
    RGBValue = selection.Cells(icount).Interior.Color
    rLast = RGBValue Mod 256
    RGBValue = Int(RGBValue / 256)
    gLast = RGBValue Mod 256
    bLast = Int(RGBValue / 256)
    
    icount = icount - 1
    
    rOffset = (rLast - rFirst) / icount
    gOffset = (gLast - gFirst) / icount
    bOffset = (bLast - bFirst) / icount
    
    For i = 2 To icount
        Debug.Print selection.Cells(i).Address
        selection.Cells(i).Interior.Color = RGB(rFirst + rOffset * (i - 1), gFirst + gOffset * (i - 1), bFirst + bOffset * (i - 1))
    Next
'
'    Debug.Print rFirst
'    Debug.Print gFirst
'    Debug.Print bFirst
'
'
'    Debug.Print rLast
'    Debug.Print gLast
'    Debug.Print bLast

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modFunctions.SmoothGradient error:"
    Resume subend
    
End Sub


Public Function ConvertNameToRange(n As Name) As Range
    Dim s As String: s = n.RefersTo: s = Replace(s, "=", "")
    Dim v As Variant: v = Split(s, "!")
    Dim ws As Worksheet: Set ws = Sheets(v(0))
    Dim R As Range: Set R = ws.Range(n.RefersTo)
    Set ConvertNameToRange = R
End Function

Attribute VB_Name = "modInfo"
Option Explicit

Public Property Get LastModified() As String
    LastModified = Format(GetCustomProperty(Config, "LastEditDate"), "yyyy-mm-dd")
End Property

Public Property Get BuildNo() As String
    BuildNo = GetCustomProperty(Config, "CurrentVersion")
End Property
Attribute VB_Name = "modKiss"
Option Explicit
Option Private Module
'this module contains all code that changes the default PHB into a KISS PHB
'these actions are NOT reversable (we are deleting data, rows, DDLs,...)

Public Sub MakeKISSVersion()
    
    On Error GoTo suberr
    modStack.PushCallStack "Config_Lic", "MakeKISSVersion"

    'adjust sheets
    SetLoc
    SetAdmin
    SetCover
    SetContents
    SetContract
    SetCustomProperty Config, "License", "K" 'we need to set license here, because plan needs to know about this...
    sActiveLicense = pStrVersion
    SetPlan
    SetConfig
    SetRisk
    SetContext
    SetStatus
    
    'some small adjustments
    Gantt.Range("Gantt.ShowDep").value = False
    MST.Range("MST.Row.Chart").EntireRow.Hidden = True
    MST.Range("MST.KeyMSTColumn").EntireColumn.Hidden = True
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config_Lic.MakeKISSVersion error:"
    Resume subend
End Sub

Private Sub SetConfig()
    Dim s As String
    'adjust contents roles DDLs
    s = "=Config!" & Config.Range("Config.RolesContractRight").Resize(2).Address
    ThisWorkbook.Names("Config.RolesContractRight").Delete
    ThisWorkbook.Names.Add "Config.RolesContractRight", s
    
    'adjust contents LOC DDL (for KISS we add Slovenian)
    s = "=Config!" & Config.Range("Config.LOC").Resize(3).Address
    ThisWorkbook.Names("Config.LOC").Delete
    ThisWorkbook.Names.Add "Config.LOC", s

    Config.Range("Config.RolesContractLeft.Manager").value = ""
    Config.Range("Config.Roles.Manager").value = ""
End Sub

Private Sub SetLoc()
Dim c As Range
For Each c In Loc.Range("Loc.Lang")
    Loc.Cells(Loc.Range("Loc.PHB").row, c.Column).value = "pm k.i.s.s.|fffd| PHB"
Next
Loc.Range("Loc.ContractMembers").value = "PROJECT TEAM MEMBERS, PROJECT PARTICIPANTS"
Loc.Range("Loc.ContractMembers").offset(0, 1).value = "PROJEKTTEAMMITGLIEDER, PROJEKTMITARBEITER"
Loc.Range("Loc.StatusProjectContext").value = "PROJECTCONTEXT & RISK"
Loc.Range("Loc.StatusProjectContext").offset(0, 1).value = "PROJEKTKONTEXT & RISIKO"
Loc.Range("Loc.MeetingRemark").value = "EMAIL"
Loc.Range("Loc.MeetingRemark").offset(0, 1).value = "EMAIL"

End Sub

Private Sub SetAdmin()
Dim col As Integer
Dim c As Range

    On Error GoTo suberr
    modStack.PushCallStack "modKiss", "SetAdmin"
    
    'add KISS complexity
    Admin.Range("Admin.Complexity").Resize(1, 1).value = "pm k.i.s.s.|fffd| Projekt"
    
    'set the visibility for KISS in the first methods column
    col = Admin.Range("Admin.KISSMethods").Column
    For Each c In Admin.Range("Admin.Methods").offset(0, 1)
        c.value = Admin.Cells(c.row, col).value
    Next
    
    'disable pers.planning for kiss
    Admin.Range("Admin.Module.PP").ClearContents
    SetCustomProperty Config, "ModulePersonalPlanning", "False"
    
    'we use the 3 customfields to promote the basic 3 admin settings to the cover
    Admin.Range("Admin.CFld1.Activate").value = "x"
    Admin.Range("Admin.CFld2.Activate").value = "x"
    Admin.Range("Admin.CFld3.Activate").value = "x"
    Admin.Range("Admin.CFld1.Name").FormulaR1C1 = "=RC[9]"
    Admin.Range("Admin.CFld2.Name").FormulaR1C1 = "=RC[9]"
    Admin.Range("Admin.CFld3.Name").FormulaR1C1 = "=RC[9]"
    
    'set costtype
    Admin.Range("Admin.CostType").ClearContents
    Admin.Range("Admin.CostType").offset(1, 0).Resize(1, 1).value = "Externe Kosten"
    
    'set workcosttype
    Admin.Range("Admin.WorkCostType").ClearContents
    Admin.Range("Admin.WorkCostType").offset(1, 0).Resize(1, 1).value = "Personalkosten"
    
    'set orgunit + rate (refer to field on cover)
    Admin.Range("Admin.org").offset(0, -1).Resize(, 4).ClearContents
    Admin.Range("Admin.org").offset(1, -1).Resize(1, 1).value = "P"
    Admin.Range("Admin.org").offset(1, 0).Resize(1, 1).value = "Personal"
    Admin.Range("Admin.org").offset(1, 1).Resize(1, 1).formula = "=Cover.Cfld3"
    Admin.Range("Admin.org").offset(1, 2).Resize(1, 1).value = "Personalkosten"
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modKiss.SetAdmin error:"
    Resume subend
End Sub

Private Sub SetCover()
Dim i As Integer

    On Error GoTo suberr
    modStack.PushCallStack "modKiss", "SetCover"

    'NO noupdate= true!!
    With Cover
        'manager
        With .Range("Cover.Manager.Table").Cells(2, 2)
            .value = Config_Lic.Range("Config_Lic.ManName").value 'kein noupdate=true verwenden, weiil sonst hier keine GUID erzeugt wird !
            .locked = True
            .Interior.Color = RGB(242, 242, 242)
        End With
        'complexity
        .Range("Cover.Complexity").Validation.Delete
        .Range("Cover.Complexity").value = "pm k.i.s.s.|fffd| Projekt"
        .Range("Cover.Complexity").locked = True
        .Range("Cover.Complexity").Interior.Color = RGB(242, 242, 242)
        .Range("Cover.Complexity").EntireRow.Hidden = True
        'hide non-kiss fields
        .Range("Cover.ProjectProgram").EntireRow.Hidden = True
        .Range("Cover.Category").EntireRow.Hidden = True
        .Range("Cover.Impact").EntireRow.Hidden = True
        'show and set custom fields, we use those for kiss admin settings
        For i = 1 To 3
            .Range("Cover.CFld" + Trim(CStr(i))).EntireRow.Hidden = False
        Next
        .Range("Cover.CFld1").value = Admin.Range("Admin.Currency").value
        .Range("Cover.CFld2").value = Admin.Range("Admin.ResourceUnits").value
        .Range("Cover.CFld3").value = 500
        .Range("Cover.CFld3").NumberFormat = "0"
        
        'here we have to do an additional update of ADMIN: refer to the fields on the cover
        Admin.Range("Admin.Currency").value = "=Cover.Cfld1"
        Admin.Range("Admin.ResourceUnits").value = "=Cover.Cfld2"
        
    End With

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modKiss.SetCover error:"
    Resume subend
End Sub

Private Sub SetContents()
    On Error GoTo suberr
    modStack.PushCallStack "modKiss", "SetContents"

'adjust contents sheet to KISS version
'this action is NOT reversable, we need to delete rows in the contents sheet in order for the rownrs to be correct
    Dim sM As String
    Dim sO As String
    Dim R As Range
    Dim c As Range
    Dim i As Integer
    Dim col As Integer
    
    Admin.Calculate
    contents.Calculate
    
    'set visibility of sheets
    contents.noupdate = True
    sM = appGetLOCText("M")
    sO = appGetLOCText("O")
    Set R = contents.Range("Contents.Complexity")
    For Each c In R
        If IsError(c.value) Then
            MsgBox "Check Admin"
        Else
            Select Case c.value
            Case "-"
                    c.offset(0, 1).value = "-"
                    c.offset(0, 1).Interior.Color = RGB(242, 242, 242)
                    c.offset(0, 1).locked = True
                    c.offset(0, 2).value = "-"
                    c.offset(0, 2).Interior.Color = RGB(242, 242, 242)
                    c.offset(0, 2).locked = True
                    SetVisibility Sheets(c.offset(0, -1).value), xlSheetHidden
            Case sM
                    c.offset(0, 1).value = "x"
                    c.offset(0, 1).Interior.Color = RGB(242, 242, 242)
                    c.offset(0, 1).locked = True
                    c.offset(0, 2).value = "x"
                    c.offset(0, 2).Interior.Color = RGB(255, 255, 255)
                    c.offset(0, 2).locked = False
                    SetVisibility Sheets(c.offset(0, -1).value), xlSheetVisible
            Case sO
                    c.offset(0, 1).value = "-"
                    c.offset(0, 1).Interior.Color = RGB(255, 255, 255)
                    c.offset(0, 1).locked = False
                    c.offset(0, 2).value = "-"
                    c.offset(0, 2).Interior.Color = RGB(242, 242, 242)
                    c.offset(0, 2).locked = True
                    SetVisibility Sheets(c.offset(0, -1).value), xlSheetHidden
            End Select
        End If
    Next
    
    'delete the invisible sheets from contents (for correct rownrs we can not just simply hide)
    i = contents.Range("Contents.Complexity").row + 1
    col = contents.Range("Contents.Complexity").Column
    Do While i < (contents.Range("Contents.Complexity").row + contents.Range("Contents.Complexity").rows.Count - 1)
        If contents.Cells(i, col).value = "-" Then
            contents.Cells(i, 1).EntireRow.Delete
        Else
            i = i + 1
        End If
    Loop
    
    'hide unnecessary columns
    contents.Range("Contents.Complexity").Resize(1, 2).EntireColumn.Hidden = True
    
    'make sheet col wider for design reasons (because hidding 2 cols for kiss)
    contents.Range("Contents.Complexity").offset(, -1).ColumnWidth = 35
    
subend:
    contents.noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modKiss.SetContents error:"
    Resume subend
End Sub

Private Sub SetContract()

    On Error GoTo suberr
    modStack.PushCallStack "modKiss", "SetContract"
    With Contract
        .noupdate = True
        'hide deliverables
        .Range("Contract.ProjectDeliverables").EntireRow.Hidden = True
        'adjust resources and costs + lock
        .GetResourcesTable.ValuesRange.locked = True
        .GetResourcesTable.ValuesRange.Interior.Color = RGB(242, 242, 242)
        .GetResourcesTable.ValuesRange.offset(0, 1).Resize(1, 1).value = "Personal"
        .GetResourcesTable.ValuesRange.offset(0, 2).Resize(1, 1).locked = False
        .GetResourcesTable.ValuesRange.offset(0, 2).Resize(1, 1).Interior.Color = RGB(255, 255, 255)
        .GetCostTable.ValuesRange.locked = True
        .GetCostTable.ValuesRange.Interior.Color = RGB(242, 242, 242)
        .GetCostTable.ValuesRange.offset(0, 1).Resize(1, 1).value = "Personalkosten"
        .GetCostTable.ValuesRange.offset(1, 1).Resize(1, 1).value = "Externe Kosten"
        .GetCostTable.ValuesRange.offset(1, 2).Resize(1, 1).locked = False
        .GetCostTable.ValuesRange.offset(1, 2).Resize(1, 1).Interior.Color = RGB(255, 255, 255)
        'adjust managers and members
        .GetManagersTable.ValuesRange(2).locked = True
        .GetManagersTable.ValuesRange(2).Interior.Color = RGB(242, 242, 242)
        .GetManagersTable.ValuesRange(3).Validation.Delete
        .GetManagersTable.ValuesRange(3).locked = True
        .GetManagersTable.ValuesRange(3).Interior.Color = RGB(242, 242, 242)
        .GetManagersTable.ValuesRange(4).Validation.Delete
        .Range("Contract.Managers").offset(-1, 2).Resize(1, 2).locked = True
        .Range("Contract.Managers").offset(-1, 2).Resize(1, 2).Interior.Color = RGB(242, 242, 242)
        .Range("Contract.Managers").offset(-1, 3).Resize(1, 1).Validation.Delete
        .Range("Contract.Managers").offset(-1, 4).Resize(1, 1).Validation.Delete
        .GetMembersTable.ValuesRange(4).Validation.Delete
        .Range("Contract.Members").offset(-1, 4).Resize(1, 1).Validation.Delete
        'calculate sheet
        .Calculate
    End With
    
subend:
    Contract.noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modKiss.SetContract error:"
    Resume subend
End Sub

Private Sub SetPlan()
Dim col As Integer
Dim c As Range
Dim colkeymst As Integer
Dim colprec As Integer
Dim colworktotal As Integer
Dim colwpspec As Integer
Dim coldesc As Integer

    On Error GoTo suberr
    modStack.PushCallStack "modKiss", "SetPlan"
    
    'update plan sheet to get the (work)costtypes in sync with contract
    'we don't need any update button anymore in plan, because it will not change anymore
    Plan.UpdatePlan_Click
    
    Plan.noupdate = True
    
    'update viewdefinitions
    colkeymst = Plan.Range("Plan.KeyMSTColumn").Column
    colprec = Plan.Range("Plan.Col.Prec").Column
    colworktotal = Plan.Range("Plan.WorkTotalColumns").Column
    colwpspec = Plan.Range("Plan.WPSpecColumn").Column
    coldesc = Plan.Range("Plan.DescriptionColumn").Column
    
    For Each c In Plan.Range("Plan.ViewDefinitions")
        Plan.Cells(c.row, colkeymst).ClearContents
        Plan.Cells(c.row, colprec).ClearContents
        Plan.Cells(c.row, colprec + 1).ClearContents
        Plan.Cells(c.row, colworktotal).ClearContents
        Plan.Cells(c.row, colworktotal + 1).ClearContents
        Plan.Cells(c.row, colworktotal + 2).ClearContents
        Plan.Cells(c.row, colworktotal + 3).ClearContents
        Plan.Cells(c.row, colworktotal + 4).ClearContents
        Plan.Cells(c.row, colwpspec).ClearContents
        Plan.Cells(c.row, coldesc).value = "x" 'description column is a kiss specific column that we now make visible
    Next
    Plan.Cells(Plan.Range("Plan.ViewDefinitions").row, colkeymst).value = "$"
    Plan.Cells(Plan.Range("Plan.ViewDefinitions").row, colprec).value = "$"
    Plan.Cells(Plan.Range("Plan.ViewDefinitions").row, colprec + 1).value = "$"
    Plan.Cells(Plan.Range("Plan.ViewDefinitions").row, colworktotal).value = "$"
    Plan.Cells(Plan.Range("Plan.ViewDefinitions").row, colworktotal + 1).value = "$"
    Plan.Cells(Plan.Range("Plan.ViewDefinitions").row, colworktotal + 2).value = "$"
    Plan.Cells(Plan.Range("Plan.ViewDefinitions").row, colworktotal + 3).value = "$"
    Plan.Cells(Plan.Range("Plan.ViewDefinitions").row, colworktotal + 4).value = "$"
    Plan.Cells(Plan.Range("Plan.ViewDefinitions").row, colwpspec).value = "$"
    
    'create responsible DDL in WP template (because no roles columns in KISS)
    Plan.Cells(Plan.Range("Plan.TaskTemplateLevel_W").row, Plan.Range("Plan.ResponsibleColumn").Column).locked = False
    With Plan.Cells(Plan.Range("Plan.TaskTemplateLevel_W").row, Plan.Range("Plan.ResponsibleColumn").Column).Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Plan.Cells(Plan.Range("Plan.TaskTemplateLevel_W").row, Plan.Range("Plan.ResponsibleColumn").Column).Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=Config.Names"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = True
    End With
    
    'update columnview
    Plan.UserAction_ChangeView True
    
subend:
    Plan.noupdate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modKiss.SetPlan error:"
    Resume subend
End Sub

Private Sub SetRisk()
Dim c As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "modKiss", "SetRisk"
    
    'rename risk sheets to make risk_kiss the risk sheet for KISS
    Risk.Name = appGetLOCText("risksheet") + "PHB"
    Risk_kiss.Name = appGetLOCText("risksheet")
    
    'set visibility
    Risk.visible = xlSheetHidden
    Risk_kiss.visible = xlSheetVisible
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modKiss.SetRisk error:"
    Resume subend
End Sub

Private Sub SetContext()
Dim c As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "modKiss", "SetContext"
    
    'rename context sheets to make contet_kiss the context sheet for KISS
    Context.Name = appGetLOCText("contextsheet") + "PHB"
    Context_kiss.Name = appGetLOCText("contextsheet")
    
    'set visibility
    Context.visible = xlSheetHidden
    Context_kiss.visible = xlSheetVisible
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modKiss.SetContext error:"
    Resume subend
End Sub

Private Sub SetStatus()
Dim c As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "modKiss", "SetStatus"
    
    'hide MST timeline
    Statusreport.Range("Status.Row.MSTChart").offset(-1).Resize(5).EntireRow.Hidden = True
    
    'hide Riskanalysis
    Statusreport.Range("Status.Risk").offset(-2).Resize(6).EntireRow.Hidden = True
    Statusreport.Shapes("Status.RiskMatrix").visible = msoFalse
    
    'unhide organisation and trafficlights
    Statusreport.Range("Status.Organisation.table").EntireRow.Hidden = False
    Statusreport.Shapes("trafficOrgContextGreen").visible = msoTrue
    Statusreport.Shapes("trafficOrgContextYellow").visible = msoTrue
    Statusreport.Shapes("trafficOrgContextRed").visible = msoTrue
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modKiss.SetStatus error:"
    Resume subend
End Sub

'---------------------------------------------------------------------------------------------------------------------
'additions for KISS corporate
'lettercode for KISS corporate = C (so sactivelicense=C)
Public Sub MakeKISSCorporateVersion()
    
    On Error GoTo suberr
    modStack.PushCallStack "Config_Lic", "MakeKISSCorporateVersion"

    'adjust sheets
    SetLoc
    SetAdmin
    SetCoverCorporate
    SetContents
    SetContract
    SetCustomProperty Config, "License", "C" 'we need to set license here, because plan needs to know about this...
    sActiveLicense = pStrVersion
    SetPlan
    SetConfigCorporate
    SetRisk
    SetContext
    SetStatus
    
    'some small adjustments
    Gantt.Range("Gantt.ShowDep").value = False
    MST.Range("MST.Row.Chart").EntireRow.Hidden = True
    MST.Range("MST.KeyMSTColumn").EntireColumn.Hidden = True
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "Config_Lic.MakeKISSCorporateVersion error:"
    Resume subend
End Sub

Private Sub SetConfigCorporate()
    Dim s As String
    'adjust contents roles DDLs
    s = "=Config!" & Config.Range("Config.RolesContractRight").Resize(2).Address
    ThisWorkbook.Names("Config.RolesContractRight").Delete
    ThisWorkbook.Names.Add "Config.RolesContractRight", s
    
    'adjust contents LOC DDL (for KISS we add Slovenian)
    s = "=Config!" & Config.Range("Config.LOC").Resize(3).Address
    ThisWorkbook.Names("Config.LOC").Delete
    ThisWorkbook.Names.Add "Config.LOC", s

'    Config.Range("Config.RolesContractLeft.Manager").value = ""
'    Config.Range("Config.Roles.Manager").value = ""
End Sub



Private Sub SetCoverCorporate()
Dim i As Integer

    On Error GoTo suberr
    modStack.PushCallStack "modKiss", "SetCoverCorporate"

    'NO noupdate= true!!
    With Cover
'        'manager
'        With .Range("Cover.Manager.Table").Cells(2, 2)
'            .value = Config_Lic.Range("Config_Lic.ManName").value 'kein noupdate=true verwenden, weiil sonst hier keine GUID erzeugt wird !
'            .locked = True
'            .Interior.Color = RGB(242, 242, 242)
'        End With
        'complexity
        .Range("Cover.Complexity").Validation.Delete
        .Range("Cover.Complexity").value = "pm k.i.s.s.|fffd| Projekt"
        .Range("Cover.Complexity").locked = True
        .Range("Cover.Complexity").Interior.Color = RGB(242, 242, 242)
        .Range("Cover.Complexity").EntireRow.Hidden = True
        'hide non-kiss fields
        .Range("Cover.ProjectProgram").EntireRow.Hidden = True
        .Range("Cover.Category").EntireRow.Hidden = True
        .Range("Cover.Impact").EntireRow.Hidden = True
        'show and set custom fields, we use those for kiss admin settings
        For i = 1 To 3
            .Range("Cover.CFld" + Trim(CStr(i))).EntireRow.Hidden = False
        Next
        .Range("Cover.CFld1").value = Admin.Range("Admin.Currency").value
        .Range("Cover.CFld2").value = Admin.Range("Admin.ResourceUnits").value
        .Range("Cover.CFld3").value = 500
        .Range("Cover.CFld3").NumberFormat = "0"
        
        'here we have to do an additional update of ADMIN: refer to the fields on the cover
        Admin.Range("Admin.Currency").value = "=Cover.Cfld1"
        Admin.Range("Admin.ResourceUnits").value = "=Cover.Cfld2"
        
    End With

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modKiss.SetCoverCorporate error:"
    Resume subend
End Sub

Attribute VB_Name = "modLaunch"
'---------------------------------------------------------------------------------------
' Module    : modLaunch
' Author    : wm
' Date      : 15.03.2011
' Purpose   : mostly deprecated - used to read commandline parameters excel is started
'             with as well as getting the system's screen resolution
'---------------------------------------------------------------------------------------

Option Base 0
Option Explicit
Option Private Module

#If VBA7 Then
    Declare PtrSafe Function GetCommandLine Lib "kernel32" Alias "GetCommandLineW" () As Long
    Declare PtrSafe Function lstrlenW Lib "kernel32" (ByVal lpString As Long) As Long
    Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (MyDest As Any, MySource As Any, ByVal MySize As Long)
    Private Declare PtrSafe Function GetSystemMetrics Lib "user32.dll" (ByVal nIndex As Long) As Long
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
'    Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
'    Private Declare PtrSafe Function GetDlgItem Lib "user32.dll" (ByVal hDlg As Long, ByVal nIDDlgItem As Long) As Long
'    Private Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
'    Private Declare PtrSafe Function EnumChildWindows Lib "user32" (ByVal hWndParent As Long, ByVal lpEnumFunc As Long, ByVal lParam As Long) As Long
'    Private Declare PtrSafe Function SetFocusAPI Lib "user32" Alias "SetFocus" (ByVal hWnd As Long) As Long
'    Private Declare PtrSafe Sub SetWindowPos Lib "user32" (ByVal hWnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal Y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long)


#Else
    Declare Function GetCommandLine Lib "kernel32" Alias "GetCommandLineW" () As Long
    Declare Function lstrlenW Lib "kernel32" (ByVal lpString As Long) As Long
    Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (MyDest As Any, MySource As Any, ByVal MySize As Long)
    Private Declare Function GetSystemMetrics Lib "user32.dll" (ByVal nIndex As Long) As Long
    Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
'    Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
'    Private Declare Function GetDlgItem Lib "user32.dll" (ByVal hDlg As Long, ByVal nIDDlgItem As Long) As Long
'    Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
'    Private Declare Function EnumChildWindows Lib "user32" (ByVal hWndParent As Long, ByVal lpEnumFunc As Long, ByVal lParam As Long) As Long
'    Private Declare Function SetFocusAPI Lib "user32" Alias "SetFocus" (ByVal hWnd As Long) As Long
'    Private Declare Sub SetWindowPos Lib "user32" (ByVal hWnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal Y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long)

#End If


Const SM_CXSCREEN = 0
Const SM_CYSCREEN = 1

'    Private Const BM_CLICK As Long = &HF5&
'    Private Const BM_SETCHECK As Long = &HF1&
'    Private Const BST_CHECKED As Long = &H1&
'    Private Const EM_REPLACESEL As Long = &HC2&
'    Private Const HWND_TOPMOST As Long = -1
'    Private Const SWP_NOACTIVATE As Long = &H10&
'    Private Const SWP_NOMOVE As Long = &H2&
'    Private Const SWP_NOSIZE As Long = &H1&
'    Private Const SWP_SHOWWINDOW As Long = &H40&
'    Private Const TCM_SETCURFOCUS As Long = &H1330&


'Public hWndProjectProperties As Long
'
'Public Function EnumChildProc(ByVal hWnd As Long, ByVal lParam As Long) As Long
'    hWndProjectProperties = hWnd
'    ' Do not recurse
'    EnumChildProc = 0
'End Function




'---------------------------------------------------------------------------------------
' CmdToSTr
' read the commandline
' @date     03.01.2011
' @author   wm
' @version  1.0
' @param    Cmd     pointer to the commandline
' @return           String equivalent to the commadline
'---------------------------------------------------------------------------------------
'
Function CmdToSTr(cmd As Long) As String
    Dim Buffer() As Byte
    Dim StrLen As Long
    On Error GoTo suberr
    modStack.PushCallStack "modLaunch", "CmdToSTr"

    If cmd Then
        StrLen = lstrlenW(cmd) * 2
        If StrLen Then
            ReDim Buffer(0 To (StrLen - 1)) As Byte
            CopyMemory Buffer(0), ByVal cmd, StrLen
            CmdToSTr = Buffer
        End If
    End If

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modLaunch.CmdToSTr error:"
    Resume subend
End Function


'---------------------------------------------------------------------------------------
' screenx
'
' @date     03.01.2011
' @author   wm
' @version  1.0
' @return   horizontal screen resolution in pixels
'---------------------------------------------------------------------------------------
'
Public Function screenx() As Long
    On Error GoTo suberr
    modStack.PushCallStack "modLaunch", "screenx"

    screenx = GetSystemMetrics(SM_CXSCREEN)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modLaunch.screenx error:"
    Resume subend
End Function


'---------------------------------------------------------------------------------------
' screeny
'
' @date     03.01.2011
' @author   wm
' @version  1.0
' @return   vertical screen resolution in pixels
'---------------------------------------------------------------------------------------
'
Public Function screeny() As Long
    On Error GoTo suberr
    modStack.PushCallStack "modLaunch", "screeny"

    screeny = GetSystemMetrics(SM_CYSCREEN)

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modLaunch.screeny error:"
    Resume subend
End Function
 




'Sub VerifyScreenResolution(Optional Dummy As Integer)
'
'    Dim x  As Long
'    Dim y  As Long
'    Dim MyMessage As String
'    Dim MyResponse As VbMsgBoxResult
'
'    x = GetSystemMetrics(SM_CXSCREEN)
'    y = GetSystemMetrics(SM_CYSCREEN)
'    If x = 1024 And y = 768 Then
'    Else
'        MyMessage = "Your current screen resolution is " & x & " X " & y & vbCrLf & "This program " & _
'        "was designed to run with a screen resolution of 1024 X 768 and may not function properly " & _
'        "with your current settings." & vbCrLf & "Would you like to change your screen resolution?"
'        MyResponse = MsgBox(MyMessage, vbExclamation + vbYesNo, "Screen Resolution")
'    End If
'    If MyResponse = vbYes Then
'        Call Shell("rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,3")
'    End If
'
'End Sub


'Private Sub SetPassword(proj As VBProject, strPassword As String)
'' Author:Howard Kaikow
'' URL: http://www.standards.com/
'' Email address: kaikow@standards.com
'' Date: April 2005
'    ' spy++ was used to find the Control IDs in Project Properties dialog
'    Const ControlIDConfirmPassword As Long = &H1556&
'    Const ControlIDLockProject As Long = &H1557&
'    Const ControlIDOK As Long = &H1&
'    Const ControlIDPassword As Long = &H1555&
'    Const ControlIDSysTabControl32 As Long = &H3020&
'
'    Dim ctrl As Office.CommandBarControl
'    Dim hWnd As Long
'    Dim hWndLockProject As Long
'    Dim hWndPassword As Long
'    Dim hWndConfirmPassword As Long
'    Dim hWndOK As Long
'    Dim hWndSysTabControl32 As Long
'    Dim strCaption As String
'
'    With proj
'        strCaption = .name & " - Project Properties"
'        With .VBE
'            ' Find Project Properties dialog
'            Set ctrl = .CommandBars.FindControl(id:=2578)
'            ' Display Project Properties dialog
'            ctrl.Execute
'            Set ctrl = Nothing
'        End With
'    End With
'    ' Get hWnd for Project Properties dialog
'    hWndProjectProperties = FindWindow(vbNullString, strCaption)
'    If hWndProjectProperties = 0 Then
'        Exit Sub
'    End If
'
'    ' Get hWnd for OK button in Project Properties dialog
'    hWndOK = GetDlgItem(hWndProjectProperties, ControlIDOK)
'    ' Get hWnd for Tab Control in Project Properties dialog
'    hWndSysTabControl32 = GetDlgItem(hWndProjectProperties, ControlIDSysTabControl32)
'
'    'Move to Protection tab
'    SendMessage hWndSysTabControl32, TCM_SETCURFOCUS, 1, ByVal 0&
'
'    ' Must reset hWndProjectProperties probably because tab changed.
'    EnumChildWindows ByVal hWndProjectProperties, AddressOf EnumChildProc, ByVal 0
'
'    ' Get hWnd for Password Edit control in Project Properties dialog
'    hWndPassword = GetDlgItem(hWndProjectProperties, ControlIDPassword)
'    ' Get hWnd for Confirm Password Edit control in Project Properties dialog
'    hWndConfirmPassword = GetDlgItem(hWndProjectProperties, ControlIDConfirmPassword)
'    ' Get hWnd for Lock Project checkbox control in Project Properties dialog
'    hWndLockProject = GetDlgItem(hWndProjectProperties, ControlIDLockProject)
'
'    ' Lock project for &viewing
'    SendMessage hWndLockProject, BM_SETCHECK, BST_CHECKED, 0
'
'    ' &Password
'    SendMessage hWndPassword, EM_REPLACESEL, vbTrue, ByVal strPassword
'
'    ' &Confirm password
'    SendMessage hWndConfirmPassword, EM_REPLACESEL, vbTrue, ByVal strPassword
'
'    'OK button
'    SetFocusAPI hWndOK
'    SendMessage hWndOK, BM_CLICK, 0&, 0&
'End Sub

Attribute VB_Name = "modLog"
'---------------------------------------------------------------------------------------
' Module    : modLog
' Author    : WolfgangM
' Date      : 21.02.2011
' Purpose   : provides logging features.
'             most of these procedures will skip callstack registration to avoid
'             circular references when being called from within the callstack
'---------------------------------------------------------------------------------------

Option Explicit
Option Private Module

Private sLogText As String


'---------------------------------------------------------------------------------------
' TimeStamp
'
' @date     03.01.2011
' @author   wm
' @version  1.0
' @param    mode    sets the format of the timestamp
'                   1: [YYYY.MM.DD HH:MM:SS]    (default)
'                   2: [YYYY.MM.DD]             (date)
'                   3: [HH:MM:SS]               (time)
'                   4: [HH:MM:SS.MS]            (time in ms)
' @return           timestamp in chosen format as String
'---------------------------------------------------------------------------------------
'
Public Function TimeStamp(Optional mode As Integer = 1) As String
    
    Dim stamp As String
    'On Error GoTo SubErr
    'modStack.PushCallStack "modLog", "TimeStamp"
    
    Select Case mode
    Case 1
        stamp = "[" & Strings.Format(Now, "YYYY.MM.DD HH:nn:ss") & "]"
    Case 2
        stamp = "[" & Strings.Format(Now, "YYYY.MM.DD") & "]"
    Case 3
        stamp = "[" & Strings.Format(Now, "HH:nn:ss") & "]"
    Case 4
        stamp = "[" & Strings.Format(Now, "HH:nn:ss") & "." & Strings.Right(Strings.Format(Timer, "#0.00"), 2) & "]"
    End Select
    TimeStamp = stamp

'SubEnd:
'    'modStack.PopCallStack
'    Exit Function
'SubErr:
'    AppErrMsg "modLog.TimeStamp error:"
'    Resume SubEnd
End Function



'---------------------------------------------------------------------------------------
' log
' print a string to console only if logging is enabled
' @date     25.01.2011
' @author   wm
' @version  1.0
' @param    sLog    String to log
'---------------------------------------------------------------------------------------
'
Public Sub log(sLog As String)
    On Error GoTo suberr
    'modStack.PushCallStack "modLog", "log"

    If Not LOGGING_ENABLED Then GoTo subend
    Debug.Print sLog

subend:
    'modStack.PopCallStack
    Exit Sub
suberr:
    'AppErrMsg "modLog.log error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' logToString
' create log entry with timestamp
' @date     03.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub logToString(sLog As String)
    On Error GoTo suberr
    modStack.PushCallStack "modLog", "logToString"

    If LOGGING_ENABLED Then
        sLogText = sLogText & vbCrLf & TimeStamp(4) & sLog
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modLog.log error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' PrintLogToConsole
' print log string to console
' @date     03.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub PrintLogToConsole()
    On Error GoTo suberr
    modStack.PushCallStack "modLog", "PrintLogToConsole"

    Debug.Print sLogText
    sLogText = ""

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modLog.PrintLogToConsole error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' logToFile
' print log string to file
' @date     03.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub logToFile(sLog As String)
    Dim LogFileName As String
    Dim FileNum As Integer
    Dim TimeInMS As String
    
    On Error GoTo suberr
    modStack.PushCallStack "modLog", "logToFile"

    TimeInMS = "[" & Strings.Format(Now, "HH:nn:ss") & "." & Strings.Right(Strings.Format(Timer, "#0.00"), 2) & "]: "
    LogFileName = "C:\Logs\LOGFILE.TXT" '_" & Strings.Format(Now, "HH_mm_ss") & ".TXT"

    FileNum = FreeFile                                                      ' next file number
    Open LogFileName For Append As #FileNum                                 ' creates the file if it doesn't exist
    'Print #FileNum, TimeInMS & sLog & "; [" & ProtectionStates.count & "]"  ' write information at the end of the text file
    Print #FileNum, "****** start phb logfile " & TimeInMS & " ******" & _
                    vbCrLf & sLog & vbCrLf & _
                    "******* end phb logfile " & TimeInMS & " *******" & vbCrLf
    Close #FileNum                                                          ' close the file

    'If Not Application.Caller Is Nothing Then Debug.Print "initial call was triggered by: " & Application.Caller
    'Debug.Print sLog & "; PSC: [" & ProtectionStates.count & "]"

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modLog.logToFile error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' logEvent
' log errors / events to Config.EventLog
' @date     03.01.2011
' @author   wm
' @version  1.0
' @param    msg     Optional string, tag will be changed to [EVT] if provided
'---------------------------------------------------------------------------------------
'
Public Sub logEvent(Optional msg As String = "", Optional ErrNo As Integer, Optional ErrDesc As String, Optional ErrSrc As String, Optional ErrLine As Integer)
    Dim s As String
    
    On Error GoTo suberr
    'modStack.PushCallStack "modLog", "logEvent"

    s = "<TS>" & TimeStamp & "</TS>"
    If msg <> "" Then
        s = s & "<EVT>" & msg & "</EVT>"
    Else
        s = s & "<ERR>" & ErrNo & "|" & ErrDesc & "|" & ErrSrc & "</ERR>" & modStack.CSToString & "<AS>" & ActiveSheet.CodeName & "</AS>" & vbLf
    End If
    'Debug.Print s
    
    If Config.Range("$BO$65536").End(xlUp).offset(1, 0).row > 65534 Then GoTo subend
    With Config.Range("$BO$65536").End(xlUp).offset(1, 0)
        .value = s
        .HorizontalAlignment = xlFill
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Interior.Pattern = xlNone
        .Font.Color = 1
    End With
    
    
    
    
    
    Dim OBJXMLDOC As Variant
    'Dim Heading As Variant
    'Dim MetadataNode As Variant
    Dim top_node As Variant
    Dim datanode As Variant
    Dim ErrorNode As Variant
    Dim ErrorItem As Variant

'    ' Create the XML DOM object
'    Set objxmldoc = CreateObject("Microsoft.XMLDOM")
'    objxmldoc.async = False
'
'    ' NODE_PROCESSING_INSTRUCTION(7) --- reference http://www.devguru.com/Technologies/xmldom/quickref/obj_node.html
'    Set Heading = objxmldoc.createNode(7, "xml", "")
'    objxmldoc.appendchild (Heading)
'
'    ' Set the root node
'    Set top_node = objxmldoc.createNode(1, "phb", "")
'    objxmldoc.appendchild (top_node)
    
    Set OBJXMLDOC = CreateObject("Microsoft.XMLDOM")
    OBJXMLDOC.async = False
    OBJXMLDOC.LoadXML Config.Range("I18")
    
    Set top_node = OBJXMLDOC.SelectSingleNode("/phb")
    
    Set datanode = OBJXMLDOC.createNode(1, "Error", "")
    AddNode OBJXMLDOC, datanode, "Time", TimeStamp
    AddNode OBJXMLDOC, datanode, "Event", msg
    AddNode OBJXMLDOC, datanode, "ErrNo", CStr(ErrNo)
    AddNode OBJXMLDOC, datanode, "ErrDesc", ErrDesc
    AddNode OBJXMLDOC, datanode, "ErrSrc", ErrSrc
    AddNode OBJXMLDOC, datanode, "Stack", CSToString
    AddNode OBJXMLDOC, datanode, "Sheet", ActiveSheet.CodeName
    top_node.appendchild datanode

    For Each ErrorNode In top_node.ChildNodes
        For Each ErrorItem In ErrorNode.ChildNodes
            Debug.Print ErrorItem.BaseName & ": " & ErrorItem.Text
        Next
        Debug.Print "---------------------------------------------------------------"
    Next
    
    
    'Debug.Print objxmldoc
    Config.Range("I18").value = OBJXMLDOC.xml
    'objxmldoc.Save "c:\Logs\ErrLog.xml"
    'Debug.Print objxmldoc.ToString
    Debug.Print ""




    
    
    
    
    
    
subend:
    err.clear
    'modStack.PopCallStack
    Exit Sub
suberr:
    
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' CreateLogFile
' write the data in Config.EventLog to file
' @date     03.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub CreateLogFile()
    Dim filedialog
    Dim FileNum As Integer
    Dim FileName As String
    Dim i As Integer
    Dim s As String
    Dim rCell As Range
    
    On Error GoTo suberr
    modStack.PushCallStack "modLog", "CreateLogFile"

    filedialog = Application.GetSaveAsFilename(ThisWorkbook.FullName & "_log.txt", "Txt-Files (*.txt), *.txt")
    If filedialog <> False Then
        s = "[OfficeVersion: " & Application.Version & "]" & _
            "[Host OS: " & Application.OperatingSystem & "]" & _
            "[User Name: " & Application.UserName & "]" & _
            "[VBE Version: " & Application.VBE.Version & "]" & _
            "[addins: "
        For i = 1 To Application.AddIns.Count
            s = s & Application.AddIns(i).Name & ";"
        Next i
        s = s & "]" & vbLf
        For Each rCell In Range(Config.Range("Config.EventLog"), Config.Range("$BO$65536").End(xlUp))
            s = s & rCell.value & vbLf
        Next
        FileName = CStr(filedialog)
        FileNum = FreeFile                          ' next file number
        Open FileName For Append As #FileNum        ' creates the file if it doesn't exist
        Print #FileNum, s                           ' write information at the end of the text file
        Close #FileNum
        AppInfoMsg appGetLOCText("done")
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modLog.CreateLogFile error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' GetTimeInMSDiff
'
' @date     10.01.2011
' @author   wm
' @version  1.0
' @param    timestamp1  timestamp to start measurement
' @param    timestamp2  timestamp to stop measurement
' @return               time between timestamp1 and timestamp2 in TimeStamp(4) format
'---------------------------------------------------------------------------------------
'
Public Function GetTimeInMSDiff(timestamp1 As String, timestamp2 As String) As String
    Dim ms As Integer
    Dim ss As Integer
    Dim mm As Integer
    Dim hh As Integer
    Dim s As String
    
    ms = CInt(Mid(timestamp2, 11, 2)) - CInt(Mid(timestamp1, 11, 2))
    If ms < 0 Then
        ms = ms + 100
        ss = -1
    End If
    s = Strings.Format(CStr(ms), "00")
    ss = ss + CInt(Mid(timestamp2, 8, 2)) - CInt(Mid(timestamp1, 8, 2))
    If ss < 0 Then
        ss = ss + 60
        mm = -1
    End If
    s = Strings.Format(ss, "00") & "." & s
    mm = mm + CInt(Mid(timestamp2, 5, 2)) - CInt(Mid(timestamp1, 5, 2))
    If mm < 0 Then
        mm = mm + 60
        hh = -1
    End If
    s = Strings.Format(mm, "00") & ":" & s
    hh = hh + CInt(Mid(timestamp2, 2, 2)) - CInt(Mid(timestamp1, 2, 2))
    s = Strings.Format(hh, "00") & ":" & s
    
    GetTimeInMSDiff = "[" & s & "]"

End Function


'---------------------------------------------------------------------------------------
' ToggleLogging
' enable / disable logging
' @date     03.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
'Private Sub ToggleLogging()
'    On Error GoTo SubErr
'    modStack.PushCallStack "modLog", "ToggleLogging"
'
'    LOGGING_ENABLED = Not LOGGING_ENABLED
'    Debug.Print "Logging set to " & LOGGING_ENABLED & "; PSC: [" & ProtectionStates.count & "]"
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "modLog.ToggleLogging error:"
'    Resume SubEnd
'End Sub
Attribute VB_Name = "modPMCCSQL"
Option Explicit

Private Sub test()

'Dim s As String
'Dim sxml As String
'
'Export.CreateXml s, sxml
'
'Debug.Print sxml
ExportPHB2SQLServer

End Sub

Public Function CheckAdminSQL() As Boolean
    
    On Error GoTo suberr
    modStack.PushCallStack "Cover", "CheckAdminSQL"

    CheckAdminSQL = False
    
    If Admin.Range("Admin.SQLServer").value = "" Then
        AppStopMsg appGetLOCText("msgNoSQLServer")
        GoTo subend
    End If
    
    If Admin.Range("Admin.Database").value = "" Then
        AppStopMsg appGetLOCText("msgNoDatabase")
        GoTo subend
    End If
    
    If Not IsNumeric(Admin.Range("Admin.ConnectionTimeout").value) Then
        AppStopMsg appGetLOCText("msgNoTimeout")
        GoTo subend
    End If
    
    If Admin.Range("Admin.SQLDateFormat").value = "" Then
        AppStopMsg appGetLOCText("msgNoDateFormat")
        GoTo subend
    End If
    
    CheckAdminSQL = True

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "Cover.CheckAdminSQL error:"
    Resume subend
End Function

Public Sub ExportPHB2SQLServer()
    Dim cnn As New Connection
    Dim rst As New Recordset
    Dim cmd As New ADODB.Command
    Dim sxml As String
    Dim s As String
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "modPMCCSQL", "ExportPHB2SQLServer"

    If (Cover.Range("Cover.ProjectName").value <> "") And _
        (Cover.Range("Cover.ProjectNo").value <> "") Then
            If CheckAdminSQL Then
                'first create xml string
                Export.CreateXml s, sxml
                
                If sxml <> "" Then
                    'connect to sqlserverdb
                    cnn.Provider = "SQLOLEDB"
                    cnn.Properties("Data Source") = Admin.Range("Admin.SQLServer").value
                    cnn.Properties("Initial Catalog") = Admin.Range("Admin.DataBase").value
                    cnn.Properties("Integrated Security").value = "SSPI"
                    cnn.ConnectionTimeout = Admin.Range("Admin.ConnectionTimeout").value
                    cnn.Open
                    'load xml to phb
                    cmd.ActiveConnection = cnn
                    cmd.CommandType = adCmdStoredProc
                    cmd.CommandText = "storephbxml"
                    cmd.Parameters(1).value = Cover.Range("Cover.ProjectNo").value
                    cmd.Parameters(2).value = Cover.Range("Cover.ProjectName").value
                    cmd.Parameters(3).value = sxml
                    If StatusHist.Range("StatusHist").rows.Count > 1 Then
                    'If Not IsEmpty(Cover.Range("Cover.StatusDate").Value) Then
'                        If (Cover.Range("Cover.StatusDate").Value <> "") Then
                        If (StatusHist.Range("StatusHist").Cells(StatusHist.Range("StatusHist").rows.Count, 1).value <> "") Then
'                            cmd.Parameters(4).Value = Format(Cover.Range("Cover.StatusDate").Value, Admin.Range("Admin.SQLDateFormat").Value)
                            cmd.Parameters(4).value = Format(StatusHist.Range("StatusHist").Cells(StatusHist.Range("StatusHist").rows.Count, 1).value, Admin.Range("Admin.SQLDateFormat").value)
                        Else
                            cmd.Parameters(4).value = Null
                        End If
                    Else
                        cmd.Parameters(4).value = Null
                    End If
                    cmd.Execute
                    'get ID to see if upload ok
                    rst.Open "exec getphbid '" & Cover.Range("Cover.ProjectNo").value & "','" & Cover.Range("Cover.ProjectName").value & "'", cnn
                    If rst.EOF Then
                        AppStopMsg appGetLOCText("msgPHBNotInDatabase")
                        rst.Close
                    Else
                        i = rst!pp_ID.value
                        If Not (i > 0) Then
                            AppStopMsg appGetLOCText("msgPHBNotInDatabase")
                        Else
                            AppInfoMsg appGetLOCText("done")
                        End If
                    End If
                    rst.Close
                    Set rst = Nothing
                    cnn.Close
                    Set cnn = Nothing
                Else
                    AppStopMsg appGetLOCText("msgXMLFailed")
                End If
            End If
    Else
        AppStopMsg appGetLOCText("msgPnameAndnorequired")
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    If InStr(err.Description, "DBNETLIB") > 0 Then
        AppStopMsg appGetLOCText("msgSQLConnectError")
    Else
        AppErrMsg "modPMCCSQL.ExportPHB2SQLServer error:"
    End If
    Resume subend

End Sub
Attribute VB_Name = "modProperties"
'---------------------------------------------------------------------------------------
' Module    : modProperties
' Author    : wm
' Date      : 08.02.2011
' Purpose   : This module provides functionality to store data within a sheet's
'             CustomProperties collection object. It also has an encryption feature
'             to prevent unauthorized reading of this data.
'---------------------------------------------------------------------------------------

Option Explicit
Option Private Module


'---------------------------------------------------------------------------------------
' GetCustomProperty
' retrieves and decrypts information stored inside the CustomProperties collection of a
' Worksheet
' @date     08.02.2011
' @author   wm
' @version  1.0
' @param    sht         Worksheet to get the CustomProperty from
' @param    cpName      name of the CustomProperty (cleartext)
' @return   String      value of the CustomProperty (cleartext)
'---------------------------------------------------------------------------------------
'
Public Function GetCustomProperty(sht As Worksheet, cpname As String, Optional index As Integer = -1) As String

    Dim i As Integer
    Dim bexists As Boolean
    
    On Error GoTo suberr
    'used from the UI Handler so no way to register in callstack
    'modStack.PushCallStack "modProperties", "GetCustomProperty"

    'if called via index
    If index >= 0 Then
        GetCustomProperty = Decrypt(sht.CustomProperties.Item(index).Name)
        GoTo subend
    End If

    'if called via property name
    For i = 1 To sht.CustomProperties.Count
        If sht.CustomProperties.Item(i).Name = Encrypt(cpname) Then
            bexists = True
            Exit For
        End If
    Next
    
    If bexists Then
        If Not sht.CustomProperties.Item(i).value = "" Then
            GetCustomProperty = Decrypt(sht.CustomProperties.Item(i).value)
        Else
            GetCustomProperty = ""
        End If
    Else
        GetCustomProperty = ""
    End If

subend:
    'modStack.PopCallStack
    Exit Function
suberr:
    
    If Not err.Number = 7 Then AppErrMsg "modProperties.GetCustomProperty error:"
    Resume subend

End Function


'---------------------------------------------------------------------------------------
' SetCustomProperty
' encrypts and stores a string inside the CustomProperties collection of a Worksheet
' @date     08.02.2011
' @author   wm
' @version  1.0
' @param    sht         Worksheet to store the CustomProperty in
' @param    cpName      name of the CustomProperty (cleartext)
' @param    cpValue     value of the CustomProperty (cleartext)
'---------------------------------------------------------------------------------------
'
Public Sub SetCustomProperty(sht As Worksheet, cpname As String, cpValue As String)
    Dim i As Integer
    Dim bexists As Boolean
    Dim s As String
    
    On Error GoTo suberr
    modStack.PushCallStack "modProperties", "SetCustomProperty"

    For i = 1 To sht.CustomProperties.Count
        If sht.CustomProperties.Item(i).Name = Encrypt(cpname) Then
            bexists = True
            Exit For
        End If
    Next
    
    If cpValue = "" Then
        s = ""
    Else
        s = Encrypt(cpValue)
    End If
    If bexists Then
        sht.CustomProperties.Item(i).value = s
    Else
        sht.CustomProperties.Add Encrypt(cpname), s
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modProperties.SetCustomProperty error:"
    Resume subend

End Sub


'---------------------------------------------------------------------------------------
' DeleteCustomProperty
'
' @date     21.02.2011
' @author   wm
' @version  1.0
' @param    sht         Worksheet to remove the CustomProperty from
' @param    cpName      name of the CustomProperty (cleartext)
'---------------------------------------------------------------------------------------
'
Public Sub DeleteCustomProperty(sht As Worksheet, cpname As String)
    
    Dim i As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "modProperties", "GetCustomProperty"

    For i = 1 To sht.CustomProperties.Count
        If sht.CustomProperties.Item(i).Name = Encrypt(cpname) Then
            sht.CustomProperties.Item(i).Delete
            Exit For
        End If
    Next
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modProperties.GetCustomProperty error:"
    Resume subend

End Sub


'---------------------------------------------------------------------------------------
' PrintCostomProperties
' list all items stored in the CustomProperties collection of a specified Worksheet
' @date     08.02.2011
' @author   wm
' @version  1.0
' @param    sht             Worksheet to get the CustomProperties from
' @param    [decrypted]     false: show encrypted strings   (default)
'                           true:  show decrypted strings
'---------------------------------------------------------------------------------------
'
Public Sub PrintCostomProperties(sht As Worksheet, Optional decrypted As Boolean = False)

    Dim i As Integer
    On Error GoTo suberr
    'modStack.PushCallStack "modProperties", "PrintCostomProperties"

    Debug.Print "* Overview of Custom Properties for " & sht.CodeName
    For i = 1 To sht.CustomProperties.Count
        If Not decrypted Then
            Debug.Print "  - index: " & i & vbTab & sht.CustomProperties.Item(i).Name & ": " & sht.CustomProperties.Item(i)
        Else
            Debug.Print "  - index: " & i & vbTab & Decrypt(sht.CustomProperties.Item(i).Name) & ": " & Decrypt(sht.CustomProperties.Item(i))
        End If
    Next

subend:
    'modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modProperties.PrintCostomProperties error:"
    Resume subend

End Sub

 
'---------------------------------------------------------------------------------------
' Encrypt
' encrypt a string using an XOR-cipher (One-Time-Pad)
' @date     08.02.2011
' @author   wm
' @version  1.0
' @param    Text        string to encrypt
' @param    [Key]       key used for encryption. this key has to be random and longer
'                       than the message itself to make the encryption uncrackable.
' @return   String      ciphertext
'---------------------------------------------------------------------------------------
'
Private Function Encrypt(Text As String, Optional key As String = CODE_KEY) As String
    
    Dim lIndex As Long
    Dim sResult As String
    Dim iTemp As Integer
    Dim sTemp As String
    Dim iValue1 As Integer
    Dim iValue2 As Integer
    
    
    For lIndex = 1 To Len(Text)
        'convert character in Text
        iValue1 = Asc(Mid$(Text, lIndex, 1))
        'convert character in key
        iValue2 = Asc(Mid$(key, ((lIndex Mod Len(key)) + 1), 1))
        
        'XOR the two values
        iTemp = (iValue1 Xor iValue2)
        sTemp = Hex(iTemp)
        If Len(sTemp) = 1 Then sTemp = "0" & sTemp
        
        'append new hex value
        sResult = sResult + sTemp
    Next lIndex
    Encrypt = sResult
End Function


'---------------------------------------------------------------------------------------
' Decrypt
' decrypt a string using an XOR-cipher (One-Time-Pad)
' @date     08.02.2011
' @author   wm
' @version  1.0
' @param    Text        ciphertext to decrypt
' @param    [Key]       key used for decryption. This has to be the same key that was
'                       used for encryption.
' @return   String      cleartext
'---------------------------------------------------------------------------------------
'
Private Function Decrypt(Text As String, Optional key As String = CODE_KEY) As String
    
    Dim lIndex As Long
    Dim sResult As String
    Dim iValue1 As Integer
    Dim iValue2 As Integer
    
    
    For lIndex = 1 To (Len(Text) / 2)
        iValue1 = val("&H" & (Mid$(Text, (2 * lIndex) - 1, 2)))
        iValue2 = Asc(Mid$(key, ((lIndex Mod Len(key)) + 1), 1))
        sResult = sResult + Chr(iValue1 Xor iValue2)
    Next lIndex
    Decrypt = sResult
End Function




'---------------------------------------------------------------------------------------
' ListAllCustomProperties
' print all CustomProperties of all sheets to the console. set decrypt to false to see
' encrypted data
' @date     14.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub ListAllCustomProperties()
    
    Dim Decrypt As Boolean
    Dim sht As Worksheet
    Decrypt = False
    
    For Each sht In ThisWorkbook.Worksheets
        PrintCostomProperties sht, Decrypt
    Next
    
End Sub






'---------------------------------------------------------------------------------------
' deprecated
'---------------------------------------------------------------------------------------

Attribute VB_Name = "modRibbon"
Option Explicit

Dim gRibbonUI As IRibbonUI
Public bnoRibbonUpdate As Boolean
'Public MyTag As String
'Public ColNum As Integer
Dim IndexOfSelectedItem As Integer
Dim ItemCount As Integer
Dim ListItemsRg As Range
#If VBA7 Then
    Public Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef destination As Any, ByRef source As Any, ByVal length As Long)
#Else
    Public Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef destination As Any, ByRef source As Any, ByVal length As Long)
#End If


'Callback for customUI.onLoad
Sub ribbonloaded(ribbon As IRibbonUI)
    On Error Resume Next
    Set gRibbonUI = ribbon
    Config.Range("Config.RibbonUI").value = ObjPtr(ribbon)
    'we activate the PMCC ribbon when opening
    'this only works in OFFICE 2010 and higher
    gRibbonUI.ActivateTab "TABPMCCPHB"
    On Error GoTo 0
End Sub

#If VBA7 Then
Function GetRibbon(ByVal lRibbonPointer As LongPtr) As Object
#Else
Function GetRibbon(ByVal lRibbonPointer As Long) As Object
#End If
        Dim objRibbon As Object
        CopyMemory objRibbon, lRibbonPointer, LenB(lRibbonPointer)
        Set GetRibbon = objRibbon
        Set objRibbon = Nothing
End Function


'Call to make Excel rebuild the ribbon
'Tag = "*" >> show all
'Tag = "" >> show nothing of the tagged elements in the ribbon
'Tag = "GRPTAB" >> show only GRPTAB of the tagged elements in the ribbon
Sub ShowRibbon(Optional Tag As String = "")
    If gRibbonUI Is Nothing Then
'        MsgBox "Error, gRibbonUI object is nothing, Save/Restart your workbook"
        Set gRibbonUI = GetRibbon(Config.Range("Config.RibbonUI").value)
        gRibbonUI.Invalidate
        If DEBUG_MODE Then Debug.Print "recovered ribbon"
    Else
        gRibbonUI.Invalidate
    End If
End Sub

Sub RIBBON_GetVisible(control As IRibbonControl, ByRef visible)
' here we come for each ribbonelement (group/button/..) with a getvisible callback
' when reloading the ribbon
' so here we can decide, depending on activesheet what to hide or show....
visible = False
Select Case LCase(ActiveSheet.CodeName)
    Case "cover"
        If (control.Tag = "GRPCOV") Then visible = True
        If ModuleExists("SQLServerExport") Then
            If (control.Tag = "COVMOD1") Then visible = True
        End If
        'depending on KISS or not we hide/show certain tags
        If ((sActiveLicense = "K") Or (sActiveLicense = "C")) Then
            If (control.Tag = "COVKISS") Then visible = True
        Else
            If (control.Tag = "COVNOKISS") Then visible = True
        End If
    Case "contents"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "GRPCNT") Then visible = True
        If ModuleExists("MSPImport") Then
            If (control.Tag = "CNTMOD1") Then visible = True
        End If
        If ModuleExists("CustomSheets") Then
            If (control.Tag = "CNTMOD2") Then visible = True
        End If
    Case "team"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "GRPORG") Then visible = True
    Case "contract"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "GRPUPD") Then visible = True
        If (control.Tag = "GRPCON") Then visible = True
    Case "plan"
        'depending on KISS or not we hide/show certain tags
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
            If (control.Tag = "GRPUPD") Then visible = True
            If (control.Tag = "PLNNOKISS") Then visible = True
        End If
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "GRPPLN") Then visible = True
        If ModuleExists("MSPImport") Then
            If (control.Tag = "PLNMOD1") Then visible = True
        End If
        If ModuleExists("SubProjectImport") Then
            'only show subprojectimport when its a program phb
            If (InStr(LCase(Cover.Range("Cover.Complexity").value), "program") > 0) Then
                If (control.Tag = "PLNMOD3") Then visible = True
            End If
        End If
        If ModuleExists("PersonalPlanning") Then
            If (control.Tag = "PLNMOD2") Then visible = True
        End If
    Case "raci"
        If (control.Tag = "GRPUPD") Then visible = True
    Case "wbs"
        If (control.Tag = "GRPUPD") Then visible = True
        If (control.Tag = "GRPPSP") Then visible = True
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
            If (control.Tag = "PSPNOKISS") Then visible = True
        End If
    Case "wp"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "GRPWP_") Then visible = True
    Case "mst"
        If (control.Tag = "GRPUPD") Then visible = True
        If (control.Tag = "GRPMST") Then visible = True
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
            If (control.Tag = "MSTNOKISS") Then visible = True
        End If
    Case "costplan"
        If (control.Tag = "GRPUPD") Then visible = True
    Case "workplan"
        If (control.Tag = "GRPUPD") Then visible = True
    Case "cost"
        If (control.Tag = "GRPUPD") Then visible = True
'        If (control.Tag = "GRPRC_") Then visible = True
    Case "work"
        If (control.Tag = "GRPUPD") Then visible = True
       ' If (control.Tag = "GRPRC_") Then visible = True
    Case "gantt"
        If (control.Tag = "GRPUPD") Then visible = True
        If (control.Tag = "GRPGNT") Then visible = True
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
            If (control.Tag = "GNTNOKISS") Then visible = True
        End If
    Case "context"
        If (control.Tag = "GRPTAB") Then visible = True
    Case "context_kiss"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "TABMNU1") Then visible = True
        If (control.Tag = "GRPCTK") Then visible = True
    Case "environment"
        'If (control.Tag = "GRPUPD") Then visible = True
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "TABMNU1") Then visible = True
        If (control.Tag = "GRPSTK") Then visible = True
    Case "risk"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "TABMNU1") Then visible = True
        If (control.Tag = "GRPRSK") Then visible = True
    Case "risk_kiss"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "TABMNU1") Then visible = True
        If (control.Tag = "GRPRKK") Then visible = True
    Case "com"
        If (control.Tag = "GRPTAB") Then visible = True
    Case "changes"
        If (control.Tag = "GRPTAB") Then visible = True
    Case "rules"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "GRPRLS") Then visible = True
    Case "statusreport"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "GRPUPD") Then visible = True
        If (control.Tag = "GRPSTS") Then visible = True
    Case "meeting"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "GRPMTG") Then visible = True
        If ModuleExists("OutlookExport") Then
            If (control.Tag = "MTGMOD1") Then visible = True
        End If
        'depending on KISS or not we hide/show certain tags
        If ((sActiveLicense <> "K") And (sActiveLicense <> "C")) Then
            If (control.Tag = "MTGNOKISS") Then visible = True
        End If
    Case "decisions"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "TABMNU1") Then visible = True
        If (control.Tag = "GRPDEC") Then visible = True
    Case "info"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "TABMNU1") Then visible = True
        If (control.Tag = "GRPINF") Then visible = True
    Case "actions"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "TABMNU1") Then visible = True
        If (control.Tag = "GRPACT") Then visible = True
    Case "closure"
        If (control.Tag = "GRPUPD") Then visible = True
        If (control.Tag = "GRPTAB") Then visible = True
    Case "mta"
        If (control.Tag = "GRPMTA") Then visible = True
    Case "admin"
        If (control.Tag = "GRPADM") Then visible = True
    Case "config_lic"
        If (control.Tag = "GRPCFG") Then visible = True
    Case "changerequest"
        If (control.Tag = "GRPTAB") Then visible = True
        If (control.Tag = "GRPUPD") Then visible = True
        If (control.Tag = "GRPCRF") Then visible = True
    Case "changerequestlist"
        If (control.Tag = "GRPCRL") Then visible = True
End Select

'Debug.Print "RIBBON_getvisible: " + CStr(control.ID) + ", " + CStr(control.Tag) + "," + ActiveSheet.Name
'    If MyTag = "show" Then
'        visible = True
'    Else
'        If control.Tag Like MyTag Then
'            visible = True
'        Else
'            visible = False
'        End If
'    End If
End Sub

Sub RIBBON_GetLabel(ByRef control As IRibbonControl, _
                 ByRef ReturnValue As Variant)
    On Error Resume Next
    ReturnValue = Application.WorksheetFunction.VLookup(control.id, _
        RibbonConfig.Range("RibbonLoc"), Cover.Range("Cover.LOC").value, False)

    If err.Number > 0 Then
        ReturnValue = "Error"
        err.clear
    End If
    On Error GoTo 0
End Sub

'callback getpressed for checkbox value
Sub RIBBON_GetPressed(control As IRibbonControl, ByRef pressedState)
    pressedState = False
    Select Case control.id
    Case "PSPCHK1"
        If WBS.Range("WBS.MarkNodes").value = True Then
            pressedState = True
        End If
    Case "GNTCHK1"
        If Gantt.Range("Gantt.ShowDep").value = True Then
            pressedState = True
        End If
    Case "CRLCHK1"
        If ChangeRequestList.Range("ChangeRequestList.ShowDashBoard").value = True Then
            pressedState = True
        End If
    Case "CONCHK1"
        If Contract.Range("Contract.ShowBaselineDates").value = True Then
            pressedState = True
        End If
    Case Else
        MsgBox "RIBBON_GetPressed: unknown controlID: " + control.id
    End Select
End Sub

'Callback getContent for the Dynamic Menu
Sub RIBBON_dynamicMenuContent(control As IRibbonControl, ByRef returnedVal)
    Dim xml As String
    Select Case control.id
        Case "NAVMNU1"
            xml = GetNavMenuXML
            gRibbonUI.InvalidateControl ("NAVMNU1")
        Case "PLNMNU1"
            xml = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & _
                  "<button id=""PLNDBTN" + "cmdPlus1Day" + """ label=""" + appGetLOCText("cmdPlus1Day") + """ onAction=""RIBBON_BtnClicked""/>" & _
                  "<button id=""PLNDBTN" + "cmdPlus1Week" + """ label=""" + appGetLOCText("cmdPlus1Week") + """ onAction=""RIBBON_BtnClicked""/>" & _
                  "<button id=""PLNDBTN" + "cmdMinus1Day" + """ label=""" + appGetLOCText("cmdMinus1Day") + """ onAction=""RIBBON_BtnClicked""/>" & _
                  "<button id=""PLNDBTN" + "cmdMinus1Week" + """ label=""" + appGetLOCText("cmdMinus1Week") + """ onAction=""RIBBON_BtnClicked""/>" & _
                  "</menu>"
            gRibbonUI.InvalidateControl ("PLNMNU1")
    End Select
    returnedVal = xml
    'We use this line because we want to run this code every time to see
    'if we have changed the Language dropdown if we click on the Dynamic menu
    'RDBDynamicMenu is the ID of the dynamic menu control that run this macro named
    'RDBdynamicMenuContent. Without this line it only run the code when you open the workbook
End Sub

Private Function GetNavMenuXML() As String
Dim xml As String
Dim c
xml = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">"

For Each c In contents.Range("Contents.Complexity").offset(0, 1)
    If c.value = "x" Then
        xml = xml + "<button id=""NAVDBTN" + c.offset(0, -2).value + """ label=""" + c.offset(0, -3).value + """ onAction=""RIBBON_BtnClicked""/>"
    End If
Next
xml = xml + "</menu>"
GetNavMenuXML = xml

End Function

'======================================================================================
Sub RefreshRibbon()
    sActiveLicense = pStrVersion 'we update the sactivelicense variable to make sure it is up to date!!
    Call ShowRibbon
End Sub

''Callback for Dropdown getItemCount.
''Tells Excel how many items in the drop down.
Sub RIBBON_DDItemCount(control As IRibbonControl, ByRef returnedVal)
'    With Sheet1.Range("ListRange")
'        Set ListItemsRg = Range(.Cells(1), .offset(.rows.Count).End(xlUp))
'        ItemCount = ListItemsRg.rows.Count
'        returnedVal = ItemCount
'    End With
    Select Case control.id
        Case "COVDDL1"
            returnedVal = Config.Range("Config.Loc").Cells.Count
        Case "ORGDDL1"
            returnedVal = Config.Range("Config.Org").Cells.Count
        Case "PLNDDL1"
            returnedVal = Plan.Range("Plan.ViewDefinitions").Cells.Count
        Case "PLNDDL2"
            returnedVal = Config.Range("Config.PlanLevels").Cells.Count
        Case "WP_DDL1"
            returnedVal = Plan.Range("Plan.WPs").Cells.Count
        Case "WP_DDL2"
            returnedVal = Config.Range("Config.WPResponsibles").Cells.Count
        Case "WP_DDL3"
            returnedVal = Config.Range("Config.WPSpecFilter").Cells.Count
        Case "CNTDDL1"
            returnedVal = Config.Range("Config.PublishFormat").Cells.Count
        Case "GNTDDL1"
            returnedVal = Config.Range("Config.Gantt.ShowLevels").Cells.Count
        Case "GNTDDL2"
            returnedVal = Config.Range("Config.Gantt.Views").Cells.Count
        Case "STSDDL1"
            returnedVal = StatusHist.Range("StatusHist").Cells.Count
        Case "MTGDDL1"
            returnedVal = MeetingDetails.Range("MeetingDetails").Cells.Count
        Case "MTGDDL2"
            returnedVal = Config.Range("Config.DLNames").Cells.Count
        Case "CRFDDL1"
            returnedVal = ChangeRequestList.Range("ChangeRequestList.CRNR").Cells.Count
        Case Else
            returnedVal = 0
    End Select
End Sub

''Callback for dropdown getItemLabel.
''Called once for each item in drop down.
''If DDItemCount tells Excel there are 10 items in the drop down
''Excel calls this sub 10 times with an increased "index" argument each time.
''We use "index" to know which item to return to Excel.
Sub RIBBON_DDListItem(control As IRibbonControl, index As Integer, ByRef returnedVal)
'    returnedVal = ListItemsRg.Cells(index + 1).Value ''index is 0-based, our list is 1-based so we Add 1#
    Select Case control.id
        Case "COVDDL1"
            returnedVal = Config.Range("Config.Loc").Cells(index + 1)
        Case "ORGDDL1"
            returnedVal = Config.Range("Config.Org").Cells(index + 1)
        Case "PLNDDL1"
            returnedVal = Plan.Range("Plan.ViewDefinitions").Cells(index + 1)
        Case "PLNDDL2"
            returnedVal = Config.Range("Config.PlanLevels").Cells(index + 1)
        Case "WP_DDL1"
            returnedVal = Plan.Range("Plan.WPs").Cells(index + 1)
        Case "WP_DDL2"
            returnedVal = Config.Range("Config.WPResponsibles").Cells(index + 1)
        Case "WP_DDL3"
            returnedVal = Config.Range("Config.WPSpecFilter").Cells(index + 1)
        Case "CNTDDL1"
            returnedVal = Config.Range("Config.PublishFormat").Cells(index + 1)
        Case "GNTDDL1"
            returnedVal = Config.Range("Config.Gantt.ShowLevels").Cells(index + 1)
        Case "GNTDDL2"
            returnedVal = Config.Range("Config.Gantt.Views").Cells(index + 1)
        Case "STSDDL1"
            returnedVal = StatusHist.Range("StatusHist").Cells(index + 1)
        Case "MTGDDL1"
            returnedVal = MeetingDetails.Range("MeetingDetails").Cells(index + 1)
        Case "MTGDDL2"
            returnedVal = Config.Range("Config.DLNames").Cells(index + 1)
        Case "CRFDDL1"
            returnedVal = ChangeRequestList.Range("ChangeRequestList.CRNR").Cells(index + 1)
        Case Else
            returnedVal = 0
    End Select
End Sub

''Drop down change handler.
''Called when a drop down item is selected.
Sub RIBBON_DDOnAction(control As IRibbonControl, id As String, index As Integer)
Dim bprotect As Boolean
    ''All we do is note the index number of the item selected.
    ''We use this in sub DDItemSelectedIndex below to reselect the current
    ''item, if possible, after an invalidate.
    Select Case control.id
        Case "COVDDL1"
            Cover.Range("Cover.SelectedLoc").value = index + 1
            Cover.ddlChangeLOC
        Case "ORGDDL1"
            Config.Range("Config.SelectedOrg").value = index + 1
            Team.ddlSetView
        Case "PLNDDL1"
'            If Plan.ProtectContents Then
'                UnprotectSheet Plan
'                bprotect = True
'            End If
            Plan.Range("Plan.SelectedView").value = index + 1
            Plan.UserAction_ChangeView
'            If bprotect Then ProtectSheet Plan
        Case "PLNDDL2"
'            If Plan.ProtectContents Then
'                UnprotectSheet Plan
'                bprotect = True
'            End If
            Plan.Range("Plan.CurrentShowLevel").value = index + 1
            Plan.UserAction_ShowLevel
'            If bprotect Then ProtectSheet Plan
        Case "WP_DDL1"
'            If WPDetails.ProtectContents Then
'                UnprotectSheet WPDetails
'                bprotect = True
'            End If
            WPDetails.Range("WPDetails.WBSNo").value = index + 1
'            If bprotect Then ProtectSheet WPDetails
            wp.cboWPs_Change
        Case "WP_DDL2"
'            If WPDetails.ProtectContents Then
'                UnprotectSheet WPDetails
'                bprotect = True
'            End If
            WPDetails.Range("WPDetails.Responsible").value = index + 1
'            If bprotect Then ProtectSheet WPDetails
        Case "WP_DDL3"
'            If WPDetails.ProtectContents Then
'                UnprotectSheet WPDetails
'                bprotect = True
'            End If
            wp.Range("WP.WPSpecFilter").value = index + 1
'            If bprotect Then ProtectSheet WPDetails
        Case "CNTDDL1"
'            If contents.ProtectContents Then
'                UnprotectSheet contents
'                bprotect = True
'            End If
            contents.Range("Contents.SelectedFormat").value = index + 1
'            If bprotect Then ProtectSheet contents
        Case "GNTDDL1"
'            If Gantt.ProtectContents Then
'                UnprotectSheet Gantt
'                bprotect = True
'            End If
            Gantt.Range("Gantt.ShowLevel").value = index + 1
'            If bprotect Then ProtectSheet Gantt
        Case "GNTDDL2"
'            If Gantt.ProtectContents Then
'                UnprotectSheet Gantt
'                bprotect = True
'            End If
            Gantt.Range("Gantt.TimeScale").value = index + 1
'            If bprotect Then ProtectSheet Gantt
        Case "STSDDL1"
'            If StatusHist.ProtectContents Then
'                UnprotectSheet StatusHist
'                bprotect = True
'            End If
            StatusHist.Range("StatusHist.Selected").value = index + 1
'            If bprotect Then ProtectSheet StatusHist
            Statusreport.cboLoad
            EnsureUIProtection Statusreport
        Case "MTGDDL1"
'            If MeetingDetails.ProtectContents Then
'                UnprotectSheet MeetingDetails
'                bprotect = True
'            End If
            MeetingDetails.Range("MeetingDetails.Selected").value = index + 1
'            If bprotect Then ProtectSheet MeetingDetails
            Meeting.cboMeeting_Changed
        Case "MTGDDL2"
'            If Meeting.ProtectContents Then
'                UnprotectSheet Meeting
'                bprotect = True
'            End If
            Meeting.Range("Meeting.DL").value = index + 1
'            If bprotect Then ProtectSheet Meeting
            Meeting.ddlDistributionList_Selected
        Case "CRFDDL1"
            ChangeRequest.Range("ChangeRequest.Selected").value = index + 1
            ChangeRequest.cboLoad
        Case Else
            Debug.Print "RIBBON_DDL onaction unknown"
    End Select
End Sub

''Returns index of item to display.
''To display current item after the drop down is invalidated.
Sub RIBBON_DDItemSelectedIndex(control As IRibbonControl, ByRef returnedVal)
    If IndexOfSelectedItem > ItemCount - 1 Then IndexOfSelectedItem = ItemCount - 1 ''In case list was shortened
    returnedVal = IndexOfSelectedItem
    Select Case control.id
        Case "COVDDL1"
            returnedVal = Cover.Range("Cover.SelectedLoc").value - 1
        Case "ORGDDL1"
            returnedVal = Config.Range("Config.SelectedOrg").value - 1
        Case "PLNDDL1"
            returnedVal = Plan.Range("Plan.SelectedView").value - 1
        Case "PLNDDL2"
            returnedVal = Plan.Range("Plan.CurrentShowLevel").value - 1
        Case "WP_DDL1"
            returnedVal = WPDetails.Range("WPDetails.WBSNo").value - 1
        Case "WP_DDL2"
            returnedVal = WPDetails.Range("WPDetails.Responsible").value - 1
        Case "WP_DDL3"
            returnedVal = wp.Range("WP.WPSpecFilter").value - 1
        Case "CNTDDL1"
            returnedVal = contents.Range("Contents.SelectedFormat").value - 1
        Case "GNTDDL1"
            returnedVal = Gantt.Range("Gantt.ShowLevel").value - 1
        Case "GNTDDL2"
            returnedVal = Gantt.Range("Gantt.TimeScale").value - 1
        Case "STSDDL1"
            returnedVal = StatusHist.Range("StatusHist.Selected").value - 1
        Case "MTGDDL1"
            returnedVal = MeetingDetails.Range("MeetingDetails.Selected").value - 1
        Case "MTGDDL2"
            returnedVal = Meeting.Range("Meeting.DL").value - 1
        Case "CRFDDL1"
            returnedVal = ChangeRequest.Range("ChangeRequest.Selected").value - 1
        Case Else
            returnedVal = 0
    End Select
End Sub

'------- End DD Code --------


'--------------------------------------------------------
'''Worksheet change event handler
'''A change in the range ListRange causes the ribbon to be invalidated
'Private Sub Worksheet_Change(ByVal Target As Range)
'    If Not Intersect(Target, Range("ListRange")) Is Nothing Then RedoRib
'End Sub
'
'Sub Macro2(ByRef control As IRibbonControl)
'    MsgBox "Macro 2 in menu"
'End Sub
'

''Callback for MyfirstGroup getLabel
'Sub DisplayRibbonTab()
''Show only the Tab, Group or Control with the Tag "MyPersonalTab"
'    Call RefreshRibbon(Tag:="MyPersonalTab")
'End Sub
'
'Sub DisplayRibbonTab_2()
''Show every Tab, Group or Control with every Tag that start with "My"
'    Call RefreshRibbon(Tag:="My*")
'End Sub
'
'Sub DisplayRibbonTab_3()
''Show every Tab, Group or Control(we use the wildcard "*")
'    Call RefreshRibbon(Tag:="*")
'End Sub

'Note: in this example every macro above will show you the custom tab.
'If you add more custom tabs this will be different

'Sub HideEveryTab()
''Hide every Tab, Group or Control(we use Tag:="")
'    Call RefreshRibbon(Tag:="")
'End Sub

Attribute VB_Name = "modRibbonHandler"
Option Explicit

'all buttonclicks on the PMCC PHB ribbon come through this sub
'we use a namingconvention for the buttons in order to process the click in this sub
'first 3 letters contain group of the button (eg PHBBTN1)
Sub RIBBON_BtnClicked(ByRef control As IRibbonControl)
Dim sgroup As String
sgroup = Left(control.id, 3)
Select Case sgroup
    Case "NAV"
        ProcessNavClick control
    Case "PHB"
        ProcessPHBClick control
    Case "TAB"
        ProcessTabClick control
    Case "COV"
        ProcessCovClick control
    Case "UPD"
        ProcessUpdClick control
    Case "CNT"
        ProcessCntClick control
    Case "TEA"
        ProcessTeaClick control
    Case "ORG"
        ProcessOrgClick control
    Case "PLN"
        ProcessPlnClick control
    Case "PSP"
        ProcessPSPClick control
    Case "WP_"
        ProcessWP_Click control
    Case "MST"
        ProcessMSTClick control
    Case "RC_"
        ProcessRC_Click control
    Case "STK"
        ProcessSTKClick control
    Case "RSK"
        ProcessRSKClick control
    Case "RKK"
        ProcessRKKClick control
    Case "CTK"
        ProcessCTKClick control
    Case "RLS"
        ProcessRLSClick control
    Case "STS"
        ProcessSTSClick control
    Case "MTG"
        ProcessMTGClick control
    Case "DEC"
        ProcessDECClick control
    Case "INF"
        ProcessINFClick control
    Case "ACT"
        ProcessACTClick control
    Case "MTA"
        ProcessMTAClick control
    Case "ADM"
        ProcessADMClick control
    Case "CFG"
        ProcessCFGClick control
    Case "CRF"
        ProcessCRFClick control
    Case "CRL"
        ProcessCRLClick control
    Case Else
        MsgBox "RIBBON_BtnClicked: unknown controlID: " + control.id + " - " + sgroup
End Select
'MsgBox "Ribbonbuttonclicked: " + control.ID + " - " + sgroup
End Sub

Sub RIBBON_ChkClicked(control As IRibbonControl, pressed As Boolean)
Dim bprotect As Boolean
Select Case control.id
Case "PSPCHK1"
'        If WBS.ProtectContents Then
'            UnprotectSheet WBS
'            bprotect = True
'        End If
        WBS.Range("WBS.MarkNodes").value = pressed
'        If bprotect Then ProtectSheet WBS
Case "GNTCHK1"
'        If Gantt.ProtectContents Then
'            UnprotectSheet Gantt
'            bprotect = True
'        End If
        Gantt.Range("Gantt.ShowDep").value = pressed
'        If bprotect Then ProtectSheet Gantt
Case "CRLCHK1"
        ChangeRequestList.ShowDashboard_Click
        ChangeRequestList.Range("ChangeRequestList.ShowDashBoard").value = pressed
Case "CONCHK1"
    Contract.ShowBaselineDates_Click
    Contract.Range("Contract.ShowBaselineDates").value = pressed
Case Else
        MsgBox "RIBBON_ChkClicked: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessNavClick(ByRef control As IRibbonControl)
Dim ssheet As String
If Left(control.id, 7) = "NAVDBTN" Then
    ssheet = Right(control.id, Len(control.id) - 7)
    Sheets(ssheet).Select
Else
    Select Case Right(control.id, Len(control.id) - 3)
        Case "BTN1"
            Plan.Select
        Case "BTN2"
            Cover.Select
    End Select
End If
End Sub

Private Sub ProcessPHBClick(ByRef control As IRibbonControl)
'button name is like :PHBBTN1
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Cover.cmdExport_Click
    Case "BTN2"
        Cover.cmdImport_Click
    Case "BTN3"
        contents.cmdExportPDF_Click
    Case "BTN4"
        contents.cmdPrint_Click
    Case Else
        MsgBox "ProcessPHBClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessTabClick(ByRef control As IRibbonControl)
'button name is like :TABBTN1
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
On Error Resume Next
If ActiveSheet.CodeName = "Plan" Then
    Select Case sbutton
        Case "BTN1"
            Plan.UserAction_CreateNewTask
       Case "BTN2"
            Plan.UserAction_DeleteTask
    End Select
Else
    Select Case sbutton
        Case "BTN1"
            ActiveSheet.cmdInsert_Click
        Case "BTN2"
            ActiveSheet.cmdDelete_Click
        Case "MNU1BTN1"
            ActiveSheet.cmdAutoFilter_Click
        Case "MNU1BTN2"
            ActiveSheet.cmdSortAsc_Click
        Case "MNU1BTN3"
            ActiveSheet.cmdSortDesc_Click
        Case Else
            MsgBox "ProcessTabClick: unknown controlID: " + control.id
    End Select
End If
On Error GoTo 0
End Sub

Private Sub ProcessCovClick(ByRef control As IRibbonControl)
'button name is like :TABBTN1
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
On Error Resume Next
Select Case sbutton
    Case "BTN1"
        Cover.cmdImportPicture_Click
    Case "BTN2"
        Cover.cmdClearPicture_Click
    Case "BTN3"
        Cover.cmdFormatPicture_Click
    Case "BTN4"
        Cover.cmdInsertRole_Click
    Case "BTN5"
        Cover.cmdDeleteRole_Click
    Case "BTN6"
        Cover.cmdAdmin_Click
    Case "BTN7"
        Cover.cmdPublish2SQL_Click
    Case "BTN8"
        Admin.cmdClearPHB_Click
    Case Else
        MsgBox "ProcessCovClick: unknown controlID: " + control.id
End Select
On Error GoTo 0
End Sub

Private Sub ProcessUpdClick(ByRef control As IRibbonControl)
'button name is like :TABBTN1
Dim sbutton As String
Dim rCell As Range
sbutton = Right(control.id, Len(control.id) - 3)
On Error Resume Next
Select Case sbutton
    Case "BTN1"
        If ActiveSheet.CodeName = "Plan" Then
            'added 101215
            'when personplanningmode and orgunits in plan, then we will be switch to
            'personplanning and data will be lost, therefore first warning...
            Set rCell = Team.Range("Team.IsResourceRange").Find("x", , xlValues, xlWhole)
            If Not rCell Is Nothing Then
                If Plan.OrgUnitsInPlan Then
                    'when phb in programmode then switch to person planning should not be possible
                    If (InStr(LCase(Cover.Range("Cover.Complexity").value), "program") > 0) Then
                        AppStopMsg appGetLOCText("msgProgNoPersPlanning")
                        Exit Sub
                    End If
                    Select Case Cover.Range("Cover.LOC")
                        Case 3: If MsgBox("|fffd|nderungen seit der letzten Umstellung gehen verloren", vbOKCancel, "Achtung") = vbCancel Then Exit Sub
                        Case 2: If MsgBox("All changes since last switch of planning mode will be lost", vbOKCancel, "Caution") = vbCancel Then Exit Sub
                        Case Else: If MsgBox("All changes since last switch of planning mode will be lost", vbOKCancel, "Caution") = vbCancel Then Exit Sub
                    End Select
                    Plan.UpdatePlan_Click
                Else
                    Plan.UpdatePlan_Click
                End If
            Else
                Plan.UpdatePlan_Click
            End If
            
        Else
            ActiveSheet.cmdUpdate_Click
        End If
    Case Else
        MsgBox "ProcessUpdClick: unknown controlID: " + control.id
End Select
On Error GoTo 0
End Sub

Private Sub ProcessCntClick(ByRef control As IRibbonControl)
'button name is like :TABBTN1
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
On Error Resume Next
Select Case sbutton
    Case "BTN1"
        contents.cmdMoveEntryUp_Click
    Case "BTN2"
        contents.cmdMoveEntryDown_Click
    Case "BTN3"
        contents.cmdPublish_Click
    Case "BTN4"
        contents.cmdInsertSheet
    Case "BTN5"
        contents.cmdDeleteSheet
    Case Else
        MsgBox "ProcessCntClick: unknown controlID: " + control.id
End Select
On Error GoTo 0
End Sub


Private Sub ProcessTeaClick(ByRef control As IRibbonControl)
'button name is like :TABBTN1
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
On Error Resume Next
Select Case sbutton
    Case "BTN1"
        Team.cmdInsertDL_Click
    Case "BTN2"
        Team.cmdDeleteDL_Click
    Case Else
        MsgBox "ProcessTeaClick: unknown controlID: " + control.id
End Select
On Error GoTo 0
End Sub

Private Sub ProcessOrgClick(ByRef control As IRibbonControl)
'button name is like :TABBTN1
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
On Error Resume Next
Select Case sbutton
    Case "BTN1"
        Team.cmdInsertDL_Click
    Case "BTN2"
        Team.cmdDeleteDL_Click
    Case "BTN3"
        Team.ShowHideChart
    Case "BTN4"
        Team.cmdUpdate_Click
    Case Else
        MsgBox "ProcessOrgClick: unknown controlID: " + control.id
End Select
On Error GoTo 0
End Sub

Private Sub ProcessPlnClick(ByRef control As IRibbonControl)
'button name is like :TABBTN1
Dim sbutton As String
Dim scmd As String
sbutton = Right(control.id, Len(control.id) - 3)
On Error Resume Next
If Left(control.id, 7) = "PLNDBTN" Then
    scmd = Right(control.id, Len(control.id) - 7)
    Select Case scmd
        Case "cmdPlus1Day"
            Plan.cmdPlus1Day_Click
        Case "cmdPlus1Week"
            Plan.cmdPlus1Week_Click
        Case "cmdMinus1Day"
            Plan.cmdMinus1Day_Click
        Case "cmdMinus1Week"
            Plan.cmdMinus1Week_Click
    End Select
Else
    sbutton = Right(control.id, Len(control.id) - 3)
    Select Case sbutton
        Case "BTN1"
            Plan.cmdShowHideBanner
        Case "BTN2"
            Plan.UserAction_SetMilestone
        Case "BTN3"
            Plan.UserAction_IndentTask
        Case "BTN4"
            Plan.UserAction_OutdentTask
        Case "BTN5"
            Plan.CutWP_Click
        Case "BTN6"
            Plan.CopyWP_Click
        Case "BTN7"
            Plan.InsertCutWP_Click
        Case "BTN8"
            Plan.cmdUpdateAllSheets_Click
        Case "BTN9"
            Plan.UserAction_SetBaseline
        Case "BTN10"
            Plan.cmdJumpToWP_Click
        Case "BTN11"
            Import.ImportMSProject
        Case "BTN12"
            Plan.cmdTogglePlanningMode
        Case "BTN13"
            Plan.cmdImportSubProject_Click
        Case Else
            MsgBox "ProcessTeaClick: unknown controlID: " + control.id
    End Select
End If
On Error GoTo 0
End Sub

Private Sub ProcessPSPClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        WBS.cmdGoToWP_Click
    Case Else
        MsgBox "ProcessPSPClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessWP_Click(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        wp.cmdUpdateResponsibles_Click
    Case "BTN2"
        wp.cmdSave_Click
    Case "BTN3"
        wp.cmdPrint_Click
    Case "BTN4"
        wp.cmdExport_Click
    Case "BTN5"
        wp.cmdImport_Click
    Case Else
        MsgBox "ProcessWP_Click: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessMSTClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        MST.cmdAutoFilter_Click
    Case "BTN2"
        MST.cmdShowHide_Click
    Case Else
        MsgBox "ProcessMSTClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessRC_Click(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        ActiveSheet.cmdShowDataTable_Click
    Case "BTN2"
        ActiveSheet.cmdHideDataTable_Click
    Case Else
        MsgBox "ProcessRC_Click: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessSTKClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Environment.cmdSetFormat_Click
    Case "BTN2"
        Environment.cmdClearFormat_Click
    Case "BTN3"
        Environment.UpdateChart
    Case "BTN4"
        Environment.cmdShowHide_Click
    Case Else
        MsgBox "ProcessSTKClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessRSKClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Risk.cmdSetFormat_Click
    Case "BTN2"
        Risk.cmdClearFormat_Click
    Case "BTN3"
        Risk.cmdShowHide_Click
    Case Else
        MsgBox "ProcessRSKClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessRKKClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Risk_kiss.cmdSetFormat_Click
    Case "BTN2"
        Risk_kiss.cmdClearFormat_Click
    Case Else
        MsgBox "ProcessRKKClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessCTKClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Context_kiss.cmdSetFormat_Click
    Case "BTN2"
        Context_kiss.cmdClearFormat_Click
    Case Else
        MsgBox "ProcessCTKClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessRLSClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Rules.cmdInsertPicture_Click
    Case "BTN2"
        Rules.cmdDeletePicture_Click
    Case Else
        MsgBox "ProcessRLSClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessSTSClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Statusreport.cmdSave_Click
    Case Else
        MsgBox "ProcessSTSClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessMTGClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Meeting.cmdSave_Click
    Case "BTN2"
        Meeting.cmdDeleteMeeting_Click
    Case "BTN3"
        Meeting.cmdSetInvitation_Click
    Case "BTN4"
        Meeting.cmdSetMinutes_Click
    Case "BTN5"
        Meeting.ShowHideTimes
    Case "BTN6"
        Meeting.SendViaOutlook
    Case "BTN7"
        Meeting.cmdUpdateDecActInfo_Click
    Case "BTN8"
        Meeting.Rbn_MakeSubPoint
    Case "BTN9"
        Meeting.Rbn_MakeMainPoint
    Case "BTN10"
        Meeting.CreateAppt
    Case Else
        MsgBox "ProcessMTGClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessDECClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Decisions.cmdSetFormat_Click
    Case "BTN2"
        Decisions.cmdClearFormat_Click
    Case Else
        MsgBox "ProcessDECClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessINFClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Info.cmdSetFormat_Click
    Case "BTN2"
        Info.cmdClearFormat_Click
    Case Else
        MsgBox "ProcessINFClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessACTClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Actions.cmdSetFormat_Click
    Case "BTN2"
        Actions.cmdClearFormat_Click
    Case Else
        MsgBox "ProcessACTClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessMTAClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
'    Case "BTN1"
'        MTA.cmdSave_Click
'    Case "BTN2"
'        MTA.cmdRemoveCurrentDay
'    Case "BTN3"
'        modSQL.GetMTAData
'    Case "BTN4"
'        MTA.cmdToggleFilter_Click
'    Case "BTN5"
'        MTA.cmdShowInvalid_Click
    Case "BTN6"
        MTA.cmdRefreshChart_Click
    Case "BTN7"
        If selection.Cells.Count = 1 Then
            If (InRange(selection, MTA.GetMTAHistoryTable.ValuesRange)) And (selection.Areas.Count = 1) Then
                MTA.setMSTColor selection
            End If
        End If
    Case Else
        MsgBox "ProcessMTAClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessADMClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Admin.cmdAdminSave_Click
    Case "BTN2"
        Plan.ResetBaseline
    Case "BTN3"
        Admin.cmdClearPHB_Click
    Case "BTN4"
        Admin.cmdAdminExport_Click
    Case "BTN5"
        Admin.cmdAdminImport_Click
    Case "BTN6"
        Admin.ChangePW
    Case "BTN7"
        modFunctions.SmoothGradient
    Case "BTN8"
        Admin.cmdRenameOrgUnits_Click
    Case Else
        MsgBox "ProcessADMClick: unknown controlID: " + control.id
End Select
End Sub


Private Sub ProcessCFGClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        Config_Lic.cmdFormat_Click
    Case "BTN2"
        Config_Lic.cmdPrepWB_Click
    Case "BTN3"
        Config_Lic.cmdSetLicense_Click
    Case "BTN4"
        Config_Lic.cmdImportPicture_Click
    Case "BTN5"
        Config_Lic.cmdSetHeaderColor_Click
    Case "BTN6"
        Config_Lic.cmdSetSubHeaderColor_Click
    Case "BTN7"
        Config_Lic.cmdSetHeaderFont_Click
    Case "BTN8"
        Config_Lic.cmdSetSubHeaderFont_Click
    Case "BTN9"
        Config_Lic.cmdDefaultSettings_Click
    Case Else
        MsgBox "ProcessCFGClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessCRFClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        ChangeRequest.cmdSave_Click
    Case Else
        MsgBox "ProcessCRFClick: unknown controlID: " + control.id
End Select
End Sub

Private Sub ProcessCRLClick(ByRef control As IRibbonControl)
Dim sbutton As String
sbutton = Right(control.id, Len(control.id) - 3)
Select Case sbutton
    Case "BTN1"
        ChangeRequestList.cmdJumpToCRF_Click
    Case Else
        MsgBox "ProcessCRLClick: unknown controlID: " + control.id
End Select
End Sub


Attribute VB_Name = "modSQL"
Option Explicit
Option Private Module

Public cTasks As Collection
Public cCostTypes As Collection
Public cDepartments As Collection


Public Function GetSQLData() As Boolean
    Dim cnn As New Connection
    Dim rst As New Recordset
    Dim R As Range
    Dim ic As Integer
    Dim icPID As Integer
    Dim ir As Integer
    Dim iPID As Integer
    Dim sProjectNo As String
    Dim Field As Field
    Dim Record As Record
    Dim task As TPGSQLTask
    Dim bAccessDenied As Boolean
    

    On Error GoTo suberr

    sProjectNo = Cover.Range("Cover.ProjectNo")
    If sProjectNo = "" Then
        AppStopMsg appGetLOCText("msgNoProjectNumber")
        GoTo subend
    End If
   
    'TODO: FIX security nicht optimal geloest, vgl. wuestenrot ppf loesung!
    cnn.Provider = "SQLOLEDB"
    cnn.Properties("Data Source") = Admin.Range("Admin.SQLServer").value
    cnn.Properties("Initial Catalog") = Admin.Range("Admin.DataBase").value
    cnn.Properties("Integrated Security").value = "SSPI"
    cnn.ConnectionTimeout = Admin.Range("Admin.ConnectionTimeout").value
    cnn.Open
    rst.Open "exec _PHB_GetAllProjectsResCanView '" & sProjectNo & "'", cnn
    If rst.Fields(0).value = 0 Then
        bAccessDenied = True
        AppStopMsg ("access denied!")
        GoTo subend
    End If
    rst.Close
    
    rst.Open "exec _PHB_GetTaskListForProjectNo '" & sProjectNo & "'", cnn
    Set cTasks = New Collection
    With rst
        Do
            Set task = New TPGSQLTask
            task.sProjectName = .Fields("ProjectName")
            task.sTaskName = .Fields("taskName")
            task.iIndex = .Fields("taskIndex")
            task.iOutlineLevel = .Fields("TaskOutlineLevel")
            task.dstart = .Fields("TaskStartDate")
            task.dfinish = .Fields("TaskFinishDate")
            task.dPctComplete = .Fields("TaskPercentCompleted")
            task.bIsMilestone = .Fields("TaskIsMilestone")
            task.bIsSummaryTask = .Fields("TaskIsSummary")
            task.sTaskGUID = .Fields("taskUID")
            task.sParentTaskGUID = .Fields("TaskParentUID")
            
            cTasks.Add task, task.sTaskGUID
            Set task = Nothing
            .MoveNext
        Loop Until .EOF
    End With
    rst.Close
    
    rst.Open "exec _PHB_GetAssignmentListForProjectNo '" & sProjectNo & "'", cnn
    Set cCostTypes = New Collection
    Set cDepartments = New Collection
    With rst
        Do
            Dim sCostType As String
            Dim sDepartment As String
            If Not IsNull(rst.Fields("CostType")) Then sCostType = rst.Fields("CostType")
            If Not IsNull(rst.Fields("CostType")) Then cCostTypes.Add sCostType, sCostType
            If Not IsNull(rst.Fields("OrgUnit")) Then
                sDepartment = rst.Fields("OrgUnit")
                cDepartments.Add sDepartment, sDepartment
                With cTasks.Item(.Fields("TaskUID"))
                    .AddAssignment rst.Fields("OrgUnit"), rst.Fields("ActWork"), rst.Fields("Work")
                    
                End With
            End If
            .MoveNext
        Loop Until .EOF
    End With
    GetSQLData = True
    

subend:
    On Error Resume Next
    rst.Close
    Set rst = Nothing
    cnn.Close
    Set cnn = Nothing
    Exit Function
suberr:
    If err.Number = 457 Then Resume Next    'key already in use -> ignore
    Debug.Print err.Number, err.Description
    Resume subend
End Function



Sub AddTestData()
    Dim task As TPGSQLTask
    
    With cTasks.Item(3)
        .AddAssignment "Marketing", 200, 400
        .AddAssignment "Gesch|fffd|ftsf|fffd|hrung", 500, 1000
    End With
    
    With cTasks.Item(4)
        .AddAssignment "Controlling", 100, 100
        '.AddAssignment "Gesch|fffd|ftsf|fffd|hrung", 500, 1000
    End With
    
    
End Sub



Public Sub PublishToSharepoint(sht As Worksheet, _
    Optional Folder As String = "", _
    Optional FileName As String = "", _
    Optional DateFormat As String = "YYYY.MM.DD", _
    Optional ExportAsImage As Boolean = True)

    Dim sfilename As String
    
    On Error GoTo suberr
    modStack.PushCallStack "modSQL", "PublishToSharepoint"

    If FileName = "" Then FileName = Cover.Range("Cover.ProjectName") & "_" & sht.Name
    If Folder = "" Then 'Folder = Admin.Range("Admin.SharepointLib").Text
        AppStopMsg (sht.Name & appGetLOCText("msgNoFolder"))
        GoTo subend
    End If
        
    Select Case sht.CodeName
        Case "Statusreport"
            If StatusHist.Cells(1, 1).value = 1 Then
                If Not MsgBox(appGetLOCText("msgNoStatusLoaded"), vbYesNo, "Project Handbook") = vbYes Then GoTo subend
            ElseIf Not Statusreport.IsLatestReportSelected Then
                If Not MsgBox(appGetLOCText("msgNotLatestReport"), vbYesNo, "Project Handbook") = vbYes Then GoTo subend
            End If
            
        Case "WP"
            If WPDetails.Cells(1, 1).value = 1 Then
                If Not MsgBox(appGetLOCText("msgNoWPLoaded"), vbYesNo, "Project Handbook") = vbYes Then GoTo subend
            End If
        Case "Meeting"
            If MeetingDetails.Cells(1, 1).value = 1 Then
                If Not MsgBox(appGetLOCText("msgNoMeetingLoaded"), vbYesNo, "Project Handbook") = vbYes Then GoTo subend
            End If
        Case Else
    End Select
    
    Select Case contents.Range("Contents.SelectedFormat").value
        Case 1
            sfilename = Folder & FileName & "_" & Strings.Format(Now, DateFormat)
            'sht.Range(sht.PageSetup.PrintArea).ExportAsFixedFormat xlTypePDF, Folder & _
            'Filename & "_" & Strings.Format(Now, DateFormat) & ".pdf"
        Case 2
            sfilename = Folder & Strings.Format(Now, DateFormat) & "_" & FileName
            'sht.Range(sht.PageSetup.PrintArea).ExportAsFixedFormat xlTypePDF, Folder & _
            'Strings.Format(Now, DateFormat) & "_" & Filename & ".pdf"
        Case Else
            sfilename = Folder & FileName
            'sht.Range(sht.PageSetup.PrintArea).ExportAsFixedFormat xlTypePDF, Folder & _
            'Filename & ".pdf"
    End Select
    
    If ExportAsImage Then
        PublishAsImage sht, sfilename
    Else
        sht.Range(sht.PageSetup.PrintArea).ExportAsFixedFormat xlTypePDF, sfilename & ".pdf"
    End If

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modSQL.PublishToSharepoint error:"
    Resume subend

End Sub


Private Sub PublishAsImage(sht As Worksheet, FileName As String)
    
    Const sSlash$ = "/"
    Const sPicType$ = ".gif"


    Dim TemporaryWorksheet As Worksheet
    Dim TemporaryChart As Chart
    Dim TemporaryPicture As Picture
    Dim RangeToCopy As Range
    
    
    On Error GoTo suberr
    modStack.PushCallStack "modSQL", "PublishAsImage"
    modConst.bEventDisableWorkbookSheetActivate = True

    Set TemporaryWorksheet = Worksheets.Add
    Charts.Add
    ActiveChart.Location Where:=xlLocationAsObject, Name:=TemporaryWorksheet.Name

    Set TemporaryChart = ActiveChart
    Set RangeToCopy = sht.Range(sht.PageSetup.PrintArea)
    RangeToCopy.CopyPicture Appearance:=xlScreen, Format:=xlPicture
   
    TemporaryChart.Paste

    Set TemporaryPicture = selection

    'Placing some extra space around the image to keep things clean
    With TemporaryChart.Parent
        .Width = RangeToCopy.Width + 5
        .Height = RangeToCopy.Height + 5
        .Top = 5
        .Left = 5
    End With
   
    'this works with URLs!
    ActiveWorkbook.PublishObjects.Add(xlSourceSheet, FileName & ".html", TemporaryWorksheet.Name, TemporaryChart.Name).Publish
'initialy this code was activated??!!:   ActiveWorkbook.PublishObjects.Add(xlSourceSheet, "\\p14portalmig\BITest\PHBImport2\test\a.html", TemporaryWorksheet.Name, TemporaryChart.Name).Publish
    'ThisWorkbook.PublishObjects.Add(xlSourceChart, Filename & "\\p14portalmig\BITest\PHBImport2\test\a.html", , TemporaryChart, xlHtmlStatic).Publish
    'this only works with UNC path
'     With TemporaryChart
'        .HasTitle = True
'        .ChartTitle.Text = sht.Name
'        .Export Filename:="\\p14portalmig\BITest\PHBImport2\test\a.png", FilterName:="PNG"
'    End With

    
    
    
    'TemporaryChart.Name = "TC"
    'TemporaryWorksheet.ChartObjects("TC").Export Filename:="http:" & sSlash & sSlash & "p14portalmig" & sSlash & "BITeset" & sSlash & "PHBImport2" & sSlash & "test" & sSlash & "a.jpg", FilterName:="jpg"
    'TemporaryChart.Export(server.mappath("~/App_Data/Graphs/Graph2.gif"), "GIF")
    
    'TemporaryChart.Export "http://p14portalmig/BITest/PHBImport2/" & "111.jpg", "jpg", True
    'TemporaryWorksheet.Shapes(TemporaryChart.Name).Export "http://p14portalmig/BITest/PHBImport2/test/" & "111.jpg", "jpg", True
    'TemporaryChart.SaveAs "c:\logs\111.jpg"
    
    
    'ActiveWorkbook.PublishObjects.Add(xls, Filename & ".html", TemporaryWorksheet.Name, TemporaryChart.Name).Publish

    'ActiveWorkbook.PublishObjects.Add xlSourceChart, "c:\Logs\a.html", TemporaryWorksheet, TemporaryWorksheet.ChartObjects(1) '(xlSourceChart, Filename & ".html", , TemporaryChart).Publish
    'ThisWorkbook.PublishObjects.Add xlSourceChart, Filename & ".jpg",,TemporaryChart,xlHtmlStatic).publish
    'TemporaryChart.Export Filename:="http://p14portalmig/BITest/PHBImport2/test/Forms/a.gif", FilterName:="gif"
    'TemporaryChart.Export Filename:="http:" & sSlash & sSlash & "p14portalmig" & sSlash & "BITeset" & sSlash & "PHBImport2" & sSlash & "test" & sSlash & "a.jpg", FilterName:="JPG"
    'TemporaryChart.SaveAs "http://p14portalmig/BITest/PHBImport2/test/a.jpg", xlHtml
    
    'TemporaryChart.SaveAs "\\p14portalmig\BITest\PHBImport2\test\a.html", xlHtml
    
subend:
    TemporaryWorksheet.Delete
    modConst.bEventDisableWorkbookSheetActivate = False
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg
    Resume subend

End Sub














Sub test()

    Dim sth As HTMLImage
    On Error GoTo suberr
    modStack.PushCallStack "modSQL", "test"
    
    sth.source = Cover.Range(Cover.PageSetup.PrintArea)
    'Statusreport.SaveAs "c:\Logs\test.html", xlHtml
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modSQL.test error:"
    Resume subend
End Sub


Private Sub save_web_page_Click()
    Dim Thisfile As String
    On Error GoTo quit
    
    ActiveWorkbook.PublishObjects.Add(xlSourceSheet, "c:\Logs\test3.html", "Team", "UsedRange").Publish
'    ActiveWorkbook.PublishObjects.Add( _
'    SourceType:=xlSourceRange, _
'    Filename:="c:\Logs\test2.html", _
'    Sheet:="Team", source:="Print_Area", HtmlType:=xlHtmlStatic).Publish
    
    GoTo Endall
quit:
    MsgBox "...WARNING... " & Thisfile & " HTML web page File not Saved"
Endall:
End Sub

Sub gif()
    Dim mychart As Chart
    Dim mypicture As OLEObject
    Set mychart = Statusreport.ChartObjects("Status.Chrt.Progress").Chart
    mychart.Export FileName:="c:\Logs\t.gif", FilterName:="GIF"
    'Cover.Range(Cover.PageSetup.PrintArea).ExportAsFixedFormat Filename:="c:\Logs\t.gif", FilterName:="GIF"
    Set mypicture = Cover.Range(Cover.PageSetup.PrintArea).CopyPicture(xlScreen, xlPicture)
    'try
    'catch ex as exception
    
End Sub





'Private Function CheckAdminSQL() As Boolean
'
'    CheckAdminSQL = False
'
'    If Admin.Range("Admin.SQLServer").value = "" Then
'        AppStopMsg appGetLOCText("msgNoSQLServer")
'        Exit Function
'    End If
'
'    If Admin.Range("Admin.Database").value = "" Then
'        AppStopMsg appGetLOCText("msgNoDatabase")
'        Exit Function
'    End If
'
'    If Not IsNumeric(Admin.Range("Admin.ConnectionTimeout").value) Then
'        AppStopMsg appGetLOCText("msgNoTimeout")
'        Exit Function
'    End If
'
'    If Admin.Range("Admin.SQLDateFormat").value = "" Then
'        AppStopMsg appGetLOCText("msgNoDateFormat")
'        Exit Function
'    End If
'
'    CheckAdminSQL = True
'
'End Function






Public Function GetMTAData() As Boolean
    Dim cnn As New Connection
    Dim rst As New Recordset
    Dim R As Range
    Dim ic As Integer
    Dim icPID As Integer
    Dim ir As Integer
    Dim iPID As Integer
    Dim sProjectNo As String
    Dim Field As Field
    Dim Record As Record
    Dim task As TPGSQLTask
    Dim bAccessDenied As Boolean


    On Error GoTo suberr
    modStack.PushCallStack "modSQL", "GetMTAData"

    sProjectNo = Cover.Range("Cover.ProjectNo")
    If sProjectNo = "" Then
        AppStopMsg appGetLOCText("msgNoProjectNumber")
        GoTo subend
    End If

    cnn.Provider = "SQLOLEDB"
    cnn.Properties("Data Source") = Admin.Range("Admin.SQLServer").value
    cnn.Properties("Initial Catalog") = Admin.Range("Admin.DataBase").value
    cnn.Properties("Integrated Security").value = "SSPI"
    cnn.ConnectionTimeout = Admin.Range("Admin.ConnectionTimeout").value
    cnn.Open
    rst.Open "exec _PHB_GetMTAHistoryForProjectNo '" & sProjectNo & "'", cnn
    'Config.Range("A600").CopyFromRecordset (rst)
    Set cTasks = New Collection
    With rst
        Do
            Set task = New TPGSQLTask
            task.sTaskName = .Fields("Milestonename")
            task.bIsSummaryTask = False
            task.sTaskGUID = .Fields("TaskUID")
            cTasks.Add task, task.sTaskGUID
            Set task = Nothing
            .MoveNext
        Loop Until .EOF
    End With
    rst.Close

    rst.Open "exec _PHB_GetMTAHistoryForProjectNo '" & sProjectNo & "'", cnn
    With rst
        Do
            cTasks(.Fields("TaskUID")).AddMilestone .Fields("Snapshotdate"), .Fields("Milestonedate")
            .MoveNext
        Loop Until .EOF
    End With



    Dim iRow As Integer
    Dim iColumn As Integer
    Dim SnapShotDate As Variant
    Dim iSnapshotCount As Integer
    Dim iGUIDCol As Integer
    Dim iNameCol As Integer
    Dim i As Integer

    iSnapshotCount = cTasks(1).cSnapShotDates.Count
    iRow = MTA.Range("MTA.CurrentDate.Field").row
    iColumn = MTA.Range("MTA.CurrentDate.Field").Column + iSnapshotCount - 1
    MTA.reset


    'MTA.Range("MTA.CurrentDate.Field").value = Date
    
    
    For i = 1 To cTasks(1).cSnapShotDates.Count
        With MTA.Cells(iRow, iColumn)
            .value = CDate(Strings.FormatDateTime(cTasks(1).cSnapShotDates(i), vbShortDate))
            .Interior.Color = RGB(196, 196, 196)
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).Weight = xlThin
        End With
        iColumn = iColumn - 1
    Next

    iRow = MTA.Range("MTA.CurrentDate.Field").row + 1

    Dim iColorIndex As Integer
    iColorIndex = 3
    For Each task In cTasks
        iColumn = MTA.Range("MTA.CurrentDate.Field").Column + iSnapshotCount - 1
        MTA.Cells(iRow, MTA.Range("MTA.GUID.Column").Column).value = task.sTaskGUID
        With MTA.Cells(iRow, MTA.Range("MTA.MSNames.Column").Column)
            .value = task.sTaskName
            .Interior.ColorIndex = iColorIndex
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).Weight = xlThin
        End With
        
        With MTA.Cells(iRow, MTA.Range("MTA.Filter.column").Column)
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).Weight = xlThin
        End With
        
        With MTA.Cells(iRow, MTA.Range("MTA.PSP.Column").Column)
            .Interior.Color = RGB(242, 242, 242)
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).Weight = xlThin
        End With
        
        MTA.Cells(iRow, MTA.Range("MTA.ColorIndex.Column").Column).value = iColorIndex
                
        For Each SnapShotDate In task.cSnapShotDates
            With MTA.Cells(iRow, iColumn)
                .value = CDate(Strings.FormatDateTime(task.cMileStoneDates(CStr(SnapShotDate)), vbShortDate))
                '.value = Task.cMileStoneDates(CStr(SnapShotDate))
                .Interior.Color = RGB(242, 242, 242)
                .Borders(xlEdgeBottom).LineStyle = xlContinuous
                .Borders(xlEdgeBottom).Weight = xlThin
            End With
            iColumn = iColumn - 1
        Next
        iRow = iRow + 1
        iColorIndex = iColorIndex + 1
    Next

    'TODO: FIXME -> behindert hardcoded
    Dim rFirst As Range
    Dim rLast As Range
    
    Set rFirst = MTA.Cells(36, 3)
    Set rLast = MTA.Cells(36 + cTasks.Count + 1, 9)
    
    ThisWorkbook.Names("MTA.Milestonehistory.Table").Delete
    ThisWorkbook.Names.Add "MTA.Milestonehistory.Table", "=MTA!" & MTA.Range(rFirst, rLast).Address
    
    '=MTA!$C$36:$I$43

    rst.Close
    MTA.cmdRefreshChart_Click
    GetMTAData = True

subend:
    On Error Resume Next
    rst.Close
    Set rst = Nothing
    cnn.Close
    Set cnn = Nothing
    modStack.PopCallStack
    Exit Function
suberr:
    If err.Number = 457 Then Resume Next    'key already in use -> ignore
    Debug.Print err.Number, err.Description
    Resume subend

End Function


Attribute VB_Name = "modShapes"
'---------------------------------------------------------------------------------------
' Module    : modShapes
' Author    : wm
' Date      : 15.03.2011
' Purpose   : provides several control mechanisms for easier and automated handling of
'             shape objects.
'---------------------------------------------------------------------------------------

Option Explicit
Option Private Module

'Public Property Get dXScale() As Double: dXScale = ReleaseNotes.Cells(255, 255).Left / 12546:   End Property
'Public Property Get dYScale() As Double: dYScale = ReleaseNotes.Cells(255, 255).Top / 3798:     End Property
Public Property Get dXScale() As Double: dXScale = 1.07:   End Property
Public Property Get dYScale() As Double: dYScale = 1.07:     End Property

'
'Public dYScale As Double
'Public dXScale As Double
'
''---------------------------------------------------------------------------------------
'' setScale
'' sets the scale of a workbook in relation to how the
'' x- and y-coordinates would be if opened in Excel 2010
'' @date     03.01.2011
'' @author   wm
'' @version  1.0
''---------------------------------------------------------------------------------------
''
'Public Sub setScale()
'    On Error GoTo SubErr
'    modStack.PushCallStack "modShapes", "setScale"
'
'    dXScale = ReleaseNotes.Cells(255, 255).Left / 12546
'    dYScale = ReleaseNotes.Cells(255, 255).Top / 3798
'
'SubEnd:
'    modStack.PopCallStack
'    Exit Sub
'SubErr:
'    AppErrMsg "modShapes.setScale error:"
'    Resume SubEnd
'End Sub

'---------------------------------------------------------------------------------------
' RearrangeControls
' rearranges all form- and control objects contained in the calling sheet
' to the values stored in Config.ControlDefinitions (top/left/height/width)
' @date     03.01.2011
' @author   wm
' @version  1.0
' @param    sht Worksheet where controls should be rearranged
'---------------------------------------------------------------------------------------
'
Public Sub RearrangeControls(Optional sht As Worksheet)
    Dim s As shape
    Dim SearchRange As Range
    Dim rCell As Range
    Dim R As Range
    Dim Counter As Integer
    Dim rReferenceCell As Range

    On Error GoTo suberr
    modStack.PushCallStack "modShapes", "RearrangeControls"

    If sht Is Nothing Then Set sht = ActiveSheet

    'there is a bug in excel: newly added sheets (custom sheets) have no codename
    If sht.CodeName <> "" Then
        'setScale
        If RearrangeControlsAtGrid(sht) Then GoTo subend

        Set SearchRange = getRange(Config, "Config.ControlDefinitions", 0, 1, 0, 0)

        'generate range object with all the shapes' names in it
        With SearchRange
            Set rCell = .Cells(1, 1)
            For Counter = 1 To WorksheetFunction.CountIf(.Cells, sht.CodeName)
                Set rCell = .Find(What:=sht.CodeName, After:=rCell, LookIn:=xlValues, _
                                  LookAt:=xlWhole, SearchOrder:=xlByRows, _
                                  SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
                If Not rCell Is Nothing Then
                    If R Is Nothing Then
                        Set R = rCell.offset(0, 1)
                    Else
                        Set R = Union(R, rCell.offset(0, 1)) 'MsgBox rCell.value & " / " & rCell.Offset(0, 1).value
                    End If
                End If
            Next Counter
        End With

        If R Is Nothing Then GoTo subend
        'find misplaced shape objects in this range and correct them
        For Each s In sht.Shapes
            If Not s Is Nothing Then
                If s.Type = msoFormControl Or _
                    s.Type = msoOLEControlObject Or _
                    s.Type = msoComment Or _
                    s.Type = msoPicture Or _
                    s.Type = 6 Or _
                    s.Type = 9 Or _
                    s.Type = msoShapeRectangle Then

                    With R
                        Set rCell = .Find(s.Name, LookIn:=xlValues)
                        If Not rCell Is Nothing Then
                            Set rReferenceCell = Range(rCell.offset(0, 5).value)

    '                        If rReferenceCell.EntireRow.hidden Or rReferenceCell.EntireColumn.hidden Then
    '                            If s.Type = msoFormControl Then s.Visible = msoFalse
    '                        Else
    '                            If s.Type = msoFormControl Then s.Visible = msoTrue
    '                        End If
    '                        If Abs(rReferenceCell.Top + rCell.offset(0, 1).Value * dYScale - s.Top) > 0.25 Or _
    '                            Abs(rReferenceCell.Left + rCell.offset(0, 2).Value * dXScale - s.Left) > 0.25 Or _
    '                            Abs(rCell.offset(0, 3).Value * dYScale - s.Height) > 0.25 Or _
    '                            Abs(rCell.offset(0, 4).Value * dXScale - s.Width) > 0.25 Then
                                s.Top = rReferenceCell.Top + rCell.offset(0, 1) * dYScale
                                s.Left = rReferenceCell.Left + rCell.offset(0, 2) * dXScale
                                s.Height = rCell.offset(0, 3) * dYScale
                                s.Width = rCell.offset(0, 4) * dXScale
                            'End If

                        End If
                    End With


                    'If Right(s.name, 4) = "Logo" Then SetLogo sht, s
                End If
            End If
        Next
        'SetLogos sht
    End If

subend:

    modStack.PopCallStack
    Exit Sub
suberr:
    If err.Number = 438 Then
        Resume Next                     'blaue pfeile bei circular references: ignorieren
    ElseIf err.Number = 424 Then
        Resume Next                     'blaue pfeile bei circular references: ignorieren
    Else
        AppErrMsg "RearrangeControls error:"
        Resume subend
    End If

 End Sub


'---------------------------------------------------------------------------------------
' SetCharts
' rearranges all chart objects contained in the calling sheet
' where the topleft and bottomright corners of the chart objects are
' defined by the cells named <chartname>.TL / <chartname>.BR and the
' topleft and bottomright corners of the plotarea are defined by the
' values stored in Config.ChartDefinitions (top/left/height/width)
' @date     03.01.2011
' @author   wm
' @version  1.0
' @param    sht Worksheet where controls should be rearranged
'---------------------------------------------------------------------------------------
'
Public Sub SetCharts(sht As Worksheet)
    
    Dim chtobj As ChartObject
    Dim SearchRange As Range
    Dim rCell As Range
    Dim R As Range
    Dim Counter As Integer
    Dim rTopLeftCell As Range
    Dim rBottomRightCell As Range
    Dim coc As Integer
    Dim ExcelIstMAnchmalEchtKomisch As Double
    
    On Error GoTo suberr
    modStack.PushCallStack "modShapes", "SetCharts"
    
    
    Set SearchRange = getRange(Config, "Config.ChartDefinitions", 0, 1, 0, 0)
    
    'generate range object with all the charts' names in it
    If SearchRange Is Nothing Then GoTo subend
    With SearchRange
        Set rCell = .Cells(1, 1)
        For Counter = 1 To WorksheetFunction.CountIf(.Cells, sht.CodeName)
            Set rCell = .Find(What:=sht.CodeName, After:=rCell, LookIn:=xlValues, _
                              LookAt:=xlWhole, SearchOrder:=xlByRows, _
                              SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
            If Not rCell Is Nothing Then
                If R Is Nothing Then
                    Set R = rCell.offset(0, 1)
                Else
                    Set R = Union(R, rCell.offset(0, 1)) 'MsgBox rCell.value & " / " & rCell.Offset(0, 1).value
                End If
            End If
        Next Counter
    End With
    
    'for each does not work in 2003
    If R Is Nothing Then GoTo subend
    For coc = 1 To sht.ChartObjects.Count 'For Each chtObj In sht.ChartObjects
        With R
            Set chtobj = sht.ChartObjects(coc)
            Set rCell = .Find(chtobj.Name, LookIn:=xlValues)
            
            If Not rCell Is Nothing Then
                Set rTopLeftCell = getRange(sht, chtobj.Name & ".TL", 0, 1, 0, 0)
                Set rBottomRightCell = getRange(sht, chtobj.Name & ".BR", 0, 1, 0, 0)
                With chtobj
                    .Top = rTopLeftCell.Top
                    .Left = rTopLeftCell.Left
                    .Height = rBottomRightCell.offset(1, 1).Top - rTopLeftCell.Top
                    .Width = rBottomRightCell.offset(1, 1).Left - rTopLeftCell.Left
                End With
                With chtobj.Chart.PlotArea
                    ExcelIstMAnchmalEchtKomisch = .Top
                    .Top = rCell.offset(0, 5)
                    .Left = rCell.offset(0, 6)
                    .Height = (rBottomRightCell.Top + rBottomRightCell.Height) - (rTopLeftCell.Top + rCell.offset(0, 5)) - rCell.offset(0, 7)
                    .Width = (rBottomRightCell.Left + rBottomRightCell.Width) - (rTopLeftCell.Left + rCell.offset(0, 6)) - rCell.offset(0, 8)
                End With
            End If
        End With
    Next coc
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    If Not err.Number = -2147024809 Then AppErrMsg "SetCharts error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' CopyControls
' copies all releveant information for each control on every sheet to Config.ControlDefinitions
' @date     03.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub CopyControls()
    Dim s As shape
    Dim sht As Worksheet
    Dim R As Range
    Dim lastrow As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "modShapes", "CopyControls"

    If MsgBox("gespeicherte Positionen werden |fffd|berschrieben", vbYesNo, "Copy Controls?") = vbNo Then GoTo subend

    Set R = Config.Range("Config.ControlDefinitions")
    R.ClearContents
    Set R = getRange(Config, "Config.ControlDefinitions", 0, 1, 0, 0)
    lastrow = R.End(xlUp).row
    
    For Each sht In Sheets
        For Each s In sht.Shapes
            If s.Type = msoFormControl Or _
                s.Type = msoOLEControlObject Or _
                s.Type = msoComment Or _
                s.Type = msoPicture Or _
                s.Type = msoShapeRectangle Then
                'If (s.FormControlType = xlButtonControl) And (VBA.Mid(s.name, 1, 3) = "cmd") Then
    '                MsgBox "title: " & s.name & vbCrLf & _
    '                        "top: " & s.Top & vbCrLf & _
    '                        "left: " & s.Left & vbCrLf & _
    '                        "height: " & s.Height & vbCrLf & _
    '                        "width: " & s.Width
                                    
                    R.Cells(lastrow, 1).value = sht.CodeName
                    R.Cells(lastrow, 2).value = s.Name
                    R.Cells(lastrow, 3).value = s.Top - s.TopLeftCell.Top
                    R.Cells(lastrow, 4).value = s.Left - s.TopLeftCell.Left
                    R.Cells(lastrow, 5).value = s.Height
                    R.Cells(lastrow, 6).value = s.Width
                    R.Cells(lastrow, 7).value = s.TopLeftCell.Address
                    lastrow = lastrow + 1
                    
                'End If
            End If
        Next
    Next
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modShapes.CopyControls error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' CopySingleControl
' copies all releveant information for a single control to Config.ControlDefinitions
' @date     03.01.2011
' @author   wm
' @version  1.0
' @param    sht         the Worksheet where the control is located
' @param    ControlName the name of the control to be saved
'---------------------------------------------------------------------------------------
'
Public Sub CopySingleControl(sht As Worksheet, ControlName As String)

    Dim SearchRange As Range
    Dim rCell As Range
    Dim R As Range
    Dim Counter As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "modShapes", "CopySingleControl"
    
    
    Set SearchRange = getRange(Config, "Config.ControlDefinitions", 0, 1, 0, 0)
    
    'generate range object with all the charts' names in it
    If SearchRange Is Nothing Then GoTo subend
    With SearchRange
        Set rCell = .Cells(1, 1)
        For Counter = 1 To WorksheetFunction.CountIf(.Cells, sht.CodeName)
            Set rCell = .Find(What:=sht.CodeName, After:=rCell, LookIn:=xlValues, _
                              LookAt:=xlWhole, SearchOrder:=xlByRows, _
                              SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
            If Not rCell Is Nothing Then
                If R Is Nothing Then
                    Set R = rCell.offset(0, 1)
                Else
                    Set R = Union(R, rCell.offset(0, 1)) 'MsgBox rCell.value & " / " & rCell.Offset(0, 1).value
                End If
            End If
        Next Counter
    End With
    
    'find chart object in this range and save it
    If R Is Nothing Then GoTo subend
    With R
        Set rCell = .Find(ControlName, LookIn:=xlValues)
        If Not rCell Is Nothing Then
            Dim s As shape
            Set s = sht.Shapes(ControlName)
            rCell.offset(0, 1).value = s.Top - s.TopLeftCell.Top
            rCell.offset(0, 2).value = s.Left - s.TopLeftCell.Left
            rCell.offset(0, 3).value = s.Height
            rCell.offset(0, 4).value = s.Width
            rCell.offset(0, 5).value = s.TopLeftCell.Address
        End If
    End With
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "CopySingleControl error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' CopyCharts
' copies all releveant information for each chart on every sheet to Config.ChartDefinitions
' @date     03.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub CopyCharts()
    Dim sht As Worksheet
    Dim R As Range
    Dim lastrow As Integer
    Dim chtobj As ChartObject
    Dim rTopLeftCell As Range
    Dim rBottomRightCell As Range
    Dim coc As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "modShapes", "CopyCharts"

    If MsgBox("gespeicherte Positionen werden |fffd|berschrieben", vbYesNo, "Copy Controls?") = vbNo Then GoTo subend
    
    Set R = Config.Range("Config.ChartDefinitions")
    R.ClearContents
    Set R = getRange(Config, "Config.ChartDefinitions", 0, 1, 0, 0)
    lastrow = R.End(xlUp).row
    
    For Each sht In Sheets
        If sht.ChartObjects.Count > 0 Then
            For coc = 1 To sht.ChartObjects.Count
                Set chtobj = sht.ChartObjects(coc)
                Set rTopLeftCell = getRange(sht, chtobj.Name & ".TL", 0, 1, 0, 0)
                Set rBottomRightCell = getRange(sht, chtobj.Name & ".BR", 0, 1, 0, 0)
                R.Cells(lastrow, 1).value = sht.CodeName
                R.Cells(lastrow, 2).value = chtobj.Name
    '            r.Cells(lastRow, 3).value = chtObj.Top - rTopLeftCell.Top                           'y to tlc T
    '            r.Cells(lastRow, 4).value = chtObj.Left - rTopLeftCell.Left                         'x to tlc L
    '            r.Cells(lastRow, 5).value = chtObj.Top + chtObj.Height - rBottomRightCell.Top       'y to brc T
    '            r.Cells(lastRow, 6).value = chtObj.Left + chtObj.Width - rBottomRightCell.Left      'x to brc L
                R.Cells(lastrow, 7).value = chtobj.Chart.PlotArea.Top '- rTopLeftCell.Top                                            'y to tlc T
                R.Cells(lastrow, 8).value = chtobj.Chart.PlotArea.Left '- rTopLeftCell.Left                                          'x to tlc L
                R.Cells(lastrow, 9).value = (rBottomRightCell.Top + rBottomRightCell.Height) - (rTopLeftCell.Top + chtobj.Chart.PlotArea.Top + chtobj.Chart.PlotArea.Height) ' - rBottomRightCell.Top         'y to brc T
                R.Cells(lastrow, 10).value = (rBottomRightCell.Left + rBottomRightCell.Width) - (rTopLeftCell.Left + chtobj.Chart.PlotArea.Left + chtobj.Chart.PlotArea.Width) 'chtObj.chart.PlotArea.Left + chtObj.chart.PlotArea.Width - rBottomRightCell.Left       'y to brc L
                
                'these two are not actually necessary, just for showing where they are
                R.Cells(lastrow, 11).value = rTopLeftCell.Cells.Address
                R.Cells(lastrow, 12).value = rBottomRightCell.Cells.Address
                lastrow = lastrow + 1
                'MsgBox "chart: " & chtObj.Chart.ChartArea.Top & " / plot: " & chtObj.Chart.PlotArea.Top
            Next coc
        End If
    Next
    

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modShapes.CopyCharts error:"
    Resume subend
End Sub


'---------------------------------------------------------------------------------------
' SetCompanyLogo
' copy and set the company logo for sheets
' @date     03.01.2011
' @author   wm
' @version  1.0
' @param    sht         Worksheet where controls should be rearranged
' @param    indent      indent to top/bottom/right of the header area
' @param    offset      offset to the right of the header area
' @param    LogoName    name of the logo to be set
'---------------------------------------------------------------------------------------
'
Public Sub SetCompanyLogo(sht As Worksheet, Optional indent As Integer = 4, Optional offset As Integer = 0, Optional LogoName As String = "CompanyLogo")
    Dim s As shape
    Dim rCell As Range
    Dim sCodeName As String
    Dim dLogoRatio As Double
    
    On Error GoTo suberr
    modStack.PushCallStack "modShapes", "SetCompanyLogo"
       
    For Each s In sht.Shapes
        If s.Name = LogoName Then
            sCodeName = sht.CodeName
            If sht.CodeName = "Statusreport" Then sCodeName = "Status"
            If sht.Range(sCodeName & ".H1") Is Nothing Then GoTo subend
            
            
            Set rCell = sht.Range(sCodeName & ".H1")
            Dim i As Integer
            i = rCell.Cells.Count
            Set rCell = sht.Range(sCodeName & ".H1").Cells(1, i)
            dLogoRatio = (rCell.Height - indent * 2) / s.Height
            s.Width = s.Width * dLogoRatio
            s.Top = rCell.Top + indent
            s.Left = (rCell.Left + rCell.Width) - indent - s.Width - offset
            
        End If
    Next
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "SetCompanyLogo error:"
    
    Resume subend
End Sub

'
''---------------------------------------------------------------------------------------
'' SetLogo - deprecated
''
'' @date     17.01.2011
'' @author   wm
'' @version  1.0
'' @param    sht     worksheet where the logo is located
'' @param    s       shape object that represents the logo
''---------------------------------------------------------------------------------------
''
'Public Sub SetLogo(sht As Worksheet, s As shape)
'    Dim indent As Integer
'    Dim offset As Integer
'    Dim sCodeName As String
'    Dim rCell As Range
'    Dim dLogoRatio As Double
'
'    On Error Resume Next
'    modStack.PushCallStack "modShapes", "SetLogo"
'
'    Select Case s.Name
'        Case "PMCCLogo"
'            offset = 0
'        Case "CompanyLogo"
'            offset = 40
'        Case Else
'            GoTo subend
'    End Select
'    indent = 4
'    sCodeName = sht.CodeName
'    If sht.CodeName = "Statusreport" Then sCodeName = "Status"
'    'If sht.CodeName = "RACI" Then offset = offset + 4
'    If sht.Range(sCodeName & ".H1") Is Nothing Then GoTo subend
'
'
'    Set rCell = sht.Range(sCodeName & ".H1")
'    Dim i As Integer
'    i = rCell.Cells.Count
'    Set rCell = sht.Range(sCodeName & ".H1").Cells(1, i)
'    dLogoRatio = (rCell.Height - indent * 2) / s.Height
'    s.Width = s.Width * dLogoRatio
'    s.Top = rCell.Top + indent
'    s.Left = (rCell.Left + rCell.Width) - indent - s.Width - offset
'
'
'subend:
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    AppErrMsg "modShapes.SetLogo error:"
'    Resume subend
'End Sub
'
'
'
''---------------------------------------------------------------------------------------
'' SetLogos
'' snaps all logos to .H1 area
'' @date     28.01.2011
'' @author   wm
'' @version  1.0
'' @param    sht     Worksheet to set logos
''---------------------------------------------------------------------------------------
''
'Public Sub SetLogos(sht As Worksheet)
'    Dim indent As Integer
'    Dim offset As Integer
'    Dim spacing As Integer
'    Dim sCodeName As String
'    Dim rCell As Range
'    Dim dLogoRatio As Double
'    Dim rCellConf As Range
'    Dim shapeConf As shape
'    Dim shape As shape
'    Dim SearchRange As Range
'    Dim bfound As Boolean
'
'    On Error Resume Next 'GoTo SubErr
'    modStack.PushCallStack "modShapes", "SetLogos"
'
'    indent = Config.Range("Config.LogoIndent").Value
'    spacing = Config.Range("Config.LogoSpacing").Value
'    offset = 0
'    sCodeName = sht.CodeName
'    If sht.CodeName = "Statusreport" Then sCodeName = "Status"
'    If sht.CodeName = "Admin" Then GoTo subend
'
'    On Error Resume Next
'    If sht.Range(sCodeName & ".H1") Is Nothing Then GoTo subend
'    On Error GoTo suberr
'
'    'remove from sheet if not in the list
'    For Each shape In sht.Shapes
'        If shape.Type = msoPicture Then
'            If shape.TopLeftCell.row <= sht.Range(sCodeName & ".H1").row Then
'                Set SearchRange = Config.Range("Config.Logos")
'                With SearchRange
'                    Set rCell = .Find(shape.Name)
'                End With
'                If rCell Is Nothing Then shape.Delete
'            End If
'        End If
'    Next
'
'    'copy from config if not found
'    For Each rCellConf In Config.Range("Config.Logos")
'        bfound = False
'        For Each shape In sht.Shapes
'            If shape.Name = rCellConf.Value Then bfound = True
'        Next
'        If Not bfound Then
'            'look in config for shape to copy
'            'shape exists -> copy to sheet
'            'shape soesn't exist -> do nothing
'            For Each shapeConf In Config.Shapes
'                If shapeConf.Name = rCellConf.Value Then
'                   shapeConf.Copy
'                   sht.Paste
'                   'Set selection = Nothing
'                End If
'            Next
'        End If
'    Next
'
'    'snap logos to .H1
'    For Each rCellConf In Config.Range("Config.Logos")
'        For Each shape In sht.Shapes
'            If shape.Name = rCellConf.Value Then
'                If shape.Height = 0 Then
'                    'Debug.Print "deleted " & shape.Name
'                    shape.Delete
'                    SetLogos sht
'                    GoTo subend
'                End If
'                Set rCell = sht.Range(sCodeName & ".H1")
'                Dim i As Integer
'                i = rCell.Cells.Count
'                Set rCell = sht.Range(sCodeName & ".H1").Cells(1, i)
'                dLogoRatio = (rCell.Height - indent * 2) / shape.Height
'                If Math.Abs((shape.Width * dLogoRatio) - shape.Width) > 0.5 Then _
'                    shape.Width = shape.Width * dLogoRatio
'                If Math.Abs((rCell.Top + indent) - shape.Top) > 0.5 Then _
'                    shape.Top = rCell.Top + indent
'                If Math.Abs(((rCell.Left + rCell.Width) - indent - shape.Width - offset) - shape.Left) > 0.5 Then _
'                    shape.Left = (rCell.Left + rCell.Width) - indent - shape.Width - offset
'                offset = offset + shape.Width + spacing
'                'Exit For <- delete any doubles? dunno
'            End If
'        Next
'    Next
'
'subend:
'    modStack.PopCallStack
'    Exit Sub
'suberr:
'    If err.Number = 424 Then
'        Resume Next                     'blaue pfeile bei circular references: ignorieren
'    Else
'        AppErrMsg "modShapes.SetLogo error:"
'        Resume subend
'    End If
'
'End Sub
'
'
'Public Function SetLogos_v3(sht As Worksheet) As Boolean
''setting logo for v3.0, only 1 logo possible
'    Dim indent As Integer
'    Dim offset As Integer
'    Dim spacing As Integer
'    Dim sCodeName As String
'    'Dim rCell As Range
'    Dim dLogoRatio As Double
'    Dim rCellConf As Range
'    Dim shapeConf As shape
'    Dim shape As shape
'    Dim SearchRange As Range
'    Dim sconfiglogo3 As String
'    Dim bfound As Boolean
'
'    On Error Resume Next 'GoTo SubErr
'    modStack.PushCallStack "modShapes", "SetLogos_v3"
'
'    sCodeName = sht.CodeName
'    If sht.CodeName = "Statusreport" Then sCodeName = "Status"
'    'If sht.CodeName = "Admin" Then GoTo SubEnd
'
'    On Error Resume Next
'    If sht.Range(sCodeName & ".H0") Is Nothing Then GoTo subend
'    If sht.Range(sCodeName & ".H0").Height = 0 Then
'        SetLogos_v3 = True
'        GoTo subend
'    End If
'    On Error GoTo suberr
'    indent = Config.Range("Config.LogoIndent3").Value
'    spacing = Config.Range("Config.LogoSpacing3").Value
'    offset = 0
'
'    'remove from sheet if not in the list
'    For Each shape In sht.Shapes
'        If shape.Type = msoPicture Then
'            If shape.TopLeftCell.row <= sht.Range(sCodeName & ".H0").row Then
'                If Not (Config.Range("Config.Logo3").Value = shape.Name) Then shape.Delete
'            End If
'        End If
'    Next
'
'    'copy from config if not found
'    sconfiglogo3 = Config.Range("Config.Logo3").Value
'    bfound = False
'    For Each shape In sht.Shapes
'        If shape.Name = sconfiglogo3 Then bfound = True
'    Next
'    If Not bfound Then
'        'look in config for shape to copy
'        'shape exists -> copy to sheet
'        'shape soesn't exist -> do nothing
'        For Each shapeConf In Config.Shapes
'            If shapeConf.Name = sconfiglogo3 Then
'               shapeConf.Copy
'               sht.Paste
'               'Set selection = Nothing
'            End If
'        Next
'    End If
'
'    'snap logos to .H0
'    For Each shape In sht.Shapes
'        If shape.Name = sconfiglogo3 Then
''            If shape.Height = 0 Then
''                'Debug.Print "deleted " & shape.Name
''                shape.Delete
''                SetLogos sht
''                GoTo SubEnd
''            End If
'            'Set rCell = sht.Range(sCodeName & ".H0")
'            'Dim i As Integer
'            'i = rCell.Cells.Count
'            'Set rCell = sht.Range(sCodeName & ".H0").Cells(1, i)
'            dLogoRatio = (sht.Range(sCodeName & ".H0").EntireRow.Height - indent * 2) / shape.Height
'            If Math.Abs((shape.Width * dLogoRatio) - shape.Width) > 0.5 Then _
'                shape.Width = shape.Width * dLogoRatio
'            If Math.Abs((sht.Range(sCodeName & ".H0").Top + indent) - shape.Top) > 0.5 Then _
'                shape.Top = sht.Range(sCodeName & ".H0").Top + indent
'            If Math.Abs(((sht.Range(sCodeName & ".H0").Left + sht.Range(sCodeName & ".H0").Width) - indent - shape.Width - offset) - shape.Left) > 0.5 Then _
'                shape.Left = (sht.Range(sCodeName & ".H0").Left + sht.Range(sCodeName & ".H0").Width) - indent - shape.Width - offset
'            offset = offset + shape.Width + spacing
'            Exit For
'        End If
'    Next
'    SetLogos_v3 = True
'subend:
'    modStack.PopCallStack
'    Exit Function
'suberr:
'    If (err.Number = 424) Or (err.Number = -2147024809) Then
'        Resume Next                     'blaue pfeile bei circular references: ignorieren
'    Else
'        AppErrMsg "modShapes.PositionLogo_v3 error:"
'        Resume subend
'    End If
'
'End Function

Public Function AdjustConfigLogoSize() As Boolean

Dim dLogoRatio As Double
Dim sconfiglogo3 As String
Dim shape As shape
Dim indent As Integer
Dim dnewheight As Integer

On Error GoTo suberr
modStack.PushCallStack "modShapes", "AdjustConfigLogoSize"

sconfiglogo3 = Config_Lic.Range("Config.Logo3").value
indent = Config_Lic.Range("Config.LogoIndent3").value

For Each shape In Config_Lic.Shapes
    If shape.Name = sconfiglogo3 Then
        dnewheight = (Cover.Range("Cover.H0").EntireRow.Height - indent * 2)
        'dLogoRatio = (Cover.Range("Cover.H0").EntireRow.Height - indent * 2) / shape.Height
        'If Math.Abs((shape.Width * dLogoRatio) - shape.Width) > 0.5 Then _
        '    shape.Width = shape.Width * dLogoRatio
        shape.Height = dnewheight
        shape.visible = msoTrue
        Exit For
    End If
Next

AdjustConfigLogoSize = True

subend:
    modStack.PopCallStack
    Exit Function
suberr:
    AppErrMsg "modShapes.AdjustConfigLogoSize error:"
    Resume subend
End Function

Public Sub PositionLogo_v3(sht As Worksheet, Optional bResetFromConfig As Boolean = False)
'positioning logo within header
    Dim indent As Integer
    Dim sCodeName As String
    Dim rCellConf As Range
    Dim shapeConf As shape
    Dim shape As shape
    Dim SearchRange As Range
    Dim sconfiglogo3 As String
    
    On Error Resume Next 'GoTo SubErr
'PERFORMANCE!!!
'    modStack.PushCallStack "modShapes", "SetLogos_v3"
    
    sCodeName = sht.CodeName
    If sht.CodeName = "Statusreport" Then sCodeName = "Status"
    
    On Error Resume Next
    If sht.Range(sCodeName & ".H0") Is Nothing Then GoTo subend
    If sht.Range(sCodeName & ".H0").Height = 0 Then GoTo subend
    
    On Error GoTo suberr
    indent = Config_Lic.Range("Config.LogoIndent3").value
    sconfiglogo3 = Config_Lic.Range("Config.Logo3").value
    
    'if needed we first make sure the sheet contains the correct logo
    If bResetFromConfig And (sht.Name <> "Config_Lic") Then
        'remove logos from sheet
        For Each shape In sht.Shapes
            If shape.Type = msoPicture Then
                If shape.TopLeftCell.row <= sht.Range(sCodeName & ".H0").row Then
                    shape.Delete
                End If
            End If
        Next
        
        'look in config for shape to copy
        'shape exists -> copy to sheet
        'shape soesn't exist -> do nothing
        For Each shapeConf In Config_Lic.Shapes
            If shapeConf.Name = sconfiglogo3 Then
               shapeConf.Copy
               sht.Paste
            End If
        Next
    End If
    
    'snap logo to .H0
    For Each shape In sht.Shapes
        If shape.Name = sconfiglogo3 Then
            shape.Top = sht.Range(sCodeName & ".H0").Top + indent
            shape.Left = (sht.Range(sCodeName & ".H0").Left + sht.Range(sCodeName & ".H0").Width) - indent - shape.Width
            shape.visible = msoTrue
            Exit For
        End If
    Next
subend:
'    modStack.PopCallStack
    Exit Sub
suberr:
    If (err.Number = 424) Or (err.Number = -2147024809) Then
        Resume Next                     'blaue pfeile bei circular references: ignorieren
    Else
        AppErrMsg "modShapes.PositionLogo_v3 error:"
        Resume subend
    End If
    
End Sub

'---------------------------------------------------------------------------------------
' MoveControlsHorizontally
' shifts the topleftcells of controls to the left or right.
' use for operations which add or remove columns in a sheet.
' @date     21.01.2011
' @author   wm
' @version  1.0
' @param    sht         worksheet where controls are located
' @param    movement    how many rows the control should be moved
' @param    minColumn   only effective on controls right of this column
' @param    minRow      only effective on controls above this row
'---------------------------------------------------------------------------------------
'
Public Sub MoveControlsHorizontally(sht As Worksheet, movement As Integer, Optional minColumn As String = "A", Optional minRow As Integer = 3)
    Dim SearchRange As Range
    Dim rCell As Range
    Dim R As Range
    Dim rReferenceCell As Range
    Dim Counter As Integer
    Dim s As shape
    
    On Error GoTo suberr
    modStack.PushCallStack "modShapes", "MoveControlsHorizontally"
    
    Set SearchRange = getRange(Config, "Config.ControlDefinitions", 0, 1, 0, 0)
    
    'generate range object with all the charts' names in it
    With SearchRange
        Set rCell = .Cells(1, 1)
        For Counter = 1 To WorksheetFunction.CountIf(.Cells, sht.CodeName)
            Set rCell = .Find(What:=sht.CodeName, After:=rCell, LookIn:=xlValues, _
                              LookAt:=xlWhole, SearchOrder:=xlByRows, _
                              SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
            If Not rCell Is Nothing Then
                If R Is Nothing Then
                    Set R = rCell.offset(0, 1)
                Else
                    Set R = Union(R, rCell.offset(0, 1)) 'MsgBox rCell.value & " / " & rCell.Offset(0, 1).value
                End If
            End If
        Next Counter
    End With
    
    Dim minCol As Integer
    Dim ref As String
    minCol = Range(minColumn & ":" & minColumn).Column
    
    For Each s In sht.Shapes
        If s.Type = msoFormControl Then
            
            With R
                Set rCell = .Find(s.Name, LookIn:=xlValues)
                If Not rCell Is Nothing Then
                    Set rReferenceCell = Range(rCell.offset(0, 5).value)
                    ref = rCell.offset(0, 5).value
                    If Range(ref).Column >= minCol And Range(ref).row <= minRow Then
                        rCell.offset(0, 5).value = rReferenceCell.offset(0, movement).Address
                    End If
                End If
            End With
            
        End If
    Next
'    RearrangeControls sht
    
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "SetCharts error:"
    Resume subend
End Sub



Private Sub CheckAndRearrangeControls()
    Dim sht As Worksheet
    Dim cell As Range
    Dim s As shape
    Dim R As Range
    
    'msoOLEControlObject    titelbild
    'msoFormControl         form controls
    'msoComment             comments (plan)
    'msopicture             bild (company logo)
    
    'Set r = Config.Range("Config.ControlDefinitions")
    On Error GoTo suberr
    modStack.PushCallStack "modShapes", "CheckAndRearrangeControls"

    If MsgBox("alle Objekte werden neu platziert", vbYesNo, "Rearrange Controls?") = vbNo Then GoTo subend
    Set R = getRange(Config, "Config.ControlDefinitions", 0, 1, 0, 0)
    For Each sht In Sheets
        For Each s In sht.Shapes
            If s.Type = msoFormControl Or _
                s.Type = msoOLEControlObject Or _
                s.Type = msoComment Or _
                s.Type = msoPicture Then
                For Each cell In R
                    If cell.value = sht.CodeName Then
                        If cell.offset(0, 1).value = s.Name Then
                            'checks and tolerance are for performance reasons
                            If Abs(cell.offset(0, 2).value - s.Top) > 0.25 Or _
                                Abs(cell.offset(0, 3).value - s.Left) > 0.25 Or _
                                Abs(cell.offset(0, 4).value - s.Height) > 0.25 Or _
                                Abs(cell.offset(0, 5).value - s.Width) > 0.25 Then
                                
                                Range(cell, cell.offset(0, 5)).Font.ColorIndex = 3
                                If Abs(cell.offset(0, 2).value - s.Top) > 0.25 Then
                                    cell.offset(0, 6).NumberFormat = "0.00"
                                    cell.offset(0, 6).Font.ColorIndex = 3
                                    cell.offset(0, 6).value = Abs(cell.offset(0, 2).value - s.Top)
                                Else
                                    cell.offset(0, 6).value = 0
                                End If
                                If Abs(cell.offset(0, 3).value - s.Left) > 0.25 Then
                                    cell.offset(0, 7).NumberFormat = "0.00"
                                    cell.offset(0, 7).Font.ColorIndex = 3
                                    cell.offset(0, 7).value = Abs(cell.offset(0, 3).value - s.Left)
                                Else
                                    cell.offset(0, 7).value = 0
                                End If
                                If Abs(cell.offset(0, 4).value - s.Height) > 0.25 Then
                                    cell.offset(0, 8).NumberFormat = "0.00"
                                    cell.offset(0, 8).Font.ColorIndex = 3
                                    cell.offset(0, 8).value = Abs(cell.offset(0, 4).value - s.Height)
                                Else
                                    cell.offset(0, 8).value = 0
                                End If
                                If Abs(cell.offset(0, 5).value - s.Width) > 0.25 Then
                                    cell.offset(0, 9).NumberFormat = "0.00"
                                    cell.offset(0, 9).Font.ColorIndex = 3
                                    cell.offset(0, 9).value = Abs(cell.offset(0, 5).value - s.Width)
                                Else
                                    cell.offset(0, 9).value = 0
                                End If
                                
'                                cell.Offset(0, 6).value = "(" & Abs(cell.Offset(0, 2).value - s.Top) & "/" & _
'                                                        Abs(cell.Offset(0, 3).value - s.Left) & "/" & _
'                                                        Abs(cell.Offset(0, 4).value - s.Height) & "/" & _
'                                                        Abs(cell.Offset(0, 5).value - s.Width) & ")"
'                                MsgBox "mispositioned item detected in sheet " & sht.CodeName & ":" & vbCrLf & _
'                                "title: " & s.name & vbCrLf & _
'                                "top: " & s.Top & " -> " & cell.Offset(0, 2).value & vbCrLf & _
'                                "left: " & s.Left & " -> " & cell.Offset(0, 3).value & vbCrLf & _
'                                "height: " & s.Height & " -> " & cell.Offset(0, 4).value & vbCrLf & _
'                                "width: " & s.Width & " -> " & cell.Offset(0, 5).value
                                
                                s.Top = cell.offset(0, 2)
                                s.Left = cell.offset(0, 3)
                                s.Height = cell.offset(0, 4)
                                s.Width = cell.offset(0, 5)
                            End If
                        End If
                    End If
                Next
            End If
        Next
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modShapes.CheckAndRearrangeControls error:"
    Resume subend
End Sub


'Public Sub SaveSingleChart(sht As Worksheet, chtObj As ChartObject)
''                            Optional iChartAreaTop As Integer, Optional iChartAreaLeft As Integer, _
''                            Optional iChartAreaHeight As Integer, Optional iChartAreaWidth As Integer, _
''                            Optional iPlotAreaTop As Integer, Optional iPlotAreaLeft As Integer, _
''                            Optional iPlotAreaHeight As Integer, Optional iPlotAreaWidth As Integer)
'    Dim SearchRange As Range
'    Dim rCell As Range
'    Dim r As Range
'    Dim Counter As Integer
'    Dim rTopLeftCell As Range
'    Dim rBottomRightCell As Range
'
'    On Error GoTo SubErr
'
'    DisableScreenUpdating
'    Set SearchRange = getRange(Config, "Config.ChartDefinitions", 0, 1, 0, 0)
'
'    'generate range object with all the charts' names in it
'    With SearchRange
'        Set rCell = .Cells(1, 1)
'        For Counter = 1 To WorksheetFunction.CountIf(.Cells, sht.CodeName)
'            Set rCell = .Find(What:=sht.CodeName, After:=rCell, LookIn:=xlValues, _
'                              LookAt:=xlWhole, SearchOrder:=xlByRows, _
'                              SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
'            If Not rCell Is Nothing Then
'                If r Is Nothing Then
'                    Set r = rCell.Offset(0, 1)
'                Else
'                    Set r = Union(r, rCell.Offset(0, 1)) 'MsgBox rCell.value & " / " & rCell.Offset(0, 1).value
'                End If
'            End If
'        Next Counter
'    End With
'
'    'find chart object in this range and save it
'    With r
'        Set rCell = .Find(chtObj.name, LookIn:=xlValues)
'        If Not rCell Is Nothing Then
'            Set rTopLeftCell = getRange(sht, chtObj.name & ".TL", 0, 1, 0, 0)
'            Set rBottomRightCell = getRange(sht, chtObj.name & ".BR", 0, 1, 0, 0)
'            'r.Cells(lastrow, 1).value = sht.CodeName
'            'rCell.Offset(0, 1).value = chtObj.name
'            r.Cells(lastRow, 1).value = chtObj.chart.ChartArea.Top - rTopLeftCell.Top                                           'y to tlc T
'            r.Cells(lastRow, 2).value = chtObj.chart.ChartArea.Left - rTopLeftCell.Left                                         'x to tlc L
'            r.Cells(lastRow, 3).value = chtObj.chart.ChartArea.Top + chtObj.chart.ChartArea.Height - rBottomRightCell.Top       'y to brc T
'            r.Cells(lastRow, 4).value = chtObj.chart.ChartArea.Left + chtObj.chart.ChartArea.Width - rBottomRightCell.Left      'x to brc L
'            r.Cells(lastRow, 5).value = chtObj.chart.PlotArea.Top - rTopLeftCell.Top                                            'y to tlc T
'            r.Cells(lastRow, 6).value = chtObj.chart.PlotArea.Left - rTopLeftCell.Left                                          'x to tlc L
'            r.Cells(lastRow, 7).value = chtObj.chart.PlotArea.Top + chtObj.chart.PlotArea.Height - rBottomRightCell.Top         'y to brc T
'            r.Cells(lastRow, 8).value = chtObj.chart.PlotArea.Left + chtObj.chart.PlotArea.Width - rBottomRightCell.Left        'y to brc L
'        End If
'    End With
'SubEnd:
'
'    Exit Sub
'SubErr:
'    AppErrMsg "SetCharts error:"
'    Resume SubEnd
'End Sub

Public Sub SetChartPlotLeft(sht As Worksheet, chtobj As ChartObject, dPlotAreaLeft As Double)

    Dim SearchRange As Range
    Dim rCell As Range
    Dim R As Range
    Dim rTopLeftCell As Range
    Dim rBottomRightCell As Range
    Dim Counter As Integer
    
    On Error GoTo suberr
    modStack.PushCallStack "modShapes", "SetChartPlotLeft"
    
    
    Set SearchRange = getRange(Config, "Config.ChartDefinitions", 0, 1, 0, 0)
    
    'generate range object with all the charts' names in it
    With SearchRange
        Set rCell = .Cells(1, 1)
        For Counter = 1 To WorksheetFunction.CountIf(.Cells, sht.CodeName)
            Set rCell = .Find(What:=sht.CodeName, After:=rCell, LookIn:=xlValues, _
                              LookAt:=xlWhole, SearchOrder:=xlByRows, _
                              SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
            If Not rCell Is Nothing Then
                If R Is Nothing Then
                    Set R = rCell.offset(0, 1)
                Else
                    Set R = Union(R, rCell.offset(0, 1)) 'MsgBox rCell.value & " / " & rCell.Offset(0, 1).value
                End If
            End If
        Next Counter
    End With
    
    'find chart object in this range and save it
    With R
        Set rCell = .Find(chtobj.Name, LookIn:=xlValues)
        If Not rCell Is Nothing Then
            Set rTopLeftCell = getRange(sht, chtobj.Name & ".TL", 0, 1, 0, 0)
            Set rBottomRightCell = getRange(sht, chtobj.Name & ".BR", 0, 1, 0, 0)
            If dPlotAreaLeft = -1 Then
                rCell.offset(0, 6).value = rCell.offset(0, 11).value
            Else
                rCell.offset(0, 6).value = chtobj.Chart.PlotArea.Left - rTopLeftCell.Left    'x to tlc L
            End If
        End If
    End With
subend:
    
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "SetCharts error:"
    Resume subend
End Sub

Public Sub ListShapes(sht As Worksheet)
    Dim s As shape
    On Error GoTo suberr
    modStack.PushCallStack "modShapes", "ListShapes"

    For Each s In sht.Shapes
        Debug.Print s.Name
    Next

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modShapes.ListShapes error:"
    Resume subend
End Sub

















'---------------------------------------------------------------------------------------
' ***** all code below doesn't work properly (yet...) *****
'---------------------------------------------------------------------------------------












Public Sub AlignChart(co As ChartObject, Target As Range)

    On Error GoTo suberr
    modStack.PushCallStack "modShapes", "AlignChart"
    
    Dim PA As PlotArea:         Set PA = co.Chart.PlotArea
    Dim InsideLeft As Double:   InsideLeft = PA.InsideLeft  'for some weird reason this has to be read to a variable first, otherwise excel 2007 will crash with the "Expression too complex" error (16)
    Dim DeltaLeft As Double:    DeltaLeft = Target.Left - (co.Left + InsideLeft)
    Dim DeltaRight As Double:   DeltaRight = Target.Width - PA.InsideWidth

    PA.Width = PA.Width + DeltaRight
    PA.Left = PA.Left + DeltaLeft - 4 'honestly i don't know why this has to be adjusted by 4 points, maybe that is the width of the axis line itself?

subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modShapes.AlignChart error:"
    Resume subend
End Sub


Public Sub AlignChart2(co As ChartObject, Target As Range)

    On Error GoTo suberr
    modStack.PushCallStack "modShapes", "AlignChart"
    
    Dim PA As PlotArea:         Set PA = co.Chart.PlotArea
    Dim InsideLeft As Double:   InsideLeft = PA.InsideLeft  'for some weird reason this has to be read to a variable first, otherwise excel 2007 will crash with the "Expression too complex" error (16)
    Dim InsideTop As Double:    InsideTop = PA.InsideTop
    Dim DeltaLeft As Double:    DeltaLeft = Target.Left - (co.Left + InsideLeft)
    Dim DeltaWidth As Double:   DeltaWidth = Target.Width - PA.InsideWidth
    Dim DeltaTop As Double:     DeltaTop = Target.Top - (co.Top + InsideTop)
    Dim DeltaHeight As Double:  DeltaHeight = Target.Height - PA.InsideHeight

    PA.Left = PA.Left + DeltaLeft - 4 'honestly i don't know why this has to be adjusted by 4 points, maybe that is the width of the axis line itself?
    PA.Width = PA.Width + DeltaWidth
    PA.Top = PA.Top + DeltaTop - 4
    PA.Height = PA.Height + DeltaHeight
    
subend:
    modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modShapes.AlignChart error:"
    Resume subend
End Sub



Public Sub AlignCharts(chrt1 As ChartObject, chrt2 As ChartObject)
    
    
    'align horizontal axis to top value
    'align vertical axis to left value
    'adjust horizontal axis' width to width value
    'adjust vertical axis height to height value
    
    
    
End Sub

Public Sub AlignAxes(chrt1 As ChartObject, chrt2 As ChartObject)
    Dim iChrt1 As Integer
    Dim iChrt2 As Integer
    iChrt1 = 1 'xlCategory
    iChrt2 = 1 'xlCategory
    If chrt1.Chart.Axes(1).Height < chrt1.Chart.Axes(2).Height Then iChrt1 = 2 'xlValue
    If chrt2.Chart.Axes(1).Height < chrt2.Chart.Axes(2).Height Then iChrt2 = 2 'xlValue
    
    'der untenstehende Code reduziert die durchschnittlich ca. 300 Schritte,
    'die zum Geradeziehen des Charts ben|fffd|tigt werden,  auf 6-8 Schritte
    Dim movement As Integer                            ' in pixels
    movement = 64  '128                                ' start with powers of 2
    
    'left to right
    'move over edge once
    If chrt1.Left + chrt1.Chart.Axes(iChrt1).Left > chrt2.Left + chrt2.Chart.Axes(iChrt2).Left Then
        While chrt1.Left + chrt1.Chart.Axes(iChrt1).Left > chrt2.Left + chrt2.Chart.Axes(iChrt2).Left
            chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left - movement
            chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width + movement
        Wend
    Else
        While chrt1.Left + chrt1.Chart.Axes(iChrt1).Left < chrt2.Left + chrt2.Chart.Axes(iChrt2).Left
            chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left + movement
            chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width - movement
        Wend
        chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left - movement
        chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width + movement
    End If
    
    movement = movement / 2
    While movement > 0
        If Abs((chrt1.Left + chrt1.Chart.Axes(iChrt1).Left) - (chrt2.Left + chrt2.Chart.Axes(iChrt2).Left)) <= 1 Then
            movement = 0
        ElseIf chrt1.Left + chrt1.Chart.Axes(iChrt1).Left < chrt2.Left + chrt2.Chart.Axes(iChrt2).Left Then
            'move right
            chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left + movement
            chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width - movement
            movement = movement / 2
        Else
            'move left
            chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left - movement
            chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width + movement
            movement = movement / 2
        End If
    Wend
    
    Debug.Print "aligning complete: co axis left: " & chrt1.Left + chrt1.Chart.Axes(iChrt1).Left & _
                "; coref axis left: " & chrt2.Left + chrt2.Chart.Axes(iChrt2).Left & _
                "; plotarea.left: " & chrt1.Chart.PlotArea.Left
                
    iChrt1 = 1 'xlCategory
    iChrt2 = 1 'xlCategory
    If chrt1.Chart.Axes(1).Width < chrt1.Chart.Axes(2).Width Then iChrt1 = 2 'xlValue
    If chrt2.Chart.Axes(1).Width < chrt2.Chart.Axes(2).Width Then iChrt2 = 2 'xlValue
    movement = 64
    'top to bottom
    'move over edge once
    If chrt1.Top + chrt1.Chart.Axes(iChrt1).Top > chrt2.Top + chrt2.Chart.Axes(iChrt2).Top Then
        While chrt1.Top + chrt1.Chart.Axes(iChrt1).Top > chrt2.Top + chrt2.Chart.Axes(iChrt2).Top
            chrt1.Chart.PlotArea.Top = chrt1.Chart.PlotArea.Top - movement
            chrt1.Chart.PlotArea.Height = chrt1.Chart.PlotArea.Height + movement
        Wend
    Else
        While chrt1.Top + chrt1.Chart.Axes(iChrt1).Top < chrt2.Top + chrt2.Chart.Axes(iChrt2).Top
            chrt1.Chart.PlotArea.Top = chrt1.Chart.PlotArea.Top + movement
            chrt1.Chart.PlotArea.Height = chrt1.Chart.PlotArea.Height - movement
        Wend
        chrt1.Chart.PlotArea.Top = chrt1.Chart.PlotArea.Top - movement
        chrt1.Chart.PlotArea.Height = chrt1.Chart.PlotArea.Height + movement
    End If
    
    movement = movement / 2
    While movement > 0
        If Abs((chrt1.Top + chrt1.Chart.Axes(iChrt1).Top) - (chrt2.Top + chrt2.Chart.Axes(iChrt2).Top)) <= 1 Then
            movement = 0
        ElseIf chrt1.Top + chrt1.Chart.Axes(iChrt1).Top < chrt2.Top + chrt2.Chart.Axes(iChrt2).Top Then
            'move right
            chrt1.Chart.PlotArea.Top = chrt1.Chart.PlotArea.Top + movement
            chrt1.Chart.PlotArea.Height = chrt1.Chart.PlotArea.Height - movement
            movement = movement / 2
        Else
            'move left
            chrt1.Chart.PlotArea.Top = chrt1.Chart.PlotArea.Top - movement
            chrt1.Chart.PlotArea.Height = chrt1.Chart.PlotArea.Height + movement
            movement = movement / 2
        End If
    Wend
    Debug.Print "aligning complete: co axis top: " & chrt1.Top + chrt1.Chart.Axes(iChrt1).Top & _
                "; coref axis top: " & chrt2.Top + chrt2.Chart.Axes(iChrt2).Top & _
                "; plotarea.top: " & chrt1.Chart.PlotArea.Top
    
End Sub

Public Sub AlignAxesToValues(chrt1 As ChartObject, leftPos As Double, topPos As Double)
    Dim iChrt1 As Integer
    Dim step As Integer
    iChrt1 = 1 'xlCategory
    If chrt1.Chart.Axes(1).Height < chrt1.Chart.Axes(2).Height Then iChrt1 = 2 'xlValue
    
    'der untenstehende Code reduziert die durchschnittlich ca. 300 Schritte,
    'die zum Geradeziehen des Charts ben|fffd|tigt werden,  auf 6-8 Schritte
    Dim movement As Integer                            ' in pixels
    movement = 64  '128                                ' start with powers of 2
    
    'left to right
    'move over edge once
    If chrt1.Left + chrt1.Chart.Axes(iChrt1).Left + chrt1.Chart.Axes(iChrt1).Width > leftPos Then
        While chrt1.Left + chrt1.Chart.Axes(iChrt1).Left + chrt1.Chart.Axes(iChrt1).Width > leftPos
            chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left - movement
            chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width + movement
            step = step + 1
        Wend
    Else
        While chrt1.Left + chrt1.Chart.Axes(iChrt1).Left + chrt1.Chart.Axes(iChrt1).Width < leftPos
            chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left + movement
            chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width - movement
            step = step + 1
        Wend
        chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left - movement
        chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width + movement
            step = step + 1
    End If
    
    movement = movement / 2
    While movement > 0
        If Abs(chrt1.Left + chrt1.Chart.Axes(iChrt1).Left + chrt1.Chart.Axes(iChrt1).Width - leftPos) <= 1 Then
            movement = 0
        ElseIf chrt1.Left + chrt1.Chart.Axes(iChrt1).Left + chrt1.Chart.Axes(iChrt1).Width < leftPos Then
            'move right
            chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left + movement
            chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width - movement
            movement = movement / 2
            step = step + 1
        Else
            'move left
            chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left - movement
            chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width + movement
            movement = movement / 2
            step = step + 1
        End If
    Wend
    
    Debug.Print "aligning complete: co axis left: " & chrt1.Left + chrt1.Chart.Axes(iChrt1).Left + chrt1.Chart.Axes(iChrt1).Width & _
                "; leftPos: " & leftPos & _
                "; plotarea.left: " & chrt1.Chart.PlotArea.Left
                
    iChrt1 = 1 'xlCategory
    step = 0
    movement = 8
    If chrt1.Chart.Axes(1).Width < chrt1.Chart.Axes(2).Width Then iChrt1 = 2 'xlValue
    'top to bottom
    'move over edge once
    If chrt1.Top + chrt1.Chart.Axes(iChrt1).Top > topPos Then
        While chrt1.Top + chrt1.Chart.Axes(iChrt1).Top > topPos
            chrt1.Chart.PlotArea.Top = chrt1.Chart.PlotArea.Top - movement
            'chrt1.chart.PlotArea.Height = chrt1.chart.PlotArea.Height + movement
            step = step + 1
        Wend
    Else
        While chrt1.Top + chrt1.Chart.Axes(iChrt1).Top < topPos
            chrt1.Chart.PlotArea.Top = chrt1.Chart.PlotArea.Top + movement
            'chrt1.chart.PlotArea.Height = chrt1.chart.PlotArea.Height - movement
            step = step + 1
        Wend
        chrt1.Chart.PlotArea.Top = chrt1.Chart.PlotArea.Top - movement
        'chrt1.chart.PlotArea.Height = chrt1.chart.PlotArea.Height + movement
            step = step + 1
    End If
    
    movement = movement / 2
    While movement > 0
        If Abs(chrt1.Top + chrt1.Chart.Axes(iChrt1).Top - topPos) <= 1 Then
            movement = 0
        ElseIf chrt1.Top + chrt1.Chart.Axes(iChrt1).Top < topPos Then
            'move down
            chrt1.Chart.PlotArea.Top = chrt1.Chart.PlotArea.Top + movement
            'chrt1.chart.PlotArea.Height = chrt1.chart.PlotArea.Height - movement
            movement = movement / 2
            step = step + 1
        Else
            'move up
            chrt1.Chart.PlotArea.Top = chrt1.Chart.PlotArea.Top - movement
            'chrt1.chart.PlotArea.Height = chrt1.chart.PlotArea.Height + movement
            movement = movement / 2
            step = step + 1
        End If
        
    Wend
    Debug.Print "aligning complete: co axis top: " & chrt1.Top + chrt1.Chart.Axes(iChrt1).Top & _
                "; toppos: " & topPos & _
                "; plotarea.top: " & chrt1.Chart.PlotArea.Top
    
End Sub
Sub testAlignment()
    AlignAxesToValues Cost.ChartObjects(1), 294, 175.5
End Sub

Public Sub AlignAxes_old(chrt1 As ChartObject, chrt2 As ChartObject, Optional xPos As Double = -1)
       
    Dim xp As Double
    If xPos > -1 Then
        xp = xPos
    Else
        xp = chrt2.Left + chrt2.Chart.Axes(xlCategory, xlPrimary).Left
    End If
    
    'der untenstehende Code reduziert die durchschnittlich ca. 200 Schritte,
    'die zum Geradeziehen des Charts ben|fffd|tigt werden,  auf 6-8 Schritte
    Dim movement As Integer                            ' in pixels
    movement = 64  '128                                ' start with powers of 2
    
    'move over edge once
    If chrt1.Left + chrt1.Chart.Axes(xlCategory, xlPrimary).Left > xp Then
        While chrt1.Left + chrt1.Chart.Axes(xlCategory, xlPrimary).Left > xp
            chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left - movement
            chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width + movement
        Wend
    Else
        While chrt1.Left + chrt1.Chart.Axes(xlCategory, xlPrimary).Left < xp
            chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left + movement
            chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width - movement
        Wend
        chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left - movement
        chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width + movement
    End If
    
    movement = movement / 2
    While movement > 0
        If Abs(chrt1.Left + chrt1.Chart.Axes(xlCategory, xlPrimary).Left - xp) <= 1 Then
            movement = 0
        ElseIf chrt1.Left + chrt1.Chart.Axes(xlCategory, xlPrimary).Left < xp Then
            'move right
            chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left + movement
            chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width - movement
            movement = movement / 2
        Else
            'move left
            chrt1.Chart.PlotArea.Left = chrt1.Chart.PlotArea.Left - movement
            chrt1.Chart.PlotArea.Width = chrt1.Chart.PlotArea.Width + movement
            movement = movement / 2
        End If
    Wend
    
    Debug.Print "aligning complete: co axis left: " & chrt1.Left + chrt1.Chart.Axes(xlCategory, xlPrimary).Left & _
                "; coref axis left: " & chrt2.Left + chrt2.Chart.Axes(xlCategory, xlPrimary).Left & _
                "; plotarea.left: " & chrt1.Chart.PlotArea.Left
End Sub



































'---------------------------------------------------------------------------------------
' ControlGrid
'
' @date     10.02.2011
' @author   wm
' @version  1.0
' @param
' @return
'---------------------------------------------------------------------------------------
'
Public Sub ControlGrid(sht As Worksheet)

    Dim shape As shape
    Dim rCell As Range
    
    Dim rUpperLeftCell As Range
    Dim rLowerLeftCell As Range
    
    Dim sCodeName As String
    Dim dGridAreaHeight As Double
    Dim iCellCount As Integer
    
    Dim coll As Collection
    
    On Error GoTo suberr
    'modStack.PushCallStack "modShapes", "ControlGrid"
    
    sCodeName = sht.CodeName
    If sht.CodeName = "Statusreport" Then sCodeName = "Status"
    If sht.CodeName = "Admin" Then GoTo subend
    If sht.Range(sCodeName & ".H1") Is Nothing Then GoTo subend
    If sht.CodeName = "Meeting" Then GoTo subend
    If sht.CodeName = "WP" Then GoTo subend
    
    Set rCell = sht.Range(sCodeName & ".H1")
    iCellCount = rCell.Cells.Count
    Set rCell = sht.Range(sCodeName & ".H1").Cells(1, iCellCount)

    Set rUpperLeftCell = rCell.offset(0, 2)
    If Not rCell.row = 1 Then Set rUpperLeftCell = rCell.offset(-1, 2)
    Set rLowerLeftCell = rCell.offset(1, 2)
    
    'Range(rUpperLeftCell, rLowerLeftCell).Select
    dGridAreaHeight = (rLowerLeftCell.Top + rLowerLeftCell.Height) - rUpperLeftCell.Top
    'Debug.Print dGridAreaHeight
    
    
    'set up collection
    Set coll = New Collection
    For Each shape In sht.Shapes
        If shape.Left > rLowerLeftCell.Left Then
            If shape.Top < (rLowerLeftCell.Top + rLowerLeftCell.Height) Then
                If Not shape.Type = msoFormControl Then
                    GoTo subend
                Else
                    coll.Add shape.Name
                End If
            End If
        End If
    Next

    'group similars
    'anhand des namens? oder nach kriterien?
    'wie z.b. 'next' / 'prev' oder 'add' / 'delete'

subend:
    'modStack.PopCallStack
    Exit Sub
suberr:
    AppErrMsg "modShapes.ControlGrid error:"
    Resume subend

End Sub


'---------------------------------------------------------------------------------------
' RearrangeControls
' rearranges all form- and control objects contained in the calling sheet
' to the values stored in Config.ControlDefinitions (top/left/height/width)
' @date     03.01.2011
' @author   wm
' @version  1.0
' @param    sht Worksheet where controls should be rearranged
'---------------------------------------------------------------------------------------
'
Public Function RearrangeControlsAtGrid(Optional sht As Worksheet) As Boolean
'    Dim CG As New TPGControlGrid
'    If CG.Init(sht) Then
'        CG.ArrangeControls
'        RearrangeControlsAtGrid = True
'    Else
'        RearrangeControlsAtGrid = False
'    End If
End Function

Attribute VB_Name = "modStack"
'---------------------------------------------------------------------------------------
' Module    : modStack
' Author    : wm
' Date      : 19.01.2011
' Purpose   :   this module provides callstack functionality and - based on this call
'               stack - handles sheet protection as well as screen updating.
'               in addition it packs basic progress bar functionality.
'               most of these procedures do not have an error handler or register
'               themselves in the callstack. this is intentional and necessary for
'               the callstack to function properly.
'---------------------------------------------------------------------------------------

Option Explicit
Option Private Module

'--------------------------------call stack related-------------------------------------
' Current depth of the call stack
Private iStackPointer As Integer

' Collection Object as CallStack
Private CallStack As New Collection

'name of initially pushed procedure
Public sInitProc As String

'timestamp generated when push operation is called
'Private sInitTime As String

'name of the initially calling object
Private sCaller As String

'collection containing procedures to be skipped
Private cSkipList As New Collection

'--------------------------------progress bar related-----------------------------------
'project bar object
Private PB As TPGProgressBar

'procedure count when showing overall progress in progress bar
Public iProgBarPartialProcCount As Integer

'---------------------------------status bar related------------------------------------
Private dStatusBarCounter As Double
Private Const sStatusBarText = "|07||07||07||07||07||07||07||07||07||07||07||07||07||07||07||07||07||07||07||07|"

'--------------UI Handler manages protection, screenupdating, events, etc.--------------
Private UI As TPGUIHandler


                                             
                                             
'---------------------------------------------------------------------------------------
' PushCallStack
' Adds the current procedure to the call stack collection.
' Needs to be called at the beginning of each procedure.
' Also provides enhanced ScreenUpdating functionality
' @date     05.01.2011
' @author   wm
' @version  1.0
' @param    ModuleName      name of the calling procedure's module
' @param    ProcedureName   name of the calling procedure
'---------------------------------------------------------------------------------------
'
Public Sub PushCallStack(ModuleName As String, ProcedureName As String)
    
    Dim strProcName As String
    strProcName = ModuleName & "." & ProcedureName
    
    ' disable ScreenUpdating whenever the stack size is 0
    ' stack size of 0 means that this is the initial call
    If iStackPointer = 0 Then
        sInitProc = strProcName
        Set UI = New TPGUIHandler
        UI.InitialProcName = sInitProc
    End If
    
    ' add item to CallStack
    CallStack.Add strProcName
    
    ' increment pointer to next element
    iStackPointer = iStackPointer + 1
    
    'enable progress bar?
    If Not PB Is Nothing Then PB.update
    
    'statusbarupdate
    'If PB Is Nothing Then StatusBarTick
    
    'cancel event?
    If ProcedureName = "Worksheet_Change" And bEventDisableWorksheetChange Then err.Raise 9999
    If ProcedureName = "Worksheet_Activate" And bEventDisableWorksheetActivate Then err.Raise 9999
    If ProcedureName = "Worksheet_SelectionChange" And bEventDisableWorksheetSelectionChange Then err.Raise 9999
    If ProcedureName = "Workbook_SheetActivate" And bEventDisableWorkbookSheetActivate Then err.Raise 9999
    
    'cancel defined procedure?
    If SkipProcedure(strProcName) Then err.Raise 9998   'treat in a different way?
    
End Sub


'---------------------------------------------------------------------------------------
' PopCallStack
' Removes the current procedure from the call stack collection.
' Needs to be called at the end of each procedure.
' Also provides enhanced ScreenUpdating functionality
' @date     05.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Public Sub PopCallStack()
    
    'skip once only?
    If SkipOnce(CurrentProcName) Then cSkipList.Remove CurrentProcName
    
    'remove item from CallStack
    CallStack.Remove iStackPointer
    
    'reset pointer to previous element
    iStackPointer = iStackPointer - 1
    
    'final actions to perform before the program terminates?
    If iStackPointer = 0 Then
        'reset eventhandlers?
        If RESET_EVENT_HANDLERS Then
            bEventDisableWorksheetChange = False
            bEventDisableWorksheetActivate = False
            bEventDisableWorksheetSelectionChange = False
            bEventDisableWorkbookSheetActivate = False
        End If

        'clear skip list
        Set cSkipList = Nothing
        
        'disable progress bar
        Set PB = Nothing
        iProgBarPartialProcCount = 0
        
        'disable UI handling
        Set UI = Nothing
        
        'reset vars
        sInitProc = ""
        dStatusBarCounter = 0
        
        'reset global objects
        this.TerminateObjects
        
    End If
    
End Sub


'---------------------------------------------------------------------------------------
' ProcHierarchy
'
' @date     31.01.2011
' @author   wm
' @version  1.0
' @param    [sProcName]     name of the process the corresponding hierarchy level
'                           should be returned
' @return   Integer         the hierarchy lvl of sProcName
'                           or the current hierarchy lvl if sProcName is omitted
'---------------------------------------------------------------------------------------
'
Public Function ProcHierarchy(Optional sProcName As String = "") As Integer
    Dim i As Integer
    Dim iResult As Integer
    If Not sProcName = "" Then
        For i = 1 To CallStack.Count
            If CallStack(i) = sProcName Then
                iResult = i
                Exit For
            End If
        Next
    Else
        iResult = iStackPointer
    End If
    ProcHierarchy = iResult
End Function


'---------------------------------------------------------------------------------------
' CurrentProcName
'
' @date     05.01.2011
' @author   wm
' @version  1.0
' @return   Name of the currently active procedure as String
'---------------------------------------------------------------------------------------
'
Public Function CurrentProcName() As String
    If iStackPointer > 0 Then
        CurrentProcName = CallStack.Item(iStackPointer)
    Else
        CurrentProcName = ""
    End If
    'iProgBarProcCount = 0
End Function


'---------------------------------------------------------------------------------------
' PreviousProcName
'
' @date     05.01.2011
' @author   wm
' @version  1.0
' @param    StackPosition       Position in the CallStack
' @return   Name of the previously active procedure as String
'---------------------------------------------------------------------------------------
'
Public Function PreviousProcName(Optional StackPosition As Integer = 1) As String
    If iStackPointer > StackPosition Then
        PreviousProcName = CallStack.Item(iStackPointer - StackPosition)
    Else
        PreviousProcName = ""
    End If
End Function


'---------------------------------------------------------------------------------------
' InitialProcName
'
' @date     11.01.2011
' @author   wm
' @version  1.0
' @return   Name of the initially pushed procedure in the CallStack
'---------------------------------------------------------------------------------------
'
Public Function InitialProcName() As String
    InitialProcName = sInitProc
End Function


'---------------------------------------------------------------------------------------
' IsProcRunning
'
' @date     31.01.2011
' @author   wm
' @version  1.0
' @param    sProcName   name of the process to check for
' @return   Boolean     true if it's running, false if not
'---------------------------------------------------------------------------------------
'
Public Function IsProcRunning(sProcName As String) As Boolean
    Dim i As Integer
    Dim bResult As Boolean
    For i = 1 To CallStack.Count
        If CallStack(i) = sProcName Then
            bResult = True
            Exit For
        End If
    Next
    IsProcRunning = bResult
End Function


'---------------------------------------------------------------------------------------
' CSToString
'
' @date     05.01.2011
' @author   wm
' @version  1.0
' @return   String representation of the CallStack collection
'---------------------------------------------------------------------------------------
'
Public Function CSToString() As String
    Dim s As String
    Dim i As Integer
    s = "<CS>"
    For i = 1 To iStackPointer
        If s = "<CS>" Then
            s = s & CallStack(i)
        Else
            s = s & "|" & CallStack.Item(i)
        End If
    Next
    s = s & "</CS>"
    CSToString = s
End Function


'---------------------------------------------------------------------------------------
' ResetCallStack
'
' @date     11.01.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub ResetCallStack()
    Set CallStack = Nothing
    iStackPointer = 0
    sInitProc = ""
End Sub


'---------------------------------------------------------------------------------------
' DeactivateProcedure
' disables execution of a specified procedure
' @date     11.02.2011
' @author   wm
' @version  1.0
' @param    sProcName   procedure to be deactivated
' @param    bOnlyOnce   deactivate only temporarily?
'---------------------------------------------------------------------------------------
'
Public Sub DeactivateProcedure(sProcName As String, Optional bOnlyOnce As Boolean = False)
    If KeyExists(cSkipList, sProcName) Then cSkipList.Remove (sProcName)
    cSkipList.Add bOnlyOnce, sProcName
End Sub


'---------------------------------------------------------------------------------------
' ReactivateProcedure
' re-enables execution of a specified procedure
' @date     11.02.2011
' @author   wm
' @version  1.0
' @param    sProcName   procedure to be reactivated
'---------------------------------------------------------------------------------------
'
Public Sub ReactivateProcedure(sProcName As String)
    If KeyExists(cSkipList, sProcName) Then cSkipList.Remove (sProcName)
End Sub


'---------------------------------------------------------------------------------------
' SkipProcedure
'
' @date     11.02.2011
' @author   wm
' @version  1.0
' @param    sProcName   procedure name to check if it should be skipped
' @return   Boolean     true/false
'---------------------------------------------------------------------------------------
'
Private Function SkipProcedure(sProcName As String) As Boolean
    If cSkipList.Count > 0 Then
        If KeyExists(cSkipList, sProcName) Then
            SkipProcedure = True
        End If
    Else
        SkipProcedure = False
    End If
End Function


'---------------------------------------------------------------------------------------
' SkipOnce
'
' @date     11.02.2011
' @author   wm
' @version  1.0
' @param    sProcName   procedure name to check if it should be skipped only once
' @return   Boolean     true/false
'---------------------------------------------------------------------------------------
'
Private Function SkipOnce(sProcName As String) As Boolean
    If cSkipList.Count > 0 Then
        If KeyExists(cSkipList, sProcName) Then
            SkipOnce = cSkipList(sProcName)
        End If
    Else
        SkipOnce = False
    End If
End Function



'---------------------------------------------------------------------------------------
' NewUserAction
'
' @date     11.01.2011
' @author   wm
' @version  1.0
' @return   True if a new user-action has been launched
'---------------------------------------------------------------------------------------
'
Private Function NewUserAction() As Boolean
    NewUserAction = False
    If GetCaller <> sCaller Then NewUserAction = True
End Function


'---------------------------------------------------------------------------------------
' ShowProgressBar
'
' pops up a progress bar
'
' @date     19.01.2011
' @author   wm
' @version  1.0
' @param    ActionCount         number of increments to expect of any occurrence of
'                               - processes in a defined hierarchy level
'                               - processes with a defined process name
' @param    [ProcName]          user defined text for the caption of the progress bar
' @param    [DefinedProcName]   process name to watch for
'---------------------------------------------------------------------------------------
'
Public Sub ShowProgressBar(ActionCount As Integer, Optional ProcName As String, Optional DefinedProcName As String = "")
    
    Set PB = Nothing
    Set PB = New TPGProgressBar
    
    With PB
        .ActionCount = ActionCount
        .EntryLevel = iStackPointer
        .Description = ProcName
        .ProcToWatch = DefinedProcName
    End With
    
End Sub

'---------------------------------------------------------------------------------------
' StatusBarTick
' ticks the excel status bar
' @date     02.02.2011
' @author   wm
' @version  1.0
'---------------------------------------------------------------------------------------
'
Private Sub StatusBarTick()
    Dim ssbar As String
    Dim isbar As Integer
    
    dStatusBarCounter = dStatusBarCounter + 0.05
    If dStatusBarCounter < 1 Then Exit Sub
    isbar = CInt(dStatusBarCounter) Mod 20
    ssbar = Left(sStatusBarText, isbar)
    Excel.Application.StatusBar = "working: " & ssbar
    
End Sub
    

Attribute VB_Name = "this"
'---------------------------------------------------------------------------------------
' Module    : This
' Author    : wm
' Date      : 21.09.2012
' Purpose   : class factory for glaobal singleton objects
'---------------------------------------------------------------------------------------

Option Explicit

Private oXML As TPGXML
Private oProject As TPGProject

Public Sub TerminateObjects()
    TerminateXML
    TerminateProject
End Sub

Public Property Get xml() As TPGXML
    If oXML Is Nothing Then Set oXML = New TPGXML
    Set xml = oXML
End Property

Private Sub TerminateXML()
    If Not oXML Is Nothing Then Set oXML = Nothing
End Sub

Public Property Get Project() As TPGProject
    If oProject Is Nothing Then Set oProject = New TPGProject
    Set Project = oProject
End Property

Private Sub TerminateProject()
    If Not oProject Is Nothing Then Set oProject = Nothing
End Sub


' InQuest injected base64 decoded content
' -"jh
' zWlz
' zWlz
' zWlz
' zWlz
' zWlz
' zWlz
' 2+&j
' abzWl
' '^Rw!y
' Gz(!
' 	eRzk
' BzYl
' V=*^pZ+
' AASe
' Uxn&aA*9
' *'~*

INQUEST-PP=macro
