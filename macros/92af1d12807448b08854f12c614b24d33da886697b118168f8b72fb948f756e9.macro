Attribute VB_Name = "Module1"
Option Explicit
Sub fixmultiline(str_textboxName As String)
Dim lngSelStart
 On Error Resume Next
 
 lngSelStart = ActiveSheet.OLEObjects(str_textboxName).Object.SelStart
 ActiveSheet.OLEObjects(str_textboxName).Object.MultiLine = False
 ActiveSheet.OLEObjects(str_textboxName).Object.MultiLine = True
 ActiveSheet.OLEObjects(str_textboxName).Object.SelStart = lngSelStart


End Sub
Sub checkLen(str_textboxName As String, str_rangeName As String)
ActiveSheet.Unprotect glbPw
Range(str_rangeName).Value = Len(ActiveSheet.OLEObjects(str_textboxName).Object.Text)
ActiveSheet.Protect glbPw
End Sub


Sub CheckQuest(str_checkname As String)
Dim i As Long
Dim bl_checkMulitple As Boolean, bl_MultiChoice As Boolean


Application.ScreenUpdating = False


bl_checkMulitple = False
bl_MultiChoice = False

If Range("rng_Q3Multiple").Value >= 2 Then
'bl_checkMulitple = True
bl_MultiChoice = True
End If

If Range("rng_QuestCount").Value >= 6 Then
bl_checkMulitple = True
End If

If bl_checkMulitple = True Or bl_MultiChoice = True Then
For i = 1 To ActiveSheet.OLEObjects.Count
        If TypeName(ActiveSheet.OLEObjects(i).Object) = "CheckBox" Then
           If ActiveSheet.OLEObjects(i).Name = str_checkname Then
           ActiveSheet.OLEObjects(i).Object.Value = False
           End If
             
        End If
    Next i
   End If

If bl_checkMulitple = True Then
MsgBox "You may only select a maximum of FIVE standard questions!"

ElseIf bl_MultiChoice = True Then
MsgBox "You may only select ONE sub question from this set"
End If



Application.ScreenUpdating = True
End Sub



Attribute VB_Name = "Module2"
Option Explicit

Sub test_mandatory()
Dim wb As Workbook
Dim ws As Worksheet
Dim r As Range
Dim int_i As Integer


Set wb = ThisWorkbook
Set ws = wb.Worksheets("Referral Form")


'On Error GoTo ErrorHandler
ws.Unprotect glbPw

int_i = 0

Application.ScreenUpdating = False
Application.DisplayAlerts = False


For Each r In Range("rng_mandatory")

If ws.Range(r.Value).Value = "" Then
int_i = int_i + 1
ws.Range(r.Value).Select
With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 255
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
    Else
    ws.Range(r.Value).Select
 With Selection.Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
    
End If
Next r

If ws_referral.OLEObjects("CheckBox7").Object.Value = True And ws_referral.Range("rng_selectMeetingType").Value = "(Please select)" Then
    MsgBox "Please ensure you select a meeting type for Question 6"
    ws_referral.Range("rng_selectMeetingType").Select
    Exit Sub
End If


If int_i > 0 Then
    MsgBox "You need to complete all the highlighted fields"
    Application.Goto Reference:=Range("a1"), Scroll:=True
    ws.Protect glbPw
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Exit Sub
Else
    ws.Range("rng_FileSent").Value = Now()
    ActiveWorkbook.Save
    MsgBox "Thank you for completing this referral form.  Please add any attachments if required to the email and press send.  The correct address has been added to the email.  If this does not work, please save the referral form and email in the usual way to Occupational.Health@essex.gov.uk", , "Thank you for completing the referral"
    Call SendWorkBook
    'Application.GetSaveAsFilename
End If

ws.Protect glbPw

Set ws = Nothing
Set wb = Nothing

Application.ScreenUpdating = False
Application.DisplayAlerts = False

'ErrorHandler:
'MsgBox "Please contact Tim Bartlett (tim.bartlett@essex.gov.uk) stating there is an issue - " & Err.Number & "(" & Err.Description & ")"
'Exit Sub


End Sub


Sub SendWorkBook()

'Update 20131209
Dim OutlookApp As Object
Dim OutlookMail As Object
Set OutlookApp = CreateObject("Outlook.Application")
Set OutlookMail = OutlookApp.CreateItem(0)
On Error Resume Next
With OutlookMail
    .To = "Occupational.Health@essex.gov.uk"
    .CC = ""
    .BCC = ""
    .Subject = "OH Referral"
    '.Body = ""
    .Attachments.Add Application.ActiveWorkbook.FullName
    .Display
End With
Set OutlookMail = Nothing
Set OutlookApp = Nothing



End Sub


Public Sub HideButtons(str_ButtonName As String, blHidden As Boolean)
Dim i As Integer



For i = 1 To ActiveSheet.OLEObjects.Count
        'Debug.Print ActiveSheet.OLEObjects(i).Name
        If ActiveSheet.OLEObjects(i).Name = str_ButtonName Then
        If blHidden = True Then
        ActiveSheet.OLEObjects(i).Visible = False
        Else
        ActiveSheet.OLEObjects(i).Visible = True
        End If
        End If
    Next i

End Sub

Public Function EmailMessage() As String

Dim int_i As Integer
EmailMessage = "<p class=style2><span LANG=EN><font FACE=Calibri SIZE=2>"
For int_i = 2 To ws_Settings.Range("rng_EmailMessage").Rows.Count + 2
If int_i = 2 Then
EmailMessage = EmailMessage & ws_Settings.Cells(int_i, 25).Value
Else
EmailMessage = EmailMessage & "<br ><br >" & ws_Settings.Cells(int_i, 25).Value
End If
Next int_i

'Debug.Print EmailMessage

End Function

Public Sub Hide_Page(str_PageToHide As String, str_PageToShow As String)
Application.ScreenUpdating = False
ThisWorkbook.Worksheets(str_PageToShow).Visible = xlSheetVisible
ThisWorkbook.Worksheets(str_PageToShow).Activate
ThisWorkbook.Worksheets(str_PageToHide).Visible = xlSheetHidden
Application.ScreenUpdating = True
End Sub


Sub showTabs()
Attribute showTabs.VB_Description = "Show Tabs"
Attribute showTabs.VB_ProcData.VB_Invoke_Func = "t\n14"
ActiveWindow.DisplayWorkbookTabs = True
End Sub

Sub hideTabls()
Attribute hideTabls.VB_Description = "Hide Tabs"
Attribute hideTabls.VB_ProcData.VB_Invoke_Func = "h\n14"
ActiveWindow.DisplayWorkbookTabs = False
End Sub



Attribute VB_Name = "Module3"
Option Explicit

Sub UploadToDb()
'On Error GoTo ErrorHandler
    
    Dim db As DAO.Database
    Dim rst_map As DAO.Recordset, rst_AddData As DAO.Recordset
    Dim str_PathNewDB As String, str_Range As String, str_Field As String
    Dim int_i As Integer
    Dim rng_quest As Range
    
'Obtain path for DB from setup sheet
    
    str_PathNewDB = ws_Settings.Range("rng_DB").Value
    
'Message if no DB path shown
    If str_PathNewDB = "False" Or str_PathNewDB = "" Then
        MsgBox ("Please Select a Database")
        Exit Sub
    End If
    
'Open DB and recordsets
    Set db = OpenDatabase(str_PathNewDB, False, False)
    Set rst_map = db.OpenRecordset("tbl_ReferralImport_Map")
    Set rst_AddData = db.OpenRecordset("tDat_Referral")
    
    
    rst_AddData.AddNew
    rst_map.MoveFirst
    
    
    
    
    While rst_map.EOF = False
        
        
        
        str_Range = rst_map.Fields(2).Value
        str_Field = rst_map.Fields(1).Value
        
'Debug.Print str_Range & "_" & str_Field
        
        
        Select Case rst_map.Fields(0).Value
            
        Case 1
            
'if rst_map.Fields(0).Value = 1 Then
            
            Select Case Range(str_Range).Value
                
            Case "Yes"
                rst_AddData.Fields(str_Field).Value = -1
            Case "No"
                rst_AddData.Fields(str_Field).Value = 0
            Case Else
                rst_AddData.Fields(str_Field).Value = Range(str_Range).Value
            End Select
            
        Case 2
            rst_AddData.Fields(str_Field).Value = ws_referral.OLEObjects(str_Range).Object.Text
        Case 3
            
            If ws_Settings.Cells(1, 1).Value <> "" Then
                rst_AddData.Fields(str_Field).Value = Range(str_Range).Value
            Else
            End If
            
        End Select
        
        rst_map.MoveNext
        
        
        
    Wend
    
'#####################
'Import Text Box Details
'#####################
'MAL_Additions.OLEObjects("txt_Comments").Object.Text
    
'If Mapping Type = 1, do above, if 2, do text box as Above
    
'#######################
'Import Selected Questions
    
    For Each rng_quest In ws_Settings.Range("rng_QuestionSelect")
        
        rst_AddData.Fields(rng_quest.Value).Value = rng_quest.Offset(0, 1).Value
        
'Debug.Print rng_quest.Value & "- " & rng_quest.Offset(0, 1).Value
        
        
        Next rng_quest
        
        If ws_referral.Range("rng_ExtraQuestion").Value = "" Then
            rst_AddData.Fields("Q8_Additional").Value = False
        Else
            
            rst_AddData.Fields("Question_Additional").Value = ws_referral.Range("rng_ExtraQuestion").Value
            rst_AddData.Fields("Q8_Additional").Value = True
        End If
'#########################
        
        
        rst_AddData.Fields("HR_Contact").Value = ws_referral.Range("F29").Value
        rst_AddData.Fields("HR_Email").Value = ws_referral.Range("F30").Value
        
        
        rst_AddData.Fields("Needs_Triage").Value = True
        
        rst_AddData.Fields("Date_Referral_Uploaded").Value = Now()
        
        rst_AddData.Update
        
        rst_map.Close
        rst_AddData.Close
        db.Close
        
        MsgBox "The referral data has been sucessfully uploaded into the Database.  This referral form can now be closed or saved to the client file if required."
        
        Set rst_map = Nothing
        Set rst_AddData = Nothing
        Set db = Nothing
        
''ErrorHandler:
'MsgBox "Please contact Tim Bartlett (tim.bartlett@essex.gov.uk) stating there is an issue - " & Err.Number & "(" & Err.Description & ")"
'Exit Sub
        
        
    End Sub



Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 2, 1, MSForms, CommandButton"
Option Explicit

Private Sub CommandButton1_Click()
Call Hide_Page("Display", "Referral Form")
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeClose(Cancel As Boolean)
 Application.DisplayFormulaBar = True
 'ActiveWindow.DisplayWorkbookTabs = True
End Sub

Private Sub Workbook_Open()
 Application.DisplayFormulaBar = False
End Sub
Attribute VB_Name = "md_Globals"
Option Explicit

Global Const glbPw As String = "OH"
Attribute VB_Name = "ws_Settings"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ws_referral"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CheckBox7, 61, 16, MSForms, CheckBox"
Attribute VB_Control = "CheckBox8, 58, 17, MSForms, CheckBox"
Attribute VB_Control = "CheckBox6, 56, 18, MSForms, CheckBox"
Attribute VB_Control = "CheckBox10, 54, 19, MSForms, CheckBox"
Attribute VB_Control = "CheckBox9, 53, 20, MSForms, CheckBox"
Attribute VB_Control = "CheckBox2, 52, 21, MSForms, CheckBox"
Attribute VB_Control = "CheckBox1, 51, 22, MSForms, CheckBox"
Attribute VB_Control = "CommandButton1, 33, 23, MSForms, CommandButton"
Attribute VB_Control = "CheckBox3, 28, 24, MSForms, CheckBox"
Attribute VB_Control = "txt_other, 23, 25, MSForms, TextBox"
Attribute VB_Control = "txt_counsel, 22, 26, MSForms, TextBox"
Attribute VB_Control = "txt_pip, 21, 27, MSForms, TextBox"
Attribute VB_Control = "txt_sip, 20, 28, MSForms, TextBox"
Attribute VB_Control = "txt_risk, 19, 29, MSForms, TextBox"
Attribute VB_Control = "txt_mfw, 18, 30, MSForms, TextBox"
Attribute VB_Control = "txt_Restricted, 17, 31, MSForms, TextBox"
Attribute VB_Control = "txt_Phased, 16, 32, MSForms, TextBox"
Attribute VB_Control = "txt_Altered, 15, 33, MSForms, TextBox"
Attribute VB_Control = "txt_redeploy, 14, 34, MSForms, TextBox"
Attribute VB_Control = "txt_Performance, 13, 35, MSForms, TextBox"
Attribute VB_Control = "txt_Condition, 11, 36, MSForms, TextBox"
Attribute VB_Control = "txt_Description, 62, 37, MSForms, TextBox"
Attribute VB_Control = "cmd_ForOH, 65, 38, MSForms, CommandButton"
Option Explicit


Private Sub CheckBox1_Click()
Call CheckQuest("CheckBox1")
End Sub


Private Sub CheckBox2_Click()
Call CheckQuest("CheckBox2")
End Sub

Private Sub CheckBox3_Click()
Call CheckQuest("CheckBox3")
End Sub

Private Sub CheckBox4_Click()
Call CheckQuest("CheckBox4")
End Sub

Private Sub CheckBox5_Click()
Call CheckQuest("CheckBox5")
End Sub

Private Sub CheckBox6_Click()
Call CheckQuest("CheckBox6")
End Sub

Private Sub CheckBox7_Click()
Call CheckQuest("CheckBox7")
End Sub

Private Sub CheckBox8_Click()
Call CheckQuest("CheckBox8")
End Sub

Private Sub CheckBox9_Click()
Call CheckQuest("CheckBox9")
End Sub

Private Sub CheckBox10_Click()
Call CheckQuest("CheckBox10")
End Sub

Private Sub CheckBox11_Click()
Call CheckQuest("CheckBox11")
End Sub

Private Sub cmd_ForOH_Click()
'input password

    Dim x As Variant
    x = InputBox("Type your password here.", "Password Required")

    If x <> glbPw Then
        MsgBox "You didn't enter a correct password."
    Else
    Call UploadToDb
    End If


End Sub

Private Sub CommandButton1_Click()
Call test_mandatory

End Sub

Private Sub txt_Altered_Change()
'Call checkLen("txt_Altered", "rng_alteredHours")
End Sub
Private Sub txt_Altered_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_Altered")
 End If
End Sub
Private Sub txt_Condition_Change()
Call checkLen("txt_Condition", "rng_txtCount_Condn")
End Sub
Private Sub txt_Condition_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_Condition")
 End If
End Sub
Private Sub txt_counsel_Change()
'Call checkLen("txt_counsel", "rng_Councell")
End Sub
Private Sub txt_counsel_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_counsel")
 End If
End Sub
Private Sub txt_Description_Change()
'Call checkLen("txt_Description", "rng_txtCount_Description")
End Sub
Private Sub txt_Description_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_Description")
 End If
End Sub

Private Sub txt_mfw_Change()
'Call checkLen("txt_mfw", "rng_MFW")
End Sub

Private Sub txt_mfw_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_mfw")
 End If
End Sub
Private Sub txt_other_Change()
'Call checkLen("txt_other", "rng_Other")
End Sub

Private Sub txt_other_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_other")
 End If
End Sub

Private Sub txt_Performance_Change()
'Call checkLen("txt_Performance", "rng_txtCount_Perform")
End Sub
Private Sub txt_Performance_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_Performance")
 End If
End Sub

Private Sub txt_Phased_Change()
'Call checkLen("txt_Phased", "rng_PhasedReturn")
End Sub
Private Sub txt_Phased_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_Phased")
 End If
End Sub
Private Sub txt_pip_Change()
'Call checkLen("txt_pip", "rng_pip")
End Sub

Private Sub txt_pip_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_pip")
 End If
End Sub

Private Sub txt_redeploy_Change()
'Call checkLen("txt_redeploy", "rng_deployment")
End Sub

Private Sub txt_redeploy_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_redeploy")
 End If
End Sub

Private Sub txt_Restricted_Change()
'Call checkLen("txt_Restricted", "rng_restricted")
End Sub

Private Sub txt_Restricted_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_Restricted")
 End If
End Sub

Private Sub txt_risk_Change()
'Call checkLen("txt_risk", "rng_risk")
End Sub
Private Sub txt_risk_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_risk")
 End If
End Sub
Private Sub txt_sip_Change()
'Call checkLen("txt_sip", "rng_sip")
End Sub

Private Sub txt_sip_GotFocus()
 If CInt(Application.Version) >= 15 Then
    Call fixmultiline("txt_sip")
 End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
Dim bl_format As Boolean
'MsgBox Target.Address

If Target.Address = Range("rng_ApptPref").Address Then

    If Target.Value = "Face to Face" Then
        bl_format = True
    Else
        bl_format = False
    End If
    
    Call Format_Select("rng_txtClinic", "rng_ClinicSelect", bl_format, "rng_ApptPref")
    
    Else
        If Target.Address = Range("rng_OffSick").Address Then
    
            If Target.Value = "Yes" Then
                bl_format = True
            Else
                bl_format = False
            End If
    
        Call Format_Select("rng_SickCommenceText", "rng_SickDate", bl_format, "rng_OffSick")
    
    End If
End If
End Sub


Public Function Format_Select(str_textRange As String, str_ContenctRange As String, bl_format As Boolean, str_FinishRange As String)

On Error GoTo errHandler

If bl_format = True Then

ActiveSheet.Unprotect glbPw
Application.ScreenUpdating = False

Range(str_textRange).Select

With Selection.Font
        .Color = 0
        .TintAndShade = 0
    End With
    
Range(str_ContenctRange).Select
Selection.Font.ThemeColor = xlThemeColorLight1
    Selection.Font.TintAndShade = 0


    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    

    
Else

Range(str_textRange).Select

With Selection.Font
       .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With


Range(str_ContenctRange).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    Selection.Font.ThemeColor = xlThemeColorDark1
    Selection.Font.TintAndShade = 0
    
    
    Range(str_ContenctRange).Value = ""
    
    Range(str_FinishRange).Select
    
End If



ActiveSheet.Unprotect glbPw
Application.ScreenUpdating = True

errHandler:
Resume Next


End Function



INQUEST-PP=macro
