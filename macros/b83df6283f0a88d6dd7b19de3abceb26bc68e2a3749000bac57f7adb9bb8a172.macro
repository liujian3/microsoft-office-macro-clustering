Attribute VB_Name = "AOfferHelpFormDA"
Attribute VB_Base = "0{709EBF67-431F-409A-A152-72D490E0D874}{43939312-7C36-4166-B10D-F9F2189DA436}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Attribute VB_Name = "AOfferHelpFormDE"
Attribute VB_Base = "0{0BDB5291-D02E-4205-A28C-F11FCE83B62E}{F28FFC43-7A2F-4C21-80F0-51A00114EB2A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "AOfferHelpFormGB"
Attribute VB_Base = "0{98BBCE14-A772-4D1F-8952-5D9E904A495D}{DCAD47CE-5018-4097-BCD7-4F0420F95063}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Attribute VB_Name = "AddTemplateForm"
Attribute VB_Base = "0{8C1FB1FD-1A0D-47D8-A98B-97983A5500B0}{084FD455-3F85-404D-B938-68B3CB208E53}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CloseButton_Click()
    Unload Me
End Sub

Private Sub DeleteDemoBtn_Click()
    Call DeleteAllDemoSheets    'Delete
    Call InitFormLabels         'Update button label
    Call FillAddDropDown        'Update Dropdown
End Sub

Private Sub UserForm_Initialize()
    'Runs on form open
    'MsgBox ("Hello from UserForm_Initialize")

    Call InitFormLabels
    Call InitVariables
    Call FillAddDropDown
    
    AddButton.BackColor = vbGreen
    CloseButton.BackColor = vbButtonFace

End Sub

Private Sub InitVariables()
    Dim i As Long
    'Reset (just in case)
    For i = 0 To cMAXSHEETS
        TemplateInfo(i).MasterSheetName = ""
        TemplateInfo(i).UserSheetName = ""
        TemplateInfo(i).DropdownName = ""
        TemplateInfo(i).Language = 0
        TemplateInfo(i).LimitTo = ""
        TemplateInfo(i).SheetType = 0
        TemplateInfo(i).LinkedInfoSheetName = ""
        TemplateInfo(i).LinkedRoadTaxSheet = ""
        TemplateInfo(i).LinkedZoneSheet = ""
        TemplateInfo(i).LinkedPreFreightSheet = ""
        TemplateInfo(i).LinkedPostFreightSheet = ""
        TemplateInfo(i).LinkedIntervalASheet = ""
        TemplateInfo(i).LinkedIntervalBSheet = ""
        TemplateInfo(i).LinkedIntervalCSheet = ""
        TemplateInfo(i).LinkedDemoSheet2 = ""
        TemplateInfo(i).LinkedDemoSheet3 = ""
        TemplateInfo(i).LinkedDemoSheet4 = ""
        TemplateInfo(i).LinkedDemoSheet5 = ""
        TemplateInfo(i).LinkedDemoSheet6 = ""
        TemplateInfo(i).LinkedDemoSheet7 = ""
    Next i

    i = 0
    
    '------------------------------------------------------------------------------------
    ' --- DA templates
    '------------------------------------------------------------------------------------
    
    'Parcel
    TemplateInfo(i).MasterSheetName = "_M_PARCEL_DA"
    TemplateInfo(i).UserSheetName = "Pakker"
    TemplateInfo(i).DropdownName = "Pakker"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = ParcelStandard
    TemplateInfo(i).LinkedInfoSheetName = "_M_INTRO_PARCEL_DA"
    TemplateInfo(i).LinkedRoadTaxSheet = ""
    TemplateInfo(i).LinkedZoneSheet = "_M_ZONEPARCEL_DA"
    TemplateInfo(i).LinkedIntervalASheet = "_M_INT_A_DA"
    TemplateInfo(i).LinkedIntervalBSheet = "_M_INT_B_DA"
    TemplateInfo(i).LinkedIntervalCSheet = "_M_INT_C_DA"
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_INTRO_PARCEL_DA"
    TemplateInfo(i).UserSheetName = "Vejledning til skabelon"
    TemplateInfo(i).DropdownName = "- Vejledning til skabelon"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = 0
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_ZONEPARCEL_DA"
    TemplateInfo(i).UserSheetName = "Zone Tabel Pakker"
    TemplateInfo(i).DropdownName = "- Zone Tabel Pakker"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = ZoneType_Min
    i = i + 1
    
    'Road
    TemplateInfo(i).MasterSheetName = "_M_ROAD_DA"
    TemplateInfo(i).UserSheetName = "Landevej"
    TemplateInfo(i).DropdownName = "Landevej"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = Road
    TemplateInfo(i).LinkedInfoSheetName = "_M_INTRO_ROAD_DA"
    TemplateInfo(i).LinkedRoadTaxSheet = "_M_ROADTAX_DA"
    TemplateInfo(i).LinkedZoneSheet = "_M_ZONEROAD_DA"
    TemplateInfo(i).LinkedIntervalASheet = "_M_INT_A_DA"
    TemplateInfo(i).LinkedIntervalBSheet = "_M_INT_B_DA"
    TemplateInfo(i).LinkedIntervalCSheet = "_M_INT_C_DA"
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_INTRO_ROAD_DA"
    TemplateInfo(i).UserSheetName = "Vejledning til skabelon"
    TemplateInfo(i).DropdownName = "- Vejledning til skabelon - Landevej"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = 0
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_ROADTAX_DA"
    TemplateInfo(i).UserSheetName = "Vejskat"
    TemplateInfo(i).DropdownName = "- Vejskat till|fffd|g"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = RoadTax
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_ZONEROAD_DA"
    TemplateInfo(i).UserSheetName = "Zone Tabel Vej"
    TemplateInfo(i).DropdownName = "- Zone Tabel Vej"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = ZoneType_Min
    i = i + 1
    
    'Palet
    TemplateInfo(i).MasterSheetName = "_M_PALET_DA"
    TemplateInfo(i).UserSheetName = "Landevej Paller"
    TemplateInfo(i).DropdownName = "Landevej (Paller)"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = Road
    TemplateInfo(i).LinkedInfoSheetName = "_M_INTRO_PALET_DA"
    TemplateInfo(i).LinkedRoadTaxSheet = "_M_PALETROADTAX_DA"
    TemplateInfo(i).LinkedIntervalASheet = "_M_INT_A_DA"
    TemplateInfo(i).LinkedIntervalBSheet = "_M_INT_B_DA"
    TemplateInfo(i).LinkedIntervalCSheet = "_M_INT_C_DA"

    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_INTRO_PALET_DA"
    TemplateInfo(i).UserSheetName = "Vejledning til skabelon"
    TemplateInfo(i).DropdownName = "- Vejledning til skabelon - Landevej / Paller"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = 0
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_PALETROADTAX_DA"
    TemplateInfo(i).UserSheetName = "Vejskat (Paller)"
    TemplateInfo(i).DropdownName = "- Vejskat till|fffd|g (Paller)"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = RoadTax
    i = i + 1
    
    If ProgramMode.SeaAllowed Then
    'See LCL
        TemplateInfo(i).MasterSheetName = "_M_SEA_LCL_MAIN_DA"
        TemplateInfo(i).UserSheetName = "S|fffd|-Hovedfragt LCL"
        TemplateInfo(i).DropdownName = "S|fffd|fragt LCL"
        TemplateInfo(i).Language = DA
        TemplateInfo(i).SheetType = SeaLCL
        TemplateInfo(i).LinkedPreFreightSheet = "_M_SEA_LCL_PRE_DA"
        TemplateInfo(i).LinkedPostFreightSheet = "_M_SEA_LCL_POST_DA"
        TemplateInfo(i).LinkedInfoSheetName = "_M_INTRO_SEA_LCL_DA"
        TemplateInfo(i).LinkedIntervalASheet = "_M_INT_A_DA"
        TemplateInfo(i).LinkedIntervalBSheet = "_M_INT_B_DA"
        TemplateInfo(i).LinkedIntervalCSheet = "_M_INT_C_DA"
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_INTRO_SEA_LCL_DA"
        TemplateInfo(i).UserSheetName = "Vejledning til skabelon"
        TemplateInfo(i).DropdownName = "- Vejledning til skabelon - S|fffd|fragt LCL"
        TemplateInfo(i).Language = DA
        TemplateInfo(i).SheetType = 0
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_SEA_LCL_PRE_DA"
        TemplateInfo(i).UserSheetName = "S|fffd|-Forfragt LCL"
        TemplateInfo(i).DropdownName = "- S|fffd|fragt LCL Forfragt"
        TemplateInfo(i).Language = DA
        TemplateInfo(i).SheetType = SeaLCLPreFreight
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_SEA_LCL_POST_DA"
        TemplateInfo(i).UserSheetName = "S|fffd|-Efterfragt LCL"
        TemplateInfo(i).DropdownName = "- S|fffd|fragt LCL Efterfragt"
        TemplateInfo(i).Language = DA
        TemplateInfo(i).SheetType = SeaLCLPostFreight
        i = i + 1
        
        'See FCL
        TemplateInfo(i).MasterSheetName = "_M_SEA_FCL_MAIN_DA"
        TemplateInfo(i).UserSheetName = "S|fffd|-Hovedfragt FCL"
        TemplateInfo(i).DropdownName = "S|fffd|fragt FCL"
        TemplateInfo(i).Language = DA
        TemplateInfo(i).SheetType = SeaFCL
        TemplateInfo(i).LinkedInfoSheetName = "_M_INTRO_SEA_FCL_DA"
        TemplateInfo(i).LinkedPreFreightSheet = "_M_SEA_FCL_PRE_DA"
        TemplateInfo(i).LinkedPostFreightSheet = "_M_SEA_FCL_POST_DA"
        TemplateInfo(i).LinkedIntervalASheet = "_M_INT_A_DA"
        TemplateInfo(i).LinkedIntervalBSheet = "_M_INT_B_DA"
        TemplateInfo(i).LinkedIntervalCSheet = "_M_INT_C_DA"
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_INTRO_SEA_FCL_DA"
        TemplateInfo(i).UserSheetName = "Vejledning til skabelon"
        TemplateInfo(i).DropdownName = "- Vejledning til skabelon - s|fffd|fragt FCL"
        TemplateInfo(i).Language = DA
        TemplateInfo(i).SheetType = 0
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_SEA_FCL_PRE_DA"
        TemplateInfo(i).UserSheetName = "S|fffd|-Forfragt FCL"
        TemplateInfo(i).DropdownName = "- S|fffd|fragt FCL Forfragt"
        TemplateInfo(i).Language = DA
        TemplateInfo(i).SheetType = SeaFCLPreFreight
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_SEA_FCL_POST_DA"
        TemplateInfo(i).UserSheetName = "S|fffd|-Efterfragt FCL"
        TemplateInfo(i).DropdownName = "- S|fffd|fragt FCL Efterfragt"
        TemplateInfo(i).Language = DA
        TemplateInfo(i).SheetType = SeaFCLPostFreight
        i = i + 1
    End If
    
    If ProgramMode.AirAllowed Then
        'Air
        TemplateInfo(i).MasterSheetName = "_M_AIR_MAIN_DA"
        TemplateInfo(i).UserSheetName = "Luft-Hovedfragt"
        TemplateInfo(i).DropdownName = "Luftfragt"
        TemplateInfo(i).Language = DA
        TemplateInfo(i).SheetType = Air
        TemplateInfo(i).LinkedInfoSheetName = "_M_INTRO_AIR_DA"
        TemplateInfo(i).LinkedPreFreightSheet = "_M_AIR_PRE_DA"
        TemplateInfo(i).LinkedPostFreightSheet = "_M_AIR_POST_DA"
        TemplateInfo(i).LinkedIntervalASheet = "_M_INT_A_DA"
        TemplateInfo(i).LinkedIntervalBSheet = "_M_INT_B_DA"
        TemplateInfo(i).LinkedIntervalCSheet = "_M_INT_C_DA"
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_INTRO_AIR_DA"
        TemplateInfo(i).UserSheetName = "Vejledning til skabelon"
        TemplateInfo(i).DropdownName = "- Vejledning til skabelon - luftfragt"
        TemplateInfo(i).Language = DA
        TemplateInfo(i).SheetType = 0
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_AIR_PRE_DA"
        TemplateInfo(i).UserSheetName = "Luft-Forfragt"
        TemplateInfo(i).DropdownName = "- Luftfragt Forfragt"
        TemplateInfo(i).Language = DA
        TemplateInfo(i).SheetType = AirPreFreight
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_AIR_POST_DA"
        TemplateInfo(i).UserSheetName = "Luft-Efterfragt"
        TemplateInfo(i).DropdownName = "- Luftfragt Efterfragt"
        TemplateInfo(i).Language = DA
        TemplateInfo(i).SheetType = AirPostFreight
        i = i + 1
    End If
    
    'Common (Interval sheets)
    TemplateInfo(i).MasterSheetName = "_M_INT_A_DA"
    TemplateInfo(i).UserSheetName = "Interval till|fffd|g A"
    TemplateInfo(i).DropdownName = "Interval till|fffd|g A"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = IntervalA
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_INT_B_DA"
    TemplateInfo(i).UserSheetName = "Interval till|fffd|g B"
    TemplateInfo(i).DropdownName = "Interval till|fffd|g B"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = IntervalB
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_INT_C_DA"
    TemplateInfo(i).UserSheetName = "Interval till|fffd|g C"
    TemplateInfo(i).DropdownName = "Interval till|fffd|g C"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = IntervalC
    i = i + 1
    
    '------------------------------------------------------------------------------------
    '--- DA DEMO templates
    '------------------------------------------------------------------------------------
    
    'Road Demo (Fr8Check)
    TemplateInfo(i).MasterSheetName = "_M_ROAD_C_DEMO_INV_DA"   'The demo Invoice sheet
    TemplateInfo(i).UserSheetName = "Sendingsstatistik april"
    TemplateInfo(i).DropdownName = "Demo - Landevej Regningskontrol"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = DEMO
    'TemplateInfo(i).LimitTo = Fr8CheckName
    TemplateInfo(i).LinkedDemoSheet2 = "_M_ROAD_C_DEMO_OFFER_DA"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_ROAD_C_DEMO_OFFER_DA"   'The demo Offer sheet
    TemplateInfo(i).UserSheetName = "Tilbud fra husspedit|fffd|ren"
    i = i + 1

    'Road Demo (Fr8Benchmark)
    TemplateInfo(i).MasterSheetName = "_M_Road_B_DEMO_INV_DA"       'The demo Invoice sheet
    TemplateInfo(i).UserSheetName = "Sendingsstatistik"
    TemplateInfo(i).DropdownName = "Demo - Landevej Benchmark"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = DEMO
    TemplateInfo(i).LimitTo = Fr8BenchmarkName
    TemplateInfo(i).LinkedDemoSheet2 = "_M_Road_B_DEMO_OFFER1_DA"
    TemplateInfo(i).LinkedDemoSheet3 = "_M_Road_B_DEMO_OFFER2_DA"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_Road_B_DEMO_OFFER1_DA"    'The demo Offer 1 sheet
    TemplateInfo(i).UserSheetName = "Husspedit|fffd|ren"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_Road_B_DEMO_OFFER2_DA"    'The demo Offer 2 sheet
    TemplateInfo(i).UserSheetName = "Reference tilbud"
    i = i + 1
    
    'Air Demo (Fr8Benchmark)
    TemplateInfo(i).MasterSheetName = "_M_AIR_B_DEMO_INV_DA"       'The demo Invoice sheet
    TemplateInfo(i).UserSheetName = "Sendingsstatistik Luftfragt"
    TemplateInfo(i).DropdownName = "Demo - Luftfragt Benchmark"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = DEMO
    TemplateInfo(i).LimitTo = Fr8BenchmarkName
    TemplateInfo(i).LinkedDemoSheet2 = "_M_AIR_B_DEMO_OFFER1_DA"
    TemplateInfo(i).LinkedDemoSheet3 = "_M_AIR_B_DEMO_OFFER2_DA"
    TemplateInfo(i).LinkedDemoSheet4 = "_M_AIR_B_DEMO_OFFER3_DA"
    TemplateInfo(i).LinkedDemoSheet5 = "_M_AIR_B_DEMO_OFFER4_DA"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_AIR_B_DEMO_OFFER1_DA"    'The demo Offer 1 sheet
    TemplateInfo(i).UserSheetName = "Luft-Forfragt Spedition A"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_AIR_B_DEMO_OFFER2_DA"    'The demo Offer 2 sheet
    TemplateInfo(i).UserSheetName = "Luft-Hovedfragt Spedtion A"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_AIR_B_DEMO_OFFER3_DA"    'The demo Offer 3 sheet
    TemplateInfo(i).UserSheetName = "Luft-Forfragt Spedition B"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_AIR_B_DEMO_OFFER4_DA"    'The demo Offer 4 sheet
    TemplateInfo(i).UserSheetName = "Luft-Hovedfragt Spedtion B"
    i = i + 1

    'Sea LCL Demo (Fr8Benchmark)
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_INV_DA"       'The demo Invoice sheet
    TemplateInfo(i).UserSheetName = "Sendingsstatistik S|fffd| LCL"
    TemplateInfo(i).DropdownName = "Demo - S|fffd|fragt LCL Benchmark"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = DEMO
    TemplateInfo(i).LimitTo = Fr8BenchmarkName
    TemplateInfo(i).LinkedDemoSheet2 = "_M_LCL_B_DEMO_OFFER1_DA"
    TemplateInfo(i).LinkedDemoSheet3 = "_M_LCL_B_DEMO_OFFER2_DA"
    TemplateInfo(i).LinkedDemoSheet4 = "_M_LCL_B_DEMO_OFFER3_DA"
    TemplateInfo(i).LinkedDemoSheet5 = "_M_LCL_B_DEMO_OFFER4_DA"
    TemplateInfo(i).LinkedDemoSheet6 = "_M_LCL_B_DEMO_OFFER5_DA"
    TemplateInfo(i).LinkedDemoSheet7 = "_M_LCL_B_DEMO_OFFER6_DA"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_OFFER1_DA"    'The demo Offer 1 sheet
    TemplateInfo(i).UserSheetName = "S|fffd|-Forfragt LCL - A"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_OFFER2_DA"    'The demo Offer 2 sheet
    TemplateInfo(i).UserSheetName = "S|fffd|-Hovedfragt LCL - A"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_OFFER3_DA"    'The demo Offer 3 sheet
    TemplateInfo(i).UserSheetName = "S|fffd|-Efterfragt LCL - A"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_OFFER4_DA"    'The demo Offer 4 sheet
    TemplateInfo(i).UserSheetName = "S|fffd|-Forfragt LCL - B"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_OFFER5_DA"    'The demo Offer 5 sheet
    TemplateInfo(i).UserSheetName = "S|fffd|-Hovedfragt LCL - B"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_OFFER6_DA"    'The demo Offer 6 sheet
    TemplateInfo(i).UserSheetName = "S|fffd|-Efterfragt LCL - B"
    i = i + 1

    'Sea FCL Demo (Fr8Benchmark)
    TemplateInfo(i).MasterSheetName = "_M_FCL_B_DEMO_INV_DA"       'The demo Invoice sheet
    TemplateInfo(i).UserSheetName = "Sendingsstatistik S|fffd| FCL"
    TemplateInfo(i).DropdownName = "Demo - S|fffd|fragt FCL Benchmark"
    TemplateInfo(i).Language = DA
    TemplateInfo(i).SheetType = DEMO
    TemplateInfo(i).LimitTo = Fr8BenchmarkName
    TemplateInfo(i).LinkedDemoSheet2 = "_M_FCL_B_DEMO_OFFER1_DA"
    TemplateInfo(i).LinkedDemoSheet3 = "_M_FCL_B_DEMO_OFFER2_DA"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_FCL_B_DEMO_OFFER1_DA"    'The demo Offer 1 sheet
    TemplateInfo(i).UserSheetName = "S|fffd|-Hovedfragt FCL Spedition A"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_FCL_B_DEMO_OFFER2_DA"    'The demo Offer 2 sheet
    TemplateInfo(i).UserSheetName = "S|fffd|-Hovedfragt FCL Spedition B"
    i = i + 1

    '------------------------------------------------------------------------------------
    '--- DE templates
    '------------------------------------------------------------------------------------
    
    'Parcel
    TemplateInfo(i).MasterSheetName = "_M_PARCEL_DE"
    TemplateInfo(i).UserSheetName = "Pakete"
    TemplateInfo(i).DropdownName = "Pakete"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = ParcelStandard
    TemplateInfo(i).LinkedInfoSheetName = "_M_INTRO_PARCEL_DE"
    TemplateInfo(i).LinkedZoneSheet = "_M_ZONEPARCEL_DE"
    TemplateInfo(i).LinkedIntervalASheet = "_M_INT_A_DE"
    TemplateInfo(i).LinkedIntervalBSheet = "_M_INT_B_DE"
    TemplateInfo(i).LinkedIntervalCSheet = "_M_INT_C_DE"
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_INTRO_PARCEL_DE"
    TemplateInfo(i).UserSheetName = "Anleitung f|fffd|r die Schablone"
    TemplateInfo(i).DropdownName = "- Anleitung f|fffd|r die Schablone - Pakete"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = 0
    i = i + 1
    
    'Road
    TemplateInfo(i).MasterSheetName = "_M_ROAD_DE"
    TemplateInfo(i).UserSheetName = "Landverkehr"
    TemplateInfo(i).DropdownName = "Landverkehr"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = Road
    TemplateInfo(i).LinkedInfoSheetName = "_M_INTRO_ROAD_DE"
    TemplateInfo(i).LinkedZoneSheet = "_M_ZONEROAD_DE"
    TemplateInfo(i).LinkedRoadTaxSheet = "_M_ROADTAX_DE"
    TemplateInfo(i).LinkedIntervalASheet = "_M_INT_A_DE"
    TemplateInfo(i).LinkedIntervalBSheet = "_M_INT_B_DE"
    TemplateInfo(i).LinkedIntervalCSheet = "_M_INT_C_DE"
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_INTRO_ROAD_DE"
    TemplateInfo(i).UserSheetName = "Anleitung f|fffd|r die Schablone"
    TemplateInfo(i).DropdownName = "- Anleitung f|fffd|r die Schablone - Landverkehr"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = 0
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_ROADTAX_DE"
    TemplateInfo(i).UserSheetName = "Maut Zuschlag"
    TemplateInfo(i).DropdownName = "- Maut Zuschlag"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = RoadTax
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_ZONEROAD_DE"
    TemplateInfo(i).UserSheetName = "Zonen Tabelle Landverkehr"
    TemplateInfo(i).DropdownName = "- Zonen Tabelle Landverkehr"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = ZoneType_Min
    i = i + 1
    
    'Palets
    TemplateInfo(i).MasterSheetName = "_M_PALET_DE"
    TemplateInfo(i).UserSheetName = "Landverkehr - Paletten"
    TemplateInfo(i).DropdownName = "Landverkehr - Paletten"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = Road
    TemplateInfo(i).LinkedInfoSheetName = "_M_INTRO_PALET_DE"
    TemplateInfo(i).LinkedRoadTaxSheet = "_M_PALETROADTAX_DE"
    TemplateInfo(i).LinkedZoneSheet = "_M_ZONE_DE"
    TemplateInfo(i).LinkedIntervalASheet = "_M_INT_A_DE"
    TemplateInfo(i).LinkedIntervalBSheet = "_M_INT_B_DE"
    TemplateInfo(i).LinkedIntervalCSheet = "_M_INT_C_DE"
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_ZONEPARCEL_DE"
    TemplateInfo(i).UserSheetName = "Zonen Tabelle Pakette"
    TemplateInfo(i).DropdownName = "- Zonen Tabelle Pakette"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = ZoneType_Min
    i = i + 1

    TemplateInfo(i).MasterSheetName = "_M_INTRO_PALET_DE"
    TemplateInfo(i).UserSheetName = "Anleitung f|fffd|r die Schablone"
    TemplateInfo(i).DropdownName = "- Anleitung f|fffd|r die Schablone - Landverkehr Paletten"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = 0
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_PALETROADTAX_DE"
    TemplateInfo(i).UserSheetName = "Maut Zuschlag (Paletten)"
    TemplateInfo(i).DropdownName = "- Maut Zuschlag (Paletten)"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = RoadTax
    i = i + 1
    
    If ProgramMode.SeaAllowed Then
    
        'Sea LCL
        TemplateInfo(i).MasterSheetName = "_M_SEA_LCL_MAIN_DE"
        TemplateInfo(i).UserSheetName = "See Hauptlauf LCL"
        TemplateInfo(i).DropdownName = "Seefracht LCL"
        TemplateInfo(i).Language = DE
        TemplateInfo(i).SheetType = SeaLCL
        TemplateInfo(i).LinkedInfoSheetName = "_M_INTRO_SEA_LCL_DE"
        TemplateInfo(i).LinkedPreFreightSheet = "_M_SEA_LCL_PRE_DE"
        TemplateInfo(i).LinkedPostFreightSheet = "_M_SEA_LCL_POST_DE"
        TemplateInfo(i).LinkedIntervalASheet = "_M_INT_A_DE"
        TemplateInfo(i).LinkedIntervalBSheet = "_M_INT_B_DE"
        TemplateInfo(i).LinkedIntervalCSheet = "_M_INT_C_DE"
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_INTRO_SEA_LCL_DE"
        TemplateInfo(i).UserSheetName = "Anleitung f|fffd|r die Schablone"
        TemplateInfo(i).DropdownName = "- Anleitung f|fffd|r die Schablone - Seefracht LCL"
        TemplateInfo(i).Language = DE
        TemplateInfo(i).SheetType = 0
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_SEA_LCL_PRE_DE"
        TemplateInfo(i).UserSheetName = "See-Vorlauf LCL"
        TemplateInfo(i).DropdownName = "- Seefracht Vorlauf LCL"
        TemplateInfo(i).Language = DE
        TemplateInfo(i).SheetType = SeaLCLPreFreight
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_SEA_LCL_POST_DE"
        TemplateInfo(i).UserSheetName = "See-Nachlauf LCL"
        TemplateInfo(i).DropdownName = "- Seefracht Nachlauf LCL"
        TemplateInfo(i).Language = DE
        TemplateInfo(i).SheetType = SeaLCLPostFreight
        i = i + 1
        
        'Sea FCL
        TemplateInfo(i).MasterSheetName = "_M_SEA_FCL_MAIN_DE"
        TemplateInfo(i).UserSheetName = "See Hauptlauf FCL"
        TemplateInfo(i).DropdownName = "Seefracht FCL"
        TemplateInfo(i).Language = DE
        TemplateInfo(i).SheetType = SeaFCL
        TemplateInfo(i).LinkedInfoSheetName = "_M_INTRO_SEA_FCL_DE"
        TemplateInfo(i).LinkedPreFreightSheet = "_M_SEA_FCL_PRE_DE"
        TemplateInfo(i).LinkedPostFreightSheet = "_M_SEA_FCL_POST_DE"
        TemplateInfo(i).LinkedIntervalASheet = "_M_INT_A_DE"
        TemplateInfo(i).LinkedIntervalBSheet = "_M_INT_B_DE"
        TemplateInfo(i).LinkedIntervalCSheet = "_M_INT_C_DE"
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_INTRO_SEA_FCL_DE"
        TemplateInfo(i).UserSheetName = "Anleitung f|fffd|r die Schablone"
        TemplateInfo(i).DropdownName = "- Anleitung f|fffd|r die Schablone - SeeFracht FCL"
        TemplateInfo(i).Language = DE
        TemplateInfo(i).SheetType = 0
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_SEA_FCL_PRE_DE"
        TemplateInfo(i).UserSheetName = "See-Vorlauf FCL"
        TemplateInfo(i).DropdownName = "- Seefracht Vorlauf FCL"
        TemplateInfo(i).Language = DE
        TemplateInfo(i).SheetType = SeaFCLPreFreight
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_SEA_FCL_POST_DE"
        TemplateInfo(i).UserSheetName = "See-Nachlauf FCL"
        TemplateInfo(i).DropdownName = "- Seefracht Nachlauf FCL"
        TemplateInfo(i).Language = DE
        TemplateInfo(i).SheetType = SeaFCLPostFreight
        i = i + 1
    End If
    
    If ProgramMode.AirAllowed Then
    
        'Air
        TemplateInfo(i).MasterSheetName = "_M_AIR_MAIN_DE"
        TemplateInfo(i).UserSheetName = "Luft Hauptlauf"
        TemplateInfo(i).DropdownName = "Luftfracht"
        TemplateInfo(i).Language = DE
        TemplateInfo(i).SheetType = Air
        TemplateInfo(i).LinkedInfoSheetName = "_M_INTRO_AIR_DE"
        TemplateInfo(i).LinkedPreFreightSheet = "_M_AIR_PRE_DE"
        TemplateInfo(i).LinkedPostFreightSheet = "_M_AIR_POST_DE"
        TemplateInfo(i).LinkedIntervalASheet = "_M_INT_A_DE"
        TemplateInfo(i).LinkedIntervalBSheet = "_M_INT_B_DE"
        TemplateInfo(i).LinkedIntervalCSheet = "_M_INT_C_DE"
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_INTRO_AIR_DE"
        TemplateInfo(i).UserSheetName = "Anleitung f|fffd|r die Schablone"
        TemplateInfo(i).DropdownName = "- Anleitung f|fffd|r die Schablone Luft"
        TemplateInfo(i).Language = DE
        TemplateInfo(i).SheetType = 0
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_AIR_PRE_DE"
        TemplateInfo(i).UserSheetName = "Luft-Vorlauf"
        TemplateInfo(i).DropdownName = "- Luftfracht Vorlauf"
        TemplateInfo(i).Language = DE
        TemplateInfo(i).SheetType = AirPreFreight
        i = i + 1
        TemplateInfo(i).MasterSheetName = "_M_AIR_POST_DE"
        TemplateInfo(i).UserSheetName = "Luft-Nachlauf"
        TemplateInfo(i).DropdownName = "- Luftfracht Nachlauf"
        TemplateInfo(i).Language = DE
        TemplateInfo(i).SheetType = AirPostFreight
        i = i + 1
    End If
    
    'Common (Interval sheets)
    TemplateInfo(i).MasterSheetName = "_M_INT_A_DE"
    TemplateInfo(i).UserSheetName = "Intervall Zuschlag A"
    TemplateInfo(i).DropdownName = "Intervall Zuschlag A"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = IntervalA
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_INT_B_DE"
    TemplateInfo(i).UserSheetName = "Intervall Zuschlag B"
    TemplateInfo(i).DropdownName = "Intervall Zuschlag B"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = IntervalB
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_INT_C_DE"
    TemplateInfo(i).UserSheetName = "Intervall Zuschlag C"
    TemplateInfo(i).DropdownName = "Intervall Zuschlag C"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = IntervalC
    i = i + 1

    '------------------------------------------------------------------------------------
    '--- DE DEMO templates
    '------------------------------------------------------------------------------------

    'Road Demo (Fr8Check)
    TemplateInfo(i).MasterSheetName = "_M_ROAD_C_DEMO_INV_DE"   'The demo Invoice sheet
    TemplateInfo(i).UserSheetName = "Statistik f|fffd|r Landverkehr"
    TemplateInfo(i).DropdownName = "Demo - Landverkehr Rechnungskontrolle"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = DEMO
    TemplateInfo(i).LimitTo = Fr8CheckName
    TemplateInfo(i).LinkedDemoSheet2 = "_M_ROAD_C_DEMO_OFFER_DE"
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_ROAD_C_DEMO_OFFER_DE"   'The demo Offer sheet
    TemplateInfo(i).UserSheetName = "Hausspediteur"
    i = i + 1

    'Road Demo (Fr8Benchmark)
    TemplateInfo(i).MasterSheetName = "_M_Road_B_DEMO_INV_DE"       'The demo Invoice sheet
    TemplateInfo(i).UserSheetName = "Statistik f|fffd|r Landverkehr"
    TemplateInfo(i).DropdownName = "Demo - Landverkehr Benchmark"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = DEMO
    TemplateInfo(i).LimitTo = Fr8BenchmarkName
    TemplateInfo(i).LinkedDemoSheet2 = "_M_Road_B_DEMO_OFFER1_DE"
    TemplateInfo(i).LinkedDemoSheet3 = "_M_Road_B_DEMO_OFFER2_DE"
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_Road_B_DEMO_OFFER1_DE"    'The demo Offer 1 sheet
    TemplateInfo(i).UserSheetName = "Hausspediteur Neu (Benchmark)"
    i = i + 1
    
    TemplateInfo(i).MasterSheetName = "_M_Road_B_DEMO_OFFER2_DE"    'The demo Offer 2 sheet
    TemplateInfo(i).UserSheetName = "Referenz Angebot (Benchmark)"
    i = i + 1
    
    'Air Demo (Fr8Benchmark)
    TemplateInfo(i).MasterSheetName = "_M_AIR_B_DEMO_INV_DE"       'The demo Invoice sheet
    TemplateInfo(i).UserSheetName = "Versand Statistik Luftfracht"
    TemplateInfo(i).DropdownName = "Demo - Luftfracht Benchmark"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = DEMO
    TemplateInfo(i).LimitTo = Fr8BenchmarkName
    TemplateInfo(i).LinkedDemoSheet2 = "_M_AIR_B_DEMO_OFFER1_DE"
    TemplateInfo(i).LinkedDemoSheet3 = "_M_AIR_B_DEMO_OFFER2_DE"
    TemplateInfo(i).LinkedDemoSheet4 = "_M_AIR_B_DEMO_OFFER3_DE"
    TemplateInfo(i).LinkedDemoSheet5 = "_M_AIR_B_DEMO_OFFER4_DE"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_AIR_B_DEMO_OFFER1_DE"    'The demo Offer 1 sheet
    TemplateInfo(i).UserSheetName = "Luft-Vorlauf Spedition A"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_AIR_B_DEMO_OFFER2_DE"    'The demo Offer 2 sheet
    TemplateInfo(i).UserSheetName = "Luft Hauptlauf Spedition A"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_AIR_B_DEMO_OFFER3_DE"    'The demo Offer 3 sheet
    TemplateInfo(i).UserSheetName = "Luft-Vorlauf Spedition B"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_AIR_B_DEMO_OFFER4_DE"    'The demo Offer 4 sheet
    TemplateInfo(i).UserSheetName = "Luft Hauptlauf Spedition B"
    i = i + 1

    'Sea LCL Demo (Fr8Benchmark)
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_INV_DE"       'The demo Invoice sheet
    TemplateInfo(i).UserSheetName = "Versand Statistik See LCL"
    TemplateInfo(i).DropdownName = "Demo - Seefracht LCL Benchmark"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = DEMO
    TemplateInfo(i).LimitTo = Fr8BenchmarkName
    TemplateInfo(i).LinkedDemoSheet2 = "_M_LCL_B_DEMO_OFFER1_DE"
    TemplateInfo(i).LinkedDemoSheet3 = "_M_LCL_B_DEMO_OFFER2_DE"
    TemplateInfo(i).LinkedDemoSheet4 = "_M_LCL_B_DEMO_OFFER3_DE"
    TemplateInfo(i).LinkedDemoSheet5 = "_M_LCL_B_DEMO_OFFER4_DE"
    TemplateInfo(i).LinkedDemoSheet6 = "_M_LCL_B_DEMO_OFFER5_DE"
    TemplateInfo(i).LinkedDemoSheet7 = "_M_LCL_B_DEMO_OFFER6_DE"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_OFFER1_DE"    'The demo Offer 1 sheet
    TemplateInfo(i).UserSheetName = "See-Vorlauf LCL - A"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_OFFER2_DE"    'The demo Offer 2 sheet
    TemplateInfo(i).UserSheetName = "See Hauptlauf LCL - A"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_OFFER3_DE"    'The demo Offer 3 sheet
    TemplateInfo(i).UserSheetName = "See-Nachlauf LCL - A"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_OFFER4_DE"    'The demo Offer 4 sheet
    TemplateInfo(i).UserSheetName = "See-Vorlauf LCL - B"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_OFFER5_DE"    'The demo Offer 5 sheet
    TemplateInfo(i).UserSheetName = "See Hauptlauf LCL - B"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_LCL_B_DEMO_OFFER6_DE"    'The demo Offer 6 sheet
    TemplateInfo(i).UserSheetName = "See-Nachlauf LCL - B"
    i = i + 1
    
    'Sea FCL Demo (Fr8Benchmark)
    TemplateInfo(i).MasterSheetName = "_M_FCL_B_DEMO_INV_DE"       'The demo Invoice sheet
    TemplateInfo(i).UserSheetName = "Versand Statistik See FCL"
    TemplateInfo(i).DropdownName = "Demo - Seefracht FCL Benchmark"
    TemplateInfo(i).Language = DE
    TemplateInfo(i).SheetType = DEMO
    TemplateInfo(i).LimitTo = Fr8BenchmarkName
    TemplateInfo(i).LinkedDemoSheet2 = "_M_FCL_B_DEMO_OFFER1_DE"
    TemplateInfo(i).LinkedDemoSheet3 = "_M_FCL_B_DEMO_OFFER2_DE"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_FCL_B_DEMO_OFFER1_DE"    'The demo Offer 1 sheet
    TemplateInfo(i).UserSheetName = "See Hauptlauf FCL Spedtion A"
    i = i + 1
    TemplateInfo(i).MasterSheetName = "_M_FCL_B_DEMO_OFFER2_DE"    'The demo Offer 2 sheet
    TemplateInfo(i).UserSheetName = "See Hauptlauf FCL Spedtion B"
    i = i + 1
    
    NumberOfTemplates = i

End Sub

Private Sub AddButton_Click()
    'Add the sheet given in the dropdown
    Dim i As Long
    Dim MasterIndex As Long
    Dim InfoIndex As Long
    Dim MainSheetName As String
    Dim TempSheetName As String
    Dim Post As Long
    Dim cPost As String
    Dim ThisWb As Workbook
    Dim FoundFreeName As Boolean
    Dim InfoSheetName As String
    Dim RoadtaxSheetName As String
    Dim PreSheetName As String
    Dim PostSheetName As String
    Dim Zone_Sheetname As String
    Dim Int_A_SheetName As String
    Dim Int_B_SheetName As String
    Dim Int_C_SheetName As String
    Dim Demo2_SheetName As String
    Dim Demo3_SheetName As String
    Dim Demo4_SheetName As String
    Dim Demo5_SheetName As String
    Dim Demo6_SheetName As String
    Dim Demo7_SheetName As String
    Dim CopyCount As Long
    Dim Info As String

    'Find the dropdown index of the wanted Template
    For i = 0 To NumberOfTemplates
        If TemplateDropDown.Text = TemplateInfo(i).DropdownName Then
            MasterIndex = i
        End If
    Next i
    
    
    'Find the name of the connected InfoSheet
    InfoSheetName = TemplateInfo(MasterIndex).LinkedInfoSheetName
    If InfoSheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If InfoSheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            InfoSheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            InfoSheetName = ""
        End If
    End If
    
    'Find the name of the connected Pre freight sheet
    PreSheetName = TemplateInfo(MasterIndex).LinkedPreFreightSheet
    If PreSheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If PreSheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            PreSheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            PreSheetName = ""
        End If
    End If
    
    'Copy Main sheet
    'Only copy if it do not exist already
    If Not sheetExists(TemplateInfo(MasterIndex).UserSheetName) Then
        MainSheetName = CopySheet(TemplateInfo(MasterIndex).MasterSheetName, TemplateInfo(MasterIndex).UserSheetName)
        CopyCount = CopyCount + 1
    Else
        MainSheetName = ""
    End If

    'Find the name of the connected Post freight sheet
    PostSheetName = TemplateInfo(MasterIndex).LinkedPostFreightSheet
    If PostSheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If PostSheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            PostSheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            PostSheetName = ""
        End If
    End If
    
    
    'Find the name of the connected Road Tax sheet
    RoadtaxSheetName = TemplateInfo(MasterIndex).LinkedRoadTaxSheet
    If RoadtaxSheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If RoadtaxSheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            RoadtaxSheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            RoadtaxSheetName = ""
        End If
    End If


    'Find the name of the connected Zone sheet
    Zone_Sheetname = TemplateInfo(MasterIndex).LinkedZoneSheet
    If Zone_Sheetname <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If Zone_Sheetname = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            Zone_Sheetname = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            Zone_Sheetname = ""
        End If
    End If


    'Find the name of the connected Interval A sheet
    Int_A_SheetName = TemplateInfo(MasterIndex).LinkedIntervalASheet
    If Int_A_SheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If Int_A_SheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            Int_A_SheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            Int_A_SheetName = ""
        End If
    End If

    'Find the name of the connected Interval B sheet
    Int_B_SheetName = TemplateInfo(MasterIndex).LinkedIntervalBSheet
    If Int_B_SheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If Int_B_SheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            Int_B_SheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            Int_B_SheetName = ""
        End If
    End If

    'Find the name of the connected Interval C sheet
    Int_C_SheetName = TemplateInfo(MasterIndex).LinkedIntervalCSheet
    If Int_C_SheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If Int_C_SheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            Int_C_SheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            Int_C_SheetName = ""
        End If
    End If

    'Find the name of the connected Demo2 sheet
    Demo2_SheetName = TemplateInfo(MasterIndex).LinkedDemoSheet2
    If Demo2_SheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If Demo2_SheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            Demo2_SheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            Demo2_SheetName = ""
        End If
    End If

    'Find the name of the connected Demo3 sheet
    Demo3_SheetName = TemplateInfo(MasterIndex).LinkedDemoSheet3
    If Demo3_SheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If Demo3_SheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            Demo3_SheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            Demo3_SheetName = ""
        End If
    End If

    'Find the name of the connected Demo4 sheet
    Demo4_SheetName = TemplateInfo(MasterIndex).LinkedDemoSheet4
    If Demo4_SheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If Demo4_SheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            Demo4_SheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            Demo4_SheetName = ""
        End If
    End If

    'Find the name of the connected Demo5 sheet
    Demo5_SheetName = TemplateInfo(MasterIndex).LinkedDemoSheet5
    If Demo5_SheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If Demo5_SheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            Demo5_SheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            Demo5_SheetName = ""
        End If
    End If

    'Find the name of the connected Demo6 sheet
    Demo6_SheetName = TemplateInfo(MasterIndex).LinkedDemoSheet6
    If Demo6_SheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If Demo6_SheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            Demo6_SheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            Demo6_SheetName = ""
        End If
    End If

    'Find the name of the connected Demo4 sheet
    Demo7_SheetName = TemplateInfo(MasterIndex).LinkedDemoSheet7
    If Demo7_SheetName <> "" Then
        'Find the index of the Info sheet
        For i = 0 To NumberOfTemplates
            If Demo7_SheetName = TemplateInfo(i).MasterSheetName Then
                InfoIndex = i
            End If
        Next i
        'Only copy if it do not exist already
        If Not sheetExists(TemplateInfo(InfoIndex).UserSheetName) Then
            Demo7_SheetName = CopySheet(TemplateInfo(InfoIndex).MasterSheetName, TemplateInfo(InfoIndex).UserSheetName)
            CopyCount = CopyCount + 1
        Else
            Demo7_SheetName = ""
        End If
    End If


    If MainSheetName <> "" Then
        Worksheets(MainSheetName).Activate  'Set the added main sheet as the acitve one
    End If
    Info = ""
    'Setup info to user
    If MainSheetName <> "" Then
        Info = printf(Txt("Add.StatusLabel_Added"), MainSheetName) & vbNewLine
    End If
    If InfoSheetName <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), InfoSheetName) & vbNewLine
    End If
    If RoadtaxSheetName <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), RoadtaxSheetName) & vbNewLine
    End If
    If PreSheetName <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), PreSheetName) & vbNewLine
    End If
    If PostSheetName <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), PostSheetName) & vbNewLine
    End If
    If Zone_Sheetname <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), Zone_Sheetname) & vbNewLine
    End If
    If Int_A_SheetName <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), Int_A_SheetName) & vbNewLine
    End If
    If Int_B_SheetName <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), Int_B_SheetName) & vbNewLine
    End If
    If Int_C_SheetName <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), Int_C_SheetName) & vbNewLine
    End If
    If Demo2_SheetName <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), Demo2_SheetName) & vbNewLine
    End If
    If Demo3_SheetName <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), Demo3_SheetName) & vbNewLine
    End If
    If Demo4_SheetName <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), Demo4_SheetName) & vbNewLine
    End If
    If Demo5_SheetName <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), Demo5_SheetName) & vbNewLine
    End If
    If Demo6_SheetName <> "" Then
        Info = Info & printf(Txt("Add.StatusLabel_Added"), Demo6_SheetName) & vbNewLine
    End If
    StatusLabel.Caption = Info
    AddButton.BackColor = vbButtonFace
    CloseButton.BackColor = vbGreen

End Sub


Private Sub InitFormLabels()
    
    Dim count As Long
    'Get programMode (just in case)
    Call SetProgramMode

    'Labels
    Me.Caption = Txt("Add.Form_Name")
    HeaderLabel.Caption = Txt("Add.HeaderLabel")
    InfoLabel.Caption = Txt("Add.InfoLabel")
    SelectTemplateLabel.Caption = Txt("Add.SelectLabel")
    StatusLabel.Caption = Txt("Add.StatusLabel_Initial")

    'Buttons
    AddButton.Caption = Txt("Add.ButtonAdd")
    CloseButton.Caption = Txt("Add.ButtonClose")
    DeleteDemoBtn.Caption = Txt("Add.DeleteDemoSheets")
    
    count = CountDemoSheets()
    If count > 0 Then
        DeleteDemoBtn.Enabled = True
    DeleteDemoBtn.Caption = printf(Txt("Add.DeleteDemoSheets()"), count)
    Else
        DeleteDemoBtn.Enabled = False
    End If
End Sub

Private Sub FillAddDropDown()

    ' Fills the dropdown with available Master sheets in this file
    '
    Dim ws As Worksheet
    Dim WsList(cMAXSHEETS) As String
    Dim WsListCount As Long
    Dim i As Long
    Dim j As Long

    'Clear dropdown
    'OfferDropDown.Clear (Not working in all excel versions)
    For i = TemplateDropDown.ListCount - 1 To 0 Step -1
        TemplateDropDown.RemoveItem i
    Next i

    'Gather list of Master Offersheets available in the file
    i = 0
    For Each ws In ActiveWorkbook.Worksheets
        If Left(ws.Name, 3) = "_M_" Then
            WsList(i) = ws.Name
            i = i + 1
        End If
    Next
    WsListCount = i - 1

    'Look up info about the found mastersheets

    'if the sheetname is in the masterlist then add it to the dropdown if the language is correct and if the type is correct, and programtype is not limited
    For j = 0 To NumberOfTemplates
        For i = 0 To WsListCount
            If WsList(i) = TemplateInfo(j).MasterSheetName Then
               If TemplateInfo(j).Language = UserLanguage Then
                   If TemplateInfo(j).SheetType >= NormalType_min And TemplateInfo(j).SheetType <= NormalType_Max Then
                        If TemplateInfo(j).LimitTo = "" Or TemplateInfo(j).LimitTo = ToolName Then
                            Me.TemplateDropDown.AddItem TemplateInfo(j).DropdownName
                        End If
                      Exit For
                    End If
                End If
            End If
        Next i
    Next j

    'Preselect the first if none selected
    If TemplateDropDown.ListIndex < 0 Then
        If TemplateDropDown.ListCount > 0 Then
            TemplateDropDown.ListIndex = 0
        End If
    End If
'
End Sub

Private Sub UserForm_Activate()
    'MsgBox ("Hello from UserForm_Activate")
End Sub

Private Sub UserForm_Deactivate()
    'MsgBox ("Hello from UserForm_Deactivate")
End Sub

Private Sub UserForm_RemoveControl(ByVal control As MSForms.control)
    'MsgBox ("Hello from UserForm_RemoveControl")
End Sub

Private Sub UserForm_Terminate()
    'MsgBox ("Hello from UserForm_Terminate")
End Sub

Private Function CopySheet(SourceSheetName As String, DestinationSheetName) As String
    'Makes a copy of the sheet given in parameter SourceSheetName
    'Renames the new sheet to parameter DestinationSheetName. If the name exists a number is added to the name
    'The new sheetname is returned.
    Dim ThisWb As Workbook
    Dim TempSheetName As String
    Dim Post As Long
    Dim FoundFreeName As Boolean
    Dim WasHidden As Boolean
    
    Set ThisWb = ThisWorkbook
    
    'Find a name for the new worksheet
    TempSheetName = DestinationSheetName
    Post = 0
    FoundFreeName = False
    
    Do
        If sheetExists(TempSheetName) Then
            Post = Post + 1
            TempSheetName = Left(DestinationSheetName, cMAXSHEETCHARACTERS - 4) & " (" & CStr(Post) & ")"
        Else
            FoundFreeName = True
        End If
    Loop While Not FoundFreeName
    
    If ThisWb.Sheets(SourceSheetName).Visible = xlSheetVeryHidden Then
        ThisWb.Sheets(SourceSheetName).Visible = xlSheetVisible
        WasHidden = True
    End If
    
    'Create new sheet in the workbook
    ThisWb.Sheets(SourceSheetName).Copy after:=ThisWb.Sheets(ThisWb.Sheets.count)
    ActiveSheet.Name = TempSheetName    'The new copied sheet will automaticly be the Active one
    
    If WasHidden Then
        ThisWb.Sheets(SourceSheetName).Visible = xlSheetVeryHidden
    End If

    CopySheet = TempSheetName
End Function

Private Sub DeleteAllDemoSheets()
    'DELETES all Master sheets (Starting with "_M_") with "demo" in the name
    Dim ws As Worksheet
    Dim count As Long
    Dim answer As Variant
    
    answer = MsgBox(Txt("Add.MsgBox.DeleteAllDemoWarning"), vbCritical, Txt("Add.MsgBox.DeleteAllDemoHeader"))
    If answer = vbOK Then
        Application.DisplayAlerts = False
        Application.ScreenUpdating = False
        For Each ws In ActiveWorkbook.Worksheets
            If Left(ws.Name, 3) = "_M_" Or Left(ws.Name, 6) = "!!!_M_" Then
                If InStr(1, UCase(ws.Name), "DEMO", vbTextCompare) Then
                    Debug.Print "Deleting sheet " & ws.Name
                    ws.Visible = xlSheetVisible
                    ws.Delete
                    count = count + 1
                End If
            End If
        Next
        Application.ScreenUpdating = True
        Application.DisplayAlerts = True
        Debug.Print "Count: " & count
        MsgBox printf(Txt("Add.MsgBox.DemoDeletedStatus"), count), vbInformation, Txt("Add.MsgBox.DemoDeletedHeader")
        DeleteDemoBtn.Enabled = False
    End If
End Sub

Private Function CountDemoSheets()
    Dim count As Long
    Dim ws As Worksheet
    For Each ws In ActiveWorkbook.Worksheets
        If Left(ws.Name, 3) = "_M_" Or Left(ws.Name, 6) = "!!!_M_" Then
            If InStr(1, UCase(ws.Name), "DEMO", vbTextCompare) Then
                count = count + 1
            End If
        End If
    Next
    CountDemoSheets = count
End Function

Attribute VB_Name = "BInvoiceHelpFormDA"
Attribute VB_Base = "0{1A5464B8-E4CA-400E-89A0-4F525C75D7D0}{9335DB57-51F1-4B35-A53F-0F340797C057}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Attribute VB_Name = "BInvoiceHelpFormDE"
Attribute VB_Base = "0{395330EC-F2AA-47E6-A15A-B416CADB76E0}{D0639BE1-EBE0-46CF-B70E-3D1C9CABF42C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "BInvoiceHelpFormGB"
Attribute VB_Base = "0{39BDA9DF-A410-495E-84DB-392057728C7D}{981183E8-3DC6-4597-B98E-FC3B4DC1A449}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Attribute VB_Name = "COutputHelpFormDA"
Attribute VB_Base = "0{A223121C-83CF-4E36-9785-A5157763ADC3}{B5EE756B-2ADD-4194-B487-B8A0F9990E0D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "COutputHelpFormDE"
Attribute VB_Base = "0{562E032A-F0B4-4724-AA05-E6A5FAEFBE83}{C7AAA675-08AD-4DBC-B7CA-759339F2F74A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "COutputHelpFormGB"
Attribute VB_Base = "0{FD2CF875-80E8-4E95-80AA-8A5C1D412A82}{252A49F7-3165-45DC-A7BA-A6766AB3CCD4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Attribute VB_Name = "CalcEngine"
Option Explicit
Option Private Module

Public Const CalcModuleVersion As String = "09-10-2019"

'For comments
Const cMarginsTopBottom As Long = 6
Const cMarginsLeftRight As Long = 8
Const cBackColorIndex As Long = 26      '26: Light Yellow (A bit darker than standard)
Const cFontColorIndex As Long = 1
Const cFontName As String = "Arial" '"Tahoma"
Const cFontSize As Long = 9
Const cFontSizeData As Long = 8



Sub DoTheCalc()
'--------------------------------------------------------------------------------------------------------------
'--- Beskrivelse af sub/funktion:
'--- Denne sub kaldes kun fra Knappen "Beregn" p|fffd| Ribbon
'---
'--- Versionshistorik:
'---    06-12-2017 Initial
'---    19-06-2018 Surcharge offset fix. (0) is the baseprice.
'---    25-06-2018 Handle blank/0,00 in invoiceprice & Blank From or To. Gives errormessage and no calc is made.
'---    25-06-2018 Fix EndCol error if SUM was not choosen.
'---    13-11-2018 Changed to use InvoiceDataBlock instead of the direct cell approach
'---
'--------------------------------------------------------------------------------------------------------------
    Dim InvoiceSheetName As String      'Sheetname of the invoicelist
    Dim InvoiceDataStartRow As Long     'First row of the dataarea in invoicelistsheet
    Dim InvoiceDataEndRow As Long       'Last row of the dataarea in invoicelistsheet
    Dim InvoiceDataEndCol As Long       'Last Column with data in the header row
    Dim InvoiceRow As Long              'Rowcounter
    Dim headerRow As Long               'Row with header
    Dim StartDataRow As Long            'Data row start
    Dim EndDataRow As Long              'Data row end
    Dim SumRow As Long                  'Row where the Sums are placed
    Dim iCol As Long
    Dim sCol As String
    Dim invCol As String
    Dim selCol As String
    Dim StartCol As Long
    Dim EndCol As Long                  'The last column used (for formating)
    Dim temp As String
    Dim CalculatedRows As Long
    Dim NoOfCalc As Long
    Dim InvoiceDataBlock As Variant
    Dim OfferLastCol As Long
    Dim OfferLastRow As Long
    
    'Dim OfferList(cMAXOFFERSHEETS) As OfferListType   'List with all the offers that contains the prices
    
    Dim i As Long, AntalLinier As Long, TotalAntalLinier As Long, PreMarge As Single, PostMarge As Single
    Dim surcharge As Single, SurchargeSum1 As Single, SurchargeSum2 As Single
    Dim PctComplete As Single, LastTime As Long, StartTime As Single, Timeused As Single, UpdatesPerSecond As Long
        
    If DebugMode Then Call SaveDebugInfo("DoTheCalc()", "Start")
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " Start of DoTheCalc"

    StartCheck = True                                                   'Til autoritationscheck i bl.a. sprog init
    Application.StatusBar = ""
    Application.ScreenUpdating = False                                  'Sl|fffd| sk|fffd|rmopdatering fra
    Application.Calculation = xlCalculationManual                       'Sl|fffd| manual beregning til
    Application.EnableCancelKey = xlInterrupt                           'Tilsikre at i kan bruge ESC til at stoppe benchmarken
    'Application.EnableCancelKey = xlErrorHandler ' Allow user to use ESC key

    Call InitGlobalVariables
        
    'Find first and last datarow in the invoicelist
    InvoiceSheetName = InvoiceSettings.Sheetname
    InvoiceDataStartRow = InvoiceSettings.headerRow + 1
    InvoiceDataEndRow = Last(cLASTROW, Worksheets(InvoiceSheetName).Columns(InvoiceSettings.FromColumn))
    TotalAntalLinier = InvoiceDataEndRow - InvoiceDataStartRow + 1
    InvoiceDataEndCol = Last(cLASTCOL, Worksheets(InvoiceSheetName).Rows(InvoiceSettings.headerRow))
    
    'Read all data of the invoice sheet
    InvoiceDataBlock = ActiveWorkbook.Worksheets(InvoiceSheetName).Range( _
                       ActiveWorkbook.Worksheets(InvoiceSheetName).Cells(1, 1), _
                       ActiveWorkbook.Worksheets(InvoiceSheetName).Cells(InvoiceDataEndRow, InvoiceDataEndCol)).Value
    
    'Read all data of relevant offer sheet(s)
    ReDim Preserve OfferDataBlock(OfferListCount)   'Reserve the space
    For i = 0 To OfferListCount                     'Add the offersheet(s)
        OfferLastCol = Last(cLASTCOL, Worksheets(OfferList(i).Sheetname).Rows(1))
        OfferLastRow = Last(cLASTROW, Worksheets(OfferList(i).Sheetname).Columns(OfferList(i).FromColumn))
        OfferDataBlock(i) = ActiveWorkbook.Worksheets(OfferList(i).Sheetname).Range( _
                            ActiveWorkbook.Worksheets(OfferList(i).Sheetname).Cells(1, 1), _
                            ActiveWorkbook.Worksheets(OfferList(i).Sheetname).Cells(OfferLastRow, OfferLastCol)).Value
    Next i
    
    'Read all data of the relevant Prefreight sheet (max  1), Postfreight sheet (max  1), and RoadTax sheet (max  1)
    For i = 1 To OutputInfo.NumberOfSurcharges
        If SurchargeList(i).Type = PreFreightType Then
            PreDataBlock = ActiveWorkbook.Worksheets(SurchargeList(i).Sheetname).Range( _
                           ActiveWorkbook.Worksheets(SurchargeList(i).Sheetname).Cells(1, 1), _
                           ActiveWorkbook.Worksheets(SurchargeList(i).Sheetname).Cells(SurchargeList(i).LastRow, SurchargeList(i).LastCol)).Value
        ElseIf SurchargeList(i).Type = PostFreightType Then
            PostDataBlock = ActiveWorkbook.Worksheets(SurchargeList(i).Sheetname).Range( _
                            ActiveWorkbook.Worksheets(SurchargeList(i).Sheetname).Cells(1, 1), _
                            ActiveWorkbook.Worksheets(SurchargeList(i).Sheetname).Cells(SurchargeList(i).LastRow, SurchargeList(i).LastCol)).Value
        ElseIf SurchargeList(i).Type = RoadType Then
            RoadTaxDataBlock = ActiveWorkbook.Worksheets(SurchargeList(i).Sheetname).Range( _
                               ActiveWorkbook.Worksheets(SurchargeList(i).Sheetname).Cells(1, 1), _
                               ActiveWorkbook.Worksheets(SurchargeList(i).Sheetname).Cells(SurchargeList(i).LastRow, SurchargeList(i).LastCol)).Value
        End If
    Next i
    
    
    UpdatesPerSecond = 1
    StartTime = Timer
    LastTime = Int(Timer * UpdatesPerSecond)
        
    If OutputInfo.Sheetname <> "" Then
        'Activate the output sheet
        Worksheets(OutputInfo.Sheetname).Activate
        'Deactive autofilter
        'ActiveSheet.AutoFilterMode = False
    End If
    
    'Initialize output (Sheet+headerlabels)
    Call InitSaveResultToOutput
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " DoTheCalc(): Processing: Starting"
        
    ' Mainloop to walk through the invoicelist
    For InvoiceRow = InvoiceDataStartRow To InvoiceDataEndRow
'        If Worksheets(InvoiceSheetName).Cells(InvoiceRow, 1).EntireRow.Hidden Then
'            If DebugMode Then Debug.Print "Row " & InvoiceRow & " is hidden."
'        Else
            On Error GoTo 0
            'On Error GoTo UserBreakEvent
            
            ResultData.NormalPrice = 0#
            CalculatedRows = CalculatedRows + 1
            
            If DebugMode Then Call SaveDebugInfo("DoTheCalc()", " Processing: Starting InvoiceRow " & InvoiceRow)
            'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " DoTheCalc(): Starting InvoiceRow " & InvoiceRow

            If (LastTime < Int(Timer * UpdatesPerSecond)) Then              'Opdater statuslinien x gange i sekundet
                'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " DoTheCalc(): Updating timer"
                LastTime = Int(Timer * UpdatesPerSecond)
                PctComplete = CalculatedRows / TotalAntalLinier
                Timeused = Timer - StartTime
                'temp = Format(PctComplete, "0%") & " - " & (CalculatedRows - 1) & " / " & TotalAntalLinier
                temp = printf(Txt("Statusbar_Calculating"), Format(PctComplete, "0%"), Int(TotalAntalLinier / CalculatedRows * Timeused - Timeused + 1), (CalculatedRows - 1), TotalAntalLinier)
                Application.StatusBar = temp
                DoEvents                                                    'Ung|fffd|r at statuslinien g|fffd|r 'd|fffd|d' DENNE G|fffd|R AT BEREGNINGEN FRYSER I LANG TID NOGEN GANG
            End If
            
            ResultData.ErrorMessage = ""
            Call GetInvoiceDataRow(InvoiceDataBlock, InvoiceRow)  'Saves the read data in the InvoiceData struct
                        
            If DebugMode Then Call SaveDebugInfo("DoTheCalc()", "Processing: InvoiceRow " & InvoiceRow & " Valid: " & InvoiceData.Valid)
            
            If InvoiceData.Valid Then
                If Not InvoiceData.Warning Then
                    Call GetOfferDataRow                'Find and read the offers data row
                    If OfferData.Valid Then
                        Call GetPrice                   'Calc the base freight price (always Normal and eventualy also advantage) incl. evt. surcharges
                        NoOfCalc = NoOfCalc + 1
                        
                        'Find price diff
                        If OutputInfo.OutputMode = OutputBenchMode Then
                            ResultData.PriceDiffInUnits = ResultData.SelectedAllInPrice - InvoiceData.Price
                        Else
                            ResultData.PriceDiffInUnits = InvoiceData.Price - ResultData.SelectedAllInPrice
                        End If
                        
                        If InvoiceData.Price <> 0# Then
                            ResultData.PriceDiffInPercent = ResultData.PriceDiffInUnits / InvoiceData.Price
                        Else
                            ResultData.PriceDiffInPercent = 9999999#
                        End If
                    Else
                        ResultData.ErrorMessage = OfferData.ErrorMessage
                        ResultData.CalcModeUsed = cTxt("CalcMode.NotPossible")
                    End If
                Else
'                    Debug.Print "Invoice Warning found in row " & InvoiceRow & ". Error message: " & ResultData.ErrorMessage
                End If
                Call SaveResultToOutput 'Stores the wanted info to the requested place
                If DebugMode Then Call SaveDebugInfo("DoTheCalc()", "Processing: Done InvoiceRow " & InvoiceRow)
                
            End If
'        End If
        SumRow = InvoiceRow 'Update
    Next InvoiceRow
    
    If DebugMode Then Call SaveDebugInfo("DoTheCalc()", "PostProcessing")
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & "DoTheCalc(): PostProcessing startet"
    
    If NoOfCalc > 0 Then    'Only do the afterwork is rows was calculated
    
        'Cond format on the Percent column
        If OutputSettings.MakePctDiffCellsColored Then
            Call SetCondFormat
        End If
    
        SumRow = SumRow + 1 'Make a blank row before the sum row, so that the sum row not will be hidden if a filter is set.
        
        'Set a sum on the relevant columns.
        If OutputSettings.ShowSum Then
            If OutputInfo.IsNewSheet Then
                StartDataRow = 2
                EndDataRow = SumRow - 1
            Else
                StartDataRow = InvoiceDataStartRow
                EndDataRow = SumRow - 1
            End If
            SumRow = SumRow + 1
            
            'Invoice All-In Column:
            iCol = OutputInfo.InvoicePriceColumn
            If iCol > EndCol Then EndCol = iCol
            sCol = ColumnLetter(iCol)
            'Make sure that the cell ist empty, before writing to it
            temp = Worksheets(OutputInfo.Sheetname).Cells(SumRow, iCol).Value2
            If temp = "" Then
                Worksheets(OutputInfo.Sheetname).Cells(SumRow, iCol).Formula = printf("=SUBTOTAL(109,%0%1:%2%3)", sCol, StartDataRow, sCol, EndDataRow)
                With Worksheets(OutputInfo.Sheetname).Cells(SumRow, iCol)  'Numbers with 2 decimal and indent
                    .HorizontalAlignment = xlRight
                    .AddIndent = True
                    .IndentLevel = 1
                    .NumberFormat = "#,##0.00"
                End With
            End If
            invCol = sCol
            
            'Offer Selected price Column:
            iCol = OutputInfo.SelectedPriceColumn
            If iCol > EndCol Then EndCol = iCol
            sCol = ColumnLetter(iCol)
            Worksheets(OutputInfo.Sheetname).Cells(SumRow, iCol).Formula = printf("=SUBTOTAL(109,%0%1:%2%3)", sCol, StartDataRow, sCol, EndDataRow)
            selCol = sCol
            
            'Price diff
            If OutputInfo.ShowColumnWithPriceDiffInUnits Then
                iCol = OutputInfo.PriceDiffInUnitsColumn
                If iCol > EndCol Then EndCol = iCol
                sCol = ColumnLetter(iCol)
                Worksheets(OutputInfo.Sheetname).Cells(SumRow, iCol).Formula = printf("=SUBTOTAL(109,%0%1:%2%3)", sCol, StartDataRow, sCol, EndDataRow)
            End If
    
            'Percent diff
            If OutputInfo.ShowColumnWithPriceDiffInPercent Then
                iCol = OutputInfo.PriceDiffInPercentColumn
                If iCol > EndCol Then EndCol = iCol
                sCol = ColumnLetter(iCol)
                Worksheets(OutputInfo.Sheetname).Cells(SumRow, iCol).Formula = printf("=(%0%1-%2%3)/%4%5", selCol, SumRow, invCol, SumRow, invCol, SumRow)
'                Worksheets(OutputInfo.Sheetname).Cells(SumRow, iCol).Formula = printf("=-(%0%1-%2%3)/%4%5", selCol, SumRow, invCol, SumRow, selCol, SumRow)
            End If
    
            'Freight price
            If OutputInfo.ShowColumnWithFreightCalc Then
                iCol = OutputInfo.FreightCalcColumn
                If iCol > EndCol Then EndCol = iCol
                sCol = ColumnLetter(iCol)
                Worksheets(OutputInfo.Sheetname).Cells(SumRow, iCol).Formula = printf("=SUBTOTAL(109,%0%1:%2%3)", sCol, StartDataRow, sCol, EndDataRow)
            End If
             
            'Normal price
            If OutputInfo.ShowColumnWithNormalCalc Then
                iCol = OutputInfo.NormalCalcColumn
                If iCol > EndCol Then EndCol = iCol
                sCol = ColumnLetter(iCol)
                Worksheets(OutputInfo.Sheetname).Cells(SumRow, iCol).Formula = printf("=SUBTOTAL(109,%0%1:%2%3)", sCol, StartDataRow, sCol, EndDataRow)
            End If
            'Normal price details
            If OutputInfo.ShowColumnWithNormalCalcDetails Then
                iCol = OutputInfo.NormalCalcDetailsColumn
                If iCol > EndCol Then EndCol = iCol
            End If
    
            'Advantage/disadvantage price
            If OutputInfo.ShowColumnWithAdvantageCalc Then
                iCol = OutputInfo.AdvantageCalcColumn
                If iCol > EndCol Then EndCol = iCol
                sCol = ColumnLetter(iCol)
                Worksheets(OutputInfo.Sheetname).Cells(SumRow, iCol).Formula = printf("=SUBTOTAL(109,%0%1:%2%3)", sCol, StartDataRow, sCol, EndDataRow)
            End If
            
            'Advantage/disadvantage price details
            If OutputInfo.ShowColumnWithAdvantageCalcDetails Then
                iCol = OutputInfo.AdvantageCalcDetailsColumn
                If iCol > EndCol Then EndCol = iCol
            End If
            
            'Surcharges
            If OutputInfo.ShowColumnWithSurcharges Then
                For i = 1 To OutputInfo.NumberOfSurcharges
                    iCol = OutputInfo.SurchargeColumn(i)
                    If iCol > EndCol Then EndCol = iCol
                    sCol = ColumnLetter(iCol)
                    Worksheets(OutputInfo.Sheetname).Cells(SumRow, iCol).Formula = printf("=SUBTOTAL(109,%0%1:%2%3)", sCol, StartDataRow, sCol, EndDataRow)
                Next i
            End If
            
            'Chargable amount
            If OutputInfo.ShowColumnWithChargeableAmount Then
                iCol = OutputInfo.ChargeableAmountColumn
                If iCol > EndCol Then EndCol = iCol
    '            sCol = ColumnLetter(iCol)
    '            Worksheets(OutputInfo.Sheetname).Cells(SumRow, iCol).Formula = printf("=SUBTOTAL(109,%0%1:%2%3)", sCol, StartDataRow, sCol, EndDataRow)
            End If
            
            'Format the sum cells
            With Worksheets(OutputInfo.Sheetname).Range(Cells(SumRow, 1), Cells(SumRow, EndCol))
                .Font.Bold = True
                With .Borders(xlEdgeTop)
                    .LineStyle = xlContinuous
                    .ColorIndex = 0
                    .TintAndShade = 0
                    .Weight = xlThin
                End With
                With .Borders(xlEdgeBottom)
                    .LineStyle = xlContinuous
                    .ColorIndex = 0
                    .TintAndShade = 0
                    .Weight = xlThin
                End With
            End With
        Else
            iCol = OutputInfo.InvoicePriceColumn
            If iCol > EndCol Then EndCol = iCol
            iCol = OutputInfo.SelectedPriceColumn
            If iCol > EndCol Then EndCol = iCol
            iCol = OutputInfo.PriceDiffInUnitsColumn
            If iCol > EndCol Then EndCol = iCol
            iCol = OutputInfo.PriceDiffInPercentColumn
            If iCol > EndCol Then EndCol = iCol
            iCol = OutputInfo.NormalCalcColumn
            If iCol > EndCol Then EndCol = iCol
            iCol = OutputInfo.NormalCalcDetailsColumn
            If iCol > EndCol Then EndCol = iCol
            iCol = OutputInfo.AdvantageCalcColumn
            If iCol > EndCol Then EndCol = iCol
            iCol = OutputInfo.AdvantageCalcDetailsColumn
            If iCol > EndCol Then EndCol = iCol
            iCol = OutputInfo.SurchargeColumn(i)
            If iCol > EndCol Then EndCol = iCol
            iCol = OutputInfo.ChargeableAmountColumn
            If iCol > EndCol Then EndCol = iCol
        End If
                
                
        'Set borders on the data area cells
        If OutputInfo.InvoiceStartColumn = 0 Then
            StartCol = OutputInfo.SelectedPriceColumn
        Else
            StartCol = OutputInfo.InvoiceStartColumn
        End If
        With Worksheets(OutputInfo.Sheetname).Range(Cells(headerRow + 1, StartCol), Cells(SumRow, EndCol))
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Borders(xlEdgeTop).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeRight).LineStyle = xlContinuous
            .Borders(xlInsideVertical).LineStyle = xlContinuous
            .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        End With
    
        'Turn on autofilter
        If OutputInfo.IsNewSheet Then
            headerRow = 1
        Else
            headerRow = InvoiceInfo.headerRow
        End If
        
        On Error Resume Next
        ActiveSheet.Cells(headerRow, 1).AutoFilter
        On Error GoTo 0
               
        'Scroll to the top and active cell A1
        'ActiveWindow.ScrollRow = 1
        Worksheets(OutputInfo.Sheetname).Cells(1, 1).Activate
    
    End If
                
    Timeused = Timer - StartTime + 1
    temp = printf(Txt("Statusbar_DoneCalculating"), CalculatedRows, CInt(Timeused), CInt(CalculatedRows / Timeused))
    Application.StatusBar = temp
    Application.OnTime Now + TimeSerial(0, 0, 10), "ClearStatusBar"     'Giv Excel controlen tilbage over statuslinien om 10 sekunder
        
    GoTo TheEnd
    
UserBreakEvent:
    Application.EnableCancelKey = xlInterrupt                           'turn back on the interrupt property
    MsgBox Txt("UserInterruptet")
    
TheEnd:
    Call CleanUp
    If DebugMode Then Call SaveDebugInfo("DoTheCalc()", "End")
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " DoTheCalc(): End"
End Sub

Sub CleanUp()
    Application.EnableCancelKey = xlInterrupt                           'turn back on the interrupt property
    Application.Calculation = xlCalculationAutomatic                    'S|fffd|t beregningstatus til auto
    Application.ScreenUpdating = True                                   'S|fffd|t sk|fffd|rmopdatering til igen
End Sub

Private Sub GetPrice()
'--------------------------------------------------------------------------------------------------------------
'--- Calculates the base freight base price and also evt. advantage calculations
'--- If needed also perform input convertions
'---
'--- Input:     OfferData
'---
'--- Output:    ResultData
'---
'--- History:
'---    12-12-2017  Initial
'---    01-11-2018  Add From to info to Details
'--------------------------------------------------------------------------------------------------------------
    Dim FreightAmount As Double         'The amount that is used for the price calculation
    Dim ConvertionMessage As String     'Message from the convertion function
    Dim NormalPrice As Double
    Dim AdvantagePrice As Double
    Dim PriceMessage As String
    Dim CurrencyConvDetails As String
    Dim UsedMode As UsedCalculation
    
    If DebugMode Then Call SaveDebugInfo("GetPrice()", "Start")
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " Start of GetPrice"

    'Clear all strings
    ResultData.NormalCalcDetails = ""
    ResultData.AdvCalcDetails = ""
    ResultData.SelectedCalcDetails = ""
    ResultData.CalcModeUsed = ""
    ResultData.AdvantagePrice = 0#
    ResultData.DefaultCurrency = ""
    CurrencyConvDetails = ""
    
    ResultData.DefaultCurrency = OfferData.StandardCurrency
    
    'Add from/to info
    ResultData.SelectedCalcDetails = "'" & InvoiceData.From & "' >> '" & InvoiceData.To & "'" & Newline & Newline
     
    'Check if the unit on the invoice matches the offer units.
    'If no match then try convert the invoiceunit to the offer unit using convertion factors
    FreightAmount = CalcFreightAmount(Normaltype, ConvertionMessage)
    If FreightAmount < 0# Then
        ResultData.NormalPrice = 0#
        ResultData.NormalCalcDetails = ConvertionMessage
        Exit Sub
    End If
    If ConvertionMessage <> "" Then
        ResultData.NormalCalcDetails = ConvertionMessage & Newline & Newline
    End If
    
    'Normal price
    NormalPrice = CalcBasePrice(FreightAmount, CalculationModeType.NormalMode, PriceMessage, UsedMode, Normaltype)
    ResultData.NormalPrice = NormalPrice
    ResultData.NormalCalcDetails = ResultData.NormalCalcDetails & cTxt("PriceCalc.NormalInfoHeadline") & Newline
    ResultData.NormalCalcDetails = ResultData.NormalCalcDetails & PriceMessage & Newline
    ResultData.NormalCalcDetails = ResultData.NormalCalcDetails & printf(cTxt("Info.NormalPriceIs"), Format(NormalPrice, PriceFormat)) & " " & ResultData.DefaultCurrency & Newline
    
    'Find mode
    If UsedMode = MinimumUsed Then
        ResultData.CalcModeUsed = cTxt("CalcMode.Minimum")
    ElseIf UsedMode = FTLUsed Then
        ResultData.CalcModeUsed = cTxt("CalcMode.FTL")
    ElseIf UsedMode = Notpossible Then
        ResultData.ErrorMessage = PriceMessage
        ResultData.CalcModeUsed = cTxt("CalcMode.NotPossible")
    Else
        ResultData.CalcModeUsed = cTxt("CalcMode.Normal")    'Until otherwise proven
    End If
    
    ResultData.SelectedBasePrice = NormalPrice
    ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & ResultData.NormalCalcDetails             'Always show the Normal price calc details
    ResultData.SelectedAllInPrice = NormalPrice 'until otherwise proven

    
    'If not able to calc the normal baseprice then dont bother with adv/disadv.
    If UsedMode = NormalUsed Then
    
        'Adv/disadvantage price
        If OfferData.CalculationMode = CalculationModeType.AdvantageNext Then
            AdvantagePrice = CalcBasePrice(FreightAmount, CalculationModeType.AdvantageNext, PriceMessage, UsedMode, Normaltype)
            ResultData.AdvantagePrice = AdvantagePrice
            ResultData.AdvCalcDetails = cTxt("PriceCalc.AdvantageInfoHeadline") & Newline
            ResultData.AdvCalcDetails = ResultData.AdvCalcDetails & PriceMessage & Newline
            ResultData.AdvCalcDetails = ResultData.AdvCalcDetails & printf(cTxt("Info.AdvantagePriceIs"), Format(AdvantagePrice, PriceFormat)) & " " & ResultData.DefaultCurrency & Newline
        
        ElseIf OfferData.CalculationMode = CalculationModeType.Advantagerest Then
            AdvantagePrice = CalcBasePrice(FreightAmount, CalculationModeType.Advantagerest, PriceMessage, UsedMode, Normaltype)
            ResultData.AdvantagePrice = AdvantagePrice
            ResultData.AdvCalcDetails = cTxt("PriceCalc.AdvantageInfoHeadline") & Newline
            ResultData.AdvCalcDetails = ResultData.AdvCalcDetails & PriceMessage & Newline
            ResultData.AdvCalcDetails = ResultData.AdvCalcDetails & printf(cTxt("Info.AdvantagePriceIs"), Format(AdvantagePrice, PriceFormat)) & " " & ResultData.DefaultCurrency & Newline
        
        ElseIf OfferData.CalculationMode = CalculationModeType.Disadvantage Then
            AdvantagePrice = CalcBasePrice(FreightAmount, CalculationModeType.Disadvantage, PriceMessage, UsedMode, Normaltype)
            ResultData.AdvantagePrice = AdvantagePrice
            ResultData.AdvCalcDetails = cTxt("PriceCalc.DisadvantageInfoHeadline") & Newline
            ResultData.AdvCalcDetails = ResultData.AdvCalcDetails & PriceMessage & Newline
            ResultData.AdvCalcDetails = ResultData.AdvCalcDetails & printf(cTxt("Info.DisadvantagePriceIs"), Format(AdvantagePrice, PriceFormat)) & " " & ResultData.DefaultCurrency & Newline
        End If
        
        NormalPrice = ResultData.NormalPrice
        AdvantagePrice = ResultData.AdvantagePrice
       
        '--- Find the price to select
        'Advantage
        If OfferData.CalculationMode = CalculationModeType.AdvantageNext Or OfferData.CalculationMode = CalculationModeType.Advantagerest Then
            ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & Newline & ResultData.AdvCalcDetails
            If AdvantagePrice > 0# Then
                'ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & newline & printf(cTxt("Info.AdvantagePriceIs"), Format(AdvantagePrice, PriceFormat))
            Else
                ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & Newline & cTxt("Info.AdvantageNotAvailable")
            End If
            'Select the cheapest price
            If AdvantagePrice > 0# And AdvantagePrice < NormalPrice Then
                ResultData.SelectedBasePrice = AdvantagePrice
                ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & Newline & printf(cTxt("Selected.AdvantageCalcUsed"), Format(AdvantagePrice, PriceFormat)) & " " & ResultData.DefaultCurrency
                ResultData.CalcModeUsed = cTxt("CalcMode.Advantage")
            Else
                ResultData.SelectedBasePrice = NormalPrice
                ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & Newline & printf(cTxt("Selected.NormalCalcUsed"), Format(NormalPrice, PriceFormat)) & " " & ResultData.DefaultCurrency
           End If
        'Disadvantage
        ElseIf OfferData.CalculationMode = CalculationModeType.Disadvantage Then
            ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & Newline & ResultData.AdvCalcDetails
           If AdvantagePrice > 0# Then
               'ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & newline & printf(cTxt("Info.DisadvantagePriceIs"), Format(AdvantagePrice, PriceFormat))
           Else
               ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & Newline & cTxt("Info.DisadvantageNotAvailable")
           End If
           'Select the highest price
           If AdvantagePrice > 0# And AdvantagePrice > NormalPrice Then
               ResultData.SelectedBasePrice = AdvantagePrice
               ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & Newline & printf(cTxt("Selected.DisadvantageCalcUsed"), Format(AdvantagePrice, PriceFormat)) & " " & ResultData.DefaultCurrency
               ResultData.CalcModeUsed = cTxt("CalcMode.Disadvantage")
           Else
               ResultData.SelectedBasePrice = NormalPrice
               ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & Newline & printf(cTxt("Selected.NormalCalcUsed"), Format(NormalPrice, PriceFormat)) & " " & ResultData.DefaultCurrency
           End If
        End If
        ResultData.SelectedAllInPrice = ResultData.SelectedBasePrice 'Set all-in price to base price before calculatimg the surcharges
    End If
    
    'Get the FreightPrice and Details (before the surcharges are added)
    ResultData.FreightPrice = ResultData.SelectedBasePrice
    ResultData.FreightPriceDetails = ResultData.SelectedCalcDetails
    
    If UsedMode <> Notpossible Then
        Call CalcAllSurcharges 'Calc all surcharges if applicable
    End If
    
    If DebugMode Then Call SaveDebugInfo("GetPrice()", "End")
    
End Sub


Public Function CalcBasePrice(Amount As Double, Calcmode As Long, ByRef Message As String, ByRef ModeUsed As UsedCalculation, Scope As SurchargeType) As Double

'--------------------------------------------------------------------------------------------------------------
'--- Calculates the base price (CalcMode: Normal /advantage / disadvantage)
'---
'--- Input:     Parameter: Amount (in same units as the offer is in)
'---            Parameter: Calcmode
'---            OfferData   (scope dependant)
'---
'--- Output:    The Calculated price    If calculation is not possible the -1 is returned
'---            byref parameter: Calculationmode used (Min, <modedep>, FTL, Notpossible)
'---            byref parameter: Message (calculation details)
'---
'--- History:
'---    12-12-2017 Initial
'---    30-07-2018 Added support for negative price (ignore calculation)
'---    08-10-2018 Removed Zero price check for main price
'---    10-02-2019 Fix of minimumprice source reference
'---    06-03-2019 Check if there is a price in the offer
'--------------------------------------------------------------------------------------------------------------
    Dim MinPrice As Double
    Dim FTLPrice As Double
    Dim UpperIndex As Long      'Upper index of the price inteval
    Dim IntervalFoundInIndex As Long
    Dim i As Long
    Dim CalcPrice As Double
    Dim CurCode As String
    Dim DefaultCurrencyPrice As Double
    Dim CurrencyMessage As String
    Dim AdvAmount As Double
    Dim CalcMessage As String
    Dim LowestPrice As Double
    Dim LowestMessage As String
    Dim LowestIndex As Long
    Dim LocalOfferData As OfferDataType
    Dim source As String
    Dim FTLIndex As Long
    
    'Get input data depending on the scope
    If Scope = Normaltype Then
        LocalOfferData = OfferData
    ElseIf Scope = RoadType Then
        LocalOfferData = OfferRoadTaxData
    ElseIf Scope = PreFreightType Then
        LocalOfferData = OfferPreData
    ElseIf Scope = PostFreightType Then
        LocalOfferData = OfferPostData
    ElseIf Scope = IntervalAtype Then
        LocalOfferData = OfferIntervalAData
    ElseIf Scope = IntervalBtype Then
        LocalOfferData = OfferIntervalBData
    ElseIf Scope = IntervalCtype Then
        LocalOfferData = OfferIntervalCData
    End If
 
    MinPrice = LocalOfferData.MinimumPrice
    CurCode = LocalOfferData.MatrixCurrency
    
    'Find upper index of the priceinterval
    For i = cMAXPRICEINTERVALS To 0 Step -1
        If LocalOfferData.PriceInterval(i) <> 0 Then
            UpperIndex = i
            Exit For
        End If
    Next i
    
    'Find FTL price (if there is one)
    FTLPrice = -1#
    For i = 0 To UpperIndex
        If LocalOfferData.Types(i) = PriceType.FTL Then
            FTLPrice = LocalOfferData.Price(i)
            FTLIndex = i
            Exit For
        End If
    Next i
    
    'Find the index where the amount fits
    IntervalFoundInIndex = -1
    For i = 0 To UpperIndex
        If (Round(Amount, 4) <= Round(LocalOfferData.PriceInterval(i), 4)) Then   'Check if the amount is below or equal to the actual border
            IntervalFoundInIndex = i
            Exit For
        End If
    Next i
    
    If IntervalFoundInIndex < 0# Then      'Interval not found, so it must be to big an amount
        CalcBasePrice = -1#
        Message = cTxt("Error.AmountToBig")
        ModeUsed = Notpossible
        Exit Function
    ElseIf LocalOfferData.Price(IntervalFoundInIndex) = 0# Then 'Check if there is a price
        CalcBasePrice = -1#
        Message = cTxt("Error.NoPriceFound")
        ModeUsed = Notpossible
        Exit Function
    End If
    
    'Check if a there is a negative price in the interval found (ignore calulation)
    If LocalOfferData.Price(i) < 0# Then
        CalcBasePrice = -1#
        If SourceFormat = "WithSheet" Then
            source = printf(cTxt("PriceCalc.SourceCleanSheetCell"), LocalOfferData.SourceSheetName, ColLetter(i + 4), CStr(LocalOfferData.SourceRow))
        Else
            source = printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(i + 4), CStr(LocalOfferData.SourceRow))
        End If
        Message = printf(cTxt("Error.InvoiceFreightPriceNegative"), source)
        ModeUsed = Notpossible
        Exit Function
    End If
    
    'Check if a there is a 0 or blank price in the interval found  (ignore calulation)
'    If LocalOfferData.Price(i) = 0# Then
'        CalcBasePrice = -1#
'        If SourceFormat = "WithSheet" Then
'            source = printf(cTxt("PriceCalc.SourceCleanSheetCell"), LocalOfferData.SourceSheetName, ColLetter(i + 4), CStr(LocalOfferData.SourceRow))
'        Else
'            source = printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(i + 4), CStr(LocalOfferData.SourceRow))
'        End If
'        Message = printf(cTxt("Error.InvoiceFreightPriceNullorBlank"), source)
'        ModeUsed = Notpossible
'        Exit Function
'    End If
    
    If Calcmode = CalculationModeType.NormalMode Then
        CalcPrice = CalculatePrice(Amount, CurCode, IntervalFoundInIndex, LocalOfferData.SourceRow, LocalOfferData.SourceSheetName, CalcMessage, Scope)
        ModeUsed = NormalUsed
    ElseIf Calcmode = CalculationModeType.AdvantageNext Then
        If IntervalFoundInIndex + 1 <= UpperIndex Then 'Only try to calc if we do not exceed the interval limit
            AdvAmount = LocalOfferData.PriceInterval(IntervalFoundInIndex) + LocalOfferData.AdvCalcNumber
            CalcPrice = CalculatePrice(AdvAmount, CurCode, IntervalFoundInIndex + 1, LocalOfferData.SourceRow, LocalOfferData.SourceSheetName, CalcMessage, Scope)
            ModeUsed = NormalUsed
        Else    'Upper limit exceeded s|fffd| no adv. price
            CalcPrice = -1
            ModeUsed = Notpossible
            Message = cTxt("PriceCalc.AdvantageNotPossible")
            Exit Function
        End If
    ElseIf Calcmode = CalculationModeType.Advantagerest Then
        If IntervalFoundInIndex + 1 <= UpperIndex Then 'Only try to calc if we do not exceed the inteval limit
            LowestPrice = 9999999999#
            LowestIndex = -1
            'Loop through the rest of the row and find the cheapest price
            For i = IntervalFoundInIndex + 1 To UpperIndex
                AdvAmount = LocalOfferData.PriceInterval(i - 1) + LocalOfferData.AdvCalcNumber
                CalcPrice = CalculatePrice(AdvAmount, CurCode, i, LocalOfferData.SourceRow, LocalOfferData.SourceSheetName, CalcMessage, Scope)
                If CalcPrice > 0# And CalcPrice < LowestPrice Then
                    LowestPrice = CalcPrice
                    LowestMessage = CalcMessage
                    LowestIndex = i
                End If
            Next i
            If LowestIndex >= 0 Then    'Check if we found a price
                CalcPrice = LowestPrice
                CalcMessage = LowestMessage
                ModeUsed = NormalUsed
            Else
                CalcPrice = -1
                ModeUsed = Notpossible
                Message = cTxt("PriceCalc.AdvantageNotPossible")
                Exit Function
            End If
            ModeUsed = NormalUsed
        Else    'Upper limit exceeded s|fffd| no adv. price
            CalcPrice = -1
            ModeUsed = Notpossible
            Message = cTxt("PriceCalc.AdvantageNotPossible")
            Exit Function
        End If
    ElseIf Calcmode = CalculationModeType.Disadvantage Then
        If IntervalFoundInIndex > 0 Then 'Only try to calc if we do not at index 0
            CalcPrice = CalculatePrice(Amount, CurCode, IntervalFoundInIndex - 1, LocalOfferData.SourceRow, LocalOfferData.SourceSheetName, CalcMessage, Scope)
            ModeUsed = NormalUsed
        Else    'lower limit exceeded s|fffd| just give back minimum price
            CalcPrice = 0
            Exit Function
        End If
    End If

    'Check for Minimum and FTL price
    If CalcPrice < MinPrice Then
        CalcBasePrice = MinPrice
        ModeUsed = MinimumUsed
        If SourceFormat = "WithSheet" Then
            source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanSheetCell"), LocalOfferData.SourceSheetName, ColLetter(3), CStr(LocalOfferData.SourceRow))
        Else
            source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(3), CStr(LocalOfferData.SourceRow))
        End If
        Message = CalcMessage & Newline
        Message = Message & source & Newline
        Message = Message & printf(cTxt("PriceCalc.MinimumUsed"), Format(MinPrice, PriceFormat), LocalOfferData.MatrixCurrency)
    ElseIf CalcPrice >= FTLPrice And FTLPrice > 0# Then
        CalcBasePrice = FTLPrice
        ModeUsed = FTLUsed
        If SourceFormat = "WithSheet" Then
            source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanSheetCell"), LocalOfferData.SourceSheetName, ColLetter(FTLIndex + 4), CStr(LocalOfferData.SourceRow))
        Else
            source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(FTLIndex + 4), CStr(LocalOfferData.SourceRow))
        End If
        Message = CalcMessage & Newline
        Message = Message & source & Newline
        Message = Message & printf(cTxt("PriceCalc.FTLPriceUsed"), Format(FTLPrice, PriceFormat), LocalOfferData.MatrixCurrency)
    Else
        CalcBasePrice = CalcPrice
        Message = CalcMessage
    End If
    
    'Check / make for currency conversion
    If LocalOfferData.StandardCurrency <> LocalOfferData.MatrixCurrency Then
        DefaultCurrencyPrice = ConvertPrice(CalcBasePrice, LocalOfferData.MatrixCurrency, LocalOfferData.StandardCurrency, CurrencyMessage)
        If CurrencyMessage <> "" Then
            Message = Message & Newline & CurrencyMessage
        End If
        CalcBasePrice = DefaultCurrencyPrice
    End If
    
End Function

Public Function ConvertPrice(fromPrice As Double, fromCurrency As String, toCurrency As String, ByRef Details As String) As Double
'--------------------------------------------------------------------------------------------------------------
'--- Convert the FromPrice to another currency
'---
'--- Input:     Parameter:  fromCurrency
'---            Parameter:  toCurrency
'---            parameter:  message
'---            Global:     OfferSettings.CurrencyInfo(0 To cMAXCURRENCIES) As CurrencyType (.name + .Value)
'---
'--- Output:    The Convertet price
'---            byref parameter: Details (Convertion details)
'---
'--- History:
'---    30-01-2018 Initial
'--------------------------------------------------------------------------------------------------------------
    Dim ConvertedPrice As Double
    Dim FoundValue As Double
    Dim i As Long
    
    'input check
    If fromCurrency = "" Then
        Call MsgBox("Internal Error found in function ConvertPrice:" & vbNewLine & _
        "FromCurrency code is empty", vbCritical)
        End
    End If
    If toCurrency = "" Then
        Call MsgBox("Internal Error found in function ConvertPrice:" & vbNewLine & _
        "ToCurrency code is empty", vbCritical)
        End
    End If
    
    'if the same the just return the inputvalue
    If fromCurrency = toCurrency Then
        ConvertPrice = fromPrice
        Details = ""
        Exit Function
    End If
    
    'Check that Index 0 of the currencylist is the same as the toCurrency (Should be)
    If OfferSettings.CurrencyInfo(0).Name <> toCurrency Then
        Call MsgBox("Internal Error found in function ConvertPrice:" & vbNewLine & _
        "OfferSettings.CurrencyInfo(0).Name <> fromCurrency:" & vbNewLine & _
        "OfferSettings.CurrencyInfo(0).Name= '" & OfferSettings.CurrencyInfo(0).Name & "'" & vbNewLine & _
        "fromCurrency= '" & fromCurrency & "'", vbCritical)
        End
    End If
    
    FoundValue = 0#
    
    'Find the currency's value
    For i = 1 To cMAXCURRENCIES
        If OfferSettings.CurrencyInfo(i).Name = fromCurrency Then
            FoundValue = OfferSettings.CurrencyInfo(i).Value
            Exit For
        End If
    Next i
    
    If FoundValue = 0# Then
        Call MsgBox("Internal Error found in function ConvertPrice:" & vbNewLine & _
        "No currency value Found for '" & toCurrency & "'", vbCritical)
        End
    End If
    
    'Make the convertion
    ConvertedPrice = fromPrice / FoundValue
    Details = Format(fromPrice, PriceFormat) & " " & fromCurrency & " >> " & Format(ConvertedPrice, PriceFormat) & " " & toCurrency
    ConvertPrice = ConvertedPrice

End Function

Private Function CalculatePrice(FreightAmount As Double, CurrencyCode As String, FoundIndex As Long, SourceRow As Long, SourceSheet As String, ByRef Details As String, Scope As SurchargeType) As Double
    
'--------------------------------------------------------------------------------------------------------------
'--- Low level calculation of the price
'---
'--- Input:     Parameter: FreightAmount (in same units as the offer is in)
'---            Parameter: CurrencyCode
'---            Parameter: FoundIndex (Pointer to the pricematrix: 0 is the first priceinterval)
'---            OfferData (Scope dependant)
'---
'--- Output:    The Calculated price
'---            byref parameter: Details (calculation details)
'---
'--- History:
'---    12-12-2017 Initial
'---    25-06-2017 Fix error in "After" calculation (loop was not terminatet after calculation)
'---    30-07-2018 Added support for Price Per x
'---    10-02-2019 Fix of SourceRef was not with when using Shipmentprice
'--------------------------------------------------------------------------------------------------------------
    '
    Dim ThePrice As Double
    Dim BaseAmount As Double
    Dim FollowAmount As Double
    Dim RoundedAmount As Double
    Dim BaseRefPrice As Double
    Dim BasePrice As Double
    Dim FollowPrice As Double
    Dim FollowPer As String
    Dim MathInfo As String
    Dim DoFollowCalc As Boolean
    Dim Precision As Long
    Dim LocalOfferData As OfferDataType
    Dim source As String
    Dim CalcDone As Boolean
    Dim Chunks As Long
    Dim Col As Long
    
    ThePrice = -1#
    
    'Get input data depending on the scope
    If Scope = SurchargeType.Normaltype Then
        LocalOfferData = OfferData
    ElseIf Scope = RoadType Then
        LocalOfferData = OfferRoadTaxData
    ElseIf Scope = SurchargeType.PreFreightType Then
        LocalOfferData = OfferPreData
    ElseIf Scope = SurchargeType.PostFreightType Then
        LocalOfferData = OfferPostData
    ElseIf Scope = SurchargeType.IntervalAtype Then
        LocalOfferData = OfferIntervalAData
    ElseIf Scope = SurchargeType.IntervalBtype Then
        LocalOfferData = OfferIntervalBData
    ElseIf Scope = SurchargeType.IntervalCtype Then
        LocalOfferData = OfferIntervalCData
    End If

    ' --- Unit price
    If LocalOfferData.Types(FoundIndex) = PriceType.Unitprice Then
        ThePrice = LocalOfferData.Price(FoundIndex) * FreightAmount
        If SourceFormat = "WithSheet" Then
            source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanSheetCell"), SourceSheet, ColLetter(FoundIndex + 4), CStr(SourceRow))
        Else
            source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(FoundIndex + 4), CStr(SourceRow))
        End If
        Details = source & Newline
        Details = Details & printf(cTxt("PriceCalc.UnitPrice"), Format(LocalOfferData.Price(FoundIndex), PriceFormat), FreightAmount, Format(ThePrice, PriceFormat)) & " " & CurrencyCode
    
    ' --- Shipment price
    ElseIf LocalOfferData.Types(FoundIndex) = PriceType.Shipmentprice Then
        ThePrice = LocalOfferData.Price(FoundIndex)
        If SourceFormat = "WithSheet" Then
            source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanSheetCell"), SourceSheet, ColLetter(FoundIndex + 4), CStr(SourceRow))
        Else
            source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(FoundIndex + 4), CStr(SourceRow))
        End If
        Details = source & Newline
        Details = Details & printf(cTxt("PriceCalc.IntervalPrice"), Format(LocalOfferData.Price(FoundIndex), PriceFormat)) & " " & CurrencyCode
    
    ' --- FTL price
    ElseIf LocalOfferData.Types(FoundIndex) = PriceType.FTL Then     ' Full Truck Load is Always Shipment price
        ThePrice = LocalOfferData.Price(FoundIndex)
        'Details = printf(cTxt("PriceCalc.FTLPriceUsed"), Format(ThePrice, PriceFormat)) ' Textinfo is generated under min/FTL check later
    
    ' --- Following price
    ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitFollowHalf Or _
           LocalOfferData.Types(FoundIndex) = PriceType.UnitFollowOne Or _
           LocalOfferData.Types(FoundIndex) = PriceType.UnitFollow5 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.UnitFollow10 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.UnitFollow25 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.UnitFollow20 Then
    
        ' To calculate a Following price we need the last 'normal' price first (Unit or Shipment)
        ' The is the the last 'normal' price + this columns Following Price
        ' Example: 35 kg package. interval 25-30kg cost 200,- and following kilo is 6,-.
        '          Price is then 200+(35-30)*6 = 200+5*6 = 230,-
        If FoundIndex > 0 Then
            For Col = FoundIndex - 1 To 0 Step -1
                DoFollowCalc = False
                CalcDone = False
                If LocalOfferData.Types(Col) = PriceType.Unitprice Or LocalOfferData.Types(Col) = PriceType.UnitpriceVolume Then
                    BaseAmount = LocalOfferData.PriceInterval(Col)           ' The example: The 30 kg
                    FollowAmount = FreightAmount - BaseAmount                ' The example: The 5 kg in difference
                    BaseRefPrice = LocalOfferData.Price(Col) * BaseAmount    ' The example: The 200,-
                    MathInfo = "(" & Format(LocalOfferData.Price(Col), PriceFormat) & " x " & BaseAmount & ")"
                    DoFollowCalc = True
                ElseIf LocalOfferData.Types(Col) = PriceType.Shipmentprice Or LocalOfferData.Types(Col) = PriceType.ShipmentpriceVolume Then
                    BaseAmount = LocalOfferData.PriceInterval(Col)           ' The example: The 30 kg
                    FollowAmount = FreightAmount - BaseAmount                ' The example: The 5 kg in difference
                    BaseRefPrice = LocalOfferData.Price(Col)                 ' The example: The 200,-
                    MathInfo = Format(LocalOfferData.Price(Col), PriceFormat)
                    DoFollowCalc = True
                End If
                If DoFollowCalc Then
                    If SourceFormat = "WithSheet" Then
                        source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanSheetCell"), SourceSheet, ColLetter(FoundIndex + 4), CStr(SourceRow))
                    Else
                        source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(FoundIndex + 4), CStr(SourceRow))
                    End If
                    ' One
                    If LocalOfferData.Types(FoundIndex) = PriceType.UnitFollowOne Then
                        RoundedAmount = Ceiling(FollowAmount)
                        FollowPrice = RoundedAmount * LocalOfferData.Price(FoundIndex)           ' The example: The ekstra 30,-
                        MathInfo = MathInfo & " + (" & Format(LocalOfferData.Price(FoundIndex), PriceFormat) & " x " & RoundedAmount & ")"
                        FollowPer = "1"
                    ' Half
                    ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitFollowHalf Then
                        RoundedAmount = Ceiling(FollowAmount * 2#)                          ' x 2 since price is for each |fffd| unit
                        FollowPrice = RoundedAmount * LocalOfferData.Price(FoundIndex)
                        MathInfo = MathInfo & " + (" & Format(LocalOfferData.Price(FoundIndex), PriceFormat) & " x " & RoundedAmount & ")"
                        FollowPer = "|fffd|"
                    ' 5
                    ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitFollow5 Then
                        RoundedAmount = Ceiling(FollowAmount / 5#)                          ' Divide by 5, round up to whole number to get number of 5kg chunks
                        FollowPrice = RoundedAmount * LocalOfferData.Price(FoundIndex)
                        MathInfo = MathInfo & " + (" & Format(LocalOfferData.Price(FoundIndex), PriceFormat) & " x " & RoundedAmount & ")"
                        FollowPer = "5"
                    ' 10
                    ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitFollow10 Then
                        RoundedAmount = Ceiling(FollowAmount / 10#)                         ' Divide by 10, round up to whole number to get number of 10kg chunks
                        FollowPrice = RoundedAmount * LocalOfferData.Price(FoundIndex)
                        MathInfo = MathInfo & " + (" & Format(LocalOfferData.Price(FoundIndex), PriceFormat) & " x " & RoundedAmount & ")"
                        FollowPer = "10"
                    ' 20
                    ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitFollow20 Then
                        RoundedAmount = Ceiling(FollowAmount / 20#)                         ' Divide by 20, round up to whole number to get number of 20kg chunks
                        FollowPrice = RoundedAmount * LocalOfferData.Price(FoundIndex)
                        MathInfo = MathInfo & " + (" & Format(LocalOfferData.Price(FoundIndex), PriceFormat) & " x " & RoundedAmount & ")"
                        FollowPer = "20"
                    ' 25
                    ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitFollow25 Then
                        RoundedAmount = Ceiling(FollowAmount / 25#)                         ' Divide by 25, round up to whole number to get number of 25kg chunks
                        FollowPrice = RoundedAmount * LocalOfferData.Price(FoundIndex)
                        MathInfo = MathInfo & " + (" & Format(LocalOfferData.Price(FoundIndex), PriceFormat) & " x " & RoundedAmount & ")"
                        FollowPer = "25"
                    End If
                    'Wrap up the info
                    ThePrice = BaseRefPrice + FollowPrice
                    Details = printf(cTxt("PriceCalc.FollowingPrice"), FollowPer) & Newline
                    Details = Details & source & Newline
                    Details = Details & MathInfo & " = " & Format(ThePrice, PriceFormat) & " " & CurrencyCode & Newline
                    CalcDone = True
                End If
                If CalcDone Then Exit For
            Next Col
        End If 'Foundindex > 0
        
        ' If the FollowingPrice is in first price column or no 'normal' price was found in the above then: The price is just calculated (after rounding)
        If FoundIndex = 0 Or BaseRefPrice = 0# Then
            If SourceFormat = "WithSheet" Then
                source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanSheetCell"), SourceSheet, ColLetter(FoundIndex + 4), CStr(SourceRow))
            Else
                source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(FoundIndex + 4), CStr(SourceRow))
            End If
            ' One
            If LocalOfferData.Types(FoundIndex) = PriceType.UnitFollowOne Then
                RoundedAmount = Ceiling(FreightAmount)
                FollowPrice = RoundedAmount * LocalOfferData.Price(FoundIndex)           ' The example: The ekstra 30,-
                FollowPer = "1"
            ' Half
            ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitFollowHalf Then
                RoundedAmount = Ceiling(FreightAmount * 2#)                          ' x 2 since price is for each |fffd| unit
                FollowPrice = RoundedAmount * LocalOfferData.Price(FoundIndex)
                FollowPer = "|fffd|"
            ' 5
            ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitFollow5 Then
                RoundedAmount = Ceiling(FreightAmount / 5#)                          ' Divide by 5, round up to whole number to get number of 5kg chunks
                FollowPrice = RoundedAmount * LocalOfferData.Price(FoundIndex)
                FollowPer = "5"
            ' 10
            ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitFollow10 Then
                RoundedAmount = Ceiling(FreightAmount / 10#)                         ' Divide by 10, round up to whole number to get number of 10kg chunks
                FollowPrice = RoundedAmount * LocalOfferData.Price(FoundIndex)
                FollowPer = "10"
            ' 20
            ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitFollow20 Then
                RoundedAmount = Ceiling(FreightAmount / 20#)                         ' Divide by 20, round up to whole number to get number of 20kg chunks
                FollowPrice = RoundedAmount * LocalOfferData.Price(FoundIndex)
                FollowPer = "20"
            ' 25
            ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitFollow25 Then
                RoundedAmount = Ceiling(FreightAmount / 25#)                         ' Divide by 25, round up to whole number to get number of 25kg chunks
                FollowPrice = RoundedAmount * LocalOfferData.Price(FoundIndex)
                FollowPer = "25"
            End If
            'Wrap up the info
            ThePrice = FollowPrice
            MathInfo = Format(LocalOfferData.Price(FoundIndex), PriceFormat) & " x " & RoundedAmount
            Details = printf(cTxt("PriceCalc.FollowingPrice"), FollowPer, source) & Newline
            Details = Details & source & Newline
            Details = Details & MathInfo & " = " & Format(ThePrice, PriceFormat) & " " & CurrencyCode
        End If 'FoundIndex = 0 Or BaseRefPrice = 0#
    
    ' --- Rounded price
    ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitsRounded1 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.UnitsRounded10 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.UnitsRounded100 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.UnitsRounded1000 Then

    
        If (LocalOfferData.Types(FoundIndex) = PriceType.UnitsRounded1) Then Precision = 1               ' Round UP to nearest 1's
        If (LocalOfferData.Types(FoundIndex) = PriceType.UnitsRounded10) Then Precision = 10             ' Round UP to nearest 10's
        If (LocalOfferData.Types(FoundIndex) = PriceType.UnitsRounded100) Then Precision = 100           ' Round UP to nearest 100's
        If (LocalOfferData.Types(FoundIndex) = PriceType.UnitsRounded1000) Then Precision = 1000         ' Round UP to nearest 1000's
        RoundedAmount = Ceiling(FreightAmount / Precision) * Precision
        ThePrice = RoundedAmount * LocalOfferData.Price(FoundIndex)
        'MathInfo = Format(LocalOfferData.Price(FoundIndex), PriceFormat) & " x " & RoundedAmount
        If SourceFormat = "WithSheet" Then
            source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanSheetCell"), SourceSheet, ColLetter(FoundIndex + 4), CStr(SourceRow))
        Else
            source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(FoundIndex + 4), CStr(SourceRow))
        End If
       
        'Gather info
        Details = printf(cTxt("PriceCalc.RoundingPrice"), Precision) & Newline
        Details = Details & printf(cTxt("PriceCalc.AmountRounded"), FreightAmount, RoundedAmount) & Newline
        Details = Details & source & Newline
        'Details = Details & newline & MathInfo & " = " & Format(ThePrice, PriceFormat)
        Details = Details & printf(cTxt("PriceCalc.UnitPrice"), Format(LocalOfferData.Price(FoundIndex), PriceFormat), RoundedAmount, Format(ThePrice, PriceFormat)) & " " & CurrencyCode
    
    ' --- Price per
    ElseIf LocalOfferData.Types(FoundIndex) = PriceType.PricePer5 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.PricePer10 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.PricePer20 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.PricePer25 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.PricePer50 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.PricePer100 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.PricePer250 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.PricePer500 Or _
           LocalOfferData.Types(FoundIndex) = PriceType.PricePer1000 Then

    
        If (LocalOfferData.Types(FoundIndex) = PriceType.PricePer5) Then Precision = 5               ' Round UP to nearest 5's
        If (LocalOfferData.Types(FoundIndex) = PriceType.PricePer10) Then Precision = 10             ' Round UP to nearest 10's
        If (LocalOfferData.Types(FoundIndex) = PriceType.PricePer20) Then Precision = 20             ' Round UP to nearest 20's
        If (LocalOfferData.Types(FoundIndex) = PriceType.PricePer25) Then Precision = 25             ' Round UP to nearest 25's
        If (LocalOfferData.Types(FoundIndex) = PriceType.PricePer50) Then Precision = 50             ' Round UP to nearest 50's
        If (LocalOfferData.Types(FoundIndex) = PriceType.PricePer100) Then Precision = 100           ' Round UP to nearest 100's
        If (LocalOfferData.Types(FoundIndex) = PriceType.PricePer250) Then Precision = 250           ' Round UP to nearest 250's
        If (LocalOfferData.Types(FoundIndex) = PriceType.PricePer500) Then Precision = 500           ' Round UP to nearest 500's
        If (LocalOfferData.Types(FoundIndex) = PriceType.PricePer1000) Then Precision = 1000         ' Round UP to nearest 1000's
        RoundedAmount = Ceiling(FreightAmount / Precision) * Precision
        Chunks = CInt(RoundedAmount / Precision)
        ThePrice = Chunks * LocalOfferData.Price(FoundIndex)
        If SourceFormat = "WithSheet" Then
            source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanSheetCell"), SourceSheet, ColLetter(FoundIndex + 4), CStr(SourceRow))
        Else
            source = cTxt("PriceCalc.Source") & printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(FoundIndex + 4), CStr(SourceRow))
        End If
       
        'Gather info
        Details = printf(cTxt("PriceCalc.PricePer"), Precision) & Newline
        Details = Details & source & Newline
        Details = Details & printf(cTxt("PriceCalc.PricePerCalc"), FreightAmount, Precision, Chunks, Format(LocalOfferData.Price(FoundIndex), PriceFormat), Format(ThePrice, PriceFormat)) & " " & CurrencyCode & Newline
        'Details = Details & printf(cTxt("PriceCalc.UnitPrice"), Format(LocalOfferData.Price(FoundIndex), PriceFormat), RoundedAmount, Format(ThePrice, PriceFormat)) & " " & CurrencyCode
    
    ' --- Volume price
    ElseIf LocalOfferData.Types(FoundIndex) = PriceType.UnitpriceVolume Then         ' Only used in Interval surcharge and is here the same as effective, since we are always getting the amount in "fragtpligtig" units
        ThePrice = LocalOfferData.Price(FoundIndex) * FreightAmount
        Details = printf(cTxt("PriceCalc.UnitPrice"), ColLetter(FoundIndex + 4), Format(OfferData.Price(FoundIndex), PriceFormat), FreightAmount, Format(ThePrice, PriceFormat)) & " " & CurrencyCode
    
    ElseIf LocalOfferData.Types(FoundIndex) = PriceType.ShipmentpriceVolume Then     ' Only used in Interval surcharge and is here the same as effective, since we are always getting the amount in "fragtpligtig" units
        ThePrice = LocalOfferData.Price(FoundIndex)
        Details = printf(cTxt("PriceCalc.IntervalPrice"), ColLetter(FoundIndex + 4), Format(OfferData.Price(FoundIndex), PriceFormat)) & " " & CurrencyCode

    End If
    
    CalculatePrice = ThePrice
End Function

Public Function CalcFreightAmount(Scope As SurchargeType, ByRef Message As String) As Double
'--------------------------------------------------------------------------------------------------------------
'--- Convert the invoice unit to the offer unit
'---
'--- Input:     Scope        Wich input / output is used
'---            InvoiceInfo
'---            InvoiceData
'---            OfferData   (Scope dependant)
'---
'--- Output:    The convertet (Chargeable) value. If convertion is not possible the -1 is returned
'---            ByRef parameter: Message    Simple message for the price column
'---            ResultData (Scope dependant)
'--- History:
'---    12-12-2017 Initial
'---    01-07-2018 Fix of effective unit, not set to korrekt units, if vol not was in offer units.
'---    15-08-2018 Fix Also use Quanty data as effective values if needed.
'---    20-09-2019 Added Pre-/Post support for own settings
'--------------------------------------------------------------------------------------------------------------
    Dim OfferDataUnits As Long          'The units the Offer is in
    Dim FreightAmount As Double         'Temporay calculated amount
    Dim OfferDataConversionFactorLDM As Double
    Dim OfferDataConversionFactorM3 As Double
    Dim ResultDataAmountVol As Double
    Dim ResultDataAmountEff As Double
    Dim ResultDataConvertColor As Long
    Dim EffKGAvailable As Boolean
    Dim EffM3Available As Boolean
    Dim EffLDMAvailable As Boolean
    Dim QuantityAvailable As Boolean
    Dim QuantityUnits As Long           'The units the Quantity dropdown has
    'Dim InvoiceQuantityAmount As Double 'The Amount from the invoice Column (Scope depentant)
    Dim EffectiveAmount(4) As Double    'The Effective amount that evtl. must be converted
    Dim Available(4) As Boolean
    Dim FromKG As Double
    Dim FromLDM As Double
    Dim FromM3 As Double
    Dim FromKGDetails As String
    Dim FromLDMDetails As String
    Dim FromM3Details As String
    Dim ConvInfo As String              'The details for the Convertion Column
    Dim UnitName(4) As String           '1=KG, 2=m3, 3=LDM, 4=EA
    Dim ErrorMessage As String
    Dim NA As Long
    Dim KG As Long
    Dim M3 As Long
    Dim LDM As Long
    Dim EA As Long
    Dim Format1Decimal As String
    Dim Format3Decimal As String
    Dim Fr8CalcChargeable As Double
    Dim EffSourceUnits As Long  'The source units from where the effective units are from (kg, ldm, m3 , ea)
    Dim VolSourceUnits As Long  'The source units from where the Volume units are from (kg, ldm, m3 , ea)
    Dim NoConvertionFactorsAvailable As Boolean 'True if they are not available
    
    
    'Units is: 1=kg, 2=m3, 3=ldm, 4=pieces
    
    ' Has:            Needed            Formular:
    '----------------------------------------------------------------------------------
    ' KG              LDM               A      LDM = KG input / LDM Factor
    ' KG              M3                B      M3  = KG input / M3 Factor
    ' LDM             KG                C      KG  = LDM input * LDM Factor
    ' LDM             M3                D      M3  = LDM input * LDM Factor / M3 Factor
    ' M3              KG                E      KG  = M3 input * M3 Factor
    ' M3              LDM               F      LDM = M3 input * M3 Factor / LDM Factor
    
    ResultDataAmountEff = InvoiceData.Quantity
    ResultDataAmountVol = InvoiceData.Quantity

    'Get info from offer source (Since userDefinedType cant be passed af parameter (Is not true, only arrays cant be passed)).
    If Scope = Normaltype Then
        OfferDataUnits = OfferData.Units(0)
        OfferDataConversionFactorLDM = OfferData.ConversionFactorLDM
        OfferDataConversionFactorM3 = OfferData.ConversionFactorM3
    ElseIf Scope = RoadType Then
        OfferDataUnits = OfferRoadTaxData.Units(0)
        OfferDataConversionFactorLDM = OfferRoadTaxData.ConversionFactorLDM
        OfferDataConversionFactorM3 = OfferRoadTaxData.ConversionFactorM3
    ElseIf Scope = PreFreightType Then
        OfferDataUnits = OfferPreData.Units(0)
        OfferDataConversionFactorLDM = OfferPreData.ConversionFactorLDM
        OfferDataConversionFactorM3 = OfferPreData.ConversionFactorM3
    ElseIf Scope = PostFreightType Then
        OfferDataUnits = OfferPostData.Units(0)
        OfferDataConversionFactorLDM = OfferPostData.ConversionFactorLDM
        OfferDataConversionFactorM3 = OfferPostData.ConversionFactorM3
    End If
    
    NA = 0
    KG = 1
    M3 = 2
    LDM = 3
    EA = 4
    UnitName(NA) = cTxt("Unit.NA")
    UnitName(KG) = cTxt("Unit.KG")
    UnitName(M3) = cTxt("Unit.M3")
    UnitName(LDM) = cTxt("Unit.LDM")
    UnitName(EA) = cTxt("Unit.EA")
    
    FromKG = 0#
    FromLDM = 0#
    FromM3 = 0#
    FromKGDetails = ""
    FromLDMDetails = ""
    FromM3Details = ""
    ConvInfo = ""
    ErrorMessage = ""
    Format1Decimal = "#,##0.0"
    Format3Decimal = "#,##0.000"
    NoConvertionFactorsAvailable = False

    Dim EffKGColumn As Long     'Column numbers from the dropdown
    Dim EffM3Column As Long
    Dim EffLDMColumn As Long
    Dim QuantityColumn As Long
    
    'Gather invoice info
    EffectiveAmount(UnitType.KG) = InvoiceData.EffKG
    EffectiveAmount(UnitType.M3) = InvoiceData.EffM3
    EffectiveAmount(UnitType.LDM) = InvoiceData.EffLDM
    
    'Get the columns settings
    If Scope = Normaltype Or Scope = RoadType Or _
    (Scope = PreFreightType And InvoicePreSettingsmode = UseMain) Or _
    (Scope = PostFreightType And InvoicePostSettingsmode = UseMain) Then
        EffKGColumn = InvoiceInfo.EffKGColumn
        EffM3Column = InvoiceInfo.EffM3Column
        EffLDMColumn = InvoiceInfo.EffLDMColumn
        QuantityColumn = InvoiceInfo.QuantityColumn
        QuantityUnits = InvoiceInfo.Units
    ElseIf Scope = PreFreightType Then
        EffKGColumn = InvoicePreSettings.EffKGColumn
        EffM3Column = InvoicePreSettings.EffM3Column
        EffLDMColumn = InvoicePreSettings.EffLDMColumn
        QuantityColumn = InvoicePreSettings.QuantityColumn
        QuantityUnits = InvoicePreSettings.Units
    ElseIf Scope = PostFreightType Then
        EffKGColumn = InvoicePostSettings.EffKGColumn
        EffM3Column = InvoicePostSettings.EffM3Column
        EffLDMColumn = InvoicePostSettings.EffLDMColumn
        QuantityColumn = InvoicePostSettings.QuantityColumn
        QuantityUnits = InvoicePostSettings.Units
    End If
    
    If EffKGColumn > 0 And EffectiveAmount(UnitType.KG) > 0# Then EffKGAvailable = True
    If EffM3Column > 0 And EffectiveAmount(UnitType.M3) > 0# Then EffM3Available = True
    If EffLDMColumn > 0 And EffectiveAmount(UnitType.LDM) > 0# Then EffLDMAvailable = True
    If QuantityColumn > 0 And InvoiceData.Quantity > 0# Then QuantityAvailable = True

    
    Available(UnitType.KG) = EffKGAvailable
    Available(UnitType.M3) = EffM3Available
    Available(UnitType.LDM) = EffLDMAvailable
    
    'First check if any input are available
    If Not (EffKGAvailable Or EffM3Available Or EffLDMAvailable Or QuantityAvailable) Then
        ResultDataAmountVol = -1
        ErrorMessage = cTxt("No.Freight.Inputs.Found")
    Else
    
        'Info about unit names
        ConvInfo = ConvInfo & printf(cTxt("Offer.Units.Are"), UnitName(OfferDataUnits)) & Newline
        If QuantityColumn > 0 Then   'Only show if the dropdown is refering to a column
            ConvInfo = ConvInfo & printf(cTxt("Invoice.Units.Are"), UnitName(QuantityUnits)) & Newline
        End If
        ConvInfo = ConvInfo & Newline
        
        'Info about Invoice units available
        If EffKGAvailable Then
            ConvInfo = ConvInfo & printf(cTxt("Effective.Amount.Is"), UnitName(KG), Format(EffectiveAmount(UnitType.KG), Format1Decimal)) & Newline
        End If
        If EffM3Available Then
            ConvInfo = ConvInfo & printf(cTxt("Effective.Amount.Is"), UnitName(M3), Format(EffectiveAmount(UnitType.M3), Format3Decimal)) & Newline
        End If
        If EffLDMAvailable Then
            ConvInfo = ConvInfo & printf(cTxt("Effective.Amount.Is"), UnitName(LDM), Format(EffectiveAmount(UnitType.LDM), Format3Decimal)) & Newline
        End If
        If QuantityAvailable Then
            If OfferDataUnits = M3 Or OfferDataUnits = LDM Then
                ConvInfo = ConvInfo & printf(cTxt("Chargeable.Amount.Is"), UnitName(QuantityUnits), Format(InvoiceData.Quantity, Format3Decimal)) & Newline
            Else
                ConvInfo = ConvInfo & printf(cTxt("Chargeable.Amount.Is"), UnitName(QuantityUnits), Format(InvoiceData.Quantity, Format1Decimal)) & Newline
            End If
        End If
        ConvInfo = ConvInfo & Newline

    
        'First handle Pieces (EA) since they can not be converted
        If OfferDataUnits = UnitType.EA Then
            If QuantityUnits = UnitType.EA And QuantityAvailable Then
                ResultDataAmountEff = InvoiceData.Quantity
                ResultDataAmountVol = InvoiceData.Quantity
                ConvInfo = ConvInfo & printf(cTxt("Freight.Amount.For.Calculation.Is"), ResultDataAmountVol, UnitName(OfferDataUnits)) & Newline
            Else
                ResultDataAmountVol = -1
                ErrorMessage = printf(cTxt("Conv.Not.Possible.Pieces"), UnitName(QuantityUnits))
                ConvInfo = ConvInfo & Message
            End If
        
        Else    'Not pieces:
                
            ' --- KG needed
            If OfferDataUnits = UnitType.KG Then
                'Native
                If QuantityUnits = UnitType.KG And QuantityAvailable Then   'If chargeable amount available then take this
                    FromKG = InvoiceData.Quantity
                ElseIf EffKGAvailable Then                                      'else take the effective if available
                    FromKG = EffectiveAmount(UnitType.KG)
                    ResultDataAmountEff = FromKG
                    EffSourceUnits = UnitType.KG
                    Fr8CalcChargeable = FromKG
                ElseIf QuantityUnits = UnitType.M3 Then         'See if the Quantity dropdown unit are not KG, so we can use that
                    EffM3Available = True
                    EffectiveAmount(QuantityUnits) = InvoiceData.Quantity
                    EffSourceUnits = QuantityUnits
                ElseIf QuantityUnits = UnitType.LDM Then        'See if the Quantity dropdown unit are not KG, so we can use that
                    EffLDMAvailable = True
                    EffectiveAmount(QuantityUnits) = InvoiceData.Quantity
                    EffSourceUnits = QuantityUnits
                End If
                If QuantityUnits = UnitType.KG And QuantityAvailable And EffKGAvailable Then    'If both are available the take the biggest one
                    If EffectiveAmount(UnitType.KG) > InvoiceData.Quantity Then
                        FromKG = EffectiveAmount(UnitType.KG)
                    End If
                End If
                'LDM convertions
                If EffLDMAvailable Then
                    If OfferDataConversionFactorLDM > 0# Then
                        FromLDM = EffectiveAmount(UnitType.LDM) * OfferDataConversionFactorLDM       'C: KG  = LDM input * LDM Factor
                        FromLDMDetails = printf(cTxt("Convert.x"), UnitName(LDM), Format(EffectiveAmount(UnitType.LDM), Format3Decimal), OfferDataConversionFactorLDM, Format(FromLDM, Format1Decimal), UnitName(KG))
                        EffSourceUnits = UnitType.LDM
                        Fr8CalcChargeable = FromLDM
                    Else
                        FromLDM = -1#
                        FromLDMDetails = printf(cTxt("Conv.Not.Possible.1.Needed"), UnitName(LDM), UnitName(KG))
                    End If
                End If
                'M3 convertions
                If EffM3Available Then
                    If OfferDataConversionFactorM3 > 0# Then
                        FromM3 = Round(EffectiveAmount(UnitType.M3) * OfferDataConversionFactorM3, 4)          'E: KG  = M3 input * M3 Factor
                        FromM3Details = printf(cTxt("Convert.x"), UnitName(M3), Format(EffectiveAmount(UnitType.M3), Format3Decimal), OfferDataConversionFactorM3, Format(FromM3, Format1Decimal), UnitName(KG))
                        EffSourceUnits = UnitType.M3
                        Fr8CalcChargeable = FromM3
                    Else
                        FromM3 = -1#
                        FromM3Details = printf(cTxt("Conv.Not.Possible.1.Needed"), UnitName(M3), UnitName(KG))
                    End If
                End If
                If FromLDM <= 0# And FromM3 <= 0# Then
                    NoConvertionFactorsAvailable = True
                End If
                
            ' --- M3 needed
            ElseIf OfferDataUnits = UnitType.M3 Then
                'Native
                If QuantityUnits = UnitType.M3 And QuantityAvailable Then   'If chargeable amount available then take this
                    FromM3 = InvoiceData.Quantity
                ElseIf EffM3Available Then                                      'else take the effective if available
                    FromM3 = EffectiveAmount(UnitType.M3)
                    ResultDataAmountEff = FromM3
                    EffSourceUnits = UnitType.M3
                    Fr8CalcChargeable = FromM3
                ElseIf QuantityUnits = UnitType.KG Then         'See if the Quantity dropdown unit are not m3, so we can use that
                    EffKGAvailable = True
                    EffectiveAmount(QuantityUnits) = InvoiceData.Quantity
                    EffSourceUnits = QuantityUnits
                ElseIf QuantityUnits = UnitType.LDM Then        'See if the Quantity dropdown unit are not m3, so we can use that
                    EffLDMAvailable = True
                    EffectiveAmount(QuantityUnits) = InvoiceData.Quantity
                    EffSourceUnits = QuantityUnits
                End If
                If QuantityUnits = UnitType.M3 And QuantityAvailable And EffM3Available Then    'If both are available the take the biggest one
                    If EffectiveAmount(UnitType.M3) > InvoiceData.Quantity Then
                        FromM3 = EffectiveAmount(UnitType.M3)
                        Fr8CalcChargeable = FromM3
                    End If
                End If

                'LDM convertions
                If EffLDMAvailable Then
                    If OfferDataConversionFactorM3 > 0# And OfferDataConversionFactorLDM > 0# Then
                        FromLDM = EffectiveAmount(UnitType.LDM) * OfferDataConversionFactorLDM / OfferDataConversionFactorM3    'D: M3  = LDM input * LDM Factor / M3 Factor
                        FromLDMDetails = printf(cTxt("Convert.x/"), UnitName(LDM), Format(EffectiveAmount(UnitType.LDM), Format3Decimal), OfferDataConversionFactorLDM, OfferDataConversionFactorM3, Format(FromLDM, Format3Decimal), UnitName(M3))
                        EffSourceUnits = UnitType.LDM
                        Fr8CalcChargeable = FromLDM
                    Else
                        FromLDM = -1#
                        FromLDMDetails = printf(cTxt("Conv.Not.Possible.2.Needed"), UnitName(LDM), UnitName(M3))
                    End If
                End If
                'KG convertions
                If EffKGAvailable Then
                    If OfferDataConversionFactorM3 > 0# Then
                        FromKG = EffectiveAmount(UnitType.KG) / OfferDataConversionFactorM3         'B: M3  = KG input / M3 Factor
                        FromKGDetails = printf(cTxt("Convert./"), UnitName(KG), Format(EffectiveAmount(UnitType.KG), Format1Decimal), OfferDataConversionFactorM3, Format(FromKG, Format3Decimal), UnitName(M3))
                        EffSourceUnits = UnitType.KG
                        Fr8CalcChargeable = FromKG
                    Else
                        FromKG = -1#
                        FromKGDetails = printf(cTxt("Conv.Not.Possible.1.Needed"), UnitName(KG), UnitName(M3))
                    End If
                End If
                If FromLDM <= 0# And FromKG <= 0# Then
                    NoConvertionFactorsAvailable = True
                End If

                
            ' --- LDM needed
            ElseIf OfferDataUnits = UnitType.LDM Then
                'Native
                If QuantityUnits = UnitType.LDM And QuantityAvailable Then   'If chargeable amount available then take this
                    FromLDM = InvoiceData.Quantity
                ElseIf EffLDMAvailable Then                                      'else take the effective if available
                    FromLDM = EffectiveAmount(UnitType.LDM)
                    ResultDataAmountEff = FromLDM
                    EffSourceUnits = UnitType.LDM
                    Fr8CalcChargeable = FromLDM
                ElseIf QuantityUnits = UnitType.M3 Then         'See if the Quantity dropdown unit are not LDM, so we can use that
                    EffM3Available = True
                    EffectiveAmount(QuantityUnits) = InvoiceData.Quantity
                    EffSourceUnits = QuantityUnits
                ElseIf QuantityUnits = UnitType.KG Then        'See if the Quantity dropdown unit are not LDM, so we can use that
                    EffKGAvailable = True
                    EffectiveAmount(QuantityUnits) = InvoiceData.Quantity
                    EffSourceUnits = QuantityUnits
                End If
                If QuantityUnits = UnitType.LDM And QuantityAvailable And EffLDMAvailable Then    'If both are available the take the biggest one
                    If EffectiveAmount(UnitType.LDM) > InvoiceData.Quantity Then
                        FromLDM = EffectiveAmount(UnitType.LDM)
                        Fr8CalcChargeable = FromLDM
                    End If
                End If
                'M3 convertions
                If EffM3Available Then
                    If OfferDataConversionFactorM3 > 0# And OfferDataConversionFactorLDM > 0# Then
                        FromM3 = EffectiveAmount(UnitType.M3) * OfferDataConversionFactorM3 / OfferDataConversionFactorLDM    'F: LDM = M3 input * M3 Factor / LDM Factor
                        FromM3Details = printf(cTxt("Convert.x/"), UnitName(M3), Format(EffectiveAmount(UnitType.M3), Format3Decimal), OfferDataConversionFactorM3, OfferDataConversionFactorLDM, Format(FromM3, Format3Decimal), UnitName(LDM))
                        EffSourceUnits = UnitType.M3
                        Fr8CalcChargeable = FromM3
                    Else
                        FromM3 = -1#
                        FromM3Details = printf(cTxt("Conv.Not.Possible.2.Needed"), UnitName(M3), UnitName(LDM))
                    End If
                End If
                'KG convertions
                If EffKGAvailable Then
                    If OfferDataConversionFactorM3 > 0# Then
                        FromKG = EffectiveAmount(UnitType.KG) / OfferDataConversionFactorLDM          'A: LDM = KG input / LDM Factor
                        FromKGDetails = printf(cTxt("Convert./"), UnitName(KG), Format(EffectiveAmount(UnitType.KG), Format3Decimal), OfferDataConversionFactorLDM, Format(FromKG, Format3Decimal), UnitName(LDM))
                        EffSourceUnits = UnitType.KG
                        Fr8CalcChargeable = FromKG
                    Else
                        FromKG = -1#
                        FromKGDetails = printf(cTxt("Conv.Not.Possible.1.Needed"), UnitName(KG), UnitName(LDM))
                    End If
                End If
                If FromM3 <= 0# And FromKG <= 0# Then
                    NoConvertionFactorsAvailable = True
                End If

            End If
            
            'Add info if created
            If FromKGDetails <> "" Then ConvInfo = ConvInfo & FromKGDetails & Newline
            If FromM3Details <> "" Then ConvInfo = ConvInfo & FromM3Details & Newline
            If FromLDMDetails <> "" Then ConvInfo = ConvInfo & FromLDMDetails & Newline
            If Not (FromKGDetails = "" And FromM3Details = "" And FromLDMDetails = "") Then
                ConvInfo = ConvInfo & Newline   'only add newline if there was convertion information added
            End If
            
            'Find the chargeable amount
            If FromKG > 0# Or FromLDM > 0# Or FromM3 > 0# Then
                If FromM3 > FromLDM Then
                    If FromM3 > FromKG Then
                        ResultDataAmountVol = FromM3
                        VolSourceUnits = UnitType.M3
                    Else
                        ResultDataAmountVol = FromKG
                        VolSourceUnits = UnitType.KG
                    End If
                Else
                    If FromLDM > FromKG Then
                        ResultDataAmountVol = FromLDM
                        VolSourceUnits = UnitType.LDM
                    Else
                        ResultDataAmountVol = FromKG
                        VolSourceUnits = UnitType.KG
                    End If
                End If
            Else
                ResultDataAmountVol = -1
                If NoConvertionFactorsAvailable = True Then
                    ErrorMessage = cTxt("No.Convertion.Factors.Available")
                Else
                    ErrorMessage = cTxt("Not.possible.to.find.a.chargeable.amount")
                End If
            End If
        End If 'EA
    End If ' Available inputs
        
    If ResultDataAmountVol >= 0# Then
        'Add Chargeable info
        If OfferDataUnits = M3 Or OfferDataUnits = LDM Then
            Message = printf(cTxt("Chargeable.Amount.For.Calculation.Is"), Format(ResultDataAmountVol, Format3Decimal), UnitName(OfferDataUnits))
        Else
            Message = printf(cTxt("Chargeable.Amount.For.Calculation.Is"), Format(ResultDataAmountVol, Format1Decimal), UnitName(OfferDataUnits))
        End If
        ConvInfo = ConvInfo & Message & Newline
        If ResultDataAmountEff = 0# Or (EffSourceUnits <> OfferDataUnits) Then
            ResultDataAmountEff = ResultDataAmountVol
        End If
    Else
        Message = ErrorMessage
        ConvInfo = ConvInfo & Message
    End If
    
    'See if the result must be colored (Red: To high Chargeable, Green: To Low chargeable)
    'Color of the cell in the convertion column. 0: No color, -1:Green,  +1:Red.
    If InvoiceData.Quantity > 0# And Fr8CalcChargeable > 0# Then
        If InvoiceData.Quantity = Fr8CalcChargeable Then
            ResultDataConvertColor = 0
        ElseIf InvoiceData.Quantity > Fr8CalcChargeable Then
            ResultDataConvertColor = 1
        Else
            ResultDataConvertColor = -1
        End If
    Else
        ResultDataConvertColor = 0
    End If
    
    
    'Store data (Scope dependant)
    If Scope = Normaltype Then
        ResultData.AmountVol = ResultDataAmountVol
        ResultData.AmountEff = ResultDataAmountEff
        ResultData.ErrorMessage = ErrorMessage
        ResultData.ConvertionDetails = ConvInfo
        ResultData.ConvertColor = ResultDataConvertColor
    ElseIf Scope = RoadType Then
        ResultRoadTaxData.AmountVol = ResultDataAmountVol
        ResultRoadTaxData.AmountEff = ResultDataAmountEff
        ResultRoadTaxData.ErrorMessage = ErrorMessage
        ResultRoadTaxData.ConvertionDetails = ConvInfo
        ResultRoadTaxData.ConvertColor = ResultDataConvertColor
    ElseIf Scope = PreFreightType Then
        ResultPreData.AmountVol = ResultDataAmountVol
        ResultPreData.AmountEff = ResultDataAmountEff
        ResultPreData.ErrorMessage = ErrorMessage
        ResultPreData.ConvertionDetails = ConvInfo
        ResultPreData.ConvertColor = ResultDataConvertColor
    ElseIf Scope = PostFreightType Then
        ResultPostData.AmountVol = ResultDataAmountVol
        ResultPostData.AmountEff = ResultDataAmountEff
        ResultPostData.ErrorMessage = ErrorMessage
        ResultPostData.ConvertionDetails = ConvInfo
        ResultPostData.ConvertColor = ResultDataConvertColor
    End If
    
    CalcFreightAmount = ResultDataAmountVol
End Function


Private Sub SaveResultToOutput()
'--------------------------------------------------------------------------------------------------------------
'--- Stores the wanted DATA to the requested place
'---
'--- Input:     ResultData
'---
'--- Output:    OutputInfo
'---
'--- History:
'---    12-12-2017 Initial
'---    19-06-2018 Surcharge offset fix. (0) is the baseprice.
'--------------------------------------------------------------------------------------------------------------
    
    Dim RowData(cMAXDATACOLUMNS) As Variant
    Dim ShowCellDetails As Boolean
    Dim rw As Long
    Dim Col As Long  'Column index
    Dim ErrorState As Boolean
    Dim i As Long
    Dim Start As Long
    Dim TempDetails As String
    
    If DebugMode Then Call SaveDebugInfo("SaveResultToOutput()", "Start")
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " Start of SaveResultToOutput"
    
    ErrorState = False
    
    ShowCellDetails = False
    If OutputInfo.ShowDetailsAsCellComments And (OutputInfo.CommentRowCounter < OutputInfo.MaxRowsWithComments) Then
        ShowCellDetails = True
        OutputInfo.CommentRowCounter = OutputInfo.CommentRowCounter + 1
    End If
    
    rw = OutputInfo.DataRow
    Col = 1
    
    'Remove evt. newlines in the begining of the details
    ResultData.NormalCalcDetails = RemoveFirstNewline(ResultData.NormalCalcDetails)
    ResultData.AdvCalcDetails = RemoveFirstNewline(ResultData.AdvCalcDetails)
    ResultData.SelectedCalcDetails = RemoveFirstNewline(ResultData.SelectedCalcDetails)
    ResultData.ErrorMessage = RemoveFirstNewline(ResultData.ErrorMessage)
    
    'Set not calc to 0
    If ResultData.NormalPrice < 0# Then
        ResultData.NormalPrice = 0#
        ResultData.AdvantagePrice = 0#
        ResultData.SelectedBasePrice = 0#
        ResultData.SelectedAllInPrice = 0#
        ResultData.PriceDiffInUnits = 0#
        ResultData.PriceDiffInPercent = 0#
    End If
    'Gather row data
    If Not OutputInfo.IsInvoiceListSheet Then
        RowData(OutputInfo.InvoiceFromIndex) = ResultData.InvoiceFrom
        Col = Col + 1
        RowData(OutputInfo.InvoiceToIndex) = ResultData.InvoiceTo
        Col = Col + 1
        If OutputInfo.InvoiceEffKGIndex > 0 Then
            If ResultData.InvoiceEffKG = 0# Then
                RowData(OutputInfo.InvoiceEffKGIndex) = Empty
            Else
                RowData(OutputInfo.InvoiceEffKGIndex) = ResultData.InvoiceEffKG
            End If
            Col = Col + 1
        End If
        If OutputInfo.InvoiceEffM3Index > 0 Then
            If ResultData.InvoiceEffM3 = 0# Then
                RowData(OutputInfo.InvoiceEffM3Index) = Empty
            Else
                RowData(OutputInfo.InvoiceEffM3Index) = ResultData.InvoiceEffM3
            End If
            Col = Col + 1
        End If
        If OutputInfo.InvoiceEffLDMIndex > 0 Then
            If ResultData.InvoiceEffLDM = 0# Then
                RowData(OutputInfo.InvoiceEffLDMIndex) = Empty
            Else
                RowData(OutputInfo.InvoiceEffLDMIndex) = ResultData.InvoiceEffLDM
            End If
            Col = Col + 1
        End If
        If OutputInfo.InvoiceQuantityIndex > 0 Then
            If ResultData.InvoiceQuantity = 0# Then
                RowData(OutputInfo.InvoiceQuantityIndex) = Empty
            Else
                RowData(OutputInfo.InvoiceQuantityIndex) = ResultData.InvoiceQuantity
            End If
            Col = Col + 1
        End If
        RowData(OutputInfo.InvoicePriceIndex) = ResultData.InvoicePrice
        Col = Col + 1
    End If
    
    'Errorcheck
    If ResultData.ErrorMessage <> "" Then
        ErrorState = True
    End If
    
    'Selected price
    If ErrorState Then
        RowData(OutputInfo.SelectedPriceIndex) = ResultData.ErrorMessage
        With Worksheets(OutputInfo.Sheetname).Cells(rw, OutputInfo.ColumnOffset + Col - 1)  'If error then change the number format of the cell to Textformat
            .HorizontalAlignment = xlLeft
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "@"
        End With
    Else
        RowData(OutputInfo.SelectedPriceIndex) = ResultData.SelectedAllInPrice
        If (ShowCellDetails) Then
            With Worksheets(OutputInfo.Sheetname).Cells(rw, OutputInfo.ColumnOffset + Col - 1)
                If Not (.Comment Is Nothing) Then
                    .Comment.Delete
                End If
                If ResultData.SelectedCalcDetails <> "" Then
                    .AddComment Replace(ResultData.SelectedCalcDetails, Newline, vbNewLine, , , vbTextCompare)
                    .Comment.Visible = False
                    .Comment.Shape.TextFrame.AutoMargins = False
                    .Comment.Shape.TextFrame.AutoSize = True
                    .Comment.Shape.TextFrame.MarginLeft = cMarginsLeftRight
                    .Comment.Shape.TextFrame.MarginRight = cMarginsLeftRight
                    .Comment.Shape.TextFrame.MarginTop = cMarginsTopBottom
                    .Comment.Shape.TextFrame.MarginBottom = cMarginsTopBottom
'                    .Comment.Shape.TextFrame.Characters.Font.Name = cFontName
'                    .Comment.Shape.TextFrame.Characters.Font.Size = cFontSize
'                    .Comment.Shape.TextFrame.Characters.Font.ColorIndex = cFontColorIndex
'                    .Comment.Shape.Fill.Solid
'                    .Comment.Shape.Fill.ForeColor.SchemeColor = cBackColorIndex
                End If
            End With
        End If
    End If
    Col = Col + 1
    
    If Not ErrorState Then  'Only show other info if the selected price is not in errorstate
        'Price diff
        If OutputInfo.ShowColumnWithPriceDiffInUnits Then
            If ErrorState Then
                RowData(OutputInfo.PriceDiffInUnitsIndex) = Empty
            Else
                RowData(OutputInfo.PriceDiffInUnitsIndex) = ResultData.PriceDiffInUnits
            End If
            Col = Col + 1
        End If
        
        'Percent diff
        If OutputInfo.ShowColumnWithPriceDiffInPercent Then
            If ErrorState Then
                RowData(OutputInfo.PriceDiffInPercentIndex) = Empty
            Else
                RowData(OutputInfo.PriceDiffInPercentIndex) = ResultData.PriceDiffInPercent
            End If
            Col = Col + 1
        End If
        
        'Calc mode
        If OutputInfo.ShowColumnWithCalcMode Then
            If ErrorState Then
                RowData(OutputInfo.CalcModeIndex) = Empty
            Else
                RowData(OutputInfo.CalcModeIndex) = ResultData.CalcModeUsed
            End If
            Col = Col + 1
        End If
    
        'Freight price (Seleceted price without surcharges)
        Start = Len(cTxt("PriceCalc.FreightInfoHeadline") & Newline) + 1
        If Len(ResultData.FreightPriceDetails) > Start Then
            TempDetails = Replace$(ResultData.FreightPriceDetails, cTxt("PriceCalc.FreightInfoHeadline") & Newline, "", , vbTextCompare) 'Remove the line (eg: Norm calc / Advantage calc)
        Else
            TempDetails = ResultData.FreightPriceDetails
        End If
        TempDetails = RemoveFirstNewline(TempDetails)   'Remove evt. newlines in the begining of the details
        If OutputInfo.ShowColumnWithFreightCalc Then
            If ErrorState Then
                RowData(OutputInfo.FreightCalcIndex) = Empty
            Else
                RowData(OutputInfo.FreightCalcIndex) = ResultData.FreightPrice
                If (ShowCellDetails) Then
                    With Worksheets(OutputInfo.Sheetname).Cells(rw, OutputInfo.ColumnOffset + Col - 1)
                        If Not (.Comment Is Nothing) Then
                            .Comment.Delete
                        End If
                        If TempDetails <> "" Then
                            .AddComment Replace(TempDetails, Newline, vbNewLine, , , vbTextCompare)
                            .Comment.Visible = False
                            .Comment.Shape.TextFrame.AutoMargins = False
                            .Comment.Shape.TextFrame.AutoSize = True
                            .Comment.Shape.TextFrame.MarginLeft = cMarginsLeftRight
                            .Comment.Shape.TextFrame.MarginRight = cMarginsLeftRight
                            .Comment.Shape.TextFrame.MarginTop = cMarginsTopBottom
                            .Comment.Shape.TextFrame.MarginBottom = cMarginsTopBottom
                        End If
                    End With
                End If
            End If
            Col = Col + 1
        End If
    
        'Normal price
        Start = Len(cTxt("PriceCalc.NormalInfoHeadline") & Newline) + 1
        If Len(ResultData.NormalCalcDetails) > Start Then
            TempDetails = Replace$(ResultData.NormalCalcDetails, cTxt("PriceCalc.NormalInfoHeadline") & Newline, "", , vbTextCompare) 'Remove the line (eg: Norm calc / Advantage calc)
        Else
            TempDetails = ResultData.NormalCalcDetails
        End If
        TempDetails = RemoveFirstNewline(TempDetails)   'Remove evt. newlines in the begining of the details
        If OutputInfo.ShowColumnWithNormalCalc Then
            If ErrorState Then
                RowData(OutputInfo.NormalCalcIndex) = Empty
            Else
                RowData(OutputInfo.NormalCalcIndex) = ResultData.NormalPrice
                If (ShowCellDetails) Then
                    With Worksheets(OutputInfo.Sheetname).Cells(rw, OutputInfo.ColumnOffset + Col - 1)
                        If Not (.Comment Is Nothing) Then
                            .Comment.Delete
                        End If
                        If TempDetails <> "" Then
                            .AddComment Replace(TempDetails, Newline, vbNewLine, , , vbTextCompare)
                            .Comment.Visible = False
                            .Comment.Shape.TextFrame.AutoMargins = False
                            .Comment.Shape.TextFrame.AutoSize = True
                            .Comment.Shape.TextFrame.MarginLeft = cMarginsLeftRight
                            .Comment.Shape.TextFrame.MarginRight = cMarginsLeftRight
                            .Comment.Shape.TextFrame.MarginTop = cMarginsTopBottom
                            .Comment.Shape.TextFrame.MarginBottom = cMarginsTopBottom
'                            .Comment.Shape.TextFrame.Characters.Font.Name = cFontName
'                            .Comment.Shape.TextFrame.Characters.Font.Size = cFontSize
'                            .Comment.Shape.TextFrame.Characters.Font.ColorIndex = cFontColorIndex
'                            .Comment.Shape.Fill.Solid
'                            .Comment.Shape.Fill.ForeColor.SchemeColor = cBackColorIndex
                        End If
                    End With
                End If
            End If
            Col = Col + 1
        End If
        
        'Normal Price details
        If OutputInfo.ShowColumnWithNormalCalcDetails Then
            If ErrorState Then
                RowData(OutputInfo.NormalCalcDetailsIndex) = Empty
            Else
                RowData(OutputInfo.NormalCalcDetailsIndex) = TempDetails
            End If
            Col = Col + 1
        End If
        
        'Advantage/disadvantage price
        Start = Len(cTxt("PriceCalc.AdvantageInfoHeadline") & Newline) + 1
        If Len(ResultData.AdvCalcDetails) > Start Then
            TempDetails = Mid(ResultData.AdvCalcDetails, Start, 9999) 'Remove the line (eg: Norm calc / Advantage calc)
        Else
            TempDetails = ResultData.AdvCalcDetails
        End If
        TempDetails = RemoveFirstNewline(TempDetails)   'Remove evt. newlines in the begining of the details
        If OutputInfo.ShowColumnWithAdvantageCalc Then
            If ErrorState Or ResultData.AdvantagePrice = 0# Then
                RowData(OutputInfo.AdvantageCalcIndex) = Empty
            Else
                RowData(OutputInfo.AdvantageCalcIndex) = ResultData.AdvantagePrice
                If (ShowCellDetails) Then
                    With Worksheets(OutputInfo.Sheetname).Cells(rw, OutputInfo.ColumnOffset + Col - 1)
                        If Not (.Comment Is Nothing) Then
                            .Comment.Delete
                        End If
                        If TempDetails <> "" Then
                            .AddComment Replace(TempDetails, Newline, vbNewLine, , , vbTextCompare)
                            .Comment.Visible = False
                            .Comment.Shape.TextFrame.AutoMargins = False
                            .Comment.Shape.TextFrame.AutoSize = True
                            .Comment.Shape.TextFrame.MarginLeft = cMarginsLeftRight
                            .Comment.Shape.TextFrame.MarginRight = cMarginsLeftRight
                            .Comment.Shape.TextFrame.MarginTop = cMarginsTopBottom
                            .Comment.Shape.TextFrame.MarginBottom = cMarginsTopBottom
'                            .Comment.Shape.TextFrame.Characters.Font.Name = cFontName
'                            .Comment.Shape.TextFrame.Characters.Font.Size = cFontSize
'                            .Comment.Shape.TextFrame.Characters.Font.ColorIndex = cFontColorIndex
'                            .Comment.Shape.Fill.Solid
'                            .Comment.Shape.Fill.ForeColor.SchemeColor = cBackColorIndex
                        End If
                    End With
                End If
            End If
            Col = Col + 1
        End If
        
        'Advantage/disadvantage details
        If OutputInfo.ShowColumnWithAdvantageCalcDetails Then
            If ErrorState Then
                RowData(OutputInfo.AdvantageCalcDetailsIndex) = Empty
            Else
                RowData(OutputInfo.AdvantageCalcDetailsIndex) = TempDetails
            End If
            Col = Col + 1
        End If
        
        'Surcharges
        If OutputInfo.ShowColumnWithSurcharges Then
            For i = 1 To OutputInfo.NumberOfSurcharges
                RowData(OutputInfo.SurchargeIndex(i)) = SurchargeList(i).Price
                If (ShowCellDetails) Then
                    With Worksheets(OutputInfo.Sheetname).Cells(rw, OutputInfo.ColumnOffset + Col - 1)
                        If Not (.Comment Is Nothing) Then
                            .Comment.Delete
                        End If
                        If SurchargeList(i).FullDetails <> "" Then
                            .AddComment Replace(SurchargeList(i).FullDetails, Newline, vbNewLine, , , vbTextCompare)
                            .Comment.Visible = False
                            .Comment.Shape.TextFrame.AutoMargins = False
                            .Comment.Shape.TextFrame.AutoSize = True
                            .Comment.Shape.TextFrame.MarginLeft = cMarginsLeftRight
                            .Comment.Shape.TextFrame.MarginRight = cMarginsLeftRight
                            .Comment.Shape.TextFrame.MarginTop = cMarginsTopBottom
                            .Comment.Shape.TextFrame.MarginBottom = cMarginsTopBottom
'                            .Comment.Shape.TextFrame.Characters.Font.Name = cFontName
'                            .Comment.Shape.TextFrame.Characters.Font.Size = cFontSize
'                            .Comment.Shape.TextFrame.Characters.Font.ColorIndex = cFontColorIndex
'                            .Comment.Shape.Fill.Solid
'                            .Comment.Shape.Fill.ForeColor.SchemeColor = cBackColorIndex
                        End If
                    End With
                End If
                Col = Col + 1
            Next i
        End If
    End If 'Not ErrorState
    
    If OutputInfo.ShowColumnWithChargeableAmount Then
        TempDetails = ResultData.ConvertionDetails
        If ErrorState Then
            RowData(OutputInfo.ChargeableAmountIndex) = Empty
        Else
            RowData(OutputInfo.ChargeableAmountIndex) = ResultData.AmountVol
            'Color if requried (0: No color, -1:Green,  +1:Red)
            If ResultData.ConvertColor > 0 Then
                Worksheets(OutputInfo.Sheetname).Cells(rw, OutputInfo.ColumnOffset + Col - 1).Interior.Color = RGB(255, 130, 130) 'Red
                TempDetails = TempDetails & vbNewLine & cTxt("Cell_is_Red_because")
            ElseIf ResultData.ConvertColor < 0 Then
                Worksheets(OutputInfo.Sheetname).Cells(rw, OutputInfo.ColumnOffset + Col - 1).Interior.Color = RGB(130, 255, 130) 'Green
                TempDetails = TempDetails & vbNewLine & cTxt("Cell_is_Green_because")
            End If
            If (ShowCellDetails) Then
                With Worksheets(OutputInfo.Sheetname).Cells(rw, OutputInfo.ColumnOffset + Col - 1)
                    If Not (.Comment Is Nothing) Then
                        .Comment.Delete
                    End If
                    If TempDetails <> "" Then
                        .AddComment Replace(TempDetails, Newline, vbNewLine, , , vbTextCompare)
                        .Comment.Visible = False
                        .Comment.Shape.TextFrame.AutoMargins = False
                        .Comment.Shape.TextFrame.AutoSize = True
                        .Comment.Shape.TextFrame.MarginLeft = cMarginsLeftRight
                        .Comment.Shape.TextFrame.MarginRight = cMarginsLeftRight
                        .Comment.Shape.TextFrame.MarginTop = cMarginsTopBottom
                        .Comment.Shape.TextFrame.MarginBottom = cMarginsTopBottom
'                        .Comment.Shape.TextFrame.Characters.Font.Name = cFontName
'                        .Comment.Shape.TextFrame.Characters.Font.Size = cFontSize
'                        .Comment.Shape.TextFrame.Characters.Font.ColorIndex = cFontColorIndex
'                        .Comment.Shape.Fill.Solid
'                        .Comment.Shape.Fill.ForeColor.SchemeColor = cBackColorIndex
                    End If
                End With
            End If
        End If
        Col = Col + 1
    End If
    
    
    'Write gathered info as chunk (row) (Quicker than writing one cell at a time)
    With Worksheets(OutputInfo.Sheetname)
        .Range(.Cells(OutputInfo.DataRow, OutputInfo.ColumnOffset), .Cells(OutputInfo.DataRow, OutputInfo.ColumnOffset + Col - 2)) = RowData
    End With
    OutputInfo.DataRow = OutputInfo.DataRow + 1
    
    If DebugMode Then Call SaveDebugInfo("SaveResultToOutput()", "End")
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " End of SaveResultToOutput"
End Sub


Private Sub FormatComments()
    'Format all comments on all sheets
    Dim ws As Worksheet
    Dim xComment As Comment
    
    If DebugMode Then Call SaveDebugInfo("FormatComments()", "Start")
    
    For Each ws In ActiveWorkbook.Worksheets
        'Debug.Print "Worksheet: " & ws.Name
        For Each xComment In ws.Comments
            With xComment.Shape
                .Comment.Shape.TextFrame.AutoMargins = False
                .Comment.Shape.TextFrame.AutoSize = True
                .Comment.Shape.TextFrame.MarginLeft = cMarginsLeftRight
                .Comment.Shape.TextFrame.MarginRight = cMarginsLeftRight
                .Comment.Shape.TextFrame.MarginTop = cMarginsTopBottom
                .Comment.Shape.TextFrame.MarginBottom = cMarginsTopBottom
                .Comment.Shape.TextFrame.Characters.Font.Name = cFontName
                .Comment.Shape.TextFrame.Characters.Font.Size = cFontSize
                .Comment.Shape.TextFrame.Characters.Font.ColorIndex = cFontColorIndex
                .Comment.Shape.Fill.Solid
                .Comment.Shape.Fill.ForeColor.SchemeColor = cBackColorIndex
            End With
        Next
    Next
    If DebugMode Then Call SaveDebugInfo("FormatComments()", "End")
End Sub


Private Function RemoveFirstNewline(str As String) As String
    Dim l As Long
    Dim res As String
    res = str
    l = Len(Newline)
    If Left(str, l) = Newline Then
        res = Mid(str, l + 1, 99999)
    End If
    If Left(res, l) = Newline Then
        res = Mid(res, l + 1, 99999)
    End If
    If Left(res, l) = Newline Then
        res = Mid(res, l + 1, 99999)
    End If
    If Left(res, l) = Newline Then
        res = Mid(res, l + 1, 99999)
    End If
    res = Replace(res, Newline & Newline & Newline, Newline & Newline, , , vbTextCompare)   'Remove evt. triple newline with double newline
    RemoveFirstNewline = res
End Function

Private Sub InitSaveResultToOutput()
'--------------------------------------------------------------------------------------------------------------
'--- Initializes the Output (Create sheet and/or headerlabels)
'---
'--- Input:     OutputInfo
'---            OfferSettings (Forwardername and description)
'---
'--- Output:    OutputInfo
'---            Given Output worksheet
'---
'--- History:
'---    12-12-2017 Initial
'---    19-06-2018 Surcharge offset fix. (0) is the baseprice.
'---    23-01-2019 Check if first resultcolumn' header is merges: If so: unmerge
'--------------------------------------------------------------------------------------------------------------
    Dim ThisWb As Workbook
    Dim TempSheetName As String
    Dim Post As Long
    Dim cPost As String
    Dim FoundFreeName As Boolean
    Dim Label As String
    'Dim Offset As Long
    Dim ColCount As Long
    Dim StartCol As Long    'Start of the non-invoice columns
    Dim i As Long
    Dim headerRow As Long
    Dim Comment As String
    Dim MaxOriginalLength As Long
    
    If DebugMode Then Call SaveDebugInfo("InitSaveResultToOutput()", "Start")
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & "Start of InitSaveResultToOutput"
    
    headerRow = OutputInfo.DataRow - 1
    If headerRow < 1 Then headerRow = 1 'Just i case
    
    'Offset = OutputInfo.ColumnOffset
    FoundFreeName = False
    StartCol = OutputInfo.SelectedPriceColumn
    ColCount = 0
    'If output is new sheet then create one
    If (OutputInfo.IsNewSheet) Then
        Set ThisWb = ThisWorkbook
        'Find a name for the new worksheet
        Post = 0
        cPost = ""
        
        Do
            MaxOriginalLength = 31 - (Len(NewSheetName & cPost) + 1)
            If DestSheetNameFormat = "Offer" Then   'Sheetname of the offer + Result + evt. number
                TempSheetName = Left(OfferSettings.Sheetname, MaxOriginalLength) & " " & NewSheetName & cPost
            ElseIf DestSheetNameFormat = "Invoice" Then 'Sheetname of the Invoice + Result + evt. number
                TempSheetName = Left(InvoiceSettings.Sheetname, MaxOriginalLength) & " " & NewSheetName & cPost
            Else    'Result
                TempSheetName = NewSheetName & cPost
            End If
'            TempSheetName = NewSheetName & CStr(Post)
            If sheetExists(TempSheetName) Then
                Post = Post + 1
                cPost = " " & CStr(Post)
            Else
                FoundFreeName = True
            End If
            If Post > 50 Then
                Call MsgBox("Error: Not able to create output sheet", vbCritical)
                End
            End If
        Loop While Not FoundFreeName
        'Create new sheet in the workbook
        OutputInfo.Sheetname = TempSheetName
        ThisWb.Sheets.Add(after:=ThisWb.Sheets(ThisWb.Sheets.count)).Name = OutputInfo.Sheetname
    End If
    
    '-- Write headerlabels and format the columns
    
    'In case the cells are merged: unmerge
    If Cells(headerRow, OutputInfo.SelectedPriceColumn).MergeCells = True Then
        Cells(headerRow, OutputInfo.SelectedPriceColumn).MergeArea.UnMerge
    End If

    'Invoice labels
    If Not OutputInfo.IsInvoiceListSheet Then
        Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.InvoiceFromColumn) = InvoiceInfo.FromColumnName
        With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.InvoiceFromColumn)  'Text + indent
            .HorizontalAlignment = xlLeft
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "@"
        End With
        ColCount = ColCount + 1
        Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.InvoiceToColumn) = InvoiceInfo.ToColumnName
        With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.InvoiceToColumn)   'Text + indent
            .HorizontalAlignment = xlLeft
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "@"
        End With
        ColCount = ColCount + 1
        If OutputInfo.InvoiceEffKGColumn > 0 Then
            Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.InvoiceEffKGColumn) = InvoiceInfo.EffKGColumnName
            With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.InvoiceEffKGColumn)   'Default Number format + indent
                .HorizontalAlignment = xlRight
                .AddIndent = True
                .IndentLevel = 1
                .NumberFormat = "General"
            End With
            ColCount = ColCount + 1
        End If
        If OutputInfo.InvoiceEffM3Column > 0 Then
            Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.InvoiceEffM3Column) = InvoiceInfo.EffM3ColumnName
            With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.InvoiceEffM3Column)   'Default Number format + indent
                .HorizontalAlignment = xlRight
                .AddIndent = True
                .IndentLevel = 1
                .NumberFormat = "General"
            End With
            ColCount = ColCount + 1
        End If
        If OutputInfo.InvoiceEffLDMColumn > 0 Then
            Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.InvoiceEffLDMColumn) = InvoiceInfo.EffLDMColumnName
            With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.InvoiceEffLDMColumn)   'Default Number format + indent
                .HorizontalAlignment = xlRight
                .AddIndent = True
                .IndentLevel = 1
                .NumberFormat = "General"
            End With
            ColCount = ColCount + 1
        End If
        If OutputInfo.InvoiceQuantityColumn > 0 Then
            Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.InvoiceQuantityColumn) = InvoiceInfo.QuantityColumnName
            With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.InvoiceQuantityColumn)   'Default Number format + indent
                .HorizontalAlignment = xlRight
                .AddIndent = True
                .IndentLevel = 1
                .NumberFormat = "General"
            End With
            ColCount = ColCount + 1
        End If
        Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.InvoicePriceColumn) = InvoiceInfo.PriceColumnName
        With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.InvoicePriceColumn)  'Numbers with 2 decimal and indent
            .HorizontalAlignment = xlRight
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "#,##0.00"
        End With
        ColCount = ColCount + 1
        
        'Format the invoiceheadercells
        With Worksheets(OutputInfo.Sheetname).Range(Cells(headerRow, OutputInfo.InvoiceStartColumn), Cells(headerRow, OutputInfo.InvoiceStartColumn + ColCount))
            .Interior.Pattern = xlSolid
            .Interior.PatternColorIndex = xlAutomatic
            .Interior.ThemeColor = xlThemeColorLight2   'Blue
            .Interior.TintAndShade = 0.5
            .Interior.PatternTintAndShade = 0
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
            .Font.Bold = True
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Borders(xlEdgeTop).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeRight).LineStyle = xlContinuous
            .Borders(xlInsideVertical).LineStyle = xlContinuous
            .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        End With
    End If
    
    '--- Calculated data

    'Selected Price
    Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.SelectedPriceColumn) = cTxt("SelectedPriceColumnName")
    With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.SelectedPriceColumn)  'Numbers with 2 decimal and indent
        .HorizontalAlignment = xlRight
        .AddIndent = True
        .IndentLevel = 1
        .NumberFormat = "#,##0.00"
    End With
    
    Comment = cTxt("Info.Forwarder") & OfferSettings.ForwarderName & vbNewLine
    Comment = Comment & cTxt("Info.Sheetname") & OfferSettings.Sheetname & vbNewLine
    If OfferSettings.OfferDesc <> "" Then
        Comment = Comment & cTxt("Info.Description") & OfferSettings.OfferDesc & vbNewLine
    End If
    Comment = Comment & cTxt("Info.TimeStamp") & Format(Now(), "dd-mm-yyyy Hh:Nn") & vbNewLine & vbNewLine
    Comment = Comment & ToolName & " (" & VersionInfo & ")" & vbNewLine
    Comment = Comment & CompanyName & vbNewLine & CompanyAdress & vbNewLine & CompanyCity & vbNewLine & CompanyTax & vbNewLine & CompanySerial
        
    With Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.SelectedPriceColumn)
        .Interior.ThemeColor = xlThemeColorAccent6
        .Interior.TintAndShade = 0.5
        .AddComment Comment
        .Comment.Visible = False
        .Comment.Shape.TextFrame.AutoMargins = False
        .Comment.Shape.TextFrame.AutoSize = True
        .Comment.Shape.TextFrame.MarginLeft = cMarginsLeftRight
        .Comment.Shape.TextFrame.MarginRight = cMarginsLeftRight
        .Comment.Shape.TextFrame.MarginTop = cMarginsTopBottom
        .Comment.Shape.TextFrame.MarginBottom = cMarginsTopBottom
    End With
    ColCount = ColCount + 1
    
    'Diff (Units)
    If OutputInfo.ShowColumnWithPriceDiffInUnits Then
        Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.PriceDiffInUnitsColumn) = cTxt("PriceDiffInUnitsColumnName")
        With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.PriceDiffInUnitsColumn)  'Numbers with 2 decimal and indent
            .HorizontalAlignment = xlRight
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "#,##0.00"
        End With
        With Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.PriceDiffInUnitsColumn)
            .Interior.ThemeColor = xlThemeColorAccent5
            .Interior.TintAndShade = 0.5
        End With
        ColCount = ColCount + 1
    End If
    
    'Diff (PCT)
    If OutputInfo.ShowColumnWithPriceDiffInPercent Then
        Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.PriceDiffInPercentColumn) = cTxt("PriceDiffInPercentColumnName")
        With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.PriceDiffInPercentColumn) 'Percent with 0 decimal and indent
            .HorizontalAlignment = xlRight
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "#,##0.00%"
        End With
        With Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.PriceDiffInPercentColumn)
            .Interior.ThemeColor = xlThemeColorAccent5
            .Interior.TintAndShade = 0.5
        End With
        ColCount = ColCount + 1
    End If
    
    'Calcmode
    If OutputInfo.ShowColumnWithCalcMode Then
        Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.CalcModeColumn) = cTxt("CalcModeColumnName")
        With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.CalcModeColumn)  'Text + indent
            .HorizontalAlignment = xlLeft
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "@"
        End With
        With Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.CalcModeColumn)
            .Interior.ThemeColor = xlThemeColorAccent4
            .Interior.TintAndShade = 0.5
        End With
        ColCount = ColCount + 1
    End If
    
    'Freightprice calc
    If OutputInfo.ShowColumnWithFreightCalc Then
        Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.FreightCalcColumn) = cTxt("FreightCalcColumnName")
        With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.FreightCalcColumn) 'Numbers with 2 decimal and indent
            .HorizontalAlignment = xlRight
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "#,##0.00"
        End With
        With Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.FreightCalcColumn)
            .Interior.ThemeColor = xlThemeColorAccent6
            .Interior.TintAndShade = 0.8
        End With
        ColCount = ColCount + 1
    End If
    
    'Normal calc
    If OutputInfo.ShowColumnWithNormalCalc Then
        Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.NormalCalcColumn) = cTxt("NormalCalcColumnName")
        With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.NormalCalcColumn) 'Numbers with 2 decimal and indent
            .HorizontalAlignment = xlRight
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "#,##0.00"
        End With
        With Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.NormalCalcColumn)
            .Interior.ThemeColor = xlThemeColorAccent3
            .Interior.TintAndShade = 0.5
        End With
        ColCount = ColCount + 1
    End If
    
    'Normal calc info
    If OutputInfo.ShowColumnWithNormalCalcDetails Then
        Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.NormalCalcDetailsColumn) = cTxt("NormalCalcDetailsColumnName")
        With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.NormalCalcDetailsColumn)  'Text + indent
            .HorizontalAlignment = xlLeft
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "@"
        End With
        With Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.NormalCalcDetailsColumn)
            .Interior.ThemeColor = xlThemeColorAccent3
            .Interior.TintAndShade = 0.5
        End With
        ColCount = ColCount + 1
    End If
    
    'Adv. calc
    If OutputInfo.ShowColumnWithAdvantageCalc Then
        If OfferData.CalculationMode = Disadvantage Then
            Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.AdvantageCalcColumn) = cTxt("DisadvantageCalcColumnName")
        Else
            Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.AdvantageCalcColumn) = cTxt("AdvantageCalcColumnName")
        End If
        With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.AdvantageCalcColumn) 'Numbers with 2 decimal and indent
            .HorizontalAlignment = xlRight
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "#,##0.00"
        End With
        With Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.AdvantageCalcColumn)
            .Interior.ThemeColor = xlThemeColorAccent2
            .Interior.TintAndShade = 0.5
        End With
        ColCount = ColCount + 1
    End If
    
    'Adv. calc info
    If OutputInfo.ShowColumnWithAdvantageCalcDetails Then
        If OfferData.CalculationMode = Disadvantage Then
            Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.AdvantageCalcDetailsColumn) = cTxt("DisadvantageCalcDetailsColumnName")
        Else
            Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.AdvantageCalcDetailsColumn) = cTxt("AdvantageCalcDetailsColumnName")
        End If
        With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.AdvantageCalcDetailsColumn)   'Text + indent
            .HorizontalAlignment = xlLeft
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "@"
        End With
        With Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.AdvantageCalcDetailsColumn)
            .Interior.ThemeColor = xlThemeColorAccent2
            .Interior.TintAndShade = 0.5
        End With

        ColCount = ColCount + 1
    End If
        
    'Surcharges
    If OutputInfo.ShowColumnWithSurcharges Then
        For i = 1 To OutputInfo.NumberOfSurcharges
            Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.SurchargeColumn(i)) = SurchargeList(i).Name
            With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.SurchargeColumn(i)) 'Numbers with 2 decimal and indent
                .HorizontalAlignment = xlRight
                .AddIndent = True
                .IndentLevel = 1
                .NumberFormat = "#,##0.00"
            End With
            With Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.SurchargeColumn(i))
                .Interior.ThemeColor = xlThemeColorAccent1
                .Interior.TintAndShade = 0.5
            End With
            ColCount = ColCount + 1
        Next i
    End If
    
    'Chargable amount
    If OutputInfo.ShowColumnWithChargeableAmount Then
        Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.ChargeableAmountColumn) = cTxt("ChargeableAmountColumnName")
        With Worksheets(OutputInfo.Sheetname).Columns(OutputInfo.ChargeableAmountColumn) 'Numbers with 3 decimal and indent
            .HorizontalAlignment = xlRight
            .AddIndent = True
            .IndentLevel = 1
            .NumberFormat = "#,##0.000"
        End With
        With Worksheets(OutputInfo.Sheetname).Cells(headerRow, OutputInfo.ChargeableAmountColumn)
            .Interior.ThemeColor = xlThemeColorLight1
            .Interior.TintAndShade = 0.5
        End With
        ColCount = ColCount + 1
    End If

    '--- Format the headerlabelcells  (The Common stuff for all the calculated cells)
    With Worksheets(OutputInfo.Sheetname).Range(Worksheets(OutputInfo.Sheetname).Cells(headerRow, StartCol), Worksheets(OutputInfo.Sheetname).Cells(headerRow, StartCol + ColCount - 1))
        .Interior.Pattern = xlSolid
        .Interior.PatternColorIndex = xlAutomatic
        .Interior.PatternTintAndShade = 0
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
        .Font.Bold = True
        .Font.Color = vbBlack          'ThemeColor = xlThemeColorLight1
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
    End With

    'Set all the columnswidth's
    For i = StartCol To StartCol + ColCount - 1
        With Worksheets(OutputInfo.Sheetname).Columns(i)
            .ColumnWidth = 50
            .EntireColumn.AutoFit
            .ColumnWidth = .ColumnWidth + 2
        End With
    Next i
    
    'Always show headerrow on scroll
    If OutputInfo.headerRow < 1 Then OutputInfo.headerRow = 1
    Worksheets(OutputInfo.Sheetname).Activate
    Worksheets(OutputInfo.Sheetname).Cells(OutputInfo.headerRow + 1, 1).Select
    ActiveWindow.FreezePanes = True
    Worksheets(OutputInfo.Sheetname).Cells(1, 1).Select

    If DebugMode Then Call SaveDebugInfo("InitSaveResultToOutput()", "End")
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & "End of InitSaveResultToOutput"
    
End Sub


Private Sub InitGlobalVariables()
'--------------------------------------------------------------------------------------------------------------
'--- Inititializes misc. global variables
'---
'--- Input:     InvoiceSettings
'---
'--- Output:    OfferList,
'---            InvoiceInfo
'---
'--- History:
'---    08-12-2017 Initial
'---    19-06-2018 Surcharge offset fix. (0) is the baseprice.
'---    07-12-2018 Added ZonesIsInitialized = false to force init of zonetable on re-run
'--------------------------------------------------------------------------------------------------------------
    Dim listcounter As Long, iCol As Long
    Dim wsName As String, temp As String
    Dim ws As Worksheet
    Dim NextCol As Long
    Dim NextIndex As Long
    Dim i As Long
    Dim Counter As Long
    
    If DebugMode Then Call SaveDebugInfo("InitGlobalVariables()", "Start")
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & "Start of InitGlobalVariables"

    Call SetProgramMode
    
    DecimalCharacter = Application.International(xlDecimalSeparator)
    
    'Get list of Offersheet(s) (may be 1 or more)
    'Data is stored in OfferList()
    'Clear list
    For i = 0 To cMAXOFFERSHEETS
        OfferList(i).OfferName = ""
        OfferList(i).Sheetname = ""
        OfferList(i).Valid = False
    Next i
    listcounter = 0
    For Each ws In ActiveWorkbook.Worksheets
        wsName = ws.Name
        If ws.Visible = xlSheetVisible Then
            temp = ExcelSupport.CheckIfOfferSheet(wsName)
            If temp = OfferSettings.OfferName Then
                OfferList(listcounter).OfferName = temp
                OfferList(listcounter).Sheetname = wsName
                OfferList(listcounter).OfferDescription = Worksheets(wsName).Cells(OfferCategoryRow, 2).Value2
                OfferList(listcounter).StartRow = OfferDataRowStart
                OfferList(listcounter).FromColumn = GetColumnNumber(wsName, OriginColumnName)
                OfferList(listcounter).ToColumn = GetColumnNumber(wsName, DestColumnName)
                OfferList(listcounter).MinPriceColumn = GetColumnNumber(wsName, MinPriceColumnName)
                OfferList(listcounter).PriceColumn = GetColumnNumber(wsName, PriceColumnName)    'First one
                For iCol = OfferList(listcounter).PriceColumn To OfferList(listcounter).PriceColumn + cMAXPRICEINTERVALS
                    temp = Worksheets(wsName).Cells(1, iCol).Value2
                    If temp = PriceColumnName Or temp = "" Then
                        OfferList(listcounter).LastPriceColumn = iCol
                    Else
                        Exit For
                    End If
                Next iCol
                OfferList(listcounter).ConverterVolumeColumn = GetColumnNumber(wsName, ConvertVolumeColumnName)
                OfferList(listcounter).ConverterTruckColumn = GetColumnNumber(wsName, ConvertTruckColumnName)
                OfferList(listcounter).Valid = True
                OfferListCount = listcounter
                listcounter = listcounter + 1
            End If
        End If 'visible
    Next

    'Invoiceinfo:
    InvoiceInfo = InvoiceSettings   'Copy whole struct
    
    InvoiceInfo.EffKGColumnName = ""
    InvoiceInfo.EffM3ColumnName = ""
    InvoiceInfo.EffLDMColumnName = ""
    InvoiceInfo.QuantityColumnName = ""

    'Get headernames
    InvoiceInfo.FromColumnName = Worksheets(InvoiceInfo.Sheetname).Cells(InvoiceInfo.headerRow, InvoiceInfo.FromColumn).Value2
    InvoiceInfo.ToColumnName = Worksheets(InvoiceInfo.Sheetname).Cells(InvoiceInfo.headerRow, InvoiceInfo.ToColumn).Value2
    If InvoiceInfo.EffKGColumn > 0 Then
        InvoiceInfo.EffKGColumnName = Worksheets(InvoiceInfo.Sheetname).Cells(InvoiceInfo.headerRow, InvoiceInfo.EffKGColumn).Value2
    End If
    If InvoiceInfo.EffM3Column > 0 Then
        InvoiceInfo.EffM3ColumnName = Worksheets(InvoiceInfo.Sheetname).Cells(InvoiceInfo.headerRow, InvoiceInfo.EffM3Column).Value2
    End If
    If InvoiceInfo.EffLDMColumn > 0 Then
        InvoiceInfo.EffLDMColumnName = Worksheets(InvoiceInfo.Sheetname).Cells(InvoiceInfo.headerRow, InvoiceInfo.EffLDMColumn).Value2
    End If
    If InvoiceInfo.QuantityColumn > 0 Then
        InvoiceInfo.QuantityColumnName = Worksheets(InvoiceInfo.Sheetname).Cells(InvoiceInfo.headerRow, InvoiceInfo.QuantityColumn).Value2
    End If
    InvoiceInfo.PriceColumnName = Worksheets(InvoiceInfo.Sheetname).Cells(InvoiceInfo.headerRow, InvoiceInfo.PriceColumn).Value2
    
    '--- Output
    OutputInfo = OutputSettings         'Copy whole struct
    
    'Get number of surcharges
    'SurchargeInfo is all the surcharges from the Form (active or non-active)
    'SurchargeList is all the Active surcharges (that must be calcultated)
    Counter = 1
    For i = 0 To cMAXSURCHARGES
        If OfferSettings.SurchargeInfo(i).Active Then
            SurchargeList(Counter).Name = OfferSettings.SurchargeInfo(i).Name
            SurchargeList(Counter).Type = OfferSettings.SurchargeInfo(i).Type
            SurchargeList(Counter).IsLCL = OfferSettings.SurchargeInfo(i).IsLCL
            SurchargeList(Counter).Sheetname = OfferSettings.SurchargeInfo(i).Sheetname
            If SurchargeList(Counter).Type = RoadType Or SurchargeList(Counter).Type = PreFreightType Or SurchargeList(Counter).Type = PostFreightType Then
                Call InitColumnNumbers(SurchargeList(Counter))
            End If
            Counter = Counter + 1
        End If
    Next i
    OutputInfo.NumberOfSurcharges = Counter - 1
    
    'Automaticly show the Freight price column if there is any surcharges selected
    If OutputInfo.NumberOfSurcharges > 0 Then
        OutputInfo.ShowColumnWithFreightCalc = True
    Else
        OutputInfo.ShowColumnWithFreightCalc = False
    End If
    
    
    'Set the column and index numbers for the applicable ones
    
    '--- NOTE: Defines also the order the data is shown. If changed: Also change Headernames order in sub "InitSaveResultToOutput"

    OutputInfo.ColumnOffset = 1         'Offset between existing columns and the column to display the data (1=no space)
    If (OutputInfo.IsInvoiceListSheet) Then 'If invoicelist then move start after the used columns
        OutputInfo.ColumnOffset = OutputInfo.ColumnOffset + Last(cLASTCOL, Worksheets(OutputInfo.Sheetname).Rows(InvoiceInfo.headerRow))
    End If
    NextCol = OutputInfo.ColumnOffset   'Initialize the Start Column number in the sheet (new sheets starts in col 1)
    NextIndex = 0                       'initialize the Index number in output variable (RowData)
    
    If Not OutputInfo.IsInvoiceListSheet Then
        OutputInfo.InvoiceStartColumn = NextCol
        OutputInfo.InvoiceStartIndex = NextIndex
        OutputInfo.InvoiceFromColumn = NextCol
        OutputInfo.InvoiceFromIndex = NextIndex
        NextCol = NextCol + 1
        NextIndex = NextIndex + 1
        OutputInfo.InvoiceToColumn = NextCol
        OutputInfo.InvoiceToIndex = NextIndex
        NextCol = NextCol + 1
        NextIndex = NextIndex + 1
        If InvoiceInfo.EffKGColumn > 0 Then
            OutputInfo.InvoiceEffKGColumn = NextCol
            OutputInfo.InvoiceEffKGIndex = NextIndex
            NextCol = NextCol + 1
            NextIndex = NextIndex + 1
        End If
        If InvoiceInfo.EffM3Column > 0 Then
            OutputInfo.InvoiceEffM3Column = NextCol
            OutputInfo.InvoiceEffM3Index = NextIndex
            NextCol = NextCol + 1
            NextIndex = NextIndex + 1
        End If
        If InvoiceInfo.EffLDMColumn > 0 Then
            OutputInfo.InvoiceEffLDMColumn = NextCol
            OutputInfo.InvoiceEffLDMIndex = NextIndex
            NextCol = NextCol + 1
            NextIndex = NextIndex + 1
        End If
        If InvoiceInfo.QuantityColumn > 0 Then
            OutputInfo.InvoiceQuantityColumn = NextCol
            OutputInfo.InvoiceQuantityIndex = NextIndex
            NextCol = NextCol + 1
            NextIndex = NextIndex + 1
        End If
        OutputInfo.InvoicePriceColumn = NextCol
        OutputInfo.InvoicePriceIndex = NextIndex
        NextCol = NextCol + 1
        NextIndex = NextIndex + 1
    Else
        OutputInfo.InvoicePriceColumn = InvoiceInfo.PriceColumn
    End If
    'Selected price
    OutputInfo.SelectedPriceColumn = NextCol
    OutputInfo.SelectedPriceIndex = NextIndex
    NextCol = NextCol + 1
    NextIndex = NextIndex + 1
    
    'Diff (Units)
    If OutputInfo.ShowColumnWithPriceDiffInUnits Then
        OutputInfo.PriceDiffInUnitsColumn = NextCol
        OutputInfo.PriceDiffInUnitsIndex = NextIndex
        NextCol = NextCol + 1
        NextIndex = NextIndex + 1
    End If
    'Diff. (PCT)
    If OutputInfo.ShowColumnWithPriceDiffInPercent Then
        OutputInfo.PriceDiffInPercentColumn = NextCol
        OutputInfo.PriceDiffInPercentIndex = NextIndex
        NextCol = NextCol + 1
        NextIndex = NextIndex + 1
    End If
    'Calc mode
    If OutputInfo.ShowColumnWithCalcMode Then
        OutputInfo.CalcModeColumn = NextCol
        OutputInfo.CalcModeIndex = NextIndex
        NextCol = NextCol + 1
        NextIndex = NextIndex + 1
    End If
    'Freightprice Calc
    If OutputInfo.ShowColumnWithFreightCalc Then
        OutputInfo.FreightCalcColumn = NextCol
        OutputInfo.FreightCalcIndex = NextIndex
        NextCol = NextCol + 1
        NextIndex = NextIndex + 1
    End If
    'Normal Calc
    If OutputInfo.ShowColumnWithNormalCalc Then
        OutputInfo.NormalCalcColumn = NextCol
        OutputInfo.NormalCalcIndex = NextIndex
        NextCol = NextCol + 1
        NextIndex = NextIndex + 1
    End If
    'Normal Calc info
    If OutputInfo.ShowColumnWithNormalCalcDetails Then
        OutputInfo.NormalCalcDetailsColumn = NextCol
        OutputInfo.NormalCalcDetailsIndex = NextIndex
        NextCol = NextCol + 1
        NextIndex = NextIndex + 1
    End If
    'Adv. calc
    If OutputInfo.ShowColumnWithAdvantageCalc Then
        OutputInfo.AdvantageCalcColumn = NextCol
        OutputInfo.AdvantageCalcIndex = NextIndex
        NextCol = NextCol + 1
        NextIndex = NextIndex + 1
    End If
    'Adv. Calc info
    If OutputInfo.ShowColumnWithAdvantageCalcDetails Then
        OutputInfo.AdvantageCalcDetailsColumn = NextCol
        OutputInfo.AdvantageCalcDetailsIndex = NextIndex
        NextCol = NextCol + 1
        NextIndex = NextIndex + 1
    End If
    'Surcharges
    If OutputInfo.ShowColumnWithSurcharges Then
        For i = 1 To OutputInfo.NumberOfSurcharges
            OutputInfo.SurchargeColumn(i) = NextCol
            OutputInfo.SurchargeIndex(i) = NextIndex
            NextCol = NextCol + 1
            NextIndex = NextIndex + 1
        Next i
    End If
    'Chargeable amount
    If OutputInfo.ShowColumnWithChargeableAmount Then
        OutputInfo.ChargeableAmountColumn = NextCol
        OutputInfo.ChargeableAmountIndex = NextIndex
        NextCol = NextCol + 1
        NextIndex = NextIndex + 1
    End If

    '--- Set Header row depending on output
    If OutputInfo.IsInvoiceListSheet Then
        OutputInfo.headerRow = InvoiceInfo.headerRow
    Else
        OutputInfo.headerRow = 1  'First row is Header on New Sheet
    End If
    OutputInfo.DataRow = OutputInfo.headerRow + 1
        
    SurchargeListInitDone = False
    SurchargePreListInitDone = False
    SurchargePostListInitDone = False
    IntervalSurchargeInitDone = False
    ZonesIsInitialized = False
    
    If DebugMode Then Call SaveDebugInfo("InitGlobalVariables()", "End")
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & "End of InitGlobalVariables"

End Sub

Sub InitColumnNumbers(ByRef SC As SurchargeListType)
'--------------------------------------------------------------------------------------------------------------
'--- Inititializes the Columns numbers for the Road Tax and Pre/post sheets and also the currency
'---
'--- Input:     Surcharge (Sheetname)
'---
'--- Output:    Surcharge (all the Columns)
'---
'--- History:
'---    29-12-2017 Initial
'---    19-07-2019 Handle if only one price interval
'--------------------------------------------------------------------------------------------------------------
    Dim wsName As String
    Dim temp As String
    Dim iCol As Long

    wsName = SC.Sheetname
    
    SC.FromColumn = GetColumnNumber(wsName, OriginColumnName)
    SC.ToColumn = GetColumnNumber(wsName, DestColumnName)
    SC.MinPriceColumn = GetColumnNumber(wsName, MinPriceColumnName)
    SC.PriceColumn = GetColumnNumber(wsName, PriceColumnName)       'First one
    For iCol = SC.PriceColumn To SC.PriceColumn + cMAXPRICEINTERVALS
        temp = Worksheets(wsName).Cells(1, iCol).Value2
        If temp = PriceColumnName Or temp = "" Then
            SC.LastPriceColumn = iCol
        Else
            Exit For
        End If
    Next iCol
    SC.ConverterVolumeColumn = GetColumnNumber(wsName, ConvertVolumeColumnName)
    SC.ConverterTruckColumn = GetColumnNumber(wsName, ConvertTruckColumnName)
    SC.LastCol = Last(cLASTCOL, Worksheets(wsName).Rows(1))                                 'Use row 1 to find the number of columns
    SC.LastRow = Last(cLASTROW, Worksheets(wsName).Columns(SC.FromColumn))    'Use the From Column (1) to find number of rows

End Sub

Private Sub GetInvoiceDataRow(InvoiceDataBlock As Variant, rw As Long)
'--------------------------------------------------------------------------------------------------------------
'---    Reads all the requered invoice info from the requested row.
'---    Make validation on the number that are read.
'---    Stored the data in the struct InvoiceData and in the struct ResultData:
'---     - From
'---     - To
'---     - EffKG          Effective KG (0.0 if not present)
'---     - EffM3          Effective M3 (0.0 if not present)
'---     - EffLDM         Efective LDM (0.0 if not present)
'---     - Quantity       The chargeable amount from the forwarder (0.0 if not present)
'---     - Price
'---
'---    If all data is valid the bool 'Valid' is true.
'---
'--- History
'---    13-02-2018 Initial
'---    25-06-2018 Set errormessage if invoiceprice is blank/0,00, or From or To is blank. Warning flag introduced
'---    01-08-2018 Added Error input handling on From, To, Eff xx
'---    13-11-2018 Changed to read from InvoiceDatablock instead of directly fra the invoice sheet
'---    21-07-2019 Added support for Pre-/post dropdowns
'--------------------------------------------------------------------------------------------------------------
    Dim temp As Variant
    Dim source As String
    Dim vCell As Variant
    Dim Col As Long
    
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " Start of GetInvoiceDataRow (Row=" & rw & ")"

    InvoiceData.Valid = False
    InvoiceData.Warning = False
    InvoiceData.From = ""
    InvoiceData.To = ""
    
    'From
    vCell = InvoiceDataBlock(rw, InvoiceInfo.FromColumn)
    If Not IsError(vCell) Then
        InvoiceData.From = Trim(vCell)
    End If
    
    'To
    vCell = InvoiceDataBlock(rw, InvoiceInfo.ToColumn)
    If Not IsError(vCell) Then
        InvoiceData.To = Trim(vCell)
    End If

    If InvoiceData.From = "" And InvoiceData.To = "" Then
        InvoiceData.Warning = True
        If SourceFormat = "WithSheet" Then
            source = printf(cTxt("PriceCalc.SourceCleanSheetCell"), InvoiceInfo.Sheetname, ColLetter(InvoiceInfo.FromColumn), CStr(rw))
        Else
            source = printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(InvoiceInfo.FromColumn), CStr(rw))
        End If
        ResultData.ErrorMessage = printf(cTxt("Error.InvoiceFromToIsBlank"), source)
    Else
        If InvoiceData.From = "" Then
            InvoiceData.Warning = True
            If SourceFormat = "WithSheet" Then
                source = printf(cTxt("PriceCalc.SourceCleanSheetCell"), InvoiceInfo.Sheetname, ColLetter(InvoiceInfo.FromColumn), CStr(rw))
            Else
                source = printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(InvoiceInfo.FromColumn), CStr(rw))
            End If
            ResultData.ErrorMessage = printf(cTxt("Error.InvoiceFromIsBlank"), source)
        End If
        
        If InvoiceData.To = "" Then
            InvoiceData.Warning = True
            If SourceFormat = "WithSheet" Then
                source = printf(cTxt("PriceCalc.SourceCleanSheetCell"), InvoiceInfo.Sheetname, ColLetter(InvoiceInfo.ToColumn), CStr(rw))
            Else
                source = printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(InvoiceInfo.ToColumn), CStr(rw))
            End If
            ResultData.ErrorMessage = printf(cTxt("Error.InvoiceToIsBlank"), source)
        End If
    End If

    Col = 0
    If InvoiceInfo.EffKGColumn > 0 Then
        Col = InvoiceInfo.EffKGColumn
    ElseIf InvoicePreSettings.EffKGColumn > 0 Then
        Col = InvoicePreSettings.EffKGColumn
    ElseIf InvoicePostSettings.EffKGColumn > 0 Then
        Col = InvoicePostSettings.EffKGColumn
    End If
    If Col > 0 Then
        temp = ""
        vCell = InvoiceDataBlock(rw, Col)
        If Not IsError(vCell) Then
            temp = Trim(vCell)
        End If
        If temp = "" Then
            temp = "0"
        ElseIf Not IsNumeric(temp) Then
            Call MsgBox(printf(cTxt("Error.InvoiceFreightQuantityNotANumber"), temp, rw), vbOKOnly + vbCritical)
            End
        End If
        InvoiceData.EffKG = CDbl(temp)
    Else
        InvoiceData.EffKG = 0#
    End If
    
    Col = 0
    If InvoiceInfo.EffM3Column > 0 Then
        Col = InvoiceInfo.EffM3Column
    ElseIf InvoicePreSettings.EffM3Column > 0 Then
        Col = InvoicePreSettings.EffM3Column
    ElseIf InvoicePostSettings.EffM3Column > 0 Then
        Col = InvoicePostSettings.EffM3Column
    End If
    If Col > 0 Then
        temp = ""
        vCell = InvoiceDataBlock(rw, Col)
        If Not IsError(vCell) Then
            temp = Trim(vCell)
        End If
        If temp = "" Then
            temp = "0"
        ElseIf Not IsNumeric(temp) Then
            Call MsgBox(printf(cTxt("Error.InvoiceFreightQuantityNotANumber"), temp, rw), vbOKOnly + vbCritical)
            End
        End If
        InvoiceData.EffM3 = CDbl(temp)
    Else
        InvoiceData.EffM3 = 0#
    End If
    
    Col = 0
    If InvoiceInfo.EffLDMColumn > 0 Then
        Col = InvoiceInfo.EffLDMColumn
    ElseIf InvoicePreSettings.EffLDMColumn > 0 Then
        Col = InvoicePreSettings.EffLDMColumn
    ElseIf InvoicePostSettings.EffLDMColumn > 0 Then
        Col = InvoicePostSettings.EffLDMColumn
    End If
    If Col > 0 Then
        temp = ""
        vCell = InvoiceDataBlock(rw, Col)
        If Not IsError(vCell) Then
            temp = Trim(vCell)
        End If
        If temp = "" Then
            temp = "0"
        ElseIf Not IsNumeric(temp) Then
            Call MsgBox(printf(cTxt("Error.InvoiceFreightQuantityNotANumber"), temp, rw), vbOKOnly + vbCritical)
            End
        End If
        InvoiceData.EffLDM = CDbl(temp)
    Else
        InvoiceData.EffLDM = 0#
    End If
    
    Col = 0
    If InvoiceInfo.QuantityColumn > 0 Then
        Col = InvoiceInfo.QuantityColumn
    ElseIf InvoicePreSettings.QuantityColumn > 0 Then
        Col = InvoicePreSettings.QuantityColumn
    ElseIf InvoicePostSettings.QuantityColumn > 0 Then
        Col = InvoicePostSettings.QuantityColumn
    End If
    If Col > 0 Then
        temp = ""
        vCell = InvoiceDataBlock(rw, Col)
        If Not IsError(vCell) Then
            temp = Trim(vCell)
        End If
        If temp = "" Then
            temp = "0"
        ElseIf Not IsNumeric(temp) Then
            Call MsgBox(printf(cTxt("Error.InvoiceFreightQuantityNotANumber"), temp, rw), vbOKOnly + vbCritical)
            End
        End If
        InvoiceData.Quantity = CDbl(temp)
    Else
        InvoiceData.Quantity = CDbl(temp)
    End If
    
    temp = "0"
    vCell = InvoiceDataBlock(rw, InvoiceInfo.PriceColumn)
    If Not IsError(vCell) Then
        temp = Trim(vCell)
        If temp = "" Then temp = "0"
    End If
    If Not IsNumeric(temp) Then
        Call MsgBox(printf(cTxt("Error.InvoiceFreightPriceNotANumber"), temp, rw), vbOKOnly + vbCritical)
        End
    End If
    InvoiceData.Price = CDbl(temp)
    If InvoiceData.Price = 0# Then
        If SourceFormat = "WithSheet" Then
            source = printf(cTxt("PriceCalc.SourceCleanSheetCell"), InvoiceInfo.Sheetname, ColLetter(InvoiceInfo.PriceColumn), CStr(rw))
        Else
            source = printf(cTxt("PriceCalc.SourceCleanCell"), ColLetter(InvoiceInfo.PriceColumn), CStr(rw))
        End If
        InvoiceData.Warning = True
        ResultData.ErrorMessage = printf(cTxt("Error.InvoiceFreightPriceNullorBlank"), source)
    End If
    
    InvoiceData.Valid = True
    ResultData.InvoiceFrom = InvoiceData.From
    ResultData.InvoiceTo = InvoiceData.To
    ResultData.InvoiceEffKG = InvoiceData.EffKG
    ResultData.InvoiceEffM3 = InvoiceData.EffM3
    ResultData.InvoiceEffLDM = InvoiceData.EffLDM
    ResultData.InvoiceQuantity = InvoiceData.Quantity
    ResultData.InvoicePrice = InvoiceData.Price
    
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " End of GetInvoiceDataRow (Row=" & rw & ")"
End Sub

'Private Sub mainAnalyse(Calcmode As Long)
''--------------------------------------------------------------------------------------------------------------
''--- Beskrivelse af sub/funktion:
''--- Indl|fffd|ser en linie og farvel|fffd|gger baggrunden i den billigste celle p|fffd| BENCHMARK arket
''---
''--- Versionshistorik:
''---    23-11-2009 Initial
''---    11-10-2012 Ekstra check for 1 eller 2 kolonners beregning
''--------------------------------------------------------------------------------------------------------------
'
'    Dim iPris(5) As Long
'    Dim Farvel|fffd|g(5) As Boolean
'    Dim FlereMindste As Boolean
'    Dim iLinie As Long, iCol As Long, iFaktor As Long
'    Dim temp As Variant
'    Dim AlleErTal As Boolean
'    Dim farve As Long
'    Dim AntalDecimaler As Long       'Angiver hvormange decimaler efter kommaet der skal tages hensyn til ved farvel|fffd|gning
'    Dim i As Long
'    Dim kolonneantal As Long, mindste As Long, st|fffd|rste As Long
'    Dim MindsteNyePris As Single, OptimeretPris As Single
'    Dim BenchmarkArk As String
'    Dim PrisStartKol As Long
'    Dim farvegr|fffd|nse As Single
'    Dim Version_Analyze As String
'
'    Version_Analyze = "Analyze:   3.12.10.11"
'
'    'Application.ScreenUpdating = False              'Sl|fffd| sk|fffd|rmopdatering fra
'    'Application.Calculation = xlCalculationManual   'Sl|fffd| manual beregning til
'    'Call initVariabler
'
'    AlleErTal = True                                ' Indtil anden er modbevist er det indl|fffd|ste = tal
'    iLinie = TilbudsDataStartRk                     ' Omr|fffd|det starter efter overskrifterne (pt linie 6)
'    AntalDecimaler = 2
'    BenchmarkArk = cBenchmarkFane
'    PrisStartKol = 5                                ' Kolonne E
'
'    'Beregn tolerencen: 2 decimaler = 100, som vi s|fffd| ganger hvert tal med og l|fffd|gger i en long    variabel
'    iFaktor = 1
'    For i = 1 To AntalDecimaler
'        iFaktor = iFaktor * 10
'    Next i
'
'    'Find antalet af kolonner (1 eller 2) check de f|fffd|rste 200 r|fffd|kker: Hvis der er mindst eet tal bruger vi 2 kolonner
'    kolonneantal = 1
'    For iLinie = TilbudsDataStartRk To TilbudsDataStartRk + 200
'        temp = Worksheets(BenchmarkArk).Cells((iLinie), PrisStartKol + 1)
'        If IsNumeric(temp) Then
'            If temp > 0 Then
'                kolonneantal = 2
'            End If
'        End If
'    Next iLinie
'
'    iLinie = TilbudsDataStartRk
'    'Hovedl|fffd|kke
'    Do While (Worksheets(BenchmarkArk).Cells((iLinie), TilbudsAreaDestCol) <> "")             ' S|fffd|l|fffd|nge omr|fffd|decellen ikke er tom...
'        temp = Worksheets(BenchmarkArk).Cells((iLinie), PrisStartKol - 1)                     ' Indl|fffd|s den f|fffd|rste v|fffd|rdi
'        ' Indl|fffd|s og check om det er tal v|fffd|rdier
'        If IsNumeric(temp) Then
'            iPris(0) = temp * iFaktor
'        Else
'            AlleErTal = False
'        End If
'
'        For iCol = 1 To kolonneantal                                       ' Genneml|fffd|b Pris Uden FB og FB + xx
'            temp = Worksheets(BenchmarkArk).Cells((iLinie), PrisStartKol + iCol - 1)
'            If IsNumeric(temp) And Not (IsEmpty(temp)) Then
'                iPris(iCol) = temp * iFaktor
'            Else
'                AlleErTal = False
'            End If
'        Next iCol
'
'        'Hvis alle v|fffd|rdier var tal s|fffd| check hvilken der er mindst og farvel|fffd|g denne
'        ' er der flere med den samme mindste pris markeres disse med en anden farve
'        'Den st|fffd|rste skal ogs|fffd| findes (til ulempeberegning)
'        If AlleErTal Then
'            mindste = 1                     'som udgangspunkt er det f|fffd|rste tal mindst
'            MindsteNyePris = iPris(1) / iFaktor
'            For iCol = 1 To kolonneantal
'                If iPris(iCol) < iPris(mindste) Then
'                    mindste = iCol
'                    MindsteNyePris = iPris(iCol) / iFaktor
'                End If
'            Next iCol
'            'Nu er den mindste v|fffd|rdi fundet, s|fffd| skal der tjekkes om andre har denne v|fffd|rdi
'            For iCol = 1 To kolonneantal
'                If iPris(iCol) = iPris(mindste) Then
'                    Farvel|fffd|g(iCol) = True
'                    If iCol <> mindste Then
'                        FlereMindste = True
'                    End If
'                End If
'            Next iCol
'            ' Bestem farven
'            If FlereMindste = True Then
'                farve = BaggrundFarveLig
'            Else
'                farve = BaggrundFarveMin
'            End If
'            'Udf|fffd|r farvningen af cellen/cellerne og nulstil
'            For iCol = 0 To kolonneantal
'                If Farvel|fffd|g(iCol) = True Then
'                    Worksheets(BenchmarkArk).Cells(iLinie, PrisStartKol + iCol - 1).Interior.ColorIndex = farve
'                Else
'                    Worksheets(BenchmarkArk).Cells(iLinie, PrisStartKol + iCol - 1).Interior.ColorIndex = 0
'                End If
'                Farvel|fffd|g(iCol) = False
'            Next iCol
'            If Calcmode = CalcModeUlempe Then           'Hvis det er ulempeberegning s|fffd| er det den st|fffd|rste pris der er den optimerede.
'                If iPris(1) > iPris(2) Then
'                       OptimeretPris = iPris(1) / iFaktor
'                    Else
'                       OptimeretPris = iPris(2) / iFaktor
'                End If
'            Else                                        'ellers er det den mindste pris der er den optimerede.
'                OptimeretPris = MindsteNyePris
'            End If
'            Worksheets(BenchmarkArk).Cells(iLinie, 9) = OptimeretPris            'Skriv den optimerede nye beregnede v|fffd|rdi i I kolonnen
'            'Hvis det er den normale pris der er mindst skal vi have slettet en evt. "Fordelberegning" i kolonne H
'            If (mindste = 1) Then
'                If Worksheets(BenchmarkArk).Cells(iLinie, 8) = tekst(Sprog, 45) Then    'Tjek for teksten "Fordelsberegning"
'                    Worksheets(BenchmarkArk).Cells(iLinie, 8) = ""
'                End If
'            End If
'            If iPris(0) <> 0 Then
'                Worksheets(BenchmarkArk).Cells(iLinie, 10) = (OptimeretPris * iFaktor - iPris(0)) / iPris(0) 'Skriv diff mellem den mindste nye beregnede og den oprindelige i procent i J kolonnen
'            Else
'                Worksheets(BenchmarkArk).Cells(iLinie, 10) = "Can't calc: Price=0"
'            End If
'        End If
'        iLinie = iLinie + 1                         ' Check n|fffd|ste linie...
'        AlleErTal = True                            ' Indtil anden er modbevist er det indl|fffd|ste = tal
'        FlereMindste = False                        ' nulstil
'        temp = Worksheets(BenchmarkArk).Cells((iLinie), PrisStartKol)
'    Loop
'    Call SetCondFormat  ' Juster farver
'End Sub


'
'Support functions
'
Function ColumnLetter(iCol As Long) As String
    'Konvertererkolonnestreng ud fra kolonne nummer: 1=A, 2=B...
    If iCol > 0 Then
        Dim vArr
        vArr = Split(Cells(1, iCol).Address(True, False), "$")
        ColumnLetter = vArr(0)
    Else
        ColumnLetter = ""
    End If
End Function


Function Col_Letter(lngCol As Long) As String
Dim vArr
vArr = Split(Cells(1, lngCol).Address(True, False), "$")
Col_Letter = vArr(0)
End Function

Sub ClearStatusBar()
    Application.StatusBar = False
End Sub

Public Function printf(mask As String, ParamArray tokens() As Variant) As String
    'Syntax: printf("Some text '%0', more text: '%1'", A1, A2)
    Dim i As Long
    For i = 0 To UBound(tokens)
        mask = Replace$(mask, "%" & i, CStr(tokens(i)), , , vbTextCompare)
    Next
    printf = mask
End Function

Private Function Ceiling(ByVal x As Double, Optional ByVal Factor As Double = 1) As Double
    ' X is the value you want to round
    ' is the multiple to which you want to round
    Ceiling = (Int(x / Factor) - (x / Factor - Int(x / Factor) > 0)) * Factor
End Function

Private Function Floor(ByVal x As Double, Optional ByVal Factor As Double = 1) As Double
    ' X is the value you want to round
    ' is the multiple to which you want to round
    Floor = Int(x / Factor) * Factor
End Function

Function ConvertLetterToNumber(ByVal LtrIn As String) As Long
'--------------------------------------------------------------------------------------------------------------
'--- Beskrivelse af sub/funktion:
'--- Input:     Streng med 1 eller to bogstaver (kolonebogstaver)
'--- Output:    Tal som angiver den tilsvarende kolonne nr.
'--- Fejl:      Ved fejl returneres: -1
'--- Eksempel:  A giver 1, B giver 2, Z giver 26, AA giver 27, AAA giver -1 (mere end 2 tegn)
'--- Versionshistorik:
'---    23-11-2009 Initial
'--------------------------------------------------------------------------------------------------------------

Dim TempChar As String
Dim NumString  As String
Dim tempNum As Long
Dim NumArray() As Long
Dim i As Long
Dim HighPower As Long

TempChar = ""
tempNum = 0

If Len(LtrIn) = 0 Or Len(LtrIn) > 2 Then
    ConvertLetterToNumber = -1
    Exit Function
End If

LtrIn = UCase(LtrIn)
For i = 1 To Len(LtrIn)
    NumString = ""
    ' ********** Change Ltr to Number Indicating Place in Alphabet ***** from 01 to 26 ****
    TempChar = Mid(LtrIn, i, 1)
    ReDim Preserve NumArray(i)
    NumArray(i) = Asc(TempChar) - 64
Next

' ********* Our Most Significant Digits Occur to the Left *****************
HighPower = UBound(NumArray()) - 1

' ******** Convert the Number Array using Powers of 26 *****************
For i = 1 To UBound(NumArray())
    tempNum = tempNum + (NumArray(i) * (26 ^ HighPower))
    HighPower = HighPower - 1
Next

ConvertLetterToNumber = tempNum
End Function


Private Sub SetCondFormat()
    'Sets conditional formating on the Percent column
    Dim ColorLimit As Single
    Dim GreenColor As Long
    Dim RedColor As Long
    Dim NegativeColor As Long
    Dim PositiveColor As Long
       
    If OutputSettings.PriceDiffSolidColorPercent > 0 Then    'Only if bigger than 0
   
        ColorLimit = OutputSettings.PriceDiffSolidColorPercent / 100000#      'Skal |fffd|ndres til 100 hvis der igen skal v|fffd|re farveovergange
        
        GreenColor = RGB(130, 255, 130)     'Green
        RedColor = RGB(255, 153, 153)       'Red
        
'        If OutputSettings.OutputMode = OutputBenchMode Then
            NegativeColor = GreenColor
            PositiveColor = RedColor
'        Else
'            NegativeColor = RedColor
'            PositiveColor = GreenColor
'        End If
        
        With Worksheets(OutputInfo.Sheetname).Range( _
                        Worksheets(OutputInfo.Sheetname).Cells(OutputInfo.headerRow + 1, OutputInfo.PriceDiffInPercentColumn), _
                        Worksheets(OutputInfo.Sheetname).Cells(OutputInfo.DataRow - 1, OutputInfo.PriceDiffInPercentColumn))
            .Cells.FormatConditions.Delete
            .FormatConditions.AddColorScale ColorScaleType:=3
            .FormatConditions(1).SetFirstPriority
            .FormatConditions(1).ColorScaleCriteria(1).Type = xlConditionValueNumber
            .FormatConditions(1).ColorScaleCriteria(1).Value = -ColorLimit    'under - "farvegr|fffd|nse" skal v|fffd|re gr|fffd|n
            
            .FormatConditions(1).ColorScaleCriteria(1).FormatColor.Color = NegativeColor   'Green
            .FormatConditions(1).ColorScaleCriteria(1).FormatColor.TintAndShade = 0
            
            .FormatConditions(1).ColorScaleCriteria(2).Type = xlConditionValueNumber
            .FormatConditions(1).ColorScaleCriteria(2).Value = 0
            .FormatConditions(1).ColorScaleCriteria(2).FormatColor.ThemeColor = xlThemeColorDark1
            .FormatConditions(1).ColorScaleCriteria(2).FormatColor.TintAndShade = 0
            
            .FormatConditions(1).ColorScaleCriteria(3).Type = xlConditionValueNumber
            .FormatConditions(1).ColorScaleCriteria(3).Value = ColorLimit     ' over + "farvegr|fffd|nse" skal v|fffd|re r|fffd|d
            .FormatConditions(1).ColorScaleCriteria(3).FormatColor.Color = PositiveColor   'Red
            .FormatConditions(1).ColorScaleCriteria(3).FormatColor.TintAndShade = 0
        End With
        
    End If
End Sub

Public Sub SetProgramMode()
    If ToolName = Fr8BenchmarkName Then
        ProgramMode.SeaAllowed = True
        ProgramMode.AirAllowed = True
        ProgramMode.IsInitialized = True
    ElseIf ToolName = Fr8CheckName Then
        ProgramMode.SeaAllowed = False
        ProgramMode.AirAllowed = False
        ProgramMode.IsInitialized = True
        OutputSettings.OutputMode = OutputCheckMode
    Else
        Call MsgBox("ERROR: ProgramMode not set. Contact support@Fr8Partner.com", vbCritical + vbOKOnly, "ERROR")
        End
    End If
End Sub



'-----------------------------------------------------------------------------------------------------------------------------------
'---
'--- Testing routines
'---
'-----------------------------------------------------------------------------------------------------------------------------------

Sub ResetTestSetting()
    'Resets the test setting and the Testlog
    Dim i As Long
    For i = 0 To TestSettings.Pointer
        TestLog(i).Message = ""
        TestLog(i).MessageArea = 0
        TestLog(i).MessageType = 0
        TestLog(i).sht = ""
        TestLog(i).Reference = ""
        TestLog(i).Reference2 = ""
    Next i
    TestSettings.Pointer = 0
    TestSettings.RemarksCount = 0
    TestSettings.WarningCount = 0
    TestSettings.ErrorCount = 0
    TestSettings.RunMode = PauseMode
End Sub

Function CheckCell2(shName As String, Col As Long, rw As Long, ByRef ReturnMessage As String) As CellStatusEnum
    'Test a cell for error and contest
    'ReturnStatus:
'        CellIsEmpty                 'Cell is empty
'        CellIsString                'String without newline
'        CellIsNumeric               'Integer/Long/Doube/Date
'        CellHasError                'Has error as stated in ReturnMessage
    'Return the cell contents (String). If error it returns the error type.
    '09-10-2019 Removed 'Value' from 'vCell.Value' in Select Case. Did not work anymore. Why???.
    
    Dim vCell As Variant
    Dim errVal As Long
    Dim cVal As Variant
    Dim iVal As Long
    Dim ReturnStatus As CellStatusEnum
    
    ReturnMessage = ""
    ReturnStatus = CellUnknown
    
    vCell = TestDataBlock(rw, Col)
    If IsError(vCell) Then              'Check for error (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, and #NULL)
        ReturnStatus = CellHasError
        Select Case vCell
            Case CVErr(xlErrDiv0)
                ReturnMessage = "#DIV/0! error"
            Case CVErr(xlErrNA)
                ReturnMessage = "#N/A error"
            Case CVErr(xlErrName)
                ReturnMessage = "#NAME? error"
            Case CVErr(xlErrNull)
                ReturnMessage = "#NULL! error"
            Case CVErr(xlErrNum)
                ReturnMessage = "#NUM! error"
            Case CVErr(xlErrRef)
                ReturnMessage = "#REF! error"
            Case CVErr(xlErrValue)
                ReturnMessage = "#VALUE! error"
            Case Else
                ReturnMessage = "Unknown error"
        End Select
    Else
        cVal = vCell
        If Trim(cVal & vbNullString) = vbNullString Then    'Check for blank
            ReturnStatus = CellIsEmpty
            ReturnMessage = cVal
        ElseIf IsNumeric(cVal) Then                         'Check for Number
            If DecimalCharacter = "," Then          'tjek if , and . is used wrong (=string)
                If InStr(1, cVal, ".") <> 0 Then
                    ReturnStatus = CellIsStrNumberPoint
                    ReturnMessage = cVal
                Else
                    ReturnStatus = CellIsNumeric
                    ReturnMessage = CStr(cVal)
                End If
            Else
                If InStr(1, cVal, ",") <> 0 Then
                    ReturnStatus = CellIsStrNumberComma
                    ReturnMessage = cVal
                Else
                    ReturnStatus = CellIsNumeric
                    ReturnMessage = CStr(cVal)
                End If
            End If
        Else
'            iVal = GetLeftNumber(CStr(cVal))                'Check for number to left of a colon
'            If iVal > 0 Then
'                ReturnStatus = CellIsNumeric
'                ReturnMessage = Format(iVal, "#")
'    '        ElseIf InStr(cVal, vbLf) Or InStr(cVal, vbCr) Or InStr(cVal, vbCrLf) Then   'Check if newline in cell
'    '            ReturnStatus = CellIsStringWithNewLine
'    '            ReturnMessage = cVal
'            Else
                ReturnStatus = CellIsstring
                ReturnMessage = cVal
'            End If
        End If
    End If
    CheckCell2 = ReturnStatus
End Function

Function CheckCell(shName As String, Col As Long, rw As Long, ByRef ReturnMessage As String) As CellStatusEnum
    'Test a cell for error and contest
    'ReturnStatus:
'        CellIsEmpty                 'Cell is empty
'        CellIsString                'String without newline
'        CellIsNumeric               'Integer/Long/Doube/Date
'        CellHasError                'Has error as stated in ReturnMessage
    'Return the cell contents (String). If error it returns the error type.
    
    Dim rCell As Range
    Dim errVal As Long
    Dim cVal As Variant
    Dim iVal As Long
    Dim ReturnStatus As CellStatusEnum
    
    ReturnMessage = ""
    ReturnStatus = CellUnknown
    
    Set rCell = ActiveWorkbook.Worksheets(shName).Range(Cells(rw, Col), Cells(rw, Col))
    If IsError(rCell) Then              'Check for error (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, and #NULL)
        ReturnStatus = CellHasError
        'errVal = rCell.Value
        Select Case rCell.Value
            Case CVErr(xlErrDiv0)
                ReturnMessage = "#DIV/0! error"
            Case CVErr(xlErrNA)
                ReturnMessage = "#N/A error"
            Case CVErr(xlErrName)
                ReturnMessage = "#NAME? error"
            Case CVErr(xlErrNull)
                ReturnMessage = "#NULL! error"
            Case CVErr(xlErrNum)
                ReturnMessage = "#NUM! error"
            Case CVErr(xlErrRef)
                ReturnMessage = "#REF! error"
            Case CVErr(xlErrValue)
                ReturnMessage = "#VALUE! error"
            Case Else
                ReturnMessage = "Unknown error"
        End Select
    Else
        cVal = rCell.Value2
        If Trim(cVal & vbNullString) = vbNullString Then    'Check for blank
            ReturnStatus = CellIsEmpty
            ReturnMessage = cVal
        ElseIf IsNumeric(cVal) Then                         'Check for Number
            If DecimalCharacter = "," Then          'tjek if , and . is used wrong (=string)
                If InStr(1, cVal, ".") <> 0 Then
                    ReturnStatus = CellIsStrNumberPoint
                    ReturnMessage = cVal
                Else
                    ReturnStatus = CellIsNumeric
                    ReturnMessage = CStr(cVal)
                End If
            Else
                If InStr(1, cVal, ",") <> 0 Then
                    ReturnStatus = CellIsStrNumberComma
                    ReturnMessage = cVal
                Else
                    ReturnStatus = CellIsNumeric
                    ReturnMessage = CStr(cVal)
                End If
            End If
        Else
            iVal = GetLeftNumber(CStr(cVal))                'Check for number to left of a colon
            If iVal > 0 Then
                ReturnStatus = CellIsNumeric
                ReturnMessage = Format(iVal, "#")
    '        ElseIf InStr(cVal, vbLf) Or InStr(cVal, vbCr) Or InStr(cVal, vbCrLf) Then   'Check if newline in cell
    '            ReturnStatus = CellIsStringWithNewLine
    '            ReturnMessage = cVal
            Else
                ReturnStatus = CellIsstring
                ReturnMessage = cVal
            End If
        End If
    End If

    CheckCell = ReturnStatus
End Function

'Sub test_Function_CheckCell()
'    'First do create a Sheet with the name "CheckCell" and add test data in cells A1 > A10.
'    Dim i As Long
'    Dim result As String
'    Dim stat As CellStatusEnum
'
'    For i = 1 To 10
'        Debug.Print "Cell A" & i & ":"
'        Debug.Print " - Status  : " & CheckCell("CheckCell", 1, i, result)
'        Debug.Print " - Message : '" & result & "'"
'    Next i
'End Sub

Function RepportMessage(pMessage As String, ByVal pType As MessageTypeEnum, ByVal pArea As AreaEnum, pSheet As String, pRef1 As String, Optional pRef2 As String = "") As Long
    'Function to handle messages (Remark/Warnings/Errors) in OFFER and Invoice testing
    Dim i As Long
    
    'Add all messages to log
    i = AddLogEntry(pMessage, pType, pArea, pSheet, pRef1, pRef2)
    RepportMessage = i
End Function


Function AddLogEntry(pMessage As String, ByVal pType As MessageTypeEnum, ByVal pArea As AreaEnum, pSheet As String, pRef1 As String, Optional pRef2 As String = "") As Long
'--------------------------------------------------------------------------------------------------------------
'--- Beskrivelse af sub/funktion:
'--- Add Log Entry is used in Test Offer Sheet.
'---
'--- Returns the number of entries in the log
'---
'--- Versionshistorik:
'---    18-09-2018 Initial
'---
'---
'--------------------------------------------------------------------------------------------------------------
    Dim Pointer As Long
    
    'Public TestSettings As TestSettingsType
    'Public TestLog(cMaxLogEntries) As LogEntryType
    
    Pointer = TestSettings.Pointer         'Get the pointer
    'Overrun check
    If Pointer = (cMaxLogEntries - cLogEntryBuffer - 1) Then
        TestLog(Pointer).Message = tTxt("Max_number_reached")
        TestLog(Pointer).MessageType = ErrorType
        TestLog(Pointer).MessageArea = MiscellaneousArea
        TestLog(Pointer).Reference = ""
        TestLog(Pointer).Reference2 = ""
        TestSettings.RunMode = Overrun
        Pointer = Pointer + 1
    End If
    
    'Save info
    TestLog(Pointer).Message = pMessage
    TestLog(Pointer).MessageType = pType
    TestLog(Pointer).MessageArea = pArea
    TestLog(Pointer).sht = pSheet
    TestLog(Pointer).Reference = pRef1
    TestLog(Pointer).Reference2 = pRef2
    
    'Update the counters
    If pType = ErrorType Then
        TestSettings.ErrorCount = TestSettings.ErrorCount + 1
    ElseIf pType = WarningType Then
        TestSettings.WarningCount = TestSettings.WarningCount + 1
    ElseIf pType = RemarkType Then
        TestSettings.RemarksCount = TestSettings.RemarksCount + 1
    End If
    
    'Update the Global Pointer
    TestSettings.Pointer = Pointer + 1     'Update pointer
    
    AddLogEntry = Pointer
End Function


Function TestOfferSheet(OfferName As String) As Long
'--------------------------------------------------------------------------------------------------------------
'--- Test the Offer sheet(s) incl. Pre and post sheets
'---
'--- Input:     Offername
'---
'--- Output:    Number of errors
'---            All results is stores into the TestLog()
'---            Also 'TestSettings' is containing some data (WarningCount etc)
'--- History:
'---    25-09-2018 Initial
'--------------------------------------------------------------------------------------------------------------
    
    Dim i As Long
    Dim iRow As Long
    Dim iCol As Long
    Dim ws As Worksheet
    Dim ErrorCount As Long
    Dim WarningCount As Long
    Dim listcounter As Long
    Dim wsName As String
    Dim Sh As Long
    Dim stat As CellStatusEnum
    Dim stat2 As CellStatusEnum
    Dim RestEmpty As Boolean
    Dim ReturnMessage As String
    Dim T As String
    Dim sTemp As String
    Dim iTemp As Long
    Dim dTemp As Double
    Dim dtTemp As Date
    Dim ref As String
    Dim InitialActiveSheet As String
    Dim LastDataRow As Long 'The last datarow found (the row before an enpty 'From')
    Dim sCalc As String
    Dim sUnit As String
    Dim sInteval As String
    Dim LastCol As Long
    Dim ColName As String
    Dim SCList(20) As ScInfo
    Dim ScCounter As Long
    Dim iSC As Long
        
    'Save active sheet
    InitialActiveSheet = ActiveWorkbook.ActiveSheet.Name
    
    'Get the decimal character
    DecimalCharacter = Application.International(xlDecimalSeparator)

    '--- In progress ---
    'i = RepportMessage(printf(tTxt("Testing_startet_at"), Format(Now, "Hh:Nn.Ss")), RemarkType, MiscellaneousArea, "", "")
    
    '--- Get all the key data (number of datarows, pricematrix info, surcharge info etc)
    
    'Get number of Offersheet(s) (may be 1 or more) that matches the offername
    i = RepportMessage(printf(tTxt("Forwarder_Offername_is"), OfferName), RemarkType, InfoArea, "", "")
    
    For i = 0 To cMAXOFFERSHEETS           'Clear list first
        OfferList(i).OfferName = ""
        OfferList(i).Sheetname = ""
        OfferList(i).Valid = False
    Next i
    listcounter = 0
    For Each ws In ActiveWorkbook.Worksheets
        wsName = ws.Name
        If ws.Visible = xlSheetVisible Then
            sTemp = ExcelSupport.CheckIfOfferOrPrePostSheet(wsName)
            If sTemp = OfferName Then
                OfferList(listcounter).OfferName = sTemp
                OfferList(listcounter).Sheetname = wsName
                OfferList(listcounter).StartRow = OfferDataRowStart
                OfferList(listcounter).FromColumn = GetColumnNumber(wsName, OriginColumnName)
                OfferList(listcounter).ToColumn = GetColumnNumber(wsName, DestColumnName)
                OfferList(listcounter).MinPriceColumn = GetColumnNumber(wsName, MinPriceColumnName)
                OfferList(listcounter).PriceColumn = GetColumnNumber(wsName, PriceColumnName)    'First one
                OfferList(listcounter).LastPriceColumn = OfferList(listcounter).PriceColumn
                For iCol = OfferList(listcounter).PriceColumn To OfferList(listcounter).PriceColumn + cMAXPRICEINTERVALS
                    sTemp = Worksheets(wsName).Cells(1, iCol).Value2
                    If sTemp = PriceColumnName Or sTemp = "" Then
                        OfferList(listcounter).LastPriceColumn = iCol
                    Else
                        Exit For
                    End If
                Next iCol
                OfferList(listcounter).ConverterVolumeColumn = GetColumnNumber(wsName, ConvertVolumeColumnName)
                OfferList(listcounter).ConverterTruckColumn = GetColumnNumber(wsName, ConvertTruckColumnName)
                OfferList(listcounter).Valid = True
                
                i = RepportMessage(printf(tTxt("Found_this_offer_in_sheet"), OfferList(listcounter).Sheetname), RemarkType, InfoArea, "", "")
                listcounter = listcounter + 1
            End If
        End If 'visible
    Next
    
    '=== Start testing ===
    For Sh = 0 To listcounter - 1
        wsName = OfferList(Sh).Sheetname
        i = RepportMessage(printf(tTxt("Testing_sheet"), OfferList(Sh).Sheetname), RemarkType, InfoArea, wsName, "")
        Worksheets(OfferList(Sh).Sheetname).Activate    'We have to activate the sheet to test, to avoid error 1004
        
        '--- Test header data
        
        'Offer Description
        stat = CheckCell(wsName, 2, OfferCategoryRow, ReturnMessage)
        ref = "B" & CStr(OfferCategoryRow) 'B4
        If stat = CellIsEmpty Then
            i = RepportMessage(printf(tTxt("No_Offer_Description_found"), ref), RemarkType, OfferDesignationArea, wsName, ref)
        ElseIf stat = CellHasError Then
            i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, OfferDesignationArea, wsName, ref)
        End If
        
        'Dates
        stat = CheckCell(wsName, 2, 5, ReturnMessage)
        ref = "B5"
        If stat = CellHasError Or stat = CellIsstring Then
            i = RepportMessage(printf(tTxt("Date_Is_invalid"), ref), ErrorType, GenerelArea, wsName, ref)
        End If
        stat = CheckCell(wsName, 2, 6, ReturnMessage)
        ref = "B6"
        If stat = CellHasError Or stat = CellIsstring Then
            i = RepportMessage(printf(tTxt("Date_Is_invalid"), ref), ErrorType, GenerelArea, wsName, ref)
        End If
                
        'Std Currency
        stat = CheckCell(wsName, 2, OfferCurrencyRow, ReturnMessage)
        ref = "B" & CStr(OfferCurrencyRow)
        If stat = CellHasError Then
            i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, CurrencyArea, wsName, ref)
        ElseIf stat = CellIsEmpty Then
            i = RepportMessage(printf(tTxt("Standard_Currency_Empty"), ref), ErrorType, CurrencyArea, wsName, ref)
        End If
        
        'Calculation method
        stat = CheckCell(wsName, OfferList(Sh).PriceColumn, OfferNameRow, ReturnMessage)
        ref = ColLetter(OfferList(Sh).PriceColumn) & CStr(OfferNameRow)
        If stat = CellHasError Then
            i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, PriceMatrixArea, wsName, ref)
        ElseIf stat = CellIsstring Then
            iTemp = GetLeftNumber(ReturnMessage)
            If iTemp < 1 Or iTemp > 4 Then
                i = RepportMessage(printf(tTxt("CalcMethod_illegal_left_number"), ref, ReturnMessage), ErrorType, PriceMatrixArea, wsName, ref)
            End If
        End If
        'Adv. number
        stat = CheckCell(wsName, OfferList(Sh).PriceColumn, OfferCategoryRow, ReturnMessage)
        ref = ColLetter(OfferList(Sh).PriceColumn) & CStr(OfferCategoryRow)
        If stat = CellHasError Then
            i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, PriceMatrixArea, wsName, ref)
        ElseIf stat = CellIsstring Then
            i = RepportMessage(printf(tTxt("Advantage_number_is_not_a_number"), ref), ErrorType, PriceMatrixArea, wsName, ref)
        End If

        '--- Matrix 'headers': Calculation, UnitsCurrency and Intervals
        For iCol = OfferList(Sh).PriceColumn To OfferList(Sh).LastPriceColumn
            'Calculation
            stat = CheckCell(wsName, iCol, OfferDataTypeRow, ReturnMessage)
            ref = ColLetter(iCol) & CStr(OfferDataTypeRow)
            If stat = CellHasError Then
                i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, PriceTypeArea, wsName, ref)
            End If
            'Units
            stat = CheckCell(wsName, iCol, OfferUnitsRow, ReturnMessage)
            ref = ColLetter(iCol) & CStr(OfferUnitsRow)
            If stat = CellHasError Then
                i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, PriceUnitsArea, wsName, ref)
            End If
            'intervals
            stat = CheckCell(wsName, iCol, OfferDataIntervalRow, ReturnMessage)
            ref = ColLetter(iCol) & CStr(OfferDataIntervalRow)
            If stat = CellHasError Then
                i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, PriceIntervalArea, wsName, ref)
            ElseIf stat = CellIsstring Then
                i = RepportMessage(printf(tTxt("Interval_does_not_contain_a_number"), ref), ErrorType, PriceIntervalArea, wsName, ref)
            End If
            
        Next iCol
        ' 'Header' cross tjek
        For iCol = OfferList(Sh).PriceColumn To OfferList(Sh).LastPriceColumn
            sCalc = Worksheets(wsName).Range(Cells(OfferDataTypeRow, iCol), Cells(OfferDataTypeRow, iCol)).Value2
            sUnit = Worksheets(wsName).Range(Cells(OfferDataUnitRow, iCol), Cells(OfferDataUnitRow, iCol)).Value2
            sInteval = Worksheets(wsName).Range(Cells(OfferDataIntervalRow, iCol), Cells(OfferDataIntervalRow, iCol)).Value2
            ref = ColLetter(iCol) & CStr(OfferDataIntervalRow)
            If sCalc = "" And sUnit = "" And sInteval = "" And iCol < OfferList(Sh).LastPriceColumn Then
                ref = ColLetter(iCol) & CStr(OfferDataIntervalRow)
                i = RepportMessage(printf(tTxt("Last_price_col_adjusted"), iCol, OfferList(Sh).LastPriceColumn, ReturnMessage), RemarkType, PriceIntervalArea, wsName, ref)
            End If
            If sInteval <> "" Then
                If sCalc = "" Then
                    ref = ColLetter(iCol) & CStr(OfferDataTypeRow)
                    i = RepportMessage(printf(tTxt("Calculation_method_missing"), ref), ErrorType, PriceIntervalArea, wsName, ref)
                End If
                If sUnit = "" Then
                    ref = ColLetter(iCol) & CStr(OfferDataUnitRow)
                    i = RepportMessage(printf(tTxt("Unit_definition_missing"), ref), ErrorType, PriceIntervalArea, wsName, ref)
                End If
            End If
        Next iCol
        'Currency
        stat = CheckCell(wsName, OfferList(Sh).PriceColumn, OfferCurrencyRow, ReturnMessage)
        ref = ColLetter(OfferList(Sh).PriceColumn) & CStr(OfferCurrencyRow)
        If stat = CellHasError Then
            i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, CurrencyArea, wsName, ref)
        End If
        
        '--- Test From and To
        iRow = DataStartRow
        'From test: check for Excel error
        Do
            stat = CheckCell(wsName, OfferList(Sh).FromColumn, iRow, ReturnMessage)
            ref = ColLetter(OfferList(Sh).FromColumn) & CStr(iRow)
            If stat = CellHasError Then
                i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, DepartureArea, wsName, ref)
                If i > cMaxLogEntries Then GoTo Overrun_Exit
            End If
            iRow = iRow + 1
            If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
        Loop While stat <> CellIsEmpty
        LastDataRow = iRow - 2
        i = RepportMessage(printf(tTxt("Datarows_rows_found"), DataStartRow, LastDataRow), RemarkType, InfoArea, wsName, "A" & CStr(DataStartRow) & ":A" & CStr(LastDataRow))
        If (LastDataRow < DataStartRow) Then
            i = RepportMessage(printf(tTxt("No_Datarows_rows_found")), ErrorType, DepartureArea, wsName, "A10")
        End If
        'To test: Check for Excel error
        For iRow = DataStartRow To LastDataRow
            stat = CheckCell(wsName, OfferList(Sh).ToColumn, iRow, ReturnMessage)
            ref = ColLetter(OfferList(Sh).ToColumn) & CStr(iRow)
            If stat = CellHasError Then
                i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, DestinationArea, wsName, ref)
                If i > cMaxLogEntries Then GoTo Overrun_Exit
            ElseIf stat = CellIsEmpty Then
                i = RepportMessage(printf(tTxt("Consignee_Empty"), ref, ReturnMessage), ErrorType, DestinationArea, wsName, ref)
                If i > cMaxLogEntries Then GoTo Overrun_Exit
            End If
            If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
        Next iRow
         
        '--- Test Pricematrix
        'Minimum price
        For iRow = DataStartRow To LastDataRow
            stat = CheckCell(wsName, OfferList(Sh).MinPriceColumn, iRow, ReturnMessage)
            ref = ColLetter(OfferList(Sh).MinPriceColumn) & CStr(iRow)
            If stat = CellHasError Then
                i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, PriceMatrixArea, wsName, ref)
                If i > cMaxLogEntries Then GoTo Overrun_Exit
            ElseIf stat = CellIsEmpty Then
                i = RepportMessage(printf(tTxt("Min_Price_Empty"), ref), WarningType, PriceMatrixArea, wsName, ref)
                If i > cMaxLogEntries Then GoTo Overrun_Exit
            ElseIf stat = CellIsstring Then
                i = RepportMessage(printf(tTxt("The_pricecell_contains_not_number"), ref), ErrorType, PriceMatrixArea, wsName, ref)
                If i > cMaxLogEntries Then GoTo Overrun_Exit
            ElseIf stat = CellIsStrNumberComma Then
                i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_comma"), ref), ErrorType, PriceMatrixArea, wsName, ref)
                If i > cMaxLogEntries Then GoTo Overrun_Exit
            ElseIf stat = CellIsStrNumberPoint Then
                i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_point"), ref), ErrorType, PriceMatrixArea, wsName, ref)
                If i > cMaxLogEntries Then GoTo Overrun_Exit
            End If
            If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
        Next iRow
        'Prices
        For iRow = DataStartRow To LastDataRow
            For iCol = OfferList(Sh).PriceColumn To OfferList(Sh).LastPriceColumn
                stat = CheckCell(wsName, iCol, iRow, ReturnMessage)
                ref = ColLetter(iCol) & CStr(iRow)
                If stat = CellHasError Then
                    i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, PriceMatrixArea, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                ElseIf stat = CellIsEmpty Then
                    'If rest of prices are also empty then do not make error/warning
                    RestEmpty = True
                    For i = iCol + 1 To OfferList(Sh).LastPriceColumn
                        stat2 = CheckCell(wsName, i, iRow, ReturnMessage)
                        If stat2 <> CellIsEmpty Then
                            RestEmpty = False
                        End If
                    Next i
                    If Not RestEmpty Then
                        i = RepportMessage(printf(tTxt("Price_Empty"), ref), WarningType, PriceMatrixArea, wsName, ref)
                    End If
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                ElseIf stat = CellIsStrNumberComma Then
                    i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_comma"), ref), ErrorType, PriceMatrixArea, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                ElseIf stat = CellIsStrNumberPoint Then
                    i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_point"), ref), ErrorType, PriceMatrixArea, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                ElseIf stat = CellIsstring Then
                    i = RepportMessage(printf(tTxt("The_pricecell_contains_not_number"), ref), ErrorType, PriceMatrixArea, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                End If
                If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
            Next iCol
        Next iRow
        
        '--- Test Convertion factors
        'volume
        If OfferList(Sh).ConverterVolumeColumn > 0 Then
            For iRow = DataStartRow To LastDataRow
                stat = CheckCell(wsName, OfferList(Sh).ConverterVolumeColumn, iRow, ReturnMessage)
                ref = ColLetter(OfferList(Sh).ConverterVolumeColumn) & CStr(iRow)
                If stat = CellHasError Then
                    i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, ConversionFactor, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                ElseIf stat = CellIsStrNumberComma Then
                    i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_comma"), ref), ErrorType, ConversionFactor, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                ElseIf stat = CellIsStrNumberPoint Then
                    i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_point"), ref), ErrorType, ConversionFactor, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                ElseIf stat = CellIsstring Then
                    i = RepportMessage(printf(tTxt("Vol_Convertion_factor_contains_text"), ref), ErrorType, ConversionFactor, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                End If
                If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
            Next iRow
        End If
        'LDM
        If OfferList(Sh).ConverterTruckColumn > 0 Then
            For iRow = DataStartRow To LastDataRow
                stat = CheckCell(wsName, OfferList(Sh).ConverterTruckColumn, iRow, ReturnMessage)
                ref = ColLetter(OfferList(Sh).ConverterTruckColumn) & CStr(iRow)
                If stat = CellHasError Then
                    i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, ConversionFactor, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                ElseIf stat = CellIsStrNumberComma Then
                    i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_comma"), ref), ErrorType, ConversionFactor, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                ElseIf stat = CellIsStrNumberPoint Then
                    i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_point"), ref), ErrorType, ConversionFactor, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                ElseIf stat = CellIsstring Then
                    i = RepportMessage(printf(tTxt("LDM_Convertion_factor_contains_text"), ref), ErrorType, ConversionFactor, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                End If
                If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
            Next iRow
        End If
        
        '--- Test Surcharges
        'Find all the normal surcharges on the sheet
        LastCol = Last(cLASTCOL, Worksheets(wsName).Rows(1))
        ScCounter = 0
        For iCol = 1 To LastCol
            ColName = Worksheets(wsName).Cells(1, iCol).Value2
            If ColName = SurchargeRateColumnName Then
                ColName = Worksheets(wsName).Cells(1, iCol + 1).Value2
                If ColName = SurchargeRateUnitColumnName Then
                    ColName = Worksheets(wsName).Cells(1, iCol + 2).Value2
                    If ColName = MinSurchargeColumnName Then
                        ColName = Worksheets(wsName).Cells(1, iCol + 3).Value2
                        If ColName = MaxSurchargeColumnName Then
                            SCList(ScCounter).RateCol = iCol
                            SCList(ScCounter).UnitCol = iCol + 1
                            SCList(ScCounter).MinCol = iCol + 2
                            SCList(ScCounter).MaxCol = iCol + 3
                            ScCounter = ScCounter + 1
                            iCol = iCol + 3
                        End If
                    End If
                End If
            End If
        Next iCol
        If ScCounter = 0 Then   'No SC found
            i = RepportMessage(tTxt("No_Normal_Surcharges_Found"), RemarkType, SurchargeArea, wsName, "")
        Else
            For iSC = 0 To ScCounter - 1
                '- Header
                stat = CheckCell(wsName, SCList(iSC).UnitCol, OfferNameRow, ReturnMessage)
                ref = ColLetter(SCList(iSC).UnitCol) & CStr(OfferNameRow)
                If stat = CellHasError Then
                    i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, SurchargeArea, wsName, ref)
                    If i > cMaxLogEntries Then GoTo Overrun_Exit
                ElseIf stat = CellIsstring Then 'Surcharge with name found so lets check it
                    'calc source
                    stat = CheckCell(wsName, SCList(iSC).UnitCol, OfferDataSourceIDRow, ReturnMessage)
                    ref = ColLetter(SCList(iSC).UnitCol) & CStr(OfferDataSourceIDRow)
                    If stat = CellHasError Then
                        i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, SurchargeArea, wsName, ref)
                        If i > cMaxLogEntries Then GoTo Overrun_Exit
                    ElseIf stat = CellIsstring Then
                        i = RepportMessage(printf(tTxt("SC_Calculation_Source_not_number"), ref), ErrorType, SurchargeArea, wsName, ref)
                        If i > cMaxLogEntries Then GoTo Overrun_Exit
                    End If
                    'Currency
                    stat = CheckCell(wsName, SCList(iSC).UnitCol, OfferCurrencyRow, ReturnMessage)
                    ref = ColLetter(SCList(iSC).UnitCol) & CStr(OfferCurrencyRow)
                    If stat = CellHasError Then
                        i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, SurchargeArea, wsName, ref)
                    End If
                    '- SC data
                    For iRow = DataStartRow To LastDataRow
                        'Rate
                        stat = CheckCell(wsName, SCList(iSC).RateCol, iRow, ReturnMessage)
                        ref = ColLetter(SCList(iSC).RateCol) & CStr(iRow)
                        If stat = CellHasError Then
                            i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        ElseIf stat = CellIsStrNumberComma Then
                            i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_comma"), ref), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        ElseIf stat = CellIsStrNumberPoint Then
                            i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_point"), ref), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        ElseIf stat = CellIsstring Then
                            i = RepportMessage(printf(tTxt("SC_Rate_not_number"), ref), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        End If
                        'unit
                        stat = CheckCell(wsName, SCList(iSC).UnitCol, iRow, ReturnMessage)
                        T = UCase(ReturnMessage)
                        ref = ColLetter(SCList(iSC).UnitCol) & CStr(iRow)
                        If stat = CellHasError Then
                            i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        ElseIf stat = CellIsNumeric Then
                            i = RepportMessage(printf(tTxt("SC_RateUnit_not_legal"), ref, ReturnMessage), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        ElseIf Not (T = "" Or T = "PCT" Or T = "VOL" Or T = "UNIT" Or Left(T, 8) = "INTERVAL" Or T = "ONREQ" Or T = "NOTAVAIL" Or T = "INCLUDED" Or T = "UNKNOWN") Then
                            i = RepportMessage(printf(tTxt("SC_RateUnit_not_legal"), ref, ReturnMessage), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        End If
                        'Min
                        stat = CheckCell(wsName, SCList(iSC).MinCol, iRow, ReturnMessage)
                        ref = ColLetter(SCList(iSC).MinCol) & CStr(iRow)
                        If stat = CellHasError Then
                            i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        ElseIf stat = CellIsStrNumberComma Then
                            i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_comma"), ref), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        ElseIf stat = CellIsStrNumberPoint Then
                            i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_point"), ref), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        ElseIf stat = CellIsstring Then
                            i = RepportMessage(printf(tTxt("SC_Min_not_number"), ref), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        End If
                        'Max
                        stat = CheckCell(wsName, SCList(iSC).MaxCol, iRow, ReturnMessage)
                        ref = ColLetter(SCList(iSC).MaxCol) & CStr(iRow)
                        If stat = CellHasError Then
                            i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        ElseIf stat = CellIsStrNumberComma Then
                            i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_comma"), ref), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        ElseIf stat = CellIsStrNumberPoint Then
                            i = RepportMessage(printf(tTxt("The_pricecell_contains_number_with_point"), ref), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        ElseIf stat = CellIsstring Then
                            i = RepportMessage(printf(tTxt("SC_Max_not_number"), ref), ErrorType, SurchargeArea, wsName, ref)
                            If i > cMaxLogEntries Then GoTo Overrun_Exit
                        End If
                        If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
                    Next iRow
                End If
            Next iSC
        End If
        
    Next Sh

Overrun_Exit:
    TestOfferSheet = TestSettings.ErrorCount
    If TestSettings.RunMode = Overrun Then 'remove last message
        TestSettings.Pointer = TestSettings.Pointer - 1
    End If
    '--- Done testing ---
    'i = RepportMessage(printf(tTxt("Testing_ended_at"), Format(Now, "Hh:Nn.Ss")), RemarkType, MiscellaneousArea, "", "")
    
    'Restore the initial active sheet
    Worksheets(InitialActiveSheet).Activate
    
End Function


Function TestInvoiceSheet(wsName As String, headerRow As Long, fromCol As Long, toCol As Long, m3Col As Long, ldmCol As Long, kgCol As Long, amountCol As Long, priceCol As Long) As Long
'--------------------------------------------------------------------------------------------------------------
'--- Test the Invoice sheet
'---
'--- Input:     The Invoice Sheetname
'---            The Headerrow number
'---            All the columns the user selected (0 = not selected)
'---
'--- Output:    Number of errors found in the Invoice sheet
'---            All results is stores into the TestLog()
'---            Also 'TestSettings' is containing some data (WarningCount etc)
'--- History:
'---    21-10-2018 Initial
'--------------------------------------------------------------------------------------------------------------
    
    Dim FirstDataRow As Long
    Dim LastDataRow As Long
    Dim StartErrorCount As Long
    Dim ErrorCount As Long
    Dim ReturnMessage As String
    Dim stat As CellStatusEnum
    Dim ref As String
    Dim InitialActiveSheet As String
    Dim i As Long
    Dim rw As Long
    Dim UsedCol As Long
    Dim BlanksFound As Long
    Dim NumOfBlanksAllowed As Long
    Dim Found As Boolean
    Dim temp As String
    Dim InvoiceDataEndCol As Long
    Dim PctComplete As Single, LastTime As Long, StartTime As Double, Timeused As Single, UpdatesPerSecond As Long, TotalAntalLinier As Long, CalculatedRows As Long
    Dim sFrom As String
    Dim sTo As String

    ErrorCount = 0
    NumOfBlanksAllowed = -1
    StartTime = Timer   'Get start time
    
    StartErrorCount = TestSettings.ErrorCount ' Get the errorscount in case the OfferTest was run first
    
    If TestSettings.RunMode = Overrun Then 'Do not test if overrun already exist
        TestInvoiceSheet = 0
        Exit Function
    End If
    
    '--- Init
    InitialActiveSheet = ActiveWorkbook.ActiveSheet.Name        'Save active sheet
    
    If m3Col > 0 Then NumOfBlanksAllowed = NumOfBlanksAllowed + 1
    If ldmCol > 0 Then NumOfBlanksAllowed = NumOfBlanksAllowed + 1
    If kgCol > 0 Then NumOfBlanksAllowed = NumOfBlanksAllowed + 1
    If amountCol > 0 Then NumOfBlanksAllowed = NumOfBlanksAllowed + 1
    'Get the decimal character
    DecimalCharacter = Application.International(xlDecimalSeparator)


    'Find the Datarows
    FirstDataRow = headerRow + 1
    If fromCol > 0 Then
        LastDataRow = Last(cLASTROW, Worksheets(wsName).Columns(fromCol))
        UsedCol = fromCol
    ElseIf priceCol > 0 Then
        LastDataRow = Last(cLASTROW, Worksheets(wsName).Columns(priceCol))
        UsedCol = priceCol
    Else
        LastDataRow = Last(cLASTROW, Worksheets(wsName).Columns(1))
        UsedCol = 1
    End If
    TotalAntalLinier = LastDataRow - FirstDataRow
    
    '--- Basic checks
    
    'Tjek if there are any datarows to test
    If LastDataRow < FirstDataRow Then
        ref = ""
        i = RepportMessage(tTxt("NoDataRowsFound"), ErrorType, StatGenerelArea, wsName, ref)
        ErrorCount = ErrorCount + 1
    End If
    
    If m3Col + ldmCol + kgCol + amountCol = 0 Then
        ref = ""
        i = RepportMessage(tTxt("NoAmountDropDownGiven"), ErrorType, StatGenerelArea, wsName, ref)
        ErrorCount = ErrorCount + 1
    End If
    
    'if Basic test has error then return those
    If ErrorCount > 0 Then
        TestInvoiceSheet = ErrorCount
        Exit Function
    End If
    
    'Get list of Offersheet(s) (may be 1 or more). Info stored in public OfferList
    Call ExcelSupport.FillOfferList(FormOfferName)
    
    Worksheets(wsName).Activate    'We have to activate the sheet to test, to avoid error 1004
    
    'Read all data of the invoice sheet
    InvoiceDataEndCol = Last(cLASTCOL, Worksheets(wsName).Rows(InvoiceSettings.headerRow))
    TestDataBlock = ActiveWorkbook.Worksheets(wsName).Range( _
                    ActiveWorkbook.Worksheets(wsName).Cells(1, 1), _
                    ActiveWorkbook.Worksheets(wsName).Cells(LastDataRow, InvoiceDataEndCol)).Value
                    
    i = RepportMessage(printf(tTxt("DoingSheet"), wsName), RemarkType, MiscellaneousArea, wsName, "")

    UpdatesPerSecond = 1
    StartTime = Timer
    LastTime = Int(Timer * UpdatesPerSecond)

    '--- Main Testing
    For rw = FirstDataRow To LastDataRow
        BlanksFound = 0
        CalculatedRows = CalculatedRows + 1
        If (LastTime < Int(Timer * UpdatesPerSecond)) Then              'Opdater statuslinien x gange i sekundet
            LastTime = Int(Timer * UpdatesPerSecond)
            PctComplete = CalculatedRows / TotalAntalLinier
            Timeused = Timer - StartTime
            temp = printf(Txt("Statusbar_TestInvoice"), Format(PctComplete, "0%"), Int(TotalAntalLinier / CalculatedRows * Timeused - Timeused + 1), (CalculatedRows - 1), TotalAntalLinier)
            Application.StatusBar = temp
'            Application.StatusBar = "Testing Invoicesheet. Row: " & rw & " (" & Int(Timeused) & " sec.)"
            DoEvents
        End If
                
        'fromCol
        stat = CheckCell2(wsName, fromCol, rw, ReturnMessage)
        ref = ColLetter(fromCol) & CStr(rw)
        If stat = CellHasError Then
            i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, StatDepartureArea, wsName, ref)
        ElseIf stat = CellIsEmpty Then
            i = RepportMessage(printf(tTxt("Shipper_Empty"), ref, ReturnMessage), ErrorType, StatDepartureArea, wsName, ref)
        Else
            sFrom = ReturnMessage
            Found = CheckDepDestExist(ReturnMessage, "")
            If Not Found Then
                i = RepportMessage(printf(tTxt("ShipperNotFound"), ReturnMessage, ref), WarningType, StatDepartureArea, wsName, ref)
            End If
        End If
        If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit

        'toCol
        stat = CheckCell2(wsName, toCol, rw, ReturnMessage)
        ref = ColLetter(toCol) & CStr(rw)
        If stat = CellHasError Then
            i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, StatDestinationArea, wsName, ref)
        ElseIf stat = CellIsEmpty Then
            i = RepportMessage(printf(tTxt("Consignee_Empty"), ref, ReturnMessage), ErrorType, StatDestinationArea, wsName, ref)
        Else
            sTo = ReturnMessage
            Found = CheckDepDestExist("", ReturnMessage)
            If Not Found Then
                i = RepportMessage(printf(tTxt("ConsigneeNotFound"), ReturnMessage, ref), WarningType, StatDestinationArea, wsName, ref)
            End If
        End If
        If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
        
        'Check for combination
        Found = CheckDepDestExist(sFrom, sTo)
        If Not Found Then
            i = RepportMessage(printf(cTxt("Error.FromToCombinationNotFound"), sFrom, sTo), WarningType, DepartDestinationCombi, wsName, ref)
        End If


        'm3Col
        If m3Col > 0 Then
            stat = CheckCell2(wsName, m3Col, rw, ReturnMessage)
            ref = ColLetter(m3Col) & CStr(rw)
            If stat = CellHasError Then
                i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, StatM3Area, wsName, ref)
            ElseIf stat = CellIsstring Then
                i = RepportMessage(printf(tTxt("ErrNotNumeric"), ref, ReturnMessage), ErrorType, StatM3Area, wsName, ref)
            ElseIf stat = CellIsEmpty Then
                BlanksFound = BlanksFound + 1
            End If
            If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
        End If
        
        'ldmCol
        If ldmCol > 0 Then
            stat = CheckCell2(wsName, ldmCol, rw, ReturnMessage)
            ref = ColLetter(ldmCol) & CStr(rw)
            If stat = CellHasError Then
                i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, StatLdmArea, wsName, ref)
            ElseIf stat = CellIsstring Then
                i = RepportMessage(printf(tTxt("ErrNotNumeric"), ref, ReturnMessage), ErrorType, StatLdmArea, wsName, ref)
            ElseIf stat = CellIsEmpty Then
                BlanksFound = BlanksFound + 1
            End If
            If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
        End If

        'kgCol
        If kgCol > 0 Then
            stat = CheckCell2(wsName, kgCol, rw, ReturnMessage)
            ref = ColLetter(kgCol) & CStr(rw)
            If stat = CellHasError Then
                i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, StatKgArea, wsName, ref)
            ElseIf stat = CellIsstring Then
                i = RepportMessage(printf(tTxt("ErrNotNumeric"), ref, ReturnMessage), ErrorType, StatKgArea, wsName, ref)
            ElseIf stat = CellIsEmpty Then
                BlanksFound = BlanksFound + 1
            End If
            If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
        End If

        'amountCol (Chargable)
        If amountCol > 0 Then
            stat = CheckCell2(wsName, amountCol, rw, ReturnMessage)
            ref = ColLetter(amountCol) & CStr(rw)
            If stat = CellHasError Then
                i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, StatChargableArea, wsName, ref)
            ElseIf stat = CellIsstring Then
                i = RepportMessage(printf(tTxt("ErrNotNumeric"), ref, ReturnMessage), WarningType, StatChargableArea, wsName, ref)
            ElseIf stat = CellIsEmpty Then
                BlanksFound = BlanksFound + 1
            End If
            If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
        End If
        
        'Combined blank check
        If BlanksFound > NumOfBlanksAllowed Then
            i = RepportMessage(printf(tTxt("RowBlank"), ref, ReturnMessage), WarningType, StatAmountArea, wsName, ref)
            If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
        End If
        
        'priceCol
        stat = CheckCell2(wsName, priceCol, rw, ReturnMessage)
        ref = ColLetter(priceCol) & CStr(rw)
        If stat = CellHasError Then
            i = RepportMessage(printf(tTxt("The_Cell_contains_an_Excel_Error"), ref, ReturnMessage), ErrorType, StatPriceArea, wsName, ref)
        ElseIf stat = CellIsstring Then
            i = RepportMessage(printf(tTxt("ErrNotNumeric"), ref, ReturnMessage), ErrorType, StatPriceArea, wsName, ref)
        End If
        If TestSettings.RunMode = Overrun Then GoTo Overrun_Exit
    Next rw

    i = RepportMessage(printf(tTxt("RowsTested"), FirstDataRow, LastDataRow, Round(Timer - StartTime, 1)), RemarkType, MiscellaneousArea, wsName, "")
    
Overrun_Exit:
    TestInvoiceSheet = TestSettings.ErrorCount - StartErrorCount
    If TestSettings.RunMode = Overrun Then 'remove last message
        TestSettings.Pointer = TestSettings.Pointer - 1
    End If
    '--- Done testing Invoice sheet ---
    Erase TestDataBlock
    Application.StatusBar = False
    'Restore the initial active sheet
    Worksheets(InitialActiveSheet).Activate
    
End Function
    

Sub test()
    Dim temp1 As Variant
    Dim temp2 As Variant
    Dim temp3 As Variant
    Dim i As Long
    temp1 = 1.2
    temp2 = "Abc"
    Debug.Print Now
    For i = 1 To 1000000
        'temp3 = IsNumeric(temp1)
        temp3 = IsNumeric(temp2)
    Next i
    Debug.Print Now
End Sub




Attribute VB_Name = "DA_AIR_Fr8B_Demo_Invoice"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_AIR_Fr8B_Demo_Offer1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub


Attribute VB_Name = "DA_AIR_Fr8B_Demo_Offer2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_AIR_Fr8B_Demo_Offer3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_AIR_Fr8B_Demo_Offer4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_Air1_Intro2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_Air2_Pre"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_Air3_Main"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_Air4_Post"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_FCL1_Intro"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_FCL2_Pre"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_FCL3_Main"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_FCL4_Post"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_FCL_Fr8B_Demo_Invoice"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_FCL_Fr8B_Demo_Offer1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_FCL_Fr8B_Demo_Offer2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_Interval_A"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_Interval_B"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_Interval_C"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_LCL1_Intro"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_LCL2_Pre"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_LCL3_Main"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_LCL4_Post"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_LCL_Fr8B_Demo_Invoice"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_LCL_Fr8B_Demo_Offer1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_LCL_Fr8B_Demo_Offer2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_LCL_Fr8B_Demo_Offer3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_LCL_Fr8B_Demo_Offer4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_LCL_Fr8B_Demo_Offer5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_LCL_Fr8B_Demo_Offer6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_Palet1_Intro"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_Palet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_Palet3_Tax"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_Parcel1_Intro"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_Parcel2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_Road1_Intro"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_Road2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_Road2_tax"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_Road3_Zone"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_Road3_Zone1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_Road_Fr8B_Demo_Invoice"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_Road_Fr8B_Demo_Offer1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_Road_Fr8B_Demo_Offer2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DA_Road_Fr8C_Demo_Invoice"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DA_Road_Fr8C_Demo_Offer"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_AIR_Fr8B_Demo_Invoice"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_AIR_Fr8B_Demo_Offer1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_AIR_Fr8B_Demo_Offer2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_AIR_Fr8B_Demo_Offer3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_AIR_Fr8B_Demo_Offer4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_Air1_Intro2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_Air2_Pre"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_Air3_Main"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_Air4_Post"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_FCL1_Intro"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_FCL2_Pre"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_FCL3_Main"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_FCL4_Post"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_FCL_Fr8B_Demo_Invoice"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_FCL_Fr8B_Demo_Offer1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_FCL_Fr8B_Demo_Offer2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_Interval_A"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_Interval_B"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_Interval_C"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_LCL1_Intro"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_LCL2_Post"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_LCL3_Main"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_LCL4_Pre"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_LCL_Fr8B_Demo_Invoice"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_LCL_Fr8B_Demo_Offer1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_LCL_Fr8B_Demo_Offer2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_LCL_Fr8B_Demo_Offer3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_LCL_Fr8B_Demo_Offer4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_LCL_Fr8B_Demo_Offer5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_LCL_Fr8B_Demo_Offer6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_Palet1_Intro"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_Palet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_Palet3_Tax"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_Parcel1_Intro"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_Parcel2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_Parcel3_Zone"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_Parcel3_Zone1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_Road1_Intro"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_Road2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_Road3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_Road3_Tax"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_Road_Fr8B_Demo_Invoice"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_Road_Fr8B_Demo_Offer1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_Road_Fr8B_Demo_Offer2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "DE_Road_Fr8C_Demo_Invoice"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DE_Road_Fr8C_Demo_Offer"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call InitializeSheet
End Sub

Sub cMx()
    Call ChangeMatrix
End Sub

Sub cSur()
    Call ChangeSurcharge
End Sub

Sub cImport()
    Call OnFr8ToolImport
End Sub



Attribute VB_Name = "Debuging"
Option Explicit
Option Private Module

Public Const DebugModuleVersion As String = "23-01-2019"

Public Const DebugMode As Boolean = False
Public Const DebugSheetName As String = "DebugInfo"
Public DebugNextDataRow As Long

Public Sub SaveDebugInfo(CallingSub As String, Message As String)
    Dim dt As String
    If DebugNextDataRow < 1 Then
        Call InitDebug
    End If
    dt = Format(Now, "dd-mm-yyyy hh:ss")
    Worksheets(DebugSheetName).Cells(DebugNextDataRow, 1) = dt
    Worksheets(DebugSheetName).Cells(DebugNextDataRow, 2) = CallingSub
    Worksheets(DebugSheetName).Cells(DebugNextDataRow, 3) = Message
    DebugNextDataRow = DebugNextDataRow + 1
    Debug.Print dt & " -> " & CallingSub & " -> " & Message
End Sub

Private Sub InitDebug()
    
    If Not sheetExists(DebugSheetName) Then
        ThisWorkbook.Sheets.Add(after:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.count)).Name = DebugSheetName
    End If
    DebugNextDataRow = Last(cLASTROW, Worksheets(DebugSheetName).Columns(1))
    If DebugNextDataRow = 0 Then
        DebugNextDataRow = 1
    End If
End Sub

Public Function ReadOfficeUIFileContent()
    Dim hFile As Long
    Dim Path As String, Filename As String, Text As String, TextLine As String, user As String
    
    hFile = FreeFile
    user = Environ("Username")
    Path = "C:\Users\" & user & "\AppData\Local\Microsoft\Office\"
    Filename = "Excel.officeUI"
    
    Open Path & Filename For Input Access Read As hFile
    
    Do Until EOF(hFile)
        Line Input #hFile, TextLine
        Text = Text & TextLine & vbNewLine
    Loop
    
    Close hFile
    ReadOfficeUIFileContent = Text
End Function
Attribute VB_Name = "ExcelSupport"
Option Explicit
Option Private Module

Public Const SupportModuleVersion As String = "23-01-2019"

'---------------------------------------
'--- Excel Sheet Support functions
'---------------------------------------

Public Function ExportSheet()   'Bruges ikke mere
    'Creates a new file .xlsx in the same folder as the open file
    'The new file is getting the Active Sheets name
    'The active sheet is copyed to the new file.
    'The new file is closed
    ' xx-xx-2018 Initial
    ' 23-01-2019 Added copy Column width settings
    ' 23-01-2019 Added support if source has filters set and there are subtotal formula(s) that need to get new refences.
    
    Dim Path As String
    Dim SrcBook As Workbook
    Dim SrcSheet As Worksheet
    Dim NewFileName As String   'Incl full path
    Dim Sheetname As String
    Dim NewBook As Workbook
    Dim sDate As String
    Dim rng As String
    Dim LastC As Long
    Dim LastR As Long
    Dim DstLastR As Long
    Dim ColWidth() As Double
    Dim iCol As Long
    Dim RefStart As String
    Dim RefEnd As String
    Dim RefFormula As String
    Dim ColonIs As Long
    Dim sTemp As String

    Application.ScreenUpdating = False                                  'Sl|fffd| sk|fffd|rmopdatering fra
    Application.Calculation = xlCalculationManual                       'Sl|fffd| manual beregning til
    
    'Gather source info
    Set SrcBook = ThisWorkbook
    Set SrcSheet = ActiveSheet

    'Find Filename
    sDate = Format(Now, "_(yyyy-mm-dd_hh.mm)")
    Path = Application.ThisWorkbook.Path
    Sheetname = ActiveSheet.Name
    NewFileName = Path & "\Fr8-Export_" & Sheetname & sDate & ".xlsx"
    
    'Create new file
    Set NewBook = Workbooks.Add
    'Rename sheet
    NewBook.Sheets(1).Name = Sheetname
    'Copy Sheet
    'SrcSheet.Cells.Copy        'This sometimes causes a huge file
    LastC = Last(cLASTCOL, SrcSheet.Cells)
    LastR = Last(cLASTROW, SrcSheet.Cells)
    If LastC > 0 And LastR > 0 Then
        'Gather sources Col width
        ReDim ColWidth(LastC + 1)
        For iCol = 1 To LastC
            ColWidth(iCol) = SrcSheet.Columns(iCol).ColumnWidth
        Next iCol
        
        'Copy the data
        rng = "A1:" & Col_Letter(LastC) & LastR
        SrcSheet.Range(rng).Copy
        Sheets(Sheetname).Cells.PasteSpecial Paste:=xlPasteAll
        
        'Set the Column width to the same in the destination
        For iCol = 1 To LastC
            Sheets(Sheetname).Columns(iCol).ColumnWidth = ColWidth(iCol)
        Next iCol
        
        'If a filter is active in the scr sheets, then check if there are =subtotal() formular that needs changing the reference
        If SrcSheet.AutoFilterMode Then
            'loop through the last row to see if there are any subtotal formulas
            DstLastR = Last(cLASTROW, Sheets(Sheetname).Cells)
            For iCol = 1 To LastC
                sTemp = SrcSheet.Cells(LastR, iCol).Formula
                If Left(sTemp, 10) = "=SUBTOTAL(" Then
                    ColonIs = InStr(1, sTemp, ":", vbTextCompare)
                    RefFormula = Left(sTemp, ColonIs)                                       'Reuse the original formular up to the semicolon eg in "=SUBTOTAL(109,A3:A9928)" use "=SUBTOTAL(109,A3:"
                    RefFormula = RefFormula & ColLetter(iCol) & CStr(DstLastR - 2) & ")"    'Add the ending reference
                    Sheets(Sheetname).Cells(DstLastR, iCol).Formula = RefFormula            'Store the new formula
                End If
            Next iCol
        End If
        
        'Always show headerrow on scroll
        If OutputInfo.headerRow < 1 Then OutputInfo.headerRow = 1
        Worksheets(Sheetname).Activate
        Worksheets(Sheetname).Cells(OutputInfo.headerRow + 1, 1).Select
        ActiveWindow.FreezePanes = True
        Worksheets(Sheetname).Cells(1, 1).Select
        
        On Error Resume Next
        With NewBook
            .SaveAs Filename:=NewFileName
            .Close
        End With
        On Error GoTo 0
    Else
        NewFileName = ""
    End If
    ExportSheet = NewFileName
    Call CleanUp
End Function

'returns a list of open Excel filenames
Function GetOpenExcelFiles() As String()
    'Application.EnableEvents = True
    Dim FileNames() As String, i As Long
    Dim wb As Workbook
    i = 0
    For Each wb In Application.Workbooks
        FileNames(i) = wb.Name
        i = i + 1
    Next
    If i = 0 Then
        FileNames(0) = ""
    End If
    GetOpenExcelFiles = FileNames
End Function

Function GetSheetNameFromOffer(pOfferName As String) As String
    'Find (the main) offersheet name and return that name
    Dim temp As String
    Dim Fr8Type As Long
    Dim ws As Worksheet
    'Debug.Print "-- wsName: " & wsName

    GetSheetNameFromOffer = ""
    
    For Each ws In ActiveWorkbook.Worksheets
        If ws.Visible = xlSheetVisible Then
            temp = CheckIfOfferSheet(ws.Name)
            If temp = pOfferName Then
                ' Get the type from cell B2
                temp = ws.Range("B2").Value2
                If temp <> "" Then
                    temp = Left(temp, InStr(temp, ":") - 1)
                    Fr8Type = ConvertToLongInteger(temp)
                    If Fr8Type >= NormalType_min And Fr8Type <= NormalType_Max Then    'Type ok?
                        GetSheetNameFromOffer = ws.Name
                        Exit Function
                    End If
                End If
            End If
        End If
    Next
End Function


Public Function CheckIfOfferSheet(wsName As String) As String
    ' Check if the Worksheet is an active Fr8Partner template
    ' Returns the offername (Forwarder name) or blank if not an active template
    Dim temp As String
    Dim Fr8Type As Long
    Dim ws As Worksheet
    'Debug.Print "-- wsName: " & wsName

    CheckIfOfferSheet = ""
    Set ws = ActiveWorkbook.Worksheets(wsName)
    If ws.Visible = xlSheetVisible Then
        ' Cell A1 should be "Fr8Origin"
        On Error Resume Next    'Handle if A1 cell has en error (DIV/0 etc)
        temp = ws.Cells(1, 1)
        On Error GoTo 0
        If temp = "Fr8Origin" Then  'Fr8partner template?
            ' Get the type from cell B2
            temp = ws.Range("B2").Value2
            If temp <> "" Then
                temp = Left(temp, InStr(temp, ":") - 1)
                Fr8Type = ConvertToLongInteger(temp)
                If Fr8Type >= NormalType_min And Fr8Type <= NormalType_Max Then    'Type ok?
                    ' Check if it has a forwarder name (B3)
                    temp = ws.Range("B3").Value2
                    If temp <> "" Then
                        CheckIfOfferSheet = Replace(temp, Chr(10), "")
                        'CheckIfOfferSheet = temp
                    End If
                End If
            End If
        End If
    End If
End Function

Public Function CheckIfOfferOrPrePostSheet(wsName As String) As String
    ' Check if the Worksheet is an active Fr8Partner template
    ' Returns the offername (Forwarder name) or blank if not an active template
    Dim temp As String
    Dim Fr8Type As Long
    Dim ws As Worksheet

    CheckIfOfferOrPrePostSheet = ""
    Set ws = ActiveWorkbook.Worksheets(wsName)

    ' Cell A1 should be "Fr8Origin"
    On Error Resume Next    'Handle if A1 cell has en error (DIV/0 etc)
    temp = ws.Cells(1, 1)
    On Error GoTo 0
    If temp = "Fr8Origin" Then  'Fr8partner template?
        ' Get the type from cell B2
        temp = ws.Range("B2").Value2
        If temp <> "" Then
            temp = Left(temp, InStr(temp, ":") - 1)
            Fr8Type = ConvertToLongInteger(temp)
            If Fr8Type >= NormalType_min And Fr8Type <= PrePostType_Max Then    'Type ok?
                ' Check if it has a forwarder name (B3)
                temp = ws.Range("B3").Value2
                If temp <> "" Then
                    CheckIfOfferOrPrePostSheet = Replace(temp, Chr(10), "")
                End If
            End If
        End If
    End If
End Function

Public Function CheckIfZoneSheet(wsName As String) As Boolean
    ' Check if the Worksheet is an active Fr8Partner zone template
    ' Returns the true if an active zone sheet
    Dim temp As String
    Dim Fr8Type As Long
    Dim ws As Worksheet

    CheckIfZoneSheet = False
    Set ws = ActiveWorkbook.Worksheets(wsName)

    ' Cell A1 should be "Fr8ZoneCountryCode"
    On Error Resume Next    'Handle if A1 cell has en error (DIV/0 etc)
    temp = ws.Cells(1, 1)
    On Error GoTo 0
    If temp = "Fr8ZoneCountryCode" Then  'Fr8partner zone template?
        ' Get the type from cell B2
        temp = ws.Range("B2").Value2
        If temp <> "" Then
            temp = Left(temp, InStr(temp, ":") - 1)
            Fr8Type = ConvertToLongInteger(temp)
            If Fr8Type >= ZoneType_Min And Fr8Type <= ZoneType_Max Then    'Type ok?
                ' Check if it has a forwarder name (B3)
                temp = ws.Range("B3").Value2
                If temp <> "" Then
                    CheckIfZoneSheet = True
                End If
            End If
        End If
    End If
End Function

Public Function CheckIfIntervalSheet(wsName As String) As Long
    ' Check if the Worksheet is an active Fr8Partner interval sheet
    ' Returns the Interval type number (IntervalA = 20, IntervalB = 21, IntervalC = 22) (0 if not found)
    Dim temp As String
    Dim Fr8Type As Long
    Dim ws As Worksheet

    CheckIfIntervalSheet = 0    'Mark 'Not found' until otherwise proven
    Set ws = ActiveWorkbook.Worksheets(wsName)

    ' Cell A1 should be "Fr8Origin"
    On Error Resume Next    'Handle if A1 cell has en error (DIV/0 etc)
    temp = ws.Cells(1, 1)
    On Error GoTo 0
    If temp = "Fr8Origin" Then  'Fr8partner template?
        ' Get the type from cell B2
        temp = ws.Range("B2").Value2
        If temp <> "" Then
            temp = Left(temp, InStr(temp, ":") - 1)
            Fr8Type = ConvertToLongInteger(temp)
            If Fr8Type >= IntervalType_Min And Fr8Type <= IntervalType_Max Then    'Type ok?
                ' Check if it has a forwarder name (B3)
                temp = ws.Range("B3").Value2
                If temp <> "" Then
                    CheckIfIntervalSheet = Fr8Type
                End If
            End If
        End If
    End If
End Function


Public Function GetColumnNumber(ws As String, str As String)
' Return the Columnnumber with the given content.
    Dim LastCol As Long
    Dim i As Long
    GetColumnNumber = 0
    LastCol = Last(cLASTCOL, Worksheets(ws).Rows(1))
    For i = 1 To LastCol
        If Worksheets(ws).Cells(1, i).Value = str Then
            GetColumnNumber = i
            Exit Function
        End If
    Next i
End Function

Public Sub GetOfferDataRow()
'--------------------------------------------------------------------------------------------------------------
'--- Gets the from/to data row from the offer(s)
'---
'--- Input: Struct: InvoiceData
'---        Struct: OfferList
'---
'--- Output: Struct: OfferData
'---
'--- History:
'---    08-12-2017 Initial
'---    13-11-2018 Changed to read from OfferDatablock instead of directly fra the offer sheet(s)
'--------------------------------------------------------------------------------------------------------------
    Dim iOfferList As Long
    Dim iRow As Long
    Dim Found As Boolean
    Dim InvoiceFromUpper As String
    Dim InvoiceToUpper As String
    Dim OfferFromUpper As String
    Dim OfferToUpper As String
    Dim NumberOfRows As Long
    
    If DebugMode Then Call SaveDebugInfo("GetOfferDataRow()", "Start")
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " Start of GetOfferDataRow"

    OfferData.Valid = False
    
    InvoiceFromUpper = UCase(InvoiceData.From)
    InvoiceToUpper = UCase(InvoiceData.To)
    
    For iOfferList = 0 To OfferListCount
        NumberOfRows = UBound(OfferDataBlock(iOfferList), 1)
        For iRow = OfferDataRowStart To NumberOfRows
            OfferFromUpper = UCase(Trim(OfferDataBlock(iOfferList)(iRow, OfferList(iOfferList).FromColumn)))  'Read 'From' cell
            OfferToUpper = UCase(Trim(OfferDataBlock(iOfferList)(iRow, OfferList(iOfferList).ToColumn)))      'Read 'To' cell
            If Left(OfferFromUpper, 1) = "_" Or Left(OfferToUpper, 1) = "_" Then                   'Zone?
                Found = FindInZone(InvoiceFromUpper, InvoiceToUpper, OfferFromUpper, OfferToUpper)
                If Found Then
                    Call ReadOfferRow(iOfferList, iRow)                         ' If correct 'From' and 'To' then read the offer data
                    Exit For                                                    ' and exit
                End If
            Else
                If OfferFromUpper = InvoiceFromUpper Then                           ' Check if correct 'From'
                    If OfferToUpper = InvoiceToUpper Then                           ' Check if correct 'To'
                        Found = True
                        Call ReadOfferRow(iOfferList, iRow)                         ' If correct 'From' and 'To' then read the offer data
'                        Call ReadOfferRow(OfferList(iOfferList).Sheetname, iOfferList, iRow)    ' If correct 'From' and 'To' then read the offer data
                        Exit For                                                     ' and exit
                    End If
                End If
            End If
            If Found Then Exit For
        Next iRow
        If Found Then Exit For
    Next iOfferList
    
    If Not Found Then
        OfferData.ErrorMessage = printf(cTxt("Error.FromToCombinationNotFound"), InvoiceData.From, InvoiceData.To)
    End If
    If DebugMode Then Call SaveDebugInfo("GetOfferDataRow()", "End")
End Sub

Public Sub ReadOfferRow(OfferIndex As Long, DataRow As Long)
'--------------------------------------------------------------------------------------------------------------
'--- Reads the data from the Offerrow in the given worksheet
'---
'--- Input: OfferIndex      (Parameter) Index to use in the Offerdatablock array
'---        Datarow         (Parameter) The row number to read
'---        OfferList       (Global)
'---        OfferDataBlock  (Global)
'---
'--- Output: OfferData      (Global)
'---
'--- History:
'---    11-12-2017 Initial
'---    01-08-2018 handle if no convertion factor coloums in offer
'---    13-11-2018 Changed to read from OfferDatablock instead of directly fra the offer sheet(s)
'--------------------------------------------------------------------------------------------------------------
    Dim temp As Variant
    Dim CellValue As String
    Dim iTemp As Long
    Dim sTemp As String
    Dim iCol As Long
    Dim IntervalNumber As Long
    Dim ErrorMessage As String
    Dim ws As String

    ErrorMessage = ""
    ws = OfferList(OfferIndex).Sheetname
    '-- Headerinfo:
    
    'Calculation Mode
    sTemp = OfferDataBlock(OfferIndex)(OfferNameRow, OfferList(OfferIndex).PriceColumn)
    iTemp = GetLeftNumber(sTemp)
    'iTemp = GetLeftNumber(Worksheets(ws).Cells(OfferNameRow, OfferList(OfferIndex).PriceColumn).Value2)
    If iTemp = 0 Then
        OfferData.CalculationMode = CalculationModeType.NormalMode
    Else
        OfferData.CalculationMode = iTemp
    End If
    
    'Advantage number
    temp = OfferDataBlock(OfferIndex)(OfferCategoryRow, OfferList(OfferIndex).PriceColumn)
    'temp = Worksheets(ws).Cells(OfferCategoryRow, OfferList(OfferIndex).PriceColumn).Value2
    If temp = "" Then
        OfferData.AdvCalcNumber = 0
    Else
        If IsNumeric(temp) Then
            OfferData.AdvCalcNumber = CDbl(temp)
        Else
            OfferData.AdvCalcNumber = 0#
        End If
    End If
    
    '--- Currency
    'Standard currency
    temp = OfferDataBlock(OfferIndex)(OfferCurrencyRow, OfferList(OfferIndex).ToColumn) 'B8
'    temp = Worksheets(ws).Cells(OfferCurrencyRow, OfferList(OfferIndex).ToColumn) 'B8
    If temp <> "" Then
        OfferData.StandardCurrency = temp
    Else
        OfferData.StandardCurrency = "EUR"    'if no standard currency the select EUR
    End If
    
    'Pricematrix currency
    temp = OfferDataBlock(OfferIndex)(OfferCurrencyRow, OfferList(OfferIndex).PriceColumn)
    'temp = Worksheets(ws).Cells(OfferCurrencyRow, OfferList(OfferIndex).PriceColumn)
    If temp <> "" Then
        OfferData.MatrixCurrency = temp
    Else 'Take StandardCurrency
        OfferData.MatrixCurrency = OfferData.StandardCurrency
    End If
    
    'Types, Units, interval and price matrix    TODO: MAKE INPUT CHECK
    IntervalNumber = 0
    For iCol = OfferList(OfferIndex).PriceColumn To OfferList(OfferIndex).LastPriceColumn
        
        'Type
        CellValue = OfferDataBlock(OfferIndex)(OfferDataTypeRow, iCol)
'        CellValue = Worksheets(ws).Cells(OfferDataTypeRow, iCol).Value2
        If CellValue = "" Then
            OfferList(OfferIndex).LastPriceColumn = iCol - 1
            Exit For
            Call ReportRunTimeError(ws, iCol, OfferDataTypeRow, cTxt("Error.Cell.Is.Empty"), cTxt("Error.In.Calculation.Type"))
        Else
            OfferData.Types(IntervalNumber) = GetLeftNumber(CellValue)
            If OfferData.Types(IntervalNumber) = 0 Then
                Call ReportRunTimeError(ws, iCol, OfferDataTypeRow, cTxt("Error.Cell.Is.Not.Numeric"), cTxt("Error.In.Calculation.Type"))
            End If
        End If
        
        'Units
        CellValue = OfferDataBlock(OfferIndex)(OfferDataUnitRow, iCol)
        'CellValue = Worksheets(ws).Cells(OfferDataUnitRow, iCol).Value2
        If CellValue = "" Then
            Call ReportRunTimeError(ws, iCol, OfferDataUnitRow, cTxt("Error.Cell.Is.Empty"), cTxt("Error.In.Unit.Type"))
        Else
            iTemp = GetLeftNumber(CellValue)
            If iTemp = 0 Then
                Call ReportRunTimeError(ws, iCol, OfferDataUnitRow, cTxt("Error.Cell.Is.Not.Numeric"), cTxt("Error.In.Unit.Type"))
            End If
        End If
        If iTemp = 5 Then iTemp = 4             'let 5:Pieces be 4 (to match the dropdown index)
        If iTemp = 7 Then iTemp = 4             'let 7:Container be 4 (pieces)
        OfferData.Units(IntervalNumber) = iTemp
        
        'Interval
        CellValue = OfferDataBlock(OfferIndex)(OfferDataIntervalRow, iCol)
        'CellValue = Worksheets(ws).Cells(OfferDataIntervalRow, iCol).Value2
        If CellValue = "" Then
            Call ReportRunTimeError(ws, iCol, OfferDataIntervalRow, cTxt("Error.Cell.Is.Empty"), cTxt("Error.In.Interval"))
        Else
            If IsNumeric(CellValue) Then
                OfferData.PriceInterval(IntervalNumber) = Abs(CellValue)
            Else
                Call ReportRunTimeError(ws, iCol, OfferDataIntervalRow, cTxt("Error.Cell.Is.Not.Numeric"), cTxt("Error.In.Interval"))
            End If
        End If
        
        'Price
        CellValue = OfferDataBlock(OfferIndex)(DataRow, iCol)
        'CellValue = Worksheets(ws).Cells(DataRow, iCol).Value2
        If CellValue = "" Then
            OfferData.Price(IntervalNumber) = 0#
        Else
            If IsNumeric(CellValue) Then
                OfferData.Price(IntervalNumber) = CellValue
            Else
                Call ReportRunTimeError(ws, iCol, DataRow, cTxt("Error.Cell.Is.Not.Numeric"), cTxt("Error.In.Price"))
            End If
        End If
        
        IntervalNumber = IntervalNumber + 1
    
    Next iCol
    
    'Clear the rest of the intervals (in case there was data there)
    iTemp = IntervalNumber
    For IntervalNumber = iTemp To cMAXPRICEINTERVALS
        OfferData.Types(IntervalNumber) = 0
        OfferData.Units(IntervalNumber) = 0
        OfferData.PriceInterval(IntervalNumber) = 0
        OfferData.Price(IntervalNumber) = 0
    Next IntervalNumber
    
    'Minimum price:
    CellValue = OfferDataBlock(OfferIndex)(DataRow, OfferList(OfferIndex).MinPriceColumn)
    'CellValue = Worksheets(ws).Cells(DataRow, OfferList(OfferIndex).MinPriceColumn).Value2
    If CellValue = "" Then
        OfferData.MinimumPrice = 0#
        'Call ReportRunTimeError(ws, OfferList(OfferIndex).MinPriceColumn, DataRow, cTxt("Error.Cell.Is.Empty"), cTxt("Error.In.Price"))
    Else
        If IsNumeric(CellValue) Then
            OfferData.MinimumPrice = CellValue
        Else
            Call ReportRunTimeError(ws, OfferList(OfferIndex).MinPriceColumn, DataRow, cTxt("Error.Cell.Is.Not.Numeric"), cTxt("Error.In.Price"))
        End If
    End If
    
    'Convertion factors
    OfferData.ConversionFactorM3 = 0
    If OfferList(OfferIndex).ConverterVolumeColumn > 0 Then
        CellValue = OfferDataBlock(OfferIndex)(DataRow, OfferList(OfferIndex).ConverterVolumeColumn)
        'CellValue = Worksheets(ws).Cells(DataRow, OfferList(OfferIndex).ConverterVolumeColumn).Value2
        If CellValue = "" Then
            OfferData.ConversionFactorM3 = 0
        Else
            If IsNumeric(CellValue) Then
                OfferData.ConversionFactorM3 = CellValue
            Else
                Call ReportRunTimeError(ws, OfferList(OfferIndex).ConverterVolumeColumn, DataRow, cTxt("Error.Cell.Is.Not.Numeric"), cTxt("Error.In.ConversionFactor"))
            End If
        End If
    End If
    
    OfferData.ConversionFactorLDM = 0
    If OfferList(OfferIndex).ConverterVolumeColumn > 0 Then
        CellValue = OfferDataBlock(OfferIndex)(DataRow, OfferList(OfferIndex).ConverterTruckColumn)
        'CellValue = Worksheets(ws).Cells(DataRow, OfferList(OfferIndex).ConverterTruckColumn).Value2
        If CellValue = "" Then
            OfferData.ConversionFactorLDM = 0
        Else
            If IsNumeric(CellValue) Then
                OfferData.ConversionFactorLDM = CellValue
            Else
                Call ReportRunTimeError(ws, OfferList(OfferIndex).ConverterTruckColumn, DataRow, cTxt("Error.Cell.Is.Not.Numeric"), cTxt("Error.In.ConversionFactor"))
            End If
        End If
    End If
    
    'Misc
    OfferData.SourceSheetName = ws
    OfferData.SourceDataBlockIndex = OfferIndex
    OfferData.SourceRow = DataRow

    'Mark that the data was read
    If ErrorMessage = "" Then
        OfferData.Valid = True
        OfferData.ErrorMessage = ""
    Else
        OfferData.Valid = False
        OfferData.ErrorMessage = ErrorMessage
    End If
End Sub

Public Sub GetOfferPrePostDataRow(SC As SurchargeListType, ByRef Offer As OfferDataType)
'--------------------------------------------------------------------------------------------------------------
'--- Gets the from/to data row from the Pre/Post offer
'---
'--- Input: InvoiceData
'---        Parameter Surcharge (SC)
'---
'--- Output: Struct: Offer (Parameter)
'---
'--- History:
'---    02-01-2018 Initial
'--------------------------------------------------------------------------------------------------------------
    Dim iOfferList As Long
    Dim iRow As Long
    Dim iFromCol As Long
    Dim iToCol As Long
    Dim Found As Boolean
    Dim InvoiceFromUpper As String
    Dim InvoiceToUpper As String
    Dim OfferFromUpper As String
    Dim OfferToUpper As String
    Dim LocalDataBlock As Variant
    Offer.Valid = False
    
    If SC.Type = PreFreightType Then
        LocalDataBlock = PreDataBlock
    Else
        LocalDataBlock = PostDataBlock
    End If
    
    InvoiceFromUpper = UCase(InvoiceData.From)
    InvoiceToUpper = UCase(InvoiceData.To)
    
    iFromCol = SC.FromColumn    'A / 1
    iToCol = SC.ToColumn        'B / 2
    
    For iRow = OfferDataRowStart To SC.LastRow
        OfferFromUpper = UCase(Trim(LocalDataBlock(iRow, iFromCol)))        'Read 'From' cell
        If OfferFromUpper = "" Then Exit For                                ' Only continue as long the From is not empty
        If OfferFromUpper = InvoiceFromUpper Then                           ' Check if correct 'From'
            OfferToUpper = UCase(Trim(LocalDataBlock(iRow, iToCol)))        'Read 'To' cell
            If OfferToUpper = InvoiceToUpper Then                           ' Check if correct 'To'
                Found = True
                Call ReadOfferPrePostRow(SC, iRow, Offer, LocalDataBlock)   ' If correct 'From' and 'To' then read the offer data
                Exit For                                                    ' and exit
            End If
        End If
    Next iRow
    
    If Not Found Then
        'Offer.ErrorMessage = printf(cTxt("Error.FromToCombinationNotFound"), InvoiceData.From, InvoiceData.To)
        SC.SelectedDetails = printf(cTxt("FromToCombinationNotFoundPriceSetTo0"), InvoiceData.From, InvoiceData.To)
        SC.Price = 0#
    End If
End Sub

Public Sub ReadOfferPrePostRow(SC As SurchargeListType, DataRow As Long, ByRef Offer As OfferDataType, ByRef DataBlock As Variant)
'--------------------------------------------------------------------------------------------------------------
'--- Reads the data from the Pre/Post sheet
'---
'--- Input:     SC              Sheetname and All column numbers of the Pre/Post sheet
'---            Datarow         to read
'---
'--- Output:    Offer (Parameter)
'---
'--- History:
'---    02-01-2018 Initial
'--------------------------------------------------------------------------------------------------------------
    Dim temp As Variant
    Dim sTemp As String
    Dim iTemp As Long
    Dim iCol As Long
    Dim IntervalNumber As Long
    
    '-- Headerinfo:
    
    'Calculation Mode
    sTemp = DataBlock(OfferNameRow, 4)
    iTemp = GetLeftNumber(sTemp)
    If iTemp = 0 Then
        Offer.CalculationMode = CalculationModeType.NormalMode
    Else
        Offer.CalculationMode = iTemp
    End If
    
    'Advantage number
    temp = DataBlock(OfferCategoryRow, 4)
    If temp = "" Then
        Offer.AdvCalcNumber = 0
    Else
        If IsNumeric(temp) Then
            Offer.AdvCalcNumber = CDbl(temp)
        Else
            Offer.AdvCalcNumber = 0#
        End If
    End If
    
    
    'Standard currency
    temp = DataBlock(OfferCurrencyRow, 2) 'B8
    If temp <> "" Then
        Offer.StandardCurrency = temp
    Else
        Offer.StandardCurrency = "EUR"    'if no standard currency the select EUR
    End If
    
    'Pricematrix currency
    temp = DataBlock(OfferCurrencyRow, 4) 'D8
    If temp <> "" Then
        Offer.MatrixCurrency = temp
    Else 'Take StandardCurrency
        Offer.MatrixCurrency = Offer.StandardCurrency
    End If
     
    'Types, Units, interval and price matrix
    IntervalNumber = 0
    For iCol = SC.PriceColumn To SC.LastPriceColumn
        sTemp = DataBlock(OfferDataTypeRow, iCol)
        Offer.Types(IntervalNumber) = GetLeftNumber(sTemp)
        sTemp = DataBlock(OfferDataUnitRow, iCol)
        iTemp = GetLeftNumber(sTemp)
        If iTemp = 5 Then iTemp = 4             'let 5:Pieces be 4 (to match the dropdown index)
        Offer.Units(IntervalNumber) = iTemp
        Offer.PriceInterval(IntervalNumber) = Abs(DataBlock(OfferDataIntervalRow, iCol))
        Offer.Price(IntervalNumber) = DataBlock(DataRow, iCol)
        IntervalNumber = IntervalNumber + 1
    Next iCol
    'Clear the rest of the intervals (in case there was data there)
    iTemp = IntervalNumber
    For IntervalNumber = iTemp To cMAXPRICEINTERVALS
        Offer.Types(IntervalNumber) = 0
        Offer.Units(IntervalNumber) = 0
        Offer.PriceInterval(IntervalNumber) = 0
        Offer.Price(IntervalNumber) = 0
    Next IntervalNumber
    
    'Minimum price:
    Offer.MinimumPrice = DataBlock(DataRow, SC.MinPriceColumn)
    
    'Convertion factors
    If SC.ConverterVolumeColumn > 0 Then
        Offer.ConversionFactorM3 = DataBlock(DataRow, SC.ConverterVolumeColumn)
    Else
        Offer.ConversionFactorM3 = 0
    End If
    If SC.ConverterTruckColumn Then
        Offer.ConversionFactorLDM = DataBlock(DataRow, SC.ConverterTruckColumn)
    Else
        Offer.ConversionFactorLDM = 0
    End If
    
    'Misc
    Offer.SourceSheetName = SC.Sheetname
    Offer.SourceRow = DataRow

    'Mark that the data was read
    Offer.Valid = True
End Sub

Public Sub GetOfferRoadTaxDataRow(SC As SurchargeListType)
'--------------------------------------------------------------------------------------------------------------
'--- Gets the from/to data row from the road tax offer
'---
'--- Input: InvoiceData
'---        Parameter Surcharge (SC)
'---
'--- Output: Struct: OfferRoadTaxData
'---
'--- History:
'---    29-12-2017 Initial
'--------------------------------------------------------------------------------------------------------------
    Dim iOfferList As Long
    Dim iRow As Long
    Dim iFromCol As Long
    Dim iToCol As Long
    Dim Found As Boolean
    Dim InvoiceFromUpper As String
    Dim InvoiceToUpper As String
    Dim OfferFromUpper As String
    Dim OfferToUpper As String
    
    OfferRoadTaxData.Valid = False
    
    InvoiceFromUpper = UCase(InvoiceData.From)
    InvoiceToUpper = UCase(InvoiceData.To)
    
    iRow = OfferDataRowStart    '10
    iFromCol = SC.FromColumn    'A / 1
    iToCol = SC.ToColumn        'B / 2
    OfferFromUpper = UCase(Trim(Worksheets(SC.Sheetname).Cells(iRow, iFromCol)))  'Read 'From' cell
    Do While (OfferFromUpper <> "")                                         ' Only continue as long the From is not empty
        If OfferFromUpper = InvoiceFromUpper Then                           ' Check if correct 'From'
        OfferToUpper = UCase(Trim(Worksheets(OfferList(iOfferList).Sheetname).Cells(iRow, iToCol)))  'Read 'To' cell
            If OfferToUpper = InvoiceToUpper Then                           ' Check if correct 'To'
                Found = True
                Call ReadOfferRoadTaxRow(SC, iRow)                          ' If correct 'From' and 'To' then read the offer data
                Exit Do                                                     ' and exit
            End If
        End If
        iRow = iRow + 1                                                     ' Check next row..
        OfferFromUpper = UCase(Trim(Worksheets(SC.Sheetname).Cells(iRow, iFromCol)))  'Read next 'From' cell
    Loop
    
    If Not Found Then
        OfferRoadTaxData.ErrorMessage = printf(cTxt("Error.FromToCombinationNotFound"), InvoiceData.From, InvoiceData.To)
        SC.FullDetails = OfferRoadTaxData.ErrorMessage
        SC.HasError = True
    End If
End Sub

Public Sub ReadOfferRoadTaxRow(SC As SurchargeListType, DataRow As Long)
'--------------------------------------------------------------------------------------------------------------
'--- Reads the data from the Road Tax sheet
'---
'--- Input:     SC              Sheetname and All column numbers of the road Tax sheet
'---            Datarow         to read
'---
'--- Output:    OfferRoadTaxData
'---
'--- History:
'---    29-12-2017 Initial
'--------------------------------------------------------------------------------------------------------------
    Dim temp As Variant
    Dim iTemp As Long
    Dim iCol As Long
    Dim IntervalNumber As Long
    
    '-- Headerinfo:
    
    'Currency
    'StandardCurrency
    OfferRoadTaxData.StandardCurrency = OfferData.StandardCurrency ' Take the standard currency from the main offer
    
    'Pricematrix currency
    temp = Worksheets(SC.Sheetname).Cells(OfferCurrencyRow, 4)
    If temp <> "" Then
        OfferRoadTaxData.MatrixCurrency = temp
    Else
        OfferRoadTaxData.MatrixCurrency = OfferRoadTaxData.StandardCurrency
    End If
      
    'Types, Units, interval and price matrix
    IntervalNumber = 0
    For iCol = SC.PriceColumn To SC.LastPriceColumn
        OfferRoadTaxData.Types(IntervalNumber) = GetLeftNumber(Worksheets(SC.Sheetname).Cells(OfferDataTypeRow, iCol).Value2)
        iTemp = GetLeftNumber(Worksheets(SC.Sheetname).Cells(OfferDataUnitRow, iCol).Value2)
        If iTemp = 5 Then iTemp = 4             'let 5:Pieces be 4 (to match the dropdown index)
        OfferRoadTaxData.Units(IntervalNumber) = iTemp
        OfferRoadTaxData.PriceInterval(IntervalNumber) = Abs(Worksheets(SC.Sheetname).Cells(OfferDataIntervalRow, iCol).Value2)
        OfferRoadTaxData.Price(IntervalNumber) = Worksheets(SC.Sheetname).Cells(DataRow, iCol).Value2
        IntervalNumber = IntervalNumber + 1
    Next iCol
    'Clear the rest of the intervals (in case there was data there)
    iTemp = IntervalNumber
    For IntervalNumber = iTemp To cMAXPRICEINTERVALS
        OfferRoadTaxData.Types(IntervalNumber) = 0
        OfferRoadTaxData.Units(IntervalNumber) = 0
        OfferRoadTaxData.PriceInterval(IntervalNumber) = 0
        OfferRoadTaxData.Price(IntervalNumber) = 0
    Next IntervalNumber
    
    'Minimum price:
    OfferRoadTaxData.MinimumPrice = Worksheets(SC.Sheetname).Cells(DataRow, SC.MinPriceColumn).Value2
    
    'Convertion factors
    OfferRoadTaxData.ConversionFactorM3 = Worksheets(SC.Sheetname).Cells(DataRow, SC.ConverterVolumeColumn).Value2
    OfferRoadTaxData.ConversionFactorLDM = Worksheets(SC.Sheetname).Cells(DataRow, SC.ConverterTruckColumn).Value2
    
    'Misc
    OfferRoadTaxData.SourceSheetName = SC.Sheetname
    OfferRoadTaxData.SourceRow = DataRow

    'Mark that the data was read
    OfferRoadTaxData.Valid = True
End Sub

Public Function sheetExists(sheetToFind As String) As Boolean
    Dim Sh As Worksheet
    sheetExists = False
    For Each Sh In Worksheets
        If sheetToFind = Sh.Name Then
            sheetExists = True
            Exit Function
        End If
    Next Sh
End Function

Public Function Last(choice As Long, rng As Range)
'Ron de Bruin, 5 May 2008
' 1 = last row          cLASTROW
' 2 = last column       cLASTCOL
' 3 = last cell         cLASTCELL
'11 = last row from top cLASTROWTOP
    Dim lrw As Long
    Dim lCol As Long

    Select Case choice

    Case cLASTROW:
        On Error Resume Next
        Last = rng.Find(What:="*", _
                        after:=rng.Cells(1), _
                        LookAt:=xlPart, _
                        LookIn:=xlFormulas, _
                        SearchOrder:=xlByRows, _
                        SearchDirection:=xlPrevious, _
                        MatchCase:=False).Row
        On Error GoTo 0

    Case cLASTCOL:
        On Error Resume Next
        Last = rng.Find(What:="*", _
                        after:=rng.Cells(1), _
                        LookAt:=xlPart, _
                        LookIn:=xlFormulas, _
                        SearchOrder:=xlByColumns, _
                        SearchDirection:=xlPrevious, _
                        MatchCase:=False).Column
        On Error GoTo 0

    Case cLASTCELL:
        On Error Resume Next
        lrw = rng.Find(What:="*", _
                       after:=rng.Cells(1), _
                       LookAt:=xlPart, _
                       LookIn:=xlFormulas, _
                       SearchOrder:=xlByRows, _
                       SearchDirection:=xlPrevious, _
                       MatchCase:=False).Row
        On Error GoTo 0

        On Error Resume Next
        lCol = rng.Find(What:="*", _
                        after:=rng.Cells(1), _
                        LookAt:=xlPart, _
                        LookIn:=xlFormulas, _
                        SearchOrder:=xlByColumns, _
                        SearchDirection:=xlPrevious, _
                        MatchCase:=False).Column
        On Error GoTo 0

        On Error Resume Next
        Last = rng.Parent.Cells(lrw, lCol).Address(False, False)
        If Err.number > 0 Then
            Last = rng.Cells(1).Address(False, False)
            Err.Clear
        End If
        On Error GoTo 0

    Case cLASTROWTOP:
        On Error Resume Next
        Last = rng.End(xlDown).Offset(1, 0).Row
        On Error GoTo 0

    End Select
End Function

Private Function FindInZone(InvoiceFrom As String, InvoiceTo As String, OfferFrom As String, OfferTo As String) As Boolean
    Dim i As Long
    Dim FindRef As String
    Dim FindZone As String
    Dim Found As Boolean
    
    Found = False

    If Not ZonesIsInitialized Then
        Call InitZones
    End If
    FindRef = ""
    FindZone = ""
    
    'What to look for?
    If Left(OfferFrom, 1) = "_" Then
        If InvoiceTo = OfferTo Then
            FindRef = InvoiceFrom
            FindZone = OfferFrom
        End If
    Else
        If InvoiceFrom = OfferFrom Then
            FindRef = InvoiceTo
            FindZone = OfferTo
        End If
    End If

    If FindRef <> "" Then
        For i = 0 To ZonesFound
            If ZoneInfo(i).RefersTo = FindRef And ZoneInfo(i).ZoneName = FindZone Then
                Found = True
                Exit For
            End If
        Next i
    End If
    FindInZone = Found
End Function

Private Sub InitZones()
'Read all the Zones in the file (up to 5)
'Stores the zonenames in the public ZoneInfo matrix
'2018-12-07: Added check if Zonename was empty

    Dim ws As Worksheet
    Dim wsName As String
    Dim IsZoneType As Boolean
    Dim ZoneIndex As Long
    Dim LastCol As Long
    Dim Col As Long
    Dim rw As Long
    Dim ZoneNameCol As Long
    Dim ZoneNumberCol As Long
    Dim ZoneTableName As String
    Dim tmp As String
    Dim ref As String
    Dim Id As String
    
    ZoneIndex = 0
    'Loop throug all sheets and read all data if found.
    For Each ws In ActiveWorkbook.Worksheets
        wsName = ws.Name
        If ws.Visible = xlSheetVisible Then
            IsZoneType = CheckIfZoneSheet(wsName)
            If IsZoneType Then
                'OK Found a sheet: Lets read the zone data
                LastCol = Last(cLASTCOL, ws.Rows(1))
                ZoneNameCol = 2
                For Col = ZoneNameCol + 1 To LastCol
                    ZoneNumberCol = 0
                    ZoneTableName = ""
                    rw = DataStartRow
                    tmp = ws.Cells(1, Col).Value2
                    If tmp = "Fr8ZoneNumber" Then
                        ZoneNumberCol = Col
                        tmp = ws.Cells(1, Col + 1).Value2
                        If tmp = "Fr8Transit1" Then
                            tmp = ws.Cells(4, Col + 1).Value2
                            If tmp <> "" Then
                                ZoneTableName = "_" & tmp & "_"
                            End If
                        End If
                    End If
                    If ZoneTableName <> "" Then 'OK we have a zonetable. Read the data
                        ref = ws.Cells(rw, ZoneNameCol)
                        Id = ws.Cells(rw, ZoneNumberCol)
                        Do While ref <> ""
                            If Id <> "" Then
                                ZoneInfo(ZoneIndex).RefersTo = ref
                                ZoneInfo(ZoneIndex).ZoneName = UCase(ZoneTableName & Id)
                                Debug.Print "ZoneInfo(" & ZoneIndex & ")= " & ZoneInfo(ZoneIndex).RefersTo & " + " & ZoneInfo(ZoneIndex).ZoneName
                                ZoneIndex = ZoneIndex + 1
                                If ZoneIndex = cMaxZoneInfo Then
                                    Call MsgBox("To many zones found. Max is " & cMaxZoneInfo & ".", vbCritical, "Error in Zone")
                                End If
                            End If
                            rw = rw + 1
                            ref = ws.Cells(rw, ZoneNameCol)
                            Id = ws.Cells(rw, ZoneNumberCol)
                        Loop
                    End If
                Next Col
            End If
        End If
    Next
    ZonesFound = ZoneIndex
    Debug.Print "ZonesFound = " & ZonesFound
    ZonesIsInitialized = True
End Sub


Private Sub ReportRunTimeError(sSheetName As String, iCol As Long, iRw As Long, sErrMessage As String, sErrCellType)
    'Used to report an input error during calculation.
    'Closes the Calc window
    'Selects the Sheet with Inout error and selects the cell
    'Shows Error window.
    'Stops execution
    
    Dim Message As String
    Dim response As Variant
    
    'Close the Calc window
    Fr8Dialog.Hide
    
    'Select the error cell
    Application.ScreenUpdating = True
    Worksheets(sSheetName).Activate
    Cells(iRw, iCol).Select
    
    'Create message
    Message = Message & sErrCellType & vbNewLine
    Message = Message & printf(cTxt("ErrLocation"), sSheetName, ColumnLetter(iCol), iRw) & vbNewLine
    Message = Message & sErrMessage & vbNewLine
    
    'Show error message in windows
    response = MsgBox(Message, vbOK + vbCritical, tTxt("ErrorFound"))
    'Remove info from statusbar
    Application.StatusBar = False
    End
    
End Sub

Public Sub FillOfferList(OfferName As String)
    'Data is stored in the Global OfferList()
    Dim i As Long
    Dim ws As Worksheet
    Dim temp As String
    Dim wsName As String
    
    'Clear list
    For i = 0 To cMAXOFFERSHEETS
        OfferList(i).OfferName = ""
        OfferList(i).Sheetname = ""
        OfferList(i).Valid = False
    Next i
    If OfferName <> "" Then
        i = 0
        For Each ws In ActiveWorkbook.Worksheets
            wsName = ws.Name
            If ws.Visible = xlSheetVisible Then
                temp = ExcelSupport.CheckIfOfferSheet(wsName)
                If temp = OfferName Then
                    OfferList(i).OfferName = OfferName
                    OfferList(i).Sheetname = wsName
                    OfferList(i).StartRow = OfferDataRowStart
                    OfferList(i).FromColumn = GetColumnNumber(wsName, OriginColumnName)
                    OfferList(i).ToColumn = GetColumnNumber(wsName, DestColumnName)
                    OfferList(i).Valid = True
                    i = i + 1
                End If
            End If 'visible
        Next
    End If
End Sub

Public Function CheckDepDestExist(Depart As String, Dest As String) As Boolean
'--------------------------------------------------------------------------------------------------------------
'--- Check if the departure or destination exist (only one can be Not Blank)
'---
'--- Input: Depart or Dest parameters
'---        FormOfferName (global that contains the Offername in the Offer dropdown)
'---        OfferList (Global)
'---
'--- Output: True if does exist, False if does not exist
'---
'--- History:
'---    08-12-2017 Initial
'--------------------------------------------------------------------------------------------------------------
    Dim iOfferList As Long
    Dim iRow As Long
    Dim Found As Boolean
    Dim InvoiceFromUpper As String
    Dim InvoiceToUpper As String
    Dim OfferFromUpper As String
    Dim OfferToUpper As String
    Dim FindDepart As Boolean
    Dim FindDest As Boolean
    
    
    If FormOfferName = "" Then  'No check if offer not selected
        CheckDepDestExist = True
        Exit Function
    End If

    InvoiceFromUpper = UCase(Depart)
    InvoiceToUpper = UCase(Dest)
    Found = False
    
    'What to check for
    If InvoiceFromUpper <> "" Then
        FindDepart = True
    End If
    If InvoiceToUpper <> "" Then
        FindDest = True
    End If
    
    For iOfferList = 0 To cMAXOFFERSHEETS
        If OfferList(iOfferList).Valid Then
            iRow = OfferDataRowStart
            OfferFromUpper = UCase(Trim(Worksheets(OfferList(iOfferList).Sheetname).Cells(iRow, OfferList(iOfferList).FromColumn).Value2))  'Read 'From' cell
            OfferToUpper = UCase(Trim(Worksheets(OfferList(iOfferList).Sheetname).Cells(iRow, OfferList(iOfferList).ToColumn).Value2))      'Read 'To' cell
            Do While (OfferFromUpper <> "")                                         ' Only continue as long the From is not empty
   '                Found = FindInZone(InvoiceFromUpper, InvoiceToUpper, OfferFromUpper, OfferToUpper)
                If Left(OfferFromUpper, 1) = "_" And FindDepart Then                       'Zone?
                    Found = FindInZoneTest(InvoiceFromUpper, OfferFromUpper)
                    If Found Then
                        Exit Do                                                              ' and exit
                    End If
                ElseIf Left(OfferToUpper, 1) = "_" And FindDest Then
                    Found = FindInZoneTest(InvoiceToUpper, OfferToUpper)
                    If Found Then
                        Exit Do                                                             ' and exit
                    End If
                Else
                    If FindDepart Then          'Looking for from
                        If InvoiceFromUpper = OfferFromUpper Then                       ' Check if correct 'From'
                            Found = True
                            Exit Do
                        End If
                    Else                        'Loooking for To
                        If OfferToUpper = InvoiceToUpper Then                           ' Check if correct 'To'
                            Found = True
                            Exit Do
                        End If
                    End If
                End If
                iRow = iRow + 1                                                     ' Check next row..
                OfferFromUpper = UCase(Trim(Worksheets(OfferList(iOfferList).Sheetname).Cells(iRow, OfferList(iOfferList).FromColumn).Value2))  'Read From cell
                OfferToUpper = UCase(Trim(Worksheets(OfferList(iOfferList).Sheetname).Cells(iRow, OfferList(iOfferList).ToColumn).Value2))  'Read 'To' cell
            Loop
            If Found Then Exit For
        End If
    Next iOfferList
    CheckDepDestExist = Found
End Function

Private Function FindInZoneTest(FindRef As String, FindZone As String) As Boolean
    Dim i As Long
    Dim Found As Boolean
    
    Found = False

    If Not ZonesIsInitialized Then
        Call InitZones
    End If
    
    If FindRef <> "" Then
        For i = 0 To ZonesFound
            If ZoneInfo(i).RefersTo = FindRef And ZoneInfo(i).ZoneName = FindZone Then
                Found = True
                Exit For
            End If
        Next i
    End If
    FindInZoneTest = Found
End Function

Attribute VB_Name = "ExportForm"
Attribute VB_Base = "0{84C46B90-AE13-439D-A69F-0D23DDBF1FFF}{B5D59968-11ED-4355-843B-C060F6E43C23}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub ExportButton_Click()
    Dim iCounter As Long
    Dim lSht As Long
    'Uses the Global Variables: ExportPath and ExportFilename, ExportFullname
    
    'Find the mode (export or open folder)
    If Me.ExportButton.Caption = Txt("Export.ButtonExport_Before") Then
        '-- Export mode:
                        
        'Create the file
        Set NewBook = Workbooks.Add                 'Create
        
        'Loop through the list and export the selected ones
        For lSht = 0 To Me.SheetsListBox.ListCount - 1
            If Me.SheetsListBox.Selected(lSht) = True Then
                ThisWorkbook.Sheets(Me.SheetsListBox.List(lSht)).Copy after:=NewBook.Sheets(NewBook.Sheets.count)
            
'''                If NewBook.Sheets.count >= (lSht + 1) Then
'''                    NewBook.Sheets.Add Type:=Worksheet, count:=1, after:=NewBook.Sheets.count
'''                End If
'''                NewBook.Sheets(lSht + 1).Name = Sheetname
                    
'''                'Copy Sheet
'''                'SrcSheet.Cells.Copy        'This sometimes causes a huge file
'''                LastC = Last(cLASTCOL, SrcSheet.Cells)
'''                LastR = Last(cLASTROW, SrcSheet.Cells)
'''                If LastC > 0 And LastR > 0 Then
'''                    'Gather sources Col width
'''                    ReDim ColWidth(LastC + 1)
'''                    For iCol = 1 To LastC
'''                        ColWidth(iCol) = SrcSheet.Columns(iCol).ColumnWidth
'''                    Next iCol
'''
'''                    'Copy the data
'''                    rng = "A1:" & Col_Letter(LastC) & LastR
'''                    SrcSheet.Range(rng).Copy
'''                    Sheets(Sheetname).Cells.PasteSpecial Paste:=xlPasteAll
'''
'''                    'Set the Column width to the same in the destination
'''                    For iCol = 1 To LastC
'''                        Sheets(Sheetname).Columns(iCol).ColumnWidth = ColWidth(iCol)
'''                    Next iCol
'''
'''                    'If a filter is active in the scr sheets, then check if there are =subtotal() formular that needs changing the reference
'''                    If SrcSheet.AutoFilterMode Then
'''                        'loop through the last row to see if there are any subtotal formulas
'''                        DstLastR = Last(cLASTROW, Sheets(Sheetname).Cells)
'''                        For iCol = 1 To LastC
'''                            sTemp = SrcSheet.Cells(LastR, iCol).Formula
'''                            If Left(sTemp, 10) = "=SUBTOTAL(" Then
'''                                ColonIs = InStr(1, sTemp, ":", vbTextCompare)
'''                                RefFormula = Left(sTemp, ColonIs)                                       'Reuse the original formular up to the semicolon eg in "=SUBTOTAL(109,A3:A9928)" use "=SUBTOTAL(109,A3:"
'''                                RefFormula = RefFormula & ColLetter(iCol) & CStr(DstLastR - 2) & ")"    'Add the ending reference
'''                                Sheets(Sheetname).Cells(DstLastR, iCol).Formula = RefFormula            'Store the new formula
'''                            End If
'''                        Next iCol
'''                    End If
                iCounter = iCounter + 1
            End If
        Next lSht
        
        'Save and close the file
        On Error Resume Next
        With NewBook
            .SaveAs Filename:=ExportFullname
            .Close
        End With
        On Error GoTo 0
        
        'After the export update the status and change the name the button.
        Me.StatusLabel.Caption = printf(Txt("Export.StatusLabel_After"), iCounter, ExportFilename, ExportPath)
        Me.ExportButton.Caption = Txt("Export.ButtonExport_After")
        Me.SheetsListBox.Enabled = False
        Me.HeaderLabel.Enabled = False
        Me.InfoLabel.Enabled = False
    Else
        '-- Open folder mode:
        Call Shell("explorer.exe /select," & " " & ExportFullname, vbNormalFocus)
        Me.Hide
    End If
  
End Sub

Private Sub SheetsListBox_Change()
    Dim iCounter As Long
    Dim lSht As Long
    
    'Find number of selected items
    For lSht = 0 To Me.SheetsListBox.ListCount - 1
        If Me.SheetsListBox.Selected(lSht) = True Then
            iCounter = iCounter + 1
        End If
    Next lSht
    
    'If at least 1 is selected the enable the export button
    If iCounter > 0 Then
        ExportButton.Enabled = True
    Else
            ExportButton.Enabled = False
    End If
    
    'Show the number to the user
    StatusLabel.Caption = printf(Txt("Export.StatusLabel_Before"), iCounter)

End Sub

Private Sub UserForm_Activate()
    Call UserForm_Initialize
End Sub

Private Sub UserForm_Initialize()
    'Runs on form open
    'MsgBox ("Hello from UserForm_Initialize")
    Dim ws As Worksheet
    Dim iCounter As Long
    Dim sDate As String
    
    'Find Path, Filename and the fullname (path + Filename) and store them in the globals
    sDate = Format(Now, "_(yyyy-mm-dd_hh.mm)")
    ExportPath = Application.ThisWorkbook.Path & Application.PathSeparator
    ExportFilename = "Fr8-Export_" & ThisWorkbook.Name & sDate & ".xlsx"
    ExportFullname = ExportPath & ExportFilename
    
    
    Call InitFormLabels         'Update all labels
    
    'Fill listbox with all the sheetsnames
    Me.SheetsListBox.Clear  'Make sure its empty
    For Each ws In Worksheets
        If ws.Visible = True Then
            Me.SheetsListBox.AddItem ws.Name
            iCounter = iCounter + 1
        End If
    Next

End Sub

Private Sub InitFormLabels()
    'Sets alle the labels and buttons
    'Labels
    Me.Caption = Txt("Export.Form_Name")
    Me.HeaderLabel.Caption = Txt("Export.HeaderLabel")
    Me.InfoLabel.Caption = Txt("Export.InfoLabel")
    Me.StatusLabel.Caption = printf(Txt("Export.StatusLabel_Before"), 0)
    Me.FileFolderLabel.Caption = printf(Txt("Export.FileFolderInfo"), ExportFilename, ExportPath)

    Me.SheetsListBox.Enabled = True
    Me.HeaderLabel.Enabled = True
    Me.InfoLabel.Enabled = True
    Me.FileFolderLabel.Enabled = True
    
    'Buttons
    Me.ExportButton.Caption = Txt("Export.ButtonExport_Before")
    Me.ExportButton.Enabled = False
End Sub

Attribute VB_Name = "Fr8BackendSupport"
Option Explicit
Option Private Module

'Backend functions
'01-11-2017: Baseline
'08-10-2018: SetDataRowsFormat() added validation on SC

Const cMarginsTopBottom As Long = 6
Const cMarginsLeftRight As Long = 8
Const cBackColorIndex As Long = 26      '26: Light Yellow (A bit darker than standard)
Const cFontColorIndex As Long = 1
Const cFontName As String = "Arial" '"Tahoma"
Const cFontSize As Long = 9
Const cFontSizeData As Long = 8


Private Sub PrepareForRelease()
    Dim ws As Worksheet
    Application.ScreenUpdating = False
    SheetInitializing = True
    
    Call SetHeaderRowsHeight
    Call SetColumnsWidth
    Call SetDataRowsFormat
    
    'Generel setings:
    For Each ws In ActiveWorkbook.Worksheets
        'All sheets
        ActiveWindow.DisplayGridlines = False           'Remove gridlines
        ActiveWindow.Zoom = 100                         'Set zoom level to 100%
        'Fr8Partner templates
        If ws.Visible = xlSheetVisible Then
            If ws.Cells(1, 1) = "Fr8Origin" Then
                Application.GoTo Reference:=ws.Range("A1"), Scroll:=True
                ws.Range("B3").Select   'Forwarder name
            Else 'Other sheets
                Application.GoTo Reference:=ws.Range("A1"), Scroll:=True
                ws.Range("A1").Select   'Intro: Header
            End If
        End If
    Next
        
    Debug.Print "=== Done preparing ==="
    SheetInitializing = False
    Application.ScreenUpdating = True
    
End Sub

Private Sub FormatComments()
    'Format all comments on all sheets
    Dim ws As Worksheet
    Dim xComment As Comment
    
    For Each ws In ActiveWorkbook.Worksheets
        Debug.Print "Worksheet: " & ws.Name
        For Each xComment In ws.Comments
            With xComment.Shape
                .TextFrame.AutoMargins = False
                .TextFrame.AutoSize = True
                .TextFrame.MarginLeft = cMarginsLeftRight
                .TextFrame.MarginRight = cMarginsLeftRight
                .TextFrame.MarginTop = cMarginsTopBottom
                .TextFrame.MarginBottom = cMarginsTopBottom
                .TextFrame.Characters.Font.Name = cFontName
                .TextFrame.Characters.Font.Size = cFontSize
                .TextFrame.Characters.Font.ColorIndex = cFontColorIndex
                .Fill.Solid
                .Fill.ForeColor.SchemeColor = cBackColorIndex
            End With
        Next
    Next
End Sub

Private Sub SetHeaderRowsHeight()
    'Sets the row height on all fr8Partner template sheets
    Dim ws As Worksheet
    
    For Each ws In ActiveWorkbook.Worksheets
        'Only adjust on Fr8Partner templates (Pricetemplates, Roadtax, interval and Zone)
        If ws.Cells(1, 1) = "Fr8Origin" Or ws.Cells(1, 1) = "Fr8ZoneCountryCode" Then
            Debug.Print "HeaderRows adjusted on Worksheet: " & ws.Name
            ws.Rows("1:1").EntireRow.Hidden = True
            ws.Rows("2:2").RowHeight = 24
            ws.Rows("3:3").RowHeight = 26
            ws.Rows("4:4").RowHeight = 26
            ws.Rows("5:5").RowHeight = 26
            ws.Rows("6:6").RowHeight = 26
            ws.Rows("7:7").RowHeight = 26
            ws.Rows("8:8").RowHeight = 26
            ws.Rows("9:9").RowHeight = 26
        End If
    Next
End Sub

Private Sub SetDataRowsFormat()
    'Sets the datarow formats on all fr8Partner template sheets
    Dim ws As Worksheet, LastCol As Long, ColNumber As Long, ColName As String
    Dim Area As Range
    Dim FromRowRange As Long
    Dim ToRowRange As Long
    Dim RowRange As String
    FromRowRange = 10
    ToRowRange = 1000
    RowRange = CStr(FromRowRange) & ":" & CStr(ToRowRange)
    Debug.Print "- DataRow formating on rows: " & RowRange & "."
    For Each ws In ActiveWorkbook.Worksheets
        'Only adjust on Fr8Partner templates and not on the Interval sheet
        If (ws.Cells(1, 1) = "Fr8Origin") And (Mid(ws.Cells(2, 1), 18, 8) <> "Interval") Then 'Cell format is: Fr8Partner 01 DA Interval 01-11-2017
            ws.Activate
            Debug.Print "DataRow formating on Worksheet: " & ws.Name
            'ws.Rows("10:1010").EntireRow.Delete
            ws.Rows(RowRange).RowHeight = 12               'Set height and other commons things
            ws.Rows(RowRange).Font.Name = cFontName
            ws.Rows(RowRange).Font.Size = cFontSizeData
            ws.Rows(RowRange).Font.Strikethrough = False
            ws.Rows(RowRange).Font.Superscript = False
            ws.Rows(RowRange).Font.Subscript = False
            ws.Rows(RowRange).Font.OutlineFont = False
            ws.Rows(RowRange).Font.Shadow = False
            ws.Rows(RowRange).Font.Underline = xlUnderlineStyleNone
            ws.Rows(RowRange).Font.ColorIndex = xlAutomatic
            ws.Rows(RowRange).Font.TintAndShade = 0
            ws.Rows(RowRange).Font.ThemeFont = xlThemeFontNone
            ws.Rows(RowRange).HorizontalAlignment = xlLeft
            ws.Rows(RowRange).VerticalAlignment = xlCenter
            ws.Rows(RowRange).WrapText = False
            ws.Rows(RowRange).Orientation = 0
            ws.Rows(RowRange).AddIndent = False
            ws.Rows(RowRange).IndentLevel = 1
            ws.Rows(RowRange).ShrinkToFit = False
            ws.Rows(RowRange).ReadingOrder = xlContext
            ws.Rows(RowRange).MergeCells = False
            LastCol = ActiveSheet.UsedRange.Columns.count
            For ColNumber = 1 To LastCol
                ColName = ws.Cells(1, ColNumber)
                Select Case ColName             ' Set cells individual format (Left, Right, Center, Number of decimals etc.)
                Case "Fr8Origin"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8Dest"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8PriceMin"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlRight
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).NumberFormat = "#,##0.00"
                Case "Fr8Price"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlRight
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).NumberFormat = "#,##0.00"
                Case "Fr8PalletsName"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8ContainerName"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8ConvVol"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlCenter
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).NumberFormat = "#,##0"
                Case "Fr8ConvLdm"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlCenter
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).NumberFormat = "#,##0"
                Case "Fr8SurRate"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlRight
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).NumberFormat = "#,##0.00"
                Case "Fr8SurUnit"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlCenter
                    'Only uncomment if changes to the Surcharge dropdown validation (Slow)
'                    With ws.Range(Cells(FromRowRange, ColNumber), Cells(1000, ColNumber)).Validation
'                        .Delete
'                        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, _
'                        Formula1:="PCT,UNIT,VOL,OnReq,NotAvail,Included,Unknown,Interval-A,Interval-B,Interval-C"
'                        .IgnoreBlank = True
'                        .InCellDropdown = True
'                        .InputTitle = ""
'                        .ErrorTitle = "Input error"
'                        .InputMessage = ""
'                        .ErrorMessage = "Only use the values from the dropdown menu."
'                        .ShowInput = True
'                        .ShowError = True
'                    End With
                Case "Fr8SurMin"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlRight
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).NumberFormat = "#,##0.00"
                Case "Fr8SurMax"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlRight
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).NumberFormat = "#,##0.00"
                Case "Fr8PickUpPcs"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlCenter
                Case "Fr8PickUpPart"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlCenter
                Case "Fr8PickUpFull"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlCenter
                Case "Fr8TranPcs"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlCenter
                Case "Fr8TranPart"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlCenter
                Case "Fr8TranFull"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlCenter
                Case "Fr8ContName"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8ContAdress"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8ContZip"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8ContCity"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8ContCountry"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8ContPhone"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8ContMail"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8ContLink"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8Remark1"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8RemarkLang1"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8IncoCode"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case "Fr8IncoInfo"
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).HorizontalAlignment = xlLeft
                    ws.Range(Cells(FromRowRange, ColNumber), Cells(ToRowRange, ColNumber)).IndentLevel = 1
                Case Else
                    If ColName <> "" Then
                        Debug.Print "Column name: '" & ColName & "' Not found."
                    End If
                End Select
            Next ColNumber
        ' Format Interval sheet
        ElseIf (ws.Cells(1, 1) = "Fr8Origin") And (Mid(ws.Cells(2, 1), 18, 8) = "Interval") Then
            RowRange = CStr(FromRowRange) & ":" & CStr(FromRowRange)    'Only row 10
            Debug.Print "DataRow formating on Intervalsheet: " & ws.Name
            ws.Rows(RowRange).RowHeight = 16               'Set height and other commons things
            ws.Rows(RowRange).Font.Name = cFontName
            ws.Rows(RowRange).Font.Size = cFontSizeData
            ws.Rows(RowRange).Font.Strikethrough = False
            ws.Rows(RowRange).Font.Superscript = False
            ws.Rows(RowRange).Font.Subscript = False
            ws.Rows(RowRange).Font.OutlineFont = False
            ws.Rows(RowRange).Font.Shadow = False
            ws.Rows(RowRange).Font.Underline = xlUnderlineStyleNone
            ws.Rows(RowRange).Font.ColorIndex = xlAutomatic
            ws.Rows(RowRange).Font.TintAndShade = 0
            ws.Rows(RowRange).Font.ThemeFont = xlThemeFontNone
            ws.Rows(RowRange).HorizontalAlignment = xlLeft
            ws.Rows(RowRange).VerticalAlignment = xlCenter
            ws.Rows(RowRange).WrapText = False
            ws.Rows(RowRange).Orientation = 0
            ws.Rows(RowRange).AddIndent = False
            ws.Rows(RowRange).IndentLevel = 1
            ws.Rows(RowRange).ShrinkToFit = False
            ws.Rows(RowRange).ReadingOrder = xlContext
            ws.Rows(RowRange).MergeCells = False
        Else
            Debug.Print "Skipping DataRow formating on Worksheet: " & ws.Name
        End If
    Next
End Sub

Function getLang(Sh As String) As Long
    'Find the 2 language letters in cell A2 and returns the corresponding number
    Dim Value As String
    
    Value = Worksheets(Sh).Cells(2, 1)
    Value = Mid(Value, 15, 2)   'Contens is in this format "Fr8Partner 01 DA typename"
    If Value = "DA" Then
        getLang = DA
    ElseIf Value = "DE" Then
        getLang = DE
    ElseIf Value = "EN" Then
        getLang = EN
    End If

End Function
Private Sub SetColumnsWidth()
    'Sets the row height on all fr8Partner template sheets
    Dim ws As Worksheet
    Dim LastCol As Long
    Dim ColNumber As Long
    Dim ColName As String
    '--- Read language
    Dim Language As Long
    Call InitLanguage
    'Language = getLanguage()

    For Each ws In ActiveWorkbook.Worksheets
        'Only adjust on Fr8Partner templates
        If ws.Cells(1, 1) = "Fr8Origin" Then
            LastCol = ActiveSheet.UsedRange.Columns.count
            Language = getLang(ws.Name)
            Debug.Print "Column adjusting startet on Worksheet: " & ws.Name & ", Lang: " & Language
            For ColNumber = 1 To LastCol
                ColName = ws.Cells(1, ColNumber)
                Select Case ColName
                Case "Fr8Origin"
                    If Language = DE Then
                        ws.Columns(ColNumber).ColumnWidth = 18
                    Else
                        ws.Columns(ColNumber).ColumnWidth = 16
                    End If
                Case "Fr8Dest"
                    ws.Columns(ColNumber).ColumnWidth = 16
                Case "Fr8PriceMin"
                    If Language = DE Then
                        ws.Columns(ColNumber).ColumnWidth = 22
                    Else
                        ws.Columns(ColNumber).ColumnWidth = 18
                    End If
                Case "Fr8Price"
                    ws.Columns(ColNumber).ColumnWidth = 13
                Case "Fr8PalletsName"
                    ws.Columns(ColNumber).ColumnWidth = 16
                Case "Fr8ContainerName"
                    ws.Columns(ColNumber).ColumnWidth = 16
                Case "Fr8ConvVol"
                    ws.Columns(ColNumber).ColumnWidth = 16
                Case "Fr8ConvLdm"
                    ws.Columns(ColNumber).ColumnWidth = 16
                Case "Fr8SurRate"
                    If Language = DE Then
                        ws.Columns(ColNumber).ColumnWidth = 19
                    Else
                        ws.Columns(ColNumber).ColumnWidth = 14
                    End If
                Case "Fr8SurUnit"
                    ws.Columns(ColNumber).ColumnWidth = 12
                Case "Fr8SurMin"
                    ws.Columns(ColNumber).ColumnWidth = 12
                Case "Fr8SurMax"
                    ws.Columns(ColNumber).ColumnWidth = 12
                Case "Fr8PickUpPcs"
                    ws.Columns(ColNumber).ColumnWidth = 12
                Case "Fr8PickUpPart"
                    ws.Columns(ColNumber).ColumnWidth = 12
                Case "Fr8PickUpFull"
                    ws.Columns(ColNumber).ColumnWidth = 12
                Case "Fr8TranPcs"
                    ws.Columns(ColNumber).ColumnWidth = 12
                Case "Fr8TranPart"
                    ws.Columns(ColNumber).ColumnWidth = 12
                Case "Fr8TranFull"
                    ws.Columns(ColNumber).ColumnWidth = 12
                Case "Fr8ContName"
                    ws.Columns(ColNumber).ColumnWidth = 16
                Case "Fr8ContAdress"
                    ws.Columns(ColNumber).ColumnWidth = 16
                Case "Fr8ContZip"
                    ws.Columns(ColNumber).ColumnWidth = 10
                Case "Fr8ContCity"
                    ws.Columns(ColNumber).ColumnWidth = 16
                Case "Fr8ContCountry"
                    ws.Columns(ColNumber).ColumnWidth = 10
                Case "Fr8ContPhone"
                    ws.Columns(ColNumber).ColumnWidth = 12
                Case "Fr8ContMail"
                    ws.Columns(ColNumber).ColumnWidth = 16
                Case "Fr8ContLink"
                    ws.Columns(ColNumber).ColumnWidth = 16
                Case "Fr8Remark1"
                    ws.Columns(ColNumber).ColumnWidth = 44
                Case "Fr8RemarkLang1"
                    ws.Columns(ColNumber).ColumnWidth = 9
                Case "Fr8IncoCode"
                    ws.Columns(ColNumber).ColumnWidth = 12
                Case "Fr8IncoInfo"
                    ws.Columns(ColNumber).ColumnWidth = 18
                Case Else
                    If ColName <> "" Then
                        Debug.Print "Column name: '" & ColName & "' Not found."
                    End If
                End Select
            Next ColNumber
        End If
    Next
End Sub

Private Sub SetValidation()
'
' Sets the validation rules for the cells given on the aktive sheet
' Cells: Forwarder name, Description, Surcharge names
' Surcharges must be 1 and start in col I
'
    Dim Language As Integer
    Dim i As Integer
    Dim ws As Worksheet
    Set ws = ActiveSheet
       
    Dim sCells As Variant
    sCells = Array("B3", "B4", "J3", "J4", "J5")
       
    '--- Read language
    Call InitLanguage
    Language = getLanguage()
    
    'Only adjust on Fr8Partner templates
    If ws.Cells(1, 1) = "Fr8Origin" Then
        'loop thoug the cells
        For i = LBound(sCells) To UBound(sCells)
            Range(sCells(i)).Select
            With Selection.Validation
                .Delete
                .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, Operator:=xlLessEqual, Formula1:="30"
                .IgnoreBlank = True
                .InCellDropdown = True
                .ShowInput = False
                .InputTitle = ""
                .InputMessage = ""
                .ShowError = True
                .ErrorTitle = Langname(Language, 5)
                .ErrorMessage = Langname(Language, 6)
            End With
        Next i
        Range("B3").Select
    End If
End Sub


'Only manuel run
Private Sub ReplaceValidationString()
'
'   Replaces tekst in the validation in the selected cells

    Dim ValidString As String, cel As Range, SelectedRange As Range
    Set SelectedRange = Application.Selection
    
    For Each cel In SelectedRange
        
        If HasValidation(cel) Then
            'Read
            ValidString = cel.Validation.Formula1
            If ValidString <> "" Then
                'Replace
                 ValidString = Replace(ValidString, "EFF", "UNIT", compare:=vbTextCompare)
                 If cel = "EFF" Then cel.Value = "UNIT"
                
'                ValidString = Replace(ValidString, "0-Not Used;", "", compare:=vbTextCompare)   ' Fjern 0-Not Used
'                ValidString = Replace(ValidString, "1-", "1: ", compare:=vbTextCompare)
'                ValidString = Replace(ValidString, "2-", "2: ", compare:=vbTextCompare)
'                ValidString = Replace(ValidString, "3-", "3: ", compare:=vbTextCompare)
'                ValidString = Replace(ValidString, "4-", "4: ", compare:=vbTextCompare)
'                ValidString = Replace(ValidString, "5-", "5: ", compare:=vbTextCompare)
'                ValidString = Replace(ValidString, "6-", "6: ", compare:=vbTextCompare)
'                ValidString = Replace(ValidString, "7-", "7: ", compare:=vbTextCompare)
'                ValidString = Replace(ValidString, "8-", "8: ", compare:=vbTextCompare)
'                ValidString = Replace(ValidString, "9-", "9: ", compare:=vbTextCompare)
                
                ValidString = Replace(ValidString, ";", ",", compare:=vbTextCompare) ' In VBA it must be , instead of ;
                
                'Store
                With cel.Validation
                    .Delete
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=ValidString
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .InputTitle = ""
                    .ErrorTitle = "Input error"
                    .InputMessage = ""
                    .ErrorMessage = "Only use the values in the dropdown menu."
                    .ShowInput = True
                    .ShowError = True
                End With
            End If
        End If
    Next cel
End Sub

'Used in ReplaceValidationString
Private Function HasValidation(CELL As Range) As Boolean
    Dim T: T = Null

    On Error Resume Next
    T = CELL.Validation.Type
    On Error GoTo 0

    HasValidation = Not IsNull(T)
End Function


Attribute VB_Name = "Fr8ControlForm"
Attribute VB_Base = "0{CAB05BEE-3C7F-468F-ACF4-9E91A375E67E}{3E98255D-551B-4909-81E7-60BF2AA41569}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Public const Fr8ControlFormVersion As String = "08-10-2019"    'Not allowed here, so is moved to the 'Global' module

Private Sub AmountColumnDropdown_Change()
    If AmountColumnDropdown.ListIndex > 0 Then
        UnitsDropdown.Enabled = True
    Else
        UnitsDropdown.Enabled = False
    End If
End Sub

Private Sub AmountKGColumnDropdown_Change()
    Call SetStatusChargableCheckBox
End Sub
Private Sub AmountLDMColumnDropdown_Change()
    Call SetStatusChargableCheckBox
End Sub
Private Sub AmountM3ColumnDropdown_Change()
    Call SetStatusChargableCheckBox
End Sub
Private Sub SetStatusChargableCheckBox()
    'If all 3 effective dropdowns is not selected, then set the checkbox to disabled, otherwise enable it.
    If AmountM3ColumnDropdown.ListIndex = 0 And AmountLDMColumnDropdown.ListIndex = 0 And AmountKGColumnDropdown.ListIndex = 0 Then
        ShowChargeableColumnCheckBox.Enabled = False
        ShowChargeableColumnCheckBox.Value = False
    Else
        ShowChargeableColumnCheckBox.Enabled = True
    End If
End Sub

Private Sub ButtonCalc_Click()
    'MsgBox ("Hi from calc button")
    Dim ErrorCount As Long
    Dim SkipOfferTest As Boolean
    Dim SkipInvoiceTest As Boolean
    
    SkipOfferTest = False
    SkipInvoiceTest = False
    
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " Start of ButtonCalc_Click"
    
    Application.ScreenUpdating = False
    
    If CurrentlyRunning Then
        MsgBox Txt("UserInterruptet")
        Call CleanUp
        End
    End If
    
    CurrentlyRunning = True 'Mark that we are calculating
    KeepFormOpen = True
    
    'Make calc button green
    ButtonCalc.BackColor = vbGreen
    ButtonCalc.Caption = Txt("ButtonCalcCancel")
    
    LabelCalcStat.Visible = True
    LabelCalcStat.Caption = Txt("LabelCalcStat_Saving")
    'Application.ScreenUpdating = True
    Me.Repaint
    'Application.ScreenUpdating = False
    AutoSave = True
    Call SaveButton_Click 'Saves all settings
    AutoSave = False
    
    'Reset Test settings before starting both tests
    Call ResetTestSetting
    If Not SkipOfferTest Then
        '-- Test Offer Sheet
        LabelCalcStat.Caption = Txt("LabelCalcStat_Testing_Offersheet")
        LabelCalcStat.Visible = True
        'Application.ScreenUpdating = True
        Me.Repaint
        'Application.ScreenUpdating = False
        ErrorCount = TestOfferSheet(OfferDropDown.Value)
    End If
    If Not SkipInvoiceTest Then
        '-- Test Invoice sheet
        LabelCalcStat.Caption = Txt("LabelCalcStat_Testing_Invoicesheet")
        LabelCalcStat.Visible = True
        'Application.ScreenUpdating = True
        Me.Repaint
        'Application.ScreenUpdating = False
        
        ErrorCount = TestInvoiceSheet(InvoiceListDropDown.Value, _
                                  HeaderRowTextBox.Value, _
                                  FromColumnDropdown.ListIndex + 1, _
                                  DestinationColumnDropdown.ListIndex + 1, _
                                  AmountM3ColumnDropdown.ListIndex, _
                                  AmountLDMColumnDropdown.ListIndex, _
                                  AmountKGColumnDropdown.ListIndex, _
                                  AmountColumnDropdown.ListIndex, _
                                  PriceColumnDropdown.ListIndex + 1)
    End If
    
    'Handle if Errors
    If TestSettings.ErrorCount > 0 Then
        'Show status (Show the testlog Window)
        Me.Hide
        TestLogForm.Show
    Else
        LabelCalcStat.Visible = True
        LabelCalcStat.Caption = Txt("LabelCalcStat_Calculating")
        'Application.ScreenUpdating = True
        Me.Repaint
        'Application.ScreenUpdating = False
        Call DoTheCalc
    End If
    
    Me.Hide
    CurrentlyRunning = False 'Mark that we are done calculating
    Application.ScreenUpdating = True

    'Call MsgBox("Done calculating", , Txt("ToolName"))
End Sub


Private Sub MultiPage_Change()
    If MultiPage.Value = 0 Then         'Offersheet
        'Select/View the selected offersheet
        If FormOfferName <> "" Then
            On Error Resume Next
            Worksheets(GetSheetNameFromOffer(FormOfferName)).Select
            On Error GoTo 0
        End If
    ElseIf MultiPage.Value = 1 Or MultiPage.Value = 2 Then     'Invoicepage and output page
        If FormInvoiceListName <> "" Then
            On Error Resume Next
            Worksheets(FormInvoiceListName).Select
            On Error GoTo 0
        End If
    End If
End Sub

Private Sub OfferPageHelpButton_Click()
    'MsgBox ("Hi from OfferPageHelpButton_Click")
    Select Case UserLanguage
    Case OfficeIsDA
        AOfferHelpFormDA.Show
    Case OfficeIsDE
        AOfferHelpFormDE.Show
    Case OfficeIsEN
        AOfferHelpFormGB.Show
    Case Else
        AOfferHelpFormGB.Show
    End Select
End Sub


Private Sub InvoicePageHelpButton_Click()
    'MsgBox ("Hi from InvoicePageHelpButton_Click")
    Select Case UserLanguage
    Case OfficeIsDA
        BInvoiceHelpFormDA.Show
    Case OfficeIsDE
        BInvoiceHelpFormDE.Show
    Case OfficeIsEN
        BInvoiceHelpFormGB.Show
    Case Else
        BInvoiceHelpFormGB.Show
    End Select
End Sub


Private Sub OutPutPageHelpButton_Click()
    'MsgBox ("Hi from OutPutPageHelpButton")
    Select Case UserLanguage
    Case OfficeIsDA
        COutputHelpFormDA.Show
    Case OfficeIsDE
        COutputHelpFormDE.Show
    Case OfficeIsEN
        COutputHelpFormGB.Show
    Case Else
        COutputHelpFormGB.Show
    End Select
End Sub

Private Sub InvoiceListTestButton_Click()
    'MsgBox ("Hi from Test button")
    Dim ErrorCount As Long
    
    If InvoiceListDropDown.ListCount = 0 Or InvoiceListDropDown.ListIndex = -1 Or InvoiceListDropDown.Value = "" Then
        Call MsgBox("Invoice dropdown is not valid.", vbExclamation + vbOKOnly)
        Exit Sub
    End If
    
    'Save settings first
    Call SaveButton_Click
    
    LabelCalcStat.Visible = True
    LabelCalcStat.Caption = Txt("LabelCalcStat_Testing_Invoicesheet")
    Me.Repaint
    
    'Save the shown page and then hide the Fr8Control form
    Settings.ActivePage = Me.MultiPage.Value
    
    Call ResetTestSetting 'Reset first
    
    'Do the testing
    ErrorCount = TestInvoiceSheet(InvoiceListDropDown.Value, _
                                  HeaderRowTextBox.Value, _
                                  FromColumnDropdown.ListIndex + 1, _
                                  DestinationColumnDropdown.ListIndex + 1, _
                                  AmountM3ColumnDropdown.ListIndex, _
                                  AmountLDMColumnDropdown.ListIndex, _
                                  AmountKGColumnDropdown.ListIndex, _
                                  AmountColumnDropdown.ListIndex, _
                                  PriceColumnDropdown.ListIndex + 1)
    
   
    LabelCalcStat.Visible = False
    LabelCalcStat.Caption = ""
    Me.Repaint

   'Show status (Show the testlog Window)
    Me.Hide
    TestLogForm.Show

    If ErrorCount = 0 Then
        'Show Fr8Check form again
        'Fr8ControlForm.Show
        Me.Show
    End If
    
End Sub

Private Sub OfferTestButton_Click()
    Dim ErrorCount As Long
    'MsgBox ("Hi from Test button")
    
    If OfferDropDown.ListCount = 0 Or OfferDropDown.ListIndex = -1 Or OfferDropDown.Value = "" Then
        Call MsgBox("Offer dropdown is not valid.", vbExclamation + vbOKOnly)
        Exit Sub
    End If
    
    'Save settings first
    Call SaveButton_Click

    LabelCalcStat.Visible = True
    LabelCalcStat.Caption = Txt("LabelCalcStat_Testing_Offersheet")
    Me.Repaint

    'Save the shown page and then hide the Fr8Control form
    Settings.ActivePage = Me.MultiPage.Value
    
    Call ResetTestSetting 'Reset first
    
    'Do the testing
    ErrorCount = TestOfferSheet(OfferDropDown.Value)
    
    LabelCalcStat.Visible = False
    LabelCalcStat.Caption = ""
    Me.Repaint
    Me.Hide

    'Show status (Show the testlog Window)
    TestLogForm.Show
    
    If ErrorCount = 0 Then
        'Show Fr8Check form again
        'Fr8ControlForm.Show
        Me.Show
    End If
    
End Sub

Private Sub LoadSavedSettings()
    ' Load all the setting from the storage sheet
    ' 18-09-2019 Only read Pre / Post setting if the referenced sheetname exist in this workbook
    ' 08-10-2019 Handle if OutputMode is not set (0)
    Dim i As Long
    Dim temp As String
    
    '--- Page setting
    Settings.ActivePage = GetVarLng("Settings.ActivePage")
    
    '--- OfferSettings
    
    OfferSettings.OfferName = GetVarStr("OfferSettings.OfferName")
    OfferSettings.ForwarderName = GetVarStr("OfferSettings.ForwarderName")
    OfferSettings.OfferDesc = GetVarStr("OfferSettings.OfferDesc")
    OfferSettings.Sheetname = GetVarStr("OfferSettings.Sheetname")
    For i = 0 To cMAXCURRENCIES
        OfferSettings.CurrencyInfo(i).Name = GetVarStr("OfferSettings.CurrencyInfo(" & i & ").Name")
        OfferSettings.CurrencyInfo(i).Value = GetVarDbl("OfferSettings.CurrencyInfo(" & i & ").Value")
    Next i
    For i = 0 To cMAXSURCHARGES
        OfferSettings.SurchargeInfo(i).Name = GetVarStr("OfferSettings.SurchargeInfo(" & i & ").Name")
        OfferSettings.SurchargeInfo(i).Active = GetVarBol("OfferSettings.SurchargeInfo(" & i & ").Active")
        OfferSettings.SurchargeInfo(i).Type = GetVarLng("OfferSettings.SurchargeInfo(" & i & ").Type")
        OfferSettings.SurchargeInfo(i).IsLCL = GetVarLng("OfferSettings.SurchargeInfo(" & i & ").IsLCL")
        OfferSettings.SurchargeInfo(i).Sheetname = GetVarStr("OfferSettings.SurchargeInfo(" & i & ").Sheetname")
    Next i
    
    '--- InvoiceSettings

    InvoiceSettings.Sheetname = GetVarStr("InvoiceSettings.Sheetname")
    InvoiceSettings.headerRow = GetVarLng("InvoiceSettings.HeaderRow")
    InvoiceSettings.FromColumn = GetVarLng("InvoiceSettings.FromColumn")
    InvoiceSettings.ToColumn = GetVarLng("InvoiceSettings.ToColumn")
    InvoiceSettings.EffKGColumn = GetVarLng("InvoiceSettings.EffKGColumn")
    InvoiceSettings.EffLDMColumn = GetVarLng("InvoiceSettings.EffLDMColumn")
    InvoiceSettings.EffM3Column = GetVarLng("InvoiceSettings.EffM3Column")
    InvoiceSettings.QuantityColumn = GetVarLng("InvoiceSettings.QuantityColumn")
    InvoiceSettings.PriceColumn = GetVarLng("InvoiceSettings.PriceColumn")
    InvoiceSettings.Units = GetVarLng("InvoiceSettings.Units")
    
    temp = GetVarStr("InvoicePreSettings.Sheetname")
    If sheetExists(temp) Then   'Only read pre settings if the referenced sheetname exists
        InvoicePreSettings.Sheetname = GetVarStr("InvoicePreSettings.Sheetname")
        InvoicePreSettings.headerRow = GetVarLng("InvoicePreSettings.HeaderRow")
        InvoicePreSettings.EffKGColumn = GetVarLng("InvoicePreSettings.EffKGColumn")
        InvoicePreSettings.EffLDMColumn = GetVarLng("InvoicePreSettings.EffLDMColumn")
        InvoicePreSettings.EffM3Column = GetVarLng("InvoicePreSettings.EffM3Column")
        InvoicePreSettings.QuantityColumn = GetVarLng("InvoicePreSettings.QuantityColumn")
        InvoicePreSettings.Units = GetVarLng("InvoicePreSettings.Units")
        InvoicePreSettingsmode = GetVarLng("InvoicePreSettingsmode")
    Else
        InvoicePreSettings.Sheetname = ""
        InvoicePreSettings.headerRow = 0
        InvoicePreSettings.EffKGColumn = 0
        InvoicePreSettings.EffLDMColumn = 0
        InvoicePreSettings.EffM3Column = 0
        InvoicePreSettings.QuantityColumn = 0
        InvoicePreSettings.Units = 0
        InvoicePreSettingsmode = 0
    End If
    
    temp = GetVarStr("InvoicePostSettings.Sheetname")
    If sheetExists(temp) Then   'Only read post settings if the referenced sheetname exists
        InvoicePostSettings.Sheetname = GetVarStr("InvoicePostSettings.Sheetname")
        InvoicePostSettings.headerRow = GetVarLng("InvoicePostSettings.HeaderRow")
        InvoicePostSettings.EffKGColumn = GetVarLng("InvoicePostSettings.EffKGColumn")
        InvoicePostSettings.EffLDMColumn = GetVarLng("InvoicePostSettings.EffLDMColumn")
        InvoicePostSettings.EffM3Column = GetVarLng("InvoicePostSettings.EffM3Column")
        InvoicePostSettings.QuantityColumn = GetVarLng("InvoicePostSettings.QuantityColumn")
        InvoicePostSettings.Units = GetVarLng("InvoicePostSettings.Units")
        InvoicePostSettingsmode = GetVarLng("InvoicePostSettingsmode")
    Else
        InvoicePostSettings.Sheetname = ""
        InvoicePostSettings.headerRow = 0
        InvoicePostSettings.EffKGColumn = 0
        InvoicePostSettings.EffLDMColumn = 0
        InvoicePostSettings.EffM3Column = 0
        InvoicePostSettings.QuantityColumn = 0
        InvoicePostSettings.Units = 0
        InvoicePostSettingsmode = 0
    End If
    
    '--- OutputSettings

    OutputSettings.IsInvoiceListSheet = GetVarBol("OutputSettings.IsInvoiceListSheet")
    OutputSettings.IsNewSheet = GetVarBol("OutputSettings.IsNewSheet")
    OutputSettings.Sheetname = GetVarStr("OutputSettings.Sheetname")
    OutputSettings.ShowColumnWithFreightCalc = GetVarBol("OutputSettings.ShowColumnWithFreightCalc")
    OutputSettings.ShowColumnWithNormalCalc = GetVarBol("OutputSettings.ShowColumnWithNormalCalc")
    OutputSettings.ShowColumnWithNormalCalcDetails = GetVarBol("OutputSettings.ShowColumnWithNormalCalcDetails")
    OutputSettings.ShowColumnWithAdvantageCalc = GetVarBol("OutputSettings.ShowColumnWithAdvantageCalc")
    OutputSettings.ShowColumnWithAdvantageCalcDetails = GetVarBol("OutputSettings.ShowColumnWithAdvantageCalcDetails")
    OutputSettings.ShowColumnWithChargeableAmount = GetVarBol("OutputSettings.ShowColumnWithChargeableAmount")
    OutputSettings.ShowColumnWithCalcMode = GetVarBol("OutputSettings.ShowColumnWithCalcMode")
    OutputSettings.ShowColumnWithPriceDiffInUnits = GetVarBol("OutputSettings.ShowColumnWithPriceDiffInUnits")
    OutputSettings.ShowColumnWithPriceDiffInPercent = GetVarBol("OutputSettings.ShowColumnWithPriceDiffInPercent")
    OutputSettings.MakePctDiffCellsColored = GetVarBol("OutputSettings.MakePctDiffCellsColored")
    OutputSettings.PriceDiffSolidColorPercent = GetVarLng("OutputSettings.PriceDiffSolidColorPercent")
    OutputSettings.ShowDetailsAsCellComments = GetVarBol("OutputSettings.ShowDetailsAsCellComments")
    OutputSettings.MaxRowsWithComments = GetVarLng("OutputSettings.MaxRowsWithComments")
    OutputSettings.ShowColumnWithSurcharges = GetVarBol("OutputSettings.ShowColumnWithSurcharges")
    OutputSettings.ShowSum = GetVarBol("OutputSettings.ShowSum")
    OutputSettings.OutputMode = GetVarLng("OutputSettings.OutputMode")
    If OutputSettings.OutputMode = 0 Then
        If ToolName = "Fr8Check" Then
            OutputSettings.OutputMode = OutputCheckMode
        Else
            OutputSettings.OutputMode = OutputBenchMode
        End If
    End If
    
End Sub

Private Sub PostFreightSettingsButton_Click()
    
    'Get some data for the new form:
    PrePostSheetname = InvoiceListDropDown.Value
    PrePostRow = HeaderRowTextBox.Value
    
    'Show the Pre windows
    PostFreightSetupForm.Show
    
    'Mark state of the Pre button
    If InvoicePostSettingsmode = Active Then
        PostFreightSettingsButton.Font.Bold = True
    Else
        PostFreightSettingsButton.Font.Bold = False
    End If

End Sub

Private Sub PreFreightSettingsButton_Click()
    
    'Get some data for the new form:
    PrePostSheetname = InvoiceListDropDown.Value
    PrePostRow = HeaderRowTextBox.Value
    
    'Show the Pre windows
    PreFreightSetupForm.Show
    
    'Mark state of the Pre button
    If InvoicePreSettingsmode = Active Then
        PreFreightSettingsButton.Font.Bold = True
    Else
        PreFreightSettingsButton.Font.Bold = False
    End If

End Sub

Private Sub UserForm_Initialize()
    'Runs on form open
    'MsgBox ("Hello from UserForm_Initialize")
    Dim OfferStatusOK As Boolean
    Dim formIndex As Long
    Dim settingsIndex As Long
    Dim ComboItem As Long
    Dim InvoiceListDropDownRestored As Boolean
    Dim AnySCActive As Boolean
    Dim PreLCLSurchargeActive As Boolean
    Dim PostLCLSurchargeActive As Boolean
    
    If DebugMode Then Call SaveDebugInfo("UserForm_Initialize()", "Start")
   
    InitRunning = True  'Mark that we are running all the init code
    Call SetFormLabels
    KeepFormOpen = False
    Call InitStorage

    '=== Restore Settings

    'If no settings, then try to load from Storage sheet
    If Not Settings.HasContent Then
        Call LoadSavedSettings
        Settings.HasContent = True
    End If
    
    'Page setting
    Me.MultiPage.Value = Settings.ActivePage
    
    '--- Offer page

    'Offer
    FormOfferName = ""
    Call FillOfferDropdown
    If OfferSettings.OfferName <> "" Then   'Only restore if there is something stored
        For ComboItem = 0 To OfferDropDown.ListCount - 1
            If OfferDropDown.List(ComboItem) = OfferSettings.OfferName Then
                OfferDropDown.ListIndex = ComboItem
                FormOfferName = OfferSettings.OfferName
            End If
        Next
    End If
    If OfferDropDown.Value <> "" Then
        OfferStatusOK = True
    End If

    'Currency
    If OfferStatusOK Then
        Call GetListOfCurrenciesInOffer(FormOfferName)
        Call UpdateCurrencyItems
        If Settings.HasContent = True Then
            Call RestoreCurrencyValues
        End If
        Call EnableOfferTestButton
    Else
        Call DisableCurrencyItems
        Call DisableOfferTestButton
    End If

    'Surcharges
    If OfferStatusOK Then
        Call GetListOfSurchargesInOffer(FormOfferName)    'Public FormSurchargeList() is used for storage
        'Check if some known surcharge is checked
        For formIndex = 1 To cMAXSURCHARGES
            For settingsIndex = 1 To cMAXSURCHARGES
                If (FormSurchargeList(settingsIndex).Name = OfferSettings.SurchargeInfo(formIndex).Name) Then
                    FormSurchargeList(settingsIndex).Active = OfferSettings.SurchargeInfo(formIndex).Active
                    'FormSurchargeList(settingsIndex).Type = OfferSettings.SurchargeInfo(formIndex).Type
                    'FormSurchargeList(settingsIndex).IsLCL = OfferSettings.SurchargeInfo(formIndex).IsLCL
                    If FormSurchargeList(settingsIndex).Active = True Then
                        AnySCActive = True
                        If FormSurchargeList(settingsIndex).Type = PreFreightType Then
                            PreLCLSurchargeActive = True
                        ElseIf FormSurchargeList(settingsIndex).Type = PostFreightType Then
                            PostLCLSurchargeActive = True
                        End If
                    End If
                    FormSurchargeList(settingsIndex).Sheetname = OfferSettings.SurchargeInfo(formIndex).Sheetname
                End If
            Next settingsIndex
        Next formIndex
        Call UpdateSurchargeItems
    Else
        Call DisableSurchargeItems
    End If
    
    '--- Invoicelist page
    FormInvoiceListName = ""
    Call FillInvoiceListDropdown
    
    If InvoiceListDropDown.ListCount = 0 Or InvoiceListDropDown.ListIndex = -1 Or InvoiceListDropDown.Value = "" Then
        Call DisableInvoiceListItems
        Call DisableInvoiceTestButton
        Call DisableOutputItems
        Call DisablePrePostShipmentButtons
        FormInvoiceListName = ""
    Else
        Call EnableOutputItems
        Call EnableInvoiceTestButton
        Call EnablePrePostShipmentButtons(PreLCLSurchargeActive, PostLCLSurchargeActive)    'logic to enable is in the sub

        If InvoiceSettings.Sheetname <> "" Then   'Only restore if there is something stored
            For ComboItem = 0 To InvoiceListDropDown.ListCount - 1
                If InvoiceListDropDown.List(ComboItem) = InvoiceSettings.Sheetname Then
                    InvoiceListDropDown.ListIndex = ComboItem
                    FormInvoiceListName = InvoiceSettings.Sheetname
                    InvoiceListDropDownRestored = True
                End If
            Next
        End If
        If InvoiceListDropDownRestored Then
            If InvoiceSettings.headerRow > 0 Then         'Restore HeaderRow
                FormInvoiceHeaderRow = InvoiceSettings.headerRow
                HeaderRowSpinButton.Value = FormInvoiceHeaderRow
                HeaderRowTextBox.Value = FormInvoiceHeaderRow
            Else
                FormInvoiceHeaderRow = HeaderRowTextBox.Value
                HeaderRowSpinButton.Value = FormInvoiceHeaderRow
            End If
        Else
            FormInvoiceHeaderRow = HeaderRowTextBox.Value
            HeaderRowSpinButton.Value = FormInvoiceHeaderRow
        End If
                
        Call UpdateHeaderExample(FormInvoiceHeaderRow)
        Call FillColumnDropdowns(FormInvoiceListName, FormInvoiceHeaderRow)
    
        If InvoiceListDropDownRestored Then
            Call RestoreColumnDropdowns
        End If
    
        If InvoiceListDropDownRestored Then
            UnitsDropdown.ListIndex = InvoiceSettings.Units - 1 'Restore Units
        End If
        If AmountColumnDropdown.ListIndex > 0 Then
            UnitsDropdown.Enabled = True
        Else
            UnitsDropdown.Enabled = False
        End If
    End If
        
    '--- Output page
    Call FillOutputDropdown
    Call FillDetailsLimitDropdown
    
    If Settings.HasContent Then
        If OutputSettings.IsNewSheet = True Then
            OutputDropDown.ListIndex = 0
        ElseIf OutputSettings.IsInvoiceListSheet = True Then
            OutputDropDown.ListIndex = 1
            OutputSettings.Sheetname = InvoiceSettings.Sheetname
        End If
        'ShowFreightPriceColumnCheckBox.Value = OutputSettings.ShowColumnWithFreightCalc
        ShowNormalPriceColumnCheckBox.Value = OutputSettings.ShowColumnWithNormalCalc
        ShowNormalPriceDetailsColumnCheckBox.Value = OutputSettings.ShowColumnWithNormalCalcDetails
        ShowChargeableColumnCheckBox.Value = OutputSettings.ShowColumnWithChargeableAmount
        ShowCalcModeColumnCheckBox.Value = OutputSettings.ShowColumnWithCalcMode
        ShowPriceDiffInUnitsCheckBox.Value = OutputSettings.ShowColumnWithPriceDiffInUnits
        ShowPriceDiffInPctCheckBox.Value = OutputSettings.ShowColumnWithPriceDiffInPercent
        MakePctDiffCellsColoredCheckBox.Value = OutputSettings.MakePctDiffCellsColored
        ColorTextBox.Value = OutputSettings.PriceDiffSolidColorPercent
        'ColorSpinButton.Value = OutputSettings.PriceDiffSolidColorPercent
        ShowCalcDetailsinCellsCheckBox.Value = OutputSettings.ShowDetailsAsCellComments
        If OutputSettings.MaxRowsWithComments = cCommentsLimit1 Then
            DetailsLimitCB.ListIndex = 0
        ElseIf OutputSettings.MaxRowsWithComments = cCommentsLimit2 Then
            DetailsLimitCB.ListIndex = 1
        ElseIf OutputSettings.MaxRowsWithComments = cCommentsLimit3 Then
            DetailsLimitCB.ListIndex = 2
        ElseIf OutputSettings.MaxRowsWithComments = cCommentsNoLimit Then
            DetailsLimitCB.ListIndex = 3
        End If
        
        If AnySCActive Then
            MultiPage.OutputPage.ShowSurchargeColumnCheckBox.Enabled = True
        Else
            MultiPage.OutputPage.ShowSurchargeColumnCheckBox.Enabled = False
            OutputSettings.ShowColumnWithSurcharges = False
        End If
        ShowSurchargeColumnCheckBox.Value = OutputSettings.ShowColumnWithSurcharges
        
        ShowSumCheckBox.Value = OutputSettings.ShowSum
        If OutputSettings.OutputMode = OutputCheckMode Then
            CheckModeOptBtn.Value = True
            BenchModeOptBtn.Value = False
        Else
            BenchModeOptBtn.Value = True
            CheckModeOptBtn.Value = False
        End If
    Else
        Call SetDefaultOutputOptions
    End If
    OutputSettings.InvoiceStartColumn = 0
    OutputSettings.InvoiceFromColumn = 0
    OutputSettings.InvoiceToColumn = 0
    OutputSettings.InvoiceEffKGColumn = 0
    OutputSettings.InvoiceEffM3Column = 0
    OutputSettings.InvoiceEffLDMColumn = 0
    OutputSettings.InvoiceQuantityColumn = 0
    OutputSettings.NormalCalcColumn = 0
    OutputSettings.NormalCalcDetailsColumn = 0
    OutputSettings.AdvantageCalcColumn = 0
    OutputSettings.AdvantageCalcDetailsColumn = 0
    OutputSettings.CalcModeColumn = 0
    OutputSettings.PriceDiffInUnitsColumn = 0
    OutputSettings.PriceDiffInPercentColumn = 0
    
    If ToolName = "Fr8Check" Then   'Hide Mode option on fr8check
        CheckModeOptBtn.Visible = False
        CheckModeOptBtn.Value = True
        BenchModeOptBtn.Visible = False
        BenchModeOptBtn.Value = False
        OutputModeLabel.Visible = False
        OutputSettings.OutputMode = OutputCheckMode
'    Else
'        CheckModeOptBtn.Visible = True
'        CheckModeOptBtn.Value = False
'        BenchModeOptBtn.Visible = True
'        BenchModeOptBtn.Value = True
'        OutputModeLabel.Visible = True
    End If
    Call UpdateOutputItems
    
    Call MultiPage_Change   'update the shown sheet
    
    InitRunning = False

End Sub

Private Sub UserForm_Activate()
    'MsgBox ("Hello from UserForm_Activate")
    'Set window position
    Me.StartUpPosition = 0
    Me.Top = Application.Top + 175
    Me.Left = Application.Left + 25
'    Me.Left = Application.Left + Application.Width - Me.Width - 25
   
    'Restore the last page stored
     Me.MultiPage.Value = Settings.ActivePage
End Sub


Private Sub SaveButton_Click()
    'MsgBox ("Button Save clicked")
    Dim i As Long
    Dim dummy As MSForms.ReturnBoolean
    Dim Calcmode As Long

    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " SaveButton_Click(): Start"
    
    LabelCalcStat.Visible = True
    LabelCalcStat.Caption = Txt("LabelCalcStat_Saving")
    Me.Repaint

    '=== SAVE all settings to the global variables and the Storage sheet
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " SaveButton_Click(): Calling InitStorage"
    If AutoSave Then
        Call InitStorage    'Do not delete first
    Else
        Call ResetStorage   'Delete sheet first
    End If
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " SaveButton_Click(): Done InitStorage"
    Call SaveVar("Savetime", Now)
        
    'Page setting
    Settings.ActivePage = Me.MultiPage.Value
    Call SaveVar("Settings.ActivePage", Settings.ActivePage)

    '--- Offer Page:
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " SaveButton_Click(): Saving Offerpage"

    'Offername
    OfferSettings.OfferName = FormOfferName
    Call SaveVar("OfferSettings.OfferName", OfferSettings.OfferName)
    Call GetForwarderAndTypeNameInOffer(FormOfferName) 'Stores info in Public OfferSettings
    
    Call SaveVar("OfferSettings.ForwarderName", OfferSettings.ForwarderName)
    Call SaveVar("OfferSettings.OfferDesc", OfferSettings.OfferDesc)
    Call SaveVar("OfferSettings.Sheetname", OfferSettings.Sheetname)
 
    'Currencies
    Call CurrencyInput1_Exit(dummy)    'Make sure inputs are read
    Call CurrencyInput2_Exit(dummy)
    Call CurrencyInput3_Exit(dummy)
    For i = 0 To cMAXCURRENCIES
        OfferSettings.CurrencyInfo(i).Name = FormCurrencyList(i).Name
        OfferSettings.CurrencyInfo(i).Value = FormCurrencyList(i).Value
        Call SaveVar("OfferSettings.CurrencyInfo(" & i & ").Name", OfferSettings.CurrencyInfo(i).Name)
        Call SaveVar("OfferSettings.CurrencyInfo(" & i & ").Value", OfferSettings.CurrencyInfo(i).Value)
    Next i
    'Surcharges
    For i = 0 To cMAXSURCHARGES
        OfferSettings.SurchargeInfo(i).Name = FormSurchargeList(i).Name
        OfferSettings.SurchargeInfo(i).Type = FormSurchargeList(i).Type
        OfferSettings.SurchargeInfo(i).Active = FormSurchargeList(i).Active
        OfferSettings.SurchargeInfo(i).Sheetname = FormSurchargeList(i).Sheetname
        Call SaveVar("OfferSettings.SurchargeInfo(" & i & ").Name", OfferSettings.SurchargeInfo(i).Name)
        Call SaveVar("OfferSettings.SurchargeInfo(" & i & ").Type", OfferSettings.SurchargeInfo(i).Type)
        Call SaveVar("OfferSettings.SurchargeInfo(" & i & ").IsLCL", OfferSettings.SurchargeInfo(i).IsLCL)
        Call SaveVar("OfferSettings.SurchargeInfo(" & i & ").Active", OfferSettings.SurchargeInfo(i).Active)
        Call SaveVar("OfferSettings.SurchargeInfo(" & i & ").Sheetname", OfferSettings.SurchargeInfo(i).Sheetname)
    Next i

    '--- Invoicelist Page:
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " SaveButton_Click(): Saving Invoicelistpage"
    
    InvoiceSettings.Sheetname = InvoiceListDropDown.Value
    InvoiceSettings.headerRow = HeaderRowTextBox.Value
    InvoiceSettings.FromColumn = FromColumnDropdown.ListIndex + 1
    InvoiceSettings.ToColumn = DestinationColumnDropdown.ListIndex + 1
    InvoiceSettings.PriceColumn = PriceColumnDropdown.ListIndex + 1
    InvoiceSettings.EffM3Column = AmountM3ColumnDropdown.ListIndex
    InvoiceSettings.EffLDMColumn = AmountLDMColumnDropdown.ListIndex
    InvoiceSettings.EffKGColumn = AmountKGColumnDropdown.ListIndex
    InvoiceSettings.QuantityColumn = AmountColumnDropdown.ListIndex
    InvoiceSettings.Units = UnitsDropdown.ListIndex + 1

    Call SaveVar("InvoiceSettings.Sheetname", InvoiceSettings.Sheetname)
    Call SaveVar("InvoiceSettings.HeaderRow", InvoiceSettings.headerRow)
    Call SaveVar("InvoiceSettings.FromColumn", InvoiceSettings.FromColumn)
    Call SaveVar("InvoiceSettings.ToColumn", InvoiceSettings.ToColumn)
    Call SaveVar("InvoiceSettings.PriceColumn", InvoiceSettings.PriceColumn)
    Call SaveVar("InvoiceSettings.EffM3Column", InvoiceSettings.EffM3Column)
    Call SaveVar("InvoiceSettings.EffLDMColumn", InvoiceSettings.EffLDMColumn)
    Call SaveVar("InvoiceSettings.EffKGColumn", InvoiceSettings.EffKGColumn)
    Call SaveVar("InvoiceSettings.QuantityColumn", InvoiceSettings.QuantityColumn)
    Call SaveVar("InvoiceSettings.Units", InvoiceSettings.Units)

    Call SaveVar("InvoicePreSettings.Sheetname", InvoicePreSettings.Sheetname)
    Call SaveVar("InvoicePreSettings.HeaderRow", InvoicePreSettings.headerRow)
    Call SaveVar("InvoicePreSettings.EffM3Column", InvoicePreSettings.EffM3Column)
    Call SaveVar("InvoicePreSettings.EffLDMColumn", InvoicePreSettings.EffLDMColumn)
    Call SaveVar("InvoicePreSettings.EffKGColumn", InvoicePreSettings.EffKGColumn)
    Call SaveVar("InvoicePreSettings.QuantityColumn", InvoicePreSettings.QuantityColumn)
    Call SaveVar("InvoicePreSettings.Units", InvoicePreSettings.Units)
    Call SaveVar("InvoicePreSettingsmode", InvoicePreSettingsmode)

    Call SaveVar("InvoicePostSettings.Sheetname", InvoicePostSettings.Sheetname)
    Call SaveVar("InvoicePostSettings.HeaderRow", InvoicePostSettings.headerRow)
    Call SaveVar("InvoicePostSettings.EffM3Column", InvoicePostSettings.EffM3Column)
    Call SaveVar("InvoicePostSettings.EffLDMColumn", InvoicePostSettings.EffLDMColumn)
    Call SaveVar("InvoicePostSettings.EffKGColumn", InvoicePostSettings.EffKGColumn)
    Call SaveVar("InvoicePostSettings.QuantityColumn", InvoicePostSettings.QuantityColumn)
    Call SaveVar("InvoicePostSettings.Units", InvoicePostSettings.Units)
    Call SaveVar("InvoicePostSettingsmode", InvoicePostSettingsmode)

    '--- Output Page:
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " SaveButton_Click(): Saving Output Page"
    
    OutputSettings.IsInvoiceListSheet = False
    OutputSettings.IsNewSheet = False
    OutputSettings.Sheetname = ""
    If OutputDropDown.ListIndex = 0 Then
        OutputSettings.IsNewSheet = True
    ElseIf OutputDropDown.ListIndex = 1 Then
        OutputSettings.IsInvoiceListSheet = True
        OutputSettings.Sheetname = InvoiceSettings.Sheetname
    Else
        OutputSettings.Sheetname = OutputDropDown.Value 'Not used right now
    End If
    
    'OutputSettings.ShowColumnWithFreightCalc = ShowFreightPriceColumnCheckBox.Value
    OutputSettings.ShowColumnWithNormalCalc = ShowNormalPriceColumnCheckBox.Value
    OutputSettings.ShowColumnWithNormalCalcDetails = ShowNormalPriceDetailsColumnCheckBox.Value
    Calcmode = GetCalculationModeInOffer(FormOfferName)
    If Calcmode = CalculationModeType.NormalMode Then
        OutputSettings.ShowColumnWithAdvantageCalc = False
        OutputSettings.ShowColumnWithAdvantageCalcDetails = False
    Else
        OutputSettings.ShowColumnWithAdvantageCalc = OutputSettings.ShowColumnWithNormalCalc
        OutputSettings.ShowColumnWithAdvantageCalcDetails = OutputSettings.ShowColumnWithNormalCalcDetails
    End If
    OutputSettings.ShowColumnWithChargeableAmount = ShowChargeableColumnCheckBox.Value
    OutputSettings.ShowColumnWithCalcMode = ShowCalcModeColumnCheckBox.Value
    OutputSettings.ShowColumnWithPriceDiffInUnits = ShowPriceDiffInUnitsCheckBox.Value
    OutputSettings.ShowColumnWithPriceDiffInPercent = ShowPriceDiffInPctCheckBox.Value
    OutputSettings.MakePctDiffCellsColored = MakePctDiffCellsColoredCheckBox.Value
    OutputSettings.PriceDiffSolidColorPercent = ColorTextBox.Value
    OutputSettings.ShowDetailsAsCellComments = ShowCalcDetailsinCellsCheckBox.Value
    If DetailsLimitCB.ListIndex = 0 Then
        OutputSettings.MaxRowsWithComments = cCommentsLimit1
    ElseIf DetailsLimitCB.ListIndex = 1 Then
        OutputSettings.MaxRowsWithComments = cCommentsLimit2
    ElseIf DetailsLimitCB.ListIndex = 2 Then
        OutputSettings.MaxRowsWithComments = cCommentsLimit3
    ElseIf DetailsLimitCB.ListIndex = 3 Then
        OutputSettings.MaxRowsWithComments = cCommentsNoLimit
    Else
        OutputSettings.MaxRowsWithComments = cCommentsLimit1
    End If
    OutputSettings.ShowColumnWithSurcharges = ShowSurchargeColumnCheckBox.Value
    OutputSettings.ShowSum = ShowSumCheckBox.Value

    Call SaveVar("OutputSettings.IsInvoiceListSheet", OutputSettings.IsInvoiceListSheet)
    Call SaveVar("OutputSettings.IsNewSheet", OutputSettings.IsNewSheet)
    Call SaveVar("OutputSettings.Sheetname", OutputSettings.Sheetname)
    Call SaveVar("OutputSettings.ShowColumnWithFreightCalc", OutputSettings.ShowColumnWithFreightCalc)
    Call SaveVar("OutputSettings.ShowColumnWithNormalCalc", OutputSettings.ShowColumnWithNormalCalc)
    Call SaveVar("OutputSettings.ShowColumnWithNormalCalcDetails", OutputSettings.ShowColumnWithNormalCalcDetails)
    Call SaveVar("OutputSettings.ShowColumnWithAdvantageCalc", OutputSettings.ShowColumnWithAdvantageCalc)
    Call SaveVar("OutputSettings.ShowColumnWithAdvantageCalcDetails", OutputSettings.ShowColumnWithAdvantageCalcDetails)
    Call SaveVar("OutputSettings.ShowColumnWithChargeableAmount", OutputSettings.ShowColumnWithChargeableAmount)
    Call SaveVar("OutputSettings.ShowColumnWithCalcMode", OutputSettings.ShowColumnWithCalcMode)
    Call SaveVar("OutputSettings.ShowColumnWithPriceDiffInUnits", OutputSettings.ShowColumnWithPriceDiffInUnits)
    Call SaveVar("OutputSettings.ShowColumnWithPriceDiffInPercent", OutputSettings.ShowColumnWithPriceDiffInPercent)
    Call SaveVar("OutputSettings.MakePctDiffCellsColored", OutputSettings.MakePctDiffCellsColored)
    Call SaveVar("OutputSettings.PriceDiffSolidColorPercent", OutputSettings.PriceDiffSolidColorPercent)
    Call SaveVar("OutputSettings.ShowDetailsAsCellComments", OutputSettings.ShowDetailsAsCellComments)
    Call SaveVar("OutputSettings.MaxRowsWithComments", OutputSettings.MaxRowsWithComments)
    Call SaveVar("OutputSettings.ShowColumnWithSurcharges", OutputSettings.ShowColumnWithSurcharges)
    Call SaveVar("OutputSettings.ShowSum", OutputSettings.ShowSum)
    Call SaveVar("OutputSettings.OutputMode", OutputSettings.OutputMode)

    Settings.HasContent = True
    
    LabelCalcStat.Visible = False
    LabelCalcStat.Caption = ""
    Me.Repaint

    'And finaly hide the form
'    If Not KeepFormOpen Then
'        Me.Hide
'    End If
    'Debug.Print Format(Now, "dd-mm-yyyy hh:ss") & " SaveButton_Click(): End"
End Sub

Private Sub SaveButton_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    'MsgBox ("Hello from SaveButton_Exit")
End Sub

Private Sub UserForm_Click()
    'MsgBox ("Hello from UserForm_Click")
End Sub

Private Sub UserForm_Deactivate()
    'MsgBox ("Hello from UserForm_Deactivate")
End Sub


Private Sub UpdateOutputItems()
    Dim Calcmode As Long

    'Get Offer calc mode for the settings that depend on that:
    Calcmode = GetCalculationModeInOffer(FormOfferName)

    'Normal Price column Enable/Disable subitems
    If (ShowNormalPriceColumnCheckBox.Value = True And ShowNormalPriceColumnCheckBox.Enabled = True) Then
        ShowNormalPriceDetailsColumnCheckBox.Enabled = True
    Else
        ShowNormalPriceDetailsColumnCheckBox.Value = False
        ShowNormalPriceDetailsColumnCheckBox.Enabled = False
    End If
    
    If CheckModeOptBtn.Value = True Then
        MultiPage.OutputPage.OutputModeLabel.Caption = Txt("Output.CheckModeLabel")
    Else
        MultiPage.OutputPage.OutputModeLabel.Caption = Txt("Output.BenchModeLabel")
    End If

    'Show Details
    If ShowCalcDetailsinCellsCheckBox.Value = True Then
        DetailsLimitCB.Enabled = True
    Else
        DetailsLimitCB.Enabled = False
    End If

    'PriceDiff PCT column Enable/Disable subitems
    If (ShowPriceDiffInPctCheckBox.Value = True And ShowPriceDiffInPctCheckBox.Enabled = True) Then
        MakePctDiffCellsColoredCheckBox.Enabled = True
        ColorTextBox.Enabled = True
        ColorSpinButton.Enabled = True
        ColorDescLabel1.Enabled = True
        ColorDescLabel2.Enabled = True
    Else
        MakePctDiffCellsColoredCheckBox.Value = False
        MakePctDiffCellsColoredCheckBox.Enabled = False
        ColorTextBox.Enabled = False
        ColorSpinButton.Enabled = False
        ColorDescLabel1.Enabled = False
        ColorDescLabel2.Enabled = False
    End If

    'ColorCells Enable/Disable subitems
    If (MakePctDiffCellsColoredCheckBox.Value = True And MakePctDiffCellsColoredCheckBox.Enabled) Then
        ColorTextBox.Enabled = True
        ColorSpinButton.Enabled = True
        ColorDescLabel1.Enabled = True
        ColorDescLabel2.Enabled = True
    Else
        ColorTextBox.Enabled = False
        ColorSpinButton.Enabled = False
        ColorDescLabel1.Enabled = False
        ColorDescLabel2.Enabled = False
    End If

End Sub

Sub UpdateOutputInfoLabel()
    OutputInfoLabel.Caption = ""
    OutputInfoLabel.ForeColor = vbBlack
    
    'New sheet is selected (first item)
    If OutputDropDown.ListIndex = 0 Then
        OutputInfoLabel.Caption = Txt("Output.InfoLabelNewSheet")
        'OutputSettings.IsNewSheet = True
    'Invoicelist is selected (Second item)
    ElseIf OutputDropDown.ListIndex = 1 Then
        OutputInfoLabel.Caption = Txt("Output.InfoLabelInvoiceList")
        'OutputSettings.IsInvoiceListSheet = True
    'Existing sheets
    ElseIf OutputDropDown.ListIndex > 1 Then
        OutputInfoLabel.Caption = Txt("Output.InfoLabelExisting")
        OutputInfoLabel.ForeColor = vbRed
    End If
    
    'Do not show anything when disabled
    If OutputDropDown.Enabled = False Then
        OutputInfoLabel.Caption = ""
    End If
    
End Sub

Private Sub UserForm_RemoveControl(ByVal control As MSForms.control)
    'MsgBox ("Hello from UserForm_RemoveControl")
End Sub

Private Sub UserForm_Terminate()
    'MsgBox ("Hello from UserForm_Terminate")
End Sub

'
' --- FORM support
'
Private Sub SetFormLabels()
    Dim temp As String
    'Window
    Me.Caption = Txt("Ribbon.Button.Calc")

    'Tabs
    MultiPage.OfferPage.Caption = Txt("OfferPageTab")
    MultiPage.InvoiceListPage.Caption = Txt("InvoiceListTab")
    MultiPage.OutputPage.Caption = Txt("OutputPageTab")
    'Buttons
    SaveButton.Caption = Txt("SaveButton")
    ButtonCalc.Caption = Txt("ButtonCalcStart")
    'Form Calc label
    LabelCalcStat.Visible = False
    
    'Offer tab
    MultiPage.OfferPage.OfferLabel.Caption = Txt("OfferPage.OfferLabel")
    MultiPage.OfferPage.OfferTabInfoLabel.Caption = Txt("Offer.InfoLabel")
    'Currency label is dynamic so it is set in: UpdateCurrencyItems
    MultiPage.OfferPage.SurchargeLabel.Caption = Txt("OfferPage.SurchargeLabel")

    'InvoiceList tab
    MultiPage.InvoiceListPage.InvoiceListLabel.Caption = Txt("Invoice.InvoiceListLabel")
    MultiPage.InvoiceListPage.InvoiceTabInfoLabel.Caption = Txt("Invoice.InfoLabel")
    MultiPage.InvoiceListPage.HeaderLabel.Caption = Txt("Invoice.HeaderLabel")
    MultiPage.InvoiceListPage.ShipperLabel.Caption = Txt("Invoice.ShipperLabel")
    MultiPage.InvoiceListPage.DestinationLabel.Caption = Txt("Invoice.DestinationLabel")
    MultiPage.InvoiceListPage.PriceLabel.Caption = Txt("Invoice.PriceLabel")
    MultiPage.InvoiceListPage.AmountEffM3Label.Caption = Txt("Invoice.AmountEffM3Label")
    MultiPage.InvoiceListPage.AmountEffLDMLabel.Caption = Txt("Invoice.AmountEffLDMLabel")
    MultiPage.InvoiceListPage.AmountEffKGLabel.Caption = Txt("Invoice.AmountEffKGLabel")
    MultiPage.InvoiceListPage.AmountLabel.Caption = Txt("Invoice.AmountLabel")
    MultiPage.InvoiceListPage.PreFreightSettingsButton.Caption = Txt("Invoice.PreFreightSettingsButton")
    MultiPage.InvoiceListPage.PostFreightSettingsButton.Caption = Txt("Invoice.PostFreightSettingsButton")
    Call FillFreightUnitDropdown
    
    'Output tab
    MultiPage.OutputPage.OutputLabel.Caption = Txt("Output.OutputLabel")
    MultiPage.OutputPage.OutputTabInfoLabel.Caption = Txt("Output.InfoLabel")
    MultiPage.OutputPage.OptionsLabel.Caption = Txt("Output.OptionsLabel")
    MultiPage.OutputPage.ShowChargeableColumnCheckBox.Caption = Txt("Output.ShowChargableAmountColumn")
    'MultiPage.OutputPage.ShowFreightPriceColumnCheckBox.Caption = Txt("Output.ShowFreightPriceColumn")
    MultiPage.OutputPage.ShowNormalPriceColumnCheckBox.Caption = Txt("Output.ShowNormalPriceColumn")
    MultiPage.OutputPage.ShowNormalPriceDetailsColumnCheckBox.Caption = Txt("Output.ShowNormalPriceDetailsColumn")
    MultiPage.OutputPage.ShowCalcModeColumnCheckBox.Caption = Txt("Output.ShowCalcModeColumn")
    MultiPage.OutputPage.ShowSurchargeColumnCheckBox.Caption = Txt("Output.ShowSurchargeColumn")
    MultiPage.OutputPage.ShowPriceDiffInUnitsCheckBox.Caption = Txt("Output.ShowPriceDiffInUnits")
    MultiPage.OutputPage.ShowPriceDiffInPctCheckBox.Caption = Txt("Output.ShowPriceDiffInPct")
    MultiPage.OutputPage.MakePctDiffCellsColoredCheckBox.Caption = Txt("Output.MakePctDiffCellsColored")
    MultiPage.OutputPage.ColorDescLabel1.Caption = Txt("Output.ColorDescLabel1")
    MultiPage.OutputPage.ColorDescLabel2.Caption = Txt("Output.ColorDescLabel2")
    MultiPage.OutputPage.CheckModeOptBtn.Caption = Txt("Output.CheckModeOptBtn")
    MultiPage.OutputPage.BenchModeOptBtn.Caption = Txt("Output.BenchModeOptBtn")
    If OutputSettings.OutputMode = OutputCheckMode Then
        MultiPage.OutputPage.OutputModeLabel.Caption = Txt("Output.CheckModeLabel")
    Else
        MultiPage.OutputPage.OutputModeLabel.Caption = Txt("Output.BenchModeLabel")
    End If
    MultiPage.OutputPage.ShowCalcDetailsinCellsCheckBox.Caption = Txt("Output.ShowCalcDetailsinCells")
    MultiPage.OutputPage.ShowSumCheckBox.Caption = Txt("Output.ShowSum")

End Sub


'
' --- OFFER tab support
'
Private Sub FillOfferDropdown()
    ' Fills the dropdown with available offers in this file
    '
    ' If more offersheets have the same forwardername it only shows up once, since they will be treated as one offer.
    '
    Dim ws As Worksheet
    Dim wsName As String
    Dim OfferName As String
    Dim FoundOfferList(cMAXOFFERSHEETS) As String
    Dim listcounter As Long
    Dim Found As Boolean
    Dim i As Long
    i = 0
    listcounter = 0
    'Clear dropdown
    'OfferDropDown.Clear (Not working in all excel versions)
    For i = OfferDropDown.ListCount - 1 To 0 Step -1
        OfferDropDown.RemoveItem i
    Next i
    'Debug.Print "OfferDropDown.ListCount=" & OfferDropDown.ListCount
    For Each ws In ActiveWorkbook.Worksheets
        wsName = ws.Name
        If ws.Visible = xlSheetVisible Then
            OfferName = CheckIfOfferSheet(wsName)
            If OfferName <> "" Then
                Found = False   ' Check if already in the list
                For i = 0 To UBound(FoundOfferList)
                    If FoundOfferList(i) = OfferName Then
                        Found = True
                    End If
                Next i
                If Not Found Then   ' Save if not already in the list
                    If listcounter > cMAXOFFERSHEETS Then
                        Call MsgBox("ERROR: To many offersheets in the file. Max is " & cMAXOFFERSHEETS & " offers.", vbCritical + vbOKOnly)
                        End
                    End If
                    Me.OfferDropDown.AddItem OfferName
                    FoundOfferList(listcounter) = OfferName
                    listcounter = listcounter + 1
                End If
            End If
        End If
    Next

    'Preselect the first if none selected
    If OfferDropDown.ListIndex < 0 Then
        If OfferDropDown.ListCount > 0 Then
            OfferDropDown.ListIndex = 0
        End If
    End If

End Sub

Private Function GetCalculationModeInOffer(OfferName As String) As Long
    'Returns the calculationmode in the offer
    Dim ws As Worksheet
    Dim wsName As String
    Dim TempOfferName As String
    Dim Mode As Long
    
    For Each ws In ActiveWorkbook.Worksheets
        wsName = ws.Name
        TempOfferName = CheckIfOfferSheet(wsName)
        If OfferName = TempOfferName Then   ' Selected Offersheet found
            Mode = GetLeftNumber(Worksheets(wsName).Cells(OfferNameRow, 4).Value2)
            If Mode = 0 Then
                GetCalculationModeInOffer = CalculationModeType.NormalMode
            Else
                GetCalculationModeInOffer = Mode
            End If
        End If
    Next
End Function


Private Sub GetForwarderAndTypeNameInOffer(OfferName As String)
    'Gets the Forwardername and OfferDescription and sheetname in the offer. Saves data in the public OfferSettings
    Dim ws As Worksheet
    Dim wsName As String
    Dim TempOfferName As String
    Dim Mode As Long
    
    For Each ws In ActiveWorkbook.Worksheets
        wsName = ws.Name
        TempOfferName = CheckIfOfferSheet(wsName)
        If OfferName = TempOfferName Then   ' Selected Offersheet found
            OfferSettings.ForwarderName = Replace(Worksheets(wsName).Cells(OfferNameRow, 2).Value2, Chr(10), "")
            OfferSettings.OfferDesc = Replace(Worksheets(wsName).Cells(OfferCategoryRow, 2).Value2, Chr(10), "")
            OfferSettings.Sheetname = wsName
        End If
    Next
End Sub


Private Function GetListOfSurchargesInOffer(OfferName As String)
    ' Returns a list of all the Surcharges in the named offer.
    ' In the list is also any active Roadtoll-, Pre- and postsheets found in the file

    Dim ws As Worksheet
    Dim wsName As String
    Dim TempOfferName As String
    Dim i As Long
'    Dim FoundStdCurr As Boolean
    Dim SurchargeName As String
'    Dim PrePostStdCurrenceName As String
'    Dim OldActiveCell As Range
    Dim LastCol As Long
    Dim Col As Long
    Dim ColName As String
    Dim IsLCL As Boolean

    'Clear list
    For i = 0 To cMAXSURCHARGES
        FormSurchargeList(i).Name = ""
        FormSurchargeList(i).Type = 0
        FormSurchargeList(i).IsLCL = False
        FormSurchargeList(i).Active = False
        FormSurchargeList(i).Sheetname = ""
    Next i
    ' Loop throug all the sheets, find the offersheet(s) and collect the surcharges
    For Each ws In ActiveWorkbook.Worksheets
        wsName = ws.Name
        '--- Offer template sheet
        TempOfferName = CheckIfOfferSheet(wsName)
        If ws.Visible = xlSheetVisible Then
            If TempOfferName <> "" Then
                If OfferName = TempOfferName Then   ' Selected Offersheet found
                    'Get all standard surcharges in the offer
                    LastCol = Last(cLASTCOL, ws.Rows(1))
                    For Col = 1 To LastCol
                        ColName = ws.Cells(1, Col).Value2
                        If ColName = SurchargeRateUnitColumnName Then
                            SurchargeName = ws.Cells(OfferNameRow, Col).Value2
                            Call AddSurcharge(SurchargeName, Normaltype, wsName)
                        End If
                    Next Col
                End If
            '--- Road Tax sheet
            ElseIf CheckIfRoadTaxSheet(wsName) = OfferName Then
                SurchargeName = Txt("SurchargeType.RoadTax")
                Call AddSurcharge(SurchargeName, RoadType, wsName)
            ' --- Pre/post sheets
            ElseIf CheckIfPreFreightSheet(wsName, IsLCL) = OfferName Then
                SurchargeName = Txt("SurchargeType.Pre")
                Call AddSurcharge(SurchargeName, PreFreightType, wsName, IsLCL)
            ElseIf CheckIfPostFreightSheet(wsName, IsLCL) = OfferName Then
                SurchargeName = Txt("SurchargeType.Post")
                Call AddSurcharge(SurchargeName, PostFreightType, wsName, IsLCL)
            End If
        End If
    Next

End Function

Private Sub UpdateSurchargeItems()

    Dim i As Long
    Dim SurCount As Long
    SurCount = 0

    'Find number of surcharges in list
    For i = 1 To UBound(FormSurchargeList)
        If (FormSurchargeList(i).Name <> "") Then
            SurCount = SurCount + 1
        Else
            Exit For
        End If
    Next i
    If SurCount > cMAXSURCHARGES Then SurCount = cMAXSURCHARGES   ' Quick fix

    MultiPage.OfferPage.SurchargeLabel = Txt("OfferPage.SurchargeLabel")
    MultiPage.OfferPage.Surcharge0.Visible = False
    MultiPage.OfferPage.Surcharge1.Visible = False
    MultiPage.OfferPage.Surcharge2.Visible = False
    MultiPage.OfferPage.Surcharge3.Visible = False
    MultiPage.OfferPage.Surcharge4.Visible = False
    MultiPage.OfferPage.Surcharge5.Visible = False
    MultiPage.OfferPage.Surcharge6.Visible = False
    MultiPage.OfferPage.Surcharge7.Visible = False
    MultiPage.OfferPage.Surcharge8.Visible = False
    MultiPage.OfferPage.Surcharge9.Visible = False

    If SurCount = 0 Then
        MultiPage.OfferPage.SurchargeLabel = Txt("OfferPage.SurchargeLabel.NoInfo")
    End If
    If SurCount >= 1 Then
        MultiPage.OfferPage.Surcharge0.Visible = True
        MultiPage.OfferPage.Surcharge0.Caption = Replace(FormSurchargeList(1).Name, Chr(10), " ", 1, -1, vbBinaryCompare)
        MultiPage.OfferPage.Surcharge0.Value = FormSurchargeList(1).Active
    End If
    If SurCount >= 2 Then
        MultiPage.OfferPage.Surcharge1.Visible = True
        MultiPage.OfferPage.Surcharge1.Caption = Replace(FormSurchargeList(2).Name, Chr(10), " ", 1, -1, vbBinaryCompare)
        MultiPage.OfferPage.Surcharge1.Value = FormSurchargeList(2).Active
    End If
    If SurCount >= 3 Then
        MultiPage.OfferPage.Surcharge2.Visible = True
        MultiPage.OfferPage.Surcharge2.Caption = Replace(FormSurchargeList(3).Name, Chr(10), " ", 1, -1, vbBinaryCompare)
        MultiPage.OfferPage.Surcharge2.Value = FormSurchargeList(3).Active
    End If
    If SurCount >= 4 Then
        MultiPage.OfferPage.Surcharge3.Visible = True
        MultiPage.OfferPage.Surcharge3.Caption = Replace(FormSurchargeList(4).Name, Chr(10), " ", 1, -1, vbBinaryCompare)
        MultiPage.OfferPage.Surcharge3.Value = FormSurchargeList(4).Active
    End If
    If SurCount >= 5 Then
        MultiPage.OfferPage.Surcharge4.Visible = True
        MultiPage.OfferPage.Surcharge4.Caption = Replace(FormSurchargeList(5).Name, Chr(10), " ", 1, -1, vbBinaryCompare)
        MultiPage.OfferPage.Surcharge4.Value = FormSurchargeList(5).Active
    End If
    If SurCount >= 6 Then
        MultiPage.OfferPage.Surcharge5.Visible = True
        MultiPage.OfferPage.Surcharge5.Caption = Replace(FormSurchargeList(6).Name, Chr(10), " ", 1, -1, vbBinaryCompare)
        MultiPage.OfferPage.Surcharge5.Value = FormSurchargeList(6).Active
    End If
    If SurCount >= 7 Then
        MultiPage.OfferPage.Surcharge6.Visible = True
        MultiPage.OfferPage.Surcharge6.Caption = Replace(FormSurchargeList(7).Name, Chr(10), " ", 1, -1, vbBinaryCompare)
        MultiPage.OfferPage.Surcharge6.Value = FormSurchargeList(7).Active
    End If
    If SurCount >= 8 Then
        MultiPage.OfferPage.Surcharge7.Visible = True
        MultiPage.OfferPage.Surcharge7.Caption = Replace(FormSurchargeList(8).Name, Chr(10), " ", 1, -1, vbBinaryCompare)
        MultiPage.OfferPage.Surcharge7.Value = FormSurchargeList(8).Active
    End If
    If SurCount >= 9 Then
        MultiPage.OfferPage.Surcharge8.Visible = True
        MultiPage.OfferPage.Surcharge8.Caption = Replace(FormSurchargeList(9).Name, Chr(10), " ", 1, -1, vbBinaryCompare)
        MultiPage.OfferPage.Surcharge8.Value = FormSurchargeList(9).Active
    End If
    If SurCount >= 10 Then
        MultiPage.OfferPage.Surcharge9.Visible = True
        MultiPage.OfferPage.Surcharge9.Caption = Replace(FormSurchargeList(10).Name, Chr(10), " ", 1, -1, vbBinaryCompare)
        MultiPage.OfferPage.Surcharge9.Value = FormSurchargeList(10).Active
    End If

End Sub

Sub DisableSurchargeItems()
    'Hides/disables surcharge items and show message
    MultiPage.OfferPage.SurchargeLabel = Txt("OfferPage.SurchargeLabel.NoInfo")
    MultiPage.OfferPage.SurchargeLabel.Enabled = False
    MultiPage.OfferPage.Surcharge0.Visible = False
    MultiPage.OfferPage.Surcharge1.Visible = False
    MultiPage.OfferPage.Surcharge2.Visible = False
    MultiPage.OfferPage.Surcharge3.Visible = False
    MultiPage.OfferPage.Surcharge4.Visible = False
    MultiPage.OfferPage.Surcharge5.Visible = False
    MultiPage.OfferPage.Surcharge6.Visible = False
    MultiPage.OfferPage.Surcharge7.Visible = False
    MultiPage.OfferPage.Surcharge8.Visible = False
    MultiPage.OfferPage.Surcharge9.Visible = False
End Sub

Private Sub AddSurcharge(ByVal sItem As String, iType As Long, sWsName As String, Optional IsLCL As Boolean = False)
    ' Used for adding surcharges to the list
    Dim i As Long
    Dim SurCount As Long
    Dim Found As Boolean
    SurCount = 1    '0 is the baseprice
    Found = False

    'Find number of surcharges already in the list
    For i = 1 To UBound(FormSurchargeList)
        If (FormSurchargeList(i).Name <> "") Then
            SurCount = SurCount + 1
        Else
            Exit For
        End If
    Next i

    If SurCount >= cMAXSURCHARGES Then
        Exit Sub
    End If

    If sItem <> "" Then
        For i = 1 To SurCount
            If FormSurchargeList(i).Name = sItem And FormSurchargeList(i).Sheetname = sWsName Then
                Found = True
            End If
        Next i

        If Not Found Then   ' Save if not already in the list
            FormSurchargeList(SurCount).Name = sItem
            FormSurchargeList(SurCount).Type = iType
            FormSurchargeList(SurCount).Sheetname = sWsName
            FormSurchargeList(SurCount).IsLCL = IsLCL
        End If
    End If

End Sub


Private Function GetListOfCurrenciesInOffer(pOfferName As String)
    ' Gets a list of all the currencies used in the offer FormOfferName and stores them in the Global
    ' In the list is also currencies from any active Roadtoll-, Pre- and postsheets found in the file
    ' First item FormCurrencyList(0) contains the standard currency.
    
    ' 12-02-2019 Fix of list cleanup that caused dublicate currencies

    Dim ws As Worksheet
    Dim wsName As String
    Dim TempOfferName As String
    Dim FoundStdCurr As Boolean
    Dim CurrencyName As String
    Dim PrePostStdCurrenceName As String
    Dim OldActiveCell As Range
    Dim LastCol As Long
    Dim Col As Long
    Dim ColName As String
    Dim i As Long

    'Clear form currency variables
    For i = 0 To UBound(FormCurrencyList)
        FormCurrencyList(i).Name = ""
        FormCurrencyList(i).Value = 0
    Next i

    ' Loop throug all the sheets, find the offersheet(s) and collect the currencies
    For Each ws In ActiveWorkbook.Worksheets
        If ws.Visible = xlSheetVisible Then
            wsName = ws.Name
            '--- Offer template sheet
            TempOfferName = CheckIfOfferSheet(wsName)
            If TempOfferName <> "" Then
                If TempOfferName = pOfferName Then  ' Selected Offersheet found
                    'Get standard currency from B8
                    CurrencyName = ws.Range("B8").Value2
                    If CurrencyName <> "" Then
                        Call AddCurrencyName(CurrencyName, StandardCurrency:=True)
                        FoundStdCurr = True
                    End If
                    'Get Pricematrix currency from D8
                    CurrencyName = ws.Range("D8").Value2
                    Call AddCurrencyName(CurrencyName)
    
                    'Get all currencies from the standard surcharges in the offer
                    LastCol = Last(cLASTCOL, ws.Rows(1))
                    For Col = 1 To LastCol
                        ColName = ws.Cells(1, Col).Value2
                        If ColName = SurchargeRateUnitColumnName Then
                            CurrencyName = ws.Cells(OfferCurrencyRow, Col).Value2
                            Call AddCurrencyName(CurrencyName)
                        End If
                    Next Col
                End If
            '--- Road Tax sheet
            ElseIf CheckIfRoadTaxSheet(wsName) = pOfferName Then
                'Get Pricematrix currency from D8
                CurrencyName = ws.Range("D8").Value2
                If CurrencyName = "" Then
                    'Get standard currency from B8
                    CurrencyName = ws.Range("B8").Value2
                    If CurrencyName <> "" Then
                        Call AddCurrencyName(CurrencyName)
                    End If
                Else
                    Call AddCurrencyName(CurrencyName)
                End If
            ' --- Pre and Post sheets
            ElseIf CheckIfPrePostSheet(wsName) = pOfferName Then
                'Get standard currency from B8
                PrePostStdCurrenceName = ws.Range("B8").Value2
                'Get Pricematrix currency from D8
                CurrencyName = ws.Range("D8").Value2
                If CurrencyName = "" Then
                    CurrencyName = PrePostStdCurrenceName
                End If
                Call AddCurrencyName(CurrencyName)
                'Get all currencies from the surcharges in the pre/post
                LastCol = Last(cLASTCOL, ws.Rows(1))
                For Col = 1 To LastCol
                    ColName = ws.Cells(1, Col).Value2
                    If ColName = SurchargeRateUnitColumnName Then
                        CurrencyName = ws.Cells(OfferCurrencyRow, Col).Value2
                        If CurrencyName = "" Then
                            CurrencyName = PrePostStdCurrenceName
                        End If
                        Call AddCurrencyName(CurrencyName)
                    End If
                Next Col
            End If
        End If
    Next

    If (Not FoundStdCurr) Then  ' If no standard currency was found then set it to EUR
        Call AddCurrencyName("EUR", StandardCurrency:=True)
    End If
    
    'Remove for dublicates to Std currency
    For i = 1 To UBound(FormCurrencyList)
        If FormCurrencyList(i).Name = FormCurrencyList(0).Name Then
            FormCurrencyList(i).Name = ""
            FormCurrencyList(i).Value = 0#
        End If
    Next i
    For i = 1 To UBound(FormCurrencyList) - 1
        If FormCurrencyList(i).Name = "" And FormCurrencyList(i + 1).Name <> "" Then
            FormCurrencyList(i).Name = FormCurrencyList(i + 1).Name
            FormCurrencyList(i).Value = FormCurrencyList(i + 1).Value
            FormCurrencyList(i + 1).Name = ""
            FormCurrencyList(i + 1).Value = 0#
        End If
    Next i


End Function


Private Sub UpdateCurrencyItems()
    'Shows up to 3 currency input boxes.
    'If more than 3 currencies found then an error message is displayed.

    Dim CurrencyCount As Long
    Dim i As Long
    Dim StdCur As String

    'Find number of currencies in list (FormCurrencyList(0) is the standard currency)
    For i = 1 To UBound(FormCurrencyList)
        If (FormCurrencyList(i).Name <> "") Then
            CurrencyCount = i
        End If
    Next i
    If CurrencyCount > 3 Then
        CurrencyWarningLabel.Caption = printf(Txt("OfferPage.CurrencyWarningLabel"), CurrencyCount)
        CurrencyCount = 3
    End If

    CurrencyInput1.Visible = False
    CurrencyName1.Visible = False
    CurrencyInput2.Visible = False
    CurrencyName2.Visible = False
    CurrencyInput3.Visible = False
    CurrencyName3.Visible = False

    StdCur = FormCurrencyList(0).Name

    MultiPage.OfferPage.StandardCurrencyLabel.Caption = printf(Txt("OfferPage.StandardCurrencyLabel"), StdCur)
    If (CurrencyCount = 0) Then
        MultiPage.OfferPage.CurrencyLabel.Caption = printf(Txt("OfferPage.CurrencyLabel.OnlyStd"), StdCur)
    End If
    If (CurrencyCount >= 1) Then
        MultiPage.OfferPage.CurrencyLabel.Caption = printf(Txt("OfferPage.CurrencyLabel.Enter"), StdCur)
        CurrencyInput1.Visible = True
        CurrencyName1.Visible = True
        CurrencyName1.Caption = FormCurrencyList(1).Name
        CurrencyInput1.Enabled = True
        If FormCurrencyList(1).Name = OfferSettings.CurrencyInfo(1).Name Then
            CurrencyInput1.Value = OfferSettings.CurrencyInfo(1).Value
        ElseIf FormCurrencyList(1).Name = OfferSettings.CurrencyInfo(2).Name Then
            CurrencyInput1.Value = OfferSettings.CurrencyInfo(2).Value
        ElseIf FormCurrencyList(1).Name = OfferSettings.CurrencyInfo(3).Name Then
            CurrencyInput1.Value = OfferSettings.CurrencyInfo(3).Value
        End If
    End If
    If (CurrencyCount >= 2) Then
        CurrencyInput2.Visible = True
        CurrencyInput2.Enabled = True
        CurrencyName2.Visible = True
        CurrencyName2.Caption = FormCurrencyList(2).Name
        If FormCurrencyList(2).Name = OfferSettings.CurrencyInfo(1).Name Then
            CurrencyInput2.Value = OfferSettings.CurrencyInfo(1).Value
        ElseIf FormCurrencyList(2).Name = OfferSettings.CurrencyInfo(2).Name Then
            CurrencyInput2.Value = OfferSettings.CurrencyInfo(2).Value
        ElseIf FormCurrencyList(2).Name = OfferSettings.CurrencyInfo(3).Name Then
            CurrencyInput2.Value = OfferSettings.CurrencyInfo(3).Value
        End If
    End If
    If (CurrencyCount = 3) Then
        CurrencyInput3.Visible = True
        CurrencyInput3.Enabled = True
        CurrencyName3.Visible = True
        CurrencyName3.Caption = FormCurrencyList(3).Name
        If FormCurrencyList(3).Name = OfferSettings.CurrencyInfo(1).Name Then
            CurrencyInput3.Value = OfferSettings.CurrencyInfo(1).Value
        ElseIf FormCurrencyList(3).Name = OfferSettings.CurrencyInfo(2).Name Then
            CurrencyInput3.Value = OfferSettings.CurrencyInfo(2).Value
        ElseIf FormCurrencyList(3).Name = OfferSettings.CurrencyInfo(3).Name Then
            CurrencyInput3.Value = OfferSettings.CurrencyInfo(3).Value
        End If
    End If

End Sub

Private Sub DisableCurrencyItems()
    'Hides/disables currency items and show message
    CurrencyLabel = Txt("OfferPage.CurrencyLabel.NoInfo")
    CurrencyLabel.Enabled = False

    CurrencyInput1.Visible = False
    CurrencyName1.Visible = False

    CurrencyInput2.Visible = False
    CurrencyName2.Visible = False

    CurrencyName3.Visible = False
    CurrencyInput3.Visible = False
End Sub

Private Sub RestoreCurrencyValues()
    'Restore currency values from the stored OfferSettings globals where there is a name match from the found in the Form currencies
    Dim i As Long
    Dim DecSep As String
    Dim NotDecSep As String
    DecSep = Application.International(xlDecimalSeparator)
    If DecSep = "," Then
        NotDecSep = "."
    Else
        NotDecSep = ","
    End If
    
    For i = 0 To cMAXCURRENCIES
        If OfferSettings.CurrencyInfo(i).Name = FormCurrencyList(1).Name Then
            FormCurrencyList(1).Value = OfferSettings.CurrencyInfo(i).Value
            CurrencyInput1.Value = OfferSettings.CurrencyInfo(i).Value
            CurrencyInput1.Value = Replace(CurrencyInput1.Value, NotDecSep, DecSep)
        End If
        If OfferSettings.CurrencyInfo(i).Name = FormCurrencyList(2).Name Then
            FormCurrencyList(2).Value = OfferSettings.CurrencyInfo(i).Value
            CurrencyInput2.Value = OfferSettings.CurrencyInfo(i).Value
            CurrencyInput2.Value = Replace(CurrencyInput2.Value, NotDecSep, DecSep)
        End If
        If OfferSettings.CurrencyInfo(i).Name = FormCurrencyList(3).Name Then
            FormCurrencyList(2).Value = OfferSettings.CurrencyInfo(i).Value
            CurrencyInput3.Value = OfferSettings.CurrencyInfo(i).Value
            CurrencyInput3.Value = Replace(CurrencyInput3.Value, NotDecSep, DecSep)
        End If
    Next i
End Sub

Sub DisableOfferTestButton()
    OfferTestButton.Enabled = False
End Sub
Sub EnableOfferTestButton()
    OfferTestButton.Enabled = True
End Sub


Private Function CheckIfRoadTaxSheet(wsName As String) As String
    ' Check if the Worksheet is an active Fr8Partner Road Tax template
    ' Returns the offername (Forwarder name) if active, or otherwise blank
    Dim temp As String
    Dim Fr8Type As Long
    Dim ws As Worksheet

    CheckIfRoadTaxSheet = ""
    Set ws = ActiveWorkbook.Worksheets(wsName)

    ' Cell A1 should be "Fr8Origin"
    On Error Resume Next    'Handle if A1 cell has en error (DIV/0 etc)
    temp = ws.Cells(1, 1)
    On Error GoTo 0
    If temp = "Fr8Origin" Then  'Fr8partner template?
        ' Get the type from cell B2
        temp = ws.Range("B2").Value2
        If temp <> "" Then
            temp = Left(temp, InStr(temp, ":") - 1)
            Fr8Type = ConvertToLongInteger(temp)
            If Fr8Type = RoadTax Then    'Type ok?
                ' Check if it has a forwarder name (B3)
                temp = ws.Range("B3").Value2
                If temp <> "" Then
                    CheckIfRoadTaxSheet = Replace(temp, Chr(10), "")
                End If
            End If
        End If
    End If
End Function

Private Function CheckIfPreFreightSheet(wsName As String, ByRef IsLCL As Boolean) As String
    ' Check if the Worksheet is an active Fr8Partner Prefreight template
    ' Returns the offername (Forwarder name) or blank if not an active template
    Dim temp As String
    Dim Fr8Type As Long
    Dim ws As Worksheet

    CheckIfPreFreightSheet = ""
    IsLCL = False
    Set ws = ActiveWorkbook.Worksheets(wsName)

    ' Cell A1 should be "Fr8Origin"
    On Error Resume Next    'Handle if A1 cell has en error (DIV/0 etc)
    temp = ws.Cells(1, 1)
    On Error GoTo 0
    If temp = "Fr8Origin" Then  'Fr8partner template?
        ' Get the type from cell B2
        temp = ws.Range("B2").Value2
        If temp <> "" Then
            temp = Left(temp, InStr(temp, ":") - 1)
            Fr8Type = ConvertToLongInteger(temp)
            If Fr8Type = AirPreFreight Or Fr8Type = SeaLCLPreFreight Or Fr8Type = SeaFCLPreFreight Then     'Type ok?
                ' Check if it has a forwarder name (B3)
                temp = ws.Range("B3").Value2
                If temp <> "" Then
                    CheckIfPreFreightSheet = Replace(temp, Chr(10), "")
                    If Fr8Type = SeaLCLPreFreight Then      'Mark if LCL offer
                        IsLCL = True
                    End If
                End If
            End If
        End If
    End If
End Function
Private Function CheckIfPostFreightSheet(wsName As String, ByRef IsLCL As Boolean) As String
    ' Check if the Worksheet is an active Fr8Partner Postfreight template
    ' Returns the offername (Forwarder name) or blank if not an active template
    Dim temp As String
    Dim Fr8Type As Long
    Dim ws As Worksheet

    CheckIfPostFreightSheet = ""
    Set ws = ActiveWorkbook.Worksheets(wsName)

    ' Cell A1 should be "Fr8Origin"
    On Error Resume Next    'Handle if A1 cell has en error (DIV/0 etc)
    temp = ws.Cells(1, 1)
    On Error GoTo 0
    If temp = "Fr8Origin" Then  'Fr8partner template?
        ' Get the type from cell B2
        temp = ws.Range("B2").Value2
        If temp <> "" Then
            temp = Left(temp, InStr(temp, ":") - 1)
            Fr8Type = ConvertToLongInteger(temp)
            If Fr8Type = AirPostFreight Or Fr8Type = SeaLCLPostFreight Or Fr8Type = SeaFCLPostFreight Then     'Type ok?
                ' Check if it has a forwarder name (B3)
                temp = ws.Range("B3").Value2
                If temp <> "" Then
                    CheckIfPostFreightSheet = Replace(temp, Chr(10), "")
                    If Fr8Type = SeaLCLPostFreight Then     'Mark if LCL offer
                        IsLCL = True
                    End If
                End If
            End If
        End If
    End If
End Function
Private Function CheckIfPrePostSheet(wsName As String) As String
    ' Check if the Worksheet is an active Fr8Partner Prefreight or Postfreight template
    ' Returns the offername (Forwarder name) or blank if not an active template
    Dim temp As String
    Dim Fr8Type As Long
    Dim ws As Worksheet

    CheckIfPrePostSheet = ""
    Set ws = ActiveWorkbook.Worksheets(wsName)

    ' Cell A1 should be "Fr8Origin"
    On Error Resume Next    'Handle if A1 cell has en error (DIV/0 etc)
    temp = ws.Cells(1, 1)
    On Error GoTo 0
    If temp = "Fr8Origin" Then  'Fr8partner template?
        ' Get the type from cell B2
        temp = ws.Range("B2").Value2
        If temp <> "" Then
            temp = Left(temp, InStr(temp, ":") - 1)
            Fr8Type = ConvertToLongInteger(temp)
            If Fr8Type = AirPreFreight Or Fr8Type = SeaLCLPreFreight Or Fr8Type = SeaFCLPreFreight Then     'Type ok?
                ' Check if it has a forwarder name (B3)
                temp = ws.Range("B3").Value2
                If temp <> "" Then
                    CheckIfPrePostSheet = Replace(temp, Chr(10), "")
                End If
            ElseIf Fr8Type = AirPostFreight Or Fr8Type = SeaLCLPostFreight Or Fr8Type = SeaFCLPostFreight Then     'Type ok?
                ' Check if it has a forwarder name (B3)
                temp = ws.Range("B3").Value2
                If temp <> "" Then
                    CheckIfPrePostSheet = Replace(temp, Chr(10), "")
                End If
            End If
        End If
    End If
End Function

Private Sub AddCurrencyName(ByVal sName As String, Optional StandardCurrency As Boolean = False)
    ' Used for adding currencycodes to the global currencylist (FormCurrencyList)
    Dim AlreadyInList As Boolean
    Dim i As Long
    Dim AvailIndex As Long
    AvailIndex = 0
    AlreadyInList = False

    If sName <> "" Then
        If StandardCurrency Then
            FormCurrencyList(0).Name = sName
        Else
            For i = 0 To UBound(FormCurrencyList)
                If (i > 0) And (AvailIndex = 0) And (FormCurrencyList(i).Name = "") Then  ' Check for 1. available spot
                    AvailIndex = i
                End If
                If FormCurrencyList(i).Name = sName Then
                    AlreadyInList = True
                End If
            Next i

            If Not AlreadyInList Then   ' Save if not already in the list
                FormCurrencyList(AvailIndex).Name = sName
            End If
        End If
    End If
End Sub

'
' --- Invoicelist page support
'
Private Sub FillInvoiceListDropdown()
    ' Fills the dropdown with available non-offers in this file
    Dim ws As Worksheet
    Dim wsName As String
    Dim Sheetname As String
    Dim FoundSheetList(cMAXSHEETS) As String
    Dim listcounter As Long
    Dim Found As Boolean
    Dim i As Long
    i = 0
    listcounter = 0
    InvoiceListDropDown.Clear
    'For test: Add blank first item
'    Me.InvoiceListDropDown.AddItem ""
'    ListCounter = ListCounter + 1

    For Each ws In ActiveWorkbook.Worksheets
        wsName = ws.Name
        If ws.Visible = xlSheetVisible Then
            Sheetname = CheckIfNotFr8Sheet(wsName)
            If Sheetname <> "" Then
                Found = False   ' Check if already in the list
                For i = 0 To UBound(FoundSheetList)
                    If FoundSheetList(i) = Sheetname Then
                        Found = True
                    End If
                Next i
                If Not Found Then   ' Save if not already in the list
                    Me.InvoiceListDropDown.AddItem Sheetname
                    FoundSheetList(listcounter) = Sheetname
                    listcounter = listcounter + 1
                End If
            End If
        End If
    Next

    'Preselect the first sheet if none selected
    If InvoiceListDropDown.ListIndex < 0 Then
        If InvoiceListDropDown.ListCount > 0 Then
            InvoiceListDropDown.ListIndex = 0
        End If
    End If

End Sub

Sub FillColumnDropdowns(wsName As String, rw As Long)
    'Fill  column select dropdowns (From/To/Price/Amount)
    'using the given worksheetname and the given row
    Dim NumberOfColumns As Long
    Dim Col As Long
    Dim Name As String
    Dim SaveIndex(7) As Long
    
    If wsName = "" Or rw < 1 Then Exit Sub
    SaveIndex(0) = FromColumnDropdown.ListIndex                     'First Save the actual indexes
    SaveIndex(1) = DestinationColumnDropdown.ListIndex
    SaveIndex(2) = PriceColumnDropdown.ListIndex
    SaveIndex(3) = AmountM3ColumnDropdown.ListIndex
    SaveIndex(4) = AmountLDMColumnDropdown.ListIndex
    SaveIndex(5) = AmountKGColumnDropdown.ListIndex
    SaveIndex(6) = AmountColumnDropdown.ListIndex
    
    NumberOfColumns = Last(cLASTCOL, Worksheets(wsName).Rows)   'Get number of columns
    
    FromColumnDropdown.Clear                                        'Clear first
    DestinationColumnDropdown.Clear
    PriceColumnDropdown.Clear
    AmountM3ColumnDropdown.Clear
    AmountLDMColumnDropdown.Clear
    AmountKGColumnDropdown.Clear
    AmountColumnDropdown.Clear
    
    'The 4 Amount dropdown need a 'Not available' entry first
    Name = Txt("Invoice.AmountNotAvailable")
    AmountM3ColumnDropdown.AddItem Name
    AmountLDMColumnDropdown.AddItem Name
    AmountKGColumnDropdown.AddItem Name
    AmountColumnDropdown.AddItem Name
    
    For Col = 1 To NumberOfColumns
        Name = Left(Worksheets(wsName).Cells(rw, Col).Value2, 30)     'Get celle content
        Name = ColLetter(Col) & ": " & Replace(Name, Chr(10), " ")
        FromColumnDropdown.AddItem Name                     'Store
        DestinationColumnDropdown.AddItem Name
        PriceColumnDropdown.AddItem Name
        AmountM3ColumnDropdown.AddItem Name
        AmountLDMColumnDropdown.AddItem Name
        AmountKGColumnDropdown.AddItem Name
        AmountColumnDropdown.AddItem Name
    Next Col
    
    If InvoiceSettings.Sheetname = wsName Then                  'Restore the indexes if the same sheet as the saved
        If FromColumnDropdown.ListCount > InvoiceSettings.FromColumn - 1 Then
            FromColumnDropdown.ListIndex = InvoiceSettings.FromColumn - 1
        End If
        If DestinationColumnDropdown.ListCount > InvoiceSettings.ToColumn - 1 Then
            DestinationColumnDropdown.ListIndex = InvoiceSettings.ToColumn - 1
        End If
        If PriceColumnDropdown.ListCount > InvoiceSettings.PriceColumn - 1 Then
            PriceColumnDropdown.ListIndex = InvoiceSettings.PriceColumn - 1
        End If
        If AmountM3ColumnDropdown.ListCount > InvoiceSettings.EffM3Column Then
            AmountM3ColumnDropdown.ListIndex = InvoiceSettings.EffM3Column
        End If
        If AmountLDMColumnDropdown.ListCount > InvoiceSettings.EffLDMColumn Then
            AmountLDMColumnDropdown.ListIndex = InvoiceSettings.EffLDMColumn
        End If
        If AmountKGColumnDropdown.ListCount > InvoiceSettings.EffKGColumn Then
            AmountKGColumnDropdown.ListIndex = InvoiceSettings.EffKGColumn
        End If
        If AmountColumnDropdown.ListCount > InvoiceSettings.QuantityColumn Then
            AmountColumnDropdown.ListIndex = InvoiceSettings.QuantityColumn
        End If
    Else
        If FromColumnDropdown.ListCount > SaveIndex(0) Then      'Restore the indexes to the last state
            FromColumnDropdown.ListIndex = SaveIndex(0)
        End If
        If DestinationColumnDropdown.ListCount > SaveIndex(1) Then
            DestinationColumnDropdown.ListIndex = SaveIndex(1)
        End If
        If PriceColumnDropdown.ListCount > SaveIndex(2) Then
            PriceColumnDropdown.ListIndex = SaveIndex(2)
        End If
        If AmountM3ColumnDropdown.ListCount > SaveIndex(3) Then
            AmountM3ColumnDropdown.ListIndex = SaveIndex(3)
        End If
        If AmountLDMColumnDropdown.ListCount > SaveIndex(4) Then
            AmountLDMColumnDropdown.ListIndex = SaveIndex(4)
        End If
        If AmountKGColumnDropdown.ListCount > SaveIndex(5) Then
            AmountKGColumnDropdown.ListIndex = SaveIndex(5)
        End If
        If AmountColumnDropdown.ListCount > SaveIndex(6) Then
            AmountColumnDropdown.ListIndex = SaveIndex(6)
        End If
    End If
    
    'Set defaults, if non is set
    If FromColumnDropdown.ListCount >= 1 Then
        If FromColumnDropdown.ListIndex = -1 Then
            FromColumnDropdown.ListIndex = 0        'A
        End If
        If DestinationColumnDropdown.ListIndex = -1 Then
            DestinationColumnDropdown.ListIndex = 0
        End If
        If PriceColumnDropdown.ListIndex = -1 Then
            PriceColumnDropdown.ListIndex = 0
        End If
        If AmountM3ColumnDropdown.ListIndex = -1 Then
            AmountM3ColumnDropdown.ListIndex = 0      ' 'Not avail'
        End If
        If AmountLDMColumnDropdown.ListIndex = -1 Then
            AmountLDMColumnDropdown.ListIndex = 0      ' 'Not avail'
        End If
        If AmountKGColumnDropdown.ListIndex = -1 Then
            AmountKGColumnDropdown.ListIndex = 0      ' 'Not avail'
        End If
        If AmountColumnDropdown.ListIndex = -1 Then
            AmountColumnDropdown.ListIndex = 0
        End If
    End If
'    If FromColumnDropdown.ListCount >= 3 Then
'        If FromColumnDropdown.ListIndex = -1 Then
'            FromColumnDropdown.ListIndex = 0        'A
'        End If
'        If DestinationColumnDropdown.ListIndex = -1 Then
'            DestinationColumnDropdown.ListIndex = 1 'B
'        End If
'        If PriceColumnDropdown.ListIndex = -1 Then
'            PriceColumnDropdown.ListIndex = 2       'C
'        End If
'        If AmountM3ColumnDropdown.ListIndex = -1 Then
'            AmountM3ColumnDropdown.ListIndex = 0      ' 'Not avail'
'        End If
'        If AmountLDMColumnDropdown.ListIndex = -1 Then
'            AmountLDMColumnDropdown.ListIndex = 0      ' 'Not avail'
'        End If
'        If AmountKGColumnDropdown.ListIndex = -1 Then
'            AmountKGColumnDropdown.ListIndex = 0      ' 'Not avail'
'        End If
'        If AmountColumnDropdown.ListIndex = -1 Then
'            AmountColumnDropdown.ListIndex = 4      'D
'        End If
'    End If
End Sub

Sub RestoreColumnDropdowns()
    Dim ComboItem As Long
    Dim temp As String
    'From
    If InvoiceSettings.FromColumn > 0 And FromColumnDropdown.ListCount >= InvoiceSettings.FromColumn Then
        FromColumnDropdown.ListIndex = InvoiceSettings.FromColumn - 1
    End If
    'To
    If InvoiceSettings.ToColumn > 0 And DestinationColumnDropdown.ListCount >= InvoiceSettings.ToColumn Then
        DestinationColumnDropdown.ListIndex = InvoiceSettings.ToColumn - 1
    End If
    'Price
    If InvoiceSettings.PriceColumn > 0 And PriceColumnDropdown.ListCount >= InvoiceSettings.PriceColumn Then
        PriceColumnDropdown.ListIndex = InvoiceSettings.PriceColumn - 1
    End If
    'Amount/Quantity
    If InvoiceSettings.EffM3Column > 0 And AmountM3ColumnDropdown.ListCount >= InvoiceSettings.EffM3Column Then
        AmountM3ColumnDropdown.ListIndex = InvoiceSettings.EffM3Column
    End If
    If InvoiceSettings.EffLDMColumn > 0 And AmountLDMColumnDropdown.ListCount >= InvoiceSettings.EffLDMColumn Then
        AmountLDMColumnDropdown.ListIndex = InvoiceSettings.EffLDMColumn
    End If
    If InvoiceSettings.EffKGColumn > 0 And AmountKGColumnDropdown.ListCount >= InvoiceSettings.EffKGColumn Then
        AmountKGColumnDropdown.ListIndex = InvoiceSettings.EffKGColumn
    End If
    If InvoiceSettings.QuantityColumn > 0 And AmountColumnDropdown.ListCount >= InvoiceSettings.QuantityColumn Then
        AmountColumnDropdown.ListIndex = InvoiceSettings.QuantityColumn
    Else
        If DebugMode Then
            temp = "Har ikke gendannet Fragtpligt m|fffd|ngde dropdown." & vbNewLine & vbNewLine
            temp = temp & "Tag printshoot af denne box og send til John" & vbNewLine & vbNewLine
            temp = temp & "InvoiceSettings.QuantityColumn = " & InvoiceSettings.QuantityColumn & vbNewLine
            temp = temp & "AmountColumnDropdown.ListCount = " & AmountColumnDropdown.ListCount & vbNewLine
            temp = temp & "InvoiceSettings.QuantityColumn = " & InvoiceSettings.QuantityColumn & vbNewLine
            Call MsgBox(temp, vbInformation, "Fragtpligt m|fffd|ngde dropdown ikke gendannet")
        End If
    End If
End Sub

Sub FillFreightUnitDropdown()
    Me.UnitsDropdown.Clear
    Me.UnitsDropdown.AddItem Txt("Invoice.FreightUnitKG")
    Me.UnitsDropdown.AddItem Txt("Invoice.FreightUnitM3")
    Me.UnitsDropdown.AddItem Txt("Invoice.FreightUnitLDM")
    Me.UnitsDropdown.AddItem Txt("Invoice.FreightUnitEA")
    Me.UnitsDropdown.ListIndex = 0
End Sub

Private Function CheckIfNotFr8Sheet(wsName As String) As String
    ' Check if the Worksheet is an Fr8Partner template
    ' Returns the sheetname if NOT an Fr8Partner sheet or blank if a Fr8Partner sheet template
    Dim temp As String
    Dim Fr8Type As Long
    Dim ws As Worksheet

    CheckIfNotFr8Sheet = ""
    Set ws = ActiveWorkbook.Worksheets(wsName)

    ' Cell A1 should be "Fr8Origin"
    On Error Resume Next    'Handle if A1 cell has en error (DIV/0 etc)
    temp = ws.Cells(1, 1)
    On Error GoTo 0
    If temp <> "Fr8Origin" Then  'Fr8partner template? (A1)
        temp = ws.Cells(1, 2)    'Fr8Partner Intro sheet (B1)
        If temp <> "Fr8PartnerIntro" Then
            CheckIfNotFr8Sheet = wsName
        End If
    End If
End Function

Sub DisableInvoiceListItems()
    MultiPage.InvoiceListPage.HeaderLabel.Enabled = False
    MultiPage.InvoiceListPage.HeaderRowTextBox.Enabled = False
    MultiPage.InvoiceListPage.HeaderRowSpinButton.Enabled = False
    MultiPage.InvoiceListPage.HeaderExample.Enabled = False
    MultiPage.InvoiceListPage.ShipperLabel.Enabled = False
    MultiPage.InvoiceListPage.FromColumnDropdown.Enabled = False
    MultiPage.InvoiceListPage.DestinationLabel.Enabled = False
    MultiPage.InvoiceListPage.DestinationColumnDropdown.Enabled = False
    MultiPage.InvoiceListPage.PriceLabel.Enabled = False
    MultiPage.InvoiceListPage.PriceColumnDropdown.Enabled = False
    MultiPage.InvoiceListPage.AmountEffM3Label.Enabled = False
    MultiPage.InvoiceListPage.AmountM3ColumnDropdown.Enabled = False
    MultiPage.InvoiceListPage.AmountEffLDMLabel.Enabled = False
    MultiPage.InvoiceListPage.AmountLDMColumnDropdown.Enabled = False
    MultiPage.InvoiceListPage.AmountEffKGLabel.Enabled = False
    MultiPage.InvoiceListPage.AmountKGColumnDropdown.Enabled = False
    MultiPage.InvoiceListPage.AmountLabel.Enabled = False
    MultiPage.InvoiceListPage.AmountColumnDropdown.Enabled = False
    MultiPage.InvoiceListPage.UnitsDropdown.Enabled = False
End Sub
Sub EnableInvoiceListItems()
    MultiPage.InvoiceListPage.HeaderLabel.Enabled = True
    MultiPage.InvoiceListPage.HeaderRowTextBox.Enabled = True
    MultiPage.InvoiceListPage.HeaderRowSpinButton.Enabled = True
    MultiPage.InvoiceListPage.HeaderExample.Enabled = True
    MultiPage.InvoiceListPage.ShipperLabel.Enabled = True
    MultiPage.InvoiceListPage.FromColumnDropdown.Enabled = True
    MultiPage.InvoiceListPage.DestinationLabel.Enabled = True
    MultiPage.InvoiceListPage.DestinationColumnDropdown.Enabled = True
    MultiPage.InvoiceListPage.PriceLabel.Enabled = True
    MultiPage.InvoiceListPage.PriceColumnDropdown.Enabled = True
    MultiPage.InvoiceListPage.AmountEffM3Label.Enabled = True
    MultiPage.InvoiceListPage.AmountM3ColumnDropdown.Enabled = True
    MultiPage.InvoiceListPage.AmountEffLDMLabel.Enabled = True
    MultiPage.InvoiceListPage.AmountLDMColumnDropdown.Enabled = True
    MultiPage.InvoiceListPage.AmountEffKGLabel.Enabled = True
    MultiPage.InvoiceListPage.AmountKGColumnDropdown.Enabled = True
    MultiPage.InvoiceListPage.AmountLabel.Enabled = True
    MultiPage.InvoiceListPage.AmountColumnDropdown.Enabled = True
    MultiPage.InvoiceListPage.UnitsDropdown.Enabled = True
End Sub
Sub DisablePrePostShipmentButtons()
    'Disabled and hides both Pre / Post buttons
    MultiPage.InvoiceListPage.PreFreightSettingsButton.Enabled = False
    MultiPage.InvoiceListPage.PreFreightSettingsButton.Visible = False
    MultiPage.InvoiceListPage.PostFreightSettingsButton.Enabled = False
    MultiPage.InvoiceListPage.PostFreightSettingsButton.Visible = False
End Sub
Sub EnablePrePostShipmentButtons(Pre As Boolean, Post As Boolean)
    'Enable the pre/post buttons if needed.
    'Requirments for enabling:
    '   Main selected Offer is LCL
    '   Pre: Active Pre LCL surcharge
    '   Post: Active Post LCL surcharge
    If (Pre) Then
        MultiPage.InvoiceListPage.PreFreightSettingsButton.Visible = True
        MultiPage.InvoiceListPage.PreFreightSettingsButton.Enabled = True
        If InvoicePreSettingsmode = Active Then
            MultiPage.InvoiceListPage.PreFreightSettingsButton.Font.Bold = True
        Else
            MultiPage.InvoiceListPage.PreFreightSettingsButton.Font.Bold = False
        End If
    Else
        MultiPage.InvoiceListPage.PreFreightSettingsButton.Visible = False
        MultiPage.InvoiceListPage.PreFreightSettingsButton.Enabled = False
    End If
    If Post Then
        MultiPage.InvoiceListPage.PostFreightSettingsButton.Visible = True
        MultiPage.InvoiceListPage.PostFreightSettingsButton.Enabled = True
        If InvoicePostSettingsmode = Active Then
            MultiPage.InvoiceListPage.PostFreightSettingsButton.Font.Bold = True
        Else
            MultiPage.InvoiceListPage.PostFreightSettingsButton.Font.Bold = False
        End If
    Else
        MultiPage.InvoiceListPage.PostFreightSettingsButton.Visible = False
        MultiPage.InvoiceListPage.PostFreightSettingsButton.Enabled = False
    End If
End Sub


Private Sub UpdateHeaderExample(rw As Long)
    Dim content As String
    'Example label is set from the given worksheet (FormInvoiceListName) Col A
    If rw > 0 Then
        If FormInvoiceListName <> "" Then
            content = Worksheets(FormInvoiceListName).Cells(rw, 1).Value2
        End If
        'Content = "Test " & Rw
        content = Replace(content, Chr(10), " ")
        If content <> "" Then
            HeaderExample.Caption = printf(Txt("Invoice.HeaderExample"), "A", content)
        Else
            HeaderExample.Caption = printf(Txt("Invoice.HeaderExampleEmpty"), "A")
        End If
    Else
        HeaderExample.Caption = ""
    End If
End Sub
Sub DisableInvoiceTestButton()
    InvoiceListTestButton.Enabled = False
End Sub
Sub EnableInvoiceTestButton()
    InvoiceListTestButton.Enabled = True
End Sub


'
' --- Output page support
'

Private Sub FillOutputDropdown()
    ' Fills the dropdown with available non-offers and non-Invoicelist in this file
    Dim ws As Worksheet
    Dim wsName As String
    Dim Sheetname As String
    Dim FoundSheetList(cMAXSHEETS) As String
    Dim listcounter As Long
    Dim Found As Boolean
    Dim i As Long
    i = 0
    listcounter = 0
    
    OutputDropDown.Clear
    'First entry is always <New sheet>
    OutputDropDown.AddItem Txt("Output.DropdownNewSheet")
    'Second entry is always <Invoicelist sheet>
    OutputDropDown.AddItem printf(Txt("Output.DropdownInvoiceSheet"), FormInvoiceListName)
    
    'Preselect the new sheet if none selected
    If OutputDropDown.ListIndex < 0 Then
        If OutputDropDown.ListCount > 0 Then
            OutputDropDown.ListIndex = 0
        End If
    End If
End Sub

Private Sub FillDetailsLimitDropdown()
    DetailsLimitCB.Clear
    DetailsLimitCB.AddItem printf(Txt("Output.DetailsLimit"), cCommentsLimit1)
    DetailsLimitCB.AddItem printf(Txt("Output.DetailsLimit"), cCommentsLimit2)
    DetailsLimitCB.AddItem printf(Txt("Output.DetailsLimit"), cCommentsLimit3)
    DetailsLimitCB.AddItem Txt("Output.DetailsNoLimit")
    
    'Preselect the first in the list if none selected
    If DetailsLimitCB.ListIndex < 0 Then
        If DetailsLimitCB.ListCount > 0 Then
            If OutputSettings.MaxRowsWithComments = cCommentsLimit1 Then
                DetailsLimitCB.ListIndex = 0
            ElseIf OutputSettings.MaxRowsWithComments = cCommentsLimit2 Then
                DetailsLimitCB.ListIndex = 1
            ElseIf OutputSettings.MaxRowsWithComments = cCommentsLimit3 Then
                DetailsLimitCB.ListIndex = 2
            ElseIf OutputSettings.MaxRowsWithComments = cCommentsNoLimit Then
                DetailsLimitCB.ListIndex = 3
            Else
                DetailsLimitCB.ListIndex = 0
            End If
        End If
    End If
End Sub

Sub DisableOutputItems()
    MultiPage.OutputPage.OutputLabel.Enabled = False
    MultiPage.OutputPage.OutputDropDown.Enabled = False
    MultiPage.OutputPage.OptionsLabel.Enabled = False
    MultiPage.OutputPage.ShowPriceDiffInUnitsCheckBox.Enabled = False
    MultiPage.OutputPage.ShowPriceDiffInPctCheckBox.Enabled = False
    MultiPage.OutputPage.ShowSumCheckBox.Enabled = False
    MultiPage.OutputPage.ShowCalcDetailsinCellsCheckBox.Enabled = False
    MultiPage.OutputPage.ShowCalcModeColumnCheckBox.Enabled = False
    MultiPage.OutputPage.ShowNormalPriceColumnCheckBox.Enabled = False
    MultiPage.OutputPage.ShowNormalPriceDetailsColumnCheckBox.Enabled = False
    MultiPage.OutputPage.ShowSurchargeColumnCheckBox.Enabled = False
    MultiPage.OutputPage.ShowChargeableColumnCheckBox.Enabled = False
    MultiPage.OutputPage.MakePctDiffCellsColoredCheckBox.Enabled = False
    MultiPage.OutputPage.ColorTextBox.Enabled = False
    MultiPage.OutputPage.ColorSpinButton.Enabled = False
    MultiPage.OutputPage.ColorDescLabel1.Enabled = False
    MultiPage.OutputPage.ColorDescLabel2.Enabled = False
    
End Sub
Sub EnableOutputItems()
    MultiPage.OutputPage.OutputLabel.Enabled = True
    MultiPage.OutputPage.OutputDropDown.Enabled = True
    MultiPage.OutputPage.OptionsLabel.Enabled = True
    MultiPage.OutputPage.ShowPriceDiffInUnitsCheckBox.Enabled = True
    MultiPage.OutputPage.ShowPriceDiffInPctCheckBox.Enabled = True
    MultiPage.OutputPage.ShowSumCheckBox.Enabled = True
    MultiPage.OutputPage.ShowCalcDetailsinCellsCheckBox.Enabled = True
    MultiPage.OutputPage.ShowCalcModeColumnCheckBox.Enabled = True
    MultiPage.OutputPage.ShowNormalPriceColumnCheckBox.Enabled = True
    MultiPage.OutputPage.ShowNormalPriceDetailsColumnCheckBox.Enabled = True
    MultiPage.OutputPage.ShowSurchargeColumnCheckBox.Enabled = True
    MultiPage.OutputPage.ShowChargeableColumnCheckBox.Enabled = True
    MultiPage.OutputPage.MakePctDiffCellsColoredCheckBox.Enabled = True
    MultiPage.OutputPage.ColorTextBox.Enabled = True
    MultiPage.OutputPage.ColorSpinButton.Enabled = True
    MultiPage.OutputPage.ColorDescLabel1.Enabled = True
    MultiPage.OutputPage.ColorDescLabel2.Enabled = True

End Sub
Sub SetDefaultOutputOptions()
    ' 08-10-2019    Set OutputMode
    Dim Adv As Boolean
    Dim AnySCActive As Boolean
    Dim i As Long
    
    If FormOfferName <> "" Then
        'Check if the choosen Offer has advantage/disadvantage
        If GetCalculationModeInOffer(FormOfferName) <> CalculationModeType.NormalMode Then
            Adv = True
        End If
        For i = 1 To cMAXSURCHARGES
            If FormSurchargeList(i).Active = True Then
                AnySCActive = True
            End If
        Next i
    End If
    
    'Find the max number of comment rows allowed
    If DetailsLimitCB.ListIndex = -1 Then
        If OutputSettings.MaxRowsWithComments = 0 Then
            OutputSettings.MaxRowsWithComments = cCommentsLimit1
        End If
    ElseIf DetailsLimitCB.ListIndex = 0 Then
        OutputSettings.MaxRowsWithComments = cCommentsLimit1
    ElseIf DetailsLimitCB.ListIndex = 1 Then
        OutputSettings.MaxRowsWithComments = cCommentsLimit2
    ElseIf DetailsLimitCB.ListIndex = 2 Then
        OutputSettings.MaxRowsWithComments = cCommentsLimit3
    ElseIf DetailsLimitCB.ListIndex = 3 Then
        OutputSettings.MaxRowsWithComments = cCommentsNoLimit
    Else    'Should newer happen
        OutputSettings.MaxRowsWithComments = cCommentsLimit1
    End If
    
    'Options depend on the value in the Outputdropdown
    If OutputDropDown.ListIndex = 0 Then    'New Sheet
        ShowPriceDiffInUnitsCheckBox.Value = True
        ShowPriceDiffInPctCheckBox.Value = True
        ShowNormalPriceColumnCheckBox.Value = True
        ShowChargeableColumnCheckBox = True
        ShowCalcModeColumnCheckBox.Value = True
        MakePctDiffCellsColoredCheckBox.Value = True
        ShowCalcDetailsinCellsCheckBox.Value = True
        ColorTextBox.Value = 1
        ColorSpinButton.Value = ColorTextBox.Value
        ShowCalcDetailsinCellsCheckBox.Value = True
        If AnySCActive Then
            ShowSurchargeColumnCheckBox.Value = True
            MultiPage.OutputPage.ShowSurchargeColumnCheckBox.Enabled = True
        Else
            ShowSurchargeColumnCheckBox.Value = False
            MultiPage.OutputPage.ShowSurchargeColumnCheckBox.Enabled = False
        End If
        ShowSumCheckBox.Value = True

    ElseIf OutputDropDown.ListIndex = 1 Then    'Invoice Sheet
        ShowPriceDiffInUnitsCheckBox.Value = True
        ShowPriceDiffInPctCheckBox.Value = True
        ShowChargeableColumnCheckBox = False
        MakePctDiffCellsColoredCheckBox.Value = True
        ShowNormalPriceColumnCheckBox.Value = False
        ShowNormalPriceDetailsColumnCheckBox.Value = False
        ShowCalcModeColumnCheckBox.Value = False
        ColorTextBox.Value = 1
        ColorSpinButton.Value = ColorTextBox.Value
        ShowCalcDetailsinCellsCheckBox.Value = True
        If AnySCActive Then
            ShowSurchargeColumnCheckBox.Value = True
            MultiPage.OutputPage.ShowSurchargeColumnCheckBox.Enabled = True
        Else
            ShowSurchargeColumnCheckBox.Value = False
            MultiPage.OutputPage.ShowSurchargeColumnCheckBox.Enabled = False
        End If
        ShowSumCheckBox.Value = True
        
    Else    'Should newer happen
        ShowNormalPriceColumnCheckBox.Value = True
        ShowChargeableColumnCheckBox = True
        ShowNormalPriceDetailsColumnCheckBox.Value = True
        ShowCalcModeColumnCheckBox.Value = True
        ShowPriceDiffInUnitsCheckBox.Value = True
        ShowPriceDiffInPctCheckBox.Value = True
        MakePctDiffCellsColoredCheckBox.Value = True
        ColorTextBox.Value = 1
        ColorSpinButton.Value = ColorTextBox.Value
        ShowCalcDetailsinCellsCheckBox.Value = True
        ShowSumCheckBox.Value = True
    End If
    If ToolName = "Fr8Check" Then   'only fr8check
        CheckModeOptBtn.Value = True
        BenchModeOptBtn.Value = False
        OutputSettings.OutputMode = OutputCheckMode
    Else
        CheckModeOptBtn.Value = False
        BenchModeOptBtn.Value = True
        OutputSettings.OutputMode = OutputBenchMode
    End If
End Sub



'
'   --- Events
'

Private Sub OfferDropDown_Change()
    Dim OfferStatusOK As Boolean
    Dim sht As String
    OfferStatusOK = False

    FormOfferName = OfferDropDown.Value
    If FormOfferName <> "" Then OfferStatusOK = True

    'Currency
    If OfferStatusOK Then
        Call GetListOfCurrenciesInOffer(FormOfferName)
        Call UpdateCurrencyItems
    Else
        Call DisableCurrencyItems
    End If

    'Surcharges
    If OfferStatusOK Then
        Call GetListOfSurchargesInOffer(FormOfferName)    'Public FormSurchargeList() is used for storage
        Call UpdateSurchargeItems
    Else
        Call DisableSurchargeItems
    End If

    'Select/View the selected offersheet
    sht = GetSheetNameFromOffer(FormOfferName)
    Worksheets(sht).Select
    
    'Other
    'If the Offer does not have advantage/disadvanyage then disable the applicatble outsettings:
'    If GetCalculationModeInOffer(FormOfferName) = CalculationModeType.NormalMode Then
'        ShowAdvPriceColumnCheckBox.Value = False
'        ShowAdvPriceColumnCheckBox.Enabled = False
'    Else
'        'ShowAdvPriceColumnCheckBox.Value = True
'        ShowAdvPriceColumnCheckBox.Enabled = True
'    End If
End Sub

Private Sub InvoiceListDropDown_Change()
    Dim InvoiceListStatusOK As Boolean
    InvoiceListStatusOK = False

    FormInvoiceListName = InvoiceListDropDown.Value
    If FormInvoiceListName <> "" Then InvoiceListStatusOK = True

    If InvoiceListStatusOK Then
        Worksheets(FormInvoiceListName).Select  'Show the sheet
        Call EnableInvoiceListItems
        Call UpdateHeaderExample(FormInvoiceHeaderRow)
        Call FillColumnDropdowns(FormInvoiceListName, FormInvoiceHeaderRow)
        Call EnableOutputItems
        Call FillOutputDropdown
        Call FillDetailsLimitDropdown
    Else
        Call DisableInvoiceListItems
        Call DisableOutputItems
    End If
End Sub

Private Sub Surcharge0_Click()
    Call UpdateSurchargeState(0)
End Sub
Private Sub Surcharge1_Click()
    Call UpdateSurchargeState(1)
End Sub
Private Sub Surcharge2_Click()
    Call UpdateSurchargeState(2)
End Sub
Private Sub Surcharge3_Click()
    Call UpdateSurchargeState(3)
End Sub
Private Sub Surcharge4_Click()
    Call UpdateSurchargeState(4)
End Sub
Private Sub Surcharge5_Click()
    Call UpdateSurchargeState(5)
End Sub
Private Sub Surcharge6_Click()
    Call UpdateSurchargeState(6)
End Sub
Private Sub Surcharge7_Click()
    Call UpdateSurchargeState(7)
End Sub
Private Sub Surcharge8_Click()
    Call UpdateSurchargeState(8)
End Sub
Private Sub Surcharge9_Click()
    Call UpdateSurchargeState(9)
End Sub

Sub UpdateSurchargeState(number As Long)
    Dim AnySCActive As Boolean
    Dim PreLCLSurchargeActive As Boolean
    Dim PostLCLSurchargeActive As Boolean
    Dim i As Long
    
    If (number) = 0 Then
        FormSurchargeList(number + 1).Active = MultiPage.OfferPage.Surcharge0.Value
    ElseIf (number = 1) Then
        FormSurchargeList(number + 1).Active = MultiPage.OfferPage.Surcharge1.Value
    ElseIf (number = 2) Then
        FormSurchargeList(number + 1).Active = MultiPage.OfferPage.Surcharge2.Value
    ElseIf (number = 3) Then
        FormSurchargeList(number + 1).Active = MultiPage.OfferPage.Surcharge3.Value
    ElseIf (number = 4) Then
        FormSurchargeList(number + 1).Active = MultiPage.OfferPage.Surcharge4.Value
    ElseIf (number = 5) Then
        FormSurchargeList(number + 1).Active = MultiPage.OfferPage.Surcharge5.Value
    ElseIf (number = 6) Then
        FormSurchargeList(number + 1).Active = MultiPage.OfferPage.Surcharge6.Value
    ElseIf (number = 7) Then
        FormSurchargeList(number + 1).Active = MultiPage.OfferPage.Surcharge7.Value
    ElseIf (number = 8) Then
        FormSurchargeList(number + 1).Active = MultiPage.OfferPage.Surcharge8.Value
    ElseIf (number = 9) Then
        FormSurchargeList(number + 1).Active = MultiPage.OfferPage.Surcharge9.Value
    End If
    
    'Check if any SC is active and LCL type
    PreLCLSurchargeActive = False
    PostLCLSurchargeActive = False
    AnySCActive = False
    For i = 1 To cMAXSURCHARGES
        If FormSurchargeList(i).Active = True Then
            AnySCActive = True
            If FormSurchargeList(i).Type = PreFreightType And FormSurchargeList(i).IsLCL Then
                PreLCLSurchargeActive = True
            ElseIf FormSurchargeList(i).Type = PostFreightType And FormSurchargeList(i).IsLCL Then
                PostLCLSurchargeActive = True
            End If
        End If
    Next i
    If AnySCActive Then
        MultiPage.OutputPage.ShowSurchargeColumnCheckBox.Enabled = True
    Else
        MultiPage.OutputPage.ShowSurchargeColumnCheckBox.Enabled = False
    End If
    
    Call EnablePrePostShipmentButtons(PreLCLSurchargeActive, PostLCLSurchargeActive)
    
End Sub

'Handle currency input boxes: Both on keypressed and on exit
Private Sub CurrencyInput1_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Dim DecSep As String
    Dim DecSepCount As Long
    DecSep = Application.International(xlDecimalSeparator)
    DecSepCount = CountCharacter(CurrencyInput1.Text, DecSep)
    If KeyAscii = Asc(DecSep) Then
        If DecSepCount = 1 Then
            KeyAscii = 0
        End If
    ElseIf (KeyAscii < Asc("0") Or KeyAscii > Asc("9")) Then
        KeyAscii = 0 ' this prevents the non-numeric data from showing up in the TextBox
        'MsgBox "You can only enter numbers"
    End If
End Sub
Private Sub CurrencyInput2_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Dim DecSep As String
    Dim DecSepCount As Long
    DecSep = Application.International(xlDecimalSeparator)
    DecSepCount = CountCharacter(CurrencyInput2.Text, DecSep)
    If KeyAscii = Asc(DecSep) Then
        If DecSepCount = 1 Then
            KeyAscii = 0
        End If
    ElseIf (KeyAscii < Asc("0") Or KeyAscii > Asc("9")) Then
        KeyAscii = 0
    End If
End Sub
Private Sub CurrencyInput3_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Dim DecSep As String
    Dim DecSepCount As Long
    DecSep = Application.International(xlDecimalSeparator)
    DecSepCount = CountCharacter(CurrencyInput3.Text, DecSep)
    If KeyAscii = Asc(DecSep) Then
        If DecSepCount = 1 Then
            KeyAscii = 0
        End If
    ElseIf (KeyAscii < Asc("0") Or KeyAscii > Asc("9")) Then
        KeyAscii = 0
    End If
End Sub

Private Sub CurrencyInput1_Exit(ByVal Cancel As MSForms.ReturnBoolean)
     Dim sInput As String
     Dim Value As Double
     sInput = CurrencyInput1.Text
     If (sInput = "") Then
        sInput = "1"
     End If
     If Not IsNumeric(sInput) Then
         CurrencyInput1.BackColor = TextBoxBackGroundErrorColor
         Cancel = True  'setting Cancel to True means the user cannot leave this textbox until the value is in the proper date format
     Else
          CurrencyInput1.BackColor = TextBoxBackGroundNormalColor
          Value = CDbl(sInput)
          CurrencyInput1.Text = Value
          FormCurrencyList(1).Value = Value
     End If
End Sub
Private Sub CurrencyInput2_Exit(ByVal Cancel As MSForms.ReturnBoolean)
     Dim sInput As String
     Dim Value As Double
     sInput = CurrencyInput2.Text
     If (sInput = "") Then
        sInput = "1"
     End If
     If Not IsNumeric(sInput) Then
         CurrencyInput2.BackColor = TextBoxBackGroundErrorColor
         Cancel = True
     Else
          CurrencyInput2.BackColor = TextBoxBackGroundNormalColor
          Value = CDbl(sInput)
          CurrencyInput2.Text = Value
          FormCurrencyList(2).Value = Value
     End If
End Sub
Private Sub CurrencyInput3_Exit(ByVal Cancel As MSForms.ReturnBoolean)
     Dim sInput As String
     Dim Value As Double
     sInput = CurrencyInput3.Text
     If (sInput = "") Then
        sInput = "1"
     End If
     If Not IsNumeric(sInput) Then
         CurrencyInput3.BackColor = TextBoxBackGroundErrorColor
         Cancel = True
     Else
          CurrencyInput1.BackColor = TextBoxBackGroundNormalColor
          Value = CDbl(sInput)
          CurrencyInput3.Text = Value
          FormCurrencyList(3).Value = Value
     End If
End Sub

'Invoicelist page events
Private Sub HeaderRowSpinButton_Change()
    FormInvoiceHeaderRow = HeaderRowSpinButton.Value
    HeaderRowTextBox.Value = FormInvoiceHeaderRow
    Call UpdateHeaderExample(FormInvoiceHeaderRow)
    Call FillColumnDropdowns(FormInvoiceListName, FormInvoiceHeaderRow)
End Sub

'Output page events
Private Sub OutputDropDown_Change()
    Call UpdateOutputInfoLabel
    Call SetDefaultOutputOptions
End Sub
'Private Sub ShowAdvPriceColumnCheckBox_Click()
'    Call UpdateOutputItems
'End Sub
Private Sub ShowNormalPriceColumnCheckBox_Click()
    Call UpdateOutputItems
End Sub
Private Sub ShowCalcDetailsinCellsCheckBox_Click()
    Call UpdateOutputItems
End Sub
Private Sub ShowPriceDiffInPctCheckBox_Click()
    Call UpdateOutputItems
End Sub
Private Sub MakePctDiffCellsColoredCheckBox_Click()
    Call UpdateOutputItems
End Sub
Private Sub ColorSpinButton_Change()
    ColorTextBox.Value = ColorSpinButton.Value
End Sub

Private Sub CheckModeOptBtn_Click()
'    NegativColorLabel.BackColor = &H8080FF  'Red
'    PositiveColorLabel.BackColor = &H80FF80 'Green
'    OutputSettings.DiffColor = RedGreen
    If Not InitRunning Then
        OutputSettings.OutputMode = OutputCheckMode
        OutputModeLabel.Caption = Txt("Output.CheckModeLabel")
    End If
End Sub

Private Sub BenchModeOptBtn_Click()
'    NegativColorLabel.BackColor = &H80FF80 'Green
'    PositiveColorLabel.BackColor = &H8080FF  'Red
'    OutputSettings.DiffColor = GreenRed
    If Not InitRunning Then
        OutputSettings.OutputMode = OutputBenchMode
        OutputModeLabel.Caption = Txt("Output.BenchModeLabel")
    End If
End Sub


'
'   --- Misc
'
Sub HideThisForm()
    Me.Hide
End Sub

Sub UnloadThisForm()
    Unload Me
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    'Handles the forms X
    'MsgBox ("Hello from UserForm_QueryClose")
    Cancel = True
    Me.Hide
End Sub

Private Function printf(mask As String, ParamArray tokens() As Variant) As String
    'Syntax: printf("Some text '%0', more text: '%1'", A1, A2)
    Dim i As Long
    For i = 0 To UBound(tokens)
        mask = Replace$(mask, "%" & i, tokens(i), , 1, vbTextCompare)
    Next
    printf = mask
End Function


Private Function CountCharacter(ByVal Value As String, ByVal ch As String) As Long
    CountCharacter = Len(Value) - Len(Replace(Value, ch, ""))
End Function



Public Sub SaveVar(VarName As String, VarValue As Variant)
    'Saved the value in the StorageSheet
    'Column A has the var name
    'Column B has the value
    'If the name already exist the value will be overriden
    'If the name does not exist then it will be added
    Dim LastRow As Long
    Dim i As Long
    Dim FoundRow As Long
    Dim temp As String
        
    LastRow = Last(cLASTROW, Worksheets(StorageSheet).Columns(1))
    FoundRow = 0
    
    If LastRow > 0 Then
        'Check if the VarName exists
        For i = 1 To LastRow
            temp = Worksheets(StorageSheet).Cells(i, 1).Value2
            If temp = VarName Then
                FoundRow = i
            End If
        Next i
    End If
    
    If FoundRow = 0 Then
        FoundRow = LastRow + 1
    End If
    
    'Save
    Worksheets(StorageSheet).Cells(FoundRow, 1).Value = VarName
    Worksheets(StorageSheet).Cells(FoundRow, 2).NumberFormat = "@"  'Prevent that eg "Dec-2017" is stored as a date
    Worksheets(StorageSheet).Cells(FoundRow, 2).Value = VarValue
End Sub

Public Function GetVarStr(VarName As String) As String
    'Get the string value of the requested variable
    'If the value was not found "" is returned
    Dim LastRow As Long
    Dim i As Long
    Dim ReadVar As String
    Dim ReadValue As Variant
    ReadVar = ""
    LastRow = Last(cLASTROW, Worksheets(StorageSheet).Columns(1))
    
    If LastRow > 0 Then
        'Check if the VarName exists
        For i = 1 To LastRow
            ReadVar = Worksheets(StorageSheet).Cells(i, 1).Value2
            If ReadVar = VarName Then
                ReadValue = Worksheets(StorageSheet).Cells(i, 2).Value2
                Exit For
            End If
        Next i
    End If
    
    GetVarStr = CStr(ReadValue)
End Function

Public Function GetVarDbl(VarName As String) As Double
    'Get the Double value of the requested variable
    'If the value was not found 0 is returned
    Dim LastRow As Long
    Dim i As Long
    Dim ReadVar As String
    Dim ReadValue As Variant
    ReadVar = ""
    LastRow = Last(cLASTROW, Worksheets(StorageSheet).Columns(1))
    
    If LastRow > 0 Then
        'Check if the VarName exists
        For i = 1 To LastRow
            ReadVar = Worksheets(StorageSheet).Cells(i, 1).Value2
            If ReadVar = VarName Then
                ReadValue = Worksheets(StorageSheet).Cells(i, 2).Value2
                Exit For
            End If
        Next i
    End If
    
    GetVarDbl = CDbl(ReadValue)
End Function

Public Function GetVarLng(VarName As String) As Long
    'Get the Long value of the requested variable
    'If the value was not found 0 is returned
    Dim LastRow As Long
    Dim i As Long
    Dim ReadVar As String
    Dim ReadValue As Variant
    ReadVar = ""
    LastRow = Last(cLASTROW, Worksheets(StorageSheet).Columns(1))
    
    If LastRow > 0 Then
        'Check if the VarName exists
        For i = 1 To LastRow
            ReadVar = Worksheets(StorageSheet).Cells(i, 1).Value2
            If ReadVar = VarName Then
                ReadValue = Worksheets(StorageSheet).Cells(i, 2).Value2
                Exit For
            End If
        Next i
    End If
    
    GetVarLng = CLng(ReadValue)
End Function

Public Function GetVarBol(VarName As String) As Boolean
    'Get the Boolean value of the requested variable
    'If the value was not found FALSE is returned
    Dim LastRow As Long
    Dim i As Long
    Dim ReadVar As String
    Dim ReadValue As Variant
    ReadVar = ""
    LastRow = Last(cLASTROW, Worksheets(StorageSheet).Columns(1))
    
    If LastRow > 0 Then
        'Check if the VarName exists
        For i = 1 To LastRow
            ReadVar = Worksheets(StorageSheet).Cells(i, 1).Value2
            If ReadVar = VarName Then
                ReadValue = Worksheets(StorageSheet).Cells(i, 2).Value2
                Exit For
            End If
        Next i
    End If
    
    GetVarBol = CBool(ReadValue)
End Function


Public Sub InitStorage()
    'Initialises the storage sheet:
    'If it does not exist, then create the sheet
    '20-08-2019 Rewritten
    
    Dim Sh As String
    
    Sh = ActiveSheet.Name   'Get current sheetname, so it can be activated afterwards
    
'    If sheetExists(StorageSheet) Then   'If it exist: delete it without warning
'        Application.DisplayAlerts = False
'        Sheets(StorageSheet).Visible = True
'        Worksheets(StorageSheet).Delete
'        Application.DisplayAlerts = True
'    End If
    If Not sheetExists(StorageSheet) Then
        Sheets.Add(after:=Sheets(Sheets.count)).Name = StorageSheet
        Sheets(StorageSheet).Visible = xlVeryHidden 'Allways hide
    End If
    Worksheets(Sh).Activate
End Sub

Public Sub ResetStorage()
    'Initialises the storage sheet, by first deleting the sheet.
    'Delete if it exist and then create
    '06-09-2019 Inititial
    'This sub is only called from an manual Save
    
    Dim Sh As String
    
    Sh = ActiveSheet.Name   'Get current sheetname, so it can be activated afterwards
    
    If sheetExists(StorageSheet) Then   'If it exist: delete it without warning
        Application.DisplayAlerts = False
        Sheets(StorageSheet).Visible = True
        Worksheets(StorageSheet).Delete
        Application.DisplayAlerts = True
    End If
    Sheets.Add(after:=Sheets(Sheets.count)).Name = StorageSheet
    Sheets(StorageSheet).Visible = xlVeryHidden 'Allways hide
    
    Worksheets(Sh).Activate
End Sub





Attribute VB_Name = "Fr8FrontSupport"

' Sub to handle buttons in the datasheet
' Date          Description                                 Made by
' 2016-05-17    Initial                                     John Hultgreen
' 2017-03-30    Made Mac compatible                         John Hultgreen
' 2017-04-10    ActiveWindow error Fix                      John Hultgreen
' 2017-07-20    Message if only 1 pricecolumn is present    John Hultgreen


Option Explicit
Option Private Module

 Sub InitializeSheet()
    'Misc initialization done on activation of a sheet
    
    If DebugMode Then Call SaveDebugInfo("InitializeSheet()", "Start")
    
    ' If called during initializing then just quit
    If SheetInitializing Then
        Exit Sub
    End If

    'If no sheet is selected the just quit
    Dim ws
    Set ws = ActiveWindow
    If ws Is Nothing Then
        Exit Sub
    End If
    
    'if more than one sheet is selected then just quit to avoid selecting shapes
    Dim number As Long
    number = ActiveWindow.SelectedSheets.count
    If number > 1 Then
        Exit Sub
    End If
    
    ' If not a Fr8Partner sheet then just quit
    Dim tmp As String
    On Error Resume Next
    tmp = Cells(1, 1).Value2
    On Error GoTo 0
    If tmp <> "Fr8Origin" Then
        Exit Sub
    End If
    
    ' If Interval sheet just quit
    Dim content As String
    Dim Value() As String
    content = Cells(2, 2)
    If InStr(content, ":") = 0 Then
        Exit Sub
    End If
    Value = Split(content, ":")
    If IsNumeric(Value(0)) Then
        number = Int(Value(0))
        If number >= 20 Then
            Exit Sub
        End If
    Else
        Exit Sub
    End If
    
    SheetInitializing = True

    
    '--- Read language
    Call InitLanguage

    '--- Adjust the number of PriceColumns
    Dim FirstFr8PriceCol As Long
    Dim LastFr8PriceCol As Long
    Dim Counter As Long
    For Counter = 1 To MaxColCount
        content = Cells(1, Counter)
        If (FirstFr8PriceCol = 0) Then
            If content = "Fr8Price" Then
                FirstFr8PriceCol = Counter
            End If
        Else
            If content <> "Fr8Price" Then
                LastFr8PriceCol = Counter - 1
                Exit For
            End If
        End If
    Next Counter
    'If found then adjust number
    If LastFr8PriceCol > 0 Then
        'Find number of columns we have now and save it
        Range(MatrixChangeCell) = LastFr8PriceCol - FirstFr8PriceCol + 1
    End If
     
    '--- Adjust the number of Surcharges
    Dim FirstSurChargeCol As Long

    FirstSurChargeCol = FindFirstSurcharge
    If (FirstSurChargeCol > 0) Then
        Counter = FindNumberOfSurcharges(FirstSurChargeCol)
        Cells(SurchargeSpinRow, FirstSurChargeCol + 3) = Counter
    End If
    
    '--- Adjust the number of Remarks
    Dim FirstRemarkCol As Long

    FirstRemarkCol = FindFirstRemark
    If (FirstRemarkCol > 0) Then
        Counter = FindNumberOfRemarks(FirstRemarkCol)
        Cells(RemarkSpinRow, FirstRemarkCol + 1) = Counter
    End If
        
    SheetInitializing = False
    If DebugMode Then Call SaveDebugInfo("InitializeSheet()", "End (init done)")
End Sub


'
' Date          Description                                 Made by
' 2016-05-17    Initial                                     John Hultgreen
' 2017-07-20    Message if only 1 pricecolumn is present    John Hultgreen

'
' Change the number priceMatrix columns
'
Sub ChangeMatrix()
    
    ' If called during initializing then just quit
    If SheetInitializing Then
        Exit Sub
    End If
    
    Dim FirstFr8PriceCol As Long
    Dim LastFr8PriceCol As Long
    Dim NumberOfColNow As Long
    Dim NumberOfColWanted As Long
    Dim Done As Boolean
    Dim Counter As Long
    Dim content As String
    Dim MaxCol As Long
    Dim answer As Long
    Dim Language As Long
    
    Done = False
    FirstFr8PriceCol = 0
    LastFr8PriceCol = 0
    
    ' Find language of the file
    Language = getLanguage()
    '--- Read language
    Call InitLanguage

    'Find start and end column we have now
    For Counter = 1 To MaxColCount
        content = Cells(1, Counter)
        If (FirstFr8PriceCol = 0) Then
            If content = "Fr8Price" Then
                FirstFr8PriceCol = Counter
            End If
        Else
            If content <> "Fr8Price" Then
                LastFr8PriceCol = Counter - 1
                Exit For
            End If
        End If
    Next Counter
    
    'If not found then do nothing
    If LastFr8PriceCol = 0 Then
        Exit Sub
    End If
    
    'Find number of columns we have now
    NumberOfColNow = LastFr8PriceCol - FirstFr8PriceCol + 1
    
    'Find number of columns we want (Cell D5)
    NumberOfColWanted = Range(MatrixChangeCell)

    'If only one column is present then give errormessage to user.
    If NumberOfColNow = 1 Then
        MsgBox Langname(Language, 8), vbExclamation, Langname(Language, 7)
        Exit Sub
    End If
    
    'Max number is 1 (-1 or +1)
    Dim ColChange As Long
    If (NumberOfColWanted - NumberOfColNow) > 0 Then
        ColChange = 1
    ElseIf (NumberOfColWanted - NumberOfColNow) < 0 Then
        ColChange = -1
    End If

    Application.ScreenUpdating = False

    ' Delete the last price column
    If ColChange < 0 Then
        'Check lower bound
        If (LastFr8PriceCol - FirstFr8PriceCol) < 2 Then
            'Since the Counter in D5 is decreased by one, and the lower limit was reach, we have to adjust the value
            SheetInitializing = True
            Range(MatrixChangeCell) = LastFr8PriceCol - FirstFr8PriceCol + 1
            SheetInitializing = False
            Exit Sub
        End If
        'Give warning if data found
        content = Cells(DataStartRow, LastFr8PriceCol)
        If (content <> "") Then
            answer = MsgBox("Are you sure you want to delete the last pricerow?", vbExclamation + vbOKCancel, "Delete row?")
            If answer = vbOK Then
                Columns(LastFr8PriceCol).EntireColumn.Delete
                NumberOfColNow = NumberOfColNow - 1
            Else
                'Since the Counter in D5 is decreased by, and the user aborted the delete, we have to adjust the value
                SheetInitializing = True
                Range(MatrixChangeCell) = LastFr8PriceCol - FirstFr8PriceCol + 1
                SheetInitializing = False
            End If
        Else
           Columns(LastFr8PriceCol).EntireColumn.Delete
           NumberOfColNow = NumberOfColNow - 1
        End If
    ' Insert Column
    ElseIf ColChange > 0 Then
        Columns(LastFr8PriceCol).Select
        Selection.Copy
        Range(Columns(LastFr8PriceCol), Columns(LastFr8PriceCol)).Select
        Selection.Insert Shift:=xlToRight
        NumberOfColNow = NumberOfColNow + 1
        'Delete the data that might be in row 9 and below
        Range(Cells(IntervalRow, LastFr8PriceCol + 1), Cells(MaxRowCount, LastFr8PriceCol + 1)).Select
        Selection.ClearContents
        'The Functions bottom is moving to the right so put it back in E5
        On Error GoTo NoCBFunctions
        ActiveSheet.Shapes("CBFunctions").Select
        Selection.ShapeRange.Left = Cells(CBFunctionRow, CBFunctionCol).Left + Int(SpinPaddingVert / 2)                 'location
        Selection.ShapeRange.Top = Cells(CBFunctionRow, CBFunctionCol).Top + Int(SpinPaddingHori / 2)
NoCBFunctions:
        On Error GoTo 0

    End If
        
    'Make sure the counter is acurate
    Range(MatrixChangeCell) = NumberOfColNow
    
    'Remove the selection
    Application.CutCopyMode = False
    
    'Select cell to keep windowposition
    Cells(IntervalRow, MatrixSpinCol).Select
    Application.ScreenUpdating = True

End Sub


'
' Change the number surcharges on the sheet
'
Sub ChangeSurcharge()
    ' If called during initializing then just quit
    If SheetInitializing Then
        Exit Sub
    End If

    Dim FirstSurChargeCol As Long
    Dim NumberWanted As Long
    Dim NumberNow As Long
    Dim LastSCStartCol As Long
    Dim LastSCEndCol As Long
    Dim content As String
    Dim answer As Long
    Dim Cols As String
    Dim i As Long
    Dim sRange As String
    
    FirstSurChargeCol = FindFirstSurcharge
    If (FirstSurChargeCol = 0) Then
        Exit Sub
    End If
    
    NumberWanted = Cells(SurchargeSpinRow, FirstSurChargeCol + 3)
    NumberNow = FindNumberOfSurcharges(FirstSurChargeCol)
    LastSCStartCol = FirstSurChargeCol + ((NumberNow - 1) * 4)
    LastSCEndCol = LastSCStartCol + 3
    
    'Max number is 1 (-1 or +1)
    Dim Change As Long
    If (NumberWanted - NumberNow) > 0 Then
        Change = 1
    ElseIf (NumberWanted - NumberNow) < 0 Then
        Change = -1
    End If
    
    Application.ScreenUpdating = False

    ' Delete the last Surcharge
    If Change < 0 Then
       'Check lower bound
        If NumberNow = 1 Then
            Exit Sub
        End If
        'Give warning if data found
        content = Cells(DataStartRow, LastSCStartCol + 0) & Cells(DataStartRow, LastSCStartCol + 1) & Cells(DataStartRow, LastSCStartCol + 2) & Cells(DataStartRow, LastSCStartCol + 3)
        Cols = ReturnColName(LastSCStartCol) & ":" & ReturnColName(LastSCEndCol)
        If (content <> "") Then
            answer = MsgBox("Are you sure you want to delete the last Surcharge?", vbExclamation + vbOKCancel, "Delete Surcharge?")
            If answer = vbOK Then
                Columns(Cols).EntireColumn.Delete
            Else
                'Since the spinners controlcell counter in is decreased by 1, and the user aborted the delete, we have to adjust the value
                SheetInitializing = True
                Cells(SurchargeSpinRow, FirstSurChargeCol + 3) = NumberNow
                SheetInitializing = False
            End If
        Else
            Columns(Cols).EntireColumn.Delete
        End If
        'Make sure the right border is there
        Range(Cells(3, LastSCStartCol - 1), Cells(5, LastSCStartCol - 1)).Select
        'Set right border
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With

    ' Insert Column
    ElseIf Change > 0 Then
        'Mark and copy last Surcharge
        Range(Columns(LastSCStartCol), Columns(LastSCEndCol)).Select
        Selection.Copy
        'Insert
        Columns(LastSCEndCol + 1).Select
        Selection.Insert Shift:=xlToRight
        'Delete the data that might be in row 10 and below in the new copyed  surcharge
        Range(Cells(DataStartRow, LastSCStartCol + 4), Cells(MaxRowCount, LastSCEndCol + 4)).Select
        Selection.ClearContents
        'Delete the names mm
        Range(Cells(NameRow, LastSCStartCol + 5), Cells(SurchargeSpinRow, LastSCStartCol + 5)).Select
        Selection.ClearContents
        'Delete the Spinbuttons (if copied from the first surcharge)
        sRange = ReturnColName(LastSCStartCol + 4) & "1:" & ReturnColName(LastSCEndCol + 4) & "9"
        DeleteSpinnerInRange (sRange)
        'Delete the language selection (are only on the the first surcharge)
        Range(Cells(NameRow, LastSCStartCol + 7), Cells(NameRow + 2, LastSCStartCol + 7)).Select
        Selection.ClearContents
        'Set background color
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .Color = 10092543   'Soft yellow
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
        'Remove comments and bottom border
        For i = 0 To 2
            Range(Cells(NameRow + i, LastSCStartCol + 7), Cells(NameRow + i, LastSCStartCol + 7)).Select
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            If Not (Selection.Comment Is Nothing) Then
                Selection.Comment.Delete
            End If
        Next i
        'Delete evt. language validations
        Dim rang As Range
        Set rang = Range(Cells(NameRow, LastSCStartCol + 7), Cells(NameRow + 2, LastSCStartCol + 7))
        Call RemoveValidation(rang)
        
        'Delete content where the spin button and lang button in case there was only the first one left.
        Range(Cells(SurchargeSpinRow - 1, LastSCStartCol + 6), Cells(SurchargeSpinRow, LastSCEndCol + 4)).Select
        Selection.Clear
        'Set background color
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .Color = 10092543   'Soft yellow
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
        'Set left border
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        'Set right border
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        'Set bottom border
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        'Remove top border
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlLineStyleNone
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With

    End If
    'Remove the selection
    Application.CutCopyMode = False
    'Select cell to keep windowposition
    Cells(NameRow, FirstSurChargeCol + 1).Select
    Application.ScreenUpdating = True

End Sub

'
' Change the number languages on the sheet (surcharges)
'

Sub ChangeLanguage()
    
    ' If called during initializing then just quit
    If SheetInitializing Then
        Exit Sub
    End If
    
    Application.ScreenUpdating = False

    Call InitLanguage
    
    Dim FirstSurChargeCol As Long
    Dim NumberWanted As Long
    Dim NumberNow As Long
    Dim LastSCStartCol As Long
    Dim LastSCEndCol As Long
    
    FirstSurChargeCol = FindFirstSurcharge
    If (FirstSurChargeCol = 0) Then
        Exit Sub
    End If

    NumberWanted = Cells(SurchargeSpinLangRow, FirstSurChargeCol + 3)
    If (Cells(SurchargeName2Row, FirstSurChargeCol) <> "") Then             'Second name?
        If (Cells(SurchargeName2Row + 1, FirstSurChargeCol) <> "") Then     'Third name?
            NumberNow = 3
        Else
            NumberNow = 2
        End If
    Else
       NumberNow = 1
    End If
    
    If NumberNow = NumberWanted Then
            Exit Sub
    End If
    
    LastSCStartCol = FirstSurChargeCol + ((FindNumberOfSurcharges(FirstSurChargeCol) - 1) * 4)

    If NumberWanted = 2 And NumberNow = 1 Then
        Call AddLang(2, FirstSurChargeCol, LastSCStartCol)
    End If
    If NumberWanted = 3 And NumberNow = 2 Then
        Call AddLang(3, FirstSurChargeCol, LastSCStartCol)
    End If
    If NumberWanted = 3 And NumberNow = 1 Then
        Call AddLang(2, FirstSurChargeCol, LastSCStartCol)
        Call AddLang(3, FirstSurChargeCol, LastSCStartCol)
    End If
    If NumberWanted = 2 And NumberNow = 3 Then
        Call DeleteLang(3, FirstSurChargeCol, LastSCStartCol)
    End If
    If NumberWanted = 1 And NumberNow = 2 Then
        Call DeleteLang(2, FirstSurChargeCol, LastSCStartCol)
    End If
    If NumberWanted = 1 And NumberNow = 3 Then
        Call DeleteLang(2, FirstSurChargeCol, LastSCStartCol)
        Call DeleteLang(3, FirstSurChargeCol, LastSCStartCol)
    End If
    
    'Remove the selection
    Application.CutCopyMode = False
    'Select cell to keep windowposition
    Cells(NameRow, FirstSurChargeCol + 1).Select
    
    Application.ScreenUpdating = True

End Sub

Private Sub AddLang(number As Integer, FirstSC, LastSC)

    If number < 2 Or number > 3 Then
        Exit Sub
    End If

    Dim Row As Long
    Dim Col As Long
    Dim Language As Long
    Dim rng As Range
    
    Row = 4 ' default #2
    If number = 3 Then
        Row = 5
    End If
    
    ' Find language of the file
    Language = getLanguage()
    
    For Col = FirstSC To LastSC Step 4
        'Add Backgroundcolor: Copy the 3 cells from above
        Range(Cells(Row - 1, Col), Cells(Row - 1, Col + 3)).Select
        Selection.Copy
        Range(Cells(Row, Col), Cells(Row, Col + 3)).Select
        Selection.PasteSpecial
        'Add borders
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With

        'Remove Top/Bottom border (lang col) if SC > 1
        If Col <> FirstSC Then
            Range(Cells(Row, Col + 3), Cells(Row, Col + 3)).Select
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
        End If
        
        'Add/Change Label in the description cell
        If number = 2 Then
            Cells(Row, Col) = Langname(Language, 1)
        Else
            Cells(Row, Col) = Langname(Language, 2)
        End If
        'Add/change Comment in the name cell
        Set rng = ActiveSheet.Cells(Row, Col + 1)
        If rng.Comment Is Nothing Then rng.AddComment
        If number = 2 Then
            Cells(Row, Col + 1).Comment.Text Langname(Language, 3)
            
        Else
            Cells(Row, Col + 1).Comment.Text Langname(Language, 4)
        End If

        'Clear content of the new name and language
        Cells(Row, Col + 1) = ""
        Cells(Row, Col + 3) = ""
    Next Col

End Sub

Private Sub DeleteLang(number As Integer, FirstSC, LastSC)

    If number < 2 Or number > 3 Then
        Exit Sub
    End If

    Dim Row As Long
    Dim Col As Long
    Dim Language As Long
    
    Row = 4 ' default #2
    If number = 3 Then
        Row = 5
    End If
    
    For Col = FirstSC To LastSC Step 4
        'Delete the cell content
        Range(Cells(Row, Col), Cells(Row, Col + 3)).Select
        Selection.Clear
        'Set background color
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .Color = 10092543   'Soft yellow
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
        'Set left border
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        'Set right border
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        'Set top border
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        If Col <> FirstSC Then
            Range(Cells(Row, Col + 3), Cells(Row, Col + 3)).Borders(xlEdgeTop).LineStyle = xlNone
        End If
        
        ' Remove bottom border on lang. 2 or 3
        If number = 2 Or number = 3 Then
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
        End If

    Next Col

End Sub

 Sub ChangeRemark()
    
    ' If called during initializing then just quit
    If SheetInitializing Then
        Exit Sub
    End If
    
    Dim FirstRemarkCol As Long
    Dim LastRemarkCol As Long
    Dim LastRemarkEndCol As Long
    Dim NumberNow As Long
    Dim NumberWanted As Long
    Dim Done As Boolean
    Dim Counter As Long
    Dim content As String
    Dim MaxCol As Long
    Dim answer As Long
    Dim Cols As String
    
    Done = False
    FirstRemarkCol = 0
    LastRemarkCol = 0
    
    'Find start and end column we have now
    FirstRemarkCol = FindFirstRemark
    If (FirstRemarkCol = 0) Then
        Exit Sub
    End If
    
    NumberWanted = Cells(RemarkSpinRow, FirstRemarkCol + 1)
    NumberNow = FindNumberOfRemarks(FirstRemarkCol)
    LastRemarkCol = FirstRemarkCol + ((NumberNow - 1) * 2)
    LastRemarkEndCol = LastRemarkCol + 1
    
    'Max number is 1 (-1 or +1)
    Dim Change As Long
    If (NumberWanted - NumberNow) > 0 Then
        Change = 1
    ElseIf (NumberWanted - NumberNow) < 0 Then
        Change = -1
    End If

    Application.ScreenUpdating = False

    ' Delete the last Surcharge
    If Change < 0 Then
       'Check lower bound
        If NumberNow = 1 Then
            Exit Sub
        End If
        'Give warning if data found
        content = Cells(DataStartRow, LastRemarkCol)
        Cols = ReturnColName(LastRemarkCol) & ":" & ReturnColName(LastRemarkEndCol)
        If (content <> "") Then
            answer = MsgBox("Are you sure you want to delete the last Remark?", vbExclamation + vbOKCancel, "Delete Remark?")
            If answer = vbOK Then
                Columns(Cols).EntireColumn.Delete
            Else
                'Since the spinners controlcell counter in is decreased by 1, and the user aborted the delete, we have to adjust the value
                SheetInitializing = True
                Cells(RemarkSpinRow, FirstRemarkCol + 1) = NumberNow
                SheetInitializing = False
            End If
        Else
            Columns(Cols).EntireColumn.Delete
        End If
        'Mark the first data cell in the first remark
        Application.CutCopyMode = False
        Cells(DataStartRow, FirstRemarkCol).Select
        
    ' Insert Column
    ElseIf Change > 0 Then
        'Mark and copy last Surcharge
        Range(Columns(LastRemarkCol), Columns(LastRemarkEndCol)).Select
        Selection.Copy
        'Insert
        Columns(LastRemarkEndCol + 1).Select
        Selection.Insert Shift:=xlToRight
        'Delete the data that might be in row 10 and below in the new copied remark
        Range(Cells(DataStartRow, LastRemarkCol + 1), Cells(MaxRowCount, LastRemarkEndCol + 1)).Select
        Selection.ClearContents
        'Delete content where the spin button in case there was only the first one left.
        Range(Cells(RemarkSpinRow, LastRemarkCol + 2), Cells(RemarkSpinRow, LastRemarkEndCol + 2)).Select
        Selection.Clear
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .Color = 10092543   'Soft yellow
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
        'Set border
        Selection.Borders.LineStyle = xlContinuous

        'Delete the Spinbuttons (if copied from the first Remark)
        Dim sRange As String
        sRange = ReturnColName(LastRemarkCol + 2) & "7:" & ReturnColName(LastRemarkEndCol + 2) & "9"
        DeleteSpinnerInRange (sRange)

        'Adjust the column names
        Cells(1, LastRemarkCol + 2) = RemarkName & NumberWanted
        Cells(1, LastRemarkCol + 3) = RemarkNameLang & NumberWanted
    End If
    'Remove the selection
    Application.CutCopyMode = False
    'Select cell to keep windowposition
    Cells(DataStartRow, FirstRemarkCol).Select
    Application.ScreenUpdating = True
End Sub

Private Function FindFirstSurcharge() As Long
    'Returns the Column number of the first column of the first surcharge
    Dim Counter As Long
    Dim content As String
    FindFirstSurcharge = 0
    For Counter = 1 To MaxColCount
        content = Cells(1, Counter)
        If content = "Fr8SurRate" Then
            FindFirstSurcharge = Counter
            Exit Function
        End If
    Next Counter
End Function

Private Function FindNumberOfSurcharges(FirstSurChargeCol As Long) As Long
    Dim Counter As Long
    Dim Col As Long
    Dim content As String
    Counter = 0
    FindNumberOfSurcharges = 0
    For Col = FirstSurChargeCol To MaxColCount Step 4
        content = Cells(1, Col)
        If content = "Fr8SurRate" Then
            Counter = Counter + 1
        Else
            FindNumberOfSurcharges = Counter
            Exit Function
        End If
    Next Col
End Function

Private Function FindFirstRemark() As Long
    'Returns the Column number of the first column of the first Remark
    Dim Counter As Long
    Dim content As String
    FindFirstRemark = 0
    For Counter = 1 To MaxColCount
        content = Cells(1, Counter)
        If content = "Fr8Remark1" Then
            FindFirstRemark = Counter
            Exit Function
        End If
    Next Counter
End Function

Private Function FindNumberOfRemarks(FirstRemarkCol As Long) As Long
    Dim Counter As Long
    Dim Col As Long
    Dim content As String
    Counter = 0
    FindNumberOfRemarks = 0
    For Col = FirstRemarkCol To MaxColCount Step 2
        content = Cells(1, Col)
        If Left(content, 9) = "Fr8Remark" Then
            Counter = Counter + 1
        Else
            FindNumberOfRemarks = Counter
            Exit Function
        End If
    Next Col
End Function

'~~> Returns Column Name from Col No
Private Function ReturnColName(ByVal num As Integer) As String
    ReturnColName = Split(Cells(, num).Address, "$")(1)
End Function

Function getLanguage() As Integer
    'Find the 2 language letters in cell A2 and returns the corresponding number
    Dim Value As String
    
    Value = Cells(2, 1)
    Value = Mid(Value, 15, 2)   'Contens is in this format "Fr8Partner 01 DA typename"
    If Value = "DA" Then
        getLanguage = DA
    ElseIf Value = "DE" Then
        getLanguage = DE
    ElseIf Value = "EN" Then
        getLanguage = EN
    End If
    
End Function

Sub InitLanguage()

    Langname(DA, 1) = "Navn sprog 2"
    Langname(DE, 1) = "Bezeichnung sprache 2"
    Langname(EN, 1) = "Name of language 2"

    Langname(DA, 2) = "Navn sprog 3"
    Langname(DE, 2) = "Bezeichnung sprache 3"
    Langname(EN, 2) = "Name of language 3"

    Langname(DA, 3) = "Har virksomheden f.eks. tyske brugere kan det tyske navn p|fffd| till|fffd|gget angives her."
    Langname(DE, 3) = "Bezeichnung des zuschlages in sprache 2"
    Langname(EN, 3) = "Name of the surcharge in language 2"

    Langname(DA, 4) = "Har virksomheden f.eks. tyske og engelske brugere kan det engelske navn p|fffd| till|fffd|get angives her som 3. sprog."
    Langname(DE, 4) = "Bezeichnung des zuschlages in sprache 3"
    Langname(EN, 4) = "Name of the surcharge in language 3"

    Langname(DA, 5) = "For mange tegn angivet"  'Used in input validation
    Langname(DE, 5) = "Zu viele Zeichen"
    Langname(EN, 5) = "To many characters"

    Langname(DA, 6) = "Du kan kun angive op til 30 tegn i denne celle." 'Used in input validation
    Langname(DE, 6) = "Sie k|fffd|nnen in diese celle nur bis zu 30 Zeichen angeben."
    Langname(EN, 6) = "In this celle you can only have 30 characters."

    Langname(DA, 7) = "Fejl: Kan ikke tilf|fffd|je priskolonne!"
    Langname(DE, 7) = "Fehler: Kann nicht Preisintervallspalte hinzuf|fffd|gen!"
    Langname(EN, 7) = "Error: Cannot add price interval column!"

    Langname(DA, 8) = "Fejl: Der findes kun 1 priskolonne, og denne kan ikke anvende denne til at lave flere priskolonner. Download venligst en ny skabelonfil."
    Langname(DE, 8) = "Fehler: Es gibt nur eine Preisintervallspalte. Dieser kann nicht f|fffd|r weitere Spalten verwenden werden. Bitte eine neue Schablone herunterladen."
    Langname(EN, 8) = "Error: Only one price interval column exists. This cannot be used for adding new price interval columns. Please download a new template file."


End Sub

Function shapeExists(ByRef shapename As String) As Boolean
    shapeExists = False
    Dim Sh As Shape
    For Each Sh In ActiveSheet.Shapes
        If Sh.Name = shapename Then
            shapeExists = True
            Exit Function
        End If
    Next Sh
End Function

Sub DeleteSpinnerInRange(sRange As String)

    Dim s As Shape
    For Each s In ActiveSheet.Shapes
        If s.Type = msoFormControl Then
            If s.FormControlType = xlSpinner Then
                If Not Intersect(Range(sRange), s.TopLeftCell) Is Nothing And _
                   Not Intersect(Range(sRange), s.BottomRightCell) Is Nothing Then
                s.Delete
                End If
            End If
        End If
    Next s
End Sub

Private Sub RemoveValidation(ByVal Zells As Range)
    Dim cel As Range
    For Each cel In Zells
        If HasValidation(cel) Then
            cel.Validation.Delete
        End If
    Next cel
End Sub
'Used in ReplaceValidationString
Private Function HasValidation(CELL As Range) As Boolean
    Dim T: T = Null

    On Error Resume Next
    T = CELL.Validation.Type
    On Error GoTo 0

    HasValidation = Not IsNull(T)
End Function


Attribute VB_Name = "Globals"
Option Explicit
Option Private Module

Public Const GlobalModuleVersion As String = "06-09-2019"       'Change date of THIS module
Public Const Fr8ControlFormVersion As String = "08-10-2019"     'Fr8Calc UserForm

'---------------------------------------------------------------------------------------
'---
'--- Customer Settings START
'---
'---------------------------------------------------------------------------------------

Public Const VersionInfo As String = "09-10-2019"           'to About windows (Overall Date)

'Public Const ToolName As String = "Fr8Check"               'Limited edition: No Sea
Public Const ToolName As String = "Fr8Benchmark"            'Full edition: All functions

Public Const CompanyName As String = "Fr8 Demo"

Public Const CompanyAdress As String = "Am Markt 4"
Public Const CompanyCity As String = "24955 Harrislee"
Public Const CompanyContact As String = ""
Public Const CompanyTax As String = "DE-123456789"


'Public Const CompanyAdress As String = "Centervej 2"
'Public Const CompanyCity As String = "6000 Kolding"
'Public Const CompanyContact As String = ""
'Public Const CompanyTax As String = "DK-123456789"

Public Const CompanySerial As String = "Serial: 091-019-123-456-789-DEA"        'Purchase date + Tax number. Last Letter is A= first time B: Second time etc

'---------------------------------------------------------------------------------------
'---
'--- Customer Settings END
'---
'---------------------------------------------------------------------------------------

Public Const Fr8CheckName As String = "Fr8Check"            'Must be the same names as above
Public Const Fr8BenchmarkName As String = "Fr8Benchmark"

Public Const ForceLanguage As Long = 0                     'Force langauge change (Set to 1 (DA), 2 (DE) or 3(EN) (0 is no-force)

'First option is default
Public Const SourceFormat As String = "OnlyCell"           ' "WithSheet": 'SheetABC'!A1    "OnlyCell": A1
Public Const DestSheetNameFormat As String = "Offer"       ' "Result": "Result"            "Offer": "Result Dachser"      "Invoice": "Result Statestik-Nov"

'---

Public Const OfficeIsDA As Long = 1                             'Til sprogvalg i TXT
Public Const OfficeIsDE As Long = 2
Public Const OfficeIsEN As Long = 3
Public Const DA As Long = 1                                     'Til sprogvalg af skabeloner
Public Const DE As Long = 2
Public Const EN As Long = 3

Public UserLanguage As Long     'Language the Office has (using CONST OfficeIsDA, OfficeIsDE & OfficeIsEN)

'Used in function "Last":
Public Const cLASTROW As Long = 1
Public Const cLASTCOL As Long = 2
Public Const cLASTCELL As Long = 3
Public Const cLASTROWTOP As Long = 11

Public Const cMAXSURCHARGES = 10        'Max number of Surcharges
Public Const cMAXCURRENCIES = 3         'Max number of Currencies
Public Const cMAXSHEETS = 200           'Max number of Sheets
Public Const cMAXOFFERSHEETS = 200      'Max number of Offersheets
Public Const cMAXPRICEINTERVALS = 200   'Max number of Priceintervals
Public Const cMAXDATACOLUMNS = 20       'Max number of result data columns
Public Const cMAXSHEETCHARACTERS = 31   'Max number of characters in the sheetname allowed
Public Const cMaxZoneInfo = 10000       'Max number of Zoneinfo items

'Surcharge non-standard ID numbers
Public Const cRoadTaxSCId = 50
Public Const cPrefreightSCId = 60
Public Const cPostfreightSCId = 70
Public Const cAllSCId = 99

Public Const cMaxLogEntries = 600  'Max entries
Public Const cLogEntryBuffer = 100  'Buffer. 600 - 100 = Max entries for the user


'Surcharge types
Public Enum SurchargeType
    BasePrice = 0
    Normaltype = 1
    RoadType = 2
    PreFreightType = 3
    PostFreightType = 4
    IntervalAtype = 20
    IntervalBtype = 21
    IntervalCtype = 22
End Enum


'Public Const cNormalType As Long = 1
'Public Const cRoadType As Long = 2
'Public Const cPreFreightType As Long = 3
'Public Const cPostFreightType As Long = 4

Public Const TextBoxBackGroundErrorColor = vbYellow
Public Const TextBoxBackGroundNormalColor = vbWhite

Public Const Newline As String = "; "   'Used in Comments (mouse over) this is replaced with: vbNewLine
Public Const StorageSheet As String = "___!Storage!___" 'Sheetname for saving the variables

Public Enum FreightOfferType

    ' The Normal Freightoffertypes below (1-9) is used for subsciption also: The user is paying for using x different types of Transportforms
    '  Transportforms are definded as:
    '  #1: Road     FreightOfferType = 2
    '  #2: Parcel   FreightOfferType = 6, 7 and 8
    '  #3: See      FreightOfferType = 4 and 5
    '  #4: Air      FreightOfferType = 3
    '  #5: Train    FreightOfferType = 9
    '
    ' If a Company has payed to use 2 transportform he can use any 2 transportforms.
    ' Eg.: Uploads of types Road (2), ParcelEconomic (6), ParcelExpress (7) is OK (All are Road or Parcel types)
    '      Upload of an Air offer is then not allowed.
    '      If the user deletes the Road (2) type, he then can upload the Air (3) type
    '

    NotUsed = 0
    NormalType_min = 1      ' Lower boundery
    DEMO = 1
    Road = 2                ' Normal calculation types
    Air = 3
    SeaLCL = 4
    SeaFCL = 5
    ParcelEconomic = 6
    ParcelExpress = 7
    ParcelStandard = 8
    Train = 9
    NormalType_Max = 9      ' Upper Boundery
    PrePostType_Min = 11
    AirPreFreight = 11      ' Pre / Post calculation types
    AirPostFreight = 12
    SeaLCLPreFreight = 13
    SeaLCLPostFreight = 14
    SeaFCLPreFreight = 15
    SeaFCLPostFreight = 16
    RoadTax = 19
    PrePostType_Max = 19
    IntervalType_Min = 20   ' Interval (surcharge) types
    IntervalA = 20
    IntervalB = 21
    IntervalC = 22
    IntervalD = 23
    IntervalE = 24
    IntervalF = 25
    IntervalG = 26
    IntervalH = 27
    IntervalI = 28
    IntervalJ = 29
    IntervalType_Max = 29

    DistanceType_Min = 30
    DistanceA = 30          ' Distance (surcharge) types
    DistanceB = 31
    DistanceC = 32
    DistanceD = 33
    DistanceE = 34
    DistanceF = 35
    DistanceG = 36
    DistanceH = 37
    DistanceI = 38
    DistanceJ = 39
    DistanceType_Max = 39
    ZoneType_Min = 50
    ZoneType_Max = 51
End Enum
   
Public Enum UnitType
    None = 0
    KG = 1
    M3 = 2
    LDM = 3
    EA = 4  ' Also 7:Container
End Enum

Public Enum PriceType                               ' Must be the same as in dropdowns on the Excel sheet
    Unitprice = 1
    Shipmentprice = 2
    UnitpriceVolume = 3                             ' Only used in Interval surcharge
    ShipmentpriceVolume = 4                         ' Only used in Interval surcharge
    UnitFollowHalf = 10
    UnitFollowOne = 11
    UnitFollow5 = 12
    UnitFollow10 = 13
    UnitFollow25 = 14
    UnitFollow20 = 15
    UnitsRounded1 = 21
    UnitsRounded10 = 22
    UnitsRounded100 = 23
    UnitsRounded1000 = 24
    PricePer5 = 31
    PricePer10 = 32
    PricePer20 = 33
    PricePer25 = 34
    PricePer50 = 35
    PricePer100 = 36
    PricePer250 = 37
    PricePer500 = 38
    PricePer1000 = 39
    FTL = 99                                        ' Full Truck Load is Always Shipment price
End Enum

Public Enum CalculationModeType
    NormalMode = 1
    AdvantageNext = 2
    Advantagerest = 3
    Disadvantage = 4
End Enum

Public Enum UsedCalculation
    Notpossible
    NormalUsed
    AdvantageUsed
    DisadvantageUsed
    MinimumUsed
    FTLUsed
End Enum


' All Offer column names (Copy from Fr8Partner: public class FreightExcelConstants
Public Const OriginColumnName As String = "Fr8Origin"
Public Const DestColumnName As String = "Fr8Dest"
Public Const MinPriceColumnName As String = "Fr8PriceMin"
Public Const PriceColumnName As String = "Fr8Price"
Public Const SurchargeRateColumnName As String = "Fr8SurRate"
Public Const SurchargeRateUnitColumnName As String = "Fr8SurUnit"
Public Const MinSurchargeColumnName As String = "Fr8SurMin"
Public Const MaxSurchargeColumnName As String = "Fr8SurMax"
Public Const ConvertVolumeColumnName As String = "Fr8ConvVol"
Public Const ConvertTruckColumnName As String = "Fr8ConvLdm"

'Row definitions
Public Const OfferHeaderRow As Long = 2
Public Const OfferNameRow As Long = 3       'Surchargename etc.
Public Const OfferCategoryRow As Long = 4
Public Const OfferUnitsRow As Long = 4
Public Const OfferCurrencyRow As Long = 8
Public Const OfferDataRowStart As Long = 10
Public Const OfferDataTypeRow As Long = 6
Public Const OfferDataUnitRow As Long = 7
Public Const OfferDataSourceIDRow As Long = 7
Public Const OfferDataIntervalRow As Long = 9
'First part of new sheetname (output)
Public Const NewSheetName = "Result"
Public Const PriceFormat = "Standard"   'Used in calcdetails

'Mode defininitions
Public Const OutputCheckMode As Long = 1   'Outputmode is Check (Nothing to do with program mode)
Public Const OutputBenchMode As Long = 2   'outmode is Bench (Nothing to do with program mode)

Public StartCheck As Boolean

'Some public/global definitions

Public Const DataStartRow As Long = 10
Public Const NameRow As Long = 3
Public Const IntervalRow As Long = 9
Public Const MaxRowCount As Long = 65000
Public Const MaxColCount As Long = 255

Public Const MatrixChangeCell As String = "D5"
Public Const MatrixSpinRow As Long = 5
Public Const MatrixSpinCol As String = "D"

Public Const CBFunctionRow As Long = 3
Public Const CBFunctionCol As String = "E"

Public Const SurchargeSpinRow As Long = 8
Public Const SurchargeSpinLangRow As Long = 7
Public Const SurchargeName2Row As Long = 4

Public Const RemarkSpinRow As Long = 8
Public Const RemarkName As String = "Fr8Remark"
Public Const RemarkNameLang As String = "Fr8RemarkLang"

Public Const SpinPaddingVert As Integer = 6     'Left and Right
Public Const SpinPaddingHori As Integer = 4     'Top and botton

Public SheetInitializing As Boolean

Public Langname(3, 100)        As String            'Contains alle UI text
Public LanguageIsInitialized As Boolean

Public Const cCommentsLimit1 As Long = 15       'Comment rows limit 1
Public Const cCommentsLimit2 As Long = 50       'Comment rows limit 2
Public Const cCommentsLimit3 As Long = 100      'Comment rows limit 3
Public Const cCommentsNoLimit As Long = 999999  'Number for the No limit of comment rows

'Fr8Bench:

'Structs

Type ProgramModeType
    IsInitialized As Boolean    'True if inititializion of this struckt is done
    SeaAllowed As Boolean       'False in Fr8Check
    AirAllowed As Boolean       'False in Fr8Check
End Type

Type TemplateInfoType
    MasterSheetName As String        'The Master sheetname
    UserSheetName As String          'The name the User gets
    DropdownName As String           'The tekst displayed in the dropdown on the add page
    SheetType As FreightOfferType    'SheetType
    Language As Long                 'Use Language Constants 1=DA,  2= DE,   3=EN
    LimitTo As String                'Used to show only some templates (Blank=no limit, "Fr8Bench"=only Fr8Bench, "Fr8Check"=only Fr8Check)
    LinkedInfoSheetName As String    'Name of the the linked Infosheetname that it also to be copied (if not present)
    LinkedPreFreightSheet As String  'Name of the the linked Prefreightsheetname that it also to be copied (if not present)
    LinkedPostFreightSheet As String 'Name of the the linked Prefreightsheetname that it also to be copied (if not present)
    LinkedRoadTaxSheet As String     'Name of the the linked Road tax sheetname that it also to be copied (if not present)
    LinkedZoneSheet As String        'Name of the the linked Zone sheetname that it also to be copied (if not present)
    LinkedIntervalASheet As String   'Name of the the linked interval A sheetname that it also to be copied (if not present)
    LinkedIntervalBSheet As String   'Name of the the linked interval B sheetname that it also to be copied (if not present)
    LinkedIntervalCSheet As String   'Name of the the linked interval C sheetname that it also to be copied (if not present)
    LinkedDemoSheet2 As String       'Name of the 2. Demo sheet (Master ist the 1. one)
    LinkedDemoSheet3 As String       'Name of the 3. Demo sheet (Master ist the 1. one)
    LinkedDemoSheet4 As String       'Name of the 4. Demo sheet (Master ist the 1. one)
    LinkedDemoSheet5 As String       'Name of the 5. Demo sheet (Master ist the 1. one)
    LinkedDemoSheet6 As String       'Name of the 6. Demo sheet (Master ist the 1. one)
    LinkedDemoSheet7 As String       'Name of the 7. Demo sheet (Master ist the 1. one)
End Type

Type SettingsType
    HasContent As Boolean   'Indicates if there is data in the global variables. Set in Sub SaveButton_Click()
    ActivePage As Long      'The active page on the Form (0 is the first page)
End Type

Type InvoiceListDataType
    From As String
    To As String
    EffKG As Double         'Effective KG
    EffM3 As Double         'Effective M3
    EffLDM As Double        'Efective LDM
    Quantity As Double      'The chargeable amount from the forwarder
    Price As Double
    Valid As Boolean
    Warning As Boolean
End Type

Type SurchargeFormType
    Name As String          'Name of the surcharge
    Active As Boolean       'If checked this is True
    Type As SurchargeType   'Normal, Road, Pre or post
    IsLCL As Boolean        'True if the offer is LCL (used ind Form for enabling the Pre/post data buttons on the invoice sheet)
    Sheetname As String     'Worksheetname
End Type

Type CurrencyType
    Name As String
    Value As Double
End Type

Type OfferSettingsType
    OfferName As String
    ForwarderName As String
    OfferDesc As String
    Sheetname As String 'First found if more
    CurrencyInfo(0 To cMAXCURRENCIES) As CurrencyType    'index 0 is standard currency
    SurchargeInfo(0 To cMAXSURCHARGES) As SurchargeFormType
End Type

Type InvoiceSettingsType
    Sheetname As String
    headerRow As Long
    FromColumn As Long      'Column A = 1 ...
    FromColumnName As String
    ToColumn As Long
    ToColumnName As String
    EffKGColumn As Long
    EffKGColumnName As String
    EffLDMColumn As Long
    EffLDMColumnName As String
    EffM3Column As Long
    EffM3ColumnName As String
    QuantityColumn As Long
    QuantityColumnName As String
    PriceColumn As Long
    PriceColumnName As String
    Units As Long           'Chargeable units (from dropdown):   1:kg, 2:m3, 3:ldm, 4:ea
End Type

Type OutputSettingsType
    Sheetname As String                         ' Sheetinfo
    IsNewSheet As Boolean
    IsInvoiceListSheet As Boolean
    'ShowColumnsFromInvoiceList As Boolean       ' Options info
    ShowColumnWithFreightCalc As Boolean
    ShowColumnWithNormalCalc As Boolean
    ShowColumnWithNormalCalcDetails As Boolean
    ShowColumnWithAdvantageCalc As Boolean
    ShowColumnWithAdvantageCalcDetails As Boolean
    ShowColumnWithChargeableAmount As Boolean
    ShowColumnWithCalcMode As Boolean
    ShowColumnWithPriceDiffInUnits As Boolean
    ShowColumnWithPriceDiffInPercent As Boolean
    ShowColumnWithSurcharges As Boolean
    MakePctDiffCellsColored As Boolean
    PriceDiffSolidColorPercent As Long
    OutputMode As Long                              'Output mode: Check or Bench
    ShowDetailsAsCellComments As Boolean
    MaxRowsWithComments As Long                     'Limit nr of rows with comments
    CommentRowCounter As Long                       'Counter used for keeping track
    ShowSum As Boolean
    
    ColumnOffset As Long                            'Offset between existing columns and the column to display the data (1=no space)
    InvoiceStartColumn As Long                      'Columnnumber for the Invoicestart (on new sheet, since they are not shown on invoicelistsheet)
    InvoiceFromColumn As Long                       'Columnnumber for the Depart
    InvoiceToColumn As Long                         'Columnnumber for the destination
    InvoiceEffKGColumn As Long                      'Columnnumber for the KG
    InvoiceEffM3Column As Long                      'Columnnumber for the M3
    InvoiceEffLDMColumn As Long                     'Columnnumber for the LDM
    InvoiceQuantityColumn As Long                   'Columnnumber for the chargeabel amount
    InvoicePriceColumn As Long                      'Columnnumber for the price
    FreightCalcColumn As Long                        'Columnnumber for the Freightprice (without Surcharges)
    NormalCalcColumn As Long                        'Columnnumber for the Normal calc
    NormalCalcDetailsColumn As Long                 'Columnnumber for the Normal calc details
    AdvantageCalcColumn As Long                     'Columnnumber for the Advantage calc
    AdvantageCalcDetailsColumn As Long              'Columnnumber for the Advantage calc details
    ChargeableAmountColumn As Long                  'Columnnumber for the Chargeable amount
    CalcModeColumn As Long                          'Columnnumber for the Calc mode
    SelectedPriceColumn As Long                     'Columnnumber for the Selected price
    PriceDiffInUnitsColumn As Long                  'Columnnumber for the Price diff in units
    PriceDiffInPercentColumn As Long                'Columnnumber for the Price diff in %
    SurchargeColumn(0 To cMAXSURCHARGES) As Long    'Columnnumber for the surcharges
    
    InvoiceStartIndex As Long                       'RowData(Indexnumber) for the Invoicestart
    InvoiceFromIndex As Long                        'RowData(Indexnumber) for the Depart
    InvoiceToIndex As Long                          'RowData(Indexnumber) for the Destination
    InvoiceEffKGIndex As Long                       'RowData(Indexnumber) for the KG
    InvoiceEffM3Index As Long                       'RowData(Indexnumber) for the M3
    InvoiceEffLDMIndex As Long                      'RowData(Indexnumber) for the LDM
    InvoiceQuantityIndex As Long                    'RowData(Indexnumber) for the Chargeable Amount
    InvoicePriceIndex As Long                       'RowData(Indexnumber) for the Price
    FreightCalcIndex As Long                        'RowData(Indexnumber) for the Freight calc (without surcharges)
    NormalCalcIndex As Long                         'RowData(Indexnumber) for the Normal calc
    NormalCalcDetailsIndex As Long                  'RowData(Indexnumber) for the Normal calc details
    AdvantageCalcIndex As Long                      'RowData(Indexnumber) for the Advantage calc
    AdvantageCalcDetailsIndex As Long               'RowData(Indexnumber) for the Advantage calc details
    ChargeableAmountIndex As Long                   'RowData(IndexNumber) for the Chargeable Amount
    CalcModeIndex As Long                           'RowData(Indexnumber) for the Calc mode
    SelectedPriceIndex As Long                      'RowData(Indexnumber) for the Selected price
    PriceDiffInUnitsIndex As Long                   'RowData(Indexnumber) for the Price diff in units
    PriceDiffInPercentIndex As Long                 'RowData(Indexnumber) for the Price diff in %
    SurchargeIndex(0 To cMAXSURCHARGES) As Long     'RowData(Indexnumber) for the surcharges
    NumberOfSurcharges As Long
    DataRow As Long                                 'The row that the next dataset is writen to
    headerRow As Long                               'HeaderRow on the output sheet
    ForwarderName As String                         'Forwardername used in the output header
    OfferDesc As String                             'Offer type/desription used in the output header
End Type

'--- Used in TEST ---

'Type ColumnInfo     'Used in function TestInvoiceSheet
'    ColumnNumber As Long    'A = column 1
'    ColumnType As String    'eg 'Effective kg' (in the users language)
'    BlankAllowed As Boolean 'True if blank cells are OK
'    TextAllowed As Boolean  'True if text is allowed (From / To columns)
'End Type
'
Public Enum MessageTypeEnum
    RemarkType = 1            'Remark are overall info
    WarningType = 2           'Warnings are non-critical error (that evt. has default handling)
    ErrorType = 3             'Error are critical Calculation can not be made
End Enum

Public Enum AreaEnum
    DepartureArea = 0
    DestinationArea = 1
    PriceTypeArea = 2     'Calculation: Unit /Shipment / FTL
    PriceUnitsArea = 3    'Kg/LDM/m3..
    PriceIntervalArea = 4 'Interval numbers 100 or -100 or 50-100, Right number counts
    PriceMatrixArea = 5   'The Prices
    SurchargeArea = 6
    ConversionFactor = 7
    CurrencyArea = 8
    MiscellaneousArea = 9
    InfoArea = 10
    GenerelArea = 11
    ForwarderArea = 12
    OfferDesignationArea = 13
    StatGenerelArea = 14
    StatDepartureArea = 15
    StatDestinationArea = 16
    StatM3Area = 17
    StatLdmArea = 18
    StatKgArea = 19
    StatChargableArea = 20
    StatAmountArea = 21
    StatPriceArea = 22
    DepartDestinationCombi = 23
End Enum

Public Enum CellStatusEnum
    CellUnknown                 '0 Initial value
    CellIsEmpty                 '1 Cell is empty
    CellIsstring                '2 String without newline
    CellIsNumeric               '3 Integer/Long/Double/Date
    CellIsStrNumberPoint        '4 String due to use of Punktum as decimal point
    CellIsStrNumberComma        '5 String due to use of Comma as decimal point
    CellHasError                '6 Has error as stated in ReturnMessage
End Enum

Type LogEntryType           'Used in function TestOfferSheet
    Message As String               'The message text
    MessageType As MessageTypeEnum  'Type of message (Remark, warning, error)
    MessageArea As AreaEnum         'Pricematrix, surcharge etc
    sht As String                   'Sheet
    Reference As String             'Normal used reference
    Reference2 As String            'Used only if 2 references needed
End Type

Public Enum TestRunModeEnum
    PauseMode = 1               'Pauses after each error (Not used)
    ContinueslyMode = 2         'Test to the end
    StopMode = 3                'Stop and quit testing
    Overrun = 4                 'To many entries
End Enum

Type TestSettingsType
    RunMode As TestRunModeEnum
    Pointer As Long             'Last used pointer in LogEntry(Counter)
    ShowDetails As Boolean
    ShowRemarks As Boolean
    ShowWarnings As Boolean
    ShowErrors As Boolean
    RemarksCount As Long
    WarningCount As Long
    ErrorCount As Long
    CurrentSheet As String      'The Sheet that is curently being testet
End Type

Type ScInfo
    RateCol As Long
    UnitCol As Long
    MinCol As Long
    MaxCol As Long
End Type

Public TestSettings As TestSettingsType
Public TestLog(cMaxLogEntries) As LogEntryType

'--- End Used in TEST ---

Public Settings As SettingsType
Public OfferSettings As OfferSettingsType
Public InvoiceSettings As InvoiceSettingsType
Public InvoicePreSettings As InvoiceSettingsType    'Only using the Amounts
Public InvoicePostSettings As InvoiceSettingsType   'Only using the Amounts
Public OutputSettings As OutputSettingsType

Public FormOfferName As String
Public FormSurchargeList(0 To cMAXSURCHARGES) As SurchargeFormType   'Holds all surcharges listed in the setup form
Public FormCurrencyList(0 To cMAXCURRENCIES) As CurrencyType     'Holds all currencies listed in the setup form, where (0) is the standard currency
Public FormInvoiceListName As String
Public FormInvoiceHeaderRow As Long
Public FormInvoicFromName As String
Public FormInvoicFromIndex As String

'Used in Engine:
Type OfferListType
    OfferName As String
    OfferDescription As String
    Sheetname As String
    StartRow As Long            'First data row (=10)
    FromColumn As Long
    ToColumn As Long
    MinPriceColumn As Long
    PriceColumn As Long         'First one
    LastPriceColumn As Long     'Last one
    ConverterVolumeColumn As Long
    ConverterTruckColumn As Long
    Valid As Boolean
End Type

Type OfferDataType
    'Header:
    CalculationMode As Long                          'Enum CalculationModeType: 1= Normal, 2=AdvantageNext, 3=AdvantageRest, 4= Disadvantage
    AdvCalcNumber As Double
    StandardCurrency As String                       'The offers default currency. 3 letter Code: EUR, DKK etc
    MatrixCurrency As String                         'The pricematrix currency code
    Types(0 To cMAXPRICEINTERVALS) As Long           'Enum PriceType:  1=Einheit; 2=Sendung; 10=Nachflg. |fffd| kg; 11=Nachflg. kg; 12=Nachflg. 5 kg; 13=Nachflg. 10 kg; 15=Nachflg.20 kg; 14=Nachflg.25 kg; 21=Aufrunden>1; 22=Aufrunden>10; 23=Aufrunden>100; 24=Aufrunden>1000; 99=FTL
    Units(0 To cMAXPRICEINTERVALS) As Long           'Enum UnitType: 1=KG; 2=M3; 3=LDM; 4=EA
    PriceInterval(0 To cMAXPRICEINTERVALS) As Double 'The priceinterval number. Eg 100: up to and inkluding 100
    'Data:
    MinimumPrice As Double
    Price(0 To cMAXPRICEINTERVALS) As Double
    ConversionFactorM3 As Double
    ConversionFactorLDM As Double
    'Misc
    SourceSheetName As String                        'The Sheetname where the offer is located
    SourceDataBlockIndex As Long                     'The index in the xxDataBlock array where the offer is located
    
    SourceRow As Long
    ErrorMessage As String
    Valid As Boolean                                 'Marks if data was found and read
End Type

Type ResultType
    InvoiceFrom As String
    InvoiceTo As String
    InvoiceEffKG As Double
    InvoiceEffLDM As Double
    InvoiceEffM3 As Double
    InvoiceQuantity As Double
    InvoicePrice As Double
    AmountEff As Double                 'If the Offers unit is available this is used here, if not available it will be same as AmountVol
    AmountVol As Double                 'The biggest convertion (if made). Same as AmountEff if no convertion possible
    ConvertionDetails As String         'Convertion details for the output column
    ConvertColor As Long                'Color of the cell in the convertion column. 0: No color, -1:Green,  +1:Red.
    OfferUnits As UnitType              'The units the offer is in (KG = 1    M3 = 2    LDM = 3    EA = 4)
    DefaultCurrency As String           'The offers default currency
    MatrixCurrency As String
    NormalPrice As Double               'Baseprice Without surcharges (default currency)
    NormalCalcDetails As String
    NormalCalcCurrencyConvDetails As String
    AdvantagePrice As Double            'Advantage/disadvantage Without surcharges (default currency)
    AdvCalcDetails As String
    CalcModeUsed As String
    SelectedBasePrice As Double         'Selected price Without surcharges (default currency)
    SelectedAllInPrice As Double        'Selected price including surcharges (default currency)
    SelectedCalcDetails As String
    FreightPrice As Double              'Same as SelectedBasePrice, but without Surcharges
    FreightPriceDetails As String       'Same as SelectedCalcDetails, but without Surcharges
    PriceDiffInUnits As Double          'Diff between the Selected price and the Invoice price (default currency)
    PriceDiffInPercent As Double        ' -"- in percent
    ErrorMessage As String
    SCFullDetails As String             'Surcharge Full details for Surcharge column (Only used in Pre/Post results)
    SCSelectedDetails As String         'Surcharge Selected details for Surcharge column (Only used in Pre/Post results)
End Type

Type SurchargeListType                  'All the surcharges applicable is in here
    'Info
    Name As String                      'The name of the surcharge
    Type As SurchargeType               'Type is NormalType=1, RoadType=2, PreFreightType=3, PostFreightType=4
    IDnumber As Long                    'IDnumber (Normal Surcharges: 1-49, RoadToll: 50, Prefreight: 60, Postfreight: 70, All other: 99).
    SourceID As Long                    'The IDNumber this surcharge is dependant on. If 0: just the selectedBaseprice.
    Sheetname As String                 'The name of the sheet the surcharge is located
    OfferDataBlockIndex As Long         'The index in the OfferDataBlock array where the surcharge is located
    StartColumn As Long                 'If NormalType this has the start Column af the surcharge in the sheetname above
    Currency As String                  'The Currency the Surcharge is in
    IsLCL As Boolean                    'True if the offer is LCL (used ind Form for enabling the Pre/post data buttons on the invoice sheet)
    'Calculated stuff
    Price As Double                     'The calculated surcharge price (in the default currency)
    SelectedDetails As String           'Calculation details or Errormessages is in here (single line for the selected price column)
    FullDetails As String               'Calculation Info for the mouseover on the surcharge column (can be multiple lines)
    'Status
    IsCalculated As Boolean             'Surcharge calculation status. If Price is OK then it is True
    HasError As Boolean                 'Surcharge has an error if true.
    IsInfo As Boolean                   'Info mode if true (Onreq, included etc)
    'Used in RoadTax and Pre/post:
    FromColumn As Long
    ToColumn As Long
    MinPriceColumn As Long
    PriceColumn As Long                 'First one
    LastPriceColumn As Long             'Last one
    ConverterVolumeColumn As Long
    ConverterTruckColumn As Long
    LastCol As Long                     'On pre/post/road surcharge this is the last column on the sheet
    LastRow As Long                     'On pre/post/road surcharge this is the last row on the sheet
End Type

Type ZoneType
    RefersTo As String  'DK-61
    ZoneName As String  '_ZoneA_1
End Type

Public InitRunning As Boolean
Public ProgramMode As ProgramModeType
Public InvoiceInfo As InvoiceSettingsType
Public InvoiceData As InvoiceListDataType

Public OfferList(0 To cMAXOFFERSHEETS) As OfferListType             'List with all the offers that contains the prices
Public OfferListCount As Long                                       'The Offerlist biggest index with valid offer (0 if one offer in the list)
Public SurchargeList(0 To cMAXSURCHARGES) As SurchargeListType      'List with all the ACTIVE surcharges that is referenced in the offer(s).
Public SurchargePreList(0 To cMAXSURCHARGES) As SurchargeListType   'List with all the surcharges the Pre freight offersheet
Public SurchargePostList(0 To cMAXSURCHARGES) As SurchargeListType  'List with all the surcharges the Post freight offersheet
Public SurchargePreCount As Long                                    'Number of surcharges in the Pre list
Public SurchargePostCount As Long                                   'Number of surcharges in the Post list

Public OfferData As OfferDataType                                   'Dynamic data of the current offer header + row

Public OfferRoadTaxData As OfferDataType
Public ResultRoadTaxData As ResultType

Public OfferPreData As OfferDataType
Public ResultPreData As ResultType

Public OfferPostData As OfferDataType
Public ResultPostData As ResultType

Public OfferIntervalAData As OfferDataType
Public OfferIntervalBData As OfferDataType
Public OfferIntervalCData As OfferDataType


Public OutputInfo As OutputSettingsType 'OutputInfo is used in DoTheCalc
Public ResultData As ResultType
Public KeepFormOpen As Boolean
Public SurchargeListInitDone As Boolean
Public SurchargePreListInitDone As Boolean
Public SurchargePostListInitDone As Boolean
Public IntervalSurchargeInitDone As Boolean

Public TemplateInfo(cMAXSHEETS) As TemplateInfoType     'Info about the hidden Master template sheets
Public NumberOfTemplates As Long
Public ZonesIsInitialized As Boolean
Public ZonesFound As Long
Public ZoneInfo(cMaxZoneInfo) As ZoneType

Public CurrentlyRunning As Boolean
Public DecimalCharacter As String   ' . or , Used in test function

Public OfferDataBlock() As Variant    'Used for storing all the offersheets data
Public PreDataBlock As Variant        'Used for storing the Prefreight offersheets data
Public PostDataBlock As Variant       'Used for storing the Postfreight offersheets data
Public RoadTaxDataBlock As Variant    'Used for storing the Road Tax offersheets data
Public TestDataBlock() As Variant     'Used for storing all the sheet data that is being testet

Public ShowFr8RibbonTab As Boolean      'used to show/hide the Fr8 Tab on the ribbon (hide if file is not activated

Public ExportPath As String             'Used in Export Form
Public ExportFilename As String         'Used in Export Form
Public ExportFullname As String         'Used in Export Form

'Used in Pre/Post column setup:
Public Const NotInitialized As Long = 0     'Use Main
Public Const UseMain As Long = 1            'Use Main
Public Const Active As Long = 2             'Use Pre/Post
Public InvoicePreSettingsmode As Long       'See above
Public InvoicePostSettingsmode As Long      'See above
Public PrePostSheetname As String           'Main sheetname transfer
Public PrePostRow As Long                   'Main row transfer

Public AutoSave As Boolean                  'True if the Save process is automatic initialized via the Calc button

Attribute VB_Name = "Intern"
Option Explicit
Option Private Module

Sub UnhideAllSheets()
    'Unhide all sheets in workbook.
    Dim ws As Worksheet
    Application.ScreenUpdating = False
    For Each ws In ActiveWorkbook.Worksheets
        ws.Visible = xlSheetVisible
    Next ws
    Application.ScreenUpdating = True
End Sub

Sub HideAllMasterSheets()
    Dim count As Long
    'Hide all Master files Name starts with "_M_"
    Dim ws As Worksheet
    Application.ScreenUpdating = False
    For Each ws In ActiveWorkbook.Worksheets
        If Left(ws.Name, 3) = "_M_" Or Left(ws.Name, 6) = "!!!_M_" Or Left(ws.Name, 4) = "___!" Then
            ws.Visible = xlVeryHidden
            Debug.Print "Hidding sheet " & ws.Name
            count = count + 1
        End If
    Next
    Application.ScreenUpdating = True
    Debug.Print "Count: " & count
End Sub

Sub ShowAllMasterSheets()
    'Show all Master files Name starts with "_M_"
    Dim ws As Worksheet
    Dim count As Long
    Application.ScreenUpdating = False
    For Each ws In ActiveWorkbook.Worksheets
        If Left(ws.Name, 3) = "_M_" Or Left(ws.Name, 6) = "!!!_M_" Then
            ws.Visible = xlSheetVisible
            Debug.Print "Showing sheet " & ws.Name
            count = count + 1
        End If
    Next
    Application.ScreenUpdating = True
    Debug.Print "Count: " & count
End Sub

Sub DeleteAllDemoSheets()
    'DELETES all Master sheets (Starting with "_M_") with "demo" in the name
    Dim ws As Worksheet
    Dim count As Long
    MsgBox "ADVARSEL ALLE MASTER DEMOARK SLETTES I FILEN, HUSK AT HAVE EN BACKUP!", vbCritical, "ADVARSEL"
    Application.DisplayAlerts = False
    For Each ws In ActiveWorkbook.Worksheets
        If Left(ws.Name, 3) = "_M_" Or Left(ws.Name, 6) = "!!!_M_" Then
            If InStr(1, UCase(ws.Name), "DEMO", vbTextCompare) Then
                Debug.Print "Deleting sheet " & ws.Name
                ws.Visible = xlSheetVisible
                ws.Delete
                count = count + 1
            End If
        End If
    Next
    Application.DisplayAlerts = True
    Debug.Print "Count: " & count
    MsgBox "Deleted: " & count & " Sheets.", vbInformation, "Demo sheets deleted"
End Sub

Sub DeleteDEDemoSheets()
    'DELETES all GERMAN Master sheets (Starting with "_M_") with "demo" in the name
    Dim ws As Worksheet
    Dim count As Long
    MsgBox "ADVARSEL ALLE TYSKE DEMOARK SLETTES I FILEN, HUSK AT HAVE EN BACKUP!", vbCritical, "ADVARSEL"
    Application.DisplayAlerts = False
    For Each ws In ActiveWorkbook.Worksheets
        If Left(ws.Name, 3) = "_M_" Or Left(ws.Name, 6) = "!!!_M_" Then
            If InStr(1, UCase(ws.Name), "DEMO", vbTextCompare) Then
                If Right(ws.Name, 2) = "DE" Then
                    Debug.Print "Deleting sheet " & ws.Name
                    ws.Visible = xlSheetVisible
                    ws.Delete
                    count = count + 1
                End If
            End If
        End If
    Next
    Application.DisplayAlerts = True
    Debug.Print "Count: " & count
    MsgBox "Deleted: " & count & " Sheets.", vbInformation, "Demo sheets deleted"
End Sub

Sub DeleteDADemoSheets()
    'DELETES all Danish Master sheets (Starting with "_M_") with "demo" in the name
    Dim ws As Worksheet
    Dim count As Long
    MsgBox "ADVARSEL ALLE DANSKE DEMOARK SLETTES I FILEN, HUSK AT HAVE EN BACKUP!", vbCritical, "ADVARSEL"
    Application.DisplayAlerts = False
    For Each ws In ActiveWorkbook.Worksheets
        If Left(ws.Name, 3) = "_M_" Or Left(ws.Name, 6) = "!!!_M_" Then
            If InStr(1, UCase(ws.Name), "DEMO", vbTextCompare) Then
                If Right(ws.Name, 2) = "DA" Then
                    Debug.Print "Deleting sheet " & ws.Name
                    ws.Visible = xlSheetVisible
                    ws.Delete
                    count = count + 1
                End If
            End If
        End If
    Next
    Application.DisplayAlerts = True
    Debug.Print "Count: " & count
    MsgBox "Deleted: " & count & " Sheets.", vbInformation, "Demo sheets deleted"
End Sub

Private Sub SetFreeze()
    'Sets the row height on all fr8Partner template sheets
    Dim ws As Worksheet
    Application.ScreenUpdating = False
    For Each ws In ActiveWorkbook.Worksheets
        'Only adjust on Fr8Partner templates
        If ws.Cells(1, 1) = "Fr8Origin" Then
            ws.Activate
            ws.Cells(10, 3).Select
            ActiveWindow.FreezePanes = True
        End If '
    Next
    Application.ScreenUpdating = True
End Sub

Sub SetNewDateOnOfferSheets()
    'Sets new date on all Offer sheets
    Dim ws As Worksheet
    Dim count As Long
    Dim temp As String, sVal As String
    Dim NewDate As String
    
    NewDate = "30-07-2019"
    
    Application.ScreenUpdating = False
    For Each ws In ActiveWorkbook.Worksheets
        temp = ws.Cells(1, 1)
        If temp = "Fr8Origin" Or temp = "Fr8ZoneCountryCode" Then  'Fr8partner template?
            sVal = ws.Cells(2, 1)
            sVal = Left(sVal, Len(sVal) - 10)                 'Remove last 10 characters
            sVal = sVal & NewDate   'Add new date
            ws.Cells(2, 1) = sVal   'Save
            Debug.Print "New Date set on " & ws.Name
            count = count + 1
        End If
    Next
    Application.ScreenUpdating = True
    Debug.Print "Count: " & count
End Sub

Sub SetValidationOnAllSurchargeInFile()
'
' Inds|fffd|tter cellevalidering til brug p|fffd| Till|fffd|g p|fffd| alle till|fffd|g i filen
'

    Dim LastRow As Long
    Dim LastCol As Long
    Dim Col As Long
    Dim ColName As String
    Dim ws As Worksheet
    Dim wsName As String
    Dim temp As String
    
    Application.CutCopyMode = False
    Application.ScreenUpdating = False
    
    For Each ws In ActiveWorkbook.Worksheets
        wsName = ws.Name
        '--- Offer template sheet
        temp = ws.Cells(1, 1)
        If temp = "Fr8Origin" Then  'Fr8partner template?
            Debug.Print "Setting validation on surcharges on " & ws.Name
            'Find all surcharges in the offer
            LastCol = Last(cLASTCOL, ws.Rows(1))
            For Col = 1 To LastCol
                ColName = ws.Cells(1, Col).Value2
                If ColName = SurchargeRateUnitColumnName Then
                    LastRow = Last(cLASTROW, Rows(Col))
                    If LastRow < 200 Then LastRow = 200
                    With Range(Cells(10, Col), Cells(LastRow, Col)).Validation
                        .Delete
                        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, _
                        Formula1:="PCT,UNIT,VOL,OnReq,NotAvail,Included,Unknown,Interval-A,Interval-B,Interval-C"
                        .IgnoreBlank = True
                        .InCellDropdown = True
                        .InputTitle = ""
                        .ErrorTitle = Txt("Input_Error")
                        .InputMessage = ""
                        .ErrorMessage = Txt("RateUnit_not_legal")
                        .ShowInput = True
                        .ShowError = True
                    End With
                End If
            Next Col
        End If
    Next
    Application.ScreenUpdating = True
End Sub

Sub SetValidationOnSurcharge()
'
' Inds|fffd|tter cellevalidering til brug p|fffd| Till|fffd|g p|fffd| de markerede celler
'
    Application.CutCopyMode = False
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, _
        Formula1:="PCT,UNIT,VOL,OnReq,NotAvail,Included,Unknown,Interval-A,Interval-B,Interval-C"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = Txt("Input_Error")
        .InputMessage = ""
        .ErrorMessage = Txt("RateUnit_not_legal")
        .ShowInput = True
        .ShowError = True
    End With
End Sub

Attribute VB_Name = "Language"
Option Explicit
Option Private Module

Public Const LanguageModuleVersion As String = "24-06-2019"

' Language functions
' Txt  is Text for Ribbon, Forms and general
' cTxt is Text for Calc engine
' sTxt is Text for Surcharge engine


Public Function Txt(InputString As String) As String
    'Used in the Ribbon and Forms
    Dim DA As String
    Dim DE As String
    Dim EN As String
    
    Select Case InputString
    
    Case "ToolName"
        DA = ToolName
        DE = ToolName
        EN = ToolName
    
    Case "Ribbon.Tab.Setup"
        DA = ToolName
        DE = ToolName
        EN = ToolName
        
    Case "FAQ.LINK"
        DA = "https://fr8partner.dk/fr8bc-01-faq"
        DE = "https://fr8partner.de/fr8bc-01-faq"
        EN = "https://fr8partner.com/fr8bc-01-faq"
        
    
'    Case "Ribbon.Group.Setup"
'        DA = "Indstillinger"
'        DE = "Einstellungen"
'        EN = "Setup"
    
'    Case "Ribbon.Group.AddSheet"
'        DA = "Skabeloner"
'        DE = "Schablonen"
'        EN = "Templates"
    
'    Case "Ribbon.Group.Export"
'        DA = "Eksporter"
'        DE = "Exportieren"
'        EN = "Export"

    Case "Ribbon.Group.About"
'        DA = "Copyright"
'        DE = "Copyright"
'        EN = "Copyright"
    
    Case "Ribbon.Group.Format"
'        DA = "Format"
'        DE = "Format"
'        EN = "Format"
    
    Case "Ribbon.Group.Align"
        DA = "Justering"
        DE = "Ausrichtung"
        EN = "Alignment"
        
    Case "Ribbon.Group.Misc"
        DA = "Diverse"
        DE = "Sonstige"
        EN = "Miscellaneous"
        
'    Case "Ribbon.Group.Excel"
'        DA = "Excel funktioner"
'        DE = "Excel-Funktionen"
'        EN = "Excel functions"
        
    Case "Ribbon.Group.Fr8"
        DA = ToolName
        DE = ToolName
        EN = ToolName

    Case "Ribbon.Group.Owner"
'        DA = "Ejer"
'        DE = "Inhaber"
'        EN = "Owner"
    
    
    Case "Ribbon.Button.Setup"
        DA = "Indstillinger"
        DE = "Einstellungen"
        EN = "Setup"
    
    Case "Ribbon.Button.Calc"
        DA = "Beregn"
        DE = "Berechnen"
        EN = "Calculate"
    
    Case "Ribbon.Button.AddSheet"
        DA = "V|fffd|lg skabelon"    'Alt+255 used as space to avoid line break
        DE = "Schablone w|fffd|hlen"
        EN = "Add template"
    
    Case "Ribbon.Button.Export"
        DA = "Gem ark (eksporter)"
        DE = "Reiter(n) exportieren"
        EN = "Export sheet(s)"
    
    Case "Ribbon.Button.About"
        DA = ""
        DE = ""
        EN = ""
'        DA = "Om"
'        DE = "Info"
'        EN = "About"
    
    Case "Ribbon.Label.LicensedTo"
        DA = "Licens udstedt til"
        DE = "Lizenziert f|fffd|r"
        EN = "Licensed to"
        
    Case "Ribbon.Button.ConvertToNumber"
        DA = "Konverter til tal"
        DE = "In Zahlen konvertieren"
        EN = "Convert to numbers"
    
    Case "Ribbon.ScreenTip.ConvertToNumber"
        DA = "Konverterer de markerede celler til tal."
        DE = "Die markierten Zellen werden in Zahlen konvertiert."
        EN = "The selected cells will be converted to numbers."
    
    Case "Ribbon.SuperTip.ConvertToNumber"
        DA = "Tal-gemt-som-tekst og formler konverteres til tal."
        DE = "Zahl-als-Text-formatiert und Formeln werden in Zahlen konvertiert."
        EN = "Numbers-saved-as-Text and Formulas are converted to real numbers."
    
    Case "Ribbon.Button.CleanUp"
        DA = "Ryd op"
        DE = "Aufr|fffd|umen"
        EN = "CleanUp"
    
    Case "Ribbon.ScreenTip.CleanUp"
        DA = "Rydder op i filen"
        DE = "Die Datei aufr|fffd|umen und optimieren"
        EN = "Cleans up the file"
    
    Case "Ribbon.SuperTip.CleanUp"
        DA = "Fejlreferencer, eksterne navne og brugerdefinerede typografier fjernes og filst|fffd|rrelsen fors|fffd|ges at gjort mindre."
        DE = "Fehlerreferenzen, externe Namen und benutzerdefinierte Formatvorlagen werden entfernt, und die Dateigr|fffd||fffd|e nach M|fffd|glichkeit reduziert"
        EN = "Error references, external names and userdefined styles are removed and the file size is attempted to be reduced."
    
    Case "Ribbon.Button.FAQ"
        DA = "FAQ"
        DE = "FAQ"
        EN = "FAQ"
    
    Case "Ribbon.ScreenTip.FAQ"
        DA = "Ofte Stillede Sp|fffd|rgsm|fffd|l (FAQ)"
        DE = " Oft gestellte Fragen (FAQ)"
        EN = "Frequently Asked Questions (FAQ)"
    
    Case "Ribbon.SuperTip.FAQ"
        DA = "|fffd|bner 'Ofte Stillede Sp|fffd|rgsm|fffd|l' p|fffd| Fr8Partners hjemmeside."
        DE = "|fffd|ffnet die Webseite 'FAQ' auf der Homepage von Fr8Partner"
        EN = "Opens the 'Frequently Asked Questions' on Fr8Partners homepage."
    
    Case "OfferPageTab"
        DA = "Tilbud"
        DE = "Angebot"
        EN = "Offer"
    
    Case "InvoiceListTab"
        DA = "Sendingsstatistik"
        DE = "Sendungsstatistik"
        EN = "Shipment statistics"
    
    Case "OutputPageTab"
        DA = "Analyse"
        DE = "Analyse"
        EN = "Analysis"
                
    'Green labels for the user after hitting ButtonCalc
    Case "LabelCalcStat_Saving"
        DA = "Gemmer indstillinger..."
        DE = "Einstellungen wird gespeichert..."
        EN = "Saving settings..."
        
    Case "LabelCalcStat_Testing_Invoicesheet"
        DA = "Tester statistik ark..."
        DE = "Statistikreiter wird getestet..."
        EN = "Testing Invoice sheet(s)..."
        
    Case "LabelCalcStat_Testing_Offersheet"
        DA = "Tester tilbudsark..."
        DE = "Angebotsreiter wird getestet..."
        EN = "Testing offer sheet(s)..."
        
    Case "LabelCalcStat_Calculating"
        DA = "Beregner, vent venligst..."
        DE = "Berechne, bitte warten..."
        EN = "Calculating, please wait..."
                
    Case "ButtonCalcStart"
        DA = "Start"
        DE = "Start"
        EN = "Run"
    
    Case "ButtonCalcCancel"
        DA = "Afbryd"
        DE = "Abbrechen"
        EN = "Cancel"
    
    Case "SaveButton"
        DA = "Gem indstillinger"
        DE = "Einst. speichern"
        EN = "Save settings"

    Case "ButtonTest"
        DA = "Check"
        DE = "Test"
        EN = "Check"
    
    Case "Offer.InfoLabel"
        DA = "Angiv hvilket tilbud der skal anvendes til beregningerne."
        DE = "Geben Sie an, welches Angebot f|fffd|r die Berechnung verwendet werden soll."
        EN = "Choose which offer is to be used for the calculation."
    
    Case "Invoice.InfoLabel"
        DA = "Angiv oplysninger om sendingsdata der skal anvendes."
        DE = "Geben Sie an welche Sendungsdaten verwendet werden sollen."
        EN = "Enter which shipment data is to be used."
    
    Case "Output.InfoLabel"
        DA = "Angiv hvor beregningsdata skal vises og hvilke data der |fffd|nskes vist."
        DE = "Geben Sie an, wo die Berechnungsdaten angezeigt werden und welche Daten angezeigt werden sollen."
        EN = "Specify where the calculation data should be displayed and what data should be used."


    Case "OfferPage.OfferLabel"
        DA = "V|fffd|lg tilbud:"
        DE = "Angebot w|fffd|hlen:"
        EN = "Select offer:"

    Case "OfferPage.CurrencyLabel.Enter"
        DA = "Vekselkurs: 1,00 %0="
        DE = "W|fffd|hrungskurs: 1,00 %0="
        EN = "Currency rate: 1,00 %0="

    Case "OfferPage.StandardCurrencyLabel"
        DA = "Standardvaluta er %0."
        DE = "Standardw|fffd|hrung ist %0."
        EN = "Standard currency is %0."
    
    Case "OfferPage.CurrencyLabel.OnlyStd"
        DA = "Kun standardvaluta bliver anvendt."
        DE = "Nur die Standardw|fffd|hrung wird verwendet."
        EN = "Only standard currency is used."
    
    Case "OfferPage.CurrencyLabel.NoInfo"
        DA = "Ingen valutainformation"
        DE = "Keine W|fffd|hrungsinformation"
        EN = "No currency information"

    Case "OfferPage.CurrencyWarningLabel"
        DA = "Der er angivet %0 valutaer i tilbuddet. 3 er maksimum."
        DE = "Es sind %0 W|fffd|hrungen im Angebot angegeben. Maximal drei m|fffd|glich."
        EN = "%0 currencies were found in this offer. Maximum 3 currencies."

    Case "OfferPage.SurchargeLabel"
        DA = "Till|fffd|g:"
        DE = "Zuschl|fffd|ge:"
        EN = "Surcharges:"
    
    Case "OfferPage.SurchargeLabel.NoInfo"
        DA = "Ingen till|fffd|g i tilbuddet."
        DE = "Keine Zuschl|fffd|ge im Angebot."
        EN = "No surcharges in offer."
    
    Case "SheetType.Pre"
        DA = "Forfragt:"
        DE = "Vorlauf:"
        EN = "Pre-freight:"
    
    Case "SheetType.Post"
        DA = "Efterfragt:"
        DE = "Nachlauf:"
        EN = "Local Delivery Charges:"
    
    Case "SheetType.RoadTax"
        DA = "Vejskat:"
        DE = "Maut:"
        EN = "Road tax:"
    
    Case "SurchargeType.Pre"
        DA = "Forfragt"
        DE = "Vorlauf"
        EN = "Pre-freight"
    
    Case "SurchargeType.Post"       'Har efter mail den 10-02-2019 fra JPH fjernet ordet Till|fffd|g her
        DA = "Efterfragt"
        DE = "Nachlauf"
        EN = "Local Delivery Charges"
    
    Case "SurchargeType.RoadTax"
        DA = "Vejskat till|fffd|g"
        DE = "Mautzuschlag"
        EN = "Road tax surcharge"
    
    Case "Invoice.InvoiceListLabel"
        DA = "Ark med Sendingsdata:"
        DE = "Reiter mit Sendungsdaten:"
        EN = "Sheet with shipment data:"
    
    Case "Invoice.HeaderLabel"
        DA = "R|fffd|kke med Overskrifter:"
        DE = "Reihe mit Spaltennamen:"
        EN = "Row with header names:"
    
    Case "Invoice.HeaderExample"
        DA = "Eksempel fra kolonne %0: '%1'"
        DE = "Beispiel von Spalte %0: '%1'"
        EN = "Example from column %0: '%1'"
    
    Case "Invoice.HeaderExampleEmpty"
        DA = "Eksempel fra kolonne %0: <Tom>"
        DE = "Beispiel von Spalte %0: <Lehr>"
        EN = "Example from column %0: <Empty>"
    
    Case "Invoice.ShipperLabel"
        DA = "Kolonne med Afsender:"
        DE = "Spalte mit Versender:"
        EN = "Column with Shipper:"
        
    Case "Invoice.DestinationLabel"
        DA = "Kolonne med Modtager:"
        DE = "Spalte mit Empf|fffd|nger:"
        EN = "Column with Consignee:"
    
    Case "Invoice.PriceLabel"
        DA = "Kolonne med Fragtpris:"
        DE = "Spalte mit Frachtpreis:"
        EN = "Column with freight price:"
    
    Case "Invoice.AmountEffM3Label"
        DA = "Kolonne med effektiv volumen:"
        DE = "Spalte mit effektivem Volumen:"
        EN = "Column with effective volume:"
        
    Case "Invoice.AmountEffLDMLabel"
        DA = "Kolonne med effektiv ladmeter:"
        DE = "Spalte mit effektivem Lademeter:"
        EN = "Column with effective loading meters:"
        
    Case "Invoice.AmountEffKGLabel"
        DA = "Kolonne med effektiv v|fffd|gt:"
        DE = "Spalte mit effektivem Gewicht:"
        EN = "Column with effective weight:"
    
    Case "Invoice.AmountLabel"              'Chargeable
        DA = "Kolonne med fragtpligtig m|fffd|ngde:"
        DE = "Spalte mit frachtpflichtiger Menge:"
        EN = "Column with chargeable amount:"
    
    Case "Invoice.FreightUnitKG"
        DA = "1: kg"
        DE = "1: kg"
        EN = "1: kg"
    
    Case "Invoice.FreightUnitM3"
        DA = "2: m3"
        DE = "2: m3"
        EN = "2: m3"
    
    Case "Invoice.FreightUnitLDM"
        DA = "3: Lademeter"
        DE = "3: Lademeter"
        EN = "3: Loading meters"
    
    Case "Invoice.FreightUnitEA"
        DA = "5: Styk"
        DE = "5: St|fffd|ck"
        EN = "5: Unit(s)"
    
    Case "Invoice.AmountNotAvailable"
        DA = "<Ikke angivet>"
        DE = "<Nicht vorhanden>"
        EN = "<Not available>"
    
    'PrePost form window (TJEKKES SPROGLIGT)
    
    Case "Invoice.PreFreightSettingsButton"
        DA = "Forfragt ops|fffd|tning"
        DE = "Vorlauf Einst."
        EN = "Prefreight settings"

    Case "Invoice.PostFreightSettingsButton"
        DA = "Efterfragt ops|fffd|tning"
        DE = "nachlauf Einst."
        EN = "Postfreight settings"
    
    Case "PreFreightSetupForm.PreWindow"
        DA = "Fragm|fffd|ngdeangivelser for forfragt"
        DE = "Frachtmengen angeben f|fffd|r den Vorlauf"
        EN = "Freightamount settings for the Pre-Freight"
    
    Case "PostFreightSetupForm.PostWindow"
        DA = "Fragm|fffd|ngdeangivelser for efterfragt"
        DE = "Frachtmengen angeben f|fffd|r den Nachlauf"
        EN = "Freightamount settings for the Local Delivery"
    
    Case "PreFreightSetupForm.PreInfoLabel"
        DA = "Fragm|fffd|ngdeangivelser for forfragt"
        DE = "Frachtmengen angeben f|fffd|r den Vorlauf"
        EN = "Freightamount settings for the Pre-Freight"
    
    Case "PostFreightSetupForm.PostInfoLabel"
        DA = "Fragm|fffd|ngdeangivelser for efterfragt"
        DE = "Frachtmengen angeben f|fffd|r den Nachlauf"
        EN = "Freightamount settings for the Local Delivery"
    
    Case "PreFreightSetupForm.UseMainSettings"    'button
        DA = "Anvend samme som hovedfragten"
        DE = "Wie Hauptfracht"
        EN = "Use main settings"
    
    Case "PreFreightSetupForm.Apply"
        DA = "Anvend"
        DE = "Anwenden"
        EN = "Apply"
    
    
'-------------------
    Case "Output.OutputLabel"
        DA = "V|fffd|lg output:"
        DE = "Ausgabe w|fffd|hlen:"
        EN = "Select output:"
    
    Case "Output.OptionsLabel"
        DA = "Optioner:"
        DE = "Optionen:"
        EN = "Options:"
    
    Case "Output.DropdownInvoiceSheet"
        DA = "<Ark med Sendingsstatistik> '%0'"
        DE = "<Reiter mit Sendungsstatistik> '%0'"
        EN = "<Sheet with shipment statistics> '%0'"
    
    Case "Output.DropdownNewSheet"
        DA = "<Nyt ark>"
        DE = "<Neuer Reiter>"
        EN = "<New sheet>"
   
    Case "Output.InfoLabelInvoiceList"
        DA = "Der tilf|fffd|jes kolonner efter sidste kolonne med data."
        DE = "Es werden Spalten nach der letzten Spalte mit Daten hinzugef|fffd|gt."
        EN = "Columns will be added after the last column with data."
   
    Case "Output.InfoLabelNewSheet"
        DA = "Der oprettes et nyt ark."
        DE = "Ein neuer Reiter wird erstellt"
        EN = "A new sheet will be created."
    
    Case "Output.ShowNormalPriceColumn"
        DA = "Vis kolonne med den nye beregnede pris."
        DE = "Spalte mit neuberechneten Preisen anzeigen."
        EN = "Show column with the newly calculated price."
    
    Case "Output.ShowNormalPriceDetailsColumn"
        DA = "Vis kolonne med beregningsdetaljer."
        DE = "Spalte mit Berechnungsdetails anzeigen (horizontal angezeigt)."
        EN = "Show column with calculation details."
    
    Case "Output.ShowChargableAmountColumn"
        DA = "Vis kolonne med beregning af fragtpligtig m|fffd|ngde iht. omregningsfaktorer i tilbuddet."
        DE = "Spalte mit frachtpflichtiger Menge basierend auf den Umrechnungsfaktoren im Angebot anzeigen."
        EN = "Show column with chargeable amount based on the conversion factors in the offer."
   
    Case "Output.ShowCalcModeColumn"
        DA = "Vis kolonne med beregningsm|fffd|de (Normal/fordel/ulempe)."
        DE = "Spalte mit Berechnungsmodus des Endpreises (Normal/Vorteil/Nachteil) anzeigen."
        EN = "Show column with calculation mode (Normal/advantage/disadvantage)."
    
    Case "Output.ShowSurchargeColumn"
        DA = "Vis kolonne(r) med till|fffd|gsberegninger."
        DE = "Spalte mit Zuschlagsberechnungen anzeigen."
        EN = "Show column with surcharge calculations."
    
    Case "Output.ShowPriceDiffInUnits"
        DA = "Vis kolonne med prisdifference (bel|fffd|b)."
        DE = "Spalte mit Preisdifferenz (Betrag) anzeigen."
        EN = "Show column with price difference (amount)."
    
    Case "Output.ShowPriceDiffInPct"
        DA = "Vis kolonne med prisdifference (procent)."
        DE = "Spalte mit Preisdifferenz (in Prozent) anzeigen."
        EN = "Show column with price difference (in percent)."
    
    Case "Output.MakePctDiffCellsColored"
        DA = "Farvel|fffd|g cellebaggrund (r|fffd|d/gr|fffd|n)."
        DE = "Zellenhintergrund farblich hinterlegen (rot/gr|fffd|n)."
        EN = "Colour cell background (red/green)."
    
    Case "Output.ColorDescLabel1"
        DA = "Procentangivelse for hvorn|fffd|r farverne bliver solide."
        DE = "Prozentangabe, wann die rot/gr|fffd|nen Farben als Vollfarben dargestellt werden sollen."
        EN = "Percentage when the colours become solid."
    
    Case "Output.ColorDescLabel2"
        DA = "Et 0 giver kun de 2 solide farver og ingen farveforl|fffd|b."
        DE = "Eine 0 gibt nur die 2 Vollfarben und keinen Farbverlauf aus."
        EN = "A 0 results in only 2 solid colours and no colour gradient."
        
    Case "Output.CheckModeOptBtn"
        DA = "Regningskontrol"
        DE = "Rechnungskontrolle"
        EN = "Invoice check"
    
    Case "Output.BenchModeOptBtn"
        DA = "Benchmark"
        DE = "Benchmark"
        EN = "Benchmark"
            
    Case "Output.CheckModeLabel"
        DA = "(Resultat = Afregnet bel|fffd|b - Tilbudspris)"
        DE = "(Resultat = Abgerechneter Betrag - Angebotspreis)"
        EN = "(Result = Charged amount - Offer price)"
    
    Case "Output.BenchModeLabel"
        DA = "(Resultat = Ny tilbudspris - Gammel tilbudspris)"
        DE = "(Resultat = Neuer Angebotspreis - Alter Angebotspreis)"
        EN = "(Result = New offer price - Old offer price)"
            
    Case "Output.ShowCalcDetailsinCells"
        DA = "Tilf|fffd|j beregningsdetaljer i cellerne som kommentar."
        DE = "Berechnungsdetails in Zellen als Kommentar einf|fffd|gen."
        EN = "Add calculation details in cells as comments."
    
    Case "Output.DetailsLimit"
        DA = "Kun i de f|fffd|rste %0 sendinger"
        DE = "Nur in den ersten %0 Sendungen"
        EN = "Only in the first %0 shipments"
    
    Case "Output.DetailsNoLimit"
        DA = "I alle sendinger"
        DE = "In allen Sendungen"
        EN = "In all shipments"
    
    Case "Output.ShowSum"
        DA = "Tilf|fffd|j sum under data."
        DE = "Summe am Ende einf|fffd|gen."
        EN = "Add Sum at bottom."
        
    Case "Header_About"
        DA = "Om"
        DE = "|fffd|ber"
        EN = "About"
    
    Case "Header_Company"
        DA = "Licens udstedt til"
        DE = "Lizenziert f|fffd|r"
        EN = "Licensed for"
    
    Case "Header_Sheet_copied"
        DA = "Arket er blevet kopieret"
        DE = "Der Reiter wurde kopiert"
        EN = "The sheet has been copied"
    
    Case "Export_Sheet_Copied_To"
        DA = "Det aktive ark er kopieret til filen" & vbNewLine & "'%0'" & vbNewLine & "Filnavnet indeholder arknavnet og tidspunkt for eksporten." & vbNewLine & "Vil du |fffd|bne mappen?"
        DE = "Der aktive Reiter wurde in die Datei" & vbNewLine & "'%0'" & vbNewLine & "kopiert." & vbNewLine & "Der Dateiname enth|fffd|lt den Reiternamen und den Zeitpunkt der Speicherung." & vbNewLine & "M|fffd|chten Sie den Speicherort |fffd|ffnen?"
        EN = "The active Sheet was copied to file" & vbNewLine & "'%0'" & vbNewLine & "The filename contains the sheet name and the export time." & vbNewLine & "Would you like to open the folder?"
    
    'Status bar
    Case "Statusbar_TestInvoice"
        DA = "Statistik ark test: %0 (%2 / %3). Tilbagev|fffd|rende tid er ca. %1 sekunder."
        DE = "Statistikreiter Test: %0 (%2 / %3). Die verbleibende Zeit ist ungef|fffd|hr %1 Sekunde(n)."
        EN = "Statistic sheet testing: %0 (%2 / %3). Time left is approx. %1 second(s)."
    
    Case "Statusbar_Calculating"
        DA = "Beregnet %0 (%2 / %3). Tilbagev|fffd|rende tid er ca. %1 sekunder."
        DE = "Berechnet wurden %0 (%2 / %3). Die verbleibende Zeit ist ungef|fffd|hr %1 Sekunde(n)."
        EN = "Calculated %0 (%2 / %3). Time left is approx. %1 second(s)."
    
    Case "Statusbar_DoneCalculating"
        DA = "Har beregnet %0 r|fffd|kker p|fffd| %1 sekunder = %2 r|fffd|kker/sekund."
        DE = "%0 Zeilen in %1 Sekunden berechnet = %2 Zeilen / Sekunde."
        EN = "Calculation rate %0 rows in %1 seconds = %2 rows/second."

    'Export Sheets form ( ----- Tjekkes sproglig --------)
    Case "Export.Form_Name"
        DA = "Eksporter ark til ny fil"
        DE = "Reiter(n) in eine neue Datei exportieren"
        EN = "Export sheet(s) to a new file"
    
    Case "Export.ButtonExport_Before"
        DA = "Eksporter"
        DE = "Exportieren"
        EN = "Export"

    Case "Export.ButtonExport_After"
        DA = "|fffd|ben mappe"
        DE = "Ordner |fffd|ffnen"
        EN = "Open folder"

    Case "Export.HeaderLabel"
        DA = "V|fffd|lg en eller flere ark der skal eksporteres:"
        DE = "W|fffd|hlen Sie ein oder mehrere Reitern die exportiert werden soll:"
        EN = "Select one or more sheets to export"
    
    Case "Export.InfoLabel"
        DA = "Her v|fffd|lges et eller flere ark der skal eksporteres til en ny fil." & vbNewLine & "Den nye fil indeholde ikke makroer og er beregnet til at sende til spedit|fffd|ren."
        DE = "Hier k|fffd|nnen Sie einen oder mehreren Reitern w|fffd|hlen, die in exportiert werden sollen." & vbNewLine & "Die neue Datei ist ohne Makros und ist f|fffd|r den Versand an Ihren Spediteur gedacht."
        EN = "Here you can select one or more sheets that will be saved to a new file." & vbNewLine & "This new file is without macros and can be sent to you forwarder."

    Case "Export.StatusLabel_Before"
        DA = "Du har valgt %0 ark til eksporten."
        DE = "Sie haben %0 Reitern gew|fffd|hlt."
        EN = "You have selected %0 sheets for the export."
    
    Case "Export.StatusLabel_After"
        DA = "Der er gemt %0 ark i den nye fil."
        DE = "Es wurden %0 Reitern in die neue Datei kopiert."
        EN = "%0 sheets was saved in the new file."
    
    Case "Export.FileFolderInfo"
        DA = "Filnavn: '%0'" & vbNewLine & "Mappe: '%1'"
        DE = "Datei: '%0'" & vbNewLine & "Ordner: '%1'"
        EN = "Filename: '%0'." & vbNewLine & "Path: '%1'."

    'Add Sheets form
    Case "Add.Form_Name"
        DA = "Tilf|fffd|j skabelon"
        DE = "Schablone hinzuf|fffd|gen"
        EN = "Add template"
    
    Case "Add.ButtonAdd"
        DA = "Tilf|fffd|j"
        DE = "Hinzuf|fffd|gen"
        EN = "Add"
    
    Case "Add.ButtonClose"
        DA = "Luk"
        DE = "Schlie|fffd|en"
        EN = "Close"

    Case "Add.DeleteDemoSheets"
        DA = "Slet Demoark"
        DE = "Demo-Reiter l|fffd|schen"
        EN = "Delete Demo sheets"
    
    Case "Add.DeleteDemoSheets()"
        DA = "Slet Demoark (%0)"
        DE = "Demo-Reiter l|fffd|schen (%0)"
        EN = "Delete Demo sheets (%0)"

    Case "Add.HeaderLabel"
        DA = "Tilf|fffd|j tilbudsark"
        DE = "Angebotsreiter hinzuf|fffd|gen"
        EN = "Add offer template"
    
    Case "Add.InfoLabel"
        DA = "Her kan du tilf|fffd|je nye tomme tilbudsskabeloner."
        DE = "Hier k|fffd|nnen Sie neue, leere Angebotsschablonen hinzuf|fffd|gen."
        EN = "You can add new empty offer templates here."
    
    Case "Add.SelectLabel"
        DA = "V|fffd|lg skabelon:"
        DE = "Schablone w|fffd|hlen:"
        EN = "Select template:"
    
    Case "Add.StatusLabel_Initial"
        DA = "V|fffd|lg skabelon i dropdown og klik p|fffd| 'Tilf|fffd|j' knappen."
        DE = "W|fffd|hlen Sie eine Schablone aus dem Drop-Down-Men|fffd| und klicken Sie dann auf 'Hinzuf|fffd|gen'."
        EN = "Select a template in the dropdown menu and then click the 'Add' button."
    
    Case "Add.StatusLabel_Added"
        DA = "Arket '%0' er blevet tilf|fffd|jet."
        DE = "Reiter '%0' wurde hinzugef|fffd|gt."
        EN = "Sheet '%0' was added."
    
    Case "Add.MsgBox.DeleteAllDemoHeader"
        DA = "Advarsel!"
        DE = "Warnung!"
        EN = "Warning!"
    
    Case "Add.MsgBox.DeleteAllDemoWarning"
        DA = "Alle Demoark i denne fil slettes. Er du sikker?"
        DE = "Alle Demo-Reiter  in dieser Datei werden gel|fffd|scht. Sind Sie sicher?"
        EN = "All DEMO sheets in this file will be deleted. Are you sure?"
    
    Case "Add.MsgBox.DemoDeletedHeader"
        DA = "Demo ark slettet"
        DE = "Demo-Reiter  wurden gel|fffd|scht"
        EN = "Demo sheets were deleted"
    
    Case "Add.MsgBox.DemoDeletedStatus"
        DA = "Der blev slettet %0 demoark."
        DE = "Es wurden %0 Demo-Reiter  gel|fffd|scht."
        EN = "%0 demo sheets were deleted."
    
    
    
    
    Case "UserInterruptet"
        DA = "Afbrudt af bruger."
        DE = "Unterbrochen durch Benutzer"
        EN = "User has interrupted."
        
    Case "Input_Error"                 'Till|fffd|g valideringstekst
        DA = "Fejl i indtastning"
        DE = "Eingabefehler"
        EN = "Input error"
    
    Case "RateUnit_not_legal"       'Till|fffd|g valideringstekst
        DA = "Rate enheden m|fffd| kun indeholde dropdownv|fffd|rdierne: PCT, UNIT, VOL, Interval-x, OnReq, NotAvail, Included eller Unknown."
        DE = "Die Rateneinheit, darf nur die Dropdown-Werte enthalten: PCT, UNIT, VOL, Interval-x, OnReq, NotAvail, Included oder Unknown."
        EN = "The rate unit can only contain: PCT, UNIT, VOL, Interval-x, OnReq, NotAvail, Included or Unknown."
        
        
    'Not found handling
    Case Else
        DA = InputString
        DE = InputString
        EN = InputString
    End Select
    
    'Select the correct language string
    If UserLanguage = 0 Then
        Call GetOfficeLanguage
    End If

    Select Case UserLanguage
    Case OfficeIsDA
        Txt = DA
    Case OfficeIsDE
        Txt = DE
    Case OfficeIsEN
        Txt = EN
    Case Else
        Txt = EN
    End Select
End Function



Public Function cTxt(InputString As String) As String
    'Used in the Calc engine

    Dim DA As String
    Dim DE As String
    Dim EN As String
    
    Select Case InputString
    
    Case "FreightCalcColumnName"
        DA = "Fragtpris"
        DE = "Frachtpreis"
        EN = "Freight price"
    
    Case "NormalCalcColumnName"
        DA = "Normalpris"
        DE = "Normalpreis"
        EN = "Standard price"
    
    Case "NormalCalcDetailsColumnName"
        DA = "Normalpris info"
        DE = "Normalpreisinfo"
        EN = "Standard price info"
    
    Case "AdvantageCalcColumnName"
        DA = "Fordelspris"
        DE = "Vorteilspreis"
        EN = "Advantage price"
    
    Case "AdvantageCalcDetailsColumnName"
        DA = "Fordelspris info"
        DE = "Vorteilspreisinfo"
        EN = "Advantage price info"
    
    Case "DisadvantageCalcColumnName"
        DA = "Ulempepris"
        DE = "Nachteilspreis"
        EN = "Disadvantage price"
    
    Case "DisadvantageCalcDetailsColumnName"
        DA = "Ulempepris info"
        DE = "Nachteilspreisinfo"
        EN = "Disadvantage price info"
    
    Case "CalcModeColumnName"
        DA = "Beregnings-" & vbNewLine & "metode"
        DE = "Berechnungs-" & vbNewLine & "methode"
        EN = "Calculation" & vbNewLine & "method"
    
    Case "SelectedPriceColumnName"
        DA = "Tilbudspris"
        DE = "Tarifpreis"
        EN = "Offer price"
    
    Case "PriceDiffInUnitsColumnName"
        DA = "Pris-" & vbNewLine & "difference"
        DE = "Preis-" & vbNewLine & "differenz"
        EN = "Price" & vbNewLine & "difference"
    
    Case "PriceDiffInPercentColumnName"
        DA = "Procent-" & vbNewLine & "difference"
        DE = "Prozent-" & vbNewLine & "differenz"
        EN = "Percent" & vbNewLine & "difference"
    
    Case "ChargeableAmountColumnName"
        DA = "Fragtpligtig " & vbNewLine & "m|fffd|ngde"
        DE = "Frachtpflichtige " & vbNewLine & "Menge"
        EN = "Chargeable" & vbNewLine & "amount"
    
    Case "PriceCalc.FreigthInfoHeadline"
        DA = "Fragtprisberegning:"
        DE = "Frachtpreisberechnung:"
        EN = "Freight price calculation:"
    
    Case "PriceCalc.NormalInfoHeadline"
        DA = "Normal beregning:"
        DE = "Normalberechnung:"
        EN = "Standard calculation:"
        
    Case "PriceCalc.AdvantageInfoHeadline"
        DA = "Fordelsberegning:"
        DE = "Vorteilsberechnung:"
        EN = "Advantage calculation:"
    
    Case "PriceCalc.DisadvantageInfoHeadline"
        DA = "Ulempeberegning:"
        DE = "Nachteilsberechnung:"
        EN = "Disadvantage calculation:"
    
    Case "PriceCalc.MinimumUsed"
        DA = "Mindsteprisen er anvendt = %0 %1"
        DE = "Mindestpreis wird angewandt = %0 %1"
        EN = "Minimum price is used = %0 %1"
    
    Case "PriceCalc.FTLPriceUsed"
        DA = "FTL prisen er anvendt = %0 %1"
        DE = "FTL Preis wird angewandt = %0 %1"
        EN = "FTL price is used = %0 %1"
        
    Case "PriceCalc.AdvantageNotPossible"
        DA = "Fordelsberegning ikke muligt, da sidste prisinterval er n|fffd|et."
        DE = "Vorteilsberechnung nicht m|fffd|glich, letztes Preisintervall wurde erreicht."
        EN = "Advantage calculation not possible, last price interval has been reached."
    
    Case "PriceCalc.UnitPrice"
        DA = "Enhedspris: %0 x %1 = %2"
        DE = "Einheitspreis: %0 x %1 = %2"
        EN = "Unit price: %0 x %1 = %2"
    
    Case "PriceCalc.IntervalPrice"
        DA = "Sendingspris= %0"
        DE = "Sendungspreis= %0"
        EN = "Shipment price= %0"
        
    Case "PriceCalc.FollowingPrice"
        DA = "Efterf|fffd|lgende per '%0':"
        DE = "Nachfolgend pro '%0':"
        EN = "Following per '%0':"
        
    Case "PriceCalc.RoundingPrice"
        DA = "M|fffd|ngde oprundet til %0'ere: "
        DE = "Menge aufgerundet auf %0er Stelle: "
        EN = "Amount rounded up to %0's: "
    
    Case "PriceCalc.AmountRounded"
        DA = "M|fffd|ngde oprundet fra %0 til %1"
        DE = "Menge aufgerundet von %0 auf %1"
        EN = "Amount rounded up from %0 to %1"

    Case "PriceCalc.PricePer"
        DA = "Pris pr. %0: "
        DE = "Preis pro %0: "
        EN = "Price per %0: "
    
    Case "PriceCalc.PricePerCalc"
        DA = "Enhedspris: %0 / %1 >> %2 x %3 = %4"
        DE = "Einheitspreis: %0 / %1 >> %2 x %3 = %4"
        EN = "Unit price: %0 / %1 >> %2 x %3 = %4"
    
    Case "PriceCalc.Source"
        DA = "Priskilde: "
        DE = "Preisquelle: "
        EN = "Price source: "
        
    Case "PriceCalc.SourceCleanSheetCell"
        DA = "'%0'!%1%2"
        DE = "'%0'!%1%2"
        EN = "'%0'!%1%2"
    
    Case "PriceCalc.SourceCleanCell"
        DA = "%0%1"
        DE = "%0%1"
        EN = "%0%1"
        
    Case "CalcMode.FTL"             'Calc Mode
        DA = "FTL pris"
        DE = "FTL Preis"
        EN = "FTL price"
    
    Case "CalcMode.Minimum"
        DA = "Mindstepris"
        DE = "Mindestpreis"
        EN = "Minimum price"
    
    Case "CalcMode.Normal"
        DA = "Normal"
        DE = "Normal"
        EN = "Standard"
    
    Case "CalcMode.Advantage"
        DA = "Fordel"
        DE = "Vorteil"
        EN = "Advantage"
    
    Case "CalcMode.Disadvantage"
        DA = "Ulempe"
        DE = "Nachteil"
        EN = "Disadvantage"
        
    Case "CalcMode.NotPossible"
        DA = "Ingen beregning"
        DE = "Keine Berechnung"
        EN = "No calculation"

    Case "Info.NormalPriceIs"
        DA = "Normalprisen er %0"
        DE = "Normalpreis ist %0"
        EN = "Standard price is %0"

    Case "Info.AdvantagePriceIs"
        DA = "Fordelsprisen er %0"
        DE = "Vorteilspreis ist %0"
        EN = "Advantage price is %0"
    
    Case "Info.AdvantageNotAvailable"
        DA = "Fordelsberegning ikke mulig."
        DE = "Vorteilsberechnung nicht m|fffd|glich."
        EN = "Advantage calculation not possible."
    
    Case "Info.DisadvantageNotAvailable"
        DA = "Ulempeberegning ikke mulig."
        DE = "Nachteilsberechnung nicht m|fffd|glich."
        EN = "Disadvantage calculation not possible."
    
    Case "Info.DisadvantagePriceIs"
        DA = "Ulempeprisen er %0"
        DE = "Nachteilspreis ist %0"
        EN = "Disdvantage price is %0"
        
    Case "Selected.NormalCalcUsed"
        DA = "Normalberegningsprisen er anvendt = %0"
        DE = "Normalberechnungspreis wird angewandt = %0"
        EN = "Standard calculation price is used = %0"
    
    Case "Selected.AdvantageCalcUsed"
        DA = "Fordelsberegningsprisen er anvendt = %0"
        DE = "Vorteilsberechnungspreis wird angewandt = %0"
        EN = "Advantage calculation price is used = %0"
    
    Case "Selected.DisadvantageCalcUsed"
        DA = "Ulempeberegningsprisen er anvendt = %0"
        DE = "Nachteilsberechnungspreis wird angewandt = %0"
        EN = "Disadvantage calculation price is used = %0"
        
    Case "Info.Forwarder"
        DA = "Spedit|fffd|r: "
        DE = "Spediteur: "
        EN = "Forwarder: "
    
    Case "Info.Sheetname"
        DA = "Arknavn: "
        DE = "Reitername: "
        EN = "Sheet name: "
        
    Case "Info.Description"
        DA = "Tilbudsbetegnelse: "
        DE = "Angebotsbezeichnung: "
        EN = "Offer type: "
    
    Case "Info.TimeStamp"
        DA = "Beregnet den "
        DE = "Berechnet am "
        EN = "Calculation time: "

    'Converter messages:
    Case "Offer.Units.Are"
        DA = "Tilbudsenheden er %0."
        DE = "Angebotseinheit ist %0."
        EN = "Offer unit is %0."
    
    Case "Invoice.Units.Are"
        DA = "Sendingsark enhed er %0."
        DE = "Einheit im Sendungsreiters ist %0."
        EN = "Invoice sheet unit is %0."
    
    Case "Quantity.Converted"
        DA = "M|fffd|ngde omregnet fra %0 %1 til %2 %3"
        DE = "Menge konvertiert von %0 %1 zu %2 %3"
        EN = "Quantity converted from %0 %1 to %2 %3"
    
    Case "Convertion.Not.Needed"
        DA = "Omregning ikke n|fffd|dvendig."
        DE = "Konvertierung nicht n|fffd|tig."
        EN = "Convertion not needed."
    
    Case "Freight.Amount.Is"
        DA = "Fragtm|fffd|ngde er %0 %1."
        DE = "Frachtmenge ist %0 %1."
        EN = "Freight quantity/volume is %0 %1."
    
    Case "Effective.Amount.Is"
        DA = "Effektiv %0 m|fffd|ngde er angivet til %1 %0."
        DE = "Effektive %0 Menge ist angegeben mit %1 %0."
        EN = "Effective %0 quantity/volume is stated as %1 %0."
    
    Case "Chargeable.Amount.Is"
        DA = "Fragtpligtig m|fffd|ngde er angivet til %1 %0."
        DE = "Frachtpflichtige Menge ist angegeben mit %1 %0."
        EN = "Chargeable amount is stated as %1 %0."
    
    Case "Chargeable.Amount.For.Calculation.Is"
        DA = "Fragtpligtig m|fffd|ngde er %0 %1."
        DE = "Frachtpflichtige Menge ist %0 %1."
        EN = "Chargeable amount is %0 %1."
    
    Case "Freight.Amount.For.Calculation.Is"
        DA = "Fragtm|fffd|ngde er %0 %1."
        DE = "Frachtmenge ist %0 %1."
        EN = "Freight amount is %0 %1."
        
    Case "Convert.x"
        DA = "%0 omregning: %1 %0 x %2 = %3 %4"
        DE = "%0 Umrechnung: %1 %0 x %2 = %3 %4"
        EN = "%0 convertion: %1 %0 x %2 = %3 %4"
    
    Case "Convert./"
        DA = "%0 omregning: %1 %0 / %2 = %3 %4"
        DE = "%0 Umrechnung: %1 %0 / %2 = %3 %4"
        EN = "%0 convertion: %1 %0 / %2 = %3 %4"
        
    Case "Convert.x/"
        DA = "%0 omregning: %1 %0 x %2 / %3 = %4 %5"
        DE = "%0 Umrechnung: %1 %0 x %2 / %3 = %4 %5"
        EN = "%0 convertion: %1 %0 x %2 / %3 = %4 %5"
    
    
    Case "No.Freight.Inputs.Found"
        DA = "Fejl: Ingen fragtm|fffd|ngder fundet."
        DE = "Fehler: Keine Frachtmengen gefunden."
        EN = "Error: No freight quantities found."
    
    Case "Not.possible.to.find.a.chargeable.amount"
        DA = "Fejl: Ikke muligt at finde en fragtpligtig m|fffd|ngde."
        DE = "Fehler: Nicht m|fffd|glich, eine frachtpflichtige Menge zu finden."
        EN = "Error: Not possible to find a chargeable amount."
    
    Case "No.Convertion.Factors.Available"
        DA = "Fejl: Fragtpligtig m|fffd|ngde kan ikke beregnes uden omregningsfaktorer."
        DE = "Fehler: Eine frachtpflichtige Menge kann nicht ohne Umrechnungsfaktoren berechnet werden."
        EN = "Error: A chargeable amount cannot be calculated without conversion factors."
    
    Case "Conv.Not.Possible.Pieces"
        DA = "Fejl: Omregning ikke muligt: Fragtenhederne (%0) kan ikke omregnes til styk."
        DE = "Fehler: Umrechnung nicht m|fffd|glich: Frachteinheit (%0) kann nicht in St|fffd|ck umgerechnet werden."
        EN = "Error: Convertion not possible: Freight units (%0) cannot be converted to pieces."
    
    Case "Conv.Not.Possible.1.Needed"
        DA = "Fejl: Omregning fra %0 til %1 ikke muligt: %0 faktor mangler."
        DE = "Fehler: Umrechnung von %0 zu %1 nicht m|fffd|glich: %0 Umrechnungsfaktor fehlt."
        EN = "Error: Convertion from %0 to %1 not possible: %0 no convertion factor found."
    
    Case "Conv.Not.Possible.2.Needed"
        DA = "Fejl: Omregning fra %0 til %1 ikke muligt: B|fffd|de LDM og M3 faktor skal bruges."
        DE = "Fehler: Umrechnung von %0 zu %1 nicht m|fffd|glich: LDM- und M3-Umrechnungsfaktoren m|fffd|ssen vorhanden sein."
        EN = "Error: Convertion from %0 to %1 not possible: Both LDM and M3 convertion factors are needed."
    
    Case "Cell_is_Red_because"
        DA = "Cellen er r|fffd|d da spedit|fffd|rens fragtpligtige m|fffd|ngde er st|fffd|rre end den beregnede m|fffd|ngde."
        DE = "Die Zelle ist rot, weil die frachtpflichtige Menge des Spediteurs gr|fffd||fffd|er als die berechnete Menge ist."
        EN = "The cell is red because the forwarder's chargeable amount is greater than the calculated amount."
    
    Case "Cell_is_Green_because"
        DA = "Cellen er gr|fffd|n da spedit|fffd|rens fragtpligtige m|fffd|ngde er mindre end den beregnede m|fffd|ngde."
        DE = "Die Zelle ist gr|fffd|n, weil die frachtpflichtige Menge des Spediteurs kleiner als die berechnete Menge ist."
        EN = "The cell is green because the forwarder's chargeable amount is smaller than the calculated amount."
    
'    Case "Conv.To.KG.Not.Possible.LDM.Needed"
'        da = "Omregning fra LDM til KG ikke muligt: LDM faktor mangler."
'        de = "Umrechnung von LDM zu kg nicht m|fffd|glich: LDM-Umrechnungsfaktor fehlt."
'        en = "Convertion from LDM to KG not possible: no LDM convertion factor found."
'
'    Case "Conv.To.KG.Not.Possible.M3.Needed"
'        da = "Omregning fra M3 til KG ikke muligt: M3 faktor mangler."
'        de = "Umrechnung zu kg nicht m|fffd|glich: M3-Umrechnungsfaktor fehlt."
'        en = "Convertion to KG not possible: no M3 convertion factor found."
'
'    Case "Conv.To.M3.Not.Possible.M3.and.LDM.Needed"
'        da = "Omregning til M3 ikke muligt: B|fffd|de LDM og M3 faktor skal bruges."
'        de = "Umrechnung zu M3 nicht m|fffd|glich: LDM- und M3-Umrechnungsfaktoren m|fffd|ssen vorhanden sein."
'        en = "Convertion to M3 not possible: Both LDM and M3 convertion factors are needed."
'
'    Case "Conv.To.M3.Not.Possible.M3.Needed"
'        da = "Omregning til M3 ikke muligt: M3 faktor mangler."
'        de = "Umrechnung zu M3 nicht m|fffd|glich: M3-Umrechnungsfaktor fehlt."
'        en = "Convertion to M3 not possible: no M3 convertion factor found."
'
'    Case "Conv.To.LDM.Not.Possible.M3.and.LDM.Needed"
'        da = "Omregning til LDM ikke muligt: B|fffd|de LDM og M3 faktor skal bruges."
'        de = "Umrechnung zu LDM nicht m|fffd|glich: LDM- und M3-Umrechnungsfaktoren m|fffd|ssen beide vorhanden sein."
'        en = "Convertion to LDM not possible: Both LDM and M3 convertion factors are needed."
'
'    Case "Conv.To.LDM.Not.Possible.LDM.Needed"
'        da = "Omregning til LDM ikke muligt: LDM faktor mangler."
'        de = "Umrechnung zu LDM nicht m|fffd|glich: LDM-Umrechnungsfaktor fehlt."
'        en = "Convertion to LDM not possible: LDM convertion factor is needed."
    
    Case "Unit.NA"
        DA = "Ikke angivet"
        DE = "Nicht angegeben"
        EN = "Not available"
    
    Case "Unit.KG"
        DA = "KG"
        DE = "kg"
        EN = "KG"
    
    Case "Unit.M3"
        DA = "M3"
        DE = "M3"
        EN = "M3"
    
    Case "Unit.LDM"
        DA = "LDM"
        DE = "LDM"
        EN = "LDM"
    
    Case "Unit.EA"
        DA = "Styk"
        DE = "St|fffd|ck"
        EN = "Unit(s)"
    
        
    Case "Error.InvoiceFreightQuantityNotANumber"
        DA = "Fejl: Fragtm|fffd|ngde er ikke et tal ('%0') i r|fffd|kke %1 i Sendingsdataarket."
        DE = "Fehler: Frachtmenge ist keine Zahl ('%0') in Zeile %1 des Sendungsdatenreiters."
        EN = "Error: Freight quantity is not a number ('%0') in row %1 in the shipment data sheet."

    Case "Error.InvoiceFreightPriceNotANumber"
        DA = "Fejl: Fragtpris er ikke et tal ('%0') i r|fffd|kke %1 i Sendingsdataarket."
        DE = "Fehler: Frachtpreis ist keine Zahl ('%0') in Zeile %1 des Sendungsdatenreiters."
        EN = "Error: Freight price is not a number ('%0') in row %1 in the shipment data sheet."
    
    Case "Error.InvoiceFreightPriceNullorBlank"
        DA = "Fejl: Fragtpris er 0,00 eller blank i celle %0."
        DE = "Fehler: Frachtpreis ist 0,00 oder leer in Zelle %0."
        EN = "Error: Freight price is 0.00 or blank in Cell %0."

    Case "Error.InvoiceFreightPriceNegative"
        DA = "Fejl: Fragtpris er negativ i celle %0."
        DE = "Fehler: Frachtpreis ist negativ in Zelle %0."
        EN = "Error: Freight price is negative in cell %0."

    Case "Error.InvoiceFromToIsBlank"
        DA = "Fejl: Afsender og Modtager er blanke/har fejl i celle %0."
        DE = "Fehler: Absender und Empf|fffd|nger haben keinen Eintrag oder Fehler in Zelle %0."
        EN = "Error: Shipper and Consignee are blank/have error in cell %0."

    Case "Error.InvoiceFromIsBlank"
        DA = "Fejl: Afsender er blank/har fejl i celle %0."
        DE = "Fehler: Absender hat keinen Eintrag oder Fehler in Zelle %0."
        EN = "Error: Shipper is blank/has error in cell %0."
    
    Case "Error.InvoiceToIsBlank"
        DA = "Fejl: Modtager er blank/har fejl i celle %0."
        DE = "Fehler: Empf|fffd|nger hat keinen Eintrag oder Fehler in Zelle %0."
        EN = "Error: Consignee is blank/has error in cell%0."

    Case "Error.FromToCombinationNotFound"
        DA = "Fejl: Kombination af Afsender/Modtager ikke fundet p|fffd| tilbudsark: '%0' + '%1'."
        DE = "Fehler: Kombination von Absender/Empf|fffd|nger im Angebotsreiter nicht gefunden: '%0' + '%1'."
        EN = "Error: Combination of shipper/consignee not found in offer sheet(s): '%0' + '%1'."
    
    Case "FromToCombinationNotFoundPriceSetTo0"
        DA = "Kombination af Afsender/Modtager ikke fundet. Pris sat til 0,00"
        DE = "Kombination von Absender/Empf|fffd|nger nicht gefunden: Preis gesetzt auf 0,00"
        EN = "Combination of shipper/consignee not found. Price set to 0.00"
    
    Case "Error.AmountToBig"
        DA = "Fejl: Fragtm|fffd|ngden er er st|fffd|rre end det st|fffd|rste prisinterval i tilbuddet."
        DE = "Fehler: Der Frachtbetrag ist h|fffd|her als das gr|fffd||fffd|te Preisintervall im Angebot."
        EN = "Error: The freight amount is greater than the largest price interval in the offer."
    
    Case "Error.NoPriceFound"       '06-03-2019: Tjekkes sprogligt
        DA = "Fejl: Ingen pris i tilbuddet"
        DE = "Fehler: Kein Preis im Angebot"
        EN = "Error: No price in the offer."

    'Used in ReportRunTimeError:
    
    Case "Error.In.Calculation.Type"
        DA = "Fejl i r|fffd|kken med 'Afregning':"
        DE = "Fehler in der Zeile 'Abrechnung':"
        EN = "Error in the 'calculation' row:"
        
    Case "Error.In.Unit.Type"
        DA = "Fejl i r|fffd|kken med 'Enhed':"
        DE = "Fehler in der Zeile 'Einheit':"
        EN = "Error in the 'Unit' row:"
        
    Case "Error.In.Interval"
        DA = "Fejl i r|fffd|kken med 'Intervaller':"
        DE = "Fehler in der Zeile 'Intervalle':"
        EN = "Error in the 'interval' row:"

    Case "Error.In.Price"
        DA = "Fejl i Prisangivelsen:"
        DE = "Fehler in der Preisangabe:"
        EN = "Error in the price entries:"
        
    Case "Error.In.PriceRow"
        DA = "Fejl i Prisangivelse: En eller flere priser er blanke eller indeholder ikke tal i r|fffd|kken %0 p|fffd| arket '%1'."
        DE = "Fehler bei der Preisangabe: Eine oder mehrere Zellen sind leer oder enthalten keine Zahlen in der Reihe %0 auf dem Reiter '%1'."
        EN = "Error in the price entries: one or more cells are blank or do not contain any numbers, in row %0 on sheet '%1'."
        
    Case "Error.In.ConversionFactor"
        DA = "Fejl i Omregningsfaktor:"
        DE = "Fehler beim Umrechnungsfaktor:"
        EN = "Error in the conversion factor:"
        
    Case "Error.Cell.Is.Empty"
        DA = "Cellen er blank."
        DE = "Zelle ist leer."
        EN = "Cell is empty."

    Case "Error.Cell.Is.Not.Numeric"
        DA = "Cellen indeholder ikke et tal."
        DE = "Die Zelle enth|fffd|lt keine Zahl."
        EN = "The cell does not contain a number."
        

    Case "ErrLocation"
        DA = "Fejl p|fffd| arket '%0' i celle '%1%2':"
        DE = "Fehler im Reiter '%0' in Zelle '%1%2':"
        EN = "Error in sheet '%0' in cell '%1%2':"
    
    
    'Not found handling
    Case Else
        DA = InputString
        DE = InputString
        EN = InputString
    End Select
    
    'Select the correct language string
    If UserLanguage = 0 Then
        Call GetOfficeLanguage
    End If

    Select Case UserLanguage
    Case OfficeIsDA
        cTxt = DA
    Case OfficeIsDE
        cTxt = DE
    Case OfficeIsEN
        cTxt = EN
    Case Else
        cTxt = EN
    End Select
End Function



Public Function sTxt(InputString As String) As String
    'Used in the Surcharge engine

    Dim DA As String
    Dim DE As String
    Dim EN As String
    
    Select Case InputString
    
    Case "ONREQ"
        DA = "%0: Sp|fffd|rg efter prisen"
        DE = "%0: Preis auf Anfrage"
        EN = "%0: Price on request"

    Case "NOTAVAIL"
        DA = "%0: Pris ikke tilg|fffd|ngelig"
        DE = "%0: Preis nicht verf|fffd|gbar"
        EN = "%0: Price not available"

    Case "INCLUDED"
        DA = "%0: Inklusiv"
        DE = "%0: Inklusive"
        EN = "%0: Included"

    Case "UNKNOWN"
        DA = "%0: Ukendt"
        DE = "%0: Unbekannt"
        EN = "%0: Unknown"
    
    Case "Error.IDNumberNotValid"
        DA = "Fejl: '%0' till|fffd|gget: ID-nummer er tom eller indeholder ikke et tal. Ark: '%1', Celle: %2, Indhold: '%3'."
        DE = "Fehler: '%0' Zuschlag: Die ID-Nummer des Zuschlags ist leer oder enth|fffd|lt keine Zahl. Reiter: '%1', Zelle: %2, Inhalt: '%3'."
        EN = "Error: '%0' surcharges: The ID-number is empty or does not contain a number. Sheet: '%1', Cell: %2, Content: '%3'."
    
    Case "Error.SourceIDNotValid"
        DA = "Fejl: '%0' till|fffd|gget: Beregningskilden indeholder ikke et tal. Ark: '%1', Celle: %2, Indhold: '%3'."
        DE = "Fehler: '%0' Zuschlag:  Die Berechnungsquelle enth|fffd|lt keine Zahl. Reiter: '%1', Zelle: %2, Inhalt: '%3'."
        EN = "Error: '%0' surcharge: The calculation source does not contain a number. Sheet: '%1', Cell: %2, Content: '%3'."
    
    Case "Error.RateNotValid"
        DA = "Fejl: '%0' till|fffd|gget: Rate indeholder ikke et tal. Ark: '%1', Celle: %2, Indhold: '%3'."
        DE = "Fehler: '%0' Zuschlag: Rate enth|fffd|lt keine Zahl. Reiter: '%1', Zelle: %2, Inhalt: '%3'."
        EN = "Error: '%0' surcharge: Rate does not contain a number. Sheet: '%1', Cell: %2, Content: '%3'."
    
    Case "Error.RateUnitNotValid"
        DA = "Fejl: '%0' till|fffd|ggets rateenhed indeholder ikke en gyldig v|fffd|rdi. Ark: '%1', Celle: %2, Indhold: '%3'."
        DE = "Fehler: '%0' Zuschlag: Rateneinheit enth|fffd|lt keinen g|fffd|ltigen Wert. Reiter: '%1', Zelle: %2, Inhalt: '%3'."
        EN = "Error: '%0' surcharge: The input value for 'rate unit' is invalid. Sheet: '%1', Cell: %2, Content: '%3'."
    
    Case "Error.MinimumNotValid"
        DA = "Fejl: '%0' till|fffd|ggets Minimum indeholder ikke et tal. Ark: '%1', Celle: %2, Indhold: '%3'."
        DE = "Fehler: '%0' Zuschlag: Minimum enth|fffd|lt keine Zahl. Reiter: '%1', Zelle: %2, Inhalt: '%3'."
        EN = "Error: '%0' surcharge: Minimum does not contain a number. Sheet: '%1', Cell: %2, Content: '%3'."
   
    Case "Error.MaximumNotValid"
        DA = "Fejl: '%0' till|fffd|ggets Maximum indeholder ikke et tal. Ark: '%1', Celle: %2, Indhold: '%3'."
        DE = "Fehler: '%0' Zuschlag: Maximum enth|fffd|lt keine Zahl. Reiter: '%1', Zelle: %2, Inhalt: '%3'."
        EN = "Error: '%0' surcharge: Maximum does not contain a number. Sheet: '%1', Cell: %2, Content: '%3'."
    
    Case "Error.IntervalNotFound"
        DA = "Fejl: '%0' till|fffd|g: Interval ark med '%1' ikke fundet."
        DE = "Fehler: '%0' Zuschlag: Intervallreiter '%1' nicht gefunden."
        EN = "Error: '%0' surcharge: Interval sheet '%1' not found."
    
    Case "Result.FixedPriceUsed"
        DA = "%0: Fast pris = %1"
        DE = "%0: Fester Preis = %1"
        EN = "%0: Fixed price = %1"
    
    Case "Result.PercentageUsed"
        DA = "%0: Procentsats: %1% af %2 = %3"
        DE = "%0: Prozentsatz: %1% von %2 = %3"
        EN = "%0: Percentage rate %1% of %2 = %3"
    
    Case "Result.UnitsUsed"
        DA = "%0: Enhedspris: %1 x %2 = %3"
        DE = "%0: Einheitspreis: %1 x %2 = %3"
        EN = "%0: Unit price: %1 x %2 = %3"
    
    Case "Result.VolUnitsUsed"
        DA = "%0: Fragtpligtig enhedspris: %1 x %2 = %3"
        DE = "%0: Frachtpflichtige Einheitspreis: %1 x %2 = %3"
        EN = "%0: Chargeable unit price: %1 x %2 = %3"
        
    Case "Result.MinimumUsed"
        DA = "%0: Mindsteprisen valgt = "
        DE = "%0: Mindestpreis gew|fffd|hlt = "
        EN = "%0: Minimum price selected = "
    
    Case "Result.MaximumUsedUsed"
        DA = "%0: Maksimum prisen valgt = "
        DE = "%0: Maximalpreis gew|fffd|hlt = "
        EN = "%0: Maximum price selected = "
    
    Case "Result.AllIn"
        DA = "Samlet pris = %0"
        DE = "Gesamtpreis = %0"
        EN = "Total price = %0"
    
    'Not found handling
    Case Else
        DA = InputString
        DE = InputString
        EN = InputString
    End Select
    
    'Select the correct language string
    If UserLanguage = 0 Then
        Call GetOfficeLanguage
    End If

    Select Case UserLanguage
    Case OfficeIsDA
        sTxt = DA
    Case OfficeIsDE
        sTxt = DE
    Case OfficeIsEN
        sTxt = EN
    Case Else
        sTxt = EN
    End Select
End Function

Public Function tTxt(InputString As String) As String
    'Used in the Test reporting + Input error reporting

    Dim DA As String
    Dim DE As String
    Dim EN As String
    
    Select Case InputString
    
    Case "ErrLocation"
        DA = "Fejl i celle %1%2:"
        DE = "Fehler in Zelle %1%2:"
        EN = "Error in cell %1%2:"
    
    Case "ErrBlank"
        DA = "Cellen er blank."
        DE = "Zelle ist leer."
        EN = "Cell is empty."

    Case "ErrNotNumeric"
        DA = "Cellen indeholder ikke et tal."
        DE = "Die Zelle enth|fffd|lt keine Zahl."
        EN = "The Cell does not contain a number."
    
    Case "RowBlank"
        DA = "R|fffd|kken indeholder ingen 'effektive' v|fffd|rdier."
        DE = "Die Zeile enth|fffd|lt keine 'effektivem' Werte."
        EN = "Row does not contain any 'effective' values."
    
    Case "ShipperNotFound"
        DA = "Afsenderen '%0' i celle '%1' findes ikke p|fffd| tilbudsarket."
        DE = "Absender '%0' in Zelle '%1' ist im Angebotsreiter nicht gefunden worden."
        EN = "Shipper '%0' in the cell '%1' was not found in the offer sheet(s)."

    Case "ConsigneeNotFound"
        DA = "Modtager '%0' i celle '%1' findes ikke p|fffd| tilbudsarket."
        DE = "Empf|fffd|nger '%0' in die Zelle '%1' ist im Angebotsreiter nicht gefunden worden."
        EN = "Consignee '%0' in the cell '%1' was not found in the offer sheet(s)."

    Case "ErrorFound"
        DA = "Fejl fundet."
        DE = "Fehler gefunden."
        EN = "Error found."
    
    Case "NoDataRowsFound"
        DA = "Ingen datar|fffd|kker fundet."
        DE = "Keine Datenreihen gefunden."
        EN = "No data rows found."
    
    Case "NoAmountDropDownGiven"   'Must be checked
        DA = "Ingen m|fffd|ngde dropdown angivet."
        DE = "Keine Menge Dropdown angegeben."
        EN = "No Dropdown with Amounts defined."

    Case "WarningsFound"
        DA = "Antal advarsler fundet: %0"
        DE = "Anzahl gefundener Warnungen: %0"
        EN = "Number of warnings found: %0"
    
    Case "ErrorsFound"
        DA = "Antal fejl fundet: %0"
        DE = "Anzahl gefundener Fehler: %0"
        EN = "Number of errors found: %0"
        
    Case "Summery"
        DA = "Sammenfatning for arket '%0'"
        DE = "Zusammenfassung des Reiters '%0'"
        EN = "Summary of the sheet '&0'"
        
    Case "DoneSheet"
        DA = "Har testet arket '%0'."
        DE = "Der Reiter '%0' wurde getestet."
        EN = "Testing of sheet '%0' completed."
     
    Case "DoingSheet"
        DA = "Tester arket '%0'."
        DE = "Der Reiter '%0' wird getestet."
        EN = "Testing of sheet '%0' started."
     
    Case "RowsTested"
        DA = "Har testet fra r|fffd|kke %0 til r|fffd|kke %1 (%2 sek.)."
        DE = "Getestete Zeilen: %0 bis %1 (%2 Sek.)."
        EN = "Tested rows %0 trough %1 (%2 sec.)."
    
    Case "ColumnsTested"
        DA = "Testede kolonner:"
        DE = "Getestete Spalten:"
        EN = "Columns tested:"
        
    Case "ButtonHelp"
        DA = "Klik OK for at fors|fffd|tte eller klik Annuller for at afslutte testen."
        DE = "Klicken Sie OK um fortzufahren oder Abbrechen um den Test zu stoppen."
        EN = "Click OK to continue or click Cancel to stop testing."
        
    Case "Testing_startet_at"
        DA = "Test startet klokken %0."
        DE = "Test gestartet um %0."
        EN = "Testing started at %0."
        
    Case "Testing_ended_at"
        DA = "Test stoppet klokken %0."
        DE = "Test gestoppt um %0."
        EN = "Testing stopped at %0."
        
    Case "Forwarder_Offername_is"
        DA = "Spedit|fffd|r-/tilbudsnavn er '%0'."
        DE = "Der Spediteur-/Angebotsname ist '%0'."
        EN = "Forwarder/offer name is '%0'."
        
    Case "Found_this_offer_in_sheet"
        DA = "Tilbudet er fundet i arket: '%0'."
        DE = "Das Angebot wurde im Reiter '%0' gefunden."
        EN = "Found this offer in sheet '%0'."
        
    Case "Testing_sheet"
        DA = "Tester arket '%0':"
        DE = "Teste den Reiter '%0':"
        EN = "Test sheet '%0':"
        
    Case "No_Offer_Description_found"
        DA = "Tilbudsbetegnelse ikke angivet i celle '%0'."
        DE = "Kein Angebotsbezeichnung in Zelle '%0' angegeben."
        EN = "No offer type found in cell '%0'."
        
    Case "The_Cell_contains_an_Excel_Error"
        DA = "Cellen '%0' indeholder Excel fejlen '%1'."
        DE = "Die Zelle '%0' enth|fffd|lt den Excel-Fehler '%1'."
        EN = "The cell '%0' contains the Excel error '%1'."
        
    Case "Date_Is_invalid"
        DA = "Datocellen %0 indeholder en fejl."
        DE = "Die Datumzelle %0 enth|fffd|lt einen Fehler."
        EN = "Date cell %0 contains an error."
        
    Case "Standard_Currency_Empty"
        DA = "Standard valuta m|fffd| ikke v|fffd|re tom i celle %0."
        DE = "Die Standardw|fffd|hrung darf in Zelle %0 nicht leer sein."
        EN = "Standard currency must be defined in cell %0."
               
    Case "CalcMethod_illegal_left_number"
        DA = "Beregningsmetode i celle %0 m|fffd| kun indeholde 1:x, 2:x, 3:x eller 4:x."
        DE = "Die Berechnungsmethode in Zelle %0, darf nur 1:x, 2:x, 3:x oder 4:x enthalten."
        EN = "The calculation method in cell %0, may only contain 1:x, 2:x, 3:x or 4:x."
               
    Case "Advantage_number_is_not_a_number"
        DA = "Fordelsberegningstal i celle %0 indeholder ikke tal."
        DE = "Vorteilsberechnungszahl in Zelle %0 enth|fffd|lt keine Zahl."
        EN = "Advantage number does not contain a number in cell %0."
               
    Case "Datarows_rows_found"
        DA = "Har fundet datar|fffd|kker fra r|fffd|kke %0 til r|fffd|kke %1."
        DE = "Datenzeilen von Zeile %0 bis Zeile %1 gefunden."
        EN = "Data rows found from row %0 to row %1."
               
    Case "No_Datarows_rows_found"
        DA = "Ingen Afsender/modtagerr|fffd|kker fundet."
        DE = "Keine Versender-/Empf|fffd|ngerzeilen gefunden."
        EN = "No Shipper / Consignee data rows found."
    
    Case "Shipper_Empty"
        DA = "Afsendercelle er tom i celle %0."
        DE = "Die Versenderzelle in Zelle %0 ist leer."
        EN = "Shipper cell is empty in cell %0."
               
    Case "Consignee_Empty"
        DA = "Modtagercelle er tom i celle %0."
        DE = "Die Empf|fffd|ngerzelle in Zelle %0 ist leer."
        EN = "Consignee cell is empty in cell %0."
               
    Case "Min_Price_Empty"
        DA = "Minimumsprisen er ikke angivet i celle %0."
        DE = "Der Mindestpreis ist in Zelle %0 nicht angegeben."
        EN = "The Minimum price is not given in cell %0."
    
    Case "Price_Empty"
        DA = "Fragtprisen er ikke angivet i celle %0."
        DE = "Der Frachtpreis ist in Zelle %0 nicht angegeben."
        EN = "The freight price is not given in cell %0."
               
    Case "The_pricecell_contains_not_number"
        DA = "Prisen indeholder ikke et tal i celle %0."
        DE = "Der Preis in Zelle %0 enth|fffd|lt keine Zahl."
        EN = "The price in cell %0 does not contain a number."
               
    Case "The_pricecell_contains_number_with_comma"
        DA = "Prisen indeholder et tal med et komma i stedet for et punktum i celle %0."
        DE = "Der Preis in Zelle %0 beinhaltet eine Zahl mit einem Komma anstelle eines Punktes."
        EN = "The price in cell %0 contain a number with a comma instead of a decimal point."
               
    Case "The_pricecell_contains_number_with_point"
        DA = "Prisen indeholder et tal med et punktum i stedet for et komma i celle %0."
        DE = "Der Preis in Zelle %0 beinhaltet eine Zahl mit einem Punkt anstelle eines Kommas."
        EN = "The price in cell %0 contains a number with a decimal point instead of a comma."
    
    Case "Calculation_method_missing"
        DA = "Afregningsenhed mangler i celle %0."
        DE = "Die Abrechnungseinheit fehlt in Zelle %0."
        EN = "Calculation method is missing in cell %0."
               
    Case "Unit_definition_missing"
        DA = "Enhedsangivelse mangler i celle %0."
        DE = "Die Einheit fehlt in Zelle %0."
        EN = "Unit definition is missing in cell %0."
               
    Case "Interval_does_not_contain_a_number"
        DA = "Prisintervalgr|fffd|nse indeholder ikke et tal i celle %0."
        DE = "Die Preisintervallsgrenze in Zelle %0 enth|fffd|lt keine Zahl."
        EN = "Price interval does not contain a number in cell %0."
               
    Case "Vol_Convertion_factor_contains_text"
        DA = "Volume Omregningsfaktor indeholder ikke et tal i celle %0."
        DE = "Der Volumenumrechnungsfaktor in Zelle %0 enth|fffd|hlt keine Zahl."
        EN = "Volume convertion factor in cell %0 does not contain a number."
               
    Case "LDM_Convertion_factor_contains_text"
        DA = "Lademeter Omregningsfaktor indeholder ikke et tal i celle %0."
        DE = "Der Lademeterumrechnungsfaktor in Zelle %0 enth|fffd|hlt keine Zahl."
        EN = "Loading meter convertion factor in cell %0 does not contain a number."
    
    Case "No_Normal_Surcharges_Found"
        DA = "Ingen normale till|fffd|g fundet."
        DE = "Keine normalen Zuschl|fffd|ge gefunden."
        EN = "No normal surcharges were found."
               
    Case "SC_Calculation_Source_not_number"
        DA = "Beregningskilde indeholder ikke et tal i cell %0."
        DE = "Die Berechnungsquelle in Zelle %0 enth|fffd|lt keine Zahl."
        EN = "Calculation source does not contain a number in cell %0."
               
    Case "SC_Rate_not_number"
        DA = "Till|fffd|ggets Rate indeholder ikke et tal i celle %0."
        DE = "Die Zuschlagsrate in Zelle %0 enth|fffd|lt keine Zahl."
        EN = "Surcharge rate in cell %0 does not contain a number."
               
    Case "SC_Min_not_number"
        DA = "Till|fffd|ggets Minimum indeholder ikke et tal i celle %0."
        DE = "Der Minimumwert in Zelle %0, enth|fffd|lt keine Zahl."
        EN = "The minimum value does not contain a number in cell %0."
               
    Case "SC_Max_not_number"
        DA = "Till|fffd|ggets Maximum indeholder ikke et tal i celle %0."
        DE = "Der Maximalwert in Zelle %0, enth|fffd|lt keine Zahl."
        EN = "The maximum value does not contain a number in cell %0."
               
    Case "SC_RateUnit_not_legal"
        DA = "Rate enheden i celle %0 m|fffd| kun indeholde dropdownv|fffd|rdierne: PCT, UNIT, VOL, Interval-x, OnReq, NotAvail, Included eller Unknown."
        DE = "Die Rateneinheit in Zelle %0, darf nur die Dropdown-Werte enthalten: PCT, UNIT, VOL, Interval-x, OnReq, NotAvail, Included oder Unknown."
        EN = "The rate unit in cell %0 can only contain: PCT, UNIT, VOL, Interval-x, OnReq, NotAvail, Included or Unknown."
               
    'Message types
    Case "TypeName_1"
        DA = "Bem|fffd|rkning"
        DE = "Bemerkung"
        EN = "Comment"
        
    Case "TypeName_2"
        DA = "Advarsel"
        DE = "Warnung"
        EN = "Warning"
        
    Case "TypeName_3"
        DA = "Fejl"
        DE = "Fehler"
        EN = "Error"
        
    Case "TypeName_1_()"
        DA = "Bem|fffd|rkninger"
        DE = "Bemerkungen"
        EN = "Comments"
    
    Case "TypeName_2_()"
        DA = "Advarsler (%0)"
        DE = "Warnungen (%0)"
        EN = "Warnings (%0)"
        
    Case "TypeName_3_()"
        DA = "Fejl (%0)"
        DE = "Fehler (%0)"
        EN = "Errors (%0)"
        
    'Areas
    Case "AreaName_0"
        DA = "Afsender"
        DE = "Versender"
        EN = "Shipper"
        
    Case "AreaName_1"
        DA = "Modtager"
        DE = "Empf|fffd|nger"
        EN = "Consignee"
        
    Case "AreaName_2"
        DA = "Afregning"
        DE = "Abrechnung"
        EN = "Calculation method"
        
    Case "AreaName_3"
        DA = "Prisenhed"
        DE = "Preiseinheit"
        EN = "price unit"
        
    Case "AreaName_4"
        DA = "Pris Intervalle"
        DE = "Preisintervalle"
        EN = "Price intervals"
        
    Case "AreaName_5"
        DA = "Fragtpris"
        DE = "Frachtpreis"
        EN = "Freight price"
        
    Case "AreaName_6"
        DA = "Till|fffd|g"
        DE = "Zuschlag"
        EN = "Surcharge"
        
    Case "AreaName_7"
        DA = "Omregningsfaktorer"
        DE = "Umrechnungsfaktor"
        EN = "Conversion factor"
    
    Case "AreaName_8"
        DA = "Valuta"
        DE = "W|fffd|hrung"
        EN = "Currency"
        
    Case "AreaName_9"   'Miscellaneous
        DA = "-"
        DE = "-"
        EN = "-"
        
    Case "AreaName_10"  'Info
        DA = "Info"
        DE = "Info"
        EN = "Info"
        
    Case "AreaName_11"  'General
        DA = "Generelt"
        DE = "Allgemein"
        EN = "General"
        
    Case "AreaName_12"
        DA = "Spedit|fffd|r"
        DE = "Spediteur"
        EN = "Forwarder"
        
    Case "AreaName_13"
        DA = "Tilbudsbetegnelse"
        DE = "Angebotsbezeichnung"
        EN = "Offer type"
        
    Case "AreaName_14"
        DA = "Generelt"
        DE = "Allgemein"
        EN = "General"
        
    Case "AreaName_15"
        DA = "Afsender"
        DE = "Versender"
        EN = "Shipper"
        
    Case "AreaName_16"
        DA = "Modtager"
        DE = "Empf|fffd|nger"
        EN = "Consignee"
        
    Case "AreaName_17"
        DA = "Effektiv M3"
        DE = "Effektive M3"
        EN = "Effective M3"
        
    Case "AreaName_18"
        DA = "Effektiv LDM"
        DE = "Effektive LDM"
        EN = "Effective LDM"
        
    Case "AreaName_19"
        DA = "Effektiv KG"
        DE = "Effektive KG"
        EN = "Effective KG"
        
    Case "AreaName_20"
        DA = "Fragtpligtig m|fffd|ngde"
        DE = "Frachtpflichtiger Menge"
        EN = "Chargeable amount"
        
    Case "AreaName_21"
        DA = "M|fffd|ngde"
        DE = "Menge"
        EN = "Amount"
        
    Case "AreaName_22"
        DA = "Pris"
        DE = "Preis"
        EN = "Price"
    
    Case "AreaName_23"
        DA = "Afsender/Modtager kombination"
        DE = "Versender/Empf|fffd|nger Kombination"
        EN = "Shipper/Consignee combination"
        
    'OfferTestForm: label/button etc
    
    Case "OfferTest.Form_Name"
        DA = "Resultat af Tilbudstest"
        DE = "Ergebnis des Angebotstests"
        EN = "Result of the offer test"
    
    Case "OfferTest.HeaderLabel"
        DA = "Resultat af Tilbudstest."
        DE = "Ergebnis des Angebotstests."
        EN = "Result of the offer test."
    
    Case "OfferTest_WarningCount"
        DA = "%0 advarsler"
        DE = "%0 Warnung(en)"
        EN = "%0 warning(s)"
    
    Case "OfferTest_ErrorCount"
        DA = "%0 fejl"
        DE = "%0 Fehler"
        EN = "%0 error(s)"
    
    Case "OfferTest.TypeViewFrame"
        DA = "Filter:"
        DE = "Filter:"
        EN = "Filter:"
    
    Case "OfferTest.TypeLabel"
        DA = "Type"
        DE = "Typ"
        EN = "Type"
    
    Case "OfferTest.AreaLabel"
        DA = "Omr|fffd|de"
        DE = "Bereich"
        EN = "Area"
    
    Case "OfferTest.ReferenceLabel"
        DA = "Reference"
        DE = "Referenz"
        EN = "Reference"
    
    Case "OfferTest.MessageLabel"
        DA = "Meddelelse"
        DE = "Nachricht"
        EN = "Message"
    
    Case "OfferTest.CopyToClipboardButton"
        DA = "Kopier til udklipsholder"
        DE = "In die Zwischenablage kopieren"
        EN = "Copy to clipboard"
    
    Case "RemarkInfoLabel"
        DA = "Viser bem|fffd|rkninger fra testen (ikke vigtig info)."
        DE = "Zeigt Bemerkungen zum Test (unwichtige Info)."
        EN = "Shows comments on the test (non-important info)."
    
    Case "WarningInfoLabel"
        DA = "Advarsler kan have indvirking p|fffd| beregningsresultatet."
        DE = "Warnungen k|fffd|nnen Einfluss auf das Berechnungsergebnis haben."
        EN = "Warnings can have an impact on the calculation result."
    
    Case "ErrorInfoLabel"
        DA = "Fejl forhindrer at der kan gennemf|fffd|res beregninger."
        DE = "Fehler verhindert das Ausf|fffd|hren von Berechnungen."
        EN = "Error prevents the execution of calculations."
    
    Case "RefInfoLabel"
        DA = "Klik p|fffd| en r|fffd|kke for at markere arket/cellen."
        DE = "Eine Zeile klicken um den Reiter/Zelle zu markieren."
        EN = "Click on a row to select the sheet/cell."
    
    Case "ClipHelpLabel"
        DA = "Kopier eventuelt fejlmeldingerne (de viste r|fffd|kker) over i word eller et tomt regneark for at f|fffd| et bedre overblik" & vbNewLine & "(lettere at bearbejde p|fffd| denne m|fffd|de, hvis der er mange fejl i tilbuddet fra spedit|fffd|ren)."
        DE = "Kopieren Sie gegebenenfalls die Fehlermeldungen (die angezeigten Zeilen) in Word oder eine leere Tabelle f|fffd|r eine bessere |fffd|bersicht" & vbNewLine & "(einfacher zu verarbeiten, wenn das Angebot des Spediteurs viele Fehler enth|fffd|lt)."
        EN = "If necessary, copy the error messages (the rows shown) to word or a blank spreadsheet for a better overview" & vbNewLine & "(easier to process if there are many errors in the offer from the freight forwarder)."
        
    Case "Max_number_reached"
        DA = "Det maksimale antal meddelser er n|fffd|et. Testen afbrudt."
        DE = "Die maximale Anzahl von Nachrichten wurde erreicht. Der Test wurde unterbrochen."
        EN = "The maximum number of messages has been reached. The test was canceled."
        
    'Not found handling
    Case Else
        DA = InputString
        DE = InputString
        EN = InputString
    End Select
    
    'Select the correct language string
    If UserLanguage = 0 Then
        Call GetOfficeLanguage
    End If

    Select Case UserLanguage
    Case OfficeIsDA
        tTxt = DA
    Case OfficeIsDE
        tTxt = DE
    Case OfficeIsEN
        tTxt = EN
    Case Else
        tTxt = EN
    End Select

End Function


Public Sub GetOfficeLanguage()
    ' Gets the user language of the Office system and sets the global variable UserLanguage to one of the constants OfficeIsEN, OfficeIsDA or OfficeIsDE
    Select Case Application.International(xlCountryCode)
    Case 1:     'English
        UserLanguage = OfficeIsEN
    Case 45:    'Danish
        UserLanguage = OfficeIsDA
    Case 49:    'German
        UserLanguage = OfficeIsDE
    Case Else:  'English as the default language
        UserLanguage = OfficeIsEN
    End Select
    
    'Force Language?
    If ForceLanguage > 0 Then
        UserLanguage = ForceLanguage
    End If

End Sub


Attribute VB_Name = "Misc"
Option Explicit
Option Private Module

Public Const MiscModuleVersion As String = "23-06-2019"

'---
'--- Clipboard function START
'---
'--- Usage: call ClipBoard_SetData(MyString As String)
'---

#If Mac Then
    ' do nothing
#Else
    #If VBA7 Then
        Declare PtrSafe Function GlobalUnlock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
        Declare PtrSafe Function GlobalLock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
        Declare PtrSafe Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, _
                                                             ByVal dwBytes As LongPtr) As LongPtr

        Declare PtrSafe Function CloseClipboard Lib "User32" () As Long
        Declare PtrSafe Function OpenClipboard Lib "User32" (ByVal hwnd As LongPtr) As LongPtr
        Declare PtrSafe Function EmptyClipboard Lib "User32" () As Long

        Declare PtrSafe Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, _
                                                         ByVal lpString2 As Any) As LongPtr

        Declare PtrSafe Function SetClipboardData Lib "User32" (ByVal wFormat _
                                                                As Long, ByVal hMem As LongPtr) As LongPtr
    #Else
        Declare Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long
        Declare Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long
        Declare Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, _
                                                     ByVal dwBytes As Long) As Long

        Declare Function CloseClipboard Lib "User32" () As Long
        Declare Function OpenClipboard Lib "User32" (ByVal hwnd As Long) As Long
        Declare Function EmptyClipboard Lib "User32" () As Long

        Declare Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, _
                                                 ByVal lpString2 As Any) As Long

        Declare Function SetClipboardData Lib "User32" (ByVal wFormat _
                                                        As Long, ByVal hMem As Long) As Long
    #End If
#End If
Public Const GHND = &H42
Public Const CF_TEXT = 1
Public Const MAXSIZE = 4096

Sub ClipBoard_SetData(MyString As String)
    #If Mac Then
        With New MSForms.DataObject
            .SetText MyString
            .PutInClipboard
        End With
    #Else
        #If VBA7 Then
            Dim hGlobalMemory As LongPtr
            Dim hClipMemory   As LongPtr
            Dim lpGlobalMemory    As LongPtr
        #Else
            Dim hGlobalMemory As Long
            Dim hClipMemory   As Long
            Dim lpGlobalMemory    As Long
        #End If

        Dim x                 As Long

        ' Allocate moveable global memory.
       '-------------------------------------------
       hGlobalMemory = GlobalAlloc(GHND, Len(MyString) + 1)

        ' Lock the block to get a far pointer
       ' to this memory.
       lpGlobalMemory = GlobalLock(hGlobalMemory)

        ' Copy the string to this global memory.
       lpGlobalMemory = lstrcpy(lpGlobalMemory, MyString)

        ' Unlock the memory.
       If GlobalUnlock(hGlobalMemory) <> 0 Then
            MsgBox "Could not unlock memory location. Copy aborted."
            GoTo PrepareToClose
        End If

        ' Open the Clipboard to copy data to.
       If OpenClipboard(0&) = 0 Then
            MsgBox "Could not open the Clipboard. Copy aborted."
            Exit Sub
        End If

        ' Clear the Clipboard.
       x = EmptyClipboard()

        ' Copy the data to the Clipboard.
       hClipMemory = SetClipboardData(CF_TEXT, hGlobalMemory)

PrepareToClose:

        If CloseClipboard() = 0 Then
            MsgBox "Could not close Clipboard."
        End If
    #End If

End Sub

'---
'--- Clipboard function END
'---


Function ConvertToLongInteger(ByVal stValue As String) As Long
    On Error GoTo ConversionFailureHandler
    ConvertToLongInteger = CLng(stValue)  'TRY to convert to an Integer value
    Exit Function           'If we reach this point, then we succeeded so exit

ConversionFailureHandler:
    'IF we've reached this point, then we did not succeed in conversion
    'If the error is type-mismatch, clear the error and return numeric 0 from the function
    'Otherwise, disable the error handler, and re-run the code to allow the system to
    'display the error
    If Err.number = 13 Then 'error # 13 is Type mismatch
         Err.Clear
         ConvertToLongInteger = 0
         Exit Function
    Else
         On Error GoTo 0
         Resume
    End If
End Function

Function GetLeftNumber(v As String) As Long
    'Gets the left number in a string delimitet with a colon ':'
    'If empty string or no number found: 0 is returned
    Dim result As Long
    Dim temp() As String
    
    If v = "" Then
        result = 0
    Else
        temp = Split(v, ":", , vbTextCompare)
        If IsNumeric(temp(0)) Then
            result = CLng(temp(0))
        Else
            result = 0
        End If
    End If
    GetLeftNumber = result
End Function

'Sub TestAddToList()
'
'    Dim list(10) As String
'    Dim item As String
'    list(0) = "EUR"
'    item = "DKK"
'    Call AddToList(list, item)
'    Call AddToList(list, item)
'    item = "USD"
'    Call AddToList(list, item)
'    item = "DKK"
'    Call AddToList(list, item)
'End Sub

'Returns the Colomn letter(s) from the colomn number (1 > "A", 2 > "B")
Function ColLetter(lngCol As Long) As String
    Dim vArr
    vArr = Split(Cells(1, lngCol).Address(True, False), "$")
    ColLetter = vArr(0)
End Function

Sub BreakExternalReferences()
    Dim arLinks As Variant
    Dim i As Long
 
    arLinks = ActiveWorkbook.LinkSources(Type:=xlLinkTypeExcelLinks)
 
    If IsArray(arLinks) Then
        For i = LBound(arLinks) To UBound(arLinks)
            ActiveWorkbook.BreakLink Name:=arLinks(i), Type:=xlLinkTypeExcelLinks
        Next i
    End If
End Sub
 
Private Function DeleteExternalNames() As Long
    Dim objDefinedName As Object
    
    For Each objDefinedName In ActiveWorkbook.Names
        If InStr(objDefinedName.RefersTo, "[") > 0 Then
            objDefinedName.Delete
        End If
    Next objDefinedName
End Function

Sub OnFr8ToolImport()
'Dummy stub
End Sub

Public Function CleanUpFile(ByRef RemovedStyles As Long, ByRef NotRemovedStyles As Long, ByRef RemovedReferences As Long, ByRef RemovesExternalNames As Long)
'--------------------------------------------------------------------------------------------------------------
'--- Beskrivelse af sub/funktion:
'---    This will remove all Custom Styles in this file.
'---
'--- Versionshistorik:
'---    16-03-2013: Kopieret fra nettet: http://www.mrexcel.com/forum/excel-questions/508248-excel-2007-remove-all-custom-styles.html
'--------------------------------------------------------------------------------------------------------------
    
'    Dim RemovedStyles As Long
'    Dim NotRemovedStyles As Long
    Dim styT As Style
    Dim intRet As Integer
    Dim vTemp As Variant
    
'    Application.ScreenUpdating = False
     
    RemovedStyles = 0
    NotRemovedStyles = 0
    For Each styT In ActiveWorkbook.Styles
        If Not styT.BuiltIn Then
            'intRet = MsgBox("Delete style '" & styT.Name & "'?", vbYesNo)
            'If intRet = vbYes Then styT.Delete
            On Error Resume Next
            styT.Delete
            If Err.number = 0 Then
                RemovedStyles = RemovedStyles + 1
            Else
                NotRemovedStyles = NotRemovedStyles + 1
            End If
        End If
    Next styT
    Debug.Print "RemovedStyles= " & RemovedStyles
    Debug.Print "NotRemovedStyles= " & NotRemovedStyles
    
     
    'Fjern evt. manglende navne referencer (kilde: http://www.datawright.com.au/excel_resources/excel_range_names_vba.htm)
    Dim nm As Name ', RemovedReferences As Long
    RemovedReferences = 0
    For Each nm In ActiveWorkbook.Names
      If InStr(1, nm.RefersTo, "#REF!") > 0 Then
        'List the name before deleting
        Debug.Print nm.Name & ": deleted"
        RemovedReferences = RemovedReferences + 1
        nm.Delete
      End If
    Next nm
    Debug.Print "RemovedReferences= " & RemovedReferences

    
    Dim objDefinedName As Object
    RemovesExternalNames = 0
    For Each objDefinedName In ActiveWorkbook.Names
        If InStr(objDefinedName.RefersTo, "[") > 0 Then
            objDefinedName.Delete
            RemovesExternalNames = RemovesExternalNames + 1
        End If
    Next objDefinedName


'    Application.ScreenUpdating = True
'
'    If NotRemovedStyles > 0 Then
'        vtemp = MsgBox("CleanUp process complete." & Chr(10) & _
'                RemovedStyles & " custom styles removed." & Chr(10) & _
'                NotRemovedStyles & " styles could not be removed." & Chr(10) & _
'                RemovedReferences & " invalid references removed.", _
'                vbOKOnly + vbInformation, "Custom Styles CleanUp process")
'    Else
'        vtemp = MsgBox("CleanUp process complete." & Chr(10) & _
'                RemovedStyles & " custom styles removed." & Chr(10) & _
'                RemovedReferences & " invalid references removed.", _
'                vbOKOnly + vbInformation, "Custom Styles CleanUp process")
'    End If
End Function

Public Sub ShrinkSheet()
'--------------------------------------------------------------------------------------------------------------
'--- This will try to reduce the size of the Excel file by forcing Excel to recalculate the used range for each sheet.
'---
'--- History
'---    30-09-2012: Kopieret fra nettet (http://www.vbaexpress.com/kb/getarticle.php?kb_id=83)
'---    21-08-2018: Added handle of protected / hidden sheets
'---    21-08-2018: Removes check for Shapes (Sheets with many comments(=shapes)takes looong time)
'---    24-01-2019: Moved some code to RibbonSupport module, where it is called from.
'--------------------------------------------------------------------------------------------------------------
     
    Dim j               As Long
    Dim k               As Long
    Dim LastRow         As Long
    Dim LastCol         As Long
    Dim ColFormula      As Range
    Dim RowFormula      As Range
    Dim ColValue        As Range
    Dim RowValue        As Range
    Dim Shp             As Shape
    Dim ws              As Worksheet
    Dim vTemp           As Variant
'    Dim Calcmode        As Variant
'
'    Calcmode = Application.Calculation
'    Application.Calculation = xlCalculationManual
'    Application.ScreenUpdating = False
'    Application.DisplayAlerts = False
'    Application.EnableCancelKey = xlInterrupt
     
    On Error Resume Next
     
    For Each ws In Worksheets
        If ws.ProtectContents = True Then
            'Debug.Print Format(Now, "hh:mm:ss") & " Skipping protected sheet " & ws.Name
        ElseIf Not (ws.Visible = xlSheetVisible) Then
            'Debug.Print Format(Now, "hh:mm:ss") & " Skipping hidden sheet " & ws.Name
        Else
            Debug.Print Format(Now, "hh:mm:ss") & " Shrinking sheet " & ws.Name
            With ws
                 'Find the last used cell with a formula and value
                 'Search by Columns and Rows
                 
                On Error Resume Next
                Set ColFormula = .Cells.Find(What:="*", after:=Range("A1"), LookIn:=xlFormulas, _
                LookAt:=xlPart, SearchOrder:=xlByColumns, SearchDirection:=xlPrevious)
                Set ColValue = .Cells.Find(What:="*", after:=Range("A1"), LookIn:=xlValues, _
                LookAt:=xlPart, SearchOrder:=xlByColumns, SearchDirection:=xlPrevious)
                Set RowFormula = .Cells.Find(What:="*", after:=Range("A1"), LookIn:=xlFormulas, _
                LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious)
                Set RowValue = .Cells.Find(What:="*", after:=Range("A1"), LookIn:=xlValues, _
                LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious)
                On Error GoTo 0
                 
                 'Determine the last column
                If ColFormula Is Nothing Then
                    LastCol = 0
                Else
                    LastCol = ColFormula.Column
                End If
                If Not ColValue Is Nothing Then
                    LastCol = Application.WorksheetFunction.max(LastCol, ColValue.Column)
                End If
                
                 'Determine the last row
                If RowFormula Is Nothing Then
                    LastRow = 0
                Else
                    LastRow = RowFormula.Row
                End If
                If Not RowValue Is Nothing Then
                    LastRow = Application.WorksheetFunction.max(LastRow, RowValue.Row)
                End If
                 
                 'Determine if any shapes are beyond the last row and last column
'                Debug.Print Format(Now, "hh:mm:ss") & " Finding Shapes.."
'                For Each Shp In .Shapes
'                Debug.Print Format(Now, "hh:mm:ss") & " -Shape name: " & Shp.Name
'                    j = 0
'                    k = 0
'                    On Error Resume Next
'                    j = Shp.TopLeftCell.Row
'                    k = Shp.TopLeftCell.Column
'                    On Error GoTo 0
'                    If j > 0 And k > 0 Then
'                        Do Until .Cells(j, k).Top > Shp.Top + Shp.Height
'                            j = j + 1
'                        Loop
'                        If j > LastRow Then
'                            LastRow = j
'                        End If
'                        Do Until .Cells(j, k).Left > Shp.Left + Shp.Width
'                            k = k + 1
'                        Loop
'                        If k > LastCol Then
'                            LastCol = k
'                        End If
'                    End If
'                Next
                'Debug.Print Format(Now, "hh:mm:ss") & " Deleting obselete COL space.."
                If LastCol = 16384 Then LastCol = LastCol - 1
                If LastRow = 1048576 Then LastRow = LastRow - 1
                
                .Range(Cells(1, LastCol + 1).Address & ":XFD1048576").Delete
                'Debug.Print Format(Now, "hh:mm:ss") & " Deleting obselete ROW space.."
                .Range(Cells(LastRow + 1, 1).Address & ":XFD1048576").Delete
            End With
        End If
    Next
     
'    Application.ScreenUpdating = True
'    Application.DisplayAlerts = True
'    Application.Calculation = Calcmode
'    vTemp = MsgBox(Format(Now, "hh:mm:ss") & " Shrinkprocess complete.", vbOKOnly + vbInformation, "Shrinkprocess complete")
     
End Sub

Sub CheckForTablesInFile()
    'Check if the file contains anny Tables and if so asks the user if they should be deleted
    'Create variables to hold the worksheet and the table
    ' 23-06-2019: Fix if open directly from outlook and start in protectet view
    Dim ws As Worksheet
    Dim tbl As ListObject
    Dim count As Long
    Dim Info As String
    Dim Ansver As Variant
    
    Info = "Found Tables in the file:" & vbNewLine & vbNewLine
    'Loop through eac worksheet
    For Each ws In ThisWorkbook.Worksheets
        'Loop through each table in worksheet
        For Each tbl In ws.ListObjects
            Info = Info & "On sheet '" & ws.Name & "' found table '" & tbl.Name & "'." & vbNewLine
            count = count + 1
        Next tbl
    Next ws
    
    If count > 0 Then
        Info = Info & vbNewLine & "Do you want to convert the tables back to normal range?"
        Ansver = MsgBox(Info, vbInformation + vbOKCancel, "Convert tables back to normal range?")
        If Ansver = vbOK Then
            For Each ws In ActiveWorkbook.Worksheets
                'Loop through each table in worksheet
                For Each tbl In ws.ListObjects
                    tbl.Unlist
                Next tbl
            Next ws
        End If
    End If

End Sub
Attribute VB_Name = "PostFreightSetupForm"
Attribute VB_Base = "0{4A82C92E-44F2-48B2-97AA-C03D4B8D656F}{1716BD57-AFDB-4EF1-9D0D-42571B17CECA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub ApplyButton_Click()
    'Apply settings
    InvoicePostSettings.Sheetname = PrePostSheetname
    InvoicePostSettings.headerRow = PrePostRow
    InvoicePostSettings.EffM3Column = AmountM3ColumnPostDropdown.ListIndex
    InvoicePostSettings.EffLDMColumn = AmountLDMColumnPostDropdown.ListIndex
    InvoicePostSettings.EffKGColumn = AmountKGColumnPostDropdown.ListIndex
    InvoicePostSettings.QuantityColumn = AmountColumnPostDropdown.ListIndex
    InvoicePostSettings.Units = UnitsPostDropdown.ListIndex + 1
    'Mark active: Use the pre/post settings
    InvoicePostSettingsmode = Active
    Me.Hide
End Sub

Private Sub UseMainSettingsButton_Click()
    'use Main settings
    InvoicePostSettings.Sheetname = InvoiceSettings.Sheetname
    InvoicePostSettings.headerRow = InvoiceSettings.headerRow
    InvoicePostSettings.EffM3Column = InvoiceSettings.EffM3Column
    InvoicePostSettings.EffLDMColumn = InvoiceSettings.EffLDMColumn
    InvoicePostSettings.EffKGColumn = InvoiceSettings.EffKGColumn
    InvoicePostSettings.QuantityColumn = InvoiceSettings.QuantityColumn
    InvoicePostSettings.Units = InvoiceSettings.Units
    
    AmountM3ColumnPostDropdown.Clear
    AmountLDMColumnPostDropdown.Clear
    AmountKGColumnPostDropdown.Clear
    AmountColumnPostDropdown.Clear
    
    'Mark That we use main settings
    InvoicePostSettingsmode = UseMain
    Me.Hide
End Sub

Private Sub UserForm_Activate()
    Call UserForm_Initialize
End Sub

Private Sub UserForm_Initialize()
    Dim ws As String
    Dim rw As Long
    ws = PrePostSheetname
    rw = PrePostRow
    Call InitFormLabels         'Update all labels
    Call FillColumnDropdowns(ws, rw)         'Fill the dropdowns if necesery
End Sub


Private Sub InitFormLabels()
    'Window
    Me.Caption = Txt("PostFreightSetupForm.PostWindow")
    
    Me.InvoicePostInfoLabel.Caption = Txt("PostFreightSetupForm.PostInfoLabel")
    Me.AmountEffM3Label.Caption = Txt("Invoice.AmountEffM3Label")   'same as main
    Me.AmountEffLDMLabel.Caption = Txt("Invoice.AmountEffLDMLabel") 'same as main
    Me.AmountEffKGLabel.Caption = Txt("Invoice.AmountEffKGLabel")   'same as main
    Me.AmountLabel.Caption = Txt("Invoice.AmountLabel")             'same as main
    Call FillFreightUnitDropdown
    
    'Buttons
    UseMainSettingsButton.Caption = Txt("PreFreightSetupForm.UseMainSettings")
    ApplyButton.Caption = Txt("PreFreightSetupForm.Apply")
    
End Sub

Sub FillColumnDropdowns(wsName As String, rw As Long)
    'Fill  column Amount dropdowns (m3 , ldm, ,,,)
    'using the given worksheetname and the given row
    Dim NumberOfColumns As Long
    Dim Col As Long
    Dim Name As String
    Dim SaveIndex(7) As Long
    
    If wsName = "" Or rw < 1 Then Exit Sub
    SaveIndex(0) = AmountM3ColumnPostDropdown.ListIndex
    SaveIndex(1) = AmountLDMColumnPostDropdown.ListIndex
    SaveIndex(2) = AmountKGColumnPostDropdown.ListIndex
    SaveIndex(3) = AmountColumnPostDropdown.ListIndex
    
    NumberOfColumns = Last(cLASTCOL, Worksheets(wsName).Rows)   'Get number of columns
    
    AmountM3ColumnPostDropdown.Clear
    AmountLDMColumnPostDropdown.Clear
    AmountKGColumnPostDropdown.Clear
    AmountColumnPostDropdown.Clear
    
    'The 4 Amount dropdown need a 'Not available' entry first
    Name = Txt("Invoice.AmountNotAvailable")
    AmountM3ColumnPostDropdown.AddItem Name
    AmountLDMColumnPostDropdown.AddItem Name
    AmountKGColumnPostDropdown.AddItem Name
    AmountColumnPostDropdown.AddItem Name
    
    For Col = 1 To NumberOfColumns
        Name = Left(Worksheets(wsName).Cells(rw, Col).Value2, 30)     'Get cell content
        Name = ColLetter(Col) & ": " & Replace(Name, Chr(10), " ")
        AmountM3ColumnPostDropdown.AddItem Name
        AmountLDMColumnPostDropdown.AddItem Name
        AmountKGColumnPostDropdown.AddItem Name
        AmountColumnPostDropdown.AddItem Name
    Next Col
    
    If InvoicePostSettings.Sheetname = wsName Then
        'Restore the indexes if the same sheet as the saved
        If AmountM3ColumnPostDropdown.ListCount > InvoicePostSettings.EffM3Column Then
            AmountM3ColumnPostDropdown.ListIndex = InvoicePostSettings.EffM3Column
        End If
        If AmountLDMColumnPostDropdown.ListCount > InvoicePostSettings.EffLDMColumn Then
            AmountLDMColumnPostDropdown.ListIndex = InvoicePostSettings.EffLDMColumn
        End If
        If AmountKGColumnPostDropdown.ListCount > InvoicePostSettings.EffKGColumn Then
            AmountKGColumnPostDropdown.ListIndex = InvoicePostSettings.EffKGColumn
        End If
    Else
        'Restore the indexes to the last state
        If AmountM3ColumnPostDropdown.ListCount > SaveIndex(0) Then
            AmountM3ColumnPostDropdown.ListIndex = SaveIndex(0)
        End If
        If AmountLDMColumnPostDropdown.ListCount > SaveIndex(1) Then
            AmountLDMColumnPostDropdown.ListIndex = SaveIndex(1)
        End If
        If AmountKGColumnPostDropdown.ListCount > SaveIndex(2) Then
            AmountKGColumnPostDropdown.ListIndex = SaveIndex(2)
        End If
        If AmountColumnPostDropdown.ListCount > SaveIndex(3) Then
            AmountColumnPostDropdown.ListIndex = SaveIndex(3)
        End If
    End If
    'Set defaults, if non is set: 'Not avail'
    If AmountM3ColumnPostDropdown.ListIndex = -1 Then
        AmountM3ColumnPostDropdown.ListIndex = 0
    End If
    If AmountLDMColumnPostDropdown.ListIndex = -1 Then
        AmountLDMColumnPostDropdown.ListIndex = 0
    End If
    If AmountKGColumnPostDropdown.ListIndex = -1 Then
        AmountKGColumnPostDropdown.ListIndex = 0
    End If
    If AmountColumnPostDropdown.ListIndex = -1 Then
        AmountColumnPostDropdown.ListIndex = 0
    End If

End Sub

Private Sub FillFreightUnitDropdown()
    Me.UnitsPostDropdown.Clear
    Me.UnitsPostDropdown.AddItem Txt("Invoice.FreightUnitKG")
    Me.UnitsPostDropdown.AddItem Txt("Invoice.FreightUnitM3")
    Me.UnitsPostDropdown.AddItem Txt("Invoice.FreightUnitLDM")
    Me.UnitsPostDropdown.AddItem Txt("Invoice.FreightUnitEA")
    Me.UnitsPostDropdown.ListIndex = 0
End Sub

Attribute VB_Name = "PreFreightSetupForm"
Attribute VB_Base = "0{D4051559-9427-4D5D-8A02-F9D63EADD007}{6093F653-BBDB-4224-AAA9-36F7311BAE91}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub ApplyButton_Click()
    'Apply settings
    InvoicePreSettings.Sheetname = PrePostSheetname
    InvoicePreSettings.headerRow = PrePostRow
    InvoicePreSettings.EffM3Column = AmountM3ColumnPreDropdown.ListIndex
    InvoicePreSettings.EffLDMColumn = AmountLDMColumnPreDropdown.ListIndex
    InvoicePreSettings.EffKGColumn = AmountKGColumnPreDropdown.ListIndex
    InvoicePreSettings.QuantityColumn = AmountColumnPreDropdown.ListIndex
    InvoicePreSettings.Units = UnitsPreDropdown.ListIndex + 1
    'Mark active: Use the pre/post settings
    InvoicePreSettingsmode = Active
    Me.Hide
End Sub

Private Sub UseMainSettingsButton_Click()
    'use Main settings
    InvoicePreSettings.Sheetname = InvoiceSettings.Sheetname
    InvoicePreSettings.headerRow = InvoiceSettings.headerRow
    InvoicePreSettings.EffM3Column = InvoiceSettings.EffM3Column
    InvoicePreSettings.EffLDMColumn = InvoiceSettings.EffLDMColumn
    InvoicePreSettings.EffKGColumn = InvoiceSettings.EffKGColumn
    InvoicePreSettings.QuantityColumn = InvoiceSettings.QuantityColumn
    InvoicePreSettings.Units = InvoiceSettings.Units
    
    AmountM3ColumnPreDropdown.Clear
    AmountLDMColumnPreDropdown.Clear
    AmountKGColumnPreDropdown.Clear
    AmountColumnPreDropdown.Clear
    
    'Mark That we use main settings
    InvoicePreSettingsmode = UseMain
    Me.Hide
End Sub

Private Sub UserForm_Activate()
    Call UserForm_Initialize
End Sub

Private Sub UserForm_Initialize()
    Dim ws As String
    Dim rw As Long
    ws = PrePostSheetname
    rw = PrePostRow
    Call InitFormLabels         'Update all labels
    Call FillColumnDropdowns(ws, rw)         'Fill the dropdowns if necesery
End Sub


Private Sub InitFormLabels()
    'Window
    Me.Caption = Txt("PreFreightSetupForm.PreWindow")
    
    Me.InvoicePreInfoLabel.Caption = Txt("PreFreightSetupForm.PreInfoLabel")
    Me.AmountEffM3Label.Caption = Txt("Invoice.AmountEffM3Label")   'same as main
    Me.AmountEffLDMLabel.Caption = Txt("Invoice.AmountEffLDMLabel") 'same as main
    Me.AmountEffKGLabel.Caption = Txt("Invoice.AmountEffKGLabel")   'same as main
    Me.AmountLabel.Caption = Txt("Invoice.AmountLabel")             'same as main
    Call FillFreightUnitDropdown
    
    'Buttons
    UseMainSettingsButton.Caption = Txt("PreFreightSetupForm.UseMainSettings")
    ApplyButton.Caption = Txt("PreFreightSetupForm.Apply")
    
End Sub

Sub FillColumnDropdowns(wsName As String, rw As Long)
    'Fill  column Amount dropdowns (m3 , ldm, ,,,)
    'using the given worksheetname and the given row
    Dim NumberOfColumns As Long
    Dim Col As Long
    Dim Name As String
    Dim SaveIndex(7) As Long
    
    If wsName = "" Or rw < 1 Then Exit Sub
    SaveIndex(0) = AmountM3ColumnPreDropdown.ListIndex
    SaveIndex(1) = AmountLDMColumnPreDropdown.ListIndex
    SaveIndex(2) = AmountKGColumnPreDropdown.ListIndex
    SaveIndex(3) = AmountColumnPreDropdown.ListIndex
    
    NumberOfColumns = Last(cLASTCOL, Worksheets(wsName).Rows)   'Get number of columns
    
    AmountM3ColumnPreDropdown.Clear
    AmountLDMColumnPreDropdown.Clear
    AmountKGColumnPreDropdown.Clear
    AmountColumnPreDropdown.Clear
    
    'The 4 Amount dropdown need a 'Not available' entry first
    Name = Txt("Invoice.AmountNotAvailable")
    AmountM3ColumnPreDropdown.AddItem Name
    AmountLDMColumnPreDropdown.AddItem Name
    AmountKGColumnPreDropdown.AddItem Name
    AmountColumnPreDropdown.AddItem Name
    
    For Col = 1 To NumberOfColumns
        Name = Left(Worksheets(wsName).Cells(rw, Col).Value2, 30)     'Get cell content
        Name = ColLetter(Col) & ": " & Replace(Name, Chr(10), " ")
        AmountM3ColumnPreDropdown.AddItem Name
        AmountLDMColumnPreDropdown.AddItem Name
        AmountKGColumnPreDropdown.AddItem Name
        AmountColumnPreDropdown.AddItem Name
    Next Col
    
    If InvoicePreSettings.Sheetname = wsName Then
        'Restore the indexes if the same sheet as the saved
        If AmountM3ColumnPreDropdown.ListCount > InvoicePreSettings.EffM3Column Then
            AmountM3ColumnPreDropdown.ListIndex = InvoicePreSettings.EffM3Column
        End If
        If AmountLDMColumnPreDropdown.ListCount > InvoicePreSettings.EffLDMColumn Then
            AmountLDMColumnPreDropdown.ListIndex = InvoicePreSettings.EffLDMColumn
        End If
        If AmountKGColumnPreDropdown.ListCount > InvoicePreSettings.EffKGColumn Then
            AmountKGColumnPreDropdown.ListIndex = InvoicePreSettings.EffKGColumn
        End If
    Else
        'Restore the indexes to the last state
        If AmountM3ColumnPreDropdown.ListCount > SaveIndex(0) Then
            AmountM3ColumnPreDropdown.ListIndex = SaveIndex(0)
        End If
        If AmountLDMColumnPreDropdown.ListCount > SaveIndex(1) Then
            AmountLDMColumnPreDropdown.ListIndex = SaveIndex(1)
        End If
        If AmountKGColumnPreDropdown.ListCount > SaveIndex(2) Then
            AmountKGColumnPreDropdown.ListIndex = SaveIndex(2)
        End If
        If AmountColumnPreDropdown.ListCount > SaveIndex(3) Then
            AmountColumnPreDropdown.ListIndex = SaveIndex(3)
        End If
    End If
    'Set defaults, if non is set: 'Not avail'
    If AmountM3ColumnPreDropdown.ListIndex = -1 Then
        AmountM3ColumnPreDropdown.ListIndex = 0
    End If
    If AmountLDMColumnPreDropdown.ListIndex = -1 Then
        AmountLDMColumnPreDropdown.ListIndex = 0
    End If
    If AmountKGColumnPreDropdown.ListIndex = -1 Then
        AmountKGColumnPreDropdown.ListIndex = 0
    End If
    If AmountColumnPreDropdown.ListIndex = -1 Then
        AmountColumnPreDropdown.ListIndex = 0
    End If

End Sub

Private Sub FillFreightUnitDropdown()
    Me.UnitsPreDropdown.Clear
    Me.UnitsPreDropdown.AddItem Txt("Invoice.FreightUnitKG")
    Me.UnitsPreDropdown.AddItem Txt("Invoice.FreightUnitM3")
    Me.UnitsPreDropdown.AddItem Txt("Invoice.FreightUnitLDM")
    Me.UnitsPreDropdown.AddItem Txt("Invoice.FreightUnitEA")
    Me.UnitsPreDropdown.ListIndex = 0
End Sub

Attribute VB_Name = "RibbonSupport"
Option Explicit
Option Private Module

Public Const RibbonModuleVersion As String = "12-02-2019"

Public Fr8Dialog As Fr8ControlForm
Public Fr8Ribbon As Office.IRibbonUI

Sub Refresh_Ribbon()
    On Error GoTo NoRibbon
    Fr8Ribbon.Invalidate    'Update Ribbon
NoRibbon:
    On Error GoTo 0
End Sub


'-------------------------------------------------------------
'--- Handle Setup of the RibbonX (labels etc)
'-------------------------------------------------------------

'NOTE: The common XML is edited via the "Custom Ribbon editor for Microsoft Office":
'The getLabel="getLabel" is used as callback to set the labels, using the id
'Example as OfferDataType 12-02-2019:
'    <customUI xmlns="http://schemas.microsoft.com/office/2006/01/customui" onLoad="onRibbonLoad">
'      <ribbon>
'          <tabs>
'            <tab id="Fr8BenchTab" getLabel="getLabel" getVisible="getVisible" >
'            <group id="LicensGroup" getLabel="getLabel" >
'                    <button id="btnCompanyName" getLabel="getLabel" size="normal" onAction="OnFr8BenchCompany"  />
'                    <button id="btnCompanyAdr" getLabel="getLabel" size="normal" onAction="OnFr8BenchCompany"  />
'                    <button id="btnCompanyCity" getLabel="getLabel" size="normal" onAction="OnFr8BenchCompany"  />
'                </group>
'                <group id="AboutGroup" getLabel="getLabel" >
'                    <button id="btnAbout" getLabel="getLabel" imageMso="RefreshStatus" size="large" onAction="OnFr8BenchAbout" />
'                </group>
'                <group idMso="GroupFont" >
'                </group>
'                <group id="GroupAlign" getLabel="getLabel">
'                    <box id="BoksAlign1" boxStyle="horizontal" >
'                        <toggleButton idMso="AlignTopExcel" size="normal" showLabel="false" />
'                        <toggleButton idMso="AlignMiddleExcel" size="normal" showLabel="false" />
'                        <toggleButton idMso="AlignBottomExcel" size="normal" showLabel="false" />
'                    </box>
'                    <box id="BoksAlign2" boxStyle="horizontal" >
'                        <toggleButton idMso="AlignLeft" size="normal" showLabel="false" />
'                        <toggleButton idMso="AlignCenter" size="normal" showLabel="false" />
'                        <toggleButton idMso="AlignRight" size="normal" showLabel="false" />
'                    </box>
'                    <box id="BoksAlign3" boxStyle="horizontal" >
'                        <toggleButton idMso="WrapText" size="normal" showLabel="false" />
'                        <splitButton idMso="MergeCenterMenu" size="normal" showLabel="false" />
'                    </box>
'                </group>
'                <group idMso="GroupNumber" >
'                </group>
'                <group id="GroupMisc" getLabel="getLabel">
'                    <control idMso="FormatPainter" size="large" />
'                    <toggleButton idMso="Filter" size="large" />
'                    <splitButton idMso="AutoSumMenu" size="large" />
'                </group>
'                <group id="Fr8Group" getLabel="getLabel">
'                    <button id="btnFAQ" getLabel="getLabel" getScreentip="getScreenTip" getSupertip="getSuperTip" image="faq" size="large" onAction="OnFr8BenchFAQ" />
'                    <button id="btnConvertToNumber" getLabel="getLabel" getScreentip="getScreenTip" getSupertip="getSuperTip" imageMso="ExportLotus" size="large" onAction="OnFr8BenchConvertToNumber" />
'                    <button id="btnCleanUp" getLabel="getLabel" getScreentip="getScreenTip" getSupertip="getSuperTip" imageMso="ReviewAcceptChangeAndMoveToNext" size="large" onAction="OnFr8BenchCleanUp" />
'                    <separator id="separatorFr8A" />
'                    <button id="btnAddSheet" getLabel="getLabel" imageMso="OutlineExpand" size="large" onAction="OnFr8BenchAddSheet" />
'                    <separator id="separatorFr8B" />
'                    <button id="btnExport" getLabel="getLabel" imageMso="FileSaveAsCurrentFileFormat" size="large" onAction="OnFr8BenchEksport" />
'                    <separator id="separatorFr8C" />
'                    <button id="btnCalc" getLabel="getLabel" imageMso="MoviePlay" size="large" onAction="OnFr8BenchSetup" />
'                </group>
'          </tab>
'        </tabs>
'      </ribbon>
'    </customUI>



'Callback for mso:customUI.onLoad. Is called when the UI Ribbon loads.
Sub onRibbonLoad(ribbon As IRibbonUI)
    Set Fr8Ribbon = ribbon
    'MsgBox "onRibbonLoad"
    'Fr8Ribbon.Invalidate
End Sub


Sub getLabel(control As IRibbonControl, ByRef returnedVal)
    'Common sub to set the labels in the UI Ribbon
    '2019-01-19 Initial
        
    If control.Id = "Fr8BenchTab" Then
        returnedVal = Txt("Ribbon.Tab.Setup")
    
    ElseIf control.Id = "LicensGroup" Then
        returnedVal = Txt("Ribbon.Group.Owner")
    
    ElseIf control.Id = "btnCompanyName" Then
        returnedVal = CompanyName
    
    ElseIf control.Id = "btnCompanyAdr" Then
        returnedVal = CompanyAdress
    
    ElseIf control.Id = "btnCompanyCity" Then
        returnedVal = CompanyCity
    
    ElseIf control.Id = "AboutGroup" Then
        returnedVal = Txt("Ribbon.Group.About")
    
    ElseIf control.Id = "btnAbout" Then
        returnedVal = Txt("Ribbon.Button.About")
    
    ElseIf control.Id = "GroupAlign" Then
        returnedVal = Txt("Ribbon.Group.Align")
    
    ElseIf control.Id = "GroupMisc" Then
        returnedVal = Txt("Ribbon.Group.Misc")
    
    ElseIf control.Id = "Fr8Group" Then
        returnedVal = Txt("Ribbon.Group.Fr8")
    
    ElseIf control.Id = "btnAddSheet" Then
        returnedVal = Txt("Ribbon.Button.AddSheet")
    
    ElseIf control.Id = "btnExport" Then
        returnedVal = Txt("Ribbon.Button.Export")
    
    ElseIf control.Id = "btnCalc" Then
        returnedVal = Txt("Ribbon.Button.Calc")
    
    ElseIf control.Id = "btnConvertToNumber" Then
        returnedVal = Txt("Ribbon.Button.ConvertToNumber")
    
    ElseIf control.Id = "btnCleanUp" Then
        returnedVal = Txt("Ribbon.Button.CleanUp")
    
    ElseIf control.Id = "btnFAQ" Then
        returnedVal = Txt("Ribbon.Button.FAQ")
    
    Else
        returnedVal = control.Id    'Default is the ID name, in case the code above is not handling the spcifict ID
    End If
    
    'Fr8Ribbon.Invalidate    'Update Ribbon
End Sub

Sub getScreenTip(control As IRibbonControl, ByRef returnedVal)
    'Common sub to set the ScreenTip in the UI Ribbon (Mouse over first Bold header line)
    '2019-01-23 Initial
        
    If control.Id = "btnConvertToNumber" Then
        returnedVal = Txt("Ribbon.ScreenTip.ConvertToNumber")
    
    ElseIf control.Id = "btnCleanUp" Then
        returnedVal = Txt("Ribbon.ScreenTip.CleanUp")
    
    ElseIf control.Id = "btnFAQ" Then
        returnedVal = Txt("Ribbon.ScreenTip.FAQ")
    
    Else
        returnedVal = ""    'Default is blank, in case the code above is not handling the spcifict ID
    End If
    
End Sub

Sub getSuperTip(control As IRibbonControl, ByRef returnedVal)
    'Common sub to set the SuperTip in the UI Ribbon (Mouse over: line(s) after the bold header line)
    '2019-01-23 Initial
        
    If control.Id = "btnConvertToNumber" Then
        returnedVal = Txt("Ribbon.SuperTip.ConvertToNumber")
    
    ElseIf control.Id = "btnCleanUp" Then
        returnedVal = Txt("Ribbon.SuperTip.CleanUp")
    
    ElseIf control.Id = "btnFAQ" Then
        returnedVal = Txt("Ribbon.SuperTip.FAQ")
    
    Else
        returnedVal = ""    'Default is blank, in case the code above is not handling the spcifict ID
    End If
    
End Sub

'Callback for Fr8BenchTab getVisible
Sub GetVisible(control As IRibbonControl, ByRef returnedVal)
    'MsgBox "GetVisible"
    returnedVal = ShowFr8RibbonTab
    'Fr8Ribbon.Invalidate

End Sub




'-------------------------------------------------------------
'--- Handle buttons on the UI RibbonX
'-------------------------------------------------------------

'Handle click on the Setup button
Public Sub OnFr8BenchSetup(control As IRibbonControl)
    'MsgBox ("Hallo from Setup")
    
    Set Fr8Dialog = New Fr8ControlForm          'This fires Userform_Initialize
    
    'Place any code you want to execute between the Initialize and Activate events of the form here
    
    Fr8Dialog.Show                              'This fires Userform_Activate
    'When the close button is clicked, execution will resume on the next line:
    
End Sub

''Handle click on the Calculate button
'Public Sub OnFr8BenchCalc()
'    'MsgBox ("Hallo from Calc")
'    Call CalcEngine.DoTheCalc
'End Sub

'Handle click on the Export (save) button
Public Sub OnFr8BenchEksport(control As IRibbonControl)
    Dim Filename As String
    Dim Folder As String
    Dim Resp As VbMsgBoxResult

    'MsgBox ("Hallo from Export")
    Filename = ExcelSupport.ExportSheet()
    If Filename = "" Then
            Call MsgBox("Nothing to export!", vbInformation, "Export")
    Else
        Resp = MsgBox(printf(Txt("Export_Sheet_Copied_To"), Filename), vbInformation + vbYesNo, Txt("Header_Sheet_copied"))
        If Resp = vbYes Then
            Call Shell("explorer.exe /select," & " " & Filename, vbNormalFocus)
        End If
    End If
End Sub

'Handle click on the Add Sheet button
Public Sub OnFr8BenchAddSheet(control As IRibbonControl)
    'MsgBox ("Hallo from AddSheet")
    
    Dim Fr8AddTemplate As AddTemplateForm
    Set Fr8AddTemplate = New AddTemplateForm          'This fires Userform_Initialize
    
    'Place any code you want to execute between the Initialize and Activate events of the form here
    
    Fr8AddTemplate.Show                              'This fires Userform_Activate
    'When the close button is clicked, execution will resume on the next line:
    
End Sub

'Handle click on the Company button
Public Sub OnFr8BenchCompany(control As IRibbonControl)
    'MsgBox ("Hallo from Company")
    Dim Info As String
    
    Info = Info & "--------------------------------------------------------" & vbNewLine & vbNewLine
    Info = Info & "   " & CompanyName & vbNewLine
    Info = Info & "   " & CompanyAdress & vbNewLine
    Info = Info & "   " & CompanyCity & vbNewLine
    Info = Info & "   " & CompanyTax & vbNewLine
    If CompanyContact <> "" Then
        Info = Info & "   " & CompanyContact & vbNewLine & vbNewLine
    End If
    Info = Info & "   " & vbNewLine
    Info = Info & "   " & CompanySerial & vbNewLine & vbNewLine
    Info = Info & "--------------------------------------------------------" & vbNewLine & vbNewLine

    Call MsgBox(Info, vbOKOnly, Txt("Header_Company"))
End Sub

'Handle click on the About button
Public Sub OnFr8BenchAbout(control As IRibbonControl)
    Dim Info As String
    Info = Info & "----------------------------------------------------------------------------------" & vbNewLine
    Info = Info & "   " & ToolName & vbNewLine
    Info = Info & "   " & "Version: " & VersionInfo & vbNewLine
    Info = Info & "----------------------------------------------------------------------------------" & vbNewLine & vbNewLine
    Info = Info & "   " & "Copyright 2018:" & vbNewLine & vbNewLine
    Info = Info & "   " & "Fr8Partner A/S" & vbNewLine
    Info = Info & "   " & "Centervej 2" & vbNewLine
    Info = Info & "   " & "DK-6000 Kolding" & vbNewLine
    Info = Info & "   " & "info@fr8partner.com" & vbNewLine & vbNewLine
    Info = Info & "----------------------------------------------------------------------------------" & vbNewLine & vbNewLine
    Info = Info & "   " & "Modules:" & vbNewLine
    Info = Info & "   " & "CalcEngine:" & vbTab & CalcModuleVersion & vbNewLine
    Info = Info & "   " & "Surcharge:" & vbTab & SurchargeModuleVersion & vbNewLine
    Info = Info & "   " & "Language:" & vbTab & LanguageModuleVersion & vbNewLine
    Info = Info & "   " & "Support:" & vbTab & SupportModuleVersion & vbNewLine
    Info = Info & "   " & "Globals:" & vbTab & GlobalModuleVersion & vbNewLine
    Info = Info & "   " & "Ribbon:" & vbTab & RibbonModuleVersion & vbNewLine
    Info = Info & "   " & "Misc:       " & vbTab & MiscModuleVersion & vbNewLine
    Info = Info & "   " & "Calc Window:" & vbTab & Fr8ControlFormVersion & vbNewLine
    Info = Info & "----------------------------------------------------------------------------------" & vbNewLine & vbNewLine
    Call MsgBox(Info, vbOKOnly, Txt("Header_About"))
End Sub

Public Sub OnFr8BenchConvertToNumber(control As IRibbonControl)
    'With SELECTION Convert number stored-as-text to numbers and also formulas
    '23-01-2018 Initial
    Dim xCell As Range
    For Each xCell In Selection
        If Not IsEmpty(xCell.Value) Then
            If IsNumeric(xCell.Value) Then
                xCell.Value = CDec(xCell.Value)
                If xCell.NumberFormat = "@" Then
                    xCell.NumberFormat = "General"
                End If
            End If
        End If
    Next xCell
End Sub

Public Sub OnFr8BenchCleanUp(control As IRibbonControl)
    'Removes all custom styles
    'Removes all reference errors
    'Removes external names
    'Tries to schrink the filesize
    '24-01-2018 Initial
    Dim vTemp As Variant
    Dim sTemp As String
    Dim RemovedStyles As Long
    Dim NotRemovedStyles As Long
    Dim RemovedReferences As Long
    Dim RemovesExternalNames As Long
    Dim OldCalcMode As Variant
    
    
    vTemp = MsgBox("Start CleanUp process?", vbYesNo + vbInformation, "CleanUp process")
    If Not (vTemp = vbYes) Then
        Exit Sub
    End If
    
    OldCalcMode = Application.Calculation
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableCancelKey = xlInterrupt

    'First remove all custom styles, invalid references and External names
    Application.StatusBar = "Cleaning up..."
    Call Misc.CleanUpFile(RemovedStyles, NotRemovedStyles, RemovedReferences, RemovesExternalNames)
    
    'Get current size
    Dim BeforeSize As Long
    Dim AfterSize As Long
    Dim DiffSize As Long
    Dim sDiff As String
    Dim strFileFullName As String
    strFileFullName = ActiveWorkbook.FullName
    
    On Error GoTo NoSize    'In case file is located on a Cloud solution (eg OneDrive / sharepoint)
    BeforeSize = FileLen(strFileFullName)
NoSize:
    On Error GoTo 0
    
    'Try to scrink filesize
    Application.StatusBar = "Shrinking sheets..."
    Call Misc.ShrinkSheet
    
    'Save the file
    If BeforeSize > 0 Then  'Dont auto save if on on a cloud solution
        Application.StatusBar = "Saving file..."
        On Error GoTo NoSave
        ActiveWorkbook.Save
NoSave:
        On Error GoTo 0
            
        strFileFullName = ActiveWorkbook.FullName
        AfterSize = FileLen(strFileFullName)
        DiffSize = BeforeSize - AfterSize
        sDiff = printf("%0kb", CInt(DiffSize / 1024))
    Else
        sDiff = "?"
    End If
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.Calculation = OldCalcMode
    Application.StatusBar = False

    sTemp = "CleanUp process complete." & vbNewLine & _
            " - Custom styles removed:      " & vbTab & RemovedStyles & vbNewLine & _
            " - Invalid references removed: " & vbTab & RemovedReferences & vbNewLine & _
            " - External names removed:     " & vbTab & RemovesExternalNames & vbNewLine & _
            " - Filesize reduced with:         " & vbTab & sDiff & vbNewLine
            
    vTemp = MsgBox(sTemp, vbOKOnly + vbInformation, "CleanUp process")
    

End Sub

Public Sub OnFr8BenchFAQ(control As IRibbonControl)
    'Opens the FAQ on Fr8Partners homepage
    '03-02-2018 Initial
    Dim Link As String
    
    'Get link
    Link = Txt("FAQ.LINK")
    
    'Open link
    ThisWorkbook.FollowHyperlink Link

End Sub

Attribute VB_Name = "SurchargeEngine"
Option Explicit
Option Private Module

Public Const SurchargeModuleVersion As String = "22-07-2019"

Public Sub CalcAllSurcharges()
'--------------------------------------------------------------------------------------------------------------
'--- Calculates all the surcharges (if any)
'---
'--- Input:     OfferData
'---            Resultdata
'---
'--- Output:    Offerdata
'---
'--- History:
'---    15-12-2017 Initial
'---    19-06-2018 Pre/post + Road surcharge 'NumberCalculated' added by after run
'--------------------------------------------------------------------------------------------------------------
    Dim i As Long
    Dim Counter As Long
    Dim NumberCalculated As Long
    Dim RefPrice As Double
    Dim AllSCSum As Double  'Sum of All surcharges for an evtl. '99' Source
    Dim DoCalcSC As Boolean
    Dim NotDone As Boolean
    Dim LoopCounter As Long
    
    If Not SurchargeListInitDone Then
        Call InitSurchargeList
    End If
    NumberCalculated = 0
    AllSCSum = 0#
    LoopCounter = 0
    NotDone = True
    
    'Reset variables that are set in this function first
    For i = 1 To OutputInfo.NumberOfSurcharges
        SurchargeList(i).SelectedDetails = ""
        SurchargeList(i).FullDetails = ""
        SurchargeList(i).Price = 0#
        SurchargeList(i).HasError = False
        SurchargeList(i).IsCalculated = False
        SurchargeList(i).IsInfo = False
    Next i
    
    Do While NotDone
        For i = 1 To OutputInfo.NumberOfSurcharges  '(0) is the baseprice
            
            'Normal surcharge
            If SurchargeList(i).Type = Normaltype Then
                
                If Not SurchargeList(i).IsCalculated Then
                    DoCalcSC = False
                    If SurchargeList(i).SourceID = 0 Then       'From Base
                        RefPrice = ResultData.SelectedBasePrice
                        DoCalcSC = True
                    ElseIf SurchargeList(i).SourceID = SurchargeList(i).IDnumber Then  'Check if points to it self
                        Call MsgBox("Warning: Surcharge '" & SurchargeList(i).Name & "': CalcSource is pointing to it self." & vbNewLine & "CalcSource will be skippet for this surcharge.", vbOKOnly, "CalcAllSurcharges()")
                        SurchargeList(i).SourceID = 0
                    ElseIf SurchargeList(i).SourceID = 99 Then  'Last
                        'Check if all, but one is calculated
                        If NumberCalculated = OutputInfo.NumberOfSurcharges - 1 Then
                            RefPrice = ResultData.SelectedBasePrice + AllSCSum
                            DoCalcSC = True
                        End If
                    Else                                        'if Source is not the baseprice (0) then check that source is calculated
                        If SurchargeList(SurchargeList(i).SourceID).IsCalculated Then
                            RefPrice = ResultData.SelectedBasePrice + SurchargeList(SurchargeList(i).SourceID).Price
                            DoCalcSC = True
                        End If
                    End If
                    If DoCalcSC Then
                        Call CalculateNormalSurcharge(SurchargeList(i), OfferData.SourceRow, OfferData.SourceDataBlockIndex, RefPrice, ResultData.AmountEff, ResultData.AmountVol)
                        NumberCalculated = NumberCalculated + 1
                        AllSCSum = AllSCSum + SurchargeList(i).Price
                    End If
                End If
                
            'RoadTax surcharge
            ElseIf SurchargeList(i).Type = RoadType Then
                Call CalculateRoadTaxSurcharge(SurchargeList(i))
                NumberCalculated = NumberCalculated + 1
            
            'Pre/Post surcharge
            ElseIf SurchargeList(i).Type = PreFreightType Or SurchargeList(i).Type = PostFreightType Then
                Call CalculatePrePostSurcharge(SurchargeList(i))
                NumberCalculated = NumberCalculated + 1
            End If
        Next
        
        LoopCounter = LoopCounter + 1
        If LoopCounter > OutputInfo.NumberOfSurcharges + 1 Then
            Call MsgBox("Error: Infinitive loop in Surcharge calculation discovered:" & vbNewLine & "Check the Surcharges calculation Source for validity.", vbCritical, "CalcAllSurcharges()")
            End
        End If
        
        If OutputInfo.NumberOfSurcharges = NumberCalculated Then    'Check if we are done with all Surcharges
            NotDone = False 'So that we exit the outer loop
        End If
        
    Loop
    
    'Add the surcharges to the selected price
    For i = 1 To OutputInfo.NumberOfSurcharges
        'Add surcharge messages and price
        If SurchargeList(i).HasError Then
            ResultData.ErrorMessage = ResultData.ErrorMessage & Newline & SurchargeList(i).SelectedDetails
            ResultData.NormalPrice = -1#
        Else
            If SurchargeList(i).Type = Normaltype Then
                ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & Newline & SurchargeList(i).SelectedDetails
            Else
                ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & Newline & SurchargeList(i).Name & ": " & SurchargeList(i).SelectedDetails & " " & OfferData.StandardCurrency
            End If
            ResultData.SelectedAllInPrice = ResultData.SelectedAllInPrice + SurchargeList(i).Price
            Counter = Counter + 1
        End If
    Next i
    
    'Make an "All-in price" summery line if there is any surcharges
    If Counter > 0 Then
        ResultData.SelectedCalcDetails = ResultData.SelectedCalcDetails & Newline & printf(sTxt("Result.AllIn"), Format(ResultData.SelectedAllInPrice, PriceFormat)) & " " & OfferData.StandardCurrency
    End If
    
End Sub


Sub CalculatePrePostSurcharge(SC As SurchargeListType)
    'Calculates the Pre/Post sheet as a surcharge
    ' SC is the Host surcharge (Pre / Post)
    Dim Offer As OfferDataType
    
    If Not (SC.Type = PostFreightType Or SC.Type = PreFreightType) Then
        Call MsgBox("Internal Error: 'CalculatePrePostSurcharge' called with wrong Surcharge type: " & SC.Type, vbCritical, "Internal Error")
        End
    End If
    
    'Get offerdata from the pre/post sheet
    Call GetOfferPrePostDataRow(SC, Offer)
    If Not Offer.Valid And Offer.ErrorMessage = "" Then
        SC.HasError = False
        Exit Sub
    End If

    If SC.Type = PreFreightType Then
    'PRE
        OfferPreData = Offer
        Call GetPrePostPrice(SC, OfferPreData)  'Find the price incl. surcharges in the pre/postsheet
        SC.IsCalculated = True
        SC.IsInfo = False
        If ResultPreData.ErrorMessage = "" Then
            SC.HasError = False
            SC.Price = ResultPreData.SelectedAllInPrice
            SC.FullDetails = ResultPreData.SCFullDetails
            SC.SelectedDetails = Format(SC.Price, PriceFormat)
        Else
            SC.HasError = True
            SC.SelectedDetails = SC.SelectedDetails & ResultPreData.ErrorMessage
            SC.FullDetails = SC.FullDetails & ResultPreData.ErrorMessage
            SC.Price = 0
        End If
    Else
    'POST
        OfferPostData = Offer
        Call GetPrePostPrice(SC, OfferPostData) 'Find the price incl. surcharges in the pre/postsheet
        SC.IsCalculated = True
        SC.IsInfo = False
        If ResultPostData.ErrorMessage = "" Then
            SC.HasError = False
            SC.Price = ResultPostData.SelectedAllInPrice
            SC.FullDetails = ResultPostData.SCFullDetails
            SC.SelectedDetails = Format(SC.Price, PriceFormat)
        Else
            SC.HasError = True
            SC.SelectedDetails = SC.SelectedDetails & ResultPostData.ErrorMessage
            SC.FullDetails = SC.FullDetails & ResultPostData.ErrorMessage
            SC.Price = 0
        End If
    End If
    
End Sub

Sub GetPrePostPrice(SC As SurchargeListType, Offer As OfferDataType)
'--------------------------------------------------------------------------------------------------------------
'--- Calculates the Pre/Post price and also evt. advantage calculations + internal surcharges
'--- If needed also perform input convertions
'---
'--- Input:     Surcharge in question
'---            Offer Data
'---            Scope is taken from SC.Type
'---
'--- Output:    Result Data (SC.Type dependant)
'---
'---
'--- History:
'---    02-01-2018 Initial
'--------------------------------------------------------------------------------------------------------------

    'Calculates the Pre/Post price
        
    Dim FreightAmount As Double         'The amount that is used for the price calculation
    Dim ConvertionMessage As String     'Message from the convertion function
    Dim NormalPrice As Double
    Dim PriceMessage As String
    Dim AdvantagePrice As Double
    Dim AdvPriceMessage As String
    Dim UsedMode As UsedCalculation
    Dim Results As ResultType
    Dim CurrencyMessage As String
        
    'Select Offer (scope dependant)
    If SC.Type = PreFreightType Then
        Offer = OfferPreData
    Else
        Offer = OfferPostData
    End If
    
    'Check if the unit on the invoice matches the offer units.
    'If no match then try convert the invoiceunit to the offer unit using convertion factors
    FreightAmount = CalcFreightAmount(SC.Type, ConvertionMessage)
    If FreightAmount < 0# Then
        Results.NormalPrice = 0#
        Results.NormalCalcDetails = ConvertionMessage
        Results.ErrorMessage = ConvertionMessage
        Results.CalcModeUsed = cTxt("CalcMode.NotPossible")
        If SC.Type = PreFreightType Then
            ResultPreData = Results
        Else
            ResultPostData = Results
        End If
        Exit Sub
    Else
        Results.NormalCalcDetails = ConvertionMessage
    End If
    Results.AdvCalcDetails = SC.Name & ":"
    If ConvertionMessage <> "" Then
        Results.AdvCalcDetails = Results.AdvCalcDetails & Newline & ConvertionMessage
    End If
    Results.AmountEff = FreightAmount
    Results.AmountVol = FreightAmount
    
    'Normal price
    NormalPrice = CalcBasePrice(FreightAmount, CalculationModeType.NormalMode, PriceMessage, UsedMode, SC.Type)
    Results.NormalPrice = NormalPrice
    Results.NormalCalcDetails = Results.NormalCalcDetails & Newline & cTxt("PriceCalc.NormalInfoHeadline") & Newline & PriceMessage
    Results.AdvCalcDetails = Results.AdvCalcDetails & Newline & PriceMessage     '???
    
    'Find mode
    If UsedMode = MinimumUsed Then
        Results.CalcModeUsed = cTxt("CalcMode.Minimum")
    ElseIf UsedMode = FTLUsed Then
        Results.CalcModeUsed = cTxt("CalcMode.FTL")
    ElseIf UsedMode = Notpossible Then
        Results.ErrorMessage = PriceMessage
        Results.CalcModeUsed = cTxt("CalcMode.NotPossible")
    Else
        Results.CalcModeUsed = cTxt("CalcMode.Normal")
    End If
        
    'If not able to calc the normal baseprice then dont bother with the rest
    If UsedMode <> Notpossible Then

        'Get Adv/disadvantage price
        If Offer.CalculationMode = CalculationModeType.AdvantageNext Then
            AdvantagePrice = CalcBasePrice(FreightAmount, CalculationModeType.AdvantageNext, AdvPriceMessage, UsedMode, SC.Type)
            Results.AdvantagePrice = AdvantagePrice
            Results.AdvCalcDetails = cTxt("PriceCalc.AdvantageInfoHeadline") & Newline & AdvPriceMessage
        ElseIf Offer.CalculationMode = CalculationModeType.Advantagerest Then
            AdvantagePrice = CalcBasePrice(FreightAmount, CalculationModeType.Advantagerest, AdvPriceMessage, UsedMode, SC.Type)
            Results.AdvantagePrice = AdvantagePrice
            Results.AdvCalcDetails = cTxt("PriceCalc.AdvantageInfoHeadline") & Newline & AdvPriceMessage
        ElseIf Offer.CalculationMode = CalculationModeType.Disadvantage Then
            AdvantagePrice = CalcBasePrice(FreightAmount, CalculationModeType.Disadvantage, AdvPriceMessage, UsedMode, SC.Type)
            Results.AdvantagePrice = AdvantagePrice
            Results.AdvCalcDetails = cTxt("PriceCalc.DisadvantageInfoHeadline") & Newline & AdvPriceMessage
        End If
        
        '--- Find the price to select
        'Normal
        If Offer.CalculationMode = CalculationModeType.NormalMode Then
            Results.SelectedBasePrice = Results.NormalPrice
            Results.SelectedCalcDetails = Results.NormalCalcDetails             'Always show the Normal price calc details
        'Advantage
        ElseIf Offer.CalculationMode = CalculationModeType.AdvantageNext Or Offer.CalculationMode = CalculationModeType.Advantagerest Then
            'Results.SelectedCalcDetails = printf(cTxt("Info.NormalPriceIs"), Format(NormalPrice, PriceFormat))
            If AdvantagePrice > 0# Then
                'Add Adv details:
                Results.SelectedCalcDetails = Results.SelectedCalcDetails & Newline & Results.AdvCalcDetails
                'Results.SelectedCalcDetails = Results.SelectedCalcDetails & newline & printf(cTxt("Info.AdvantagePriceIs"), Format(AdvantagePrice, PriceFormat))
            Else
                Results.SelectedCalcDetails = Results.SelectedCalcDetails & Newline & cTxt("Info.AdvantageNotAvailable")
            End If
            'Select the cheapest price
            If AdvantagePrice > 0# And AdvantagePrice < NormalPrice Then
                Results.SelectedBasePrice = AdvantagePrice
                Results.SelectedCalcDetails = Results.SelectedCalcDetails & Newline & Newline & cTxt("Selected.AdvantageCalcUsed")
                Results.CalcModeUsed = cTxt("CalcMode.Advantage")
            Else
                Results.SelectedBasePrice = NormalPrice
                Results.SelectedCalcDetails = Results.SelectedCalcDetails & Newline & Newline & cTxt("Selected.NormalCalcUsed")
           End If
        'Disadvantage
        ElseIf Offer.CalculationMode = CalculationModeType.Disadvantage Then
           'Results.SelectedCalcDetails = printf(cTxt("Info.NormalPriceIs"), Format(NormalPrice, PriceFormat))
           If AdvantagePrice > 0# Then
               'Results.SelectedCalcDetails = Results.SelectedCalcDetails & newline & printf(cTxt("Info.DisadvantagePriceIs"), Format(AdvantagePrice, PriceFormat))
                Results.SelectedCalcDetails = Results.SelectedCalcDetails & Newline & Results.AdvCalcDetails
           Else
               Results.SelectedCalcDetails = Results.SelectedCalcDetails & Newline & cTxt("Info.DisadvantageNotAvailable")
           End If
           'Select the highest price
           If AdvantagePrice > 0# And AdvantagePrice > NormalPrice Then
               Results.SelectedBasePrice = AdvantagePrice
               Results.SelectedCalcDetails = Results.SelectedCalcDetails & Newline & Newline & cTxt("Selected.DisadvantageCalcUsed")
               Results.CalcModeUsed = cTxt("CalcMode.Disadvantage")
           Else
               Results.SelectedBasePrice = NormalPrice
               Results.SelectedCalcDetails = Results.SelectedCalcDetails & Newline & Newline & cTxt("Selected.NormalCalcUsed")
           End If
        End If
        
        Results.SelectedAllInPrice = Results.SelectedBasePrice 'Set all-in price to base price before calculatimg the surcharges
        Results.SCFullDetails = Results.SelectedCalcDetails 'Store Main price in SC details
        
        'Calculate all the surcharges in the Pre/post sheet (if any)
        Call CalcInternatPrePostSurcharges(SC, Offer, Results)
    
    End If 'UsedMode <> Notpossible
    
    'Store result
    If SC.Type = PreFreightType Then
        ResultPreData = Results
    Else
        ResultPostData = Results
    End If
End Sub

Sub CalcInternatPrePostSurcharges(SC As SurchargeListType, ByRef Offer As OfferDataType, ByRef Results As ResultType)
'--------------------------------------------------------------------------------------------------------------
'--- Calculates the Pre/Post internal surcharges. They can only be of the Normal type
'---
'--- Input:     SC          The Pre/Post Surcharge in question
'---            offer       The pre/post offer in question
'---            result      The baseprice info etc.
'---
'--- Output:    result      Data added (parameter)
'---            SC          Data added (parameter)
'---
'--- History:
'---    02-01-2018 Initial
'--------------------------------------------------------------------------------------------------------------

    Dim NumberOfSurcharges As Long
    Dim CalculatedSC As Long
    Dim Iterations As Long
    Dim NotDone As Boolean
    Dim LocalSCList() As SurchargeListType
    Dim i As Long
    Dim count As Long
    Dim CurrencyMessage As String
    
    NotDone = True
        
    'Initialize and find number of Surcharges in the pre/post sheet
    Call InitSurchargePrePostList(SC)
            
    If SC.Type = SurchargeType.PreFreightType Then
        NumberOfSurcharges = SurchargePreCount
        LocalSCList = SurchargePreList
    Else
        NumberOfSurcharges = SurchargePostCount
        LocalSCList = SurchargePostList
    End If
    
    'Do the calc
    Do
        For i = 0 To NumberOfSurcharges - 1
            If Not LocalSCList(i).IsCalculated Then
                Call CalculateNormalSurcharge(LocalSCList(i), Offer.SourceRow, -1, Results.SelectedBasePrice, Results.AmountEff, Results.AmountVol)
                If LocalSCList(i).IsCalculated Then
                    CalculatedSC = CalculatedSC + 1
                End If
            End If
        Next i
        'Detect endless loop:
        Iterations = Iterations + 1
        If Iterations = cMAXSURCHARGES * 2 Then
            Call MsgBox("Error in Pre/Post Surcharge calculation: Endless loop detected. Please tjek the Surcharges Calculation source on the sheet '" & SC.Sheetname & "'.", vbCritical, "Error Pre/Post surcharge calculation")
            End
        End If
        
        If NumberOfSurcharges = CalculatedSC Then   'Tjek if we are done
            NotDone = False
        End If
    Loop While NotDone
    
    'Now that alle surcharges are calculated:
    '   - Check/convert baseprice (since the prc surcharges are based on the pre/post offers standard currency)
    '   - Add surcharges
    
    'Check / make for currency conversion (in the pre/post: always convert to the main offer standard currency)
''    If Offer.MatrixCurrency <> OfferData.StandardCurrency Then
''        Results.SelectedBasePrice = ConvertPrice(Results.SelectedBasePrice, Offer.MatrixCurrency, OfferData.StandardCurrency, CurrencyMessage)
''        If CurrencyMessage <> "" Then
''            Results.SelectedAllInPrice = Results.SelectedBasePrice
''            Results.SCFullDetails = Results.SCFullDetails & Newline & CurrencyMessage
''        End If
''    End If


    'Add the info to the Result structure
    For i = 0 To NumberOfSurcharges - 1
        If LocalSCList(i).Price <> 0# Then
            Results.SCFullDetails = Results.SCFullDetails & Newline & LocalSCList(i).FullDetails   'Details
            Results.SelectedAllInPrice = Results.SelectedAllInPrice + LocalSCList(i).Price         'All In price
            count = count + 1
        ElseIf LocalSCList(i).IsInfo Then
            Results.SCFullDetails = Results.SCFullDetails & Newline & LocalSCList(i).SelectedDetails
            count = count + 1
        End If
    Next i
    
    'Add All-In line if any surcharges added
    If count > 0 Then
        Results.SCFullDetails = Results.SCFullDetails & Newline & printf(sTxt("Result.AllIn"), Format(Results.SelectedAllInPrice, PriceFormat)) & " " & OfferData.StandardCurrency
    End If

End Sub


Sub CalculateNormalSurcharge(SC As SurchargeListType, rw As Long, OfferIndex As Long, BasePrice As Double, AmountEff As Double, AmountVol As Double)
    'Calculates the Normal surcharge that is in the offer template
    '30-07-2018: Added full support for Info types
    
    Dim DRate As Double
    Dim DUnit As String
    Dim DMin As Double
    Dim DMax As Double
    Dim DMinEmpty As Boolean
    Dim DMaxEmpty As Boolean
    Dim temp As String
    Dim CellName As String
    Dim InfoMode As Boolean
    Dim ODBIndex As Long
    Dim LocalDataBlock As Variant
    
    'What to calc
    If BasePrice <= 0# Then
        Exit Sub
    End If
    
    SC.IsCalculated = True
    'HERTIL:: Hr g|fffd|r det galt n|fffd|r till|fffd|g er et intern for/efterfragt till|fffd|g.
    'Lav tjek for om till|fffd|g er Pre/Post og lav en localDataBlock ud fra dette.
    ODBIndex = SC.OfferDataBlockIndex
    
    'Get the datablock (sheet) to use
    If SC.Type = PreFreightType Then
        LocalDataBlock = PreDataBlock
    ElseIf SC.Type = PostFreightType Then
        LocalDataBlock = PostDataBlock
    Else
        If ODBIndex <> OfferIndex Then  'Check if the SC is in same sheet as the offer. If not then just exit.
            Exit Sub
        End If
        LocalDataBlock = OfferDataBlock(ODBIndex)
    End If
    
    '--- Gather the needed surchargedata from the offersheet
    'Rate
    temp = LocalDataBlock(rw, SC.StartColumn + 0)
    'temp = Worksheets(SC.Sheetname).Cells(rw, SC.StartColumn + 0).Value2
    If temp = "" Then
        DRate = 0#
    ElseIf IsNumeric(temp) Then
        DRate = CDbl(temp)
    Else
        SC.HasError = True
        CellName = ColLetter(SC.StartColumn + 0) & CStr(rw)
        SC.SelectedDetails = printf(sTxt("Error.RateNotValid"), SC.Name, SC.Sheetname, CellName, temp)
        Exit Sub
    End If
    
    'Rate unit
    temp = UCase(LocalDataBlock(rw, SC.StartColumn + 1))
    'temp = UCase(Worksheets(SC.Sheetname).Cells(rw, SC.StartColumn + 1).Value2)
    If temp = "PCT" Or temp = "VOL" Or temp = "UNIT" Or Left(temp, 8) = "INTERVAL" Or temp = "" Then
        DUnit = temp
    ElseIf temp = "ONREQ" Or temp = "NOTAVAIL" Or temp = "INCLUDED" Or temp = "UNKNOWN" Then
        SC.IsInfo = True
        SC.SelectedDetails = printf(sTxt(temp), SC.Name)
        SC.FullDetails = SC.SelectedDetails
        Exit Sub
    Else
        SC.HasError = True
        CellName = ColLetter(SC.StartColumn + 1) & CStr(rw)
        SC.SelectedDetails = printf(sTxt("Error.RateUnitNotValid"), SC.Name, SC.Sheetname, CellName, temp)
        Exit Sub
    End If
    
    'Minimum
    temp = LocalDataBlock(rw, SC.StartColumn + 2)
    'temp = Worksheets(SC.Sheetname).Cells(rw, SC.StartColumn + 2).Value2
    If temp = "" Then
        DMinEmpty = True
        DMin = 0#
    ElseIf IsNumeric(temp) Then
        DMin = CDbl(temp)
    Else
        SC.HasError = True
        CellName = ColLetter(SC.StartColumn + 2) & CStr(rw)
        SC.SelectedDetails = printf(sTxt("Error.MinimumNotValid"), SC.Name, SC.Sheetname, CellName, temp)
        Exit Sub
    End If
    
    'Maximum
    temp = LocalDataBlock(rw, SC.StartColumn + 3)
    'temp = Worksheets(SC.Sheetname).Cells(rw, SC.StartColumn + 3).Value2
    If temp = "" Then
        DMaxEmpty = True
        DMax = 0#
    ElseIf IsNumeric(temp) Then
        DMax = CDbl(temp)
    Else
        SC.HasError = True
        CellName = ColLetter(SC.StartColumn + 3) & CStr(rw)
        SC.SelectedDetails = printf(sTxt("Error.MaximumNotValid"), SC.Name, SC.Sheetname, CellName, temp)
        Exit Sub
    End If
        
    '--- Do the math
    If DUnit = "" Then
        If Not DMinEmpty Then
            SC.Price = DMin
            SC.FullDetails = printf(sTxt("Result.FixedPriceUsed"), SC.Name, Format(SC.Price, PriceFormat)) & " " & SC.Currency
        End If
    ElseIf DUnit = "PCT" Then
        SC.Price = BasePrice * (DRate / 100#)
        SC.FullDetails = printf(sTxt("Result.PercentageUsed"), SC.Name, Format(DRate, PriceFormat), Format(BasePrice, PriceFormat), Format(SC.Price, PriceFormat)) & " " & SC.Currency
    ElseIf DUnit = "UNIT" Then
        SC.Price = AmountEff * DRate
        SC.FullDetails = printf(sTxt("Result.UnitsUsed"), SC.Name, Format(AmountEff, PriceFormat), Format(DRate, PriceFormat), Format(SC.Price, PriceFormat)) & " " & SC.Currency
    ElseIf DUnit = "VOL" Then
        SC.Price = AmountVol * DRate
        SC.FullDetails = printf(sTxt("Result.UnitsUsed"), SC.Name, Format(AmountVol, PriceFormat), Format(DRate, PriceFormat), Format(SC.Price, PriceFormat)) & " " & SC.Currency
    ElseIf DUnit = "INTERVAL-A" Or DUnit = "INTERVAL-B" Or DUnit = "INTERVAL-C" Then
        Call CalculateIntervalPrice(DUnit, BasePrice, AmountEff, AmountVol, SC) ' Calculate and Sets the SC.Price + SC.FullDetails incl. errorhandling
    End If
    If (Not SC.HasError) Then
        SC.SelectedDetails = SC.Name & ": " & DUnit & "= "
        
        '--- Min/max check
        If (Not DMinEmpty) And SC.Price < DMin Then
            SC.Price = DMin
            SC.SelectedDetails = printf(sTxt("Result.MinimumUsed"), SC.Name)
            SC.FullDetails = SC.FullDetails & Newline & SC.SelectedDetails & Format(SC.Price, PriceFormat) & " " & SC.Currency
        End If
        If (Not DMaxEmpty) And SC.Price > DMax Then
            SC.Price = DMax
            SC.SelectedDetails = printf(sTxt("Result.MaximumUsedUsed"), SC.Name)
            SC.FullDetails = SC.FullDetails & Newline & SC.SelectedDetails & Format(SC.Price, PriceFormat) & " " & SC.Currency
        End If
        
        'Check / make for currency conversion
        temp = ""
        If SC.Currency <> OfferData.StandardCurrency Then
            SC.Price = ConvertPrice(SC.Price, SC.Currency, OfferData.StandardCurrency, temp)
            If temp <> "" Then
                SC.FullDetails = SC.FullDetails & Newline & temp
            End If
        End If
        'Add price to the selected details
        SC.SelectedDetails = SC.SelectedDetails & Format(SC.Price, PriceFormat) & " " & OfferData.StandardCurrency
    End If
End Sub

Sub CalculateIntervalPrice(interval As String, BasePrice As Double, AmountEff As Double, AmountVol As Double, SC As SurchargeListType)
    'Calculates the Interval price
    
    Dim IntervalType As SurchargeType
    Dim Offer As OfferDataType
    Dim Message As String
    Dim ModeUsed As UsedCalculation
    Dim Price As Double

    If Not IntervalSurchargeInitDone Then
        Call InitIntervalData
    End If
    
    If interval = "INTERVAL-A" Then
        IntervalType = SurchargeType.IntervalAtype
        Offer = OfferIntervalAData
    ElseIf interval = "INTERVAL-B" Then
        IntervalType = SurchargeType.IntervalBtype
        Offer = OfferIntervalBData
    ElseIf interval = "INTERVAL-C" Then
        IntervalType = SurchargeType.IntervalCtype
        Offer = OfferIntervalCData
    End If
    
    'Check that data is there
    If Not Offer.Valid Then
        SC.HasError = True
        SC.SelectedDetails = printf(sTxt("Error.IntervalNotFound"), SC.Name, interval)
        Exit Sub
    End If
    
    'Check if the unit on the Intervalsheet matches the offer units.
    'If no match then give error
    ' TODO (Udfordring: Har Intervalarket enhed ,men ikke det tilh|fffd|rende TILBUDS enhed)
        
    'Do the calc
    Price = CalcBasePrice(AmountVol, CalculationModeType.NormalMode, Message, ModeUsed, IntervalType)
    
    'Check for error
    If Price <= 0# Then
        SC.HasError = True
        SC.SelectedDetails = SC.Name & ": " & interval & ": " & Message
        Exit Sub
    End If
    
    'Store info
    SC.Price = Price
    SC.FullDetails = SC.Name & ": " & Newline & interval & ": " & Message & SC.Currency

End Sub

Sub InitIntervalData()
'--------------------------------------------------------------------------------------------------------------
'--- 'Reads alle the data from the 3 interval sheets if present
'---
'--- Input:
'---
'--- Output:    OfferInterval<A/B/C>Data        Offerdata struct with the read data
'---            IntervalSurchargeInitDone       Mark if done
'---
'--- History:
'---    02-01-2018 Initial
'--------------------------------------------------------------------------------------------------------------
    Dim ws As Worksheet
    Dim wsName As String
    Dim OfferName As String
    Dim IntervalType As FreightOfferType
    Dim IntervalNumber As Long
    Dim Offer As OfferDataType
    Dim DataRow As Long
    Dim FirstPriceCol As Long
    Dim iCol As Long
    Dim iTemp As Long
    
    DataRow = OfferDataRowStart
    FirstPriceCol = 4
    
    'Loop throug all sheets and read all data if found.
    For Each ws In ActiveWorkbook.Worksheets
        wsName = ws.Name
        If ws.Visible = xlSheetVisible Then
            IntervalType = CheckIfIntervalSheet(wsName)
            If IntervalType > 0 Then
                'OK Found a sheet: Lets read the data
    
                'Units is only using the first one
                iTemp = GetLeftNumber(Worksheets(wsName).Cells(OfferDataUnitRow, FirstPriceCol).Value2)
                If iTemp = 5 Then iTemp = 4             'let 5:Pieces be 4 (to match the dropdown index)
                Offer.Units(0) = iTemp
                
                'Types, interval and price matrix
                IntervalNumber = 0
                For iCol = FirstPriceCol To FirstPriceCol + cMAXPRICEINTERVALS
                    Offer.Units(IntervalNumber) = Offer.Units(0)
                    Offer.Types(IntervalNumber) = GetLeftNumber(Worksheets(wsName).Cells(OfferDataTypeRow, iCol).Value2)
                    Offer.PriceInterval(IntervalNumber) = Abs(Worksheets(wsName).Cells(OfferDataIntervalRow, iCol).Value2)
                    Offer.Price(IntervalNumber) = Worksheets(wsName).Cells(DataRow, iCol).Value2
                    IntervalNumber = IntervalNumber + 1
                Next iCol
                
                'Minimum price:
                Offer.MinimumPrice = Worksheets(wsName).Cells(DataRow, FirstPriceCol - 1).Value2
                
                'Misc
                Offer.SourceSheetName = wsName
                Offer.SourceRow = DataRow
            
                'Mark that the data was read
                Offer.Valid = True
                
                'Store the info
                If IntervalType = IntervalA Then
                    OfferIntervalAData = Offer
                ElseIf IntervalType = IntervalB Then
                    OfferIntervalBData = Offer
                ElseIf IntervalType = IntervalC Then
                    OfferIntervalCData = Offer
                End If
            End If
        End If
    Next
    
    'Mark that we are done
    IntervalSurchargeInitDone = True
    
End Sub

Sub CalculateRoadTaxSurcharge(SC As SurchargeListType)
    'Calculates the Road Tax surcharge
    
    'Get offerdata from the roadtaxsheet
    Call GetOfferRoadTaxDataRow(SC)
    
    'Find the price
    Call GetRoadTaxPrice(SC)
    
    'Gather result info and store it in the surcharge
    SC.IsCalculated = True
    SC.IsInfo = False
    If ResultRoadTaxData.ErrorMessage = "" Then
        SC.HasError = False
        SC.Price = ResultRoadTaxData.NormalPrice
        SC.FullDetails = ResultRoadTaxData.SCFullDetails
        SC.SelectedDetails = ResultRoadTaxData.SCSelectedDetails
    Else
        SC.HasError = True
        SC.SelectedDetails = SC.Name & ": " & SC.SelectedDetails & ResultRoadTaxData.ErrorMessage
        SC.Price = 0#
    End If

End Sub

Private Sub GetRoadTaxPrice(SC As SurchargeListType)
'--------------------------------------------------------------------------------------------------------------
'--- Calculates the Road Tax price
'--- If needed also perform input convertions
'---
'--- Input:     OfferRoadTaxData
'---
'--- Output:    ResultRoadTaxData
'---
'--- History:
'---    29-12-2017 Initial
'--------------------------------------------------------------------------------------------------------------
    Dim FreightAmount As Double         'The amount that is used for the price calculation
    Dim ConvertionMessage As String     'Message from the convertion function
    Dim NormalPrice As Double
    Dim PriceMessage As String
    Dim UsedMode As UsedCalculation
    Dim ConvMsg As String
    
    'Clear info strings
    ResultRoadTaxData.SCSelectedDetails = ""    'info used under Selected Price (without evt. convertion factor convertion)
    ResultRoadTaxData.SCFullDetails = ""        'info used under Surcharge info (With all info)
    ResultRoadTaxData.ErrorMessage = ""
    ResultRoadTaxData.CalcModeUsed = ""
    
    'Check if the unit on the invoice matches the offer units.
    'If no match then try convert the invoiceunit to the offer unit using convertion factors
    FreightAmount = CalcFreightAmount(RoadType, ConvertionMessage)
    If FreightAmount < 0# Then
        ResultRoadTaxData.NormalPrice = 0#
        ResultRoadTaxData.SCFullDetails = ConvertionMessage
        ResultRoadTaxData.ErrorMessage = ConvertionMessage
        ResultRoadTaxData.CalcModeUsed = cTxt("CalcMode.NotPossible")
        Exit Sub
    End If
    ResultRoadTaxData.SCFullDetails = SC.Name & ":" & Newline
    If ConvertionMessage <> "" Then
        ResultRoadTaxData.SCFullDetails = ResultRoadTaxData.SCFullDetails & ConvertionMessage & Newline
    End If
    
    'Normal price (Road Tax sheet has only normal price)
    NormalPrice = CalcBasePrice(FreightAmount, CalculationModeType.NormalMode, PriceMessage, UsedMode, RoadType)
    ResultRoadTaxData.NormalPrice = NormalPrice
    ResultRoadTaxData.SCSelectedDetails = "= " & Format(NormalPrice, PriceFormat) & " " & OfferData.StandardCurrency  'PriceMessage has to much info
    ResultRoadTaxData.SCFullDetails = ResultRoadTaxData.SCFullDetails & PriceMessage & Newline
    
    'Find mode
    If UsedMode = MinimumUsed Then
        ResultRoadTaxData.CalcModeUsed = cTxt("CalcMode.Minimum")
    ElseIf UsedMode = FTLUsed Then
        ResultRoadTaxData.CalcModeUsed = cTxt("CalcMode.FTL")
    ElseIf UsedMode = Notpossible Then
        ResultRoadTaxData.ErrorMessage = PriceMessage
        ResultRoadTaxData.CalcModeUsed = cTxt("CalcMode.NotPossible")
    Else
        ResultRoadTaxData.CalcModeUsed = cTxt("CalcMode.Normal")
    End If
    
End Sub


Public Sub InitSurchargeList()
'--------------------------------------------------------------------------------------------------------------
'--- Initialises the surchargelist, with the active surcharges (Checked): Name, IDnumber and SourceID
'---
'--- Input:     Offersettings
'---
'--- Output:    Surchargelist
'---
'--- History:
'---    15-12-2017 Initial
'--------------------------------------------------------------------------------------------------------------
    Dim i As Long
    Dim j As Long
    Dim Counter As Long
    
    'SurchargeInfo is all the surcharges from the Form (active or non-active
    'SurchargeList is all the Active surcharges (that must be calcultated)
    
    Counter = 0
    
    'Set index 0 to the baseprice
    SurchargeList(Counter).Name = "BasePrice"
    SurchargeList(Counter).Type = SurchargeType.BasePrice
    SurchargeList(Counter).IsCalculated = True
    SurchargeList(Counter).Price = ResultData.SelectedBasePrice
    Counter = Counter + 1
    
    'Loop through all surcharges and get info from the active ones and add them to our surchargelist
             
    For i = 1 To cMAXSURCHARGES
        If OfferSettings.SurchargeInfo(i).Active Then
            SurchargeList(Counter).Name = OfferSettings.SurchargeInfo(i).Name
            SurchargeList(Counter).Type = OfferSettings.SurchargeInfo(i).Type
            SurchargeList(Counter).Sheetname = OfferSettings.SurchargeInfo(i).Sheetname
            SurchargeList(Counter).HasError = False
            SurchargeList(Counter).IsCalculated = False
            SurchargeList(Counter).Price = 0#
            SurchargeList(Counter).FullDetails = ""
            SurchargeList(Counter).SelectedDetails = ""
            SurchargeList(Counter).OfferDataBlockIndex = -1 'Just to see if it is set in the loop
            For j = 0 To OfferListCount       'Find the OfferDataBlockIndex where the Surcharge is in (from the sheetname)
                If OfferList(j).Sheetname = SurchargeList(Counter).Sheetname Then
                    SurchargeList(Counter).OfferDataBlockIndex = j
                End If
            Next j
            Call GetSurchargeInfo(SurchargeList(Counter))  'Gets IDnumber, SourceID, Currency etc.
            Counter = Counter + 1
        End If
    Next i
    OutputInfo.NumberOfSurcharges = Counter - 1
    SurchargeListInitDone = True
End Sub

Private Sub GetSurchargeInfo(ByRef surcharge As SurchargeListType)
'--------------------------------------------------------------------------------------------------------------
'--- Get the IDnumber, SourceID, Currency and surcharge start col from the surcharge given
'---
'--- Input:     Surcharge       (Parameter)
'---            OfferList       (Global)
'---            OfferDataBlock  (Global)
'---
'--- Output:    Surcharge       (Parameter)
'---
'--- History:
'---    15-12-2017 Initial
'---    14-11-2018 Changed to read from OfferDatablock instead of directly fra the offer sheet(s)
'--------------------------------------------------------------------------------------------------------------
    
    Dim temp As String
    Dim TempOfferName As String
    Dim Fr8Type As Long
    'Dim ws As Worksheet
    Dim wsName As String
    Dim ColName As String
    Dim SCName As String
    Dim CellName As String
    Dim LastCol  As Long
    Dim Col As Long
    Dim i As Long
    Dim OIndex As Long
    
    ' Normal type
    If surcharge.Type = Normaltype Then
        OIndex = surcharge.OfferDataBlockIndex
        wsName = OfferData.SourceSheetName
        LastCol = UBound(OfferDataBlock(OIndex), 2) 'Find the number of columns (1= Rows, 2 = Columns)
        For Col = 1 To LastCol
            ColName = OfferDataBlock(OIndex)(1, Col)
            If ColName = SurchargeRateUnitColumnName Then                   'Correct Column name?
                SCName = OfferDataBlock(OIndex)(OfferNameRow, Col)
                If SCName = surcharge.Name Then                             'Correct Surcharge name?
                    surcharge.StartColumn = Col - 1
                    temp = OfferDataBlock(OIndex)(OfferCurrencyRow, Col)    'Get Currency. If blank then set to the offers standard currency
                    If temp <> "" Then
                        surcharge.Currency = temp
                    Else
                        surcharge.Currency = OfferData.StandardCurrency
                    End If
                    temp = OfferDataBlock(OIndex)(OfferHeaderRow, Col + 1)  'Get IDNumber from headerow
                    If IsNumeric(temp) Then
                        surcharge.IDnumber = CInt(temp)
                    Else
                        surcharge.IDnumber = -1
                        surcharge.HasError = True
                        CellName = ColLetter(Col + 1) & CStr(OfferHeaderRow)
                        surcharge.SelectedDetails = printf(cTxt("Error.IDNumberNotValid"), surcharge.Name, wsName, CellName, temp)
                        Exit For
                    End If
                    temp = OfferDataBlock(OIndex)(OfferDataSourceIDRow, Col)   'Get SourceID
                    If temp = "" Then
                        surcharge.SourceID = 0
                    ElseIf IsNumeric(temp) Then
                        surcharge.SourceID = CInt(temp)
                    Else
                        surcharge.SourceID = -1
                        surcharge.HasError = True
                        CellName = ColLetter(Col) & CStr(OfferDataSourceIDRow)
                        surcharge.SelectedDetails = surcharge.SelectedDetails & Newline & printf(cTxt("Error.SourceIDNotValid"), surcharge.Name, wsName, CellName, temp)
                    End If
                    Exit For
                End If
            End If
        Next Col
      
    'Road Type
    ElseIf surcharge.Type = RoadType Then
        temp = RoadTaxDataBlock(OfferCurrencyRow, 4)            'D8 - Pricematrix currency
        If temp = "" Then                           'If blank then take standard currency
            temp = RoadTaxDataBlock(OfferCurrencyRow, 2)        'B8
        End If
        surcharge.Currency = temp
        surcharge.IDnumber = cRoadTaxSCId
        surcharge.SourceID = 0                      'No input for defining source
    
    'Pre Type
    ElseIf surcharge.Type = PreFreightType Then
        temp = PreDataBlock(OfferCurrencyRow, 4)                'D8 - Pricematrix currency
        If temp = "" Then                           'If blank then take standard currency
            temp = PreDataBlock(OfferCurrencyRow, 2)            'B8
        End If
        surcharge.Currency = temp
        surcharge.IDnumber = cPrefreightSCId
        surcharge.SourceID = 0                      'Not applicable

    'Post Type
    ElseIf surcharge.Type = PostFreightType Then
        temp = PostDataBlock(OfferCurrencyRow, 4)               'D8 - Pricematrix currency
        If temp = "" Then                           'If blank then take standard currency
            temp = PostDataBlock(OfferCurrencyRow, 2)           'B8
        End If
        surcharge.Currency = temp
        surcharge.IDnumber = cPostfreightSCId
        surcharge.SourceID = 0                      'Not applicable
    End If

End Sub


Public Sub InitSurchargePrePostList(SC As SurchargeListType)
'--------------------------------------------------------------------------------------------------------------
'--- Gets all info about the surcharges in a pre/Post sheet.
'---
'--- Input:     Host SC (Pre/Post type)
'---
'--- Output:    Surcharge(Pre/Post)List
'---
'--- History:
'---    02-01-2018 Initial
'---    14-11-2018 Read from DataBlock instead of sheet
'--------------------------------------------------------------------------------------------------------------
    Dim Col As Long
    Dim temp As String
    Dim i As Long
    Dim ColName As String
    Dim Counter As Long
    Dim SCList(0 To cMAXSURCHARGES) As SurchargeListType
    Dim LocalBlock As Variant
                 
    'Check if already initialized. If so then just exit
    If SC.Type = SurchargeType.PreFreightType And SurchargePreListInitDone Then
        Exit Sub
    ElseIf SC.Type = SurchargeType.PostFreightType And SurchargePostListInitDone Then
        Exit Sub
    End If
                 
    'The Host Pre/Post Surcharge has the Sheetname and the column info for the first surcharge
    
    Counter = 0
    
    If SC.Type = SurchargeType.PreFreightType Then
        LocalBlock = PreDataBlock
        'Store the sheet source
    ElseIf SC.Type = SurchargeType.PostFreightType Then
        LocalBlock = PostDataBlock
    Else
        Call MsgBox("Internal Error found in function InitSurchargePrePostList:" & vbNewLine & _
        "Surcharge.Type is not Pre- or Postfreight", vbCritical)
        End
    End If
    
    
    For Col = 1 To SC.LastCol
        'First tjek if column name is correct
        
        ColName = LocalBlock(1, Col)
        If ColName = SurchargeRateColumnName Then       'Correct Column name?
            'Then check if it has a name
            temp = LocalBlock(OfferNameRow, Col + 1)
            If temp <> "" Then
                'OK, then initialize and get all info
                SCList(Counter).Name = temp
                SCList(Counter).Sheetname = SC.Sheetname
                SCList(Counter).StartColumn = Col
                SCList(Counter).HasError = False
                SCList(Counter).IsCalculated = False
                SCList(Counter).Price = 0#
                SCList(Counter).FullDetails = ""
                SCList(Counter).SelectedDetails = ""
                SCList(Counter).IDnumber = Counter + 1
                SCList(Counter).Type = SC.Type
                'SCList(Counter).Type = SurchargeType.Normaltype     'Only one possible in Pre/Post sheets
                
                temp = LocalBlock(OfferCurrencyRow, Col + 1)        'Get Currency. If blank then set to the offers standard currency
                If temp <> "" Then
                    SCList(Counter).Currency = temp
                Else
                    temp = LocalBlock(OfferCurrencyRow, 2)          'Get the pre/post offers standard currency
                    If temp <> "" Then
                        SCList(Counter).Currency = temp
                    Else
                        SCList(Counter).Currency = OfferData.StandardCurrency   'If both blank then take the main offers standard currency
                    End If
                End If

                temp = LocalBlock(OfferDataSourceIDRow, Col)         'Get SourceID
                If temp = "" Then
                    SCList(Counter).SourceID = 0
                ElseIf IsNumeric(temp) Then
                    SCList(Counter).SourceID = CInt(temp)
                Else
                    SCList(Counter).SourceID = 0
                End If
                Counter = Counter + 1
            End If
        End If
    Next Col
    
    'Store result
    If SC.Type = PreFreightType Then
        For i = 0 To cMAXSURCHARGES
            SurchargePreList(i) = SCList(i)
        Next i
        SurchargePreCount = Counter
        SurchargePreListInitDone = True
    Else
        For i = 0 To cMAXSURCHARGES
            SurchargePostList(i) = SCList(i)
        Next i
        SurchargePostCount = Counter
        SurchargePostListInitDone = True
    End If
End Sub


Attribute VB_Name = "TestLogForm"
Attribute VB_Base = "0{948A8758-E269-45A8-B279-147B6FF80A58}{1DC079F5-3C2B-48F9-881E-B9F46A9193AC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub ShowDeatilsCB_Change()
    TestSettings.ShowDetails = Not TestSettings.ShowDetails
    Call UpdateListbox
End Sub


Private Sub CopyToClipboardButton_Click()
    Dim strng As String
    Dim header As String
    Dim Delimiter As String
    Dim Newline As String
    Dim lCol As Long, lRow As Long
   
    Delimiter = vbTab
    Newline = vbCrLf
    strng = ""
    
    'Gather Header
    header = header & tTxt("OfferTest.TypeLabel") & Delimiter
    header = header & tTxt("OfferTest.AreaLabel") & Delimiter
    header = header & tTxt("OfferTest.MessageLabel") & Delimiter
    header = header & tTxt("OfferTest.ReferenceLabel") & Delimiter
    header = header & Newline
    
    '--- Gather Data
    With Me.LogListBox '<--| refer to your listbox: change "ListBox1" with your actual listbox name
        For lRow = 0 To .ListCount - 1 '<--| loop through listbox rows
            For lCol = 0 To .ColumnCount - 1 '<--| loop through listbox columns
                strng = strng & .List(lRow, lCol) & Delimiter '<--| build your output string
            Next lCol
            strng = strng & Newline
        Next lRow
        If Len(strng) > 2 Then
            strng = Left(strng, (Len(strng) - 1)) 'Remove last Delimiter
        End If
    End With
    If Len(strng) > 2 Then
        strng = Left(strng, (Len(strng) - 1)) 'Remove last newline
    End If
    
    'Add Header
    If strng <> "" Then
        strng = header & strng
        '--- Add data to clipboard
        Me.CopyToClipboardButton.BackColor = vbGreen
        Me.Repaint
        Call ClipBoard_SetData(strng)
        Application.Wait (Now + TimeValue("0:00:01"))
        Me.CopyToClipboardButton.BackColor = RGB(240, 240, 240)
        Me.Repaint
    Else
        Me.CopyToClipboardButton.BackColor = vbYellow
        Me.Repaint
        Application.Wait (Now + TimeValue("0:00:01"))
        Me.CopyToClipboardButton.BackColor = RGB(240, 240, 240)
        Me.Repaint
    End If
End Sub


Private Sub LogListBox_Click()
    'Debug.Print "Hi from LogListBox_Click()"
    'Debug.Print "Line clicked is: " & LogListBox.ListIndex
    Dim rw As Long
    Dim content As String
    Dim sht As String
    Dim ref As String
    Dim pos As Long
    Dim length As Long
        
    rw = LogListBox.ListIndex   'get selected row
    content = LogListBox.List(rw, 3)
    'Debug.Print "Reference of clicked line " & rw + 1 & ", is: '" & content & "'"
    
    sht = ""
    ref = ""
    
    If content <> "" Then
        'split Content into sheet and cell
        pos = InStr(content, "!")
        If pos > 0 Then
            sht = StripApostroph(Left(content, pos - 1))
            ref = Mid(content, pos + 1)
        Else
            sht = content
        End If
    End If
    'Debug.Print "Sheet: '" & sht & "'"
    'Debug.Print "Ref  : '" & ref & "'"
    
    If sht <> "" Then
        On Error GoTo Error_Select
        Worksheets(sht).Select
        On Error GoTo 0
    End If
    If ref <> "" Then
        On Error GoTo Error_Select
        Range(ref).Select
        On Error GoTo 0
    End If
    
Error_Select:
    
End Sub

Function StripApostroph(str As String) As String

    If str <> "" Then
        str = Replace(str, "'", "")
    End If
    StripApostroph = str
End Function


Private Sub ShowRemarksCB_Change()
    TestSettings.ShowRemarks = Not TestSettings.ShowRemarks
    Call UpdateListbox
End Sub

Private Sub ShowWarningsCB_Change()
    TestSettings.ShowWarnings = Not TestSettings.ShowWarnings
    Call UpdateListbox
End Sub

Private Sub ShowErrorsCB_Change()
    TestSettings.ShowErrors = Not TestSettings.ShowErrors
    Call UpdateListbox
End Sub

Private Sub UserForm_Initialize()
    'Runs on form open
    'MsgBox ("Hello from UserForm_Initialize")
    
    'Set all the labels etc.
    Call InitFormLabels
    
    'Get state of the filters check boxes
    If ShowRemarksCB.Value = True Then
        TestSettings.ShowRemarks = True
    Else
        TestSettings.ShowRemarks = False
    End If
    
    If ShowWarningsCB.Value = True Then
        TestSettings.ShowWarnings = True
    Else
        TestSettings.ShowWarnings = False
    End If
    
    If ShowErrorsCB.Value = True Then
        TestSettings.ShowErrors = True
    Else
        TestSettings.ShowErrors = False
    End If
    'Fill the listbox
    Call UpdateListbox
End Sub

Private Sub InitFormLabels()
    
    'Labels
    Me.Caption = tTxt("OfferTest.Form_Name")
    HeaderLabel.Caption = tTxt("OfferTest.HeaderLabel")
    
    ShowRemarksCB.Caption = tTxt("TypeName_1_()")
    ShowWarningsCB.Caption = printf(tTxt("TypeName_2_()"), TestSettings.WarningCount)
    ShowErrorsCB.Caption = printf(tTxt("TypeName_3_()"), TestSettings.ErrorCount)
    RemarkInfoLabel = tTxt("RemarkInfoLabel")
    WarningInfoLabel = tTxt("WarningInfoLabel")
    ErrorInfoLabel = tTxt("ErrorInfoLabel")
    RefInfoLabel = tTxt("RefInfoLabel")
    ClipHelpLabel = tTxt("ClipHelpLabel")
    
    WarningCountLabel.Caption = printf(tTxt("OfferTest_WarningCount"), TestSettings.WarningCount)
    If TestSettings.WarningCount = 0 Then
        WarningCountLabel.ForeColor = RGB(140, 180, 0) ' green
        ShowWarningsCB.Enabled = False
    Else
        WarningCountLabel.ForeColor = vbBlack
        ShowWarningsCB.Enabled = True
        If TestSettings.ErrorCount = 0 Then    'if errors is zero then show the warnings
            ShowWarningsCB.Value = True
        End If
    End If
    ErrorCountLabel.Caption = printf(tTxt("OfferTest_ErrorCount"), TestSettings.ErrorCount)
    If TestSettings.ErrorCount = 0 Then
        ErrorCountLabel.ForeColor = RGB(140, 180, 0) ' green
        ShowErrorsCB.Enabled = False
        ShowErrorsCB.Value = False
    Else
        ErrorCountLabel.ForeColor = vbRed
        ShowErrorsCB.Enabled = True
        ShowErrorsCB.Value = True
    End If
    
    TypeLabel.Caption = tTxt("OfferTest.TypeLabel")
    AreaLabel.Caption = tTxt("OfferTest.AreaLabel")
    MessageLabel.Caption = tTxt("OfferTest.MessageLabel")
    ReferenceLabel.Caption = tTxt("OfferTest.ReferenceLabel")

    'Frames
    TypeViewFrame.Caption = tTxt("OfferTest.TypeViewFrame")
    
    'Buttons
    CopyToClipboardButton.Caption = tTxt("OfferTest.CopyToClipboardButton")

End Sub


Private Sub UpdateListbox()

    Dim LogCounter As Long
    Dim listcounter As Long
    Dim TypeName(3) As String
    Dim AreaName(23) As String
    Dim AddIt As Boolean
    Dim ref As String
    Dim vSht As String  'Sheetname with ' around
    
'    RemarkType
'    WarningType
'    ErrorType
    TypeName(1) = tTxt("TypeName_1")
    TypeName(2) = tTxt("TypeName_2")
    TypeName(3) = tTxt("TypeName_3")

'    Departure
'    Destination
'    PriceType       'Unit /Shipment / FTL
'    PriceUnits      'Kg/LDM/m3..
'    PriceInterval   'Interval numbers 100 or -100 or 50-100, Right number counts
'    PriceMatrix     'The Prices
'    surcharge
'    ConversionFactor
'    Currency_
'    Miscellaneous
'    Generel
    AreaName(0) = tTxt("AreaName_0")
    AreaName(1) = tTxt("AreaName_1")
    AreaName(2) = tTxt("AreaName_2")
    AreaName(3) = tTxt("AreaName_3")
    AreaName(4) = tTxt("AreaName_4")
    AreaName(5) = tTxt("AreaName_5")
    AreaName(6) = tTxt("AreaName_6")
    AreaName(7) = tTxt("AreaName_7")
    AreaName(8) = tTxt("AreaName_8")
    AreaName(9) = tTxt("AreaName_9")
    AreaName(10) = tTxt("AreaName_10")
    AreaName(11) = tTxt("AreaName_11")
    AreaName(12) = tTxt("AreaName_12")
    AreaName(13) = tTxt("AreaName_13")
    AreaName(14) = tTxt("AreaName_14")
    AreaName(15) = tTxt("AreaName_15")
    AreaName(16) = tTxt("AreaName_16")
    AreaName(17) = tTxt("AreaName_17")
    AreaName(18) = tTxt("AreaName_18")
    AreaName(19) = tTxt("AreaName_19")
    AreaName(20) = tTxt("AreaName_20")
    AreaName(21) = tTxt("AreaName_21")
    AreaName(22) = tTxt("AreaName_22")
    AreaName(23) = tTxt("AreaName_23")
    
    'Clear the listbox
    LogListBox.Clear
    LogListBox.ListIndex = -1
    listcounter = 0
    
    'Fill the listbox
    For LogCounter = 0 To TestSettings.Pointer - 1
        AddIt = False
        If TestLog(LogCounter).MessageType = RemarkType And TestSettings.ShowRemarks Then
            AddIt = True
        ElseIf TestLog(LogCounter).MessageType = WarningType And TestSettings.ShowWarnings Then
            AddIt = True
        ElseIf TestLog(LogCounter).MessageType = ErrorType And TestSettings.ShowErrors Then
            AddIt = True
        End If
        If AddIt Then
            LogListBox.AddItem                              'Use the .AddItem method to add a multi-column row for each array element.
            LogListBox.List(listcounter, 0) = TypeName(TestLog(LogCounter).MessageType)  'Use .List method to write array data to specific listbox row and column.
            LogListBox.List(listcounter, 1) = AreaName(TestLog(LogCounter).MessageArea)
            If TestLog(LogCounter).sht <> "" Then vSht = "'" & TestLog(LogCounter).sht & "'"
            If TestLog(LogCounter).Reference = "" And TestLog(LogCounter).sht = "" Then
                ref = ""
            ElseIf TestLog(LogCounter).sht = "" Then
                ref = TestLog(LogCounter).Reference
            Else
                If TestLog(LogCounter).Reference = "" Then
                    ref = vSht
                Else
                    ref = vSht & "!" & TestLog(LogCounter).Reference
                End If
            End If
            LogListBox.List(listcounter, 3) = ref
'            If TestLog(LogCounter).Reference2 = "" Then
'                If TestLog(LogCounter).Reference = "" Then
'                    LogListBox.List(ListCounter, 3) = "-"
'                Else
'                    LogListBox.List(ListCounter, 3) = TestLog(LogCounter).Reference
'                End If
'            Else
'                LogListBox.List(ListCounter, 3) = TestLog(LogCounter).Reference & " & " & TestLog(LogCounter).Reference2
'            End If
            LogListBox.List(listcounter, 2) = TestLog(LogCounter).Message
            listcounter = listcounter + 1
        End If
    Next LogCounter

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
'Dim HasBeenActivated As Boolean

Private Sub Workbook_Open()
    If DebugMode Then Call SaveDebugInfo("Workbook_Open()", "Start")
    Call InitializeSheet
    Application.Calculation = xlCalculationAutomatic
    Call CheckForTablesInFile
    ShowFr8RibbonTab = True
    If DebugMode Then Call SaveDebugInfo("Workbook_Open()", "End")
End Sub


' Create Ribbon (moved to Ribbon editor)

Private Sub Workbook_Activate()
    If DebugMode Then Call SaveDebugInfo("Workbook_Activate()", "Start 'ThisWorkBook'")
    If DebugMode Then Call SaveDebugInfo("Workbook_Activate()", "End 'ThisWorkBook'")
End Sub


Private Sub Workbook_Deactivate()

    'ShowFr8RibbonTab = False

End Sub


Private Sub Workbook_SheetActivate(ByVal Sh As Object)
    'Force Calculation to Automatic on ever sheet change if not in running mode
    'MsgBox "Hej fra 'Workbook_SheetActivate'"
    '06-03-2018 Tjek f|fffd|rst om den ikke allerede er p|fffd| auto, da app.calc. kommandoen g|fffd|r at man ikke kan inds|fffd|tte (paste)
    If Not CurrentlyRunning Then
        If Application.Calculation = xlCalculationManual Then
            Application.Calculation = xlCalculationAutomatic
        End If
    End If
End Sub



' InQuest injected base64 decoded content
' kz(!
' oj{Z
' .+-"x
' .j{b
' Z+a5
' )e"{
' kz(!
' oj{Z
' :.nW
' z)lm
' z)lm
' -.+-

INQUEST-PP=macro
