Attribute VB_Name = "Auswertung"
Private Sub Auswertung()
    
    On Error Resume Next
    'If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    Dim ws As Worksheet
    
    Dim P As String
    Dim W As String
    Dim x As String
    Dim Y As String
    Dim z As Integer
    
    P = "PSA_SOC#01"
    u = Chr(34) & "comply%" & Chr(34)
    W = Chr(34) & "-" & Chr(34)
    x = Chr(34) & "x" & Chr(34)
    Y = Chr(34) & Chr(34)
    
    PW = "PSA_SOC#01"
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    For Each ws In ActiveWorkbook.Worksheets
        
        If ws.name = "Info" Then
            ws.Unprotect P
            '*** Abfrage, ob Auswertung ***
            ws.Range("BQ8").FormulaLocal = "Auswertung"
            ws.Range("BR8").FormulaLocal = "=WENN(H4=" & u & ";WAHR;FALSCH)"
    
            '*** Summe von Einzelauswertungen ***
            ws.Range("AI21:AJ21").MergeCells = True
            ws.Range("AI21:AJ21").HorizontalAlignment = xlLeft
            ws.Range("AI21").FormulaLocal = "=WENN(BR8;WENN(ISTFEHLER(SUMME(AI23:AJ77)/(ANZAHL2(AI23:AJ77)-Z|fffd|HLENWENN(AI23:AJ77;" & W & _
            ")));" & W & ";SUMME(AI23:AJ77)/(ANZAHL2(AI23:AJ77)-Z|fffd|HLENWENN(AI23:AJ77;" & W & ")));" & Y & ")"
            ws.Range("AI21").NumberFormat = "0%"
            
            '*** Erkennen der relevanten Zeilennummer ***
            For i = 23 To 78
                If ws.Range("BN" & i) <> "" And ws.Range("BO" & i) <> "Template" Then
                        ws.Range("AI" & i & ":AJ" & i).MergeCells = True
                        ws.Range("AI" & i & ":AJ" & i).HorizontalAlignment = xlLeft
                        ws.Range("AI" & i).FormulaLocal = "=WENN(BR8;WENN(BN" & i & ";'" & ws.Range("BO" & i) & "'!$AC$1;" & W & ");" & Y & ")"
                        ws.Range("AI" & i).NumberFormat = "0%"
                End If
            Next i

        End If
        
        If Left$(ws.name, 2) = "SR" Then
                      
            ws.Unprotect
                      
            '*** Erkennen der relevanten Zeilennummer ***
            For i = 1 To 200
                If ws.name = Tabelle01.Range("BO" & i) Then
                        z = i
                        i = 200
                End If
            Next i
           
            '*** Formel f|fffd|r Erf|fffd|llungsgrad ***
            ws.Range("AC1").FormulaLocal = _
            "=Wenn(UND(Info!BR8;Info!BN" & z & ");100/(ANZAHL2($A6:$A300)-Z|fffd|HLENWENN($V6:$V300;" & x & "))/100*(Z|fffd|HLENWENN($S6:$S300;" _
            & x & ")+SUMMENPRODUKT((T6:T300=" & x & ")*(X6:X300<>" & x & ")*1)/2+SUMMENPRODUKT((T6:T300=" _
            & x & ")*(X6:X300=" & x & ")*1)+SUMMENPRODUKT((U6:U300=" & x & ")*(X6:X300=" & x & ")*1));" & Y & ")"
            
            '*** L|fffd|schen von bedingten Formatierungen ***
            ws.Range("AC1:AC3").FormatConditions.Delete
            ws.Range("AC1:AC3").Font.ColorIndex = xlAutomatic
            ws.Range("AC1:AC3").Font.TintAndShade = 0
            
            ws.Protect
        End If
    Next ws
    
    For Each ws In ActiveWorkbook.Worksheets
        If ws.name = "Info" Then
            ws.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowInsertingHyperlinks:=False, Password:=PW
            ws.EnableSelection = xlUnlockedCells
        End If
    Next ws

    Application.ScreenUpdating = True
    Application.EnableEvents = True
    
End Sub



Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Tab_ini                           'Haupt-Tabellen werden ggf. wieder auf Default-Name gesetzt
    With Application                  'Automatische Berechnung einschalten
        .Calculation = xlAutomatic
        .MaxChange = 0.001
    End With
    Schutz                           'Zulassen und Sperren von Bearbeiten
    
End Sub
Private Sub Tab_ini()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Dim Tab01 As String
    Dim Tab02 As String
    Dim Tab03 As String
    Dim Tab07 As String

    Tab01 = "Info"
    Tab02 = "FAQ & History"
    Tab03 = "Translation"
    Tab07 = "Delta"
    Tab08 = "Export"
        
    If Tabelle01.name <> Tab01 Then
        Tabelle01.name = Tab01
    End If
    If Tabelle02.name <> Tab02 Then
        Tabelle02.name = Tab02
    End If
    If Tabelle03.name <> Tab03 Then
        Tabelle03.name = Tab03
    End If
    If Tabelle07.name <> Tab07 Then
        Tabelle07.name = Tab07
    End If

End Sub

Private Sub Schutz()
'
' Schutz Makro
' Makro am 19.05.2010 von Wehder.Carsten
' Zulassen/Sperren von Bearbeiten
'
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Dim ws As Worksheet
    Dim edit As Boolean
    Dim reset As Boolean
               
    Application.ScreenUpdating = False
   
    If Tabelle01.Range("H3") = "Edit%" Then
        edit = True
        reset = False
    End If
    
    If Tabelle01.Range("H3") = "Reset%" Then
        edit = False
        reset = True
    End If
    
    For Each ws In ActiveWorkbook.Worksheets
            
            If ws.Range("A1") <> "Info" And ws.Range("A1") <> "Translation" And ws.Range("A1") <> "FAQ & History" Then
                If edit Or reset Then
                    ActiveWorkbook.Unprotect
                    ws.Unprotect
                    ws.Visible = xlSheetVisible
                    ws.Columns("C:E").EntireColumn.Hidden = False
                    ws.Select
                    ActiveWindow.DisplayHeadings = edit
                    ws.Range("B4").Select
                    If reset Then
                        ws.Columns("C:E").EntireColumn.Hidden = True
                        ws.Protect DrawingObjects:=False, Contents:=True, Scenarios:= _
                        True, AllowFiltering:=True
                        ws.Visible = xlSheetHidden
                    End If
                    Tabelle01.Select
                    ActiveWorkbook.Protect
                Else
                    If ws.ProtectContents = False Then
                        ws.Protect DrawingObjects:=False, Contents:=True, Scenarios:= _
                        True, AllowFiltering:=True
                    End If
                End If
            End If
    Next ws
    Application.ScreenUpdating = True
End Sub
Private Sub PWaus()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Dim PW As String
    PW = "PSA_SOC#01"
    If Tabelle01.ProtectContents = True Then
        Tabelle01.Unprotect PW
        If Tabelle01.Range("H3") = "Macro%" Then
            Tabelle01.Range("R1") = PW
        Else
            Tabelle01.Range("R1") = ""
        End If
    End If
    If Tabelle02.ProtectContents = True Then
        Tabelle02.Unprotect PW
    End If
    If Tabelle03.ProtectContents = True Then
        Tabelle03.Unprotect PW
    End If
    
End Sub
Private Sub PWan()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
      
    Dim PW As String
    PW = "PSA_SOC#01"
      
    If Tabelle01.Range("H3") = "Edit%" Then
        PWaus
        Tabelle01.Range("B1") = True
    Else
        If Tabelle01.Range("B1") = True Then
            Tabelle01.Range("B1") = False
            Tabelle01.Range("H3") = "Reset%"
        End If
        If Tabelle01.ProtectContents = False Or Tabelle02.ProtectContents = False Or Tabelle03.ProtectContents = False Then
            If Tabelle01.Range("H3") <> "Translation%" And Tabelle01.Range("H3") <> "Edit%" And Tabelle01.Range("H3") <> "Master%" Then
                Tabelle01.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowInsertingHyperlinks:=False, Password:=PW
                Tabelle01.EnableSelection = xlUnlockedCells
            Else
                Tabelle01.Protect DrawingObjects:=False, Contents:=True, Scenarios:=False, AllowInsertingHyperlinks:=True, Password:=PW
                Tabelle01.EnableSelection = xlNoRestrictions
            End If
            Tabelle02.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, Password:=PW
            Tabelle03.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, Password:=PW
        End If
    End If
End Sub
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    Dim B As Boolean
    B = True
 
    ActiveWindow.Zoom = IIf(B, 100, 100)
    ActiveWindow.ScrollColumn = 1
End Sub










Attribute VB_Name = "Hash"
Public sh As String, sSecret As String
Private Sub hash(tmp)

    'run this to test md5, sha1, sha2/256, sha384, sha2/512 with salt, or sha2/512
    Dim sIn As String, sOut As String, b64 As Boolean
    'Dim sH As String, sSecret As String

    'insert the text to hash within the sIn quotes
    'note that this would usually be some private string
    sIn = tmp & ""
    'sIn = ""
    sSecret = "" 'secret key for StrToSHA512Salt only
    
    'select as required
    b64 = False   'output hex
    'b64 = True   'output base-64
    
    'enable any one
    'sH = MD5(sIn, b64)
    'sH = SHA1(sIn, b64)
    sh = SHA256(sIn, b64)
    'sH = SHA384(sIn, b64)
    'sH = StrToSHA512Salt(sIn, sSecret, b64)
    'sH = SHA512(sIn, b64)
    
    'Debug.Print sH & vbNewLine & Len(sH) & " characters in length"
    'MsgBox sH & vbNewLine & Len(sH) & " characters in length"
   
End Sub

Public Function MD5(ByVal sIn As String, Optional bB64 As Boolean = 0) As String
    'Set a reference to mscorlib 4.0 64-bit
    
    'Test with empty string input:
    'Hex:   d41d8cd98f00...etc
    'Base-64: 1B2M2Y8Asg...etc
        
    Dim oT As Object, oMD5 As Object
    Dim TextToHash() As Byte
    Dim bytes() As Byte
        
    Set oT = CreateObject("System.Text.UTF8Encoding")
    Set oMD5 = CreateObject("System.Security.Cryptography.MD5CryptoServiceProvider")
 
    TextToHash = oT.Getbytes_4(sIn)
    bytes = oMD5.ComputeHash_2((TextToHash))
 
    If bB64 = True Then
       MD5 = ConvToBase64String(bytes)
    Else
       MD5 = ConvToHexString(bytes)
    End If
        
    Set oT = Nothing
    Set oMD5 = Nothing

End Function

Public Function SHA1(sIn As String, Optional bB64 As Boolean = 0) As String
    'Set a reference to mscorlib 4.0 64-bit
    
    'Test with empty string input:
    '40 Hex:   da39a3ee5e6...etc
    '28 Base-64:   2jmj7l5rSw0yVb...etc
    
    Dim oT As Object, oSHA1 As Object
    Dim TextToHash() As Byte
    Dim bytes() As Byte
            
    Set oT = CreateObject("System.Text.UTF8Encoding")
    Set oSHA1 = CreateObject("System.Security.Cryptography.SHA1Managed")
    
    TextToHash = oT.Getbytes_4(sIn)
    bytes = oSHA1.ComputeHash_2((TextToHash))
        
    If bB64 = True Then
       SHA1 = ConvToBase64String(bytes)
    Else
       SHA1 = ConvToHexString(bytes)
    End If
            
    Set oT = Nothing
    Set oSHA1 = Nothing
    
End Function

Public Function SHA256(sIn As String, Optional bB64 As Boolean = 0) As String
    'Set a reference to mscorlib 4.0 64-bit
    
    'Test with empty string input:
    '64 Hex:   e3b0c44298f...etc
    '44 Base-64:   47DEQpj8HBSa+/...etc
    
    Dim oT As Object, oSHA256 As Object
    Dim TextToHash() As Byte, bytes() As Byte
    
    Set oT = CreateObject("System.Text.UTF8Encoding")
    Set oSHA256 = CreateObject("System.Security.Cryptography.SHA256Managed")
    
    TextToHash = oT.Getbytes_4(sIn)
    bytes = oSHA256.ComputeHash_2((TextToHash))
    
    If bB64 = True Then
       SHA256 = ConvToBase64String(bytes)
    Else
       SHA256 = ConvToHexString(bytes)
    End If
    
    Set oT = Nothing
    Set oSHA256 = Nothing
    
End Function

Public Function SHA384(sIn As String, Optional bB64 As Boolean = 0) As String
    'Set a reference to mscorlib 4.0 64-bit
    
    'Test with empty string input:
    '96 Hex:   38b060a751ac...etc
    '64 Base-64:   OLBgp1GsljhM2T...etc
    
    Dim oT As Object, oSHA384 As Object
    Dim TextToHash() As Byte, bytes() As Byte
    
    Set oT = CreateObject("System.Text.UTF8Encoding")
    Set oSHA384 = CreateObject("System.Security.Cryptography.SHA384Managed")
    
    TextToHash = oT.Getbytes_4(sIn)
    bytes = oSHA384.ComputeHash_2((TextToHash))
    
    If bB64 = True Then
       SHA384 = ConvToBase64String(bytes)
    Else
       SHA384 = ConvToHexString(bytes)
    End If
    
    Set oT = Nothing
    Set oSHA384 = Nothing
    
End Function

Public Function SHA512(sIn As String, Optional bB64 As Boolean = 0) As String
    'Set a reference to mscorlib 4.0 64-bit
    
    'Test with empty string input:
    '128 Hex:   cf83e1357eefb8bd...etc
    '88 Base-64:   z4PhNX7vuL3xVChQ...etc
    
    Dim oT As Object, oSHA512 As Object
    Dim TextToHash() As Byte, bytes() As Byte
    
    Set oT = CreateObject("System.Text.UTF8Encoding")
    Set oSHA512 = CreateObject("System.Security.Cryptography.SHA512Managed")
    
    TextToHash = oT.Getbytes_4(sIn)
    bytes = oSHA512.ComputeHash_2((TextToHash))
    
    If bB64 = True Then
       SHA512 = ConvToBase64String(bytes)
    Else
       SHA512 = ConvToHexString(bytes)
    End If
    
    Set oT = Nothing
    Set oSHA512 = Nothing
    
End Function

Function StrToSHA512Salt(ByVal sIn As String, ByVal sSecretKey As String, _
                           Optional ByVal b64 As Boolean = False) As String
    'Returns a sha512 STRING HASH in function name, modified by the parameter sSecretKey.
    'This hash differs from that of SHA512 using the SHA512Managed class.
    'HMAC class inputs are hashed twice;first input and key are mixed before hashing,
    'then the key is mixed with the result and hashed again.
    
    Dim asc As Object, enc As Object
    Dim TextToHash() As Byte
    Dim SecretKey() As Byte
    Dim bytes() As Byte
    
    'Test results with both strings empty:
    '128 Hex:    b936cee86c9f...etc
    '88 Base-64:   uTbO6Gyfh6pd...etc
    
    'create text and crypto objects
    Set asc = CreateObject("System.Text.UTF8Encoding")
    
    'Any of HMACSHAMD5,HMACSHA1,HMACSHA256,HMACSHA384,or HMACSHA512 can be used
    'for corresponding hashes, albeit not matching those of managed classes.
    Set enc = CreateObject("System.Security.Cryptography.HMACSHA512")

    'make a byte array of the text to hash
    bytes = asc.Getbytes_4(sIn)
    'make a byte array of the private key
    SecretKey = asc.Getbytes_4(sSecretKey)
    'add the private key property to the encryption object
    enc.Key = SecretKey

    'make a byte array of the hash
    bytes = enc.ComputeHash_2((bytes))
    
    'convert the byte array to string
    If b64 = True Then
       StrToSHA512Salt = ConvToBase64String(bytes)
    Else
       StrToSHA512Salt = ConvToHexString(bytes)
    End If
    
    'release object variables
    Set asc = Nothing
    Set enc = Nothing

End Function

Private Function ConvToBase64String(vIn As Variant) As Variant

    Dim oD As Object
      
    Set oD = CreateObject("MSXML2.DOMDocument")
      With oD
        .LoadXML "<root />"
        .DocumentElement.DataType = "bin.base64"
        .DocumentElement.nodeTypedValue = vIn
      End With
    ConvToBase64String = Replace(oD.DocumentElement.Text, vbLf, "")
    
    Set oD = Nothing

End Function

Private Function ConvToHexString(vIn As Variant) As Variant

    Dim oD As Object
      
    Set oD = CreateObject("MSXML2.DOMDocument")
      
      With oD
        .LoadXML "<root />"
        .DocumentElement.DataType = "bin.Hex"
        .DocumentElement.nodeTypedValue = vIn
      End With
    ConvToHexString = Replace(oD.DocumentElement.Text, vbLf, "")
    
    Set oD = Nothing

End Function






Attribute VB_Name = "Import"
Private Sub Import()
    Dim Quelle As Object, Ziel As Object
    Dim Datei As String

    On Error GoTo Fehler
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub

    '*** Dialog "Datei |fffd|ffnen" anzeigen ****************************************************
    Datei = Application.GetOpenFilename("Excel-Dateien(*.xls*),*xls")
        
    '*** Abbrechen falls keine Datei ausgew|fffd|hlt ********************************************
    If Datei = "Falsch" Then
        MsgBox "keine Datei ausgew|fffd|hlt", , "Abbruch"
        Exit Sub
    End If

    Call Userform_Start '*** Einblenden eines Hinweises zur Zeitdauer ***********************

    '*** Zeitstempel *****************************************************************
    If Worksheets("Info").Range("BR5").Locked Then
        Worksheets("Info").Range("H5") = Format(Now, "hh" & ":" & "mm" & ":" & "ss")
        Worksheets("Info").Range("H6") = ""
    Else
        Worksheets("Info").Range("BR5") = Format(Now, "hh" & ":" & "mm" & ":" & "ss")
        Worksheets("Info").Range("BR6") = ""
    End If

    Application.ScreenUpdating = False

    d_file = ActiveWorkbook.name
    
    '*** Ausgew|fffd|hlte Datei |fffd|ffnen ****************************************************
    Workbooks.Open Filename:=Datei
    s_file = Right(Datei, InStr(1, StrReverse(Datei), "\") - 1)
    Windows(d_file).Activate

    Call Import_02(s_file, d_file)

    '*** Zeitstempel *****************************************************************
    If Worksheets("Info").Range("BR5").Locked Then
        Worksheets("Info").Range("H6") = Format(Now, "hh" & ":" & "mm" & ":" & "ss")
    Else
        Worksheets("Info").Range("BR6") = Format(Now, "hh" & ":" & "mm" & ":" & "ss")
    End If

    Exit Sub

Fehler:
    MsgBox "FehlerNr.: " & Err.Number & vbNewLine & vbNewLine _
    & "Beschreibung: " & Err.Description _
    , vbCritical, "Fehler"
End Sub

Private Sub Import_02(s_file, d_file)
'
' Import Makro
'

    On Error Resume Next
    'If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Application.ScreenUpdating = False
  
    Dim anf As String     '*** anf = Variable f|fffd|r Anforderungs-Doc, z.B. 3.01 *****
    Dim anf1 As String
    Dim i As Integer
    Dim ges As Integer    '*** ges = Gesamtanzahlvariable *************************
    Dim arr(100, 3) As Variant
    Dim ws As Worksheet
    
   
    ges = 0
    
    For Each ws In Workbooks(d_file).Worksheets
        
        If InStr(ws.name, "PR ") Or InStr(ws.name, "SR ") Then
            '*** Aufheben des Blattschutzes ***************************************
            ws.Unprotect
            
            'L|fffd|schen aller vorhandenen Anforderungen
            ws.Range("A7:BY2000").ClearContents
            
            '*** Entfernen von "PR " bzw. "SR " ***********************************
            d_sheet = Right(ws.name, Len(ws.name) - 3)
            '*** Ermittlung des n|fffd|chsten Leerzeichen von Links ********************
            i = InStr(1, d_sheet, " ") - 1
            '*** Abschneiden nach erstem Leerzeichen von Links ********************
            anf = Left(d_sheet, i)
            arr(ges, 1) = anf
            arr(ges, 2) = ws.name
            ges = ges + 1
        End If
    
    Next ws
       
    For i = 0 To ges
        
        anf = "SoC " & CStr(arr(i, 1))
        
        ' Zusatz wegen falscher Do-Bezeichnung im Portal
        ' alle Punkte, Binde- und Unterstriche werden entfernt
        
        anf = Replace(anf, ".", "")
        anf = Replace(anf, "_", "")
        anf = Replace(anf, "-", "")
         
        For Each ws In Workbooks(s_file).Worksheets
            
            anf1 = Replace(ws.name, ".", "")
            anf1 = Replace(anf1, "_", "")
            anf1 = Replace(anf1, "-", "")
            
            If anf1 = anf Then
                arr(i, 3) = ws.name
            End If
        Next ws
        
    Next i
        
    For i = 0 To ges
        
        If arr(i, 3) <> "" Then
            
            Call |fffd|bernahme(s_file, arr(i, 3), d_file, arr(i, 2))
                      
        End If
        
    Next i
        
    Workbooks(s_file).Close
    
    Call Bereinigung
    
    Application.ScreenUpdating = True

End Sub

Private Sub |fffd|bernahme(s_file, s_sheet, d_file, d_sheet)
    
    On Error Resume Next
    'If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    Dim ende As Integer
    Dim z As Integer
    Dim nr_id As String
    Dim nr_doc As String
    Dim at As String
    Dim mas As String
    Dim Ref As String
    
    '*** Erkennung, ob Quell-Datei neu/alt ********************************************
    If Workbooks(s_file).Sheets(s_sheet).Cells(7, 1) <> "" Then
        z = 2
        nr_s = "A8:A202"      '*** Position von Anforderungsnummer und ID ****************
        id_s = "B8:B202"      '*** Position von Anforderungsnummer und ID ****************
        at_s = "C8:D202"      '*** Position vom Anforderungstext *************************
        mas_s = "E8:F202"     '*** Position vom Master-Soc ******************************
        ref_s = ""
    Else
        z = 3
        nr_s = "A9:A203"    '*** Position von Anforderungsnummer und ID ****************
        id_s = "B9:B203"    '*** Position von ID ***************************************
        at_s = "E9:F203"    '*** Position vom Anforderungstext *************************
        mas_s = "G9:H203"   '*** Position vom Master-Soc *******************************
        ref_s = "C9:D203"   '*** Position vom Referenz- und Migrationnummer ************
        ref_d = "AZ6:BA200" '*** Position vom Referenz- und Migrationnummer ************
        doc_s = "D3"        '*** Position von Dokumentnummer ***************************
        doc_d = "AZ5"       '*** Position von Dokumentnummer ***************************
    End If
    
    
    '*** Erkennung, ob Ziel-Datei neu/alt ********************************************
    If Workbooks(d_file).Sheets(d_sheet).Cells(5, 2) <> "Req-ID" Then
        nr_d = "A6:A200"    '*** Position von Anforderungsnummer ****************
        id_d = ""
        at_d = "C6:D200"    '*** Position vom Anforderungstext *************************
        
        If Workbooks(d_file).Sheets(d_sheet).Range("F5") = "Status" Then
            mas_d = ""          '*** keine Master-SoC **********************************
        Else
            mas_d = "F9:G203"   '*** Position vom Master-Soc ******************************
        End If
    Else
        nr_d = "A6:A200" '*** Position von Anforderungsnummer und ID ****************
        id_d = "B6:B200"
        at_d = "D6:E200"    '*** Position vom Anforderungstext *************************
        mas_d = "F6:G200"   '*** Position vom Master-Soc ******************************
    End If
       
    ende = Workbooks(s_file).Sheets(s_sheet).Cells(Cells.Rows.count, 2).End(xlUp).Row - z '** 2 == Spalte B
    Workbooks(d_file).Sheets(d_sheet).Unprotect
    
    '*** L|fffd|schen des Inhalts der Masterzeile *****************************************
    If id_d = "" Then
        Workbooks(d_file).Sheets(d_sheet).Range("A6").ClearContents
        Workbooks(d_file).Sheets(d_sheet).Range("C6:E6").ClearContents
        If mas_d = "" Then
            Workbooks(d_file).Sheets(d_sheet).Range("G6:AZ6").ClearContents
        Else
            Workbooks(d_file).Sheets(d_sheet).Range("Q6:AZ6").ClearContents
        End If
    Else
        Workbooks(d_file).Sheets(d_sheet).Range("A6:B6").ClearContents
        Workbooks(d_file).Sheets(d_sheet).Range("D6:O6").ClearContents
        Workbooks(d_file).Sheets(d_sheet).Range("R6:AZ6").ClearContents
    End If
    '*** L|fffd|schen aller Folgezeilen ***************************************************
    Workbooks(d_file).Sheets(d_sheet).Range("A7:AZ200").Delete
    Workbooks(d_file).Sheets(d_sheet).Rows("6:6").Copy
    Workbooks(d_file).Sheets(d_sheet).Rows("7:" & ende).PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    '*** Einlesen von Anforderungsnummer und ID **************************************
    Workbooks(s_file).Sheets(s_sheet).Range(nr_s).Copy
    Workbooks(d_file).Sheets(d_sheet).Range(nr_d).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    '*** Einlesen von ID *************************************************************
    If id_d <> "" Then
        Workbooks(s_file).Sheets(s_sheet).Range(id_s).Copy
        Workbooks(d_file).Sheets(d_sheet).Range(id_d).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
            :=False, Transpose:=False
    End If
    
    '*** Einlesen der Anforderungstexte **********************************************
    Workbooks(s_file).Sheets(s_sheet).Range(at_s).Copy
    Workbooks(d_file).Sheets(d_sheet).Range(at_d).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    '*** Einlesen der Master SoC Relevanz  *******************************************
    '*** Master-SoC wird in Version 3.07 nicht automatisch |fffd|bernommen, deshalb auskommentiert
    'If mas_d <> "" Then
        'Workbooks(s_file).Sheets(s_sheet).Range(mas_s).Copy
        'Workbooks(d_file).Sheets(d_sheet).Range(mas_d).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
            :=False, Transpose:=False
    'End If
    
    '*** Einlesen der Referenznummer, wenn vorhanden**********************************
    Workbooks(d_file).Sheets(d_sheet).Columns("AV:BD").Delete Shift:=xlToLeft
    If z = 3 Then
        Workbooks(s_file).Sheets(s_sheet).Range(ref_s).Copy
        Workbooks(d_file).Sheets(d_sheet).Range(ref_d).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
            :=False, Transpose:=False
        
        Workbooks(d_file).Sheets(d_sheet).Columns(ref_d).NumberFormat = "00000"
        'Workbooks(d_file).Sheets(d_sheet).Columns(ref_d).EntireColumn.Hidden = True
    End If
    
    '*** Einlesen Nr Anforderungsdokument **********************************************
    Workbooks(d_file).Sheets(d_sheet).Range(doc_d) = Workbooks(s_file).Sheets(s_sheet).Range(doc_s)

    '*** Formatieren der Zeilen ******************************************************
    Workbooks(d_file).Sheets(d_sheet).Rows("6:" & ende).EntireRow.AutoFit
    Workbooks(d_file).Sheets(d_sheet).Protect
    
End Sub
Private Sub Bereinigung()
'
'Zur Bereinigung der SoC-Vorlage und Z|fffd|hlen der Anforderungen
'

    On Error Resume Next
    'If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Application.ScreenUpdating = False
    
    Dim vBereich As String
    
    vErsetzen = True
    
    vBereich = "D6:E202"
    
    For Each ws In ActiveWorkbook.Worksheets
        
        If InStr(ws.name, "PR ") Or InStr(ws.name, "SR ") Then
            ws.Unprotect
             
            If vErsetzen Then
        
            ws.Range(vBereich).Replace What:="\u201e", Replacement:=Chr(34), LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
        
            ws.Range(vBereich).Replace What:="\u201c", Replacement:=Chr(34), LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
        
            ws.Range(vBereich).Replace What:=Chr(10) & "[list]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
            
            ws.Range(vBereich).Replace What:="[list]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
    
            ws.Range(vBereich).Replace What:="[list=1]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
    
            ws.Range(vBereich).Replace What:="[/list]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
   
            ws.Range(vBereich).Replace What:=Chr(10) & "[~*]", Replacement:="[*]", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
        
            ws.Range(vBereich).Replace What:="[~*]", Replacement:=Chr(10) & Chr(149) & Chr(32), LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
        
            ws.Range(vBereich).Replace What:=Chr(10) & Chr(10) & Chr(149), Replacement:=Chr(10) & Chr(149), LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
        
            ws.Range(vBereich).Replace What:="[color=#4b4b4b]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False

            ws.Range(vBereich).Replace What:="[color=#0000ff]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False

            ws.Range(vBereich).Replace What:="[/color]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False

            ws.Range(vBereich).Replace What:="[b]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False

            ws.Range(vBereich).Replace What:="[/b]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False

            ws.Range(vBereich).Replace What:="[i]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False

            ws.Range(vBereich).Replace What:="[/i]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False

            ws.Range(vBereich).Replace What:="[url=", Replacement:=Chr(91), LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False

            ws.Range(vBereich).Replace What:="[url]", Replacement:=Chr(91), LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
            
            ws.Range(vBereich).Replace What:="[/url]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
            
            ws.Range(vBereich).Replace What:="[http", Replacement:="http", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
            
            ws.Range(vBereich).Replace What:=" http", Replacement:="http", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
            
            ws.Range(vBereich).Replace What:="[table=0]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
            
            ws.Range(vBereich).Replace What:="[/table]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
            
            ws.Range(vBereich).Replace What:="[tr]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
            
            ws.Range(vBereich).Replace What:="[/tr]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
            
            ws.Range(vBereich).Replace What:="[td]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
        
            ws.Range(vBereich).Replace What:="[/td]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
            
            ws.Range(vBereich).Replace What:="[size=100]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
            
            ws.Range(vBereich).Replace What:="[/size]", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
            
            ws.Range(vBereich).Replace What:=Chr(93) & Chr(32), Replacement:=Chr(93), LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False

            ws.Range(vBereich).Replace What:=Chr(93), Replacement:=Chr(93) & Chr(32), LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
            ReplaceFormat:=False
        
        End If
    
    End If
    
    Next ws
    
End Sub


Private Sub Userform_Start()
'******************************************************************************************************
'*** Makro zum Darstellen der Verarbeitungsdauer plus Benutzerhinweis *********************************
'******************************************************************************************************
    On Error Resume Next
    'If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    Application.OnTime Now + TimeValue("00:00:02"), "Schlie|fffd|en"
    UserForm1.Show vbModeless
    Application.Wait (Now + TimeValue("0:00:01"))
End Sub

Private Sub Inhalt_l|fffd|schen()
'
' Import Makro
'

    Dim ws As Worksheet

    For Each ws In ActiveWorkbook.Worksheets
        
        If InStr(ws.name, "PR ") Or InStr(ws.name, "SR ") Then
            '*** Aufheben des Blattschutzes ***************************************
            ws.Unprotect
            ws.Range("A7:BZ200").Delete
        End If
    
    Next ws

End Sub

Attribute VB_Name = "Modul1"
Private Sub Schlie|fffd|en()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Unload UserForm1
End Sub

Private Sub content()
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Dim count1 As Integer           '*** Z|fffd|hler f|fffd|r Anforderungen innerhalb Anf-Doc
    Dim count2 As Integer           '*** Z|fffd|hler f|fffd|r Anforderungen innerhalb Anf-Doc
    Dim start As Integer           '*** Z|fffd|hler f|fffd|r Anforderungen aller Anf-Doc
    Dim ende As Integer
    Dim fill As Boolean
    Dim ws As Worksheet
    Dim SC As String
    Dim AK As String
    Dim KO As String

    fill = True
    
    start = 6
    SC = "X"
    AK = "Test"
    KO = "Test"
    
    If fill Then
        ende = 60
    Else
        ende = 70
    End If
    
    For Each ws In Worksheets
        If InStr(ws.name, "PR ") Or InStr(ws.name, "SR ") Then
            count2 = count2 + 1
            For count1 = start To 200
                If Not IsEmpty(ws.Range("AZ" & count1)) Then
                    If fill Then
                        If ws.Range("T" & count1) <> SC Then ws.Range("T" & count1) = SC
                        If ws.Range("W" & count1) <> AK Then ws.Range("W" & count1) = AK
                        If ws.Range("Y" & count1) <> KO Then ws.Range("Y" & count1) = KO
                    Else
                        If ws.Range("S" & count1) <> "" Then ws.Range("S" & count1) = ""
                        If ws.Range("T" & count1) <> "" Then ws.Range("T" & count1) = ""
                        If ws.Range("U" & count1) <> "" Then ws.Range("U" & count1) = ""
                        If ws.Range("V" & count1) <> "" Then ws.Range("V" & count1) = ""
                        If ws.Range("W" & count1) <> "" Then ws.Range("W" & count1) = ""
                        If ws.Range("Y" & count1) <> "" Then ws.Range("Y" & count1) = ""
                    End If
                Else
                    Exit For
                End If
            Next
        End If
        If count2 = ende Then Exit For
    Next

    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

End Sub
Private Sub Link_setzen()
'
' Link zum Tabellenblatt "Info" setzen
'
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Dim ws As Worksheet
    Dim sh As Object
    Dim Oben As Integer
    Dim Links As Integer
    Dim Breite As Integer
    Dim H|fffd|he As Integer
    Dim Link As Boolean

    Links = 1
    Oben = 1
    Breite = 30
    H|fffd|he = 25
    Link = True
    
    For Each ws In Worksheets
        If InStr(ws.name, "PR ") Or InStr(ws.name, "SR ") Then
            ws.Unprotect
            '*** Pr|fffd|fen, ob Rechteckeck vorhanden, dann l|fffd|schen
            For Each sh In ws.Shapes
                If sh.name = "link" Then
                    sh.Delete
                End If
            Next sh
            
            '*** Shape erstellen, formatieren und Link setzen
            If Link Then
                Set sh = ws.Shapes.AddShape(msoShapeRectangle, Links, Oben, Breite, H|fffd|he)
                sh.name = "link"
                sh.fill.Visible = msoFalse
                sh.TextFrame.Characters.Text = "9"
                sh.TextFrame.Characters.Font.Color = RGB(216, 0, 116)
                sh.TextFrame.Characters.Font.name = "Webdings"
                sh.TextFrame.Characters.Font.Size = 12
                sh.Line.Visible = msoFalse
                ws.Hyperlinks.Add Anchor:=sh, Address:="", SubAddress:="Info!A1", ScreenTip:="Info"
            End If
            ws.Protect
        End If
    Next
    
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

End Sub

Attribute VB_Name = "Tabelle01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public edit As Boolean
Private Sub Worksheet_Activate()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    If ActiveCell <> Tabelle01.Range("AK6") Then
        Tabelle01.Range("AK6").Select
    End If
End Sub
Private Sub Worksheet_Calculate()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Tab_ini
    Anzeige_Tab
End Sub

Private Sub Tab_ini()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Dim Tab01 As String
    Dim Tab02 As String
    Dim Tab03 As String
    Dim Tab07 As String

    Tab01 = "Info"
    Tab02 = "FAQ & History"
    Tab03 = "Translation"
    Tab07 = "Delta"
        
    If Tabelle01.name <> Tab01 Then
        Tabelle01.name = Tab01
    End If
    If Tabelle02.name <> Tab02 Then
        Tabelle02.name = Tab02
    End If
    If Tabelle03.name <> Tab03 Then
        Tabelle03.name = Tab03
    End If
    If Tabelle07.name <> Tab07 Then
        Tabelle07.name = Tab07
    End If

End Sub
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim B As Boolean
    Dim varZoom As Variant
    
    On Error Resume Next
    'B = Target.Validation.InCellDropdown

    'If Target.Column = 37 And Target.Row = 12 Then
    '    If ActiveWindow.Zoom = IIf(B, 100, 100) Then
    '        ActiveWindow.Zoom = IIf(B, 150, 100)
    '        ActiveWindow.ScrollColumn = 25
    '    Else
    '        ActiveWindow.Zoom = IIf(B, 100, 100)
    '        ActiveWindow.ScrollColumn = 1
        
    '    End If
    'End If
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
    
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    If Target.Column <> 8 And Target.Column <> 37 And Target.Column <> 63 Then Exit Sub
    
    Dim B As Boolean
    Dim i As Integer    'Variable zum Z|fffd|hlen
    Dim S1 As String    'Variable zur Definition der Vorgabenspalte
    Dim S2 As String    'Variable zur Definition der Antwortspalte
    Dim S3 As String    'Variable Eingabe IT/NT System
    Dim z As Integer    'Variable zur Ermittlung der Startzeile
    Dim c1 As String    'Variable zur Ermittlung der Sprachwahlzelle
    Dim z0 As Integer   'Variable zur Ermittlung der aktuellen Zeile
    Dim s0 As Integer   'Variable zur Ermittlung der aktuellen Spalte
    Dim f0 As Integer   'Zeile f|fffd|r Formel f|fffd|r die G|fffd|ltigkeit
    Dim f1 As String    'Formel f|fffd|r die G|fffd|ltigkeit
    
    B = Target.Validation.InCellDropdown
    
    Application.EnableEvents = False
    
    If Target.Column = 63 And Target.Row = 12 Then
        If Tabelle01.Range("BK12") = "" Then
            Tabelle01.Range("BK12") = 0
        End If
        Tabelle01.Range("AK12") = ""
    End If
    
    ' Festhalten der Tab-Beschriftungen
    If Target.Column = 67 Then
        Range("BO11:BO85").Select
        Selection.Copy
        Range("BQ11").Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
            :=False, Transpose:=False
    End If
    
    'Falls die Sprachauswahl gel|fffd|scht/ge|fffd|ndert wird, R|fffd|cksetzen auf Englisch
    If Target.Column = 37 And Target.Row = 6 Then
        c1 = Tabelle01.Range("C1")                        'In dieser Zelle steht die Sprachauswahl
        If Tabelle03.Range("D2") = False Then
            Tabelle01.Range(c1) = Tabelle03.Range("B3")
        End If
        If Tabelle01.Range("F1") <> Tabelle01.Range("AK12") And Tabelle01.Range("AJ12") = 2 Then
            Tabelle01.Range("AK12") = Tabelle01.Range("F1")
        End If
        
        '|fffd|berpr|fffd|fung , ob Defaults in Dokumentationsfelder ge|fffd|ndert werden m|fffd|ssen
        z = 3
        S2 = "H"
        For i = z To z + 3
            If Tabelle03.Range("D3") Then
                If Tabelle01.Range(S2 & i) = Tabelle03.Range("C6") Then
                    Tabelle01.Range(S2 & i) = Tabelle03.Range("B6")
                End If
            Else
                If Tabelle01.Range(S2 & i) = Tabelle03.Range("B6") Then
                    Tabelle01.Range(S2 & i) = Tabelle03.Range("C6")
                End If
            End If
        Next i

        Application.EnableEvents = True
        Exit Sub
    End If
    
    'Deklaration Startzeile f|fffd|r die Dokumentinformation
    If Target.Column = 8 And Target.Row < 7 And Target.Row > 2 Then
        Application.ScreenUpdating = False
        PWaus
        
        z = 3
        S1 = "A"                            'In dieser Spalte wird ausgewertet, ob der Input von s2 gel|fffd|scht oder ein f|fffd|hrendes Leerzeichen enth|fffd|lt
        S2 = "H"                            'In dieser Spalte steht der Input
        S3 = LCase(Tabelle01.Range(S2 & z)) 'Dies ist der Input
        
        'Ermittlung, ob Edit oder Reset...
        If S3 = "reset%" Or S3 = "edit%" Or S3 = "translation%" Or S3 = "master%" Then
            If S3 = "master%" Then
                Range("BK12").Select
                With Selection.Font
                    .Color = -16776961
                    .TintAndShade = 0
                End With
                Selection.Locked = False
                Selection.FormulaHidden = False
            Else
                Range("BK12").Select
                'With Selection.Font
                '    .ThemeColor = xlThemeColorDark
                '    .TintAndShade = 0
                'End With
                Selection.Locked = True
                Selection.FormulaHidden = True
            End If
            Schutz
        End If
          
        '|fffd|berpr|fffd|fung der Dokumentinformation
        For i = z To z + 3
            If Tabelle01.Range(S2 & i) = "" Then
                If Tabelle03.Range("D3") Then
                    Tabelle01.Range(S2 & i) = Tabelle03.Range("B6")
                Else
                    Tabelle01.Range(S2 & i) = Tabelle03.Range("C6")
                End If
                Tabelle01.Range(S2 & i).Select
            End If
        Next i
        PWan
        Application.ScreenUpdating = True
    End If
    
    ' Master SoC Behandlung
    If Target.Column = 37 And Target.Row = 12 Or Target.Column = 63 And Target.Row = 12 Then
        ActiveWindow.Zoom = IIf(B, 100, 100)
        ActiveWindow.ScrollColumn = 1
        If Tabelle01.Range("F1") <> Tabelle01.Range("AK12") And Tabelle01.Range("AJ12") = 2 Then
            Tabelle01.Range("AK12") = Tabelle01.Range("F1")
        End If
        Application.ScreenUpdating = False
        PWaus
        Valid_Master
        
        f0 = CStr(Tabelle03.Range("C1"))
        f1 = "=IF(Translation!R3C4,Translation!R" & f0 & "C2,Translation!R" & f0 & "C3)"
        
        If Tabelle01.Range("AJ12") = 0 Then
            Tabelle01.Range("AK12").FormulaR1C1 = f1
            Tabelle01.Range("AK12").Select
            Selection.FormulaHidden = True
        Else
            If Tabelle01.Range("AK12").FormulaHidden And Tabelle01.Range("AJ12") = 2 Then
                Tabelle01.Range("AK12").Select
                Selection.FormulaHidden = False
            End If
        End If
        Tabelle01.Range("AK6").Select
        PWan
    End If
    Application.EnableEvents = True
End Sub
Private Sub Schutz()
'
' Schutz Makro
' Makro am 19.05.2010 von Wehder.Carsten
' Zulassen/Sperren von Bearbeiten
'
    
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
        
    Dim ws As Worksheet
    Dim edit As Boolean
    Dim zeile As Boolean
    Dim Spalte As Boolean
    Dim reset As Boolean
    Dim trans As Boolean
    Dim Master As Boolean
    Dim Country_Code As Integer
    Dim Sprache As String
    Dim count As Integer
    Dim valid_i As String
    Dim valid_z1 As Integer
    Dim valid_z2 As Integer
    
    Application.ScreenUpdating = False
   
    edit = False
    reset = False
    trans = False
    Master = False
   
    If LCase(Tabelle01.Range("H3")) = "edit%" Then
        edit = True
    End If
    If LCase(Tabelle01.Range("H3")) = "reset%" Then
        reset = True
    End If
    If LCase(Tabelle01.Range("H3")) = "translation%" Then
        trans = True
    End If
    If LCase(Tabelle01.Range("H3")) = "master%" Then
        Master = True
    End If
    
    
    ActiveWorkbook.Unprotect
    Application.EnableEvents = False
    ActiveWindow.DisplayHeadings = True
    
    For Each ws In ActiveWorkbook.Worksheets
        If ws.name <> Tabelle01.name And ws.name <> Tabelle02.name And ws.name <> Tabelle03.name _
        And ws.name <> Tabelle04.name And ws.name <> Tabelle06.name And ws.name <> Tabelle07.name Then
            If edit Or reset Or trans Or Master Then
                ws.Visible = xlSheetVisible
                ws.Unprotect
                ws.Select
                ws.Columns("B:AZ").EntireColumn.Hidden = False
                
                'Wenn durchlaufende Nummerierung
                'ws.Columns("A").EntireColumn.Hidden = false
                
                If ws.Range("B4") <> "" And Not edit Then
                    ws.Columns("F:P").EntireColumn.Hidden = True
                    ws.Columns("R").EntireColumn.Hidden = True
                    ws.Columns("AA:AB").EntireColumn.Hidden = True
                    
                End If
                
                If trans Then
                    Tabelle01.Range("AK6") = "English"
                    ws.Columns("F:AZ").EntireColumn.Hidden = True
                End If
                
                If Master Then
                    ws.Columns("D:E").EntireColumn.Hidden = True
                    
                    ws.Columns("F:P").EntireColumn.Hidden = False
                    ws.Columns("R:AZ").EntireColumn.Hidden = True
                End If
                 
                '****************************************************************
                ' Definitionen Spaltenbreiten
                '****************************************************************
                Spalte = True
                If Spalte Then
                    ws.Columns("A").ColumnWidth = 9        'Spalte  "Nr."
                    'ws.Columns("B").ColumnWidth = 13        'Spalte  "Name"
                    'ws.Columns("C:E").ColumnWidth = 40     'Spalten "Anforderungen"
                    'ws.Columns("F:O").ColumnWidth = 3      'Spalten "Master"
                    'ws.Columns("P:Q").ColumnWidth = 8      'Spalten "SecSet" und "Status"
                    'ws.Columns("R").ColumnWidth = 13       'Spalte  "Beantworter"
                    'ws.Columns("S:V").ColumnWidth = 6      'Spalten "Compliance"
                    'ws.Columns("W").ColumnWidth = 22       'Spalte  "Begr|fffd|ndung Compliance"
                    'ws.Columns("X").ColumnWidth = 11       'Spalte  "Akzeptanz"
                    'ws.Columns("Y").ColumnWidth = 22       'Spalte  "Begr|fffd|ndung Akzeptanz"
                    'ws.Columns("Z").ColumnWidth = 11       'Spalte  "Ma|fffd|nahme Nr."
                    'ws.Columns("AA").ColumnWidth = 11       'Spalte  "Test"
                    'ws.Columns("AB").ColumnWidth = 22       'Spalte  "Kommentar Test"
                End If
                '****************************************************************
                ' Ende Spaltenbreiten
                '****************************************************************
                
                '****************************************************************
                ' Definition der Zeilenformatierung
                '****************************************************************
                zeile = False
                If ws.name <> Tabelle04.name And zeile And ws.name <> Tabelle06.name And ws.name <> Tabelle07.name Then
                    'Tabelle04.Rows("5:5").Copy
                    'ws.Rows("5:5").Select
                    'Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
                    'SkipBlanks:=False, Transpose:=False
                    
                    For count = 6 To 150
                        If ws.Cells(count, 17) <> "" Then
                            Tabelle04.Range("H6:K6").Copy
                            ws.Cells(count, 8).Select
                            Selection.PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:= _
                            False, Transpose:=False
                            Tabelle04.Range("A6:Q6").Copy          '|fffd|bernahme der Referenzformatierung aus Template
                            ws.Cells(count, 1).Select
                            Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
                            SkipBlanks:=False, Transpose:=False
                            
                        Else
                            ws.Rows("6:200").EntireRow.AutoFit
                            ws.Range(count & ":200").Delete Shift:=xlUp
                            'ws.Columns("S:IV").Clear
                            count = 150
                        End If
                    Next count
                End If
                '****************************************************************
                ' Ende Zeilenformatierung
                '****************************************************************
                
                ActiveWindow.SmallScroll Down:=-300
                ActiveWindow.SmallScroll ToLeft:=20
                
                ActiveWindow.DisplayHeadings = edit
                                
                ws.Range("C4").Select
                             
                If reset Then
                    ws.Columns("D:P").EntireColumn.Hidden = True
                    ws.Columns("AZ:BA").EntireColumn.Hidden = True
                    
                    If ws.Range("B4") = "" Then
                        ws.Columns("X:AB").EntireColumn.Hidden = True
                    End If
                    ws.Protect DrawingObjects:=False, Contents:=True, Scenarios:= _
                        True, AllowFiltering:=True
                        ws.Visible = xlSheetHidden
                End If
                 
                If trans Or Master Then
                    ws.Protect DrawingObjects:=False, Contents:=True, Scenarios:= _
                        True, AllowFiltering:=True
                End If
                 
                Tabelle01.Select
            Else
                If ws.ProtectContents = False Then
                    ws.Protect DrawingObjects:=False, Contents:=True, Scenarios:= _
                    True, AllowFiltering:=True
                End If
            End If
        End If
    
    
    
    Next ws
    
    Tabelle01.Range("AK6").Select
    
    If edit Or trans Or Master Then
        Tabelle03.Visible = xlSheetVisible
        Tabelle04.Visible = xlSheetVisible
        If Not edit Then
            Tabelle02.Visible = xlSheetHidden
        End If
        If Master Then
            Tabelle04.Visible = xlSheetHidden
            Valid_Master
        End If
    Else
        Tabelle03.Visible = xlSheetHidden
        If reset Then
            Tabelle01.Range("H3") = " "
            Tabelle01.Range("H3").Select
            Selection.FormulaHidden = True
            Tabelle01.Columns("BK:BR").EntireColumn.Hidden = True
            ActiveWindow.DisplayHeadings = False
            Tabelle02.Visible = xlSheetVisible
            Tabelle03.Visible = xlSheetHidden
            Tabelle06.Visible = xlSheetHidden
            Tabelle07.Visible = xlSheetHidden
            Valid_Master
        End If
        Anzeige_Tab
    End If
    
    If edit Then
        Columns("BK:BR").EntireColumn.Hidden = False
        Tabelle06.Visible = xlSheetVisible
    Else
        Tabelle01.Range("BR5:BR6").ClearContents
        ActiveWorkbook.Protect
    End If
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    
End Sub
Private Sub PWaus()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    Dim PW As String
    PW = "PSA_SOC#01"
    
    If Tabelle01.ProtectContents = True Then
        Tabelle01.Unprotect PW
        If Tabelle01.Range("H3") = "Macro%" Then
            Tabelle01.Range("R1") = PW
        Else
            Tabelle01.Range("R1") = ""
        End If
    End If
    If Tabelle02.ProtectContents = True Then
        Tabelle02.Unprotect PW
    End If
    If Tabelle03.ProtectContents = True Then
        Tabelle03.Unprotect PW
    End If
    
End Sub
Private Sub PWan()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
      
    Dim PW As String
    PW = "PSA_SOC#01"
    
    Dim V As String
    V = LCase(Tabelle01.Range("H3"))
      
    If V = "edit%" Or V = "master%" Or V = "translation%" Then
        PWaus
        Tabelle01.Range("B1") = True
    Else
        If Tabelle01.Range("B1") = True Then
            Tabelle01.Range("B1") = False
            Tabelle01.Range("H3") = "reset%"
        End If
        If Tabelle01.ProtectContents = False Or Tabelle02.ProtectContents = False Or Tabelle03.ProtectContents = False Then
            If V <> "translation%" And V <> "edit%" And V <> "master%" Then
                Tabelle01.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowInsertingHyperlinks:=False, Password:=PW
                Tabelle01.EnableSelection = xlUnlockedCells
            Else
                Tabelle01.Protect DrawingObjects:=False, Contents:=True, Scenarios:=False, AllowInsertingHyperlinks:=True, Password:=PW
                Tabelle01.EnableSelection = xlNoRestrictions
            End If
            Tabelle02.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, Password:=PW
            Tabelle03.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, Password:=PW
        End If
    End If
    If V = "edit%" Or V = "master%" Then
       'Tabelle01.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, Password:=PW
    End If
End Sub
Private Sub Anzeige_Tab()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    Dim count As Integer
    Dim TabRef As String
    Dim Register As Integer
    Dim Anzeige As Integer
    Dim Wechsel As Boolean
    Dim Schutz As Boolean
    Dim System As String
      
    Wechsel = False
    Schutz = False
    Register = 0
    Anzeige = 0
    System = LCase(Tabelle01.Range("H3"))
            
    If System <> "edit%" And System <> "reset%" And System <> "translation%" And System <> "master%" Then
        For count = 1 To 100
        TabRef = Tabelle01.Cells(count, 67).Text
            If Tabelle01.Cells(count, 66) <> "" Then
                If Tabelle01.Cells(count, 66) = False And Sheets(TabRef).Visible = True Then
                    Anzeige = 1
                    Wechsel = True
                End If
                If Tabelle01.Cells(count, 66) = True And Sheets(TabRef).Visible = False Then
                    Anzeige = 2
                    Wechsel = True
                End If
                If Tabelle01.Cells(count, 66) = True Then
                    If Tabelle01.Cells(count, 34) = 1 And Sheets(TabRef).Tab.ColorIndex <> 43 Then
                        Register = 43                           'gr|fffd|nes Register
                    End If
                    If Tabelle01.Cells(count, 34) = 2 And Sheets(TabRef).Tab.ColorIndex <> 6 Then
                        Register = 6                            'gelbes Register
                    End If
                    If Tabelle01.Cells(count, 34) = 3 And Sheets(TabRef).Tab.ColorIndex <> 3 Then
                        Register = 3                            'rotes Register
                    End If
                Else
                    If Sheets(TabRef).Tab.ColorIndex <> 15 Then
                        Register = 15                           'graues Register
                    End If
                End If
                
                '*** Ein/Ausblenden von Registern ***************
                If Wechsel And Register = 0 Then
                    If Not Schutz Then
                        Application.ScreenUpdating = False
                        Application.EnableEvents = False
                        ActiveWorkbook.Unprotect
                        PWaus
                        Schutz = True
                    End If
                    If Anzeige = 1 Then
                        Sheets(TabRef).Visible = False
                        Tabelle01.Cells(count, 2).Select
                        Selection.Locked = True
                        Tabelle01.Cells(count, 34).Select
                        Selection.Locked = True
                    End If
                    If Anzeige = 2 Then
                        Sheets(TabRef).Visible = True
                        If Sheets(TabRef).ProtectContents = False Then
                            Sheets(TabRef).Protect DrawingObjects:=False, Contents:=True, Scenarios:= _
                            True, AllowFiltering:=True
                        End If
                        Tabelle01.Cells(count, 2).Select
                        Selection.Locked = False
                        Tabelle01.Cells(count, 34).Select
                        Selection.Locked = False
                    End If
                End If
                Anzeige = 0
                Wechsel = False
                '*** Einfaerben der Register ***************
                If Register > 0 Then
                    ActiveWorkbook.Unprotect
                    Sheets(TabRef).Tab.ColorIndex = Register
                    'Schutz = True
                    ActiveWorkbook.Protect Structure:=True, Windows:=False
                    Register = 0
                End If
              
            End If
            
        Next
        
        If Schutz Then
            ActiveWorkbook.Protect Structure:=True, Windows:=False
            If ActiveSheet.name = Tabelle01.name Then
                Range(Tabelle01.Range("C1")).Select
            End If
            PWan
            Application.EnableEvents = True
            Application.ScreenUpdating = True
        End If
    End If
    
End Sub

Private Sub Valid_Master()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    Dim valid_i As String
    Dim valid_z1 As Integer
    Dim valid_z2 As Integer
    
    'Anzahl der G|fffd|ltigkeitswerte f|fffd|r die Master SoC setzen
    valid_z1 = Tabelle01.Range("BR4")
    valid_z2 = valid_z1 + Tabelle01.Range("BK12")
    valid_i = "=$BO$" & CStr(valid_z1) & ":$BO$" & CStr(valid_z2)
    Tabelle01.Range("AK12:BJ12").Select
    
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:=valid_i
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = True
    End With

End Sub

Private Sub SchutzEntfernen()
    
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    For i = 65 To 66: For j = 65 To 66
    For k = 65 To 66: For L = 65 To 66
    For M = 65 To 66: For n = 65 To 66
    For O = 65 To 66: For P = 65 To 66
    For q = 65 To 66: For r = 65 To 66
    For s = 65 To 66: For t = 32 To 126
    ActiveSheet.Unprotect Chr(i) & _
    Chr(j) & Chr(k) & Chr(L) & _
    Chr(M) & Chr(n) & Chr(O) & _
    Chr(P) & Chr(q) & Chr(r) & _
    Chr(s) & Chr(t)
    Next t: Next s: Next r: Next q
    Next P: Next O: Next n: Next M
    Next L: Next k: Next j: Next i
    MsgBox "Blattschutz abgeschaltet"

End Sub








Attribute VB_Name = "Tabelle02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Activate()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Scroll1
End Sub
Private Sub Worksheet_Calculate()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Tab_ini
End Sub
Private Sub Tab_ini()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    Dim Tab01 As String
    Dim Tab02 As String
    Dim Tab03 As String
        
    Tab01 = "Info"
    Tab02 = "FAQ & History"
    Tab03 = "Translation"
        
    If Tabelle01.name <> Tab01 Then
        Tabelle01.name = Tab01
    End If
    If Tabelle02.name <> Tab02 Then
        Tabelle02.name = Tab02
    End If
    If Tabelle03.name <> Tab03 Then
        Tabelle03.name = Tab03
    End If

End Sub
Private Sub Scroll1()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Dim z As Integer
    z = Range("B1")
    ActiveWindow.SmallScroll up:=1000
    Range("B" & z).Select
End Sub
Private Sub Scroll2()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Dim z As Integer
    z = Range("C1")
    ActiveWindow.SmallScroll up:=1000
    ActiveWindow.SmallScroll Down:=z - 6
    Range("B" & z).Select
End Sub
Private Sub Scroll3()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Dim z As Integer
    z = Range("D1")
    ActiveWindow.SmallScroll up:=1000
    ActiveWindow.SmallScroll Down:=z - 6
    Range("B" & z).Select
End Sub

Attribute VB_Name = "Tabelle03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Calculate()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Tab_ini
End Sub
Private Sub Tab_ini()
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    Dim Tab01 As String
    Dim Tab02 As String
    Dim Tab03 As String

    Tab01 = "Info"
    Tab02 = "FAQ & History"
    Tab03 = "Translation"
        
    If Tabelle01.name <> Tab01 Then
        Tabelle01.name = Tab01
    End If
    If Tabelle02.name <> Tab02 Then
        Tabelle02.name = Tab02
    End If
    If Tabelle03.name <> Tab03 Then
        Tabelle03.name = Tab03
    End If
End Sub

Attribute VB_Name = "Tabelle04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Tabelle05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
'******************************************************************************************************
'*** Makro zum Refresh der Ein-/ausgeblendeten Anforderungen ******************************************
'******************************************************************************************************
    
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
   
    Unprotect
    
    Call Userform_Start '*** Einblenden eines Hinweises zur Zeitdauer ***********************
    
    Application.ScreenUpdating = False
    
    ende = Tabelle05.Cells(Cells.Rows.count, 1).End(xlUp).Row '1=Spalte A
    
    If Columns("A:A").EntireColumn.Hidden = False Then
        Tabelle05.Unprotect
        Columns("A:A").Select
        Selection.EntireColumn.Hidden = True
    End If
        
    '*** |fffd|berpr|fffd|fen aller Zeilenstati zum Ein-/Ausblenden ********************************************
    count = 1
    While Tabelle05.Cells(count, 1) <> ""
        If Tabelle05.Cells(count, 1) And Rows(count).Hidden = True Then
            If Tabelle05.ProtectContents = True Then
                Tabelle05.Unprotect
            End If
            Tabelle05.Rows(count).Hidden = False
        End If
        If Tabelle05.Cells(count, 1) = False And Rows(count).Hidden = False Then
            If Tabelle05.ProtectContents = True Then
                Tabelle05.Unprotect
            End If
            Tabelle05.Rows(count).Hidden = True
        End If
        count = count + 1
    Wend
    '*************************************************************************************************
      
    If Tabelle05.ProtectContents = False Then
        Tabelle05.Protect
    End If
    
    If ActiveWindow.DisplayHeadings = True Then
        ActiveWindow.DisplayHeadings = False
    End If
        
    Tabelle05.Range("C4").Select
    
    Application.ScreenUpdating = True

    
End Sub

Private Sub TOMs_View()
'******************************************************************************************************
'*** Makro zum Einlesen und Ausgeben aller relevanten TOMs-View Anforderungen *************************
'******************************************************************************************************
    
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    Dim TOM(12, 30) As Variant 'Anzahl Kapitel und Req pro Kapitel
    Dim S1(500, 30) As Variant: Dim S2(500, 30) As Variant: Dim S3(500, 30) As Variant
    Dim S4(500, 30) As Variant: Dim S5(500, 30) As Variant: Dim S6(500, 30) As Variant
    Dim S7(500, 30) As Variant: Dim S8(500, 30) As Variant: Dim S9(500, 30) As Variant
    Dim S10(500, 30) As Variant: Dim S11(500, 30) As Variant: Dim S12(500, 30) As Variant

    Dim anf As String
    Dim name As String

    Dim ende As Integer
    Dim z1 As Integer 'Z|fffd|hler f|fffd|r den Abschnitt
    Dim z2 As Integer 'Z|fffd|hler f|fffd|r die Anforderung des Abschnittes
    Dim z3 As Integer 'Z|fffd|hler f|fffd|r die Suche der Anforderung innerhalb der Tabs
    Dim z4 As Integer 'Z|fffd|hler f|fffd|r die Ergebnisse der Anforderung auf der TOMs-View
    Dim zd As Integer 'Z|fffd|hler f|fffd|r die Anforderungsdokumente auf der TOMs-View
    
    '*** Spaltendefinition ***********************************************************
    Dim Spalte(30) As Variant

    '*** Grunds|fffd|tzliche Anforderungen ************************************************
    TOM(1, 0) = 1
    TOM(1, 1) = "91135-1"

    '*** Verantwortlichkeit f|fffd|r Werte ************************************************
    TOM(2, 0) = 3
    TOM(2, 1) = "91135-2"
    TOM(2, 2) = "91135-3"
    TOM(2, 3) = "91135-4"

    '*** Zugangssteuerung ************************************************************
    TOM(3, 0) = 22
    TOM(3, 1) = "91135-5"
    TOM(3, 2) = "91135-6"
    TOM(3, 3) = "3.01-2"    '3.65-1
    TOM(3, 4) = "3.01-8"
    TOM(3, 5) = "3.01-11"
    TOM(3, 6) = "3.01-12"
    TOM(3, 7) = "3.01-13"   '3.65-20
    TOM(3, 8) = "3.01-14"
    TOM(3, 9) = "3.01-15"
    TOM(3, 10) = "3.01-16"
    TOM(3, 11) = "3.01-17"
    TOM(3, 12) = "3.01-18"
    TOM(3, 13) = "3.01-19"
    TOM(3, 14) = "3.01-20"
    TOM(3, 15) = "3.01-21"
    TOM(3, 16) = "3.01-22"
    TOM(3, 17) = "3.01-23"
    TOM(3, 18) = "3.01-24"
    TOM(3, 19) = "3.01-25"
    TOM(3, 20) = "3.01-26"
    TOM(3, 21) = "3.65-1"
    TOM(3, 22) = "3.65-20"

    '*** Betriebssicherheit ***********************************************************
    TOM(4, 0) = 21
    TOM(4, 1) = "91135-7"
    TOM(4, 2) = "91135-8"
    TOM(4, 3) = "3.01-1"    '3.10-1, 3.17-1, 3.39-1,
    TOM(4, 4) = "3.01-3"    '3.56-2
    TOM(4, 5) = "3.01-4"
    TOM(4, 6) = "3.01-5"
    TOM(4, 7) = "3.01-6"    '3.37-8
    TOM(4, 8) = "3.01-9"
    TOM(4, 9) = "3.01-10"   '3.37-12
    TOM(4, 10) = "3.01-27"
    TOM(4, 11) = "3.01-28"  '3.37-25, 3.65-35
    TOM(4, 12) = "3.01-29"
    TOM(4, 13) = "3.01-30"
    TOM(4, 14) = "3.10-1"
    TOM(4, 15) = "3.17-1"
    TOM(4, 16) = "3.39-1"
    TOM(4, 17) = "3.56-2"
    TOM(4, 18) = "3.37-8"
    TOM(4, 19) = "3.37-12"
    TOM(4, 20) = "3.37-25"
    TOM(4, 21) = "3.65-35"

    '*** Kommunikationssicherheit *****************************************************
    TOM(5, 0) = 3
    TOM(5, 1) = "91135-9"
    TOM(5, 2) = "3.01-7"    '3.37-9
    TOM(5, 3) = "3.37-9"

    '*** Sicherer Versand von Daten ***********************************************************
    'TOM(6, 0) = 1
    'TOM(6, 1) = "91135-12"

    '*** Sichere L|fffd|schung, Entsorgung und Vernichtung *****************************************
    'TOM(7, 0) = 3
    'TOM(7, 1) = "91135-13"
    'TOM(7, 2) = "91135-14"
    'TOM(7, 3) = "91135-15"

    '*** Eingabekontrolle *********************************************************************
    'TOM(8, 0) = 1
    'TOM(8, 1) = "BK"

    '*** Auftragskontrolle ********************************************************************
    'TOM(9, 0) = 1
    'TOM(9, 1) = "91135-17"

    '*** Verf|fffd|gbarkeitskontrolle **************************************************************
    'TOM(10, 0) = 2
    'TOM(10, 1) = "91135-18"
    'TOM(10, 2) = "91135-19"

    '*** Verwendungszweckkontrolle ************************************************************
    'TOM(11, 0) = 5
    'TOM(11, 1) = "91135-20"
    'TOM(11, 2) = "91135-21"
    'TOM(11, 3) = "77136-1"
    'TOM(11, 4) = "77136-2"
    'TOM(11, 5) = "77136-3"

    '*** Organisationskontrolle ***************************************************************
    'TOM(12, 0) = 1
    'TOM(12, 1) = "91135-22"

    '*** Suchergebnisse ***********************************************************************
    A1 = 0: A2 = 0: A3 = 0: A4 = 0: A5 = 0 ': A6 = 0: A7 = 0: A8 = 0: A9 = 0: A10 = 0: A11 = 0

    '*** Zeitstempel *****************************************************************
    
    Tabelle01.Range("BR5:BR6") = ""
    Tabelle01.Range("BR5") = Format(Now, "hh" & ":" & "mm" & ":" & "ss")
    
    Call Userform_Start '*** Einblenden eines Hinweises zur Zeitdauer ***********************
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Tabelle05.Select
    ActiveWindow.DisplayHeadings = True
    Tabelle05.Unprotect
    'Columns("A:A").Select
    'Selection.EntireColumn.Hidden = False
    
    Tabelle05.Rows("6:19").Select
    Selection.EntireRow.Hidden = False
    
    '*** Ermittlung welche Sprache eingestellt ist. *******************************************
    If Tabelle01.Range("AK6") = "Deutsch" Then
        Sprache = "DE"
    Else
        Sprache = "EN"
    End If
    
    zd = 1

    Tabelle06.Range("B1:BB31").ClearContents

    For Each ws In ActiveWorkbook.Worksheets
        If ws.name <> Tabelle01.name And ws.name <> Tabelle02.name And ws.name <> Tabelle03.name _
        And ws.name <> Tabelle04.name And ws.name <> Tabelle05.name And ws.name <> Tabelle06.name _
        And ws.name <> Tabelle07.name Then
        
            If ws.name <> Delta Then
                zd = zd + 1
                If Tabelle06.Cells(1, zd).Value = "" Then
                    Tabelle06.Cells(1, zd) = ws.name
                End If
                Delta = ws.name
            End If
                       
            ende = ws.Cells(Cells.Rows.count, 2).End(xlUp).Row '** 2 == Spalte B
            If ende = 0 Then Exit Sub
             
            '*** Ermittlung der Anzeige-Zeile ************************************************************
            For i = 1 To 80
                If Tabelle01.Cells(i, 67) = ws.name Then
                    Anzeige = "=Info!R" & i & "C66"
                End If
            Next i
        
            '*********************************************************************************************
            '*** Ermittlung des Kommentares **************************************************************
            '*********************************************************************************************
            
            '*** Ermittlung der Reihenfolge des Kommentares **********************************************
            If Tabelle01.Range("AK6") = "Deutsch" Then
                de = ws.Range("B1")
                Tabelle01.Range("AK6") = "English"
                EN = ws.Range("B1")
            Else
                EN = ws.Range("B1")
                Tabelle01.Range("AK6") = "Deutsch"
                de = ws.Range("B1")
            End If
            
            '*** Kommentar zusammenf|fffd|gen *****************************************************************
            If Sprache = "DE" Then
                Kommentar = Chr(10) + "  " + de + Chr(10) + "  -------" + Chr(10) + "  " + EN
            Else
                Kommentar = Chr(10) + "  " + EN + Chr(10) + "  -------" + Chr(10) + "  " + de
            End If
            
        
            '*********************************************************************************************
            '*** Beginn der Verarbeitung der Anforderungen ***********************************************
            '*********************************************************************************************
        
            ' *** Schleife bis zum Dateiende jedes Anforderungsdokumentes ********************************
            For z3 = 6 To ende
            
                '*** Einlesen der Anforderung aus dem Anforderungsdokument *******************************
                anf = ws.Cells(z3, 2).Value
                anf = Left(anf, InStr(1, anf, "/") - 1)
            
                '*** Zusammenbau der Formel f|fffd|r Doc-Nr und Req-Nr ****************************************
                Titel = "=CONCATENATE('" & ws.name & "'!R1C2," & Chr(34) & ":" & Chr(10) & "Req " & anf & Chr(34) & ")"
            
                '*** Definition der Formeln zur sp|fffd|teren Ausgabe *****************************************
                Spalte(0) = Anzeige
                Spalte(1) = Titel
                Spalte(2) = Kommentar
                Spalte(3) = "='" & ws.name & "'!R" & z3 & "C3"
                Spalte(4) = "'" & ws.name & "'!R" & z3 & "C17"
                Spalte(5) = "=If('" & ws.name & "'!R" & z3 & "C19<>" & Chr(34) & Chr(34) & ",'" & ws.name & "'!R" & z3 & "C19," & Chr(34) & Chr(34) & ")"
                Spalte(6) = "=If('" & ws.name & "'!R" & z3 & "C20<>" & Chr(34) & Chr(34) & ",'" & ws.name & "'!R" & z3 & "C20," & Chr(34) & Chr(34) & ")"
                Spalte(7) = "=If('" & ws.name & "'!R" & z3 & "C21<>" & Chr(34) & Chr(34) & ",'" & ws.name & "'!R" & z3 & "C21," & Chr(34) & Chr(34) & ")"
                Spalte(8) = "=If('" & ws.name & "'!R" & z3 & "C22<>" & Chr(34) & Chr(34) & ",'" & ws.name & "'!R" & z3 & "C22," & Chr(34) & Chr(34) & ")"
                Spalte(9) = "=If('" & ws.name & "'!R" & z3 & "C23<>" & Chr(34) & Chr(34) & ",'" & ws.name & "'!R" & z3 & "C23," & Chr(34) & Chr(34) & ")"
                Spalte(10) = "=If('" & ws.name & "'!R" & z3 & "C24<>" & Chr(34) & Chr(34) & ",'" & ws.name & "'!R" & z3 & "C24," & Chr(34) & Chr(34) & ")"
                Spalte(11) = "=If('" & ws.name & "'!R" & z3 & "C25<>" & Chr(34) & Chr(34) & ",'" & ws.name & "'!R" & z3 & "C25," & Chr(34) & Chr(34) & ")"
                Spalte(12) = "=If('" & ws.name & "'!R" & z3 & "C26<>" & Chr(34) & Chr(34) & ",'" & ws.name & "'!R" & z3 & "C26," & Chr(34) & Chr(34) & ")"
                Spalte(13) = "=If('" & ws.name & "'!R" & z3 & "C27<>" & Chr(34) & Chr(34) & ",'" & ws.name & "'!R" & z3 & "C27," & Chr(34) & Chr(34) & ")"
                Spalte(14) = Tabelle05.Range("B19")
                Spalte(15) = "=If(R2='Deutsch';E19;D19)"
                
                '*** paralleler Vergleich der Anforderung in allen Themenbereichen************************
                For z1 = 1 To 22
                
                    '*** Pr|fffd|fung, ob Req aus Anforderungsdokument und TOMs-View |fffd|bereinstimmt ************
                    '*** "BK" wird nicht beachtet, da in Sonderbehandlung ********************************
                    '*************************************************************************************
                    If anf = TOM(1, z1) And TOM(1, z1) <> "BK" And TOM(1, z1) <> "" Then
                        '*** Z|fffd|hlen der gefundenen Anforderungen *****************************************
                        A1 = A1 + 1
                        '*** Zuweisung A1 zu X, damit Bl|fffd|cke besser kopiert werden k|fffd|nnen*****************
                        x = A1
                        '*** Zuweisen der Formeln ********************************************************
                        S1(x, 0) = Spalte(0): S1(x, 1) = Spalte(1): S1(x, 2) = Spalte(2): S1(x, 3) = Spalte(3): S1(x, 4) = Spalte(4)
                        S1(x, 5) = Spalte(5): S1(x, 6) = Spalte(6): S1(x, 7) = Spalte(7): S1(x, 8) = Spalte(8): S1(x, 9) = Spalte(9)
                        S1(x, 10) = Spalte(10): S1(x, 11) = Spalte(11): S1(x, 12) = Spalte(12): S1(x, 13) = Spalte(13)
                    End If
                    '*************************************************************************************
                    '*************************************************************************************
                    If anf = TOM(2, z1) And TOM(2, z1) <> "BK" And TOM(2, z1) <> "" Then
                        '*** Aufruf Extra Makro zur Darstellung der vererbten Anforderungen des **********
                        '*** technischen Basisschutzes ***************************************************
                        Call TOMs_Senke(zd, ws.name, anf)
                        '*********************************************************************************
                        A2 = A2 + 1: x = A2
                        S2(x, 0) = Spalte(0): S2(x, 1) = Spalte(1): S2(x, 2) = Spalte(2): S2(x, 3) = Spalte(3): S2(x, 4) = Spalte(4)
                        S2(x, 5) = Spalte(5): S2(x, 6) = Spalte(6): S2(x, 7) = Spalte(7): S2(x, 8) = Spalte(8): S2(x, 9) = Spalte(9)
                        S2(x, 10) = Spalte(10): S2(x, 11) = Spalte(11): S2(x, 12) = Spalte(12): S2(x, 13) = Spalte(13)
                    End If
                    '*************************************************************************************
                    '*************************************************************************************
                    If anf = TOM(3, z1) And TOM(3, z1) <> "BK" And TOM(3, z1) <> "" Then
                        A3 = A3 + 1: x = A3
                        '*** Aufruf Extra Makro zur Darstellung der vererbten Anforderungen des **********
                        '*** technischen Basisschutzes ***************************************************
                        Call TOMs_Senke(zd, ws.name, anf)
                        '*********************************************************************************
                        S3(x, 0) = Spalte(0): S3(x, 1) = Spalte(1): S3(x, 2) = Spalte(2): S3(x, 3) = Spalte(3): S3(x, 4) = Spalte(4)
                        S3(x, 5) = Spalte(5): S3(x, 6) = Spalte(6): S3(x, 7) = Spalte(7): S3(x, 8) = Spalte(8): S3(x, 9) = Spalte(9)
                        S3(x, 10) = Spalte(10): S3(x, 11) = Spalte(11): S3(x, 12) = Spalte(12): S3(x, 13) = Spalte(13)
                    End If
                    '*************************************************************************************
                    '*************************************************************************************
                    If anf = TOM(4, z1) And TOM(4, z1) <> "BK" And TOM(4, z1) <> "" Then
                        A4 = A4 + 1: x = A4
                        '*** Aufruf Extra Makro zur Darstellung der vererbten Anforderungen des **********
                        '*** technischen Basisschutzes ***************************************************
                        Call TOMs_Senke(zd, ws.name, anf)
                        '*********************************************************************************
                        S4(x, 0) = Spalte(0): S4(x, 1) = Spalte(1): S4(x, 2) = Spalte(2): S4(x, 3) = Spalte(3): S4(x, 4) = Spalte(4)
                        S4(x, 5) = Spalte(5): S4(x, 6) = Spalte(6): S4(x, 7) = Spalte(7): S4(x, 8) = Spalte(8): S4(x, 9) = Spalte(9)
                        S4(x, 10) = Spalte(10): S4(x, 11) = Spalte(11): S4(x, 12) = Spalte(12): S4(x, 13) = Spalte(13)
                    End If
                    '*************************************************************************************
                    '*** Aufruf Extra Makro zur Darstellung der vererbten Anforderungen des **********
                        '*** technischen Basisschutzes ***************************************************
                        Call TOMs_Senke(zd, ws.name, anf)
                    '*************************************************************************************
                    If anf = TOM(5, z1) And TOM(5, z1) <> "BK" And TOM(5, z1) <> "" Then
                        A5 = A5 + 1: x = A5
                        S5(x, 0) = Spalte(0): S5(x, 1) = Spalte(1): S5(x, 2) = Spalte(2): S5(x, 3) = Spalte(3): S5(x, 4) = Spalte(4)
                        S5(x, 5) = Spalte(5): S5(x, 6) = Spalte(6): S5(x, 7) = Spalte(7): S5(x, 8) = Spalte(8): S5(x, 9) = Spalte(9)
                        S5(x, 10) = Spalte(10): S5(x, 11) = Spalte(11): S5(x, 12) = Spalte(12): S5(x, 13) = Spalte(13)
                    End If
                    '*************************************************************************************
                    '*************************************************************************************
                    'If anf = TOM(6, z1) And TOM(6, z1) <> "BK" And TOM(6, z1) <> "" Then
                        'A6 = A6 + 1: X = A6
                        'S6(X, 0) = Spalte(0): S6(X, 1) = Spalte(1): S6(X, 2) = Spalte(2): S6(X, 3) = Spalte(3): S6(X, 4) = Spalte(4)
                        'S6(X, 5) = Spalte(5): S6(X, 6) = Spalte(6): S6(X, 7) = Spalte(7): S6(X, 8) = Spalte(8): S6(X, 9) = Spalte(9)
                        'S6(X, 10) = Spalte(10): S6(X, 11) = Spalte(11): S6(X, 12) = Spalte(12): S6(X, 13) = Spalte(13)
                    'End If
                    '*************************************************************************************
                    '*************************************************************************************
                    'If anf = TOM(7, z1) And TOM(7, z1) <> "BK" And TOM(7, z1) <> "" Then
                    '    A7 = A7 + 1: X = A7
                    '    S7(X, 0) = Spalte(0): S7(X, 1) = Spalte(1): S7(X, 2) = Spalte(2): S7(X, 3) = Spalte(3): S7(X, 4) = Spalte(4)
                    '    S7(X, 5) = Spalte(5): S7(X, 6) = Spalte(6): S7(X, 7) = Spalte(7): S7(X, 8) = Spalte(8): S7(X, 9) = Spalte(9)
                    '    S7(X, 10) = Spalte(10): S7(X, 11) = Spalte(11): S7(X, 12) = Spalte(12): S7(X, 13) = Spalte(13)
                    'End If
                    '*************************************************************************************
                    '*************************************************************************************
                    'If anf = TOM(8, z1) And TOM(8, z1) <> "BK" And TOM(8, z1) <> "" Then
                    '    A8 = A8 + 1: X = A8
                    '    S8(X, 0) = Spalte(0): S8(X, 1) = Spalte(1): S8(X, 2) = Spalte(2): S8(X, 3) = Spalte(3): S8(X, 4) = Spalte(4)
                    '    S8(X, 5) = Spalte(5): S8(X, 6) = Spalte(6): S8(X, 7) = Spalte(7): S8(X, 8) = Spalte(8): S8(X, 9) = Spalte(9)
                    '    S8(X, 10) = Spalte(10): S8(X, 11) = Spalte(11): S8(X, 12) = Spalte(12): S8(X, 13) = Spalte(13)
                    'End If
                    '*************************************************************************************
                    '*************************************************************************************
                    'If anf = TOM(9, z1) And TOM(9, z1) <> "BK" And TOM(9, z1) <> "" Then
                    '    A9 = A9 + 1: X = A9
                    '    S9(X, 0) = Spalte(0): S9(X, 1) = Spalte(1): S9(X, 2) = Spalte(2): S9(X, 3) = Spalte(3): S9(X, 4) = Spalte(4)
                    '    S9(X, 5) = Spalte(5): S9(X, 6) = Spalte(6): S9(X, 7) = Spalte(7): S9(X, 8) = Spalte(8): S9(X, 9) = Spalte(9)
                    '    S9(X, 10) = Spalte(10): S9(X, 11) = Spalte(11): S9(X, 12) = Spalte(12): S9(X, 13) = Spalte(13)
                    'End If
                    '*************************************************************************************
                    '*************************************************************************************
                    'If anf = TOM(10, z1) And TOM(10, z1) <> "BK" And TOM(10, z1) <> "" Then
                    '    A10 = A10 + 1: X = A10
                    '    S10(X, 0) = Spalte(0): S10(X, 1) = Spalte(1): S10(X, 2) = Spalte(2): S10(X, 3) = Spalte(3): S10(X, 4) = Spalte(4)
                    '    S10(X, 5) = Spalte(5): S10(X, 6) = Spalte(6): S10(X, 7) = Spalte(7): S10(X, 8) = Spalte(8): S10(X, 9) = Spalte(9)
                    '    S10(X, 10) = Spalte(10): S10(X, 11) = Spalte(11): S10(X, 12) = Spalte(12): S10(X, 13) = Spalte(13)
                    'End If
                    '*************************************************************************************
                    '*************************************************************************************
                    'If anf = TOM(11, z1) And TOM(11, z1) <> "BK" And TOM(11, z1) <> "" Then
                    '    A11 = A11 + 1: X = A11
                    '    S11(X, 0) = Spalte(0): S11(X, 1) = Spalte(1): S11(X, 2) = Spalte(2): S11(X, 3) = Spalte(3): S11(X, 4) = Spalte(4)
                    '    S11(X, 5) = Spalte(5): S11(X, 6) = Spalte(6): S11(X, 7) = Spalte(7): S11(X, 8) = Spalte(8): S11(X, 9) = Spalte(9)
                    '    S11(X, 10) = Spalte(10): S11(X, 11) = Spalte(11): S11(X, 12) = Spalte(12): S11(X, 13) = Spalte(13)
                    'End If
                    '*************************************************************************************
                    '*************************************************************************************
                    'If anf = TOM(12, z1) And TOM(12, z1) <> "BK" And TOM(12, z1) <> "" Then
                    '    A12 = A12 + 1: X = A12
                    '    S12(X, 0) = Spalte(0): S12(X, 1) = Spalte(1): S12(X, 2) = Spalte(2): S12(X, 3) = Spalte(3): S12(X, 4) = Spalte(4)
                    '    S12(X, 5) = Spalte(5): S12(X, 6) = Spalte(6): S12(X, 7) = Spalte(7): S12(X, 8) = Spalte(8): S12(X, 9) = Spalte(9)
                    '    S12(X, 10) = Spalte(10): S12(X, 11) = Spalte(11): S12(X, 12) = Spalte(12): S12(X, 13) = Spalte(13)
                    'End If
                    '*************************************************************************************
                Next z1
            Next z3
        End If
    Next ws
    

'******************************************************************************************************
'******************************************************************************************************
'******************************************************************************************************
'*** Ausgabe der Daten ********************************************************************************
'******************************************************************************************************
'******************************************************************************************************
'******************************************************************************************************

    '*** 1 = alle Abschnitte einblenden, 0= nur Abschnitt 10 einblenden *******************************
    t = 1
    '**************************************************************************************************
    
    '*** Feststellen und L|fffd|schen vorhandener Zeilen gr|fffd||fffd|er 19 *****************************************
    ende = Tabelle05.Cells(Cells.Rows.count, 1).End(xlUp).Row
    If ende > 19 Then
        Tabelle05.Rows("20:600").Delete
    End If
    '**************************************************************************************************
    
    '*** alle Ergebniswerte werden suksessive ausgelesen und an das Makro Ausgabe |fffd|bergeben. **********
    x = t: z = 1
    While S1(x, 0) <> "" And x <> 0
        If z = 1 Then
            z = 6
        End If
        Call Ausgabe(S1(x, 0), S1(x, 1), S1(x, 2), S1(x, 3), S1(x, 4), S1(x, 5), S1(x, 6), _
        S1(x, 7), S1(x, 8), S1(x, 9), S1(x, 10), S1(x, 11), S1(x, 12), S1(x, 13), z)
        x = x + 1
        z = 0
    Wend
    '**************************************************************************************************
    '**************************************************************************************************
    x = t: z = 1
    While S2(x, 0) <> "" And x <> 0
        If z = 1 Then
            z = 7
        End If
        Call Ausgabe(S2(x, 0), S2(x, 1), S2(x, 2), S2(x, 3), S2(x, 4), S2(x, 5), S2(x, 6), _
        S2(x, 7), S2(x, 8), S2(x, 9), S2(x, 10), S2(x, 11), S2(x, 12), S2(x, 13), z)
        x = x + 1
        z = 0
    Wend
    '**************************************************************************************************
    '**************************************************************************************************
    x = t: z = 1
    While S3(x, 0) <> "" And x <> 0
        If z = 1 Then
            z = 8
        End If
        Call Ausgabe(S3(x, 0), S3(x, 1), S3(x, 2), S3(x, 3), S3(x, 4), S3(x, 5), S3(x, 6), _
        S3(x, 7), S3(x, 8), S3(x, 9), S3(x, 10), S3(x, 11), S3(x, 12), S3(x, 13), z)
        x = x + 1
        z = 0
    Wend
    '*** Sonderbehandlung wegen BK ********************************************************
    'If X <> 0 Then
    '    If z = 1 Then
    '        ende = Tabelle05.Cells(Cells.Rows.count, 1).End(xlUp).Row + 1
    '        z = 8
    '        Rows("" & z & ":" & z & "").Copy
    '        Tabelle05.Rows("" & ende & ":" & ende & "").Select
    '        ActiveSheet.Paste
    '        Tabelle05.Cells(ende, 1) = True
    '    End If
    '    ende = Tabelle05.Cells(Cells.Rows.count, 1).End(xlUp).Row + 1
    '    Rows("19:19").Copy
    '    Tabelle05.Rows("" & ende & ":" & ende & "").Select
    '    ActiveSheet.Paste
    '    Tabelle05.Cells(ende, 1) = True
    'End If
    '**************************************************************************************************
    '**************************************************************************************************
    x = t: z = 1
    While S4(x, 0) <> "" And x <> 0
        If z = 1 Then
            z = 9
        End If
        Call Ausgabe(S4(x, 0), S4(x, 1), S4(x, 2), S4(x, 3), S4(x, 4), S4(x, 5), S4(x, 6), _
        S4(x, 7), S4(x, 8), S4(x, 9), S4(x, 10), S4(x, 11), S4(x, 12), S4(x, 13), z)
        x = x + 1
        z = 0
    Wend
    '**************************************************************************************************
    '**************************************************************************************************
    x = t: z = 1
    While S5(x, 0) <> "" And x <> 0
        If z = 1 Then
            z = 10
        End If
        
        Call Ausgabe(S5(x, 0), S5(x, 1), S5(x, 2), S5(x, 3), S5(x, 4), S5(x, 5), S5(x, 6), _
        S5(x, 7), S5(x, 8), S5(x, 9), S5(x, 10), S5(x, 11), S5(x, 12), S5(x, 13), z)
        x = x + 1
        z = 0
    Wend
    '**************************************************************************************************
    '**************************************************************************************************
    x = t: z = 1
    While S6(x, 0) <> "" And x <> 0
        If z = 1 Then
            z = 11
        End If
        Call Ausgabe(S6(x, 0), S6(x, 1), S6(x, 2), S6(x, 3), S6(x, 4), S6(x, 5), S6(x, 6), _
        S6(x, 7), S6(x, 8), S6(x, 9), S6(x, 10), S6(x, 11), S6(x, 12), S6(x, 13), z)
        x = x + 1
        z = 0
    Wend
    '**************************************************************************************************
    '**************************************************************************************************
    x = t: z = 1
    While S7(x, 0) <> "" And x <> 0
        If z = 1 Then
            z = 12
        End If
        Call Ausgabe(S7(x, 0), S7(x, 1), S7(x, 2), S7(x, 3), S7(x, 4), S7(x, 5), S7(x, 6), _
        S7(x, 7), S7(x, 8), S7(x, 9), S7(x, 10), S7(x, 11), S7(x, 12), S7(x, 13), z)
        x = x + 1
        z = 0
    Wend
    '**************************************************************************************************
    '**************************************************************************************************
    x = t: z = 1
    While S8(x, 0) <> "" And x <> 0
        If z = 1 Then
            z = 13
        End If
        Call Ausgabe(S8(x, 0), S8(x, 1), S8(x, 2), S8(x, 3), S8(x, 4), S8(x, 5), S8(x, 6), _
        S8(x, 7), S8(x, 8), S8(x, 9), S8(x, 10), S8(x, 11), S8(x, 12), S8(x, 13), z)
        x = x + 1
        z = 0
    Wend
    '*** Sonderbehandlung wegen BK ********************************************************************
    'If X <> 0 Then
    '    If z = 1 Then
    '        ende = Tabelle05.Cells(Cells.Rows.count, 1).End(xlUp).Row + 1
    '        z = 13
    '        Rows("" & z & ":" & z & "").Copy
    '        Tabelle05.Rows("" & ende & ":" & ende & "").Select
    '        ActiveSheet.Paste
    '        Tabelle05.Cells(ende, 1) = True
    '    End If
    '    ende = Tabelle05.Cells(Cells.Rows.count, 1).End(xlUp).Row + 1
    '    Rows("19:19").Copy
    '    Tabelle05.Rows("" & ende & ":" & ende & "").Select
    '    ActiveSheet.Paste
    '    Tabelle05.Cells(ende, 1) = True
    'End If
    '**************************************************************************************************
    '**************************************************************************************************
    x = t: z = 1
    While S9(x, 0) <> "" And x <> 0
        If z = 1 Then
            z = 14
        End If
        Call Ausgabe(S9(x, 0), S9(x, 1), S9(x, 2), S9(x, 3), S9(x, 4), S9(x, 5), S9(x, 6), _
        S9(x, 7), S9(x, 8), S9(x, 9), S9(x, 10), S9(x, 11), S9(x, 12), S9(x, 13), z)
        x = x + 1
        z = 0
    Wend
    '**************************************************************************************************
    '**************************************************************************************************
    x = t: z = 1
    While S10(x, 0) <> "" And x <> 0
        If z = 1 Then
            z = 15
        End If
        Call Ausgabe(S10(x, 0), S10(x, 1), S10(x, 2), S10(x, 3), S10(x, 4), S10(x, 5), S10(x, 6), _
        S10(x, 7), S10(x, 8), S10(x, 9), S10(x, 10), S10(x, 11), S10(x, 12), S10(x, 13), z)
        x = x + 1
        z = 0
    Wend
    '**************************************************************************************************
    '**************************************************************************************************
    x = 1: z = 1
    While S11(x, 0) <> "" And x <> 0
        If z = 1 Then
            z = 16
        End If
        Call Ausgabe(S11(x, 0), S11(x, 1), S11(x, 2), S11(x, 3), S11(x, 4), S11(x, 5), S11(x, 6), _
        S11(x, 7), S11(x, 8), S11(x, 9), S11(x, 10), S11(x, 11), S11(x, 12), S11(x, 13), z)
        x = x + 1
        z = 0
    Wend
    '**************************************************************************************************
    '**************************************************************************************************
    x = t: z = 1
    While S12(x, 0) <> "" And x <> 0
        If z = 1 Then
            z = 17
        End If
        Call Ausgabe(S12(x, 0), S12(x, 1), S12(x, 2), S12(x, 3), S12(x, 4), S12(x, 5), S12(x, 6), _
        S12(x, 7), S12(x, 8), S12(x, 9), S12(x, 10), S12(x, 11), S12(x, 12), S12(x, 13), z)
        x = x + 1
        z = 0
    Wend
    '**************************************************************************************************
    '**************************************************************************************************
    
    '*** Anpassung an optimale Zeilenh|fffd|he *************************************************************
    ende = Tabelle05.Cells(Cells.Rows.count, 1).End(xlUp).Row + 1
    Tabelle05.Rows("20:" & ende & "").EntireRow.AutoFit
    '**************************************************************************************************
    
    '*** Zeitstempel *****************************************************************
    Tabelle01.Range("BR6") = Format(Now, "hh" & ":" & "mm" & ":" & "ss")
    '**************************************************************************************************
    
    '*** Umstellung auf urspr|fffd|ngliche Sprachauswahl *************************************************
    If Sprache = "DE" Then
        Tabelle01.Range("AK6") = "Deutsch"
    Else
        Tabelle01.Range("AK6") = "English"
    End If
    '**************************************************************************************************
    
    '*** Einschalten der Bildschirmaktualisierung *****************************************************
    Call Worksheet_Activate
    ActiveWindow.SmallScroll up:=5000
    Tabelle01.Select
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    '**************************************************************************************************
    
End Sub

Sub Ausgabe(a, B, c, d, E, f, G, h, i, j, k, L, M, n, z)
'******************************************************************************************************
'*** Makro zum Ausgeben aller TOMs-relevanten Anforderungen *******************************************
'******************************************************************************************************
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    Dim ok As String
        
    '*** Feststellen, wieviel Zeilen bereits in der TOMs-View vorhanden sind. *************************
    ende = Tabelle05.Cells(Cells.Rows.count, 1).End(xlUp).Row + 1
    '***************************************************************************************************
               
    '*** Wenn Z <> 0, dann wird von einer |fffd|berschrift ausgegangen. Mit Z ist festgelegt, **************
    '*** welche |fffd|berschrift per copy&paste |fffd|bernommen wird. *******************************************
    If z <> 0 Then
        Rows("" & z & ":" & z & "").Copy
        Tabelle05.Rows("" & ende & ":" & ende & "").Select
        ActiveSheet.Paste
        Tabelle05.Cells(ende, 1) = True
        ende = ende + 1
    End If
    '***************************************************************************************************
        
    '*** Durch Kopieren wird die Musterzeile einer Anforderung |fffd|bernommen ******************************
    '*** Einige Felder der Zeile sind damit schon vorbef|fffd|llt, z.B. Req-ID ******************************
    Rows("18:18").Copy
    Tabelle05.Rows("" & ende & ":" & ende & "").Select
    ActiveSheet.Paste
    '***************************************************************************************************
        
    '*** In die Zellen einer Zeile werden die |fffd|bergebenen Formeln eingetragen. *************************
    Tabelle05.Cells(ende, 1).FormulaR1C1 = a
    Tabelle05.Cells(ende, 4).FormulaR1C1 = B
            
    '*** Der Kommentar wird eingef|fffd|gt. *****************************************************************
    If c <> "" Then
        With Tabelle05.Cells(ende, 2)
            .ClearComments
            .AddComment
            FormulaR1C1 = c
            .Comment.Text Text:=FormulaR1C1
        End With
        Tabelle05.Cells(ende, 2).Comment.Shape.Width = 300
    End If
    '***************************************************************************************************
    Tabelle05.Cells(ende, 3).FormulaR1C1 = d
    '***************************************************************************************************
    '*** Damit ausgeblendete Anforderungsdokumente das Ergebnis nicht verf|fffd|lschen, *********************
    '*** wird der Status dieser Anforderungen auf ok gesetzt. ******************************************
    '***************************************************************************************************
    ok = "=If('" & Tabelle05.name & "'!R" & ende & "C1," & E & "," & Chr(34) & "N/A" & Chr(34) & ")"
    Tabelle05.Cells(ende, 17).FormulaR1C1 = ok
    '***************************************************************************************************
    Tabelle05.Cells(ende, 19).FormulaR1C1 = f
    Tabelle05.Cells(ende, 20).FormulaR1C1 = G
    Tabelle05.Cells(ende, 21).FormulaR1C1 = h
    Tabelle05.Cells(ende, 22).FormulaR1C1 = i
    Tabelle05.Cells(ende, 23).FormulaR1C1 = j
    Tabelle05.Cells(ende, 24).FormulaR1C1 = k
    Tabelle05.Cells(ende, 25).FormulaR1C1 = L
    Tabelle05.Cells(ende, 26).FormulaR1C1 = M
    Tabelle05.Cells(ende, 27).FormulaR1C1 = n

End Sub
Private Sub Userform_Start()
'******************************************************************************************************
'*** Makro zum Darstellen der Verarbeitungsdauer plus Benutzerhinweis *********************************
'******************************************************************************************************
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    Application.OnTime Now + TimeValue("00:00:02"), "Schlie|fffd|en"
    UserForm1.Show vbModeless
    Application.Wait (Now + TimeValue("0:00:01"))

End Sub

Private Sub TOMs_Senke(count, name, req)
'******************************************************************************************************
'*** Makro zum Darstellen der Vererbung von Anforderungen des Technischen Basisschutzes ***************
'******************************************************************************************************
    On Error Resume Next
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    If Left(req, InStr(req, "-") - 1) = "3.01" Then
        Application.ScreenUpdating = False
        z = Val(Right(req, Len(req) - InStr(req, "-"))) + 1
        Tabelle06.Cells(z, count) = "X"
    End If

End Sub





Attribute VB_Name = "Tabelle06"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle07"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle301"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle302"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Tabelle303"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle304"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle305"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle306"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle307"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle308"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle309"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle310"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle311"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle312"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle313"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle314"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle315"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle316"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle317"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle320"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle321"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle322"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle323"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle324"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle325"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle329"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle330"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle331"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle332"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle333"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle334"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle335"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle336"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle337"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle338"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle339"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle340"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle341"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle342"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle344"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle345"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle346"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle347"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle348"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle349"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle350"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle351"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle352"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle353"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle354"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle355"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle356"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle357"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle358"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle359"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle77136"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Tabelle77686"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Tabelle77687"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Tabelle77689"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Tabelle77690"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Tabelle911123"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Tabelle911135"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Tabelle91134"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Tabelle91143"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{C038A7AD-C528-4710-ADB3-65051B2E0D8D}{8A7C4C4D-61B8-45E6-A06F-06996914434F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub UserForm_Initialize()
' Startparameter an UserForm |fffd|bergeben
' Werte zuweisen
    
        If Tabelle01.Range("AK6") = "Deutsch" Then
            Caption = "Aktualisierung"                                                      ' Titel
            Label101.Caption = "Die Aktualisierung kann etwas Zeit in Anspruch nehmen..."   ' Text"
        Else
            Caption = "Attention"                                                           ' Titel
            Label101.Caption = "The update can take some time ..."                          ' Text"
        End If
End Sub





Attribute VB_Name = "XML_Export"
Dim valOutput As String
Dim fail As Boolean
Dim xmlFileName As String
Sub Import_Quelle()
    Dim Quelle As Object, Ziel As Object
    Dim Datei As String
    Dim msg_titel_file_de As String                                '*** Variable f|fffd|r Titel beim Datei|fffd|ffnen DE
    Dim msg_content_file_de As String                              '*** Variable f|fffd|r Inhalt beim Datei|fffd|ffnen EN
    Dim msg_titel_file_en As String                                '*** Variable f|fffd|r Titel beim Datei|fffd|ffnen DE
    Dim msg_content_file_en As String                              '*** Variable f|fffd|r Inhalt beim Datei|fffd|ffnen EN
    Dim msg_titel_fail_de As String                                '*** Variable f|fffd|r Titel der Fehlermeldung DE
    Dim msg_content_fail_de As String                              '*** Variable f|fffd|r Inhalt der Fehlermeldung DE
    Dim msg_titel_fail_en As String                                '*** Variable f|fffd|r Titel der Fehlermeldung EN
    Dim msg_content_fail_en As String                              '*** Variable f|fffd|r Inhalt der Fehlermeldung EN
    Dim msg_titel_ack_de As String                                  '*** Variable f|fffd|r Titel der Best|fffd|tigungsnachricht DE
    Dim msg_content_ack_de As String                                '*** Variable f|fffd|r Inhalt der Best|fffd|tigungsnachricht DE
    Dim msg_titel_ack_en As String                                  '*** Variable f|fffd|r Titel der Best|fffd|tigungsnachricht EN
    Dim msg_content_ack_en As String                                '*** Variable f|fffd|r Inhalt der Best|fffd|tigungsnachricht EN

    On Error GoTo Fehler
    If ActiveWorkbook.name <> ThisWorkbook.name Then Exit Sub
    
    '*** Zuweisung von Titel und Inhalt bei fehlender Dateiauswahl
    fail = False
    msg_titel_file_de = "Hinweis!"
    msg_titel_file_en = "Note!"
    msg_content_file_de = "Es wurde keine Excel-Datei ausgew|fffd|hlt!"
    msg_content_file_en = "No Excel file was selected!"
    
    '*** Zuweisung von Titel und Inhalt der Fehlermeldung
    fail = False
    msg_titel_fail_de = "Export von Compliance-Aussagen fehlgeschlagen!"
    msg_titel_fail_en = "Export of compliance statements failed!"
    msg_content_fail_de = "Es konnten keine Compliance-Aussagen erkannt werden!" & Chr(10) & Chr(10) & _
    "Bitte |fffd|berpr|fffd|fen Sie, ob eine g|fffd|ltige und ausgef|fffd|llte SoC f|fffd|r den XML-Export ausgew|fffd|hlt wurde."
    msg_content_fail_en = "No compliance statements could be detected!" & Chr(10) & Chr(10) & _
    "Please check if a valid and filled SoC has been selected for XML export."
    
    '*** Zuweisung von Titel und Inhalt der Erledigungsmeldung
    msg_titel_ack_de = "Export der Compliance-Aussagen f|fffd|r das PSA-Portal erfolgreich!"
    msg_titel_ack_en = "Export of compliance statements for the PSA portal successful!"
    msg_content_ack_de = "Bitte keine Ver|fffd|nderungen an der Export-Datei vornehmen:"
    msg_content_ack_en = "Please don't make any changes to the export file:"

    '*** Auswahl Ordner der aktiven SoC ****************************************************
    ChDrive Left(ActiveWorkbook.Path, 1)
    ChDir ActiveWorkbook.Path
    
    '*** Dialog "Datei |fffd|ffnen" anzeigen ****************************************************
    Datei = Application.GetOpenFilename("Excel-Dateien(*.xls*),*xls")
        
    '*** Abbrechen falls keine Datei ausgew|fffd|hlt ********************************************
    If Datei = "Falsch" Then
        If Tabelle03.Range("D3") Then
            MsgBox msg_content_file_en, vbInformation, msg_titel_file_en
        Else
            MsgBox msg_content_file_de, vbInformation, msg_titel_file_de
        End If
        Exit Sub
    End If

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False

    '*** Einlesen der Dateinamen
    d_file = ActiveWorkbook.name
    s_file = Right(Datei, InStr(1, StrReverse(Datei), "\") - 1)
    
    '*** Ausgew|fffd|hlte Datei |fffd|ffnen, wenn d_file <> s_file *****************************************
    If d_file <> s_file Then
        Workbooks.Open Filename:=Datei
    End If

    Call Export_XML
    
    '*** Ausgew|fffd|hlte Datei schlie|fffd|en, wenn d_file <> s_file *****************************************
    If d_file <> s_file Then
        Windows(d_file).Activate
        Workbooks(s_file).Close
    End If
        
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    Application.EnableEvents = True
     
    '*** Mitteilung |fffd|ber Fehler/Erfolg des Exports
    If fail Then
        If Tabelle03.Range("D3") Then
            MsgBox msg_content_fail_en, vbInformation, msg_titel_fail_en
        Else
            MsgBox msg_content_fail_de, vbInformation, msg_titel_fail_de
        End If
    Else
        If Tabelle03.Range("D3") Then
            MsgBox msg_content_ack_en & Chr(10) & Chr(10) & xmlFileName, vbInformation, msg_titel_ack_en
        Else
            MsgBox msg_content_ack_de & Chr(10) & Chr(10) & xmlFileName, vbInformation, msg_titel_ack_de
        End If
    End If
    
    Exit Sub
    
Fehler:
    MsgBox "FehlerNr.: " & Err.Number & vbNewLine & vbNewLine _
    & "Beschreibung: " & Err.Description _
    , vbCritical, "Fehler"
End Sub
Sub Export_XML()
'
' Export Makro
'
    On Error Resume Next
       
    Dim count1 As Integer                                           '*** Z|fffd|hler f|fffd|r Anforderungen innerhalb Anf-Doc
    Dim count2 As Integer                                           '*** Z|fffd|hler f|fffd|r Anforderungen aller Anf-Doc mit Statements
    Dim vntArray(0 To 5000, 0 To 15) As Variant                     '*** Feld zum Einlesen aller Anforderungen mit Statements
    Dim vntSortArray As Variant                                     '*** Feld zum Einlesen der Sortierspalten
    Dim ws As Worksheet                                             '*** Variable f|fffd|r Worksheet
    Dim start_Z As Integer                                          '*** Variable zum Festlegen der Startzeile
    Dim start_S As Integer                                          '*** Variable zum Festlegen der Startspalte
    Dim tmp As String                                               '*** Variable zur |fffd|bergabe an Hash-Funktion
    Dim Tab1 As String: Dim Tab2 As String: Dim Tab3 As String      '*** Variablen zur Tabulatorerzeugung XML-File
    Dim CO1 As String: Dim CO2 As String                            '*** Variablen zur Gruppe <Compliance>
    Dim EX1 As String: Dim EX2 As String                            '*** Variablen zur Gruppe <SoC id=   tab=   >
    Dim ReqID1 As String: Dim ReqID2 As String                      '*** Variablen zur Gruppe <ReqID>
    Dim DI1 As String: Dim DI2 As String                            '*** Variablen zur Gruppe <Dokumentnummer>
    Dim RefID1 As String: Dim RefID2 As String                      '*** Variablen zur Gruppe <ReferenzID>
    Dim MigID1 As String: Dim MigID2 As String                      '*** Variablen zur Gruppe <MigrationID>
    Dim SoC1 As String: Dim SoC2 As String                          '*** Variablen zur Gruppe <Statement>
    Dim Com1 As String: Dim Com2 As String:  Dim Com3 As String     '*** Variablen zur Gruppe <Kommentar>
    Dim Acc1 As String: Dim Acc2 As String:  Dim Acc3 As String     '*** Variablen zur Gruppe <Acceptanz>
    Dim Hash1 As String: Dim Hash2 As String                        '*** Variablen zur Gruppe <Hash>
    Dim intFF As Integer                                            '*** Variable zum Anh|fffd|ngen neuer Zeilen in XML-Datei
    Dim intExt As Integer                                           '*** Variable zur L|fffd|ngenermittlung Dateiname
    Dim strFileName As String                                       '*** Variable f|fffd|r XML-Dateinamen
    Dim strFile As String                                           '*** Variable f|fffd|r Pfadangabe und XML-Dateinamen
    Dim checksum As Boolean                                         '*** Variable zum Pr|fffd|fen, ob Hash-Bildung notwendig
    Dim msg_titel_ack_de As String                                  '*** Variable f|fffd|r Titel der Best|fffd|tigungsnachricht DE
    Dim msg_content_ack_de As String                                '*** Variable f|fffd|r Inhalt der Best|fffd|tigungsnachricht DE
    Dim msg_titel_ack_en As String                                  '*** Variable f|fffd|r Titel der Best|fffd|tigungsnachricht EN
    Dim msg_content_ack_en As String                                '*** Variable f|fffd|r Inhalt der Best|fffd|tigungsnachricht EN
    
    '*** Erkennung Dateiname
    intExt = InStrRev(ActiveWorkbook.name, ".xls") - 1
    strFileName = Left(ActiveWorkbook.name, intExt) & "_Export.xml"
    strFile = ActiveWorkbook.Path & "\" & strFileName
    
    intFF = FreeFile
    checksum = True
    Tab1 = Chr(9)
    Tab2 = Tab1 + Tab1
    Tab3 = Tab2 + Tab1
    
    '*** Zuweisung von Titel und Inhalt der Erledigungsmeldung
    msg_titel_ack_de = "Export der Compliance-Aussagen f|fffd|r das PSA-Portal erfolgreich!"
    msg_titel_ack_en = "Export of compliance statements for the PSA portal successful!"
    msg_content_ack_de = "Bitte keine Ver|fffd|nderungen an der Export-Datei vornehmen:"
    msg_content_ack_en = "Please don't make any changes to the export file:"
    
    '*** Zuweisung von Titel und Inhalt der Fehlermeldung
    msg_titel_fail_de = "Export der Compliance-Aussagen fehlgeschlagen!"
    msg_titel_fail_en = "Export of compliance statements failed!"
    msg_content_fail_de = "Es konnten keine Compliance-Aussagen erkannt werden!"
    msg_content_fail_en = "No compliance statements could be detected!"
    
    '*** Definition der Gruppen der XML-Struktur
    CO1 = CO1 & "<Compliance>": CO2 = "</Compliance>"
    EX1 = Tab1 & "<SOC id=" & Chr(34): EX2 = Tab1 & "</SOC>"
    ReqID1 = Tab2 & "<Req id=" & Chr(34): ReqID2 = Tab2 & "</Req>"
    DI1 = Tab3 & "<Sheet>": DI2 = "</Sheet>"
    RefID1 = Tab3 & "<RefID>": RefID2 = "</RefID>"
    MigID1 = Tab3 & "<MigID>": MigID2 = "</MigID>"
    SoC1 = Tab3 & "<Statement>": SoC2 = "</Statement>"
    Com1 = Tab3 & "<Comment>": Com2 = "</Comment>": Com3 = Tab3 & "<Comment/>"
    Acc1 = Tab3 & "<Acceptance>": Acc2 = "</Acceptance>": Acc3 = Tab3 & "<Acceptance/>"
    Hash1 = Tab3 & "<Hash>": Hash2 = "</Hash>"
    
    For Each ws In Worksheets
        
        '*** Erkennung welches SoC-Format vorhanden
        If ws.Range("A2") = "Nr." Then
            start_Z = 3
            start_S = 6
        Else
            start_Z = 6
            start_S = 19
        End If
        
        For count1 = start_Z To 300
            '*** Nur Zeilen mit Ref-ID, Mig-ID und Dokumentnummer werden behandelt
            If Not IsEmpty(ws.Range("AZ" & count1)) And Not IsEmpty(ws.Range("BA" & count1)) Then
                '*** Nur Zeilen mit nur einem Statement zur Compliance werden eingelesen
                'If LCase(ws.Range("S" & count1) + ws.Range("T" & count1) + ws.Range("U" & count1) + ws.Range("V" & count1)) = "x" Then
                If LCase(ws.Cells(count1, start_S) + ws.Cells(count1, start_S + 1) + ws.Cells(count1, start_S + 2) + ws.Cells(count1, start_S + 3)) = "x" Then
                    count2 = count2 + 1
                    '*** Req-Dokument
                    vntArray(count2, 1) = ws.Range("AZ" & start_Z - 1)
                    '*** Tabellenname: Inputvalidierung und |fffd|bernahme
                    Call Validation(ws.name)
                    vntArray(count2, 2) = valOutput
                    '*** ReferenzID
                    vntArray(count2, 3) = ws.Range("AZ" & count1)
                    '*** MigrationID
                    vntArray(count2, 4) = ws.Range("BA" & count1)
                    '*** SoC
                    If LCase(ws.Cells(count1, start_S)) = LCase("X") Then vntArray(count2, 5) = "SoC"
                    '*** SoPC
                    If LCase(ws.Cells(count1, start_S + 1)) = LCase("X") Then vntArray(count2, 5) = "SoPC"
                    '*** SoNC
                    If LCase(ws.Cells(count1, start_S + 2)) = LCase("X") Then vntArray(count2, 5) = "SoNC"
                    '*** n/a
                    If LCase(ws.Cells(count1, start_S + 3)) = LCase("X") Then vntArray(count2, 5) = "N/A"
                    '*** Kommentar Abweichung
                    If ws.Cells(count1, start_S + 4) <> "" Then
                        Call Validation(ws.Cells(count1, start_S + 4))
                        vntArray(count2, 6) = valOutput
                    End If
                    '*** Kommentar Akzeptanz
                    If ws.Cells(count1, start_S + 6) <> "" Then
                        Call Validation(ws.Cells(count1, start_S + 6))
                        vntArray(count2, 7) = valOutput
                    End If
                    '*** ReqID oder Req Nr
                    If start_Z = 6 Then
                        vntArray(count2, 8) = ws.Range("B" & count1)
                    Else
                        vntArray(count2, 8) = ws.Range("A" & count1)
                    End If
                    
                    '*** Hash-Bildung aller Informationen einer Compliance-Aussage
                    If checksum Then
                        tmp = _
                            vntArray(count2, 1) & vntArray(count2, 2) & vntArray(count2, 3) & _
                            vntArray(count2, 4) & vntArray(count2, 5) & vntArray(count2, 6) & _
                            vntArray(count2, 7) & vntArray(count2, 8)
                            Call hash(tmp)
                            vntArray(count2, 9) = sh
                    End If
                    
                    '*** Um eine sinnvolle Sortierung zu erhalten, wird der Count2 in das Feld |fffd|bernommen
                    vntArray(count2, 10) = count2
                
                End If
            Else
                Exit For
            End If
        Next count1
    Next ws
                           
    '*** Abbruch wenn Fehler im Export
    If count2 = 0 Then
        fail = True
        Exit Sub
    Else
        xmlFileName = strFileName
    End If
                           
    '*** Sortierung des Feldes
    'die zu sortierenden Spalten
    'negative Zahl = Spalte absteigend sortieren
    'positive Zahl = Spalte aufsteigend sortieren
    vntSortArray = Array(1, 2, 8)
    
    '*** Sortierroutine starten mit Angabe Sortierspalten, Feld, Anzahl der Eintr|fffd|ge
    Call prcSort(vntSortArray, vntArray(), count2)
     
    '*** |fffd|ffnet oder erstellt Textdatei zum hineinschreiben
    Open strFile For Output As #intFF
    
    '*** Schreiben vom XML-Header und |fffd|ffnen der Gruppe <Compliance>
    Print #intFF, "<?xml version=" & Chr(34) & "1.0" & Chr(34) & " encoding=" & Chr(34) & "ISO-8859-1" & Chr(34) & " standalone=" & Chr(34) & "yes" & Chr(34) & "?>"
    Print #intFF, CO1
    
    '*** Behandlung aller vorhandenen Eintr|fffd|ge aus vntArray()
    For count1 = 1 To count2
        '*** |fffd|ffnen einer neuen Gruppe <SoC> wenn TAB neu oder sich unterscheidet zum Vorg|fffd|nger
        If vntArray(count1, 2) <> vntArray(count1 - 1, 2) Then
            Print #intFF, EX1 & vntArray(count1, 1) & Chr(34) & " tab=" & Chr(34) & vntArray(count1, 2) & Chr(34) & ">"
        End If
        '*** Schreiben Requirement-ID
        Print #intFF, ReqID1 & vntArray(count1, 8) & Chr(34) & ">"
        '*** Schreiben Referenz-ID
        Print #intFF, RefID1 & vntArray(count1, 3) & RefID2
        '*** Schreiben Migration-ID
        Print #intFF, MigID1 & vntArray(count1, 4) & MigID2
        '*** Schreiben SoC-Statement
        Print #intFF, SoC1 & vntArray(count1, 5) & SoC2
        '*** Schreiben von Begr|fffd|ndung, wenn vorhanden
        If vntArray(count1 + 0, 6) <> "" Then
            Print #intFF, Com1 & vntArray(count1, 6) & Com2
        Else
            Print #intFF, Com3
        End If
        '*** Schreiben von Akzeptanz, wenn vorhanden
        If vntArray(count1 + 0, 7) <> "" Then
            Print #intFF, Acc1 & vntArray(count1, 7) & Acc2
        Else
            Print #intFF, Acc3
        End If
        '*** Schreiben der Checksumme, wenn ben|fffd|tigt
        If checksum Then Print #intFF, Hash1 & vntArray(count1, 9) & Hash2
        Print #intFF, ReqID2
        '*** Schlie|fffd|en der Gruppe <SOC>, wenn ben|fffd|tigt n|fffd|chster Eintrag neu
        If count1 = count2 Or vntArray(count1, 2) <> vntArray(count1 + 1, 2) Then Print #intFF, EX2

    '*** zur|fffd|ck zum Schleifenbeginn
    Next
    '*** Schlie|fffd|en der Gruppe <Compliance>,
    Print #intFF, CO2
    '*** schlie|fffd|t die Textdatei
    Close #intFF
   
End Sub

Private Sub Validation(valInput)
    
    '*** Zeilenvorschub entfernen
    'valInput = Replace(valInput, vbLf, " ", 1, -1, 1)
 
    '*** Zeichenumschreibung wegen XML-Syntax
    valInput = Replace(valInput, "&", "&amp;", 1, -1, 1)
    valInput = Replace(valInput, Chr(133), "...", 1, -1, 1)
    valInput = Replace(valInput, "<", "&lt;", 1, -1, 1)
    valInput = Replace(valInput, ">", "&gt;", 1, -1, 1)
    valInput = Replace(valInput, Chr(34), "&quot; ", 1, -1, 1)
    valInput = Replace(valInput, "'", "&apos;", 1, -1, 1)
    valOutput = valInput

End Sub

Private Sub hash(tmp)

    'run this to test md5, sha1, sha2/256, sha384, sha2/512 with salt, or sha2/512
    Dim sIn As String, sOut As String, b64 As Boolean
    'Dim sH As String, sSecret As String

    'insert the text to hash within the sIn quotes
    'note that this would usually be some private string
    'sIn = ""
    sIn = tmp & ""
    sSecret = "" 'secret key for StrToSHA512Salt only
    
    'select as required
    b64 = False   'output hex
    'b64 = True   'output base-64
    
    'enable any one
    'sH = MD5(sIn, b64)
    'sH = SHA1(sIn, b64)
    sh = SHA256(sIn, b64)
    'sH = SHA384(sIn, b64)
    'sH = StrToSHA512Salt(sIn, sSecret, b64)
    'sH = SHA512(sIn, b64)
    
    'Debug.Print sH & vbNewLine & Len(sH) & " characters in length"
    'MsgBox sH & vbNewLine & Len(sH) & " characters in length"
   
End Sub

Public Function MD5(ByVal sIn As String, Optional bB64 As Boolean = 0) As String
    'Set a reference to mscorlib 4.0 64-bit
    
    'Test with empty string input:
    'Hex:   d41d8cd98f00...etc
    'Base-64: 1B2M2Y8Asg...etc
        
    Dim oT As Object, oMD5 As Object
    Dim TextToHash() As Byte
    Dim bytes() As Byte
        
    Set oT = CreateObject("System.Text.UTF8Encoding")
    Set oMD5 = CreateObject("System.Security.Cryptography.MD5CryptoServiceProvider")
 
    TextToHash = oT.Getbytes_4(sIn)
    bytes = oMD5.ComputeHash_2((TextToHash))
 
    If bB64 = True Then
       MD5 = ConvToBase64String(bytes)
    Else
       MD5 = ConvToHexString(bytes)
    End If
        
    Set oT = Nothing
    Set oMD5 = Nothing

End Function

Public Function SHA1(sIn As String, Optional bB64 As Boolean = 0) As String
    'Set a reference to mscorlib 4.0 64-bit
    
    'Test with empty string input:
    '40 Hex:   da39a3ee5e6...etc
    '28 Base-64:   2jmj7l5rSw0yVb...etc
    
    Dim oT As Object, oSHA1 As Object
    Dim TextToHash() As Byte
    Dim bytes() As Byte
            
    Set oT = CreateObject("System.Text.UTF8Encoding")
    Set oSHA1 = CreateObject("System.Security.Cryptography.SHA1Managed")
    
    TextToHash = oT.Getbytes_4(sIn)
    bytes = oSHA1.ComputeHash_2((TextToHash))
        
    If bB64 = True Then
       SHA1 = ConvToBase64String(bytes)
    Else
       SHA1 = ConvToHexString(bytes)
    End If
            
    Set oT = Nothing
    Set oSHA1 = Nothing
    
End Function

Public Function SHA256(sIn As String, Optional bB64 As Boolean = 0) As String
    'Set a reference to mscorlib 4.0 64-bit
    
    'Test with empty string input:
    '64 Hex:   e3b0c44298f...etc
    '44 Base-64:   47DEQpj8HBSa+/...etc
    
    Dim oT As Object, oSHA256 As Object
    Dim TextToHash() As Byte, bytes() As Byte
    
    Set oT = CreateObject("System.Text.UTF8Encoding")
    Set oSHA256 = CreateObject("System.Security.Cryptography.SHA256Managed")
    
    TextToHash = oT.Getbytes_4(sIn)
    bytes = oSHA256.ComputeHash_2((TextToHash))
    
    If bB64 = True Then
       SHA256 = ConvToBase64String(bytes)
    Else
       SHA256 = ConvToHexString(bytes)
    End If
    
    Set oT = Nothing
    Set oSHA256 = Nothing
    
End Function

Public Function SHA384(sIn As String, Optional bB64 As Boolean = 0) As String
    'Set a reference to mscorlib 4.0 64-bit
    
    'Test with empty string input:
    '96 Hex:   38b060a751ac...etc
    '64 Base-64:   OLBgp1GsljhM2T...etc
    
    Dim oT As Object, oSHA384 As Object
    Dim TextToHash() As Byte, bytes() As Byte
    
    Set oT = CreateObject("System.Text.UTF8Encoding")
    Set oSHA384 = CreateObject("System.Security.Cryptography.SHA384Managed")
    
    TextToHash = oT.Getbytes_4(sIn)
    bytes = oSHA384.ComputeHash_2((TextToHash))
    
    If bB64 = True Then
       SHA384 = ConvToBase64String(bytes)
    Else
       SHA384 = ConvToHexString(bytes)
    End If
    
    Set oT = Nothing
    Set oSHA384 = Nothing
    
End Function

Public Function SHA512(sIn As String, Optional bB64 As Boolean = 0) As String
    'Set a reference to mscorlib 4.0 64-bit
    
    'Test with empty string input:
    '128 Hex:   cf83e1357eefb8bd...etc
    '88 Base-64:   z4PhNX7vuL3xVChQ...etc
    
    Dim oT As Object, oSHA512 As Object
    Dim TextToHash() As Byte, bytes() As Byte
    
    Set oT = CreateObject("System.Text.UTF8Encoding")
    Set oSHA512 = CreateObject("System.Security.Cryptography.SHA512Managed")
    
    TextToHash = oT.Getbytes_4(sIn)
    bytes = oSHA512.ComputeHash_2((TextToHash))
    
    If bB64 = True Then
       SHA512 = ConvToBase64String(bytes)
    Else
       SHA512 = ConvToHexString(bytes)
    End If
    
    Set oT = Nothing
    Set oSHA512 = Nothing
    
End Function

Function StrToSHA512Salt(ByVal sIn As String, ByVal sSecretKey As String, _
                           Optional ByVal b64 As Boolean = False) As String
    'Returns a sha512 STRING HASH in function name, modified by the parameter sSecretKey.
    'This hash differs from that of SHA512 using the SHA512Managed class.
    'HMAC class inputs are hashed twice;first input and key are mixed before hashing,
    'then the key is mixed with the result and hashed again.
    
    Dim asc As Object, enc As Object
    Dim TextToHash() As Byte
    Dim SecretKey() As Byte
    Dim bytes() As Byte
    
    'Test results with both strings empty:
    '128 Hex:    b936cee86c9f...etc
    '88 Base-64:   uTbO6Gyfh6pd...etc
    
    'create text and crypto objects
    Set asc = CreateObject("System.Text.UTF8Encoding")
    
    'Any of HMACSHAMD5,HMACSHA1,HMACSHA256,HMACSHA384,or HMACSHA512 can be used
    'for corresponding hashes, albeit not matching those of managed classes.
    Set enc = CreateObject("System.Security.Cryptography.HMACSHA512")

    'make a byte array of the text to hash
    bytes = asc.Getbytes_4(sIn)
    'make a byte array of the private key
    SecretKey = asc.Getbytes_4(sSecretKey)
    'add the private key property to the encryption object
    enc.Key = SecretKey

    'make a byte array of the hash
    bytes = enc.ComputeHash_2((bytes))
    
    'convert the byte array to string
    If b64 = True Then
       StrToSHA512Salt = ConvToBase64String(bytes)
    Else
       StrToSHA512Salt = ConvToHexString(bytes)
    End If
    
    'release object variables
    Set asc = Nothing
    Set enc = Nothing

End Function

Private Function ConvToBase64String(vIn As Variant) As Variant

    Dim oD As Object
      
    Set oD = CreateObject("MSXML2.DOMDocument")
      With oD
        .LoadXML "<root />"
        .DocumentElement.DataType = "bin.base64"
        .DocumentElement.nodeTypedValue = vIn
      End With
    ConvToBase64String = Replace(oD.DocumentElement.Text, vbLf, "")
    
    Set oD = Nothing

End Function

Private Function ConvToHexString(vIn As Variant) As Variant

    Dim oD As Object
      
    Set oD = CreateObject("MSXML2.DOMDocument")
      
      With oD
        .LoadXML "<root />"
        .DocumentElement.DataType = "bin.Hex"
        .DocumentElement.nodeTypedValue = vIn
      End With
    ConvToHexString = Replace(oD.DocumentElement.Text, vbLf, "")
    
    Set oD = Nothing

End Function

Private Sub prcSort(vntSortArray As Variant, vntArray() As Variant, count2 As Integer)
 Dim intIndex As Integer
 Dim lngIndex1 As Long, lngIndex2 As Long, lngRowsArray() As Long
 Dim lngRowsCount As Long, lngRangeCount As Long
 Dim vntTemp As Variant
 ReDim lngRowsArray(0 To 1, 0 To UBound(vntArray) * 2)
 
 'Array f|fffd|r den 1. Sortierlauf
 lngRowsArray(0, 0) = LBound(vntArray)
 'lngRowsArray(0, 1) = UBound(vntArray)
 lngRowsArray(0, 1) = count2
 lngRowsCount = 1

 For intIndex = LBound(vntSortArray) To UBound(vntSortArray)

  'Wenn eine Spalte angegeben
  If vntSortArray(intIndex) <> 0 Then
   lngRangeCount = -1

   'Schleife zum sortieren der einzelnen Bereiche
   For lngIndex1 = 0 To lngRowsCount Step 2

    'Sortieren des Bereichs, wenn Zeilenzahl gr|fffd||fffd|er 1
    If lngRowsArray(0, lngIndex1) <> lngRowsArray(0, lngIndex1 + 1) Then

     Call prcQuickSort(CLng(lngRowsArray(0, lngIndex1)), _
      CLng(lngRowsArray(0, lngIndex1 + 1)), CInt(Abs(vntSortArray(intIndex))), _
      CBool(vntSortArray(intIndex) > 0), vntArray())

     'sortierten Bereich merken
     lngRangeCount = lngRangeCount + 2
     lngRowsArray(1, lngRangeCount - 1) = lngRowsArray(0, lngIndex1)
     lngRowsArray(1, lngRangeCount) = lngRowsArray(0, lngIndex1 + 1)

    End If
   Next
    
   lngRowsCount = -1

   'Durchsuchen der soeben sortierten Spalte nach Wertewechsel
   For lngIndex1 = 0 To lngRangeCount Step 2

    '1. Zeile des zu sortierenden Bereichs
    vntTemp = vntArray(lngRowsArray(1, lngIndex1), Abs(vntSortArray(intIndex)))
    lngRowsCount = lngRowsCount + 1
    lngRowsArray(0, lngRowsCount) = lngRowsArray(1, lngIndex1)

    'Suche nach Wechsel innerhalb des Bereichs
    For lngIndex2 = lngRowsArray(1, lngIndex1) To lngRowsArray(1, lngIndex1 + 1)
     If vntTemp <> vntArray(lngIndex2, Abs(vntSortArray(intIndex))) Then
      lngRowsCount = lngRowsCount + 2
      lngRowsArray(0, lngRowsCount - 1) = lngIndex2 - 1
      lngRowsArray(0, lngRowsCount) = lngIndex2
      vntTemp = vntArray(lngIndex2, Abs(vntSortArray(intIndex)))
     End If
    Next

    'letzte Zeile des zu sortierenden Bereichs
    lngRowsCount = lngRowsCount + 1
    lngRowsArray(0, lngRowsCount) = lngRowsArray(1, lngIndex1 + 1)

   Next
  End If
 Next
End Sub

Private Sub prcQuickSort(lngLbound As Long, lngUbound As Long, _
 intSortColumn As Integer, bntSortKey As Boolean, vntArray() As Variant)
 Dim intIndex As Integer
 Dim lngIndex1 As Long, lngIndex2 As Long
 Dim vntTemp As Variant, vntBuffer As Variant
 lngIndex1 = lngLbound
 lngIndex2 = lngUbound
 vntBuffer = vntArray((lngLbound + lngUbound) \ 2, intSortColumn)
 Do
  If bntSortKey Then
   Do While vntArray(lngIndex1, intSortColumn) < vntBuffer
    lngIndex1 = lngIndex1 + 1
   Loop
   Do While vntBuffer < vntArray(lngIndex2, intSortColumn)
    lngIndex2 = lngIndex2 - 1
   Loop
  Else
   Do While vntArray(lngIndex1, intSortColumn) > vntBuffer
    lngIndex1 = lngIndex1 + 1
   Loop
   Do While vntBuffer > vntArray(lngIndex2, intSortColumn)
    lngIndex2 = lngIndex2 - 1
   Loop
  End If
  If lngIndex1 < lngIndex2 Then
   If vntArray(lngIndex1, intSortColumn) <> _
    vntArray(lngIndex2, intSortColumn) Then
    For intIndex = LBound(vntArray, 2) To UBound(vntArray, 2)
     vntTemp = vntArray(lngIndex1, intIndex)
     vntArray(lngIndex1, intIndex) = _
      vntArray(lngIndex2, intIndex)
     vntArray(lngIndex2, intIndex) = vntTemp
    Next
   End If
   lngIndex1 = lngIndex1 + 1
   lngIndex2 = lngIndex2 - 1
  ElseIf lngIndex1 = lngIndex2 Then
   lngIndex1 = lngIndex1 + 1
   lngIndex2 = lngIndex2 - 1
  End If
 Loop Until lngIndex1 > lngIndex2
 If lngLbound < lngIndex2 Then Call prcQuickSort(lngLbound, _
  lngIndex2, intSortColumn, bntSortKey, vntArray())
 If lngIndex1 < lngUbound Then Call prcQuickSort(lngIndex1, _
  lngUbound, intSortColumn, bntSortKey, vntArray())
End Sub






INQUEST-PP=macro
