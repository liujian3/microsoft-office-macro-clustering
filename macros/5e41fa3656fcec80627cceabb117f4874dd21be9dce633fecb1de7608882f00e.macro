Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CreateInstruments, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "ResizeTableButton, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    ActiveSheet.Calculate
    Application.ScreenUpdating = False
    clearOptions
    Dim inRng As Range: Set inRng = Range("NX_" & Me.Name & "_M_SelectionGrid")
    Dim outRng As Range: Set outRng = Range("NX_" & Me.Name & "_M_InstDefs")
    Dim asn$: asn = ActiveSheet.Name
    
    
    
    Dim i As Integer, j As Integer
    Dim counter As Integer: counter = 0
    Dim invcom$: invcom = """"
    Dim f$
    
    For i = 2 To inRng.Rows.Count
        For j = 2 To inRng.Columns.Count
            If inRng(i, j) = "Y" Then
                counter = counter + 1
                outRng.Cells(counter, 1) = inRng.Cells(i, 1)
                outRng.Cells(counter, 2) = inRng.Cells(1, j)
                outRng.Cells(counter, 3).Formula = "=nxInstrumentFXEuropean(" _
                                                    & "NX_" & asn & "_M_PrefixValue &" & invcom & "." & invcom & "& NX_" & asn & "_M_NameValue &" & invcom & "." & invcom & "&" & invcom & outRng(counter, 1) & invcom & "&" & invcom & "." & invcom & "&" & invcom & outRng(counter, 2) & invcom & "," _
                                                    & "NX_" & asn & "_M_DomesticCurrency," _
                                                    & "NX_" & asn & "_M_Flavor," _
                                                    & "NX_" & asn & "_M_ForeignCurrency," _
                                                    & outRng.Cells(counter, 2).Address & ",,," _
                                                    & outRng.Cells(counter, 1).Address & ",,," _
                                                    & "NX_" & asn & "_M_NoticePeriod," _
                                                    & "NX_" & asn & "_M_FixCalendar," _
                                                    & "NX_" & asn & "_M_FixConvention," _
                                                    & "NX_" & asn & "_M_Notional," _
                                                    & "NX_" & asn & "_M_VolCurve)"

                   
            End If
        Next
    Next
    
    If counter = 0 Then Exit Sub
    Range(outRng.Cells(1, 1), outRng.Cells(counter, 3)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_InstDefs", RefersTo:=Selection
    Selection.HorizontalAlignment = xlCenter
    Selection.Interior.ColorIndex = 2
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    Range(outRng.Cells(1, 2), outRng.Cells(counter, 3)).NumberFormat = "#,##0.0000"
    Range(outRng.Cells(1, 3), outRng.Cells(counter, 4)).HorizontalAlignment = xlLeft
    
    Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" _
                                    & "NX_" & asn & "_M_PrefixValue&" & invcom & "." & invcom & "& NX_" & asn & "_M_NameValue&" & invcom & ".Collection" & invcom & "," _
                                    & "NX_" & asn & "_M_DomesticCurrency," _
                                    & Range(outRng.Cells(1, 3).Offset(-1, 0), outRng.Cells(counter, 3)).Address & ",," _
                                    & "NX_" & asn & "_M_ForeignCurrency)"

   ActiveSheet.Calculate
   Range("NX_" & asn & "_M_Anchor").Select
   
End Sub

Private Sub ResizeTable()
    ActiveSheet.Calculate
   
    Dim asn$: asn = ActiveSheet.Name
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_SelectionGrid").Cells(1, 1)
    Dim FXVolData: FXVolData = Application.Run("NxLibView", Range("NX_" & Me.Name & "_M_VolCurve") & ".Data")
    Dim i As Integer, rowCount As Integer, columnCount As Integer: rowCount = 0
            
        
    'Check that a valid XXX.XXX.FXVol.Data exists
    On Error GoTo ResizeTable_BadVolData:
    Dim ErrorCheck As Variant: ErrorCheck = LBound(FXVolData, 1): ErrorCheck = LBound(FXVolData, 2)
        
    
    'Check that STRIKE BY SIDE is valid
    Dim strikeBySide As Variant: strikeBySide = Range("NX_" & Me.Name & "_M_StrikeBySide").Value
    If Int(strikeBySide) / strikeBySide <> 1 Then
        GoTo ResizeTable_BadStrikeBySide
    Else
        columnCount = 2 * strikeBySide + 1
    End If
       
    'Check that STRIKE FACBOR is valid
    If Not IsNumeric(Range("NX_" & Me.Name & "_M_StrikeFactor").Value) Then
        GoTo ResizeTable_BadStrikeFactor
    End If
    
    'Check that ATM Price is valid
    Dim ATMPrice As Variant: ATMPrice = Range("NX_" & Me.Name & "_M_ATMPrice")
    If Not IsNumeric(ATMPrice) Then
        GoTo ResizeTable_BadATMPrice
    End If
          
    On Error GoTo 0
    
    Range("NX_" & Me.Name & "_M_SelectionGrid") = ""
    For i = LBound(FXVolData) + 1 To UBound(FXVolData)
        rowCount = rowCount + 1
        anchor.Offset(rowCount, 0) = FXVolData(i, 1)
    Next
    
    anchor.Offset(0, strikeBySide + 1) = "ATM"
    Dim lastLeftPrice As Double: lastLeftPrice = ATMPrice
    Dim lastRightPrice As Double: lastRightPrice = ATMPrice
    Dim strikeFactor As Double: strikeFactor = Range("NX_" & Me.Name & "_M_StrikeFactor")
        
    For i = strikeBySide To 1 Step -1
            lastLeftPrice = lastLeftPrice - ATMPrice * strikeFactor
            lastRightPrice = lastRightPrice + ATMPrice * strikeFactor
            anchor.Offset(0, i) = lastLeftPrice
            anchor.Offset(0, columnCount - i + 1) = lastRightPrice
    Next
    
    Range(anchor, anchor.Offset(rowCount, columnCount)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_SelectionGrid", RefersTo:=Selection
    
    ActiveSheet.Calculate
    Range("NX_" & asn & "_M_Anchor").Select
    
    
    Exit Sub
    
ResizeTable_BadVolData:
    MsgBox FXVolData(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
    Exit Sub
    
ResizeTable_BadStrikeBySide:
    MsgBox "Can not Resize Table. STRIKE BY SIDE must be an integer.", _
        vbExclamation, "Invalid Input"
    Exit Sub
ResizeTable_BadStrikeFactor:
    MsgBox "STRIKE FACTOR must be a number.", _
    vbExclamation, "Invalid Input"
    Exit Sub
ResizeTable_BadATMPrice:
    MsgBox "Can not Resize Table. ATM Price must be a number." & vbCrLf & "Please provide a number or a FX Spot Object as SPOT PRICE", _
    vbExclamation, "Invalid Input"

End Sub


Private Sub clearOptions()
    Range("NX_" & Me.Name & "_M_InstDefs").Clear
End Sub

Private Sub CreateInstruments_Click()
    generateOptions
    
End Sub



Private Sub ResizeTableButton_Click()
    ResizeTable
End Sub
Attribute VB_Name = "TemplateSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'=============================================================================
' Copyright (C) 1996-2008 NumeriX LLC. All rights reserved.
'
' This software comprises valuable trade secrets and may be used, copied,
' transmitted, stored, and distributed only in accordance with the terms
' of a written license or trial agreement and with the inclusion of this
' copyright notice.
'=============================================================================

Option Explicit

'------------------------------------------------------------------------------
' fields
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     the range of the pricing model, or <c>Nothing</c> if there is no
    '''     pricing-model range
    ''' </summary>
    Private m_rngModel As Range
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     the range of the numerical method, or <c>Nothing</c> if there is
    '''     no numerical-method range
    ''' </summary>
    Private m_rngMethod As Range
    '--------------------------------------------------------------------------

'------------------------------------------------------------------------------
' overridden/implemented methods
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Called when this worksheet activates.
    ''' </summary>
    Private Sub Worksheet_Activate()
    
    End Sub
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Called when this worksheet changes.
    ''' </summary>
    ''' <param name="rngTarget">
    '''     the range of this worksheet that has changed
    ''' </param>
    Private Sub Worksheet_Change(ByVal rngTarget As Range)
    
        '
        ' get the model and method ranges
        '
        Call GetRanges
        If ((m_rngModel Is Nothing) Or (m_rngMethod Is Nothing)) Then
        
            Exit Sub
        
        End If
        
        '
        ' set the method validation, if necessary
        '
        If (StrComp(rngTarget.Address, m_rngModel.Address, vbTextCompare) = 0) Then
        
            With m_rngMethod.Validation
            
                Call .Delete
                Call .Add(Type:=xlValidateList, _
                          AlertStyle:=xlValidAlertStop, _
                          Operator:=xlBetween, _
                          Formula1:=GetListOfMethods(m_rngModel.Value))
                .InCellDropdown = True
                .ErrorTitle = "Method Selection Error"
                .ErrorMessage = "The model does not support this method."
                .ShowError = False
                
            End With
            
        End If
    
    End Sub
    '--------------------------------------------------------------------------
    
'------------------------------------------------------------------------------
' private methods
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the list of methods that correspond to a specified model.
    ''' </summary>
    ''' <param name="strModelID">
    '''     the ID of the model to use
    ''' </param>
    ''' <returns>
    ''' </returns>
    Private Function GetListOfMethods(ByVal strModelID As String) As String
    
        Dim strModelType As String: strModelType = ""
        Dim strOutput As String: strOutput = ""
        Dim i As Integer: i = 0
        Dim j As Integer: j = 0
        Dim intModelsCount As Integer: intModelsCount = 0
        Dim intMethodsCount As Integer: intMethodsCount = 0
        Dim vntHeadings As Variant
        Dim vntValues As Variant
        Dim vntModelMethods As Variant
        
        '
        ' initialize the error handler
        '
        On Error GoTo errorHandler
        
        '
        ' get views for the headings and values
        '
        vntHeadings = Application.Run("nxLibView", strModelID, "CALL HEADERS")
        vntValues = Application.Run("nxLibView", strModelID, "CALL VALUES")
        
        '
        ' search for the model type
        '
        For i = 1 To UBound(vntHeadings)
        
            If (StrComp(vntHeadings(i, 1), "MODEL", vbTextCompare) = 0) Then
            
                strModelType = vntValues(i, 1)
                strModelType = RemoveSpaces(strModelType)
                Exit For
                
            End If
            
        Next i
        
        '
        ' get the supported methods
        '
        vntModelMethods = Application.Run("nxLibView", "GLOBAL.ModelMethods")
        intModelsCount = UBound(vntModelMethods)
        intMethodsCount = UBound(vntModelMethods, 2)
        For i = 2 To intModelsCount
        
            If (StrComp(CStr(vntModelMethods(i, 1)), strModelType, vbTextCompare) = 0) Then
            
                For j = 2 To intMethodsCount
                
                    If (vntModelMethods(i, j) = 1) Then
                    
                        strOutput = (strOutput & vntModelMethods(1, j) & ",")
                        
                    End If
                    
                Next j
                
                GetListOfMethods = VBA.Left$(strOutput, (Len(strOutput) - 1))
                Exit Function
                
            End If
            
        Next i
        
errorHandler:

        GetListOfMethods = "BackwardPDE,BackwardLattice,BackwardTree,BackwardAnalytic,BackwardMC,ForwardMC,ForwardAnalytic"
        Exit Function
        
    End Function
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the pricing-model and numerical-method ranges.
    ''' </summary>
    Private Sub GetRanges()
    
        On Error GoTo errorHandler
        Set m_rngModel = Range("Nx_D_" & Me.Name & "_ModelID")
        Set m_rngMethod = Range("Nx_D_" & Me.Name & "_NumMethod")
        
        Exit Sub
        
errorHandler:

        Set m_rngModel = Nothing
        Set m_rngMethod = Nothing
        
    End Sub
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Removes all spaces from a specified string.
    ''' </summary>
    ''' <param name="strInput">
    '''     the string from which to remove all spaces
    ''' </param>
    ''' <returns>
    '''     a copy of the specified string, with spaces removed
    ''' </returns>
    Private Function RemoveSpaces(ByVal strInput As String) As String
    
        Dim strResult As String: strResult = ""
        Dim ch As String * 1
        Dim i As Integer: i = 0
        
        For i = 1 To Len(strInput)
        
            ch = VBA.Mid$(strInput, i, 1)
            If (StrComp(ch, " ", vbBinaryCompare) <> 0) Then
            
                strResult = (strResult & ch)
                
            End If
            
        Next
        
        RemoveSpaces = strResult
        
    End Function
    '--------------------------------------------------------------------------




Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
