Attribute VB_Name = "CheckFont"
Function IsFontInstalled(ByVal sFontName As String) _
      As Boolean

  Dim cbrBar  As CommandBar
  Dim cbcFont As CommandBarControl
  Dim nCnt    As Integer

  Set cbcFont = Application.CommandBars. _
                     FindControl(ID:=1728)

  If cbcFont Is Nothing Then
    Set cbrBar = Application.CommandBars.Add( _
          "MyDummy", msoBarFloating, False, True)
    Set cbcFont = cbrBar.Controls.Add(ID:=1728)
  End If

  For nCnt = 1 To cbcFont.ListCount
    If UCase$(sFontName) = UCase$(cbcFont.List(nCnt)) Then
      IsFontInstalled = True
      Exit For
    End If
  Next

  If Not cbrBar Is Nothing Then
    cbrBar.Delete
    Set cbrBar = Nothing
  End If
  Set cbcFont = Nothing
End Function

Attribute VB_Name = "DesignAnpassen"
Function Umbruchdirekt(heading, text)
    Selection.SetRange 0, 0
    With Selection.Find
        .Forward = True
        .Format = True
        .Wrap = wdFindStop
        .MatchWholeWord = True
        .Style = heading
        Do While .Execute(FindText:="*" + text, MatchWildcards:=True) = True
            If ((Left(Selection.text, 1) <> Chr(11)) And Len(Selection.text) > 1) Then
                Selection.text = Chr(11) + Selection.text
                Selection.Style = heading
            End If
        Loop
    End With
End Function

Function Umbruch(heading)
    Selection.SetRange 0, 0
    With Selection.Find
        .Forward = True
        .Format = True
        .Wrap = wdFindStop
        .MatchWholeWord = True
        .Style = heading
        Do While .Execute(FindText:="**" + Chr(13), MatchWildcards:=True) = True
            If ((Left(Selection.text, 1) <> Chr(11)) And Len(Selection.text) > 1) Then
                If (Selection.Characters(1) <> Chr(12)) Then
                    Selection.text = Chr(11) + Selection.text
                    Selection.Style = heading
                End If
            End If
        Loop
    End With
End Function

Function Umbruch1(heading)
    Selection.SetRange 0, 0
    With Selection.Find
        .Forward = True
        .Format = False
        .Wrap = wdFindContinue
        .Style = heading
        Do While .Execute(FindText:=Chr(9) + "*" + Chr(9), MatchWildcards:=True) = True
            Selection.Expand wdWord
            If (Left(Selection.text, 1) <> Chr(11)) Then
                Selection.Collapse
                Selection.Delete Count:=1
                Selection.InsertBefore Chr(11)
                WordBasic.CharRight 1
            End If
        Loop
    End With
    
    Selection.SetRange 0, 0
    With Selection.Find
        .Forward = True
        .Format = True
        .Wrap = wdFindStop
        .Style = heading
        
        Do While .Execute(FindText:="*" + Chr(13), MatchWildcards:=True) = True
            Selection.Style = heading
        Loop
    End With
End Function

Function Fcount(heading)
    Selection.SetRange 0, 0
    Dim i As Integer
    i = 0
    
    With Selection.Find
        .Forward = True
        .Format = False
        .Wrap = wdFindContinue
        .Style = heading
        Do While .Execute(FindText:=Chr(9) + "*" + Chr(9), MatchWildcards:=True) = True
            i = i + 1
        Loop
    End With
    
    Fcount = i
End Function

Function Indexumbruch()
    Dim sty As String
    Dim i As Boolean
    i = False
    sty = "Index|fffd|berschrift"
    Selection.SetRange 0, 0
    With Selection.Find
        .Forward = True
        .Format = True
        .Wrap = wdFindStop
        .MatchWholeWord = True
        .Style = sty
        Do While .Execute(FindText:="*" + Chr(13), MatchWildcards:=True) = True
            If (i And Left(Selection.text, 1) <> Chr(11)) Then
                Selection.InsertBefore Chr(11)
            Else
                i = True
            End If
        Loop
    End With
End Function

Public Sub MAIN()
    If MsgBox("Dieses Makro |fffd|berpr|fffd|ft und aktualisiert das Dokument und nimmt dabei Anpassungen an den |fffd|berschriften und dem Inhaltsverzeichniss vor. " + Chr(13) + "So wird beispielsweise direkt nach der |fffd|berschriftsnummerierung automatisch ein Umbruch eingef|fffd|gt. " + Chr(13) + "Sie k|fffd|nnen dieses Makro jederzeit und beliebig oft ausf|fffd|hren. " + Chr(13) + Chr(13) + "M|fffd|chten Sie das Makro jetzt ausf|fffd|hren?", vbYesNo, "Layout optimieren") = vbNo Then
        Exit Sub
    End If
    
    Dim track As Boolean
    track = ActiveDocument.TrackRevisions
    ActiveDocument.TrackRevisions = False
    
    ActiveDocument.Characters(1).Select
    Selection.SetRange 0, 0
    
    'Call Umbruchdirekt("|fffd|berschrift AS", "Abk|fffd|rzungen")
    'Call Umbruchdirekt("|fffd|berschrift AS", "Referenzlogos")
    Call Umbruch(wdStyleHeading1)
    Call Umbruch(wdStyleHeading2)
    Call Umbruch(wdStyleHeading3)
    Call Umbruch(wdStyleHeading4)
    Call Umbruch(wdStyleHeading5)
    Call Umbruch(wdStyleHeading6)
    Call Umbruch(wdStyleHeading7)
    Call Umbruch(wdStyleHeading8)
    Call Umbruch(wdStyleHeading9)
    
    ActiveDocument.Fields.Update
    
    Dim myTOF As TableOfFigures
    For Each myTOF In ActiveDocument.TablesOfFigures
        myTOF.UpdatePageNumbers
        myTOF.UseFields = True
    Next myTOF
    
    Dim myIDX As Index
    For Each myIDX In ActiveDocument.Indexes
        myIDX.Update
        myIDX.Range.Select
        WordBasic.CharRight 1
        WordBasic.CharLeft 1
        WordBasic.FormatColumns Columns:="4", ColumnNo:="1", ColumnWidth:="4,125 cm", ColumnSpacing:="0,4 cm", EvenlySpaced:=1, ApplyColsTo:=0, ColLine:=0, StartNewCol:=-1
    Next myIDX

    If ActiveDocument.TablesOfContents.Count > 0 Then
        Dim myTOC As TableOfContents
        For Each myTOC In ActiveDocument.TablesOfContents
            myTOC.UpdatePageNumbers
            myTOC.UseFields = True
        Next myTOC
    
        sum = Fcount(wdStyleTOC1) + Fcount(wdStyleTOC2) + Fcount(wdStyleTOC3) + Fcount(wdStyleTOC4) + Fcount(wdStyleTOC5) + Fcount(wdStyleTOC6) + Fcount(wdStyleTOC7) + Fcount(wdStyleTOC8) + Fcount(wdStyleTOC9)
        ActiveDocument.TablesOfContents(1).Range.Select
        Selection.Collapse wdCollapseStart
        For x = 1 To sum
            Selection.InsertAfter Chr(11)
        Next x
        Selection.SetRange Selection.Start, Selection.Start + sum
        Dim svd As Range
        Set svd = Selection.Range
        
        For Each myTOC In ActiveDocument.TablesOfContents
            myTOC.UpdatePageNumbers
            myTOC.UseFields = True
        Next myTOC
        
        svd.Delete
        
        
        'Call Indexumbruch
        Call Umbruch1(wdStyleTOC1)
        Call Umbruch1(wdStyleTOC2)
        Call Umbruch1(wdStyleTOC3)
        Call Umbruch1(wdStyleTOC4)
        Call Umbruch1(wdStyleTOC5)
        Call Umbruch1(wdStyleTOC6)
        Call Umbruch1(wdStyleTOC7)
        Call Umbruch1(wdStyleTOC8)
        Call Umbruch1(wdStyleTOC9)
    End If

    ActiveDocument.ActiveWindow.View.SeekView = wdSeekMainDocument
    Dim rDcm As Range
    Set rDcm = ActiveDocument.Range
' DE
    Options.AutoFormatAsYouTypeReplaceQuotes = False
    With rDcm.Find
        .text = "^0132"
        .Replacement.text = "^0187"
        .Execute Replace:=wdReplaceAll
    End With
    
    Set rDcm = ActiveDocument.Range
    With rDcm.Find
        .text = "^0147"
        .Replacement.text = "^0171"
        .Execute Replace:=wdReplaceAll
    End With
    With rDcm.Find
        .text = "^0148"
        .Replacement.text = "^0187"
        .Execute Replace:=wdReplaceAll
    End With
    Options.AutoFormatAsYouTypeReplaceQuotes = True
    
    ActiveDocument.TrackRevisions = track
End Sub



Attribute VB_Name = "Druck_Dateiname_mit_Pfad"
Sub Druck_Dateiname_mit_Pfadangabe()
Dim xTMName$
Dim wdDoc As Word.Document
Dim wdRng As Word.Range

Set wdDoc = ActiveDocument
xTMName = "dateiname"


wdDoc.Windows(1).View.Type = wdPrintView
wdDoc.Windows(1).View.SeekView = wdSeekCurrentPageHeader

If wdDoc.Bookmarks.Exists(xTMName) Then
 Set wdRng = wdDoc.Bookmarks(xTMName).Range

 wdRng.text = "Dateiname_mit_Pfadangabe"
 wdRng.InsertAutoText
 wdRng.Font.Bold = False
 wdDoc.Bookmarks.Add Name:=xTMName, Range:=wdRng
End If

Call drucken

Call RecyclingTextmarke


wdDoc.Windows(1).View.Type = wdPrintView
End Sub

Private Sub RecyclingTextmarke()
    TMName = "dateiname"
    If ActiveDocument.Bookmarks.Exists(TMName) Then
    Dim TMRange As Range
    Set TMRange = ActiveDocument.Bookmarks(TMName).Range
    TMRange.text = ""
    ActiveDocument.Bookmarks.Add Name:=TMName, Range:=TMRange
End If
End Sub


Private Sub drucken()

'Application.PrintOut FileName:="", Item:= _
'        wdPrintDocumentContent, Copies:=1, PageType:=wdPrintAllPages, _
'         Collate:=True, Background:=False, PrintToFile:=False
Application.PrintPreview = True
Application.Dialogs(wdDialogFilePrint).Show

End Sub
Attribute VB_Name = "Druck_Dateiname_ohne_Pfad"
Sub Druck_Dateiname_ohne_Pfadangabe()
Dim xTMName$
Dim wdDoc As Word.Document
Dim wdRng As Word.Range

Set wdDoc = ActiveDocument
xTMName = "dateiname"


wdDoc.Windows(1).View.Type = wdPrintView
wdDoc.Windows(1).View.SeekView = wdSeekCurrentPageHeader

If wdDoc.Bookmarks.Exists(xTMName) Then
 Set wdRng = wdDoc.Bookmarks(xTMName).Range

 wdRng.text = "Dateiname"
 wdRng.InsertAutoText
 wdRng.Font.Bold = False
 wdDoc.Bookmarks.Add Name:=xTMName, Range:=wdRng
End If

Call drucken

Call RecyclingTextmarke


wdDoc.Windows(1).View.Type = wdPrintView
End Sub

Private Sub RecyclingTextmarke()
    TMName = "dateiname"
    If ActiveDocument.Bookmarks.Exists(TMName) Then
    Dim TMRange As Range
    Set TMRange = ActiveDocument.Bookmarks(TMName).Range
    TMRange.text = ""
    ActiveDocument.Bookmarks.Add Name:=TMName, Range:=TMRange
End If
End Sub


Private Sub drucken()

'Application.PrintOut FileName:="", Item:= _
'        wdPrintDocumentContent, Copies:=1, PageType:=wdPrintAllPages, _
'         Collate:=True, Background:=False, PrintToFile:=False
Application.PrintPreview = True
Application.Dialogs(wdDialogFilePrint).Show

End Sub
Attribute VB_Name = "GrafikEinf|fffd|gen"
Function bild_ohne(breite)
    Dim shp As Shape
    Dim inl As InlineShape
    Dim rng As Range
    Set rng = Selection.Range
    Dim paste As Boolean
    Dim alt As String
    Dim dlg As Dialog
    
    ' Pr|fffd|fen ob bestehendes Bild gew|fffd|hlt ist
    If rng.ShapeRange.Count > 0 Or rng.InlineShapes.Count > 0 Then
        If rng.ShapeRange.Count > 0 Then
            Set shp = rng.ShapeRange(1)
        Else
            Set inl = rng.InlineShapes(1)
            Set shp = inl.ConvertToShape
        End If
        
        alt = shp.AlternativeText
        
        If rng.Tables.Count > 0 Then
            shp.Select
            Selection.Copy
            rng.Tables(1).Delete
        Else
            shp.Select
            Selection.Cut
            
            If alt = "#13.175" Then
                With Selection.Find
                    .Format = True
                    .Style = "#Bildunterschrift Sonderfall"
                    .Forward = False
                    .Execute FindText:="", MatchWildcards:=True
                End With
                Selection.Delete
            End If
            
            If alt = "#17.7" Then
                With Selection.Find
                    .Format = True
                    .Style = "#Bildunterschrift Sonderfall"
                    .Forward = True
                    .Execute FindText:="", MatchWildcards:=True
                End With
                Selection.Delete
            End If
        End If
        paste = True
    End If
    
        Selection.Collapse wdCollapseStart
        Selection.SetRange Selection.Start - 1, Selection.Start
        If (Selection.Characters(1).text = Chr(13)) Then
            Selection.SetRange Selection.End, Selection.End
        Else
            Selection.SetRange Selection.End, Selection.End
            WordBasic.InsertPara
        End If
            
        WordBasic.InsertPara
        Selection.SetRange Selection.Start - 1, Selection.Start
        Selection.Collapse wdCollapseStart
            
        If paste Then
            Selection.paste
            Set shp = Selection.ShapeRange(1)
        Else
            Set dlg = Dialogs(wdDialogInsertPicture)
                
            dlg.Show
            Selection.SetRange Selection.Start - 1, Selection.End
            
            Set inl = Selection.InlineShapes(1)
            inl.Select
    
            Set shp = inl.ConvertToShape
        End If
        
        shp.LockAspectRatio = True
        shp.Width = CentimetersToPoints(breite)
    
    
    

        shp.RelativeHorizontalPosition = wdRelativeHorizontalPositionColumn
        shp.RelativeVerticalPosition = wdRelativeVerticalPositionLine
        shp.Left = wdShapeLeft
        shp.Top = wdShapeTop
        
        shp.LockAnchor = True
        shp.LayoutInCell = False
                
        shp.WrapFormat.AllowOverlap = True
        shp.WrapFormat.DistanceTop = 0
        shp.WrapFormat.DistanceRight = 0
        shp.WrapFormat.DistanceBottom = 0
        shp.WrapFormat.DistanceLeft = 0
        shp.WrapFormat.Type = wdWrapTopBottom
    
    Selection.SetRange Selection.End + 1, Selection.End + 1
End Function

Function bild(breite)
    Dim shp As Shape
    Dim inl As InlineShape
    Dim alt As String

    Dim rng As Range
    Set rng = Selection.Range
    Dim paste As Boolean
    Dim frame As Table
    Dim feld As Range
    Dim rahmen As frame

    inp1 = InputBox("Geben Sie die gew|fffd|nschte Beschriftung ein.", "Eingabe: Bildunterschrift")
    If StrPtr(inp1) = 0 Then
        Exit Function
    End If
    
    If rng.ShapeRange.Count > 0 Or rng.InlineShapes.Count > 0 Then
        If rng.ShapeRange.Count > 0 Then
            Set shp = rng.ShapeRange(1)
        Else
            Set inl = rng.InlineShapes(1)
            Set shp = inl.ConvertToShape
        End If
        
        alt = shp.AlternativeText
        
        If rng.Tables.Count > 0 Then
            shp.Select
            Selection.Copy
            rng.Tables(1).Delete
        Else
            shp.Select
            Selection.Cut
                      
            If alt = "#17.7" Then
                With Selection.Find
                    .Format = True
                    .Style = "#Bildunterschrift Sonderfall"
                    .Forward = True
                    .Execute FindText:="", MatchWildcards:=True
                End With
                Selection.Delete
            End If
        End If
        paste = True
    End If
    
    Selection.Collapse wdCollapseStart
    Selection.SetRange Selection.Start - 1, Selection.Start
    If (Selection.Characters(1).text = Chr(13)) Then
        Selection.SetRange Selection.End, Selection.End
        WordBasic.InsertPara
    Else
        Selection.SetRange Selection.End, Selection.End
        WordBasic.InsertPara
        WordBasic.InsertPara
    End If


    'If breite > 8.65 And breite <= 13.175 Then
    If breite > 8.65 Then
        Set frame = ActiveDocument.Tables.Add(Selection.Range, 2, 1)
        frame.Cell(1, 1).Range.Select
    End If

    Dim dlg As Dialog
    Set dlg = Dialogs(wdDialogInsertPicture)
    
    If breite <= 8.65 Then
        Set frame = ActiveDocument.Tables.Add(Selection.Range, 1, 2)
        frame.Cell(1, 1).Range.Select
    End If
    
    
    If paste Then
        Selection.paste
        Set shp = Selection.ShapeRange(1)
    Else
        If dlg.Show = 0 Then
            Exit Function
        End If
        
        Selection.SetRange Selection.Start - 1, Selection.End
    
        Set inl = Selection.InlineShapes(1)
        inl.Select
    
        Set shp = inl.ConvertToShape
    End If
    
    
    shp.LockAspectRatio = True
    shp.Width = CentimetersToPoints(breite)
    
    shp.RelativeHorizontalPosition = wdRelativeHorizontalPositionColumn
    shp.RelativeVerticalPosition = wdRelativeVerticalPositionLine
    shp.Left = wdShapeLeft
    shp.Top = wdShapeTop
    shp.LockAnchor = True
    shp.LayoutInCell = False
            
    shp.WrapFormat.AllowOverlap = True
    shp.WrapFormat.DistanceTop = 0
    shp.WrapFormat.DistanceRight = 0
    shp.WrapFormat.DistanceBottom = 0
    shp.WrapFormat.DistanceLeft = 0
    shp.WrapFormat.Type = wdWrapNone
    
    
    
    If breite <= 8.65 Then
        shp.WrapFormat.Type = wdWrapNone
        
        frame.Rows(1).HeightRule = wdRowHeightAtLeast
        frame.Rows(1).Height = shp.Height
        frame.Columns(1).Width = CentimetersToPoints(breite + 0.4)
        frame.Columns(2).Width = CentimetersToPoints(4.125)
        
        frame.Cell(1, 2).VerticalAlignment = wdCellAlignVerticalTop
        frame.Cell(1, 2).Range.Select
        
        Selection.text = "Abb. " + Chr(9) + Chr(9) + inp1
        Set feld = Selection.Range
        feld.SetRange (Selection.Range.Start + 5), (Selection.Range.Start + 5)
        Selection.Fields.Add feld, wdFieldSequence, "Abbildung", True
        
        Selection.Style = "#Bildunterschrift"
        
        frame.Select
        Selection.Collapse wdCollapseEnd
        Selection.InsertBefore Chr(13)
        Selection.MoveDown Unit:=wdLine, Count:=1
    End If
    
    'If breite > 8.65 And breite <= 13.175 Then
    If breite > 8.65 Then
        shp.WrapFormat.Type = wdWrapNone
        
        frame.Rows(1).HeightRule = wdRowHeightAtLeast
        frame.Rows(1).Height = shp.Height
        frame.Columns(1).Width = CentimetersToPoints(breite + 0.4)
        
        frame.Cell(2, 1).VerticalAlignment = wdCellAlignVerticalTop
        frame.Cell(2, 1).Range.Select
        
        Selection.text = "Abb. " + Chr(9) + Chr(9) + inp1
        Set feld = Selection.Range
        feld.SetRange (Selection.Range.Start + 5), (Selection.Range.Start + 5)
        Selection.Fields.Add feld, wdFieldSequence, "Abbildung", True
        
        Selection.Style = "#Bildunterschrift"
        
        frame.Select
        
        Set rahmen = ActiveDocument.Frames.Add(Selection.Range)
        With rahmen
            .TextWrap = False
            .WidthRule = wdFrameExact
            .Width = CentimetersToPoints(breite)
            .HeightRule = wdFrameAuto
            '.HorizontalPosition = wdFrameInside
            .HorizontalPosition = wdFrameLeft
            .RelativeHorizontalPosition = wdRelativeHorizontalPositionMargin
            .VerticalPosition = CentimetersToPoints(0)
            .RelativeVerticalPosition = wdRelativeVerticalPositionParagraph
            .HorizontalDistanceFromText = CentimetersToPoints(0)
            .VerticalDistanceFromText = CentimetersToPoints(0)
            .LockAnchor = False
            .Shading.BackgroundPatternColor = -603914241
            .Borders.Enable = False
        End With
        
        Selection.Collapse wdCollapseEnd
        Selection.InsertBefore Chr(13)
        Selection.MoveDown Unit:=wdLine, Count:=1
    End If
    
'    If breite > 13.175 Then
'        shp.WrapFormat.Type = wdWrapTopBottom
'        shp.WrapFormat.AllowOverlap = False
'
'
'
'
'        Selection.InsertAfter Chr(13)
'        Selection.Collapse wdCollapseEnd
'
'        Selection.text = "Abb. " + Chr(9)+ Chr(9) + inp1
'        Set feld = Selection.Range
'        feld.SetRange (Selection.Range.Start + 5), (Selection.Range.Start + 5)
'        Selection.Fields.Add feld, wdFieldSequence, "Abbildung", True
'
'        Selection.InsertAfter Chr(13)
'        Selection.Style = "#Bildunterschrift Sonderfall"
'
'        Selection.Collapse wdCollapseEnd
'        Selection.Style = "#Standard"
'    End If
    
    
    shp.AlternativeText = "#" + Trim(Str(breite))
End Function

Sub Bild_einspaltig()
    bild 4.125
End Sub

Sub Bild_zweispaltig()
    bild 8.65
End Sub

Sub Bild_dreispaltig()
    bild 13.175
End Sub

Sub Bild_vierspaltig()
    bild 17.7
End Sub

Sub oBild_einspaltig()
    bild_ohne 4.125
End Sub

Sub oBild_zweispaltig()
    bild_ohne 8.65
End Sub

Sub oBild_dreispaltig()
    bild_ohne 13.175
End Sub

Sub oBild_vierspaltig()
    bild_ohne 17.7
End Sub

Sub Tabelle()
    Dim rng As Range
    Set rng = Selection.Range
    Dim feld As Range
    Dim rahmen As frame
    breite = 17.7
    
    inp1 = InputBox("Geben Sie die gew|fffd|nschte Beschriftung ein.", "Eingabe: Tabellenunterschrift")
    If StrPtr(inp1) = 0 Then
        Exit Sub
    End If
    
    Selection.Collapse wdCollapseStart
    Selection.SetRange Selection.Start - 1, Selection.Start
    If (Selection.Characters(1).text = Chr(13)) Then
        Selection.SetRange Selection.End, Selection.End
        WordBasic.InsertPara
    Else
        Selection.SetRange Selection.End, Selection.End
        WordBasic.InsertPara
        WordBasic.InsertPara
    End If
    
    Selection.text = "Tab. " + Chr(9) + Chr(9) + inp1
    Set feld = Selection.Range
    feld.SetRange (Selection.Range.Start + 5), (Selection.Range.Start + 5)
    Selection.Fields.Add feld, wdFieldSequence, "Tabelle", True
        
        'ActiveDocument.TablesOfContents.MarkEntry Range:=Selection.Range, Entry:=inp1, EntryAutoText:="", TableID:="Z", Level:=1
        'Selection.SetRange Selection.Start, Selection.End + 1
    Selection.InsertAfter Chr(13)
    Selection.Style = "#Tabellenunterschrift"
        
    Selection.Collapse wdCollapseStart
    'Selection.Style = "#Standard"
    Selection.Style = "#Tabellenunterschrift"
    
    'Dim frame As Table
    'Set frame = ActiveDocument.Tables.Add(Selection.Range, 1, 2)
    'frame.Rows(1).HeightRule = wdRowHeightAuto
    'frame.Columns(1).Width = CentimetersToPoints(breite + 0.4)
    'frame.Cell(1, 1).RightPadding = CentimetersToPoints(0.4)
    'frame.Columns(2).Width = CentimetersToPoints(4.125)
    
    'frame.Cell(1, 2).VerticalAlignment = wdCellAlignVerticalTop
    'frame.Cell(1, 2).Range.Select
    'Selection.text = "Tabellenunterschrift"
    'Selection.Style = "#Bildunterschrift"
    
    'frame.Cell(1, 1).Range.Select

    Dim dlg As Dialog
    Set dlg = Dialogs(wdDialogTableInsertTable)
    dlg.Show
    
    Dim tbl As Table
    Set tbl = Selection.Tables(1)
    tbl.Select
    Selection.Style = "#Tabelle Body"
    tbl.Rows(1).Select
    Selection.Style = "#Tabelle Kopf"
    tbl.PreferredWidthType = wdPreferredWidthPoints
    tbl.PreferredWidth = CentimetersToPoints(breite)
    
    tbl.Select
    Selection.MoveDown Unit:=wdLine, Count:=1, Extend:=wdExtend
        Set rahmen = ActiveDocument.Frames.Add(Selection.Range)
        With rahmen
            .TextWrap = False
            .WidthRule = wdFrameExact
            .Width = CentimetersToPoints(breite)
            .HeightRule = wdFrameAuto
            .HorizontalPosition = wdFrameLeft
            .RelativeHorizontalPosition = wdRelativeHorizontalPositionMargin
            .VerticalPosition = CentimetersToPoints(0)
            .RelativeVerticalPosition = wdRelativeVerticalPositionParagraph
            .HorizontalDistanceFromText = CentimetersToPoints(0)
            .VerticalDistanceFromText = CentimetersToPoints(0)
            .LockAnchor = False
            .Shading.BackgroundPatternColor = -603914241
            .Borders.Enable = False
        End With
        
    tbl.Style = "#Tabelle"
    'Selection.Style = "#Tabellenunterschrift"
    Selection.Collapse wdCollapseEnd
    'Selection.Style = "#Standard"
    'Selection.TypeParagraph
    Selection.InsertBefore Chr(13)
    Selection.MoveDown Unit:=wdLine, Count:=1
End Sub
Attribute VB_Name = "Logoauswahl"
Attribute VB_Base = "0{D9D24018-E893-4117-A154-268BE01FDDDE}{C164CB02-12C9-491B-8CA1-CB19C20B25F8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Private Sub Cancel_Click()
    Me.Cancel.Enabled = True
    Me.Hide
End Sub

Private Sub CheckBox1_Click()

End Sub

Private Sub Senden_Click()
    If Me.Logos.ListIndex < 0 Then
        MsgBox ("Bitte erst ein Logo aus der Liste w|fffd|hlen")
    Else
        If Me.Logos.Column(2, Me.Logos.ListIndex) = "" Then
            MsgBox ("Bitte erst ein Logo aus der Liste w|fffd|hlen")
        Else
            Me.Cancel.Enabled = False
            Me.Hide
        End If
    End If
End Sub

Private Sub titel_Click()

End Sub

Attribute VB_Name = "Nummerierung"
Sub Nummerierung_Ein()
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(1).NumberFormat = "%1"
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(2).NumberFormat = "%1.%2"
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(3).NumberFormat = "%1.%2.%3"
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(4).NumberFormat = "%1.%2.%3.%4"
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(5).NumberFormat = "%1.%2.%3.%4.%5"
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(6).NumberFormat = "%1.%2.%3.%4.%5.%6"
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(7).NumberFormat = "%1.%2.%3.%4.%5.%6.%7"
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(8).NumberFormat = "%1.%2.%3.%4.%5.%6.%7.%8"
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(9).NumberFormat = "%1.%2.%3.%4.%5.%6.%7.%8.%9"
End Sub

Sub Nummerierung_Aus()
    'ActiveDocument.Styles(wdStyleHeading1).ParagraphFormat.FirstLineIndent = CentimetersToPoints(-3.05)
    'MsgBox ActiveDocument.Styles("H2").LinkToListTemplate
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(1).NumberFormat = ""
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(2).NumberFormat = ""
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(3).NumberFormat = ""
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(4).NumberFormat = ""
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(5).NumberFormat = ""
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(6).NumberFormat = ""
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(7).NumberFormat = ""
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(8).NumberFormat = ""
    ActiveDocument.Styles(wdStyleHeading1).ListTemplate.ListLevels(9).NumberFormat = ""
End Sub


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim WithEvents appWord As Application
Attribute appWord.VB_VarHelpID = -1

Public checkLNG As Boolean

Private Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias _
  "URLDownloadToFileA" (ByVal pCaller As Long, ByVal szURL As String, ByVal _
    szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
    
Function Stream_BinaryToString(Binary, CharSet)
  Const adTypeText = 2
  Const adTypeBinary = 1
  
  'Create Stream object
  Dim BinaryStream 'As New Stream
  Set BinaryStream = CreateObject("ADODB.Stream")
  
  'Specify stream type - we want To save text/string data.
  BinaryStream.Type = adTypeBinary
  
  'Open the stream And write text/string data To the object
  BinaryStream.Open
  BinaryStream.Write Binary
  
  
  'Change stream type To binary
  BinaryStream.Position = 0
  BinaryStream.Type = adTypeText
  
  'Specify charset For the source text (unicode) data.
  If Len(CharSet) > 0 Then
    BinaryStream.CharSet = CharSet
  Else
    BinaryStream.CharSet = "us-ascii"
  End If
  
  'Open the stream And get binary data from the object
  Stream_BinaryToString = BinaryStream.ReadText
End Function

Function Logo_einstellen(pfad, eps, onlyT)
'    Selection.SetRange 0, 0
    ActiveDocument.ActiveWindow.View.SeekView = wdSeekCurrentPageHeader
        For Each sect In ActiveDocument.Sections
            For Each head In sect.Headers
                For Each shp In head.Shapes
'                For Each shp In ActiveDocument.Shapes
                    If (shp.AlternativeText = "Logo_ausgetauscht" Or shp.AlternativeText = "Logo") Then
                        shp.Delete
                    End If
                Next shp
            Next head
        Next sect
        
                            Dim datei As String
                            arr = Split(pfad, "/")
                            datei = arr(UBound(arr))
                            
                            If (datei = "false") Then
                                ActiveDocument.ActiveWindow.View.SeekView = wdSeekMainDocument
                                Exit Function
                            End If
                            
                            URL = pfad
                            Randomize
                            temp = CreateObject("WScript.Shell").ExpandEnvironmentStrings("%Temp%")
                            pfad = temp & "\" & Int(Math.Rnd() * 10000) & datei
                            ret = URLDownloadToFile(0, URL, pfad, 0, 0)
        
        'For Each sect In ActiveDocument.Sections
        Set sect = ActiveDocument.Sections(1)
            For Each head In sect.Headers
                If (sect.Index > 0) Then
                        Dim neu
                        Set neu = head.Shapes.AddPicture(pfad, False, True)
                        
                        neu.LockAspectRatio = msoTrue
                        neu.Width = CentimetersToPoints(6)
                        'neu.ScaleHeight neu.ScaleWidth, True
                        neu.LayoutInCell = False
                        neu.RelativeHorizontalPosition = wdRelativeHorizontalPositionPage
                        neu.RelativeVerticalPosition = wdRelativeVerticalPositionPage
                        neu.Left = CentimetersToPoints(12.95)
                        neu.Top = CentimetersToPoints(1.65)

                        neu.AlternativeText = "Logo_ausgetauscht"
                        ActiveDocument.Variables("logodone").Delete
                        ActiveDocument.Variables.Add "logodone", "wahr"
                End If
            Next head
            
        If (onlyT = False) Then
            Set sect = ActiveDocument.Sections(2)
                For Each head In sect.Headers
                    If (sect.Index > 0) Then
                            Set neu = head.Shapes.AddPicture(pfad, False, True)
                            
                            neu.LockAspectRatio = msoTrue
                            neu.Width = CentimetersToPoints(6)
                            'neu.ScaleHeight neu.ScaleWidth, True
                            neu.LayoutInCell = False
                            neu.RelativeHorizontalPosition = wdRelativeHorizontalPositionPage
                            neu.RelativeVerticalPosition = wdRelativeVerticalPositionPage
                            neu.Left = CentimetersToPoints(12.95)
                            neu.Top = CentimetersToPoints(1.65)
    
                            neu.AlternativeText = "Logo_ausgetauscht"
                            ActiveDocument.Variables("logodone").Delete
                            ActiveDocument.Variables.Add "logodone", "wahr"
                    End If
                Next head
        End If
        'Next sect
        ActiveDocument.ActiveWindow.View.SeekView = wdSeekMainDocument
End Function

Function logoliste(form, base)
    Dim xls, wbook
    Set xls = CreateObject("Excel.Application")
    Set wbook = xls.Workbooks.Open(base + "Logoliste_word2003.xls")
    i = 1
    form.Logos.Clear
        form.Logos.AddItem "*"
        form.Logos.Column(1, 0) = "Kein Logo"
        form.Logos.Column(2, 0) = "false"
        form.Logos.Column(3, 0) = "false"
    While (wbook.Sheets(1).Range("A" & i) <> "")
        form.Logos.AddItem (wbook.Sheets(1).Range("A" & i))
        form.Logos.Column(0, i) = wbook.Sheets(1).Range("D" & i)
        form.Logos.Column(1, i) = wbook.Sheets(1).Range("A" & i)
        form.Logos.Column(2, i) = wbook.Sheets(1).Range("B" & i)
        form.Logos.Column(3, i) = wbook.Sheets(1).Range("C" & i)
        i = i + 1
    Wend
    xls.Quit
End Function

Sub reset()
ActiveDocument.Variables("logodone").Delete
End Sub

Sub Init(Optional auto As Boolean = False)
    CustomizationContext = ActiveDocument
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyBackSingleQuote, wdKeyControl), _
         KeyCategory:=wdKeyCategoryCommand, Command:="FileTemplates"
         
    ActiveDocument.ActiveWindow.View.FieldShading = wdFieldShadingWhenSelected
    ActiveDocument.ActiveWindow.View.ShowFieldCodes = False
    ActiveDocument.ActiveWindow.View.Zoom = 100
        
    Options.AutoFormatAsYouTypeReplaceQuotes = True
    Options.AutoFormatReplaceQuotes = True
    Options.PictureWrapType = wdWrapMergeInline
    Options.TabIndentKey = True
    
    If ActiveDocument.AttachedTemplate = ActiveDocument.Name Then
        'Vorlage wird bearbeitet
        Application.DefaultSaveFormat = "MacroEnabledDocument"
    Else
        'Dokument wird bearbeitet
        Application.DefaultSaveFormat = ""
    End If
    
    checkLNG = Application.CheckLanguage
    Application.CheckLanguage = False
    Selection.LanguageID = wdGerman
    
    'ActiveDocument.Paragraphs.TabStops.ClearAll
    ActiveDocument.DefaultTabStop = CentimetersToPoints(1.25)
    
    ActiveDocument.LockTheme = True
    ActiveDocument.LockQuickStyleSet = True

    ActiveDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeDark1) = RGB(0, 0, 0)
    ActiveDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeLight1) = RGB(255, 255, 255)
    ActiveDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeDark2) = RGB(23, 156, 125)
    ActiveDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeLight2) = RGB(168, 175, 175)
    ActiveDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeAccent1) = RGB(235, 106, 10)
    ActiveDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeAccent2) = RGB(0, 110, 146)
    ActiveDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeAccent3) = RGB(37, 186, 226)
    ActiveDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeAccent4) = RGB(177, 200, 0)
    ActiveDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeAccent5) = RGB(254, 239, 214)
    ActiveDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeAccent6) = RGB(225, 227, 227)
    ActiveDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeHyperlink) = RGB(37, 186, 226)
    ActiveDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeFollowedHyperlink) = RGB(0, 110, 146)
        
    Application.CaptionLabels.Add "Abbildung"
    Application.CaptionLabels.Add "Tabelle"

    
    Dim base As String
    Dim run As Boolean
    Dim novar As Boolean
    If VBA.Interaction.Environ$("UserName") = "115" Then
        base = "http://key-design-share.com/FHG_Erscheinungsbild/01_Grundelemente/1_1_Logos/"
    Else
        base = "http://info-archiv.fraunhofer.de/cd-2009/Fraunhofer_Erscheinungsbild/01_Grundelemente/1_1_Logos/"
    End If
    
    novar = True
    run = True
    For Each myVar In ActiveDocument.Variables
        If (myVar.Name = "logodone") Then
            If (myVar.Value = "wahr") Then
                run = False
            End If
            novar = False
        End If
    Next myVar
    If (novar) Then
        ActiveDocument.Variables.Add "logodone", "falsch"
    End If

    If (Not auto) Then
        Dim myFrm As Logoauswahl
        Set myFrm = New Logoauswahl
        
        Call logoliste(myFrm, base)
        
        myFrm.Show
        onlyT = True
        If myFrm.Cancel.Enabled = False Then
            ' Eingabe
Logo_einstellen (base + myFrm.Logos.Column(2, myFrm.Logos.ListIndex)), False, onlyT
        Else
            ' keine Eingabe
        End If
        
        Unload myFrm
        Set myFrm = Nothing
   End If
   ActiveDocument.ActiveWindow.View.SeekView = wdSeekMainDocument
End Sub

Sub Logo()
    Call Init(False)
End Sub

Sub AutoOpen()
    Call Init(True)
End Sub

Sub AutoNew()
    Call Init(True)
End Sub

Sub AutoClose()
    Application.CheckLanguage = checkLNG
End Sub



Sub Document_New()
    Set appWord = Application
    
    '## schrift |fffd|berpr|fffd|fen
    Dim strFontName As String

    strFontName = "Frutiger LT Com 45 Light"
        If IsFontInstalled(strFontName) Then
            
        Else
            MsgBox strFontName & " ist  n i c h t  installiert! Das Dokument wird geschlossen. Bitte Schrift installieren!"
            
            Documents.Close
            Exit Sub
        End If

    Dim strFontName2 As String

    strFontName2 = "Frutiger LT Com 55 Roman"
        If IsFontInstalled(strFontName2) Then
            
        Else
            MsgBox strFontName2 & " ist  n i c h t  installiert! Das Dokument wird geschlossen. Bitte Schrift installieren!"
            
            Documents.Close
            Exit Sub
        End If
End Sub

Sub document_open()
    Set appWord = Application
End Sub

Private Sub appWord_DocumentBeforeSave(ByVal Doc As Document, SaveAsUI As Boolean, Cancel As Boolean)
    If (SaveAsUI) Then
        Cancel = True
        
        Set fd = Dialogs(wdDialogFileSaveAs)
        With fd
            .Format = wdFormatXMLDocument
            If .Show Then
                If (.Format = wdFormatXMLDocument) Then
                    ActiveDocument.SaveAs2 FileName:=.Name, _
                        FileFormat:=wdFormatXMLDocument, _
                        AddToRecentFiles:=True, _
                        SaveFormsData:=False, _
                        SaveAsAOCELetter:=False, _
                        CompatibilityMode:=14
                ElseIf (.Format = wdFormatXMLDocumentMacroEnabled) Then
                    ActiveDocument.SaveAs2 FileName:=.Name, _
                        FileFormat:=wdFormatXMLDocumentMacroEnabled, _
                        AddToRecentFiles:=True, _
                        SaveFormsData:=False, _
                        SaveAsAOCELetter:=False, _
                        CompatibilityMode:=14
                Else
                    ActiveDocument.SaveAs2 FileName:=.Name, FileFormat:=.Format
                End If
            End If
        End With
        Set fd = Nothing
        
        'Application.OnTime Now, "DocumentAfterSave"
    End If
End Sub

Sub DocumentAfterSave()
End Sub


' InQuest injected base64 decoded content
' +-jw
' jZ M
' bzWR
' z{Li

INQUEST-PP=macro
