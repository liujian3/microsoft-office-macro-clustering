Attribute VB_Name = "Main"
Option Explicit

Private Const PSP_L|fffd|nge As Integer = 15
Private Const Sachk_L|fffd|nge As Integer = 8
Private Const KSt_L|fffd|nge As Integer = 6
Private Const Deb_L|fffd|nge As Integer = 8
Private Const Max_Tage As Integer = 3600 '21.11.2016 -> Wert auf 10 Jahre gesetzt

Public Sub daten_|fffd|bertragen()
    Dim i As Integer
    With ActiveDocument
        Select Case FormField_Name
            Case "txtS1Feld5"
                If .FormFields("txtS1Feld5").Result <> "" And Len(.FormFields("txtS1Feld5").Result) <> PSP_L|fffd|nge Then
                    MsgBox "Das eingegebene PSP Element hat nicht die erforderliche L|fffd|nge von " & PSP_L|fffd|nge & " Zeichen.", vbOKOnly + vbInformation, "Eingabepr|fffd|fung"
                    .FormFields("txtS1Feld5").Result = "-"
                    For i = 1 To 3
                        .FormFields("txtS" & i & "Feld31").Result = ""
                    Next i
                    .FormFields("txtS1Feld31").Enabled = False
                Else
' Einschr|fffd|nkung auf bestimmte Projektarten deaktivieren, d.h. Feld Zahlungsziel generell eingabebereit
' |fffd|nderungswunsch von Stefanie Wirtz, 25.10.2018, MP471554
'                    Select Case Mid(.FormFields("txtS1Feld5").Result, 4, 2)
'                        Case 63, 78, 98, 99:
'                            .FormFields("txtS1Feld31").Enabled = True
'                        Case Else:
'                            For i = 1 To 3
'                                .FormFields("txtS" & i & "Feld31").Result = ""
'                            Next i
'                            .FormFields("txtS1Feld31").Enabled = False
'                    End Select
                End If
            Case "txtS1Feld6"
                If .FormFields("txtS1Feld6").Result <> "" And Len(.FormFields("txtS1Feld6").Result) <> Sachk_L|fffd|nge Then
                    MsgBox "Das eingegebene Sachkonto hat nicht die erforderliche L|fffd|nge von " & Sachk_L|fffd|nge & " Zeichen.", vbOKOnly + vbInformation, "Eingabepr|fffd|fung"
                    .FormFields("txtS1Feld6").Result = "-"
                End If
            Case "txtS1Feld7"
                If .FormFields("txtS1Feld7").Result <> "" And Len(.FormFields("txtS1Feld7").Result) <> KSt_L|fffd|nge Then
                    MsgBox "Die eingegebene abw. Kostenstelle hat nicht die erforderliche L|fffd|nge von " & KSt_L|fffd|nge & " Zeichen.", vbOKOnly + vbInformation, "Eingabepr|fffd|fung"
                    .FormFields("txtS1Feld7").Result = "-"
                End If
            Case "txtS1Feld11"
                If .FormFields("txtS1Feld11").Result <> "" And Len(.FormFields("txtS1Feld11").Result) <> Deb_L|fffd|nge Then
                    MsgBox "Der eingegebene Debitor hat nicht die erforderliche L|fffd|nge von " & Deb_L|fffd|nge & " Zeichen.", vbOKOnly + vbInformation, "Eingabepr|fffd|fung"
                    .FormFields("txtS1Feld11").Result = "-"
                End If
        Case "txtS1Feld14", "txtS1Feld32"
                If .FormFields("txtS1Feld14").Result <> "" Then
                    Dim dblBetrag As Double
                    Dim strThousand As String
                    Dim strDecimal As String
                    Dim strErgebnis As String
                    strThousand = Application.International(wdThousandsSeparator)
                    strDecimal = Application.International(wdDecimalSeparator)
                    
                    On Error Resume Next
                    dblBetrag = CDbl(Replace(.FormFields("txtS1Feld14").Result, strThousand, ""))
                    
                    If Err.Number = 0 Then
                        Dim intPos As Integer, intLen As Integer
                        intPos = InStr(1, CStr(dblBetrag), strDecimal, vbTextCompare)
                        intLen = Len(CStr(dblBetrag))
                        
                        Select Case intPos
                            Case 0:
                                strErgebnis = vbNullString
                                strErgebnis = ZahlInWorten.FctZahl_In_Worten(dblBetrag) & " und " & "00/100 " & functions.ISO_to_W|fffd|hrung(.FormFields("txtS1Feld32").Result)
                            Case Else:
                                strErgebnis = vbNullString
                                If intLen - intPos = 1 Then
                                    strErgebnis = ZahlInWorten.FctZahl_In_Worten(dblBetrag) & " und " & Mid(CStr(dblBetrag), intPos + 1, intLen - intPos) & "0/100 " & functions.ISO_to_W|fffd|hrung(.FormFields("txtS1Feld32").Result)
                                Else
                                    strErgebnis = ZahlInWorten.FctZahl_In_Worten(dblBetrag) & " und " & Mid(CStr(dblBetrag), intPos + 1, intLen - intPos) & "/100 " & functions.ISO_to_W|fffd|hrung(.FormFields("txtS1Feld32").Result)
                                End If
                        End Select
                        
                        .FormFields("txtS1Feld15").Result = strErgebnis
                        #If Mac Then
                            .FormFields("txtS1Feld14").Result = dblBetrag
                        #Else
                            .FormFields("txtS1Feld14").Result = Format(dblBetrag, "#,##0.00")
                        #End If
                    Else
                        For i = 1 To 3
                            .FormFields("txtS" & i & "Feld14").Result = ""
                            .FormFields("txtS" & i & "Feld15").Result = ""
                        Next i
                        MsgBox "Bitte geben Sie einen g|fffd|ltigen Betrag ein." & vbCrLf & _
                            "Format: '3333" & Application.International(wdDecimalSeparator) & "33'", vbInformation, "Eingabepr|fffd|fung"
                    End If
                    On Error GoTo 0
                Else
                    For i = 1 To 3
                        .FormFields("txtS" & i & "Feld15").Result = ""
                        If i > 1 Then
                            .FormFields("txtS" & i & "Feld32").Result = ""
                        End If
                    Next i
                End If
                .Bookmarks("txtS1Feld14").Range.Font.Bold = True
            Case "txtS1Feld31", "txtS1Feld10"
                If .FormFields("txtS1Feld10").Result = "" Then
                    .FormFields("txtS1Feld10").Result = Date
                End If
                On Error Resume Next
                If DateDiff("d", CDate(.FormFields("txtS1Feld10").Result), CDate(.FormFields("txtS1Feld31").Result), vbUseSystemDayOfWeek, vbUseSystem) > Max_Tage Then
                    If Err.Number = 0 Then
                        MsgBox "Das Zahlungsziel liegt mehr als " & Max_Tage & " Tage nach dem Rechnungsdatum, bitte korrigieren Sie Ihre Eingabe.", vbOKOnly + vbInformation, "Eingabepr|fffd|fung"
                        For i = 1 To 3
                            .FormFields("txtS" & i & "Feld31").Result = ""
                        Next i
                    End If
                Else
                    .FormFields("txtS1Feld31").Range.Font.Bold = True
                End If
                On Error GoTo 0
        End Select
        
        Dim j As Integer
        j = Mid(FormField_Name, 10, 2)
        Select Case j
            Case 14, 32:
                For i = 2 To 3
                    .FormFields("txtS" & i & "Feld" & 14).Result = .FormFields("txtS1Feld" & 14).Result
                    .FormFields("txtS" & i & "Feld" & 15).Result = .FormFields("txtS1Feld" & 15).Result
                    .FormFields("txtS" & i & "Feld" & 32).Result = .FormFields("txtS1Feld" & 32).Result
                Next i
            Case 30:
                .FormFields("txtS3Feld" & j).Result = .FormFields("txtS1Feld" & j).Result
            Case Else:
                .FormFields("txtS2Feld" & j).Result = .FormFields("txtS1Feld" & j).Result
                .FormFields("txtS3Feld" & j).Result = .FormFields("txtS1Feld" & j).Result
        End Select
    End With
End Sub

Public Sub art_|fffd|ndern()
    Dim i As Integer
    With ActiveDocument
        Select Case .FormFields("dropS1Feld1").DropDown.Value
            Case 1
                .FormFields("dropS1Feld2").DropDown.Value = 1
                .FormFields("dropS2Feld2").DropDown.Value = 1
                .FormFields("dropS3Feld1").DropDown.Value = 1
                .FormFields("dropS3Feld2").DropDown.Value = 1
                For i = 1 To 9
                    .FormFields("txtAbteilung" & i).Result = "7.5"
                    If i < 4 Then
                        .FormFields("txtBezeichnung" & i).Result = "debitorische Rechnung"
                    End If
                Next i
            Case 2
                .FormFields("dropS1Feld2").DropDown.Value = 2
                .FormFields("dropS2Feld2").DropDown.Value = 2
                .FormFields("dropS3Feld1").DropDown.Value = 2
                .FormFields("dropS3Feld2").DropDown.Value = 2
                For i = 1 To 9
                    .FormFields("txtAbteilung" & i).Result = "7.2"
                    If i < 4 Then
                        .FormFields("txtBezeichnung" & i).Result = "kreditorische Gutschrift"
                    End If
                Next i
        End Select
    End With
End Sub

Private Function FormField_Name() As String
    FormField_Name = Selection.Bookmarks(1).Name
End Function


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True

Attribute VB_Name = "ZahlInWorten"
Option Explicit

Public Function FctZahl_In_Worten(ByVal Zahl As Double)
  'wandelt Zahlen im Bereich 0-999.999.999 in Worte um
  'von Karl Donaubauer

  Dim z As String, w As String
  Dim r As Integer, i As Integer

  z = Int(Zahl)
  If z = 0 Then FctZahl_In_Worten = "null": Exit Function

  For i = 6 To 0 Step -3
    If Len(z) > i Then
      r = Right(Int(z / (10 ^ i)), 3)
      If r > 99 Then w = FctZif(1, Left(r, 1), w) & "hundert": r = Right(r, 2)
      If r > 19 Then w = FctZif(3, Right(r, 1), w): w = FctZif(4, Left(r, 1), w)
      If i = 0 And Right(z, 3) Like "00*" And r > 0 Then w = w & "und"
      If r < 10 Then w = FctZif(1, r, w)
      If r > 9 And r < 20 Then w = FctZif(2, Right(r, 1), w)
      If i = 6 And Len(z) = 7 And r = 1 Then w = "einemillion"
      If i = 6 And Right(Int(z / 10 ^ i), 3) > 1 Then w = w & "millionen"
      If i = 3 And Right(Int(z / 10 ^ i), 3) > 0 Then w = w & "tausend"
      If i = 0 And r = 1 Then w = w & "s"
    End If
  Next

  FctZahl_In_Worten = w
End Function
'----------------------
Function FctZif(Par As Byte, r As Integer, w As String)

  w = w & Choose(r, "ein", "zwei", "drei", "vier", "f|fffd|nf", "sech", "sieb", "acht", "neun")

  Select Case Par
      Case 1, 3
          If r = 6 Then w = w & "s"
          If r = 7 Then w = w & "en"
          If Par = 3 And r > 0 Then w = w & "und"
      Case 2
          w = w & "zehn"
          If r = 1 Then w = Left(w, Len(w) - 7) & "elf"
          If r = 2 Then w = Left(w, Len(w) - 8) & "zw|fffd|lf"
      Case 4
          If r = 2 Then w = Left(w, Len(w) - 4) & "zwan"
          w = w & "zig"
          If r = 3 Then w = Left(w, Len(w) - 3) & "|fffd|ig"
  End Select

  FctZif = w
End Function
Attribute VB_Name = "functions"
Option Explicit

Public Function ISO_to_W|fffd|hrung(strISO As String) As String
    Select Case strISO
        Case "EUR"
            ISO_to_W|fffd|hrung = "Euro"
        Case "USD"
            ISO_to_W|fffd|hrung = "US-Dollar"
        Case "GBP"
            ISO_to_W|fffd|hrung = "Pfund"
        Case "CHF"
            ISO_to_W|fffd|hrung = "Schweizer Franken"
    End Select
End Function


INQUEST-PP=macro
