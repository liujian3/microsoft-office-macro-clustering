Attribute VB_Name = "Export_Activation_Preference"
Attribute VB_Base = "0{9EF92CB3-BC61-4030-B67A-F9524DD0BFB8}{4F5A6067-95BF-476D-B504-E4FB5DD276AA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub BrowseButton_Click()
    Dim fd As FileDialog
    Dim SelectedItem As Variant
    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
    fd.Show
    If fd.SelectedItems.Count = 1 Then TextBox9.Text = fd.SelectedItems.Item(1)
End Sub

Private Sub Cancel_Click()
    Okay.Value = False
    Hide
End Sub

Private Sub OK_Click()
    If Right(TextBox9.Text, 1) <> "\" Then TextBox9.Text = TextBox9.Text & "\"
    If FileStatus(TextBox9.Text) And vbDirectory Then
        Okay.Value = True
        Hide
    Else
        x = MsgBox(TextBox9.Text & " is an invalid file path.", vbExclamation, "Role Calculator Error")
    End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        Cancel_Click
    End If
End Sub
Attribute VB_Name = "Export_DAGs"
Attribute VB_Base = "0{753927DF-396E-4EDE-8CDC-B46C9B96EBF5}{4745EB6F-06B2-425A-8455-3D085D293BE5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub BrowseButton_Click()
    Dim fd As FileDialog
    Dim SelectedItem As Variant
    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
    fd.Show
    If fd.SelectedItems.Count = 1 Then TextBox9.Text = fd.SelectedItems.Item(1)
End Sub

Private Sub OK_Click()
    If Right(TextBox9.Text, 1) <> "\" Then TextBox9.Text = TextBox9.Text & "\"
    If Right(VolumeRootFolderPath.Text, 1) = "\" Then VolumeRootFolderPath.Text = Mid(VolumeRootFolderPath.Text, 1, Len(VolumeRootFolderPath.Text) - 1)
    If Right(DatabaseRootFolderPath.Text, 1) = "\" Then DatabaseRootFolderPath.Text = Mid(DatabaseRootFolderPath.Text, 1, Len(DatabaseRootFolderPath.Text) - 1)
    If FileStatus(TextBox9.Text) And vbDirectory Then
        Okay.Value = True
        Hide
    Else
        x = MsgBox(TextBox9.Text & " is an invalid file path.", vbExclamation, "Role Calculator Error")
    End If
End Sub

Private Sub Cancel_Click()
    Okay.Value = False
    Hide
End Sub

Private Sub UserForm_Activate()
    If NumSites = 1 Then
        'Export_DAGs.Width = 336
        SecondaryFrame.Enabled = False
        SecondaryFrame.Visible = False
    Else
        'Export_DAGs.Width = 675
        SecondaryFrame.Enabled = True
        SecondaryFrame.Visible = True
    End If
    If DBLogIsolation Then
        Frame1.Enabled = False
        VolumeRootFolderPath.Enabled = False
        DatabaseRootFolderPath.Enabled = False
        'Frame1.Visible = False
        Frame2.Enabled = False
        'Frame2.Visible = False
    Else
        Frame1.Enabled = True
        VolumeRootFolderPath.Enabled = True
        DatabaseRootFolderPath.Enabled = True
        'Frame1.Visible = True
        Frame2.Enabled = True
        'Frame2.Visible = True
    End If
End Sub

Attribute VB_Name = "Export_DB_Build"
Attribute VB_Base = "0{25A80FE6-6E6E-4EF4-BFD2-B885C6A7C56B}{8F36ADF8-3A4A-46B1-92A4-0566C3CBC08A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub BrowseButton_Click()
    Dim fd As FileDialog
    Dim SelectedItem As Variant
    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
    fd.Show
    If fd.SelectedItems.Count = 1 Then TextBox9.Text = fd.SelectedItems.Item(1)
End Sub

Private Sub Cancel_Click()
    Okay.Value = False
    Hide
End Sub

Private Sub Frame3_Click()

End Sub

Private Sub OK_Click()
    If Right(TextBox9.Text, 1) <> "\" Then TextBox9.Text = TextBox9.Text & "\"
    If Right(VolRootFolder.Text, 1) = "\" Then VolRootFolder.Text = Mid(VolRootFolder.Text, 1, Len(VolRootFolder.Text) - 1)
    If Right(DBPath.Text, 1) = "\" Then DBPath.Text = Mid(DBPath.Text, 1, Len(DBPath.Text) - 1)
    If FileStatus(TextBox9.Text) And vbDirectory Then
        Okay.Value = True
        Hide
    Else
        x = MsgBox(TextBox9.Text & " is an invalid file path.", vbExclamation, "Role Calculator Error")
    End If
End Sub

Private Sub UserForm_Activate()
    If NumSites = 1 Then
        GCServer2.Enabled = False
    Else
        GCServer2.Enabled = True
    End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        Cancel_Click
    End If
End Sub

Attribute VB_Name = "Export_Mount_Points"
Attribute VB_Base = "0{F2BF645C-CD1B-4BE3-8FBF-19AE561D04D0}{9A31BAA7-DD76-4C97-AA84-EE4D180DFB96}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub BrowseButton_Click()
    Dim fd As FileDialog
    Dim SelectedItem As Variant
    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
    fd.Show
    If fd.SelectedItems.Count = 1 Then TextBox9.Text = fd.SelectedItems.Item(1)
End Sub

Private Sub Cancel_Click()
    Okay.Value = False
    Hide
End Sub

Private Sub OK_Click()
    If Right(TextBox9.Text, 1) <> "\" Then TextBox9.Text = TextBox9.Text & "\"
    If Right(VolumesRoot.Text, 1) = "\" Then VolumesRoot.Text = Mid(VolumesRoot.Text, 1, Len(VolumesRoot.Text) - 1)
    If Right(DatabasesRoot.Text, 1) = "\" Then DatabasesRoot.Text = Mid(DatabasesRoot.Text, 1, Len(DatabasesRoot.Text) - 1)
    If FileStatus(TextBox9.Text) And vbDirectory Then
        Okay.Value = True
        Hide
    Else
        x = MsgBox(TextBox9.Text & " is an invalid file path.", vbExclamation, "Role Calculator Error")
    End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        Cancel_Click
    End If
End Sub
Attribute VB_Name = "Export_Scripts"
Attribute VB_Base = "0{020D54CE-3186-43DE-B1FD-DABD22D99CDC}{E4AADED1-24F7-4F07-B8BB-8BDFE7AFDAE2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub BrowseButton_Click()
    Dim fd As FileDialog
    Dim SelectedItem As Variant
    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
    fd.Show
    If fd.SelectedItems.Count = 1 Then TextBox9.Text = fd.SelectedItems.Item(1)
End Sub

Private Sub Cancel_Click()
    Okay.Value = False
    Hide
End Sub

Private Sub OK_Click()
    If Right(TextBox9.Text, 1) <> "\" Then TextBox9.Text = TextBox9.Text & "\"
    If FileStatus(TextBox9.Text) And vbDirectory Then
        Okay.Value = True
        Hide
    Else
        x = MsgBox(TextBox9.Text & " is an invalid file path.", vbExclamation, "Role Calculator Error")
    End If
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        Cancel_Click
    End If
End Sub

Attribute VB_Name = "Module1"
'Copyright Microsoft Corporation (c) 2013
'Author: David Mosier, Neil Johnson

Option Explicit
'Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)

Type FileType               'Type defintion for structure to manage files
    Name As String
    Number As Integer
End Type

Public Const DefaultDBNameRoot = "db"
Public Const MaxLong = 2147483647       'The maximum positive value for a varible declsred Long
Public Const StartCol = 5          'The number of the leftmost column of the database area of the database layout diagram
Public Const StartRow = 21         'The number of the top row of the database area of the database layout diagram
Public Const HeaderRow = StartRow - 1      'The number of the top row of the header of the database layout diagram
Public Const MaxServers = 16       'The maximum number of servers permitted in a DAG
Public Const MaxMounted = 100      'Maximum number of databases mounted on a server
Public Const MaxDAGs = 1           'Maximum number of DAGs
Public Const MaxSites = 2          'Maximun number of DAG sites supported
Public Const MaxDatabases = MaxServers * MaxMounted 'Maximum number of databases instances permitted in a DAG
Public Const MaxCopies = 16         'Maximum DB copies where Permut(Servers,Copies) <= MaxDatabases  {Permut(6 Servers,6 Copies) = 720}
Public Const MaxColors = 16        'Maximum number of colors for cells in the database diagram
Public Const MaxFailureDomains = MaxServers \ 2 + (2 * MaxSites) + 2 'Max failure domains assuming min of 2 servers per failure domain
'Public Const strSheetName = "Distribution" 'The name of the spreadsheet with the database diagram and DAG input parameters
Public Const strDistributionSheet = "Distribution" 'The name of the spreadsheet with the database diagram and DAG input parameters
Public Const strInputSheet = "Input" 'The name of the spreadsheet with the input parameters for StorageCacl
Public Const strRoleRequirementsSheet = "Role Requirements" 'The name of the spreadsheet with the role requirements calculations
Public Const strVolumeRequirementsSheet = "Volume Requirements" 'The name of the spreadsheet with the volume requirements calculations
Public Const DBCopyFile = "MailboxDatabaseCopies.csv" 'Name of file for export of secondary copies
Public Const DBCreateFile = "MailboxDatabases.csv"    'Name of file for export of primary databases
Public Const DAGsFile = "DAGInfo.csv"                 'Name of file for export of DAG info
Public Const MountPointsFile = "Servers.csv"          'Name of file for export of diskpart script input
Public Const DAGStringFail = "DAG Quorum Failed"
Public Const DAGStringOK = "DAG Quorum OK"
Public Const ptrFailureDomains = 1      'The position in arrFDControl for the first column of a failure domain
Public Const NumMembers = 2    'The position in arrFDControl for the number of servers in a failure domain
Public Const Summary = 0       'The position in arrFDControl for the total number of servers in a site assigned to a failure domain
Public Const FDBase = 4     'The position in arrFDControl for the server number of the first server in the failure domain
Public Const SiteName = 1           'The position in arrSiteInfo for the site name
Public Const FDCount = 4           'The position in arrSiteInfo for the number of failure domains in a site
Public Const CopyCount = 3           'The position in arrSiteInfo and arrFDControl for the number of DB copies in a site
Public Const IndexArrFD = 5         'The position in arrSiteInfo for the pointer to the "Final" section of arrFailureDomain for the site
Public Const cntServers = 1            'The position in FDDefPri/FDDefSec of the number of servers in the failure domain
Public Const cntCopies = 2            'The position in FDDefPri/FDDefSec of the number of db copies in the failure domain
Public Const Template = MaxServers + 2
Public Const All = 0
Public Const CodeVersion = "2.0"
Public Const DiskpartDataVer = "2.0"
Public Const CreateMBDatabasesDataVer = "2.1"
Public Const CreateMBDatabaseCopiesDataVer = "2.1"
Public Const CreateDAGDataVer = "2.3"

'Seed string for calulating k-permutations
Const ServerList = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

Public Const ErrorCol = StartCol - 2        'Column for error status window
Public Const ErrorRow = StartRow - 13        'Row for error status window
Public Const StartInputRow = 10    'First row of input values
Public Const InputOffset = 5       'Increment between input rows for each site
Public Const InputCol = 2          'Column for input values
Public Const SitesRow = 1          'The row for input of number of sites
Public Const PlannedCopyRow = 2    'The row for input of the number of databases planned for the DAG
Public Const strConfigSheet = "Tables"  'The name of the spreadsheet with configuration information such as cell colors
Public Const DblQuote As Boolean = False 'Controls if double quotes are used around paths in export routines
Public Const USEnglish = 1033      'Language ID for United States English
Public Const USA = 1               'Country code for US
Public Const DebugHigh = 5
Public Const DebugMedium = 3
Public Const DebugLow = 1


Dim tmpStorage(MaxSites, MaxServers, MaxDatabases) As Integer 'Array used as working storage during database layout process
Public arrFailureDomains(MaxDatabases, MaxCopies, MaxServers + 2) 'Array to hold output of arrDomain for each failure domain
Public arrFDControl(MaxSites, MaxFailureDomains, 4) 'Identifies the first column and number of columns in arrFailureDomains for each failure domain
Public arrSiteInfo(MaxSites, 5)
Dim FillColor(MaxColors)    'Array to hold cell colors for each database copy level
Dim FontColor(MaxColors)    'Array used to hold font colors for each database copy level
Dim errStatus As Integer    'Variable to hold process status between routines
Dim errText As String       'Holds description of errStatus
Public NumSites As Integer     'Number of physical sites in DAG
Public NumFailureDomains(MaxSites) As Integer
Public NumDataBases As Integer 'Global variable to hold the number of named databases planned in DAG
Public NumServers(MaxSites) As Integer   'Number of servers in DAG
Public NumCopies(MaxSites) As Integer    'Number of copies for each DB in the DAG
Public TTLServers As Integer    'Sum of all servers in all sites
Dim DiagramStart(MaxSites) As String    'An array of the letter of the leftmost column of the database area of the database layout diagram for each site
Dim DiagramEnd(MaxSites) As String      'An array of the letter of the rightmost column of the database area of the database layout diagram for each site
Dim Database_Diagram(MaxSites) As String    'An array of the upper-left and lower-right cells of the database diagram for each site
Dim Full_Diagram As String          'The combined area of all site's diagram
Dim SRActivationBlocked As Boolean 'Switch to turn on feature to test multi-site quorum logic
Dim UpdateColors As Boolean             'Switch to determine if colors should be read in from Configuration spreadsheet
Dim ServerIsUp(MaxServers) As Boolean   'Array to keep track of which servers are marked as failed
Dim DagIsUp(MaxDAGs) As Boolean         'Array to track DAG status
Dim SecondSiteActive As Boolean 'Tracks if second site has been activated or if it is still blocked
Dim LastSiteBuilt As Integer        'Tattletale to compare sites displayed in table with sites defined in Input spreadsheet
Public InputValuesChanged As Boolean    'Used to catch when input values change
Public FileShareWitness As Boolean         'Tracks if a fileshare witness is required
Public ExportPath As String             'Tracks the directory path for export files
Public MountPointPath As String         'Allows mountpoint path to default to same path as database
Dim ValCheck As Boolean                 'Links with Storage Calulator error check variable
Public LangID As Integer                'Tracks the User ID Language ID for the application
Public bolInConfig As Boolean          'Tracks when Config is running
Public bolInGetInfo As Boolean          'Tracks when GetInfo is running
Public bolDoneOnce As Boolean           'Tracks if Distribution matirx has been built at least one time since workbook open
Public SiteResilience As String         'Variable to hold site resileince setting from Ross Calculator
'Public numLagDBCopies As Integer        'The number of PDC lagged copies per DAG (captured from Input tab)
'Public numLaggedCopiesSDC As Integer    'The number of SDC lagged copies per DAG (captured from Input tab)
Public NumLagCopies(MaxSites) As Integer    'The number of lagged copies per DAG (captured from Input tab)
Public FDTable(MaxSites) As Variant
Public SafeWorksheetChange As Boolean
Public SRModel As String                'Stores the DAG model from the Input sheet
Public SRTable As Variant               'Table of DAG models from Variables sheet
Public AASD As String                   'Stores string for Active/Active (Single DAG) model
Public AAMD As String                   'Stores string for Active/Active (Multi DAG) model
Public AP As String                   'Stores string for Active/Passive model
Public NumDBPerVol As Integer           'Captures number of databases per volume from spreadsheet
Public MultipleDBVolume As Boolean      'Captures is multiple databases are stored on a LUN
Public tblServerNames(MaxServers) As String        'Table of server names from Input spreadsheet
Public tblDAGBaseNames(MaxSites) As String          'Table of base name of databases in a DAG
Public DistributedLag(MaxSites) As Boolean   'Captures whether or not lag databases are distributed with normal databases
Public DirtyBit As Boolean
Public VolumesRootFolder As String
Public DatabasesRootFolder As String
Public DBLogIsolation As Boolean
Public ReplayLagTime As String
Public TruncationLagTime As String

Public Const MaxInt = 32768
Public StackPointer As Integer
Public TraceFile As FileType
Public EnableTrace As Boolean
Public Stack(MaxInt) As Integer
Public ProcNames(200) As String
Public FSWLocation As Integer
Public DiskGroup As Integer                    'Counter to label disk groups
Public WANisUp(MaxSites) As Boolean
Public TimerFile As FileType
Public DebugLevel As Integer




Public Sub Run_Spread()
    '
    'Control process to initiate and control creation of database diagram
    '
    If DebugLevel > DebugMedium Then Call RunTimer
    Dim Site As Integer                         'For loop variable used to index through the sites
    Dim Servers As Integer                      'Number of servers used to call Spread routine
    Dim x, y As Integer
    Dim fd As Integer
    Dim DB As Integer
    Dim ServerOffset As Integer
    Dim CPOffset As Integer
    Dim CP As Integer
    Dim arrServerOffset(MaxServers) As Integer
    Dim OffsetIncrement As Integer
    If DebugLevel > DebugLow Then Call PushStack(1, "null")
    
    ThisWorkbook.Sheets("Distribution").Range("A1").Select
    If ThisWorkbook.Sheets("Input").Range("HAOption").Value <> "Yes" Then
        Wait (0.5)
        Application.ScreenUpdating = False
        Application.Calculation = xlCalculationManual
        'Erase contents of diagram area to prepare for new diagram
        Call ClearArea
        Application.ScreenUpdating = True
        Application.Calculation = xlCalculationAutomatic
        ThisWorkbook.Sheets(strDistributionSheet).Cells(ErrorRow, ErrorCol).FormulaR1C1 = "Enable High Availability Deployment option to use this tab..."
    Else
        ThisWorkbook.Sheets(strDistributionSheet).Cells(ErrorRow, ErrorCol).FormulaR1C1 = "Calculating, please wait|fffd|"
        'Allows user to modify copy colors for database diagram
        UpdateColors = True
        'Initialize status before calling a routine
        errStatus = 0
        errText = ""
        'Erase contents of diagram area to prepare for new diagram
        'Call ClearArea
        ' Verify values on Input sheet are valid
        ValCheck = False
        On Error Resume Next
        ValCheck = Range("'Role Requirements'!ValidationCheck").Value Or Range("'Role Requirements'!FailureDomainCheck").Value
        If Err.Number = 13 Then
            ValCheck = True
            Err.Clear
        End If
        On Error GoTo 0
        If ValCheck = False Then
            'Stop screen updates during layout..
            'Sleep (500)
            Wait (0.5)
            ' If diskgroup = 0 then assume all inputs are invalid and run Input Change routine to reinitialize
            If DiskGroup = 0 Then
                SafeWorksheetChange = True
                Call Sheet2.Start
            End If
            ' Turn off screen updates and calulations to speed up the distribution process
            Application.ScreenUpdating = False
            Application.Calculation = xlCalculationManual
            'Erase contents of diagram area to prepare for new diagram
            Call ClearArea
            If DirtyBit Then ThisWorkbook.Sheets("Input").Cells(1, 1).Formula = "=StorageCalc(Now)"
            SafeWorksheetChange = True
            Call Config
            'Erase and set Conditional Formating for diagram area cells
            Call SetFormat
            If errStatus <> 0 Then
                ThisWorkbook.Sheets(strDistributionSheet).Cells(ErrorRow, ErrorCol).Value = errText
                Application.ScreenUpdating = True
                Application.Calculation = xlCalculationAutomatic
            Else
                ThisWorkbook.Sheets(strDistributionSheet).Cells(ErrorRow, ErrorCol).Value = "Calculating, Status OK|fffd|"
                'Initialize storage array to allow multiple runs of spreadsheet
                Erase tmpStorage
                Erase arrFailureDomains
                WANisUp(1) = True
                WANisUp(2) = True
                'Setup left column, headers, formulas, and format for diagram
                Call Build_Table(NumServers, NumDataBases)
                For Site = 1 To NumSites
                    If NumFailureDomains(Site) = 1 Then
                        ' Run Spread routine once fpr the site and store it in the summary area for the site
                        Call Spread2(NumServers(Site), NumCopies(Site), arrSiteInfo(Site, IndexArrFD))
                    Else
                        For fd = 1 To NumFailureDomains(Site)
                            ' Run Spread routine once for each failure domain and store each run in a working area
                            Call Spread2(FDTable(Site)(fd, cntServers), FDTable(Site)(fd, cntCopies), arrFDControl(Site, fd, ptrFailureDomains))
                        Next fd
                        'Populate the array for server offsets
                        'arrServerOffset(1) = 0
                        ServerOffset = 0
                        'For x = 2 To NumFailureDomains(Site)
                        '    ServerOffset = ServerOffset + arrFDControl(Site, x, FDBase)
                        '    arrServerOffset(x) = ServerOffset
                        'Next x
                        CPOffset = 0
                        ' Merge the working areas for each failure domain into a single area for the site
                        For fd = 1 To NumFailureDomains(Site)
                            ServerOffset = arrFDControl(Site, fd, FDBase)
                            CPOffset = CPOffset + arrFDControl(Site, fd - 1, CopyCount)
                            OffsetIncrement = fd
                            For DB = 1 To NumDataBases


                                If DB Mod NumServers(Site) = 0 Then
                                    OffsetIncrement = OffsetIncrement + 1
                                    If OffsetIncrement > NumFailureDomains(Site) Then OffsetIncrement = 1
                                    ServerOffset = arrFDControl(Site, OffsetIncrement, FDBase)
                                End If


                                For CP = 1 To arrFDControl(Site, fd, CopyCount)
                                    arrFailureDomains(DB, CP + CPOffset, arrSiteInfo(Site, IndexArrFD)) = ServerOffset + arrFailureDomains(DB, CP, arrFDControl(Site, fd, ptrFailureDomains))
                                Next CP
                            Next DB
                        Next fd
                    End If
                Next Site
                For Site = 1 To NumSites
                    Servers = NumServers(Site)
                    'Display data stored in array by Spread subroutine
                    Call Show_Spread2(Site)
                Next Site
                
                'Call FinalDistribution(Site)
                If SiteResilience = "Yes" And SRModel = AASD Then
                    Call ActiveActive
    '                Call FinalDistribution(All)
                End If
                For Site = 1 To NumSites
                    If DistributedLag(Site) Then Call MarkLagged(Site)
                Next Site
                ThisWorkbook.Sheets(strDistributionSheet).Cells(ErrorRow, ErrorCol).FormulaR1C1 = "Status OK.  Number of databases per volume is " & ThisWorkbook.Sheets("Volume Requirements").Range("NumDBPerVol").Value
                Application.ScreenUpdating = True
                Application.Calculation = xlCalculationAutomatic
                Application.CalculateFull
            End If
        Else
            errStatus = 8
            errText = "Values on Input spreadsheet are not valid: "
            On Error Resume Next
            If Range("'Role Requirements'!DAGMemberValCheck").Value Then errText = errText & "There are too many servers in the DAG; "
            If Err.Number = 13 Then
                Err.Clear
            End If
            If Range("'Role Requirements'!DBCopyValCheck").Value Then errText = errText & "The HA copy distribution is invalid; "
            If Err.Number = 13 Then
                Err.Clear
            End If
            If Range("'Role Requirements'!MailboxSizeCheck").Value Then errText = errText & "Mailbox size limit not set; "
            If Err.Number = 13 Then
                Err.Clear
            End If
            If Range("'Role Requirements'!FailureDomainCheck").Value Then errText = errText & "Failure Domain information is not valid."
            If Err.Number = 13 Then
                Err.Clear
            End If
            If Range("'Role Requirements'!calcMaxDBSizeCheck").Value Then errText = errText & "The maximum database size is zero."
            If Err.Number = 13 Then
                Err.Clear
            End If
            On Error GoTo 0
            ThisWorkbook.Sheets(strDistributionSheet).Cells(ErrorRow, ErrorCol).Value = errText
        End If
    End If
    If DebugLevel > DebugLow Then Call PopStack
    If DebugLevel > DebugLow Then Call RunTimer
End Sub

Sub Spread2(Servers, Copies, FailureDomain)
    Dim x As Integer                                'For loop variable
    Dim y As Integer                                'For loop variable
    Dim z As Integer                                'For loop variable
    Dim BlockIndex As Long                       'What server is the starting point for the repeating block (previous block) within the current block
    Dim ServerIndex As Long                      'Index variable into the array holding the database-copy-distribution to track which server we are working on
    Dim DBIndex As Long                          'Index variable into the array holding the database-copy-distribution to track which database we are working on
    Dim CopyIndex As Long                          'For loop variable to index which database we are working on
    Dim CopyLevel As Integer                        'Foor loop variable to track which copy number this pass is working on
    Dim DAGCycle As Long                          'Tracks the actual size of the DB pattern that must be calculated for current db copy
    Dim OldDAGCycle As Long                         'Tracks the actual size of the DB pattern that must be calculated for previous db copy
    Dim OkayPattern As Boolean
    Dim OkayIndex As Boolean
    Dim BackCheck As Long
    Dim PreviousItem As String
    Dim NextItem As String
    If DebugLevel > DebugMedium Then Call PushStack(2, Str(Servers) & ";" & Str(Copies) & ";" & Str(FailureDomain))

    If errStatus = 0 Then                           'If no parameter errors detected then proceed
        'need a check for servers = 1
        'need a check for copies = 1
        'need a check for copies > servers
        If Servers > 1 Then BackCheck = Application.WorksheetFunction.Permut(Servers, 2)
        ' Loop through the first copy level in stairstep format
        ServerIndex = 1
        For DBIndex = 1 To NumDataBases
            arrFailureDomains(DBIndex, 1, FailureDomain) = ServerIndex
            ServerIndex = ServerIndex + 1
            If ServerIndex > Servers Then ServerIndex = 1
        Next DBIndex
        DAGCycle = Servers
        For CopyIndex = 2 To Copies
            ServerIndex = CopyIndex
            BlockIndex = CopyIndex
            OldDAGCycle = DAGCycle
            DAGCycle = Application.WorksheetFunction.Permut(Servers, CopyIndex)
            For DBIndex = 1 To NumDataBases
                arrFailureDomains(DBIndex, CopyIndex, FailureDomain) = ServerIndex
                If (DBIndex Mod DAGCycle) = 0 Then
                    BlockIndex = CopyIndex
                    ServerIndex = BlockIndex
                ElseIf (DBIndex Mod OldDAGCycle) = 0 Then
                    BlockIndex = BlockIndex + 1
                    ServerIndex = BlockIndex
                ElseIf (DBIndex Mod Servers) = 0 Then
                    ServerIndex = ServerIndex + 2
                    If ServerIndex = Servers + 1 Then ServerIndex = 1
                    If ServerIndex = Servers + 2 Then ServerIndex = 2
                    Do
                        OkayIndex = True
                        For x = 1 To CopyIndex - 1
                            If ServerIndex = arrFailureDomains(DBIndex + 1, x, FailureDomain) Then OkayIndex = False
                        Next x
                        If OkayIndex = False Then
                            ServerIndex = ServerIndex + 1
                            If ServerIndex > Servers Then ServerIndex = 1
                        End If
                    Loop Until OkayIndex = True
                    If (CopyIndex > 3) And ((DBIndex Mod BackCheck) = 0) Then
                        Do
                            OkayPattern = True
                            NextItem = ""
                            For z = 1 To CopyIndex - 1
                                NextItem = NextItem & CStr(arrFailureDomains(DBIndex + 1, z, FailureDomain))
                            Next z
                            NextItem = NextItem & CStr(ServerIndex)
                            For y = ((DBIndex \ DAGCycle) * DAGCycle) + 1 To DBIndex - 1 Step BackCheck
                                PreviousItem = ""
                                For z = 1 To CopyIndex
                                    PreviousItem = PreviousItem & CStr(arrFailureDomains(y, z, FailureDomain))
                                Next z
                                If NextItem = PreviousItem Then OkayPattern = False
                            Next y
                            If OkayPattern = False Then
                                ServerIndex = ServerIndex + 1
                                If ServerIndex > Servers Then ServerIndex = 1
                                Do
                                    OkayIndex = True
                                    For x = 1 To CopyIndex - 1
                                        If ServerIndex = arrFailureDomains(DBIndex + 1, x, FailureDomain) Then OkayIndex = False
                                    Next x
                                    If OkayIndex = False Then
                                        ServerIndex = ServerIndex + 1
                                        If ServerIndex > Servers Then ServerIndex = 1
                                    End If
                                Loop Until OkayIndex = True
                            End If
                        Loop Until OkayPattern = True
                    End If
                Else
                    ServerIndex = ServerIndex + 1
                    If ServerIndex > Servers Then ServerIndex = 1
                End If
            Next DBIndex
        Next CopyIndex
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub Show_Spread2(Site)
    '
    ''Routine to transfer DB layout from working array to spreadsheet for display
    '
    Dim ServerIndex As Integer                          'For loop variable to track the server number
    Dim DBIndex As Integer                            'For loop variable to track the database number
    Dim CPIndex As Integer
    Dim CopyBase As Integer
    Dim CPOffset As Integer
    Dim Target As Integer
    If DebugLevel > DebugMedium Then Call PushStack(3, Str(Site))
    
    ThisWorkbook.Worksheets(strDistributionSheet).Activate
    CopyBase = NumCopies(Site - 1)
    If NumFailureDomains(Site) = 1 Then
        CPOffset = 0
    Else
        CPOffset = arrFDControl(Site, Summary, CopyCount)
    End If
    For DBIndex = 1 To NumDataBases
        For CPIndex = 1 To NumCopies(Site)
            Target = arrFailureDomains(DBIndex, CPIndex + CPOffset, arrSiteInfo(Site, IndexArrFD))
            If Target <> 0 Then
                Cells(StartRow + DBIndex - 1, StartCol + Target - 1 + ((Site - 1) * (MaxServers + 1))).Value = CPIndex + CopyBase
            End If
        Next CPIndex
    Next DBIndex
    Call DAGStatus(1)
    bolDoneOnce = True
    If DebugLevel > DebugMedium Then Call PopStack
End Sub
Sub ActiveActive()
    Dim SwapSpace(MaxCopies) As Integer
    Dim Swap As Integer
    Dim TTLCopies As Integer
    Dim x As Integer
    Dim Col As Integer
    Dim DBIndex As Integer                            'For loop variable to track the database number
    Dim DAGSize As Integer
    Dim MiddleValue As Integer
    Dim Flip As Integer
    If DebugLevel > DebugMedium Then Call PushStack(4, "null")

    'If Active/Active (Single DAG), SRModel = AASD, then reverse the pattern on the last half of each diskgroup
    DAGSize = ThisWorkbook.Sheets("Role Requirements").Range("calcNumAMBXServersDC1").Value + ThisWorkbook.Sheets("Role Requirements").Range("calcNumAMBXServersDC2").Value
    TTLCopies = NumCopies(1)
    For x = 2 To NumSites
        TTLCopies = TTLCopies + NumCopies(x)
    Next x
    If NumCopies(1) <> NumCopies(2) Then
        MiddleValue = TTLCopies \ NumSites + 1
        Flip = TTLCopies \ NumSites + 1
    Else
        MiddleValue = 0
        Flip = TTLCopies \ NumSites
    End If
    For x = 1 + DAGSize \ 2 To NumDataBases Step DAGSize
        For DBIndex = x To x - 1 + DAGSize \ 2
            For Col = StartCol To NumSites * (MaxServers + 1)
                Swap = Cells(StartRow + DBIndex - 1, Col).Value
                If Swap <> 0 And Swap <> MiddleValue Then
                    If Swap > Flip Then
                        Swap = Swap - Flip
                    Else
                        Swap = Swap + Flip
                    End If
                    Cells(StartRow + DBIndex - 1, Col).Value = Swap
                End If
            Next Col
            Swap = 1
        Next DBIndex
    Next x
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub FinalDistribution(Site As Integer)                     'Distributes activation settings for all copies over all servers
                                            ' - assumes non-zero cells in spreadsheet are copy locations
                                            ' - calls spread2 to create a symetric template for activation order
    Dim SwapSpace(MaxCopies) As Integer
    Dim Swap As Integer
    Dim TTLCopies As Integer
    Dim x As Integer
    Dim Col As Integer
    Dim TTLServers As Integer
    Dim DBIndex As Integer                            'For loop variable to track the database number
    Dim StartingColumn As Integer
    Dim EndingColumn As Integer
    If DebugLevel > DebugMedium Then Call PushStack(5, Str(Site))
    
    If Site = All Then
        TTLCopies = NumCopies(1)
        For x = 2 To NumSites
            TTLCopies = TTLCopies + NumCopies(x)
        Next x
        TTLServers = NumServers(1)
        For x = 2 To NumSites
            TTLServers = TTLServers + NumServers(x)
        Next x
        StartingColumn = StartCol
        EndingColumn = StartCol + (NumSites * (MaxServers + 1)) - 1
    Else
        TTLCopies = NumCopies(Site)
        TTLServers = NumServers(Site)
        StartingColumn = StartCol + ((Site - 1) * (MaxServers + 1))
        EndingColumn = StartCol + (Site * (MaxServers + 1)) - 1
    End If
    Call Spread2(TTLCopies, TTLCopies, Template)
    For DBIndex = 1 To NumDataBases
        x = 1
        For Col = StartingColumn To EndingColumn
            If Cells(StartRow + DBIndex - 1, Col).Value <> 0 Then
                Cells(StartRow + DBIndex - 1, Col).Value = arrFailureDomains(DBIndex, x, Template)
                x = x + 1
            End If
        Next Col
    Next DBIndex
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub MarkLagged(Site)                'Marks lagged copies on spreadsheet with a comment to make the stand out
    Dim TTLCopies As Integer
    Dim x As Integer
    Dim Col As Integer
    Dim TTLServers As Integer
    Dim DBIndex As Integer                            'For loop variable to track the database number
    Dim StartingColumn As Integer
    Dim EndingColumn As Integer
    Dim LastNormalCopy As Integer
    Dim SiteOne As Boolean
    Dim StartingColumnList(MaxSites) As Integer
    Dim EndingColumnList(MaxSites) As Integer
    Dim LastNormalCopyList(MaxSites) As Integer
    Dim BreakPoint As Integer
    Dim DAGSize As Integer
    If DebugLevel > DebugMedium Then Call PushStack(6, Str(Site))

    DAGSize = ThisWorkbook.Sheets("Role Requirements").Range("calcNumAMBXServersDC1").Value + ThisWorkbook.Sheets("Role Requirements").Range("calcNumAMBXServersDC2").Value
    BreakPoint = DAGSize \ 2
    If Site = 1 Then
        SiteOne = True
    Else
        SiteOne = False
    End If
    For x = 1 To NumSites
        StartingColumnList(x) = StartCol + ((x - 1) * (MaxServers + 1))
        EndingColumnList(x) = StartCol + (x * (MaxServers + 1)) - 1
    Next x
    LastNormalCopyList(1) = NumCopies(1) - NumLagCopies(1)
    LastNormalCopyList(2) = NumCopies(1) + NumCopies(2) - NumLagCopies(2)
    If Site = All Then
        TTLCopies = NumCopies(1)
        For x = 2 To NumSites
            TTLCopies = TTLCopies + NumCopies(x)
        Next x
        TTLServers = NumServers(1)
        For x = 2 To NumSites
            TTLServers = TTLServers + NumServers(x)
        Next x
        StartingColumn = StartCol
        EndingColumn = StartCol + (NumSites * (MaxServers + 1)) - 1
    Else
        TTLCopies = NumCopies(Site)
        TTLServers = NumServers(Site)
        StartingColumn = StartingColumnList(Site)
        EndingColumn = EndingColumnList(Site)
        LastNormalCopy = LastNormalCopyList(Site)
    End If
    For DBIndex = 1 To NumDataBases
        For Col = StartingColumn To EndingColumn
            If Cells(StartRow + DBIndex - 1, Col).Value > LastNormalCopy Then
                Range(Cells(StartRow + DBIndex - 1, Col), Cells(StartRow + DBIndex - 1, Col)).Select
                Selection.Cells.AddComment ("Lag")
                Selection.Cells.Comment.Shape.Width = 20
                Selection.Cells.Comment.Shape.Height = 15
            End If
        Next Col
'        If SiteResilience = "Yes" And SRModel = AASD And thisworkbook.sheets("Input").Range("NumDBperVolOverride").Value = "Yes" Then
        If SiteResilience = "Yes" And SRModel = AASD Then
            If DBIndex Mod BreakPoint = 0 Then 'Flip back and forth between sites because activation pref flips for the second half of each diskgroup
                If SiteOne Then
                    SiteOne = False
                    x = 2
                Else
                    SiteOne = True
                    x = 1
                End If
                StartingColumn = StartingColumnList(x)
                EndingColumn = EndingColumnList(x)
                If NumCopies(x) < NumCopies(Site) Then
                    LastNormalCopy = LastNormalCopy - 1
                Else
                    LastNormalCopy = LastNormalCopyList(Site)
                End If
                'LastNormalCopy = LastNormalCopyList(x)
            End If
        End If
    Next DBIndex
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Public Function InValidFD() As Boolean
    If DebugLevel > DebugHigh Then Call PushStack(7, "null")
    
    If ThisWorkbook.Sheets("Input").Range("'Input'!FailureDomainStatusField").Value = ThisWorkbook.Sheets("Variables").Range("'Variables'!varStatusOK_FD").Value Then
        InValidFD = False
    Else
        InValidFD = True
    End If
    
    If DebugLevel > DebugHigh Then Call PopStack
End Function


Function RegExpReplace(strVal As String) As String
    Dim reRegExp As RegExp
    If DebugLevel > DebugMedium Then Call PushStack(8, strVal)
    
    Set reRegExp = New RegExp
    With reRegExp
        .Global = True
        .Pattern = "[^A-Za-z0-9]+"
        RegExpReplace = .Replace(strVal, "")
    End With
    If DebugLevel > DebugMedium Then Call PopStack
End Function

Public Function CheckDAGName(NameString As String) As Boolean
    Dim CaseType As String
    Dim y As Integer
    Dim Okay As Boolean
    Dim RegExpPattern1 As String
    Dim RegExpPattern2 As String
    Dim RegExpPattern3 As String
    Dim RegExpPattern4 As String
    If DebugLevel > DebugMedium Then Call PushStack(9, NameString)
    
    CheckDAGName = False
    RegExpPattern1 = "*."
    RegExpPattern2 = ".*"
    RegExpPattern3 = "[~#%&*\:<>?/|{}()]"
    RegExpPattern4 = "*..*"
    If Len(NameString) >= 1 And Len(NameString) <= 50 Then
        If NameString Like RegExpPattern1 Or NameString Like RegExpPattern2 Or NameString Like RegExpPattern4 Then
            CheckDAGName = False
        Else
            Okay = True
            For y = 1 To Len(NameString)
                If Mid(NameString, y, 1) Like RegExpPattern3 Then Okay = False
            Next y
            If Okay Then CheckDAGName = True
        End If
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Function

Function CheckServerName(ServerName As String) As Boolean
    Dim Status As Boolean
    Dim x As Integer
    Dim Length As Integer
    If DebugLevel > DebugMedium Then Call PushStack(10, ServerName)

    Status = True
    Length = Len(ServerName)
    'Is it between 1 and 16 characters long?
    If Length = 0 Or Length > 16 Then Status = False
    'Does it start with alphanumeric?
    If Not (ServerName Like "[a-z0-9A-Z]*") Then Status = False
    'Does it end with alphanumeric?
    If Not (ServerName Like "*[a-z0-9A-Z]") Then Status = False
    'Does it have any illegal characters?
    For x = 1 To Length
        If InStr(" ~!@#$%^&*()_+={}|[]\:"";',./<>?", Mid(ServerName, x, 1)) Then Status = False
    Next x
    If Not (ServerName Like "[a-z0-9A-Z]*[a-z0-9A-Z]") Then Status = False
    CheckServerName = Status
    If DebugLevel > DebugMedium Then Call PopStack
End Function

Public Sub Config()                                    'Routine to get colors for DB diagram from Configuration spreadsheet and collect run parameters
    'Dim SiteResilience As String                    'Variable to hold site resileince setting from Ross Calculator
    Dim strX As String                              'Input variable to accept unvalidated user input
    'Dim intX As Integer                             'Input variable to hold integer typed input
    Dim x As Integer                                'For loop variable
    Dim SiteOffset As Integer                       'Variable used to shift each site in the diagram
    Dim boolTemp As Boolean
    Dim WorkbookName As String
    Dim WorkbookFullName As String
    Dim LSD As String
    Dim MSD As String
    Dim ptrArray As Variant
    If DebugLevel > DebugMedium Then Call PushStack(11, "null")
    
'x = MsgBox("Distribution - Start Config")
    If bolInConfig Then
      
    Else
        bolInConfig = True
        LangID = AppLangID
        Application.Calculation = xlCalculationManual
        ValCheck = False
        On Error Resume Next
        ValCheck = Range("'Role Requirements'!ValidationCheck").Value
        If Err.Number = 13 Then
            ValCheck = True
            Err.Clear
        End If
        On Error GoTo 0
        If ValCheck = False Then
            errStatus = 0
            errText = ""
            ThisWorkbook.Sheets(strDistributionSheet).Cells(ErrorRow, ErrorCol).Value = errText
            boolTemp = SRActivationBlocked

            'Get Server names
            ptrArray = Range("'Input'!tblServerNames").Value
            tblServerNames(0) = "Invalid"
            For x = 1 To MaxServers
                strX$ = Trim(ptrArray(x, 2))
                If CheckServerName(strX$) Then
                    tblServerNames(x) = strX$
                Else
                    tblServerNames(x) = "Server" & x
                End If
            Next x
            
            'Get database base names
            ptrArray = Range("'Input'!tblDAGBaseNames").Value
            For x = 1 To MaxSites
                strX$ = Trim(ptrArray(x, 2))
                If CheckDAGName(strX$) Then
                    tblDAGBaseNames(x) = strX$
                Else
                    tblDAGBaseNames(x) = "DAG" & x & "DB"
                End If
            Next x
            
            'Get Site Resilience model types from Variables sheet
            SRTable = Range("'Variables'!varSRModel").Value
            AAMD = SRTable(3, 1)
            AASD = SRTable(2, 1)
            AP = SRTable(1, 1)

            'Get DAG model from Input sheet
            SRModel = Range("'Input'!SRModel").Value

            If (Range("'Input'!SRActivationBlocked").Value = "No") Or (SRModel = AASD) Then
                SRActivationBlocked = False
                SecondSiteActive = True
                ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteYes").OLEFormat.Object.Value = True
            Else
                SRActivationBlocked = True
                SecondSiteActive = False
                ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteNo").OLEFormat.Object.Value = True
            End If
            

            'If site activation blocked status changes then recalulate all formulas
            If boolTemp <> SRActivationBlocked Then Application.CalculateFullRebuild
            '
' VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
'            Call GetInfo          'The first call to GetInfo has been moved to the Changed event routine for Input sheet
            While NumSites = 0
                DoEvents
                Call GetInfo
            Wend
            Full_Diagram = ""
            For x = 0 To NumSites - 1
                SiteOffset = x * (MaxServers + 1)
                DiagramStart(x + 1) = GetCol(StartCol + SiteOffset)
                DiagramEnd(x + 1) = GetCol(StartCol + MaxServers + SiteOffset - 1)
                Database_Diagram(x + 1) = DiagramStart(x + 1) & StartRow & ":" & DiagramEnd(x + 1) & MaxDatabases + StartRow
                Full_Diagram = Full_Diagram & Database_Diagram(x + 1) & ","
            Next x
            Full_Diagram = Left(Full_Diagram, Len(Full_Diagram) - 1)
            
            'Pull color for each copy type from configuration spreadsheet and store in a color array
            For x = 1 To MaxColors
                FillColor(x) = ThisWorkbook.Worksheets(strConfigSheet).Cells(Range("'Tables'!ColorFirst").Row + x - 1, 1).Interior.Color
                FontColor(x) = ThisWorkbook.Worksheets(strConfigSheet).Cells(Range("'Tables'!ColorFirst").Row + x - 1, 1).Font.Color
            Next x
        
            'Make default path for export file the location of the spreadsheet
            WorkbookName = ActiveWorkbook.Name
            WorkbookFullName = ActiveWorkbook.FullName
            x = InStr(1, WorkbookFullName, WorkbookName)
            ExportPath = Left(WorkbookFullName, x - 1)

        Else
            errStatus = 8
            errText = "Values on Input spreadsheet are not valid: "
            On Error Resume Next
            If Range("'Role Requirements'!DAGMemberValCheck").Value Then errText = errText & "There are too many servers in the DAG; "
            If Err.Number = 13 Then
                Err.Clear
            End If
            If Range("'Role Requirements'!DBCopyValCheck").Value Then errText = errText & "The HA copy distribution is invalid; "
            If Err.Number = 13 Then
                Err.Clear
            End If
            If Range("'Role Requirements'!MailboxSizeCheck").Value Then errText = errText & "Mailbox size limit not set; "
            If Err.Number = 13 Then
                Err.Clear
            End If
            If Range("'Role Requirements'!FailureDomainCheck").Value Then errText = errText & "Failure Domain information is not valid."
            If Err.Number = 13 Then
                Err.Clear
            End If
            On Error GoTo 0
            ThisWorkbook.Sheets(strDistributionSheet).Cells(ErrorRow, ErrorCol).Value = errText
        End If
        Application.Calculation = xlCalculationAutomatic
        bolInConfig = False
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Public Function StorageCalc(x As Variant) As String
    If DebugLevel > DebugHigh Then Call PushStack(12, "null")
    'If NumServers(1) = 0 Then Call Config
    StorageCalc = " "
    If DebugLevel > DebugHigh Then Call PopStack
End Function

Sub GetInfo()   'Routine to gather data from workbook and populate variables

' !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!****************************************
' The steps in this subroutine must be mirrored in the Change subroutine for the Input tab
' ****************************************!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    'Dim SiteResilience As String                    'Variable to hold site resileince setting from Ross Calculator
    Dim strX As String                              'Input variable to accept unvalidated user input
    Dim intX As Integer                             'Input variable to hold integer typed input
    Dim x As Integer                                'For loop variable
    Dim y As Integer
    Dim WorksheetRange As Variant
    Dim ColumnPointer As Integer
    Dim Index As Integer
    Dim Site As Integer
    Dim fd As Integer
    Dim BaseIndex As Integer
    Dim ptrArray As Variant
    If DebugLevel > DebugMedium Then Call PushStack(13, "null")
    
    'Get input from other sheets in DB Calculator
    '
    If bolInGetInfo Then
    
    Else
        ValCheck = False
        On Error Resume Next
        ValCheck = Range("'Role Requirements'!ValidationCheck").Value
        If Err.Number = 13 Then
            ValCheck = True
            Err.Clear
        End If
        On Error GoTo 0
        If ValCheck = False Then
            errStatus = 0
            errText = ""
            bolInGetInfo = True
            
            strX$ = Range("'Input'!ReplayLagHours").Value
            intX = CInt(strX$)
            x = intX \ 24
            y = intX Mod 24
            ReplayLagTime = Trim(Str(x)) & "." & Trim(Str(y)) & ":00:00"
            strX$ = Range("'Input'!TruncationLagHours").Value
            intX = CInt(strX$)
            x = intX \ 24
            y = intX Mod 24
            TruncationLagTime = Trim(Str(x)) & "." & Trim(Str(y)) & ":00:00"
            strX$ = Range("'Role Requirements'!DBLogIsolation").Value
            If strX$ = "Yes" Then
                DBLogIsolation = True
            Else
                DBLogIsolation = False
            End If
            
            strX$ = Range("'Role Requirements'!RecNumDBs").Value
            intX = CInt(strX$)
            NumDataBases = intX
            '
            If Range("'Input'!SiteResilienceEnabled").Value = "Yes" And Range("'Input'!numDBCopiesSDC").Value > 0 Then
                SiteResilience = "Yes"
            Else
                SiteResilience = "No"
            End If
            If (SiteResilience = "Yes") Then
                NumSites = 2
            Else
                NumSites = 1
            End If
            
            strX$ = ThisWorkbook.Sheets("Volume Requirements").Range("NumDBPerVol").Value
            intX = CInt(strX$)
            NumDBPerVol = intX
            If NumDBPerVol > 1 Then
                MultipleDBVolume = True
            Else
                MultipleDBVolume = False
            End If
            '
            ' Get DR Site Details
            '
            arrSiteInfo(2, SiteName) = "Secondary"
            arrSiteInfo(2, IndexArrFD) = MaxFailureDomains - 1
            If (NumSites > 1) Then
                strX$ = Range("'Role Requirements'!calcNumDBCopyInSDC").Value ' DR
                intX = CInt(strX$)
                NumCopies(2) = intX
                arrSiteInfo(2, CopyCount) = intX
'                If DistributedLag(2) Then arrSiteInfo(2, CopyCount) = arrSiteInfo(2, CopyCount) + NumLagCopies(2)
                strX$ = Range("'Role Requirements'!NumDAGServersSDC").Value ' DR
                intX = CInt(strX$)
                NumServers(2) = intX
                arrSiteInfo(2, NumMembers) = intX
            Else
                NumCopies(2) = 0
                arrSiteInfo(2, CopyCount) = 0
                NumServers(2) = 0
                arrSiteInfo(2, NumMembers) = 0
            End If
        
            '
            ' Get Production Details
            '
            arrSiteInfo(1, SiteName) = "Primary"
            arrSiteInfo(1, IndexArrFD) = MaxFailureDomains
            strX$ = Range("'Role Requirements'!calcNumDBCopyInPDC").Value ' Prod
            intX = CInt(strX$)
            NumCopies(1) = intX
            arrSiteInfo(1, CopyCount) = intX
'            If DistributedLag(1) Then arrSiteInfo(1, CopyCount) = arrSiteInfo(1, CopyCount) + NumLagCopies(1)
            strX$ = Range("'Role Requirements'!NumDAGServersPDC").Value ' Prod
            intX = CInt(strX$)
            NumServers(1) = intX
            arrSiteInfo(1, NumMembers) = intX
            
            'Get total number of servers in DAG and determine if FSW is required
            TTLServers = 0
            For x = 1 To NumSites
                TTLServers = TTLServers + NumServers(x)
            Next x
            If TTLServers \ 2 = TTLServers / 2 Then
                FileShareWitness = True
            Else
                FileShareWitness = False
            End If
            If TTLServers < 1 Or TTLServers > MaxServers Then
                errStatus = 7
                errText = "Total number of servers must be greater than or equal to 1 and less than or equal to " & MaxServers
            End If

            'Get Lag copy information
            strX$ = Range("'Input'!numLagDBCopies").Value
            NumLagCopies(1) = CInt(strX$)
            If NumLagCopies(1) = 0 Then
                NumLagCopies(2) = 0
            Else
                strX$ = Range("'Input'!numLaggedCopiesSDC").Value
                NumLagCopies(2) = CInt(strX$)
                NumLagCopies(1) = NumLagCopies(1) - NumLagCopies(2)
            End If
            
            'If not use dedicated lag server then include lag copies in calulation
            If LCase(Range("'Input'!DedLaggedCopyServer").Value) = "no" Then
                For x = 1 To MaxSites
                    If NumLagCopies(x) <> 0 Then
                        NumCopies(x) = NumCopies(x) + NumLagCopies(x)
                        DistributedLag(x) = True
                    Else
                        DistributedLag(x) = False
                    End If
                Next x
            Else
                For x = 1 To MaxSites
                    DistributedLag(x) = False
                Next x
            End If

            'Capture basic failure domain data from Input worksheet
            NumFailureDomains(1) = Range("'Input'!NumFailureDomainsPri").Value
            NumFailureDomains(2) = Range("'Input'!NumFailureDomainsSec").Value
            NumFailureDomains(Summary) = NumFailureDomains(1) + NumFailureDomains(2)
            arrSiteInfo(1, FDCount) = Range("'Input'!NumFailureDomainsPri").Value
            arrSiteInfo(2, FDCount) = Range("'Input'!NumFailureDomainsSec").Value
            arrSiteInfo(Summary, FDCount) = arrSiteInfo(1, FDCount) + arrSiteInfo(2, FDCount)

            FDTable(1) = Range("'Input'!FDDefPri").Value
            FDTable(2) = Range("'Input'!FDDefSec").Value

            'Populate arrFDControl with information about each failure domain
            ColumnPointer = 1
            Erase arrFDControl
            For Site = 1 To NumSites
                BaseIndex = 0
                arrFDControl(Site, Summary, ptrFailureDomains) = ColumnPointer
                ColumnPointer = ColumnPointer + 1
                For Index = 1 To NumFailureDomains(Site)
                    arrFDControl(Site, Index, CopyCount) = FDTable(Site)(Index, cntCopies)
                    arrFDControl(Site, Index, ptrFailureDomains) = ColumnPointer
                    arrFDControl(Site, Index, NumMembers) = FDTable(Site)(Index, cntServers)
                    arrFDControl(Site, Index, FDBase) = BaseIndex
                    ColumnPointer = ColumnPointer + FDTable(Site)(Index, cntServers)
                    arrFDControl(Site, Summary, CopyCount) = arrFDControl(Site, Summary, CopyCount) + FDTable(Site)(Index, cntCopies)
                    arrFDControl(Site, Summary, NumMembers) = arrFDControl(Site, Summary, NumMembers) + FDTable(Site)(Index, cntServers)
                    If FDTable(Site)(Index, cntServers) = 0 Then arrFDControl(Site, Summary, NumMembers) = MaxServers + 1
                    BaseIndex = BaseIndex + arrFDControl(Site, Index, NumMembers)
                Next Index
            Next Site
            
            bolInGetInfo = False
        Else
            errStatus = 8
            errText = "Values on Input spreadsheet are not valid."
        End If
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub ChangeSiteStatus(StatusCode As String)
    If DebugLevel > DebugMedium Then Call PushStack(14, StatusCode)
    If StatusCode = "0" Then
        SecondSiteActive = False
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteNo").OLEFormat.Object.Value = True
    Else
        SecondSiteActive = True
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteYes").OLEFormat.Object.Value = True
    End If
    Application.CalculateFullRebuild
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub ChangeFSW(StatusCode As String)
    If DebugLevel > DebugMedium Then Call PushStack(45, StatusCode)
    ThisWorkbook.Worksheets(strDistributionSheet).Range(DiagramStart(1) & HeaderRow - 9).Select
    If StatusCode = "P" Then
        FSWLocation = 1
        Call CheckFSW
    End If
    If StatusCode = "S" Then
        FSWLocation = 2
        Call CheckFSW
    End If
    If StatusCode = "T" Then
        FSWLocation = 3
        Call CheckFSW
    End If
    Application.CalculateFullRebuild
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Public Function IsSecSiteActive() As Boolean
    If DebugLevel > DebugHigh Then Call PushStack(15, "null")
    If NumServers(1) > 0 Then               ' If global variables have not been set (i.e. Calculate or Failover buttons not pressed)
        If errStatus = 0 Then
            If SecondSiteActive Then
                IsSecSiteActive = True
            Else
                IsSecSiteActive = False
            End If
        End If
    Else
        IsSecSiteActive = False
    End If
    If DebugLevel > DebugHigh Then Call PopStack
End Function

Sub FailWAN(Link As String)
    Dim x As Integer
    Dim y As Integer
    Dim strButtonName As String
    Dim LiveServers(MaxSites + 1) As Integer
    Dim View(MaxSites) As Integer
    Dim Votes As Integer
    Dim DAGVotes As Integer
    Dim Col As String
    Dim v As Variant
    If DebugLevel > DebugMedium Then Call PushStack(46, Link)

    x = Str(Link)
    strButtonName = Application.Caller
    
    If WANisUp(x) Then
        WANisUp(x) = False
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes(strButtonName).OLEFormat.Object.Caption = "Recover WAN"
        'thisworkbook.worksheets(strDistributionSheet).Shapes(strButtonName).OLEFormat.Object.ShapeRange.Fill.ForeColor.RGB = RGB(255, 0, 0)
        'thisworkbook.worksheets(strDistributionSheet).Shapes(strButtonName).Font.ColorIndex = 3
    Else
        WANisUp(x) = True
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes(strButtonName).OLEFormat.Object.Caption = "Fail WAN"
        'thisworkbook.worksheets(strDistributionSheet).Shapes(strButtonName).OLEFormat.Object.ShapeRange.Fill.BackColor.RGB = RGB(240, 240, 240)
        'thisworkbook.worksheets(strDistributionSheet).Shapes.Range(strButtonName).Fill.ColorIndex = xlAutomatic
    End If

    y = 1
    For x = 1 To TTLServers
        If x = NumServers(1) + 1 Then y = y + 1
        If ServerIsUp(x) Then LiveServers(y) = LiveServers(y) + 1
    Next x

    'Account for FSW
    If FileShareWitness Then
        Votes = TTLServers + 1
        LiveServers(FSWLocation) = LiveServers(FSWLocation) + 1
    Else
        Votes = TTLServers
    End If

    View(1) = LiveServers(1)
    If WANisUp(1) Then View(1) = View(1) + LiveServers(3)
    If WANisUp(1) And WANisUp(2) Then View(1) = View(1) + LiveServers(2)
    View(2) = LiveServers(2)
    If WANisUp(2) Then View(2) = View(2) + LiveServers(3)
    If WANisUp(1) And WANisUp(2) Then View(2) = View(2) + LiveServers(1)

    DAGVotes = Votes
    Votes = (Votes \ 2) + 1

    If NumSites = 1 Then
        Col = "D"
        If View(1) < Votes Then
            ' Mark any UP servers as DOWN
            For x = 1 To NumServers(1)
                If ServerIsUp(x) = True Then
                    Call FailServer(Chr(Asc(Col) + x), "Server " & x)
                End If
            Next x
        End If

    Else
        Col = "D"
        If View(1) < Votes Then
            ' Mark any UP servers as DOWN
            For x = 1 To NumServers(1)
                If ServerIsUp(x) = True Then
                    Call FailServer(Chr(Asc(Col) + x), "Server " & x)
                End If
            Next x
        Else
            ' Mark any DOWN servers as UP
            For x = 1 To NumServers(1)
                If ServerIsUp(x) = False Then
                    Call FailServer(Chr(Asc(Col) + x), "Server " & x)
                End If
            Next x
        End If
    
        Col = "U"
        If View(2) < Votes Then
            ' Mark any UP servers as DOWN
            For x = 1 To NumServers(2)
                If ServerIsUp(x + NumServers(1)) = True Then
                    Call FailServer(Chr(Asc(Col) + x), "Server " & NumServers(1) + x)
                End If
            Next x
        Else
            ' Mark any DOWN servers as UP
            For x = 1 To NumServers(1)
                If ServerIsUp(x + NumServers(1)) = False Then
                    Call FailServer(Chr(Asc(Col) + x), "Server " & NumServers(1) + x)
                End If
            Next x
        End If
    End If

    Call DAGStatus(1)
    If DebugLevel > DebugMedium Then Call PopStack

End Sub

Sub FailServer(Col As String, Optional Name As String = "default")                     'Routine to simulate all DB on a given server as failed
    Dim strNum As String
    Dim intNum As Integer
    Dim strButtonName As String                     'Holds the name of the Fail button pressed
    Dim MSD As Integer                              'Holds most significant digit (letter) of column
    Dim LSD As Integer                              'Holds least significant digit (letter) of column
    Dim ColIndex As Integer                         'Column number of current server
    Dim RowIndex As Integer                         'Row number of current database
    Dim ServerNumber As Integer                     'Holds the server number of the server associated witht the button pressed
    If DebugLevel > DebugMedium Then Call PushStack(16, Col)
    
    'Set global variables if Calculate button was not pressed since loading workbook
    If NumDataBases > 0 Then
        If errStatus = 0 Then
            Application.ScreenUpdating = False
            Application.Calculation = xlCalculationManual
            ThisWorkbook.Worksheets(strDistributionSheet).Activate
            If Name = "default" Then
                strButtonName = Application.Caller
            Else
                strButtonName = Name
            End If
            ServerNumber = Mid(strButtonName, 8, 99)
            
            If Len(Col) = 1 Then
                ColIndex = Asc(Col) - 64
            Else
                MSD = Asc(Left(Col, 1)) - 64
                LSD = Asc(Right(Col, 1)) - 64
                ColIndex = LSD + (MSD * 26)
            End If
            For RowIndex = StartRow To StartRow + NumDataBases - 1
                If ServerIsUp(ServerNumber) Then
                    If Cells(RowIndex, ColIndex).Value <> 0 Then
                        strNum = Cells(RowIndex, ColIndex).Value
                        Cells(RowIndex, ColIndex).Value = "'" & strNum
                    End If
                    ThisWorkbook.Worksheets(strDistributionSheet).Shapes(strButtonName).OLEFormat.Object.Caption = "Recover Server"
                Else
                    If Cells(RowIndex, ColIndex).Value <> 0 Then
                        Cells(RowIndex, ColIndex).Value = Val(Cells(RowIndex, ColIndex).Value)
                    End If
                    ThisWorkbook.Worksheets(strDistributionSheet).Shapes(strButtonName).OLEFormat.Object.Caption = "Fail Server"
                End If
            Next RowIndex
    
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
    
            'Toggle server status
            If ServerIsUp(ServerNumber) Then
                ServerIsUp(ServerNumber) = False
            Else
                ServerIsUp(ServerNumber) = True
            End If
            
            Call DAGStatus(1)
        End If
    Else
        strButtonName = Application.Caller
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes(strButtonName).OLEFormat.Object.Caption = "Force Recalc"
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub DAGStatus(DAGIndex As Integer)
    Dim DAGStat As String                           'Used to display DAG status
    Dim DAGColor As Long                            'Used to store the color of the DAG status field
    Dim LiveServers(MaxSites) As Integer                    'Used to count number of server that are up and to calculate quorum
    Dim ActiveServers As Integer
    Dim x As Integer
    Dim y As Integer
    Dim Votes As Integer                            'Used to count the number of votes in the DAG
    If DebugLevel > DebugMedium Then Call PushStack(17, Str(DAGIndex))

    'Calculate DAG quorum
    For x = 1 To NumSites
        LiveServers(x) = 0
    Next x
    DagIsUp(DAGIndex) = False
    'Count live servers
    For x = 1 To TTLServers
        If x <= NumServers(1) Then
            If ServerIsUp(x) Then LiveServers(1) = LiveServers(1) + 1
        Else
            If ServerIsUp(x) Then LiveServers(2) = LiveServers(2) + 1
        End If
    Next x
    'Account for FSW
    If FileShareWitness Then
        Votes = TTLServers + 1
        Select Case FSWLocation
            Case 1
                LiveServers(1) = LiveServers(1) + 1
            Case 2
                LiveServers(2) = LiveServers(2) + 1
        End Select
    Else
        Votes = TTLServers
    End If
    Votes = (Votes \ 2) + 1
    If LiveServers(1) >= Votes Or LiveServers(2) >= Votes Then
        DagIsUp(DAGIndex) = True
    Else
        If FSWLocation = 3 Then
            ActiveServers = 1
        Else
            ActiveServers = 0
        End If
        For x = 1 To NumSites
            If WANisUp(x) Then ActiveServers = ActiveServers + LiveServers(x)
        Next x
        If ActiveServers >= Votes Then DagIsUp(DAGIndex) = True
    End If
    If DagIsUp(DAGIndex) Then
        DAGStat = DAGStringOK
        DAGColor = 5880731
    Else
        DAGStat = DAGStringFail
        DAGColor = vbRed
    End If
    
    'Display DAG status
    Range("'Distribution'!DAGQuroumStatus").Select
'    Range(DAGStatusField).Select
    ActiveCell.FormulaR1C1 = DAGStat
    Selection.Interior.Color = DAGColor
    Range("A1").Select
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub Build_Sheet()
    If DebugLevel > DebugMedium Then Call PushStack(18, "null")
    
    Call DeleteButton("DAC-Mode")
    Call DeleteButton("SecSiteYes")
    Call DeleteButton("SecSiteNo")
    Call DeleteButton("Calculate")
    Call DeleteButton("ExportCopy")
    Call DeleteButton("ExportPrimary")
    Call DeleteButton("ExportDBMountList")
    Call DeleteButton("ExportScripts")
    Call DeleteButton("ExportDAGList")
    Call DeleteButton("FSW-Site")
    Call DeleteButton("FSWprimary")
    Call DeleteButton("FSWsecondary")
    Call DeleteButton("FSWthird")
    
    Call CreateGroupBox("E3:H6", "DAC-Mode", "Cross-Site Failover", "What Ever")
    Call CreateOptionButton("F4:G4", "SecSiteYes", "Enable", "'ChangeSiteStatus ""1""'")
    Call CreateOptionButton("F5:G5", "SecSiteNo", "Disable", "'ChangeSiteStatus ""0""'")
    If SRActivationBlocked Then
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteNo").OLEFormat.Object.Value = True
    Else
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteYes").OLEFormat.Object.Value = True
    End If
    
    Call CreateGroupBox("M3:P6", "FSW-Site", "Witness Site", "What Ever")
    Call CreateOptionButton("M4:N4", "FSWprimary", "Primary", "'ChangeFSW ""P""'")
    Call CreateOptionButton("M5:N5", "FSWsecondary", "Secondary", "'ChangeFSW ""S""'")
    Call CreateOptionButton("O4:P4", "FSWthird", "Third", "'ChangeFSW ""T""'")
    ThisWorkbook.Worksheets(strDistributionSheet).Shapes("FSWprimary").OLEFormat.Object.Value = True
    
    Call CreateButton("C3:C6", "Calculate", "Calculate Database Layout", "Run_Spread")
    ThisWorkbook.Worksheets(strDistributionSheet).Shapes("Calculate").OLEFormat.Object.Orientation = xlHorizontal
    Call CreateButton("X3:Y6", "ExportPrimary", "Export Primary DB List", "ExportDBPrimaryList")
    ThisWorkbook.Worksheets(strDistributionSheet).Shapes("ExportPrimary").OLEFormat.Object.Orientation = xlHorizontal
    Call CreateButton("AA3:AB6", "ExportCopy", "Export Copy" & vbLf & "DB List", "ExportDBCopyList")
    ThisWorkbook.Worksheets(strDistributionSheet).Shapes("ExportCopy").OLEFormat.Object.Orientation = xlHorizontal
    Call CreateButton("R3:S6", "ExportDBMountList", "Export DB Mount List", "ExportDBMountList")
    ThisWorkbook.Worksheets(strDistributionSheet).Shapes("ExportDBMountList").OLEFormat.Object.Orientation = xlHorizontal
    Call CreateButton("U3:V6", "ExportDAGList", "Export DAG List", "ExportDAGList")
    ThisWorkbook.Worksheets(strDistributionSheet).Shapes("ExportDAGList").OLEFormat.Object.Orientation = xlHorizontal
    Call CreateButton("AD3:AF6", "ExportScripts", "Export Role Calculator Scripts", "ExportScripts")
    ThisWorkbook.Worksheets(strDistributionSheet).Shapes("ExportScripts").OLEFormat.Object.Orientation = xlHorizontal
    Range("'Distribution'!DAGQuroumStatus").Select
    'Range(DAGStatusField).Select
    ActiveCell.FormulaR1C1 = DAGStringOK
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .Font.Size = 10
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 5880731
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    Selection.Interior.Color = 255
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub Build_Table(NumServers, NumDataBases)       'Routine to create left column and column headers for DB diagram
    Dim x As Integer                            'For loop variable
    Dim SiteIndex As Integer                    'For loop variable to iterate through sites
    Dim DBNumber As Integer                     'Loop variable to iterate through databases
    Dim Failbutton As Object                    'Variable to iterate through Shapes collection
    Dim ServerNumber As Integer                 'Variable to keep track of server number for headers
    Dim SiteOffset As Integer                   'Variable used to shift each site section in the diagram
    Dim ButtonCol As String                     'Variable to help place fail/recover buttons in correct column
    Dim ButtonCol2 As String
    Dim PreviousServers As Integer              'Tracks number of servers in sites already added to diagram
    Dim ServerNameSize As Integer               'Size of font in the database name column
    Dim DAG As Integer                          'Place holder: variable to hold the DAG number when Distribution supports multiple DAGs
    Dim DiskCounter As Integer
    If DebugLevel > DebugMedium Then Call PushStack(19, "NumServers;" & Str(NumDataBases))
    
DAG = 1

    'Get longest server name
    ServerNameSize = Len(tblServerNames(1))
    For x = 2 To MaxServers
        If Len(tblServerNames(x)) > ServerNameSize Then ServerNameSize = Len(tblServerNames(x))
    Next x

    'Set default column width to 3.71 and remove any "Lag" comments
    ThisWorkbook.Worksheets(strDistributionSheet).Activate
    Range(Cells(HeaderRow, StartCol - 2), Cells(HeaderRow + MaxDatabases, StartCol + (MaxSites * (MaxServers + 1)))).Select
    Selection.ColumnWidth = 3.71
    Selection.ClearComments
    
    'Delete any previously existing "Fail" buttons
    For Each Failbutton In ThisWorkbook.Worksheets(strDistributionSheet).Shapes
        If Left(Failbutton.Name, 6) = "Server" Or Left(Failbutton.Name, 8) = "WAN Link" Then Call DeleteButton(Failbutton.Name)
    Next Failbutton
    
    'Delete any previous borders
    Cells.Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

    
    'Set status for all servers to "up"
    For x = 1 To MaxServers
        ServerIsUp(x) = True
    Next x
    
    'Set site activation section visibility based on numsites and SiteActivationBlock
    Call CheckSiteActivation
    ServerNumber = 1

    ' make column width about the width of the base name plus three digits (with one extra for wiggle room)
    Range(Cells(HeaderRow, StartCol - 2), Cells(HeaderRow + NumDataBases, StartCol - 2)).ColumnWidth = Len(tblDAGBaseNames(DAG)) + 4
    Range(Cells(HeaderRow + 1, StartCol - 1), Cells(HeaderRow + NumDataBases, StartCol - 1)).ColumnWidth = ServerNameSize + 1
    '

    'For each site group
    For SiteIndex = 0 To NumSites - 1
        SiteOffset = SiteIndex * (MaxServers + 1)
        'Create header row with server numbers and mark fail/recover button visible for the current site group
        For x = StartCol + SiteOffset To NumServers(SiteIndex + 1) + StartCol + SiteOffset - 1
            Cells(HeaderRow, x).Value = tblServerNames(ServerNumber)
            Cells(HeaderRow, x).RowHeight = (ServerNameSize + 5) * 5
            Cells(HeaderRow - 1, x).Value = "=COUNTIF(OFFSET(" & DiagramStart(1) & StartRow & ",0,-1):OFFSET(" & DiagramStart(1) & StartRow & "," & MaxDatabases & ",-1),""=" & tblServerNames(ServerNumber) & """)"
            Cells(HeaderRow - 2, x).Value = "=COUNTIF(OFFSET(" & GetCol(x) & StartRow & ",0,0):OFFSET(" & GetCol(x) & StartRow & "," & MaxDatabases & ",0),""<>"")"
            ButtonCol = GetCol(x)
            Call CreateButton(ButtonCol & HeaderRow - 8 & ":" & ButtonCol & HeaderRow - 3, "Server " & ServerNumber, "Fail Server", "'FailServer """ & ButtonCol & """'")
            ServerNumber = ServerNumber + 1
        Next x
        'Create fail/recover WAN button
        ButtonCol = GetCol(StartCol + SiteOffset)
        ButtonCol2 = GetCol(x - 1)
        Call CreateButton(ButtonCol & HeaderRow - 10 & ":" & ButtonCol2 & HeaderRow - 9, "WAN Link " & SiteIndex + 1, "Fail WAN ", "'FailWAN """ & SiteIndex + 1 & """'", xlHorizontal)
    'Set status to compare later against number of sites in Input spreadsheet
    LastSiteBuilt = SiteIndex + 1
    Next SiteIndex

    DBNumber = 1
    'initialize disk group counter
    DiskCounter = 1
    'Clear formating on disk group lable column
    Range(Cells(StartRow, StartCol - 3), Cells(StartRow + (MaxServers * MaxDatabases), StartCol - 3)).Select
    Selection.UnMerge
    Selection.ClearContents
    'Cycle through each DB in the design
    For x = StartRow To NumDataBases + StartRow - 1
        'Populate generic DB name
        Cells(x, StartCol - 2).Value = tblDAGBaseNames(DAG) & DBNumber
        'Mark line at top of disk group if using multiple db per volume
        If MultipleDBVolume And (x - StartRow) Mod DiskGroup = 0 Then
'        If MultipleDBVolume And (x - StartRow) Mod NumServers(1) = 0 Then
            Range(Cells(x, StartCol - 3), Cells(x, StartCol + (SiteOffset * SiteIndex))).Select
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlMedium
            End With
            Call DiskName(Range(Cells(x, StartCol - 3), Cells(x + DiskGroup - 1, StartCol - 3)), "Disk " & DiskCounter)
            DiskCounter = DiskCounter + 1
        End If
        DBNumber = DBNumber + 1
    Next x
    
    'Create counter for TTL DB versus Active DB
    Cells(HeaderRow - 5, StartCol - 1).Select
    With Selection
        .Value = "Tot/Active"
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
    End With
    Cells(HeaderRow - 4, StartCol - 1).Select
    With Selection
        .Value = "=CONCATENATE(" & NumDataBases & ",""/"",SUM(" & DiagramStart(1) & StartRow - 2 & ":" & DiagramEnd(NumSites) & StartRow - 2 & "))"
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
    End With
    
    Cells(HeaderRow - 2, StartCol - 1).Select
    With Selection
        .Value = "Assigned"
        .HorizontalAlignment = xlRight
        .VerticalAlignment = xlCenter
    End With
    Cells(HeaderRow - 1, StartCol - 1).Select
    With Selection
        .Value = "Active"
        .HorizontalAlignment = xlRight
        .VerticalAlignment = xlCenter
    End With
    
    '
    'Cycle through each DB in the design
    'Populate formula to determine which server hosts the active copy of a DB
    'Create one cell formula that looks at DB copies from all sites
    'DAGQuroumStatus
    For x = StartRow To NumDataBases + StartRow - 1
        Cells(x, StartCol - 1).Value = "=IF(OR(DAGQuroumStatus=""" & DAGStringFail & """,ISNA(MATCH(MIN(" & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ")," & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ",0))),""FAILED"", IF(OR(MATCH(MIN(" & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ")," & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ",0)<17,AND(MIN(" & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ")<17,IsSecSiteActive())),GetServer(MATCH(MIN(" & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ")," & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ",0)),""FAILED""))"
'        Cells(x, StartCol - 1).Value = "=IF(ISNA(MATCH(MIN(" & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ")," & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ",0)),""FAILED"", IF(OR(MATCH(MIN(" & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ")," & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ",0)<17,AND(MIN(" & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ")<17,IsSecSiteActive())),GetServer(MATCH(MIN(" & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ")," & DiagramStart(1) & x & ":" & DiagramEnd(NumSites) & x & ",0)),""FAILED""))"
    Next x
    '
    ' Create pleasing layout... ;)
    '
    ' Format DB Column Dark Green
    '
    Range(Cells(HeaderRow, StartCol - 2), Cells(HeaderRow + NumDataBases, StartCol - 2)).Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 5880731
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    '
    ' Format DB Column and Server Column with line borders
    '
    Range(Cells(HeaderRow, StartCol - 2), Cells(HeaderRow + NumDataBases, StartCol - 1)).Select
    For x = xlEdgeLeft To xlInsideHorizontal
        With Selection.Borders(x)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
    Next x
    ' Format area for each site
    '
    ' Format "Servers" column
    ' Light green, column width, alignment, and custom numeric format

    Range(Cells(HeaderRow + 1, StartCol - 1), Cells(HeaderRow + NumDataBases, StartCol - 1)).Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent3
        .TintAndShade = 0.599993896298105
        .PatternTintAndShade = 0
    End With

    With Selection
        .NumberFormat = """Server"" #"
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With


    For SiteIndex = 0 To NumSites - 1
        SiteOffset = SiteIndex * (MaxServers + 1)
        '
        ' Server Header Row Dark Green and -90 degree text orientation
        '
        Range(Cells(HeaderRow, StartCol + SiteOffset), Cells(HeaderRow, StartCol + (NumServers(SiteIndex + 1) - 1) + SiteOffset)).Select
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .Color = 5880731
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = False
            .Orientation = -90
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
        
        ' Format row of active database counters
        Range(Cells(HeaderRow - 1, StartCol + SiteOffset), Cells(HeaderRow - 1, StartCol + (NumServers(SiteIndex + 1) - 1) + SiteOffset)).Select
        Selection.HorizontalAlignment = xlCenter
        Range(Cells(HeaderRow - 2, StartCol + SiteOffset), Cells(HeaderRow - 1, StartCol + (NumServers(SiteIndex + 1) - 1) + SiteOffset)).Select
        Selection.HorizontalAlignment = xlCenter
        
        '
        ' Add Cell borders to headers and entire working area...
        ' Format xlEdgeLeft, xlEdgeTop, xlEdgeBottom, xlEdgeRight, xlInsideVertical, xlInsideHorizontal
        '                               startcol-1
        Range(Cells(HeaderRow, StartCol + SiteOffset), Cells(HeaderRow + NumDataBases, StartCol + (NumServers(SiteIndex + 1) - 1) + SiteOffset)).Select
        For x = xlEdgeLeft To xlInsideHorizontal
            With Selection.Borders(x)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
        Next x
        '
        ' Add cross hatch and set column width to working area...
        '
        Range(Cells(HeaderRow + 1, StartCol + SiteOffset), Cells(HeaderRow + NumDataBases, StartCol + (NumServers(SiteIndex + 1) - 1) + SiteOffset)).Select
        With Selection.Interior
            .Pattern = xlLightUp
            .PatternThemeColor = xlThemeColorDark1
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .PatternTintAndShade = -0.249946592608417
        End With
        With Selection
            .ColumnWidth = 3.71
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
        End With
        '
        ' Format Active Server header cell...
        '
'        If SiteIndex = 0 Or SRActivationBlocked Then
        If SiteIndex = 0 Then
            Range(Cells(HeaderRow, StartCol - 1 + SiteOffset).Address).Select
            With Selection
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlCenter
                .WrapText = False
                .Orientation = 0
                .AddIndent = False
                .IndentLevel = 0
                .ShrinkToFit = False
                .ReadingOrder = xlContext
                .MergeCells = False
                .FormulaR1C1 = "Active " & Chr(10) & "Server"
            End With
            
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 5880731
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With

            Range(Cells(HeaderRow, StartCol - 2 + SiteOffset).Address).Select
            With Selection
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlCenter
                .WrapText = False
                .Orientation = 0
                .AddIndent = False
                .IndentLevel = 0
                .ShrinkToFit = False
                .ReadingOrder = xlContext
                .MergeCells = False
                .FormulaR1C1 = "Database " & Chr(10) & "Name"
            End With
            
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .Color = 5880731
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
        End If
    Next SiteIndex
    
    'Format left column to fit other sheets in StorageCacl workbook
    Range(Cells(2, 1), Cells(StartRow + NumDataBases, 1)).Select
    Selection.ColumnWidth = 2.71
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    'Format right column to fit other sheets in StorageCacl workbook
    Range(Cells(2, StartCol + 1 + (MaxSites * (MaxServers + 1))), Cells(StartRow + NumDataBases, StartCol + 1 + (MaxSites * (MaxServers + 1)))).Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    'Format top row to fit other sheets in StorageCacl workbook
    Range(Cells(2, 2), Cells(2, StartCol + (MaxSites * (MaxServers + 1)))).Select
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    'Format bottom row to fit other sheets in StorageCacl workbook
    Range(Cells(StartRow + NumDataBases, 2), Cells(StartRow + NumDataBases, StartCol + (MaxSites * (MaxServers + 1)))).Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Cells(1, 2).Value = "Note1: Do not make any changes to this sheet.  This sheet is only used for calculation purposes."

    'Indicate if File Share Witness is required
    Call CheckFSW
'    Call MakeFSWButtons
    '
    ' Set A1 as active cell
    '
    Range("A1").Select
    If DebugLevel > DebugMedium Then Call PopStack
End Sub
Sub CreateOptionButton(Location As String, Name As String, Face As String, Action As String)
    Dim bLoc As Range
    Dim bTop As Single
    Dim bLeft As Single
    Dim bHeight As Single
    Dim bWidth As Single
    If DebugLevel > DebugMedium Then Call PushStack(20, Location & ";" & Name & ";" & Face & ";" & Action)

    Set bLoc = Range(Location)
    bTop = bLoc.Top
    bLeft = bLoc.Left
    bHeight = bLoc.Height
    bWidth = bLoc.Width
    With ActiveSheet.OptionButtons.Add(bLeft, bTop, bWidth, bHeight)
        .Characters.Text = Face
        .OnAction = Action
        .Name = Name
    End With
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub CreateGroupBox(Location As String, Name As String, Face As String, Action As String)
    Dim bLoc As Range
    Dim bTop As Single
    Dim bLeft As Single
    Dim bHeight As Single
    Dim bWidth As Single
    If DebugLevel > DebugMedium Then Call PushStack(21, Location & ";" & Name & ";" & Face & ";" & Action)

    Set bLoc = Range(Location)
    bTop = bLoc.Top
    bLeft = bLoc.Left
    bHeight = bLoc.Height
    bWidth = bLoc.Width
    With ActiveSheet.GroupBoxes.Add(bLeft, bTop, bWidth, bHeight)
        .Characters.Text = Face
        .Name = Name
    End With
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub CreateButton(Location As String, Name As String, Face As String, Action As String, Optional Orient As Integer = xlDownward)
    Dim bLoc As Range
    Dim bTop As Single
    Dim bLeft As Single
    Dim bHeight As Single
    Dim bWidth As Single
    If DebugLevel > DebugMedium Then Call PushStack(22, Location & ";" & Name & ";" & Face & ";" & Action)

    Set bLoc = Range(Location)
    bTop = bLoc.Top
    bLeft = bLoc.Left
    bHeight = bLoc.Height
    bWidth = bLoc.Width
    With ActiveSheet.Buttons.Add(bLeft, bTop, bWidth, bHeight)
        .OnAction = Action
        .Characters.Text = Face
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .ReadingOrder = xlContext
        .Orientation = Orient
        .AutoSize = False
        .Name = Name
    End With
    If DebugLevel > DebugMedium Then Call PopStack
End Sub
                                                                       
Sub DeleteButton(Name As String)
    If DebugLevel > DebugMedium Then Call PushStack(23, Name)
    
    ThisWorkbook.ActiveSheet.Shapes(Name).Visible = True
'    ThisWorkbook.ActiveSheet.Shapes.Range(Array(Name)).Select
    ThisWorkbook.ActiveSheet.Shapes.Range(Array(Name)).Delete
'    Selection.Delete
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Function GetCol(Col As Integer)
    Dim MSD As String           'Most significant digit (letter) of the column
    Dim LSD As String           'Least significant digit (letter) of the column
    If DebugLevel > DebugHigh Then Call PushStack(24, Str(Col))
    
    If Col < 27 Then
        MSD = ""
    Else
        MSD = Chr((Col \ 26) + 64)
    End If
    LSD = Chr((Col Mod 26) + 64)
    If MSD = "@" Then MSD = "Z"
    If LSD = "@" Then LSD = "Z"
    GetCol = MSD & LSD
    If DebugLevel > DebugHigh Then Call PopStack
End Function

Sub ClearArea()
    If DebugLevel > DebugMedium Then Call PushStack(25, "null")
    
    ThisWorkbook.Worksheets(strDistributionSheet).Activate           'Ensure the active spreadsheet is the spreadsheet with the parameters cells
    '
    ' Clean Working Range...
    '
    ThisWorkbook.ActiveSheet.Range(Cells(HeaderRow - 5, StartCol - 2), Cells(HeaderRow + MaxDatabases, StartCol + (MaxSites * (MaxServers + 1)))).Select
    Selection.Delete Shift:=xlUp
    Range("A1").Select

    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub SetFormat()
    Dim x As Integer                            'For loop variable
    Dim CellRange As String
    Dim strBuffer As String
    If DebugLevel > DebugMedium Then Call PushStack(26, "null")
    
    ThisWorkbook.Worksheets(strDistributionSheet).Select
    'Erase all existing Conditional Formatting
    Cells.FormatConditions.Delete
    'Create a Conditional Formating rule for each DB level
    '   up to the maximum number of colors stored in config spreadsheet
    For x = 1 To MaxColors
        Range(Full_Diagram).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:=x
        Range(Full_Diagram).FormatConditions(Range(Full_Diagram).FormatConditions.Count).SetFirstPriority
        With Range(Full_Diagram).FormatConditions(1).Font
            .Color = FontColor(x)
            .TintAndShade = 0
        End With
        With Range(Full_Diagram).FormatConditions(1).Interior
            .PatternColorIndex = xlAutomatic
            .Color = FillColor(x)
            .TintAndShade = 0
            .Pattern = xlSolid
        End With
        Range(Full_Diagram).FormatConditions(1).StopIfTrue = True
    Next x
    
    'Create a Conditional Formatting rule to highlight failed databases in white text with red background
    CellRange = GetCol(StartCol - 1) & StartRow & ":" & GetCol(StartCol - 1) & StartRow + MaxDatabases
    If IsEnUS Then
        strBuffer = "FAILED"
    Else
        strBuffer = ToGlobal("FAILED")
    End If
    Range(CellRange).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:=strBuffer
    Range(CellRange).FormatConditions(Range(CellRange).FormatConditions.Count).SetFirstPriority
    With Range(CellRange).FormatConditions(1).Font
        .Color = 16777215
        .TintAndShade = 0
    End With
    With Range(CellRange).FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 255
        .TintAndShade = 0
    End With
    Range(CellRange).FormatConditions(1).StopIfTrue = True
    
    'Create a Conditional Formatting rule for "Tot/Active" cell in header area
    If IsEnUS Then
        strBuffer = "=IF(SUM(" & DiagramStart(1) & StartRow - 2 & ":" & DiagramEnd(NumSites) & StartRow - 2 & ")<" & NumDataBases & ",1,0)"
    Else
        strBuffer = ToGlobal("=IF(SUM(" & DiagramStart(1) & StartRow - 2 & ":" & DiagramEnd(NumSites) & StartRow - 2 & ")<" & NumDataBases & ",1,0)")
    End If
    Cells(HeaderRow - 4, StartCol - 1).FormatConditions.Add Type:=xlExpression, Formula1:=strBuffer
    Cells(HeaderRow - 4, StartCol - 1).FormatConditions(Range(CellRange).FormatConditions.Count).SetFirstPriority
    With Cells(HeaderRow - 4, StartCol - 1).FormatConditions(1).Font
        .Color = 16777215
        .TintAndShade = 0
        .Bold = True
    End With
    With Cells(HeaderRow - 4, StartCol - 1).FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 255
        .TintAndShade = 0
    End With
    Cells(HeaderRow - 4, StartCol - 1).FormatConditions(1).StopIfTrue = True

    'Create a Conditional Formatting rule for Error Msg Cell in header area
    If IsEnUS Then
        strBuffer = "=IF(OR(ValidationCheck,FailureDomainCheck),1,0)"
    Else
        strBuffer = ToGlobal("=IF(OR(ValidationCheck,FailureDomainCheck),1,0)")
    End If
    Cells(ErrorRow, ErrorCol).FormatConditions.Add Type:=xlExpression, Formula1:=strBuffer
    Cells(ErrorRow, ErrorCol).FormatConditions(Range(CellRange).FormatConditions.Count).SetFirstPriority
    With Cells(ErrorRow, ErrorCol).FormatConditions(1).Font
        .Color = 16777215
        .TintAndShade = 0
        .Bold = True
    End With
    With Cells(ErrorRow, ErrorCol).FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 255
        .TintAndShade = 0
    End With
    Cells(ErrorRow, ErrorCol).FormatConditions(1).StopIfTrue = True
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Public Function GetServer_org(Column As Integer) As Integer
' The function can be called from the spreadsheet
' It converts a column number in the diagram into a server number
' It works with multiple sites
'
    Dim Col As Integer                              'Column number passed to function forced to integer type
    Dim Index As Integer                            'The relative server number within a set of site servers
    Dim Site As Integer                             'The site number to which the column passed belongs in the diagram
    If DebugLevel > DebugHigh Then Call PushStack(27, Str(Column))
    
    If NumServers(1) > 0 Then
                                        ' If global variables have not been set (i.e. Calculate or Failover buttons not pressed)
        Col = Int(Column)
        If (Col = Column) And (errStatus = 0) Then
            Index = Col Mod (MaxServers + 1)
            Site = Col \ (MaxServers + 1)
            GetServer = 0
            While Site > 0
                GetServer = GetServer + NumServers(Site)
                Site = Site - 1
            Wend
            GetServer = GetServer + Index
        End If
    Else
        GetServer = 0
    End If
    If DebugLevel > DebugHigh Then Call PopStack
End Function
Public Function GetServer(Column As Integer) As String
' The function can be called from the spreadsheet
' It converts a column number in the diagram into a server number
' It works with multiple sites
'
    Dim Col As Integer                              'Column number passed to function forced to integer type
    Dim Index As Integer                            'The relative server number within a set of site servers
    Dim Site As Integer                             'The site number to which the column passed belongs in the diagram
    Dim x As Integer
    If DebugLevel > DebugHigh Then Call PushStack(28, Str(Column))
    
    If Application.Calculation <> xlCalculationManual Then
        If NumServers(1) > 0 Then
                                            ' If global variables have not been set (i.e. Calculate or Failover buttons not pressed)
            Col = Int(Column)
            If (Col = Column) And (errStatus = 0) Then
                Index = Col Mod (MaxServers + 1)
                Site = Col \ (MaxServers + 1)
                x = 0
                While Site > 0
                    x = x + NumServers(Site)
                    Site = Site - 1
                Wend
                x = x + Index
            End If
        Else
            x = 0
        End If
        GetServer = tblServerNames(x)
    End If
    If DebugLevel > DebugHigh Then Call PopStack
End Function

Public Function GetFailureDomain(Server As Integer) As String
' The function can be called from the spreadsheet
' Returns as string to identify to which (if any) failure domain the server belongs

Dim Site As Integer
Dim ServerNumber As Integer
Dim Counter As Integer
Dim Index As Integer
If DebugLevel > DebugHigh Then Call PushStack(29, Str(Server))

If Application.Calculation <> xlCalculationManual Then
    ServerNumber = Int(Server)
    GetFailureDomain = "Server " & ServerNumber
    Index = 1
    Site = 1
    If ServerNumber <= NumServers(Site) Then
        If NumFailureDomains(Site) = 0 Or (arrFDControl(Site, Summary, NumMembers) <> NumServers(Site)) Then
            GetFailureDomain = "Server " & ServerNumber
        Else
            Counter = FDTable(Site)(Index, cntServers)
            While (Counter < ServerNumber) And (Index <= MaxServers / 2)
                Counter = Counter + FDTable(Site)(Index + 1, cntServers)
                Index = Index + 1
            Wend
            If Index <= MaxServers / 2 Then
                If ServerNumber <= NumServers(1) Then
                    GetFailureDomain = "Server " & ServerNumber & " Primary Site Failure Domain " & Index
                Else
                    GetFailureDomain = "Server " & ServerNumber
                End If
            End If
        End If
    Else
        Site = 2
        If ServerNumber <= NumServers(Site - 1) + NumServers(Site) Then
            If NumFailureDomains(Site) = 0 Or (arrFDControl(Site, Summary, NumMembers) <> NumServers(Site)) Then
                GetFailureDomain = "Server " & ServerNumber
            Else
                Counter = FDTable(Site)(Index, cntServers)
                While (Counter < ServerNumber - NumServers(Site - 1)) And (Index <= MaxServers / 2)
                    Counter = Counter + FDTable(Site)(Index + 1, cntServers)
                    Index = Index + 1
                Wend
                If Index <= MaxServers / 2 Then
                    If ServerNumber <= NumServers(Site - 1) + Counter Then
                        GetFailureDomain = "Server " & ServerNumber & " Secondary Site Failure Domain " & Index
                    Else
                        GetFailureDomain = "Server " & ServerNumber
                    End If
                End If
            End If
        Else
            GetFailureDomain = "Server " & ServerNumber
        End If
    End If
End If
If DebugLevel > DebugHigh Then Call PopStack
End Function

Sub CheckRebuild()

Dim wksht As Worksheet
Dim x As Variant
If DebugLevel > DebugMedium Then Call PushStack(30, "null")

Set wksht = ActiveSheet

'x = MsgBox("Start CheckRebuild")
    'If number if sites on Input spreadsheet has changed
    If (LastSiteBuilt <> NumSites) Or InputValuesChanged Or Not (bolDoneOnce) Then
        InputValuesChanged = False
        Call Run_Spread
    Else
        'Make sure SiteBlockActivation is consistent with Input Spreadsheet
        Call CheckSiteActivation
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Sub
Sub CheckSiteActivation()
Dim x As Variant
If DebugLevel > DebugMedium Then Call PushStack(31, "null")

'x = MsgBox("Start CheckSiteActivation")
    If NumSites > 1 Then
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes("FSWsecondary").Visible = True
        If ThisWorkbook.Sheets("Input").Range("SRModel").Value = ThisWorkbook.Sheets("Variables").Range("varSRModel")(2).Value Then 'Active/Active Single DAG
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteYes").OLEFormat.Object.Value = True
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteNo").OLEFormat.Object.Value = False
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteNo").Visible = True
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteYes").Visible = True
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("DAC-Mode").Visible = True
            SecondSiteActive = True
        Else
            SecondSiteActive = False
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteYes").OLEFormat.Object.Value = False
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteNo").OLEFormat.Object.Value = True
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteNo").Visible = True
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteYes").Visible = True
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("DAC-Mode").Visible = True
        End If
    Else
        SecondSiteActive = False
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteYes").OLEFormat.Object.Value = False
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteNo").OLEFormat.Object.Value = True
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteNo").Visible = False
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes("SecSiteYes").Visible = False
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes("DAC-Mode").Visible = False
        
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes("FSWsecondary").OLEFormat.Object.Value = False
        ThisWorkbook.Worksheets(strDistributionSheet).Shapes("FSWsecondary").Visible = False

    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub ExportDBCopyList()
    Dim CopyExport As FileType
    Dim RowNum As Integer
    Dim DB As String
    Dim Server As String
    Dim ColIndex As Integer
    Dim ActivationPreference As String
    Dim PreferenceList(MaxServers) As String
    Dim LagCopies(MaxServers) As Boolean
    Dim ReplayHolder As String
    Dim TruncHolder As String
    Dim HighestItem As Integer
    Dim x As Integer
    Dim WorkbookName As String
    Dim WorkbookFullName As String
    Dim GC1, GC2 As String
    If DebugLevel > DebugMedium Then Call PushStack(32, "null")
    
    Erase LagCopies
    
    GC1 = "GC1.contoso.com"
    If SiteResilience = "Yes" Then
        GC2 = "GC2.contoso.com"
    Else
        GC2 = "Not Used"
    End If

    If Err.Number = 0 Then
        If NumDataBases = 0 Then
            Call Config
        End If
        
        If errStatus = 0 Then
            Export_Activation_Preference.TextBox9 = ExportPath
            Export_Activation_Preference.GCServer1 = GC1
            Export_Activation_Preference.GCServer2 = GC2
            If SiteResilience = "Yes" Then
                Export_Activation_Preference.GCServer2.Visible = True
                Export_Activation_Preference.GCServer2.Enabled = True
                Export_Activation_Preference.Label18.Visible = True
                Export_Activation_Preference.Label18.Enabled = True
            Else
                Export_Activation_Preference.GCServer2.Visible = False
                Export_Activation_Preference.GCServer2.Enabled = False
                Export_Activation_Preference.Label18.Visible = False
                Export_Activation_Preference.Label18.Enabled = False
            End If

        
            Do
                Export_Activation_Preference.Show
                If Export_Activation_Preference.Okay.Value = True Then
                    If Dir(Export_Activation_Preference.TextBox9 & DBCopyFile, vbNormal) > "" Then
                        x = MsgBox(Export_Activation_Preference.TextBox9 & DBCopyFile & " already exists." & vbCrLf & vbCrLf & "Do you want to overwrite it?", vbYesNo, "Role Calculator - Export Database Copy List")
                    Else
                        x = vbYes
                    End If
                End If
            Loop Until (Export_Activation_Preference.Okay.Value = True And x = vbYes) Or (Export_Activation_Preference.Okay.Value = False)
        
            If Export_Activation_Preference.Okay.Value Then
                ExportPath = Export_Activation_Preference.TextBox9.Value
                CopyExport.Name = ExportPath & DBCopyFile
                CopyExport.Number = FreeFile
                GC1 = Export_Activation_Preference.GCServer1
                If SiteResilience = "Yes" Then
                    GC2 = Export_Activation_Preference.GCServer2
                Else
                    GC2 = ""
                End If
                Open CopyExport.Name For Output As #CopyExport.Number
                Write #CopyExport.Number, "GC", "GC2", "Name", "Server", "ActivationPreference", "ReplayLagTime", "TruncationLagTime"
                Write #CopyExport.Number, "VersionNumber", CreateMBDatabaseCopiesDataVer, , , , , "0.00:00:00"
                
                HighestItem = 1
                For RowNum = StartRow To StartRow + NumDataBases - 1
                    DB = ThisWorkbook.Worksheets(strDistributionSheet).Cells(RowNum, StartCol - 2).Value
                    For ColIndex = StartCol To StartCol + 1 + (NumSites * MaxServers)
                        If ThisWorkbook.Worksheets(strDistributionSheet).Cells(RowNum, ColIndex).Value > 1 Then
                            If ThisWorkbook.Worksheets(strDistributionSheet).Cells(RowNum, ColIndex).Comment Is Nothing Then
                                LagCopies(ThisWorkbook.Worksheets(strDistributionSheet).Cells(RowNum, ColIndex).Value) = False
                            Else
                                LagCopies(ThisWorkbook.Worksheets(strDistributionSheet).Cells(RowNum, ColIndex).Value) = True
                            End If
                            PreferenceList(ThisWorkbook.Worksheets(strDistributionSheet).Cells(RowNum, ColIndex).Value) = ThisWorkbook.Worksheets(strDistributionSheet).Cells(HeaderRow, ColIndex).Value
                            If ThisWorkbook.Worksheets(strDistributionSheet).Cells(RowNum, ColIndex).Value > HighestItem Then
                                HighestItem = ThisWorkbook.Worksheets(strDistributionSheet).Cells(RowNum, ColIndex).Value
                            End If
                        End If
                    Next ColIndex
                    For x = 2 To HighestItem
                        If LagCopies(x) Then
                            ReplayHolder = ReplayLagTime
                            TruncHolder = TruncationLagTime
                        Else
                            ReplayHolder = "0.00:00:00"
                            TruncHolder = "0.00:00:00"
                        End If
                        Write #CopyExport.Number, GC1, GC2, DB, PreferenceList(x), Trim(Str(x)), ReplayHolder, TruncHolder
                    Next x
                Next RowNum
                
                Close #CopyExport.Number
                x = MsgBox("Export Database Copy List saved to the following location:" & vbCrLf & vbCrLf & CopyExport.Name, vbOKOnly, "Role Calculator - Export Database Copy List")
            End If
        End If
    Else
        x = MsgBox(errText, vbExclamation, "Role Calculator Error")
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub ExportDBPrimaryList()

    Dim PrimaryExport As FileType
    Dim RowNum As Integer
    Dim DB As String
    Dim Server As String
    Dim ColIndex As Integer
    Dim HighestItem As Integer
    Dim x As Integer
    Dim WorkbookName As String
    Dim WorkbookFullName As String
    Dim DataMoveReplicationConstraint As String
    Dim RecoverableItemsWarningQuota As String
    Dim RecoverableItemsQuota As String
    Dim IsExcludedFromInitialProvisioning As String
    Dim CalendarLoggingQuota As String
    Dim VolumePath As String
    Dim AutoDagExcludeFromMonitoring As String
    Dim DBFilePath, CircularLogging, DeletedItemRetention, ReplaceFirstDB, GC, GC1, GC2, OAB As String
    Dim RetainDeletedItemsUntilBackup, IndexEnabled, ProhibitSendReceive, ProhibitSend As String
    Dim AllowFileRestore, BackgroundDBMaint, IsExcludedFromProvisioning, IsSuspendedFromProvisioning, IssueWarning As String
    Dim MailboxRetention, MountAtStartup, HistoryRetention, MaintSchedule, QuotaNotificationSched
    If DebugLevel > DebugMedium Then Call PushStack(33, "null")
    
    If Err.Number = 0 Then
        'Set defaults
        If DatabasesRootFolder <> "" Then
            DBFilePath = DatabasesRootFolder
        Else
            DBFilePath = "C:\ExchangeDatabases"
        End If
        If VolumesRootFolder <> "" Then
            VolumePath = VolumesRootFolder
        Else
            VolumePath = "C:\ExchangeVolumes"
        End If
        DeletedItemRetention = "180"
        GC1 = "GC1.contoso.com"
        If SiteResilience = "Yes" Then
            GC2 = "GC2.contoso.com"
        Else
            GC2 = "Not Used"
        End If
        OAB = "\Default Offline Address Book"
        RetainDeletedItemsUntilBackup = "Yes"
        IndexEnabled = "Yes"
        CircularLogging = "No"
        ProhibitSendReceive = "0"
        ProhibitSend = "0"
        IssueWarning = "0"
        AllowFileRestore = "Yes"
        BackgroundDBMaint = "Yes"
        IsExcludedFromProvisioning = "No"
        IsSuspendedFromProvisioning = "No"
        MailboxRetention = "30"
        MountAtStartup = "Yes"
        HistoryRetention = "7"
        AutoDagExcludeFromMonitoring = "False"
        CalendarLoggingQuota = "1GB"
        IsExcludedFromInitialProvisioning = "True"
        RecoverableItemsWarningQuota = "20"
        RecoverableItemsQuota = "30"
        
        If NumDataBases = 0 Then
            Call Config
        End If
        If errStatus = 0 Then
        
            ' Load form with defaults
            Export_DB_Build.TextBox9 = ExportPath
            Export_DB_Build.DataMoveReplicationConstraint.Clear
            Export_DB_Build.DataMoveReplicationConstraint.AddItem ("None")
            Export_DB_Build.DataMoveReplicationConstraint.AddItem ("SecondCopy")
            Export_DB_Build.DataMoveReplicationConstraint.AddItem ("SecondDatacenter")
            Export_DB_Build.DataMoveReplicationConstraint.AddItem ("AllDatacenters")
            Export_DB_Build.DataMoveReplicationConstraint.AddItem ("AllCopies")
            Export_DB_Build.DataMoveReplicationConstraint.ListIndex = 0
            If MultipleDBVolume Then
                Export_DB_Build.Label27.Visible = True
                Export_DB_Build.Label27.Enabled = True
                Export_DB_Build.VolRootFolder.Visible = True
                Export_DB_Build.VolRootFolder.Enabled = True
            Else
                Export_DB_Build.Label27.Visible = False
                Export_DB_Build.Label27.Enabled = False
                Export_DB_Build.VolRootFolder.Visible = False
                Export_DB_Build.VolRootFolder.Enabled = False
            End If
            Export_DB_Build.VolRootFolder = VolumePath
            Export_DB_Build.DBPath = DBFilePath
            Export_DB_Build.GCServer1 = GC1
            Export_DB_Build.GCServer2 = GC2
            Export_DB_Build.DefaultAB = OAB
            Export_DB_Build.RecoverableItemsWarningQuota = 1
            Export_DB_Build.RecoverableItemsQuota = 1
            Export_DB_Build.DeletedItemRetention = DeletedItemRetention
            Export_DB_Build.ProhibitSendReceive = ProhibitSendReceive
            Export_DB_Build.ProhibitSend = ProhibitSend
            Export_DB_Build.IssueWarning = IssueWarning
            Export_DB_Build.MailboxRetention = MailboxRetention
            Export_DB_Build.HistoryRetention = HistoryRetention
            Export_DB_Build.RecoverableItemsQuota.Value = RecoverableItemsQuota
            Export_DB_Build.RecoverableItemsWarningQuota.Value = RecoverableItemsWarningQuota
            If RetainDeletedItemsUntilBackup = "Yes" Then
                Export_DB_Build.RetainDeletedItemsUntilBackup_Yes = True
            Else
                Export_DB_Build.RetainDeletedItemsUntilBackup_No = True
            End If
            If CircularLogging = "Yes" Then
                Export_DB_Build.CircularLogging_Yes = True
            Else
                Export_DB_Build.CircularLogging_No = True
            End If
            If SiteResilience = "Yes" Then
                Export_DB_Build.GCServer2.Visible = True
                Export_DB_Build.GCServer2.Enabled = True
                Export_DB_Build.Label18.Visible = True
                Export_DB_Build.Label18.Enabled = True
            Else
                Export_DB_Build.GCServer2.Visible = False
                Export_DB_Build.GCServer2.Enabled = False
                Export_DB_Build.Label18.Visible = False
                Export_DB_Build.Label18.Enabled = False
            End If
            
            ' Collect input into form
            Do
                Export_DB_Build.Show
                If Export_DB_Build.Okay.Value = True Then
                    If Dir(Export_DB_Build.TextBox9 & DBCreateFile, vbNormal) > "" Then
                        x = MsgBox(Export_DB_Build.TextBox9 & DBCreateFile & " already exists." & vbCrLf & vbCrLf & "Do you want to overwrite it?", vbYesNo, "Role Calculator - Export Primary Database List")
                    Else
                        x = vbYes
                    End If
                End If
            Loop Until (Export_DB_Build.Okay.Value = True And x = vbYes) Or (Export_DB_Build.Okay.Value = False)
            
            ' Harvest input from form and write file
            If Export_DB_Build.Okay.Value = True Then
                ExportPath = Export_DB_Build.TextBox9
                PrimaryExport.Name = ExportPath & DBCreateFile
                PrimaryExport.Number = FreeFile
                DBFilePath = Export_DB_Build.DBPath
                DatabasesRootFolder = Export_DB_Build.DBPath
                VolumePath = Export_DB_Build.VolRootFolder
                VolumesRootFolder = Export_DB_Build.VolRootFolder
                DeletedItemRetention = Export_DB_Build.DeletedItemRetention & ".00:00:00"
                GC1 = Export_DB_Build.GCServer1
                If SiteResilience = "Yes" Then
                    GC2 = Export_DB_Build.GCServer2
                Else
                    GC2 = ""
                End If
                OAB = Export_DB_Build.DefaultAB
                If Export_DB_Build.RetainDeletedItemsUntilBackup_Yes Then
                    RetainDeletedItemsUntilBackup = "TRUE"
                Else
                    RetainDeletedItemsUntilBackup = "FALSE"
                End If
                IndexEnabled = "True"
                If Export_DB_Build.CircularLogging_Yes Then
                    CircularLogging = "TRUE"
                Else
                    CircularLogging = "FALSE"
                End If
                If Export_DB_Build.ProhibitSendReceive = "0" Then
                    ProhibitSendReceive = "Unlimited"
                Else
                    ProhibitSendReceive = Export_DB_Build.ProhibitSendReceive & " MB"
                End If
                If Export_DB_Build.ProhibitSend = "0" Then
                    ProhibitSend = "Unlimited"
                Else
                    ProhibitSend = Export_DB_Build.ProhibitSend & " MB"
                End If
                If Export_DB_Build.IssueWarning = "0" Then
                    IssueWarning = "Unlimited"
                Else
                    IssueWarning = Export_DB_Build.IssueWarning & " MB"
                End If
                AllowFileRestore = "True"
                BackgroundDBMaint = "True"
                IsExcludedFromProvisioning = "False"
                IsSuspendedFromProvisioning = "False"
                MailboxRetention = Export_DB_Build.MailboxRetention & ".00:00:00"
                MountAtStartup = "True"
                HistoryRetention = Export_DB_Build.HistoryRetention & ".00:00:00"
                AutoDagExcludeFromMonitoring = "False"
                CalendarLoggingQuota = "1GB"
                IsExcludedFromInitialProvisioning = "False"
                DataMoveReplicationConstraint = Export_DB_Build.DataMoveReplicationConstraint.Value
                RecoverableItemsQuota = Export_DB_Build.RecoverableItemsQuota.Value
                RecoverableItemsWarningQuota = Export_DB_Build.RecoverableItemsWarningQuota.Value

        
                Open PrimaryExport.Name For Output As #PrimaryExport.Number
                Write #PrimaryExport.Number, "Name", "Server", "DBFilePath", "LogFolderPath", "DeletedItemRetention", "GC", "OAB", "RetainDeletedItemsUntilBackup", "IndexEnabled", "CircularLoggingEnabled", "ProhibitSendReceiveQuota", "ProhibitSendQuota", "IssueWarningQuota", "AllowFileRestore", "BackgroundDatabaseMaintenance", "IsExcludedFromProvisioning", "IsSuspendedFromProvisioning", "MailboxRetention", "MountAtStartup", "EventHistoryRetentionPeriod", "AutoDagExcludeFromMonitoring", "CalendarLoggingQuota", "IsExcludedFromInitialProvisioning", "DataMoveReplicationConstraint", "RecoverableItemsQuota", "RecoverableItemsWarningQuota"
                Write #PrimaryExport.Number, "VersionNumber", CreateMBDatabasesDataVer, , , , , , , , , , , , , , , , , , , , , , , , ""
                HighestItem = 1
                For RowNum = StartRow To StartRow + NumDataBases - 1
                    DB = ThisWorkbook.Worksheets(strDistributionSheet).Cells(RowNum, StartCol - 2).Value
                    Server = ""
                    For ColIndex = StartCol To StartCol + (StartCol * MaxServers)
                        If ThisWorkbook.Worksheets(strDistributionSheet).Cells(RowNum, ColIndex).Value = 1 Then
                            Server = ThisWorkbook.Worksheets(strDistributionSheet).Cells(HeaderRow, ColIndex).Value
                            If ColIndex > StartCol + MaxServers Then
                                GC = GC2
                            Else
                                GC = GC1
                            End If
                        End If
                    Next ColIndex
                    If DblQuote Then
                        Write #PrimaryExport.Number, DB, Server, Chr(34) & DBFilePath & "\" & DB & "\" & DB & ".edb" & Chr(34), Chr(34) & DBFilePath & "\" & DB & "\" & DB & ".log" & Chr(34), DeletedItemRetention, GC, OAB, RetainDeletedItemsUntilBackup, IndexEnabled, CircularLogging, ProhibitSendReceive, ProhibitSend, IssueWarning, AllowFileRestore, BackgroundDBMaint, IsExcludedFromProvisioning, IsSuspendedFromProvisioning, MailboxRetention, MountAtStartup, HistoryRetention, AutoDagExcludeFromMonitoring, CalendarLoggingQuota, IsExcludedFromInitialProvisioning, DataMoveReplicationConstraint, RecoverableItemsQuota, RecoverableItemsWarningQuota
                    Else
                        Write #PrimaryExport.Number, DB, Server, DBFilePath & "\" & DB & "\" & DB & ".db\" & DB & ".edb", DBFilePath & "\" & DB & "\" & DB & ".log", DeletedItemRetention, GC, OAB, RetainDeletedItemsUntilBackup, IndexEnabled, CircularLogging, ProhibitSendReceive, ProhibitSend, IssueWarning, AllowFileRestore, BackgroundDBMaint, IsExcludedFromProvisioning, IsSuspendedFromProvisioning, MailboxRetention, MountAtStartup, HistoryRetention, AutoDagExcludeFromMonitoring, CalendarLoggingQuota, IsExcludedFromInitialProvisioning, DataMoveReplicationConstraint, RecoverableItemsQuota, RecoverableItemsWarningQuota
                    End If
                Next RowNum
                
                Close #PrimaryExport.Number
                x = MsgBox("Export Primary Database List saved to the following location:" & vbCrLf & vbCrLf & PrimaryExport.Name, vbOKOnly, "Role Calculator - Export Primary Database List")
            End If
        End If
    Else
        x = MsgBox(errText, vbExclamation, "Role Calculator Error")
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Sub
Sub ExportDAGList()
    Dim DAGsExport As FileType
    Dim x As Integer
    Dim VolumePath As String
    Dim DBFilePath As String
    Dim DAGName As String
    Dim DAGIps As String
    Dim WitnessServer As String
    Dim WitnessDir As String
    Dim AltWitnessServer As String
    Dim AltWitnessDir As String
    Dim DAGMapiNetwork As String
    Dim DAGMapiNetworkName As String
    Dim DAGReplNetwork As String
    Dim DAGReplNetworkName As String
    Dim DAGEbnNetwork As String
    Dim DAGEbnNetworkName As String
    Dim Site1Servers As String
    Dim Site2Servers As String
    Dim GC As String
    Dim GC2 As String
    Dim DACMode As String
    Dim MaximumActiveDatabasesSite1 As String
    Dim MaximumActiveDatabasesSite2 As String
    Dim AutoDagVolumesRootFolderPath As String
    Dim AutoDagDatabasesRootFolderPath As String
    Dim AutoDagDatabaseCopiesPerVolume As String
    Dim ManualDAGNetworkConfiguration As String
    Dim ReplayLagManagerEnabled As String
    Dim NetworkEncryption As String
    Dim NetworkCompression As String
    Dim ReplicationPort
    Dim Isolation As String
    If DebugLevel > DebugMedium Then Call PushStack(34, "null")
    
    'Set defaults
    If DatabasesRootFolder <> "" Then
        DBFilePath = DatabasesRootFolder
    Else
        DBFilePath = "C:\ExchangeDatabases"
    End If
    If VolumesRootFolder <> "" Then
        VolumePath = VolumesRootFolder
    Else
        VolumePath = "C:\ExchangeVolumes"
    End If
    GC = "GC1.contoso.com"
    If SiteResilience = "Yes" Then
        GC2 = "GC2.contoso.com"
    Else
        GC2 = "Not Used"
    End If

    'Setup defaults
    DAGName = "DAG1"
    DAGIps = ""
    WitnessServer = "witness.contoso.com"
    WitnessDir = "C:\DAG-FSW\DAG1"
    AltWitnessServer = "alt-witness.contoso.com"
    AltWitnessDir = "C:\DAG-FSW\DAG1-Alt"
    DAGMapiNetwork = ""
    DAGMapiNetworkName = ""
    DAGReplNetwork = ""
    DAGReplNetworkName = ""
    DAGEbnNetwork = ""
    DAGEbnNetworkName = ""
    Site1Servers = tblServerNames(1)
    For x = 2 To NumServers(1)
        Site1Servers = Site1Servers & "," & tblServerNames(x)
    Next x
    If NumSites = 1 Then
        Site2Servers = ""
    Else
        Site2Servers = tblServerNames(NumServers(1) + 1)
        For x = NumServers(1) + 2 To NumServers(1) + NumServers(2)
            Site2Servers = Site2Servers & "," & tblServerNames(x)
        Next x
    End If
    DACMode = "DAGOnly"
    MaximumActiveDatabasesSite1 = Str(NumDataBases * NumCopies(1) \ NumServers(1))
    If NumSites = 1 Then
        MaximumActiveDatabasesSite2 = ""
    Else
        MaximumActiveDatabasesSite2 = Str(NumDataBases * NumCopies(2) \ NumServers(2))
    End If
    AutoDagVolumesRootFolderPath = VolumePath
    AutoDagDatabasesRootFolderPath = DBFilePath
    AutoDagDatabaseCopiesPerVolume = Str(NumDBPerVol)
    ManualDAGNetworkConfiguration = "False"
    ReplayLagManagerEnabled = "True"
    NetworkEncryption = "InterSubnetOnly"
    NetworkCompression = "InterSubnetOnly"
    ReplicationPort = "64327"
    If DBLogIsolation Then
        Isolation = "True"
    Else
        Isolation = "False"
    End If

    'Setup dialog box for data entry
    Export_DAGs.TextBox9 = ExportPath
    Export_DAGs.DACMode.Clear
    Export_DAGs.DACMode.AddItem ("DAGOnly")
    Export_DAGs.DACMode.AddItem ("Off")
    Export_DAGs.DACMode.ListIndex = 0
    Export_DAGs.NetworkEncryption.Clear
    Export_DAGs.NetworkEncryption.AddItem ("Enabled")
    Export_DAGs.NetworkEncryption.AddItem ("Disabled")
    Export_DAGs.NetworkEncryption.AddItem ("InterSubnetOnly")
    Export_DAGs.NetworkEncryption.AddItem ("SeedOnly")
    Export_DAGs.NetworkEncryption.ListIndex = 2
    Export_DAGs.NetworkCompression.Clear
    Export_DAGs.NetworkCompression.AddItem ("Enabled")
    Export_DAGs.NetworkCompression.AddItem ("Disabled")
    Export_DAGs.NetworkCompression.AddItem ("InterSubnetOnly")
    Export_DAGs.NetworkCompression.AddItem ("SeedOnly")
    Export_DAGs.NetworkCompression.ListIndex = 2
    Export_DAGs.PrimaryGC = GC
    Export_DAGs.SecondaryGC = GC2
    Export_DAGs.ReplicationPort = ReplicationPort
    Export_DAGs.DAGName = DAGName
    Export_DAGs.VolumeRootFolderPath = VolumePath
    Export_DAGs.DatabaseRootFolderPath = DBFilePath
    Export_DAGs.PrimaryMaxActive = MaximumActiveDatabasesSite1
    Export_DAGs.SecondaryMaxActive = MaximumActiveDatabasesSite2
    Export_DAGs.PrimaryWitnessServer = WitnessServer
    Export_DAGs.PrimaryWitnessDirectory = WitnessDir
    Export_DAGs.SecondaryWitnessServer = AltWitnessServer
    Export_DAGs.SecondaryWitnessDirectory = AltWitnessDir
    Export_DAGs.PrimaryServers1.Clear
    For x = 1 To NumServers(1)
        Export_DAGs.PrimaryServers1.AddItem (tblServerNames(x))
    Next x
    Export_DAGs.SecondaryServers1.Clear
    For x = NumServers(1) + 1 To NumServers(1) + NumServers(2)
        Export_DAGs.SecondaryServers1.AddItem (tblServerNames(x))
    Next x
    
    Do
        Export_DAGs.Show
        If Export_DAGs.Okay.Value = True Then
            If Dir(Export_DAGs.TextBox9 & DAGsFile, vbNormal) > "" Then
                x = MsgBox(Export_DAGs.TextBox9 & DAGsFile & " already exists." & vbCrLf & vbCrLf & "Do you want to overwrite it?", vbYesNo, "Role Calculator - Export DAG List")
            Else
                x = vbYes
            End If
        End If
    Loop Until (Export_DAGs.Okay.Value = True And x = vbYes) Or (Export_DAGs.Okay.Value = False)

    'Harvest data entry
    If Export_DAGs.Okay.Value Then
        ExportPath = Export_DAGs.TextBox9
        DAGName = Export_DAGs.DAGName
        DACMode = Export_DAGs.DACMode.Value
        NetworkEncryption = Export_DAGs.NetworkEncryption.Value
        NetworkCompression = Export_DAGs.NetworkCompression.Value
        GC = Export_DAGs.PrimaryGC
        GC2 = Export_DAGs.SecondaryGC
        ReplicationPort = Export_DAGs.ReplicationPort
        VolumePath = Export_DAGs.VolumeRootFolderPath
        DBFilePath = Export_DAGs.DatabaseRootFolderPath
        MaximumActiveDatabasesSite1 = Export_DAGs.PrimaryMaxActive
        MaximumActiveDatabasesSite2 = Export_DAGs.SecondaryMaxActive
        WitnessServer = Export_DAGs.PrimaryWitnessServer
        WitnessDir = Export_DAGs.PrimaryWitnessDirectory
        AltWitnessServer = Export_DAGs.SecondaryWitnessServer
        AltWitnessDir = Export_DAGs.SecondaryWitnessDirectory
        If Export_DAGs.ManualDAGNetworkConfiguration_Yes Then
            ManualDAGNetworkConfiguration = "True"
        Else
            ManualDAGNetworkConfiguration = "False"
        End If
        If Export_DAGs.ReplayLagManagerEnabled_Yes Then
            ReplayLagManagerEnabled = "True"
        Else
            ReplayLagManagerEnabled = "False"
        End If
        DAGIps = Export_DAGs.PrimaryIPEntry.Value
        If NumSites > 1 Then
            DAGIps = DAGIps & "," & Export_DAGs.SecondaryIPEntry.Value
        End If

        'Write out export file
        DAGsExport.Name = ExportPath & DAGsFile
        DAGsExport.Number = FreeFile
        Open DAGsExport.Name For Output As #DAGsExport.Number
        Write #DAGsExport.Number, "DAGName", "DAGIps", "WitnessServer", "WitnessDir", "AltWitnessServer", "AltWitnessDir", "Site1Servers", "Site2Servers", "GC", "GC2", "DACMode", "MaximumActiveDatabasesSite1", "MaximumActiveDatabasesSite2", "AutoDagVolumesRootFolderPath", "AutoDagDatabasesRootFolderPath", "AutoDagDatabaseCopiesPerVolume", "ManualDagnetworkConfiguration", "ReplayLagManagerEnabled", "NetworkEncryption", "NetworkCompression", "ReplicationPort", "LogIsolation"
        'Write dummy record to file to ensure the file always has two or emore data lines
        '  This forces PowerShell to use an array to store the file contents
        Write #DAGsExport.Number, "SchemaVersion", CreateDAGDataVer, , , , , , , , , , , , , , , , , , , 0, "False"
        Write #DAGsExport.Number, DAGName, DAGIps, WitnessServer, WitnessDir, AltWitnessServer, AltWitnessDir, Site1Servers, Site2Servers, GC, GC2, DACMode, MaximumActiveDatabasesSite1, MaximumActiveDatabasesSite2, AutoDagVolumesRootFolderPath, AutoDagDatabasesRootFolderPath, AutoDagDatabaseCopiesPerVolume, ManualDAGNetworkConfiguration, ReplayLagManagerEnabled, NetworkEncryption, NetworkCompression, ReplicationPort, Isolation
        Close DAGsExport.Number
        x = MsgBox("DAG data file saved to the following location:" & vbCrLf & vbCrLf & DAGsExport.Name, _
            vbOKOnly, "Role Calculator - Export DAG List")
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub ExportDBMountList()
    Dim MountPointExport As FileType
    Dim RowNum As Integer
    Dim DB As String
    Dim ServerName As String
    Dim ServerIndex As Integer
    Dim x As Integer
    Dim WorkbookName As String
    Dim WorkbookFullName As String
    Dim Site, Server As Integer
    Dim VolumesRootPath As String
    Dim DatabasesRootPath As String
    Dim FileBuffer As String
    Dim StartDrive As String
    Dim DriveCount As Integer
    Dim Path As String
    Dim Isolation As String
    If DebugLevel > DebugMedium Then Call PushStack(35, "null")
    
    If Err.Number = 0 Then
        VolumesRootPath = "C:\ExchangeVolumes"
        DatabasesRootPath = "C:\ExchangeDatabases"
        
        If NumDataBases = 0 Then
            Call Config
        End If
        If errStatus = 0 Then
            If DBLogIsolation Then
                Isolation = "1"
            Else
                Isolation = "0"
            End If
            Export_Mount_Points.TextBox9 = ExportPath
            If DatabasesRootFolder = "" Then
                Export_Mount_Points.DatabasesRoot = DatabasesRootPath
            Else
                Export_Mount_Points.DatabasesRoot = DatabasesRootFolder
            End If
            Export_Mount_Points.VolumesRoot = VolumesRootPath
            Do
                Export_Mount_Points.Show
                If Export_Mount_Points.Okay.Value = True Then
                    ServerIndex = StartCol
                    ServerName = ThisWorkbook.Worksheets(strDistributionSheet).Cells(HeaderRow, ServerIndex).Value
                    If Dir(Export_Mount_Points.TextBox9 & MountPointsFile, vbNormal) > "" Then
                        x = MsgBox(Export_Mount_Points.TextBox9 & MountPointsFile & " already exists." & vbCrLf & vbCrLf & "Do you want to overwrite it?", vbYesNo, "Role Calculator - Export Mount Points List")
                    Else
                        x = vbYes
                    End If
                End If
            Loop Until (Export_Mount_Points.Okay.Value = True And x = vbYes) Or (Export_Mount_Points.Okay.Value = False)

            'This is already captured in GetInfo
            'NumDBPerVol = Range("'Volume Requirements'!NumDBPerVol").Value
            
            If Export_Mount_Points.Okay.Value Then
                ExportPath = Export_Mount_Points.TextBox9.Value
                StartDrive = Export_Mount_Points.FirstDrive
                DatabasesRootPath = Export_Mount_Points.DatabasesRoot
                DatabasesRootFolder = DatabasesRootPath
                VolumesRootPath = Export_Mount_Points.VolumesRoot
                MountPointExport.Name = ExportPath & MountPointsFile
                MountPointExport.Number = FreeFile
                Open MountPointExport.Name For Output As #MountPointExport.Number
                Write #MountPointExport.Number, "ServerName", "StartDrive", "DbPerVolume", "DbLogIsolation", "VolumesRootFolder", "DatabasesRootFolder", "DbMap"
                'Write dummy record to file to ensure the file always has two or emore data lines
                '  This forces PowerShell to use an array to store the file contents
                Write #MountPointExport.Number, "VersionNumber", DiskpartDataVer, , , , , ""
                
                For Site = 1 To NumSites
                    For Server = 1 To NumServers(Site)
                        DriveCount = 0
                        Path = ""
                        ServerIndex = StartCol - 1 + Server + ((MaxServers + 1) * (Site - 1))
                        ServerName = ThisWorkbook.Worksheets(strDistributionSheet).Cells(HeaderRow, ServerIndex).Value
                        For RowNum = StartRow To StartRow + NumDataBases - 1
                            If ThisWorkbook.Worksheets(strDistributionSheet).Cells(RowNum, ServerIndex).Value <> "" Then
                                Path = Path & ThisWorkbook.Worksheets(strDistributionSheet).Cells(RowNum, StartCol - 2).Value & ","
                                DriveCount = DriveCount + 1
                            End If
                        Next RowNum
                        Write #MountPointExport.Number, ServerName, StartDrive, NumDBPerVol, Isolation, VolumesRootPath, DatabasesRootPath, Left$(Path, Len(Path) - 1)
                    Next Server
                Next Site
                Close MountPointExport.Number
                x = MsgBox("Mountpoints data file saved to the following location:" & vbCrLf & vbCrLf & MountPointExport.Name, _
                    vbOKOnly, "Role Calculator - Export Mount Points List")
            End If
        End If
    Else
        x = MsgBox(errText, vbExclamation, "Role Calculator Error")
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub CheckFSW()
    If DebugLevel > DebugMedium Then Call PushStack(36, "null")
    ThisWorkbook.Worksheets(strDistributionSheet).Range("FSWStatus").Select
    If FileShareWitness Then
        If FSWLocation = 1 Then
            ActiveCell.FormulaR1C1 = "Witness is active in Primary site."
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("FSWprimary").OLEFormat.Object.Value = True
        End If
        If FSWLocation = 2 Then
            ActiveCell.FormulaR1C1 = "Witness is active in Secondary site."
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("FSWsecondary").OLEFormat.Object.Value = True
        End If
        If FSWLocation = 3 Then
            ActiveCell.FormulaR1C1 = "Witness is active in Third site."
            ThisWorkbook.Worksheets(strDistributionSheet).Shapes("FSWthird").OLEFormat.Object.Value = True
        End If
    Else
        ActiveCell.FormulaR1C1 = ""
    End If
    Call DAGStatus(1)
    ThisWorkbook.Worksheets(strDistributionSheet).Range("A1").Select
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Sub ExportScripts()
    Const Tags = 1
    Const NumberOfScripts = 1
    Const ScriptsName = 2
    Const NumberOfLines = 3
    Const Version = 4
    Const ScriptsDate = 5
    Const ScriptsText = 6
    Const FirstScript = 2
    Const ScriptsSheet = "Scripts"

'    Dim Script As FileType
    Dim Script As Object
    Dim fs As Object
    Dim FileName As String
    Dim ScriptNumber As Integer
    Dim x As Integer
    If DebugLevel > DebugMedium Then Call PushStack(37, "null")

    If Err.Number = 0 Then
        Set fs = CreateObject("Scripting.FileSystemObject")
    
        If NumDataBases = 0 Then
            Call Config
        End If
        If errStatus = 0 Then
            
            Export_Scripts.TextBox9 = ExportPath
            
            Export_Scripts.Show
            If Export_Scripts.Okay.Value Then
                ExportPath = Export_Scripts.TextBox9.Value
                For ScriptNumber = FirstScript To ThisWorkbook.Sheets(ScriptsSheet).Cells(NumberOfScripts, Tags + 1).Value + 1
                    FileName = ExportPath & ThisWorkbook.Sheets(ScriptsSheet).Cells(ScriptsName, ScriptNumber).Value
                    x = vbYes
                    If FileStatus(FileName) <> -53 Then
                        x = MsgBox(FileName & " already exists." & vbCrLf & vbCrLf & "Do you want to overwrite it?", vbYesNo, "Role Calculator - Export Scripts")
                    End If
                    If x = vbYes Then
                        Set Script = fs.CreateTextFile(FileName, True)
                        For x = ScriptsText To ScriptsText + ThisWorkbook.Sheets(ScriptsSheet).Cells(NumberOfLines, ScriptNumber).Value
                            Script.Writeline (ThisWorkbook.Sheets(ScriptsSheet).Cells(x, ScriptNumber).Value)
                        Next x
                        Script.Close
                    End If
                Next ScriptNumber
                x = MsgBox("Export Scripts saved to the following location:" & vbCrLf & vbCrLf & ExportPath, vbOKOnly, "Role Calculator - Export Scripts")
            End If
        End If
    Else
        x = MsgBox(errText, vbExclamation, "Role Calculator Error")
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Public Function FileStatus(ItemName As String) As Integer
    If DebugLevel > DebugMedium Then Call PushStack(38, ItemName)
    If Len(ItemName) > 0 Then
        On Error Resume Next
        Err.Clear
        FileStatus = GetAttr(ItemName)
        If Err.Number <> 0 Then
            FileStatus = -9998
            If Err.Number = 53 Then FileStatus = -53 'File not found or last directory not found
            If Err.Number = 76 Then FileStatus = -76 'Path not found
            Err.Clear
        End If
    Else
        FileStatus = -9999
    End If
    On Error GoTo 0
    If DebugLevel > DebugMedium Then Call PopStack
End Function

Function ToGlobal(sFormula As String) As String
    If DebugLevel > DebugMedium Then Call PushStack(39, sFormula)
    With Range("'Variables'!StringConversionArea")
        .Formula = sFormula
        ToGlobal = .FormulaLocal
        .ClearContents
    End With
    If DebugLevel > DebugMedium Then Call PopStack
End Function

Function IsEnUS() As Boolean
    If DebugLevel > DebugMedium Then Call PushStack(40, "null")
    If Application.International(xlCountrySetting) = USA Then
        IsEnUS = True
    Else
        IsEnUS = False
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Function

Function AppLangID() As Integer
    Dim msoLanguageSettings As LanguageSettings
    If DebugLevel > DebugMedium Then Call PushStack(41, "null")
    
    Set msoLanguageSettings = Application.LanguageSettings
    AppLangID = msoLanguageSettings.LanguageID(msoLanguageIDUI)
    If DebugLevel > DebugMedium Then Call PopStack
End Function

Sub DiskName(Target As Range, Name As String)
    If DebugLevel > DebugMedium Then Call PushStack(42, ";" & Name)

    Target.Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 90
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    ActiveCell.FormulaR1C1 = Name
    Target.Select
    With Selection.Font
        .Name = "Calibri"
        .FontStyle = "Regular"
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    If DebugLevel > DebugMedium Then Call PopStack
End Sub

Public Function Factor(NumToFactor As Integer, Index As Integer) As Integer
    Dim Trial As Integer
    Dim Found As Integer
    Dim Temp As Integer
    If DebugLevel > DebugMedium Then Call PushStack(43, Str(NumToFactor) & ";" & Str(Index))

    Found = 0
    Trial = 1
    Do
        Temp = NumToFactor Mod Trial
        If Temp = 0 Then
            Found = Found + 1
        End If
        Trial = Trial + 1
    Loop While (Trial <= NumToFactor) And (Found <> Index)
    If Found = Index Then
        Factor = Trial - 1
    Else
        If Index = -1 Then
            Factor = Found
        Else
            Factor = 0
        End If
    End If
    If DebugLevel > DebugMedium Then Call PopStack
End Function

Public Sub Trace(Location As String, Args As String, Optional Pointer As String)
    Dim t As String
    Dim d As String
    d = Date
    t = Time
    Write #TraceFile.Number, Location, Args, Pointer, d, t
End Sub

Public Sub StartTrace()
    Dim t As String
    Dim d As String
    d = Date
    t = Time

    TraceFile.Name = Range("'Variables'!varTraceFile").Value & ".txt"
    TraceFile.Number = FreeFile()
    If FileStatus(TraceFile.Name) <> -53 Then
        Open TraceFile.Name For Append As #TraceFile.Number
    Else
        Open TraceFile.Name For Output As #TraceFile.Number
    End If
    Write #TraceFile.Number, "StartTrace", d, t
End Sub

Public Sub EndTrace()
    Dim t As String
    Dim d As String
    d = Date
    t = Time

    Write #TraceFile.Number, "EndTrace", d, t
    Close TraceFile.Number
End Sub

Public Sub CheckTrace()
    Dim Check As Variant
    Check = Left(Range("'Variables'!varEnableTrace").Value, 1)
    If UCase(Check) = "Y" Then
        If EnableTrace = False Then
            Call StartTrace
            EnableTrace = True
        End If
        Call Trace("CheckTrace", "TraceEnabled")
    Else
        If EnableTrace Then
            Call Trace("CheckTrace", "TracePause")
            EnableTrace = False
            Call EndTrace
        End If
    End If
End Sub

Public Function GetDBperVolIndex(Index As Integer, Site As Integer) As Integer
    Dim Copies As Integer
    If DebugLevel > DebugHigh Then Call PushStack(47, Str(Index) & ";" & Str(Site))
    If Application.Calculation <> xlCalculationManual Then
        If ThisWorkbook.Sheets("Variables").Range("varSupportAutoReseed").Value = "Yes" Then
            If Site > 1 Then
                'Second Site
                If ThisWorkbook.Sheets("Input").Range("DedLaggedCopyServer").Value = "Yes" Then
                    Copies = ThisWorkbook.Sheets("Role Requirements").Range("calcNumDBCopyInSDC").Value
                Else
                    Copies = ThisWorkbook.Sheets("Role Requirements").Range("calcNumDBCopyInSDC").Value + ThisWorkbook.Sheets("Role Requirements").Range("calcNumLagCopyInSDC").Value
                End If
            Else
                'First Site
                If ThisWorkbook.Sheets("Input").Range("DedLaggedCopyServer").Value = "Yes" Then
                    Copies = ThisWorkbook.Sheets("Role Requirements").Range("calcNumDBCopyInPDC").Value
                Else
                    Copies = ThisWorkbook.Sheets("Role Requirements").Range("calcNumDBCopyInPDC").Value + ThisWorkbook.Sheets("Role Requirements").Range("calcNumLagCopyInPDC").Value
                End If
            End If
        Else
            Copies = 1
        End If
        GetDBperVolIndex = Copies * Index
        If Index = 0 Then
            GetDBperVolIndex = 1
        Else
            If Copies = 1 Then
                GetDBperVolIndex = GetDBperVolIndex + 1
            End If
        End If
        If GetDBperVolIndex > ThisWorkbook.Sheets("Variables").Range("varMaxDBperVolume").Value Then
            GetDBperVolIndex = 0
        End If
    End If
    If DebugLevel > DebugHigh Then Call PopStack
End Function

Public Sub RunTimer()
    Dim t As String
    Dim d As String
    d = Date
    t = Time

    If TimerFile.Number > 0 Then
        Write #TimerFile.Number, "  EndTime: ", t, vbCrLf
        Close TimerFile.Number
        TimerFile.Number = 0
    Else
        TimerFile.Name = "Timer.txt"
        TimerFile.Number = FreeFile()
        If FileStatus(TimerFile.Name) <> -53 Then
            Open TimerFile.Name For Append As #TimerFile.Number
        Else
            Open TimerFile.Name For Output As #TimerFile.Number
        End If
        Write #TimerFile.Number, "StartTime: ", t
    End If
End Sub

Sub Wait(Seconds As Variant)

    Dim Done As Variant
    
    Done = Timer + Seconds
    While Timer < Done
        DoEvents
    Wend
End Sub

Attribute VB_Name = "Module2"
Option Private Module

Public Sub PopStack()
    If StackPointer = 0 Then
        '
    Else
        'PopStack = Stack(StackPointer)
        If EnableTrace Then Call Trace(ProcNames(Stack(StackPointer)) & "-Exit", "", "-" & Trim(Str(StackPointer)))
        StackPointer = StackPointer - 1
    End If
End Sub

Public Sub PushStack(Proc As Integer, ArgList As String)
    If StackPointer < MaxInt Then
        StackPointer = StackPointer + 1
        Stack(StackPointer) = Proc
        If EnableTrace Then Call Trace(ProcNames(Proc) & "-Enter", ArgList, "+" & Trim(Str(StackPointer)))
    End If
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
'x = MsgBox("Distribution - Worksheet Activate")
    Call CheckTrace
    Call CheckRebuild
End Sub

Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    InputValuesChanged = False
End Sub
Public Sub Start()
    Call Worksheet_Change(ThisWorkbook.Sheets("Input").Range("A1"))
    Application.CalculateFull
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim StatusField As String
    Dim Site As Integer
    Dim fd As Integer
    Dim IsValid As Boolean

    Dim strX As String                              'Input variable to accept unvalidated user input
    Dim intX As Integer                             'Input variable to hold integer typed input
    Dim x As Integer                                'For loop variable
    'Dim y As Integer
    Dim ColumnPointer As Integer
    Dim Index As Integer
    Dim BaseIndex As Integer
    Dim Test As Range
    Dim bolCopyError As Boolean
    Call PushStack(44, Target.Worksheet.Name & "!R" & Target.Row & "C" & Target.Column)


'x = MsgBox("Input - Worksheet Change")
    If Not (Application.IsError(ThisWorkbook.Sheets("Role Requirements").Range("ValidationCheck"))) Then
        If ThisWorkbook.Sheets("Role Requirements").Range("ValidationCheck").Value <> True Then
            If SafeWorksheetChange Then     'If not already inside a change event
                Application.EnableEvents = False
                SafeWorksheetChange = False
                If (Target.Column <> Range("'Input'!FailureDomainStatusField").Column) Or (Target.Row <> Range("'Input'!FailureDomainStatusField").Row) Then  'Don't fire if just updating failure domain status field
                    InputValuesChanged = True
                    DirtyBit = False

'                    Set Test = Application.Intersect(thisworkbook.sheets("Input").Range("UseConfigWizard"), Target)
'                    If Not (Test Is Nothing) Then
'                        If thisworkbook.sheets("Input").Range("UseConfigWizard").Value = "Yes" Then
'                        DatacenterWizard.Show
'                        If DatacenterWizard.Okay.Value Then
'                            thisworkbook.sheets("Input").Range("numMBXServers") = DatacenterWizard.ServersDC1
'                            thisworkbook.sheets("Input").Range("NumDBCopies") = DatacenterWizard.CopiesDC1 + DatacenterWizard.CopiesDC2
'                            thisworkbook.sheets("Input").Range("NumDBCopiesSDC") = DatacenterWizard.CopiesDC2
'                            If DatacenterWizard.PrimaryZeroLag.Value = False Then
'                                If DatacenterWizard.SecondaryZeroLag.Value = False Then
'                                    thisworkbook.sheets("Input").Range("numLagDBCopies") = DatacenterWizard.LagCopiesDC1 + DatacenterWizard.LagCopiesDC2
'                                    thisworkbook.sheets("Input").Range("numLaggedCopiesSDC") = DatacenterWizard.LagCopiesDC2
'                                Else
'                                    thisworkbook.sheets("Input").Range("numLagDBCopies") = DatacenterWizard.LagCopiesDC1
'                                    thisworkbook.sheets("Input").Range("numLaggedCopiesSDC") = 0
'                                End If
'                            Else
'                                If DatacenterWizard.SecondaryZeroLag.Value = False Then
'                                    thisworkbook.sheets("Input").Range("numLagDBCopies") = DatacenterWizard.LagCopiesDC2
'                                    thisworkbook.sheets("Input").Range("numLaggedCopiesSDC") = DatacenterWizard.LagCopiesDC2
'                                Else
'                                    thisworkbook.sheets("Input").Range("numLagDBCopies") = 0
'                                    thisworkbook.sheets("Input").Range("numLaggedCopiesSDC") = 0
'                                End If
'                            End If
'                        End If
'                        End If
'                    End If
                    WANisUp(1) = True
                    WANisUp(2) = True
                    If ThisWorkbook.Sheets("Input").Range("HAOption").Value <> "Yes" Then
                        ThisWorkbook.Sheets("Distribution").Visible = 0
                    Else
                        ThisWorkbook.Sheets("Distribution").Visible = -1
                    End If
                    'When Failure Domains are disbaled set defaults for Failure Domains to whatever the calc is using for primary site
                    If UCase(Range("'Input'!FailureDomainsEnabled").Value) = "NO" Then
                        Range("'Input'!NumFailureDomainsPri").Value = 1
                        Range("'Input'!NumFailureDomainsSec").Value = 1
                        Range("'Input'!FD1ServerCountPri").Value = Range("'Input'!calcFailureDomainTargetServersDC1").Value
                        If LCase(ThisWorkbook.Sheets("Input").Range("DedLaggedCopyServer").Value) = "no" Or ThisWorkbook.Sheets("Volume Requirements").Range("VolArchitecture").Value = "Multiple DBs / Volume" Then
                            Range("'Input'!FD1CopyCountPri").Value = ThisWorkbook.Sheets("Role Requirements").Range("calcNumDBCopyInPDC").Value + ThisWorkbook.Sheets("Role Requirements").Range("calcNumLagCopyInPDC").Value
                            Range("'Input'!FD1CopyCountSec").Value = ThisWorkbook.Sheets("Role Requirements").Range("calcNumDBCopyInSDC").Value + ThisWorkbook.Sheets("Role Requirements").Range("calcNumLagCopyInSDC").Value
                        Else
                            Range("'Input'!FD1CopyCountPri").Value = ThisWorkbook.Sheets("Role Requirements").Range("calcNumDBCopyInPDC").Value
                            Range("'Input'!FD1CopyCountSec").Value = ThisWorkbook.Sheets("Role Requirements").Range("calcNumDBCopyInSDC").Value
                        End If
                        If Range("'Input'!calcFailureDomainTargetServersDC2").Value = "--" Then
                            Range("'Input'!FD1ServerCountSec").Value = 0
                        Else
                            Range("'Input'!FD1ServerCountSec").Value = Range("'Input'!calcFailureDomainTargetServersDC2").Value
                        End If
                        Range("'Input'!FD2ServerCountPri").Value = 0
                        Range("'Input'!FD3ServerCountPri").Value = 0
                        Range("'Input'!FD4ServerCountPri").Value = 0
                        Range("'Input'!FD5ServerCountPri").Value = 0
                        Range("'Input'!FD6ServerCountPri").Value = 0
                        Range("'Input'!FD7ServerCountPri").Value = 0
                        Range("'Input'!FD8ServerCountPri").Value = 0
                        Range("'Input'!FD2ServerCountSec").Value = 0
                        Range("'Input'!FD3ServerCountSec").Value = 0
                        Range("'Input'!FD4ServerCountSec").Value = 0
                        Range("'Input'!FD5ServerCountSec").Value = 0
                        Range("'Input'!FD6ServerCountSec").Value = 0
                        Range("'Input'!FD7ServerCountSec").Value = 0
                        Range("'Input'!FD8ServerCountSec").Value = 0
                        Range("'Input'!FD2CopyCountPri").Value = 0
                        Range("'Input'!FD3CopyCountPri").Value = 0
                        Range("'Input'!FD4CopyCountPri").Value = 0
                        Range("'Input'!FD5CopyCountPri").Value = 0
                        Range("'Input'!FD6CopyCountPri").Value = 0
                        Range("'Input'!FD7CopyCountPri").Value = 0
                        Range("'Input'!FD8CopyCountPri").Value = 0
                        Range("'Input'!FD2CopyCountSec").Value = 0
                        Range("'Input'!FD3CopyCountSec").Value = 0
                        Range("'Input'!FD4CopyCountSec").Value = 0
                        Range("'Input'!FD5CopyCountSec").Value = 0
                        Range("'Input'!FD6CopyCountSec").Value = 0
                        Range("'Input'!FD7CopyCountSec").Value = 0
                        Range("'Input'!FD8CopyCountSec").Value = 0
                    End If
                    FSWLocation = 1
                    'A/P
                    If ThisWorkbook.Sheets("Input").Range("SRModel").Value = ThisWorkbook.Sheets("Variables").Range("varSRModel")(1).Value Then
                        If ThisWorkbook.Sheets("Role Requirements").Range("calcMultipleDBVolume").Value = "Yes" Then
                            'thisworkbook.sheets("Input").Range("CustomDBperVol1").Value = NumCopies(1)
                            'thisworkbook.sheets("Input").Range("CustomDBperVol2").Value = NumCopies(1)
                            DiskGroup = ThisWorkbook.Sheets("Role Requirements").Range("calcNumAMBXServersDC1").Value
                        Else
'                            If thisworkbook.sheets("Variables").Range("varSupportAutoReseed").Value = "Yes" Then
'                                'DiskGroup = thisworkbook.sheets("Role Requirements").Range("calcNumAMBXServersDC1").Value * (thisworkbook.sheets("Input").Range("CustomDBperVol1").Value / NumCopies(1))
'                            Else
                                DiskGroup = 1
'                            End If
                        End If
                    End If
                    'A/A Single DAG MultipleDBVolume
                    If ThisWorkbook.Sheets("Input").Range("SRModel").Value = ThisWorkbook.Sheets("Variables").Range("varSRModel")(2).Value Then
                        FSWLocation = 3
                        If ThisWorkbook.Sheets("Input").Range("NumDBperVolOverride").Value = "Yes" Then 'DiskGroup = number of servers per DAG   DBperVol = copies per DAG
                            DiskGroup = ThisWorkbook.Sheets("Role Requirements").Range("calcNumAMBXServersDC1").Value + ThisWorkbook.Sheets("Role Requirements").Range("calcNumAMBXServersDC2").Value
                        Else 'DiskGroup = number of servers per site   DBperVol = copies per site
                            DiskGroup = ThisWorkbook.Sheets("Role Requirements").Range("calcNumAMBXServersDC1").Value
                        End If
                    End If
                    'A/A Multiple DAG
                    If ThisWorkbook.Sheets("Input").Range("SRModel").Value = ThisWorkbook.Sheets("Variables").Range("varSRModel")(3).Value Then
                        If ThisWorkbook.Sheets("Role Requirements").Range("calcMultipleDBVolume").Value = "Yes" Then
                            'thisworkbook.sheets("Input").Range("CustomDBperVol1").Value = NumCopies(1)
                            'thisworkbook.sheets("Input").Range("CustomDBperVol2").Value = NumCopies(1)
                            DiskGroup = ThisWorkbook.Sheets("Role Requirements").Range("calcNumAMBXServersDC1").Value
                        Else
'                            If thisworkbook.sheets("Variables").Range("varSupportAutoReseed").Value = "Yes" Then
'                                DiskGroup = thisworkbook.sheets("Role Requirements").Range("calcNumAMBXServersDC1").Value * (thisworkbook.sheets("Input").Range("CustomDBperVol1").Value / NumCopies(1))
'                            Else
                                DiskGroup = 1
'                            End If
                        End If
                    End If
                    ThisWorkbook.Sheets("Variables").Range("varDiskGroup").Value = DiskGroup
                    
        ' VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV This now the first call to GetInfo.  This call was originally done inside the Config routine.
        '            Call GetInfo
        
        'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV Taken from GetInfo  (Changes here should be mirrored in GetInfo) VVVVVVVVVVVVVVVVVVVVVVVV
                    
                    strX$ = Range("'Input'!ReplayLagHours").Value
                    intX = CInt(strX$)
                    x = intX \ 24
                    y = intX Mod 24
                    ReplayLagTime = Trim(Str(x)) & "." & Trim(Str(y)) & ":00:00"
                    strX$ = Range("'Input'!TruncationLagHours").Value
                    intX = CInt(strX$)
                    x = intX \ 24
                    y = intX Mod 24
                    TruncationLagTime = Trim(Str(x)) & "." & Trim(Str(y)) & ":00:00"
                    strX$ = Range("'Role Requirements'!DBLogIsolation").Value
                    If strX$ = "Yes" Then
                        DBLogIsolation = True
                    Else
                        DBLogIsolation = False
                    End If
                    
                    strX$ = ThisWorkbook.Sheets("Role Requirements").Range("RecNumDBs").Value
                    intX = CInt(strX$)
                    NumDataBases = intX
                    '
                    If ThisWorkbook.Sheets("Input").Range("SiteResilienceEnabled").Value = "Yes" And ThisWorkbook.Sheets("Input").Range("numDBCopiesSDC").Value > 0 And ThisWorkbook.Sheets("Input").Range("HAOption").Value = "Yes" Then
                        SiteResilience = "Yes"
                    Else
                        SiteResilience = "No"
                    End If
                    If (SiteResilience = "Yes") Then
                        NumSites = 2
                    Else
                        NumSites = 1
                    End If

                    strX$ = ThisWorkbook.Sheets("Volume Requirements").Range("NumDBPerVol").Value
                    intX = CInt(strX$)
                    NumDBPerVol = intX
                    If NumDBPerVol > 1 Then
                        MultipleDBVolume = True
                    Else
                        MultipleDBVolume = False
                    End If

                    '
                    ' Get DR Site Details
                    '
                    arrSiteInfo(2, SiteName) = "Secondary"
                    arrSiteInfo(2, IndexArrFD) = MaxFailureDomains - 1
                    If (NumSites > 1) Then
                        strX$ = ThisWorkbook.Sheets("Role Requirements").Range("calcNumDBCopyInSDC").Value ' DR
                        intX = CInt(strX$)
                        NumCopies(2) = intX
                        arrSiteInfo(2, CopyCount) = intX
        '                If DistributedLag(2) Then arrSiteInfo(2, CopyCount) = arrSiteInfo(2, CopyCount) + NumLagCopies(2)
                        strX$ = ThisWorkbook.Sheets("Role Requirements").Range("NumDAGServersSDC").Value ' DR
                        intX = CInt(strX$)
                        NumServers(2) = intX
                        arrSiteInfo(2, NumMembers) = intX
                    Else
                        NumCopies(2) = 0
                        arrSiteInfo(2, CopyCount) = 0
                        NumServers(2) = 0
                        arrSiteInfo(2, NumMembers) = 0
                    End If
                
                    '
                    ' Get Production Details
                    '
                    arrSiteInfo(1, SiteName) = "Primary"
                    arrSiteInfo(1, IndexArrFD) = MaxFailureDomains
                    strX$ = ThisWorkbook.Sheets("Role Requirements").Range("calcNumDBCopyInPDC").Value ' Prod
                    intX = CInt(strX$)
                    NumCopies(1) = intX
                    arrSiteInfo(1, CopyCount) = intX
        '            If DistributedLag(1) Then arrSiteInfo(1, CopyCount) = arrSiteInfo(1, CopyCount) + NumLagCopies(1)
                    strX$ = ThisWorkbook.Sheets("Role Requirements").Range("NumDAGServersPDC").Value ' Prod
                    intX = CInt(strX$)
                    NumServers(1) = intX
                    arrSiteInfo(1, NumMembers) = intX
                    
                    'Get total number of servers in DAG and determine if FSW is required
                    TTLServers = 0
                    For x = 1 To NumSites
                        TTLServers = TTLServers + NumServers(x)
                    Next x
                    If TTLServers \ 2 = TTLServers / 2 Then
                        FileShareWitness = True
                    Else
                        FileShareWitness = False
                    End If
                    If TTLServers < 1 Or TTLServers > MaxServers Then
                        errStatus = 7
                        errText = "Total number of servers must be greater than or equal to 1 and less than or equal to " & MaxServers
                    End If
        
                    'Get Lag copy information
                    strX$ = ThisWorkbook.Sheets("Input").Range("numLagDBCopies").Value
                    NumLagCopies(1) = CInt(strX$)
                    If NumLagCopies(1) = 0 Then
                        NumLagCopies(2) = 0
                    Else
                        strX$ = ThisWorkbook.Sheets("Input").Range("numLaggedCopiesSDC").Value
                        NumLagCopies(2) = CInt(strX$)
                        NumLagCopies(1) = NumLagCopies(1) - NumLagCopies(2)
                    End If
                    
                    'If not use dedicated lag server then include lag copies in calulation
                    If LCase(ThisWorkbook.Sheets("Input").Range("DedLaggedCopyServer").Value) = "no" Or ThisWorkbook.Sheets("Volume Requirements").Range("VolArchitecture").Value = "Multiple DBs / Volume" Then
                        For x = 1 To MaxSites
                            If NumLagCopies(x) <> 0 Then
                                NumCopies(x) = NumCopies(x) + NumLagCopies(x)
                                DistributedLag(x) = True
                            Else
                                DistributedLag(x) = False
                            End If
                        Next x
                    Else
                        For x = 1 To MaxSites
                            DistributedLag(x) = False
                        Next x
                    End If
        
                    'Capture basic failure domain data from Input worksheet
                    NumFailureDomains(1) = ThisWorkbook.Sheets("Input").Range("NumFailureDomainsPri").Value
                    NumFailureDomains(2) = ThisWorkbook.Sheets("Input").Range("NumFailureDomainsSec").Value
                    NumFailureDomains(Summary) = NumFailureDomains(1) + NumFailureDomains(2)
                    arrSiteInfo(1, FDCount) = ThisWorkbook.Sheets("Input").Range("NumFailureDomainsPri").Value
                    arrSiteInfo(2, FDCount) = ThisWorkbook.Sheets("Input").Range("NumFailureDomainsSec").Value
                    arrSiteInfo(Summary, FDCount) = arrSiteInfo(1, FDCount) + arrSiteInfo(2, FDCount)
        
                    FDTable(1) = ThisWorkbook.Sheets("Input").Range("FDDefPri").Value
                    FDTable(2) = ThisWorkbook.Sheets("Input").Range("FDDefSec").Value
        
                    'Populate arrFDControl with information about each failure domain
                    ColumnPointer = 1
                    Erase arrFDControl
                    For Site = 1 To NumSites
                        BaseIndex = 0
                        arrFDControl(Site, Summary, ptrFailureDomains) = ColumnPointer
                        ColumnPointer = ColumnPointer + 1
                        For Index = 1 To NumFailureDomains(Site)
                            arrFDControl(Site, Index, CopyCount) = FDTable(Site)(Index, cntCopies)
                            arrFDControl(Site, Index, ptrFailureDomains) = ColumnPointer
                            arrFDControl(Site, Index, NumMembers) = FDTable(Site)(Index, cntServers)
                            arrFDControl(Site, Index, FDBase) = BaseIndex
                            ColumnPointer = ColumnPointer + FDTable(Site)(Index, cntServers)
                            arrFDControl(Site, Summary, CopyCount) = arrFDControl(Site, Summary, CopyCount) + FDTable(Site)(Index, cntCopies)
                            arrFDControl(Site, Summary, NumMembers) = arrFDControl(Site, Summary, NumMembers) + FDTable(Site)(Index, cntServers)
                            If FDTable(Site)(Index, cntServers) = 0 Then arrFDControl(Site, Summary, NumMembers) = MaxServers + 1
                            BaseIndex = BaseIndex + arrFDControl(Site, Index, NumMembers)
                        Next Index
                    Next Site
        '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Taken from GetInfo  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
        
                    StatusField = ""
                    IsValid = True
                    'Process second site if site resilience is enabled
                    If LCase(Range("'Input'!SiteResilienceEnabled").Value) = "yes" Then
                        Site = 2
                        bolCopyError = False
                        If (Range("'Input'!FD1ServerCountSec").Value <> 0) And (Range("'Input'!FD1CopyCountSec").Value = 0) Then bolCopyError = True
                        If (Range("'Input'!FD2ServerCountSec").Value <> 0) And (Range("'Input'!FD2CopyCountSec").Value = 0) Then bolCopyError = True
                        If (Range("'Input'!FD3ServerCountSec").Value <> 0) And (Range("'Input'!FD3CopyCountSec").Value = 0) Then bolCopyError = True
                        If (Range("'Input'!FD4ServerCountSec").Value <> 0) And (Range("'Input'!FD4CopyCountSec").Value = 0) Then bolCopyError = True
                        If (Range("'Input'!FD5ServerCountSec").Value <> 0) And (Range("'Input'!FD5CopyCountSec").Value = 0) Then bolCopyError = True
                        If (Range("'Input'!FD6ServerCountSec").Value <> 0) And (Range("'Input'!FD6CopyCountSec").Value = 0) Then bolCopyError = True
                        If (Range("'Input'!FD7ServerCountSec").Value <> 0) And (Range("'Input'!FD7CopyCountSec").Value = 0) Then bolCopyError = True
                        If (Range("'Input'!FD8ServerCountSec").Value <> 0) And (Range("'Input'!FD8CopyCountSec").Value = 0) Then bolCopyError = True
                        'All defined failure domains must have at least 1 copy assigned
                        If bolCopyError Then
                            IsValid = False
                            StatusField = StatusField + "A failure domain in the " & arrSiteInfo(Site, SiteName) & " datacenter has servers assigned but no copies assigned.  "
                        End If
                        'Limit the number of failure domains in a site
                        If (NumFailureDomains(Site) > NumServers(Site) / 2 + 0.5) Then
                            IsValid = False
                            StatusField = StatusField + "The " & arrSiteInfo(Site, SiteName) & " datacenter has " & NumFailureDomains(Site) & " servers and therefore cannot have no more than " & NumServers(Site) / 2 & " failure domains.  "
                        End If
                        'Verify the number of servers assigned to all site failure domains = the number of servers assigned to site at top of Input sheet
                        If (arrFDControl(Site, Summary, NumMembers) <> NumServers(Site)) Then
                            IsValid = False
                            StatusField = StatusField + "The number of " & arrSiteInfo(Site, SiteName) & " datacenter servers assigned to failure domains does not equal the number of servers in the " & arrSiteInfo(Site, SiteName) & " datacenter.  "
                        End If
                        'Verify the number of db copies assigned to all site failure domains = the number of copies assigned at top of Input sheet
                        If (arrFDControl(Site, Summary, CopyCount) <> Range("'Input'!calcFailureDomainTargetCopiesDC2").Value) Then
                            IsValid = False
                            StatusField = StatusField + "The number of " & arrSiteInfo(Site, SiteName) & " datacenter database copies assigned to failure domains does not equal the number of copies in the " & arrSiteInfo(Site, SiteName) & " datacenter.  "
                        End If
                        'Verify the number of copies assigned to a failure domain does not exceed the number of servers assigned to the failure domain
                            For fd = 1 To NumFailureDomains(Site)
                                If (NumCopies(Site) / NumFailureDomains(Site) > arrFDControl(Site, fd, NumMembers)) Then
                                    IsValid = False
                                    StatusField = StatusField + "There are " & NumCopies(Site) / NumFailureDomains(Site) & " database copies assigned to failure domain " & fd & " of the " & arrSiteInfo(Site, SiteName) & " datacenter but only " & arrFDControl(Site, fd, NumMembers) & " servers in the failure domain.  "
                                End If
                            Next fd
                    End If
                    'Process first site
                    Site = 1
                    bolCopyError = False
                    If (Range("'Input'!FD1ServerCountPri").Value <> 0) And (Range("'Input'!FD1CopyCountPri").Value = 0) Then bolCopyError = True
                    If (Range("'Input'!FD2ServerCountPri").Value <> 0) And (Range("'Input'!FD2CopyCountPri").Value = 0) Then bolCopyError = True
                    If (Range("'Input'!FD3ServerCountPri").Value <> 0) And (Range("'Input'!FD3CopyCountPri").Value = 0) Then bolCopyError = True
                    If (Range("'Input'!FD4ServerCountPri").Value <> 0) And (Range("'Input'!FD4CopyCountPri").Value = 0) Then bolCopyError = True
                    If (Range("'Input'!FD5ServerCountPri").Value <> 0) And (Range("'Input'!FD5CopyCountPri").Value = 0) Then bolCopyError = True
                    If (Range("'Input'!FD6ServerCountPri").Value <> 0) And (Range("'Input'!FD6CopyCountPri").Value = 0) Then bolCopyError = True
                    If (Range("'Input'!FD7ServerCountPri").Value <> 0) And (Range("'Input'!FD7CopyCountPri").Value = 0) Then bolCopyError = True
                    If (Range("'Input'!FD8ServerCountPri").Value <> 0) And (Range("'Input'!FD8CopyCountPri").Value = 0) Then bolCopyError = True
                        'All defined failure domains must have at least 1 copy assigned
                    If bolCopyError Then
                        IsValid = False
                        StatusField = StatusField + "A failure domain in the " & arrSiteInfo(Site, SiteName) & " datacenter has servers assigned but no copies assigned.  "
                    End If
                    'Limit the number of failure domains in a site
                    If (NumFailureDomains(Site) > NumServers(Site) / 2 + 0.5) Then
                        IsValid = False
                        StatusField = StatusField + "The " & arrSiteInfo(Site, SiteName) & " datacenter has " & NumFailureDomains(Site) & " servers and therefore cannot have no more than " & NumServers(Site) / 2 & " failure domains.  "
                    End If
                    'Verify the number of servers assigned to all site failure domains = the number of servers assigned to site at top of Input sheet
                    If (arrFDControl(Site, Summary, NumMembers) <> NumServers(Site)) Then
                        IsValid = False
                        StatusField = StatusField + "The number of " & arrSiteInfo(Site, SiteName) & " datacenter servers assigned to failure domains does not equal the number of servers in the " & arrSiteInfo(Site, SiteName) & " datacenter.  "
                    End If
                    'Verify the number of db copies assigned to all site failure domains = the number of copies assigned at top of Input sheet
                    If (arrFDControl(Site, Summary, CopyCount) <> Range("'Input'!calcFailureDomainTargetCopiesDC1").Value) Then
                        IsValid = False
                        StatusField = StatusField + "The number of " & arrSiteInfo(Site, SiteName) & " datacenter database copies assigned to failure domains does not equal the number of copies in the " & arrSiteInfo(Site, SiteName) & " datacenter.  "
                    End If
                    'Verify the number of copies assigned to a failure domain does not exceed the number of servers assigned to the failure domain
                    For fd = 1 To NumFailureDomains(Site)
                        If (NumCopies(Site) / NumFailureDomains(Site) > arrFDControl(Site, fd, NumMembers)) Then
                            IsValid = False
                            StatusField = StatusField + "There are " & NumCopies(Site) / NumFailureDomains(Site) & " database copies assigned to failure domain " & fd & " of the " & arrSiteInfo(Site, SiteName) & " datacenter but only " & arrFDControl(Site, fd, NumMembers) & " servers in the failure domain.  "
                        End If
                    Next fd
                
                    If IsValid Then StatusField = ThisWorkbook.Sheets("Variables").Range("'Variables'!varStatusOK_FD").Value
                    Range("'Input'!FailureDomainStatusField").Value = StatusField
                End If
                If LCase(ThisWorkbook.Sheets("Variables").Range("varWizardConfiguration").Value) = "yes" Then
                    ThisWorkbook.Sheets("Variables").Range("varWizardTamperLock").Value = "Modified"
                End If
                SafeWorksheetChange = True
                Application.EnableEvents = True
            End If
        End If
    End If
    Call PopStack
End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Deactivate()
    DebugLevel = ThisWorkbook.Sheets("Variables").Range("varDebugLevel").Value
    Call CheckTrace
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    Range("'Variables'!varEnableTrace").Value = "N"
    ThisWorkbook.Worksheets(strInputSheet).Activate
End Sub

Private Sub Workbook_Open()
    ' Waste time to allow Excel to fully open
    Dim Done As Variant
    Done = Timer + 1
    While Timer < Done
        DoEvents
    Wend

    bolInConfig = False
    bolInGetInfo = False
    Me.ForceFullCalculation = False
    InputValuesChanged = False
    bolDoneOnce = False
    SafeWorksheetChange = True
    DirtyBit = True
    DebugLevel = ThisWorkbook.Sheets("Variables").Range("varDebugLevel").Value

    ProcNames(1) = "Run_Spread"
    ProcNames(2) = "Spread2"
    ProcNames(3) = "Show_Spread2"
    ProcNames(4) = "ActiveActive"
    ProcNames(5) = "FinalDistribution"
    ProcNames(6) = "MarkLagged"
    ProcNames(7) = "InValidFD"
    ProcNames(8) = "RegExpReplace"
    ProcNames(9) = "CheckDAGName"
    ProcNames(10) = "CheckServerName"
    ProcNames(11) = "Config"
    ProcNames(12) = "StorageCalc"
    ProcNames(13) = "GetInfo"
    ProcNames(14) = "ChangeSiteStatus"
    ProcNames(15) = "IsSecSiteActive"
    ProcNames(16) = "FailServer"
    ProcNames(17) = "DAGStatus"
    ProcNames(18) = "Build_Sheet"
    ProcNames(19) = "Build_Table"
    ProcNames(20) = "CreateOptionButton"
    ProcNames(21) = "CreateGroupBox"
    ProcNames(22) = "CreateButton"
    ProcNames(23) = "DeleteButton"
    ProcNames(24) = "GetCol"
    ProcNames(25) = "ClearArea"
    ProcNames(26) = "SetFormat"
    ProcNames(27) = "GetServer_org"
    ProcNames(28) = "GetServer"
    ProcNames(29) = "GetFailureDomain"
    ProcNames(30) = "CheckRebuild"
    ProcNames(31) = "CheckSiteActivation"
    ProcNames(32) = "ExportDBCopyList"
    ProcNames(33) = "ExportDBPrimaryList"
    ProcNames(34) = "ExportDAGList"
    ProcNames(35) = "ExportDBMountList"
    ProcNames(36) = "CheckFSW"
    ProcNames(37) = "ExportScripts"
    ProcNames(38) = "FileStatus"
    ProcNames(39) = "ToGlobal"
    ProcNames(40) = "IsEnUS"
    ProcNames(41) = "AppLangID"
    ProcNames(42) = "DiskName"
    ProcNames(43) = "Factor"
    ProcNames(44) = "Input_Worksheet_Change"
    ProcNames(45) = "ChangeFSW"
    ProcNames(46) = "FailWAN"
    ProcNames(47) = "GetDBperVolIndex"
    ProcNames(48) = ""
    ProcNames(49) = ""
    ProcNames(50) = ""

    Call Sheet2.Start
End Sub


' InQuest injected base64 decoded content
' UUUUUUUUUUUUUUUUUUUUUUUUUUUUUU
' UUUUUUUUUUUUUUUUUUUUUUUUU
' UUUUUUUUUUUUUUUUUUUUUUUUUU
' UUUUUUUUUUUUUUUUUU
' t*'~(.

INQUEST-PP=macro
