Attribute VB_Name = "Add_Sub_Supplier"
Attribute VB_Base = "0{6CEBEBFB-0831-4CBE-B575-D5AF2FC72FDF}{72005BC3-B91D-4EF0-A955-875F45681F23}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'** Autor: Nathalie Serban**

'Add Sub Supplier
Private Sub CommandButton1_Click()

Worksheets("Sub-Supplier-Tree Sketched").Unprotect ("trwdalphi19731408")

Dim tier As String
Dim col As Long
Dim i As Long
Dim rng As Range
Dim Adr, SpaBu As String
Dim letzteZeile As Long
Dim ws As Worksheet
Dim ws1 As Worksheet

Set ws = Worksheets("Sub-Supplier-Tree Sketched")
Set ws1 = Worksheets("Hilfstabelle")
 
Dim SpaBuVor As String
Dim Adr2 As String

On Error Resume Next

tier = ComboBox1.Value

Set rng = ActiveSheet.Rows("2:2").Find(tier)
Adr = rng.Address
col = rng.Column

 'Ermittlen des Spaltenbuchstabens
      SpaBu = Mid(Adr, 2, InStr(2, Adr, "$") - 2)
      
Dim spalteAusblenden As Range

    'Letzte Zeile bestimmen und gibt an, nach wieviel Zellen die n|fffd|chste Tabelle anfangen soll
            letzteZeile = ws.Range(SpaBu & "1048576").End(xlUp).Row

'MsgBox letzteZeile
'MsgBox col

'Falls es der erste Sub Supplier im Tier x ist, dann erst bei der dritten Zeile unter Tier x anfangen,
'ansonsten 6 Zeilen darunter
If letzteZeile <= 2 Then
    'Kopiert Sub Supplier 1 von Tier 1
        ws1.Range("D10:G19").Copy Destination:=ws.Cells(letzteZeile + 3, col)
        ws.Cells(letzteZeile + 3, col).PasteSpecial Paste:=xlPasteAllUsingSourceTheme
        
        Else
        ws1.Range("D10:G19").Copy Destination:=ws.Cells(letzteZeile + 6, col)
        ws.Cells(letzteZeile + 2, col).PasteSpecial Paste:=xlPasteAllUsingSourceTheme
End If

'Spalte mit Berechnung ausblenden
'Falls direkt unter Tier x, dann eine SPalte neben der letzten Spalte der letzten Zeile ausblenden, sonst 2 Spalten daneben
If letzteZeile = 2 Then
ws.Cells(letzteZeile, col).Offset(0, 1).EntireColumn.Hidden = True
Else
ws.Cells(letzteZeile, col).Offset(0, 2).EntireColumn.Hidden = True
'Zeilen mit Berechnung ausblenden
ws.Cells(letzteZeile, col).Offset(1, 0).EntireRow.Hidden = True
ws.Cells(letzteZeile, col).Offset(2, 0).EntireRow.Hidden = True
ws.Cells(letzteZeile, col).Offset(3, 0).EntireRow.Hidden = True
ws.Cells(letzteZeile, col).Offset(4, 0).EntireRow.Hidden = True
End If

'MsgBox "Notice: >Risk Decided< has to be filled in!", vbOKOnly + vbInformation

Application.ThisWorkbook.RefreshAll

Application.CutCopyMode = False
         
Worksheets("Sub-Supplier-Tree Sketched").Protect ("trwdalphi19731408"), DrawingObjects:=False, Contents:=True, Scenarios:= _
        True, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True


'Formular schlie|fffd|en
Unload Me

End Sub

'** Autor: Nathalie Serban**

Private Sub UserForm_Initialize()
Dim letzteZeile As Integer
letzteZeile = Worksheets("Hilfstabelle").Cells(Rows.Count, 1).End(xlUp).Row

Dim i As Integer

'Combobox wird bef|fffd|llt mit Werten in Spalte 1 ab Zeile 10 von Sheet "Hilfstabelle"

With Me.ComboBox1
  For i = 10 To letzteZeile
    .AddItem Worksheets("Hilfstabelle").Cells(i, 1).Value
  Next
End With

End Sub
Attribute VB_Name = "AddingComment"
'**Autor: Nathalie Serban **
'Add comment, falls yellow oder red, dann ist Kommentar in Spalte U zwingend.
'Die erste If-Abfrage verhindert, das bestehende Kommentare

'Aufruf bei Compliance Matrix : Private Sub Worksheet_Activate();
'Private Sub Worksheet_SelectionChange(ByVal Target As Range

Sub Add_Comment()

LastRow = ActiveSheet.Cells(Rows.Count, 18).End(xlUp).Row

For i = 10 To LastRow
    If Range("U" & i) = "" Then
        If Range("R" & i) = "yellow" Then
            Range("U" & i) = "Please enter comment!"
        End If
        If Range("R" & i) = "red" Then
            Range("U" & i) = "Please enter comment!"
        End If
    End If

Next i

End Sub
Attribute VB_Name = "Boxenausblenden"
Option Explicit

Sub GroupBoxesInvisible()
    Dim grpBox As GroupBox
    For Each grpBox In ActiveSheet.GroupBoxes
        grpBox.Visible = False
    Next
End Sub

Attribute VB_Name = "Buttons"
'Option Explicit

'Sub Buttons()

'Letzte Zeile bestimmen und gibt an, nach wieviel Zellen die n|fffd|chste Tabelle anfangen soll
'          letzteZeile = .Range("S1048576").End(xlUp).Row + 7

            
'Dim NewButton As Object

'   Set NewButton = Tabelle1.Buttons.Add(150, 1, 40, 20)
'       NewButton.Caption = ""
       
       
       
'    NewButton.OnAction = "Button_Next_Click"


'      .Buttons.Add(291.75, 295.5, 21, 65.25).Text = ""

'End Sub
Attribute VB_Name = "Connection"
'Option Explicit
'
''** Autor: Nathalie Serban **
'Sub schaltflaeche_verbinden()
'
''Falls B4 Leer ist, schreibe hier Position und Name rein, ansonsten in C4 und C5
'If Worksheets("Hilfstabelle").Range("B4").Value = "" Then
''Position
'    Worksheets("Hilfstabelle").Range("B4").Value = Worksheets("Tabelle1").Shapes(Application.Caller).TopLeftCell.Address
'    Worksheets("Hilfstabelle").Range("B5").Value = Worksheets("Tabelle1").Shapes(Application.Caller).Name
'Else
''Position
'Worksheets("Hilfstabelle").Range("C4").Value = Worksheets("Tabelle1").Shapes(Application.Caller).TopLeftCell.Address
''Name
'Worksheets("Hilfstabelle").Range("C5").Value = Worksheets("Tabelle1").Shapes(Application.Caller).Name
'End If
'
'If Worksheets("Hilfstabelle").Range("B4").Value <> 0 And Worksheets("Hilfstabelle").Range("C4").Value <> 0 Then
'
'Call connection_abfrage
'End If
'
'
'End Sub

''** Autor: Nathalie Serban **
''Abfrage, ob man die beiden verbinden m|fffd|chte, ja --> Zeichne Linie, nein--> Abbruch
'Sub connection_abfrage()
'If MsgBox("Would you like to connect the suppliers?", vbYesNo) = vbYes Then
'Call connection_zeichnen
'Else
'' l|fffd|sche Inhalt
'Worksheets("Hilfstabelle").Range("B4").Value = ""
'Worksheets("Hilfstabelle").Range("B5").Value = ""
'Worksheets("Hilfstabelle").Range("C4").Value = ""
'Worksheets("Hilfstabelle").Range("C5").Value = ""
'End If
'End Sub
'
''** Autor: Nathalie Serban **
'Sub connection_zeichnen()
'
'Dim nameGeklickteSchaltfl|fffd|che As String
'Dim nameVerkn|fffd|fungSchaltfl|fffd|che As String
'
'nameGeklickteSchaltfl|fffd|che = Worksheets("Hilfstabelle").Range("B5").Value
'nameVerkn|fffd|fungSchaltfl|fffd|che = Worksheets("Hilfstabelle").Range("C5").Value
'
'Worksheets("Tabelle1").Shapes.AddConnector(msoConnectorStraight, 0, 0, 0, 0).Select
'    Selection.ShapeRange.ConnectorFormat.EndConnect Worksheets("Tabelle1").Shapes(nameGeklickteSchaltfl|fffd|che) _
'        , 2
'
'Selection.ShapeRange.ConnectorFormat.BeginConnect Worksheets("Tabelle1").Shapes( _
'        nameVerkn|fffd|fungSchaltfl|fffd|che), 4
'
'Worksheets("Tabelle1").Shapes(nameGeklickteSchaltfl|fffd|che).Visible = False
'Worksheets("Tabelle1").Shapes(nameVerkn|fffd|fungSchaltfl|fffd|che).Visible = False
'
''l|fffd|sche Inhalt
'Worksheets("Hilfstabelle").Range("B4").Value = ""
'Worksheets("Hilfstabelle").Range("B5").Value = ""
'Worksheets("Hilfstabelle").Range("C4").Value = ""
'Worksheets("Hilfstabelle").Range("C5").Value = ""
'
'End Sub
'



Attribute VB_Name = "Connection_Beispiel"
Attribute VB_Base = "0{3265BA79-9F5A-40B3-AC38-6AD2C6EB304D}{1EF24EB6-ED0B-49E8-B512-331BFC74F38E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton1_Click()
Unload Connection_Beispiel
End Sub

Private Sub Image1_Click()

End Sub

Private Sub Image2_Click()

End Sub

Private Sub TextBox1_Change()

End Sub

Private Sub TextBox2_Change()

End Sub

Private Sub TextBox3_Change()

End Sub
Attribute VB_Name = "DeleteLastTier"
Option Explicit

Attribute VB_Name = "Delete_Sub_Supplier"
Attribute VB_Base = "0{F2D36A9A-2277-4A96-9AC2-3A65BC4A7159}{E9B7A1D0-1D29-485D-B3B9-C9041B59A172}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Option Explicit

'** Autor: Nathalie Serban **

Private Sub Delete_Sub_Supplier_Click()

Worksheets("Sub-Supplier-Tree Sketched").Unprotect ("trwdalphi19731408")
Dim tier As String
Dim col As Long
Dim i As Long
Dim rng As Range
Dim Adr, SpaBu As String
Dim letzteZeile As Long
Dim ws As Worksheet
Dim ws1 As Worksheet
Dim rngShapes As Range
Dim shp As Shape

Set ws = Worksheets("Sub-Supplier-Tree Sketched")
Set ws1 = Worksheets("Hilfstabelle")

Dim Adr2 As String

On Error Resume Next

tier = ComboBox1.Value
Set rng = ws.Rows("2:2").Find(tier)
Adr = rng.Address
col = rng.Column

 'Ermittlen des Spaltenbuchstabens
      SpaBu = Mid(Adr, 2, InStr(2, Adr, "$") - 2)

    'Letzte Zeile bestimmen
            letzteZeile = ws.Range(SpaBu & "1048576").End(xlUp).Row
            
'MsgBox SpaBu
'MsgBox letzteZeile
'MsgBox col


If MsgBox("Do you want to delete the last sub-supplier in " & tier & " with its content?", vbYesNo + vbQuestion) = vbYes Then

'Ausgew|fffd|hlter Bereich markieren (immer der letzte)
Dim letzterBereich As Range
letzterBereich = ws.Cells(letzteZeile, col).Offset(-4, 0).Resize(5, 4)
letzterBereich.Select

ws.Cells(letzteZeile, col).Offset(-4, 0).Resize(5, 4).Select

'Shapes entfernen
Set rngShapes = Selection
For Each shp In ws.Shapes
If Not Intersect(shp.TopLeftCell, rngShapes) Is Nothing Then
shp.Delete
End If
Next shp


'Berechnung l|fffd|schen
ws.Cells(letzteZeile, col).Resize(6, 4).Clear



'Inhalt /Rahmen entfernen
ws.Cells(letzteZeile, col).Offset(-4, 0).Resize(5, 4).Clear
'Formular schlie|fffd|en
Unload Me

Else
'nichts machen
End If

Application.ThisWorkbook.RefreshAll

ws.Range("T5").Select

Worksheets("Sub-Supplier-Tree Sketched").Protect ("trwdalphi19731408"), DrawingObjects:=False, Contents:=True, Scenarios:= _
        True, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True

End Sub

'** Autor: Nathalie Serban **

Private Sub UserForm_Initialize()
Dim letzteZeile As Integer
letzteZeile = Worksheets("Hilfstabelle").Cells(Rows.Count, 1).End(xlUp).Row

Dim i As Integer

'Combobox wird bef|fffd|llt mit Werten in Spalte 1 ab Zeile 10 von Sheet "Hilfstabelle"

With Me.ComboBox1
  For i = 10 To letzteZeile
    .AddItem Worksheets("Hilfstabelle").Cells(i, 1).Value
  Next
End With

End Sub
Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Explanation"
Option Explicit

'** Autor: Nathalie Serban **
Sub explanation_step2()

MsgBox " Select your Excel-file with your SWAT-cases which has been downloaded from SWAT in STEP 1.", , "STEP 2"
'" -  " & vbNewLine & vbNewLine & _
'" -> Then the files are transferred to the lower table."

End Sub
Sub explanation_step3()

MsgBox " Depending on the number of SWAT cases in your Excel file downloaded" & vbNewLine & "in STEP 1, new Basic Technical Workbooks are generated automatically." & vbNewLine & vbNewLine & _
" The sheet 'Basic Data' in the BTWs are filled out with the data from SWAT.", , "STEP 3"

End Sub
Attribute VB_Name = "Feasibility_STUDY"
Option Explicit

'** Autor: NAthalie Serban **

'Nicht in Gebrauch!

Sub feasible_Klicken()
'
'If Worksheets("Feasibility Study").Range("Q14").Value = 2 Or _
'Worksheets("Feasibility Study").Range("Q16").Value = 2 Or _
'Worksheets("Feasibility Study").Range("Q18").Value = 2 Or _
'Worksheets("Feasibility Study").Range("Q20").Value = 2 Or _
'Worksheets("Feasibility Study").Range("Q22").Value = 2 Or _
'Worksheets("Feasibility Study").Range("Q24").Value = 2 Or _
'Worksheets("Feasibility Study").Range("Q26").Value = 2 Or _
'Worksheets("Feasibility Study").Range("Q28").Value = 2 Or _
'Worksheets("Feasibility Study").Range("Q30").Value = 2 Or _
'Worksheets("Feasibility Study").Range("Q32").Value = 2 Or _
'Worksheets("Feasibility Study").Range("Q34").Value = 1 Or _
'Worksheets("Feasibility Study").Range("Q36").Value = 2 Or _
'Worksheets("Feasibility Study").Range("Q38").Value = 1 Then
'
'MsgBox "Selection not possible because a question was rated with a deviation.", vbInformation + vbOKOnly
'
'Worksheets("Feasibility Study").Range("Q46").Value = 2
'
'Else
''nichts machen
'
'End If

End Sub
Attribute VB_Name = "PCMOPEN"
Attribute VB_Base = "0{C39A7D4F-7039-4586-AAFC-B904F2AF676C}{F5B2D2CA-6840-4B24-9A3A-DA4C0A62348B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
Call PCMDataTransferWennSchonOffen

End Sub

Private Sub CommandButton2_Click()

End Sub

Private Sub CommandButton3_Click()
Call openFromDesktop
End Sub

Private Sub Frame1_Click()

End Sub

Private Sub Label1_Click()

End Sub

Private Sub TextBox1_Change()

End Sub

Private Sub Label3_Click()

End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "PCM_DATATRANSFER"

'** Autor: Nathalie Serban **

'Globale Variablen

Dim anzahlComplMatrix As Long
    Dim i As Integer
    Dim y As Integer
    
    Dim dataTransfered
    Dim Names
       
'PCM variablen
 Dim varDatei As Variant
 Dim vArray As Variant
    Dim fileName As Variant
    Dim WBPCM As Workbook
    Dim ws1 As Worksheet
    Dim PCMSheet As String
    Dim offenesPCM As Worksheet
    
   
'**Autor: Nathalie Serban **
Sub PCMoeffnen()

'Fehlerhandling
On Error GoTo Errorhandler
     
Application.ScreenUpdating = False

            
PCMOPEN.Show


Application.ScreenUpdating = True
Exit Sub

'--- Bei Fehler:
Errorhandler:
    'Falls Bufferfile fehlt:
    If Err.Number = 9 Then
            MsgBox "No PCM file was found." & Chr(13) & Chr(13) & "Please open the excel-file containing the sheet-name:" & Chr(13) & "F2.12 PCM-Safe Launch", vbCritical + vbOKOnly, _
    "NO PCM FILE"

      Else:
          MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
          vbCritical, "An error has occured!"
      End If
    Exit Sub
End Sub

Sub openFromDesktop()

'Fehlerhandling
On Error GoTo Errorhandler
     
varDatei = Application.GetOpenFilename()
    
'Fehlerbehandlung wenn Nutzer auf Abbrechen klickt (bei DATEIAUSWAHL) - rotes X oder abbrechen
    If varDatei = "Falsch" Or varDatei = "False" Then Exit Sub
     
    vArray = Split(varDatei, "\")
        For i = 0 To UBound(vArray)
            fileName = vArray(i)
        Next i
              
    'PCM (variabler Workbookname)
    'Datei |fffd|ffnen
       Set WBPCM = Workbooks.Open(varDatei)
       Set ws1 = WBPCM.Worksheets("F2.12 PCM-Safe Launch")
           
           
Unload PCMOPEN
           
 antwort = MsgBox("Successful. The PCM Excel File is open." & Chr(13) & Chr(13) & "Do you want to transfer the Compliance-Matrix-Data to the PCM File? ", _
    vbYesNo + vbInformation, "Information")

'User R|fffd|ckmeldung
    Select Case antwort
        Case vbNo
            Exit Sub
        Case vbYes
    'Ge|fffd|ffnetes Bufferfile wird gel|fffd|scht
         Call PCMDataTransferWennSchonOffen
    Exit Sub
    End Select

Exit Sub

'--- Bei Fehler:
Errorhandler:
    'Falls Bufferfile fehlt:
    If Err.Number = 9 Then
            MsgBox "No PCM file was found." & Chr(13) & Chr(13) & "Please open the excel-file containing the sheet-name:" & Chr(13) & "F2.12 PCM-Safe Launch", vbCritical + vbOKOnly, _
    "NO PCM FILE"
    
  ElseIf Err.Number = 1004 Then
        MsgBox "The PCM file is already opened." & Chr(13) & Chr(13) & "Please click on the  TRANSFER Button to Transfer the data to the PCM File.", vbInformation + vbOKOnly, _
    "PCM FILE already opened"
    
      Else:
          MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
          vbCritical, "An error has occured!"
      End If
      
    Unload PCMOPEN
    Exit Sub
End Sub

'+++++++ Nicht in Gebrauch
Sub openFromInternet()
'Fehlerhandling
On Error GoTo Errorhandler
     
     
Set objShell = CreateObject("Wscript.Shell")
    
objShell.Run ("https://www.zf.com/site/supplierboard/media/zf_media_import/document/corporate_2/company_4/purchasing_and_logistics/purchasing_strategy/quality_guidelines/2018_03_21_qd83/F2.12_PCM-Product_Characteristics_Matrix.xlsx")

MsgBox ("Please save the PCM File on your computer." & vbNewLine & _
"Open the File and click on the TRANSFER BUTTON again."), vbInformation + vbOKOnly
Exit Sub

'--- Bei Fehler:
Errorhandler:
    'Falls Bufferfile fehlt:
    If Err.Number = 9 Then
            MsgBox "No PCM file was found." & Chr(13) & Chr(13) & "Please open the excel-file containing the sheet-name:" & Chr(13) & "F2.12 PCM-Safe Launch", vbCritical + vbOKOnly, _
    "NO PCM FILE"
      Else:
          MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
          vbCritical, "An error has occured!"
      End If
      
    Unload PCMOPEN
    Exit Sub
End Sub


Sub PCMDataTransferWennSchonOffen()

   Dim answer2
   Set objShell = CreateObject("Wscript.Shell")
    
Application.ScreenUpdating = False
'Application.EnableEvents = False

'Fehlerhandling
On Error GoTo Errorhandler
    
Dim Anzahl As Single, Names As String, i As Byte
Dim Meldung As String
Dim QWB


PCMSheet = "F2.12 PCM-Safe Launch"

Anzahl = Application.Workbooks.Count

For i = 1 To Anzahl
        Names = Application.Workbooks(i).Name
        
     If WorksheetEx(Workbooks(Names), PCMSheet) Then
     Call PCMUebertrag(Names)
           Exit Sub
       End If
Next i
    MsgBox "No PCM file was found." & Chr(13) & Chr(13) & "Please open the excel-file containing the sheet-name:" & Chr(13) & "F2.12 PCM-Safe Launch", vbCritical + vbOKOnly, _
    "NO PCM FILE"
Exit Sub

'--- Bei Fehler:
Errorhandler:
    'Falls Bufferfile fehlt:
    If Err.Number = 9 Then
          MsgBox "No PCM file was found. Please open the excel-file containing the sheet-name: F2.12 PCM-Safe Launch", vbCritical, _
          "An error has occured!"
      Else:
          MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
          vbCritical, "An error has occured!"
      End If
          Unload PCMOPEN
End Sub
        
        
Sub PCMUebertrag(Names)

Application.ScreenUpdating = False


' Pop up Info
Dim objShell As Object
Set objShell = CreateObject("WScript.Shell")

'Compliance Matrix
    Dim wkb As Workbook
    Dim ws4 As Worksheet
    Set wkb = ThisWorkbook
    Set ws4 = wkb.Worksheets("Compliance Matrix")
    
   'Basic Data
    Set ws2 = wkb.Worksheets("Basic Data")
    
'    MsgBox Names
    
    Set offenesPCM = Workbooks(Names).Worksheets(PCMSheet)

''Von B9 bis zur letz beschriebenen Zelle in J !!!! (SLP Relevant)
'Werte von Compliance Matrix...
'Spalte J nicht B
Dim bubbledrawingENDE As Integer
bubbledrawingENDE = ws4.Cells(Rows.Count, 9).End(xlUp).Row
'MsgBox bubbledrawingENDE

''....zu PCM
Dim ballonENDE As Integer
ballonENDE = offenesPCM.Cells(Rows.Count, 1).End(xlUp).Row

'### Vergleich PCM und Feldern aus Compliance Matrix um die richtigen Daten zu |fffd|bertragen

Dim anzahlBasicData As Integer
anzahlBasicData = 6

'#####Daten von Basic Data zu PCM
        'Part description
        offenesPCM.Range("F2") = ws2.Range("K9").Value
        'Part number
        offenesPCM.Range("F3") = ws2.Range("K7").Value
        'project /program
        offenesPCM.Range("F4") = ws2.Range("AC9").Value
        'supplier name
        offenesPCM.Range("V2") = ws2.Range("K31").Value
        'supplier plant
        offenesPCM.Range("V3") = ws2.Range("K13").Value
        'supplier ID
        offenesPCM.Range("AD3") = ws2.Range("AC31").Value

'#########Orientierung an Spalte (SLP relevant) I = WENN X gesetzt, DANN |fffd|bertrag

' z|fffd|hler wie viele x / f|fffd|r Zeilenanzahl in PCM / f|fffd|r Fortschrittsanzeiger
Call SLPrelevantzahlWennSchonOffen(Names)

y = 12
dataTransfered = 0

Unload PCMOPEN


''Popup-Info, Anzeige f|fffd|r 2 Sekunden
'objShell.Popup ("Amount of Data which gets transfered to PCM File:    " & anzahlComplMatrix), _
'2, "One moment please..."
'
'Set objShell = Nothing

For i = 9 To bubbledrawingENDE
        If ws4.Range("I" & i).Value = "X" Then
        
            'Bubbledrawing zu Ballon Nummer
             offenesPCM.Range("A" & y) = ws4.Range("B" & i).Value
             
            'Key Characteristics zu special characteristics
             offenesPCM.Range("E" & y) = ws4.Range("G" & i).Value
        
            ' Description zu Control Method
           offenesPCM.Range("R" & y) = ws4.Range("N" & i).Value
             
             
 '******************** Verketten
'     Desciption + Value + Tolerance zu Product Characteristics
            For Each c In ws4.Range("C" & i & ":" & " E" & i)
      
                'Verkettung
                tmp = tmp & c & " "
                
'      letztes ; wird gel|fffd|scht
'                    tmp = Left(tmp, Len(tmp))
            
'        |fffd|bertrag der verketteten Werte
                  offenesPCM.Range("B" & y) = tmp
         Next c
         
             y = y + 1
            tmp = vbNullString
            
        dataTransfered = dataTransfered + 1

        Call fortschrittsanzeigePCM
    End If
Next i
        Unload ProgressbarPCM
        MsgBox "PCM Data Transfer successful.", vbOKOnly
        
  Unload PCMOPEN
  
  
Application.ScreenUpdating = True

Exit Sub

'--- Bei Fehler:
Errorhandler:
    'Falls Bufferfile fehlt:
    If Err.Number = 9 Then
          MsgBox "No PCM file was found. Please open the excel-file containing the sheet-name: F2.12 PCM-Safe Launch", vbCritical, _
          "An error has occured!"
      Else:
          MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
          vbCritical, "An error has occured!"
      End If
    Exit Sub

End Sub

Sub SLPrelevantzahlWennSchonOffen(Names)

'Compliance Matrix
    Dim wkb As Workbook
    Dim ws4 As Worksheet
    Set wkb = ThisWorkbook
    Set ws4 = wkb.Worksheets("Compliance Matrix")
    
    
Dim ZeileneinfuegenAnz As Long
Dim SLPrelevantENDE As Integer
SLPrelevantENDE = ws4.Cells(Rows.Count, 9).End(xlUp).Row

anzahlComplMatrix = 0
  
' MsgBox Names
'Fehlerhandling
On Error GoTo Errorhandler

    For i = 9 To SLPrelevantENDE
    
            If ws4.Range("I" & i).Value = "X" Then
            anzahlComplMatrix = anzahlComplMatrix + 1
            End If
    Next i
      
    'Anzahl Daten von COmplMatrix Eintr|fffd|ge mit SLP Relevant (X) insgesamt
    If anzahlComplMatrix > 22 Then
          ZeileneinfuegenAnz = anzahlComplMatrix - 22
    
          offenesPCM.Activate
    
          offenesPCM.Range("A34").Select
          offenesPCM.Range(ActiveCell, ActiveCell.Offset((ZeileneinfuegenAnz - 1), 0)).EntireRow.Insert
            
          offenesPCM.Rows("12:12").Copy
          offenesPCM.Range(ActiveCell, ActiveCell.Offset((ZeileneinfuegenAnz - 1), 0)).EntireRow.Select
            
            Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
         Application.CutCopyMode = False
        
       Cancel = True
    End If

Exit Sub

'--- Bei Fehler:
Errorhandler:
          MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source
    Exit Sub
End Sub

Sub fortschrittsanzeigePCM()

Application.ScreenUpdating = True

    Dim percentage

    percentage = (dataTransfered / anzahlComplMatrix) * 100
    percentage = Round(percentage, 1)
    
'Fehlerhandling
On Error GoTo Errorhandler

'MsgBox dataTransfered
'MsgBox anzahlComplMatrix

ProgressbarPCM.Show

 '### Abfragen f|fffd|r Fortschrittsanzeige
    ProgressbarPCM.TextBox5.SetFocus
    ProgressbarPCM.TextBox1.Value = anzahlComplMatrix
    ProgressbarPCM.TextBox2.Value = dataTransfered
    ProgressbarPCM.TextBox5.Value = percentage
    
    Application.Wait Now + TimeSerial(0, 0, 1)
    'MsgBox "N|fffd|chster Durchgang"
      
    ProgressbarPCM.Repaint
 Exit Sub

'--- Bei Fehler:
Errorhandler:
    MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
    vbCritical, "An error has occured!"
 Exit Sub
End Sub






Attribute VB_Name = "PRUEFUNG_BUFFERFILE_OFFEN"
Option Explicit

'**Autor: Nathalie Serban **

'Pr|fffd|fen ist workbookoffen
Function IsWorkbookOpen(strWB As String) As Boolean
    On Error Resume Next
    IsWorkbookOpen = Not Workbooks(strWB) Is Nothing
 End Function

'Pr|fffd|fen ist worksheet offen
Function SheetEx(strNam As String) As Boolean
   On Error Resume Next
   SheetEx = Sheets(strNam).index > 0
End Function


Function WorksheetEx(WBTest As Workbook, strNam As String) As Boolean
   On Error Resume Next
   WorksheetEx = WBTest.Worksheets(strNam).index > 0
End Function


Sub Dateien_ermitteln()
Dim Anzahl As Single, Name As String, i As Byte
Dim Meldung As String
Anzahl = Application.Workbooks.Count

For i = 1 To Anzahl

Name = Application.Workbooks(i).Name
Meldung = Meldung & Name & ", "
Next i

MsgBox Meldung
End Sub
Sub pruf()

If SheetEx("F2.12 PCM-Safe Launch") Then
MsgBox ("One moment please.."), _
vbOKOnly + vbInformation, "Data Transfer"
Else
'    Call PCMoeffnen
''    On Error Resume Next
End If


End Sub
Attribute VB_Name = "Progressbar"
Attribute VB_Base = "0{DC7E1343-72D7-4E32-9B60-2528E59E71FE}{53C9202E-5310-427F-A119-539769A1C083}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub Label2_Click()

End Sub

Private Sub Label3_Click()

End Sub

Private Sub Label7_Click()

End Sub

Private Sub TextBox1_Change()

End Sub

Private Sub TextBox5_Change()

End Sub
Attribute VB_Name = "ProgressbarPCM"
Attribute VB_Base = "0{08EB5A21-B7FD-48C3-AC33-B403A338AE81}{518C37FC-4960-4C20-8693-1BE934B83E94}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Label1_Click()

End Sub

Private Sub Label2_Click()

End Sub

Private Sub Label3_Click()

End Sub
Attribute VB_Name = "STEP1"
Attribute VB_Base = "0{3E1EF58B-BC2A-4780-B0EC-B043BD479F48}{8817ECED-20F0-4633-9487-C2FA1045A04F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit


Private Sub Label2_Click()

End Sub

Private Sub UserForm_Initialize()
 With Me

'        This will create a vertical scrollbar
        .ScrollBars = fmScrollBarsVertical

        'Change the values of 2 as Per your requirements
        .ScrollHeight = .InsideHeight * 2
        .ScrollWidth = .InsideWidth * 9
   End With

End Sub
Attribute VB_Name = "ShowAllSheets_SN"

' ** Autor: Nathalie Serban **

Sub TabelleEinblenden()
Dim Blatt As Worksheet
For Each Blatt In Sheets
Blatt.Visible = True
Next Blatt
End Sub
Attribute VB_Name = "SonderzeichenEntfernen"
'** Autor: Nathalie Serban **

Function Clean_Sonderzeichen(ByVal strWert As String) As String
'** Dimensionierung der Variablen
Dim i As Integer
Const strSonderzeichen As String = "-.,:;#+|fffd|'*?=)(/&%$|fffd|!~\}][{"
'** Durchlaufen des |fffd|bergebenen Strings
For i = 1 To Len(strSonderzeichen)
 strWert = Replace(strWert, Mid(strSonderzeichen, i, 1), "")
Next i
'** Bereinigter String der Funktion zur|fffd|ckgeben
Clean_Sonderzeichen = strWert
End Function


Attribute VB_Name = "SwatExtractToBTW"
Attribute VB_Base = "0{285F72D8-DF6B-41B5-9947-6605AED20A85}{88BF938C-3E55-4A65-BD0B-BE5B1DE608B3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub UserForm_Activate()

    Application.Wait Now + TimeSerial(0, 0, 8)
    SwatExtractToBTW.Hide

End Sub

Attribute VB_Name = "Switchen"
Option Explicit

'** Autor: Nathalie Serban**

'Auf Swat Sheet switchen
Sub Schaltflaeche14_Klicken()


Dim ws2 As Worksheet
Set ws2 = Worksheets("Basic Data")

Dim ws9 As Worksheet
Set ws9 = Worksheets("SWAT Data Extract")

ws9.Activate

End Sub

'** Autor: Nathalie Serban**

'Auf Basic Data Sheet switchen
Sub BacktoBASICDATA()

Dim ws2 As Worksheet
Set ws2 = Worksheets("Basic Data")

Dim ws9 As Worksheet
Set ws9 = Worksheets("SWAT Data Extract")

ws2.Activate

End Sub

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton21, 14, 0, MSForms, CommandButton2"
Attribute VB_Control = "DeleteLastTier, 11, 1, MSForms, CommandButton2"
Attribute VB_Control = "DeleteallTiers, 4, 2, MSForms, CommandButton2"
Attribute VB_Control = "DeleteallSubSuppliers, 3, 3, MSForms, CommandButton2"
Attribute VB_Control = "AddTier, 2, 4, MSForms, CommandButton2"
Attribute VB_Control = "AddSubSupplier, 1, 5, MSForms, CommandButton2"
Attribute VB_Control = "SuppliersVerbinden, 9, 6, MSForms, CommandButton2"
Option Explicit
'** Autor: Nathalie Serban
Private Sub AddSubSupplier_Click()

Add_Sub_Supplier.Show

End Sub

'** Autor: Nathalie Serban und Linda |fffd|ks|fffd|z**
Private Sub AddTier_Click()

Worksheets("Sub-Supplier-Tree Sketched").Unprotect ("trwdalphi19731408")

On Error Resume Next


Dim anzahlTiers As Long
Dim ZaehlerTier As Integer
Dim letzteSpalte As Long
Dim letzteZeile As Long

letzteZeile = Worksheets("Hilfstabelle").Range("A1048576").End(xlUp).Row + 1

Worksheets("Hilfstabelle").Range("B9").Value = Worksheets("Hilfstabelle").Range("B9").Value
Worksheets("Hilfstabelle").Range("B9").Value = Worksheets("Hilfstabelle").Range("B9").Value + 1

ZaehlerTier = Worksheets("Hilfstabelle").Range("B9").Value
  
    With Tabelle1
    'letzte Spalte bestimmen und gibt an, nach wieviel Zellen die n|fffd|chste Tabelle anfangen soll
            letzteSpalte = .Cells(2, Columns.Count).End(xlToLeft).Column + 5
        
    'Kopiert den Bereich T-V
        .Range("T2:V3").Copy
     
        .Cells(2, letzteSpalte).PasteSpecial
        
            Application.CutCopyMode = False
            
'        "Tier"- Text erscheint in Zeile 2 und variabler Spalte
     .Cells(2, letzteSpalte) = "Tier " & Worksheets("Hilfstabelle").Range("B9").Value
    End With
    
Worksheets("Hilfstabelle").Cells(letzteZeile, 1) = "Tier " & ZaehlerTier

Worksheets("Sub-Supplier-Tree Sketched").Protect ("trwdalphi19731408"), DrawingObjects:=False, Contents:=True, Scenarios:= _
        True, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True
 
End Sub

'** Autor: Nathalie Serban**
'Beispiel wird ge|fffd|ffnet
Private Sub CommandButton21_Click()
Connection_Beispiel.Show
End Sub

'** Autor: Nathalie Serban**
Private Sub DeleteallSubSuppliers_Click()

Delete_Sub_Supplier.Show

End Sub

'** Autor: Linda |fffd|ks|fffd|z & Nathalie Serban**

Private Sub DeleteallTiers_Click()

Worksheets("Sub-Supplier-Tree Sketched").Unprotect ("trwdalphi19731408")
        
 On Error Resume Next
 
Dim rngShapes As Range
Dim shp As Shape

If MsgBox("Do you want to delete all tiers with its content?", vbYesNo + vbExclamation) = vbYes Then

'Inhalt und Rahmen l|fffd|schen
Worksheets("Sub-Supplier-Tree Sketched").Columns("X:X").Select
Worksheets("Sub-Supplier-Tree Sketched").Range(Selection, Selection.End(xlToRight)).Select
Selection.Clear

'Shapes entfernen
Set rngShapes = Selection
For Each shp In Worksheets("Sub-Supplier-Tree Sketched").Shapes
If Not Intersect(shp.TopLeftCell, rngShapes) Is Nothing Then
shp.Delete
End If
Next shp

Worksheets("Hilfstabelle").Range("A11:A500").Clear
Worksheets("Hilfstabelle").Range("B9").Value = 1
Worksheets("Sub-Supplier-Tree Sketched").Range("T5").Select

Else
'No:Sub beenden

Worksheets("Sub-Supplier-Tree Sketched").Protect ("trwdalphi19731408"), DrawingObjects:=False, Contents:=True, Scenarios:= _
        True, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True
Exit Sub
End If


Worksheets("Sub-Supplier-Tree Sketched").Protect ("trwdalphi19731408"), DrawingObjects:=False, Contents:=True, Scenarios:= _
        True, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True
End Sub

'**Autor: Nathalie Serban**
Private Sub DeleteLastTier_Click()


Worksheets("Sub-Supplier-Tree Sketched").Unprotect ("trwdalphi19731408")
Dim ws As Worksheet
Dim ws1 As Worksheet
Dim letzteZeile As Long
Dim letzteSpalte As Long
Dim rng As Range
Dim rngShapes As Range
Dim shp As Shape

On Error Resume Next

Set ws = Worksheets("Sub-Supplier-Tree Sketched")
Set ws1 = Worksheets("Hilfstabelle")

letzteSpalte = ws.Cells(2, Columns.Count).End(xlToLeft).Column
letzteZeile = ws1.Range("A1048576").End(xlUp).Row


'falls nur erster Tier steht
If letzteSpalte = 20 Then
MsgBox "You can not delete the first tier!", vbOKOnly + vbExclamation
Exit Sub
End If


If MsgBox("Do you want to delete the last tier: " & ws1.Cells(letzteZeile, 1).Value & " with its content?", _
vbYesNo + vbQuestion) = vbYes Then

ws.Columns(letzteSpalte).Select
Selection.Clear

'Shapes entfernen
Set rngShapes = Selection
For Each shp In ws.Shapes
If Not Intersect(shp.TopLeftCell, rngShapes) Is Nothing Then
shp.Delete
End If
Next shp

'Berechnung l|fffd|schen
ws.Columns(letzteSpalte + 3).Clear
    
'letzter Tier l|fffd|schen in Hilfstabelle
ws1.Cells(letzteZeile, 1).ClearContents

'aktueller Z|fffd|hler (Anzahl Tiers) -1)
ws1.Range("B9").Value = ws1.Range("B9").Value - 1

Else
'nichts machen
End If

ws.Range("T5").Select


Worksheets("Sub-Supplier-Tree Sketched").Protect ("trwdalphi19731408"), DrawingObjects:=False, Contents:=True, Scenarios:= _
        True, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True

End Sub


'** Autor: Nathalie Serban und Linda |fffd|ks|fffd|z**
Private Sub SuppliersVerbinden_Click()


Worksheets("Sub-Supplier-Tree Sketched").Unprotect ("trwdalphi19731408")
        
MsgBox "Please connect the Suppliers by using the line below. Copy and paste the line wherever needed. Connect from point to point"

'obere Linie einf|fffd|gen
 Worksheets("Sub-Supplier-Tree Sketched").Shapes.AddConnector(msoConnectorStraight, 27, 306, 135, 309). _
        Select

   Selection.ShapeRange.height = 0
   Selection.ShapeRange.width = 114
   
    Selection.ShapeRange.ShapeStyle = msoLineStylePreset5
    Selection.ShapeRange.Line.BeginArrowheadStyle = msoArrowheadOval
    Selection.ShapeRange.Line.EndArrowheadStyle = msoArrowheadOval
            
     Selection.ShapeRange.IncrementTop 105
'untere Linie einf|fffd|gen


 With Worksheets("Sub-Supplier-Tree Sketched").Shapes.BuildFreeform(msoEditingAuto, 111.75, 384.75)
        .AddNodes msoSegmentLine, msoEditingAuto, 69, 384.75
        .AddNodes msoSegmentLine, msoEditingAuto, 69, 482.25
        .AddNodes msoSegmentLine, msoEditingAuto, 113.25, 482.25
        .ConvertToShape.Select
    End With
'  Selection.ShapeRange.ShapeStyle = msoLineStylePreset2

        Selection.ShapeRange.IncrementLeft -6
    Selection.ShapeRange.IncrementTop 73.5
    Selection.ShapeRange.Line.BeginArrowheadStyle = msoArrowheadOval
    Selection.ShapeRange.Line.EndArrowheadStyle = msoArrowheadOval
         
    Range("A1").Select
        


Worksheets("Sub-Supplier-Tree Sketched").Protect ("trwdalphi19731408"), DrawingObjects:=False, Contents:=True, Scenarios:= _
        True, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True

End Sub

Private Sub Worksheet_Activate()

Worksheets("Sub-Supplier-Tree Sketched").Protect ("trwdalphi19731408"), DrawingObjects:=False, Contents:=True, Scenarios:= _
        True, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True
        
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 2, 0, MSForms, CommandButton2"
Attribute VB_Control = "CommandButton2, 3, 1, MSForms, CommandButton2"
Attribute VB_Control = "OptionButton22, 4, 2, MSForms, OptionButton2"
Attribute VB_Control = "OptionButton23, 5, 3, MSForms, OptionButton2"
Attribute VB_Control = "OptionButton24, 6, 4, MSForms, OptionButton2"
Attribute VB_Control = "OptionButton25, 7, 5, MSForms, OptionButton2"
Attribute VB_Control = "OptionButton26, 8, 6, MSForms, OptionButton2"
Attribute VB_Control = "OptionButton27, 9, 7, MSForms, OptionButton2"
Attribute VB_Control = "OptionButton28, 10, 8, MSForms, OptionButton2"
Attribute VB_Control = "OptionButton29, 11, 9, MSForms, OptionButton2"
Attribute VB_Control = "OptionButton210, 12, 10, MSForms, OptionButton2"
Attribute VB_Control = "OptionButton211, 13, 11, MSForms, OptionButton2"
Attribute VB_Control = "OptionButton212, 14, 12, MSForms, OptionButton2"
Attribute VB_Control = "OptionButton213, 15, 13, MSForms, OptionButton2"
'**Autor: Nathalie Serban **

'Back to Content
Private Sub CommandButton1_Click()
    Worksheets("Content").Select
         
CommandButton1.Font.Size = 9
CommandButton1.Font.Name = "Arial"
CommandButton1.height = 25
CommandButton1.width = 75
CommandButton1.Left = 10
CommandButton1.Top = 10

End Sub

'Reset Form Button -> Frank Schindler 02.05.2017

Private Sub CommandButton2_Click()

CommandButton2.Font.Size = 9
CommandButton2.Font.Name = "Arial"
CommandButton2.height = 25
CommandButton2.width = 75
CommandButton2.Left = 100
CommandButton2.Top = 10

' Fehlerhandling
  On Error GoTo err_fehler1
  
Dim a1 As String ' String Setzen f|fffd|r MsgBox
 a1 = MsgBox("Are you sure you want to reset the form? All data will be lost.", vbYesNo, "Reset Form") ' Abfrage Ja / Nein inkl. Text
    If a1 = vbNo Then ' Wenn Nein dann
       Exit Sub ' Abbruch
    Else ' ansonsten
Dim ObjOLE  As OLEObject ' String setzen f|fffd|r OLEObject
   For Each ObjOLE In ActiveSheet.OLEObjects ' |fffd|berpr|fffd|fen aller OptionButton
      If TypeOf ObjOLE.Object Is MSForms.OptionButton Then ' Wenn OptionButton aktiv dann
         ObjOLE.Object.Value = False ' auf inaktiv setzen
   End If
   Next ObjOLE ' n|fffd|chsten Object
End If

' L|fffd|schen der Inhalte von den Eingabefeldern
Dim zelle As Range
For Each zelle In Range("A1:AM31") ' anpassen
On Error Resume Next
If zelle.Locked = False Then
    zelle.Value = ""
End If
Next

MsgBox "Reset successful."

   Exit Sub
   
err_fehler1:
  MsgBox "Error-Code: err_code_32 " & vbCrLf & "Error no.: " & Err.Number & _
  vbCrLf & "Error description: " & Err.Description
  
End Sub

Private Sub OptionButton21_Click()

End Sub

Private Sub OptionButton22_Click()

End Sub

Private Sub OptionButton24_Click()

End Sub

Private Sub OptionButton26_Click()

End Sub
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton21, 1, 0, MSForms, CommandButton2"
Attribute VB_Control = "CommandButton22, 44, 1, MSForms, CommandButton2"

' Back to Content Button

Private Sub CommandButton21_Click()
Worksheets("Content").Select
    ActiveCell.Activate
    
CommandButton21.Font.Size = 11
CommandButton21.Font.Name = "Arial"
CommandButton21.height = 25
CommandButton21.width = 100
CommandButton21.Left = 15
CommandButton21.Top = 10

End Sub
'reset
Private Sub CommandButton22_Click()

Worksheets("Feasibility Study").Unprotect ("trwdalphi19731408")

 
CommandButton22.Font.Size = 11
CommandButton22.Font.Name = "Arial"
CommandButton22.height = 25
CommandButton22.width = 100
CommandButton22.Left = 130
CommandButton22.Top = 10

' Fehlerhandling
  On Error GoTo err_fehler1
  
Dim a1 As String ' String Setzen f|fffd|r MsgBox
 a1 = MsgBox("Are you sure you want to reset the form? All data will be lost.", vbYesNo, "Reset Form") ' Abfrage Ja / Nein inkl. Text
    If a1 = vbNo Then ' Wenn Nein dann
      Worksheets("Feasibility Study").Protect ("trwdalphi19731408"), AllowFiltering:=True, AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
      
       Exit Sub ' Abbruch
    Else ' ansonsten
    
    Range("Q14").FormulaR1C1 = "0"
    Range("Q16").FormulaR1C1 = "0"
    Range("Q18").FormulaR1C1 = "0"
    Range("Q20").FormulaR1C1 = "0"
    Range("Q22").FormulaR1C1 = "0"
    Range("Q24").FormulaR1C1 = "0"
    Range("Q26").FormulaR1C1 = "0"
    Range("Q28").FormulaR1C1 = "0"
    Range("Q30").FormulaR1C1 = "0"
    Range("Q32").FormulaR1C1 = "0"
    Range("Q34").FormulaR1C1 = "0"
    Range("Q36").FormulaR1C1 = "0"
    Range("Q38").FormulaR1C1 = "0"

    
'Dim ObjOLE  As OLEObject ' String setzen f|fffd|r OLEObject
'   For Each ObjOLE In Worksheets("Feasibility Study").OLEObjects ' |fffd|berpr|fffd|fen aller OptionButton
'      If TypeOf ObjOLE.Object Is MSForms.OptionButton Then ' Wenn OptionButton aktiv dann
'         ObjOLE.Object.Value = xlOff ' auf inaktiv setzen
'   End If
'Next ObjOLE ' n|fffd|chsten Object
End If

' L|fffd|schen der Inhalte von den Eingabefeldern
Dim zelle As Range
For Each zelle In Range("A1:H56") ' anpassen
On Error Resume Next
If zelle.Locked = False Then
    zelle.Value = ""
End If
Next
Worksheets("Feasibility Study").Range("Q46").Value = 0

MsgBox "Reset successful."

Worksheets("Feasibility Study").Protect ("trwdalphi19731408"), AllowFiltering:=True, AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
   Exit Sub
   
err_fehler1:
  MsgBox "Error-Code: err_code_32 " & vbCrLf & "Error no.: " & Err.Number & _
  vbCrLf & "Error description: " & Err.Description
  

  
End Sub

'** Autor: Nathalie Serban **

'confirmed Button
Private Sub OptionButton210_Click()

If OptionButton210.Value = True Then
OptionButton210.BackColor = QBColor(10)
End If

End Sub
'confirmed wieder weiss, falls nicht angeklickt
Private Sub OptionButton210_Change()
If OptionButton210.Value = False Then
OptionButton210.BackColor = QBColor(15)
End If
End Sub
'confirmed with  deviation
Private Sub OptionButton211_Click()
If OptionButton211.Value = True Then
OptionButton211.BackColor = QBColor(14)
End If
End Sub
'confirmed deviation wieder weiss, falls nicht angeklickt
Private Sub OptionButton211_Change()
If OptionButton211.Value = False Then
OptionButton211.BackColor = QBColor(15)
End If
End Sub
'not confirmed
Private Sub OptionButton212_Click()
If OptionButton212.Value = True Then
OptionButton212.BackColor = QBColor(12)
End If
End Sub
'not confirmed  wieder weiss, falls nicht angeklickt
Private Sub OptionButton212_Change()
If OptionButton212.Value = False Then
OptionButton212.BackColor = QBColor(15)
End If
End Sub

' Yes or No anklicken:

'+++++++++++++++++++++++++++++++++++++++++++++++++++

' Frage 1. : Yes --> Explanation ist nicht notwendig

Private Sub OptionButton21_Click()

If OptionButton21.Value = True Then

Rows("13:13").EntireRow.Hidden = True

End If

End Sub

'Frage 0. : No --> Explanation poppt auf

Private Sub OptionButton22_Click()

If OptionButton22.Value = True Then

Rows("13:13").EntireRow.Hidden = False

End If

End Sub

'++++++++++++++++++++++++++++++++++++++++++++++++++++

' Frage 2. : Yes --> Explanation ist nicht notwendig

Private Sub OptionButton23_Click()

If OptionButton23.Value = True Then

Rows("15:15").EntireRow.Hidden = True

End If

End Sub

'Frage 2. : No --> Explanation poppt auf
Private Sub OptionButton24_Click()

If OptionButton24.Value = True Then

Rows("15:15").EntireRow.Hidden = False

End If
End Sub

'+++++++++++++++++++++++++++++++++++++++++++++++

Private Sub OptionButton25_Click()
If OptionButton25.Value = True Then

Rows("17:17").EntireRow.Hidden = True

End If

End Sub


Private Sub OptionButton26_Click()

If OptionButton26.Value = True Then

Rows("17:17").EntireRow.Hidden = False

End If

End Sub

'+++++++++++++++++++++++++++++++++++++++++++++++

Private Sub OptionButton27_Click()
If OptionButton27.Value = True Then

Rows("19:19").EntireRow.Hidden = True

End If
End Sub


Private Sub OptionButton28_Click()

If OptionButton28.Value = True Then

Rows("19:19").EntireRow.Hidden = False

End If

End Sub

'+++++++++++++++++++++++++++++++++++++++++++++
Private Sub OptionButton29_Click()

If OptionButton29.Value = True Then

Rows("21:21").EntireRow.Hidden = False

End If


End Sub


Private Sub OptionButton30_Click()
If OptionButton30.Value = True Then

Rows("21:21").EntireRow.Hidden = True

End If
End Sub
'++++++++++++++++++++++++++++++++++++++++++++++

Private Sub OptionButton31_Click()

If OptionButton31.Value = True Then

Rows("23:23").EntireRow.Hidden = True

End If
End Sub

Private Sub OptionButton32_Click()
If OptionButton32.Value = True Then

Rows("23:23").EntireRow.Hidden = False

End If
End Sub

'++++++++++++++++++++++++++++++++++++++++++++++

Private Sub OptionButton33_Click()
If OptionButton33.Value = True Then

Rows("25:25").EntireRow.Hidden = True

End If

End Sub

Private Sub OptionButton34_Click()

If OptionButton34.Value = True Then

Rows("25:25").EntireRow.Hidden = False

End If

End Sub


'++++++++++++++++++++++++++++++++++++++++++++++

Private Sub OptionButton35_Click()
If OptionButton35.Value = True Then

Rows("27:27").EntireRow.Hidden = True

End If
End Sub

Private Sub OptionButton36_Click()

If OptionButton36.Value = True Then

Rows("27:27").EntireRow.Hidden = False

End If

End Sub

'++++++++++++++++++++++++++++++++++++++++++++++

Private Sub OptionButton37_Click()

If OptionButton37.Value = True Then

Rows("29:29").EntireRow.Hidden = True

End If
End Sub


Private Sub OptionButton38_Click()

If OptionButton38.Value = True Then

Rows("29:29").EntireRow.Hidden = False

End If
End Sub


'++++++++++++++++++++++++++++++++++++++++++++++

Private Sub OptionButton39_Click()

If OptionButton39.Value = True Then

Rows("31:31").EntireRow.Hidden = True

End If
End Sub


Private Sub OptionButton40_Click()

If OptionButton40.Value = True Then

Rows("31:31").EntireRow.Hidden = False

End If
End Sub

'++++++++++++++++++++++++++++++++++++++++++++++

Private Sub OptionButton41_Click()


If OptionButton41.Value = True Then

Rows("33:33").EntireRow.Hidden = True

End If
End Sub

Private Sub OptionButton42_Click()

If OptionButton42.Value = True Then

Rows("33:33").EntireRow.Hidden = False

End If
End Sub

'++++++++++++++++++++++++++++++++++++++++++++++
Private Sub OptionButton43_Click()

If OptionButton43.Value = True Then

Rows("35:35").EntireRow.Hidden = False

End If
End Sub

Private Sub OptionButton44_Click()
If OptionButton44.Value = True Then

Rows("35:35").EntireRow.Hidden = True

End If
End Sub
'+++++++++++++++++++++++++++++++++++++++++++++
Private Sub OptionButton45_Click()
If OptionButton45.Value = True Then

Rows("37:37").EntireRow.Hidden = True

End If
End Sub


Private Sub OptionButton46_Click()
If OptionButton46.Value = True Then

Rows("37:37").EntireRow.Hidden = False

End If
End Sub



Private Sub Worksheet_Activate()

End Sub

'+++++++++++++++++++++++++++++++++++++++++++
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Tabelle23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton21, 4, 0, MSForms, CommandButton2"
Attribute VB_Control = "CommandButton1, 5, 1, MSForms, CommandButton2"
Attribute VB_Control = "CommandButton2, 12, 2, MSForms, CommandButton2"
Private Sub CommandButton1_Click()

CommandButton1.Font.Size = 11
CommandButton1.Font.Name = "Arial"
CommandButton1.height = 25
CommandButton1.width = 100
CommandButton1.Left = 130
CommandButton1.Top = 10

' Fehlerhandling
  On Error GoTo err_fehler1
  
Dim a1 As String ' String Setzen f|fffd|r MsgBox
 a1 = MsgBox("Are you sure you want to reset the form? All data will be lost.", vbYesNo, "Reset Form") ' Abfrage Ja / Nein inkl. Text
    If a1 = vbNo Then ' Wenn Nein dann
       Exit Sub ' Abbruch
    Else ' ansonsten
End If

' L|fffd|schen der Inhalte von den Eingabefeldern
Dim zelle As Range
For Each zelle In Range("B9:AE809") ' anpassen
On Error Resume Next
If zelle.Locked = False Then
    zelle.Value = ""
End If
Next

MsgBox "Reset successful."

   Exit Sub
   
err_fehler1:
  MsgBox "Error-Code: err_code_32 " & vbCrLf & "Error no.: " & Err.Number & _
  vbCrLf & "Error description: " & Err.Description
  
End Sub


Private Sub CommandButton2_Click()
Call PCMoeffnen
End Sub

'Tastenkombination STRG+ALT+A zu |fffd|ffnen des UF9 Modul 1 -> Frank Schindler 02.05.2017
Private Sub Worksheet_Activate()
Application.OnKey "^%a", "oeffnen_userform9"


End Sub

Private Sub CommandButton21_Click()
    Worksheets("Content").Select
    
    CommandButton21.Font.Size = 11
CommandButton21.Font.Name = "Arial"
CommandButton21.height = 25
CommandButton21.width = 100
CommandButton21.Left = 15
CommandButton21.Top = 10


End Sub


''**Autor: Nathalie Serban **
Private Sub Worksheet_Change(ByVal Target As Range)

'Falls in Spalte G (Key Chritical Characteristics der Wert C oder S eingetragen wird, wird in I (SLP relevant)
'der Wert "X" gesetzt

'Application.EnableEvents = False
     
' Fehlerhandling
On Error GoTo err_fehler1


If Target.Cells.Count > 1 Then Exit Sub
  
            If Target.Column = 7 Then
                ThisRow = Target.Row
                If Target.Value = "S" Or Target.Value = "C" Then
                Range("I" & ThisRow).Value = "X"
                Else: Range("I" & ThisRow).Value = ""
             End If
            End If
 
Exit Sub

err_fehler1:
  MsgBox "Error-Code: err_code_32 " & vbCrLf & "Error no.: " & Err.Number & _
  vbCrLf & "Error description: " & Err.Description
'          Application.EnableEvents = True
    

' ' In  Range ("Y4") muss Datum eingetragen sein.

' If Range("Y3").Value = "" Then
' Range("Y3").Value = "Please enter date!"
'  Range("Y3").Font.Color = vbRed
'
'  Else
'   Range("Y3").Font.Color = vbBlack
' End If
'
 
End Sub


Sub a()
Application.EnableEvents = True

End Sub
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton22, 21, 0, MSForms, CommandButton2"
Attribute VB_Control = "CommandButton21, 20, 1, MSForms, CommandButton2"
Attribute VB_Control = "pr_approval_sheet, 19, 2, MSForms, CheckBox2"
Attribute VB_Control = "approval_sheet, 18, 3, MSForms, CommandButton2"
Attribute VB_Control = "Open_Issues, 17, 4, MSForms, CommandButton2"
Attribute VB_Control = "Key_Metrics, 16, 5, MSForms, CommandButton2"
Attribute VB_Control = "APQP_extract, 15, 6, MSForms, CommandButton2"
Attribute VB_Control = "Progress_Report, 14, 7, MSForms, CommandButton2"
Attribute VB_Control = "Phases_5, 13, 8, MSForms, CommandButton2"
Attribute VB_Control = "Sub_Supplier, 12, 9, MSForms, CommandButton2"
Attribute VB_Control = "CheckBox11, 11, 10, MSForms, CheckBox2"
Attribute VB_Control = "CheckBox8, 10, 11, MSForms, CheckBox2"
Attribute VB_Control = "CheckBox5, 9, 12, MSForms, CheckBox2"
Attribute VB_Control = "Compliance_Matrix, 8, 13, MSForms, CommandButton2"
Attribute VB_Control = "CheckBox4, 7, 14, MSForms, CheckBox2"
Attribute VB_Control = "participants, 6, 15, MSForms, CommandButton2"
Attribute VB_Control = "saveproject, 4, 16, MSForms, CommandButton2"
Attribute VB_Control = "sendemail, 3, 17, MSForms, CommandButton2"
Attribute VB_Control = "print_sheets, 2, 18, MSForms, CommandButton2"
Attribute VB_Control = "FeasibilityStudy, 1, 19, MSForms, CommandButton2"
Option Explicit

Private Sub approval_sheet_Click()
    Worksheets("Approval Sheet").Select
    
approval_sheet.Font.Size = 11
approval_sheet.Font.Bold = False
approval_sheet.Font.Name = "Arial"
approval_sheet.height = 30
approval_sheet.width = 220
approval_sheet.Left = 165
approval_sheet.Top = 430

End Sub


Private Sub CheckBox11_Click()

CheckBox11.Font.Bold = False
CheckBox11.Font.Size = 11
CheckBox11.Font.Name = "Arial"
CheckBox11.height = 30
CheckBox11.width = 170
CheckBox11.Left = 550
CheckBox11.Top = 196
End Sub

Private Sub CheckBox4_Click()

CheckBox4.Font.Bold = False
CheckBox4.Font.Size = 11
CheckBox4.Font.Name = "Arial"
CheckBox4.height = 30
CheckBox4.width = 170
CheckBox4.Left = 550
CheckBox4.Top = 116

End Sub

'Print Compliance Matrix
Private Sub CheckBox5_Click()

CheckBox5.Font.Bold = False
CheckBox5.Font.Size = 11
CheckBox5.Font.Name = "Arial"
CheckBox5.height = 30
CheckBox5.width = 170
CheckBox5.Left = 550
CheckBox5.Top = 276

End Sub

Private Sub CheckBox8_Click()

CheckBox8.Font.Bold = False
CheckBox8.Font.Size = 11
CheckBox8.Font.Name = "Arial"
CheckBox8.height = 30
CheckBox8.width = 170
CheckBox8.Left = 550
CheckBox8.Top = 356

End Sub

'Documentation ZF Click
Private Sub CommandButton21_Click()
Worksheets("Documentation ZF").Select


CommandButton21.Font.Bold = False
CommandButton21.Font.Size = 11
CommandButton21.Font.Name = "Arial"
CommandButton21.height = 30
CommandButton21.width = 220
CommandButton21.Left = 165
CommandButton21.Top = 280


End Sub

'Documentation Supplier Click

Private Sub CommandButton22_Click()
Worksheets("Documentation Supplier").Select

CommandButton22.Font.Bold = False
CommandButton22.Font.Size = 11
CommandButton22.Font.Name = "Arial"
CommandButton22.height = 30
CommandButton22.width = 220
CommandButton22.Left = 165
CommandButton22.Top = 330

End Sub


Private Sub pr_approval_sheet_Click()

pr_approval_sheet.Font.Bold = False
pr_approval_sheet.Font.Size = 11
pr_approval_sheet.Font.Name = "Arial"
pr_approval_sheet.height = 30
pr_approval_sheet.width = 170
pr_approval_sheet.Left = 550
pr_approval_sheet.Top = 436

End Sub

'** Autor: Nathalie Serban **
Private Sub Sub_Supplier_Click()
Worksheets("Sub-Supplier-Tree Sketched").Select

Sub_Supplier.Font.Bold = False
Sub_Supplier.Font.Size = 11
Sub_Supplier.Font.Name = "Arial"
Sub_Supplier.height = 30
Sub_Supplier.width = 220
Sub_Supplier.Left = 165
Sub_Supplier.Top = 380
  
End Sub



'** Autor: Nathalie Serban **

'Sub Worksheet_Activate()
'' Tastenkombination STRG/ALT/A aktivieren
'Application.OnKey "^%a", "test1"
'
'
'Dim ws4 As Worksheet
'Set ws4 = Worksheets("Compliance Matrix")
'
'Dim ws7 As Worksheet
'Set ws7 = Worksheets("Sub-Supplier-Tree Sketched")
'
'
'If ws4.Visible = False Then
'CheckBox5.Enabled = False
'CheckBox5.Value = False
'
''Falls Compliance Matrix ausgeblendet ist
''--> Deaktiviere Button in Content Sheet f|fffd|r Compliance Matrix
'Compliance_Matrix.Enabled = False
'End If
'
'If ws4.Visible = True Then
'CheckBox5.Enabled = True
'CheckBox5.Value = True
'Compliance_Matrix.Enabled = True
'End If
'
'
''Falls Sub Supplier Sheet Tree ausgeblendet ist
''--> Deaktiviere Button in Content Sheet f|fffd|r Sub Supplier Tree
'
'If ws7.Visible = False Then
'CheckBox8.Enabled = False
'Sub_Supplier.Enabled = False
'CheckBox8.Value = False
'End If
'
'If ws7.Visible = True Then
'CheckBox8.Enabled = True
'CheckBox8.Value = True
'Sub_Supplier.Enabled = True
'End If
'
'End Sub

' Tastenkombination STRG/ALT/A deaktivieren
Private Sub Worksheet_Deactivate()
Application.OnKey "^%a"
End Sub

'** Autor: Nathalie Serban **
Private Sub Compliance_Matrix_Click()
     Worksheets("Compliance Matrix").Select
     
          
 Compliance_Matrix.Font.Bold = False
Compliance_Matrix.Font.Size = 11
Compliance_Matrix.Font.Name = "Arial"
Compliance_Matrix.height = 30
Compliance_Matrix.width = 220
Compliance_Matrix.Left = 165
Compliance_Matrix.Top = 230


End Sub

Private Sub participants_Click()
    Worksheets("Basic Data").Select
    
participants.Font.Bold = False
participants.Font.Size = 11
participants.Font.Name = "Arial"
participants.height = 30
participants.width = 220
participants.Left = 165
participants.Top = 130

End Sub

Private Sub FeasibilityStudy_Click()
    Worksheets("Feasibility Study").Select
    
FeasibilityStudy.Font.Bold = False
 FeasibilityStudy.Font.Size = 11
FeasibilityStudy.Font.Name = "Arial"
FeasibilityStudy.height = 30
FeasibilityStudy.width = 220
FeasibilityStudy.Left = 165
FeasibilityStudy.Top = 180
    
End Sub

Private Sub saveproject_Click()

saveproject.Font.Bold = True
saveproject.Font.Size = 11
saveproject.Font.Name = "Arial"
saveproject.height = 30
saveproject.width = 150
saveproject.Left = 105
saveproject.Top = 511

' Fehlerhandling
  On Error GoTo err_fehler1
  
Dim UsrRsp
Dim partno As String
partno = Sheets("Basic Data").Range("K7").Value
If Sheets("Basic Data").Range("K7").Value = "" Then partno = "No_Part_Number_exists"
UsrRsp = Application.Dialogs(xlDialogSaveAs).Show("Tech_Review_" & partno & "_" & Format(Date, "MM-DD-YYYY") & "_" & Format(Time, "HH-MM-SS") & ".xlsm")
Select Case UsrRsp
Case -1 'Gesichert Format(Date(),"DD.MM.YYYY")
Case 0 'Abgebrochen
End Select

   Exit Sub
   
err_fehler1:
  MsgBox "Error-Code: err_code_1 " & vbCrLf & "Error no.: " & Err.Number & _
  vbCrLf & "Error description: " & Err.Description
End Sub

Private Sub sendemail_Click()

sendemail.Font.Bold = True
sendemail.Font.Size = 11
sendemail.Font.Name = "Arial"
sendemail.height = 30
sendemail.width = 150
sendemail.Left = 300
sendemail.Top = 511



' UM MAIL ZU ERZEUGEN
Dim App, Itm
Dim DATEI As String
' Speichern damit aktuelle Version versandt wird
Application.DisplayAlerts = False
ActiveWorkbook.Save
Application.DisplayAlerts = True
' E-Mailprogramm ansteuern
On Error GoTo KEINOUTLOOK
Set App = CreateObject("Outlook.Application")
Set Itm = App.CreateItem(0)
On Error GoTo 0
DATEI = ActiveWorkbook.FullName
With Itm
.Subject = ""
.To = ""
'.Cc =
.Attachments.Add (DATEI)
.display
End With
Set App = Nothing
Set Itm = Nothing
Exit Sub
KEINOUTLOOK:
MsgBox "Error because you haven't Outlook please add the file manually to your Mail software"
End Sub

' Print sheets
' Druckerauswahl
Private Sub print_sheets_Click()

print_sheets.Font.Bold = True
print_sheets.Font.Size = 11
print_sheets.Font.Name = "Arial"
print_sheets.height = 30
print_sheets.width = 150
print_sheets.Left = 554
print_sheets.Top = 511


' Fehlerhandling
  On Error GoTo err_fehler1
  
Dim strPrinterName As String
strPrinterName = Application.ActivePrinter
'Application.Dialogs(xlDialogPrinterSetup).Show

If Not (Application.Dialogs(xlDialogPrinterSetup).Show) Then Exit Sub

' Drucken nach Auswahl

If CheckBox4 = True Then ThisWorkbook.Worksheets("Basic Data").PrintOut Preview:=True
If CheckBox5 = True Then ThisWorkbook.Worksheets("Compliance Matrix").PrintOut Preview:=True
If CheckBox11 = True Then ThisWorkbook.Worksheets("Feasibility Study").PrintOut Preview:=True
If CheckBox8 = True Then ThisWorkbook.Worksheets("Sub-Supplier-Tree Sketched").PrintOut Preview:=True
If pr_approval_sheet = True Then ThisWorkbook.Worksheets("Approval Sheet").PrintOut Preview:=True


   Exit Sub
   
err_fehler1:
  MsgBox "Error-Code: err_code_2 " & vbCrLf & "Error no.: " & Err.Number & _
  vbCrLf & "Error description: " & Err.Description
  
End Sub

Private Sub workbookpcm_Click()
' Fehlerhandling
  On Error GoTo err_fehler1
'Messagebox
Dim a1 As String ' String Setzen f|fffd|r MsgBox
 a1 = MsgBox("ATTENTION:" & Chr(10) & "" & Chr(10) & "Are you sure to create the PCM - Extract" _
  & Chr(10) & "" _
  & Chr(10) & "It will be deleted everything up to the following tabs:" _
  & Chr(10) & "" _
  & Chr(10) & "1. Content, TR Evaluation" _
  & Chr(10) & "2. Basic Data" _
  & Chr(10) & "3. Compliance Matrix" _
  & Chr(10) & "4. PCM - SLP" _
  & Chr(10) & "5. PCM - Sub Supplier" _
  & Chr(10) & "6. SLP - Data" _
  & Chr(10) & "7. SLP - QOS" _
  & Chr(10) & "8. Version" _
  & Chr(10) & "" _
  & Chr(10) & "First it will open a save function to save the complete file then" _
  & Chr(10) & "a second save function will open to save the limited PCM Extract Version" _
  , vbYesNo + vbExclamation, "PCM - Extract") ' Abfrage Ja / Nein inkl. Text
    If a1 = vbNo Then ' Wenn Nein dann
       Exit Sub ' Abbruch
    Else 'ansonsten
    
    Dim UsrRsp
    Dim partno As String
    partno = Sheets("Participants").Range("K7").Value
    If Sheets("Participants").Range("K7").Value = "" Then partno = "No_Part_Number_exists"
    UsrRsp = Application.Dialogs(xlDialogSaveAs).Show("Tech_Review_" & partno & "_" & Format(Date, "MM-DD-YYYY") & "_" & Format(Time, "HH-MM-SS") & ".xlsm")
    Select Case UsrRsp
    Case -1 'Gesichert
    Case 0 'Abgebrochen
        Exit Sub
    End Select
    
    ActiveWorkbook.Protect Password:="skalar19731408discus", Structure:=True, Windows:=False
    ActiveWorkbook.Unprotect Password:="skalar19731408discus"
    
    'l|fffd|schen der Worksheets
    Application.DisplayAlerts = False
    Sheets("Capacity").Select
    ActiveWindow.SelectedSheets.Delete
    Sheets("Exception Form").Select
    ActiveWindow.SelectedSheets.Delete
    Sheets("MFSO").Select
    ActiveWindow.SelectedSheets.Delete
    Sheets("Technical Review").Select
    ActiveWindow.SelectedSheets.Delete
    Sheets("TR Action Items").Select
    ActiveWindow.SelectedSheets.Delete
    Sheets("Supply Chain Map").Select
    ActiveWindow.SelectedSheets.Delete
    Sheets("Documentation ZF").Select
    ActiveWindow.SelectedSheets.Delete
    Sheets("Documentation Supplier").Select
    ActiveWindow.SelectedSheets.Delete
    Sheets("Agenda").Select
    ActiveWindow.SelectedSheets.Delete
    Sheets("Process Flow").Select
    ActiveWindow.SelectedSheets.Delete
    
    'Einblenden von SLP-Data und SLP - QOS
    Worksheets("SLP-Data").Visible = True
    Worksheets("SLP - QOS").Visible = True
        
    Application.DisplayAlerts = True
    
    Sheets("Content").Select
    
    'Alle Checkboxen deaktivieren
    Dim Box As OLEObject
    For Each Box In ActiveSheet.OLEObjects
    Box.Object = False
    Next Box
    
    ActiveSheet.OLEObjects("APQP_extract").Enabled = False
    ActiveSheet.OLEObjects("CommandButton1").Enabled = True
    ActiveSheet.OLEObjects("CommandButton2").Enabled = True
    ActiveSheet.OLEObjects("CommandButton3").Enabled = False
    ActiveSheet.OLEObjects("CommandButton4").Enabled = False
    ActiveSheet.OLEObjects("capacity").Enabled = False
    ActiveSheet.OLEObjects("agenda").Enabled = False
    'ActiveSheet.OLEObjects("TR_evaluation").Enabled = False
    ActiveSheet.OLEObjects("MFA").Enabled = False
    ActiveSheet.OLEObjects("designreview").Enabled = False
    ActiveSheet.OLEObjects("actionitems").Enabled = False
    ActiveSheet.OLEObjects("trwupload").Enabled = False
    ActiveSheet.OLEObjects("supplierupload").Enabled = False
    ActiveSheet.OLEObjects("Progress_Report").Enabled = False
    ActiveSheet.OLEObjects("Phases_5").Enabled = False
    ActiveSheet.OLEObjects("Key_Metrics").Enabled = False
    ActiveSheet.OLEObjects("Open_Issues").Enabled = False
    ActiveSheet.OLEObjects("CheckBox7").Enabled = False
    ActiveSheet.OLEObjects("CheckBox9").Enabled = True
    ActiveSheet.OLEObjects("CheckBox1").Enabled = False
    ActiveSheet.OLEObjects("CheckBox2").Enabled = False
    ActiveSheet.OLEObjects("CheckBox3").Enabled = False
    ActiveSheet.OLEObjects("CheckBox13").Enabled = False
    ActiveSheet.OLEObjects("CheckBox8").Enabled = True
    ActiveSheet.OLEObjects("CheckBox10").Enabled = True
    ActiveSheet.OLEObjects("CheckBox11").Enabled = False
    ActiveSheet.OLEObjects("workbookpcm").Enabled = False
    ActiveSheet.OLEObjects("CheckBox12").Enabled = True
    ActiveSheet.OLEObjects("CheckBox14").Enabled = False
    ActiveSheet.OLEObjects("CheckBox15").Enabled = False
    ActiveSheet.OLEObjects("CheckBox16").Enabled = False
    ActiveSheet.OLEObjects("CheckBox17").Enabled = False
    ActiveSheet.OLEObjects("CheckBox18").Enabled = False
    ActiveSheet.OLEObjects("CheckBox19").Enabled = False
    ActiveWorkbook.Protect Password:="skalar19731408discus", Structure:=True, Windows:=False
    
    'Abspeichern von der Datei
    'Dim UsrRsp
    'Dim partno As String
    partno = Sheets("Participants").Range("K7").Value
        If Sheets("Participants").Range("K7").Value = "" Then partno = "No_Part_Number_exists"
        UsrRsp = Application.Dialogs(xlDialogSaveAs).Show("PCM_Extract_" & partno & "_" & Format(Date, "MM-DD-YYYY") & "_" & Format(Time, "HH-MM-SS") & ".xlsm")
    Select Case UsrRsp
        Case -1 'Gesichert
        Case 0 'Abgebrochen
            Exit Sub
End Select
End If

   Exit Sub
   
err_fehler1:
  MsgBox "Error-Code: err_code_3 " & vbCrLf & "Error no.: " & Err.Number & _
  vbCrLf & "Error description: " & Err.Description
  
End Sub

'APQP Extract
Private Sub APQP_extract_Click()
' Fehlerhandling
  On Error GoTo err_fehler1
  
    'Messagebox
Dim a1 As String ' String Setzen f|fffd|r MsgBox
 a1 = MsgBox("ATTENTION:" & Chr(10) & "" & Chr(10) & "Are you sure to create the APQP - Extract" _
  & Chr(10) & "" _
  & Chr(10) & "It will be deleted everything up to the following tabs:" _
  & Chr(10) & "" _
  & Chr(10) & " 1. Content, TR Evaluation, Basic Data" _
  & Chr(10) & " 2. Technical Review, Technical Review Action Items" _
  & Chr(10) & " 3. Compliance Matrix" _
  & Chr(10) & " 4. PCM - SLP, PCM - Sub Supplier" _
  & Chr(10) & " 5. Supply Chain Map, Premliminary Process Flow" _
  & Chr(10) & " 6. SLP Data, SLP Data, SLP QOS" _
  & Chr(10) & " 7. APQP 5 Phasen, Progress Report" _
  & Chr(10) & " 8. Key Metrics Report, Open Issues" _
  & Chr(10) & " 9. Version, LoIC Template" _
  & Chr(10) & "10. TRW and Supplier Upload Documentation" _
  & Chr(10) & "" _
  & Chr(10) & "First it will open a save function to save the complete file then" _
  & Chr(10) & "a second save function will open to save the limited APQP Extract Version" _
  , vbYesNo + vbExclamation, "APQP - Extract") ' Abfrage Ja / Nein inkl. Text
    If a1 = vbNo Then ' Wenn Nein dann
       Exit Sub ' Abbruch
    Else 'ansonsten
    
    
    Dim UsrRsp
    Dim partno As String
    partno = Sheets("Participants").Range("K7").Value
    If Sheets("Participants").Range("K7").Value = "" Then partno = "No_Part_Number_exists"
    UsrRsp = Application.Dialogs(xlDialogSaveAs).Show("Tech_Review_" & partno & "_" & Format(Date, "MM-DD-YYYY") & "_" & Format(Time, "HH-MM-SS") & ".xlsm")
    Select Case UsrRsp
    Case -1 'Gesichert
    Case 0 'Abgebrochen
        Exit Sub
    End Select
    
    
    ActiveWorkbook.Protect Password:="skalar19731408discus", Structure:=True, Windows:=False
    ActiveWorkbook.Unprotect Password:="skalar19731408discus"
    
    'l|fffd|schen der Worksheets
    Application.DisplayAlerts = False
    'Sheets("TR Evaluation").Select
    'ActiveWindow.SelectedSheets.Delete
    Sheets("MFSO").Select
    ActiveWindow.SelectedSheets.Delete
    Sheets("Agenda").Select
    ActiveWindow.SelectedSheets.Delete
    
    'Einblenden von SLP-Data und SLP - QOS und APQP registers
    Worksheets("SLP-Data").Visible = True
    Worksheets("SLP - QOS").Visible = True
    Worksheets("5 Phases").Visible = True
    Worksheets("Open Issues").Visible = True
    Worksheets("Progress Report").Visible = True
    Worksheets("Key Metrics Report").Visible = True
    
    Application.DisplayAlerts = True
    
    Sheets("Content").Select
    
    'Alle Checkboxen deaktivieren
    Dim Box As OLEObject
    For Each Box In ActiveSheet.OLEObjects
    Box.Object = False
    Next Box
    
    ActiveSheet.OLEObjects("APQP_extract").Enabled = False
    ActiveSheet.OLEObjects("CommandButton1").Enabled = True
    ActiveSheet.OLEObjects("CommandButton2").Enabled = True
    ActiveSheet.OLEObjects("CommandButton3").Enabled = True
    ActiveSheet.OLEObjects("CommandButton4").Enabled = True
    ActiveSheet.OLEObjects("capacity").Enabled = False
    ActiveSheet.OLEObjects("agenda").Enabled = False
   ' ActiveSheet.OLEObjects("TR_evaluation").Enabled = False
    ActiveSheet.OLEObjects("MFA").Enabled = False
    ActiveSheet.OLEObjects("designreview").Enabled = True
    ActiveSheet.OLEObjects("actionitems").Enabled = True
    ActiveSheet.OLEObjects("trwupload").Enabled = True
    ActiveSheet.OLEObjects("supplierupload").Enabled = True
    ActiveSheet.OLEObjects("Progress_Report").Enabled = True
    ActiveSheet.OLEObjects("Phases_5").Enabled = True
    ActiveSheet.OLEObjects("Key_Metrics").Enabled = True
    ActiveSheet.OLEObjects("Open_Issues").Enabled = True
    ActiveSheet.OLEObjects("CheckBox7").Enabled = False
    ActiveSheet.OLEObjects("CheckBox9").Enabled = True
    ActiveSheet.OLEObjects("CheckBox1").Enabled = False
    ActiveSheet.OLEObjects("CheckBox2").Enabled = True
    ActiveSheet.OLEObjects("CheckBox3").Enabled = True
    ActiveSheet.OLEObjects("CheckBox13").Enabled = True
    ActiveSheet.OLEObjects("CheckBox8").Enabled = True
    ActiveSheet.OLEObjects("CheckBox10").Enabled = True
    ActiveSheet.OLEObjects("CheckBox11").Enabled = True
    ActiveSheet.OLEObjects("workbookpcm").Enabled = False
    ActiveSheet.OLEObjects("CheckBox12").Enabled = True
    ActiveSheet.OLEObjects("CheckBox14").Enabled = True
    ActiveSheet.OLEObjects("CheckBox15").Enabled = True
    ActiveSheet.OLEObjects("CheckBox16").Enabled = True
    ActiveSheet.OLEObjects("CheckBox17").Enabled = True
    ActiveSheet.OLEObjects("CheckBox18").Enabled = False
    ActiveSheet.OLEObjects("CheckBox19").Enabled = False
    
    ActiveWorkbook.Protect Password:="skalar19731408discus", Structure:=True, Windows:=False
    Tabelle3.Protect Password:="trwdalphi19731408" 'Blatt sch|fffd|tzen
    
    'Abspeichern von der Datei
    'Dim UsrRsp
    'Dim partno As String
    partno = Sheets("Participants").Range("K7").Value
        If Sheets("Participants").Range("K7").Value = "" Then partno = "No_Part_Number_exists"
        UsrRsp = Application.Dialogs(xlDialogSaveAs).Show("APQP_Extract_" & partno & "_" & Format(Date, "MM-DD-YYYY") & "_" & Format(Time, "HH-MM-SS") & ".xlsm")
    Select Case UsrRsp
        Case -1 'Gesichert
        Case 0 'Abgebrochen
            Exit Sub
End Select
End If

   Exit Sub
   
err_fehler1:
  MsgBox "Error-Code: err_code_4 " & vbCrLf & "Error no.: " & Err.Number & _
  vbCrLf & "Error description: " & Err.Description
  
End Sub
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 45, 0, MSForms, CommandButton2"
Option Explicit

Private Sub CommandButton1_Click()
 Worksheets("Content").Select
    
    CommandButton1.Font.Size = 11
CommandButton1.Font.Name = "Arial"
CommandButton1.height = 25
CommandButton1.width = 100
CommandButton1.Left = 55
CommandButton1.Top = 10
End Sub

' |fffd|ffnen des Upload Fensters bei Aktivierung des Worksheets
Private Sub Worksheet_Activate()
On Error Resume Next

Static anzahldurchl As Integer
anzahldurchl = 0
'Worksheets("Documentation ZF").Unprotect ("trwdalphi19731408")
'Upload_ZF.Show 0
End Sub

' Upload Fenster beim verlassen schliessen
Private Sub Worksheet_Deactivate()
'On Error Resume Next
'Unload Upload_ZF
End Sub

' |fffd|ffnen der Upload Fensters bei Akttivierung des Hyperlinks D1
'Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
'' Fehlerhandling
'  On Error GoTo err_fehler1
'
'    If Target.Range.Address = "$I$24" Then Call Upload_ZF.Show
'
'   Exit Sub
'
'err_fehler1:
'  MsgBox "Error-Code: err_code_30 " & vbCrLf & "Error no.: " & Err.Number & _
'  vbCrLf & "Error description: " & Err.Description
'
'End Sub

' |fffd|ffnen UserForm Upload_TRW
'Public Sub Open_Upload_TRW()
'Upload_TRW.Show
'End Sub

Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 48, 0, MSForms, CommandButton2"
Option Explicit
'
'Sub Ungesch|fffd|tzeZellenL|fffd|schen2()
'For Each zelle In Range("A1:BI68") ' anpassen
'On Error Resume Next
'If zelle.Locked = False Then
'    zelle.Value = ""
'End If
'Next
'End Sub

'
'' |fffd|ffnen des Upload Fensters bei Aktivierung des Worksheets
'Private Sub Worksheet_Activate()
'On Error Resume Next
'Worksheets("Documentation Supplier").Unprotect ("trwdalphi19731408")
''Upload_Supplier.Show 0
'End Sub

'' Upload Fenster beim verlassen schliessen
'Private Sub Worksheet_Deactivate()
'On Error Resume Next
'Unload Upload_Supplier
'End Sub

'' |fffd|ffnen der Upload Fensters bei Akttivierung des Hyperlinks D1
'Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
'' Fehlerhandling
'  On Error GoTo err_fehler1
'
'    If Target.Range.Address = "$I$24" Then Call Upload_Supplier.Show
'
'   Exit Sub
'
'err_fehler1:
'  MsgBox "Error-Code: err_code_31 " & vbCrLf & "Error no.: " & Err.Number & _
'  vbCrLf & "Error description: " & Err.Description
'End Sub
'
'' |fffd|ffnen UserForm Upload_Supplier
''Sub Open_Upload_Supplier()
''Upload_Supplier.Show
'End Sub


Private Sub CommandButton1_Click()
Worksheets("Content").Select
    
    CommandButton1.Font.Size = 11
CommandButton1.Font.Name = "Arial"
CommandButton1.height = 25
CommandButton1.width = 100
CommandButton1.Left = 50
CommandButton1.Top = 10
End Sub
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 10, 0, MSForms, CommandButton2"
Attribute VB_Control = "CommandButton2, 11, 1, MSForms, CommandButton2"
Attribute VB_Control = "ComplianceCheckBox, 12, 2, MSForms, CheckBox2"
Attribute VB_Control = "SubSupplierCheckBox, 13, 3, MSForms, CheckBox2"
Option Explicit


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'** Autor: Nathalie Serban **
'Kontrollk|fffd|stchen klick f|fffd|r manuelles Ausw|fffd|hlen der Sheets

Private Sub ComplianceCheckBox_Click()


'Klick bei Kontrollk|fffd|stchen Compliance Matrix --> Einblenden der Sheets:
'Compliance Matrix,Documentation TRW,Documentation Supplier

If ComplianceCheckBox.Value = True Then

    ActiveWorkbook.Protect Password:="skalar19731408discus", Structure:=True, Windows:=False
    ActiveWorkbook.Unprotect Password:="skalar19731408discus"

Worksheets("Compliance Matrix").Visible = True

Worksheets("Documentation ZF").Visible = True

Worksheets("Documentation Supplier").Visible = True

End If

'sonst Ausblenden

If ComplianceCheckBox.Value = False And Range("AU18") = "C" Then
  ActiveWorkbook.Unprotect Password:="skalar19731408discus"
Worksheets("Compliance Matrix").Visible = False

Worksheets("Documentation ZF").Visible = True

Worksheets("Documentation Supplier").Visible = True

End If
ActiveWorkbook.Protect Password:="skalar19731408discus", Structure:=True, Windows:=False
End Sub

'Checkbox zum Selektieren des Sheets Sub-Supplier-Tree Sketched,
'Bei Klick --> sichtbar, ansonsten nicht

Private Sub SubSupplierCheckBox_Click()

If SubSupplierCheckBox.Value = True Then

    ActiveWorkbook.Protect Password:="skalar19731408discus", Structure:=True, Windows:=False
    ActiveWorkbook.Unprotect Password:="skalar19731408discus"

Worksheets("Sub-Supplier-Tree Sketched").Visible = True
Worksheets("Documentation ZF").Visible = True

Worksheets("Documentation Supplier").Visible = True

End If

If SubSupplierCheckBox.Value = False And Range("AU18") = "C" Or _
SubSupplierCheckBox.Value = False And Range("AU18") = "B" Then
ActiveWorkbook.Unprotect Password:="skalar19731408discus"
Worksheets("Sub-Supplier-Tree Sketched").Visible = False


End If
ActiveWorkbook.Protect Password:="skalar19731408discus", Structure:=True, Windows:=False
End Sub

'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


'** Autor: Nathalie Serban **
'Schriftgr|fffd||fffd|e, H|fffd|he etc der Buttons festsetzen

Private Sub CommandButton1_Click()
    Worksheets("Content").Select
    ActiveCell.Activate
    
CommandButton1.Font.Size = 11
CommandButton1.Font.Name = "Arial"
CommandButton1.height = 25
CommandButton1.width = 100
CommandButton1.Left = 15
CommandButton1.Top = 10

End Sub

'Reset Form Button -> Frank Schindler 02.05.2017

Private Sub CommandButton2_Click()
 
CommandButton2.Font.Size = 11
CommandButton2.Font.Name = "Arial"
CommandButton2.height = 25
CommandButton2.width = 100
CommandButton2.Left = 130
CommandButton2.Top = 10


' Fehlerhandling
  On Error GoTo err_fehler1
  
  
Dim a1 As String ' String Setzen f|fffd|r MsgBox
 a1 = MsgBox("Are you sure you want to reset the form? All data will be lost.", vbYesNo, "Reset Form") ' Abfrage Ja / Nein inkl. Text
    If a1 = vbNo Then ' Wenn Nein dann
       Exit Sub ' Abbruch
    Else ' ansonsten
Dim ObjOLE  As OLEObject ' String setzen f|fffd|r OLEObject
   For Each ObjOLE In ActiveSheet.OLEObjects ' |fffd|berpr|fffd|fen aller OptionButton
      If TypeOf ObjOLE.Object Is MSForms.OptionButton Then ' Wenn OptionButton aktiv dann
         ObjOLE.Object.Value = False ' auf inaktiv setzen
   End If
   Next ObjOLE ' n|fffd|chsten Object
End If

' L|fffd|schen der Inhalte von den Eingabefeldern
Dim zelle As Range
For Each zelle In Range("A1:BI70") ' anpassen
On Error Resume Next
If zelle.Locked = False Then
    zelle.Value = ""
End If
Next
    
MsgBox "Reset successful."

   Exit Sub
   
err_fehler1:
  MsgBox "Error-Code: err_code_32 " & vbCrLf & "Error no.: " & Err.Number & _
  vbCrLf & "Error description: " & Err.Description
  
 
End Sub


'** Autor: Nathalie Serban **
'Schriftgr|fffd||fffd|e, H|fffd|he etc der Buttons festsetzen

Private Sub Worksheet_Activate()

End Sub

'** Autor: Nathalie Serban **
' Dropdown Men|fffd| in Zelle AU18

Private Sub Worksheet_Change(ByVal Target As Range)

ActiveWorkbook.Unprotect Password:="skalar19731408discus"

If Target.Address = "$AU$18" Then

'Wenn B Teil, dann Sub Supplier Tree verbergen

If Target = "B" Then
      Sheets("Sub-Supplier-Tree Sketched").Visible = xlSheetHidden
       Sheets("Compliance Matrix").Visible = True
            Sheets("Documentation ZF").Visible = True
              Sheets("Documentation Supplier").Visible = True
ActiveWorkbook.Protect Password:="skalar19731408discus"

      Exit Sub
      End If
      
'Wenn C Teil, dann Sub Supplier Tree + Compliance Matrix verbergen

If Target = "C" Then
     Sheets("Sub-Supplier-Tree Sketched").Visible = xlSheetHidden
          Sheets("Compliance Matrix").Visible = xlSheetHidden
            Sheets("Documentation ZF").Visible = True
              Sheets("Documentation Supplier").Visible = True
ActiveWorkbook.Protect Password:="skalar19731408discus"

   Else
' Ansonsten alles einblenden (bei A Teil)
      Sheets("Sub-Supplier-Tree Sketched").Visible = xlSheetVisible
      Sheets("Compliance Matrix").Visible = xlSheetVisible
      Worksheets("Documentation ZF").Visible = True
Worksheets("Documentation Supplier").Visible = True

ActiveWorkbook.Protect Password:="skalar19731408discus"
   End If
  
End If


End Sub

'Kalender

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
' Fehlerhandling
  On Error GoTo err_fehler1
  
If Target.Address = "$K$5:$T$5" Then
    frmCalendar.Show
    Range("K5:T5") = g_datCalendarDate
End If
If Target.Address = "$K$18:$T$18" Then
    frmCalendar.Show
    Range("K18:T18") = g_datCalendarDate
End If
If Target.Address = "$K$20:$T$20" Then
    frmCalendar.Show
    Range("K20:T20") = g_datCalendarDate
End If
If Target.Address = "$K$24:$T$24" Then
    frmCalendar.Show
    Range("K24:T24") = g_datCalendarDate
End If

If Target.Address = "$K$26:$T$26" Then
    frmCalendar.Show
    Range("K22:T22") = g_datCalendarDate
End If

If Target.Address = "$AC$20:$AL$20" Then
    frmCalendar.Show
    Range("AC20:AL20") = g_datCalendarDate
End If



   Exit Sub
   
err_fehler1:
  MsgBox "Error-Code: err_code_33 " & vbCrLf & "Error no.: " & Err.Number & _
  vbCrLf & "Error description: " & Err.Description
  
End Sub
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

'** Autor: Nathalie Serban **

Private Sub Worksheet_Activate()

On Error Resume Next

    'gr|fffd|ne H|fffd|kchen ausblenden
    Worksheets("SWAT Data Extract").Shapes.Range(Array("haken1")).Visible = False
    Worksheets("SWAT Data Extract").Shapes.Range(Array("haken2")).Visible = False
    Worksheets("SWAT Data Extract").Shapes.Range(Array("haken3")).Visible = False
    Worksheets("SWAT Data Extract").Range("Q6").ClearContents
    
End Sub

Attribute VB_Name = "Tabelle8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Upload_Documentations_ZF"

'** Autor: Nathalie Serban/Frank Schindler**

' Auslagerungspuffer auf C:\Temp\
Private Declare Function SearchTreeForFile Lib "imagehlp.dll" ( _
    ByVal RootPath As String, ByVal InputPathName As String, _
    ByVal OutputPathBuffer As String) As Long
    
    
Const strPath As String = "C:\Temp\" ' *** anpassen


Dim strFile As String

' |fffd|ffnen Durchsuchen Fenster
Private Function FindFile(ByVal Path As String, ByVal File As String) As String
    Dim strFile As String * 1024
    Dim strSearch As String
    If SearchTreeForFile(Path, File, strFile) Then
        FindFile = Left$(strFile, InStr(strFile, vbNullChar) - 1)
    Else
        strSearch = GetAFile(File)
        If strSearch = "" Then
            FindFile = ""
        Else
            FindFile = strSearch
        End If
    End If
End Function

' Gehe auf Laufwerk C: und nehme ausgew|fffd|hlte Datei
Private Function GetAFile(strFile As String) As String
    With Application.FileDialog(msoFileDialogFilePicker)
        .InitialFileName = "C:\" ' *** anpassen
        .Title = "File"
        .ButtonName = "Select..."
        .InitialView = msoFileDialogViewDetails
        If .Show = -1 Then
            strFile = .SelectedItems(1)
        Else
            strFile = ""
        End If
    End With
    GetAFile = strFile
End Function


'________________________UPLOAD

' 1. Drawing
Sub doc1_Click()
Dim objIcon As Object

Static lngColumn As Long
Dim strTMP As String

Static lngCount As Long
Static anzahldurchl As Integer


    On Error GoTo Fin
    Application.ScreenUpdating = False
    
  For lngCount = 1 To 1
    
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("L" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = anzahldurchl + 12 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(7, lngColumn).Top
                objIcon.Left = .Cells(12, lngColumn).Left
             
            End If
            
            Set objIcon = Nothing
        End With
        
  Next lngCount

          anzahldurchl = anzahldurchl + 2
                   
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description
End Sub


' 2. PCM
Sub doc2_Click()
Dim objIcon As Object
 Static lngColumn As Long
 Static anzahldurchl As Integer
    Dim strTMP As String
    Dim lngCount As Long
        
    On Error GoTo Fin
    Application.ScreenUpdating = False
    
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = anzahldurchl + 12 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(11, lngColumn).Top
                objIcon.Left = .Cells(2, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
    
          anzahldurchl = anzahldurchl + 2
          
          
          
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description
End Sub

' Specification
Sub doc4_Click()
Dim objIcon As Object
 Static lngColumn As Long
 Static anzahldurchl As Integer
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = anzahldurchl + 12 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(15, lngColumn).Top
                objIcon.Left = .Cells(2, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
    
     anzahldurchl = anzahldurchl + 2
   
     
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

'  Documentation
Sub doc5_Click()
Dim objIcon As Object
     Static lngColumn As Long
 Static anzahldurchl As Integer

    Dim strTMP As String
    Dim lngCount As Long
    
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = anzahldurchl + 12 'Spalte
             
        
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(22, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
    
anzahldurchl = anzahldurchl + 2

Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub



' L|fffd|schen aller Attachments
 Sub CommandButton2_Click()

On Error Resume Next

  Dim objShp As Shape
  Dim rng As Range
  
   Dim wsSrc As Worksheet
Set wsSrc = Worksheets("Documentation ZF")
   
   'Dim wsDst As Worksheet
   Dim i As Long
    If MsgBox("Are you sure to delete all Objects?", _
      vbQuestion + vbYesNo, "Delete all Objects!") = vbNo Then
      Exit Sub
      Else
 
  Set rng = wsSrc.Range("L6:o24")
  
  For Each objShp In ActiveSheet.Shapes
    If Not Intersect(objShp.TopLeftCell, rng) Is Nothing Then objShp.Delete
  Next
  
Set rng = Nothing
   
MsgBox "Reset Successfully"

   End If
End Sub

Sub detailleddescriptionZF()

Application.ScreenUpdating = False

With Worksheets("Documentation ZF")
    If .Range("AB2").Value = 1 Then
     .Shapes("Rechteck1").Visible = True
      .Range("AB2").Value = 0
      Else
.Shapes("Rechteck1").Visible = False
  .Range("AB2").Value = 1
    End If
    End With
    
End Sub

Sub errordescriptionzf()

Application.ScreenUpdating = False

With Worksheets("Documentation ZF")
    If .Range("AA2").Value = 1 Then
     .Shapes("Rechteck2").Visible = True
      .Range("AA2").Value = 0
      Else
.Shapes("Rechteck2").Visible = False
  .Range("AA2").Value = 1
    End If
    End With
    
End Sub

Sub VarC()
   Static iValue As Integer
   Static iCount As Integer
   iCount = iCount + 1
   MsgBox iCount & ". Aufruf: " & iValue
   iValue = iValue + 100
End Sub
Attribute VB_Name = "Upload_Supplier"
Attribute VB_Base = "0{876F2690-F883-4DA1-BA64-8A85FB6FCACF}{65A60701-67CA-4778-9128-208D3161A581}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

' Auslagerungspuffer auf C:\Temp\
Private Declare Function SearchTreeForFile Lib "imagehlp.dll" ( _
    ByVal RootPath As String, ByVal InputPathName As String, _
    ByVal OutputPathBuffer As String) As Long
    
    
Const strPath As String = "C:\Temp\" ' *** anpassen


Dim strFile As String

' |fffd|ffnen Durchsuchen Fenster
Private Function FindFile(ByVal Path As String, ByVal File As String) As String
    Dim strFile As String * 1024
    Dim strSearch As String
    If SearchTreeForFile(Path, File, strFile) Then
        FindFile = Left$(strFile, InStr(strFile, vbNullChar) - 1)
    Else
        strSearch = GetAFile(File)
        If strSearch = "" Then
            FindFile = ""
        Else
            FindFile = strSearch
        End If
    End If
End Function

' Gehe auf Laufwerk C: und nehme ausgew|fffd|hlte Datei
Private Function GetAFile(strFile As String) As String
    With Application.FileDialog(msoFileDialogFilePicker)
        .InitialFileName = "C:\" ' *** anpassen
        .Title = "File"
        .ButtonName = "Select..."
        .InitialView = msoFileDialogViewDetails
        If .Show = -1 Then
            strFile = .SelectedItems(1)
        Else
            strFile = ""
        End If
    End With
    GetAFile = strFile
End Function

Private Sub Label1_Click()

End Sub

'mit X Beenden verhinde
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

If CloseMode = vbFormControlMenu Then

MsgBox "Please click on the Button 'Back to Content' to close." & vbCrLf & vbCrLf & _
"Notice: You can edit your files by directly clicking on the sheet."

Cancel = True

End If

End Sub


' L|fffd|schen aller Attachments
Private Sub del1_Click()
Worksheets("Documentation Supplier").Unprotect ("trwdalphi19731408")
On Error Resume Next
   Dim wsSrc As Worksheet
   'Dim wsDst As Worksheet
   Dim i As Long
    If MsgBox("Are you sure to delete all Objects?", _
      vbQuestion + vbYesNo, "Delete all Objects!") = vbNo Then
      Exit Sub
      Else
      
   Set wsSrc = Worksheets("Documentation Supplier")
  'Set wsDst = Worksheets("Tabelle3")
   
   ' Documentation TRW alle Objecte l|fffd|schen
   For i = wsSrc.Shapes.Count To 1 Step -1
           wsSrc.Shapes(i).Delete
        Next
    End If
' L|fffd|schen von Eingabefeldern
wsSrc.Range( _
        "I5:I7,I9:I11,I13:I15,I17:I19" _
        ).ClearContents 'L|fffd|schen vom Inhalt im Bereich Seite 1
MsgBox "Reset Successfully"
End Sub

' 1. PCM
Private Sub doc1_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation Supplier")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 2
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(5, lngColumn).Top
                objIcon.Left = .Cells(2, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
    
    If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

' Back to Content
Private Sub close1_Click()
On Error Resume Next
Worksheets("Content").Select
Unload Me
End Sub

' 2. Feasibility Study
Private Sub doc2_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation Supplier")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 2
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(9, lngColumn).Top
                objIcon.Left = .Cells(2, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
    
    If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

' 3. Capacity Verification Sheet
Private Sub doc3_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation Supplier")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 2
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(13, lngColumn).Top
                objIcon.Left = .Cells(2, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
    
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

' 1. Dokumentation
Private Sub doc4_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation Supplier")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 2
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(17, lngColumn).Top
                objIcon.Left = .Cells(2, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
    
    If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

' 2. Dokumentation
Private Sub doc5_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation Supplier")
            strFile = .Range("G" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 7
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(5, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
    
    If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub
' 3. Dokumentation
Private Sub doc6_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation Supplier")
            strFile = .Range("G" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 7
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(9, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
    
    If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub
' 4. Dokumentation
Private Sub doc7_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation Supplier")
            strFile = .Range("G" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 7
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(13, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
    
    If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub
' 5. Dokumentation
Private Sub doc8_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation Supplier")
            strFile = .Range("G" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 7
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(17, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
    
    If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub


Attribute VB_Name = "Upload_ZF"
Attribute VB_Base = "0{56C2F160-A697-4777-A115-CA17B205A94D}{76E6C742-6E60-4D92-AF48-14E38BE0F0E1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

' Auslagerungspuffer auf C:\Temp\
Private Declare Function SearchTreeForFile Lib "imagehlp.dll" ( _
    ByVal RootPath As String, ByVal InputPathName As String, _
    ByVal OutputPathBuffer As String) As Long
    
Const strPath As String = "C:\Temp\" ' *** anpassen

'strPath = ThisWorkbook.Path


Dim strFile As String

' |fffd|ffnen Durchsuchen Fenster
Private Function FindFile(ByVal Path As String, ByVal File As String) As String
    Dim strFile As String * 1024
    Dim strSearch As String
    If SearchTreeForFile(Path, File, strFile) Then
        FindFile = Left$(strFile, InStr(strFile, vbNullChar) - 1)
    Else
        strSearch = GetAFile(File)
        If strSearch = "" Then
            FindFile = ""
        Else
            FindFile = strSearch
        End If
    End If
End Function

' Gehe auf Laufwerk C: und nehme ausgew|fffd|hlte Datei
Private Function GetAFile(strFile As String) As String
    With Application.FileDialog(msoFileDialogFilePicker)
        .InitialFileName = "C:\" ' *** anpassen
        .Title = "File"
        .ButtonName = "Select..."
        .InitialView = msoFileDialogViewDetails
        If .Show = -1 Then
            strFile = .SelectedItems(1)
        Else
            strFile = ""
        End If
    End With
    GetAFile = strFile
End Function

Private Sub Label1_Click()

End Sub

Private Sub UserForm_Activate()
Worksheets("Documentation ZF").Unprotect ("trwdalphi19731408")
End Sub

'**Autor: Nathalie Serban **
'mit X Beenden verhinde
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

If CloseMode = vbFormControlMenu Then

MsgBox "Please click on the Button 'Back to Content' to close." & vbCrLf & vbCrLf & _
"Notice: You can edit your files by directly clicking on the sheet."

Cancel = True

End If

End Sub

' L|fffd|schen aller Attachments
Private Sub CommandButton2_Click()
Worksheets("Documentation ZF").Unprotect ("trwdalphi19731408")
On Error Resume Next

   Dim wsSrc As Worksheet
   'Dim wsDst As Worksheet
   Dim i As Long
    If MsgBox("Are you sure to delete all Objects?", _
      vbQuestion + vbYesNo, "Delete all Objects!") = vbNo Then
      Exit Sub
      Else
   Set wsSrc = Worksheets("Documentation ZF")
  'Set wsDst = Worksheets("Tabelle3")
  wsSrc.Range("D13,D17,I17,D21,D25,I21,I25" _
        ).ClearContents 'L|fffd|schen vom Inhalt im Bereich Description
   ' Documentation TRW alle Objecte l|fffd|schen
   For i = wsSrc.Shapes.Count To 1 Step -1
           wsSrc.Shapes(i).Delete
        Next
    End If
MsgBox "Reset Successfully"
End Sub

' Back to Content
Private Sub CommandButton4_Click()
On Error Resume Next
Worksheets("Content").Select
Unload Me
End Sub

' 1. Drawing
Private Sub doc1_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 2 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(5, lngColumn).Top
                objIcon.Left = .Cells(2, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description
End Sub

' 2. PCM
Private Sub doc2_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 2 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(9, lngColumn).Top
                objIcon.Left = .Cells(2, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description
End Sub

' 3. MFSO
Private Sub doc3_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("A" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 2 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(13, lngColumn).Top
                objIcon.Left = .Cells(2, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

' 4. Capacity Verification Sheet
Private Sub doc4_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 2 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(17, lngColumn).Top
                objIcon.Left = .Cells(2, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

' 5. Other Documentation
Private Sub doc5_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("G" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 7 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(5, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub
' 6. Other Documentation
Private Sub doc6_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("G" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 7 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(9, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub
' 7. Other Documentation
Private Sub doc7_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("G" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 7 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(13, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub
' 8. Other Documentation
Private Sub doc8_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("G" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 7 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(17, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

' 9. Other Documentation
Private Sub doc9_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 2 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(21, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

' 10. Other Documentation
Private Sub doc10_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("G" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 7 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(21, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

' 11. Other Documentation
Private Sub doc11_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 2 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(25, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

' 12. Other Documentation
Private Sub doc12_Click()
Dim objIcon As Object
    Dim lngColumn As Long
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation ZF")
            strFile = .Range("G" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = lngColumn + 7 'Spalte
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(25, lngColumn).Top
                objIcon.Left = .Cells(7, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub


Attribute VB_Name = "Upload_documentations_supplier"
Option Explicit

' Auslagerungspuffer auf C:\Temp\
Private Declare Function SearchTreeForFile Lib "imagehlp.dll" ( _
    ByVal RootPath As String, ByVal InputPathName As String, _
    ByVal OutputPathBuffer As String) As Long
    
    
Const strPath As String = "C:\Temp\" ' *** anpassen

Dim strFile As String

' |fffd|ffnen Durchsuchen Fenster
Private Function FindFile(ByVal Path As String, ByVal File As String) As String
    Dim strFile As String * 1024
    Dim strSearch As String
    If SearchTreeForFile(Path, File, strFile) Then
        FindFile = Left$(strFile, InStr(strFile, vbNullChar) - 1)
    Else
        strSearch = GetAFile(File)
        If strSearch = "" Then
            FindFile = ""
        Else
            FindFile = strSearch
        End If
    End If
End Function

' Gehe auf Laufwerk C: und nehme ausgew|fffd|hlte Datei
Private Function GetAFile(strFile As String) As String
    With Application.FileDialog(msoFileDialogFilePicker)
        .InitialFileName = "C:\" ' *** anpassen
        .Title = "File"
        .ButtonName = "Select..."
        .InitialView = msoFileDialogViewDetails
        If .Show = -1 Then
            strFile = .SelectedItems(1)
        Else
            strFile = ""
        End If
    End With
    GetAFile = strFile
End Function

'________________________UPLOAD

' 1. PCM
Sub doc1_Click()
Dim objIcon As Object

    Dim strTMP As String
    Dim lngCount As Long
    
  Static lngColumn As Long
 Static anzahldurchl As Integer
 
    On Error GoTo Fin
    Application.ScreenUpdating = False
    
    
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation Supplier")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = anzahldurchl + 12
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(7, lngColumn).Top
                objIcon.Left = .Cells(12, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
    
     anzahldurchl = anzahldurchl + 2
    
    
    
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
    
    If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub


' 2. Feasibility Study
Sub doc2_Click()
Dim objIcon As Object
     Static lngColumn As Long
 Static anzahldurchl As Integer
 
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation Supplier")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = anzahldurchl + 12
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(11, lngColumn).Top
                objIcon.Left = .Cells(12, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
    
     anzahldurchl = anzahldurchl + 2
       
    
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
    
    If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

' 3. Capacity Verification Sheet
Sub doc3_Click()
Dim objIcon As Object
   Static lngColumn As Long
 Static anzahldurchl As Integer
 
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation Supplier")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = anzahldurchl + 12
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(15, lngColumn).Top
                objIcon.Left = .Cells(12, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
    
       anzahldurchl = anzahldurchl + 2
       
       
       
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
    
        If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub

' 1. Dokumentation
 Sub doc4_Click()
Dim objIcon As Object
Static lngColumn As Long
Static anzahldurchl As Integer
 
    Dim strTMP As String
    Dim lngCount As Long
    On Error GoTo Fin
    Application.ScreenUpdating = False
    For lngCount = 1 To 1
        With ThisWorkbook.Worksheets("Documentation Supplier")
            strFile = .Range("B" & lngCount).Text & ".pdf" ' *** eventuell anpassen
            strTMP = FindFile(strPath, strFile)
            If strTMP <> "" Then
                lngColumn = anzahldurchl + 12
                Set objIcon = .OLEObjects.Add(fileName:=strTMP, Link:=False, _
                DisplayAsIcon:=True, IconFileName:= _
                "C:\WINDOWS\Installer\{AC76BA86-7AD7-1031-7B44-A93000000001}\PDFFile_8.ico", _
                IconIndex:=0, IconLabel:=Dir$(strTMP))
                objIcon.Top = .Cells(22, lngColumn).Top
                objIcon.Left = .Cells(12, lngColumn).Left
            End If
            Set objIcon = Nothing
        End With
    Next lngCount
    
      anzahldurchl = anzahldurchl + 2
       
       
       
Fin:
    Application.ScreenUpdating = True
    Set objIcon = Nothing
    
    If Err.Number = 52 Or Err.Number = 53 Then MsgBox "Please upload a file from your local computer (not from sharepoint etc.)"
    Exit Sub
    If Err.Number <> 0 Then MsgBox "Fehler: " & Err.Number & " " & Err.Description

End Sub


' L|fffd|schen aller Attachments
Sub CommandButton2_Click()

On Error Resume Next

Dim objShp As Shape
Dim rng As Range

Dim wsSrc2 As Worksheet
Set wsSrc2 = Worksheets("Documentation Supplier")
   
   'Dim wsDst As Worksheet
   Dim i As Long
    If MsgBox("Are you sure to delete all Objects?", _
      vbQuestion + vbYesNo, "Delete all Objects!") = vbNo Then
      Exit Sub
      Else
 
  Set rng = wsSrc2.Range("L6:o24")
  
  For Each objShp In ActiveSheet.Shapes
    If Not Intersect(objShp.TopLeftCell, rng) Is Nothing Then objShp.Delete
  Next
  
Set rng = Nothing
   
MsgBox "Reset Successfully"

   End If
End Sub

Sub detailleddescriptionsupplier()

Application.ScreenUpdating = False

With Worksheets("Documentation Supplier")
    If .Range("AA2").Value = 1 Then
     .Shapes("Rechteck13").Visible = True
      .Range("AA2").Value = 0
      Else
.Shapes("Rechteck13").Visible = False
  .Range("AA2").Value = 1
    End If
    End With
    
End Sub

Sub errordescriptionsupplier()

Application.ScreenUpdating = False

With Worksheets("Documentation Supplier")
    If .Range("AB2").Value = 1 Then
     .Shapes("Rechteck14").Visible = True
      .Range("AB2").Value = 0
      Else
.Shapes("Rechteck14").Visible = False
  .Range("AB2").Value = 1
    End If
    End With
    
End Sub
Attribute VB_Name = "frmCalendar"
Attribute VB_Base = "0{C77620BF-C7E5-4053-8059-4229F8041986}{9C7003CE-0FF4-444D-99E2-CD8D88FF509D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private Sub close_calendar1_Click()
' Schliessen des Upload Fensters
Unload Me
End Sub

Private Sub lblKW3_Click()

End Sub

'=============================================================================================================================
' Index
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
' 1.  UserForm_Initialize    -   Initialisierung UserForm
' 2.  pFillCmbMonth          -   Dropdown mit Monatsnamen f|fffd|llen
' 3.  cmbMonth_Change        -   Refresh bei Monatswechsel
' 4.  cmbMonth_Exit          -   Refresh bei Monatswechsel
' 5.  udMonth_Change         -   Gleichschaltung Monat mit UpDown-Schalter (Buddy)      REMARKED IN VERS. 1.1 / 05.10.11
' 6.  txtYear_Change         -   Refresh bei Jahreswechsel
' 7.  setDataLabels          -   Tage in Raster verteilen
' 8.  pClearDataLabels       -   Raster zur|fffd|cksetzen
' 9.  pReturnDate            -   R|fffd|ckgabewert in globale Variable schreiben
' 10. pSetNewMonth           -   Raster mit neuem Monat bef|fffd|llen bei Klick auf "graue" Datumsfelder
' 11 - 15.                   -   Schaltfl|fffd|chen Monat und Jahr + und -
' 16 - 56.                   -   Click-Events auf Labels (Kein Errorhandling)
'======================================================================================================================

'=============================================================================================================================
'Prozeduren
'=============================================================================================================================
' 1. UserForm_Initialize
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Private Sub UserForm_Initialize()

On Error GoTo err_initialize
    g_bolInitialize = True              ' W|fffd|hrend Initialisierung werden automatisch Refreshs (Change- und Exit-Events) unterbunden
        txtYear.Text = Year(Date)       ' Initialwert Jahr
        Call pFillCmbMonth              ' Aufruf Bef|fffd|llung Dropdown "Monatsnamen"
        fSetMonthText (Month(Date))     ' |fffd|bersetzung der Inhalte des Dropdowns Monatsnamen
        Call setDataLabels(fChangeStrToInt(cmbMonth.Text), txtYear.Text)
    g_bolInitialize = False
Exit Sub

' Errorhandling
err_initialize:
    On Error Resume Next
    'MsgBox "Error " & Err.Number & " (" & Err.Description _
    '    & ") in der Prozedur 'UserForm_Initialize' in 'frmCalendar'. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Sub


'=============================================================================================================================
' 2. pFillCmbMonth  -  Dropdown mit Monatsnamen f|fffd|llen
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Private Sub pFillCmbMonth()
On Error GoTo err_pFillCmbMonth
    cmbMonth.AddItem "January"
    cmbMonth.AddItem "February"
    cmbMonth.AddItem "March"
    cmbMonth.AddItem "April"
    cmbMonth.AddItem "May"
    cmbMonth.AddItem "June"
    cmbMonth.AddItem "July"
    cmbMonth.AddItem "August"
    cmbMonth.AddItem "September"
    cmbMonth.AddItem "October"
    cmbMonth.AddItem "November"
    cmbMonth.AddItem "December"
Exit Sub

' Errorhandling
err_pFillCmbMonth:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'err_pFillCmbMonth' in 'frmCalendar'. Dropdown konnte nicht bef|fffd|llt werden. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
    
End Sub

'=============================================================================================================================
' 3. cmbMonth_Change    -  Refresh bei Monatswechsel
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
' Anmerkungen:      Bei Monatswechsel Refresh anstossen (ausser bei Initialisierung und beim Wechsel durch Klick auf "grauen" Datumsfeldern
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Private Sub cmbMonth_Change()
On Error GoTo err_cmbMonthChange
    If g_bolInitialize = False And g_bolMonthChange = False Then
        If fPlaus(cmbMonth.Text, 1) = True Then                     ' Wenn Monatsname korrekt eingegeben wurde und...
            If lblk2d1.Caption <> "" Then                           ' das Labelraster Eintr|fffd|ge enth|fffd|lt...
                Call pClearDataLabels                               ' Aufruf Prozedur um alle Eintr|fffd|ge zu entfernen
            End If
            Call setDataLabels(cmbMonth.Text, txtYear.Text, fChangeStrToInt(cmbMonth.Text))     ' Falls Raster nicht beschrieben, Aufruf f|fffd|r die Bef|fffd|llung des Monatsrasters
        End If
    End If
Exit Sub

' Errorhandling
err_cmbMonthChange:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'cmbMonth_Change' in 'frmCalendar'. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Sub
'=============================================================================================================================
' 4. cmbMonth_Exit      -  Refresh bei Monatswechsel
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
' Anmerkungen:      Bei Verlassen des Monatsfeldes Refresh anstossen (ausser bei Initialisierung und beim Wechsel durch Klick auf "grauen" Datumsfeldern
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Private Sub cmbMonth_Exit(ByVal Cancel As MSForms.ReturnBoolean)
On Error GoTo err_cmbMonthExit
    If g_bolInitialize = False And g_bolMonthChange = False Then
        Call pClearDataLabels
        If IsNumeric(cmbMonth.Text) = True Then
            Call setDataLabels(cmbMonth.Text, txtYear.Text)
        Else
            Call setDataLabels(cmbMonth.Text, txtYear.Text, fChangeStrToInt(cmbMonth.Text))
        End If
    End If
Exit Sub

' Errorhandling
err_cmbMonthExit:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'cmbMonth_Exit' in 'frmCalendar'. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Sub

'REMARKED IN VERSION 1.1 / 05.10.11
'=============================================================================================================================
' 5. udMonth_Change -   Gleichschaltung Monat mit UpDown-Schalter (Buddy)
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
' Anmerkungen:      Bei |fffd|nderung des Monats via UpDown-Schaltfl|fffd|che Refresh anstossen
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Private Sub udMonth_Change()

On Error GoTo err_udMonthChange
    If lblk2d1.Caption <> "" Then
        Call pClearDataLabels
    End If
    fSetMonthText (cmbMonth.Value)
    If g_bolMonthChange = False Then Call setDataLabels(cmbMonth.Value, txtYear.Text, fChangeStrToInt(cmbMonth.Value))
Exit Sub

' Errorhandling
err_udMonthChange:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'udMonth_Change' in 'frmCalendar'. Monatswechsel konnte nicht verarbeitet werden. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Sub

'=============================================================================================================================
' 6. txtYear_Change  -   Refresh bei Jahreswechsel
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
' Anmerkungen:      Bei |fffd|nderung des Jahres Refresh anstossen (ausser bei Initialisierung und beim Wechsel durch Klick auf "grauen" Datumsfeldern
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Private Sub txtYear_Change()
On Error GoTo err_txtYearChange
    If g_bolInitialize = False And g_bolMonthChange = False Then
        If lblk2d1.Caption <> "" Then
            Call pClearDataLabels
        End If
        If g_bolMonthChange = False Then
            If Len(txtYear.Text) = 4 And IsNumeric(txtYear.Text) = True And txtYear.Text > "1900" Then
                Call setDataLabels(cmbMonth.Value, txtYear.Text, fChangeStrToInt(cmbMonth.Text))
            End If
        End If
    End If
Exit Sub

' Errorhandling
err_txtYearChange:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'txtYear_Change' in 'frmCalendar'. Jahreswechsel konnte nicht verarbeitet werden. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Sub

'======================================================================================================================
' 7. setDataLabels - Tage in Raster verteilen
'======================================================================================================================
Private Sub setDataLabels(dMonth, dYear, Optional varMonth As Variant = "")
' Deklarationen
Dim strLabel            As String       'Name des jeweiligen Label-Steuerelements
Dim intCounter          As Integer      'Laufnummer f|fffd|r Tageszahl (1 - 28/29/30/31)
Dim intWeekCounter      As Integer      'Z|fffd|hler f|fffd|r die angezeigten Wochen (6)
Dim intDayCounter       As Integer      'Z|fffd|hler f|fffd|r die aktuelle Tagesnummer innerhalb der Wochen (1 - 7 | 1 = Montag)
Dim datLastDayMonth     As Date         'Letzter Tag im Monat als Datum
Dim intLastDayMonth     As Integer      'Letzter Tag im Monat als Ganzzahl
Dim datFirstDayOfMonth  As Date         'Erster Tag im Monat als Datum
Dim intStartKW          As Date         'Erste Kalenderwoche des angezeigten Zeitraums
Dim datActiveDate       As Date         'Aktuell bearbeitetes Datum
Dim bolPostActiveMonth  As Boolean      'Schalter, welcher auf True gesetzt wird, wenn die angezeigten Daten bereits zu n|fffd|chsten Monat geh|fffd|ren
Dim strKW               As String       'Name des Labels f|fffd|r die Kalenderwoche
' Z|fffd|hler und Variablen f|fffd|r Vormonat
Dim intVormonat         As Integer      'Z|fffd|hler f|fffd|r die Vearbeitung jener angezeigten Daten, welche zum Vormonat geh|fffd|ren
Dim intVormonatTag      As Integer      'Z|fffd|hler f|fffd|r die Vearbeitung jener angezeigten Daten, welche zum Vormonat geh|fffd|ren

' Initialisierung
bolPostActiveMonth = False
If varMonth <> "" Then dMonth = varMonth    ' Falls bei Aufruf der Prozedur mittels der optionalen Variable "varMonth" ein Monat (Zahl) |fffd|bergeben wurde, diese verwenden
intCounter = 1
intDayCounter = Weekday("01." & dMonth & "." & dYear, vbMonday)
intStartKW = "01." & dMonth & "." & dYear
intWeekCounter = 1
datLastDayMonth = fLastDayInMonth("01." & dMonth & "." & dYear)
intLastDayMonth = Mid(datLastDayMonth, 1, 2)
intVormonat = 0

' Verarbeitung Vormonat
For intVormonatTag = intDayCounter - 1 To 1 Step -1
        strLabel = "lblk1d" & intVormonatTag
        If dMonth <> 1 Then
            Me.Controls(strLabel).Caption = Mid(fLastDayInMonth("01." & dMonth - 1 & "." & dYear), 1, 2) - intVormonat
        Else
            Me.Controls(strLabel).Caption = Mid(fLastDayInMonth("01." & dMonth + 11 & "." & dYear - 1), 1, 2) - intVormonat
        End If
        Me.Controls(strLabel).ForeColor = &H808080
        intVormonat = intVormonat + 1
Next intVormonatTag


' Verarbeitung aktiver Monat
For intWeekCounter = 1 To 6                                         ' |fffd|bergeordnete Schlaufe f|fffd|r jede angezeigte Woche
    For intDayCounter = intDayCounter To 7                          ' Schlaufe f|fffd|r jeden Tag innerhalb einer Woche
        strLabel = "lblk" & intWeekCounter & "d" & intDayCounter    ' Identifizierung Label
        Me.Controls(strLabel).Caption = intCounter                  ' Beschriftung Label
        If bolPostActiveMonth = True Then Me.Controls(strLabel).ForeColor = &H808080    ' Wenn Datum ausserhalb Betrachtungszeitraum Schriftfarbe auf Grau setzen
        datActiveDate = DateSerial(dYear, dMonth, intCounter)
        If datActiveDate = Date Then                                ' Falls Datum = Heute Schriftart Rot und Fett
                Me.Controls(strLabel).Font.Bold = True
                Me.Controls(strLabel).ForeColor = 255
        End If
        
        intCounter = intCounter + 1
           
        ' Verarbeitung Folgemonat
        If intCounter = intLastDayMonth + 1 Then
            intCounter = 1              ' Reset Monatstag auf 1
            dMonth = dMonth + 1         ' Monat = Monat + 1
            If dMonth = 13 Then         ' Falls Monat = 13, dann Jahr erh|fffd|hen und Monatsnummer auf 1 (Januar) setzen
                dMonth = 1
                dYear = dYear + 1
            End If
            bolPostActiveMonth = True   ' Flag f|fffd|r Vearbeitung Folgemonat gesetzt.
        End If
        
    Next intDayCounter
    
    ' Kalenderwoche pro Woche ermitteln
    strKW = "lblKW" & intWeekCounter
    Me.Controls(strKW).Caption = fGetKW(datActiveDate)
    
    intDayCounter = 1
Next intWeekCounter

bolPostActiveMonth = False

Exit Sub

' Errorhandling
err_udMonthChange:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'setDataLabels' in 'frmCalendar'. Kalender konnte nicht aufgebaut werden. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Sub

'======================================================================================================================
' 8. pClearDataLabels - Raster zur|fffd|cksetzen
'======================================================================================================================
Sub pClearDataLabels()
Dim myCtl
On Error GoTo err_pClearDataLabels
    For Each myCtl In Me.Controls
        If myCtl.Name Like "lblk*" Then
            myCtl.Caption = ""
            myCtl.Font.Bold = False
            myCtl.ForeColor = &H80000012
        End If
    Next myCtl
Exit Sub

' Errorhandling
err_pClearDataLabels:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'pClearDataLabels' in 'frmCalendar'. Kalender konnte nicht zur|fffd|ckgesetzt werden. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Sub

'======================================================================================================================
' 9. pReturnDate - R|fffd|ckgabewert in globale Variable schreiben
'======================================================================================================================
Public Sub pReturnDate(dTag, dMonat, dJahr)
On Error GoTo err_pReturnDate
        g_datCalendarDate = DateSerial(dJahr, dMonat, dTag)
        Unload Me
Exit Sub

' Errorhandling
err_pReturnDate:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'pReturnDate' in 'frmCalendar'. R|fffd|ckgabewert konnte nicht |fffd|bergeben werden. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Sub

'======================================================================================================================
' 10. pSetNewMonth - Raster mit neuem Monat bef|fffd|llen bei Klick auf "graue" Datumsfelder
'======================================================================================================================
' |fffd|bergabeparameter:
'         intTypePrePost: 1 = Vormonat / 2 = Folgemonat
'----------------------------------------------------------------------------------------------------------------------

Private Sub pSetNewMonth(intTypePrePost)
On Error GoTo err_pSetNewMonth
g_bolMonthChange = True         ' Automatische Refreshs unterbinden

Call pClearDataLabels           ' Raster zur|fffd|cksetzen

' Verarbeitung
Select Case intTypePrePost
        Case 1  'Vormonat
            If fChangeStrToInt(cmbMonth.Text) = 1 Then          ' Falls aktueller Monat = Januar, dann Vormonat auf Dezember und Jahreswechsel vornehmen
                    txtYear.Text = txtYear.Text - 1
                    Call fSetMonthText(12)
                    Call setDataLabels(12, txtYear.Text)
            Else
                    Call fSetMonthText(fChangeStrToInt(cmbMonth.Text) - 1)
                    Call setDataLabels(fChangeStrToInt(cmbMonth.Text), txtYear.Text)
            End If
                
        Case 2  'Folgemonat
            If fChangeStrToInt(cmbMonth.Text) = 12 Then         ' Falls aktueller Monat = Dezember, dann Folgemonat auf Januar und Jahreswechsel vornehmen
                    txtYear.Text = txtYear.Text + 1
                    Call fSetMonthText(1)
                    Call setDataLabels(1, txtYear.Text)
            Else
                    Call fSetMonthText(fChangeStrToInt(cmbMonth.Text) + 1)
                    Call setDataLabels(fChangeStrToInt(cmbMonth.Text), txtYear.Text)
            End If
End Select

g_bolMonthChange = False

Exit Sub

' Errorhandling
err_pSetNewMonth:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'pSetNewMonth' in 'frmCalendar'. Monatswechsel konnte nicht verarbeitet werden. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Sub


'=============================================================================================================================
' 11 - 14 : Schaltfl|fffd|chen Monat und Jahr + und -
'=============================================================================================================================
Private Sub cmdMonthUp_Click()
    If cmbMonth.ListIndex < 11 Then cmbMonth.Text = cmbMonth.List(cmbMonth.ListIndex + 1)
End Sub

Private Sub cmdMonthDown_Click()
    If cmbMonth.ListIndex > 0 Then cmbMonth.Text = cmbMonth.List(cmbMonth.ListIndex - 1)
End Sub

Private Sub cmdYearUp_Click()
    txtYear.Text = txtYear.Text + 1
End Sub
Private Sub cmdYearDown_Click()
    txtYear.Text = txtYear.Text - 1
End Sub


'======================================================================================================================
' 15 - 56 : Click-Events auf Labels
'======================================================================================================================
' Anmerkungen:
'       Woche 1:            Pr|fffd|fung, ob Tag ausgegraut ist (Vormonat), wenn ja, Aufruf zum Setzen des Vormonats
'       Wochen 5 und 6:     Pr|fffd|fung, ob Tag ausgegraut ist (Folgemonat), wenn ja, Aufruf zum Setzen des Folgemonats
'----------------------------------------------------------------------------------------------------------------------

' Woche 1
Private Sub lblk1d1_Click()
If lblk1d1.ForeColor = &H808080 And lblk1d1.Caption > 10 Then
    Call pSetNewMonth(1)
Else
  Call pReturnDate(lblk1d1.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk1d2_Click()
If lblk1d2.ForeColor = &H808080 And lblk1d2.Caption > 10 Then
       Call pSetNewMonth(1)
Else
  Call pReturnDate(lblk1d2.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk1d3_Click()
If lblk1d3.ForeColor = &H808080 And lblk1d3.Caption > 10 Then
      Call pSetNewMonth(1)
Else
  Call pReturnDate(lblk1d3.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk1d4_Click()
If lblk1d4.ForeColor = &H808080 And lblk1d3.Caption > 10 Then
      Call pSetNewMonth(1)
Else
  Call pReturnDate(lblk1d4.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk1d5_Click()
If lblk1d5.ForeColor = &H808080 And lblk1d5.Caption > 10 Then
    Call pSetNewMonth(1)
Else
  Call pReturnDate(lblk1d5.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk1d6_Click()
If lblk1d6.ForeColor = &H808080 And lblk1d6.Caption > 10 Then
    Call pSetNewMonth(1)
Else
  Call pReturnDate(lblk1d6.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk1d7_Click()
If lblk1d7.ForeColor = &H808080 And lblk1d7.Caption > 10 Then
     Call pSetNewMonth(1)
Else
   Call pReturnDate(lblk1d7.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk2d1_Click()
  Call pReturnDate(lblk2d1.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk2d2_Click()
  Call pReturnDate(lblk2d2.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk2d3_Click()
  Call pReturnDate(lblk2d3.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk2d4_Click()
  Call pReturnDate(lblk2d4.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk2d5_Click()
  Call pReturnDate(lblk2d5.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk2d6_Click()
  Call pReturnDate(lblk2d6.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk2d7_Click()
  Call pReturnDate(lblk2d7.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk3d1_Click()
  Call pReturnDate(lblk3d1.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk3d2_Click()
  Call pReturnDate(lblk3d2.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk3d3_Click()
  Call pReturnDate(lblk3d3.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk3d4_Click()
  Call pReturnDate(lblk3d4.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk3d5_Click()
  Call pReturnDate(lblk3d5.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk3d6_Click()
  Call pReturnDate(lblk3d6.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk3d7_Click()
  Call pReturnDate(lblk3d7.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk4d1_Click()
  Call pReturnDate(lblk4d1.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk4d2_Click()
  Call pReturnDate(lblk4d2.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk4d3_Click()
  Call pReturnDate(lblk4d3.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk4d4_Click()
  Call pReturnDate(lblk4d4.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk4d5_Click()
  Call pReturnDate(lblk4d5.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk4d6_Click()
  Call pReturnDate(lblk4d6.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub
Private Sub lblk4d7_Click()
  Call pReturnDate(lblk4d7.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End Sub

'=======================================================================
' Woche 5
Private Sub lblk5d1_Click()
If lblk5d2.Caption < 15 Then        'lblk5d1.ForeColor = &H808080
        Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk5d1.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk5d2_Click()
If lblk5d2.Caption < 15 Then
           Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk5d2.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk5d3_Click()
If lblk5d3.Caption < 15 Then
        Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk5d3.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk5d4_Click()
If lblk5d4.Caption < 15 Then
            Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk5d4.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk5d5_Click()
If lblk5d5.Caption < 15 Then
        Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk5d5.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk5d6_Click()
If lblk5d6.Caption < 15 Then
          Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk5d6.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk5d7_Click()
If lblk5d7.Caption < 15 Then
 Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk5d7.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
'=================================================================================
'Woche 6
Private Sub lblk6d1_Click()
If lblk6d1.Caption < 15 Then
 Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk6d1.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
End If
End Sub
Private Sub lblk6d2_Click()
If lblk6d2.Caption < 15 Then
 Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk6d2.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
  End If
End Sub
Private Sub lblk6d3_Click()
If lblk6d3.Caption < 15 Then
 Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk6d3.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
  End If
End Sub
Private Sub lblk6d4_Click()
If lblk6d4.Caption < 15 Then
 Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk6d4.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
  End If
End Sub
Private Sub lblk6d5_Click()
If lblk6d5.Caption < 15 Then
 Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk6d5.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
  End If
End Sub
Private Sub lblk6d6_Click()
If lblk6d6.Caption < 15 Then
 Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk6d6.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
  End If
End Sub
Private Sub lblk6d7_Click()
If lblk6d7.Caption < 15 Then
 Call pSetNewMonth(2)
Else
  Call pReturnDate(lblk6d7.Caption, fChangeStrToInt(cmbMonth.Text), txtYear.Text)
  End If
End Sub

Private Sub UserForm_Terminate()
    If g_datCalendarDate = "00:00:00" Then End
End Sub
Attribute VB_Name = "modFunctions"
Option Explicit

'=============================================================================================================================
' Implementation:
'   1. Import Modul 'modFunctions'
'   2. Import UserForm 'modCalendar'
'   3. Aufruf via:      frmCalendar.Show
'   4. R|fffd|ckgabewert:    g_datCalendarDate
'=============================================================================================================================


' Public Variables
Public g_datCalendarDate As Date
Public g_bolInitialize As Boolean
Public g_bolMonthChange As Boolean

'=============================================================================================================================
' Index
'-----------------------------------------------------------------------------------------------------------------------------
' 1. fPlaus - Plausibilit|fffd|tspr|fffd|fungen
' 2. fSetMonthText - Umwandlung Ganzzahl zu Monatsname
' 3. fChangeStrToInt - Umwandlung Monatsname zu Ganzzahl
' 4. fGetKW - Berechnung Kalenderwoche pro Datum
' 5. fLastDayInMonth - Suche des letzten Tages eines Monats


'=============================================================================================================================
'Functions
'=============================================================================================================================
' 1. fPlaus - Plausibilit|fffd|tspr|fffd|fungen
'-----------------------------------------------------------------------------------------------------------------------------
' Eingabeparameter:
'        strPlaus               -   String - Monatsname
'        intPlausType       -  Integer - Plausibilit|fffd|tstyp (Mehrere Plausibilit|fffd|tspr|fffd|fungen via unterschiedlichen Codes (intPlausType). Gegenw|fffd|rtig nur Typ 1 (Manuelle Eingabe Monatsname) implementiert).
'-----------------------------------------------------------------------------------------------------------------------------
Function fPlaus(strPlaus, intPlausType) As Boolean
On Error GoTo err_fPlaus
   With frmCalendar
        Select Case intPlausType
            Case 1 'Monatsplaus
                    If .cmbMonth.Text = "January" Or _
                        .cmbMonth.Text = "February" Or _
                        .cmbMonth.Text = "March" Or _
                        .cmbMonth.Text = "April" Or _
                        .cmbMonth.Text = "May" Or _
                        .cmbMonth.Text = "June" Or _
                        .cmbMonth.Text = "July" Or _
                        .cmbMonth.Text = "August" Or _
                        .cmbMonth.Text = "September" Or _
                        .cmbMonth.Text = "October" Or _
                        .cmbMonth.Text = "November" Or _
                        .cmbMonth.Text = "December" Then
                        fPlaus = True
                    End If
        End Select
    End With
Exit Function

' Errorhandling
err_fPlaus:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'fPlaus' in 'modFunctions'. Plausibilit|fffd|tspr|fffd|fung konnte nicht vollzogen werden. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Function
'=============================================================================================================================
' 2. fSetMonthText - Umwandlung Ganzzahl zu Monatsname
' Eingabeparameter:
'        varMonth -   Integer - Monatsnummer
'-----------------------------------------------------------------------------------------------------------------------------
Function fSetMonthText(varMonth)
On Error GoTo err_fSetMonthText
        With frmCalendar
        
            Select Case varMonth
                Case 1
                    .cmbMonth.Text = "January"
                Case 2
                    .cmbMonth.Text = "February"
                Case 3
                    .cmbMonth.Text = "March"
                Case 4
                    .cmbMonth.Text = "April"
                Case 5
                    .cmbMonth.Text = "May"
                Case 6
                    .cmbMonth.Text = "June"
                Case 7
                    .cmbMonth.Text = "July"
                Case 8
                    .cmbMonth.Text = "August"
                Case 9
                    .cmbMonth.Text = "September"
                Case 10
                    .cmbMonth.Text = "October"
                Case 11
                    .cmbMonth.Text = "November"
                Case 12
                    .cmbMonth.Text = "December"
            End Select
            
        End With
Exit Function

' Errorhandling
err_fSetMonthText:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'fSetMonthText' in 'modFunctions'. Umwandlung Monatsname zu Monatsnummer konnte nicht verarbeitet werden.. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Function

'=============================================================================================================================
' 3. fChangeStrToInt - Umwandlung Monatsname zu Ganzzahl
' Eingabeparameter:
'        varMonth -   String -  Monatsname
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Function fChangeStrToInt(varMonth)
    Select Case varMonth
                Case "January"
                    fChangeStrToInt = 1
                Case "February"
                    fChangeStrToInt = 2
                Case "March"
                    fChangeStrToInt = 3
                Case "April"
                    fChangeStrToInt = 4
                Case "May"
                    fChangeStrToInt = 5
                Case "June"
                    fChangeStrToInt = 6
                Case "July"
                    fChangeStrToInt = 7
                Case "August"
                    fChangeStrToInt = 8
                Case "September"
                    fChangeStrToInt = 9
                Case "October"
                    fChangeStrToInt = 10
                Case "November"
                    fChangeStrToInt = 11
                Case "December"
                    fChangeStrToInt = 12
            End Select
Exit Function

' Errorhandling
err_fChangeStrToInt:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'fChangeStrToInt' in 'modFunctions'. Umwandlung Monatsnummer zu Monatsname konnte nicht verarbeitet werden. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Function


'=============================================================================================================================
' 4. fGetKW - Berechnung Kalenderwoche pro Datum
' Eingabeparameter:
'        d -   Datum
'-----------------------------------------------------------------------------------------------------------------------------
Function fGetKW(datKW As Date) As Integer
Dim datTemp As Date
On Error GoTo err_fGetKW
    datTemp = DateSerial(Year(datKW + (8 - Weekday(datKW)) Mod 7 - 3), 1, 1)
    fGetKW = (datKW - datTemp - 3 + (Weekday(datTemp) + 1) Mod 7) \ 7 + 1
Exit Function

' Errorhandling
err_fGetKW:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'fGetKW' in 'modFunctions'. Ermittlung Kalenderwoche fehlgeschlagen. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Function


'=============================================================================================================================
' 5. fLastDayInMonth - Suche des letzten Tages eines Monats
' Eingabeparameter:
'        dtmDate -   Datum - Optional (wenn leer dtmDate = Heute)
'-----------------------------------------------------------------------------------------------------------------------------
Function fLastDayInMonth(Optional dtmDate As Date = 0) As Date
On Error GoTo err_fLastDayInMonth
    If dtmDate = 0 Then
        dtmDate = Date
    End If
     fLastDayInMonth = DateSerial(Year(dtmDate), _
     Month(dtmDate) + 1, 0)
Exit Function

' Errorhandling
err_fLastDayInMonth:
    MsgBox "Error " & Err.Number & " (" & Err.Description _
        & ") in der Prozedur 'fLastDayInMonth' in 'modFunctions'. Ermittlung letzter Tag des Monats fehlgeschlagen. Ausf|fffd|hrung wird abgebrochen.", vbCritical, "Laufzeitfehler"
    End
End Function

Attribute VB_Name = "swatExtractImport"
Option Explicit

'** Autor: Nathalie Serban

'Globale Variablen
Dim filePath As String
Dim dateinameBuffer As String
Dim j As Integer

Dim swatID As String
Dim amountdataSet As Integer
Dim nextProgressStep As Integer
Dim progressIndex As Integer
Dim percentage As Double
Dim currentDataSet As String
Dim savedDataSet As Integer
Dim remainingDataSet As Integer


'--------------------------------------------STEP 1------------------------------------------------------

'** Autor: Nathalie Serban
Sub swatlink()

ActiveWorkbook.FollowHyperlink Address:="https://frdskpnw.emea.zf-world.com/sap/bc/webdynpro/sap/zknswat_app?sap-language=EN#" _
                                , NewWindow:=True
'Step 1 als erledigt kennzeichnen
Worksheets("SWAT Data Extract").Shapes.Range(Array("haken1")).Visible = True

End Sub

'Erkl|fffd|rung f|fffd|r Step 1
Sub expl1()
STEP1.Show
End Sub


'--------------------------------------------STEP 2------------------------------------------------------

'** Autor: Max Felder & Nathalie Serban **
'STEP 2.1: SWAT Extract ausw|fffd|hlen und Daten in Bufferfile kopieren
Sub copySWATextractToBuffer()

'-- Variablen
Dim varDatei As String
Dim vArray As Variant
Dim i As Integer
Dim fileName As Variant
Dim QWB As Workbook, ZWB As Workbook
Dim Answer
Dim antwort As String
Dim QWS As Worksheet, ZWS As Worksheet, ZWSBackUp As Worksheet

Application.ScreenUpdating = False
Application.EnableEvents = False

'Fehlerhandling
On Error GoTo Errorhandler


'Bereits Buffer-Datei erstellt?
If Worksheets("SWAT Data Extract").Range("Q6").Value = "X" And IsWorkbookOpen("BTW BufferFile.xlsx") Then
    antwort = MsgBox("You already selected a SWAT data extract, do you want to select a new one?", _
    vbYesNo + vbInformation, "Information")
    
'User R|fffd|ckmeldung
    Select Case antwort
        Case vbNo
            Exit Sub
        Case vbYes
    'Geoeffnetes Bufferfile wird geloescht
         Call xLoeschen
         Call deleteBufferFile
         Call ordnerloeschen
    Exit Sub
    End Select
End If

'User w|fffd|hlt SWAT Extract Datei aus
Answer = MsgBox("Please select the Excel file of the SWAT Data Extract", vbOKCancel + vbInformation, _
        "File selection.")
        
'User R|fffd|ckmeldung
    Select Case Answer
        Case vbOK '=1 'Gesichert Format(Date(),"DD.MM.YYYY")
        Case vbCancel '=2 'Abgebrochen oder rotes X
            Exit Sub
    End Select
    
varDatei = Application.GetOpenFilename()

'Fehlerbehandlung wenn Nutzer auf Abbrechen klickt (bei DATEIAUSWAHL) - rotes X oder abbrechen
If varDatei = "Falsch" Or varDatei = "False" Then Exit Sub
 
vArray = Split(varDatei, "\")
    For i = 0 To UBound(vArray)
        fileName = vArray(i)
    Next i
    
'Swat Datei oeffnen
Workbooks.Open varDatei
Set QWB = ActiveWorkbook
ThisWorkbook.Activate

'Wenn Datei ausgew|fffd|hlt dann Ordner erstellen + BufferFile erstellen
Call createFolder

'Buffer Excel-Sheet
Set ZWB = Workbooks("BTW BufferFile.xlsx")

'Sheets zuweisen zu...
'...SWAT Datei
Set QWS = QWB.Worksheets("Sheet1")

'... Buffer Excel-Sheet
Set ZWS = ZWB.Worksheets("Tabelle1")

'### ToDo: Blattschutz aufheben

'Benutzte Zellen der SWAT Datei kopieren in Buffer Excel-Sheet,
'Ziel: In Zeile 8 Spalte 1
QWS.UsedRange.Copy ZWS.Cells(8, 1)

'### ToDo: Blattschutz wieder einf|fffd|gen
Workbooks(fileName).Close SaveChanges:=True
Application.EnableEvents = True

'STEP 2 als erledigt markieren
Worksheets("SWAT Data Extract").Shapes.Range(Array("haken2")).Visible = True
MsgBox ("Successful! - Please go to STEP 3.")

Exit Sub

'--- Bei Fehler:
Errorhandler:
    If Err.Number = 9 Then
    'Falls Bufferfile noch offen ist...
      If IsWorkbookOpen("BTW BufferFile.xlsx") Then
       MsgBox "There is a failure in the SWAT Data Export Workbook." & _
        " Please rename the corresponding Worksheet to Sheet1.", vbCritical, "An error has occured!"
        SwatExtractToBTW.Show
        'Bufferfile schlie|fffd|en + loeschen
       Call deleteBufferFile
'       Call ordnerloeschen
        Call xLoeschen
    Else
    
    'Bufferfile wurde schon geschlossen
    MsgBox "No SWAT-Data found!." & Chr(13) & "Please select the SWAT-Data-File again.", _
      vbCritical, "An error has occured!"
'      Call deleteBufferFile
'      Call ordnerloeschen
      Call xLoeschen
       Worksheets("SWAT Data Extract").Shapes.Range(Array("haken2")).Visible = False
    End If
    
    Else:
        MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
        vbCritical, "An error has occured!"
        Worksheets("SWAT Data Extract").Range("Q6").ClearContents

        End If
    Exit Sub
End Sub

'** Autor: Max Felder und Nathalie Serban
'STEP 2.2
Private Sub createFolder()
'ByVal filePath As String)
Dim strName As String
Dim response1 As String
Dim backupDir As Variant
Dim response2 As Variant
Dim desktopPath As String
Dim Answer
Dim response As Variant

Application.DisplayAlerts = False
strName = "Basic Technical Workbook " & Date
desktopPath = Environ$("USERPROFILE") & "\Desktop\"
filePath = desktopPath & strName


'Fehlerhandling
On Error GoTo Errorhandler

'Falls der Ordner schon existiert (vom gleichen Tag), dann muss User diesen umbenennen
Do Until Dir(filePath, vbDirectory) = ""
   filePath = InputBox("Enter new Foldername!", "Folder already exist!", filePath)

    'Falls User abbrechen will...
    If filePath = "" Then
        response = MsgBox("The Folder was NOT created", vbOKOnly + vbInformation)
        Application.StatusBar = "Datei wurde nicht gespeichert!"
        Exit Sub
    End If
Loop

   'Ordner erstellen
 If Dir(filePath, vbDirectory) = "" Then
    MkDir (filePath)
     'BufferFile wird erstellt
    Call createBufferFile
 End If
 
Application.DisplayAlerts = True
Exit Sub

'--- Bei Fehler:
Errorhandler:
    MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
    vbCritical, "An error has occured!"
 Exit Sub
End Sub

'** Autor: Max Felder
'STEP 2.3: Erstellt tempor|fffd|re Zwischenablage f|fffd|r den SWAT Datenextrakt f|fffd|r
'die Dauer der Makrodurchlaufzeit
Sub createBufferFile()
Application.DisplayAlerts = False

'Fehlerhandling
On Error GoTo Errorhandler

'-- Variablen
Dim wkbMappe As Workbook
Set wkbMappe = Workbooks.Add
dateinameBuffer = "BTW BufferFile.xlsx"


'Filebuffer in Ordner speichern
ActiveWorkbook.SaveAs filePath & "\" & dateinameBuffer
'Filebuffer aktivieren
ThisWorkbook.Activate

    ''Kennzeichnen, dass Step 2 schon geklickt wurde (und Step 3 noch nicht)
    Worksheets("SWAT Data Extract").Range("Q6").Value = "X"
    Application.DisplayAlerts = True
    

Exit Sub

'--- Bei Fehler:
Errorhandler:
    MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
    vbCritical, "An error has occured!"
 Exit Sub
End Sub

'** Autor: Nathalie Serban
' loescht X aus Sheet, falls User neuer Bufferfile erstellen und Alten loeschen moechte
Sub xLoeschen()

    'X loeschen aus Zelle
    Worksheets("SWAT Data Extract").Range("Q6").Clear

End Sub

' Noch nicht in Gebrauch

'** Autor: Nathalie Serban
Sub ordnerloeschen()
MsgBox filePath
'Fehlerhandling
On Error GoTo Errorhandler


Kill filePath
RmDir filePath

'--- Bei Fehler:
Errorhandler:
    MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
    vbCritical, "An error has occured!"
    Exit Sub
End Sub


'--------------------------------------------STEP 3------------------------------------------------------

'** Autor: Max Felder und Nathalie Serban
'STEP 3.1 - Daten ins Basic Data sheet ziehen und je nach Anzahl BTWs erstellen und in Ordner speichern
Sub fillBasicDataSheet()

'Fehlerhandling
On Error GoTo Errorhandler

'--- Variablen
Dim i As Integer
Dim m As Integer
Dim index As Integer
Dim letzteSpalte As Integer
Dim letzteZeile As Integer
Dim vArray()
Dim wert As String
Dim arrayWert As Integer
Dim arrayLength As Integer
Dim partDescription As String
Dim swatIDIndex As Integer
Dim partDescriptionIndex As Integer

'Dim percentage As Double
'Dim currentDataSet As String
'Dim savedDataSet As Integer
'Dim remainingDataSet As Integer
Dim response As String

' Pop up Info
Dim objShell As Object
Set objShell = CreateObject("WScript.Shell")

' Pop up Info
Dim objShell2 As Object
Set objShell2 = CreateObject("WScript.Shell")

Dim wkb2 As Workbook
Dim ws2 As Worksheet
Set wkb2 = ThisWorkbook
Set ws2 = wkb2.Worksheets("Basic Data")

Dim wkb9 As Workbook
Dim ws9 As Worksheet
Set wkb9 = Workbooks("BTW BufferFile.xlsx")
Set ws9 = wkb9.Worksheets("Tabelle1") 'Worksheets("Tabelle1")

    If Worksheets("SWAT Data Extract").Range("Q6").Value = "" Then
        MsgBox "Please go to Step 2 and select Data from SWAT!"
        Exit Sub
    End If

'Step 2 noch nicht durchgef|fffd|hrt? oder keine Daten in SWAT Extract vorhanden
    If ws9.Range("A8").Value = "" Then
        MsgBox "Please go to Step 2 and select Data from SWAT!"
        Exit Sub
    End If
    
'BufferFile:
letzteZeile = ws9.Cells(Rows.Count, 1).End(xlUp).Row
letzteSpalte = ws9.Cells(8, 256).End(xlToLeft).Column
index = 0

'### Hier der Vergleich mit SWAT Export und Feldern aus Basic Data Sheet um die richtigen Daten vom
'### SWAT Export in Basic Data Sheet zu |fffd|bertragen
For i = 1 To letzteSpalte
    wert = ws9.Cells(8, i).Value
    If ws9.Cells(8, i).Value = "Part Number" Or _
            ws9.Cells(8, i).Value = "Part Number Description" Or _
            ws9.Cells(8, i).Value = "Program / Project" Or _
            ws9.Cells(8, i).Value = "Reporting Unit / Plant" Or _
            ws9.Cells(8, i).Value = "ZF PPAP Date" Or _
            ws9.Cells(8, i).Value = "RFQ Distribution Date" Or _
            ws9.Cells(8, i).Value = "PV Component MRD" Or _
            ws9.Cells(8, i).Value = "Volume Months 1-12 (Year 1)" Or _
            ws9.Cells(8, i).Value = "Corporate Commodity" Or _
            ws9.Cells(8, i).Value = "Volume in Peak Year" Or _
            ws9.Cells(8, i).Value = "Program Buyer" Or _
            ws9.Cells(8, i).Value = "ZF SOP Date" Or _
            ws9.Cells(8, i).Value = "Years of Supply" Or _
            ws9.Cells(8, i).Value = "Commodity Buyer" Then
            index = index + 1
            arrayLength = arrayLength + 1
            ReDim Preserve vArray(arrayLength)
            vArray(index - 1) = i
    End If
        If ws9.Cells(8, i).Value = "SWAT-ID" Then
            swatIDIndex = i
        End If
        If ws9.Cells(8, i).Value = "Part Number Description" Then
            partDescriptionIndex = i
        End If
Next i

amountdataSet = letzteZeile - 8
nextProgressStep = 10
progressIndex = 0

'Popup-Info, Anzeige f|fffd|r 2 Sekunden
objShell.Popup "One moment please " & amountdataSet & _
" Basic Technical Workbook files will be created.", 2, "Info"
Set objShell = Nothing
    
'### F|fffd|llt Daten aus SWAT Export in entsprechenden Zellen des Basic Data Sheets
For j = 9 To letzteZeile
    For m = 0 To UBound(vArray) - 1
        arrayWert = vArray(m)
        If ws9.Cells(8, arrayWert).Value = "Part Number" Then
             ws2.Range("K7").Value = ws9.Cells(j, arrayWert).Value
        End If
        If ws9.Cells(8, arrayWert).Value = "Part Number Description" Then
            ws2.Range("K9").Value = ws9.Cells(j, arrayWert).Value
        End If
        If ws9.Cells(8, arrayWert).Value = "Program / Project" Then
            ws2.Range("AC9").Value = ws9.Cells(j, arrayWert).Value
        End If
        If ws9.Cells(8, arrayWert).Value = "Reporting Unit / Plant" Then
            ws2.Range("K13").Value = ws9.Cells(j, arrayWert).Value
        End If
        If ws9.Cells(8, arrayWert).Value = "ZF PPAP Date" Then
            ws2.Range("K20").Value = ws9.Cells(j, arrayWert)
        End If
        If ws9.Cells(8, arrayWert).Value = "RFQ Distribution Date" Then
            ws2.Range("K5").Value = ws9.Cells(j, arrayWert).Value
        End If
        If ws9.Cells(8, arrayWert).Value = "PV Component MRD" Then
            ws2.Range("AC22").Value = ws9.Cells(j, arrayWert).Value
        End If
        If ws9.Cells(8, arrayWert).Value = "Volume Months 1-12 (Year 1)" Then
            ws2.Range("AC24").Value = ws9.Cells(j, arrayWert).Value
        End If
        If ws9.Cells(8, arrayWert).Value = "Corporate Commodity" Then
            ws2.Range("AC11").Value = ws9.Cells(j, arrayWert).Value
        End If
        If ws9.Cells(8, arrayWert).Value = "Volume in Peak Year" Then
            ws2.Range("AC24").Value = ws9.Cells(j, arrayWert).Value
        End If
        If ws9.Cells(8, arrayWert).Value = "Program Buyer" Then
            ws2.Range("K44").Value = ws9.Cells(j, arrayWert).Value
        End If
            If ws9.Cells(8, arrayWert).Value = "Years of Supply" Then
                ws2.Range("K22").Value = ws9.Cells(j, arrayWert).Value
            End If
            If ws9.Cells(8, arrayWert).Value = "ZF SOP Date" Then
            ws2.Range("K24").Value = ws9.Cells(j, arrayWert).Value
        End If
        If ws9.Cells(8, arrayWert).Value = "Commodity Buyer" Then
            ws2.Range("K46").Value = ws9.Cells(j, arrayWert).Value
        End If
    Next m

'    ### Abfrage und Aufruf zum speichern in erstellen Ordner sobald alle Felder
'    ### des Basic Data Sheets ausgef|fffd|llt sind
    If m = arrayLength Then
        swatID = ws9.Cells(j, swatIDIndex).Value
        partDescription = ws9.Cells(j, partDescriptionIndex).Value
'        wkb2.Worksheets("Content").Activate

          If j = 9 Then
            Application.DisplayAlerts = False
            wkb2.Worksheets("SWAT Data Extract").Delete
            Application.DisplayAlerts = True
        End If
        
    Call saveFile(swatID, partDescription)
    End If
 
    Call fortschrittsanzeige
Next j

'Buffer File loeschen
Call deleteBufferFile

'Letzte Datei speichern + schlie|fffd|en
wkb2.Save
  
''Popup-Info, Anzeige f|fffd|r 2 Sekunden
objShell2.Popup "Successful - This file will be closed and the folder with your BTWs will be opened", 2, "Info"
Set objShell2 = Nothing

Unload Progressbar

        'Ordner in der die BTWs gespeichert sind, wird geoeffnet
        Call BTW_Ordner_oeffnen
        wkb2.Close
        Application.Quit
        Application.DisplayAlerts = True
        
        
'        Worksheets("SWAT Data Extract").Protect ("trwdalphi19731408")

Exit Sub

'--- Bei Fehler:
Errorhandler:
    'Falls Bufferfile fehlt:
    If Err.Number = 9 Then
          MsgBox " There is no SWAT Data Extract selected - Please go to previous STEP !", vbCritical, _
          "An error has occured!"
      Else:
          MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
          vbCritical, "An error has occured!"
      End If
    Exit Sub
End Sub

'** Autor: Max Felder & Nathalie Serban
'STEP 3.2
Private Sub saveFile(swatID, partDescription)

'** Dimensionierung der Variablen
Dim partdescriptionOhneSonderzeichen As String
'** Sonderzeichen bereinigen
partdescriptionOhneSonderzeichen = Clean_Sonderzeichen(partDescription)

'** Ausgabe des bereinigten Strings
'MsgBox partdescriptionOhneSonderzeichen

'Fehlerhandling
On Error GoTo Errorhandler
 Application.DisplayAlerts = False
 
    ActiveWorkbook.SaveAs filePath & "\" & swatID & " " & partdescriptionOhneSonderzeichen
    Application.DisplayAlerts = True
    

    Exit Sub

'--- Bei Fehler:
Errorhandler:
    MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
    vbCritical, "An error has occured!"
    Exit Sub
End Sub

'** Autor: Max Felder & Nathalie Serban
'STEP 3.3 : loescht die Excel-Datei zur Zwischenablage des SWAT Extractes
Private Sub deleteBufferFile()

Application.DisplayAlerts = False


'--- Variablen
Dim fileName As String
fileName = "BTW BufferFile.xlsx"

Dim workbookBuffer As Workbook
Set workbookBuffer = Workbooks(fileName)

If IsWorkbookOpen("BTW BufferFile.xlsx") Then
    'Bufferfile schlie|fffd|en
    workbookBuffer.Close
End If

'Bufferfile loeschen
Kill filePath & "\" & fileName

Application.DisplayAlerts = True

End Sub

'** Autor: Nathalie Serban
Sub BTW_Ordner_oeffnen()
'Fehlerhandling
On Error GoTo Errorhandler

'Worksheets("SWAT Data Extract").Unprotect ("trwdalphi19731408")

Shell "Explorer.exe " & filePath, vbNormalFocus

'Worksheets("SWAT Data Extract").Protect ("trwdalphi19731408")

Exit Sub

'--- Bei Fehler:
Errorhandler:
    MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
    vbCritical, "An error has occured!"
    Exit Sub
End Sub

Sub fortschrittsanzeige()
'Fehlerhandling
On Error GoTo Errorhandler

 Progressbar.Show

 '### Abfragen f|fffd|r Fortschrittsanzeige
    savedDataSet = j - 8
    remainingDataSet = amountdataSet - savedDataSet
    percentage = (savedDataSet / amountdataSet) * 100
    percentage = Round(percentage, 1)
    
    Progressbar.TextBox1.SetFocus
    
    If percentage < 25 Then
        With Progressbar.TextBox5
            .ForeColor = &HFF&
        End With
    End If
    
    If percentage < 50 And percentage >= 25 Then
         With Progressbar.TextBox5
            .ForeColor = &H34C7DC
        End With
    End If
    
    If percentage < 75 And percentage >= 50 Then
        With Progressbar.TextBox5
            .ForeColor = &HFFFF&
        End With
    End If

    If percentage <= 99 And percentage >= 75 Then
      With Progressbar.TextBox5
            .ForeColor = &H8000&
        End With
    End If

    If percentage > 99 Then
        With Progressbar.TextBox5
            .ForeColor = &HC000&
        End With
    End If
    
        Progressbar.TextBox1.Value = amountdataSet
        Progressbar.TextBox2.Value = savedDataSet
        Progressbar.TextBox3.Value = remainingDataSet
        Progressbar.TextBox4.Value = swatID
        Progressbar.TextBox5.Value = percentage

    Application.Wait Now + TimeSerial(0, 0, 1)
    'MsgBox "N|fffd|chster Durchgang"
    

 Exit Sub

'--- Bei Fehler:
Errorhandler:
    MsgBox Err.Description & Chr(13) & Err.Number & Chr(13) & Err.Source, _
    vbCritical, "An error has occured!"
 Exit Sub
End Sub



INQUEST-PP=macro
