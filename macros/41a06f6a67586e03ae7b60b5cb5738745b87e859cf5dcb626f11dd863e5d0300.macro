Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'Private Sub Workbook_Open()
'    'Beim |fffd|ffnen wird das Tastaturk|fffd|rzel f|fffd|r "neues Blatt" eingestellt.
'    'Es wird eine Meldung f|fffd|r 2 sec angezeigt
'    'Als Messagebox wird hier nicht die "Excel-Box" verwendet sondern eine "Windows-Box" !!
'    Dim objShell As Object
'    Set objShell = CreateObject("WScript.Shell")
'    Application.MacroOptions Macro:="NeuesBlattEinf|fffd|gen", Description:="F|fffd|gt ein neues Register in die Datei ein", ShortcutKey:="n"
'    objShell.popup "[Strg-n] erstellt in dieser Datei ein neues Register!", 2, "METROPLAN Production Management", vbInformation
'End Sub

Attribute VB_Name = "Modul1"


Sub ListeNeueZeile()
Attribute ListeNeueZeile.VB_ProcData.VB_Invoke_Func = "e\n14"
    'ACHTUNG Quick & dirty - keine Pr|fffd|fungen
    Range("templateZeile").Copy
    Rows(Selection.Row).Insert Shift:=xlDown
    Rows(Selection.Row).Hidden = False
    Cells(Selection.Row, 9).Select
End Sub

'
Sub Scharf_Schalten()
    Application.EnableEvents = True
End Sub
'
Sub Leerzeile_Einf|fffd|gen()

    On Error GoTo Ende
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    ZeileAktuell = Selection.Row
    Zeile1 = ActiveSheet.Range("ZeileErste")
    ZeileN = ActiveSheet.Range("ZeileLetzte")
    Spaltelink = ActiveSheet.Range("SpalteLink")
    Spaltetext = ActiveSheet.Range("SpalteText")
    SpalteKalStart = ActiveSheet.Range("SpalteDatumE")
    SpalteKalEnde = ActiveSheet.Range("TabAktivit|fffd|ten").Column + ActiveSheet.Range("TabAktivit|fffd|ten").Columns.Count - 1
    
    If ZeileAktuell > Zeile1 And ZeileAktuell <= ZeileN + 1 Then
        Selection.EntireRow.Insert
        ActiveSheet.Range(Cells(ZeileAktuell - 1, 3), Cells(ZeileAktuell - 1, 7)).Copy
        ActiveSheet.Cells(ZeileAktuell, 3).PasteSpecial Paste:=xlPasteFormulas
        ActiveSheet.Cells(ZeileAktuell - 1, Spaltelink).Copy
        ActiveSheet.Cells(ZeileAktuell, Spaltelink).PasteSpecial Paste:=xlPasteFormulas
        ActiveSheet.Range(Cells(ZeileAktuell - 1, SpalteKalStart), Cells(ZeileAktuell - 1, SpalteKalEnde)).Copy
        ActiveSheet.Cells(ZeileAktuell, SpalteKalStart).PasteSpecial Paste:=xlPasteFormulas
        ActiveSheet.Cells(ZeileAktuell, 1) = ActiveSheet.Cells(ZeileAktuell - 1, 1)
        Application.CutCopyMode = False
        ActiveSheet.Cells(ZeileAktuell, Spaltetext).Select
    Else
        MsgBox "Cursor-Position ung|fffd|ltig!" & Chr(10) & "Zul|fffd|ssig:" & Chr(10) & " 2.te bis (letzte+1) Zeile", vbCritical + vbOKOnly
        Exit Sub
    End If
Ende:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
End Sub
'


Sub Gliederung_aktualisieren()
    'durchl|fffd|uft die gesamte Tabelle und setzt die Gliederungsebenen
    'Notizen (kein Level angeben) und Ressourcen (Angabe = "R") werden auf unterste Ebene gesetzt
    'Makro in Abh|fffd|ngigkeit von den verwendeten Ebenen ANPASSEN!!
    Application.EnableEvents = False
    Zeile1 = ActiveSheet.Range("ZeileErste")
    ZeileN = ActiveSheet.Range("ZeileLetzte")

    For Zeile = Zeile1 To ZeileN
        Level = ActiveSheet.Cells(Zeile, 1)
        If Level >= 1 And Level <= 4 Then
            ActiveSheet.Rows(Zeile).OutlineLevel = Level
        Else
            ActiveSheet.Rows(Zeile).OutlineLevel = 5
        End If
        'Call Formatieren((Zeile), 7, Cells(Zeile, 1))
    Next Zeile
    Application.EnableEvents = True
End Sub


Sub Formatieren(Zeile As Integer, Para As String)

'Es werden explizite Zellen formatiert sowie die Zeilenh|fffd|he eingestellt.
'|fffd|bergeben wird eine Parameter (die Gliederungsebene!) zur Steuerung.
'Die Definition der zu formatierenden Spalten und deren Formatierung erfolgt hier!

SpalteNr = ActiveSheet.Range("SpalteNr")
Spaltetext = ActiveSheet.Range("SpalteText")

'Gliederungsnummern werden nur hinsichtlich vertikaler Ausrichtung angepasst:
If Para = "1" Then
    Cells(Zeile, SpalteNr).VerticalAlignment = xlBottom
Else
    Cells(Zeile, SpalteNr).VerticalAlignment = xlCenter
End If

'Aktivit|fffd|tentext formatieren:
With Cells(Zeile, Spaltetext)
Select Case Para
    Case "1"
        .Font.Size = 12
        .Font.FontStyle = "Fett"
        .HorizontalAlignment = xlLeft
        .IndentLevel = 0
        .VerticalAlignment = xlBottom
        .RowHeight = 30
        Rows(Zeile).OutlineLevel = 1
    Case "2"
        .Font.Size = 10
        .Font.FontStyle = "Fett"
        .HorizontalAlignment = xlLeft
        .IndentLevel = 1
        .VerticalAlignment = xlCenter
        Rows(Zeile).AutoFit
        Rows(Zeile).OutlineLevel = 2
    Case "3"
        .Font.Size = 10
        .Font.FontStyle = "Standard"
        .HorizontalAlignment = xlLeft
        .IndentLevel = 2
        .VerticalAlignment = xlCenter
        Rows(Zeile).AutoFit
        Rows(Zeile).OutlineLevel = 3
    Case "4"
        .Font.Size = 10
        .Font.FontStyle = "Standard"
        .HorizontalAlignment = xlLeft
        .IndentLevel = 3
        .VerticalAlignment = xlCenter
        Rows(Zeile).AutoFit
        Rows(Zeile).OutlineLevel = 4
    Case "R"
        .Font.Size = 10
        .Font.FontStyle = "Standard"
        .HorizontalAlignment = xlRight
        .IndentLevel = 1
        .VerticalAlignment = xlCenter
        Rows(Zeile).AutoFit
        Rows(Zeile).OutlineLevel = 5
    Case Else
        .Font.Size = 10
        .Font.FontStyle = "Kursiv"
        .HorizontalAlignment = xlLeft
        .IndentLevel = 4
        .VerticalAlignment = xlCenter
        Rows(Zeile).AutoFit
        Rows(Zeile).OutlineLevel = 5
End Select
End With

End Sub

Attribute VB_Name = "Modul_Format"
'=================================================================
' Makro-Bibliothek METROPLAN PRODUCTION MANAGEMENT
' Modul:    "Modul_Format"
' letzte Bearbeitung:   27.09.2016, Na
'=================================================================
'
' Die nachstenden Prozeduren dienen zum automatischen Formatieren von Tabellen.
' Der Code ist so geschrieben, dass eine universelle Einsetzbarkeit gegeben ist.
' WICHTIG:
' Ggf. sind in einer Tabelle unterschiedliche Register mit jeweilgs eigener "Formatier-Logik" angelegt.
' Die Makros sind hier zwar nachstehend in einem allgemeinen Modul dokumentiert.
' F|fffd|r den jeweiligen Einsatz m|fffd|ssen sie aber angepasst und in einem KLASSENMODUL angelegt werden!

Option Explicit




'Dokumentation der Format-Syntax:
'================================

' Zeilen- & Spaltenformatierungen
'    .RowHeight
'    .ColumnWidth
'    .OutlineLevel
    
' Text-Formatierungen
    '.Name = "Arial"
    '.Size = 11
    '.FontStyle = "Fett Kursiv" "Standard" BESSER Bold und italic einzeln verwenden!
    '.Bold = False
    '.Italic = False
    '.Underline = xlUnderlineStyleNone xlUnderlineStyleSingle xlUnderlineStyleDouble
    '.Strikethrough = False
    '.Superscript = False
    '.Subscript = False
    '.ColorIndex = xlAutomatic
    '.color = RGB(200,0,0)
    '.Color = -16777016 (entspricht RGB(200,0,0)
    '.ThemeColor = xlThemeColorLight1 xlThemeColorAccent1 xlThemeColorAccent2
    '.TintAndShade = 0              'nur zusammen mit ThemeColor erforderlich
'
' Text-Ausrichtung
    '.HorizontalAlignment = xlGeneral xlLeft xlCenter xlRight
    '.VerticalAlignment = xlTop xlCenter xlBottom
    '.WrapText = True
    '.Orientation = 0 45 -45 90 -90
    '.Orientation = xlVertical
    '.AddIndent = False
    '.IndentLevel = 0
    '.InsertIndent 1 ACHTUNG Keine Eigenschaft sondern eine Aktion!!
    '.InsertIndent -1
    '.ShrinkToFit = False
    '.ReadingOrder = xlContext xlLTR (left to right) xlRTL
    '.MergeCells = False

' Rahmen-Formatierungen
    ' DIE RAHMEN
    '.Borders(xlEdgeLeft)
    '.Borders(xlEdgeTop)
    '.Borders(xlEdgeBottom)
    '.Borders(xlEdgeRight)
    '.Borders(xlInsideVertical)
    '.Borders(xlInsideHorizontal)
    '.Borders(xlDiagonalDown)
    '.Borders(xlDiagonalUp)
        ' DIE STILE
        '.LineStyle = xlNone
        '.LineStyle = xlContinuous
        '.LineStyle = xlDouble
        '.LineStyle = xlDot
        '.LineStyle = xlDashDot
        '.LineStyle = xlDashDotDot
        '.LineStyle = xlDash
        '.LineStyle = xlSlantDashDot
        ' DIE ST|fffd|RKE
        '.Weight = xlHairline
        '.Weight = xlThin
        '.Weight = xlMedium
        '.Weight = xlThick

' F|fffd|llungen
    '.Interior
        '.Pattern = xlSolid         'Paramter: xlSolid, xlGrid, xlHorizontal, xlLightVertical, ...
        '.PatternColorIndex = xlAutomatic
        '.PatternThemeColor = xlThemeColorAccent3
        '.PatternTintAndShade = 0.599963377788629
        '.ThemeColor = xlThemeColorAccent1
        '.TintAndShade = 0.799981688894314
    
Attribute VB_Name = "Modul_System"
' ----------------------------------------------------------------------------
' Modul:                    "Modul_System"
' letzte Bearbeitung:       04.09.2016, Na
' Inhalt, Beschreibung:     allgemeine VBA-Programme und benutzerdef. Funktionen
' ----------------------------------------------------------------------------
'
Option Explicit

Public StatusKalkulation As XlCalculation  'Merker f|fffd|r Berechnungsstatus
'
'
'User Defined Functions zur Verwendung direkt in Excel:
'======================================================
'
' Hinweis: Application.Volatile
' deklariert eine Funktion als "ver|fffd|nderlich", damit sie bei allen |fffd|nderungen aktualisiert wird
' ansonsten wird sie nur aktualisiert, wenn sich die Eingangsparameter (z.B. eine Zelle) |fffd|ndern
' "Speichern unter" und damit ein neuer Dateiname ist z.B. keine solche |fffd|nderung!

Function MPR_Formeltext(Zelle As Range) As String
    MPR_Formeltext = Zelle.Formula
End Function
'

Function MPR_isFormel(Zelle As Range) As Boolean
    If Left(Zelle.Formula, 1) = "=" Then MPR_isFormel = True
End Function
'

Function MPR_SheetNameByRange(Optional Zelle As Range) As String
    On Error Resume Next
    If Zelle Is Nothing Then Set Zelle = Application.ActiveCell
    MPR_SheetNameByRange = "n/a"
    MPR_SheetNameByRange = MPR_SheetNameByIndex(Zelle.Parent.index)
    On Error GoTo 0
End Function
'

Function MPR_SheetNameByIndex(index As Integer) As String
    On Error Resume Next
    Application.Volatile
    MPR_SheetNameByIndex = "n/a"
    MPR_SheetNameByIndex = Sheets(index).Name
    On Error GoTo 0
End Function
'

Function MPR_DateiName(Optional Zelle As Range) As String
    On Error Resume Next
    Application.Volatile
    If Zelle Is Nothing Then Set Zelle = Application.ActiveCell
    MPR_DateiName = "n/a"
    MPR_DateiName = Zelle.Parent.Parent.Name
    On Error GoTo 0
End Function
'

Function MPR_AktuellesVerzeichnis() As String
    Application.Volatile
    MPR_AktuellesVerzeichnis = ThisWorkbook.Path
End Function
'

'Funktionen/ Makros zum direkten Aufruf oder zur Verwendung in VBA:
'==================================================================
'

Function MPR_Sheet|fffd|bersicht() As String
    'Tabelle1 ist der Codename des |fffd|bersichtregisters ACHTUNG english: Sheet1
    MPR_Sheet|fffd|bersicht = Tabelle1.Name
End Function

Function TabellenIndex(ByRef wkb As Workbook, ByVal strCodename As String) As Integer
Dim wks As Worksheet
For Each wks In wkb.Worksheets
  If wks.CodeName = strCodename Then
    TabellenIndex = wks.index
    Exit Function
  End If
Next wks
End Function
'

Sub Events_EinAus()
    Application.EnableEvents = Not Application.EnableEvents
    MsgBox "Neu gesetzt: EnableEvents := " & Application.EnableEvents
End Sub
'


'Men|fffd|-Funktionen / Callbacks des MPR-Ribbons
'-------------------------------------------
Sub Load_Ribbon(ByRef Ribbon As IRibbonUI)
    'Beim Laden des Ribbons wird der MPR-Tab aktiviert
    Ribbon.ActivateTab "MPR"
End Sub
Sub GetKopfzeile(control As IRibbonControl, ByRef text)
    'Liest die aktuelle Kopfzeile aus dem |fffd|bersichtsblatt aus und |fffd|bergibt diese an das Ribbon
    text = Tabelle1.Range("B1").Value
End Sub
Sub KopfzeileEintragen(control As IRibbonControl, ByRef text)
    'Bei |fffd|nderungen im Ribbon wird die neue Kopfzeile in alle Register eingetragen
    Dim ws As Worksheet
    For Each ws In ActiveWorkbook.Sheets
        ws.Range("B1").Value = text
    Next
End Sub
Sub NeuesBlattEinf|fffd|gen(control As IRibbonControl)
Attribute NeuesBlattEinf|fffd|gen.VB_Description = "F|fffd|gt ein neues Register in die Datei ein"
Attribute NeuesBlattEinf|fffd|gen.VB_ProcData.VB_Invoke_Func = "n\n14"
    'Einf|fffd|gen eines neuen Registers
    'Erwartet werden
    '   > ein Vorlage-Register "_template"
    '   > die |fffd|bersichtstabelle mit dem Namen "TabReg|fffd|bersicht"
    Dim Tabelle As ListObject
    Dim RegName As String
    Dim Counter As Integer
    On Error GoTo Ende
    StatusKalkulation = Application.Calculation
    Application.Calculation = xlCalculationManual
    'neuen Namen festlegen:
    Counter = 0
    Do
        Counter = Counter + 1
        RegName = "NEU_" & Counter
    Loop Until WorksheetExist(RegName) = False
    'Register anlegen
    With ActiveWorkbook
        .Sheets("_template").Copy After:=.Sheets(Sheets.Count)
        .Sheets(Sheets.Count).Visible = True
        .Sheets(Sheets.Count).Name = RegName
        'Register in |fffd|bersichtstabelle eintragen:
        Set Tabelle = .Sheets(1).ListObjects("TabReg|fffd|bersicht")
        With Tabelle
            .ListRows.Add
            .DataBodyRange(.ListRows.Count, .ListColumns("Pfad").index).FormulaLocal = _
            "=zelle(" & Chr(34) & "Dateiname" & Chr(34) & ";" & RegName & "!$A$2)"
        End With
    End With
Ende:
    Application.Calculation = StatusKalkulation
End Sub
'

Function WorksheetExist(strNam As String) As Boolean
   On Error Resume Next
   WorksheetExist = Worksheets(strNam).index > 0
End Function
'

Function DeleteOldPivotItems()
    'Hinweis: L|fffd|schung auch manuell |fffd|ber Optionen > Daten!!
    Dim pt As PivotTable
    Dim ws As Worksheet
    For Each ws In ActiveWorkbook.Worksheets
        For Each pt In ws.PivotTables
            pt.PivotCache.MissingItemsLimit = xlMissingItemsNone
            pt.PivotCache.Refresh
        Next
    Next
End Function


Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Private Sub Worksheet_Change(ByVal Target As Range)
    'Dieses Makro wird bei jeder |fffd|nderung im Sheet ausgel|fffd|st!
    'Voraussetzung: EnableEvents = True!
    Application.EnableEvents = False
    '|fffd|nderung in einem f|fffd|r die Formatierung relevanten Bereich?
    If Not Intersect(Target, Range("ListeThemen")) Is Nothing Then
        Call GliederungEinstellen(Target)
    End If
Ende:
    Application.EnableEvents = True
End Sub



Private Sub GliederungEinstellen(Target As Range)
    Dim Ebene As Integer
    Dim Zeile As Long
    Dim TabellenZeile As Long
    Ebene = 0
    Zeile = Target.Row 'die Zeile, in der eine |fffd|nderung stattgefunden hat
    TabellenZeile = Zeile - Range("ListeThemen").Row + 1
    If Range("ListeThemen").Cells(TabellenZeile, 1) <> "" Then Ebene = 1
    If Range("ListeThemen").Cells(TabellenZeile, 2) <> "" Then Ebene = 2
    If Range("ListeThemen").Cells(TabellenZeile, 3) <> "" Then Ebene = 3
    If Range("ListeThemen").Cells(TabellenZeile, 4) <> "" Then Ebene = 4
    If Ebene <> 0 Then Rows(Zeile).OutlineLevel = Ebene
End Sub



Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)

    On Error GoTo Ende
    
    If Target.Columns.Count = 1 And Target.Rows.Count = 1 And _
        Target.Column = 1 And _
        Target.Row >= ActiveSheet.Range("ZeileErste") And Target.Row <= ActiveSheet.Range("ZeileLetzte") Then
        
        Application.EnableEvents = False
        Application.ScreenUpdating = False
        Call Formatieren(Target.Row, Target.Value)
        Application.EnableEvents = True
        Application.ScreenUpdating = True
       
    End If

Ende:
End Sub

Attribute VB_Name = "Tabelle9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' )^J)

INQUEST-PP=macro
