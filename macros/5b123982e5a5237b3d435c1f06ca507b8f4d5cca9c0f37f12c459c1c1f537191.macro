Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRegions, 2, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 1, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdLanguage, 3, 2, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRegions, 2, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 1, 1, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub


Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRegions, 3, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 1, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdLanguage, 4, 2, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub
Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub


Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRegions, 2, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 1, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdLanguage, 3, 2, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub
Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub


Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdExportXML, 1, 0, MSForms, CommandButton"
Option Explicit

Private Sub cmdExportXML_Click()
    Call modEXPORTxml.Export_To_XML
End Sub
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdLanguage, 4, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdRegions, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 1, 2, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub

Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRegions, 2, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 1, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdLanguage, 3, 2, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRegions, 11, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdProperties, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdLanguage, 14, 2, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdProperties_Click()
     Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub


Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRegions, 2, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 1, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdLanguage, 3, 2, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub


Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRegions, 2, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 1, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdLanguage, 3, 2, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub


Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRegions, 3, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdLanguage, 4, 2, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    
    Set rngRegions = Nothing

End If
    
End Sub


Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 5, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 1, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdLanguage, 6, 2, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub


Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRegions, 3, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdLanguage, 4, 2, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub


Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRegions, 3, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 1, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdLanguage, 4, 2, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub


Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRegions, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdCountries, 1, 2, MSForms, CommandButton"
Attribute VB_Control = "cmdLanguage, 4, 3, MSForms, CommandButton"
Const ROW_HEADER_INI As Long = 2

Private Sub cmdCountries_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdLanguage_Click()
    Call modProperties.showProperties
End Sub

Private Sub cmdRegions_Click()
    Call modProperties.showProperties
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim rngRegions As Range
Dim rngCell As Range
Dim strCountries As String
Dim lngColRegions As Long
Dim lngColCountries As Long
Dim arrRegions() As String
Dim strRegions As String
Dim lngCount As Long



lngColRegions = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_REGIONS")
lngColCountries = modLib.fnDetectHeaderCol(ROW_HEADER_INI, "TARGET_COUNTRIES")

If Target.Column = lngColRegions And Target.Row > ROW_HEADER_INI Then

    Set rngRegions = Sheets("Target Regions").Range(Sheets("Target Regions").Cells(2, 1).Address, Sheets("Target Regions").Cells(Rows.Count, 1).End(xlUp).Address)
    strCountries = ""
    
    If InStr(1, Target.Value, "|") > 0 Then
        arrRegions = Split(Target.Value, "|")
        If arrRegions(LBound(arrRegions)) = "" Then
            MsgBox "Invalid Input in TARGET_REGIONS field", vbCritical, "Warning!"
        Else
            For lngCount = LBound(arrRegions) To UBound(arrRegions)
                For Each rngCell In rngRegions
                If lngCount = LBound(arrRegions) Then
                    If rngCell = arrRegions(lngCount) Then
                        If strCountries = "" Then
                            strCountries = rngCell.Offset(0, 1).Value
                        Else
                            strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                        End If
                    End If
                Else
                    If rngCell = arrRegions(lngCount) Then
                        If InStr(1, strCountries, rngCell.Offset(0, 1).Value) = 0 Then
                            If strCountries = "" Then
                                strCountries = rngCell.Offset(0, 1).Value
                            Else
                                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
                            End If
                        End If
                    End If
                End If
                Next rngCell
            Next
        End If
    Else
        strRegions = Target.Value
        For Each rngCell In rngRegions
        If rngCell = strRegions Then
            If strCountries = "" Then
                strCountries = rngCell.Offset(0, 1).Value
            Else
                strCountries = strCountries & "|" & rngCell.Offset(0, 1).Value
            End If
        End If
        Next rngCell
    End If
        
    If strCountries = "" Then
        Cells(Target.Row, lngColCountries).Value = Empty
    Else
        Cells(Target.Row, lngColCountries).Value = strCountries
    End If
    
    Set rngRegions = Nothing

End If
    
End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frmProperties"
Attribute VB_Base = "0{E409E528-51FE-48D5-9A86-3CB9CB08B546}{47193138-E572-419A-B4C3-053BAD165C2B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Const ROW_HEADER_DATA As Long = 2

Const ROW_SUPPORTED_VALUES_CONTROL  As Long = 3
Const ROW_VALUES_CONTROL As Long = 6

Dim blnSingleValue As Boolean

'--------Ivan---12/09/2013-------------------
Dim strItems As String
Dim lngTotalItems As Long
Dim arrItemsSelected() As String
'--------------------------------------------

'------------------------------------------------------------------------------
' btnClear_Click()
' Date      : 2013.09.12
' Developer : Ivan
' Purpose   : Clear the txtSearch
'------------------------------------------------------------------------------
Private Sub btnClear_Click()
    
    If Me.txtSearch.Text <> "" Then
    
        '-----------------------------------Clear txtSearch
        Me.txtSearch.Text = ""
    
        '-----------------------------------Move Selected Values to the Top of the List
        Call DisplaySelected
    
    End If

End Sub
'------------------------------------------------------------------------------
' btnDisplaySelected_Click()
' Date      : 2013.09.12
' Developer : Ivan
' Purpose   : Moves the selected value to the Top of the List
'------------------------------------------------------------------------------
Private Sub btnDisplaySelected_Click()

    Call DisplaySelected
       
End Sub
'------------------------------------------------------------------------------
' btnUnSelectAll_Click()
' Date      : 2013.09.12
' Developer : Ivan
' Purpose   : UnSelect Values From ListBox
'------------------------------------------------------------------------------
Private Sub btnUnSelectAll_Click()

Dim lngCount As Long
    
    For lngCount = 0 To Me.lbxList.ListCount - 1
        Me.lbxList.Selected(lngCount) = False
    Next lngCount

    Call Update_Data
    
End Sub

Private Sub lblSelectedFied_Click()

End Sub

'------------------------------------------------------------------------------
' lbxList_MouseUp()
' Date      : 2013.09.12
' Developer : Ivan
' Purpose   : Runs Update_Data() after a click on the ListBox
'------------------------------------------------------------------------------
Private Sub lbxList_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    Call Update_Data
End Sub
'------------------------------------------------------------------------------
' txtSearch_Change()
' Date      : 2013.09.12
' Developer : Ivan
' Purpose   : Filters values in the ListBox according to the string in txtSearch
'------------------------------------------------------------------------------
Private Sub txtSearch_Change()

Dim strSearch As String
Dim lngCount As Long
Dim lngCount2 As Long
Dim lngIndex As Long
    
    strSearch = Me.txtSearch.Text

    If strSearch = "" Then
        Me.lbxList.Clear
        For lngCount = 0 To lngTotalItems
            Me.lbxList.AddItem arrItemsSelected(lngCount, 0), lngCount
            If arrItemsSelected(lngCount, 1) = "TRUE" Then
                Me.lbxList.Selected(lngCount) = True
            End If
        Next lngCount
        
        Call DisplaySelected
    Else
        
        lngIndex = 0
        Me.lbxList.Clear
        
        For lngCount = 0 To lngTotalItems
            If InStr(1, UCase(arrItemsSelected(lngCount, 0)), UCase(strSearch)) > 0 Then
                Me.lbxList.AddItem arrItemsSelected(lngCount, 0), lngIndex
                If arrItemsSelected(lngCount, 1) = "TRUE" Then
                    Me.lbxList.Selected(lngIndex) = True
                End If
                lngIndex = lngIndex + 1
            End If
        Next lngCount
    End If

End Sub

'------------------------------------------------------------------------------
' Update_Data()
' Date      : 2013.09.12
' Developer : Ivan
' Purpose   : Updates the selected fields in the window
'------------------------------------------------------------------------------

Public Sub Update_Data()

Dim lngCount As Long
Dim lngCount2 As Long

    For lngCount = 0 To Me.lbxList.ListCount - 1
        For lngCount2 = 0 To lngTotalItems
            If Me.lbxList.List(lngCount) = arrItemsSelected(lngCount2, 0) Then
                If Me.lbxList.Selected(lngCount) = True Then
                    arrItemsSelected(lngCount2, 1) = "TRUE"
                Else
                    arrItemsSelected(lngCount2, 1) = "FALSE"
                End If
                Exit For
            End If
        Next lngCount2
    Next lngCount
    
End Sub

'------------------------------------------------------------------------------
' UserForm_Activate()
' Date      : 2012.05
' Developer : ruggiers
' Purpose   : Runs when the form loads
'------------------------------------------------------------------------------
Private Sub UserForm_Activate()
Dim lngCount As Long
    '---------------------------------- Go to the active cell in the spreadsheet
    ActiveSheet.Activate
    ActiveCell.Select
    
    '---------------------------------- Read the value of the selected field (in order to preselect the option(s))
    Call createPropertiesView(ActiveCell.Value)
    
    
    '-----------------------Ivan-2013.09.12----------- Read values from the list view--------
    If Me.lbxList.ListCount > 0 Then
    
        lngTotalItems = Me.lbxList.ListCount - 1
            
        ReDim arrItemsSelected(0 To Me.lbxList.ListCount - 1, 0 To 1)
        For lngCount = 0 To Me.lbxList.ListCount - 1
            arrItemsSelected(lngCount, 0) = Me.lbxList.List(lngCount)
        Next lngCount
        
        Call Update_Data
        '-----------------------------------------------------------------------------------------
    
        Call DisplaySelected
    
    End If

    '-----------------------------------------------------------------------------------------
    
End Sub

'------------------------------------------------------------------------------
' DisplaySelected()
' Date      : 2013.09.12
' Developer : Ivan
' Purpose   :
'------------------------------------------------------------------------------
Public Sub DisplaySelected()

Dim lngCount As Long
Dim strCopy() As String
Dim strSelected As String
Dim lngIndex As Long
  
    '--------------------------------------------------------------------Store Selected Values
    For lngCount = 0 To Me.lbxList.ListCount - 1
           If Me.lbxList.Selected(lngCount) = True Then
                strSelected = strSelected & Me.lbxList.List(lngCount) & "|"
           End If
    Next lngCount
    
    
    '--------------------------------------------------------------------Remove Selected Items from the List
    lngCount = 0
    Do
        If Me.lbxList.Selected(lngCount) = True Then
            Me.lbxList.RemoveItem lngCount
        Else
            lngCount = lngCount + 1
        End If
    Loop While (lngCount <= Me.lbxList.ListCount - 1)
    
    '--------------------------------------------------------------------Write Selected Values on the Top of the List
    strCopy = Split(strSelected, "|")
    
    For lngIndex = 0 To UBound(strCopy) - 1
        Me.lbxList.AddItem Trim(strCopy(lngIndex)), lngIndex
        Me.lbxList.Selected(lngIndex) = True
    Next lngIndex
    
    '--------------------------------------------------------------------Place Cursor on the First Item of the List
    Me.lbxList.TopIndex = 0
    
End Sub

'------------------------------------------------------------------------------
' createPropertiesView()
' Date      : 2012.05
' Developer : ruggiers
' Purpose   :
'------------------------------------------------------------------------------
Public Sub createPropertiesView(ByVal strSelected As String)
    
    blnSingleValue = False
    
    '---------------------------------- Get the current selected value(s)
Dim arrSelected() As String
    arrSelected = Split(strSelected, "|")
    
    '---------------------------------- Clear the list
    Me.lbxList.Clear
    
    '---------------------------------- Read info from the sheet
Dim intRowHeader As Integer
Dim xlsSheet As Excel.Worksheet
Dim xlsRange As Excel.Range
Dim strSheetName As String
Dim strSelectedField As String
    
    intRowHeader = ROW_HEADER_DATA
    
    Set xlsSheet = ActiveSheet
    Set xlsRange = ActiveCell
    
    strSheetName = xlsSheet.Name
    strSelectedField = xlsSheet.Cells(intRowHeader, xlsRange.Column).Value
    
    Set xlsRange = Nothing
    Set xlsSheet = Nothing
    
    Me.lblSelectedSheet.Caption = strSheetName
    Me.lblSelectedFied.Caption = strSelectedField
    
    '---------------------------------- Read hierarchy info from the sheet
Dim xlsSheetControlList As Excel.Worksheet
    
    On Error GoTo Could_Not_Find_ControlList_WS
    
    Set xlsSheetControlList = Excel.ActiveWorkbook.Sheets("Control List")
    
    On Error GoTo 0
    
Dim intRowSupportedValues As Integer
Dim intRow As Integer

Dim xlsRangeCellValue As Excel.Range

Dim strValue As String
Dim arrValue() As String
Dim strValueList As String
Dim strValueSheetName As String

Dim lngListIndex As Long

Dim strProperty As String
Dim lngCont As Long
Dim lngCont2 As Long
Dim blnFind As Boolean
Dim strValueError As String
    
    If (Not xlsSheetControlList Is Nothing) Then
        
        '------------------------------
        intRowSupportedValues = ROW_SUPPORTED_VALUES_CONTROL 'change
        intRow = ROW_VALUES_CONTROL 'change
        
        Dim strSupportedValues As String
        strSupportedValues = xlsSheetControlList.Cells(intRowSupportedValues, modLib2.fnDetectHeaderCol_2(5, Cells(2, ActiveCell.Column), xlsSheetControlList)) 'change
        
        If UCase(strSupportedValues) = "SINGLE VALUE" Then
            blnSingleValue = True
            Me.lblSupportedValues.Caption = "This field only supports one value from the list."
        Else
            If strSupportedValues <> "" Then
                Me.lblSupportedValues.Caption = "This field supports multiple values from the list."
            Else
                Me.lblSupportedValues.Caption = ""
            End If
        End If
        
        
        '------------------------------
        Set xlsRangeCellValue = xlsSheetControlList.Cells(intRow, modLib2.fnDetectHeaderCol_2(5, Cells(2, ActiveCell.Column), xlsSheetControlList))
        
        '------------------------------ Read the value from the cell
        strValue = xlsRangeCellValue.Value
        
        lngListIndex = 0
        
        
        '------------------------------
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        Do While (strValue <> "")
            
            '-------------------------- Parse the values
            '                           Values parsed from the cell
            arrValue = Split(strValue, "|")
            strValueList = arrValue(0)
            strValueList = Trim(strValueList)
            '-------------------------- In case that the value is only valid for specific sheets
            If UBound(arrValue) > 0 Then
                strValueSheetName = arrValue(1)
                strValueSheetName = Trim(strValueSheetName)
            End If
            
            '-------------------------- If the value is only valid for some specific sheet
            If strValueSheetName <> "" Then
                '---------------------- Compare the name from the actual sheet, with the valid sheet
                If UCase(strValueSheetName) = UCase(strSheetName) Then
                    Me.lbxList.AddItem strValueList, lngListIndex
                    lngListIndex = lngListIndex + 1
                End If
            Else
                Me.lbxList.AddItem strValueList, lngListIndex
                lngListIndex = lngListIndex + 1
            End If
            
            '-------------------------- Go to next cell
            intRow = intRow + 1
            Set xlsRangeCellValue = xlsSheetControlList.Cells(intRow, modLib2.fnDetectHeaderCol_2(5, Cells(2, ActiveCell.Column), xlsSheetControlList))
            
            '-------------------------- Get cell value
            strValue = xlsRangeCellValue.Value
            
        Loop
        
        
        '------------------------------
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Special validation.
        '                               Inside the sheet "Master overlay" or when the user rename the sheets, we'll display all the values.
        If lngListIndex = 0 Then
            
            '--------------------------
            intRow = ROW_VALUES_CONTROL
            
            Set xlsRangeCellValue = xlsSheetControlList.Cells(intRow, modLib2.fnDetectHeaderCol_2(5, Cells(2, ActiveCell.Column), xlsSheetControlList))
            
            '-------------------------- Read the value from the cell
            strValue = xlsRangeCellValue.Value
            
            Do While (strValue <> "")
                
                '---------------------- Parse the values
                '                       Values parsed from the cell
                arrValue = Split(strValue, "|")
                strValueList = arrValue(0)
                strValueList = Trim(strValueList)
                
                Me.lbxList.AddItem strValueList, lngListIndex
                lngListIndex = lngListIndex + 1
                
                '---------------------- Go to next cell
                intRow = intRow + 1
                Set xlsRangeCellValue = xlsSheetControlList.Cells(intRow, ActiveCell.Column)
                
                '---------------------- Get cell value
                strValue = xlsRangeCellValue.Value
                
            Loop
            
        End If
        
        
        '------------------------------
        'Call sortListBox(Me.lbxList)
        
        
        '------------------------------
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        strValueError = ""
        For lngCont = 0 To UBound(arrSelected)
            
            strValue = arrSelected(lngCont)
            strValue = Trim(strValue)
            blnFind = False
            
            For lngCont2 = 0 To Me.lbxList.ListCount - 1
                
                strProperty = Me.lbxList.List(lngCont2)
                strProperty = Trim(strProperty)
                If UCase(strValue) = UCase(strProperty) Then
                    Me.lbxList.Selected(lngCont2) = True
                    blnFind = True
                    Exit For
                End If
                
            Next lngCont2
            
            If blnFind = False Then
                If strValueError <> "" Then
                    strValueError = strValueError & vbCrLf
                End If
                strValueError = strValueError & " - " & strValue
            End If
            
        Next lngCont
        
        '------------------------------
        If strValueError <> "" Then
            '-------------------------- warn the user
            MsgBox "The following values inside the cell are invalid:" & vbCrLf & _
                    strValueError _
                , vbCritical _
                , "ERROR"
        End If
        
'        '------------------------------ Check if some value is selected, and then select the element
'        For lngCont = 0 To Me.lbxList.ListCount - 1
'
'            strProperty = Me.lbxList.List(lngCont)
'            If (IsInArray(arrSelected, strProperty)) Then
'                Me.lbxList.Selected(lngCont) = True
'            End If
'
'        Next lngCont
        
    End If
    Set xlsRangeCellValue = Nothing
    Set xlsSheetControlList = Nothing
    
    Exit Sub
    
Could_Not_Find_ControlList_WS:
    MsgBox "Could not find the WorkSheet. Please make sure the 'Control_List' tab exists and has data." _
        , vbCritical _
        , "ERROR - Could not find Control List"
    Resume Next
    
End Sub

'------------------------------------------------------------------------------
' IsInArray()
' Date      : 2012.05
' Developer : ruggiers
' Purpose   :
'------------------------------------------------------------------------------
Private Function IsInArray(ByRef arrSelected() As String _
                           , ByVal strValue As String)

    IsInArray = False
    
    Dim ix As Integer
    For ix = LBound(arrSelected) To UBound(arrSelected)
        If (strValue = arrSelected(ix)) Then
            IsInArray = True
            Exit Function
        End If
    Next
    
End Function

'------------------------------------------------------------------------------
' Date      : 2012.05
' Developer : ruggiers
' Purpose   : Sort Listbox Alphabetically
'------------------------------------------------------------------------------
Private Sub sortListBox(ByVal lst As MSForms.ListBox)

Dim arrItems As Variant
Dim arrTemp As Variant
Dim intOuter As Long
Dim intInner As Long

    arrItems = lst.List
    
    For intOuter = LBound(arrItems, 1) To UBound(arrItems, 1)
        For intInner = intOuter + 1 To UBound(arrItems, 1)
            If UCase(arrItems(intOuter, 0)) > UCase(arrItems(intInner, 0)) Then
                
                arrTemp = arrItems(intOuter, 0)
                arrItems(intOuter, 0) = arrItems(intInner, 0)
                arrItems(intInner, 0) = arrTemp
                
            End If
        Next intInner
    Next intOuter
    
    '---------------------------------- Clear the listbox
    lst.Clear
    
    '---------------------------------- Add the sorted array back to the listbox
    For intOuter = LBound(arrItems, 1) To UBound(arrItems, 1)
        lst.AddItem arrItems(intOuter, 0)
    Next intOuter
    
End Sub

'------------------------------------------------------------------------------
' btnAccept_Click()
' Date      : 2012.05
' Developer : ruggiers
' Purpose   : The user clicked the ACCEPT button
'------------------------------------------------------------------------------
Private Sub btnAccept_Click()
    
    Dim strValue As String
    Dim lngCount As Long
        
    
    '----------------------------Ivan: -2013-08-22-------
'    Me.lbxList.Clear
'    For lngCount = 0 To lngTotalItems
'        Me.lbxList.AddItem arrItemsSelected(lngCount, 0), lngCount
'        If arrItemsSelected(lngCount, 1) = "TRUE" Then
'            Me.lbxList.Selected(lngCount) = True
'        End If
'    Next lngCount
    
'    Call Update_Data
    '----------------------------------------------------
    
    If Me.lbxList.ListCount > 0 Then
    
        strValue = ""
        
         Dim lngCont As Long
    '    For lngCont = 0 To Me.lbxList.ListCount - 1
    '        If Me.lbxList.Selected(lngCont) = True Then
    '            If (strValue <> "") Then strValue = strValue & "|"
    '            strValue = strValue & Me.lbxList.List(lngCont)
    '        End If
    '    Next lngCont
        
     '----------------------------Ivan: -2013-09-12-------
        For lngCont = 0 To lngTotalItems
            If arrItemsSelected(lngCont, 1) = "TRUE" Then
                If (strValue <> "") Then strValue = strValue & "|"
                strValue = strValue & arrItemsSelected(lngCont, 0)
            End If
        Next lngCont
     '-----------------------------------------------------
        
        '---------------------------------- Check to make sure something is actually selected
        If (strValue = "") Then
            '------------------------------ warn the user
            MsgBox "No Option Selected. Please select at least one option from the List." _
                , vbOKOnly _
                , "INFORMATION"
            Exit Sub
        End If
        
        '----------------------------------
        If blnSingleValue = True Then
            Dim arrTemp() As String
            arrTemp = Split(strValue, "|")
            If UBound(arrTemp) > 0 Then
                '-------------------------- warn the user
                MsgBox "This field only supports one value from the list." _
                    , vbCritical _
                    , "ERROR"
                Exit Sub
            End If
        End If
        
        '---------------------------------- Hide the form
        Me.Hide
        
        '---------------------------------- Go to the active cell in the spreadsheet
        ActiveSheet.Activate
        ActiveCell.Select
        
        '---------------------------------- Update the cell with the "key" of the selected option
        ActiveCell.Value = strValue
    
    End If
    
    '---------------------------------- Close the form
    Unload Me
    
End Sub

'------------------------------------------------------------------------------
' btnCancel_Click()
' Date      : 2012.05
' Developer : ruggiers
' Purpose   : The user clicked the CANCEL button
'------------------------------------------------------------------------------
Private Sub btnCancel_Click()

    '---------------------------------- Unload the form
    Unload Me
    
End Sub

'------------------------------------------------------------------------------
' btnSelectAll_Click()
' Date      : 2012.05
' Developer : ruggiers
' Purpose   : Selects all the items in the tree
'------------------------------------------------------------------------------
Private Sub btnSelectAll_Click()

    Dim lngCont As Long
    For lngCont = 0 To Me.lbxList.ListCount - 1
        Me.lbxList.Selected(lngCont) = True
    Next lngCont
    
    Call Update_Data
    
End Sub
Attribute VB_Name = "modEXPORTxml"
Sub Export_To_XML()

Const ForAppending = 2

Dim assetCategories(11) As String
Dim cat As Variant

assetCategories(0) = "Campaign"
assetCategories(1) = "Document - General"
assetCategories(2) = "DRM - Talent Release Form"
assetCategories(3) = "DRM - License Agreement"
assetCategories(4) = "Image - Annotated"
assetCategories(6) = "Image - Historic"
assetCategories(5) = "Image - Person or Portrait"
assetCategories(7) = "Image - Product Only"
assetCategories(8) = "Image - Product in Use"
assetCategories(9) = "Image - Supporting"
assetCategories(10) = "Multimedia - Corporate video"
assetCategories(11) = "Multimedia - Video demo"


Set fs = CreateObject("Scripting.FileSystemObject")
Set a = fs.CreateTextFile(ThisWorkbook.Path + "\" + ThisWorkbook.Name + ".ahm", ForAppending, True)
a.WriteLine ("<?xml version='1.0' encoding='UTF-8'?>")
a.WriteLine ("<assets>")

For Each cat In assetCategories
    usedRowCount = Worksheets(cat).UsedRange.Rows.Count
    usedColumnCount = Worksheets(cat).UsedRange.Columns.Count

    assetCat = Worksheets(cat).Cells(2, 1).Value
    
    For i = 2 To usedRowCount
        Filename = Worksheets(cat).Cells(i, 2).Value
        If Filename <> "" Then 'Validation added by Ivan
            a.WriteLine ("<asset category='" + assetCat + "' name='" + Filename + "'>")
            For j = 1 To usedColumnCount
            xmlValue = Worksheets(cat).Cells(i, j).Value
            If (xmlValue <> "") Then
                xmlTag = HeaderToIndex(Worksheets(cat).Cells(1, j).Value)
                If (xmlTag <> "ASSET_CATEGORY") Then
                    If (xmlTag <> "FILENAME") Then
                        a.WriteLine ("<" + xmlTag + ">" + xmlValue + "</" + xmlTag + ">")
                    End If
                End If
            End If
            Next j
            a.WriteLine ("</asset>")
        End If ' Ends here
    Next i
Next

a.WriteLine ("</assets>")
a.Close

End Sub

Public Function HeaderToIndexField(ByVal vstrHeader As String) As String

On Error GoTo Err_Handler:

If (StrComp(vstrHeader, "TARGET_COUNTRIES") = 0) Then
    HeaderToIndexField = "_10_target_countries_sms_m_t"
ElseIf (StrComp(vstrHeader, "DESCRIPTION") = 0) Then
    HeaderToIndexField = "_02_description_sms_s_t"

Else
    HeaderToIndexField = vstrHeader
End If

Err_Handler:
    
End Function

Public Function HeaderToIndex(ByVal vstrHeader As String) As String

On Error GoTo Err_Handler:
HeaderToIndex = ""
usedRowCount = Worksheets("Export").UsedRange.Rows.Count

For i = 1 To usedRowCount
    If (StrComp(vstrHeader, Worksheets("Export").Cells(i, 1).Value) = 0) Then
           HeaderToIndex = Worksheets("Export").Cells(i, 2).Value
        Exit For
    End If
Next i

If (HeaderToIndex = "") Then
    HeaderToIndex = vstrHeader
End If

Err_Handler:
    
End Function


Attribute VB_Name = "modLib"

Option Explicit

'------------------------------------------------------------------------------
' Date      : 2008.09
' Developer : ruggiers
' Purpose   : Converts a column number into a column letter.
' Input     : intNum - Numero de la columna.
' Ouput     : As String - Letra de la columna.
'------------------------------------------------------------------------------
Public Function fnColToLetter(ByVal vintNum As Integer) As String

Dim intNum1 As Integer
Dim intNum2 As Integer

    If vintNum < 27 Then
        fnColToLetter = Chr$(64 + vintNum)
    Else
        vintNum = vintNum - 1
        Do
            intNum1 = intNum1 + 1
            vintNum = vintNum - 26
        Loop Until vintNum < 26
        
        intNum2 = (vintNum Mod 26)
        fnColToLetter = Chr$(64 + intNum1) & Chr$(65 + intNum2)
    End If
    
End Function

'------------------------------------------------------------------------------
' Date      : 2010.10
' Developer : ruggiers
' Purpose   :
'------------------------------------------------------------------------------
Public Function fnDetectHeaderCol(ByVal vlngRow As Long _
                                  , ByVal vstrHeader As String) As Long

On Error GoTo Err_Handler:

Dim rngRange As Range

    fnDetectHeaderCol = 0
    
    With ActiveSheet.Rows(vlngRow)
        Set rngRange = .Find(vstrHeader, LookIn:=xlValues, Lookat:=xlWhole)
    End With
    If Not rngRange Is Nothing Then
        fnDetectHeaderCol = rngRange.Column
    End If

Err_Handler:
    
End Function
Attribute VB_Name = "modLib2"

Option Explicit

'------------------------------------------------------------------------------
' Date      : 2014.07
' Developer : ivan s.
' Purpose   : Find Last Row Used in a spreadhseet
'------------------------------------------------------------------------------
Function LastRow(wks As Worksheet)

On Error Resume Next

    LastRow = wks.Cells.Find(What:="*", _
                                After:=wks.Range("A1"), _
                                Lookat:=xlPart, _
                                LookIn:=xlFormulas, _
                                SearchOrder:=xlByRows, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Row
    
    On Error GoTo 0
    
End Function

'------------------------------------------------------------------------------
' Date      : 2014.07
' Developer : ivan s.
' Purpose   :
'------------------------------------------------------------------------------
Public Function fnDetectHeaderCol_2(ByVal vlngRow As Long _
                                    , ByVal vstrHeader As String _
                                    , ByRef wksSheet As Worksheet) As Long

On Error GoTo Err_Handler:

Dim rngRange As Range

    fnDetectHeaderCol_2 = 0
    
    With wksSheet.Rows(vlngRow)
        Set rngRange = .Find(vstrHeader, LookIn:=xlValues, Lookat:=xlWhole)
    End With
    If Not rngRange Is Nothing Then
        fnDetectHeaderCol_2 = rngRange.Column
    End If
    
Err_Handler:
    
End Function
Attribute VB_Name = "modProperties"

Option Explicit

Const ROW_HEADER_DATA As Long = 1

'------------------------------------------------------------------------------
' Date      : 2012.05
' Developer : ruggiers
' Purpose   :
'------------------------------------------------------------------------------
Public Sub showProperties()

    '---------------------------------- Go to the active cell in the spreadsheet
    ActiveSheet.Activate
    ActiveCell.Select
    
    '---------------------------------- Check active cell to make sure it is in the proper range
    If (ActiveCell.Row <= ROW_HEADER_DATA + 1) Then
        '/Invalid cell selected
        MsgBox "Please select an editable metadata cell." _
            , vbCritical _
            , "ERROR - Invalid Cell Selected"
    Else
        '/Show the form
        frmProperties.Show
    End If
    
End Sub


INQUEST-PP=macro
