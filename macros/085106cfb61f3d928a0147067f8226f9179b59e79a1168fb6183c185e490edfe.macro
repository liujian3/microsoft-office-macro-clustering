Attribute VB_Name = "Module1"
Private Sub Add_rows()

Dim LastRow As Integer
Dim RowsToAdd As Integer
Dim NextRow As Integer
Dim UltimateRow As Integer

On Error GoTo ErrorMsg

LastRow = 2 + Application.WorksheetFunction.CountA(ThisWorkbook.Worksheets("Insert_GAPs").Columns(4).Cells)
RowsToAdd = Application.InputBox("Please insert the number of rows you wish to add (as a number, no text).")
NextRow = LastRow + 1
UltimateRow = LastRow + RowsToAdd

ThisWorkbook.Worksheets("Insert_GAPs").Unprotect ("bigsecret")

ThisWorkbook.Worksheets("Insert_GAPs").Rows(LastRow).Copy
ThisWorkbook.Worksheets("Insert_GAPs").Rows(NextRow & ":" & UltimateRow).Insert Shift:=xlDown
ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(NextRow, 2), Cells(UltimateRow, 2)).ClearContents
ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(NextRow, 5), Cells(UltimateRow, 5)).ClearContents
ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(NextRow, 7), Cells(UltimateRow, 23)).ClearContents

ThisWorkbook.Worksheets("Insert_GAPs").Protect ("bigsecret")

Exit Sub

ErrorMsg:
ThisWorkbook.Worksheets("Insert_GAPs").Protect ("bigsecret")
MsgBox ("An error occured. Please try again, noting that the number of rows to be added should be specified as a number.")

End Sub
Private Sub Delete_empty_rows()

Dim FirstRow As Integer
Dim LastRow As Integer
Dim VirtualRow As Integer
Dim RealRow As Integer

FirstRow = 4
LastRow = 2 + Application.WorksheetFunction.CountA(ThisWorkbook.Worksheets("Insert_GAPs").Columns(4).Cells)

ThisWorkbook.Worksheets("Insert_GAPs").Unprotect ("bigsecret")

If LastRow > FirstRow Then
    VirtualRow = FirstRow + 1
    RealRow = FirstRow + 1
    Do Until VirtualRow > LastRow
        If ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 2) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 5) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 7) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 8) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 9) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 10) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 11) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 12) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 13) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 14) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 15) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 16) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 17) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 18) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 19) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 20) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 21) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 22) = "" _
        And ThisWorkbook.Worksheets("Insert_GAPs").Cells(RealRow, 23) = "" Then
            ThisWorkbook.Worksheets("Insert_GAPs").Rows(RealRow).Delete
            VirtualRow = VirtualRow + 1
        Else
            VirtualRow = VirtualRow + 1
            RealRow = RealRow + 1
        End If
    Loop
End If

ThisWorkbook.Worksheets("Insert_GAPs").Protect ("bigsecret")

End Sub
Private Sub Sort_by_crop_code()

Dim FirstRow As Integer
Dim LastRow As Integer

FirstRow = 4
LastRow = 2 + Application.WorksheetFunction.CountA(ThisWorkbook.Worksheets("Insert_GAPs").Columns(4).Cells)

ThisWorkbook.Worksheets("Insert_GAPs").Unprotect ("bigsecret")

On Error GoTo ErrorLine

ThisWorkbook.Worksheets("Insert_GAPs").Sort.SortFields.Clear
ThisWorkbook.Worksheets("Insert_GAPs").Sort.SortFields.Add Key:=Cells(FirstRow, 1), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With ThisWorkbook.Worksheets("Insert_GAPs").Sort
        .SetRange Range(Cells(FirstRow, 1), Cells(LastRow, 23))
        .Header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(FirstRow, 1), Cells(LastRow, 23)).Rows.AutoFit

ErrorLine:

ThisWorkbook.Worksheets("Insert_GAPs").Protect ("bigsecret")

End Sub
Private Sub Validate_entries()

Dim FirstRow As Integer
Dim LastRow As Integer

Dim PHI_0 As Boolean
Dim BBCH_conflict As Boolean
Dim Param_missing As Boolean
Dim Post_outdoor As Boolean
Dim Seed_indoor As Boolean

Dim MyString As String

FirstRow = 4
LastRow = 2 + Application.WorksheetFunction.CountA(ThisWorkbook.Worksheets("Insert_GAPs").Columns(4).Cells)

Color_NotMandatory = 13434879
Color_Mandatory = 10092543
Color_Highlight = 49407

PHI_0 = False
BBCH_conflict = False
Param_missing = False
Post_outdoor = False
Seed_indoor = False

MyString = ""

ThisWorkbook.Worksheets("Insert_GAPs").Unprotect ("bigsecret")

ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(FirstRow, 2), Cells(LastRow, 2)).Interior.Color = Color_Mandatory
ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(FirstRow, 5), Cells(LastRow, 5)).Interior.Color = Color_Mandatory
ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(FirstRow, 7), Cells(LastRow, 10)).Interior.Color = Color_NotMandatory
ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(FirstRow, 11), Cells(LastRow, 11)).Interior.Color = Color_Mandatory
ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(FirstRow, 12), Cells(LastRow, 14)).Interior.Color = Color_NotMandatory
ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(FirstRow, 15), Cells(LastRow, 15)).Interior.Color = Color_Mandatory
ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(FirstRow, 16), Cells(LastRow, 18)).Interior.Color = Color_NotMandatory
ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(FirstRow, 19), Cells(LastRow, 21)).Interior.Color = Color_Mandatory
ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(FirstRow, 22), Cells(LastRow, 22)).Interior.Color = Color_NotMandatory

For Each c In ThisWorkbook.Worksheets("Insert_GAPs").Range(Cells(FirstRow, 1), Cells(LastRow, 22)).Cells
    If c.Column = 21 Then
        If c.Value = 0 _
        And Not c.Value = "" _
        And Not c.Offset(0, -17).Value = "non-EU" Then
            c.Interior.Color = Color_Highlight
            PHI_0 = True
        Else
            If c.Value = "" _
            Or c.Value = "n.a." _
            Or c.Value = "-" Then
                On Error GoTo ErrorLine
                If (c.Offset(0, -20).Value >= 100000 And c.Offset(0, -20).Value < 200000) _
                Or (c.Offset(0, -20).Value >= 230000 And c.Offset(0, -20).Value < 240000) _
                Or (c.Offset(0, -20).Value >= 260000 And c.Offset(0, -20).Value < 270000) _
                Or (c.Offset(0, -20).Value >= 300000 And c.Offset(0, -20).Value < 630000) _
                Or (c.Offset(0, -20).Value >= 640000 And c.Offset(0, -20).Value < 830000) _
                Then
                    If c.Offset(0, -8).Value = "" _
                    Or c.Offset(0, -8).Value = "n.a." _
                    Or c.Offset(0, -8).Value = "-" _
                    Or Val(c.Offset(0, -8).Value) > 69 Then
                        c.Interior.Color = Color_Highlight
                        BBCH_conflict = True
                    End If
                Else
                    If c.Offset(0, -8).Value = "" _
                    Or c.Offset(0, -8).Value = "n.a." _
                    Or c.Offset(0, -8).Value = "-" _
                    Or Val(c.Offset(0, -8).Value) > 19 Then
                        c.Interior.Color = Color_Highlight
                        BBCH_conflict = True
                    End If
                End If
ErrorLine:
            End If
        End If
    Else
        If c.Interior.Color = Color_Mandatory Then
            If c.Value = "" _
            Or c.Value = "n.a." _
            Or c.Value = 0 _
            Or c.Value = "-" Then
                c.Interior.Color = Color_Highlight
                Param_missing = True
            Else
                If c.Column = 5 _
                And InStr(1, c.Value, "Outdoor", vbTextCompare) > 0 _
                And InStr(1, c.Offset(0, 6).Value, "Post", vbTextCompare) > 0 Then
                    c.Interior.Color = Color_Highlight
                    Post_outdoor = True
                End If
                If c.Column = 5 _
                And InStr(1, c.Value, "Outdoor", vbTextCompare) = 0 _
                And InStr(1, c.Offset(0, 6).Value, "Seed", vbTextCompare) > 0 Then
                    c.Interior.Color = Color_Highlight
                    Seed_indoor = True
                End If
            End If
        End If
    End If
Next

If Param_missing Then MyString = MyString & "- At least one essential GAP parameter is not reported." & Chr(10)
If PHI_0 Then MyString = MyString & "- A PHI of 0 days is reported for at least one GAP, while such a PHI is normally not considered appropriate within the EU." & Chr(10)
If BBCH_conflict Then MyString = MyString & "- A PHI is not reported for at least one GAP, while the latest BBCH growth stage is also not considered sufficient to clearly define the GAP." & Chr(10)
If Post_outdoor Then MyString = MyString & "- At least one post-harvest treatment is reported as an outdoor GAP, while such authorisations are normally considered to be indoors." & Chr(10)
If Seed_indoor Then MyString = MyString & "- At least one seed treatment is reported as an indoor GAP only. If the treated seeds may also be used outdoor, it is preferable to indicate this GAP as outdoor as well." & Chr(10)

If Not PHI_0 And Not BBCH_conflict And Not Param_missing And Not Post_outdoor And Not Seed_indoor Then
    MsgBox ("Excellent! It seems that all your GAPs have been clearly reported." & Chr(10) & Chr(10) & "Many thanks.")
Else
    MsgBox ("Potential issues were identified for some GAP parameters and highlighted in orange. Possible reasons are the following:" & Chr(10) & _
            MyString & _
            Chr(10) & _
            "Please consider whether these entries need to be revised." & Chr(10) & _
            Chr(10) & _
            "Many thanks for your collaboration.")
End If

ThisWorkbook.Worksheets("Insert_GAPs").Protect ("bigsecret")

End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)

On Error GoTo ErrorLine

    
    Dim SearchString As String
    Dim SearchTerms As String
    Dim SearchTerm(1 To 5) As String
    Dim Count As Integer
    Dim SelectedVal As String
           
    If Target.Column = 2 And Not Target.Value = "" Then
    
        On Error GoTo ErrorMsg
        
        Application.EnableEvents = False
        
        If Application.WorksheetFunction.CountIf(ThisWorkbook.Worksheets("Crop_list").Range("A2:A237").Cells, Target.Value) = 1 Then
            
            Target.Value = UCase(Left(Target.Value, 1)) & LCase(Right(Target.Value, Len(Target.Value) - 1))
            
        Else
            
            SearchString = LCase(Target.Value)
            SearchTerms = SearchString
            For i = 1 To 5
                If InStr(1, SearchTerms, " ") = 0 Then
                    SearchTerm(i) = SearchTerms
                Else
                    SearchTerm(i) = Left(SearchTerms, InStr(1, SearchTerms, " ") - 1)
                    SearchTerms = Right(SearchTerms, Len(SearchTerms) - InStr(1, SearchTerms, " "))
                End If
            Next
            Count = 0
            SelectedVal = ""
    
            If SearchTerm(1) = SearchTerm(2) Then
                For Each c In ThisWorkbook.Worksheets("Crop_list").Range("A2:A237").Cells
                    If LCase(Left(c.Value, Len(SearchTerm(1)))) = SearchTerm(1) Then
                        SelectedVal = c.Value
                        Count = Count + 1
                    End If
                Next
            Else
                For Each c In ThisWorkbook.Worksheets("Crop_list").Range("A2:A237").Cells
                    If InStr(1, LCase(c.Value), SearchTerm(1)) > 0 _
                    And InStr(1, LCase(c.Value), SearchTerm(2)) > 0 _
                    And InStr(1, LCase(c.Value), SearchTerm(3)) > 0 _
                    And InStr(1, LCase(c.Value), SearchTerm(4)) > 0 _
                    And InStr(1, LCase(c.Value), SearchTerm(5)) > 0 Then
                        SelectedVal = c.Value
                        Count = Count + 1
                    End If
                Next
            End If

            If Count = 1 Then
                Target.Value = SelectedVal
            Else
                Target.Value = ""
                Target.Select
                MsgBox ("Sorry! A unique match could not be identified." & Chr(10) & Chr(10) & "Please try again using the drop down menu.")
            End If
        
        End If
        
        Application.EnableEvents = True
        
    End If

    If Target.Column = 11 And Not Target.Value = "" Then
    
        On Error GoTo ErrorMsg
        
        Application.EnableEvents = False
        
        If Application.WorksheetFunction.CountIf(ThisWorkbook.Worksheets("Dropdown_lists").Range("F2:F27").Cells, Target.Value) = 1 Then
            
            Target.Value = UCase(Left(Target.Value, 1)) & LCase(Right(Target.Value, Len(Target.Value) - 1))
            
        Else
            
            SearchString = LCase(Target.Value)
            SearchTerms = SearchString
            For i = 1 To 5
                If InStr(1, SearchTerms, " ") = 0 Then
                    SearchTerm(i) = SearchTerms
                Else
                    SearchTerm(i) = Left(SearchTerms, InStr(1, SearchTerms, " ") - 1)
                    SearchTerms = Right(SearchTerms, Len(SearchTerms) - InStr(1, SearchTerms, " "))
                End If
            Next
            Count = 0
            SelectedVal = ""
    
            For Each c In ThisWorkbook.Worksheets("Dropdown_lists").Range("F2:F27").Cells
                If InStr(1, LCase(c.Value), SearchTerm(1)) > 0 _
                And InStr(1, LCase(c.Value), SearchTerm(2)) > 0 _
                And InStr(1, LCase(c.Value), SearchTerm(3)) > 0 _
                And InStr(1, LCase(c.Value), SearchTerm(4)) > 0 _
                And InStr(1, LCase(c.Value), SearchTerm(5)) > 0 Then
                    SelectedVal = c.Value
                    Count = Count + 1
                End If
            Next
            
            If Count = 1 Then
                Target.Value = SelectedVal
            Else
                Target.Value = ""
                Target.Select
                MsgBox ("Sorry! A unique match could not be identified." & Chr(10) & Chr(10) & "Please try again using the drop down menu.")
            End If
        
        End If
        
        Application.EnableEvents = True
        
    End If

    If Target.Column = 20 And Not Target.Value = "" Then
    
        On Error GoTo ErrorMsg
        
        Application.EnableEvents = False
        
        If Application.WorksheetFunction.CountIf(ThisWorkbook.Worksheets("Dropdown_lists").Range("H2:H28").Cells, Target.Value) = 1 Then
            
            If UCase(Right(Target.Value, 1)) = "L" Then
                Target.Value = LCase(Left(Target.Value, Len(Target.Value) - 1)) & UCase(Right(Target.Value, 1))
            Else
                Target.Value = LCase(Target.Value)
            End If
            
        Else
            
            SearchString = LCase(Target.Value)
            SearchTerms = SearchString
            For i = 1 To 5
                If InStr(1, SearchTerms, " ") = 0 Then
                    SearchTerm(i) = SearchTerms
                Else
                    SearchTerm(i) = Left(SearchTerms, InStr(1, SearchTerms, " ") - 1)
                    SearchTerms = Right(SearchTerms, Len(SearchTerms) - InStr(1, SearchTerms, " "))
                End If
            Next
            Count = 0
            SelectedVal = ""
    
            For Each c In ThisWorkbook.Worksheets("Dropdown_lists").Range("H2:H28").Cells
                If SearchTerm(1) = LCase(Left(c.Value, Len(SearchTerm(1)))) _
                And InStr(1, LCase(Right(c.Value, Len(c.Value) - Len(SearchTerm(1)))), SearchTerm(2)) > 0 _
                And InStr(1, LCase(Right(c.Value, Len(c.Value) - Len(SearchTerm(1)))), SearchTerm(3)) > 0 _
                And InStr(1, LCase(Right(c.Value, Len(c.Value) - Len(SearchTerm(1)))), SearchTerm(4)) > 0 _
                And InStr(1, LCase(Right(c.Value, Len(c.Value) - Len(SearchTerm(1)))), SearchTerm(5)) > 0 Then
                    SelectedVal = c.Value
                    Count = Count + 1
                End If
            Next
            
            If Count = 1 Then
                Target.Value = SelectedVal
            Else
                Target.Value = ""
                Target.Select
                MsgBox ("Sorry! A unique match could not be identified." & Chr(10) & Chr(10) & "Please try again using the drop down menu.")
            End If
        
        End If
        
        Application.EnableEvents = True
        
    End If

    Exit Sub

ErrorMsg:
    Target.Value = ""
    Target.Select
    MsgBox ("Sorry! A unique match could not be identified." & Chr(10) & Chr(10) & "Please try again using the drop down menu.")
    Application.EnableEvents = True
    
ErrorLine:

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
