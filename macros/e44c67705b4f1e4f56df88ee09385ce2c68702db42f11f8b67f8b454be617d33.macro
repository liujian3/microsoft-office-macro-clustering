Attribute VB_Name = "Module1"
Attribute VB_Name = "Module10"
Sub DELETE_ROW_BASED_ON_DATE()

Range("F:F").NumberFormat = "m/d/yyyy"
Rows(2).Select
ActiveWindow.FreezePanes = True 'this simply freezes at row 2 so row 1 with header remains visible _
        could likely be removed from code (above 2 lines) with no impact on result
Rows(1).AutoFilter  'this appears to have a clearing function and I left at (1)
Dim LR As Integer
Dim i As Integer
 
'Create a variable that = the last used row in column D
LR = Cells(Rows.Count, "F").End(xlUp).Row
 
'Create a looping variable # to go backwards from the last used Row# to 1
For i = LR To 1 Step -1
    If Cells(i, "F").Value < #8/27/2016# Or Cells(i, "F").Value > #9/5/2016# Then 'note how full line is added for each "or" added
        Rows(i).EntireRow.Delete Shift:=xlUp                                        'would appear that "or: could be substituted with "and"
    End If
Next i
End
End Sub

Sub CLEAR_CELLS_NOT_CONTAINING_A_WORD_OR_PHRASE()

    'VBA CODE TO CLEAR CELLS NOT CONTAINING A SPECIFIC WORD OR PHRASE
    'What This VBA Code Does
    'This brief macro code with go through each cell in a designated range and determines if its value contains a word or phrase.  If the cell does not contain the word or phrase, then the cell's content is deleted.  If you want this code to do the opposite (clear cells that do contain the word/phrase), just add the word "Not" before "cell.Find()". There are many variations you can make with this code, but hopefully this provides a good starting point.

    'PURPOSE: Clear out all cells that do not contain a specific word/phrase
    'SOURCE: www.TheSpreadsheetGuru.com/the-code-vault

        Dim Rng As Range
        Dim Cell As Range
        Dim ContainWord As String
        
        'What range do you want to search?
          Set Rng = Range("A1:A10")
        
        'What phrase do you want to test for?
          ContainWord = "Magic"
        
        'Loop through each cell in range and test cell contents
          For Each Cell In Rng.Cells
            If Cell.Find(ContainWord) Is Nothing Then Cell.Clear
          Next Cell
        
End Sub

Sub COPY_FORMULAS_FROM_RECORDER_AND_CONVERT_TO_VBA()
'Re: VBA to copy formula from one cell to variable range

'I TESTED THIS ON 9/26/16 and it worked perfectly

'I have used Autofill before (that's basically what you get when you use the recorder), but I prefer FillDown. It's a bit cleaner to use...

'By the way, if you want to write a formula to multiple cells you can record that formula, then use VBA to write it to all the target cells simultaneously.

'1. Start the recorder, select the cell, press the F2 key, press Tab, stop the recorder.

'Assuming you did that for G6 you will see something like...
'Code:
Range("G6").Select
Selection.FormulaR1C1 = "whatever the formula was in the cell..."
Range("H6").Select
'This can be changed to...
'Code:
  Dim lngLastRow As Long 'declare a variable for the last row

  lngLastRow = Range("F" & Rows.Count).End(xlUp).Row
  Range("G6:G" & lngLastRow).FormulaR1C1 = "whatever the formula was in the cell..."

End Sub

Sub SelectFirstToLastInRow()

    Dim leftcell
    Dim rightcell
 '   Select From the First NonBlank to the Last Nonblank in the Row
    Set leftcell = Cells(ActiveCell.Row, 1)
    Set rightcell = Cells(ActiveCell.Row, Columns.Count)
    If IsEmpty(leftcell) Then Set leftcell = leftcell.End(xlToRight)
    If IsEmpty(rightcell) Then Set rightcell = rightcell.End(xlToLeft)
    If leftcell.Column = Columns.Count And rightcell.Column = 1 Then
        ActiveCell.Select
    Else
        Range(leftcell, rightcell).Select
    End If
End Sub

Sub SelectFirstToLastInColumn()
     Dim topcell
    Dim bottomcell
 '   Select From the First NonBlank to the Last Nonblank in the Column
    Set topcell = Cells(1, ActiveCell.Column)
    Set bottomcell = Cells(Rows.Count, ActiveCell.Column)
    If IsEmpty(topcell) Then Set topcell = topcell.End(xlDown)
    If IsEmpty(bottomcell) Then Set bottomcell = bottomcell.End(xlUp)
    If topcell.Row = Rows.Count And bottomcell.Row = 1 Then
        ActiveCell.Select
    Else
        Range(topcell, bottomcell).Select
    End If
End Sub

Sub SelectMultipleCells()

        'note: the Range property has 4 syntaxes....each of which is shown below
    
    Range("a1:c1").Select '"SELECT" is also used when selecting a single cell
    Selection.Interior.Color = rgbBlue         'if I want to do something to the multiple cells I just selected in above, I CAN'T use ActiveCell _
                                               ActiveCell refers to just ONE cell. So when you have MULTIPLE cells Selected (as above) and _
                                                you want to refer to them, you use the word "Selection" instead of "ActiveCell". Note that _
                                                when writing "Selection", you don't produce Intellisense.
                                                
                                                'RANGE OF CELLS=SELECTION (to choose that range which has been selected)
                                                'ONE CELL = ACTIVECELL (to choose that cell that has been selected)
    
    'just as with single cells, it's NOT necessary to SELECT the multiple cells before you attempt to change _
    one of their properties.  Simply refer directly to the property I want to modify ("Font" in below)
    Range("a1:c1").Font.Color = rgbDarkOrange
                                                'another advantage is that using the NON-SELECT method produces Intellisense _
                                                recall that you invoke it by hitting the ctrl+space bar after typing a dot _
                                                or at other certain places
    
    'Use shorthand/shortcut way to refer to multiple cells (same as for individual cells above)
    [a1:c1].Font.Size = 14  'again, doesn't produce Intellisense when using shorthand method
    
    'a slightly different syntax of the range technique:
    Range("a2", "c2").Interior.Color = rgbLightBlue 'with this, you are setting the upper left and lower right corners of the range _
                                                    to be selected.  This method becomes much more useful when you want to use _
                                                    relative selection methods.  So more powerful
    
    'combining range with cells. the above syntax is the only way we could incorporate cells (plural) to refer to multiple cells. _
    you CAN'T use "cells" itself as a command to refer to a block of cells on multiple range objects. If we wanted to use the cells _
    technique, you have to enclose it within the above syntax of the range propery as follows:
    
    Range(Cells(2, 1), Cells(2, 3)).Font.Color = rgbDarkBlue 'note that the two "cells" in range (2,1) and (2,3) refer to a2 and c2 _
                                                        respectively. e.g.(2nd row from top and first column is A2)
                                                        
    'Above "cells" method is rarely used when refering to multiple cells.  Instead, almost always use Range when you want to refer _
    to multiple cells.
     
    
End Sub

Attribute VB_Name = "Module11"
Sub PrintEFT()
Attribute PrintEFT.VB_ProcData.VB_Invoke_Func = " \n14"
'
' PrintEFT Macro
'

'
    Columns("B:B").ColumnWidth = 13.45
    ActiveWindow.SmallScroll Down:=51
    Rows("69:78").Select
    Selection.Delete Shift:=xlUp
    ActiveWindow.SmallScroll Down:=-3
    Columns("D:D").ColumnWidth = 14.09
    Columns("C:C").ColumnWidth = 34.73
    Range("H67").Select
    Selection.Font.Bold = True
    ActiveWindow.SmallScroll Down:=-75
    Columns("A:A").ColumnWidth = 22.55
    Application.PrintCommunication = False
    With ActiveSheet.PageSetup
        .PrintTitleRows = ""
        .PrintTitleColumns = ""
    End With
    Application.PrintCommunication = True
    ActiveSheet.PageSetup.PrintArea = ""
    Application.PrintCommunication = False
    With ActiveSheet.PageSetup
        .LeftHeader = ""
        .CenterHeader = ""
        .RightHeader = ""
        .LeftFooter = ""
        .CenterFooter = ""
        .RightFooter = ""
        .LeftMargin = Application.InchesToPoints(0.5)
        .RightMargin = Application.InchesToPoints(0.5)
        .TopMargin = Application.InchesToPoints(0.5)
        .BottomMargin = Application.InchesToPoints(0.5)
        .HeaderMargin = Application.InchesToPoints(0.5)
        .FooterMargin = Application.InchesToPoints(0.5)
        .PrintHeadings = False
        .PrintGridlines = False
        .PrintComments = xlPrintNoComments
        .CenterHorizontally = False
        .CenterVertically = False
        .Orientation = xlLandscape
        .Draft = False
        .PaperSize = xlPaperLetter
        .FirstPageNumber = xlAutomatic
        .Order = xlDownThenOver
        .BlackAndWhite = False
        .Zoom = 100
        .PrintErrors = xlPrintErrorsDisplayed
        .OddAndEvenPagesHeaderFooter = False
        .DifferentFirstPageHeaderFooter = False
        .ScaleWithDocHeaderFooter = True
        .AlignMarginsHeaderFooter = False
        .EvenPage.LeftHeader.Text = ""
        .EvenPage.CenterHeader.Text = ""
        .EvenPage.RightHeader.Text = ""
        .EvenPage.LeftFooter.Text = ""
        .EvenPage.CenterFooter.Text = ""
        .EvenPage.RightFooter.Text = ""
        .FirstPage.LeftHeader.Text = ""
        .FirstPage.CenterHeader.Text = ""
        .FirstPage.RightHeader.Text = ""
        .FirstPage.LeftFooter.Text = ""
        .FirstPage.CenterFooter.Text = ""
        .FirstPage.RightFooter.Text = ""
    End With
    Application.PrintCommunication = True
    ActiveWindow.SmallScroll Down:=51
End Sub
Attribute VB_Name = "Module12"
Sub Macro2()
Attribute Macro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro2 Macro
'
 'Name and assign Data Type for variable "LastRow"
    Dim LastRow As Long
    
    'Deletes picture from cell A1
    ActiveSheet.DrawingObjects.Select
    Selection.Delete
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
   'Unmerge all cells in sheet
    Cells.Select
    Selection.UnMerge
'
    Rows("1:6").Select
    Selection.Delete Shift:=xlUp
    Rows("2:2").Select
    Selection.Delete Shift:=xlUp
    Columns("A:C").Select
    Range("A2").Activate
    Selection.Delete Shift:=xlToLeft
    Columns("C:F").Select
    Range("C2").Activate
    Selection.Delete Shift:=xlToLeft
    Range("A7").Select
    ActiveCell.FormulaR1C1 = "1650"
    Range("A8").Select
    ActiveWindow.SmallScroll Down:=3
    Range("A27").Select
    ActiveCell.FormulaR1C1 = "4250"
    Range("A30").Select
    ActiveCell.FormulaR1C1 = "1660"
    Range("A41").Select
    ActiveCell.FormulaR1C1 = "4530"
    Range("A68").Select
    ActiveCell.FormulaR1C1 = "1690"
    Range("A3:F68").Select
    Range("A68").Activate
    ActiveWorkbook.Worksheets("Promotion Detail").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Promotion Detail").Sort.SortFields.Add Key:=Range( _
        "A4:A68"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortTextAsNumbers
    With ActiveWorkbook.Worksheets("Promotion Detail").Sort
        .SetRange Range("A3:F68")
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
 ' Macro3 Macro
'

'
    Range("F69").Select
    Selection.Font.Bold = True
    Rows("4:68").Select
    Range("A68").Activate
    Selection.RowHeight = 15
    Columns("B:B").ColumnWidth = 38
    ActiveWindow.SmallScroll Down:=27
    Columns("B:B").ColumnWidth = 34
    ActiveWindow.SmallScroll Down:=9
    Range("E71").Select
    ActiveWindow.SmallScroll Down:=-39
    Columns("E:E").ColumnWidth = 10
    Range("A1:D1").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlLTR
        .MergeCells = False
    End With
    Selection.Merge
End

End With


End Sub
Sub TimeStamp()
Attribute TimeStamp.VB_ProcData.VB_Invoke_Func = " \n14"
'
' TimeStamp Macro
'

'
    ActiveCell.FormulaR1C1 = "=NOW()"
    Range("F1").Select
End Sub
Attribute VB_Name = "Module13"
Sub ANew()
Attribute ANew.VB_ProcData.VB_Invoke_Func = " \n14"
'
' ANew Macro
'

'
    Rows("1:1").Select
    Selection.Delete Shift:=xlUp
    Columns("A:P").Select
    Range("A7").Activate
    With Selection
        .HorizontalAlignment = xlGeneral
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .MergeCells = False
    End With
    With Selection
        .HorizontalAlignment = xlGeneral
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .MergeCells = False
    End With
    With Selection
        .HorizontalAlignment = xlGeneral
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .MergeCells = False
       
    End With
    Selection.UnMerge
    Columns("B:C").Select
    Selection.Delete Shift:=xlToLeft
    Columns("E:I").Select
    Selection.Delete Shift:=xlToLeft
    Columns("G:G").Select
    Selection.Delete Shift:=xlToLeft

Range("B2:B6").Select
    Selection.Copy
    Range("C2:C6").Select
    ActiveSheet.Paste
    Columns("B:B").Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    Range("B13").Select
    ActiveCell.FormulaR1C1 = "1650"
    Range("B33").Select
    ActiveCell.FormulaR1C1 = "4250"
    Range("B36").Select
    ActiveCell.FormulaR1C1 = "1660"
    Range("B47").Select
    ActiveCell.FormulaR1C1 = "4530"
    Range("B74").Select
    ActiveCell.FormulaR1C1 = "1690"
    Range("A9:G74").Select
    Range("A74").Activate
    ActiveWorkbook.Worksheets("Promotion Detail").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Promotion Detail").Sort.SortFields.Add2 Key:=Range _
        ("B10:B74"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortTextAsNumbers
    With ActiveWorkbook.Worksheets("Promotion Detail").Sort
        .SetRange Range("A9:G74")
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    ActiveWindow.SmallScroll Down:=-84
End Sub

Attribute VB_Name = "Module2"
Attribute VB_Name = "Module3"
Attribute VB_Name = "Module4"
Sub BuydownEFT()
'
' BuydownEFT Macro
'
    'Name and assign Data Type for variable "LastRow"
    Dim LastRow As Long
    
    'Deletes picture from cell A1
    ActiveSheet.DrawingObjects.Select
    Selection.Delete
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
   'Unmerge all cells in sheet
    Cells.Select
    Selection.UnMerge
    
    'Delete unwanted rows
    Application.Goto Reference:="R2C1"
    Selection.EntireRow.Delete
    Rows("1:1").Select
    Selection.Delete Shift:=xlUp
    Rows("1:2").Select
    Selection.Delete Shift:=xlUp
    Rows("2:2").Select
    Selection.Delete Shift:=xlUp
    Rows("4:5").Select
    Selection.Delete Shift:=xlUp
    
    'delete unwanted columns
    Columns("E:E").Select
    Selection.Delete Shift:=xlToLeft
    Columns("G:G").Select
    Selection.Delete Shift:=xlToLeft
    Columns("B:B").Select
    Selection.Delete Shift:=xlToLeft
    
    
    'adjust width of columns
    Columns("C:C").Select
    Selection.ColumnWidth = 35.57
    Columns("D:D").Select
    Selection.ColumnWidth = 25
    
    'adjust row height for all stores
    Rows("5:5").Select
    Range(Selection, Selection.End(xlDown)).Select
    Selection.RowHeight = 15
    
    'Sort by store number
    LastRow = Cells(Rows.Count, 1).End(xlUp).Row
    Range("A5:L" & LastRow).Sort Key1:=Range("B5:B" & LastRow), _
       Order1:=xlAscending, Header:=xlNo

    
    'Go to cell A4 as last step in MACRO
    Range("A4").Select
End Sub


Attribute VB_Name = "Module5"
Sub Buydown2()
Attribute Buydown2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Buydown2 Macro
'

'
    Range("C1:C3").Select
    Selection.Copy
    Range("B1:B3").Select
    ActiveSheet.Paste
    Columns("C:D").Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    Columns("E:E").Select
    Selection.Delete Shift:=xlToLeft
    Columns("F:F").Select
    Selection.Delete Shift:=xlToLeft
    Range("B5").Select
    ActiveCell.FormulaR1C1 = "1650"
    Range("B6").Select
    ActiveCell.FormulaR1C1 = "4250"
    Range("B7").Select
    ActiveCell.FormulaR1C1 = "1660"
    Range("B8").Select
    ActiveWindow.SmallScroll Down:=42
    Range("B51").Select
    ActiveCell.FormulaR1C1 = "4530"
    Range("B52").Select
    ActiveWindow.SmallScroll Down:=-42
    Range("A4:H68").Select
    ActiveWorkbook.Worksheets("Invoice Details").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Invoice Details").Sort.SortFields.Add Key:=Range( _
        "B5:B68"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
    With ActiveWorkbook.Worksheets("Invoice Details").Sort
        .SetRange Range("A4:H68")
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub
Attribute VB_Name = "Module6"
Sub Del_rows_with_zero_in_column_of_activecell()
  'Charles Chickering, programming, 2007-02-09
  'Delete Rows with Zero in column   (#delrowswith0)
  
  'I USED THIS ON 9-24-16 AND IT WORKED
  
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  Const StartRow As Long = 1 'Row to Start looking at
  Dim StopRow As Long
  Dim Col As Long
  Col = Range("E:E").Column
  StopRow = Cells(Rows.Count, Col).End(xlUp).Row
  Dim cnt As Long
  For cnt = StopRow To StartRow Step -1
    If Not IsEmpty(Cells(cnt, Col)) Then
     If IsNumeric(Cells(cnt, Col)) Then
      If Cells(cnt, Col) =  Then Rows(cnt).Delete
     End If
    End If
  Next cnt
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "Module7"
Sub Del_rows_with_zero_in_column_of_activecell()
  'Charles Chickering, programming, 2007-02-09
  'Delete Rows with Zero in column   (#delrowswith0)
  
  'I USED THIS ON 9-24-16 AND IT WORKED
  
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  Const StartRow As Long = 1 'Row to Start looking at
  Dim StopRow As Long
  Dim Col As Long
  Col = Range("E:E").Column
  StopRow = Cells(Rows.Count, Col).End(xlUp).Row
  Dim cnt As Long
  For cnt = StopRow To StartRow Step -1
    If Not IsEmpty(Cells(cnt, Col)) Then
     If IsNumeric(Cells(cnt, Col)) Then
      If Cells(cnt, Col) =  Then Rows(cnt).Delete
     End If
    End If
  Next cnt
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
End Sub


Attribute VB_Name = "Module8"
Sub COPY_MERGE_OF_CELL_STRINGS_FORMULA_TO_A_DYNAMIC_RANGE()

'Macro will create the CONCATENATE formula shown in the first line, then copy that formula to a downward dynamic range

Range("$C$2").Formula = Range("D2") & (",") & Range("E2")
Dim LastRow As Long

Application.ScreenUpdating = False

LastRow = Range("C" & Rows.Count).End(xlUp).Row
Range("C3").FormulaR1C1 = Range("D3") & (",") & Range("E3")
Range("C3:C" & LastRow).Formula = "=D3&"",""&E3"
Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "Module9"
Sub Format_Ascend_Excel()
Attribute Format_Ascend_Excel.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Format_Ascend_Excel Macro
'

'
    Columns("G:H").Select
    Selection.Delete Shift:=xlToLeft
    Columns("H:H").Select
    Selection.Delete Shift:=xlToLeft
    Columns("I:J").Select
    Selection.Delete Shift:=xlToLeft
    Columns("J:K").Select
    Selection.Delete Shift:=xlToLeft
    Range("D3").Select
    ActiveWindow.SmallScroll Down:=3
    Range("J10").Select
    ActiveWindow.SmallScroll Down:=-9
    Columns("J:J").Select
    Selection.Delete Shift:=xlToLeft
    Range("J1").Select
    Selection.Delete Shift:=xlToLeft
    Range("E3").Select
    Columns("A:A").ColumnWidth = 5.27
    Columns("B:B").ColumnWidth = 6.45
    Columns("C:C").ColumnWidth = 14
    Columns("C:C").ColumnWidth = 17.27
    Columns("C:C").ColumnWidth = 20.18
    Columns("C:C").ColumnWidth = 22.45
    Range("C1").Select
    Columns("C:C").ColumnWidth = 23.45
    Columns("D:D").ColumnWidth = 6.18
    Columns("E:E").ColumnWidth = 6.09
    Columns("F:F").ColumnWidth = 6.09
    Columns("G:G").ColumnWidth = 25.55
    Columns("G:G").ColumnWidth = 31.27
    Columns("G:G").ColumnWidth = 37
    Columns("G:G").ColumnWidth = 35.45
    Columns("H:H").ColumnWidth = 6.27
    Columns("I:I").ColumnWidth = 12.18
    Columns("I:I").ColumnWidth = 13.27
    Columns("J:J").ColumnWidth = 10.82
    Columns("L:L").ColumnWidth = 11.09
    Columns("L:L").ColumnWidth = 12.18
    ActiveWindow.SmallScroll Down:=9
    Columns("K:K").ColumnWidth = 12.45
    ActiveWindow.SmallScroll Down:=18
    Columns("M:M").ColumnWidth = 11.18
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
