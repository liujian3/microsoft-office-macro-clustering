Attribute VB_Name = "ExcelEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents xlApp As Application
Attribute xlApp.VB_VarHelpID = -1
Public calcPending As Boolean
Public calcMode As Integer




Private Sub xlApp_AfterCalculate()
  
'  If Not Risk.Internal.EventsDisabled And Not Risk.InterfaceMode = RiskBrowsingResults And projectCalcMode <= 1 Then setCalcFlag 0 'checkIfProjectValuesChanged

End Sub

Private Sub xlApp_SheetCalculate(ByVal Sh As Object)
  
  On Error GoTo EndEvent
  
  If RSK4_GetSamplingType(Risk.Internal.RskLibHVars) = 19 Then
   ' iteration step
   checkIfProjectValuesChanged Nothing
  End If
'  If Application.Version < 12 Then
'    If Not Risk.Internal.EventsDisabled And Not Risk.InterfaceMode = RiskBrowsingResults And projectCalcMode <= 1 Then setCalcFlag 0
'  End If

EndEvent:
 
End Sub

Private Sub xlApp_SheetChange(ByVal Sh As Object, ByVal Target As Range)
  
 ' Debug.Print RSK4_GetSamplingType(Risk.Internal.RskLibHVars)
 On Error GoTo EndEvent
  
 If Not Risk.Internal.EventsDisabled And Not Risk.InterfaceMode = RiskBrowsingResults Then  'And projectCalcMode = 1 removed 9/29/11
   If Not checkForInvalidFieldForFunction(Target) Then
     checkForTrackingRangeChange Target
     checkIfProjectValuesChanged Target
   End If
   'Application.OnTime Now() + TimeValue("00:00:0001"), "checkIfProjectValuesChanged"
   'setCalcFlag
 End If

EndEvent:
 
End Sub
Sub setCalcFlag()
 
'  If Not calcPending Then
'     Application.OnTime Now() + TimeValue("00:00:002"), "checkIfProjectValuesChanged"
'  '   checkIfProjectValuesChanged
'     calcPending = True
'   End If
   
End Sub

Private Sub xlApp_WorkbookBeforeSave(ByVal Wb As Workbook, ByVal SaveAsUI As Boolean, Cancel As Boolean)
  
  On Error GoTo EndEvent
 
  If Not Wb.IsAddin Then setWorkbookSavedFlag

EndEvent:

End Sub

Private Sub xlApp_WorkbookOpen(ByVal Wb As Workbook)
 ' checkOpenedWorkbookForMPPLinks Wb
End Sub



Attribute VB_Name = "Module1"
Dim RPJExcel As Object
Dim ExcelEventHandler As New ExcelEvents

#If Win64 Then
  Declare PtrSafe Sub RiskProjectSetAfterIterMacroName Lib "DTOOLS7_X64.XLL" (ByVal macroName$)
  Public Declare PtrSafe Function RSK4_GetSamplingType& Lib "RSKLIB7_X64.DLL" (ByVal hVars&)
#Else
  Declare Sub RiskProjectSetAfterIterMacroName Lib "DTOOLS7_X86.XLL" (ByVal macroName$)
  Public Declare Function RSK4_GetSamplingType& Lib "RSKLIB7_X86.DLL" (ByVal hVars&)
#End If

Global projectCalcMode As Integer

'Erik 4/18/2018: This code was not respecting the in-process mode of @RISK for 32-bit.
'To correct this, I added a public function (RiskOOPs) to get the OOPs from @RISK if there is one.
Sub Auto_Open()
   On Error GoTo exitPoint
     
   If Not (RiskOOps Is Nothing) Then
      Set RPJExcel = RiskOOps.CreateCOMObject("RPJExcel7.Server")
   Else
      Set RPJExcel = CreateObject("RPJExcel7.Server", "")
   End If
 
   RPJExcel.Initialize Risk
   Application.OnKey "{F9}", "RecalcProjectNow"

exitPoint:
   'If an intialization error occurred, display the error to the user and then close down the add-in.
   If Err.Number <> 0 Then MsgBox Err.Description: Auto_Close
End Sub

'Sub Auto_Open()
'  Dim m_OOPS As Object
'  Dim runOutOfProcess As Boolean
'
'  On Error GoTo exitPoint ' added 7.5
'
'  #If Win64 Then
'    runOutOfProcess = True
'  #End If
'
'  If getExcelVersion >= 15 Then runOutOfProcess = True
'
'  If runOutOfProcess Then
'      Set m_OOPS = CreateObject("RiskOutOfProcessServer7.ObjectCreator")
'      Set RPJExcel = m_OOPS.CreateCOMObject("RPJExcel7.Server")
'  Else
'      Set RPJExcel = CreateObject("RPJExcel7.Server", "")
'  End If
'
'  RPJExcel.Initialize Risk
'
'  Application.OnKey "{F9}", "RecalcProjectNow"
'
'exitPoint:
'   'If an intialization error occurred, display the error to the user and then close down the add-in.
'   If Err.Number <> 0 Then
'      MsgBox Err.Description
'      Auto_Close
'   End If
'
'End Sub


Sub RecalcProjectNow()
  
  On Error Resume Next ' added 7.5
  
  Application.Calculate
  If Risk.Simulation.Settings.StdRecalcBehavior = RiskRandomValues Then
    RPJExcel.startManualRecalc
    checkIfProjectValuesChanged ActiveCell
  End If
  
End Sub
Sub Auto_Close()
  
  On Error Resume Next
  'RPJExcel.shutDown
  Set ExcelEventHandler.xlApp = Nothing
  Set RPJExcel = Nothing
  
End Sub
Sub StartSim()
  
  On Error Resume Next ' added 7.5
  
  RPJExcel.StartSim
  
End Sub
Sub BeforeIter()
  
  On Error Resume Next ' added 7.5
  
  RPJExcel.BeforeIter
  
End Sub

Sub SimulationRecalc(recalcMode%)
  
  Select Case recalcMode%
     Case 0: RPJExcel.EachIter
     Case 1: RPJExcel.AfterIter
     Case 2: RPJExcel.runIterationsInMSProject
  End Select
  
End Sub
Sub EachIter()
  
  On Error Resume Next ' added 7.5
  
  RPJExcel.EachIter
  
End Sub

Sub EndSim()
  
  On Error Resume Next ' added 7.5
  
  RPJExcel.EndSim
  
End Sub
Sub runIterationsInMSProject()
  
  On Error Resume Next ' added 7.5
  
  RPJExcel.runIterationsInMSProject
  
End Sub
Sub DisableEvents()

   Set ExcelEventHandler.xlApp = Nothing
   
End Sub
Sub EnableEvents()

   Set ExcelEventHandler.xlApp = Application
   
End Sub
Sub checkIfProjectValuesChanged(theRange As Range)
   
   On Error Resume Next ' added 7.5
 ' If ExcelEventHandler.calcMode = 0 Or (projectCalcMode = 1 And ExcelEventHandler.calcMode = 1) Then
    If Not Risk.Internal.EventsDisabled Then
      RPJExcel.checkForProjectChange theRange
    End If
  'End If
  
  ExcelEventHandler.calcPending = False
  ExcelEventHandler.calcMode = 0
  
End Sub
Sub checkOpenedWorkbookForMPPLinks(ByVal Wb As Workbook)
  
  On Error Resume Next ' added 7.5
  RPJExcel.checkOpenedWorkbookForMPPLinks Wb
  
End Sub
Sub completeRPJInitialization()
  
  On Error Resume Next
  RPJExcel.completeInitialization
  
End Sub
Function setupDLLs(projObj As Object) As Boolean
  
  On Error Resume Next
  
  setupDLLs = True
    
  projObj.Run "setupDLLs", RPJExcel
  
  If Err > 0 Then setupDLLs = False
    
  Risk.Internal.ModelServer.initializeRPJ RPJExcel
  
  RiskProjectSetAfterIterMacroName "RPJExcel.xla!SimulationRecalc"
  
  If Err > 0 Then setupDLLs = False
  
End Function
Sub setProjectCalcMode(theMode As Integer)

  projectCalcMode = theMode
  
End Sub
Function checkForInvalidFieldForFunction(theRange As Range) As Boolean

  checkForInvalidFieldForFunction = RPJExcel.checkForInvalidFieldForFunction(theRange)
  
End Function
Sub checkForTrackingRangeChange(theRange As Range)
  
  RPJExcel.checkForTrackingFieldChanges theRange
  
End Sub
Sub setWorkbookSavedFlag()
  
  RPJExcel.setWorkbookSavedFlag
  
End Sub
Function getExcelVersion() As Long

    Dim temp$, i As Long
    
    For i = 1 To Len(Application.Version)
      If IsNumeric(Mid$(Application.Version, i, 1)) Then temp$ = temp$ + Mid$(Application.Version, i, 1) Else Exit For
    Next
    
    getExcelVersion = CLng(temp$)

End Function
'Public Sub RPJRibbonEvent_ExecuteCommand(ByVal p_CommandID As String)
'
'    Select Case p_CommandID
'
'        Case "RiskCommand_OpenMPP": RPJExcel.ImportMPP
'        Case "RiskCommand_ReadActiveProject": RPJExcel.ReadActiveProject
'        Case "RiskCommand_CreateNewProject": RPJExcel.CreateNewProject
'        Case "RiskCommand_InsertProjectField": RPJExcel.InsertProjectField
'        Case "RiskCommand_SyncProjectSettings": RPJExcel.SyncProjectSettings
'        Case "RiskCommand_SyncProjectNow": RPJExcel.SyncProjectNow
'
'        Case "RiskCommand_RiskCategories": RPJExcel.DisplayRiskCategoriesDialog
'        Case "RiskCommand_ProbabilisticBranching": RPJExcel.ProbabilisticBranchDialog
'        Case "RiskCommand_ProbabilisticCalendar": RPJExcel.ProbabilisticCalendarDialog
'        Case "RiskCommand_ParameterEntryTable": RPJExcel.DisplayParameterEntryTableDialog
'
'        Case "RiskCommand_ProjectSettings": RPJExcel.DisplayProjectSettings
'
'        Case "RiskCommand_StandardGantt": RPJExcel.DisplayStandardGanttSettings
'        Case "RiskCommand_ProbabilisticGantt": RPJExcel.DisplayProbabilisticGanttSettings
'        Case "RiskCommand_TimescaledData": RPJExcel.DisplayTimeScaledDataSettings
'        Case "RiskCommand_CheckProjectConsistency": RPJExcel.CheckProjectConsistency
'        Case "RiskCommand_ShowMicrosoftProject": RPJExcel.ShowMicrosoftProject
'        Case "RiskCommand_DisplayDocumentation": RPJExcel.DisplayDocumentation
'
'        Case "RiskCommand_Register_New": RPJExcel.RiskRegisterCreateNew
'        Case "RiskCommand_Register_Options": RPJExcel.RiskRegisterShowOptions
'        Case "RiskCommand_Register_ViewQuantitative": RPJExcel.RiskRegisterViewQuantitative
'        Case "RiskCommand_Register_ViewQualitative": RPJExcel.RiskRegisterViewQualitative
'        Case "RiskCommand_Register_ViewCustom": RPJExcel.RiskRegisterViewCustom
'        Case "RiskCommand_Register_RiskAdd": RPJExcel.RiskRegisterAddRisk
'        Case "RiskCommand_Register_RiskAddLinked": RPJExcel.RiskRegisterAddLinkedRisk
'        Case "RiskCommand_Register_RiskCopy": RPJExcel.RiskRegisterCopyRisk
'        Case "RiskCommand_Register_RiskDelete": RPJExcel.RiskRegisterDeleteRisk
'        Case "RiskCommand_Register_StrategyAdd": RPJExcel.RiskRegisterAddStrategy
'        Case "RiskCommand_Register_StrategyDelete": RPJExcel.RiskRegisterDeleteStrategy
'        Case "RiskCommand_Register_ModelImpactAdd": RPJExcel.RiskRegisterAddModelImpact
'        Case "RiskCommand_Register_ModelImpactDelete": RPJExcel.RiskRegisterDeleteModelImpact
'        Case "RiskCommand_Register_ModelImpactCheck": RPJExcel.RiskRegisterCheckModelImpacts
'        Case "RiskCommand_Register_OptimalStrategy": RPJExcel.RiskRegisterFindOptimalStrategy
'        Case "RiskCommand_Register_UpdateStatus": RPJExcel.RiskRegisterUpdateStatus
'
'    End Select
'
'End Sub
'Public Function RiskProjectFieldVal(Optional TaskFieldName As String) As Double
'
'  Dim theCell As Range
'  Application.Volatile
'
'  If TaskFieldName = "" Then
'    Set theCell = Application.Caller
'  End If
'
'  RiskProjectFieldVal = RPJExcel.GetProjectFieldValue(theCell)
'
''End Function
'Public Function RiskProjectTimeScaledData(TaskOrResource As Range, DataType As String, StartDate As String, EndDate As String, TimeScaleUnit As String, UnitPosition As Long) As Double
'
'  Application.Volatile
'  RiskProjectTimeScaledData = RPJExcel.GetProjectTimeScaledData(TaskOrResource, DataType, StartDate, EndDate, TimeScaleUnit, UnitPosition, Application.Caller)
'
'End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' Z+"{
' F+$>
' F+$:
' Fj{mI
' F+$E
' F+$E
' F+$E
' F+$E
' F+$E
' F+$E
' F+$E
' F+$E
' "jZr
' F+$E
' F+$E

INQUEST-PP=macro
