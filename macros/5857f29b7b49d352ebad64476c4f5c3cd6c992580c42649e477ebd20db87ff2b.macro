Attribute VB_Name = "FWF"
'---------------------------------------------------------------------------------------
' Module        : mod_CommonFunctions
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 26.07.2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Excel, Word, CorelDRAW. |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------

Const FWF_VERSION = 2

#If Win64 Then
    #If VBA7 Then    ' Windows x64, Office 2010
        Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                (ByVal pCaller As LongLong, ByVal szURL As String, ByVal szFileName As String, _
                 ByVal dwReserved As LongLong, ByVal lpfnCB As LongLong) As LongLong
    #Else    ' Windows x64,Office 2003-2007
        Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                                           (ByVal pCaller As LongLong, ByVal szURL As String, ByVal szFileName As String, _
                                            ByVal dwReserved As LongLong, ByVal lpfnCB As LongLong) As LongLong
    #End If
#Else
    #If VBA7 Then    ' Windows x86, Office 2010
        Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, _
                 ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
    #Else    ' Windows x86, Office 2003-2007
        Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                                           (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, _
                                            ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
    #End If
#End If

Function DownLoadFileFromURL(ByVal URL$, ByVal LocalPath$) As Boolean
    On Error Resume Next: Kill LocalPath$

    shortFilename$ = Mid(LocalPath$, InStrRev(LocalPath$, "\") + 1)
    If shortFilename$ <> Replace_symbols(shortFilename$) Then
        Debug.Print "Wrong symbols in filename: " & shortFilename$
        Exit Function
    End If

    Randomize ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    URL$ = URL$ & "?HID=" & HID & "&rnd=" & Left(Rnd(Now) * 1E+15, 10)

    DownLoadFileFromURL = URLDownloadToFile(0, URL$, LocalPath$, 0, 0) = 0
End Function

Function GetURLstatus(ByVal URL$, Optional ByVal timeout& = 2) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL$ (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd| 0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' (200 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 404 - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, 403 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd|.|fffd|.)
    On Error Resume Next: URL$ = Replace(URL$, "\", "/")
    Dim xmlhttp As New WinHttpRequest
    xmlhttp.Open "GET", URL, True
    xmlhttp.setRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"
    xmlhttp.send
    If xmlhttp.WaitForResponse(timeout) Then
        GetURLstatus = Val(xmlhttp.Status)
    Else
        GetURLstatus = 408 ' Request Timeout (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    End If
End Function

Function Extension(ByVal Filename$) As String
    On Error Resume Next
    Extension = Split(Filename$, ".")(UBound(Split(Filename$, ".")))
End Function


Function GetFolderPath(Optional ByVal Title As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", _
                       Optional ByVal InitialPath As String = "c:\") As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Title,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| InitialPath
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Dim PS As String: PS = Application.PathSeparator
    With Application.FileDialog(msoFileDialogFolderPicker)
        If Not Right$(InitialPath, 1) = PS Then InitialPath = InitialPath & PS
        .ButtonName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|": .Title = Title: .InitialFileName = InitialPath
        If .Show <> -1 Then Exit Function
        GetFolderPath = .SelectedItems(1)
        If Not Right$(GetFolderPath, 1) = PS Then GetFolderPath = GetFolderPath & PS
    End With
End Function

Function GetFilePath(Optional ByVal Title As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                     Optional ByVal InitialPath As String = "c:\", _
                     Optional ByVal FilterDescription As String = "|fffd||fffd||fffd||fffd||fffd| Excel", _
                     Optional ByVal FilterExtension As String = "*.xls*") As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Title,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| InitialPath
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    With Application.FileDialog(msoFileDialogOpen)
        .ButtonName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|": .Title = Title: .InitialFileName = InitialPath
        .Filters.Clear: .Filters.Add FilterDescription, FilterExtension
        If .Show <> -1 Then Exit Function
        GetFilePath = .SelectedItems(1): PS = Application.PathSeparator
    End With
End Function

Function FilenamesCollection(ByVal FolderPath As String, Optional ByVal Mask As String = "", _
                             Optional ByVal SearchDeep As Long = 999) As Collection
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath,
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Mask (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SearchDeep |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| SearchDeep=1, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|).
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GetAllFileNamesUsingFSO)

    Set FilenamesCollection = New Collection    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set FSO = CreateObject("Scripting.FileSystemObject")    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FileSystemObject
    GetAllFileNamesUsingFSO FolderPath, Mask, FSO, FilenamesCollection, SearchDeep    ' |fffd||fffd||fffd||fffd||fffd|
    Set FSO = Nothing: Application.StatusBar = False    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
End Function

Function GetAllFileNamesUsingFSO(ByVal FolderPath As String, ByVal Mask As String, ByRef FSO, _
                                 ByRef FileNamesColl As Collection, ByVal SearchDeep As Long)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| FSO
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| SearchDeep > 1
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FileNamesColl
    On Error Resume Next: Set curfold = FSO.GetFolder(FolderPath)
    If Not curfold Is Nothing Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
        ' Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|: " & FolderPath

        For Each fil In curfold.files    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath
            If fil.Name Like "*" & Mask Then FileNamesColl.Add fil.Path
        Next
        SearchDeep = SearchDeep - 1    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If SearchDeep Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            For Each sfol In curfold.SubFolders    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath
                GetAllFileNamesUsingFSO sfol.Path, Mask, FSO, FileNamesColl, SearchDeep
            Next
        End If
        Set fil = Nothing: Set curfold = Nothing    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
End Function

Function ReadTXTfile(ByVal Filename As String) As String
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile(Filename, 1, True): ReadTXTfile = ts.ReadAll: ts.Close
    Set ts = Nothing: Set FSO = Nothing
End Function

Function SaveTXTfile(ByVal Filename As String, ByVal txt As String) As Boolean
    On Error Resume Next: Err.Clear
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.CreateTextFile(Filename, True)
    ts.Write txt: ts.Close
    SaveTXTfile = Err = 0
    Set ts = Nothing: Set FSO = Nothing
End Function

Function AddIntoTXTfile(ByVal Filename As String, ByVal txt As String) As Boolean
    On Error Resume Next: Err.Clear
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile(Filename, 8, True): ts.Write txt: ts.Close
    Set ts = Nothing: Set FSO = Nothing
    AddIntoTXTfile = Err = 0
End Function

Function SubFoldersCollection(ByVal FolderPath$, Optional ByVal Mask$ = "*") As Collection
    Set SubFoldersCollection = New Collection    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set FSO = CreateObject("Scripting.FileSystemObject")    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FileSystemObject
    If Right(FolderPath$, 1) <> "\" Then FolderPath$ = FolderPath$ & "\"
    On Error Resume Next: Set curfold = FSO.GetFolder(FolderPath$)
    For Each folder In curfold.SubFolders    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath
        If folder.Path Like FolderPath$ & Mask$ Then SubFoldersCollection.Add folder.Path & "\"
    Next folder
    Set FSO = Nothing
End Function

Function GetFilenamesCollection(Optional ByVal Title As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                Optional ByVal InitialPath As String = "c:\") As FileDialogSelectedItems
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Title,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| InitialPath
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    With Application.FileDialog(3)    ' msoFileDialogFilePicker
        .ButtonName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|": .Title = Title: .InitialFileName = InitialPath
        If .Show <> -1 Then Exit Function
        Set GetFilenamesCollection = .SelectedItems
    End With
End Function

Function Replace_symbols(ByVal txt As String) As String
    st$ = "/\:?*|""<>"    ' |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ~!@#$%^=`
    For i% = 1 To Len(st$)
        txt = Replace(txt, Mid(st$, i, 1), "_")
    Next
    Replace_symbols = txt
End Function

Function Replace_symbols2(ByVal txt As String) As String
    st$ = "/:?*|""<>"    ' |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ~!@#$%^=`
    For i% = 1 To Len(st$)
        txt = Replace(txt, Mid(st$, i, 1), "_")
    Next
    Replace_symbols2 = txt
End Function

Sub OpenFolder(ByVal FolderPath$)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Windows
    On Error Resume Next
    'CreateObject("wscript.shell").Run "explorer.exe /e,/root, """ & FolderPath$ & """"
    CreateObject("wscript.shell").Run "explorer.exe /e, """ & FolderPath$ & """"
End Sub

Sub ShowFile(ByVal FilePath$)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| FilePath$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Windows
    On Error Resume Next
    CreateObject("wscript.shell").Run "explorer.exe /e,/select,""" & FilePath$ & """"
End Sub

Sub ShowText(ByVal txt As String, Optional ByVal Index As Long)
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| txt |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    ' (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| text####.txt,
    ' |fffd||fffd||fffd| #### - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| index, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 10-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

    On Error Resume Next: Err.Clear
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Filename$ = Environ("TEMP") & "\text" & IIf(Index, Index, Left(Rnd() * 1E+15, 10)) & ".txt"
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
    With CreateObject("scripting.filesystemobject").CreateTextFile(Filename, True)
        .Write txt: .Close
    End With
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    CreateObject("wscript.shell").Run """" & Filename$ & """"
End Sub

Function ChangeFileCharset(ByVal Filename$, ByVal DestCharset$, _
                           Optional ByVal SourceCharset$) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| filename$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DestCharset$ (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    With CreateObject("ADODB.Stream")
        .Type = 2
        If Len(SourceCharset$) Then .Charset = SourceCharset$    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .Open
        .LoadFromFile Filename$    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        FileContent$ = .ReadText   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FileContent$
        .Close
        .Charset = DestCharset$    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .Open
        .WriteText FileContent$
        .SaveToFile Filename$, 2   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .Close
    End With
    ChangeFileCharset = Err = 0
End Function

Function temp_folder$()
    On Error Resume Next
    temp_folder$ = Environ("TEMP") & "\ExcelTemporaryFiles\"
    If Dir(temp_folder$, vbDirectory) = "" Then MkDir temp_folder$
End Function

Function temp_filename$()
    On Error Resume Next: Dim iter&
get_rnd:     iter& = iter& + 1: txt$ = Left(Rnd(Now) * 1E+15, 10)
    temp_filename$ = temp_folder$ & "temp_file_" & Format(Now, "YYYY-MM-DD--HH-NN-SS") & "__" & txt$
    If Dir(temp_filename$, vbNormal) <> "" Then If iter& < 5 Then GoTo get_rnd
End Function




Attribute VB_Name = "F_About"
Attribute VB_Base = "0{E21BB5BC-770E-46D6-B45E-48BB67C14121}{D5CE0A1A-1419-4707-A794-CF29EF6B72A9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'---------------------------------------------------------------------------------------
' Form      : F_About
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 03.12.2011
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Excel, Word, CorelDRAW. |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------
Option Compare Text
Const FORM_VERSION = 5

Private Sub UserForm_Initialize()
    On Error Resume Next
    If Developer Then
        Me.Label_VERSION.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & FORM_VERSION & ", |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & MODULE_VERSION
    End If
    Me.MultiPage1.Value = 0: MultiPage1_Change
    For Each Item In Array("", "Alfa", "Beta", "RC", "RC2", "RC3", "RC4", "RC5", "RC6"): Me.ComboBox_CurrentVersionType.AddItem Item: Next
    FillVersions
    Me.Label_RegHyperlink.ControlTipText = Split(REG_HYPERLINK$, "&")(0) ' Replace(REG_HYPERLINK$, "&", "&&")
    Me.Label_EULA.ControlTipText = Split(EULA_HYPERLINK$, "?")(0)
    Me.Label_HowMuch.ControlTipText = Split(REG_HYPERLINK$, "&")(0)  'Replace(REG_HYPERLINK$, "&", "&&")
    Me.Label_ProgramFullname = PROJECT_FULLNAME$
    If FullLicense Then Me.MultiPage1.Pages("Page_RegInfo").Visible = Developer
    Me.MultiPage1.Pages("Page_CreateUpdate").Visible = Developer
    Me.CommandButton_ClearAllSettings.Visible = Developer

    Me.CommandButton_ShowGreeting.Visible = IsObject(F_Greeting)

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    picpath$ = GetFile_MainPicture
    If picpath$ <> "" Then Set Me.Image_Main.Picture = LoadPicture(picpath$)
End Sub

Private Sub CheckBox_Autorun_Click()
    AddinAutoRun Not (Me.CheckBox_Autorun.Value)
End Sub

Private Sub CheckBox_InstallUpdatesAutomatically_Click()
    WSP 5, CLng(Me.CheckBox_InstallUpdatesAutomatically.Value)
    Me.OptionButton_AutoUpdate_AnyVersion.Enabled = Me.CheckBox_InstallUpdatesAutomatically
    Me.OptionButton_AutoUpdate_StableOnly.Enabled = Me.CheckBox_InstallUpdatesAutomatically
End Sub

Private Sub CommandButton_ActivateProgram_Click()
    Dim msg$, res As Boolean
    Code$ = Trim(Me.TextBox_ActivationCode)
    If Code$ Like "*@*.*" Then
        res = GSNUE_(Code$, msg$)
    Else
        res = ValidateAC(Code$, msg$)
    End If
    If Len(msg) Then MsgBox msg, IIf(res, vbInformation, vbExclamation), _
       IIf(res, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!")
    Me.MultiPage1.Value = 0
End Sub

Private Sub CommandButton_ClearAllSettings_Click()
    On Error Resume Next: RegistryInfo "": SP_FILE ""
    file$ = SP_FILE("filename"): SetAttr file$, vbNormal: Kill file$
    RE_$ " ": AC_$ "---"
    DoEvents
    Me.MultiPage1.Value = 0
    ND "clear all settings", CountersCurrentValues
End Sub
Private Sub CommandButton_CreateBackup_Click()
    backupPath$ = BackupThisFile
    RefreshBackupsList
    Me.Repaint: DoEvents
End Sub
Private Sub CommandButton_InstallIntoAddinsFolder_Click()
    SaveAddinToPermanentPath True
    Me.CommandButton_InstallIntoAddinsFolder.Visible = False
End Sub
Private Sub CommandButton_RestoreLastBackup_Click()
    RestoreLastBackup
    RefreshBackupsList
    Me.Repaint: DoEvents
End Sub

Private Sub CommandButton_ShowGreeting_Click()
    On Error Resume Next
    If IsObject(F_Greeting) Then
        Me.Hide
        ND "run test", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|'" & vbLf & CountersCurrentValues
        F_Greeting.Show
    End If
End Sub

Private Sub CommandButton_Uninstall_Click()
    UninstallThisFile
End Sub

Private Sub Label_DEMO_Click()
    On Error Resume Next
    Me.TextBox_ActivationCode = DEMO_ACTIVATION_CODE$
    Me.CommandButton_ActivateProgram.SetFocus
End Sub

Private Sub Label_EULA_Click()
    On Error Resume Next: CreateObject("wscript.Shell").Run EULA_HYPERLINK$
    ND "form About", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EULA - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
End Sub

Private Sub Label_EULA_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    Me.Label_EULA.ForeColor = 49152: Me.Label_ProgramWebPage.ForeColor = 16711680
End Sub

Private Sub OptionButton_AutoUpdate_AnyVersion_Click(): WSP 6, 0: End Sub
Private Sub OptionButton_AutoUpdate_StableOnly_Click(): WSP 6, -1: End Sub
Private Sub TextBox_HC1_Change(): Me.CommandButton_ChangeCurrentVersion.Enabled = True: End Sub
Private Sub TextBox_HC2_Change(): Me.CommandButton_ChangeCurrentVersion.Enabled = True: End Sub

Private Sub CommandButton_ChangePROJECT_NAME_Click()
    SHV "PROJECT_NAME", Trim(Me.TextBox_PROJECT_NAME)
    Me.Label_RegHyperlink.ControlTipText = Replace(REG_HYPERLINK$, "&", "&&")
    ThisWorkbook.Save
End Sub
Private Sub CommandButton_ClearUpdatesList_Click()
    msg = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " |fffd| |fffd||fffd||fffd||fffd||fffd| info.xml" & vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
    If MsgBox(msg, vbQuestion + vbOKCancel + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then Exit Sub
    CreateUpdateXMLfile
    UploadNewVersion ""
End Sub
Private Sub CommandButton_CreateUpdate_Click()
    If Me.CommandButton_ChangeCurrentVersion.Enabled Then
        SetVersion Me.ScrollBar_CurrentVersionNumber
        Me.CommandButton_ChangeCurrentVersion.Enabled = False
        SHV "h_c1", Val(Me.TextBox_HC1): SHV "h_c2", Val(Me.TextBox_HC2)
    End If
    ThisWorkbook.Save
    VersionNumber& = GetVersion
    VersionName$ = GetVersionTXT(VersionNumber&)
    Description$ = Trim(Me.TextBox_NewVersionChanges)
    UploadNewUpdate VersionName$, VersionNumber&, Description$, Me.CheckBox_PublishComment
End Sub
Private Sub CommandButton_InstallUpdate_Click()
    Link$ = Me.ListBox_AvailableUpdates.List(Me.ListBox_AvailableUpdates.ListIndex, 5)
    If Link$ Like UPDATE_FOLDER$ & "*" Then InstallUpdate Link$
End Sub

Private Sub Label_DownloadSelectedUpdate_Click()
    On Error Resume Next
    CreateObject("wscript.Shell").Run Me.Label_DownloadSelectedUpdate.Tag
End Sub
Private Sub Label_ProgramFullname_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Shift = 7 And Button = 1 Then
        res = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & _
                       "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|)", _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Me.Label_ProgramFullname.Caption)
        If res = "" Then Exit Sub
        Me.Label_ProgramFullname.Caption = res
        Me.Repaint: DoEvents
        ThisWorkbook.BuiltinDocumentProperties("Title") = res
        ThisWorkbook.Save
    End If
End Sub
Private Sub Label_RegHyperlink_Click()
    On Error Resume Next: hl$ = REG_HYPERLINK$
    If Len(hl$) Then CreateObject("wscript.Shell").Run hl$
    ND "form About", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2"
End Sub
Private Sub ListBox_AvailableUpdates_Change()
    On Error Resume Next
    descr$ = Me.ListBox_AvailableUpdates.List(Me.ListBox_AvailableUpdates.ListIndex, 4)
    Me.TextBox_SelectedUpdateInfo = IIf(Len(descr$), descr$, "<|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>")

    Link$ = Me.ListBox_AvailableUpdates.List(Me.ListBox_AvailableUpdates.ListIndex, 5)
    ver$ = Me.ListBox_AvailableUpdates.List(Me.ListBox_AvailableUpdates.ListIndex, 2)
    verNumber& = Val(Me.ListBox_AvailableUpdates.List(Me.ListBox_AvailableUpdates.ListIndex, 3))

    Me.Label_DownloadSelectedUpdate.Tag = Link$
    Me.Label_DownloadSelectedUpdate.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & ver$
    Me.Label_DownloadSelectedUpdate.ControlTipText = Link$

    Me.CommandButton_InstallUpdate.Visible = True
    If verNumber& Mod 10 = 0 Then verNumber& = verNumber& + 9
    Select Case verNumber&
        Case Is > GetVersion
            Me.CommandButton_InstallUpdate.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & GetVersionTXT(verNumber&)
            Me.CommandButton_InstallUpdate.BackColor = vbGreen
        Case GetVersion
            Me.CommandButton_InstallUpdate.Visible = False
        Case Is < GetVersion
            Me.CommandButton_InstallUpdate.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & GetVersionTXT(verNumber&)
            Me.CommandButton_InstallUpdate.BackColor = vbRed
    End Select
End Sub
Private Sub TextBox_ActivationCode_Change()
    Me.CommandButton_ActivateProgram.Enabled = Len(Trim(Me.TextBox_ActivationCode)) > 0
End Sub
Private Sub TextBox_PROJECT_NAME_Change()
    If Me.TextBox_PROJECT_NAME <> PROJECT_NAME Then Me.TextBox_PROJECT_NAME.BackColor = vbWhite
    Me.CommandButton_ChangePROJECT_NAME.Enabled = (Me.TextBox_PROJECT_NAME <> PROJECT_NAME) And Len(Trim(Me.TextBox_PROJECT_NAME)) > 0
End Sub
Sub MultiPage1_Change()
    On Error Resume Next
    Me.Caption = Me.MultiPage1.Pages(Me.MultiPage1.Value).Tag
    Select Case Me.MultiPage1.Pages(Me.MultiPage1.Value).Name
        Case "Page_About"
            info$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & GetVersionTXT(GetVersion) & "   |fffd||fffd| " & _
                    ThisWorkbook.BuiltinDocumentProperties("Creation Date")
            Me.Label_VersionNumberAndDate.Caption = info$
            Dim response$, res As Boolean: res = CAC_(response$)
            Me.Label_LicenceInformation = response$
            Me.Label_LicenceInformation.ForeColor = IIf(res, RGB(0, 150, 0), vbRed)
            Me.Label_ProgramWebPage.ControlTipText = Split(PROGRAM_HYPERLINK$, "?")(0)
        Case "Page_RegInfo"
            Me.TextBox_ProgramCodeName = PROJECT_NAME$
            Me.TextBox_HID = HID$
        Case "Page_Updates"
            FillAvailableUpdatesList
            Me.ListBox_AvailableUpdates.SetFocus
            If CBool(Val(RSP(6))) Then Me.OptionButton_AutoUpdate_StableOnly = True Else Me.OptionButton_AutoUpdate_AnyVersion = True
            Me.CheckBox_InstallUpdatesAutomatically.Value = CBool(Val(RSP(5)))
            Me.OptionButton_AutoUpdate_AnyVersion.Enabled = Me.CheckBox_InstallUpdatesAutomatically
            Me.OptionButton_AutoUpdate_StableOnly.Enabled = Me.CheckBox_InstallUpdatesAutomatically
        Case "Page_History"
            Me.TextBox_History = VersionsHistory
            Me.TextBox_History.SetFocus
        Case "Page_CreateUpdate"
            Me.TextBox_PROJECT_NAME = PROJECT_NAME$
            FillVersions
        Case "Page_Options"
            RefreshBackupsList
            Me.CheckBox_Autorun.Value = AutorunStatus
            Me.CommandButton_InstallIntoAddinsFolder.Visible = Not (ThisWorkbook.FullName Like Application.UserLibraryPath & "*")
    End Select
End Sub
Private Sub CommandButton_Close_Click(): Unload Me: End Sub
Sub RefreshBackupsList()
    On Error Resume Next
    Me.ListBox_Backups.Clear
    ReDim BUarr(0 To 1, 0 To 1)
    PrevBackup$ = GetSetting(PROJECT_NAME$, "Setup", "PrevBackup", "")
    LastBackup$ = GetSetting(PROJECT_NAME$, "Setup", "LastBackup", "")

    tmp_folder$ = Environ("temp")
    BUarr(0, 0) = IIf(Len(LastBackup$), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "")
    BUarr(0, 1) = Replace(LastBackup$, tmp_folder$, "%temp%")  'Dir(LastBackup$)
    BUarr(1, 0) = IIf(Len(PrevBackup$), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "")
    BUarr(1, 1) = Replace(PrevBackup$, tmp_folder$, "%temp%")   'Dir(PrevBackup$)
    Me.ListBox_Backups.List = BUarr
End Sub

Sub FillAvailableUpdatesList()
    On Error Resume Next
    Me.Frame_Updates.Visible = False: Me.CommandButton_InstallUpdate.Visible = False
    Me.Label_CheckUpdatesStatus.Caption = " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    Dim UpdatesList
    Me.Label_CheckUpdatesStatus.Caption = CheckForAvailableUpdates(UpdatesList)
    Me.ListBox_AvailableUpdates.List = UpdatesList

    If Me.ListBox_AvailableUpdates.ListCount > 0 Then
        Me.ListBox_AvailableUpdates.ListIndex = 0
        Me.Frame_Updates.Visible = True
    End If
End Sub
Private Sub Label_WhiteField_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    Me.Label_HyperlinkWebsite.ForeColor = 16711680: Me.Label_ProgramWebPage.ForeColor = 16711680
    Me.Label_EULA.ForeColor = 16711680: Me.Label_HowMuch.ForeColor = 16711680
End Sub
Private Sub Label_HyperlinkWebsite_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    Me.Label_HyperlinkWebsite.ForeColor = 49152  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
End Sub
Private Sub Label_ProgramWebPage_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    Me.Label_ProgramWebPage.ForeColor = 49152  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Me.Label_EULA.ForeColor = 16711680
End Sub
Private Sub Label_HowMuch_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    Me.Label_HowMuch.ForeColor = 49152  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Me.Label_EULA.ForeColor = 16711680
End Sub
Private Sub Label_Copyright_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    Me.Label_HyperlinkWebsite.ForeColor = 16711680
End Sub
Private Sub Label_HyperlinkWebsite_Click()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
    CreateObject("wscript.Shell").Run Me.Label_HyperlinkWebsite.Caption
    ND "form About", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ExcelVBA.ru - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
End Sub
Private Sub Label_HowMuch_Click()
    On Error Resume Next: hl$ = REG_HYPERLINK$
    If Len(hl$) Then CreateObject("wscript.Shell").Run hl$
    ND "form About", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
End Sub
Private Sub Label_ProgramWebPage_Click()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: CreateObject("wscript.Shell").Run PROGRAM_HYPERLINK$
    ND "form About", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
End Sub
Private Sub Label_SendEmail_Click()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: CreateObject("wscript.Shell").Run "mailto:order@ExcelVBA.ru"
    ND "form About", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
End Sub
Sub FillVersions()
    On Error Resume Next: Me.ScrollBar_CurrentVersionNumber = GetVersion
    CurrentVersionType = Me.ScrollBar_CurrentVersionNumber Mod 10: If CurrentVersionType = 9 Then CurrentVersionType = 0
    Me.ComboBox_CurrentVersionType.ListIndex = CurrentVersionType
    If Developer Then Me.TextBox_HC1 = Val(GHV("h_c1")): Me.TextBox_HC2 = Val(GHV("h_c2"))

    Me.TextBox_PROJECT_NAME = PROJECT_NAME
    Me.CommandButton_ChangeCurrentVersion.Enabled = False
End Sub

Private Sub ComboBox_CurrentVersionType_Change()
    ver& = Me.ScrollBar_CurrentVersionNumber
    ver& = (ver \ 10) * 10 + Me.ComboBox_CurrentVersionType.ListIndex
    Me.ScrollBar_CurrentVersionNumber = ver&
End Sub

Private Sub CommandButton_ChangeCurrentVersion_Click()
    SetVersion Me.ScrollBar_CurrentVersionNumber
    Me.CommandButton_ChangeCurrentVersion.Enabled = False
    SHV "h_c1", Val(Me.TextBox_HC1): SHV "h_c2", Val(Me.TextBox_HC2)
    ThisWorkbook.Save
End Sub

Private Sub ScrollBar_CurrentVersionNumber_Change()
    On Error Resume Next
    ver& = Me.ScrollBar_CurrentVersionNumber
    Me.TextBox1_CurrentVersion = ver& \ 1000 & "." & Right(ver& \ 100, 1) & "." & Right(ver& \ 10, 1)
    Me.CommandButton_ChangeCurrentVersion.Enabled = True
    txt = GetOldVersionDescription(ver&)
    Me.TextBox_NewVersionChanges = txt
End Sub


Attribute VB_Name = "F_Progress"
Attribute VB_Base = "0{1482522B-FAD2-4A6D-8886-C18260F26491}{83CF0278-1FA0-4699-AB35-88572C1688CF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'---------------------------------------------------------------------------------------
' Form      : F_Progress
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 07.10.2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------

Public indicator As ProgressIndicator, ButtonMacro$

Private Sub CommandButton_RunMacro_Click()
    On Error Resume Next
    If Len(ButtonMacro$) Then Run "'" & ThisWorkbook.Name & "'!" & ButtonMacro$
End Sub

Private Sub CommandButton_stop_Click()
    On Error Resume Next
    If StopMacro Then    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If IsObject(F_Greeting) Then
            If F_Greeting.Visible Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                Unload Me
                Exit Sub
            End If
        Else
            End
        End If
    Else    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        If MsgBox(msg, vbQuestion + vbDefaultButton2 + vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbYes Then
            StopMacro = True
        End If
    End If
End Sub

Private Sub SpinButton_log_Change()
    On Error Resume Next
    n = Me.SpinButton_log.Value
    Me.Height = IIf(n = 0, 82, 92 + n * 40)
    Me.TextBox_Log.Height = 40 * n
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If Not indicator Is Nothing Then indicator.QueryClose
End Sub
Attribute VB_Name = "ProgressIndicator"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Class Module      : ProgressIndicator
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 07.10.2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------

Public FP As New F_Progress

Public SubActionIndex As Single, SubActionsCount As Single
Private FPVisible As Boolean, FPStartTime As Date, Position As Integer
Private PrS As Integer, PrE As Integer, Percent As Double, LogString As String

Public Parent As ProgressIndicator
Public ShowPercents As Boolean, ShowTime As Boolean, ShowTimeInLog As Boolean
Public Children As New Collection

Function AddChildIndicator(ByVal Caption As String, Optional ByVal FPPosition As Integer = 1) As ProgressIndicator
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    On Error Resume Next
    Set AddChildIndicator = New ProgressIndicator
    Set AddChildIndicator.Parent = Me
    AddChildIndicator.Show Caption, FPPosition
    Children.Add AddChildIndicator
End Function

Private Sub Class_Initialize()
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set FP = New F_Progress: ShowPercents = True: FPVisible = True
    PrS = 0: PrE = 100: Set_ProgressBar 0: FP.PrBar.Caption = ""
    FPStartTime = Now: ShowTime = True: ShowPercents = True
    Set FP.indicator = Me
End Sub

Sub Show(ByVal Caption As String, Optional ByVal FPPosition As Integer = 0, _
         Optional LogSize As Long = 0)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd|
    On Error Resume Next
    SetProgressFormCaption Caption: On Error Resume Next:
    FP.PrBar.Width = ProgressBar_Default_Width
    Position = FPPosition
    FP.Tag = Caption: FP.Show:
    If Position <> 0 Then Move Position
    FP.Repaint: DoEvents
    SetLogSize LogSize
End Sub

Sub Hide(): Unload FP: FPVisible = False: End Sub    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|

Sub Repaint()
    FP.Repaint: DoEvents
    If Application.ScreenUpdating = False Then
        Application.ScreenUpdating = True: Application.ScreenUpdating = False
    End If
End Sub

Sub Move(ByVal Position As Integer)    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Abs(Position) > 3 Then Exit Sub
    h = FP.Height
    If Not Me.Parent Is Nothing Then h = Me.Parent.FP.Height
    FP.Top = FP.Top + (h + 3) * Position
End Sub

Public Property Get Visible(): Visible = FPVisible: End Property

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Let Line1(ByVal NewValue As String): FP.L1.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Line2(ByVal NewValue As String): FP.L2.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Line3(ByVal NewValue As String): FP.L3.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Caption(ByVal NewValue As String): SetProgressFormCaption NewValue: End Property

Private Sub SetProgressFormCaption(Optional ByVal Caption As String = "")
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    If Len(Caption) > 0 Then FP.Tag = Caption
    txt = Trim(FP.Tag): If ShowPercents Then txt = Fix(Percent) & " %   " & txt
    dt = Format(Now - FPStartTime, "HH:NN:SS")
    If ShowTime Then txt = "( " & dt & " )    " & txt
    FP.Caption = txt
End Sub

Private Function TimeToFinish() As String
    If Percent < 15 Then Exit Function    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
    dt = (Now - FPStartTime) * (100 - Percent) / Percent
    TimeToFinish = IIf(Minute(dt) > 0, Minute(dt) & " |fffd||fffd||fffd|. ", "") & Second(dt) & " |fffd||fffd||fffd|."
    If dt < TimeSerial(0, 0, 1) Then TimeToFinish = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    TimeToFinish = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & TimeToFinish
End Function

Sub SetFocus()    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    FP.Show 0: If Position <> 0 Then Move Position
End Sub

Private Sub UpdateLabels(Optional ByVal L1_txt$, Optional ByVal L2_txt$, Optional ByVal L3_txt$)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    If L1_txt$ <> "" Then FP.L1.Caption = ProcessLabel(L1_txt$)
    If L2_txt$ <> "" Or L1_txt$ <> "" Then FP.L2.Caption = ProcessLabel(L2_txt$)
    If L3_txt$ <> "" Or L2_txt$ <> "" Or L1_txt$ <> "" Then FP.L3.Caption = ProcessLabel(L3_txt$)
End Sub

Private Function ProcessLabel(ByVal txt As String) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| txt |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    txt = Replace(txt, "$index", SubActionIndex)
    txt = Replace(txt, "$count", SubActionsCount)
    txt = Replace(txt, "$time", TimeToFinish)
    ProcessLabel = txt
End Function

Sub SubAction(Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = "", Optional ByVal L3_txt$ = "")
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If SubActionsCount = 0 Then SubActionsCount = 1
    SubActionIndex = SubActionIndex + 1
    If SubActionIndex > SubActionsCount Then SubActionIndex = SubActionsCount
    Percent = PrS + (PrE - PrS) * ((SubActionIndex - 1) / SubActionsCount)
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar Percent: DoEvents
End Sub

Sub StartNewAction(Optional ByVal Pr_Start As Integer = 0, Optional ByVal Pr_End As Integer = 100, _
                   Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = " ", Optional ByVal L3_txt$ = " ", _
                   Optional ByVal Actions_Count As Long = 0)
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Pr_Start % |fffd||fffd| Pr_End %
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Actions_Count |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    PrS = Pr_Start: PrE = Pr_End: SubActionIndex = 0: SubActionsCount = Actions_Count
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar PrS
End Sub

Sub UpdateFromChild(ByVal ChildPercent As Double)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If SubActionsCount = 0 Then
        Percent = PrS + (PrE - PrS) * (ChildPercent / 100)
    Else
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, SubActionIndex = 3: SubActionsCount=10: PrS = 50: PrE = 100: ChildPercent=40
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|. |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 60 |fffd||fffd| 65, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 62
        Percent = PrS + (PrE - PrS) / SubActionsCount * (SubActionIndex - 1) + _
                  (PrE - PrS) / SubActionsCount * (ChildPercent / 100)
    End If
    Set_ProgressBar Percent
End Sub

Private Sub Set_ProgressBar(ByVal NewPercent As Double)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Percent = NewPercent
    If NewPercent > 100 Then Percent = 100
    If NewPercent < 0 Then Percent = 0
    FP.PrBar.Width = Int(Percent * ProgressBar_Default_Width / 100)
    SetProgressFormCaption
    FP.Repaint
    If Not Parent Is Nothing Then Parent.UpdateFromChild Percent
End Sub

'Private Function GetCurrentProgress() As Long    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    If FP.PrBar.Width = 0 Then Exit Function
'    GetCurrentProgress = FP.PrBar.Width / ProgressBar_Default_Width * 100
'End Function

Private Sub Class_Terminate()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Unload FP: FPVisible = False
End Sub

Private Function ProgressBar_Default_Width() As Double    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ProgressBar_Default_Width = FP.Width - 18
End Function

Function CancelButton() As MSForms.CommandButton
    Set CancelButton = FP.CommandButton_stop
End Function

' ============================== |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 23.02.2012 =========================================
Sub SetLogSize(ByVal n As Long)
    On Error Resume Next
    If n < 0 Then n = 0
    If n > 5 Then n = 5
    FP.SpinButton_log.Value = n
    FP.SpinButton_log.Visible = n > 0
End Sub

Sub Log(ByVal txt$)
    On Error Resume Next
    If ShowTimeInLog Then currtime$ = Time & vbTab
    LogString = LogString & vbNewLine & currtime$ & txt
    FP.TextBox_Log.Text = Mid(LogString, 3)
    If FP.SpinButton_log.Value = 0 Then FP.SpinButton_log.Value = 2: FP.SpinButton_log.Visible = True
    FP.CommandButton_stop.SetFocus: FP.TextBox_Log.SetFocus
End Sub

Sub ClearLog()
    LogString = "": FP.TextBox_Log.Text = ""
End Sub

Sub ShowLog()
    On Error Resume Next: Err.Clear
    Filename$ = Environ("TEMP") & "\macro_log.txt"    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    With CreateObject("scripting.filesystemobject").CreateTextFile(Filename, True)
        .Write Mid(LogString, 3): .Close    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
    End With
    CreateObject("wscript.shell").Run """" & Filename$ & """"    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
End Sub

Sub ShowText(ByVal txt As String, Optional ByVal Index As Long)
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| txt |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    ' (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| text####.txt,
    ' |fffd||fffd||fffd| #### - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| index, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 10-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

    On Error Resume Next: Err.Clear
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Filename$ = Environ("TEMP") & "\text" & IIf(Index, Index, Left(Rnd() * 1E+15, 10)) & ".txt"
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
    With CreateObject("scripting.filesystemobject").CreateTextFile(Filename, True)
        .Write txt: .Close
    End With
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    CreateObject("wscript.shell").Run """" & Filename$ & """"
End Sub

' ============================== |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 07.10.2012 =========================================

Sub AddButton(ByVal Caption$, ByVal Macro$)    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    dd = 18
    If FP.SpinButton_log = 0 Then FP.SpinButton_log = 1
    With Me.FP.CommandButton_RunMacro
        .Caption = Caption$
        .Visible = True
        .Top = FP.Height - .Height - dd - 20
        .Left = FP.Width - .Width - dd - 15
    End With
    FP.ButtonMacro = Macro$
End Sub

Function MacroButton() As MSForms.CommandButton
    Set MacroButton = FP.CommandButton_RunMacro
End Function

Sub QueryClose()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim pi As ProgressIndicator
    For Each pi In Children
        pi.QueryClose
        pi.Hide
    Next pi
End Sub
Attribute VB_Name = "modMain"
'---------------------------------------------------------------------------------------
' Module        : modMain
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 30.01.2011
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Excel, Word, CorelDRAW. |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' http://excelvba.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| WebMoney |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: R318574877619
'---------------------------------------------------------------------------------------

Public Const ShName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Option Compare Text
Dim pi As ProgressIndicator

Function GetFile_MainPicture() As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim F_TXT$, buf$, tmp_file$: Const BufLen& = 5000

    F_TXT$ = F_TXT$ & "0E36A0143383838C28025248EE96ACB6B18A82EE3DB9FB7C61AAAD69FDF96741790E207BF258C82EC65FF52560759E92A4A55FC2282CDA2925AAE2CDE2D70E7C7505C794CA1F6D43CD2A4823FE1A57405145141537A474A361D31A77542D0A72069CBFC3B8CFE3D94C6254CBAE7D101EE64F904135216AE1EAC256C3A87D9580A041E940F8107E952FB8DBA2DDEDF260CE8EDCB8529A532FC779214875B502149503D1041208F9D6719DB7BB89B2615134A4156E0688413EC96E54A4B575B6A3C9A4A9C212FB69F22541606061472A3A99D1728BCA48F7B927EA33513DD5DC08FA476FEFB725A54EA9B8CA6D96B8F6EBCBF71B6D23CD4A5280007893558FDED6AC98E7B341DA6D70F4E3D06A45BC46681F9BCE108C7CF35537A40CFDE2DB09BA3F7335558EDEF69CB4DC10FF00D8B11CF6A8F6D73B087262801C967202568CA1B590791570CEAE446E5DBEB23FA6B4269DB4CA20CA836E8F19E293905686D29563E5906A41504D9DDE4D3FBD7A4D9BD58DF01612912A138A05D8CB23202B1E20F7C543A501D760813BAE6A28A28A028AE16EA1BF89694FD4E293B97684D7C725A4FD5540AB02935CED912F56E95027C5666C194D2987E3486C38DBADA86148524F4A4904820F8E6932B52DAD1E33991FAAB91AA6D27C27B3FED4181F71F6A750"
    F_TXT$ = F_TXT$ & "7A106E0B3AC7484A93F76331FE01E397956271C50FD84804E5C88B5600513949E2094AC216AD9FB4DBBB6DDD1B425C6C261DD5B6D2B910BD6731C4F838D2BAF58D93E0AC020F4A095022A49719562D436C956E9EA8770812DA531222C84871A79B502148524F4A4904820F8E6B1ECFD9DD63E8FF00ACD887B776E9DABB4A4F789B1FB349024D85F578B2F3ABC8F66032438A0A05292DAC1210A586DCA292DA8CC36C89F68961570F528F693173EABD6F11CF872EF8E738CF78C668A0E24DA634AF8D27F234D52B435BE56791747EAA28A06A91B4B68904F25BDDFF0075782366ACADAB216F67FCA8A281C236D9DAE2E38A9E3FAA9DA369683171C42CE3F15514503A34C2184E103028A28A0FFFD9"
    For i = 1 To Len(F_TXT$) / 2
        buf$ = buf$ & Chr(Val("&H" & Mid(F_TXT$, 2 * i - 1, 2)))
        If Len(buf$) > BufLen& Then res$ = res$ & buf$: buf$ = "": DoEvents
    Next: res$ = res$ & buf$
    tmp_file$ = Environ("tmp") & "\file_MainPicture_" & PROJECT_NAME$: Kill tmp_file$
    ff& = FreeFile: Open tmp_file$ For Binary Access Write As #ff
    Put #ff, , res$
    Close #ff
    If FileLen(tmp_file$) = Len(F_TXT$) / 2 Then GetFile_MainPicture = tmp_file$
End Function

Sub ClearCF()
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Cells.FormatConditions.Delete
End Sub


Sub RedNumbers()
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

    On Error Resume Next: col = ActiveCell.Column + sss
    If Err Then Exit Sub        ' |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

    Dim ra As Range: Set ra = Intersect(Columns(col), ActiveSheet.UsedRange)
    If ra Is Nothing Then Exit Sub        ' |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
          "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & col & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    n = Application.InputBox(msg, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Val(ActiveCell), , , , , 1)

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ra.FormatConditions.Delete

    If TypeName(n) = "Boolean" Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| N
        ra.FormatConditions.Add(xlCellValue, xlGreater, n).Interior.Color = vbRed

    End If
End Sub

Sub DeleteResultsSheet()        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Application.DisplayAlerts = False
    ActiveWorkbook.Worksheets(ShName).Delete
    Application.DisplayAlerts = True
End Sub

'Sub SetTextForSearch()
'    Dim AddinMenu As CommandBar
'    Set AddinMenu = GetCommandBar(PROJECT_NAME)
'    MsgBox AddinMenu.FindControl(ct_TEXTBOX).Text
'End Sub

Sub SearchText()
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel
    If ActiveWorkbook Is Nothing Then
        msg = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel" & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
        MsgBox msg, vbExclamation, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If

    Dim sh As Worksheet: Set sh = ActiveSheet

    Dim AddinMenu As CommandBar
    Set AddinMenu = GetCommandBar(PROJECT_NAME)
    txt = AddinMenu.FindControl(ct_TEXTBOX).Text

    'txt = Application.CommandBars.ActionControl.Text    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Application.ScreenUpdating = False

    If Len(Trim(txt)) = 0 Then Exit Sub        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

    Set pi = New ProgressIndicator
    pi.Show "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & txt & "|fffd|"

    pi.StartNewAction , 10, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ..."

    DeleteResultsSheet        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    Dim shd As Worksheet        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set shd = ActiveWorkbook.Worksheets.Add(Worksheets(1))

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    shd.Tab.Color = vbGreen: shd.Name = ShName
    shd.Range("a1:b1").Value = Array("|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
    shd.Range("1:1").Interior.ColorIndex = 15 + sss: shd.Range("1:1").Font.Bold = True

    pi.StartNewAction 10, 100, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ...", , , _
                      IIf(CurrentSheetOnly, 1, ActiveWorkbook.Worksheets.Count) * 2

    calc = Application.Calculation
    Application.Calculation = xlCalculationManual

    If CurrentSheetOnly Then
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sh, shd, txt
    Else
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        For Each sh In ActiveWorkbook.Worksheets
            |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sh, shd, txt
        Next sh
    End If

    shd.UsedRange.Value = shd.UsedRange.Value
    Application.Calculation = calc

    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If shd.UsedRange.Rows.Count = 1 Then
        DeleteResultsSheet        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        msg2 = IIf(CurrentSheetOnly, "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & ActiveSheet.Name & "|fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & ActiveWorkbook.Name & "|fffd|")
        msg = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd| """ & txt & """ |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & msg2
        pi.Hide: Application.ScreenUpdating = True
        MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If


    If CurrentSheetOnly Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ) |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        shd.Rows(1).Delete
        shd.Columns(1).Delete

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sh.Range("1:1").Copy
        shd.Range("1:1").PasteSpecial xlPasteColumnWidths
        Application.CutCopyMode = False
    Else
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        shd.Outline.SummaryRow = xlAbove
        shd.UsedRange.EntireColumn.AutoFit

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        shd.Activate: shd.[A2].Select: DoEvents
        ActiveWindow.FreezePanes = True

    End If

    pi.Hide
    Application.ScreenUpdating = True
End Sub

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByRef sh As Worksheet, ByRef shd As Worksheet, ByVal txt As String) As Long
    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| sh |fffd||fffd||fffd||fffd||fffd| txt |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| shd
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Dim coll As Collection, ra As Range

    pi.SubAction "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & sh.Name & "|fffd| ...", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ..."
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Set coll = SearchResults(sh, txt)

    If coll.Count Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

        pi.SubAction "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & sh.Name & "|fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & coll.Count & " |fffd||fffd||fffd||fffd||fffd|", _
                     "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: "
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 500 |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each Item In coll
            If ra Is Nothing Then Set ra = sh.Rows(Item) Else Set ra = Union(ra, sh.Rows(Item))
            n = n + 1: If n >= 500 Then CopyRows ra, shd: Set ra = Nothing: n = 0
        Next
        If Not ra Is Nothing Then CopyRows ra, shd
    Else
        pi.SubAction , "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", " "
    End If
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = coll.Count
End Function


Sub CopyRows(ByRef ro As Range, ByRef shd As Worksheet)
    On Error Resume Next: DoEvents
    ' pi.Line3 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ..."
    columnscount% = shd.Columns.Count - 1: rc = shd.UsedRange.Rows.Count
    Dim CopyRange As Range: Set CopyRange = Intersect(ro.EntireRow, ro.Worksheet.Columns.Resize(, columnscount%))
    Dim ra As Range: Set ra = shd.Cells(rc + 1, 1).Resize(Intersect(ro.EntireRow, ro.Worksheet.Columns(1)).Cells.Count)
    ra.Value = ro.Worksheet.Name
    ra.BorderAround xlContinuous
    ra.Interior.ColorIndex = 12 + Fix(Rnd() * 30)
    If ra.Cells.Count > 1 Then
        Intersect(ra.EntireRow, ra.EntireRow.Offset(1)).Group
    End If
    'pi.Line3 = pi.FP.L3.Caption & "**": DoEvents: pi.FP.Repaint
    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & ra.Cells.Count & _
             "   |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & ra.Cells.Count + rc - 1
    pi.FP.Repaint: DoEvents
    CopyRange.Copy shd.Cells(rc + 1, 2)
End Sub

Function SearchResults(ByVal sh As Worksheet, ByVal txt As String) As Collection
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| txt |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| sh
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim rFndRng As Range, sAddress As String, n As Long
    Set SearchResults = New Collection
    sAddress = "": Set rFndRng = Nothing
    Set rFndRng = sh.UsedRange.Find(What:=txt, LookIn:=xlValues, LookAt:=xlPart)
    If Not rFndRng Is Nothing Then
        sAddress = rFndRng.Address
        Do
            SearchResults.Add rFndRng.Row, CStr(rFndRng.Row): DoEvents
            n = n + 1: If n Mod 40 = 0 Then pi.Line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & rFndRng.Row & _
                        "   |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & SearchResults.Count
            Set rFndRng = sh.UsedRange.FindNext(rFndRng)
        Loop While sAddress <> rFndRng.Address
    End If
    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. " & "   |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & SearchResults.Count
End Function
Attribute VB_Name = "mod_About"
'---------------------------------------------------------------------------------------
' Module        : mod_About
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 20.08.2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------


Option Compare Text
Public Const VERSIONS_XML_FILENAME$ = "info.xml", DEMO_ACTIVATION_CODE$ = "demo", MODULE_VERSION = 8
Public cnt As Long, IAEC As Long, LIAT As Date: Public Const DEBUG_MODE As Boolean = False     'True
Public UseTempSettings As Boolean, TempSettingsCollection As New Collection

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Enum CONTROL_TYPES
    ct_BUTTON = msoControlButton: ct_TEXTBOX = msoControlEdit: ct_COMBOBOX = msoControlComboBox
    ct_DROPDOWN = msoControlDropdown: ct_POPUP = msoControlPopup
End Enum

Private Sub ShowMainForm()    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    On Error Resume Next: F_About.Show
    F_About.MultiPage1.Value = 0
End Sub

Sub ShowSettingsPage()    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    On Error Resume Next: F_Settings.Show
End Sub

Sub ShowGreeting()    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    On Error Resume Next:
    If IsObject(F_Greeting) Then
        ND "run test", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
        F_Greeting.Show
    End If
End Sub

Function Settings(ByVal SettingName, Optional ByVal DefValue As Variant) As Variant
    On Error Resume Next
    Settings = GetSetting(PROJECT_NAME$, "Settings", SettingName, DefValue)
    If UseTempSettings Then
        Err.Clear: res = TempSettingsCollection(CStr(SettingName))
        If Err = 0 Then Settings = res
    End If
End Function

Private Sub auto_open()
    On Error Resume Next
    If IsFirstRun Then
        SetValuesOnFirstRun
        If IsObject(F_Greeting) Then
            ND "run test", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
            F_Greeting.Show
        End If
    Else
        ND "addin open", CountersCurrentValues
    End If
    a = vbCheck: Dim msg$
    If PL_(msg, True) Then Exit Sub
    If CBool(Val(RSP(5))) Then Application.OnTime Now + TimeSerial(0, 0, 5), "AutoInstallUpdate"
    CreateProgramCommandBar    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub

Private Sub auto_close()
    On Error Resume Next
    ND "addin close with Excel", CountersCurrentValues
    DeleteProgramCommandBar
End Sub

Function DEVELOPER_WEBSITE$()
    DEVELOPER_WEBSITE$ = "http://ExcelVBA.ru/"
End Function
Function UPDATE_VERSIONS_XML$()
    UPDATE_VERSIONS_XML$ = UPDATE_FOLDER$ & VERSIONS_XML_FILENAME$
End Function
Function UPDATE_FOLDER$()
    UPDATE_FOLDER$ = DEVELOPER_WEBSITE$ & "updates/" & PROJECT_NAME$ & "/"
End Function
Function VERSIONS_INFO_LOCAL_XML_PATH$()
    VERSIONS_INFO_LOCAL_XML_PATH$ = Environ("TEMP") & "\" & PROJECT_NAME$ & "_" & VERSIONS_XML_FILENAME$
End Function
Function PROJECT_FULLNAME$()
    PROJECT_FULLNAME$ = ThisWorkbook.BuiltinDocumentProperties("Title")
End Function
Function REG_HYPERLINK$()
    REG_HYPERLINK$ = DEVELOPER_WEBSITE$ & "buy/program?name=" & PROJECT_NAME$ & "&HID=" & HID$
End Function
Function UNINSTALL_HYPERLINK$()
    UNINSTALL_HYPERLINK$ = DEVELOPER_WEBSITE$ & "uninstall/program?name=" & PROJECT_NAME$ & "&HID=" & HID$
End Function
Function NOTIFICATION_HYPERLINK$()
    NOTIFICATION_HYPERLINK$ = DEVELOPER_WEBSITE$ & "php/notification.php?name=" & PROJECT_NAME$ & "&HID=" & HID$
End Function
Function PROGRAM_HYPERLINK$()
    PROGRAM_HYPERLINK$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "?ref=" & HID$
End Function
Function SERIAL_NUMBER_HYPERLINK$()
    SERIAL_NUMBER_HYPERLINK$ = DEVELOPER_WEBSITE$ & "php/get-serial.php"
End Function
Function BL_HYPERLINK$()
    BL_HYPERLINK$ = DEVELOPER_WEBSITE$ & "php/black-list.php"
End Function
Function EULA_HYPERLINK$()
    EULA_HYPERLINK$ = DEVELOPER_WEBSITE$ & "buy/EULA?name=" & PROJECT_NAME$ & "&HID=" & HID$
End Function
Function BREACH_EULA_HYPERLINK$()
    BREACH_EULA_HYPERLINK$ = DEVELOPER_WEBSITE$ & "buy/EULA/breach?name=" & PROJECT_NAME$ & "&HID=" & HID$
End Function

Function HID$()
    On Error Resume Next
    SN& = CreateObject(ChrW(115) & ChrW(99) & ChrW(114) & ChrW(105) & ChrW(112) & ChrW(116) & ChrW(105) & ChrW(110) & ChrW(103) & ChrW(46) & ChrW(102) & ChrW(105) & ChrW(108) & ChrW(101) & ChrW(115) & _
                       ChrW(121) & ChrW(115) & ChrW(116) & ChrW(101) & ChrW(109) & ChrW(111) & ChrW(98) & ChrW(106) & ChrW(101) & ChrW(99) & ChrW(116)).GetDrive(ChrW(99) & ChrW(58)).SerialNumber
    HID$ = ChrW(115) & Format(Abs(934526875# - SN&), "0000000000")
End Function
Function PROJECT_NAME$()
    PROJECT_NAME$ = GHV(ChrW(80) & ChrW(82) & ChrW(79) & ChrW(74) & ChrW(69) & ChrW(67) & ChrW(84) & ChrW(95) & ChrW(78) & ChrW(65) & ChrW(77) & ChrW(69))
    If PROJECT_NAME$ = "" Then
        appname$ = ThisWorkbook.BuiltinDocumentProperties("Application Name")
        If appname$ <> Application.Name Then PROJECT_NAME$ = appname$
    End If
End Function


Function ND(ByVal action$, Optional ByVal comment$) As Boolean
    On Error Resume Next
    If Not InternetConnected Then Exit Function
    comment$ = Replace(comment$, "|fffd|", """"): comment$ = Replace(comment$, "|fffd|", """")
    Set xmlhttp = CreateObject("Microsoft.XMLHTTP")
    xmlhttp.Open "POST", NOTIFICATION_HYPERLINK$, True
    xmlhttp.setRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim POST() As Byte, PostData$
    Login$ = CreateObject("WScript.Network").UserName
    Domain$ = CreateObject("WScript.Network").UserDomain
    PostData = PostData & "email=" & RussianStringToURLEncode(RE_$)
    PostData = PostData & "&code=" & RussianStringToURLEncode(AC_$)
    PostData = PostData & "&addin=" & RussianStringToURLEncode(PROJECT_NAME$)
    PostData = PostData & "&HID=" & RussianStringToURLEncode(HID)
    PostData = PostData & "&host_time=" & RussianStringToURLEncode(Format(Now, "YYYY-MM-DD HH:NN:SS"))
    PostData = PostData & "&win_un=" & RussianStringToURLEncode(Login$)
    PostData = PostData & "&win_ud=" & RussianStringToURLEncode(Domain$)
    PostData = PostData & "&action=" & RussianStringToURLEncode(action$)
    PostData = PostData & "&comment=" & RussianStringToURLEncode(comment$)
    POST = StrConv(PostData, vbFromUnicode)
    xmlhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    xmlhttp.send (POST): DoEvents
    statusText = xmlhttp.statusText
    StatusCode = Val(xmlhttp.Status)
    response$ = xmlhttp.responsetext
    Set xmlhttp = Nothing
    'Debug.Print Now, statusTEXT, response$, StatusCode

    ND = True
    Select Case StatusCode
        Case 201, 202
            If DEBUG_MODE Then Debug.Print Now, response$
            Code$ = statusText
        Case 401, 413
            msg = response$
            If DEBUG_MODE Then Debug.Print Now, statusText
        Case Else
    End Select
End Function

Function GSNUE_(ByVal Email$, ByRef msg$) As Boolean
    On Error Resume Next
    Set xmlhttp = CreateObject("Microsoft.XMLHTTP")
    xmlhttp.Open "POST", SERIAL_NUMBER_HYPERLINK$, "False"
    xmlhttp.setRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim POST() As Byte, PostData$, msg2$
    Login$ = CreateObject("WScript.Network").UserName
    Domain$ = CreateObject("WScript.Network").UserDomain
    PostData = PostData & "email=" & RussianStringToURLEncode(Email$)
    PostData = PostData & "&addin=" & RussianStringToURLEncode(PROJECT_NAME$)
    PostData = PostData & "&HID=" & RussianStringToURLEncode(HID)
    PostData = PostData & "&host_time=" & RussianStringToURLEncode(Format(Now, "YYYY-MM-DD HH:NN:SS"))
    PostData = PostData & "&win_un=" & RussianStringToURLEncode(Login$)
    PostData = PostData & "&win_ud=" & RussianStringToURLEncode(Domain$)
    POST = StrConv(PostData, vbFromUnicode)
    xmlhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    xmlhttp.send (POST): DoEvents
    statusText = xmlhttp.statusText
    StatusCode = Val(xmlhttp.Status)
    response$ = xmlhttp.responsetext
    Set xmlhttp = Nothing
    Select Case StatusCode
        Case 201, 202
            If DEBUG_MODE Then Debug.Print Now, response$
            Code$ = statusText
            GSNUE_ = ValidateAC(Code$, msg$, msg2$)
            RE_$ Email$
        Case 401, 413
            msg = response$
            If DEBUG_MODE Then Debug.Print Now, statusText
            GSNUE_ = False
        Case Else
    End Select
    ND "serial by email", "HTTP " & StatusCode & ", res=" & UCase(GSNUE_) & _
                          " """ & statusText & """," & vbNewLine & "msg=""" & IIf(Len(msg2$) > 0, msg2$, msg$) & """"
End Function
Function RussianStringToURLEncode(ByVal txt As String) As String
    For i = 1 To Len(txt)
        l = Mid(txt, i, 1)
        Select Case AscW(l)
            Case Is > 256: t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case 32: t = "+"
            Case Else: t = l
        End Select
        RussianStringToURLEncode = RussianStringToURLEncode & t
    Next
End Function
Function GetVersion() As Long
    Application.Volatile True
    On Error Resume Next: ver& = Val(ThisWorkbook.BuiltinDocumentProperties("Revision Number"))
    GetVersion = IIf(Val(ver&) < 1000, 1009, ver&)
End Function

Function GetVersionTXT(Optional ByVal ver& = 0)
    On Error Resume Next
    If ver& = 0 Then ver& = Val(ThisWorkbook.BuiltinDocumentProperties("Revision Number")): If ver& = 0 Then ver& = 1009
    vArr = Array("", " Alfa", " Beta", " RC", " RC2", " RC3", " RC4", " RC5", " RC6"): verType$ = vArr(ver& Mod 10)
    GetVersionTXT = ver& \ 1000 & "." & Right(ver& \ 100, 1) & "." & Right(ver& \ 10, 1) & verType$
End Function
Sub SetVersion(ByVal n As Long)
    On Error Resume Next: If n < 1000 Then n = 1009
    If n Mod 10 = 0 Then n = n + 9
    ThisWorkbook.BuiltinDocumentProperties("Revision Number") = n
    ThisWorkbook.BuiltinDocumentProperties("Creation Date") = Now
End Sub
Function sss() As Long: CounterUpdate 2: sss = 0: End Function
Function mmm() As Long: CounterUpdate 2: mmm = 1: End Function
Function bbb() As Boolean: CounterUpdate 2: bbb = True: End Function
Function vbCheck() As Long: CounterUpdate 1: vbCheck = 0: End Function

Function AnyLicense() As Boolean: AnyLicense = CAC_: End Function
Function DemoLicense() As Boolean: DemoLicense = CAC_ And AC_$ = DEMO_ACTIVATION_CODE$: End Function
Function FullLicense() As Boolean: FullLicense = CAC_ And AC_$ <> DEMO_ACTIVATION_CODE$: End Function
Function NoLicense() As Boolean: NoLicense = Not CAC_: End Function
Function Developer() As Boolean: Developer = TrueDeveloper And (Dir("c:\testmode", vbNormal) = ""): End Function
Function TrueDeveloper() As Boolean:
    txt$ = Environ(ChrW(85) & ChrW(83) & ChrW(69) & ChrW(82) & ChrW(68) & ChrW(79) & ChrW(77) & ChrW(65) & ChrW(73) & ChrW(78)): TrueDeveloper = (txt$ Like ChrW(73) & ChrW(71) & ChrW(79) & ChrW(82) & ChrW(72) & ChrW(79) & ChrW(77) & ChrW(69) & ChrW(42)) Or (txt$ Like ChrW(73) & ChrW(71) & ChrW(79) & ChrW(82) & ChrW(87) & ChrW(79) & ChrW(82) & ChrW(75) & ChrW(42))
End Function
Function AC_$(Optional ByVal Code$)
    On Error Resume Next
    If Len(Code$) Then CreateObject("WScript.Shell").RegWrite BASE_REGISTRY_PATH$ & "code", Code$
    AC_$ = CreateObject("WScript.Shell").RegRead(BASE_REGISTRY_PATH$ & "code")
End Function
Function RE_$(Optional ByVal Email$)
    On Error Resume Next
    If Len(Email$) Then CreateObject("WScript.Shell").RegWrite BASE_REGISTRY_PATH$ & ChrW(101) & ChrW(109) & ChrW(97) & ChrW(105) & ChrW(108), Email$
    RE_$ = CreateObject("WScript.Shell").RegRead(BASE_REGISTRY_PATH$ & ChrW(101) & ChrW(109) & ChrW(97) & ChrW(105) & ChrW(108))
End Function
Function CAC_(Optional ByRef response$) As Boolean
    If DEBUG_MODE Then Debug.Print "starting CAC_", ""
    On Error Resume Next: Err.Clear: Dim res As Boolean, ExpiredDate As Double, msg$
    response$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Val(RSP(1)) & ")"
    If Val(RSP(1)) < 0 Then response$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"

    Code$ = AC_$: If Code$ = "" Then Exit Function

    Select Case Code$
        Case DEMO_ACTIVATION_CODE$
            If Len(RSP(8)) Then ExpiredDate = CDate(RSP(8))
            If ExpiredDate > 0 Then
                If Now <= ExpiredDate Then
                    response$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & DateDiff("h", Now, ExpiredDate) & " |fffd||fffd||fffd||fffd||fffd|)"
                    CAC_ = True
                Else
                    WSP 8, 1
                End If
            End If
        Case Else
            res = Val(Trim(Code$)) = CLng(EnDeCrypt(HID, True)) * CLng(EnDeCrypt(PROJECT_NAME$, True)) + 171
            CAC_ = res
            If res Then
                response$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                If Len(RE_$) Then response$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & RE_$
            End If
    End Select
End Function

Function ValidateAC(ByVal Code$, Optional ByRef msg$, Optional ByRef msg2$) As Boolean
    If DEBUG_MODE Then Debug.Print "starting ValidateAC", Code$
    On Error Resume Next: Err.Clear: Dim res As Boolean, ExpiredDate As Double
    SavedCode$ = AC_$
    res = Val(Trim(SavedCode$)) = CLng(EnDeCrypt(HID, True)) * CLng(EnDeCrypt(PROJECT_NAME$, True)) + 171
    If res Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ValidateAC = True: ND "code activation", msg$: Exit Function
    End If
    Select Case Code$
        Case DEMO_ACTIVATION_CODE$
            res = CAC_
            If SavedCode$ = Code$ Then
                msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|" & Code$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!": ValidateAC = res:
                ND "code activation", msg$ & vbLf & CountersCurrentValues: Exit Function
            End If
            If Len(RSP(8)) Then ExpiredDate = CDate(RSP(8))
            If ExpiredDate = 0 Then
                WSP 8, CDbl(Now) + 2: WSP 7, 1
                msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd|"
                msg2$ = "Start DEMO": ValidateAC = True: AC_$ Code$
            Else
                If Now > ExpiredDate Then
                    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    msg2$ = "Stop DEMO": ValidateAC = False: WSP 8, 1
                Else
                    hrs = DateDiff("h", Now, ExpiredDate)
                    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & Format(ExpiredDate, "HH:MM:SS  D MMMM YYYY")
                    msg2$ = "Continue DEMO": ValidateAC = True: AC_$ Code$
                End If
            End If
        Case Else
            res = Val(Trim(Code$)) = CLng(EnDeCrypt(HID, True)) * CLng(EnDeCrypt(PROJECT_NAME$, True)) + 171
            ValidateAC = res
            If res Then
                msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!": AC_$ Code$
                msg2$ = "Activated!"
            Else
                msg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                msg2$ = "Error code!"
            End If
    End Select
    ND "code validation", "|fffd||fffd||fffd|: " & Code$ & ", res=" & UCase(ValidateAC) & ", msg=""" & IIf(Len(msg2$) > 0, msg2$, msg$) & """"
End Function

Function CheckParameters(Optional ByVal Index&) As Boolean
    If DEBUG_MODE Then Debug.Print "starting CheckParameters", Index&
    On Error Resume Next
    res1 = RegistryInfo: Arr1 = Split(EnDeCrypt(res1), "%&$")
    If Index& = 1 Then CheckParameters = Len(res1) > 0: Exit Function
    res2 = SP_FILE: Arr2 = Split(EnDeCrypt(res2), "%&$")
    If Index& = 2 Then CheckParameters = Len(res2) > 0: Exit Function
    CheckParameters = res1 = res2
    Select Case True
        Case UBound(Arr1) > UBound(Arr2): SP_FILE$ res1
        Case UBound(Arr2) > UBound(Arr1): CreateObject("WScript.Shell").RegWrite BASE_REGISTRY_PATH$ & "info", Replace(res2, Chr(0), "nullchar")
    End Select
End Function

Function IsFirstRun() As Boolean
    On Error Resume Next
    Dim con1 As Boolean, con2 As Boolean, con3 As Boolean
    If CheckParameters(1) Then Exit Function Else con1 = True
    If CheckParameters(2) Then Exit Function Else con2 = True
    con3 = Dir(SP_FILE("filename"), vbSystem + vbHidden) = ""
    IsFirstRun = con1 And con2 And con3
End Function

Function SP_FILE(Optional ByVal txt) As String
    file$ = Environ(ChrW(65) & ChrW(80) & ChrW(80) & ChrW(68) & ChrW(65) & ChrW(84) & ChrW(65)) & ChrW(92) & PROJECT_NAME$
    On Error Resume Next: Set FSO = CreateObject("scripting.filesystemobject")
    If IsMissing(txt) Then
        Set ts = FSO.OpenTextFile(file$, 1, False)
        SP_FILE = ts.ReadAll: ts.Close
    Else
        If txt = "filename" Then SP_FILE = file$: Exit Function
        SetAttr file$, vbNormal
        Set ts = FSO.CreateTextFile(file$, True): ts.Write txt
        SetAttr file$, vbHidden + vbSystem
    End If
    Set ts = Nothing: Set FSO = Nothing: Err.Clear
End Function

Function RegistryInfo(Optional ByVal txt) As String
    On Error Resume Next: Set wsh = CreateObject("WScript.Shell")
    If IsMissing(txt) Then
        RegistryInfo = Replace(wsh.RegRead(BASE_REGISTRY_PATH$ & "info"), "nullchar", Chr(0))
    Else
        wsh.RegWrite BASE_REGISTRY_PATH$ & "info", Replace(txt, Chr(0), "nullchar")
    End If
    Set wsh = Nothing
End Function

Function RSP(ByVal Index As Long)
    If DEBUG_MODE Then Debug.Print "RSP", Index
    On Error Resume Next: CheckParameters
    RSP = Split(EnDeCrypt(RegistryInfo), "%&$")(Index)
End Function

Function CountersCurrentValues() As String
    'CountersCurrentValues = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Val(RSP(1)) & " |fffd||fffd| " & IIf(Val(GHV("h_c1")) > 0, Val(GHV("h_c1")), 30) & _
     ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Val(RSP(2)) & " |fffd||fffd| " & IIf(Val(GHV("h_c2")) > 0, Val(GHV("h_c2")), 30) & "," & vbNewLine & _
     "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & CDate(RSP(3)) & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CDate(RSP(4))
    On Error Resume Next
    d1$ = Format(CDate(RSP(3)), "DD.MM.YY")
    d2$ = Format(CDate(RSP(4)), "DD.MM.YY")
    CountersCurrentValues = "v." & GetVersion & ", " & Val(RSP(1)) & "/" & IIf(Val(GHV("h_c1")) > 0, Val(GHV("h_c1")), 30) & _
                            ", " & Val(RSP(2)) & "/" & IIf(Val(GHV("h_c2")) > 0, Val(GHV("h_c2")), 30) & ", " & _
                            "" & d1$ & "/" & d2$

End Function

Function SetValuesOnFirstRun()
    On Error Resume Next: Err.Clear
    RegistryInfo "---"
    WSP 0, PROJECT_NAME$
    WSP 1, IIf(Val(GHV("h_c1")) > 0, Val(GHV("h_c1")), 30)
    WSP 2, IIf(Val(GHV("h_c2")) > 0, Val(GHV("h_c2")), 1000)
    WSP 3, CDbl(Now): WSP 5, 1: WSP 6, 1
    DoEvents
    res = CheckParameters
    ND "first run", IIf(res, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Val(GHV("h_c1")), _
                        "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: CheckParameters=FALSE") & vbLf & CountersCurrentValues
    If Not res Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & _
       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Windows |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & vbNewLine & _
       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ICQ \ Skype", vbCritical, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Function

Function WSP(ByVal Index As Long, ByVal Value)
    If DEBUG_MODE Then Debug.Print "WSP", Index, Value
    On Error Resume Next: Err.Clear: Dim arr
    If IsFirstRun Then Debug.Print IIf(DEBUG_MODE, "First run detected ...", ""): SetValuesOnFirstRun
    arr = Split(EnDeCrypt(RegistryInfo), "%&$")
    If UBound(arr) < Index Then ReDim Preserve arr(0 To Index)
    arr(Index) = Value: txt = EnDeCrypt(Join(arr, "%&$"))
    RegistryInfo txt
    SP_FILE txt
    Err.Clear
End Function

Function PL_(Optional ByRef msg, Optional ByVal silent As Boolean) As Boolean
    If FullLicense Then Exit Function
    On Error Resume Next
    If Len(RSP(4)) > 0 And DemoLicense Then
        If CDate(RSP(4)) > Now + TimeSerial(1, 10, 0) Then
            WSP 8, 1
            ImmediateMsg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
                           "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                           "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                           "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|"
            If Not silent Then ND "time exceeded", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
            If Not silent Then MsgBox ImmediateMsg, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
    End If
    If Len(RSP(4)) = 0 Then WSP 4, CDbl(Now) Else If CDate(RSP(4)) < Now Then WSP 4, CDbl(Now)
    If AnyLicense Then Exit Function

    If Val(RSP(1)) < 0 Then
        msg = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
              "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        If AC_$ <> DEMO_ACTIVATION_CODE$ Then
            msg = msg & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                  "|fffd||fffd| 48 |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        End If
        If Not silent Then ND "limit exceeded", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
        PL_ = True: Exit Function
    End If
    If Val(RSP(2)) < 0 Then
        msg = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
              "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        If AC_$ <> DEMO_ACTIVATION_CODE$ Then
            msg = msg & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                  "|fffd||fffd| 48 |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        End If
        If Not silent Then ND "limit exceeded", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
        PL_ = True: Exit Function
    End If
    If Len(RSP(3)) Then
        If CDate(RSP(3)) - Now > 365 Then
            msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                  "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
                  "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            If Not silent Then ND "time exceeded", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
            PL_ = True: Exit Function
        End If
    End If
End Function
Sub SHV(ByVal Parameter As String, ByVal NewValue As String)
    Dim n As Name: On Error Resume Next: Err.Clear
    NewValue = "%%" & NewValue & "%%"
    ThisWorkbook.Names(Parameter).RefersTo = NewValue
    If Err Then ThisWorkbook.Names.Add Parameter, NewValue
    ThisWorkbook.Names(Parameter).Visible = False
End Sub
Function GHV(ByVal Parameter As String) As String
    On Error Resume Next: GHV = ThisWorkbook.Names(Parameter).RefersTo
    GHV = Split(GHV, "%%")(1)
End Function
Public Function EnDeCrypt(ByVal txt$, Optional ByVal numeric As Boolean, Optional ByVal p$)    'As String
    On Error Resume Next
    Dim s(0 To 255) As Integer, kep(0 To 255) As Integer: If Len(p) = 0 Then p = "12345asdfg"
    Dim temp As Integer, a As Integer, b As Integer, sd As Long
    Dim i As Integer, j As Integer, temp2 As Integer, k As Integer
    b = 0
    For a = 0 To 255
        b = b + 1: If b > Len(p) Then b = 1
        kep(a) = Asc(Mid$(p, b, 1))
    Next a
    For a = 0 To 255: s(a) = a: Next a
    b = 0: For a = 0 To 255: b = (b + s(a) + kep(a)) Mod 256: temp = s(a): s(a) = s(b): s(b) = temp: Next a
    For a = 1 To Len(txt)
        i = (i + 1) Mod 256: j = (j + s(i)) Mod 256: temp = s(i): s(i) = s(j): s(j) = temp
        k = s((s(i) + s(j)) Mod 256)
        EnDeCrypt = EnDeCrypt & Chr(Asc(Mid$(txt, a, 1)) Xor k)
        sd = sd + (Asc(Mid$(txt, a, 1)) Xor k)
    Next
    If numeric Then EnDeCrypt = sd
End Function
Function CounterUpdate(ByVal level&)
    On Error Resume Next
    If NoLicense Then WSP level&, Val(RSP(level&)) - 1
    Dim msg$
    If PL_(msg) Then
        MsgBox msg, vbCritical, ChrW(1044) & ChrW(1072) & ChrW(1083) & ChrW(1100) & ChrW(1085) & ChrW(1077) & _
                                ChrW(1081) & ChrW(1096) & ChrW(1077) & ChrW(1077) & ChrW(32) & ChrW(1080) & ChrW(1089) & ChrW(1087) & _
                                ChrW(1086) & ChrW(1083) & ChrW(1100) & ChrW(1079) & ChrW(1086) & ChrW(1074) & ChrW(1072) & ChrW(1085) & _
                                ChrW(1080) & ChrW(1077) & ChrW(32) & ChrW(1087) & ChrW(1088) & ChrW(1086) & ChrW(1075) & ChrW(1088) & _
                                ChrW(1072) & ChrW(1084) & ChrW(1084) & ChrW(1099) & ChrW(32) & ChrW(171) & PROJECT_NAME$ & ChrW(187) & _
                                ChrW(32) & ChrW(1085) & ChrW(1077) & ChrW(1074) & ChrW(1086) & ChrW(1079) & ChrW(1084) & ChrW(1086) & ChrW(1078) & ChrW(1085) & ChrW(1086) & ChrW(33)
        F_About.Show
        F_About.MultiPage1.Value = 1
        StopMacro = True
        Exit Function
    End If
End Function
Function BASE_REGISTRY_PATH$()
    BASE_REGISTRY_PATH$ = ChrW(72) & ChrW(75) & ChrW(67) & ChrW(85) & ChrW(92) & ChrW(83) & ChrW(111) & ChrW(102) & _
                          ChrW(116) & ChrW(119) & ChrW(97) & ChrW(114) & ChrW(101) & ChrW(92) & ChrW(69) & ChrW(120) & _
                          ChrW(99) & ChrW(101) & ChrW(108) & ChrW(86) & ChrW(66) & ChrW(65) & ChrW(92) & PROJECT_NAME$ & "\"
End Function
Function AutorunStatus() As Boolean
    ShortcutName$ = PROJECT_NAME$ & ".lnk"
    ShortcutFullName$ = Replace(Application.StartupPath & "\" & ShortcutName$, "\\", "\")
    AutorunStatus = Dir(ShortcutFullName$, vbNormal) <> ""
End Function

Sub AddinAutoRun(Optional ByVal Disable As Boolean)
    On Error Resume Next
    If Not Disable Then
        If ThisWorkbook.Path Like Environ("temp") & "*" Then
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| TEMP

            AddinsFolder$ = Replace(Application.UserLibraryPath & "\", "\\", "\")
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| AddIns |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| C:\WINDOWS\Temp\
            If Dir(AddinsFolder$, vbDirectory) = "" Then AddinsFolder$ = Environ("temp") & "\"
            Application.DisplayAlerts = False
            ThisWorkbook.SaveAs AddinsFolder$ & ThisWorkbook.Name    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            Application.DisplayAlerts = True
        End If
    End If

    ShortcutName$ = PROJECT_NAME$ & ".lnk"    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, "MyAddin.lnk"
    ShortcutFullName$ = Replace(Application.StartupPath & "\" & ShortcutName$, "\\", "\")

    On Error Resume Next
    If Disable Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Disable=TRUE, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Kill ShortcutFullName$
    Else    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
        Set AddinShortcut = CreateObject("WScript.Shell").CreateShortcut(ShortcutFullName$)
        AddinShortcut.TargetPath = ThisWorkbook.FullName
        AddinShortcut.Save
    End If

    Dim AI As AddIn
    For Each AI In Application.AddIns    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If AI.Name = ThisWorkbook.Name Then AI.Installed = False
    Next AI
End Sub


Sub SaveAddinToPermanentPath(Optional ByVal ForceSaving As Boolean)
    On Error Resume Next
    Dim SaveFileInAddinsFolder As Boolean
    AddinsFolder$ = Replace(Application.UserLibraryPath & "\", "\\", "\")
    If Dir(AddinsFolder$, vbDirectory) = "" Then Exit Sub    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

    If Not ForceSaving Then
        If ThisWorkbook.Path Like Environ("temp") & "*" Then
            SaveFileInAddinsFolder = True    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Addins |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Else
            If ThisWorkbook.ReadOnly Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                Err.Clear
                SetAttr ThisWorkbook.FullName, vbNormal
                ThisWorkbook.ChangeFileAccess xlReadWrite

                If Err <> 0 Or ThisWorkbook.ReadOnly Then    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    msg$ = "|fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                           "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| """ & ThisWorkbook.Path & """" & vbNewLine & vbNewLine & _
                           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|Addins|fffd|?" & vbNewLine & _
                           "(|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: """ & AddinsFolder$ & """)"
                    ttl$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                    SaveFileInAddinsFolder = MsgBox(msg$, vbQuestion + vbOKCancel, ttl$) = vbOK
                End If
            End If
        End If
    End If

    If SaveFileInAddinsFolder Or ForceSaving Then
        OldFilename$ = ThisWorkbook.FullName: Err.Clear
        ThisWorkbook.SaveAs AddinsFolder$ & ThisWorkbook.Name
        If Dir(ThisWorkbook.FullName, vbNormal) <> "" Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            SetAttr OldFilename$, vbNormal
            Kill OldFilename$    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        End If
    End If
End Sub

Function UninstallThisFile()
    On Error Resume Next
    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
           "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|?"
    If MsgBox(msg$, vbExclamation + vbOKCancel + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|") = vbCancel Then Exit Function
    AddinAutoRun True       ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Application.DisplayAlerts = False
    FilePath$ = ThisWorkbook.FullName
    ThisWorkbook.ChangeFileAccess xlReadOnly
    SetAttr FilePath$, vbNormal
    Kill FilePath$
    If DEBUG_MODE Then Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & FilePath$
    ND "uninstall", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & CountersCurrentValues
    CreateObject("wscript.Shell").Run UNINSTALL_HYPERLINK$
    Application.DisplayAlerts = True
    ThisWorkbook.Close False
End Function

' ================================= MODULE updates ======================================================
Function BackupThisFile(Optional ByVal HideMessage As Boolean) As String
    On Error Resume Next
    If Not ThisWorkbook.Saved Then ThisWorkbook.Save
    BackupFolderPath$ = Environ("TEMP") & "\Backups\": MkDir BackupFolderPath$: Err.Clear
    If TrueDeveloper Then BackupFolderPath$ = "D:\|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\Addin Backups\": MkDir BackupFolderPath$: Err.Clear
    backupPath$ = BackupFolderPath$ & "Backup " & Format(Now, "YYYY-MM-DD--HH-NN-SS ") & ThisWorkbook.Name
    If TrueDeveloper Then backupPath$ = BackupFolderPath$ & PROJECT_NAME$ & Format(Now, " YYYY-MM-DD--HH-NN-SS.") & Extension(ThisWorkbook.Name)
    ThisWorkbook.SaveCopyAs backupPath$
    BackupThisFile = IIf(Err, "", backupPath$)

    PrevBackup$ = GetSetting(PROJECT_NAME$, "Setup", "LastBackup", "")
    SaveSetting PROJECT_NAME$, "Setup", "PrevBackup", PrevBackup$
    SaveSetting PROJECT_NAME$, "Setup", "LastBackup", backupPath$

    If HideMessage Then Exit Function
    If BackupThisFile = "" Then    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & _
               vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & backupPath$ & vbNewLine & vbNewLine
        MsgBox msg, vbExclamation, "|fffd||fffd||fffd|, |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|...":
        ND "backup error", msg
        Exit Function
    Else    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & _
               vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|: " & vbNewLine & backupPath$ & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & _
               FileOrFolderSize(FileLen(backupPath$)) & vbNewLine & vbNewLine, _
               vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": Exit Function
    End If
End Function

Function RestoreLastBackup()
    On Error Resume Next
    LastBackupPath$ = GetSetting(PROJECT_NAME$, "Setup", "LastBackup", "")
    If Trim(LastBackupPath$) = "" Then
        msg = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
              "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If

    If Dir(LastBackupPath$, vbNormal) = "" Then
        msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
              LastBackupPath$ & vbNewLine & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?"
        If MsgBox(msg, vbExclamation + vbYesNo, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") = vbYes Then
            PrevBackup$ = GetSetting(PROJECT_NAME$, "Setup", "PrevBackup", "")
            SaveSetting PROJECT_NAME$, "Setup", "PrevBackup", ""
            SaveSetting PROJECT_NAME$, "Setup", "LastBackup", PrevBackup$
        End If
        Exit Function
    End If

    msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & LastBackupPath$ & vbNewLine & _
          "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & FileOrFolderSize(FileLen(LastBackupPath$)) & vbNewLine & _
          vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?"
    If MsgBox(msg, vbQuestion + vbOKCancel + vbDefaultButton2, _
              "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") = vbCancel Then Exit Function

    PrevBackup$ = GetSetting(PROJECT_NAME$, "Setup", "PrevBackup", "")
    SaveSetting PROJECT_NAME$, "Setup", "PrevBackup", ""
    SaveSetting PROJECT_NAME$, "Setup", "LastBackup", PrevBackup$

    If DEBUG_MODE Then Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & LastBackupPath$
    SwitchToAnotherFile LastBackupPath$, True
End Function

Sub SwitchToAnotherFile(ByVal NewFilePath$, Optional ByVal CancelBackup As Boolean, _
                        Optional ByVal ReplaceGreenWorksheets As Boolean)
    If ThisWorkbook.Path = "" Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|", vbExclamation, _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!":
        ND "update failed", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!" & vbLf & CountersCurrentValues
        Exit Sub
    End If
    On Error Resume Next
    If Not CancelBackup Then
        backupPath$ = BackupThisFile(True)
        If backupPath$ = "" Then    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & _
                   vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & backupPath$ & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
            MsgBox msg$, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!":
            ND "update failed", msg$ & vbLf & CountersCurrentValues
            Exit Sub
        End If
    End If

    OldFilePath$ = ThisWorkbook.FullName
    Application.ScreenUpdating = False: Application.DisplayAlerts = False

    BackupFolderPath$ = Environ("TEMP") & "\Backups\": MkDir BackupFolderPath$: Err.Clear
    tempPath$ = BackupFolderPath$ & "before update " & PROJECT_NAME$ & " " & Format(Now, "YYYY-MM-DD--HH-NN-SS ") & ThisWorkbook.Name
    ThisWorkbook.SaveAs tempPath$    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

    SetAttr OldFilePath$, vbNormal
    Kill OldFilePath$
    FileCopy NewFilePath$, OldFilePath$
    Dim NewVersionWB As Workbook: Set NewVersionWB = Workbooks.Open(OldFilePath$)

    If ReplaceGreenWorksheets Then UpdateWorksheets NewVersionWB, ThisWorkbook

    Application.DisplayAlerts = False
    ThisWorkbook.ChangeFileAccess xlReadOnly
    SetAttr tempPath$, vbNormal
    ' Kill tempPath$
    DeleteProgramCommandBar
    Application.DisplayAlerts = True

    ND "update installed", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbLf & CountersCurrentValues
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbInformation
    Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & OldFilePath$


    Application.DisplayAlerts = True
    Application.OnTime Now + TimeSerial(0, 0, 2), NewVersionWB.Name & "!CreateProgramCommandBar"
    ThisWorkbook.Close False
End Sub

Sub InstallUpdate(ByVal UpdateLink$)
    On Error Resume Next
    msg$ = "File: " & Mid(UpdateLink$, InStrRev(UpdateLink$, "/") + 1)
    ND "update start", msg$
    SaveAddinToPermanentPath
    If ThisWorkbook.Path = "" Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|", _
               vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!":
        ND "update error", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        Exit Sub
    End If
    If ThisWorkbook.ReadOnly Then     ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, Excel |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.", _
               vbExclamation, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|!":
        ND "update error", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|""." & vbNewLine & _
                           "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, Excel |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        Exit Sub
    End If

    Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & UpdateLink$
    Dim res As Boolean

    FilenameForTemporaryFile$ = FWF.temp_filename
    res = FWF.DownLoadFileFromURL(UpdateLink$, FilenameForTemporaryFile$)

    Err.Clear: TemporaryFileSize& = FileLen(FilenameForTemporaryFile$)

    If TemporaryFileSize& < 100 Or Not res Then
        Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & FilenameForTemporaryFile$
        msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & vbNewLine & FTP.GetLastError
        ND "update error", msg
        MsgBox msg, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub
    End If
    Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & FilenameForTemporaryFile$

    msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & UpdateLink$ & vbNewLine & _
          "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & FileOrFolderSize(FileLen(FilenameForTemporaryFile$)) & vbNewLine & _
          vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
    If MsgBox(msg, vbQuestion + vbOKCancel + vbDefaultButton2, _
              "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then Exit Sub

    SwitchToAnotherFile FilenameForTemporaryFile$, , True
End Sub

Function FileOrFolderSize(ByVal s) As String
    Size = Fix(Val(s)):
    Select Case Size
        Case Is < 1000: FileOrFolderSize = Size & " |fffd||fffd||fffd||fffd|"
        Case Is < 10000: FileOrFolderSize = FormatNumber(Size / 1024, 1) & " |fffd||fffd|"
        Case Is < 1000000: FileOrFolderSize = FormatNumber(Size \ 1024, 0) & " |fffd||fffd|"
        Case Is < 10000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 1) & " M|fffd|"
        Case Is < 1000000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 0) & " |fffd||fffd|"
        Case Else: FileOrFolderSize = FormatNumber(Size / 1024 / 1024 / 1024, 1) & " |fffd||fffd|"
    End Select
End Function

Function AutoInstallUpdate()
    On Error Resume Next
    Update$ = CheckForAvailableUpdates
    If Len(Update$) = 0 Then Exit Function
    newVer = Val(Split(Update$, "_v")(1))

    msg$ = " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|" & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ExcelVBA.ru" & vbNewLine & vbNewLine & _
           " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & GetVersionTXT() & vbNewLine & _
           " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & GetVersionTXT(newVer) & vbNewLine & vbNewLine & _
           vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
           vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
           vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & ""
    msg$ = msg$ & vbNewLine & vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & _
           vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    ttl$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|"

    If Update$ Like UPDATE_FOLDER$ & "*" Then
        Select Case MsgBox(msg$, vbInformation + vbYesNoCancel + vbDefaultButton2, ttl$)
            Case vbYes    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                InstallUpdate Update$
            Case vbNo    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ND "update cancelled", CountersCurrentValues
                Exit Function
            Case vbCancel    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                WSP 5, 0
                ND "update deactivated", CountersCurrentValues
        End Select
    End If
End Function

Function CheckForAvailableUpdates(Optional ByRef UpdatesList As Variant) As String
    On Error Resume Next: Kill VERSIONS_INFO_LOCAL_XML_PATH$
    If Not DownloadVersionsInfo Then
        CheckForAvailableUpdates = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.": Exit Function
    End If

    Set xml = CreateObject("Microsoft.XMLDOM")
    If Dir(VERSIONS_INFO_LOCAL_XML_PATH$, vbNormal) = "" Then
        CheckForAvailableUpdates = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.": Exit Function
    End If

    xml.Load VERSIONS_INFO_LOCAL_XML_PATH$
    Set versions = xml.DocumentElement.SelectNodes("Version")

    ReDim arr(0 To versions.Length - 1, 0 To 5)

    VersionNumber& = GetVersion: VersionStableNumber& = GetVersion
    NewestUpdateLink$ = "": NewestStableUpdateLink$ = ""
    CurrentVersionName$ = GetVersionTXT(VersionNumber&)

    For i = 0 To versions.Length - 1
        Set n = versions.Item(versions.Length - i - 1)
        arr(i, 0) = i + 1
        arr(i, 1) = n.SelectSingleNode("Date").Text
        arr(i, 2) = n.Attributes.getNamedItem("name").Text
        arr(i, 3) = n.SelectSingleNode("Number").Text
        arr(i, 4) = n.SelectSingleNode("Description").Text
        arr(i, 5) = n.SelectSingleNode("Link").Text

        ver& = Val(n.SelectSingleNode("Number").Text)
        Link$ = n.SelectSingleNode("Link").Text
        If ver Mod 10 = 0 Then ver = ver + 9    ' |fffd||fffd||fffd||fffd||fffd| alfa, beta |fffd| RC |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If ver& > GetVersion Then UpdatesCount& = UpdatesCount& + 1    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

        If ver& > VersionNumber& Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            VersionNumber& = ver&: If Len(Link$) Then NewestUpdateLink$ = Link$
        End If

        If ver& > VersionStableNumber& Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If ver Mod 10 = 9 Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                VersionStableNumber& = ver&: If Len(Link$) Then NewestStableUpdateLink$ = Link$
            End If
        End If

    Next i

    If IsMissing(UpdatesList) Then
        CheckForAvailableUpdates = IIf(CBool(RSP(5)), NewestStableUpdateLink$, NewestUpdateLink$)
    Else
        CurrentversionDate = ThisWorkbook.BuiltinDocumentProperties("Creation Date")
        CheckForAvailableUpdates = IIf(UpdatesCount&, _
                                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & UpdatesCount& & vbNewLine & "  (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & CurrentVersionName$ & _
                                       " |fffd||fffd| " & CurrentversionDate & ")", _
                                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  " & vbNewLine & "(" & CurrentVersionName$ & _
                                       " |fffd||fffd| " & CurrentversionDate & ")")
        UpdatesList = arr
    End If
End Function

Function VersionsHistory() As String
    On Error Resume Next: Kill VERSIONS_INFO_LOCAL_XML_PATH$
    If Not DownloadVersionsInfo Then
        VersionsHistory = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                          vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                          "- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;" & vbNewLine & _
                          "- |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|;" & vbNewLine & _
                          "- |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & "  (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        Exit Function
    End If
    Set xml = CreateObject("Microsoft.XMLDOM")
    If Dir(VERSIONS_INFO_LOCAL_XML_PATH$, vbNormal) = "" Then
        VersionsHistory = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                          vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If
    xml.Load VERSIONS_INFO_LOCAL_XML_PATH$
    For Each n In xml.DocumentElement.SelectNodes("Version")
        ver = n.Attributes.getNamedItem("name").Text
        If Len(ver) < 12 Then ver = ver & Space(12 - Len(ver))
        txt = txt & "|fffd||fffd||fffd||fffd||fffd||fffd| " & ver & vbTab & "(|fffd||fffd||fffd||fffd|: " & n.SelectSingleNode("Date").Text & _
              ";  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & n.SelectSingleNode("Number").Text & ")"
        descr$ = "   " & Replace(n.SelectSingleNode("Description").Text, vbLf, vbLf & "   ")
        txt = txt & vbNewLine & descr$ & vbNewLine & vbNewLine
    Next n
    txt = Mid(txt, 1, Len(txt) - 4)
    VersionsHistory = IIf(Len(txt), txt, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                                         "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & PROJECT_NAME$ & "|fffd|")
End Function

Function DownloadVersionsInfo() As Boolean
    If GetURLstatus(UPDATE_FOLDER$) <> "403" Then    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If DEBUG_MODE Then Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", UPDATE_FOLDER$
        Exit Function
    End If

    If Not FWF.DownLoadFileFromURL(UPDATE_VERSIONS_XML$, VERSIONS_INFO_LOCAL_XML_PATH$) Then    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML
        If DEBUG_MODE Then Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML", UPDATE_VERSIONS_XML$
        Exit Function
    End If
    DownloadVersionsInfo = True
End Function

Sub UploadNewVersion(ByVal LocalFilename$)
    On Error Resume Next: Err.Clear
    UpdateFolder$ = "updates/" & PROJECT_NAME$ & "/"
    Dim Link$

    If Not Application.Run("'CommonFunctions.xla'!Ready") Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        Exit Sub
    End If

    Link$ = Application.Run("'CommonFunctions.xla'!Publish_Update", PROJECT_NAME$, _
                            UpdateFolder$, VERSIONS_INFO_LOCAL_XML_PATH$, VERSIONS_XML_FILENAME$)

    If DEBUG_MODE Then Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Link$

    If Len(LocalFilename$) Then
        Link$ = "": Link$ = Application.Run("'CommonFunctions.xla'!Publish_Update", PROJECT_NAME$, _
                                            UpdateFolder$, LocalFilename$)
        If Len(Link$) = 0 Then
            If DEBUG_MODE Then Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| FTP: "
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| FTP" & vbNewLine, vbExclamation, _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            Exit Sub
        End If
        If DEBUG_MODE Then Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Link$
        MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & PROJECT_NAME$ & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! " & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd|: " & Link$, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub

Sub UploadNewUpdate(ByVal VersionName$, ByVal VersionNumber&, ByVal Description$, Optional ByVal PublishComment As Boolean)
    On Error Resume Next
    NewFilename$ = PROJECT_NAME$ & "_v" & VersionNumber& & "." & _
                   Split("." & ThisWorkbook.Name, ".")(UBound(Split("." & ThisWorkbook.Name, ".")))
    Link$ = UPDATE_FOLDER$ & NewFilename$
    FullFilename$ = Environ("TEMP") & "\" & NewFilename$
    On Error Resume Next: Kill FullFilename$
    ThisWorkbook.Names("fr").Delete
    ThisWorkbook.SaveCopyAs FullFilename$
    ProtectedFilename$ = ProtectVBA(FullFilename$)
    If ProtectedFilename$ = "" Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If
    DownloadVersionsInfo
    AddNewVersionInfo2XML VersionName$, VersionNumber&, Description$, Link$
    UploadNewVersion ProtectedFilename$    'FullFilename$
    ND "update upload", "|fffd||fffd||fffd||fffd||fffd||fffd|: " & VersionName$ & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Description$

    If Not PublishComment Then Exit Sub
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ExcelVBA.ru
    URL$ = "http://ExcelVBA.ru/programmes/" & PROJECT_NAME$

    If Not Application.Run("'CommonFunctions.xla'!Ready") Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        Exit Sub
    End If

    Link$ = Application.Run("'CommonFunctions.xla'!CreateAndPublishComment", PROJECT_NAME$, URL$, VersionName$, VersionNumber&, Description$)
End Sub

Function CreateUpdateXMLfile()
    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        .appendChild .createProcessingInstruction("xml", "version='1.0' encoding='windows-1251'")
        Set rootnode = .appendChild(.createElement("Program"))
        rootnode.appendChild(.createElement("Name")).Text = PROJECT_NAME$
        rootnode.appendChild(.createElement("PublishDate")).Text = Date
        .Save VERSIONS_INFO_LOCAL_XML_PATH$
    End With
End Function

Sub AddNewVersionInfo2XML(ByVal VersionName$, ByVal VersionNumber&, ByVal Description$, ByVal Link$)
    On Error Resume Next
    Set xml = CreateObject("Microsoft.XMLDOM")
    If Dir(VERSIONS_INFO_LOCAL_XML_PATH$, vbNormal) = "" Then CreateUpdateXMLfile
    With xml
        .Load VERSIONS_INFO_LOCAL_XML_PATH$
        Set rootnode = .DocumentElement

        For Each node In .DocumentElement.SelectNodes("Version")
            If node.SelectSingleNode("Number").Text = VersionNumber& Then
                rootnode.RemoveChild node    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
        Next
        With rootnode.appendChild(xml.createElement("Version"))
            .Attributes.setNamedItem(xml.createAttribute("name")).Text = VersionName$
            .appendChild(xml.createElement("Number")).Text = VersionNumber&
            .appendChild(xml.createElement("Date")).Text = Date
            .appendChild(xml.createElement("Description")).Text = Description$
            .appendChild(xml.createElement("Link")).Text = Link$
        End With
        .Save VERSIONS_INFO_LOCAL_XML_PATH$
    End With
End Sub

Function GetOldVersionDescription(ByVal VersionNumber&) As String
    On Error Resume Next
    If Dir(VERSIONS_INFO_LOCAL_XML_PATH$, vbNormal) = "" Then Exit Function
    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        .Load VERSIONS_INFO_LOCAL_XML_PATH$
        Set rootnode = .DocumentElement

        For Each node In .DocumentElement.SelectNodes("Version")
            If node.SelectSingleNode("Number").Text = VersionNumber& Then
                GetOldVersionDescription = node.SelectSingleNode("Description").Text
                Exit Function
            End If
        Next
    End With
    Set xml = Nothing
End Function


' ============================================ MODULE ReplaceSheet =======================================
Sub UpdateWorksheets(ByRef NewWorkbook As Workbook, ByRef OldWorkbook As Workbook)
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| NewWorkbook, |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| OldWorkbook
    ' (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)

    On Error Resume Next
    Const TempWorksheetName$ = "Temporary Worksheet"
    Dim newsh As Worksheet, oldsh As Worksheet, newIsAddin As Boolean, oldIsAddin As Boolean

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    newIsAddin = NewWorkbook.IsAddin: oldIsAddin = OldWorkbook.IsAddin
    NewWorkbook.IsAddin = False: OldWorkbook.IsAddin = False

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    newActiveSheet$ = NewWorkbook.ActiveSheet.CodeName

    ' If NewWorkbook.Worksheets.Count = 1 Then
    NewWorkbook.Worksheets.Add(NewWorkbook.Worksheets(1)).Name = TempWorksheetName$

    For Each newsh In NewWorkbook.Worksheets    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        ' |fffd| |fffd||fffd||fffd||fffd||fffd| NewWorkbook |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If newsh.Tab.Color = vbGreen Then
            Set oldsh = Nothing: Set oldsh = GetWorksheetByCodename(OldWorkbook, newsh.CodeName)
            If Not oldsh Is Nothing Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                res = ReplaceWorksheet(newsh, oldsh)
                'Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & oldsh.codename & "|fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & res
            End If
        End If
    Next newsh

    NewWorkbook.Worksheets(TempWorksheetName$).Delete
    GetWorksheetByCodename(NewWorkbook, newActiveSheet$).Activate

    NewWorkbook.IsAddin = newIsAddin: OldWorkbook.IsAddin = oldIsAddin
    Application.DisplayAlerts = True
End Sub

Function ReplaceWorksheet(ByRef WhatSheet As Worksheet, ByRef ReplaceWith As Worksheet) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| WhatSheet |fffd||fffd| |fffd||fffd||fffd||fffd| ReplaceWith
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    appDA = Application.DisplayAlerts: Application.DisplayAlerts = False
    Dim shBefore As Worksheet: Set shBefore = WhatSheet.Previous
    WhatSheet.Delete
    ReplaceWith.Copy , shBefore
    ReplaceWorksheet = Err = 0
    Application.DisplayAlerts = appDA
End Function

Function GetWorksheetByCodename(ByVal WB As Workbook, ByVal CodeName As String) As Worksheet
    Dim sh As Worksheet
    For Each sh In WB.Worksheets
        If sh.CodeName = CodeName Then Set GetWorksheetByCodename = sh: Exit Function
    Next sh
End Function

Function Add_Control(ByRef Comm_Bar, ByVal ControlType As CONTROL_TYPES, ByVal B_Face As Integer, _
                     ByVal On_Action As String, ByVal B_Caption As String, _
                     Optional ByVal Button_Style As MsoButtonStyle = msoButtonIcon, _
                     Optional ByVal Begin_Group As Boolean = False, _
                     Optional Tag = "") As CommandBarControl
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| Comm_Bar, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    On Error Resume Next
    Set Add_Control = Comm_Bar.Controls.Add(Type:=ControlType, Temporary:=True)       ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    With Add_Control
        If B_Face > 0 And ControlType = ct_BUTTON Then .FaceId = B_Face    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(On_Action) Then
            .Tag = "'" & ThisWorkbook.Name & "'!" & On_Action & "\\\" & Tag:
            .OnAction = "RunMacroFromButton"
        End If
        .Caption = B_Caption    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .BeginGroup = Begin_Group    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        If ControlType = ct_BUTTON Then .Style = Button_Style
    End With
End Function

Private Sub RunMacroFromButton()
    On Error Resume Next
    Macro$ = Split(Application.CommandBars.ActionControl.Tag, "\\\")(0)
    param$ = Split(Application.CommandBars.ActionControl.Tag, "\\\")(1)
    If Not MU_ Then If Len(param$) > 0 Then Run Macro$, param$ Else Run Macro$
End Sub

Function GetCommandBar(ByVal CommandBarName As String, Optional ByVal Clean As Boolean = False, _
                       Optional ByVal Position As MsoBarPosition = msoBarTop) As CommandBar
    On Error Resume Next: Err.Clear
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set GetCommandBar = Application.CommandBars(CommandBarName)
    If Err.Number Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
        Set GetCommandBar = Application.CommandBars.Add(CommandBarName, Position, False, True)
    End If
    If Clean Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
        For Each cbc In GetCommandBar.Controls: cbc.Delete: Next
    End If
    GetCommandBar.Visible = True    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Function

Function DeleteProgramCommandBar()
    On Error Resume Next: GetCommandBar(PROJECT_NAME).Visible = False
End Function

Function SetIsAddinAsFalse()
    On Error Resume Next: ThisWorkbook.IsAddin = False
End Function
Function SetIsAddinAsTrue()
    On Error Resume Next: ThisWorkbook.IsAddin = True
End Function

'Sub ComboChanged()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    On Error Resume Next
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Application.CommandBars.ActionControl.Tag
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Application.CommandBars.ActionControl.Text
'    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & """", _
     '           vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd| """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & """"
'End Sub
'Sub AdditionalMacros()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    On Error Resume Next
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Application.CommandBars.ActionControl.Tag
'    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| = """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & """", vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'End Sub


Function MU_() As Boolean
    On Error Resume Next: Enable_AccessVBOM
    Err.Clear: X = ThisWorkbook.VBProject.VBComponents.Count
    MU_ = ((Err = 0) And Not TrueDeveloper)
    If MU_ Then
        CreateObject("wscript.Shell").Run BREACH_EULA_HYPERLINK$
        If Not TrueDeveloper Then
            ND "notification", ChrW(1057) & ChrW(1085) & ChrW(1103) & ChrW(1090) & ChrW(32) & ChrW(1087) & ChrW(1072) & ChrW(1088) & _
                               ChrW(1086) & ChrW(1083) & ChrW(1100) & ChrW(32) & ChrW(1089) & ChrW(32) & ChrW(1087) & ChrW(1088) & ChrW(1086) & ChrW(1077) & _
                               ChrW(1082) & ChrW(1090) & ChrW(1072) & ChrW(32) & ChrW(86) & ChrW(66) & ChrW(65)
            Application.DisplayAlerts = False: AddinAutoRun True
            FilePath$ = ThisWorkbook.FullName: ThisWorkbook.ChangeFileAccess xlReadOnly
            SetAttr FilePath$, vbNormal
            Kill FilePath$
            If DEBUG_MODE Then Debug.Print Now, ChrW(1059) & ChrW(1076) & ChrW(1072) & ChrW(1083) & ChrW(1077) & ChrW(1085) & ChrW(1080) & _
                                                ChrW(1077) & ChrW(32) & ChrW(1087) & ChrW(1088) & ChrW(1086) & ChrW(1075) & ChrW(1088) & ChrW(1072) & ChrW(1084) & ChrW(1084) & _
                                                ChrW(1099) & ChrW(32) & ChrW(1079) & ChrW(1072) & ChrW(1074) & ChrW(1077) & ChrW(1088) & ChrW(1096) & ChrW(1077) & ChrW(1085) & ChrW(1086) & ChrW(58) & ChrW(32) & FilePath$
            Application.DisplayAlerts = True
            ThisWorkbook.Close False
        End If
    End If
End Function

Sub Enable_AccessVBOM()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| VBA
    On Error Resume Next
    key$ = "HKEY_CURRENT_USER\Software\Microsoft\Office\" & Application.Version & "\Excel\Security\AccessVBOM"
    CreateObject("WScript.Shell").RegWrite key$, 1, "REG_DWORD"
End Sub

Function InternetConnected() As Boolean
    On Error Resume Next
    If Now - LIAT > 2 / 24 Then If IAEC >= 2 Then IAEC = 1
    If IAEC >= 2 Then Exit Function
    InternetConnected = Ping("8.8.8.8")
    If Not InternetConnected Then IAEC = IAEC + 1 Else IAEC = 0
    LIAT = Now
End Function

Function PIBL_() As Boolean
    On Error Resume Next
    If Not InternetConnected Then Exit Function
    Dim xmlhttp As New WinHttpRequest
    xmlhttp.Open "POST", BL_HYPERLINK$, True
    xmlhttp.setRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"
    Dim POST() As Byte, PostData$
    PostData = PostData & "&addin=" & RussianStringToURLEncode(PROJECT_NAME$)
    PostData = PostData & "&HID=" & RussianStringToURLEncode(HID)
    PostData = PostData & "&code=" & RussianStringToURLEncode(AC_$)
    POST = StrConv(PostData, vbFromUnicode)
    xmlhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    xmlhttp.send (POST): DoEvents

    If xmlhttp.WaitForResponse(2) Then
        statusText = xmlhttp.statusText
        StatusCode = Val(xmlhttp.Status)
        response$ = xmlhttp.responsetext
    Else
        StatusCode = 408
    End If
    Set xmlhttp = Nothing
    Select Case StatusCode
        Case 404
            If DEBUG_MODE Then Debug.Print Now, response$
            Exit Function
        Case 408
            ND "timeout", ChrW(67) & ChrW(97) & ChrW(110) & ChrW(39) & ChrW(116) & ChrW(32) & ChrW(99) & ChrW(104) & ChrW(101) & ChrW(99) & ChrW(107) & ChrW(32) & ChrW(98) & ChrW(108) & ChrW(97) & ChrW(99) & ChrW(107) & ChrW(32) & ChrW(108) & ChrW(105) & ChrW(115) & ChrW(116)
            If DEBUG_MODE Then Debug.Print Now, response$
            Exit Function
        Case 423
            action$ = statusText
            If DEBUG_MODE Then Debug.Print Now, statusText
            PIBL_ = True
            ND ChrW(98) & ChrW(108) & ChrW(97) & ChrW(99) & ChrW(107) & ChrW(32) & ChrW(108) & ChrW(105) & ChrW(115) & ChrW(116), "|fffd||fffd||fffd|: " & StatusCode & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & statusText & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & response$
            PA_ action$
            If Not actions$ Like "*silent*" Then
                If Len(response$) Then MsgBox response$, vbExclamation, ChrW(1057) & ChrW(1086) & ChrW(1086) & ChrW(1073) & ChrW(1097) & ChrW(1077) & ChrW(1085) & ChrW(1080) & ChrW(1077) & ChrW(32) & ChrW(1086) & ChrW(1090) & ChrW(32) & ChrW(1088) & ChrW(1072) & ChrW(1079) & ChrW(1088) & ChrW(1072) & ChrW(1073) & ChrW(1086) & ChrW(1090) & ChrW(1095) & ChrW(1080) & ChrW(1082) & ChrW(1072) & ChrW(32) & ChrW(1087) & ChrW(1088) & ChrW(1086) & ChrW(1075) & ChrW(1088) & ChrW(1072) & ChrW(1084) & ChrW(1084) & ChrW(1099) & ChrW(32) & ChrW(171) & PROJECT_NAME$ & ChrW(187)
            End If
        Case Else
    End Select
End Function

Function PA_(ByVal actions$) As Boolean
    On Error Resume Next: Dim showEULA As Boolean
    If actions$ Like "*eula*" Then
        CreateObject("wscript.Shell").Run BREACH_EULA_HYPERLINK$
        showEULA = True
    End If

    If actions$ Like "*cancel*" Or actions$ Like "*unreg*" Then
        ND ChrW(99) & ChrW(108) & ChrW(101) & ChrW(97) & ChrW(114) & ChrW(32) & ChrW(114) & ChrW(101) & ChrW(103) & ChrW(105) & ChrW(115) & ChrW(116) & ChrW(114) & ChrW(97) & ChrW(116) & ChrW(105) & ChrW(111) & ChrW(110), ChrW(1055) & ChrW(1086) & ChrW(32) & ChrW(1082) & ChrW(1086) & ChrW(1084) & ChrW(1072) & ChrW(1085) & ChrW(1076) & ChrW(1077) & ChrW(32) & ChrW(1089) & ChrW(32) & ChrW(1089) & ChrW(1077) & ChrW(1088) & ChrW(1074) & ChrW(1077) & ChrW(1088) & ChrW(1072)
        RegistryInfo "": SP_FILE ""
        RE_$ " ": AC_$ "-"
    End If

    If actions$ Like "*uninstall*" Then
        ND "uninstall", ChrW(1055) & ChrW(1086) & ChrW(32) & ChrW(1082) & ChrW(1086) & ChrW(1084) & ChrW(1072) & ChrW(1085) & ChrW(1076) & ChrW(1077) & ChrW(32) & ChrW(1089) & ChrW(32) & ChrW(1089) & ChrW(1077) & ChrW(1088) & ChrW(1074) & ChrW(1077) & ChrW(1088) & ChrW(1072)
        If Not TrueDeveloper Then
            If Not showEULA Then If Not actions$ Like "*silent*" Then CreateObject("wscript.Shell").Run BREACH_EULA_HYPERLINK$
            Application.DisplayAlerts = False: AddinAutoRun True
            FilePath$ = ThisWorkbook.FullName: ThisWorkbook.ChangeFileAccess xlReadOnly
            SetAttr FilePath$, vbNormal
            Kill FilePath$
            If DEBUG_MODE Then Debug.Print Now, ChrW(1059) & ChrW(1076) & ChrW(1072) & ChrW(1083) & ChrW(1077) & ChrW(1085) & ChrW(1080) & ChrW(1077) & _
                                                ChrW(32) & ChrW(1087) & ChrW(1088) & ChrW(1086) & ChrW(1075) & ChrW(1088) & ChrW(1072) & ChrW(1084) & ChrW(1084) & ChrW(1099) & ChrW(32) & _
                                                ChrW(1079) & ChrW(1072) & ChrW(1074) & ChrW(1077) & ChrW(1088) & ChrW(1096) & ChrW(1077) & ChrW(1085) & ChrW(1086) & ChrW(58) & ChrW(32) & FilePath$
            Application.DisplayAlerts = True
            ThisWorkbook.Close False
        End If
    End If
End Function

Public Function Ping(ByVal ComputerName As String) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Dim oPingResult As Variant
    For Each oPingResult In GetObject("winmgmts://./root/cimv2").ExecQuery _
        ("SELECT * FROM Win32_PingStatus WHERE Address = '" & ComputerName & "'")
        If IsObject(oPingResult) Then
            If oPingResult.StatusCode = 0 Then
                Ping = True        'Debug.Print "ResponseTime", oPingResult.ResponseTime
                Exit Function
            End If
        End If
    Next
End Function

' =============================== new functions ===============================
Sub DeleteFileBlock()
    On Error Resume Next
    key$ = "HKEY_CURRENT_USER\Software\Microsoft\Office\14.0\Excel\Security\FileBlock\"
    arr = Array("XL2Macros", "XL2Worksheets", "XL3Macros", "XL3Worksheets", _
                "XL4Macros", "XL4Workbooks", "XL4Worksheets")
    For Each Item In arr
        CreateObject("WScript.Shell").RegWrite key$ & Item, 0, "REG_DWORD"
    Next
End Sub

Function TextEncode(ByVal txt$) As String: On Error Resume Next: res$ = EnDeCrypt(txt, , HID): For i = 1 To Len(res): letter$ = Hex(Asc(Mid(res$, i, 1))): TextEncode = TextEncode & IIf(Len(letter$) = 1, "0", "") & letter$: Next: End Function
Function TextDecode(ByVal txt$) As String: On Error Resume Next: For i = 1 To Len(txt) - 1 Step 2: res$ = res$ & Chr(Val("&H" & Mid(txt, i, 2))): Next: TextDecode = EnDeCrypt(res, , HID): End Function

Function cmdEncrypt$(txt)
    On Error Resume Next
    pass$ = HID: Randomize Second(Now)
    d = Fix(98 * Rnd() + 1): cmdEncrypt$ = IIf(Len(Hex(d)) = 1, "0", "") & Hex(d)
    For i = 1 To Len(txt)
        r = Asc(Mid(txt, i, 1)) Xor CInt(2 * d * Abs(Sin(3 * i))) + Val(Mid(pass$, 2 + i Mod 10, 1))
        cmdEncrypt$ = cmdEncrypt$ & IIf(Len(Hex(r)) = 1, "0", "") & Hex(r)
    Next
End Function

Function cmdDisplay$(txt)
    On Error Resume Next
    pass$ = HID: d = Val("&H" & Mid(txt, 1, 2))
    For i = 2 To Len(txt) / 2
        letter = Val("&H" & Mid(txt, 2 * i - 1, 2))
        cmdDisplay$ = cmdDisplay$ & Chr(letter Xor CInt(2 * d * Abs(Sin(3 * (i - 1)))) + Val(Mid(pass$, 2 + (i - 1) Mod 10, 1)))
    Next
End Function

Sub test33333333333333333333333333()
    txt = "MaxPriceConfigsCount=7=100"
    txt2 = "MaxPriceConfigsCount=5=100"
    a = cmdEncrypt$(txt)
    A2 = cmdEncrypt$(txt2)
    Debug.Print cmdDisplay$(a), a, Len(a)
    Debug.Print cmdDisplay$(A2), A2, Len(A2)
End Sub


' =============================== VBA Protection ========================================================

Function ProtectVBA(ByVal SourceFile$) As String
    On Error Resume Next: Err.Clear
    If SourceFile$ = "" Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!": Exit Function

    ProgramPath$ = Environ("ProgramFiles") & "\Protect VBA\ProtectVBA.exe"
    If Dir(ProgramPath$, vbNormal) = "" Then Exit Function    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    folder$ = "D:\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\ProtectVBA\"
    If Dir(folder$, vbDirectory) = "" Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & folder$ & "": Exit Function
    For Each file In FilenamesCollection(folder$)
        Kill file
    Next
    If FilenamesCollection(folder$).Count > 0 Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ProtectVBA"

    Filename$ = Dir(SourceFile$)
    TemporaryFilename$ = folder$ & Filename$
    FileCopy SourceFile$, TemporaryFilename$
    If Dir(TemporaryFilename$) = "" Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & Filename$ & "": Exit Function
    CreateObject("wscript.shell").Run """" & ProgramPath$ & """", , True

    Kill TemporaryFilename$
    If FilenamesCollection(folder$).Count = 0 Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|": Exit Function

    NewFile$ = FilenamesCollection(folder$)(1)
    Name NewFile$ As folder$ & Filename$

    If Dir(folder$ & Filename$) = "" Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & Filename$ & "": Exit Function

    ProtectVBA = folder$ & Filename$
End Function




Attribute VB_Name = "mod_MenuFunction"
'---------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd|    : CreateMenu
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 08.03.2010
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Excel, Word, CorelDRAW. |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' http://excelvba.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| WebMoney |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: R318574877619
'---------------------------------------------------------------------------------------

Public Const FieldCaption$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" & vbLf & " " & vbLf & _
       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|Enter|fffd|"

Sub CreateProgramCommandBar()
    On Error Resume Next:
    Application.ScreenUpdating = False
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set AddinMenu = GetCommandBar(PROJECT_NAME, True)

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

    With Add_Control(AddinMenu, ct_TEXTBOX, 0, "SearchText", FieldCaption$, , True, "txt")
        .Width = 150
        .OnAction = "SearchText"
    End With
    Add_Control AddinMenu, ct_BUTTON, 342, "SearchText", "|fffd||fffd||fffd||fffd||fffd|    ", msoButtonCaption     ', True

    Set subMenu1 = Add_Control(AddinMenu, ct_POPUP, 0, "", " &|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , True)
    Add_Control subMenu1, ct_BUTTON, 232, "DeleteResultsSheet", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption

    If CurrentSheetOnly Then
        Add_Control(subMenu1, ct_BUTTON, 317, "SetOption_SearchAllSheets", _
                    "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True).TooltipText = _
                    "123"
    Else
        Add_Control(subMenu1, ct_BUTTON, 53, "SetOption_SearchCurrentSheetOnly", _
                    "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True).TooltipText = _
                    "123"
    End If

     Add_Control subMenu1, ct_BUTTON, 352, "RedNumbers", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True
    Add_Control subMenu1, ct_BUTTON, 342, "ClearCF", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption    ', True
   
   If Developer Then
        Add_Control subMenu1, ct_BUTTON, 271, "BackupThisFile", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True
    End If


    ' Add_Control AddinMenu, ct_BUTTON, 548, "ShowSettingsPage", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & PROJECT_NAME$, , True
    Add_Control AddinMenu, ct_BUTTON, 487, "ShowMainForm", "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."    ', , True
    Application.ScreenUpdating = True
End Sub


Function CurrentSheetOnly() As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    CurrentSheetOnly = CBool(GetSetting(Application.Name, PROJECT_NAME, "CurrentSheetOnly", False))
End Function


' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetOption_SearchAllSheets()
    SaveSetting Application.Name, PROJECT_NAME, "CurrentSheetOnly", False

    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = 0.3    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ = "'" & ThisWorkbook.Name & "'!CreateProgramCommandBar"    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 0.3 |fffd||fffd||fffd|.
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ = Replace(Format(CDbl(TimeSerial(0, 0, 1)) * |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, "0.000000000"), ",", ".")
    Macro = "ON.TIME(NOW()+" & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ & ", """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ & """)"    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ExecuteExcel4Macro Macro
End Sub

Sub SetOption_SearchCurrentSheetOnly()
    SaveSetting Application.Name, PROJECT_NAME, "CurrentSheetOnly", True

    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = 0.3    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ = "'" & ThisWorkbook.Name & "'!CreateProgramCommandBar"      ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 0.3 |fffd||fffd||fffd|.
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ = Replace(Format(CDbl(TimeSerial(0, 0, 1)) * |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, "0.000000000"), ",", ".")
    Macro = "ON.TIME(NOW()+" & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ & ", """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$ & """)"    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ExecuteExcel4Macro Macro
End Sub


Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' "{-jYT
' "{-jYH
' yJ]j
' yJ]j
' )^"p

INQUEST-PP=macro
