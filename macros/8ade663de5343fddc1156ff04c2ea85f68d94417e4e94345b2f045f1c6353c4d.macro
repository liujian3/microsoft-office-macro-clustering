Attribute VB_Name = "Module1"
'This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/.

Option Explicit

Public Const offset_constant As Long = 21

Const epsilon As Double = 0.0001
Const width_limit As Double = 300
Const height_limit As Double = 300


Function CheckWorksheetExistence(sheetName As String) As Boolean
    
    Dim WorksheetExists As Boolean
    WorksheetExists = False
    Dim Sht As Worksheet
    For Each Sht In ThisWorkbook.Worksheets
        If (Sht.Name = sheetName) Then
            WorksheetExists = True
        End If
    Next Sht
    
    CheckWorksheetExistence = WorksheetExists
End Function
Sub SetupConsoleWorksheet()

    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("BPP Solver Console")
    
    Dim reply As Integer
    If WorksheetExists = False Then
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "BPP Solver Console"
    End If
    
    ThisWorkbook.Worksheets("BPP Solver Console").Activate
    
    'Problem parameters
    
    Cells(1, 1).Value = "Sequence"
    Cells(1, 1).Select
    Selection.Font.Bold = True
    
    Cells(1, 2).Value = "Parameter"
    Cells(1, 3).Value = "Value"
    Cells(1, 4).Value = "Remarks"
    
    Range(Cells(1, 1), Cells(1, 4)).Select
    Selection.Interior.ColorIndex = 1
    Selection.Font.ColorIndex = 2
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    'GIS License
    
    Cells(2, 1).Value = "1.Items"
    Cells(2, 1).Select
    Selection.Font.Bold = True
    
    Cells(2, 2).Value = "Number of types of items"
    
    Cells(2, 3).Validation.Delete
    With Cells(2, 3).Validation
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="1", Formula2:="100"
        .ErrorMessage = "Please enter an integer from 1 to 100"
    End With
    
    If Cells(2, 3).Value = "" Then
        Cells(2, 3).Value = 1
    End If
    
    Cells(2, 3).Font.ColorIndex = 2
    Cells(2, 3).Interior.ColorIndex = 50
    Cells(2, 4).Value = "[1,100]"
    
    Range(Cells(2, 1), Cells(2, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Cells(4, 1).Value = "2.Bins"
    Cells(4, 1).Select
    Selection.Font.Bold = True
    
    Cells(4, 2).Value = "Number of types of bins"
    Cells(4, 3).Validation.Delete
    With Cells(4, 3).Validation
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="1", Formula2:="10"
        .ErrorMessage = "Please enter an integer from 1 to 10"
    End With
    
    If Cells(4, 3).Value = "" Then
        Cells(4, 3).Value = 1
    End If
    
    Cells(4, 3).Font.ColorIndex = 2
    Cells(4, 3).Interior.ColorIndex = 50
    Cells(4, 4).Value = "[1,10]"
    
    Range(Cells(4, 1), Cells(4, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Cells(6, 1).Value = "3.Solution"
    Cells(6, 1).Select
    Selection.Font.Bold = True
    
    Cells(6, 2).Value = "Guillotine cuts?"
    
    Cells(6, 3).Validation.Delete
    With Cells(6, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(6, 3).Value = "No"
    Cells(6, 3).Font.ColorIndex = 2
    Cells(6, 3).Interior.ColorIndex = 50

    Range(Cells(6, 1), Cells(6, 4)).Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    'Visualization parameters
    
    Cells(8, 1).Value = "4.Optional - Visualization"
    Cells(8, 1).Select
    Selection.Font.Bold = True
    
    Cells(8, 2).Value = "Item labels"
    
    Cells(8, 3).Validation.Delete
    With Cells(8, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(8, 3).Value = "Yes"
    Cells(8, 3).Font.ColorIndex = 2
    Cells(8, 3).Interior.ColorIndex = 50

    Cells(9, 2).Value = "Bin labels"
        
    Cells(9, 3).Validation.Delete
    With Cells(9, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(9, 3).Value = "No"
    Cells(9, 3).Font.ColorIndex = 2
    Cells(9, 3).Interior.ColorIndex = 50
    
    Cells(10, 2).Value = "Zoom"
    
    Cells(10, 3).Validation.Delete
    With Cells(10, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Automatic, None"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(10, 3).Value = "Automatic"
    Cells(10, 3).Font.ColorIndex = 2
    Cells(10, 3).Interior.ColorIndex = 50
    
    Range(Cells(8, 1), Cells(10, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    'Algorithmic parameters
    
    Cells(12, 1).Value = "5.Solver"
    Cells(12, 1).Select
    Selection.Font.Bold = True
    
    Cells(12, 2).Value = "First-Fit-Decreasing based on:"
    
    Cells(12, 3).Validation.Delete
    With Cells(12, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Area, Circumference, Height, Width"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(12, 3).Value = "Area"
    Cells(12, 3).Font.ColorIndex = 2
    Cells(12, 3).Interior.ColorIndex = 50
    
    Cells(13, 2).Value = "Show progress on status bar?"
    
    Cells(13, 3).Validation.Delete
    With Cells(13, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(13, 3).Value = "Yes"
    Cells(13, 3).Font.ColorIndex = 2
    Cells(13, 3).Interior.ColorIndex = 50
       
    Cells(13, 4).Value = "" '"May slow down the solution algorithm."
        
    Cells(14, 2).Value = "CPU time limit (seconds)"
    
    Cells(14, 3).Validation.Delete
    With Cells(14, 3).Validation
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreaterEqual, Formula1:="10"
        .ErrorMessage = "Please enter a value greater than or equal to 10 seconds."
    End With
    
    If Cells(14, 3).Value = "" Then
        Cells(14, 3).Value = 60
    End If
    Cells(14, 3).Font.ColorIndex = 2
    Cells(14, 3).Interior.ColorIndex = 50
    
    Cells(14, 4).Value = "At least one second per item."
            
    Range(Cells(12, 1), Cells(14, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Columns("A").AutoFit
    Columns("B").AutoFit
    'Columns("C").AutoFit
    Columns("D").AutoFit
    
    Columns("C").EntireColumn.ColumnWidth = 15
     
    Rows("1").Select
    Selection.Font.Bold = True
    Cells(1, 1).Select
End Sub
Sub SetupItemsWorksheet()
   
    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("1.Items")
    
    Dim reply As Integer
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing item data, and erase bin, solution, and visualization data. Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            ThisWorkbook.Worksheets("1.Items").Delete
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "1.Items"
                        
            WorksheetExists = CheckWorksheetExistence("1.3.Item-Item Compatibility")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("2.Bins")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("2.Bins").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("2.3.Bin-Item Compatibility")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("3.Solution")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("3.Solution").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("4.Visualization")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("4.Visualization").Delete
            End If
            
            Application.DisplayAlerts = True
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "1.Items"
    End If
    
    ThisWorkbook.Worksheets("1.Items").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim formula_delimiter As String
    If InStr(CStr(WorksheetFunction.Pi), ".") > 0 Then
        formula_delimiter = ","
    Else
        formula_delimiter = ";"
    End If
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
    
    Dim formulaText As String
    
    Cells(1, 1).Value = "Item Type ID"
    Cells(1, 2).Value = "Name"
    Cells(1, 3).Value = "Colour / Image file name"
    Cells(1, 4).Value = "Width (x)"
    Cells(1, 5).Value = "Height (y)"
    Cells(1, 6).Value = "Area         "
    Cells(1, 7).Value = "Can be rotated?"
    Cells(1, 8).Value = "Must be packed?"
    Cells(1, 9).Value = "Profit"
    Cells(1, 10).Value = "Number of items"
    
    Range(Cells(1, 1), Cells(1, 10)).Select
    
    Selection.Font.Bold = True
    
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Dim i As Long
    
    For i = 1 To num_item_types
    
        Range(Cells(1 + i, 1), Cells(1 + i, 10)).Select
        Selection.Font.ColorIndex = 2
        Selection.Interior.ColorIndex = 50
        
        If i Mod 2 = 0 Then
            Selection.Interior.TintAndShade = 0.02
        Else
            Selection.Interior.TintAndShade = -0.02
        End If
        
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 16
            .TintAndShade = 0
            .Weight = xlThin
        End With
        
        Cells(1 + i, 1).Value = i
        Cells(1 + i, 1).Font.ColorIndex = 2
        Cells(1 + i, 1).Interior.ColorIndex = 1
        
        Cells(1 + i, 1).FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(1 + i, 1).Address & ")"
        Cells(1 + i, 1).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(1 + i, 2).Value = "Item type " & i
        
        Cells(1 + i, 2).FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(1 + i, 2).Address & ")"
        Cells(1 + i, 2).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(1 + i, 3).Value = ""
        Cells(1 + i, 3).Interior.ColorIndex = (3 + i) Mod 57
        
        Cells(1 + i, 4).NumberFormat = "0.00"
        Cells(1 + i, 4).Value = 1
        
        With Cells(1 + i, 4).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=0
            .ErrorMessage = "Please enter a positive value"
        End With
        
        Cells(1 + i, 5).NumberFormat = "0.00"
        Cells(1 + i, 5).Value = 1
        
        With Cells(1 + i, 5).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=0
            .ErrorMessage = "Please enter a positive value"
        End With
        
        Cells(1 + i, 6).NumberFormat = "0.00"
        Cells(1 + i, 6).Formula = "=" & Cells(1 + i, 4).Address(False, False) & "*" & Cells(1 + i, 5).Address(False, False)
        Cells(1 + i, 6).Interior.ColorIndex = 36
        Cells(1 + i, 6).Font.ColorIndex = 1
        
        With Cells(1 + i, 7).Validation
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        Cells(1 + i, 7).Value = "Yes"
        
        Cells(1 + i, 7).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="No"
        Cells(1 + i, 7).FormatConditions(1).Interior.ColorIndex = 43
        
        With Cells(1 + i, 8).Validation
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Must be packed, May be packed, Do not pack"
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        Cells(1 + i, 8).Value = "Must be packed"
        
        Cells(1 + i, 8).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="May be packed"
        Cells(1 + i, 8).FormatConditions(1).Interior.ColorIndex = 4
        
        Cells(1 + i, 8).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="Do not pack"
        Cells(1 + i, 8).FormatConditions(2).Interior.ColorIndex = 43
        
        Cells(1 + i, 9).NumberFormat = "0.00"
        Cells(1 + i, 9).Value = 0
        
'        Cells(1 + i, 8).FormatConditions.Add Type:=xlExpression, Formula1:="=AND(" & Cells(1 + i, 7).Address & " = " & Chr(34) & "May be packed" & Chr(34) & formula_delimiter & Cells(1 + i, 8).Address & " = 0" & ")"
'        Cells(1 + i, 8).FormatConditions(1).Interior.ColorIndex = 45
        
        With Cells(1 + i, 9).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
            .ErrorMessage = "Please enter a nonnegative value"
        End With
                
        Cells(1 + i, 10).Value = 1
        
        With Cells(1 + i, 10).Validation
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:="0"
            .ErrorMessage = "Please enter a positive integer value"
        End With
    Next i
    
    Cells(2 + num_item_types, 5).Value = "Total area:"
    Cells(2 + num_item_types, 5).Font.Bold = True
    
    Cells(2 + num_item_types, 6).NumberFormat = "0.00"
    Cells(2 + num_item_types, 6).Interior.ColorIndex = 36
    Cells(2 + num_item_types, 6).Font.ColorIndex = 1
    Cells(2 + num_item_types, 6).Formula = "=SUMPRODUCT(" & Cells(2, 6).Address(False, False) & ":" & Cells(1 + num_item_types, 6).Address(False, False) & ", " & Cells(2, 10).Address(False, False) & ":" & Cells(1 + num_item_types, 10).Address(False, False) & ")"
    
    With Cells(2 + num_item_types, 6).Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThick
    End With
    With Cells(2 + num_item_types, 6).Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThick
    End With
    
    ' Display all duplicate values in red
    Dim uv As UniqueValues
    Set uv = Range(Cells(2, 2), Cells(1 + num_item_types, 2)).FormatConditions.AddUniqueValues
    uv.DupeUnique = xlDuplicate
    uv.Interior.ColorIndex = 3
    uv.StopIfTrue = False
    
    Columns("A:K").AutoFit
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(1, 1).Select
End Sub
Sub SetupBinsWorksheet()
   
    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("2.Bins")
    
    Dim reply As Integer
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing bin data, and erase solution data. Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            ThisWorkbook.Worksheets("2.Bins").Delete
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "2.Bins"
            
            WorksheetExists = CheckWorksheetExistence("2.3.Bin-Item Compatibility")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("3.Solution")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("3.Solution").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("4.Visualization")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("4.Visualization").Delete
            End If
            
            Application.DisplayAlerts = True
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "2.Bins"
    End If
    
    ThisWorkbook.Worksheets("2.Bins").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
    
    Dim num_bin_types As Long
    num_bin_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(4, 3).Value
    
    Dim formulaText As String
    
    Cells(1, 1).Value = "Bin Type ID"
    Cells(1, 2).Value = "Name"
    Cells(1, 3).Value = "Width (x)"
    Cells(1, 4).Value = "Height (y)"
    Cells(1, 5).Value = "Area         "
    Cells(1, 6).Value = "May be used?"
    Cells(1, 7).Value = "Cost"
    Cells(1, 8).Value = "Estimated number of bins"
    Cells(1, 9).Value = "Number of bins"
    
    Range(Cells(1, 1), Cells(1, 9)).Select
    
    Selection.Font.Bold = True
    
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Dim i As Long
    
    For i = 1 To num_bin_types
    
        Range(Cells(1 + i, 1), Cells(1 + i, 9)).Select
        Selection.Font.ColorIndex = 2
        Selection.Interior.ColorIndex = 50
        
        If i Mod 2 = 0 Then
            Selection.Interior.TintAndShade = 0.02
        Else
            Selection.Interior.TintAndShade = -0.02
        End If
        
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 16
            .TintAndShade = 0
            .Weight = xlThin
        End With
        
        Cells(1 + i, 1).Value = i
        Cells(1 + i, 1).Font.ColorIndex = 2
        Cells(1 + i, 1).Interior.ColorIndex = 1
        
        Cells(1 + i, 1).FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(1 + i, 1).Address(False, False) & ")"
        Cells(1 + i, 1).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(1 + i, 2).Value = "Bin type " & i
        
        Cells(1 + i, 2).FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(1 + i, 2).Address(False, False) & ")"
        Cells(1 + i, 2).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(1 + i, 3).NumberFormat = "0.00"
        Cells(1 + i, 3).Value = 1
        
        With Cells(1 + i, 3).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=0
            .ErrorMessage = "Please enter a positive value"
        End With
        
        Cells(1 + i, 4).NumberFormat = "0.00"
        Cells(1 + i, 4).Value = 1
        
        With Cells(1 + i, 4).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=0
            .ErrorMessage = "Please enter a positive value"
        End With
        
        Cells(1 + i, 5).NumberFormat = "0.00"
        Cells(1 + i, 5).Formula = "=" & Cells(1 + i, 3).Address(False, False) & "*" & Cells(1 + i, 4).Address(False, False)
        Cells(1 + i, 5).Interior.ColorIndex = 36
        Cells(1 + i, 5).Font.ColorIndex = 1
        
        With Cells(1 + i, 6).Validation
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="May be used, Do not use" 'removed Must be used
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        Cells(1 + i, 6).Value = "May be used"
        
        Cells(1 + i, 6).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="Must be used"
        Cells(1 + i, 6).FormatConditions(1).Interior.ColorIndex = 4
        
        Cells(1 + i, 6).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="Do not use"
        Cells(1 + i, 6).FormatConditions(2).Interior.ColorIndex = 43
        
        Cells(1 + i, 7).NumberFormat = "0.00"
        Cells(1 + i, 7).Value = 1
        
        With Cells(1 + i, 7).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
            .ErrorMessage = "Please enter a nonnegative value"
        End With
        
        Cells(1 + i, 8).Formula = "=ROUNDUP('1.Items'!" & Cells(2 + num_item_types, 6).Address(False, False) & " / (" & Cells(1 + i, 5).Address(False, False) & " * " & num_bin_types & "), 0)"
        Cells(1 + i, 8).Interior.ColorIndex = 36
        Cells(1 + i, 8).Font.ColorIndex = 1
        
        Cells(1 + i, 9).Value = 1
        
        With Cells(1 + i, 9).Validation
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:="0"
            .ErrorMessage = "Please enter a positive integer value"
        End With
    Next i
    
    ' Display all duplicate values in red
    Dim uv As UniqueValues
    Set uv = Range(Cells(2, 2), Cells(1 + num_bin_types, 2)).FormatConditions.AddUniqueValues
    uv.DupeUnique = xlDuplicate
    uv.Interior.ColorIndex = 3
    uv.StopIfTrue = False
    
    Cells(2 + num_bin_types, 4).Value = "Total area:"
    Cells(2 + num_bin_types, 4).Font.Bold = True
    
    Cells(2 + num_bin_types, 5).NumberFormat = "0.00"
    Cells(2 + num_bin_types, 5).Interior.ColorIndex = 36
    Cells(2 + num_bin_types, 5).Font.ColorIndex = 1
    Cells(2 + num_bin_types, 5).Formula = "=SUMPRODUCT(" & Cells(2, 5).Address(False, False) & ":" & Cells(1 + num_bin_types, 5).Address(False, False) & ", " & Cells(2, 9).Address(False, False) & ":" & Cells(1 + num_bin_types, 9).Address(False, False) & ")"
    
    With Cells(2 + num_bin_types, 5).Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThick
    End With
    With Cells(2 + num_bin_types, 5).Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThick
    End With
    
    
    Columns.AutoFit
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(1, 1).Select
End Sub
Sub SetupItemItemCompatibilityWorksheet()
   
    Dim WorksheetExists As Boolean
    
    WorksheetExists = CheckWorksheetExistence("1.Items")
    If WorksheetExists = False Then
        MsgBox "Worksheet 1.Items must exist for the item-item compatibility worksheet to be setup."
        Exit Sub
    End If
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
    
    If num_item_types = 1 Then
        MsgBox "There should be more than one type of item for the item-item compatibility worksheet to be setup."
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("1.3.Item-Item Compatibility")
    
    Dim reply As Integer
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing item-item compatibility data. Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Delete
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "1.3.Item-Item Compatibility"
                        
            Application.DisplayAlerts = True
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "1.3.Item-Item Compatibility"
    End If
    
    ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Cells(2, 1).Value = "Item Type 1"
    Cells(2, 2).Value = "Item type 2"
    Cells(2, 3).Value = "Compatible?"
    
    Range(Cells(1, 1), Cells(2, 3)).Select
    
    Selection.Font.Bold = True
    
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    k = 3
    For i = 1 To num_item_types
    
        For j = i + 1 To num_item_types
        
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Range(Cells(k, 1), Cells(k, 3)).Select
            Selection.Font.ColorIndex = 2
            
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = 16
                .TintAndShade = 0
                .Weight = xlThin
            End With
            
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 1).Value = ThisWorkbook.Sheets("1.Items").Cells(1 + i, 2).Value
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 1).Font.ColorIndex = 2
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 1).Interior.ColorIndex = 1
            
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 2).Value = ThisWorkbook.Sheets("1.Items").Cells(1 + j, 2).Value
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 2).Font.ColorIndex = 2
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 2).Interior.ColorIndex = 1
            
            With ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 3).Validation
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
                .IgnoreBlank = True
                .InCellDropdown = True
            End With
            Cells(k, 3).Value = "Yes"
            
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 3).Font.ColorIndex = 2
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 3).Interior.ColorIndex = 50
            
            k = k + 1
        
        Next j
    Next i
    
    ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Activate
    
    Range(Cells(1, 3), Cells(k - 1, 3)).Select
    
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="No"
    Selection.FormatConditions(1).Interior.ColorIndex = 43
        
    Columns("A").AutoFit
    Columns("B").AutoFit
    Columns("C").AutoFit
    
    Cells(1, 1).Value = "Two items are compatible if they can be placed into the same bin."
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(1, 1).Select
End Sub

Sub SetupBinItemCompatibilityWorksheet()
   
    Dim WorksheetExists As Boolean
    
    WorksheetExists = CheckWorksheetExistence("1.Items") And CheckWorksheetExistence("2.Bins")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Items and 2.Bins must exist for the bin-item compatibility worksheet to be setup."
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.3.Bin-Item Compatibility")
    Dim reply As Integer
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing bin-item compatibility data. Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Delete
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "2.3.Bin-Item Compatibility"
                        
            Application.DisplayAlerts = True
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "2.3.Bin-Item Compatibility"
    End If
    
    ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
    
    Dim num_bin_types As Long
    num_bin_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(4, 3).Value
    
    Cells(2, 1).Value = "Bin Type"
    Cells(2, 2).Value = "Item type"
    Cells(2, 3).Value = "Compatible?"
    
    Range(Cells(1, 1), Cells(2, 3)).Select
    
    Selection.Font.Bold = True
    
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    k = 3
    For i = 1 To num_bin_types
    
        For j = 1 To num_item_types
        
            ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Range(Cells(k, 1), Cells(k, 3)).Select
            Selection.Font.ColorIndex = 2
            
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = 16
                .TintAndShade = 0
                .Weight = xlThin
            End With
            
            ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Cells(k, 1).Value = ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 2).Value
            ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Cells(k, 1).Font.ColorIndex = 2
            ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Cells(k, 1).Interior.ColorIndex = 1
            
            ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Cells(k, 2).Value = ThisWorkbook.Sheets("1.Items").Cells(1 + j, 2).Value
            ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Cells(k, 2).Font.ColorIndex = 2
            ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Cells(k, 2).Interior.ColorIndex = 1
            
            With ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Cells(k, 3).Validation
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
                .IgnoreBlank = True
                .InCellDropdown = True
            End With
            
            Cells(k, 3).Value = "Yes"
            
            If ((ThisWorkbook.Sheets("1.Items").Cells(1 + j, 4).Value > ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 3).Value) And (ThisWorkbook.Sheets("1.Items").Cells(1 + j, 4).Value > ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 4).Value)) _
             Or ((ThisWorkbook.Sheets("1.Items").Cells(1 + j, 5).Value > ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 3).Value) And (ThisWorkbook.Sheets("1.Items").Cells(1 + j, 5).Value > ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 4).Value)) Then
                Cells(k, 3).Value = "No"
            End If
            
            If ((ThisWorkbook.Sheets("1.Items").Cells(1 + j, 4).Value > ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 3).Value) Or _
               (ThisWorkbook.Sheets("1.Items").Cells(1 + j, 4).Value > ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 4).Value)) And _
               (ThisWorkbook.Sheets("1.Items").Cells(1 + j, 7).Value = "No") Then
                Cells(k, 3).Value = "No"
            End If
            
            ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Cells(k, 3).Font.ColorIndex = 2
            ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Cells(k, 3).Interior.ColorIndex = 50
            
            k = k + 1
        
        Next j
    Next i
    
    ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Activate
    
    Range(Cells(1, 3), Cells(k - 1, 3)).Select
    
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="No"
    Selection.FormatConditions(1).Interior.ColorIndex = 43
        
    Columns("A").AutoFit
    Columns("B").AutoFit
    Columns("C").AutoFit
    
    Cells(1, 1).Value = "A bin is compatible with an item if the item can be placed into the bin."
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(1, 1).Select
End Sub
Sub SetupSolutionWorksheet()
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Items") And CheckWorksheetExistence("2.Bins")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Items and 2.Bins must exist for the solution worksheet to be setup."
        Exit Sub
    End If
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
    
    Dim num_items As Long
    
    num_items = 0
    For i = 1 To num_item_types
        num_items = num_items + ThisWorkbook.Worksheets("1.Items").Cells(1 + i, 10).Value
    Next i
    
    If num_items = 0 Then
        MsgBox "There must be at least one item for the solution worksheet to be setup."
        Exit Sub
    End If
    
    Dim num_bin_types As Long
    num_bin_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(4, 3).Value
    
    Dim num_bins As Long
    
    num_bins = 0
    For i = 1 To num_bin_types
        num_bins = num_bins + ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 9).Value
    Next i
    
    If num_bins = 0 Then
        MsgBox "There must be at least one bin for the solution worksheet to be setup."
        Exit Sub
    End If
        
    'compute the maximum number items that can fit in each bin type

    Dim swap_double As Double
    Dim total_area As Double
    
    Dim item_type_area() As Double
    ReDim item_type_area(1 To num_item_types) As Double
    Dim item_type_number() As Long
    ReDim item_type_number(1 To num_item_types) As Long
    
    For i = 1 To num_item_types
        item_type_area(i) = ThisWorkbook.Worksheets("1.Items").Cells(1 + i, 6).Value
        item_type_number(i) = ThisWorkbook.Worksheets("1.Items").Cells(1 + i, 10).Value
    Next i
    
    Dim bin_type_area() As Double
    ReDim bin_type_area(1 To num_bin_types) As Double
    Dim bin_type_number() As Long
    ReDim bin_type_number(1 To num_bin_types) As Long
    
    For i = 1 To num_bin_types
        bin_type_area(i) = ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 5).Value
        bin_type_number(i) = ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 9).Value
    Next i
    
    Dim max_number_of_items_in_bin_type() As Long
    ReDim max_number_of_items_in_bin_type(1 To num_bin_types) As Long
    
    For i = 1 To num_item_types
        For j = 1 To num_item_types - i
            If item_type_area(j) > item_type_area(j + 1) Then
                swap_double = item_type_area(j)
                item_type_area(j) = item_type_area(j + 1)
                item_type_area(j + 1) = swap_double
                
                k = item_type_number(j)
                item_type_number(j) = item_type_number(j + 1)
                item_type_number(j + 1) = k
            End If
        Next j
    Next i
    
    Dim guillotine_cuts As Boolean
    If ThisWorkbook.Worksheets("BPP Solver Console").Cells(6, 3) = "Yes" Then
        guillotine_cuts = True
    Else
        guillotine_cuts = False
    End If
    
    Dim estimatedTime As Double
    estimatedTime = 0
    
    For i = 1 To num_bin_types
        
        total_area = 0
        max_number_of_items_in_bin_type(i) = 0
        
        For j = 1 To num_item_types
            For k = 1 To item_type_number(j)
                If total_area + item_type_area(j) <= bin_type_area(i) Then
                    total_area = total_area + item_type_area(j)
                    max_number_of_items_in_bin_type(i) = max_number_of_items_in_bin_type(i) + 1
                End If
            Next k
        Next j
        
        If max_number_of_items_in_bin_type(i) < 3 Then max_number_of_items_in_bin_type(i) = 3
        
        estimatedTime = estimatedTime + max_number_of_items_in_bin_type(i) * bin_type_number(i)
    Next i
    estimatedTime = estimatedTime * 0.03
    
    WorksheetExists = CheckWorksheetExistence("3.Solution")
    If WorksheetExists = True Then
        WorksheetExists = CheckWorksheetExistence("4.Visualization")
        If WorksheetExists = True Then
            reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds), overwrite existing solution data, and erase the visualization data. Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
            If reply = vbNo Then
                ThisWorkbook.Worksheets("3.Solution").Activate
                Exit Sub
            Else
                Application.DisplayAlerts = False
            
                ThisWorkbook.Worksheets("4.Visualization").Delete
                
                ThisWorkbook.Worksheets("3.Solution").Delete
                ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "3.Solution"
                
                Application.DisplayAlerts = True
            End If
        Else
            reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds), and overwrite existing solution data. Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
            If reply = vbNo Then
                ThisWorkbook.Worksheets("3.Solution").Activate
                Exit Sub
            Else
                Application.DisplayAlerts = False
            
                ThisWorkbook.Worksheets("3.Solution").Delete
                ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "3.Solution"
                
                Application.DisplayAlerts = True
            End If
        End If
    Else
        reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds). Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        End If
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "3.Solution"
    End If
    
    ThisWorkbook.Worksheets("3.Solution").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    'ActiveSheet.EnableFormatConditionsCalculation = False
    
    Dim bin_count As Long
    Dim formulaText As String
    Dim objectiveFormula As String
    Dim temp_upper_bound As Double
    Dim combinedRange As Range
    
    Dim formula_delimiter As String
    If InStr(CStr(WorksheetFunction.Pi), ".") > 0 Then
        formula_delimiter = ","
    Else
        formula_delimiter = ";"
    End If
    
    objectiveFormula = "="
    Cells(1, 1).Value = "Total net profit:"
    Cells(1, 1).Font.Bold = True
    Cells(1, 2).Font.ColorIndex = 1
    Cells(1, 2).Interior.ColorIndex = 36
    
    Dim offset As Long
    offset = 0
    
    For i = 1 To num_bin_types

        bin_count = ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 9).Value
        
        For j = 1 To bin_count
            
            Cells(5, 1 + offset).Value = "Item count"
            Cells(5, 2 + offset).Value = "Item type name"
            Cells(4, 3 + offset).Value = "Bottom left corner"
            Cells(5, 3 + offset).Value = "x coordinate"
            Cells(5, 4 + offset).Value = "y coordinate"
            Cells(5, 5 + offset).Value = "Rotated?"
            
            Cells(4, 6 + offset).Value = "Cut 1"
            Cells(5, 6 + offset).Value = "Start x coordinate"
            Cells(5, 7 + offset).Value = "Start y coordinate"
            Cells(5, 8 + offset).Value = "End x coordinate"
            Cells(5, 9 + offset).Value = "End y coordinate"
            
            Cells(4, 10 + offset).Value = "Cut 2"
            Cells(5, 10 + offset).Value = "Start x coordinate"
            Cells(5, 11 + offset).Value = "Start y coordinate"
            Cells(5, 12 + offset).Value = "End x coordinate"
            Cells(5, 13 + offset).Value = "End y coordinate"
            
            Cells(5, 14 + offset).Value = "Item type ID"
            Cells(4, 15 + offset).Value = "Top right corner"
            Cells(5, 15 + offset).Value = "x coordinate"
            Cells(5, 16 + offset).Value = "y coordinate"
            Cells(5, 17 + offset).Value = "Can be rotated?"
            Cells(5, 18 + offset).Value = "Area"
            Cells(5, 19 + offset).Value = "Profit"
            
            Range(Cells(4, 3 + offset), Cells(4, 4 + offset)).Select
            With Selection
                .HorizontalAlignment = xlCenter
                .Merge
            End With
            
            Range(Cells(4, 6 + offset), Cells(4, 9 + offset)).Select
            With Selection
                .HorizontalAlignment = xlCenter
                .Merge
            End With
            
            Range(Cells(4, 10 + offset), Cells(4, 13 + offset)).Select
            With Selection
                .HorizontalAlignment = xlCenter
                .Merge
            End With
            
            Range(Cells(4, 15 + offset), Cells(4, 16 + offset)).Select
            With Selection
                .HorizontalAlignment = xlCenter
                .Merge
            End With
            
            Range(Cells(6, 2 + offset), Cells(5 + max_number_of_items_in_bin_type(i), 2 + offset)).Select
            
            With Selection.Validation
              .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="='1.Items'!" & Cells(2, 2).Address & ":" & Cells(1 + num_item_types, 2).Address
              .IgnoreBlank = True
              .InCellDropdown = True
              .ErrorTitle = "Warning"
              .ErrorMessage = "Please select a value from the list available in the selected cell."
              .ShowError = True
            End With
                
            'temp_upper_bound = ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 3).Value
            Range(Cells(6, 3 + offset), Cells(5 + max_number_of_items_in_bin_type(i), 3 + offset)).Select

            With Selection
            
                .Validation.Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
                .Validation.ErrorMessage = "Please enter a nonnegative value"
                
'                .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=temp_upper_bound
'                .FormatConditions(1).Interior.Pattern = xlNone
'                .FormatConditions(1).Interior.ColorIndex = 3
'                .FormatConditions(1).StopIfTrue = True
                
            End With

            'temp_upper_bound = ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 4).Value
            Range(Cells(6, 4 + offset), Cells(5 + max_number_of_items_in_bin_type(i), 4 + offset)).Select

            With Selection
            
                .Validation.Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
                .Validation.ErrorMessage = "Please enter a nonnegative value"
                
'                .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=temp_upper_bound
'                .FormatConditions(1).Interior.Pattern = xlNone
'                .FormatConditions(1).Interior.ColorIndex = 3
'                .FormatConditions(1).StopIfTrue = True
                
            End With
            
            'temp_upper_bound = ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 3).Value
            Range(Cells(6, 15 + offset), Cells(5 + max_number_of_items_in_bin_type(i), 15 + offset)).Select
            
            With Selection
                
                .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
                .FormatConditions(1).Interior.Pattern = xlNone
                .FormatConditions(1).Interior.ColorIndex = 36
                .FormatConditions(1).StopIfTrue = True
    
'                .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=temp_upper_bound
'                .FormatConditions(2).Interior.Pattern = xlNone
'                .FormatConditions(2).Interior.ColorIndex = 3
'                .FormatConditions(2).StopIfTrue = True
            
            End With
            
            'temp_upper_bound = ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 4).Value
            Range(Cells(6, 16 + offset), Cells(5 + max_number_of_items_in_bin_type(i), 16 + offset)).Select
            
            With Selection
                            
                .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
                .FormatConditions(1).Interior.Pattern = xlNone
                .FormatConditions(1).Interior.ColorIndex = 36
                .FormatConditions(1).StopIfTrue = True
    
'                .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=temp_upper_bound
'                .FormatConditions(2).Interior.Pattern = xlNone
'                .FormatConditions(2).Interior.ColorIndex = 3
'                .FormatConditions(2).StopIfTrue = True
                
            End With
            
            For k = 1 To max_number_of_items_in_bin_type(i)
                
                Cells(5 + k, 1 + offset).Value = k
                Cells(5 + k, 1 + offset).Font.ColorIndex = 2
                Cells(5 + k, 1 + offset).Interior.ColorIndex = 1
                
                Range(Cells(5 + k, 2 + offset), Cells(5 + k, 13 + offset)).Select
                Selection.Font.ColorIndex = 1
                Selection.Interior.ColorIndex = 33
            
                'Range(Cells(5 + k, 3 + offset), Cells(5 + k, 5 + offset)).Select
                
                With Cells(5 + k, 3 + offset)
                
                    .FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(5 + k, 2 + offset).Address(False, False) & ")"
                    .FormatConditions(1).Font.ColorIndex = 33
                
                End With
                
                With Cells(5 + k, 4 + offset)
                
                    .FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(5 + k, 2 + offset).Address(False, False) & ")"
                    .FormatConditions(1).Font.ColorIndex = 33
                
                End With
                
                With Cells(5 + k, 5 + offset)
                
                    .FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(5 + k, 2 + offset).Address(False, False) & ")"
                    .FormatConditions(1).Font.ColorIndex = 33
                
                End With
                
'                Cells(5 + k, 5 + offset).FormatConditions.Add Type:=xlExpression, Formula1:="=AND(" & Cells(5 + k, 5 + offset).Address(False, False) & "=" & Chr(34) & "Yes" & Chr(34) & formula_delimiter & Cells(5 + k, 9 + offset).Address(False, False) & "=" & Chr(34) & "No" & Chr(34) & ")"
'                Cells(5 + k, 5 + offset).FormatConditions(2).Interior.ColorIndex = 3
                
                Range(Cells(5 + k, 14 + offset), Cells(5 + k, 19 + offset)).Select
                Selection.Font.ColorIndex = 1
                Selection.Interior.ColorIndex = 36
                
'                With Cells(5 + k, 2 + offset).Validation
'                  .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="='1.Items'!" & Cells(2, 2).Address & ":" & Cells(1 + num_item_types, 2).Address
'                  .IgnoreBlank = True
'                  .InCellDropdown = True
'                  .ErrorTitle = "Warning"
'                  .ErrorMessage = "Please select a value from the list available in the selected cell."
'                  .ShowError = True
'                End With
                
                Cells(5 + k, 3 + offset).Value = 0
                Cells(5 + k, 3 + offset).NumberFormat = "0.00"
                
                Cells(5 + k, 4 + offset).Value = 0
                Cells(5 + k, 4 + offset).NumberFormat = "0.00"
                
                With Cells(5 + k, 5 + offset).Validation
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
                    .IgnoreBlank = True
                    .InCellDropdown = True
                End With
                
                Cells(5 + k, 5 + offset).Value = "No"
                          
                formulaText = "=IFERROR(MATCH(" & "INDIRECT(" & Chr(34) & Cells(5 + k, 2 + offset).Address(False, False) & Chr(34) & ")"
                formulaText = formulaText & ",'1.Items'!" & Cells(2, 2).Address & ":" & Cells(1 + num_item_types, 2).Address & ", 0),"
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")"
                
                Cells(5 + k, 14 + offset).Formula = formulaText
                
                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 14 + offset).Address(False, False) & ")," & Cells(5 + k, 3 + offset).Address(False, False) & "+"
                formulaText = formulaText & "IF(" & Cells(5 + k, 5 + offset).Address(False, False) & "=" & Chr(34) & "No" & Chr(34) & ","
                formulaText = formulaText & "INDEX('1.Items'!" & Cells(2, 4).Address(False, False) & ":" & Cells(1 + num_item_types, 4).Address(False, False)
                formulaText = formulaText & "," & Cells(5 + k, 14 + offset).Address(False, False) & "),"
                formulaText = formulaText & "INDEX('1.Items'!" & Cells(2, 5).Address(False, False) & ":" & Cells(1 + num_item_types, 5).Address(False, False)
                formulaText = formulaText & "," & Cells(5 + k, 14 + offset).Address(False, False) & ")),"
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                
                Cells(5 + k, 15 + offset).NumberFormat = "0.00"
                Cells(5 + k, 15 + offset).Formula = formulaText
                
                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 14 + offset).Address(False, False) & ")," & Cells(5 + k, 4 + offset).Address(False, False) & "+"
                formulaText = formulaText & "IF(" & Cells(5 + k, 5 + offset).Address(False, False) & "=" & Chr(34) & "No" & Chr(34) & ","
                formulaText = formulaText & "INDEX('1.Items'!" & Cells(2, 5).Address(False, False) & ":" & Cells(1 + num_item_types, 5).Address(False, False)
                formulaText = formulaText & "," & Cells(5 + k, 14 + offset).Address(False, False) & "),"
                formulaText = formulaText & "INDEX('1.Items'!" & Cells(2, 4).Address(False, False) & ":" & Cells(1 + num_item_types, 4).Address(False, False)
                formulaText = formulaText & "," & Cells(5 + k, 14 + offset).Address(False, False) & ")),"
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                
                Cells(5 + k, 16 + offset).NumberFormat = "0.00"
                Cells(5 + k, 16 + offset).Formula = formulaText

                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 14 + offset).Address(False, False) & "),"
                formulaText = formulaText & "INDEX('1.Items'!" & Cells(2, 7).Address(False, False) & ":" & Cells(1 + num_items, 7).Address(False, False)
                formulaText = formulaText & "," & Cells(5 + k, 14 + offset).Address(False, False) & " ),"
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"

                Cells(5 + k, 17 + offset).Formula = formulaText

                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 14 + offset).Address(False, False) & "),"
                formulaText = formulaText & "INDEX('1.Items'!" & Cells(2, 6).Address(False, False) & ":" & Cells(1 + num_items, 6).Address(False, False)
                formulaText = formulaText & "," & Cells(5 + k, 14 + offset).Address(False, False) & " ),"
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"

                Cells(5 + k, 18 + offset).NumberFormat = "0.00"
                Cells(5 + k, 18 + offset).Formula = formulaText
                
                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 14 + offset).Address(False, False) & "),"
                formulaText = formulaText & "INDEX('1.Items'!" & Cells(2, 9).Address(False, False) & ":" & Cells(1 + num_items, 9).Address(False, False)
                formulaText = formulaText & "," & Cells(5 + k, 14 + offset).Address(False, False) & " ),"
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"

                Cells(5 + k, 19 + offset).NumberFormat = "0.00"
                Cells(5 + k, 19 + offset).Formula = formulaText

                Range(Cells(5 + k, 1 + offset), Cells(5 + k, 19 + offset)).Select
                With Selection.Borders(xlEdgeBottom)
                    .LineStyle = xlContinuous
                    .ColorIndex = 16
                    .TintAndShade = 0
                    .Weight = xlThin
                End With
                
            Next k
            
            Cells(3, 1 + offset).Value = "Bin " & j & " of " & ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 2).Value
            
            Cells(3, 17 + offset).Value = "Max number of items"
            
            Cells(4, 17 + offset).Value = max_number_of_items_in_bin_type(i)
            
            Cells(4, 17 + offset).Interior.ColorIndex = 36
            
            Cells(3, 18 + offset).Value = "Total area"

            formulaText = "=SUM(" & Cells(6, 18 + offset).Address & ":" & Cells(5 + max_number_of_items_in_bin_type(i), 18 + offset).Address & ")"
        
            Cells(4, 18 + offset).Formula = formulaText
            Cells(4, 18 + offset).Interior.ColorIndex = 36
            Cells(4, 18 + offset).NumberFormat = "0.00"
            
            temp_upper_bound = ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 5).Value

            Cells(4, 18 + offset).FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=temp_upper_bound
            Cells(4, 18 + offset).FormatConditions(1).Interior.Pattern = xlNone
            Cells(4, 18 + offset).FormatConditions(1).Interior.ColorIndex = 3
            Cells(4, 18 + offset).FormatConditions(1).StopIfTrue = True

            Cells(3, 19 + offset).Value = "Net profit"

            formulaText = "=SUM(" & Cells(6, 19 + offset).Address & ":" & Cells(5 + max_number_of_items_in_bin_type(i), 19 + offset).Address & ")"
            formulaText = formulaText & "+ IF(COUNTA(" & "'3.Solution'!" & Cells(6, 2 + offset).Address & ":" & Cells(5 + max_number_of_items_in_bin_type(i), 2 + offset).Address & "),"
            formulaText = formulaText & "-INDEX('2.Bins'!" & Cells(2, 7).Address & ":" & Cells(1 + num_bin_types, 7).Address & "," & i & "), 0)"
            
            Cells(4, 19 + offset).Formula = formulaText
            Cells(4, 19 + offset).Interior.ColorIndex = 36
            Cells(4, 19 + offset).NumberFormat = "0.00"
                
            objectiveFormula = objectiveFormula & "+" & Cells(4, 19 + offset).Address
            
            offset = offset + offset_constant
        Next j
    Next i
           
           
    'unpacked items
    
    Cells(3, 1 + offset).Value = "Unpacked items"
    
    Cells(5, 1 + offset).Value = "Item count"
    Cells(5, 2 + offset).Value = "Item type name"
    Cells(5, 3 + offset).Value = "Item type ID"
    Cells(5, 4 + offset).Value = "Area"
    Cells(5, 5 + offset).Value = "Profit"
    
    Range(Cells(6, 2 + offset), Cells(5 + num_items, 2 + offset)).Select
    
    With Selection.Validation
      .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="='1.Items'!" & Cells(2, 2).Address & ":" & Cells(1 + num_item_types, 2).Address
      .IgnoreBlank = True
      .InCellDropdown = True
      .ErrorTitle = "Warning"
      .ErrorMessage = "Please select a value from the list available in the selected cell."
      .ShowError = True
    End With
                    
    For k = 1 To num_items
        
        Cells(5 + k, 1 + offset).Value = k
        Cells(5 + k, 1 + offset).Font.ColorIndex = 2
        Cells(5 + k, 1 + offset).Interior.ColorIndex = 15 '46
        
        Range(Cells(5 + k, 2 + offset), Cells(5 + k, 2 + offset)).Select
        Selection.Font.ColorIndex = 1
        Selection.Interior.ColorIndex = 33
        
        Range(Cells(5 + k, 3 + offset), Cells(5 + k, 5 + offset)).Select
        Selection.Font.ColorIndex = 1
        Selection.Interior.ColorIndex = 36
                  
        formulaText = "=IFERROR(MATCH(" & "INDIRECT(" & Chr(34) & Cells(5 + k, 2 + offset).Address(False, False) & Chr(34) & ")"
        formulaText = formulaText & ",'1.Items'!" & Cells(2, 2).Address & ":" & Cells(1 + num_item_types, 2).Address & ", 0),"
        formulaText = formulaText & Chr(34) & " " & Chr(34) & ")"
        
        Cells(5 + k, 3 + offset).Formula = formulaText

        formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).Address(False, False) & "),"
        formulaText = formulaText & "INDEX('1.Items'!" & Cells(2, 6).Address(False, False) & ":" & Cells(1 + num_items, 6).Address(False, False)
        formulaText = formulaText & "," & Cells(5 + k, 3 + offset).Address(False, False) & " ),"
        formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"

        Cells(5 + k, 4 + offset).NumberFormat = "0.00"
        Cells(5 + k, 4 + offset).Formula = formulaText
        
        formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).Address(False, False) & "),"
        formulaText = formulaText & "INDEX('1.Items'!" & Cells(2, 9).Address(False, False) & ":" & Cells(1 + num_items, 9).Address(False, False)
        formulaText = formulaText & "," & Cells(5 + k, 3 + offset).Address(False, False) & " ),"
        formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"

        Cells(5 + k, 5 + offset).NumberFormat = "0.00"
        Cells(5 + k, 5 + offset).Formula = formulaText

        Range(Cells(5 + k, 1 + offset), Cells(5 + k, 5 + offset)).Select
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 16
            .TintAndShade = 0
            .Weight = xlThin
        End With
        
    Next k
    
    Cells(3, 4 + offset).Value = "Total area"

    formulaText = "=SUM(" & Cells(6, 4 + offset).Address & ":" & Cells(5 + num_items, 4 + offset).Address & ")"

    Cells(4, 4 + offset).Formula = formulaText
    Cells(4, 4 + offset).Interior.ColorIndex = 36
    Cells(4, 4 + offset).NumberFormat = "0.00"
    
    Cells(3, 5 + offset).Value = "Net profit"

    formulaText = "=SUM(" & Cells(6, 5 + offset).Address & ":" & Cells(5 + num_items, 5 + offset).Address & ")"

    Cells(4, 5 + offset).Formula = formulaText
    Cells(4, 5 + offset).Interior.ColorIndex = 36
    Cells(4, 5 + offset).NumberFormat = "0.00"
                
    Cells(1, 2).Value = objectiveFormula
    
    Cells(1, 2).FormatConditions.Add Type:=xlExpression, Formula1:="=ISERROR(" & Cells(1, 2).Address & ")"
    Cells(1, 2).FormatConditions(1).Interior.ColorIndex = 3
    
    Rows("1:5").Select
    Selection.Font.Bold = True
    
    Columns.AutoFit
    
    Cells(max_number_of_items_in_bin_type(1) + 7, 1).Value = "List of detected infeasibilities"
    Cells(max_number_of_items_in_bin_type(1) + 7, 1).Font.Bold = True
    
    offset = 0

    For i = 1 To num_bin_types

        bin_count = ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 9).Value
        
        For j = 1 To bin_count

            Columns(6 + offset).EntireColumn.Hidden = True
            Columns(7 + offset).EntireColumn.Hidden = True
            Columns(8 + offset).EntireColumn.Hidden = True
            Columns(9 + offset).EntireColumn.Hidden = True
            Columns(10 + offset).EntireColumn.Hidden = True
            Columns(11 + offset).EntireColumn.Hidden = True
            Columns(12 + offset).EntireColumn.Hidden = True
            Columns(13 + offset).EntireColumn.Hidden = True
            Columns(14 + offset).EntireColumn.Hidden = True
            Columns(15 + offset).EntireColumn.Hidden = True
            Columns(16 + offset).EntireColumn.Hidden = True
            

            'Columns(10 + offset).EntireColumn.ColumnWidth = 10

            offset = offset + offset_constant
        Next j
    Next i
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    'ActiveSheet.EnableFormatConditionsCalculation = True
    
    Cells(1, 1).Select
    
    MsgBox ("Solution worksheet setup complete.")
    
End Sub
Sub SetupVisualizationWorksheet()

    Dim WorksheetExists As Boolean
    Dim MissingCoordinates As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Items") And CheckWorksheetExistence("2.Bins") And CheckWorksheetExistence("3.Solution")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Items, 2.Bins, and 3.Solution must exist for the visualization worksheet to be setup."
        Exit Sub
    End If
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
    
    Dim num_items As Long
    
    num_items = 0
    For i = 1 To num_item_types
        num_items = num_items + ThisWorkbook.Worksheets("1.Items").Cells(1 + i, 10).Value
    Next i
    
    If num_items = 0 Then
        MsgBox "There must be at least one item for the solution worksheet to be setup."
        Exit Sub
    End If
    
    Dim num_bin_types As Long
    num_bin_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(4, 3).Value
    
    Dim num_bins As Long
    
    num_bins = 0
    For i = 1 To num_bin_types
        num_bins = num_bins + ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 9).Value
    Next i
    
    If num_bins = 0 Then
        MsgBox "There must be at least one bin for the solution worksheet to be setup."
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = True Then
        
        reply = MsgBox("This will overwrite existing visualization data. Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")

        If reply = vbNo Then
            ThisWorkbook.Worksheets("4.Visualization").Activate
            Exit Sub
        Else
            Application.DisplayAlerts = False
            ThisWorkbook.Worksheets("4.Visualization").Delete
            Application.DisplayAlerts = True
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "4.Visualization"
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "4.Visualization"
    End If
    
    Call RefreshVisualizationWorksheet
End Sub
Sub RefreshVisualizationWorksheet()
    
    Dim WorksheetExists As Boolean
    
    WorksheetExists = CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = False Then
        Exit Sub
    End If
    
    ThisWorkbook.Worksheets("4.Visualization").Activate
    
    ActiveSheet.Shapes.SelectAll
    Selection.Delete
    
    Rows("1").Select
    Selection.Clear
    Cells(1, 1).Select
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
    
    Dim num_items As Long
    
    num_items = 0
    For i = 1 To num_item_types
        num_items = num_items + ThisWorkbook.Worksheets("1.Items").Cells(1 + i, 10).Value
    Next i
   
    Dim num_bin_types As Long
    num_bin_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(4, 3).Value
    
    Dim num_bins As Long
    Dim bin_count As Long
    
    num_bins = 0
    For i = 1 To num_bin_types
        num_bins = num_bins + ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 9).Value
    Next i
    
    Dim guillotine_cuts As Boolean
    If ThisWorkbook.Worksheets("BPP Solver Console").Cells(6, 3) = "Yes" Then
        guillotine_cuts = True
    Else
        guillotine_cuts = False
    End If
    
    Dim item_label_option As String
    item_label_option = ThisWorkbook.Worksheets("BPP Solver Console").Cells(8, 3).Value
    
    Dim bin_label_option As String
    bin_label_option = ThisWorkbook.Worksheets("BPP Solver Console").Cells(9, 3).Value
    
    Dim scaling_option As String
    scaling_option = ThisWorkbook.Worksheets("BPP Solver Console").Cells(10, 3).Value
        
    Application.ScreenUpdating = False
            
    'scaling - determine the maximum width and height of the bins
    
    Dim row_index As Long
    Dim file_name As String
    
    Dim max_width As Double
    Dim max_height As Double
    Dim min_width As Double
    Dim min_height As Double
    Dim v_scale As Double
    Dim offset As Long
    Dim x_offset As Long
    Dim y_offset As Double
    
    Dim nw_x As Double
    Dim nw_y As Double
    Dim bin_width As Double
    Dim bin_height As Double
    Dim item_width As Double
    Dim item_height As Double
    Dim max_item_dimension As Double
    Dim swap_double As Double
    
    Dim cut_1_start_x As Double
    Dim cut_1_start_y As Double
    Dim cut_1_end_x As Double
    Dim cut_1_end_y As Double
    Dim cut_2_start_x As Double
    Dim cut_2_start_y As Double
    Dim cut_2_end_x As Double
    Dim cut_2_end_y As Double
    
    Dim row_height As Double
    row_height = Rows("1").height
        
    Dim column_width As Double
    column_width = Columns("Z").width
    
    min_width = ThisWorkbook.Sheets("2.Bins").Cells(2, 3)
    max_width = ThisWorkbook.Sheets("2.Bins").Cells(2, 3)
    
    min_height = ThisWorkbook.Sheets("2.Bins").Cells(2, 4)
    max_height = ThisWorkbook.Sheets("2.Bins").Cells(2, 4)
    
    For i = 1 To num_bin_types
        
        If min_width > ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 3) Then
            min_width = ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 3)
        End If
        
        If max_width < ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 3) Then
            max_width = ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 3)
        End If
        
        If min_height > ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 4) Then
            min_height = ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 4)
        End If
        
        If max_height < ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 4) Then
            max_height = ThisWorkbook.Sheets("2.Bins").Cells(1 + i, 4)
        End If
        
    Next i
    
    If scaling_option = "Automatic" Then
        v_scale = width_limit / max_width
        
        If v_scale > (height_limit / max_height) Then
            v_scale = (height_limit / max_height)
        End If
    Else
        v_scale = 28.35
    End If
    
    'MsgBox v_scale
    
    offset = 0
    
    x_offset = 1
    y_offset = 2 * row_height
    
    For i = 1 To num_bin_types
    
        bin_count = ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 9).Value
        
        For j = 1 To bin_count
            
            bin_width = v_scale * ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 3).Value
            bin_height = v_scale * ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 4).Value
            
            nw_x = column_width * x_offset
            nw_y = y_offset + v_scale * max_height - bin_height
            
            Cells(1, 1 + x_offset).Value = ThisWorkbook.Worksheets("3.Solution").Cells(3, 1 + offset).Value
            Cells(1, 1 + x_offset).Font.Bold = msoTrue
            
            ActiveSheet.Shapes.AddShape(msoShapeRectangle, nw_x, nw_y, bin_width, bin_height).Select
            Selection.Interior.ColorIndex = 50
            ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Fill.Transparency = 0.5
            ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Name = "Bin"
            
            With Selection.ShapeRange.ThreeD
                .BevelTopType = msoBevelSoftRound
                .BevelTopInset = 12
                .BevelTopDepth = 4
            End With
            
            If bin_label_option = "Yes" Then
                Selection.ShapeRange(1).TextFrame2.TextRange.Characters.Text = ThisWorkbook.Worksheets("3.Solution").Cells(3, 1 + offset).Value
                Selection.ShapeRange(1).TextFrame2.TextRange.Font.Bold = msoTrue
            End If

            Selection.ShapeRange.TextFrame2.VerticalAnchor = msoAnchorMiddle
            Selection.ShapeRange.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
            
            l = ThisWorkbook.Worksheets("3.Solution").Cells(4, 17 + offset).Value
            
            For k = 1 To l
            
                If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 2).Value <> "" Then
                    
                    row_index = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 14).Value + 1
                    
                    item_width = v_scale * ThisWorkbook.Worksheets("1.Items").Cells(row_index, 4)
                    item_height = v_scale * ThisWorkbook.Worksheets("1.Items").Cells(row_index, 5)
                    
                    max_item_dimension = item_width
                    If max_item_dimension < item_height Then
                        max_item_dimension = item_height
                    End If
                    
                    If guillotine_cuts = True Then
                        'draw the cuts first
                        
                        If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 7) <> "" Then
                            
                            cut_1_start_x = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value
                            cut_1_start_y = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 7).Value
                            cut_1_end_x = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 8).Value
                            cut_1_end_y = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 9).Value
                            
                            With ActiveSheet.Shapes.AddLine(nw_x + v_scale * cut_1_start_x, nw_y + bin_height - v_scale * cut_1_start_y, (nw_x + v_scale * cut_1_start_x) + v_scale * (cut_1_end_x - cut_1_start_x), (nw_y + bin_height - v_scale * cut_1_start_y) - v_scale * (cut_1_end_y - cut_1_start_y)).Line
                                .Weight = 2
                                .ForeColor.RGB = RGB(0, 0, 0)
                            End With
                        End If
                        
                        If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 10) <> "" Then
                            
                            cut_2_start_x = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 10).Value
                            cut_2_start_y = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 11).Value
                            cut_2_end_x = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 12).Value
                            cut_2_end_y = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 13).Value
                            
                            With ActiveSheet.Shapes.AddLine(nw_x + v_scale * cut_2_start_x, nw_y + bin_height - v_scale * cut_2_start_y, (nw_x + v_scale * cut_2_start_x) + v_scale * (cut_2_end_x - cut_2_start_x), (nw_y + bin_height - v_scale * cut_2_start_y) - v_scale * (cut_2_end_y - cut_2_start_y)).Line
                                .Weight = 2
                                .ForeColor.RGB = RGB(0, 0, 0)
                            End With
                        End If
                        
                    End If
                    
                    'create it at the max_item_dimension, max_item_dimension
                    
                    ActiveSheet.Shapes.AddShape(msoShapeRectangle, max_item_dimension, max_item_dimension, item_width, item_height).Select
                    
                    If item_label_option = "Yes" Then
                        Selection.ShapeRange(1).TextFrame2.TextRange.Characters.Text = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 2).Value
                    End If
        
                    Selection.ShapeRange.TextFrame2.VerticalAnchor = msoAnchorMiddle
                    Selection.ShapeRange.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
                    
                    file_name = ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3)
                    
                    If file_name <> "" Then
                    
                        #If Mac Then
                            file_name = Application.ThisWorkbook.Path & ":" & ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3)
                        #Else
                            file_name = Application.ThisWorkbook.Path & "\" & ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3)
                        #End If
                        
                        If Dir(file_name) <> "" Then
                            With Selection.ShapeRange.Fill
                                .UserPicture file_name
                            End With
                        End If
                        
                    Else
                        Selection.Interior.Color = ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3).Interior.Color
                        
                        With Selection.ShapeRange.ThreeD
                            .BevelTopType = msoBevelCoolSlant
                            .BevelTopInset = 13
                            .BevelTopDepth = 6
                        End With
                    End If
                    
                    'rotate if you have to
                    
                    If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 5).Value = "Yes" Then
                        Selection.ShapeRange.IncrementRotation -90
                        
                        Selection.ShapeRange.IncrementLeft (item_height - item_width) / 2
                        Selection.ShapeRange.IncrementTop (item_width - item_height) / 2
                        
                        swap_double = item_height
                        item_height = item_width
                        item_width = swap_double
                    End If
                    
                    'carry it to the sw corner
                    
                    Selection.ShapeRange.IncrementLeft nw_x - max_item_dimension
                    Selection.ShapeRange.IncrementTop nw_y + bin_height - item_height - max_item_dimension
                    
                    'carry it to its place
                    
                    Selection.ShapeRange.IncrementLeft v_scale * ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 3).Value
                    Selection.ShapeRange.IncrementTop -v_scale * ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 4).Value
                    
                Else
                    Exit For
                End If
            
            Next k
            
            offset = offset + offset_constant
            
            x_offset = x_offset + Int(v_scale * max_width / column_width) + 2
            
        Next j
        
    Next i
    
    'unpacked items
    
    Cells(1, 1 + x_offset).Value = ThisWorkbook.Worksheets("3.Solution").Cells(3, 1 + offset).Value
    Cells(1, 1 + x_offset).Font.Bold = msoTrue
    
    nw_x = column_width * x_offset
    nw_y = y_offset ' + v_scale * max_height

    For k = 1 To num_items
    
        If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 2).Value <> "" Then
            
            row_index = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 3).Value + 1
            
            item_width = v_scale * ThisWorkbook.Worksheets("1.Items").Cells(row_index, 4)
            item_height = v_scale * ThisWorkbook.Worksheets("1.Items").Cells(row_index, 5)
            
            max_item_dimension = item_width
            If max_item_dimension < item_height Then
                max_item_dimension = item_height
            End If
            
            'create it at the max_item_dimension, max_item_dimension
            
            ActiveSheet.Shapes.AddShape(msoShapeRectangle, max_item_dimension, max_item_dimension, item_width, item_height).Select
            
            If item_label_option = "Yes" Then
                Selection.ShapeRange(1).TextFrame2.TextRange.Characters.Text = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 2).Value
            End If

            Selection.ShapeRange.TextFrame2.VerticalAnchor = msoAnchorMiddle
            Selection.ShapeRange.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
            
            file_name = ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3)
            
            If file_name <> "" Then
            
                #If Mac Then
                    file_name = Application.ThisWorkbook.Path & ":" & ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3)
                #Else
                    file_name = Application.ThisWorkbook.Path & "\" & ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3)
                #End If
                
                If Dir(file_name) <> "" Then
                    With Selection.ShapeRange.Fill
                        .UserPicture file_name
                    End With
                End If
                
            Else
                Selection.Interior.Color = ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3).Interior.Color
                
                With Selection.ShapeRange.ThreeD
                    .BevelTopType = msoBevelCoolSlant
                    .BevelTopInset = 13
                    .BevelTopDepth = 6
                End With
            End If
            
            'carry it to its place
            
            Selection.ShapeRange.IncrementLeft nw_x - max_item_dimension
            Selection.ShapeRange.IncrementTop nw_y - max_item_dimension
            
            nw_x = nw_x + item_width + column_width
        Else
            Exit For
        End If
    
    Next k
 
    'ThisWorkbook.Worksheets("4.Visualization").Activate
    
    Cells(1, 1).Select
    
    Application.ScreenUpdating = True
    
End Sub

Sub AnimateVisualizationWorksheet()

    Application.EnableCancelKey = xlErrorHandler
    On Error Resume Next
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Items") And CheckWorksheetExistence("2.Bins") And CheckWorksheetExistence("3.Solution") And CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Items, 2.Bins, 3.Solution, and 4.Visualization must exist for the animation to start."
        Exit Sub
    End If
    
    Dim i As Long
    
    Dim max_row As Long
    max_row = (height_limit / Rows(1).RowHeight) + 2
    
    Dim offset As Long
    offset = 1
    Dim offset_increment As Long
    offset_increment = (width_limit / Columns(1).ColumnWidth) + 1
    
    Dim original_zoom As Long
    original_zoom = ActiveWindow.Zoom
    
    Dim selection_column_index As Long
    selection_column_index = ActiveCell.Column
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
    
    Dim num_items As Long
    
    num_items = 0
    For i = 1 To num_item_types
        num_items = num_items + ThisWorkbook.Worksheets("1.Items").Cells(1 + i, 10).Value
    Next i
    
    If num_items = 0 Then
        MsgBox "There must be at least one item for the animation to start."
        Exit Sub
    End If
    
    Dim num_bin_types As Long
    num_bin_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(4, 3).Value
    
    Dim num_bins As Long
    
    num_bins = 0
    For i = 1 To num_bin_types
        num_bins = num_bins + ThisWorkbook.Worksheets("2.Bins").Cells(1 + i, 9).Value
    Next i
    
    If num_bins = 0 Then
        MsgBox "There must be at least one bin for the animation to start."
        Exit Sub
    End If
    
    Dim guillotine_cuts As Boolean
    If ThisWorkbook.Worksheets("BPP Solver Console").Cells(6, 3) = "Yes" Then
        guillotine_cuts = True
    Else
        guillotine_cuts = False
    End If
    
    Dim estimated_time As Double
    If guillotine_cuts = True Then
        estimated_time = 3 * num_items + num_bins
    Else
        estimated_time = num_items + num_bins
    End If
    
    reply = MsgBox("This will take up to " & estimated_time & " seconds. You can speed up the animation by pressing (or holding down) the <Esc> key. Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
    If reply = vbNo Then
        Exit Sub
    End If
    
    Dim animation_advance_type As Long
    
    'If ThisWorkbook.Worksheets("BPP Solver Console").Cells(10, 3).Value = "One second intervals" Then
        animation_advance_type = 0
'    Else
'        animation_advance_type = 1
'    End If
    
    ThisWorkbook.Worksheets("4.Visualization").Activate
    
    Cells(1, 1).Select
    
    ActiveSheet.Shapes.SelectAll

    Selection.Visible = False

    DoEvents

    Application.Wait (Now() + TimeValue("0:00:01"))

    For i = 1 To ActiveSheet.Shapes.Count
    
        If ActiveSheet.Shapes(i).Name = "Bin" Then
            Range(Cells(1, offset), Cells(max_row, offset + offset_constant)).Select
            ActiveWindow.Zoom = True
            offset = offset + offset_increment
        End If
        
        ActiveSheet.Shapes(i).Visible = True
        DoEvents
        Cells(1, ActiveSheet.Shapes(i).BottomRightCell.Column).Select
        DoEvents
        If animation_advance_type = 0 Then
            Application.Wait (Now() + TimeValue("0:00:01"))
            DoEvents
        ElseIf i < ActiveSheet.Shapes.Count Then
            reply = MsgBox("Next item?", vbOKOnly, "BPP Spreadsheet Solver")
        End If
    Next i
    
    ThisWorkbook.Worksheets("4.Visualization").Activate
    
    Cells(1, selection_column_index).Select
    
    ActiveWindow.Zoom = original_zoom
    
    reply = MsgBox("Animation finished.         ", vbOKOnly, "BPP Spreadsheet Solver")
    
End Sub

Private Sub About()
    Dim reply As Integer
    
    reply = MsgBox("BPP Spreadsheet Solver 2.1" & Chr(13) & "Open source, developed by Dr Gunes Erdogan, 2019 (G.Erdogan@bath.ac.uk), School of Management, University of Bath." & Chr(13) _
& Chr(13) & "The latest version of the solver can be downloaded at: http://people.bath.ac.uk/ge277/index.php/bpp-spreadsheet-solver/" & Chr(13) & Chr(13) & "DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE ORIGINAL DEVELOPER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", vbOKOnly, "BPP Spreadsheet Solver")
End Sub
Private Sub SendFeedback()
    ThisWorkbook.FollowHyperlink "mailto:G.Erdogan@bath.ac.uk&subject=BPP Spreadsheet Solver"
End Sub


Private Sub ResetWorkbook()

    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    reply = MsgBox("This will delete all existing problem data. Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
    If reply = vbNo Then
        Exit Sub
    Else
    
        Application.DisplayAlerts = False
        
        WorksheetExists = CheckWorksheetExistence("4.Visualization")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("4.Visualization").Delete
        End If

        WorksheetExists = CheckWorksheetExistence("3.Solution")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("3.Solution").Delete
        End If
        
        WorksheetExists = CheckWorksheetExistence("2.3.Bin-Item Compatibility")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Delete
        End If
        
        WorksheetExists = CheckWorksheetExistence("2.Bins")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("2.Bins").Delete
        End If
        
        WorksheetExists = CheckWorksheetExistence("1.3.Item-Item Compatibility")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Delete
        End If
        
        WorksheetExists = CheckWorksheetExistence("1.Items")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("1.Items").Delete
        End If
    
        WorksheetExists = CheckWorksheetExistence("BPP Solver Console")
        If WorksheetExists = False Then
            Call SetupConsoleWorksheet
        End If
        
        Application.DisplayAlerts = True
    End If

    WorksheetExists = CheckWorksheetExistence("BPP Solver Console")
    If WorksheetExists = False Then
        Call SetupConsoleWorksheet
    End If
    
    ThisWorkbook.Worksheets("BPP Solver Console").Activate
End Sub

Sub SortItemTypes()
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
        
    WorksheetExists = CheckWorksheetExistence("1.Items")
    If WorksheetExists = False Then
        MsgBox "Worksheet 1.Items must exist for the items to be sorted."
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.Bins") Or CheckWorksheetExistence("3.Solution") Or CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = True Then
        reply = MsgBox("This will delete existing bin, solution, and visualization data. Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        End If
    End If
    
    WorksheetExists = CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("4.Visualization").Delete
        Application.DisplayAlerts = True
    End If
    ThisWorkbook.Worksheets("1.Items").Activate
    
    WorksheetExists = CheckWorksheetExistence("3.Solution")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("3.Solution").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.3.Bin-Item Compatibility")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.Bins")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("2.Bins").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("1.3.Item-Item Compatibility")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("2.3.Item-Item Compatibility").Delete
        Application.DisplayAlerts = True
    End If
    
    Range(Cells(2, 2), Cells(num_item_types + 1, 9)).Select
    
    Selection.Sort Key1:=Columns("B"), Order1:=xlAscending, Header:=xlNo
    
End Sub

Sub SortBinTypes()
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    Dim num_bin_types As Long
    num_bin_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(4, 3).Value
        
    WorksheetExists = CheckWorksheetExistence("2.Bins")
    If WorksheetExists = False Then
        MsgBox "Worksheet 2.Bins must exist for the bins to be sorted."
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("3.Solution") Or CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = True Then
        reply = MsgBox("This will delete existing solution and visualization data. Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        End If
    End If
    
    WorksheetExists = CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("4.Visualization").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("3.Solution")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("3.Solution").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.3.Bin-Item Compatibility")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Delete
        Application.DisplayAlerts = True
    End If
    
    ThisWorkbook.Worksheets("2.Bins").Activate
    
    Range(Cells(2, 2), Cells(num_bin_types + 1, 9)).Select
    
    Selection.Sort Key1:=Columns("B"), Order1:=xlAscending, Header:=xlNo
    
End Sub
Sub SetupMenuItems()
    Call ThisWorkbook.Workbook_Activate
End Sub

Private Sub WatchTutorial()
    ThisWorkbook.FollowHyperlink "https://www.youtube.com/watch?v=HWD207zxm8Q"
End Sub


' ribbon calls and tab activation

#If Win32 Or Win64 Or (MAC_OFFICE_VERSION >= 15) Then

Sub ResetWorkbookRibbonCall(control As IRibbonControl)
    Call ResetWorkbook
End Sub
Sub SetupItemsWorksheetRibbonCall(control As IRibbonControl)
    Call SetupItemsWorksheet
End Sub
Sub SortItemsRibbonCall(control As IRibbonControl)
    Call SortItemTypes
End Sub
Sub SetupItemItemCompatibilityWorksheetRibbonCall(control As IRibbonControl)
    Call SetupItemItemCompatibilityWorksheet
End Sub
Sub SetupBinsWorksheetRibbonCall(control As IRibbonControl)
    Call SetupBinsWorksheet
End Sub
Sub SortBinTypesRibbonCall(control As IRibbonControl)
    Call SortBinTypes
End Sub
Sub SetupBinItemCompatibilityWorksheetRibbonCall(control As IRibbonControl)
    Call SetupBinItemCompatibilityWorksheet
End Sub
Sub SetupSolutionWorksheetRibbonCall(control As IRibbonControl)
    Call SetupSolutionWorksheet
End Sub
Sub SetupVisualizationWorksheetRibbonCall(control As IRibbonControl)
    Call SetupVisualizationWorksheet
End Sub
Sub AnimateVisualizationWorksheetRibbonCall(control As IRibbonControl)
    Call AnimateVisualizationWorksheet
End Sub
Private Sub SendFeedbackRibbonCall(control As IRibbonControl)
    Call SendFeedback
End Sub
Private Sub WatchTutorialRibbonCall(control As IRibbonControl)
    Call WatchTutorial
End Sub
Private Sub AboutRibbonCall(control As IRibbonControl)
    Call About
End Sub
Sub tabActivate(ribbon As IRibbonUI)
    ribbon.ActivateTab ("BPPSpreadsheetSolver")
End Sub

#End If
Attribute VB_Name = "Module2"
'This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/.

Option Explicit

Const epsilon As Double = 0.0001

'data declarations

Private Type item_type_data
    id As Long
    width As Double
    height As Double
    area As Double
    rotatable As Boolean
    mandatory As Long
    profit As Double
    number_requested As Long
    sort_criterion As Double
End Type

Private Type item_list_data
    num_item_types As Long
    total_number_of_items As Long
    item_types() As item_type_data
End Type

Dim item_list As item_list_data

Private Type bin_type_data
    type_id As Long
    width As Double
    height As Double
    area As Double
    mandatory As Long
    cost As Double
    number_available As Long
End Type

Private Type bin_list_data
    num_bin_types As Long
    bin_types() As bin_type_data
End Type

Dim bin_list As bin_list_data

Private Type compatibility_data
    item_to_item() As Boolean
    bin_to_item() As Boolean
End Type

Dim compatibility_list As compatibility_data

Private Type item_location
    sw_x As Double
    sw_y As Double
    max_x As Double ' for Guillotine cuts
    max_y As Double ' for Guillotine cuts
End Type

Private Type item_in_bin
    item_type As Long
    rotated As Boolean
    mandatory As Long
    sw_x As Double
    sw_y As Double
    ne_x As Double
    ne_y As Double
    max_x As Double ' for Guillotine cuts
    max_y As Double ' for Guillotine cuts
    first_cut_direction As Long ' for Guillotine cuts: 0 means horizontal, 1 means vertical
    cut_length As Double ' for Guillotine cuts
End Type

Private Type bin_data
    type_id As Long
    width As Double
    height As Double
    area As Double
    cost As Double
    item_cnt As Long
    mandatory As Long
    items() As item_in_bin
    addition_points() As item_location
    repack_item_count() As Long
    area_packed As Double
End Type

Private Type solution_data
    num_bins As Long
    feasible As Boolean
    net_profit As Double
    total_area As Double
    total_distance As Double
    item_type_order() As Long
    rotation_order() As Long
    first_cut_direction() As Long
    bin() As bin_data
    unpacked_item_count() As Long
End Type

Private Type instance_data
    item_item_compatibility_worksheet As Boolean 'true if the data exists
    bin_item_compatibility_worksheet As Boolean 'true if the data exists
    guillotine_cuts As Boolean
    global_upper_bound As Double
End Type

Dim instance As instance_data

Private Type solver_option_data
    CPU_time_limit As Double
    item_sort_criterion As Long
    show_progress As Boolean
End Type

Dim solver_options As solver_option_data

Private Type candidate_data
    mandatory As Long
    net_profit As Double
    total_area As Double
    item_type_to_be_added As Long
End Type
Private Sub SortBins(solution As solution_data)
    
    Dim i As Long
    Dim j As Long
    Dim candidate_index As Long
    Dim max_mandatory As Long
    Dim max_area_packed As Double
    Dim min_ratio As Double
    Dim swap_bin As bin_data
        
    'insertion sort

    If Rnd < 0.8 Then
        
        'insertion sort
    
        With solution
    
            For i = 1 To .num_bins
                candidate_index = i
                max_mandatory = .bin(i).mandatory
                max_area_packed = .bin(i).area_packed
                min_ratio = .bin(i).cost / .bin(i).area
    
                For j = i + 1 To .num_bins
    
                    If (.bin(j).mandatory > max_mandatory) Or _
                        ((.bin(j).mandatory = max_mandatory) And (.bin(j).area_packed > max_area_packed + epsilon)) Or _
                        ((.bin(j).mandatory = 0) And (max_mandatory = 0) And (.bin(j).area_packed > max_area_packed - epsilon) And ((.bin(j).cost / .bin(j).area) < min_ratio)) Then
    
                        candidate_index = j
                        max_mandatory = .bin(j).mandatory
                        max_area_packed = .bin(j).area_packed
                        min_ratio = .bin(j).cost / .bin(j).area
    
                    End If
    
                Next j
    
                If candidate_index <> i Then
                    swap_bin = .bin(candidate_index)
                    .bin(candidate_index) = .bin(i)
                    .bin(i) = swap_bin
                End If
    
            Next i

        End With
    Else
        
        With solution
            For i = 1 To .num_bins
                
                candidate_index = Int((.num_bins - i + 1) * Rnd + i)
    
                If candidate_index <> i Then
                    swap_bin = .bin(candidate_index)
                    .bin(candidate_index) = .bin(i)
                    .bin(i) = swap_bin
                End If
    
            Next i
        End With
        
    End If
    
End Sub
Private Sub PerturbSolution(solution As solution_data)
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim swap_long As Long
    
    Dim bin_emptying_probability As Double
    Dim item_removal_probability As Double
    Dim repack_flag As Boolean
    Dim continue_flag As Boolean
    
    For i = 1 To solution.num_bins
    
        With solution.bin(i)
        
            bin_emptying_probability = 1 - 0.8 * (.area_packed / .area)
            item_removal_probability = 1 - 0.8 * (.area_packed / .area)
            
            If .item_cnt > 0 Then
            
                If Rnd() < bin_emptying_probability Then
                    
                    'empty the bin
                    
                    For j = 1 To .item_cnt
                    
                        solution.unpacked_item_count(.items(j).item_type) = solution.unpacked_item_count(.items(j).item_type) + 1
                        solution.net_profit = solution.net_profit - item_list.item_types(.items(j).item_type).profit
                        
                    Next j
                    solution.net_profit = solution.net_profit + .cost
                    solution.total_area = solution.total_area - .area_packed
                    
                    .item_cnt = 0
                    .area_packed = 0
                    .addition_points(1).sw_x = 0
                    .addition_points(1).sw_y = 0
                    .addition_points(1).max_x = .width
                    .addition_points(1).max_y = .height
                    
                Else
                
                    repack_flag = False

                    For j = 1 To .item_cnt

                        If ((solution.feasible = False) And (.items(j).mandatory = 0)) Or (Rnd() < item_removal_probability) Then

                            solution.unpacked_item_count(.items(j).item_type) = solution.unpacked_item_count(.items(j).item_type) + 1

                            solution.net_profit = solution.net_profit - item_list.item_types(.items(j).item_type).profit

                            .items(j).item_type = 0

                            repack_flag = True
                        End If

                    Next j

                    If repack_flag = True Then

                        For j = 1 To .item_cnt

                            If .items(j).item_type > 0 Then
                                solution.net_profit = solution.net_profit - item_list.item_types(.items(j).item_type).profit
                            End If

                        Next j
                        solution.net_profit = solution.net_profit + .cost
                        solution.total_area = solution.total_area - .area_packed

                        For j = 1 To item_list.num_item_types
                            .repack_item_count(j) = 0
                        Next j

                        For j = 1 To .item_cnt

                            If .items(j).item_type > 0 Then
                                .repack_item_count(.items(j).item_type) = .repack_item_count(.items(j).item_type) + 1
                            End If

                        Next j

                        .area_packed = 0
                        .item_cnt = 0
                        .addition_points(1).sw_x = 0
                        .addition_points(1).sw_y = 0
                        .addition_points(1).max_x = .width
                        .addition_points(1).max_y = .height

                        'repack now

                        For j = 1 To item_list.num_item_types

                            continue_flag = True
                            Do While (.repack_item_count(j) > 0) And (continue_flag = True)
                                continue_flag = AddItemToBin(solution, i, j, 2)
                            Loop

                            ' put the remaining items in the unpacked items list

                            solution.unpacked_item_count(j) = solution.unpacked_item_count(j) + .repack_item_count(j)
                            .repack_item_count(j) = 0

                        Next j

                    End If
                
                End If
            
            End If
            
        End With
        
    Next i
    
    'change the preferred rotation order randomly
    
    For i = 1 To item_list.num_item_types
        
        If Rnd() < 0.5 Then
            solution.rotation_order(i, 1) = 0
            solution.rotation_order(i, 2) = 1
        Else
            solution.rotation_order(i, 1) = 1
            solution.rotation_order(i, 2) = 2
        End If
        
    Next i
    
    'change the first cut direction randomly
    
    For i = 1 To item_list.num_item_types
        
        If Rnd() < 0.5 Then
            solution.first_cut_direction(i) = 0
        Else
            solution.first_cut_direction(i) = 1
        End If
        
    Next i
    
    'change the item order randomly - test

    For i = 1 To item_list.num_item_types

        j = Int((item_list.num_item_types - i + 1) * Rnd + i) ' the order to swap with

        swap_long = solution.item_type_order(i)
        solution.item_type_order(i) = solution.item_type_order(j)
        solution.item_type_order(j) = swap_long

    Next i
    
End Sub
Private Function AddItemToBin(solution As solution_data, bin_index As Long, item_type_index As Long, add_type As Long)
        
    Dim i As Long
    Dim j As Long
    Dim rotation As Long
    
    Dim sw_x As Double
    Dim sw_y As Double
    Dim ne_x As Double
    Dim ne_y As Double
    
    Dim min_x As Double
    Dim min_y As Double
    Dim candidate_position As Double
    Dim candidate_rotation As Long
    
    With solution.bin(bin_index)
    
        min_x = .width + 1
        min_y = .height + 1
        candidate_position = 0
        
        'compatibility check
        
        If instance.bin_item_compatibility_worksheet = True Then
            If compatibility_list.bin_to_item(.type_id, item_list.item_types(item_type_index).id) = False Then GoTo AddItemToBin_Finish
        End If
        
        'area size check
        
        If .area_packed + item_list.item_types(item_type_index).area > .area Then GoTo AddItemToBin_Finish
        
        'item to item compatibility check
        
        If instance.item_item_compatibility_worksheet = True Then
            For i = 1 To .item_cnt
                If compatibility_list.item_to_item(item_list.item_types(item_type_index).id, item_list.item_types(.items(i).item_type).id) = False Then GoTo AddItemToBin_Finish
            Next i
        End If
        
        For rotation = 1 To 2
        
            If (solution.rotation_order(item_type_index, rotation) = 1) And (item_list.item_types(item_type_index).rotatable = False) Then
                GoTo NextRotation
            End If

            For i = 1 To .item_cnt + 1
                
                sw_x = .addition_points(i).sw_x
                sw_y = .addition_points(i).sw_y
                
                If solution.rotation_order(item_type_index, rotation) = 0 Then
                    ne_x = sw_x + item_list.item_types(item_type_index).width
                    ne_y = sw_y + item_list.item_types(item_type_index).height
                Else
                    ne_x = sw_x + item_list.item_types(item_type_index).height
                    ne_y = sw_y + item_list.item_types(item_type_index).width
                End If
                
                'check the feasibility of all four corners, w.r.t to the other items
                
                If (ne_x > .width + epsilon) Or (ne_y > .height + epsilon) Then GoTo NextIteration
                
                If instance.guillotine_cuts = True Then
                    If (ne_x > .addition_points(i).max_x + epsilon) Or (ne_y > .addition_points(i).max_y + epsilon) Then GoTo NextIteration
                End If
                
                For j = 1 To .item_cnt
                    
                    If (sw_x < .items(j).ne_x - epsilon) And (ne_x > .items(j).sw_x + epsilon) And (ne_y > .items(j).sw_y + epsilon) And (sw_y < .items(j).ne_y - epsilon) Then GoTo NextIteration
                
                Next j
                
                If instance.guillotine_cuts = True Then
                    
                    For j = 1 To .item_cnt
                    
                        If .items(j).first_cut_direction = 0 Then
                            'check if the first cut obstructs the item
                            If (sw_x < .items(j).max_x - epsilon) And (ne_x > .items(j).sw_x + epsilon) And (ne_y > .items(j).ne_y + epsilon) And (sw_y < .items(j).ne_y - epsilon) Then GoTo NextIteration
                        Else
                            If (sw_x < .items(j).ne_x - epsilon) And (ne_x > .items(j).ne_x + epsilon) And (ne_y > .items(j).sw_y + epsilon) And (sw_y < .items(j).max_y - epsilon) Then GoTo NextIteration
                        End If
                    
                    Next j
                    
                End If
                
                'no conflicts at this point
                
                If (sw_y < min_y) Or _
                  ((sw_y <= min_y + epsilon) And (sw_x < min_x)) Then
                   min_x = sw_x
                   min_y = sw_y
                   candidate_position = i
                   candidate_rotation = solution.rotation_order(item_type_index, rotation)
                End If
NextIteration:
            Next i
            
NextRotation:
        Next rotation
        
    End With
    
AddItemToBin_Finish:

    If candidate_position = 0 Then
        AddItemToBin = False
    Else
        With solution.bin(bin_index)
            .item_cnt = .item_cnt + 1
            .items(.item_cnt).item_type = item_type_index
            .items(.item_cnt).sw_x = .addition_points(candidate_position).sw_x
            .items(.item_cnt).sw_y = .addition_points(candidate_position).sw_y
            If candidate_rotation = 1 Then
                .items(.item_cnt).rotated = True
            Else
                .items(.item_cnt).rotated = False
            End If
            .items(.item_cnt).mandatory = item_list.item_types(item_type_index).mandatory
            If candidate_rotation = 0 Then
                .items(.item_cnt).ne_x = .items(.item_cnt).sw_x + item_list.item_types(item_type_index).width
                .items(.item_cnt).ne_y = .items(.item_cnt).sw_y + item_list.item_types(item_type_index).height
            Else
                .items(.item_cnt).ne_x = .items(.item_cnt).sw_x + item_list.item_types(item_type_index).height
                .items(.item_cnt).ne_y = .items(.item_cnt).sw_y + item_list.item_types(item_type_index).width
            End If
            
            .area_packed = .area_packed + item_list.item_types(item_type_index).area

            If instance.guillotine_cuts = True Then
                .items(.item_cnt).first_cut_direction = solution.first_cut_direction(item_type_index)
                
                If ((.items(.item_cnt).first_cut_direction = 0) And (.items(.item_cnt).ne_y = .addition_points(candidate_position).max_y)) Or ((.items(.item_cnt).first_cut_direction = 1) And (.items(.item_cnt).ne_x = .addition_points(candidate_position).max_x)) Then
                    .items(.item_cnt).cut_length = 0
                Else
                    .items(.item_cnt).cut_length = 0
                    If .items(.item_cnt).first_cut_direction = 0 Then
                        If .items(.item_cnt).ne_y < .addition_points(candidate_position).max_y - epsilon Then
                            .items(.item_cnt).cut_length = .items(.item_cnt).cut_length + (.addition_points(candidate_position).max_x - .items(.item_cnt).sw_x)
                            '.items(.item_cnt).cut_length = .items(.item_cnt).cut_length + 1
                        End If

                        If .items(.item_cnt).ne_x < .addition_points(candidate_position).max_x - epsilon Then
                            .items(.item_cnt).cut_length = .items(.item_cnt).cut_length + (.items(.item_cnt).ne_y - .items(.item_cnt).sw_y)
                            '.items(.item_cnt).cut_length = .items(.item_cnt).cut_length + 1
                        End If
                    Else
                        If .items(.item_cnt).ne_x < .addition_points(candidate_position).max_x - epsilon Then
                            .items(.item_cnt).cut_length = .items(.item_cnt).cut_length + (.addition_points(candidate_position).max_y - .items(.item_cnt).sw_y)
                            '.items(.item_cnt).cut_length = .items(.item_cnt).cut_length + 1
                        End If
                        If .items(.item_cnt).ne_y < .addition_points(candidate_position).max_y - epsilon Then
                            .items(.item_cnt).cut_length = .items(.item_cnt).cut_length + (.items(.item_cnt).ne_x - .items(.item_cnt).sw_x)
                            '.items(.item_cnt).cut_length = .items(.item_cnt).cut_length + 1
                        End If
                    End If
                 End If
                
                .items(.item_cnt).max_x = .addition_points(candidate_position).max_x
                .items(.item_cnt).max_y = .addition_points(candidate_position).max_y
            End If
            

            If add_type = 2 Then
                .repack_item_count(item_type_index) = .repack_item_count(item_type_index) - 1
            End If
            
            'update the addition points
            
            For i = candidate_position To .item_cnt - 1
                .addition_points(i) = .addition_points(i + 1)
            Next i
            
            .addition_points(.item_cnt).sw_x = .items(.item_cnt).ne_x
            .addition_points(.item_cnt).sw_y = .items(.item_cnt).sw_y
            
            .addition_points(.item_cnt + 1).sw_x = .items(.item_cnt).sw_x
            .addition_points(.item_cnt + 1).sw_y = .items(.item_cnt).ne_y
            
            If instance.guillotine_cuts = True Then
                If .items(.item_cnt).first_cut_direction = 0 Then
                    .addition_points(.item_cnt).max_x = .items(.item_cnt).max_x
                    .addition_points(.item_cnt).max_y = .items(.item_cnt).ne_y
                    
                    .addition_points(.item_cnt + 1).max_x = .items(.item_cnt).max_x
                    .addition_points(.item_cnt + 1).max_y = .items(.item_cnt).max_y
                Else
                    .addition_points(.item_cnt).max_x = .items(.item_cnt).max_x
                    .addition_points(.item_cnt).max_y = .items(.item_cnt).max_y
                    
                    .addition_points(.item_cnt + 1).max_x = .items(.item_cnt).ne_x
                    .addition_points(.item_cnt + 1).max_y = .items(.item_cnt).max_y
                End If
            End If
            
        End With
        
        With solution
            'update the profit
            
            If .bin(bin_index).item_cnt = 1 Then
                .net_profit = .net_profit + item_list.item_types(item_type_index).profit - .bin(bin_index).cost
            Else
                .net_profit = .net_profit + item_list.item_types(item_type_index).profit
            End If
            
            'update the area per bin and the total area
            
            .total_area = .total_area + item_list.item_types(item_type_index).area
            
            'update the unpacked items
            
            If add_type = 1 Then
                .unpacked_item_count(item_type_index) = .unpacked_item_count(item_type_index) - 1
            End If
            
        End With
        
        AddItemToBin = True
    End If
    
End Function

Private Sub GetSolverOptions()
    ThisWorkbook.Worksheets("BPP Solver Console").Activate
    
    With solver_options
        
        If Cells(12, 3).Value = "Area" Then
            .item_sort_criterion = 1
        ElseIf Cells(12, 3).Value = "Circumference" Then
            .item_sort_criterion = 2
        ElseIf Cells(12, 3).Value = "Height" Then
            .item_sort_criterion = 3
        ElseIf Cells(12, 3).Value = "Width" Then
            .item_sort_criterion = 4
        Else
            .item_sort_criterion = 1
        End If
        
        If Cells(13, 3).Value = "Yes" Then
            .show_progress = True
        Else
            .show_progress = False
        End If
        
        .CPU_time_limit = Cells(14, 3).Value
        
    End With
End Sub
Private Sub GetItemData()
    
    item_list.num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
    item_list.total_number_of_items = 0
    
    ReDim item_list.item_types(1 To item_list.num_item_types)
    
    ThisWorkbook.Worksheets("1.Items").Activate
    
    Dim i As Long
    
    With item_list
        
        For i = 1 To .num_item_types
            
            .item_types(i).id = i
            
            .item_types(i).width = Cells(1 + i, 4).Value
            .item_types(i).height = Cells(1 + i, 5).Value
            .item_types(i).area = Cells(1 + i, 6).Value
            
            If Cells(1 + i, 7).Value = "Yes" Then
                .item_types(i).rotatable = True
            ElseIf Cells(1 + i, 7).Value = "No" Then
                .item_types(i).rotatable = False
            End If
            
            If Abs(.item_types(i).width - .item_types(i).height) < epsilon Then
                .item_types(i).rotatable = False
            End If
            
            If Cells(1 + i, 8).Value = "Must be packed" Then
                .item_types(i).mandatory = 1
            ElseIf Cells(1 + i, 8).Value = "May be packed" Then
                .item_types(i).mandatory = 0
            ElseIf Cells(1 + i, 8).Value = "Don't pack" Then
                .item_types(i).mandatory = -1
            End If
            
            .item_types(i).profit = Cells(1 + i, 9).Value
            
            .item_types(i).number_requested = Cells(1 + i, 10).Value
            
            If solver_options.item_sort_criterion = 1 Then
                .item_types(i).sort_criterion = .item_types(i).area
            ElseIf solver_options.item_sort_criterion = 2 Then
                .item_types(i).sort_criterion = .item_types(i).width + .item_types(i).height
            ElseIf solver_options.item_sort_criterion = 3 Then
                .item_types(i).sort_criterion = .item_types(i).height
            ElseIf solver_options.item_sort_criterion = 4 Then
                .item_types(i).sort_criterion = .item_types(i).width
            End If
            
            item_list.total_number_of_items = item_list.total_number_of_items + .item_types(i).number_requested
        
        Next i
    
    End With
    
End Sub
Private Sub GetBinData()
    
    bin_list.num_bin_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(4, 3).Value
    
    ReDim bin_list.bin_types(1 To bin_list.num_bin_types)
    
    ThisWorkbook.Worksheets("2.Bins").Activate
    
    Dim i As Long
    
    With bin_list
        
        For i = 1 To .num_bin_types
            
            .bin_types(i).type_id = i
            
            .bin_types(i).width = Cells(1 + i, 3).Value
            .bin_types(i).height = Cells(1 + i, 4).Value
            .bin_types(i).area = Cells(1 + i, 5).Value
            
            If Cells(1 + i, 6).Value = "Must be used" Then
                .bin_types(i).mandatory = 1
            ElseIf Cells(1 + i, 6).Value = "May be used" Then
                .bin_types(i).mandatory = 0
            ElseIf Cells(1 + i, 6).Value = "Do not use" Then
                .bin_types(i).mandatory = -1
            End If
            
            .bin_types(i).cost = Cells(1 + i, 7).Value
            
            .bin_types(i).number_available = Cells(1 + i, 9).Value
        
        Next i
    
    End With
    
End Sub
Private Sub GetCompatibilityData()
    
    With compatibility_list
        
        Dim i As Long
        Dim j As Long
        Dim k As Long

        If instance.item_item_compatibility_worksheet = True Then
        
            ReDim .item_to_item(1 To item_list.num_item_types, 1 To item_list.num_item_types)
            
            For i = 1 To item_list.num_item_types
                For j = 1 To item_list.num_item_types
                
                    .item_to_item(i, j) = True
                    
                Next j
            Next i
            
            k = 3
            For i = 1 To item_list.num_item_types
                For j = i + 1 To item_list.num_item_types
                
                    If ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 3) = "No" Then
                        .item_to_item(i, j) = False
                        .item_to_item(j, i) = False
                    End If
                        
                    k = k + 1
                Next j
            Next i
            
        End If
        
        If instance.bin_item_compatibility_worksheet = True Then
        
            ReDim .bin_to_item(1 To bin_list.num_bin_types, 1 To item_list.num_item_types)
            
            For i = 1 To bin_list.num_bin_types
                For j = 1 To item_list.num_item_types
                
                    .bin_to_item(i, j) = True
                    
                Next j
            Next i
            
            k = 3
            For i = 1 To bin_list.num_bin_types
                For j = 1 To item_list.num_item_types
                
                    If ThisWorkbook.Worksheets("2.3.Bin-Item Compatibility").Cells(k, 3) = "No" Then
                        .bin_to_item(i, j) = False
                    End If
                        
                    k = k + 1
                Next j
            Next i
            
        End If

    End With
    
End Sub
Private Sub InitializeSolution(solution As solution_data)
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    
    With solution
        .feasible = False
        .net_profit = 0
        .total_area = 0
        .total_distance = 0
        
        .num_bins = 0
        For i = 1 To bin_list.num_bin_types
            If bin_list.bin_types(i).mandatory >= 0 Then
                .num_bins = .num_bins + bin_list.bin_types(i).number_available
            End If
        Next i
        
        ReDim .item_type_order(1 To item_list.num_item_types)
        For i = 1 To item_list.num_item_types
            .item_type_order(i) = i
        Next i
        
        ReDim .rotation_order(1 To item_list.num_item_types, 1 To 2)
        For i = 1 To item_list.num_item_types
            .rotation_order(i, 1) = 0
            .rotation_order(i, 2) = 1
        Next i
        
        ReDim .first_cut_direction(1 To item_list.num_item_types)
        For i = 1 To item_list.num_item_types
            .first_cut_direction(i) = 0
        Next i
        
        ReDim .bin(1 To .num_bins)
        For i = 1 To .num_bins
            ReDim .bin(i).items(1 To 2 * item_list.total_number_of_items)
            ReDim .bin(i).addition_points(1 To item_list.total_number_of_items + 1)
            ReDim .bin(i).repack_item_count(1 To item_list.total_number_of_items)
        Next i
        
        ReDim .unpacked_item_count(1 To item_list.num_item_types)
        
        l = 1
        For i = 1 To bin_list.num_bin_types
            If bin_list.bin_types(i).mandatory >= 0 Then
                For j = 1 To bin_list.bin_types(i).number_available
                    
                    .bin(l).width = bin_list.bin_types(i).width
                    .bin(l).height = bin_list.bin_types(i).height
                    .bin(l).area = bin_list.bin_types(i).area
                    .bin(l).cost = bin_list.bin_types(i).cost
                    .bin(l).mandatory = bin_list.bin_types(i).mandatory
                    .bin(l).type_id = i
                    .bin(l).area_packed = 0
                    .bin(l).item_cnt = 0
                    
                    For k = 1 To item_list.total_number_of_items
                        .bin(l).items(k).item_type = 0
                        .bin(l).addition_points(k).sw_x = 0
                        .bin(l).addition_points(k).sw_y = 0
                        .bin(l).addition_points(k).max_x = .bin(l).width
                        .bin(l).addition_points(k).max_y = .bin(l).height
                    Next k
                    
                    For k = 1 To item_list.total_number_of_items
                        .bin(l).repack_item_count(k) = 0
                    Next k
                    
                    l = l + 1
                Next j
            End If
        Next i
        
        For i = 1 To item_list.num_item_types
            .unpacked_item_count(i) = item_list.item_types(i).number_requested
        Next i
        
    End With
    
End Sub

Private Sub GetInstanceData()
    
    Dim i As Long
    Dim result As Double
    
    result = 0
    
    With item_list
    
        For i = 1 To .num_item_types
            
            If .item_types(i).mandatory <> -1 Then
                result = result + (.item_types(i).profit * .item_types(i).number_requested)
            End If
            
        Next i
        
    End With
    
    With bin_list
    
        For i = 1 To .num_bin_types
            
            If .bin_types(i).mandatory = 1 Then
                result = result - (.bin_types(i).cost * .bin_types(i).number_available)
            End If
            
        Next i
        
    End With
    
    instance.global_upper_bound = result
    
    If CheckWorksheetExistence("1.3.Item-Item Compatibility") = True Then
        instance.item_item_compatibility_worksheet = True
    Else
        instance.item_item_compatibility_worksheet = False
    End If
        
    If CheckWorksheetExistence("2.3.Bin-Item Compatibility") = True Then
        instance.bin_item_compatibility_worksheet = True
    Else
        instance.bin_item_compatibility_worksheet = False
    End If
    
    If ThisWorkbook.Worksheets("BPP Solver Console").Cells(6, 3) = "Yes" Then
        instance.guillotine_cuts = True
    Else
        instance.guillotine_cuts = False
    End If
End Sub
Private Sub WriteSolution(solution As solution_data)
   
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
            
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim bin_index As Long
    
    Dim swap_bin As bin_data
    
    'sort the bins
    
    'first ensure that simlar patterns occur together
    
    For i = 1 To solution.num_bins
        solution.bin(i).area_packed = solution.bin(i).area_packed * solution.bin(i).area * solution.bin(i).area
        For j = 1 To solution.bin(i).item_cnt
            solution.bin(i).area_packed = solution.bin(i).area_packed + item_list.item_types(solution.bin(i).items(j).item_type).area * item_list.item_types(solution.bin(i).items(j).item_type).area
        Next j
    Next i
    
    For i = 1 To solution.num_bins
        For j = solution.num_bins To 2 Step -1
            If (solution.bin(j).type_id < solution.bin(j - 1).type_id) Or _
                ((solution.bin(j).type_id = solution.bin(j - 1).type_id) And (solution.bin(j).area_packed > solution.bin(j - 1).area_packed)) Then
                swap_bin = solution.bin(j)
                solution.bin(j) = solution.bin(j - 1)
                solution.bin(j - 1) = swap_bin
            End If
        Next j
    Next i
    
    ThisWorkbook.Worksheets("3.Solution").Activate

    If solution.feasible = False Then
        Cells(2, 1) = "Warning: Last solution returned by the solver does not satisfy all constraints."
        Range(Cells(2, 1), Cells(2, 19)).Interior.ColorIndex = 45
    Else
        Cells(2, 1) = vbNullString
        Range(Cells(2, 1), Cells(2, 19)).Interior.Pattern = xlNone
        Range(Cells(2, 1), Cells(2, 19)).Interior.TintAndShade = 0
        Range(Cells(2, 1), Cells(2, 19)).Interior.PatternTintAndShade = 0
    End If
    
    Dim offset As Long
    
    offset = 0
    bin_index = 1
    
    With solution
    
        For i = 1 To bin_list.num_bin_types
        
            For j = 1 To bin_list.bin_types(i).number_available
    
                Range(Cells(6, offset + 2), Cells(5 + 2 * item_list.total_number_of_items, offset + 2)).Value = vbNullString
                Range(Cells(6, offset + 3), Cells(5 + 2 * item_list.total_number_of_items, offset + 4)).ClearContents
                Range(Cells(6, offset + 5), Cells(5 + 2 * item_list.total_number_of_items, offset + 5)).Value = vbNullString
                Range(Cells(6, offset + 6), Cells(5 + 2 * item_list.total_number_of_items, offset + 13)).ClearContents
                
                If bin_list.bin_types(i).mandatory >= 0 Then
                        
                    For k = 1 To .bin(bin_index).item_cnt
                        Cells(5 + k, offset + 2).Value = ThisWorkbook.Worksheets("1.Items").Cells(1 + item_list.item_types(.bin(bin_index).items(k).item_type).id, 2).Value
                        Cells(5 + k, offset + 3).Value = .bin(bin_index).items(k).sw_x
                        Cells(5 + k, offset + 4).Value = .bin(bin_index).items(k).sw_y
                        If .bin(bin_index).items(k).rotated = True Then
                            Cells(5 + k, offset + 5).Value = "Yes"
                        Else
                            Cells(5 + k, offset + 5).Value = "No"
                        End If
                        
                        If instance.guillotine_cuts = True Then
                            If .bin(bin_index).items(k).first_cut_direction = 0 Then
                            
                                Cells(5 + k, offset + 6).Value = .bin(bin_index).items(k).sw_x
                                If .bin(bin_index).items(k).ne_y < .bin(bin_index).items(k).max_y - epsilon Then
                                    Cells(5 + k, offset + 7).Value = .bin(bin_index).items(k).ne_y
                                    Cells(5 + k, offset + 8).Value = .bin(bin_index).items(k).max_x
                                End If
                                Cells(5 + k, offset + 9).Value = .bin(bin_index).items(k).ne_y

                                If .bin(bin_index).items(k).ne_x < .bin(bin_index).items(k).max_x - epsilon Then
                                    Cells(5 + k, offset + 10).Value = .bin(bin_index).items(k).ne_x
                                    Cells(5 + k, offset + 11).Value = .bin(bin_index).items(k).sw_y
                                    Cells(5 + k, offset + 12).Value = .bin(bin_index).items(k).ne_x
                                    Cells(5 + k, offset + 13).Value = .bin(bin_index).items(k).ne_y
                                End If

                            Else
                            
                                Cells(5 + k, offset + 6).Value = .bin(bin_index).items(k).ne_x
                                If .bin(bin_index).items(k).ne_x < .bin(bin_index).items(k).max_x - epsilon Then
                                    Cells(5 + k, offset + 7).Value = .bin(bin_index).items(k).sw_y
                                    Cells(5 + k, offset + 8).Value = .bin(bin_index).items(k).ne_x
                                End If
                                Cells(5 + k, offset + 9).Value = .bin(bin_index).items(k).max_y
                                                                   
                                If .bin(bin_index).items(k).ne_y < .bin(bin_index).items(k).max_y - epsilon Then
                                    Cells(5 + k, offset + 10).Value = .bin(bin_index).items(k).sw_x
                                    Cells(5 + k, offset + 11).Value = .bin(bin_index).items(k).ne_y
                                    Cells(5 + k, offset + 12).Value = .bin(bin_index).items(k).ne_x
                                    Cells(5 + k, offset + 13).Value = .bin(bin_index).items(k).ne_y
                                End If
                                
                            End If
                        End If
                        
                    Next k
                        
                    bin_index = bin_index + 1
                End If
                
                Columns(2 + offset).AutoFit
                
                offset = offset + offset_constant
            Next j
        Next i
        
        
        'unpacked items
    
        Range(Cells(6, offset + 2), Cells(5 + item_list.total_number_of_items, offset + 2)).Value = vbNullString
        
        For j = 1 To item_list.num_item_types
            For k = 1 To .unpacked_item_count(.item_type_order(j))
                Cells(5 + k, offset + 2).Value = ThisWorkbook.Worksheets("1.Items").Cells(1 + item_list.item_types(.item_type_order(j)).id, 2).Value
            Next k
        Next j
        
    End With
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
End Sub

Private Sub ReadSolution(solution As solution_data)
       
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
            
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    
    Dim bin_index As Long
    Dim item_type_index As Long
    
    Dim offset As Long
    
    offset = 0
    bin_index = 1
    
    With solution
    
        For i = 1 To bin_list.num_bin_types
        
            For j = 1 To bin_list.bin_types(i).number_available
                    
                If bin_list.bin_types(i).mandatory >= 0 Then
                    
                    With .bin(bin_index)
                        
                        l = Cells(4, offset + 17).Value
                        
                        For k = 1 To l
                            If IsNumeric(Cells(5 + k, offset + 14).Value) = True Then
                            
                                .item_cnt = .item_cnt + 1
                                
                                item_type_index = Cells(5 + k, offset + 14).Value
                                
                                solution.unpacked_item_count(item_type_index) = solution.unpacked_item_count(item_type_index) - 1
                                
                                .items(.item_cnt).item_type = item_type_index
                                .items(.item_cnt).sw_x = Cells(5 + k, offset + 3).Value
                                .items(.item_cnt).sw_y = Cells(5 + k, offset + 4).Value
                                  
                                If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 5).Value = "Yes" Then
                                    .items(.item_cnt).rotated = True
                                    .items(.item_cnt).ne_x = .items(.item_cnt).sw_x + item_list.item_types(item_type_index).height
                                    .items(.item_cnt).ne_y = .items(.item_cnt).sw_y + item_list.item_types(item_type_index).width
                                Else
                                    .items(.item_cnt).rotated = False
                                    .items(.item_cnt).ne_x = .items(.item_cnt).sw_x + item_list.item_types(item_type_index).width
                                    .items(.item_cnt).ne_y = .items(.item_cnt).sw_y + item_list.item_types(item_type_index).height
                                End If
                                
                                If instance.guillotine_cuts = True Then
                                    If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value = .items(.item_cnt).sw_x Then
                                        .items(.item_cnt).first_cut_direction = 0
                                        .items(.item_cnt).max_x = Cells(5 + k, offset + 8).Value
                                    Else
                                        .items(.item_cnt).first_cut_direction = 1
                                        .items(.item_cnt).max_y = Cells(5 + k, offset + 9).Value
                                    End If
                                    
                                End If
                        
                                .area_packed = .area_packed + item_list.item_types(item_type_index).area
                                
                                If .item_cnt = 1 Then
                                    solution.net_profit = solution.net_profit + item_list.item_types(item_type_index).profit - .cost
                                Else
                                    solution.net_profit = solution.net_profit + item_list.item_types(item_type_index).profit
                                End If
                                
                            End If
                        Next k
                        
                    End With
                    
                    bin_index = bin_index + 1
                End If
                
                offset = offset + offset_constant
            Next j
        Next i
    End With
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
End Sub
Sub BPP_Solver()
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Items") And CheckWorksheetExistence("2.Bins") And CheckWorksheetExistence("3.Solution")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Items, 2.Bins, and 3.Solution must exist for the BPP Spreadsheet Solver to function."
        Application.ScreenUpdating = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
    Else
        reply = MsgBox("This will take " & ThisWorkbook.Worksheets("BPP Solver Console").Cells(14, 3).Value & " seconds. Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
        If reply = vbNo Then
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            Exit Sub
        End If
    End If
    
    Application.EnableCancelKey = xlErrorHandler
    On Error GoTo BPP_Solver_Finish
    
    'Allocate memory and get the data
    
    Call GetSolverOptions
    Call GetItemData
    Call GetBinData
    Call GetInstanceData
    Call GetCompatibilityData
    
    Call SortItems
    
    Dim incumbent As solution_data
    Call InitializeSolution(incumbent)
        
    Dim best_known As solution_data
    Call InitializeSolution(best_known)
    best_known = incumbent
    
    Dim iteration As Long
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    
    Dim start_time As Date
    Dim end_time As Date
    
    Dim continue_flag As Boolean
    
    'infeasibility check
    
    Dim infeasibility_count As Long
    Dim infeasibility_string As String

    Call FeasibilityCheckData(infeasibility_count, infeasibility_string)

    If infeasibility_count > 0 Then
        reply = MsgBox("Infeasibilities detected." & Chr(13) & infeasibility_string & "Do you want to continue?", vbYesNo, "BPP Spreadsheet Solver")
        If reply = vbNo Then
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            Exit Sub
        End If
    End If
    
    start_time = Timer
    end_time = Timer
        
    'constructive phase
    
    If solver_options.show_progress = True Then
        Application.ScreenUpdating = True
        Application.StatusBar = "Constructive phase..."
        Application.ScreenUpdating = False
    Else
        Application.ScreenUpdating = True
        Application.StatusBar = "LNS algorithm running..."
        Application.ScreenUpdating = False
    End If
    
    Call SortBins(incumbent)
    
    For i = 1 To incumbent.num_bins
        
        For j = 1 To item_list.num_item_types
        
            continue_flag = True
            Do While (incumbent.unpacked_item_count(incumbent.item_type_order(j)) > 0) And (continue_flag = True)
                continue_flag = AddItemToBin(incumbent, i, incumbent.item_type_order(j), 1)
            Loop
        Next j
        
        incumbent.feasible = True
        For j = 1 To item_list.num_item_types
            If (incumbent.unpacked_item_count(j) > 0) And (item_list.item_types(j).mandatory = 1) Then
                incumbent.feasible = False
                Exit For
            End If
        Next j
        
        Call CalculateDistance(incumbent)

        If ((incumbent.feasible = True) And (best_known.feasible = False)) Or _
           ((incumbent.feasible = False) And (best_known.feasible = False) And (incumbent.total_area > best_known.total_area + epsilon)) Or _
           ((incumbent.feasible = True) And (best_known.feasible = True) And (incumbent.net_profit > best_known.net_profit + epsilon)) Or _
           ((incumbent.feasible = True) And (best_known.feasible = True) And (incumbent.net_profit > best_known.net_profit - epsilon) And (incumbent.total_area < best_known.total_area - epsilon)) Then

            best_known = incumbent
            
        End If
        
    Next i
    
    'end_time = Timer
    'MsgBox "Constructive phase result: " & best_known.net_profit & " time: " & end_time - start_time
    
    'improvement phase

    iteration = 0

    Do
        DoEvents
        
        If (solver_options.show_progress = True) And (iteration Mod 100 = 0) Then
            Application.ScreenUpdating = True
            If best_known.feasible = True Then
                Application.StatusBar = "Starting iteration " & iteration & ". Best net profit found so far: " & best_known.net_profit
            Else
                Application.StatusBar = "Starting iteration " & iteration & ". Best net profit found so far: N/A"
            End If
            Application.ScreenUpdating = False
        End If

        If Rnd() < 0.5 Then 'Rnd() < ((end_time - start_time) / solver_options.CPU_time_limit) ^ 2 Then

             incumbent = best_known

        End If
        
        Call PerturbSolution(incumbent)
        
        Call SortBins(incumbent)

        With incumbent
        
            For i = 1 To .num_bins
    
                For j = 1 To item_list.num_item_types
                    
                    continue_flag = True
                    Do While (.unpacked_item_count(.item_type_order(j)) > 0) And (continue_flag = True)
                        continue_flag = AddItemToBin(incumbent, i, .item_type_order(j), 1)
                    Loop
                Next j
    
                .feasible = True
                For j = 1 To item_list.num_item_types
                    If (.unpacked_item_count(j) > 0) And (item_list.item_types(j).mandatory = 1) Then
                        .feasible = False
                        Exit For
                    End If
                Next j
                
                Call CalculateDistance(incumbent)
                
                If ((.feasible = True) And (best_known.feasible = False)) Or _
                   ((.feasible = False) And (best_known.feasible = False) And (.total_area > best_known.total_area + epsilon)) Or _
                   ((.feasible = False) And (best_known.feasible = False) And (.total_area > best_known.total_area - epsilon)) And (.total_distance < best_known.total_distance - epsilon) Or _
                   ((.feasible = True) And (best_known.feasible = True) And (.net_profit > best_known.net_profit + epsilon)) Or _
                   ((.feasible = True) And (best_known.feasible = True) And (.net_profit > best_known.net_profit - epsilon) And (.total_area < best_known.total_area - epsilon)) Or _
                   ((.feasible = True) And (best_known.feasible = True) And (.net_profit > best_known.net_profit - epsilon) And (.total_area < best_known.total_area + epsilon)) And (.total_distance < best_known.total_distance - epsilon) Then
        
                    best_known = incumbent
                End If
    
            Next i
            
        End With

        iteration = iteration + 1
        
        end_time = Timer
        
    Loop While end_time - start_time < solver_options.CPU_time_limit
    
    'MsgBox "Iterations performed: " & iteration
    
BPP_Solver_Finish:
    
    'write the solution
    
    'MsgBox best_known.total_distance
    
    If best_known.feasible = True Then
        reply = MsgBox("BPP Spreadsheet Solver performed " & iteration & " LNS iterations and found a solution with a net profit of " & best_known.net_profit & ". Do you want to overwrite the current solution with the best found solution?", vbYesNo, "BPP Spreadsheet Solver")
        If reply = vbYes Then
            Call WriteSolution(best_known)
        End If
    ElseIf infeasibility_count > 0 Then
        Call WriteSolution(best_known)
    Else
        reply = MsgBox("The best found solution after " & iteration & " LNS iterations does not satisfy all constraints. Do you want to overwrite the current solution with the best found solution?", vbYesNo, "BPP Spreadsheet Solver")
        If reply = vbYes Then
            Call WriteSolution(best_known)
        End If
    End If
    
    'Erase the data
    
    Erase item_list.item_types
    Erase bin_list.bin_types
    Erase compatibility_list.item_to_item
    Erase compatibility_list.bin_to_item

    For i = 1 To incumbent.num_bins
        Erase incumbent.bin(i).items
    Next i
    Erase incumbent.bin
    Erase incumbent.unpacked_item_count
    
    For i = 1 To best_known.num_bins
        Erase best_known.bin(i).items
    Next i
    Erase best_known.bin
    Erase best_known.unpacked_item_count
    
    Application.StatusBar = False
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    If CheckWorksheetExistence("4.Visualization") = True Then
        ThisWorkbook.Worksheets("4.Visualization").Activate
    Else
        ThisWorkbook.Worksheets("3.Solution").Activate
    End If
    
    Cells(1, 1).Select
    
End Sub
Sub FeasibilityCheckData(infeasibility_count As Long, infeasibility_string As String)
    
    Dim i As Long
    Dim j As Long
    Dim feasibility_flag As Boolean
    Dim infeasibility_list_start_index As Long
    
    infeasibility_list_start_index = ThisWorkbook.Worksheets("3.Solution").Cells(4, 17).Value
    
    infeasibility_count = 0
    infeasibility_string = vbNullString
    
    Range(ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 9, 1), ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + (4 * item_list.total_number_of_items), 1)).Clear
    
    Dim area_required As Double
    Dim area_available As Double
    Dim max_width As Double
    Dim max_heigth As Double
    area_required = 0
    area_available = 0
    max_width = 0
    max_heigth = 0
    
    With item_list
        For i = 1 To .num_item_types
            If .item_types(i).mandatory = 1 Then
                area_required = area_required + (.item_types(i).area * .item_types(i).number_requested)
            End If
        Next i
    End With
    
    With bin_list
        For i = 1 To .num_bin_types
            If .bin_types(i).mandatory >= 0 Then
                area_available = area_available + (.bin_types(i).area * .bin_types(i).number_available)
                
                If .bin_types(i).width > max_width Then max_width = .bin_types(i).width
                If .bin_types(i).height > max_heigth Then max_heigth = .bin_types(i).height
                
            End If
        Next i
    End With
    
    If area_required > area_available Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The amount of area available is not enough to pack the mandatory items." & Chr(13)
        ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "The amount of area available is not enough to pack the mandatory items."
    End If
    
    With item_list
        For i = 1 To .num_item_types
            With .item_types(i)
                If (.mandatory = 1) And (.rotatable = False) And ((.width > max_width + epsilon) Or (.height > max_heigth + epsilon)) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too large to fit into any bin." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too large to fit into any bin."
                End If
                
                If (.mandatory = 1) And (.rotatable = True) And (.width > max_width + epsilon) And (.width > max_heigth + epsilon) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too wide to fit into any bin." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too large to fit into any bin."
                End If
                
                If (.mandatory = 1) And (.rotatable = True) And (.height > max_width + epsilon) And (.height > max_heigth + epsilon) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too long to fit into any bin." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too large to fit into any bin."
                End If
            End With
        Next i
    End With
    
    If instance.bin_item_compatibility_worksheet = True Then
    
        For i = 1 To item_list.num_item_types
            
            feasibility_flag = False
            
            For j = 1 To bin_list.num_bin_types
                If compatibility_list.bin_to_item(j, i) = True Then
                    feasibility_flag = True
                    Exit For
                End If
            Next j
            
            If feasibility_flag = False Then
                
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Item type " & i & " is not compatible with any bin." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Item type " & i & " is not compatible with any bin."
            End If
            
        Next i
    End If
    
End Sub
Sub FeasibilityCheckDataAndSolution()
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Items") And CheckWorksheetExistence("2.Bins") And CheckWorksheetExistence("3.Solution")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Items, 2.Bins, and 3.Solution must exist for the Feasibility Check."
        Exit Sub
    End If
    
    Call GetItemData
    Call GetBinData
    Call GetInstanceData
    Call GetCompatibilityData

    ThisWorkbook.Worksheets("3.Solution").Activate
    
    Dim infeasibility_list_start_index As Long
    
    infeasibility_list_start_index = ThisWorkbook.Worksheets("3.Solution").Cells(4, 17).Value
    
    Range(Cells(2, 1), Cells(2, 19)).Clear
    Range(ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 9, 1), ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + (4 * item_list.total_number_of_items), 1)).Clear
    
    Dim infeasibility_count As Long
    infeasibility_count = 0
    
    Dim infeasibility_string As String
    infeasibility_string = vbNullString
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim bin_index As Long
        
    Dim offset As Long
    Dim bin_name As String
    Dim feasibility_flag As Boolean
        
    Dim incumbent As solution_data
    
    Call InitializeSolution(incumbent)
    Call ReadSolution(incumbent)
    
    Dim area_required As Double
    Dim area_available As Double
    Dim max_width As Double
    Dim max_heigth As Double
    area_required = 0
    area_available = 0
    max_width = 0
    max_heigth = 0
    
    With item_list
        For i = 1 To .num_item_types
            If .item_types(i).mandatory = 1 Then
                area_required = area_required + (.item_types(i).area * .item_types(i).number_requested)
            End If
        Next i
    End With
    
    With bin_list
        For i = 1 To .num_bin_types
            If .bin_types(i).mandatory >= 0 Then
                
                area_available = area_available + (.bin_types(i).area * .bin_types(i).number_available)
                
                If .bin_types(i).width > max_width Then max_width = .bin_types(i).width
                If .bin_types(i).height > max_heigth Then max_heigth = .bin_types(i).height
                
            End If
        Next i
    End With
    
    If area_required > area_available Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The amount of area available is not enough to pack the mandatory items." & Chr(13)
        ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "The amount of area available is not enough to pack the mandatory items."
    End If
    
    With item_list
        For i = 1 To .num_item_types
            With .item_types(i)
                If (.mandatory = 1) And (.rotatable = False) And ((.width > max_width + epsilon) Or (.height > max_heigth + epsilon)) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too large to fit into any bin." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too large to fit into any bin."
                End If
                
                If (.mandatory = 1) And (.rotatable = True) And (.width > max_width + epsilon) And (.width > max_heigth + epsilon) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too wide to fit into any bin." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too large to fit into any bin."
                End If
                
                If (.mandatory = 1) And (.rotatable = True) And (.height > max_width + epsilon) And (.height > max_heigth + epsilon) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too long to fit into any bin." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too large to fit into any bin."
                End If
            End With
        Next i
    End With
    
    offset = 0
    For i = 1 To bin_list.num_bin_types
        For j = 1 To bin_list.bin_types(i).number_available
            If bin_list.bin_types(i).mandatory = -1 Then
                
                feasibility_flag = True
                For k = 1 To item_list.total_number_of_items
                    If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 2) <> vbNullString Then
                        feasibility_flag = False
                        Exit For
                    End If
                Next k
                
                If feasibility_flag = False Then
                
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "There are item(s) in the unavailable " & ThisWorkbook.Worksheets("3.Solution").Cells(4, offset + 1) & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "There are item(s) in the unavailable " & ThisWorkbook.Worksheets("3.Solution").Cells(4, offset + 1)
                    
                End If
            End If
            
            offset = offset + offset_constant
        Next j
    Next i
    
    offset = 0
    bin_index = 1
    For i = 1 To bin_list.num_bin_types
    
        For j = 1 To bin_list.bin_types(i).number_available
                
            If bin_list.bin_types(i).mandatory >= 0 Then

                For k = 1 To incumbent.bin(bin_index).item_cnt
                
                    If (incumbent.bin(bin_index).items(k).rotated = True) And (item_list.item_types(incumbent.bin(bin_index).items(k).item_type).rotatable = False) Then
                        
                        bin_name = ThisWorkbook.Worksheets("3.Solution").Cells(4, offset + 1)
                        
                        infeasibility_count = infeasibility_count + 1
                        If infeasibility_count < 5 Then
                            infeasibility_string = infeasibility_string & "Item " & k & " in " & bin_name & " is placed rotated, but it cannot be rotated." & Chr(13)
                        End If
                        If infeasibility_count = 5 Then
                            infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                        End If
                        ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Item " & k & " in " & bin_name & " is placed rotated, but it cannot be rotated."
                    
                    End If
                Next k
                
                bin_index = bin_index + 1
            End If
            
            offset = offset + offset_constant
        
        Next j
        
    Next i
    
    With incumbent
        For i = 1 To item_list.num_item_types
            If (item_list.item_types(i).mandatory = 1) And (.unpacked_item_count(i) > 0) Then
            
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "There are " & .unpacked_item_count(i) & " item(s) of type " & ThisWorkbook.Worksheets("1.Items").Cells(1 + i, 2) & " that are not packed in the available bins." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "There are " & .unpacked_item_count(i) & " item(s) of type " & ThisWorkbook.Worksheets("1.Items").Cells(1 + i, 2) & " that are not packed in the available bins."
                
            End If
            
            If .unpacked_item_count(i) < 0 Then
            
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Too many items of type " & ThisWorkbook.Worksheets("1.Items").Cells(1 + i, 2) & " are packed." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Too many items of type " & ThisWorkbook.Worksheets("1.Items").Cells(1 + i, 2) & " are packed."
                
            End If
        Next i
    End With
    
    If instance.bin_item_compatibility_worksheet = True Then
    
        For i = 1 To item_list.num_item_types
            
            feasibility_flag = False
            
            For j = 1 To bin_list.num_bin_types
                If compatibility_list.bin_to_item(j, i) = True Then
                    feasibility_flag = True
                    Exit For
                End If
            Next j
            
            If feasibility_flag = False Then
                
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Item type " & i & " is not compatible with any bin." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Item type " & i & " is not compatible with any bin."
            End If
            
        Next i
        
    End If
        
    If instance.item_item_compatibility_worksheet = True Then
    
        offset = 0
        bin_index = 1
        For i = 1 To bin_list.num_bin_types
        
            For j = 1 To bin_list.bin_types(i).number_available
                    
                If bin_list.bin_types(i).mandatory >= 0 Then

                    For k = 1 To incumbent.bin(bin_index).item_cnt
                    
                        For l = k + 1 To incumbent.bin(bin_index).item_cnt
                            
                            If compatibility_list.item_to_item(incumbent.bin(bin_index).items(k).item_type, incumbent.bin(bin_index).items(l).item_type) = False Then
                                
                                bin_name = ThisWorkbook.Worksheets("3.Solution").Cells(4, offset + 1)
                                
                                infeasibility_count = infeasibility_count + 1
                                If infeasibility_count < 5 Then
                                    infeasibility_string = infeasibility_string & "Items " & k & " and " & l & " in " & bin_name & " are incompatible." & Chr(13)
                                End If
                                If infeasibility_count = 5 Then
                                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                                End If
                                ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Items " & k & " and " & l & " in " & bin_name & " are incompatible."
                            
                            End If
                            
                        Next l
                    Next k
                    
                    bin_index = bin_index + 1
                End If
                
                offset = offset + offset_constant
            
            Next j
            
        Next i
        
    End If
    
    
    offset = 0
    bin_index = 1
    For i = 1 To bin_list.num_bin_types
    
        For j = 1 To bin_list.bin_types(i).number_available
                
            If bin_list.bin_types(i).mandatory >= 0 Then

                With incumbent.bin(bin_index)
            
                    For k = 1 To incumbent.bin(bin_index).item_cnt
                    
                        If (.items(k).ne_x > bin_list.bin_types(i).width + epsilon) Or (.items(k).ne_y > bin_list.bin_types(i).height + epsilon) Then
                            bin_name = ThisWorkbook.Worksheets("3.Solution").Cells(4, offset + 1)
                                
                            infeasibility_count = infeasibility_count + 1
                            If infeasibility_count < 5 Then
                                infeasibility_string = infeasibility_string & "Item " & k & " in " & bin_name & " is out of the bounds of the bin." & Chr(13)
                            End If
                            If infeasibility_count = 5 Then
                                infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                            End If
                            ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Item " & k & " in " & bin_name & " is out of the bounds of the bin."
                        End If
                    
                        For l = k + 1 To incumbent.bin(bin_index).item_cnt
                            
                            feasibility_flag = True
                            
                            If (.items(k).sw_x > .items(l).sw_x + epsilon) And (.items(k).sw_x < .items(l).ne_x - epsilon) And (.items(k).sw_y > .items(l).sw_y + epsilon) And (.items(k).sw_y < .items(l).ne_y - epsilon) Then feasibility_flag = False
                            
                            If (.items(k).sw_x > .items(l).sw_x + epsilon) And (.items(k).sw_x < .items(l).ne_x - epsilon) And (.items(k).ne_y > .items(l).sw_y + epsilon) And (.items(k).ne_y < .items(l).ne_y - epsilon) Then feasibility_flag = False
                            
                            If (.items(k).ne_x > .items(l).sw_x + epsilon) And (.items(k).ne_x < .items(l).ne_x - epsilon) And (.items(k).sw_y > .items(l).sw_y + epsilon) And (.items(k).sw_y < .items(l).ne_y - epsilon) Then feasibility_flag = False
                            
                            If (.items(k).ne_x > .items(l).sw_x + epsilon) And (.items(k).ne_x < .items(l).ne_x - epsilon) And (.items(k).ne_y > .items(l).sw_y + epsilon) And (.items(k).ne_y < .items(l).ne_y - epsilon) Then feasibility_flag = False
                        
                            If (.items(k).sw_x < .items(l).sw_x) And (.items(k).ne_x > .items(l).ne_x - epsilon) And (.items(k).sw_y > .items(l).sw_y + epsilon) And (.items(k).sw_y < .items(l).ne_y - epsilon) Then feasibility_flag = False
                            
                            If (.items(k).sw_x < .items(l).sw_x + epsilon) And (.items(k).ne_x > .items(l).ne_x - epsilon) And (.items(k).ne_y > .items(l).sw_y + epsilon) And (.items(k).ne_y < .items(l).ne_y - epsilon) Then feasibility_flag = False
                            
                            If (.items(k).sw_y < .items(l).sw_y + epsilon) And (.items(k).ne_y > .items(l).ne_y - epsilon) And (.items(k).sw_x > .items(l).sw_x + epsilon) And (.items(k).sw_x < .items(l).ne_x - epsilon) Then feasibility_flag = False
                            
                            If (.items(k).sw_y < .items(l).sw_y + epsilon) And (.items(k).ne_y > .items(l).ne_y - epsilon) And (.items(k).ne_x > .items(l).sw_x + epsilon) And (.items(k).ne_x < .items(l).ne_x - epsilon) Then feasibility_flag = False
                            
                            If (.items(k).sw_x < .items(l).sw_x + epsilon) And (.items(k).ne_x > .items(l).ne_x - epsilon) And (.items(k).sw_y < .items(l).sw_y + epsilon) And (.items(k).ne_y > .items(l).ne_y - epsilon) Then feasibility_flag = False
        
                            If feasibility_flag = False Then
                            
                                bin_name = ThisWorkbook.Worksheets("3.Solution").Cells(4, offset + 1)
                                
                                infeasibility_count = infeasibility_count + 1
                                If infeasibility_count < 5 Then
                                    infeasibility_string = infeasibility_string & "Items " & k & " and " & l & " in " & bin_name & " are overlapping." & Chr(13)
                                End If
                                If infeasibility_count = 5 Then
                                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                                End If
                                ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Items " & k & " and " & l & " in " & bin_name & " are overlapping."
                            End If
                            
                        Next l
                    Next k
                                        
                End With

                bin_index = bin_index + 1
            End If
            
            offset = offset + offset_constant
        
        Next j
        
    Next i
    
    If instance.guillotine_cuts = True Then
    
        offset = 0
        bin_index = 1
        For i = 1 To bin_list.num_bin_types
        
            For j = 1 To bin_list.bin_types(i).number_available
                    
                bin_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1)
                
                If bin_list.bin_types(i).mandatory >= 0 Then
    
                    With incumbent.bin(bin_index)
                
                        For k = 1 To incumbent.bin(bin_index).item_cnt
                        
                            If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 7) = "" Then
                                infeasibility_count = infeasibility_count + 1
                                If infeasibility_count < 5 Then
                                    infeasibility_string = infeasibility_string & "Item " & k & " in " & bin_name & " does not have cut information." & Chr(13)
                                End If
                                If infeasibility_count = 5 Then
                                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                                End If
                                ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Item " & k & " in " & bin_name & " does not have cut information."
                            End If
                            
                            For l = 1 To k - 1
                                
                                feasibility_flag = True
                                
                                'does the extending cut of item l intersect with item k?
                                
                                If .items(l).first_cut_direction = 0 Then
                                    If (.items(k).sw_x < .items(l).max_x - epsilon) And (.items(k).ne_x > .items(l).sw_x + epsilon) And (.items(k).ne_y > .items(l).ne_y + epsilon) And (.items(k).sw_y < .items(l).ne_y - epsilon) Then feasibility_flag = False
                                Else
                                    If (.items(k).sw_x < .items(l).ne_x - epsilon) And (.items(k).ne_x > .items(l).ne_x + epsilon) And (.items(k).ne_y > .items(l).sw_y + epsilon) And (.items(k).sw_y < .items(l).max_y - epsilon) Then feasibility_flag = False
                                End If
                                
                                If feasibility_flag = False Then
                                    infeasibility_count = infeasibility_count + 1
                                    If infeasibility_count < 5 Then
                                        infeasibility_string = infeasibility_string & "Items " & k & " and " & l & " in " & bin_name & " are overlapping." & Chr(13)
                                    End If
                                    If infeasibility_count = 5 Then
                                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                                    End If
                                    ThisWorkbook.Worksheets("3.Solution").Cells(infeasibility_list_start_index + 8 + infeasibility_count, 1).Value = "Items " & k & " and " & l & " in " & bin_name & " are overlapping."
                                End If
                                
                            Next l
                        Next k
                                            
                    End With
    
                    bin_index = bin_index + 1
                End If
                
                offset = offset + offset_constant
            
            Next j
            
        Next i
        
    End If
            
    If infeasibility_count > 0 Then
        Cells(2, 1) = "Warning: Last infeasibility check found problems with the solution."
        Range(Cells(2, 1), Cells(2, 19)).Interior.ColorIndex = 45
        Range(Cells(2, 1), Cells(2, 19)).Font.Bold = True
        infeasibility_string = infeasibility_string & "The solution is infeasible."
        MsgBox (infeasibility_string)
    Else
        MsgBox ("The solution is feasible.")
    End If
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic

End Sub


Private Sub SortItems()

    Dim i As Long
    Dim j As Long
    
    Dim swap_item_type As item_type_data
    
    If item_list.num_item_types > 1 Then
       For i = 1 To item_list.num_item_types
           For j = item_list.num_item_types To 2 Step -1
               If (item_list.item_types(j).mandatory > item_list.item_types(j - 1).mandatory) Or _
                   ((item_list.item_types(j).mandatory = 1) And (item_list.item_types(j - 1).mandatory = 1) And (item_list.item_types(j).sort_criterion > item_list.item_types(j - 1).sort_criterion)) Or _
                   ((item_list.item_types(j).mandatory = 0) And (item_list.item_types(j - 1).mandatory = 0) And ((item_list.item_types(j).profit / item_list.item_types(j).area) > (item_list.item_types(j - 1).profit / item_list.item_types(j - 1).area))) Then
                   
                   swap_item_type = item_list.item_types(j)
                   item_list.item_types(j) = item_list.item_types(j - 1)
                   item_list.item_types(j - 1) = swap_item_type
                   
               End If
           Next j
       Next i
    End If
    
'    For i = 1 To item_list.num_item_types
'       MsgBox item_list.item_types(i).id & " " & item_list.item_types(i).width & " " & item_list.item_types(i).height & " "
'    Next i
 
End Sub

Private Sub CalculateDistance(solution As solution_data)

    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim item_flag As Boolean
    Dim bin_count As Long
    Dim penalty As Double 'for not fitting an item type into a single bin
    
    If instance.guillotine_cuts = True Then
    
        With solution
        
            .total_distance = 0
            
            For j = 1 To .num_bins
            
                 With .bin(j)
                     For k = 1 To .item_cnt
                        solution.total_distance = solution.total_distance + .items(k).cut_length
                     Next k
                 End With
    
            Next j
            
        End With
            
    Else
    
        penalty = 1000 ' perhaps find a better value here?
        
        With solution
        
            .total_distance = 0
            
            For j = 1 To .num_bins
            
                 With .bin(j)
                     For k = 1 To .item_cnt
                         For l = k + 1 To .item_cnt
                             If .items(k).item_type = .items(l).item_type Then
                                 solution.total_distance = solution.total_distance + Abs(.items(k).ne_x + .items(k).sw_x - .items(l).ne_x - .items(l).sw_x) + Abs(.items(k).ne_y + .items(k).sw_y - .items(l).ne_y - .items(l).sw_y)
                             End If
                         Next l
                     Next k
                 End With
    
            Next j
            
            For i = 1 To item_list.num_item_types
                bin_count = 0
                For j = 1 To .num_bins
    
                     With .bin(j)
                         item_flag = False
                         For k = 1 To .item_cnt
                                If .items(k).item_type = i Then
                                    item_flag = True
                                    Exit For
                                End If
                         Next k
                         
                         If item_flag = True Then bin_count = bin_count + 1
                     End With
        
                Next j
                
                solution.total_distance = solution.total_distance + penalty * bin_count * bin_count
            Next i
        End With
    End If
    
End Sub

' ribbon calls and tab activation

#If Win32 Or Win64 Or (MAC_OFFICE_VERSION >= 15) Then

Sub BPP_Solver_ribbon_call(control As IRibbonControl)
    Call BPP_Solver
End Sub
Sub FeasibilityCheckDataAndSolutionRibbonCall(control As IRibbonControl)
    Call FeasibilityCheckDataAndSolution
End Sub

#End If
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/.

Option Explicit

Private Const BPP_TAG = "BPPSolverXla"
Private Const BPP_TOOLS_MENU_ID As Long = 30007&
Friend Sub Workbook_Open()
    
    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("BPP Solver Console")
    
    If WorksheetExists = False Then
        Call SetupConsoleWorksheet
    End If
    
    'ThisWorkbook.Worksheets("VRP Solver Console").Activate
    
    Application.DefaultFilePath = CStr(Application.ActiveWorkbook.Path)
    
    'From http://www.cpearson.com/excel/createaddinsamplecode.aspx

#If Mac And (MAC_OFFICE_VERSION < 15) Then

    DeleteControls
    
    Dim ToolsMenu As Office.CommandBarControl
    Dim ToolsMenuItem As Office.CommandBarControl
    Dim ToolsMenuControl As Office.CommandBarControl
    
    Set ToolsMenu = Application.CommandBars.FindControl(id:=BPP_TOOLS_MENU_ID)
    If ToolsMenu Is Nothing Then
        MsgBox "Unable to access Tools menu.", vbOKOnly
        Exit Sub
    End If
    
    Set ToolsMenuItem = ToolsMenu.Controls.Add(Type:=msoControlPopup, temporary:=True)
    If ToolsMenuItem Is Nothing Then
        MsgBox "Unable to add item to the Tools menu.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuItem
        .Caption = "&BPP Spreadsheet Solver"
        .BeginGroup = True
        .Tag = BPP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "0. Optional - Reset the workbook"
        .OnAction = "'" & ActiveWorkbook.Name & "'!ResetWorkbook"
        .Tag = BPP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "1.1 Setup Items Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupItemsWorksheet"
        .Tag = BPP_TAG
    End With
    
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "1.2 Optional - Sort items alphabetically"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SortItemTypes"
        .Tag = BPP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "1.3 Optional - Setup item-item compatibility worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupItemItemCompatibilityWorksheet"
        .Tag = BPP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "2.1 Setup Bins Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupBinsWorksheet"
        .Tag = BPP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "2.2 Optional - Sort bins alphabetically"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SortBinTypes"
        .Tag = BPP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "2.3 Optional - Setup bin-item compatibility worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupBinItemCompatibilityWorksheet"
        .Tag = BPP_TAG
    End With
        
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "3. Setup Solution Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupSolutionWorksheet"
        .Tag = BPP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "4. Optional - Setup Visualization Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupVisualizationWorksheet"
        .Tag = BPP_TAG
    End With
       
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "5.1 Engage BPP Spreadsheet Solver"
        .OnAction = "'" & ActiveWorkbook.Name & "'!BPP_Solver"
        .Tag = BPP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "5.2 Optional - Feasibility Check"
        .OnAction = "'" & ActiveWorkbook.Name & "'!FeasibilityCheckDataAndSolution"
        .Tag = BPP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "Watch the tutorial video on YouTube"
        .OnAction = "'" & ActiveWorkbook.Name & "'!WatchTutorial"
        .Tag = BPP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "Send feedback / ask a question"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SendFeedback"
        .Tag = BPP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "About"
        .OnAction = "'" & ActiveWorkbook.Name & "'!About"
        .Tag = BPP_TAG
    End With
  

#End If
    
    Columns("A").AutoFit
    Columns("B").AutoFit
    'Columns("C").AutoFit
    Columns("D").AutoFit
    
    Application.StatusBar = False

End Sub

#If Mac And (MAC_OFFICE_VERSION < 15) Then

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    DeleteControls
End Sub

Private Sub DeleteControls()

Dim Ctrl As Office.CommandBarControl

On Error Resume Next
Set Ctrl = Application.CommandBars.FindControl(Tag:=BPP_TAG)

Do Until Ctrl Is Nothing
    Ctrl.Delete
    Set Ctrl = Application.CommandBars.FindControl(Tag:=BPP_TAG)
Loop

End Sub
Private Sub Workbook_Deactivate()
    DeleteControls
End Sub

#End If

Sub Workbook_SheetActivate(ByVal Sh As Object)
    
    If Sh.Name = "4.Visualization" Then
        
        Call RefreshVisualizationWorksheet
    
    End If
End Sub

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    
    Dim reply As Integer
    Dim num_item_types As Long
    Dim num_bin_types As Long
    
    If Sh.Name = "BPP Solver Console" Then
        
        If Not Intersect(Target, Sh.Range("C2")) Is Nothing Then
            If CheckWorksheetExistence("1.Items") Or CheckWorksheetExistence("2.Bins") Or CheckWorksheetExistence("3.Solution") Or CheckWorksheetExistence("4.Visualization") Then
                reply = MsgBox("Warning! You are changing the problem size parameters, which will not be reflected on the existing worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
        
        If Not Intersect(Target, Sh.Range("C4")) Is Nothing Then
            If CheckWorksheetExistence("2.Bins") Or CheckWorksheetExistence("3.Solution") Or CheckWorksheetExistence("4.Visualization") Then
                reply = MsgBox("Warning! You are changing the problem size parameters, which will not be reflected on the existing worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
        
        If Not Intersect(Target, Sh.Range("C6")) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                ThisWorkbook.Worksheets("3.Solution").Cells(2, 1) = "Warning: Problem data has changed since the last feasibility check / solver run."
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 19).Address).Interior.ColorIndex = 45
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 19).Address).Font.Bold = True
            End If
        End If
    
    End If
    
    If Sh.Name = "1.Items" Then
        
        num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
        
        If Not Intersect(Target, Sh.Range(Cells(1, 1).Address & ":" & Cells(1 + num_item_types, 2).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                ThisWorkbook.Worksheets("3.Solution").Cells(2, 1) = "Warning: Problem data has changed since the last feasibility check / solver run."
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 19).Address).Interior.ColorIndex = 45
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 19).Address).Font.Bold = True
            End If
        End If
        
        If Not Intersect(Target, Sh.Range(Cells(1, 4).Address & ":" & Cells(1 + num_item_types, 9).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                ThisWorkbook.Worksheets("3.Solution").Cells(2, 1) = "Warning: Problem data has changed since the last feasibility check / solver run."
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 19).Address).Interior.ColorIndex = 45
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 19).Address).Font.Bold = True
            End If
        End If
        
        If Not Intersect(Target, Sh.Range(Cells(1, 10).Address & ":" & Cells(1 + num_item_types, 10).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                reply = MsgBox("Warning! You are changing parameters regarding items, which may render the current solution infeasible or suboptimal, and will not be reflected on the subsequent worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
    
    End If
    
    If Sh.Name = "1.3.Item-Item Compatibility" Then
    
        num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
        
        If Not Intersect(Target, Sh.Range(Cells(1, 1).Address & ":" & Cells(2 + num_item_types * (num_item_types - 1), 3).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                ThisWorkbook.Worksheets("3.Solution").Cells(2, 1) = "Warning: Problem data has changed since the last feasibility check / solver run."
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 19).Address).Interior.ColorIndex = 45
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 19).Address).Font.Bold = True
            End If
        End If
        
    End If
    
    If Sh.Name = "2.Bins" Then
        
        num_bin_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(4, 3).Value
        
        If Not Intersect(Target, Sh.Range(Cells(1, 1).Address & ":" & Cells(1 + num_bin_types, 7).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                ThisWorkbook.Worksheets("3.Solution").Cells(2, 1) = "Warning: Problem data has changed since the last feasibility check / solver run."
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 19).Address).Interior.ColorIndex = 45
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 19).Address).Font.Bold = True
            End If
        End If
        
        If Not Intersect(Target, Sh.Range(Cells(1, 9).Address & ":" & Cells(1 + num_bin_types, 9).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                reply = MsgBox("Warning! You are changing parameters regarding bins, which may render the current solution infeasible or suboptimal, and the change will not be reflected on the solution and visualization worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
    
    End If
    
    If Sh.Name = "2.3.Bin-Item Compatibility" Then
    
        num_item_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(2, 3).Value
        num_bin_types = ThisWorkbook.Worksheets("BPP Solver Console").Cells(4, 3).Value
        
        If Not Intersect(Target, Sh.Range(Cells(1, 1).Address & ":" & Cells(2 + num_item_types * num_bin_types, 3).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                ThisWorkbook.Worksheets("3.Solution").Cells(2, 1) = "Warning: Problem data has changed since the last feasibility check / solver run."
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 19).Address).Interior.ColorIndex = 45
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 19).Address).Font.Bold = True
            End If
        End If
        
    End If
    

End Sub


' InQuest injected base64 decoded content
' bn)b

INQUEST-PP=macro
