Attribute VB_Name = "QRCodeImageMake"
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  |fffd||fffd||fffd||b2||fffd||fffd||5b4||fffd||fffd||fffd||fffd||7b8||fffd||fffd||fffd|ExcelHome
''  [|fffd||fffd||fffd||fffd|] |fffd||fffd||3ac||fffd||fffd||73b||23b37||fffd||fffd||fffd|EXCEL|fffd||fffd||3ac||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5f7||fffd||4f7||fffd||fffd||fffd||534||fffd||b8e9|
''
''  |fffd||fffd||fffd||7e3||fffd|yuanhongly
''
''  |52d||fffd||fffd||fffd||fffd||5b7||fffd||fffd|
''  http://club.excelhome.net/thread-1044486-1-1.html
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Option Explicit

Private Type PictDesc
    cbSizeOfStruct As Long
    picType As Long
    hImage As Long
    xExt As Long
    yExt As Long
End Type

Private Type GUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(0 To 7) As Byte
End Type

Private Type BITMAPINFOHEADER
    biSize As Long
    biWidth As Long
    biHeight As Long
    biPlanes As Integer
    biBitCount As Integer
    biCompression As Long
    biSizeImage As Long
    biXPelsPerMeter As Long
    biYPelsPerMeter As Long
    biClrUsed As Long
    biClrImportant As Long
End Type

Private Type BITMAPINFO
    bmiHeader As BITMAPINFOHEADER
    bmiColors(255) As Long
End Type

Private Type rect
    Left As Long
    Top As Long
    Right As Long
    Bottom As Long
End Type

#If VBA7 Then
Private Declare PtrSafe Function StretchDIBits Lib "gdi32.dll" (ByVal hDC As Long, ByVal x As Long, ByVal Y As Long, _
        ByVal dx As Long, ByVal dy As Long, ByVal SrcX As Long, ByVal SrcY As Long, ByVal wSrcWidth As Long, _
        ByVal wSrcHeight As Long, ByRef lpBits As Any, ByRef lpBitsInfo As BITMAPINFO, ByVal wUsage As Long, _
        ByVal dwRop As Long) As Long
Private Declare PtrSafe Function CreateSolidBrush Lib "gdi32.dll" (ByVal crColor As Long) As Long
Private Declare PtrSafe Function FillRect Lib "user32.dll" (ByVal hDC As Long, ByRef lpRect As rect, ByVal hBrush As Long) As Long
Private Declare PtrSafe Function GetDC Lib "user32.dll" (ByVal hWnd As Long) As Long
Private Declare PtrSafe Function CreateCompatibleDC Lib "gdi32.dll" (ByVal hDC As Long) As Long
Private Declare PtrSafe Function CreateCompatibleBitmap Lib "gdi32.dll" (ByVal hDC As Long, ByVal nWidth As Long, _
        ByVal nHeight As Long) As Long
Private Declare PtrSafe Function SelectObject Lib "gdi32.dll" (ByVal hDC As Long, ByVal hObject As Long) As Long
Private Declare PtrSafe Function DeleteObject Lib "gdi32.dll" (ByVal hObject As Long) As Long
Private Declare PtrSafe Function DeleteDC Lib "gdi32.dll" (ByVal hDC As Long) As Long
Private Declare PtrSafe Function ReleaseDC Lib "user32.dll" (ByVal hWnd As Long, ByVal hDC As Long) As Long
Private Declare PtrSafe Function OleCreatePictureIndirect Lib "olepro32.dll" (lpPictDesc As PictDesc, riid As GUID, _
        ByVal fPictureOwnsHandle As Long, IPic As IUnknown) As Long

' Clipboard Manager Functions
Private Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal hWnd As Long) As Long
Private Declare PtrSafe Function CloseClipboard Lib "user32" () As Long
Private Declare PtrSafe Function SetClipboardData Lib "user32" (ByVal wFormat As Long, ByVal hMem As Long) As Long
Private Declare PtrSafe Function EmptyClipboard Lib "user32" () As Long

#Else

Private Declare Function StretchDIBits Lib "gdi32.dll" (ByVal hDC As Long, ByVal x As Long, ByVal Y As Long, _
        ByVal dx As Long, ByVal dy As Long, ByVal SrcX As Long, ByVal SrcY As Long, ByVal wSrcWidth As Long, _
        ByVal wSrcHeight As Long, ByRef lpBits As Any, ByRef lpBitsInfo As BITMAPINFO, ByVal wUsage As Long, _
        ByVal dwRop As Long) As Long
Private Declare Function CreateSolidBrush Lib "gdi32.dll" (ByVal crColor As Long) As Long
Private Declare Function FillRect Lib "user32.dll" (ByVal hDC As Long, ByRef lpRect As rect, ByVal hBrush As Long) As Long
Private Declare Function GetDC Lib "user32.dll" (ByVal hWnd As Long) As Long
Private Declare Function CreateCompatibleDC Lib "gdi32.dll" (ByVal hDC As Long) As Long
Private Declare Function CreateCompatibleBitmap Lib "gdi32.dll" (ByVal hDC As Long, ByVal nWidth As Long, _
        ByVal nHeight As Long) As Long
Private Declare Function SelectObject Lib "gdi32.dll" (ByVal hDC As Long, ByVal hObject As Long) As Long
Private Declare Function DeleteObject Lib "gdi32.dll" (ByVal hObject As Long) As Long
Private Declare Function DeleteDC Lib "gdi32.dll" (ByVal hDC As Long) As Long
Private Declare Function ReleaseDC Lib "user32.dll" (ByVal hWnd As Long, ByVal hDC As Long) As Long
Private Declare Function OleCreatePictureIndirect Lib "olepro32.dll" (lpPictDesc As PictDesc, riid As GUID, _
        ByVal fPictureOwnsHandle As Long, IPic As IUnknown) As Long

' Clipboard Manager Functions
Private Declare Function OpenClipboard Lib "user32" (ByVal hWnd As Long) As Long
Private Declare Function CloseClipboard Lib "user32" () As Long
Private Declare Function SetClipboardData Lib "user32" (ByVal wFormat As Long, ByVal hMem As Long) As Long
Private Declare Function EmptyClipboard Lib "user32" () As Long
#End If

Private hBmp As Long
Private BitArray() As Long

Public Function BitmapToPicture(ByVal hBmp As Long, ByVal fPictureOwnsHandle As Long) As StdPicture
    If (hBmp = 0) Then Exit Function
    Dim oNewPic As IUnknown, tPicConv As PictDesc, IGuid As GUID
    With tPicConv
        .cbSizeOfStruct = Len(tPicConv)
        .picType = 1
        .hImage = hBmp
    End With
    With IGuid
        .Data4(0) = &HC0
        .Data4(7) = &H46
    End With
    OleCreatePictureIndirect tPicConv, IGuid, fPictureOwnsHandle, oNewPic
    Set BitmapToPicture = oNewPic
End Function

Public Function ArrayToPicture(ByVal lp As Long, ByVal nWidth As Long, ByVal nHeight As Long, _
        Optional ByVal Margin As Long = 1, Optional BgColor As Long = 16777215) As StdPicture
    Set ArrayToPicture = BitmapToPicture(ByteArrayToBitmap(lp, nWidth, nHeight, Margin, BgColor), 1)
End Function

Public Function ArrayToBitmap(ByVal lp As LongPtr, ByVal nWidth As Long, ByVal nHeight As Long, _
        Optional ByVal Margin As Long = 1, Optional BgColor As Long = 16777215, _
        Optional Zoom As Double = 5) As Long
        
    Dim tBMI As BITMAPINFO
    Dim h As Long, hDC As Long
    Dim hbr As Long
    Dim R As rect
    Dim DestWidth As Long, DestHeight As Long
    
    Margin = Margin * Zoom
    DestWidth = (nWidth - 3) * Zoom + Margin * 2
    DestHeight = (nHeight - 3) * Zoom + Margin * 2
    With tBMI.bmiHeader
        .biSize = 40&
        .biWidth = nWidth
        .biHeight = -nHeight
        .biPlanes = 1
        .biBitCount = 32
        .biSizeImage = DestWidth * DestHeight
    End With
    tBMI.bmiColors(0) = &HFFFFFF
    tBMI.bmiColors(2) = &H808080
    h = GetDC(0)
    hDC = CreateCompatibleDC(h)
    R.Right = DestWidth
    R.Bottom = DestHeight
    hBmp = CreateCompatibleBitmap(h, R.Right, R.Bottom)
    hBmp = SelectObject(hDC, hBmp)
    hbr = CreateSolidBrush(RGBToBGR(BgColor))
    Call FillRect(hDC, R, hbr)
    Call DeleteObject(hbr)
    Call StretchDIBits(hDC, Margin, Margin, DestWidth - Margin * 2, DestHeight - Margin * 2, 0, 3, nWidth - 3, nHeight - 3, ByVal lp, tBMI, 0, &HCC0020)
    hBmp = SelectObject(hDC, hBmp)
    Call DeleteDC(hDC)
    Call ReleaseDC(0, h)
    ArrayToBitmap = hBmp
End Function

Public Function QRCodeToPicture(Optional DotColor As Long = 0, Optional BgColor As Long = 16777215, Optional Zoom As Double = 5) As StdPicture
    Set QRCodeToPicture = BitmapToPicture(hBmp, 1)
End Function

Public Function QRCodeToClipboard() As Boolean
    Dim done As Boolean
    done = False
    If OpenClipboard(0) Then
        Call EmptyClipboard
        Call SetClipboardData(2, hBmp)
        Call CloseClipboard
        done = True
        
    End If
       QRCodeToClipboard = done
End Function

Public Sub CreateBitmapQRCode(Optional DotColor As Long = 0, Optional BgColor As Long = 16777215, Optional Zoom As Double = 5)
    Dim x As Integer, Y As Integer
    Dim m As Integer
    
    m = UBound(QRMaskedArray, 2)
    ReDim BitArray(0 To m + 3, 0 To m + 3)
    For Y = 0 To m + 3
        For x = 0 To m + 3
            If x > m Or Y > m Then
                BitArray(x, Y) = BgColor
            Else
                BitArray(x, Y) = IIf(QRMaskedArray(0, x, Y) > 0, DotColor, BgColor)
            End If
        Next x
    Next Y
    Call ArrayToBitmap(VarPtr(BitArray(0, 0)), UBound(BitArray) + 1, UBound(BitArray) + 1, 1, BgColor)
End Sub

Private Function RGBToBGR(RGBValue As Long) As Long
    Dim R As Integer, G As Integer, B As Integer
    
    R = RGBValue Mod 256
    G = (RGBValue \ 256) Mod 256
    B = RGBValue \ 65536 Mod 256
    RGBToBGR = RGB(B, G, R)
End Function

Attribute VB_Name = "QRCodeMakeCall"
Sub doMakeQRCode(content, rect)
Attribute doMakeQRCode.VB_Description = "|fffd||fffd||3ac||fffd||fffd||fffd||2bc||fffd||fffd|"
Attribute doMakeQRCode.VB_ProcData.VB_Invoke_Func = " \n14"
'
' QRCodeInit |fffd||fffd|
' |fffd||fffd||3ac||fffd||fffd||fffd||2bc||fffd||fffd|
'
'

    Dim done As Boolean
    

    Dim t As String
    t = content
    
    Call QRMain(t)
    Call CreateBitmapQRCode(RGB(0, 0, 0), RGB(255, 255, 255))
    
    done = QRCodeToClipboard
    If done = True Then
        Sheets("Printing").Range(rect).Select
        Sheets("Printing").Paste
        Selection.Width = 156
    End If

End Sub
Attribute VB_Name = "QRCodeMakeWithColor"
Option Explicit

Public Type AlignPatternPosType
    Count As Integer
    Pos(1 To 7) As Integer
End Type

Public Enum EncodingModeType
    EM_Numeric = 1
    EM_Alphanumeric = 2
    EM_Byte = 4
    EM_Kanji = 8
End Enum

Public Enum ECLevelType
    ECL_L = 1
    ECL_M = 2
    ECL_Q = 3
    ECL_H = 4
End Enum

Public Enum ModeIndicatorType
    MI_Numeric = 1
    MI_Alphanumeric = 2
    MI_Byte = 4
    MI_Kanji = 8
    MI_ECI = 16
End Enum

Public Type ECBlockInfoType
    LenData As Integer
    LenEC As Integer
    BlockCount(1 To 2) As Integer
    LenBlock(1 To 2) As Integer
End Type

Public CharCountIndicator(1 To 40, 1 To 8)
Public ECBlockTable(1 To 40, 1 To 4) As ECBlockInfoType
Public GF(0 To 255) As Integer
Public LogA(1 To 255) As Integer
Public ALogA(0 To 254) As Integer
Public APat(1 To 40) As AlignPatternPosType
Public FmtInfoTable(1 To 4, 0 To 7) As Long
Public VerInfoTable(7 To 40) As Long
Public QRInitialized As Boolean

Public Sub IntializeQRConst()
    Dim i As Integer
    
    'Initlize Character Count Indicator
    For i = 1 To 40
        Select Case i
        Case 1 To 9
            CharCountIndicator(i, 1) = 10
            CharCountIndicator(i, 2) = 9
            CharCountIndicator(i, 4) = 8
            CharCountIndicator(i, 8) = 8
        Case 10 To 26
            CharCountIndicator(i, 1) = 12
            CharCountIndicator(i, 2) = 11
            CharCountIndicator(i, 4) = 16
            CharCountIndicator(i, 8) = 10
        Case 27 To 40
            CharCountIndicator(i, 1) = 14
            CharCountIndicator(i, 2) = 13
            CharCountIndicator(i, 4) = 16
            CharCountIndicator(i, 8) = 12
        End Select
    Next i

    'Intialize Error Correction Table
    ECBlockTable(1, 1).LenData = 19: ECBlockTable(1, 1).LenEC = 7: ECBlockTable(1, 1).BlockCount(1) = 1: ECBlockTable(1, 1).LenBlock(1) = 19
    ECBlockTable(1, 2).LenData = 16: ECBlockTable(1, 2).LenEC = 10: ECBlockTable(1, 2).BlockCount(1) = 1: ECBlockTable(1, 2).LenBlock(1) = 16
    ECBlockTable(1, 3).LenData = 13: ECBlockTable(1, 3).LenEC = 13: ECBlockTable(1, 3).BlockCount(1) = 1: ECBlockTable(1, 3).LenBlock(1) = 13
    ECBlockTable(1, 4).LenData = 9: ECBlockTable(1, 4).LenEC = 17: ECBlockTable(1, 4).BlockCount(1) = 1: ECBlockTable(1, 4).LenBlock(1) = 9
    ECBlockTable(2, 1).LenData = 34: ECBlockTable(2, 1).LenEC = 10: ECBlockTable(2, 1).BlockCount(1) = 1: ECBlockTable(2, 1).LenBlock(1) = 34
    ECBlockTable(2, 2).LenData = 28: ECBlockTable(2, 2).LenEC = 16: ECBlockTable(2, 2).BlockCount(1) = 1: ECBlockTable(2, 2).LenBlock(1) = 28
    ECBlockTable(2, 3).LenData = 22: ECBlockTable(2, 3).LenEC = 22: ECBlockTable(2, 3).BlockCount(1) = 1: ECBlockTable(2, 3).LenBlock(1) = 22
    ECBlockTable(2, 4).LenData = 16: ECBlockTable(2, 4).LenEC = 28: ECBlockTable(2, 4).BlockCount(1) = 1: ECBlockTable(2, 4).LenBlock(1) = 16
    ECBlockTable(3, 1).LenData = 55: ECBlockTable(3, 1).LenEC = 15: ECBlockTable(3, 1).BlockCount(1) = 1: ECBlockTable(3, 1).LenBlock(1) = 55
    ECBlockTable(3, 2).LenData = 44: ECBlockTable(3, 2).LenEC = 26: ECBlockTable(3, 2).BlockCount(1) = 1: ECBlockTable(3, 2).LenBlock(1) = 44
    ECBlockTable(3, 3).LenData = 34: ECBlockTable(3, 3).LenEC = 18: ECBlockTable(3, 3).BlockCount(1) = 2: ECBlockTable(3, 3).LenBlock(1) = 17
    ECBlockTable(3, 4).LenData = 26: ECBlockTable(3, 4).LenEC = 22: ECBlockTable(3, 4).BlockCount(1) = 2: ECBlockTable(3, 4).LenBlock(1) = 13
    ECBlockTable(4, 1).LenData = 80: ECBlockTable(4, 1).LenEC = 20: ECBlockTable(4, 1).BlockCount(1) = 1: ECBlockTable(4, 1).LenBlock(1) = 80
    ECBlockTable(4, 2).LenData = 64: ECBlockTable(4, 2).LenEC = 18: ECBlockTable(4, 2).BlockCount(1) = 2: ECBlockTable(4, 2).LenBlock(1) = 32
    ECBlockTable(4, 3).LenData = 48: ECBlockTable(4, 3).LenEC = 26: ECBlockTable(4, 3).BlockCount(1) = 2: ECBlockTable(4, 3).LenBlock(1) = 24
    ECBlockTable(4, 4).LenData = 36: ECBlockTable(4, 4).LenEC = 16: ECBlockTable(4, 4).BlockCount(1) = 4: ECBlockTable(4, 4).LenBlock(1) = 9
    ECBlockTable(5, 1).LenData = 108: ECBlockTable(5, 1).LenEC = 26: ECBlockTable(5, 1).BlockCount(1) = 1: ECBlockTable(5, 1).LenBlock(1) = 108
    ECBlockTable(5, 2).LenData = 86: ECBlockTable(5, 2).LenEC = 24: ECBlockTable(5, 2).BlockCount(1) = 2: ECBlockTable(5, 2).LenBlock(1) = 43
    ECBlockTable(5, 3).LenData = 62: ECBlockTable(5, 3).LenEC = 18: ECBlockTable(5, 3).BlockCount(1) = 2: ECBlockTable(5, 3).LenBlock(1) = 15: ECBlockTable(5, 3).BlockCount(2) = 2: ECBlockTable(5, 3).LenBlock(2) = 16
    ECBlockTable(5, 4).LenData = 46: ECBlockTable(5, 4).LenEC = 22: ECBlockTable(5, 4).BlockCount(1) = 2: ECBlockTable(5, 4).LenBlock(1) = 11: ECBlockTable(5, 4).BlockCount(2) = 2: ECBlockTable(5, 4).LenBlock(2) = 12
    ECBlockTable(6, 1).LenData = 136: ECBlockTable(6, 1).LenEC = 18: ECBlockTable(6, 1).BlockCount(1) = 2: ECBlockTable(6, 1).LenBlock(1) = 68
    ECBlockTable(6, 2).LenData = 108: ECBlockTable(6, 2).LenEC = 16: ECBlockTable(6, 2).BlockCount(1) = 4: ECBlockTable(6, 2).LenBlock(1) = 27
    ECBlockTable(6, 3).LenData = 76: ECBlockTable(6, 3).LenEC = 24: ECBlockTable(6, 3).BlockCount(1) = 4: ECBlockTable(6, 3).LenBlock(1) = 19
    ECBlockTable(6, 4).LenData = 60: ECBlockTable(6, 4).LenEC = 28: ECBlockTable(6, 4).BlockCount(1) = 4: ECBlockTable(6, 4).LenBlock(1) = 15
    ECBlockTable(7, 1).LenData = 156: ECBlockTable(7, 1).LenEC = 20: ECBlockTable(7, 1).BlockCount(1) = 2: ECBlockTable(7, 1).LenBlock(1) = 78
    ECBlockTable(7, 2).LenData = 124: ECBlockTable(7, 2).LenEC = 18: ECBlockTable(7, 2).BlockCount(1) = 4: ECBlockTable(7, 2).LenBlock(1) = 31
    ECBlockTable(7, 3).LenData = 88: ECBlockTable(7, 3).LenEC = 18: ECBlockTable(7, 3).BlockCount(1) = 2: ECBlockTable(7, 3).LenBlock(1) = 14: ECBlockTable(7, 3).BlockCount(2) = 4: ECBlockTable(7, 3).LenBlock(2) = 15
    ECBlockTable(7, 4).LenData = 66: ECBlockTable(7, 4).LenEC = 26: ECBlockTable(7, 4).BlockCount(1) = 4: ECBlockTable(7, 4).LenBlock(1) = 13: ECBlockTable(7, 4).BlockCount(2) = 1: ECBlockTable(7, 4).LenBlock(2) = 14
    ECBlockTable(8, 1).LenData = 194: ECBlockTable(8, 1).LenEC = 24: ECBlockTable(8, 1).BlockCount(1) = 2: ECBlockTable(8, 1).LenBlock(1) = 97
    ECBlockTable(8, 2).LenData = 154: ECBlockTable(8, 2).LenEC = 22: ECBlockTable(8, 2).BlockCount(1) = 2: ECBlockTable(8, 2).LenBlock(1) = 38: ECBlockTable(8, 2).BlockCount(2) = 2: ECBlockTable(8, 2).LenBlock(2) = 39
    ECBlockTable(8, 3).LenData = 110: ECBlockTable(8, 3).LenEC = 22: ECBlockTable(8, 3).BlockCount(1) = 4: ECBlockTable(8, 3).LenBlock(1) = 18: ECBlockTable(8, 3).BlockCount(2) = 2: ECBlockTable(8, 3).LenBlock(2) = 19
    ECBlockTable(8, 4).LenData = 86: ECBlockTable(8, 4).LenEC = 26: ECBlockTable(8, 4).BlockCount(1) = 4: ECBlockTable(8, 4).LenBlock(1) = 14: ECBlockTable(8, 4).BlockCount(2) = 2: ECBlockTable(8, 4).LenBlock(2) = 15
    ECBlockTable(9, 1).LenData = 232: ECBlockTable(9, 1).LenEC = 30: ECBlockTable(9, 1).BlockCount(1) = 2: ECBlockTable(9, 1).LenBlock(1) = 116
    ECBlockTable(9, 2).LenData = 182: ECBlockTable(9, 2).LenEC = 22: ECBlockTable(9, 2).BlockCount(1) = 3: ECBlockTable(9, 2).LenBlock(1) = 36: ECBlockTable(9, 2).BlockCount(2) = 2: ECBlockTable(9, 2).LenBlock(2) = 37
    ECBlockTable(9, 3).LenData = 132: ECBlockTable(9, 3).LenEC = 20: ECBlockTable(9, 3).BlockCount(1) = 4: ECBlockTable(9, 3).LenBlock(1) = 16: ECBlockTable(9, 3).BlockCount(2) = 4: ECBlockTable(9, 3).LenBlock(2) = 17
    ECBlockTable(9, 4).LenData = 100: ECBlockTable(9, 4).LenEC = 24: ECBlockTable(9, 4).BlockCount(1) = 4: ECBlockTable(9, 4).LenBlock(1) = 12: ECBlockTable(9, 4).BlockCount(2) = 4: ECBlockTable(9, 4).LenBlock(2) = 13
    ECBlockTable(10, 1).LenData = 274: ECBlockTable(10, 1).LenEC = 18: ECBlockTable(10, 1).BlockCount(1) = 2: ECBlockTable(10, 1).LenBlock(1) = 68: ECBlockTable(10, 1).BlockCount(2) = 2: ECBlockTable(10, 1).LenBlock(2) = 69
    ECBlockTable(10, 2).LenData = 216: ECBlockTable(10, 2).LenEC = 26: ECBlockTable(10, 2).BlockCount(1) = 4: ECBlockTable(10, 2).LenBlock(1) = 43: ECBlockTable(10, 2).BlockCount(2) = 1: ECBlockTable(10, 2).LenBlock(2) = 44
    ECBlockTable(10, 3).LenData = 154: ECBlockTable(10, 3).LenEC = 24: ECBlockTable(10, 3).BlockCount(1) = 6: ECBlockTable(10, 3).LenBlock(1) = 19: ECBlockTable(10, 3).BlockCount(2) = 2: ECBlockTable(10, 3).LenBlock(2) = 20
    ECBlockTable(10, 4).LenData = 122: ECBlockTable(10, 4).LenEC = 28: ECBlockTable(10, 4).BlockCount(1) = 6: ECBlockTable(10, 4).LenBlock(1) = 15: ECBlockTable(10, 4).BlockCount(2) = 2: ECBlockTable(10, 4).LenBlock(2) = 16
    ECBlockTable(11, 1).LenData = 324: ECBlockTable(11, 1).LenEC = 20: ECBlockTable(11, 1).BlockCount(1) = 4: ECBlockTable(11, 1).LenBlock(1) = 81
    ECBlockTable(11, 2).LenData = 254: ECBlockTable(11, 2).LenEC = 30: ECBlockTable(11, 2).BlockCount(1) = 1: ECBlockTable(11, 2).LenBlock(1) = 50: ECBlockTable(11, 2).BlockCount(2) = 4: ECBlockTable(11, 2).LenBlock(2) = 51
    ECBlockTable(11, 3).LenData = 180: ECBlockTable(11, 3).LenEC = 28: ECBlockTable(11, 3).BlockCount(1) = 4: ECBlockTable(11, 3).LenBlock(1) = 22: ECBlockTable(11, 3).BlockCount(2) = 4: ECBlockTable(11, 3).LenBlock(2) = 23
    ECBlockTable(11, 4).LenData = 140: ECBlockTable(11, 4).LenEC = 24: ECBlockTable(11, 4).BlockCount(1) = 3: ECBlockTable(11, 4).LenBlock(1) = 12: ECBlockTable(11, 4).BlockCount(2) = 8: ECBlockTable(11, 4).LenBlock(2) = 13
    ECBlockTable(12, 1).LenData = 370: ECBlockTable(12, 1).LenEC = 24: ECBlockTable(12, 1).BlockCount(1) = 2: ECBlockTable(12, 1).LenBlock(1) = 92: ECBlockTable(12, 1).BlockCount(2) = 2: ECBlockTable(12, 1).LenBlock(2) = 93
    ECBlockTable(12, 2).LenData = 290: ECBlockTable(12, 2).LenEC = 22: ECBlockTable(12, 2).BlockCount(1) = 6: ECBlockTable(12, 2).LenBlock(1) = 36: ECBlockTable(12, 2).BlockCount(2) = 2: ECBlockTable(12, 2).LenBlock(2) = 37
    ECBlockTable(12, 3).LenData = 206: ECBlockTable(12, 3).LenEC = 26: ECBlockTable(12, 3).BlockCount(1) = 4: ECBlockTable(12, 3).LenBlock(1) = 20: ECBlockTable(12, 3).BlockCount(2) = 6: ECBlockTable(12, 3).LenBlock(2) = 21
    ECBlockTable(12, 4).LenData = 158: ECBlockTable(12, 4).LenEC = 28: ECBlockTable(12, 4).BlockCount(1) = 7: ECBlockTable(12, 4).LenBlock(1) = 14: ECBlockTable(12, 4).BlockCount(2) = 4: ECBlockTable(12, 4).LenBlock(2) = 15
    ECBlockTable(13, 1).LenData = 428: ECBlockTable(13, 1).LenEC = 26: ECBlockTable(13, 1).BlockCount(1) = 4: ECBlockTable(13, 1).LenBlock(1) = 107
    ECBlockTable(13, 2).LenData = 334: ECBlockTable(13, 2).LenEC = 22: ECBlockTable(13, 2).BlockCount(1) = 8: ECBlockTable(13, 2).LenBlock(1) = 37: ECBlockTable(13, 2).BlockCount(2) = 1: ECBlockTable(13, 2).LenBlock(2) = 38
    ECBlockTable(13, 3).LenData = 244: ECBlockTable(13, 3).LenEC = 24: ECBlockTable(13, 3).BlockCount(1) = 8: ECBlockTable(13, 3).LenBlock(1) = 20: ECBlockTable(13, 3).BlockCount(2) = 4: ECBlockTable(13, 3).LenBlock(2) = 21
    ECBlockTable(13, 4).LenData = 180: ECBlockTable(13, 4).LenEC = 22: ECBlockTable(13, 4).BlockCount(1) = 12: ECBlockTable(13, 4).LenBlock(1) = 11: ECBlockTable(13, 4).BlockCount(2) = 4: ECBlockTable(13, 4).LenBlock(2) = 12
    ECBlockTable(14, 1).LenData = 461: ECBlockTable(14, 1).LenEC = 30: ECBlockTable(14, 1).BlockCount(1) = 3: ECBlockTable(14, 1).LenBlock(1) = 115: ECBlockTable(14, 1).BlockCount(2) = 1: ECBlockTable(14, 1).LenBlock(2) = 116
    ECBlockTable(14, 2).LenData = 365: ECBlockTable(14, 2).LenEC = 24: ECBlockTable(14, 2).BlockCount(1) = 4: ECBlockTable(14, 2).LenBlock(1) = 40: ECBlockTable(14, 2).BlockCount(2) = 5: ECBlockTable(14, 2).LenBlock(2) = 41
    ECBlockTable(14, 3).LenData = 261: ECBlockTable(14, 3).LenEC = 20: ECBlockTable(14, 3).BlockCount(1) = 11: ECBlockTable(14, 3).LenBlock(1) = 16: ECBlockTable(14, 3).BlockCount(2) = 5: ECBlockTable(14, 3).LenBlock(2) = 17
    ECBlockTable(14, 4).LenData = 197: ECBlockTable(14, 4).LenEC = 24: ECBlockTable(14, 4).BlockCount(1) = 11: ECBlockTable(14, 4).LenBlock(1) = 12: ECBlockTable(14, 4).BlockCount(2) = 5: ECBlockTable(14, 4).LenBlock(2) = 13
    ECBlockTable(15, 1).LenData = 523: ECBlockTable(15, 1).LenEC = 22: ECBlockTable(15, 1).BlockCount(1) = 5: ECBlockTable(15, 1).LenBlock(1) = 87: ECBlockTable(15, 1).BlockCount(2) = 1: ECBlockTable(15, 1).LenBlock(2) = 88
    ECBlockTable(15, 2).LenData = 415: ECBlockTable(15, 2).LenEC = 24: ECBlockTable(15, 2).BlockCount(1) = 5: ECBlockTable(15, 2).LenBlock(1) = 41: ECBlockTable(15, 2).BlockCount(2) = 5: ECBlockTable(15, 2).LenBlock(2) = 42
    ECBlockTable(15, 3).LenData = 295: ECBlockTable(15, 3).LenEC = 30: ECBlockTable(15, 3).BlockCount(1) = 5: ECBlockTable(15, 3).LenBlock(1) = 24: ECBlockTable(15, 3).BlockCount(2) = 7: ECBlockTable(15, 3).LenBlock(2) = 25
    ECBlockTable(15, 4).LenData = 223: ECBlockTable(15, 4).LenEC = 24: ECBlockTable(15, 4).BlockCount(1) = 11: ECBlockTable(15, 4).LenBlock(1) = 12: ECBlockTable(15, 4).BlockCount(2) = 7: ECBlockTable(15, 4).LenBlock(2) = 13
    ECBlockTable(16, 1).LenData = 589: ECBlockTable(16, 1).LenEC = 24: ECBlockTable(16, 1).BlockCount(1) = 5: ECBlockTable(16, 1).LenBlock(1) = 98: ECBlockTable(16, 1).BlockCount(2) = 1: ECBlockTable(16, 1).LenBlock(2) = 99
    ECBlockTable(16, 2).LenData = 453: ECBlockTable(16, 2).LenEC = 28: ECBlockTable(16, 2).BlockCount(1) = 7: ECBlockTable(16, 2).LenBlock(1) = 45: ECBlockTable(16, 2).BlockCount(2) = 3: ECBlockTable(16, 2).LenBlock(2) = 46
    ECBlockTable(16, 3).LenData = 325: ECBlockTable(16, 3).LenEC = 24: ECBlockTable(16, 3).BlockCount(1) = 15: ECBlockTable(16, 3).LenBlock(1) = 19: ECBlockTable(16, 3).BlockCount(2) = 2: ECBlockTable(16, 3).LenBlock(2) = 20
    ECBlockTable(16, 4).LenData = 253: ECBlockTable(16, 4).LenEC = 30: ECBlockTable(16, 4).BlockCount(1) = 3: ECBlockTable(16, 4).LenBlock(1) = 15: ECBlockTable(16, 4).BlockCount(2) = 13: ECBlockTable(16, 4).LenBlock(2) = 16
    ECBlockTable(17, 1).LenData = 647: ECBlockTable(17, 1).LenEC = 28: ECBlockTable(17, 1).BlockCount(1) = 1: ECBlockTable(17, 1).LenBlock(1) = 107: ECBlockTable(17, 1).BlockCount(2) = 5: ECBlockTable(17, 1).LenBlock(2) = 108
    ECBlockTable(17, 2).LenData = 507: ECBlockTable(17, 2).LenEC = 28: ECBlockTable(17, 2).BlockCount(1) = 10: ECBlockTable(17, 2).LenBlock(1) = 46: ECBlockTable(17, 2).BlockCount(2) = 1: ECBlockTable(17, 2).LenBlock(2) = 47
    ECBlockTable(17, 3).LenData = 367: ECBlockTable(17, 3).LenEC = 28: ECBlockTable(17, 3).BlockCount(1) = 1: ECBlockTable(17, 3).LenBlock(1) = 22: ECBlockTable(17, 3).BlockCount(2) = 15: ECBlockTable(17, 3).LenBlock(2) = 23
    ECBlockTable(17, 4).LenData = 283: ECBlockTable(17, 4).LenEC = 28: ECBlockTable(17, 4).BlockCount(1) = 2: ECBlockTable(17, 4).LenBlock(1) = 14: ECBlockTable(17, 4).BlockCount(2) = 17: ECBlockTable(17, 4).LenBlock(2) = 15
    ECBlockTable(18, 1).LenData = 721: ECBlockTable(18, 1).LenEC = 30: ECBlockTable(18, 1).BlockCount(1) = 5: ECBlockTable(18, 1).LenBlock(1) = 120: ECBlockTable(18, 1).BlockCount(2) = 1: ECBlockTable(18, 1).LenBlock(2) = 121
    ECBlockTable(18, 2).LenData = 563: ECBlockTable(18, 2).LenEC = 26: ECBlockTable(18, 2).BlockCount(1) = 9: ECBlockTable(18, 2).LenBlock(1) = 43: ECBlockTable(18, 2).BlockCount(2) = 4: ECBlockTable(18, 2).LenBlock(2) = 44
    ECBlockTable(18, 3).LenData = 397: ECBlockTable(18, 3).LenEC = 28: ECBlockTable(18, 3).BlockCount(1) = 17: ECBlockTable(18, 3).LenBlock(1) = 22: ECBlockTable(18, 3).BlockCount(2) = 1: ECBlockTable(18, 3).LenBlock(2) = 23
    ECBlockTable(18, 4).LenData = 313: ECBlockTable(18, 4).LenEC = 28: ECBlockTable(18, 4).BlockCount(1) = 2: ECBlockTable(18, 4).LenBlock(1) = 14: ECBlockTable(18, 4).BlockCount(2) = 19: ECBlockTable(18, 4).LenBlock(2) = 15
    ECBlockTable(19, 1).LenData = 795: ECBlockTable(19, 1).LenEC = 28: ECBlockTable(19, 1).BlockCount(1) = 3: ECBlockTable(19, 1).LenBlock(1) = 113: ECBlockTable(19, 1).BlockCount(2) = 4: ECBlockTable(19, 1).LenBlock(2) = 114
    ECBlockTable(19, 2).LenData = 627: ECBlockTable(19, 2).LenEC = 26: ECBlockTable(19, 2).BlockCount(1) = 3: ECBlockTable(19, 2).LenBlock(1) = 44: ECBlockTable(19, 2).BlockCount(2) = 11: ECBlockTable(19, 2).LenBlock(2) = 45
    ECBlockTable(19, 3).LenData = 445: ECBlockTable(19, 3).LenEC = 26: ECBlockTable(19, 3).BlockCount(1) = 17: ECBlockTable(19, 3).LenBlock(1) = 21: ECBlockTable(19, 3).BlockCount(2) = 4: ECBlockTable(19, 3).LenBlock(2) = 22
    ECBlockTable(19, 4).LenData = 341: ECBlockTable(19, 4).LenEC = 26: ECBlockTable(19, 4).BlockCount(1) = 9: ECBlockTable(19, 4).LenBlock(1) = 13: ECBlockTable(19, 4).BlockCount(2) = 16: ECBlockTable(19, 4).LenBlock(2) = 14
    ECBlockTable(20, 1).LenData = 861: ECBlockTable(20, 1).LenEC = 28: ECBlockTable(20, 1).BlockCount(1) = 3: ECBlockTable(20, 1).LenBlock(1) = 107: ECBlockTable(20, 1).BlockCount(2) = 5: ECBlockTable(20, 1).LenBlock(2) = 108
    ECBlockTable(20, 2).LenData = 669: ECBlockTable(20, 2).LenEC = 26: ECBlockTable(20, 2).BlockCount(1) = 3: ECBlockTable(20, 2).LenBlock(1) = 41: ECBlockTable(20, 2).BlockCount(2) = 13: ECBlockTable(20, 2).LenBlock(2) = 42
    ECBlockTable(20, 3).LenData = 485: ECBlockTable(20, 3).LenEC = 30: ECBlockTable(20, 3).BlockCount(1) = 15: ECBlockTable(20, 3).LenBlock(1) = 24: ECBlockTable(20, 3).BlockCount(2) = 5: ECBlockTable(20, 3).LenBlock(2) = 25
    ECBlockTable(20, 4).LenData = 385: ECBlockTable(20, 4).LenEC = 28: ECBlockTable(20, 4).BlockCount(1) = 15: ECBlockTable(20, 4).LenBlock(1) = 15: ECBlockTable(20, 4).BlockCount(2) = 10: ECBlockTable(20, 4).LenBlock(2) = 16
    ECBlockTable(21, 1).LenData = 932: ECBlockTable(21, 1).LenEC = 28: ECBlockTable(21, 1).BlockCount(1) = 4: ECBlockTable(21, 1).LenBlock(1) = 116: ECBlockTable(21, 1).BlockCount(2) = 4: ECBlockTable(21, 1).LenBlock(2) = 117
    ECBlockTable(21, 2).LenData = 714: ECBlockTable(21, 2).LenEC = 26: ECBlockTable(21, 2).BlockCount(1) = 17: ECBlockTable(21, 2).LenBlock(1) = 42
    ECBlockTable(21, 3).LenData = 512: ECBlockTable(21, 3).LenEC = 28: ECBlockTable(21, 3).BlockCount(1) = 17: ECBlockTable(21, 3).LenBlock(1) = 22: ECBlockTable(21, 3).BlockCount(2) = 6: ECBlockTable(21, 3).LenBlock(2) = 23
    ECBlockTable(21, 4).LenData = 406: ECBlockTable(21, 4).LenEC = 30: ECBlockTable(21, 4).BlockCount(1) = 19: ECBlockTable(21, 4).LenBlock(1) = 16: ECBlockTable(21, 4).BlockCount(2) = 6: ECBlockTable(21, 4).LenBlock(2) = 17
    ECBlockTable(22, 1).LenData = 1006: ECBlockTable(22, 1).LenEC = 28: ECBlockTable(22, 1).BlockCount(1) = 2: ECBlockTable(22, 1).LenBlock(1) = 111: ECBlockTable(22, 1).BlockCount(2) = 7: ECBlockTable(22, 1).LenBlock(2) = 112
    ECBlockTable(22, 2).LenData = 782: ECBlockTable(22, 2).LenEC = 28: ECBlockTable(22, 2).BlockCount(1) = 17: ECBlockTable(22, 2).LenBlock(1) = 46
    ECBlockTable(22, 3).LenData = 568: ECBlockTable(22, 3).LenEC = 30: ECBlockTable(22, 3).BlockCount(1) = 7: ECBlockTable(22, 3).LenBlock(1) = 24: ECBlockTable(22, 3).BlockCount(2) = 16: ECBlockTable(22, 3).LenBlock(2) = 25
    ECBlockTable(22, 4).LenData = 442: ECBlockTable(22, 4).LenEC = 24: ECBlockTable(22, 4).BlockCount(1) = 34: ECBlockTable(22, 4).LenBlock(1) = 13
    ECBlockTable(23, 1).LenData = 1094: ECBlockTable(23, 1).LenEC = 30: ECBlockTable(23, 1).BlockCount(1) = 4: ECBlockTable(23, 1).LenBlock(1) = 121: ECBlockTable(23, 1).BlockCount(2) = 5: ECBlockTable(23, 1).LenBlock(2) = 122
    ECBlockTable(23, 2).LenData = 860: ECBlockTable(23, 2).LenEC = 28: ECBlockTable(23, 2).BlockCount(1) = 4: ECBlockTable(23, 2).LenBlock(1) = 47: ECBlockTable(23, 2).BlockCount(2) = 14: ECBlockTable(23, 2).LenBlock(2) = 48
    ECBlockTable(23, 3).LenData = 614: ECBlockTable(23, 3).LenEC = 30: ECBlockTable(23, 3).BlockCount(1) = 11: ECBlockTable(23, 3).LenBlock(1) = 24: ECBlockTable(23, 3).BlockCount(2) = 14: ECBlockTable(23, 3).LenBlock(2) = 25
    ECBlockTable(23, 4).LenData = 464: ECBlockTable(23, 4).LenEC = 30: ECBlockTable(23, 4).BlockCount(1) = 16: ECBlockTable(23, 4).LenBlock(1) = 15: ECBlockTable(23, 4).BlockCount(2) = 14: ECBlockTable(23, 4).LenBlock(2) = 16
    ECBlockTable(24, 1).LenData = 1174: ECBlockTable(24, 1).LenEC = 30: ECBlockTable(24, 1).BlockCount(1) = 6: ECBlockTable(24, 1).LenBlock(1) = 117: ECBlockTable(24, 1).BlockCount(2) = 4: ECBlockTable(24, 1).LenBlock(2) = 118
    ECBlockTable(24, 2).LenData = 914: ECBlockTable(24, 2).LenEC = 28: ECBlockTable(24, 2).BlockCount(1) = 6: ECBlockTable(24, 2).LenBlock(1) = 45: ECBlockTable(24, 2).BlockCount(2) = 14: ECBlockTable(24, 2).LenBlock(2) = 46
    ECBlockTable(24, 3).LenData = 664: ECBlockTable(24, 3).LenEC = 30: ECBlockTable(24, 3).BlockCount(1) = 11: ECBlockTable(24, 3).LenBlock(1) = 24: ECBlockTable(24, 3).BlockCount(2) = 16: ECBlockTable(24, 3).LenBlock(2) = 25
    ECBlockTable(24, 4).LenData = 514: ECBlockTable(24, 4).LenEC = 30: ECBlockTable(24, 4).BlockCount(1) = 30: ECBlockTable(24, 4).LenBlock(1) = 16: ECBlockTable(24, 4).BlockCount(2) = 2: ECBlockTable(24, 4).LenBlock(2) = 17
    ECBlockTable(25, 1).LenData = 1276: ECBlockTable(25, 1).LenEC = 26: ECBlockTable(25, 1).BlockCount(1) = 8: ECBlockTable(25, 1).LenBlock(1) = 106: ECBlockTable(25, 1).BlockCount(2) = 4: ECBlockTable(25, 1).LenBlock(2) = 107
    ECBlockTable(25, 2).LenData = 1000: ECBlockTable(25, 2).LenEC = 28: ECBlockTable(25, 2).BlockCount(1) = 8: ECBlockTable(25, 2).LenBlock(1) = 47: ECBlockTable(25, 2).BlockCount(2) = 13: ECBlockTable(25, 2).LenBlock(2) = 48
    ECBlockTable(25, 3).LenData = 718: ECBlockTable(25, 3).LenEC = 30: ECBlockTable(25, 3).BlockCount(1) = 7: ECBlockTable(25, 3).LenBlock(1) = 24: ECBlockTable(25, 3).BlockCount(2) = 22: ECBlockTable(25, 3).LenBlock(2) = 25
    ECBlockTable(25, 4).LenData = 538: ECBlockTable(25, 4).LenEC = 30: ECBlockTable(25, 4).BlockCount(1) = 22: ECBlockTable(25, 4).LenBlock(1) = 15: ECBlockTable(25, 4).BlockCount(2) = 13: ECBlockTable(25, 4).LenBlock(2) = 16
    ECBlockTable(26, 1).LenData = 1370: ECBlockTable(26, 1).LenEC = 28: ECBlockTable(26, 1).BlockCount(1) = 10: ECBlockTable(26, 1).LenBlock(1) = 114: ECBlockTable(26, 1).BlockCount(2) = 2: ECBlockTable(26, 1).LenBlock(2) = 115
    ECBlockTable(26, 2).LenData = 1062: ECBlockTable(26, 2).LenEC = 28: ECBlockTable(26, 2).BlockCount(1) = 19: ECBlockTable(26, 2).LenBlock(1) = 46: ECBlockTable(26, 2).BlockCount(2) = 4: ECBlockTable(26, 2).LenBlock(2) = 47
    ECBlockTable(26, 3).LenData = 754: ECBlockTable(26, 3).LenEC = 28: ECBlockTable(26, 3).BlockCount(1) = 28: ECBlockTable(26, 3).LenBlock(1) = 22: ECBlockTable(26, 3).BlockCount(2) = 6: ECBlockTable(26, 3).LenBlock(2) = 23
    ECBlockTable(26, 4).LenData = 596: ECBlockTable(26, 4).LenEC = 30: ECBlockTable(26, 4).BlockCount(1) = 33: ECBlockTable(26, 4).LenBlock(1) = 16: ECBlockTable(26, 4).BlockCount(2) = 4: ECBlockTable(26, 4).LenBlock(2) = 17
    ECBlockTable(27, 1).LenData = 1468: ECBlockTable(27, 1).LenEC = 30: ECBlockTable(27, 1).BlockCount(1) = 8: ECBlockTable(27, 1).LenBlock(1) = 122: ECBlockTable(27, 1).BlockCount(2) = 4: ECBlockTable(27, 1).LenBlock(2) = 123
    ECBlockTable(27, 2).LenData = 1128: ECBlockTable(27, 2).LenEC = 28: ECBlockTable(27, 2).BlockCount(1) = 22: ECBlockTable(27, 2).LenBlock(1) = 45: ECBlockTable(27, 2).BlockCount(2) = 3: ECBlockTable(27, 2).LenBlock(2) = 46
    ECBlockTable(27, 3).LenData = 808: ECBlockTable(27, 3).LenEC = 30: ECBlockTable(27, 3).BlockCount(1) = 8: ECBlockTable(27, 3).LenBlock(1) = 23: ECBlockTable(27, 3).BlockCount(2) = 26: ECBlockTable(27, 3).LenBlock(2) = 24
    ECBlockTable(27, 4).LenData = 628: ECBlockTable(27, 4).LenEC = 30: ECBlockTable(27, 4).BlockCount(1) = 12: ECBlockTable(27, 4).LenBlock(1) = 15: ECBlockTable(27, 4).BlockCount(2) = 28: ECBlockTable(27, 4).LenBlock(2) = 16
    ECBlockTable(28, 1).LenData = 1531: ECBlockTable(28, 1).LenEC = 30: ECBlockTable(28, 1).BlockCount(1) = 3: ECBlockTable(28, 1).LenBlock(1) = 117: ECBlockTable(28, 1).BlockCount(2) = 10: ECBlockTable(28, 1).LenBlock(2) = 118
    ECBlockTable(28, 2).LenData = 1193: ECBlockTable(28, 2).LenEC = 28: ECBlockTable(28, 2).BlockCount(1) = 3: ECBlockTable(28, 2).LenBlock(1) = 45: ECBlockTable(28, 2).BlockCount(2) = 23: ECBlockTable(28, 2).LenBlock(2) = 46
    ECBlockTable(28, 3).LenData = 871: ECBlockTable(28, 3).LenEC = 30: ECBlockTable(28, 3).BlockCount(1) = 4: ECBlockTable(28, 3).LenBlock(1) = 24: ECBlockTable(28, 3).BlockCount(2) = 31: ECBlockTable(28, 3).LenBlock(2) = 25
    ECBlockTable(28, 4).LenData = 661: ECBlockTable(28, 4).LenEC = 30: ECBlockTable(28, 4).BlockCount(1) = 11: ECBlockTable(28, 4).LenBlock(1) = 15: ECBlockTable(28, 4).BlockCount(2) = 31: ECBlockTable(28, 4).LenBlock(2) = 16
    ECBlockTable(29, 1).LenData = 1631: ECBlockTable(29, 1).LenEC = 30: ECBlockTable(29, 1).BlockCount(1) = 7: ECBlockTable(29, 1).LenBlock(1) = 116: ECBlockTable(29, 1).BlockCount(2) = 7: ECBlockTable(29, 1).LenBlock(2) = 117
    ECBlockTable(29, 2).LenData = 1267: ECBlockTable(29, 2).LenEC = 28: ECBlockTable(29, 2).BlockCount(1) = 21: ECBlockTable(29, 2).LenBlock(1) = 45: ECBlockTable(29, 2).BlockCount(2) = 7: ECBlockTable(29, 2).LenBlock(2) = 46
    ECBlockTable(29, 3).LenData = 911: ECBlockTable(29, 3).LenEC = 30: ECBlockTable(29, 3).BlockCount(1) = 1: ECBlockTable(29, 3).LenBlock(1) = 23: ECBlockTable(29, 3).BlockCount(2) = 37: ECBlockTable(29, 3).LenBlock(2) = 24
    ECBlockTable(29, 4).LenData = 701: ECBlockTable(29, 4).LenEC = 30: ECBlockTable(29, 4).BlockCount(1) = 19: ECBlockTable(29, 4).LenBlock(1) = 15: ECBlockTable(29, 4).BlockCount(2) = 26: ECBlockTable(29, 4).LenBlock(2) = 16
    ECBlockTable(30, 1).LenData = 1735: ECBlockTable(30, 1).LenEC = 30: ECBlockTable(30, 1).BlockCount(1) = 5: ECBlockTable(30, 1).LenBlock(1) = 115: ECBlockTable(30, 1).BlockCount(2) = 10: ECBlockTable(30, 1).LenBlock(2) = 116
    ECBlockTable(30, 2).LenData = 1373: ECBlockTable(30, 2).LenEC = 28: ECBlockTable(30, 2).BlockCount(1) = 19: ECBlockTable(30, 2).LenBlock(1) = 47: ECBlockTable(30, 2).BlockCount(2) = 10: ECBlockTable(30, 2).LenBlock(2) = 48
    ECBlockTable(30, 3).LenData = 985: ECBlockTable(30, 3).LenEC = 30: ECBlockTable(30, 3).BlockCount(1) = 15: ECBlockTable(30, 3).LenBlock(1) = 24: ECBlockTable(30, 3).BlockCount(2) = 25: ECBlockTable(30, 3).LenBlock(2) = 25
    ECBlockTable(30, 4).LenData = 745: ECBlockTable(30, 4).LenEC = 30: ECBlockTable(30, 4).BlockCount(1) = 23: ECBlockTable(30, 4).LenBlock(1) = 15: ECBlockTable(30, 4).BlockCount(2) = 25: ECBlockTable(30, 4).LenBlock(2) = 16
    ECBlockTable(31, 1).LenData = 1843: ECBlockTable(31, 1).LenEC = 30: ECBlockTable(31, 1).BlockCount(1) = 13: ECBlockTable(31, 1).LenBlock(1) = 115: ECBlockTable(31, 1).BlockCount(2) = 3: ECBlockTable(31, 1).LenBlock(2) = 116
    ECBlockTable(31, 2).LenData = 1455: ECBlockTable(31, 2).LenEC = 28: ECBlockTable(31, 2).BlockCount(1) = 2: ECBlockTable(31, 2).LenBlock(1) = 46: ECBlockTable(31, 2).BlockCount(2) = 29: ECBlockTable(31, 2).LenBlock(2) = 47
    ECBlockTable(31, 3).LenData = 1033: ECBlockTable(31, 3).LenEC = 30: ECBlockTable(31, 3).BlockCount(1) = 42: ECBlockTable(31, 3).LenBlock(1) = 24: ECBlockTable(31, 3).BlockCount(2) = 1: ECBlockTable(31, 3).LenBlock(2) = 25
    ECBlockTable(31, 4).LenData = 793: ECBlockTable(31, 4).LenEC = 30: ECBlockTable(31, 4).BlockCount(1) = 23: ECBlockTable(31, 4).LenBlock(1) = 15: ECBlockTable(31, 4).BlockCount(2) = 28: ECBlockTable(31, 4).LenBlock(2) = 16
    ECBlockTable(32, 1).LenData = 1955: ECBlockTable(32, 1).LenEC = 30: ECBlockTable(32, 1).BlockCount(1) = 17: ECBlockTable(32, 1).LenBlock(1) = 115
    ECBlockTable(32, 2).LenData = 1541: ECBlockTable(32, 2).LenEC = 28: ECBlockTable(32, 2).BlockCount(1) = 10: ECBlockTable(32, 2).LenBlock(1) = 46: ECBlockTable(32, 2).BlockCount(2) = 23: ECBlockTable(32, 2).LenBlock(2) = 47
    ECBlockTable(32, 3).LenData = 1115: ECBlockTable(32, 3).LenEC = 30: ECBlockTable(32, 3).BlockCount(1) = 10: ECBlockTable(32, 3).LenBlock(1) = 24: ECBlockTable(32, 3).BlockCount(2) = 35: ECBlockTable(32, 3).LenBlock(2) = 25
    ECBlockTable(32, 4).LenData = 845: ECBlockTable(32, 4).LenEC = 30: ECBlockTable(32, 4).BlockCount(1) = 19: ECBlockTable(32, 4).LenBlock(1) = 15: ECBlockTable(32, 4).BlockCount(2) = 35: ECBlockTable(32, 4).LenBlock(2) = 16
    ECBlockTable(33, 1).LenData = 2071: ECBlockTable(33, 1).LenEC = 30: ECBlockTable(33, 1).BlockCount(1) = 17: ECBlockTable(33, 1).LenBlock(1) = 115: ECBlockTable(33, 1).BlockCount(2) = 1: ECBlockTable(33, 1).LenBlock(2) = 116
    ECBlockTable(33, 2).LenData = 1631: ECBlockTable(33, 2).LenEC = 28: ECBlockTable(33, 2).BlockCount(1) = 14: ECBlockTable(33, 2).LenBlock(1) = 46: ECBlockTable(33, 2).BlockCount(2) = 21: ECBlockTable(33, 2).LenBlock(2) = 47
    ECBlockTable(33, 3).LenData = 1171: ECBlockTable(33, 3).LenEC = 30: ECBlockTable(33, 3).BlockCount(1) = 29: ECBlockTable(33, 3).LenBlock(1) = 24: ECBlockTable(33, 3).BlockCount(2) = 19: ECBlockTable(33, 3).LenBlock(2) = 25
    ECBlockTable(33, 4).LenData = 901: ECBlockTable(33, 4).LenEC = 30: ECBlockTable(33, 4).BlockCount(1) = 11: ECBlockTable(33, 4).LenBlock(1) = 15: ECBlockTable(33, 4).BlockCount(2) = 46: ECBlockTable(33, 4).LenBlock(2) = 16
    ECBlockTable(34, 1).LenData = 2191: ECBlockTable(34, 1).LenEC = 30: ECBlockTable(34, 1).BlockCount(1) = 13: ECBlockTable(34, 1).LenBlock(1) = 115: ECBlockTable(34, 1).BlockCount(2) = 6: ECBlockTable(34, 1).LenBlock(2) = 116
    ECBlockTable(34, 2).LenData = 1725: ECBlockTable(34, 2).LenEC = 28: ECBlockTable(34, 2).BlockCount(1) = 14: ECBlockTable(34, 2).LenBlock(1) = 46: ECBlockTable(34, 2).BlockCount(2) = 23: ECBlockTable(34, 2).LenBlock(2) = 47
    ECBlockTable(34, 3).LenData = 1231: ECBlockTable(34, 3).LenEC = 30: ECBlockTable(34, 3).BlockCount(1) = 44: ECBlockTable(34, 3).LenBlock(1) = 24: ECBlockTable(34, 3).BlockCount(2) = 7: ECBlockTable(34, 3).LenBlock(2) = 25
    ECBlockTable(34, 4).LenData = 961: ECBlockTable(34, 4).LenEC = 30: ECBlockTable(34, 4).BlockCount(1) = 59: ECBlockTable(34, 4).LenBlock(1) = 16: ECBlockTable(34, 4).BlockCount(2) = 1: ECBlockTable(34, 4).LenBlock(2) = 17
    ECBlockTable(35, 1).LenData = 2306: ECBlockTable(35, 1).LenEC = 30: ECBlockTable(35, 1).BlockCount(1) = 12: ECBlockTable(35, 1).LenBlock(1) = 121: ECBlockTable(35, 1).BlockCount(2) = 7: ECBlockTable(35, 1).LenBlock(2) = 122
    ECBlockTable(35, 2).LenData = 1812: ECBlockTable(35, 2).LenEC = 28: ECBlockTable(35, 2).BlockCount(1) = 12: ECBlockTable(35, 2).LenBlock(1) = 47: ECBlockTable(35, 2).BlockCount(2) = 26: ECBlockTable(35, 2).LenBlock(2) = 48
    ECBlockTable(35, 3).LenData = 1286: ECBlockTable(35, 3).LenEC = 30: ECBlockTable(35, 3).BlockCount(1) = 39: ECBlockTable(35, 3).LenBlock(1) = 24: ECBlockTable(35, 3).BlockCount(2) = 14: ECBlockTable(35, 3).LenBlock(2) = 25
    ECBlockTable(35, 4).LenData = 986: ECBlockTable(35, 4).LenEC = 30: ECBlockTable(35, 4).BlockCount(1) = 22: ECBlockTable(35, 4).LenBlock(1) = 15: ECBlockTable(35, 4).BlockCount(2) = 41: ECBlockTable(35, 4).LenBlock(2) = 16
    ECBlockTable(36, 1).LenData = 2434: ECBlockTable(36, 1).LenEC = 30: ECBlockTable(36, 1).BlockCount(1) = 6: ECBlockTable(36, 1).LenBlock(1) = 121: ECBlockTable(36, 1).BlockCount(2) = 14: ECBlockTable(36, 1).LenBlock(2) = 122
    ECBlockTable(36, 2).LenData = 1914: ECBlockTable(36, 2).LenEC = 28: ECBlockTable(36, 2).BlockCount(1) = 6: ECBlockTable(36, 2).LenBlock(1) = 47: ECBlockTable(36, 2).BlockCount(2) = 34: ECBlockTable(36, 2).LenBlock(2) = 48
    ECBlockTable(36, 3).LenData = 1354: ECBlockTable(36, 3).LenEC = 30: ECBlockTable(36, 3).BlockCount(1) = 46: ECBlockTable(36, 3).LenBlock(1) = 24: ECBlockTable(36, 3).BlockCount(2) = 10: ECBlockTable(36, 3).LenBlock(2) = 25
    ECBlockTable(36, 4).LenData = 1054: ECBlockTable(36, 4).LenEC = 30: ECBlockTable(36, 4).BlockCount(1) = 2: ECBlockTable(36, 4).LenBlock(1) = 15: ECBlockTable(36, 4).BlockCount(2) = 64: ECBlockTable(36, 4).LenBlock(2) = 16
    ECBlockTable(37, 1).LenData = 2566: ECBlockTable(37, 1).LenEC = 30: ECBlockTable(37, 1).BlockCount(1) = 17: ECBlockTable(37, 1).LenBlock(1) = 122: ECBlockTable(37, 1).BlockCount(2) = 4: ECBlockTable(37, 1).LenBlock(2) = 123
    ECBlockTable(37, 2).LenData = 1992: ECBlockTable(37, 2).LenEC = 28: ECBlockTable(37, 2).BlockCount(1) = 29: ECBlockTable(37, 2).LenBlock(1) = 46: ECBlockTable(37, 2).BlockCount(2) = 14: ECBlockTable(37, 2).LenBlock(2) = 47
    ECBlockTable(37, 3).LenData = 1426: ECBlockTable(37, 3).LenEC = 30: ECBlockTable(37, 3).BlockCount(1) = 49: ECBlockTable(37, 3).LenBlock(1) = 24: ECBlockTable(37, 3).BlockCount(2) = 10: ECBlockTable(37, 3).LenBlock(2) = 25
    ECBlockTable(37, 4).LenData = 1096: ECBlockTable(37, 4).LenEC = 30: ECBlockTable(37, 4).BlockCount(1) = 24: ECBlockTable(37, 4).LenBlock(1) = 15: ECBlockTable(37, 4).BlockCount(2) = 46: ECBlockTable(37, 4).LenBlock(2) = 16
    ECBlockTable(38, 1).LenData = 2702: ECBlockTable(38, 1).LenEC = 30: ECBlockTable(38, 1).BlockCount(1) = 4: ECBlockTable(38, 1).LenBlock(1) = 122: ECBlockTable(38, 1).BlockCount(2) = 18: ECBlockTable(38, 1).LenBlock(2) = 123
    ECBlockTable(38, 2).LenData = 2102: ECBlockTable(38, 2).LenEC = 28: ECBlockTable(38, 2).BlockCount(1) = 13: ECBlockTable(38, 2).LenBlock(1) = 46: ECBlockTable(38, 2).BlockCount(2) = 32: ECBlockTable(38, 2).LenBlock(2) = 47
    ECBlockTable(38, 3).LenData = 1502: ECBlockTable(38, 3).LenEC = 30: ECBlockTable(38, 3).BlockCount(1) = 48: ECBlockTable(38, 3).LenBlock(1) = 24: ECBlockTable(38, 3).BlockCount(2) = 14: ECBlockTable(38, 3).LenBlock(2) = 25
    ECBlockTable(38, 4).LenData = 1142: ECBlockTable(38, 4).LenEC = 30: ECBlockTable(38, 4).BlockCount(1) = 42: ECBlockTable(38, 4).LenBlock(1) = 15: ECBlockTable(38, 4).BlockCount(2) = 32: ECBlockTable(38, 4).LenBlock(2) = 16
    ECBlockTable(39, 1).LenData = 2812: ECBlockTable(39, 1).LenEC = 30: ECBlockTable(39, 1).BlockCount(1) = 20: ECBlockTable(39, 1).LenBlock(1) = 117: ECBlockTable(39, 1).BlockCount(2) = 4: ECBlockTable(39, 1).LenBlock(2) = 118
    ECBlockTable(39, 2).LenData = 2216: ECBlockTable(39, 2).LenEC = 28: ECBlockTable(39, 2).BlockCount(1) = 40: ECBlockTable(39, 2).LenBlock(1) = 47: ECBlockTable(39, 2).BlockCount(2) = 7: ECBlockTable(39, 2).LenBlock(2) = 48
    ECBlockTable(39, 3).LenData = 1582: ECBlockTable(39, 3).LenEC = 30: ECBlockTable(39, 3).BlockCount(1) = 43: ECBlockTable(39, 3).LenBlock(1) = 24: ECBlockTable(39, 3).BlockCount(2) = 22: ECBlockTable(39, 3).LenBlock(2) = 25
    ECBlockTable(39, 4).LenData = 1222: ECBlockTable(39, 4).LenEC = 30: ECBlockTable(39, 4).BlockCount(1) = 10: ECBlockTable(39, 4).LenBlock(1) = 15: ECBlockTable(39, 4).BlockCount(2) = 67: ECBlockTable(39, 4).LenBlock(2) = 16
    ECBlockTable(40, 1).LenData = 2956: ECBlockTable(40, 1).LenEC = 30: ECBlockTable(40, 1).BlockCount(1) = 19: ECBlockTable(40, 1).LenBlock(1) = 118: ECBlockTable(40, 1).BlockCount(2) = 6: ECBlockTable(40, 1).LenBlock(2) = 119
    ECBlockTable(40, 2).LenData = 2334: ECBlockTable(40, 2).LenEC = 28: ECBlockTable(40, 2).BlockCount(1) = 18: ECBlockTable(40, 2).LenBlock(1) = 47: ECBlockTable(40, 2).BlockCount(2) = 31: ECBlockTable(40, 2).LenBlock(2) = 48
    ECBlockTable(40, 3).LenData = 1666: ECBlockTable(40, 3).LenEC = 30: ECBlockTable(40, 3).BlockCount(1) = 34: ECBlockTable(40, 3).LenBlock(1) = 24: ECBlockTable(40, 3).BlockCount(2) = 34: ECBlockTable(40, 3).LenBlock(2) = 25
    ECBlockTable(40, 4).LenData = 1276: ECBlockTable(40, 4).LenEC = 30: ECBlockTable(40, 4).BlockCount(1) = 20: ECBlockTable(40, 4).LenBlock(1) = 15: ECBlockTable(40, 4).BlockCount(2) = 61: ECBlockTable(40, 4).LenBlock(2) = 16
    
    'Initialize Log Alpha
    'LogA(0) = 0
    LogA(1) = 0: LogA(2) = 1: LogA(3) = 25: LogA(4) = 2: LogA(5) = 50
    LogA(6) = 26: LogA(7) = 198: LogA(8) = 3: LogA(9) = 223: LogA(10) = 51: LogA(11) = 238
    LogA(12) = 27: LogA(13) = 104: LogA(14) = 199: LogA(15) = 75: LogA(16) = 4: LogA(17) = 100
    LogA(18) = 224: LogA(19) = 14: LogA(20) = 52: LogA(21) = 141: LogA(22) = 239: LogA(23) = 129
    LogA(24) = 28: LogA(25) = 193: LogA(26) = 105: LogA(27) = 248: LogA(28) = 200: LogA(29) = 8
    LogA(30) = 76: LogA(31) = 113: LogA(32) = 5: LogA(33) = 138: LogA(34) = 101: LogA(35) = 47
    LogA(36) = 225: LogA(37) = 36: LogA(38) = 15: LogA(39) = 33: LogA(40) = 53: LogA(41) = 147
    LogA(42) = 142: LogA(43) = 218: LogA(44) = 240: LogA(45) = 18: LogA(46) = 130: LogA(47) = 69
    LogA(48) = 29: LogA(49) = 181: LogA(50) = 194: LogA(51) = 125: LogA(52) = 106: LogA(53) = 39
    LogA(54) = 249: LogA(55) = 185: LogA(56) = 201: LogA(57) = 154: LogA(58) = 9: LogA(59) = 120
    LogA(60) = 77: LogA(61) = 228: LogA(62) = 114: LogA(63) = 166: LogA(64) = 6: LogA(65) = 191
    LogA(66) = 139: LogA(67) = 98: LogA(68) = 102: LogA(69) = 221: LogA(70) = 48: LogA(71) = 253
    LogA(72) = 226: LogA(73) = 152: LogA(74) = 37: LogA(75) = 179: LogA(76) = 16: LogA(77) = 145
    LogA(78) = 34: LogA(79) = 136: LogA(80) = 54: LogA(81) = 208: LogA(82) = 148: LogA(83) = 206
    LogA(84) = 143: LogA(85) = 150: LogA(86) = 219: LogA(87) = 189: LogA(88) = 241: LogA(89) = 210
    LogA(90) = 19: LogA(91) = 92: LogA(92) = 131: LogA(93) = 56: LogA(94) = 70: LogA(95) = 64
    LogA(96) = 30: LogA(97) = 66: LogA(98) = 182: LogA(99) = 163: LogA(100) = 195: LogA(101) = 72
    LogA(102) = 126: LogA(103) = 110: LogA(104) = 107: LogA(105) = 58: LogA(106) = 40: LogA(107) = 84
    LogA(108) = 250: LogA(109) = 133: LogA(110) = 186: LogA(111) = 61: LogA(112) = 202: LogA(113) = 94
    LogA(114) = 155: LogA(115) = 159: LogA(116) = 10: LogA(117) = 21: LogA(118) = 121: LogA(119) = 43
    LogA(120) = 78: LogA(121) = 212: LogA(122) = 229: LogA(123) = 172: LogA(124) = 115: LogA(125) = 243
    LogA(126) = 167: LogA(127) = 87: LogA(128) = 7: LogA(129) = 112: LogA(130) = 192: LogA(131) = 247
    LogA(132) = 140: LogA(133) = 128: LogA(134) = 99: LogA(135) = 13: LogA(136) = 103: LogA(137) = 74
    LogA(138) = 222: LogA(139) = 237: LogA(140) = 49: LogA(141) = 197: LogA(142) = 254: LogA(143) = 24
    LogA(144) = 227: LogA(145) = 165: LogA(146) = 153: LogA(147) = 119: LogA(148) = 38: LogA(149) = 184
    LogA(150) = 180: LogA(151) = 124: LogA(152) = 17: LogA(153) = 68: LogA(154) = 146: LogA(155) = 217
    LogA(156) = 35: LogA(157) = 32: LogA(158) = 137: LogA(159) = 46: LogA(160) = 55: LogA(161) = 63
    LogA(162) = 209: LogA(163) = 91: LogA(164) = 149: LogA(165) = 188: LogA(166) = 207: LogA(167) = 205
    LogA(168) = 144: LogA(169) = 135: LogA(170) = 151: LogA(171) = 178: LogA(172) = 220: LogA(173) = 252
    LogA(174) = 190: LogA(175) = 97: LogA(176) = 242: LogA(177) = 86: LogA(178) = 211: LogA(179) = 171
    LogA(180) = 20: LogA(181) = 42: LogA(182) = 93: LogA(183) = 158: LogA(184) = 132: LogA(185) = 60
    LogA(186) = 57: LogA(187) = 83: LogA(188) = 71: LogA(189) = 109: LogA(190) = 65: LogA(191) = 162
    LogA(192) = 31: LogA(193) = 45: LogA(194) = 67: LogA(195) = 216: LogA(196) = 183: LogA(197) = 123
    LogA(198) = 164: LogA(199) = 118: LogA(200) = 196: LogA(201) = 23: LogA(202) = 73: LogA(203) = 236
    LogA(204) = 127: LogA(205) = 12: LogA(206) = 111: LogA(207) = 246: LogA(208) = 108: LogA(209) = 161
    LogA(210) = 59: LogA(211) = 82: LogA(212) = 41: LogA(213) = 157: LogA(214) = 85: LogA(215) = 170
    LogA(216) = 251: LogA(217) = 96: LogA(218) = 134: LogA(219) = 177: LogA(220) = 187: LogA(221) = 204
    LogA(222) = 62: LogA(223) = 90: LogA(224) = 203: LogA(225) = 89: LogA(226) = 95: LogA(227) = 176
    LogA(228) = 156: LogA(229) = 169: LogA(230) = 160: LogA(231) = 81: LogA(232) = 11: LogA(233) = 245
    LogA(234) = 22: LogA(235) = 235: LogA(236) = 122: LogA(237) = 117: LogA(238) = 44: LogA(239) = 215
    LogA(240) = 79: LogA(241) = 174: LogA(242) = 213: LogA(243) = 233: LogA(244) = 230: LogA(245) = 231
    LogA(246) = 173: LogA(247) = 232: LogA(248) = 116: LogA(249) = 214: LogA(250) = 244: LogA(251) = 234
    LogA(252) = 168: LogA(253) = 80: LogA(254) = 88: LogA(255) = 175

    
    Call Initialize2
    QRInitialized = True
End Sub

Public Sub Initialize2()
    'Initialize AtniLog Alpha
    ALogA(0) = 0
    ALogA(0) = 1: ALogA(1) = 2: ALogA(2) = 4: ALogA(3) = 8: ALogA(4) = 16: ALogA(5) = 32: ALogA(6) = 64
    ALogA(7) = 128: ALogA(8) = 29: ALogA(9) = 58: ALogA(10) = 116: ALogA(11) = 232: ALogA(12) = 205: ALogA(13) = 135
    ALogA(14) = 19: ALogA(15) = 38: ALogA(16) = 76: ALogA(17) = 152: ALogA(18) = 45: ALogA(19) = 90: ALogA(20) = 180
    ALogA(21) = 117: ALogA(22) = 234: ALogA(23) = 201: ALogA(24) = 143: ALogA(25) = 3: ALogA(26) = 6: ALogA(27) = 12
    ALogA(28) = 24: ALogA(29) = 48: ALogA(30) = 96: ALogA(31) = 192: ALogA(32) = 157: ALogA(33) = 39: ALogA(34) = 78
    ALogA(35) = 156: ALogA(36) = 37: ALogA(37) = 74: ALogA(38) = 148: ALogA(39) = 53: ALogA(40) = 106: ALogA(41) = 212
    ALogA(42) = 181: ALogA(43) = 119: ALogA(44) = 238: ALogA(45) = 193: ALogA(46) = 159: ALogA(47) = 35: ALogA(48) = 70
    ALogA(49) = 140: ALogA(50) = 5: ALogA(51) = 10: ALogA(52) = 20: ALogA(53) = 40: ALogA(54) = 80: ALogA(55) = 160: ALogA(56) = 93
    ALogA(57) = 186: ALogA(58) = 105: ALogA(59) = 210: ALogA(60) = 185: ALogA(61) = 111: ALogA(62) = 222: ALogA(63) = 161
    ALogA(64) = 95: ALogA(65) = 190: ALogA(66) = 97: ALogA(67) = 194: ALogA(68) = 153: ALogA(69) = 47: ALogA(70) = 94
    ALogA(71) = 188: ALogA(72) = 101: ALogA(73) = 202: ALogA(74) = 137: ALogA(75) = 15: ALogA(76) = 30
    ALogA(77) = 60: ALogA(78) = 120: ALogA(79) = 240: ALogA(80) = 253: ALogA(81) = 231: ALogA(82) = 211: ALogA(83) = 187: ALogA(84) = 107
    ALogA(85) = 214: ALogA(86) = 177: ALogA(87) = 127: ALogA(88) = 254: ALogA(89) = 225: ALogA(90) = 223: ALogA(91) = 163: ALogA(92) = 91
    ALogA(93) = 182: ALogA(94) = 113: ALogA(95) = 226: ALogA(96) = 217: ALogA(97) = 175: ALogA(98) = 67: ALogA(99) = 134: ALogA(100) = 17
    ALogA(101) = 34: ALogA(102) = 68: ALogA(103) = 136: ALogA(104) = 13: ALogA(105) = 26: ALogA(106) = 52: ALogA(107) = 104: ALogA(108) = 208
    ALogA(109) = 189: ALogA(110) = 103: ALogA(111) = 206: ALogA(112) = 129: ALogA(113) = 31: ALogA(114) = 62: ALogA(115) = 124: ALogA(116) = 248
    ALogA(117) = 237: ALogA(118) = 199: ALogA(119) = 147: ALogA(120) = 59: ALogA(121) = 118: ALogA(122) = 236: ALogA(123) = 197: ALogA(124) = 151
    ALogA(125) = 51: ALogA(126) = 102: ALogA(127) = 204: ALogA(128) = 133: ALogA(129) = 23: ALogA(130) = 46: ALogA(131) = 92: ALogA(132) = 184
    ALogA(133) = 109: ALogA(134) = 218: ALogA(135) = 169: ALogA(136) = 79: ALogA(137) = 158: ALogA(138) = 33: ALogA(139) = 66: ALogA(140) = 132
    ALogA(141) = 21: ALogA(142) = 42: ALogA(143) = 84: ALogA(144) = 168: ALogA(145) = 77: ALogA(146) = 154: ALogA(147) = 41: ALogA(148) = 82
    ALogA(149) = 164: ALogA(150) = 85: ALogA(151) = 170: ALogA(152) = 73: ALogA(153) = 146: ALogA(154) = 57: ALogA(155) = 114: ALogA(156) = 228
    ALogA(157) = 213: ALogA(158) = 183: ALogA(159) = 115: ALogA(160) = 230: ALogA(161) = 209: ALogA(162) = 191: ALogA(163) = 99: ALogA(164) = 198
    ALogA(165) = 145: ALogA(166) = 63: ALogA(167) = 126: ALogA(168) = 252: ALogA(169) = 229: ALogA(170) = 215: ALogA(171) = 179: ALogA(172) = 123
    ALogA(173) = 246: ALogA(174) = 241: ALogA(175) = 255: ALogA(176) = 227: ALogA(177) = 219: ALogA(178) = 171: ALogA(179) = 75: ALogA(180) = 150
    ALogA(181) = 49: ALogA(182) = 98: ALogA(183) = 196: ALogA(184) = 149: ALogA(185) = 55: ALogA(186) = 110: ALogA(187) = 220: ALogA(188) = 165
    ALogA(189) = 87: ALogA(190) = 174: ALogA(191) = 65: ALogA(192) = 130: ALogA(193) = 25: ALogA(194) = 50: ALogA(195) = 100: ALogA(196) = 200
    ALogA(197) = 141: ALogA(198) = 7: ALogA(199) = 14: ALogA(200) = 28: ALogA(201) = 56: ALogA(202) = 112: ALogA(203) = 224: ALogA(204) = 221
    ALogA(205) = 167: ALogA(206) = 83: ALogA(207) = 166: ALogA(208) = 81: ALogA(209) = 162: ALogA(210) = 89: ALogA(211) = 178: ALogA(212) = 121
    ALogA(213) = 242: ALogA(214) = 249: ALogA(215) = 239: ALogA(216) = 195: ALogA(217) = 155: ALogA(218) = 43: ALogA(219) = 86: ALogA(220) = 172
    ALogA(221) = 69: ALogA(222) = 138: ALogA(223) = 9: ALogA(224) = 18: ALogA(225) = 36: ALogA(226) = 72: ALogA(227) = 144: ALogA(228) = 61
    ALogA(229) = 122: ALogA(230) = 244: ALogA(231) = 245: ALogA(232) = 247: ALogA(233) = 243: ALogA(234) = 251: ALogA(235) = 235: ALogA(236) = 203
    ALogA(237) = 139: ALogA(238) = 11: ALogA(239) = 22: ALogA(240) = 44: ALogA(241) = 88: ALogA(242) = 176: ALogA(243) = 125: ALogA(244) = 250
    ALogA(245) = 233: ALogA(246) = 207: ALogA(247) = 131: ALogA(248) = 27: ALogA(249) = 54: ALogA(250) = 108: ALogA(251) = 216: ALogA(252) = 173
    ALogA(253) = 71: ALogA(254) = 142
    
    'Initialize Align Pattern Pos
    APat(2).Count = 2: APat(2).Pos(1) = 6: APat(2).Pos(2) = 18: APat(3).Count = 2: APat(3).Pos(1) = 6: APat(3).Pos(2) = 22
    APat(4).Count = 2: APat(4).Pos(1) = 6: APat(4).Pos(2) = 26: APat(5).Count = 2: APat(5).Pos(1) = 6: APat(5).Pos(2) = 30
    APat(6).Count = 2: APat(6).Pos(1) = 6: APat(6).Pos(2) = 34: APat(7).Count = 3: APat(7).Pos(1) = 6: APat(7).Pos(2) = 22
    APat(7).Pos(3) = 38: APat(8).Count = 3: APat(8).Pos(1) = 6: APat(8).Pos(2) = 24: APat(8).Pos(3) = 42: APat(9).Count = 3
    APat(9).Pos(1) = 6: APat(9).Pos(2) = 26: APat(9).Pos(3) = 46: APat(10).Count = 3: APat(10).Pos(1) = 6: APat(10).Pos(2) = 28
    APat(10).Pos(3) = 50: APat(11).Count = 3: APat(11).Pos(1) = 6: APat(11).Pos(2) = 30: APat(11).Pos(3) = 54: APat(12).Count = 3
    APat(12).Pos(1) = 6: APat(12).Pos(2) = 32: APat(12).Pos(3) = 58: APat(13).Count = 3: APat(13).Pos(1) = 6: APat(13).Pos(2) = 34
    APat(13).Pos(3) = 62: APat(14).Count = 4: APat(14).Pos(1) = 6: APat(14).Pos(2) = 26: APat(14).Pos(3) = 46: APat(14).Pos(4) = 66
    APat(15).Count = 4: APat(15).Pos(1) = 6: APat(15).Pos(2) = 26: APat(15).Pos(3) = 48: APat(15).Pos(4) = 70: APat(16).Count = 4
    APat(16).Pos(1) = 6: APat(16).Pos(2) = 26: APat(16).Pos(3) = 50: APat(16).Pos(4) = 74: APat(17).Count = 4: APat(17).Pos(1) = 6
    APat(17).Pos(2) = 30: APat(17).Pos(3) = 54: APat(17).Pos(4) = 78: APat(18).Count = 4: APat(18).Pos(1) = 6: APat(18).Pos(2) = 30
    APat(18).Pos(3) = 56: APat(18).Pos(4) = 82: APat(19).Count = 4: APat(19).Pos(1) = 6: APat(19).Pos(2) = 30: APat(19).Pos(3) = 58
    APat(19).Pos(4) = 86: APat(20).Count = 4: APat(20).Pos(1) = 6: APat(20).Pos(2) = 34: APat(20).Pos(3) = 62: APat(20).Pos(4) = 90
    APat(21).Count = 5: APat(21).Pos(1) = 6: APat(21).Pos(2) = 28: APat(21).Pos(3) = 50: APat(21).Pos(4) = 72: APat(21).Pos(5) = 94
    APat(22).Count = 5: APat(22).Pos(1) = 6: APat(22).Pos(2) = 26: APat(22).Pos(3) = 50: APat(22).Pos(4) = 74: APat(22).Pos(5) = 98
    APat(23).Count = 5: APat(23).Pos(1) = 6: APat(23).Pos(2) = 30: APat(23).Pos(3) = 54: APat(23).Pos(4) = 78: APat(23).Pos(5) = 102
    APat(24).Count = 5: APat(24).Pos(1) = 6: APat(24).Pos(2) = 28: APat(24).Pos(3) = 54: APat(24).Pos(4) = 80: APat(24).Pos(5) = 106
    APat(25).Count = 5: APat(25).Pos(1) = 6: APat(25).Pos(2) = 32: APat(25).Pos(3) = 58: APat(25).Pos(4) = 84: APat(25).Pos(5) = 110
    APat(26).Count = 5: APat(26).Pos(1) = 6: APat(26).Pos(2) = 30: APat(26).Pos(3) = 58: APat(26).Pos(4) = 86: APat(26).Pos(5) = 114
    APat(27).Count = 5: APat(27).Pos(1) = 6: APat(27).Pos(2) = 34: APat(27).Pos(3) = 62: APat(27).Pos(4) = 90: APat(27).Pos(5) = 118
    APat(28).Count = 6: APat(28).Pos(1) = 6: APat(28).Pos(2) = 26: APat(28).Pos(3) = 50: APat(28).Pos(4) = 74: APat(28).Pos(5) = 98
    APat(28).Pos(6) = 122: APat(29).Count = 6: APat(29).Pos(1) = 6: APat(29).Pos(2) = 30: APat(29).Pos(3) = 54: APat(29).Pos(4) = 78
    APat(29).Pos(5) = 102: APat(29).Pos(6) = 126: APat(30).Count = 6: APat(30).Pos(1) = 6: APat(30).Pos(2) = 26: APat(30).Pos(3) = 52
    APat(30).Pos(4) = 78: APat(30).Pos(5) = 104: APat(30).Pos(6) = 130: APat(31).Count = 6: APat(31).Pos(1) = 6: APat(31).Pos(2) = 30
    APat(31).Pos(3) = 56: APat(31).Pos(4) = 82: APat(31).Pos(5) = 108: APat(31).Pos(6) = 134: APat(32).Count = 6: APat(32).Pos(1) = 6
    APat(32).Pos(2) = 34: APat(32).Pos(3) = 60: APat(32).Pos(4) = 86: APat(32).Pos(5) = 112: APat(32).Pos(6) = 138: APat(33).Count = 6
    APat(33).Pos(1) = 6: APat(33).Pos(2) = 30: APat(33).Pos(3) = 58: APat(33).Pos(4) = 86: APat(33).Pos(5) = 114: APat(33).Pos(6) = 142
    APat(34).Count = 6: APat(34).Pos(1) = 6: APat(34).Pos(2) = 34: APat(34).Pos(3) = 62: APat(34).Pos(4) = 90: APat(34).Pos(5) = 118
    APat(34).Pos(6) = 146: APat(35).Count = 7: APat(35).Pos(1) = 6: APat(35).Pos(2) = 30: APat(35).Pos(3) = 54: APat(35).Pos(4) = 78
    APat(35).Pos(5) = 102: APat(35).Pos(6) = 126: APat(35).Pos(7) = 150: APat(36).Count = 7: APat(36).Pos(1) = 6: APat(36).Pos(2) = 24
    APat(36).Pos(3) = 50: APat(36).Pos(4) = 76: APat(36).Pos(5) = 102: APat(36).Pos(6) = 128: APat(36).Pos(7) = 154: APat(37).Count = 7
    APat(37).Pos(1) = 6: APat(37).Pos(2) = 28: APat(37).Pos(3) = 54: APat(37).Pos(4) = 80: APat(37).Pos(5) = 106: APat(37).Pos(6) = 132
    APat(37).Pos(7) = 158: APat(38).Count = 7: APat(38).Pos(1) = 6: APat(38).Pos(2) = 32: APat(38).Pos(3) = 58: APat(38).Pos(4) = 84
    APat(38).Pos(5) = 110: APat(38).Pos(6) = 136: APat(38).Pos(7) = 162: APat(39).Count = 7: APat(39).Pos(1) = 6: APat(39).Pos(2) = 26
    APat(39).Pos(3) = 54: APat(39).Pos(4) = 82: APat(39).Pos(5) = 110: APat(39).Pos(6) = 138: APat(39).Pos(7) = 166: APat(40).Count = 7
    APat(40).Pos(1) = 6: APat(40).Pos(2) = 30: APat(40).Pos(3) = 58: APat(40).Pos(4) = 86: APat(40).Pos(5) = 114: APat(40).Pos(6) = 142
    APat(40).Pos(7) = 170
    
    'Initialize Format Information
    FmtInfoTable(1, 0) = 30660: FmtInfoTable(1, 1) = 29427: FmtInfoTable(1, 2) = 32170: FmtInfoTable(1, 3) = 30877
    FmtInfoTable(1, 4) = 26159: FmtInfoTable(1, 5) = 25368: FmtInfoTable(1, 6) = 27713: FmtInfoTable(1, 7) = 26998
    FmtInfoTable(2, 0) = 21522: FmtInfoTable(2, 1) = 20773: FmtInfoTable(2, 2) = 24188: FmtInfoTable(2, 3) = 23371
    FmtInfoTable(2, 4) = 17913: FmtInfoTable(2, 5) = 16590: FmtInfoTable(2, 6) = 20375: FmtInfoTable(2, 7) = 19104
    FmtInfoTable(3, 0) = 13663: FmtInfoTable(3, 1) = 12392: FmtInfoTable(3, 2) = 16177: FmtInfoTable(3, 3) = 14854
    FmtInfoTable(3, 4) = 9396: FmtInfoTable(3, 5) = 8579: FmtInfoTable(3, 6) = 11994: FmtInfoTable(3, 7) = 11245
    FmtInfoTable(4, 0) = 5769: FmtInfoTable(4, 1) = 5054: FmtInfoTable(4, 2) = 7399: FmtInfoTable(4, 3) = 6608
    FmtInfoTable(4, 4) = 1890: FmtInfoTable(4, 5) = 597: FmtInfoTable(4, 6) = 3340: FmtInfoTable(4, 7) = 2107
    
    'Initialize Version Information
    VerInfoTable(7) = 31892: VerInfoTable(8) = 34236: VerInfoTable(9) = 39577
    VerInfoTable(10) = 42195: VerInfoTable(11) = 48118: VerInfoTable(12) = 51042: VerInfoTable(13) = 55367
    VerInfoTable(14) = 58893: VerInfoTable(15) = 63784: VerInfoTable(16) = 68472: VerInfoTable(17) = 70749
    VerInfoTable(18) = 76311: VerInfoTable(19) = 79154: VerInfoTable(20) = 84390: VerInfoTable(21) = 87683
    VerInfoTable(22) = 92361: VerInfoTable(23) = 96236: VerInfoTable(24) = 102084: VerInfoTable(25) = 102881
    VerInfoTable(26) = 110507: VerInfoTable(27) = 110734: VerInfoTable(28) = 117786: VerInfoTable(29) = 119615
    VerInfoTable(30) = 126325: VerInfoTable(31) = 127568: VerInfoTable(32) = 133589: VerInfoTable(33) = 136944
    VerInfoTable(34) = 141498: VerInfoTable(35) = 145311: VerInfoTable(36) = 150283: VerInfoTable(37) = 152622
    VerInfoTable(38) = 158308: VerInfoTable(39) = 161089: VerInfoTable(40) = 167017
End Sub

Public Function RemainderBitLength(version As Integer) As Integer
    Select Case version
    Case 1, 7 To 13, 35 To 40
        RemainderBitLength = 0
    Case 14 To 20, 28 To 34
        RemainderBitLength = 3
    Case 21 To 27
        RemainderBitLength = 4
    Case Else
        RemainderBitLength = 7
    End Select
End Function





Attribute VB_Name = "QRCodeMakeWithContent"
Option Explicit

Private Const CP_UTF8 = 65001

#If VBA7 Then
Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, _
        ByVal dwFlags As Long, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As Long, _
        ByVal lpMultiByteStr As LongPtr, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, _
        ByVal lpUsedDefaultChar As Long) As Long
#Else
Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, _
        ByVal dwFlags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, _
        ByVal lpMultiByteStr As Long, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, _
        ByVal lpUsedDefaultChar As Long) As Long
#End If





Private Const AlphanumericStr As String = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"
Private Const Debug_Draw_On_Excel_Sheet As Boolean = False

Private QRVersion As Integer
Private QRModeIndicator As ModeIndicatorType
Private QRECLevel As ECLevelType

Public QRMaskedArray()  As Byte
Private QRBitData()  As Byte
Private ModuleSize As Integer

Public Sub QRMain(InputStr As String)
    'Dim InputStr As String
    Dim InputLen As Integer
    
    If Not QRInitialized Then Call IntializeQRConst
    'InputStr = "Dear Dave,Your clear .."
    QRModeIndicator = GetMode(InputStr)
    If QRModeIndicator = MI_Byte Then
        InputLen = WideCharToMultiByte(CP_UTF8, 0, StrPtr(InputStr), -1, 0, 0, 0, 0) - 1
    Else
        InputLen = Len(InputStr)
    End If
    QRECLevel = ECL_L
    QRVersion = GetVersion(InputLen, QRModeIndicator, QRECLevel)
    ModuleSize = ((QRVersion - 1) * 4) + 21
    If QRVersion = -1 Then
        MsgBox "Exceed QRCode capacity!"
        Exit Sub
    End If
    
    Call QRDraw(CalcCode(InputStr, InputLen) & String(RemainderBitLength(QRVersion), "0"))
End Sub

Private Sub QRDraw(data As String)
    Dim x As Integer, Y As Integer, i As Integer
    Dim Sht As Worksheet, DotRng As Range
    Dim BestMaskNumber As Integer
    
    ReDim QRBitData(0 To ModuleSize - 1, 0 To ModuleSize - 1)
    ReDim QRMaskedArray(0 To 7, 0 To ModuleSize - 1, 0 To ModuleSize - 1)
    
    Call QRDrawPatterns
    Call QRDrawData(data)
    Call QRDrawVersionInfo
    
    Set Sht = ActiveSheet
    For i = 0 To 7
        Call ApplyMask(QRBitData, QRMaskedArray, i)
        Call QRDrawFormatInfo(QRMaskedArray, i, i)
    Next i
    
    BestMaskNumber = EvaluateMask(QRMaskedArray)
    If Debug_Draw_On_Excel_Sheet Then
        Application.ScreenUpdating = False
        For i = BestMaskNumber To BestMaskNumber
            For x = 0 To ModuleSize - 1
                For Y = 0 To ModuleSize - 1
                    If QRMaskedArray(i, x, Y) = 1 Then
                        Set DotRng = Sht.Cells(Y * 1 + 1, x * 1 + 1)
                        DotRng.Resize(1, 1).Interior.Color = RGB(0, 0, 0)
                    End If
                Next Y
            Next x
        Next i
        Application.ScreenUpdating = True
    End If
End Sub

Private Function QRDrawVersionInfo() As Integer
    Dim VersionInfoBinStr As String
    Dim x As Integer, Y As Integer
    Dim X2 As Integer, Y2 As Integer
    Dim i As Integer, j As Integer
    
    If QRVersion < 7 Then Exit Function
    VersionInfoBinStr = Dec2Bin(VerInfoTable(QRVersion), 18)
    x = ModuleSize - 9
    Y = 5
    X2 = 5
    Y2 = ModuleSize - 9
    For i = 1 To Len(VersionInfoBinStr)
        j = Mid(VersionInfoBinStr, i, 1)
        If j = 1 Then
            Call DrawDot(x, Y)
            Call DrawDot(X2, Y2)
        End If
        x = x - 1
        Y2 = Y2 - 1
        If x = ModuleSize - 12 Then
            x = x + 3
            Y = Y - 1
        End If
        If Y2 = ModuleSize - 12 Then
            X2 = X2 - 1
            Y2 = ModuleSize - 9
        End If
    Next i
End Function

Private Function QRDrawFormatInfo(QRMaskedArray, MaskNumber As Integer, MaskPatternIndex As Integer) As Integer
    Dim x As Integer, Y As Integer, i As Integer
    Dim X2 As Integer, Y2 As Integer, j As Integer
    Dim FmtInfoBinStr As String
    
    FmtInfoBinStr = Dec2Bin(FmtInfoTable(QRECLevel, MaskPatternIndex), 15)
    x = 8
    Y = -1
    X2 = ModuleSize
    Y2 = 8
    For i = 1 To Len(FmtInfoBinStr)
        j = Mid(FmtInfoBinStr, Len(FmtInfoBinStr) - i + 1, 1)
        Select Case i
        Case 1 To 8
            Y = Y + 1
            If i = 7 Then Y = Y + 1
            X2 = X2 - 1
        Case 9
            x = 7
            Y = 8
            X2 = 8
            Y2 = ModuleSize - 7
        Case 10
            x = 5
            Y = 8
            Y2 = Y2 + 1
        Case 11 To 15
            x = x - 1
            Y2 = Y2 + 1
        End Select
        If j = 1 Then
            QRMaskedArray(MaskNumber, x, Y) = 1
            QRMaskedArray(MaskNumber, X2, Y2) = 1
        End If
    Next i
End Function

Private Sub ApplyMask(QRDataArray, QRMaskedArray, MaskNumber As Integer)
    Dim x As Integer, Y As Integer
    
    For Y = 0 To UBound(QRDataArray, 2)
        For x = 0 To UBound(QRDataArray, 1)
            QRMaskedArray(MaskNumber, x, Y) = QRDataArray(x, Y)
            If Not InReservedAreas(x, Y) Then
                Select Case MaskNumber
                Case 0
                    If (x + Y) Mod 2 = 0 Then QRMaskedArray(MaskNumber, x, Y) = 1 - QRMaskedArray(MaskNumber, x, Y)
                Case 1
                    If (Y) Mod 2 = 0 Then QRMaskedArray(MaskNumber, x, Y) = 1 - QRMaskedArray(MaskNumber, x, Y)
                Case 2
                    If (x) Mod 3 = 0 Then QRMaskedArray(MaskNumber, x, Y) = 1 - QRMaskedArray(MaskNumber, x, Y)
                Case 3
                    If (x + Y) Mod 3 = 0 Then QRMaskedArray(MaskNumber, x, Y) = 1 - QRMaskedArray(MaskNumber, x, Y)
                Case 4
                    If (Floor(Y / 2) + Floor(x / 3)) Mod 2 = 0 Then QRMaskedArray(MaskNumber, x, Y) = 1 - QRMaskedArray(MaskNumber, x, Y)
                Case 5
                    If (x * Y) Mod 2 + (x * Y) Mod 3 = 0 Then QRMaskedArray(MaskNumber, x, Y) = 1 - QRMaskedArray(MaskNumber, x, Y)
                Case 6
                    If ((x * Y) Mod 2 + (x * Y) Mod 3) Mod 2 = 0 Then QRMaskedArray(MaskNumber, x, Y) = 1 - QRMaskedArray(MaskNumber, x, Y)
                Case 7
                    If ((x + Y) Mod 2 + (x * Y) Mod 3) Mod 2 = 0 Then QRMaskedArray(MaskNumber, x, Y) = 1 - QRMaskedArray(MaskNumber, x, Y)
                End Select
            End If
        Next x
    Next Y
End Sub

Private Sub QRDrawData(BinaryData As String)
    Dim x As Integer, Y As Integer
    Dim i As Integer, L As Integer
    Dim dx As Integer, dy As Integer
    Dim f As Integer
    
    x = ModuleSize - 1
    Y = x
    i = 1
    L = Len(BinaryData)
    dx = -1
    dy = -1
    f = 0
    Do While i <= L
        If Not InReservedAreas(x, Y) Then
            If Mid(BinaryData, i, 1) = "1" Then
                Call DrawDot(x, Y)
            End If
            i = i + 1
        End If
        x = x + dx
        dx = 0 - dx
        If x Mod 2 = f Then Y = Y + dy
        If Y = -1 Then
            dx = -1
            dy = 1
            Y = 0
            x = x - 2
        ElseIf Y = ModuleSize Then
            dx = -1
            dy = -1
            Y = ModuleSize - 1
            x = x - 2
        End If
        
        If x = 8 And Y = 8 Then
            x = x - 3
            Y = Y - dy
            dx = -1
            dy = 1
            f = 1
        End If
    Loop
End Sub

Public Sub DrawDot(x As Integer, Y As Integer, Optional XLength As Integer = 1, Optional YLength As Integer = 1)
    Dim i As Integer, j As Integer
    
    For i = x To x + XLength - 1
        For j = Y To Y + YLength - 1
            QRBitData(i, j) = 1
        Next j
    Next i
End Sub

Private Function InReservedAreas(x As Integer, Y As Integer)
    Dim i As Integer, j As Integer
    Dim X0 As Integer, Y0 As Integer
    
    InReservedAreas = x >= 0 And x <= 8 And Y >= 0 And Y <= 8   'left finder
    InReservedAreas = InReservedAreas Or (x >= ModuleSize - 8 And x <= ModuleSize - 1 And Y >= 0 And Y <= 8)    'right finder
    InReservedAreas = InReservedAreas Or (x >= 0 And x <= 8 And Y >= ModuleSize - 8 And Y <= ModuleSize - 1)    'bottom finder
    InReservedAreas = InReservedAreas Or (Y = 6)    'H Timing
    InReservedAreas = InReservedAreas Or (x = 6)    'V Timing
    If InReservedAreas Then Exit Function
    
    If QRVersion > 1 Then
        For i = 1 To APat(QRVersion).Count
            X0 = APat(QRVersion).Pos(i)
            For j = 1 To APat(QRVersion).Count
                Y0 = APat(QRVersion).Pos(j)
                If (i = 1 And j = 1) Or (i = 1 And j = APat(QRVersion).Count) Or _
                    (i = APat(QRVersion).Count And j = 1) Then
                    'don't draw
                Else
                    InReservedAreas = x >= X0 - 2 And x <= X0 + 2 And Y >= Y0 - 2 And Y <= Y0 + 2
                    If InReservedAreas Then Exit Function
                End If
            Next j
        Next i
    End If
    If QRVersion >= 7 Then
        InReservedAreas = x >= ModuleSize - 11 And x <= ModuleSize - 9 And Y >= 0 And Y <= 5
        InReservedAreas = InReservedAreas Or (x >= 0 And x <= 5 And Y >= ModuleSize - 11 And Y <= ModuleSize - 9)
    End If
End Function

Private Sub QRDrawPatterns()
    Dim i As Integer, j As Integer
    Dim x As Integer, Y As Integer
    
    Call QRDrawFinder(0, 0)    'top Finder & Separators
    Call QRDrawFinder(ModuleSize - 7, 0)   'right Finder & Separators
    Call QRDrawFinder(0, ModuleSize - 7)   'bottom left Finder & Separators
    
    'Alignment Patterns
    If QRVersion > 1 Then
        For i = 1 To APat(QRVersion).Count
            x = APat(QRVersion).Pos(i)
            For j = 1 To APat(QRVersion).Count
                Y = APat(QRVersion).Pos(j)
                If (i = 1 And j = 1) Or (i = 1 And j = APat(QRVersion).Count) Or _
                    (i = APat(QRVersion).Count And j = 1) Then
                    'don't draw
                Else
                    Call QRDrawSquare(x - 2, Y - 2, 5, False)
                    Call QRDrawSquare(x, Y, 1, True)
                End If
            Next j
        Next i
    End If
    
    'Timing Patterns
    'H
    For i = 9 To ModuleSize - 7
        If i Mod 2 = 1 Then
            Call DrawDot(i - 1, 6)
        End If
    Next i
    'V
    For i = 9 To ModuleSize - 7
        If i Mod 2 = 1 Then
            Call DrawDot(6, i - 1)
        End If
    Next i
    
    'Dark Module
    Call DrawDot(8, (4 * QRVersion) + 9)
End Sub

Private Sub QRDrawFinder(x As Integer, Y As Integer)
    Call QRDrawSquare(x, Y, 7, False)
    Call QRDrawSquare(x + 2, Y + 2, 3, True)
End Sub

Private Sub QRDrawSquare(x As Integer, Y As Integer, Length As Integer, Fill As Boolean)
    Dim i As Integer, j As Integer
    
    If Fill Then
        For i = x To x + Length - 1
            Call DrawDot(i, Y, 1, Length)
        Next i
    Else
        Call DrawDot(x, Y, Length, 1)
        Call DrawDot(x, Y, 1, Length)
        Call DrawDot(x, Y + Length - 1, Length, 1)
        Call DrawDot(x + Length - 1, Y, 1, Length)
    End If
End Sub

Private Function CalcCode(InputStr As String, InputLen As Integer) As String
    Dim i As Integer, j As Integer, k As Integer
    Dim EncodedArray() As Integer
    Dim DataBlock() As String
    Dim DataBlockLength() As Integer
    Dim ECCBlock() As String
    Dim FinalData As String
    Dim FinalECC As String
    
    ReDim EncodedArray(1 To ECBlockTable(QRVersion, QRECLevel).LenData)
    Call EncodeData(InputStr, EncodedArray, InputLen)

    ReDim DataBlockLength(1 To ECBlockTable(QRVersion, QRECLevel).BlockCount(1) + _
            ECBlockTable(QRVersion, QRECLevel).BlockCount(2))
    k = 1
    For i = 1 To 2
        For j = 1 To ECBlockTable(QRVersion, QRECLevel).BlockCount(i)
            DataBlockLength(k) = ECBlockTable(QRVersion, QRECLevel).LenBlock(i)
            k = k + 1
        Next j
    Next i
    
    ReDim DataBlock(1 To UBound(DataBlockLength))
    ReDim ECCBlock(1 To UBound(DataBlock))
    Call CalcECC(EncodedArray, DataBlockLength, DataBlock, ECCBlock)
    
    For i = 1 To Max(ECBlockTable(QRVersion, QRECLevel).LenBlock(1), _
            ECBlockTable(QRVersion, QRECLevel).LenBlock(2), _
            ECBlockTable(QRVersion, QRECLevel).LenEC) * 8 Step 8
        For j = 1 To UBound(DataBlock)
            If DataBlockLength(j) * 8 >= i Then
                FinalData = FinalData & Mid(DataBlock(j), i, 8)
            End If
            If ECBlockTable(QRVersion, QRECLevel).LenEC * 8 >= i Then
                FinalECC = FinalECC & Mid(ECCBlock(j), i, 8)
            Else
                'Stop
            End If
        Next j
    Next i
    
    CalcCode = FinalData & FinalECC
End Function

Private Function CalcECC(EncodedArray() As Integer, DataBlockLength() As Integer, _
        DataBlock() As String, ECCBlock() As String) As Boolean
    Dim i As Integer, j As Integer, k As Integer, L As Integer, m As Integer, num As Integer
    Dim GenPloy() As Integer
    Dim TmpPloy() As Integer
    
    k = 1
    i = 1
    Do While i <= UBound(DataBlockLength)
        On Error Resume Next
        If UBound(GenPloy) <> ECBlockTable(QRVersion, QRECLevel).LenEC + 1 Then
            ReDim GenPloy(1 To ECBlockTable(QRVersion, QRECLevel).LenEC + 1)
            Call GeneGAlpha(ECBlockTable(QRVersion, QRECLevel).LenEC, GenPloy)
        End If
        On Error GoTo 0
        
        ReDim TmpPloy(1 To DataBlockLength(i) + UBound(GenPloy) - 1)

        For j = 1 To DataBlockLength(i)
            DataBlock(i) = DataBlock(i) & Dec2Bin(EncodedArray(k), 8)
            TmpPloy(j) = EncodedArray(k)
            k = k + 1
        Next j

        For j = DataBlockLength(i) + 1 To DataBlockLength(i) + UBound(GenPloy) - 1
            TmpPloy(j) = 0
        Next j

        For j = 1 To DataBlockLength(i)
            L = TmpPloy(1)
            For m = 1 To DataBlockLength(i) + UBound(GenPloy) - 2
                If m < UBound(GenPloy) And L <> 0 Then
                    num = TmpPloy(m + 1) Xor Alpha2Term(Term2Alpha(L) + GenPloy(m + 1))
                Else
                    num = TmpPloy(m + 1) Xor 0
                End If
                TmpPloy(m) = num
            Next m
        Next j
        For m = 1 To ECBlockTable(QRVersion, QRECLevel).LenEC
            ECCBlock(i) = ECCBlock(i) & Dec2Bin(TmpPloy(m), 8)
        Next m
        i = i + 1
    Loop
End Function

Private Function EncodeData(InputStr As String, ByRef EncodedArray() As Integer, InputLen As Integer) As Boolean
    Dim RawData As String
    Dim RawDataBitLen As Integer
    Dim CCI As Integer
    Dim i As Integer, j As Integer
    Dim TotalDataBitLen As Integer
    Dim bs As String
    
    EncodeData = False
    
    CCI = CharCountIndicator(QRVersion, QRModeIndicator)
    RawData = Dec2Bin(QRModeIndicator, 4)
    RawData = RawData & Dec2Bin(InputLen, CCI)
    
    Select Case QRModeIndicator
    Case EM_Numeric
        RawData = RawData & EncodeNumeric(InputStr)
        RawDataBitLen = 4 + CCI + 10 * (InputLen \ 3)
        Select Case InputLen Mod 3
        Case 4
            RawDataBitLen = RawDataBitLen + 1
        Case 7
            RawDataBitLen = RawDataBitLen + 2
        End Select
    Case EM_Alphanumeric
        RawData = RawData & EncodeAlphanumeric(InputStr)
        RawDataBitLen = 4 + CCI + 11 * (InputLen \ 2) + 6 * (InputLen Mod 2)
    Case EM_Byte
        bs = EncodeByte(InputStr)
        RawData = RawData & bs
        RawDataBitLen = 4 + CCI + Len(bs) 'InputLen
    Case Else
        MsgBox "Charset NOT support now!"
        Exit Function
    End Select
    TotalDataBitLen = UBound(EncodedArray) * 8
    If RawDataBitLen < TotalDataBitLen Then
        RawData = RawData & Dec2Bin(0, Min(TotalDataBitLen - RawDataBitLen, 4))
        RawDataBitLen = RawDataBitLen + Min(TotalDataBitLen - RawDataBitLen, 4)
    End If
    If RawDataBitLen Mod 8 > 0 Then
        RawData = RawData & Dec2Bin(0, 8 - RawDataBitLen Mod 8)
        RawDataBitLen = RawDataBitLen + 8 - RawDataBitLen Mod 8
    End If
    For i = 1 To (TotalDataBitLen - RawDataBitLen) / 8
        If i Mod 2 > 0 Then
            RawData = RawData & "11101100"
        Else
            RawData = RawData & "00010001"
        End If
    Next i
    j = 1
    For i = 1 To TotalDataBitLen Step 8
        EncodedArray(j) = Bin2Dec(Mid(RawData, i, 8))
        j = j + 1
    Next i
    EncodeData = True
End Function

Public Function EncodeNumeric(InputStr As String) As String
    Dim i As Integer, j As Integer
    Dim s  As String
    
    i = 1
    For i = 1 To Len(InputStr) Step 3
        s = Mid(InputStr, i, 3)
        Select Case Len(s)
        Case 1
            j = 4
        Case 2
            j = 7
        Case Else
            j = 10
        End Select
        EncodeNumeric = EncodeNumeric & Dec2Bin(s, j)
    Next i
End Function

Public Function EncodeAlphanumeric(InputStr As String) As String
    Dim i As Integer
 
    For i = 1 To Len(InputStr) Step 2
        If i = Len(InputStr) Then
            EncodeAlphanumeric = EncodeAlphanumeric & Dec2Bin(InStr(AlphanumericStr, Mid(InputStr, i, 1)) - 1, 6)
        Else
            EncodeAlphanumeric = EncodeAlphanumeric & Dec2Bin(((InStr(AlphanumericStr, Mid(InputStr, i, 1)) - 1) * 45 + _
                    InStr(AlphanumericStr, Mid(InputStr, i + 1, 1)) - 1) And 2047, 11)
        End If
    Next i
End Function

Public Function EncodeByte(InputStr As String) As String
    Dim i As Integer, j As Integer
    Dim x() As Byte
    
    j = WideCharToMultiByte(CP_UTF8, 0, StrPtr(InputStr), -1, 0, 0, 0, 0)
    ReDim x(0 To j - 1)
    j = WideCharToMultiByte(CP_UTF8, 0, StrPtr(InputStr), -1, VarPtr(x(0)), j, 0, 0)
    For i = 0 To j - 2
        EncodeByte = EncodeByte & Dec2Bin(x(i), 8)
    Next i
End Function

Public Function GetVersion(ByVal RawLength As Integer, ModeIndicator As ModeIndicatorType, ByRef minec_level As ECLevelType) As Integer
    Dim local_mode As Integer
    Dim local_tab(1 To 3, 1 To 4) As Integer
    Dim bytes, Bits, digits, modebits, c, version
    Dim ec_level As Integer
    Dim cap(1 To 40) As String
    Dim x As Integer, L As Integer
    Dim minversion As Integer
    Dim PropECLevel As Integer
    
    minversion = 40
    
    local_mode = ModeIndicator
    If ModeIndicator = MI_Byte Then local_mode = 3
    
    local_tab(1, 1) = 10: local_tab(1, 2) = 9: local_tab(1, 3) = 8: local_tab(1, 4) = 8
    local_tab(2, 1) = 12: local_tab(2, 2) = 11: local_tab(2, 3) = 16: local_tab(2, 4) = 10
    local_tab(3, 1) = 14: local_tab(3, 2) = 13: local_tab(2, 3) = 16: local_tab(3, 4) = 12
    cap(1) = "19,16,13,9": cap(2) = "34,28,22,16": cap(3) = "55,44,34,26": cap(4) = "80,64,48,36"
    cap(5) = "108,86,62,46": cap(6) = "136,108,76,60": cap(7) = "156,124,88,66": cap(8) = "194,154,110,86"
    cap(9) = "232,182,132,100": cap(10) = "274,216,154,122": cap(11) = "324,254,180,140": cap(12) = "370,290,206,158"
    cap(13) = "428,334,244,180": cap(14) = "461,365,261,197": cap(15) = "523,415,295,223": cap(16) = "589,453,325,253"
    cap(17) = "647,507,367,283": cap(18) = "721,563,397,313": cap(19) = "795,627,445,341": cap(20) = "861,669,485,385"
    cap(21) = "932,714,512,406": cap(22) = "1006,782,568,442": cap(23) = "1094,860,614,464": cap(24) = "1174,914,664,514"
    cap(25) = "1276,1000,718,538": cap(26) = "1370,1062,754,596": cap(27) = "1468,1128,808,628": cap(28) = "1531,1193,871,661"
    cap(29) = "1631,1267,911,701": cap(30) = "1735,1373,985,745": cap(31) = "1843,1455,1033,793": cap(32) = "1955,1541,1115,845"
    cap(33) = "2071,1631,1171,901": cap(34) = "2191,1725,1231,961": cap(35) = "2306,1812,1286,986": cap(36) = "2434,1914,1354,1054"
    cap(37) = "2566,1992,1426,1096": cap(38) = "2702,2102,1502,1142": cap(39) = "2812,2216,1582,1222": cap(40) = "2956,2334,1666,1276"

    For ec_level = minec_level To 4
        For version = 1 To 40
            Bits = Split(cap(version), ",")(ec_level - 1) * 8
            Bits = Bits - 4
            If version < 10 Then
                digits = local_tab(1, local_mode)
            ElseIf version < 27 Then
                digits = local_tab(2, local_mode)
            ElseIf version <= 40 Then
                digits = local_tab(3, local_mode)
            End If
            
            modebits = Bits - digits
            If local_mode = 1 Then
                c = Int(modebits * 3 / 10)
            ElseIf local_mode = 2 Then
                c = Int(modebits * 2 / 11)
            ElseIf local_mode = 3 Then
                c = Int(modebits * 1 / 8)
            Else
                c = Int(modebits * 1 / 13)
            End If
            If c >= RawLength Then
                If version < minversion Then
                    minversion = version
                    PropECLevel = ec_level
                    Exit For
                End If
            End If
        Next version
    Next ec_level
    
    minec_level = PropECLevel
    GetVersion = minversion
End Function

Public Function GetMode(s As String) As EncodingModeType
    Dim i As Integer
    Dim c As String
    
    GetMode = EM_Numeric
    For i = 1 To Len(s)
        c = Mid(s, i, 1)
        If InStr("ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:", c) > 0 Then
            GetMode = EM_Alphanumeric
        Else
            GetMode = EM_Byte
            Exit For
        End If
    Next i
End Function

Private Function Min(ParamArray Values())
    Dim i As Integer
    
    Min = Values(LBound(Values))
    For i = LBound(Values) + 1 To UBound(Values)
        If Values(i) < Min Then Min = Values(i)
    Next i
End Function

Private Function Max(ParamArray Values())
    Dim i As Integer
    
    Max = Values(LBound(Values))
    For i = LBound(Values) + 1 To UBound(Values)
        If Values(i) > Max Then Max = Values(i)
    Next i
End Function

Private Function Bin2Dec(BinaryString As String) As Long
    Dim x As Integer
    
    For x = 0 To Len(BinaryString) - 1
        Bin2Dec = Bin2Dec + val(Mid(BinaryString, Len(BinaryString) - x, 1)) * 2 ^ x
    Next
End Function

Public Function Dec2Bin(ByVal DecimalIn As Long, _
              Optional NumberOfBits As Variant) As String
    Dec2Bin = ""
    DecimalIn = Int(CDec(DecimalIn))
    Do While DecimalIn <> 0
        Dec2Bin = Format$(DecimalIn - 2 * Int(DecimalIn / 2)) & Dec2Bin
        DecimalIn = Int(DecimalIn / 2)
    Loop
    If Not IsMissing(NumberOfBits) Then
       If Len(Dec2Bin) > NumberOfBits Then
          Dec2Bin = "Error - Number exceeds specified bit size"
       Else
          Dec2Bin = Right$(String$(NumberOfBits, _
                    "0") & Dec2Bin, NumberOfBits)
       End If
    End If
End Function

Private Sub GeneGAlpha(BlockLength As Integer, Generator)
    Dim i As Integer, j As Integer
       
    ReDim Generator(1 To BlockLength + 1)
    ReDim GenerateStep(1 To 2, 1 To BlockLength + 1)
    GenerateStep(1, 1) = 0
    GenerateStep(1, 2) = Term2Alpha(1)
    GenerateStep(2, 1) = 1
    
    For i = 2 To BlockLength
        For j = 2 To i + 1
            If j <= i Then
                GenerateStep(2, j) = Alpha2Term(i - 1 + GenerateStep(1, j - 1)) Xor Alpha2Term(GenerateStep(1, j))
            Else
                GenerateStep(2, j) = Alpha2Term(i - 1 + GenerateStep(1, j - 1))
            End If
        Next j
        For j = 1 To i + 1
            GenerateStep(1, j) = Term2Alpha(GenerateStep(2, j))
        Next j
    Next i
    
    For j = 1 To BlockLength + 1
        Generator(j) = (GenerateStep(1, j))
    Next j
End Sub

Private Function Term2Alpha(Term)
    If Term = 0 Then
        Term2Alpha = 0
    Else
        Term2Alpha = LogA(Term)
    End If
End Function

Private Function Alpha2Term(Alpha)
    Alpha2Term = ALogA(IIf(Alpha < 255, Alpha, Alpha Mod 255))
End Function

Private Function EvaluateMask(QRMaskedArray) As Integer
    Dim i As Integer, j As Integer, k As Integer
    Dim s As String, L As Integer
    
    k = 0
    L = CalcMaskScore(QRMaskedArray, 0)
    For i = 1 To 7
        j = CalcMaskScore(QRMaskedArray, i)
        If j < L Then
            k = i
            L = j
        End If
    Next i
    EvaluateMask = k
End Function

Private Function CalcMaskScore(QRMaskedArray, MaskNumber As Integer) As Integer
    CalcMaskScore = EvaluatePenalty1(QRMaskedArray, MaskNumber)
    CalcMaskScore = CalcMaskScore + EvaluatePenalty2(QRMaskedArray, MaskNumber)
    CalcMaskScore = CalcMaskScore + EvaluatePenalty3(QRMaskedArray, MaskNumber)
    CalcMaskScore = CalcMaskScore + EvaluatePenalty4(QRMaskedArray, MaskNumber)
End Function

Private Function EvaluatePenalty4(QRArray, MaskNumber As Integer) As Integer
    Dim x As Integer, Y As Integer
    Dim DrakCount As Integer
    Dim i As Integer, j As Integer
    
    For Y = 0 To UBound(QRArray, 3)
        For x = 0 To UBound(QRArray, 2)
            DrakCount = DrakCount + QRArray(MaskNumber, x, Y)
        Next x
    Next Y
    
    i = DrakCount / (UBound(QRArray, 3) + 1) ^ 2 * 100
    j = i \ 5
    i = Abs((j * 5) - 50) / 5 * 10
    j = Abs(((j + 1) * 5) - 50) / 5 * 10
    EvaluatePenalty4 = IIf(i < j, i, j)
End Function

Private Function EvaluatePenalty3(QRArray, MaskNumber As Integer) As Integer
    Dim x As Integer, Y As Integer
    
    For Y = 0 To UBound(QRArray, 3) - 10
        For x = 0 To UBound(QRArray, 2) - 10
            If QRArray(MaskNumber, x, Y) = 1 And QRArray(MaskNumber, x + 1, Y) = 0 And QRArray(MaskNumber, x + 2, Y) = 1 And _
                    QRArray(MaskNumber, x + 3, Y) = 1 And QRArray(MaskNumber, x + 4, Y) = 1 And QRArray(MaskNumber, x + 5, Y) = 0 And _
                    QRArray(MaskNumber, x + 6, Y) = 1 And QRArray(MaskNumber, x + 7, Y) = 0 And QRArray(MaskNumber, x + 8, Y) = 0 And _
                    QRArray(MaskNumber, x + 9, Y) = 0 And QRArray(MaskNumber, x + 10, Y) = 0 Then
                EvaluatePenalty3 = EvaluatePenalty3 + 40
            ElseIf QRArray(MaskNumber, x, Y) = 0 And QRArray(MaskNumber, x + 1, Y) = 0 And QRArray(MaskNumber, x + 2, Y) = 0 And _
                    QRArray(MaskNumber, x + 3, Y) = 0 And QRArray(MaskNumber, x + 4, Y) = 1 And QRArray(MaskNumber, x + 5, Y) = 0 And _
                    QRArray(MaskNumber, x + 6, Y) = 1 And QRArray(MaskNumber, x + 7, Y) = 1 And QRArray(MaskNumber, x + 8, Y) = 1 And _
                    QRArray(MaskNumber, x + 9, Y) = 0 And QRArray(MaskNumber, x + 10, Y) = 1 Then
                EvaluatePenalty3 = EvaluatePenalty3 + 40
            End If
        Next x
    Next Y
    
    For x = 0 To UBound(QRArray, 2) - 10
        For Y = 0 To UBound(QRArray, 3) - 10
            If QRArray(MaskNumber, x, Y) = 1 And QRArray(MaskNumber, x + 1, Y) = 0 And QRArray(MaskNumber, x + 2, Y) = 1 And _
                    QRArray(MaskNumber, x + 3, Y) = 1 And QRArray(MaskNumber, x + 4, Y) = 1 And QRArray(MaskNumber, x + 5, Y) = 0 And _
                    QRArray(MaskNumber, x + 6, Y) = 1 And QRArray(MaskNumber, x + 7, Y) = 0 And QRArray(MaskNumber, x + 8, Y) = 0 And _
                    QRArray(MaskNumber, x + 9, Y) = 0 And QRArray(MaskNumber, x + 10, Y) = 0 Then
                EvaluatePenalty3 = EvaluatePenalty3 + 40
            ElseIf QRArray(MaskNumber, x, Y) = 0 And QRArray(MaskNumber, x + 1, Y) = 0 And QRArray(MaskNumber, x + 2, Y) = 0 And _
                    QRArray(MaskNumber, x + 3, Y) = 0 And QRArray(MaskNumber, x + 4, Y) = 1 And QRArray(MaskNumber, x + 5, Y) = 0 And _
                    QRArray(MaskNumber, x + 6, Y) = 1 And QRArray(MaskNumber, x + 7, Y) = 1 And QRArray(MaskNumber, x + 8, Y) = 1 And _
                    QRArray(MaskNumber, x + 9, Y) = 0 And QRArray(MaskNumber, x + 10, Y) = 1 Then
                EvaluatePenalty3 = EvaluatePenalty3 + 40
            End If
        Next Y
    Next x
End Function

Private Function EvaluatePenalty2(QRArray, MaskNumber As Integer) As Integer
    Dim x As Integer, Y As Integer
    
    For Y = 0 To UBound(QRArray, 3) - 1
        For x = 0 To UBound(QRArray, 2) - 1
            If QRArray(MaskNumber, x, Y) * 4 = QRArray(MaskNumber, x, Y) + QRArray(MaskNumber, x + 1, Y) + _
                    QRArray(MaskNumber, x, Y + 1) + QRArray(MaskNumber, x + 1, Y + 1) Then
                EvaluatePenalty2 = EvaluatePenalty2 + 3
            End If
        Next x
    Next Y
    
End Function

Private Function EvaluatePenalty1(QRArray, MaskNumber As Integer) As Integer
    Dim x As Integer, Y As Integer
    Dim c As Integer
    Dim CellFilled As Integer, LastCellFilled As Integer
    
    For Y = 0 To UBound(QRArray, 3)
        c = 1
        LastCellFilled = QRArray(MaskNumber, 0, Y)
        For x = 1 To UBound(QRArray, 2)
            CellFilled = QRArray(MaskNumber, x, Y)
            If CellFilled <> LastCellFilled Then
                If c >= 5 Then
                    EvaluatePenalty1 = EvaluatePenalty1 + c - 2
                End If
                LastCellFilled = CellFilled
                c = 1
            Else
                c = c + 1
            End If
        Next x
        If c >= 5 Then
            EvaluatePenalty1 = EvaluatePenalty1 + c - 2
        End If
    Next Y
    
    For x = 0 To UBound(QRArray, 2)
        c = 1
        LastCellFilled = QRArray(MaskNumber, x, 0)
        For Y = 1 To UBound(QRArray, 3)
            CellFilled = QRArray(MaskNumber, x, Y)
            If CellFilled <> LastCellFilled Then
                If c >= 5 Then
                    EvaluatePenalty1 = EvaluatePenalty1 + c - 2
                End If
                LastCellFilled = CellFilled
                c = 1
            Else
                c = c + 1
            End If
        Next Y
        If c >= 5 Then
            EvaluatePenalty1 = EvaluatePenalty1 + c - 2
        End If
    Next x
End Function

Private Function Floor(ByVal x As Double, Optional ByVal Factor As Double = 1) As Double
    Floor = Int(x / Factor) * Factor
End Function







Attribute VB_Name = "ReceiverTree"
Option Explicit
Dim Tree     '|fffd||fffd||bd||fffd||fffd||fffd||fffd||13f||bc||fffd||fffd||fffd||6d22||ff||fffd||fffd||fffd||2f5||fffd|
Dim HKTree   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||13f||bc||fffd||fffd|

Sub appInit()
    treeInit (True)
    treeInit (False)
    
     Sheets("Printing").Columns("A").ColumnWidth = 4.5
     Sheets("Printing").Columns("B").ColumnWidth = 3
     Sheets("Printing").Columns("J").ColumnWidth = 3
     Sheets("Printing").Columns("K").ColumnWidth = 3
    
     Sheets("Printing").Columns("C").ColumnWidth = 8.38
     Sheets("Printing").Columns("D").ColumnWidth = 8.38
     Sheets("Printing").Columns("E").ColumnWidth = 8.38
     Sheets("Printing").Columns("F").ColumnWidth = 8.38
     Sheets("Printing").Columns("G").ColumnWidth = 8.38
     Sheets("Printing").Columns("H").ColumnWidth = 8.38
     Sheets("Printing").Columns("I").ColumnWidth = 8.38
    
    Sheets("Printing").Columns("F").ColumnWidth = 17
    
End Sub

'|fffd||fffd||2bc||fffd||fffd||13f||bc||fffd||fffd|
Sub treeInit(isSenderTree)
    Dim mybar As Object, arr
    Dim cellName As String
    If isSenderTree Then
        cellName = "HKTreeCell"
         arr = Sheets("ReceiverAddr").Range("B1:C156").Value
        
    Else
        cellName = "CNTreeCell"
        'arr = Range("ReceiverAddr!a157").CurrentRegion.Value
        arr = Sheets("ReceiverAddr").Range("A156:C3857").Value
    End If
    
    On Error Resume Next
    
    Application.CommandBars(cellName).Delete    '|fffd||fffd||fffd||fffd||2f5||fffd||1f0||27e||fffd||fffd||52d||fffd||2f5||fffd|
    Set mybar = Application.CommandBars.Add(Name:=cellName, Position:=msoBarPopup)    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd||fffd||2f5||fffd|
    
    If isSenderTree Then
        Set HKTree = CreateObject("Scripting.Dictionary")    '|13f||bc||fffd||fffd||fffd||6d22||ff||fffd||fffd||fffd||2f5||fffd|
        HKTree.Add cellName, mybar
        doMakeTree HKTree, arr, cellName
    Else
        Set Tree = CreateObject("Scripting.Dictionary")    '|13f||bc||fffd||fffd||fffd||6d22||ff||fffd||fffd||fffd||2f5||fffd|
        Tree.Add cellName, mybar
        doMakeTree Tree, arr, cellName
        
    End If
    
    Set mybar = Nothing
    
End Sub
Sub doMakeTree(treeObj, arr, cellName)
    Dim i&, j&, key$, myb, Pkey$
    Dim N_col As Long '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    '|5fc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b6||fffd||fffd||fffd|
    N_col = UBound(arr, 2)
    ReDim Preserve arr(1 To UBound(arr, 1), 1 To N_col + 1)    '|fffd||fffd||fffd||fffd||4ff||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2b6||fffd||fffd|
    For j = 2 To UBound(arr, 1)
        'xNode.key = arr(j, 1): xNode.text = arr(j, 1): xNode.parentKey = ""
        If Not treeObj.exists(arr(j, 1)) Then
            If arr(j, 2) = "" Then    '|fffd||6b6||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd||5b1||fffd||fffd||434||fffd||fffd||fffd||ec34||165|
                AddControlButton cellName, arr(j, 1), arr(j, 1), j, N_col, treeObj
            Else    '|fffd||fffd||fffd||bc||fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||fffd||4f5||fffd||fffd||fffd||fffd||6b5||fffd|
                AddControlPopup cellName, arr(j, 1), arr(j, 1), treeObj
            End If
        End If
    Next
    
    
    
    '|fffd||fffd||fffd||fffd||fffd||6b6||fffd||fffd||fffd||fffd||53a||fffd||fffd||fffd||535||fffd||4bb||fffd||fffd||3aa||fffd||fffd||5fc|key
    'Exit Sub
    For i = 2 To UBound(arr)    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||534||fffd||fffd|
        key = arr(i, 1)    '|fffd||63c||fffd||fffd||5b4||4f5||fffd||4bb||fffd||43f||fffd||2bc|
        For j = 2 To N_col  '|fffd||fffd||fffd||fffd|2-N|fffd||fffd|
            If arr(i, j) <> "" Then    '|fffd||578||fffd||fffd||fffd||fffd||fffd|
                Pkey = key    '|fffd||fffd||fffd||6b5||fffd||63c||fffd||fffd||fffd|
                key = key & "\" & arr(i, j) '|fffd||fffd||fffd||fffd||fffd||63c||fffd||fffd||fffd|
                If arr(i, j + 1) = "" Then  '|fffd||fffd||4bb||fffd||fffd||3aa||fffd||fffd||fffd||fffd||5b1||fffd||fffd||434||fffd||fffd||fffd||ec34||165|
                    AddControlButton Pkey, key, arr(i, j), i, N_col, treeObj
                Else    '|fffd||fffd||fffd||bc||fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||fffd||4f5||fffd||fffd||fffd||fffd||6b5||fffd|
                    If Not Tree.exists(key) Then    '|fffd||fffd||4bb||fffd||3b2||2f5||fffd||fffd||fffd||fffd||fffd|
                        AddControlPopup Pkey, key, arr(i, j), treeObj
                    End If
                End If
            End If
        Next
    Next
End Sub


'|fffd||fffd||fffd||4f2||2f5||fffd||fffd||fffd||fffd||fffd|
Private Sub AddControlButton(ByVal Pkey$, ByVal key$, ByVal caption$, ByVal i&, ByVal n&, treeObj)
    Dim myb
    Set myb = treeObj(Pkey).Controls.Add(Type:=msoControlButton)
    With myb    '|fffd||2f5||fffd||fffd||fffd||fffd||bd25||fffd||fffd||fffd||fffd||165|
        .caption = caption    '|fffd||2f5||fffd||fffd||fffd||165||fffd||fffd||fffd||fffd||3aa|x
        .OnAction = "'WriteToRng " & i & "," & n & "'" '|fffd||fffd||fffd||4bb||fffd||fffd||461||fffd||74977||fffd||fffd||bc||fffd|,|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End With
    treeObj.Add key, myb
End Sub


'|fffd||fffd||fffd||4f5||fffd||fffd||fffd||fffd||2f5||fffd||fffd||6b5||fffd|
Private Sub AddControlPopup(ByVal Pkey$, ByVal key$, ByVal caption$, treeObj)
    Dim myb
    Set myb = treeObj(Pkey).Controls.Add(Type:=msoControlPopup)
    myb.caption = caption    '|fffd||2f5||fffd||fffd||fffd||165||fffd||fffd||fffd||fffd|
    treeObj.Add key, myb '|fffd||fffd||fffd||fffd||fffd||5b5||fffd||fffd||539||fffd||fffd||bc||fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||fffd||6b5||fffd||fffd||fffd|
End Sub


Public Sub WriteToRng(ByVal i&, ByVal N_col&)
    Dim distVal As String, j As Integer, level As Integer
    level = 3
    
    If N_col = 3 Then
        i = i + 155
    End If
    
    
    distVal = ""
    For j = 1 To level
    distVal = distVal & Sheets("ReceiverAddr").Cells(i, j).Value & "-"
    Next
    
    distVal = Left(distVal, Len(distVal) - 1)
    
    If (Right(distVal, 1) = "-") Then
        distVal = Left(distVal, Len(distVal) - 1)
    End If
    
    
    ActiveCell.Value = distVal
End Sub




Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()
    ActiveSheet.Unprotect Password:="sfdigitalization"
    
    Cells.Locked = False '|fffd||fffd||fffd||43a||fffd||fffd||fffd||fffd||fffd|

        Set rg = Range("A4:E4")
        For Each cell In rg
            cell.Locked = True
        Next
        
        Set rg2 = Range("A8:L8")
        
        For Each cell In rg2
            cell.Locked = True
        Next
        
        Set rg3 = Range("A3")
        
        For Each cell In rg3
            cell.Locked = True
        Next
        
        Set rg4 = Range("A7")
        
        For Each cell In rg4
            cell.Locked = True
        Next
        
        ActiveSheet.Protect Password:="sfdigitalization", DrawingObjects:=True, Contents:=True, Scenarios:=True _
        , AllowFiltering:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

If Target.Column = 4 Then

    If Target.row > 8 Then
     With Application.CommandBars("CNTreeCell")
                .ShowPopup
        End With
    ElseIf Target.row = 5 Then
         With Application.CommandBars("HKTreeCell")
                .ShowPopup
        End With
    End If

End If
   
End Sub




Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_Open()
    Call ReceiverTree.appInit
End Sub


Attribute VB_Name = "WaybillDataPrint"
Sub doMakePrintViewWithWaybillData()
    
    Sheets("Printing").Activate
    Application.ScreenUpdating = False
    For Each x In ActiveSheet.DrawingObjects
    If InStr(x.Name, "Picture") > 0 Then x.Delete
    Next
    
    For Each SHAP In Sheets("Printing").Shapes  '//|46d||fffd||fffd||fffd||fffd||fffd||fffd||37c||1ac|
            If SHAP.Type = 13 Then SHAP.Delete
    Next
        
    
    Sheets("Printing").UsedRange.Clear
    Sheets("Printing").Cells.Interior.ColorIndex = 2
    Sheets("Printing").UsedRange.Font.Name = Sheets("template").Cells(4, 13).Value
    

    
    
    'Cells.RowHeight = 13.6
    
    
    Dim waybillData As New WaybillModel
    '=============================
    ' |fffd||13c||fffd||fffd||fffd||fffd||fffd||3e2|
    '=============================
    waybillData.senderCompanyName = Sheets("Information").Cells(5, 1).Value
    waybillData.sender = Sheets("Information").Cells(5, 2).Value
    waybillData.senderPhone = Sheets("Information").Cells(5, 3).Value
    waybillData.senderArea = Sheets("Information").Cells(5, 4).Value
    waybillData.senderAddress = Sheets("Information").Cells(5, 5).Value
    
    Dim tipTxt As String
    tipTxt = Sheets("template").Cells(3, 13).Value
    
    If Len(waybillData.sender) = 0 Then
     Sheets("Information").Activate
        MsgBox (Replace(Replace(tipTxt, "row", 5), "cell", "2"))
        Exit Sub
    ElseIf Len(waybillData.senderPhone) = 0 Then
        Sheets("Information").Activate
        MsgBox (Replace(Replace(tipTxt, "row", 5), "cell", "3"))
        Exit Sub
    ElseIf Len(waybillData.senderArea) = 0 Then
        Sheets("Information").Activate
        MsgBox (Replace(Replace(tipTxt, "row", 5), "cell", "4"))
         Exit Sub
    ElseIf Len(waybillData.senderAddress) = 0 Then
        Sheets("Information").Activate
        MsgBox (Replace(Replace(tipTxt, "row", 5), "cell", "5"))
         Exit Sub
    End If
    

    
    Dim waybillSheetIndex As Integer
    waybillSheetIndex = 0
    '================================
    '1|fffd||fffd||2fe||fffd||fffd||fffd|Q    2|fffd||57c||fffd||fffd||fffd|  3|93||fffd|j|fffd||512|    4|fffd|^|fffd||fffd|    5|514||fffd||fffd||fffd||fffd||5b7|    6|fffd||1f7||718c3|r    7|fffd||fffd||fffd|r|5b5|(HKD)   8|fffd||43c||fffd||fffd||fffd||fffd||fffd||fffd|  9|fffd||fffd||fffd||fffd||fffd||fffd|  10|fffd||fffd||fffd||edfd||2bd|    11|fffd||bd|Y|fffd||fffd||316|    12|fffd||fffd||fffd|]
    '===============================
    Dim isNotTheLast As Boolean, rowIndex As Integer, printRow As Integer

    isNotTheLast = False
    rowIndex = 9
    printRow = 0
    While isNotTheLast = False
         If (IsEmpty(Sheets("Information").Cells(rowIndex, 2)) And IsEmpty(Sheets("Information").Cells(rowIndex, 3)) And IsEmpty(Sheets("Information").Cells(rowIndex, 5))) Then
            isNotTheLast = True
            Dim rows As Integer
            rows = printRow * 40
            
            '|fffd||fffd||fffd||fb||fffd||43f||37b||fffd||fffd||fffd||3e2|
            If rows = 0 Then
                Sheets("Information").Activate
            Else
                Sheets("Printing").PageSetup.PrintArea = "$A$1:$K$" & rows
            End If
            
            Exit Sub
         End If
         
         '====================================
         '|fffd||fffd||221||fffd||fffd||1f0||fffd||fb||fffd||fffd||fffd||3e2|
         '====================================
        waybillData.receiveCompany = Sheets("Information").Cells(rowIndex, 1).Value
        waybillData.receive = Sheets("Information").Cells(rowIndex, 2).Value
        waybillData.receivePhone = Sheets("Information").Cells(rowIndex, 3).Value
        waybillData.receiveArea = Sheets("Information").Cells(rowIndex, 4).Value
        waybillData.receiveAddress = Sheets("Information").Cells(rowIndex, 5).Value
        waybillData.taxNumber = Sheets("Information").Cells(rowIndex, 6).Value
        If (Sheets("Information").Cells(rowIndex, 7).Value = Sheets("template").Cells(6, 13).Value) Then
         waybillData.isInsure = 1
        Else
         waybillData.isInsure = 0
        End If
        waybillData.insurePrice = Sheets("Information").Cells(rowIndex, 8).Value
        
        '|fffd||fffd||1b7||fffd||fffd||fffd||fffd|
        Dim consign As String
        consign = ""
        For n = rowIndex To rowIndex + 3
            If Len(Sheets("Information").Cells(n, 9).Value) > 0 Then
                consign = consign & inputValueFormat2(Sheets("Information").Cells(n, 9).Value) & ","
                consign = consign & inputValueFormat2(Sheets("Information").Cells(n, 10).Value) & ","
                consign = consign & inputValueFormat2(Sheets("Information").Cells(n, 12).Value) & ","
                consign = consign & inputValueFormat2(Sheets("Information").Cells(n, 13).Value) & ","
                consign = consign & inputValueFormat2(Sheets("Information").Cells(n, 14).Value) & ";"
            End If
        Next
        
        If Len(consign) > 0 Then
            consign = Left(consign, Len(consign) - 1)
        End If
         waybillData.receiveContent = consign
         waybillData.coinType = inputValueFormat2(Sheets("Information").Cells(rowIndex, 11).Value)
         waybillData.receivePayModel = Sheets("Information").Cells(rowIndex, 15).Value
         waybillData.receiveCardNo = Sheets("Information").Cells(rowIndex, 16).Value
         waybillData.taxPayModel = Sheets("Information").Cells(rowIndex, 17).Value
         waybillData.taxCardNo = Sheets("Information").Cells(rowIndex, 18).Value
         waybillData.remark = Sheets("Information").Cells(rowIndex, 19).Value
        
        '=====================================
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1f7||fffd||3aa||fffd||fffd|
        If Len(waybillData.receive) = 0 Then
         Sheets("Information").Activate
            MsgBox (Replace(Replace(tipTxt, "row", rowIndex), "cell", "2"))
            isNotTheLast = True
            Exit Sub
        ElseIf Len(waybillData.receivePhone) = 0 Then
            Sheets("Information").Activate
            MsgBox (Replace(Replace(tipTxt, "row", rowIndex), "cell", "3"))
            isNotTheLast = True
            Exit Sub
        ElseIf Len(waybillData.receiveArea) = 0 Then
            Sheets("Information").Activate
            MsgBox (Replace(Replace(tipTxt, "row", rowIndex), "cell", "4"))
            isNotTheLast = True
            Exit Sub
        ElseIf Len(waybillData.receiveAddress) = 0 Then
            Sheets("Information").Activate
            MsgBox (Replace(Replace(tipTxt, "row", rowIndex), "cell", "5"))
            isNotTheLast = True
            Exit Sub
        End If
        
         '====================================
         '|fffd||fffd||fffd||fffd||fffd||fffd||434||fffd||fffd||123||fffd||fffd|
        Call fillContentToWaybillTemplate(waybillSheetIndex, waybillData)
        waybillSheetIndex = waybillSheetIndex + 1
         
         '====================================
         '|fffd||fffd||221||fffd||fffd||4bb||fffd||fffd||fffd||fb||fffd||fffd||fffd||3e2|
         '|ff||fffd||fffd||fffd||fb||fffd||57c||fffd||fffd| 4 |fffd||fffd|
         '====================================
         printRow = printRow + 1
         rowIndex = rowIndex + 4
         
    Wend
    
End Sub
Sub setTitleRangeStyle(ByVal rect$, ByVal Title$)
    Dim rng As Range
    Set rng = Range(rect)
    With rng
    .Merge
    .VerticalAlignment = xlCenter
    .HorizontalAlignment = xlLeft
    .Value = Title
    .Font.Size = 12
    
    '|fffd||7ff||fffd||fffd||fffd||2bd|
    '.Borders(xlEdgeBottom).LineStyle = xlContinuous
    '.Borders(xlEdgeBottom).Weight = xlThin
    
    .Interior.Color = RGB(230, 230, 230)
    .Font.Bold = True
    End With
    Set rng = Nothing
    
End Sub
Sub setDetailRangeStyle(ByVal rect$, ByVal Title$)
    Dim dRect As Range
    Set dRect = Range(rect)
    With dRect
    .Merge
    .VerticalAlignment = xlTop
    .HorizontalAlignment = xlLeft
    .Value = Title
    .WrapText = True
    End With
    Set dRect = Nothing
End Sub

Function copyLogoPaste(beginRow As Integer)
 For Each SHAP In Sheets("template").Shapes
        If SHAP.Type = 13 Then
           SHAP.Copy
           Sheets("Printing").Range("C" & beginRow + 4 & ":F" & beginRow + 8).Select
           Sheets("Printing").Paste
           Exit For
        End If
    Next
End Function

Function fillContentToWaybillTemplate(waybillSheetIndex, waybillData)
    Dim pageRows As Integer, beginRow As Integer, sheetRange As Range, endRow As Integer
    Dim senderTitle As String, receiverTitle As String, contTitle As String, contSubTile As String, contCount As String, remarkTitle As String, paymentTitle As String, serveTitle As String, addedServer As String

    '================================================================
    '|fffd||fffd||fffd||f2||fffd||fffd||fffd|
    
    pageRows = 40 '|ff||4b3|40|fffd||fffd|
    beginRow = waybillSheetIndex * pageRows
    
    '|fffd||13c||fffd||fffd||2f1||fffd||fffd||fffd|
    senderTitle = Sheets("template").Cells(13, 3).Value
    '|fffd||57c||fffd||fffd||2f1||fffd||fffd||fffd|
    receiverTitle = Sheets("template").Cells(20, 3).Value
    '|fffd||43c||fffd||fffd||fffd||fffd||fffd||fffd|
    contTitle = Sheets("template").Cells(27, 3).Value
    contSubTile = Sheets("template").Cells(28, 3).Value
    contCount = Sheets("template").Cells(29, 3).Value
    
    '|fffd||fffd||5e2||fffd||fffd||fffd||fffd|
    remarkTitle = Sheets("template").Cells(31, 3).Value
    '|5a7||fffd||fffd||fffd||fffd||fffd||fffd|
    paymentTitle = Sheets("template").Cells(35, 3).Value
    '|fffd||fffd||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    serveTitle = Sheets("template").Cells(35, 7).Value
    addedServer = Sheets("template").Cells(36, 7).Value
    
    
    
    '================================================================
    ' |fffd||fffd||fffd||fffd||fffd||fffd||2bd|
    
    Set sheetRange = Range("B" & beginRow + 3 & ":J" & beginRow + 37)
    With sheetRange
    .ClearContents
    .BorderAround xlContinuous, xlMedium
    End With
    
    
    setTitleRangeStyle "C" & beginRow + 13 & ":I" & beginRow + 13, senderTitle
    setTitleRangeStyle "C" & beginRow + 20 & ":I" & beginRow + 20, receiverTitle
    setTitleRangeStyle "C" & beginRow + 27 & ":I" & beginRow + 27, contTitle
    setTitleRangeStyle "C" & beginRow + 31 & ":I" & beginRow + 31, remarkTitle
    setTitleRangeStyle "C" & beginRow + 35 & ":E" & beginRow + 35, paymentTitle
    setTitleRangeStyle "G" & beginRow + 35 & ":I" & beginRow + 35, serveTitle
    
    '================================================================
    ' |fffd||fffd||fffd||fffd||5b5||fffd||fffd||fffd|
    ' |fffd||13c||fffd||fffd||fffd|
    setDetailRangeStyle "C" & (beginRow + 14) & ":I" & (beginRow + 14), waybillData.senderCompanyName
    setDetailRangeStyle "C" & (beginRow + 15) & ":I" & (beginRow + 15), waybillData.sender
    setDetailRangeStyle "C" & (beginRow + 16) & ":I" & (beginRow + 19), Replace(waybillData.senderArea, "-", "") & waybillData.senderAddress

    ' |fffd||57c||fffd||fffd||fffd|
    setDetailRangeStyle "C" & (beginRow + 21) & ":I" & (beginRow + 21), waybillData.receiveCompany
    setDetailRangeStyle "C" & (beginRow + 22) & ":I" & (beginRow + 22), waybillData.receive
    setDetailRangeStyle "C" & (beginRow + 23) & ":I" & (beginRow + 26), Replace(waybillData.receiveArea, "-", "") & waybillData.receiveAddress
    
    Cells(beginRow + 28, 3).Value = contSubTile
    Cells(beginRow + 29, 3).Value = contCount
    
    Dim ConsignmentList As String, ConsignmentCount As String
    ConsignmentList = getConsignmemtItem(waybillData.receiveContent, 0)
    ConsignmentCount = getConsignmemtItem(waybillData.receiveContent, 2)
    
    setDetailRangeStyle "D" & (beginRow + 28) & ":I" & (beginRow + 28), ConsignmentList
    setDetailRangeStyle "D" & (beginRow + 29) & ":I" & (beginRow + 29), ConsignmentCount
    
    setDetailRangeStyle "C" & (beginRow + 32) & ":I" & (beginRow + 34), waybillData.remark
    
    setDetailRangeStyle "C" & (beginRow + 36) & ":E" & (beginRow + 36), waybillData.receivePayModel
    
    If waybillData.isInsure = 1 Then
    setDetailRangeStyle "G" & (beginRow + 36) & ":I" & (beginRow + 36), addedServer
    End If
    
    Dim qrContent As String, payModel As Integer, myTaxPayModel As Integer, senderDistrictCode As String, receiveDistrictCode As String
    senderDistrictCode = getDistrictCode(waybillData.senderArea)
    receiveDistrictCode = getDistrictCode(waybillData.receiveArea)
    
    Dim monthPay As String, toPay As String
    monthPay = Sheets("template").Cells(7, 13).Value
    toPay = Sheets("template").Cells(8, 13).Value
    
     Select Case waybillData.receivePayModel
        Case Is = monthPay
            payModel = 4
        Case Is = toPay
            payModel = 2
        Case Else
            payModel = 1
     End Select
     
     Select Case waybillData.taxPayModel
     Case Is = monthPay
            myTaxPayModel = 4
        Case Is = toPay
            myTaxPayModel = 2
        Case Else
            myTaxPayModel = 2
     End Select
     
     
    qrContent = "EXCEL|31|T4|1|" & payModel & "|" & waybillData.receiveCardNo & "|" & waybillData.isInsure & "|" & waybillData.insurePrice & "|File|1|0|0|" & inputValueFormat(waybillData.receive) & "|" & inputValueFormat(waybillData.receivePhone) & "|" & inputValueFormat(waybillData.receiveCompany) & "|" & receiveDistrictCode & "|" & inputValueFormat(Replace(waybillData.receiveArea, "-", "")) & " " & inputValueFormat(waybillData.receiveAddress) & "|" & inputValueFormat(waybillData.sender) & "|" & inputValueFormat(waybillData.senderPhone) & "|" & inputValueFormat(waybillData.senderCompanyName) & "|" & inputValueFormat(Replace(waybillData.senderArea, "-", "")) & " " & inputValueFormat(waybillData.senderAddress) & "|0|" & Replace(waybillData.remark, "|", " ") & "|" & waybillData.taxNumber & "|" & Replace(waybillData.receiveContent, "|", " ") & "|" & waybillData.coinType & "|" & myTaxPayModel & "|" & waybillData.taxCardNo
   
   '|fffd||fffd||fffd||276||fffd||3ac||fffd||fffd|
    Call doMakeQRCode(qrContent, "G" & beginRow + 4)
    
    '|573||fffd||fffd|LOGO
    copyLogoPaste beginRow
    
End Function

'|fffd||fffd||221||fffd||43c||fffd||fffd||fffd|
'data      |fffd||43c||fffd||fffd||fffd||fffd||fffd||fffd||fffd| => |fffd||43c||fffd||fffd||fffd||fffd||fffd||fffd||763||fffd||fffd||73c||fffd||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3bb||fffd||fffd||52d||fffd||fffd||fffd||fffd|
'index     |fffd||fffd||221||fffd||6bc||fffd||fffd||fffd|

Function getConsignmemtItem(data, index)
    Dim Cont As String, rows, item
    Cont = ""
    If Len(data) > 0 Then
        rows = Split(data, ";")
        For i = 0 To UBound(rows)
            items = Split(rows(i), ",")
            Cont = Cont & items(index) & ","
        Next
    End If
    If Len(Cont) > 0 Then
        Cont = Left(Cont, Len(Cont) - 1)
    End If
    getConsignmemtItem = Cont
End Function

'|fffd||fffd||221||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Function getDistrictCode(strArea)
Dim strCode, district
strCode = ""
district = Split(strArea, "-")(1)

For i = 2 To 351
    If Sheets("AreaCode").Cells(i, 1).Value = district Then
    strCode = Sheets("AreaCode").Cells(i, 2).Value
    Exit For
    End If
Next

getDistrictCode = strCode
End Function

Function inputValueFormat(inputValue As String)
    Dim val As String
    val = Replace(inputValue, "|", ",")
    inputValueFormat = val
End Function

Function inputValueFormat2(inputValue As String)
    Dim val As String
    val = Replace(inputValue, "|", " ")
    val = Replace(val, ",", " ")
    val = Replace(val, ";", " ")
    inputValueFormat2 = val
End Function


Attribute VB_Name = "WaybillModel"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'|fffd||13c||fffd||fffd||fffd||fffd||fffd||3e2|
Public senderCompanyName$
Public sender$
Public senderPhone$
Public senderArea$
Public senderAddress$

'|fffd||57c||fffd||fffd||fffd||fffd||fffd||3e2|
Public receiveCompany$
Public receive$
Public receivePhone$
Public receiveArea$
Public receiveAddress$

'|2f0||fffd||fffd| |fffd||fffd||fffd||fffd|
Public taxNumber$       '|2f0||fffd||fffd|
Public isInsure$         '|fffd||fffd||fffd||fffd|
Public insurePrice$      '|fffd||fffd||fffd||fffd|
Public coinType$        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public taxPayModel$      '|2f0||fffd||fffd||5a7||fffd||fffd||fffd||fffd||2bd|
Public taxCardNo$       '|2f0||fffd||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd|


Public receivePayModel$ '|fffd||bd||1fe8||fffd||fffd|
Public receiveCardNo$   ' |5a7||fffd||fffd||fffd||fffd||2bd|
Public remark$          '|fffd||fffd||5e2|


'|fffd||43c||fffd||fffd||fffd||fffd||fffd||3e2|
Public receiveContent$   '|fffd||fffd||fffd||43c||fffd||fffd||fffd||fffd||fffd||fffd||763||fffd||fffd||73c||fffd||5b5||fffd||fffd||fffd||fffd||fffd||5a3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3bb||fffd||fffd||52d||fffd||fffd||fffd||621||fffd|




' InQuest injected base64 decoded content
' n)eM

INQUEST-PP=macro
