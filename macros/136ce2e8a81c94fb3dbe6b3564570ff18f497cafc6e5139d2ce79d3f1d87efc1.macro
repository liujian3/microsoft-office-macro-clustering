Attribute VB_Name = "Class1"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public WithEvents App As Application
Attribute App.VB_VarHelpID = -1

' supported by Office 97 and later
'Public WithEvents MyDoc As Document
'Private Sub MyDoc_Close()
'    MsgBox "in Mydoc_close()"
'    OnCloseDocument Doc, Cancel
'End Sub

'' only supported by Office 2000 and later
'Private Sub App_DocumentBeforeClose(ByVal Doc As Document, Cancel As Boolean)
'    'MsgBox "in App_DocumentBeforeClose()"
'    'Commence.OnCloseDocument Doc, Cancel
'    Commence.OnCloseDocument
'End Sub

Private Sub App_DocumentBeforeClose(ByVal Doc As Document, Cancel As Boolean)
    Dim dtype
    Dim sdtype
    Dim tmp

    On Error Resume Next
    sdtype = Util.GetDocumentProperties("Type")
    If sdtype <> "" Then 'a letter template
        If Val(sdtype) > 0 Then
            If Doc.MailMerge.State > 1 Then 'then is a mailmerge
                tmp = Doc.MailMerge.DataSource.Name
                Doc.MailMerge.MainDocumentType = wdNotAMergeDocument
                Util.DatasourceCleanup (tmp)
                Doc.SaveAs
            End If
        End If
    End If
'Makarand RM5.1
'"preview" option is causing the prompt to be displayed to save "cmcmerge.dot".
'    Dim sDest As String
'    Dim snRows As String
'    sDest = Util.GetDocumentProperties("Dest")
'    snRows = Util.GetDocumentProperties("nRows")
'    If sDest = "" And snRows = "" Then
'        'in continue
'        On Error Resume Next
'        CommandBars("Continue?").Delete
'        On Error GoTo 0
'    End If
            
    On Error Resume Next
    CommandBars(COMMENCE_FIELDS).Visible = False
    CommandBars(COMMENCE_VIEWS).Visible = False
    On Error GoTo 0
                
    If UCase(Doc.Name) = "Normal.dot" Then
        NormalTemplate.Saved = True
    End If

    If Doc.Name = "CmcMerge.dot" Then
        Doc.Saved = True
    End If
    'ThisDocument.Saved = True
    'ThisDocument.Save
    'Documents("CmcMerge.dot").Close savechanges:=False
    'ThisDocument.Close savechanges:=true
End Sub
Private Sub App_DocumentChange()
    ThisDocument.Saved = True
End Sub

Private Sub App_DocumentOpen(ByVal Doc As Document)
    CommenceOpenTemplate.OpenTemplateProcessing Doc
End Sub

Private Sub App_Quit()
    On Error Resume Next
    NormalTemplate.Saved = True
    'ThisDocument.Saved = True
    'ThisDocument.Close savechanges:=wdDoNotSaveChanges
    'MsgBox "App_quit"
    Documents("CmcMerge.dot").Saved = True
End Sub

Attribute VB_Name = "CmcCreateEmail1"
Dim rselection
Dim useActiveItem As Boolean
Public category$
Public cr$
Public crlf$

Public Sub Main(printfax As Integer, LinkFileName As String)
Attribute Main.VB_Description = "Create a letter using values from Commence"
Attribute Main.VB_ProcData.VB_Invoke_Func = "TemplateProject.JJCreateFax.MAIN"
'Dim gMSWord$
Dim gWinFax$
Dim gFax1$
Dim gFax2$
Dim gMsg1$
Dim gBadDDE$
Dim gMsg2$
Dim gForItem$
Dim gMsg4$
Dim gMsg5$
Dim gMsg6$
Dim ErrorMsg$
Dim ExitMsg$
Dim gDelim$
Dim q$
Dim qcq$
Dim c
Dim version$
Dim NameSize
Dim nState
Dim s$
Dim nStart
Dim nEnd
Dim nNext
Dim Name_$
Dim PlainName$
Dim namefld$
Dim i
Dim j
Dim FaxNumberField$
Dim gMsg1_
'Dim gMSWord_
Dim Value$
Dim Req$
Dim Cname$
Dim FC$
Dim O
Dim k
Dim tmp$
Dim Conn$
Dim Rest$
Dim cat$
Dim Field_$
Dim CCount$
Dim Icount
Dim Cnamelist$
Dim Cnamefld$
Dim Iloop
Dim CNameP$
Dim FaxNumber$
Dim FaxNum$
Dim AppName$
Dim CmcObject$
Dim MyDoc As Document
Dim alreadyaskedsubject As Boolean
Dim ContinueRunning As Integer
Dim AskedNext As Boolean
'   Dim objSession As Object
'   Dim objMessage As Object
'   Dim objRecipient As Object
'   Dim sProfile As String
'   Dim objsessionset As Boolean

'Copyright 1992-2001 Jensen-Jones Inc.

' Literal Text strings ; START TRANSLATION .

'gMSWord$ = "Microsoft Word"
'gWinFax$ = "WinFax"

gFax1$ = "e-mail"
gFax2$ = "email"
gMsg1$ = "CmcCreateEmail could not find the E-Mail address field for this category."
gBadDDE$ = "??BAD DDE??"
gMsg2$ = "No e-mail address for Commence item: "
gForItem$ = " in item: "
'gMsg4$ = "CmcCreateEmail has sent the fax number: "
'gMsg5$ = " to WinFax and selected WinFax as your printer.  When you are ready to fax, just select File-Print "
gMsg6$ = "CmcCreateEmail found a null E-Mail address for the field: "

ErrorMsg$ = "The errror code is: "  ' Error message
ExitMsg$ = "CmcCreateEmail macro exiting.  Macro error number: "

' END OF TRANSLATION.

gDelim$ = Chr(13)       ' delimits information received via DDE.
q$ = Chr(34)        'Make a string with a single " for use in constructing DDE messages
qcq$ = q$ + "," + q$    ' Make a string with "," for use in constructing DDE messages
cr$ = Chr(13)
crlf$ = Chr(13) + Chr(10)
NameSize = 50
alreadyaskedsubject = False
'objsessionset = False
Set MyDoc = ActiveDocument
AskedNext = False

'get what the replace selection is set to then set it to true
rselection = Options.ReplaceSelection
Options.ReplaceSelection = True

CmcObject = "Commence.DB"
AppName$ = "Commence"

'Find out what version of Commence is running
On Error GoTo -1: On Error GoTo Done
If Not CmcCreateLetter1.GetVersion(CmcObject, AppName) Then GoTo Normalx

Set CmcObj = CreateObject(CmcObject$)
Set c = CmcObj.GetConversation(AppName$, "GetData")


' Turn on Clarify Info
s$ = c.Request("[ClarifyItemNames(True)]")

' Ask Commence what is currently in the letter view
' Parse the return string, which is of the form:
Call GetCategoryandPlainName(c, category$, Name_$, PlainName$, VIEW$, useActiveItem, True)

'Get the name of the name field
namefld$ = CmcCreateLetter1.GetNameField(c, category$)

'Mark the ActiveItem
If useActiveItem Then
    Temp$ = c.Request("[MarkActiveItem]")
End If

'Find the E-mail address field
s$ = c.Request("[GetFieldNames(" + q$ + category$ + q$ + ")]")

' look for gFax1 first
i = InStr(1, s$, gFax1$, 1)
If i <> 0 Then
    j = InStr(i, s$, gDelim$)
    FaxNumberField$ = Mid(s$, i, j - i)
ElseIf InStr(1, s$, gFax2, vbTextCompare) Then
    i = InStr(1, s$, gFax2, vbTextCompare)
    j = InStr(i, s$, gDelim$)
    FaxNumberField$ = Mid(s$, i, j - i)
Else
    MsgBox gMsg1, 16, "CmcCreateEmail"
    Err.Number = 9999
    GoTo Normalx
End If

'Start looking for Fields to retrieve
Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1

Search:
Value$ = ""
Req$ = ""
Cname$ = ""

Call CmcCreateLetter1.FindString

'Now we have a field code, save it in a variable
If InStr(1, Selection.Text, "%") < 1 Then GoTo Normalx
FC$ = Selection.Text

'Strip off the leading and trailing marks: (% and %)
k = Len(FC$)
tmp$ = Mid(FC$, 3, k - 4)

'Check to see if this is a label template
If UCase(FC) = "(%(-NEXT-)%)" And AskedNext = False Then
    ContinueRunning = MsgBox(Prompt:="This template is for creating labels.  Please make sure you have selected the correct application prior to creating your letter.  Would you like to continue?", buttons:=vbYesNo)
    AskedNext = True
    If ContinueRunning = 7 Then
       MyDoc.Close SaveChanges:=wdDoNotSaveChanges
       GoTo Bye
    End If
End If

'Check to see if it is ME
If UCase(tmp$) = "(-ME-) ITEM" Then
    s$ = c.Request("[ClarifyItemNames(FALSE)]")
    Req$ = "[GetPreference(Me,|fffd|)]"
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    s$ = c.Request("[ClarifyItemNames(True)]")
    If Value$ = "??BAD DDE??" Then
        Value$ = ""
    ElseIf DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    'On Error GoTo -1: On Error GoTo Done
    
    If Value$ <> "" Then
        'parse out name
        y = InStr(Value$, "|fffd|")
        tmp$ = Trim(Mid(Value, y + 1))
        Req$ = "[GetReverseName(" + q$ + dq$(tmp$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    CmcCreateLetter1.InsertText (Value$)
    GoTo Search:
End If
'email

'Check to see if this is an indirect field: it is if it contains a %%
i = InStr(tmp$, "%%")
If i <> 0 Then GoTo Indirect        'We have an indirect field
    'Other wise we have a direct field
    'First check to see if this is just the name field
    If ((tmp$ = namefld$) Or (tmp$ = UCase(namefld$)) Or (tmp$ = LCase(namefld$))) Then
        'Get the reversed version from Commence
        Req$ = "[GetReverseName(" + q$ + PlainName$ + q$ + ")]"
    
    'This is not the name field, we need to get it from Commence
    ElseIf useActiveItem Then
        Req$ = "[GetField(,," + q$ + tmp$ + q$ + ")]"
    Else
        Req$ = "[GetField(" + q$ + category$ + qcq$ + dq$(Name_$) + qcq$ + tmp$ + q$ + ")]"
    End If
        On Error GoTo -1: On Error GoTo BD1
        Value$ = c.Request(Req$)
        'This is the new error handling
BD1:
        If Err.Number = 3 Then
            Value$ = gBadDDE$
            Err.Number = 0
        ElseIf Err.Number <> 0 Then
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done

        CmcCreateLetter1.InsertText (Value$)

    'End If
'Go back And look For more field codes
GoTo Search:

Indirect:   'This is an indirect field, parse it to get the values we neeed
'Stop
    Conn$ = Left(tmp$, i - 1)
    Rest$ = Mid(tmp$, i + 2)
    i = InStr(Rest$, "%%")
    cat$ = Left(Rest$, i - 1)
    Field_$ = Mid(Rest$, i + 2)
    'Build the DDE command
    If useActiveItem Then
        Req$ = "[GetConnectedItemCount(,," + q$ + Conn$ + qcq$ + cat$ + q$ + ")]"
    Else
        Req$ = "[GetConnectedItemCount(" + q$ + category$
        Req$ = Req$ + qcq$ + dq$(Name_$) + qcq$ + Conn$ + qcq$ + cat$ + q$ + ")]"
    End If
    On Error GoTo -1: On Error GoTo BD2
        CCount$ = c.Request(Req$)
BD2:
        If Err.Number = 3 Then
            Value$ = gBadDDE$
            Err.Number = 0
            GoTo Insert2    'Skip down to the insertion of the value
        ElseIf Err.Number <> 0 Then
            GoTo Done
        End If
        
        On Error GoTo -1: On Error GoTo Done

    Icount = Val(CCount$)
    
    If Icount = 0 Then
        Value$ = ""
        CmcCreateLetter1.InsertText (Value$)
    ElseIf useActiveItem Then
            Req$ = "[GetConnectedItemNames(,,""" + dq$(Conn$) + qcq$ + cat$ + """,|fffd|)]"
        Else
            Req$ = "[GetConnectedItemNames(" + q$ + category$
            Req$ = Req$ + qcq$ + dq$(Name_$) + qcq$ + Conn$ + qcq$ + cat$ + q$ + ",|fffd|)]"
        End If

        On Error GoTo -1: On Error GoTo BD21
        Cnamelist$ = c.Request(Req$)
BD21:
        If Err.Number = 3 Then
            Value$ = gBadDDE$
            Err.Number = 0
            GoTo Insert2    'Skip down to the insertion of the value
        ElseIf Err.Number <> 0 Then
            GoTo Done
        End If
        
        On Error GoTo -1: On Error GoTo Done

    'Get the name of the name field for the connected category
    s$ = c.Request("[GetFieldNames(" + q$ + cat$ + q$ + ",|fffd|)]")
    nStart = 1
    nEnd = InStr(nStart, s$, "|fffd|")
    If nEnd <> 0 Then
        Cnamefld$ = Mid(s$, nStart, nEnd - nStart)
    Else
        Cnamefld$ = s$
    End If
    'Now loop through items from the list
        nStart = 1
        Value$ = ""
        For Iloop = 1 To Icount
            nEnd = InStr(nStart, Cnamelist$, "|fffd|")
            If nEnd = 0 Then
                Cname$ = Mid(Cnamelist$, nStart)
            Else
                Cname$ = Mid(Cnamelist$, nStart, nEnd - nStart)
                nStart = nEnd + 1
            End If
        
        'Now we have a Cname to use to get the desired field
'Stop
        'Check to see if we are looking for the Cname, if so we already have it
        If Field_$ = Cnamefld$ Then
            If Len(Cname$) > NameSize Then
                'Get the name without the clarify data
                CNameP$ = Trim(Mid(Cname$, 1, NameSize))
            Else
                CNameP$ = Trim(Cname$)
            End If
            'Get the reversed version from Commence
            Req$ = "[GetReverseName(" + q$ + dq$(CNameP$) + q$ + ")]"
            On Error GoTo -1: On Error GoTo BD9
            Value$ = c.Request(Req$)
            'This is the new error handling
BD9:
            If Err.Number = 3 Then
                Value$ = gBadDDE$
                Err.Number = 0
            ElseIf Err.Number <> 0 Then
                GoTo Done
            End If
            On Error GoTo -1: On Error GoTo Done

        Else
        Req$ = "[GetField(" + q$ + cat$ + qcq$ + dq$(Cname$) + qcq$ + Field_$ + q$ + ")]"
          On Error GoTo -1: On Error GoTo BD3
          Value$ = c.Request(Req$)
BD3:
          If Err.Number = 3 Then
            Value$ = gBadDDE$
            Err.Number = 0
          ElseIf Err.Number <> 0 Then
            GoTo Done
          End If
        
          On Error GoTo -1: On Error GoTo Done
        End If
    
    If Iloop = 1 Then
        CmcCreateLetter1.InsertText (Value$)
    Else
        CmcCreateLetter1.AddText (Value$)
    End If

    Next Iloop

    'End If  'End of Icount = 0 If
    GoTo Search:
Insert2:
    CmcCreateLetter1.InsertText (Value$)
'Go back and look for more field codes
GoTo Search:


Done:
StatusBar = ErrorMsg$ + str(Err.Number) + Err.Description
a = MsgBox(ExitMsg$ + str(Err.Number) + Chr(10) + Err.Description, vbCritical, "Commence E-mail Macro")

Normalx:

If Err.Number = 0 Then
    'Stop
    If LinkFileName <> "" Then
        ActiveDocument.SaveAs FileName:=LinkFileName
    End If

    'Now get the E-Mail address for the item
    If useActiveItem Then
        Req$ = "[GetField(,," + q$ + FaxNumberField$ + q$ + ")]"
    Else
        Req$ = "[GetField(" + q$ + category$ + qcq$ + Name_$ + qcq$ + FaxNumberField$ + q$ + ")]"
    End If
    On Error GoTo -1: On Error GoTo BD8
    FaxNumber$ = c.Request(Req$)
    
        'This is the new error handling
BD8:
    If Err.Number <> 0 Then
        MsgBox gMsg2$ + Name_$, 16, "CmcCreateEmail"
        GoTo Normalx
    End If
    On Error GoTo -1: On Error GoTo Done
'Stop
FaxNum$ = Trim$(FaxNumber$)
i = Len(FaxNum$)
If Len(FaxNum$) <> 0 Then
      
      ' Leaving sProfile equal to Null will
      ' force the user to select which Mapi
      ' profile to use. To keep from being
      ' prompted, you must supply a valid
      ' user profile.
'      sProfile = ""
'
'      On Error GoTo -1: On Error GoTo Bye 'If cancelled
'      ' Create the Session Object.
'        Set objSession = CreateObject("mapi.session")
'
'      ' Log on using the session object.
'      ' Specify a valid profile name if you want to
'      ' avoid the logon dialog box.
'      On Error GoTo -1: On Error GoTo Bye 'If cancelled
'      objSession.Logon profileName:=sProfile
'      objsessionset = True
'
'
'      ' Add a new message object to the OutBox.
'      Set objMessage = objSession.Outbox.Messages.Add
'
'      ' Add a recipient object to the objMessage.Recipients collection.
'      Set objRecipient = objMessage.Recipients.Add
'
'      ' Set the properties of the recipient object.
'       objRecipient.Address = "SMTP:" + FaxNum
'       objRecipient.Type = 1
'      'objRecipient.Name = PlainName
      
      ' Set the properties of the message object.
      DocTitle$ = MyDoc.BuiltInDocumentProperties(wdPropertyTitle)
      If DocTitle = "" And alreadyaskedsubject = False Then
          'On Error GoTo -1: On Error GoTo Bye 'If cancelled
          DocTitle = InputBox("Please enter a subject for the E-Mail Message or select Cancel to leave it blank.")
      End If
      alreadyaskedsubject = True
'      objMessage.subject = DocTitle
      
      
    CmcCreateLetter1.FocusNewDocument (MyDoc)
    Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1
      
    Selection.WholeStory
    
    Email_Login
    On Error GoTo -1: On Error GoTo aproblem 'If cancelled
    Email_Send FaxNum$, DocTitle$, Selection.Text, printfax

'    objMessage.Text = Selection.Text
'
'
'      On Error GoTo -1: On Error GoTo Bye 'If cancelled
'
'      'Put back in if want it to check for valid address
'       objRecipient.Resolve
'
'       'MyDoc.Close savechanges:=wdDoNotSaveChanges
'       objMessage.Update
'    If printfax = 0 Then
'        MsgBox "The e-mail message has been created.  Press the Send button when you are ready to send this message.", 48, "CmcCreateEmail"
'
'      objMessage.Send showDialog:=True
'    Else
'      objMessage.Send showDialog:=False
'    End If
    On Error GoTo 0
        
    'new
    If CommenceLog.autoLogToCommence(1, 2, LinkFileName, templateName, templateCategory) = True Then
        If LinkFileName = "" Then
            ActiveDocument.Saved = True
            ActiveDocument.Close SaveChanges:=False
        Else
            Documents(LinkFileName).Saved = True
            Documents(LinkFileName).Close SaveChanges:=True
        End If
    End If

Else
        If CommenceLog.autoLogToCommence(1, 1, LinkFileName, templateName, templateCategory) = True Then
        End If
    'CmcCreateLetter1.FocusNewDocument (MyDoc)
    Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1
    MsgBox gMsg2$ + Name_$, 16, "CmcCreateEmail"
End If

End If
GoTo Bye
      
aproblem:
    ActiveDocument.Saved = True
    ActiveDocument.Close SaveChanges:=False

Bye:
'      On Error GoTo -1: On Error GoTo bye2
      'If MyDoc.ActiveWindow.Active Then
      ' MyDoc.Close savechanges:=wdDoNotSaveChanges
      'End If
'      On Error GoTo -1: On Error GoTo 0

      ' Log off using the session object.
'bye2:
'If objsessionset = True Then
'    objSession.Logoff
'End If
Email_Logout


Set c = Nothing
Set CmcObj = Nothing
Options.ReplaceSelection = rselection

    'For Each myTask In Tasks
    '    If InStr(myTask.Name, AppName) > 0 Then
    '        myTask.Activate
    '    End If
    'Next myTask


End Sub

Attribute VB_Name = "CmcCreateFax1"
Dim rselection
Dim useActiveItem As Boolean
Public category$
Public cr$
Public crlf$

Public Sub Main(printfax As Integer, LinkFileName As String)
Attribute Main.VB_Description = "Create a letter using values from Commence"
Attribute Main.VB_ProcData.VB_Invoke_Func = "TemplateProject.JJCreateFax.MAIN"
Dim gMSWord$
Dim gWinFax$
Dim gFax1$
Dim gFax2$
Dim gMsg1$
Dim gBadDDE$
Dim gMsg2$
Dim gForItem$
Dim gMsg4$
Dim gMsg5$
Dim gMsg6$
Dim ErrorMsg$
Dim ExitMsg$
Dim gDelim$
Dim q$
Dim qcq$
Dim c
Dim version$
Dim NameSize
Dim nState
Dim s$
Dim nStart
Dim nEnd
Dim nNext
Dim Name_$
Dim PlainName$
Dim namefld$
Dim i
Dim j
Dim FaxNumberField$
Dim gMsg1_
Dim gMSWord_
Dim Value$
Dim Req$
Dim Cname$
Dim FC$
Dim O
Dim k
Dim tmp$
Dim Conn$
Dim Rest$
Dim cat$
Dim Field_$
Dim CCount$
Dim Icount
Dim Cnamelist$
Dim Cnamefld$
Dim Iloop
Dim CNameP$
Dim FaxNumber$
Dim FaxNum$
Dim AppName$
Dim CmcObject$
Dim MyDoc As Document
Dim SearchedHeader As Boolean
Dim SearchedFooter As Boolean
Dim SearchedMain As Boolean
Dim ContinueRunning As Integer
Dim AskedNext As Boolean

'Copyright 1992-95 Jensen-Jones Inc.
' Commence letter template expansion macro
' This macro creates a letter (fax) using values from the letter view info item in Commence
' The macro sets up WinFax Pro as the printer, sends it the name and number of the recipient
' and then lets the user review the letter and fax it manuallly (using File-Print)
'  Note: the macro leaves the printer selected as WinFax, unlike FaxLetter and FaxAll
'  Revisions for 1.00a (10/92)"
'  Prints values from all connected items (this was distributed to some users prior  to 1.00a)
'  Support for clarify fields so we can deal with items with calrified identical names
'  Gets the actual name fields (don't assume they are always called "Name")
'  Gets rid of Tr$ subroutine so we can handle "~" in field codes

' Revisions for 3.0 (4/4/95)
' Support for 50 character item names, Commence 1.0a or later required

' Literal Text strings ; START TRANSLATION .

gMSWord$ = "Microsoft Word"
gWinFax$ = "WinFax"

gFax1$ = "Fax"
gFax2$ = "FAX"
gMsg1$ = "CmcFaxLetter could not find the fax number field for this category."
gBadDDE$ = "??BAD DDE??"
gMsg2$ = "CmcCreateFax could not get the fax number: "
gForItem$ = " for this item: "
gMsg4$ = "CmcCreateFax has sent the fax number: "
gMsg5$ = " to WinFax and selected WinFax as your printer.  When you are ready to fax, just select File-Print "
gMsg6$ = "CmcCreateFax got a null fax number: "

ErrorMsg$ = "The errror code is: "  ' Error message
ExitMsg$ = "CmcCreateFax macro exiting.  Macro error number: "
   

' END OF TRANSLATION.

gDelim$ = "|fffd|"       ' delimits information received via DDE.
q$ = Chr(34)        'Make a string with a single " for use in constructing DDE messages
qcq$ = q$ + "," + q$    ' Make a string with "," for use in constructing DDE messages
cr$ = Chr(13)
crlf$ = Chr(13) + Chr(10)
NameSize = 50
Set MyDoc = ActiveDocument
SearchedHeader = False
SearchedFooter = False
SearchedMain = False
AskedNext = False


'get what the replace selection is set to then set it to true
rselection = Options.ReplaceSelection
Options.ReplaceSelection = True

CmcObject = "Commence.DB"
AppName$ = "Commence"

'Find out what version of Commence is running
On Error GoTo -1: On Error GoTo Done
'Makarand Office64
Dim sOfficeBit As String
sOfficeBit = GetCommenceSettingPref("OfficeBitness")
If sOfficeBit = "x64" Then
    MsgBox "Mail merges with fax destination are not supported in Office 64 bit integration.", vbOKOnly, "Commence"
    MyDoc.Close SaveChanges:=wdDoNotSaveChanges
    GoTo Bye
End If

If Not CmcCreateLetter1.GetVersion(CmcObject, AppName) Then GoTo Normalx

Set CmcObj = CreateObject(CmcObject$)
Set c = CmcObj.GetConversation(AppName$, "GetData")


' Turn on Clarify Info
s$ = c.Request("[ClarifyItemNames(True)]")

' Ask Commence what is currently in the letter view
' Parse the return string, which is of the form:
Call GetCategoryandPlainName(c, category$, Name_$, PlainName$, VIEW$, useActiveItem, True)

'Get the name of the name field
namefld$ = CmcCreateLetter1.GetNameField(c, category$)

'Mark the ActiveItem
If useActiveItem Then
    Temp$ = c.Request("[MarkActiveItem]")
End If

'Find the Fax number field
s$ = c.Request("[GetFieldNames(" + q$ + category$ + q$ + "," + gDelim$ + ")]")

' look for gFax1 first
i = InStr(1, s$, gFax1$, 1)
If i <> 0 Then
    j = InStr(i, s$, gDelim$)
    FaxNumberField$ = Mid(s$, i, j - i)
ElseIf InStr(1, s$, gFax2, vbTextCompare) Then
    i = InStr(1, s$, gFax2, vbTextCompare)
    j = InStr(i, s$, gDelim$)
    FaxNumberField$ = Mid(s$, i, j - i)
Else
    MsgBox gMsg1, 16, "CmcCreateFax"
    Err.Number = 9999
    GoTo Normalx
End If

'Start looking for Fields to retrieve
Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1

Search:
Value$ = ""
Req$ = ""
Cname$ = ""

If SearchedHeader = False Then
    If ActiveWindow.ActivePane.VIEW.Type = wdNormalView Or ActiveWindow. _
        ActivePane.VIEW.Type = wdOutlineView Then
        If wdPrintView = Empty Then
            ActiveWindow.ActivePane.VIEW.Type = wdPageView
        Else
            ActiveWindow.ActivePane.VIEW.Type = wdPrintView
        End If
    End If
    ActiveWindow.ActivePane.VIEW.SeekView = wdSeekCurrentPageHeader
    SearchedHeader = True
ElseIf SearchedFooter = False Then
    If ActiveWindow.ActivePane.VIEW.Type = wdNormalView Or ActiveWindow. _
        ActivePane.VIEW.Type = wdOutlineView Then
        If wdPrintView = Empty Then
            ActiveWindow.ActivePane.VIEW.Type = wdPageView
        Else
            ActiveWindow.ActivePane.VIEW.Type = wdPrintView
        End If
    End If
    ActiveWindow.ActivePane.VIEW.SeekView = wdSeekCurrentPageFooter
    SearchedFooter = True
ElseIf SearchedMain = False Then
    ActiveWindow.ActivePane.VIEW.SeekView = wdSeekMainDocument
    SearchedMain = True
End If

FindAnother:
Value$ = ""
Req$ = ""
Cname$ = ""

Call FindString

'Now we have a field code, save it in a variable
If (InStr(1, Selection.Text, "%") < 1) And (SearchedFooter = False) Then GoTo Search
If (InStr(1, Selection.Text, "%") < 1) And (SearchedMain = False) Then GoTo Search
If (InStr(1, Selection.Text, "%") < 1) And (SearchedHeader = True) And (SearchedFooter = True) And (SearchedMain = True) Then GoTo Normalx
FC$ = Selection.Text


'Strip off the leading and trailing marks: (% and %)
k = Len(FC$)
tmp$ = Mid(FC$, 3, k - 4)

'Check to see if this is a label template
If UCase(FC) = "(%(-NEXT-)%)" And AskedNext = False Then
    ContinueRunning = MsgBox(Prompt:="This template is for creating labels.  Please make sure you have selected the correct application prior to creating your letter.  Would you like to continue?", buttons:=vbYesNo)
    AskedNext = True
    If ContinueRunning = 7 Then
       MyDoc.Close SaveChanges:=wdDoNotSaveChanges
       GoTo Bye
    End If
End If

'Check to see if it is ME
If UCase(tmp$) = "(-ME-) ITEM" Then
    s$ = c.Request("[ClarifyItemNames(FALSE)]")
    Req$ = "[GetPreference(Me,|fffd|)]"
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    s$ = c.Request("[ClarifyItemNames(True)]")
    If Value$ = "??BAD DDE??" Then
        Value$ = ""
    ElseIf DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    'On Error GoTo -1: On Error GoTo Done
    
    If Value$ <> "" Then
        'parse out name
        y = InStr(Value$, "|fffd|")
        tmp$ = Trim(Mid(Value, y + 1))
        Req$ = "[GetReverseName(" + q$ + dq$(tmp$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    CmcCreateLetter1.InsertText (Value$)
    GoTo FindAnother:
End If

'Check to see if this is an indirect field: it is if it contains a %%
i = InStr(tmp$, "%%")
If i <> 0 Then GoTo Indirect        'We have an indirect field
    'Other wise we have a direct field
    'First check to see if this is just the name field
    If ((tmp$ = namefld$) Or (tmp$ = UCase(namefld$)) Or (tmp$ = LCase(namefld$))) Then
        'Get the reversed version from Commence
        Req$ = "[GetReverseName(" + q$ + PlainName$ + q$ + ")]"
    
    'This is not the name field, we need to get it from Commence
    ElseIf useActiveItem Then
        Req$ = "[GetField(,," + q$ + tmp$ + q$ + ")]"
    Else
        Req$ = "[GetField(" + q$ + category$ + qcq$ + dq$(Name_$) + qcq$ + tmp$ + q$ + ")]"
    End If
        On Error GoTo -1: On Error GoTo BD1
        Value$ = c.Request(Req$)
        'This is the new error handling
BD1:
        If Err.Number = 3 Or Err.Number = 2 Then
            Value$ = gBadDDE$
            Err.Number = 0
        ElseIf Err.Number <> 0 Then
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done

        CmcCreateLetter1.InsertText (Value$)

    'End If
'Go back And look For more field codes
GoTo FindAnother:

Indirect:   'This is an indirect field, parse it to get the values we neeed
'Stop
    Conn$ = Left(tmp$, i - 1)
    Rest$ = Mid(tmp$, i + 2)
    i = InStr(Rest$, "%%")
    cat$ = Left(Rest$, i - 1)
    Field_$ = Mid(Rest$, i + 2)
    'Build the DDE command
    If useActiveItem Then
        Req$ = "[GetConnectedItemCount(,," + q$ + Conn$ + qcq$ + cat$ + q$ + ")]"
    Else
        Req$ = "[GetConnectedItemCount(" + q$ + category$
        Req$ = Req$ + qcq$ + dq$(Name_$) + qcq$ + Conn$ + qcq$ + cat$ + q$ + ")]"
    End If
    On Error GoTo -1: On Error GoTo BD2
        CCount$ = c.Request(Req$)
BD2:
        If Err.Number = 3 Or Err.Number = 2 Then
            Value$ = gBadDDE$
            Err.Number = 0
            GoTo Insert2    'Skip down to the insertion of the value
        ElseIf Err.Number <> 0 Then
            GoTo Done
        End If
        
        On Error GoTo -1: On Error GoTo Done

    Icount = Val(CCount$)
    
    If Icount = 0 Then
        Value$ = ""
        InsertText (Value$)
    ElseIf useActiveItem Then
            Req$ = "[GetConnectedItemNames(,,""" + dq$(Conn$) + qcq$ + cat$ + """,|fffd|)]"
        Else
            Req$ = "[GetConnectedItemNames(" + q$ + category$
            Req$ = Req$ + qcq$ + dq$(Name_$) + qcq$ + Conn$ + qcq$ + cat$ + q$ + ",|fffd|)]"
        End If

        On Error GoTo -1: On Error GoTo BD21
        Cnamelist$ = c.Request(Req$)
BD21:
        If Err.Number = 3 Or Err.Number = 2 Then
            Value$ = gBadDDE$
            Err.Number = 0
            GoTo Insert2    'Skip down to the insertion of the value
        ElseIf Err.Number <> 0 Then
            GoTo Done
        End If
        
        On Error GoTo -1: On Error GoTo Done

    'Get the name of the name field for the connected category
    s$ = c.Request("[GetFieldNames(" + q$ + cat$ + q$ + ",|fffd|)]")
    nStart = 1
    nEnd = InStr(nStart, s$, "|fffd|")
    If nEnd <> 0 Then
        Cnamefld$ = Mid(s$, nStart, nEnd - nStart)
    Else
        Cnamefld$ = s$
    End If
    'Now loop through items from the list
        nStart = 1
        Value$ = ""
        For Iloop = 1 To Icount
            nEnd = InStr(nStart, Cnamelist$, "|fffd|")
            If nEnd = 0 Then
                Cname$ = Mid(Cnamelist$, nStart)
            Else
                Cname$ = Mid(Cnamelist$, nStart, nEnd - nStart)
                nStart = nEnd + 1
            End If
        
        'Now we have a Cname to use to get the desired field
'Stop
        'Check to see if we are looking for the Cname, if so we already have it
        If Field_$ = Cnamefld$ Then
            If Len(Cname$) > NameSize Then
                'Get the name without the clarify data
                CNameP$ = Trim(Mid(Cname$, 1, NameSize))
            Else
                CNameP$ = Trim(Cname$)
            End If
            'Get the reversed version from Commence
            Req$ = "[GetReverseName(" + q$ + dq$(CNameP$) + q$ + ")]"
            On Error GoTo -1: On Error GoTo BD9
            Value$ = c.Request(Req$)
            'This is the new error handling
BD9:
            If Err.Number = 3 Then
                Value$ = gBadDDE$
                Err.Number = 0
            ElseIf Err.Number <> 0 Then
                GoTo Done
            End If
            On Error GoTo -1: On Error GoTo Done

        Else
        Req$ = "[GetField(" + q$ + cat$ + qcq$ + dq$(Cname$) + qcq$ + Field_$ + q$ + ")]"
          On Error GoTo -1: On Error GoTo BD3
          Value$ = c.Request(Req$)
BD3:
          If Err.Number = 3 Then
            Value$ = gBadDDE$
            Err.Number = 0
          ElseIf Err.Number <> 0 Then
            GoTo Done
          End If
        
          On Error GoTo -1: On Error GoTo Done
        End If
    
    If Iloop = 1 Then
        CmcCreateLetter1.InsertText (Value$)
    Else
        CmcCreateLetter1.AddText (Value$)
    End If

    Next Iloop

    'End If  'End of Icount = 0 If
    GoTo FindAnother:
Insert2:
    CmcCreateLetter1.InsertText (Value$)
'Go back and look for more field codes
GoTo FindAnother:


Done:
StatusBar = ErrorMsg$ + str(Err.Number) + Err.Description
a = MsgBox(ExitMsg$ + str(Err.Number) + Chr(10) + Err.Description, vbCritical, "Commence Letter Macro")

Normalx:

If Err.Number = 0 Then
    'Stop
    If LinkFileName <> "" Then
        ActiveDocument.SaveAs FileName:=LinkFileName
    Else
        tmp = ActiveDocument.Name
    End If
    'Now get the fax number for the item
    If useActiveItem Then
        Req$ = "[GetField(,," + q$ + FaxNumberField$ + q$ + ")]"
    Else
        Req$ = "[GetField(" + q$ + category$ + qcq$ + Name_$ + qcq$ + FaxNumberField$ + q$ + ")]"
    End If
    On Error GoTo -1: On Error GoTo BD8
    FaxNumber$ = c.Request(Req$)
        'This is the new error handling
BD8:
    If Err.Number <> 0 Then
        MsgBox gMsg2$ + FaxNumberField$ + gForItem$ + Name_$, 16, "CmcCreateFax"
        GoTo Normalx
    End If
    On Error GoTo -1: On Error GoTo Done
'Stop
FaxNum$ = Trim$(FaxNumber$)
i = Len(FaxNum$)
If Len(FaxNum$) <> 0 Then
    Call CmcFaxLib1.SendFax(PlainName$, FaxNum$, gWinFax$, printfax)
    'new
    If printfax = 1 Then
        If CommenceLog.autoLogToCommence(1, 2, LinkFileName, templateName, templateCategory) = True Then
            If LinkFileName = "" Then
                ActiveDocument.Saved = True
                ActiveDocument.Close SaveChanges:=False
            Else
                Documents(LinkFileName).Saved = True
                Documents(LinkFileName).Close SaveChanges:=False
            End If
        End If
    Else
        If CommenceLog.autoLogToCommence(1, 1, LinkFileName, templateName, templateCategory) = True Then
        End If
        'CmcCreateLetter1.FocusNewDocument (MyDoc)
        Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1
        MsgBox gMsg4$ + FaxNum$ + gMsg5$, 48, "CmcCreateFax"
    End If 'printfax=1
Else
    CmcCreateLetter1.FocusNewDocument (MyDoc)
    Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1
    MsgBox gMsg2$ + FaxNumberField$ + gForItem$ + Name_$, 16, "CmcCreateFax"
End If
    

End If
Bye:
Set c = Nothing
Set CmcObj = Nothing
Options.ReplaceSelection = rselection

End Sub

Attribute VB_Name = "CmcCreateLabel1"
'Public q$
Public qcq$
Public cr$
Public crlf$
Public category$
Public AppName$
Public CmcObject$
Public Names$
Public RowValue$
Public ColumnValue$
Public cnum
Public rnum


Public Sub Main(PrintLetter As Integer, LinkFileName As String)
Attribute Main.VB_Description = "Create a letter using values from Commence"
Attribute Main.VB_ProcData.VB_Invoke_Func = "TemplateProject.JJCreateLetter.MAIN"
Dim ErrorMsg$
Dim ExitMsg$
Dim c
Dim version$
Dim NameSize
Dim s$
Dim nStart
Dim nEnd
Dim nNext
Dim PlainName$
Dim namefld$
Dim Value$
Dim Req$
Dim Cname$
Dim FC$
Dim i
Dim O
Dim k
Dim tmp$
Dim DDEerr
Dim Conn$
Dim Rest$
Dim cat$
Dim Field_$
Dim CCount$
Dim Icount
Dim Cnamelist$
Dim Cnamefld$
Dim Iloop
Dim CNameP$
Dim rselection
Dim useActiveItem As Boolean
Dim MyDoc As Document
Dim CValue As Integer
Dim RValue As Integer
Dim CurrentShowAllActive As Boolean
Dim CurrentView

'Copyright 1992-97 Commence Corporation
'Commence letter template expansion macro
'This macro creates a letter using values from the letter view info item in Commence

' Revisions for 1.00a (10/92)"
'  Prints values from all connected items (this was distributed to some users prior  to 1.00a)
'  Support for clarify fields so we can deal with items with calrified identical names
'  Gets the actual name fields (don't assume they are always called "Name")
'  Gets rid of Tr$ subroutine so we can handle "~" in field codes

'Revisions for 1.1
' (2/11/93)
' Add dq function to handle values with embedded quotes
' Separate DDE GetData calls out to a subroutine to simplify code

' Revisions for 3.0 (4/4/95)
' Support for 50 character item names, Commence 1.0a or later required

q$ = Chr(34)        ' Make a string with a single " for use in constructing DDE messages
qcq$ = q$ + "," + q$    ' Make a string with "," for use in constructing DDE messages
cr$ = Chr(13)
crlf$ = Chr(13) + Chr(10)

NameSize = 50
Cancelled = False

'get what the replace selection is set to then set it to true
rselection = Options.ReplaceSelection
Options.ReplaceSelection = True

'Switch to page view
    If ActiveWindow.VIEW.SplitSpecial = wdPaneNone Then
        CurrentView = ActiveWindow.ActivePane.VIEW.Type
        ActiveWindow.ActivePane.VIEW.Type = wdPageView
    Else
        CurrentView = ActiveWindow.VIEW.Type
        ActiveWindow.VIEW.Type = wdPageView
    End If


CmcObject$ = "Commence.DB"
AppName$ = "Commence"

' Init some strings.
ErrorMsg$ = "The error code is: "
ExitMsg$ = " CmcCreateLetter macro exiting.  Macro error number: "

Set MyDoc = ActiveDocument
CurrentShowAll = ActiveWindow.VIEW.ShowAll
ActiveWindow.VIEW.ShowAll = True

'Find out what version of Commence is running
On Error GoTo -1: On Error GoTo Done
If Not CmcCreateLetter1.GetVersion(CmcObject, AppName) Then GoTo Normalx

On Error GoTo -1: On Error GoTo NoTable

'Get number of cells
Set MyTable = ActiveDocument.Tables(1)


On Error GoTo -1: On Error GoTo NoTable
cnumtotal = Selection.Rows(1).Cells.count
cnum = cnumtotal

rnumtotal = Selection.Columns(1).Cells.count
rnum = rnumtotal

If cnum > 1 Then
    MyTable.Cell(1, 2).Select
    If Selection.Characters.count < 2 Then
        cnum = (cnumtotal \ 2) + 1
    End If
End If

If rnum > 1 Then
    MyTable.Cell(2, 1).Select
    If Selection.Characters.count < 2 Then
        rnum = (rnumtotal \ 2) + 1
    End If
End If

On Error GoTo 0
Selection.Collapse Direction:=wdCollapseStart

With frmCreateLabel
    .lblRow.Caption = "Row (1-" + str(rnum) + "):"
    .lblColumn.Caption = "Column (1-" + str(cnum) + "):"
    .Show
End With

If cnum <> cnumtotal Then
    CValue = Val(ColumnValue) + Val(ColumnValue) - 1
Else
    CValue = Val(ColumnValue)
End If

If rnum <> rnumtotal Then
    RValue = Val(RowValue) + Val(RowValue) - 1
Else
    RValue = Val(RowValue)
End If

If Cancelled Then GoTo EndMacro

'Clear out rest of label
For i = 1 To rnumtotal
    For j = 1 To cnumtotal
        If (i = RValue) And (j = CValue) Then
            'Do Nothing
        Else
            'Clear
            MyTable.Rows(i).Cells(j).Select
            Selection.Delete
        End If
    Next j
Next i
        

'Start up a DDE link to Commence
On Error GoTo -1: On Error GoTo Done
Set CmcObj = CreateObject(CmcObject$)
Set c = CmcObj.GetConversation(AppName$, "GetData")

' Turn on Clarify Info
s$ = c.Request("[ClarifyItemNames(True)]")


' Ask Commence what is currently in the letter view
' Parse the return string, which is of the form:
Call CmcCreateLetter1.GetCategoryandPlainName(c, category$, Name_$, PlainName$, VIEW$, useActiveItem, True)

'Get the name of the name field
namefld$ = CmcCreateLetter1.GetNameField(c, category$)

'Mark the ActiveItem
If useActiveItem Then
    Temp$ = c.Request("[MarkActiveItem]")
End If

'Start looking for Fields to retrieve
Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1

ActiveWindow.ActivePane.VIEW.SeekView = wdSeekMainDocument

Search:     'Return here to look for the next field
Value$ = ""
Req$ = ""
Cname$ = ""
    

FindAnother:
Value$ = ""
Req$ = ""
Cname$ = ""

Call CmcCreateLetter1.FindString

'Now we have a field code, save it in a variable
If InStr(1, Selection.Text, "%") < 1 Then GoTo Normalx
FC$ = Selection.Text

'We have a valid field code, strip off the leading and trailing marks: (% and %)
k = Len(FC$)
tmp$ = Mid(FC$, 3, k - 4)


'Check to see if it is (next)
If FC = "(%(-Next-)%)" Then
    Selection.Delete
    Selection.MoveRight Unit:=wdCharacter, count:=1, Extend:=wdExtend
    If Selection.Text = " " Or Selection.Text = Chr(13) Then
        Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdMove
        Selection.Delete Unit:=wdCharacter, count:=1
    Else
        Selection.Collapse
    End If
    GoTo FindAnother
End If

'Check to see if it is ME
If UCase(tmp$) = "(-ME-) ITEM" Then
    s$ = c.Request("[ClarifyItemNames(FALSE)]")
    Req$ = "[GetPreference(Me,|fffd|)]"
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    s$ = c.Request("[ClarifyItemNames(True)]")
    If Value$ = "??BAD DDE??" Then
        Value$ = ""
    ElseIf DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    'On Error GoTo -1: On Error GoTo Done
    
    If Value$ <> "" Then
        'parse out name
        y = InStr(Value$, "|fffd|")
        tmp$ = Trim(Mid(Value, y + 1))
        Req$ = "[GetReverseName(" + q$ + dq$(tmp$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    CmcCreateLetter1.InsertText (Value$)
    GoTo FindAnother:
End If

'Check to see if this is an indirect field: it is if it contains a %%
i = InStr(tmp$, "%%")

If i <> 0 Then GoTo Indirect        'We have an indirect field
'Other wise we have a direct field
'First check to see if this is just the name field
If ((tmp$ = namefld$) Or (tmp$ = UCase(namefld$)) Or (tmp$ = LCase(namefld$))) Then
    'Get the reversed version from Commence
    Req$ = "[GetReverseName(" + q$ + dq$(PlainName$) + q$ + ")]"
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    Selection.TypeText Text:=Value$
Else    'This is not the name field, we need to get it from Commence
    If useActiveItem Then
        Req$ = "[GetField(,," + q$ + tmp$ + q$ + ")]"
    Else
        Req$ = "[GetField(" + q$ + category$ + qcq$ + dq$(Name_$) + qcq$ + tmp$ + q$ + ")]"
    End If
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    CmcCreateLetter1.InsertText (Value$)
End If
    'Go back And look For more field codes
    GoTo FindAnother:

Indirect:   'This is an indirect field, parse it to get the values we neeed
Conn$ = Left(tmp$, i - 1)
Rest$ = Mid(tmp$, i + 2)
i = InStr(Rest$, "%%")
cat$ = Left(Rest$, i - 1)
Field_$ = Mid(Rest$, i + 2)
'Build the DDE command
If useActiveItem Then
    Req$ = "[GetConnectedItemCount(,," + q$ + Conn$ + qcq$ + cat$ + q$ + ")]"
Else
    Req$ = "[GetConnectedItemCount(" + q$ + category$
    Req$ = Req$ + qcq$ + dq$(Name_$) + qcq$ + Conn$ + qcq$ + cat$ + q$ + ")]"
End If
CmcCreateLetter1.GetData_ c, Req$, CCount$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
On Error GoTo -1: On Error GoTo Done
If CCount$ = "??BAD DDE??" Then
    Value$ = "??BAD DDE??"
    GoTo DDEerror
End If
Icount = Val(CCount$)
If Icount = 0 Then  'No connected items, just set Value$ to null
    Value$ = ""
    CmcCreateLetter1.InsertText (Value$)
Else            'Get the connected items
    If useActiveItem Then
        Req$ = "[GetConnectedItemNames(,,""" + dq$(Conn$) + qcq$ + cat$ + """,|fffd|)]"
    Else
        Req$ = "[GetConnectedItemNames(" + q$ + category$
        Req$ = Req$ + qcq$ + dq$(Name_$) + qcq$ + Conn$ + qcq$ + cat$ + q$ + ",|fffd|)]"
    End If
    CmcCreateLetter1.GetData_ c, Req$, Cnamelist$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    If Cnamelist$ = "??BAD DDE??" Then
        Value$ = "??BAD DDE??"
        GoTo DDEerror
    End If
    'Get the name of the name field for the connected category
    Cnamefld$ = CmcCreateLetter1.GetConnectedNamefield(c, cat$)
    
    'Now loop through items from the list
    nStart = 1
    Value$ = ""
    For Iloop = 1 To Icount
        nEnd = InStr(nStart, Cnamelist$, "|fffd|")
        If nEnd = 0 Then
            Cname$ = Mid(Cnamelist$, nStart)
        Else
            Cname$ = Mid(Cnamelist$, nStart, nEnd - nStart)
            nStart = nEnd + 1
        End If
        
        'Now we have a Cname to use to get the desired field
        'Check to see if we are looking for the Cname, if so we already have it
    If Field_$ = Cnamefld$ Then
        If Len(Cname$) > NameSize Then
            'Get the name without the clarify data
            CNameP$ = RTrim(Mid(Cname$, 1, NameSize))
        Else
            CNameP$ = RTrim(Cname$)
        End If
        'Get the reversed version from Commence
        Req$ = "[GetReverseName(" + q$ + dq$(CNameP$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    Else
        Req$ = "[GetField(" + q$ + cat$ + qcq$ + dq$(Cname$) + qcq$ + Field_$ + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    
    If Iloop = 1 Then
        CmcCreateLetter1.InsertText (Value$)
    Else
        CmcCreateLetter1.AddText (Value$)
    End If

Next Iloop

End If  'End of Icount = 0 If
    GoTo FindAnother
DDEerror:           'Come here if the connection is invalid
    CmcCreateLetter1.InsertText (Value$)
    GoTo FindAnother:
Insert2:
    CmcCreateLetter1.InsertText (Value$)
'Go back and look for more field codes
GoTo FindAnother

NoTable:
MsgBox Prompt:="Label Templates must have the field codes in a table.  This template does not have a table.  Please select another letter template", buttons:=vbCritical
ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
GoTo Bye

Done:
StatusBar = ErrorMsg$ + str(Err.Number) + Err.Description

'********These are the only different lines between JJCreateLetter, JJPrintLetter and JJFaxLetter:
a = MsgBox(ExitMsg$ + str(Err.Number) + Chr(10) + Err.Description, vbCritical, "Commence Letter Macro")
Normalx:

 If PrintLetter = 1 Then
    If Err.Number = 0 Then
        tmp = ActiveDocument.Name
        ActiveDocument.Save
        If Dest = 1 Then _
           ActiveDocument.PrintOut Background:=True
        If CommenceLog.autoLogToCommence(1, 1, LinkFileName, templateName, templateCategory) = True Then
            If LinkFileName = "" Then
                ActiveDocument.Saved = True
                ActiveDocument.Close SaveChanges:=False
            Else
                Documents(LinkFileName).Saved = True
                Documents(LinkFileName).Close SaveChanges:=False
            End If
        End If
    End If
 ElseIf Err.Number = 0 Then
        If CommenceLog.autoLogToCommence(1, 1, LinkFileName, templateName, templateCategory) = True Then
        End If
    'ActiveDocument.Save
    'CmcCreateLetter1.FocusNewDocument (MyDoc)
 End If

'End of difference ********************

Bye:
Set c = Nothing
Set CmcObj = Nothing
Options.ReplaceSelection = rselection
ActiveWindow.VIEW.ShowAll = CurrentShowAll

'Set it to back to the users view
    If ActiveWindow.VIEW.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.VIEW.Type = CurrentView
    Else
        ActiveWindow.VIEW.Type = CurrentView
    End If

EndMacro:
    If Cancelled Then
        ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
    End If
End Sub
Attribute VB_Name = "CmcCreateLetter1"
Public q$
Public qcq$
Public cr$
Public crlf$
Public category$
Public AppName$
Public CmcObject$
Dim Names$

Public Sub Main(PrintLetter As Integer, LinkFileName As String, Dest As Integer)
Attribute Main.VB_Description = "Create a letter using values from Commence"
Attribute Main.VB_ProcData.VB_Invoke_Func = "TemplateProject.JJCreateLetter.MAIN"
Dim ErrorMsg$
Dim ExitMsg$
Dim c
Dim version$
Dim NameSize
Dim s$
Dim nStart
Dim nEnd
Dim nNext
Dim PlainName$
Dim namefld$
Dim Value$
Dim Req$
Dim Cname$
Dim FC$
Dim i
Dim O
Dim k
Dim tmp$
Dim DDEerr
Dim Conn$
Dim Rest$
Dim cat$
Dim Field_$
Dim CCount$
Dim Icount
Dim Cnamelist$
Dim Cnamefld$
Dim Iloop
Dim CNameP$
Dim rselection
Dim useActiveItem As Boolean
Dim MyDoc As Document
Dim SearchedHeader As Boolean
Dim SearchedFooter As Boolean
Dim SearchedMain As Boolean
Dim ContinueRunning As Integer
Dim AskedNext As Boolean


'Copyright 1992-97 Commence Corporation
'Commence letter template expansion macro
'This macro creates a letter using values from the letter view info item in Commence

' Revisions for 1.00a (10/92)"
'  Prints values from all connected items (this was distributed to some users prior  to 1.00a)
'  Support for clarify fields so we can deal with items with calrified identical names
'  Gets the actual name fields (don't assume they are always called "Name")
'  Gets rid of Tr$ subroutine so we can handle "~" in field codes

'Revisions for 1.1
' (2/11/93)
' Add dq function to handle values with embedded quotes
' Separate DDE GetData calls out to a subroutine to simplify code

' Revisions for 3.0 (4/4/95)
' Support for 50 character item names, Commence 1.0a or later required

q$ = Chr(34)        ' Make a string with a single " for use in constructing DDE messages
qcq$ = q$ + "," + q$    ' Make a string with "," for use in constructing DDE messages
cr$ = Chr(13)
crlf$ = Chr(13) + Chr(10)

NameSize = 50
SearchedHeader = False
SearchedFooter = False
SearchedMain = False
AskedNext = False

'get what the replace selection is set to then set it to true
rselection = Options.ReplaceSelection
Options.ReplaceSelection = True

CmcObject$ = "Commence.DB"
AppName$ = "Commence"

' Init some strings.
ErrorMsg$ = "The error code is: "
ExitMsg$ = " CmcCreateLetter macro exiting.  Macro error number: "

Set MyDoc = ActiveDocument

'Find out what version of Commence is running
On Error GoTo -1: On Error GoTo Done
If Not GetVersion(CmcObject, AppName) Then GoTo Normalx

'Start up a DDE link to Commence
On Error GoTo -1: On Error GoTo Done
Set CmcObj = CreateObject(CmcObject$)
Set c = CmcObj.GetConversation(AppName$, "GetData")

' Turn on Clarify Info
s$ = c.Request("[ClarifyItemNames(True)]")


' Ask Commence what is currently in the letter view
' Parse the return string, which is of the form:
Call CmcCreateLetter1.GetCategoryandPlainName(c, category$, Name_$, PlainName$, VIEW$, useActiveItem, True)

'Get the name of the name field
namefld$ = CmcCreateLetter1.GetNameField(c, category$)

'Mark the ActiveItem
If useActiveItem Then
    Temp$ = c.Request("[MarkActiveItem]")
End If

'Start looking for Fields to retrieve
Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1


Search:     'Return here to look for the next field
Value$ = ""
Req$ = ""
Cname$ = ""
    
If SearchedHeader = False Then
    If ActiveWindow.ActivePane.VIEW.Type = wdNormalView Or ActiveWindow. _
        ActivePane.VIEW.Type = wdOutlineView Then
        If wdPrintView = Empty Then
            ActiveWindow.ActivePane.VIEW.Type = wdPageView
        Else
            ActiveWindow.ActivePane.VIEW.Type = wdPrintView
        End If
    End If
    ActiveWindow.ActivePane.VIEW.SeekView = wdSeekCurrentPageHeader
    SearchedHeader = True
ElseIf SearchedFooter = False Then
    If ActiveWindow.ActivePane.VIEW.Type = wdNormalView Or ActiveWindow. _
        ActivePane.VIEW.Type = wdOutlineView Then
        If wdPrintView = Empty Then
            ActiveWindow.ActivePane.VIEW.Type = wdPageView
        Else
            ActiveWindow.ActivePane.VIEW.Type = wdPrintView
        End If
    End If
    ActiveWindow.ActivePane.VIEW.SeekView = wdSeekCurrentPageFooter
    SearchedFooter = True
ElseIf SearchedMain = False Then
    ActiveWindow.ActivePane.VIEW.SeekView = wdSeekMainDocument
    SearchedMain = True
End If

FindAnother:
Value$ = ""
Req$ = ""
Cname$ = ""

Call CmcCreateLetter1.FindString

'Now we have a field code, save it in a variable
If (InStr(1, Selection.Text, "%") < 1) And (SearchedFooter = False) Then GoTo Search
If (InStr(1, Selection.Text, "%") < 1) And (SearchedMain = False) Then GoTo Search
If (InStr(1, Selection.Text, "%") < 1) And (SearchedHeader = True) And (SearchedFooter = True) And (SearchedMain = True) Then GoTo Normalx
FC$ = Selection.Text

'We have a valid field code, strip off the leading and trailing marks: (% and %)
k = Len(FC$)
tmp$ = Mid(FC$, 3, k - 4)


If UCase(FC) = "(%(-NEXT-)%)" And AskedNext = False Then
    ContinueRunning = MsgBox(Prompt:="This template is for creating labels.  Please make sure you have selected the correct application prior to creating your letter.  Would you like to continue?", buttons:=vbYesNo)
    AskedNext = True
    If ContinueRunning = 7 Then
       MyDoc.Close SaveChanges:=wdDoNotSaveChanges
       GoTo Bye
    End If
End If

'Check to see if it is ME
If UCase(tmp$) = "(-ME-) ITEM" Then
    s$ = c.Request("[ClarifyItemNames(FALSE)]")
    Req$ = "[GetPreference(Me,|fffd|)]"
    GetData_ c, Req$, Value$, DDEerr
    s$ = c.Request("[ClarifyItemNames(True)]")
    If Value$ = "??BAD DDE??" Then
        Value$ = ""
    ElseIf DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    'On Error GoTo -1: On Error GoTo Done
    
    If Value$ <> "" Then
        'parse out name
        y = InStr(Value$, "|fffd|")
        tmp$ = Trim(Mid(Value, y + 1))
        Req$ = "[GetReverseName(" + q$ + dq$(tmp$) + q$ + ")]"
        GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    InsertText (Value$)
    GoTo FindAnother:
End If

'Check to see if this is an indirect field: it is if it contains a %%
i = InStr(tmp$, "%%")

If i <> 0 Then GoTo Indirect        'We have an indirect field
'Other wise we have a direct field
'First check to see if this is just the name field
If ((tmp$ = namefld$) Or (tmp$ = UCase(namefld$)) Or (tmp$ = LCase(namefld$))) Then
    'Get the reversed version from Commence
    Req$ = "[GetReverseName(" + q$ + dq$(PlainName$) + q$ + ")]"
    GetData_ c, Req$, Value$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    Selection.TypeText Text:=Value$
Else    'This is not the name field, we need to get it from Commence
    If useActiveItem Then
        Req$ = "[GetField(,," + q$ + tmp$ + q$ + ")]"
    Else
        Req$ = "[GetField(" + q$ + category$ + qcq$ + dq$(Name_$) + qcq$ + tmp$ + q$ + ")]"
    End If
    GetData_ c, Req$, Value$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    InsertText (Value$)
End If
    'Go back And look For more field codes
    GoTo FindAnother:

Indirect:   'This is an indirect field, parse it to get the values we neeed
Conn$ = Left(tmp$, i - 1)
Rest$ = Mid(tmp$, i + 2)
i = InStr(Rest$, "%%")
cat$ = Left(Rest$, i - 1)
Field_$ = Mid(Rest$, i + 2)
'Build the DDE command
If useActiveItem Then
    Req$ = "[GetConnectedItemCount(,," + q$ + Conn$ + qcq$ + cat$ + q$ + ")]"
Else
    Req$ = "[GetConnectedItemCount(" + q$ + category$
    Req$ = Req$ + qcq$ + dq$(Name_$) + qcq$ + Conn$ + qcq$ + cat$ + q$ + ")]"
End If
GetData_ c, Req$, CCount$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
On Error GoTo -1: On Error GoTo Done
If CCount$ = "??BAD DDE??" Then
    Value$ = "??BAD DDE??"
    GoTo DDEerror
End If
Icount = Val(CCount$)
If Icount = 0 Then  'No connected items, just set Value$ to null
    Value$ = ""
    CmcCreateLetter1.InsertText (Value$)
Else            'Get the connected items
    If useActiveItem Then
        Req$ = "[GetConnectedItemNames(,,""" + dq$(Conn$) + qcq$ + cat$ + """,|fffd|)]"
    Else
        Req$ = "[GetConnectedItemNames(" + q$ + category$
        Req$ = Req$ + qcq$ + dq$(Name_$) + qcq$ + Conn$ + qcq$ + cat$ + q$ + ",|fffd|)]"
    End If
    CmcCreateLetter1.GetData_ c, Req$, Cnamelist$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    If Cnamelist$ = "??BAD DDE??" Then
        Value$ = "??BAD DDE??"
        GoTo DDEerror
    End If
    'Get the name of the name field for the connected category
    Cnamefld$ = GetConnectedNamefield(c, cat$)
    
    'Now loop through items from the list
    nStart = 1
    Value$ = ""
    For Iloop = 1 To Icount
        nEnd = InStr(nStart, Cnamelist$, "|fffd|")
        If nEnd = 0 Then
            Cname$ = Mid(Cnamelist$, nStart)
        Else
            Cname$ = Mid(Cnamelist$, nStart, nEnd - nStart)
            nStart = nEnd + 1
        End If
        
        'Now we have a Cname to use to get the desired field
        'Check to see if we are looking for the Cname, if so we already have it
    If Field_$ = Cnamefld$ Then
        If Len(Cname$) > NameSize Then
            'Get the name without the clarify data
            CNameP$ = RTrim(Mid(Cname$, 1, NameSize))
        Else
            CNameP$ = RTrim(Cname$)
        End If
        'Get the reversed version from Commence
        Req$ = "[GetReverseName(" + q$ + dq$(CNameP$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    Else
        Req$ = "[GetField(" + q$ + cat$ + qcq$ + dq$(Cname$) + qcq$ + Field_$ + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    
    If Iloop = 1 Then
        CmcCreateLetter1.InsertText (Value$)
    Else
        CmcCreateLetter1.AddText (Value$)
    End If

Next Iloop

End If  'End of Icount = 0 If
    GoTo FindAnother
DDEerror:           'Come here if the connection is invalid
    InsertText (Value$)
    GoTo FindAnother:
Insert2:
    CmcCreateLetter1.InsertText (Value$)
'Go back and look for more field codes
GoTo FindAnother

Done:
StatusBar = ErrorMsg$ + str(Err.Number) + Err.Description

'********These are the only different lines between JJCreateLetter, JJPrintLetter and JJFaxLetter:
a = MsgBox(ExitMsg$ + str(Err.Number) + Chr(10) + Err.Description, vbCritical, "Commence Letter Macro")
Normalx:

 If PrintLetter = 1 Then
    If Err.Number = 0 Then
        tmp = ActiveDocument.Name
        'ActiveDocument.Save
        If Dest = 1 Then _
           ActiveDocument.PrintOut Background:=True
        'new
        
        If CommenceLog.autoLogToCommence(1, 1, LinkFileName, templateName, templateCategory) = True Then
            If LinkFileName = "" Then
                ActiveDocument.Saved = True
                ActiveDocument.Close SaveChanges:=False
            Else
                Documents(LinkFileName).Saved = True
                Documents(LinkFileName).Close SaveChanges:=False
            End If
        End If
        'ActiveDocument.Close savechanges:=wdDoNotSaveChanges
    End If
 ElseIf Err.Number = 0 Then
        If CommenceLog.autoLogToCommence(1, 1, LinkFileName, templateName, templateCategory) = True Then
        End If
    'FocusNewDocument (MyDoc)
 End If

'End of difference ********************

Bye:
Set c = Nothing
Set CmcObj = Nothing
Options.ReplaceSelection = rselection

End Sub


Public Sub InsertText(Value$)
Dim cr$
Dim Line1$
Dim Lines2$
Dim test$
'Inserts data, checking to see if blank lines are created and handling the case of BAD DDE values
cr$ = Chr(13)
Line1$ = Chr(13)
Lines2$ = Line1$ + Line1$

If Value$ = "" Then
    'Clear out the code, we got a null value back
    Selection.Delete
    'Check to see if we are creating a blank line
    Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdMove
    Selection.MoveRight Unit:=wdCharacter, count:=2, Extend:=wdExtend
    test$ = Selection.Text
    If test$ = Lines2$ Then 'Have a blank, remove one line
        Selection.Collapse Direction:=wdCollapseEnd
        Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdExtend
        Selection.Delete
        If Selection.Text = " " Then
            Selection.Delete
        End If
    ElseIf Selection.Characters.count > 1 Then
        Selection.Collapse Direction:=wdCollapseStart
    Else
        Selection.Collapse Direction:=wdCollapseEnd
        Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdMove
        'Selection.MoveRight Unit:=wdCharacter, count:=1, Extend:=wdExtend
    End If

ElseIf Value$ = "??BAD DDE??" Then
    'Move the insertion point and leave the field code
    Selection.Collapse Direction:=wdCollapseEnd

Else
    'Replace the field code with the value
    Selection.TypeText Text:=Value$
End If

End Sub

Public Sub AddText(Value$)
Dim cr$
'Adds text from connected items, with cr after each item
cr$ = Chr(13)

If Value$ = "" Then
    'Just skip a line
    'ActiveDocument.Content.InsertAfter Text:=vbCr
    Selection.TypeText Text:=" "
    Selection.Collapse Direction:=wdCollapseEnd
ElseIf Value$ = "??BAD DDE??" Then
    'Do nothing
Else
    'Insert a cr followed by the new value
    'ActiveDocument.Content.InsertAfter Text:=vbCr
    Selection.TypeText Text:=" "
    'Selection.TypeText Text:=vbCRLF
    Selection.TypeText Text:=Value$
End If

End Sub

Public Sub GetData_(chan, sReq$, sValue$, DDEerr)
'Gets data from Commence, checking for invalid DDE calls
On Error GoTo -1: On Error GoTo BD0
'sValue$ = DDERequest(chan, sReq$)
sValue$ = chan.Request(sReq$)
BD0:
If Err.Number = 3 Or Err.Number = 2 Then
    sValue$ = "??BAD DDE??"
    DDEerr = 0
    Err.Number = 0
ElseIf Err.Number <> 0 Then
    DDEerr = Err.Number
End If
        
End Sub


Public Function dq$(s$)
Dim q$
Dim nLen
Dim tmp$
Dim i
Dim p$
'doubles quotes in strings for transmission to Commence

q$ = Chr(34)        ' The double-quote character

' Quick check for the expected (typical) case
If InStr(1, s$, q$) = 0 Then
    dq$ = s$
Else
    nLen = Len(s$)
    tmp$ = ""
    For i = 1 To nLen
        p$ = Mid(s$, i, 1)
        If p$ = q$ Then
            tmp$ = tmp$ + p$ + q$
        Else
            tmp$ = tmp$ + p$
        End If
    Next i
    dq$ = tmp$
End If

End Function

Public Sub FindString()

With Selection.Find
    .Forward = True
    .MatchWholeWord = False
    .MatchWildcards = True
    .MatchCase = False
    .Wrap = wdFindStop
    .Execute findtext:="\(%*%\)"
End With

End Sub

Public Function GetNameField(ch, category$) As String
's$ = DDERequest(ch, "[GetFieldNames(" + q$ + Category$ + q$ + ")]")
If Not q$ = Chr(34) Then q$ = Chr(34)
s$ = ch.Request("[GetFieldNames(" + q$ + category$ + q$ + ",|fffd|)]")
nStart = 1
nEnd = InStr(nStart, s$, "|fffd|")
If nEnd = 0 Then
    GetNameField = s$
Else
    GetNameField = Mid(s$, 1, nEnd - 1)
End If

End Function

Public Function GetVersion(obj_name$, app_name$) As Boolean
Dim version$
Set obj = CreateObject(obj_name$)
Set c = obj.GetConversation(app_name, "System")
version$ = c.Request("Version")
Set c = Nothing
Set obj = Nothing
If Left(version$, 9) = "Version 1" Or Left(version$, 9) = "Version 2" Then
    MsgBox "This macro can only work with Commence Version 3.0 and above", vbCritical, "Commence Letter Macro"
    GetVersion = False
Else
    GetVersion = True
End If


End Function

Public Sub GetCategoryandPlainName(ch, cat$, Name_$, pname$, viewname$, useActiveItem As Boolean, SingleLetter As Boolean)

useActiveItem = True

If SingleLetter Then
    useActiveItem = True

    On Error Resume Next
    'MsgBox Err.Description + Err.Number
    s$ = ch.Request("[GetActiveViewInfo(|fffd|)]")

    If (Err.Number = 3) Or (Err.Number = 121) Then 'add item is the active view, bad!
        Err.Clear   ' Clear Err object fields
        t$ = ch.Request("[GetLetterViewInfo(|fffd|)]")
        s$ = t$
        useActiveItem = False
    End If
Else
    s$ = ch.Request("[GetLetterViewInfo(|fffd|)]")
End If

On Error GoTo 0

ParseViewInfo s, cat$, pname$, Name_$, viewname$


End Sub

Public Sub ParseViewInfo(viewinfo$, cat$, pname$, Name_$, viewname$)

'viewinfo is a string either received from GetActiveViewInfo or GetLetterViewInfo.
'This includes the following information:
'   <View Name>
'   <View Type>
'   <Category Name>
'   <Clarifed Item Name (if appropriate)>
'   <Field Name (if an item detail is up)>
'The returned value is the category and the plain name (without the clarify info)

Dim cr$
cr$ = Chr(13)

nStart = 1
nEnd = InStr(nStart, viewinfo, "|fffd|")
viewname$ = Mid(viewinfo, nStart, nEnd - 1)
nStart = nEnd + 1
nEnd = InStr(nStart, viewinfo, "|fffd|")
'Get the active category
nStart = nEnd + 1
nEnd = InStr(nStart, viewinfo, "|fffd|")
cat$ = Mid(viewinfo, nStart, nEnd - nStart)
'Get the highlighted item
nStart = nEnd + 1
nEnd = InStr(nStart, viewinfo, "|fffd|")
'Look for the very last cr$ in case the clarify field is multi-line
'LastCR:
'nNext = InStr(nEnd + 1, viewinfo, "|fffd|")
nNext = InStr(nStart, viewinfo, cr$)
If nNext <> 0 Then
    nEnd = nNext
    'GoTo LastCR
End If
'Get the name and the clarify data (if any)
Name_$ = Mid(viewinfo, nStart, nEnd - nStart)

' NOTE:  If the clarify field Is a multi - Line Text field, And the value of the clarify field For an item
' contains a cr/nl, then 'this macro will fail because it will not get all of the clarify field value.
' This is a pretty unlikely scenario, so we will not account for it here.
' If Name$ is greater than NameSize, then it is clarified
If Len(Name_$) > NameSize Then
    'Get the name without the clarify data
    pname$ = RTrim(Mid(Name_$, 1, 50))
Else
    pname$ = RTrim(Name_$)
End If



End Sub
Public Function GetConnectedNamefield(ch, ccat$) As String
    s$ = ch.Request("[GetFieldNames(" + q$ + ccat$ + q$ + ",|fffd|)]")
    nStart = 1
    nEnd = InStr(nStart, s$, "|fffd|")
    If nEnd = 0 Then
        GetConnectedNamefield = s$
    Else
        GetConnectedNamefield = Mid(s$, nStart, nEnd - nStart)
    End If

End Function
Public Sub FocusNewDocument(sDoc)
    Application.Documents(sDoc).Activate
    Application.WindowState = wdWindowStateMaximize
End Sub
    

Attribute VB_Name = "CmcFaxLib1"

Public Sub SendFax(Name_$, Number$, FaxName$, SendFlag)
Dim gTitle$
Dim gWinFax$
Dim gEFax$
Dim gMsg1$
Dim gOn$
Dim dq2$
Dim cc
Dim FaxNum$
Dim defprn$
Dim FX$
Dim Found
Dim pname$
Dim PPort$
Dim faxdev$
Dim d
Dim s$
Dim AppName$
Dim CmcObject$
'Copyright 1992-95 Jensen-Jones Inc.
'Version for Commence 2.0 (gets processed phone number from Commence)

' Literal Text strings ; START TRANSLATION .
gTitle$ = "JJSendFax"
gWinFax$ = "WinFax"
gEFax$ = "E-FAX"
faxdev$ = "WinFax"

gMsg1$ = " is not installed!  You must install the Fax printer before faxing."
gOn$ = " on "
dq2$ = Chr(34) + Chr(34)

' END OF TRANSLATION.

CmcObject = "Commence.DB"
AppName$ = "Commence"

'Get the processed phone number from Commence
Set CmcObj = CreateObject(CmcObject$)
Set cc = CmcObj.GetConversation(AppName$, "GetData")

FaxNum$ = cc.Request("[GetPhoneNumber(" + Chr(34) + Number$ + Chr(34) + ")]")
Set cc = Nothing
Set CmcObj = Nothing

' save the current printer setting
OldPrinter$ = ActivePrinter

'Look for the fax printer setting
'FX$ = WordBasic.[GetProfileString$]("devices", UCase(FaxName$))

' found the fax printer?
'Found = InStr(UCase(FX$), UCase(FaxName$))
'If Found = 0 Then
'    WordBasic.MsgBox FaxName$ + gMsg1$, gTitle$, 16
'    GoTo Abort
'End If

' Combine the FAX printer name and port name
'Found = InStr(FX$, ",")
'PName$ = WordBasic.[Left$](FX$, Found - 1)
'PPort$ = WordBasic.[Right$](FX$, Len(FX$) - Found)
'faxdev$ = PName$ + gOn$ + PPort$

' and select the fax printer
ActivePrinter = faxdev$

'Now send the fax software the data
If UCase(FaxName$) = UCase(gWinFax$) Then
    dd = WordBasic.DDEInitiate("FAXMNG", "Transmit")

'Winfax 3.0/4.0 DDE
    s$ = "recipient(" + Chr(34) + FaxNum$ + Chr(34) + ", " + dq2$ + "," + dq2$ + ","
    s$ = s$ + Chr(34) + Name_$ + Chr(34) + ")"
    DDEPoke dd, "sendfax", Data:=s$
'End of Winfax 3.0/4.0 DDE

    WordBasic.DDETerminate (dd)

ElseIf UCase(FaxName$) = UCase(gEFax$) Then
    d = WordBasic.WordBasic.DDEInitiate("Eclipse FAX Manager", "SEND")
    DDEPoke dd, "SEND", Data:=FaxNum$
    WordBasic.DDETerminate (dd)
End If

'Now send the FAX if SendFlag = 1, otherwise let the user do it manually
If SendFlag = 1 Then
    ActiveDocument.PrintOut Background:=False
    
    'Now reset the printer to the original setting
    ActivePrinter = OldPrinter
End If

Abort:
End Sub
Attribute VB_Name = "CmcMultipleEmail1"

Public Sub Main(LetterFile$, LinkFileName As String)
Dim gMSWord$
Dim gWinFax$
Dim gFax1$
Dim gFax2$
Dim gMsg1$
Dim gBadDDE$
Dim gMsg2$
Dim gForItem$
Dim gMsg5$
Dim ErrorMsg$
Dim ExitMsg$
Dim gDelim$
Dim q$
Dim cr$
Dim Line1$
Dim Lines2$
'Dim LetterFile$
Dim c
Dim version$
Dim NameSize
Dim b
Dim nState
Dim s$
Dim nStart
Dim nEnd
Dim VIEW$
Dim Req$
Dim tmp$
Dim itemcount As Integer
Dim namefld$
Dim i
Dim j
Dim FaxNumberField$
Dim nLoop
Dim IC$
Dim Value$
Dim Cname$
Dim FC$
Dim O
Dim k
Dim PlainName$
Dim category$
Dim Conn$
Dim Rest$
Dim cat$
Dim Field_$
Dim CCount$
Dim Icount
Dim Cnamefld$
Dim Iloop
Dim PlainCName$
Dim FaxNumber$
Dim FaxNum$
Dim AppName$
Dim CmcObject$
Dim alreadyaskedsubject As Boolean
Dim ContinueRunning As Integer
Dim AskedNext As Boolean
Dim NumberNoEmail
'   Dim objSession As Object
'   Dim objMessage As Object
'   Dim objRecipient As Object
'   Dim sProfile As String
'   Dim objsessionset As Boolean

'Copyright 1992-2001 Commence Corporation
'Commence letter template expansion macro

' Literal Text strings ; START TRANSLATION .

gMSWord$ = "Microsoft Word"
gWinFax$ = "WinFax"

gFax1$ = "email"
gFax2$ = "e-mail"
gMsg1$ = "CmcMultipleEmail could not find the e-mail number field for this category."

gBadDDE$ = "??BAD DDE??"
gMsg2$ = "CmcMultipleEmail could not get the e-mail address: "
gForItem$ = " in item: "
gMsg5$ = "CmcMultipleEmail found a null e-mail address for the field: "

ErrorMsg$ = "The errror code is: "  ' Error message
ExitMsg$ = "CmcMultipleEmail macro exiting.  Macro error number: "

' END OF TRANSLATION.

gDelim$ = Chr(13)
q$ = Chr(34)
cr$ = Chr(13)
Line1$ = Chr(13)
Lines2$ = Line1$ + Line1$
NameSize = 50
alreadyaskedsubject = False
'objsessionset = False
AskedNext = False
NumberNoEmail = 0

'get what the replace selection is set to then set it to true
rselection = Options.ReplaceSelection
Options.ReplaceSelection = True


CmcObject$ = "Commence.DB"
AppName$ = "Commence"

'LetterFile$ = ActiveDocument.AttachedTemplate.Name

'Find out what version of Commence is running
On Error GoTo -1: On Error GoTo Done
If Not CmcCreateLetter1.GetVersion(CmcObject, AppName) Then GoTo Normalx

'Start up a GetData DDE link to Commence
Set CmcObj = CreateObject(CmcObject$)
Set c = CmcObj.GetConversation(AppName$, "GetData")

'On Error GoTo -1: On Error GoTo Bye
'
'     ' Leaving sProfile equal to Null will
'      ' force the user to select which Mapi
'      ' profile to use. To keep from being
'      ' prompted, you must supply a valid
'      ' user profile.
'      sProfile = ""
'
'      ' Create the Session Object.
'      Set objSession = CreateObject("mapi.session")
'
'      ' Log on using the session object.
'      ' Specify a valid profile name if you want to
'      ' avoid the logon dialog box.
'      objSession.Logon profileName:=sProfile
'      objsessionset = True
Email_Login

On Error GoTo -1: On Error GoTo Done

Call CmcCreateLetter1.GetCategoryandPlainName(c, category$, Name_$, PlainName$, VIEW$, False, False)


' Ask Commence what is currently highlighted
nState = 1

'Now find out how many items are in the view
'Turn on Clarify Info
s$ = c.Request("[ClarifyItemNames(True)]")

Req$ = "[ViewCategory(" + q$ + category$ + q$ + ")]"

tmp$ = c.Request(Req$)
Req$ = "[ViewView(" + q$ + VIEW$ + q$ + ")]"
tmp$ = c.Request(Req$)
tmp$ = c.Request("[ViewItemCount]")
itemcount = Val(tmp$)

'Get the name of the name field
namefld$ = CmcCreateLetter1.GetNameField(c, category$)

'Find the Email address field
s$ = c.Request("[GetFieldNames(" + q$ + category$ + q$ + ")]")
i = InStr(1, s$, gFax1$, 1)
If i <> 0 Then
    j = InStr(i, s$, gDelim$)
    FaxNumberField$ = Mid(s$, i, j - i)
ElseIf InStr(1, s$, gFax2, vbTextCompare) Then
    i = InStr(1, s$, gFax2, vbTextCompare)
    j = InStr(i, s$, gDelim$)
    FaxNumberField$ = Mid(s$, i, j - i)
Else
    MsgBox gMsg1, 16, "CmcMultipleEmail"
    Err.Number = 9999
    GoTo Normalx
End If
Dim itemNames As String
itemNames = ""

'Start main loop
For nLoop = 1 To itemcount
IC$ = str(nLoop)
If nLoop <> 1 Then Documents.Add Template:=LetterFile$

    'itemNames = itemNames + c.Request("[Viewfield(" + IC$ + ",""" + namefld$ + """)]") + "|fffd|"
    itemNames = itemNames + c.Request("[ViewItemName(" + IC$ + ")]") + "|fffd|"
    If nLoop = itemcount Then
        itemNames = Left(itemNames, Len(itemNames) - 1)
        If CommenceLog.autoLogToCommence(nRows:=itemcount, Dest:=3, LinkFileName:=LinkFileName, itemNames:=itemNames, templateName:=templateName, templateCategory:=templateCategory) = True Then
        End If
    End If

Set MyDoc = ActiveDocument

'Start looking for Fields to retrieve
Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1

Search:     'Return here to look for the next field
Value$ = ""
Req$ = ""
Cname$ = ""
Call CmcCreateLetter1.FindString
'Now we have a field code, save it in a variable
If InStr(1, Selection.Text, "%") < 1 Then GoTo LetterEnd
FC$ = Selection.Text

'We have a valid field code, strip off the leading and trailing marks: (% and %)
k = Len(FC$)
tmp$ = Mid(FC$, 3, k - 4)

'Check to see if this is a label template
If UCase(FC) = "(%(-NEXT-)%)" And AskedNext = False Then
    ContinueRunning = MsgBox(Prompt:="This template is for creating labels.  Please make sure you have selected the correct application prior to creating your letter.  Would you like to continue?", buttons:=vbYesNo)
    AskedNext = True
    If ContinueRunning = 7 Then
        MyDoc.Saved = True
       MyDoc.Close SaveChanges:=wdDoNotSaveChanges
       GoTo Bye
    End If
End If

'Check to see if it is ME
If UCase(tmp$) = "(-ME-) ITEM" Then
    s$ = c.Request("[ClarifyItemNames(FALSE)]")
    Req$ = "[GetPreference(Me,|fffd|)]"
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    s$ = c.Request("[ClarifyItemNames(True)]")
    If DDErr = 126 Then
        Value$ = ""
    ElseIf DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    'On Error GoTo -1: On Error GoTo Done
    
    If Value$ <> "" Then
        'parse out name
        y = InStr(Value$, "|fffd|")
        tmp$ = Trim(Mid(Value, y + 1))
        Req$ = "[GetReverseName(" + q$ + dq$(tmp$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    CmcCreateLetter1.InsertText (Value$)
    GoTo Search:
End If


'Check to see if this is an indirect field: it is if it contains a %
i = InStr(tmp$, "%%")
If i = 0 Then       'We have a direct field

    Req$ = "[ViewField(" + IC$ + "," + q$ + tmp$ + q$ + ")]"
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    'Handle the case of the name field
    If Len(Value$) > NameSize And tmp$ = namefld$ Then
        'Get the name without the clarify data
        Value$ = RTrim(Mid(Value$, nStart, NameSize))
    Else
        Value$ = RTrim(Value$)
    End If
'Now check to see if this is the name field, if it is we will switch first and last names
    If ((tmp$ = namefld$) Or (tmp$ = UCase(namefld$)) Or (tmp$ = LCase(namefld$))) Then
        PlainName = Value
        Req$ = "[ViewReverseName(" + q$ + dq$(Value$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    CmcCreateLetter1.InsertText (Value$)
        
Else    'This is an indirect field, parse it to get the values we neeed
    Conn$ = Left$(tmp$, i - 1)
    Rest$ = Mid(tmp$, i + 2)
    i = InStr(Rest$, "%%")
    cat$ = Left$(Rest$, i - 1)
    Field_$ = Mid(Rest$, i + 2)
    Req$ = "[ViewConnectedCount(" + IC$ + "," + q$ + Conn$ + q$ + "," + q$ + cat$ + q$ + ")]"
    CmcCreateLetter1.GetData_ c, Req$, CCount$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    If CCount$ = "??BAD DDE??" Then
        Value$ = "??BAD DDE??"
        GoTo DDEerror
    End If
    Icount = Val(CCount$)
    'Check for zero connected items
    If Icount = 0 Then
        Value$ = ""
        CmcCreateLetter1.InsertText (Value$)
    Else
    'Loop through connected items
    ''Get the name of the name field for the connected category
    'Get the name of the name field for the connected category
    Cnamefld$ = CmcCreateLetter1.GetConnectedNamefield(c, cat$)

    For Iloop = 1 To Icount
    'Build the DDE command
    Req$ = "[ViewConnectedItem(" + IC$ + "," + q$ + Conn$ + q$ + "," + q$ + cat$ + q$ + "," + str(Iloop) + ")]"
    CmcCreateLetter1.GetData_ c, Req$, Cname$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    If Cname$ = "??BAD DDE??" Then
        Value$ = "??BAD DDE??"
        GoTo DDEerror
    End If

    'Check to see if we are looking for the name, if so we already have it
    If Field_$ = Cnamefld$ Then
        If Len(Cname$) > NameSize Then
            'Get the name without the clarify data
            PlainCName$ = RTrim(Mid(Cname$, 1, NameSize))
        Else
            PlainCName$ = RTrim(Cname$)
        End If
          
        Req$ = "[ViewReverseName( " + q$ + dq$(PlainCName$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    Else
            Req$ = "[GetField(" + q$ + cat$ + q$ + "," + q$ + dq$(Cname$) + q$ + "," + q$ + Field_$ + q$ + ")]"
            CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
            If DDEerr <> 0 Then
                Err.Number = DDEerr
                GoTo Done
            End If
            On Error GoTo -1: On Error GoTo Done
    End If
    If Iloop = 1 Then
        CmcCreateLetter1.InsertText (Value$)
    Else
        CmcCreateLetter1.AddText (Value$)
    End If

Next Iloop
End If  'End of Icount = 0 case
GoTo Search
DDEerror:           'Come here if the connection is invalid
    CmcCreateLetter1.InsertText (Value$)
    GoTo Search:
Insert2:
        CmcCreateLetter1.InsertText (Value$)
End If

'Go back and look for more field codes
GoTo Search:
LetterEnd:

'FileSave
    'Now get the email address for the item
        Req$ = "[ViewField(" + IC$ + "," + q$ + FaxNumberField$ + q$ + ")]"
        On Error GoTo -1: On Error GoTo BD8
        FaxNumber$ = c.Request(Req$)
        'If PlainName = "" Then
            'PlainName = c.Request("[ViewField(" + Namefld + ")]")
        'End If
'This is the new error handling
BD8:
    If Err.Number <> 0 Then
        'WordBasic.MsgBox gMsg2$ + FaxNumberField$ + gForItem$ + PlainName$, gMSWord$, 16
        'GoTo Normalx
    End If
    On Error GoTo -1: On Error GoTo Done

FaxNum$ = Trim$(FaxNumber$)
i = Len(FaxNum$)
If Len(FaxNum$) <> 0 Then
          
    
      ' Add a new message object to the OutBox.
'      Set objMessage = objSession.Outbox.Messages.Add

      ' Set the properties of the message object.
      If alreadyaskedsubject = False Then
        DocTitle$ = MyDoc.BuiltInDocumentProperties(wdPropertyTitle)
        If DocTitle = "" Then
            DocTitle = InputBox("Please enter a subject for the E-Mail Message or select Cancel to leave it blank.")
        End If
        alreadyaskedsubject = True
      End If
'      objMessage.subject = DocTitle
      
      
    'CmcCreateLetter1.FocusNewDocument (MyDoc)
    Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1
      
    Selection.WholeStory
    
    Email_Send FaxNum$, DocTitle$, Selection.Text, 1

'    objMessage.Text = Selection.Text
'
'      ' Add a recipient object to the objMessage.Recipients collection.
'      Set objRecipient = objMessage.Recipients.Add
'
'      ' Set the properties of the recipient object.
'      'objRecipient.Name = FaxNum
'       objRecipient.Address = "SMTP:" + FaxNum
'       objRecipient.Type = 1
'
      On Error GoTo -1: On Error GoTo ErrorNextItem 'If cancelled
'      objRecipient.Resolve
      
      On Error GoTo 0

      MyDoc.Saved = True
      MyDoc.Close SaveChanges:=wdDoNotSaveChanges

'      objMessage.Update
'
'      objMessage.Send showDialog:=False
      GoTo NextItem
      
ErrorNextItem:
      MyDoc.Saved = True
      MyDoc.Close SaveChanges:=wdDoNotSaveChanges

      
Else
    NumberNoEmail = NumberNoEmail + 1
    'MsgBox gMsg5$ + FaxNumberField$ + cr$ + gForItem$ + PlainName$, 16, "CmcMultipleEmail"
      MyDoc.Saved = True
      MyDoc.Close SaveChanges:=wdDoNotSaveChanges
End If

NextItem:

'Go back an get the next item from the view
Next nLoop
'All done, go the the normal exit
GoTo Normalx

Done:
    StatusBar = ErrorMsg$ + str(Err.Number) + Err.Description
    a = MsgBox(ExitMsg$ + str(Err.Number) + Chr(10) + Err.Description, vbCritical, "Commence Multiple E-mail Macro")
    'ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges

    Err.Number = 0
    'Just stop processing letters at this point: there is an error in the template

Bye:
      MyDoc.Saved = True
      MyDoc.Close SaveChanges:=wdDoNotSaveChanges

'If objsessionset = True Then
'    objSession.Logoff
'    objsessionset = False
'End If
Email_Logout
Normalx:

If NumberNoEmail > 0 Then
    a = MsgBox("There were " + str(NumberNoEmail) + " item(s) with no e-mail address.  These items were not sent.", vbCritical, "Commence Multiple E-mail Macro")
End If

Set c = Nothing
Set CmcObj = Nothing

' This causes the hourglass cursor to be turned into a normal pointer.
Tasks(AppName$).Visible = True

End Sub

Attribute VB_Name = "CmcMultipleFax1"

Public Sub Main(LetterFile$, LinkFileName As String)
Dim gMSWord$
Dim gWinFax$
Dim gFax1$
Dim gFax2$
Dim gMsg1$
Dim gBadDDE$
Dim gMsg2$
Dim gForItem$
Dim gMsg5$
Dim ErrorMsg$
Dim ExitMsg$
Dim gDelim$
Dim q$
Dim cr$
Dim Line1$
Dim Lines2$
'Dim LetterFile$
Dim c
Dim version$
Dim NameSize
Dim b
Dim nState
Dim s$
Dim nStart
Dim nEnd
Dim VIEW$
Dim Req$
Dim tmp$
Dim itemcount As Integer
Dim namefld$
Dim i
Dim j
Dim FaxNumberField$
Dim nLoop
Dim IC$
Dim Value$
Dim Cname$
Dim FC$
Dim O
Dim k
Dim PlainName$
Dim Conn$
Dim Rest$
Dim cat$
Dim Field_$
Dim CCount$
Dim Icount
Dim Cnamefld$
Dim Iloop
Dim PlainCName$
Dim FaxNumber$
Dim FaxNum$
Dim AppName$
Dim CmcObject$
Dim SearchedHeader As Boolean
Dim SearchedFooter As Boolean
Dim SearchedMain As Boolean
Dim ContinueRunning As Integer
Dim AskedNext As Boolean
Dim NumberNoEmail

'Copyright 1992-2001 Commence Corporation
'Commence letter template expansion macro

' Literal Text strings ; START TRANSLATION .

gMSWord$ = "Microsoft Word"
gWinFax$ = "WinFax"

gFax1$ = "Fax"
gFax2$ = "FAX"
gMsg1$ = "CmcMultipleFax could not find the fax number field for this category."

gBadDDE$ = "??BAD DDE??"
gMsg2$ = "CmcMultipleFax could not get the fax number: "
gForItem$ = " for this item: "
gMsg5$ = "CmcMultipleFax got a null fax number: "

ErrorMsg$ = "The errror code is: "  ' Error message
ExitMsg$ = "CmcMultipleFax macro exiting.  Macro error number: "

' END OF TRANSLATION.

gDelim$ = Chr(13)
q$ = Chr(34)
cr$ = Chr(13)
Line1$ = Chr(13)
Lines2$ = Line1$ + Line1$
NameSize = 50
NumberNoEmail = 0

'get what the replace selection is set to then set it to true
rselection = Options.ReplaceSelection
Options.ReplaceSelection = True

CmcObject$ = "Commence.DB"
AppName$ = "Commence"
AskedNext = False

'LetterFile$ = ActiveDocument.AttachedTemplate.Name

'Find out what version of Commence is running
On Error GoTo -1: On Error GoTo Done
If Not CmcCreateLetter1.GetVersion(CmcObject, AppName) Then GoTo Normalx

'Start up a GetData DDE link to Commence
Set CmcObj = CreateObject(CmcObject$)
Set c = CmcObj.GetConversation(AppName$, "GetData")

On Error GoTo -1: On Error GoTo Done

Call GetCategoryandPlainName(c, Categor$, Name_$, PlainName$, VIEW$, False, False)


' Ask Commence what is currently highlighted
nState = 1

'Now find out how many items are in the view
'Turn on Clarify Info
s$ = c.Request("[ClarifyItemNames(True)]")

Req$ = "[ViewCategory(" + q$ + Categor$ + q$ + ")]"

tmp$ = c.Request(Req$)
Req$ = "[ViewView(" + q$ + VIEW$ + q$ + ")]"
tmp$ = c.Request(Req$)
tmp$ = c.Request("[ViewItemCount]")
itemcount = Val(tmp$)

'Get the name of the name field
namefld$ = GetNameField(c, Categor$)

'Find the Fax number field
s$ = c.Request("[GetFieldNames(" + q$ + Categor$ + q$ + ")]")

' look for gFax1 first
i = InStr(1, s$, gFax1$, 1)
If i <> 0 Then
    j = InStr(i, s$, gDelim$)
    FaxNumberField$ = Mid(s$, i, j - i)
ElseIf InStr(1, s$, gFax2, vbTextCompare) Then
    i = InStr(1, s$, gFax2, vbTextCompare)
    j = InStr(i, s$, gDelim$)
    FaxNumberField$ = Mid(s$, i, j - i)
Else
    MsgBox gMsg1, 16, "CmcMultipleFax"
    Err.Number = 9999
    GoTo Normalx
End If

Dim itemNames As String
itemNames = ""

'Start main loop
For nLoop = 1 To itemcount
IC$ = str(nLoop)
If nLoop <> 1 Then Documents.Add Template:=LetterFile$
    'itemNames = itemNames + c.Request("[Viewfield(" + IC$ + ",""" + namefld$ + """)]") + "|fffd|"
    itemNames = itemNames + c.Request("[ViewItemName(" + IC$ + ")]") + "|fffd|"
    If nLoop = itemcount Then
        itemNames = Left(itemNames, Len(itemNames) - 1)
        If CommenceLog.autoLogToCommence(nRows:=itemcount, Dest:=2, LinkFileName:=LinkFileName, itemNames:=itemNames, templateName:=templateName, templateCategory:=templateCategory) = True Then
        End If
    End If

'Start looking for Fields to retrieve
Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1

SearchedHeader = False
SearchedFooter = False
SearchedMain = False

Search:     'Return here to look for the next field

If SearchedHeader = False Then
    If ActiveWindow.ActivePane.VIEW.Type = wdNormalView Or ActiveWindow. _
        ActivePane.VIEW.Type = wdOutlineView Then
        If wdPrintView = Empty Then
            ActiveWindow.ActivePane.VIEW.Type = wdPageView
        Else
            ActiveWindow.ActivePane.VIEW.Type = wdPrintView
        End If
    End If
    ActiveWindow.ActivePane.VIEW.SeekView = wdSeekCurrentPageHeader
    SearchedHeader = True
ElseIf SearchedFooter = False Then
    If ActiveWindow.ActivePane.VIEW.Type = wdNormalView Or ActiveWindow. _
        ActivePane.VIEW.Type = wdOutlineView Then
        If wdPrintView = Empty Then
            ActiveWindow.ActivePane.VIEW.Type = wdPageView
        Else
            ActiveWindow.ActivePane.VIEW.Type = wdPrintView
        End If
    End If
    ActiveWindow.ActivePane.VIEW.SeekView = wdSeekCurrentPageFooter
    SearchedFooter = True
ElseIf SearchedMain = False Then
    ActiveWindow.ActivePane.VIEW.SeekView = wdSeekMainDocument
    SearchedMain = True
End If

FindAnother:
Value$ = ""
Req$ = ""
Cname$ = ""

Call CmcCreateLetter1.FindString

'Now we have a field code, save it in a variable
If (InStr(1, Selection.Text, "%") < 1) And (SearchedFooter = False) Then GoTo Search
If (InStr(1, Selection.Text, "%") < 1) And (SearchedMain = False) Then GoTo Search
If (InStr(1, Selection.Text, "%") < 1) And (SearchedHeader = True) And (SearchedFooter = True) And (SearchedMain = True) Then GoTo LetterEnd
FC$ = Selection.Text
k = Len(FC$)
tmp$ = Mid(FC$, 3, k - 4)

'Check to see if this is a label template
If UCase(FC) = "(%(-NEXT-)%)" And AskedNext = False Then
    ContinueRunning = MsgBox(Prompt:="This template is for creating labels.  Please make sure you have selected the correct application prior to creating your letter.  Would you like to continue?", buttons:=vbYesNo)
    AskedNext = True
    If ContinueRunning = 7 Then
       ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
       GoTo Normalx
    End If
End If

'Check to see if it is ME
If UCase(tmp$) = "(-ME-) ITEM" Then
    s$ = c.Request("[ClarifyItemNames(FALSE)]")
    Req$ = "[GetPreference(Me,|fffd|)]"
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    s$ = c.Request("[ClarifyItemNames(True)]")
    If DDErr = 126 Then
        Value$ = ""
    ElseIf DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    'On Error GoTo -1: On Error GoTo Done
    
    If Value$ <> "" Then
        'parse out name
        y = InStr(Value$, "|fffd|")
        tmp$ = Trim(Mid(Value, y + 1))
        Req$ = "[GetReverseName(" + q$ + dq$(tmp$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    CmcCreateLetter1.InsertText (Value$)
    GoTo FindAnother:
End If


'Check to see if this is an indirect field: it is if it contains a %
i = InStr(tmp$, "%%")
If i = 0 Then       'We have a direct field

    Req$ = "[ViewField(" + IC$ + "," + q$ + tmp$ + q$ + ")]"
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    'Handle the case of the name field
    If Len(Value$) > NameSize And tmp$ = namefld$ Then
        'Get the name without the clarify data
        Value$ = RTrim(Mid(Value$, nStart, NameSize))
    Else
        Value$ = RTrim(Value$)
    End If
'Now check to see if this is the name field, if it is we will switch first and last names
    If ((tmp$ = namefld$) Or (tmp$ = UCase(namefld$)) Or (tmp$ = LCase(namefld$))) Then
        PlainName = Value
        Req$ = "[ViewReverseName(" + q$ + dq$(Value$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    CmcCreateLetter1.InsertText (Value$)
        
Else    'This is an indirect field, parse it to get the values we neeed
    Conn$ = Left$(tmp$, i - 1)
    Rest$ = Mid(tmp$, i + 2)
    i = InStr(Rest$, "%%")
    cat$ = Left$(Rest$, i - 1)
    Field_$ = Mid(Rest$, i + 2)
    Req$ = "[ViewConnectedCount(" + IC$ + "," + q$ + Conn$ + q$ + "," + q$ + cat$ + q$ + ")]"
    CmcCreateLetter1.GetData_ c, Req$, CCount$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    If CCount$ = "??BAD DDE??" Then
        Value$ = "??BAD DDE??"
        GoTo DDEerror
    End If
    Icount = Val(CCount$)
    'Check for zero connected items
    If Icount = 0 Then
        Value$ = ""
        CmcCreateLetter1.InsertText (Value$)
    Else
    'Loop through connected items
    ''Get the name of the name field for the connected category
    'Get the name of the name field for the connected category
    Cnamefld$ = CmcCreateLetter1.GetConnectedNamefield(c, cat$)

    For Iloop = 1 To Icount
    'Build the DDE command
    Req$ = "[ViewConnectedItem(" + IC$ + "," + q$ + Conn$ + q$ + "," + q$ + cat$ + q$ + "," + str(Iloop) + ")]"
    CmcCreateLetter1.GetData_ c, Req$, Cname$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    If Cname$ = "??BAD DDE??" Then
        Value$ = "??BAD DDE??"
        GoTo DDEerror
    End If

    'Check to see if we are looking for the name, if so we already have it
    If Field_$ = Cnamefld$ Then
        If Len(Cname$) > NameSize Then
            'Get the name without the clarify data
            PlainCName$ = RTrim(Mid(Cname$, 1, NameSize))
        Else
            PlainCName$ = RTrim(Cname$)
        End If
          
        Req$ = "[ViewReverseName( " + q$ + dq$(PlainCName$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    Else
            Req$ = "[GetField(" + q$ + cat$ + q$ + "," + q$ + dq$(Cname$) + q$ + "," + q$ + Field_$ + q$ + ")]"
            CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
            If DDEerr <> 0 Then
                Err.Number = DDEerr
                GoTo Done
            End If
            On Error GoTo -1: On Error GoTo Done
    End If
    If Iloop = 1 Then
        CmcCreateLetter1.InsertText (Value$)
    Else
        CmcCreateLetter1.AddText (Value$)
    End If

Next Iloop
End If  'End of Icount = 0 case
GoTo FindAnother
DDEerror:           'Come here if the connection is invalid
    CmcCreateLetter1.InsertText (Value$)
    GoTo FindAnother:
Insert2:
        CmcCreateLetter1.InsertText (Value$)
End If

'Go back and look for more field codes
GoTo FindAnother:
LetterEnd:

'FileSave
    'Now get the fax number for the item
        Req$ = "[ViewField(" + IC$ + "," + q$ + FaxNumberField$ + q$ + ")]"
        On Error GoTo -1: On Error GoTo BD8
        FaxNumber$ = c.Request(Req$)
        'If PlainName = "" Then
            PlainName = c.Request("[ViewField(" + IC$ + "," + q$ + namefld + q$ + ")]")
        'End If
'This is the new error handling
BD8:
    If Err.Number <> 0 Then
        WordBasic.MsgBox gMsg2$ + FaxNumberField$ + gForItem$ + PlainName$, gMSWord$, 16
        GoTo Normalx
    End If
    On Error GoTo -1: On Error GoTo Done

FaxNum$ = Trim$(FaxNumber$)
i = Len(FaxNum$)
If Len(FaxNum$) <> 0 Then
    Call CmcFaxLib1.SendFax(PlainName$, FaxNum$, gWinFax$, 1)
Else
    NumberNoEmail = NumberNoEmail + 1
    'ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
    'MsgBox gMsg5$ + FaxNumberField$ + cr$ + gForItem$ + PlainName$, 16, "CmcMultipleFax"
End If
ActiveDocument.Saved = False
ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges

'Go back an get the next item from the view
Next nLoop
'All done, go the the normal exit
GoTo Normalx

Done:
    StatusBar = ErrorMsg$ + str(Err.Number) + Err.Description
    a = MsgBox(ExitMsg$ + str(Err.Number) + Chr(10) + Err.Description, vbCritical, "Commence Multiple Fax Macro")

    'ActiveDocument.PrintOut Background:=True
    'ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
    Err.Number = 0
    'Just stop processing letters at this point: there is an error in the template

Normalx:

If NumberNoEmail > 0 Then
    a = MsgBox("There were " + str(NumberNoEmail) + " item(s) without a fax number.  These items were not faxed.", vbCritical, "Commence Multiple Fax Macro")
End If

Set c = Nothing
Set CmcObj = Nothing

' turn WinFax back on so that it will send the queued FAXes
d = WordBasic.DDEInitiate("FAXMNG", "CONTROL")
WordBasic.DDEExecute d, "GoActive"
WordBasic.DDETerminate d

' This causes the hourglass cursor to be turned into a normal pointer.
    Tasks(AppName$).Visible = True

End Sub

Attribute VB_Name = "CmcMultipleLabels1"
Public AppName$
Public CmcObject$
Public cr$
Public crlf$


Public Sub Main(LinkFileName As String)
Attribute Main.VB_Description = "Print letters to all the items in the current view in Commence"
Attribute Main.VB_ProcData.VB_Invoke_Func = "TemplateProject.JJMultipleLetters.MAIN"
Dim ErrorMsg$
Dim ExitMsg$
Dim q$
Dim cr$
Dim Line1$
Dim Lines2$
Dim LetterFile$
Dim c
Dim version$
Dim NameSize
Dim b
Dim nState
Dim s$
Dim nStart
Dim nEnd
Dim VIEW$
Dim Req$
Dim tmp$
Dim itemcount As Integer
Dim namefld$
Dim nLoop
Dim IC$
Dim Value$
Dim Cname$
Dim FC$
Dim i
Dim O
Dim k
Dim DDEerr
Dim Conn$
Dim Rest$
Dim cat$
Dim Field_$
Dim CCount$
Dim Icount
Dim Cnamefld$
Dim Iloop
Dim PlainCName$
Dim rselection
Dim useActiveItem As Boolean
Dim category$
Dim BeenHere As Boolean
Dim CurrentShowAll As Boolean
'Copyright 1992-97 Commence Corp.
'Commence letter template expansion macro
'This version will print letters to all the items in the current letter view

' Revisions for 1.00a (10/92)"
'  Prints values from all connected items (this was distributed to some users prior  to 1.00a)
'  Support for clarify fields so we can deal with items with clarified but identical names
'  Gets the actual name fields (don't assume they are always called "Name")

'Revisions for 1.1
' 2/11/93)
' Add dq function to handle values with embedded quotes
' Separate DDE GetData calls out to a subroutine to simplify code
' Fix GetActiveView bug
' Fix truncation of non-name fields bug

' Revisions for 3.0 (4/4/95)
' Support for 50 character item names, Commence 1.0a or later required

' Init some strings
ErrorMsg$ = "The error code is: "
ExitMsg$ = " CmcMultipleLetters macro exiting.  Macro error number: "

q$ = Chr(34)
cr$ = Chr(13)
crlf$ = Chr(13) + Chr(10)
Line1$ = Chr(13)
Lines2$ = Line1$ + Line1$
NameSize = 50
BeenHere = False

'get what the replace selection is set to then set it to true
rselection = Options.ReplaceSelection
Options.ReplaceSelection = True

CurrentShowAll = ActiveWindow.VIEW.ShowAll
ActiveWindow.VIEW.ShowAll = True

'Set it to page view
    If ActiveWindow.VIEW.SplitSpecial = wdPaneNone Then
        CurrentView = ActiveWindow.ActivePane.VIEW.Type
        ActiveWindow.ActivePane.VIEW.Type = wdPageView
    Else
        CurrentView = ActiveWindow.VIEW.Type
        ActiveWindow.VIEW.Type = wdPageView
    End If


CmcObject$ = "Commence.DB"
AppName$ = "Commence"


'Find out what version of Commence is running
On Error GoTo -1: On Error GoTo Done
If Not CmcCreateLetter1.GetVersion(CmcObject, AppName) Then GoTo Normalx

'Start up a GetData DDE link to Commence
Set CmcObj = CreateObject(CmcObject$)
Set c = CmcObj.GetConversation(AppName$, "GetData")

On Error GoTo -1: On Error GoTo Done

Call CmcCreateLetter1.GetCategoryandPlainName(c, category$, Name_$, PlainName$, VIEW$, useActiveItem, False)


' Ask Commence what is currently highlighted
nState = 1

'Now find out how many items are in the view
'Turn on Clarify Info
s$ = c.Request("[ClarifyItemNames(True)]")

Req$ = "[ViewCategory(" + q$ + category$ + q$ + ")]"

tmp$ = c.Request(Req$)
Req$ = "[ViewView(" + q$ + VIEW$ + q$ + ")]"
tmp$ = c.Request(Req$)
tmp$ = c.Request("[ViewItemCount]")
itemcount = Val(tmp$)

'Get the name of the name field
namefld$ = CmcCreateLetter1.GetNameField(c, category$)

On Error GoTo -1: On Error GoTo NoTable

'Get number of cells
Set MyTable = ActiveDocument.Tables(1)

'totalcells = rnum * cnum
    
Selection.Tables(1).Select
Selection.Copy
On Error GoTo 0


Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1

Dim itemNames As String
itemNames = ""

'Start main loop
For nLoop = 1 To itemcount
IC$ = str(nLoop)
    'itemNames = itemNames + c.Request("[Viewfield(" + IC$ + ",""" + namefld$ + """)]") + "|fffd|"
    itemNames = itemNames + c.Request("[ViewItemName(" + IC$ + ")]") + "|fffd|"

Search:     'Return here to look for the next field

FindAnother:
Value$ = ""
Req$ = ""
Cname$ = ""

Call CmcCreateLetter1.FindString

'Check if we need to add another page
FC = Selection.Text
a = InStr(1, FC, "%", vbTextCompare)
If (InStr(1, Selection.Text, "%") < 1) And (nLoop < itemcount) Then
    Selection.GoTo What:=wdGoToLine, Which:=wdGoToLast
    'SendKeys "{Down}"
    Selection.Paste
    'Selection.GoTo What:=wdGoToLine, Which:=wdGoToFirst
    Selection.GoTo What:=wdGoToTable, Which:=wdGoToLast
    GoTo Search
ElseIf (InStr(1, Selection.Text, "%") < 1) Then
    GoTo LetterEnd
End If
    
'Now we have a field code, save it in a variable
FC$ = Selection.Text

'Check if have to go to next item
If FC = "(%(-Next-)%)" And (nLoop = 1) And (BeenHere = False) Then
    Selection.Delete
    Selection.MoveRight Unit:=wdCharacter, count:=1, Extend:=wdExtend
    If Selection.Text = " " Or Selection.Text = Chr(13) Then
        Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdMove
        Selection.Delete Unit:=wdCharacter, count:=1
    Else
        Selection.Collapse
    End If
    BeenHere = True
    GoTo FindAnother
ElseIf (FC = "(%(-Next-)%)") Then
    Selection.Delete
    Selection.MoveRight Unit:=wdCharacter, count:=1, Extend:=wdExtend
    If Selection.Text = " " Or Selection.Text = Chr(13) Then
        Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdMove
        Selection.Delete Unit:=wdCharacter, count:=1
    Else
        Selection.Collapse Direction:=wdCollapseStart
    End If
    
    GoTo NextItem
End If

'We have a valid field code, strip off the leading and trailing marks: (% and %)
k = Len(FC$)
tmp$ = Mid(FC$, 3, k - 4)

'Check to see if it is ME
If UCase(tmp$) = "(-ME-) ITEM" Then
    s$ = c.Request("[ClarifyItemNames(FALSE)]")
    Req$ = "[GetPreference(Me,|fffd|)]"
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    s$ = c.Request("[ClarifyItemNames(True)]")
    If DDErr = 126 Then
        Value$ = ""
    ElseIf DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    'On Error GoTo -1: On Error GoTo Done
    
    If Value$ <> "" Then
        'parse out name
        y = InStr(Value$, "|fffd|")
        tmp$ = Trim(Mid(Value, y + 1))
        Req$ = "[GetReverseName(" + q$ + dq$(tmp$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    CmcCreateLetter1.InsertText (Value$)
    GoTo FindAnother:
End If


'Check to see if this is an indirect field: it is if it contains a %
i = InStr(tmp$, "%%")
If i = 0 Then       'We have a direct field

    Req$ = "[ViewField(" + IC$ + "," + q$ + tmp$ + q$ + ")]"
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    'Handle the case of the name field
    If Len(Value$) > NameSize And tmp$ = namefld$ Then
        'Get the name without the clarify data
        Value$ = RTrim(Mid(Value$, nStart, NameSize))
    Else
        Value$ = RTrim(Value$)
    End If
'Now check to see if this is the name field, if it is we will switch first and last names
    If ((tmp$ = namefld$) Or (tmp$ = UCase(namefld$)) Or (tmp$ = LCase(namefld$))) Then
        Req$ = "[ViewReverseName(" + q$ + dq$(Value$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    CmcCreateLetter1.InsertText (Value$)
        
Else    'This is an indirect field, parse it to get the values we neeed
    Conn$ = Left$(tmp$, i - 1)
    Rest$ = Mid(tmp$, i + 2)
    i = InStr(Rest$, "%%")
    cat$ = Left$(Rest$, i - 1)
    Field_$ = Mid(Rest$, i + 2)
    Req$ = "[ViewConnectedCount(" + IC$ + "," + q$ + Conn$ + q$ + "," + q$ + cat$ + q$ + ")]"
    CmcCreateLetter1.GetData_ c, Req$, CCount$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    If CCount$ = "??BAD DDE??" Then
        Value$ = "??BAD DDE??"
        GoTo DDEerror
    End If
    Icount = Val(CCount$)
    'Check for zero connected items
    If Icount = 0 Then
        Value$ = ""
        CmcCreateLetter1.InsertText (Value$)
    Else
    'Loop through connected items
    ''Get the name of the name field for the connected category
    'Get the name of the name field for the connected category
    Cnamefld$ = CmcCreateLetter1.GetConnectedNamefield(c, cat$)

    For Iloop = 1 To Icount
    'Build the DDE command
    Req$ = "[ViewConnectedItem(" + IC$ + "," + q$ + Conn$ + q$ + "," + q$ + cat$ + q$ + "," + str(Iloop) + ")]"
    CmcCreateLetter1.GetData_ c, Req$, Cname$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    If Cname$ = "??BAD DDE??" Then
        Value$ = "??BAD DDE??"
        GoTo DDEerror
    End If

    'Check to see if we are looking for the name, if so we already have it
    If Field_$ = Cnamefld$ Then
        If Len(Cname$) > NameSize Then
            'Get the name without the clarify data
            PlainCName$ = RTrim(Mid(Cname$, 1, NameSize))
        Else
            PlainCName$ = RTrim(Cname$)
        End If
          
        Req$ = "[ViewReverseName( " + q$ + dq$(PlainCName$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    Else
            Req$ = "[GetField(" + q$ + cat$ + q$ + "," + q$ + dq$(Cname$) + q$ + "," + q$ + Field_$ + q$ + ")]"
            CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
            If DDEerr <> 0 Then
                Err.Number = DDEerr
                GoTo Done
            End If
            On Error GoTo -1: On Error GoTo Done
    End If
    If Iloop = 1 Then
        CmcCreateLetter1.InsertText (Value$)
    Else
        CmcCreateLetter1.AddText (Value$)
    End If

Next Iloop
End If  'End of Icount = 0 case
GoTo FindAnother
DDEerror:           'Come here if the connection is invalid
    CmcCreateLetter1.InsertText (Value$)
    GoTo FindAnother
Insert2:
        CmcCreateLetter1.InsertText (Value$)
End If

'Go back and look for more field codes
GoTo FindAnother

NextItem:
Next nLoop

LetterEnd:

'Check if have empty cells at end

ClearOutCells:
'If InStr(1, Selection.Text, "%", vbTextCompare) > 1 Then
If InStr(1, FC, "%", vbTextCompare) > 1 Then 'There are cells left at the end
    cnum = Selection.Rows(1).Cells.count
    'rnum = (rnum \ 2) + 1
    rnum = Selection.Columns(1).Cells.count

    Call CmcCreateLetter1.FindString
    If InStr(1, Selection.Text, "%", vbTextCompare) > 1 Then
    currentcolumn = Selection.Cells(1).ColumnIndex
    currentrow = Selection.Cells(1).RowIndex
    
    'Clear out current row first
    For j = currentcolumn To cnum
        MyTable.Cell(Row:=currentrow, Column:=j).Select
        Selection.Cut
    Next j

    
    For i = currentrow + 1 To rnum
        For j = 1 To cnum
            MyTable.Cell(Row:=i, Column:=j).Select
            Selection.Cut
        Next j
    Next i
    End If
Else
    'Do nothing?
End If

PrintOut:
        itemNames = Left(itemNames, Len(itemNames) - 1)
        If CommenceLog.autoLogToCommence(nRows:=itemcount, Dest:=1, LinkFileName:=LinkFileName, itemNames:=itemNames, templateName:=templateName, templateCategory:=templateCategory) = True Then
        End If

If Dest = 1 Then _
   ActiveDocument.PrintOut Background:=True
If LinkFileName <> "" Then
    ActiveDocument.Saved = True
    ActiveDocument.Close SaveChanges:=wdSaveChanges
Else
    ActiveDocument.Saved = True
    ActiveDocument.Close SaveChanges:=False
End If

'Go back an get the next item from the view

'All done, go the the normal exit
GoTo Normalx

NoTable:
MsgBox Prompt:="Label Templates must have the field codes in a table.  This template does not have a table.  Please select another letter template", buttons:=vbCritical
ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
GoTo Normalx

Done:
StatusBar = ErrorMsg$ + str(Err.Number) + Err.Description
a = MsgBox(ExitMsg$ + str(Err.Number) + Chr(10) + Err.Description, vbCritical, "Commence Letter Macro")

ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
Err.Number = 0
'Just stop processing letters at this point: there is an error in the template

Normalx:
Set c = Nothing
Set CmcObj = Nothing
Options.ReplaceSelection = rselection
ActiveWindow.VIEW.ShowAll = CurrentShowAll
'Set it to back to the users view
    If ActiveWindow.VIEW.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.VIEW.Type = CurrentView
    Else
        ActiveWindow.VIEW.Type = CurrentView
    End If



Bye:
' This causes the hourglass cursor to be turned into a normal pointer.
Tasks(AppName$).Visible = True

End Sub
Attribute VB_Name = "CmcMultipleLetters1"
Public AppName$
Public CmcObject$
Public cr$
Public crlf$


Public Sub Main(LetterFile$, LinkFileName As String)
Attribute Main.VB_Description = "Print letters to all the items in the current view in Commence"
Attribute Main.VB_ProcData.VB_Invoke_Func = "TemplateProject.JJMultipleLetters.MAIN"
Dim ErrorMsg$
Dim ExitMsg$
Dim q$
Dim cr$
Dim Line1$
Dim Lines2$
'Dim LetterFile$
Dim c
Dim version$
Dim NameSize
Dim b
Dim nState
Dim s$
Dim nStart
Dim nEnd
Dim VIEW$
Dim Req$
Dim tmp$
Dim itemcount As Integer
Dim namefld$
Dim nLoop
Dim IC$
Dim Value$
Dim Cname$
Dim FC$
Dim i
Dim O
Dim k
Dim DDEerr
Dim Conn$
Dim Rest$
Dim cat$
Dim Field_$
Dim CCount$
Dim Icount
Dim Cnamefld$
Dim Iloop
Dim PlainCName$
Dim rselection
Dim useActiveItem As Boolean
Dim category$
Dim SearchedHeader As Boolean
Dim SearchedFooter As Boolean
Dim SearchedMain As Boolean
Dim ContinueRunning As Integer
Dim AskedNext As Boolean

'Copyright 1992-2001 Commence Corp.
'Commence letter template expansion macro
'This version will print letters to all the items in the current letter view

' Revisions for 1.00a (10/92)"
'  Prints values from all connected items (this was distributed to some users prior  to 1.00a)
'  Support for clarify fields so we can deal with items with clarified but identical names
'  Gets the actual name fields (don't assume they are always called "Name")

'Revisions for 1.1
' 2/11/93)
' Add dq function to handle values with embedded quotes
' Separate DDE GetData calls out to a subroutine to simplify code
' Fix GetActiveView bug
' Fix truncation of non-name fields bug

' Revisions for 3.0 (4/4/95)
' Support for 50 character item names, Commence 1.0a or later required

' Init some strings
ErrorMsg$ = "The error code is: "
ExitMsg$ = " CmcMultipleLetters macro exiting.  Macro error number: "

q$ = Chr(34)
cr$ = Chr(13)
crlf$ = Chr(13) + Chr(10)
Line1$ = Chr(13)
Lines2$ = Line1$ + Line1$
NameSize = 50

'get what the replace selection is set to then set it to true
rselection = Options.ReplaceSelection
Options.ReplaceSelection = True

CmcObject$ = "Commence.DB"
AppName$ = "Commence"
AskedNext = False

'LetterFile$ = ActiveDocument.AttachedTemplate.FullName
'Find out what version of Commence is running
On Error GoTo -1: On Error GoTo Done
If Not CmcCreateLetter1.GetVersion(CmcObject, AppName) Then GoTo Normalx

'Start up a GetData DDE link to Commence
Set CmcObj = CreateObject(CmcObject$)
Set c = CmcObj.GetConversation(AppName$, "GetData")

On Error GoTo -1: On Error GoTo Done

Call CmcCreateLetter1.GetCategoryandPlainName(c, category$, Name_$, PlainName$, VIEW$, useActiveItem, False)


' Ask Commence what is currently highlighted
nState = 1

'Now find out how many items are in the view
'Turn on Clarify Info
s$ = c.Request("[ClarifyItemNames(True)]")

Req$ = "[ViewCategory(" + q$ + category$ + q$ + ")]"

tmp$ = c.Request(Req$)
Req$ = "[ViewView(" + q$ + VIEW$ + q$ + ")]"
tmp$ = c.Request(Req$)
tmp$ = c.Request("[ViewItemCount]")
itemcount = Val(tmp$)

'Get the name of the name field
namefld$ = CmcCreateLetter1.GetNameField(c, category$)
Dim itemNames As String
itemNames = ""
'Start main loop
For nLoop = 1 To itemcount
IC$ = str(nLoop)
If nLoop <> 1 Then Documents.Add Template:=LetterFile$
    's$ = c.Request("[ClarifyItemNames(False)]")
    'itemNames = itemNames + c.Request("[Viewfield(" + IC$ + ",""" + namefld$ + """)]") + "|fffd|"
    itemNames = itemNames + c.Request("[ViewItemName(" + IC$ + ")]") + "|fffd|"
    If nLoop = itemcount Then
        itemNames = Left(itemNames, Len(itemNames) - 1)
        If CommenceLog.autoLogToCommence(nRows:=itemcount, Dest:=1, LinkFileName:=LinkFileName, itemNames:=itemNames, templateName:=templateName, templateCategory:=templateCategory) = True Then
        End If
    End If

'Start looking for Fields to retrieve
Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1

SearchedHeader = False
SearchedFooter = False
SearchedMain = False

Search:     'Return here to look for the next field

If SearchedHeader = False Then
    If ActiveWindow.ActivePane.VIEW.Type = wdNormalView Or ActiveWindow. _
        ActivePane.VIEW.Type = wdOutlineView Then
        If wdPrintView = Empty Then
            ActiveWindow.ActivePane.VIEW.Type = wdPageView
        Else
            ActiveWindow.ActivePane.VIEW.Type = wdPrintView
        End If
    End If
    ActiveWindow.ActivePane.VIEW.SeekView = wdSeekCurrentPageHeader
    SearchedHeader = True
ElseIf SearchedFooter = False Then
    If ActiveWindow.ActivePane.VIEW.Type = wdNormalView Or ActiveWindow. _
        ActivePane.VIEW.Type = wdOutlineView Then
        If wdPrintView = Empty Then
            ActiveWindow.ActivePane.VIEW.Type = wdPageView
        Else
            ActiveWindow.ActivePane.VIEW.Type = wdPrintView
        End If
    End If
    ActiveWindow.ActivePane.VIEW.SeekView = wdSeekCurrentPageFooter
    SearchedFooter = True
ElseIf SearchedMain = False Then
    ActiveWindow.ActivePane.VIEW.SeekView = wdSeekMainDocument
    SearchedMain = True
End If

FindAnother:
Value$ = ""
Req$ = ""
Cname$ = ""

Call CmcCreateLetter1.FindString

'Now we have a field code, save it in a variable
If (InStr(1, Selection.Text, "%") < 1) And (SearchedFooter = False) Then GoTo Search
If (InStr(1, Selection.Text, "%") < 1) And (SearchedMain = False) Then GoTo Search
If (InStr(1, Selection.Text, "%") < 1) And (SearchedHeader = True) And (SearchedFooter = True) And (SearchedMain = True) Then GoTo LetterEnd
FC$ = Selection.Text

'We have a valid field code, strip off the leading and trailing marks: (% and %)
k = Len(FC$)
tmp$ = Mid(FC$, 3, k - 4)

'Check to see if this is a label template
If UCase(FC) = "(%(-NEXT-)%)" And AskedNext = False Then
    ContinueRunning = MsgBox(Prompt:="This template is for creating labels.  Please make sure you have selected the correct application prior to creating your letter.  Would you like to continue?", buttons:=vbYesNo)
    AskedNext = True
    If ContinueRunning = 7 Then
       ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
       GoTo Normalx
    End If
End If

'Check to see if it is ME
If UCase(tmp$) = "(-ME-) ITEM" Then
    s$ = c.Request("[ClarifyItemNames(FALSE)]")
    Req$ = "[GetPreference(Me,|fffd|)]"
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    s$ = c.Request("[ClarifyItemNames(True)]")
    If DDErr = 126 Then
        Value$ = ""
    ElseIf DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    'On Error GoTo -1: On Error GoTo Done
    
    If Value$ <> "" Then
        'parse out name
        y = InStr(Value$, "|fffd|")
        tmp$ = Trim(Mid(Value, y + 1))
        Req$ = "[GetReverseName(" + q$ + dq$(tmp$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    CmcCreateLetter1.InsertText (Value$)
    GoTo FindAnother:
End If


'Check to see if this is an indirect field: it is if it contains a %
i = InStr(tmp$, "%%")
If i = 0 Then       'We have a direct field

    Req$ = "[ViewField(" + IC$ + "," + q$ + tmp$ + q$ + ")]"
    CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    'Handle the case of the name field
    If Len(Value$) > NameSize And tmp$ = namefld$ Then
        'Get the name without the clarify data
        Value$ = RTrim(Mid(Value$, nStart, NameSize))
    Else
        Value$ = RTrim(Value$)
    End If
'Now check to see if this is the name field, if it is we will switch first and last names
    If ((tmp$ = namefld$) Or (tmp$ = UCase(namefld$)) Or (tmp$ = LCase(namefld$))) Then
        Req$ = "[ViewReverseName(" + q$ + dq$(Value$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    CmcCreateLetter1.InsertText (Value$)
        
Else    'This is an indirect field, parse it to get the values we neeed
    Conn$ = Left$(tmp$, i - 1)
    Rest$ = Mid(tmp$, i + 2)
    i = InStr(Rest$, "%%")
    cat$ = Left$(Rest$, i - 1)
    Field_$ = Mid(Rest$, i + 2)
    Req$ = "[ViewConnectedCount(" + IC$ + "," + q$ + Conn$ + q$ + "," + q$ + cat$ + q$ + ")]"
    CmcCreateLetter1.GetData_ c, Req$, CCount$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    If CCount$ = "??BAD DDE??" Then
        Value$ = "??BAD DDE??"
        GoTo DDEerror
    End If
    Icount = Val(CCount$)
    'Check for zero connected items
    If Icount = 0 Then
        Value$ = ""
        CmcCreateLetter1.InsertText (Value$)
    Else
    'Loop through connected items
    ''Get the name of the name field for the connected category
    'Get the name of the name field for the connected category
    Cnamefld$ = CmcCreateLetter1.GetConnectedNamefield(c, cat$)

    For Iloop = 1 To Icount
    'Build the DDE command
    Req$ = "[ViewConnectedItem(" + IC$ + "," + q$ + Conn$ + q$ + "," + q$ + cat$ + q$ + "," + str(Iloop) + ")]"
    CmcCreateLetter1.GetData_ c, Req$, Cname$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    If Cname$ = "??BAD DDE??" Then
        Value$ = "??BAD DDE??"
        GoTo DDEerror
    End If

    'Check to see if we are looking for the name, if so we already have it
    If Field_$ = Cnamefld$ Then
        If Len(Cname$) > NameSize Then
            'Get the name without the clarify data
            PlainCName$ = RTrim(Mid(Cname$, 1, NameSize))
        Else
            PlainCName$ = RTrim(Cname$)
        End If
          
        Req$ = "[ViewReverseName( " + q$ + dq$(PlainCName$) + q$ + ")]"
        CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    Else
            Req$ = "[GetField(" + q$ + cat$ + q$ + "," + q$ + dq$(Cname$) + q$ + "," + q$ + Field_$ + q$ + ")]"
            CmcCreateLetter1.GetData_ c, Req$, Value$, DDEerr
            If DDEerr <> 0 Then
                Err.Number = DDEerr
                GoTo Done
            End If
            On Error GoTo -1: On Error GoTo Done
    End If
    If Iloop = 1 Then
        CmcCreateLetter1.InsertText (Value$)
    Else
        CmcCreateLetter1.AddText (Value$)
    End If
    
Next Iloop
End If  'End of Icount = 0 case
GoTo FindAnother
DDEerror:           'Come here if the connection is invalid
    CmcCreateLetter1.InsertText (Value$)
    GoTo FindAnother
Insert2:
        CmcCreateLetter1.InsertText (Value$)
End If

'Go back and look for more field codes
GoTo FindAnother

LetterEnd:
If Dest = 1 Then _
   ActiveDocument.PrintOut Background:=True
ActiveDocument.Saved = True
ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges

'Go back an get the next item from the view
Next nLoop
'All done, go the the normal exit
GoTo Normalx

Done:
StatusBar = ErrorMsg$ + str(Err.Number) + Err.Description
a = MsgBox(ExitMsg$ + str(Err.Number) + Chr(10) + Err.Description, vbCritical, "Commence Letter Macro")

ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
Err.Number = 0
'Just stop processing letters at this point: there is an error in the template

Normalx:
Set c = Nothing
Set CmcObj = Nothing
Options.ReplaceSelection = rselection

' This causes the hourglass cursor to be turned into a normal pointer.
Tasks(AppName$).Visible = True

End Sub
Attribute VB_Name = "Commence"
Option Explicit

Public gLetterObj As Letters.MergeDB
Public FieldArray() As String
Public FieldArraySize
Public ViewArray
Public ViewArraySize
Public CatArray
Public CatArraySize
Public ConnFieldArray
Public ConnFieldArraySize As Integer
Public ImageArray() As String
Public ImageArraySize As Integer
Public RelatedConnName As String
Public RelatedCatName As String
Public Dest As Integer
Public FromWord As Boolean
Public toolbarCategory As String
Public Continue As Boolean
Public Preview As Integer
Public itemName As String
Public docType As Integer
Public LinkFileName As String
Public templateName As String
Public TemplateFileName As String
Dim X As New Class1
Public APForm As String
Public APMerge As Boolean
Public isRelatedField As Boolean
Public recipientField As String
Public bIsEmbedObj As Boolean

Sub AutoExec()
'
' Executes when start Word
'
Set X.App = Word.Application
Set gLetterObj = New Letters.MergeDB

On Error GoTo aproblem

    FieldArraySize = 0
    CatArraySize = 0
    ViewArraySize = 0
    Call mnuAddCommenceMenu
  
    'ActiveDocument.Saved = True
    GoTo Normalx
  
aproblem:
  If Err.Number <> 0 Then
    Dim errMsg As String
    errMsg = "An error has occured in the Commence macros (AutoExec): " + _
            str(Err.Number) + ":  " + Err.Description
    ReportError errMsg, , "Commence.AutoExec()"
  End If
  
Normalx:
  
Set gLetterObj = Nothing
End Sub


Sub Main()
    
    'dest = destination
    '       0 - view
    '       1 - print
    '       2 - fax
    '       3 - email
    '       4 - draft
    '
    'lettype = type of letter
    '       0 - single
    '       1 - merge
    '
    'preview = if print or view
    '       0 - no preview
    '       1 - preview
    '
    'docType
    '   0 - regular letter
    '   1 - Label
    '   2 - Envelope

    Dim lettype As Integer
    Dim TemplateFileName As String
    Dim nRows As Integer
    Dim shpe As Shape
    Dim fld As Field
    Dim sect As Section
    Dim hdr As HeaderFooter
    Dim ftr As HeaderFooter

    Dim FaxNumberFld As String
    Dim FaxNum As String
    Dim EmailAddressFld As String, EmailAddress As String
    Dim ProtectType
    Dim sDest, snRows
    Dim nImage As Integer
    Dim nMImage As Integer
    Dim nRImage As Integer
    Dim i, sdocType
    Dim nView As Integer
    Dim tmp As String
    Dim bUpdateLinksAtOpen
    Dim sOfficeBit As String
    
    
    bUpdateLinksAtOpen = Options.UpdateLinksAtOpen
    Options.UpdateLinksAtOpen = False
    
    bIsEmbedObj = False
    
    Set gLetterObj = New Letters.MergeDB
    
    ImageArraySize = 0
    Dim FSO As Object
    Set FSO = CreateObject("Scripting.FileSystemObject")
    
    If Continue Then
        tmp = ActiveDocument.Name
        sDest = Util.GetDocumentProperties("Dest")
        Dest = Val(sDest)
        snRows = Util.GetDocumentProperties("nRows")
        nRows = Val(snRows)
        LinkFileName = Util.GetDocumentProperties("LinkFileName")
        
        'Makarand Office64
        'Dose not support for 64 bit office
        If Dest = 2 Then
            sOfficeBit = GetCommenceSettingPref("OfficeBitness")
            If sOfficeBit = "x64" Then
                MsgBox "Mail merges with fax destination are not supported in Office 64 bit integration.", vbOKOnly, "Commence"
                GoTo Done
            End If
        End If
    
        'If APMerge Or nRows > 1 Then
        '    lettype = 1
        'Else
        '    lettype = 0
        'End If
        'Always merge
        lettype = 1
        
        sdocType = Util.GetDocumentProperties("Type")
        docType = Val(sdocType)
        If sDest = "" Or snRows = "" Or sdocType = "" Then  'not the right type
            ReportError "The current document is no longer in the proper format and the Commence Merge cannot continue.", , _
                        "Commence.main()"
            GoTo Done
        End If
        If docType > 0 Or lettype = 1 Then     'it is a merge have to make sure it is still a merge
            If ActiveDocument.MailMerge.State <> wdMainAndDataSource Then
                'MsgBox "The current document is no longer a merge document and the Commence Merge cannot continue.", vbOKOnly, "Commence"
                ReportError "The current document is no longer a merge document and the Commence Merge cannot continue."
                GoTo Done
            End If
            Preview = 0
            createMultipleLetter Dest, nRows, LinkFileName
            GoTo Done
        Else
            Preview = 0
            GoTo ContinueHere
        End If
    End If
    Cancelled = False
    If Util.GetLetterInformation(iName:=itemName, tName:=templateName, tfName:=TemplateFileName, lDest:=Dest, pView:=Preview, itemcount:=nRows, LinkFileName:=LinkFileName, tCat:=templateCategory) > 0 Then
        GoTo aproblem
    End If
    'Makarand Office64
    'Dose not support for 64 bit office
    If Dest = 2 Then
        sOfficeBit = GetCommenceSettingPref("OfficeBitness")
        If sOfficeBit = "x64" Then
            MsgBox "Mail merges with fax destination are not supported in Office 64 bit integration.", vbOKOnly, "Commence"
            GoTo Done
        End If
    End If
    If UCase(FSO.GetExtensionName(LinkFileName)) = "dot" Then
        LinkFileName = Util.CmcReplace(LinkFileName, ".dot", ".doc")
    End If
    Set FSO = Nothing
    
    Documents.Add Template:=TemplateFileName
    
    tmp = ActiveDocument.Name

    'check if old
    If Util.GetDocumentProperties("Category") = "" And (Util.GetDocumentProperties("Type") = "" Or Util.GetDocumentProperties("Type") = "-1") Then 'old version
        With Selection.Find
            .Forward = True
            .MatchWholeWord = False
            .MatchWildcards = True
            .MatchCase = False
            .Wrap = wdFindStop
            '.Text = "(%(-Next-)%)"
            .Execute findtext:="\(%\(\-Next\-\)%\)"
        End With
        If UCase(Selection.Text) = "(%(-NEXT-)%)" Then 'it is an old label template
            Selection.HomeKey Unit:=wdStory
            Select Case Dest
                Case 1, 4     'print or draft
                    If nRows = 1 Then   'single
                        If Preview = 0 Then
                            Call CmcCreateLabel1.Main(1, LinkFileName)
                        Else
                            Call CmcCreateLabel1.Main(0, LinkFileName)
                        End If
                    Else
                        Call CmcMultipleLabels1.Main(LinkFileName)
                    End If
                Case 2, 3      'fax, email
                    'i = MsgBox("You can only print labels or envelopes.  They cannot be Emailed or faxed.  Would you like to print instead?  If you select No, the letter merge will be cancelled.", vbYesNo)
                    i = ReportError("You can only print labels or envelopes.  They cannot be Emailed or faxed.", _
                        "Would you like to print instead?  If you select No, the letter merge will be cancelled.", _
                        "Commence.main()", vbYesNo)
                    If i = vbYes Then
                        Dest = 1
                    Else
                        ActiveDocument.Saved = True
                        ActiveDocument.Close SaveChanges:=False
                        GoTo Done
                    End If
            End Select
            GoTo Done
        End If
        Select Case Dest
            Case 1, 4     'print or draft
                If nRows = 1 Then   'single
                    If Preview = 0 Then
                        Call CmcCreateLetter1.Main(1, LinkFileName, Dest)
                    Else
                        Call CmcCreateLetter1.Main(0, LinkFileName, Dest)
                    End If
                Else
                    Call CmcMultipleLetters1.Main(TemplateFileName, LinkFileName)
                End If
            Case 2      'fax
                If nRows = 1 Then 'single
                    If Preview = 0 Then
                        Call CmcCreateFax1.Main(1, LinkFileName)
                    Else
                        Call CmcCreateFax1.Main(0, LinkFileName)
                    End If
                Else
                    Call CmcMultipleFax1.Main(TemplateFileName, LinkFileName)
                End If
            Case 3      'email
                If nRows = 1 Then   'single
                    If Preview = 0 Then
                        Call CmcCreateEmail1.Main(1, LinkFileName)
                    Else
                        Call CmcCreateEmail1.Main(0, LinkFileName)
                    End If
                Else    'multiple
                    Call CmcMultipleEmail1.Main(TemplateFileName, LinkFileName)
                End If
        End Select
        GoTo Done
    End If
    

    If ActiveDocument.BuiltInDocumentProperties(wdPropertySubject) = "" Then
        ActiveDocument.BuiltInDocumentProperties(wdPropertySubject) = templateName
    End If

    nImage = Val(Util.GetDocumentProperties("NumImage"))
    nMImage = Val(Util.GetDocumentProperties("NumMeImage"))
    nRImage = Val(Util.GetDocumentProperties("NumRelatedImage"))
    nView = Val(Util.GetDocumentProperties("NumViews"))
    
    docType = Val(Util.GetDocumentProperties("Type"))

    
    '<WhiteHedge - Priti - [R31-5659]>
    If nImage > 0 Or nMImage > 0 Or nRImage > 0 Or nView > 0 Then
        bIsEmbedObj = True
    End If
    
    Dim iTotalFields As Integer
    iTotalFields = ActiveDocument.Fields.count
    ''''''''''''''''''''''''''''
    
    If iTotalFields > 62 And bIsEmbedObj Then
        i = ReportError("This template contains images and embedded views which only allow for 62 Commence fields.", _
        "Either remove the images and embedded views or reduce the number of fields in the template.", _
        "Commence.main()", vbOKOnly)
    End If
    
    'If APMerge Or nRows > 1 Then
    '    lettype = 1
    'Else
    '    lettype = 0
    'End If

    'Always merge
    lettype = 1
    
    'Right now, can't do a single label, but may be able to later???
    'If docType = 1 And lettype = 0 Then
    'End If
    
    'Cannot fax/email a label
    'If docType > 0 And dest > 1 Then
    If docType > 0 And (Dest = 2 Or Dest = 3) Then
        'i = MsgBox("You can only print labels or envelopes.  They cannot be Emailed or faxed.  Would you like to print instead?  If you select No, the letter merge will be cancelled.", vbYesNo)
        i = ReportError("You can only print labels or envelopes.  They cannot be Emailed or faxed.", _
            "Would you like to print instead?  If you select No, the letter merge will be cancelled.", _
            "Commence.main()", vbYesNo)
        If i = vbYes Then
            Dest = 1
        Else
            ActiveDocument.Saved = True
            ActiveDocument.Close SaveChanges:=False
            GoTo Done
        End If
    End If
    
    'if labels/envelopes, have to do it as a merge
    If Val(docType) > 0 Then
        lettype = 1
    End If
    
    On Error GoTo aproblem
  
    FieldArraySize = 0
    
    
    'check if have valid email or fax number
    'If dest > 1 And lettype = 0 Then
    'If (Dest = 2 Or Dest = 3) And lettype = 0 Then
    If (Dest = 2 Or Dest = 3) And nRows = 1 Then
        If Dest = 2 Then    'check fax number
Prefs:
            FaxNumberFld = Util.GetCommenceLettersPref("FaxNumber")
            If FaxNumberFld = "" Then   'problem because it is not set
                'i = MsgBox("The field to use for the faxnumber has not been set in the preferences. Do you wish to set it now?  If you select No, the document will close.", vbYesNo)
                i = ReportError("The field to use for the faxnumber has not been set in the preferences.", _
                    "Do you wish to set it now?  If you select No, the document will close.", _
                    "Commence.main()", vbYesNo)

                If i = vbYes Then
                    With frmPrefs
                        '.txtDefaultEmail.SetFocus
                        .cbxDefaultEmail.SetFocus
                        .Show
                    End With
                    GoTo Prefs
                Else
                    ActiveDocument.Saved = True
                    ActiveDocument.Close SaveChanges:=False
                    GoTo Done
                End If
            End If
            If Util.GetCommenceInfo(ddeTopic:="MergeItem", ddeRequest:="[GetField(,,""" + FaxNumberFld + """)]", retValue:=FaxNum) > 0 Then
                'MsgBox "There is an error getting the the field " + FaxNumberFld + " for the selected category.  Please check that it is a valid field name in the selected category.", vbOKOnly, "Commence"
                ReportError "There is an error getting the the field " + FaxNumberFld + _
                    " for the selected category.  Please check that it is a valid field name in the selected category.", , _
                    "Commence.main()"
                ActiveDocument.Saved = True
                ActiveDocument.Close SaveChanges:=False
                GoTo Done
            Else
                'save the info
                Util.SetDocumentProperties "FaxNum", FaxNum
                Util.SetDocumentProperties "FaxField", FaxNumberFld
            End If
            If FaxNum = "" Then
                'MsgBox "The selected item does not have a fax number for the field " + FaxNumberFld + ".  Please enter a value and try again.", vbOKOnly, "Commence"
                ReportError "The selected item does not have a fax number for the field " + _
                    FaxNumberFld + ".  Please enter a value and try again.", , "Commence.main()"
                ActiveDocument.Saved = True
                ActiveDocument.Close SaveChanges:=False
                GoTo Done
            End If
            Dim num As Integer, f As String
            If Util.GetFields(templateCategory, num, f, False, False) > 0 Then
                'error
            Else
                f = Trim(Left(f, InStr(1, f, "|fffd|") - 1))
                Dim namefld As String
                If Util.GetCommenceInfo(ddeTopic:="MergeItem", ddeRequest:="[GetField(,,""" + f + """)]", retValue:=namefld) > 0 Then
                End If
                Util.SetDocumentProperties "Namefld", namefld
            End If
        ElseIf Dest = 3 Then 'check email
Prefs2:
            EmailAddressFld = Util.GetCommenceLettersPref("EmailAddress")
            If EmailAddressFld = "" Then   'problem because it is not set
                i = MsgBox("The field to use for the Email Address has not been set in the preferences.  Do you wish to set it now?  If you select No, the document will close.", vbYesNo)
                    If i = vbYes Then
                        With frmPrefs
                            '.txtDefaultEmail.SetFocus
                            .cbxDefaultEmail.SetFocus
                            .Show
                        End With
                        GoTo Prefs2
                    Else
                        ActiveDocument.Saved = True
                        ActiveDocument.Close SaveChanges:=False
                        GoTo Done
                    End If
            End If
            If Util.GetCommenceInfo(ddeTopic:="MergeItem", ddeRequest:="[GetField(,,""" + EmailAddressFld + """)]", retValue:=EmailAddress) > 0 Then
                MsgBox "There is an error getting the the field " + EmailAddressFld + " for the selected category.  Please check that it is a valid field name in the selected category.", vbOKOnly, "Commence"
                ActiveDocument.Saved = True
                ActiveDocument.Close SaveChanges:=False
                GoTo Done
            Else
                'save the info
                Util.SetDocumentProperties "EmailAddress", EmailAddress
                Util.SetDocumentProperties "EmailAddressFld", EmailAddressFld
            End If
            If EmailAddress = "" Then
                MsgBox "The selected item does not have an email address for the field " + EmailAddressFld + ".  Please enter a value and try again.", vbOKOnly, "Commence"
                ActiveDocument.Saved = True
                ActiveDocument.Close SaveChanges:=False
                GoTo Done
            End If
        End If
    End If
    
    
    If docType > 0 Then
        If ActiveDocument.MailMerge.State > 1 Then 'then is a mailmerge
            ActiveDocument.MailMerge.MainDocumentType = wdMainDocumentOnly
        End If
    End If

    ActiveDocument.AttachedTemplate.Saved = True
    ActiveDocument.AttachedTemplate = ""
      
    ' check if protected
    ProtectType = ActiveDocument.ProtectionType
    If ProtectType <> wdNoProtection Then
        ActiveDocument.Unprotect
    End If
    
    'clear the password if set
    ActiveDocument.WritePassword = vbNullString
  
    Application.ScreenUpdating = False
    If lettype = 0 Then         'single letter
        For Each shpe In ActiveDocument.Shapes
            shpe.Select
            For Each fld In Selection.Range.Fields
                'fld.Update
                If nImage > 0 Or nMImage > 0 Or nRImage > 0 Or nView > 0 Then
                    Call createCreateOtherField(fld)
                End If
                Call createUnlinkAutoField(fld)
            Next fld
        Next shpe
    
        For Each sect In ActiveDocument.Sections
            For Each fld In sect.Range.Fields
                'fld.Update
                If nImage > 0 Or nMImage > 0 Or nRImage > 0 Or nView > 0 Then
                    Call createCreateOtherField(fld)
                End If
                Call createUnlinkAutoField(fld)
            Next fld
       
            For Each hdr In sect.Headers
                If hdr.Exists Then
                    For Each fld In hdr.Range.Fields
                        'fld.Update
                        If nImage > 0 Or nMImage > 0 Or nRImage > 0 Or nView > 0 Then
                            Call createCreateOtherField(fld)
                        End If
                        Call createUnlinkAutoField(fld)
                    Next fld
                End If
            Next hdr
            For Each ftr In sect.Footers
                If ftr.Exists Then
                    For Each fld In ftr.Range.Fields
                        'fld.Update
                        If nImage > 0 Or nMImage > 0 Or nRImage > 0 Or nView > 0 Then
                            Call createCreateOtherField(fld)
                        End If
                        Call createUnlinkAutoField(fld)
                    Next fld
                End If
            Next ftr
        Next sect
        
        Application.ScreenRefresh
        
        'Re-Protect the document
        If ProtectType <> -1 Then
            ActiveDocument.Protect Type:=ProtectType
        End If
    
    Else            'multiple letter
        Commence.createMultipleLetter Dest, nRows, LinkFileName
    End If 'lettype = 0
    
    
        
ContinueHere:
    Application.ScreenRefresh
    Application.ScreenUpdating = True
    If (Dest = 1 Or Dest = 4) And lettype = 0 Then
        If (Not (Dest = 4 And Preview = 0)) Then _
           prnPrintSingleDocument nRows, LinkFileName
           
        If Preview = 0 Then
            If CommenceLog.autoLogToCommence(nRows, Dest, LinkFileName, templateName, templateCategory) = True Then
                If LinkFileName = "" Then
                    Documents(tmp).Saved = True
                    Documents(tmp).Close SaveChanges:=False
                Else
                    Documents(LinkFileName).Activate
                    Util.DeleteDocumentProperties ("Type")
                    Util.DeleteDocumentProperties ("Category")
                    Documents(LinkFileName).Saved = True
                    Documents(LinkFileName).Close SaveChanges:=True
                End If
            Else
                Documents(tmp).Saved = True
                Documents(tmp).Close SaveChanges:=False
            End If
        Else
            Application.Activate
            'Application.Documents(ActiveDocument).Activate
            Application.WindowState = wdWindowStateMaximize
            If ActiveDocument.Bookmarks.Exists("CmcPoint") = True Then
                Selection.GoTo What:=wdGoToBookmark, Name:="CmcPoint"
            Else
                Selection.HomeKey Unit:=wdStory
            End If
            ActiveWindow.VIEW.ShowFieldCodes = False
        End If
    End If
    
    If Dest = 2 And lettype = 0 Then
        If Preview = 0 Then
        
            FaxNum = Util.GetDocumentProperties("FaxNum")
            namefld = Util.GetDocumentProperties("NameFld")
            
            prnFaxSingleDocument FaxNum, nRows, LinkFileName, namefld
            If CommenceLog.autoLogToCommence(nRows, Dest, LinkFileName, templateName, templateCategory) = True Then
                If LinkFileName = "" Then
                    Documents(tmp).Saved = True
                    Documents(tmp).Close SaveChanges:=False
                Else
                    Documents(LinkFileName).Activate
                    Util.DeleteDocumentProperties ("Type")
                    Util.DeleteDocumentProperties ("Category")
                    Documents(LinkFileName).Saved = True
                    Documents(LinkFileName).Close SaveChanges:=True
                End If
            Else
                Documents(tmp).Saved = True
                Documents(tmp).Close SaveChanges:=False
            End If
        Else
            Util.SetDocumentProperties "Dest", Trim(str(Dest))
            Util.SetDocumentProperties "nRows", Trim(str(nRows))
            If LinkFileName <> "" Then
                Util.SetDocumentProperties "LinkFileName", LinkFileName
            End If
            Util.SetDocumentProperties "FaxNum", FaxNum
            Util.SetDocumentProperties "NameFld", namefld
            Application.Activate
            'Application.Documents(ActiveDocument).Activate
            Application.WindowState = wdWindowStateMaximize
            If ActiveDocument.Bookmarks.Exists("CmcPoint") = True Then
                Selection.GoTo What:=wdGoToBookmark, Name:="CmcPoint"
            Else
                Selection.HomeKey Unit:=wdStory
            End If
            ActiveWindow.VIEW.ShowFieldCodes = False
            createCreateContinueToolBar
        End If
    End If
    
    If Dest = 3 And lettype = 0 Then
        On Error GoTo aproblem2
        prnemailSingleDocument EmailAddress
        On Error GoTo aproblem
        If CommenceLog.autoLogToCommence(nRows, Dest, LinkFileName, templateName, templateCategory, DocName:=tmp) = True Then
                If LinkFileName = "" Then
                    Documents(tmp).Saved = True
                    Documents(tmp).Close SaveChanges:=False
                Else
                    Documents(LinkFileName).Activate
                    Util.DeleteDocumentProperties ("Type")
                    Util.DeleteDocumentProperties ("Category")
                    Documents(LinkFileName).Saved = True
                    Documents(LinkFileName).Close SaveChanges:=True
                End If
        Else
            Documents(tmp).Saved = True
            Documents(tmp).Close SaveChanges:=False
        End If
        If Documents.count > 0 Then ActiveWindow.VIEW.ShowFieldCodes = False
    End If
    
    
    GoTo Done
    
aproblem2:
    Documents(tmp).Saved = True
    Documents(tmp).Close SaveChanges:=False
    GoTo Done

aproblem:
    MsgBox ("An error has occured in the Commence macros (Main): " + str(Err.Number) + ":  " + Err.Description)
  
Done:
    Set gLetterObj = Nothing
    Continue = False
    Options.UpdateLinksAtOpen = bUpdateLinksAtOpen

End Sub

Sub mnuSaveCommenceTemplate()
    'save the current position
    Dim FieldCodeState As Boolean
    Dim sdocType As String
    Dim retVal
    Dim txt1 As String
    Dim txt2 As String
    
    Set gLetterObj = New Letters.MergeDB
    sdocType = Util.GetDocumentProperties("Type")
    If sdocType = "-1" Then 'old type
        txt1 = "This letter template is from an earlier version of Commence.  If you continue with the save, the exisitng field codes will no longer work properly and you must add the field codes again using the Commence-Insert Commence Field command.  For more information on converting your existing templates, please see the Commence documentation."
        txt2 = "Select Yes to continue with the Commence Template save or No, to save it as a normal Word document."
        retVal = MsgBox(txt1 + Chr(10) + Chr(10) + txt2, vbYesNo)
        If retVal = vbNo Then
            ActiveDocument.Saved = True
            ActiveDocument.Save
            'ActiveDocument.Close
            GoTo Done
        Else
            'Util.SetDocumentProperties "Type", "0"
        End If
        
    End If
        
    
    FieldCodeState = ActiveWindow.VIEW.ShowFieldCodes

    ActiveDocument.Bookmarks.Add Name:="CmcPoint"
    
    Call CommenceTemplate.saveFromMenuCommenceTemplate

    'Go to the position
    If ActiveDocument.Bookmarks.Exists("CmcPoint") = True Then
        Selection.GoTo What:=wdGoToBookmark, Name:="CmcPoint"
    End If
    
    ActiveWindow.VIEW.ShowFieldCodes = FieldCodeState
Done:
    Set gLetterObj = Nothing
    
End Sub
Sub mnuAddLetterTemplate()

    Dim m
    
    Set gLetterObj = New Letters.MergeDB

    Cancelled = False
    
    'new
    Documents.Add

    'Check to make sure Commence is running
    If Not Util.FindCommence Then
        m = MsgBox("Commence is not currently running.  Access this function, Commence must be running.  Do you wish to start Commence?", vbYesNo, "Commence")
        If m = vbNo Then
            'abort
            Exit Sub
        Else
            'Just continue becase it will start when get the new object
        End If
    End If
    
    frmAddLetter.Show
    
    If Cancelled Then
        ActiveDocument.Saved = True
        ActiveDocument.Close SaveChanges:=False
        GoTo Done
    End If
    
    FromWord = True

    templateName = ActiveDocument.BuiltInDocumentProperties(wdPropertySubject)
    TemplateFileName = ""
    Util.SetDocumentProperties propName:="Type", propValue:="0"
    templateCategory = Util.GetDocumentProperties("Category")
    Call CommenceTemplate.Main

Done:
    Set gLetterObj = Nothing
End Sub
Sub mnuAddLabelTemplate()
            
    Dim m
    
    Set gLetterObj = New Letters.MergeDB
            
    Cancelled = False
    
    If Not Util.FindCommence Then    'check if Commence is running
        'commence is not running
        m = MsgBox("Commence is not currently running.  Access this function, Commence must be running.  Do you wish to start Commence?", vbYesNo, "Commence")
        If m = vbNo Then
            'abort
            Exit Sub
        Else
            'Just continue becase it will start when get the new object
        End If
    End If
            
    Documents.Add
            
    FromWord = True
    frmAddLetter.Caption = "Add Commence Label Template"
    frmAddLetter.btnCreateTemplate.Caption = "Create Label"
    frmAddLetter.lblTemplateName.Caption = "Label Template Name"
    frmAddLetter.Show
                    
    If Cancelled Then
        ActiveDocument.Saved = True
        ActiveDocument.Close SaveChanges:=False
        GoTo Done
    End If
   
    templateName = ActiveDocument.BuiltInDocumentProperties(wdPropertySubject)
    TemplateFileName = ""
    Util.SetDocumentProperties propName:="Type", propValue:="1"
    templateCategory = Util.GetDocumentProperties("Category")
    Call CommenceTemplate.Main

Done:
    Set gLetterObj = Nothing
End Sub
Sub mnuAddEnvelopeTemplate()
            
    Dim m
    
    Set gLetterObj = New Letters.MergeDB
    
    Cancelled = False
    
    If Not Util.FindCommence Then    'check if Commence is running
        'commence is not running
        m = MsgBox("Commence is not currently running.  Access this function, Commence must be running.  Do you wish to start Commence?", vbYesNo, "Commence")
        If m = vbNo Then
            'abort
            Exit Sub
        Else
            'Just continue becase it will start when get the new object
        End If
    End If

    Documents.Add
            
    FromWord = True
    frmAddLetter.Caption = "Add Commence Envelope Template"
    frmAddLetter.btnCreateTemplate.Caption = "Create Envelope"
    frmAddLetter.lblTemplateName.Caption = "Envelope Template Name"
    frmAddLetter.Show
                    
    If Cancelled Then
        ActiveDocument.Saved = True
        ActiveDocument.Close SaveChanges:=False
        GoTo Done
    End If
    
    templateName = ActiveDocument.BuiltInDocumentProperties(wdPropertySubject)
    TemplateFileName = ""
    Util.SetDocumentProperties propName:="Type", propValue:="2"
    templateCategory = Util.GetDocumentProperties("Category")
    Call CommenceTemplate.Main

Done:
    Set gLetterObj = Nothing
End Sub
Sub mnuInsertCommenceField()
    
    If Not VerifyDocumenttype Then Exit Sub
    
    Dim m
    Dim category As String
    
    Set gLetterObj = New Letters.MergeDB
        
    category = Util.GetDocumentProperties("Category")
    If category = "" Then   'not a template yet
        category = Util.GetCommenceLettersPref("Category")
        If category = "" Then
            'default category is not set and must be
            m = MsgBox("The default category is not set.  Please set it in the Preferences.", vbOKCancel, "Commence")
            If m = vbCancel Then
                Exit Sub
            Else
                frmPrefs.Show
                Exit Sub
            End If
        End If          'if .getcommenceletterspref
    End If
    If (FieldArraySize = 0) Or (category <> toolbarCategory) Then
        If mnuFillGetFieldsToolBar(category) Then
            toolbarCategory = category
            CommandBars(COMMENCE_FIELDS).Visible = True
        End If
    Else
        If InStr(1, CommandBars(COMMENCE_FIELDS).Controls(1).Text, "__") > 0 Then
            'nothing
        ElseIf InStr(1, CommandBars(COMMENCE_FIELDS).Controls(1).Text, "(-Me-)") Then
            'nothing
        Else
            CommandBars(COMMENCE_FIELDS).Controls(2).Clear
        End If
        CommandBars(COMMENCE_FIELDS).Visible = True
    End If

    Set gLetterObj = Nothing
End Sub

Sub mnuInsertCommenceView()

    If Not VerifyDocumenttype Then Exit Sub
    
    Dim m
    Dim bFound As Boolean
    Dim cBar As CommandBar
    
    Set gLetterObj = New Letters.MergeDB
    
    bFound = False
    For Each cBar In CommandBars
        If cBar.Name = COMMENCE_VIEWS Then
            bFound = True
            Exit For
        End If
    Next

    If bFound = False Then
        Call mnuCreateGetViewsToolBar
    End If
        
    templateCategory = Util.GetDocumentProperties("Category")
    If templateCategory = "" Then   'not a template yet
        templateCategory = Util.GetCommenceLettersPref("Category")
    End If
    If (CatArraySize = 0) Then
        If mnuFillGetCategoryToolBar() Then
            'toolbarCategory = category
            CommandBars(COMMENCE_VIEWS).Visible = True
        End If
    Else
        CommandBars(COMMENCE_VIEWS).Visible = True
    End If

    Set gLetterObj = Nothing
End Sub


Sub mnuSetCommencePreferences()
    Dim cat As String
    
    Set gLetterObj = New Letters.MergeDB
    
    cat = Util.GetCommenceLettersPref("Category")
    frmPrefs.Show
    
    'Check if the category is changed, if so, then refresh the fields toolbar
    If cat <> Util.GetCommenceLettersPref("Category") Then
        FieldArraySize = 0
    End If
    
    Set gLetterObj = Nothing
End Sub
Sub mnuLogToCommence()
    Call CommenceLog.logtoCommence
End Sub
Sub mnuAddCommenceMenu()
    Dim i
    Dim CmcMenu As CommandBarControl
    Dim CmcMenuItem As CommandBarControl
    Dim FileMenu As CommandBar
    Dim FileMenuItem As CommandBarControl
  
    On Error GoTo aproblem

    Set gLetterObj = New Letters.MergeDB

    CustomizationContext = ThisDocument
  
    'Check to see if it exists already, if so, delete it
    For i = CommandBars.ActiveMenuBar.Controls.count To 1 Step -1
        If UCase(CommandBars.ActiveMenuBar.Controls(i).Caption) = UCase("&Commence") Then
            CommandBars.ActiveMenuBar.Controls(i).Delete
        End If
    Next i

    'Create the Commence menu
    Set CmcMenu = CommandBars.ActiveMenuBar.Controls.Add(Type:=msoControlPopup, Temporary:=True)
    CmcMenu.Move Before:=CommandBars("Menu Bar").Controls.count - 2
    CmcMenu.Caption = "&Commence"
    'CmcMenu.OnAction = "FixMenu"
    
    Set CmcMenuItem = CmcMenu.CommandBar.Controls.Add(Type:=msoControlButton)
        CmcMenuItem.Caption = "Save Commence Template"
        CmcMenuItem.FaceId = 0
        CmcMenuItem.OnAction = "Commence.mnuSaveCommenceTemplate"
        CmcMenuItem.Style = msoButtonAutomatic
        CmcMenuItem.BeginGroup = False
    Set CmcMenuItem = CmcMenu.CommandBar.Controls.Add(Type:=msoControlButton)
        CmcMenuItem.Caption = "Add Letter Template"
        CmcMenuItem.FaceId = 0
        CmcMenuItem.OnAction = "Commence.mnuAddLetterTemplate"
        CmcMenuItem.Style = msoButtonAutomatic
        CmcMenuItem.BeginGroup = True
    Set CmcMenuItem = CmcMenu.CommandBar.Controls.Add(Type:=msoControlButton)
        CmcMenuItem.Caption = "Add Label Template"
        CmcMenuItem.FaceId = 0
        CmcMenuItem.OnAction = "Commence.mnuAddLabelTemplate"
        CmcMenuItem.Style = msoButtonAutomatic
        CmcMenuItem.BeginGroup = False
    Set CmcMenuItem = CmcMenu.CommandBar.Controls.Add(Type:=msoControlButton)
        CmcMenuItem.Caption = "Add Envelope Template"
        CmcMenuItem.FaceId = 0
        CmcMenuItem.OnAction = "Commence.mnuAddEnvelopeTemplate"
        CmcMenuItem.Style = msoButtonAutomatic
        CmcMenuItem.BeginGroup = False
    Set CmcMenuItem = CmcMenu.CommandBar.Controls.Add(Type:=msoControlButton)
        CmcMenuItem.Caption = "Insert Commence Field"
        CmcMenuItem.FaceId = 0
        CmcMenuItem.OnAction = "Commence.mnuInsertCommenceField"
        CmcMenuItem.Style = msoButtonAutomatic
        CmcMenuItem.BeginGroup = True
    Set CmcMenuItem = CmcMenu.CommandBar.Controls.Add(Type:=msoControlButton)
        CmcMenuItem.Caption = "Insert Commence View"
        CmcMenuItem.FaceId = 0
        CmcMenuItem.OnAction = "Commence.mnuInsertCommenceView"
        CmcMenuItem.Style = msoButtonAutomatic
        CmcMenuItem.BeginGroup = False
    Set CmcMenuItem = CmcMenu.CommandBar.Controls.Add(Type:=msoControlButton)
        CmcMenuItem.Caption = "Commence Preferences"
        CmcMenuItem.FaceId = 0
        CmcMenuItem.OnAction = "Commence.mnuSetCommencePreferences"
        CmcMenuItem.Style = msoButtonAutomatic
        CmcMenuItem.BeginGroup = True
    Set CmcMenuItem = CmcMenu.CommandBar.Controls.Add(Type:=msoControlButton)
        CmcMenuItem.Caption = "Log and Link to Commence"
        CmcMenuItem.FaceId = 0
        CmcMenuItem.OnAction = "Commence.mnuLogToCommence"
        CmcMenuItem.Style = msoButtonAutomatic
        CmcMenuItem.BeginGroup = False
  
    'Clear File menu custom menu
    For i = CommandBars("File").Controls.count To 1 Step -1
        If InStr(1, CommandBars("File").Controls(i).Caption, "Save Commence", vbTextCompare) > 0 Then
            CommandBars("File").Controls(i).Delete
        End If
    Next i

    'Clear Standard mears("Standard").Controls.count To 1 Step -1
    '    If InStr(1, CommandBars("Standard").Controls(i).TooltipText, "Save Commence", vbTextCompare) > 0 Then
    '        CommandBars("Standard").Controls(i).Delete
    '    End If
    'Next i
    
    'Add menu option onu custom menu
    'For i = CommandBn File menu to Save Commence
    Set FileMenu = CommandBars("File")
    
    Set FileMenuItem = FileMenu.Controls.Add(Type:=msoControlButton, Before:=5)
    With FileMenuItem
        .Caption = "Save Commence Template"
        .FaceId = 0
        .OnAction = "Commence.mnuSaveCommenceTemplate"
        .Style = msoButtonAutomatic
        .BeginGroup = False
    End With 'FileMenuItem
'TODO: fixup word97 support
'    Set FileMenuItem = FileMenu.Controls.item("Close")
'    With FileMenuItem
'        .OnAction = "Commence.CmcOnCloseDocument"
'    End With 'FileMenuItem
    Set FileMenuItem = Nothing
    
  
    'Add standard toolbar item to Save Commence Form
    'Set FileMenu = CommandBars("Standard")
    'Set FileMenuItem = FileMenu.Controls.Add(Type:=msoControlButton, Before:=4)
    '    FileMenuItem.TooltipText = "Save Commence Template"
    '    FileMenuItem.FaceId = 98
    '    FileMenuItem.OnAction = "Commence.mnuSaveCommenceTemplate"
        'FileMenuItem.Style = msoButtonAutomatic
        'FileMenuItem.BeginGroup = False

    Call mnuCreateGetFieldsToolBar
   
    Call mnuCreateGetViewsToolBar
  
  GoTo Done
  
 
aproblem:
    MsgBox ("An error has occured in the Commence macros (mnuAddCommenceMenu): " + str(Err.Number) + " " + Err.Description)
  
Done:
  Set gLetterObj = Nothing
    
  On Error Resume Next
  
End Sub
Sub mnuCreateGetFieldsToolBar()
'
' Create the Commence Get Fields toolbar
'
    Dim CmcMenu As CommandBar
    Dim CmcBar As CommandBarControl

    CustomizationContext = ThisDocument
  
    On Error Resume Next
    CommandBars(COMMENCE_FIELDS).Delete
    On Error GoTo 0
  
    Set CmcMenu = CommandBars.Add(Name:=COMMENCE_FIELDS, Position:=msoBarFloating, MenuBar:=False, Temporary:=True)
    CmcMenu.Visible = False
    
    Set CmcBar = CommandBars(COMMENCE_FIELDS).Controls.Add(Type:=msoControlDropdown)
        CmcBar.Width = 250
        CmcBar.Style = msoComboLabel
        CmcBar.Caption = "Insert Commence Field"
        CmcBar.OnAction = "mnuAddField"
    
    Set CmcBar = CommandBars(COMMENCE_FIELDS).Controls.Add(Type:=msoControlDropdown)
        CmcBar.Width = 250
        CmcBar.Style = msoComboLabel
        CmcBar.Caption = "Insert Related Field"
        CmcBar.OnAction = "mnuAddRelatedField"

    Set CmcBar = CommandBars(COMMENCE_FIELDS).Controls.Add(Type:=msoControlButton, ID:=288)
        CmcBar.Style = msoButtonIconAndCaption
    
    ThisDocument.Saved = True

End Sub
Sub mnuCreateGetViewsToolBar()
'
' Create the Commence Get Views toolbar
'
    Dim CmcMenu As CommandBar
    Dim CmcBar As CommandBarControl

    CustomizationContext = ThisDocument
  
    On Error Resume Next
    CommandBars(COMMENCE_VIEWS).Delete
    On Error GoTo 0
  
    Set CmcMenu = CommandBars.Add(Name:=COMMENCE_VIEWS, Position:=msoBarFloating, MenuBar:=False, Temporary:=True)
    CmcMenu.Visible = False
    
    Set CmcBar = CommandBars(COMMENCE_VIEWS).Controls.Add(Type:=msoControlDropdown)
        CmcBar.Width = 250
        CmcBar.Style = msoComboLabel
        CmcBar.Caption = "Select Category"
        CmcBar.OnAction = "mnuUpdateViewsToolbar"
    
    Set CmcBar = CommandBars(COMMENCE_VIEWS).Controls.Add(Type:=msoControlDropdown)
        CmcBar.Width = 250
        CmcBar.Style = msoComboLabel
        CmcBar.Caption = "-->Insert Commence View"
        CmcBar.OnAction = "mnuInsertCommenceViewToolbar"

    ThisDocument.Saved = True

End Sub
Sub mnuGetFieldsfromCommence(selectedcategory)

    Dim i
    Dim fieldList
    Dim CmcObj As New CommenceDB
    Dim c As Object
    
    Dim CmcObject As String
    Dim AppName As String
    Dim sFieldCount As String
    Dim catlist As String
    Dim fDef
    Dim fDefArray
    
    On Error GoTo -1: On Error GoTo Done

    CmcObject = "Commence.DB"
    AppName = "Commence"

    Set CmcObj = New CommenceDB
    Set c = CmcObj.GetConversation(AppName, "MergeItem")

    'Get the names of the direct fields
    sFieldCount = c.Request("[GetFieldCount(""" + selectedcategory + """)]")
    FieldArraySize = Val(sFieldCount)
    fieldList = c.Request("[GetFieldNames(""" + selectedcategory + """,|fffd|)]")
    
    'Add Me item
    fieldList = "(-Me-)|fffd|" + fieldList
    FieldArraySize = FieldArraySize + 1
    
    'Check which are is image fields
    sFieldCount = c.Request("[GetImageFieldCount(""" + selectedcategory + """)]")
    If Val(sFieldCount) > 0 Then
        FieldArraySize = FieldArraySize + Val(sFieldCount)
        catlist = c.Request("[GetImageFieldNames(""" + selectedcategory + """,""|fffd|"")]")
        catlist = Util.CmcReplace(catlist, "|fffd|", " (IMAGE)|fffd|")
        fieldList = fieldList + "|fffd|" + catlist + " (IMAGE)"
    End If
        
    'Get the indirect fields
    sFieldCount = c.Request("[GetConnectionCount(""" + selectedcategory + """)]")
    If Val(sFieldCount) > 0 Then
        FieldArraySize = FieldArraySize + Val(sFieldCount)
        catlist = c.Request("[GetConnectionNames(""" + selectedcategory + """,..|fffd|,__)]")
        fieldList = fieldList + "|fffd|" + catlist + ".."
    End If
        
    Util.CmcSplit FieldArray, fieldList, "|fffd|"

    GoTo Normalx

Done:
    If Err.Number = 1 Then
        'category does not exist
        MsgBox "The category: " + selectedcategory + "  does not exist in the active database.  Please check that the proper database in open and active."
    Else
        MsgBox ("An error has occured in the Commence macros (mnuGetFieldsfromCommence): " + str(Err.Number) + " " + Err.Description)
    End If
    
Normalx:
    Set c = Nothing
    Set CmcObj = Nothing

End Sub

Sub mnuGetViewsfromCommence(selectedcategory)

    Dim i
    Dim fieldList
    Dim c As Object
    
    Dim CmcObj As New CommenceDB
    Dim AppName As String
    Dim sCount As String
    Dim ViewList As String
    
    
    On Error GoTo -1: On Error GoTo Done

    AppName = "Commence"

    Set CmcObj = New CommenceDB
    Set c = CmcObj.GetConversation(AppName, "GetData")

    'Get the names of the direct fields
    sCount = c.Request("[GetViewCount(""" + selectedcategory + """)]")
    ViewArraySize = Val(sCount)
    ViewList = c.Request("[GetViewNames(""" + selectedcategory + """,|fffd|)]")
    
    Util.CmcSplit ViewArray, ViewList, "|fffd|"

    GoTo Normalx

Done:
    MsgBox ("An error has occured in the Commence macros (mnuGetViewsfromCommence): " + str(Err.Number) + " " + Err.Description)
    
Normalx:
    Set c = Nothing
    Set CmcObj = Nothing

End Sub

Sub mnuGetCategoryfromCommence()

    Dim i
    Dim fieldList
    Dim c As Object
    
    Dim CmcObj As New CommenceDB
    Dim AppName As String
    Dim sCount As String
    Dim ViewList As String
    
    
    On Error GoTo -1: On Error GoTo Done

    AppName = "Commence"

    Set CmcObj = New CommenceDB
    Set c = CmcObj.GetConversation(AppName, "GetData")

    'Get the names of the direct fields
    sCount = c.Request("[GetCategoryCount()]")
    CatArraySize = Val(sCount)
    ViewList = c.Request("[GetCategoryNames(|fffd|)]")
    
    Util.CmcSplit CatArray, ViewList, "|fffd|"

    GoTo Normalx

Done:
    MsgBox ("An error has occured in the Commence macros (mnuGetCategoryfromCommence): " + str(Err.Number) + " " + Err.Description)
    
Normalx:
    Set c = Nothing
    Set CmcObj = Nothing

End Sub


Function mnuFillGetFieldsToolBar(cat As String) As Boolean

    Dim CmcFields As CommandBarControl
    Dim cBar As CommandBar
    Dim bFound As Boolean
    Dim m, i

    bFound = False
    For Each cBar In CommandBars
        If cBar.Name = COMMENCE_FIELDS Then
            bFound = True
            Exit For
        End If
    Next

    If bFound = False Then
        Call mnuCreateGetFieldsToolBar
    End If
    Set CmcFields = CommandBars(COMMENCE_FIELDS).Controls(1)
    
    'If FieldArraySize = 0 Then
        If Not Util.FindCommence Then    'check if Commence is running
            'commence is not running
            m = MsgBox("Commence is not currently running.  Access this function, Commence must be running.  Do you wish to start Commence?", vbYesNo, "Commence")
            If m = vbNo Then
                'abort
                mnuFillGetFieldsToolBar = False
                Exit Function
            Else
                'continue because dao will start Commence
            End If
        End If
        
        'Get Category
        Call mnuGetFieldsfromCommence(cat)
    'End If
    
    On Error GoTo aproblem
    CmcFields.Clear
    For i = 0 To FieldArraySize
        If i = 0 Then
            Call CmcFields.AddItem("(None)")
        Else
            Call CmcFields.AddItem(FieldArray(i - 1))
        End If
    Next i
    CmcFields.ListIndex = 1
        
    mnuFillGetFieldsToolBar = True
aproblem:
    
End Function

Function mnuFillGetViewsToolBar(cat As String) As Boolean

    Dim CmcFields As CommandBarControl
    
    Dim m, i, k

    Set CmcFields = CommandBars(COMMENCE_VIEWS).Controls(2)
    
    'If FieldArraySize = 0 Then
        If Not Util.FindCommence Then    'check if Commence is running
            'commence is not running
            m = MsgBox("Commence is not currently running.  Access this function, Commence must be running.  Do you wish to start Commence?", vbYesNo, "Commence")
            If m = vbNo Then
                'abort
                mnuFillGetViewsToolBar = False
                Exit Function
            Else
                'continue because dao will start Commence
            End If
        End If
        
        'Get Category
        If cat <> "(None)" Then
            Call mnuGetViewsfromCommence(cat)
            CmcFields.Clear
            
            On Error Resume Next
            k = -1
            k = UBound(ViewArray)
            If k > -1 Then
                For i = 0 To ViewArraySize - 1
                    Call CmcFields.AddItem(ViewArray(i))
                Next i
                CmcFields.ListIndex = 1
            Else
                CmcFields.Clear
            End If
        Else
            CmcFields.Clear
        End If
        
    mnuFillGetViewsToolBar = True

    
End Function

Function mnuFillGetCategoryToolBar() As Boolean

    Dim CmcFields As CommandBarControl
    
    Dim m, i

    Set CmcFields = CommandBars(COMMENCE_VIEWS).Controls(1)
    
    'If FieldArraySize = 0 Then
        If Not Util.FindCommence Then    'check if Commence is running
            'commence is not running
            m = MsgBox("Commence is not currently running.  Access this function, Commence must be running.  Do you wish to start Commence?", vbYesNo, "Commence")
            If m = vbNo Then
                'abort
                mnuFillGetCategoryToolBar = False
                Exit Function
            Else
                'continue because dao will start Commence
            End If
        End If
        
        'Get Category
        Call mnuGetCategoryfromCommence
    'End If
    
    CmcFields.Clear
    For i = 0 To CatArraySize
        If i = 0 Then
            Call CmcFields.AddItem("(None)")
        Else
            Call CmcFields.AddItem(CatArray(i - 1))
            'If CatArray(i - 1) = templateCategory Then
                'CmcFields.ListIndex = i + 1
            'End If
        End If
    Next i
    If CmcFields.ListIndex < 1 Then
        CmcFields.ListIndex = 1
    End If
        
    mnuFillGetCategoryToolBar = True

    
End Function



Sub mnuAddField()

    If Not VerifyDocumenttype Then Exit Sub
    
    Dim CmcFields As CommandBarControl
    Dim CmcFields2 As CommandBarControl
    Dim rconnname As String
    Dim rcatname As String
    
    Set gLetterObj = New Letters.MergeDB
      
    Set CmcFields = CommandBars(COMMENCE_FIELDS).Controls(1)
    Set CmcFields2 = CommandBars(COMMENCE_FIELDS).Controls(2)
   
    'check if indirect field
    If InStr(1, CmcFields.Text, "__") > 0 Then
        mnuGetRelatedFieldsFromCommence CmcFields.Text
        Call mnuFillGetRelatedFieldsToolBar
        'CommandBars("Get Related Fields").Visible = True
    ElseIf InStr(1, CmcFields.Text, "(-Me-)") > 0 Then
        mnuGetRelatedFieldsFromCommence CmcFields.Text
        Call mnuFillGetRelatedFieldsToolBar
    ElseIf CmcFields.Text = "(None)" Then
        CmcFields2.Clear
    Else
        CommandBars(COMMENCE_FIELDS).Controls(2).Clear
        Call mnuInsertCommenceFieldToolbar
    End If
   
    Set gLetterObj = Nothing

End Sub
Sub mnuAddRelatedField()

    Dim CmcFields1 As CommandBarControl
    Dim CmcFields2 As CommandBarControl
      
    Dim tmp As String
    Dim fieldName As String
    Dim i, r, Tmp2
         
    Set gLetterObj = New Letters.MergeDB
    
    'Get the toolbar
    Set CmcFields1 = CommandBars(COMMENCE_FIELDS).Controls(1)
    Set CmcFields2 = CommandBars(COMMENCE_FIELDS).Controls(2)
    
    'Get the field
    If InStr(1, CmcFields2.Text, "..") > 0 Then
        fieldName = Right(CmcFields2.Text, Len(CmcFields2.Text) - InStr(1, CmcFields2.Text, "..") - 1)
    Else
        fieldName = CmcFields2.Text
    End If
       
    'RelatedConnName = Replace(RelatedConnName, """", "\""")
    'RelatedConnName = Replace(RelatedConnName, "(", "\(")
    'RelatedConnName = Replace(RelatedConnName, ")", "\)")
    'RelatedCatName = Replace(RelatedCatName, """", "\""")
    'RelatedCatName = Replace(RelatedCatName, "(", "\(")
    'RelatedCatName = Replace(RelatedCatName, ")", "\)")
    'fieldName = Replace(fieldName, """", "\""")
    'fieldName = Replace(fieldName, "(", "\(")
    'fieldName = Replace(fieldName, ")", "\)")

       
    'Add to the document
    If CmcFields1.Text = "(-Me-)" Then
        'check if an image field too
        If InStr(1, CmcFields2.Text, " (IMAGE)") > 0 Then
            'we have an image field too so store it away
            tmp = Left(fieldName, Len(fieldName) - Len(" (IMAGE)"))
            Call ActiveDocument.Fields.Add(Selection.Range, wdFieldMacroButton, "CommenceMeImage [""" + tmp + """]", False)
        Else
            Call ActiveDocument.Fields.Add(Selection.Range, wdFieldDDEAuto, "Commence MergeItem ""[GetMeField(\""" + fieldName + "\"",1)]"" \* CHARFORMAT", False)
        End If
    ElseIf InStr(1, UCase(fieldName), UCase(" (IMAGE)")) > 0 Then    'have an image field
        tmp = Left(fieldName, Len(fieldName) - Len(" (IMAGE)"))
        Tmp2 = RelatedConnName + "__" + RelatedCatName + "__" + Trim(tmp)
        Call ActiveDocument.Fields.Add(Selection.Range, wdFieldMacroButton, "CommenceRelatedImage [""" + Tmp2 + """]", False)
    Else
        Call ActiveDocument.Fields.Add(Selection.Range, wdFieldDDEAuto, "Commence MergeItem ""[GetConnectedItemField(,,\""" + RelatedConnName + "\"",\""" + RelatedCatName + "\"",\""" + Trim(fieldName) + "\"",,1)]"" \* CHARFORMAT", False)
    End If
    
    Set gLetterObj = Nothing
  
End Sub
Sub mnuGetRelatedFieldsFromCommence(mnuSelection As String)

    Dim i
    Dim q As String
    Dim haveerror As Integer
    Dim ConnFieldList As String
    
    
    On Error GoTo -1: On Error GoTo Done
    q$ = Chr(34)
    
    If InStr(1, mnuSelection, "__") > 0 Then    'it is a connection
        'Parse string
        RelatedConnName = Left(mnuSelection, InStr(1, mnuSelection, "__", vbTextCompare) - 1)
        RelatedCatName = Mid(mnuSelection, InStr(1, mnuSelection, "__", vbTextCompare) + 2, Len(mnuSelection) - 3 - InStr(1, mnuSelection, "__", vbTextCompare))

        If Util.GetFields(RelatedCatName, ConnFieldArraySize, ConnFieldList, False, True) > 0 Then
            GoTo Done
        End If
    Else
        haveerror = Util.GetCommenceInfo("GetData", "[GetPreference(Me,|fffd|)]", ConnFieldList)
        If haveerror > 0 Then
            GoTo DDEerror
        End If
        RelatedConnName = Left(ConnFieldList, InStr(1, ConnFieldList, "|fffd|") - 1)
        If Util.GetFields(RelatedConnName, ConnFieldArraySize, ConnFieldList, False, True) > 0 Then
            GoTo Done
        End If
    End If
    Util.CmcSplit ConnFieldArray, ConnFieldList, "|fffd|"

    GoTo Normalx
    
DDEerror:
    MsgBox ("An error has occured getting information from Commence (mnuGetRelatedFieldsFromCommence).  The error code is: " + str(haveerror))
    GoTo Normalx
    
Done:
    MsgBox ("An error has occured in the Commence macros (mnuGetRelatedFieldsFromCommence: " + str(Err.Number) + " " + Err.Description)
    
Normalx:

End Sub

Sub mnuUpdateViewsToolbar()
    If Not VerifyDocumenttype Then Exit Sub
    
    'Dim CmcFields As Object
    Dim CmcFields1 As CommandBarControl
    Dim CmcFields2 As CommandBarControl
    
    Set gLetterObj = New Letters.MergeDB
    
    On Error GoTo aproblem
 
    Set CmcFields1 = CommandBars(COMMENCE_VIEWS).Controls(1)
    Set CmcFields2 = CommandBars(COMMENCE_VIEWS).Controls(2)
    
    Commence.mnuFillGetViewsToolBar (CmcFields1.Text)
    
    GoTo Done

aproblem:
    MsgBox ("An error has occured in the Commence macros (mnuInsertCommenceFieldToolbar): " + str(Err.Number) + " " + Err.Description)
  
Done:
    Set gLetterObj = Nothing
    
End Sub


Sub mnuFillGetRelatedFieldsToolBar()

    Dim CmcFields As CommandBarControl
    
    Dim i

    Set CmcFields = CommandBars(COMMENCE_FIELDS).Controls(2)
    
    CmcFields.Clear
    
    For i = 0 To ConnFieldArraySize - 1
        Call CmcFields.AddItem(ConnFieldArray(i))
    Next i
    
    If ConnFieldArraySize = 0 Then  'some problem occured
        Call AutoExec
    Else
        CmcFields.ListIndex = 1
    End If

End Sub

Sub mnuInsertCommenceFieldToolbar()

    'Dim CmcFields As Object
    Dim CmcFields As CommandBarControl
    Dim tmp As String
    Dim i As String
    Dim r As String
    
    On Error GoTo aproblem
 
    Set CmcFields = CommandBars(COMMENCE_FIELDS).Controls(1)
           
    If InStr(1, UCase(CmcFields.Text), UCase("(-Me-)")) > 0 Then
        Call ActiveDocument.Fields.Add(Selection.Range, wdFieldDDEAuto, "Commence MergeItem ""[GetMeField(""" + CmcFields.Text + """,1)]"" \* CHARFORMAT", False)
    ElseIf InStr(1, CmcFields.Text, "(IMAGE)") > 0 Then    'have an image field
        tmp = Left(CmcFields.Text, Len(CmcFields.Text) - Len(" (IMAGE)"))
        'i = Util.GetDocumentProperties("NumImage")
        'Util.SetDocumentProperties "NumImage", Val(i) + 1
        Call ActiveDocument.Fields.Add(Selection.Range, wdFieldMacroButton, "CommenceImage [""" + tmp + """]", False)
    ElseIf InStr(1, CmcFields.Text, """") > 0 Then
        tmp = Util.CmcReplace(CmcFields.Text, """", "\""")
        Call ActiveDocument.Fields.Add(Selection.Range, wdFieldDDEAuto, "Commence MergeItem ""[GetField(,,\""" + tmp + "\"",1)]"" \* CHARFORMAT", False)
    Else
        Call ActiveDocument.Fields.Add(Selection.Range, wdFieldDDEAuto, "Commence MergeItem ""[GetField(,,\""" + CmcFields.Text + "\"",1)]"" \* CHARFORMAT", False)
    End If
    GoTo Done

aproblem:
    MsgBox ("An error has occured in the Commence macros (mnuInsertCommenceFieldToolbar): " + str(Err.Number) + " " + Err.Description)
  
Done:

End Sub


Sub mnuInsertCommenceViewToolbar()

    Dim CmcFields As CommandBarControl
    
    Set gLetterObj = New Letters.MergeDB
    
    On Error GoTo aproblem
 
    Set CmcFields = CommandBars(COMMENCE_VIEWS).Controls(2)
           
    Call ActiveDocument.Fields.Add(Selection.Range, wdFieldMacroButton, "CommenceView [""" + CmcFields.Text + """]", False)
    GoTo Done

aproblem:
    MsgBox ("An error has occured in the Commence macros (mnuInsertCommenceView): " + str(Err.Number) + " " + Err.Description)
  
Done:
    Set gLetterObj = Nothing
    
End Sub

Public Sub frmGetCmcCategories(num, cNames)

'Gets the number of categories and the category names from Commence

    Dim haveerror As Integer
    
    haveerror = Util.GetCommenceInfo("GetData", "[GetCategoryCount()]", num)
    If haveerror > 0 Then
        GoTo DDEerror
    End If
    haveerror = Util.GetCommenceInfo("GetData", "[GetCategoryNames(|fffd|)]", cNames)
    If haveerror > 0 Then
        GoTo DDEerror
    End If
  
    GoTo Done
    
DDEerror:
    num = 0
    cNames = ""
  
Done:

End Sub


Sub createUnlinkAutoField(f As Field)

    On Error GoTo Done
    If (f.Type = wdFieldDDEAuto And (InStr(1, UCase(f.Code), UCase("Commence MergeItem")) > 0)) Or (f.Type = wdFieldIncludePicture) Or ((f.Type = wdFieldMacroButton) And InStr(1, f.Code, "CommenceView")) Then
        f.Update
        f.Unlink
    End If
    
Done:
End Sub

Sub createCreateOtherField(f As Field)

Dim tmp As String
Dim fName As String
Dim iStart As Integer
Dim iEnd As Integer
Dim fiName As String
Dim delimFileNme As String
Dim fieldOnly As String
Dim NewFieldCode As String
Dim catName As String, connField, i As Integer, flds As String, nConnItems, nameField
Dim retVal As String
Dim retValArray() As String
Dim sSearch As String
Dim sSearch2 As String
Dim hasVal As Boolean
hasVal = False
    Dim FSO As Object
    Set FSO = CreateObject("Scripting.FileSystemObject")

    'check if we have an image field
    If f.Type = wdFieldMacroButton And (InStr(1, UCase(f.Code), UCase("CommenceView")) > 0) Then
            sSearch = "CommenceView ["""
            sSearch2 = """]"
            iStart = InStr(1, f.Code, sSearch) + Len(sSearch)
            iEnd = InStr(iStart, f.Code, sSearch2)
            fName = Trim(Mid(f.Code, iStart, iEnd - iStart))
            tmp = Util.GetDocumentProperties2(fName, Util.VIEW)
            If InStr(1, tmp, "View") > 0 Then
                'first, get the file from Commence
                'If Util.GetFieldtoFile("", "", fName, fiName, 2, hasVal, ".htm") <> 0 Then
                If Util.GetFieldtoFile("", "", fName, fiName, 2, hasVal, ".html") <> 0 Then
                    f.Select
                    f.Delete
                    Selection.TypeText Err.Description
                    GoTo aproblem
                ElseIf hasVal = False Then
                    f.Select
                    f.Delete
                ElseIf hasVal = True Then
                    f.Select
                    Options.ReplaceSelection = True
                    Call ActiveDocument.Fields.Add(Selection.Range, wdFieldIncludeText, Util.getDelimitedFilename(fiName), True)
                    Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdExtend
                    Selection.Fields.Unlink
                    If FSO.FileExists(fiName) = True Then
                        Kill fiName
                    End If
                End If
            End If
    ElseIf f.Type = wdFieldMacroButton And (InStr(1, UCase(f.Code), UCase("CommenceImage")) > 0) Then
            sSearch = "CommenceImage ["""
            sSearch2 = """]"
            iStart = InStr(1, f.Code, sSearch) + Len(sSearch)
            iEnd = InStr(iStart, f.Code, sSearch2)
            fName = Trim(Mid(f.Code, iStart, iEnd - iStart))
            tmp = Util.GetDocumentProperties2(fName, Util.DIRECT_IMAGE)
            If InStr(1, tmp, "Image") > 0 Then
                'first, get the file from Commence
                If Util.GetFieldtoFile("", "", fName, fiName, 1, hasVal) <> 0 Then
                    f.Select
                    f.Delete
                    Selection.TypeText Err.Description
                    GoTo aproblem
                ElseIf hasVal = False Then
                    f.Select
                    f.Delete
                ElseIf hasVal = True Then
                    f.Select
                    Options.ReplaceSelection = True
                    Call ActiveDocument.Fields.Add(Selection.Range, wdFieldIncludePicture, Util.getDelimitedFilename(fiName), True)
                    Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdExtend
                    Selection.Fields.Unlink
                    If FSO.FileExists(fiName) = True Then
                        Kill fiName
                    End If
                End If
            End If
    ElseIf f.Type = wdFieldMacroButton And (InStr(1, UCase(f.Code), UCase("CommenceMeImage")) > 0) Then
            sSearch = "CommenceMeImage ["""
            sSearch2 = """]"
            iStart = InStr(1, f.Code, sSearch) + Len(sSearch)
            iEnd = InStr(iStart, f.Code, sSearch2)
            fName = Trim(Mid(f.Code, iStart, iEnd - iStart))
            tmp = Util.GetDocumentProperties2(fName, Util.ME_IMAGE)
            If InStr(1, tmp, "MeImage") > 0 Then
                'first, get the file from Commence
                If Util.GetCommenceInfo("GetData", "[GetPreference(Me,""|fffd|"")]", retVal) <> 0 Then
                    GoTo aproblem
                End If
                ReDim retValArray(2)
                Util.CmcSplit retValArray, retVal, "|fffd|"
                If Util.GetFieldtoFile(retValArray(0), retValArray(1), fName, fiName, 1, hasVal) <> 0 Then
                    f.Select
                    f.Delete
                    Selection.TypeText Err.Description
                    GoTo aproblem
                ElseIf hasVal = False Then
                    f.Select
                    f.Delete
                ElseIf hasVal = True Then
                    f.Select
                    Options.ReplaceSelection = True
                    Call ActiveDocument.Fields.Add(Selection.Range, wdFieldIncludePicture, Util.getDelimitedFilename(fiName), True)
                    Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdExtend
                    Selection.Fields.Unlink
                    If FSO.FileExists(fiName) = True Then
                        Kill fiName
                    End If
                End If
            End If
    ElseIf f.Type = wdFieldMacroButton And (InStr(1, UCase(f.Code), UCase("CommenceRelatedImage")) > 0) Then
            sSearch = "CommenceRelatedImage ["""
            sSearch2 = """]"
            iStart = InStr(1, f.Code, sSearch) + Len(sSearch)
            iEnd = InStr(iStart, f.Code, sSearch2)
            fName = Trim(Mid(f.Code, iStart, iEnd - iStart))
            tmp = Util.GetDocumentProperties2(fName, Util.RELATED_IMAGE)
            If InStr(1, tmp, "RelatedImage") > 0 Then
                'first, get the file from Commence
                    iStart = InStr(1, fName, "__")
                    connField = Trim(Left(fName, iStart - 1))
                    iEnd = InStr(iStart + 2, fName, "__")
                    catName = Trim(Mid(fName, iStart + 2, iEnd - iStart - 2))
                    fieldOnly = Trim(Right(fName, Len(fName) - iEnd - 1))
                    
                    'Get the Name field of the connected category
                    Util.GetFields catName, i, flds, False, False
                    nameField = Left(flds, InStr(1, flds, "|fffd|") - 1)
                    
                    'Get the number of connected items
                    If Util.GetCommenceInfo("MergeItem", "[GetConnectedItemCount(,,""" + connField + """,""" + catName + """)]", nConnItems) <> 0 Then
                        GoTo aproblem
                    End If
                    
                    If nConnItems = 0 Then
                        'clear the field code
                        f.Select
                        f.Delete
                    Else
                        'Get the connected item names
                        If Util.GetCommenceInfo("MergeItem", "[GetConnectedItemNames(,,""" + connField + """,""" + catName + """,|fffd|)]", retVal) <> 0 Then
                            GoTo aproblem
                        End If

                        Util.CmcSplit retValArray, retVal, "|fffd|"
                        f.Select

                        'loop through each item and get the image to file
                        Dim fieldDeleted As Boolean
                        For i = 0 To nConnItems - 1
                            If Util.GetFieldtoFile(catName, retValArray(i), fieldOnly, fiName, 1, hasVal) <> 0 Then
                                f.Select
                                f.Delete
                                Selection.TypeText Err.Description
                                GoTo aproblem
                            ElseIf hasVal = False Then
                                'f.Delete
                            ElseIf hasVal = True Then
                                delimFileNme = Util.getDelimitedFilename(fiName)
                                Options.ReplaceSelection = True
                                Call ActiveDocument.Fields.Add(Selection.Range, wdFieldIncludePicture, delimFileNme, True)
                                Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdExtend
                                Selection.Fields.Unlink
                                Selection.MoveRight Unit:=wdCharacter, count:=1, Extend:=wdMove
                                If FSO.FileExists(fiName) = True Then
                                    Kill fiName
                                End If
                                fieldDeleted = True
                            End If
                        Next i
                        If Not fieldDeleted Then f.Delete
                    End If
            End If
    End If
    
aproblem:
    Set FSO = Nothing
End Sub

Sub prnPrintSingleDocument(nRows As Integer, LinkFileName As String)

    Dim m
    Dim vLog, vLink
    
    On Error GoTo aproblem
   
    Options.PrintHiddenText = False
  
    ActiveDocument.Repaginate
    
    If Preview = 0 Then
        ActiveWindow.VIEW.ShowFieldCodes = False
        ActiveDocument.PrintOut Background:=True, PageType:=wdPrintAllPages
    Else
        createCreateContinueToolBar
        Util.SetDocumentProperties "Dest", Trim(str(Dest))
        Util.SetDocumentProperties "nRows", Trim(str(nRows))
        If LinkFileName <> "" Then
            Util.SetDocumentProperties "LinkFileName", LinkFileName
        End If
    
    End If
    
    GoTo Done

aproblem:
    MsgBox ("An error has occured in the Commence macros (prnPrintSingleDocument): " + str(Err.Number) + " " + Err.Description)
  
Done:


End Sub

Sub prnFaxSingleDocument(FaxNum As String, nRows As Integer, LinkFileName As String, itemName As String)

    Dim LetterInfo As String
    Dim haveerror As Integer
    Dim a
    Dim m, cat
    Dim SendFax As Integer
    Dim fieldName

    On Error GoTo aproblem
   
    Options.PrintHiddenText = False
    ActiveWindow.VIEW.ShowFieldCodes = False
    
    ActiveDocument.Repaginate
    
    If Preview = 0 Then
        SendFax = 1
    End If
    
    Call CommenceFax.sendWinFax(itemName, FaxNum, 1)
    
    GoTo Done

aproblem:
    MsgBox ("An error has occured in the Commence macros (prnFaxSingleDocument): " + str(Err.Number) + " " + Err.Description)
  
Done:


End Sub

Sub prnemailSingleDocument(EmailAddress As String)

    Dim m
    Dim SendEmail As Integer
    Dim itemName As String
    

    'On Error GoTo aproblem
   
    Options.PrintHiddenText = False
  
    ActiveDocument.Repaginate
    
    If Preview = 1 Then
        SendEmail = 0
    Else
        SendEmail = 1
    End If
    
    ActiveWindow.VIEW.ShowFieldCodes = False

    Call CommenceEmail.SendEmail("", EmailAddress, SendEmail)

    GoTo Done

aproblem:
    MsgBox ("An error has occured in the Commence macros (prnEmailSingleDocument): " + str(Err.Number) + " " + Err.Description)

Done:


End Sub

Sub createMultipleLetter(Dest As Integer, nRows As Integer, LinkFileName As String)
    Dim fld As Field
    Dim sect As Section
    Dim hdr As HeaderFooter
    Dim ftr As HeaderFooter
    Dim shpe As Shape
    Dim rnge As Range

    Dim FaxField As String
    Dim FaxFieldHeader As String
    Dim EmailField As String
    Dim EmailFieldHeader As String
    Dim NumItems As Integer
    Dim i
    Dim RecipName As String
    Dim FaxNum As String
    Dim filenme As String
    Dim FileType As Integer
    Dim tmplFields() As String, tmplheader() As String
    Dim tmplViews() As String, tmplViewsHeader() As String
    Dim meFields() As String, meHeader() As String
    Dim namefld As String
    Dim NameFieldHeader As String
    Dim FieldFound As Boolean, NameFound As Boolean
    Dim RelatedFields() As String
    Dim RelatedHeader() As String
    Dim ImageFields() As String
    Dim ImageHeader() As String
    Dim RelatedImageFields() As String
    Dim RelatedImageHeader() As String
    Dim MeImageFields() As String
    Dim MeImageHeader() As String
    Dim itemNames
    Dim errNumber As Integer
    Dim logLabelEnvelope
    Dim active1Name
    Dim active2Name
    Dim FSO As Object
    Dim k
    Set FSO = CreateObject("Scripting.FileSystemObject")
    
    active1Name = ActiveDocument.Name
    
    If Util.GetCommenceLettersPref("NotLogLabEnv") = "1" Then
        logLabelEnvelope = False
    Else
        logLabelEnvelope = True
    End If
    
    If Continue Then
        filenme = Util.GetDocumentProperties("Datasource")
        LinkFileName = Util.GetDocumentProperties("LinkFileName")
        NameFieldHeader = Util.GetDocumentProperties("NameFieldHeader")
        If Dest = 1 Then
        ElseIf Dest = 2 Then
            FaxFieldHeader = Util.GetDocumentProperties("FaxFieldHeader")
        ElseIf Dest = 3 Then
            EmailFieldHeader = Util.GetDocumentProperties("EmailFieldHeader")
        End If
        Preview = 0
        Continue = False
        GoTo ContinueHere
    End If
    
    'Get the fields used in the template
    If Util.GetTemplateFields(tmplFields, tmplheader, ImageFields, ImageHeader, RelatedFields, RelatedHeader, RelatedImageFields, RelatedImageHeader, meFields, meHeader, MeImageFields, MeImageHeader, tmplViews, tmplViewsHeader) > 0 Then
        'Something happened
        GoTo aproblem
    End If
    
    If docType = 0 Then
    'TODO: what is this used for?
    End If
    
    templateCategory = Util.GetDocumentProperties("Category")
    If templateCategory = "" Then 'what happened
        templateCategory = Util.GetCommenceLettersPref("Category")
        If templateCategory = "" Then 'something happened
            MsgBox "The template is not in the correct format.  Edit the template and save again."
            ActiveDocument.Saved = True
            ActiveDocument.Close SaveChanges:=False
            GoTo aproblem
        End If
    End If
    
    'Get the Name field for the category
    If Util.GetCommenceInfo("GetData", "[GetFieldNames(""" + templateCategory + """,|fffd|)]", namefld) > 0 Then
        GoTo aproblem
    End If
    If (InStr(1, namefld, "|fffd|") > 0) Then _
      namefld = Left(namefld, InStr(1, namefld, "|fffd|") - 1)

    If Dest = 1 Then
        NameFound = False
        'Add it to the array, have to check if it is there first
        On Error Resume Next
        k = -1
        k = UBound(tmplFields)
        For i = 0 To k
            If tmplFields(i) = namefld Then
                NameFieldHeader = tmplheader(i)
                NameFound = True
                Exit For
            End If
        Next i
        
        If Not NameFound Then
            ReDim Preserve tmplFields(k + 1)
            ReDim Preserve tmplheader(k + 1)
            tmplFields(UBound(tmplFields)) = namefld
            NameFieldHeader = "_NAME_"
            tmplheader(UBound(tmplheader)) = "_NAME_"
        End If
    End If
    
    If Dest = 2 Then  'fax
        If APMerge Then
            FaxField = recipientField
        Else
            isRelatedField = False
            'Get the fax field
            FaxField = Util.GetCommenceLettersPref("FaxNumber")
        End If
        
        'Add it to the array, have to check if it is there first
        On Error Resume Next
        k = -1
        If Not isRelatedField Then
            k = UBound(tmplFields)
            For i = 0 To k
                If tmplFields(i) = FaxField Then
                    FaxFieldHeader = tmplheader(i)
                    FieldFound = True
'                ElseIf tmplFields(i) = namefld Then
'                    NameFieldHeader = tmplheader(i)
'                    NameFound = True
                End If
            Next i
            If Not FieldFound Then
                ReDim Preserve tmplFields(k + 1)
                ReDim Preserve tmplheader(k + 1)
                tmplFields(UBound(tmplFields)) = FaxField
                FaxFieldHeader = "_FAX_"
                tmplheader(UBound(tmplheader)) = "_FAX_"
                k = k + 1
            End If
        Else
            k = UBound(RelatedFields)
            For i = 0 To k
                If RelatedFields(i) = FaxField Then
                    FaxFieldHeader = RelatedFields(i)
                    FieldFound = True
                End If
            Next i
            If Not FieldFound Then
                ReDim Preserve RelatedFields(UBound(RelatedFields) + 1)
                ReDim Preserve RelatedHeader(UBound(RelatedHeader) + 1)
                RelatedFields(UBound(RelatedFields)) = FaxField
                FaxFieldHeader = "_FAX_"
                RelatedHeader(UBound(RelatedHeader)) = "_FAX_"
            End If
        End If
        
        'TODO: recipient name can be an indirect field (contact related to ticket)
        For i = 0 To UBound(tmplFields) - 1
            If tmplFields(i) = namefld Then
                NameFieldHeader = tmplheader(i)
                NameFound = True
            End If
        Next i
        If Not NameFound Then
'            ReDim Preserve tmplFields(k + 1)
'            ReDim Preserve tmplheader(k + 1)
            ReDim Preserve tmplFields(UBound(tmplFields) + 1)
            ReDim Preserve tmplheader(UBound(tmplheader) + 1)
            tmplFields(UBound(tmplFields)) = namefld
            NameFieldHeader = "_NAME_"
            tmplheader(UBound(tmplheader)) = "_NAME_"
'            k = k + 1
        End If

    ElseIf Dest = 3 Then
        FieldFound = False
        If APMerge Then
            EmailField = recipientField
        Else
            isRelatedField = False
            EmailField = Util.GetCommenceLettersPref("EmailAddress")
        End If
        
        'Add it to the array, have to check if it is there first
        On Error Resume Next
        k = -1
        If Not isRelatedField Then
            k = UBound(tmplFields)
            For i = 0 To k
                If tmplFields(i) = EmailField Then
                    EmailFieldHeader = tmplheader(i)
                    FieldFound = True
                End If
            Next i
            If Not FieldFound Then
                ReDim Preserve tmplFields(UBound(tmplFields) + 1)
                ReDim Preserve tmplheader(UBound(tmplheader) + 1)
                tmplFields(UBound(tmplFields)) = EmailField
                EmailFieldHeader = "_EMAIL_"
                tmplheader(UBound(tmplheader)) = "_EMAIL_"
            End If
        Else
            k = UBound(RelatedFields)
            For i = 0 To k
                If RelatedFields(i) = EmailField Then
                    EmailFieldHeader = RelatedFields(i)
                    FieldFound = True
                End If
            Next i
            If Not FieldFound Then
                ReDim Preserve RelatedFields(UBound(RelatedFields) + 1)
                ReDim Preserve RelatedHeader(UBound(RelatedHeader) + 1)
                RelatedFields(UBound(RelatedFields)) = EmailField
                EmailFieldHeader = "_EMAIL_"
                RelatedHeader(UBound(RelatedHeader)) = "_EMAIL_"
            End If
        End If
            
        'TODO: recipient name can be an indirect field (contact related to ticket)
        'Add it to the array, have to check if it is there first
        For i = 0 To UBound(tmplFields) - 1
            If tmplFields(i) = namefld Then
                NameFieldHeader = tmplheader(i)
                NameFound = True
            End If
        Next i
        If Not NameFound Then
            ReDim Preserve tmplFields(UBound(tmplFields) + 1)
            ReDim Preserve tmplheader(UBound(tmplheader) + 1)
                tmplFields(UBound(tmplFields)) = namefld
                NameFieldHeader = "_NAME_"
                tmplheader(UBound(tmplheader)) = "_NAME_"
        End If
    End If

    'Get the filename for the datasource
    'filenme = Util.GetTEMPDirectory + "\" + Util.GetFilename(".HTM")
    'If bIsEmbedObj Then
     '   MsgBox "I was using htm"
     '   filenme = Util.GetTEMPDirectory + "\" + Util.GetFilename(".HTM")
    'Else
      '  MsgBox "I was using HTML"
      '  filenme = Util.GetTEMPDirectory + "\" + Util.GetFilename(".HTML")
    'End If
    ' Above code commented by Amit (apr02)
    
    Dim iTotalFields As Integer
    iTotalFields = ActiveDocument.Fields.count
    ''''''''''''''''''''''''''''
    If iTotalFields < 62 Then
        'MsgBox "I am using htm"
        filenme = Util.GetTEMPDirectory + "\" + Util.GetFilename(".HTM")
    Else
        'MsgBox "I am using HTML"
        filenme = Util.GetTEMPDirectory + "\" + Util.GetFilename(".HTML")
    End If
   
    
                
    'Get the datasource
    'createsampledatasource FileNme, FileType, 1, numberFlds, tmplFields, tmplHeader, numberViews, tmplViews, tmplViewsHeader, nMeitems:=numberMeFlds, meArray:=meFields, mehArray:=meHeader
    If APMerge Then
        errNumber = Util.GetMergeDatasource(filenme, fType:=0, bSample:=False, _
            nRows:=nRows, fArray:=tmplFields, fhArray:=tmplheader, iArray:=ImageFields, _
            ihArray:=ImageHeader, rArray:=RelatedFields, rhArray:=RelatedHeader, _
            riArray:=RelatedImageFields, rihArray:=RelatedImageHeader, mArray:=meFields, _
            mhArray:=meHeader, miArray:=MeImageFields, mihArray:=MeImageHeader, _
            vArray:=tmplViews, vhArray:=tmplViewsHeader, _
            categoryName:=templateCategory, rowID:=itemName)
    Else
        
        errNumber = Util.GetMergeDatasource(filenme, fType:=0, bSample:=False, _
            nRows:=nRows, fArray:=tmplFields, fhArray:=tmplheader, iArray:=ImageFields, _
            ihArray:=ImageHeader, rArray:=RelatedFields, rhArray:=RelatedHeader, _
            riArray:=RelatedImageFields, rihArray:=RelatedImageHeader, mArray:=meFields, _
            mhArray:=meHeader, miArray:=MeImageFields, mihArray:=MeImageHeader, _
            vArray:=tmplViews, vhArray:=tmplViewsHeader)
    End If
    If errNumber > 0 Then
        'A problem happened
        GoTo aproblem
    End If
    
    If FSO.FileExists(filenme) = False Then
        GoTo aproblem
    End If

    StatusBar = "Please wait...Merging Commence data"
    
    '<WhiteHedge - Priti - [R31-5659]>
'    If Not bIsEmbedObj Then
'        ActiveDocument.MailMerge.OpenDataSource Name:=filenme, _
'                ConfirmConversions:=False, ReadOnly:=True, LinkToSource:=True, _
'                AddToRecentFiles:=False, PasswordDocument:="", PasswordTemplate:="", _
'                WritePasswordDocument:="", WritePasswordTemplate:="", Revert:=False, _
'                Format:=wdOpenFormatAuto, Connection:="", SQLStatement:="select * from [Mailmerge]", SQLStatement1 _
'                :=""
'                ', Openexclusive:="", SubType:=wdMergeSubTypeOther
'    Else
'        ActiveDocument.MailMerge.OpenDataSource Name:=filenme, _
'                ConfirmConversions:=False, ReadOnly:=True, LinkToSource:=True, _
'                AddToRecentFiles:=False, PasswordDocument:="", PasswordTemplate:="", _
'                WritePasswordDocument:="", WritePasswordTemplate:="", Revert:=False, _
'                Format:=wdOpenFormatAuto, Connection:="", SQLStatement:="", SQLStatement1 _
'                :=""
'
'    End If
' Above code commented by amit (apr02)
    If bIsEmbedObj Then
         ActiveDocument.MailMerge.OpenDataSource Name:=filenme, _
                ConfirmConversions:=False, ReadOnly:=True, LinkToSource:=True, _
                AddToRecentFiles:=False, PasswordDocument:="", PasswordTemplate:="", _
                WritePasswordDocument:="", WritePasswordTemplate:="", Revert:=False, _
                Format:=wdOpenFormatAuto, Connection:="", SQLStatement:="", SQLStatement1 _
                :=""
    Else
        ActiveDocument.MailMerge.OpenDataSource Name:=filenme, _
                ConfirmConversions:=False, ReadOnly:=True, LinkToSource:=True, _
                AddToRecentFiles:=False, PasswordDocument:="", PasswordTemplate:="", _
                WritePasswordDocument:="", WritePasswordTemplate:="", Revert:=False, _
                Format:=wdOpenFormatAuto, Connection:="", SQLStatement:="select * from [Mailmerge]", SQLStatement1 _
                :=""
                ', Openexclusive:="", SubType:=wdMergeSubTypeOther
    End If
    ''''''''''''''''''''''''''''''
        
    StatusBar = ""

    ActiveWindow.VIEW.ShowFieldCodes = True
    Application.ScreenUpdating = False
     
    If docType = 0 Then
        For Each shpe In ActiveDocument.Shapes
            shpe.Select
            For Each fld In Selection.Range.Fields
                If createConvertDDE(fld) = 0 Then GoTo Bye
            Next fld
        Next shpe
    
        For Each sect In ActiveDocument.Sections
            For Each fld In sect.Range.Fields
                If createConvertDDE(fld) = 0 Then
                    '??? do what
                End If
            Next fld
        
            For Each hdr In sect.Headers
                If hdr.Exists Then
                    For Each fld In hdr.Range.Fields
                        If createConvertDDE(fld) = 0 Then
                            '??? do what
                        End If
                    Next fld
                End If
            Next hdr
    
            For Each ftr In sect.Footers
                If ftr.Exists Then
                    For Each fld In ftr.Range.Fields
                        If createConvertDDE(fld) = 0 Then
                            '??? do what
                        End If
                    Next fld
                End If
            Next ftr
        Next sect
    End If 'doctype = 0
    
    ' Show Codes

    ActiveDocument.MailMerge.ViewMailMergeFieldCodes = False
    
    
  
ContinueHere:
    NumItems = nRows

    ' Do this for all records...
    If Preview = 0 Then
        Util.DeleteDocumentProperties "Type"
        Util.DeleteDocumentProperties "Category"
                
        itemNames = GetRecipientKeys

        ' ensure the first record is active
        ActiveDocument.MailMerge.DataSource.ActiveRecord = wdFirstRecord
        
        'If dest = 1 Then 'print
        If (Dest = 1 Or Dest = 4) Then 'print or draft
            ActiveDocument.MailMerge.destination = wdSendToNewDocument
            ActiveDocument.MailMerge.Execute
            If (Dest = 1) Then _
               ActiveDocument.PrintOut
            ActiveDocument.Saved = True
            active2Name = ActiveDocument.Name
        ElseIf Dest = 3 Then ' email
            ActiveDocument.MailMerge.MailAddressFieldName = EmailFieldHeader
            ActiveDocument.MailMerge.MailSubject = ActiveDocument.BuiltInDocumentProperties(wdPropertySubject)
            ActiveDocument.MailMerge.destination = wdSendToEmail
            ActiveDocument.MailMerge.MailAsAttachment = False
            '<WhiteHedge - Makarand - [R31-8327]>
            CommenceEmail.Email_Login
            ActiveDocument.MailMerge.Execute
            CommenceEmail.Email_Logout
        ElseIf Dest = 2 Then ' FAX
            ActiveDocument.MailMerge.ViewMailMergeFieldCodes = False
            ActiveWindow.VIEW.ShowHiddenText = False
            
            For i = 1 To NumItems
                ' Office XP support : view not displayed properly during mail merge
                ' When View Merged Data button on Mail Merge toolbar is toggled view is displayed properly
                ' Same operation is performed here programatically
                ActiveDocument.MailMerge.ViewMailMergeFieldCodes = wdToggle 'toggle show field codes
                ActiveDocument.MailMerge.ViewMailMergeFieldCodes = wdToggle 'toggle show data
                        
                'Get the field values
                RecipName = ActiveDocument.MailMerge.DataSource.DataFields(NameFieldHeader).Value
                FaxNum = ActiveDocument.MailMerge.DataSource.DataFields(FaxFieldHeader).Value
    
                If FaxNum = "" Or FaxNum = "(   )   -" Then
                    'GoTo Done
                Else
                    CommenceFax.sendWinFax RecipName, FaxNum, 1
                End If
                
                'go to next record
                ActiveDocument.MailMerge.DataSource.ActiveRecord = wdNextRecord
            Next
        End If
    Else    'if preview
        'save dest
        Util.SetDocumentProperties "Dest", Trim(str(Dest))
        Util.SetDocumentProperties "nRows", Trim(str(nRows))
        Util.SetDocumentProperties "Datasource", filenme
        Util.SetDocumentProperties "NameFieldHeader", NameFieldHeader
        Util.SetDocumentProperties "LinkFileName", LinkFileName
        If Dest = 1 Then
            ' do nothing
        ElseIf Dest = 2 Then
            Util.SetDocumentProperties "FaxFieldHeader", FaxFieldHeader
        ElseIf Dest = 3 Then
            Util.SetDocumentProperties "EmailFieldHeader", EmailFieldHeader
        End If
        
        createCreateContinueToolBar
        Application.Documents(ActiveDocument).Activate
        Application.WindowState = wdWindowStateMaximize
        If ActiveDocument.Bookmarks.Exists("CmcPoint") = True Then
            Selection.GoTo What:=wdGoToBookmark, Name:="CmcPoint"
        Else
            Selection.HomeKey Unit:=wdStory
        End If
        ActiveDocument.ActiveWindow.VIEW.MailMergeDataView = True
               
        'ActiveWindow.VIEW.ShowFieldCodes = False
                
        ActiveWindow.VIEW.MailMergeDataView = True
        ActiveWindow.VIEW.ShowFieldCodes = False
        
        Application.ScreenUpdating = True
       
        '''''Testing


        Application.ScreenRefresh
        Exit Sub
        'Display a floating toolbar to allow user to continue
        'Don't do the merge yet, let the user resume
    End If  'If preview
    
Done:
    Application.ScreenUpdating = True
    Application.ScreenRefresh
    'If dest < 2 Then
    If (Dest = 1 Or Dest = 4) Then
        If (docType > 0 And logLabelEnvelope = True) Or docType = 0 Then
        Selection.WholeStory
        Selection.Fields.Unlink
        If CommenceLog.autoLogToCommence(nRows:=NumItems, Dest:=Dest, LinkFileName:=LinkFileName, itemNames:=itemNames, templateName:=templateName, templateCategory:=templateCategory) = True Then
            On Error Resume Next
            Documents(active1Name).Saved = True
            Documents(active1Name).Close SaveChanges:=False
            Documents(active2Name).Saved = True
            Documents(active2Name).Close SaveChanges:=False
            Documents(LinkFileName).Activate
            Util.DeleteDocumentProperties ("Type")
            Util.DeleteDocumentProperties ("Category")
            Documents(LinkFileName).Saved = True
            Documents(LinkFileName).Close SaveChanges:=True
        Else
            On Error Resume Next
            Documents(active1Name).Saved = True
            Documents(active1Name).Close SaveChanges:=False
            Documents(active2Name).Saved = True
            Documents(active2Name).Close SaveChanges:=False
            Documents(LinkFileName).Activate
        End If
        End If
        
        If Util.DatasourceCleanup(filenme) < 0 Then
            'files not deleted
        End If
    Else
        ' Email/fax -- create document for logging
        ActiveDocument.MailMerge.DataSource.ActiveRecord = wdFirstRecord
        ActiveDocument.MailMerge.destination = wdSendToNewDocument
        ActiveDocument.MailMerge.Execute
        active2Name = ActiveDocument.Name
        'ActiveDocument.SaveAs fileName:=LinkFileName
        Selection.WholeStory
        Selection.Fields.Unlink
        If CommenceLog.autoLogToCommence(nRows:=NumItems, Dest:=Dest, LinkFileName:=LinkFileName, itemNames:=itemNames, templateName:=templateName, templateCategory:=templateCategory) = True Then
            WordBasic.DisableAutoMacros
            On Error Resume Next
            ActiveDocument.Saved = True
            ActiveDocument.Close SaveChanges:=False
            ActiveDocument.Saved = True
            ActiveDocument.Close SaveChanges:=False
            Documents(LinkFileName).Activate
            Util.DeleteDocumentProperties ("Type")
            Util.DeleteDocumentProperties ("Category")
            Documents(LinkFileName).Saved = True
            Documents(LinkFileName).Close SaveChanges:=True
            WordBasic.enableautomacros
        Else
            On Error Resume Next
            ActiveDocument.Saved = True
            ActiveDocument.Close SaveChanges:=False
            ActiveDocument.Saved = True
            ActiveDocument.Close SaveChanges:=False
        
        End If
        If Util.DatasourceCleanup(filenme) < 0 Then
            'files not deleted
        End If
    End If
      
    GoTo Bye
    
aproblem:
    If Err.Number = 0 Then
        Err.Number = errNumber
    End If
    MsgBox ("An error has occured in the Commence macros (createMultipleLetter): " + str(Err.Number) + " " + Err.Description)

Bye:
    On Error GoTo 0
    Set FSO = Nothing

End Sub


Function createConvertDDE(fld As Field) As Integer
    Dim i, N As Integer
    Dim CmcField, FldName As String
    Dim tmp
    Dim bFound As Boolean
    Dim iStart As Integer
    Dim iEnd As Integer
    Dim sSearch As String
    Dim sSearch2 As String
    Dim sSearch3 As String
    Dim prop
    

On Error GoTo aproblem

    bFound = False
    bIsEmbedObj = False
    
    If fld.Type = wdFieldDDEAuto Then
        
        fld.Select
         
        i = InStr(1, UCase(fld.Code), UCase("Commence MergeItem")) + Len("Commence MergeItem")
        If InStr(i, fld.Code, "GetField", vbTextCompare) > 0 Then
            sSearch = "[GetField(,,\"""
            sSearch2 = "\"")]"" \* CHARFORMAT"
            sSearch3 = "\"",1)]"" \* CHARFORMAT"
            iStart = InStr(1, UCase(fld.Code), UCase(sSearch)) + Len(sSearch)
            iEnd = InStr(iStart, UCase(fld.Code), UCase(sSearch2))
            If (iEnd = 0) Then _
                iEnd = InStr(iStart, UCase(fld.Code), UCase(sSearch3))
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
            For Each prop In ActiveDocument.CustomDocumentProperties
                If Trim(prop.Value) = CmcField And InStr(1, prop.Name, "Field") > 0 Then
                    FldName = prop.Name
                    bFound = True
                    Exit For
                End If
            Next prop
        ElseIf InStr(i, fld.Code, "GetConnectedItemField", vbTextCompare) > 0 Then
            sSearch = "[GetConnectedItemField(,,\"""
            sSearch2 = "\"")]"" \* CHARFORMAT"
            sSearch3 = "\"",,1)]"" \* CHARFORMAT"
            iStart = InStr(1, UCase(fld.Code), UCase(sSearch)) + Len(sSearch)
            iEnd = InStr(iStart, UCase(fld.Code), UCase(sSearch2))
            If (iEnd = 0) Then _
                iEnd = InStr(iStart, UCase(fld.Code), UCase(sSearch3))
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
            CmcField = Util.CmcReplace(CmcField, "\"",\""", "__")
            For Each prop In ActiveDocument.CustomDocumentProperties
                If Trim(prop.Value) = CmcField And InStr(1, prop.Name, "Related") > 0 Then
                    FldName = prop.Name
                    bFound = True
                    Exit For
                End If
            Next prop
        ElseIf InStr(i, UCase(fld.Code), UCase("GetMeField")) > 0 Then 'have me item
            sSearch = "[GetMeField(\"""
            sSearch2 = "\"")]"" \* CHARFORMAT"
            sSearch3 = "\"",1)]"" \* CHARFORMAT"
            iStart = InStr(1, UCase(fld.Code), UCase(sSearch)) + Len(sSearch)
            iEnd = InStr(iStart, UCase(fld.Code), UCase(sSearch2))
            If (iEnd = 0) Then _
                iEnd = InStr(iStart, UCase(fld.Code), UCase(sSearch3))
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
            For Each prop In ActiveDocument.CustomDocumentProperties
                If Trim(prop.Value) = CmcField And InStr(1, prop.Name, "MeItem") > 0 Then
                    FldName = prop.Name
                    bFound = True
                    Exit For
                End If
            Next prop
        End If
    ElseIf fld.Type = wdFieldMacroButton And (InStr(1, UCase(fld.Code), UCase("CommenceView")) > 0) Then
            sSearch = "CommenceView ["""
            sSearch2 = """]"
            iStart = InStr(1, fld.Code, sSearch) + Len(sSearch)
            iEnd = InStr(iStart, fld.Code, sSearch2)
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
            For Each prop In ActiveDocument.CustomDocumentProperties
                If Trim(prop.Value) = CmcField And InStr(1, prop.Name, "View") > 0 Then
                    FldName = prop.Name
                    bFound = True
                    Exit For
                End If
            Next prop
        ElseIf fld.Type = wdFieldMacroButton And (InStr(1, UCase(fld.Code), UCase("CommenceImage")) > 0) Then
            sSearch = "CommenceImage ["""
            sSearch2 = """]"
            iStart = InStr(1, fld.Code, sSearch) + Len(sSearch)
            iEnd = InStr(iStart, fld.Code, sSearch2)
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
            For Each prop In ActiveDocument.CustomDocumentProperties
                If Trim(prop.Value) = CmcField And InStr(1, prop.Name, "DirectImage") > 0 Then
                    FldName = prop.Name
                    bFound = True
                    Exit For
                End If
            Next prop
        ElseIf fld.Type = wdFieldMacroButton And (InStr(1, UCase(fld.Code), UCase("CommenceMeImage")) > 0) Then
            sSearch = "CommenceMeImage ["""
            sSearch2 = """]"
            iStart = InStr(1, fld.Code, sSearch) + Len(sSearch)
            iEnd = InStr(iStart, fld.Code, sSearch2)
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
            For Each prop In ActiveDocument.CustomDocumentProperties
                If Trim(prop.Value) = CmcField And InStr(1, prop.Name, "MeImage") > 0 Then
                    FldName = prop.Name
                    bFound = True
                    Exit For
                End If
            Next prop
        ElseIf fld.Type = wdFieldMacroButton And (InStr(1, UCase(fld.Code), UCase("CommenceRelatedImage")) > 0) Then
            sSearch = "CommenceRelatedImage ["""
            sSearch2 = """]"
            iStart = InStr(1, fld.Code, sSearch) + Len(sSearch)
            iEnd = InStr(iStart, fld.Code, sSearch2)
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
            For Each prop In ActiveDocument.CustomDocumentProperties
                If Trim(prop.Value) = CmcField And InStr(1, prop.Name, "RelatedImage") > 0 Then
                    FldName = prop.Name
                    bFound = True
                    Exit For
                End If
            Next prop
End If
        
        If Trim(CmcField) = "" Then
            'Application.Activate
            'Application.WindowState = wdWindowStateNormal
            'ActiveDocument.MailMerge.MainDocumentType = wdNotAMergeDocument
            'createConvertDDE = 0
            'GoTo Done
        ElseIf bFound = True Then
            fld.Select
            If FldName <> "" Then
                Options.ReplaceSelection = True
                Call ActiveDocument.Fields.Add(Selection.Range, wdFieldMergeField, FldName, True)
            Else
                fld.Delete
            End If
        End If
    
    createConvertDDE = 1
    GoTo Done
    
aproblem:
    createConvertDDE = 0
    
Done:
End Function


Sub createCreateContinueToolBar()
'
' Create the Commence Get Fields toolbar
'
    Dim CmcMenu As CommandBar
    Dim CmcBar As CommandBarControl

    CustomizationContext = ThisDocument
  
    On Error Resume Next
    CommandBars("Continue?").Delete
    On Error GoTo 0
  
    Set CmcMenu = CommandBars.Add(Name:="Continue?", Position:=msoBarFloating, MenuBar:=False, Temporary:=True)
    CmcMenu.Visible = False
    
    Set CmcBar = CommandBars("Continue?").Controls.Add(Type:=msoControlButton)
        'CmcBar.Width = 250
        CmcBar.Style = msoButtonCaption
        CmcBar.Caption = "Continue with Merge"
        CmcBar.OnAction = "createContinueMerge"
    Set CmcBar = CommandBars("Continue?").Controls.Add(Type:=msoControlButton)
        CmcBar.Caption = "Cancel"
        CmcBar.Style = msoButtonCaption
        CmcBar.OnAction = "createStopMerge"
        CmcBar.BeginGroup = True


    CmcMenu.Visible = True

End Sub

Sub createContinueMerge()
    Continue = True
    On Error Resume Next
    CommandBars("Continue?").Delete
    On Error GoTo 0
   
    Call Main
    
End Sub

Sub createStopMerge()
    Dim dsource As String
    
    dsource = Util.GetDocumentProperties("Datasource")
    If dsource <> "" Then 'then just doc, not a merge
        ActiveDocument.MailMerge.MainDocumentType = wdNotAMergeDocument
        If Util.DatasourceCleanup(dsource) < 0 Then
            'nothing
        End If
    End If
    
    Continue = False
    CommandBars("Continue?").Delete
    ActiveDocument.Saved = True
    ActiveDocument.Close SaveChanges:=False
    
    
End Sub

' handle document closing event
Sub CmcOnCloseDocument()
    MsgBox "Commence.CmcOnCloseDocument"
    
    Dim Doc

    Set Doc = Application.ActiveDocument
    Doc.Close
End Sub
'Sub CmcOnCloseDocument(ByVal Doc As Document, Cancel As Boolean)
'Sub CmcOnCloseDocument()
'    Dim dtype
'    Dim sdtype
'    Dim tmp
'    Dim Doc
'
'    Set Doc = Application.ActiveDocument
'
'    On Error Resume Next
'    sdtype = Util.GetDocumentProperties("Type")
'    If sdtype <> "" Then 'a letter template
'        If Val(sdtype) > 0 Then
'            If Doc.MailMerge.State > 1 Then 'then is a mailmerge
'                tmp = Doc.MailMerge.DataSource.Name
'                Doc.MailMerge.MainDocumentType = wdNotAMergeDocument
'                Util.DatasourceCleanup (tmp)
'                Doc.SaveAs
'            End If
'        End If
'    End If
'
'    Dim sDest As String
'    Dim snRows As String
'    sDest = Util.GetDocumentProperties("Dest")
'    snRows = Util.GetDocumentProperties("nRows")
'    If sDest = "" And snRows = "" Then
'        'in continue
'        On Error Resume Next
'        CommandBars("Continue?").Delete
'        On Error GoTo 0
'    End If
'
'    On Error Resume Next
'    CommandBars(COMMENCE_FIELDS).Visible = False
'    CommandBars(COMMENCE_VIEWS).Visible = False
'    On Error GoTo 0
'
'    If UCase(Doc.Name) = "Normal.dot" Then
'        NormalTemplate.Saved = True
'    End If
'
'    If Doc.Name = "CmcMerge.dot" Then
'        Doc.Saved = True
'    End If
'
'    Set Doc = Nothing
'    ActiveDocument.ActiveWindow.Close SaveChanges:=wdSaveChanges
'
'    'ThisDocument.Saved = True
'    'ThisDocument.Save
'    'Documents("CmcMerge.dot").Close savechanges:=False
'    'ThisDocument.Close savechanges:=true
'End Sub

'Sub printsingle()
'    'Application.MailingLabel.PrintOut
'End Sub


'Sub Test()
'
'  Dim ctl, sid, sid2
'
'For Each ctl In CommandBars("Standard").Controls
'    sid2 = ctl.Caption
'    sid = CStr(ctl.ID)
'Next ctl
'
'Bye:
'End Sub

' Office XP support : view not displayed properly during mail merge
' When View Merged Data button on Mail Merge toolbar is toggled view is displayed properly
' Same operation is performed here programatically for various word commands
Sub MailMergeFirstRecord()
    ActiveDocument.MailMerge.DataSource.ActiveRecord = wdFirstRecord
    ActiveDocument.MailMerge.ViewMailMergeFieldCodes = wdToggle
    ActiveDocument.MailMerge.ViewMailMergeFieldCodes = wdToggle
End Sub

Sub MailMergeLastRecord()
    ActiveDocument.MailMerge.DataSource.ActiveRecord = wdLastRecord
    ActiveDocument.MailMerge.ViewMailMergeFieldCodes = wdToggle
    ActiveDocument.MailMerge.ViewMailMergeFieldCodes = wdToggle
End Sub

Sub MailMergeNextRecord()
    ActiveDocument.MailMerge.DataSource.ActiveRecord = wdNextRecord
    ActiveDocument.MailMerge.ViewMailMergeFieldCodes = wdToggle
    ActiveDocument.MailMerge.ViewMailMergeFieldCodes = wdToggle
End Sub

Sub MailMergePrevRecord()
    If ActiveDocument.MailMerge.DataSource.ActiveRecord = 1 Then Exit Sub
    ActiveDocument.MailMerge.DataSource.ActiveRecord = wdPreviousRecord
    ActiveDocument.MailMerge.ViewMailMergeFieldCodes = wdToggle
    ActiveDocument.MailMerge.ViewMailMergeFieldCodes = wdToggle
End Sub

'Sub MailMergeGotoRecord()
'    ActiveDocument.MailMerge.DataSource.ActiveRecord = ???num
'    ActiveDocument.MailMerge.ViewMailMergeFieldCodes = wdToggle
'    ActiveDocument.MailMerge.ViewMailMergeFieldCodes = wdToggle
'End Sub

Private Function VerifyDocumenttype() As Boolean
    Dim documentType As String
    documentType = Util.GetDocumentProperties("type")
    If documentType = "1" Or documentType = "2" Then
        MsgBox "This menu command cannot be used with label and envelope templates. Use Word's Mail Merge command to select fields for this template.", _
                vbOKOnly, "Commence"
        
        VerifyDocumenttype = False
    Else
        VerifyDocumenttype = True
    End If
End Function

Public Function APMailMerge(category As String, itemName As String, templateName As String, _
                            templateFile As String, destination As Integer, _
                            fieldName As String, Optional connName As String, _
                            Optional connCategory As String) As Integer
    APMailMerge = -1
    
    '{ViewName}|fffd|{Type}|fffd|{Category}|fffd|{ItemName}|fffd|{FieldLabel}|fffd|{Template Name}|fffd|
    '{Template Filename}|fffd|{Destination}|fffd|{Preview}|fffd|{Rowcount}|fffd|{Letter Filename}
    APForm = "|fffd||fffd|" + category + "|fffd|" + itemName + "|fffd||fffd|" + templateName + "|fffd|" + _
             templateFile + "|fffd|" + CStr(destination) + "|fffd|0|fffd|1|fffd|"
    APMerge = True
    If connName = "" Then
        ' direct field
        isRelatedField = False
        recipientField = fieldName
    Else
        ' related field
        isRelatedField = True
        recipientField = connName + "__" + connCategory + "__" + fieldName
    End If
    Commence.Main
    
    APMerge = False
    APForm = ""
    APMailMerge = 0
End Function

Private Function ReportError(msgLine1 As String, Optional msgLine2 As String, _
    Optional source As String, Optional button As VbMsgBoxStyle = vbOKOnly) As Integer
    
    If APMerge Then
        Err.Raise 1000, source, msgLine1
    Else
        ReportError = MsgBox(msgLine1 + " " + msgLine2, button, "Commence")
    End If
End Function

Private Function GetRecipientKeys() As String
    On Error GoTo ErrHandler
    Dim pim As CommenceDB
    Dim cursor As ICommenceCursor
    Dim conv As ICommenceConversation
    Dim qrs As ICommenceQueryRowSet
    Dim itemNames As String, str As String, ctr As Integer
    Dim category As String
    Dim keyField As String, clarifyField As String
    Dim definitionAry
    
    Set pim = New CommenceDB
    Set cursor = pim.GetCursor(11, "", 0)
    
    category = cursor.category
    Set conv = pim.GetConversation("Commence", "GetData")
    
    str = conv.Request("[GetFieldNames(""" + category + """, |fffd|)]")
    keyField = Left(str, InStr(str, "|fffd|") - 1)
    
    str = conv.Request("[GetCategoryDefinition(""" + category + """, |fffd|)]")
    Util.CmcSplit definitionAry, str, "|fffd|"
    If UBound(definitionAry) = 3 Then clarifyField = definitionAry(3)

    cursor.SetColumn 0, keyField, 0
    If clarifyField <> "" Then cursor.SetColumn 1, clarifyField, 0
    
    For ctr = 0 To cursor.RowCount - 1
        Set qrs = cursor.GetQueryRowSet(1, 0)
        str = qrs.GetRowValue(0, 0, 0)
        If clarifyField <> "" Then _
            str = str & vbTab & qrs.GetRowValue(0, 1, 0)
        Set qrs = Nothing
        itemNames = itemNames + "|fffd|" + str
    Next
    
    ' remove first |fffd|
    itemNames = Right(itemNames, Len(itemNames) - 1)

    GetRecipientKeys = itemNames
ErrHandler:
    Set qrs = Nothing
    Set conv = Nothing
    Set cursor = Nothing
    Set pim = Nothing
End Function


Public Sub test()
Dim MergeDocPath As String
MergeDocPath = "D:\Project\Docs\Priti1.doc"

Dim DataDocPath As String
DataDocPath = "D:\Project\Docs\Priti1.doc"

Dim wdApp As Object
wdApp = CreateObject("Microsoft.Office.Word.Application")

Dim wdDoc As Object
wdDoc = CreateObject("Microsoft.Office.Word.Document")

'Try

'open template

wdApp.Visible = False

Set wdDoc = wdApp.Documents.Open(FileName:=MergeDocPath, ConfirmConversions:=False, ReadOnly:=False, AddToRecentFiles:=False, PasswordDocument:="", PasswordTemplate:="", Revert:=False, WritePasswordDocument:="", WritePasswordTemplate:="", Format:=wdOpenFormatAuto)

'open data source

Set wdApp.ActiveDocument.MailMerge.MainDocumentType = Word.WdMailMergeMainDocType.wdFormLetters

wdApp.ActiveDocument.MailMerge.OpenDataSource Name:=DataDocPath, Format:=wdOpenFormatAuto, ConfirmConversions:=False, ReadOnly:=False, LinkToSource:=True, AddToRecentFiles:=False, PasswordDocument:="", PasswordTemplate:="", Revert:=False, WritePasswordDocument:="", WritePasswordTemplate:="", Connection:="", SQLStatement:="", SQLStatement1:="", Openexclusive:=True, SubType:=wdMergeSubTypeOther


'toggle fields to print data values, not field names & do merge

wdApp.ActiveDocument.MailMerge.ViewMailMergeFieldCodes = 9999998

'wdDoc.MailMerge.DataSource.FirstRecord = 1

'wdDoc.MailMerge.DataSource.LastRecord = 2

'wdDoc.MailMerge.Execute()

 

'''print new document
''
''wdDoc.PrintOut(Range:=Microsoft.Office.Interop.Word.WdPrintOutRange.wdPrintAllDocument, _
''
''Item:=Microsoft.Office.Interop.Word.WdPrintOutItem.wdPrintDocumentContent, _
''
''Copies:=1, _
''
''Pages:="", _
''
''PageType:=Microsoft.Office.Interop.Word.WdPrintOutPages.wdPrintAllPages, _
''
''ManualDuplexPrint:=False, _
''
''Collate:=True, _
''
''Background:=True, _
''
''PrintToFile:=False, _
''
''PrintZoomColumn:=0, _
''
''PrintZoomRow:=0, _
''
''PrintZoomPaperWidth:=0, _
''
''PrintZoomPaperHeight:=0)
''
''
''
''wdDoc.Close(SaveChanges:=Microsoft.Office.Interop.Word.WdSaveOptions.wdDoNotSaveChanges)
''
''wdApp.Quit(SaveChanges:=Microsoft.Office.Interop.Word.WdSaveOptions.wdDoNotSaveChanges)
''
wdDoc = Nothing

wdApp = Nothing


End Sub
Attribute VB_Name = "CommenceEmail"
Option Explicit

Public Const EMAIL_CLIENT_REG_KEY As String = "EmailClient"
Public Const DEFAULT_EMAIL_CLIENT As String = "Default E-Mail Client"
Public Const MS_OUTLOOK As String = "Microsoft Outlook"
Private selEmailClient As String

' used while sending e-mail with default client
'Makarand Office64
'Public MSMAPI_Session As Object
'Public MSMAPI_messages As Object

' used while sending e-mail with outlook
Public objSession As Object
Public objsessionset As Boolean

Public Type OSVERSIONINFO
         dwOSVersionInfoSize As Long
         dwMajorVersion As Long
         dwMinorVersion As Long
         dwBuildNumber As Long
         dwPlatformId As Long
         szCSDVersion As String * 128
      End Type

      Global Const REG_SZ As Long = 1
      Global Const REG_DWORD As Long = 4
      Global Const HKEY_CURRENT_USER = &H80000001
      Global Const HKEY_LOCAL_MACHINE = &H80000002
      Global Const ERROR_NONE = 0
      Global Const ERROR_BADDB = 1
      Global Const ERROR_BADKEY = 2
      Global Const ERROR_CANTOPEN = 3
      Global Const ERROR_CANTREAD = 4
      Global Const ERROR_CANTWRITE = 5
      Global Const ERROR_OUTOFMEMORY = 6
      Global Const ERROR_INVALID_PARAMETER = 7
      Global Const ERROR_ACCESS_DENIED = 8
      Global Const ERROR_INVALID_PARAMETERS = 87
      Global Const ERROR_NO_MORE_ITEMS = 259

      Global Const KEY_ALL_ACCESS = &H3F

      Global Const REG_OPTION_NON_VOLATILE = 0
'Saket: To ensure backward compatibility with previous versions of Microsoft Office, you use the VBA7 constant
'Saket note: PtrSafe version of declaration used for Office 64
#If VBA7 Then
'Makarand Office64 <Added PtrSafe >
      Declare PtrSafe Function GetVersionEx Lib "kernel32" _
         Alias "GetVersionExA" _
               (ByRef lpVersionInformation As OSVERSIONINFO) As Long
'Makarand Office64 <Added PtrSafe >
      Public Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" _
               (ByVal hKey As Long) As Long
'Makarand Office64 <Added PtrSafe >
      Public Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" _
         Alias "RegOpenKeyExA" _
               (ByVal hKey As Long, _
               ByVal lpSubKey As String, _
               ByVal ulOptions As Long, _
               ByVal samDesired As Long, _
               phkResult As Long) As Long
'Makarand Office64 <Added PtrSafe >
      Public Declare PtrSafe Function RegQueryValueExString Lib "advapi32.dll" _
         Alias "RegQueryValueExA" _
               (ByVal hKey As Long, _
               ByVal lpValueName As String, _
               ByVal lpReserved As Long, _
               lpType As Long, _
               ByVal lpData As String, _
               lpcbData As Long) As Long
'Makarand Office64 <Added PtrSafe >
      Public Declare PtrSafe Function RegQueryValueExLong Lib "advapi32.dll" _
         Alias "RegQueryValueExA" _
               (ByVal hKey As Long, _
               ByVal lpValueName As String, _
               ByVal lpReserved As Long, _
               lpType As Long, lpData As Long, _
               lpcbData As Long) As Long
'Makarand Office64 <Added PtrSafe >
      Public Declare PtrSafe Function RegQueryValueExNULL Lib "advapi32.dll" _
         Alias "RegQueryValueExA" _
               (ByVal hKey As Long, _
               ByVal lpValueName As String, _
               ByVal lpReserved As Long, _
               lpType As Long, _
               ByVal lpData As Long, _
               lpcbData As Long) As Long
#Else
               Declare Function GetVersionEx Lib "kernel32" _
         Alias "GetVersionExA" _
               (ByRef lpVersionInformation As OSVERSIONINFO) As Long


      Public Declare Function RegCloseKey Lib "advapi32.dll" _
               (ByVal hKey As Long) As Long

      Public Declare Function RegOpenKeyEx Lib "advapi32.dll" _
         Alias "RegOpenKeyExA" _
               (ByVal hKey As Long, _
               ByVal lpSubKey As String, _
               ByVal ulOptions As Long, _
               ByVal samDesired As Long, _
               phkResult As Long) As Long

      Public Declare Function RegQueryValueExString Lib "advapi32.dll" _
         Alias "RegQueryValueExA" _
               (ByVal hKey As Long, _
               ByVal lpValueName As String, _
               ByVal lpReserved As Long, _
               lpType As Long, _
               ByVal lpData As String, _
               lpcbData As Long) As Long

      Public Declare Function RegQueryValueExLong Lib "advapi32.dll" _
         Alias "RegQueryValueExA" _
               (ByVal hKey As Long, _
               ByVal lpValueName As String, _
               ByVal lpReserved As Long, _
               lpType As Long, lpData As Long, _
               lpcbData As Long) As Long

      Public Declare Function RegQueryValueExNULL Lib "advapi32.dll" _
         Alias "RegQueryValueExA" _
               (ByVal hKey As Long, _
               ByVal lpValueName As String, _
               ByVal lpReserved As Long, _
               lpType As Long, _
               ByVal lpData As Long, _
               lpcbData As Long) As Long
#End If
               
               


      Public Function QueryValue _
               (sKeyName As String, _
               sValueName As String)

      Dim lRetVal As Long     'result of the API functions
      Dim hKey As Long        'handle of opened key
      Dim vValue As Variant   'setting of queried value

      lRetVal = RegOpenKeyEx(HKEY_CURRENT_USER, _
                           sKeyName, _
                           0, _
                           KEY_ALL_ACCESS, _
                           hKey)

      lRetVal = QueryValueEx(hKey, _
                           sValueName, _
                           vValue)
      QueryValue = vValue
      RegCloseKey (hKey)

      End Function
      Function QueryValueEx _
            (ByVal lhKey As Long, _
            ByVal szValueName As String, _
            vValue As Variant) As Long

         Dim cch As Long
         Dim lrc As Long
         Dim lType As Long
         Dim lValue As Long
         Dim sValue As String

         On Error GoTo QueryValueExError

         ' Determine the size and type of data to be read
         lrc = RegQueryValueExNULL(lhKey, szValueName, 0&, lType, 0&, cch)
         If lrc <> ERROR_NONE Then Error 5

         Select Case lType
            ' For strings
            Case REG_SZ:
               sValue = String(cch, 0)
               lrc = RegQueryValueExString(lhKey, szValueName, 0&, lType, _
                  sValue, cch)
               If lrc = ERROR_NONE Then
                  vValue = Left$(sValue, cch)
               Else
                  vValue = Empty
               End If
            ' For DWORDS
            Case REG_DWORD:
               lrc = RegQueryValueExLong(lhKey, szValueName, 0&, lType, _
                  lValue, cch)
               If lrc = ERROR_NONE Then vValue = lValue
            Case Else
               'all other data types not supported
               lrc = -1
         End Select

QueryValueExExit:
         QueryValueEx = lrc
         Exit Function
QueryValueExError:
         Resume QueryValueExExit
      End Function

Sub SendEmail(RecipName, eaddress, printfax)

    Dim alreadyaskedsubject As Boolean
    Dim DocTitle As String
    
         
        Dim sKeyName As String
         Dim sValueName As String
         Dim sDefaultUserProfile As String
         Dim osinfo As OSVERSIONINFO
         Dim retValue As Integer
   
      ' Set the properties of the message object.
      DocTitle = ActiveDocument.BuiltInDocumentProperties(wdPropertySubject)
      If DocTitle = "" And alreadyaskedsubject = False Then
          'On Error GoTo -1: On Error GoTo Bye 'If cancelled
          DocTitle = InputBox("Please enter a subject for the E-Mail Message or select Cancel to leave it blank.")
      End If
      alreadyaskedsubject = True
      
      
    'Util.FocusNewDocument (ActiveDocument)
    Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1
      
    Selection.WholeStory

'    MSMAPI_Login
'    On Error GoTo -1: On Error GoTo Bye 'If cancelled
'    MSMAPI_Send eaddress, DocTitle, Selection.Text, printfax
    Email_Login
    On Error GoTo -1: On Error GoTo Bye 'If cancelled
    Email_Send eaddress, DocTitle, Selection.Text, printfax
    
Bye:
      ' Log off using the session object.
'    MSMAPI_Logout
    Email_Logout
    If Err.Number <> 0 Then Err.Raise Err.Number, Err.source, Err.Description

End Sub

Private Sub MSMAPI_Login()
   'MsgBox "start msmapi_login"
   'Set CommenceEmail.MSMAPI_Session = CreateObject("MSMAPI.MAPISession")
  ' With CommenceEmail.MSMAPI_Session

   '   .NewSession = False
   '   .LogonUI = True
   '   .DownLoadMail = False
   '   .UserName = ""

   '   .SignOn
'        'Logon(ProfileName, Password, ShowDialog, NewSession, ParentWindowHandle, NoMail)
'        .LogOn "", , True, False

   'End With


   'MsgBox "end msmapi_login"
End Sub

Private Sub MSMAPI_Send(Recipient, Subject, Message, sendnow)
   'Makarand Office64
   'Set CommenceEmail.MSMAPI_messages = CreateObject("MSMAPI.MAPIMessages")

   'With CommenceEmail.MSMAPI_messages

   '   .SessionID = CommenceEmail.MSMAPI_Session.SessionID

   '   .Compose
   '   .MsgIndex = -1

      'recipient index (0-based), name, address and type
   '   .RecipIndex = 0
   '   .RecipDisplayName = Recipient
   '   .RecipAddress = Recipient
   '   .RecipType = 1 'RECIPTYPE_TO 'mapToList

   '   .MsgSubject = Subject

   '   .MsgNoteText = Message
      
   '   If sendnow = 0 Then
   '     MsgBox "The e-mail message has been created.  Press the Send button when you are ready to send this message.", 48, "CmcCreateEmail"
   '     .Send True   'true to preview
   '   Else
   '     .Send False  'false to send immediately
   '   End If
      
    '  DoEvents ' specific to VB -- like Sleep()
   'End With
   
    'Makarand Office64
    
'    Dim test As New MAPI
'    If Not test.SendIt(CStr(Recipient), CStr(Subject), CStr(Message), "", CBool(sendnow)) Then
'            MsgBox "Fail to send msmapi_send"
'    End If
   
    'VBA code only working for outlook, non outlook default email client not launching
    On Error GoTo Bye
    Dim CMCMapiObj As Letters.CMCMapi
    Set CMCMapiObj = New Letters.CMCMapi
    Dim lRet As Long
    CMCMapiObj.AddRecipientTo (CStr(Recipient))
    If sendnow = 0 Then
        MsgBox "The e-mail message has been created.  Press the Send button when you are ready to send this message.", 48, "CmcCreateEmail"
        lRet = CMCMapiObj.SendMailPopup(CStr(Subject), CStr(Message))
    Else
        lRet = CMCMapiObj.SendMailDirect(CStr(Subject), CStr(Message))
    End If

    If lRet > 0 Then
       MsgBox ("MAPISendMail failed! " + CMCMapiObj.GetLastError())
    End If

  
Bye:
    CMCMapiObj = Nothing
    
   'Makarand Office64
   'Set CommenceEmail.MSMAPI_messages = Nothing
'   If Err.Number <> 0 Then
'        MSMAPI_Send = False
'   Else
'        MSMAPI_Send = True
'   End If
   'MsgBox "end msmapi_send"
End Sub

Private Sub MSMAPI_Logout()
    'MsgBox "start msmapi_logout"
    
   'end messaging session and sign user off
   'CommenceEmail.MSMAPI_Session.SignOff
   'Set CommenceEmail.MSMAPI_Session = Nothing
        
    'MsgBox "end msmapi_logout"
End Sub

Private Sub outlook_Login()
    Dim sKeyName As String
    Dim sValueName As String
    Dim sDefaultUserProfile As String
    Dim osinfo As OSVERSIONINFO
    Dim retValue As Integer
    
    ' Log on using the session object.
    ' Specify a valid profile name if you want to
    ' avoid the logon dialog box.
      
On Error GoTo ErrorHandler
         '<WhiteHedge - Makarand - CDO replacement in Redemption RDO>
         'Set objSession = CreateObject("MAPI.Session")
         Set objSession = CreateObject("Redemption.RDOSession")
         'Try to logon.  If it fails, the most likely reason is that you do
         'not have an open session.  Error -2147221231  MAPI_E_LOGON_FAILED
         'will return.  Trap the error in the ErrorHandler
         objSession.LogOn ShowDialog:=False, NewSession:=False
         GoTo KeepGoing:

'Testing Code - get the messages from the inbox and display subject.
'Dim Inbox, Msg As Object
'Set Inbox = CommenceEmail.MSMAPI_Session.GetDefaultFolder(6)
'For Each Msg In Inbox.Items
'  MsgBox (Msg.subject)
'Next

ErrorHandler:
         Select Case Err.Number
            Case -2147221231  'MAPI_E_LOGON_FAILED
               'Need to find out what OS is in use, the keys are different
               'for WinNT and Win95.
               osinfo.dwOSVersionInfoSize = 148
               osinfo.szCSDVersion = Space$(128)
               retValue = GetVersionEx(osinfo)
               Select Case osinfo.dwPlatformId
                  Case 0   'Unidentified
                     MsgBox "Unidentified Operating System.  " & _
                        "Can't log onto messaging."
                     Exit Sub
                  Case 1   'Win95
                     sKeyName = "Software\Microsoft\" & _
                                "Windows Messaging " & _
                                "Subsystem\Profiles"

                  Case 2   'NT
                      sKeyName = "Software\Microsoft\Windows NT\" & _
                                 "CurrentVersion\" & _
                                 "Windows Messaging Subsystem\Profiles"
               End Select

               sValueName = "DefaultProfile"
               sDefaultUserProfile = QueryValue(sKeyName, sValueName)
               objSession.LogOn profileName:=sDefaultUserProfile, _
                                ShowDialog:=False
               GoTo KeepGoing
            Case Else
               MsgBox "An error has occured while attempting" & Chr(10) & _
               "To create and logon to a new CDO (1.x) session." & _
               Chr(10) & "Please report the following error to your " & _
               "System Administrator." & Chr(10) & Chr(10) & _
               "Error Location: frmMain.StartMessagingAndLogon" & _
               Chr(10) & "Error Number: " & Err.Number & Chr(10) & _
               "Description: " & Err.Description
               GoTo Bye
         End Select

KeepGoing:
      'objSession.Logon ProfileName:=sProfile
      objsessionset = True
Bye:
End Sub


Private Sub outlook_Send(Recipient, Subject, Message, sendnow)
'Makarand Office64
'    Dim objRecipient As Object
'    Dim objMessage As Object
'
'    Dim retValue As Integer
'    Dim alreadyaskedsubject As Boolean
'    Dim DocTitle As String
'
'
'      ' Add a new message object to the OutBox.
'      Set objMessage = objSession.Outbox.Messages.Add
'
'      ' Add a recipient object to the objMessage.Recipients collection.
'      Set objRecipient = objMessage.Recipients.Add
'
'      ' Set the properties of the recipient object.
'       objRecipient.Address = "SMTP:" + Recipient ' "SMTP:" + eaddress
'       objRecipient.Type = 1
'      objRecipient.Name = Recipient 'eaddress 'PlainName
'
'    objMessage.Subject = Subject
'    objMessage.Text = Message 'Selection.Text
'      On Error GoTo -1: On Error GoTo Bye 'If cancelled
'
'      'Put back in if want it to check for valid address
'       'objRecipient.Resolve
'       objMessage.Update
'
'    If sendnow = 0 Then
'        MsgBox "The e-mail message has been created.  Press the Send button when you are ready to send this message.", 48, "CmcCreateEmail"
'        objMessage.Send showDialog:=True
'    Else
'        objMessage.Send showDialog:=False
'    End If
'    On Error GoTo 0
'Bye:
'      ' Log off using the session object.
'bye2:
'
'    Set objRecipient = Nothing
'    Set objMessage = Nothing
'    'Options.ReplaceSelection = rselection
'    If Err.Number <> 0 Then Err.Raise Err.Number, Err.source, Err.Description

    
 'Makarand Office64
    Dim objMessage As Object
    Dim Drafts As Object
    On Error GoTo -1: On Error GoTo Bye 'If cancelled

    Set Drafts = objSession.GetDefaultFolder(16) ' olFolderDrafts
    Set objMessage = Drafts.Items.Add
    With objMessage
        '.To = Join(ToRecipients, "; ")
        .To = CStr(Recipient)
        .Subject = CStr(Subject)
        .Body = CStr(Message)
        .Save
        If sendnow = 0 Then
            MsgBox "The e-mail message has been created.  Press the Send button when you are ready to send this message.", 48, "CmcCreateEmail"
            .DoAction (0)
        Else
            .Send
        End If
    End With
Bye:
    Set objMessage = Nothing
    Set Drafts = Nothing
    'Options.ReplaceSelection = rselection
    If Err.Number <> 0 Then Err.Raise Err.Number, Err.source, Err.Description

End Sub


Private Sub outlook_Logout()
    If objsessionset = True Then
        objSession.Logoff
    End If
    Set objSession = Nothing
End Sub


Public Sub Email_Login()
    selEmailClient = Util.GetCommenceLettersPref("EmailClient")
    ' Value is not available in regitry, set to default
    'Makarand [R31-9313]Made Outlook as a default login
    If selEmailClient = "" Then _
        selEmailClient = MS_OUTLOOK
    
    Select Case selEmailClient
        Case DEFAULT_EMAIL_CLIENT
            MSMAPI_Login
        Case MS_OUTLOOK
            outlook_Login
    End Select
End Sub

Public Sub Email_Send(Recipient, Subject, Message, sendnow)
    Select Case selEmailClient
        Case DEFAULT_EMAIL_CLIENT
            MSMAPI_Send Recipient, Subject, Message, sendnow
        Case MS_OUTLOOK
            outlook_Send Recipient, Subject, Message, sendnow
    End Select
End Sub

Public Sub Email_Logout()
    Select Case selEmailClient
        Case DEFAULT_EMAIL_CLIENT
            MSMAPI_Logout
        Case MS_OUTLOOK
            outlook_Logout
    End Select
End Sub


Attribute VB_Name = "CommenceFax"
Option Explicit

Public Sub sendWinFax(RecipName, FaxNum, SendFax)

    Dim faxdev As String
    Dim dq2$
    Dim OldPrinter
    Dim chan
    Dim s As String
    
    faxdev = "WinFax"

    dq2$ = Chr(34) + Chr(34)

    ' save the current printer setting
    OldPrinter = ActivePrinter
    
    Util.SetDocumentProperties "ActivePrinter", OldPrinter
    
    ' and select the fax printer
    ActivePrinter = faxdev

    chan = DDEInitiate(App:="FAXMNG", Topic:="Transmit")

    s = "recipient(" + Chr(34) + FaxNum + Chr(34) + ", " + dq2$ + "," + dq2$ + ","
    s = s + Chr(34) + RecipName + Chr(34) + ")"
    DDEPoke Channel:=chan, item:="sendfax", Data:=s

    DDETerminate Channel:=chan

    'Now send the FAX if SendFlag = 1, otherwise let the user do it manually
    If SendFax = 1 Then
        ActiveDocument.PrintOut Background:=False
    
        'Now reset the printer to the original setting
        ActivePrinter = OldPrinter
    End If

Abort:
End Sub

Attribute VB_Name = "CommenceLog"
Option Explicit

Sub logtoCommence()
    Dim LogItemName As String
    Dim CmcObj As New CommenceDB
    Dim c As Object
    Dim ItemCat As String
    Dim itemName As String
    Dim LinkFileName As String
    Dim LetterLogCat As String
    Dim share
    Dim str As String
    Dim i As Integer
    Dim FldsArray

'    Set gLetterObj = New Letters.MergeDB

    Set CmcObj = New CommenceDB
    Set c = CmcObj.GetConversation("Commence", "GetData")
    c.Request "[ClarifyItemNames(True)]"

    On Error Resume Next
    LetterLogCat = c.Request("[GetPreference(LetterLogCat)]")
    If LetterLogCat = "" Then
        MsgBox "The category to log letters has not been set in Commence.  Please go to Commence and set the Event Log Preferences."
        GoTo Done
    End If
    str = c.Request("[MarkActiveItem(|fffd|)]")
    If Err.Number = 121 Then   'error 121, no active view/item
        MsgBox "There is no item selected in Commence, please select an item and try again."
        GoTo Done
    End If
    ItemCat = Left(str, InStr(1, str, "|fffd|") - 1)
    itemName = Right(str, Len(str) - InStr(1, str, "|fffd|"))

    If ActiveDocument.Saved = False Then
        MsgBox "The document must be saved before logging and linking to Commence.  Please save and try again."
        GoTo Done
    End If

TryAgain:
    LogItemName = InputBox("Enter the name for the log item.", "Commence")
    If LogItemName = "" Then
        If MsgBox("You must enter a name for the item.  Do you wish to enter a name?", vbYesNo, "Commence") = vbYes Then
            GoTo TryAgain
        Else
            GoTo Done
        End If
    End If

    autoLogToCommence 1, 1, ActiveDocument.FullName, "", ItemCat, , , itemName, LogItemName

' TODO:
' Following code is replaces by call to autoLogToCommence()
' autoLogToCommence() is updated to handle manual logging
' Review update and remove commented block

'    'get the category from Commence
'    str = c.Request("[GetFieldCount(""" + LetterLogCat + """)]")
'    numFields = Val(str)
'    flds = c.Request("[GetFieldNames(""" + LetterLogCat + """,|fffd|)]")
'
'    Util.CmcSplit FldsArray, flds, "|fffd|"
'
'    'Get the Name field
'    LetCatNameField = FldsArray(0)
'
'    dfFound = False
'    typeFound = False
'    'Get the datafile file
'    For i = 1 To numFields - 1
'        fldType = c.Request("[GetFieldDefinition(""" + LetterLogCat + """,""" + FldsArray(i) + """,|fffd|)]")
'        If Left(fldType, InStr(1, fldType, "|fffd|") - 1) = "12" And dfFound = False Then
'            LetterDataFileFld = FldsArray(i)
'            dfFound = True
'        End If
'        If FldsArray(i) = "Type" And typeFound = False Then
'            LetterTypeFld = FldsArray(i)
'            typeFound = True
'        End If
'    Next i
'
'    'Get the connection fields
'    str = c.Request("[GetConnectionCount(""" + LetterLogCat + """)]")
'    numConnFields = Val(str)
'    Conns = c.Request("[GetConnectionNames(""" + LetterLogCat + """,|fffd|,%%)]")
'    Util.CmcSplit ConnsArray, Conns, "|fffd|"
'
'    'Check to see if has activity code
'    'Check to see if has result code
'    For i = 0 To numConnFields - 1
'        If InStr(1, ConnsArray(i), ItemCat) > 0 Then
'            LetterCatConn = LetterCatConn + ConnsArray(i) + "|fffd|"
'        ElseIf InStr(1, ConnsArray(i), "activityCode") > 0 Then
'            ActivityConn = ConnsArray(i)
'        ElseIf InStr(1, ConnsArray(i), "resultCode") > 0 Then
'            ResultConn = ConnsArray(i)
'        End If
'    Next i
'
'    LetterCatConn = Left(LetterCatConn, Len(LetterCatConn) - 1)
'
'    'Add the item
'    'tmp = LogItemName + " - " + ItemName
'    tmp = Left(LogItemName + " - " + ItemName + " - " + CStr(Now), 50)
'
'    r = c.Execute("[AddItem(""" + LetterLogCat + """,""" + tmp + """)]")
'    If LetterTypeFld <> "" Then
'        r = c.Execute("[EditItem(,,""" + LetterTypeFld + """,Letter Log)]")
'    End If
'
'    'Save the file and link it
'    LinkFileName = ActiveDocument.FullName
'    If LinkFileName <> "" Then
'        r = c.Execute("[EditItem(,,""" + LetterDataFileFld + """,""" + LinkFileName + """)]")
'    End If
'
'    'connect to active contact
'    If LetterCatConn <> "" Then
'        If InStr(1, LetterCatConn, "|fffd|") > 0 Then
'            Dim LetterCatConnArray() As String
'            Util.CmcSplit LetterCatConnArray, LetterCatConn, "|fffd|"
'            For k = 0 To UBound(LetterCatConnArray)
'                tmp = Left(LetterCatConnArray(k), InStr(1, LetterCatConnArray(k), "%%") - 1)
'                Tmp2 = Right(LetterCatConnArray(k), Len(LetterCatConnArray(k)) - InStr(1, LetterCatConnArray(k), "%%") - 1)
'                r = c.Execute("[AssignConnection(,,""" + tmp + """,""" + Tmp2 + """,""" + NameFldValue + """)]")
'            Next
'        Else
'            tmp = Left(LetterCatConn, InStr(1, LetterCatConn, "%%") - 1)
'            Tmp2 = Right(LetterCatConn, Len(LetterCatConn) - InStr(1, LetterCatConn, "%%") - 1)
'            r = c.Execute("[AssignConnection(,,""" + tmp + """,""" + Tmp2 + """,""" + ItemName + """)]")
'        End If
'    End If
'    ' set activity type connection
'    If ActivityConn <> "" Then
'        r = c.Execute("[AssignConnection(,,""" + Left(ActivityConn, InStr(1, ActivityConn, "%%") - 1) + """,""" + Right(ActivityConn, Len(ActivityConn) - InStr(1, ActivityConn, "%%") - 1) + """,""LTR"")]")
'    End If
'    ' set result type connection
'    If ResultConn <> "" Then
'        r = c.Execute("[AssignConnection(,,""" + Left(ResultConn, InStr(1, ResultConn, "%%") - 1) + """,""" + Right(ResultConn, Len(ResultConn) - InStr(1, ResultConn, "%%") - 1) + """,LPRN)]")
'    End If
'
'    share = Util.GetCommenceLettersPref("Shared")
'    If share = "0" Or share = "" Then
'        'do nothing
'    Else
'        r = c.Execute("[PromoteItemtoShared(,,)]")
'    End If
'
'    MsgBox "This document has been sucessfully logged and linked to Commence."
'aproblem2:
'
'aproblem:

Done:
    Set c = Nothing
    Set CmcObj = Nothing
'    Set gLetterObj = Nothing
End Sub


' 072502 - Added ItemName and LogItemName parameters for manual logging
' ItemName - key of selected item
' LogItemName - Name for log entry
' templateCategory - In case of manual logging this represents active item category
Function autoLogToCommence(nRows As Integer, Dest As Integer, LinkFileName As String, _
        templateName As String, templateCategory As String, _
        Optional ByVal itemNames As String, Optional DocName As String, _
        Optional ByVal itemName As String, _
        Optional ByVal LogItemName As String) As Boolean
        
    Dim LetterLogCat As String
    Dim flds As String
    Dim FldsArray() As String
    Dim LetCatNameField As String
    Dim fldType As String
    Dim LetterDataFileFld As String
    Dim LetterTypeFld As String
    Dim numConnFields As Integer
    Dim Conns As String
    Dim ConnsArray() As String
    Dim LetterCatConn As String
    Dim ResultConn As String
    Dim ActivityConn As String
    Dim NameFldValue As String
    Dim namefld As String
    Dim sTmp, Tmp2
    Dim dfFound As Boolean
    Dim typeFound As Boolean
    Dim ItemNamesArray() As String
    Dim HistoryIDFld As String
    Dim HistoryID As String
    Dim hidFound As Boolean
    Dim numFields As Integer
    
    Dim CmcObj As New CommenceDB
    Dim c As Object
    Dim i
    Dim r

    Dim catDefinition As String
    Dim clarifyFld As String
    Dim clarifyFldValue As String
    Dim definitionAry
    
    On Error Resume Next
    Set gLetterObj = New Letters.MergeDB
    Set CmcObj = New CommenceDB
    Set c = CmcObj.GetConversation("Commence", "MergeItem")
    c.Request "[ClarifyItemNames(True)]"
    
    Dim relatesToAccount As String
    relatesToAccount = c.Request("[GetConnectedItemNames(,,""Relates to"",""Account"")]")
        
    'get the category from Commence
    LetterLogCat = c.Request("[GetPreference(LetterLogCat)]")
    If LetterLogCat = "" Then
        'MsgBox "The category to log letters has not been set in Commence.  Please go to Commence and set the Event Log Preferences."
        autoLogToCommence = False
        GoTo aproblem2
    End If

    If DocName <> "" Then
        Documents(DocName).Activate
    End If

    On Error GoTo aproblem

    'templateName = ActiveDocument.BuiltInDocumentProperties(wdPropertySubject)
    'templateCategory = Util.GetDocumentProperties("Category")

    Util.CmcSplit ItemNamesArray, itemNames, "|fffd|"

    ' LogItemName is available in manual logging only
    If LogItemName <> "" Then
        NameFldValue = itemName
    Else
        ' create item name
        If nRows = 1 Then    'log single
            If Util.GetDocumentProperties("Type") = "-1" Then 'old type
                Util.GetLetterInformation tCat:=templateCategory
                If templateName = "" Then
                    templateName = "Letter Sent"
                End If
            End If
            'Get the Name field of the selected category
            flds = c.Request("[GetFieldNames(""" + templateCategory + """,|fffd|)]")
            namefld = Left(flds, InStr(1, flds, "|fffd|") - 1)
            NameFldValue = c.Request("[GetField(,,""" + namefld + """)]")
        
            catDefinition = c.Request("[GetCategoryDefinition(""" + templateCategory + """, |fffd|)]")
            Util.CmcSplit definitionAry, catDefinition, "|fffd|"
            If UBound(definitionAry) = 3 Then clarifyFld = definitionAry(3)
            If clarifyFld <> "" Then clarifyFldValue = c.Request("[GetField(,,""" + clarifyFld + """)]")
       
        ElseIf itemNames <> "" And nRows > 1 Then   'log multiple
            'put names into array
            If Util.GetDocumentProperties("Type") = "-1" Then 'old type
                Util.GetLetterInformation tCat:=templateCategory
                If templateName = "" Then
                    templateName = "Letter Sent"
                End If
            End If
            
            NameFldValue = "Multiple contacts"
        End If
    End If
    Set c = Nothing
    
    Set c = CmcObj.GetConversation("Commence", "GetData")
    c.Request "[ClarifyItemNames(True)]"
    
    i = c.Request("[GetFieldCount(""" + LetterLogCat + """)]")
    numFields = Val(i)
    flds = c.Request("[GetFieldNames(""" + LetterLogCat + """,|fffd|)]")

    Util.CmcSplit FldsArray, flds, "|fffd|"

    'Get the Name field
    LetCatNameField = FldsArray(0)

    dfFound = False
    typeFound = False
    hidFound = False
    
    'Get the datafile file
    For i = 1 To numFields - 1
        fldType = c.Request("[GetFieldDefinition(""" + LetterLogCat + """,""" + FldsArray(i) + """,|fffd|)]")
        
        If Left(fldType, InStr(1, fldType, "|fffd|") - 1) = "12" And dfFound = False Then
            LetterDataFileFld = FldsArray(i)
            dfFound = True
        End If
        
        If FldsArray(i) = "Type" And typeFound = False Then
            LetterTypeFld = FldsArray(i)
            typeFound = True
        End If
        
        If FldsArray(i) = "historyID" And hidFound = False Then
            HistoryIDFld = FldsArray(i)
            hidFound = True
        End If
    Next i

    'Get the connection fields
    i = c.Request("[GetConnectionCount(""" + LetterLogCat + """)]")
    numFields = Val(i)
    flds = c.Request("[GetConnectionNames(""" + LetterLogCat + """,|fffd|,%%)]")
    ReDim FldsArray(numFields)
    Util.CmcSplit FldsArray, flds, "|fffd|"

    'Check to see if has activity code
    'Check to see if has result code
    
    Dim EmployeeConn As Boolean, AccountConn As Boolean
    For i = 0 To numFields - 1
        If InStr(1, FldsArray(i), templateCategory) > 0 Then
            LetterCatConn = LetterCatConn + FldsArray(i) + "|fffd|"
        ElseIf InStr(1, FldsArray(i), "activityCode") > 0 Then
            ActivityConn = FldsArray(i)
        ElseIf InStr(1, FldsArray(i), "resultCode") > 0 Then
            ResultConn = FldsArray(i)
        ElseIf InStr(1, FldsArray(i), "Relates to%%Employee") > 0 Then
            EmployeeConn = True
        ElseIf InStr(1, FldsArray(i), "Relates to%%Account") > 0 Then
            AccountConn = True
        End If
    Next i

    LetterCatConn = Left(LetterCatConn, Len(LetterCatConn) - 1)

    'Add the item
    ' LogItemName is available in manual logging
    If LogItemName <> "" Then
        sTmp = Left(LogItemName + " - " + NameFldValue + " - " + str(Now), 50)
    Else
        sTmp = Left(templateName + " - " + NameFldValue + " - " + str(Now), 50)
    End If
        
    If HistoryIDFld <> "" Then
        Dim vNumber As String
        vNumber = RandomNumber(2) & RandomLetter(2)
        If Len(Month(Date)) < 2 Then
            ' Add zero in front of month
            HistoryID = "0" & Month(Date) & Right(Year(Date), 2) & "-" & vNumber
        Else
            ' Don't add zero in front of month
            HistoryID = Month(Date) & Right(Year(Date), 2) & "-" & vNumber
        End If
        r = c.Execute("[AddItem(""" + LetterLogCat + """,""" + sTmp + """,""" + HistoryID + """)]")
    Else
        r = c.Execute("[AddItem(""" + LetterLogCat + """,""" + sTmp + """)]")
    End If
    
    If LetterTypeFld <> "" Then
        On Error Resume Next
        r = c.Execute("[EditItem(,,""" + LetterTypeFld + """,Letter Log)]")
        On Error GoTo aproblem
    End If

    'Save the file and link it
    If LinkFileName <> "" Then
        ActiveDocument.Saved = True
        ActiveDocument.SaveAs FileName:=LinkFileName
        r = c.Execute("[EditItem(,,""" + LetterDataFileFld + """,""" + LinkFileName + """)]")
    End If
    
    If LetterCatConn <> "" Then
        If InStr(1, LetterCatConn, "|fffd|") > 0 Then
            Dim LetterCatConnArray() As String
            Util.CmcSplit LetterCatConnArray, LetterCatConn, "|fffd|"
            Dim k As Integer
            For k = 0 To UBound(LetterCatConnArray)
                sTmp = Left(LetterCatConnArray(k), InStr(1, LetterCatConnArray(k), "%%") - 1)
                Tmp2 = Right(LetterCatConnArray(k), Len(LetterCatConnArray(k)) - InStr(1, LetterCatConnArray(k), "%%") - 1)
                On Error Resume Next
                If itemNames = "" Then
                  If clarifyFldValue = "" Then
                     r = c.Execute("[AssignConnection(,,""" + sTmp + """,""" + Tmp2 + """,""" + NameFldValue + """)]")
                  Else
                     r = c.Execute("[AssignConnection(,,""" + sTmp + """,""" + Tmp2 + """,""" + NameFldValue + vbTab + clarifyFldValue + """)]")
                  End If
                Else
                    For i = 0 To nRows - 1
                        r = c.Execute("[AssignConnection(,,""" + sTmp + """,""" + Tmp2 + """,""" + ItemNamesArray(i) + """)]")
                    Next i
                End If
                On Error GoTo aproblem
            Next
        Else
            If LetterCatConn <> "" Then
            sTmp = Left(LetterCatConn, InStr(1, LetterCatConn, "%%") - 1)
            Tmp2 = Right(LetterCatConn, Len(LetterCatConn) - InStr(1, LetterCatConn, "%%") - 1)
            On Error Resume Next
            If itemNames = "" Then
               If clarifyFldValue = "" Then
                  r = c.Execute("[AssignConnection(,,""" + sTmp + """,""" + Tmp2 + """,""" + NameFldValue + """)]")
               Else
                  r = c.Execute("[AssignConnection(,,""" + sTmp + """,""" + Tmp2 + """,""" + NameFldValue + vbTab + clarifyFldValue + """)]")
               End If
            Else
                For i = 0 To nRows - 1
                    r = c.Execute("[AssignConnection(,,""" + sTmp + """,""" + Tmp2 + """,""" + ItemNamesArray(i) + """)]")
                Next i
            End If
            On Error GoTo aproblem
            End If
        End If
    End If
    
    On Error Resume Next
    ' CRM specific connections
    If ActivityConn <> "" Then
        r = c.Execute("[AssignConnection(,,""" + Left(ActivityConn, InStr(1, ActivityConn, "%%") - 1) + """,""" + Right(ActivityConn, Len(ActivityConn) - InStr(1, ActivityConn, "%%") - 1) + """,""LTR"")]")
    End If
    
    If ResultConn <> "" Then
        If Dest = 1 Then
            sTmp = "LPRN"
        ElseIf Dest = 2 Then
            sTmp = "SFAX"
        ElseIf Dest = 3 Then
            sTmp = "SEML"
        End If
        r = c.Execute("[AssignConnection(,,""" + Left(ResultConn, InStr(1, ResultConn, "%%") - 1) + """,""" + Right(ResultConn, Len(ResultConn) - InStr(1, ResultConn, "%%") - 1) + """,""" + sTmp + """)]")
    End If
    
    ' Employee connection
    If EmployeeConn Then
        c.Execute "[AssignConnection(,,""Relates to"",""Employee"",""(-Me-)"")]"
    End If
    
    ' Account connection
    If AccountConn Then
        If itemNames = "" Then
            c.Execute "[AssignConnection(,,""Relates to"",""Account"",""" + relatesToAccount + """)]"
        Else
            Dim ctr As Integer
            Dim conv As ICommenceConversation
            Set conv = CmcObj.GetConversation("Commence", "GetData")
            conv.Request "[ClarifyItemNames(True)]"
            For ctr = 0 To nRows - 1
                relatesToAccount = conv.Request("[GetConnectedItemNames(""Contact"",""" + ItemNamesArray(ctr) + """,""Relates to"",""Account"")]")
                c.Execute "[AssignConnection(,,""Relates to"",""Account"",""" + relatesToAccount + """)]"
            Next
        End If
    End If
    
    ' share the item that was just added
    c.Execute "[PromoteItemToShared(,)]"
    
    If Util.GetCommenceLettersPref("ShowLogItem") = "1" Then
       c.Execute "[ShowItem(,)]"
    End If

    autoLogToCommence = True

aproblem2:
    Set c = Nothing
    Set conv = Nothing
    Set CmcObj = Nothing
    Set gLetterObj = Nothing

aproblem:

End Function

' Following method is not currently used
Function autoLogToCommenceEmailPref(nRows As Integer, Dest As Integer, LinkFileName As String, templateName As String, templateCategory As String, Optional ByVal itemNames As String, Optional DocName As String) As Boolean
    Dim LetterLogCat As String
    Dim flds As String
    Dim FldsArray() As String
    Dim LetCatNameField As String
    Dim fldType As String
    Dim LetterDataFileFld As String
    Dim LetterTypeFld As String
    Dim numConnFields As Integer
    Dim Conns As String
    Dim ConnsArray() As String
    Dim LetterCatConn As String
    Dim ResultConn As String
    Dim ActivityConn As String
    Dim NameFldValue As String
    Dim namefld As String
    Dim sTmp, Tmp2
    Dim dfFound As Boolean
    Dim typeFound As Boolean
    Dim ItemNamesArray() As String
    
    Dim CmcObj As New CommenceDB
    Dim c As Object
    Dim i
    Dim r
    
    On Error Resume Next
    Set CmcObj = New CommenceDB
    Set c = CmcObj.GetConversation("Commence", "MergeItem")
    c.Request "[ClarifyItemNames(True)]"
    Util.CmcSplit ItemNamesArray, itemNames, "|fffd|"

    If itemNames = "" And nRows = 1 Then    'log single

        If Util.GetDocumentProperties("Type") = "-1" Then 'old type
            Util.GetLetterInformation tCat:=templateCategory
            If templateName = "" Then
                templateName = "Letter Sent"
            End If
        End If
        'Get the Name field of the selected category
        flds = c.Request("[GetFieldNames(""" + templateCategory + """,|fffd|)]")
        namefld = Left(flds, InStr(1, flds, "|fffd|") - 1)
        NameFldValue = c.Request("[GetField(,,""" + namefld + """)]")

    ElseIf itemNames <> "" And nRows > 1 Then   'log multiple
        'put names into array
        If Util.GetDocumentProperties("Type") = "-1" Then 'old type
            Util.GetLetterInformation tCat:=templateCategory
            If templateName = "" Then
                templateName = "Letter Sent"
            End If
        End If
        NameFldValue = "Multiple contacts"
    End If

    Dim Cmc As CommenceDB, emaillog As ICommenceCursor, addrowset As ICommenceAddRowSet
    Dim colnumber, Ret
    
    Set Cmc = New CommenceDB
    ' create new Email log record
    Set emaillog = Cmc.GetCursor(9, "", 0)
    Set addrowset = emaillog.GetAddRowSet(1, 4)
   
    'Add the item
    colnumber = addrowset.GetColumnIndex("Subject", 0)
    sTmp = Left(templateName + " - " + NameFldValue + " - " + str(Now), 50)
    Ret = addrowset.ModifyRow(0, colnumber, sTmp, 0)
    
    ' type
    colnumber = addrowset.GetColumnIndex("Message Type", 0)
    Ret = addrowset.ModifyRow(0, colnumber, "Letter Log", 0)
    
    ' connection
    colnumber = addrowset.GetColumnIndex("For Contact", 0)
    If itemNames = "" Then
            Ret = addrowset.ModifyRow(0, colnumber, NameFldValue, 0)
    Else
        For i = 0 To nRows - 1
            Ret = addrowset.ModifyRow(0, colnumber, ItemNamesArray(i), 0)
        Next i
    End If
    
    'Save the file and link it
    If LinkFileName <> "" Then
        ActiveDocument.Saved = True
        ActiveDocument.SaveAs FileName:=LinkFileName
        'r = c.Execute("[EditItem(,,""" + LetterDataFileFld + """,""" + LinkFileName + """)]")
        colnumber = addrowset.GetColumnIndex("Message File", 0)
        Ret = addrowset.ModifyRow(0, colnumber, LinkFileName, 0)
    End If

    Ret = addrowset.Commit(0)
Done:
    autoLogToCommenceEmailPref = True
    
aproblem2:
    Set c = Nothing
    Set CmcObj = Nothing
    Set gLetterObj = Nothing

aproblem:
    
End Function


' -----------------------------------------------------------------------------
' Generate a Random Number
' -----------------------------------------------------------------------------
Function RandomNumber(ByVal Digits)
RandomNumber = ""
Randomize Timer
Dim Rand
Dim i
        For i = 1 To Digits
                Rand = Rand & Int(Rnd * 9)
        Next
        RandomNumber = Rand
End Function
' -----------------------------------------------------------------------------
' Generate a Random Letter
' -----------------------------------------------------------------------------
Function RandomLetter(ByVal Digits)
        Randomize Timer
        Dim Rand, i, X, Rand2, y
        Dim Index(26)
                Index(0) = "A"
                Index(1) = "B"
                Index(2) = "C"
                Index(3) = "D"
                Index(4) = "E"
                Index(5) = "F"
                Index(6) = "G"
                Index(7) = "H"
                Index(8) = "I"
                Index(9) = "J"
                Index(10) = "K"
                Index(11) = "L"
                Index(12) = "M"
                Index(13) = "N"
                Index(14) = "O"
                Index(15) = "P"
                Index(16) = "Q"
                Index(17) = "R"
                Index(18) = "S"
                Index(19) = "T"
                Index(20) = "U"
                Index(21) = "V"
                Index(22) = "W"
                Index(23) = "X"
                Index(24) = "Y"
                Index(25) = "Z"

        For i = 1 To Digits
                Rand2 = Int((25 - 1 + 1) * Rnd + 1)
                RandomLetter = RandomLetter & Index(Rand2)
        Next

End Function

' -----------------------------------------------------------------------------
Attribute VB_Name = "CommenceOpenTemplate"
Option Explicit

Sub Main()
    Dim sdocType As String
    Dim scat As String
    
    ' office 97 ?
    If Left(Application.version, 3) = "8.0" Then
        ' handle template open event (not supported by office 97)
        OpenTemplateProcessing Documents(Application.ActiveDocument)
    End If

    'check if already open
    
    sdocType = Util.GetDocumentProperties("Type")
    'Util.UpdateCommenceMenu sdocType
            
    scat = Util.GetDocumentProperties("Category")
    If sdocType = "" And scat = "" Then    'old
        Util.SetDocumentProperties "Type", "-1"
    End If
    If sdocType = "0" And scat <> "" Then
        Commence.mnuInsertCommenceField
    End If
    If Val(sdocType) > 2 Then 'something is wrong
        Util.SetDocumentProperties "Type", "0"
    End If
    ActiveDocument.Saved = True
    ActiveDocument.Save
    
End Sub

' replaces office2000 App_DocumentOpen event handler
'   since office 97 does not support this event
Sub OpenTemplateProcessing(ByVal Doc As Document)
    Dim dtype
    Dim sdtype
    Dim tmp

    Set gLetterObj = New Letters.MergeDB
    On Error Resume Next
    Documents(Doc).Activate
    sdtype = Util.GetDocumentProperties("Type")
    If sdtype <> "" Then 'a regular document
        If Val(sdtype) > 0 Then         'Appropriate check, should it be =2,=3????
            docType = Val(sdtype)
            If Doc.MailMerge.State > 1 Then 'then is a mailmerge
                tmp = Doc.MailMerge.DataSource.Name
                Doc.MailMerge.MainDocumentType = wdNotAMergeDocument
                Util.DatasourceCleanup (tmp)
            End If
            If Doc.MailMerge.State < 2 Then
                CommenceTemplate.resetTemplateOnOpen
            End If
        End If
        Application.Activate
        Documents(Doc).Activate
    End If
    Set gLetterObj = Nothing
End Sub

Attribute VB_Name = "CommenceTemplate"
Option Explicit
'Public numberFlds As Integer
'Public numberRelatedFlds As Integer
'Public meFlds As String
'Public numberMeFlds As Integer
Public Cancelled As Boolean
Public templateCategory As String

Sub Main()
'Sub Main(Optional TemplateFileName As String, Optional TemplateName As String, Optional Category As String)
    'docType
    '   0 - regular letter
    '   1 - Label
    '   2 - Envelope

    'wherefrom
    '   True - from Word
    
    Dim TMPLTSDirectory As String
    Cancelled = False
    
    Set gLetterObj = New Letters.MergeDB
    
    If FromWord = False Then
    'If (templateName = "") And (TemplateFileName = "") And (templateCategory = "") Then  'came from Commence
        'FromWord = False
        Documents.Add
        If Util.GetLetterInformation(tName:=templateName, tCat:=templateCategory, tfName:=TemplateFileName) > 0 Then
            GoTo aproblem
        End If
        Util.SetDocumentProperties "SavedToCommence", 1
        'Documents.Add
    End If
    
   
    On Error GoTo aproblem
    
    If FromWord = False Then
        'prompt for what type of template
        With frmTemplateType
            .lstType.AddItem "Letter"
            .lstType.AddItem "Label"
            .lstType.AddItem "Envelope"
            .lstType.Selected(0) = True
            .Show
            If Cancelled Then
                Util.SetDocumentProperties "Type", "-1"
                ActiveDocument.Saved = True
                ActiveDocument.SaveAs FileName:=TemplateFileName
                ActiveDocument.Close SaveChanges:=False
                GoTo Done
            End If
        End With
    End If
    
    docType = Val(Util.GetDocumentProperties("Type"))
    
    Call createCommenceTemplate(TemplateFileName, templateName, docType)

    'save the template
    If Not Cancelled Then
    If FromWord = False And docType > 0 Then
        'edit or add label/envelope and it was initiated from Commence
        Call savefromCommenceTemplate(TemplateFileName)
    ElseIf FromWord = True And docType > 0 Then
        'added via Commence menu from Word and it is a label/envlope
        CommenceTemplate.saveToCommenceTemplate tName:=templateName, isNew:=True
    End If
    End If
    GoTo Done
aproblem:
    MsgBox ("An error has occured in the Commence macros (CommenceTemplate.Main): " + str(Err.Number) + " " + Err.Description)
Done:
    templateName = ""
    TemplateFileName = ""
    templateCategory = ""
    Set gLetterObj = Nothing
End Sub

Sub createCommenceTemplate(TemplateFileName As String, templateName As String, templateType As Integer)
    Dim FieldCount As Integer
    Dim i As Long
    Dim j As Long
    Dim FieldArray
    Dim templateTypeText As String
    Dim tmplFields() As String
    Dim tmplheader() As String
    Dim FileName As String
    Dim meFields() As String, meHeader() As String
    Dim tmplViews() As String, tmplViewsHeader() As String
    Dim RelatedFields() As String, RelatedHeader() As String
    Dim ImageFields() As String, ImageHeader() As String
    Dim MeImageFields() As String, MeImageHeader() As String
    Dim RelatedImageFields() As String, RelatedImageHeader() As String
    Dim tmp As String
    
    On Error GoTo aproblem

    'Util.UpdateCommenceMenu templateType

    'show fieldcodes
    ActiveWindow.VIEW.ShowFieldCodes = True

    'Save the selected category
    Util.SetDocumentProperties "Category", templateCategory
    
    'Save the template name into the built in doc properties
    If FromWord = False Then
        ActiveDocument.BuiltInDocumentProperties(wdPropertySubject) = templateName
    End If

    Select Case templateType
        Case 0      'letter
                        
            'Save
            If FromWord = False Then
                ActiveDocument.SaveAs FileName:=TemplateFileName, FileFormat:=wdFormatTemplate
            Else    'started from word
                CommenceTemplate.saveToCommenceTemplate tName:=templateName, isNew:=True
            End If
            
            'Show the fields toolbar
            Commence.mnuInsertCommenceField
            GoTo Done
        Case 1, 2   'Label and Envelope
            
            'Select Fields to use
            If Util.GetFields(category:=templateCategory, numFields:=FieldCount, flds:=tmp, Indirect:=True, image:=True) > 0 Then
                GoTo aproblem
            End If
            Util.CmcSplit FieldArray, tmp, "|fffd|"
            With frmTemplateFields
                If templateType = 1 Then 'Label
                    .lblCategory = "Select the fields to be used in the Label Template"
                    .Caption = "Select Fields for Label Template"
                    .lblselCategory = "Category: " + templateCategory
                Else
                    .lblCategory = "Select the fields to be used in the Envelope Template"
                    .Caption = "Select Fields for Envelope Template"
                    .lblselCategory = "Category: " + templateCategory
                End If
                For i = 0 To FieldCount
                    If i = 0 Then
                        .lstFields.AddItem ("(-Me-)")
                        .lstFields.List(i, 1) = ""
                    Else
                        .lstFields.AddItem (FieldArray(i - 1))
                        .lstFields.List(i, 1) = ""
                    End If
                Next i
                .lstFields.MultiSelect = fmMultiSelectMulti
                .Show
            End With
                
            If Cancelled Then
                GoTo Done
            End If
            
            If Util.GetTemplateFields(tmplFields, tmplheader, ImageFields, ImageHeader, RelatedFields, RelatedHeader, RelatedImageFields, RelatedImageHeader, meFields, meHeader, MeImageFields, MeImageHeader, tmplViews, tmplViewsHeader) > 0 Then
                'Something happened
                GoTo aproblem
            End If
            tmp = ""
            'put the fields back together
            'If UBound(tmplheader) > 0 Then
            '    tmp = Join(tmplheader, "|fffd|")
            'End If
            'If UBound(ImageHeader) > 0 Then
            '    If tmp = "" Then
            '        tmp = Join(ImageHeader, "|fffd|")
            '    Else
            '        tmp = tmp + "|fffd|" + Join(ImageHeader, "|fffd|")
            '    End If
            'End If
            'tmplheader = Util.CmcSplit(tmp, "|fffd|")
                       
            'For i = 0 To UBound(tmplheader) - 1
            '    For j = 0 To UBound(tmplheader) - 1
            '        If tmplheader(j) > tmplheader(j + 1) Then
            '            tmp = tmplheader(j)
            '            tmplheader(j) = tmplheader(j + 1)
            '            tmplheader(j + 1) = tmp
            '        End If
            '    Next
            'Next

            'Get the filename for the datasource
            'filename = Util.GetTEMPDirectory + "\" + Util.GetFilename(".HTM")
            FileName = Util.GetTEMPDirectory + "\" + Util.GetFilename(".HTML")
            
            'Get the datasource
            Util.GetMergeDatasource FileName, fType:=0, bSample:=True, nRows:=1, fArray:=tmplFields, fhArray:=tmplheader, iArray:=ImageFields, ihArray:=ImageHeader, rArray:=RelatedFields, rhArray:=RelatedHeader, riArray:=RelatedImageFields, rihArray:=RelatedImageHeader, mArray:=meFields, mhArray:=meHeader, miArray:=MeImageFields, mihArray:=MeImageHeader, vArray:=tmplViews, vhArray:=tmplViewsHeader
                            
            If docType = 1 Then
                ActiveDocument.MailMerge.MainDocumentType = wdMailingLabels
                templateTypeText = "Label"
            Else
                ActiveDocument.MailMerge.MainDocumentType = wdEnvelopes
                templateTypeText = "Envelope"
            End If
    
            'Attach source
            'FileName = "c:\work\macros\source.doc"
           
            ActiveDocument.MailMerge.OpenDataSource Name:=FileName, _
                ConfirmConversions:=False, ReadOnly:=True, LinkToSource:=True, _
                AddToRecentFiles:=False, PasswordDocument:="", PasswordTemplate:="", _
                WritePasswordDocument:="", WritePasswordTemplate:="", Revert:=False, _
                Format:=wdOpenFormatAuto, Connection:="", SQLStatement:="", SQLStatement1 _
                :=""

            MsgBox "In the following Merge Helper dialog box, do the following: " + Chr(10) + _
                    "    1. Choose the " + templateTypeText + " size and press OK" + Chr(10) + _
                    "    2. Select the fields for the Template using 'Insert Merge Fields' and press OK." + Chr(10) + _
                    "    3. Close the Merge Helper dialog box by pressing Close.", vbOKOnly, "Commence"
            
            'Try to open the Setup dialog box
            SendKeys "%s"
            With Dialogs(wdDialogMailMergeHelper)
                .Merge = 0
                .Show
            End With

    End Select
    
    GoTo Done
aproblem:
    Cancelled = True
    MsgBox ("An error has occured in the Commence macros (createCommenceTemplate): " + str(Err.Number) + " " + Err.Description)
Done:

End Sub
Sub savefromCommenceTemplate(fName As String)

    Dim TempSaveProperties
    Dim i
    Dim a

    On Error GoTo aproblem
    
    
    If haveActiveTemplate Then

        Options.AllowFastSave = False
        ActiveDocument.Saved = False
        
        'Make sure not prompted for the properties
        TempSaveProperties = Options.SavePropertiesPrompt
        Options.SavePropertiesPrompt = False
    
        On Error Resume Next
        ActiveDocument.AttachedTemplate = ""
        ActiveDocument.SaveAs FileName:=fName, FileFormat:=wdFormatTemplate
   
        'Return the prompt value
        Options.SavePropertiesPrompt = TempSaveProperties
        
  Else
    Cancelled = True
    MsgBox "There is no document to save.", vbOKOnly, "Commence"
  End If
  
  GoTo Bye

aproblem:
    Cancelled = True
    MsgBox ("An error has occured in the Commence macros (savefromCommenceTemplate): " + str(Err.Number) + " " + Err.Description)
  
Bye:
  On Error GoTo 0

End Sub

Function saveTemplateUpdateFieldsUsed(fld As Field, cntr As Integer) As Integer

'Updates the custom document properties with the new fields used

    Dim i, N
    Dim CmcField As String
    Dim FldName As String
    Dim imgNum
    Dim imgFld
    Dim headerCmcField
    Dim actualCmcField
    Dim tmp
    Dim sSearch As String
    Dim sSearch2 As String
    Dim sSearch3 As String
    Dim iStart
    Dim iEnd
    Dim prop
    Dim bFound As Boolean
    
    bFound = False
    Select Case docType
    Case 0
    If fld.Type = wdFieldDDEAuto Or fld.Type = wdFieldMacroButton Then
        fld.Select
        
        i = InStr(1, UCase(fld.Code), UCase("Commence MergeItem"), vbTextCompare) + 21
        If InStr(i, fld.Code, "GetField", vbTextCompare) > 0 Then
            sSearch = "[GetField(,,\"""
            sSearch2 = "\"")]"" \* CHARFORMAT"
            sSearch3 = "\"",1)]"" \* CHARFORMAT"
            iStart = InStr(1, UCase(fld.Code), UCase(sSearch)) + Len(sSearch)
            iEnd = InStr(iStart, UCase(fld.Code), UCase(sSearch2))
            If (iEnd = 0) Then _
                iEnd = InStr(iStart, UCase(fld.Code), UCase(sSearch3))
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
'            For Each prop In ActiveDocument.CustomDocumentProperties
'                If Trim(prop.Value) = CmcField And InStr(1, prop.Name, "DirectField") > 0 Then
'                    bFound = True
'                    Exit Function
'                End If
'            Next prop
'            If bFound = False Then
             If Util.GetDocumentProperties2(CmcField, Util.DIRECT_FIELD) = "" Then
                FldName = "DirectField" + Trim(str(cntr))
                Util.SetDocumentProperties FldName, CmcField
                saveTemplateUpdateFieldsUsed = 1
             End If
        ElseIf InStr(i, fld.Code, "GetConnectedItemField", vbTextCompare) > 0 Then
            sSearch = "[GetConnectedItemField(,,\"""
            sSearch2 = "\"")]"" \* CHARFORMAT"
            sSearch3 = "\"",,1)]"" \* CHARFORMAT"
            iStart = InStr(1, UCase(fld.Code), UCase(sSearch)) + Len(sSearch)
            iEnd = InStr(iStart, UCase(fld.Code), UCase(sSearch2))
            If (iEnd = 0) Then _
                iEnd = InStr(iStart, UCase(fld.Code), UCase(sSearch3))
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
            CmcField = Util.CmcReplace(CmcField, "\"",\""", "__")
'            For Each prop In ActiveDocument.CustomDocumentProperties
'                If Trim(prop.Value) = CmcField And InStr(1, prop.Name, "Related") > 0 Then
'                    bFound = True
'                    Exit Function
'                End If
'            Next prop
'            If bFound = False Then
             If Util.GetDocumentProperties2(CmcField, Util.RELATED_FIELD) = "" Then
                FldName = "RelatedField" + Trim(str(cntr))
                Util.SetDocumentProperties FldName, CmcField
                saveTemplateUpdateFieldsUsed = 4
             End If
            
        ElseIf InStr(i, UCase(fld.Code), UCase("GetMeField")) > 0 Then 'have me item
            sSearch = "[GetMeField(\"""
            sSearch2 = "\"")]"" \* CHARFORMAT"
            sSearch3 = "\"",1)]"" \* CHARFORMAT"
            iStart = InStr(1, UCase(fld.Code), UCase(sSearch)) + Len(sSearch)
            iEnd = InStr(iStart, UCase(fld.Code), UCase(sSearch2))
            If (iEnd = 0) Then _
                iEnd = InStr(iStart, UCase(fld.Code), UCase(sSearch3))
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
'            For Each prop In ActiveDocument.CustomDocumentProperties
'                If Trim(prop.Value) = CmcField And InStr(1, prop.Name, "MeItem") > 0 Then
'                    bFound = True
'                    Exit Function
'                End If
'            Next prop
'            If bFound = False Then
             If Util.GetDocumentProperties2(CmcField, Util.ME_ITEM) = "" Then
                FldName = "MeItem" + Trim(str(cntr))
                Util.SetDocumentProperties FldName, CmcField
                saveTemplateUpdateFieldsUsed = 2
             End If
        ElseIf InStr(12, UCase(fld.Code), UCase("CommenceView")) > 0 Then 'have me item
            sSearch = "CommenceView ["""
            sSearch2 = """]"
            iStart = InStr(1, fld.Code, sSearch) + Len(sSearch)
            iEnd = InStr(iStart, fld.Code, sSearch2)
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
            tmp = Util.GetDocumentProperties2(CmcField, Util.VIEW)
            If tmp = "" Or InStr(1, tmp, "View") = 0 Then
                FldName = "View" + Trim(str(cntr))
                Util.SetDocumentProperties FldName, CmcField
                saveTemplateUpdateFieldsUsed = 3
            End If
        ElseIf InStr(12, UCase(fld.Code), UCase("CommenceImage")) > 0 Then 'have me item
            sSearch = "CommenceImage ["""
            sSearch2 = """]"
            iStart = InStr(1, fld.Code, sSearch) + Len(sSearch)
            iEnd = InStr(iStart, fld.Code, sSearch2)
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
            tmp = Util.GetDocumentProperties2(CmcField, Util.DIRECT_IMAGE)
            If tmp = "" Or InStr(1, tmp, "DirectImage") = 0 Then
                FldName = "DirectImage" + Trim(str(cntr))
                Util.SetDocumentProperties FldName, CmcField
                saveTemplateUpdateFieldsUsed = 5
            End If
        ElseIf InStr(12, UCase(fld.Code), UCase("CommenceMeImage")) > 0 Then 'have me item
            sSearch = "CommenceMeImage ["""
            sSearch2 = """]"
            iStart = InStr(1, fld.Code, sSearch) + Len(sSearch)
            iEnd = InStr(iStart, fld.Code, sSearch2)
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
            tmp = Util.GetDocumentProperties2(CmcField, Util.ME_IMAGE)
            If tmp = "" Or InStr(1, tmp, "MeImage") = 0 Then
                FldName = "MeImage" + Trim(str(cntr))
                Util.SetDocumentProperties FldName, CmcField
                saveTemplateUpdateFieldsUsed = 7
            End If
        ElseIf InStr(12, UCase(fld.Code), UCase("CommenceRelatedImage")) > 0 Then 'have me item
            sSearch = "CommenceRelatedImage ["""
            sSearch2 = """]"
            iStart = InStr(1, fld.Code, sSearch) + Len(sSearch)
            iEnd = InStr(iStart, fld.Code, sSearch2)
            CmcField = Trim(Mid(fld.Code, iStart, iEnd - iStart))
            tmp = Util.GetDocumentProperties2(CmcField, Util.RELATED_IMAGE)
            If tmp = "" Or InStr(1, tmp, "RelatedImage") = 0 Then
                FldName = "RelatedImage" + Trim(str(cntr))
                Util.SetDocumentProperties FldName, CmcField
                saveTemplateUpdateFieldsUsed = 6
            End If
        
        Else
            saveTemplateUpdateFieldsUsed = 0
        End If
    Else
        Cancelled = True
        saveTemplateUpdateFieldsUsed = 0
    End If
    
    Case 1, 2  'letter/envelope
        If fld.Type = wdFieldMergeField Then
        
        fld.Select
        Dim ImagesUsed
        ImagesUsed = Util.GetDocumentProperties("MergeImage")
        i = InStr(1, fld.Code, "MERGEFIELD", vbTextCompare) + 11
        N = Len(fld.Code)
        If InStr(11, fld.Code, "MeItem__") > 0 Then     'me item
            If InStr(11, fld.Code, "_IMAGE") = 0 Then    'not an image
                headerCmcField = Trim(Mid(fld.Code, i))
                actualCmcField = Trim(Util.CmcReplace(Mid(fld.Code, i + 8), "_", " "))
                If Util.GetDocumentProperties2(actualCmcField, Util.ME_ITEM) = "" Then
                    Util.SetDocumentProperties headerCmcField, actualCmcField
                    saveTemplateUpdateFieldsUsed = 2
                End If
            Else
                headerCmcField = Trim(Mid(fld.Code, i))
                actualCmcField = Trim(Util.CmcReplace(Util.CmcReplace(Mid(fld.Code, i + 8), "_", " "), " IMAGE", "MEIMAGE"))
                If Util.GetDocumentProperties2(actualCmcField, Util.ME_IMAGE) = "" Then
                    Util.SetDocumentProperties headerCmcField, actualCmcField
                    'If instr(1,ImagesUsed
                    saveTemplateUpdateFieldsUsed = 7
                End If
            End If
        ElseIf InStr(11, fld.Code, "View__") > 0 Then
            headerCmcField = Trim(Mid(fld.Code, i))
            actualCmcField = Trim(Util.CmcReplace(Mid(fld.Code, i + 6), "_", " "))
            If Util.GetDocumentProperties2(actualCmcField, Util.VIEW) = "" Then
                    Util.SetDocumentProperties headerCmcField, actualCmcField
                saveTemplateUpdateFieldsUsed = 3
            End If
        ElseIf InStr(11, fld.Code, "__") > 0 Then 'have indirect
            If InStr(11, fld.Code, "_IMAGE") = 0 Then    'not an image
                headerCmcField = Trim(Mid(fld.Code, i, N - i))
                actualCmcField = Trim(Util.CmcReplace(Util.CmcReplace(headerCmcField, "__", "%%"), "_", " "))
                If Util.GetDocumentProperties2(headerCmcField, Util.RELATED_FIELD) = "" Then
                    Util.SetDocumentProperties headerCmcField, actualCmcField
                    saveTemplateUpdateFieldsUsed = 4
                End If
            Else    'have indirect image
                headerCmcField = Trim(Mid(fld.Code, i))
                actualCmcField = Trim(Util.CmcReplace(Util.CmcReplace(Util.CmcReplace(Mid(fld.Code, i, Len(fld.Code) - i), "_IMAGE", "RIMAGE"), "__", "%%"), "_", " "))
                If Util.GetDocumentProperties2(actualCmcField, Util.RELATED_IMAGE) = "" Then
                    Util.SetDocumentProperties headerCmcField, actualCmcField
                    saveTemplateUpdateFieldsUsed = 6
                End If
            End If
        Else                    'direct field
            If InStr(11, fld.Code, "_IMAGE") = 0 Then    'not an image
                headerCmcField = Trim(Mid(fld.Code, i, N - i))
                actualCmcField = Trim(Util.CmcReplace(Util.CmcReplace(headerCmcField, "__", "%%"), "_", " "))
                If Util.GetDocumentProperties2(actualCmcField, Util.DIRECT_FIELD) = "" Then
                    Util.SetDocumentProperties headerCmcField, actualCmcField
                    saveTemplateUpdateFieldsUsed = 1
                End If
            Else    'have direct image
                headerCmcField = Trim(Mid(fld.Code, i))
                actualCmcField = Trim(Util.CmcReplace(Util.CmcReplace(Mid(fld.Code, i), "_", " "), " IMAGE", "DIMAGE"))
                If Util.GetDocumentProperties2(actualCmcField, Util.DIRECT_IMAGE) = "" Then
                    Util.SetDocumentProperties headerCmcField, actualCmcField
                    saveTemplateUpdateFieldsUsed = 5
                End If
            End If
        End If
    Else
        saveTemplateUpdateFieldsUsed = 0
    End If


    End Select
    

End Function




Sub saveToCommenceTemplate(ByVal tName As String, isNew As Boolean)

    Dim fName As String
    Dim TempSaveProperties
    Dim i
    Dim a
    Dim bShare As String
    
    Dim sshare As String
    
    On Error GoTo aproblem
    
    If haveActiveTemplate Then

        Options.AllowFastSave = False
        ActiveDocument.Saved = False
        
        'Make sure not prompted for the properties
        TempSaveProperties = Options.SavePropertiesPrompt
        Options.SavePropertiesPrompt = False
    
    
        'ActiveDocument.AttachedTemplate = ""
        
        If Util.GetCommenceLettersPref("Share") = "1" Then
            bShare = "1"
        Else
            bShare = "0"
        End If
        
        If ActiveDocument.BuiltInDocumentProperties(wdPropertySubject) = "" Then
            ActiveDocument.BuiltInDocumentProperties(wdPropertySubject) = tName
        End If
   
        
        'Save into Commence
        If isNew = True Then
            If Util.GetCommenceInfo("GetData", "[MergeTemplateCreate(""" + tName + """,""" + templateCategory + """," + bShare + ")]", fName) > 0 Then
                MsgBox "There was a problem saving the template into Commence.  Please make sure the template does not already exist in Commence."
                GoTo Bye
            End If
            If fName <> "" Then
                Util.SetDocumentProperties "SavedToCommence", "1"
                ActiveDocument.SaveAs FileName:=fName, FileFormat:=wdFormatTemplate
            Else
                MsgBox "There was a problem saving the template into Commence.  Please make sure the template does not already exist in Commence."
                GoTo Bye
            End If
        Else
            If Util.GetCommenceInfo("GetData", "[MergeTemplateSave(""" + tName + """," + bShare + ")]", fName) > 0 Then
                If Util.GetCommenceInfo("GetData", "[MergeTemplateCreate(""" + tName + """,""" + templateCategory + """," + bShare + ")]", fName) > 0 Then
                    MsgBox "There was a problem saving the template into Commence.  Please make sure the template does not already exist in Commence."
                    GoTo Bye
                End If
            End If
            If fName <> "" Then
                Util.SetDocumentProperties "SavedToCommence", "1"
                'ActiveDocument.Saved = True
                ActiveDocument.Save
            Else
                    MsgBox "There was a problem saving the template into Commence.  Please make sure the template does not already exist in Commence."
                    GoTo Bye
            End If
        End If
        
        'Return the prompt valut
  Else
    MsgBox "There is no document to save.", vbOKOnly, "Commence"
  End If
  
  GoTo Bye
        Options.SavePropertiesPrompt = TempSaveProperties

aproblem:
    Cancelled = True
    MsgBox ("An error has occured in the Commence macros (saveToCommenceTemplate): " + str(Err.Number) + " " + Err.Description)
  
Bye:
    On Error GoTo 0
  
End Sub


Sub saveTemplateParseFields()

'Parse to find the Auto fields

    Dim shpe As Shape
    Dim fld As Field
    Dim sect As Section
    Dim hdr As HeaderFooter
    Dim ftr As HeaderFooter
    
    Dim counter As Integer
    Dim ProtectType
    Dim res As Integer
    Dim f As Integer
    Dim m As Integer
    Dim v As Integer
    Dim ni As Integer
    Dim mi As Integer
    Dim ri As Integer
    Dim i As Integer
    Dim c As Integer
    Dim sdocType As String
  
    On Error GoTo aproblem
    sdocType = Util.GetDocumentProperties("Type")
    If sdocType <> "" Then
        If sdocType <> "-1" Then
            docType = str(Util.GetDocumentProperties("Type"))
        Else
            docType = 0
        End If
    Else
        docType = 0
    End If
    Call saveTemplateClearFieldsUsed
    
    counter = 1
    f = 1
    m = 1
    v = 1
    ni = 1
    mi = 1
    ri = 1
    i = 1
    c = 1
    
    ' Unprotect document
    ProtectType = ActiveDocument.ProtectionType
    If ProtectType <> wdNoProtection Then
        ActiveDocument.Unprotect
    End If
    
    Application.ScreenUpdating = False
    
    Selection.HomeKey Unit:=wdStory
    ActiveWindow.VIEW.ShowFieldCodes = True
    
    For Each shpe In ActiveDocument.Shapes
        shpe.Select
        For Each fld In Selection.Range.Fields
            res = CommenceTemplate.saveTemplateUpdateFieldsUsed(fld, counter)
            Select Case res
                Case 0
                Case 1      'direct field
                    f = f + 1
                    counter = counter + 1
                Case 2      'Me
                    m = m + 1
                    counter = counter + 1
                Case 3      'View
                    v = v + 1
                    counter = counter + 1
                Case 4  'Connection
                    c = c + 1
                    counter = counter + 1
                Case 5  'direct image
                    i = i + 1
                    counter = counter + 1
                Case 6  'indirect image
                    ri = ri + 1
                    counter = counter + 1
                Case 7  'me image
                    mi = mi + 1
                    counter = counter + 1
            End Select
            
        Next fld
    Next shpe
    
    For Each sect In ActiveDocument.Sections
        
        For Each fld In sect.Range.Fields
            If fld.Type = wdFieldNext Then
                GoTo ContinueHere
            End If
            res = CommenceTemplate.saveTemplateUpdateFieldsUsed(fld, counter)
            Select Case res
                Case 0
                Case 1      'direct field
                    f = f + 1
                    counter = counter + 1
                Case 2      'Me
                    m = m + 1
                    counter = counter + 1
                Case 3      'View
                    v = v + 1
                    counter = counter + 1
                Case 4  'Connection
                    c = c + 1
                    counter = counter + 1
                Case 5  'direct image
                    i = i + 1
                    counter = counter + 1
                Case 6  'indirect image
                    ri = ri + 1
                    counter = counter + 1
                Case 7  'me image
                    mi = mi + 1
                    counter = counter + 1
            End Select
        Next fld
ContinueHere:
        For Each hdr In sect.Headers
            If hdr.Exists Then
                For Each fld In hdr.Range.Fields
            res = CommenceTemplate.saveTemplateUpdateFieldsUsed(fld, counter)
            Select Case res
                Case 0
                Case 1      'direct field
                    f = f + 1
                    counter = counter + 1
                Case 2      'Me
                    m = m + 1
                    counter = counter + 1
                Case 3      'View
                    v = v + 1
                    counter = counter + 1
                Case 4  'Connection
                    c = c + 1
                    counter = counter + 1
                Case 5  'direct image
                    i = i + 1
                    counter = counter + 1
                Case 6  'indirect image
                    ri = ri + 1
                    counter = counter + 1
                Case 7  'me image
                    mi = mi + 1
                    counter = counter + 1
            End Select
            
                Next fld
            End If
        Next hdr
    
        For Each ftr In sect.Footers
        If ftr.Exists Then
            For Each fld In ftr.Range.Fields
            res = CommenceTemplate.saveTemplateUpdateFieldsUsed(fld, counter)
            Select Case res
                Case 0
                Case 1      'direct field
                    f = f + 1
                    counter = counter + 1
                Case 2      'Me
                    m = m + 1
                    counter = counter + 1
                Case 3      'View
                    v = v + 1
                    counter = counter + 1
                Case 4  'Connection
                    c = c + 1
                    counter = counter + 1
                Case 5  'direct image
                    i = i + 1
                    counter = counter + 1
                Case 6  'indirect image
                    ri = ri + 1
                    counter = counter + 1
                Case 7  'me image
                    mi = mi + 1
                    counter = counter + 1
            End Select
            Next fld
        End If
        Next ftr
    
    Next sect
    
    Util.SetDocumentProperties "NumFields", str(f - 1)
    Util.SetDocumentProperties "NumMeFields", str(m - 1)
    Util.SetDocumentProperties "NumViews", str(v - 1)
    Util.SetDocumentProperties "NumImage", str(i - 1)
    Util.SetDocumentProperties "NumMeImage", str(mi - 1)
    Util.SetDocumentProperties "NumRelatedImage", str(ri - 1)
    Util.SetDocumentProperties "NumRelatedFields", str(c - 1)
    
    
    'ActiveWindow.View.ShowFieldCodes = False
    Application.ScreenUpdating = False
    Selection.HomeKey Unit:=wdStory
    Application.ScreenRefresh

    GoTo Done
  
aproblem:
    Cancelled = True
    MsgBox ("An error has occured in the Commence macros (saveParseFields): " + str(Err.Number) + " " + Err.Description)
  
Done:
    If (ProtectType <> -1) Then
        ActiveDocument.Protect Type:=ProtectType, Noreset:=True
    End If

End Sub


Sub saveTemplateClearFieldsUsed()

'Clears the number of fields and fields in the custom doc properties
    
    Dim prop
  
    For Each prop In ActiveDocument.CustomDocumentProperties
        If (InStr(1, UCase(prop.Name), "TYPE") > 0) Or (InStr(1, UCase(prop.Name), "CATEGORY") > 0) Or (UCase(prop.Name) = "SAVEDTOCOMMENCE") Then
            'do nothing
        Else
             prop.Delete
        End If
    Next prop
    
End Sub


Sub saveFromMenuCommenceTemplate()
    Dim templateName As String
    Dim m
    Dim cat As String
    Dim TMPLTSDirectory, numFields As String
    Dim status
    Dim sdocType As String
    Dim i As String
    Dim TemplateFileName As String
    Dim sSavedBefore As String
    Dim bShare As String
    status = 0
    
    'Need to check if has been saved into Commence before, how do we know, numfields set
    
    On Error Resume Next
    
    templateName = ActiveDocument.BuiltInDocumentProperties(wdPropertySubject)
    sdocType = Util.GetDocumentProperties("Type")
    sSavedBefore = Util.GetDocumentProperties("SavedToCommence")
    docType = Val(sdocType)
    
    
If sSavedBefore <> "1" And sdocType = "-1" Then
    docType = 0
    'GoTo AlreadySaved
ElseIf sSavedBefore <> "1" Then
    If templateName = "" Then
        If Util.GetLetterInformation(tName:=templateName, tfName:=TemplateFileName, tCat:=templateCategory) > 0 Then
            'GoTo Continue
        End If
        ActiveDocument.BuiltInDocumentProperties(wdPropertySubject) = templateName
    ElseIf ActiveDocument.path = "" Then    'not saved
        GoTo BlankName
    End If
End If

BlankName:
    If templateName = "" Or ActiveDocument.path = "" Then
        templateName = InputBox("Please enter a name for the template.  This is the name that will be stored in Commence.", "Enter Template Name", templateName)
        If templateName = "" Then
            m = MsgBox("You must enter a name for the template.  Please try again or select Cancel to cancel the save.", vbOKCancel, "Commence")
            If m = vbCancel Then
                GoTo Done
            Else
                GoTo BlankName
            End If
        Else
            templateName = Left(templateName, 23)
            ActiveDocument.BuiltInDocumentProperties(wdPropertySubject) = templateName
        End If
    End If

    'Save the category into the custom properties
If templateCategory = "" Then
    cat = Util.GetDocumentProperties("Category")
    If cat = "" Then
        Dim tempcat As String
        If Util.GetLetterInformation(tName:=templateName, tfName:=TemplateFileName, tCat:=tempcat) > 0 Then
        End If
        If TemplateFileName = ActiveDocument.FullName Then
            cat = tempcat
        Else
            cat = Util.GetCommenceLettersPref("Category")
        End If
        Util.SetDocumentProperties "Category", cat
    End If
    templateCategory = cat
    If sdocType = "" Then
        Util.SetDocumentProperties "Type", "0"
    End If
End If

AlreadySaved:
    If docType = 0 Then
    'parse the field codes and save the fields in the properties
        Call CommenceTemplate.saveTemplateParseFields
    End If
    
    'Save into Commence
    
    If sSavedBefore = "" And sdocType <> "-1" Then
        'Save  This needs to update it
        If sdocType = "-1" Then
            Util.SetDocumentProperties "Type", "0"
        End If
        CommenceTemplate.saveToCommenceTemplate tName:=templateName, isNew:=True
    Else    'never been saved into Commence before
        If sdocType = "-1" Then
            Util.SetDocumentProperties "Type", "0"
        End If
        CommenceTemplate.saveToCommenceTemplate tName:=templateName, isNew:=False
    End If
        
        
Done:

End Sub

Sub resetTemplateOnOpen()

    Dim tmplFields() As String
    Dim tmplheader() As String
    Dim meFields() As String, meHeader() As String
    Dim tmplViews() As String, tmplViewsHeader() As String
    Dim RelatedFields() As String, RelatedHeader() As String
    Dim ImageFields() As String, ImageHeader() As String
    Dim MeImageFields() As String, MeImageHeader() As String
    Dim RelatedImageFields() As String, RelatedImageHeader() As String
    Dim FileName As String

    If Util.GetTemplateFields(tmplFields, tmplheader, ImageFields, ImageHeader, RelatedFields, RelatedHeader, RelatedImageFields, RelatedImageHeader, meFields, meHeader, MeImageFields, MeImageHeader, tmplViews, tmplheader) > 0 Then
        GoTo aproblem
    End If
    
    'Get the filename for the datasource
    'filename = Util.GetTEMPDirectory + "\" + Util.GetFilename(".HTM")
    FileName = Util.GetTEMPDirectory + "\" + Util.GetFilename(".HTML")
    
    If Util.GetMergeDatasource(FileName, fType:=0, bSample:=True, nRows:=1, fArray:=tmplFields, fhArray:=tmplheader, iArray:=ImageFields, ihArray:=ImageHeader, rArray:=RelatedFields, rhArray:=RelatedHeader, riArray:=RelatedImageFields, rihArray:=RelatedImageHeader, mArray:=meFields, mhArray:=meHeader, miArray:=MeImageFields, mihArray:=MeImageHeader, vArray:=tmplViews, vhArray:=tmplViewsHeader) < 0 Then
        GoTo aproblem
    End If
    
    ActiveDocument.MailMerge.OpenDataSource Name:=FileName, _
        ConfirmConversions:=False, ReadOnly:=True, LinkToSource:=True, _
        AddToRecentFiles:=False, PasswordDocument:="", PasswordTemplate:="", _
        WritePasswordDocument:="", WritePasswordTemplate:="", Revert:=False, _
        Format:=wdOpenFormatAuto, Connection:="", SQLStatement:="", SQLStatement1 _
        :=""
        
    ActiveDocument.Save

aproblem:


End Sub

Attribute VB_Name = "MAPI"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
 
Private Type MAPIMessage 'Mail
    Reserved       As Long
    Subject        As String
    NoteText       As String
    MessageType    As String
    DateReceived   As String
    ConversationID As String
    Flags          As Long
    RecipCount     As Long
    FileCount      As Long
End Type
 
Private Type MapiRecip 'Recipient
    Reserved   As Long
    RecipClass As Long
    Name       As String
    Address    As String
    EIDSize    As Long
    EntryID    As String
End Type
 
Private Type MapiFile 'File
    Reserved As Long
    Flags    As Long
    Position As Long
    PathName As String
    FileName As String
    FileType As String
End Type
 
 ' MAPI Return Codes
Private Const SUCCESS_SUCCESS = 0
Private Const MAPI_USER_ABORT = 1
Private Const MAPI_E_USER_ABORT = MAPI_USER_ABORT
Private Const MAPI_E_FAILURE = 2
Private Const MAPI_E_LOGIN_FAILURE = 3
Private Const MAPI_E_LOGON_FAILURE = MAPI_E_LOGIN_FAILURE
Private Const MAPI_E_DISK_FULL = 4
Private Const MAPI_E_INSUFFICIENT_MEMORY = 5
Private Const MAPI_E_BLK_TOO_SMALL = 6
Private Const MAPI_E_TOO_MANY_SESSIONS = 8
Private Const MAPI_E_TOO_MANY_FILES = 9
Private Const MAPI_E_TOO_MANY_RECIPIENTS = 10
Private Const MAPI_E_ATTACHMENT_NOT_FOUND = 11
Private Const MAPI_E_ATTACHMENT_OPEN_FAILURE = 12
Private Const MAPI_E_ATTACHMENT_WRITE_FAILURE = 13
Private Const MAPI_E_UNKNOWN_RECIPIENT = 14
Private Const MAPI_E_BAD_RECIPTYPE = 15
Private Const MAPI_E_NO_MESSAGES = 16
Private Const MAPI_E_INVALID_MESSAGE = 17
Private Const MAPI_E_TEXT_TOO_LARGE = 18
Private Const MAPI_E_INVALID_SESSION = 19
Private Const MAPI_E_TYPE_NOT_SUPPORTED = 20
Private Const MAPI_E_AMBIGUOUS_RECIPIENT = 21
Private Const MAPI_E_AMBIG_RECIP = MAPI_E_AMBIGUOUS_RECIPIENT
Private Const MAPI_E_MESSAGE_IN_USE = 22
Private Const MAPI_E_NETWORK_FAILURE = 23
Private Const MAPI_E_INVALID_EDITFIELDS = 24
Private Const MAPI_E_INVALID_RECIPS = 25
Private Const MAPI_E_NOT_SUPPORTED = 26
 
Private Const MAPI_ORIG = 0 'Recipient-Flags
Private Const MAPI_TO = 1
Private Const MAPI_CC = 2
Private Const MAPI_BCC = 3
 
Private Const MAPI_LOGON_UI = &H1 'Logon Flags
Private Const MAPI_NEW_SESSION = &H2
Private Const MAPI_FORCE_DOWNLOAD = &H1000
 
Private Const MAPI_LOGOFF_SHARED = &H1 'Logoff Flags
Private Const MAPI_LOGOFF_UI = &H2
 
Private Const MAPI_DIALOG = &H8 'Send-Mail-Flags
Private Const MAPI_NODIALOG = 0
 
Private Const MAPI_OLE = &H1
Private Const MAPI_OLE_STATIC = &H2
 
Private Const MAPI_UNREAD = &H1 'Mail-Flags
Private Const MAPI_RECEIPT_REQUESTED = &H2
Private Const MAPI_SENT = &H4
 
'Private Declare PtrSafe Function MAPILogon Lib "MAPI32.DLL" (ByVal UIParam As Long, _
ByVal User As String, ByVal Password As String, ByVal Flags As Long, _
ByVal Reserved As Long, Session As Long) As Long
'Private Declare Function MAPILogoff Lib "MAPI32.DLL" (ByVal Session As Long, _
ByVal UIParam As Long, ByVal Flags As Long, ByVal Reserved As Long) As Long

'Saket: To ensure backward compatibility with previous versions of Microsoft Office, you use the VBA7 constant
'Saket note: PtrSafe version of declaration used for Office 64
#If VBA7 Then
Private Declare PtrSafe Function MAPISendMail Lib "MAPI32.DLL" Alias "BMAPISendMail" _
(ByVal Session As Long, ByVal UIParam As Long, Message As MAPIMessage, _
Recipient() As MapiRecip, File() As MapiFile, ByVal Flags As Long, _
ByVal Reserved As Long) As Long
#Else
Private Declare Function MAPISendMail Lib "MAPI32.DLL" Alias "BMAPISendMail" _
(ByVal Session As Long, ByVal UIParam As Long, Message As MAPIMessage, _
Recipient() As MapiRecip, File() As MapiFile, ByVal Flags As Long, _
ByVal Reserved As Long) As Long

#End If
'Private Declare Function MAPISendDocuments Lib "MAPI32.DLL" (ByVal UIParam As Long, _
ByVal DelimStr As String, ByVal FilePaths As String, ByVal FileNames As String, _
ByVal Reserved As Long) As Long
 
 
 
 
Function SendIt(sRecip As String, sTitle As String, sText As String, sFile As String, sendnow As Boolean) As Boolean
    Dim strTemp      As String
    Dim strError      As String
    Dim lngIndex      As Long
    Dim iFileCount As Integer
     
    Dim mRecip(0) As MapiRecip, mFile() As MapiFile, mMail As MAPIMessage
    Dim lSess As Long, lRet As Long
     
    On Error GoTo ErrorHandler
    SendIt = False
     
     'Add 2 trailing spaces to the text, this will be the position where the attachment goes to
    sText = sText & "  "
     
     'Recipient
    With mRecip(0)
        .Name = sRecip
        .RecipClass = MAPI_TO
    End With
     
     'File to send?
    If sFile <> "" Then
        ReDim mFile(0)
        With mFile(0)
            .FileName = sFile
            .PathName = sFile
            .Position = Len(sText) - 1
            .FileType = ""
            .Reserved = 0
        End With
        iFileCount = 1
    End If
     
     'Create Mail
    With mMail
        .Subject = sTitle
        .NoteText = sText
        .Flags = 0
        .FileCount = iFileCount
        .RecipCount = 1
        .Reserved = 0
        .DateReceived = ""
        .MessageType = ""
    End With
     
     'Post it
     'Logon: User = "" and Password = ""
    'lRet = MAPILogon(0, "", "", MAPI_LOGON_UI, 0, lSess)
    'If lRet <> SUCCESS_SUCCESS Then
    '    strError = "Error logging into messaging software. (" & CStr(lRet) & ")"
    '    GoTo ErrorHandler
    'End If
     
   If sendnow = 0 Then
        MsgBox "The e-mail message has been created.  Press the Send button when you are ready to send this message.", 48, "CmcCreateEmail"
        lRet = MAPISendMail(lSess, 0, mMail, mRecip, mFile, MAPI_NODIALOG Or MAPI_DIALOG, 0)
      Else
        lRet = MAPISendMail(lSess, 0, mMail, mRecip, mFile, MAPI_NODIALOG, 0)
      End If
     'Send the mail to the given recipients with the attached file without showing a dialog
    'lRet = MAPISendMail(lSess, 0, mMail, mRecip, mFile, MAPI_NODIALOG, 0)
    If lRet <> SUCCESS_SUCCESS And lRet <> MAPI_USER_ABORT Then
        If lRet = 14 Then
            strError = "Recipient not found"
        Else
            strError = "Error sending: " & CStr(lRet)
        End If
        GoTo ErrorHandler
    End If
     
    'lRet = MAPILogoff(lSess, 0, 0, 0)
     
    SendIt = True
    Exit Function
     
ErrorHandler:
    If strError = "" Then strError = Err.Description
    Call MsgBox(strError, vbExclamation, "MAPI-Error")
End Function
 
 

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Util"
Option Explicit

Public Const DIRECT_IMAGE As String = "DirectImage"
Public Const ME_IMAGE As String = "MeImage"
Public Const RELATED_IMAGE As String = "RelatedImage"
Public Const DIRECT_FIELD As String = "DirectField"
Public Const ME_ITEM As String = "MeItem"
Public Const RELATED_FIELD As String = "RelatedField"
Public Const VIEW As String = "View"

Public Const COMMENCE_FIELDS As String = "Commence Fields"
Public Const COMMENCE_VIEWS As String = "Commence Views"

Public Const COMMENCE_INI_LOCATION As String = "\Commence\Commence\8.0\commence.ini"
Private Const CSIDL_COMMON_APPDATA = &H23
Private Const SHGFP_TYPE_CURRENT = 0
Private Const MAX_PATH = 260
'Saket: To ensure backward compatibility with previous versions of Microsoft Office, you use the VBA7 constant
'Saket note: PtrSafe version of declaration used for Office 64
#If VBA7 Then
'Makarand Office64 <Added PtrSafe >
Private Declare PtrSafe Function SHGetFolderPath Lib "shfolder" _
    Alias "SHGetFolderPathA" _
    (ByVal hwndOwner As Long, ByVal nFolder As Long, _
    ByVal hToken As Long, ByVal dwFlags As Long, _
    ByVal pszPath As String) As Long
'Makarand [R31-8981]
'Makarand Office64 <Added PtrSafe >
Private Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" _
Alias "GetPrivateProfileStringA" _
                        (ByVal lpApplicationName As String, _
                        ByVal lpKeyName As Any, _
                        ByVal lpDefault As String, _
                        ByVal lpReturnedString As String, _
                        ByVal nSize As Long, _
                        ByVal lpFileName As String) As Long
'Makarand Office64 <Added PtrSafe >
Private Declare PtrSafe Function WritePrivateProfileString Lib "kernel32" _
Alias "WritePrivateProfileStringA" _
                        (ByVal lpApplicationName As String, _
                        ByVal lpKeyName As Any, _
                        ByVal lpString As Any, _
                        ByVal lpFileName As String) As Long
'Makarand Office64 <Added PtrSafe >
Private Declare PtrSafe Function FindWindowA Lib "User32" (ByVal lpClassName As Any, _
    ByVal lpWindowName As Any) As Integer
#Else
    Private Declare Function SHGetFolderPath Lib "shfolder" _
    Alias "SHGetFolderPathA" _
    (ByVal hwndOwner As Long, ByVal nFolder As Long, _
    ByVal hToken As Long, ByVal dwFlags As Long, _
    ByVal pszPath As String) As Long
'Makarand [R31-8981]
    Private Declare Function GetPrivateProfileString Lib "kernel32" _
    Alias "GetPrivateProfileStringA" _
                        (ByVal lpApplicationName As String, _
                        ByVal lpKeyName As Any, _
                        ByVal lpDefault As String, _
                        ByVal lpReturnedString As String, _
                        ByVal nSize As Long, _
                        ByVal lpFileName As String) As Long

    Private Declare Function WritePrivateProfileString Lib "kernel32" _
    Alias "WritePrivateProfileStringA" _
                        (ByVal lpApplicationName As String, _
                        ByVal lpKeyName As Any, _
                        ByVal lpString As Any, _
                        ByVal lpFileName As String) As Long


    Private Declare Function FindWindowA Lib "User32" (ByVal lpClassName As Any, _
    ByVal lpWindowName As Any) As Integer
#End If
    
'Makarand [R31-8981]
Public Function INIRead(sSection As String, sKeyName As String, sINIFileName As String) As String
Dim sRet As String
  sRet = String(255, Chr(0))
  INIRead = Left(sRet, GetPrivateProfileString(sSection, ByVal sKeyName, "", sRet, Len(sRet), sINIFileName))
End Function
'Makarand [R31-8981]
Public Function INIWrite(sSection As String, sKeyName As String, sNewString As String, sINIFileName As String) As Boolean
  Call WritePrivateProfileString(sSection, sKeyName, sNewString, sINIFileName)
  INIWrite = (Err.Number = 0)
End Function

Function SetRegistry(ByVal RegPath As String, ByVal RegKey As String, ByVal regsetting As String) As Boolean
    
    On Error Resume Next
    System.PrivateProfileString("", "" + RegPath + "", "" + RegKey + "") = regsetting

    If Err.Number > 0 Then
        SetRegistry = False
    Else
        SetRegistry = True
    End If

End Function

Function GetRegistry(ByVal RegPath As String, ByVal RegKey As String, regsetting) As Boolean
    
    On Error Resume Next
    regsetting = System.PrivateProfileString("", "" + RegPath + "", "" + RegKey + "")

    If Err.Number > 0 Then
        GetRegistry = False
    Else
        GetRegistry = True
    End If

End Function

Function SetCommenceLettersPref(ByVal RegKey, ByVal regsetting) As Boolean
'    Dim cmcVersion
'    Dim RegistryPath As String
'
'    On Error Resume Next
'
'    cmcVersion = Util.GetCommenceVersion
'
'    RegistryPath = "HKEY_LOCAL_MACHINE\Software\Commence\Commence\" + cmcVersion + "\Letters"
'    If Util.SetRegistry(RegistryPath, RegKey, regsetting) = False Then
'        SetCommenceLettersPref = False
'    Else
'        SetCommenceLettersPref = True
'    End If
        
'Makarand [R31-8981]
      Dim lRetVal As Long         'result of the SetValueEx function
      Dim sPathAppFolder As String
    ' Fill our string buffer
      sPathAppFolder = String(MAX_PATH, 0)
      lRetVal = SHGetFolderPath(0, CSIDL_COMMON_APPDATA, 0, SHGFP_TYPE_CURRENT, sPathAppFolder)
      Dim sCommenceINIPath As String
      sCommenceINIPath = Left$(sPathAppFolder, InStr(1, sPathAppFolder, Chr(0)) - 1)
      sCommenceINIPath = sCommenceINIPath & COMMENCE_INI_LOCATION
      SetCommenceLettersPref = INIWrite("Letters", CStr(RegKey), CStr(regsetting), sCommenceINIPath)
End Function

Function GetCommenceLettersPref(ByVal RegKey) As String
    
'    Dim RegistryPath, cmcVersion, regsetting As String
'
'    On Error Resume Next
'
'    cmcVersion = Util.GetCommenceVersion
'
'    RegistryPath = "HKEY_LOCAL_MACHINE\Software\Commence\Commence\" + cmcVersion + "\Letters"
'    If Util.GetRegistry(RegistryPath, RegKey, regsetting) = False Then
'        GetCommenceLettersPref = ""
'    Else
'        GetCommenceLettersPref = regsetting
'    End If

'Makarand [R31-8981]
    Dim sPathAppFolder As String
    Dim retVal As Long
    ' Fill our string buffer
    sPathAppFolder = String(MAX_PATH, 0)
    retVal = SHGetFolderPath(0, CSIDL_COMMON_APPDATA, 0, SHGFP_TYPE_CURRENT, sPathAppFolder)
    Dim sCommenceINIPath As String
    sCommenceINIPath = Left$(sPathAppFolder, InStr(1, sPathAppFolder, Chr(0)) - 1)
    sCommenceINIPath = sCommenceINIPath & COMMENCE_INI_LOCATION
    GetCommenceLettersPref = INIRead("Letters", CStr(RegKey), sCommenceINIPath)
        
End Function

Function GetCommenceSettingPref(ByVal RegKey) As String
 
    Dim sPathAppFolder As String
    Dim retVal As Long
    ' Fill our string buffer
    sPathAppFolder = String(MAX_PATH, 0)
    retVal = SHGetFolderPath(0, CSIDL_COMMON_APPDATA, 0, SHGFP_TYPE_CURRENT, sPathAppFolder)
    Dim sCommenceINIPath As String
    sCommenceINIPath = Left$(sPathAppFolder, InStr(1, sPathAppFolder, Chr(0)) - 1)
    sCommenceINIPath = sCommenceINIPath & COMMENCE_INI_LOCATION
    GetCommenceSettingPref = INIRead("Settings", CStr(RegKey), sCommenceINIPath)
        
End Function

Function GetCommenceInfo(ByVal ddeTopic, ByVal ddeRequest, retValue)
    
    Dim CmcObj As New CommenceDB
    Dim c As Object
    Dim i As String

    i = ""
    retValue = ""
    
    On Error GoTo -1: On Error GoTo Done
    'q$ = Chr(34)
    Set CmcObj = New CommenceDB
    Set c = CmcObj.GetConversation("Commence", ddeTopic)
    
    On Error GoTo -1: On Error GoTo aproblem:
    i = c.Request(ddeRequest)
    
    
aproblem:
    Set c = Nothing
    Set CmcObj = Nothing
   
Done:
    
    retValue = i
    GetCommenceInfo = Err.Number
    
End Function

'Function GetCommenceVersion() As String
'
'    Dim CurrVersion As String
'
'    If Util.GetRegistry("HKEY_LOCAL_MACHINE\Software\Commence\Commence", "CurrentVersion", CurrVersion) Then
'        GetCommenceVersion = CurrVersion
'    Else
'        GetCommenceVersion = ""
'    End If
'
'
'End Function
  
Public Function FindApplication(ByVal AppName As String) As Boolean
  
    If FindWindowA(AppName, 0&) = 0 Then
        FindApplication = False
    Else
        FindApplication = True
    End If

End Function

Function FindCommence() As Boolean
    If Not Util.FindApplication(AppName:="Commence") Then
        FindCommence = False
    Else
        FindCommence = True
    End If
End Function

Sub SetDocumentProperties(ByVal propName, ByVal propValue)
    
    Util.DeleteDocumentProperties (propName)
    ActiveDocument.CustomDocumentProperties.Add Name:=propName, LinkToContent:=False, Type:=msoPropertyTypeString, Value:=propValue

End Sub

Sub DeleteDocumentProperties(ByVal propName As String)

    Dim prop
  
    For Each prop In ActiveDocument.CustomDocumentProperties
        If UCase(prop.Name) = UCase(propName) Then
            prop.Delete
        End If
    Next prop
  
End Sub

'lookup property by name; return property value
Function GetDocumentProperties(ByVal propName As String) As String
  
    Dim prop
  
    For Each prop In ActiveDocument.CustomDocumentProperties
        If Trim(UCase(prop.Name)) = Trim(UCase(propName)) Then
            GetDocumentProperties = Trim(prop.Value)
            Exit Function
        End If
    Next prop
  
End Function

'lookup property by value; return property name
' sHint: Direct - direct field, MeItem - me field, Related - related field
'Function GetDocumentProperties2(ByVal propValue As String, Optional ByVal sHint As String = DIRECT_FIELD) As String
Function GetDocumentProperties2(ByVal propValue As String, ByVal sHint As String) As String
  
    Dim prop
  
    For Each prop In ActiveDocument.CustomDocumentProperties
        If Trim(UCase(prop.Value)) = Trim(UCase(propValue)) And _
            InStr(1, prop.Name, sHint) Then
                GetDocumentProperties2 = Trim(prop.Name)
                Exit Function
        End If
    Next prop
  
End Function


Function GetCommenceTMPLTSDirectory()

    Dim haveerror As Integer
    Dim Info As String
    Dim InfoSplit As String
    Dim i As Integer
    Dim j As Integer
    
    haveerror = Util.GetCommenceInfo("GetData", "[GetDatabaseDefinition(|fffd|)]", Info)
    If haveerror = 0 Then
        If Info <> "" Then
            i = InStr(1, Info, "|fffd|")
            j = InStr(i + 1, Info, "|fffd|")
            InfoSplit = Mid(Info, i + 1, j - i)
            GetCommenceTMPLTSDirectory = InfoSplit + "\TMPLTS"
        Else
            GetCommenceTMPLTSDirectory = ""
        End If
    Else
        GetCommenceTMPLTSDirectory = ""
    End If
End Function

Function haveActiveTemplate()
  
    Dim i
    
    On Error GoTo NoActive
    i = ActiveDocument.Saved
    haveActiveTemplate = True
    GoTo Done
  
NoActive:
    haveActiveTemplate = False

Done:

End Function


Public Sub FocusNewDocument(sDoc)
    Application.Documents(sDoc).Activate
    Application.WindowState = wdWindowStateMaximize
End Sub
Function GetFields(category As String, numFields As Integer, flds As String, Indirect As Boolean, image As Boolean) As Integer
    Dim CmcObj As New CommenceDB
    Dim c As Object
    Dim AppName As String
    Dim i
    Dim r

    On Error GoTo aproblem
    AppName = "Commence"

    Set CmcObj = New CommenceDB
    Set c = CmcObj.GetConversation(AppName, "MergeItem")
    
    On Error GoTo aproblem2
    i = c.Request("[GetFieldCount(""" + category + """)]")
    numFields = Val(i)
    flds = c.Request("[GetFieldNames(""" + category + """,|fffd|)]")
    
    If image Then
        i = c.Request("[GetImageFieldCount(""" + category + """)]")
        numFields = numFields + Val(i)
        If Val(i) > 0 Then
            r = c.Request("[GetImageFieldNames(""" + category + """,""|fffd|"")]")
            r = Util.CmcReplace(r, "|fffd|", " (IMAGE)|fffd|")
            flds = flds + "|fffd|" + r + " (IMAGE)"
        End If
        
    End If
    If Indirect Then
        'Get the indirect fields
        i = c.Request("[GetConnectionCount(""" + category + """)]")
        numFields = numFields + Val(i)
        If Val(i) > 0 Then
            r = c.Request("[GetConnectionNames(""" + category + """,..|fffd|,__)]")
            flds = flds + "|fffd|" + r + ".."
        End If
    End If
    
   
aproblem2:
    Set c = Nothing
    Set CmcObj = Nothing

aproblem:
    GetFields = Err.Number

End Function


Function GetMergeDatasource(fName As String, fType As Integer, bSample As Boolean, nRows As Integer, ByRef fArray() As String, ByRef fhArray() As String, ByRef iArray() As String, ihArray() As String, ByRef rArray() As String, rhArray() As String, ByRef riArray() As String, rihArray() As String, ByRef mArray() As String, ByRef mhArray() As String, ByRef miArray() As String, mihArray() As String, ByRef vArray() As String, vhArray() As String, _
        Optional categoryName As String, Optional rowID As String) As Integer

    Dim letterObj As Letters.MergeDB
    Dim ds As Letters.DataSource
    Dim i As Integer, k
    Dim toCat As String, Conn As String, fld As String
    Dim r

    
    'On Error GoTo aproblem
    'Use the Commence letter object
    Set letterObj = New Letters.MergeDB
    
    If bSample = True Then
        Set ds = letterObj.createsampledatasource(FileName:=fName, FileType:=fType)
    ElseIf Commence.APMerge Then
        Set ds = letterObj.CreateAPMergeDataSource(category:=categoryName, rowID:=rowID, FileName:=fName, FileType:=fType)
    Else
        Set ds = letterObj.CreateMergeDataSource(FileName:=fName, FileType:=fType)
    End If
    
    'On Error GoTo aproblem2

    On Error Resume Next
    
    k = -1
    k = UBound(fArray)
    For i = 0 To k     'direct
        If fArray(i) = "" Or fhArray(i) = "" Then
            'do nothing
        ElseIf ds.AppendField(fArray(i), fhArray(i), 0) < 0 Then
            GoTo aproblem2
        End If
    Next i
    
    k = -1
    k = UBound(iArray)
    For i = 0 To k     'direct image
        If iArray(i) = "" Or ihArray(i) = "" Then
            'do nothing
        ElseIf ds.AppendField(iArray(i), ihArray(i), 1) < 0 Then
            GoTo aproblem2
        End If
    Next i
    
    k = -1
    k = UBound(rArray)
    For i = 0 To k 'related
            'Util.CmcSplit related field
        If rArray(i) = "" Or rhArray(i) = "" Then
            'do nothing
        Else
            k = InStr(1, rArray(i), "__")
            'Conn = Util.CmcReplace(Left(rArray(i), k - 1), "_", " ")
            'toCat = Util.CmcReplace(Mid(rArray(i), k + 2, InStr(k + 1, rArray(i), "__") - k - 2), "_", " ")
            'fld = Util.CmcReplace(Right(rArray(i), Len(rArray(i)) - InStr(k + 1, rArray(i), "__") - 1), "_", " ")
            Conn = Left(rArray(i), k - 1)
            toCat = Mid(rArray(i), k + 2, InStr(k + 1, rArray(i), "__") - k - 2)
            fld = Right(rArray(i), Len(rArray(i)) - InStr(k + 1, rArray(i), "__") - 1)
            If ds.AppendRelatedField(connectionName:=Conn, ToCategory:=toCat, fieldName:=fld, headername:=rhArray(i), Delimiter:=Chr(13) + Chr(10), fieldtype:=0) < 0 Then
                GoTo aproblem2
            End If
        End If
    Next i
    
    k = -1
    k = UBound(riArray)
    For i = 0 To k 'related image
            'Util.CmcSplit related field
        If riArray(i) = "" Or rihArray(i) = "" Then
            'do nothing
        Else
        k = InStr(1, riArray(i), "__")
            'Conn = Util.CmcReplace(Left(riArray(i), k - 1), "_", " ")
            Conn = Left(riArray(i), k - 1)
            toCat = Mid(riArray(i), k + 2, InStr(k + 1, riArray(i), "__") - k - 2)
            fld = Right(riArray(i), Len(riArray(i)) - InStr(k + 1, riArray(i), "__") - 1)
            If ds.AppendRelatedField(connectionName:=Conn, ToCategory:=toCat, fieldName:=fld, headername:=rihArray(i), Delimiter:=Chr(13) + Chr(10), fieldtype:=1) < 0 Then
                GoTo aproblem2
            End If
        End If
    Next i
    
    'Any insert Views?
    k = -1
    k = UBound(vArray)
    For i = 0 To k
        If vArray(i) = "" Or vhArray(i) = "" Then
            'do nothing
        Else
            r = ds.InsertViewColumn(viewname:=vArray(i), headername:=vhArray(i))
            If r < 0 Then
                GoTo aproblem2
            End If
        End If
    Next i
    
    'Any me fields
    k = -1
    k = UBound(mArray)
    For i = 0 To k
        If mArray(i) = "" Or mhArray(i) = "" Then
            'do nothing
        ElseIf ds.AppendMeField(mArray(i), mhArray(i), 0) < 0 Then
            GoTo aproblem2
        End If
    Next i
    'End If
    
    'Any me fields -image
    k = -1
    k = UBound(miArray)
    For i = 0 To k
        If miArray(i) = "" Or mihArray(i) = "" Then
            'do nothing
        ElseIf ds.AppendMeField(miArray(i), mihArray(i), 1) < 0 Then
            GoTo aproblem2
        End If
    Next i
    'End If

    '
    StatusBar = "Please wait...Getting data from Commence"

    'Save the datasource
    r = ds.SaveDatasource(MaxRows:=nRows)
    If r < 0 Then
        GoTo aproblem2
    End If

    StatusBar = ""

aproblem2:
    'Makarand Office64
    ds.Dispose
    Set ds = Nothing
    Set letterObj = Nothing

aproblem:
    If Err.Number = 9 Then
        GetMergeDatasource = 0
    Else
        GetMergeDatasource = Err.Number
    End If

End Function

Function DatasourceCleanup(fName As String) As Integer

    Dim letterObj As Letters.MergeDB
    Dim i As Integer, k As Integer
    Dim r

    
    On Error Resume Next
    
    'Use the Commence letter object
    Set letterObj = New Letters.MergeDB
    
    r = letterObj.Cleanup(FileName:=fName)
    
    'On Error GoTo aproblem2

    
aproblem2:
    Set letterObj = Nothing

aproblem:

    DatasourceCleanup = r

End Function


Function GetTEMPDirectory() As String
    Dim fs As Object

    Set fs = CreateObject("Scripting.FileSystemObject")
    GetTEMPDirectory = fs.GetSpecialFolder(TemporaryFolder)
    
    Set fs = Nothing

End Function

Function GetFilename(Optional strExtension As String) As String
    Dim fs As Object
    Dim str As String

    Set fs = CreateObject("Scripting.FileSystemObject")
    
    str = fs.GetTempName
    str = LCase(str)
    If Len(strExtension) > 0 Then
        str = CmcReplace(str, ".tmp", strExtension)
    End If
    
    GetFilename = str
    Set fs = Nothing

End Function

Function GetTemplateFields(ByRef fArray() As String, ByRef fhArray() As String, ByRef iArray() As String, ihArray() As String, ByRef rArray() As String, rhArray() As String, ByRef riArray() As String, rihArray() As String, ByRef mArray() As String, ByRef mhArray() As String, ByRef miArray() As String, mihArray() As String, ByRef vArray() As String, vhArray() As String) As Integer

    Dim prop
    Dim f, m, v, r, ri, fi, mi
    'Dim dtype
    Dim vtmp, vhtmp, mtmp, mhtmp, mitmp, mihtmp, rtmp, rhtmp, ritmp, rihtmp, ftmp, fhtmp, fitmp, fihtmp
    
    On Error GoTo aproblem
    
    If docType = 0 Then
    For Each prop In ActiveDocument.CustomDocumentProperties
        Select Case prop.Name
            Case "Category", "Type", "Status", "NumFields", "NumMeFields", "NumViews", "NumImage", "NumMeImage", "NumRelatedImage", "ImageFieldsUsed", "NumRelatedFields", "Dest", "nRows", "SavedToCommence", "MergeImage"
            Case Else
                If (InStr(1, prop.Name, "View") > 0) Then
                    vtmp = vtmp + prop.Value + "|fffd|"
                    vhtmp = vhtmp + prop.Name + "|fffd|"
                ElseIf (InStr(1, prop.Name, "MeImage") > 0) Then
                    mitmp = mitmp + prop.Value + "|fffd|"
                    mihtmp = mihtmp + prop.Name + "|fffd|"
                ElseIf (InStr(1, prop.Name, "MeItem") > 0) Then
                    mtmp = mtmp + prop.Value + "|fffd|"
                    mhtmp = mhtmp + prop.Name + "|fffd|"
                ElseIf (InStr(1, prop.Name, "RelatedImage") > 0) Then
                    ritmp = ritmp + prop.Value + "|fffd|"
                    rihtmp = rihtmp + prop.Name + "|fffd|"
                ElseIf (InStr(1, prop.Name, "RelatedField") > 0) Then
                    rtmp = rtmp + prop.Value + "|fffd|"
                    rhtmp = rhtmp + prop.Name + "|fffd|"
                ElseIf (InStr(1, prop.Name, "DirectImage") > 0) Then
                    fitmp = fitmp + prop.Value + "|fffd|"
                    fihtmp = fihtmp + prop.Name + "|fffd|"
                ElseIf (InStr(1, prop.Name, "DirectField") > 0) Then
                    ftmp = ftmp + prop.Value + "|fffd|"
                    fhtmp = fhtmp + prop.Name + "|fffd|"
                End If
        End Select
    Next prop
    Else    'not a letter but a merge
    For Each prop In ActiveDocument.CustomDocumentProperties
        Select Case prop.Name
            Case "Category", "Type", "Status", "NumFields", "NumMeFields", "NumViews", "NumImage", "NumMeImage", "NumRelatedImage", "ImageFieldsUsed", "NumRelatedFields", "Dest", "nRows", "SavedToCommence", "MergeImage"
            Case Else
                If Right(prop.Name, 2) = "|fffd|0" Then  'direct
                    ftmp = ftmp + Trim(prop.Value) + "|fffd|"
                    fhtmp = fhtmp + Trim(Util.CmcReplace(prop.Name, "|fffd|0", "")) + "|fffd|"
                ElseIf Right(prop.Name, 2) = "|fffd|1" Then  'direct image
                    fitmp = fitmp + Trim(prop.Value) + "|fffd|"
                    fihtmp = fihtmp + Trim(Util.CmcReplace(prop.Name, "|fffd|1", "")) + "|fffd|"
                ElseIf Right(prop.Name, 2) = "|fffd|2" Then  'related
                    rtmp = rtmp + Trim(prop.Value) + "|fffd|"
                    rhtmp = rhtmp + Trim(Util.CmcReplace(prop.Name, "|fffd|2", "")) + "|fffd|"
                ElseIf Right(prop.Name, 2) = "|fffd|3" Then  'related image
                    ritmp = ritmp + Trim(prop.Value) + "|fffd|"
                    rihtmp = rihtmp + Trim(Util.CmcReplace(prop.Name, "|fffd|3", "")) + "|fffd|"
                ElseIf Right(prop.Name, 2) = "|fffd|4" Then  'me field
                    mtmp = mtmp + Trim(Util.CmcReplace(prop.Value, "MeItem__", "")) + "|fffd|"
                    mhtmp = mhtmp + Trim(Util.CmcReplace(prop.Name, "|fffd|4", "")) + "|fffd|"
                ElseIf Right(prop.Name, 2) = "|fffd|5" Then  'me image
                    mitmp = mitmp + Trim(Util.CmcReplace(prop.Value, "MeItem__", "")) + "|fffd|"
                    mihtmp = mihtmp + Trim(Util.CmcReplace(prop.Name, "|fffd|5", "")) + "|fffd|"
                End If
        End Select
    Next prop
    End If
    
    
    If ftmp <> "" Then
        Util.CmcSplit fArray, Left(ftmp, Len(ftmp) - 1), "|fffd|"
    End If
    If fhtmp <> "" Then
        Util.CmcSplit fhArray, Left(fhtmp, Len(fhtmp) - 1), "|fffd|"
    End If
    If fitmp <> "" Then
        Util.CmcSplit iArray, Left(fitmp, Len(fitmp) - 1), "|fffd|"
    End If
    If fihtmp <> "" Then
        Util.CmcSplit ihArray, Left(fihtmp, Len(fihtmp) - 1), "|fffd|"
    End If
    If rtmp <> "" Then
        Util.CmcSplit rArray, Left(rtmp, Len(rtmp) - 1), "|fffd|"
    End If
    If rhtmp <> "" Then
        Util.CmcSplit rhArray, Left(rhtmp, Len(rhtmp) - 1), "|fffd|"
    End If
    If ritmp <> "" Then
        Util.CmcSplit riArray, Left(ritmp, Len(ritmp) - 1), "|fffd|"
    End If
    If rihtmp <> "" Then
        Util.CmcSplit rihArray, Left(rihtmp, Len(rihtmp) - 1), "|fffd|"
    End If
    If mtmp <> "" Then
        Util.CmcSplit mArray, Left(mtmp, Len(mtmp) - 1), "|fffd|"
    End If
    If mhtmp <> "" Then
        Util.CmcSplit mhArray, Left(mhtmp, Len(mhtmp) - 1), "|fffd|"
    End If
    If mitmp <> "" Then
        Util.CmcSplit miArray, Left(mitmp, Len(mitmp) - 1), "|fffd|"
    End If
    If mihtmp <> "" Then
        Util.CmcSplit mihArray, Left(mihtmp, Len(mihtmp) - 1), "|fffd|"
    End If
    If vtmp <> "" Then
        Util.CmcSplit vArray, Left(vtmp, Len(vtmp) - 1), "|fffd|"
    End If
    If vhtmp <> "" Then
        Util.CmcSplit vhArray, Left(vhtmp, Len(vhtmp) - 1), "|fffd|"
    End If

aproblem:
    GetTemplateFields = Err.Number

End Function

Function GetLetterInformation(Optional vName As String, Optional ttype As Integer, Optional tCat As String, Optional iName As String, Optional fLabel As String, Optional tName As String, Optional tfName As String, Optional lDest As Integer, Optional pView As Integer, Optional itemcount As Integer, Optional LinkFileName As String) As Integer

    Dim CmcObj As New CommenceDB
    Dim c As Object
    Dim tmp As String
    Dim tmpArray
    
    On Error GoTo aproblem

    If Commence.APForm <> "" Then
        tmp = Commence.APForm
    Else
        Set CmcObj = New CommenceDB
        Set c = CmcObj.GetConversation("Commence", "GetData")
        
        On Error GoTo aproblem2
        tmp = c.Request("[GetLetterViewInfo(|fffd|)]")
    End If
'CmcSplit(vOutput, Expression As String, [Delimiter = " "], [Limit As Long = -1], [Compare As Long])
    Util.CmcSplit tmpArray, tmp, "|fffd|"
    vName = tmpArray(0)
    ttype = Val(tmpArray(1))
    tCat = tmpArray(2)
    iName = tmpArray(3)
    fLabel = tmpArray(4)
    tName = tmpArray(5)
    tfName = tmpArray(6)
    lDest = Val(tmpArray(7))
    pView = Val(tmpArray(8))
    itemcount = Val(tmpArray(9))
    LinkFileName = tmpArray(10)
    
aproblem2:
    Set c = Nothing
    Set CmcObj = Nothing

aproblem:

    GetLetterInformation = Err.Number

End Function

Function GetFieldtoFile(cat As String, item As String, fieldName As String, filenme As String, fieldtype As Integer, hasVal As Boolean, Optional strExtension As String = ".tmp")

    'fieldtype
    '   0 = field
    '   1 = image
    '   2 = Commence view
    
    Dim CmcObj As New CommenceDB
    Dim c As Object
    Dim i As Long
    Dim s As String
    Dim r

    'Get the filename for the datasource
    filenme = Util.GetTEMPDirectory + "\" + Util.GetFilename(strExtension)
    
    On Error GoTo aproblem

    Set CmcObj = New CommenceDB
    Set c = CmcObj.GetConversation("Commence", "MergeItem")
    
    'On Error GoTo aproblem2
    On Error Resume Next
    Select Case fieldtype
        Case 0
        Case 1
            If item = "" Then
                i = c.Request("[GetImageFieldtoFile(,,""" + fieldName + """,""" + filenme + """)]")
            Else
                i = c.Request("[GetImageFieldtoFile(""" + cat + """,""" + item + """,""" + fieldName + """,""" + filenme + """)]")
            End If
            If i = 0 Then
                hasVal = False
                Err.Description = "(Field not found)"
            Else
                hasVal = True
            End If

        Case 2  'View
            s = c.Request("[GetViewToFile(""" + fieldName + """,1 ,,," + filenme + ")]")
            If s <> "OK" Then
                hasVal = False
                Err.Description = "(View not found)"
            Else
                hasVal = True
            End If
    End Select
    
aproblem2:
    Set c = Nothing
    Set CmcObj = Nothing

aproblem:
    GetFieldtoFile = Err.Number

End Function

Function getDelimitedFilename(fName) As String

    getDelimitedFilename = Util.CmcReplace(fName, "\", "\\")

End Function

Function createsampledatasource(fName As String, ByRef fArray() As String, ByRef hArray() As String, ByRef fiArray() As String, ByRef fihArray() As String, ByRef rArray() As String, ByRef rhArray() As String, ByRef riArray() As String, ByRef rihArray() As String, ByRef meArray() As String, ByRef mehArray() As String, ByRef miArray() As String, ByRef mihArray() As String, ByRef vArray() As String, ByRef vhArray() As String) As Integer
    Dim hrecord As String
    Dim frecord As String
    Dim listSep As String
    Dim k
    
    If Util.GetRegistry("HK_USERS\.DEFAULT\Control Panel\International", "sList", listSep) = False Then
        listSep = ","
    End If
    If listSep = "" Then
        listSep = ","
    End If
    
    hrecord = ""
    frecord = ""
    
    On Error Resume Next
    
    
    k = -1
    k = UBound(vhArray)
    If k > -1 Then
        hrecord = Util.CmcJoin(vhArray, listSep)
    End If
    If hrecord <> "" Then
        k = -1
        k = UBound(hArray)
        If k > -1 Then
            hrecord = hrecord + listSep + Util.CmcJoin(hArray, listSep)
            frecord = frecord + listSep + Util.CmcJoin(fArray, listSep)
        End If
    Else
        k = -1
        k = UBound(hArray)
        If k > -1 Then
            hrecord = Util.CmcJoin(hArray, listSep)
            frecord = Util.CmcJoin(fArray, listSep)
        End If
    End If
    If hrecord <> "" Then
        k = -1
        k = UBound(fihArray)
        If k > -1 Then
            hrecord = hrecord + listSep + Util.CmcJoin(fihArray, listSep)
            frecord = frecord + listSep + Util.CmcJoin(fiArray, listSep)
        End If
    Else
        k = -1
        k = UBound(fiArray)
        If k > -1 Then
            hrecord = Util.CmcJoin(fihArray, listSep)
            frecord = Util.CmcJoin(fiArray, listSep)
        End If
    End If
    If hrecord <> "" Then
        k = -1
        k = UBound(rhArray)
        If k > -1 Then
            hrecord = hrecord + listSep + Util.CmcJoin(rhArray, listSep)
            frecord = frecord + listSep + Util.CmcJoin(rArray, listSep)
        End If
    Else
        k = -1
        k = UBound(rhArray)
        If k > -1 Then
            hrecord = Util.CmcJoin(rhArray, listSep)
            frecord = Util.CmcJoin(rArray, listSep)
        End If
    End If
    If hrecord <> "" Then
        k = -1
        k = UBound(rihArray)
        If k > -1 Then
            hrecord = hrecord + listSep + Util.CmcJoin(rihArray, listSep)
            frecord = frecord + listSep + Util.CmcJoin(riArray, listSep)
        End If
    Else
        k = -1
        k = UBound(rihArray)
        If k > -1 Then
            hrecord = Util.CmcJoin(rihArray, listSep)
            frecord = Util.CmcJoin(riArray, listSep)
        End If
    End If
    If hrecord <> "" Then
        k = -1
        k = UBound(mehArray)
        If k > -1 Then
            hrecord = hrecord + listSep + Util.CmcJoin(mehArray, listSep)
            frecord = frecord + listSep + Util.CmcJoin(meArray, listSep)
        End If
    Else
        k = -1
        k = UBound(mehArray)
        If k > -1 Then
            hrecord = hrecord + Util.CmcJoin(mehArray, listSep)
            frecord = frecord + Util.CmcJoin(meArray, listSep)
        End If
    End If
    If hrecord <> "" Then
        k = -1
        k = UBound(mihArray)
        If k > -1 Then
            hrecord = hrecord + listSep + Util.CmcJoin(mihArray, listSep)
            frecord = frecord + listSep + Util.CmcJoin(miArray, listSep)
        End If
    Else
        k = -1
        k = UBound(mihArray)
        If k > -1 Then
            hrecord = hrecord + Util.CmcJoin(mihArray, listSep)
            frecord = frecord + Util.CmcJoin(miArray, listSep)
        End If
    End If
    ActiveDocument.MailMerge.CreateDataSource Name:=fName, HeaderRecord:=hrecord
    'ActiveDocument.MailMerge.EditDataSource
    ActiveDocument.MailMerge.MainDocumentType = wdNotAMergeDocument
    createsampledatasource = -1
    
End Function

Function ConvertFieldToHeader(fld As String, fType As Integer) As String
    'fType
    '   0 - direct
    '   1 - related
    '   2 - Me
    
    Dim Conn As String
    Dim cat As String
    Dim rFld As String
    Dim iStart As Integer
    Dim iEnd As Integer
    Dim sSearch As String
    Dim fldLen As Integer
    Dim sTemp As String
    
    sTemp = Util.CmcReplace(fld, "*", "x")
    sTemp = Util.CmcReplace(sTemp, ",", "x")
    sTemp = Util.CmcReplace(sTemp, "<", "x")
    sTemp = Util.CmcReplace(sTemp, ".", "x")
    sTemp = Util.CmcReplace(sTemp, ">", "x")
    sTemp = Util.CmcReplace(sTemp, "?", "x")
    sTemp = Util.CmcReplace(sTemp, "/", "x")
    sTemp = Util.CmcReplace(sTemp, ";", "x")
    sTemp = Util.CmcReplace(sTemp, ":", "x")
    sTemp = Util.CmcReplace(sTemp, """", "x")
    sTemp = Util.CmcReplace(sTemp, "'", "x")
    sTemp = Util.CmcReplace(sTemp, "[", "x")
    sTemp = Util.CmcReplace(sTemp, "{", "x")
    sTemp = Util.CmcReplace(sTemp, "]", "x")
    sTemp = Util.CmcReplace(sTemp, "}", "x")
    sTemp = Util.CmcReplace(sTemp, "\", "x")
    sTemp = Util.CmcReplace(sTemp, "|", "x")
    sTemp = Util.CmcReplace(sTemp, "+", "x")
    sTemp = Util.CmcReplace(sTemp, "=", "x")
    sTemp = Util.CmcReplace(sTemp, "-", "x")
    sTemp = Util.CmcReplace(sTemp, ")", "x")
    sTemp = Util.CmcReplace(sTemp, "(", "x")
    sTemp = Util.CmcReplace(sTemp, "&", "x")
    sTemp = Util.CmcReplace(sTemp, "^", "x")
    sTemp = Util.CmcReplace(sTemp, "%", "x")
    sTemp = Util.CmcReplace(sTemp, "$", "x")
    sTemp = Util.CmcReplace(sTemp, "#", "x")
    sTemp = Util.CmcReplace(sTemp, "@", "x")
    sTemp = Util.CmcReplace(sTemp, "!", "x")
    sTemp = Util.CmcReplace(sTemp, "`", "x")
    sTemp = Util.CmcReplace(sTemp, "~", "x")

    If Len(fld) > 40 Then   'have to fix it depending on the type
        Select Case fType
            Case 0  'Direct field
                
                ConvertFieldToHeader = Left(sTemp, 40)
                
            Case 1  'Related field
                'Get the connection/cat/field out because we get it in the form of connection__category__field
                sSearch = "__"
                iStart = InStr(1, sTemp, sSearch)
                Conn = Util.CmcReplace(Left(sTemp, iStart - 1), "*", "_")
                iEnd = InStr(iStart + Len(sSearch), sTemp, sSearch)
                cat = Util.CmcReplace(Mid(fld, iStart + Len(sSearch), iEnd - iStart - Len(sSearch)), "*", "_")
                rFld = Util.CmcReplace(Right(sTemp, Len(fld) - iEnd - Len(sSearch) + 1), "*", "_")
                
                'check if replace __ with single, is <= 40
                If Len(rFld) + Len(cat) + Len(Conn) + 2 < 41 Then 'we are ok
                    ConvertFieldToHeader = Util.CmcReplace(Conn, " ", "_") + "_" + Util.CmcReplace(cat, " ", "_") + "_" + Util.CmcReplace(rFld, " ", "_")
                ElseIf Len(Util.CmcReplace(rFld, " ", "")) + Len(Util.CmcReplace(Conn, " ", "")) + Len(Util.CmcReplace(cat, " ", "")) + 2 < 41 Then
                    ConvertFieldToHeader = Util.CmcReplace(Conn, " ", "") + "_" + Util.CmcReplace(cat, " ", "") + "_" + Util.CmcReplace(rFld, " ", "")
                Else
                    rFld = Util.CmcReplace(rFld, " ", "")
                    cat = Util.CmcReplace(cat, " ", "")
                    Conn = Util.CmcReplace(Conn, " ", "")
                    fldLen = Len(rFld) + Len(cat) + Len(Conn) + 2
                    Do While fldLen > 40
                        If Len(Conn) > 7 Then   'about 20% of total 40 chars
                            Conn = Left(Conn, Len(Conn) - 1)
                        End If
                        fldLen = Len(rFld) + Len(cat) + Len(Conn) + 2
                        If fldLen > 40 Then
                            If Len(cat) > 11 Then   'about 30% of total 40 chars
                                cat = Left(cat, Len(cat) - 1)
                            End If
                        End If
                        fldLen = Len(rFld) + Len(cat) + Len(Conn) + 2
                    Loop
                    ConvertFieldToHeader = Conn + "_" + cat + "_" + rFld
                End If
            Case 2  'Me field
                'should never have to do because only has the field which is never > 20
                sTemp = Util.CmcReplace(sTemp, "*", "_")
                ConvertFieldToHeader = Left(sTemp, 40)
        End Select
    Else
        ConvertFieldToHeader = sTemp
    End If
End Function

Public Function CmcSplit(ByRef vOutput, ByVal Expression As String, Optional Delimiter = " ", Optional Limit As Long = -1, Optional Compare As Long = vbBinaryCompare)
' off97 VBA does not include this call
    'TODO: this is not 100% right -- CmcSplit = gLetterObj.CmcSplit(Expression, Delimiter, Limit, Compare)
    gLetterObj.CmcSplit vOutput, Expression, Delimiter, Limit, Compare
    CmcSplit = vOutput
End Function

Public Function CmcJoin(ByVal SourceArray, Optional Delimiter = " ") As String
' off97 VBA does not include this call
    'TODO: this is not 100% right -- CmcJoin = gLetterObj.CmcJoin(SourceArray, Delimiter)
    CmcJoin = gLetterObj.CmcJoin(SourceArray, Delimiter)
End Function

Public Function CmcReplace(ByVal Expression As String, Find As String, Replace As String, Optional Start As Long = 1, Optional count As Long = -1, Optional Compare As Long = vbBinaryCompare) As String
' off97 VBA does not include this call
    'TODO: this is not 100% right -- CmcReplace = gLetterObj.CmcReplace(Expression, Find, Replace, Start, Count, Compare)
    CmcReplace = gLetterObj.CmcReplace(Expression, Find, Replace, Start, count, Compare)
End Function

'Sub AutoExit()
    'MsgBox "In autoExit"
    'Dim atemp
    'For Each atemp In Templates
    '    If LCase(atemp.Name) = "cmcmerge.dot" Then atemp.Saved = True
    'Next atemp

'End Sub

'Sub Test()
'    Dim CmcMenu As CommandBar
'    Dim CmcBar As CommandBarControl
'
'    CustomizationContext = ThisDocument
'
'    Set CmcMenu = CommandBars.Add(Name:="CmcMerge", Position:=msoBarFloating, MenuBar:=False, Temporary:=True)
'
'    Set CmcBar = CommandBars("CmcMerge").Controls.Add(Type:=msoControlButton)
'        CmcBar.Caption = "CMCMERGE"
'    CmcMenu.Visible = True
'End Sub

Public Function UpdateCommenceMenu(ByVal docType As Integer)
    Dim commenceMenu As CommandBarControl, viewMenu As CommandBarControl
    Dim toolbarsMenu As CommandBarControl
    Set commenceMenu = CommandBars.ActiveMenuBar.Controls("&Commence")
    Set viewMenu = CommandBars.ActiveMenuBar.Controls("View")
    Set toolbarsMenu = viewMenu.CommandBar.Controls.item("Toolbars")
    
    If docType = 1 Or docType = 2 Then
        commenceMenu.CommandBar.Controls.item("Insert Commence Field").Enabled = False
        commenceMenu.CommandBar.Controls.item("Insert Commence View").Enabled = False
        CommandBars(COMMENCE_FIELDS).Enabled = False
        CommandBars(COMMENCE_VIEWS).Enabled = False
    Else
        commenceMenu.CommandBar.Controls.item("Insert Commence Field").Enabled = True
        commenceMenu.CommandBar.Controls.item("Insert Commence View").Enabled = True
        CommandBars(COMMENCE_FIELDS).Enabled = True
        CommandBars(COMMENCE_VIEWS).Enabled = True
    End If
End Function
Attribute VB_Name = "frmAddLetter"
Attribute VB_Base = "0{5C33880E-5E3F-46AD-AADF-4F3B3125C973}{9E039D1F-4742-48D4-87E6-D05D7724528E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



'Option Explicit

Public Sub UserForm_Activate()
    
    'Get Commence categories for Default Category
    Dim selCategory As String
    selCategory = Util.GetCommenceLettersPref("Category")
        
    'Get the categories from Commence
    Commence.frmGetCmcCategories CatCount, catNames
    
    Util.CmcSplit catNamesarray, catNames, "|fffd|"
    
    For i = 0 To CatCount - 1
        cbxCategory.AddItem catNamesarray(i)
        If catNamesarray(i) = selCategory Then
            lindex = i
        End If
    Next i
    If selCategory = "" Or lindex = 0 Then
        If cbxCategory.ListCount > 1 Then
            cbxCategory.ListIndex = 1
        Else
            cbxCategory.ListIndex = -1
        End If
    Else
        cbxCategory.ListIndex = lindex
    End If

End Sub


Private Sub btnCancel_Click()
    Cancelled = True
    Unload Me
End Sub

Private Sub btnCreateTemplate_Click()
    'Check if name blank
    If txtTemplateName = "" Then
        txtTemplateName.SetFocus
    Else
        Util.SetDocumentProperties "Category", cbxCategory
        ActiveDocument.BuiltInDocumentProperties(wdPropertySubject) = txtTemplateName
        If chbxShared.Value = True Then
            Util.SetDocumentProperties "Shared", "1"
        Else
            Util.SetDocumentProperties "Shared", "0"
        End If
        Unload Me
    End If

        
End Sub

Attribute VB_Name = "frmCreateLabel"
Attribute VB_Base = "0{86FA2362-DAFF-404B-9969-46F5A1AADD2E}{C3B0B5EF-421D-4D92-8D66-9DDD2AC3E303}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private Sub btnCancel_Click()
    Cancelled = True
    Unload Me
End Sub

Private Sub btnOK_Click()
    With frmCreateLabel
        RowValue = .txtRow.Value
        ColumnValue = .txtColumn.Value
        If Val(RowValue) > rnum Or Val(RowValue) = 0 Then
            .txtRow.EnterFieldBehavior = fmEnterFieldBehaviorSelectAll
            .txtRow.SetFocus
        ElseIf Val(ColumnValue) > cnum Or Val(ColumnValue) = 0 Then
            .txtColumn.EnterFieldBehavior = fmEnterFieldBehaviorSelectAll
            .txtColumn.SetFocus
        Else
            Unload Me
        End If
    End With
        
End Sub
Attribute VB_Name = "frmPrefs"
Attribute VB_Base = "0{A6AC3D9F-46E2-423E-9815-7ECB62616254}{38B3607A-DD1B-4D0A-BEFA-7CFDAAC2EAB4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Option Explicit

Public Sub UserForm_Activate()
Dim ListItems(5)
Dim ListItems1(5)
Dim oTranslateTable
Dim Lookup
Dim sItem
Dim CatCount
Dim catNames
Dim catNamesarray
Dim fShared
Dim fShowLogItem

'catCount = 0
'catNames = ""

    If Documents.count = 0 Then
        Documents.Add
    End If
  
    'ListItems(0) = "(none)"
    'ListItems(1) = "WinFax"
    'ListItems(2) = "RightFax"
    'ListItems(3) = "FaxRush"
    'ListItems(4) = "DelFax"
    'ListItems(5) = "HylaFax"
    'cbFaxMethod.List = ListItems
  
    'cbFaxMacro.AddItem ("&FAX")
    'cbFaxMacro.AddItem ("&DIALFAX")

    'Get Commence categories for Default Category
    selCategory = Util.GetCommenceLettersPref("Category")
        
    'Get the categories from Commence
    Commence.frmGetCmcCategories CatCount, catNames
    
    Util.CmcSplit catNamesarray, catNames, "|fffd|"
    
    For i = 0 To CatCount - 1
        cbxdefCategory.AddItem catNamesarray(i)
        If catNamesarray(i) = selCategory Then
            lindex = i
        End If
    Next i
    If selCategory = "" Or lindex = 0 Then
        If cbxdefCategory.ListCount > 1 Then
            cbxdefCategory.ListIndex = 1
        Else
            cbxdefCategory.ListIndex = -1
        End If
    Else
        cbxdefCategory.ListIndex = lindex
    End If
   
    ' Get Prefs...
'    txtDefaultFax.Value = Util.GetCommenceLettersPref("FaxNumber")
'    txtDefaultEmail.Value = Util.GetCommenceLettersPref("EmailAddress")
    fShared = Util.GetCommenceLettersPref("Share")
    If fShared = "" Then
        chbxShare.Value = False
    Else
        chbxShare.Value = fShared
    End If
  
    fShowLogItem = Util.GetCommenceLettersPref("ShowLogItem")
    If fShowLogItem = "" Then
        chbxShowLogItem.Value = False
    Else
        chbxShowLogItem.Value = fShowLogItem
    End If
    
    ' API/Application to be used for sending e-mail
    Dim selEmailClient As String
    'Makarand [R31-9313]error 429
    cbxEmailClient.AddItem CommenceEmail.MS_OUTLOOK
    cbxEmailClient.AddItem CommenceEmail.DEFAULT_EMAIL_CLIENT
    selEmailClient = Util.GetCommenceLettersPref(CommenceEmail.EMAIL_CLIENT_REG_KEY)
    If selEmailClient = "" Then
        cbxEmailClient.ListIndex = 0
    Else
        cbxEmailClient.Text = selEmailClient
    End If
End Sub
    
Private Sub btnCancel_Click()
    Cancelled = True
    Unload Me
End Sub

Private Sub chbxLog_Click()
    If chbxLog.Value = True Then
        chbxLink.Enabled = True
    Else
        chbxLink.Value = False
        chbxLink.Enabled = False
    End If
End Sub


Private Sub btnSave_Click()

    Util.SetCommenceLettersPref "Category", cbxdefCategory.Value
'    Util.SetCommenceLettersPref "FaxNumber", txtDefaultFax.Value
'    Util.SetCommenceLettersPref "EmailAddress", txtDefaultEmail.Value
    Util.SetCommenceLettersPref "FaxNumber", cbxDefaultFax.Value
    Util.SetCommenceLettersPref "EmailAddress", cbxDefaultEmail.Value
    Util.SetCommenceLettersPref CommenceEmail.EMAIL_CLIENT_REG_KEY, cbxEmailClient.Value
        
    If chbxShare.Value = True Then
        Util.SetCommenceLettersPref "Share", "1"
    Else
        Util.SetCommenceLettersPref "Share", "0"
    End If

    If chbxShowLogItem.Value = True Then
        Util.SetCommenceLettersPref "ShowLogItem", "1"
    Else
        Util.SetCommenceLettersPref "ShowLogItem", "0"
    End If
    Unload Me
End Sub

Private Sub cbxFaxEmailPopulate(numFields As Integer, flds As String)
    Dim FldsArray, i As Integer
    Util.CmcSplit FldsArray, flds, "|fffd|"
    
    Dim faxNumberValue As String, emailValue As String
    
    faxNumberValue = Util.GetCommenceLettersPref("FaxNumber")
    emailValue = Util.GetCommenceLettersPref("EmailAddress")
    
    cbxDefaultFax.Clear
    cbxDefaultEmail.Clear
    
    For i = 0 To numFields - 1
        cbxDefaultFax.AddItem FldsArray(i)
        cbxDefaultEmail.AddItem FldsArray(i)
        Select Case FldsArray(i)
            Case faxNumberValue:
                cbxDefaultFax.ListIndex = i
            Case emailValue:
                cbxDefaultEmail.ListIndex = i
        End Select
    Next

End Sub

Private Sub cbxdefCategory_Change()
    Dim numFields As Integer, flds As String
    Util.GetFields cbxdefCategory.Value, numFields, flds, False, False
    cbxFaxEmailPopulate numFields, flds
End Sub

Attribute VB_Name = "frmTemplateFields"
Attribute VB_Base = "0{6641936B-FFC0-4F04-860C-703BFBCFD44C}{6BC37FA2-DE53-4E16-A11F-297040E32F2E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Public inloop As Boolean
Public mecategory As String

Private Sub btnCancel_Click()
    Cancelled = True
    Unload Me
End Sub

Private Sub btnCreate_Click()
    
    Dim i As Integer
    Dim fld As String
    Dim j As Integer
    Dim tmp As String
    Dim fldHeader
    Dim ni As Integer
    Dim nf As Integer
    Dim nrf As Integer
    Dim nri As Integer
    Dim nm As Integer
    Dim nmi As Integer
    
    ni = 0
    nf = 0
    nrf = 0
    nri = 0
    nm = 0
    nmi = 0
    
    For i = 0 To frmTemplateFields.lstFields.ListCount - 1
        If lstFields.Selected(i) = True Then
            If InStr(1, lstFields.List(i, 0), "__") > 0 Then
                tmp = Util.CmcReplace(lstFields.List(i, 0), "..", "__") 'connection name/cat
            ElseIf lstFields.List(i, 0) = "" Then 'a connected field or me field
                fld = lstFields.List(i, 1)
                j = j - 1
                If InStr(1, lstFields.List(i, 1), "(IMAGE)") > 0 Then
                    fld = tmp + Util.CmcReplace(lstFields.List(i, 1), "(IMAGE)", "")
                    fldHeader = Util.ConvertFieldToHeader(Trim(fld), 1) + "|fffd|3"
                    nri = nri + 1
                Else
                    fld = tmp + lstFields.List(i, 1)
                    fldHeader = tmp + Util.ConvertFieldToHeader(Trim(lstFields.List(i, 1)), 1) + "|fffd|2"
                    nrf = nrf + 1
                End If
                Util.SetDocumentProperties fldHeader, fld

            ElseIf lstFields.List(i, 0) = "(-Me-)" Then
                i = i + 1
                Do While lstFields.List(i, 0) = ""
                    If lstFields.Selected(i) = True Then
                        If InStr(1, lstFields.List(i, 1), "(IMAGE)") > 0 Then
                            fld = "MeItem__" + Util.CmcReplace(lstFields.List(i, 1), "(IMAGE)", "")
                            fldHeader = Util.ConvertFieldToHeader(Trim(fld), 2) + "|fffd|5"
                            nmi = nmi + 1
                            'save it
                        Else
                            fld = "MeItem__" + Trim(lstFields.List(i, 1))
                            fldHeader = Util.ConvertFieldToHeader(Trim(fld), 2) + "|fffd|4"
                            nm = nm + 1
                        End If
                        Util.SetDocumentProperties fldHeader, fld
                    End If
                    i = i + 1
                Loop
                i = i - 1
            Else
                If InStr(1, lstFields.List(i, 0), "(IMAGE)") > 0 Then
                    fld = Util.CmcReplace(lstFields.List(i, 0), "(IMAGE)", "")
                    fldHeader = Util.ConvertFieldToHeader(Trim(fld), 1) + "|fffd|1"
                    ni = ni + 1
                Else
                    fld = Trim(lstFields.List(i, 0))
                    fldHeader = Util.ConvertFieldToHeader(Trim(lstFields.List(i, 0)), 0) + "|fffd|0"
                    nf = nf + 1
                End If
                Util.SetDocumentProperties fldHeader, fld
            End If
        End If
    Next i
    
    Util.SetDocumentProperties "NumFields", nf
    Util.SetDocumentProperties "NumImage", ni
    Util.SetDocumentProperties "NumRelatedFields", nrf
    Util.SetDocumentProperties "NumRelatedImage", nri
    Util.SetDocumentProperties "NumMeFields", nm
    Util.SetDocumentProperties "NumMeImage", nmi
        
    If nf = 0 And ni = 0 And nrf = 0 And nri = 0 And nm = 0 And nmi = 0 Then
        MsgBox "You must select at least one field", vbOKOnly, "Commence"
        lstFields.SetFocus
    Else
        Unload Me
    End If

End Sub

Private Sub lstFields_Change()

    Dim i
    Dim Conn
    Dim cat As String
    Dim num As Integer
    Dim flds As String
    Dim fArray() As String
    Dim lindex, c
    Dim count
    
    If inloop = True Then
        Exit Sub
    End If
    
    count = 0
    
    'check if connection
    c = lstFields.ListCount
    lindex = lstFields.ListIndex
    If lindex > -1 Then
    If lstFields.Selected(lindex) = True Then
        i = InStr(1, lstFields.List(lindex, 0), "__")
        If i > 0 Then
            inloop = True
            Conn = Left(lstFields.List(lindex, 0), Len(lstFields.List(lindex, 0)) - i)
            cat = Mid(lstFields.List(lindex, 0), i + 2, Len(lstFields.List(lindex, 0)) - i - 3)
            If Util.GetFields(cat, num, flds, False, True) > 0 Then
                '??
            End If
            Util.CmcSplit fArray, flds, "|fffd|"
            c = lstFields.ListCount
            For i = c To c + num - 1
                lstFields.AddItem ("")
                lstFields.List(c - 1, 1) = ""
            Next i
            c = lstFields.ListCount
            For i = c - 1 To lindex + 1 + num Step -1
                If lstFields.Selected(i - num) = True Then
                    lstFields.Selected(i) = True
                End If
                lstFields.List(i, 0) = lstFields.List(i - num, 0)
                lstFields.List(i, 1) = lstFields.List(i - num, 1)
                lstFields.List(i - num, 0) = ""
                lstFields.List(i - num, 1) = ""
            Next i
            For i = lindex + 1 To lindex + num
                lstFields.List(i, 1) = fArray(i - lindex - 1)
                If lstFields.Selected(i) = True Then
                    lstFields.Selected(i) = False
                End If
            Next i
        End If
        If lstFields.List(lindex, 0) = "(-Me-)" Then
            inloop = True
            cat = mecategory
            If Util.GetFields(cat, num, flds, False, True) > 0 Then
                '??
            End If
            Util.CmcSplit fArray, flds, "|fffd|"
            c = lstFields.ListCount
            For i = c To c + num - 1
                lstFields.AddItem ("")
                lstFields.List(c - 1, 1) = ""
            Next i
            c = lstFields.ListCount
            For i = c - 1 To lindex + 1 + num Step -1
                If lstFields.Selected(i - num) = True Then
                    lstFields.Selected(i) = True
                End If
                lstFields.List(i, 0) = lstFields.List(i - num, 0)
                lstFields.List(i, 1) = lstFields.List(i - num, 1)
                lstFields.List(i - num, 0) = ""
                lstFields.List(i - num, 1) = ""
            Next i
            For i = lindex + 1 To lindex + num
                    lstFields.List(i, 1) = fArray(i - lindex - 1)
                    If lstFields.Selected(i) = True Then
                        lstFields.Selected(i) = False
                    End If
            Next i

        End If
    ElseIf lstFields.Selected(lindex) = False Then
        'have to clear it all out
        If (InStr(1, lstFields.List(lindex, 0), "__") > 0) Or (lstFields.List(lindex, 0) = "(-Me-)") Then
            i = lindex + 1
            Do While i < c - 1 - count
                If lstFields.List(i, 0) <> "" Then
                    Exit Do
                ElseIf lstFields.List(i, 1) <> "" Then
                    lstFields.RemoveItem (i)
                    count = count + 1
                    i = i - 1
                End If
                i = i + 1
            Loop
        End If
    End If
    End If
    inloop = False
End Sub


Private Sub UserForm_Activate()
    Dim tmp As String
    Dim haveerror
    
    haveerror = Util.GetCommenceInfo("GetData", "[GetPreference(Me,|fffd|)]", tmp)
    If haveerror > 0 Then
        'assume it is employee???
        tmp = "Employee|fffd|test"
        'GoTo DDEerror
    End If
    mecategory = Left(tmp, InStr(1, tmp, "|fffd|") - 1)
        
DDEerror:

End Sub

Attribute VB_Name = "frmTemplateType"
Attribute VB_Base = "0{99C3B6EF-848D-490F-9633-5CD19C1A7C7D}{A5365BD4-965E-4BBF-906A-703A581D0C1E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private Sub btnCancel_Click()
    Cancelled = True
    Unload Me
End Sub

Private Sub btnCreate_Click()
    Select Case lstType.Value
        Case "Letter"
            Util.SetDocumentProperties "Type", 0
        Case "Label"
            Util.SetDocumentProperties "Type", 1
        Case "Envelope"
            Util.SetDocumentProperties "Type", 2
    End Select
    Unload Me
End Sub

' InQuest injected base64 decoded content
' zjej
' bzWlN
' bzWl~
' jZ 1
' bzWlR

INQUEST-PP=macro
