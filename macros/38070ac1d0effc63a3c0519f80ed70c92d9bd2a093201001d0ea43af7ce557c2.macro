Attribute VB_Name = "ClearAndRoll"
Sub clear()
'
 Dim ans As String
    
    ans = MsgBox("Are you sure you want to clear all amounts?", vbYesNo, "PPC's Workpapers")
        If ans = vbNo Then
        Exit Sub
        End If
    
    Application.ScreenUpdating = False
    
    Sheet3.Select
    Range("CollectibilityClear").ClearContents
    Sheet2.Select
    Range("AnalyticalsClear").ClearContents
    Sheet1.Select
    If Range("NoteTerms").EntireColumn.Hidden = True Then
        Call ShowNoteTerms
        Application.ScreenUpdating = False
    End If
    Range("Client").Select
    Selection.UnMerge
    Range("Preparer").Select
    Selection.UnMerge
    Range("Input_clear").ClearContents
    Range(Range("Client"), Range("Client").Offset(0, 3)).Offset(1, 0).Select
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    Range(Range("Client"), Range("Client").Offset(0, 3)).Select
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
      
    Range("year_end").Value = "=PPC_GetBalanceSheetDate()"
    Range("client").Value = "=PPC_GetClientName()"
    Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name") = "[Client Name]"
    Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date") = ""
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = False
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = True
    Range("Input").Select

    Application.ScreenUpdating = True
    Call ShowRows
    
End Sub

Sub Rollforward()

'
    Dim Msg, Style, TITLE, Response
    Dim currentdate
    Dim newdate
    Dim FinalInputRowNumber As Integer
    Beep
    Msg = "Prior period amounts will be replaced with the later period" & vbCrLf
    Msg = Msg & "amounts. Do you want to continue ?"   ' Define message.
    Style = vbOKCancel + vbQuestion + vbDefaultButton1 ' Define buttons.
    Response = MsgBox(Msg, Style, "PPC's Workpapers")
    If Response = vbCancel Then    ' User chose Cancel.
        GoTo Quit
    End If
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Sheet3.Select
    Range("CollectibilityClear").ClearContents
    Range("Collectibility").Select
    Sheet2.Select
'    Application.CutCopyMode = False
    Range("AnalyticalsPY").Copy
    Range("AnalyticalsPY2Beg").PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Application.CutCopyMode = False
    Range("AnalyticalsCY").Copy
    Range("AnalyticalsPYBeg").PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Application.CutCopyMode = False
    Range("Analyticals").Select
    Sheet1.Select
    Range("IntAccruedEnd").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("IntAccruedBeg").Select
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Application.CutCopyMode = False
    For Each cell In Range("IntAccruedBeg")
        If cell.Value = "" Then
            cell.ClearContents
        End If
    Next cell
    Range("RollBalance").Select
    Selection.Copy
    Range("py_amt").Select
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    For Each cell In Range("PriorYearBalances")
        If cell.Value = "" Then
            cell.ClearContents
        End If
    Next cell
    
    If Range("NoteTerms").EntireColumn.Hidden = True Then
        Call ShowNoteTerms
        Application.EnableEvents = False
        Application.ScreenUpdating = False
    End If
    Range("Client").Select
    Selection.UnMerge
    Range("Preparer").Select
    Selection.UnMerge
    Range("roll_clear").ClearContents
    Range(Range("Client"), Range("Client").Offset(0, 3)).Offset(1, 0).Select
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    Range(Range("Client"), Range("Client").Offset(0, 3)).Select
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
'   *********************************
'   This part of the code starts at the bottom of beginning balances column and looks cell by cell
'   for beginning balances of zero. Once it finds a zero balance, all of the data in the table
'   below that row is copied and pasted over that row with the zero balance. The inputs for the
'   bottom row of the table are then deleted. The program then continues searching for beginning
'   balances of zero until all rows of the table are searched.
    
    FinalInputRowNumber = Range("PriorYearBalances").Cells.Count + ( _
        Range("PriorYearBalances").Row - 1)
    For c = Range("PriorYearBalances").Cells.Count + (Range("PriorYearBalances").Row - 1) To _
        Range("PriorYearBalances").Row Step -1
    If Cells(c, Range("PriorYearBalances").Column) <> "" And _
        Cells(c, Range("PriorYearBalances").Column) = 0 Then
        If c = FinalInputRowNumber Then   'special instructions for the last row of the table.
            Intersect(Cells(c, Range("PriorYearBalances").Column).EntireRow, _
                Range("NoteTableInputs")).ClearContents
            Sheets("Analyticals").Select
            Range(Cells(FinalInputRowNumber, Range("AnalyticalsPYBeg").Column), _
                Cells(FinalInputRowNumber, Range("AnalyticalsPY2Beg").Offset(0, 1).Column)) _
                .ClearContents
            Sheets("Note Inputs").Select
            GoTo Continue
        End If
        Sheets(Array("Note Inputs", "Analyticals")).Select
        Sheets("Note Inputs").Activate
        Range(Cells(c + 1, Range("PriorYearBalances").Column), Cells(FinalInputRowNumber, _
            Range("PriorYearBalances").Column)).EntireRow.Select
        Sheets("Note Inputs").Select
        Selection.Copy
        Selection.Offset(-1, 0).EntireRow.PasteSpecial Paste:=xlFormulas, _
            Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        Application.CutCopyMode = False
        Sheets("Analyticals").Select
        Selection.Copy
        Selection.Offset(-1, 0).EntireRow.PasteSpecial Paste:=xlFormulas, _
            Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        Application.CutCopyMode = False
        Range(Cells(FinalInputRowNumber, Range("AnalyticalsPYBeg").Column), _
            Cells(FinalInputRowNumber, Range("AnalyticalsPY2Beg").Offset(0, 1).Column)) _
            .Select
        Selection.ClearContents
        Range("Analyticals").Select
        Sheets("Note Inputs").Select
        Intersect(Cells(FinalInputRowNumber, Range("PriorYearBalances").Column).EntireRow, _
            Range("NoteTableInputs")).ClearContents
'        Sheets("Analyticals").Select
'        Range(Cells(FinalInputRowNumber, Range("AnalyticalsPYBeg").Column), _
'            Cells(FinalInputRowNumber, Range("AnalyticalsPY2Beg").Offset(0, 1).Column)) _
'            .Select
'        Selection.ClearContents
    Else
    End If
Continue:
    Next c
'   *********************************
    Range("Input").Select
    Range("year_end").Value = "=PPC_GetBalanceSheetDate()"
    Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date") = ""
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = False
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = True
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Call ShowRows
Exit Sub
Quit:
End Sub



Attribute VB_Name = "EditorialMacros"
Option Explicit

Public Sub InitForEditorial()
  '
  ' Code for editorial special setups that need to be called
  '  after saving or on worksheet initialization.
  '
End Sub

Public Sub Workbook_BeforeClose_Editorial()
  '
  ' Code for editorial special setups that need to be called
  '  before close.
  '
End Sub

Attribute VB_Name = "EditorialMacros_Deactivate"
Option Explicit

Public Sub Workbook_Deactivate_Editorial()
  '
  ' Code for editorial special setups that need to be called
  '  when leaving the workbook without closing it. This, will
  '  also run when closing workbook.
  '
End Sub

Attribute VB_Name = "HideAndShowRows"
Sub HideRows()

    Dim TargetCell As Range
    Set TargetCell = ActiveCell

    Application.EnableEvents = False
    Application.ScreenUpdating = False

    Range("Payors").UnMerge
    For Each cell In Range("Payors").Cells

        If Application.WorksheetFunction.CountA(Intersect(cell.EntireRow, _
            Range("NoteTableInputs"))) = 0 Then
            Sheets(Array("Note Inputs", "Analyticals", "Collectibility")).Select
            Sheets("Note Inputs").Activate
            cell.EntireRow.Select
            Selection.EntireRow.Hidden = True
            Sheets("Analyticals").Activate
            Selection.EntireRow.Hidden = True
            Sheets("Collectibility").Activate
            Selection.EntireRow.Hidden = True
            Sheets("Note Inputs").Select
        Else
            cell.EntireRow.Hidden = False
        End If
        Range(cell, cell.Offset(0, 1)).Select
        Selection.Merge
        With Selection
            .VerticalAlignment = xlBottom
            .Orientation = 0
            .MergeCells = True
        End With
    Next cell
    Sheets("Collectibility").Select
    ActiveWindow.ScrollRow = 1
    Range("A1").Select
    Sheets("Analyticals").Select
    ActiveWindow.ScrollRow = 1
    Range("A1").Select
    Sheets("Note Inputs").Select
    Sheet1.HideRowsButton.Visible = False
    With Sheet1.ShowRowsButton
        .Visible = True
'        .Top = 46.5
'        .Left = 376.5
    End With
    Range("Payors").Offset(0, 1).Select
    Selection.FormatConditions.Delete
    With Selection.FormatConditions
        .Add Type:=xlExpression, Formula1:= _
            "=AND($B12="""",COUNTA($D12:$K12,$M12:$N12)>0)"
        With Selection.FormatConditions(1).Borders
            .LineStyle = xlContinuous
            .Color = -16776961
            .Weight = xlThin
        End With
    End With
    Selection.FormatConditions(1).StopIfTrue = True
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority

    With Selection.FormatConditions
        .Add Type:=xlExpression, Formula1:="=AND($B11="""",$B12<>"""")"
        With Selection.FormatConditions(2).Borders
            .LineStyle = xlContinuous
            .Color = -16776961
            .Weight = xlThin
        End With
    End With
    Selection.FormatConditions(2).StopIfTrue = True
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    TargetCell.Select
   
    Application.ScreenUpdating = True
    Application.EnableEvents = True

End Sub

Sub ShowRows()

    Dim TargetCell As Range
    Set TargetCell = ActiveCell

    Application.EnableEvents = False
    Application.ScreenUpdating = False

    Sheets("Collectibility").Activate
    Range("CollectibilityClear").EntireRow.Hidden = False
    ActiveWindow.ScrollRow = 1
    Range("A1").Select
    Sheets("Analyticals").Activate
    Range("AnalyticalsTable").EntireRow.Hidden = False
    ActiveWindow.ScrollRow = 1
    Range("A1").Select
    Sheets("Note Inputs").Activate
    Range("Payors").EntireRow.Hidden = False
    Sheet1.ShowRowsButton.Visible = False
    With Sheet1.HideRowsButton
        .Visible = True
'        .Top = 46.5
'        .Left = 376.5
    End With
    TargetCell.Select

    Application.ScreenUpdating = True
    Application.EnableEvents = True
    
End Sub


Attribute VB_Name = "HideAndShowTerms"
Sub HideNoteTerms()

    Dim TargetCell As Range
    Set TargetCell = ActiveCell
    
    Application.ScreenUpdating = False
    
    Range("Client").Select
    Selection.UnMerge
    Range("Preparer").Select
    Selection.UnMerge
    Range(Range("Client"), Range("Client").Offset(1, 2)).Select
    Selection.Offset(0, 1).Select
    Selection.Copy
    Selection.Offset(0, 3).Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Range("NoteTerms").Select
    Selection.EntireColumn.Hidden = True
    Range(Range("Client"), Range("Client").Offset(0, 6)).Select
    Selection.Merge
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    Selection.Offset(1, 0).Select
    Range(Selection, Selection.Offset(0, 6)).Select
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    Sheet1.HideNoteTermsButton.Visible = False
    With Sheet1.ShowNoteTermsButton
        .Visible = True
'        .Top = 46.5
'        .Left = 376.5
    End With
    TargetCell.Select
    
    Application.ScreenUpdating = True
    
End Sub

Sub ShowNoteTerms()
    
    Dim TargetCell As Range
    Set TargetCell = ActiveCell

    Application.ScreenUpdating = False

    Range(Range("Client"), Range("Client").Offset(1, 0)).Select
    Selection.UnMerge
    Range(Range("Client"), Range("Client").Offset(1, 2)).Offset(0, 4).Select
    Selection.Borders.LineStyle = xlNone
    Selection.ClearContents
    Range(ActiveCell.Offset(0, -1), ActiveCell.Offset(1, -1)).Select
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Color = -4144960
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Range("NoteTerms").Select
    Selection.EntireColumn.Hidden = False
    Range(Range("Client"), Range("Client").Offset(0, 3)).Offset(1, 0).Select
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    Range(Range("Client"), Range("Client").Offset(0, 3)).Select

    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With

    Sheet1.ShowNoteTermsButton.Visible = False
    With Sheet1.HideNoteTermsButton
        .Visible = True
'        .Top = 46.5
'        .Left = 376.5
    End With
    TargetCell.Select

    Application.ScreenUpdating = True

End Sub

Attribute VB_Name = "Module1"
Sub condformattest1()
Attribute condformattest1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' condformattest1 Macro
'

'
    Range("B12:C12").Select
    ActiveWindow.SmallScroll Down:=-9
    Range("B13:C13").Select
    ActiveWindow.SmallScroll Down:=-9
End Sub
Sub condformattest2()
Attribute condformattest2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' condformattest2 Macro
'

'
    Range("B12:C12").Select
    ActiveWindow.SmallScroll Down:=-18
    Range("B13:C13").Select
    ActiveWindow.SmallScroll Down:=6
    Range("B22:C22").Select
    ActiveWindow.SmallScroll Down:=-3
    Range("B13:C13").Select
    ActiveWindow.SmallScroll Down:=-21
    Range("A1").Select
End Sub
Attribute VB_Name = "PPC_CodeModule"
Public Sub MacroCheck()
'Do nothing. This sub will be called from .NET code to check macro is enabled or not
End Sub


Public Function PPC_GetClientName()
  PPC_GetClientName = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name")
End Function

Public Function PPC_GetBalanceSheetDate()
  PPC_GetBalanceSheetDate = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date")
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "HideNoteTermsButton, 19, 0, MSForms, CommandButton"
Attribute VB_Control = "ShowNoteTermsButton, 20, 1, MSForms, CommandButton"
Attribute VB_Control = "ShowRowsButton, 24, 2, MSForms, CommandButton"
Attribute VB_Control = "HideRowsButton, 25, 3, MSForms, CommandButton"
Private Sub HideRowsButton_Click()

    Call HideRows

End Sub

Private Sub ShowRowsButton_Click()

    Call ShowRows

End Sub

Private Sub HideNoteTermsButton_Click()

    Call HideNoteTerms
    
End Sub

Private Sub ShowNoteTermsButton_click()
    
    Call ShowNoteTerms

End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'
' This code is protected and passworded when complete.
'

Private Const XL4MACRO As String = "PPCSecurityMacro"
Private Const INFORMATION As String = "INFORMATION"

Private Const bIsIDxR As Boolean = False        ' Set True if Interactive Disclosure Library
#Const IDxR = 0                                 ' Set 1 if Interactive Disclosure Library

      ' Declare security class

Private Sub Workbook_Activate()

  
  InitForEditorial
  
  On Error GoTo 0
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  Workbook_BeforeClose_Editorial
End Sub



Public Function bIsSaving() As Boolean
  bIsSaving = False
End Function



INQUEST-PP=macro
