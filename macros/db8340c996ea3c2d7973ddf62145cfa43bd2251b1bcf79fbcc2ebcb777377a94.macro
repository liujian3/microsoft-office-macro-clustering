Attribute VB_Name = "O01OOllO01l"
Attribute VB_Base = "0{E25666B2-F1AF-44B6-8B85-774348C14DE5}{3F13133B-0F80-460B-BD4B-7875DFC768EF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub cmdcancel_click()
Unload Me
End Sub
Private Sub cmdquery_click()
Dim O01OOllO11l As Long
Dim O01OOllOl1l As Date
Dim O01OOllOl11 As Date
Dim O01OOlOOl11 As jobresult
Dim O01OOlOOl01 As String
Dim O01OOOOOl01 As String
Dim O01OOOlOl01 As Boolean
Dim O00OOOlOl01 As Integer
O01OOlOOl11 = O101l1l0llO
If O01OOlOOl11.OllO11l1O11 <> 0 Then
MsgBox O01OOlOOl11.message
Exit Sub
End If
Application.ScreenUpdating = False
Worksheets(schedule).Select
If Worksheets(schedule).AutoFilterMode Then
Worksheets(schedule).AutoFilterMode = False
End If
O01OOllO11l = (Range(Oll1OOl1OO0 & Rows.Count).End(xlUp).Row)
If optToday Then
O01OOllOl1l = Date
O01OOllOl11 = Date + 1
O01OOOlOl01 = True
ElseIf optThisWeek Then
O01OOllOl1l = Date - Weekday(Date, vbUseSystem) + 1
O01OOllOl11 = Date - Weekday(Date, vbUseSystem) + 8
O01OOOlOl01 = True
ElseIf optThisMonth Then
O01OOllOl1l = DateSerial(Year(Date), Month(Date), 1)
O01OOllOl11 = DateSerial(Year(Date), Month(Date) + 1, 1)
O01OOOlOl01 = True
ElseIf optDefinedDuration Then
If IsDate(Me.txtTaskStartDate.Value) Then
O01OOllOl1l = CDate(Me.txtTaskStartDate.Value)
Else
MsgBox Ol10100l000("From Date is invalid.")
Me.txtTaskStartDate.SetFocus
Exit Sub
End If
If IsDate(Me.txtTaskEndDate.Value) Then
O01OOllOl11 = CDate(Me.txtTaskEndDate.Value) + 1
Else
MsgBox Ol10100l000("To Date is invalid.")
Me.txtTaskEndDate.SetFocus
Exit Sub
End If
O01OOOlOl01 = True
End If
If O01OOOlOl01 Then
O00OOOlOl01 = Oll1lOl1OO0 - Oll0OOl1OO0 + 1
Range(Oll1OOl1OO0 & Ol1lOlOlO10 - 2 & ":" & O011lOlO1O0 & O01OOllO11l).AutoFilter Field:=1, Criteria1:="<" & O01OOllOl11
Range(Oll1OOl1OO0 & Ol1lOlOlO10 - 2 & ":" & O011lOlO1O0 & O01OOllO11l).AutoFilter Field:=O00OOOlOl01, Criteria1:=">=" & O01OOllOl1l
End If
O01OOOlOl01 = False
If Me.txtResource > "" Then
O00OOOlOl01 = O1l1lllO0l0 - Oll0OOl1OO0 + 1
If Me.optExactMatch Then
Range(Oll1OOl1OO0 & Ol1lOlOlO10 - 2 & ":" & O0l1lllO0l0 & O01OOllO11l).AutoFilter Field:=O00OOOlOl01, Criteria1:="=" & Me.txtResource
ElseIf Me.optLike Then
Range(Oll1OOl1OO0 & Ol1lOlOlO10 - 2 & ":" & O0l1lllO0l0 & O01OOllO11l).AutoFilter Field:=O00OOOlOl01, Criteria1:="=*" & Me.txtResource & "*"
End If
End If
O01OOOlOl01 = False
If optNotCompleted Then
O01OOlOOl01 = "<>1"
O01OOOlOl01 = True
ElseIf optCompleted Then
O01OOlOOl01 = ">=1"
O01OOOlOl01 = True
ElseIf optDefinedPercentValue Then
If IsNumeric(Me.txtPercentFrom) Then
If (txtPercentFrom.Value > 100) Or (txtPercentFrom.Value < 0) Then
MsgBox Ol10100l000("""%Work Complete"" is invalid. Type a number between 0% and 100%.")
Exit Sub
Else
O01OOlOOl01 = ">=" & Me.txtPercentFrom & "%"
End If
Else
MsgBox Ol10100l000("""%Work Complete"" is invalid. Type a number between 0% and 100%.")
Exit Sub
End If
If IsNumeric(Me.txtPercentTo) Then
If (txtPercentTo.Value > 100) Or (txtPercentTo.Value < 0) Then
MsgBox Ol10100l000("""%Work Complete"" is invalid. Type a number between 0% and 100%.")
Exit Sub
Else
O01OOOOOl01 = "<=" & Me.txtPercentTo & "%"
End If
Else
MsgBox Ol10100l000("""%Work Complete"" is invalid. Type a number between 0% and 100%.")
Exit Sub
End If
O01OOOlOl01 = True
End If
If O01OOOlOl01 Then
O00OOOlOl01 = O011lOlO1l0 - Oll0OOl1OO0 + 1
If optDefinedPercentValue Then
Range(Oll1OOl1OO0 & Ol1lOlOlO10 - 2 & ":" & O011lOlO1O0 & O01OOllO11l).AutoFilter Field:=O00OOOlOl01, Criteria1:=O01OOlOOl01, Operator:=xlAnd, Criteria2:=O01OOOOOl01
Else
Range(Oll1OOl1OO0 & Ol1lOlOlO10 - 2 & ":" & O011lOlO1O0 & O01OOllO11l).AutoFilter Field:=O00OOOlOl01, Criteria1:=O01OOlOOl01
End If
End If
Application.ScreenUpdating = True
Range(OlO1lll1Ol0 & Ol1lOlOlO10).Select
Unload Me
End Sub
Private Sub txtpercentfrom_change()
Me.optDefinedPercentValue = True
End Sub
Private Sub txttaskstartdate_change()
Me.optDefinedDuration = True
End Sub
Private Sub userform_initialize()
Dim Ol11lOl1lO1 As jobresult
Ol11l1OlOl0 Me
Me.Caption = Ol10100l000(Me.Caption)
Ol11lOl1lO1 = O101l1l0llO
If Ol11lOl1lO1.OllO11l1O11 <> 0 Then
MsgBox Ol11lOl1lO1.message
Exit Sub
End If
Me.optToday = True
Me.txtTaskStartDate = Date
Me.txtTaskEndDate = Date + 30
Me.optExactMatch = True
Me.optToday = True
Me.optAllPercentWorkComplete = True
End Sub
Attribute VB_Name = "OO0OOOlOl01"
Attribute VB_Base = "0{9C7FC7B7-8B79-4C2D-8FBB-17944BA08857}{2C8B74FA-B6E3-48C1-B798-E6935C24C8D6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub cmdopendeliverables_click()
Dim OO0OlOlOl01 As Long
Dim OO0Ol0lOl01 As Long
Dim OO1Ol0lOl01 As String
OO0Ol0lOl01 = CInt(Me.txtCountOfOptionButton.Value)
For OO0OlOlOl01 = 1 To OO0Ol0lOl01
If Me.Controls("OptionButton" & CStr(OO0OlOlOl01)) = True Then
OO1Ol0lOl01 = Me.Controls("Optionbutton" & CStr(OO0OlOlOl01)).Tag
Exit For
End If
Next OO0OlOlOl01
If OO1Ol0lOl01 = "" Then
MsgBox Ol10100l000("Deliverables type is not selected")
Exit Sub
End If
O1O0ll11l10 rownumofdeliverables:=CLng(Me.txtRowNoOfFile.Value), filename:=Me.txtFileNameExceptExt & "." & OO1Ol0lOl01
Unload Me
End Sub
Private Sub userform_initialize()
Dim OO11lOl1lO1 As Long
Dim OO1Ol0lll01 As Long
Ol11l1OlOl0 Me
Me.Caption = Ol10100l000(Me.Caption)
For OO11lOl1lO1 = 1 To 8
With Me
If getattr("txtPgmName" & CStr(OO11lOl1lO1), Ol0l11ll0O1) > "" Then
If getattr("chkInclude2SelectList" & CStr(OO11lOl1lO1), Ol0l11ll0O1) = True Then
OO1Ol0lll01 = OO1Ol0lll01 + 1
.Controls("optionButton" & CStr(OO1Ol0lll01)).Caption = getattr("txtPgmName" & CStr(OO11lOl1lO1), Ol0l11ll0O1)
.Controls("optionButton" & CStr(OO1Ol0lll01)).Top = 10 + ((OO1Ol0lll01 - 1) * 18)
.Controls("optionButton" & CStr(OO1Ol0lll01)).Left = 10
.Controls("optionButton" & CStr(OO1Ol0lll01)).Tag = getattr("txtFileExt" & CStr(OO11lOl1lO1), Ol0l11ll0O1)
.Controls("optionButton" & CStr(OO1Ol0lll01)).Visible = True
End If
End If
End With
Next OO11lOl1lO1
Me.txtCountOfOptionButton.Value = OO1Ol0lll01
Me.cmdOpenDeliverables.Top = 36 + ((OO1Ol0lll01 - 1) * 18)
Me.Height = 90 + ((OO1Ol0lll01 - 1) * 18)
End Sub
Attribute VB_Name = "OO101lO0Oll"
Attribute VB_Base = "0{44FC22BB-668B-42FB-8427-13D816846832}{D6057517-12FE-4270-8D2F-B113D1894C8A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub cdmdeletelang_click()
Dim OO101ll0lll As Long
If Me.lstLanguagesSelected.ListIndex = -1 Then
MsgBox Ol10100l000("You didn't choose a language.")
Exit Sub
End If
If (Me.lstLanguagesSelected.Column(0) = 1) Or (Me.lstLanguagesSelected.Column(0) = 82) Then
MsgBox Ol10100l000("You can't remove the default languages(English and Korean).")
Exit Sub
End If
For OO101ll0lll = Me.lstLanguagesSelected.ListCount - 1 To 0 Step -1
If Me.lstLanguagesSelected.selected(OO101ll0lll) Then
Me.lstLanguagesSelected.RemoveItem OO101ll0lll
Exit For
End If
Next
End Sub
Private Sub chk_set_task_date_to_project_date_click()
If Me.chk_SET_TASK_DATE_TO_PROJECT_DATE = True Then
Me.txtProjectStartDate.Enabled = False
Me.txtProjectEndDate.Enabled = False
Else
Me.txtProjectStartDate.Enabled = True
Me.txtProjectEndDate.Enabled = True
End If
End Sub
Private Sub cmdaddlang_click()
Dim OO101ll1lll As Long
Dim OO111ll1lll As Long
OO101ll1lll = Me.lstLanguagesSelected.ListCount
If Me.lstLanguages.ListIndex = -1 Then
MsgBox Ol10100l000("You didn't choose a language.")
Exit Sub
End If
For OO111ll1lll = Me.lstLanguagesSelected.ListCount - 1 To 0 Step -1
If CLng(Me.lstLanguagesSelected.List(OO111ll1lll, 0)) = CLng(Me.lstLanguages.Column(0)) Then
MsgBox Ol10100l000("It's already chosen language.")
Exit Sub
End If
Next
With Me.lstLanguagesSelected
.AddItem
.List(OO101ll1lll, 0) = Me.lstLanguages.Column(0)
.List(OO101ll1lll, 1) = Me.lstLanguages.Column(1)
End With
End Sub
Private Sub cmdcancel_click()
Unload Me
End Sub
Private Sub cmdmovetosite_click()
Dim str As String
str = getattr(O00O1lll1O1)
On Error GoTo errhandler
ThisWorkbook.FollowHyperlink Address:=str, NewWindow:=True
Unload Me
Exit Sub
errhandler:
MsgBox "Please visit " & str & " to download the " & getattr(O00O1Oll1O1), vbInformation
Unload Me
End Sub
Private Sub cmdsave_click()
Dim OO111Ol1lll As MSForms.control
Dim OO111Ol1ll1 As Long
Dim OO111Ol1lO1 As String
With Application
.ScreenUpdating = False
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
With Me
setattr "projectName", .txtProjectName.Value, O11l11ll1O1
setattr "isConfirmedProjectBasicInfo", OO11OlOOl1l, O11l11ll1O1
If .chk_SET_TASK_DATE_TO_PROJECT_DATE = True Then
setattr "setTaskDateToProjectDate", OO11OlOOl1l, O11l11ll1O1
Else
setattr "setTaskDateToProjectDate", Ol11OlOOl1l, O11l11ll1O1
If IsDate(.txtProjectStartDate.Value) Then
If IsDate(.txtProjectEndDate.Value) Then
If CDate(.txtProjectStartDate.Value) <= CDate(.txtProjectEndDate.Value) Then
If ((CDate(.txtProjectEndDate.Value) - CDate(.txtProjectStartDate.Value) + 1) > 16384 - O001lOlO1O0 - 1) Then
MsgBox Ol10100l000("[6]Project duration is too long. The earliest start date is {1} and the latest finish date is {2}, so the project duration is {3} days. The maximum number of days allowed in XLGantt is {4} days. Reduce the project duration to within the limits allowed by XLGantt.", CDate(.txtProjectStartDate.Value), CDate(.txtProjectEndDate.Value), (CDate(.txtProjectEndDate.Value) - CDate(.txtProjectStartDate.Value) + 1), (16384 - O001lOlO1O0 - 1))
Exit Sub
Else
setattr "projectStartDate", .txtProjectStartDate.Value, O11l11ll1O1
setattr "projectEndDate", .txtProjectEndDate.Value, O11l11ll1O1
End If
Else
MsgBox Ol10100l000("The start date is later than the finish date.")
Exit Sub
End If
Else
MsgBox Ol10100l000("The format of the project finish date is invalid.")
Exit Sub
End If
Else
MsgBox Ol10100l000("The format of the project start date is invalid.")
Exit Sub
End If
End If
If .optSun = True Then
setattr "optFirstDayOfWeek", 1, O11l11ll1O1
ElseIf .optMon = True Then
setattr "optFirstDayOfWeek", 2, O11l11ll1O1
ElseIf .optTue = True Then
setattr "optFirstDayOfWeek", 3, O11l11ll1O1
ElseIf .optWed = True Then
setattr "optFirstDayOfWeek", 4, O11l11ll1O1
ElseIf .optThu = True Then
setattr "optFirstDayOfWeek", 5, O11l11ll1O1
ElseIf .optFri = True Then
setattr "optFirstDayOfWeek", 6, O11l11ll1O1
ElseIf .optSat = True Then
setattr "optFirstDayOfWeek", 7, O11l11ll1O1
Else
setattr "optFirstDayOfWeek", 0, O11l11ll1O1
End If
If .optSatSunAndCalendarSheetNonWD = True Then
setattr "optNonWorkingDays", 1, O11l11ll1O1
ElseIf .optSatSunNonWD = True Then
setattr "optNonWorkingDays", 2, O11l11ll1O1
ElseIf .optCalendarSheetNonWD = True Then
setattr "optNonWorkingDays", 3, O11l11ll1O1
End If
If .chkWBSUpdateExecuteYN = True Then
setattr "chkWBSUpdateExecuteYN", OO11OlOOl1l, O11l11ll1O1
Else
setattr "chkWBSUpdateExecuteYN", Ol11OlOOl1l, O11l11ll1O1
End If
If .chkCheckForUpdatesOnStartup = True Then
setattr "chkCheckForUpdatesOnStartup", OO11OlOOl1l, O11l11ll1O1
Else
setattr "chkCheckForUpdatesOnStartup", Ol11OlOOl1l, O11l11ll1O1
End If
If .chk_COMPLETE_TASK_GRAY_DISPLAY = True Then
setattr "completeTaskGrayDisplay", OO11OlOOl1l, Ol1l11ll1O1
Else
setattr "completeTaskGrayDisplay", Ol11OlOOl1l, Ol1l11ll1O1
End If
If .chk_COMPLETE_TASK_GRAY_DISPLAY = True Then
setattr "completeTaskGrayDisplay", OO11OlOOl1l, Ol1l11ll1O1
Else
setattr "completeTaskGrayDisplay", Ol11OlOOl1l, Ol1l11ll1O1
End If
If .chk_GROUP_TASK_INTERIOR_GRAY_DISPLAY = True Then
setattr "groupTaskInteriorGrayDisplay", OO11OlOOl1l, Ol1l11ll1O1
Else
setattr "groupTaskInteriorGrayDisplay", Ol11OlOOl1l, Ol1l11ll1O1
End If
If .chk_GROUP_ROWS = True Then
setattr "groupRows", OO11OlOOl1l, Ol1l11ll1O1
Else
setattr "groupRows", Ol11OlOOl1l, Ol1l11ll1O1
End If
If .chk_TASK_DISP = True Then
setattr "taskDisp", OO11OlOOl1l, Ol1l11ll1O1
Else
setattr "taskDisp", Ol11OlOOl1l, Ol1l11ll1O1
End If
If .chk_DATE_DISP = True Then
setattr "dateDisp", OO11OlOOl1l, Ol1l11ll1O1
Else
setattr "dateDisp", Ol11OlOOl1l, Ol1l11ll1O1
End If
If .chk_ACTUAL_RATE_DISP = True Then
setattr "actualRateDisp", OO11OlOOl1l, Ol1l11ll1O1
Else
setattr "actualRateDisp", Ol11OlOOl1l, Ol1l11ll1O1
End If
If .chk_PLANNED_RATE_DISP = True Then
setattr "plannedRateDisp", OO11OlOOl1l, Ol1l11ll1O1
Else
setattr "plannedRateDisp", Ol11OlOOl1l, Ol1l11ll1O1
End If
If .chk_RESOURCE_DISP = True Then
setattr "resourceDisp", OO11OlOOl1l, Ol1l11ll1O1
Else
setattr "resourceDisp", Ol11OlOOl1l, Ol1l11ll1O1
End If
setattr "txtGanttChartZoomRatio", .txtGanttChartZoomRatio.Value, Ol1l11ll1O1
If .optD1 = True Then
setattr "optGanttChartColumnDisplay", "1", Ol1l11ll1O1
ElseIf .optD2 = True Then
setattr "optGanttChartColumnDisplay", "2", Ol1l11ll1O1
ElseIf .optD3 = True Then
setattr "optGanttChartColumnDisplay", "3", Ol1l11ll1O1
ElseIf .optD4 = True Then
setattr "optGanttChartColumnDisplay", "4", Ol1l11ll1O1
ElseIf .optD5 = True Then
setattr "optGanttChartColumnDisplay", "5", Ol1l11ll1O1
ElseIf .optD6 = True Then
setattr "optGanttChartColumnDisplay", "6", Ol1l11ll1O1
ElseIf .optD7 = True Then
setattr "optGanttChartColumnDisplay", "7", Ol1l11ll1O1
ElseIf .optD10 = True Then
setattr "optGanttChartColumnDisplay", "10", Ol1l11ll1O1
ElseIf .optD14 = True Then
setattr "optGanttChartColumnDisplay", "14", Ol1l11ll1O1
ElseIf .optD30 = True Then
setattr "optGanttChartColumnDisplay", "30", Ol1l11ll1O1
Else
setattr "optGanttChartColumnDisplay", "", Ol1l11ll1O1
End If
If .optBeforeChart = True Then
setattr "taskNameDisplayPosition", OO11OlOOl1O, Ol1l11ll1O1
ElseIf .optInChart = True Then
setattr "taskNameDisplayPosition", OO11OlOOl10, Ol1l11ll1O1
ElseIf .optAfterChart = True Then
setattr "taskNameDisplayPosition", OO1lOlOOl10, Ol1l11ll1O1
Else
setattr "taskNameDisplayPosition", OO11OlOOl1O, Ol1l11ll1O1
End If
Worksheets(schedule).Select
If .optScheduleChangeMgtYes = True Then
setattr "optScheduleChangeMgt", OO11OlOOl1l, O11l11ll1O1
Range(O1OlllOO0O1 & ":" & O1OlllOO0O1 & "," & _
O1OlllOO011 & ":" & O1OlllOO011 & "," & _
O1O1llOO010 & ":" & O1O1llOO010).EntireColumn.Hidden = False
Else
setattr "optScheduleChangeMgt", Ol11OlOOl1l, O11l11ll1O1
Range(O1OlllOO0O1 & ":" & O1OlllOO0O1 & "," & _
O1OlllOO011 & ":" & O1OlllOO011 & "," & _
O1O1llOO010 & ":" & O1O1llOO010 & "," & _
O1O11lOO0l0 & ":" & O1O11lOO0l0).EntireColumn.Hidden = True
End If
If .optPlanRateCriteriaDateSpecificDate = True Then
If IsDate(.txtPlanRateDateSpecificDate.Value) Then
If CDate(.txtPlanRateDateSpecificDate.Value) >= CDate(.txtProjectStartDate.Value) Then
If CDate(.txtPlanRateDateSpecificDate.Value) <= CDate(.txtProjectEndDate.Value) Then
setattr "optPlanRateCriteriaDate", CDate(.txtPlanRateDateSpecificDate.Value), O11l11ll1O1
Else
MsgBox Ol10100l000("Calculation Base Date of Planned %Work Complete must be less than or equal to project finish date.")
Exit Sub
End If
Else
MsgBox Ol10100l000("Calculation Base Date of Planned %Work Complete must be greater than or equal to project start date.")
Exit Sub
End If
Else
MsgBox Ol10100l000("The format of ""Calculation Base Date of Planned %Work Complete"" is invalid.")
Exit Sub
End If
Else
setattr "optPlanRateCriteriaDate", "TODAY", O11l11ll1O1
End If
If .chkDeliverablesMgt = True Then
setattr "chkDeliverablesMgt", OO11OlOOl1l, Ol0l11ll1O1
If .optDefinedPath = True Then
If .txtDefinedPath.Value = "" Then
MsgBox Ol10100l000("Please enter the path where deliverables are saved.")
.txtDefinedPath.SetFocus
Exit Sub
End If
setattr "savePathType", "DEFINED", Ol0l11ll1O1
setattr "txtDefinedPath", .txtDefinedPath.Value, Ol0l11ll1O1
Else
If .txtAutoDefinedBasePath.Value = "" Then
MsgBox Ol10100l000("If you choose ""Assigning path by task name automatically"" option, you need to set the upper path.")
.txtAutoDefinedBasePath.SetFocus
Exit Sub
End If
setattr "savePathType", "AUTO_DEFINED", Ol0l11ll1O1
setattr "txtAutoDefinedBasePath", .txtAutoDefinedBasePath.Value, Ol0l11ll1O1
End If
For OO111Ol1ll1 = 1 To 8
With OO101lO0Oll
If (OO111Ol1ll1 <= 3) Then
Select Case OO111Ol1ll1
Case 1
setattr "txtPgmName" & CStr(OO111Ol1ll1), Ol10100l000("Powerpoint"), Ol0l11ll0O1
setattr "txtFileExt" & CStr(OO111Ol1ll1), "ppt*", Ol0l11ll0O1
Case 2
setattr "txtPgmName" & CStr(OO111Ol1ll1), Ol10100l000("Word"), Ol0l11ll0O1
setattr "txtFileExt" & CStr(OO111Ol1ll1), "doc*", Ol0l11ll0O1
Case 3
setattr "txtPgmName" & CStr(OO111Ol1ll1), Ol10100l000("Excel"), Ol0l11ll0O1
setattr "txtFileExt" & CStr(OO111Ol1ll1), "xls*", Ol0l11ll0O1
End Select
setattr "txtPgmPath" & CStr(OO111Ol1ll1), Ol10100l000("Automatically defined"), Ol0l11ll0O1
setattr "chkInclude2SelectList" & CStr(OO111Ol1ll1), .Controls("chkInclude2SelectList" & CStr(OO111Ol1ll1)).Value, Ol0l11ll0O1
Else
If .Controls("txtPgmName" & CStr(OO111Ol1ll1)).Value > "" Then
setattr "txtPgmName" & CStr(OO111Ol1ll1), .Controls("txtPgmName" & CStr(OO111Ol1ll1)).Value, Ol0l11ll0O1
If .Controls("txtFileExt" & CStr(OO111Ol1ll1)).Value = "" Then
MsgBox Ol10100l000("Please enter the extension.")
.Controls("txtFileExt" & CStr(OO111Ol1ll1)).SetFocus
Exit Sub
Else
setattr "txtFileExt" & CStr(OO111Ol1ll1), .Controls("txtFileExt" & CStr(OO111Ol1ll1)).Value, Ol0l11ll0O1
End If
If .Controls("txtPgmPath" & CStr(OO111Ol1ll1)).Value = "" Then
MsgBox Ol10100l000("Please enter the program execution path.")
.Controls("txtPgmPath" & CStr(OO111Ol1ll1)).SetFocus
Exit Sub
Else
setattr "txtPgmPath" & CStr(OO111Ol1ll1), .Controls("txtPgmPath" & CStr(OO111Ol1ll1)).Value, Ol0l11ll0O1
End If
setattr "chkInclude2SelectList" & CStr(OO111Ol1ll1), .Controls("chkInclude2SelectList" & CStr(OO111Ol1ll1)).Value, Ol0l11ll0O1
Else
setattr "txtPgmName" & CStr(OO111Ol1ll1), "", Ol0l11ll0O1
setattr "txtFileExt" & CStr(OO111Ol1ll1), "", Ol0l11ll0O1
setattr "txtPgmPath" & CStr(OO111Ol1ll1), "", Ol0l11ll0O1
setattr "chkInclude2SelectList" & CStr(OO111Ol1ll1), "", Ol0l11ll0O1
End If
End If
End With
Next OO111Ol1ll1
Else
setattr "chkDeliverablesMgt", Ol11OlOOl1l, Ol0l11ll1O1
End If
With Worksheets(Ol11llO1ll0)
.Range(.Range("D1"), .Range("D1").End(xlToRight)).ClearContents
End With
With .lstLanguagesSelected
For OO111Ol1ll1 = 0 To .ListCount - 1
OO111Ol1lO1 = OO111Ol1lO1 & .List(OO111Ol1ll1, 0) & ":" & .List(OO111Ol1ll1, 1) & ","
Worksheets(Ol11llO1ll0).Cells(1, OO111Ol1ll1 + 4).Value = .List(OO111Ol1ll1, 1)
Next OO111Ol1ll1
Worksheets(Ol11llO1ll0).Cells(2, 1).Value = O0ll00l1lll(OO111Ol1ll1 + 3)
End With
OO111Ol1lO1 = Mid(OO111Ol1lO1, 1, Len(OO111Ol1lO1) - 1)
setattr "selectedLanguageList", OO111Ol1lO1, OO0l11ll0O1
If .optLangByComputerOS = True Then
setattr "languageSelectionType", 0, OO0l11ll0O1
ElseIf .optLangByManual = True Then
setattr "languageSelectionType", 1, OO0l11ll0O1
If IsNull(.cbxLangByManual.Value) Then
MsgBox Ol10100l000("Choose a language.")
Exit Sub
Else
setattr "languageSelectedByManual", .cbxLangByManual.Value, OO0l11ll0O1
End If
Else
MsgBox Ol10100l000("Choose a language used in XLGantt.")
Exit Sub
End If
If Not OOOl100OO00 Then
O10O01lll11
End If
End With
With Application
.Calculation = Ol01llO00l0
.ScreenUpdating = True
End With
Unload Me
End Sub
Private Sub cmdselectfolder1_click()
Me.txtDefinedPath.Value = O0l100l11lO
End Sub
Private Sub cmdselectfolder2_click()
Me.txtAutoDefinedBasePath = O0l100l11lO
End Sub
Private Sub cmdzoom100_click()
Me.txtGanttChartZoomRatio.Value = 100
Me.sbGanttChartZoomRatio.Value = 100
End Sub
Private Sub optlangbycomputeros_click()
Me.cbxLangByManual.Enabled = False
End Sub
Private Sub optlangbymanual_click()
Me.cbxLangByManual.Enabled = True
End Sub
Private Sub sbganttchartzoomratio_change()
Me.txtGanttChartZoomRatio = Me.sbGanttChartZoomRatio.Value
End Sub
Private Sub userform_initialize()
Dim OO11lOl1lO1 As Long
Dim Ol11lOl1lO1 As jobresult
Dim OO101Ol0Oll() As String
Dim Ol111Ol1lO1 As Variant
Ol11l1OlOl0 Me
With Me
.Caption = Ol10100l000(.Caption)
Ol11lOl1lO1 = O101l1l0llO
If Ol11lOl1lO1.OllO11l1O11 <> 0 Then
MsgBox Ol11lOl1lO1.message
Exit Sub
End If
.txtProjectName = getattr("projectName", O11l11ll1O1)
.txtProjectStartDate = getattr("projectStartDate", O11l11ll1O1)
.txtProjectEndDate = getattr("projectEndDate", O11l11ll1O1)
If getattr("setTaskDateToProjectDate", O11l11ll1O1) = OO11OlOOl1l Then
.chk_SET_TASK_DATE_TO_PROJECT_DATE = True
Else
.chk_SET_TASK_DATE_TO_PROJECT_DATE = False
End If
Select Case CInt(getattr("optFirstDayOfWeek", O11l11ll1O1))
Case 1
.optSun = True
Case 2
.optMon = True
Case 3
.optTue = True
Case 4
.optWed = True
Case 5
.optThu = True
Case 6
.optFri = True
Case 7
.optSat = True
Case Else
.optSun = True
End Select
Select Case CInt(getattr("optNonWorkingDays", O11l11ll1O1))
Case 1
.optSatSunAndCalendarSheetNonWD = True
Case 2
.optSatSunNonWD = True
Case 3
.optCalendarSheetNonWD = True
Case Else
.optSatSunAndCalendarSheetNonWD = True
End Select
If getattr("optScheduleChangeMgt", O11l11ll1O1) = OO11OlOOl1l Then
.optScheduleChangeMgtYes = True
Else
.optScheduleChangeMgtNo = True
End If
If getattr("optPlanRateCriteriaDate", O11l11ll1O1) = "TODAY" Then
.optPlanRateCriteriaDateToday = True
Else
.optPlanRateCriteriaDateSpecificDate = True
.txtPlanRateDateSpecificDate = getattr("optPlanRateCriteriaDate", O11l11ll1O1)
End If
If getattr("chkWBSUpdateExecuteYN", O11l11ll1O1) = OO11OlOOl1l Then
.chkWBSUpdateExecuteYN = True
Else
.chkWBSUpdateExecuteYN = False
End If
If getattr("chkCheckForUpdatesOnStartup", O11l11ll1O1) = OO11OlOOl1l Then
.chkCheckForUpdatesOnStartup = True
Else
.chkCheckForUpdatesOnStartup = False
End If
If getattr("completeTaskGrayDisplay", Ol1l11ll1O1) = OO11OlOOl1l Then
.chk_COMPLETE_TASK_GRAY_DISPLAY = True
Else
.chk_COMPLETE_TASK_GRAY_DISPLAY = False
End If
If getattr("groupTaskInteriorGrayDisplay", Ol1l11ll1O1) = OO11OlOOl1l Then
.chk_GROUP_TASK_INTERIOR_GRAY_DISPLAY = True
Else
.chk_GROUP_TASK_INTERIOR_GRAY_DISPLAY = False
End If
If getattr("groupRows", Ol1l11ll1O1) = OO11OlOOl1l Then
.chk_GROUP_ROWS = True
Else
.chk_GROUP_ROWS = False
End If
If getattr("taskDisp", Ol1l11ll1O1) = OO11OlOOl1l Then
.chk_TASK_DISP = True
Else
.chk_TASK_DISP = False
End If
If getattr("dateDisp", Ol1l11ll1O1) = OO11OlOOl1l Then
.chk_DATE_DISP = True
Else
.chk_DATE_DISP = False
End If
If getattr("actualRateDisp", Ol1l11ll1O1) = OO11OlOOl1l Then
.chk_ACTUAL_RATE_DISP = True
Else
.chk_ACTUAL_RATE_DISP = False
End If
If getattr("plannedRateDisp", Ol1l11ll1O1) = OO11OlOOl1l Then
.chk_PLANNED_RATE_DISP = True
Else
.chk_PLANNED_RATE_DISP = False
End If
If getattr("resourceDisp", Ol1l11ll1O1) = OO11OlOOl1l Then
.chk_RESOURCE_DISP = True
Else
.chk_RESOURCE_DISP = False
End If
.txtGanttChartZoomRatio.Value = getattr("txtGanttChartZoomRatio", Ol1l11ll1O1)
If (.txtGanttChartZoomRatio.Value = 0) Or (.txtGanttChartZoomRatio.Value = "") Then
.txtGanttChartZoomRatio.Value = 100
.sbGanttChartZoomRatio.Value = .txtGanttChartZoomRatio.Value
End If
.sbGanttChartZoomRatio.Value = .txtGanttChartZoomRatio.Value
Select Case getattr("optGanttChartColumnDisplay", Ol1l11ll1O1)
Case "1"
.optD1 = True
Case "2"
.optD2 = True
Case "3"
.optD3 = True
Case "4"
.optD4 = True
Case "5"
.optD5 = True
Case "6"
.optD6 = True
Case "7"
.optD7 = True
Case "10"
.optD10 = True
Case "14"
.optD14 = True
Case "30"
.optD30 = True
Case Else
.optD1 = True
End Select
Select Case getattr("taskNameDisplayPosition", Ol1l11ll1O1)
Case OO11OlOOl1O
.optBeforeChart = True
Case OO11OlOOl10
.optInChart = True
Case OO1lOlOOl10
.optAfterChart = True
Case Else
.optBeforeChart = True
End Select
If getattr("chkDeliverablesMgt", Ol0l11ll1O1) = OO11OlOOl1l Then
.chkDeliverablesMgt.Value = True
Else
.chkDeliverablesMgt.Value = False
End If
If getattr("savePathType", Ol0l11ll1O1) = "DEFINED" Then
.optDefinedPath = True
Else
.optAutoDefinedPath = True
End If
.txtDefinedPath = getattr("txtDefinedPath", Ol0l11ll1O1)
.txtAutoDefinedBasePath = getattr("txtAutoDefinedBasePath", Ol0l11ll1O1)
For OO11lOl1lO1 = 1 To 8
With Me
If getattr("txtPgmName" & CStr(OO11lOl1lO1), Ol0l11ll0O1) > "" Then
.Controls("txtPgmName" & CStr(OO11lOl1lO1)).Value = getattr("txtPgmName" & CStr(OO11lOl1lO1), Ol0l11ll0O1)
.Controls("txtFileExt" & CStr(OO11lOl1lO1)).Value = getattr("txtFileExt" & CStr(OO11lOl1lO1), Ol0l11ll0O1)
.Controls("txtPgmPath" & CStr(OO11lOl1lO1)).Value = getattr("txtPgmPath" & CStr(OO11lOl1lO1), Ol0l11ll0O1)
.Controls("chkInclude2SelectList" & CStr(OO11lOl1lO1)).Value = getattr("chkInclude2SelectList" & CStr(OO11lOl1lO1), Ol0l11ll0O1)
End If
End With
Next OO11lOl1lO1
O0lO0l0O110
Ol111Ol1lO1 = Split(getattr("selectedLanguageList", OO0l11ll0O1), ",")
ReDim OO101Ol0Oll(0 To UBound(Ol111Ol1lO1), 0 To 1)
For OO11lOl1lO1 = 0 To UBound(Ol111Ol1lO1)
OO101Ol0Oll(OO11lOl1lO1, 0) = Mid(Ol111Ol1lO1(OO11lOl1lO1), 1, InStr(1, Ol111Ol1lO1(OO11lOl1lO1), ":") - 1)
OO101Ol0Oll(OO11lOl1lO1, 1) = Mid(Ol111Ol1lO1(OO11lOl1lO1), InStr(1, Ol111Ol1lO1(OO11lOl1lO1), ":") + 1, 100)
Next OO11lOl1lO1
With .lstLanguagesSelected
.List = OO101Ol0Oll
End With
With .cbxLangByManual
.List = OO101Ol0Oll
End With
If getattr("languageSelectionType", OO0l11ll0O1) = 0 Then
.optLangByComputerOS.Value = True
Else
.optLangByManual.Value = True
.cbxLangByManual.Value = getattr("languageSelectedByManual", OO0l11ll0O1)
End If
.txtProjectName.SetFocus
End With
End Sub

Attribute VB_Name = "OO101ll0Oll"
Attribute VB_Base = "0{5B42A043-5D4F-4725-89CA-C51E5CDEFE74}{250BE749-6ED2-4974-8B34-79DEE336BBB1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub cmdcancel_click()
Unload Me
End Sub
Private Sub cmdsave_click()
Dim OO001ll0Oll As Long
Dim OO001Ol0Oll As Long
With Application
.ScreenUpdating = False
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
Worksheets(schedule).Select
OO001ll0Oll = CLng(txtRowNum)
OO001Ol0Oll = CLng(txtTaskPosition)
Cells(OO001ll0Oll, OO001Ol0Oll) = txtTask
Cells(OO001ll0Oll, OlO0Oll1OO1) = txtETC
If IsDate(txtTaskStartDate.Value) Then
Cells(OO001ll0Oll, Oll0OOl1OO0) = CDate(txtTaskStartDate)
Else
MsgBox Ol10100l000("Start date is invalid.")
Exit Sub
End If
If IsDate(txtTaskEndDate.Value) Then
Cells(OO001ll0Oll, Oll1lOl1OO0) = CDate(txtTaskEndDate)
Else
MsgBox Ol10100l000("Finish date is invalid.")
Exit Sub
End If
If getattr("optScheduleChangeMgt", O11l11ll1O1) = OO11OlOOl1l Then
If txtTaskActualStartDate.Value > "" Then
If IsDate(txtTaskActualStartDate.Value) Then
Cells(OO001ll0Oll, O1OOllOO0O1) = CDate(txtTaskActualStartDate)
Else
MsgBox Ol10100l000("Actual start date is invalid.")
Exit Sub
End If
End If
If txtTaskActualEndDate.Value > "" Then
If IsDate(txtTaskActualEndDate.Value) Then
Cells(OO001ll0Oll, O1OlllOO0l1) = CDate(txtTaskActualEndDate)
Else
MsgBox Ol10100l000("Actual finish date is invalid.")
Exit Sub
End If
End If
End If
If cbxCalendar.Value = "STD_CAL" Then
Cells(OO001ll0Oll, Ollllll1OO0) = ""
Else
Cells(OO001ll0Oll, Ollllll1OO0) = cbxCalendar.Value
End If
If IsNumeric(txtResourceWeight.Value) Then
If txtResourceWeight.Value < 0 Then
MsgBox Ol10100l000("Weight must be greater than zero.")
Exit Sub
Else
Cells(OO001ll0Oll, O1O1llOO0l0) = CDbl(txtResourceWeight.Value)
End If
Else
If txtResourceWeight.Value <> "" Then
MsgBox Ol10100l000("Weight is invalid.")
Exit Sub
End If
End If
Cells(OO001ll0Oll, O1l1lllO0l0) = txtResource
Cells(OO001ll0Oll, O0l11llO0l0) = txtDeliverables
If IsNumeric(txtActualRate.Value) Then
If (txtActualRate.Value > 100) Or (txtActualRate.Value < 0) Then
MsgBox Ol10100l000("""%Work Complete"" is invalid. Type a number between 0% and 100%.")
Exit Sub
Else
Cells(OO001ll0Oll, O011lOlO1l0) = CDbl(txtActualRate.Value) / 100
End If
Else
MsgBox Ol10100l000("""%Work Complete"" is invalid. Type a number between 0% and 100%.")
Exit Sub
End If
With Application
.Calculation = Ol01llO00l0
.ScreenUpdating = True
End With
Unload Me
End Sub
Private Sub userform_initialize()
Dim OO101Ol0Oll() As String
ReDim OO101Ol0Oll(1 To 3, 1 To 2)
Ol11l1OlOl0 Me
Me.Caption = Ol10100l000(Me.Caption)
OO101Ol0Oll(1, 1) = "STD_CAL": OO101Ol0Oll(1, 2) = Ol10100l000("Not Specified(Standard Calendar)")
OO101Ol0Oll(2, 1) = "UD_CAL1": OO101Ol0Oll(2, 2) = Ol10100l000("User Defined Calendar 1")
OO101Ol0Oll(3, 1) = "UD_CAL2": OO101Ol0Oll(3, 2) = Ol10100l000("User Defined Calendar 2")
With Me.cbxCalendar
.List = OO101Ol0Oll
End With
End Sub
Attribute VB_Name = "OO11OOOOl1l"
'//
'//
'// #     # #     #  #  #  ####  ####  #   #  ####      #     # #### #####
'//  #   #  #     #  #  # #    # #   # #  #  #          ##    # #      #
'//   # #   #     #  #  # #    # #   # # #   #          # #   # #      #
'//    #    #     #  #  # #    # ####  ##     ###       #  #  # ###    #
'//   # #   #     #  #  # #    # #  #  # #       #      #   # # #      #
'//  #   #  #     #  #  # #    # #   # #  #      #      #    ## #      #
'// #     # #####  ## ##   ####  #   # #   # ####   #   #     # ####   #
'//
'//------------------------------------------------------------------------
'//
'// Project Scheduler XLGantt
'// Version : 2.1.0
'// Release date : 2018.10.14
'// Copyrights to thjung999@gmail.com, http://xlworks.net
'//
'//------------------------------------------------------------------------
Option Explicit
Option Private Module
Public Const OO11OlOOl1l As Integer = 1
Public Const Ol11OlOOl1l As Integer = 0
Public Const OO11OlOOl1O As Integer = 0
Public Const OO11OlOOl10 As Integer = 1
Public Const OO1lOlOOl10 As Integer = 2
Public Const Ol1lOlOOl10 As Long = 35071
Public Const Ol1lOlOll10 As Long = 36500
Public Ol1lOlOlO10 As Long
Public Const Ol11OlOlO10 As Integer = 7
Public Const Ol11OlO1O10 As Integer = 7
Public Const schedule As String = "Schedule"
Public Const Ol11llO1O10 As String = "Progress"
Public Const Ol11llO1O00 As String = "AnalysisReport"
Public Const Ol11llO1OO0 As String = "Calendar"
Public Const Ol11llO1Ol0 As String = "Settings"
Public Const Ol11llO1ll0 As String = "TranslatedLanguages"
Public Ol01llO1ll0 As String
Public Ol01llOlll0 As Workbook
Public Ol01llOOll0() As Variant
Public Ol11llOOll0 As Workbook
Public Ol11llOOlO0 As Boolean
Public Ol11llO0lO0 As Variant
Public Ol01llO0lO0 As Variant
Public Ol01llO0ll0 As String
Public Ol01llO0Ol0 As Long
Public Ol01llO00l0 As Long
Public Ol01llO00l1 As Integer
Public Ol01llOO0l1 As Integer
Public Ol01llO0Ol1 As Double
Public Const Ol01llO1Ol1 As String = "ko"
Public Const Ol01lll1Ol1 As Integer = 4
Public Const Ol01Oll1Ol1 As Integer = 3
Public Const Ol01Oll1Oll As Integer = 1
Public OlO1Oll1Ol1
Public Const OlO1Oll1ll1 As Integer = 3
Public Const OlO0Oll1ll1 As Integer = 1
Public Const OlO1Oll1ll0 As String = "A"
Public OlO1O1l1ll0 As Long
Public Ol01O1l1ll0 As String
Public Const Ol01Oll1ll0 As Integer = 2
Public Const Ol00Oll1ll0 As String = "B"
Public Const OlO0Oll1ll0 As Integer = 3
Public Const OlO0Oll1Ol0 As String = "C"
Public OlO1Oll1Ol0 As Integer
Public OlO1lll1Ol0 As String
Public OlO1lOl1Ol0 As Integer
Public OlO0lll1Ol0 As String
Public OOO0lll1Ol0 As String
Public OlO0lll1OO0 As String
Public OlO1lll1OO0 As String
Public OlO0Oll1OO0 As String
Public OlO00ll1OO0 As String
Public OlO0OlO1OO0 As Integer
Public OlO0OlO1OO1 As String
Public OlO0Oll1OO1 As Integer
Public OlO0OOl1OO0 As String
Public Oll0OOl1OO0 As Integer
Public Oll1OOl1OO0 As String
Public Oll1lOl1OO0 As Integer
Public OllllOl1OO0 As String
Public Ollllll1OO0 As Integer
Public O1lllll1OO0 As String
Public O1lOlll1OO0 As Integer
Public O0lOlll1OO0 As String
Public O0OOlll1OO0 As Integer
Public O1OOlll1OO0 As String
Public O1OOllllOO0 As Integer
Public O1OOllll0O0 As String
Public O1OOllOl0O0 As Integer
Public O1OOllOl0O1 As String
Public O1OOllOO0O1 As Integer
Public O1OlllOO0O1 As String
Public O1OlllOO0l1 As Integer
Public O1OlllOO011 As String
Public O1O1llOO011 As Integer
Public O1O1llOO010 As String
Public O1O11lOO010 As Integer
Public O1O11lOO0l0 As String
Public O1O1llOO0l0 As Integer
Public O1O1lllO0l0 As String
Public O1l1lllO0l0 As Integer
Public O0l1lllO0l0 As String
Public O0l11llO0l0 As Integer
Public O0111llO0l0 As String
Public O0111OlO0l0 As Integer
Public O0111OlO1l0 As String
Public O011lOlO1l0 As Integer
Public O011lOlO1O0 As String
Public O001lOlO1O0 As Integer
Public O000lOlO1O0 As String
Public Const O00OlOlO1O0 As String = "B2"
Public Const O00OlOll1O0 As String = "B3"
Public Const O00O1Oll1O0 As String = "B4"
Public Const O00O1Oll1O1 As String = "B5"
Public Const O00O1lll1O1 As String = "B6"
Public Const O01O1lll1O1 As String = "B7"
Public Const version As String = "B8"
Public Const O11O1lll1O1 As String = "B9"
Public Const O11l1lll1O1 As String = "B10"
Public Const O11l11ll1O1 As String = "B11"
Public Const Ol1l11ll1O1 As String = "B12"
Public Const Ol0l11ll1O1 As String = "B13"
Public Const Ol0l11ll0O1 As String = "B14"
Public Const OO0l11ll0O1 As String = "B15"
Type O1lO11Ol1O1
OO0l11ll1O1 As Integer
OO0l11Ol1O1 As Date
OOOl11Ol1O1 As Date
OlOl11Ol1O1 As Double
OlOl01Ol1O1 As Double
OOOl01Ol1O1 As Double
O0Ol01Ol1O1 As Variant
O0Ol01OO1O1 As Variant
O1Ol01OO1O1 As Double
O1Ol11OO1O1 As Double
End Type
Type taskitem
O1OO11OO1O1 As String
O1lO11OO1O1 As Long
O1lO11Ol1O1 As String
O1lO01Ol1O1 As String
note As String
O1lO01O11O1 As Date
O1lO01O11O0 As Date
Ol11llO1OO0 As String
OlOl11Ol1O1 As Double
OlOl01Ol1O1 As Double
OllO01O11O0 As String
OllO01l11O0 As String
Olll01l11O0 As Date
Olll01l11OO As Date
O1Ol01OO1O1 As Double
Olll00l11OO As String
Olll00l1lOO As Double
resource As String
Olll00l1lO0 As String
O1ll00l1lO0 As Double
actualrate As Double
End Type
Type weeklyresource
O1lO01O11O1 As Date
O1lO01O11O0 As Date
resource As Double
End Type
Type resourcebyman
O1lO11Ol1O1 As String
O1lO01Ol1O1 As String
O1ll00O1lO0 As String
O1lO01O11O1 As Date
O1lO01O11O0 As Date
OllO00l1lO0 As Date
OllO10l1lO0 As Date
OlOl11Ol1O1 As Double
OlOl01Ol1O1 As Double
Olll00l1lOO As Double
O1ll00l1lO0 As Double
actualrate As Double
Olll01l11O0 As Date
Olll01l11OO As Date
OOlO10l1lO0 As Date
OllO10l1OO0 As Date
O1Ol01OO1O1 As Double
End Type
Type attr4planratedate
OllO10O1OO0 As String
OllO10O1O00 As String
Olll10O1O00 As Long
OllO10l1O00 As Long
OllO11l1O00 As Long
OllO11l1O01 As Long
OlOO11l1O01 As Boolean
End Type
Type jobresult
OllO11l1O11 As Long
message As String
End Type
Sub OllOl1l1O11(ByRef fromsheet As Worksheet, ByRef fromrange As Range, ByRef tosheet As Worksheet, ByRef searchrange As Range, ByVal searchstartrow As Long, ByVal searchvalue As String)
Dim OllOl1l1O01 As Long
OllOl1l1O01 = Application.WorksheetFunction.Match(searchvalue, searchrange, 0)
fromsheet.Hyperlinks.Add anchor:=fromrange, Address:="", SubAddress:=tosheet.name & "!" & Cells(OllOl1l1O01 + searchstartrow - 1, 4).Address, TextToDisplay:=searchvalue
End Sub
Function ceiling(ByVal OllOl111O01 As Double, ByVal Ollll111O01 As Integer) As Integer
ceiling = Application.WorksheetFunction.ceiling(OllOl111O01, Ollll111O01)
End Function
Function OOlll111O01(ByVal OOlll110O01 As Integer, _
ByVal OOlll100O01 As Date, _
ByVal OOlll100001 As Long, _
ByRef Ollll100001 As Long, _
ByRef Ollll100000 As Integer) As Double
Dim Ollll110000 As Long
Dim OlOll110000 As Long
Ollll110000 = 0
OlOll110000 = 0
Ollll100001 = OOlll100001
While Ollll110000 <= OOlll100001
Ollll100000 = Day(DateSerial(Year(OOlll100O01 + Ollll110000), Month(OOlll100O01 + Ollll110000) + 1, 0))
Ollll110000 = Ollll110000 + Ollll100000
If Ollll100000 <= Ollll100001 Then
Ollll100001 = Ollll100001 - Ollll100000
OlOll110000 = OlOll110000 + 1
End If
Wend
If OOlll110O01 = 0 Then
OOlll111O01 = OlOll110000
Else
OOlll111O01 = Ollll100001
End If
End Function
Function OlOll010000(ByVal OlOll010O00 As Double, ByVal OlOll000O00 As String, ByVal OOOll000O00 As Double) As Double
Dim OlOl1000O00 As Double
Dim OOOl1000O00 As Double
If OOOll000O00 = 0 Then
OOOll000O00 = 1
End If
If OlOll000O00 = "WidthOfDurationByPixel" Then
OlOl1000O00 = 1.068966
OOOl1000O00 = 4.931034
OlOll010000 = ((OlOll010O00 * OlOl1000O00) + OOOl1000O00) * OOOll000O00
ElseIf OlOll000O00 = "WidthOfDuration" Then
OlOl1000O00 = 0.122068966
OOOl1000O00 = 0.337931034
OlOll010000 = ((OlOll010O00 * OlOl1000O00) + OOOl1000O00) * OOOll000O00
ElseIf OlOll000O00 = "SpaceCountBeforeText" Then
OlOl1000O00 = 0.437931034
OOOl1000O00 = 0.862068966
If OlOll010O00 = 7 Then
OlOll010000 = (ceiling((OlOll010O00 * OlOl1000O00) + OOOl1000O00, 1) + 3) * OOOll000O00
Else
OlOll010000 = (ceiling((OlOll010O00 * OlOl1000O00) + OOOl1000O00, 1) + 2) * OOOll000O00
End If
ElseIf OlOll000O00 = "ColumnCountOf100PercentText" Then
Select Case OlOll010O00
Case 1
OlOll010000 = 6.7 / OOOll000O00
Case 2
OlOll010000 = 5.3 / OOOll000O00
Case 3
OlOll010000 = 4.5 / OOOll000O00
Case 4
OlOll010000 = 4 / OOOll000O00
Case 5
OlOll010000 = 3.7 / OOOll000O00
Case 6
OlOll010000 = 3.3 / OOOll000O00
Case 7
OlOll010000 = 3 / OOOll000O00
Case 10
OlOll010000 = 2.5 / OOOll000O00
Case 14
OlOll010000 = 2 / OOOll000O00
Case 30
OlOll010000 = 1.1 / OOOll000O00
Case Else
OlOll010000 = 0
End Select
Else
OlOll010000 = 0
End If
End Function
Function OOOl100OO00() As Boolean
Dim OOOl1O0OO00 As Boolean
Dim OOOl1O0OO10 As Long
Dim OOOO1O0OO10 As String
If getattr("languageSelectionType", OO0l11ll0O1) = 0 Then
OOOl1O0OO10 = CLng(Application.International(xlCountryCode))
Ol01llO0Ol0 = OOOO1O0O010(OOOl1O0OO10)
If CLng(getattr("lastTranslatedLanguage", OO0l11ll0O1)) <> OOOl1O0OO10 Then
OOOl1O0OO00 = True
End If
Else
OOOl1O0OO10 = CLng(getattr("languageSelectedByManual", OO0l11ll0O1))
Ol01llO0Ol0 = OOOO1O0O010(OOOl1O0OO10)
If CLng(getattr("lastTranslatedLanguage", OO0l11ll0O1)) <> OOOl1O0OO10 Then
OOOl1O0OO00 = True
End If
End If
If OOOl1O0OO00 Then
OOOO1O0OO10 = "The language setting has been changed.\nPress the OK button to start translation. \nIt may take a long time to translate.\nHowever, translation of Ribbon menu and Popup menu takes effect after reopening this XLGantt file."
MsgBox OO1011llOl0(Ol1111Ol100(OOOO1O0OO10, OOOO1O0O010(CLng(getattr("lastTranslatedLanguage", OO0l11ll0O1))))) & vbNewLine & vbNewLine & Ol10100l000(OOOO1O0OO10)
OO0001l01ll
OO1O10lO110
OO1lOOl1lll
OO0001l01Ol
O10O01lll11
setattr "lastTranslatedLanguage", OOOl1O0OO10, OO0l11ll0O1
Worksheets(Ol11llO1Ol0).Range(version).Offset(0, 2).Value = OOOl1O0OO10
End If
OOOl100OO00 = OOOl1O0OO00
End Function
Function OOOO1O0O010(ByVal OOlO1O0O010 As Long) As Long
Dim OOlO0O0O010 As Long
Dim OOlO0O0O110 As Variant
Dim O0lO0O0O110 As Long
OOlO0O0O110 = Split(getattr("selectedLanguageList", OO0l11ll0O1), ",")
For OOlO0O0O010 = 0 To UBound(OOlO0O0O110)
If OOlO1O0O010 = CLng(Mid(OOlO0O0O110(OOlO0O0O010), 1, InStr(1, OOlO0O0O110(OOlO0O0O010), ":") - 1)) Then
O0lO0O0O110 = OOlO0O0O010
Exit For
End If
Next OOlO0O0O010
OOOO1O0O010 = O0lO0O0O110
End Function
Sub O0lO0l0O110()
Dim O0lO0l0O100() As String
ReDim O0lO0l0O100(1 To 29, 1 To 2)
O0lO0l0O100(1, 1) = 966: O0lO0l0O100(1, 2) = "Arabic"
O0lO0l0O100(2, 1) = 42: O0lO0l0O100(2, 2) = "Czech"
O0lO0l0O100(3, 1) = 45: O0lO0l0O100(3, 2) = "Danish"
O0lO0l0O100(4, 1) = 31: O0lO0l0O100(4, 2) = "Dutch"
O0lO0l0O100(5, 1) = 1: O0lO0l0O100(5, 2) = "English"
O0lO0l0O100(6, 1) = 98: O0lO0l0O100(6, 2) = "Farsi"
O0lO0l0O100(7, 1) = 358: O0lO0l0O100(7, 2) = "Finnish"
O0lO0l0O100(8, 1) = 33: O0lO0l0O100(8, 2) = "French"
O0lO0l0O100(9, 1) = 49: O0lO0l0O100(9, 2) = "German"
O0lO0l0O100(10, 1) = 30: O0lO0l0O100(10, 2) = "Greek"
O0lO0l0O100(11, 1) = 972: O0lO0l0O100(11, 2) = "Hebrew"
O0lO0l0O100(12, 1) = 36: O0lO0l0O100(12, 2) = "Hungarian"
O0lO0l0O100(13, 1) = 91: O0lO0l0O100(13, 2) = "Indian"
O0lO0l0O100(14, 1) = 39: O0lO0l0O100(14, 2) = "Italian"
O0lO0l0O100(15, 1) = 81: O0lO0l0O100(15, 2) = "Japanese"
O0lO0l0O100(16, 1) = 82: O0lO0l0O100(16, 2) = "Korean"
O0lO0l0O100(17, 1) = 47: O0lO0l0O100(17, 2) = "Norwegian"
O0lO0l0O100(18, 1) = 48: O0lO0l0O100(18, 2) = "Polish"
O0lO0l0O100(19, 1) = 55: O0lO0l0O100(19, 2) = "Portuguese (Brazil)"
O0lO0l0O100(20, 1) = 351: O0lO0l0O100(20, 2) = "Portuguese"
O0lO0l0O100(21, 1) = 7: O0lO0l0O100(21, 2) = "Russian"
O0lO0l0O100(22, 1) = 86: O0lO0l0O100(22, 2) = "Simplified Chinese"
O0lO0l0O100(23, 1) = 34: O0lO0l0O100(23, 2) = "Spanish"
O0lO0l0O100(24, 1) = 46: O0lO0l0O100(24, 2) = "Swedish"
O0lO0l0O100(25, 1) = 66: O0lO0l0O100(25, 2) = "Thai"
O0lO0l0O100(26, 1) = 886: O0lO0l0O100(26, 2) = "Traditional Chinese"
O0lO0l0O100(27, 1) = 90: O0lO0l0O100(27, 2) = "Turkish"
O0lO0l0O100(28, 1) = 92: O0lO0l0O100(28, 2) = "Urdu"
O0lO0l0O100(29, 1) = 84: O0lO0l0O100(29, 2) = "Vietnamese"
With OO101lO0Oll.lstLanguages
.List = O0lO0l0O100
End With
End Sub
Sub O0lO0l0O101()
Dim O0lO0l1O100 As Long
Dim filename As String
Dim O0lOOl1O100 As Long
Dim O0lOOl1l100 As Long
Dim O0l0Ol1l100 As jobresult
Dim O0l0ll1l100 As Long
Dim O0l0ll1ll00 As String
Dim rownumofdeliverables As Long
On Error GoTo errhandler
rownumofdeliverables = O1O1ll11l1O()
filename = Cells(rownumofdeliverables, O0l11llO0l0)
If filename = "" Then
For O0lO0l1O100 = 1 To 8
If getattr("chkInclude2SelectList" & CStr(O0lO0l1O100), Ol0l11ll0O1) = True Then
O0lOOl1O100 = O0lOOl1O100 + 1
O0lOOl1l100 = O0lO0l1O100
End If
Next O0lO0l1O100
If O0lOOl1O100 = 0 Then
MsgBox Ol10100l000("The deliverables name is empty.")
Exit Sub
ElseIf O0lOOl1O100 = 1 Then
filename = Cells(rownumofdeliverables, Cells(rownumofdeliverables, OlO0Oll1ll0) + OlO1Oll1Ol1) & "." & getattr("txtFileExt" & CStr(O0lOOl1l100), Ol0l11ll0O1)
Else
Load OO0OOOlOl01
OO0OOOlOl01.txtRowNoOfFile = rownumofdeliverables
OO0OOOlOl01.txtFileNameExceptExt = Cells(rownumofdeliverables, Cells(rownumofdeliverables, OlO0Oll1ll0) + OlO1Oll1Ol1)
OO0OOOlOl01.Show
Exit Sub
End If
End If
O1O0ll11l10 rownumofdeliverables:=rownumofdeliverables, filename:=filename
normalend:
Exit Sub
errhandler:
O0l0ll1l100 = Err.Number
O0l0ll1ll00 = Err.Description
If O0l0ll1l100 <> 0 Then
MsgBox Ol10100l000("An error occurred while processing. Please check the messages below.") & vbNewLine & vbNewLine & "Error code : " & O0l0ll1l100 & vbNewLine & O0l0ll1ll00
End If
Resume normalend
End Sub
Sub O0l1ll1ll00()
Dim O0l1ll1ll10 As String
Dim O0l1ll11l10 As jobresult
Dim O1l1ll11l10 As Long
Dim O1l1ll11l1O As String
Dim rownumofdeliverables As Long
On Error GoTo errhandler
rownumofdeliverables = O1O1ll11l1O()
O0l1ll1ll10 = O0O00O0ll10(rownumofdeliverables)
If O0l1ll1ll10 > "" Then
Shell "explorer.exe " & O0l1ll1ll10, vbNormalFocus
End If
normalend:
Exit Sub
errhandler:
O1l1ll11l10 = Err.Number
O1l1ll11l1O = Err.Description
If O1l1ll11l10 <> 0 Then
MsgBox Ol10100l000("An error occurred while processing. Please check the messages below.") & vbNewLine & vbNewLine & "Error code : " & O1l1ll11l10 & vbNewLine & O1l1ll11l1O
End If
Resume normalend
End Sub
Function O1O1ll11l1O() As Long
Dim rownumofdeliverables As Long
Dim O1O0ll11l1O As jobresult
O1O0ll11l1O = O101l1l0llO
If O1O0ll11l1O.OllO11l1O11 <> 0 Then
MsgBox O1O0ll11l1O.message
Exit Function
End If
If getattr("chkDeliverablesMgt", Ol0l11ll1O1) = Ol11OlOOl1l Then
MsgBox Ol10100l000("Unable to open file. Please change the ""Check if you save deliverables in specific directory"" option to the checked state in the Setting>Deliverables tab.")
Exit Function
End If
rownumofdeliverables = Selection.Row
If ActiveSheet.name <> schedule Then
MsgBox Ol10100l000("You can open deliverables only on the {} Sheet.", schedule)
Exit Function
End If
If TypeName(Selection) <> "Range" Then
MsgBox Ol10100l000("Task area was not selected. Please select a task area.")
Exit Function
End If
If Selection.Areas.Count > 1 Then
MsgBox Ol10100l000("You selected {} areas. Please select only one area.", Selection.Areas.Count)
Exit Function
End If
If rownumofdeliverables < Ol1lOlOlO10 Then
MsgBox Ol10100l000("This area can not be selected. Please select an area that contains tasks.")
Exit Function
End If
O1O1ll11l1O = rownumofdeliverables
End Function
Sub O1O0ll11l10(ByVal rownumofdeliverables As Long, ByVal filename As String)
Dim O1l0ll11l10 As String
Dim O1l01l11l10 As String
Dim O1l11l11l10 As String
Dim O1l10l11l10 As String
Dim O1O10l11l10 As New Dictionary
Dim O1l00l11l10 As Long
Dim O1l00l11l1O As Long
Dim O1l00ll1l1O As Long
Dim O1O00ll1l1O As String
Dim O0O00ll1l1O As String
Dim O0O00l11l1O As Long
Dim O0O00l11l0O As Long
Dim O0O00l01l0O As Long
Dim O0O00l01l00 As String
On Error GoTo errhandler
O1l11l11l10 = O0O00O0ll10(rownumofdeliverables)
If O1l11l11l10 > "" Then
O1l01l11l10 = LCase(Right(filename, Len(filename) - InStrRev(filename, ".")))
If (O1l01l11l10 = "ppt*") Or (O1l01l11l10 = "doc*") Or (O1l01l11l10 = "xls*") Then
O1l0ll11l10 = O0l1Oll01l1(filename, O1l11l11l10)
If O1l0ll11l10 = "" Then
MsgBox Ol10100l000("{} file does not exist.", filename)
Exit Sub
Else
filename = O1l0ll11l10
End If
Else
If Not O0l1O0l11ll(O1l11l11l10 & filename) Then
MsgBox Ol10100l000("{} file does not exist.", filename)
Exit Sub
End If
End If
For O1l00l11l10 = 4 To 8
O0O00ll1l1O = Trim(getattr("txtPgmName" & O1l00l11l10, Ol0l11ll0O1))
If O0O00ll1l1O > "" Then
O1O10l11l10.Add LCase(getattr("txtFileExt" & CStr(O1l00l11l10), Ol0l11ll0O1)), getattr("txtPgmPath" & O1l00l11l10, Ol0l11ll0O1)
End If
Next O1l00l11l10
If (O1l01l11l10 Like "ppt*") Then
Dim O0O00l0ll00 As Object
Set O0O00l0ll00 = CreateObject("PowerPoint.Application")
O0O00l0ll00.Visible = True
O0O00l0ll00.presentations.Open O1l11l11l10 & filename
ElseIf (O1l01l11l10 Like "doc*") Then
Dim O0O00l0ll10 As Object
Set O0O00l0ll10 = CreateObject("Word.Application")
O0O00l0ll10.Visible = True
O0O00l0ll10.documents.Open O1l11l11l10 & filename
ElseIf (O1l01l11l10 Like "xls*") Then
Workbooks.Open O1l11l11l10 & filename
Else
If IsEmpty(O1O10l11l10.item(O1l01l11l10)) Then
MsgBox Ol10100l000("There are no executable programs that open the deliverables.")
Exit Sub
Else
O1l10l11l10 = O1O10l11l10.item(O1l01l11l10)
End If
Shell O1l10l11l10 & " " & Chr(34) & O1l11l11l10 & filename & Chr(34), vbNormalFocus
End If
End If
normalend:
Exit Sub
errhandler:
O0O00l01l0O = Err.Number
O0O00l01l00 = Err.Description
If O0O00l01l0O <> 0 Then
MsgBox Ol10100l000("An error occurred while processing. Please check the messages below.") & vbNewLine & vbNewLine & "Error code : " & O0O00l01l0O & vbNewLine & O0O00l01l00
End If
Resume normalend
End Sub
Function O0O00O0ll10(ByVal rownumofdeliverables As Long) As String
Dim O0O01O0ll10 As String
Dim O0O01O0ll1O As Long
Dim O0O11O0ll1O As Long
If getattr("savePathType", Ol0l11ll1O1) = "DEFINED" Then
O0O01O0ll10 = getattr("txtDefinedPath", Ol0l11ll1O1)
Else
O0O11O0ll1O = Ol11OlO1O10
Do While Cells(rownumofdeliverables, OlO0Oll1ll0) > -1
If Cells(rownumofdeliverables, OlO0Oll1ll0) > 0 Then
If Cells(rownumofdeliverables, OlO0Oll1ll0) < O0O11O0ll1O Then
O0O01O0ll10 = Cells(rownumofdeliverables, Cells(rownumofdeliverables, OlO0Oll1ll0) + OlO1Oll1Ol1) & "\" & O0O01O0ll10
O0O11O0ll1O = Cells(rownumofdeliverables, OlO0Oll1ll0)
End If
End If
If Cells(rownumofdeliverables, OlO0Oll1ll0) = 1 Then
Exit Do
End If
rownumofdeliverables = rownumofdeliverables - 1
Loop
O0O01O0ll10 = getattr("txtAutoDefinedBasePath", Ol0l11ll1O1) & "\" & O0O01O0ll10
End If
If Right(O0O01O0ll10, 1) <> "\" Then
O0O01O0ll10 = O0O01O0ll10 & "\"
End If
If Not O0l100l11ll(O0O01O0ll10) Then
MsgBox Ol10100l000("The following folder does not exist.") & vbNewLine & vbNewLine & O0O01O0ll10
Exit Function
End If
O0O00O0ll10 = O0O01O0ll10
End Function
Sub O0O10O0ll1O( _
sheetname As String, _
startrange As Range, _
actualstartinfirstcell As Single, _
endrange As Range, _
actualendinlastcell As Single, _
ByVal rgbcolor As Long, _
ByRef arr() As Variant, _
ByVal actualrate As Double, _
ByVal taskgroupyn As String)
Dim O0l10O0ll1O As Single, O0l10O0ll1l As Single
Dim O0l10O0l11l As Single, O0l10O0111l As Single
Dim O0l10OO111l As Single, O0l11OO111l As Single
Dim O0l11OO111O As Single, O0l10OO111O As Single
Dim O1l10OO111O As Single
Dim O1l00OO111O As Long
Dim O1l10OO011O As String
Dim O1l10OO0l1O As Shape
Dim O1l10OO0l0O As Single
On Error GoTo errhandler
O0l10O0ll1O = startrange.Left + (startrange.width * actualstartinfirstcell)
O0l10O0ll1l = endrange.Left + (endrange.width * actualendinlastcell)
O1l10OO111O = O0l10O0ll1l - O0l10O0ll1O
O0l10O0l11l = startrange.Top
O0l10O0111l = startrange.Top
O0l10OO111l = startrange.Height
O0l11OO111l = startrange.Height
O1l10OO0l0O = O0l10O0l11l + ((O0l10OO111l - 9) / 2)
Set O1l10OO0l1O = Ol01llOlll0.Sheets(sheetname).Shapes.AddShape(msoShapeRectangle, O0l10O0ll1O, O1l10OO0l0O, O1l10OO111O, 9)
With O1l10OO0l1O
If taskgroupyn = "G" Then
.Fill.ForeColor.RGB = RGB(255, 192, 0)
.Line.ForeColor.RGB = RGB(255, 192, 0)
Else
.Fill.ForeColor.RGB = RGB(47, 131, 255)
End If
.Fill.Transparency = 0.7
.Line.Weight = 0.5
End With
Set O1l10OO0l1O = Ol01llOlll0.Sheets(sheetname).Shapes.AddConnector(msoConnectorStraight, O0l10O0ll1O, O0l10O0l11l + O0l10OO111l / 2, O0l10O0ll1O + (O1l10OO111O * actualrate), O0l10O0111l + O0l11OO111l / 2)
With O1l10OO0l1O.Line
.BeginArrowheadStyle = msoArrowheadNone
.EndArrowheadStyle = msoArrowheadOpen
.Weight = 2.5
.Transparency = 0.2
.EndArrowheadStyle = msoArrowheadNone
.ForeColor.RGB = rgbcolor
End With
normalend:
Exit Sub
errhandler:
O1l00OO111O = Err.Number
O1l10OO011O = Err.Description
Err.Raise Number:=O1l00OO111O, Source:=Ol10100l000("Drawing progress line"), Description:=Ol10100l000("There was an error while drawing a progress line. This can happen if the project duration is too long. Check the message below.") & vbNewLine & vbNewLine & O1l10OO011O
End Sub
Sub O1l10Ol0l0O( _
sheetname As String, _
startrange As Range, _
actualstartinfirstcell As Single, _
endrange As Range, _
actualendinlastcell As Single, _
startrangeactual As Range, _
actualstartinfirstcellactual As Single, _
endrangeactual As Range, _
actualendinlastcellactual As Single, _
ByVal rgbcolor As Long, _
ByRef arr() As Variant, _
ByVal actualrate As Double, _
ByVal taskgroupyn As String)
Dim O1l11Ol0l0O As Single, O1l11Ol0O0O As Single
Dim O1ll1Ol0O0O As Single, O1ll1ll0O0O As Single
Dim Olll1ll0O0O As Single, OlOl1ll0O0O As Single
Dim OlOllll0O0O As Single, OlOlll10O0O As Single
Dim OlOlll10O1O As Single, OlOOll10O1O As Single
Dim OlOOll10OlO As Single
Dim OllOll10OlO As Single
Dim OllOll10Oll As Long
Dim OllOlO10Oll As String
Dim OllOlO100ll As Shape
Dim OllOlO1O0ll As Single
On Error GoTo errhandler
O1l11Ol0l0O = startrange.Left + (startrange.width * actualstartinfirstcell)
O1l11Ol0O0O = endrange.Left + (endrange.width * actualendinlastcell)
OlOOll10OlO = O1l11Ol0O0O - O1l11Ol0l0O
O1ll1Ol0O0O = startrangeactual.Left + (startrangeactual.width * actualstartinfirstcellactual)
O1ll1ll0O0O = endrangeactual.Left + (endrangeactual.width * actualendinlastcellactual)
OllOll10OlO = O1ll1ll0O0O - O1ll1Ol0O0O
Olll1ll0O0O = startrange.Top
OlOl1ll0O0O = startrange.Top
OlOllll0O0O = startrange.Height
OlOlll10O0O = startrange.Height
OllOlO1O0ll = Olll1ll0O0O + ((OlOllll0O0O - 9) / 2)
Set OllOlO100ll = Ol01llOlll0.Sheets(sheetname).Shapes.AddShape(msoShapeRectangle, O1l11Ol0l0O, OllOlO1O0ll, OlOOll10OlO, 9)
With OllOlO100ll
If taskgroupyn = "G" Then
.Fill.ForeColor.RGB = RGB(255, 192, 0)
.Line.ForeColor.RGB = RGB(255, 192, 0)
Else
.Fill.ForeColor.RGB = RGB(47, 131, 255)
End If
.Fill.Transparency = 0.7
.Line.Weight = 0.5
End With
Set OllOlO100ll = Ol01llOlll0.Sheets(sheetname).Shapes.AddConnector(msoConnectorStraight, O1ll1Ol0O0O, Olll1ll0O0O + OlOllll0O0O / 2, O1ll1Ol0O0O + (OllOll10OlO * actualrate), OlOl1ll0O0O + OlOlll10O0O / 2)
With OllOlO100ll.Line
.BeginArrowheadStyle = msoArrowheadNone
.EndArrowheadStyle = msoArrowheadOpen
.Weight = 2.5
.Transparency = 0.2
.EndArrowheadStyle = msoArrowheadNone
.ForeColor.RGB = rgbcolor
End With
normalend:
Exit Sub
errhandler:
OllOll10Oll = Err.Number
OllOlO10Oll = Err.Description
Err.Raise Number:=OllOll10Oll, Source:=Ol10100l000("Drawing progress line"), Description:=Ol10100l000("There was an error while drawing a progress line. This can happen if the project duration is too long. Check the message below.") & vbNewLine & vbNewLine & OllOlO10Oll
End Sub
Sub Oll0lO100ll( _
ByVal OlO0lO100ll As Integer, _
ByVal sheetname As String, _
ByRef startrange As Range, _
ByRef endrange As Range, _
ByVal OlO0lO100lO As Single, _
ByVal rgbcolor As Long)
Dim Oll0lO100lO As Single, Oll0lO1001l As Single
Dim Oll0lO10011 As Single, Oll01O10011 As Single
Dim Oll01l10011 As Single, O1l01l10011 As Single
Dim O1l0ll10011 As Single, O1l0lO10011 As Single
Dim O1O0lO10011 As Single, O1O0lO10010 As Single
Dim O1O0lO10110 As Single
Dim O1O0ll10110 As Long
Dim OlO0ll10110 As String
Dim OlO0Ol10110 As Shape
If OlO0lO100ll = 0 Then
Oll0lO100lO = startrange.Left + startrange.width
Oll0lO1001l = startrange.Top + startrange.Height - 0.1
Oll01O10011 = endrange.Top + endrange.Height
ElseIf OlO0lO100ll = 1 Then
Oll0lO100lO = startrange.Left + (startrange.width * OlO0lO100lO)
Oll0lO1001l = startrange.Top + startrange.Height - 0.1
Oll01O10011 = endrange.Top + endrange.Height
End If
Set OlO0Ol10110 = Ol01llOlll0.Sheets(sheetname).Shapes.AddConnector(msoConnectorStraight, Oll0lO100lO, Oll0lO1001l, Oll0lO100lO, Oll01O10011)
With OlO0Ol10110.Line
.BeginArrowheadStyle = msoArrowheadNone
.EndArrowheadStyle = msoArrowheadOpen
.Weight = 0.5
.EndArrowheadStyle = msoArrowheadNone
.ForeColor.RGB = rgbcolor
End With
End Sub
Sub Ol00ll10110( _
sheetname As String, _
fromrange As Range, _
ByVal rgbcolor As Long, _
ByRef arr() As Variant, _
ByVal actualrate As Double, _
Ol00ll10010 As Range)
Dim Ol00ll11010 As Single, Ol00ll01010 As Single
Dim Ol00ll00010 As Single, Ol00Ol00010 As Single
Dim Ol10Ol00010 As Single, Oll0Ol00010 As Single
Dim Oll0Ol01010 As Single, Oll0Ol0O010 As Single
Dim OOl0Ol0O010 As Long
Dim Oll0Ol0O011 As String
On Error GoTo errhandler
Ol00ll11010 = fromrange.Left
Ol00ll01010 = Ol00ll10010.Left + (Ol00ll10010.width * actualrate)
Ol00ll00010 = fromrange.Top
Ol00Ol00010 = fromrange.Top
Ol10Ol00010 = fromrange.Height
Oll0Ol00010 = fromrange.Height
Dim Oll0Ol0O001 As Shape
Set Oll0Ol0O001 = Ol01llOlll0.Sheets(sheetname).Shapes.AddConnector(msoConnectorStraight, Ol00ll11010, Ol00ll00010 + Ol10Ol00010 / 2, Ol00ll01010, Ol00Ol00010 + Oll0Ol00010 / 2)
With Oll0Ol0O001.Line
.BeginArrowheadStyle = msoArrowheadNone
.EndArrowheadStyle = msoArrowheadOpen
.Weight = 2.5
.Transparency = 0.2
.EndArrowheadStyle = msoArrowheadNone
.ForeColor.RGB = rgbcolor
End With
Dim OOl0Ol0O001 As Single
OOl0Ol0O001 = Ol00ll10010.width
Set Oll0Ol0O001 = Ol01llOlll0.Sheets(sheetname).Shapes.AddShape(msoShapeRectangle, Ol00ll11010, Ol00ll00010, OOl0Ol0O001, 10)
With Oll0Ol0O001
.ZOrder msoSendToBack
End With
normalend:
Exit Sub
errhandler:
OOl0Ol0O010 = Err.Number
Oll0Ol0O011 = Err.Description
Err.Raise Number:=OOl0Ol0O010, Source:=Ol10100l000("Drawing progress line"), Description:=Ol10100l000("There was an error while drawing a progress line. This can happen if the project duration is too long. Check the message below.") & vbNewLine & vbNewLine & Oll0Ol0O011
End Sub
Sub OOl0Ol0l001(argworkbook As Workbook, argsheet As String, OO10Ol0l001 As Range)
Dim OO10Ol0l000 As Shape
On Error Resume Next
With argworkbook.Sheets(argsheet)
For Each OO10Ol0l000 In .Shapes
If Not Application.Intersect(OO10Ol0l000.TopLeftCell, OO10Ol0l001) Is Nothing Then
OO10Ol0l000.Delete
End If
Next OO10Ol0l000
End With
On Error GoTo 0
End Sub
Public Sub OO10OO0l000(ByRef OO00OO0l000 As UserForm, ByVal OO00OO0O000 As String, ByVal Ol00OO0O000 As String)
With OO00OO0l000.Controls(OO00OO0O000)
.SetFocus
.Value = .Value & Ol00OO0O000
.SelStart = Len(.Value)
End With
OO00OO0l000.Repaint
DoEvents
End Sub
Public Function Ol00OO0O100( _
ByRef OlO0OO0O100 As MSForms.TextBox, _
ByVal title As String, _
Optional ByVal OlO0OO0l100 As Boolean = False, _
Optional ByVal length As Long = 1000, _
Optional ByVal datatype As String = "STRING", _
Optional ByVal OlO0OO0l000 As Boolean = True _
) As Boolean
Dim O1O0OO0l000 As Boolean
O1O0OO0l000 = True
If OlO0OO0l100 = True And (IsNull(OlO0OO0O100.text) Or OlO0OO0O100.text = "") Then
MsgBox title & "|fffd||fffd|(|fffd||fffd|) |fffd||537||fffd||fffd||3fc||fffd||fffd||fffd|." & Space(6), 48, "|fffd||537||fffd| |fffd||fffd||fffd||fffd|"
If OlO0OO0l000 = True Then
OlO0OO0O100.SetFocus
End If
O1O0OO0l000 = False
End If
If (Not IsNull(OlO0OO0O100.text)) And Len(OlO0OO0O100.text) > length Then
MsgBox title & "|fffd||fffd| |fffd||537||fffd| |fffd||5b4||fffd| |fffd||fffd||fffd||334||fffd| " & CStr(length) & "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|." & Space(6), 48, "|fffd||537||fffd| |fffd||fffd||fffd||fffd|"
If OlO0OO0l000 = True Then
OlO0OO0O100.SetFocus
End If
O1O0OO0l000 = False
End If
If (datatype = "NUMERIC") Then
If Not IsNumeric(OlO0OO0O100.text) Then
MsgBox title & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||6b8||fffd| |fffd||537||fffd||fffd||fffd| |fffd||fffd| |fffd||5bd||fffd||fffd||3f4||fffd|." & Space(6), 48, "|fffd||537||fffd| |fffd||fffd||fffd||fffd|"
If OlO0OO0l000 = True Then
OlO0OO0O100.SetFocus
End If
O1O0OO0l000 = False
End If
Else
If (datatype = "DATE") Then
If Not IsDate(OlO0OO0O100.text) Then
MsgBox title & "|fffd||fffd||fffd||fffd| |fffd||fffd||a5||fffd||fffd| |fffd||537||fffd||fffd||fffd| |fffd||fffd| |fffd||5bd||fffd||fffd||3f4||fffd|." & vbNewLine & "YYYY-MM-DD |fffd||fffd||fffd||b7||fffd| |fffd||537||fffd||fffd||3fc||fffd||fffd||fffd|." & Space(6), 48, "|fffd||537||fffd| |fffd||fffd||fffd||fffd|"
If OlO0OO0l000 = True Then
OlO0OO0O100.SetFocus
End If
O1O0OO0l000 = False
End If
End If
End If
Ol00OO0O100 = O1O0OO0l000
End Function
Sub O1OOOO0l000(O1OOOO01000 As String)
Dim O1OOOO00000 As Object
Dim O1lOOO00000 As String, O1OOOO00001 As Long, O1OOOO01001 As Long
Dim O1lOOO01001 As Long
Dim O1lOlO01001 As Long
Dim O1lllO01001 As Long
Dim O1lllO01O01 As Long
Dim O1llll01O01 As Long
Dim O1llOl01O01 As Object
Dim item As Variant
Dim O0llOl01O01 As String
Dim O0llll01O01 As String
Dim O0llll01l01 As String
Dim O0lllO01l01 As String
Dim OOlllO01l01 As New Dictionary
Dim OOlllO01l11 As Variant
Dim OO1llO01l11 As Long
Dim OO0llO01l11 As String
Const Ol0llO01l11 As String = "http://xlworks.net/xlgantt/xlgantt_chk2.html"
Dim Ol0llO01l10 As Long
On Error GoTo catch
Set O1OOOO00000 = CreateObject("MSXML2.ServerXMLHTTP.6.0")
O1lOOO01001 = 2 * 1000
O1lOlO01001 = 2 * 1000
O1lllO01001 = 2 * 1000
O1lllO01O01 = 3 * 1000
O1OOOO00000.settimeouts O1lOOO01001, O1lOlO01001, O1lllO01001, O1lllO01O01
O1OOOO00000.Open "GET", Ol0llO01l11, False
O1OOOO00000.setRequestHeader "Content-Type", "text/xml"
O1OOOO00000.send
If O1OOOO00000.readyState = 4 Then
If O1OOOO00000.Status = 200 Then
O1lOOO00000 = O1OOOO00000.responseText
Else
GoTo catch
End If
Else
GoTo catch
End If
OOlllO01l11 = Split(O1lOOO00000, "|")
For O1llll01O01 = 0 To UBound(OOlllO01l11)
Ol0llO01l10 = InStr(1, OOlllO01l11(O1llll01O01), "=", vbBinaryCompare)
OOlllO01l01.Add Mid(OOlllO01l11(O1llll01O01), 1, Ol0llO01l10 - 1), Mid(OOlllO01l11(O1llll01O01), Ol0llO01l10 + 1, Len(OOlllO01l11(O1llll01O01)) - Ol0llO01l10)
Next O1llll01O01
If (OOlllO01l01.item("programVersion") <= getattr(version)) Then
If O1OOOO01000 <> "WORKBOOK_OPEN_EVENT" Then
MsgBox Ol10100l000("You are using the latest version of XLGantt.\nCurrent Verison : {}", getattr(version))
End If
Else
OlO0OOOOO0l.lblProgramInfo = getattr(O00O1Oll1O1) & " " & getattr(version)
OlO0OOOOO0l.lblReleaseDateCurrent.Caption = "Release " & Format(CDate(getattr(O11O1lll1O1)), Ol10100l000("mm/dd/yyyy"))
OlO0OOOOO0l.lblProgramInfoLatest.Caption = OOlllO01l01.item("programName") & " " & OOlllO01l01.item("programVersion")
OlO0OOOOO0l.lblReleaseDateLatest.Caption = "Release " & Format(CDate(OOlllO01l01.item("releaseDate")), Ol10100l000("mm/dd/yyyy"))
If CLng(getattr("lastTranslatedLanguage", OO0l11ll0O1)) = 82 Then
OlO0OOOOO0l.lblUpdateInfo.Caption = OOlllO01l01.item("noticeMessage_ko")
Else
OlO0OOOOO0l.lblUpdateInfo.Caption = OOlllO01l01.item("noticeMessage_en")
End If
OlO0OOOOO0l.lblProgramSite = "|fffd||fffd|" & "2015~" & Format(Date, "yyyy") & " " & getattr(O00O1lll1O1)
OlO0OOOOO0l.Show
End If
Exit Sub
catch:
OO1llO01l11 = Err.Number
OO0llO01l11 = Err.Description
If O1OOOO01000 <> "WORKBOOK_OPEN_EVENT" Then
MsgBox Ol10100l000("An error occurred while checking for updates. Please try again \nError Message: {}", OO0llO01l11)
End If
End Sub
Sub Ol0llO01l00(Ol0l1O01l11 As String)
Dim Ol0l1O00l11 As Object
Dim Ol0l1O00O11 As String, Ol0l1OO0O11 As Long, Ol0l1lO0O11 As Long
Dim Ol0l1lO1O11 As Long
Dim Ol1l1lO1O11 As Long
Dim Ol1l1lO1O1l As Long
Dim Ol1lllO1O1l As Long
Dim Ol0lllO1O1l As Long
Dim Ol01llO1O1l As Object
Dim item As Variant
Dim Ol11llO1O1l As String
Dim Ol11llO0O1l As String
Dim Ol11llO0l1l As String
Dim Ol01llO0l1l As String
Dim Ol01l1O0l1l As New Dictionary
Dim Ol01l1O0l1O As Variant
Dim Ol01l1l0l1O As Long
Dim O101l1l0l1O As String
Const Ol0llO01l11 As String = "http://xlworks.net/xlgantt/xlgantt_chk.html"
On Error GoTo catch
Set Ol0l1O00l11 = CreateObject("MSXML2.ServerXMLHTTP.6.0")
Ol0l1lO1O11 = 2 * 1000
Ol1l1lO1O11 = 2 * 1000
Ol1l1lO1O1l = 2 * 1000
Ol1lllO1O1l = 3 * 1000
Ol0l1O00l11.settimeouts Ol0l1lO1O11, Ol1l1lO1O11, Ol1l1lO1O1l, Ol1lllO1O1l
Ol0l1O00l11.Open "GET", Ol0llO01l11, False
Ol0l1O00l11.setRequestHeader "Content-Type", "text/xml"
Ol0l1O00l11.send
If Ol0l1O00l11.readyState = 4 Then
If Ol0l1O00l11.Status = 200 Then
Ol0l1O00O11 = Ol0l1O00l11.responseText
Else
GoTo catch
End If
Else
GoTo catch
End If
Ol0l1OO0O11 = InStr(1, Ol0l1O00O11, "programName", vbTextCompare)
Ol0l1lO0O11 = InStr(Ol0l1OO0O11, Ol0l1O00O11, "}", vbTextCompare)
Ol0l1O00O11 = "{""" & Mid(Ol0l1O00O11, Ol0l1OO0O11, (Ol0l1lO0O11 - Ol0l1OO0O11) + 1)
Ol01l1O0l1O = Split(Ol0l1O00O11, ",")
For Ol0lllO1O1l = 0 To UBound(Ol01l1O0l1O)
Ol01l1O0l1l.Add Replace(Mid(Replace(Replace(Replace(Ol01l1O0l1O(Ol0lllO1O1l), """", ""), "{", ""), "}", ""), 1, InStr(1, Replace(Replace(Replace(Ol01l1O0l1O(Ol0lllO1O1l), """", ""), "{", ""), "}", ""), ":", vbTextCompare)), ":", ""), _
Mid(Replace(Replace(Replace(Ol01l1O0l1O(Ol0lllO1O1l), """", ""), "{", ""), "}", ""), InStr(1, Replace(Replace(Replace(Ol01l1O0l1O(Ol0lllO1O1l), """", ""), "{", ""), "}", ""), ":", vbTextCompare) + 1, 999)
Next Ol0lllO1O1l
If (Ol01l1O0l1l.item("programVersion") <= getattr(version)) Then
If Ol0l1O01l11 <> "WORKBOOK_OPEN_EVENT" Then
MsgBox Ol10100l000("You are using the latest version of XLGantt.\nCurrent Verison : {}", getattr(version))
End If
Else
OlO0OOOOO0l.lblProgramInfo = getattr(O00O1Oll1O1) & " " & getattr(version)
OlO0OOOOO0l.lblProgramInfoLatest.Caption = Ol01l1O0l1l.item("programName") & " " & Ol01l1O0l1l.item("programVersion")
OlO0OOOOO0l.lblReleaseDateLatest.Caption = "Release " & Format(CDate(Ol01l1O0l1l.item("releaseDate")), Ol10100l000("mm/dd/yyyy"))
OlO0OOOOO0l.lblUpdateInfo.Caption = Ol10100l000(Ol01l1O0l1l.item("noticeMessage1"))
OlO0OOOOO0l.lblProgramSite = "|fffd||fffd|" & "2015~" & Format(Date, "yyyy") & " " & getattr(O00O1lll1O1)
OlO0OOOOO0l.Show
End If
Exit Sub
catch:
Ol01l1l0l1O = Err.Number
O101l1l0l1O = Err.Description
If Ol0l1O01l11 <> "WORKBOOK_OPEN_EVENT" Then
MsgBox Ol10100l000("An error occurred while checking for updates. Please try again \nError Message: {}", O101l1l0l1O)
End If
End Sub
Function O101l1l0llO() As jobresult
Dim O111l1l0llO As jobresult
Dim O111l1l0l1O As String
O111l1l0l1O = OO10OlOl0l1()
If Not O111l1l0l1O = "OK" Then
O111l1l0llO.OllO11l1O11 = -1
O111l1l0llO.message = Ol10100l000("The {} sheet does not exist. Please check that you have changed or deleted the sheet.", O111l1l0l1O)
O101l1l0llO = O111l1l0llO
Exit Function
End If
O111l1l0llO = O0lO0OO101l
If O111l1l0llO.OllO11l1O11 <> 0 Then
O101l1l0llO = O111l1l0llO
End If
End Function
Function getattr(ByVal O111l1l0l1l As String, Optional ByVal O111O1l0l1O As Variant, Optional ByVal O111O0l0l1O As Variant) As Variant
Dim O111O0l0l1l As Long
Dim O1l1O0l0l1l As Long
If IsMissing(O111O1l0l1O) Then
getattr = Ol01llOlll0.Worksheets(Ol11llO1Ol0).Range(O111l1l0l1l)
Exit Function
Else
O111O0l0l1l = 1000
With Ol01llOlll0.Worksheets(Ol11llO1Ol0).Range(O111O1l0l1O)
For O1l1O0l0l1l = 0 To O111O0l0l1l
If .Offset(0, O1l1O0l0l1l) = "Name:" & O111l1l0l1l Then
getattr = .Offset(0, O1l1O0l0l1l + 1)
Exit Function
End If
Next O1l1O0l0l1l
End With
End If
End Function
Sub setattr(ByVal O1l1O0l0lll As String, ByVal O1l1OOl0lll As Variant, ByVal O1l1lOl0lll As Variant)
Dim O1l1lll0lll As Long
Dim O1l1lll01ll As Long
O1l1lll0lll = 1000
With Ol01llOlll0.Worksheets(Ol11llO1Ol0).Range(O1l1lOl0lll)
For O1l1lll01ll = 0 To O1l1lll0lll
If .Offset(0, O1l1lll01ll) = "Name:" & O1l1O0l0lll Then
.Offset(0, O1l1lll01ll + 1) = O1l1OOl0lll
Exit Sub
Else
If (O1l1lll01ll Mod 2) = 0 Then
If Trim(.Offset(0, O1l1lll01ll)) = "" Then
Exit For
End If
End If
End If
Next O1l1lll01ll
.Offset(0, O1l1lll01ll) = "Name:" & O1l1O0l0lll
.Offset(0, O1l1lll01ll + 1) = O1l1OOl0lll
End With
End Sub
Sub O1l1lll01l1()
Dim O1l1lOl01l1 As Long
Dim O1l1lOl01O1 As Long
Dim O1l1OOl01O1 As Long
Dim O0l1OOl01O1 As Long
Dim O0l1OOl01l1 As String
setattr O00OlOlO1O0, getattr(O00OlOlO1O0, , "SettingsSheet"), "Comm"
setattr O00OlOll1O0, getattr(O00OlOll1O0, , "SettingsSheet"), "Comm"
setattr O00O1Oll1O0, getattr(O00O1Oll1O0, , "SettingsSheet"), "Comm"
setattr O00O1Oll1O1, getattr(O00O1Oll1O1, , "SettingsSheet"), "Comm"
setattr O00O1lll1O1, getattr(O00O1lll1O1, , "SettingsSheet"), "Comm"
setattr O01O1lll1O1, getattr(O01O1lll1O1, , "SettingsSheet"), "Comm"
setattr version, getattr(version, , "SettingsSheet"), "Comm"
setattr O11O1lll1O1, getattr(O11O1lll1O1, , "SettingsSheet"), "Comm"
setattr O11l1lll1O1, getattr(O11l1lll1O1, , "SettingsSheet"), "Comm"
O0l1OOl01O1 = (Ol01llOlll0.Worksheets(Ol11llO1Ol0).Range("A" & Rows.Count).End(xlUp).Row) - 10
O1l1lOl01l1 = 1000
For O1l1lOl01O1 = 1 To O0l1OOl01O1
With Ol01llOlll0.Worksheets(Ol11llO1Ol0).Range("B" & 10 + O1l1lOl01O1)
O0l1OOl01l1 = "B" & 10 + O1l1lOl01O1
For O1l1OOl01O1 = 0 To O1l1lOl01l1
If .Offset(0, O1l1OOl01O1) Like "Name:*" Then
SaveSetting appName:="XLGantt", section:=O0l1OOl01l1, Key:=Mid(.Offset(0, O1l1OOl01O1), 6, 999), setting:=.Offset(0, O1l1OOl01O1 + 1)
Else
If (O1l1OOl01O1 Mod 2) = 0 Then
If Trim(.Offset(0, O1l1OOl01O1)) = "" Then
Exit For
End If
End If
End If
Next O1l1OOl01O1
End With
Next O1l1lOl01O1
End Sub
Function O0l1Oll01l1(ByVal filename As String, ByVal path As String) As String
Dim O0l1Oll11l1 As Object
Dim O0l1OOl11l1 As Object
Dim O0l1OOl11ll As Object
Set O0l1Oll11l1 = CreateObject("Scripting.FileSystemObject")
Set O0l1OOl11l1 = O0l1Oll11l1.GetFolder(path)
For Each O0l1OOl11ll In O0l1OOl11l1.Files
If O0l1OOl11ll.name Like filename Then
O0l1Oll01l1 = O0l1OOl11ll.name
Exit Function
End If
Next O0l1OOl11ll
End Function
Function O0l1O0l11ll(ByVal filename As String) As Boolean
If Dir(filename) <> "" Then
O0l1O0l11ll = True
Else
O0l1O0l11ll = False
End If
End Function
Function O0l100l11ll(ByVal filename As String) As Boolean
If Right(filename, 1) <> "\" Then
filename = filename & "\"
End If
If Dir(filename, vbDirectory) <> "" Then
O0l100l11ll = True
Else
O0l100l11ll = False
End If
End Function
Function O0l100l11lO() As String
Dim O0l100l111O As FileDialog
Dim O0l100O111O As String
On Error GoTo errhandler
Set O0l100l111O = Application.FileDialog(msoFileDialogFolderPicker)
O0l100l111O.AllowMultiSelect = False
O0l100l111O.Show
O0l100O111O = O0l100l111O.SelectedItems(1)
Set O0l100l111O = Nothing
O0l100l11lO = O0l100O111O
Exit Function
errhandler:
End Function
Function getcalendarrange(O0l000O111O As String) As String
If Trim(O0l000O111O) = "" Then
getcalendarrange = "STD_CAL"
Exit Function
End If
If (Trim(O0l000O111O) = "STD_CAL") Or (Trim(O0l000O111O) = "UD_CAL1") Or (Trim(O0l000O111O) = "UD_CAL2") Then
getcalendarrange = Trim(O0l000O111O)
Exit Function
End If
getcalendarrange = "STD_CAL"
End Function
Function O0l00OO111O() As attr4planratedate
Dim O0lO0OO111O As attr4planratedate
If getattr("optPlanRateCriteriaDate", O11l11ll1O1) = "TODAY" Then
O0lO0OO111O.OllO10O1OO0 = "TODAY()"
O0lO0OO111O.OllO10O1O00 = Ol10100l000("Star(*) marks-required fields, orange columns-automatically calculated")
O0lO0OO111O.Olll10O1O00 = 0
O0lO0OO111O.OllO10l1O00 = 112
O0lO0OO111O.OllO11l1O00 = 192
O0lO0OO111O.OllO11l1O01 = 9
O0lO0OO111O.OlOO11l1O01 = False
Else
O0lO0OO111O.OllO10O1OO0 = "datevalue(""" & getattr("optPlanRateCriteriaDate", O11l11ll1O1) & """)"
O0lO0OO111O.OllO10O1O00 = Ol10100l000("Planned %Work Complete calculation base date") & " : " & getattr("optPlanRateCriteriaDate", O11l11ll1O1)
O0lO0OO111O.Olll10O1O00 = 255
O0lO0OO111O.OllO10l1O00 = 0
O0lO0OO111O.OllO11l1O00 = 0
O0lO0OO111O.OllO11l1O01 = 12
O0lO0OO111O.OlOO11l1O01 = True
End If
O0l00OO111O = O0lO0OO111O
End Function
Sub O0lO0OO101O()
OO101lO0Oll.Show
End Sub
Function O0lO0OO101l() As jobresult
Dim O0lO0OO10ll As jobresult
Dim O0lO0OO1Oll As String
Dim O0lO1OO1Oll As Long
Dim O0OO1OO1Oll As String
On Error GoTo errhandler
With Ol01llOlll0.Worksheets(schedule)
O0lO0OO1Oll = "SCHEDULE_SHEET_POSITION:" & _
.Range("RNG_WBS_LEVEL_COL_NAME").Column & _
.Range("RNG_WBS_COL_NAME").Row + 2 & _
.Range("RNG_WBS_COL_NAME").Column & _
.Range("RNG_TASK_FIRST_COL_NAME").Column & _
.Range("RNG_ETC_COL_NAME").Column & _
.Range("RNG_START_DATE_COL_NAME").Column & _
.Range("RNG_END_DATE_COL_NAME").Column & _
.Range("RNG_CALENDAR_COL_NAME").Column & _
.Range("RNG_TOTAL_WORKLOAD_COL_NAME").Column & _
.Range("RNG_PLAN_WORKLOAD_COL_NAME").Column & _
.Range("RNG_TOTAL_DURATION_COL_NAME").Column & _
.Range("RNG_PLAN_DURATION_COL_NAME").Column & _
.Range("RNG_ACTUAL_START_DATE_COL_NAME").Column & _
.Range("RNG_ACTUAL_END_DATE_COL_NAME").Column & _
.Range("RNG_ACTUAL_TOTAL_WORKLOAD_COL_NAME").Column & _
.Range("RNG_ACTUAL_TOTAL_DURATION_COL_NAME").Column & _
.Range("RNG_RESOURCE_WEIGHT_COL_NAME").Column & _
.Range("RNG_RESOURCE_COL_NAME").Column & _
.Range("RNG_DELIVERABLES_COL_NAME").Column & _
.Range("RNG_PLAN_RATE_COL_NAME").Column & _
.Range("RNG_ACTUAL_RATE_COL_NAME").Column & _
.Range("RNG_GANTT_AREA_FIRST_COL_NAME").Column
If O0lO0OO1Oll = getattr("scheduleSheetPosition", O11l11ll1O1) Then
If OlO1Oll1Ol0 > 0 Then
O0lO0OO10ll.OllO11l1O11 = 0
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
End If
If Ol00lO0ll01("RNG_WBS_LEVEL_COL_NAME") Then
If .Range("RNG_WBS_LEVEL_COL_NAME").Column <> 3 Then
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("You can not add a column between column A and C because the range is reserved by XLGantt.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""WBS Level"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_WBS_COL_NAME") Then
Ol1lOlOlO10 = .Range("RNG_WBS_COL_NAME").Row + 2
If Ol1lOlOlO10 < 5 Then
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("Of the first two rows, at least one has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
OlO1Oll1Ol0 = .Range("RNG_WBS_COL_NAME").Column
OlO1lll1Ol0 = O0ll00l1lll(OlO1Oll1Ol0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""WBS"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If .Range("RNG_TASK_FIRST_COL_NAME").MergeArea.Count / 2 <> 7 Then
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The number of task columns is not 7. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_TASK_FIRST_COL_NAME") Then
OlO1lOl1Ol0 = .Range("RNG_TASK_FIRST_COL_NAME").Column
OlO0lll1Ol0 = O0ll00l1lll(OlO1lOl1Ol0)
OOO0lll1Ol0 = O0ll00l1lll(OlO1lOl1Ol0 + 1)
OlO0lll1OO0 = O0ll00l1lll(OlO1lOl1Ol0 + 2)
OlO1lll1OO0 = O0ll00l1lll(OlO1lOl1Ol0 + 3)
OlO0Oll1OO0 = O0ll00l1lll(OlO1lOl1Ol0 + 4)
OlO00ll1OO0 = O0ll00l1lll(OlO1lOl1Ol0 + 5)
OlO0OlO1OO0 = OlO1lOl1Ol0 + 6
OlO0OlO1OO1 = O0ll00l1lll(OlO0OlO1OO0)
OlO1Oll1Ol1 = OlO1lOl1Ol0 - 1
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Task"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_ETC_COL_NAME") Then
OlO0Oll1OO1 = .Range("RNG_ETC_COL_NAME").Column
OlO0OOl1OO0 = O0ll00l1lll(OlO0Oll1OO1)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Note"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_START_DATE_COL_NAME") Then
Oll0OOl1OO0 = .Range("RNG_START_DATE_COL_NAME").Column
Oll1OOl1OO0 = O0ll00l1lll(Oll0OOl1OO0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Start Date"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_END_DATE_COL_NAME") Then
Oll1lOl1OO0 = .Range("RNG_END_DATE_COL_NAME").Column
OllllOl1OO0 = O0ll00l1lll(Oll1lOl1OO0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Finish Date"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_CALENDAR_COL_NAME") Then
Ollllll1OO0 = .Range("RNG_CALENDAR_COL_NAME").Column
O1lllll1OO0 = O0ll00l1lll(Ollllll1OO0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Calendar"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_TOTAL_WORKLOAD_COL_NAME") Then
O1lOlll1OO0 = .Range("RNG_TOTAL_WORKLOAD_COL_NAME").Column
O0lOlll1OO0 = O0ll00l1lll(O1lOlll1OO0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Total Work"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_PLAN_WORKLOAD_COL_NAME") Then
O0OOlll1OO0 = .Range("RNG_PLAN_WORKLOAD_COL_NAME").Column
O1OOlll1OO0 = O0ll00l1lll(O0OOlll1OO0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Planned Work"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_TOTAL_DURATION_COL_NAME") Then
O1OOllllOO0 = .Range("RNG_TOTAL_DURATION_COL_NAME").Column
O1OOllll0O0 = O0ll00l1lll(O1OOllllOO0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Total Duration"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_PLAN_DURATION_COL_NAME") Then
O1OOllOl0O0 = .Range("RNG_PLAN_DURATION_COL_NAME").Column
O1OOllOl0O1 = O0ll00l1lll(O1OOllOl0O0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Planned Duration"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_ACTUAL_START_DATE_COL_NAME") Then
O1OOllOO0O1 = .Range("RNG_ACTUAL_START_DATE_COL_NAME").Column
O1OlllOO0O1 = O0ll00l1lll(O1OOllOO0O1)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Actual Start Date"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_ACTUAL_END_DATE_COL_NAME") Then
O1OlllOO0l1 = .Range("RNG_ACTUAL_END_DATE_COL_NAME").Column
O1OlllOO011 = O0ll00l1lll(O1OlllOO0l1)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Actual Finish Date"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_ACTUAL_TOTAL_WORKLOAD_COL_NAME") Then
O1O1llOO011 = .Range("RNG_ACTUAL_TOTAL_WORKLOAD_COL_NAME").Column
O1O1llOO010 = O0ll00l1lll(O1O1llOO011)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Actual Total Work"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_ACTUAL_TOTAL_DURATION_COL_NAME") Then
O1O11lOO010 = .Range("RNG_ACTUAL_TOTAL_DURATION_COL_NAME").Column
O1O11lOO0l0 = O0ll00l1lll(O1O11lOO010)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Actual Total Duration"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_RESOURCE_WEIGHT_COL_NAME") Then
O1O1llOO0l0 = .Range("RNG_RESOURCE_WEIGHT_COL_NAME").Column
O1O1lllO0l0 = O0ll00l1lll(O1O1llOO0l0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Weight"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_RESOURCE_COL_NAME") Then
O1l1lllO0l0 = .Range("RNG_RESOURCE_COL_NAME").Column
O0l1lllO0l0 = O0ll00l1lll(O1l1lllO0l0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Resources"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_DELIVERABLES_COL_NAME") Then
O0l11llO0l0 = .Range("RNG_DELIVERABLES_COL_NAME").Column
O0111llO0l0 = O0ll00l1lll(O0l11llO0l0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Deliverables"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_PLAN_RATE_COL_NAME") Then
O0111OlO0l0 = .Range("RNG_PLAN_RATE_COL_NAME").Column
O0111OlO1l0 = O0ll00l1lll(O0111OlO0l0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""Planned %Work Complete"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_ACTUAL_RATE_COL_NAME") Then
O011lOlO1l0 = .Range("RNG_ACTUAL_RATE_COL_NAME").Column
O011lOlO1O0 = O0ll00l1lll(O011lOlO1l0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The ""%Work Complete"" column has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
If Ol00lO0ll01("RNG_GANTT_AREA_FIRST_COL_NAME") Then
O001lOlO1O0 = .Range("RNG_GANTT_AREA_FIRST_COL_NAME").Column
O000lOlO1O0 = O0ll00l1lll(O001lOlO1O0)
OlO1O1l1ll0 = O001lOlO1O0 - 1
Ol01O1l1ll0 = O0ll00l1lll(OlO1O1l1ll0)
Else
O0lO0OO10ll.OllO11l1O11 = -1
O0lO0OO10ll.message = Ol10100l000("The first column of Gantt area has been deleted. Please retry after changing the sheet to its previous state.")
O0lO0OO101l = O0lO0OO10ll
Exit Function
End If
Ol01llOlll0.Worksheets(Ol11llO1Ol0).Range(version).Offset(0, 1).Value = "{""TASK_FIRST_COL"":""" & OlO1lOl1Ol0 & """,""START_ROW"":""" & Ol1lOlOlO10 & """,""WBS_AREA_LAST_COL"":""" & OlO1O1l1ll0 & """}"
O0lO0OO1Oll = "SCHEDULE_SHEET_POSITION:" & _
OlO0Oll1ll0 & _
Ol1lOlOlO10 & _
OlO1Oll1Ol0 & _
OlO1lOl1Ol0 & _
OlO0Oll1OO1 & _
Oll0OOl1OO0 & _
Oll1lOl1OO0 & _
Ollllll1OO0 & _
O1lOlll1OO0 & _
O0OOlll1OO0 & _
O1OOllllOO0 & _
O1OOllOl0O0 & _
O1OOllOO0O1 & _
O1OlllOO0l1 & _
O1O1llOO011 & _
O1O11lOO010 & _
O1O1llOO0l0 & _
O1l1lllO0l0 & _
O0l11llO0l0 & _
O0111OlO0l0 & _
O011lOlO1l0 & _
O001lOlO1O0
setattr "scheduleSheetPosition", O0lO0OO1Oll, O11l11ll1O1
End With
Exit Function
errhandler:
O0lO1OO1Oll = Err.Number
O0OO1OO1Oll = Err.Description
If O0lO1OO1Oll <> 0 Then
O0lO0OO10ll.OllO11l1O11 = O0lO1OO1Oll
O0lO0OO10ll.message = Ol10100l000("An error occurred while checking XLGantt cell formats. Please restart XLGantt.")
O0lO0OO101l = O0lO0OO10ll
End If
End Function
Sub O0lO10O1Oll()
OlO0OOOOl0l.Show
End Sub
Sub O0lO10O1lll()
O01OOllO01l.Show
End Sub
Sub O0lO00O1lll()
Dim O0lO00l1lll As jobresult
O0lO00l1lll = O101l1l0llO
If O0lO00l1lll.OllO11l1O11 <> 0 Then
MsgBox O0lO00l1lll.message
Exit Sub
End If
Ol01llOlll0.Worksheets(Ol11llO1OO0).Select
Range("B5").Select
MsgBox Ol10100l000("Please set project calendars in this sheet.")
End Sub
Function O0ll00l1lll(ByVal O0Ol00l1lll As Long) As String
While (O0Ol00l1lll > 0)
O0Ol00l1lll = O0Ol00l1lll - 1
O0ll00l1lll = Chr(65 + (O0Ol00l1lll Mod 26)) + O0ll00l1lll
O0Ol00l1lll = O0Ol00l1lll \ 26
Wend
End Function
Function O0Ol00l1Oll(argworkbook As Workbook, ByVal argsheet As String) As Long
Dim O0Ol00l1OOl As Long
Dim taskcount As Long
Dim O00l00l1OOl As Long
argworkbook.Sheets(argsheet).Select
If argworkbook.Sheets(argsheet).AutoFilterMode Then
argworkbook.Sheets(argsheet).AutoFilterMode = False
End If
For O00l00l1OOl = 0 To Ol11OlO1O10 - 1
O0Ol00l1OOl = Range(O0ll00l1lll(OlO1lOl1Ol0 + O00l00l1OOl) & Rows.Count).End(xlUp).Row
If O0Ol00l1OOl > taskcount Then
taskcount = O0Ol00l1OOl
End If
Next O00l00l1OOl
If taskcount < Ol1lOlOlO10 Then
taskcount = Ol1lOlOlO10 - 1
End If
O0Ol00l1Oll = taskcount - Ol1lOlOlO10 + 1
End Function
Function O00O00l1OOl(argworkbook As Workbook, ByVal argsheet As String, ByVal argtaskcount As Long) As Long
Dim O00000l1OOl As Long
Dim O000O0l1OOl() As Variant
Dim O000O0l10Ol() As Variant
Dim O100O0l10Ol As Long
Dim O100O0ll0Ol As Long
Dim O100O0Ol0Ol As Long
Dim O101O0Ol0Ol As Date
Dim O111O0Ol0Ol As Date
Dim O111O0Ol1Ol As Double
Dim O011O0Ol0Ol As Double
Dim O011O0Ol0O1 As Integer
argworkbook.Sheets(argsheet).Select
If argworkbook.Sheets(argsheet).AutoFilterMode Then
argworkbook.Sheets(argsheet).AutoFilterMode = False
End If
O011O0Ol0O1 = getattr("resourceDisp", Ol1l11ll1O1)
O111O0Ol1Ol = OlOll010000(Ol01llO00l1, "WidthOfDurationByPixel", CDbl(getattr("txtGanttChartZoomRatio", Ol1l11ll1O1)) / 100)
O011O0Ol0Ol = OlOll010000(1, "WidthOfDurationByPixel", 1)
If getattr("dateDisp", Ol1l11ll1O1) = OO11OlOOl1l Then
O100O0l10Ol = 12
Else
O100O0l10Ol = 0
End If
O101O0Ol0Ol = Date + Ol1lOlOll10
O111O0Ol0Ol = Date - Ol1lOlOll10
O000O0l1OOl = Range(OlO1Oll1ll0 & Ol1lOlOlO10 & ":" & Ol01O1l1ll0 & argtaskcount + Ol1lOlOlO10 - 1)
O000O0l10Ol = Range(Cells(Ol1lOlOlO10, Oll1lOl1OO0), Cells(argtaskcount + Ol1lOlOlO10 - 1, Oll1lOl1OO0 + 1))
For O00000l1OOl = 1 To UBound(O000O0l1OOl, 1)
If O000O0l1OOl(O00000l1OOl, OlO0Oll1ll0) <> 0 Then
If O000O0l1OOl(O00000l1OOl, Oll0OOl1OO0) > "" Then
If Ol01llO0Ol0 = 0 Then
O100O0Ol0Ol = (Len(O000O0l1OOl(O00000l1OOl, O000O0l1OOl(O00000l1OOl, OlO0Oll1ll0) + OlO1Oll1Ol1))) - (O000O0l1OOl(O00000l1OOl, Oll0OOl1OO0) - Ol11llO0lO0)
If O011O0Ol0O1 = OO11OlOOl1l Then
O100O0Ol0Ol = O100O0Ol0Ol + Len(O000O0l1OOl(O00000l1OOl, O1l1lllO0l0))
End If
Else
O100O0Ol0Ol = (LenB(O000O0l1OOl(O00000l1OOl, O000O0l1OOl(O00000l1OOl, OlO0Oll1ll0) + OlO1Oll1Ol1))) - (O000O0l1OOl(O00000l1OOl, Oll0OOl1OO0) - Ol11llO0lO0)
If O011O0Ol0O1 = OO11OlOOl1l Then
O100O0Ol0Ol = O100O0Ol0Ol + LenB(O000O0l1OOl(O00000l1OOl, O1l1lllO0l0))
End If
End If
If O100O0ll0Ol < O100O0Ol0Ol Then
O100O0ll0Ol = O100O0Ol0Ol
End If
If O101O0Ol0Ol > CDate(O000O0l1OOl(O00000l1OOl, Oll0OOl1OO0)) Then
O101O0Ol0Ol = CDate(O000O0l1OOl(O00000l1OOl, Oll0OOl1OO0))
End If
If IsDate(O000O0l10Ol(O00000l1OOl, 1)) Then
If O111O0Ol0Ol < CDate(O000O0l10Ol(O00000l1OOl, 1)) Then
O111O0Ol0Ol = CDate(O000O0l10Ol(O00000l1OOl, 1))
End If
End If
End If
End If
Next O00000l1OOl
If (O111O0Ol0Ol - O101O0Ol0Ol + 1) > 16384 - O001lOlO1O0 - 1 Then
Err.Raise Number:=vbObjectError + 100, Source:="getDistance2DisplayTask Function", Description:=Ol10100l000("[6]Project duration is too long. The earliest start date is {1} and the latest finish date is {2}, so the project duration is {3} days. The maximum number of days allowed in XLGantt is {4} days. Reduce the project duration to within the limits allowed by XLGantt.", O101O0Ol0Ol, O111O0Ol0Ol, (O111O0Ol0Ol - O101O0Ol0Ol + 1), (16384 - O001lOlO1O0 - 1))
End If
If getattr("taskNameDisplayPosition", Ol1l11ll1O1) = OO11OlOOl1O Then
O00O00l1OOl = ((O100O0ll0Ol + O100O0l10Ol) * 1) * (O011O0Ol0Ol / (O111O0Ol1Ol / Ol01llO00l1))
Else
If O101O0Ol0Ol < CDate(getattr("projectStartDate", O11l11ll1O1)) Then
O00O00l1OOl = CDate(getattr("projectStartDate", O11l11ll1O1)) - O101O0Ol0Ol
Else
O00O00l1OOl = 0
End If
End If
Erase O000O0l1OOl
Erase O000O0l10Ol
End Function
Sub O011O0Ol0l1(argworkbook As Workbook, ByVal argsheet As String, ByVal argtaskcount As Long)
Dim O011O00l0l1 As Date
Dim O011O01l0l1 As Date
Dim O011O01l0ll() As Variant
Dim O010O01l0ll() As Variant
Dim O010O01l0Ol() As Variant
Dim OO10O01l0Ol() As Variant
Dim OO10O01l0ll() As Variant
Dim OO10O00l0ll As Long
On Error GoTo errhandler
If getattr("setTaskDateToProjectDate", O11l11ll1O1) = Ol11OlOOl1l Then
Exit Sub
End If
O011O00l0l1 = Date + Ol1lOlOll10
O011O01l0l1 = Date - Ol1lOlOll10
With argworkbook.Sheets(argsheet)
If .AutoFilterMode Then
.AutoFilterMode = False
End If
.Range(OlO0Oll1Ol0 & Ol1lOlOlO10 & ":" & OlO0Oll1Ol0 & argtaskcount + Ol1lOlOlO10 - 1).Formula = _
"=IF(NOT(" & OlO0lll1Ol0 & Ol1lOlOlO10 & "=""""),1,IF(NOT(" & OOO0lll1Ol0 & Ol1lOlOlO10 & "=""""),2,IF(NOT(" & OlO0lll1OO0 & Ol1lOlOlO10 & "=""""),3,IF(NOT(" & OlO1lll1OO0 & Ol1lOlOlO10 & "=""""),4,IF(NOT(" & OlO0Oll1OO0 & Ol1lOlOlO10 & "=""""),5,IF(NOT(" & OlO00ll1OO0 & Ol1lOlOlO10 & "=""""),6,IF(NOT(" & OlO0OlO1OO1 & Ol1lOlOlO10 & "=""""),7,0)))))))"
O011O01l0ll = Range(.Cells(Ol1lOlOlO10, OlO0Oll1ll0), .Cells(argtaskcount + Ol1lOlOlO10 - 1, OlO0Oll1ll0 + 1))
O010O01l0ll = Range(.Cells(Ol1lOlOlO10, Oll0OOl1OO0), .Cells(argtaskcount + Ol1lOlOlO10 - 1, Oll0OOl1OO0 + 1))
O010O01l0Ol = Range(.Cells(Ol1lOlOlO10, O1OOllOO0O1), .Cells(argtaskcount + Ol1lOlOlO10 - 1, O1OOllOO0O1 + 1))
OO10O01l0Ol = Range(.Cells(Ol1lOlOlO10, Oll1lOl1OO0), .Cells(argtaskcount + Ol1lOlOlO10 - 1, Oll1lOl1OO0 + 1))
OO10O01l0ll = Range(.Cells(Ol1lOlOlO10, O1OlllOO0l1), .Cells(argtaskcount + Ol1lOlOlO10 - 1, O1OlllOO0l1 + 1))
For OO10O00l0ll = 1 To UBound(O011O01l0ll, 1)
If O011O01l0ll(OO10O00l0ll, 1) <> 0 Then
If O010O01l0ll(OO10O00l0ll, 1) > "" Then
If O011O00l0l1 > O010O01l0ll(OO10O00l0ll, 1) Then
O011O00l0l1 = O010O01l0ll(OO10O00l0ll, 1)
End If
End If
If OO10O01l0Ol(OO10O00l0ll, 1) > "" Then
If O011O01l0l1 < OO10O01l0Ol(OO10O00l0ll, 1) Then
O011O01l0l1 = OO10O01l0Ol(OO10O00l0ll, 1)
End If
End If
If Ol01llO0ll0 = OO11OlOOl1l Then
If O010O01l0Ol(OO10O00l0ll, 1) > "" Then
If O011O00l0l1 > O010O01l0Ol(OO10O00l0ll, 1) Then
O011O00l0l1 = O010O01l0Ol(OO10O00l0ll, 1)
End If
End If
If OO10O01l0ll(OO10O00l0ll, 1) > "" Then
If O011O01l0l1 < OO10O01l0ll(OO10O00l0ll, 1) Then
O011O01l0l1 = OO10O01l0ll(OO10O00l0ll, 1)
End If
End If
End If
End If
Next OO10O00l0ll
Erase O011O01l0ll
Erase O010O01l0ll
Erase O010O01l0Ol
Erase OO10O01l0Ol
Erase OO10O01l0ll
If IsDate(CDate(O011O00l0l1)) Then
If IsDate(CDate(O011O01l0l1)) Then
If O011O00l0l1 <= O011O01l0l1 Then
If (O011O01l0l1 - O011O00l0l1 + 1) > 16384 - O001lOlO1O0 - 1 Then
MsgBox Ol10100l000("[6]Project duration is too long. The earliest start date is {1} and the latest finish date is {2}, so the project duration is {3} days. The maximum number of days allowed in XLGantt is {4} days. Reduce the project duration to within the limits allowed by XLGantt.", O011O00l0l1, O011O01l0l1, (O011O01l0l1 - O011O00l0l1 + 1), (16384 - O001lOlO1O0 - 1))
Exit Sub
End If
setattr "projectStartDate", O011O00l0l1, O11l11ll1O1
setattr "projectEndDate", O011O01l0l1, O11l11ll1O1
Ol11llO0lO0 = O011O00l0l1
Ol01llO0lO0 = O011O01l0l1
Ol1l01llOOl taskcount:=argtaskcount
End If
End If
End If
End With
normalend:
Exit Sub
errhandler:
On Error GoTo 0
Resume normalend
End Sub
Function OO10O00l0l1(OO10O0Ol0l1 As String, Optional OO10OOOl0l1 As Workbook) As Boolean
Dim OO100OOl0l1 As Worksheet
If OO10OOOl0l1 Is Nothing Then Set OO10OOOl0l1 = Ol01llOlll0
On Error Resume Next
Set OO100OOl0l1 = OO10OOOl0l1.Sheets(OO10O0Ol0l1)
On Error GoTo 0
OO10O00l0l1 = Not OO100OOl0l1 Is Nothing
End Function
Function OO10OlOl0l1() As String
Dim OO10OOOlOl1 As Worksheet
Dim Ol10OOOlOl1 As Integer
Dim Ol10OOOlll1 As Integer
Dim Ol10OOOllO1 As Integer
Dim Ol10OOOll01 As Integer
Dim Ol00OOOll01 As Integer
Dim Ol00OO0ll01 As String
For Each OO10OOOlOl1 In Ol01llOlll0.Worksheets
If OO10OOOlOl1.name = schedule Then
Ol10OOOlOl1 = 1
End If
If OO10OOOlOl1.name = Ol11llO1O10 Then
Ol10OOOlll1 = 1
End If
If OO10OOOlOl1.name = Ol11llO1O00 Then
Ol10OOOllO1 = 1
End If
If OO10OOOlOl1.name = Ol11llO1OO0 Then
Ol10OOOll01 = 1
End If
If OO10OOOlOl1.name = Ol11llO1Ol0 Then
Ol00OOOll01 = 1
End If
Next OO10OOOlOl1
If (Ol10OOOlOl1 + Ol10OOOlll1 + Ol10OOOllO1 + Ol10OOOll01 + Ol00OOOll01) = 5 Then
OO10OlOl0l1 = "OK"
Else
If Ol10OOOlOl1 = 0 Then
Ol00OO0ll01 = Ol00OO0ll01 & schedule & ","
End If
If Ol10OOOlll1 = 0 Then
Ol00OO0ll01 = Ol00OO0ll01 & Ol11llO1O10 & ","
End If
If Ol10OOOllO1 = 0 Then
Ol00OO0ll01 = Ol00OO0ll01 & Ol11llO1O00 & ","
End If
If Ol10OOOll01 = 0 Then
Ol00OO0ll01 = Ol00OO0ll01 & Ol11llO1OO0 & ","
End If
If Ol00OOOll01 = 0 Then
Ol00OO0ll01 = Ol00OO0ll01 & Ol11llO1Ol0 & ","
End If
OO10OlOl0l1 = Mid(Ol00OO0ll01, 1, Len(Ol00OO0ll01) - 1)
End If
End Function
Function Ol00lO0ll01(ByVal OlO0lO0ll01 As String) As Boolean
Dim OlOOlO0ll01 As Range
On Error Resume Next
Set OlOOlO0ll01 = Range(OlO0lO0ll01)
On Error GoTo 0
If OlOOlO0ll01 Is Nothing Then
Ol00lO0ll01 = False
Else
Ol00lO0ll01 = True
End If
End Function
Sub OlOOlO0ll00()
Dim str As String
str = getattr(O00O1lll1O1)
On Error GoTo errhandler
ThisWorkbook.FollowHyperlink Address:=str, NewWindow:=True
Exit Sub
errhandler:
MsgBox "Please visit " & str & " to download the XLGantt.", vbInformation
End Sub
Sub OlOOOO0ll00(ByVal OlOOOO0ll01 As String)
Dim OlOOOl0ll01 As Range
For Each OlOOOl0ll01 In Range(OlOOOO0ll01).Areas
With OlOOOl0ll01
.Value = .Value
End With
Next OlOOOl0ll01
End Sub
Sub OlOOOl0ll11(ByRef OlOOOl1ll11 As Range)
With OlOOOl1ll11
.WrapText = False
With .Font
.name = "Calibri"
.Size = 16
.Color = -4165632
.TintAndShade = 0
.ThemeFont = xlThemeFontNone
.Bold = True
End With
.VerticalAlignment = xlCenter
With .Interior
.Pattern = xlNone
.TintAndShade = 0
.PatternTintAndShade = 0
End With
End With
Rows("1:1").RowHeight = 37
End Sub
Sub OlOO0l1ll11(ByRef OlOO0l0ll11 As Range)
With OlOO0l0ll11
With .Interior
.Pattern = xlSolid
.PatternColorIndex = xlAutomatic
.Color = 15395562
.TintAndShade = 0
.PatternTintAndShade = 0
End With
.HorizontalAlignment = xlLeft
.WrapText = False
.Orientation = 0
.AddIndent = False
.IndentLevel = 0
.ShrinkToFit = False
.ReadingOrder = xlContext
With .Font
.ColorIndex = xlAutomatic
.TintAndShade = 0
End With
.Borders(xlDiagonalDown).LineStyle = xlNone
.Borders(xlDiagonalUp).LineStyle = xlNone
.Borders(xlEdgeLeft).LineStyle = xlNone
.Borders(xlEdgeTop).LineStyle = xlNone
.Borders(xlEdgeBottom).LineStyle = xlNone
.Borders(xlEdgeRight).LineStyle = xlNone
With .Borders(xlInsideVertical)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = 0
.Weight = xlThin
End With
.Borders(xlInsideHorizontal).LineStyle = xlNone
.WrapText = True
End With
End Sub
Sub OllO0l0ll11(ByRef OllO0l1ll11 As Range)
With OllO0l1ll11
.Borders(xlDiagonalDown).LineStyle = xlNone
.Borders(xlDiagonalUp).LineStyle = xlNone
.Borders(xlEdgeLeft).LineStyle = xlNone
.Borders(xlEdgeTop).LineStyle = xlNone
With .Borders(xlEdgeBottom)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.14996795556505
.Weight = xlThin
End With
.Borders(xlEdgeRight).LineStyle = xlNone
.Borders(xlInsideVertical).LineStyle = xlNone
With .Borders(xlInsideHorizontal)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.14996795556505
.Weight = xlThin
End With
End With
End Sub
Sub OOlO0l1ll11( _
Optional ByRef argnumberrange1 As Variant, _
Optional ByVal argnumberformat1 As String, _
Optional ByRef argnumberrange2 As Variant, _
Optional ByVal argnumberformat2 As String, _
Optional ByRef arghorizontalalignrange1 As Variant, _
Optional ByVal arghorizontalaligndirection1 As Long, _
Optional ByRef arghorizontalalignrange2 As Variant, _
Optional ByVal arghorizontalaligndirection2 As Long, _
Optional ByRef OOlO0O1ll11 As Variant, _
Optional ByVal OOlO0O1ll10 As Long, _
Optional ByRef argfontrange As Variant, _
Optional ByVal argfontname As String, _
Optional ByRef arglinerange As Variant)
If Not IsMissing(argnumberrange1) Then
With argnumberrange1
.NumberFormatLocal = argnumberformat1
End With
End If
If Not IsMissing(argnumberrange2) Then
With argnumberrange2
.NumberFormatLocal = argnumberformat2
End With
End If
If Not IsMissing(arghorizontalalignrange1) Then
With arghorizontalalignrange1
.HorizontalAlignment = arghorizontalaligndirection1
End With
End If
If Not IsMissing(arghorizontalalignrange2) Then
With arghorizontalalignrange2
.HorizontalAlignment = arghorizontalaligndirection2
End With
End If
If Not IsMissing(OOlO0O1ll11) Then
With OOlO0O1ll11
.HorizontalAlignment = OOlO0O1ll10
End With
End If
If Not IsMissing(argfontrange) Then
With argfontrange
.Font.name = argfontname
End With
End If
If Not IsMissing(arglinerange) Then
With arglinerange
.Borders(xlDiagonalDown).LineStyle = xlNone
.Borders(xlDiagonalUp).LineStyle = xlNone
.Borders(xlEdgeLeft).LineStyle = xlNone
.Borders(xlEdgeTop).LineStyle = xlNone
With .Borders(xlEdgeBottom)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.14996795556505
.Weight = xlThin
End With
.Borders(xlEdgeRight).LineStyle = xlNone
.Borders(xlInsideVertical).LineStyle = xlNone
With .Borders(xlInsideHorizontal)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.14996795556505
.Weight = xlThin
End With
End With
End If
End Sub
Sub OOlO1O1ll10(ByVal sheetname As String)
On Error Resume Next
Ol01llOlll0.Worksheets(sheetname).ChartObjects.Delete
Ol01llOlll0.Worksheets(sheetname).Cells.Delete shift:=xlUp
With Ol01llOlll0.Worksheets(sheetname).Cells
.Font.name = "Calibri"
.Borders(xlDiagonalDown).LineStyle = xlNone
.Borders(xlDiagonalUp).LineStyle = xlNone
.Borders(xlEdgeLeft).LineStyle = xlNone
.Borders(xlEdgeTop).LineStyle = xlNone
.Borders(xlEdgeBottom).LineStyle = xlNone
.Borders(xlEdgeRight).LineStyle = xlNone
.Borders(xlInsideVertical).LineStyle = xlNone
.Borders(xlInsideHorizontal).LineStyle = xlNone
End With
End Sub

Attribute VB_Name = "OO1Ol0lll0l"
Attribute VB_Base = "0{C22E2528-13A2-4CEB-84C0-B480C89A530D}{8151279F-58CE-4EF6-A809-39F568167D6E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub imgmonthdown_click()
Dim OO1Ol0lOl0l As Date
OO1Ol0lOl0l = DateAdd("m", 1, DateSerial(Mid(Me.lblSelectedYearMonth.Tag, 1, 4), Mid(Me.lblSelectedYearMonth.Tag, 6, 2), 1))
Call Oll0lOlOl1l(DatePart("yyyy", OO1Ol0lOl0l), DatePart("m", OO1Ol0lOl0l))
End Sub
Private Sub imgmonthdown_dblclick(ByVal cancel As MSForms.ReturnBoolean)
Dim OO1OlOlOl0l As Date
OO1OlOlOl0l = DateAdd("m", 1, DateSerial(Mid(Me.lblSelectedYearMonth.Tag, 1, 4), Mid(Me.lblSelectedYearMonth.Tag, 6, 2), 1))
Call Oll0lOlOl1l(DatePart("yyyy", OO1OlOlOl0l), DatePart("m", OO1OlOlOl0l))
End Sub
Private Sub imgmonthup_click()
Dim OO1OlOlOl1l As Date
OO1OlOlOl1l = DateAdd("m", -1, DateSerial(Mid(Me.lblSelectedYearMonth.Tag, 1, 4), Mid(Me.lblSelectedYearMonth.Tag, 6, 2), 1))
Call Oll0lOlOl1l(DatePart("yyyy", OO1OlOlOl1l), DatePart("m", OO1OlOlOl1l))
End Sub
Private Sub imgmonthup_dblclick(ByVal cancel As MSForms.ReturnBoolean)
Dim OO1OlOlOO1l As Date
OO1OlOlOO1l = DateAdd("m", -1, DateSerial(Mid(Me.lblSelectedYearMonth.Tag, 1, 4), Mid(Me.lblSelectedYearMonth.Tag, 6, 2), 1))
Call Oll0lOlOl1l(DatePart("yyyy", OO1OlOlOO1l), DatePart("m", OO1OlOlOO1l))
End Sub
Private Sub lblgotoday_click()
Call Oll0lOlOl1l(DatePart("yyyy", Date), DatePart("m", Date))
End Sub
Private Sub userform_initialize()
Dim OOlOlOlOO1l As String
Dim OllOlOlOO1l As String
Dim OllOlOlOl1l As String
Ol11l1OlOl0 Me
Me.Caption = Ol10100l000(Me.Caption)
If IsDate(ActiveCell.Value) Then
OOlOlOlOO1l = Year(ActiveCell.Value)
OllOlOlOO1l = Month(ActiveCell.Value)
OllOlOlOl1l = Day(ActiveCell.Value)
Else
OOlOlOlOO1l = Year(Date)
OllOlOlOO1l = Month(Date)
OllOlOlOl1l = Day(Date)
End If
Call Oll0lOlOl1l(OOlOlOlOO1l, OllOlOlOO1l, OllOlOlOl1l)
End Sub
Private Sub Oll0lOlOl1l(Oll0lOlOl1O As String, OlO0lOlOl1O As String, Optional argdate As Variant)
Dim OlO0OOlOl1O As Long
Dim OlO0OOlOO1O As Long
Dim OlO1OOlOO1O As Long
Dim Ol01OOlOO1O As Long
Dim Ol00OOlOO1O As Long
Dim Ol00OOOOO1O As Long
Dim OlO0OOOOO1O As Long
Dim OlO0OOOOO0O As Long
Dim O1O0OOOOO0O As Date
Dim O1O0OOOOO0l As Date
O1O0OOOOO0O = DateSerial(Oll0lOlOl1O, OlO0lOlOl1O, 1)
OlO0OOOOO0O = DatePart("d", Date)
Ol01OOlOO1O = Weekday(DateSerial(Year(O1O0OOOOO0O), Month(O1O0OOOOO0O), 1), vbSunday) - 1
Ol00OOlOO1O = Weekday(DateSerial(Year(O1O0OOOOO0O), Month(O1O0OOOOO0O) + 1, 0), vbSunday)
OlO0OOOOO1O = DatePart("d", DateSerial(Year(O1O0OOOOO0O), Month(O1O0OOOOO0O) + 1, 0))
Ol00OOOOO1O = DatePart("d", DateSerial(Year(O1O0OOOOO0O), Month(O1O0OOOOO0O), 0))
Me.lblSelectedYearMonth.Caption = Format(O1O0OOOOO0O, Ol10100l000("mmmm yyyy"))
Me.lblSelectedYearMonth.Tag = Format(O1O0OOOOO0O, "yyyy-mm-dd")
For OlO0OOlOl1O = Ol01OOlOO1O To 1 Step -1
O1O0OOOOO0l = DateSerial(Year(O1O0OOOOO0O), Month(O1O0OOOOO0O) - 1, Ol00OOOOO1O - (Ol01OOlOO1O - OlO0OOlOl1O))
Controls("lblD" & CStr(OlO0OOlOl1O)).Caption = DatePart("d", O1O0OOOOO0l)
Controls("lblD" & CStr(OlO0OOlOl1O)).Tag = Format(O1O0OOOOO0l, "yyyy-mm-dd")
Controls("lblD" & CStr(OlO0OOlOl1O)).ForeColor = RGB(150, 150, 150)
Controls("lblD" & CStr(OlO0OOlOl1O)).BackColor = RGB(255, 255, 255)
Controls("lblD" & CStr(OlO0OOlOl1O)).BorderColor = RGB(255, 255, 255)
Next OlO0OOlOl1O
For OlO0OOlOO1O = 1 To OlO0OOOOO1O
O1O0OOOOO0l = DateSerial(Year(O1O0OOOOO0O), Month(O1O0OOOOO0O), OlO0OOlOO1O)
Controls("lblD" & CStr(OlO0OOlOO1O + Ol01OOlOO1O)).Caption = OlO0OOlOO1O
Controls("lblD" & CStr(OlO0OOlOO1O + Ol01OOlOO1O)).Tag = Format(O1O0OOOOO0l, "yyyy-mm-dd")
If Weekday(O1O0OOOOO0l, vbSunday) = 1 Then
Controls("lblD" & CStr(OlO0OOlOO1O + Ol01OOlOO1O)).ForeColor = RGB(255, 0, 0)
ElseIf Weekday(O1O0OOOOO0l, vbSunday) = 7 Then
Controls("lblD" & CStr(OlO0OOlOO1O + Ol01OOlOO1O)).ForeColor = RGB(51, 102, 255)
Else
Controls("lblD" & CStr(OlO0OOlOO1O + Ol01OOlOO1O)).ForeColor = RGB(0, 0, 0)
End If
Controls("lblD" & CStr(OlO0OOlOO1O + Ol01OOlOO1O)).BackColor = RGB(255, 255, 255)
Controls("lblD" & CStr(OlO0OOlOO1O + Ol01OOlOO1O)).BorderColor = RGB(255, 255, 255)
Next OlO0OOlOO1O
For OlO1OOlOO1O = 1 To (42 - (OlO0OOlOO1O + Ol01OOlOO1O)) + 1
O1O0OOOOO0l = DateSerial(Year(O1O0OOOOO0O), Month(O1O0OOOOO0O) + 1, OlO1OOlOO1O)
Controls("lblD" & CStr(OlO0OOlOO1O + Ol01OOlOO1O + OlO1OOlOO1O - 1)).Caption = OlO1OOlOO1O
Controls("lblD" & CStr(OlO0OOlOO1O + Ol01OOlOO1O + OlO1OOlOO1O - 1)).Tag = Format(O1O0OOOOO0l, "yyyy-mm-dd")
Controls("lblD" & CStr(OlO0OOlOO1O + Ol01OOlOO1O + OlO1OOlOO1O - 1)).ForeColor = RGB(150, 150, 150)
Controls("lblD" & CStr(OlO0OOlOO1O + Ol01OOlOO1O + OlO1OOlOO1O - 1)).BackColor = RGB(255, 255, 255)
Controls("lblD" & CStr(OlO0OOlOO1O + Ol01OOlOO1O + OlO1OOlOO1O - 1)).BorderColor = RGB(255, 255, 255)
Next OlO1OOlOO1O
If Not IsMissing(argdate) Then
Controls("lblD" & CStr(argdate + Ol01OOlOO1O)).ForeColor = RGB(0, 0, 0)
Controls("lblD" & CStr(argdate + Ol01OOlOO1O)).BackColor = RGB(255, 255, 255)
Controls("lblD" & CStr(argdate + Ol01OOlOO1O)).BorderColor = RGB(255, 0, 0)
End If
If Format(Date, "yyyymm") = Format(O1O0OOOOO0O, "yyyymm") Then
Controls("lblD" & CStr(OlO0OOOOO0O + Ol01OOlOO1O)).ForeColor = RGB(255, 255, 255)
Controls("lblD" & CStr(OlO0OOOOO0O + Ol01OOlOO1O)).BackColor = RGB(255, 0, 0)
End If
End Sub
Attribute VB_Name = "OOlO1l1ll10"
Option Explicit
Option Private Module
Sub OOlO1l1ll00(Optional ByRef argjobresultcode As Long, Optional ByRef argjobresultmsg As String)
Dim OOlO1l1llO0 As Long
Dim taskcount As Long
Dim OOlO1O1llO0 As Long
Dim OOlO1O1l1O0 As Long
Dim OllO1O1l1O0 As Long
Dim OllO1O1l0O0 As Long
Dim OOlO1O1l0O0 As Long
Dim OOlO1O1O0O0 As Long
Dim OOlO1l1O0O0 As Long
Dim OOlO1O1O0O1 As Long
Dim OO1O1O1O0O0 As String
Dim OO1O1O0O0O0 As String
Dim OO1O1O0O0O1 As String
Dim OO1O1O0O1O1 As String
Dim OO1O1O0l1O1(10) As O1lO11Ol1O1
Dim OO1O1O0O0l1(10) As Long
Dim Ol1O1O0O0l1 As String
Dim Ol1O1O0O0l0 As Double
Dim Ol1O1O0O0O0 As Double
Dim Ol1O1l0O0O0 As Long
Dim Ol1O0l0O0O0 As Range, OO1O0l0O0O0 As Range
Dim arr() As Variant
Dim OO1O0l0O0l0() As Variant
Dim OO1O0O0O0l0 As Range
Dim OO1O0O0O0O0 As Long
Dim OO1O1O0l0O0 As String
Dim OO1O1O0l0l0 As String
Dim OO1O1OOl0l0 As Integer
Dim OO1O0OOl0l0 As Integer
Dim OO1O1OOl010 As Integer
Dim OO1O1O0l010 As Integer
Dim OO1O0O0l010 As Integer
Dim Ol1O0O0l010 As Integer
Dim Ol1O0O01010 As Range
Dim Ol1O0001010 As attr4planratedate
Dim Ol1O0001000 As String
Dim Ol1O00010O0 As Integer
Dim Ol1l00010O0 As Integer
Dim Ol1l00011O0 As Long
Dim O11l00011O0 As jobresult
Dim O11lO0011O0 As String
Dim O1llO0011O0 As Date
Dim O1llO0011O1 As Date
Dim O0llO0011O1 As Variant
Dim O0llO0O11O1 As Variant
Dim O0llO0O01O1 As Long
On Error GoTo catch
O11l00011O0 = O101l1l0llO
If O11l00011O0.OllO11l1O11 <> 0 Then
MsgBox O11l00011O0.message
argjobresultmsg = O11l00011O0.message
GoTo cleanuponerror
End If
Workbooks(Ol01llO1ll0).Worksheets(schedule).Select
With Workbooks(Ol01llO1ll0).Worksheets(schedule)
If .AutoFilterMode Then
MsgBox Ol10100l000("After turning off filtering, we'll proceed.")
.AutoFilterMode = False
End If
.Cells.ClearOutline
O0llO0O01O1 = 1
OO1O1OOl0l0 = getattr("taskDisp", Ol1l11ll1O1)
OO1O0OOl0l0 = getattr("dateDisp", Ol1l11ll1O1)
OO1O1OOl010 = getattr("actualRateDisp", Ol1l11ll1O1)
OO1O1O0l010 = getattr("plannedRateDisp", Ol1l11ll1O1)
OO1O0O0l010 = getattr("resourceDisp", Ol1l11ll1O1)
Ol1O0O0l010 = CInt(getattr("taskNameDisplayPosition", Ol1l11ll1O1))
Ol11llO0lO0 = CDate(getattr("projectStartDate", O11l11ll1O1))
Ol01llO0lO0 = CDate(getattr("projectEndDate", O11l11ll1O1))
Ol01llO0ll0 = getattr("optScheduleChangeMgt", O11l11ll1O1)
Ol01llO00l1 = CInt(getattr("optGanttChartColumnDisplay", Ol1l11ll1O1))
Ol01llOO0l1 = OlOll010000(Ol01llO00l1, "SpaceCountBeforeText", CDbl(getattr("txtGanttChartZoomRatio", Ol1l11ll1O1)) / 100)
Ol01llO0Ol1 = OlOll010000(Ol01llO00l1, "ColumnCountOf100PercentText", CDbl(getattr("txtGanttChartZoomRatio", Ol1l11ll1O1)) / 100)
If OO1O1O0l010 = OO11OlOOl1l Then
Ol01llO0Ol1 = Ol01llO0Ol1 * 2
End If
If getattr("completeTaskGrayDisplay", Ol1l11ll1O1) <> OO11OlOOl1l Then
Ol1O00010O0 = Ol1O00010O0 - 1
End If
If Ol01llO0ll0 <> OO11OlOOl1l Then
Ol1O00010O0 = Ol1O00010O0 - 1
End If
If Ol01llO00l1 <> 1 Then
Ol1O00010O0 = Ol1O00010O0 - 1
Ol1l00010O0 = Ol1l00010O0 - 1
End If
If Not Ol1l00Ollll(OO1O1O0l0l0, Ol11llO0lO0, Ol01llO0lO0) Then
MsgBox OO1O1O0l0l0
argjobresultmsg = OO1O1O0l0l0
GoTo cleanuponerror
End If
For OOlO1O1l1O0 = 0 To 9
OO1O1O0l1O1(OOlO1O1l1O0).OO0l11Ol1O1 = Date + Ol1lOlOll10
OO1O1O0l1O1(OOlO1O1l1O0).OOOl11Ol1O1 = Date - Ol1lOlOll10
OO1O1O0l1O1(OOlO1O1l1O0).O0Ol01Ol1O1 = Date + Ol1lOlOll10
OO1O1O0l1O1(OOlO1O1l1O0).O0Ol01OO1O1 = Date - Ol1lOlOll10
Next OOlO1O1l1O0
OOlO1l1llO0 = (.Range(Oll1OOl1OO0 & Rows.Count).End(xlUp).Row) - Ol1lOlOlO10 + 1
taskcount = O0Ol00l1Oll(argworkbook:=Ol01llOlll0, argsheet:=schedule)
If taskcount < OOlO1l1llO0 Then
taskcount = OOlO1l1llO0
End If
O011O0Ol0l1 argworkbook:=Ol01llOlll0, argsheet:=schedule, argtaskcount:=taskcount
If OOlO1l1llO0 > 0 Then
Ol1l00011O0 = Ol11llO0lO0 - .Range(O000lOlO1O0 & Ol1lOlOlO10 - 1).Value
End If
OOlO1O1llO0 = Ol01llO0lO0 - Ol11llO0lO0 + 1
OOlO1O1llO0 = OOlO1O1llO0 + Ol1l00011O0
OOl0Ol0l001 Workbooks(Ol01llO1ll0), schedule, .Range(O000lOlO1O0 & Ol1lOlOlO10 & ":" & O0ll00l1lll(O001lOlO1O0 + OOlO1O1llO0) & Ol1lOlOlO10 + OOlO1l1llO0 - 1)
If OOlO1l1llO0 < 1 Then
argjobresultmsg = Ol10100l000("There is no input data that will be calculated.")
GoTo cleanuponerror
End If
OO1O0O0O0O0 = taskcount
If taskcount < 1 Then
O11lO0011O0 = Ol10100l000("There is no input data.")
MsgBox O11lO0011O0
argjobresultmsg = O11lO0011O0
GoTo cleanuponerror
End If
O10010OO11l taskcount, OOlO1O1llO0
.Calculate
OlOOOO0ll00 OlO0Oll1Ol0 & Ol1lOlOlO10 & ":" & OlO0Oll1Ol0 & taskcount + Ol1lOlOlO10 - 1 & "," & _
O0lOlll1OO0 & Ol1lOlOlO10 & ":" & O0lOlll1OO0 & taskcount + Ol1lOlOlO10 - 1 & "," & _
O1OOlll1OO0 & Ol1lOlOlO10 & ":" & O1OOlll1OO0 & taskcount + Ol1lOlOlO10 - 1 & "," & _
O1O1llOO010 & Ol1lOlOlO10 & ":" & O1O1llOO010 & taskcount + Ol1lOlOlO10 - 1
If .Cells(Ol1lOlOlO10, OlO0Oll1ll0) <> 1 Then
O11lO0011O0 = Ol10100l000("The task of the first row of the {} sheet is not level 1.", schedule)
MsgBox O11lO0011O0, vbExclamation, "XLGantt"
argjobresultmsg = O11lO0011O0
GoTo cleanuponerror
End If
O10O10lOO01 (taskcount)
If .Range(O000lOlO1O0 & taskcount + Ol1lOlOlO10 - 1).FormatConditions.Count < Ol01Oll1Oll + Ol1l00010O0 Then
O10O10OO001 taskcount, OOlO1O1llO0
End If
If .Cells.FormatConditions.Count <> Ol01lll1Ol1 + Ol1O00010O0 Then
O10O10OO001 taskcount, OOlO1O1llO0
End If
arr = .Range(OlO1Oll1ll0 & Ol1lOlOlO10 & ":" & O0ll00l1lll(O001lOlO1O0 + OOlO1O1llO0) & taskcount + Ol1lOlOlO10 - 1).Formula
Ol1O0001010 = O0l00OO111O()
For OOlO1O1l1O0 = 1 To UBound(arr, 1)
OOlO1O1O0O1 = arr(OO1O0O0O0O0, OlO0Oll1ll0)
If OOlO1O1O0O1 = 0 Then
If (arr(OO1O0O0O0O0, Oll0OOl1OO0) = "" And arr(OO1O0O0O0O0, Oll1lOl1OO0) = "") Then
GoTo firstarrayend
Else
.Range(OO1O0O0O0O0 + Ol1lOlOlO10 - 1 & ":" & OO1O0O0O0O0 + Ol1lOlOlO10 - 1).Select
O11lO0011O0 = Ol10100l000("The date field of row number {1} in the {2} sheet was entered, but the task field is empty.\nEnter a value in the task field or clear the date field.", OO1O0O0O0O0 + Ol1lOlOlO10 - 1, schedule)
MsgBox O11lO0011O0
argjobresultmsg = O11lO0011O0
GoTo cleanuponerror
End If
End If
If OOlO1O1l1O0 = 1 Then
OOlO1l1O0O0 = OOlO1O1O0O1
End If
If OOlO1l1O0O0 < OOlO1O1O0O1 Then
If (arr(OO1O0O0O0O0, Oll0OOl1OO0) = "" And arr(OO1O0O0O0O0, Oll1lOl1OO0) = "") Then
O1llO0011O0 = Date + Ol1lOlOll10
O1llO0011O1 = Date - Ol1lOlOll10
O0llO0011O1 = Date + Ol1lOlOll10
O0llO0O11O1 = Date - Ol1lOlOll10
arr(OO1O0O0O0O0, O1lOlll1OO0) = 0
arr(OO1O0O0O0O0, O0OOlll1OO0) = 0
arr(OO1O0O0O0O0, O1O1llOO011) = 0
arr(OO1O0O0O0O0, O0111OlO0l0) = 0
arr(OO1O0O0O0O0, O011lOlO1l0) = 0
Else
If Not Ol1001OOlll(arr, OO1O1O0l0l0, OO1O0O0O0O0) Then
MsgBox OO1O1O0l0l0
argjobresultmsg = OO1O1O0l0l0
GoTo cleanuponerror
End If
O1llO0011O0 = arr(OO1O0O0O0O0, Oll0OOl1OO0)
O1llO0011O1 = arr(OO1O0O0O0O0, Oll1lOl1OO0)
O0llO0011O1 = arr(OO1O0O0O0O0, O1OOllOO0O1)
O0llO0O11O1 = arr(OO1O0O0O0O0, O1OlllOO0l1)
Ol1l010lOlO arr, OO1O0O0O0O0, OO1O1OOl0l0, OO1O0OOl0l0, Ol1O0O0l010, Ol1l00011O0, OO1O1OOl010, OO1O1O0l010, OO1O0O0l010
End If
O0lOO0O01O1 _
OO1O1O0l1O1, _
OOlO1O1O0O1, _
CDate(O1llO0011O0), _
CDate(O1llO0011O1), _
CDbl(arr(OO1O0O0O0O0, O1lOlll1OO0)), _
CDbl(arr(OO1O0O0O0O0, O0OOlll1OO0)), _
1, _
CDbl(arr(OO1O0O0O0O0, O011lOlO1l0)), _
O0llO0011O1, _
O0llO0O11O1, _
arr(OO1O0O0O0O0, O1O1llOO011)
OOlO1l1O0O0 = OOlO1O1O0O1
Else
If OOlO1l1O0O0 > OOlO1O1O0O1 Then
If OOlO1l1O0O0 - OOlO1O1O0O1 > 1 Then
.Range(OO1O0O0O0O0 + Ol1lOlOlO10 - 1 & ":" & OO1O0O0O0O0 + Ol1lOlOlO10 - 1).Select
O11lO0011O0 = Ol10100l000("The level of row {} is invalid.", OO1O0O0O0O0 + Ol1lOlOlO10 - 1)
MsgBox O11lO0011O0
argjobresultmsg = O11lO0011O0
GoTo cleanuponerror
End If
arr(OO1O0O0O0O0, Ol01Oll1ll0) = "G"
arr(OO1O0O0O0O0, Oll0OOl1OO0) = OO1O1O0l1O1(OOlO1O1O0O1 + 1).OO0l11Ol1O1
arr(OO1O0O0O0O0, Oll1lOl1OO0) = OO1O1O0l1O1(OOlO1O1O0O1 + 1).OOOl11Ol1O1
arr(OO1O0O0O0O0, O1lOlll1OO0) = OO1O1O0l1O1(OOlO1O1O0O1 + 1).OlOl11Ol1O1
arr(OO1O0O0O0O0, O0OOlll1OO0) = OO1O1O0l1O1(OOlO1O1O0O1 + 1).OlOl01Ol1O1
If OO1O1O0l1O1(OOlO1O1O0O1 + 1).OO0l11Ol1O1 = (Date + Ol1lOlOll10) Then
arr(OO1O0O0O0O0, Oll0OOl1OO0) = ""
arr(OO1O0O0O0O0, Oll1lOl1OO0) = ""
arr(OO1O0O0O0O0, O1lOlll1OO0) = 0
arr(OO1O0O0O0O0, O0OOlll1OO0) = 0
End If
If OO1O1O0l1O1(OOlO1O1O0O1 + 1).O0Ol01Ol1O1 = (Date + Ol1lOlOll10) Then
arr(OO1O0O0O0O0, O1OOllOO0O1) = ""
Else
arr(OO1O0O0O0O0, O1OOllOO0O1) = OO1O1O0l1O1(OOlO1O1O0O1 + 1).O0Ol01Ol1O1
End If
If OO1O1O0l1O1(OOlO1O1O0O1 + 1).O0Ol01OO1O1 = (Date - Ol1lOlOll10) Then
arr(OO1O0O0O0O0, O1OlllOO0l1) = ""
Else
arr(OO1O0O0O0O0, O1OlllOO0l1) = OO1O1O0l1O1(OOlO1O1O0O1 + 1).O0Ol01OO1O1
End If
If OO1O1O0l1O1(OOlO1O1O0O1 + 1).O1Ol01OO1O1 = 0 Then
arr(OO1O0O0O0O0, O1O1llOO011) = 0
Else
arr(OO1O0O0O0O0, O1O1llOO011) = OO1O1O0l1O1(OOlO1O1O0O1 + 1).O1Ol01OO1O1
End If
arr(OO1O0O0O0O0, O1O1llOO0l0) = ""
If OO1O1O0l1O1(OOlO1O1O0O1 + 1).OlOl11Ol1O1 = 0 Then
arr(OO1O0O0O0O0, O0111OlO0l0) = 0
Else
arr(OO1O0O0O0O0, O0111OlO0l0) = OO1O1O0l1O1(OOlO1O1O0O1 + 1).OlOl01Ol1O1 / OO1O1O0l1O1(OOlO1O1O0O1 + 1).OlOl11Ol1O1
End If
If OO1O1O0l1O1(OOlO1O1O0O1 + 1).OlOl11Ol1O1 = 0 Then
arr(OO1O0O0O0O0, O011lOlO1l0) = 0
Else
arr(OO1O0O0O0O0, O011lOlO1l0) = OO1O1O0l1O1(OOlO1O1O0O1 + 1).OOOl01Ol1O1 / OO1O1O0l1O1(OOlO1O1O0O1 + 1).OlOl11Ol1O1
End If
If Ol01llO0ll0 = OO11OlOOl1l Then
If arr(OO1O0O0O0O0, O011lOlO1l0) <> 1 Then
arr(OO1O0O0O0O0, O1OlllOO0l1) = ""
End If
End If
If arr(OO1O0O0O0O0, Oll0OOl1OO0) <> "" Then
Ol1l010lOlO arr, OO1O0O0O0O0, OO1O1OOl0l0, OO1O0OOl0l0, Ol1O0O0l010, Ol1l00011O0, OO1O1OOl010, OO1O1O0l010, OO1O0O0l010
End If
OO0l100110l _
OO1O1O0l1O1, _
OOlO1O1O0O1, _
OO1O1O0l1O1(OOlO1O1O0O1 + 1).OO0l11Ol1O1, _
OO1O1O0l1O1(OOlO1O1O0O1 + 1).OOOl11Ol1O1, _
OO1O1O0l1O1(OOlO1O1O0O1 + 1).OlOl11Ol1O1, _
OO1O1O0l1O1(OOlO1O1O0O1 + 1).OlOl01Ol1O1, _
OO1O1O0l1O1(OOlO1O1O0O1 + 1).OOOl01Ol1O1, _
OO1O1O0l1O1(OOlO1O1O0O1 + 1).O0Ol01Ol1O1, _
OO1O1O0l1O1(OOlO1O1O0O1 + 1).O0Ol01OO1O1, _
OO1O1O0l1O1(OOlO1O1O0O1 + 1).O1Ol01OO1O1, _
OO1O1O0l1O1(OOlO1O1O0O1 + 1).O1Ol11OO1O1
OOlO1l1O0O0 = OOlO1O1O0O1
Else
If (arr(OO1O0O0O0O0, Oll0OOl1OO0) = "" And arr(OO1O0O0O0O0, Oll1lOl1OO0) = "") Then
O1llO0011O0 = Date + Ol1lOlOll10
O1llO0011O1 = Date - Ol1lOlOll10
O0llO0011O1 = Date + Ol1lOlOll10
O0llO0O11O1 = Date - Ol1lOlOll10
arr(OO1O0O0O0O0, O1lOlll1OO0) = 0
arr(OO1O0O0O0O0, O0OOlll1OO0) = 0
arr(OO1O0O0O0O0, O1O1llOO011) = 0
arr(OO1O0O0O0O0, O0111OlO0l0) = 0
arr(OO1O0O0O0O0, O011lOlO1l0) = 0
Else
If Not Ol1001OOlll(arr, OO1O1O0l0l0, OO1O0O0O0O0) Then
MsgBox OO1O1O0l0l0
argjobresultmsg = O11lO0011O0
GoTo cleanuponerror
End If
O1llO0011O0 = arr(OO1O0O0O0O0, Oll0OOl1OO0)
O1llO0011O1 = arr(OO1O0O0O0O0, Oll1lOl1OO0)
O0llO0011O1 = arr(OO1O0O0O0O0, O1OOllOO0O1)
O0llO0O11O1 = arr(OO1O0O0O0O0, O1OlllOO0l1)
Ol1l010lOlO arr, OO1O0O0O0O0, OO1O1OOl0l0, OO1O0OOl0l0, Ol1O0O0l010, Ol1l00011O0, OO1O1OOl010, OO1O1O0l010, OO1O0O0l010
End If
O0lOO0O01O1 _
OO1O1O0l1O1, _
OOlO1O1O0O1, _
CDate(O1llO0011O0), _
CDate(O1llO0011O1), _
CDbl(arr(OO1O0O0O0O0, O1lOlll1OO0)), _
CDbl(arr(OO1O0O0O0O0, O0OOlll1OO0)), _
1, _
CDbl(arr(OO1O0O0O0O0, O011lOlO1l0)), _
O0llO0011O1, _
O0llO0O11O1, _
arr(OO1O0O0O0O0, O1O1llOO011)
End If
End If
firstarrayend:
OO1O0O0O0O0 = OO1O0O0O0O0 - 1
Next OOlO1O1l1O0
Set OO1O0O0O0l0 = .Range(OlO1Oll1ll0 & Ol1lOlOlO10)
OO1O0O0O0l0.Resize(UBound(arr, 1), UBound(arr, 2)).Value = arr
Select Case CInt(getattr("optNonWorkingDays", O11l11ll1O1))
Case 1
.Range(O1OOllll0O0 & Ol1lOlOlO10 & ":" & O1OOllll0O0 & OOlO1l1llO0 + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "="""",""0"",NETWORKDAYS(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "," & OllllOl1OO0 & Ol1lOlOlO10 & "," & "INDIRECT(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & "))))"
.Range(O1OOllOl0O1 & Ol1lOlOlO10 & ":" & O1OOllOl0O1 & OOlO1l1llO0 + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & Oll1OOl1OO0 & Ol1lOlOlO10 & ">" & Ol1O0001010.OllO10O1OO0 & ",0,IF(" & OllllOl1OO0 & Ol1lOlOlO10 & "<" & Ol1O0001010.OllO10O1OO0 & "," & O1OOllll0O0 & Ol1lOlOlO10 & ",NETWORKDAYS(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "," & Ol1O0001010.OllO10O1OO0 & "," & "INDIRECT(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")))))"
.Range(O1O11lOO0l0 & Ol1lOlOlO10 & ":" & O1O11lOO0l0 & OOlO1l1llO0 + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & O1OlllOO011 & Ol1lOlOlO10 & "="""",""0"",IF(" & O1OlllOO0O1 & Ol1lOlOlO10 & "="""",""0"",NETWORKDAYS(" & O1OlllOO0O1 & Ol1lOlOlO10 & "," & O1OlllOO011 & Ol1lOlOlO10 & "," & "INDIRECT(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")))))"
Case 2
.Range(O1OOllll0O0 & Ol1lOlOlO10 & ":" & O1OOllll0O0 & OOlO1l1llO0 + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "="""",""0"",NETWORKDAYS(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "," & OllllOl1OO0 & Ol1lOlOlO10 & "))"
.Range(O1OOllOl0O1 & Ol1lOlOlO10 & ":" & O1OOllOl0O1 & OOlO1l1llO0 + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & Oll1OOl1OO0 & Ol1lOlOlO10 & ">" & Ol1O0001010.OllO10O1OO0 & ",0,IF(" & OllllOl1OO0 & Ol1lOlOlO10 & "<" & Ol1O0001010.OllO10O1OO0 & "," & O1OOllll0O0 & Ol1lOlOlO10 & ",NETWORKDAYS(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "," & Ol1O0001010.OllO10O1OO0 & ")))"
.Range(O1O11lOO0l0 & Ol1lOlOlO10 & ":" & O1O11lOO0l0 & OOlO1l1llO0 + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & O1OlllOO011 & Ol1lOlOlO10 & "="""",""0"",IF(" & O1OlllOO0O1 & Ol1lOlOlO10 & "="""",""0"",NETWORKDAYS(" & O1OlllOO0O1 & Ol1lOlOlO10 & "," & O1OlllOO011 & Ol1lOlOlO10 & ")))"
Case 3
.Range(O1OOllll0O0 & Ol1lOlOlO10 & ":" & O1OOllll0O0 & OOlO1l1llO0 + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "="""",""0"",(" & OllllOl1OO0 & Ol1lOlOlO10 & "-" & Oll1OOl1OO0 & Ol1lOlOlO10 & "+1)-COUNTIFS(indirect(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")) ,"">="" & " & Oll1OOl1OO0 & Ol1lOlOlO10 & ",indirect(getCalendarRange(" & O1lllll1OO0 & OO1O0O0O0O0 + Ol1lOlOlO10 & ")) ,""<="" & " & OllllOl1OO0 & OO1O0O0O0O0 + Ol1lOlOlO10 & "))"
.Range(O1OOllOl0O1 & Ol1lOlOlO10 & ":" & O1OOllOl0O1 & OOlO1l1llO0 + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & Oll1OOl1OO0 & Ol1lOlOlO10 & ">" & Ol1O0001010.OllO10O1OO0 & ",0,IF(" & OllllOl1OO0 & Ol1lOlOlO10 & "<" & Ol1O0001010.OllO10O1OO0 & "," & O1OOllll0O0 & Ol1lOlOlO10 & ",(" & Ol1O0001010.OllO10O1OO0 & "-" & Oll1OOl1OO0 & Ol1lOlOlO10 & "+1)-COUNTIFS(indirect(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")),"">="" & " & Oll1OOl1OO0 & Ol1lOlOlO10 & ",indirect(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")),""<="" & " & Ol1O0001010.OllO10O1OO0 & ")))"
.Range(O1O11lOO0l0 & Ol1lOlOlO10 & ":" & O1O11lOO0l0 & OOlO1l1llO0 + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & O1OlllOO011 & Ol1lOlOlO10 & "="""",""0"",IF(" & O1OlllOO0O1 & Ol1lOlOlO10 & "="""",""0"",(" & O1OlllOO011 & Ol1lOlOlO10 & "-" & O1OlllOO0O1 & Ol1lOlOlO10 & "+1)-COUNTIFS(indirect(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")) ,"">="" & " & O1OlllOO0O1 & Ol1lOlOlO10 & ",indirect(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")) ,""<="" & " & O1OlllOO011 & Ol1lOlOlO10 & ")))"
End Select
.Calculate
OlOOOO0ll00 O1OOllll0O0 & Ol1lOlOlO10 & ":" & O1OOllll0O0 & taskcount + Ol1lOlOlO10 - 1 & "," & _
O1OOllOl0O1 & Ol1lOlOlO10 & ":" & O1OOllOl0O1 & taskcount + Ol1lOlOlO10 - 1 & "," & _
O1O11lOO0l0 & Ol1lOlOlO10 & ":" & O1O11lOO0l0 & taskcount + Ol1lOlOlO10 - 1
With Workbooks(Ol01llO1ll0).Worksheets(Ol11llO1O10)
.Range("TOTAL_WORKLOAD") = OO1O1O0l1O1(1).OlOl11Ol1O1
.Range("PLANNED_WORKLOAD") = OO1O1O0l1O1(1).OlOl01Ol1O1
.Range("ACTUAL_WORKLOAD") = OO1O1O0l1O1(1).OOOl01Ol1O1
If Ol01llO0ll0 = OO11OlOOl1l Then
.Range("A1") = Ol10100l000("Project Progress - When managing schedule changes")
.Range("ACTUAL_WORKLOAD").Offset(0, -1) = Ol10100l000("Performed workload on planned schedule")
.Range("ACTUAL_WORKLOAD").Offset(0, 2) = Ol10100l000("Performed workload on planned schedule when managing schedule changes(Total Duration x %Work Complete)")
.Range("ACTUAL_WORKLOAD2") = OO1O1O0l1O1(1).O1Ol11OO1O1
Else
.Range("A1") = Ol10100l000("Project Progress - When not managing schedule changes")
.Range("ACTUAL_WORKLOAD").Offset(0, -1) = Ol10100l000("Actually performed workload")
.Range("ACTUAL_WORKLOAD").Offset(0, 2) = Ol10100l000("Actually performed workload when not managing schedule changes(Total Duration x %Work Complete)")
.Range("ACTUAL_WORKLOAD2") = ""
End If
If OO1O1O0l1O1(1).OlOl11Ol1O1 = 0 Then
.Range("PLANNED_RATE") = 0
Else
.Range("PLANNED_RATE") = OO1O1O0l1O1(1).OlOl01Ol1O1 / OO1O1O0l1O1(1).OlOl11Ol1O1
End If
If OO1O1O0l1O1(1).OlOl11Ol1O1 = 0 Then
.Range("ACTUAL_RATE") = 0
Else
.Range("ACTUAL_RATE") = OO1O1O0l1O1(1).OOOl01Ol1O1 / OO1O1O0l1O1(1).OlOl11Ol1O1
End If
End With
If OO1O1O0l1O1(1).OO0l11Ol1O1 < Ol11llO0lO0 Then
If OO1O1O0l1O1(1).OOOl11Ol1O1 > Ol01llO0lO0 Then
MsgBox Ol10100l000("[3]The earliest start date({1}) of the tasks is earlier than the start date({2}) of the project.\n\nThe latest finish date({3}) of the tasks is later than the finish date({4}) of the project.\n\nIn this case, there may be problems with resource calculations. Please change the start date and finish date to valid date.", OO1O1O0l1O1(1).OO0l11Ol1O1, Ol11llO0lO0, OO1O1O0l1O1(1).OOOl11Ol1O1, Ol01llO0lO0), vbExclamation, Ol10100l000("Alert")
Else
MsgBox Ol10100l000("The earliest start date({1}) of the tasks is earlier than the start date({2}) of the project.\n\nIn this case, there may be problems with resource calculations. Please change the start date to valid date.", OO1O1O0l1O1(1).OO0l11Ol1O1, Ol11llO0lO0), vbExclamation, Ol10100l000("Alert")
End If
Else
If OO1O1O0l1O1(1).OOOl11Ol1O1 > Ol01llO0lO0 Then
MsgBox Ol10100l000("The latest finish date({1}) of the tasks is later than the finish date({2}) of the project.\n\nIn this case, there may be problems with resource calculations. Please change the finish date to valid date.", OO1O1O0l1O1(1).OOOl11Ol1O1, Ol01llO0lO0), vbExclamation, Ol10100l000("Alert")
End If
End If
Erase arr
OO1O0l0O0l0 = .Range(OlO0Oll1Ol0 & Ol1lOlOlO10 & ":" & OlO1lll1Ol0 & taskcount + Ol1lOlOlO10 - 1).Formula
For OOlO1O1l1O0 = 1 To UBound(OO1O0l0O0l0, 1)
OOlO1O1O0O1 = OO1O0l0O0l0(OOlO1O1l1O0, 1)
If OOlO1O1O0O1 = 0 Then
GoTo secondarrayend
End If
If OOlO1O1l1O0 = 1 Then
OOlO1l1O0O0 = OOlO1O1O0O1
End If
If OOlO1l1O0O0 > OOlO1O1O0O1 Then
For OllO1O1l0O0 = 1 To (Ol11OlO1O10 - OOlO1O1O0O1)
OO1O1O0O0l1(OllO1O1l0O0 + OOlO1O1O0O1 - 1) = 0
Next OllO1O1l0O0
End If
OO1O1O0O0l1(OOlO1O1O0O1 - 1) = OO1O1O0O0l1(OOlO1O1O0O1 - 1) + 1
OOlO1l1O0O0 = OOlO1O1O0O1
For OllO1O1l0O0 = 0 To Ol11OlO1O10 - 1
If OO1O1O0O0l1(OllO1O1l0O0) = 0 Then
Exit For
End If
If OllO1O1l0O0 = 0 Then
Ol1O1O0O0l1 = OO1O1O0O0l1(OllO1O1l0O0)
Else
Ol1O1O0O0l1 = Ol1O1O0O0l1 & "." & OO1O1O0O0l1(OllO1O1l0O0)
End If
Next OllO1O1l0O0
OO1O0l0O0l0(OOlO1O1l1O0, OlO1Oll1Ol0 - OlO1Oll1ll1 + 1) = "'" & Ol1O1O0O0l1
Ol1O1O0O0l1 = ""
secondarrayend:
Next OOlO1O1l1O0
Set OO1O0O0O0l0 = .Range(OlO0Oll1Ol0 & Ol1lOlOlO10)
OO1O0O0O0l0.Resize(UBound(OO1O0l0O0l0, 1), UBound(OO1O0l0O0l0, 2)).Value = OO1O0l0O0l0
Erase OO1O0l0O0l0
If getattr("groupRows", Ol1l11ll1O1) = OO11OlOOl1l Then
OO1lOll0lll
End If
Application.CutCopyMode = False
O10O00lOl01
.Range(OlO1lll1Ol0 & Ol1lOlOlO10).Select
.Calculate
Workbooks(Ol01llO1ll0).Worksheets(Ol11llO1O10).Calculate
End With
Exit Sub
cleanuponerror:
With Workbooks(Ol01llO1ll0).Worksheets(Ol11llO1O10)
.Range("TOTAL_WORKLOAD") = 0
.Range("PLANNED_WORKLOAD") = 0
.Range("ACTUAL_WORKLOAD") = 0
.Range("ACTUAL_WORKLOAD2") = 0
.Range("PLANNED_RATE") = 0
.Range("ACTUAL_RATE") = 0
End With
argjobresultcode = -1
Exit Sub
catch:
Application.Calculation = Ol01llO00l0
If (Err.Number <> 0) Then
MsgBox prompt:=Err.Description & vbNewLine & vbNewLine & "Error code : " & Err.Number & vbNewLine & "Source : " & Err.Source, title:="XLGantt"
End If
Resume cleanuponerror:
End Sub
Sub O0lOO0O01O1( _
ByRef O01lO0O01O1() As O1lO11Ol1O1, _
O01lO0O11O1 As Long, _
O01lO0011O1 As Date, _
O01lO0011Ol As Date, _
OO1lO0011Ol As Double, _
OO1l00011Ol As Double, _
OO1l01011Ol As Double, _
actualrate As Double, _
OO1l010110l As Variant, _
OO0l010110l As Variant, _
OO0l000110l As Variant)
O01lO0O01O1(O01lO0O11O1).OO0l11ll1O1 = O01lO0O11O1
If O01lO0O01O1(O01lO0O11O1).OO0l11Ol1O1 > O01lO0011O1 Then
O01lO0O01O1(O01lO0O11O1).OO0l11Ol1O1 = O01lO0011O1
End If
If O01lO0O01O1(O01lO0O11O1).OOOl11Ol1O1 < O01lO0011Ol Then
O01lO0O01O1(O01lO0O11O1).OOOl11Ol1O1 = O01lO0011Ol
End If
O01lO0O01O1(O01lO0O11O1).OlOl11Ol1O1 = O01lO0O01O1(O01lO0O11O1).OlOl11Ol1O1 + (OO1lO0011Ol * OO1l01011Ol)
O01lO0O01O1(O01lO0O11O1).OlOl01Ol1O1 = O01lO0O01O1(O01lO0O11O1).OlOl01Ol1O1 + (OO1l00011Ol * OO1l01011Ol)
O01lO0O01O1(O01lO0O11O1).OOOl01Ol1O1 = O01lO0O01O1(O01lO0O11O1).OOOl01Ol1O1 + (OO1lO0011Ol * actualrate * OO1l01011Ol)
If Ol01llO0ll0 = OO11OlOOl1l Then
O01lO0O01O1(O01lO0O11O1).O1Ol01OO1O1 = O01lO0O01O1(O01lO0O11O1).O1Ol01OO1O1 + (OO0l000110l * OO1l01011Ol)
O01lO0O01O1(O01lO0O11O1).O1Ol11OO1O1 = O01lO0O01O1(O01lO0O11O1).O1Ol11OO1O1 + (OO0l000110l * OO1l01011Ol)
If (OO1l010110l > "") Then
If O01lO0O01O1(O01lO0O11O1).O0Ol01Ol1O1 > CDate(OO1l010110l) Then
O01lO0O01O1(O01lO0O11O1).O0Ol01Ol1O1 = CDate(OO1l010110l)
End If
End If
If (OO0l010110l > "") Then
If O01lO0O01O1(O01lO0O11O1).O0Ol01OO1O1 < CDate(OO0l010110l) Then
O01lO0O01O1(O01lO0O11O1).O0Ol01OO1O1 = CDate(OO0l010110l)
End If
End If
End If
End Sub
Sub OO0l100110l( _
ByRef OO0l010110O() As O1lO11Ol1O1, _
OO1l010110O As Long, _
OO1l000110O As Date, _
OO1l100110O As Date, _
OO1l10011OO As Double, _
OO1l100l1OO As Double, _
OO1l110l1OO As Double, _
Ol1l110l1OO As Variant, _
Ol1l110l1lO As Variant, _
Ol1l110lllO As Variant, _
Ol1l110lOlO As Variant)
OO0l010110O(OO1l010110O).OO0l11ll1O1 = OO1l010110O
If OO0l010110O(OO1l010110O).OO0l11Ol1O1 > OO1l000110O Then
OO0l010110O(OO1l010110O).OO0l11Ol1O1 = OO1l000110O
End If
If OO0l010110O(OO1l010110O).OOOl11Ol1O1 < OO1l100110O Then
OO0l010110O(OO1l010110O).OOOl11Ol1O1 = OO1l100110O
End If
OO0l010110O(OO1l010110O).OlOl11Ol1O1 = OO0l010110O(OO1l010110O).OlOl11Ol1O1 + OO1l10011OO
OO0l010110O(OO1l010110O).OlOl01Ol1O1 = OO0l010110O(OO1l010110O).OlOl01Ol1O1 + OO1l100l1OO
OO0l010110O(OO1l010110O).OOOl01Ol1O1 = OO0l010110O(OO1l010110O).OOOl01Ol1O1 + OO1l110l1OO
OO0l010110O(OO1l010110O + 1).OO0l11Ol1O1 = Date + Ol1lOlOll10
OO0l010110O(OO1l010110O + 1).OOOl11Ol1O1 = Date - Ol1lOlOll10
OO0l010110O(OO1l010110O + 1).OO0l11ll1O1 = 0
OO0l010110O(OO1l010110O + 1).OlOl11Ol1O1 = 0
OO0l010110O(OO1l010110O + 1).OlOl01Ol1O1 = 0
OO0l010110O(OO1l010110O + 1).OOOl01Ol1O1 = 0
If Ol01llO0ll0 = OO11OlOOl1l Then
OO0l010110O(OO1l010110O).O1Ol01OO1O1 = OO0l010110O(OO1l010110O).O1Ol01OO1O1 + Ol1l110lllO
OO0l010110O(OO1l010110O).O1Ol11OO1O1 = OO0l010110O(OO1l010110O).O1Ol11OO1O1 + Ol1l110lOlO
If (Ol1l110l1OO > "") Then
If OO0l010110O(OO1l010110O).O0Ol01Ol1O1 > CDate(Ol1l110l1OO) Then
OO0l010110O(OO1l010110O).O0Ol01Ol1O1 = CDate(Ol1l110l1OO)
End If
End If
If (Ol1l110l1lO > "") Then
If OO0l010110O(OO1l010110O).O0Ol01OO1O1 < CDate(Ol1l110l1lO) Then
OO0l010110O(OO1l010110O).O0Ol01OO1O1 = CDate(Ol1l110l1lO)
End If
End If
OO0l010110O(OO1l010110O + 1).O0Ol01Ol1O1 = Date + Ol1lOlOll10
OO0l010110O(OO1l010110O + 1).O0Ol01OO1O1 = Date - Ol1lOlOll10
OO0l010110O(OO1l010110O + 1).O1Ol01OO1O1 = 0
OO0l010110O(OO1l010110O + 1).O1Ol11OO1O1 = 0
End If
End Sub
Sub Ol1l010lOlO( _
ByRef arr() As Variant, _
ByVal O11l010lOlO As Long, _
ByVal O11l110lOlO As Integer, _
ByVal O11l110lOl0 As Integer, _
ByVal O11l1l0lOl0 As Integer, _
ByVal O1ll1l0lOl0 As Long, _
ByVal O1ll1l0lll0 As Integer, _
ByVal O1ll1l0lll1 As Integer, _
ByVal O1ll1l0l1l1 As Integer)
Dim O1ll1l0l1l0 As Long
Dim O1ll1l0l110 As String
Dim O1ll1l0l11O As String
Dim O1ll1l0l1lO As String
Dim O1Ol1l0l1lO As String
Dim O0Ol1l0l1lO As Long
Dim O0Ol1l0l1ll As Long
Dim O1Ol1l0l1ll As Long
Dim O1Olll0l1ll As Long
Dim O1Oll10l1ll As Long
Dim O1Oll1Ol1ll As Long
Dim O1Oll0Ol1ll As Long
Dim O1OlO0Ol1ll As Long
Dim O1OlO0O11ll As Long
Dim O1Oll0O11ll As Long
Dim O10ll0O11ll As Long
Dim O10ll0l11ll As Long
Dim O10ll0l11lO As Long
Dim O10l10l11lO As Long
Dim O10l10l111O As Long
Dim actualstartinfirstcell As Single
Dim actualstartinfirstcellactual As Single
Dim actualendinlastcell As Single
Dim actualendinlastcellactual As Single
Dim O10l10O111O As Long
Dim Ol0l10O111O As Long
Dim Ol0l1OO111O As Long
Dim Ol0O1OO111O
Dim Ol0O1OO111l As Double
Dim Ol0O0OO111l As Long
Dim Ol1O0OO111l As Integer
Dim Ol1O0OO110l As String
On Error GoTo errhandler
O1Oll10l1ll = 16737792
O0Ol1l0l1lO = O11l010lOlO + Ol1lOlOlO10 - 1
O0Ol1l0l1ll = arr(O11l010lOlO, OlO0Oll1ll0) + OlO1Oll1Ol1
If Ol01llO0ll0 = OO11OlOOl1l Then
If arr(O11l010lOlO, O1OOllOO0O1) = "" Then
If arr(O11l010lOlO, O1OlllOO0l1) = "" Then
O1Oll1Ol1ll = O1ll1l0lOl0 + (arr(O11l010lOlO, Oll0OOl1OO0) - Ol11llO0lO0)
O10l10l11lO = arr(O11l010lOlO, Oll1lOl1OO0) - arr(O11l010lOlO, Oll0OOl1OO0) + 1
O1Oll0O11ll = O1Oll1Ol1ll + O10l10l11lO
O1Oll0Ol1ll = O1Oll1Ol1ll
O10l10l111O = O10l10l11lO
O10ll0O11ll = O1Oll0Ol1ll + O10l10l111O
End If
Else
If arr(O11l010lOlO, O1OlllOO0l1) = "" Then
O1Oll1Ol1ll = O1ll1l0lOl0 + (arr(O11l010lOlO, Oll0OOl1OO0) - Ol11llO0lO0)
O10l10l11lO = arr(O11l010lOlO, Oll1lOl1OO0) - arr(O11l010lOlO, Oll0OOl1OO0) + 1
O1Oll0O11ll = O1Oll1Ol1ll + O10l10l11lO
O1Oll0Ol1ll = O1ll1l0lOl0 + (arr(O11l010lOlO, O1OOllOO0O1) - Ol11llO0lO0)
O10l10l111O = O10l10l11lO
O10ll0O11ll = O1Oll0Ol1ll + O10l10l111O
Else
O1Oll1Ol1ll = O1ll1l0lOl0 + (arr(O11l010lOlO, Oll0OOl1OO0) - Ol11llO0lO0)
O10l10l11lO = arr(O11l010lOlO, Oll1lOl1OO0) - arr(O11l010lOlO, Oll0OOl1OO0) + 1
O1Oll0O11ll = O1Oll1Ol1ll + O10l10l11lO
O1Oll0Ol1ll = O1ll1l0lOl0 + (arr(O11l010lOlO, O1OOllOO0O1) - Ol11llO0lO0)
O10l10l111O = arr(O11l010lOlO, O1OlllOO0l1) - arr(O11l010lOlO, O1OOllOO0O1) + 1
O10ll0O11ll = O1Oll0Ol1ll + O10l10l111O
End If
End If
Else
O1Oll1Ol1ll = O1ll1l0lOl0 + (arr(O11l010lOlO, Oll0OOl1OO0) - Ol11llO0lO0)
O10l10l11lO = arr(O11l010lOlO, Oll1lOl1OO0) - arr(O11l010lOlO, Oll0OOl1OO0) + 1
O1Oll0O11ll = O1Oll1Ol1ll + O10l10l11lO
End If
If (O1Oll1Ol1ll >= 0) And (O1Oll0O11ll >= 0) Then
If Ol01llO00l1 = 30 Then
O1OlO0Ol1ll = OOlll111O01(0, Ol11llO0lO0 - O1ll1l0lOl0, O1Oll1Ol1ll, Ol0O0OO111l, Ol1O0OO111l) + O001lOlO1O0
actualstartinfirstcell = Ol0O0OO111l / Ol1O0OO111l
O10ll0l11ll = OOlll111O01(0, Ol11llO0lO0 - O1ll1l0lOl0, O1Oll0O11ll, Ol0O0OO111l, Ol1O0OO111l) + O001lOlO1O0
actualendinlastcell = Ol0O0OO111l / Ol1O0OO111l
Else
O1OlO0Ol1ll = (O1Oll1Ol1ll \ Ol01llO00l1) + O001lOlO1O0
actualstartinfirstcell = (O1Oll1Ol1ll Mod Ol01llO00l1) / Ol01llO00l1
O10ll0l11ll = (O1Oll0O11ll \ Ol01llO00l1) + O001lOlO1O0
actualendinlastcell = (O1Oll0O11ll Mod Ol01llO00l1) / Ol01llO00l1
End If
If Ol01llO0ll0 = OO11OlOOl1l Then
If Ol01llO00l1 = 30 Then
O1OlO0O11ll = OOlll111O01(0, Ol11llO0lO0 - O1ll1l0lOl0, O1Oll0Ol1ll, Ol0O0OO111l, Ol1O0OO111l) + O001lOlO1O0
actualstartinfirstcellactual = Ol0O0OO111l / Ol1O0OO111l
O10ll0l11lO = OOlll111O01(0, Ol11llO0lO0 - O1ll1l0lOl0, O10ll0O11ll, Ol0O0OO111l, Ol1O0OO111l) + O001lOlO1O0
actualendinlastcellactual = Ol0O0OO111l / Ol1O0OO111l
Else
O1OlO0O11ll = (O1Oll0Ol1ll \ Ol01llO00l1) + O001lOlO1O0
actualstartinfirstcellactual = (O1Oll0Ol1ll Mod Ol01llO00l1) / Ol01llO00l1
O10ll0l11lO = (O10ll0O11ll \ Ol01llO00l1) + O001lOlO1O0
actualendinlastcellactual = (O10ll0O11ll Mod Ol01llO00l1) / Ol01llO00l1
End If
O1l10Ol0l0O sheetname:=schedule, _
startrange:=Range(Cells(O0Ol1l0l1lO, O1OlO0Ol1ll), Cells(O0Ol1l0l1lO, O1OlO0Ol1ll)), _
actualstartinfirstcell:=actualstartinfirstcell, _
endrange:=Range(Cells(O0Ol1l0l1lO, O10ll0l11ll), Cells(O0Ol1l0l1lO, O10ll0l11ll)), _
actualendinlastcell:=actualendinlastcell, _
startrangeactual:=Range(Cells(O0Ol1l0l1lO, O1OlO0O11ll), Cells(O0Ol1l0l1lO, O1OlO0O11ll)), _
actualstartinfirstcellactual:=actualstartinfirstcellactual, _
endrangeactual:=Range(Cells(O0Ol1l0l1lO, O10ll0l11lO), Cells(O0Ol1l0l1lO, O10ll0l11lO)), _
actualendinlastcellactual:=actualendinlastcellactual, _
rgbcolor:=O1Oll10l1ll, _
arr:=arr, _
actualrate:=CDbl(arr(O11l010lOlO, O011lOlO1l0)), _
taskgroupyn:=arr(O11l010lOlO, Ol01Oll1ll0)
O1Oll1Ol1ll = O1Oll0Ol1ll
O10l10l11lO = O10l10l111O
O1Oll0O11ll = O10ll0O11ll
Else
O0O10O0ll1O sheetname:=schedule, _
startrange:=Range(Cells(O0Ol1l0l1lO, O1OlO0Ol1ll), Cells(O0Ol1l0l1lO, O1OlO0Ol1ll)), _
actualstartinfirstcell:=actualstartinfirstcell, _
endrange:=Range(Cells(O0Ol1l0l1lO, O10ll0l11ll), Cells(O0Ol1l0l1lO, O10ll0l11ll)), _
actualendinlastcell:=actualendinlastcell, _
rgbcolor:=O1Oll10l1ll, _
arr:=arr, _
actualrate:=CDbl(arr(O11l010lOlO, O011lOlO1l0)), _
taskgroupyn:=arr(O11l010lOlO, Ol01Oll1ll0)
End If
End If
With Workbooks(Ol01llO1ll0).Worksheets(schedule)
O1Oll0O11ll = O10ll0l11ll
O1ll1l0l1lO = """"""
If O11l110lOlO = OO11OlOOl1l Then
O1ll1l0l1lO = """" & Range(.Cells(O0Ol1l0l1lO, O0Ol1l0l1ll), .Cells(O0Ol1l0l1lO, O0Ol1l0l1ll)).Value & """"
End If
If O1ll1l0l1l1 = OO11OlOOl1l Then
Ol1O0OO110l = Range(.Cells(O0Ol1l0l1lO, O1l1lllO0l0), .Cells(O0Ol1l0l1lO, O1l1lllO0l0))
If Ol1O0OO110l > "" Then
O1ll1l0l1lO = O1ll1l0l1lO & " & " & """" & "(" & Ol1O0OO110l & ")" & """"
End If
End If
O1ll1l0l1lO = O1ll1l0l1lO & " & "" """
If O1ll1l0lll0 = OO11OlOOl1l Then
If O1ll1l0lll1 = OO11OlOOl1l Then
O1ll1l0l11O = "TEXT(" & O011lOlO1O0 & O0Ol1l0l1lO & ",""#0.00%"") & ""/"" & " & "TEXT(" & O0111OlO1l0 & O0Ol1l0l1lO & ",""#0.00% "") & """ & """"
Else
O1ll1l0l11O = "TEXT(" & O011lOlO1O0 & O0Ol1l0l1lO & ",""#0.00%"") & "" """
End If
Else
O1ll1l0l11O = """"""
End If
If O11l110lOl0 = OO11OlOOl1l Then
O1Ol1l0l1lO = "IF(" & Oll1OOl1OO0 & O0Ol1l0l1lO & "="""","""",TEXT(" & Oll1OOl1OO0 & O0Ol1l0l1lO & ",""M/D-"")) & IF(" & OllllOl1OO0 & O0Ol1l0l1lO & "="""","""",TEXT(" & OllllOl1OO0 & O0Ol1l0l1lO & ",""M/D"")) & "" """
Else
O1Ol1l0l1lO = """"""
End If
O1Olll0l1ll = O10ll0l11ll
If O11l1l0lOl0 = OO11OlOOl1O Then
O1Ol1l0l1ll = -1
ElseIf O11l1l0lOl0 = OO1lOlOOl10 Then
O1Ol1l0l1ll = O10ll0l11ll - O1OlO0Ol1ll
Else
O1Ol1l0l1ll = 0
End If
O1Ol1l0l1ll = O1Ol1l0l1ll + O1ll1l0lOl0
If Ol01llO00l1 = 30 Then
Ol0l1OO111O = O1Oll1Ol1ll + (O10l10l11lO * CDbl(arr(O11l010lOlO, O011lOlO1l0)))
Ol0l10O111O = OOlll111O01(0, Ol11llO0lO0 - O1ll1l0lOl0, Ol0l1OO111O, Ol0O0OO111l, Ol1O0OO111l) + O001lOlO1O0
Ol0O1OO111O = Ol0O0OO111l / Ol1O0OO111l
Else
Ol0l1OO111O = O1Oll1Ol1ll + (O10l10l11lO * CDbl(arr(O11l010lOlO, O011lOlO1l0)))
Ol0O1OO111O = (Ol0l1OO111O Mod Ol01llO00l1) / Ol01llO00l1
Ol0l10O111O = (Ol0l1OO111O \ Ol01llO00l1) + O001lOlO1O0
End If
If O11l1l0lOl0 = OO11OlOOl10 Then
arr(O11l010lOlO, Ol0l10O111O) = "=" & """" & Space(Ol01llOO0l1 * Ol0O1OO111O) & """" & " & " & O1ll1l0l11O & " & " & O1ll1l0l1lO & " & " & O1Ol1l0l1lO
ElseIf O11l1l0lOl0 = OO11OlOOl1O Then
If (arr(O11l010lOlO, Oll0OOl1OO0) >= Ol11llO0lO0 - O1Ol1l0l1ll) And (arr(O11l010lOlO, Oll0OOl1OO0) <= Ol01llO0lO0) Then
arr(O11l010lOlO, O1OlO0Ol1ll - 1) = "=" & O1ll1l0l1lO & " & " & O1Ol1l0l1lO
arr(O11l010lOlO, Ol0l10O111O) = "=" & """" & Space(Ol01llOO0l1 * Ol0O1OO111O) & """" & " & " & O1ll1l0l11O
.Cells(O0Ol1l0l1lO, O1OlO0Ol1ll + O1Ol1l0l1ll).HorizontalAlignment = xlRight
.Cells(O0Ol1l0l1lO, Ol0l10O111O).HorizontalAlignment = xlLeft
End If
ElseIf O11l1l0lOl0 = OO1lOlOOl10 Then
If Ol0O1OO111O > 0.5 Then
Ol0O1OO111l = Ol01llO0Ol1 + Ol0O1OO111O
Else
Ol0O1OO111l = Ol01llO0Ol1
End If
If O1ll1l0lll0 = OO11OlOOl1l Then
If O10ll0l11ll - Ol0l10O111O < Ol0O1OO111l Then
arr(O11l010lOlO, Ol0l10O111O) = "=" & """" & Space(Ol01llOO0l1 * Ol0O1OO111O) & """" & " & " & O1ll1l0l11O & " & " & O1ll1l0l1lO & " & " & O1Ol1l0l1lO
Else
arr(O11l010lOlO, Ol0l10O111O) = "=" & """" & Space(Ol01llOO0l1 * Ol0O1OO111O) & """" & " & " & O1ll1l0l11O
If (arr(O11l010lOlO, Oll0OOl1OO0) >= Ol11llO0lO0 - O1Ol1l0l1ll) And (arr(O11l010lOlO, Oll0OOl1OO0) <= Ol01llO0lO0) Then
arr(O11l010lOlO, O10ll0l11ll) = "=" & """" & Space(Ol01llOO0l1 * actualendinlastcell) & """" & " & " & O1ll1l0l1lO & " & " & O1Ol1l0l1lO
End If
End If
Else
If (arr(O11l010lOlO, Oll0OOl1OO0) >= Ol11llO0lO0 - O1Ol1l0l1ll) And (arr(O11l010lOlO, Oll0OOl1OO0) <= Ol01llO0lO0) Then
arr(O11l010lOlO, O10ll0l11ll) = "=" & """" & Space(Ol01llOO0l1 * actualendinlastcell) & """" & " & " & O1ll1l0l1lO & " & " & O1Ol1l0l1lO
End If
End If
End If
End With
normalend:
Exit Sub
errhandler:
O1ll1l0l1l0 = Err.Number
O1ll1l0l110 = Err.Description
Err.Raise Number:=O1ll1l0l1l0, Source:=Ol10100l000("Drawing Gantt chart"), Description:=O1ll1l0l110
End Sub
Sub OO1O0OO110l( _
ByVal OO1O0OO1l0l As Integer, _
ByRef arr() As Variant, _
ByVal OO1O0OOll0l As Long, _
ByVal OO1O0OOll1l As Long, _
OO100OOll1l As String, _
OO100OOll0l As String, _
OO101OOll1l As String, _
OO101OOll0l As Integer, _
OO101OOOl0l As Long, _
OO101lOOl0l As Long, _
OO1011OOl0l As Long, _
OO1001OOl0l As Long, _
actualendinlastcell As Single)
Dim OO1001OOlOl As Long
Dim OO1001OOOOl As Long
Dim actualstartinfirstcell
Dim OO1001OOOll As Long
Dim OO1001OO0ll As Long
Dim OO1001OO1ll
Dim OO1001OOlll As Double
OO1001OOlOl = (OO101OOOl0l \ Ol01llO00l1) + O001lOlO1O0
OO1001OO0ll = OO101OOOl0l + (OO101lOOl0l * CDbl(arr(OO1O0OOll1l, O011lOlO1l0)))
OO1001OO1ll = (OO1001OO0ll Mod OO101OOll0l) / OO101OOll0l
OO1001OOOll = (OO1001OO0ll \ OO101OOll0l) + O001lOlO1O0
If OO1O0OO1l0l = OO11OlOOl10 Then
arr(OO1O0OOll1l, OO1001OOOll) = "=" & """" & Space(Ol01llOO0l1 * OO1001OO1ll) & """" & " & " & OO100OOll1l & " & " & OO100OOll0l & " & " & OO101OOll1l
ElseIf OO1O0OO1l0l = OO11OlOOl1O Then
If (arr(OO1O0OOll1l, Oll0OOl1OO0) >= Ol11llO0lO0 - OO1011OOl0l) And (arr(OO1O0OOll1l, Oll0OOl1OO0) <= Ol01llO0lO0) Then
arr(OO1O0OOll1l, OO1001OOlOl - 1) = "=" & OO100OOll0l & " & " & OO101OOll1l
arr(OO1O0OOll1l, OO1001OOOll) = "=" & """" & Space(Ol01llOO0l1 * OO1001OO1ll) & """" & " & " & OO100OOll1l
ThisWorkbook.Sheets(schedule).Cells(OO1O0OOll0l, OO1001OOlOl + OO1011OOl0l).HorizontalAlignment = xlRight
ThisWorkbook.Sheets(schedule).Cells(OO1O0OOll0l, OO1001OOOll).HorizontalAlignment = xlLeft
End If
ElseIf OO1O0OO1l0l = OO1lOlOOl10 Then
If OO1001OO1ll > 0.5 Then
OO1001OOlll = Ol01llO0Ol1 + OO1001OO1ll
Else
OO1001OOlll = Ol01llO0Ol1
End If
If OO1001OOl0l - OO1001OOOll < OO1001OOlll Then
arr(OO1O0OOll1l, OO1001OOOll) = "=" & """" & Space(Ol01llOO0l1 * OO1001OO1ll) & """" & " & " & OO100OOll1l & " & " & OO100OOll0l & " & " & OO101OOll1l
Else
arr(OO1O0OOll1l, OO1001OOOll) = "=" & """" & Space(Ol01llOO0l1 * OO1001OO1ll) & """" & " & " & OO100OOll1l
If (arr(OO1O0OOll1l, Oll0OOl1OO0) >= Ol11llO0lO0 - OO1011OOl0l) And (arr(OO1O0OOll1l, Oll0OOl1OO0) <= Ol01llO0lO0) Then
arr(OO1O0OOll1l, OO1001OOl0l) = "=" & """" & Space(Ol01llOO0l1 * actualendinlastcell) & """" & " & " & OO100OOll0l & " & " & OO101OOll1l
End If
End If
End If
End Sub
Function Ol1001OOlll(ByRef arr() As Variant, ByRef Ol1000OOlll As String, ByRef Ol1O00OOlll As Long) As Boolean
Dim Ol1l00OOlll As Double
Ol1000OOlll = ""
On Error Resume Next
With Workbooks(Ol01llO1ll0).Worksheets(schedule)
arr(Ol1O00OOlll, Oll0OOl1OO0) = CDate(arr(Ol1O00OOlll, Oll0OOl1OO0))
If Err.Number <> 0 Then
On Error GoTo 0
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The start date format of row number {1} in the {2} sheet is invalid.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
arr(Ol1O00OOlll, Oll1lOl1OO0) = CDate(arr(Ol1O00OOlll, Oll1lOl1OO0))
If Err.Number <> 0 Then
On Error GoTo 0
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The finish date format of row number {1} in the {2} sheet is invalid.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
On Error GoTo 0
If (arr(Ol1O00OOlll, Oll1lOl1OO0) - arr(Ol1O00OOlll, Oll0OOl1OO0)) < 0 Then
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The start date of row number {1} in the {2} sheet is later than the finish date.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
If Not ((arr(Ol1O00OOlll, Oll0OOl1OO0) >= Ol11llO0lO0) And (arr(Ol1O00OOlll, Oll1lOl1OO0) <= Ol01llO0lO0)) Then
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The start or finish date of row number {1} in the {2} sheet is out of the project duration.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
If Not (IsNumeric(arr(Ol1O00OOlll, O1lOlll1OO0) + arr(Ol1O00OOlll, O0OOlll1OO0))) Then
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("There is an error in the total workload or planned workload field of row number {1} in the {2} sheet. Please check that the start / finish date was entered correctly, or that the formula is correct.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
If Trim(arr(Ol1O00OOlll, O011lOlO1l0)) = "" Then
arr(Ol1O00OOlll, O011lOlO1l0) = 0
Else
If IsNumeric(Trim(arr(Ol1O00OOlll, O011lOlO1l0))) Then
If (arr(Ol1O00OOlll, O011lOlO1l0) < 0) Or (arr(Ol1O00OOlll, O011lOlO1l0) > 1) Then
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("Type a number between 0% and 100% in ""%Work Complete"" field of row number {1} in the {2} sheet.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Exit Function
End If
Else
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The ""%Work Complete"" of row number {1} in the {2} sheet is not a number.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Exit Function
End If
End If
If arr(Ol1O00OOlll, O1lOlll1OO0) = 0 Then
arr(Ol1O00OOlll, O0111OlO0l0) = 0
Else
arr(Ol1O00OOlll, O0111OlO0l0) = arr(Ol1O00OOlll, O0OOlll1OO0) / arr(Ol1O00OOlll, O1lOlll1OO0)
End If
If Trim(arr(Ol1O00OOlll, O1O1llOO0l0)) = "" Then
arr(Ol1O00OOlll, O1O1llOO0l0) = 1
Else
If Not IsNumeric(Trim(arr(Ol1O00OOlll, O1O1llOO0l0))) Then
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The weight of row number {1} in the {2} sheet is not a number.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Exit Function
End If
End If
If Ol01llO0ll0 = OO11OlOOl1l Then
If arr(Ol1O00OOlll, O1OOllOO0O1) = "" Then
If arr(Ol1O00OOlll, O1OlllOO0l1) = "" Then
If arr(Ol1O00OOlll, O011lOlO1l0) > 0 Then
If arr(Ol1O00OOlll, O011lOlO1l0) < 1 Then
arr(Ol1O00OOlll, O1OOllOO0O1) = arr(Ol1O00OOlll, Oll0OOl1OO0)
arr(Ol1O00OOlll, O1O1llOO011) = arr(Ol1O00OOlll, O1lOlll1OO0) * arr(Ol1O00OOlll, O011lOlO1l0)
Else
arr(Ol1O00OOlll, O1OOllOO0O1) = arr(Ol1O00OOlll, Oll0OOl1OO0)
arr(Ol1O00OOlll, O1OlllOO0l1) = arr(Ol1O00OOlll, Oll1lOl1OO0)
arr(Ol1O00OOlll, O1O1llOO011) = arr(Ol1O00OOlll, O1lOlll1OO0)
End If
End If
Else
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The actual finish date of the row number {1} in the {2} sheet was entered, but the actual start date is empty.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
Else
If arr(Ol1O00OOlll, O1OlllOO0l1) = "" Then
On Error Resume Next
arr(Ol1O00OOlll, O1OOllOO0O1) = CDate(arr(Ol1O00OOlll, O1OOllOO0O1))
If Err.Number <> 0 Then
On Error GoTo 0
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The actual start date format of row number {1} in the {2} sheet is invalid.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
On Error GoTo 0
arr(Ol1O00OOlll, O1O1llOO011) = arr(Ol1O00OOlll, O1lOlll1OO0) * arr(Ol1O00OOlll, O011lOlO1l0)
If arr(Ol1O00OOlll, O011lOlO1l0) = 1 Then
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("If you do not enter the actual finish date of row number {1} in the {2} sheet, you can't enter ""%Work Complete"" as 100%.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
Else
On Error Resume Next
arr(Ol1O00OOlll, O1OOllOO0O1) = CDate(arr(Ol1O00OOlll, O1OOllOO0O1))
If Err.Number <> 0 Then
On Error GoTo 0
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The actual start date format of row number {1} in the {2} sheet is invalid.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
arr(Ol1O00OOlll, O1OlllOO0l1) = CDate(arr(Ol1O00OOlll, O1OlllOO0l1))
If Err.Number <> 0 Then
On Error GoTo 0
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The actual finish date format of row number {1} in the {2} sheet is invalid.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
On Error GoTo 0
If (arr(Ol1O00OOlll, O1OlllOO0l1) - arr(Ol1O00OOlll, O1OOllOO0O1)) < 0 Then
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The actual start date of row number {1} in the {2} sheet is later than the actual finish date.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
arr(Ol1O00OOlll, O011lOlO1l0) = 1
End If
End If
If arr(Ol1O00OOlll, O1O1llOO011) = "" Then
arr(Ol1O00OOlll, O1O1llOO011) = 0
Else
arr(Ol1O00OOlll, O1O1llOO011) = arr(Ol1O00OOlll, O1O1llOO011) * arr(Ol1O00OOlll, O1O1llOO0l0)
End If
If arr(Ol1O00OOlll, O1OOllOO0O1) > "" Then
If arr(Ol1O00OOlll, O1OlllOO0l1) > "" Then
If Not ((arr(Ol1O00OOlll, O1OOllOO0O1) >= Ol11llO0lO0) And (arr(Ol1O00OOlll, O1OlllOO0l1) <= Ol01llO0lO0)) Then
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The actual start or finish date of row number {1} in the {2} sheet is out of the project duration.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
Else
If Not ((arr(Ol1O00OOlll, O1OOllOO0O1) >= Ol11llO0lO0) And (arr(Ol1O00OOlll, O1OOllOO0O1) <= Ol01llO0lO0)) Then
.Range(Ol1O00OOlll + Ol1lOlOlO10 - 1 & ":" & Ol1O00OOlll + Ol1lOlOlO10 - 1).Select
Ol1000OOlll = Ol10100l000("The actual start date of row number {1} in the {2} sheet is out of the project duration.", Ol1O00OOlll + Ol1lOlOlO10 - 1, schedule)
Ol1001OOlll = False
Exit Function
End If
End If
End If
End If
arr(Ol1O00OOlll, O1lOlll1OO0) = arr(Ol1O00OOlll, O1lOlll1OO0) * arr(Ol1O00OOlll, O1O1llOO0l0)
arr(Ol1O00OOlll, O0OOlll1OO0) = arr(Ol1O00OOlll, O0OOlll1OO0) * arr(Ol1O00OOlll, O1O1llOO0l0)
End With
Ol1001OOlll = True
End Function
Function Ol1l00Ollll(ByRef Ol1l01Ollll As String, Ol1l01lllll As Variant, Ol1l01llOll As Variant) As Boolean
Ol1l01Ollll = ""
If IsDate(Ol1l01lllll) Then
If IsDate(Ol1l01llOll) Then
Ol1l00Ollll = True
Else
Ol1l01Ollll = Ol10100l000("The project finish date({}) you entered is not valid date format.", Ol1l01llOll)
End If
Else
Ol1l01Ollll = Ol10100l000("The project start date({}) you entered is not valid date format.", Ol1l01lllll)
End If
End Function
Sub Ol1l01llOOl(taskcount As Long)
Dim O11l01llOOl As Long
Dim O11l01llOll As Long
Dim O11l11llOll As Long
Dim O11l11l1Oll As Double
Dim Ol1l11l1Oll As Integer
Dim Ol1l1ll1Oll As Long
Dim Ol1l1ll1OOl As Range
Dim Olll1ll1OOl As Date
Dim Olll1ll1lOl As Integer
Dim Olll1ll1lll As String
Dim Olll1ll1l1l As String
Dim Olll1ll1l11 As Long
Dim Olll1ll1l10 As Long
Dim Olll1l11l10 As Long
Dim Olll1l10l10 As Long
Dim Olll1l1Ol10 As Integer
Dim Olll1llOl10 As Long
Dim Olll1llOll0 As Single
Dim O1ll1llOll0 As Date
Dim O1ll1llOOl0 As Integer
On Error GoTo catch
Application.DisplayAlerts = False
Ol01llOlll0.Worksheets(schedule).Select
If Ol01llOlll0.Worksheets(schedule).AutoFilterMode Then
Ol01llOlll0.Worksheets(schedule).AutoFilterMode = False
End If
Ol11llO0lO0 = CDate(getattr("projectStartDate", O11l11ll1O1))
Ol01llO0lO0 = CDate(getattr("projectEndDate", O11l11ll1O1))
Ol01llO00l1 = CInt(getattr("optGanttChartColumnDisplay", Ol1l11ll1O1))
Olll1l11l10 = Ol01llO00l1
O1ll1llOOl0 = CInt(getattr("optFirstDayOfWeek", O11l11ll1O1))
If Not Ol1l00Ollll(Olll1ll1l1l, Ol11llO0lO0, Ol01llO0lO0) Then
MsgBox Olll1ll1l1l
Exit Sub
End If
O11l01llOOl = Ol01llO0lO0 - Ol11llO0lO0 + 1
Olll1ll1l11 = O00O00l1OOl(argworkbook:=Ol01llOlll0, argsheet:=schedule, argtaskcount:=taskcount)
O11l01llOOl = O11l01llOOl + Olll1ll1l11
Columns(O000lOlO1O0 & ":" & O000lOlO1O0).Select
Range(Selection, Selection.End(xlToRight)).Select
With Selection
.HorizontalAlignment = xlLeft
.VerticalAlignment = xlCenter
.WrapText = False
.Orientation = 0
.AddIndent = False
.IndentLevel = 0
.ShrinkToFit = False
.ReadingOrder = xlContext
.MergeCells = False
.Interior.Pattern = xlNone
.Font.ColorIndex = xlAutomatic
End With
Selection.Delete shift:=xlToLeft
ActiveWorkbook.Names.Add name:="RNG_GANTT_AREA_FIRST_COL_NAME", RefersTo:=Range(O000lOlO1O0 & Ol1lOlOlO10 - 1)
OOl0Ol0l001 Ol01llOlll0, schedule, Range(O000lOlO1O0 & Ol1lOlOlO10 - 1 & ":" & O0ll00l1lll(O001lOlO1O0 + O11l01llOOl) & Ol1lOlOlO10 - 1)
Olll1ll1OOl = Ol11llO0lO0 - Olll1ll1l11
If Ol01llO00l1 = 30 Then
Olll1ll1OOl = Olll1ll1OOl - (Day(Olll1ll1OOl) - 1)
O11l01llOOl = O11l01llOOl + (Day(Olll1ll1OOl) - 1)
O11l01llOOl = O11l01llOOl + Day(DateSerial(Year(Olll1ll1OOl + O11l01llOll), Month(Olll1ll1OOl + O11l01llOll) + 1, 0)) - Day(Ol01llO0lO0)
Else
Olll1ll1l10 = Weekday(Olll1ll1OOl)
If O1ll1llOOl0 > Olll1ll1l10 Then
Olll1ll1lOl = (Olll1ll1l10 - O1ll1llOOl0) + 7
Else
Olll1ll1lOl = (Olll1ll1l10 - O1ll1llOOl0)
End If
Olll1ll1OOl = Olll1ll1OOl - Olll1ll1lOl
O11l01llOOl = O11l01llOOl + Olll1ll1lOl
O11l01llOOl = O11l01llOOl + (7 - (Weekday(Olll1ll1OOl + O11l01llOOl)) + (O1ll1llOOl0 - 1))
End If
O11l11l1Oll = OlOll010000(Ol01llO00l1, "WidthOfDuration", CDbl(getattr("txtGanttChartZoomRatio", Ol1l11ll1O1)) / 100)
If Ol01llO00l1 = 1 Then
If CDbl(getattr("txtGanttChartZoomRatio", Ol1l11ll1O1)) >= 100 Then
Ol1l11l1Oll = 7
Else
Ol1l11l1Oll = Application.WorksheetFunction.ceiling(3.7 / O11l11l1Oll, 1)
End If
Else
Ol1l11l1Oll = Application.WorksheetFunction.ceiling(3.7 / O11l11l1Oll, 1)
End If
O11l01llOll = 0
O11l11llOll = 0
Ol1l1ll1Oll = 0
While O11l01llOll <= O11l01llOOl
Cells(Ol1lOlOlO10 - 1, O001lOlO1O0 + O11l11llOll).Value = Olll1ll1OOl + O11l01llOll
If Ol01llO00l1 = 30 Then
If (O11l11llOll Mod Ol1l11l1Oll) = 0 Then
With Range(O0ll00l1lll(O001lOlO1O0 + O11l11llOll) & Ol1lOlOlO10 - 2 & ":" & O0ll00l1lll(O001lOlO1O0 + O11l11llOll + Ol1l11l1Oll - 1) & Ol1lOlOlO10 - 2)
.Merge
.Value = Olll1ll1OOl + O11l01llOll
End With
Ol1l1ll1Oll = Ol1l1ll1Oll + 1
If (Ol1l1ll1Oll Mod 6) = 0 Then
Oll0lO100ll 0, "Schedule", Range(O0ll00l1lll(O001lOlO1O0 + O11l11llOll + Ol1l11l1Oll - 1) & Ol1lOlOlO10 - 1), Range(O0ll00l1lll(O001lOlO1O0 + O11l11llOll + Ol1l11l1Oll - 1) & taskcount + Ol1lOlOlO10 - 1), 0, 12566463
End If
End If
Olll1l11l10 = Day(DateSerial(Year(Olll1ll1OOl + O11l01llOll), Month(Olll1ll1OOl + O11l01llOll) + 1, 0))
Else
If (O11l11llOll Mod Ol1l11l1Oll) = 0 Then
With Range(O0ll00l1lll(O001lOlO1O0 + O11l11llOll) & Ol1lOlOlO10 - 2 & ":" & O0ll00l1lll(O001lOlO1O0 + O11l11llOll + Ol1l11l1Oll - 1) & Ol1lOlOlO10 - 2)
.Merge
.Value = Olll1ll1OOl + O11l01llOll
End With
Ol1l1ll1Oll = Ol1l1ll1Oll + 1
If (Ol1l1ll1Oll Mod 4) = 0 Then
Oll0lO100ll 0, "Schedule", Range(O0ll00l1lll(O001lOlO1O0 + O11l11llOll + Ol1l11l1Oll - 1) & Ol1lOlOlO10 - 1), Range(O0ll00l1lll(O001lOlO1O0 + O11l11llOll + Ol1l11l1Oll - 1) & taskcount + Ol1lOlOlO10 - 1), 0, 12566463
End If
End If
End If
O11l01llOll = O11l01llOll + Olll1l11l10
O11l11llOll = O11l11llOll + 1
Wend
Range(O000lOlO1O0 & Ol1lOlOlO10 - 2 & ":" & O0ll00l1lll(O11l11llOll - 1 + O001lOlO1O0) & Ol1lOlOlO10 - 1).Select
With Selection
.NumberFormatLocal = "mm/dd"
.HorizontalAlignment = xlLeft
With Selection.Interior
.Pattern = xlSolid
.PatternColorIndex = xlAutomatic
.Color = Ol1lOlOOl10
.TintAndShade = 0
End With
With Selection.Font
.ThemeColor = xlThemeColorDark1
.TintAndShade = 0
End With
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = 0
.Weight = xlThin
End With
With Selection.Borders(xlEdgeRight)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = 0
.Weight = xlThin
End With
With Selection.Borders(xlInsideVertical)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -4.99893185216834E-02
.Weight = xlThin
End With
End With
Range(O000lOlO1O0 & Ol1lOlOlO10 - 1 & ":" & O0ll00l1lll(O11l01llOOl + O001lOlO1O0) & Ol1lOlOlO10 - 1).Font.Color = Ol1lOlOOl10
O10O10OO001 taskcount, O11l01llOOl
Columns(O000lOlO1O0 & ":" & O0ll00l1lll(O11l01llOOl + O001lOlO1O0)).ColumnWidth = O11l11l1Oll
If getattr("optPlanRateCriteriaDate", O11l11ll1O1) = "TODAY" Then
O1ll1llOll0 = Date
Else
O1ll1llOll0 = getattr("optPlanRateCriteriaDate", O11l11ll1O1)
End If
If Ol01llO0lO0 > O1ll1llOll0 Then
If Ol01llO00l1 = 30 Then
Olll1llOl10 = OOlll111O01(0, Olll1ll1OOl, (O1ll1llOll0 + 1) - Olll1ll1OOl, Olll1l10l10, Olll1l1Ol10) + O001lOlO1O0
Olll1llOll0 = Olll1l10l10 / Olll1l1Ol10
Else
Olll1llOl10 = (((O1ll1llOll0 + 1) - Olll1ll1OOl) \ Ol01llO00l1) + O001lOlO1O0
Olll1llOll0 = (((O1ll1llOll0 + 1) - Olll1ll1OOl) Mod Ol01llO00l1) / Ol01llO00l1
End If
Oll0lO100ll _
1, _
"Schedule", _
Range(O0ll00l1lll(Olll1llOl10) & Ol1lOlOlO10 - 1), _
Range(O0ll00l1lll(Olll1llOl10) & taskcount + Ol1lOlOlO10 - 1), _
Olll1llOll0, _
255
End If
Range(O000lOlO1O0 & Ol1lOlOlO10 - 1).Select
Application.DisplayAlerts = True
Exit Sub
catch:
If (Err.Number <> 0) Then
Application.DisplayAlerts = True
MsgBox ("Error code(Gantt Area Formatting) : " & Err.Number & Chr(13) & Err.Description)
End If
End Sub
Sub O1ll1lOOOl0(taskcount As Long)
Dim O1ll1lOOll0 As Long
Dim O1ll1lOOlO0 As Long
Dim O1ll0lOOlO0 As Long
Dim O1ll0lOllO0 As Double
Dim O1ll0llllO0 As Integer
Dim O1ll0OlllO0 As Long
Dim O1ll0O1llO0 As Range
Dim O1ll0O1lOO0 As Date
Dim O1ll001lOO0 As Integer
Dim O1ll001lO00 As String
Dim O1l1001lO00 As String
Dim O1l1011lO00 As Long
Dim O1l1011lO01 As Long
Dim O1l1011lO11 As Long
Dim O1l0011lO11 As Long
Dim O1l001llO11 As Integer
Dim O1lO01llO11 As Long
Dim O1lO01llO10 As Single
Dim O1lO01lll11 As Date
Dim O1OO01lll11 As Integer
On Error GoTo catch
Application.DisplayAlerts = False
With Workbooks(Ol01llO1ll0).Worksheets(schedule)
If .AutoFilterMode Then
.AutoFilterMode = False
End If
Ol11llO0lO0 = CDate(getattr("projectStartDate", O11l11ll1O1))
Ol01llO0lO0 = CDate(getattr("projectEndDate", O11l11ll1O1))
Ol01llO00l1 = CInt(getattr("optGanttChartColumnDisplay", Ol1l11ll1O1))
O1l1011lO11 = Ol01llO00l1
O1OO01lll11 = CInt(getattr("optFirstDayOfWeek", O11l11ll1O1))
If Not Ol1l00Ollll(O1l1001lO00, Ol11llO0lO0, Ol01llO0lO0) Then
MsgBox O1l1001lO00
Exit Sub
End If
O1ll1lOOll0 = Ol01llO0lO0 - Ol11llO0lO0 + 1
O1l1011lO00 = O00O00l1OOl(argworkbook:=Ol01llOlll0, argsheet:=schedule, argtaskcount:=taskcount)
O1ll1lOOll0 = O1ll1lOOll0 + O1l1011lO00
.Columns(O000lOlO1O0 & ":" & O000lOlO1O0).Select
.Range(Selection, Selection.End(xlToRight)).Select
With Selection
.HorizontalAlignment = xlLeft
.VerticalAlignment = xlCenter
.WrapText = False
.Orientation = 0
.AddIndent = False
.IndentLevel = 0
.ShrinkToFit = False
.ReadingOrder = xlContext
.MergeCells = False
.Interior.Pattern = xlNone
.Font.ColorIndex = xlAutomatic
End With
Selection.Delete shift:=xlToLeft
Workbooks(Ol01llO1ll0).Names.Add name:="RNG_GANTT_AREA_FIRST_COL_NAME", RefersTo:=.Range(O000lOlO1O0 & Ol1lOlOlO10 - 1)
OOl0Ol0l001 Workbooks(Ol01llO1ll0), schedule, .Range(O000lOlO1O0 & Ol1lOlOlO10 - 1 & ":" & O0ll00l1lll(O001lOlO1O0 + O1ll1lOOll0) & Ol1lOlOlO10 - 1)
O1ll0O1lOO0 = Ol11llO0lO0 - O1l1011lO00
If Ol01llO00l1 = 30 Then
O1ll0O1lOO0 = O1ll0O1lOO0 - (Day(O1ll0O1lOO0) - 1)
O1ll1lOOll0 = O1ll1lOOll0 + (Day(O1ll0O1lOO0) - 1)
O1ll1lOOll0 = O1ll1lOOll0 + Day(DateSerial(Year(O1ll0O1lOO0 + O1ll1lOOlO0), Month(O1ll0O1lOO0 + O1ll1lOOlO0) + 1, 0)) - Day(Ol01llO0lO0)
Else
O1l1011lO01 = Weekday(O1ll0O1lOO0)
If O1OO01lll11 > O1l1011lO01 Then
O1ll001lOO0 = (O1l1011lO01 - O1OO01lll11) + 7
Else
O1ll001lOO0 = (O1l1011lO01 - O1OO01lll11)
End If
O1ll0O1lOO0 = O1ll0O1lOO0 - O1ll001lOO0
O1ll1lOOll0 = O1ll1lOOll0 + O1ll001lOO0
O1ll1lOOll0 = O1ll1lOOll0 + (7 - (Weekday(O1ll0O1lOO0 + O1ll1lOOll0)) + (O1OO01lll11 - 1))
End If
O1ll0lOllO0 = OlOll010000(Ol01llO00l1, "WidthOfDuration", CDbl(getattr("txtGanttChartZoomRatio", Ol1l11ll1O1)) / 100)
If Ol01llO00l1 = 1 Then
If CDbl(getattr("txtGanttChartZoomRatio", Ol1l11ll1O1)) >= 100 Then
O1ll0llllO0 = 7
Else
O1ll0llllO0 = Application.WorksheetFunction.ceiling(3.7 / O1ll0lOllO0, 1)
End If
Else
O1ll0llllO0 = Application.WorksheetFunction.ceiling(3.7 / O1ll0lOllO0, 1)
End If
O1ll1lOOlO0 = 0
O1ll0lOOlO0 = 0
O1ll0OlllO0 = 0
While O1ll1lOOlO0 <= O1ll1lOOll0
.Cells(Ol1lOlOlO10 - 1, O001lOlO1O0 + O1ll0lOOlO0).Value = O1ll0O1lOO0 + O1ll1lOOlO0
If Ol01llO00l1 = 30 Then
If (O1ll0lOOlO0 Mod O1ll0llllO0) = 0 Then
With .Range(O0ll00l1lll(O001lOlO1O0 + O1ll0lOOlO0) & Ol1lOlOlO10 - 2 & ":" & O0ll00l1lll(O001lOlO1O0 + O1ll0lOOlO0 + O1ll0llllO0 - 1) & Ol1lOlOlO10 - 2)
.Merge
.Value = O1ll0O1lOO0 + O1ll1lOOlO0
End With
O1ll0OlllO0 = O1ll0OlllO0 + 1
If (O1ll0OlllO0 Mod 6) = 0 Then
Oll0lO100ll 0, "Schedule", .Range(O0ll00l1lll(O001lOlO1O0 + O1ll0lOOlO0 + O1ll0llllO0 - 1) & Ol1lOlOlO10 - 1), .Range(O0ll00l1lll(O001lOlO1O0 + O1ll0lOOlO0 + O1ll0llllO0 - 1) & taskcount + Ol1lOlOlO10 - 1), 0, 12566463
End If
End If
O1l1011lO11 = Day(DateSerial(Year(O1ll0O1lOO0 + O1ll1lOOlO0), Month(O1ll0O1lOO0 + O1ll1lOOlO0) + 1, 0))
Else
If (O1ll0lOOlO0 Mod O1ll0llllO0) = 0 Then
With .Range(O0ll00l1lll(O001lOlO1O0 + O1ll0lOOlO0) & Ol1lOlOlO10 - 2 & ":" & O0ll00l1lll(O001lOlO1O0 + O1ll0lOOlO0 + O1ll0llllO0 - 1) & Ol1lOlOlO10 - 2)
.Merge
.Value = O1ll0O1lOO0 + O1ll1lOOlO0
End With
O1ll0OlllO0 = O1ll0OlllO0 + 1
If (O1ll0OlllO0 Mod 4) = 0 Then
Oll0lO100ll 0, "Schedule", .Range(O0ll00l1lll(O001lOlO1O0 + O1ll0lOOlO0 + O1ll0llllO0 - 1) & Ol1lOlOlO10 - 1), .Range(O0ll00l1lll(O001lOlO1O0 + O1ll0lOOlO0 + O1ll0llllO0 - 1) & taskcount + Ol1lOlOlO10 - 1), 0, 12566463
End If
End If
End If
O1ll1lOOlO0 = O1ll1lOOlO0 + O1l1011lO11
O1ll0lOOlO0 = O1ll0lOOlO0 + 1
Wend
.Range(O000lOlO1O0 & Ol1lOlOlO10 - 2 & ":" & O0ll00l1lll(O1ll0lOOlO0 - 1 + O001lOlO1O0) & Ol1lOlOlO10 - 1).Select
With Selection
.NumberFormatLocal = "mm/dd"
.HorizontalAlignment = xlLeft
With .Interior
.Pattern = xlSolid
.PatternColorIndex = xlAutomatic
.Color = Ol1lOlOOl10
.TintAndShade = 0
End With
With .Font
.ThemeColor = xlThemeColorDark1
.TintAndShade = 0
End With
.Borders(xlEdgeTop).LineStyle = xlNone
.Borders(xlEdgeBottom).LineStyle = xlNone
With .Borders(xlEdgeLeft)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = 0
.Weight = xlThin
End With
With .Borders(xlEdgeRight)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = 0
.Weight = xlThin
End With
With .Borders(xlInsideVertical)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -4.99893185216834E-02
.Weight = xlThin
End With
End With
.Range(O000lOlO1O0 & Ol1lOlOlO10 - 1 & ":" & O0ll00l1lll(O1ll1lOOll0 + O001lOlO1O0) & Ol1lOlOlO10 - 1).Font.Color = Ol1lOlOOl10
O10O10OO001 taskcount, O1ll1lOOll0
.Columns(O000lOlO1O0 & ":" & O0ll00l1lll(O1ll1lOOll0 + O001lOlO1O0)).ColumnWidth = O1ll0lOllO0
If getattr("optPlanRateCriteriaDate", O11l11ll1O1) = "TODAY" Then
O1lO01lll11 = Date
Else
O1lO01lll11 = getattr("optPlanRateCriteriaDate", O11l11ll1O1)
End If
If Ol01llO0lO0 > O1lO01lll11 Then
If Ol01llO00l1 = 30 Then
O1lO01llO11 = OOlll111O01(0, O1ll0O1lOO0, (O1lO01lll11 + 1) - O1ll0O1lOO0, O1l0011lO11, O1l001llO11) + O001lOlO1O0
O1lO01llO10 = O1l0011lO11 / O1l001llO11
Else
O1lO01llO11 = (((O1lO01lll11 + 1) - O1ll0O1lOO0) \ Ol01llO00l1) + O001lOlO1O0
O1lO01llO10 = (((O1lO01lll11 + 1) - O1ll0O1lOO0) Mod Ol01llO00l1) / Ol01llO00l1
End If
Oll0lO100ll _
1, _
"Schedule", _
.Range(O0ll00l1lll(O1lO01llO11) & Ol1lOlOlO10 - 1), _
.Range(O0ll00l1lll(O1lO01llO11) & taskcount + Ol1lOlOlO10 - 1), _
O1lO01llO10, _
255
End If
.Range(O000lOlO1O0 & Ol1lOlOlO10 - 1).Select
End With
Application.DisplayAlerts = True
Exit Sub
catch:
If (Err.Number <> 0) Then
Application.DisplayAlerts = True
MsgBox ("Error code : " & Err.Number & Chr(13) & Err.Description)
End If
End Sub
Sub O10O01lll11()
Dim O10O01lll01 As Double
Dim O10O00lll01 As Double
Dim O10O00lll0l As Long
Dim taskcount As Long
Dim O10O00lOl0l As jobresult
O10O00lOl0l = O101l1l0llO
If O10O00lOl0l.OllO11l1O11 <> 0 Then
MsgBox O10O00lOl0l.message
Exit Sub
End If
With Workbooks(Ol01llO1ll0).Worksheets(schedule)
If .AutoFilterMode Then
.AutoFilterMode = False
End If
O10O00lll0l = (.Range(Oll1OOl1OO0 & Rows.Count).End(xlUp).Row) - Ol1lOlOlO10 + 1
taskcount = O0Ol00l1Oll(argworkbook:=ActiveWorkbook, argsheet:=schedule)
If taskcount < O10O00lll0l Then
taskcount = O10O00lll0l
End If
If taskcount < 1 Then
MsgBox Ol10100l000("There is no input data. Please enter after reformatting.")
Exit Sub
End If
End With
O10O10lOO01 (taskcount)
Ol1l01llOOl (taskcount)
OOlO1l1ll00
End Sub
Sub O10O00lOl01()
Workbooks(Ol01llO1ll0).Worksheets(schedule).Range("A:C").EntireColumn.Hidden = True
End Sub
Sub O10O10lOl01()
Workbooks(Ol01llO1ll0).Worksheets(schedule).Range("A:C").EntireColumn.Hidden = False
End Sub
Sub O10O10lOO01(O10O10lO001 As Long)
On Error GoTo catch
Ol01llOlll0.Worksheets(schedule).Select
If Ol01llOlll0.Worksheets(schedule).AutoFilterMode Then
Ol01llOlll0.Worksheets(schedule).AutoFilterMode = False
End If
Range(OlO1Oll1ll0 & ":" & Ol01O1l1ll0).Select
With Selection
.FormatConditions.Delete
End With
Range(OlO1lll1Ol0 & Ol1lOlOlO10 & ":" & Ol01O1l1ll0 & O10O10lO001 + Ol1lOlOlO10 - 1).Select
Selection.FormatConditions.Add Type:=xlExpression, Formula1:= _
"=($" & Ol00Oll1ll0 & Ol1lOlOlO10 & "=""G"")"
Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
With Selection.FormatConditions(1).Font
.Bold = True
End With
If getattr("groupTaskInteriorGrayDisplay", Ol1l11ll1O1) = OO11OlOOl1l Then
With Selection.FormatConditions(1).Interior
.Color = RGB(242, 242, 242)
End With
End If
With Selection.FormatConditions(1).Borders(xlLeft)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.14996795556505
.Weight = xlThin
End With
With Selection.FormatConditions(1).Borders(xlRight)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.14996795556505
.Weight = xlThin
End With
With Selection.FormatConditions(1).Borders(xlTop)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.14996795556505
.Weight = xlThin
End With
With Selection.FormatConditions(1).Borders(xlBottom)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.14996795556505
.Weight = xlThin
End With
Selection.FormatConditions(1).StopIfTrue = False
If getattr("completeTaskGrayDisplay", Ol1l11ll1O1) = OO11OlOOl1l Then
With Range(OlO1lll1Ol0 & Ol1lOlOlO10 & ":" & Ol01O1l1ll0 & O10O10lO001 + Ol1lOlOlO10 - 1)
.FormatConditions.Add Type:=xlExpression, Formula1:="=($" & O011lOlO1O0 & Ol1lOlOlO10 & "=1)"
.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
With .FormatConditions(1).Font
.ThemeColor = xlThemeColorDark1
.TintAndShade = -0.349986266670736
End With
.FormatConditions(1).StopIfTrue = False
End With
End If
If getattr("optScheduleChangeMgt", O11l11ll1O1) = OO11OlOOl1l Then
With Range(O1OlllOO0O1 & Ol1lOlOlO10 & ":" & O1OlllOO0O1 & O10O10lO001 + Ol1lOlOlO10 - 1 & "," & O1OlllOO011 & Ol1lOlOlO10 & ":" & O1OlllOO011 & O10O10lO001 + Ol1lOlOlO10 - 1)
.FormatConditions.Add Type:=xlExpression, Formula1:="=($" & Oll1OOl1OO0 & Ol1lOlOlO10 & "&$" & OllllOl1OO0 & Ol1lOlOlO10 & "<>$" & O1OlllOO0O1 & Ol1lOlOlO10 & "&$" & O1OlllOO011 & Ol1lOlOlO10 & ")"
.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
With .FormatConditions(1).Interior
.PatternColorIndex = xlAutomatic
.Color = 10092543
.TintAndShade = 0
End With
.FormatConditions(1).StopIfTrue = False
End With
End If
Exit Sub
catch:
If (Err.Number <> 0) Then
MsgBox ("Error code(WBS Area Formatting) : " & Err.Number & Chr(13) & Err.Description)
End If
End Sub
Sub O10O10OO001(O10O10OO011 As Long, O10O10OO111 As Long)
Dim O10O10OO11l As String
Ol01llOlll0.Worksheets(schedule).Select
If Ol01llOlll0.Worksheets(schedule).AutoFilterMode Then
Ol01llOlll0.Worksheets(schedule).AutoFilterMode = False
End If
Range(O000lOlO1O0 & ":" & O000lOlO1O0).Select
Range(Selection, Selection.End(xlToRight)).Select
With Selection
.FormatConditions.Delete
End With
If Ol01llO00l1 = 1 Then
Range(O000lOlO1O0 & Ol1lOlOlO10).Select
Selection.FormatConditions.Add Type:=xlExpression, Formula1:= _
"=COUNTIF(STD_CAL," & O000lOlO1O0 & "$" & Ol1lOlOlO10 - 1 & ")>0"
Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
Selection.FormatConditions(1).Borders(xlLeft).LineStyle = xlNone
Selection.FormatConditions(1).Borders(xlRight).LineStyle = xlNone
With Selection.FormatConditions(1).Borders(xlTop)
.Color = RGB(253, 233, 217)
End With
With Selection.FormatConditions(1).Borders(xlBottom)
.Color = RGB(253, 233, 217)
End With
With Selection.FormatConditions(1).Interior
.Color = RGB(253, 233, 217)
End With
Selection.FormatConditions(1).StopIfTrue = True
End If
Range(O000lOlO1O0 & Ol1lOlOlO10).Select
Selection.Copy
Range(O000lOlO1O0 & Ol1lOlOlO10 & ":" & O0ll00l1lll(O001lOlO1O0 + O10O10OO111) & Ol1lOlOlO10 + O10O10OO011 - 1).Select
Selection.PasteSpecial Paste:=xlPasteFormats, operation:=xlNone, _
skipblanks:=False, Transpose:=False
Application.CutCopyMode = False
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = 0
.Weight = xlThin
End With
With Selection.Borders(xlEdgeTop)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = 0
.Weight = xlThin
End With
With Selection.Borders(xlEdgeBottom)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = 0
.Weight = xlThin
End With
With Selection.Borders(xlEdgeRight)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = 0
.Weight = xlThin
End With
With Selection.Borders(xlInsideVertical)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = 0
.Weight = xlThin
End With
With Selection.Borders(xlInsideHorizontal)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = 0
.Weight = xlThin
End With
If getattr("taskNameDisplayPosition", Ol1l11ll1O1) = OO11OlOOl1O Then
Selection.HorizontalAlignment = xlRight
Else
Selection.HorizontalAlignment = xlLeft
End If
End Sub
Sub O10010OO11l(O10011OO11l As Long, O10001OO11l As Long)
Dim Ol0001OO11l As attr4planratedate
Dim Ol0001OO11O As Long
Dim Ol0001lO11O As String
Dim Ol0001lO11l As Long
Dim Ol0001l011l As Integer
Dim OO0001l011l As String
Ol0001lO11l = 1
On Error GoTo errhandler
Ol01llOlll0.Worksheets(schedule).Select
If Ol01llOlll0.Worksheets(schedule).AutoFilterMode Then
Ol01llOlll0.Worksheets(schedule).AutoFilterMode = False
End If
Ol0001OO11l = O0l00OO111O()
With Rows("1:" & Ol1lOlOlO10 - 3).Interior
.Color = RGB(242, 242, 255)
End With
Range(O000lOlO1O0 & "1:" & O0ll00l1lll(O001lOlO1O0 + 50) & "1").Select
Selection.Merge
With Selection
.HorizontalAlignment = xlLeft
.VerticalAlignment = xlCenter
.WrapText = False
.Orientation = 0
.AddIndent = False
.IndentLevel = 0
.ShrinkToFit = False
.ReadingOrder = xlContext
.MergeCells = True
.Value = "  " & getattr(O00O1Oll1O1) & " " & getattr(version) & " |fffd||fffd|" & getattr(O01O1lll1O1)
.Hyperlinks.Add anchor:=Selection, Address:=getattr(O00O1lll1O1)
End With
With Selection.Font
.name = "Calibri"
.Size = 14
.Strikethrough = False
.Superscript = False
.Subscript = False
.OutlineFont = False
.Shadow = False
.Underline = xlUnderlineStyleNone
.Bold = True
.Color = Ol1lOlOOl10
End With
Ol0001l011l = CInt(getattr("optGanttChartColumnDisplay", Ol1l11ll1O1))
Select Case Ol0001l011l
Case 1
OO0001l011l = Ol10100l000("Daily view")
Case 7
OO0001l011l = Ol10100l000("Weekly view")
Case 30
OO0001l011l = Ol10100l000("Monthly view")
End Select
With Range(O000lOlO1O0 & 2)
.Value = "  " & OO0001l011l & ", Zoom " & getattr("txtGanttChartZoomRatio", Ol1l11ll1O1) & "%"
.Font.name = "Calibri"
.Font.Size = 9
.Font.Color = Ol1lOlOOl10
End With
Rows("1:1").RowHeight = 20
Rows("2:2").RowHeight = 15
Rows(Ol1lOlOlO10 - 2 & ":" & Ol1lOlOlO10 - 2).RowHeight = 20
Rows(Ol1lOlOlO10 - 1 & ":" & Ol1lOlOlO10 - 1).RowHeight = 5
Range(OlO1Oll1ll0 & Ol1lOlOlO10 - 2).Value = "reserved"
Range(Ol00Oll1ll0 & Ol1lOlOlO10 - 2).Value = "task_group"
Range(OlO0Oll1Ol0 & Ol1lOlOlO10 - 2).Value = "wbs_level"
Range(OlO1lll1Ol0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("WBS")
Range(OlO0lll1Ol0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Task") & "*"
Range(OlO0OOl1OO0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Note")
Range(Oll1OOl1OO0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Start") & "*"
Range(OllllOl1OO0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Finish") & "*"
Range(O1lllll1OO0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Calendar")
Range(O0lOlll1OO0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Total\nWork")
Range(O1OOlll1OO0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Planned\nWork")
Range(O1OOllll0O0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Total\nDuration")
Range(O1OOllOl0O1 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Planned\nDuration")
Range(O1OlllOO0O1 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Actual\nStart")
Range(O1OlllOO011 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Actual\nFinish")
Range(O1O1llOO010 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Actual\nTotal Work")
Range(O1O11lOO0l0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Actual\nTotal Duration")
Range(O1O1lllO0l0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Weight")
Range(O0l1lllO0l0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Resources")
Range(O0111llO0l0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Deliverables")
Range(O0111OlO1l0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("Planned\n%Work Complete")
Range(O011lOlO1O0 & Ol1lOlOlO10 - 2).Value = Ol10100l000("%Work\nComplete") & "*"
Range(OlO1Oll1ll0 & Ol1lOlOlO10 & ":" & OlO0Oll1Ol0 & O10011OO11l + Ol1lOlOlO10 - 1 & "," & OlO1lll1Ol0 & Ol1lOlOlO10 & ":" & OlO1lll1Ol0 & O10011OO11l + Ol1lOlOlO10 - 1).ClearContents
With Range(OlO1Oll1ll0 & Ol1lOlOlO10 & ":" & Ol01O1l1ll0 & O10011OO11l + Ol1lOlOlO10 - 1)
With .Borders(xlEdgeLeft)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.149906918546098
.Weight = xlThin
End With
With .Borders(xlEdgeTop)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.149906918546098
.Weight = xlThin
End With
With .Borders(xlEdgeBottom)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.149906918546098
.Weight = xlThin
End With
With .Borders(xlEdgeRight)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.149906918546098
.Weight = xlThin
End With
With .Borders(xlInsideVertical)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.149906918546098
.Weight = xlThin
End With
With .Borders(xlInsideHorizontal)
.LineStyle = xlContinuous
.ThemeColor = 1
.TintAndShade = -0.149906918546098
.Weight = xlThin
End With
End With
Range(OlO1lll1Ol0 & Ol1lOlOlO10 & ":" & OlO1lll1Ol0 & O10011OO11l + Ol1lOlOlO10 - 1).HorizontalAlignment = xlRight
Range(OlO0lll1Ol0 & Ol1lOlOlO10 & ":" & OlO0OlO1OO1 & O10011OO11l + Ol1lOlOlO10 - 1).HorizontalAlignment = xlLeft
With Range(O0111OlO1l0 & Ol1lOlOlO10 & ":" & O0111OlO1l0 & O10011OO11l + Ol1lOlOlO10 - 1, O011lOlO1O0 & Ol1lOlOlO10 & ":" & O011lOlO1O0 & O10011OO11l + Ol1lOlOlO10 - 1)
.Style = "Percent"
.NumberFormatLocal = "0.00%"
End With
Range(O0111OlO1l0 & Ol1lOlOlO10 & ":" & O0111OlO1l0 & O10011OO11l + Ol1lOlOlO10 - 1).ClearContents
Select Case CInt(getattr("optNonWorkingDays", O11l11ll1O1))
Case 1
Range(O0lOlll1OO0 & Ol1lOlOlO10 & ":" & O0lOlll1OO0 & O10011OO11l + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "="""","""",NETWORKDAYS(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "," & OllllOl1OO0 & Ol1lOlOlO10 & "," & "INDIRECT(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & "))))"
Range(O1O1llOO010 & Ol1lOlOlO10 & ":" & O1O1llOO010 & O10011OO11l + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & O1OlllOO0O1 & Ol1lOlOlO10 & "="""","""",NETWORKDAYS(" & O1OlllOO0O1 & Ol1lOlOlO10 & "," & O1OlllOO011 & Ol1lOlOlO10 & "," & "INDIRECT(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & "))))"
Range(O1OOlll1OO0 & Ol1lOlOlO10 & ":" & O1OOlll1OO0 & O10011OO11l + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & Oll1OOl1OO0 & Ol1lOlOlO10 & ">" & Ol0001OO11l.OllO10O1OO0 & ",0,IF(" & OllllOl1OO0 & Ol1lOlOlO10 & "<" & Ol0001OO11l.OllO10O1OO0 & "," & O0lOlll1OO0 & Ol1lOlOlO10 & ",NETWORKDAYS(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "," & Ol0001OO11l.OllO10O1OO0 & "," & "INDIRECT(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")))))"
Case 2
Range(O0lOlll1OO0 & Ol1lOlOlO10 & ":" & O0lOlll1OO0 & O10011OO11l + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "="""","""",NETWORKDAYS(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "," & OllllOl1OO0 & Ol1lOlOlO10 & "))"
Range(O1O1llOO010 & Ol1lOlOlO10 & ":" & O1O1llOO010 & O10011OO11l + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & O1OlllOO0O1 & Ol1lOlOlO10 & "="""","""",NETWORKDAYS(" & O1OlllOO0O1 & Ol1lOlOlO10 & "," & O1OlllOO011 & Ol1lOlOlO10 & "))"
Range(O1OOlll1OO0 & Ol1lOlOlO10 & ":" & O1OOlll1OO0 & O10011OO11l + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & Oll1OOl1OO0 & Ol1lOlOlO10 & ">" & Ol0001OO11l.OllO10O1OO0 & ",0,IF(" & OllllOl1OO0 & Ol1lOlOlO10 & "<" & Ol0001OO11l.OllO10O1OO0 & "," & O0lOlll1OO0 & Ol1lOlOlO10 & ",NETWORKDAYS(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "," & Ol0001OO11l.OllO10O1OO0 & ")))"
Case 3
Range(O0lOlll1OO0 & Ol1lOlOlO10 & ":" & O0lOlll1OO0 & O10011OO11l + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & Oll1OOl1OO0 & Ol1lOlOlO10 & "="""","""",(" & OllllOl1OO0 & Ol1lOlOlO10 & "-" & Oll1OOl1OO0 & Ol1lOlOlO10 & "+1)-COUNTIFS(indirect(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")) ,"">="" & " & Oll1OOl1OO0 & Ol1lOlOlO10 & ",indirect(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")) ,""<="" & " & OllllOl1OO0 & Ol1lOlOlO10 & "))"
Range(O1O1llOO010 & Ol1lOlOlO10 & ":" & O1O1llOO010 & O10011OO11l + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & O1OlllOO0O1 & Ol1lOlOlO10 & "="""","""",(" & O1OlllOO011 & Ol1lOlOlO10 & "-" & O1OlllOO0O1 & Ol1lOlOlO10 & "+1)-COUNTIFS(indirect(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")) ,"">="" & " & O1OlllOO0O1 & Ol1lOlOlO10 & ",indirect(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")) ,""<="" & " & O1OlllOO011 & Ol1lOlOlO10 & "))"
Range(O1OOlll1OO0 & Ol1lOlOlO10 & ":" & O1OOlll1OO0 & O10011OO11l + Ol1lOlOlO10 - 1).Formula = _
"=IF(" & Oll1OOl1OO0 & Ol1lOlOlO10 & ">" & Ol0001OO11l.OllO10O1OO0 & ",0,IF(" & OllllOl1OO0 & Ol1lOlOlO10 & "<" & Ol0001OO11l.OllO10O1OO0 & "," & O0lOlll1OO0 & Ol1lOlOlO10 & ",(" & Ol0001OO11l.OllO10O1OO0 & "-" & Oll1OOl1OO0 & Ol1lOlOlO10 & "+1)-COUNTIFS(indirect(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")),"">="" & " & Oll1OOl1OO0 & Ol1lOlOlO10 & ",indirect(getCalendarRange(" & O1lllll1OO0 & Ol1lOlOlO10 & ")),""<="" & " & Ol0001OO11l.OllO10O1OO0 & ")))"
End Select
Range(OlO0Oll1Ol0 & Ol1lOlOlO10 & ":" & OlO0Oll1Ol0 & O10011OO11l + Ol1lOlOlO10 - 1).Formula = _
"=IF(NOT(" & OlO0lll1Ol0 & Ol1lOlOlO10 & "=""""),1,IF(NOT(" & OOO0lll1Ol0 & Ol1lOlOlO10 & "=""""),2,IF(NOT(" & OlO0lll1OO0 & Ol1lOlOlO10 & "=""""),3,IF(NOT(" & OlO1lll1OO0 & Ol1lOlOlO10 & "=""""),4,IF(NOT(" & OlO0Oll1OO0 & Ol1lOlOlO10 & "=""""),5,IF(NOT(" & OlO00ll1OO0 & Ol1lOlOlO10 & "=""""),6,IF(NOT(" & OlO0OlO1OO1 & Ol1lOlOlO10 & "=""""),7,0)))))))"
Range(O000lOlO1O0 & Ol1lOlOlO10 & ":" & O0ll00l1lll(O10001OO11l + O001lOlO1O0 + 7) & O10011OO11l + Ol1lOlOlO10 - 1).ClearContents
normalend:
Exit Sub
errhandler:
Ol0001OO11O = Err.Number
Ol0001lO11O = Err.Description
If Ol0001OO11O <> 0 Then
MsgBox Ol10100l000("An error occurred while processing. Please check the messages below.") & vbNewLine & vbNewLine & "Error code : " & Ol0001OO11O & vbNewLine & Ol0001lO11O
End If
Resume normalend
End Sub
Sub OO0001l01ll()
Ol01llOlll0.Worksheets(Ol11llO1O10).Select
Ol01llO0ll0 = getattr("optScheduleChangeMgt", O11l11ll1O1)
If Ol01llO0ll0 = OO11OlOOl1l Then
Range("A1") = Ol10100l000("Project Progress - When managing schedule changes")
Range("ACTUAL_WORKLOAD").Offset(0, -1) = Ol10100l000("Performed workload on planned schedule")
Range("ACTUAL_WORKLOAD").Offset(0, 2) = Ol10100l000("Performed workload on planned schedule when managing schedule changes(Total Duration x %Work Complete)")
Else
Range("A1") = Ol10100l000("Project Progress - When not managing schedule changes")
Range("ACTUAL_WORKLOAD").Offset(0, -1) = Ol10100l000("Actually performed workload")
Range("ACTUAL_WORKLOAD").Offset(0, 2) = Ol10100l000("Actually performed workload when not managing schedule changes(Total Duration x %Work Complete)")
End If
OlOOOl0ll11 Range("A1")
Range("A2").Value = Ol10100l000("* This sheet shows you workload and %Work complete.")
Range("A3").Value = Ol10100l000("* Automactically calulated if you click the ""Update Schedule"" button")
Range("TOTAL_WORKLOAD").Offset(0, -1).Value = Ol10100l000("Total workload of the project")
Range("TOTAL_WORKLOAD").Offset(0, 1).Value = "Man/Day"
Range("TOTAL_WORKLOAD").Offset(0, 2).Value = Ol10100l000("Display the total workload of the project")
Range("PLANNED_WORKLOAD").Offset(0, -1).Value = Ol10100l000("Planned workload")
Range("PLANNED_WORKLOAD").Offset(0, 1).Value = "Man/Day"
Range("PLANNED_WORKLOAD").Offset(0, 2).Value = Ol10100l000("Planned workload from the start date to the current date")
Range("ACTUAL_WORKLOAD2").Offset(0, -1).Value = Ol10100l000("Actually Performed workload")
Range("ACTUAL_WORKLOAD2").Offset(0, 1).Value = "Man/Day"
Range("ACTUAL_WORKLOAD2").Offset(0, 2).Value = Ol10100l000("Actually Performed workload when managing schedule changes")
Range("PLANNED_RATE").Offset(0, -1).Value = Ol10100l000("Planned %Work Complete(A)")
Range("PLANNED_RATE").Offset(0, 2).Value = Ol10100l000("Planned %Work Complete from the start date to the current date")
Range("ACTUAL_RATE").Offset(0, -1).Value = Ol10100l000("%Work Complete(B)")
Range("ACTUAL_RATE").Offset(0, 2).Value = Ol10100l000("Actual %Work Complete from the start date to the current date")
Range("RATE_GAP").Offset(0, -1).Value = Ol10100l000("Schedule Variance(B-A)")
Range("RATE_GAP").Offset(0, 2).Value = Ol10100l000("Positive - ahead of schedule, Negative - behind schedule")
With ActiveWindow
.SplitColumn = 0
.SplitRow = 1
End With
ActiveWindow.FreezePanes = True
End Sub
Sub OO0001l01Ol()
Ol01llOlll0.Worksheets(Ol11llO1OO0).Select
Range("A1").Value = Ol10100l000(" Setting nonworking days in the project calendar")
OlOOOl0ll11 Range("A1")
Range("A2:H2").Value = Ol10100l000("[2]Please enter nonworking days only. All days other than nonworking days will be set as working days. \nWhen you enter nonworking days, XLGantt excludes them from calculations of working time.\n(However, depending on the calendar setting in the Options window, the calculation method of the nonworking day can be different)\nStandard calendar is the default calendar. If you want to specify a different calendar for a specific task, please use ""User Defined Calendar 1"" or ""User Defined Calendar 2"".")
Range("A3:B3").Value = Ol10100l000("Standard Calendar")
Range("D3:E3").Value = Ol10100l000("User Defined Calendar 1")
Range("G3:H3").Value = Ol10100l000("User Defined Calendar 2")
Range("A4,D4,G4").Value = Ol10100l000("Name of Nonworking Days")
Range("B4,E4,H4").Value = Ol10100l000("Nonworking Days")
Range("C5:C304,F5:F304,I5:I304").FormulaR1C1 = "=IF(RC[-1]>0,TEXT(RC[-1],""(aaa)""),"""")"
Range("A305,D305,G305").Value = Ol10100l000("You can not enter any more.")
With ActiveWindow
.SplitColumn = 0
.SplitRow = 1
End With
ActiveWindow.FreezePanes = True
End Sub
Sub OO0001l00Ol(OO1001l00Ol As String)
Dim Ol1001l00Ol As Long
Dim Ol1001100Ol As Long
Dim Ol1000100Ol As Long
Dim Ol1000100O1 As Long
Dim Oll000100O1 As Date
Dim Oll100100O1 As Date
Dim Oll100101O1 As Date
Dim Oll000101O1 As Date
Dim Oll000101l1 As Long
Dim Oll000l01l1 As Range
Dim Oll000l0111 As Double
Dim Oll000lO111 As Long
Dim Oll100lO111 As String
Dim Oll110lO111 As jobresult
Dim Oll110lO110 As New adodb.Recordset
Dim Oll010lO110 As String
Dim OllO10lO110 As String
Dim OOlO10lO110 As String
On Error GoTo catch
Oll110lO111 = O10O11lOO1l(OO1001l00Ol)
If Oll110lO111.OllO11l1O11 < 0 Then
MsgBox Oll110lO111.message
Exit Sub
End If
Workbooks(Ol01llO1ll0).Worksheets(Ol11llO1O00).Select
OOlO1O1ll10 Ol11llO1O00
Columns("A:A").ColumnWidth = 1
If OO1001l00Ol = "W" Then
OOlO10lO110 = Ol10100l000("Weeks")
ElseIf OO1001l00Ol = "M" Then
OOlO10lO110 = Ol10100l000("Months")
Else
MsgBox Ol10100l000("Time bucket type is invalid.")
Exit Sub
End If
Range("B1").Value = Ol10100l000("Workloads by {}", OOlO10lO110)
OlOOOl0ll11 Range("B1")
Range("B2").Value = Ol10100l000("* This sheet shows you workload allocations by weeks or months.")
Range("B3").Value = Ol10100l000("* You need to click the ""Workloads by Weeks"" or ""Workloads by Months"" button to update the contents.")
Range("C4").Value = Ol10100l000("Days (Average number of working days per month)")
With Range("B4")
.Value = 21
With .Borders(xlEdgeLeft)
.LineStyle = xlContinuous
.ColorIndex = 0
.TintAndShade = 0
.Weight = xlThin
End With
With .Borders(xlEdgeTop)
.LineStyle = xlContinuous
.ColorIndex = 0
.TintAndShade = 0
.Weight = xlThin
End With
With .Borders(xlEdgeBottom)
.LineStyle = xlContinuous
.ColorIndex = 0
.TintAndShade = 0
.Weight = xlThin
End With
With .Borders(xlEdgeRight)
.LineStyle = xlContinuous
.ColorIndex = 0
.TintAndShade = 0
.Weight = xlThin
End With
End With
Range("B6").Value = Ol10100l000("Start")
Range("C6").Value = Ol10100l000("Finish")
Range("D6").Value = Ol10100l000("Man-Day")
Range("E6").Value = Ol10100l000("Man-Month")
With Range("F6:O6")
.Merge
.Value = Ol10100l000("Chart")
End With
OlOO0l1ll11 Range("B6:F6")
Oll010lO110 = "SELECT [timebucket_start],[timebucket_finish], SUM([workload]) AS workloads FROM [Workload$] where [task] > '' GROUP BY [timebucket_start], [timebucket_finish]"
OllO10lO110 = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & Ol01llOlll0.path & "\" & ActiveWorkbook.name & ";" & "Extended Properties=Excel 12.0;"
Oll110lO110.Open Oll010lO110, OllO10lO110, adOpenStatic, adLockReadOnly, adCmdText
If Not Oll110lO110.EOF Then
Do Until (Oll110lO110.EOF = True)
Cells(Ol11OlOlO10 + Ol1000100Ol, 2) = Oll110lO110("timebucket_start").Value
Cells(Ol11OlOlO10 + Ol1000100Ol, 3) = Oll110lO110("timebucket_finish").Value
Cells(Ol11OlOlO10 + Ol1000100Ol, 4) = Oll110lO110("workloads").Value
If Oll110lO110("workloads").Value > Oll000l0111 Then
Oll000l0111 = Oll110lO110("workloads").Value
End If
Oll110lO110.MoveNext
Ol1000100Ol = Ol1000100Ol + 1
Loop
End If
Oll110lO110.Close
Set Oll110lO110 = Nothing
If Ol1000100Ol < 1 Then
MsgBox Ol10100l000("There is no input data")
Exit Sub
End If
If Oll000l0111 > 200 Then
Oll000lO111 = (Oll000l0111 / 200) + 1
Else
Oll000lO111 = 1
End If
Range("E" & Ol11OlOlO10).FormulaR1C1 = "=RC[-1]/R4C2"
Range("E" & Ol11OlOlO10).Select
Selection.Copy
Range("E" & Ol11OlOlO10 & ":E" & Ol1000100Ol + Ol11OlOlO10 - 1).Select
ActiveSheet.Paste
Selection.NumberFormatLocal = "0.00"
Range("C" & Ol1000100Ol + Ol11OlOlO10).FormulaR1C1 = "Total"
Range("D" & Ol1000100Ol + Ol11OlOlO10).FormulaR1C1 = "=SUM(R[-" & Ol1000100Ol & "]C:R[-1]C)"
Range("E" & Ol1000100Ol + Ol11OlOlO10).Select
ActiveCell.FormulaR1C1 = "=RC[-1]/R4C2"
Selection.NumberFormatLocal = "0.00"
With Range("F" & Ol11OlOlO10 & ":F" & Ol1000100Ol + Ol11OlOlO10 - 1)
.FormulaR1C1 = "=REPT(""|"",IF(RC[-2]>0,IF(RC[-2]/" & Oll000lO111 & "<1,1,RC[-2]/" & Oll000lO111 & ")))"
End With
OOlO0l1ll11 _
argnumberrange1:=Range("B" & Ol11OlOlO10 & ":C" & Ol1000100Ol + Ol11OlOlO10 - 1), _
argnumberformat1:="yyyy-mm-dd", _
argfontrange:=Range("F" & Ol11OlOlO10 & ":F" & Ol1000100Ol + Ol11OlOlO10 - 1), _
argfontname:="Arial Narrow", _
arglinerange:=Range("B" & Ol11OlOlO10 & ":O" & Ol1000100Ol + Ol11OlOlO10 - 1)
Worksheets(Ol11llO1O00).Calculate
Range("A1").Select
Exit Sub
catch:
Application.Calculation = Ol01llO00l0
If (Err.Number <> 0) Then
MsgBox ("Error code(Workload Calculation) : " & Err.Number & Chr(13) & Err.Description)
End If
End Sub
Sub OO1O10lO110()
Dim OO1O10lO010 As Long
Dim OO1O11lO010 As Long
Dim OO1O11lO011 As Long
Dim OO1O01lO011 As Long
Dim OO1O00lO011 As Long
Dim OO1O10lO011 As Long
Dim Ol1O10lO011() As resourcebyman
Dim Ol1O10ll011() As Variant
Dim Ol1O00ll011 As Long
Dim Ol1O00llO11 As String
Dim Ol1O00OlO11 As Double
Dim Ol1O00OlO1l As Double
Dim Ol1O00OOO1l As Boolean
Dim Ol1O00lOO1l As Variant
Dim O11O00lOO1l As Long
Dim O10O00lOO1l As String
Dim O10O00OOO1l As jobresult
Dim O00O00OOO1l As Long
Dim O00O10OOO1l As String
Dim O10O10OOO1l As Worksheet
Dim O10O10lOO1l As Worksheet
On Error GoTo catch
O10O00OOO1l = O101l1l0llO
If O10O00OOO1l.OllO11l1O11 <> 0 Then
MsgBox O10O00OOO1l.message
Exit Sub
End If
OOlO1l1ll00 argjobresultcode:=O00O00OOO1l, argjobresultmsg:=O00O10OOO1l
If O00O00OOO1l < 0 Then
MsgBox Ol10100l000("The process was terminated due to the {} sheet error.", schedule) & vbNewLine & vbNewLine & O00O10OOO1l
Exit Sub
End If
Set O10O10OOO1l = Ol01llOlll0.Sheets(schedule)
Set O10O10lOO1l = Ol01llOlll0.Sheets(Ol11llO1O00)
OO1O10lO011 = 0
Ol1O00OlO1l = 0
O10O10OOO1l.Select
OO1O11lO010 = (Range(Oll1OOl1OO0 & Rows.Count).End(xlUp).Row) - Ol1lOlOlO10 + 1
If OO1O11lO010 < 1 Then
MsgBox Ol10100l000("There is no input data")
Exit Sub
End If
Ol1O10ll011 = Range(OlO1Oll1ll0 & Ol1lOlOlO10 & ":" & O011lOlO1O0 & OO1O11lO010 + Ol1lOlOlO10 - 1)
For OO1O11lO011 = 1 To UBound(Ol1O10ll011, 1)
If Ol1O10ll011(OO1O11lO011, Ol01Oll1ll0) <> "G" Then
If (Ol1O10ll011(OO1O11lO011, Oll0OOl1OO0) > "" And Ol1O10ll011(OO1O11lO011, Oll1lOl1OO0) > "") Then
Ol1O00lOO1l = ""
O10O00lOO1l = Trim(Ol1O10ll011(OO1O11lO011, O1l1lllO0l0))
If O10O00lOO1l <> "" Then
If Mid(O10O00lOO1l, Len(O10O00lOO1l), 1) = "," Then
O10O00lOO1l = Mid(O10O00lOO1l, 1, Len(O10O00lOO1l) - 1)
End If
End If
If O10O00lOO1l = "" Then
Ol1O00lOO1l = Split(Ol10100l000("[Resources unspecified]"), ",")
Else
Ol1O00lOO1l = Split(O10O00lOO1l, ",")
End If
O11O00lOO1l = UBound(Ol1O00lOO1l)
For OO1O00lO011 = 0 To O11O00lOO1l
ReDim Preserve Ol1O10lO011(OO1O10lO011)
Ol1O10lO011(OO1O10lO011).O1lO11Ol1O1 = Ol1O10ll011(OO1O11lO011, OlO1Oll1Ol0)
Ol1O10lO011(OO1O10lO011).O1lO01Ol1O1 = Ol1O10ll011(OO1O11lO011, OlO1lOl1Ol0 + Ol1O10ll011(OO1O11lO011, OlO0Oll1ll0) - 1)
Ol1O10lO011(OO1O10lO011).O1ll00O1lO0 = Trim(Ol1O00lOO1l(OO1O00lO011))
Ol1O10lO011(OO1O10lO011).O1lO01O11O1 = Ol1O10ll011(OO1O11lO011, Oll0OOl1OO0)
Ol1O10lO011(OO1O10lO011).O1lO01O11O0 = Ol1O10ll011(OO1O11lO011, Oll1lOl1OO0)
Ol1O10lO011(OO1O10lO011).OlOl11Ol1O1 = Ol1O10ll011(OO1O11lO011, O1lOlll1OO0) / (O11O00lOO1l + 1)
Ol1O10lO011(OO1O10lO011).OlOl01Ol1O1 = Ol1O10ll011(OO1O11lO011, O0OOlll1OO0) / (O11O00lOO1l + 1)
Ol1O10lO011(OO1O10lO011).Olll00l1lOO = Ol1O10ll011(OO1O11lO011, O1O1llOO0l0)
Ol1O10lO011(OO1O10lO011).O1ll00l1lO0 = Ol1O10ll011(OO1O11lO011, O0111OlO0l0)
Ol1O10lO011(OO1O10lO011).actualrate = Ol1O10ll011(OO1O11lO011, O011lOlO1l0)
If Ol01llO0ll0 = OO11OlOOl1l Then
Ol1O10lO011(OO1O10lO011).Olll01l11O0 = Ol1O10ll011(OO1O11lO011, O1OOllOO0O1)
Ol1O10lO011(OO1O10lO011).Olll01l11OO = Ol1O10ll011(OO1O11lO011, O1OlllOO0l1)
Ol1O10lO011(OO1O10lO011).O1Ol01OO1O1 = Ol1O10ll011(OO1O11lO011, O1O1llOO011) / (O11O00lOO1l + 1)
End If
OO1O10lO011 = OO1O10lO011 + 1
Next OO1O00lO011
Ol1O00OlO1l = Ol1O00OlO1l + Ol1O10ll011(OO1O11lO011, O1lOlll1OO0)
End If
End If
Next OO1O11lO011
If OO1O11lO011 < 1 Then
MsgBox Ol10100l000("There is no input data")
Exit Sub
End If
O10O10lOO1l.Select
OOlO1O1ll10 Ol11llO1O00
Range("A1").Value = Ol10100l000("Progresses by Resources")
OlOOOl0ll11 Range("A1")
Range("A2").Value = Ol10100l000("* This sheet shows you tasks, workloads, progresses(%Work complete), etc by resources.")
Range("A3").Value = Ol10100l000("* You need to click the ""Progresses by Resources"" button to update contents.")
Range("A6").Value = Ol10100l000("Resources")
Range("B6").Value = Ol10100l000("WBS")
Range("C6").Value = Ol10100l000("Task")
Range("D6").Value = Ol10100l000("Start")
Range("E6").Value = Ol10100l000("Finish")
Range("F6").Value = Ol10100l000("Weight")
Range("G6").Value = Ol10100l000("Total Work(A)\nMan-day")
Range("H6").Value = Ol10100l000("Planned Work(B)\nMan-day")
Range("I6").Value = Ol10100l000("Performed Work(C)\nMan-day")
Range("J6").Value = Ol10100l000("Planned %Work Complete(B/A)")
Range("K6").Value = Ol10100l000("%Work Complete(C/A)")
Range("L6").Value = Ol10100l000("Variance(Actual-Planned)")
If Ol01llO0ll0 = OO11OlOOl1l Then
Range("M6").Value = Ol10100l000("Actual Start")
Range("N6").Value = Ol10100l000("Actual Finish")
Range("O6").Value = Ol10100l000("Actual Total Work\nMan-day")
OlOO0l1ll11 Range("A6:O6")
Else
OlOO0l1ll11 Range("A6:L6")
End If
For OO1O11lO011 = 0 To UBound(Ol1O10lO011)
Cells(Ol11OlOlO10 + OO1O11lO011, 1) = Ol1O10lO011(OO1O11lO011).O1ll00O1lO0
Cells(Ol11OlOlO10 + OO1O11lO011, 2) = Ol1O10lO011(OO1O11lO011).O1lO11Ol1O1
OllOl1l1O11 _
fromsheet:=O10O10lOO1l, _
fromrange:=Range(Cells(Ol11OlOlO10 + OO1O11lO011, 2), Cells(Ol11OlOlO10 + OO1O11lO011, 2)), _
tosheet:=Worksheets(schedule), _
searchrange:=Worksheets(schedule).Range(OlO1lll1Ol0 & Ol1lOlOlO10 & ":" & OlO1lll1Ol0 & OO1O11lO010 + Ol1lOlOlO10 - 1), _
searchstartrow:=Ol1lOlOlO10, _
searchvalue:=Ol1O10lO011(OO1O11lO011).O1lO11Ol1O1
Cells(Ol11OlOlO10 + OO1O11lO011, 3) = Ol1O10lO011(OO1O11lO011).O1lO01Ol1O1
Cells(Ol11OlOlO10 + OO1O11lO011, 4) = Ol1O10lO011(OO1O11lO011).O1lO01O11O1
Cells(Ol11OlOlO10 + OO1O11lO011, 5) = Ol1O10lO011(OO1O11lO011).O1lO01O11O0
Cells(Ol11OlOlO10 + OO1O11lO011, 6) = Ol1O10lO011(OO1O11lO011).Olll00l1lOO
Cells(Ol11OlOlO10 + OO1O11lO011, 7) = Ol1O10lO011(OO1O11lO011).OlOl11Ol1O1
Cells(Ol11OlOlO10 + OO1O11lO011, 8) = Ol1O10lO011(OO1O11lO011).OlOl01Ol1O1
Cells(Ol11OlOlO10 + OO1O11lO011, 9) = Ol1O10lO011(OO1O11lO011).OlOl11Ol1O1 * Ol1O10lO011(OO1O11lO011).actualrate
Cells(Ol11OlOlO10 + OO1O11lO011, 10) = Ol1O10lO011(OO1O11lO011).O1ll00l1lO0
Cells(Ol11OlOlO10 + OO1O11lO011, 11) = Ol1O10lO011(OO1O11lO011).actualrate
If Ol01llO0ll0 = OO11OlOOl1l Then
If Ol1O10lO011(OO1O11lO011).Olll01l11O0 > 0 Then
Cells(Ol11OlOlO10 + OO1O11lO011, 13) = Ol1O10lO011(OO1O11lO011).Olll01l11O0
End If
If Ol1O10lO011(OO1O11lO011).Olll01l11OO > 0 Then
Cells(Ol11OlOlO10 + OO1O11lO011, 14) = Ol1O10lO011(OO1O11lO011).Olll01l11OO
End If
Cells(Ol11OlOlO10 + OO1O11lO011, 15) = Ol1O10lO011(OO1O11lO011).O1Ol01OO1O1
End If
Next OO1O11lO011
Erase Ol1O10lO011
Ol1O00OlO11 = Worksheets(Ol11llO1O10).Range("TOTAL_WORKLOAD").Value
If Format(Ol1O00OlO11, "#0.00000") <> Format(Ol1O00OlO1l, "#0.00000") Then
MsgBox Ol10100l000("Error! Calculated Total Man-Day is different from the Total Man-Day of the {} sheet.", schedule)
End If
OlOOlll1O10 argrowcount:=OO1O11lO011 + 1
Cells.EntireColumn.AutoFit
Columns("A:A").ColumnWidth = 20
Range("A" & Ol11OlOlO10).Select
With ActiveWindow
.FreezePanes = False
.ScrollRow = 1
.ScrollColumn = 1
.FreezePanes = True
.ScrollRow = Ol11OlOlO10 - 1
End With
Ol01llOlll0.Worksheets(Ol11llO1O00).Calculate
Range("A1").Select
Exit Sub
catch:
Application.Calculation = Ol01llO00l0
If (Err.Number <> 0) Then
MsgBox ("Error code(Workload Calculations by Resources) : " & Err.Number & Chr(13) & Err.Description)
End If
End Sub
Function O10O11lOO1l(O10O11lOl1l As String) As jobresult
Dim O10O10lOl1l As Long
Dim O10O10lOl0l As Long
Dim O10O101Ol0l As Long
Dim O10O1010l0l As Long
Dim O11O1010l0l As Long
Dim O1101010l0l As Range
Dim O1101010l0O As Range
Dim O1101010l00 As Date
Dim O1101010l01() As Variant
Dim Ol101010l01 As Long
Dim Ol101010l11 As Date
Dim Ol111010l01 As Date
Dim Ol011010l01 As Date
Dim Ol0l1010l01 As Date
Dim Ol0l1010l11 As Long
Dim O10l1010l01 As Range
Dim O10l101Ol01 As Double
Dim O10l101OO01 As Long
Dim O10O101OO01 As String
Dim O10O101OOO1 As String
Dim O10O100OOO1 As Double
Dim O10O100OO01 As Double
Dim Ol0O100OO01 As jobresult
Dim Ol1O100OO01 As Variant
Dim Ol1O100OO00 As Long
Dim Ol1O10OOO00 As String
Dim Ol1O10lOO00() As resourcebyman
Dim Ol0O10lOO00 As Long
Dim Ol0O10lO000 As Double
Dim Ol0O10lO100 As Long
Dim Ol0Ol0lO100 As String
Dim Ol0Ol0ll100 As Integer
Dim OO0Ol0ll100 As Long
Dim OO0O10ll100 As Integer
On Error GoTo catch
Ol01llOlll0.Worksheets("Workload").Visible = xlSheetVisible
Ol0O100OO01 = O101l1l0llO
If Ol0O100OO01.OllO11l1O11 <> 0 Then
O10O11lOO1l = Ol0O100OO01
Exit Function
End If
OO0Ol0ll100 = 1
OO0O10ll100 = CInt(getattr("optNonWorkingDays", O11l11ll1O1))
OOlO1l1ll00 argjobresultcode:=Ol0O10lO100, argjobresultmsg:=Ol0Ol0lO100
If Ol0O10lO100 < 0 Then
Ol0O100OO01.OllO11l1O11 = -1
Ol0O100OO01.message = Ol10100l000("The process was terminated due to the {} sheet error.", schedule) & vbNewLine & vbNewLine & Ol0Ol0lO100
O10O11lOO1l = Ol0O100OO01
GoTo cleanuponerror
End If
Ol11llO0lO0 = CDate(getattr("projectStartDate", O11l11ll1O1))
Ol01llO0lO0 = CDate(getattr("projectEndDate", O11l11ll1O1))
Ol0Ol0ll100 = CInt(getattr("optFirstDayOfWeek", O11l11ll1O1))
O10O10lOl1l = Ol01llO0lO0 - Ol11llO0lO0 + 1
Ol01llOlll0.Worksheets(schedule).Select
O10O10lOl0l = (Range(Oll1OOl1OO0 & Rows.Count).End(xlUp).Row) - Ol1lOlOlO10 + 1
If O10O10lOl0l < 1 Then
Ol0O100OO01.OllO11l1O11 = -1
Ol0O100OO01.message = Ol10100l000("There is no input data")
O10O11lOO1l = Ol0O100OO01
GoTo cleanuponerror
End If
O1101010l00 = Ol11llO0lO0
If O10O11lOl1l = "W" Then
ReDim arrweeklyresource((O10O10lOl1l / 7) + 1)
ElseIf O10O11lOl1l = "M" Then
ReDim arrweeklyresource((O10O10lOl1l / 31) + 1)
Else
Ol0O100OO01.OllO11l1O11 = -1
Ol0O100OO01.message = Ol10100l000("The kind of period is invalid. You must enter one of the M(Months) or W(Weeks)")
O10O11lOO1l = Ol0O100OO01
GoTo cleanuponerror
End If
O1101010l01 = Range(OlO1Oll1ll0 & Ol1lOlOlO10 & ":" & O011lOlO1O0 & O10O10lOl0l + Ol1lOlOlO10 - 1)
For O10O101Ol0l = 1 To UBound(O1101010l01, 1)
If O1101010l01(O10O101Ol0l, Ol01Oll1ll0) <> "G" Then
Set O1101010l0O = Range(getcalendarrange(CStr(O1101010l01(O10O101Ol0l, Ollllll1OO0))))
Ol101010l01 = 0
For O10O1010l0l = 0 To O10O10lOl1l - 1
If O10O11lOl1l = "W" Then
If Format(O1101010l00 + O10O1010l0l, "w") = Ol0Ol0ll100 Then
Ol0l1010l11 = 1
Ol011010l01 = O1101010l00 + O10O1010l0l
Ol0l1010l01 = O1101010l00 + O10O1010l0l + 6
Else
Ol0l1010l11 = 0
If O10O1010l0l = 0 Then
Ol0l1010l11 = 1
Ol011010l01 = O1101010l00 + O10O1010l0l
If Ol0Ol0ll100 > Format(O1101010l00 + O10O1010l0l, "w") Then
Ol0l1010l01 = O1101010l00 + O10O1010l0l + (Ol0Ol0ll100 - Format(O1101010l00 + O10O1010l0l, "w") - 1)
Else
Ol0l1010l01 = O1101010l00 + O10O1010l0l + (7 - Format(O1101010l00 + O10O1010l0l, "w") + (Ol0Ol0ll100 - 1))
End If
End If
End If
ElseIf O10O11lOl1l = "M" Then
If Format(O1101010l00 + O10O1010l0l, "dd") = "01" Then
Ol0l1010l11 = 1
Ol011010l01 = O1101010l00 + O10O1010l0l
Ol0l1010l01 = DateSerial(Year(O1101010l00 + O10O1010l0l), Month(O1101010l00 + O10O1010l0l) + 1, 0)
Else
Ol0l1010l11 = 0
If O10O1010l0l = 0 Then
Ol0l1010l11 = 1
Ol011010l01 = O1101010l00 + O10O1010l0l
Ol0l1010l01 = DateSerial(Year(O1101010l00 + O10O1010l0l), Month(O1101010l00 + O10O1010l0l) + 1, 0)
End If
End If
End If
If Ol0l1010l11 = 1 Then
If O1101010l01(O10O101Ol0l, Oll0OOl1OO0) <= Ol0l1010l01 Then
If O1101010l01(O10O101Ol0l, Oll1lOl1OO0) >= Ol011010l01 Then
If O1101010l01(O10O101Ol0l, Oll0OOl1OO0) > Ol011010l01 Then
Ol101010l11 = O1101010l01(O10O101Ol0l, Oll0OOl1OO0)
Else
Ol101010l11 = Ol011010l01
End If
If O1101010l01(O10O101Ol0l, Oll1lOl1OO0) > Ol0l1010l01 Then
Ol111010l01 = Ol0l1010l01
Else
Ol111010l01 = O1101010l01(O10O101Ol0l, Oll1lOl1OO0)
End If
Select Case OO0O10ll100
Case 1
Ol0O10lO000 = (O1101010l01(O10O101Ol0l, O1O1llOO0l0) * (Application.WorksheetFunction.Sum(Application.WorksheetFunction.NetworkDays(Ol101010l11, Ol111010l01, O1101010l0O))))
Case 2
Ol0O10lO000 = (O1101010l01(O10O101Ol0l, O1O1llOO0l0) * (Application.WorksheetFunction.Sum(Application.WorksheetFunction.NetworkDays(Ol101010l11, Ol111010l01))))
Case 3
Ol0O10lO000 = (O1101010l01(O10O101Ol0l, O1O1llOO0l0) * (Application.WorksheetFunction.Sum((Ol111010l01 - Ol101010l11) + 1) - Application.WorksheetFunction.CountIfs(O1101010l0O, ">=" & Ol101010l11, O1101010l0O, "<=" & Ol111010l01)))
End Select
Ol1O100OO01 = ""
Ol1O10OOO00 = Trim(O1101010l01(O10O101Ol0l, O1l1lllO0l0))
If Ol1O10OOO00 <> "" Then
If Mid(Ol1O10OOO00, Len(Ol1O10OOO00), 1) = "," Then
Ol1O10OOO00 = Mid(Ol1O10OOO00, 1, Len(Ol1O10OOO00) - 1)
End If
End If
If Ol1O10OOO00 = "" Then
Ol1O100OO01 = Split(Ol10100l000("[Resources unspecified]"), ",")
Else
Ol1O100OO01 = Split(Ol1O10OOO00, ",")
End If
Ol1O100OO00 = UBound(Ol1O100OO01)
For O11O1010l0l = 0 To Ol1O100OO00
ReDim Preserve Ol1O10lOO00(Ol0O10lOO00)
Ol1O10lOO00(Ol0O10lOO00).O1lO11Ol1O1 = O1101010l01(O10O101Ol0l, OlO1Oll1Ol0)
Ol1O10lOO00(Ol0O10lOO00).O1lO01Ol1O1 = O1101010l01(O10O101Ol0l, OlO1lOl1Ol0 + O1101010l01(O10O101Ol0l, OlO0Oll1ll0) - 1)
Ol1O10lOO00(Ol0O10lOO00).O1ll00O1lO0 = Trim(Ol1O100OO01(O11O1010l0l))
Ol1O10lOO00(Ol0O10lOO00).O1lO01O11O1 = O1101010l01(O10O101Ol0l, Oll0OOl1OO0)
Ol1O10lOO00(Ol0O10lOO00).O1lO01O11O0 = O1101010l01(O10O101Ol0l, Oll1lOl1OO0)
Ol1O10lOO00(Ol0O10lOO00).OllO00l1lO0 = Ol011010l01
Ol1O10lOO00(Ol0O10lOO00).OllO10l1lO0 = Ol0l1010l01
Ol1O10lOO00(Ol0O10lOO00).OlOl11Ol1O1 = Ol0O10lO000 / (Ol1O100OO00 + 1)
Ol0O10lOO00 = Ol0O10lOO00 + 1
Next O11O1010l0l
O10O100OO01 = O10O100OO01 + O1101010l01(O10O101Ol0l, O1lOlll1OO0)
End If
End If
Ol101010l01 = Ol101010l01 + 1
End If
Next O10O1010l0l
End If
Next O10O101Ol0l
Ol01llOlll0.Worksheets("Workload").Select
Cells.Delete shift:=xlUp
With Range("A1:H1")
.Formula = Array("wbs", "task", "resource", "start", "finish", "timebucket_start", "timebucket_finish", "workload")
.HorizontalAlignment = xlCenter
End With
For O10O101Ol0l = 0 To Ol0O10lOO00 - 1
Cells(2 + O10O101Ol0l, 1) = Ol1O10lOO00(O10O101Ol0l).O1lO11Ol1O1
Cells(2 + O10O101Ol0l, 2) = Ol1O10lOO00(O10O101Ol0l).O1lO01Ol1O1
Cells(2 + O10O101Ol0l, 3) = Ol1O10lOO00(O10O101Ol0l).O1ll00O1lO0
Cells(2 + O10O101Ol0l, 4) = Ol1O10lOO00(O10O101Ol0l).O1lO01O11O1
Cells(2 + O10O101Ol0l, 5) = Ol1O10lOO00(O10O101Ol0l).O1lO01O11O0
Cells(2 + O10O101Ol0l, 6) = Ol1O10lOO00(O10O101Ol0l).OllO00l1lO0
Cells(2 + O10O101Ol0l, 7) = Ol1O10lOO00(O10O101Ol0l).OllO10l1lO0
Cells(2 + O10O101Ol0l, 8) = Ol1O10lOO00(O10O101Ol0l).OlOl11Ol1O1
Next O10O101Ol0l
Range("G" & Ol0O10lOO00 + 2).FormulaR1C1 = "Total"
Range("H" & Ol0O10lOO00 + 2).FormulaR1C1 = "=SUM(R[-" & Ol0O10lOO00 & "]C:R[-1]C)"
Erase Ol1O10lOO00
O10O100OOO1 = Worksheets(Ol11llO1O10).Range("TOTAL_WORKLOAD").Value
O10O100OO01 = Worksheets("workload").Range("H" & Ol0O10lOO00 + 2).Value
If Format(O10O100OOO1, "#0.00000") <> Format(O10O100OO01, "#0.00000") Then
MsgBox Ol10100l000("Error! Calculated Total Man-Day is different from the Total Man-Day of the {} sheet.", schedule)
End If
Ol0O100OO01.OllO11l1O11 = Ol0O10lOO00
Ol0O100OO01.message = "OK"
O10O11lOO1l = Ol0O100OO01
Ol01llOlll0.Worksheets("Workload").Visible = xlSheetVeryHidden
Exit Function
cleanuponerror:
Ol01llOlll0.Worksheets("Workload").Visible = xlSheetVeryHidden
Application.Calculation = Ol01llO00l0
Exit Function
catch:
If (Err.Number <> 0) Then
Ol0O100OO01.OllO11l1O11 = -1
Ol0O100OO01.message = "Error code(Making Workload Analysis Data) : " & Err.Number & Chr(13) & Err.Description
O10O11lOO1l = Ol0O100OO01
End If
Resume cleanuponerror
End Function
Sub OO0O10lll00()
Dim OOOO10lll00 As Long
Dim OOOO1Olll00 As Long
Dim OOOl1Olll00 As Long
Dim OlOl1Olll00 As Long
Dim OlOl10lll00 As Date
Dim OlOl11lll00 As Date
Dim OlOl11lllO0 As Date
Dim OlOl11OllO0 As Date
Dim OlOO11OllO0 As Long
Dim OlOO11Olll0 As Range
Dim OlOO11llll0 As Double
Dim OlOO10llll0 As Long
Dim OlOO10Olll0 As String
Dim OlOO10Oll10 As jobresult
Dim OlOO10OlO10 As New adodb.Recordset
Dim OOOO10OlO10 As String
Dim OOOO10OlO11 As String
On Error GoTo catch
OlOO10Oll10 = O10O11lOO1l("W")
If OlOO10Oll10.OllO11l1O11 < 0 Then
MsgBox OlOO10Oll10.message
Exit Sub
End If
Ol01llOlll0.Worksheets(Ol11llO1O00).Select
OOlO1O1ll10 Ol11llO1O00
Columns("A:A").ColumnWidth = 1
Range("B1").Value = Ol10100l000("Worloads by Resources")
OlOOOl0ll11 Range("B1")
Range("B2").Value = Ol10100l000("* This sheet shows you workload allocations by resources.")
Range("B3").Value = Ol10100l000("* You need to click the ""Workloads by Resources"" button to update the contents.")
Range("C4").Value = Ol10100l000("Days (Average number of working days per month)")
With Range("B4")
.Value = 21
With .Borders(xlEdgeLeft)
.LineStyle = xlContinuous
.ColorIndex = 0
.TintAndShade = 0
.Weight = xlThin
End With
With .Borders(xlEdgeTop)
.LineStyle = xlContinuous
.ColorIndex = 0
.TintAndShade = 0
.Weight = xlThin
End With
With .Borders(xlEdgeBottom)
.LineStyle = xlContinuous
.ColorIndex = 0
.TintAndShade = 0
.Weight = xlThin
End With
With .Borders(xlEdgeRight)
.LineStyle = xlContinuous
.ColorIndex = 0
.TintAndShade = 0
.Weight = xlThin
End With
End With
Range("B6").Value = Ol10100l000("Resources")
Range("C6").Value = Ol10100l000("Start")
Range("D6").Value = Ol10100l000("Finish")
Range("E6").Value = Ol10100l000("Workload\n(Man-Day)")
Range("F6").Value = Ol10100l000("Workload\n(Man-Month)")
With Range("G6:P6")
.Merge
.Value = Ol10100l000("Chart")
End With
Columns("F:F").ColumnWidth = 10
Rows("6:6").EntireRow.AutoFit
OlOO0l1ll11 Range("B6:P6")
OOOO10OlO10 = "SELECT [resource], SUM([workload]) AS workloads, MIN([start]) AS starts, MAX([finish]) AS finishs " & _
"  FROM [workload$] " & _
" WHERE [task] > '' " & _
" GROUP BY resource " & _
" ORDER BY SUM([workload]) DESC"
OOOO10OlO11 = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & Ol01llOlll0.path & "\" & ActiveWorkbook.name & ";" & "Extended Properties=Excel 12.0;"
OlOO10OlO10.Open OOOO10OlO10, OOOO10OlO11, adOpenStatic, adLockReadOnly, adCmdText
If Not OlOO10OlO10.EOF Then
Do Until (OlOO10OlO10.EOF = True)
Cells(Ol11OlOlO10 + OOOl1Olll00, 2) = OlOO10OlO10("resource").Value
Cells(Ol11OlOlO10 + OOOl1Olll00, 3) = OlOO10OlO10("starts").Value
Cells(Ol11OlOlO10 + OOOl1Olll00, 4) = OlOO10OlO10("finishs").Value
Cells(Ol11OlOlO10 + OOOl1Olll00, 5) = OlOO10OlO10("workloads").Value
If OlOO10OlO10("workloads").Value > OlOO11llll0 Then
OlOO11llll0 = OlOO10OlO10("workloads").Value
End If
OlOO10OlO10.MoveNext
OOOl1Olll00 = OOOl1Olll00 + 1
Loop
End If
OlOO10OlO10.Close
Set OlOO10OlO10 = Nothing
If OOOl1Olll00 < 1 Then
MsgBox Ol10100l000("There is no input data")
Exit Sub
End If
If OlOO11llll0 > 200 Then
OlOO10llll0 = (OlOO11llll0 / 200) + 1
Else
OlOO10llll0 = 1
End If
Range("F" & Ol11OlOlO10).Select
ActiveCell.FormulaR1C1 = "=RC[-1]/R4C2"
Range("F" & Ol11OlOlO10).Select
Selection.Copy
Range("F" & Ol11OlOlO10 & ":F" & OOOl1Olll00 + Ol11OlOlO10 - 1).Select
ActiveSheet.Paste
Selection.NumberFormatLocal = "0.00"
Range("D" & OOOl1Olll00 + Ol11OlOlO10).Select
ActiveCell.FormulaR1C1 = "Total"
Range("E" & OOOl1Olll00 + Ol11OlOlO10).Select
ActiveCell.FormulaR1C1 = "=SUM(R[-" & OOOl1Olll00 & "]C:R[-1]C)"
Range("F" & OOOl1Olll00 + Ol11OlOlO10).Select
ActiveCell.FormulaR1C1 = "=RC[-1]/R4C2"
Selection.NumberFormatLocal = "0.00"
With Range("G" & Ol11OlOlO10 & ":G" & OOOl1Olll00 + Ol11OlOlO10 - 1)
.FormulaR1C1 = "=REPT(""|"",IF(RC[-2]>0,IF(RC[-2]/" & OlOO10llll0 & "<1,1,RC[-2]/" & OlOO10llll0 & ")))"
End With
OOlO0l1ll11 _
argnumberrange1:=Range("B" & Ol11OlOlO10 & ":C" & OOOl1Olll00 + Ol11OlOlO10 - 1), _
argnumberformat1:="yyyy-mm-dd", _
argfontrange:=Range("G" & Ol11OlOlO10 & ":G" & OOOl1Olll00 + Ol11OlOlO10 - 1), _
argfontname:="Arial Narrow", _
arglinerange:=Range("B" & Ol11OlOlO10 & ":P" & OOOl1Olll00 + Ol11OlOlO10 - 1), _
arghorizontalalignrange1:=Range("C" & Ol11OlOlO10 & ":D" & OOOl1Olll00 + Ol11OlOlO10 - 1), _
arghorizontalaligndirection1:=xlLeft, _
arghorizontalalignrange2:=Range("E" & Ol11OlOlO10 & ":F" & OOOl1Olll00 + Ol11OlOlO10), _
arghorizontalaligndirection2:=xlRight, _
argnumberrange2:=Range("E" & Ol11OlOlO10 & ":F" & OOOl1Olll00 + Ol11OlOlO10), _
argnumberformat2:="0.00"
Ol01llOlll0.Worksheets(Ol11llO1O00).Calculate
Range("A1").Select
Exit Sub
catch:
Application.Calculation = Ol01llO00l0
If (Err.Number <> 0) Then
MsgBox ("Error code(Making Workload Report by Resouce) : " & Err.Number & Chr(13) & Err.Description)
End If
End Sub
Sub OOOO11OlO11()
Dim OOOl11OlO11 As Long
Dim OOOl1lOlO11 As Long
Dim OOOl1lOlO10 As Long
Dim OOOl0lOlO10 As Long
Dim OlOl0lOlO10 As Date
Dim OlOl0lO1O10 As Date
Dim OlOO0lO1O10 As Date
Dim OlOO0lO1O00 As Date
Dim OlOO0lO1000 As Long
Dim OlOO0lO1100 As Range
Dim OlOO1lO1100 As Double
Dim OOOO1lO1100 As Long
Dim OlOO1lO1000 As String
Dim OllO1lO1000 As jobresult
Dim OllO1lO1010 As New adodb.Recordset
Dim OlOO1lO1010 As String
Dim OlOO1lO1O10 As String
Dim OlOOllO1O10 As Chart
On Error GoTo catch
OllO1lO1000 = O10O11lOO1l("W")
If OllO1lO1000.OllO11l1O11 < 0 Then
MsgBox OllO1lO1000.message
Exit Sub
End If
Ol01llOlll0.Worksheets(Ol11llO1O00).Select
OOlO1O1ll10 Ol11llO1O00
Columns("A:A").ColumnWidth = 1
Range("B1").Value = Ol10100l000("Planned Project Progresses by Weeks")
OlOOOl0ll11 Range("B1")
Range("B2").Value = Ol10100l000("* This sheet shows you planned project progresses by weeks.")
Range("B3").Value = Ol10100l000("* You need to click the ""Planned Progress"" button to update the contents.")
Range("B6").Value = Ol10100l000("Start")
Range("C6").Value = Ol10100l000("Finish")
Range("D6").Value = Ol10100l000("Man-Day")
Range("E6").Value = Ol10100l000("Accumulated\nMan-Day")
Range("F6").Value = Ol10100l000("Progress")
OlOO0l1ll11 Range("B6:F6")
OlOO1lO1010 = "SELECT [timebucket_start],[timebucket_finish], SUM([workload]) AS workloads FROM [Workload$] where [task] > '' GROUP BY [timebucket_start], [timebucket_finish]"
OlOO1lO1O10 = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & Ol01llOlll0.path & "\" & ActiveWorkbook.name & ";" & "Extended Properties=Excel 12.0;"
OllO1lO1010.Open OlOO1lO1010, OlOO1lO1O10, adOpenStatic, adLockReadOnly, adCmdText
If Not OllO1lO1010.EOF Then
Do Until (OllO1lO1010.EOF = True)
Cells(Ol11OlOlO10 + OOOl1lOlO10, 2) = OllO1lO1010("timebucket_start").Value
Cells(Ol11OlOlO10 + OOOl1lOlO10, 3) = OllO1lO1010("timebucket_finish").Value
Cells(Ol11OlOlO10 + OOOl1lOlO10, 4) = OllO1lO1010("workloads").Value
OllO1lO1010.MoveNext
OOOl1lOlO10 = OOOl1lOlO10 + 1
Loop
End If
OllO1lO1010.Close
Set OllO1lO1010 = Nothing
If OOOl1lOlO10 < 1 Then
MsgBox Ol10100l000("There is no input data")
Exit Sub
End If
Range("E" & Ol11OlOlO10).FormulaR1C1 = "=RC[-1]"
If OOOl1lOlO10 > 1 Then
Range("E" & Ol11OlOlO10 + 1).FormulaR1C1 = "=R[-1]C+RC[-1]"
Range("E" & Ol11OlOlO10 + 2 & ":E" & OOOl1lOlO10 + Ol11OlOlO10 - 1).FormulaR1C1 = Range("E" & Ol11OlOlO10 + 1).FormulaR1C1
End If
Range("C" & OOOl1lOlO10 + Ol11OlOlO10).FormulaR1C1 = "Total"
Range("D" & OOOl1lOlO10 + Ol11OlOlO10).FormulaR1C1 = "=SUM(R[-" & OOOl1lOlO10 & "]C:R[-1]C)"
Range("F" & Ol11OlOlO10).FormulaR1C1 = "=RC[-1]/R" & OOOl1lOlO10 + Ol11OlOlO10 & "C4"
With Range("F" & Ol11OlOlO10 & ":F" & OOOl1lOlO10 + Ol11OlOlO10 - 1)
.FormulaR1C1 = Range("F" & Ol11OlOlO10).FormulaR1C1
.Style = "Percent"
.NumberFormatLocal = "0.00%"
End With
Columns("E:E").ColumnWidth = 10
Rows("6:6").EntireRow.AutoFit
OOlO0l1ll11 _
argnumberrange1:=Range("B" & Ol11OlOlO10 & ":C" & OOOl1lOlO10 + Ol11OlOlO10 - 1), _
argnumberformat1:="yyyy-mm-dd", _
arglinerange:=Range("B" & Ol11OlOlO10 & ":F" & OOOl1lOlO10 + Ol11OlOlO10 - 1)
Set OlOOllO1O10 = ActiveSheet.Shapes.AddChart(xlLineMarkers).Chart
With OlOOllO1O10
.SetSourceData Source:=Range("C" & Ol11OlOlO10 - 1 & ":C" & OOOl1lOlO10 + Ol11OlOlO10 - 1 & ",F" & Ol11OlOlO10 - 1 & ":F" & OOOl1lOlO10 + Ol11OlOlO10 - 1)
.Axes(xlCategory).TickLabels.Orientation = 45
End With
With OlOOllO1O10.Parent
.Top = Range("G6").Top
.Left = Range("G6").Left + (Range("G6").width / 4)
End With
Ol01llOlll0.Worksheets(Ol11llO1O00).Calculate
Range("A1").Select
Exit Sub
catch:
Application.Calculation = Ol01llO00l0
If (Err.Number <> 0) Then
MsgBox ("Error code(Making Progress Report) : " & Err.Number & Chr(13) & Err.Description)
End If
End Sub
Sub OlOOlll1O10(ByVal argrowcount As Long)
Dim OlOOOll1O10 As Long
Dim OlOOOOl1O10 As Long
Ol01llOlll0.Worksheets(Ol11llO1O00).Select
Rows(Ol11OlOlO10 - 1 & ":" & Ol11OlOlO10 + argrowcount - 1).Select
With Ol01llOlll0.Worksheets(Ol11llO1O00)
.Sort.SortFields.Clear
.Sort.SortFields.Add Key:=Range("A7:A49"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
.Sort.SortFields.Add Key:=Range("B7:B49"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
With .Sort
If Ol01llO0ll0 = OO11OlOOl1l Then
.SetRange Range("A" & Ol11OlOlO10 - 1 & ":O" & Ol11OlOlO10 + argrowcount - 1)
Else
.SetRange Range("A" & Ol11OlOlO10 - 1 & ":M" & Ol11OlOlO10 + argrowcount - 1)
End If
.Header = xlYes
.MatchCase = False
.Orientation = xlTopToBottom
.SortMethod = xlPinYin
.Apply
End With
End With
If Ol01llO0ll0 = OO11OlOOl1l Then
Range("A" & Ol11OlOlO10 - 1 & ":O" & Ol11OlOlO10 + argrowcount - 1).Subtotal groupby:=1, Function:=xlSum, totallist:=Array(7, 8, 9, 15), Replace:=True, pagebreaks:=False, summarybelowdata:=True
Else
Range("A" & Ol11OlOlO10 - 1 & ":L" & Ol11OlOlO10 + argrowcount - 1).Subtotal groupby:=1, Function:=xlSum, totallist:=Array(7, 8, 9), Replace:=True, pagebreaks:=False, summarybelowdata:=True
End If
OlOOOOl1O10 = Range("A" & Rows.Count).End(xlUp).Row
For OlOOOll1O10 = 0 To OlOOOOl1O10 - Ol11OlOlO10
If IsEmpty(Cells(OlOOOll1O10 + Ol11OlOlO10, 10)) Then
If Not IsEmpty(Cells(OlOOOll1O10 + Ol11OlOlO10, 9)) Then
If Cells(OlOOOll1O10 + Ol11OlOlO10, 7).Value = 0 Then
Cells(OlOOOll1O10 + Ol11OlOlO10, 10).Value = 0
Cells(OlOOOll1O10 + Ol11OlOlO10, 11).Value = 0
Else
Cells(OlOOOll1O10 + Ol11OlOlO10, 10).Formula = "=RC[-2]/RC[-3]"
Cells(OlOOOll1O10 + Ol11OlOlO10, 11).Formula = "=RC[-2]/RC[-4]"
End If
Cells(OlOOOll1O10 + Ol11OlOlO10, 12).Formula = "=RC[-1]-RC[-2]"
If Ol01llO0ll0 = OO11OlOOl1l Then
With Range("A" & OlOOOll1O10 + Ol11OlOlO10 & ":O" & OlOOOll1O10 + Ol11OlOlO10).Interior
.Pattern = xlSolid
.PatternColorIndex = xlAutomatic
.ThemeColor = xlThemeColorLight2
.TintAndShade = 0.799981688894314
.PatternTintAndShade = 0
End With
Else
With Range("A" & OlOOOll1O10 + Ol11OlOlO10 & ":L" & OlOOOll1O10 + Ol11OlOlO10).Interior
.Pattern = xlSolid
.PatternColorIndex = xlAutomatic
.ThemeColor = xlThemeColorLight2
.TintAndShade = 0.799981688894314
.PatternTintAndShade = 0
End With
End If
End If
Else
Cells(OlOOOll1O10 + Ol11OlOlO10, 12).Formula = "=RC[-1]-RC[-2]"
End If
If Cells(OlOOOll1O10 + Ol11OlOlO10, 12).Value < 0 Then
Cells(OlOOOll1O10 + Ol11OlOlO10, 12).Font.Color = RGB(255, 0, 0)
End If
Next OlOOOll1O10
Range("J" & Ol11OlOlO10 & ":L" & OlOOOll1O10 + Ol11OlOlO10 - 1).NumberFormatLocal = "0.00%"
End Sub
Public Sub OlOOOOl1O11()
Ol111ll1lO1.Show
End Sub
Public Function OlOOOOO1O11() As Boolean
Dim OlOOO0O1O11 As Variant
Dim OlOOO0O1l11 As Range
Dim OlOOO0O1l10 As Long
Dim OlOOO0O0l10 As Long
Dim OlOOO0OOl10 As Long
Dim OlOOO0lOl10 As Variant
Dim OlOO00lOl10 As Variant
Dim OlOO01lOl10 As String
Dim OlO001lOl10 As String
On Error GoTo catch
OlO001lOl10 = OO10OlOl0l1()
If Not OlO001lOl10 = "OK" Then
Ol111ll1lO1.txtMsg = Ol10100l000("The {} sheet does not exist. Please check that you changed or deleted the sheet.", OlO001lOl10)
Exit Function
End If
OlOOO0O1O11 = Application.GetOpenFilename(filefilter:="Excel Files(*.xls*),*.xls*", _
title:="Select source file", MultiSelect:=False)
If TypeName(OlOOO0O1O11) = "Boolean" Then Exit Function
If UCase(Right(OlOOO0O1O11, Len(OlOOO0O1O11) - InStrRev(OlOOO0O1O11, "."))) = "XLSM" Then
Ol111ll1lO1.txtMsg = Ol10100l000("You can't import an Excel Macro file. Please import after saving it as an xls or xlsx file. If it is an XLGantt file, you can import it at the menu ""Import files created in XLGantt""")
GoTo catch4justexit
End If
Set Ol11llOOll0 = Workbooks.Open(filename:=OlOOO0O1O11, ReadOnly:=True)
Ol11llOOlO0 = True
With Ol11llOOll0.Worksheets(1)
.AutoFilterMode = False
Set OlOOO0O1l11 = .Range(Range("A1"), ActiveCell.SpecialCells(xlLastCell))
End With
Ol01llOOll0 = OlOOO0O1l11
OlOOO0O1l10 = OlOOO0O1l11.Rows.Count
OlOOO0O0l10 = OlOOO0O1l11.Columns.Count
ReDim OlOOO0lOl10(1 To OlOOO0O0l10, 1 To 3)
For OlOOO0OOl10 = 1 To OlOOO0O0l10
OlOOO0lOl10(OlOOO0OOl10, 1) = OlOOO0OOl10
OlOOO0lOl10(OlOOO0OOl10, 2) = OlOOO0O1l11.Cells(1, OlOOO0OOl10)
OlOOO0lOl10(OlOOO0OOl10, 3) = OlOOO0O1l11.Cells(2, OlOOO0OOl10)
Next OlOOO0OOl10
With Ol111ll1lO1.lstSource
.List = OlOOO0lOl10
End With
ReDim OlOO00lOl10(1 To 10, 1 To 3)
OlOO00lOl10(1, 1) = OlO1Oll1Ol0
OlOO00lOl10(1, 2) = Ol10100l000("WBS No.")
OlOO00lOl10(1, 3) = "1.1.2"
OlOO00lOl10(2, 1) = OlO0Oll1ll0
OlOO00lOl10(2, 2) = Ol10100l000("Outline Level")
OlOO00lOl10(2, 3) = "3"
OlOO00lOl10(3, 1) = OlO1lOl1Ol0
OlOO00lOl10(3, 2) = Ol10100l000("Task Name")
OlOO00lOl10(3, 3) = Ol10100l000("UI Design")
OlOO00lOl10(4, 1) = Oll0OOl1OO0
OlOO00lOl10(4, 2) = Ol10100l000("Start Date")
OlOO00lOl10(4, 3) = Ol10100l000("12/1/2016")
OlOO00lOl10(5, 1) = Oll1lOl1OO0
OlOO00lOl10(5, 2) = Ol10100l000("Finish Date")
OlOO00lOl10(5, 3) = Ol10100l000("12/31/2016")
OlOO00lOl10(6, 1) = O1OOllOO0O1
OlOO00lOl10(6, 2) = Ol10100l000("Actual Start Date")
OlOO00lOl10(6, 3) = Ol10100l000("12/1/2016")
OlOO00lOl10(7, 1) = O1OlllOO0l1
OlOO00lOl10(7, 2) = Ol10100l000("Actual Finish Date")
OlOO00lOl10(7, 3) = Ol10100l000("12/31/2016")
OlOO00lOl10(8, 1) = O1l1lllO0l0
OlOO00lOl10(8, 2) = Ol10100l000("Resources")
OlOO00lOl10(8, 3) = Ol10100l000("John")
OlOO00lOl10(9, 1) = O0l11llO0l0
OlOO00lOl10(9, 2) = Ol10100l000("Deliverables")
OlOO00lOl10(9, 3) = Ol10100l000("Project Execution Plan")
OlOO00lOl10(10, 1) = O011lOlO1l0
OlOO00lOl10(10, 2) = Ol10100l000("%Work Complete")
OlOO00lOl10(10, 3) = "35%"
With Ol111ll1lO1.lstTarget
.List = OlOO00lOl10
End With
OlOOOOO1O11 = True
Exit Function
catch4justexit:
If Ol11llOOlO0 = True Then
Ol11llOOll0.Close savechanges:=False
Ol11llOOlO0 = False
End If
OlOOOOO1O11 = False
Exit Function
catch:
Ol111ll1lO1.txtMsg = Ol10100l000("[4]Error! Cause may be one of the following.\n" & _
" * File is invalid(e.g. the Excel file corrupted)\n" & _
" * Data format is invalid(First row:title, from second row:contents or XLGantt file is valid)\n" & _
" * If you cancel to open the file that is already opened\n\n" & _
" Please check the messages below for details.") & vbNewLine & vbNewLine & "Error code : " & Err.Number & vbNewLine & Err.Description
If Ol11llOOlO0 = True Then
Ol11llOOll0.Close savechanges:=False
Ol11llOOlO0 = False
End If
OlOOOOO1O11 = False
End Function
Public Function OlO001OOl10() As Boolean
Dim OlO011OOl10 As New adodb.Connection
Dim OlO111OOl10 As New adodb.Recordset
Dim O1O111OOl10 As String
Dim O1O110OOl10 As String
Dim O10110OOl10 As String
Dim O0O110OOl10 As String
Dim O0O110OOl1O As String
Dim O1O110OOl1O As String
Dim O1O110O0l1O As String
Dim O1O110O011O As String
Dim O1O111O0l1O As String
Dim O1O110O0l0O As Variant
Dim O1O1l0O0l0O As Variant
Dim O1O1l0O010O As Long
Dim O1O1l1O010O As Long
Dim O1l1l0O010O As New Dictionary
Dim O1l1l0O110O As Variant
Dim O1l1l0l110O As Long
Dim O1l1l0l111O As Long
Dim O1l1l0l1110 As Long
Dim O1l1l0O1110 As Long
Dim O1O1l0O1110 As Long
Dim O1O1l0O1010 As Long
Dim O1O1l0O1011 As Long
Dim O1O0l0O1011 As String
On Error GoTo errhandler
With Application
O1O1l0O1010 = .Calculation
.Calculation = xlCalculationManual
.ScreenUpdating = False
End With
O1O1l0O010O = O0Ol00l1Oll(argworkbook:=Ol01llOlll0, argsheet:=schedule)
O1O110OOl10 = "SELECT [WBS],[|fffd||6fe||fffd|*] AS [Task],[F6],[F7],[F8],[F9],[F10],[F11],[|fffd||fffd||fffd|] AS [Note],[|fffd||fffd||fffd||fffd||fffd||fffd|*] AS [Start],[|fffd||fffd||fffd||fffd||fffd||fffd|*] AS [Finish],[Calendar],[|fffd||fffd|_|fffd||6fe||fffd||fffd||fffd|] AS [Total_Work],[|fffd||fffd||239|_|fffd||6fe||fffd||fffd||fffd|] AS [Planned_Work],[|fffd||fffd|_|fffd||2c23|] as [Total_Duration],[|fffd||fffd||239|_|fffd||2c23|] as [Planned_Duration], '' AS [Actual_Start],'' AS [Actual_Finish],'' AS [Actual_Total_Work],'' AS [Actual_Total_Duration],[|fffd||fffd||fffd||fffd||121|] as [Weight],[|fffd||fffd||fffd|] as [Resources],      '' AS [Deliverables],[|fffd||fffd||239|] as [Planned_PctWork_Complete],[|fffd||fffd||fffd||fffd|*] as [PctWork_Complete] FROM [Schedule$A3:X10004] WHERE [|fffd||6fe||fffd|*] > '' or [F6] > '' or [F7] > ''  or [F8] > ''  or [F9] > '' or [F10] > '' or [F11] > '' or [F3] > -1"
O10110OOl10 = "SELECT [WBS],[|fffd||6fe||fffd|*] AS [Task],[F6],[F7],[F8],[F9],[F10],[F11],[|fffd||fffd||fffd|] AS [Note],[|fffd||fffd||fffd||fffd||fffd||fffd|*] AS [Start],[|fffd||fffd||fffd||fffd||fffd||fffd|*] AS [Finish],[Calendar],[|fffd||fffd|_|fffd||6fe||fffd||fffd||fffd|] AS [Total_Work],[|fffd||fffd||239|_|fffd||6fe||fffd||fffd||fffd|] AS [Planned_Work],[|fffd||fffd|_|fffd||2c23|] as [Total_Duration],[|fffd||fffd||239|_|fffd||2c23|] as [Planned_Duration], '' AS [Actual_Start],'' AS [Actual_Finish],'' AS [Actual_Total_Work],'' AS [Actual_Total_Duration],[|fffd||fffd||fffd||fffd||121|] as [Weight],[|fffd||fffd||fffd|] as [Resources],[|fffd||fffd||fffd||2e70|] AS [Deliverables],[|fffd||fffd||239|] as [Planned_PctWork_Complete],[|fffd||fffd||fffd||fffd|*] as [PctWork_Complete] FROM [Schedule$A3:X10004] WHERE [|fffd||6fe||fffd|*] > '' or [F6] > '' or [F7] > ''  or [F8] > ''  or [F9] > '' or [F10] > '' or [F11] > '' or [wbs_level] > -1"
O0O110OOl10 = "SELECT [WBS],[|fffd||6fe||fffd|*] AS [Task],[F6],[F7],[F8],[F9],[F10],[F11],[|fffd||fffd||fffd|] AS [Note],[|fffd||fffd||fffd||fffd||fffd||fffd|*] AS [Start],[|fffd||fffd||fffd||fffd||fffd||fffd|*] AS [Finish],[Calendar],[|fffd||fffd|_|fffd||6fe||fffd||fffd||fffd|] AS [Total_Work],[|fffd||fffd||239|_|fffd||6fe||fffd||fffd||fffd|] AS [Planned_Work],[|fffd||fffd|_|fffd||2c23|] as [Total_Duration],[|fffd||fffd||239|_|fffd||2c23|] as [Planned_Duration], '' AS [Actual_Start],'' AS [Actual_Finish],'' AS [Actual_Total_Work],'' AS [Actual_Total_Duration],[|fffd||fffd||fffd||fffd||121|] as [Weight],[|fffd||fffd||fffd|] as [Resources],[|fffd||fffd||fffd||2e70|] AS [Deliverables],[|fffd||fffd||239|] as [Planned_PctWork_Complete],[|fffd||fffd||fffd||fffd|*] as [PctWork_Complete]  FROM [Schedule$A3:X10004] WHERE [|fffd||6fe||fffd|*] > '' or [F6] > '' or [F7] > ''  or [F8] > ''  or [F9] > '' or [F10] > '' or [F11] > '' or [wbs_level] > -1"
O0O110OOl1O = O0O110OOl10
O1O110OOl1O = "SELECT [WBS],[|fffd||6fe||fffd|*] AS [Task],[F6],[F7],[F8],[F9],[F10],[F11],[|fffd||fffd||fffd|] AS [Note],[|fffd||fffd||fffd||fffd||fffd||fffd|*] AS [Start],[|fffd||3f7||fffd||fffd||fffd|*] AS [Finish],[Calendar],[|fffd||fffd|_|fffd||6fe||fffd||fffd||fffd|] AS [Total_Work],[|fffd||fffd||239|_|fffd||6fe||fffd||fffd||fffd|] AS [Planned_Work],[|fffd||fffd|_|fffd||2c23|] as [Total_Duration],[|fffd||fffd||239|_|fffd||2c23|] as [Planned_Duration],[|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd|] AS [Actual_Start],[|fffd||fffd||fffd||fffd|_|fffd||3f7||fffd||fffd||fffd|] AS [Actual_Finish],'' AS [Actual_Total_Work],'' AS [Actual_Total_Duration],[|fffd||fffd||fffd||fffd||121|] as [Weight],[|fffd||fffd||fffd|] as [Resources],[|fffd||fffd||fffd||2e70|] AS [Deliverables],[|fffd||fffd||239|] as [Planned_PctWork_Complete],[|fffd||fffd||fffd||fffd|*] as [PctWork_Complete]   FROM [Schedule$A3:AB10004] WHERE [|fffd||6fe||fffd|*] > '' or [F6] > '' or [F7] > ''  or [F8] > ''  or [F9] > '' or [F10] > '' or [F11] > '' or [wbs_level] > -1"
O1O110O0l1O = O1O110OOl1O
O1O110O011O = "SELECT VALUE1 AS xlgantt_version, VALUE2 AS data_position, VALUE3 AS lastTranslatedLanguage FROM [Settings$] WHERE item = 'VERSION'"
O1O110O0l0O = Application.GetOpenFilename(filefilter:="Excel Files(*.xls*),*.xls*", title:=Ol10100l000("Select source files(Muliple Select)"), MultiSelect:=True)
If TypeName(O1O110O0l0O) = "Boolean" Then Exit Function
For Each O1O1l0O0l0O In O1O110O0l0O
O1O111O0l1O = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & O1O1l0O0l0O & ";" & _
"Extended Properties=Excel 12.0;"
OlO011OOl10.Open O1O111O0l1O
OlO111OOl10.Open Source:=O1O110O011O, ActiveConnection:=OlO011OOl10, CursorType:=adOpenStatic, LockType:=adLockReadOnly, Options:=adCmdText
If OlO111OOl10.EOF Then
OO10OO0l000 Ol111ll1lO1, "txtMsg", vbNewLine & Ol10100l000("The following file formats are not supported. You can import files with version 0.9.7 or higher than 0.9.7.") & vbNewLine & O1O1l0O0l0O & vbNewLine & vbNewLine
GoTo catch4justexit
Else
O1l1l0l1110 = 5
If OlO111OOl10("xlgantt_version") = "0.9.7" Then
O1O111OOl10 = O1O110OOl10
ElseIf OlO111OOl10("xlgantt_version") = "0.9.8" Then
O1O111OOl10 = O10110OOl10
ElseIf OlO111OOl10("xlgantt_version") = "0.9.8.1" Then
O1O111OOl10 = O0O110OOl10
ElseIf OlO111OOl10("xlgantt_version") = "0.9.8.2 beta" Then
O1O111OOl10 = O0O110OOl1O
ElseIf OlO111OOl10("xlgantt_version") = "0.9.9.0" Then
O1O111OOl10 = O1O110OOl1O
ElseIf OlO111OOl10("xlgantt_version") = "0.9.9.1" Then
O1O111OOl10 = O1O110O0l1O
ElseIf (OlO111OOl10("xlgantt_version") >= "1.0.0") Then
If CLng(getattr("lastTranslatedLanguage", OO0l11ll0O1)) <> CLng(OlO111OOl10("lastTranslatedLanguage")) Then
OO10OO0l000 Ol111ll1lO1, "txtMsg", vbNewLine & Ol10100l000("If the language in source file and the language in target file are different, you can not import.") & vbNewLine & O1O1l0O0l0O & vbNewLine & vbNewLine
GoTo catch4justexit
End If
O1l1l0O110O = Split(OlO111OOl10("data_position"), ",")
For O1l1l0l110O = 0 To UBound(O1l1l0O110O)
O1l1l0O010O.Add Replace(Mid(Replace(Replace(Replace(O1l1l0O110O(O1l1l0l110O), """", ""), "{", ""), "}", ""), 1, InStr(1, Replace(Replace(Replace(O1l1l0O110O(O1l1l0l110O), """", ""), "{", ""), "}", ""), ":", vbTextCompare)), ":", ""), _
Mid(Replace(Replace(Replace(O1l1l0O110O(O1l1l0l110O), """", ""), "{", ""), "}", ""), InStr(1, Replace(Replace(Replace(O1l1l0O110O(O1l1l0l110O), """", ""), "{", ""), "}", ""), ":", vbTextCompare) + 1, 999)
Next O1l1l0l110O
O1l1l0l1110 = O1l1l0O010O.item("TASK_FIRST_COL")
O1l1l0l111O = O1l1l0O010O.item("START_ROW")
O1l1l0O1110 = O1l1l0O010O.item("WBS_AREA_LAST_COL")
O1O111OOl10 = "SELECT [WBS],[" & Ol10100l000("Task") & "*] as [Task]," & _
"[F" & O1l1l0l1110 + 1 & "]," & _
"[F" & O1l1l0l1110 + 2 & "]," & _
"[F" & O1l1l0l1110 + 3 & "]," & _
"[F" & O1l1l0l1110 + 4 & "]," & _
"[F" & O1l1l0l1110 + 5 & "]," & _
"[F" & O1l1l0l1110 + 6 & "]," & _
"[" & Ol10100l000("Note") & "] as [Note],[" & Ol10100l000("Start") & "*] as [Start],[" & Ol10100l000("Finish") & "*] as [Finish],[" & Ol10100l000("Calendar") & "] as [Calendar],[" & Ol10100l000("Total__Work") & "] as [Total_Work],[" & Ol10100l000("Planned__Work") & "] as [Planned_Work],[" & Ol10100l000("Total__Duration") & "] as [Total_Duration],[" & Ol10100l000("Planned__Duration") & "] as [Planned_Duration],[" & Ol10100l000("Actual__Start") & "] as [Actual_Start],[" & Ol10100l000("Actual__Finish") & "] as [Actual_Finish],'' AS [Actual_Total_Work],'' AS [Actual_Total_Duration],[" & Ol10100l000("Weight") & "] as [Weight],[" & Ol10100l000("Resources") & "] as [Resources],[" & Ol10100l000("Deliverables") & "] as [Deliverables],[" & Ol10100l000("Planned__%Work Complete") & "] as [Planned_PctWork_Complete],[" & Ol10100l000("%Work__Complete") & "*] as [PctWork_Complete]" & _
" FROM [Schedule$A" & O1l1l0l111O - 2 & ":" & O0ll00l1lll(O1l1l0O1110) & 10000 + O1l1l0l111O - 1 & "] " & _
" WHERE [" & Ol10100l000("Task") & "*] > '' or [F" & O1l1l0l1110 + 1 & "] > '' or [F" & O1l1l0l1110 + 2 & "] > ''  or [F" & O1l1l0l1110 + 3 & "] > ''  or [F" & O1l1l0l1110 + 4 & "] > '' or [F" & O1l1l0l1110 + 5 & "] > '' or [F" & O1l1l0l1110 + 6 & "] > '' or [wbs_level] > -1"
Else
OO10OO0l000 Ol111ll1lO1, "txtMsg", Ol10100l000("The following file formats are not supported. You can import the files if the version is 0.9.7 or higher than 0.9.7.") & vbNewLine & O1O1l0O0l0O & vbNewLine & vbNewLine
GoTo catch4justexit
End If
End If
OlO111OOl10.Close
OlO111OOl10.Open Source:=O1O111OOl10, ActiveConnection:=OlO011OOl10, CursorType:=adOpenStatic, LockType:=adLockReadOnly, Options:=adCmdText
If OlO111OOl10.EOF Then
OO10OO0l000 Ol111ll1lO1, "txtMsg", Ol10100l000("There is no data in the following files") & vbNewLine & O1O1l0O0l0O & vbNewLine & vbNewLine
GoTo catch4justexit
Else
If Ol111ll1lO1.optAddAfterDeleteXLGantt Then
If O1O1l0O1110 = 0 Then
If O1O1l0O010O > 0 Then
Rows(Ol1lOlOlO10 & ":" & O1O1l0O010O + Ol1lOlOlO10 - 1).Select
Selection.ClearContents
O1O1l0O010O = 0
End If
End If
End If
OO10OO0l000 Ol111ll1lO1, "txtMsg", Ol10100l000("Importing..., Please wait...") & vbNewLine & vbNewLine
Do Until (OlO111OOl10.EOF = True)
With Ol01llOlll0.Worksheets(schedule)
O1O1l1O010O = O1O1l0O010O + Ol1lOlOlO10 + O1O1l0O1110
.Cells(O1O1l1O010O, OlO1Oll1Ol0).Value = OlO111OOl10("WBS").Value
.Cells(O1O1l1O010O, OlO1lOl1Ol0).Value = OlO111OOl10("Task").Value
.Cells(O1O1l1O010O, OlO1lOl1Ol0 + 1).Value = OlO111OOl10("F" & O1l1l0l1110 + 1).Value
.Cells(O1O1l1O010O, OlO1lOl1Ol0 + 2).Value = OlO111OOl10("F" & O1l1l0l1110 + 2).Value
.Cells(O1O1l1O010O, OlO1lOl1Ol0 + 3).Value = OlO111OOl10("F" & O1l1l0l1110 + 3).Value
.Cells(O1O1l1O010O, OlO1lOl1Ol0 + 4).Value = OlO111OOl10("F" & O1l1l0l1110 + 4).Value
.Cells(O1O1l1O010O, OlO1lOl1Ol0 + 5).Value = OlO111OOl10("F" & O1l1l0l1110 + 5).Value
.Cells(O1O1l1O010O, OlO1lOl1Ol0 + 6).Value = OlO111OOl10("F" & O1l1l0l1110 + 6).Value
.Cells(O1O1l1O010O, OlO0Oll1OO1).Value = OlO111OOl10("Note").Value
.Cells(O1O1l1O010O, Oll0OOl1OO0).Value = OlO111OOl10("Start").Value
.Cells(O1O1l1O010O, Oll1lOl1OO0).Value = OlO111OOl10("Finish").Value
.Cells(O1O1l1O010O, Ollllll1OO0).Value = OlO111OOl10("Calendar").Value
.Cells(O1O1l1O010O, O1lOlll1OO0).Value = OlO111OOl10("Total_Work").Value
.Cells(O1O1l1O010O, O0OOlll1OO0).Value = OlO111OOl10("Planned_Work").Value
.Cells(O1O1l1O010O, O1OOllllOO0).Value = OlO111OOl10("Total_Duration").Value
.Cells(O1O1l1O010O, O1OOllOl0O0).Value = OlO111OOl10("Planned_Duration").Value
.Cells(O1O1l1O010O, O1OOllOO0O1).Value = OlO111OOl10("Actual_Start").Value
.Cells(O1O1l1O010O, O1OlllOO0l1).Value = OlO111OOl10("Actual_Finish").Value
.Cells(O1O1l1O010O, O1O1llOO011).Value = OlO111OOl10("Actual_Total_Work").Value
.Cells(O1O1l1O010O, O1O11lOO010).Value = OlO111OOl10("Actual_Total_Duration").Value
.Cells(O1O1l1O010O, O1O1llOO0l0).Value = OlO111OOl10("Weight").Value
.Cells(O1O1l1O010O, O1l1lllO0l0).Value = OlO111OOl10("Resources").Value
.Cells(O1O1l1O010O, O0l11llO0l0).Value = OlO111OOl10("Deliverables").Value
.Cells(O1O1l1O010O, O0111OlO0l0).Value = OlO111OOl10("Planned_PctWork_Complete").Value
.Cells(O1O1l1O010O, O011lOlO1l0).Value = OlO111OOl10("PctWork_Complete").Value
End With
OlO111OOl10.MoveNext
O1O1l0O1110 = O1O1l0O1110 + 1
O1l1l0O010O.RemoveAll
Set O1l1l0O010O = Nothing
Loop
End If
OO10OO0l000 Ol111ll1lO1, "txtMsg", Ol10100l000("The following files have been successfully imported.") & vbNewLine & O1O1l0O0l0O & vbNewLine
OO10OO0l000 Ol111ll1lO1, "txtMsg", Ol10100l000("Rows of imported data : ") & OlO111OOl10.RecordCount & vbNewLine & vbNewLine
OlO111OOl10.Close
OlO011OOl10.Close
Next O1O1l0O0l0O
OO10OO0l000 Ol111ll1lO1, "txtMsg", "============================================================" & vbNewLine
OO10OO0l000 Ol111ll1lO1, "txtMsg", Ol10100l000("Import success!\nTotal rows of imported data : ") & O1O1l0O1110 & vbNewLine
OO10OO0l000 Ol111ll1lO1, "txtMsg", vbNewLine & Ol10100l000("Updating schedule... \nplease wait...") & vbNewLine & vbNewLine
O10O01lll11
OO10OO0l000 Ol111ll1lO1, "txtMsg", Ol10100l000("Schedule update has been completed.") & vbNewLine & vbNewLine
Ol111ll1lO1.cmdClose.Enabled = True
With Application
.ScreenUpdating = True
.Calculation = O1O1l0O1010
End With
Ol01llOlll0.Worksheets(schedule).Range(OlO1lll1Ol0 & O1O1l0O010O + Ol1lOlOlO10 + O1O1l0O1110).Select
Set OlO111OOl10 = Nothing
Set OlO011OOl10 = Nothing
OlO001OOl10 = True
Exit Function
catch4justexit:
OlO111OOl10.Close
OlO011OOl10.Close
Set OlO111OOl10 = Nothing
Set OlO011OOl10 = Nothing
With Application
.ScreenUpdating = True
.Calculation = O1O1l0O1010
End With
OO10OO0l000 Ol111ll1lO1, "txtMsg", Ol10100l000("The job was not completed successfully.")
Ol111ll1lO1.cmdClose.Enabled = True
OlO001OOl10 = False
Exit Function
errhandler:
O1O1l0O1011 = Err.Number
O1O0l0O1011 = Err.Description
With Application
.ScreenUpdating = True
.Calculation = O1O1l0O1010
End With
OO10OO0l000 Ol111ll1lO1, "txtMsg", Ol10100l000("Error! Cause may be one of the following.\n" & _
" * File is invalid(e.g. the XLGantt file corrupted)\n" & _
" * Not XLGantt file but General Excel file\n\n" & _
" Please check the messages below for details.") & vbNewLine & vbNewLine & "Error code : " & O1O1l0O1011 & vbNewLine & O1O0l0O1011
Ol111ll1lO1.cmdClose.Enabled = True
OlO001OOl10 = False
End Function
Public Sub O1O0l0O1O11(O1O0O0O1O11 As String)
Dim O1O0O0O0O11() As Variant
Dim O1O0OOO0O11 As Range
Dim O0O0OOO0O11 As Long
Dim O0O0OOO0011 As Long
Dim O0O1OOO0011 As Long
Dim O0l1OOO0011 As Long
Dim O0l1OOO0001 As jobresult
O0l1OOO0001 = O101l1l0llO
If O0l1OOO0001.OllO11l1O11 <> 0 Then
MsgBox O0l1OOO0001.message
Exit Sub
End If
If ActiveSheet.name <> schedule Then
MsgBox Ol10100l000("You can indent or outdent tasks only on the {} sheet.", schedule)
Exit Sub
End If
If TypeName(Selection) <> "Range" Then
MsgBox Ol10100l000("Task area was not selected. Please select a task area.")
Exit Sub
End If
If Selection.Areas.Count > 1 Then
MsgBox Ol10100l000("You selected {} areas. Please select only one area.", Selection.Areas.Count)
Exit Sub
End If
O0O0OOO0O11 = Selection.Row
O0O0OOO0011 = Selection.Rows.Count
If O0O0OOO0O11 < Ol1lOlOlO10 Then
MsgBox Ol10100l000("You can not indent or outdent the selected row.")
Exit Sub
End If
O1O0O0O0O11 = Range(OlO0lll1Ol0 & O0O0OOO0O11 & ":" & OlO0OlO1OO1 & O0O0OOO0O11 + O0O0OOO0011 - 1)
If O1O0O0O1O11 = "R" Then
For O0O1OOO0011 = 1 To UBound(O1O0O0O0O11, 1)
For O0l1OOO0011 = 1 To 7
If O1O0O0O0O11(O0O1OOO0011, O0l1OOO0011) > "" Then
If O0l1OOO0011 = 7 Then
MsgBox Ol10100l000("You can not indent any more!")
Exit Sub
Else
O1O0O0O0O11(O0O1OOO0011, O0l1OOO0011 + 1) = O1O0O0O0O11(O0O1OOO0011, O0l1OOO0011)
O1O0O0O0O11(O0O1OOO0011, O0l1OOO0011) = ""
Exit For
End If
End If
Next O0l1OOO0011
Next O0O1OOO0011
Else
If O1O0O0O1O11 = "L" Then
For O0O1OOO0011 = 1 To UBound(O1O0O0O0O11, 1)
For O0l1OOO0011 = 1 To 7
If O1O0O0O0O11(O0O1OOO0011, O0l1OOO0011) > "" Then
If O0l1OOO0011 = 1 Then
MsgBox Ol10100l000("You can not outdent any more!")
Exit Sub
Else
O1O0O0O0O11(O0O1OOO0011, O0l1OOO0011 - 1) = O1O0O0O0O11(O0O1OOO0011, O0l1OOO0011)
O1O0O0O0O11(O0O1OOO0011, O0l1OOO0011) = ""
Exit For
End If
End If
Next O0l1OOO0011
Next O0O1OOO0011
End If
End If
Set O1O0OOO0O11 = Range(OlO0lll1Ol0 & O0O0OOO0O11)
O1O0OOO0O11.Resize(UBound(O1O0O0O0O11, 1), UBound(O1O0O0O0O11, 2)).Value = O1O0O0O0O11
Erase O1O0O0O0O11
End Sub
Public Sub O0l1OOO0000()
Dim O0l0OOO0000 As Object
Dim O1l0OOO0000 As Object
Dim O1l1OOO0000 As Object
Dim O1l1OOO00O0 As Object
Const O1l1OOOO0O0 As Long = 1
Const O1l1OlOO0O0 As Long = 0
Const O1l1OllO0O0 As Long = 2
Const O1l1OllO1O0 As Long = 9
Const O1l1OllO1O1 As Long = 0
Dim O1O1OllO1O1 As String
Dim O1OlOllO1O1 As String
Dim O1OlOOlO1O1 As Date
Dim O0OlOOlO1O1 As Date
Dim O0OlOllO1O1() As Variant
Dim O0OlOllO1Ol As Range
Dim O0OlOllO1ll As Long
Dim O0O1OllO1ll As Long
Dim O0O1Ol1O1ll As Long
Dim O0O1Ol1O1Ol As Long
Dim O0O1ll1O1Ol As String
Dim O0O1ll0O1Ol As Long
Dim O0O1ll0O10l As String
O0O1ll1O1Ol = OO10OlOl0l1()
If Not O0O1ll1O1Ol = "OK" Then
MsgBox Ol10100l000("The {} sheet does not exist. Please check that you have changed or deleted the sheet.", O0O1ll1O1Ol)
Exit Sub
End If
If ActiveSheet.name <> schedule Then
MsgBox Ol10100l000("You can add ""Outlook Appointments"" only on the {} sheet.", schedule)
Exit Sub
End If
If TypeName(Selection) <> "Range" Then
MsgBox Ol10100l000("Task area was not selected. Please select a task area.")
Exit Sub
End If
If Selection.Areas.Count > 1 Then
MsgBox Ol10100l000("You selected {} areas. Please select only one area.", Selection.Areas.Count)
Exit Sub
End If
O0OlOllO1ll = Selection.Row
O0O1OllO1ll = Selection.Rows.Count
If O0OlOllO1ll < Ol1lOlOlO10 Then
MsgBox Ol10100l000("You can not add ""Outlook Appointments"" in the selected area.")
Exit Sub
End If
On Error Resume Next
Set O0l0OOO0000 = GetObject("", "Outlook.Application")
On Error GoTo 0
If O0l0OOO0000 Is Nothing Then
On Error Resume Next
Set O0l0OOO0000 = CreateObject("Outlook.Application")
On Error GoTo 0
If O0l0OOO0000 Is Nothing Then
MsgBox Ol10100l000("You can not use ""Microsoft Outlook"". \nMake sure you properly installed it.")
Exit Sub
End If
End If
On Error GoTo errhandler
Set O1l1OOO0000 = O0l0OOO0000.getnamespace("MAPI")
Set O1l1OOO00O0 = O1l1OOO0000.getdefaultfolder(O1l1OllO1O0)
O0OlOllO1O1 = Range(OlO1Oll1ll0 & O0OlOllO1ll & ":" & Ol01O1l1ll0 & O0OlOllO1ll + O0O1OllO1ll - 1)
For O0O1Ol1O1ll = 1 To UBound(O0OlOllO1O1, 1)
If (O0OlOllO1O1(O0O1Ol1O1ll, OlO1Oll1Ol1 + O0OlOllO1O1(O0O1Ol1O1ll, OlO0Oll1ll0)) > "") And (O0OlOllO1O1(O0O1Ol1O1ll, Oll0OOl1OO0) > "") Then
O1O1OllO1O1 = O0OlOllO1O1(O0O1Ol1O1ll, OlO1Oll1Ol0) & " " & O0OlOllO1O1(O0O1Ol1O1ll, OlO1Oll1Ol1 + O0OlOllO1O1(O0O1Ol1O1ll, OlO0Oll1ll0))
O1OlOllO1O1 = Ol10100l000("WBS No.") & " : " & O0OlOllO1O1(O0O1Ol1O1ll, OlO1Oll1Ol0) & vbNewLine & _
Ol10100l000("Task") & " : " & O0OlOllO1O1(O0O1Ol1O1ll, OlO1Oll1Ol1 + O0OlOllO1O1(O0O1Ol1O1ll, OlO0Oll1ll0)) & vbNewLine & _
Ol10100l000("Resources") & " : " & O0OlOllO1O1(O0O1Ol1O1ll, O1l1lllO0l0) & vbNewLine & _
Ol10100l000("Deliverables") & " : " & O0OlOllO1O1(O0O1Ol1O1ll, O0l11llO0l0)
O1OlOOlO1O1 = O0OlOllO1O1(O0O1Ol1O1ll, Oll0OOl1OO0)
O0OlOOlO1O1 = DateAdd("h", 24, O0OlOllO1O1(O0O1Ol1O1ll, Oll1lOl1OO0))
Set O1l0OOO0000 = O0l0OOO0000.createitem(O1l1OOOO0O0)
If Ol0lOO11OOO(O0l0OOO0000, O1l1OOO00O0, O1OlOOlO1O1, O1O1OllO1O1) Then
MsgBox Ol10100l000("Because the following task already has been added, XLGantt does not add it to ""Outlook"".\n\nTask Name : {1} \nStart Date : {2}", O1O1OllO1O1, O1OlOOlO1O1), vbOKOnly + vbInformation
Else
With O1l0OOO0000
.Subject = O1O1OllO1O1
.body = O1OlOllO1O1
.Start = O1OlOOlO1O1
.End = O0OlOOlO1O1
.Save
End With
O0O1Ol1O1Ol = O0O1Ol1O1Ol + 1
End If
End If
Next O0O1Ol1O1ll
Set O1l0OOO0000 = Nothing
Set O0l0OOO0000 = Nothing
Set O1l1OOO0000 = Nothing
Set O1l1OOO00O0 = Nothing
Erase O0OlOllO1O1
If O0O1Ol1O1Ol > 0 Then
MsgBox Ol10100l000("{} ""Outlook Appointment(s)"" have been added.", O0O1Ol1O1Ol)
End If
normalend:
Exit Sub
errhandler:
O0O1ll0O1Ol = Err.Number
O0O1ll0O10l = Err.Description
If O0O1ll0O1Ol <> 0 Then
MsgBox Ol10100l000("An error occurred while processing. Please check the messages below.") & vbNewLine & vbNewLine & "Error code : " & O0O1ll0O1Ol & vbNewLine & O0O1ll0O10l
End If
Resume normalend
End Sub
Public Sub O0O1ll0l10l()
Dim O0O1ll0110l As Object
Dim O0O1ll0110O As Object
Dim O0O1ll1110O As Object
Dim O0O1ll11100 As Object
Const O1l1OOOO0O0 As Long = 1
Const O0O1ll01100 As Long = 3
Const O0Olll01100 As Long = 1
Const O1l1OlOO0O0 As Long = 0
Const O1l1OllO0O0 As Long = 2
Const O0OlOl01100 As Long = 13
Const O1l1OllO1O1 As Long = 0
Const O00lOl01100 As Long = 2
Const O00lOl01000 As Long = 4
Const O00lOl00100 As Long = 1
Const O00lOl00101 As Long = 0
Const O00lOO00101 As Long = 3
Dim O00lOO00100 As Long
Dim O00OOO00100 As String
Dim OO0lOO00100 As String
Dim OO0lOO0010O As Date
Dim OO0lOO1010O As Date
Dim OO0llO1010O() As Variant
Dim OO0llO0010O As Range
Dim OO0lOO00l0O As Long
Dim OO0OOO00l0O As Long
Dim OO0OOO00lOO As Long
Dim Ol0OOO00lOO As Long
Dim Ol0lOO00lOO As String
Dim Ol0lOO00OOO As Long
Dim Ol0lOO01OOO As String
Ol0lOO00lOO = OO10OlOl0l1()
If Not Ol0lOO00lOO = "OK" Then
MsgBox Ol10100l000("The {} sheet does not exist. Please check that you have changed or deleted the sheet.", Ol0lOO00lOO)
Exit Sub
End If
If ActiveSheet.name <> schedule Then
MsgBox Ol10100l000("You can add ""Outlook Tasks"" only on the {} sheet.", schedule)
Exit Sub
End If
If TypeName(Selection) <> "Range" Then
MsgBox Ol10100l000("Task area was not selected. Please select a task area.")
Exit Sub
End If
If Selection.Areas.Count > 1 Then
MsgBox Ol10100l000("You selected {} areas. Please select only one area.", Selection.Areas.Count)
Exit Sub
End If
OO0lOO00l0O = Selection.Row
OO0OOO00l0O = Selection.Rows.Count
If OO0lOO00l0O < Ol1lOlOlO10 Then
MsgBox Ol10100l000("You can not add ""Outlook Tasks"" in the selected area.")
Exit Sub
End If
On Error Resume Next
Set O0O1ll0110l = GetObject("", "Outlook.Application")
On Error GoTo 0
If O0O1ll0110l Is Nothing Then
On Error Resume Next
Set O0O1ll0110l = CreateObject("Outlook.Application")
On Error GoTo 0
If O0O1ll0110l Is Nothing Then
MsgBox Ol10100l000("You can not use ""Microsoft Outlook"". \nMake sure you properly installed it.")
Exit Sub
End If
End If
On Error GoTo errhandler
Set O0O1ll1110O = O0O1ll0110l.getnamespace("MAPI")
Set O0O1ll11100 = O0O1ll1110O.getdefaultfolder(O0OlOl01100)
OO0llO1010O = Range(OlO1Oll1ll0 & OO0lOO00l0O & ":" & Ol01O1l1ll0 & OO0lOO00l0O + OO0OOO00l0O - 1)
For OO0OOO00lOO = 1 To UBound(OO0llO1010O, 1)
If (OO0llO1010O(OO0OOO00lOO, OlO1Oll1Ol1 + OO0llO1010O(OO0OOO00lOO, OlO0Oll1ll0)) > "") And (OO0llO1010O(OO0OOO00lOO, Oll0OOl1OO0) > "") Then
O00OOO00100 = OO0llO1010O(OO0OOO00lOO, OlO1Oll1Ol0) & " " & OO0llO1010O(OO0OOO00lOO, OlO1Oll1Ol1 + OO0llO1010O(OO0OOO00lOO, OlO0Oll1ll0))
OO0lOO00100 = Ol10100l000("WBS No.") & " : " & OO0llO1010O(OO0OOO00lOO, OlO1Oll1Ol0) & vbNewLine & _
Ol10100l000("Task") & " : " & OO0llO1010O(OO0OOO00lOO, OlO1Oll1Ol1 + OO0llO1010O(OO0OOO00lOO, OlO0Oll1ll0)) & vbNewLine & _
Ol10100l000("Resources") & " : " & OO0llO1010O(OO0OOO00lOO, O1l1lllO0l0) & vbNewLine & _
Ol10100l000("Deliverables") & " : " & OO0llO1010O(OO0OOO00lOO, O0l11llO0l0)
OO0lOO0010O = OO0llO1010O(OO0OOO00lOO, Oll0OOl1OO0)
OO0lOO1010O = OO0llO1010O(OO0OOO00lOO, Oll1lOl1OO0)
Set O0O1ll0110O = O0O1ll0110l.createitem(O0O1ll01100)
If Ol01lO11OOl(O0O1ll0110l, O0O1ll11100, OO0lOO1010O, O00OOO00100) Then
MsgBox Ol10100l000("Because the following task already has been added, XLGantt does not add it to ""Outlook"".\n\nTask Name : {1} \nDue Date : {2}", O00OOO00100, OO0lOO1010O), vbOKOnly + vbInformation
Else
If OO0lOO0010O > Date Then
O00lOO00100 = O00lOl00101
Else
O00lOO00100 = O00lOl00100
End If
With O0O1ll0110O
.Subject = O00OOO00100
.body = OO0lOO00100
.Status = O00lOO00100
.importance = O0Olll01100
.startDate = OO0lOO0010O
.DueDate = OO0lOO1010O
.Save
End With
Ol0OOO00lOO = Ol0OOO00lOO + 1
End If
End If
Next OO0OOO00lOO
Set O0O1ll0110O = Nothing
Set O0O1ll0110l = Nothing
Set O0O1ll1110O = Nothing
Set O0O1ll11100 = Nothing
Erase OO0llO1010O
If Ol0OOO00lOO > 0 Then
MsgBox Ol10100l000("{} ""Outlook Task(s)"" have been added.", Ol0OOO00lOO)
End If
normalend:
Exit Sub
errhandler:
Ol0lOO00OOO = Err.Number
Ol0lOO01OOO = Err.Description
If Ol0lOO00OOO <> 0 Then
MsgBox Ol10100l000("An error occurred while processing. Please check the messages below.") & vbNewLine & vbNewLine & "Error code : " & Ol0lOO00OOO & vbNewLine & Ol0lOO01OOO
End If
Resume normalend
End Sub
Public Function Ol0lOO11OOO(ByRef Ol0lOl11OOO As Object, ByRef Ol0lll11OOO As Object, ByVal Ol0llO11OOO As Date, ByVal Ol0llO10OOO As String) As Boolean
Dim Ol0llO10OOl As Object
Const olappointment = 26
Const O1l1OOOO0O0 As Long = 1
Dim Ol01lO10OOl As Object
Ol0lOO11OOO = False
For Each Ol0llO10OOl In Ol0lll11OOO.Items
If Ol0llO10OOl.Class = olappointment Then
Set Ol01lO10OOl = Ol0llO10OOl
If (Ol01lO10OOl.Start = Ol0llO11OOO) And (Ol01lO10OOl.Subject = Ol0llO10OOO) Then
Ol0lOO11OOO = True
End If
End If
Next Ol0llO10OOl
Set Ol0llO10OOl = Nothing
End Function
Public Function Ol01lO11OOl(ByRef Ol01lO11O0l As Object, ByRef Ol11lO11O0l As Object, ByVal Ol11OO11O0l As Date, ByVal Ol11O011O0l As String) As Boolean
Dim Ol11O011l0l As Object
Const oltask = 48
Const O0O1ll01100 As Long = 3
Dim Ol01O011l0l As Object
Ol01lO11OOl = False
For Each Ol11O011l0l In Ol11lO11O0l.Items
If Ol11O011l0l.Class = oltask Then
Set Ol01O011l0l = Ol11O011l0l
If (Ol01O011l0l.DueDate = Ol11OO11O0l) And (Ol01O011l0l.Subject = Ol11O011O0l) Then
Ol01lO11OOl = True
End If
End If
Next Ol11O011l0l
Set Ol11O011l0l = Nothing
End Function
Public Sub Ol11O011l0O()
Dim Ol11O011l1O() As Variant
Dim Ol01O011l1O As Range
Dim OO01O011l1O As Long
Dim OO01O011l1l As Long
Dim OO01O0l1l1l As Long
Dim OO01OOl1l1l As Long
Dim OO01OOl1lll As jobresult
OO01OOl1lll = O101l1l0llO
If OO01OOl1lll.OllO11l1O11 <> 0 Then
MsgBox OO01OOl1lll.message
Exit Sub
End If
If ActiveSheet.name <> schedule Then
MsgBox Ol10100l000("You can edit task only on the {} sheet.", schedule)
Exit Sub
End If
If TypeName(Selection) <> "Range" Then
MsgBox Ol10100l000("Task area was not selected. Please select a task area.")
Exit Sub
End If
If Selection.Areas.Count > 1 Then
MsgBox Ol10100l000("You selected {} areas. Please select only one area.", Selection.Areas.Count)
Exit Sub
End If
OO01O011l1O = Selection.Row
OO01O011l1l = Selection.Rows.Count
If OO01O011l1O < Ol1lOlOlO10 Then
MsgBox Ol10100l000("You can not edit a task in the selected area.")
Exit Sub
End If
Load OO101ll0Oll
OO101ll0Oll.txtWBS = Cells(OO01O011l1O, OlO1Oll1Ol0)
OO101ll0Oll.txtTask = Cells(OO01O011l1O, OlO1Oll1Ol1 + Cells(OO01O011l1O, OlO0Oll1ll0))
OO101ll0Oll.txtETC = Cells(OO01O011l1O, OlO0Oll1OO1)
OO101ll0Oll.txtTaskStartDate = Cells(OO01O011l1O, Oll0OOl1OO0)
OO101ll0Oll.txtTaskEndDate = Cells(OO01O011l1O, Oll1lOl1OO0)
OO101ll0Oll.txtTotalWorkload = Cells(OO01O011l1O, O1lOlll1OO0)
OO101ll0Oll.txtPlanWorkload = Cells(OO01O011l1O, O0OOlll1OO0)
OO101ll0Oll.txtTotalDuration = Cells(OO01O011l1O, O1OOllllOO0)
OO101ll0Oll.txtPlanDuration = Cells(OO01O011l1O, O1OOllOl0O0)
If getattr("optScheduleChangeMgt", O11l11ll1O1) = OO11OlOOl1l Then
OO101ll0Oll.txtTaskActualStartDate = Cells(OO01O011l1O, O1OOllOO0O1)
OO101ll0Oll.txtTaskActualEndDate = Cells(OO01O011l1O, O1OlllOO0l1)
OO101ll0Oll.txtActualTotalWorkload = Cells(OO01O011l1O, O1O1llOO011)
OO101ll0Oll.txtActualTotalDuration = Cells(OO01O011l1O, O1O11lOO010)
End If
If (Cells(OO01O011l1O, Ollllll1OO0) = "STD_CAL") Or (Cells(OO01O011l1O, Ollllll1OO0) = "UD_CAL1") Or (Cells(OO01O011l1O, Ollllll1OO0) = "UD_CAL2") Then
OO101ll0Oll.cbxCalendar.Value = Cells(OO01O011l1O, Ollllll1OO0)
Else
OO101ll0Oll.cbxCalendar.Value = "STD_CAL"
End If
OO101ll0Oll.txtResourceWeight = Cells(OO01O011l1O, O1O1llOO0l0)
OO101ll0Oll.txtResource = Cells(OO01O011l1O, O1l1lllO0l0)
OO101ll0Oll.txtDeliverables = Cells(OO01O011l1O, O0l11llO0l0)
If IsNumeric(Cells(OO01O011l1O, O0111OlO0l0)) Then
OO101ll0Oll.txtPlanRate = Cells(OO01O011l1O, O0111OlO0l0) * 100
Else
OO101ll0Oll.txtPlanRate = Cells(OO01O011l1O, O0111OlO0l0)
End If
If IsNumeric(Cells(OO01O011l1O, O011lOlO1l0)) Then
OO101ll0Oll.txtActualRate = Cells(OO01O011l1O, O011lOlO1l0) * 100
Else
OO101ll0Oll.txtActualRate = Cells(OO01O011l1O, O011lOlO1l0)
End If
OO101ll0Oll.txtRowNum = OO01O011l1O
If (Cells(OO01O011l1O, OlO0Oll1ll0) = 0 Or Cells(OO01O011l1O, OlO0Oll1ll0) = "") Then
OO101ll0Oll.txtTaskPosition = OlO1Oll1Ol1 + 1
Else
OO101ll0Oll.txtTaskPosition = OlO1Oll1Ol1 + Cells(OO01O011l1O, OlO0Oll1ll0)
End If
OO101ll0Oll.Show
End Sub
Public Sub OO11OOl1lll()
Ol111ll1lO1.Show
End Sub
Public Sub OO1lOOl1lll()
OO0001l00Ol ("W")
End Sub
Public Sub OO1lOOl0lll()
OO0001l00Ol ("M")
End Sub
Sub OO1lOll0lll()
Dim OO1lOll0llO As Long
Dim OO1lO1l0llO As Long
Dim OO1lO1l0ll0 As Long
Dim taskcount As Long
Dim OO0lO1l0ll0() As Variant
With Ol01llOlll0.Worksheets(schedule)
OO1lO1l0ll0 = (Range(Oll1OOl1OO0 & Rows.Count).End(xlUp).Row) - Ol1lOlOlO10 + 1
taskcount = O0Ol00l1Oll(argworkbook:=Ol01llOlll0, argsheet:=schedule)
If taskcount < OO1lO1l0ll0 Then
taskcount = OO1lO1l0ll0
End If
taskcount = taskcount + 1
OO0lO1l0ll0 = Range(Ol00Oll1ll0 & Ol1lOlOlO10 & ":" & OlO0Oll1Ol0 & taskcount + Ol1lOlOlO10 - 1).Value
For OO1lOll0llO = 1 To UBound(OO0lO1l0ll0, 1) - 1
If OO0lO1l0ll0(OO1lOll0llO, 2) < 1 Then
GoTo outerloopend
End If
If OO0lO1l0ll0(OO1lOll0llO, 1) <> "G" Then
GoTo outerloopend
End If
For OO1lO1l0llO = 1 To UBound(OO0lO1l0ll0, 1) - 1
If OO0lO1l0ll0(OO1lOll0llO + OO1lO1l0llO, 2) < 1 Then
GoTo innerloopend
End If
If OO0lO1l0ll0(OO1lOll0llO, 2) >= OO0lO1l0ll0(OO1lOll0llO + OO1lO1l0llO, 2) Then
.Rows(Ol1lOlOlO10 + OO1lOll0llO & ":" & Ol1lOlOlO10 + OO1lOll0llO + OO1lO1l0llO - 2).Group
GoTo outerloopend
End If
If (OO1lOll0llO + OO1lO1l0llO = taskcount - 1) Then
.Rows(Ol1lOlOlO10 + OO1lOll0llO & ":" & Ol1lOlOlO10 + OO1lOll0llO + OO1lO1l0llO - 1).Group
GoTo outerloopend
End If
innerloopend:
Next OO1lO1l0llO
outerloopend:
Next OO1lOll0llO
End With
Erase OO0lO1l0ll0
End Sub

Attribute VB_Name = "Ol00OOOOl0l"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public WithEvents lblgroup As MSForms.Label
Attribute lblgroup.VB_VarHelpID = -1
Private Sub lblgroup_click()
Dim Ol01OOOOl0l As Long
Dim Ol11OOOOl0l As Long
For Ol11OOOOl0l = 1 To 42
If OO1Ol0lll0l.Controls("lblD" & CStr(Ol11OOOOl0l)).BackColor <> RGB(255, 0, 0) Then
OO1Ol0lll0l.Controls("lblD" & CStr(Ol11OOOOl0l)).BorderColor = RGB(255, 255, 255)
OO1Ol0lll0l.Controls("lblD" & CStr(Ol11OOOOl0l)).BackColor = RGB(255, 255, 255)
End If
Next Ol11OOOOl0l
OO1Ol0lll0l.Controls(lblgroup.name).BorderColor = RGB(255, 0, 0)
End Sub
Private Sub lblgroup_dblclick(ByVal cancel As MSForms.ReturnBoolean)
Dim OO11OOOOl0l As Long
Call Ol1000Ol10O(argdate:=OO1Ol0lll0l.Controls(lblgroup.name).Tag)
End Sub
Attribute VB_Name = "Ol1010Ol10O"
Option Private Module
Option Explicit
Public Const Ol1011Ol10O = "en-US"
Type tlocaleinfo
name As String
OllO11l1O11 As String * 2
Ol1011O110O As String * 5
id As Long
End Type
Private Const Ol1011l110O = "Menu"
Private Const Ol1011l1100 = 4
Private Ol1011ll100 As String
Private Ol1011Ol100 As Long
Private Ol1010Ol100() As tlocaleinfo
Function Ol1111Ol100(Ol11110l100, Ol11100l100) As String
Dim Ol11100l000 As String
Dim Ol11101l000 As String
Dim Ol10101l000 As Long
Dim Ol10001l000 As Long
On Error Resume Next
If Left(Ol11110l100, 1) = "[" Then
Ol10101l000 = InStr(1, Ol11110l100, "]")
Ol10001l000 = Len(Ol11110l100)
Ol11101l000 = Mid(Ol11110l100, 2, Ol10101l000 - 2)
If IsNumeric(Ol11101l000) Then
With Workbooks(Ol01llO1ll0).Worksheets(Ol11llO1ll0)
Ol11100l000 = Application.WorksheetFunction.VLookup(CLng(Ol11101l000), .Range("B1:" & .Range("A2").Value & .Range("A3").Value), Ol11100l100 + 3, False)
End With
On Error GoTo 0
If Ol11100l000 = "" Then
Ol1111Ol100 = Mid(Ol11110l100, Ol10101l000 + 1, Ol10001l000 - Ol10101l000)
Else
Ol1111Ol100 = Ol11100l000
End If
Exit Function
Else
With Workbooks(Ol01llO1ll0).Worksheets(Ol11llO1ll0)
Ol11100l000 = Application.WorksheetFunction.VLookup(Ol11110l100, .Range("D1:" & .Range("A2").Value & .Range("A3").Value), Ol11100l100 + 1, False)
End With
End If
Else
With Workbooks(Ol01llO1ll0).Worksheets(Ol11llO1ll0)
Ol11100l000 = Application.WorksheetFunction.VLookup(Ol11110l100, .Range("D1:" & .Range("A2").Value & .Range("A3").Value), Ol11100l100 + 1, False)
End With
End If
On Error GoTo 0
If Ol11100l000 = "" Then
Ol1111Ol100 = Ol11110l100
Else
Ol1111Ol100 = Ol11100l000
End If
End Function
Function Ol10100l000(ByVal text As String, ParamArray Ol1010Ol000() As Variant) As String
Dim Ol10l0Ol000 As String
Dim Ol10lOOl000 As Long
Dim OO10l0Ol000 As Long
Dim OO10l1Ol000 As Long
Dim Ol10l1Ol000 As Long
Dim Ol10l1Ol0O0 As Long
If Len(text) = 0 Then Exit Function
Ol10l0Ol000 = OO1011llOl0(Ol1111Ol100(text, Ol01llO0Ol0))
OO10l1Ol000 = LBound(Ol1010Ol000)
Ol10l1Ol000 = UBound(Ol1010Ol000)
OO10l0Ol000 = 0
If OO10l1Ol000 <= Ol10l1Ol000 Then
Ol10l1Ol0O0 = InStr(Ol10l0Ol000, "{")
If (Ol10l1Ol0O0 > 0) And (Mid(Ol10l0Ol000, Ol10l1Ol0O0 + 2, 1) = "}") Then
Ol10100l000 = Ol10O1Ol0O0(Ol10l0Ol000, Ol1010Ol000)
Exit Function
Else
Do
Ol10lOOl000 = InStr(Ol10l0Ol000, "{}")
If Ol10lOOl000 And (OO10l1Ol000 + OO10l0Ol000 <= Ol10l1Ol000) Then
Ol10l0Ol000 = Left$(Ol10l0Ol000, Ol10lOOl000 - 1) & Ol1010Ol000(OO10l0Ol000) & Mid$(Ol10l0Ol000, Ol10lOOl000 + 2)
OO10l0Ol000 = OO10l0Ol000 + 1
End If
Loop Until Ol10lOOl000 = 0
End If
End If
Ol10100l000 = Ol10l0Ol000
End Function
Function Ol10O1Ol0O0(ByVal Ol11O1Ol0O0 As String, ParamArray Ol11O1OlOO0() As Variant)
Dim Ol11l1OlOO0 As Long
For Ol11l1OlOO0 = 0 To UBound(Ol11O1OlOO0(0))
Ol11O1Ol0O0 = VBA.Replace(Ol11O1Ol0O0, "{" & Ol11l1OlOO0 + 1 & "}", Ol11O1OlOO0(0)(Ol11l1OlOO0))
Next Ol11l1OlOO0
Ol10O1Ol0O0 = Ol11O1Ol0O0
End Function
Function Ol11l1OlOl0(f As UserForm) As Boolean
Dim Ol11l1llOl0 As control
On Error Resume Next
For Each Ol11l1llOl0 In f.Controls
O00OO0l1ll0 Ol11l1llOl0
Next Ol11l1llOl0
End Function
Function OO11l1llOl0(ByVal text As String) As String
Dim OO10l1llOl0 As Long
OO10l1llOl0 = InStr(text, vbNewLine)
While OO10l1llOl0
text = Left$(text, OO10l1llOl0 - 1) & "\n" & Mid$(text, OO10l1llOl0 + 2)
OO10l1llOl0 = InStr(OO10l1llOl0 + 2, text, vbNewLine)
Wend
OO10l1llOl0 = InStr(text, vbLf)
While OO10l1llOl0
text = Left$(text, OO10l1llOl0 - 1) & "\n" & Mid$(text, OO10l1llOl0 + 1)
OO10l1llOl0 = InStr(OO10l1llOl0 + 2, text, vbLf)
Wend
OO10l1llOl0 = InStr(text, vbTab)
While OO10l1llOl0
text = Left$(text, OO10l1llOl0 - 1) & "\t" & Mid$(text, OO10l1llOl0 + 1)
OO10l1llOl0 = InStr(OO10l1llOl0 + 2, text, vbTab)
Wend
OO11l1llOl0 = text
End Function
Function OO1011llOl0(ByVal text As String) As String
Dim OO1O11llOl0 As Long
Dim OO1O11llll0 As Long
Dim O01O11llll0 As String * 2
Dim O00O11llll0 As String
OO1O11llll0 = 0
OO1O11llOl0 = InStr(text, "\")
While OO1O11llOl0
O01O11llll0 = Mid$(text, OO1O11llOl0, 2)
If O01O11llll0 = "\n" Then
O00O11llll0 = vbNewLine
ElseIf O01O11llll0 = "\t" Then
O00O11llll0 = vbTab
ElseIf O01O11llll0 = "\\" Then
O00O11llll0 = "\"
Else
O00O11llll0 = ""
End If
text = Left$(text, OO1O11llOl0 - 1) & O00O11llll0 & Mid$(text, OO1O11llOl0 + 2)
OO1O11llll0 = OO1O11llOl0 + 1
OO1O11llOl0 = InStr(OO1O11llll0, text, "\")
Wend
OO1011llOl0 = text
End Function
Function O00O01llll0(O00O01lllO0 As String, accelerator As String) As String
Dim O00O01l1lO0 As String
Dim O00O01l1ll0 As Long
O00O01l1lO0 = O00O01lllO0
O00O01l1ll0 = InStr(O00O01l1lO0, "&")
While O00O01l1ll0
O00O01l1lO0 = Left$(O00O01l1lO0, O00O01l1ll0 - 1) & "&" & Mid$(O00O01l1lO0, O00O01l1ll0)
O00O01l1ll0 = InStr(O00O01l1ll0 + 2, O00O01l1lO0, "&")
Wend
If Len(accelerator) Then
O00O01l1ll0 = InStr(O00O01l1lO0, accelerator)
If O00O01l1ll0 Then
O00O01l1lO0 = Left$(O00O01l1lO0, O00O01l1ll0 - 1) & "&" & Mid$(O00O01l1lO0, O00O01l1ll0)
End If
End If
O00O01llll0 = O00O01l1lO0
End Function
Function O10O01l1ll0(O10OO1l1ll0 As String, ByRef accelerator As String) As String
Dim O00OO1l1ll0 As Long
accelerator = ""
If Len(O10OO1l1ll0) Then
O00OO1l1ll0 = InStr(O10OO1l1ll0, "&")
Do While O00OO1l1ll0
If Mid$(O10OO1l1ll0, O00OO1l1ll0, 2) = "&&" Then
O10OO1l1ll0 = Left$(O10OO1l1ll0, O00OO1l1ll0) & Mid$(O10OO1l1ll0, O00OO1l1ll0 + 2)
O00OO1l1ll0 = InStr(O00OO1l1ll0 + 1, O10OO1l1ll0, "&")
Else
Exit Do
End If
Loop
If O00OO1l1ll0 Then
accelerator = Mid$(O10OO1l1ll0, O00OO1l1ll0 + 1, 1)
O10OO1l1ll0 = Left$(O10OO1l1ll0, O00OO1l1ll0 - 1) & Mid$(O10OO1l1ll0, O00OO1l1ll0 + 1)
End If
End If
O10O01l1ll0 = O10OO1l1ll0
End Function
Private Sub O00OO0l1ll0(O00OO0l1lO0 As control)
Dim O00OOOl1lO0 As Controls
Dim O00OOOl1lOO As control
Dim O00OOOl11O0 As String
Dim O00OlOl11O0 As MSForms.Page
On Error Resume Next
With O00OO0l1lO0
.ControlTipText = Ol10100l000(.ControlTipText)
O00OOOl11O0 = .accelerator
.Caption = O10O01l1ll0(Ol10100l000(OO11l1llOl0(O00O01llll0(.Caption, O00OOOl11O0))), O00OOOl11O0)
.accelerator = O00OOOl11O0
Set O00OOOl1lO0 = O00OO0l1lO0.Controls
If Not (O00OOOl1lO0 Is Nothing) Then
For Each O00OOOl1lOO In O00OOOl1lO0
O00OO0l1ll0 O00OOOl1lOO
Next O00OOOl1lOO
End If
If TypeName(O00OO0l1lO0) = "MultiPage" Then
For Each O00OlOl11O0 In O00OO0l1lO0.Pages
O00OlOl11O0.Caption = Ol10100l000(O00OlOl11O0.Caption)
Next O00OlOl11O0
End If
End With
End Sub
Attribute VB_Name = "Ol1011ll10l"
Option Explicit
Option Private Module
Dim Ol1011ll1Ol() As New Ol00OOOOl0l
Sub Ol1010ll10l()
Dim Ol1000ll10l As Long
Dim Ol1000ll10O As control
If OO1Ol0lll0l.Visible Then
Unload OO1Ol0lll0l
Exit Sub
End If
Ol1000ll10l = 0
For Each Ol1000ll10O In OO1Ol0lll0l.Controls
If TypeName(Ol1000ll10O) = "Label" Then
If Left(Ol1000ll10O.name, 4) = "lblD" Then
Ol1000ll10l = Ol1000ll10l + 1
ReDim Preserve Ol1011ll1Ol(1 To Ol1000ll10l)
Set Ol1011ll1Ol(Ol1000ll10l).lblgroup = Ol1000ll10O
End If
End If
Next Ol1000ll10O
OO1Ol0lll0l.Show
End Sub
Sub Ol1000Ol10O(ByVal argdate As Date)
With Application
.ScreenUpdating = False
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
ActiveCell.Value = argdate
Unload OO1Ol0lll0l
With Application
.Calculation = Ol01llO00l0
.ScreenUpdating = True
End With
End Sub
Attribute VB_Name = "Ol111ll1lO1"
Attribute VB_Base = "0{AF796E3C-D715-4499-A66D-7D5B2F62835B}{CE7964A5-2C18-44D0-8736-FFEA00F25B5B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub cmdcancel_click()
Unload Me
End Sub
Private Sub cmdcancelxlgantt_click()
Unload Me
End Sub
Private Sub cmdclose_click()
Unload Me
End Sub
Private Sub cmdimportxlgantt_click()
Ol111ll1lO1.MultiPage1.Value = Ol111ll1lO1.MultiPage1.Value + 1
OlO001OOl10
End Sub
Private Sub cmdnext_click()
If optImportCommonExcel = True Then
If OlOOOOO1O11 = True Then
Me.width = 773
MultiPage1.width = 773
MultiPage1.Value = MultiPage1.Value + 1
Else
Ol111ll1lO1.MultiPage1.Value = Ol111ll1lO1.MultiPage1.Value + 3
Ol111ll1lO1.cmdClose.Enabled = True
End If
Else
Ol111ll1lO1.MultiPage1.Value = Ol111ll1lO1.MultiPage1.Value + 2
End If
End Sub
Private Sub commandbutton1_click()
Unload Me
End Sub
Private Sub userform_initialize()
Dim Ol11lOl1lO1 As jobresult
Ol11l1OlOl0 Me
Me.Caption = Ol10100l000(Me.Caption)
Ol11lOl1lO1 = O101l1l0llO
If Ol11lOl1lO1.OllO11l1O11 <> 0 Then
MsgBox Ol11lOl1lO1.message
Exit Sub
End If
Me.optImportXLGantt = True
Me.optAddXLGantt = True
MultiPage1.Value = 0
End Sub
Private Sub cmdimport_click()
Dim O1111ll1lO1 As Long
Dim O111lll1lO1 As Long
Dim O101lll1lO1 As Long
Dim O101llO1lO1 As Long
Dim O111llO1lO1 As Long
Dim O111lOl1lO1 As Long
Dim O011lOl1lO1 As Long
Dim O011lOl0lO1 As Long
Dim O011lOl0ll1 As Long
Dim OO11lOl0ll1 As Long
Dim OO11lOl0Ol1 As Long
Dim OO11lll0Ol1 As Long
Dim OO11Oll0Ol1 As Long
Dim OO10Oll0Ol1 As Long
Dim OO100ll0Ol1 As String
Dim OO10OllOOl1 As Long
Dim OO1OOllOOl1 As Long
Dim taskcount As Long
Dim OO1lOllOOl1 As Long
Dim OO1OOllOOll() As Variant
Dim OO1OOllOO1l() As Variant
Dim OO1OOllO01l As Range
Application.ScreenUpdating = False
If Ol11llOOlO0 = True Then
Ol11llOOll0.Close savechanges:=False
Ol11llOOlO0 = False
End If
OO1OOllOOl1 = 2
Worksheets(schedule).Select
If Worksheets(schedule).AutoFilterMode Then
Worksheets(schedule).AutoFilterMode = False
End If
Columns(OlO1lll1Ol0 & ":" & Ol01O1l1ll0).Select
Selection.EntireColumn.Hidden = False
taskcount = O0Ol00l1Oll(argworkbook:=ActiveWorkbook, argsheet:=schedule)
If Ol111ll1lO1.optAdd Then
OO10OllOOl1 = taskcount + 1
Else
If Ol111ll1lO1.optAddAfterDelete Then
OO10OllOOl1 = 1
Else
MsgBox Ol10100l000("Choose an import option.")
Exit Sub
End If
End If
If OO10OllOOl1 = 1 Then
OO1OOllOOll = Range(OlO1Oll1ll0 & Ol1lOlOlO10 & ":" & Ol01O1l1ll0 & Ol1lOlOlO10)
Else
OO1OOllOOll = Range(OlO1Oll1ll0 & Ol1lOlOlO10 & ":" & Ol01O1l1ll0 & OO10OllOOl1 + Ol1lOlOlO10 - 2)
End If
ReDim OO1OOllOO1l(1 To UBound(Ol01llOOll0, 1), 1 To UBound(OO1OOllOOll, 2))
Rows(OO10OllOOl1 + Ol1lOlOlO10 - 1 & ":" & taskcount + Ol1lOlOlO10 - 1).Select
Selection.ClearContents
For O1111ll1lO1 = 0 To Ol111ll1lO1.lstMap.ListCount - 1
Select Case Ol111ll1lO1.lstMap.List(O1111ll1lO1, 1)
Case OlO1Oll1Ol0
O101llO1lO1 = Ol111ll1lO1.lstMap.List(O1111ll1lO1, 0)
Case OlO0Oll1ll0
O111llO1lO1 = Ol111ll1lO1.lstMap.List(O1111ll1lO1, 0)
Case OlO1lOl1Ol0
O111lOl1lO1 = Ol111ll1lO1.lstMap.List(O1111ll1lO1, 0)
Case Oll0OOl1OO0
O011lOl1lO1 = Ol111ll1lO1.lstMap.List(O1111ll1lO1, 0)
Case Oll1lOl1OO0
O011lOl0lO1 = Ol111ll1lO1.lstMap.List(O1111ll1lO1, 0)
Case O1OOllOO0O1
O011lOl0ll1 = Ol111ll1lO1.lstMap.List(O1111ll1lO1, 0)
Case O1OlllOO0l1
OO11lOl0ll1 = Ol111ll1lO1.lstMap.List(O1111ll1lO1, 0)
Case O1l1lllO0l0
OO11lOl0Ol1 = Ol111ll1lO1.lstMap.List(O1111ll1lO1, 0)
Case O0l11llO0l0
OO11lll0Ol1 = Ol111ll1lO1.lstMap.List(O1111ll1lO1, 0)
Case O011lOlO1l0
OO11Oll0Ol1 = Ol111ll1lO1.lstMap.List(O1111ll1lO1, 0)
Case Else
MsgBox Ol10100l000("Error, Invalid field specified.")
Exit Sub
End Select
Next O1111ll1lO1
If O111lOl1lO1 <= 0 Then
MsgBox Ol10100l000("Task(Task name or Name) is missing.")
Exit Sub
End If
O111lll1lO1 = 0
If Ol111ll1lO1.optTaskSameField Then
If O101llO1lO1 > 0 Then
For O1111ll1lO1 = OO1OOllOOl1 To UBound(Ol01llOOll0, 1)
OO10Oll0Ol1 = Len(Ol01llOOll0(O1111ll1lO1, O101llO1lO1)) - Len(Replace(Ol01llOOll0(O1111ll1lO1, O101llO1lO1), ".", "")) + 1
O111lll1lO1 = O111lll1lO1 + 1
OO1OOllOO1l(O111lll1lO1, OlO1lOl1Ol0 + OO10Oll0Ol1 - 1) = Ol01llOOll0(O1111ll1lO1, O111lOl1lO1)
Next O1111ll1lO1
Else
If O111llO1lO1 > 0 Then
For O1111ll1lO1 = OO1OOllOOl1 To UBound(Ol01llOOll0, 1)
If IsNumeric(Ol01llOOll0(O1111ll1lO1, O111llO1lO1)) Then
OO10Oll0Ol1 = CLng(Ol01llOOll0(O1111ll1lO1, O111llO1lO1))
Else
If Ol01llOOll0(O1111ll1lO1, O111llO1lO1) <> "" Then
MsgBox Ol10100l000("WBS Level is invalid. Enter a number only. Verify row {} of the source file.", O1111ll1lO1)
Exit Sub
End If
End If
O111lll1lO1 = O111lll1lO1 + 1
OO1OOllOO1l(O111lll1lO1, OlO1lOl1Ol0 + OO10Oll0Ol1 - 1) = Ol01llOOll0(O1111ll1lO1, O111lOl1lO1)
Next O1111ll1lO1
Else
MsgBox Ol10100l000("Once you choose ""Display the task name in the same field"" option, you should select a WBS No. or a WBS Level field.")
Exit Sub
End If
End If
Else
If Ol111ll1lO1.optTaskNotSameField Then
OO1lOllOOl1 = Ol111ll1lO1.txtNumOfLevel
For O1111ll1lO1 = OO1OOllOOl1 To UBound(Ol01llOOll0, 1)
O111lll1lO1 = O111lll1lO1 + 1
For O101lll1lO1 = 0 To OO1lOllOOl1 - 1
OO1OOllOO1l(O111lll1lO1, OlO1lOl1Ol0 + O101lll1lO1) = Ol01llOOll0(O1111ll1lO1, O111lOl1lO1 + O101lll1lO1)
Next O101lll1lO1
Next O1111ll1lO1
End If
End If
O111lll1lO1 = 0
If O011lOl1lO1 > 0 Then
For O1111ll1lO1 = OO1OOllOOl1 To UBound(Ol01llOOll0, 1)
O111lll1lO1 = O111lll1lO1 + 1
If IsDate(Ol01llOOll0(O1111ll1lO1, O011lOl1lO1)) Then
OO1OOllOO1l(O111lll1lO1, Oll0OOl1OO0) = DateValue(Ol01llOOll0(O1111ll1lO1, O011lOl1lO1))
Else
If Ol01llOOll0(O1111ll1lO1, O011lOl1lO1) <> "" Then
MsgBox Ol10100l000("Start date is invalid. Verify row {} of the source file.", O1111ll1lO1)
Exit Sub
End If
End If
Next O1111ll1lO1
End If
O111lll1lO1 = 0
If O011lOl0lO1 > 0 Then
For O1111ll1lO1 = OO1OOllOOl1 To UBound(Ol01llOOll0, 1)
O111lll1lO1 = O111lll1lO1 + 1
If IsDate(Ol01llOOll0(O1111ll1lO1, O011lOl0lO1)) Then
If TimeValue(Ol01llOOll0(O1111ll1lO1, O011lOl0lO1)) > #9:00:00 AM# Then
OO1OOllOO1l(O111lll1lO1, Oll1lOl1OO0) = DateValue(Ol01llOOll0(O1111ll1lO1, O011lOl0lO1))
Else
If TimeValue(Ol01llOOll0(O1111ll1lO1, O011lOl0lO1)) = #12:00:00 AM# Then
OO1OOllOO1l(O111lll1lO1, Oll1lOl1OO0) = DateValue(Ol01llOOll0(O1111ll1lO1, O011lOl0lO1))
Else
OO1OOllOO1l(O111lll1lO1, Oll1lOl1OO0) = DateValue(Ol01llOOll0(O1111ll1lO1, O011lOl0lO1)) - 1
End If
End If
Else
If Ol01llOOll0(O1111ll1lO1, O011lOl0lO1) <> "" Then
MsgBox Ol10100l000("Finish date is invalid. Verify row {} of the source file.", O1111ll1lO1)
Exit Sub
End If
End If
Next O1111ll1lO1
End If
O111lll1lO1 = 0
If O011lOl0ll1 > 0 Then
For O1111ll1lO1 = OO1OOllOOl1 To UBound(Ol01llOOll0, 1)
O111lll1lO1 = O111lll1lO1 + 1
If IsDate(Ol01llOOll0(O1111ll1lO1, O011lOl0ll1)) Then
OO1OOllOO1l(O111lll1lO1, O1OOllOO0O1) = DateValue(Ol01llOOll0(O1111ll1lO1, O011lOl0ll1))
Else
If Ol01llOOll0(O1111ll1lO1, O011lOl0ll1) <> "" Then
MsgBox Ol10100l000("Actual start date is invalid. Verify row {} of the source file.", O1111ll1lO1)
Exit Sub
End If
End If
Next O1111ll1lO1
End If
O111lll1lO1 = 0
If OO11lOl0ll1 > 0 Then
For O1111ll1lO1 = OO1OOllOOl1 To UBound(Ol01llOOll0, 1)
O111lll1lO1 = O111lll1lO1 + 1
If IsDate(Ol01llOOll0(O1111ll1lO1, OO11lOl0ll1)) Then
If TimeValue(Ol01llOOll0(O1111ll1lO1, OO11lOl0ll1)) > #9:00:00 AM# Then
OO1OOllOO1l(O111lll1lO1, O1OlllOO0l1) = DateValue(Ol01llOOll0(O1111ll1lO1, OO11lOl0ll1))
Else
If TimeValue(Ol01llOOll0(O1111ll1lO1, OO11lOl0ll1)) = #12:00:00 AM# Then
OO1OOllOO1l(O111lll1lO1, O1OlllOO0l1) = DateValue(Ol01llOOll0(O1111ll1lO1, OO11lOl0ll1))
Else
OO1OOllOO1l(O111lll1lO1, O1OlllOO0l1) = DateValue(Ol01llOOll0(O1111ll1lO1, OO11lOl0ll1)) - 1
End If
End If
Else
If Ol01llOOll0(O1111ll1lO1, OO11lOl0ll1) <> "" Then
MsgBox Ol10100l000("Actual finish date is invalid. Verify row {} of the source file.", O1111ll1lO1)
Exit Sub
End If
End If
Next O1111ll1lO1
End If
O111lll1lO1 = 0
If OO11lOl0Ol1 > 0 Then
For O1111ll1lO1 = OO1OOllOOl1 To UBound(Ol01llOOll0, 1)
O111lll1lO1 = O111lll1lO1 + 1
OO1OOllOO1l(O111lll1lO1, O1l1lllO0l0) = Ol01llOOll0(O1111ll1lO1, OO11lOl0Ol1)
Next O1111ll1lO1
End If
O111lll1lO1 = 0
If OO11lll0Ol1 > 0 Then
For O1111ll1lO1 = OO1OOllOOl1 To UBound(Ol01llOOll0, 1)
O111lll1lO1 = O111lll1lO1 + 1
OO1OOllOO1l(O111lll1lO1, O0l11llO0l0) = Ol01llOOll0(O1111ll1lO1, OO11lll0Ol1)
Next O1111ll1lO1
End If
O111lll1lO1 = 0
If OO11Oll0Ol1 > 0 Then
For O1111ll1lO1 = OO1OOllOOl1 To UBound(Ol01llOOll0, 1)
If IsNumeric(Ol01llOOll0(O1111ll1lO1, OO11Oll0Ol1)) Then
O111lll1lO1 = O111lll1lO1 + 1
OO1OOllOO1l(O111lll1lO1, O011lOlO1l0) = CDbl(Ol01llOOll0(O1111ll1lO1, OO11Oll0Ol1))
Else
If Ol01llOOll0(O1111ll1lO1, OO11Oll0Ol1) <> "" Then
MsgBox Ol10100l000("Actual %Complete is invalid. Enter a number only. Verify row {} of the source file.", O1111ll1lO1)
Exit Sub
End If
End If
Next O1111ll1lO1
End If
Range((Ol1lOlOlO10 & ":" & Ol1lOlOlO10), Selection.End(xlDown)).ClearContents
Set OO1OOllO01l = Range(OlO1Oll1ll0 & Ol1lOlOlO10)
OO1OOllO01l.Resize(UBound(OO1OOllOOll, 1), UBound(OO1OOllOOll, 2)).Value = OO1OOllOOll
Set OO1OOllO01l = Range(OlO1Oll1ll0 & Ol1lOlOlO10 + OO10OllOOl1 - 1)
OO1OOllO01l.Resize(UBound(OO1OOllOO1l, 1), UBound(OO1OOllOO1l, 2)).Value = OO1OOllOO1l
Erase OO1OOllOOll
Erase OO1OOllOO1l
Erase Ol01llOOll0
Unload Ol111ll1lO1
With Application
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
O10O01lll11
Application.Calculation = Ol01llO00l0
Application.ScreenUpdating = True
End Sub
Private Sub cmdmap_click()
Dim OO1OOllO00l As Long
Dim OO1OOllO00O As Long
OO1OOllO00l = Ol111ll1lO1.lstMap.ListCount
If Ol111ll1lO1.lstSource.ListIndex = -1 Then
MsgBox Ol10100l000("You didn't choose a source field.")
Exit Sub
End If
If Ol111ll1lO1.lstTarget.ListIndex = -1 Then
MsgBox Ol10100l000("You didn't choose a target field.")
Exit Sub
End If
If Ol111ll1lO1.lstSource.Column(1) = "" Then
MsgBox Ol10100l000("You can't choose a field that is empty.")
Exit Sub
End If
If Ol111ll1lO1.lstTarget.Column(0) = OlO1lOl1Ol0 Then
If Ol111ll1lO1.optTaskNotSameField Then
If IsNumeric(Ol111ll1lO1.txtNumOfLevel.Value) Then
If CLng(Ol111ll1lO1.txtNumOfLevel.Value) <= 0 Then
MsgBox Ol10100l000("The number of Level must be positive integer.")
Exit Sub
Else
If CLng(Ol111ll1lO1.txtNumOfLevel.Value) > Ol11OlO1O10 Then
MsgBox Ol10100l000("The number of Level must be less than or equal to {}", Ol11OlO1O10)
Exit Sub
End If
End If
Else
MsgBox Ol10100l000("The number of Level must be positive integer.")
Exit Sub
End If
Else
If Not Ol111ll1lO1.optTaskSameField Then
MsgBox Ol10100l000("Please choose a type of the task field.")
Exit Sub
End If
End If
End If
Ol111ll1lO1.grTask.Enabled = False
Ol111ll1lO1.optTaskSameField.Enabled = False
Ol111ll1lO1.optTaskNotSameField.Enabled = False
Ol111ll1lO1.txtNumOfLevel.Enabled = False
Ol111ll1lO1.lblNumOfLevel.Enabled = False
With Ol111ll1lO1.lstMap
.AddItem
.List(OO1OOllO00l, 0) = Ol111ll1lO1.lstSource.Column(0)
.List(OO1OOllO00l, 1) = Ol111ll1lO1.lstTarget.Column(0)
.List(OO1OOllO00l, 2) = Ol111ll1lO1.lstSource.Column(1)
.List(OO1OOllO00l, 3) = Ol111ll1lO1.lstTarget.Column(1)
.List(OO1OOllO00l, 4) = Ol111ll1lO1.lstSource.Column(2)
.List(OO1OOllO00l, 5) = Ol111ll1lO1.lstTarget.Column(2)
End With
For OO1OOllO00O = Ol111ll1lO1.lstSource.ListCount - 1 To 0 Step -1
If Ol111ll1lO1.lstSource.selected(OO1OOllO00O) Then
Ol111ll1lO1.lstSource.RemoveItem OO1OOllO00O
Exit For
End If
Next
For OO1OOllO00O = Ol111ll1lO1.lstTarget.ListCount - 1 To 0 Step -1
If Ol111ll1lO1.lstTarget.selected(OO1OOllO00O) Then
Ol111ll1lO1.lstTarget.RemoveItem OO1OOllO00O
Exit For
End If
Next
If (Ol111ll1lO1.lstSource.ListCount = 0 Or Ol111ll1lO1.lstTarget.ListCount = 0) Then
Ol111ll1lO1.cmdMap.Enabled = False
End If
If (Ol111ll1lO1.lstMap.ListCount > 0) Then
Ol111ll1lO1.cmdUnMap.Enabled = True
End If
End Sub
Private Sub cmdunmap_click()
Dim OO1OOllO10O As Long
Dim OO1OOllO11O As Long
Dim OO1OOllO01O As Long
OO1OOllO10O = Ol111ll1lO1.lstSource.ListCount
OO1OOllO11O = Ol111ll1lO1.lstTarget.ListCount
If Ol111ll1lO1.lstMap.ListIndex = -1 Then
MsgBox Ol10100l000("You didn't choose an unmap item.")
Exit Sub
End If
With Ol111ll1lO1.lstSource
.AddItem
.List(OO1OOllO10O, 0) = Ol111ll1lO1.lstMap.Column(0)
.List(OO1OOllO10O, 1) = Ol111ll1lO1.lstMap.Column(2)
.List(OO1OOllO10O, 2) = Ol111ll1lO1.lstMap.Column(4)
End With
With Ol111ll1lO1.lstTarget
.AddItem
.List(OO1OOllO11O, 0) = Ol111ll1lO1.lstMap.Column(1)
.List(OO1OOllO11O, 1) = Ol111ll1lO1.lstMap.Column(3)
.List(OO1OOllO11O, 2) = Ol111ll1lO1.lstMap.Column(5)
End With
For OO1OOllO01O = Ol111ll1lO1.lstMap.ListCount - 1 To 0 Step -1
If Ol111ll1lO1.lstMap.selected(OO1OOllO01O) Then
Ol111ll1lO1.lstMap.RemoveItem OO1OOllO01O
Exit For
End If
Next
If (Ol111ll1lO1.lstMap.ListCount = 0) Then
Ol111ll1lO1.cmdUnMap.Enabled = False
End If
Ol111ll1lO1.cmdMap.Enabled = True
End Sub
Private Sub commandbutton2_click()
Ol111ll1lO1.lstSource.RemoveItem 2
End Sub
Private Sub lsttarget_click()
Select Case Ol111ll1lO1.lstTarget.Column(0)
Case OlO1Oll1Ol0
Ol111ll1lO1.lblMapFieldExp.Caption = Ol10100l000("""WBS""(Work Breakdown Structure) field. It displays the level of a task. Instead of WBS, you can use ""Outline level"".")
Case OlO0Oll1ll0
Ol111ll1lO1.lblMapFieldExp.Caption = Ol10100l000("""Outline level""(task Level) field. It displays the level of a task.Instead of ""Outline level"", you can use ""WBS"".")
Case OlO1lOl1Ol0
Ol111ll1lO1.grTask.Visible = True
Ol111ll1lO1.grTask.Enabled = True
Ol111ll1lO1.optTaskSameField.Enabled = True
Ol111ll1lO1.optTaskNotSameField.Enabled = True
Ol111ll1lO1.txtNumOfLevel.Enabled = True
Ol111ll1lO1.lblNumOfLevel.Enabled = True
Ol111ll1lO1.lblMapFieldExp.Caption = Ol10100l000("Task name field.It's also referred to as ""Work"" or ""Activity"" or etc.")
Case Oll0OOl1OO0
Ol111ll1lO1.lblMapFieldExp.Caption = Ol10100l000("Start date field of a task. It must be in date format.")
Case Oll1lOl1OO0
Ol111ll1lO1.lblMapFieldExp.Caption = Ol10100l000("Finish date field of a task. It must be in date format.")
Case O1OOllOO0O1
Ol111ll1lO1.lblMapFieldExp.Caption = Ol10100l000("Actual start date field of a task. It must be in date format.")
Case O1OlllOO0l1
Ol111ll1lO1.lblMapFieldExp.Caption = Ol10100l000("Actual finish date field of a task. It must be in date format.")
Case O1l1lllO0l0
Ol111ll1lO1.lblMapFieldExp.Caption = Ol10100l000("Resource field.")
Case O0l11llO0l0
Ol111ll1lO1.lblMapFieldExp.Caption = Ol10100l000("Deliverables field.")
Case O011lOlO1l0
Ol111ll1lO1.lblMapFieldExp.Caption = Ol10100l000("Actual progress rate(%Work Complete) field.")
Case Else
MsgBox Ol10100l000("Error, Invalid field specified.")
Exit Sub
End Select
End Sub
Private Sub userform_queryclose(cancel As Integer, O01OOllO01O As Integer)
If Ol11llOOlO0 = True Then
Ol11llOOll0.Close savechanges:=False
Ol11llOOlO0 = False
End If
End Sub
Attribute VB_Name = "OlO0OOOOO0l"
Attribute VB_Base = "0{6ED4D381-4697-4809-8504-6E435E0C7024}{908AA70B-B74E-4DBA-A209-01DE7E7C1CE9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub cmdclose_click()
Unload Me
End Sub
Private Sub cmdmovetosite_click()
Unload Me
Call OlOOlO0ll00
End Sub
Private Sub lblprogramsite_click()
Unload Me
Call OlOOlO0ll00
End Sub
Private Sub userform_initialize()
Ol11l1OlOl0 Me
End Sub
Attribute VB_Name = "OlO0OOOOl0l"
Attribute VB_Base = "0{B54127CA-E1AB-4532-AA02-80D42801FBC5}{072DE09C-BA49-4885-BBF4-C722B114E79F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub cmdclose_click()
Unload Me
End Sub
Private Sub cmdmovetosite_click()
Unload Me
Call OlOOlO0ll00
End Sub
Private Sub lblprogramsite_click()
Unload Me
Call OlOOlO0ll00
End Sub
Private Sub userform_initialize()
Ol11l1OlOl0 Me
Me.Caption = Ol10100l000(Me.Caption)
lblProgramInfo = getattr(O00O1Oll1O1) & " " & getattr(version)
lblLicense = "License : " & getattr(O11l1lll1O1)
lblProgramSite = "|fffd||fffd|" & "2015~" & Format(Date, "yyyy") & " " & getattr(O00O1lll1O1)
lblReleaseDate = "Release : " & getattr(O11O1lll1O1)
End Sub
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub workbook_activate()
Call O00000Ol101
End Sub
Private Sub Workbook_AfterSave(ByVal Success As Boolean)
Ol01llO1ll0 = ActiveWorkbook.name
End Sub
Private Sub workbook_beforeclose(cancel As Boolean)
Application.ErrorCheckingOptions.BackgroundChecking = True
End Sub
Private Sub workbook_beforesave(ByVal OO101ll0O1l As Boolean, cancel As Boolean)
If getattr("chkWBSUpdateExecuteYN", O11l11ll1O1) = OO11OlOOl1l Then
If MsgBox(Ol10100l000("Would you like to update the schedule before saving?"), vbYesNo, "XLGantt") = vbYes Then
With Application
.ScreenUpdating = False
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
OOlO1l1ll00
With Application
Application.Calculation = Ol01llO00l0
Application.ScreenUpdating = True
End With
End If
End If
End Sub
Private Sub workbook_deactivate()
Call O01000Ol10l
Call OO0000Ol101
Call OO0000Oll01
End Sub
Private Sub workbook_open()
With Application
.ScreenUpdating = False
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
Ol01llO1ll0 = ActiveWorkbook.name
Set Ol01llOlll0 = Workbooks(ActiveWorkbook.name)
Application.ErrorCheckingOptions.BackgroundChecking = False
Worksheets(Ol11llO1Ol0).Visible = xlSheetVeryHidden
Worksheets(Ol11llO1ll0).Visible = False
Worksheets("Workload").Visible = xlSheetVeryHidden
OOOl100OO00
O0lO0OO101l
If getattr("chkCheckForUpdatesOnStartup", O11l11ll1O1) = OO11OlOOl1l Then
O1OOOO0l000 ("WORKBOOK_OPEN_EVENT")
End If
With Application
.Calculation = Ol01llO00l0
.ScreenUpdating = True
End With
If getattr("isConfirmedProjectBasicInfo", O11l11ll1O1) = Ol11OlOOl1l Then
Call O0lO0OO101O
End If
End Sub
Attribute VB_Name = "menu"
Option Explicit
Option Private Module
Public Const OO0lO1l0l10 As String = "MyPopUpMenu"
Sub calcwbsbyarrayfromribbon(control As IRibbonControl)
With Application
.ScreenUpdating = False
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
OOlO1l1ll00
With Application
.Calculation = Ol01llO00l0
.ScreenUpdating = True
End With
End Sub
Sub filterschedulefromribbon(control As IRibbonControl)
O0lO10O1lll
End Sub
Sub callmakereportprogressbyresource(control As IRibbonControl)
With Application
.ScreenUpdating = False
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
OO1O10lO110
With Application
.Calculation = Ol01llO00l0
.ScreenUpdating = True
End With
End Sub
Sub callmakereportworkloadweeklyfromribbon(control As IRibbonControl)
With Application
.ScreenUpdating = False
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
OO1lOOl1lll
With Application
.Calculation = Ol01llO00l0
.ScreenUpdating = True
End With
End Sub
Sub callmakereportworkloadmonthlyfromribbon(control As IRibbonControl)
With Application
.ScreenUpdating = False
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
OO1lOOl0lll
With Application
.Calculation = Ol01llO00l0
.ScreenUpdating = True
End With
End Sub
Sub callmakereportprogressfromribbon(control As IRibbonControl)
With Application
.ScreenUpdating = False
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
OOOO11OlO11
With Application
.Calculation = Ol01llO00l0
.ScreenUpdating = True
End With
End Sub
Sub callmakereportworkloadbyresourcefromribbon(control As IRibbonControl)
With Application
.ScreenUpdating = False
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
OO0O10lll00
With Application
.Calculation = Ol01llO00l0
.ScreenUpdating = True
End With
End Sub
Sub callreformatschdulesheetfromribbon(control As IRibbonControl)
With Application
.ScreenUpdating = False
Ol01llO00l0 = .Calculation
.Calculation = xlCalculationManual
End With
O10O01lll11
With Application
.Calculation = Ol01llO00l0
.ScreenUpdating = True
End With
End Sub
Sub callsettingbasicinfofromribbon(control As IRibbonControl)
O0lO0OO101O
End Sub
Sub callviewaboutfromribbon(control As IRibbonControl)
O0lO10O1Oll
End Sub
Sub callcheckprogramversionfromribbon(control As IRibbonControl)
O1OOOO0l000 ("MENU")
End Sub
Sub callsettingcalendarfromribbon(control As IRibbonControl)
O0lO00O1lll
End Sub
Sub callimportwbsfromribbon(control As IRibbonControl)
OlOOOOl1O11
End Sub
Sub callindentwbs2rightfromribbon(control As IRibbonControl)
Application.ScreenUpdating = False
O1O0l0O1O11 ("R")
Application.ScreenUpdating = True
End Sub
Sub callindentwbs2leftfromribbon(control As IRibbonControl)
Application.ScreenUpdating = False
O1O0l0O1O11 ("L")
Application.ScreenUpdating = True
End Sub
Sub loadcustomtabofribbon(ribbon As IRibbonUI)
On Error Resume Next
ribbon.ActivateTab "XLGanttTab"
On Error GoTo 0
End Sub
Sub OO0000Oll01()
On Error Resume Next
CommandBars("Cell").Reset
On Error GoTo 0
End Sub
Sub OO0000Ol101()
On Error Resume Next
Application.CommandBars(OO0lO1l0l10).Delete
On Error GoTo 0
End Sub
Sub opendeliverablesfrommenu()
Call OO0000Ol101
Call O0lO0l0O101
On Error Resume Next
Application.CommandBars(OO0lO1l0l10).ShowPopup
On Error GoTo 0
End Sub
Sub opendeliverablesfolderfrommenu()
Call OO0000Ol101
Call O0l1ll1ll00
On Error Resume Next
Application.CommandBars(OO0lO1l0l10).ShowPopup
On Error GoTo 0
End Sub
Sub addoutlookappointmentfrommenu()
Call OO0000Ol101
Call O0l1OOO0000
On Error Resume Next
Application.CommandBars(OO0lO1l0l10).ShowPopup
On Error GoTo 0
End Sub
Sub addoutlooktaskfrommenu()
Call OO0000Ol101
Call O0O1ll0l10l
On Error Resume Next
Application.CommandBars(OO0lO1l0l10).ShowPopup
On Error GoTo 0
End Sub
Sub loadtaskinfofrommenu()
Call OO0000Ol101
Call Ol11O011l0O
On Error Resume Next
Application.CommandBars(OO0lO1l0l10).ShowPopup
On Error GoTo 0
End Sub
Sub loaddatepickerfrommenu()
Call OO0000Ol101
Call Ol1010ll10l
On Error Resume Next
Application.CommandBars(OO0lO1l0l10).ShowPopup
On Error GoTo 0
End Sub
Sub O00000Ol101()
Dim O00000Ol10l As CommandBar
Call O01000Ol10l
Call OO0000Oll01
Set O00000Ol10l = Application.CommandBars("Cell")
With O00000Ol10l.Controls.Add(Type:=msoControlButton, before:=1)
.OnAction = "'" & ThisWorkbook.name & "'!" & "addOutlookAppointmentFromMenu"
.Caption = Ol10100l000("Add to MS Outlook Calendar")
.Tag = "My_Cell_Control_Tag"
End With
With O00000Ol10l.Controls.Add(Type:=msoControlButton, before:=1)
.OnAction = "'" & ThisWorkbook.name & "'!" & "addOutlookTaskFromMenu"
.Caption = Ol10100l000("Add to MS Outlook Task")
.Tag = "My_Cell_Control_Tag"
End With
With O00000Ol10l.Controls.Add(Type:=msoControlButton, before:=1)
.OnAction = "'" & ThisWorkbook.name & "'!" & "openDeliverablesFromMenu"
.Caption = Ol10100l000("Open Deliverables")
.Tag = "My_Cell_Control_Tag"
End With
With O00000Ol10l.Controls.Add(Type:=msoControlButton, before:=1)
.OnAction = "'" & ThisWorkbook.name & "'!" & "openDeliverablesFolderFromMenu"
.Caption = Ol10100l000("Open Deliverables Folder")
.Tag = "My_Cell_Control_Tag"
End With
With O00000Ol10l.Controls.Add(Type:=msoControlButton, before:=1)
.OnAction = "'" & ThisWorkbook.name & "'!" & "loadTaskInfoFromMenu"
.Caption = Ol10100l000("Edit a Task")
.Tag = "My_Cell_Control_Tag"
End With
With O00000Ol10l.Controls.Add(Type:=msoControlButton, before:=1)
.OnAction = "'" & ThisWorkbook.name & "'!" & "loadDatePickerFromMenu"
.FaceId = 1106
.Caption = Ol10100l000("Pick a Date")
.Tag = "My_Cell_Control_Tag"
End With
O00000Ol10l.Controls(5).BeginGroup = True
End Sub
Sub O01000Ol10l()
Dim O01010Ol10l As CommandBar
Dim O11010Ol10l As CommandBarControl
On Error Resume Next
Set O01010Ol10l = Application.CommandBars("Cell")
For Each O11010Ol10l In O01010Ol10l.Controls
If O11010Ol10l.Tag = "My_Cell_Control_Tag" Then
O11010Ol10l.Delete
End If
Next O11010Ol10l
On Error GoTo 0
End Sub
Public Sub xlgantt_ribbon_getlabel(ByRef O11011Ol10l As IRibbonControl, ByRef Ol1011Ol10l As Variant)
On Error Resume Next
Select Case O11011Ol10l.id
Case "cbtnCalcWBSbyArray": Ol1011Ol10l = Ol10100l000("Update Schedule")
Case "cbtnFilterSchedule": Ol1011Ol10l = Ol10100l000("Filter Task")
Case "cbtnCallIndentWBS2LeftFromRibbon": Ol1011Ol10l = Ol10100l000("Outdent Task")
Case "cbtnCallIndentWBS2RightFromRibbon": Ol1011Ol10l = Ol10100l000("Indent Task")
Case "analysis": Ol1011Ol10l = Ol10100l000("Analysis")
Case "cbtnCallMakeReportProgressByResource": Ol1011Ol10l = Ol10100l000("Progresses by Resources")
Case "cbtnCallMakeReportWorkloadWeeklyFromRibbon": Ol1011Ol10l = Ol10100l000("Workloads by Weeks")
Case "cbtnCallMakeReportWorkloadMonthlyFromRibbon": Ol1011Ol10l = Ol10100l000("Workloads by Months")
Case "cbtnCallMakeReportWorkloadByResourceFromRibbon": Ol1011Ol10l = Ol10100l000("Workloads by Resouces")
Case "cbtnCallMakeReportProgressFromRibbon": Ol1011Ol10l = Ol10100l000("Planned Progress")
Case "settings": Ol1011Ol10l = Ol10100l000("Settings")
Case "cbtnCallSettingBasicInfoFromRibbon": Ol1011Ol10l = Ol10100l000("Options")
Case "cbtnCallSettingCalendarFromRibbon": Ol1011Ol10l = Ol10100l000("Calendar")
Case "cbtnCallReformatSchduleSheetFromRibbon": Ol1011Ol10l = Ol10100l000("Reformatting")
Case "etc": Ol1011Ol10l = Ol10100l000("Etc")
Case "cbtnCallImportWBSFromRibbon": Ol1011Ol10l = Ol10100l000("Import")
Case "cbtnCallCheckProgramVersionFromRibbon": Ol1011Ol10l = Ol10100l000("Check for Updates")
Case "cbtnCallViewAboutFromRibbon": Ol1011Ol10l = Ol10100l000("About")
End Select
If Err.Number > 0 Then
Ol1011Ol10l = "Error"
Err.Clear
End If
On Error GoTo 0
End Sub
Attribute VB_Name = "xlgantt"
Option Explicit
Function ProjectName() As String
    Application.Volatile
    ProjectName = getattr("projectName", O11l11ll1O1)
End Function
Function projectStartDate() As Date
    Application.Volatile
    projectStartDate = CDate(getattr("projectStartDate", O11l11ll1O1))
End Function
Function ProjectFinishDate() As Date
    Application.Volatile
    ProjectFinishDate = CDate(getattr("projectEndDate", O11l11ll1O1))
End Function
Function ProjectPlanProgress() As Double
    Application.Volatile
    ProjectPlanProgress = Workbooks(Ol01llO1ll0).Worksheets(Ol11llO1O10).Range("PLANNED_RATE").Value
End Function
Function ProjectActualProgress() As Double
Attribute ProjectActualProgress.VB_Description = " XLGantt|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd| |fffd||53c||fffd||fffd||534||3f4||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||f4||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||274||3f4||fffd|."
    Application.Volatile
    ProjectActualProgress = Workbooks(Ol01llO1ll0).Worksheets(Ol11llO1O10).Range("ACTUAL_RATE").Value
End Function
Function ProjectProgressString() As String
    Application.Volatile
    ProjectProgressString = Format(CDate(getattr("projectStartDate", O11l11ll1O1)), Ol10100l000("mm/dd/yyyy")) & "~" & Format(CDate(getattr("projectEndDate", O11l11ll1O1)), Ol10100l000("mm/dd/yyyy")) & " [" & Ol10100l000("Plan") & ":" & Format(Workbooks(Ol01llO1ll0).Worksheets(Ol11llO1O10).Range("PLANNED_RATE").Value, "0.00%") & " " & Ol10100l000("Actual") & ":" & Format(Workbooks(Ol01llO1ll0).Worksheets(Ol11llO1O10).Range("ACTUAL_RATE").Value, "0.00%") & "]"
End Function
Function CommentOnHeadArea() As String
Dim tempProperty As attr4planratedate
    Application.Volatile

    tempProperty = O0l00OO111O()
    CommentOnHeadArea = tempProperty.OllO10O1O00
    
End Function

' InQuest injected base64 decoded content
' Fj{m
' Fj{m
' z{S{
' nj[-j
' nj[-j
' :-jU
' :-jP
' ~)mz
' zIr~
' ^>'$z
' e"w^
' e"jh

INQUEST-PP=macro
