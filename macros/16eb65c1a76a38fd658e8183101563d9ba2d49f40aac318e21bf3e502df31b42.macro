Attribute VB_Name = "Chart7"
Attribute VB_Base = "0{00020821-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Chart8"
Attribute VB_Base = "0{00020821-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module1"
Sub General()
Attribute General.VB_ProcData.VB_Invoke_Func = "A\n14"
'
' General Macro
'
' Keyboard Shortcut: Ctrl+Shift+A
'
    Selection.NumberFormat = "General"
End Sub
Sub Percent()
Attribute Percent.VB_ProcData.VB_Invoke_Func = "B\n14"
'
' Percent Macro
'
' Keyboard Shortcut: Ctrl+Shift+B
'
    Selection.NumberFormat = "0.00%"
End Sub
Sub Dates()
Attribute Dates.VB_ProcData.VB_Invoke_Func = "D\n14"
'
' Dates Macro
'
' Keyboard Shortcut: Ctrl+Shift+D
'
    Selection.NumberFormat = "dd/mm/yyyy;@"
End Sub
Sub Comma()
Attribute Comma.VB_ProcData.VB_Invoke_Func = "E\n14"
'
' Comma Macro
'
' Keyboard Shortcut: Ctrl+Shift+E
'
    Selection.NumberFormat = "0.00_ ;[Red]-0.00 "
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
End Sub
Sub ColorInputs()
Attribute ColorInputs.VB_ProcData.VB_Invoke_Func = "C\n14"
'
' ColorInputs Macro
'
' Keyboard Shortcut: Ctrl+Shift+C
'
    Cells.Select
    With Selection.Font
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
    End With
    Selection.SpecialCells(xlCellTypeConstants, 21).Select
    With Selection.Font
        .ThemeColor = xlThemeColorAccent1
        .TintAndShade = 0
    End With
End Sub
Function showformula(cell)
showformula = cell.Formula
End Function

Sub TrueSwitch()
Attribute TrueSwitch.VB_ProcData.VB_Invoke_Func = "T\n14"
'
' TrueSwitch Macro
'
' Keyboard Shortcut: Ctrl+Shift+T
'
    Selection.FormatConditions.Add Type:=xlTextString, String:="T", _
        TextOperator:=xlContains
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    With Selection.FormatConditions(1).Font
        .Color = -16752384
        .TintAndShade = 0
    End With
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 13561798
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
End Sub
Sub SwitchFalse()
Attribute SwitchFalse.VB_ProcData.VB_Invoke_Func = "F\n14"
'
' SwitchFalse Macro
'
' Keyboard Shortcut: Ctrl+Shift+F
'
    Selection.FormatConditions.Add Type:=xlTextString, String:="F", _
        TextOperator:=xlContains
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    With Selection.FormatConditions(1).Font
        .Color = -16383844
        .TintAndShade = 0
    End With
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 13551615
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
End Sub
Attribute VB_Name = "Module2"
Sub Circ()
Attribute Circ.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Circ Macro
'
While Range("C14") <> 0
'
    Range("D12:G12").Select
    Selection.Copy
    Range("D11").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
        Wend
        
End Sub
Attribute VB_Name = "Module3"
Attribute VB_Name = "Module4"
Option Base 1

Sub MacroList()
Attribute MacroList.VB_ProcData.VB_Invoke_Func = "Z\n14"
'
' MacroList Macro
'
' Keyboard Shortcut: Ctrl+Shift+Z
'
UserForm1.Show


End Sub

Sub functions()

End Sub
Function fees(Fee_pct, Debt_pct, Const_exp)
fees = Fee_pct * Const_exp * Debt_pct / (1 - Fee_pct * Debt_pct)

End Function
Function sheet_name(cell)
sheet_name = cell.Parent.Name
End Function

Function add_text(series)
num = series.Count
For i = 1 To num
add_text = add_text & series(i)
Next i
End Function


Function fees1(Fee_pct, Debt_pct, Const_exp)
Debt = 100
For Iteration = 1 To 10


fees1 = Debt * Fee_pct
TotalUses = fees1 + Const_exp
Debt = TotalUses * Debt_pct

Next Iteration
fees1 = fees1


End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function Debt_funding_DSRA( _
                      debt_percent, _
                      construction, _
                      interest_rate, _
                      up_front_fee, _
                      commitment_fee, _
                      months_in_period, _
                      debt_tenor, _
                      DSRA_Months, _
                      repayment_code, _
                      Optional Capitalise_Switch As Boolean, _
                      Optional Funding_Order, _
                      Optional DSRA_Fixed, _
                      Optional Off_Switch) As Variant
                      

If IsMissing(Capitalise_Switch) Then Capitalise_Switch = False
If IsMissing(DSRA_Fixed) Then DSRA_Fixed = 0
If IsMissing(Funding_Order) Then Funding_Order = 1
If IsMissing(Off_Switch) Then Off_Switch = False

'
'  Make a switch to turn off calculation
'

 If Off_Switch = True Then Exit Function

' Application.Volatile

debug1 = 0

'
'  Create Dimensions for New Variables
'

total_periods = construction.Count

ReDim Construction_Funding(total_periods)
ReDim DSRA_for_period(total_periods)
ReDim debt_draw_percent(total_periods)
ReDim up_front_fee_per_period(total_periods)

Dim output(2, 2)

'
'  First find the periods for analysis
'

accum_funding_percent = 0
accum_construction = 0

For i = 1 To total_periods
  accum_construction = construction(i) + accum_construction
Next i

'
'  Find the end of the construction period
'

For i = 1 To total_periods
  
  If (accum_construction > 0.0000001) Then _
    Construction_Funding(i) = construction(i) / accum_construction
  
  accum_funding_percent = Construction_Funding(i) + accum_funding_percent
    
  If accum_funding_percent > 0.999999999 Then
     construction_periods = i
     Exit For
  End If
Next i

'
'  Find the beginning of the construction period
'

For i = 1 To construction_periods
  If Construction_Funding(i) > 0.000000001 Then
    initial_period = i
    Exit For
  End If
Next i

'
' Second, work through various adders
'

'
'   First Initialize Variables
'

prior_debt_adders = 0
DSRA_amount = 0
capitalised_int_fees = 0

'
' Compute the DSRA factor
'

' DSRA_Factor_Function(periods_in_year,months_in_period,debt_tenor,interest_rate,DSRA_months,repayment_code)


tot_interest = 0
tot_repayment = 0
debt_bal = 1

periods_in_year = 12 / months_in_period
debt_tenor_periods = debt_tenor * periods_in_year

total_months = DSRA_Months * months_in_period

    For i = 1 To total_months
        Int_Rate = interest_rate(i + construction_periods)
        
        If repayment_code = 1 Then
            repay1 = 1 / debt_tenor_periods
        End If
    
        If repayment_code = 2 Then
            repay1 = WorksheetFunction.PPmt(Int_Rate, i, debt_tenor_periods, -1)
        End If
                
        interest = debt_bal * Int_Rate
        debt_bal = debt_bal - repay1
        
        tot_interest = tot_interest + interest
        tot_repayment = tot_repayment + repay1
    Next i

    DSRA_fac = (tot_interest + tot_repayment)

    If debug1 = 1 Then
            MsgBox "DSRA factor " & Format(DSRA_fac, "00.00%") & Chr(13) & Chr(13) & _
                    " Total Months " & Format(total_months, "00.00") & Chr(13) & Chr(13) & _
                    " Interest Rate " & Format(Int_Rate, "00.00") & Chr(13) & Chr(13) & _
                    " Debt Tenor " & Format(debt_tenor_periods, "00.00") & Chr(13) & Chr(13) & _
                    " Total Interest " & Format(tot_interest, "00.00%") & Chr(13) & Chr(13) & _
                    " Total Repayment " & Format(tot_repayment, "00.00%") & Chr(13) & Chr(13)

    End If

'
'  Main Iteration Loop (Ends when difference is zero)
'

For iter = 1 To 20

    debt_adders_int_fees = prior_debt_adders
    
    accum_debt = 0
    total_interest = 0
    commitment_fee_amount = 0
    commitment_fee_total = 0
    opening_equity_balance = 0
    debt_balance = 0
    total_interest_capitalised = 0
    total_commitment_fee_capitalised = 0
    total_up_front_fee_capitalised = 0
                                
    base = accum_construction
    
    Total_Cost = base + debt_adders_int_fees + DSRA_amount
    
    commitment = Total_Cost * debt_percent

'
'  Defined funding depending on capitalised switch
'
    
    funding = (commitment - capitalised_int_fees)
           
    Equity_Commitment = Total_Cost - commitment
    
'
'  Compute items that do not depend on period
'
    
    up_front_fee_amount = commitment * up_front_fee

    DSRA_amount = commitment * DSRA_fac

'
'  Loop around construction periods
'

    For i = initial_period To construction_periods

'
'  Compute the up-front fee
'
        
        If (i = initial_period) Then
            up_front_fee_per_period(i) = commitment * up_front_fee
        End If
            
'
'  Compute the DSRA amount in the period before end of construction
'
            
        If (i = construction_periods) Then DSRA_for_period(i) = DSRA_amount
        
'
'  Compute the interest during construction
'
        
        interest = accum_debt * interest_rate(i)         ' Compute interest from last period
                
'
'  Compute the commitment fee
'
        undrawn = commitment - accum_debt
        commitment_fee_amount = commitment_fee * undrawn
                
'
' Split capitalised and paid interest and fees
'
        
        If (Capitalise_Switch = True) Then
            up_front_fee_capitalised = up_front_fee_per_period(i)
            up_front_fee_paid = 0
            total_up_front_fee_capitalised = total_up_front_fee_capitalised + _
                                              up_front_fee_capitalised
            interest_capitalised = interest
            interest_paid = 0
            commitment_fee_capitalised = commitment_fee_amount
            commitment_fee_paid = 0
        Else
            up_front_fee_paid = up_front_fee_per_period(i)
            up_front_fee_capitalised = 0
            interest_capitalised = 0
            interest_paid = interest
            commitment_fee_capitalised = 0
            commitment_fee_paid = commitment_fee_amount
        End If
    
'
'   Define the funding needs
'
    
        funding_needs = construction(i) + DSRA_for_period(i) + _
                        commitment_fee_paid + up_front_fee_paid + _
                        interest_paid
                
'
'  Once funding needs defined, compute debt draws
'
        
'
'  Funding code of 1 is pro-rata
'
        
        If Funding_Order = 1 Then
            If (Not (DSRA_Funding_Switch)) Then _
                debt_draw_percent(i) = construction(i) / accum_construction

            If (DSRA_Funding_Switch) Then _
                debt_draw_percent(i) = (DSRA_for_period(i) + construction(i)) / (accum_construction + DSRA_amount)
                               
            debt_draws = funding * debt_draw_percent(i)
        End If
                                        
'
'  Funding code of 2 is equity first
'
                                        
                                        
        If Funding_Order = 2 Then
                remaining_equity = Equity_Commitment - opening_equity_balance
                equity_draws = WorksheetFunction.Min(remaining_equity, funding_needs)
                debt_draws = funding_needs - equity_draws
                equity_balance = opening_equity_balance + equity_draws
                opening_equity_balance = equity_balance
        End If
                                                                                                                                                                                                 
'
'  Funding code of 3 is debt first
'
        
        If Funding_Order = 3 Then
                remaining_debt = funding - debt_balance
                debt_draws = WorksheetFunction.Min(remaining_debt, funding_needs)
                debt_balance = debt_balance + debt_draws
        End If
                                                                                                                                                                                                 
        total_interest = total_interest + interest       ' Accumulated interest for debt balance
        commitment_fee_total = commitment_fee_total + commitment_fee * undrawn
                                                                                                                                  
        accum_debt = accum_debt + debt_draws + interest_capitalised + _
                     commitment_fee_capitalised + up_front_fee_capitalised
                                                                                                                     
        
        total_interest_capitalised = total_interest_capitalised + interest_capitalised       ' Accumulated interest for debt balance
        
        total_commitment_fee_capitalised = total_commitment_fee_capitalised + _
                                          commitment_fee_capitalised
               
        
        If debug1 = 2 Then MsgBox " yr " & i & " interest rate " & interest_rate(i) & Chr(13) & Chr(13) & " interest " & interest & " accum debt  " & accum_debt & Chr(13) & Chr(13) & " Funding " & funding & " Commitment " & commitment & " draw pct " & debt_draw_percent(i)
                            
    Next i
        
    debt_adders_int_fees = up_front_fee_amount + total_interest + commitment_fee_total
    capitalised_int_fees = total_up_front_fee_capitalised + total_interest_capitalised _
                           + total_commitment_fee_capitalised


If debug1 = 1 Then
     MsgBox " Interiation " & iter & " Difference  " & Format(prior_debt_adders - debt_adders_int_fees, "00.0000") _
             & Chr(13) & Chr(13) & " Debt_adders_int_fees " & Format(debt_adders_int_fees, "##.00") & _
             " Commitment " & Format(commitment, "00.00") & Chr(13) & Chr(13) & " Total Interest " & Format(total_interest, "##.00") & "DSRA Amount " & Format(DSRA_amount, "00.000") & Chr(13) & Chr(13) & _
             " Capitalised int and fees " & Format(capitalised_int_fees, "##.00") & " Funding " & Format(funding, "##.00") & Chr(13) & Chr(13) & "  up front " & Format(up_front_fee_capitalised, "##.00") & " Commitment fee " & Format(commitment_fee_total, "##.00")
End If
     
     output(1, 1) = debt_adders_int_fees + DSRA_amount
     output(2, 1) = DSRA_amount
     output(1, 2) = DSRA_amount
     
     Debt_funding_DSRA = output
         
'
' Test the iterations
'
     difference = prior_debt_adders - debt_adders_int_fees
     If difference < 0 Then difference = difference * -1
     
     If difference < 0.001 Then Exit For
     
     
     prior_debt_adders = debt_adders_int_fees
     
 
Next iter



End Function



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function Debt_funding_Sculpting( _
                      debt_percent, _
                      construction, _
                      interest_rate, _
                      EBITDA, _
                      Depreciation_Expense, _
                      up_front_fee, _
                      commitment_fee, _
                      DSRA_Months, _
                      Target_DSCR, _
                      Tax_Rate, _
                      months_in_period, _
                      Fee_amortisation_years, _
                      Optional Capitalise_Switch As Boolean, _
                      Optional Funding_Order, _
                      Optional DSRA_Fixed, _
                      Optional Off_Switch) As Variant
                      

If IsMissing(Capitalise_Switch) Then Capitalise_Switch = False
If IsMissing(DSRA_Fixed) Then DSRA_Fixed = 0
If IsMissing(Funding_Order) Then Funding_Order = 1
If IsMissing(Off_Switch) Then Off_Switch = False

'
'  Make a switch to turn off calculation
'

 If Off_Switch = True Then Exit Function

' Application.Volatile

debug1 = 0

'
'  Create Dimensions for New Variables
'

total_periods = construction.Count

ReDim output(2, 2)

ReDim Construction_Funding(total_periods)
ReDim DSRA_for_period(total_periods)
ReDim debt_draw_percent(total_periods)
ReDim up_front_fee_per_period(total_periods)

'
'  First find the periods for analysis
'

accum_funding_percent = 0
accum_construction = 0

For i = 1 To total_periods
  accum_construction = construction(i) + accum_construction
Next i

'
'  Find the end of the construction period
'

For i = 1 To total_periods
  
  If (accum_construction > 0.0000001) Then _
    Construction_Funding(i) = construction(i) / accum_construction
  
  accum_funding_percent = Construction_Funding(i) + accum_funding_percent
    
  If accum_funding_percent > 0.9999999 Then
     construction_periods = i
     Exit For
  End If
Next i

'
'  Find the beginning of the construction period
'

For i = 1 To construction_periods
  If Construction_Funding(i) > 0.00000001 Then
    initial_period = i
    Exit For
  End If
Next i

'
' Second, work through various adders
'

'
'   First Initialize Variables
'

prior_debt_adders = 0
DSRA_fac = 0
capitalised_int_fees = 0

'
' Compute the DSRA factor
'

If months_in_period > 0 Then periods_in_year = 12 / months_in_period
Fee_amortisation_period = Fee_amortisation_years * periods_in_year

total_months = DSRA_Months * months_in_period


'
'  This is the iteration loop that re-calculates the IDC and fees after new project costs are established
'


For iter = 1 To 20

    debt_adders_int_fees = prior_debt_adders
    
    accum_debt = 0
    total_interest = 0
    commitment_fee_amount = 0
    commitment_fee_total = 0
    opening_equity_balance = 0
    debt_balance = 0
    total_interest_capitalised = 0
    total_commitment_fee_capitalised = 0
    total_up_front_fee_capitalised = 0
                                
    base = accum_construction
    
    Total_Cost = base + debt_adders_int_fees + DSRA_amount
    
    commitment = Total_Cost * debt_percent

'
'  Defined funding depending on capitalised switch
'
    
    funding = (commitment - capitalised_int_fees)
           
    Equity_Commitment = Total_Cost - commitment
    
'
'  Compute items that do not depend on period
'
    
    up_front_fee_amount = commitment * up_front_fee

'
'  With sculpting, DSRA factor is computed below
'
    DSRA_amount = commitment * DSRA_fac

'
'  Loop around construction periods
'

    For i = initial_period To construction_periods

'
'  Up-Front Fee Calculation
'
        
        If (i = initial_period) Then
            up_front_fee_per_period(i) = commitment * up_front_fee
        End If
            
        
'
'  Apply DSRA only in last period of construction
'
        If (i = construction_periods) Then DSRA_for_period(i) = DSRA_amount
        
        
'
' Interest During Construction
'
        interest = accum_debt * interest_rate(i)         ' Compute interest from last period
                
'
' Commitment Fee
'
        undrawn = commitment - accum_debt
        commitment_fee_amount = commitment_fee * undrawn

'
' Adjust for Capitalised Interest
'
        
        If (Capitalise_Switch = True) Then
            up_front_fee_capitalised = up_front_fee_per_period(i)
            up_front_fee_paid = 0
            total_up_front_fee_capitalised = total_up_front_fee_capitalised + _
                                              up_front_fee_capitalised
            interest_capitalised = interest
            interest_paid = 0
            commitment_fee_capitalised = commitment_fee_amount
            commitment_fee_paid = 0
        Else
            up_front_fee_paid = up_front_fee_per_period(i)
            up_front_fee_capitalised = 0
            interest_capitalised = 0
            interest_paid = interest
            commitment_fee_capitalised = 0
            commitment_fee_paid = commitment_fee_amount
        End If
    
'
'   Define the funding needs
'
    
        funding_needs = construction(i) + DSRA_for_period(i) + _
                        commitment_fee_paid + up_front_fee_paid + _
                        interest_paid
                
'
'  Once funding needs defined, compute debt draws
'
        
'
'  Funding code of 1 is pro-rata
'
        
        If Funding_Order = 1 Then
            If (Not (DSRA_Funding_Switch)) Then _
                debt_draw_percent(i) = construction(i) / accum_construction

            If (DSRA_Funding_Switch) Then _
                debt_draw_percent(i) = (DSRA_for_period(i) + construction(i)) / (accum_construction + DSRA_amount)
                               
            debt_draws = funding * debt_draw_percent(i)
        End If
                                        
'
'  Funding code of 2 is equity first
'
                                        
        If Funding_Order = 2 Then
                remaining_equity = Equity_Commitment - opening_equity_balance
                equity_draws = WorksheetFunction.Min(remaining_equity, funding_needs)
                debt_draws = funding_needs - equity_draws
                equity_balance = opening_equity_balance + equity_draws
                opening_equity_balance = equity_balance
        End If
                                                                                                                                                                                                 
'
'  Funding code of 3 is debt first
'
        
        If Funding_Order = 3 Then
            remaining_debt = funding - debt_balance
            debt_draws = WorksheetFunction.Min(remaining_debt, funding_needs)
            debt_balance = debt_balance + debt_draws
        End If
                                                                                                                                                                                                 
'
'  Accumulate Debt balance  and other items
'
                                                                                                                                                                                                 
        total_interest = total_interest + interest       ' Accumulated interest for debt balance
        commitment_fee_total = commitment_fee_total + commitment_fee * undrawn
                                                                                                                                  
        accum_debt = accum_debt + debt_draws + interest_capitalised + _
                     commitment_fee_capitalised + up_front_fee_capitalised
                                                                                                                     
        
        total_interest_capitalised = total_interest_capitalised + interest_capitalised       ' Accumulated interest for debt balance
        total_commitment_fee_capitalised = total_commitment_fee_capitalised + _
                                          commitment_fee_capitalised
               
        If debug1 = 2 Then MsgBox " yr " & i & " interest rate " & interest_rate(i) & Chr(13) & Chr(13) & " interest " & interest & " accum debt  " & accum_debt & Chr(13) & Chr(13) & " Funding " & funding & " Commitment " & commitment & " draw pct " & debt_draw_percent(i)
                            
    Next i
    
'    up_front_fee_capitalised = up_front_fee_amount * Capitalise_Switch
    
    debt_adders_int_fees = up_front_fee_amount + total_interest + commitment_fee_total
    capitalised_int_fees = total_up_front_fee_capitalised + total_interest_capitalised _
                           + total_commitment_fee_capitalised

'
'   DSRA for Sculpting; can only compute after the debt balance is established
'

    debt_bal = accum_debt

    tot_interest = 0
    tot_repayment = 0
    NOL_Balance = 0

'
' Compute the DSRA factor
'

If months_in_period > 0 Then periods_in_year = 12 / months_in_period
Fee_amortisation_period = Fee_amortisation_years * periods_in_year

total_months = DSRA_Months * months_in_period

    For i = 1 To total_months
                                
        Int_Rate = interest_rate(i + construction_periods)
                                                                          
        If accum_construction > 0 Then depreciation_rate = Depreciation_Expense(i + construction_periods) / accum_construction
                       
        idc_depreciation = total_interest * depreciation_rate
                
        If (Fee_amortisation_period > 0) Then fee_amortisation = (up_front_fee_amount + commitment_fee_total) / Fee_amortisation_period
        
        EBIT = EBITDA(i + construction_periods) - Depreciation_Expense(i + construction_periods) - idc_depreciation - fee_amortisation
        
        interest1 = debt_bal * Int_Rate
                          
        EBT = EBIT - interest1
        
        NOL_created = 0
        NOL_Used = 0
        
        If EBT < 0 Then
            NOL_created = 0 - EBT
            NOL_Balance = NOL_Balance + NOL_created
        End If
                
        If EBT > 0 Then
            NOL_Used = WorksheetFunction.Min(NOL_Balance, EBT)
            NOL_Balance = NOL_Balance - NOL_Used
        End If
                
        Adjusted_EBT = EBT + NOL_created - NOL_Used
        
        tax = Adjusted_EBT * Tax_Rate
                
'        int_income = DSRA_bal * Int_Inc_Rate
        
        int_income = 0
        
        cfads = EBITDA(i + construction_periods) - tax + int_income
                
        required_DS = cfads / Target_DSCR
                                
        interest1 = debt_bal * Int_Rate
        repay1 = required_DS - interest1
        
        debt_bal = debt_bal - repay1
        
        tot_interest = tot_interest + interest1
        tot_repayment = tot_repayment + repay1
                                
    Next i

    If accum_debt > 0 Then DSRA_fac = (tot_repayment + tot_interest) / accum_debt

    DSRA = tot_repayment + tot_interest

    If debug1 = 1 Then
            MsgBox "DSRA factor " & Format(DSRA_fac, "##.000%") & Chr(13) & Chr(13) & _
                    " Total Months " & Format(total_months, "00.00") & Chr(13) & Chr(13) & _
                    " Interest Rate " & Format(Int_Rate, "##.000%") & Chr(13) & Chr(13) & _
                    " CFADS " & Format(cfads, "00.00") & Chr(13) & Chr(13) & _
                    " Required_DS " & Format(required_DS, "00.00") & Chr(13) & Chr(13) & _
                    " Starting Debt " & Format(accum_debt, "##.00") & Chr(13) & Chr(13) & _
                    " Total Interest " & Format(tot_interest, "00.00") & Chr(13) & Chr(13) & _
                    " DSRA Amount " & Format(tot_interest + tot_repayment, "### ###.00") & Chr(13) & Chr(13) & _
                    " Total Repayment " & Format(tot_repayment, "00.00") & Chr(13) & Chr(13)
    End If


If debug1 = 1 Then
     MsgBox " Interiation " & iter & " Difference  " & Format(prior_debt_adders - debt_adders_int_fees, "00.0000") _
             & Chr(13) & Chr(13) & " Debt_adders_int_fees " & Format(debt_adders_int_fees, "##.00") & _
             " Commitment " & Format(commitment, "00.00") & Chr(13) & Chr(13) & " Total Interest " & Format(total_interest, "##.00") & "DSRA Amount " & Format(DSRA_amount, "00.000") & Chr(13) & Chr(13) & _
             " Capitalised int and fees " & Format(capitalised_int_fees, "00.00") & " Funding " & Format(funding, "##.00") & Chr(13) & Chr(13) & "  up front " & Format(up_front_fee_capitalised, "##.00") & " Commitment fee " & Format(commitment_fee_total, "##.00")
End If
     
     
     output(1, 1) = debt_adders_int_fees + DSRA_amount
     output(2, 1) = DSRA
     
     output(1, 2) = DSRA
     
'     Debt_funding_Sculpting = debt_adders_int_fees + DSRA_amount
    
     Debt_funding_Sculpting = output
    
'  Stop calculation
'    If Abs(prior_debt_adders - debt_adders_int_fees) < 0.01 Then Exit Function
     
     
'
' Test the iterations
'
     difference = prior_debt_adders - debt_adders_int_fees
     If difference < 0 Then difference = difference * -1
     
     If difference < 0.001 Then Exit For
          
     prior_debt_adders = debt_adders_int_fees
      
Next iter


End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Function Level_Debt_Size(Off_Switch, _
               DSCR, _
               EBITDA_Ar, _
               int_rate_ar, _
               Constr_Exp_Ar, _
               Repay_Switch, _
               Constr_Switch, _
               Tax_Rate, _
               Dep_Exp_Ar, _
               up_front_fee, _
               Commit_Fee, _
               Capitalise_Switch, _
               Draw_Code, _
               months_in_per, _
               debt_tenor, _
               DSRA_Months, _
               Optional Amort_yrs, _
               Optional Int_Inc_Rate, Optional Oth_Int, _
               Optional Oth_Mat, Optional Sub_Int, _
               Optional Oth_Ded) As Variant

debug1 = 0       ' Two for debt sizing and One for Debt Funding

If Off_Switch = True Then Exit Function

'
'  Must define default values for optional items
'

If IsMissing(Amort_yrs) Then Amort_yrs = 0

If IsMissing(up_front_fee) Then up_front_fee = 0
If IsMissing(Commit_Fee) Then Commit_Fee = 0
If IsMissing(Capitalise_Switch) Then Capitalise_Switch = False
If IsMissing(Fee_Amort_Period) Then Fee_Amort_Period = 1
If IsMissing(Draw_Code) Then Draw_Code = 1

If IsMissing(months_in_period) Then months_in_period = 12
If IsMissing(debt_tenor) Then debt_tenor = 10
If IsMissing(DSRA_Months) Then DSRA_Months = 6

If IsMissing(Int_Inc_Rate) Then Int_Inc_Rate = 0
If IsMissing(Oth_Int) Then Oth_Int = 0
If IsMissing(Oth_Mat) Then Oth_Mat = 0
If IsMissing(Sub_Int) Then Sub_Int = 0
If IsMissing(Oth_Ded) Then Oth_Ded = 0


'
'  Dimension of variables
'

num_periods = int_rate_ar.Count
If months_in_per > 1 Then periods_in_year = 12 / months_in_per

ReDim amort_rate(num_periods)
ReDim construction_percent(num_periods)
ReDim Computed_DSCR(num_periods)
ReDim CFADS_Array(num_periods)

ReDim Output_Array(3, 3)

'
' Define Abbreviated Variables
'
    irate = Int_Inc_Rate
    oi = Oth_Int
    OM = Oth_Mat
    SI = Sub_Int
    OD = Oth_Ded
    t = Tax_Rate
    ob_nol = NOL_Opening
    
'
' Define periods and find the start of the construction period and start of repayement etc.
'

For i = 1 To num_periods
    If Constr_Switch(i) = True Then
        start_construction = i
        Exit For
    End If
Next i


For i = 1 To num_periods
    If Constr_Switch(i) = True Then
        end_construction = i
    End If
Next i

For i = 1 To num_periods
    If Repay_Switch(i) = True Then
        start_repay = i
        Exit For
    End If
Next i

For i = 1 To num_periods
    If Repay_Switch(i) = True Then
        end_repay = i
    End If
Next i


'
'  Total plant cost for depreciaion
'

plant_cost = 0

For i = 1 To num_periods
    plant_cost = plant_cost + Constr_Exp_Ar(i)
Next i

'
'  Compute Amortisation Rate for Fees
'

accum_amort_rate = 0

If months_in_per > 0 Then periods_in_year = 12 / months_in_per

Fee_Amort_Period = Amort_yrs * periods_in_year

For i = 1 To num_periods
    If plant_cost > 0 Then construction_percent(i) = Constr_Exp_Ar(i) / plant_cost
    If (i >= start_repay) Then
        If Fee_Amort_Period > 0 Then amort_rate(i) = 1 / Fee_Amort_Period
        net_amort = 1 - accum_amort_rate
        amort_rate(i) = WorksheetFunction.Min(amort_rate(i), net_amort)
        accum_amort_rate = accum_amort_rate + amort_rate(i)
    End If
Next i

'
'  Make iteration to resolve IDC, fee amortisation and NOL
'

Accumulated_IDC = 0
Accumulated_Fees = 0
capitalised_Interest_Fees = 0
Total_IDC_and_Fees = 0

Discount_Rate_Index = 1
PV_Debt_Service = 0

'
' Preliminary Calculation with no taxes
'

min_CFADS = 100000000000000#
term_counter = 0
Period = 0

For i = start_repay To end_repay Step 1
    Period = Period + 1

    Int_Rate = int_rate_ar(i)

    CFADS_Array(i) = EBITDA_Ar(i) * (1 - Tax_Rate) + Dep_Exp_Ar(i) * Tax_Rate

    If CFADS_Array(i) < min_CFADS Then
        min_CFADS = CFADS_Array(i)
        min_yr = Period
        int_rate_min = Int_Rate
    End If
    
    term_counter = term_counter + 1

Next i

term = term_counter

factor1 = min_CFADS / DSCR
factor2 = (int_rate_min * (term - min_yr + 1) + 1) / term

' factor2 = int_rate_min * (1 - min_yr / term) + 1 / term

factor = factor1 / factor2


' DSCR = CFADS/Debt Service
' Debt Service = CFADS/DSCR
'
'
' Debt Service = Interest + Repayment
' Debt Service = Int Rate x Remaining Balance + Total Balance/term
'
' Remaining Balance = Total Balance - yr * Total Balance/Term
' Remaining Balance = Total Balance x (1-yr/term)
'
' Remaining Balance = Total Balance x Pct
' Remaining Balance = Total Balance x (1-yr/term)
'

' Debt Service = Int Rate x Total Balance x (1-yr/term) + Total Balance/term
' Debt Service = Total Balance  x (Int Rate X (1-yr/Term) + 1/Term)
'
' Total Balance = Debt Service/(Int Rate x (1-yr/Term) + 1/Term)
'
'
'
' Debt Balance = CFADS/DSCR/((Int Rate x (term-yr+1)) + 1/term)
'
'
'

Period = 0
Accum_Payment = 0

For i = start_repay To end_repay Step 1
    Period = Period + 1
    If Period = min_yr Then Exit For
    Int_Rate = int_rate_ar(i)
    Payment = WorksheetFunction.PPmt(Int_Rate, Period, term, -1)
    Accum_Payment = Accum_Payment + Payment
Next i


debt_balance = factor

If debug1 = 2 Then
MsgBox " Initial Computation:  Debt Balance " & Format(debt_balance, "###.00") & " Min CFADS " & Format(min_CFADS, "##.00") & _
       Chr(13) & Chr(13) & _
        " factor " & factor & " factor1 " & factor1 & _
        Chr(13) & Chr(13) & _
        " factor2 " & factor2 & " int_rate_min " & int_rate_min & _
        Chr(13) & Chr(13) & _
        " min_yr " & min_yr & " term " & term
End If

'
' Compute the DSRA factor
'

tot_interest = 0
tot_repayment = 0
debt_bal = 1

debt_tenor_periods = debt_tenor * periods_in_year

total_months = DSRA_Months * months_in_per
    
    For i = 1 To total_months
        Int_Rate = int_rate_ar(i + end_construction)
        
        repay1 = 1 / debt_tenor_periods
                    
        interest = debt_bal * Int_Rate
        debt_bal = debt_bal - repay1
        
        tot_interest = tot_interest + interest
        tot_repayment = tot_repayment + repay1
    Next i

    DSRA_fac = (tot_interest + tot_repayment)

    If debug1 = 1 Then
            MsgBox "DSRA factor " & Format(DSRA_fac, "00.00%") & Chr(13) & Chr(13) & _
                    " Total Months " & Format(total_months, "00.00") & Chr(13) & Chr(13) & _
                    " Interest Rate " & Format(Int_Rate, "00.00") & Chr(13) & Chr(13) & _
                    " Debt Tenor " & Format(debt_tenor_periods, "00.00") & Chr(13) & Chr(13) & _
                    " Total Interest " & Format(tot_interest, "00.00%") & Chr(13) & Chr(13) & _
                    " Total Repayment " & Format(tot_repayment, "00.00%") & Chr(13) & Chr(13)

    End If

Opening_Debt_Balance = debt_balance

'
' Iterate around to correct for taxes, DSRA interest and repayment
'
'

For iter = 1 To 10


'
'  Iterate around the calculation of sculpted debt from the end
'  The debt balance is from the last iteration
'

commitment = debt_balance
Opening_Debt_Balance = commitment

min_DSCR = 100000000

NOL_Balance = 0
Period = 0

For i = start_repay To end_repay Step 1

    Period = Period + 1
    
    EBITDA = EBITDA_Ar(i)
    Int_Rate = int_rate_ar(i)

    Interest_Expense = Opening_Debt_Balance * Int_Rate

'
'  Adjust for IDC depreciation (cause of big problems)
'
    Current_Depreciation_Expense = Dep_Exp_Ar(i)
    dep_rate = Current_Depreciation_Expense / plant_cost
    IDC_dep = Accumulated_IDC * dep_rate
    Fee_Amort = amort_rate(i) * Accumulated_Fees
    Current_Depreciation_Expense = Dep_Exp_Ar(i) + IDC_dep + Fee_Amort

'
'  Compute taxes in first round and then iterate for interest expense and interest income
'
    EBT = EBITDA - Current_Depreciation_Expense - Interest_Expense + interest_income
'
' Recompute the tax rate if there are negative taxes
'
    Tax_loss = 0
    NOL_Used = 0

    If (EBT <= 0) Then
        Tax_loss = 0 - EBT
        NOL_Balance = NOL_Balance + Tax_loss
    End If
    
    If (EBT >= 0) Then
        NOL_Used = WorksheetFunction.Min(EBT, NOL_Balance)
        NOL_Balance = NOL_Balance - NOL_Used
    End If
        
    Adjusted_EBT = EBT + Tax_loss - NOL_Used
    
    Taxes_paid = Adjusted_EBT * Tax_Rate
'
' re-compute Adjusted EBT and Effective tax Ra
'
    cfads = EBITDA - Taxes_paid + interest_income
    
    Level_Repay = debt_balance / term
        
    Debt_Service = Interest_Expense + Level_Repay
    
    If (Debt_Service > 0) Then
        DSCR_Period = cfads / Debt_Service
    Else: DSCR_Period = 10
    End If
    
    If DSCR_Period < min_DSCR Then
        min_DSCR = DSCR_Period
        min_yr = Period
        min_CFADS = cfads
        int_rate_min = Int_Rate
    End If
        
    Opening_Debt_Balance = Opening_Debt_Balance - Level_Repay

    If debug1 = 2 Then
         MsgBox " CFADS " & cfads & " Level Repay " & Level_Repay & _
                 Chr(13) & Chr(13) & _
                " DSCR " & DSCR & " Interest " & Interest_Expense & _
                Chr(13) & Chr(13) & _
                " Opening Debt Balance " & Opening_Debt_Balance & " Min DSCR " & min_DSCR
    End If
Next i    ' Finish of loop around the years


factor1 = min_CFADS / DSCR
factor2 = (int_rate_min * (term - min_yr + 1) + 1) / term
' factor2 = int_rate_min * (1 - (min_yr) / term) + 1 / term

factor = factor1 / factor2

' Debt Bal = CFADS/DSCR/((Int Rate x (term-yr+1)) + 1/term)

debt_balance = factor

commitment = debt_balance

DSRA = commitment * DSRA_fac

If debug1 = 2 Then
MsgBox " Debt Balance " & debt_balance & " min CFADS " & min_CFADS & _
       Chr(13) & Chr(13) & _
        " factor " & factor & " factor1 " & factor1 & _
        Chr(13) & Chr(13) & _
        " factor2 " & factor2 & " int_rate_min " & int_rate_min & _
        Chr(13) & Chr(13) & _
        " MIN YR " & min_yr & " term " & term
End If

Output_Array(1, 1) = debt_balance

'
'  NOW WORK THROUGH THE CONSTRUCTION USING THE NEW VALUE FOR THE DEBT COMMITMENT
'



'
'  Comtpute the debt funding and equity commitment for debt draws
'

Total_Cost = plant_cost + Total_IDC_and_Fees + DSRA  ' Total project cost includes adders

debt_commitment = debt_balance     ' Debt commitment is from sculpting section

Funding_Commitment = debt_commitment - capitalised_Interest_Fees     ' Funding commitment is debt less capitalisation

Equity_Commitment = Total_Cost - debt_commitment


If debug1 = 1 Then
MsgBox " Project Cost " & Total_Cost & " Debt " & debt_commitment & Chr(13) & Chr(13) & _
       " Total Adders " & Total_IDC_and_Fees & " DSRA " & DSRA
End If

'
'  Use the for IDC and fees from last iteration and then re-set
'

total_up_front_cap = 0
total_commitment_cap = 0
total_interest_cap = 0
total_up_front = 0
total_commitment = 0
total_interest = 0

Construction_Debt = 0
total_draws = 0
Accumulated_IDC = 0
Accumulated_Fees = 0
opening_equity_balance = 0
Debt_Balance_Construction = 0


'
'  Loop to find new IDC and fees from new go around of the sculpting
'

For i = start_construction To end_construction Step 1

'
'  Compute fees and interest from opening balance for funding needs
'

    If i = start_construction Then
        up_front_fee_amount = debt_commitment * up_front_fee
    Else
        up_front_fee_amount = 0
    End If

    undrawn_debt = debt_commitment - Construction_Debt
    commitment_fee = undrawn_debt * Commit_Fee

    Interest_Accrued = Construction_Debt * int_rate_ar(i)

'
' Compute interest and fee paid depending on the interest capitalised switch
'
    If Capitalise_Switch Then
        up_front_fee_capitalised = up_front_fee_amount
        up_front_fee_paid = 0
    
        commitment_fee_capitalised = commitment_fee
        commitment_fee_paid = 0
    
        interest_capitalised = Interest_Accrued
        interest_paid = 0
    Else
        up_front_fee_capitalised = 0
        up_front_fee_paid = up_front_fee_amount
    
        commitment_fee_capitalised = 0
        commitment_fee_paid = commitment_fee
    
        interest_capitalised = 0
        interest_paid = Interest_Accrued
    End If


'
'  Funding Needs
'
    DSRA_paid = 0
    If i = end_construction Then DSRA_paid = DSRA
    
    funding_needs = Constr_Exp_Ar(i) + up_front_fee_paid + _
                    commitment_fee_paid + interest_paid + DSRA_paid

'
'  Compute Debt Draws using one of the three methods
'

'
'  Pro-Rata
'

If Draw_Code = 1 Then
    debt_draws = Funding_Commitment * construction_percent(i)

'
' Equity First
'

ElseIf Draw_Code = 2 Then
    remaining_equity = Equity_Commitment - opening_equity_balance
    equity_funding = WorksheetFunction.Min(remaining_equity, funding_needs)
        
    closing_equity_balance = opening_equity_balance + equity_funding
    debt_draws = funding_needs - equity_funding

'
' Debt First
'

ElseIf Draw_Code = 3 Then
    remaining_debt = Funding_Commitment - Debt_Balance_Construction
    debt_draws = WorksheetFunction.Min(remaining_debt, funding_needs)
    Debt_Balance_Construction = Debt_Balance_Construction + debt_draws
End If
        
total_draws = total_draws + debt_draws
        
Construction_Debt = Construction_Debt + debt_draws + up_front_fee_capitalised _
                    + interest_capitalised + commitment_fee_capitalised

Accumulated_IDC = Accumulated_IDC + Interest_Accrued
Accumulated_Fees = Accumulated_Fees + commitment_fee + up_front_fee_amount

If debug1 = 1 Then
 MsgBox " Period " & i & "Interest " & Interest_Accrued & " Rate " & int_rate_ar(i) & _
 Chr(13) & Chr(13) & " Accumulated_IDC " & Accumulated_IDC & " Debt " & Construction_Debt & _
 Chr(13) & Chr(13) & " funding needs " & funding_needs & " Constr " & Constr_Exp_Ar(i) & _
 Chr(13) & Chr(13) & " Equity Commitmnet " & Equity_Commitment & " remaining " & remaining_equity & _
 Chr(13) & Chr(13) & " total debt draws " & total_draws & " Constr Debt " & Construction_Debt & _
 Chr(13) & Chr(13) & " opening equity balance " & opening_equity_balance & " Closing Equity Balance " & closing_equity_balance & _
 Chr(13) & Chr(13) & " Debt Draws " & debt_draws & " Equity Funding " & equity_funding

End If


total_up_front_cap = total_up_front_cap + up_front_fee_capitalised
total_commitment_cap = total_commitment_cap + commitment_fee_capitalised
total_interest_cap = total_interest_cap + interest_capitalised

total_up_front = total_up_front + up_front_fee_amount
total_commitment = total_commitment + commitment_fee
total_interest = total_interest + Interest_Accrued
    
opening_equity_balance = closing_equity_balance
    
Next i

last_adders = Total_IDC_and_Fees

Total_IDC_and_Fees = total_up_front + _
    total_commitment + total_interest

capitalised_Interest_Fees = total_up_front_cap + _
    total_commitment_cap + total_interest_cap

Output_Array(2, 1) = Total_IDC_and_Fees + DSRA

Output_Array(3, 1) = DSRA

Output_Array(1, 2) = Total_IDC_and_Fees + DSRA

Output_Array(1, 3) = DSRA



difference = last_adders - Total_IDC_and_Fees
If difference < 0 Then difference = 0 - difference

If difference < 0.000001 Then Exit For

 If debug1 = 1 Then

MsgBox "Iteraton " & iter & " Difference " & Format(difference, "##.00") & _
        Chr(13) & Chr(13) & _
       " Total Adders " & Format(Total_IDC_and_Fees, " ##.00") & " Capitalisation Adders " & Format(capitalised_Interest_Fees, "##.00") & _
       Chr(13) & Chr(13) & _
       " up_front_fee_capitalised " & Format(up_front_fee_capitalised, "##.00") & " interest capitalised " & Format(interest_capitalised, " ##.00") & _
       Chr(13) & Chr(13) & _
       " up_front_fee_amount " & Format(up_front_fee_amount, "##.00") & " interest amount " & Format(Interest_Accrued, "##.00") & _
       Chr(13) & Chr(13) & _
       " commitment fee capitalised " & commitment_fee_capitalised & _
       Chr(13) & Chr(13) & _
       " Accum Int " & Accumulated_IDC & " Accum Fee " & Accumulated_Fees & _
       Chr(13) & Chr(13) & _
       " Funding Commitment " & Funding_Commitment & " Debt Commitment " & debt_commitment & _
      Chr(13) & Chr(13) & _
       " Total Cost " & Total_Cost & " Equity Commitment " & Equity_Commitment & _
       Chr(13) & Chr(13) & _
       " DSRA " & DSRA & " Constr Debt " & Construction_Debt & " Total Draws " & total_draws


 End If

Next iter

Level_Debt_Size = Output_Array

End Function



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Function Annuity_Debt_Size(Off_Switch, _
               DSCR, _
               EBITDA_Ar, _
               int_rate_ar, _
               Constr_Exp_Ar, _
               Repay_Switch, _
               Constr_Switch, _
               Tax_Rate, _
               Dep_Exp_Ar, _
               up_front_fee, _
               Commit_Fee, _
               Capitalise_Switch, _
               Draw_Code, _
               months_in_per, _
               debt_tenor, _
               DSRA_Months, _
               Optional Amort_yrs, _
               Optional Int_Inc_Rate, Optional Oth_Int, _
               Optional Oth_Mat, Optional Sub_Int, _
               Optional Oth_Ded) As Variant

debug1 = 0       ' Two for debt sizing and One for Debt Funding

' If Off_Switch = True Then Exit Function

'
'  Must define default values for optional items
'

If IsMissing(Amort_yrs) Then Amort_yrs = 0

If IsMissing(up_front_fee) Then up_front_fee = 0
If IsMissing(Commit_Fee) Then Commit_Fee = 0
If IsMissing(Capitalise_Switch) Then Capitalise_Switch = False
If IsMissing(Fee_Amort_Period) Then Fee_Amort_Period = 1
If IsMissing(Draw_Code) Then Draw_Code = 1

If IsMissing(months_in_period) Then months_in_period = 12
If IsMissing(debt_tenor) Then debt_tenor = 10
If IsMissing(DSRA_Months) Then DSRA_Months = 6

If IsMissing(Int_Inc_Rate) Then Int_Inc_Rate = 0
If IsMissing(Oth_Int) Then Oth_Int = 0
If IsMissing(Oth_Mat) Then Oth_Mat = 0
If IsMissing(Sub_Int) Then Sub_Int = 0
If IsMissing(Oth_Ded) Then Oth_Ded = 0

If Off_Switch = True Then Exit Function


'
'  Dimension of variables
'

num_periods = int_rate_ar.Count
If months_in_per > 1 Then periods_in_year = 12 / months_in_per

ReDim amort_rate(num_periods)
ReDim construction_percent(num_periods)
ReDim Computed_DSCR(num_periods)
ReDim CFADS_Array(num_periods)

ReDim Output_Array(3, 3)

'
' Define Abbreviated Variables
'
    irate = Int_Inc_Rate
    oi = Oth_Int
    OM = Oth_Mat
    SI = Sub_Int
    OD = Oth_Ded
    t = Tax_Rate
    ob_nol = NOL_Opening
    
'
' Define periods and find the start of the construction period and start of repayement etc.
'

For i = 1 To num_periods
    If Constr_Switch(i) = True Then
        start_construction = i
        Exit For
    End If
Next i

For i = 1 To num_periods
    If Constr_Switch(i) = True Then
        end_construction = i
    End If
Next i

For i = 1 To num_periods
    If Repay_Switch(i) = True Then
        start_repay = i
        Exit For
    End If
Next i

For i = 1 To num_periods
    If Repay_Switch(i) = True Then
        end_repay = i
    End If
Next i

'
'  Total plant cost for depreciaion
'

plant_cost = 0

For i = 1 To num_periods
    plant_cost = plant_cost + Constr_Exp_Ar(i)
Next i

'
'  Compute Amortisation Rate for Fees
'

accum_amort_rate = 0

If months_in_per > 0 Then periods_in_year = 12 / months_in_per

Fee_Amort_Period = Amort_yrs * periods_in_year

For i = 1 To num_periods
    If plant_cost > 0 Then construction_percent(i) = Constr_Exp_Ar(i) / plant_cost
    If (i >= start_repay) Then
        If Fee_Amort_Period > 0 Then amort_rate(i) = 1 / Fee_Amort_Period
        net_amort = 1 - accum_amort_rate
        amort_rate(i) = WorksheetFunction.Min(amort_rate(i), net_amort)
        accum_amort_rate = accum_amort_rate + amort_rate(i)
    End If
Next i

'
'  Make iteration to resolve IDC, fee amortisation and NOL
'

Accumulated_IDC = 0
Accumulated_Fees = 0
capitalised_Interest_Fees = 0
Total_IDC_and_Fees = 0

Discount_Rate_Index = 1
PV_Debt_Service = 0

'
' Preliminary Calculation with no taxes
'

min_CFADS = 100000000000000#
term_counter = 0
Period = 0

For i = start_repay To end_repay Step 1
    Period = Period + 1

    Int_Rate = int_rate_ar(i)

    CFADS_Array(i) = EBITDA_Ar(i) * (1 - Tax_Rate) + Dep_Exp_Ar(i) * Tax_Rate

    If CFADS_Array(i) < min_CFADS Then
        min_CFADS = CFADS_Array(i)
        min_yr = Period
        int_rate_min = Int_Rate
    End If
    
    term_counter = term_counter + 1

Next i

term = term_counter

factor1 = min_CFADS / DSCR
factor2 = WorksheetFunction.Pmt(int_rate_min, term, -1)

factor = factor1 / factor2


' DSCR = CFADS/Debt Service
' Debt Service = CFADS/DSCR
'
'
' Debt Service = DS Factor x Debt Balannce
'
' DS Factor x Debt Balance = CFADS/DSCR
'
'
'  Debt Balance = (CFADS/DSCR)/DS Factor
'
'  DF Factor = PMT(rate, num per, -1)
'

debt_balance = factor

If debug1 = 2 Then
MsgBox " Initial Computation:  Debt Balance " & Format(debt_balance, "###.00") & " Min CFADS " & Format(min_CFADS, "##.00") & _
       Chr(13) & Chr(13) & _
        " factor " & factor & " factor1 " & factor1 & _
        Chr(13) & Chr(13) & _
        " factor2 " & factor2 & " int_rate_min " & int_rate_min & _
        Chr(13) & Chr(13) & _
        " min_yr " & min_yr & " term " & term
End If

'
' Compute the DSRA factor
'

tot_interest = 0
tot_repayment = 0
debt_bal = 1

debt_tenor_periods = debt_tenor * periods_in_year

total_months = DSRA_Months * months_in_per
    
    For i = 1 To total_months
        Int_Rate = int_rate_ar(i + end_construction)
        
        repay1 = WorksheetFunction.PPmt(Int_Rate, i, term, -1)
                    
        interest = debt_bal * Int_Rate
        debt_bal = debt_bal - repay1
        
        tot_interest = tot_interest + interest
        tot_repayment = tot_repayment + repay1
    Next i

    DSRA_fac = (tot_interest + tot_repayment)

    If debug1 = 1 Then
            MsgBox "DSRA factor " & Format(DSRA_fac, "00.00%") & Chr(13) & Chr(13) & _
                    " Total Months " & Format(total_months, "00.00") & Chr(13) & Chr(13) & _
                    " Interest Rate " & Format(Int_Rate, "00.00") & Chr(13) & Chr(13) & _
                    " Debt Tenor " & Format(debt_tenor_periods, "00.00") & Chr(13) & Chr(13) & _
                    " Total Interest " & Format(tot_interest, "00.00%") & Chr(13) & Chr(13) & _
                    " Total Repayment " & Format(tot_repayment, "00.00%") & Chr(13) & Chr(13)

    End If

Opening_Debt_Balance = debt_balance

'
' Iterate around to correct for taxes, DSRA interest and repayment
'
'

For iter = 1 To 10

'
'  Iterate around the calculation of sculpted debt from the end
'  The debt balance is from the last iteration
'

commitment = debt_balance
Opening_Debt_Balance = commitment

NOL_Balance = 0
Period = start_repay

min_DSCR = 100000000

For i = start_repay To end_repay Step 1

    time_period = i - start_repay + 1

    Period = Period + 1
    
    EBITDA = EBITDA_Ar(i)
    Int_Rate = int_rate_ar(i)

    Interest_Expense = Opening_Debt_Balance * Int_Rate

'
'  Adjust for IDC depreciation (cause of big problems)
'
    Current_Depreciation_Expense = Dep_Exp_Ar(i)
    dep_rate = Current_Depreciation_Expense / plant_cost
    IDC_dep = Accumulated_IDC * dep_rate
    Fee_Amort = amort_rate(i) * Accumulated_Fees
    Current_Depreciation_Expense = Dep_Exp_Ar(i) + IDC_dep + Fee_Amort

'
'  Compute taxes in first round and then iterate for interest expense and interest income
'
    EBT = EBITDA - Current_Depreciation_Expense - Interest_Expense + interest_income
'
' Recompute the tax rate if there are negative taxes
'
    Tax_loss = 0
    NOL_Used = 0

    If (EBT <= 0) Then
        Tax_loss = 0 - EBT
        NOL_Balance = NOL_Balance + Tax_loss
    End If
    
    If (EBT >= 0) Then
        NOL_Used = WorksheetFunction.Min(EBT, NOL_Balance)
        NOL_Balance = NOL_Balance - NOL_Used
    End If
        
    Adjusted_EBT = EBT + Tax_loss - NOL_Used
    
    Taxes_paid = Adjusted_EBT * Tax_Rate
'
' re-compute Adjusted EBT and Effective tax Ra
'
    cfads = EBITDA - Taxes_paid + interest_income
        
    
'    If (Period < term) Then Annuity_Repay = WorksheetFunction.PPmt(Int_Rate, time_period, term, -commitment)
                
'    Debt_Service = Interest_Expense + Annuity_Repay
    
    If (i < term) Then Debt_Service = WorksheetFunction.Pmt(Int_Rate, term, -commitment)
    
    Annuity_Repay = Debt_Service - Interest_Expense
    
    If (Debt_Service > 0) Then
        DSCR_Period = cfads / Debt_Service
    Else: DSCR_Period = 10
    End If
    
    If DSCR_Period < min_DSCR Then
        min_DSCR = DSCR_Period
        min_yr = time_period
        min_CFADS = cfads
        int_rate_min = Int_Rate
    End If
        
    Opening_Debt_Balance = Opening_Debt_Balance - Annuity_Repay

    If debug1 = 4 And min_DSCR = DSCR_Period Then
         test = MsgBox( _
                " Period " & Period & " DSCR Period " & Format(DSCR_Period, "##.00") & Chr(13) & Chr(13) & _
                " CFADS " & Format(cfads, "00.000") & " Annuity Repay " & Format(Annuity_Repay, "##.00") & Chr(13) & Chr(13) & _
                " Target DSCR " & Format(DSCR, "##.00") & " Debt Service " & Format(Debt_Service, "##.00") & Chr(13) & Chr(13) & _
                " Adjusted EBT " & Format(EBT, "##.00") & " Interest " & Format(Interest_Expense, "##.00") & Chr(13) & Chr(13) & _
                " Dep 1 " & Format(Current_Depreciation_Expense, "##.00") & " Commitment " & Format(commitment, "##.00") & Chr(13) & Chr(13) & _
                " EBITDA " & Format(EBITDA, "##.00") & " Taxes " & Format(Taxes_paid, "##.00") & Chr(13) & Chr(13) & _
                " Opening Debt Balance " & Format(Opening_Debt_Balance, "##.00") & " Min DSCR " & Format(min_DSCR, "##.00"), vbAbortRetryIgnore)
                
                                
'        MsgBox "test " & test
                                
        If test = 3 Then debug1 = 0
                        
    End If

Next i    ' Finish of loop around the years

factor1 = min_CFADS / DSCR
factor2 = WorksheetFunction.Pmt(int_rate_min, term, -1)

If factor2 > 0 Then factor = factor1 / factor2

debt_balance = factor

commitment = debt_balance

DSRA = commitment * DSRA_fac


If debug1 = 4 Then
MsgBox _
       " Iteration " & Format(iter, "##") & Chr(13) & Chr(13) & _
       " MIN YR " & Format(min_yr, "##.0000") & " term " & term & Chr(13) & Chr(13) & _
       " Debt Balance " & Format(debt_balance, "##.00") & " Min CFADS " & Format(min_CFADS, "##.00") & Chr(13) & Chr(13) & _
        " factor " & Format(factor, "00.00") & " factor1 - Debt Service " & Format(factor1, "0.0000") & Chr(13) & Chr(13) & _
        " factor2 " & Format(factor2, "00.0000") & " int_rate_min " & Format(int_rate_min, "00.000%")

End If

Output_Array(1, 1) = debt_balance

'
'  NOW WORK THROUGH THE CONSTRUCTION USING THE NEW VALUE FOR THE DEBT COMMITMENT
'

'
'  Comtpute the debt funding and equity commitment for debt draws
'


Total_Cost = plant_cost + Total_IDC_and_Fees + DSRA  ' Total project cost includes adders

debt_commitment = debt_balance     ' Debt commitment is from sculpting section

Funding_Commitment = debt_commitment - capitalised_Interest_Fees     ' Funding commitment is debt less capitalisation

Equity_Commitment = Total_Cost - debt_commitment


If debug1 = 1 Then
MsgBox " Project Cost " & Total_Cost & " Debt " & debt_commitment & Chr(13) & Chr(13) & _
       " Total Adders " & Total_IDC_and_Fees & " DSRA " & DSRA
End If

'
'  Use the for IDC and fees from last iteration and then re-set
'

total_up_front_cap = 0
total_commitment_cap = 0
total_interest_cap = 0
total_up_front = 0
total_commitment = 0
total_interest = 0

Construction_Debt = 0
Accumulated_IDC = 0
Accumulated_Fees = 0
opening_equity_balance = 0
Debt_Balance_Construction = 0

'
'  Loop to find new IDC and fees from new go around of the sculpting
'

For i = start_construction To end_construction Step 1

'
'  Compute fees and interest from opening balance for funding needs
'

    If i = start_construction Then
        up_front_fee_amount = debt_commitment * up_front_fee
    Else
        up_front_fee_amount = 0
    End If

    undrawn_debt = debt_commitment - Construction_Debt
    commitment_fee = undrawn_debt * Commit_Fee

    Interest_Accrued = Construction_Debt * int_rate_ar(i)

'
' Compute interest and fee paid depending on the interest capitalised switch
'
    If Capitalise_Switch Then
        up_front_fee_capitalised = up_front_fee_amount
        up_front_fee_paid = 0
    
        commitment_fee_capitalised = commitment_fee
        commitment_fee_paid = 0
    
        interest_capitalised = Interest_Accrued
        interest_paid = 0
    Else
        up_front_fee_capitalised = 0
        up_front_fee_paid = up_front_fee_amount
    
        commitment_fee_capitalised = 0
        commitment_fee_paid = commitment_fee
    
        interest_capitalised = 0
        interest_paid = Interest_Accrued
    End If

'
'  Funding Needs
'
    DSRA_paid = 0
    If i = end_construction Then DSRA_paid = DSRA
    
    funding_needs = Constr_Exp_Ar(i) + up_front_fee_paid + _
                    commitment_fee_paid + interest_paid + DSRA_paid

'
'  Compute Debt Draws using one of the three methods
'

'
'  Pro-Rata
'

If Draw_Code = 1 Then
    debt_draws = Funding_Commitment * construction_percent(i)

'
' Equity First
'

ElseIf Draw_Code = 2 Then
    remaining_equity = Equity_Commitment - opening_equity_balance
    equity_funding = WorksheetFunction.Min(remaining_equity, funding_needs)
        
    closing_equity_balance = opening_equity_balance + equity_funding
    debt_draws = funding_needs - equity_funding

'
' Debt First
'

ElseIf Draw_Code = 3 Then
    remaining_debt = Funding_Commitment - Debt_Balance_Construction
    debt_draws = WorksheetFunction.Min(remaining_debt, funding_needs)
    Debt_Balance_Construction = Debt_Balance_Construction + debt_draws
End If
                
Construction_Debt = Construction_Debt + debt_draws + up_front_fee_capitalised _
                    + interest_capitalised + commitment_fee_capitalised

Accumulated_IDC = Accumulated_IDC + Interest_Accrued
Accumulated_Fees = Accumulated_Fees + commitment_fee + up_front_fee_amount

If debug1 = 1 Then
 MsgBox " Period " & i & "Interest " & Interest_Accrued & " Rate " & int_rate_ar(i) & _
 Chr(13) & Chr(13) & " Accumulated_IDC " & Accumulated_IDC & " Debt " & Construction_Debt & _
 Chr(13) & Chr(13) & " funding needs " & funding_needs & " Constr " & Constr_Exp_Ar(i) & _
 Chr(13) & Chr(13) & " Equity Commitmnet " & Equity_Commitment & " remaining " & remaining_equity & _
 Chr(13) & Chr(13) & " total debt draws " & total_draws & " Constr Debt " & Construction_Debt & _
 Chr(13) & Chr(13) & " opening equity balance " & opening_equity_balance & " Closing Equity Balance " & closing_equity_balance & _
 Chr(13) & Chr(13) & " Debt Draws " & debt_draws & " Equity Funding " & equity_funding

End If

total_up_front_cap = total_up_front_cap + up_front_fee_capitalised
total_commitment_cap = total_commitment_cap + commitment_fee_capitalised
total_interest_cap = total_interest_cap + interest_capitalised

total_up_front = total_up_front + up_front_fee_amount
total_commitment = total_commitment + commitment_fee
total_interest = total_interest + Interest_Accrued
    
opening_equity_balance = closing_equity_balance
    
Next i

last_adders = Total_IDC_and_Fees

Total_IDC_and_Fees = total_up_front + _
    total_commitment + total_interest

capitalised_Interest_Fees = total_up_front_cap + _
    total_commitment_cap + total_interest_cap

Output_Array(2, 1) = Total_IDC_and_Fees + DSRA

Output_Array(3, 1) = DSRA

Output_Array(1, 2) = Total_IDC_and_Fees + DSRA

Output_Array(1, 3) = DSRA


difference = last_adders - Total_IDC_and_Fees
If difference < 0 Then difference = 0 - difference

If difference < 0.000001 Then Exit For

 If debug1 = 1 Then

MsgBox "Iteraton " & iter & " Difference " & Format(difference, "##.00") & _
        Chr(13) & Chr(13) & _
       " Total Adders " & Format(Total_IDC_and_Fees, " ##.00") & " Capitalisation Adders " & Format(capitalised_Interest_Fees, "##.00") & _
       Chr(13) & Chr(13) & _
       " up_front_fee_capitalised " & Format(up_front_fee_capitalised, "##.00") & " interest capitalised " & Format(interest_capitalised, " ##.00") & _
       Chr(13) & Chr(13) & _
       " up_front_fee_amount " & Format(up_front_fee_amount, "##.00") & " interest amount " & Format(Interest_Accrued, "##.00") & _
       Chr(13) & Chr(13) & _
       " commitment fee capitalised " & commitment_fee_capitalised & _
       Chr(13) & Chr(13) & _
       " Accum Int " & Accumulated_IDC & " Accum Fee " & Accumulated_Fees & _
       Chr(13) & Chr(13) & _
       " Funding Commitment " & Funding_Commitment & " Debt Commitment " & debt_commitment & _
      Chr(13) & Chr(13) & _
       " Total Cost " & Total_Cost & " Equity Commitment " & Equity_Commitment & _
       Chr(13) & Chr(13) & _
       " DSRA " & DSRA & " Constr Debt " & Construction_Debt & " Total Draws " & total_draws


 End If


Next iter

Annuity_Debt_Size = Output_Array

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function Forward_Sculpt(Off_Switch, _
               DSCR, _
               EBITDA_Array, _
               Int_Rate_Array, _
               Constr_Exp_Array, _
               Repay_Switch, _
               Constr_Switch, _
               Tax_Rate, _
               Dep_Exp_Array, _
               Optional up_front_fee, _
               Optional Commit_Fee, _
               Optional Capitalise_Switch, _
               Optional Fee_Amort_Period, _
               Optional Draw_Code, _
               Optional DSRA_Months, _
               Optional months_in_period, _
               Optional Int_Inc_Rate, Optional Oth_Int, _
               Optional Oth_Mat, Optional Sub_Int, _
               Optional Oth_Ded) As Variant

debug1 = 0

If IsMissing(up_front_fee) Then up_front_fee = 0
If IsMissing(Commit_Fee) Then Commit_Fee = 0
If IsMissing(Capitalise_Switch) Then Capitalise_Switch = False
If IsMissing(Fee_Amort_Period) Then Fee_Amort_Period = 1
If IsMissing(Draw_Code) Then Draw_Code = 1
If IsMissing(months_in_period) Then months_in_period = 1


If IsMissing(DSRA_Input) Then DSRA_Input = 0
If IsMissing(Int_Inc_Rate) Then Int_Inc_Rate = 0
If IsMissing(Oth_Int) Then Oth_Int = 0
If IsMissing(Oth_Mat) Then Oth_Mat = 0
If IsMissing(Sub_Int) Then Sub_Int = 0
If IsMissing(Oth_Ded) Then Oth_Ded = 0

'
'  Dimension of variables
'

If Off_Switch = True Then Exit Function

num_periods = Int_Rate_Array.Count

ReDim amort_rate(num_periods)
ReDim construction_percent(num_periods)

ReDim Repayment_Array(2, num_periods)

Dim output(3, 3)

'
' Define Abbreviated Variables
'
    irate = Int_Inc_Rate
    oi = Oth_Int
    OM = Oth_Mat
    SI = Sub_Int
    OD = Oth_Ded
    t = Tax_Rate
    ob_nol = NOL_Opening
    DP = DSRA_pct

'
' Define periods and find the start of the construction period and start of repayement etc.
'

' start_construction = timing(Constr_Switch, Repay_Switch, 1)
' end_construction = timing(Constr_Switch, Repay_Switch, 1)
' start_repay = timing(Constr_Switch, Repay_Switch, 1)
' end_repay = timing(Constr_Switch, Repay_Switch, 1)


For i = 1 To num_periods
    If Constr_Switch(i) = True Then
        start_construction = i
        Exit For
    End If
Next i

For i = 1 To num_periods
    If Constr_Switch(i) = True Then
        end_construction = i
    End If
Next i

For i = 1 To num_periods
    If Repay_Switch(i) = True Then
        start_repay = i
        Exit For
    End If
Next i

For i = 1 To num_periods
    If Repay_Switch(i) = True Then
        end_repay = i
    End If
Next i

'
'  Total plant cost for depreciaion
'

plant_cost = 0

For i = 1 To num_periods
    plant_cost = plant_cost + Constr_Exp_Array(i)
Next i

accum_amort_rate = 0

For i = 1 To num_periods
    construction_percent(i) = Constr_Exp_Array(i) / plant_cost
    If (i >= start_repay) Then
        amort_rate(i) = 1 / Fee_Amort_Period
        net_amort = 1 - accum_amort_rate
        amort_rate(i) = WorksheetFunction.Min(amort_rate(i), net_amort)
        accum_amort_rate = accum_amort_rate + amort_rate(i)
    End If
Next i

'
'  Make iteration to resolve IDC, fee amortisation and NOL
'

Accumulated_IDC = 0
Accumulated_Fees = 0
capitalised_Interest_Fees = 0
Total_IDC_and_Fees = 0

Discount_Rate_Index = 1
PV_Debt_Service = 0
'
' Preliminary Calculation with no taxes
'

For i = start_repay To end_repay Step 1

    Int_Rate = Int_Rate_Array(i)

    cfads = EBITDA_Array(i) * (1 - Tax_Rate) + Dep_Exp_Array(i) * Tax_Rate

    required_DS = cfads / DSCR
        
    Discount_Rate_Index = Discount_Rate_Index * (1 + Int_Rate)

    PV_Debt_Service = PV_Debt_Service + required_DS / Discount_Rate_Index
Next i

commitment = PV_Debt_Service
Opening_Debt_Balance = commitment

'
' Iterate around to correct for taxes, DSRA interest and repayment
'

For iter = 1 To 20

'
'  Iterate around the calculation of sculpted debt from the end
'

commitment = PV_Debt_Service
Opening_Debt_Balance = commitment

Discount_Rate_Index = 1
PV_Debt_Service = 0
NOL_Balance = 0

For i = start_repay To end_repay Step 1

    EBITDA = EBITDA_Array(i)
    Int_Rate = Int_Rate_Array(i)

    Interest_Expense = Opening_Debt_Balance * Int_Rate

'
'  Adjust for IDC depreciation (cause of big problems)
'
    Current_Depreciation_Expense = Dep_Exp_Array(i)
    dep_rate = Current_Depreciation_Expense / plant_cost
    IDC_dep = Accumulated_IDC * dep_rate
    Fee_Amort = amort_rate(i) * Accumulated_Fees
    Current_Depreciation_Expense = Dep_Exp_Array(i) + IDC_dep + Fee_Amort

'
'  Compute taxes in first round and then iterate for interest expense and interest income
'
    EBT = EBITDA - Current_Depreciation_Expense - Interest_Expense + interest_income
    
'
' Recompute the tax rate if there are negative taxes
'
    Tax_loss = 0
    NOL_Used = 0

    If (EBT <= 0) Then
        Tax_loss = 0 - EBT
        NOL_Balance = NOL_Balance + Tax_loss
    End If
    
    If (EBT >= 0) Then
        NOL_Used = WorksheetFunction.Min(EBT, NOL_Balance)
        NOL_Balance = NOL_Balance - NOL_Used
    End If
    
    
    Adjusted_EBT = EBT + Tax_loss - NOL_Used
    
    Taxes_paid = Adjusted_EBT * Tax_Rate

'
' re-compute Adjusted EBT and Effective tax Ra
'

    cfads = EBITDA - Taxes_paid + interest_income
    required_DS = cfads / DSCR

    Discount_Rate_Index = Discount_Rate_Index * (1 + Int_Rate)

    PV_Debt_Service = PV_Debt_Service + required_DS / Discount_Rate_Index

    Repayment_Array(1, i) = required_DS - Interest_Expense

    Opening_Debt_Balance = Opening_Debt_Balance - Repayment_Array(1, i)

    If debug1 = 2 Then
         MsgBox " CFADS " & cfads & " Disc Rate Index " & Discount_Rate_Index & _
            Chr(13) & Chr(13) & _
             " Required DS " & required_DS & " Interest " & Interest_Expense & _
              Chr(13) & Chr(13) & _
              " Opening Debt Balance " & Opening_Debt_Balance & " Repayment " & Repayment_Array(1, i)
    End If
Next i


commitment = PV_Debt_Service

output(1, 1) = commitment

'
'  NOW WORK THROUGH THE CONSTRUCTION USING THE NEW VALUE FOR THE DEBT COMMITMENT
'

'
'  Use debt commitment from sculpting to compute IDC and funding
'


'
'  Comtpute the debt funding and equity commitment for debt draws
'

 DSRA = 0

Total_Cost = plant_cost + Total_IDC_and_Fees + DSRA  ' Total project cost includes adders

debt_commitment = commitment     ' Debt commitment is from sculpting section

Funding_Commitment = debt_commitment - capitalised_Interest_Fees     ' Funding commitment is debt less capitalisation

Equity_Commitment = Total_Cost - debt_commitment


If debug1 = 1 Then

MsgBox " Project Cost " & Total_Cost & " Debt " & debt_commitment & Chr(13) & Chr(13) & _
       " Total Adders " & Total_IDC_and_Fees & " DSRA " & DSRA

End If

'
'  Use the for IDC and fees from last iteration and then re-set
'

total_up_front_cap = 0
total_commitment_cap = 0
total_interest_cap = 0
total_up_front = 0
total_commitment = 0
total_interest = 0

Construction_Debt = 0
Accumulated_IDC = 0
Accumulated_Fees = 0
opening_equity_balance = 0
debt_balance = 0

Repayment_Array(2, 1) = Total_IDC_and_Fees + DSRA


'
'  Loop to find new IDC and fees from new go around of the sculpting
'

For i = start_construction To end_construction Step 1

'
'  Compute fees and interest from opening balance for funding needs
'

If i = start_construction Then
    up_front_fee_amount = debt_commitment * up_front_fee
Else
    up_front_fee_amount = 0
End If

undrawn_debt = debt_commitment - Construction_Debt
commitment_fee = undrawn_debt * Commit_Fee

Interest_Accrued = Construction_Debt * Int_Rate_Array(i)

'
' Compute interest and fee paid depending on the interest capitalised switch
'
If Capitalise_Switch Then
    up_front_fee_capitalised = up_front_fee_amount
    up_front_fee_paid = 0
    
    commitment_fee_capitalised = commitment_fee
    commitment_fee_paid = 0
    
    interest_capitalised = Interest_Accrued
    interest_paid = 0
Else
    up_front_fee_capitalised = 0
    up_front_fee_paid = up_front_fee_amount
    
    commitment_fee_capitalised = 0
    commitment_fee_paid = commitment_fee
    
    interest_capitalised = 0
    interest_paid = Interest_Accrued
End If

'
'  Funding Needs
'
    funding_needs = Constr_Exp_Array(i) + up_front_fee_paid + _
                    commitment_fee_paid + interest_paid + DSRA

'
'  Compute Debt Draws using one of the three methods
'


If Draw_Code = 1 Then
    debt_draws = Funding_Commitment * construction_percent(i)

ElseIf Draw_Code = 2 Then
    remaining_equity = Equity_Commitment - opening_equity_balance
    equity_funding = WorksheetFunction.Min(remaining_equity, funding_needs)
    
If debug1 = 1 Then
    MsgBox " remaining equity " & remaining_equity & _
    Chr(13) & Chr(13) & Chr(13) & " funding needs " & funding_needs & _
    Chr(13) & Chr(13) & Chr(13) & " Opening Balance " & opening_equity_balance & _
    Chr(13) & Chr(13) & Chr(13) & " equity_funding " & equity_funding
End If
    
    closing_equity_balance = opening_equity_balance + equity_funding
    debt_draws = funding_needs - equity_funding

ElseIf Draw_Code = 3 Then
    remaining_debt = Funding_Commitment - debt_balance
    debt_draws = WorksheetFunction.Min(remaining_debt, funding_needs)
    debt_balance = debt_balance + debt_draws
End If
                
Construction_Debt = Construction_Debt + debt_draws + up_front_fee_capitalised _
                    + interest_capitalised + commitment_fee_capitalised

Accumulated_IDC = Accumulated_IDC + Interest_Accrued
Accumulated_Fees = Accumulated_Fees + commitment_fee + up_front_fee_amount

If debug1 = 1 Then
 MsgBox " Period " & i & "Interest " & Interest_Accrued & " Rate " & Int_Rate_Array(i) & _
  Chr(13) & Chr(13) & " Accumulated_IDC " & Accumulated_IDC & " Debt " & Construction_Debt & _
 Chr(13) & Chr(13) & " funding needs " & funding_needs & " Constr " & Constr_Exp_Array(i) & _
 Chr(13) & Chr(13) & " Equity Commitmnet " & Equity_Commitment & " remaining " & remaining_equity & _
 Chr(13) & Chr(13) & " total debt draws " & total_draws & " Constr Debt " & Construction_Debt & _
 Chr(13) & Chr(13) & " opening equity balance " & opening_equity_balance & " Closing Equity Balance " & closing_equity_balance & _
 Chr(13) & Chr(13) & " Debt Draws " & debt_draws & " Equity Funding " & equity_funding

End If

total_up_front_cap = total_up_front_cap + up_front_fee_capitalised
total_commitment_cap = total_commitment_cap + commitment_fee_capitalised
total_interest_cap = total_interest_cap + interest_capitalised

total_up_front = total_up_front + up_front_fee_amount
total_commitment = total_commitment + commitment_fee
total_interest = total_interest + Interest_Accrued
    
opening_equity_balance = closing_equity_balance
    
Next i



'
'   DSRA for Sculpting; can only compute after the debt balance is established
'


' dsra_sculpt(debt_bal,months_in_period,fee_amortisation_period,DSRA_months,Int_Rate_Array,plant_cost,total_interest,total_up_front,total_commitment, _
'             Tax_Rate,Int_Inc_Rate

    debt_bal = commitment

    tot_interest = 0
    tot_repayment = 0
    NOL_Balance = 0

'
' Compute the DSRA factor
'

If months_in_period > 0 Then periods_in_year = 12 / months_in_period
Fee_amortisation_period = Fee_Amort_Period

total_months = DSRA_Months * months_in_period


    For i = 1 To total_months
                                
        Int_Rate = Int_Rate_Array(i + end_construction)
                                                                                                                                                  
        If plant_cost > 0 Then depreciation_rate = Dep_Exp_Array(i + end_construction) / plant_cost
                         
        idc_depreciation = total_interest * depreciation_rate
                        
        If (Fee_amortisation_period > 0) Then fee_amortisation = (total_up_front + total_commitment) / Fee_amortisation_period
        
        EBIT = EBITDA_Array(i + end_construction) - Dep_Exp_Array(i + end_construction) - idc_depreciation - fee_amortisation
        
        interest1 = debt_bal * Int_Rate
                          
        EBT = EBIT - interest1
        
        NOL_created = 0
        NOL_Used = 0
        
        If EBT < 0 Then
            NOL_created = 0 - EBT
            NOL_Balance = NOL_Balance + NOL_created
        End If
                
        If EBT > 0 Then
            NOL_Used = WorksheetFunction.Min(NOL_Balance, EBT)
            NOL_Balance = NOL_Balance - NOL_Used
        End If
                
        Adjusted_EBT = EBT + NOL_created - NOL_Used
        
        tax = Adjusted_EBT * Tax_Rate
                
        tax = EBT * Tax_Rate
                
'        int_income = DSRA_bal * Int_Inc_Rate
        
        int_income = 0
        
        cfads = EBITDA_Array(i + end_construction) - tax + int_income
                                
        required_DS = cfads / DSCR
                                
        interest1 = debt_bal * Int_Rate
        repay1 = required_DS - interest1
        
        debt_bal = debt_bal - repay1
        
        tot_interest = tot_interest + interest1
        tot_repayment = tot_repayment + repay1
                                
        If iter = 100 Then MsgBox "EBITDA " & Format(EBITDA_Array(i + end_construction), "##.00") & " tax " & Format(tax, "##.00") & Chr(13) & Chr(13) & _
                    " Interest " & Format(interest1, "##.00") & " repay " & Format(repay1, "##.00") & Chr(13) & Chr(13) & _
                    " NOL Balance " & Format(NOL_Balance, "##.00") & " Adjusted_EBT " & Format(Adjusted_EBT, "##.00") & Chr(13) & Chr(13) & _
                    " Depreciation " & Format(Dep_Exp_Array(i + end_construction), "##.00") & " EBT " & Format(EBT, "##.00")

    Next i


    If debt_bal > 0 Then DSRA_fac = (tot_repayment + tot_interest) / debt_bal

    DSRA = tot_repayment + tot_interest

    output(3, 1) = DSRA

    output(1, 3) = DSRA

    output(2, 1) = Total_IDC_and_Fees + DSRA

    If debug1 = 1 Then
            MsgBox "DSRA factor " & Format(DSRA_fac, "##.000%") & Chr(13) & Chr(13) & _
                    " Total Months " & Format(total_months, "00.00") & Chr(13) & Chr(13) & _
                    " Interest Rate " & Format(Int_Rate, "##.000%") & Chr(13) & Chr(13) & _
                    " CFADS " & Format(cfads, "00.00") & Chr(13) & Chr(13) & _
                    " Required_DS " & Format(required_DS, "00.00") & Chr(13) & Chr(13) & _
                    " Starting Debt " & Format(commitment, "##.00") & Chr(13) & Chr(13) & _
                    " Tax " & Format(tax, "##.00") & Chr(13) & Chr(13) & _
                    " EBIT " & Format(EBT, "##.00") & Chr(13) & Chr(13) & _
                    " Total Interest " & Format(total_interest, "00.00") & Chr(13) & Chr(13) & _
                    " IDC Depreciation " & Format(idc_depreciation, "00.00") & Chr(13) & Chr(13) & _
                    " Fee Amoritsation " & Format(fee_amortisation, "00.00") & Chr(13) & Chr(13) & _
                    " DSRA Amount " & Format(tot_interest + tot_repayment, "### ###.00") & Chr(13) & Chr(13) & _
                    " Total Repayment " & Format(tot_repayment, "00.00") & Chr(13) & Chr(13)

    End If


Total_IDC_and_Fees = total_up_front + _
    total_commitment + total_interest

capitalised_Interest_Fees = total_up_front_cap + _
    total_commitment_cap + total_interest_cap

If debug1 = 1 Then

MsgBox "Iteraton " & iter & _
        Chr(13) & Chr(13) & _
       "Total Adders " & Total_IDC_and_Fees & " Capitalisation Adders " & capitalised_Interest_Fees & _
       Chr(13) & Chr(13) & _
       " up_front_fee_capitalised " & up_front_fee_capitalised & " interest capitalised " & interest_capitalised & _
       Chr(13) & Chr(13) & _
       " up_front_fee_amount " & up_front_fee_amount & " interest amount " & Interest_Accrued & _
       Chr(13) & Chr(13) & _
       " commitment fee capitalised " & commitment_fee_capitalised & _
       Chr(13) & Chr(13) & _
       " Accum Int " & Accumulated_IDC & " Accum Fee " & Accumulated_Fees & _
       Chr(13) & Chr(13) & _
       " Funding Commitment " & Funding_Commitment & " Debt Commitment " & debt_commitment & _
      Chr(13) & Chr(13) & _
       " Total Cost " & Total_Cost & " Equity Commitment " & Equity_Commitment & _
       Chr(13) & Chr(13) & _
       " DSRA " & DSRA & " Constr Debt " & Construction_Debt & " Total Draws " & total_draws


End If

Next iter

Forward_Sculpt = output

End Function


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Sub Describe_Debt_Reslove()

   Dim ArgDesc(1 To 20) As String

   FuncName = "Debt_Resolve"
   FuncDesc = "  This Function Computes Debt Level, IDC, Fees and DSRA to Resolve Circular References" & Chr(13) & Chr(13) & "To use it you should set up the model with a sources and uses map.  This is an Array Function and you must use SHIFT, CNTL ENTER.  Make sure you press the arrow down."
   Category = 3 'Text category
   ArgDesc(1) = "Swithch that allows you to turn off the function: When TRUE the Function is turned OFF"
   ArgDesc(2) = "Gearing Flag; Set to TRUE if the gearing ratio is used to size debt; set to FALSE if the DSCR is used to size the debt"
   ArgDesc(3) = "Repay Code: This is the code number for debt repayment. 1 - Equal Installments (Flat Repayment); 2 - Annuity (Flat Debt Service); 3 -- Sculpting (Flat DSCR)"
   ArgDesc(4) = "Target DSCR: This is used when the debt is sized from cash flow and the DSCR.  It is not used and can be left as zero when the gearing method is used"
   ArgDesc(5) = "EBITDA Array: This is the period by period EBITDA.  Begin entering the array at the start of the construction period"
   ArgDesc(6) = "Interest Rate Array:  This must be the PERIODIC RATE that covers both the construction period and the operation period"
   ArgDesc(7) = "Construction Expenditure Array:  This should be the periodic construction that includes funded development costs and fees"
   ArgDesc(8) = "Repayment Switch:  A true and false switch when the repayment is in place"
   ArgDesc(9) = "Construction Switch:  This is a switch that is TRUE when the construction funding occures (does not include the development period)"


   Application.MacroOptions _
      Macro:=FuncName, _
      Description:=FuncDesc, _
      Category:=Category, _
      ArgumentDescriptions:=ArgDesc
End Sub


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function Debt_Resolve(Off_Switch, _
               Gearing_Flag, _
               Repay_Code, _
               Debt_Ratio, _
               DSCR, _
               EBITDA_Ar, _
               int_rate_ar, _
               Constr_Ar, _
               Repay_Switch, _
               Constr_Switch, _
               Tax_Rate, _
               Dep_Exp_Ar, _
               Optional up_front_fee, _
               Optional Commit_Fee, _
               Optional Cap_Flag, _
               Optional Fee_Am_Yr, _
               Optional Draw_Code, _
               Optional DSRA_Months, _
               Optional Mnths_Per, _
               Optional Inc_Rate, _
               Optional Tenor, _
               Optional O_Int, _
               Optional O_Mat, _
               Optional Sub_Int, _
               Optional O_Ded) As Variant
Attribute Debt_Resolve.VB_Description = "  This Function Computes Debt Level, IDC, Fees and DSRA to Resolve Circular References\r\rTo use it you should set up the model with a sources and uses map.  This is an Array Function and you must use SHIFT, CNTL ENTER.  Make sure you press the arrow down."
Attribute Debt_Resolve.VB_ProcData.VB_Invoke_Func = " \n7"

debug1 = 0

If Off_Switch = True Then Exit Function

If IsMissing(up_front_fee) Then up_front_fee = 0
If IsMissing(Commit_Fee) Then Commit_Fee = 0
If IsMissing(Capitalise_Switch) Then Capitalise_Switch = False
If IsMissing(Fee_Amort_Period) Then Fee_Amort_Period = 1
If IsMissing(Draw_Code) Then Draw_Code = 1
If IsMissing(months_in_period) Then months_in_period = 1

If IsMissing(DSRA_Input) Then DSRA_Input = 0
If IsMissing(Int_Inc_Rate) Then Int_Inc_Rate = 0
If IsMissing(Oth_Int) Then Oth_Int = 0
If IsMissing(Oth_Mat) Then Oth_Mat = 0
If IsMissing(Sub_Int) Then Sub_Int = 0
If IsMissing(Oth_Ded) Then Oth_Ded = 0
If IsMissing(Tenor) Then Tenor = 10

'
'  Dimension of variables
'
num_periods = int_rate_ar.Count

ReDim amort_rate(num_periods)
ReDim construction_percent(num_periods)
ReDim Repayment_Array(2, num_periods)
ReDim constr_funding(5)

Dim output(3, 3)

'
' Define periods and find the start of the construction period and start of repayement etc.
'

 start_construction = timing(Constr_Switch, Repay_Switch, num_periods, 1)
 end_construction = timing(Constr_Switch, Repay_Switch, num_periods, 2)
 start_repay = timing(Constr_Switch, Repay_Switch, num_periods, 3)
 end_repay = timing(Constr_Switch, Repay_Switch, num_periods, 4)

'
'  Total plant cost for depreciaion
'
  plant_cost = WorksheetFunction.Sum(Constr_Ar)

  For i = 1 To num_periods
    construction_percent(i) = Constr_Ar(i) / plant_cost
  Next i
 
  amort_rate = amort_calc(Mnths_Per, Fee_Am_Yr, start_repay, end_repay, num_periods)

'
'  Make iteration to resolve IDC, fee amortisation and NOL
'

DSRA_fac = dsra_factor(Mnths_Per, Tenor, DSRA_Months, int_rate_ar, Repay_Code, debug1)

If Gearing_Flag = False Then     ' When size the debt according to the DSCR
   Select Case Repay_Code        ' call different functions according to the type of debt sizing
        
        Case 1: commitment = Level_Debt(plant_cost * Debt_Ratio, int_rate_ar, start_repay, end_repay, EBITDA_Ar, amort_rate, _
                                        Tax_Rate, Dep_Exp_Ar, 0, 0, DSCR, plant_cost, debug1)                                    ' don't knkow last debt, IDC or Fees
                         
        Case 2: commitment = Annuity_Debt(plant_coct * Debt_Ratio, int_rate_ar, start_repay, end_repay, EBITDA_Ar, amort_rate, _
                                        Tax_Rate, Dep_Exp_Ar, 0, 0, DSCR, plant_cost, debug1)                                    ' don't knkow last debt, IDC or Fees
        
        Case 3: commitment = initial_sculpt(start_repay, end_repay, int_rate_ar, EBITDA_Ar, Tax_Rate, Dep_Exp_Ar, DSCR)
   End Select
End If
 
'
' Iterate around to correct for taxes, DSRA interest and repayment
'

For iter = 1 To 20

Opening_Debt_Balance = commitment

'
'  Iterate around the calculation of sculpted debt from the end
'

If Gearing_Flag = False Then
   Select Case Repay_Code
        
        Case 1: commitment = Level_Debt(Opening_Debt_Balance, int_rate_ar, start_repay, end_repay, EBITDA_Ar, amort_rate, _
                                          Tax_Rate, Dep_Exp_Ar, Accumulated_IDC, Accumulated_Fees, DSCR, plant_cost, debug1)   ' Re-do with different Debt, IDC, Fees
        
        Case 2: commitment = Annuity_Debt(Opening_Debt_Balance, int_rate_ar, start_repay, end_repay, EBITDA_Ar, amort_rate, _
                                          Tax_Rate, Dep_Exp_Ar, Accumulated_IDC, Accumulated_Fees, DSCR, plant_cost, debug1)  ' Re-do with different Debt, IDC, Fees

        Case 3: commitment = _
                           sculpt_debt(Opening_Debt_Balance, start_repay, end_repay, int_rate_ar, EBITDA_Ar, _
                                          Tax_Rate, Dep_Exp_Ar, DSCR, plant_cost, Accumulated_IDC, Accumulated_Fees, _
                                          amort_rate, Inc_Rate, debug1, num_periods)
   End Select
End If

'
'  Comtpute the debt funding and equity commitment for debt draws
'

Total_Cost = plant_cost + Total_IDC_and_Fees + DSRA  ' Total project cost includes adders

If Gearing_Flag = True Then commitment = Total_Cost * Debt_Ratio

Funding_Commitment = commitment - capitalised_Interest_Fees     ' Funding commitment is debt less capitalisation
Equity_Commitment = Total_Cost - commitment

'
'  Use the for IDC and fees from last iteration and then re-set
'

 constr_funding = Construction_Funding(commitment, Equity_Commitment, Funding_Commitment, start_construction, end_construction, up_front_fee, Commit_Fee, _
                                int_rate_ar, Cap_Flag, Constr_Ar, construction_percent, Draw_Code, DSRA)

 last_adders = Total_IDC_and_Fees

 Total_IDC_and_Fees = constr_funding(1)
 capitalised_Interest_Fees = constr_funding(2)
 Accumulated_IDC = constr_funding(3)
 Accumulated_Fees = constr_funding(4)

'
'   DSRA for Sculpting; can only compute after the debt balance is established
'
   Select Case Repay_Code
        Case 1, 2: DSRA = commitment * DSRA_fac
        Case 3:
            DSRA = dsra_sculpt(commitment, Mnths_Per, Fee_Am_yrs, Dep_Exp_Ar, DSRA_Months, int_rate_ar, plant_cost, Accumulated_IDC, Accumulated_Fees, _
                 Tax_Rate, Int_Inc_Rate, EBITDA_Ar, DSCR, debug1, amort_rate, end_construction, iter)

    End Select

    output(1, 1) = commitment

    output(3, 1) = DSRA
    output(1, 3) = DSRA
    output(2, 1) = Total_IDC_and_Fees + DSRA


difference = last_adders - Total_IDC_and_Fees
If difference < 0 Then difference = 0 - difference

If difference < 0.000001 Then Exit For

Next iter

Debt_Resolve = output

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function timing(Constr_Switch, Repay_Switch, num_periods, code)

For i = 1 To num_periods
    If Constr_Switch(i) = True Then
        start_construction = i
        Exit For
    End If
Next i

For i = 1 To num_periods
    If Constr_Switch(i) = True Then
        end_construction = i
    End If
Next i

For i = 1 To num_periods
    If Repay_Switch(i) = True Then
        start_repay = i
        Exit For
    End If
Next i

For i = 1 To num_periods
    If Repay_Switch(i) = True Then
        end_repay = i
    End If
Next i

If code = 1 Then timing = start_construction
If code = 2 Then timing = end_construction
If code = 3 Then timing = start_repay
If code = 4 Then timing = end_repay


End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function amort_calc(Mnths_Per, Fee_Am_Yr, start_repay, end_repay, num_periods) As Variant

ReDim amort_rate(num_periods)

accum_amort_rate = 0

If Mnths_Per > 0 Then periods_in_year = 12 / Mnths_Per
Fee_Amort_Period = Fee_Am_Yr * periods_in_year

For i = start_repay To end_repay
        amort_rate(i) = 1 / Fee_Amort_Period
        net_amort = 1 - accum_amort_rate
        amort_rate(i) = WorksheetFunction.Min(amort_rate(i), net_amort)
        accum_amort_rate = accum_amort_rate + amort_rate(i)

Next i

amort_calc = amort_rate

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function initial_sculpt(start_repay, end_repay, int_rate_ar, EBITDA_Ar, Tax_Rate, Dep_Exp_Ar, DSCR)

 
'
'  Set variables to zero before the iteration; these variables are changed as the level of debt changes
'

Accumulated_IDC = 0
Accumulated_Fees = 0
capitalised_Interest_Fees = 0
Total_IDC_and_Fees = 0

Discount_Rate_Index = 1
PV_Debt_Service = 0

'
' Preliminary Calculation with no taxes
'

For i = start_repay To end_repay Step 1

    Int_Rate = int_rate_ar(i)

    cfads = EBITDA_Ar(i) * (1 - Tax_Rate) + Dep_Exp_Ar(i) * Tax_Rate

    required_DS = cfads / DSCR
        
    Discount_Rate_Index = Discount_Rate_Index * (1 + Int_Rate)

    PV_Debt_Service = PV_Debt_Service + required_DS / Discount_Rate_Index

Next i

initial_sculpt = PV_Debt_Service


End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Function sculpt_debt(Opening_Debt_Balance, start_repay, end_repay, int_rate_ar, EBITDA_Ar, _
                       Tax_Rate, Dep_Exp_Ar, DSCR, plant_cost, Accumulated_IDC, _
                       Accumulated_Fees, amort_rate, Inc_Rate, debug1, num_periods)

                                          
ReDim Repayment_Array(2, num_periods)
                                          
Discount_Rate_Index = 1
PV_Debt_Service = 0
NOL_Balance = 0

'
' Define Abbreviated Variables
'
    irate = Inc_Rate
    oi = O_Int
    OM = O_Mat
    SI = Sub_Int
    OD = O_Ded
    t = Tax_Rate

For i = start_repay To end_repay Step 1

    EBITDA = EBITDA_Ar(i)
    Int_Rate = int_rate_ar(i)

    Interest_Expense = Opening_Debt_Balance * Int_Rate

'
'  Adjust for IDC depreciation (cause of big problems)
'
    Current_Depreciation_Expense = Dep_Exp_Ar(i)
    dep_rate = Current_Depreciation_Expense / plant_cost
    IDC_dep = Accumulated_IDC * dep_rate
    Fee_Amort = amort_rate(i) * Accumulated_Fees
    Current_Depreciation_Expense = Dep_Exp_Ar(i) + IDC_dep + Fee_Amort

'
'  Compute taxes in first round and then iterate for interest expense and interest income
'
    EBT = EBITDA - Current_Depreciation_Expense - Interest_Expense + interest_income
    
'
' Recompute the tax rate if there are negative taxes
'
    Tax_loss = 0
    NOL_Used = 0

    If (EBT <= 0) Then
        Tax_loss = 0 - EBT
        NOL_Balance = NOL_Balance + Tax_loss
    End If
    
    If (EBT >= 0) Then
        NOL_Used = WorksheetFunction.Min(EBT, NOL_Balance)
        NOL_Balance = NOL_Balance - NOL_Used
    End If
        
    Adjusted_EBT = EBT + Tax_loss - NOL_Used
    
    Taxes_paid = Adjusted_EBT * Tax_Rate
'
' re-compute Adjusted EBT and Effective tax Ra
'
    cfads = EBITDA - Taxes_paid + interest_income
    required_DS = cfads / DSCR

    Discount_Rate_Index = Discount_Rate_Index * (1 + Int_Rate)

    If Discount_Rate_Index > 0 Then PV_Debt_Service = PV_Debt_Service + required_DS / Discount_Rate_Index

    Repayment_Array(1, i) = required_DS - Interest_Expense

    Opening_Debt_Balance = Opening_Debt_Balance - Repayment_Array(1, i)

    If debug1 = 2 Then
       MsgBox " CFADS " & cfads & " Disc Rate Index " & Discount_Rate_Index & _
            Chr(13) & Chr(13) & _
            " Required DS " & required_DS & " Interest " & Interest_Expense & _
            Chr(13) & Chr(13) & _
            " Opening Debt Balance " & Opening_Debt_Balance & " Repayment " & Repayment_Array(1, i)
    End If
Next i

sculpt_debt = PV_Debt_Service

End Function


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Function Construction_Funding(commitment, Equity_Commitment, Funding_Commitment, start_construction, end_construction, up_front_fee, Commit_Fee, _
                                int_rate_ar, Cap_Flag, Constr_Ar, construction_percent, Draw_Code, DSRA) As Variant
                                

Dim output(6)
                    
total_up_front_cap = 0
total_commitment_cap = 0
total_interest_cap = 0
total_up_front = 0
total_commitment = 0
total_interest = 0

Construction_Debt = 0
Accumulated_IDC = 0
Accumulated_Fees = 0
opening_equity_balance = 0
debt_balance = 0

'
'  Loop to find new IDC and fees from new go around of the sculpting
'

For i = start_construction To end_construction Step 1

'
'  Compute up front fee from debt commitment
'
    If i = start_construction Then
        up_front_fee_amount = commitment * up_front_fee
    Else
        up_front_fee_amount = 0
    End If

'
'  Compute commitment fee from undrawn balance
'

undrawn_debt = commitment - Construction_Debt
commitment_fee = undrawn_debt * Commit_Fee

'
'  Interest During Construction
'

Interest_Accrued = Construction_Debt * int_rate_ar(i)

'
' Compute interest and fee paid depending on the interest capitalised switch
'

If Cap_Flag Then
    up_front_fee_capitalised = up_front_fee_amount
    up_front_fee_paid = 0
    
    commitment_fee_capitalised = commitment_fee
    commitment_fee_paid = 0
    
    interest_capitalised = Interest_Accrued
    interest_paid = 0
Else
    up_front_fee_capitalised = 0
    up_front_fee_paid = up_front_fee_amount
    
    commitment_fee_capitalised = 0
    commitment_fee_paid = commitment_fee
    
    interest_capitalised = 0
    interest_paid = Interest_Accrued
End If

'
'  Funding Needs
'
    DSRA_paid = 0
    If i = end_construction Then DSRA_paid = DSRA
                
    funding_needs = Constr_Ar(i) + up_front_fee_paid + _
                    commitment_fee_paid + interest_paid + DSRA_paid

'
'  Pro Rata Funding
'
If Draw_Code = 1 Then
    debt_draws = Funding_Commitment * construction_percent(i)
'
' Equity First
'
ElseIf Draw_Code = 2 Then
    remaining_equity = Equity_Commitment - opening_equity_balance
    equity_funding = WorksheetFunction.Min(remaining_equity, funding_needs)
        
    closing_equity_balance = opening_equity_balance + equity_funding
    debt_draws = funding_needs - equity_funding
'
'  Debt First
'
ElseIf Draw_Code = 3 Then
    remaining_debt = Funding_Commitment - debt_balance
    debt_draws = WorksheetFunction.Min(remaining_debt, funding_needs)
    debt_balance = debt_balance + debt_draws
End If
                
Construction_Debt = Construction_Debt + debt_draws + up_front_fee_capitalised _
                    + interest_capitalised + commitment_fee_capitalised

Accumulated_IDC = Accumulated_IDC + Interest_Accrued
Accumulated_Fees = Accumulated_Fees + commitment_fee + up_front_fee_amount

If debug1 = 1 Then
 MsgBox " Period " & i & "Interest " & Interest_Accrued & " Rate " & int_rate_ar(i) & _
 Chr(13) & Chr(13) & " Accumulated_IDC " & Accumulated_IDC & " Debt " & Construction_Debt & _
 Chr(13) & Chr(13) & " funding needs " & funding_needs & " Constr " & Constr_Ar(i) & _
 Chr(13) & Chr(13) & " Equity Commitmnet " & Equity_Commitment & " remaining " & remaining_equity & _
 Chr(13) & Chr(13) & " total debt draws " & total_draws & " Constr Debt " & Construction_Debt & _
 Chr(13) & Chr(13) & " opening equity balance " & opening_equity_balance & " Closing Equity Balance " & closing_equity_balance & _
 Chr(13) & Chr(13) & " Debt Draws " & debt_draws & " Equity Funding " & equity_funding

End If

'
'  Accumulate Items for total project cost
'

total_up_front_cap = total_up_front_cap + up_front_fee_capitalised
total_commitment_cap = total_commitment_cap + commitment_fee_capitalised
total_interest_cap = total_interest_cap + interest_capitalised

total_up_front = total_up_front + up_front_fee_amount
total_commitment = total_commitment + commitment_fee
total_interest = total_interest + Interest_Accrued
    
opening_equity_balance = closing_equity_balance
           
Next i

Total_IDC_and_Fees = total_up_front + _
                     total_commitment + total_interest

capitalised_Interest_Fees = total_up_front_cap + _
                    total_commitment_cap + total_interest_cap

output(1) = Total_IDC_and_Fees
output(2) = capitalised_Interest_Fees
output(3) = Accumulated_IDC
output(4) = Accumulated_Fees




Construction_Funding = output

End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function dsra_sculpt(commitment, Mnths_Per, Fee_Am_yrs, Dep_Exp_Ar, DSRA_Months, int_rate_ar, plant_cost, total_interest, total_fees, _
             Tax_Rate, Int_Inc_Rate, EBITDA_Ar, DSCR, debug1, amort_rate, end_construction, iter)

    debt_bal = commitment

    tot_interest = 0
    tot_repayment = 0
    NOL_Balance = 0

'
' Compute the DSRA factor
'

If Mnths_Per > 0 Then periods_in_year = 12 / Mnths_Per
Fee_amortisation_period = Fee_Am_yrs * periods_in_year

total_months = DSRA_Months * Mnths_Per

    For i = 1 To total_months
                                
        Int_Rate = int_rate_ar(i + end_construction)
                                                                                                                                                  
        If plant_cost > 0 Then depreciation_rate = Dep_Exp_Ar(i + end_construction) / plant_cost
                         
        idc_depreciation = total_interest * depreciation_rate
                        
        fee_amortisation = (total_fees) * amort_rate(i + end_construction)
        
        EBIT = EBITDA_Ar(i + end_construction) - Dep_Exp_Ar(i + end_construction) - idc_depreciation - fee_amortisation
        
        interest1 = debt_bal * Int_Rate
                          
        EBT = EBIT - interest1
        
        NOL_created = 0
        NOL_Used = 0
        
        If EBT < 0 Then
            NOL_created = 0 - EBT
            NOL_Balance = NOL_Balance + NOL_created
        End If
                
        If EBT > 0 Then
            NOL_Used = WorksheetFunction.Min(NOL_Balance, EBT)
            NOL_Balance = NOL_Balance - NOL_Used
        End If
                
        Adjusted_EBT = EBT + NOL_created - NOL_Used
        
        tax = Adjusted_EBT * Tax_Rate
                                
'        int_income = DSRA_bal * Int_Inc_Rate
        
        int_income = 0
        
        cfads = EBITDA_Ar(i + end_construction) - tax + int_income
                                
        required_DS = cfads / DSCR
                                
        interest1 = debt_bal * Int_Rate
        repay1 = required_DS - interest1
        
        debt_bal = debt_bal - repay1
        
        tot_interest = tot_interest + interest1
        tot_repayment = tot_repayment + repay1
                                
        If iter = 100 Then MsgBox "EBITDA " & Format(EBITDA_Ar(i + end_construction), "##.00") & " tax " & Format(tax, "##.00") & Chr(13) & Chr(13) & _
                    " Interest " & Format(interest1, "##.00") & " repay " & Format(repay1, "##.00") & Chr(13) & Chr(13) & _
                    " NOL Balance " & Format(NOL_Balance, "##.00") & " Adjusted_EBT " & Format(Adjusted_EBT, "##.00") & Chr(13) & Chr(13) & _
                    " Depreciation " & Format(Dep_Exp_Ar(i + end_construction), "##.00") & " EBT " & Format(EBT, "##.00")

    Next i

    If debt_bal > 0 Then DSRA_fac = (tot_repayment + tot_interest) / debt_bal

    If debug1 = 4 Then
            MsgBox "DSRA factor " & Format(DSRA_fac, "##.000%") & Chr(13) & Chr(13) & _
                    " Total Months " & Format(total_months, "00.00") & Chr(13) & Chr(13) & _
                    " Interest Rate " & Format(Int_Rate, "##.000%") & Chr(13) & Chr(13) & _
                    " CFADS " & Format(cfads, "00.00") & Chr(13) & Chr(13) & _
                    " Required_DS " & Format(required_DS, "00.00") & Chr(13) & Chr(13) & _
                    " Starting Debt " & Format(commitment, "##.00") & Chr(13) & Chr(13) & _
                    " Tax " & Format(tax, "##.00") & Chr(13) & Chr(13) & _
                    " EBIT " & Format(EBT, "##.00") & Chr(13) & Chr(13) & _
                    " Total Interest " & Format(total_interest, "00.00") & Chr(13) & Chr(13) & _
                    " IDC Depreciation " & Format(idc_depreciation, "00.00") & Chr(13) & Chr(13) & _
                    " Fee Amoritsation " & Format(fee_amortisation, "##.0000") & Chr(13) & Chr(13) & _
                    " Fee Amort Rate " & Format(amort_rate(100), "##.0000") & Chr(13) & Chr(13) & _
                    " total_fees " & Format(total_fees, "##.0000") & Chr(13) & Chr(13) & _
                    " DSRA Amount " & Format(tot_interest + tot_repayment, "### ###.00") & Chr(13) & Chr(13) & _
                    " Total Repayment " & Format(tot_repayment, "00.00") & Chr(13) & Chr(13)

    End If

    DSRA = tot_repayment + tot_interest

    dsra_sculpt = DSRA

End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function dsra_factor(months_in_period, debt_tenor, DSRA_Months, interest_rate, repayment_code, debug1)

tot_interest = 0
tot_repayment = 0
debt_bal = 1

periods_in_year = 12 / months_in_period
debt_tenor_periods = debt_tenor * periods_in_year

total_months = DSRA_Months * months_in_period

    For i = 1 To total_months
        Int_Rate = interest_rate(i + construction_periods)
        
        If repayment_code = 1 Then
            repay1 = 1 / debt_tenor_periods
        End If
    
        If repayment_code = 2 Then
            repay1 = WorksheetFunction.PPmt(Int_Rate, i, debt_tenor_periods, -1)
        End If
                
        interest = debt_bal * Int_Rate
        debt_bal = debt_bal - repay1
        
        tot_interest = tot_interest + interest
        tot_repayment = tot_repayment + repay1
    Next i

    dsra_factor = (tot_interest + tot_repayment)

    If debug1 = 1 Then
            MsgBox "DSRA factor " & Format(dsra_factor, "00.00%") & Chr(13) & Chr(13) & _
                    " Total Months " & Format(total_months, "00.00") & Chr(13) & Chr(13) & _
                    " Interest Rate " & Format(Int_Rate, "00.00") & Chr(13) & Chr(13) & _
                    " Debt Tenor " & Format(debt_tenor_periods, "00.00") & Chr(13) & Chr(13) & _
                    " Total Interest " & Format(tot_interest, "00.00%") & Chr(13) & Chr(13) & _
                    " Total Repayment " & Format(tot_repayment, "00.00%") & Chr(13) & Chr(13)

    End If

End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Function Level_Debt(Opening_Debt_Balance, int_rate_ar, start_repay, end_repay, EBITDA_Ar, amort_rate, _
                         Tax_Rate, Dep_Exp_Ar, Accumulated_IDC, Accumulated_Fees, DSCR, plant_cost, debug1)

Base_Debt_Balance = Opening_Debt_Balance

term = end_repay - start_repay + 1

min_DSCR = 100000000

NOL_Balance = 0
Period = 0

For i = start_repay To end_repay Step 1

    Period = Period + 1
    
    EBITDA = EBITDA_Ar(i)
    Int_Rate = int_rate_ar(i)

    Interest_Expense = Opening_Debt_Balance * Int_Rate
    interest_income = 0

'
'  Adjust for IDC depreciation (cause of big problems)
'
    Current_Depreciation_Expense = Dep_Exp_Ar(i)
    dep_rate = Current_Depreciation_Expense / plant_cost
    IDC_dep = Accumulated_IDC * dep_rate
    Fee_Amort = amort_rate(i) * Accumulated_Fees
    Current_Depreciation_Expense = Dep_Exp_Ar(i) + IDC_dep + Fee_Amort

'
'  Compute taxes in first round and then iterate for interest expense and interest income
'
    EBT = EBITDA - Current_Depreciation_Expense - Interest_Expense + interest_income
'
' Recompute the tax rate if there are negative taxes
'
    Tax_loss = 0
    NOL_Used = 0

    If (EBT <= 0) Then
        Tax_loss = 0 - EBT
        NOL_Balance = NOL_Balance + Tax_loss
    End If
    
    If (EBT >= 0) Then
        NOL_Used = WorksheetFunction.Min(EBT, NOL_Balance)
        NOL_Balance = NOL_Balance - NOL_Used
    End If
        
    Adjusted_EBT = EBT + Tax_loss - NOL_Used
    
    Taxes_paid = Adjusted_EBT * Tax_Rate
'
' re-compute Adjusted EBT and Effective tax Ra
'
    cfads = EBITDA - Taxes_paid + interest_income
    
    Level_Repay = Base_Debt_Balance / term
        
    Debt_Service = Interest_Expense + Level_Repay
    
    If (Debt_Service > 0) Then
        If Debt_Service > 0 Then DSCR_Period = cfads / Debt_Service
    Else: DSCR_Period = 10
    End If
    
    If DSCR_Period < min_DSCR Then
        min_DSCR = DSCR_Period
        min_yr = Period
        min_CFADS = cfads
        int_rate_min = Int_Rate
    End If
        
    Opening_Debt_Balance = Opening_Debt_Balance - Level_Repay

    If debug1 = 5 And i = 100 Then
         MsgBox " CFADS " & Format(cfads, "##.00") & " Level Repay " & Format(Level_Repay, "##.00") & _
                 Chr(13) & Chr(13) & _
                " DSCR " & Format(DSCR, "##.00") & " Interest " & Format(Interest_Expense, "##.00") & _
                Chr(13) & Chr(13) & _
                " Opening Debt Balance " & Format(Opening_Debt_Balance, "##.00") & " Min DSCR " & Format(min_DSCR, "##.00")
    End If

Next i    ' Finish of loop around the years


factor1 = min_CFADS / DSCR
factor2 = (int_rate_min * (term - min_yr + 1) + 1) / term

factor = factor1 / factor2

debt_balance = factor

Level_Debt = debt_balance

End Function


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function Annuity_Debt(Opening_Debt_Balance, int_rate_ar, start_repay, end_repay, EBITDA_Ar, amort_rate, _
                            Tax_Rate, Dep_Exp_Ar, Accumulated_IDC, Accumulated_Fees, DSCR, plant_cost, debug1)

commitment = Opening_Debt_Balance

NOL_Balance = 0
Period = start_repay

min_DSCR = 100000000

term = end_repay - start_repay + 1

For i = start_repay To end_repay Step 1

    time_period = i - start_repay + 1

    Period = Period + 1
    
    EBITDA = EBITDA_Ar(i)
    Int_Rate = int_rate_ar(i)

    Interest_Expense = Opening_Debt_Balance * Int_Rate
'
'  Adjust for IDC depreciation (cause of big problems)
'
    Current_Depreciation_Expense = Dep_Exp_Ar(i)
    dep_rate = Current_Depreciation_Expense / plant_cost
    IDC_dep = Accumulated_IDC * dep_rate
    Fee_Amort = amort_rate(i) * Accumulated_Fees
    Current_Depreciation_Expense = Dep_Exp_Ar(i) + IDC_dep + Fee_Amort

'
'  Compute taxes in first round and then iterate for interest expense and interest income
'
    EBT = EBITDA - Current_Depreciation_Expense - Interest_Expense + interest_income
'
' Recompute the tax rate if there are negative taxes
'
    Tax_loss = 0
    NOL_Used = 0

    If (EBT <= 0) Then
        Tax_loss = 0 - EBT
        NOL_Balance = NOL_Balance + Tax_loss
    End If
    
    If (EBT >= 0) Then
        NOL_Used = WorksheetFunction.Min(EBT, NOL_Balance)
        NOL_Balance = NOL_Balance - NOL_Used
    End If
        
    Adjusted_EBT = EBT + Tax_loss - NOL_Used
    
    Taxes_paid = Adjusted_EBT * Tax_Rate
'
' re-compute Adjusted EBT and Effective tax Ra
'
    cfads = EBITDA - Taxes_paid + interest_income
        
    
'    If (Period < term) Then Annuity_Repay = WorksheetFunction.PPmt(Int_Rate, time_period, term, -commitment)
                
'    Debt_Service = Interest_Expense + Annuity_Repay
    
    If (i < term) Then Debt_Service = WorksheetFunction.Pmt(Int_Rate, term, -commitment)
    
    Annuity_Repay = Debt_Service - Interest_Expense
    
    If (Debt_Service > 0) Then
        DSCR_Period = cfads / Debt_Service
    Else: DSCR_Period = 10
    End If
    
    If DSCR_Period < min_DSCR Then
        min_DSCR = DSCR_Period
        min_yr = time_period
        min_CFADS = cfads
        int_rate_min = Int_Rate
    End If
        
    Opening_Debt_Balance = Opening_Debt_Balance - Annuity_Repay

    If debug1 = 5 And min_DSCR = DSCR_Period Then
         test = MsgBox( _
                " Period " & Period & " DSCR Period " & Format(DSCR_Period, "##.00") & Chr(13) & Chr(13) & _
                " CFADS " & Format(cfads, "00.000") & " Annuity Repay " & Format(Annuity_Repay, "##.00") & Chr(13) & Chr(13) & _
                " Target DSCR " & Format(DSCR, "##.00") & " Debt Service " & Format(Debt_Service, "##.00") & Chr(13) & Chr(13) & _
                " Adjusted EBT " & Format(EBT, "##.00") & " Interest " & Format(Interest_Expense, "##.00") & Chr(13) & Chr(13) & _
                " Dep 1 " & Format(Current_Depreciation_Expense, "##.00") & " Commitment " & Format(commitment, "##.00") & Chr(13) & Chr(13) & _
                " EBITDA " & Format(EBITDA, "##.00") & " Taxes " & Format(Taxes_paid, "##.00") & Chr(13) & Chr(13) & _
                " Opening Debt Balance " & Format(Opening_Debt_Balance, "##.00") & " Min DSCR " & Format(min_DSCR, "##.00"), vbAbortRetryIgnore)
                
                                
'        MsgBox "test " & test
                                
        If test = 3 Then debug1 = 0
                        
    End If

Next i    ' Finish of loop around the years

factor1 = min_CFADS / DSCR
factor2 = WorksheetFunction.Pmt(int_rate_min, term, -1)

If factor2 > 0 Then factor = factor1 / factor2

debt_balance = factor

Annuity_Debt = debt_balance

End Function

Attribute VB_Name = "Module5"
Sub DebtSize()
Attribute DebtSize.VB_ProcData.VB_Invoke_Func = " \n14"
'
' DebtSize Macro
'

'
End Sub
Sub IDCFees()
Attribute IDCFees.VB_ProcData.VB_Invoke_Func = " \n14"
'
' IDCFees Macro
'

'
Iteration = 0

While Range("Diff1") <> 0
Iteration = Iteration + 1
Application.StatusBar = "Iteration " & Iteration
    Range("Fixed1") = Range("Calc")
Wend

End Sub
Sub Calc1()
Attribute Calc1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Calc Macro
'

'
    Calculate
End Sub
Attribute VB_Name = "Module6"
Sub custom()
Attribute custom.VB_ProcData.VB_Invoke_Func = " \n14"
'
' custom Macro
'
If Range("scenario") > 3 Then Exit Sub

current_sheet = ActiveSheet.Name
Sheets("Master Scenario").Select

Select Case Range("scenario")

'
  Case 1:
    Range("base_case").Select
  Case 2:
    Range("low_case").Select
  Case 3:
    Range("high_case").Select
    
End Select
    
    Selection.Copy
    Range("unadjusted").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    Range("Adjusted").Select
    Selection.Copy
    Range("Spinner").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

Application.CutCopyMode = False


end1:
Sheets(current_sheet).Select

End Sub
Sub custom_test()
If Range("scenario") <> 18 Then
  MsgBox "Must be set to custom case to have an effect "
  Exit Sub
End If
End Sub
Sub Macro4()
Attribute Macro4.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro4 Macro
'

'
    ActiveWorkbook.Save
End Sub
Sub fix_debt()
Attribute fix_debt.VB_ProcData.VB_Invoke_Func = " \n14"
'
' fix_debt Macro
'
current_sheet = ActiveSheet.Name
current_cell = ActiveCell.Address

sheet_ = Range("sheet_")

Sheets(sheet_).Select

' If Range("structuring_flag") = False Then

'
    Range("fixed_debt") = Range("func_debt")
    Range("fixed_dsra") = Range("func_dsra")
    Range("fixed_adj") = Range("func_sub")
    Range("fixed_equity") = Range("func_equity")
    
    Range("base_constr") = Range("construction")
     
    Range("start_copy").Select
    Range(Selection, Selection.End(xlToRight)).Select
    Selection.Copy
    Range("fixed_comp").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
               
   Application.CutCopyMode = False
      
' End If

Sheets(current_sheet).Select
Range(current_cell).Activate

End Sub

Sub Macro8()
Attribute Macro8.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro8 Macro
'

'
    Range("J281").Select
    Range(Selection, Selection.End(xlToRight)).Select
    Selection.Copy
    Range("J279").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Range("J279").Select
End Sub

Sub test_copy()


   Range("computed_repay").Select
   Selection.Copy
   Range("fixed_comp").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
     
   Application.CutCopyMode = False
      

End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{CCBACBCB-416A-4F36-884E-ADD81B592B47}{8B6B2AD9-6E0D-4C18-8839-CEC151244ABC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub TextBox1_Change()

End Sub


INQUEST-PP=macro
