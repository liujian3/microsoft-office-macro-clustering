Attribute VB_Name = "Foglio1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Rem by Marco Gualmini

Attribute VB_Name = "Foglio2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub Visualizzatore_OptionButton1_Click()
    Range("TabellaBeniServizi").Select
    With Selection
        .WrapText = False
    End With
    Selection.Rows.AutoFit
End Sub

Sub Visualizzatore_OptionButton2_Click()
    Range("TabellaBeniServizi").Select
    With Selection
        .WrapText = True
    End With
    Selection.Rows.AutoFit

End Sub

Rem by Marco Gualmini

Attribute VB_Name = "Foglio3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Rem by Marco Gualmini

Attribute VB_Name = "Modulo1"
Option Explicit


Sub Auto_open()

[Stato].Value = ""

End Sub



Rem by Marco Gualmini

Attribute VB_Name = "Modulo2"
Option Explicit

Global NomeFileXml


Rem procedura di importazione dei documenti - by Marco Gualmini

Sub Importa()

 Dim MinimoPerBollo As Double
 MinimoPerBollo = 77.47
 
 Dim DimMatrici As Single
 DimMatrici = 200
 
 Dim NomeFile() As String
 Dim urlfile() As String
 Dim ProgressivoInvio() As String
 Dim ProgressivoDuplicato() As Boolean
 Dim FormatoTrasmissione() As String
 Dim CodiceDestinatario() As String
 Dim PECDestinatario() As String
 Dim NumeroDocumento() As String
 Dim TipoDocumento() As String
 Dim DataDocumento() As String
 Dim DivisaDocumento() As String
 Dim ImportoTotaleDocumento() As Double
 Dim ImportoContributoCassa() As Double
 Dim ImportoRitenuta() As Double
 Dim ImportoBollo() As Double
 Dim DenominazioneCedente() As String
 Dim AnagraficaCessionario() As String
 Dim CfCedente() As String
 Dim PivaCedente() As String
 Dim CfCessionario() As String
 Dim PivaCessionario() As String
 Dim Causale() As String
 Dim report As String
 
 Dim Natura1() As Double
 Dim Natura2() As Double
 Dim Natura3() As Double
 Dim Natura4() As Double
 Dim Natura5() As Double
 Dim Natura6() As Double
 Dim Natura7() As Double
 Dim CondizioniPagamento() As String
 Dim ModalitaPagamento() As String
 Dim Imponibile1() As Double
 Dim Imponibile2() As Double
 Dim Imponibile3() As Double
 Dim Imponibile4() As Double
 Dim Imposta1() As Double
 Dim Imposta2() As Double
 Dim Imposta3() As Double
 Dim Imposta4() As Double
 
 Dim Natura1S As Boolean
 Dim Natura2S As Boolean
 Dim Natura3S As Boolean
 Dim Natura4S As Boolean
 Dim Natura5S As Boolean
 Dim Natura6S As Boolean
 Dim Natura7S As Boolean
 
 Dim Aliquota As String
 Dim Aliquota1 As String
 Dim Aliquota2 As String
 Dim Aliquota3 As String
 Dim Aliquota4 As String
 
 Dim Imponibile As Double
 Dim Imposta As Double
 Dim superoAliquote As Boolean
 Dim superoNature As Boolean

 Dim document   As Object
 Dim dispatcher As Object
 Dim file_dialog As Object
 
 Dim TotFile As Integer
 Dim cFattura As Long
 Dim file_n As Long
 Dim TotaleCalcolatoT As Double
 
 Dim NomeFileT As String
 Dim filename As Variant
 Dim filterNames(1) As String
 Dim fullfile As String
 Dim nomefoglio As String
 Dim precNumDoc As String
 
 Dim DatiGenerali As String
 Dim DatiGeneraliDocumento As String
 Dim TipoDocumentoT As String
            
 Dim FormatoTrasmissioneT  As String
 Dim CedentePrestatore As String
 Dim DatiAnagrafici As String
 Dim CessionarioCommittente As String
 Dim DenominazioneCedenteT As String
 Dim AnagraficaCessionarioT As String
 Dim DatiPagamento As String
 Dim TotaleCalcolato As String
 Dim PECDestinatarioT As String
 Dim CfCedenteT As String
 Dim PivaCedenteT As String
 Dim CfCessionarioT As String
 Dim PivaCessionarioT As String
 
 Dim tempoInizio As Date
 Dim Completamento As Integer
 Dim Completamento1 As Integer
 Dim ConteggioFile As Integer
 Dim ConteggioFileUtili As Integer
 Dim UnaFattura As Variant
 Dim segno As Integer
 Dim ProgressivoInvioT As String
 Dim CodiceDestinatarioT As String
 
 Dim DatiRitenuta As Variant
 Dim DatiCassaPrevidenziale As Variant
 Dim DatiRiepilogo As Variant
 Dim n As Variant

 Dim UrlT As String
 Dim Md5T As String
 Dim Sha256T As String
 Dim col As Integer
 Dim riga As Long
 Dim L As String
  
 Dim cr As String
 cr = Chr(10) ' ritorno a capo


Rem chiede i file da caricare
 Dim fileobj As filedialog
 Set fileobj = Application.filedialog(msoFileDialogFilePicker)
 With fileobj
    .AllowMultiSelect = True
    .Filters.Clear
    .Filters.Add "File fatture elettroniche (XML, P7M)", "*.xml, *.p7m"
    .Filters.Add "Tutti i file", "*.*"
    .FilterIndex = 1
    If .Show = 0 Then Exit Sub
 End With
 Set file_dialog = fileobj.SelectedItems

 TotFile = file_dialog.Count

 tempoInizio = Now
 cFattura = 0
 
 [Stato].Value = "Caricamento file ....."
 
 ReDim Preserve ProgressivoDuplicato(1)
 ReDim Preserve ProgressivoInvio(1)
 
Rem analizza i file uno alla volta
 For Each filename In file_dialog
    
    fullfile = aprifile(filename)
    
    NomeFileT = Dir(filename)
    ConteggioFile = ConteggioFile + 1

    FormatoTrasmissioneT = getTagCont(fullfile, "FormatoTrasmissione")(0)
    If FormatoTrasmissioneT <> "" Then

        ConteggioFileUtili = ConteggioFileUtili + 1
        ProgressivoInvioT = getTagCont(fullfile, "ProgressivoInvio")(0)
        FormatoTrasmissioneT = getTagCont(fullfile, "FormatoTrasmissione")(0)
        CodiceDestinatarioT = getTagCont(fullfile, "CodiceDestinatario")(0)
        PECDestinatarioT = getTagCont(fullfile, "PECDestinatario")(0)
        CedentePrestatore = getTagCont(fullfile, "CedentePrestatore")(0)
        
        For n = 0 To ConteggioFileUtili  ' controlla se ci sono duplicati nel codice progressivo
            If ProgressivoInvio(n) = ProgressivoInvioT Then
                ProgressivoDuplicato(cFattura) = True
                ProgressivoDuplicato(n) = True
               Exit For
            End If
        Next


        DatiAnagrafici = getTagCont(CedentePrestatore, "DatiAnagrafici")(0)
        DenominazioneCedenteT = getTagCont(DatiAnagrafici, "Denominazione")(0)

        If DenominazioneCedenteT = "" Then
            DenominazioneCedenteT = getTagCont(DatiAnagrafici, "Nome")(0) & " " & getTagCont(DatiAnagrafici, "Cognome")(0)

            If getTagCont(DatiAnagrafici, "Titolo")(0) <> "" Then
                DenominazioneCedenteT = getTagCont(DatiAnagrafici, "Titolo")(0) & " " & DenominazioneCedenteT
            End If
        End If
        CfCedenteT = getTagCont(DatiAnagrafici, "CodiceFiscale")(0)
        PivaCedenteT = getTagCont(DatiAnagrafici, "IdCodice")(0)
        
        CessionarioCommittente = getTagCont(fullfile, "CessionarioCommittente")(0)
        
        DatiAnagrafici = getTagCont(CessionarioCommittente, "DatiAnagrafici")(0)
        AnagraficaCessionarioT = getTagCont(DatiAnagrafici, "Denominazione")(0)
        If AnagraficaCessionarioT = "" Then
            AnagraficaCessionarioT = getTagCont(DatiAnagrafici, "Nome")(0) & " " & getTagCont(DatiAnagrafici, "Cognome")(0)

            If getTagCont(DatiAnagrafici, "Titolo")(0) <> "" Then
                AnagraficaCessionarioT = getTagCont(DatiAnagrafici, "Titolo")(0) & " " & AnagraficaCessionarioT
            End If
        End If
        CfCessionarioT = getTagCont(DatiAnagrafici, "CodiceFiscale")(0)
        PivaCessionarioT = getTagCont(DatiAnagrafici, "IdCodice")(0)


        For Each UnaFattura In getTagCont(fullfile, "FatturaElettronicaBody")  ' analizza ogni fattura in un file
        
            If cFattura = 0 Or cFattura > DimMatrici / 100 * 90 Then ' ridimensiona le matrici al limite della capacit|fffd|
                DimMatrici = DimMatrici * 2
                [Stato].Value = "Caricamento file " & Completamento & "% (Ridimensionamento matrice) ....."
                ReDim Preserve NomeFile(DimMatrici)
                ReDim Preserve urlfile(DimMatrici)
                ReDim Preserve ProgressivoInvio(DimMatrici)
                ReDim Preserve ProgressivoDuplicato(DimMatrici)
                ReDim Preserve FormatoTrasmissione(DimMatrici)
                ReDim Preserve CodiceDestinatario(DimMatrici)
                ReDim Preserve PECDestinatario(DimMatrici)
                ReDim Preserve NumeroDocumento(DimMatrici)
                ReDim Preserve TipoDocumento(DimMatrici)
                ReDim Preserve DataDocumento(DimMatrici)
                ReDim Preserve DivisaDocumento(DimMatrici)
                ReDim Preserve ImportoTotaleDocumento(DimMatrici)
                ReDim Preserve ImportoContributoCassa(DimMatrici)
                ReDim Preserve ImportoRitenuta(DimMatrici)
                ReDim Preserve ImportoBollo(DimMatrici)
                ReDim Preserve DenominazioneCedente(DimMatrici)
                ReDim Preserve CfCedente(DimMatrici)
                ReDim Preserve PivaCedente(DimMatrici)
                ReDim Preserve AnagraficaCessionario(DimMatrici)
                ReDim Preserve CfCessionario(DimMatrici)
                ReDim Preserve PivaCessionario(DimMatrici)
                ReDim Preserve Causale(DimMatrici)
                ReDim Preserve CondizioniPagamento(DimMatrici)
                ReDim Preserve ModalitaPagamento(DimMatrici)
                ReDim Preserve Natura1(DimMatrici)
                ReDim Preserve Natura2(DimMatrici)
                ReDim Preserve Natura3(DimMatrici)
                ReDim Preserve Natura4(DimMatrici)
                ReDim Preserve Natura5(DimMatrici)
                ReDim Preserve Natura6(DimMatrici)
                ReDim Preserve Natura7(DimMatrici)
                ReDim Preserve Imponibile1(DimMatrici)
                ReDim Preserve Imponibile2(DimMatrici)
                ReDim Preserve Imponibile3(DimMatrici)
                ReDim Preserve Imponibile4(DimMatrici)
                ReDim Preserve Imposta1(DimMatrici)
                ReDim Preserve Imposta2(DimMatrici)
                ReDim Preserve Imposta3(DimMatrici)
                ReDim Preserve Imposta4(DimMatrici)

            End If
            
            DatiGenerali = getTagCont(UnaFattura, "DatiGenerali")(0)
            DatiGeneraliDocumento = getTagCont(DatiGenerali, "DatiGeneraliDocumento")(0)

            TipoDocumentoT = getTagCont(DatiGeneraliDocumento, "TipoDocumento")(0)
       
            If TipoDocumentoT = "TD04" Then
                segno = -1
            Else
                segno = 1
            End If
        
            NomeFile(cFattura) = NomeFileT
            urlfile(cFattura) = filename
            ProgressivoInvio(cFattura) = ProgressivoInvioT
            FormatoTrasmissione(cFattura) = FormatoTrasmissioneT
            TipoDocumento(cFattura) = TipoDocumentoT
            CfCedente(cFattura) = CfCedenteT
            PivaCedente(cFattura) = PivaCedenteT
            CfCessionario(cFattura) = CfCessionarioT
            PivaCessionario(cFattura) = PivaCessionarioT
            CodiceDestinatario(cFattura) = CodiceDestinatarioT
            PECDestinatario(cFattura) = PECDestinatarioT
            NumeroDocumento(cFattura) = getTagCont(DatiGeneraliDocumento, "Numero")(0)
            DataDocumento(cFattura) = getTagCont(DatiGeneraliDocumento, "Data")(0)
            DivisaDocumento(cFattura) = getTagCont(DatiGeneraliDocumento, "Divisa")(0)
            ImportoTotaleDocumento(cFattura) = Val(getTagCont(DatiGeneraliDocumento, "ImportoTotaleDocumento")(0)) * segno
            ImportoBollo(cFattura) = Val(getTagCont(DatiGeneraliDocumento, "ImportoBollo")(0))
            DenominazioneCedente(cFattura) = DenominazioneCedenteT
            AnagraficaCessionario(cFattura) = AnagraficaCessionarioT
            Causale(cFattura) = getTagCont(DatiGeneraliDocumento, "Causale")(0)
            DatiPagamento = getTagCont(UnaFattura, "DatiPagamento")(0)
            CondizioniPagamento(cFattura) = getTagCont(DatiPagamento, "CondizioniPagamento")(0)
            ModalitaPagamento(cFattura) = getTagCont(DatiPagamento, "ModalitaPagamento")(0)
      
            For Each DatiCassaPrevidenziale In getTagCont(DatiGeneraliDocumento, "DatiCassaPrevidenziale")
                ImportoContributoCassa(cFattura) = ImportoContributoCassa(cFattura) + Val(getTagCont(DatiCassaPrevidenziale, "ImportoContributoCassa")(0)) * segno
            Next
      
            For Each DatiRitenuta In getTagCont(DatiGeneraliDocumento, "DatiRitenuta")
                ImportoRitenuta(cFattura) = ImportoRitenuta(cFattura) + Val(getTagCont(DatiRitenuta, "ImportoRitenuta")(0)) * segno
            Next
            TotaleCalcolatoT = 0
            For Each DatiRiepilogo In getTagCont(UnaFattura, "DatiRiepilogo")  ' analizza i dati di riepilogo multipli
            
                Aliquota = getTagCont(DatiRiepilogo, "AliquotaIVA")(0)
                Imponibile = Val(getTagCont(DatiRiepilogo, "ImponibileImporto")(0)) * segno
                Imposta = Val(getTagCont(DatiRiepilogo, "Imposta")(0)) * segno
                
            If Aliquota = "0.00" Then
                    Select Case getTagCont(DatiRiepilogo, "Natura")(0)
                        Case "N1"
                            Natura1(cFattura) = Natura1(cFattura) + Imponibile
                            Natura1S = True
                        Case "N2"
                            Natura2(cFattura) = Natura2(cFattura) + Imponibile
                            Natura2S = True
                        Case "N3"
                            Natura3(cFattura) = Natura3(cFattura) + Imponibile
                            Natura3S = True
                        Case "N4"
                            Natura4(cFattura) = Natura4(cFattura) + Imponibile
                            Natura4S = True
                        Case "N5"
                            Natura5(cFattura) = Natura5(cFattura) + Imponibile
                            Natura5S = True
                        Case "N6"
                            Natura6(cFattura) = Natura6(cFattura) + Imponibile
                            Natura6S = True
                        Case "N7"
                            Natura7(cFattura) = Natura7(cFattura) + Imponibile
                            Natura7S = True
                        Case Else
                            superoNature = True
                    End Select
                    Else
                        If Aliquota = Aliquota1 Or Aliquota1 = "" Then
                        Aliquota1 = Aliquota
                        Imponibile1(cFattura) = Imponibile1(cFattura) + Imponibile
                        Imposta1(cFattura) = Imposta1(cFattura) + Imposta
                        Else
                            If Aliquota = Aliquota2 Or Aliquota2 = "" Then
                            Aliquota2 = Aliquota
                            Imponibile2(cFattura) = Imponibile2(cFattura) + Imponibile
                            Imposta2(cFattura) = Imposta2(cFattura) + Imposta
                            Else
                                If Aliquota = Aliquota3 Or Aliquota3 = "" Then
                                Aliquota3 = Aliquota
                                Imponibile3(cFattura) = Imponibile3(cFattura) + Imponibile
                                Imposta3(cFattura) = Imposta3(cFattura) + Imposta
                                Else
                                If Aliquota = Aliquota4 Or Aliquota4 = "" Then
                                    Aliquota4 = Aliquota
                                    Imponibile4(cFattura) = Imponibile4(cFattura) + Imponibile
                                    Imposta4(cFattura) = Imposta4(cFattura) + Imposta
                                Else
                                    superoAliquote = 1
                                End If
                            End If
                        End If
                    End If
                End If
            Next
            cFattura = cFattura + 1
        Next
    End If
    
    Rem visualizza percentuale avanzamento
    Completamento = Round(ConteggioFile / (TotFile) * 100, 1)
    If Completamento <> Completamento1 And Completamento <= 100 Then
        [Stato].Value = "Caricamento file " & Completamento & "% ....."
        Completamento1 = Completamento
    End If
 Next

 If cFattura = 0 Then
    Call MsgBox("Nessuna fattura |fffd| stata trovata all'interno dei file selezionati", vbExclamation)
    [Stato].Value = ""
    Exit Sub
 End If
 

Rem crea il nuovo foglio
 nomefoglio = Format(Now, "dd-MM-yyyy hh-mm-ss")
 Application.Sheets.Add(, Sheets(3)).Name = nomefoglio
 riga = 1
 col = 1
 
 
Rem riga di intestazione
 ThisWorkbook.Worksheets(nomefoglio).Rows(1).Font.Bold = True ' grassetto nel titolo
 ThisWorkbook.Worksheets(nomefoglio).Columns(1).ColumnWidth = 25 ' larghezza colonna nome file

 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "File XML"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Formato" & cr & "trasmissione"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Progressivo" & cr & "invio"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Codice destinatario"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Tipo documento"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Numero"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Data"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Divisa"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Importo totale"
 col = col + 1
 If Aliquota1 <> "" Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Imponibile Aliquota " & cr & Aliquota1
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Imposta Aliquota " & cr & Aliquota1
    col = col + 1
 End If
 If Aliquota2 <> "" Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Imponibile Aliquota " & cr & Aliquota2
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Imposta Aliquota " & cr & Aliquota2
    col = col + 1
 End If
 If Aliquota3 <> "" Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Imponibile Aliquota " & cr & Aliquota3
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Imposta Aliquota " & cr & Aliquota3
    col = col + 1
 End If
If Aliquota4 <> "" Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Imponibile Aliquota " & cr & Aliquota4
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Imposta Aliquota " & cr & Aliquota4
    col = col + 1
 End If
  If Natura1S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "N1 Escluse"
    col = col + 1
 End If
 If Natura2S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "N2 Non soggette"
    col = col + 1
 End If
 If Natura3S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "N3 Non imponibili"
    col = col + 1
 End If
 If Natura4S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "N4 Esenti"
    col = col + 1
 End If
 If Natura5S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "N5 Regime margine"
    col = col + 1
 End If
 If Natura6S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "N6 Inversione contabile"
    col = col + 1
 End If
 If Natura7S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "N7 Estero"
    col = col + 1
 End If
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Cassa" & cr & "previdenziale"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Importo" & cr & "ritenuta"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Importo" & cr & "marca bollo"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Condizioni" & cr & "pagamento"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Modalit|fffd|" & cr & "pagamento"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Cedente"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "C.F. Cedente"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "P.iva. Cedente"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Cessionario"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "C.F. Cessionario"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "P.iva. Cessionario"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Causale"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Hash MD5"
 col = col + 1
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "Hash SHA-256"


Rem stampa la tabella
 Completamento = 0
 
 For n = 0 To cFattura - 1
    riga = riga + 1
    col = 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = urlfile(n)
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = FormatoTrasmissione(n)
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).NumberFormat = "@" ' formato cella a testo
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = ProgressivoInvio(n)
    If ProgressivoDuplicato(n) Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("Il progressivo |fffd| usato anche in altri documenti della tabella")
    End If
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).NumberFormat = "@"
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = CodiceDestinatario(n)
    If testCodiceDestinatario(CodiceDestinatario(n), FormatoTrasmissione(n)) = 0 Then
         ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("Il codice destinatario |fffd| errato per il formato del documento")
    End If
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = DescTipoDocumento(TipoDocumento(n))
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).NumberFormat = "@"
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = NumeroDocumento(n)
    
    If IsNumeric(NumeroDocumento(n)) Then
        If Abs(Val(NumeroDocumento(n)) - Val(precNumDoc)) <> 1 And precNumDoc <> "" Then
            ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("Discontinuit|fffd| nella sequenza numerica")
        End If
        precNumDoc = NumeroDocumento(n)
    End If
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = DataDocumento(n)
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).EntireColumn.AutoFit
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = DivisaDocumento(n)
    col = col + 1
    TotaleCalcolato = Imponibile1(n) + Imposta1(n) + Imponibile2(n) + Imposta2(n) + Imponibile3(n) + Imposta3(n) + Natura1(n) + Natura2(n) + Natura3(n) + Natura4(n) + Natura5(n) + Natura6(n) + Natura7(n)
    If TipoDocumento(n) = "TD04" Then TotaleCalcolato = 0 - TotaleCalcolato  'inverte segno importo se nota di credito
    If ImportoTotaleDocumento(n) <> TotaleCalcolato Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("Il totale dichiarato differisce da quello calcolato (" & TotaleCalcolato & ")") ' segnala anomalia nel totale documento
    End If
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = ImportoTotaleDocumento(n)
    col = col + 1

    If Aliquota1 <> "" Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Imponibile1(n)
        col = col + 1
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Imposta1(n)
        If Imposta1(n) <> Round(Imponibile1(n) * Val(Aliquota1) / 100, 2) Then
            ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("L'imposta non corrisponde al calcola dell'aliquota " & Round(Imponibile1(n) * Val(Aliquota1) / 100, 2))
        End If
        col = col + 1
     End If
    If Aliquota2 <> "" Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Imponibile2(n)
        col = col + 1
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Imposta2(n)
        If Imposta2(n) <> Round(Imponibile2(n) * Val(Aliquota2) / 100, 2) Then
            ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("L'imposta non corrisponde al calcola dell'aliquota " & Round(Imponibile2(n) * Val(Aliquota2) / 100, 2))
        End If
        col = col + 1
    End If
    If Aliquota3 <> "" Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Imponibile3(n)
        col = col + 1
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Imposta3(n)
        If Imposta3(n) <> Round(Imponibile3(n) * Val(Aliquota3) / 100, 2) Then
            ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("L'imposta non corrisponde al calcola dell'aliquota " & Round(Imponibile3(n) * Val(Aliquota3) / 100, 2))
        End If
        col = col + 1
    End If
    If Aliquota4 <> "" Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Imponibile4(n)
        col = col + 1
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Imposta4(n)
        If Imposta4(n) <> Round(Imponibile4(n) * Val(Aliquota4) / 100, 2) Then
            ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("L'imposta non corrisponde al calcola dell'aliquota " & Round(Imponibile4(n) * Val(Aliquota4) / 100, 2))
        End If
        col = col + 1
    End If

    If Natura1S Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Natura1(n)
        col = col + 1
    End If
    If Natura2S Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Natura2(n)
        col = col + 1
    End If
    If Natura3S Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Natura3(n)
        col = col + 1
    End If
    If Natura4S Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Natura4(n)
        col = col + 1
    End If
    If Natura5S Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Natura5(n)
        col = col + 1
    End If
    If Natura6S Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Natura6(n)
        col = col + 1
    End If
    If Natura7S Then
        ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Natura7(n)
        col = col + 1
    End If
    
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = ImportoContributoCassa(n)
    col = col + 1

    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = ImportoRitenuta(n)
    col = col + 1
        
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = ImportoBollo(n)
    If ImportoBollo(n) = 0 And TotaleCalcolato > MinimoPerBollo And (Imposta1(n) + Imposta2(n) + Imposta2(n)) = 0 Then
         ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("L'imposta di bollo |fffd| a zero mentre potrebbe essere dovuta")
    End If

    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = DescCondizioniPagamento(CondizioniPagamento(n))
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = DescModalitaPagamento(ModalitaPagamento(n))
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Uesc(DenominazioneCedente(n))
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).NumberFormat = "@"
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = CfCedente(n)
    If test_cf(CfCedente(n)) = 0 Then
         ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("Codice fiscale errato")
    End If
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).NumberFormat = "@"
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = PivaCedente(n)
    If test_cf(PivaCedente(n)) = 0 Then
         ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("Partita iva errata")
    End If
    col = col + 1
    
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Uesc(AnagraficaCessionario(n))
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).NumberFormat = "@"
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = CfCessionario(n)
    If test_cf(CfCessionario(n)) = 0 Then
         ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("Codice fiscale errato")
    End If
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).NumberFormat = "@"
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = PivaCessionario(n)
    If CodiceDestinatario(n) <> "XXXXXXX" And test_cf(PivaCessionario(n)) = 0 Then
         ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).AddComment ("Partita iva errata")
    End If
    col = col + 1
    
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = Uesc(Causale(n))
    col = col + 1

    Completamento = Round(n / cFattura * 100, 0) ' visualizza percentuale avanzamento
    If Completamento <> Completamento1 And Completamento <= 100 Then
        [Stato].Value = "Generazione tabella " & Completamento & "% ....."
        Completamento1 = Completamento
    End If
 Next


Rem calcola Hash
 UrlT = ""
 [Stato].Value = "Calcolo hash ....."
 For n = 0 To cFattura - 1
    If urlfile(n) <> UrlT Then
        Md5T = FileToMD5(urlfile(n))
        Sha256T = FileToSHA256(urlfile(n))
        UrlT = urlfile(n)
    End If
    ThisWorkbook.Worksheets(nomefoglio).Cells(n + 2, col).Value = Md5T
    ThisWorkbook.Worksheets(nomefoglio).Cells(n + 2, col + 1).Value = Sha256T
 Next
 col = col + 1

    
 [Stato].Value = "Completamento ....."

Rem stampa la riga totali
 col = 1
 riga = riga + 1
 
 ThisWorkbook.Worksheets(nomefoglio).Rows(riga).Font.Bold = True ' grassetto nei totali

 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Value = "TOTALI:" ' sotto nome file
 col = col + 1
 L = Chr(col + 64)
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=countA(" & L & "2:" & L & riga - 1 & ")" ' sotto formato
 col = col + 1
 'progressivo invio
  col = col + 1
 'codice destinatario
 col = col + 1
 'tipo doc
 col = col + 1
 'Numero
 col = col + 1
 'data
 col = col + 1
 'Divisa
 col = col + 1
 
 If Aliquota1 <> "" Then
    L = Chr(col + 64)
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
 End If
 
 If Aliquota2 <> "" Then
    L = Chr(col + 64)
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
    L = Chr(col + 64)
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
 End If
 If Aliquota3 <> "" Then
    L = Chr(col + 64)
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
    L = Chr(col + 64)
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
 End If
 If Aliquota4 <> "" Then
    L = Chr(col + 64)
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
    L = Chr(col + 64)
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
 End If
 L = Chr(col + 64)
 If Natura1S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
 End If
 L = Chr(col + 64)
 If Natura2S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
 End If
 L = Chr(col + 64)
 If Natura3S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
 End If
 L = Chr(col + 64)
 If Natura4S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
 End If
 L = Chr(col + 64)
 If Natura5S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
 End If
 L = Chr(col + 64)
 If Natura6S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
 End If
 L = Chr(col + 64)
 If Natura7S Then
    ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
    col = col + 1
 End If

 L = Chr(col + 64)
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
 col = col + 1

 L = Chr(col + 64)
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
 col = col + 1
 L = Chr(col + 64)
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
 col = col + 1
 L = Chr(col + 64)
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga, col).Formula = "=sum(" & L & "2:" & L & riga - 1 & ")"
 col = col + 1
 
Rem allinea a destra nome file
 ThisWorkbook.Worksheets(nomefoglio).Range(Cells(1, 1), Cells(riga, 1)).HorizontalAlignment = xlRight


Rem setta formato numeri decimali
 ThisWorkbook.Worksheets(nomefoglio).Range(Cells(1, 9), Cells(riga, col)).NumberFormat = "0.00"


Rem aggiunge filtro automatico all'intestazione
 ThisWorkbook.Worksheets(nomefoglio).Range("A1").Select
 Selection.AutoFilter



Rem prepara il comando di esportazione PDF
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga + 2, 1).Value = "Esporta tutti i documenti in PDF"
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga + 2, 1).Font.Color = vbBlue

 ThisWorkbook.Worksheets(nomefoglio).Cells(riga + 4, 1).Value = "Compara con le ricevute telematiche di invio"
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga + 4, 1).Font.Color = vbBlue

 ThisWorkbook.Worksheets(nomefoglio).Cells(riga + 6, 1).Value = "Compara con metadati dei documenti ricevuti"
 ThisWorkbook.Worksheets(nomefoglio).Cells(riga + 6, 1).Font.Color = vbBlue
 
 [Stato].Value = ""


Rem stampa report
 report = "Analizzati n. " & ConteggioFile + 0 & " file, di cui n. " & ConteggioFileUtili + 0 & " contenenti un totale di " & cFattura + 0 & " documenti validi " & vbCrLf
 report = report & "Tabella di analisi riportata nel foglio " & nomefoglio & vbCrLf
 report = report & "Tempo impiegato: " & Int((Now - tempoInizio) * 100000) & " secondi"
 
 Call aggiornaReport(report)
   
 If superoAliquote Then MsgBox ("Nei documenti sono presenti pi|fffd| aliquote iva di quelle visualizzabili in tabella.")
 If superoNature Then MsgBox ("Il documento " & getTagCont(DatiGeneraliDocumento, "Numero")(0) & " contiene imponibili senza iva ma senza specificazione di natura")

End Sub


Rem estrae occorrenze di dati del tag specificato

Function getTagCont(txt As Variant, tag As String) As Variant

 Dim r() As String
 Dim n As Integer
 Dim m As Object
 Dim x As Variant
 Dim regex As Object
 Set regex = CreateObject("VBScript.RegExp")
 With regex
 .Global = True
 .Ignorecase = True
 .Pattern = "<" & tag & ">((.|\n)*?)</" & tag & ">"
 End With

 n = 0
 If regex.test(txt) = True Then
    Set m = regex.Execute(txt)
    ReDim Preserve r(m.Count - 1)
    For Each x In m
        r(n) = x.submatches(0)
        n = n + 1
    Next
 Else
    ReDim r(0)
    r(0) = ""
 End If
 getTagCont = r

End Function

Function aprifile(url)

 Dim fullfile As String

 If Dir(url) = "" Then
        Call MsgBox("ERRORE: Il file " & url & " non esiste. Potrebbe essere stato rinominato, spostato o cancellato. Oppure alterato il suo riferimento in tabella.", vbCritical)
        Exit Function
 End If
    
 Open url For Binary As #1
 fullfile = Input(LOF(1), #1)
 Close #1
    
    
 Dim RE As Object
 Set RE = CreateObject("vbscript.regexp")
 With RE
    .MultiLine = True
    .Global = True
 End With
    
    
 If LCase(Right(url, 4)) = ".p7m" Then  ' se il file |fffd| firmato P7M rimuove catatteri non ascii
 
    If InStr(fullfile, "<?xml") = 0 Then 'se il P7M ha firma integrale non si decodifica
        Call MsgBox("Il file " & url & " contiene un tipo di firma che non |fffd| decodificabile dall'applicazione. Occorre prima estrarre l'XML dal file P7M per procedere all'apertura.", vbCritical)
    End If
 
' header composto come segue (specifiche ASN.1 / BER):
' 1|fffd| byte 0x04  fisso di start
' 2|fffd| byte < 128 indica la dimensione del blocco dati. Fine header
' se invece il byte ha il bit pi|fffd| significativo settato (>= 128) indica con i bit meno significativi quanti dei byte (n) che seguono indicano la dimensione del blocco dati
' n byte - presenti solo se il 2|fffd| byte |fffd| >= 128

    RE.Pattern = "[\u0004][\x01-\x7F]"
    fullfile = RE.Replace(fullfile, "")
    
    RE.Pattern = "[\u0004]" & Chr(129) & "."
    fullfile = RE.Replace(fullfile, "")
    
    RE.Pattern = "[\u0004]" & Chr(130) & ".."
    fullfile = RE.Replace(fullfile, "")
    
    RE.Pattern = "[\u0004]" & Chr(131) & "..."
    fullfile = RE.Replace(fullfile, "")

 End If
 
 ' toglie eventuali argomenti dai tag
 RE.Pattern = "<(\w+)\s+.*?>"
 fullfile = RE.Replace(fullfile, "<$1>")

 aprifile = fullfile

End Function


Rem by Marco Gualmini


Rem stampa report
Sub aggiornaReport(report As String)

 If [MsgReport].Value = "" Then
    [MsgReport].Value = Now() & vbCrLf & report
 Else
    [MsgReport].Value = Now() & vbCrLf & report & vbCrLf & "-------------" & vbCrLf & [MsgReport].Value
 End If
   
End Sub


Rem by Marco Gualmini

Attribute VB_Name = "Modulo3"
Option Explicit
 
Rem visualizza anteprima fattura nell'apposito foglio


Function Anteprima(file As String, numdoc As String, datadoc As Double)

 Dim fullfile As String
 Dim Fattura As String
 Dim DatiGenerali As String
 Dim DatiGeneraliDocumento As String
 Dim Divisa As String
 Dim Causale As String
 Dim IdTrasmittente As String
 Dim CodiceDestinatario As String
 Dim PECDestinatario As String
 Dim DenominazioneCedente As String
 Dim DenominazioneCessionario As String
 Dim DatiPagamento As String
 Dim AliquotaCassa As String
 Dim ImportoCassa As Single
 
 Dim CedentePrestatore As String
 Dim DatiAnagraficiCedente As String
 Dim CessionarioCommittente As String
 Dim DatiAnagraficiCessionario As String
 Dim DatiRitenuta As String
 Dim DatiCassaPrevidenziale As String
 Dim Allegati As Variant
 
 Dim TotaleCalcolato As Currency
 Dim TotaleDocumentoDich As Currency
 Dim TScMa As Currency
 
 Dim Dettagliopagamento As Variant
 Dim ModalitaPagamento As String
 Dim ModalitaPagamentoT As String
 Dim IstitutoFinanziario As String
 Dim IstitutoFinanziarioT As String
 Dim IBAN As String
 Dim IBANT As String
 Dim Beneficiario As String
 Dim BeneficiarioT As String
 Dim CodicePagamento As String
 Dim CodicePagamentoT As String
 Dim totPagamento As Currency

 Dim ScontoMaggiorazione As String
 Dim DatiBeniServizi As String
 Dim PrimaRiga As Integer
 Dim RigheTabella As Integer
 Dim UltimaRiga As Integer
 Dim RighePresenti As Integer
 
 Dim f As Variant
 Dim c As Variant
 Dim m As Variant
 Dim n As Variant
 Dim v As Variant
 Dim BS As Variant
 Dim AI As Variant
 Dim SM As Variant
 Dim CP As Variant
 
 Dim nddt As Integer
 Dim nart As Long
 Dim DDT(2000) As String
 Dim DDTG(2000) As String
 Dim FineDDT(2000) As String
 
 Dim nomefoglio As String
 
 nomefoglio = "Visualizzatore"
 
 fullfile = aprifile(file)
 If fullfile = "" Then
    Anteprima = -1
    Exit Function
 End If
 
 
Rem scrive i dati nel foglio "Visualizzatore"

 CodiceDestinatario = getTagCont(fullfile, "CodiceDestinatario")(0)
 PECDestinatario = getTagCont(fullfile, "PECDestinatario")(0)
 If CodiceDestinatario = "0000000" And PECDestinatario <> "" Then CodiceDestinatario = PECDestinatario

 Worksheets(nomefoglio).Hyperlinks.Add anchor:=Worksheets(nomefoglio).Range("NomeFile"), Address:=file, TextToDisplay:=Dir(file), ScreenTip:="Cliccare per aprire il file originale"  ' iperlink al file
 ThisWorkbook.Worksheets(nomefoglio).Range("NomeFile").ClearComments
 If Not testNomeFile(Dir(file)) Then
    ThisWorkbook.Worksheets(nomefoglio).Range("NomeFile").AddComment ("Il nome del file non |fffd| conforme alle specifiche tecniche")
    ThisWorkbook.Worksheets(nomefoglio).Range("NomeFile").Comment.Visible = True
 End If
 
 
 [ProgressivoInvio].Value = "Progressivo invio: " & DescTipoDocumento((getTagCont(fullfile, "ProgressivoInvio")(0)))
 ThisWorkbook.Worksheets(nomefoglio).Range("CodiceDestinatario").Value = CodiceDestinatario

 IdTrasmittente = getTagCont(fullfile, "IdTrasmittente")(0)
 [Trasmittente].Value = "Trasmittente: " & getTagCont(IdTrasmittente, "IdPaese")(0) & " " & getTagCont(IdTrasmittente, "IdCodice")(0)

Rem dati specifici documento

 If numdoc <> "" Then
    Fattura = ""
    For Each f In getTagCont(fullfile, "FatturaElettronicaBody")  ' carica tutte le fatture in un file
    
        If getTagCont(f, "Numero")(0) = numdoc And (datadoc = 0 Or Format(datadoc, "yyyy-mm-dd") = getTagCont(f, "Data")(0)) Then
            Fattura = f
        End If
    Next
 Else
    Fattura = getTagCont(fullfile, "FatturaElettronicaBody")(0)
 End If

 If Fattura = "" Then
    Call MsgBox("ERRORE: Documento non trovato all'interno del file. Potrebbe essere stato modificato il numero in tabella.", vbCritical)
    Anteprima = -1
    Exit Function
 End If

 DatiGenerali = getTagCont(Fattura, "DatiGenerali")(0)  ' estrae la fattura definita
 DatiGeneraliDocumento = getTagCont(DatiGenerali, "DatiGeneraliDocumento")(0)
 
 TotaleDocumentoDich = Val(getTagCont(DatiGeneraliDocumento, "ImportoTotaleDocumento")(0))
 Divisa = getTagCont(DatiGeneraliDocumento, "Divisa")(0)
 
 ThisWorkbook.Worksheets(nomefoglio).Range("TipoDocumento").Value = DescTipoDocumento(getTagCont(DatiGeneraliDocumento, "TipoDocumento")(0))
 [DataDocumento].Value = formatoData(getTagCont(DatiGeneraliDocumento, "Data")(0))
 [NumeroDocumento].Value = getTagCont(DatiGeneraliDocumento, "Numero")(0)
 [Valuta].Value = getTagCont(DatiGeneraliDocumento, "Divisa")(0)

Rem Art 73
 If getTagCont(DatiGeneraliDocumento, "Art73")(0) = "SI" Then
     [NotaArt73].Value = "Doc. emesso Ex. Art 73 DL 633/72"
 Else
     [NotaArt73].Value = ""
 End If
 
Rem causale
 Causale = ""
 For Each c In getTagCont(DatiGeneraliDocumento, "Causale")
    Causale = Causale & c & vbCrLf
 Next
 
 ThisWorkbook.Worksheets(nomefoglio).Range("Causale").Value = Uesc(Causale)


Rem Dati cedente
 CedentePrestatore = getTagCont(fullfile, "CedentePrestatore")(0)
 DatiAnagraficiCedente = getTagCont(CedentePrestatore, "DatiAnagrafici")(0)
 DenominazioneCedente = getTagCont(DatiAnagraficiCedente, "Denominazione")(0)
 If DenominazioneCedente = "" Then
    DenominazioneCedente = getTagCont(DatiAnagraficiCedente, "Nome")(0) & " " & getTagCont(DatiAnagraficiCedente, "Cognome")(0)

    If getTagCont(DatiAnagraficiCedente, "Titolo")(0) <> "" Then
        DenominazioneCedente = getTagCont(DatiAnagraficiCedente, "Titolo")(0) & " " & DenominazioneCedente
    End If
 End If

 [RiferimentoAmministrazione].Value = getTagCont(CedentePrestatore, "RiferimentoAmministrazione")(0)
 [CedenteDenominazione].Value = Uesc(DenominazioneCedente)
 [CedenteIndirizzo].Value = Uesc(getTagCont(CedentePrestatore, "Indirizzo")(0)) & " " & getTagCont(CedentePrestatore, "NumeroCivico")(0)
 [CedenteComune].Value = getTagCont(CedentePrestatore, "CAP")(0) & " " & Uesc(getTagCont(CedentePrestatore, "Comune")(0)) & " " & getTagCont(CedentePrestatore, "Provincia")(0)
 [CedenteCf].Value = "C.F.: " & getTagCont(CedentePrestatore, "CodiceFiscale")(0)
 [CedentePiva].Value = "P.I: " & getTagCont(CedentePrestatore, "IdPaese")(0) & " " & getTagCont(CedentePrestatore, "IdCodice")(0)
 [CedenteContatti].Value = getTagCont(CedentePrestatore, "Email")(0) & " " & getTagCont(CedentePrestatore, "Telefono")(0)
 [CedenteRegimeFiscale].Value = "Regime fiscale: " & DescRegimeFiscale(getTagCont(CedentePrestatore, "RegimeFiscale")(0))
 
 ThisWorkbook.Worksheets(nomefoglio).Range("CedenteCf").ClearComments
 If test_cf(getTagCont(CedentePrestatore, "CodiceFiscale")(0)) = False Then
    ThisWorkbook.Worksheets(nomefoglio).Range("CedenteCf").AddComment ("Il codice fiscale del cedente non |fffd| corretto")
    ThisWorkbook.Worksheets(nomefoglio).Range("CedenteCf").Comment.Visible = True
 End If
 ThisWorkbook.Worksheets(nomefoglio).Range("CedentePiva").ClearComments
 If test_piva_it(getTagCont(CedentePrestatore, "IdCodice")(0)) = False Then
    ThisWorkbook.Worksheets(nomefoglio).Range("CedentePiva").AddComment ("La partita iva del cedente non |fffd| corretta")
    ThisWorkbook.Worksheets(nomefoglio).Range("CedentePiva").Comment.Visible = True
 End If


Rem dati cessionario
 CessionarioCommittente = getTagCont(fullfile, "CessionarioCommittente")(0)
 DatiAnagraficiCessionario = getTagCont(CessionarioCommittente, "DatiAnagrafici")(0)
 DenominazioneCessionario = getTagCont(DatiAnagraficiCessionario, "Denominazione")(0)
 If DenominazioneCessionario = "" Then
    DenominazioneCessionario = getTagCont(DatiAnagraficiCessionario, "Nome")(0) & " " & getTagCont(DatiAnagraficiCessionario, "Cognome")(0)

    If getTagCont(DatiAnagraficiCessionario, "Titolo")(0) <> "" Then
        DenominazioneCessionario = getTagCont(DatiAnagraficiCessionario, "Titolo")(0) & " " & DenominazioneCessionario
    End If
 End If

 [CessionarioDenominazione].Value = Uesc(DenominazioneCessionario)
 [CessionarioIndirizzo].Value = Uesc(getTagCont(CessionarioCommittente, "Indirizzo")(0)) & " " & getTagCont(CessionarioCommittente, "NumeroCivico")(0)
 If getTagCont(CessionarioCommittente, "Nazione")(0) = "IT" Then
    [CessionarioComune].Value = getTagCont(CessionarioCommittente, "CAP")(0) & " " & Uesc(getTagCont(CessionarioCommittente, "Comune")(0)) & " " & getTagCont(CessionarioCommittente, "Provincia")(0)
 Else
    [CessionarioComune].Value = getTagCont(CessionarioCommittente, "CAP")(0) & " " & Uesc(getTagCont(CessionarioCommittente, "Comune")(0)) & " (" & getTagCont(CessionarioCommittente, "Nazione")(0) & ")"
 End If
 [CessionarioCf].Value = "C.F.: " & getTagCont(CessionarioCommittente, "CodiceFiscale")(0)
 [CessionarioPiva].Value = "P.I: " & getTagCont(CessionarioCommittente, "IdPaese")(0) & " " & getTagCont(CessionarioCommittente, "IdCodice")(0)
 [CessionarioContatti].Value = getTagCont(CessionarioCommittente, "Email")(0) & " " & getTagCont(CessionarioCommittente, "Telefono")(0)


 ThisWorkbook.Worksheets(nomefoglio).Range("CessionarioCf").ClearComments
 If test_cf(getTagCont(CessionarioCommittente, "CodiceFiscale")(0)) = False Then
    ThisWorkbook.Worksheets(nomefoglio).Range("CessionarioCf").AddComment ("Il codice fiscale del cliente non |fffd| corretto")
    ThisWorkbook.Worksheets(nomefoglio).Range("CessionarioCf").Comment.Visible = True
 End If
 ThisWorkbook.Worksheets(nomefoglio).Range("CessionarioPiva").ClearComments
 If test_piva_it(getTagCont(CessionarioCommittente, "IdCodice")(0)) = False Then
    ThisWorkbook.Worksheets(nomefoglio).Range("CessionarioPiva").AddComment ("La partita iva del cliente non |fffd| corretta")
    ThisWorkbook.Worksheets(nomefoglio).Range("CessionarioPiva").Comment.Visible = True
 End If


Rem carica elenco DDT
 nddt = 0
 For Each v In getTagCont(DatiGenerali, "DatiDDT")
    If v = "" Then Exit For
    If getTagCont(v, "RiferimentoNumeroLinea")(0) = "" Then         ' DDT riferiti al documento generale (senza n.linea)
        DDTG(nddt) = "  --- Rif. D.D.T. n. " & getTagCont(v, "NumeroDDT")(0) & " del " & formatoData(getTagCont(v, "DataDDT")(0)) & " ---"
    Else
        DDT(Val(getTagCont(v, "RiferimentoNumeroLinea")(0))) = " --- Rif. D.D.T. n. " & getTagCont(v, "NumeroDDT")(0) & " del " & formatoData(getTagCont(v, "DataDDT")(0)) & " ---"
        FineDDT(getTagCont(v, "RiferimentoNumeroLinea")(UBound(getTagCont(v, "RiferimentoNumeroLinea")))) = "1"        ' determina l'ultima riga a cui si riferisce il ddt
    End If
    nddt = nddt + 1
 Next




Rem tabella beni e servizi
 Const MinRighe = 20

 DatiBeniServizi = getTagCont(Fattura, "DatiBeniServizi")(0)

 PrimaRiga = ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(1, 1).Row
 RigheTabella = ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Rows.Count
 UltimaRiga = PrimaRiga + RigheTabella
 RighePresenti = UBound(getTagCont(DatiBeniServizi, "DettaglioLinee")) + nddt * 2 + 2 ' calcola le righe della tabella: numero articoli + numero ddt + riga vuota dopo ddt + qualche riga vuota alla fine


 If RighePresenti > RigheTabella Then  ' espande il numero di righe se necessario
    ThisWorkbook.Worksheets(nomefoglio).Rows(UltimaRiga - 1 & ":" & PrimaRiga + RighePresenti - 2).Insert shift:=xlShiftDown, copyorigin:=xlFormatFromLeftOrAbove
    RigheTabella = RighePresenti
'   MsgBox ("La tabella beni/servizi |fffd| stata espansa per visualizzare pi|fffd| di 20 voci. La stampa potrebbe richiedere pi|fffd| pagine.")
 End If
 
 If RighePresenti < RigheTabella And RigheTabella > MinRighe Then ' riduce il numero di righe a (minimo) MinRighe
    If RighePresenti < MinRighe Then RighePresenti = MinRighe
    ThisWorkbook.Worksheets(nomefoglio).Rows(PrimaRiga & ":" & PrimaRiga + RigheTabella - RighePresenti - 1).Delete shift:=xlShiftUp
    UltimaRiga = PrimaRiga + RighePresenti
 End If

 [TabellaBeniServizi].ClearContents
  
 n = 1 ' conteggio riga posizione di visualizzazione
 nart = 1 ' conteggio riga articolo
 
  ' visualizza DDT generali (non riferiti a righe specifiche)
 For Each v In DDTG
    If v <> "" Then
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 2).Value = v
        n = n + 1
    End If
 Next
 
 For Each BS In getTagCont(DatiBeniServizi, "DettaglioLinee")
    If n > RigheTabella Then
        Call MsgBox("Errore interno: Non possono essere visualizzati tutti gli articoli presenti", vbCritical)
        Exit For
    End If
    
    If DDT(nart) <> "" Then
        ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 2).Value = DDT(nart)
        n = n + 1
    End If
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 1).NumberFormat = "@"
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 1).Value = getTagCont(BS, "CodiceValore")(0)
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 2).NumberFormat = "@"
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 2).Value = Uesc(getTagCont(BS, "Descrizione")(0))
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 3).Value = Uesc(getTagCont(BS, "UnitaMisura")(0)) & " " & getTagCont(BS, "Quantita")(0)
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 4).Value = getTagCont(BS, "PrezzoUnitario")(0)
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 4).NumberFormat = "0.00"
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 5).Value = getTagCont(BS, "PrezzoTotale")(0)
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 5).NumberFormat = "0.00"
    If getTagCont(BS, "AliquotaIVA")(0) = "0.00" Then
        ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 6).Value = "0 " & getTagCont(BS, "Natura")(0)
    Else
        ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 6).Value = getTagCont(BS, "AliquotaIVA")(0)
    End If
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 6).HorizontalAlignment = xlRight
    
    ScontoMaggiorazione = getTagCont(BS, "ScontoMaggiorazione")(0)
    If ScontoMaggiorazione <> "" Then
        If getTagCont(ScontoMaggiorazione, "Tipo")(0) = "SC" Then
            ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 7).Value = -Val(getTagCont(ScontoMaggiorazione, "Percentuale")(0))
        Else
            ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 7).Value = (getTagCont(ScontoMaggiorazione, "Percentuale")(0))
        End If
    Else
        ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 7).Value = ""
    End If
    n = n + 1
    
    If FineDDT(nart) <> "" Then ' aggiunge riga vuota alla fine del blocco riferito dal DDT
        n = n + 1
    End If

    nart = nart + 1
 Next
 
  ' visualizza eventuali DDT riferiti a linee non esistenti
 For m = nart To UBound(DDT)
    If DDT(m) <> "" Then
        ThisWorkbook.Worksheets(nomefoglio).Range("TabellaBeniServizi").Cells(n, 2).Value = DDT(m)
        n = n + 1
    End If
 Next



Rem Dati riepilogo
 Const MinRighe2 = 2
 
 PrimaRiga = ThisWorkbook.Worksheets(nomefoglio).Range("TabellaAliquoteIva").Cells(1, 1).Row
 RigheTabella = ThisWorkbook.Worksheets(nomefoglio).Range("TabellaAliquoteIva").Rows.Count
 UltimaRiga = PrimaRiga + RigheTabella
 RighePresenti = UBound(getTagCont(DatiBeniServizi, "DatiRiepilogo")) + 1
  
 If RighePresenti > RigheTabella Then  ' espande la tabella aliquote se necessario
    ThisWorkbook.Worksheets(nomefoglio).Rows(UltimaRiga - 1 & ":" & PrimaRiga + RighePresenti - 2).Insert shift:=xlShiftDown, copyorigin:=xlFormatFromLeftOrAbove
    RigheTabella = RighePresenti
 End If
 
 If RighePresenti < RigheTabella And RigheTabella > MinRighe2 Then ' riduce il numero di righe a (minimo) MinRighe2
    If RighePresenti < MinRighe2 Then RighePresenti = MinRighe2
    ThisWorkbook.Worksheets(nomefoglio).Rows(PrimaRiga & ":" & PrimaRiga + RigheTabella - RighePresenti - 1).Delete shift:=xlShiftUp
    UltimaRiga = PrimaRiga + RighePresenti
 End If

 [TabellaAliquoteIva].ClearContents
 
 TotaleCalcolato = 0
 n = 1 ' prima riga aliquote
 For Each AI In getTagCont(DatiBeniServizi, "DatiRiepilogo")
     If n > RigheTabella Then
        Call MsgBox("Errore interno: non possono essere visualizzate tutte le aliquote IVA.", vbCritical)
        Exit For
    End If
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaAliquoteIva").Cells(n, 1).Value = getTagCont(AI, "AliquotaIVA")(0)
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaAliquoteIva").Cells(n, 2).Value = getTagCont(AI, "RiferimentoNormativo")(0)
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaAliquoteIva").Cells(n, 3).Value = getTagCont(AI, "Natura")(0)
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaAliquoteIva").Cells(n, 4).Value = getTagCont(AI, "EsigibilitaIVA")(0)
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaAliquoteIva").Cells(n, 5).Value = getTagCont(AI, "ImponibileImporto")(0)
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaAliquoteIva").Cells(n, 5).NumberFormat = "0.00"
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaAliquoteIva").Cells(n, 6).Value = getTagCont(AI, "Imposta")(0)
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaAliquoteIva").Cells(n, 6).NumberFormat = "0.00"
    ThisWorkbook.Worksheets(nomefoglio).Range("TabellaAliquoteIva").Cells(n, 7).Value = getTagCont(AI, "Arrotondamento")(0)
    n = n + 1
    TotaleCalcolato = TotaleCalcolato + Val(getTagCont(AI, "ImponibileImporto")(0)) + Val(getTagCont(AI, "Imposta")(0))
 Next
 
 

Rem Dati ritenuta d'acconto
 DatiRitenuta = getTagCont(DatiGeneraliDocumento, "DatiRitenuta")(0)
 If DatiRitenuta <> "" Then
    [AliquotaRitenuta].Value = getTagCont(DatiRitenuta, "AliquotaRitenuta")(0) & "%"
    [ImportoRitenuta].Value = getTagCont(DatiRitenuta, "ImportoRitenuta")(0)
 Else
    [AliquotaRitenuta].Value = ""
    [ImportoRitenuta].Value = 0
 End If
  
Rem Dati cassa previdenziale|fffd|
 AliquotaCassa = ""
 ImportoCassa = 0
 For Each CP In getTagCont(DatiGeneraliDocumento, "DatiCassaPrevidenziale")
    If getTagCont(CP, "AlCassa")(0) <> "" Then
        AliquotaCassa = AliquotaCassa & getTagCont(CP, "AlCassa")(0) & "% "
        ImportoCassa = ImportoCassa + Val(getTagCont(CP, "ImportoContributoCassa")(0))
    End If
 Next
 ThisWorkbook.Worksheets(nomefoglio).Range("AliquotaCassa").Value = AliquotaCassa
 ThisWorkbook.Worksheets(nomefoglio).Range("ImportoCassa").Value = ImportoCassa
 
 
 Rem Sconto / Maggiorazione
 TScMa = 0
 For Each SM In getTagCont(DatiGeneraliDocumento, "ScontoMaggiorazione")
    If getTagCont(SM, "Tipo")(0) = "SC" Then
        TScMa = TScMa - Val(getTagCont(SM, "Importo")(0))
    Else
        TScMa = TScMa + Val(getTagCont(SM, "Importo")(0))
    End If
    [ImportoScMag].Value = TScMa
 Next


Rem totale
 ThisWorkbook.Worksheets(nomefoglio).Range("TotaleDocumento").Value = TotaleDocumentoDich
 ThisWorkbook.Worksheets(nomefoglio).Range("TotaleDocumento").ClearComments
 If TotaleDocumentoDich <> TotaleCalcolato Then
    ThisWorkbook.Worksheets(nomefoglio).Range("TotaleDocumento").AddComment ("Il totale dichiarato differisce da quello calcolato (" & TotaleCalcolato & ")")
    ThisWorkbook.Worksheets(nomefoglio).Range("TotaleDocumento").Comment.Visible = True
 End If
 
 Rem Bollo
 If getTagCont(DatiGeneraliDocumento, "BolloVirtuale")(0) = "SI" Then
     [ImpostaBollo].Value = "Imposta di bollo assolta virtualmente " & Divisa & " " & getTagCont(DatiGeneraliDocumento, "ImportoBollo")(0)
 Else
     [ImpostaBollo].Value = ""
 End If
 
 Rem arrotondamento nel totale
 If getTagCont(DatiGeneraliDocumento, "Arrotondamento")(0) <> "" Then
    [Arrotondamento].Value = "(" & getTagCont(DatiGeneraliDocumento, "Arrotondamento")(0) & ")"
 Else
    [Arrotondamento].Value = ""
 End If
 

Rem Segnala presenza allegati
 Allegati = getTagCont(Fattura, "Allegati")
 ThisWorkbook.Worksheets(nomefoglio).Range("MsgAllegati").ClearComments
 
 If Allegati(0) <> "" Then
    If UBound(Allegati) = 0 Then
        [MsgAllegati].Value = "Allegato: " & getTagCont(Fattura, "NomeAttachment")(0)
    Else
        [MsgAllegati].Value = "Il documento contiene " & UBound(Allegati) + 1 & " allegati"
    End If
        ThisWorkbook.Worksheets(nomefoglio).Range("MsgAllegati").AddComment ("Fare dopplio click per salvare gli allegati")
 Else
    [MsgAllegati].Value = ""
 End If




 Dim Riferimenti(1000)
 n = 0
 
Rem Dati pagamento
 DatiPagamento = getTagCont(Fattura, "DatiPagamento")(0)
 If DatiPagamento <> "" Then
    Riferimenti(n) = "Tipo pagamento: " & DescCondizioniPagamento(getTagCont(DatiPagamento, "CondizioniPagamento")(0))
    n = n + 1
                
    For Each Dettagliopagamento In getTagCont(DatiPagamento, "DettaglioPagamento")

        ModalitaPagamento = getTagCont(Dettagliopagamento, "ModalitaPagamento")(0)
        If ModalitaPagamento <> "" And ModalitaPagamento <> ModalitaPagamentoT Then
            Riferimenti(n) = "Pagamento " & DescModalitaPagamento(getTagCont(Dettagliopagamento, "ModalitaPagamento")(0))
            n = n + 1
            ModalitaPagamentoT = ModalitaPagamento
        End If
        
        IstitutoFinanziario = getTagCont(Dettagliopagamento, "IstitutoFinanziario")(0)
        If IstitutoFinanziario <> "" And IstitutoFinanziario <> IstitutoFinanziarioT Then
            Riferimenti(n) = Uesc(getTagCont(Dettagliopagamento, "IstitutoFinanziario")(0))
            n = n + 1
            IstitutoFinanziarioT = IstitutoFinanziario
        End If
        
        IBAN = getTagCont(Dettagliopagamento, "IBAN")(0)
        If IBAN <> "" And IBAN <> IBANT Then
            Riferimenti(n) = "IBAN: " & getTagCont(Dettagliopagamento, "IBAN")(0)
            n = n + 1
            IBANT = IBAN
        End If
        
        Beneficiario = getTagCont(Dettagliopagamento, "Beneficiario")(0)
        If Beneficiario <> "" And Beneficiario <> BeneficiarioT Then
            Riferimenti(n) = "Beneficiario: " & Uesc(getTagCont(Dettagliopagamento, "Beneficiario")(0))
            n = n + 1
            BeneficiarioT = Beneficiario
        End If
    
        If getTagCont(Dettagliopagamento, "DataRiferimentoTerminiPagamento")(0) <> "" Then
            Riferimenti(n) = "Decorrenza pagamento: " & formatoData(getTagCont(Dettagliopagamento, "DataRiferimentoTerminiPagamento")(0)) & " a giorni: " & getTagCont(Dettagliopagamento, "GiorniTerminiPagamento")(0)
            n = n + 1
        End If

        If getTagCont(Dettagliopagamento, "CFQuietanzante")(0) <> "" Then
            Riferimenti(n) = "Quietanzato: " & getTagCont(Dettagliopagamento, "CognomeQuietanzante")(0) & " " & getTagCont(Dettagliopagamento, "NomeQuietanzante")(0) & " " & getTagCont(Dettagliopagamento, "CFQuietanzante")(0)
            n = n + 1
        End If
        If getTagCont(Dettagliopagamento, "CodUfficioPostale")(0) <> "" Then
            Riferimenti(n) = "Ufficio postale: " & getTagCont(Dettagliopagamento, "CodUfficioPostale")(0)
            n = n + 1
        End If
        If getTagCont(Dettagliopagamento, "ScontoPagamentoAnticipato")(0) <> "" Then
            Riferimenti(n) = "Sconto per pag. anticipato: " & getTagCont(Dettagliopagamento, "ScontoPagamentoAnticipato")(0)
            n = n + 1
        End If
        If getTagCont(Dettagliopagamento, "DataLimitePagamentoAnticipato")(0) <> "" Then
            Riferimenti(n) = "Termine per pag. anticipato: " & formatoData(getTagCont(Dettagliopagamento, "DataLimitePagamentoAnticipato")(0))
            n = n + 1
        End If
        If getTagCont(Dettagliopagamento, "PenalitaPagamentiRitardati")(0) <> "" Then
            Riferimenti(n) = "Penalit|fffd| pag. ritardati: " & getTagCont(Dettagliopagamento, "PenalitaPagamentiRitardati")(0)
            n = n + 1
        End If
        
        CodicePagamento = getTagCont(Dettagliopagamento, "CodicePagamento")(0)
        If CodicePagamento <> "" And CodicePagamento <> CodicePagamentoT Then
            Riferimenti(n) = "Codice pag.: " & getTagCont(Dettagliopagamento, "CodicePagamento")(0)
            n = n + 1
            CodicePagamentoT = CodicePagamento
        End If
        
        If Val(getTagCont(Dettagliopagamento, "ImportoPagamento")(0)) <> 0 Then
            Riferimenti(n) = "Importo " & getTagCont(Dettagliopagamento, "ImportoPagamento")(0)
            If getTagCont(Dettagliopagamento, "DataScadenzaPagamento")(0) <> "" Then
                Riferimenti(n) = Riferimenti(n) & " - Scadenza: " & formatoData(getTagCont(Dettagliopagamento, "DataScadenzaPagamento")(0))
            End If
            n = n + 1
            totPagamento = totPagamento + Val(getTagCont(Dettagliopagamento, "ImportoPagamento")(0))
        End If
    Next
    n = n + 1
 End If

 If totPagamento <> 0 Then
    [ImportoPagamento].Value = totPagamento
 Else
    [ImportoPagamento].Value = ""
 End If




Rem riferimenti a ordini, contratti, commesse ecc
 For Each v In getTagCont(DatiGenerali, "DatiContratto")
    If v = "" Then Exit For
    Riferimenti(n) = "Contratto: " & getTagCont(v, "IdDocumento")(0)
    If getTagCont(v, "CodiceCommessaConvenzione")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " cod. " & getTagCont(v, "CodiceCommessaConvenzione")(0)
    If getTagCont(v, "Data")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " del " & formatoData(getTagCont(v, "Data")(0))
    If getTagCont(v, "NumItem")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & "N. Linea: " & getTagCont(v, "NumItem")(0)
    If getTagCont(v, "CodiceCUP")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " CUP: " & getTagCont(v, "CodiceCUP")(0)
    If getTagCont(v, "CodiceCIG")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " CIG: " & getTagCont(v, "CodiceCIG")(0)
    n = n + 1
 Next

 For Each v In getTagCont(DatiGenerali, "DatiConvenzione")
    If v = "" Then Exit For
    Riferimenti(n) = "Convenzione: " & getTagCont(v, "IdDocumento")(0)
    If getTagCont(v, "CodiceCommessaConvenzione")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " cod. " & getTagCont(v, "CodiceCommessaConvenzione")(0)
    If getTagCont(v, "Data")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " del " & formatoData(getTagCont(v, "Data")(0))
    If getTagCont(v, "NumItem")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & "N. Linea: " & getTagCont(v, "NumItem")(0)
    If getTagCont(v, "CodiceCUP")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " CUP: " & getTagCont(v, "CodiceCUP")(0)
    If getTagCont(v, "CodiceCIG")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " CIG: " & getTagCont(v, "CodiceCIG")(0)
    n = n + 1
 Next
 
 For Each v In getTagCont(DatiGenerali, "DatiOrdineAcquisto")
    If v = "" Then Exit For
    Riferimenti(n) = "Ordine acquisto: " & getTagCont(v, "IdDocumento")(0)
    If getTagCont(v, "CodiceCommessaConvenzione")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " cod. " & getTagCont(v, "CodiceCommessaConvenzione")(0)
    If getTagCont(v, "Data")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " del " & formatoData(getTagCont(v, "Data")(0))
    If getTagCont(v, "NumItem")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & "N. Linea: " & getTagCont(v, "NumItem")(0)
    If getTagCont(v, "CodiceCUP")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " CUP: " & getTagCont(v, "CodiceCUP")(0)
    If getTagCont(v, "CodiceCIG")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " CIG: " & getTagCont(v, "CodiceCIG")(0)
    n = n + 1
 Next

 For Each v In getTagCont(DatiGenerali, "DatiFattureCollegate")
    If v = "" Then Exit For
    Riferimenti(n) = "Fatt. collegate: " & getTagCont(v, "IdDocumento")(0)
    If getTagCont(v, "CodiceCommessaConvenzione")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " cod. " & getTagCont(v, "CodiceCommessaConvenzione")(0)
    If getTagCont(v, "Data")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " del " & formatoData(getTagCont(v, "Data")(0))
    If getTagCont(v, "NumItem")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & "N. Linea: " & getTagCont(v, "NumItem")(0)
    If getTagCont(v, "CodiceCUP")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " CUP: " & getTagCont(v, "CodiceCUP")(0)
    If getTagCont(v, "CodiceCIG")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " CIG: " & getTagCont(v, "CodiceCIG")(0)
    n = n + 1
 Next

 For Each v In getTagCont(DatiGenerali, "DatiRicezione")
    If v = "" Then Exit For
    Riferimenti(n) = "Ricezione PA: " & getTagCont(v, "IdDocumento")(0)
    If getTagCont(v, "CodiceCommessaConvenzione")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " cod. " & getTagCont(v, "CodiceCommessaConvenzione")(0)
    If getTagCont(v, "Data")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " del " & formatoData(getTagCont(v, "Data")(0))
    If getTagCont(v, "NumItem")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & "N. Linea: " & getTagCont(v, "NumItem")(0)
    If getTagCont(v, "CodiceCUP")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " CUP: " & getTagCont(v, "CodiceCUP")(0)
    If getTagCont(v, "CodiceCIG")(0) <> "" Then Riferimenti(n) = Riferimenti(n) & " CIG: " & getTagCont(v, "CodiceCIG")(0)
    n = n + 1
 Next

 For Each v In getTagCont(DatiGenerali, "SAL")
    If v = "" Then Exit For
    Riferimenti(n) = "SAL: " & getTagCont(v, "DatiSAL")(0)
    n = n + 1
 Next
 
 If getTagCont(DatiGenerali, "DatiTrasporto")(0) <> "" Then
    Riferimenti(n) = "Trasportatore: " & getTagCont(DatiGenerali, "Denominazione")(0)
    n = n + 1
 End If



 [Riferimenti0].Value = Riferimenti(0)
 [Riferimenti1].Value = Riferimenti(1)
 [Riferimenti2].Value = Riferimenti(2)
 [Riferimenti3].Value = Riferimenti(3)
 [Riferimenti4].Value = Riferimenti(4)
 [Riferimenti5].Value = Riferimenti(5)
 [Riferimenti6].Value = Riferimenti(6)
 [Riferimenti7].Value = Riferimenti(7)
 [Riferimenti8].Value = Riferimenti(8)
 [Riferimenti9].Value = Riferimenti(9)

 If n > 10 Then
    [Riferimenti9].Value = "(Sono presenti altre " & n - 9 & " voci non visualizzate)"
 End If


 Worksheets(nomefoglio).Activate

 
End Function


Rem by Marco Gualmini

Attribute VB_Name = "Modulo4"
Rem by Marco Gualmini

Option Explicit


Rem ------------- unescape dei caratteri non ammessi in XML
Function Uesc(t As Variant) As String
  t = Replace(t, "&amp;", "&")
  t = Replace(t, "&agrave;", "|fffd|")
  t = Replace(t, "&egrave;", "|fffd|")
  t = Replace(t, "&igrave;", "|fffd|")
  t = Replace(t, "&ograve;", "|fffd|")
  t = Replace(t, "&ugrave;", "|fffd|")
  t = Replace(t, "&eacute;", "|fffd|")
  t = Replace(t, "&quot;", Chr(34))
  t = Replace(t, "&apos;", "'")
  t = Replace(t, "&lt;", "<")
  t = Replace(t, "&gt;", ">")
  t = Replace(t, Chr(195), "|fffd|")
  t = Replace(t, Chr(203), "|fffd|")
  t = Replace(t, Chr(207), "|fffd|")
  t = Replace(t, Chr(213), "|fffd|")
  t = Replace(t, Chr(220), "|fffd|")
  Uesc = t
End Function

Rem decodifica codici fatture

Function DescTipoDocumento(cod As Variant) As String
 Select Case cod
    Case "TD01": cod = "Fattura"
    Case "TD02": cod = "Acconto su fattura"
    Case "TD03": cod = "Acconto su parcella"
    Case "TD04": cod = "Nota di credito"
    Case "TD05": cod = "Nota di debito"
    Case "TD06": cod = "Parcella"
    Case "TD20": cod = "Autofattura"
 End Select
 DescTipoDocumento = cod
End Function


Function DescCondizioniPagamento(cod As Variant) As String
 Select Case cod
    Case "TP01": cod = "a rate"
    Case "TP02": cod = "completo"
    Case "TP02": cod = "anticipo"
 End Select
 DescCondizioniPagamento = cod
End Function

Function DescModalitaPagamento(cod As Variant) As String
 Select Case cod
    Case "MP01": cod = "contanti"
    Case "MP02": cod = "assegno"
    Case "MP03": cod = "assegno circolare"
    Case "MP04": cod = "contanti presso Tesoreria"
    Case "MP05": cod = "bonifico"
    Case "MP06": cod = "vaglia cambiario"
    Case "MP07": cod = "bollettino bancario"
    Case "MP08": cod = "carta di credito"
    Case "MP09": cod = "RID"
    Case "MP10": cod = "RID utenze"
    Case "MP11": cod = "RID veloce"
    Case "MP12": cod = "RIBA"
    Case "MP13": cod = "MAV"
    Case "MP14": cod = "quietanza erario"
    Case "MP15": cod = "giroconto su conti di contabilit|fffd| speciale"
    Case "MP16": cod = "domiciliazione bancaria"
    Case "MP17": cod = "domiciliazione postale"
    Case "MP18": cod = "bollettino di c/c postale"
    Case "MP19": cod = "SEPA Direct Debit"
    Case "MP20": cod = "SEPA Direct Debit CORE"
    Case "MP21": cod = "SEPA Direct Debit B2B"
    Case "MP22": cod = "Trattenuta su somme gi|fffd| riscosse"
 End Select
 DescModalitaPagamento = cod
End Function

Function DescRegimeFiscale(cod As Variant) As String
 Select Case cod
    Case "RF01": cod = "Ordinario"
    Case "RF02": cod = "Contribuenti minimi (art.1, c.96-117, L. 244/07)"
    Case "RF04": cod = "Agricoltura e attivit|e0| connesse e pesca (artt.34 e 34-bis, DPR 633/72)"
    Case "RF05": cod = "Vendita sali e tabacchi (art.74, c.1, DPR. 633/72)"
    Case "RF06": cod = "Commercio fiammiferi (art.74, c.1, DPR 633/72)"
    Case "RF07": cod = "Editoria (art.74, c.1, DPR 633/72)"
    Case "RF08": cod = "Gestione servizi telefonia pubblica (art.74, c.1, DPR 633/72)"
    Case "RF09": cod = "Rivendita documenti di trasporto pubblico e di sosta (art.74, c.1, DPR 633/72)"
    Case "RF10": cod = "Intrattenimenti, giochi e altre attivit|e0| di cui alla tariffa allegata al DPR 640/72 (art.74, c.6, DPR 633/72)"
    Case "RF11": cod = "Agenzie viaggi e turismo (art.74-ter, DPR 633/72)"
    Case "RF12": cod = "Agriturismo (art.5, c.2, L. 413/91)"
    Case "RF13": cod = "Vendite a domicilio (art.25-bis, c.6, DPR 600/73)"
    Case "RF14": cod = "Rivendita beni usati, oggetti d|2019|arte, d|2019|antiquariato o da collezione (art.36, DL 41/95)"
    Case "RF15": cod = "Agenzie di vendite all|2019|asta di oggetti d|2019|arte, antiquariato o da collezione (art.40-bis, DL 41/95)"
    Case "RF16": cod = "IVA per cassa P.A. (art.6, c.5, DPR 633/72)"
    Case "RF17": cod = "IVA per cassa (art. 32-bis, DL 83/2012)"
    Case "RF18": cod = "Altro"
    Case "RF19": cod = "Regime forfettario (art.1, c.54-89, L. 190/2014)"
 End Select
 DescRegimeFiscale = cod
End Function

Function formatoData(d As Variant) As String
    If d = "" Then
        formatoData = ""
    Else
        formatoData = Format(d, "dd/mm/yyyy")
    End If
End Function

Rem controlla la partita iva italiana; ritorna 1 se corretta, 0 se errata
Function test_piva_it(piva As Variant) As Boolean
 Dim n As Integer
 Dim c As Integer
 Dim somma As Integer

 If piva = "" Then
    test_piva_it = 1
    Exit Function
 End If

 If Len(piva) <> 11 Then
    test_piva_it = 0
    Exit Function
 End If
 
 somma = 0
 
 For n = 1 To 10 Step 2 ' somma le cifre in posizione dispari
    somma = somma + Val(Mid(piva, n, 1))
 Next

 For n = 2 To 10 Step 2 ' somma le cifre in posizione pari dopo averle raddoppiate
    c = Val(Mid(piva, n, 1)) * 2
    If c > 9 Then c = c - 9
    somma = somma + c
 Next

 If (10 - somma Mod 10) Mod 10 = Val(Mid(piva, 11, 1)) Then
    test_piva_it = 1
 Else
    test_piva_it = 0
 End If

End Function

Rem controlla il codice fiscale; ritorna 1 se corretto, 0 se errato
Function test_cf(cf As Variant) As Boolean

 Dim totale As Integer
 Dim resto As Integer
 Dim n  As Integer
 Dim c As Integer
 Dim cifre As String
 Dim valorePari As Variant
 Dim valoreDispari As Variant

 If cf = "" Then
    test_cf = 1
    Exit Function
 End If

 If Len(cf) = 11 Then
    test_cf = test_piva_it(cf)
    Exit Function
 End If
  
 If Len(cf) <> 16 Then
    test_cf = 0
    Exit Function
 End If

 cifre = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
'   corrispondenza      0    1    2   3    4    5    6    7    8    9    A    B    C    D    E    F    G    H    I    J     K    L    M    N    O    P    Q    R    S    T    U    V    W    X    Y   Z
 valorePari = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
 valoreDispari = Array(1, 0, 5, 7, 9, 13, 15, 17, 19, 21, 1, 0, 5, 7, 9, 13, 15, 17, 19, 21, 2, 4, 18, 20, 11, 3, 6, 8, 12, 14, 16, 10, 22, 25, 24, 23)

 cf = UCase(cf) ' converte in maiuscolo

 totale = 0
 For n = 1 To 15 Step 2
    c = InStr(cifre, Mid(cf, n, 1))
    If c = 0 Then
        test_cf = 0
        Exit Function
    End If
    totale = totale + valoreDispari(c - 1)
 Next
 For n = 2 To 14 Step 2
    c = InStr(cifre, Mid(cf, n, 1))
    If c = 0 Then
        test_cf = 0
        Exit Function
    End If
    totale = totale + valorePari(c - 1)
 Next
 
 totale = totale Mod 26 ' complementa a 26

 If Chr(totale + 65) = Mid(cf, 16, 1) Then
    test_cf = 1
 Else
    test_cf = 0
 End If

End Function

Rem verifica la corrispondenza allo standard ministeriale del nome del file xlm (per soggetto italiano)
Function testNomeFile(nome As String) As Boolean
 Dim r As Variant
 Dim regex As Object
 
 Set regex = CreateObject("VBScript.RegExp")
 With regex
 .Global = True
 .Ignorecase = True
 .Pattern = "^[A-Za-z0-9_]+$"
 End With

 If nome = "" Then
    testNomeFile = False
    Exit Function
 End If
 
 If LCase(Right(nome, 4)) = ".p7m" Then  ' toglie eventuale estensione p7m
    nome = Left(nome, Len(nome) - 4)
 End If
 If LCase(Right(nome, 4)) = ".xml" Then  ' vefifica e toglie estensione xml
    nome = Left(nome, Len(nome) - 4)
 Else
    testNomeFile = False
    Exit Function
 End If
 If Left(nome, 2) = "IT" Then ' verifica e toglie parte iniziale IT
    nome = Right(nome, Len(nome) - 2)
 Else
    testNomeFile = False
    Exit Function
 End If

 If Not regex.test(nome) Then  'controlla caratteri ammessi
    testNomeFile = False
    Exit Function
 End If
      
 r = Split(nome, "_")

 If UBound(r) <> 1 Then ' se trova pi|fffd| o meno di due sezioni separate da underscore non |fffd| valido
    testNomeFile = False
    Exit Function
 End If
 
 If Len(r(0)) < 11 Or Len(r(0)) > 16 Then ' lunghezza identificativo tra 11 e 16
    testNomeFile = False
    Exit Function
 End If
 If Len(r(1)) = 0 Or Len(r(1)) > 5 Then ' lunghezza progressivo tra 1 e 5
    testNomeFile = False
    Exit Function
 End If
 
 testNomeFile = True
End Function
Rem verifica la correttezza del codice detinatario in base al formato invio
Function testCodiceDestinatario(id As String, formato As String) As Boolean
 If Left(formato, 3) = "FPR" And Len(id) = 7 Then
    testCodiceDestinatario = True
    Exit Function
 End If
 If Left(formato, 3) = "FPA" And Len(id) = 6 Then
    testCodiceDestinatario = True
    Exit Function
 End If
 testCodiceDestinatario = False
End Function




Rem by Marco Gualmini

Attribute VB_Name = "Modulo5"
Rem https://en.wikibooks.org/wiki/Visual_Basic_for_Applications/File_Hashing_in_VBA

Option Explicit

Private Sub TestFileHashes()
    'run this to test the file hasher. Select or comment lines as necessary
    'enter your own paths for the files to test
    'Set a reference to mscorlib 4.0 64-bit
    
    Dim sFPath As String, b64 As Boolean, sH As String
    
    'set output type and path to target file
    'b64 = False   'output hex
    b64 = True     'output base-64
    sFPath = "C:\Users\Your Folder\Documents\test.txt"
    
    'enable any one line to test hash
    'sh=FileToMD5(sFPath, b64)
    'sh=FileToSHA1(sFPath, b64)
    'sh=FileToSHA256(sFPath, b64)
    'sH = FileToSHA384(sFPath, b64)
    sH = FileToSHA512(sFPath, b64)
    
    Debug.Print sH & vbNewLine & Len(sH) & " characters in length"
    MsgBox sH & vbNewLine & Len(sH) & " characters in length"

End Sub

Public Function FileToMD5(sFullPath As String, Optional bB64 As Boolean = False) As String
    'parameter full path with name of file returned in the function as an MD5 hash
    'Set a reference to mscorlib 4.0 64-bit
    
    Dim enc, bytes, outstr As String, pos As Integer
    
    Set enc = CreateObject("System.Security.Cryptography.MD5CryptoServiceProvider")
    'Convert the string to a byte array and hash it
    bytes = GetFileBytes(sFullPath)
    bytes = enc.ComputeHash_2((bytes))
    
    If bB64 = True Then
       FileToMD5 = ConvToBase64String(bytes)
    Else
       FileToMD5 = ConvToHexString(bytes)
    End If
        
    Set enc = Nothing

End Function

Public Function FileToSHA1(sFullPath As String, Optional bB64 As Boolean = False) As String
    'parameter full path with name of file returned in the function as an SHA1 hash
    'Set a reference to mscorlib 4.0 64-bit
    
    Dim enc, bytes, outstr As String, pos As Integer
    
    Set enc = CreateObject("System.Security.Cryptography.SHA1CryptoServiceProvider")
    'Convert the string to a byte array and hash it
    bytes = GetFileBytes(sFullPath) 'returned as a byte array
    bytes = enc.ComputeHash_2((bytes))
    
    If bB64 = True Then
       FileToSHA1 = ConvToBase64String(bytes)
    Else
       FileToSHA1 = ConvToHexString(bytes)
    End If
        
    Set enc = Nothing

End Function

Public Function FileToSHA256(sFullPath As String, Optional bB64 As Boolean = False) As String
    'parameter full path with name of file returned in the function as an SHA2-256 hash
    'Set a reference to mscorlib 4.0 64-bit
    
    Dim enc, bytes, outstr As String, pos As Integer
    
    Set enc = CreateObject("System.Security.Cryptography.SHA256Managed")
    'Convert the string to a byte array and hash it
    bytes = GetFileBytes(sFullPath) 'returned as a byte array
    bytes = enc.ComputeHash_2((bytes))
    
    If bB64 = True Then
       FileToSHA256 = ConvToBase64String(bytes)
    Else
       FileToSHA256 = ConvToHexString(bytes)
    End If
        
    Set enc = Nothing

End Function

Public Function FileToSHA384(sFullPath As String, Optional bB64 As Boolean = False) As String
    'parameter full path with name of file returned in the function as an SHA2-384 hash
    'Set a reference to mscorlib 4.0 64-bit
    
    Dim enc, bytes, outstr As String, pos As Integer
    
    Set enc = CreateObject("System.Security.Cryptography.SHA384Managed")
    'Convert the string to a byte array and hash it
    bytes = GetFileBytes(sFullPath) 'returned as a byte array
    bytes = enc.ComputeHash_2((bytes))
    
    If bB64 = True Then
       FileToSHA384 = ConvToBase64String(bytes)
    Else
       FileToSHA384 = ConvToHexString(bytes)
    End If
    
    Set enc = Nothing

End Function

Public Function FileToSHA512(sFullPath As String, Optional bB64 As Boolean = False) As String
    'parameter full path with name of file returned in the function as an SHA2-512 hash
    'Set a reference to mscorlib 4.0 64-bit
    
    Dim enc, bytes, outstr As String, pos As Integer
    
    Set enc = CreateObject("System.Security.Cryptography.SHA512Managed")
    'Convert the string to a byte array and hash it
    bytes = GetFileBytes(sFullPath) 'returned as a byte array
    bytes = enc.ComputeHash_2((bytes))
    
    If bB64 = True Then
       FileToSHA512 = ConvToBase64String(bytes)
    Else
       FileToSHA512 = ConvToHexString(bytes)
    End If
    
    Set enc = Nothing

End Function

Function FileToSHA512Salt(ByVal sPath As String, ByVal sSecretKey As String, _
                           Optional ByVal b64 As Boolean = False) As String
    'Returns a sha512 FILE HASH in function name, modified by parameter sSecretKey.
    'This hash differs from that of FileToSHA512 using the SHA512Managed class.
    'HMAC class inputs are hashed twice;first input and key are mixed before hashing,
    'then the key is mixed with the result and hashed again.
        
    Dim asc As Object, enc As Object
    Dim SecretKey() As Byte
    Dim bytes() As Byte
    
    'create a text and crypto objects
    Set asc = CreateObject("System.Text.UTF8Encoding")
    
    'Any of HMACSHAMD5,HMACSHA1,HMACSHA256,HMACSHA384,or HMACSHA512 can be used
    'for corresponding hashes, albeit not matching those of managed classes.
    Set enc = CreateObject("System.Security.Cryptography.HMACSHA512")

    'make a byte array of the text to hash
    bytes = GetFileBytes(sPath)
    
    'make a byte array of the private key
    SecretKey = asc.Getbytes_4(sSecretKey)
    'add the key property
    enc.Key = SecretKey

    'make a byte array of the hash
    bytes = enc.ComputeHash_2((bytes))
    
    'convert the byte array to string
    If b64 = True Then
       FileToSHA512Salt = ConvToBase64String(bytes)
    Else
       FileToSHA512Salt = ConvToHexString(bytes)
    End If
    
    'release object variables
    Set asc = Nothing
    Set enc = Nothing

End Function

Private Function GetFileBytes(ByVal sPath As String) As Byte()
    'makes byte array from file
    'Set a reference to mscorlib 4.0 64-bit
    
    Dim lngFileNum As Long, bytRtnVal() As Byte, bTest
    
    lngFileNum = FreeFile
    
    If LenB(Dir(sPath)) Then ''// Does file exist?
        
        Open sPath For Binary Access Read As lngFileNum
        
        'a zero length file content will give error 9 here
        
        ReDim bytRtnVal(0 To LOF(lngFileNum) - 1&) As Byte
        Get lngFileNum, , bytRtnVal
        Close lngFileNum
    Else
        Err.Raise 53 'File not found
    End If
    
    GetFileBytes = bytRtnVal
    
    Erase bytRtnVal

End Function

Function ConvToBase64String(vIn As Variant) As Variant
    'used to produce a base-64 output
    'Set a reference to mscorlib 4.0 64-bit
    
    Dim oD As Object
      
    Set oD = CreateObject("MSXML2.DOMDocument")
      With oD
        .LoadXML "<root />"
        .DocumentElement.DataType = "bin.base64"
        .DocumentElement.nodeTypedValue = vIn
      End With
    ConvToBase64String = Replace(oD.DocumentElement.Text, vbLf, "")
    
    Set oD = Nothing

End Function

Function ConvToHexString(vIn As Variant) As Variant
    'used to produce a hex output
    'Set a reference to mscorlib 4.0 64-bit
    
    Dim oD As Object
      
    Set oD = CreateObject("MSXML2.DOMDocument")
      
      With oD
        .LoadXML "<root />"
        .DocumentElement.DataType = "bin.Hex"
        .DocumentElement.nodeTypedValue = vIn
      End With
    ConvToHexString = Replace(oD.DocumentElement.Text, vbLf, "")
    
    Set oD = Nothing

End Function

Function GetFileSize(sFilePath As String, nSize As Double) As Boolean
    'use this to test for a zero file size
    'takes full path as string in sFileSize
    'returns file size in bytes in nSize
    
    Dim fs As FileSystemObject, f As file
    
    Set fs = CreateObject("Scripting.FileSystemObject")
    
    If fs.FileExists(sFilePath) Then
        Set f = fs.GetFile(sFilePath)
        nSize = f.Size
        GetFileSize = True
        Exit Function
    End If

End Function



Attribute VB_Name = "Modulo6"
Option Explicit

Sub salvaAllegati()

 Dim fullfile As String
 Dim filename As String
 Dim atachment As String
 Dim num As String
 Dim c As Integer
 Dim a As Variant
 Dim scrivere As Integer
 Dim path As String
 Dim filedialog As filedialog
 
 
 If NomeFileXml = "" Then
    MsgBox ("Per esportare gli allegati occorre riaprire il documento XML")
    Exit Sub
 End If
 
 fullfile = aprifile(NomeFileXml)

 If getTagCont(fullfile, "Allegati")(0) = "" Then
    Exit Sub
 End If
 
 Set filedialog = Application.filedialog(msoFileDialogFolderPicker)
 With filedialog
    .Title = "Selezionare una cartella dove salvare gli allegati"
    .AllowMultiSelect = False
    .InitialFileName = Left(NomeFileXml, InStrRev(NomeFileXml, "\"))
    .InitialView = msoFileDialogViewDetails
    If .Show <> -1 Then Exit Sub
    path = .SelectedItems(1)
 End With

 For Each a In getTagCont(fullfile, "Allegati")
    filename = path & "/" & getTagCont(a, "NomeAttachment")(0)

    scrivere = vbYes
    If Dir(filename) <> "" Then
        scrivere = MsgBox("Il file " & filename & " esiste gi|fffd|. Si vuole sovrascriverlo?", vbYesNo + vbQuestion, "FILE ESISTENTE")
    End If
    
    atachment = Base64Decode(getTagCont(a, "Attachment")(0))
    If scrivere = vbYes And atachment <> "" Then
        num = FreeFile()
        Open filename For Output As #num
        Print #num, Base64Decode(getTagCont(a, "Attachment")(0))
        Close #num
        c = c + 1
    End If
 Next

 If c > 0 Then
    MsgBox ("N. " & c & " allegati esportati nella cartella: " & path)
 End If

End Sub

' Decodes a base-64 encoded string (BSTR type).
' 1999 - 2004 Antonin Foller, http://www.motobit.com
' 1.01 - solves problem with Access And 'Compare Database' (InStr)
Function Base64Decode(ByVal base64String)
  'rfc1521
  '1999 Antonin Foller, Motobit Software, http://Motobit.cz
  Const Base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
  Dim dataLength, sOut, groupBegin
  
  'remove white spaces, If any
  base64String = Replace(base64String, vbCrLf, "")
  base64String = Replace(base64String, vbTab, "")
  base64String = Replace(base64String, " ", "")
  
  'The source must consists from groups with Len of 4 chars
  dataLength = Len(base64String)
  If dataLength Mod 4 <> 0 Then
    Call MsgBox("Base64Decode - dimensione del campo Atachment non valida", vbCritical)
    Exit Function
  End If

  
  ' Now decode each group:
  For groupBegin = 1 To dataLength Step 4
    Dim numDataBytes, CharCounter, thisChar, thisData, nGroup, pOut
    ' Each data group encodes up To 3 actual bytes.
    numDataBytes = 3
    nGroup = 0

    For CharCounter = 0 To 3
      ' Convert each character into 6 bits of data, And add it To
      ' an integer For temporary storage.  If a character is a '=', there
      ' is one fewer data byte.  (There can only be a maximum of 2 '=' In
      ' the whole string.)

      thisChar = Mid(base64String, groupBegin + CharCounter, 1)

      If thisChar = "=" Then
        numDataBytes = numDataBytes - 1
        thisData = 0
      Else
        thisData = InStr(1, Base64, thisChar, vbBinaryCompare) - 1
      End If
      If thisData = -1 Then
        Call MsgBox("Base64Decode - carattere non valido nel campo Atachment", vbCritical)
        Exit Function
      End If

      nGroup = 64 * nGroup + thisData
    Next
    
    'Hex splits the long To 6 groups with 4 bits
    nGroup = Hex(nGroup)
    
    'Add leading zeros
    nGroup = String(6 - Len(nGroup), "0") & nGroup
    
    'Convert the 3 byte hex integer (6 chars) To 3 characters
    pOut = Chr(CByte("&H" & Mid(nGroup, 1, 2))) + _
      Chr(CByte("&H" & Mid(nGroup, 3, 2))) + _
      Chr(CByte("&H" & Mid(nGroup, 5, 2)))
    
    'add numDataBytes characters To out string
    sOut = sOut & Left(pOut, numDataBytes)
  Next

  Base64Decode = sOut
End Function





Attribute VB_Name = "Modulo7"

Sub EsportaTuttoPdf(foglio As Object)
 Dim n As Long
 Dim c As Long
 Dim file As String
 Dim filepdf As String
 Dim numdoc As String
 Dim datadoc As Double
 Dim path As String

 
 If MsgBox("Tutti i documenti elencati verranno convertiti in formato PDF. L'operazione pu|fffd| richiedere tempo. Eventuali file omonimi gi|fffd| esistenti verranno sovrascritti. Si conferma di voler procedere?", vbQuestion + vbYesNo) = vbNo Then
    Exit Sub
 End If

' chiede la directory in cui salvare i pdf
 Set gdir = Application.filedialog(msoFileDialogFolderPicker)
 gdir.Title = "Selezionare la cartella dove salvare il file PDF"
 
 gdir.AllowMultiSelect = False
 gdir.InitialFileName = ""
 If gdir.Show = 0 Then Exit Sub
 path = gdir.SelectedItems(1)
 
 Set fso = CreateObject("scripting.filesystemobject")

 n = 2
 c = 0
 Do
    file = foglio.Cells(n, 1).Value
    
    If file = "" Or file = "TOTALI:" Then Exit Do

    numdoc = foglio.Cells(n, 6).Value
    datadoc = foglio.Cells(n, 7).Value
    If Anteprima(file, numdoc, datadoc) <> -1 Then

        file = fso.getfilename(file)
        filepdf = path & "\" & Left(file, Len(file) - 4) & ".pdf"
    
        If Dir(filepdf) <> "" Then ' se il file esiste gi|fffd| lo rinomina con il numero di riga
            filepdf = path & "\" & Left(file, Len(file) - 4) & "-" & n & ".pdf"
        End If
    
        ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, filename:=filepdf, Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:=False
        
        c = c + 1
    End If
    n = n + 1
 Loop
 
 Beep
 Call MsgBox("Operazione completata. " & c & " documenti PDF esportati", vbInformation)
End Sub


Rem by Marco Gualmini


Attribute VB_Name = "Modulo8"
Rem  *****  BASIC  *****

Option Explicit

Sub ComparaRicevute(foglio As Object)

 Dim file_dialog As Object
 Dim pathfile As String
 Dim status As Integer
 Dim TotFile As Long
 Dim r As Variant
 Dim n As Long
 Dim m As Long
 Dim t As Long
 Dim file As String
 Dim fullfile As String
 Dim filefatt As String
 
 Dim dimensione As Long
 
 Dim RicevutaFile() As String
 Dim RicevutaTipo() As String
 Dim RicevutaHash() As String
 Dim RicevutaIdSdi() As String
 Dim RicevutaDataTrasm() As String
 Dim RicevutaDataConsegna() As String
 Dim statoConsegna As Integer
 Dim statoScarto As Integer
 
 Dim coloreScarto As String
 Dim coloreConsegna As String
 Dim coloreImpConsegna As String
 
 coloreScarto = RGB(255, 150, 150)
 coloreConsegna = RGB(200, 255, 200)
 coloreImpConsegna = RGB(255, 250, 150)

 Dim nScarto As Long
 Dim nRicImpCons As Long
 Dim nRicCons As Long
 Dim correlato As Integer
 Dim fattureCorrelate As Long
 Dim colonnaLibera As Integer
 Dim colonnahash As Integer
 Dim errorehash As Long
 
 Dim DataFattura As Date
 Dim RicevuteTardive As Integer
 Dim GiorniRitardo As Integer
  
 Dim report As String
 
 If MsgBox("Vengono caricati file XML contenenti ricevute relative alle fatture elettroniche, che verranno correlate alla tabella visualizzata." & vbCrLf & "Si tratta di una analisi approssimativa, in cui la correlazione si basa unicamente sul nome del file." & vbCrLf & "Si conferma di volere procedere?", vbYesNo) = vbNo Then
    Exit Sub
 End If

Rem Giorni limite oltre i quali considerare la ricevuta tardiva - circolare Agenzia delle Entrare n. 14/E del 17 giugno 2019
 Dim GiorniLimiteRicevuta As Integer
 GiorniLimiteRicevuta = 12


Rem individua le colonne necessarie
 For n = 1 To 50
    If colonnaLibera = 0 And foglio.Cells(1, n).Value = "" Then
        colonnaLibera = n
    End If
    If foglio.Cells(1, n).Value = "Esito" Then
        colonnaLibera = n
    End If
    If foglio.Cells(1, n).Value = "Hash SHA-256" Then
        colonnahash = n
    End If
 Next
 
 Rem chiede i file da caricare
 Dim fileobj As filedialog
 Set fileobj = Application.filedialog(msoFileDialogFilePicker)
 With fileobj
    .AllowMultiSelect = True
    .Filters.Clear
    .Filters.Add "File fatture elettroniche (XML, P7M)", "*.xml, *.p7m"
    .Filters.Add "Tutti i file", "*.*"
    .FilterIndex = 1
    If .Show = 0 Then Exit Sub
    Set file_dialog = fileobj.SelectedItems
 End With
 
 TotFile = file_dialog.Count
 dimensione = TotFile
 
 ReDim RicevutaFile(dimensione)
 ReDim RicevutaTipo(dimensione)
 ReDim RicevutaHash(dimensione)
 ReDim RicevutaIdSdi(dimensione)
 ReDim RicevutaDataTrasm(dimensione)
 ReDim RicevutaDataConsegna(dimensione)

Rem analizza ogni file ricevuta
 For Each r In file_dialog
    fullfile = aprifile(r)
    filefatt = getTagCont(fullfile, "NomeFile")(0)
    If filefatt <> "" Then
        RicevutaFile(t) = filefatt
        RicevutaHash(t) = getTagCont(fullfile, "Hash")(0)
        RicevutaIdSdi(t) = getTagCont(fullfile, "IdentificativoSdI")(0)
        RicevutaDataTrasm(t) = getTagCont(fullfile, "DataOraRicezione")(0)
        RicevutaDataConsegna(t) = getTagCont(fullfile, "DataOraConsegna")(0)

        If InStr(fullfile, "RicevutaScarto") > 0 Then
            RicevutaTipo(t) = "SC"
            nScarto = nScarto + 1
            t = t + 1
        End If
  
        If InStr(fullfile, "RicevutaConsegna") > 0 Then
            RicevutaTipo(t) = "RC"
            nRicCons = nRicCons + 1
            t = t + 1
        End If

        If InStr(fullfile, "RicevutaImpossibilitaRecapito") > 0 Then
            RicevutaTipo(t) = "MC"
            nRicImpCons = nRicImpCons + 1
            t = t + 1
        End If
    End If
 Next

 If t = 0 Then
    Call MsgBox("Nei file selezionati non |fffd| stata trovata alcuna ricevuta.", vbCritical)
    Exit Sub
 End If


Rem aggiunge intestazioni
 foglio.Cells(1, colonnaLibera).Value = "Esito"
 foglio.Cells(1, colonnaLibera + 1).Value = "Identificativo SDI"
 foglio.Cells(1, colonnaLibera + 2).Value = "Data/ora ricezione SDI"
 foglio.Cells(1, colonnaLibera + 3).Value = "Data/ora consegna"
 
 
Rem rimuove dati precedenti
 foglio.Range(Cells(1, 1), Cells(65535, colonnaLibera + 3)).ClearComments
 foglio.Range(Cells(1, 1), Cells(65535, colonnaLibera + 3)).Interior.ColorIndex = 0
 

Rem compara file in elenco con ricevute
 n = 2
 Do
    file = foglio.Cells(n, 1).Value
    If file = "" Or file = "TOTALI:" Then Exit Do
        
    DataFattura = CDate(CStr(foglio.Cells(n, 7).Value))
    
    foglio.Cells(n, 1).Interior.Color = RGB(255, 255, 255)
    correlato = 0
    statoConsegna = 0
    statoScarto = 0
    For m = 0 To t - 1
        If RicevutaFile(m) = Dir(file) Then
            foglio.Cells(n, colonnahash).ClearComments
            foglio.Cells(n, colonnaLibera).ClearComments
            If colonnahash <> 0 And RicevutaHash(m) <> foglio.Cells(n, colonnahash).Value Then
                foglio.Cells(n, colonnahash).AddComment ("Hash non corrispondente con quello indicato nella ricevuta telematica")
            End If
            Select Case RicevutaTipo(m)
                Case "RC"
                    foglio.Cells(n, colonnaLibera).Value = "Consegnato"
                    foglio.Cells(n, 1).Interior.Color = coloreConsegna
                    foglio.Cells(n, colonnaLibera + 1).NumberFormat = "@" ' formato cella a testo
                    foglio.Cells(n, colonnaLibera + 1).Value = RicevutaIdSdi(m)
                    foglio.Cells(n, colonnaLibera + 2).Value = RicevutaDataTrasm(m)
                    foglio.Cells(n, colonnaLibera + 3).Value = RicevutaDataConsegna(m)
                    statoConsegna = 1
                Case "MC"
                    foglio.Cells(n, colonnaLibera).Value = "Mancato recapito"
                    foglio.Cells(n, 1).Interior.Color = coloreImpConsegna
                    foglio.Cells(n, colonnaLibera + 1).NumberFormat = "@" ' formato cella a testo
                    foglio.Cells(n, colonnaLibera + 1).Value = RicevutaIdSdi(m)
                    foglio.Cells(n, colonnaLibera + 2).Value = RicevutaDataTrasm(m)
                    foglio.Cells(n, colonnaLibera + 3).Value = RicevutaDataConsegna(m)
                    statoConsegna = 1
                Case "SC"
                    If statoConsegna = 0 Then
                        foglio.Cells(n, colonnaLibera).Value = "Scartato"
                        foglio.Cells(n, 1).Interior.Color = coloreScarto
                        foglio.Cells(n, colonnaLibera + 1).NumberFormat = "@" ' formato cella a testo
                        foglio.Cells(n, colonnaLibera + 1).Value = RicevutaIdSdi(m)
                        foglio.Cells(n, colonnaLibera + 2).Value = RicevutaDataTrasm(m)
                        foglio.Cells(n, colonnaLibera + 3).Value = ""
                    End If
                    statoScarto = 1
            End Select
            correlato = 1
            
            GiorniRitardo = CDate(DateValue(Left(RicevutaDataTrasm(m), 10))) - DataFattura
    
            If statoConsegna = 1 And GiorniRitardo > GiorniLimiteRicevuta Then
                foglio.Cells(n, colonnaLibera + 2).AddComment ("Invio effettuato " & GiorniRitardo & "  giorni in ritardo rispetto alla data fattura")
                foglio.Cells(n, colonnaLibera + 2).Interior.Color = RGB(255, 150, 150)
                RicevuteTardive = RicevuteTardive + 1
            End If
            
        End If
    Next
    If statoConsegna And statoScarto Then
        foglio.Cells(n, colonnaLibera).AddComment ("Presente anche una ricevuta di scarto")
    End If
    If correlato = 1 Then fattureCorrelate = fattureCorrelate + 1
    n = n + 1
 Loop

 
Rem stampa la legenda
 n = n + 8
 foglio.Cells(n, 1).Value = "Legenda:"
 foglio.Cells(n, 1).Font.Bold = True ' grassetto
 n = n + 1
 foglio.Cells(n, 1).Value = "Ricevuta di scarto"
 foglio.Cells(n, 1).Interior.Color = coloreScarto
 n = n + 1
 foglio.Cells(n, 1).Value = "Ricevuta di consegna"
 foglio.Cells(n, 1).Interior.Color = coloreConsegna
 n = n + 1
 foglio.Cells(n, 1).Value = "Mancata consegna"
 foglio.Cells(n, 1).Interior.Color = coloreImpConsegna
 
 
 report = "Caricati " & TotFile & " file, di cui:" & vbCrLf & nScarto & " ricevute di scarto, " & vbCrLf & nRicCons & " ricevute di avvenuta consegna, " & vbCrLf & nRicImpCons & " ricevute di impossibilit|fffd| di recapito." & vbCrLf & "Sono stati correlati a " & fattureCorrelate & " fatture in tabella."
 If errorehash Then
    report = report & vbCrLf & "HASH non corrispondente per " + errorehash + " file."
 End If
 
 If RicevuteTardive Then
    report = report & vbCrLf & RicevuteTardive & " invii risultano effettuati oltre " & GiorniLimiteRicevuta & " giorni dopo la data documento."
 End If


 aggiornaReport (report)
 Beep
 Call MsgBox(report, vbInformation)

End Sub


Rem by Marco Gualmini




Sub ComparaRicezioni(foglio As Object)

 Dim file_dialog As Object
 Dim pathfile As String
 Dim status As Integer
 Dim TotFile As Long
 Dim n As Long
 Dim m As Long
 Dim r As Variant
 Dim file As String
 Dim fullfile As String
 Dim filefatt As String
 Dim metadato As Variant
 Dim nRic As Long
 Dim dimensione As Long
 Dim Ricevuta() As String
 Dim hash() As String
 Dim IdSdi() As String
 Dim TentativiInvio() As String
 Dim dataaccoglienza() As String
 
 Dim correlato As Long
 Dim fattureCorrelate As Long
 Dim colonnaLibera As Integer
 Dim colonnahash As Integer
 Dim hashnoncorrisponde As Long
 
 Dim coloreHashNo As String
 Dim coloreHashOk As String
 coloreHashNo = RGB(255, 150, 150)
 coloreHashOk = RGB(200, 255, 200)

 Dim report As String

 If MsgBox("Vengono correlati file XML contenenti i metadati delle fatture passive ai corrispondenti documenti nella tabella visualizzata." & vbCrLf & "Si tratta di una analisi approssimativa, in cui la correlazione si basa unicamente sul nome del file." & vbCrLf & "Si conferma di volere procedere?", vbYesNo) = vbNo Then
    Exit Sub
 End If


Rem individua le colonne necessarie
 For n = 1 To 50
    If colonnaLibera = 0 And foglio.Cells(1, n).Value = "" Then
        colonnaLibera = n
    End If
    If foglio.Cells(1, n).Value = "Identificativo SDI" Then
        colonnaLibera = n
    End If
    If foglio.Cells(1, n).Value = "Hash SHA-256" Then
        colonnahash = n
    End If
 Next
 
 If colonnahash = 0 Then
    Call MsgBox("I valori degli hash non sono disponibili in tabella, per cui non potr|fffd| essere controllata la corrispondenza con il relativo metadato. Potrebbe essere necessario installare il modulo crittografico (Vedi prima pagina)", vbError)
 End If
 
Rem chiede i file da caricare
 Dim fileobj As filedialog
 Set fileobj = Application.filedialog(msoFileDialogFilePicker)
 With fileobj
    .AllowMultiSelect = True
    .Filters.Clear
    .Filters.Add "File fatture elettroniche (XML, P7M)", "*.xml, *.p7m"
    .Filters.Add "Tutti i file", "*.*"
    .FilterIndex = 1
    If .Show = 0 Then Exit Sub
    Set file_dialog = fileobj.SelectedItems
 End With
 
 TotFile = file_dialog.Count
 dimensione = TotFile
 
 ReDim Ricevuta(dimensione)
 ReDim hash(dimensione)
 ReDim IdSdi(dimensione)
 ReDim TentativiInvio(dimensione)
 ReDim dataaccoglienza(dimensione)
 

Rem analizza ogni file ricevuta
 For Each r In file_dialog
    fullfile = aprifile(r)
    If InStr(fullfile, "metadatiFattura") > 0 Then    ' estrae dati dai file estratti dal cassetto fiscale
        For Each metadato In getTagCont(fullfile, "metadato")
            If getTagCont(metadato, "nome")(0) = "nomefile" Then
                Ricevuta(nRic) = getTagCont(metadato, "valore")(0)
                nRic = nRic + 1
            End If
            If getTagCont(metadato, "nome")(0) = "hashfile" Then
                hash(nRic) = getTagCont(metadato, "valore")(0)
            End If
            If getTagCont(metadato, "nome")(0) = "idfile" Then
                IdSdi(nRic) = getTagCont(metadato, "valore")(0)
            End If
            If getTagCont(metadato, "nome")(0) = "dataaccoglienza" Then
                dataaccoglienza(nRic) = getTagCont(metadato, "valore")(0)
            End If
        Next
    Else
        If InStr(fullfile, "IdentificativoSdI") > 0 Then    ' estrae i dati dal file accompagnatorio
            filefatt = getTagCont(fullfile, "NomeFile")(0)
            Ricevuta(nRic) = filefatt
            hash(nRic) = getTagCont(fullfile, "Hash")(0)
            IdSdi(nRic) = getTagCont(fullfile, "IdentificativoSdI")(0)
            TentativiInvio(nRic) = getTagCont(fullfile, "TentativiInvio")(0)
            nRic = nRic + 1
        End If
    End If
 Next

 If nRic = 0 Then
    Call MsgBox("Nei file selezionati non |fffd| stato trovata alcun metadato.", vbCritical)
    Exit Sub
 End If


Rem aggiunge intestazioni
 foglio.Cells(1, colonnaLibera).Value = "Identificativo SDI"
 foglio.Cells(1, colonnaLibera + 1).Value = "Data accoglienza SDI"
 foglio.Cells(1, colonnaLibera + 2).Value = "Tentativi invio"
 
 
Rem compara file in elenco con file metadati
 n = 1
 Do
    file = foglio.Cells(n, 1).Value
    If file = "" Or file = "TOTALI:" Then Exit Do

    For m = 0 To nRic - 1
        If Ricevuta(m) = Dir(file) Then
            foglio.Cells(n, colonnaLibera).NumberFormat = "@" ' formato cella a testo
            foglio.Cells(n, colonnaLibera).Value = IdSdi(m)
            foglio.Cells(n, colonnaLibera + 1).Value = dataaccoglienza(m)
            foglio.Cells(n, colonnaLibera + 2).Value = TentativiInvio(m)
        
            If foglio.Cells(n, colonnahash).Value = hash(m) Then  ' verifica la corrispondenza dell'hash sha256
                foglio.Cells(n, 1).Interior.Color = coloreHashOk
            Else
                foglio.Cells(n, 1).Interior.Color = coloreHashNo
                hashnoncorrisponde = hashnoncorrisponde + 1
            End If
            correlato = 1
        End If
    Next
    If correlato = 1 Then fattureCorrelate = fattureCorrelate + 1
    n = n + 1
 Loop
 




Rem stampa la legenda
 n = n + 8
 foglio.Cells(n, 1).Value = "Legenda:"
 foglio.Cells(n, 1).Font.Bold = True ' grassetto
 n = n + 1
 foglio.Cells(n, 1).Value = "Hash corrispondente"
 foglio.Cells(n, 1).Interior.Color = coloreHashOk
 n = n + 1
 foglio.Cells(n, 1).Value = "Hash NON corrispondente"
 foglio.Cells(n, 1).Interior.Color = coloreHashNo
 n = n + 1
 foglio.Cells(n, 1).Value = "" ' sovrascrive eventuale legenda presente
 foglio.Cells(n, 1).Interior.ColorIndex = xlNone ' trasparenza
 
Rem compila il report
 report = "Caricati " & TotFile & " file, di cui:" & vbCrLf & nRic & " file metadati." & vbCrLf & "Sono stati correlati a " & fattureCorrelate & " fatture in tabella."
 If hashnoncorrisponde Then report = report & vbCrLf & "Trovati " & hashnoncorrisponde & " hash non corrispondenti."
 aggiornaReport (report)
 Beep
 Call MsgBox(report, vbInformation)

End Sub


Rem by Marco Gualmini

Attribute VB_Name = "Questa_cartella_di_lavoro"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()

    [Stato].Value = ""
    
End Sub


Private Sub Workbook_SheetBeforeDoubleClick(ByVal sH As Object, ByVal Target As Range, Cancel As Boolean)

Rem analizza doppio click sul documento

 Dim urlfile As String
 Dim numdoc As String
 Dim datadoc As Double
 
 
' doppio click su allegati
 If Application.ActiveSheet.Index = 2 And ActiveCell.Column = [MsgAllegati].Column And ActiveCell.Row = [MsgAllegati].Row Then
    Call salvaAllegati
    Exit Sub
 End If

 'doppio click su tabella documenti
 If ActiveCell.Row = 1 Then
    Exit Sub
 End If
 
 
 If ActiveCell.Value = "Esporta tutti i documenti in PDF" Then
    Call EsportaTuttoPdf(Application.ActiveSheet)
    Exit Sub
 End If
 

 If ActiveCell.Value = "Compara con le ricevute telematiche di invio" Then
    Call ComparaRicevute(Application.ActiveSheet)
    Exit Sub
 End If

 If ActiveCell.Value = "Compara con metadati dei documenti ricevuti" Then
    Call ComparaRicezioni(Application.ActiveSheet)
    Exit Sub
 End If
 

 urlfile = Cells(ActiveCell.Row, 1).Value
 numdoc = Cells(ActiveCell.Row, 6).Value
 datadoc = Cells(ActiveCell.Row, 7).Value
 If Application.ActiveSheet.Index < 4 Or urlfile = "" Or numdoc = "" Then
    Exit Sub
 End If
 
 NomeFileXml = urlfile
 a = Anteprima(urlfile, numdoc, datadoc)
 
End Sub

Rem by Marco Gualmini




' InQuest injected base64 decoded content
' *'x'
' x)br

INQUEST-PP=macro
