Attribute VB_Name = "Module1"
'This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/.

Option Explicit

Const epsilon As Double = 0.0001
Const maxTry As Long = 20
Const offset_constant As Long = 17

#If Mac Then

    #If MAC_OFFICE_VERSION >= 15 Then
    
        #If VBA7 Then ' 64-bit Excel for Mac
            
            Private Declare PtrSafe Function popen Lib "/usr/lib/libc.dylib" (ByVal command As String, ByVal mode As String) As LongPtr
            Private Declare PtrSafe Function pclose Lib "/usr/lib/libc.dylib" (ByVal file As LongPtr) As Long
            Private Declare PtrSafe Function fread Lib "/usr/lib/libc.dylib" (ByVal outStr As String, ByVal size As LongPtr, ByVal items As LongPtr, ByVal stream As LongPtr) As Long
            Private Declare PtrSafe Function feof Lib "/usr/lib/libc.dylib" (ByVal file As LongPtr) As LongPtr
            
            Function execShell(command As String, Optional ByRef exitCode As Long) As String
                Dim file As LongPtr
                file = popen(command, "r")
            
                If file = 0 Then
                    Exit Function
                End If
            
                While feof(file) = 0
                    Dim chunk As String
                    Dim read As Long
                    chunk = Space(50)
                    read = fread(chunk, 1, Len(chunk) - 1, file)
                    If read > 0 Then
                        chunk = Left$(chunk, read)
                        execShell = execShell & chunk
                    End If
                Wend
            
                exitCode = pclose(file)
            End Function
            
        #Else ' 32-bit Excel for Mac
        
            Private Declare Function popen Lib "/usr/lib/libc.dylib" (ByVal command As String, ByVal mode As String) As Long
            Private Declare Function pclose Lib "/usr/lib/libc.dylib" (ByVal file As Long) As Long
            Private Declare Function fread Lib "/usr/lib/libc.dylib" (ByVal outStr As String, ByVal size As Long, ByVal items As Long, ByVal stream As Long) As Long
            Private Declare Function feof Lib "/usr/lib/libc.dylib" (ByVal file As Long) As Long
            
            ' courtesy of Robert Knight, Developer at Hypothesis
            ' http://stackoverflow.com/questions/6136798/vba-shell-function-in-office-2011-for-mac
            
            Function execShell(command As String, Optional ByRef exitCode As Long) As String
                Dim file As Long
                file = popen(command, "r")
            
                If file = 0 Then
                    Exit Function
                End If
            
                While feof(file) = 0
                    Dim chunk As String
                    Dim read As Long
                    chunk = Space(50)
                    read = fread(chunk, 1, Len(chunk) - 1, file)
                    If read > 0 Then
                        chunk = Left$(chunk, read)
                        execShell = execShell & chunk
                    End If
                Wend
            
                exitCode = pclose(file)
            End Function
            
        #End If
        
        
        Function HTTPGet(sUrl As String, sQuery As String) As String
        
            Dim sCmd As String
            Dim sResult As String
            Dim lExitCode As Long
        
            sCmd = "curl --get -d """ & sQuery & """" & " " & sUrl
            sResult = execShell(sCmd, lExitCode)
        
            ' ToDo check lExitCode
        
            HTTPGet = sResult
        
        End Function
    #Else
        Function HTTPGet(sUrl As String, sQuery As String) As String
            
            HTTPGet = MacScript("do shell script " & Chr(34) & "curl '" & sUrl & "?" & sQuery & "'" & " --silent" & Chr(34))
            
        End Function
    #End If

#Else

        Function HTTPGet(sUrl As String, sQuery As String) As String
            
            Dim oHttpReq As Object
            Set oHttpReq = CreateObject("MSXML2.XMLHTTP")
            
            oHttpReq.Open "GET", sUrl & "?" & sQuery, "false"

            oHttpReq.send
        
            HTTPGet = oHttpReq.responseText
            
            Set oHttpReq = Nothing
        
        End Function

#End If

Private Sub GeocodeAddressUsingBingMaps(ByVal address As String, ByRef latitude As Double, ByRef longitude As Double, ByVal BingMapsKey As String)
    
    'On Error Resume Next
        
    latitude = 91
    longitude = 181
    
    'ThisWorkbook.Worksheets("1.Locations").Cells(20, 1).Value = "http://dev.virtualearth.net/REST/v1/Locations?q=" & address & "&o=xml&maxResults=1&key=" & BingMapsKey
    
    Dim try_count As Long
    try_count = 0
    
    Dim stopFlag As Boolean
    stopFlag = False
    
    Dim UrlString As String
    UrlString = "http://dev.virtualearth.net/REST/v1/Locations"
    
    Dim QueryString As String
    Dim xmlString As String

    Dim grabStartIndex As Long
    Dim grabLength As Long
    Dim endIndex As Long
    
    Do While stopFlag = False
            
        QueryString = "q=" & address & "&o=xml&key=" & BingMapsKey
    
        xmlString = HTTPGet(UrlString, QueryString)

        Do While InStr(xmlString, "200") <= 0 And InStr(xmlString, "Unauthorized") <= 0 And (try_count < maxTry)
            Application.Wait (Now() + CDate("00:00:01"))
            try_count = try_count + 1
            xmlString = HTTPGet(UrlString, QueryString)
        Loop
            
        If InStr(xmlString, "Unauthorized") > 0 Then
            latitude = 92
            longitude = 182
            
            stopFlag = True
        ElseIf InStr(xmlString, "Route") > 0 Then
            
            endIndex = InStr(xmlString, "Route")

            grabStartIndex = InStrRev(xmlString, "<Latitude>", endIndex) + Len("<Latitude>")
            grabLength = InStrRev(xmlString, "</Latitude>", endIndex) - grabStartIndex
            latitude = Val(Mid(xmlString, grabStartIndex, grabLength))
            
            grabStartIndex = InStrRev(xmlString, "<Longitude>", endIndex) + Len("<Longitude>")
            grabLength = InStrRev(xmlString, "</Longitude>", endIndex) - grabStartIndex
            longitude = Val(Mid(xmlString, grabStartIndex, grabLength))
            
            stopFlag = True
            
        ElseIf InStr(xmlString, "Display") > 0 Then
            
            endIndex = InStr(xmlString, "Display")

            grabStartIndex = InStrRev(xmlString, "<Latitude>", endIndex) + Len("<Latitude>")
            grabLength = InStrRev(xmlString, "</Latitude>", endIndex) - grabStartIndex
            latitude = Val(Mid(xmlString, grabStartIndex, grabLength))
            
            grabStartIndex = InStrRev(xmlString, "<Longitude>", endIndex) + Len("<Longitude>")
            grabLength = InStrRev(xmlString, "</Longitude>", endIndex) - grabStartIndex
            longitude = Val(Mid(xmlString, grabStartIndex, grabLength))
            
            stopFlag = True
            
        Else
            try_count = try_count + 1
            Application.Wait (Now() + CDate("00:00:01"))
        End If
         
        If try_count >= maxTry Then
           stopFlag = True
        End If
    Loop
    
End Sub

Sub PopulateDistances()
    
    Dim WorksheetExists As Boolean
    Dim MissingCoordinates As Boolean
    Dim MissingDistances As Boolean
    Dim reply As Integer
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim nonpopulated_distance_count As Long
    
    WorksheetExists = CheckWorksheetExistence("VRP Solver Console") And CheckWorksheetExistence("1.Locations") And CheckWorksheetExistence("2.Distances")
    If WorksheetExists = False Then
        reply = MsgBox("Worksheets VRP Solver Console, 1.Locations, and 2.Distances must exist for distances to be computed.", vbOKOnly, "VRP Spreadsheet Solver")
        Exit Sub
    End If
    
    Dim distances_populate_option As String
    distances_populate_option = ThisWorkbook.Worksheets("VRP Solver Console").Cells(7, 3).value
        
    Dim durations_populate_option As String
    durations_populate_option = ThisWorkbook.Worksheets("VRP Solver Console").Cells(8, 3).value
    
    If distances_populate_option = "Manual entry" Then
        Exit Sub
    End If
    
    Dim num_depots As Long
    num_depots = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).value
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).value
    
    Dim num_locations As Long
    num_locations = num_depots + num_customers
    
    Dim estimatedTime As Double
    estimatedTime = num_locations * (num_locations + 1) * 0.1
    
    MissingCoordinates = False
    For i = 1 To num_locations
        For j = 4 To 5
            If WorksheetFunction.IsNumber(ThisWorkbook.Worksheets("1.Locations").Cells(1 + i, j)) = False Then
                MissingCoordinates = True
            End If
        Next j
    Next i
    
    If MissingCoordinates = True Then
        reply = MsgBox("All coordinates must be input for the distances to be populated.", vbOKOnly, "VRP Spreadsheet Solver")
        Exit Sub
    End If
    
    If distances_populate_option = "Bing Maps driving distances (km)" Or distances_populate_option = "Bing Maps driving distances (miles)" Then
        Dim BingMapsKey As String
        BingMapsKey = ThisWorkbook.Worksheets("VRP Solver Console").Cells(2, 3).value
        
        If Len(BingMapsKey) < 32 Then
            reply = MsgBox("A valid Bing Maps Key is required for the distances to be determined. You can get a free key at https://www.bingmapsportal.com/", vbOKOnly, "VRP Spreadsheet Solver")
            Exit Sub
        End If
        
        reply = MsgBox("Populating the distances using Bing Maps GIS service will overwrite existing distance data and take some time (estimated " & estimatedTime & " seconds). By clicking the Yes button below, you confirm that you accept Bing Maps Terms of Service. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        End If
    Else
        If ThisWorkbook.Worksheets("2.Distances").Cells(1, 6) <> "" Then
            reply = MsgBox("This will overwrite existing distance data. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
            If reply = vbNo Then
                Exit Sub
            End If
        End If
    End If
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
        
    ThisWorkbook.Worksheets("2.Distances").Activate
    
    Dim myHour As Long
    Dim myMinute As Long
    Dim mySeconds As Long
        
    Range(Cells(1, 7), Cells(num_locations * num_locations + 1, 8)).Select
    Selection.Clear
    
    If distances_populate_option = "Bing Maps driving distances (km)" Or distances_populate_option = "Bing Maps driving distances (miles)" Then
    
        'C style coding
        
        Dim optimize_option As String
        optimize_option = ThisWorkbook.Worksheets("VRP Solver Console").Cells(9, 3).value
        
        Dim UrlString As String
        Dim QueryString As String
        Dim xmlString As String

        Dim from_index As Long
        Dim to_index As Long
        
        Dim searchStartIndex As Long
        Dim grabStartIndex As Long
        Dim grabLength As Long
        
        Dim try_count As Long
        
        nonpopulated_distance_count = 0
        
        Dim num_arcs As Long
        num_arcs = num_locations * (num_locations - 1)
        
        Dim sequence_array() As Long
        
        ReDim sequence_array(0 To num_arcs)
        
        k = 0
        For i = 0 To num_locations - 1
            sequence_array(k) = i
            k = k + 1
            
            For j = i + 2 To num_locations - 1
                If (i <> 0) Or (j <> num_locations - 1) Then
                    sequence_array(k) = j
                    k = k + 1
                    sequence_array(k) = i
                    k = k + 1
                End If
            Next j
        Next i
        
        sequence_array(k) = 0
        k = k + 1
        
        For i = num_locations - 1 To 0 Step -1
            sequence_array(k) = i
            k = k + 1
        Next i
        
        i = 0
        Do
            Application.ScreenUpdating = True
            Application.StatusBar = "Populating distances, " & Format(i / num_arcs, "00%") & " complete."
            Application.ScreenUpdating = False
            
            If Cells(1, 6).value <> (distances_populate_option & " / " & durations_populate_option) Then

                MissingDistances = True

            Else
            
                MissingDistances = False
                
                j = i
                Do
                    from_index = sequence_array(j)
                    to_index = sequence_array(j + 1)
    
                    If (ThisWorkbook.Worksheets("2.Distances").Cells((from_index * num_locations) + to_index + 2, 3).value = 0) Or (ThisWorkbook.Worksheets("2.Distances").Cells((from_index * num_locations) + to_index + 2, 3).value = "") Then
                        MissingDistances = True
                    End If
                    
                    j = j + 1
                Loop While (j < num_arcs) And (j < i + 23)
                        
            End If
            
            If MissingDistances = True Then
                    
                'construct the bing maps api url now
                
                UrlString = "http://dev.virtualearth.net/REST/V1/Routes/Driving"
                
                QueryString = "o=xml&wp.0="
                
                QueryString = QueryString & Replace(Round(ThisWorkbook.Worksheets("1.Locations").Cells(2 + sequence_array(i), 4).value, 6), ",", ".") & "," & Replace(Round(ThisWorkbook.Worksheets("1.Locations").Cells(2 + sequence_array(i), 5).value, 6), ",", ".")
                
                j = 0
                Do
                    j = j + 1
                    
                    QueryString = QueryString & "&wp." & j & "=" & Replace(Round(ThisWorkbook.Worksheets("1.Locations").Cells(2 + sequence_array(i + j), 4).value, 6), ",", ".") & "," & Replace(Round(ThisWorkbook.Worksheets("1.Locations").Cells(2 + sequence_array(i + j), 5).value, 6), ",", ".")
                Loop While (i + j < num_arcs) And (j <= 23)
                
                QueryString = QueryString & "&ra=excludeItinerary"
                
                If optimize_option = "Shortest" Then
                    QueryString = QueryString & "&optimize=distance"
                ElseIf optimize_option = "Fastest" Then
                    QueryString = QueryString & "&optimize=time"
                ElseIf optimize_option = "Fastest - Real Time Traffic" Then
                    QueryString = QueryString & "&optimize=timeWithTraffic"
                Else
                    QueryString = QueryString & "&optimize=time"
                End If
                
                If distances_populate_option = "Bing Maps driving distances (miles)" Then
                    QueryString = QueryString & "&du=mi"
                End If
                
                QueryString = QueryString & "&key=" & BingMapsKey
                
                'MsgBox QueryString
                'ThisWorkbook.Worksheets("2.Distances").Cells(i + 1, 10).Value = QueryString
                    
                try_count = 0
                
                xmlString = HTTPGet(UrlString, QueryString)
    
                Do While InStr(xmlString, "200") <= 0 And InStr(xmlString, "UnauthorizedCredentialsExpiredAccess") <= 0 And InStr(xmlString, "No route was found for the waypoints provided.") <= 0 And InStr(xmlString, "One or more waypoints can't be routed because they are too far from any roads.") <= 0 And (try_count < maxTry)
                    Application.Wait (Now() + CDate("00:00:01"))
                    try_count = try_count + 1
                    xmlString = HTTPGet(UrlString, QueryString)
                Loop
                
                If InStr(xmlString, "UnauthorizedCredentialsExpiredAccess") > 0 Then
                    reply = MsgBox("Your Bing Maps key is not valid or has expired. Remaining distances will not be populated.", vbOKOnly, "VRP Spreadsheet Solver")
                    Exit Sub
                ElseIf InStr(xmlString, "No route was found for the waypoints provided.") > 0 Then
                    reply = MsgBox("No driving route could be found between some of the locations. Please check the addresses and the coordinates.", vbOKOnly, "VRP Spreadsheet Solver")
                    Exit Sub
                ElseIf InStr(xmlString, "One or more waypoints can't be routed because they are too far from any roads.") > 0 Then
                    reply = MsgBox("One or more locations are too far from any roads. Please check the addresses and the coordinates.", vbOKOnly, "VRP Spreadsheet Solver")
                    Exit Sub
                ElseIf InStr(xmlString, "RouteLeg") > 0 Then
                    
                    'Cells(1, 7).Value = xmlString
                    
                    searchStartIndex = 1
                    j = i
                    Do
                        'MsgBox "Distance: " & sequence_array(j) & "->" & sequence_array(j + 1) & " " & ixnDistance.Text 'Kilometers
                        
                        from_index = sequence_array(j)
                        to_index = sequence_array(j + 1)
                    
                        searchStartIndex = InStr(searchStartIndex, xmlString, "<RouteLeg>")
                        
                        grabStartIndex = InStr(searchStartIndex, xmlString, "<TravelDistance>") + Len("<TravelDistance>")
                        grabLength = InStr(searchStartIndex, xmlString, "</TravelDistance>") - grabStartIndex
                        
                        ThisWorkbook.Worksheets("2.Distances").Cells((from_index * num_locations) + to_index + 2, 3).value = Val(Mid(xmlString, grabStartIndex, grabLength))
                        
                        If durations_populate_option = "Bing Maps driving durations" Then
                            grabStartIndex = InStr(searchStartIndex, xmlString, "<TravelDuration>") + Len("<TravelDuration>")
                            grabLength = InStr(searchStartIndex, xmlString, "</TravelDuration>") - grabStartIndex
                            
                            mySeconds = Val(Mid(xmlString, grabStartIndex, grabLength))
                            myHour = Application.WorksheetFunction.Floor(mySeconds / 3600, 1)
                            mySeconds = mySeconds - (3600 * myHour)
                            myMinute = Application.WorksheetFunction.Round(mySeconds / 60, 1)
                            If myMinute = 60 Then
                                myHour = myHour + 1
                                myMinute = 0
                            End If
        
                            ThisWorkbook.Worksheets("2.Distances").Cells((from_index * num_locations) + to_index + 2, 4).value = myHour & ":" & myMinute
                        ElseIf durations_populate_option = "Average vehicle speed" Then
                            ThisWorkbook.Worksheets("2.Distances").Cells((from_index * num_locations) + to_index + 2, 4).formula = "= " & Cells((from_index * num_locations) + to_index + 2, 3).address(False, False) & " / (24 * 'VRP Solver Console'!C10)"
                        End If
                        searchStartIndex = searchStartIndex + 1
    
                        j = j + 1
                    Loop While (j < num_arcs) And (j < i + 23)
                    
                    Application.Wait (Now() + CDate("00:00:01"))
                Else
                    j = i
                    Do
                        nonpopulated_distance_count = nonpopulated_distance_count + 1
                        
                        from_index = sequence_array(j)
                        to_index = sequence_array(j + 1)
                        
                        ThisWorkbook.Worksheets("2.Distances").Cells(nonpopulated_distance_count + 1, 7).value = ThisWorkbook.Worksheets("1.Locations").Cells(2 + from_index, 2).value
                        
                        ThisWorkbook.Worksheets("2.Distances").Cells(nonpopulated_distance_count + 1, 8).value = ThisWorkbook.Worksheets("1.Locations").Cells(2 + to_index, 2).value
                        
                        j = j + 1
                    Loop While (j < num_arcs) And (j < i + 23)
                End If
                
            End If
            
            'MsgBox i & " " & j
            i = i + 23
            
        Loop While i < num_arcs
        
        Cells(1, 1).Select
        Application.StatusBar = False
        Application.ScreenUpdating = True
        Application.Calculation = xlCalculationAutomatic
        
        If nonpopulated_distance_count > 0 Then
            reply = MsgBox("Distances populated. Some distances are missing due to a connection error.", vbInformation, "VRP Spreadsheet Solver")
            ThisWorkbook.Worksheets("2.Distances").Cells(1, 7).value = "Warning: Distances for the pairs below have not been populated."
        Else
            reply = MsgBox("Distances populated.", vbInformation, "VRP Spreadsheet Solver")
        End If
        
    Else
    
        Dim drivingDistance As String
        Dim drivingTime As String
        
        Dim Lat1 As Double
        Dim Lon1 As Double
        Dim Lat2 As Double
        Dim Lon2 As Double
        
        Dim myDistance As Double
        Dim mySpeed As Long
        
        mySpeed = ThisWorkbook.Worksheets("VRP Solver Console").Cells(10, 3).value
        
        k = 2
        For i = 1 To num_locations
            For j = 1 To num_locations
                If i <> j Then
                    Lat1 = ThisWorkbook.Worksheets("1.Locations").Cells(1 + i, 4).value
                    Lon1 = ThisWorkbook.Worksheets("1.Locations").Cells(1 + i, 5).value
                    Lat2 = ThisWorkbook.Worksheets("1.Locations").Cells(1 + j, 4).value
                    Lon2 = ThisWorkbook.Worksheets("1.Locations").Cells(1 + j, 5).value
                    
                    If distances_populate_option = "Euclidian distances" Then
                        myDistance = EuclidianDistance(Lat1, Lon1, Lat2, Lon2)
                    End If
                    
                    If distances_populate_option = "Rounded Euclidian distances" Then
                        myDistance = EuclidianDistance(Lat1, Lon1, Lat2, Lon2)
                        myDistance = Application.WorksheetFunction.Floor(myDistance + 0.5, 1)
                    End If
                    
                    If distances_populate_option = "Bird flight distances (km)" Or distances_populate_option = "Bird flight distances (miles)" Then
                        myDistance = GeosedicDistanceApproximation(Lat1, Lon1, Lat2, Lon2, distances_populate_option)
                    End If
                    
                    If distances_populate_option = "Rectilinear (Manhattan) distances" Then
                        myDistance = RectilinearDistance(Lat1, Lon1, Lat2, Lon2)
                    End If
                    
                    ThisWorkbook.Worksheets("2.Distances").Cells(k, 3).value = myDistance
                    
'                    myHour = Application.WorksheetFunction.Floor(myDistance / mySpeed, 1)
'                    myDistance = myDistance - (myHour * mySpeed)
'                    myMinute = myDistance * 60 / mySpeed
'
'                    If myHour + myMinute = 0 Then
'                        myMinute = 1
'                    End If
'
'                    If myMinute = 60 Then
'                        myHour = myHour + 1
'                        myMinute = 0
'                    End If
'
'                    ThisWorkbook.Worksheets("2.Distances").Cells(k, 4).value = myHour & ":" & myMinute

                    ThisWorkbook.Worksheets("2.Distances").Cells(k, 4).formula = "= " & Cells(k, 3).address(False, False) & " / (24 * 'VRP Solver Console'!C10)"
                    
                End If
                k = k + 1
            Next j
        Next i
        
        Cells(1, 1).Select
        Application.ScreenUpdating = True
        Application.Calculation = xlCalculationAutomatic

        reply = MsgBox("Distances populated.", vbOKOnly, "VRP Spreadsheet Solver")
        
    End If
    
    Cells(1, 6).value = distances_populate_option & " / " & durations_populate_option
    
End Sub

Function CheckWorksheetExistence(sheetName As String) As Boolean
    
    Dim WorksheetExists As Boolean
    WorksheetExists = False
    Dim Sht As Worksheet
    For Each Sht In ThisWorkbook.Worksheets
        If (Sht.Name = sheetName) Then
            WorksheetExists = True
        End If
    Next Sht
    
    CheckWorksheetExistence = WorksheetExists
End Function
Private Function EuclidianDistance(Lat1 As Double, Lon1 As Double, Lat2 As Double, Lon2 As Double) As Double
    EuclidianDistance = Sqr((Lat1 - Lat2) ^ 2 + (Lon1 - Lon2) ^ 2)
End Function
Private Function RectilinearDistance(Lat1 As Double, Lon1 As Double, Lat2 As Double, Lon2 As Double) As Double
    RectilinearDistance = Abs(Lat1 - Lat2) + Abs(Lon1 - Lon2)
End Function
Private Function GeosedicDistanceApproximation(Lat1 As Double, Lon1 As Double, Lat2 As Double, Lon2 As Double, distances_populate_option As String) As Double

    'from http://www.cpearson.com/excel/LatLong.aspx
    
    Const C_PI As Double = 3.14159265358979
    Const C_RADIUS_EARTH_KM As Double = 6370.97327862
    Const C_MILES_PER_KM As Double = 0.621371
    
    Dim Delta As Double
    
    ' convert to radians: radians = (degrees/180) * PI
    Lat1 = (Lat1 / 180) * C_PI
    Lat2 = (Lat2 / 180) * C_PI
    Lon1 = (Lon1 / 180) * C_PI
    Lon2 = (Lon2 / 180) * C_PI
    
    ' get the central spherical angle
    Delta = ((2 * ArcSin(Sqr((Sin((Lat1 - Lat2) / 2) ^ 2) + Cos(Lat1) * Cos(Lat2) * (Sin((Lon1 - Lon2) / 2) ^ 2)))))

    If distances_populate_option = "Bird flight distances (km)" Then
        GeosedicDistanceApproximation = Delta * C_RADIUS_EARTH_KM
    Else
        GeosedicDistanceApproximation = Delta * C_RADIUS_EARTH_KM * C_MILES_PER_KM
    End If
    
End Function
Private Function ArcSin(x As Double) As Double
    ' VBA doesn't have an ArcSin function. Improvise.
    ArcSin = Atn(x / Sqr(-x * x + 1))
End Function

Sub SetupConsoleWorksheet()

    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("VRP Solver Console")
    
    Dim reply As Integer
    If WorksheetExists = False Then
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.count)).Name = "VRP Solver Console"
    End If
    
    ThisWorkbook.Worksheets("VRP Solver Console").Activate
        
    'Problem parameters
    
    Cells(1, 1).value = "Sequence"
    Cells(1, 2).value = "Parameter"
    Cells(1, 3).value = "Value"
    Cells(1, 4).value = "Remarks"
    
    Range(Cells(1, 1), Cells(1, 4)).Select
    Selection.Font.Bold = True
    
    Range(Cells(1, 1), Cells(1, 4)).Select
    Selection.Interior.ColorIndex = 1
    Selection.Font.ColorIndex = 2
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    'GIS License
    
    Cells(2, 1).value = "0.Optional - GIS License"
    Cells(2, 1).Select
    Selection.Font.Bold = True
    
    Cells(2, 2).value = "Bing Maps Key"
    Cells(2, 3).Font.ColorIndex = 2
    Cells(2, 3).Interior.ColorIndex = 50
    Cells(2, 4).value = "You can get a free trial key at https://www.bingmapsportal.com/"
        
    Range(Cells(2, 1), Cells(2, 4)).Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Cells(4, 1).value = "1.Locations"
    Cells(4, 1).Select
    Selection.Font.Bold = True
    
    Cells(4, 2).value = "Number of depots"
    
    Cells(4, 3).Validation.Delete
    With Cells(4, 3).Validation
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="1", Formula2:="20"
        .ErrorMessage = "Please enter an integer from 1 to 20"
    End With
    
    If Cells(4, 3).value = "" Then
        Cells(4, 3).value = 1
    End If
    
    Cells(4, 3).Font.ColorIndex = 2
    Cells(4, 3).Interior.ColorIndex = 50
    Cells(4, 4).value = "[1,20]"
       
    Cells(5, 2).value = "Number of customers"
    
    Cells(5, 3).Validation.Delete
    With Cells(5, 3).Validation
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="5", Formula2:="200"
        .ErrorMessage = "Please enter an integer from 5 to 200"
    End With
    
    If Cells(5, 3).value = "" Then
        Cells(5, 3).value = 10
    End If
    
    Cells(5, 3).Font.ColorIndex = 2
    Cells(5, 3).Interior.ColorIndex = 50
    Cells(5, 4).value = "[5,200]"
        
    Range(Cells(4, 1), Cells(5, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Cells(7, 1).value = "2.Distances"
    Cells(7, 1).Select
    Selection.Font.Bold = True
    
    Cells(7, 2).value = "Distance computation method"
    Cells(7, 3).Validation.Delete
    With Cells(7, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Manual entry, Euclidian distances, Rounded Euclidian distances, Rectilinear (Manhattan) distances, Bird flight distances (km), Bird flight distances (miles), Bing Maps driving distances (km), Bing Maps driving distances (miles)"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    Cells(7, 3).value = "Bing Maps driving distances (km)"
    Cells(7, 3).Font.ColorIndex = 2
    Cells(7, 3).Interior.ColorIndex = 50
    Cells(7, 4).value = "Recommendation: Use 'postcode, country' format for addresses"
    
    Cells(8, 2).value = "Duration computation method"
    Cells(8, 3).Validation.Delete
    With Cells(8, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Manual entry, Average vehicle speed, Bing Maps driving durations"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    Cells(8, 3).value = "Bing Maps driving durations"
    Cells(8, 3).Font.ColorIndex = 2
    Cells(8, 3).Interior.ColorIndex = 50
    Cells(8, 4).value = "" '"Recommendation: Use 'postcode, country' format for addresses"
    
    Cells(9, 2).value = "Bing Maps route type"
    
    Cells(9, 3).Validation.Delete
    With Cells(9, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Shortest, Fastest, Fastest - Real Time Traffic"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    Cells(9, 3).value = "Fastest"
    Cells(9, 3).Font.ColorIndex = 2
    Cells(9, 3).Interior.ColorIndex = 50
    Cells(9, 4).value = "Recommendation: Use 'Fastest'"
    
    Cells(10, 2).value = "Average vehicle speed"
    
    Cells(10, 3).Validation.Delete
    With Cells(10, 3).Validation
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=epsilon
        .ErrorMessage = "Please enter a positive value"
    End With
        
    Cells(10, 3).value = "70.0"
    Cells(10, 3).Font.ColorIndex = 2
    Cells(10, 3).Interior.ColorIndex = 50
    Cells(10, 4).value = "" '"Not used for 'Bing Maps driving distances' options"
    
    Range(Cells(7, 1), Cells(10, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Cells(12, 1).value = "3.Vehicles"
    Cells(12, 1).Select
    Selection.Font.Bold = True
    
    Cells(12, 2).value = "Number of vehicle types"
        
    Cells(12, 3).Validation.Delete
    With Cells(12, 3).Validation
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="1", Formula2:="10"
        .ErrorMessage = "Please enter an integer from 1 to 10"
    End With
    
    If Cells(12, 3).value = "" Then
        Cells(12, 3).value = 1
    End If
    
    Cells(12, 3).Font.ColorIndex = 2
    Cells(12, 3).Interior.ColorIndex = 50
    Cells(12, 4).value = "" '"Heterogeneous VRP if greater than 1"
    
    Range(Cells(12, 1), Cells(12, 4)).Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Cells(14, 1).value = "4.Solution"
    Cells(14, 1).Select
    Selection.Font.Bold = True
        
    Cells(14, 2).value = "Do the vehicles return to their depot(s)?"
    
    With Cells(14, 3).Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="No, Yes - only once at the end, Yes - may do so multiple times"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    Cells(14, 3).value = "Yes - only once at the end"
    Cells(14, 3).Font.ColorIndex = 2
    Cells(14, 3).Interior.ColorIndex = 50
    
    Cells(14, 4).value = "" '"Open VRP if no return"
    
    Cells(15, 2).value = "Time window type"
    
    Cells(15, 3).Validation.Delete
    With Cells(15, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Hard, Soft"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    Cells(15, 3).value = "Hard"
    Cells(15, 3).Font.ColorIndex = 2
    Cells(15, 3).Interior.ColorIndex = 50
    
    Cells(16, 2).value = "Backhauls?"
    
    Cells(16, 3).Validation.Delete
    With Cells(16, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    Cells(16, 3).value = "No"
    Cells(16, 3).Font.ColorIndex = 2
    Cells(16, 3).Interior.ColorIndex = 50
    
    Cells(16, 4).value = "If activated, delivery locations must be visited before pickup locations"

    Range(Cells(14, 1), Cells(16, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    'Visualization parameters
    
    Cells(18, 1).value = "5.Optional - Visualization"
    Cells(18, 1).Select
    Selection.Font.Bold = True
    
    Cells(18, 2).value = "Visualization background"
    
    Cells(18, 3).Validation.Delete
    With Cells(18, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Blank, Bing Maps"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(18, 3).value = "Bing Maps"
    Cells(18, 3).Font.ColorIndex = 2
    Cells(18, 3).Interior.ColorIndex = 50

    Cells(19, 2).value = "Location labels"
        
    Cells(19, 3).Validation.Delete
    With Cells(19, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Blank, Location IDs, Location names, (Time window start;Time window end), Service time, Pickup amount, Delivery amount, (Pickup amount; Delivery amount), Profit"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(19, 3).value = "Location IDs"
    Cells(19, 3).Font.ColorIndex = 2
    Cells(19, 3).Interior.ColorIndex = 50
    
    Range(Cells(18, 1), Cells(19, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    'Algorithmic parameters
    
    Cells(21, 1).value = "6.Solver"
    Cells(21, 1).Select
    Selection.Font.Bold = True
    
    Cells(21, 2).value = "Warm start?"
    
    Cells(21, 3).Validation.Delete
    With Cells(21, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(21, 3).value = "Yes"
    Cells(21, 3).Font.ColorIndex = 2
    Cells(21, 3).Interior.ColorIndex = 50
    
    Cells(22, 2).value = "Show progress on the status bar?"
    
    Cells(22, 3).Validation.Delete
    With Cells(22, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(22, 3).value = "No"
    Cells(22, 3).Font.ColorIndex = 2
    Cells(22, 3).Interior.ColorIndex = 50
    
    'Cells(22, 4).value = "May slow down the optimization algorithm  "
    
    Cells(23, 2).value = "CPU time limit (seconds)"
    
    Cells(23, 3).Validation.Delete
    With Cells(23, 3).Validation
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreaterEqual, Formula1:="10"
        .ErrorMessage = "Please enter a value greater than or equal to 10 seconds."
    End With
    
    If Cells(23, 3).value = "" Then
        Cells(23, 3).value = 600
    End If
    Cells(23, 3).Font.ColorIndex = 2
    Cells(23, 3).Interior.ColorIndex = 50
    
    Cells(23, 4).formula = "=CONCATENATE(" & Chr(34) & "Recommendation: At least " & Chr(34) & ", 60 * CEILING(C5 * C5 * C5 / 100000, 1)," & Chr(34) & " seconds" & Chr(34) & ")"
            
    Range(Cells(21, 1), Cells(23, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Columns("A").AutoFit
    Columns("B").AutoFit
    Columns("D").AutoFit
    
    Columns("C").EntireColumn.ColumnWidth = 28
     
    Cells(1, 1).Select
End Sub
Sub SetupLocationsWorksheet()
   
    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("1.Locations")
    
    Dim reply As Integer
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing location data, and erase distance and solution data. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            ThisWorkbook.Worksheets("1.Locations").Delete
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.count)).Name = "1.Locations"
            
            WorksheetExists = CheckWorksheetExistence("2.Distances")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("2.Distances").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("3.Vehicles")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("3.Vehicles").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("4.Solution")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("4.Solution").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("5.Visualization")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("5.Visualization").Delete
            End If
            
            Application.DisplayAlerts = True
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.count)).Name = "1.Locations"
    End If
    
    ThisWorkbook.Worksheets("1.Locations").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim excel_version As Double
    excel_version = Val(Application.Version)
    
    Dim num_depots As Long
    num_depots = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).value
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).value
    
    Dim num_locations As Long
    num_locations = num_depots + num_customers
    
    Dim formulaText As String
    
    Cells(1, 1).value = "Location ID"
    Cells(1, 2).value = "Name"
    Cells(1, 3).value = "Address"
    Cells(1, 4).value = "Latitude (y)"
    Cells(1, 5).value = "Longitude (x)"
    Cells(1, 6).value = "Time window start"
    Cells(1, 7).value = "Time window end"
    Cells(1, 8).value = "Must be visited?"
    Cells(1, 9).value = "Service time"
    Cells(1, 10).value = "Pickup amount"
    Cells(1, 11).value = "Delivery amount"
    Cells(1, 12).value = "Profit"
    
    Range(Cells(1, 1), Cells(1, 12)).Select
    Selection.Font.Bold = True
    
    Columns("D:E").EntireColumn.ColumnWidth = 11
    
    Dim i As Long
    Dim row_cnt As Long
    row_cnt = 2
    
    For i = 1 To num_locations
    
        Range(Cells(1 + i, 1), Cells(1 + i, 12)).Select
        Selection.Font.ColorIndex = 2
        Selection.Interior.ColorIndex = 50
        
        If i Mod 2 = 0 Then
            Selection.Interior.TintAndShade = 0.02
        Else
            Selection.Interior.TintAndShade = -0.02
        End If
        
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .TintAndShade = 0
            If i <> num_depots Then
                .ColorIndex = 16
                .Weight = xlThin
            Else
                .ColorIndex = 2
                .Weight = xlThick
            End If
        End With
        
        Cells(1 + i, 1).value = i - 1
        Cells(1 + i, 1).Font.ColorIndex = 2
        Cells(1 + i, 1).Interior.ColorIndex = 1
        
'        Cells(1 + i, 1).FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(1 + i, 1).address(false, false)& ")"
'        Cells(1 + i, 1).FormatConditions(1).Interior.ColorIndex = 3
        
        formulaText = "=ISBLANK(" & Cells(1 + i, 1).address(False, False) & ")"
        formulaText = GetLocalizedFormula(formulaText)
        
        Cells(1 + i, 1).FormatConditions.Add(xlExpression, xlGreater, formulaText).Interior.ColorIndex = 3
        
        If i <= num_depots Then
            If num_depots = 1 Then
                Cells(1 + i, 2).value = "Depot"
            Else
                Cells(1 + i, 2).value = "Depot " & Chr(64 + i)
            End If
        Else
            Cells(1 + i, 2).value = "Customer " & i - num_depots
        End If
        
'        Cells(1 + i, 2).FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(1 + i, 2).address(false, false)& ")"
'        Cells(1 + i, 2).FormatConditions(1).Interior.ColorIndex = 3
        
        formulaText = "=ISBLANK(" & Cells(1 + i, 2).address(False, False) & ")"
        formulaText = GetLocalizedFormula(formulaText)
        
        Cells(1 + i, 2).FormatConditions.Add(xlExpression, xlGreater, formulaText).Interior.ColorIndex = 3
        
        Cells(1 + i, 4).NumberFormat = "0.0000000"
        'formulaText = "=NOT(OR(ISBLANK(" & Cells(1 + i, 4).address(false, false)& "),ISNUMBER(" & Cells(1 + i, 4).address(false, false)& ")))"
        'Cells(1 + i, 4).FormatConditions.Add Type:=xlExpression, Formula1:="=NOT(OR(ISBLANK(" & Cells(1 + i, 4).address(false, false)& "),ISNUMBER(" & Cells(1 + i, 4).address(false, false)& ")))"
        'Cells(1 + i, 4).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(1 + i, 5).NumberFormat = "0.0000000"
        'formulaText = "=NOT(OR(ISBLANK(" & Cells(1 + i, 5).address(false, false)& "),ISNUMBER(" & Cells(1 + i, 5).address(false, false)& ")))"
        'Cells(1 + i, 5).FormatConditions.Add Type:=xlExpression, Formula1:="=NOT(OR(ISBLANK(" & Cells(1 + i, 5).address(false, false)& "),ISNUMBER(" & Cells(1 + i, 5).address(false, false)& ")))"
        'Cells(1 + i, 5).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(1 + i, 6).NumberFormat = "hh:mm"
        Cells(1 + i, 6).value = "00:00"
        formulaText = "=" & Cells(1 + i, 7).address(False, False) & "-" & Cells(1 + i, 9).address
        Cells(1 + i, 6).FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=formulaText
        Cells(1 + i, 6).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(1 + i, 7).NumberFormat = "hh:mm"
        Cells(1 + i, 7).value = "23:59"
        formulaText = "=" & Cells(1 + i, 6).address(False, False) & "+" & Cells(1 + i, 9).address
        Cells(1 + i, 7).FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, Formula1:=formulaText
        Cells(1 + i, 7).FormatConditions(1).Interior.ColorIndex = 3
        
        If i > num_depots Then
            With Cells(1 + i, 8).Validation
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Must be visited, May be visited, Don't visit"
                .IgnoreBlank = True
                .InCellDropdown = True
            End With
            Cells(1 + i, 8).value = "Must be visited"
            
            Cells(1 + i, 8).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="May be visited"
            Cells(1 + i, 8).FormatConditions(1).Interior.ColorIndex = 4
            
            Cells(1 + i, 8).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="Don't visit"
            Cells(1 + i, 8).FormatConditions(2).Interior.ColorIndex = 43
        Else
            Cells(1 + i, 8).value = "Starting location"
        End If
        
        Cells(1 + i, 9).NumberFormat = "[h]:mm"
        Cells(1 + i, 9).value = "00:00"
        
        formulaText = "=" & Cells(1 + i, 7).address(False, False) & "-" & Cells(1 + i, 6).address(False, False) & " + " & epsilon

        formulaText = Replace(formulaText, ",", ".")
        formulaText = GetLocalizedFormula(formulaText)

        Cells(1 + i, 9).FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=formulaText
        Cells(1 + i, 9).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(1 + i, 10).value = 0
        
'        With Cells(1 + i, 10).Validation
'            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
'            .ErrorMessage = "Please enter a nonnegative value"
'        End With
        
        Cells(1 + i, 11).value = 0
        
        With Cells(1 + i, 11).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
            .ErrorMessage = "Please enter a nonnegative value"
        End With
                
        Cells(1 + i, 12).value = 0
    Next i
    
    Range(Cells(2 + num_depots, 10), Cells(1 + num_locations, 10)).Select
    
    If excel_version > 13.9 Then
        Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, Formula1:="0"
        Selection.FormatConditions(1).Interior.ColorIndex = 45
    Else
        Selection.FormatConditions.Add(xlCellValue, xlLess, 0).Interior.ColorIndex = 45
    End If
    
    For i = 2 To 12
        Range(Cells(1, i), Cells(1 + num_locations, i)).Select
        
        With Selection.Borders(xlRight)
            .LineStyle = xlContinuous
            .TintAndShade = 0
            .ColorIndex = 16
            .Weight = xlThin
        End With
    Next i
    
    ' Display all duplicate values in red
    Dim uv As UniqueValues
    Set uv = Range(Cells(2, 2), Cells(1 + num_depots + num_customers, 2)).FormatConditions.AddUniqueValues
    uv.DupeUnique = xlDuplicate
    uv.Interior.ColorIndex = 3
    uv.StopIfTrue = False
    
    Range(Cells(2, 8), Cells(1 + num_depots, 12)).Interior.ColorIndex = 1
    
    Columns("A:N").AutoFit
'    Columns("A:N").Select
'    ActiveWindow.zoom = True
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(1, 1).Select
    
    reply = MsgBox("Locations worksheet setup complete.", vbInformation, "VRP Spreadsheet Solver")
    
End Sub
Sub SetupDistancesWorksheet()

    Dim reply As Integer
    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("1.Locations")
    If WorksheetExists = False Then
        reply = MsgBox("Worksheets 1.Locations must exist for the distance worksheet to be created.", vbOKOnly, "VRP Spreadsheet Solver")
        Exit Sub
    End If
    
    Dim num_depots As Long
    num_depots = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).value
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).value
    
    Dim num_locations As Long
    num_locations = num_depots + num_customers
    
    Dim estimatedTime As Double
    estimatedTime = num_locations * num_locations * 0.002
    
    Dim nameArray() As String
    ReDim nameArray(1 To num_locations)
    
    Dim i As Long
    For i = 1 To num_locations
        nameArray(i) = ThisWorkbook.Worksheets("1.Locations").Cells(1 + i, 2).value
    Next i
    
    Dim j As Long
    For i = 1 To num_locations
        For j = i + 1 To num_locations
            If nameArray(i) = nameArray(j) Then
                reply = MsgBox("Location name " & nameArray(i) & " has been used for multiple locations. Please correct the error and try again.", vbCritical, "VRP Spreadsheet Solver")
                Exit Sub
            End If
        Next j
    Next i
    
    WorksheetExists = CheckWorksheetExistence("2.Distances")
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing distance data, and will take some time (estimated " & estimatedTime & " seconds). Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            WorksheetExists = CheckWorksheetExistence("2.Distances")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("2.Distances").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("3.Vehicles")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("3.Vehicles").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("4.Solution")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("4.Solution").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("5.Visualization")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("5.Visualization").Delete
            End If
            
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.count)).Name = "2.Distances"
            
            Application.DisplayAlerts = True
        End If
    Else
        reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds). Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        End If
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.count)).Name = "2.Distances"
    End If
    
    ThisWorkbook.Worksheets("2.Distances").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    'Headers
    
    Cells(1, 1).value = "From"
    Cells(1, 2).value = "To"
    Cells(1, 3).value = "Distance"
    Cells(1, 4).value = "Duration"
    Cells(1, 5).value = "Method:"
        
    Range(Cells(1, 1), Cells(1, 6)).Select
    Selection.Font.Bold = True
    
    Cells(1, 1).Select
    
    Dim k As Long
    
    k = 2
    For i = 1 To num_locations
    
        Application.ScreenUpdating = True
        Application.StatusBar = "Setting up distances worksheet, working on location " & i & " out of " & num_locations
        DoEvents
        Application.ScreenUpdating = False
        For j = 1 To num_locations
            
            Cells(k, 1).value = nameArray(i)
            Cells(k, 1).Interior.ColorIndex = 1
            Cells(k, 1).Font.ColorIndex = 2

            Cells(k, 2).value = nameArray(j)
            Cells(k, 2).Interior.ColorIndex = 1
            Cells(k, 2).Font.ColorIndex = 2
            
            Cells(k, 3).NumberFormat = "0.00"
            Cells(k, 3).value = 0
            Cells(k, 4).NumberFormat = "[h]:mm"
            Cells(k, 4).value = "0:00"
            
            Cells(k, 3).Interior.ColorIndex = 50
            Cells(k, 4).Interior.ColorIndex = 50
            Cells(k, 3).Font.ColorIndex = 2
            Cells(k, 4).Font.ColorIndex = 2
            
            Range(Cells(k, 1), Cells(k, 4)).Select
        
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = 16
                .TintAndShade = 0
                .Weight = xlThin
            End With
            
            Range(Cells(k, 3), Cells(k, 4)).Select
            
            If k Mod 2 = 0 Then
                Selection.Interior.TintAndShade = 0.02
            Else
                Selection.Interior.TintAndShade = -0.02
            End If
        
            k = k + 1
        Next j
        
        Columns("A").AutoFit
        Columns("B").AutoFit
        Columns("C").AutoFit
        Columns("D").AutoFit
        
        Columns("F").EntireColumn.ColumnWidth = 23
    Next i
    
    Columns("A:P").AutoFit
'    Columns("A:P").Select
'    ActiveWindow.zoom = True
    
    Columns("F").EntireColumn.ColumnWidth = 23
    
    Application.StatusBar = False
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(1, 1).Select
    
    reply = MsgBox("Distances worksheet setup complete.", vbInformation, "VRP Spreadsheet Solver")
    
End Sub
Sub SetupVehiclesWorksheet()
    
    Dim reply As Integer
    Dim WorksheetExists As Boolean
    Dim formulaText As String
    
    WorksheetExists = CheckWorksheetExistence("1.Locations")
    If WorksheetExists = False Then
        reply = MsgBox("Worksheets 1.Locations must exist for the distance worksheet to be created.", vbOKOnly, "VRP Spreadsheet Solver")
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("3.Vehicles")
    
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing vehicle data, and erase solution and visualization data. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            ThisWorkbook.Worksheets("3.Vehicles").Delete
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.count)).Name = "3.Vehicles"
            
            WorksheetExists = CheckWorksheetExistence("4.Solution")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("4.Solution").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("5.Visualization")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("5.Visualization").Delete
            End If
            
            Application.DisplayAlerts = True
            
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.count)).Name = "3.Vehicles"
    End If
    
    ThisWorkbook.Worksheets("3.Vehicles").Activate
    
    Dim num_depots As Long
    num_depots = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).value
    
    Dim num_vehicle_types As Long
    num_vehicle_types = ThisWorkbook.Worksheets("VRP Solver Console").Cells(12, 3).value
    
    Dim open_vrp As Boolean
    If ThisWorkbook.Worksheets("VRP Solver Console").Cells(14, 3) = "No" Then
        open_vrp = True
    Else
        open_vrp = False
    End If
    
    Dim multi_trip As Boolean
    If ThisWorkbook.Worksheets("VRP Solver Console").Cells(14, 3) = "Yes - may do so multiple times" Then
        multi_trip = True
    Else
        multi_trip = False
    End If
    
    Cells.Clear
    
    Cells(1, 1).value = "Starting depot"
    Cells(1, 2).value = "Vehicle type"
    Cells(1, 3).value = "Capacity"
    Cells(1, 4).value = "Fixed cost per trip"
    Cells(1, 5).value = "Cost per unit distance"
    Cells(1, 6).value = "Duration multiplier"
    Cells(1, 7).value = "Distance limit"
    Cells(1, 8).value = "Work start time"
    Cells(1, 9).value = "Driving time limit"
    Cells(1, 10).value = "Working time limit"
    Cells(1, 11).value = "Return depot"
    Cells(1, 12).value = "Destination ID"
    Cells(1, 13).value = "Number of vehicles"
    
    Range(Cells(1, 1), Cells(1, 13)).Select
    Selection.Font.Bold = True
    
    Dim i As Long
    Dim j As Long
    Dim row_cnt As Long
    row_cnt = 2
    
    For i = 1 To num_depots
        For j = 1 To num_vehicle_types
            
            Cells(row_cnt, 4).NumberFormat = "0.00"
            Cells(row_cnt, 5).NumberFormat = "0.00"
            Cells(row_cnt, 6).NumberFormat = "0.00"
            Cells(row_cnt, 7).NumberFormat = "0.00"
            Cells(row_cnt, 8).NumberFormat = "hh:mm"
            Cells(row_cnt, 9).NumberFormat = "[h]:mm"
            Cells(row_cnt, 10).NumberFormat = "[h]:mm"
            
            Cells(row_cnt, 8).value = "08:00"
            Cells(row_cnt, 9).value = "9:00"
            Cells(row_cnt, 10).value = "10:00"
            Cells(row_cnt, 13).value = 1
            
            If i = 1 Then
                Cells(row_cnt, 2).value = "T" & j
                Cells(row_cnt, 3).value = 1
                Cells(row_cnt, 4).value = 0
                Cells(row_cnt, 5).value = 1
                Cells(row_cnt, 6).value = 1
                Cells(row_cnt, 7).value = 560

                Range(Cells(row_cnt, 1), Cells(row_cnt, 13)).Select
                Selection.Font.ColorIndex = 2
                Selection.Interior.ColorIndex = 50
            Else
                Cells(row_cnt, 2).formula = "=" & Cells(1 + j, 2).address(False, False)
                Cells(row_cnt, 3).formula = "=" & Cells(1 + j, 3).address(False, False)
                Cells(row_cnt, 4).formula = "=" & Cells(1 + j, 4).address(False, False)
                Cells(row_cnt, 5).formula = "=" & Cells(1 + j, 5).address(False, False)
                Cells(row_cnt, 6).formula = "=" & Cells(1 + j, 6).address(False, False)
                Cells(row_cnt, 7).formula = "=" & Cells(1 + j, 7).address(False, False)

                Range(Cells(row_cnt, 2), Cells(row_cnt, 7)).Select
                Selection.Font.ColorIndex = 1
                Selection.Interior.ColorIndex = 36

                Range(Cells(row_cnt, 8), Cells(row_cnt, 13)).Select
                Selection.Font.ColorIndex = 2
                Selection.Interior.ColorIndex = 50
            End If
            
            If j = 1 Then
                Cells(row_cnt, 1).value = ThisWorkbook.Worksheets("1.Locations").Cells(1 + i, 2)
            Else
                Cells(row_cnt, 1).value = ""
            End If
            
            Cells(row_cnt, 11).Select
                
            If (open_vrp = False) And (multi_trip = False) Then
            
                With Selection.Validation
                      .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="='1.Locations'!" & Cells(2, 2).address & ":" & Cells(2 + num_depots - 1, 2).address
                      .IgnoreBlank = True
                      .InCellDropdown = True
                      .ErrorTitle = "Warning"
                      .ErrorMessage = "Please select a value from the list available in the selected cell."
                      .ShowError = True
                End With
                
            End If
                
            Cells(row_cnt, 11).value = ThisWorkbook.Worksheets("1.Locations").Cells(1 + i, 2)
            
            If (open_vrp = True) Or (multi_trip = True) Then
            
                Cells(row_cnt, 11).Font.ColorIndex = 2
                Cells(row_cnt, 11).Interior.ColorIndex = 1
            End If
            
            formulaText = "=IFERROR(MATCH(" & Cells(row_cnt, 11).address(False, False) & ",'1.Locations'!" & Cells(2, 2).address & ":" & Cells(2 + num_depots - 1, 2).address & ",0) - 1," & Chr(34) & " " & Chr(34) & ")"
            
            Cells(row_cnt, 12).formula = formulaText
            
            With Cells(row_cnt, 3).Validation
                .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
                .ErrorMessage = "Please enter a nonnegative value"
            End With
            
            With Cells(row_cnt, 4).Validation
                .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
                .ErrorMessage = "Please enter a nonnegative value"
            End With
            
            With Cells(row_cnt, 5).Validation
                .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
                .ErrorMessage = "Please enter a nonnegative value"
            End With
            
            With Cells(row_cnt, 6).Validation
                .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:="0"
                .ErrorMessage = "Please enter a positive value"
            End With
            
            With Cells(row_cnt, 7).Validation
                .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:="-1"
                .ErrorMessage = "Please enter a nonnegative integer value"
            End With
            
            With Cells(row_cnt, 10).Validation
                .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:="0"
                .ErrorMessage = "Please enter a positive value"
            End With
            
            Range(Cells(row_cnt, 1), Cells(row_cnt, 13)).Select
                        
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .TintAndShade = 0
                If j < num_vehicle_types Then
                    .ColorIndex = 16
                    .Weight = xlThin
                Else
                    .ColorIndex = 2
                    .Weight = xlThick
                End If
            End With
            
            Cells(row_cnt, 1).Font.ColorIndex = 2
            Cells(row_cnt, 1).Interior.ColorIndex = 1
            
            Cells(row_cnt, 12).Font.ColorIndex = 1
            Cells(row_cnt, 12).Interior.ColorIndex = 36
            
            row_cnt = row_cnt + 1
        Next j
        
        Range(Cells(2 + (i - 1) * num_vehicle_types, 1), Cells(1 + i * num_vehicle_types, 1)).Select
        
        If num_vehicle_types > 1 Then
            
            With Selection
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlCenter
                .WrapText = False
                .Orientation = 0
                .AddIndent = False
                .IndentLevel = 0
                .ShrinkToFit = False
                .ReadingOrder = xlContext
                .MergeCells = False
            End With
            Selection.Merge
            
        End If
        
    Next i
    
    Columns("A:N").AutoFit
    
    If open_vrp = True Then
        Columns(11).EntireColumn.Hidden = True
    End If
    
    Columns(12).EntireColumn.Hidden = True
    
    Cells(1, 1).Select
    
    reply = MsgBox("Vehicles worksheet setup complete.", vbInformation, "VRP Spreadsheet Solver")
    
End Sub
Sub SetupSolutionWorksheet()

    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Locations") And CheckWorksheetExistence("2.Distances") And CheckWorksheetExistence("3.Vehicles")
    If WorksheetExists = False Then
        reply = MsgBox("Worksheets 1.Locations, 2.Distances, and 3.Vehicles must exist for the solution worksheet to be created.", vbOKOnly, "VRP Spreadsheet Solver")
        Exit Sub
    End If
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim depot As Long
    Dim offset As Long
    Dim fleet_size As Long
    
    Dim num_depots As Long
    num_depots = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).value
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).value
    
    Dim num_locations As Long
    num_locations = num_depots + num_customers
    
    Dim num_vehicle_types As Long
    num_vehicle_types = ThisWorkbook.Worksheets("VRP Solver Console").Cells(12, 3).value
    
    fleet_size = 0
    For depot = 1 To num_depots
        
        For i = 1 To num_vehicle_types
            fleet_size = fleet_size + ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 13).value
        Next i
        
    Next depot
    
    If fleet_size = 0 Then
        reply = MsgBox("There must be at least one available vehicle for the solution worksheet to be created.", vbOKOnly, "VRP Spreadsheet Solver")
        Exit Sub
    End If
    
    Dim estimatedTime As Double
    estimatedTime = fleet_size * num_locations * 0.03
    
    WorksheetExists = CheckWorksheetExistence("4.Solution")
    If WorksheetExists = True Then
        WorksheetExists = CheckWorksheetExistence("5.Visualization")
        If WorksheetExists = True Then
            reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds), overwrite existing solution data, and erase the visualization data. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
            If reply = vbNo Then
                ThisWorkbook.Worksheets("4.Solution").Activate
                Exit Sub
            Else
                Application.DisplayAlerts = False
            
                ThisWorkbook.Worksheets("4.Solution").Delete
                ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.count)).Name = "4.Solution"
                
                ThisWorkbook.Worksheets("5.Visualization").Delete
                
                Application.DisplayAlerts = True
            End If
        Else
            reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds), and overwrite existing solution data. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
            If reply = vbNo Then
                ThisWorkbook.Worksheets("4.Solution").Activate
                Exit Sub
            Else
                Application.DisplayAlerts = False
            
                ThisWorkbook.Worksheets("4.Solution").Delete
                ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.count)).Name = "4.Solution"
                
                Application.DisplayAlerts = True
            End If
        End If
    Else
        reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds). Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        End If
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.count)).Name = "4.Solution"
    End If
    
    ThisWorkbook.Worksheets("4.Solution").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
        
    Dim vehicle_count As Long
    Dim vehicle_id As Long
    Dim formulaText As String
    Dim objectiveFormula As String
    Dim tempValue As Double
    Dim combinedRange As Range
    
    Dim open_vrp As Boolean
    If ThisWorkbook.Worksheets("VRP Solver Console").Cells(14, 3) = "No" Then
        open_vrp = True
    Else
        open_vrp = False
    End If
    
    Dim multi_trip As Boolean
    If ThisWorkbook.Worksheets("VRP Solver Console").Cells(14, 3) = "Yes - may do so multiple times" Then
        multi_trip = True
    Else
        multi_trip = False
    End If
    
    Dim num_stops As Long
    
    If multi_trip = True Then
        num_stops = num_customers
    Else
        num_stops = 1
    End If
    
    Dim soft_time_windows As Boolean
    If ThisWorkbook.Worksheets("VRP Solver Console").Cells(15, 3).value = "Hard" Then
        soft_time_windows = False
    Else
        soft_time_windows = True
    End If
    
    Dim excel_version As Double
    excel_version = Val(Application.Version)
    
    objectiveFormula = "="
    Cells(1, 1).value = "Total net profit:"
    Cells(1, 1).Font.Bold = True
    Cells(1, 2).Font.ColorIndex = 1
    Cells(1, 2).Interior.ColorIndex = 36
        
    vehicle_id = 1
    offset = 0
    
    For depot = 1 To num_depots
    
        For i = 1 To num_vehicle_types
    
            vehicle_count = ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + ((depot - 1) * num_vehicle_types) + i, 13).value
            
            For j = 1 To vehicle_count
                
                Application.ScreenUpdating = True
                Application.StatusBar = "Setting up solution worksheet, working on vehicle " & vehicle_id & " out of " & fleet_size
                Application.ScreenUpdating = False
                
                Cells(4, 1 + offset).value = "Stop count"
                Cells(4, 2 + offset).value = "Location name"
                Cells(4, 3 + offset).value = "Location ID"
                Cells(4, 4 + offset).value = "Latitude (y)"
                Cells(4, 5 + offset).value = "Longitude (x)"
                Cells(4, 6 + offset).value = "Distance travelled"
                Cells(4, 7 + offset).value = "Driving time"
                Cells(4, 8 + offset).value = "Arrival time"
                Cells(4, 9 + offset).value = "Departure time"
                Cells(4, 10 + offset).value = "Working time"
                Cells(4, 11 + offset).value = "Profit collected"
                Cells(4, 12 + offset).value = "Pickup amount"
                Cells(4, 13 + offset).value = "Delivery amount"
                Cells(4, 14 + offset).value = "Cumulative pickup"
                Cells(4, 15 + offset).value = "Subtractive delivery"
                Cells(4, 16 + offset).value = "Load"
                
                Range(Cells(6, 2 + offset), Cells(5 + num_customers + num_stops, 2 + offset)).Select
                
                With Selection.Validation
                      .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="='1.Locations'!" & Cells(2, 2).address & ":" & Cells(2 + num_locations, 2).address
                      .IgnoreBlank = True
                      .InCellDropdown = True
                      .ErrorTitle = "Warning"
                      .ErrorMessage = "Please select a value from the list available in the selected cell."
                      .ShowError = True
                End With
                
                For k = 0 To num_customers + num_stops
                    
                    Cells(5 + k, 1 + offset).value = k
                    Cells(5 + k, 1 + offset).Font.ColorIndex = 2
                    Cells(5 + k, 1 + offset).Interior.ColorIndex = 1
                    
                    Cells(5 + k, 2 + offset).Font.ColorIndex = 1
                    Cells(5 + k, 2 + offset).Interior.ColorIndex = 33 '20
                        
                    formulaText = "=IFERROR(MATCH(" & "INDIRECT(" & Chr(34) & Cells(5 + k, 2 + offset).address(False, False) & Chr(34) & ")"
                    formulaText = formulaText & ",'1.Locations'!" & Cells(2, 2).address(False, False) & ":" & Cells(1 + num_locations, 2).address(False, False) & ", 0) - 1,"
                    formulaText = formulaText & Chr(34) & " " & Chr(34) & ")"
                    
                    Cells(5 + k, 3 + offset).formula = formulaText
                                  
                    formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address(False, False) & "),"
                    formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 4).address(False, False) & ":" & Cells(1 + num_locations, 4).address(False, False)
                    formulaText = formulaText & "," & Cells(5 + k, 3 + offset).address(False, False) & " + 1)," & "NA()" & "),"
                    formulaText = formulaText & "NA()" & ")"
                    
                    Cells(5 + k, 4 + offset).formula = formulaText
                    
                    formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address(False, False) & "),"
                    formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 5).address(False, False) & ":" & Cells(1 + num_locations, 5).address(False, False)
                    formulaText = formulaText & "," & Cells(5 + k, 3 + offset).address(False, False) & " + 1)," & "NA()" & "),"
                    formulaText = formulaText & "NA()" & ")"
                    
                    Cells(5 + k, 5 + offset).formula = formulaText
                    
                    formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address(False, False) & "),"
                    formulaText = formulaText & "INDEX('2.Distances'!" & Cells(2, 3).address(False, False) & ":" & Cells(1 + num_locations * num_locations, 3).address(False, False)
                    formulaText = formulaText & "," & Cells(4 + k, 3 + offset).address(False, False) & "*" & num_locations & "+" & Cells(5 + k, 3 + offset).address(False, False) & "+ 1) +"
                    formulaText = formulaText & Cells(4 + k, 6 + offset).address(False, False) & "," & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                    
                    Cells(5 + k, 6 + offset).formula = formulaText
                    Cells(5 + k, 6 + offset).NumberFormat = "0.00"
                    
                    Cells(5 + k, 7 + offset).NumberFormat = "[h]:mm"
                    
                    formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address(False, False) & "),"
                    formulaText = formulaText & "'3.Vehicles'!" & Cells(1 + ((depot - 1) * num_vehicle_types) + i, 6).address(False, False) & " * "
                    formulaText = formulaText & "INDEX('2.Distances'!" & Cells(2, 4).address(False, False) & ":" & Cells(1 + num_locations * num_locations, 4).address(False, False)
                    formulaText = formulaText & "," & Cells(4 + k, 3 + offset).address(False, False) & "*" & num_locations & "+" & Cells(5 + k, 3 + offset).address(False, False) & " + 1) +"
                    formulaText = formulaText & Cells(4 + k, 7 + offset).address(False, False) & "," & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                    
                    Cells(5 + k, 7 + offset).formula = formulaText
                    
                    Cells(5 + k, 8 + offset).NumberFormat = "hh:mm"
                    
                    formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address(False, False) & "),"
                    formulaText = formulaText & "'3.Vehicles'!" & Cells(1 + ((depot - 1) * num_vehicle_types) + i, 6).address(False, False) & " * "
                    formulaText = formulaText & "INDEX('2.Distances'!" & Cells(2, 4).address(False, False) & ":" & Cells(1 + num_locations * num_locations, 4).address(False, False)
                    formulaText = formulaText & "," & Cells(4 + k, 3 + offset).address(False, False) & "*" & num_locations & "+" & Cells(5 + k, 3 + offset).address(False, False) & " + 1) +"
                    formulaText = formulaText & Cells(4 + k, 9 + offset).address(False, False) & "," & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                    
                    Cells(5 + k, 8 + offset).formula = formulaText
                    
                    formulaText = "=INDEX('1.Locations'!" & Cells(2, 6).address(False, False) & ":" & Cells(1 + num_locations, 6).address(False, False) & "," & Cells(5 + k, 3 + offset).address(False, False) & " + 1)"
                    
                    If (excel_version > 13.9) And (k > 0) Then
                        formulaText = GetLocalizedFormula(formulaText)
                        Cells(5 + k, 8 + offset).FormatConditions.Add(xlCellValue, xlLess, formulaText).Interior.ColorIndex = 45
                    End If
                    
                    'test
                    If excel_version > 13.9 Then
                    
                        'formulaText = "=INDEX('1.Locations'!" & Cells(2, 7).address(false, false)& ":" & Cells(1 + num_locations, 7).address(false, false)& "," & Cells(5 + k, 3 + offset).address(false, false)& " + 1)"
                        formulaText = "=(60 * HOUR(" & Cells(5 + k, 8 + offset).address(False, False) & ") + MINUTE(" & Cells(5 + k, 8 + offset).address(False, False) & ")) >"
                        formulaText = formulaText & "(60 * HOUR(INDEX('1.Locations'!" & Cells(2, 7).address(False, False) & ":" & Cells(1 + num_locations, 7).address(False, False) & "," & Cells(5 + k, 3 + offset).address(False, False) & " + 1)) +"
                        formulaText = formulaText & "MINUTE(INDEX('1.Locations'!" & Cells(2, 7).address(False, False) & ":" & Cells(1 + num_locations, 7).address(False, False) & "," & Cells(5 + k, 3 + offset).address(False, False) & " + 1)))"
    
                        formulaText = GetLocalizedFormula(formulaText)
                        
                        If soft_time_windows = True Then
                            Cells(5 + k, 8 + offset).FormatConditions.Add(xlExpression, xlGreater, formulaText).Interior.ColorIndex = 45
                        Else
                            Cells(5 + k, 8 + offset).FormatConditions.Add(xlExpression, xlGreater, formulaText).Interior.ColorIndex = 3
                        End If
                    End If
                    
                    Cells(5 + k, 9 + offset).NumberFormat = "hh:mm"
                    
                    If multi_trip = True Then

                        formulaText = "=IFERROR(IF(OR(" & Cells(5, 3 + offset).address(False, False) & "<>" & Cells(5 + k, 3 + offset).address(False, False) & ", " & Cells(6 + k, 2 + offset).address(False, False) & "<>" & Chr(34) & Chr(34) & "),"
                        formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 9).address(False, False) & ":" & Cells(1 + num_locations, 9).address(False, False)
                        formulaText = formulaText & "," & Cells(5 + k, 3 + offset).address(False, False) & " + 1) + MAX(" & Cells(5 + k, 8 + offset).address(False, False) & ","
                        formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 6).address(False, False) & ":" & Cells(1 + num_locations, 6).address(False, False) & ","
                        formulaText = formulaText & Cells(5 + k, 3 + offset).address(False, False) & " + 1))" & "," & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
        
                    Else
                    
                        formulaText = "=IFERROR(IF(AND(" & Cells(5, 3 + offset).address(False, False) & "<>" & Cells(5 + k, 3 + offset).address(False, False) & ",ISNUMBER(" & Cells(5 + k, 8 + offset).address(False, False) & ")),"
                        formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 9).address(False, False) & ":" & Cells(1 + num_locations, 9).address(False, False)
                        formulaText = formulaText & "," & Cells(5 + k, 3 + offset).address(False, False) & " + 1) + MAX(" & Cells(5 + k, 8 + offset).address(False, False) & ","
                        formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 6).address(False, False) & ":" & Cells(1 + num_locations, 6).address(False, False) & ","
                        formulaText = formulaText & Cells(5 + k, 3 + offset).address(False, False) & " + 1))" & "," & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                    
                    End If
            
                    Cells(5 + k, 9 + offset).formula = formulaText
                                    
                    If excel_version > 13.9 Then
                    
                        'formulaText = "=INDEX('1.Locations'!" & Cells(2, 7).address(false, false)& ":" & Cells(1 + num_locations, 7).address(false, false)& "," & Cells(5 + k, 3 + offset).address(false, false)& " + 1)"
                        formulaText = "=(60 * HOUR(" & Cells(5 + k, 9 + offset).address(False, False) & ") + MINUTE(" & Cells(5 + k, 9 + offset).address(False, False) & ")) >"
                        formulaText = formulaText & "(60 * HOUR(INDEX('1.Locations'!" & Cells(2, 7).address(False, False) & ":" & Cells(1 + num_locations, 7).address(False, False) & "," & Cells(5 + k, 3 + offset).address(False, False) & " + 1)) +"
                        formulaText = formulaText & "MINUTE(INDEX('1.Locations'!" & Cells(2, 7).address(False, False) & ":" & Cells(1 + num_locations, 7).address(False, False) & "," & Cells(5 + k, 3 + offset).address(False, False) & " + 1)))"
    
                        formulaText = GetLocalizedFormula(formulaText)
                        
                        If soft_time_windows = True Then
                            Cells(5 + k, 9 + offset).FormatConditions.Add(xlExpression, xlGreater, formulaText).Interior.ColorIndex = 45
                        Else
                            Cells(5 + k, 9 + offset).FormatConditions.Add(xlExpression, xlGreater, formulaText).Interior.ColorIndex = 3
                        End If
                    End If
                    
                    Cells(5 + k, 10 + offset).NumberFormat = "[h]:mm"
                    
'                    formulaText = "=IFERROR(IF(" & Cells(5, 3 + offset).address(False, False) & " = " & Cells(5 + k, 3 + offset).address(False, False) & " , " & Cells(5 + k, 8 + offset).address(False, False) & " - " & Cells(5, 9 + offset).address(False, False) & " , " & Cells(5 + k, 9 + offset).address(False, False) & " - " & Cells(5, 9 + offset).address(False, False)
'                    formulaText = formulaText & ")," & Chr(34) & " " & Chr(34) & ")"

                    formulaText = "=IFERROR(IF(AND(" & Cells(5 + k, 2 + offset).address(False, False) & " = " & Cells(5, 2 + offset).address(False, False) & ", " & Cells(6 + k, 2 + offset).address(False, False) & " = " & Chr(34) & Chr(34) & "), " & Cells(5 + k, 8 + offset).address(False, False) & " - " & Cells(5, 9 + offset).address(False, False) & " , " & Cells(5 + k, 9 + offset).address(False, False) & " - " & Cells(5, 9 + offset).address(False, False)
                    formulaText = formulaText & ")," & Chr(34) & " " & Chr(34) & ")"
                                            
                    Cells(5 + k, 10 + offset).formula = formulaText
                    
                    formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address(False, False) & "),"
                    formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 12).address(False, False) & ":" & Cells(1 + num_locations, 12).address(False, False)
                    formulaText = formulaText & "," & Cells(5 + k, 3 + offset).address(False, False) & " + 1) + " & Cells(4 + k, 11 + offset).address(False, False) & ","
                    formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                    
                    Cells(5 + k, 11 + offset).formula = formulaText
                              
                    formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address(False, False) & "),"
                    formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 10).address(False, False) & ":" & Cells(1 + num_locations, 10).address(False, False)
                    formulaText = formulaText & "," & Cells(5 + k, 3 + offset).address(False, False) & " + 1),"
                    formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                    
                    Cells(5 + k, 12 + offset).formula = formulaText
                    Cells(5 + k, 12 + offset).NumberFormat = "0.00"
                    
                    formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address(False, False) & "),"
                    formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 11).address(False, False) & ":" & Cells(1 + num_locations, 11).address(False, False)
                    formulaText = formulaText & "," & Cells(5 + k, 3 + offset).address(False, False) & " + 1),"
                    formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                    
                    Cells(5 + k, 13 + offset).formula = formulaText
                    Cells(5 + k, 13 + offset).NumberFormat = "0.00"
                    
                    formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address(False, False) & "),"
                    formulaText = formulaText & "IF(" & Cells(5 + k, 2 + offset).address(False, False) & " = " & Cells(5, 2 + offset).address(False, False) & ", 0, " & Cells(5 + k, 12 + offset).address(False, False) & " + " & Cells(4 + k, 14 + offset).address(False, False) & ")"
                    formulaText = formulaText & "," & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                    
                    Cells(5 + k, 14 + offset).formula = formulaText
                    Cells(5 + k, 14 + offset).NumberFormat = "0.00"
                    
                    formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address(False, False) & "),"
                    formulaText = formulaText & "IF(" & Cells(6 + k, 2 + offset).address(False, False) & " = " & Cells(5, 2 + offset).address(False, False) & ", 0, IF(" & Cells(6 + k, 2 + offset).address(False, False) & " = " & Chr(34) & Chr(34) & ", 0, " & Cells(6 + k, 15 + offset).address(False, False) & " + " & Cells(6 + k, 13 + offset).address(False, False) & "))"
                    formulaText = formulaText & "," & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                    
                    Cells(5 + k, 15 + offset).formula = formulaText
                    Cells(5 + k, 15 + offset).NumberFormat = "0.00"
                    
                    formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address(False, False) & "),"
                    formulaText = formulaText & Cells(5 + k, 14 + offset).address(False, False) & " + " & Cells(5 + k, 15 + offset).address(False, False)
                    formulaText = formulaText & "," & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                    
                    Cells(5 + k, 16 + offset).formula = formulaText
    
                    Range(Cells(5 + k, 3 + offset), Cells(5 + k, 16 + offset)).Font.ColorIndex = 1
                    Range(Cells(5 + k, 3 + offset), Cells(5 + k, 16 + offset)).Interior.ColorIndex = 36 '6
                    
                    Range(Cells(5 + k, 1 + offset), Cells(5 + k, 16 + offset)).Select
                    With Selection.Borders(xlEdgeBottom)
                        .LineStyle = xlContinuous
                        .ColorIndex = 16
                        .TintAndShade = 0
                        .Weight = xlThin
                    End With
    
                    If (k > 1) And (k Mod 2 = 0) Then
                        Cells(5 + k, 2 + offset).Interior.TintAndShade = 0.02
                    Else
                        Cells(5 + k, 2 + offset).Interior.TintAndShade = -0.02
                    End If
                    
                Next k
                
                If multi_trip = True Then
                    Range(Cells(6, 6 + offset), Cells(5 + 2 * num_customers, 6 + offset)).Select
                Else
                    Range(Cells(6, 6 + offset), Cells(6 + num_customers, 6 + offset)).Select
                End If
                
                Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
                Selection.FormatConditions(1).SetFirstPriority
                Selection.FormatConditions(1).Interior.Pattern = xlNone
                Selection.FormatConditions(1).Interior.ColorIndex = 36
                Selection.FormatConditions(1).StopIfTrue = True
                
                If excel_version > 13.9 Then
                    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:="='3.Vehicles'!" & Cells(1 + (depot - 1) * num_vehicle_types + i, 7).address
                    Selection.FormatConditions(2).Interior.ColorIndex = 3
                Else
                    Selection.FormatConditions.Add(xlCellValue, xlGreater, ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + (depot - 1) * num_vehicle_types + i, 7).value).Interior.ColorIndex = 3
                End If
                Selection.FormatConditions(2).StopIfTrue = True
                
                If multi_trip = True Then
                    Range(Cells(6, 16 + offset), Cells(5 + 2 * num_customers, 16 + offset)).Select
                Else
                    Range(Cells(6, 16 + offset), Cells(6 + num_customers, 16 + offset)).Select
                End If
                
                Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
                Selection.FormatConditions(1).SetFirstPriority
                Selection.FormatConditions(1).Interior.Pattern = xlNone
                Selection.FormatConditions(1).Interior.ColorIndex = 36
                Selection.FormatConditions(1).StopIfTrue = True
                
                formulaText = "='3.Vehicles'!" & Cells(1 + i, 3).address
                    
                If excel_version > 13.9 Then
                    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=formulaText
                    Selection.FormatConditions(2).Interior.ColorIndex = 3
                Else
                    Selection.FormatConditions.Add(xlCellValue, xlGreater, ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 3).value).Interior.ColorIndex = 3
                End If
                
                If excel_version > 13.9 Then
                    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, Formula1:="0"
                    Selection.FormatConditions(3).Interior.ColorIndex = 3
                Else
                    Selection.FormatConditions.Add(xlCellValue, xlLess, 0).Interior.ColorIndex = 3
                End If
                
                If multi_trip = True Then
                    Range(Cells(6, 7 + offset), Cells(5 + 2 * num_customers, 7 + offset)).Select
                Else
                    Range(Cells(6, 7 + offset), Cells(6 + num_customers, 7 + offset)).Select
                End If
                
                Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
                Selection.FormatConditions(1).SetFirstPriority
                Selection.FormatConditions(1).Interior.Pattern = xlNone
                Selection.FormatConditions(1).Interior.ColorIndex = 36
                Selection.FormatConditions(1).StopIfTrue = True
                
                formulaText = "='3.Vehicles'!" & Cells(1 + ((depot - 1) * num_vehicle_types) + i, 9).address
                    
                If excel_version > 13.9 Then
                    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=formulaText
                    Selection.FormatConditions(2).Interior.ColorIndex = 3
                Else
                    Selection.FormatConditions.Add(xlCellValue, xlGreater, ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + ((depot - 1) * num_vehicle_types) + i, 9).value).Interior.ColorIndex = 3
                End If
                
                If multi_trip = True Then
                    Range(Cells(6, 10 + offset), Cells(5 + 2 * num_customers, 10 + offset)).Select
                Else
                    Range(Cells(6, 10 + offset), Cells(6 + num_customers, 10 + offset)).Select
                End If
                
                Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
                Selection.FormatConditions(1).SetFirstPriority
                Selection.FormatConditions(1).Interior.Pattern = xlNone
                Selection.FormatConditions(1).Interior.ColorIndex = 36
                Selection.FormatConditions(1).StopIfTrue = True
                
                formulaText = "='3.Vehicles'!" & Cells(1 + ((depot - 1) * num_vehicle_types) + i, 10).address
                
                If excel_version > 13.9 Then
                    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=formulaText
                    Selection.FormatConditions(2).Interior.ColorIndex = 3
                Else
                    Selection.FormatConditions.Add(xlCellValue, xlGreater, ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + ((depot - 1) * num_vehicle_types) + i, 10).value).Interior.ColorIndex = 3
                End If
    
                Cells(5, 2 + offset).value = "='1.Locations'!" & Cells(1 + depot, 2).address(False, False)
                Cells(5, 2 + offset).Font.ColorIndex = 2
                Cells(5, 2 + offset).Interior.ColorIndex = 1
                'Cells(5, 3 + offset).Value = 0
                Cells(5, 3 + offset).Font.ColorIndex = 2
                Cells(5, 3 + offset).Interior.ColorIndex = 1
                Cells(5, 6 + offset).value = 0
                Cells(5, 7 + offset).value = "00:00"
                Cells(5, 8 + offset).formula = ""
                Cells(5, 9 + offset).formula = "='3.Vehicles'!" & Cells(1 + (depot - 1) * num_vehicle_types + i, 8).address(False, False)
                Cells(5, 10 + offset).value = "00:00"
                Cells(5, 11 + offset).value = 0
                Cells(5, 12 + offset).value = 0
                Cells(5, 13 + offset).value = 0
                Cells(5, 14 + offset).value = 0
                
                Cells(3, 1 + offset).value = "Vehicle:"
                
                If num_vehicle_types > 1 Then
                    Cells(3, 2 + offset).value = "V" & vehicle_id & " (" & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2).value & ")"
                Else
                    Cells(3, 2 + offset).value = "V" & vehicle_id
                End If
                
                Cells(3, 6 + offset).value = "Stops:"
                If multi_trip = True Then
                    Cells(3, 7 + offset).formula = "=COUNTA(" & Cells(6, 2 + offset).address(False, False) & ":" & Cells(5 + 2 * num_customers, 2 + offset).address(False, False) & ")"
                Else
                    Cells(3, 7 + offset).formula = "=COUNTA(" & Cells(6, 2 + offset).address(False, False) & ":" & Cells(6 + num_customers, 2 + offset).address(False, False) & ")"
                End If
                Cells(3, 7 + offset).Interior.ColorIndex = 36
                
                Cells(3, 8 + offset).value = "Net profit:"
                
                If multi_trip = True Then
                    formulaText = "=INDEX(" & Cells(5, 11 + offset).address(False, False) & ":" & Cells(5 + 2 * num_customers, 11 + offset).address(False, False) & "," & Cells(3, 7 + offset).address(False, False) & " + 1)"
                    formulaText = formulaText & "-(INDEX(" & Cells(5, 6 + offset).address(False, False) & ":" & Cells(5 + 2 * num_customers, 6 + offset).address
                    formulaText = formulaText & "," & Cells(3, 7 + offset).address(False, False) & "+ 1) " & "* '3.Vehicles'!" & Cells(1 + (depot - 1) * num_vehicle_types + i, 5).address(False, False) & ")"
                Else
                    formulaText = "=INDEX(" & Cells(5, 11 + offset).address(False, False) & ":" & Cells(5 + num_locations, 11 + offset).address(False, False) & "," & Cells(3, 7 + offset).address(False, False) & " + 1)"
                    formulaText = formulaText & "-(INDEX(" & Cells(5, 6 + offset).address(False, False) & ":" & Cells(5 + num_locations, 6 + offset).address
                    formulaText = formulaText & "," & Cells(3, 7 + offset).address(False, False) & "+ 1) " & "* '3.Vehicles'!" & Cells(1 + (depot - 1) * num_vehicle_types + i, 5).address(False, False) & ")"
                End If
                
                If open_vrp = False Then
                    formulaText = formulaText & "- IF(INDIRECT(" & Chr(34) & Cells(3, 7 + offset).address(False, False) & Chr(34) & ") > 1, "
                    formulaText = formulaText & "INDIRECT(" & Chr(34) & "'3.Vehicles'!" & Cells(1 + (depot - 1) * num_vehicle_types + i, 4).address(False, False) & Chr(34) & "), 0)"
                Else
                    formulaText = formulaText & "- IF(INDIRECT(" & Chr(34) & Cells(3, 7 + offset).address(False, False) & Chr(34) & ") > 0, "
                    formulaText = formulaText & "INDIRECT(" & Chr(34) & "'3.Vehicles'!" & Cells(1 + (depot - 1) * num_vehicle_types + i, 4).address(False, False) & Chr(34) & "), 0)"
                End If
                
                Cells(3, 9 + offset).formula = formulaText
                Cells(3, 9 + offset).Interior.ColorIndex = 36
                Cells(3, 9 + offset).NumberFormat = "0.00"
                
                formulaText = "=ISERROR(" & Cells(3, 9 + offset).address(False, False) & ")"
                formulaText = GetLocalizedFormula(formulaText)
                
                Cells(3, 9 + offset).FormatConditions.Add(xlExpression, xlGreater, formulaText).Interior.ColorIndex = 3
                    
                objectiveFormula = objectiveFormula & "+" & Cells(3, 9 + offset).address(False, False)
                
                vehicle_id = vehicle_id + 1
                
                offset = offset + offset_constant
            
            Next j
            
        Next i
           
    Next depot
    
    Cells(1, 2).value = objectiveFormula
    
    formulaText = "=ISERROR(" & Cells(1, 2).address(False, False) & ")"
    
    formulaText = GetLocalizedFormula(formulaText)
    
    Cells(1, 2).FormatConditions.Add(xlExpression, xlGreater, formulaText).Interior.ColorIndex = 3
'
'    ' Display all duplicate values in red
'    Dim uv As UniqueValues
'    Set uv = combinedRange.FormatConditions.AddUniqueValues
'    uv.DupeUnique = xlDuplicate
'    uv.Interior.ColorIndex = 3
'    uv.StopIfTrue = False
    
    Rows("1:4").Select
    Selection.Font.Bold = True
    
    Columns.AutoFit
    
    Cells(num_customers + 7 + num_stops, 1).value = "Detected reasons of infeasibility"
    Cells(num_customers + 7 + num_stops, 1).Font.Bold = True
    
    offset = 0
    
    For depot = 1 To num_depots
    
        For i = 1 To num_vehicle_types
    
            vehicle_count = ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + ((depot - 1) * num_vehicle_types) + i, 13).value
            
            For j = 1 To vehicle_count
            
                Columns(3 + offset).EntireColumn.Hidden = True
                Columns(4 + offset).EntireColumn.Hidden = True
                Columns(5 + offset).EntireColumn.Hidden = True

                Columns(12 + offset).EntireColumn.Hidden = True
                Columns(13 + offset).EntireColumn.Hidden = True
                Columns(14 + offset).EntireColumn.Hidden = True
                Columns(15 + offset).EntireColumn.Hidden = True
                
                'Columns(10 + offset).EntireColumn.ColumnWidth = 10
                
                offset = offset + offset_constant
            Next j
            
        Next i
    
    Next depot
    
'    Columns("A:U").Select
'    ActiveWindow.zoom = True
    
    Application.StatusBar = False
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(2, 1).Select
    Selection.Font.Bold = True
    Cells(1, 1).Select
    
    reply = MsgBox("Solution worksheet setup complete.", vbInformation, "VRP Spreadsheet Solver")
    
End Sub
Sub SetupVisualizationWorksheet()
    
    'On Error GoTo Setup_Visalization_Finish
    
    Dim num_depots As Long
    num_depots = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).value
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).value
    
    Dim num_locations As Long
    num_locations = num_depots + num_customers
    
    Dim num_stops As Long
    If ThisWorkbook.Worksheets("VRP Solver Console").Cells(14, 3) = "Yes - may do so multiple times" Then
        num_stops = num_customers
    Else
        num_stops = 1
    End If
    
    Dim num_vehicle_types As Long
    num_vehicle_types = ThisWorkbook.Worksheets("VRP Solver Console").Cells(12, 3).value
    
    Dim backgroundOption As String
    backgroundOption = ThisWorkbook.Worksheets("VRP Solver Console").Cells(18, 3).value
    
    Dim labelOption As String
    labelOption = ThisWorkbook.Worksheets("VRP Solver Console").Cells(19, 3).value
    
    Dim BingMapsKey As String
    BingMapsKey = ThisWorkbook.Worksheets("VRP Solver Console").Cells(2, 3).value
    
    Dim excel_version As Double
    excel_version = Val(Application.Version)
    
    Dim WorksheetExists As Boolean
    Dim MissingCoordinates As Boolean
    Dim CoordinateError As Boolean
    Dim reply As Integer
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    WorksheetExists = CheckWorksheetExistence("1.Locations") And CheckWorksheetExistence("2.Distances") And CheckWorksheetExistence("3.Vehicles") And CheckWorksheetExistence("4.Solution")
    If WorksheetExists = False Then
        reply = MsgBox("Worksheets 1.Locations, 2.Distances, 3.Vehicles, and 4.Solution must exist for the visualization worksheet to be created.", vbOKOnly, "VRP Spreadsheet Solver")
        Exit Sub
    End If
    
    MissingCoordinates = False
    For i = 0 To num_customers
        For j = 4 To 5
            If WorksheetFunction.IsNumber(ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, j)) = False Then
                MissingCoordinates = True
            End If
        Next j
    Next i
    
    If MissingCoordinates = True Then
        reply = MsgBox("All coordinates must be input for the Visualization worksheet to be created.", vbOKOnly, "VRP Spreadsheet Solver")
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("5.Visualization")
    If WorksheetExists = True Then
        
        If backgroundOption = "Bing Maps" Then
            If Len(BingMapsKey) < 32 Then
                reply = MsgBox("A valid Bing Maps Key is required. You can get a free key at https://www.bingmapsportal.com/", vbOKOnly, "VRP Spreadsheet Solver")
                Exit Sub
            End If
            reply = MsgBox("This will overwrite existing visualization data. By clicking the Yes button below, you confirm that you accept Bing Maps Terms of Service. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
        Else
            reply = MsgBox("This will overwrite existing visualization data. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
        End If

        If reply = vbNo Then
            ThisWorkbook.Worksheets("5.Visualization").Activate
            Exit Sub
        Else
            Application.DisplayAlerts = False
            ThisWorkbook.Worksheets("5.Visualization").Delete
            Application.DisplayAlerts = True
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.count)).Name = "5.Visualization"
        End If
    Else
        If backgroundOption = "Bing Maps" Then
            If Len(BingMapsKey) < 32 Then
                reply = MsgBox("A valid Bing Maps Key is required. You can get a free key at https://www.bingmapsportal.com/", vbOKOnly, "VRP Spreadsheet Solver")
                Exit Sub
            End If
            reply = MsgBox("By clicking the Yes button below, you confirm that you accept Bing Maps Terms of Service. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
            If reply = vbNo Then
                Exit Sub
            End If
        End If
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.count)).Name = "5.Visualization"
    End If
    
    CoordinateError = False
    For i = 1 To num_locations
        If Abs(ThisWorkbook.Worksheets("1.Locations").Cells(1 + i, 4).value) > 90 Then
            CoordinateError = True
        End If
        If Abs(ThisWorkbook.Worksheets("1.Locations").Cells(1 + i, 5).value) > 180 Then
            CoordinateError = True
        End If
    Next i
    
    If (backgroundOption = "Bing Maps") And (CoordinateError = True) Then
        reply = MsgBox("There are coordinates with |latitude| > 90 or |longitude| > 180. Proceeding with a blank background.", vbOKOnly, "VRP Spreadsheet Solver")
        backgroundOption = "Blank"
    End If
    
    ThisWorkbook.Worksheets("5.Visualization").Activate
    
    Application.ScreenUpdating = False
    
    ' 0, 475, 0, 392
    ActiveSheet.ChartObjects.Add(Left:=0, Width:=500, Top:=0, Height:=392).Chart.ChartType = xlXYScatter 'Width:=475
      
    Do Until ActiveSheet.ChartObjects(1).Chart.SeriesCollection.count = 0
        ActiveSheet.ChartObjects(1).Chart.SeriesCollection(1).Delete
    Loop
    
    With ActiveSheet.ChartObjects(1).Chart
        .PlotVisibleOnly = False
        .SeriesCollection.NewSeries
        .SeriesCollection(1).Values = Range(ThisWorkbook.Worksheets("1.Locations").Cells(2, 4), ThisWorkbook.Worksheets("1.Locations").Cells(1 + num_locations, 4))
        .SeriesCollection(1).XValues = Range(ThisWorkbook.Worksheets("1.Locations").Cells(2, 5), ThisWorkbook.Worksheets("1.Locations").Cells(1 + num_locations, 5))
        .ChartType = xlXYScatter
        .SeriesCollection(1).MarkerStyle = xlMarkerStyleCircle
        
        If num_locations <= 25 Then
            .SeriesCollection(1).MarkerSize = 7
        ElseIf num_locations <= 50 Then
            .SeriesCollection(1).MarkerSize = 6
        ElseIf num_locations <= 75 Then
            .SeriesCollection(1).MarkerSize = 5
        ElseIf num_locations <= 100 Then
            .SeriesCollection(1).MarkerSize = 4
        Else
            .SeriesCollection(1).MarkerSize = 3
        End If
        
        '.Legend.LegendEntries(1).Delete
        .Axes(xlCategory).MajorGridlines.Delete
        .Axes(xlValue).MajorGridlines.Delete
        .HasAxis(xlValue, xlPrimary) = False
        .HasAxis(xlCategory, xlPrimary) = False
        
        For i = 1 To num_depots
            With .SeriesCollection(1).Points(i)
                .MarkerStyle = xlMarkerStyleSquare
    
                If num_locations <= 25 Then
                    .MarkerSize = 10
                ElseIf num_locations <= 50 Then
                    .MarkerSize = 9
                ElseIf num_locations <= 75 Then
                    .MarkerSize = 8
                ElseIf num_locations <= 100 Then
                    .MarkerSize = 7
                Else
                    .MarkerSize = 6
                End If
                
                .Format.Fill.Solid
                .MarkerBackgroundColorIndex = 1
                .MarkerForegroundColorIndex = 1
            End With
        Next i
        
        Dim counter As Long
        
        For counter = 1 To num_locations
        
            With .SeriesCollection(1).Points(counter)
            
                .HasDataLabel = True
                If labelOption = "Blank" Then
                    .DataLabel.Text = ""
                End If
                If labelOption = "Location IDs" Then
                    .DataLabel.Text = ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 1).Text
                End If
                If labelOption = "Location names" Then
                    .DataLabel.Text = ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 2).Text
                End If
                If labelOption = "(Time window start;Time window end)" Then
                    .DataLabel.Text = "(" & ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 6).Text & ";" & ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 7).Text & ")"
                End If
                If labelOption = "Service time" Then
                    .DataLabel.Text = ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 9).Text
                End If
                If labelOption = "Pickup amount" Then
                    .DataLabel.Text = ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 10).Text
                End If
                If labelOption = "Delivery amount" Then
                    .DataLabel.Text = ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 11).Text
                End If
                If labelOption = "(Pickup amount; Delivery amount)" Then
                    .DataLabel.Text = "(" & ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 10).Text & ";" & ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 11).Text & ")"
                End If
                If labelOption = "Profit" Then
                    .DataLabel.Text = ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 12).Text
                End If
                
                .DataLabel.position = xlLabelPositionAbove
            
                If ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 8).value = "Starting location" Then
                    .MarkerStyle = xlMarkerStyleSquare
                    .Format.Fill.Solid
                    .MarkerBackgroundColorIndex = 1
                    .MarkerForegroundColorIndex = 1
                End If
            
                If ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 8).value = "Must be visited" Then
                    .Format.Fill.Solid
                    .MarkerBackgroundColorIndex = 50
                    .MarkerForegroundColorIndex = 50
                End If
            
                If ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 8).value = "May be visited" Then
                    .Format.Fill.Solid
                    .MarkerBackgroundColorIndex = 4
                    .MarkerForegroundColorIndex = 4
                End If
                
                If ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 8).value = "Don't visit" Then
                    .Format.Fill.Solid
                    .MarkerBackgroundColorIndex = 43
                    .MarkerForegroundColorIndex = 43
                End If
            End With
        Next counter
                
        Dim depot As Long
        Dim vehicle_count As Long
        Dim offset As Long
        offset = 0
            
        k = 1
        For depot = 1 To num_depots
            
            For i = 1 To num_vehicle_types
            
                vehicle_count = ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + ((depot - 1) * num_vehicle_types) + i, 13).value
                For j = 1 To vehicle_count
                    
                    .SeriesCollection.NewSeries
                    k = k + 1
                    
                    .SeriesCollection(k).Name = "='4.Solution'!" & Cells(3, 2 + offset).address
                    
                    .SeriesCollection(k).Values = Range(ThisWorkbook.Worksheets("4.Solution").Cells(5, 4 + offset), ThisWorkbook.Worksheets("4.Solution").Cells(5 + num_stops + num_customers, 4 + offset))
                    .SeriesCollection(k).XValues = Range(ThisWorkbook.Worksheets("4.Solution").Cells(5, 5 + offset), ThisWorkbook.Worksheets("4.Solution").Cells(5 + num_stops + num_customers, 5 + offset))
                    
                    If excel_version > 13.9 Then
                        .SeriesCollection(k).ChartType = xlXYScatterLines
                    Else
                        .SeriesCollection(k).ChartType = xlXYScatterLines 'xlXYScatterSmooth
                    End If
                    
'                    .SeriesCollection(k).Format.Line.EndArrowheadStyle = msoArrowheadTriangle
'                    .SeriesCollection(k).Format.Line.EndArrowheadLength = msoArrowheadLong
'                    .SeriesCollection(k).Format.Line.EndArrowheadWidth = msoArrowheadWidthMedium
                    
                    If num_locations <= 25 Then
                        .SeriesCollection(k).Format.Line.Weight = 2.25
                    ElseIf num_locations <= 50 Then
                        .SeriesCollection(k).Format.Line.Weight = 2
                    ElseIf num_locations <= 75 Then
                        .SeriesCollection(k).Format.Line.Weight = 1.75
                    ElseIf num_locations <= 100 Then
                        .SeriesCollection(k).Format.Line.Weight = 1.5
                    Else
                        .SeriesCollection(k).Format.Line.Weight = 1.25
                    End If
                    
                    
                    .SeriesCollection(k).MarkerStyle = xlMarkerStyleNone
                    
                    offset = offset + offset_constant
                    
                Next j
                
            Next i
            
        Next depot
        
        .Legend.LegendEntries(1).Delete
        .Legend.position = xlLegendPositionRight
        .Legend.Top = 0
        .Legend.Height = 386
        
    End With
    
    ActiveSheet.ChartObjects(1).Activate
    ActiveChart.PlotArea.Select
    
    With Selection
       .Top = 0  'apply plot area distance from top of chart
       .Left = 0 'apply plot area distance from left of chart
       .Width = 386 'apply plot area width
       .Height = 386 'apply plot area height
    End With
    
    Dim minX As Double
    Dim maxX As Double
    Dim minY As Double
    Dim maxY As Double
    Dim centerX As Double
    Dim centerY As Double
    Dim tempX As Double
    Dim tempY As Double
    Dim finalSize As Double
    
    minX = ThisWorkbook.Worksheets("1.Locations").Cells(2, 5).value
    maxX = minX
    centerX = minX
    
    minY = ThisWorkbook.Worksheets("1.Locations").Cells(2, 4).value
    maxY = minY
    centerY = minY
    
    For i = 2 To num_locations
    
        tempX = ThisWorkbook.Worksheets("1.Locations").Cells(1 + i, 5).value
        tempY = ThisWorkbook.Worksheets("1.Locations").Cells(1 + i, 4).value
        
        centerX = centerX + tempX
        centerY = centerY + tempY
        
        If minX > tempX Then
            minX = tempX
        End If
        
        If maxX < tempX Then
            maxX = tempX
        End If
        
        If minY > tempY Then
            minY = tempY
        End If
        
        If maxY < tempY Then
            maxY = tempY
        End If
    Next i
    
    centerX = centerX / num_locations
    centerY = centerY / num_locations
    
    If backgroundOption = "Blank" Then
    
        finalSize = maxX - centerX
        If finalSize < (centerX - minX) Then
            finalSize = (centerX - minX)
        End If
        If finalSize < (maxY - centerY) Then
            finalSize = (maxY - centerY)
        End If
        If finalSize < (centerY - minY) Then
            finalSize = (centerY - minY)
        End If
        
        finalSize = finalSize * 1.05
        
        maxX = centerX + finalSize
        minX = centerX - finalSize
        maxY = centerY + finalSize
        minY = centerY - finalSize
        
        ActiveSheet.ChartObjects(1).Chart.Axes(xlCategory, xlPrimary).MinimumScale = minX
        ActiveSheet.ChartObjects(1).Chart.Axes(xlCategory, xlPrimary).MaximumScale = maxX
        
        ActiveSheet.ChartObjects(1).Chart.Axes(xlValue, xlPrimary).MinimumScale = minY
        ActiveSheet.ChartObjects(1).Chart.Axes(xlValue, xlPrimary).MaximumScale = maxY
        
    End If
    
    If backgroundOption = "Bing Maps" Then
        
        Dim neX As Double, neY As Double, swX As Double, swY As Double
        Dim imageSize As Long, zoom As Long
        Dim UrlString As String
        Dim QueryString As String
        
        imageSize = 640
        zoom = 21
        Do
            zoom = zoom - 1
            Call CornersOfBingMap(centerY, centerX, zoom, imageSize, neY, neX, swY, swX)
        Loop While (neX < maxX) Or (neY < maxY) Or (swX > minX) Or (swY > minY)
        
        
        Dim correctionCoefficient As Double
    
        If zoom >= 8 Then
            correctionCoefficient = 1
        ElseIf zoom >= 3 Then
            correctionCoefficient = 1 + (341.26 * (zoom ^ (-6.405)))
        Else
            correctionCoefficient = 1.3
        End If
    
        neY = neY * correctionCoefficient
        swY = swY * correctionCoefficient
    
        'MsgBox ("Zoom level: " & zoom)
        
        ActiveSheet.ChartObjects(1).Chart.Axes(xlCategory, xlPrimary).MinimumScale = swX
        ActiveSheet.ChartObjects(1).Chart.Axes(xlCategory, xlPrimary).MaximumScale = neX
        
        ActiveSheet.ChartObjects(1).Chart.Axes(xlValue, xlPrimary).MinimumScale = swY
        ActiveSheet.ChartObjects(1).Chart.Axes(xlValue, xlPrimary).MaximumScale = neY
        
        UrlString = "http://dev.virtualearth.net/REST/v1/Imagery/Map/Road/"
        UrlString = UrlString & Replace(CStr(centerY), ",", ".") & "," & Replace(CStr(centerX), ",", ".")
        UrlString = UrlString & "/" & zoom
        QueryString = QueryString & "mapSize=" & imageSize & "," & imageSize & "&"
        QueryString = QueryString & "imagerySet=" & "Road&"
        QueryString = QueryString & "key=" & BingMapsKey
        
        'ThisWorkbook.Worksheets("5.Visualization").Cells(30, 1).Value = url
        
        #If Mac And (MAC_OFFICE_VERSION < 15) Then
            
            Dim filePath As String
            
            filePath = Application.ThisWorkbook.Path
            filePath = Replace(filePath, "Macintosh HD", "")
            filePath = Replace(filePath, ":", "/")
            filePath = filePath & "/staticMap.jpg"
            
            MacScript ("do shell script " & Chr(34) & "curl -o " & filePath & " '" & UrlString & "?" & QueryString & "'" & " --silent" & Chr(34))

        #End If
        
        With Selection.Format.Fill
            .Visible = msoTrue
            #If Mac And (MAC_OFFICE_VERSION < 15) Then
                .UserPicture (Application.ThisWorkbook.Path & ":staticMap.jpg")
            #Else
                .UserPicture (UrlString & "?" & QueryString)
            #End If
            
            '.TextureTile = msoFalse
            .Transparency = 0.5
        End With
        
    End If
    
    If ThisWorkbook.Worksheets("4.Solution").Cells(2, 1) <> "" Then
        ActiveSheet.ChartObjects(1).Chart.PlotArea.Format.Line.Visible = msoTrue
        ActiveSheet.ChartObjects(1).Chart.PlotArea.Format.Line.ForeColor.RGB = RGB(255, 192, 0)
        ActiveSheet.ChartObjects(1).Chart.PlotArea.Format.Line.Weight = 3
    Else
        ActiveSheet.ChartObjects(1).Chart.PlotArea.Format.Line.Visible = msoTrue
        ActiveSheet.ChartObjects(1).Chart.PlotArea.Format.Line.ForeColor.RGB = RGB(255, 255, 255)
        ActiveSheet.ChartObjects(1).Chart.PlotArea.Format.Line.Weight = 1
    End If
    
Setup_Visalization_Finish:
    
    ActiveSheet.Shapes(1).LockAspectRatio = msoTrue
    
    ActiveWindow.zoom = True
    
    Application.ScreenUpdating = True
    
End Sub
Sub PopulateLatitudeAndLongitude()

    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    Dim num_depots As Long
    num_depots = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).value
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).value
    
    Dim num_locations As Long
    num_locations = num_depots + num_customers
    
    Dim estimatedTime As Double
    estimatedTime = num_locations * 1.6
    
    WorksheetExists = CheckWorksheetExistence("1.Locations")
    
    If WorksheetExists = False Then
        reply = MsgBox("Worksheet 1.Locations must exist for coordinates to be determined.", vbOKOnly, "VRP Spreadsheet Solver")
        Exit Sub
    Else
        
        Dim BingMapsKey As String
        BingMapsKey = ThisWorkbook.Worksheets("VRP Solver Console").Cells(2, 3).value
        If Len(BingMapsKey) < 32 Then
            reply = MsgBox("A valid Bing Maps Key is required for Lat/Lon to be determined. You can get a free key at https://www.bingmapsportal.com/", vbOKOnly, "VRP Spreadsheet Solver")
            Exit Sub
        End If
        
        WorksheetExists = CheckWorksheetExistence("2.Distances")
        If WorksheetExists = True Then
            reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds), overwrite the existing coordinate data, and erase existing distance data. By clicking the Yes button below, you confirm that you accept Bing Maps Terms of Service. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
            If reply = vbNo Then
                Exit Sub
            Else
                ThisWorkbook.Worksheets("2.Distances").Activate
                Range(Cells(2, 3), Cells(1 + num_locations * num_locations, 4)).Select
                Selection.value = 0
                Cells(1, 1).Select
            End If
        Else
            reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds) and overwrite the existing coordinate data. By clicking the Yes button below, you confirm that you accept Bing Maps Terms of Service. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
            If reply = vbNo Then
                Exit Sub
            End If
        End If
    End If
    
    ThisWorkbook.Worksheets("1.Locations").Activate
    
    Dim address As String
    Dim latitude As Double
    Dim longitude As Double
    
    Dim i As Long
    Dim error_count As Long
    
    error_count = 0
    For i = 1 To num_locations
        address = Cells(1 + i, 3).value
        If Len(address) >= 3 Then
            address = Replace(address, " ", "%20")
            address = Replace(address, ",", "%20")
            address = Replace(address, Chr(150), "-")
            address = Replace(address, Chr(151), "-")
            
            Call GeocodeAddressUsingBingMaps(address, latitude, longitude, BingMapsKey)
            If ((Abs(latitude) < 90) And (Abs(longitude) < 180)) Then
                Cells(1 + i, 4).value = latitude
                Cells(1 + i, 5).value = longitude
            ElseIf ((Abs(latitude) = 91) And (Abs(longitude) = 181)) Then
                Cells(1 + i, 4).value = "Address error"
                Cells(1 + i, 5).value = "Address error"
                error_count = error_count + 1
            ElseIf ((Abs(latitude) = 92) And (Abs(longitude) = 182)) Then
                reply = MsgBox("Your Bing Maps key is not valid or has expired. Remaining coordinates will not be populated.", vbOKOnly, "VRP Spreadsheet Solver")
                Application.StatusBar = False
                Exit Sub
            End If
            Application.Wait (Now() + CDate("00:00:01"))
        End If
        Application.StatusBar = "Populating Lat/Lon, " & Format(i / num_locations, "00%") & " complete."
    Next i
    
    Application.StatusBar = False
    
    Dim BingMap As ChartObject
    For Each BingMap In ActiveSheet.ChartObjects
        BingMap.Delete
    Next
    
    DoEvents
        
    If error_count = 0 Then
        
        
        ' 0, 475, 0, 392
        ActiveSheet.ChartObjects.Add(Left:=0, Width:=400, Top:=Worksheets("1.Locations").Rows(1).RowHeight * (num_locations + 2), Height:=400).Chart.ChartType = xlXYScatter 'Width:=475
          
        Do Until ActiveSheet.ChartObjects(1).Chart.SeriesCollection.count = 0
            ActiveSheet.ChartObjects(1).Chart.SeriesCollection(1).Delete
        Loop
        
        With ActiveSheet.ChartObjects(1).Chart
            .PlotVisibleOnly = False
            .SeriesCollection.NewSeries
            .SeriesCollection(1).Values = Range(ThisWorkbook.Worksheets("1.Locations").Cells(2, 4), ThisWorkbook.Worksheets("1.Locations").Cells(1 + num_locations, 4))
            .SeriesCollection(1).XValues = Range(ThisWorkbook.Worksheets("1.Locations").Cells(2, 5), ThisWorkbook.Worksheets("1.Locations").Cells(1 + num_locations, 5))
            .ChartType = xlXYScatter
            .SeriesCollection(1).MarkerStyle = xlMarkerStyleCircle
            
            If num_locations <= 25 Then
                .SeriesCollection(1).MarkerSize = 7
            ElseIf num_locations <= 50 Then
                .SeriesCollection(1).MarkerSize = 6
            ElseIf num_locations <= 75 Then
                .SeriesCollection(1).MarkerSize = 5
            ElseIf num_locations <= 100 Then
                .SeriesCollection(1).MarkerSize = 4
            Else
                .SeriesCollection(1).MarkerSize = 3
            End If
            
            '.Legend.LegendEntries(1).Delete
            .Axes(xlCategory).MajorGridlines.Delete
            .Axes(xlValue).MajorGridlines.Delete
            .HasAxis(xlValue, xlPrimary) = False
            .HasAxis(xlCategory, xlPrimary) = False
            
            For i = 1 To num_depots
                With .SeriesCollection(1).Points(i)
                    .MarkerStyle = xlMarkerStyleSquare
        
                    If num_locations <= 25 Then
                        .MarkerSize = 10
                    ElseIf num_locations <= 50 Then
                        .MarkerSize = 9
                    ElseIf num_locations <= 75 Then
                        .MarkerSize = 8
                    ElseIf num_locations <= 100 Then
                        .MarkerSize = 7
                    Else
                        .MarkerSize = 6
                    End If
                    
                    .Format.Fill.Solid
                    .MarkerBackgroundColorIndex = 1
                    .MarkerForegroundColorIndex = 1
                End With
            Next i
            
            Dim counter As Long
            
            For counter = 1 To num_locations
            
                With .SeriesCollection(1).Points(counter)
                
                    .HasDataLabel = True
                    .DataLabel.Text = ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 1).Text
                    .DataLabel.position = xlLabelPositionAbove
                
                    If ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 8).value = "Starting location" Then
                        .MarkerStyle = xlMarkerStyleSquare
                        .Format.Fill.Solid
                        .MarkerBackgroundColorIndex = 1
                        .MarkerForegroundColorIndex = 1
                    End If
                
                    If ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 8).value = "Must be visited" Then
                        .Format.Fill.Solid
                        .MarkerBackgroundColorIndex = 50
                        .MarkerForegroundColorIndex = 50
                    End If
                
                    If ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 8).value = "May be visited" Then
                        .Format.Fill.Solid
                        .MarkerBackgroundColorIndex = 4
                        .MarkerForegroundColorIndex = 4
                    End If
                    
                    If ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 8).value = "Don't visit" Then
                        .Format.Fill.Solid
                        .MarkerBackgroundColorIndex = 43
                        .MarkerForegroundColorIndex = 43
                    End If
                End With
            Next counter
        
            .HasLegend = False
            '.Legend.LegendEntries(1).Delete
            
        End With
        
        ActiveSheet.ChartObjects(1).Activate
        ActiveChart.PlotArea.Select
        
        With Selection
           .Top = 0  'apply plot area distance from top of chart
           .Left = 0 'apply plot area distance from left of chart
           .Width = 386 'apply plot area width
           .Height = 386 'apply plot area height
        End With
        
        Dim minX As Double
        Dim maxX As Double
        Dim minY As Double
        Dim maxY As Double
        Dim centerX As Double
        Dim centerY As Double
        Dim tempX As Double
        Dim tempY As Double
        Dim finalSize As Double
        
        minX = ThisWorkbook.Worksheets("1.Locations").Cells(2, 5).value
        maxX = minX
        centerX = minX
        
        minY = ThisWorkbook.Worksheets("1.Locations").Cells(2, 4).value
        maxY = minY
        centerY = minY
        
        For i = 2 To num_locations
        
            tempX = ThisWorkbook.Worksheets("1.Locations").Cells(1 + i, 5).value
            tempY = ThisWorkbook.Worksheets("1.Locations").Cells(1 + i, 4).value
            
            centerX = centerX + tempX
            centerY = centerY + tempY
            
            If minX > tempX Then
                minX = tempX
            End If
            
            If maxX < tempX Then
                maxX = tempX
            End If
            
            If minY > tempY Then
                minY = tempY
            End If
            
            If maxY < tempY Then
                maxY = tempY
            End If
        Next i
        
        centerX = centerX / num_locations
        centerY = centerY / num_locations
                    
        Dim neX As Double, neY As Double, swX As Double, swY As Double
        Dim imageSize As Long, zoom As Long
        Dim UrlString As String
        Dim QueryString As String
        
        imageSize = 640
        zoom = 21
        Do
            zoom = zoom - 1
            Call CornersOfBingMap(centerY, centerX, zoom, imageSize, neY, neX, swY, swX)
        Loop While (neX < maxX) Or (neY < maxY) Or (swX > minX) Or (swY > minY)
        
        
        Dim correctionCoefficient As Double
    
        If zoom >= 8 Then
            correctionCoefficient = 1
        ElseIf zoom >= 3 Then
            correctionCoefficient = 1 + (341.26 * (zoom ^ (-6.405)))
        Else
            correctionCoefficient = 1.3
        End If
    
        neY = neY * correctionCoefficient
        swY = swY * correctionCoefficient
        
        ActiveSheet.ChartObjects(1).Chart.Axes(xlCategory, xlPrimary).MinimumScale = swX
        ActiveSheet.ChartObjects(1).Chart.Axes(xlCategory, xlPrimary).MaximumScale = neX
        
        ActiveSheet.ChartObjects(1).Chart.Axes(xlValue, xlPrimary).MinimumScale = swY
        ActiveSheet.ChartObjects(1).Chart.Axes(xlValue, xlPrimary).MaximumScale = neY
        
        UrlString = "http://dev.virtualearth.net/REST/v1/Imagery/Map/Road/"
        UrlString = UrlString & Replace(CStr(centerY), ",", ".") & "," & Replace(CStr(centerX), ",", ".")
        UrlString = UrlString & "/" & zoom
        QueryString = QueryString & "mapSize=" & imageSize & "," & imageSize & "&"
        QueryString = QueryString & "imagerySet=" & "Road&"
        QueryString = QueryString & "key=" & BingMapsKey
        
        #If Mac And (MAC_OFFICE_VERSION < 15) Then
            
            Dim filePath As String
            
            filePath = Application.ThisWorkbook.Path
            filePath = Replace(filePath, "Macintosh HD", "")
            filePath = Replace(filePath, ":", "/")
            filePath = filePath & "/staticMap.jpg"
            
            MacScript ("do shell script " & Chr(34) & "curl -o " & filePath & " '" & UrlString & "?" & QueryString & "'" & " --silent" & Chr(34))

        #End If
        
        With Selection.Format.Fill
            .Visible = msoTrue
            #If Mac And (MAC_OFFICE_VERSION < 15) Then
                .UserPicture (Application.ThisWorkbook.Path & ":staticMap.jpg")
            #Else
                .UserPicture (UrlString & "?" & QueryString)
            #End If
            
            '.TextureTile = msoFalse
            .Transparency = 0.5
        End With
        
        Cells(num_locations + 2, 1).Select
        
        Application.Wait (Now() + CDate("00:00:01"))
        
        DoEvents
        
        reply = MsgBox("Lat/Lon populated. Please check the map in the Locations worksheet for geocoding errors.", vbInformation, "VRP Spreadsheet Solver")
    Else
        reply = MsgBox("Some Lat/Lon values were not received. Please check columns D and E.", vbInformation, "VRP Spreadsheet Solver")
    End If
    
End Sub

Private Sub CornersOfBingMap(centerLat As Double, centerLon As Double, zoom As Long, imageSize As Long, neLat As Double, neLon As Double, swLat As Double, swLon As Double)
    
    Dim myPi As Double
    myPi = WorksheetFunction.Pi
          
    Dim mapSize As Long
    mapSize = 256 * (2 ^ zoom)
        
    Dim mx As Double, my As Double
    Dim px As Long, py As Long
    
    Dim sinLatitude As Double
    
    'center pixel coordinates
    
    mx = (centerLon + 180) / 360
    
    sinLatitude = Sin(centerLat * myPi / 180)
    my = 0.5 - Log((1 + sinLatitude) / (1 - sinLatitude)) / (4 * myPi)

    px = mx * mapSize + 0.5
    py = my * mapSize + 0.5
    
    'NE
    
    mx = ((px + (imageSize / 2)) / mapSize) - 0.5
    my = 0.5 - ((py - (imageSize / 2)) / mapSize)

    neLat = (90 - 360 * Atn(Exp(-my * 2 * myPi)) / myPi)
    neLon = 360 * mx
        
    'SW
    
    mx = ((px - (imageSize / 2)) / mapSize) - 0.5
    my = 0.5 - ((py + (imageSize / 2)) / mapSize)

    swLat = (90 - 360 * Atn(Exp(-my * 2 * myPi)) / myPi)
    swLon = 360 * mx
    
End Sub

Private Sub About()
    Dim reply As Integer
    reply = MsgBox("VRP Spreadsheet Solver 3.31" & Chr(13) & "Open source, developed by Dr Gunes Erdogan (G.Erdogan@bath.ac.uk)" & Chr(13) & "School of Management, University of Bath, 2019." & Chr(13) & _
 Chr(13) & "The latest version of the solver can be downloaded at: http://people.bath.ac.uk/ge277/index.php/vrp-spreadsheet-solver/" & Chr(13) & Chr(13) & "DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE ORIGINAL DEVELOPER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", vbInformation, "VRP Spreadsheet Solver")
End Sub
Private Sub SendFeedback()
    ThisWorkbook.FollowHyperlink "mailto:G.Erdogan@bath.ac.uk&subject=VRP Spreadsheet Solver"
End Sub
Private Sub WatchTutorial()
    ThisWorkbook.FollowHyperlink "https://www.youtube.com/watch?v=enCBp2lBn64"
End Sub
Sub ResetWorkbook()

    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    reply = MsgBox("This will delete all existing problem data. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
    If reply = vbNo Then
        Exit Sub
    Else
    
        Application.DisplayAlerts = False
        
        WorksheetExists = CheckWorksheetExistence("5.Visualization")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("5.Visualization").Delete
            DoEvents
        End If

        WorksheetExists = CheckWorksheetExistence("4.Solution")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("4.Solution").Delete
            DoEvents
        End If
        
        WorksheetExists = CheckWorksheetExistence("3.Vehicles")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("3.Vehicles").Delete
            DoEvents
        End If
        
        WorksheetExists = CheckWorksheetExistence("2.Distances")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("2.Distances").Delete
            DoEvents
        End If
        
        WorksheetExists = CheckWorksheetExistence("1.Locations")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("1.Locations").Delete
            DoEvents
        End If
    
        WorksheetExists = CheckWorksheetExistence("VRP Solver Console")
        If WorksheetExists = False Then
            Call SetupConsoleWorksheet
            DoEvents
        End If
        
        Application.DisplayAlerts = True
    End If

    WorksheetExists = CheckWorksheetExistence("VRP Solver Console")
    If WorksheetExists = False Then
        Call SetupConsoleWorksheet
    End If
    
    ThisWorkbook.Worksheets("VRP Solver Console").Activate
End Sub
Sub SortLocations()
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    Dim num_depots As Long
    num_depots = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).value
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).value
    
    Dim num_locations As Long
    num_locations = num_depots + num_customers
    
    WorksheetExists = CheckWorksheetExistence("1.Locations")
    If WorksheetExists = False Then
        reply = MsgBox("Worksheet 1.Locations must exist for locations to be sorted.", vbOKOnly, "VRP Spreadsheet Solver")
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.Distances") Or CheckWorksheetExistence("4.Solution") Or CheckWorksheetExistence("5.Visualization")
    If WorksheetExists = True Then
        reply = MsgBox("This will delete existing distance, solution, and visualization data. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        End If
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.Distances")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("2.Distances").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("3.Vehicles")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("3.Vehicles").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("4.Solution")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("4.Solution").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("5.Visualization")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("5.Visualization").Delete
        Application.DisplayAlerts = True
    End If
    ThisWorkbook.Worksheets("1.Locations").Activate
    
    Range(Cells(2, 2), Cells(1 + num_depots, 12)).Select
    Selection.Sort Key1:=Columns("B"), Order1:=xlAscending, Header:=xlNo
    
    Range(Cells(2 + num_depots, 2), Cells(1 + num_locations, 12)).Select
    Selection.Sort Key1:=Columns("B"), Order1:=xlAscending, Header:=xlNo
    
    Cells(1, 1).Select
    
End Sub
Function GetLocalizedFormula(formula As String)
    ' returns the English formula from the parameter in the local format
    Dim temporary As String
    temporary = Range("A1").formula
    Range("A1").formula = formula
    Dim result As String
    result = Range("A1").FormulaLocal
    Range("A1").formula = temporary
    GetLocalizedFormula = result
End Function
Sub SetupMenuItems()
    Call ThisWorkbook.Workbook_Open
End Sub

' ribbon calls and tab activation

#If Win32 Or Win64 Or (MAC_OFFICE_VERSION >= 15) Then

Sub ResetWorkbookRibbonCall(control As IRibbonControl)
    Call ResetWorkbook
End Sub
Sub SetupLocationsWorksheetRibbonCall(control As IRibbonControl)
    Call SetupLocationsWorksheet
End Sub
Sub SortLocationsRibbonCall(control As IRibbonControl)
    Call SortLocations
End Sub
Sub PopulateLatitudeAndLongitudeRibbonCall(control As IRibbonControl)
    Call PopulateLatitudeAndLongitude
End Sub
Sub SetupDistancesWorksheetRibbonCall(control As IRibbonControl)
    Call SetupDistancesWorksheet
End Sub
Sub PopulateDistancesRibbonCall(control As IRibbonControl)
    Call PopulateDistances
End Sub
Sub SetupVehiclesWorksheetRibbonCall(control As IRibbonControl)
    Call SetupVehiclesWorksheet
End Sub
Sub SetupSolutionWorksheetRibbonCall(control As IRibbonControl)
    Call SetupSolutionWorksheet
End Sub
Sub SetupVisualizationWorksheetRibbonCall(control As IRibbonControl)
    Call SetupVisualizationWorksheet
End Sub
Private Sub SendFeedbackRibbonCall(control As IRibbonControl)
    Call SendFeedback
End Sub
Private Sub WatchTutorialRibbonCall(control As IRibbonControl)
    Call WatchTutorial
End Sub
Private Sub AboutRibbonCall(control As IRibbonControl)
    Call About
End Sub
Sub tabActivate(ribbon As IRibbonUI)
    ribbon.ActivateTab ("VRPSpreadsheetSolver")
End Sub

#End If

Attribute VB_Name = "Module2"
'This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/.

Option Explicit

#If Win64 Then
   Private Declare PtrSafe Function vrp_spreadsheet_solver Lib "vrp_spreadsheet_solver.dll" (arg1 As instance_data, arg2 As solver_option_data, _
        time_window_start As LongPtr, time_window_end As LongPtr, mandatory As LongPtr, service_time As LongPtr, pickup_amount As Double, delivery_amount As Double, profit As Double, _
        distance As Double, duration As LongPtr, from_location As LongPtr, to_location As LongPtr, _
        capacity As Double, fixed_cost As Double, variable_cost As Double, duration_multiplier As Double, distance_limit As Double, work_start_time As LongPtr, driving_time_limit As LongPtr, working_time_limit As LongPtr, number_available As LongPtr, _
        vertex_index As LongPtr, origin_depot As LongPtr, return_depot As LongPtr, depot_return_flag As LongPtr, vehicle_type As LongPtr, vehicle_index As LongPtr) As Double
#ElseIf Win32 Then
    Private Declare Function vrp_spreadsheet_solver Lib "vrp_spreadsheet_solver.dll" (arg1 As instance_data, arg2 As solver_option_data, _
        time_window_start As Long, time_window_end As Long, mandatory As Long, service_time As Long, pickup_amount As Double, delivery_amount As Double, profit As Double, _
        distance As Double, duration As Long, from_location As Long, to_location As Long, _
        capacity As Double, fixed_cost As Double, variable_cost As Double, duration_multiplier As Double, distance_limit As Double, work_start_time As Long, driving_time_limit As Long, working_time_limit As Long, number_available As Long, _
        vertex_index As Long, origin_depot As Long, return_depot As Long, depot_return_flag As Long, vehicle_type As Long, vehicle_index As Long) As Double
#End If
            
Const epsilon As Double = 0.0001
Const max_improvement_iterations As Integer = 50
Const offset_constant As Long = 17

'data declarations

Private Type vertex_data
    service_time As Long
    mandatory As Long
    profit As Double
    pickup_amount As Double
    delivery_amount As Double
    time_window_start As Long
    time_window_end As Long
End Type

Private Type vertex_list_data
    num_depots As Long
    num_customers As Long
    num_locations As Long
    vertices() As vertex_data
End Type

Dim vertex_list As vertex_list_data

Private Type vehicle_type_data
    capacity As Double
    fixed_cost_per_trip As Double
    cost_per_unit_distance As Double
    duration_multiplier As Double
    number_available As Long
    work_start_time As Long
    distance_limit As Double
    driving_time_limit As Long
    working_time_limit As Long
    origin_base_id As Long
    return_base_id As Long
    type_id As Long
End Type

Private Type vehicle_type_list_data
    num_vehicle_types As Long
    vehicle_types() As vehicle_type_data
End Type

Dim vehicle_type_list As vehicle_type_list_data

Private Type arc_data
    distance() As Double
    duration() As Double
End Type

Dim arc_list As arc_data

Private Type instance_data
    open_vrp As Boolean
    multi_trip As Boolean
    penalty As Double
    soft_time_windows As Boolean
    backhauls As Boolean
    num_depots As Long
    num_customers As Long
    num_locations As Long
    num_vehicle_types As Long
End Type

Dim instance As instance_data

Private Type solution_data
    feasible As Boolean
    covers_mandatory_vertices As Boolean
    net_profit As Double
    total_distance As Double
    net_profit_per_route() As Double
    total_distance_per_route() As Double
    route_vertex_cnt() As Long
    route_vertices() As Long
    vertices_visited() As Long
End Type

Private Type solver_option_data
    CPU_time_limit As Double
    LNS_minimum_removal_rate As Double
    LNS_maximum_removal_rate As Double
    LNS_candidate_list_size As Long
    warm_start As Boolean
    status_updates As Boolean
End Type

Dim solver_options As solver_option_data

Private Type candidate_data
    mandatory As Long
    net_profit As Double
    total_distance As Double
    vertex_to_be_added As Long
    vehicle_type_index As Long
    vehicle_id As Long
    position As Long
End Type

Private Type DP_data
    value() As Double
    control() As Double
End Type

Dim DP_list As DP_data


Private Sub GetInstanceData()

    ThisWorkbook.Worksheets("VRP Solver Console").Activate
    
    With instance
        
        .num_depots = Cells(4, 3).value
        .num_customers = Cells(5, 3).value
        .num_locations = .num_depots + .num_customers
        
        .num_vehicle_types = Cells(12, 3).value
        
        If Cells(14, 3).value = "No" Then
            .open_vrp = True
        Else
            .open_vrp = False
        End If
        
        If Cells(14, 3).value = "Yes - may do so multiple times" Then
            .multi_trip = True
        Else
            .multi_trip = False
        End If
        
        If Cells(15, 3).value = "Hard" Then
            .soft_time_windows = False
        Else
            .soft_time_windows = True
        End If
        
        If Cells(16, 3).value = "No" Then
            .backhauls = False
        Else
            .backhauls = True
        End If
        
    End With
End Sub
Private Sub GetSolverOptions()
    
    ThisWorkbook.Worksheets("VRP Solver Console").Activate
    
    With solver_options
        
        If Cells(21, 3).value = "Yes" Then
            .warm_start = True
        Else
            .warm_start = False
        End If
        
        If Cells(22, 3).value = "Yes" Then
            .status_updates = True
        Else
            .status_updates = False
        End If
        
        .CPU_time_limit = Cells(23, 3).value
        
        .LNS_minimum_removal_rate = 0.15 '0.1
        .LNS_maximum_removal_rate = 0.35 '0.3
        
        Dim fraction_of_optional_customers As Double
        Dim i As Long
        
        For i = vertex_list.num_depots + 1 To vertex_list.num_locations
            If vertex_list.vertices(i).mandatory = 0 Then
                fraction_of_optional_customers = fraction_of_optional_customers + 1
            End If
        Next i
        
        fraction_of_optional_customers = fraction_of_optional_customers / vertex_list.num_customers
        
        If fraction_of_optional_customers < 0.33 Then
            .LNS_candidate_list_size = 1
        ElseIf fraction_of_optional_customers < 0.66 Then
            .LNS_candidate_list_size = 2
        Else
            .LNS_candidate_list_size = 3
        End If

               
    End With
End Sub
Private Sub GetVertexData()
    
    With vertex_list
        
        .num_depots = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).value
        .num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).value
        .num_locations = .num_depots + .num_customers
        
        ReDim vertex_list.vertices(1 To .num_locations)
        
        ThisWorkbook.Worksheets("1.Locations").Activate
        
        Dim i As Long
        
        For i = 1 To .num_locations
            
            .vertices(i).time_window_start = 1440 * Cells(1 + i, 6).value
            .vertices(i).time_window_end = 1440 * Cells(1 + i, 7).value

            If Cells(1 + i, 8).value = "Must be visited" Then
                .vertices(i).mandatory = 1
            ElseIf Cells(1 + i, 8).value = "Don't visit" Then
                .vertices(i).mandatory = -1
            Else
                .vertices(i).mandatory = 0
            End If
            
            .vertices(i).service_time = 1440 * Cells(1 + i, 9).value
            
            .vertices(i).pickup_amount = Cells(1 + i, 10).value
            
            .vertices(i).delivery_amount = Cells(1 + i, 11).value
            
            .vertices(i).profit = Cells(1 + i, 12).value
            
        Next i
    
    End With
    
End Sub
Private Sub GetArcData()
    
    ThisWorkbook.Worksheets("2.Distances").Activate
    
    With arc_list
        ReDim .distance(1 To vertex_list.num_locations, 1 To vertex_list.num_locations)
        ReDim .duration(1 To vertex_list.num_locations, 1 To vertex_list.num_locations)
        
        Dim i As Long
        Dim j As Long
        Dim k As Long
        
        k = 2
        For i = 1 To vertex_list.num_locations
            For j = 1 To vertex_list.num_locations
            
                .distance(i, j) = Application.WorksheetFunction.Floor(Cells(k, 3).value, epsilon)
                .duration(i, j) = 1440 * Cells(k, 4).value
                
                k = k + 1
            Next j
        Next i
    End With
    
End Sub
Private Sub GetVehicleTypeData()
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim base_vehicle_types As Long
    
    With vehicle_type_list
    
        base_vehicle_types = ThisWorkbook.Worksheets("VRP Solver Console").Cells(12, 3).value
        
        .num_vehicle_types = base_vehicle_types * vertex_list.num_depots
        
        ReDim .vehicle_types(1 To .num_vehicle_types)
        
        ThisWorkbook.Worksheets("3.Vehicles").Activate
        
        k = 1
        
        For i = 1 To vertex_list.num_depots
        
            For j = 1 To base_vehicle_types
                
                .vehicle_types(k).capacity = Cells(k + 1, 3).value
                
                .vehicle_types(k).fixed_cost_per_trip = Cells(k + 1, 4).value
                
                .vehicle_types(k).cost_per_unit_distance = Cells(k + 1, 5).value
                
                .vehicle_types(k).duration_multiplier = Cells(k + 1, 6).value
                
                .vehicle_types(k).distance_limit = Cells(k + 1, 7).value
                
                .vehicle_types(k).work_start_time = 1440 * Cells(k + 1, 8).value
                
                .vehicle_types(k).driving_time_limit = 1440 * Cells(k + 1, 9).value
                
                .vehicle_types(k).working_time_limit = 1440 * Cells(k + 1, 10).value
                
                .vehicle_types(k).number_available = Cells(k + 1, 13).value
                
                .vehicle_types(k).origin_base_id = i
                
                .vehicle_types(k).return_base_id = Cells(k + 1, 12).value + 1
                
                .vehicle_types(k).type_id = j
                
                k = k + 1
            
            Next j
            
        Next i
        
    End With
    
End Sub
Private Sub InitializeSolution(solution As solution_data)
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim max_number_of_vehicles As Long
    max_number_of_vehicles = 0
        
    With solution
        .feasible = False
        .covers_mandatory_vertices = False
        .net_profit = 0
        .total_distance = 0
        
        For i = 1 To vehicle_type_list.num_vehicle_types
            If max_number_of_vehicles < vehicle_type_list.vehicle_types(i).number_available Then
                max_number_of_vehicles = vehicle_type_list.vehicle_types(i).number_available
            End If
        Next i
        
        ReDim .net_profit_per_route(1 To vehicle_type_list.num_vehicle_types, 1 To max_number_of_vehicles)
        ReDim .total_distance_per_route(1 To vehicle_type_list.num_vehicle_types, 1 To max_number_of_vehicles)
        ReDim .route_vertex_cnt(1 To vehicle_type_list.num_vehicle_types, 1 To max_number_of_vehicles)
        ReDim .route_vertices(1 To vehicle_type_list.num_vehicle_types, 1 To max_number_of_vehicles, 1 To vertex_list.num_customers)
        ReDim .vertices_visited(1 To vertex_list.num_locations)
        
        For i = 1 To vehicle_type_list.num_vehicle_types
            For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                
                .net_profit_per_route(i, j) = 0
                .total_distance_per_route(i, j) = 0
                .route_vertex_cnt(i, j) = 0
                
                For k = 1 To vertex_list.num_customers
                    .route_vertices(i, j, k) = -1
                Next k
            Next j
        Next i
        
        For k = 1 To vertex_list.num_locations
            .vertices_visited(k) = 0
        Next k
    End With
    
    ReDim DP_list.control(1 To vertex_list.num_customers)
    ReDim DP_list.value(1 To vertex_list.num_customers)
    
End Sub
Private Sub AddVertex(solution As solution_data, vertex_to_be_added As Long, vehicle_type_index As Long, vehicle_id As Long, position As Long)
    
    With solution
        
        .vertices_visited(vertex_to_be_added) = .vertices_visited(vertex_to_be_added) + 1
    
        Dim i As Long
    
        'shift
    
        For i = .route_vertex_cnt(vehicle_type_index, vehicle_id) To position Step -1
            .route_vertices(vehicle_type_index, vehicle_id, i + 1) = .route_vertices(vehicle_type_index, vehicle_id, i)
        Next i
        
        .route_vertices(vehicle_type_index, vehicle_id, position) = vertex_to_be_added
    
        .route_vertex_cnt(vehicle_type_index, vehicle_id) = .route_vertex_cnt(vehicle_type_index, vehicle_id) + 1
        
        If instance.multi_trip = True Then
        
            Call EvaluateRouteMultiTrip(solution, vehicle_type_index, vehicle_id)
            
        Else
        
            Call EvaluateRouteSingleTrip(solution, vehicle_type_index, vehicle_id)
        
        End If
        
        If vertex_list.vertices(vertex_to_be_added).mandatory = 1 Then
            .net_profit = .net_profit + instance.penalty
        End If
        
    End With

End Sub
Private Sub RemoveVertex(solution As solution_data, vehicle_type_index As Long, vehicle_id As Long, position As Long)
    
    Dim vertex_to_be_removed As Long
    
    With solution
        
        vertex_to_be_removed = .route_vertices(vehicle_type_index, vehicle_id, position)
        
        .vertices_visited(vertex_to_be_removed) = .vertices_visited(vertex_to_be_removed) - 1
    
        Dim i As Long
        
        'shift
        
        For i = position To .route_vertex_cnt(vehicle_type_index, vehicle_id) - 1
            .route_vertices(vehicle_type_index, vehicle_id, i) = .route_vertices(vehicle_type_index, vehicle_id, i + 1)
        Next i
    
        .route_vertex_cnt(vehicle_type_index, vehicle_id) = .route_vertex_cnt(vehicle_type_index, vehicle_id) - 1
        
        If instance.multi_trip = True Then
        
            Call EvaluateRouteMultiTrip(solution, vehicle_type_index, vehicle_id)
            
        Else
        
            Call EvaluateRouteSingleTrip(solution, vehicle_type_index, vehicle_id)
        
        End If
        
        If vertex_list.vertices(vertex_to_be_removed).mandatory = 1 Then
            .net_profit = .net_profit - instance.penalty
        End If
        
    End With
End Sub
Private Sub EvaluateRouteSingleTrip(solution As solution_data, vehicle_type_index As Long, vehicle_id As Long)
    
    Dim delivery_amount As Double
    Dim pickup_amount As Double
    Dim distance_traversed As Double
    Dim duration_multiplier As Double
    Dim modified_arc_duration As Double
    Dim time_accumulated As Long
    Dim driving_time_total As Long
    Dim working_time_total As Long
    
    Dim feasibility_flag As Boolean
    
    Dim net_profit_this_route As Double
    Dim total_distance_this_route As Double
    Dim origin_base_id As Long
    Dim return_base_id As Long
    Dim this_vertex As Long
    Dim previous_vertex As Long
    
    Dim k As Long
    
    delivery_amount = 0
    pickup_amount = 0
    distance_traversed = 0
    driving_time_total = 0
    working_time_total = 0
    feasibility_flag = True
    
    time_accumulated = vehicle_type_list.vehicle_types(vehicle_type_index).work_start_time
    duration_multiplier = vehicle_type_list.vehicle_types(vehicle_type_index).duration_multiplier
            
    With solution
    
        .net_profit = .net_profit - .net_profit_per_route(vehicle_type_index, vehicle_id)
        net_profit_this_route = 0
        
        .total_distance = .total_distance - .total_distance_per_route(vehicle_type_index, vehicle_id)
        total_distance_this_route = 0
        
        If .route_vertex_cnt(vehicle_type_index, vehicle_id) > 0 Then
        
            net_profit_this_route = -vehicle_type_list.vehicle_types(vehicle_type_index).fixed_cost_per_trip
            origin_base_id = vehicle_type_list.vehicle_types(vehicle_type_index).origin_base_id
            return_base_id = vehicle_type_list.vehicle_types(vehicle_type_index).return_base_id
            
            For k = 1 To .route_vertex_cnt(vehicle_type_index, vehicle_id)

                this_vertex = .route_vertices(vehicle_type_index, vehicle_id, k)
                
                delivery_amount = delivery_amount + vertex_list.vertices(this_vertex).delivery_amount

            Next k
            
            If delivery_amount > vehicle_type_list.vehicle_types(vehicle_type_index).capacity Then
                feasibility_flag = False
                .feasible = False
                net_profit_this_route = net_profit_this_route - instance.penalty * (((delivery_amount / (vehicle_type_list.vehicle_types(vehicle_type_index).capacity + epsilon)) ^ 2) - 1)
            End If
                
            For k = 1 To .route_vertex_cnt(vehicle_type_index, vehicle_id)
            
                this_vertex = .route_vertices(vehicle_type_index, vehicle_id, k)
                
                pickup_amount = pickup_amount + vertex_list.vertices(this_vertex).pickup_amount
                delivery_amount = delivery_amount - vertex_list.vertices(this_vertex).delivery_amount
                
                If pickup_amount + delivery_amount > vehicle_type_list.vehicle_types(vehicle_type_index).capacity Then
                    feasibility_flag = False
                    .feasible = False
                    net_profit_this_route = net_profit_this_route - instance.penalty * ((((pickup_amount + delivery_amount) / (vehicle_type_list.vehicle_types(vehicle_type_index).capacity + epsilon)) ^ 2) - 1)
                End If
            
                If pickup_amount < 0 Then
                    feasibility_flag = False
                    .feasible = False
                    net_profit_this_route = net_profit_this_route - instance.penalty * (((Abs(pickup_amount) / (vehicle_type_list.vehicle_types(vehicle_type_index).capacity + epsilon)) ^ 2) + 1)
                End If
                
                net_profit_this_route = net_profit_this_route + vertex_list.vertices(this_vertex).profit
    
                If k = 1 Then
                    
                    With arc_list
                    
                        modified_arc_duration = .duration(origin_base_id, this_vertex) * duration_multiplier
                        
                        time_accumulated = time_accumulated + modified_arc_duration
                        driving_time_total = driving_time_total + modified_arc_duration
                        working_time_total = working_time_total + modified_arc_duration
        
                        distance_traversed = distance_traversed + .distance(origin_base_id, this_vertex)
                        total_distance_this_route = total_distance_this_route + .distance(origin_base_id, this_vertex)
                        
                    End With
                    
                Else
                    previous_vertex = .route_vertices(vehicle_type_index, vehicle_id, k - 1)
                    
                    With arc_list
                        
                        modified_arc_duration = .duration(previous_vertex, this_vertex) * duration_multiplier
                        
                        time_accumulated = time_accumulated + modified_arc_duration
                        driving_time_total = driving_time_total + modified_arc_duration
                        working_time_total = working_time_total + modified_arc_duration
        
                        distance_traversed = distance_traversed + .distance(previous_vertex, this_vertex)
                        total_distance_this_route = total_distance_this_route + .distance(previous_vertex, this_vertex)
                        
                    End With
                    
                    If instance.backhauls = True And Abs(vertex_list.vertices(previous_vertex).pickup_amount) > 0 And vertex_list.vertices(this_vertex).delivery_amount > 0 Then
                        feasibility_flag = False
                        .feasible = False
                        net_profit_this_route = net_profit_this_route - instance.penalty
                    End If
                    
                End If
                
                If time_accumulated < vertex_list.vertices(this_vertex).time_window_start Then
                    
                    working_time_total = working_time_total + vertex_list.vertices(this_vertex).time_window_start - time_accumulated
                    time_accumulated = vertex_list.vertices(this_vertex).time_window_start
                    
                End If
                
                time_accumulated = time_accumulated + vertex_list.vertices(this_vertex).service_time
                working_time_total = working_time_total + vertex_list.vertices(this_vertex).service_time
                
                If time_accumulated > vertex_list.vertices(this_vertex).time_window_end Then
                    If instance.soft_time_windows = False Then
                        feasibility_flag = False
                        .feasible = False
                    End If
                    net_profit_this_route = net_profit_this_route - instance.penalty * (((time_accumulated / vertex_list.vertices(this_vertex).time_window_end) ^ 2) - 1)
                End If
    
            Next k
    
            If instance.open_vrp = False Then
                
                this_vertex = .route_vertices(vehicle_type_index, vehicle_id, .route_vertex_cnt(vehicle_type_index, vehicle_id))
                
                modified_arc_duration = arc_list.duration(this_vertex, return_base_id) * duration_multiplier
                
                time_accumulated = time_accumulated + modified_arc_duration
                driving_time_total = driving_time_total + modified_arc_duration
                working_time_total = working_time_total + modified_arc_duration
    
                distance_traversed = distance_traversed + arc_list.distance(this_vertex, return_base_id)
                total_distance_this_route = total_distance_this_route + arc_list.distance(this_vertex, return_base_id)
                
                If time_accumulated > vertex_list.vertices(return_base_id).time_window_end Then
                    If instance.soft_time_windows = False Then
                        feasibility_flag = False
                        .feasible = False
                    End If
                    net_profit_this_route = net_profit_this_route - instance.penalty * (((time_accumulated / vertex_list.vertices(return_base_id).time_window_end) ^ 2) - 1)
                End If
    
            End If
            
            If distance_traversed > vehicle_type_list.vehicle_types(vehicle_type_index).distance_limit Then
                feasibility_flag = False
                .feasible = False
                net_profit_this_route = net_profit_this_route - instance.penalty * (((distance_traversed / vehicle_type_list.vehicle_types(vehicle_type_index).distance_limit) ^ 2) - 1)
            End If
            
            If driving_time_total > vehicle_type_list.vehicle_types(vehicle_type_index).driving_time_limit Then
                feasibility_flag = False
                .feasible = False
                net_profit_this_route = net_profit_this_route - instance.penalty * (((driving_time_total / vehicle_type_list.vehicle_types(vehicle_type_index).driving_time_limit) ^ 2) - 1)
            End If
    
            If working_time_total > vehicle_type_list.vehicle_types(vehicle_type_index).working_time_limit Then
                feasibility_flag = False
                .feasible = False
                net_profit_this_route = net_profit_this_route - instance.penalty * (((working_time_total / vehicle_type_list.vehicle_types(vehicle_type_index).working_time_limit) ^ 2) - 1)
            End If

        End If
        
        .total_distance_per_route(vehicle_type_index, vehicle_id) = total_distance_this_route
        .total_distance = .total_distance + total_distance_this_route
        
        net_profit_this_route = net_profit_this_route - total_distance_this_route * vehicle_type_list.vehicle_types(vehicle_type_index).cost_per_unit_distance
        If feasibility_flag = False Then
            net_profit_this_route = net_profit_this_route - instance.penalty
        End If
        
        .net_profit_per_route(vehicle_type_index, vehicle_id) = net_profit_this_route
        .net_profit = .net_profit + net_profit_this_route
        
        'MsgBox vehicle_type_index & " " & vehicle_id & " " &
    End With
    
End Sub

Private Sub EvaluateRouteMultiTrip(solution As solution_data, vehicle_type_index As Long, vehicle_id As Long)
    
    Dim vehicle_capacity As Double
    
    Dim min_residual_capacity As Double
    Dim total_pickup_load As Double
    
    Dim distance_traversed As Double
    Dim duration_multiplier As Double
    Dim modified_arc_duration As Double
    
    Dim time_accumulated As Long
    Dim driving_time_total As Long
    Dim working_time_total As Long
    
    Dim feasibility_flag As Boolean
    
    Dim net_profit_this_route As Double
    Dim total_distance_this_route As Double
    Dim origin_base_id As Long
    Dim return_base_id As Long
    Dim this_vertex As Long
    Dim previous_vertex As Long
    
    Dim stage As Long
    Dim k As Long
    
    Dim start_vertex_index As Long
    Dim end_vertex_index As Long

    feasibility_flag = True
    
    origin_base_id = vehicle_type_list.vehicle_types(vehicle_type_index).origin_base_id
    return_base_id = origin_base_id
            
    vehicle_capacity = vehicle_type_list.vehicle_types(vehicle_type_index).capacity
    
    With solution
    
        .net_profit = .net_profit - .net_profit_per_route(vehicle_type_index, vehicle_id)
        net_profit_this_route = 0
        
        .total_distance = .total_distance - .total_distance_per_route(vehicle_type_index, vehicle_id)
        total_distance_this_route = 0
        
        If .route_vertex_cnt(vehicle_type_index, vehicle_id) > 0 Then
            
            ' DP Here
            ' backward recursion
            
            For stage = .route_vertex_cnt(vehicle_type_index, vehicle_id) To 1 Step -1 ' segment starting with visiting "stage"
            
                DP_list.control(stage) = stage
                DP_list.value(stage) = instance.penalty
                
                total_pickup_load = 0
                min_residual_capacity = vehicle_capacity
                
                distance_traversed = 0
                
                For k = stage To .route_vertex_cnt(vehicle_type_index, vehicle_id) ' possible indices to return to depot
                
                    this_vertex = .route_vertices(vehicle_type_index, vehicle_id, k)
                    
                    If k = stage Then
                        previous_vertex = origin_base_id
                    Else
                        previous_vertex = .route_vertices(vehicle_type_index, vehicle_id, k - 1)
                    End If
                
                    'load
                    
                    min_residual_capacity = min_residual_capacity - vertex_list.vertices(this_vertex).delivery_amount
                    
                    total_pickup_load = total_pickup_load + vertex_list.vertices(this_vertex).pickup_amount
                    
                    If total_pickup_load < -epsilon Then
                        
                        GoTo NextStage
                        
                    End If
                    
                    If min_residual_capacity > vehicle_capacity - total_pickup_load Then
                        min_residual_capacity = vehicle_capacity - total_pickup_load
                    End If
                    
                    If min_residual_capacity < -epsilon Then
                        
                        GoTo NextStage
                        
                    End If
                    
                    'distance
                    
                    distance_traversed = distance_traversed + arc_list.distance(previous_vertex, this_vertex)
                    
                    'value and control
                    
                    If k = .route_vertex_cnt(vehicle_type_index, vehicle_id) Then 'boundary condition
                        DP_list.control(stage) = k
                        DP_list.value(stage) = distance_traversed + arc_list.distance(this_vertex, return_base_id)
                    ElseIf k = stage Then 'incumbent solution for the stage
                        DP_list.control(stage) = k
                        DP_list.value(stage) = distance_traversed + arc_list.distance(this_vertex, return_base_id) + DP_list.value(k + 1)
                    Else
                        If DP_list.value(stage) > distance_traversed + arc_list.distance(this_vertex, return_base_id) + DP_list.value(k + 1) Then 'update the incumbent
                            DP_list.control(stage) = k
                            DP_list.value(stage) = distance_traversed + arc_list.distance(this_vertex, return_base_id) + DP_list.value(k + 1)
                        End If
                    End If
                Next k

NextStage:
            Next stage
            
            ' now evaluate the route based on the optimal control

            distance_traversed = 0
            driving_time_total = 0
            working_time_total = 0
            feasibility_flag = True

            time_accumulated = vehicle_type_list.vehicle_types(vehicle_type_index).work_start_time
            duration_multiplier = vehicle_type_list.vehicle_types(vehicle_type_index).duration_multiplier

            net_profit_this_route = -vehicle_type_list.vehicle_types(vehicle_type_index).fixed_cost_per_trip

            end_vertex_index = 0

            Do

                start_vertex_index = end_vertex_index + 1
                end_vertex_index = DP_list.control(start_vertex_index)

                total_pickup_load = 0
                min_residual_capacity = vehicle_capacity

                For k = start_vertex_index To end_vertex_index

                    this_vertex = .route_vertices(vehicle_type_index, vehicle_id, k)

                    min_residual_capacity = min_residual_capacity - vertex_list.vertices(this_vertex).delivery_amount
                    total_pickup_load = total_pickup_load + vertex_list.vertices(this_vertex).pickup_amount

                    If total_pickup_load < -epsilon Then
                        feasibility_flag = False
                        .feasible = False
                        net_profit_this_route = net_profit_this_route - instance.penalty * ((((-total_pickup_load) / (vehicle_capacity + epsilon) + 1) ^ 2) - 1)
                    End If

                    If min_residual_capacity > vehicle_capacity - total_pickup_load Then
                        min_residual_capacity = vehicle_capacity - total_pickup_load
                    End If

                    If min_residual_capacity < -epsilon Then
                        feasibility_flag = False
                        .feasible = False
                        net_profit_this_route = net_profit_this_route - instance.penalty * ((((-min_residual_capacity) / (vehicle_capacity + epsilon) + 1) ^ 2) - 1)
                    End If

                    net_profit_this_route = net_profit_this_route + vertex_list.vertices(this_vertex).profit

                    If k = start_vertex_index Then

                        With arc_list

                            modified_arc_duration = .duration(origin_base_id, this_vertex) * duration_multiplier

                            time_accumulated = time_accumulated + modified_arc_duration
                            driving_time_total = driving_time_total + modified_arc_duration
                            working_time_total = working_time_total + modified_arc_duration

                            distance_traversed = distance_traversed + .distance(origin_base_id, this_vertex)
                            total_distance_this_route = total_distance_this_route + .distance(origin_base_id, this_vertex)

                        End With

                    Else
                        previous_vertex = .route_vertices(vehicle_type_index, vehicle_id, k - 1)

                        With arc_list

                            modified_arc_duration = .duration(previous_vertex, this_vertex) * duration_multiplier

                            time_accumulated = time_accumulated + modified_arc_duration
                            driving_time_total = driving_time_total + modified_arc_duration
                            working_time_total = working_time_total + modified_arc_duration

                            distance_traversed = distance_traversed + .distance(previous_vertex, this_vertex)
                            total_distance_this_route = total_distance_this_route + .distance(previous_vertex, this_vertex)

                        End With

                        If instance.backhauls = True And Abs(vertex_list.vertices(previous_vertex).pickup_amount) > 0 And vertex_list.vertices(this_vertex).delivery_amount > 0 Then
                            feasibility_flag = False
                            .feasible = False
                            net_profit_this_route = net_profit_this_route - instance.penalty
                        End If

                    End If

                    If time_accumulated < vertex_list.vertices(this_vertex).time_window_start Then

                        working_time_total = working_time_total + vertex_list.vertices(this_vertex).time_window_start - time_accumulated
                        time_accumulated = vertex_list.vertices(this_vertex).time_window_start

                    End If

                    time_accumulated = time_accumulated + vertex_list.vertices(this_vertex).service_time
                    working_time_total = working_time_total + vertex_list.vertices(this_vertex).service_time

                    If time_accumulated > vertex_list.vertices(this_vertex).time_window_end Then
                        If instance.soft_time_windows = False Then
                            feasibility_flag = False
                            .feasible = False
                        End If
                        net_profit_this_route = net_profit_this_route - instance.penalty * (((time_accumulated / vertex_list.vertices(this_vertex).time_window_end) ^ 2) - 1)
                    End If

                Next k

                modified_arc_duration = arc_list.duration(this_vertex, return_base_id) * duration_multiplier

                time_accumulated = time_accumulated + modified_arc_duration
                driving_time_total = driving_time_total + modified_arc_duration
                working_time_total = working_time_total + modified_arc_duration

                distance_traversed = distance_traversed + arc_list.distance(this_vertex, return_base_id)
                total_distance_this_route = total_distance_this_route + arc_list.distance(this_vertex, return_base_id)
                
                If .route_vertex_cnt(vehicle_type_index, vehicle_id) > end_vertex_index Then
                    time_accumulated = time_accumulated + vertex_list.vertices(return_base_id).service_time
                    working_time_total = working_time_total + vertex_list.vertices(return_base_id).service_time
                End If

            Loop While end_vertex_index <> .route_vertex_cnt(vehicle_type_index, vehicle_id)

            If time_accumulated > vertex_list.vertices(return_base_id).time_window_end Then
                If instance.soft_time_windows = False Then
                    feasibility_flag = False
                    .feasible = False
                End If
                net_profit_this_route = net_profit_this_route - instance.penalty * (((time_accumulated / vertex_list.vertices(return_base_id).time_window_end) ^ 2) - 1)
            End If
                
            If distance_traversed > vehicle_type_list.vehicle_types(vehicle_type_index).distance_limit Then
                feasibility_flag = False
                .feasible = False
                net_profit_this_route = net_profit_this_route - instance.penalty * (((distance_traversed / vehicle_type_list.vehicle_types(vehicle_type_index).distance_limit) ^ 2) - 1)
            End If

            If driving_time_total > vehicle_type_list.vehicle_types(vehicle_type_index).driving_time_limit Then
                feasibility_flag = False
                .feasible = False
                net_profit_this_route = net_profit_this_route - instance.penalty * (((driving_time_total / vehicle_type_list.vehicle_types(vehicle_type_index).driving_time_limit) ^ 2) - 1)
            End If

            If working_time_total > vehicle_type_list.vehicle_types(vehicle_type_index).working_time_limit Then
                feasibility_flag = False
                .feasible = False
                net_profit_this_route = net_profit_this_route - instance.penalty * (((working_time_total / vehicle_type_list.vehicle_types(vehicle_type_index).working_time_limit) ^ 2) - 1)
            End If

        End If

        .total_distance_per_route(vehicle_type_index, vehicle_id) = total_distance_this_route
        .total_distance = .total_distance + total_distance_this_route

        net_profit_this_route = net_profit_this_route - total_distance_this_route * vehicle_type_list.vehicle_types(vehicle_type_index).cost_per_unit_distance
        If feasibility_flag = False Then
            net_profit_this_route = net_profit_this_route - instance.penalty
        End If

        .net_profit_per_route(vehicle_type_index, vehicle_id) = net_profit_this_route
        .net_profit = .net_profit + net_profit_this_route

        'MsgBox vehicle_type_index & " " & vehicle_id & " " &
    End With
    
End Sub

Private Sub EvaluateSolution(solution As solution_data)
    
    Dim i As Long
    Dim j As Long
        
    With solution
        .net_profit = 0

        For i = 1 To vehicle_type_list.num_vehicle_types
            For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                .net_profit_per_route(i, j) = 0
            Next j
        Next i
        
        .feasible = True
        .covers_mandatory_vertices = True
    End With
    
    For i = 1 To vehicle_type_list.num_vehicle_types
        For j = 1 To vehicle_type_list.vehicle_types(i).number_available
            If instance.multi_trip = True Then
                Call EvaluateRouteMultiTrip(solution, i, j)
            Else
                Call EvaluateRouteSingleTrip(solution, i, j)
            End If
        Next j
    Next i
        
    With solution
    
        'check mandatory vertices and visits
        
        For i = vertex_list.num_depots + 1 To vertex_list.num_locations
            
            If (vertex_list.vertices(i).mandatory = 1) And (.vertices_visited(i) = 0) Then
                .feasible = False
                .covers_mandatory_vertices = False
                .net_profit = .net_profit - instance.penalty
            End If
            
            If (vertex_list.vertices(i).mandatory = -1) And (.vertices_visited(i) = 1) Then
                .feasible = False
                .net_profit = .net_profit - instance.penalty
            End If
            
            If .vertices_visited(i) > 1 Then
                .feasible = False
                .net_profit = .net_profit - instance.penalty
            End If
        Next i

    End With
    
End Sub
Private Sub DeterminePenalty()
    
    Dim distance_total As Double
    Dim cost_total As Double
    
    Dim i As Long
    Dim j As Long
    
    distance_total = 0
    For i = 1 To vertex_list.num_locations
        For j = 1 To vertex_list.num_locations
        
            distance_total = distance_total + arc_list.distance(i, j)
        
        Next j
    Next i
    
    With vehicle_type_list
    
        cost_total = 0
        For i = 1 To .num_vehicle_types
            For j = 1 To .vehicle_types(i).number_available
                cost_total = cost_total + .vehicle_types(i).cost_per_unit_distance
            Next j
        Next i
        
        If cost_total < 1 Then
            cost_total = 1
        End If
        
        instance.penalty = distance_total * cost_total
        
        For i = 1 To .num_vehicle_types
            For j = 1 To .vehicle_types(i).number_available
                instance.penalty = instance.penalty + .vehicle_types(i).fixed_cost_per_trip
            Next j
        Next i
    
    End With
    
    instance.penalty = Application.WorksheetFunction.Ceiling(instance.penalty, 1)
    
End Sub
Private Sub WriteSolution(solution As solution_data)
   
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    ThisWorkbook.Worksheets("4.Solution").Activate
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim start_index As Long
    Dim end_index As Long
    Dim row_index As Long
    
    If solution.feasible = False Then
        Cells(2, 1) = "Warning: Last solution returned by the solver does not satisfy all constraints."
        Range(Cells(2, 1), Cells(2, 16)).Interior.ColorIndex = 45
    Else
        Cells(2, 1) = vbNullString
        Range(Cells(2, 1), Cells(2, 16)).Interior.Pattern = xlNone
        Range(Cells(2, 1), Cells(2, 16)).Interior.TintAndShade = 0
        Range(Cells(2, 1), Cells(2, 16)).Interior.PatternTintAndShade = 0
    End If
    
    Dim offset As Long
    
    offset = 0
      
    For i = 1 To vehicle_type_list.num_vehicle_types
        
        For j = 1 To vehicle_type_list.vehicle_types(i).number_available
            
            If instance.multi_trip = True Then
            
                Range(Cells(6, 2 + offset), Cells(5 + 2 * vertex_list.num_customers, 2 + offset)).value = vbNullString
                
                If solution.route_vertex_cnt(i, j) > 0 Then
                
                    Call EvaluateRouteMultiTrip(solution, i, j)
                    
                    end_index = 0
                    row_index = 6
                    
                    Do
                    
                        start_index = end_index + 1
                        end_index = DP_list.control(start_index)
                        
                        For k = start_index To end_index
                            
                            ThisWorkbook.Worksheets("4.Solution").Cells(row_index, 2 + offset).value = ThisWorkbook.Worksheets("1.Locations").Cells(solution.route_vertices(i, j, k) + 1, 2)
                            row_index = row_index + 1
                        
                        Next k
                        
                        ThisWorkbook.Worksheets("4.Solution").Cells(row_index, 2 + offset).value = ThisWorkbook.Worksheets("1.Locations").Cells(1 + vehicle_type_list.vehicle_types(i).return_base_id, 2)
                        row_index = row_index + 1
                        
                    Loop While end_index <> solution.route_vertex_cnt(i, j)
                    
                End If
            Else
                Range(Cells(6, 2 + offset), Cells(5 + vertex_list.num_customers, 2 + offset)).value = vbNullString
                
                If solution.route_vertex_cnt(i, j) > 0 Then
                    For k = 1 To solution.route_vertex_cnt(i, j)
                        
                        ThisWorkbook.Worksheets("4.Solution").Cells(5 + k, 2 + offset).value = ThisWorkbook.Worksheets("1.Locations").Cells(solution.route_vertices(i, j, k) + 1, 2)
                    
                    Next k
                    
                    If instance.open_vrp = False Then
                        ThisWorkbook.Worksheets("4.Solution").Cells(6 + solution.route_vertex_cnt(i, j), 2 + offset).value = ThisWorkbook.Worksheets("1.Locations").Cells(1 + vehicle_type_list.vehicle_types(i).return_base_id, 2)
                    End If
                End If
            End If
            
            Columns(2 + offset).AutoFit
            
            offset = offset + offset_constant
        
        Next j
        
    Next i
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    ThisWorkbook.Worksheets("4.Solution").Calculate
    
End Sub

Private Sub ReadSolution(solution As solution_data)
       
    ThisWorkbook.Worksheets("4.Solution").Activate
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim vertex_to_be_added As Long
    
    Dim stop_count_claimed As Long
    Dim stop_count_realized As Long
    
    Dim offset As Long
    
    offset = 0
    
    With solution
    
        For i = 1 To vehicle_type_list.num_vehicle_types
        
            For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                            
                stop_count_claimed = Cells(3, 7 + offset).value
                stop_count_realized = 0
                                
                For k = 1 To stop_count_claimed
                    
                    If (Cells(5 + k, 2 + offset).value <> vbNullString) And (Cells(5 + k, 2 + offset).value <> Cells(5, 2 + offset).value) Then
                        vertex_to_be_added = Cells(5 + k, 3 + offset).value + vertex_list.num_depots
                        stop_count_realized = stop_count_realized + 1
                        Call AddVertex(solution, vertex_to_be_added, i, j, stop_count_realized)
                        'MsgBox "Added vertex " & vertex_to_be_added
                    End If
                
                Next k
                
                offset = offset + offset_constant
            
            Next j
        Next i
        
    End With
    
    Cells(1, 1).Select
    
End Sub
Sub VRP_Solver()
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = False
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Locations") And CheckWorksheetExistence("2.Distances") And CheckWorksheetExistence("3.Vehicles") And CheckWorksheetExistence("4.Solution")
    If WorksheetExists = False Then
        reply = MsgBox("Worksheets 1.Locations, 2.Distances, 3.Vehicles, and 4.Solution must exist for VRP Spreadsheet Solver to function.", vbOKOnly, "VRP Spreadsheet Solver")
        Application.ScreenUpdating = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
    Else
        reply = MsgBox("This will take " & ThisWorkbook.Worksheets("VRP Solver Console").Cells(23, 3).value & " seconds. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
        If reply = vbNo Then
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            Exit Sub
        End If
    End If
    
    Application.EnableCancelKey = xlErrorHandler
    On Error GoTo VRP_Solver_Finish
    
    'Allocate memory and get the data
    
    Call GetInstanceData
    Call GetVertexData
    Call GetArcData
    Call GetVehicleTypeData
    Call GetSolverOptions
    
    Call DeterminePenalty
    
    Dim candidate_list() As candidate_data
    ReDim candidate_list(1 To vertex_list.num_customers)
    Dim swap_candidate As candidate_data
    Dim candidate_count As Long
    Dim final_candidate_count As Long
    
    Dim incumbent As solution_data
    Call InitializeSolution(incumbent)
    Call EvaluateSolution(incumbent)
        
    Dim best_known As solution_data
    Call InitializeSolution(best_known)
    best_known = incumbent
    
    Dim iteration As Long
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    
    Dim vertex As Long
    Dim vertex_to_swap As Long
    
    Dim vertex_to_be_added As Long
    Dim vehicle_type_to_add_to As Long
    Dim vehicle_id_to_add_to As Long
    Dim position_to_add_to As Long
                    
    Dim max_net_profit As Double
    Dim min_total_distance As Double
    Dim max_mandatory As Long
    Dim max_secondary_profit As Double
    
    Dim cluster_core As Long
    Dim distance_to_farthest_customer As Double
    Dim cluster_diameter As Double
    Dim capacity_used As Double
    
    Dim removal_rate As Double
    Dim insertion_heuristic As Long
    
    Dim start_time As Date
    Dim end_time As Date
    Dim time_elapsed As Double
    
    'infeasibility check
    
    Dim infeasibility_count As Long
    Dim infeasibility_string As String
    
    Call FeasibilityCheckData(infeasibility_count, infeasibility_string)

    If infeasibility_count > 0 Then
        reply = MsgBox("Reasons for infeasibility detected." & Chr(13) & infeasibility_string & "Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
        If reply = vbNo Then
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            Exit Sub
        End If
    End If
    
    'read best known solution
    
    If solver_options.warm_start = True Then
        Call ReadSolution(incumbent)
        Call EvaluateSolution(incumbent)
        
        If incumbent.feasible = True Then
            best_known = incumbent
        End If
    End If
    
    start_time = Now
    end_time = Now
        
    'constructive phase
    
    If solver_options.status_updates = True Then
        Application.DisplayStatusBar = True
        Application.ScreenUpdating = True
        Application.StatusBar = "Constructive phase..."
        Application.ScreenUpdating = False
    End If
                
    Do
        DoEvents

        vertex_to_be_added = -1
        max_net_profit = incumbent.net_profit - instance.penalty
        min_total_distance = incumbent.total_distance
        max_mandatory = 0

        For vertex = vertex_list.num_depots + 1 To vertex_list.num_locations

            If (vertex_list.vertices(vertex).mandatory >= 0) And (incumbent.vertices_visited(vertex) = 0) Then

                For i = 1 To vehicle_type_list.num_vehicle_types
                    For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                        If j = 1 Then

                            For k = 1 To incumbent.route_vertex_cnt(i, j) + 1

                                Call AddVertex(incumbent, vertex, i, j, k)

                                If (vertex_list.vertices(vertex).mandatory > max_mandatory) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit + epsilon)) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit - epsilon) And (incumbent.total_distance < min_total_distance - epsilon)) Then
                                    max_net_profit = incumbent.net_profit
                                    min_total_distance = incumbent.total_distance
                                    max_mandatory = vertex_list.vertices(vertex).mandatory
                                    vertex_to_be_added = vertex
                                    vehicle_type_to_add_to = i
                                    vehicle_id_to_add_to = j
                                    position_to_add_to = k
                                End If

                                Call RemoveVertex(incumbent, i, j, k)

                            Next k

                        ElseIf incumbent.route_vertex_cnt(i, j - 1) > 0 Then

                            For k = 1 To incumbent.route_vertex_cnt(i, j) + 1

                                Call AddVertex(incumbent, vertex, i, j, k)

                                If (vertex_list.vertices(vertex).mandatory > max_mandatory) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit + epsilon)) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit - epsilon) And (incumbent.total_distance < min_total_distance - epsilon)) Then

                                    max_net_profit = incumbent.net_profit
                                    min_total_distance = incumbent.total_distance
                                    max_mandatory = vertex_list.vertices(vertex).mandatory
                                    vertex_to_be_added = vertex
                                    vehicle_type_to_add_to = i
                                    vehicle_id_to_add_to = j
                                    position_to_add_to = k

                                End If

                                Call RemoveVertex(incumbent, i, j, k)

                            Next k

                        End If
                    Next j
                Next i

            End If

        Next vertex

        If vertex_to_be_added <> -1 Then
            Call AddVertex(incumbent, vertex_to_be_added, vehicle_type_to_add_to, vehicle_id_to_add_to, position_to_add_to)
            'end_time = Now
            'MsgBox "Added vertex: " & vertex_to_be_added & " obj: " & incumbent.net_profit
        End If

        Call EvaluateSolution(incumbent)

        If ((incumbent.feasible = True) And (best_known.feasible = False)) Or _
           ((incumbent.covers_mandatory_vertices = True) And (best_known.covers_mandatory_vertices = False)) Or _
           ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit + epsilon)) Then

            best_known = incumbent
        End If

    Loop While vertex_to_be_added <> -1

    If Abs(best_known.net_profit - incumbent.net_profit) > epsilon Then
        Call ImproveSolution(best_known)
        Call ImproveSolution(incumbent)
    Else
        Call ImproveSolution(best_known)
    End If

'    Call EvaluateSolution(incumbent)
'    Call EvaluateSolution(best_known)
    
    If ((incumbent.feasible = True) And (best_known.feasible = False)) Or _
       ((incumbent.covers_mandatory_vertices = True) And (best_known.covers_mandatory_vertices = False)) Or _
       ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit + epsilon)) Then

        best_known = incumbent
    End If

    '2nd constructive heuristic
    
    Call InitializeSolution(incumbent)
    
    For i = 1 To vehicle_type_list.num_vehicle_types
        For j = 1 To vehicle_type_list.vehicle_types(i).number_available
            
            cluster_core = -1
            capacity_used = 0
                
            distance_to_farthest_customer = 0
            For k = vertex_list.num_depots + 1 To vertex_list.num_locations
                If (arc_list.distance(vehicle_type_list.vehicle_types(i).origin_base_id, k) + arc_list.distance(k, vehicle_type_list.vehicle_types(i).return_base_id) > cluster_diameter) And (vertex_list.vertices(k).mandatory >= 0) And (incumbent.vertices_visited(k) = 0) Then
                    distance_to_farthest_customer = arc_list.distance(vehicle_type_list.vehicle_types(i).origin_base_id, k) + arc_list.distance(k, vehicle_type_list.vehicle_types(i).return_base_id)
                    cluster_core = k
                End If
            Next k
            
            If cluster_core <> -1 Then
                Call AddVertex(incumbent, cluster_core, i, j, 1)
                capacity_used = Abs(vertex_list.vertices(cluster_core).pickup_amount + vertex_list.vertices(cluster_core).delivery_amount)
                
                Do
                
                    vertex_to_be_added = -1
                    cluster_diameter = (arc_list.distance(vehicle_type_list.vehicle_types(i).origin_base_id, cluster_core) + arc_list.distance(cluster_core, vehicle_type_list.vehicle_types(i).return_base_id)) / 2
                    For k = vertex_list.num_depots + 1 To vertex_list.num_locations
                        If (arc_list.distance(cluster_core, k) + arc_list.distance(k, cluster_core) < cluster_diameter) And (capacity_used + vertex_list.vertices(k).pickup_amount <= vehicle_type_list.vehicle_types(i).capacity) And (vertex_list.vertices(k).mandatory >= 0) And (incumbent.vertices_visited(k) = 0) Then
                            cluster_diameter = arc_list.distance(cluster_core, k) + arc_list.distance(k, cluster_core)
                            vertex_to_be_added = k
                        End If
                    Next k
                    
                    If vertex_to_be_added <> -1 Then
                        Call AddVertex(incumbent, vertex_to_be_added, i, j, incumbent.route_vertex_cnt(i, j) + 1)
                        capacity_used = capacity_used + vertex_list.vertices(vertex_to_be_added).pickup_amount
                    End If
                
                Loop While vertex_to_be_added <> -1

            End If
            
            Call ImproveSolution(incumbent)
            
        Next j
    Next i
    
    Do
        DoEvents

        vertex_to_be_added = -1
        max_net_profit = incumbent.net_profit - instance.penalty
        min_total_distance = incumbent.total_distance
        max_mandatory = 0

        For vertex = vertex_list.num_depots + 1 To vertex_list.num_locations

            If (vertex_list.vertices(vertex).mandatory >= 0) And (incumbent.vertices_visited(vertex) = 0) Then

                For i = 1 To vehicle_type_list.num_vehicle_types
                    For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                        If j = 1 Then

                            For k = 1 To incumbent.route_vertex_cnt(i, j) + 1

                                Call AddVertex(incumbent, vertex, i, j, k)

                                If (vertex_list.vertices(vertex).mandatory > max_mandatory) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit + epsilon)) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit - epsilon) And (incumbent.total_distance < min_total_distance - epsilon)) Then
                                    max_net_profit = incumbent.net_profit
                                    min_total_distance = incumbent.total_distance
                                    max_mandatory = vertex_list.vertices(vertex).mandatory
                                    vertex_to_be_added = vertex
                                    vehicle_type_to_add_to = i
                                    vehicle_id_to_add_to = j
                                    position_to_add_to = k
                                End If

                                Call RemoveVertex(incumbent, i, j, k)

                            Next k

                        ElseIf incumbent.route_vertex_cnt(i, j - 1) > 0 Then

                            For k = 1 To incumbent.route_vertex_cnt(i, j) + 1

                                Call AddVertex(incumbent, vertex, i, j, k)

                                If (vertex_list.vertices(vertex).mandatory > max_mandatory) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit + epsilon)) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit - epsilon) And (incumbent.total_distance < min_total_distance - epsilon)) Then

                                    max_net_profit = incumbent.net_profit
                                    min_total_distance = incumbent.total_distance
                                    max_mandatory = vertex_list.vertices(vertex).mandatory
                                    vertex_to_be_added = vertex
                                    vehicle_type_to_add_to = i
                                    vehicle_id_to_add_to = j
                                    position_to_add_to = k

                                End If

                                Call RemoveVertex(incumbent, i, j, k)

                            Next k

                        End If
                    Next j
                Next i

            End If

        Next vertex

        If vertex_to_be_added <> -1 Then
            Call AddVertex(incumbent, vertex_to_be_added, vehicle_type_to_add_to, vehicle_id_to_add_to, position_to_add_to)
            'end_time = Now
            'MsgBox "Added vertex: " & vertex_to_be_added & " obj: " & incumbent.net_profit
        End If

        Call EvaluateSolution(incumbent)

        If ((incumbent.feasible = True) And (best_known.feasible = False)) Or _
           ((incumbent.covers_mandatory_vertices = True) And (best_known.covers_mandatory_vertices = False)) Or _
           ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit + epsilon)) Then

            best_known = incumbent
        End If

    Loop While vertex_to_be_added <> -1
                            
    Call ImproveSolution(incumbent)

    If ((incumbent.feasible = True) And (best_known.feasible = False)) Or _
       ((incumbent.covers_mandatory_vertices = True) And (best_known.covers_mandatory_vertices = False)) Or _
       ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit + epsilon)) Then

        best_known = incumbent
    Else
        incumbent = best_known
    End If
    
    'improvement phase

    Application.ScreenUpdating = True
    Application.StatusBar = "LNS algorithm running..."
    Application.ScreenUpdating = False
    
    iteration = 0

    Do
        If solver_options.status_updates = True Then
            Application.ScreenUpdating = True
            Application.StatusBar = "Starting LNS iteration " & iteration & ". Best total net profit so far: " & best_known.net_profit
            Application.ScreenUpdating = False
        End If
        
        DoEvents

        removal_rate = solver_options.LNS_minimum_removal_rate + ((solver_options.LNS_maximum_removal_rate - solver_options.LNS_minimum_removal_rate) * Rnd())
        'removal_rate = solver_options.LNS_minimum_removal_rate + (((time_elapsed) / solver_options.CPU_time_limit) * (solver_options.LNS_maximum_removal_rate - solver_options.LNS_minimum_removal_rate))

        'randomly remove vertices

        For i = 1 To vehicle_type_list.num_vehicle_types
            For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                For k = 1 To incumbent.route_vertex_cnt(i, j)
                    If k <= incumbent.route_vertex_cnt(i, j) Then
                        If Rnd() < removal_rate Then
                            Call RemoveVertex(incumbent, i, j, k)
                        End If
                    End If
                Next k
            Next j
        Next i

        'MsgBox "Starting objective: " & incumbent.net_profit & " " & iteration

        insertion_heuristic = Application.WorksheetFunction.RandBetween(1, 2)
        
        Do
            candidate_count = 0

            For vertex = vertex_list.num_depots + 1 To vertex_list.num_locations

                If (vertex_list.vertices(vertex).mandatory >= 0) And (incumbent.vertices_visited(vertex) = 0) Then

                    max_mandatory = 0
                    max_net_profit = incumbent.net_profit - instance.penalty
                    vehicle_type_to_add_to = -1

                    For i = 1 To vehicle_type_list.num_vehicle_types
                        For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                            For k = 1 To (incumbent.route_vertex_cnt(i, j) + 1)

                                Call AddVertex(incumbent, vertex, i, j, k)

                                If (vertex_list.vertices(vertex).mandatory > max_mandatory) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit + epsilon)) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit - epsilon) And (incumbent.total_distance < min_total_distance - epsilon)) Then
                                   
                                    max_secondary_profit = max_net_profit
                                    max_net_profit = incumbent.net_profit
                                    min_total_distance = incumbent.total_distance
                                    max_mandatory = vertex_list.vertices(vertex).mandatory
                                    vertex_to_be_added = vertex
                                    vehicle_type_to_add_to = i
                                    vehicle_id_to_add_to = j
                                    position_to_add_to = k
                                ElseIf ((vertex_list.vertices(vertex).mandatory = max_mandatory) And (incumbent.net_profit > max_secondary_profit + epsilon)) Then
                                   
                                    max_secondary_profit = incumbent.net_profit
            
                                End If

                                Call RemoveVertex(incumbent, i, j, k)

                            Next k
                        Next j
                    Next i

                    If vehicle_type_to_add_to <> -1 Then
                        candidate_count = candidate_count + 1
                        With candidate_list(candidate_count)
                            If insertion_heuristic = 2 Or max_mandatory = 0 Then
                                .net_profit = Abs(max_secondary_profit - max_net_profit)
                            Else
                                .net_profit = max_net_profit
                            End If
                            .total_distance = min_total_distance
                            .mandatory = max_mandatory
                            .vertex_to_be_added = vertex
                            .vehicle_type_index = vehicle_type_to_add_to
                            .vehicle_id = vehicle_id_to_add_to
                            .position = position_to_add_to
                        End With
                    End If
                End If

            Next vertex

            If candidate_count > 0 Then

                final_candidate_count = solver_options.LNS_candidate_list_size

                If final_candidate_count > candidate_count Then
                    final_candidate_count = candidate_count
                End If

                For i = 1 To final_candidate_count
                    k = -1
                    max_mandatory = candidate_list(i).mandatory
                    max_net_profit = candidate_list(i).net_profit
                    min_total_distance = candidate_list(i).total_distance
                    For j = i + 1 To candidate_count
                        If (candidate_list(j).mandatory > max_mandatory) Or _
                            ((candidate_list(j).mandatory >= max_mandatory) And (candidate_list(j).net_profit > max_net_profit + epsilon)) Or _
                            ((candidate_list(j).mandatory >= max_mandatory) And (candidate_list(j).net_profit > max_net_profit - epsilon) And (candidate_list(j).total_distance < min_total_distance - epsilon)) Then

                            max_mandatory = candidate_list(j).mandatory
                            max_net_profit = candidate_list(j).net_profit
                            min_total_distance = candidate_list(j).total_distance

                            k = j
                        End If
                    Next j

                    If k > -1 Then
                        swap_candidate = candidate_list(i)
                        candidate_list(i) = candidate_list(k)
                        candidate_list(k) = swap_candidate
                    End If

                Next i
                
                k = Application.WorksheetFunction.RandBetween(1, final_candidate_count)

                With candidate_list(k)
                    vertex_to_be_added = .vertex_to_be_added
                    vehicle_type_to_add_to = .vehicle_type_index
                    vehicle_id_to_add_to = .vehicle_id
                    position_to_add_to = .position
                End With
                
                Call AddVertex(incumbent, vertex_to_be_added, vehicle_type_to_add_to, vehicle_id_to_add_to, position_to_add_to)
            End If

            Call EvaluateSolution(incumbent)

            If ((incumbent.feasible = True) And (best_known.feasible = False)) Or _
               ((incumbent.covers_mandatory_vertices = True) And (best_known.covers_mandatory_vertices = False)) Or _
               ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit + epsilon)) Or _
               ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit - epsilon) And (incumbent.total_distance < best_known.total_distance - epsilon)) Then

                'Call ImproveSolution(incumbent)
                best_known = incumbent
            End If

        Loop While candidate_count > 0

        'MsgBox "Before polishing: " & incumbent.net_profit & " " & incumbent.feasible & " " & iteration

        Call ImproveSolution(incumbent)

        'MsgBox "After polishing: " & incumbent.net_profit & " " & incumbent.feasible & " " & iteration

        end_time = Now
        
        time_elapsed = 86400 * (end_time - start_time)
        
        If ((incumbent.feasible = True) And (best_known.feasible = False)) Or _
            ((incumbent.covers_mandatory_vertices = True) And (best_known.covers_mandatory_vertices = False)) Or _
            ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit + epsilon)) Or _
            ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit - epsilon) And (incumbent.total_distance < best_known.total_distance - epsilon)) Then

             best_known = incumbent

        ElseIf incumbent.net_profit < best_known.net_profit - 0.1 * (1 - (time_elapsed / solver_options.CPU_time_limit)) * Abs(best_known.net_profit) Then 'If Rnd() < 0.5 Then

             incumbent = best_known
             Call EvaluateSolution(incumbent)

        End If

        iteration = iteration + 1

    Loop While time_elapsed < solver_options.CPU_time_limit
    
    'MsgBox "Iterations performed: " & iteration
    
VRP_Solver_Finish:
    
    'squeeze the solution
    
    For i = 1 To vehicle_type_list.num_vehicle_types
        For j = 1 To vehicle_type_list.vehicle_types(i).number_available - 1
            If best_known.route_vertex_cnt(i, j) = 0 Then
                'look for a vehicle that is used
                l = -1
                k = j + 1
                Do
                    If best_known.route_vertex_cnt(i, k) > 0 Then
                        l = k
                    End If
                    k = k + 1
                Loop While (l = -1) And (k <= vehicle_type_list.vehicle_types(i).number_available)

                If l <> -1 Then
                    best_known.route_vertex_cnt(i, j) = best_known.route_vertex_cnt(i, l)
                    For k = 1 To best_known.route_vertex_cnt(i, l)
                        best_known.route_vertices(i, j, k) = best_known.route_vertices(i, l, k)
                    Next k
                    best_known.route_vertex_cnt(i, l) = 0
                End If
            End If
        Next j
    Next i
    
    Call EvaluateSolution(best_known)
    
    'write the solution
    
    'MsgBox best_known.net_profit
    
    If best_known.feasible = True Then
        reply = MsgBox("VRP Spreadsheet Solver performed " & iteration & " LNS iterations and found a solution with a net profit of " & CStr(best_known.net_profit) & ". Do you want to overwrite the current solution with the best found solution?", vbYesNo, "VRP Spreadsheet Solver")
        If reply = vbYes Then
        Call WriteSolution(best_known)
        End If
    Else
        reply = MsgBox("The best found solution after " & iteration & " LNS iterations does not satisfy all constraints. Do you want to overwrite the current solution with the best found solution?", vbYesNo, "VRP Spreadsheet Solver")
        If reply = vbYes Then
            Call WriteSolution(best_known)
        End If
    End If
    
    'Erase the data
    
    Erase vertex_list.vertices
    Erase arc_list.distance
    Erase arc_list.duration
    Erase vehicle_type_list.vehicle_types
    
    Erase incumbent.net_profit_per_route
    Erase incumbent.route_vertex_cnt
    Erase incumbent.route_vertices
    Erase incumbent.vertices_visited
    
    Erase best_known.net_profit_per_route
    Erase best_known.route_vertex_cnt
    Erase best_known.route_vertices
    Erase best_known.vertices_visited
    
    Application.StatusBar = False
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    ThisWorkbook.Worksheets("4.Solution").Activate
    Cells(1, 1).Select
    
End Sub
Sub FeasibilityCheckData(infeasibility_count As Long, infeasibility_string As String)
       
    Dim i As Long
    Dim j As Long
    Dim duration_multiplier As Double
    Dim origin_base_id As Long
    Dim return_base_id As Long
    Dim reachable As Boolean
    
    Dim num_stops As Long
    
    If instance.multi_trip = True Then
        num_stops = vertex_list.num_customers
    Else
        num_stops = 1
    End If
    
    infeasibility_count = 0
    infeasibility_string = vbNullString
    
    Range(ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + num_stops, 1), ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + (4 * vertex_list.num_customers), 1)).Clear
    
    Dim max_vehicle_capacity As Double
    Dim total_vehicle_capacity As Double
    Dim total_supply As Double
    max_vehicle_capacity = 0
    total_vehicle_capacity = 0
    
    For i = 1 To vehicle_type_list.num_vehicle_types
        If max_vehicle_capacity < vehicle_type_list.vehicle_types(i).capacity Then
            max_vehicle_capacity = vehicle_type_list.vehicle_types(i).capacity
        End If
        total_vehicle_capacity = total_vehicle_capacity + (vehicle_type_list.vehicle_types(i).number_available * vehicle_type_list.vehicle_types(i).capacity)
    Next i
    
    total_supply = 0
    For i = vertex_list.num_depots + 1 To vertex_list.num_locations
        If vertex_list.vertices(i).mandatory = 1 Then
            total_supply = total_supply + vertex_list.vertices(i).pickup_amount
        End If
    Next i
    
    If (instance.multi_trip = False) And (total_supply > total_vehicle_capacity + epsilon) Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The capacity of the given fleet is not enough to transport the mandatory pickup." & Chr(13)
        ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The capacity of the given fleet is not enough to transport the mandatory pickup."
    End If
    
    If (instance.multi_trip = True) And (total_supply > vertex_list.num_customers * total_vehicle_capacity + epsilon) Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The capacity of the given fleet is not enough to transport the mandatory pickup." & Chr(13)
        ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The capacity of the given fleet is not enough to transport the mandatory pickup."
    End If
    
    total_supply = 0
    For i = vertex_list.num_depots + 1 To vertex_list.num_locations
        If (vertex_list.vertices(i).mandatory = 1 And vertex_list.vertices(i).pickup_amount < 0) Or (vertex_list.vertices(i).pickup_amount > 0) Then
            total_supply = total_supply + vertex_list.vertices(i).pickup_amount
        End If
    Next i
    
    If total_supply < 0 Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "There is not enough supply for pickup items to satisfy the demand for pickup items." & Chr(13)
        ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "There is not enough supply for pickup items to satisfy the demand for pickup items."
    End If
    
    total_supply = 0
    For i = vertex_list.num_depots + 1 To vertex_list.num_locations
        If vertex_list.vertices(i).mandatory = 1 Then
            total_supply = total_supply + vertex_list.vertices(i).delivery_amount
        End If
    Next i
    
    If (instance.multi_trip = False) And (total_supply > total_vehicle_capacity + epsilon) Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The capacity of the given fleet is not enough to transport the mandatory delivery." & Chr(13)
        ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The capacity of the given fleet is not enough to transport the mandatory delivery."
    End If
    
    If (instance.multi_trip = True) And (total_supply > vertex_list.num_customers * total_vehicle_capacity + epsilon) Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The capacity of the given fleet is not enough to transport the mandatory delivery." & Chr(13)
        ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The capacity of the given fleet is not enough to transport the mandatory delivery."
    End If
    
    For i = vertex_list.num_depots + 1 To vertex_list.num_locations
        If (vertex_list.vertices(i).mandatory = 1) And (Abs(vertex_list.vertices(i).pickup_amount) > max_vehicle_capacity) Then
            infeasibility_count = infeasibility_count + 1
            If infeasibility_count < 5 Then
                infeasibility_string = infeasibility_string & "The supply of location " & i - 1 & " is too large to fit into any vehicle." & Chr(13)
            End If
            If infeasibility_count = 5 Then
                infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
            End If
            ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The supply of location " & i - 1 & " is too large to fit into any vehicle."
        End If

        If (vertex_list.vertices(i).mandatory = 1) And (vertex_list.vertices(i).delivery_amount > max_vehicle_capacity) Then
            infeasibility_count = infeasibility_count + 1
            If infeasibility_count < 5 Then
                infeasibility_string = infeasibility_string & "The demand of location " & i - 1 & " is too large to fit into any vehicle." & Chr(13)
            End If
            If infeasibility_count = 5 Then
                infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
            End If
            ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The demand of location " & i - 1 & " is too large to fit into any vehicle."
        End If
        
        If (vertex_list.vertices(i).mandatory = 1) And (vertex_list.vertices(i).time_window_end - vertex_list.vertices(i).time_window_start < vertex_list.vertices(i).service_time) Then
            infeasibility_count = infeasibility_count + 1
            If infeasibility_count < 5 Then
                infeasibility_string = infeasibility_string & "The service time of location " & i - 1 & " is shorter than its time window." & Chr(13)
            End If
            If infeasibility_count = 5 Then
                infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
            End If
            ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The service time of location " & i - 1 & " is shorter than its time window."
        End If
    Next i
                
    For i = vertex_list.num_depots + 1 To vertex_list.num_locations
        If instance.open_vrp = False Then
                
            reachable = False
            For j = 1 To vehicle_type_list.num_vehicle_types
                
                origin_base_id = vehicle_type_list.vehicle_types(j).origin_base_id
                return_base_id = vehicle_type_list.vehicle_types(j).return_base_id
            
                If (vehicle_type_list.vehicle_types(j).number_available > 0) And (arc_list.distance(origin_base_id, i) + arc_list.distance(i, return_base_id) < vehicle_type_list.vehicle_types(j).distance_limit) Then
                    reachable = True
                End If
                
            Next j
        
            If (vertex_list.vertices(i).mandatory = 1) And (reachable = False) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " cannot be visited with the given distance limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " cannot be visited with the given distance limit."
            End If
            
            reachable = False
            For j = 1 To vehicle_type_list.num_vehicle_types
                            
                origin_base_id = vehicle_type_list.vehicle_types(j).origin_base_id
                return_base_id = vehicle_type_list.vehicle_types(j).return_base_id
                duration_multiplier = vehicle_type_list.vehicle_types(j).duration_multiplier
                
                If (vehicle_type_list.vehicle_types(j).number_available > 0) And (duration_multiplier * arc_list.duration(origin_base_id, i) + duration_multiplier * arc_list.duration(i, return_base_id) < vehicle_type_list.vehicle_types(j).driving_time_limit) Then
                    reachable = True
                End If
                
            Next j
            
            If (vertex_list.vertices(i).mandatory = 1) And (reachable = False) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " cannot be visited with the given driving time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " cannot be visited with the given driving time limit."
            End If
    
            reachable = False
            For j = 1 To vehicle_type_list.num_vehicle_types
                
                origin_base_id = vehicle_type_list.vehicle_types(j).origin_base_id
                return_base_id = vehicle_type_list.vehicle_types(j).return_base_id
                duration_multiplier = vehicle_type_list.vehicle_types(j).duration_multiplier
            
                If (vehicle_type_list.vehicle_types(j).number_available > 0) And (duration_multiplier * arc_list.duration(origin_base_id, i) + duration_multiplier * arc_list.duration(i, return_base_id) + vertex_list.vertices(i).service_time < vehicle_type_list.vehicle_types(j).working_time_limit) Then
                    reachable = True
                End If
                
            Next j
            
            If (vertex_list.vertices(i).mandatory = 1) And (reachable = False) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " cannot be served with the given working time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " cannot be served with the given working time limit."
            End If
            
        Else
            
            reachable = False
            For j = 1 To vehicle_type_list.num_vehicle_types
                
                origin_base_id = vehicle_type_list.vehicle_types(j).origin_base_id
                
                If (vehicle_type_list.vehicle_types(j).number_available > 0) And (arc_list.distance(origin_base_id, i) < vehicle_type_list.vehicle_types(j).distance_limit) Then
                    reachable = True
                End If
                
            Next j
        
            If (vertex_list.vertices(i).mandatory = 1) And (reachable = False) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " cannot be visited with the given distance limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " cannot be visited with the given distance limit."
            End If
            
            reachable = False
            For j = 1 To vehicle_type_list.num_vehicle_types
            
                origin_base_id = vehicle_type_list.vehicle_types(j).origin_base_id
                duration_multiplier = vehicle_type_list.vehicle_types(j).duration_multiplier
                
                If (vehicle_type_list.vehicle_types(j).number_available > 0) And (duration_multiplier * arc_list.duration(origin_base_id, i) < vehicle_type_list.vehicle_types(j).driving_time_limit) Then
                    reachable = True
                End If
                
            Next j
            
            If (vertex_list.vertices(i).mandatory = 1) And (reachable = False) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " cannot be visited with the given driving time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " cannot be visited with the given driving time limit."
            End If
    
            reachable = False
            For j = 1 To vehicle_type_list.num_vehicle_types
                
                origin_base_id = vehicle_type_list.vehicle_types(j).origin_base_id
                duration_multiplier = vehicle_type_list.vehicle_types(j).duration_multiplier
                
                If (vehicle_type_list.vehicle_types(j).number_available > 0) And (duration_multiplier * arc_list.duration(origin_base_id, i) + duration_multiplier * vertex_list.vertices(i).service_time < vehicle_type_list.vehicle_types(j).working_time_limit) Then
                    reachable = True
                End If
                
            Next j
            
            If (vertex_list.vertices(i).mandatory = 1) And (reachable = False) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " cannot be served with the given working time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " cannot be served with the given working time limit."
            End If
        End If
    Next i
    
    If instance.backhauls = True Then
        For i = vertex_list.num_depots + 1 To vertex_list.num_locations
            If (Abs(vertex_list.vertices(i).pickup_amount) > 0) And (vertex_list.vertices(i).delivery_amount > 0) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " is asking for both pickup and delivery, which conflicts with the backhauls option." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " is asking for both pickup and delivery, which conflicts with the backhauls option."
            End If
        Next i
    End If
    
End Sub
Sub FeasibilityCheckDataAndSolution()
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = False
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Locations") And CheckWorksheetExistence("2.Distances") And CheckWorksheetExistence("3.Vehicles") And CheckWorksheetExistence("4.Solution")
    If WorksheetExists = False Then
        reply = MsgBox("Worksheets 1.Locations, 2.Distances, 3.Vehicles, and 4.Solution must exist for the Infeasibility Check.", vbOKOnly, "VRP Spreadsheet Solver")
        Exit Sub
    End If
    
    Call GetInstanceData
    Call GetVertexData
    Call GetArcData
    Call GetVehicleTypeData
    ThisWorkbook.Worksheets("4.Solution").Activate
    
    Dim num_stops As Long
    
    If instance.multi_trip = True Then
        num_stops = vertex_list.num_customers
    Else
        num_stops = 1
    End If
    
    Range(Cells(2, 1), Cells(2, 12)).Clear
    Range(Cells(vertex_list.num_customers + 8 + num_stops, 1), Cells(vertex_list.num_customers + 7 + num_stops + (8 * vertex_list.num_customers), 1)).Clear
    
    Dim infeasibility_count As Long
    infeasibility_count = 0
    
    Dim infeasibility_string As String
    infeasibility_string = Chr(13)
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim stage As Long
    
    Dim origin_base_id As Long
    Dim return_base_id As Long
    Dim duration_multiplier As Double
    Dim reachable As Boolean

    Dim stop_count As Long
    Dim offset As Long
    
    offset = 0
    
    For i = 1 To vehicle_type_list.num_vehicle_types
        For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                        
            stop_count = ThisWorkbook.Worksheets("4.Solution").Cells(3, 7 + offset).value
            
            For k = 1 To stop_count
                
                If Cells(5 + k, 2 + offset).value = vbNullString Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Locations must be contiguous in routes. Violation at: " & Cells(5 + k, 2 + offset).address & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                    End If
                    Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Locations must be contiguous in routes. Violation at: " & Cells(5 + k, 2 + offset).address
                End If
                
                If (k < stop_count) And (Cells(5 + k, 2 + offset).value = Cells(5, offset + 2).value) And (instance.multi_trip = False) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "There may be at most one return to the starting location. Violation at: " & Cells(5 + k, 2 + offset).address(False, False) & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                    End If
                    Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "There must be at most one return to the starting location. Violation at: " & Cells(5 + k, 2 + offset).address
                End If
                
                If (instance.open_vrp = False) And (k = stop_count) And (Cells(5 + k, 3 + offset).value + 1 <> vehicle_type_list.vehicle_types(i).return_base_id) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Every vehicle must return to its return depot. Violation at: " & Cells(5 + k, 2 + offset).address & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                    End If
                    Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Every vehicle must return to its return depot. Violation at: " & Cells(5 + k, 2 + offset).address(False, False)
                End If
            
            Next k
            
            offset = offset + offset_constant
        
        Next j
    Next i
    
    If infeasibility_count > 0 Then
        infeasibility_string = "The solution has format problems:" & infeasibility_string
    End If
    
    Dim incumbent As solution_data
    
    Call InitializeSolution(incumbent)
    Call ReadSolution(incumbent)
    
    Dim max_vehicle_capacity As Double
    Dim total_vehicle_capacity As Double
    Dim total_supply As Double
    max_vehicle_capacity = 0
    total_vehicle_capacity = 0
    
    For i = 1 To vehicle_type_list.num_vehicle_types
        If max_vehicle_capacity < vehicle_type_list.vehicle_types(i).capacity Then
            max_vehicle_capacity = vehicle_type_list.vehicle_types(i).capacity
        End If
        total_vehicle_capacity = total_vehicle_capacity + (vehicle_type_list.vehicle_types(i).number_available * vehicle_type_list.vehicle_types(i).capacity)
    Next i
    
    total_supply = 0
    For i = vertex_list.num_depots + 1 To vertex_list.num_locations
        If vertex_list.vertices(i).mandatory = 1 Then
            total_supply = total_supply + vertex_list.vertices(i).pickup_amount
        End If
    Next i
    
    If (instance.multi_trip = False) And (total_supply > total_vehicle_capacity) Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The capacity of the given fleet is not enough to transport the mandatory supply." & Chr(13)
        Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The capacity of the given fleet is not enough to transport the mandatory supply."
    End If
    
    If (instance.multi_trip = True) And (total_supply > total_vehicle_capacity * vertex_list.num_customers) Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The capacity of the given fleet is not enough to transport the mandatory supply." & Chr(13)
        Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The capacity of the given fleet is not enough to transport the mandatory supply."
    End If
    
    total_supply = 0
    For i = vertex_list.num_depots + 1 To vertex_list.num_locations
        If (vertex_list.vertices(i).mandatory = 1 And vertex_list.vertices(i).pickup_amount < 0) Or (vertex_list.vertices(i).pickup_amount > 0) Then
            total_supply = total_supply + vertex_list.vertices(i).pickup_amount
        End If
    Next i
    
    If total_supply < 0 Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "There is not enough supply for pickup items to satisfy the demand for pickup items." & Chr(13)
        ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "There is not enough supply for pickup items to satisfy the demand for pickup items."
    End If
    
    total_supply = 0
    For i = vertex_list.num_depots + 1 To vertex_list.num_locations
        If vertex_list.vertices(i).mandatory = 1 Then
            total_supply = total_supply + vertex_list.vertices(i).delivery_amount
        End If
    Next i
    
    If (instance.multi_trip = False) And (total_supply > total_vehicle_capacity) Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The capacity of the given fleet is not enough to transport the mandatory demand." & Chr(13)
        Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The capacity of the given fleet is not enough to transport the mandatory demand."
    End If
    
    If (instance.multi_trip = True) And (total_supply > total_vehicle_capacity * vertex_list.num_customers) Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The capacity of the given fleet is not enough to transport the mandatory demand." & Chr(13)
        Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The capacity of the given fleet is not enough to transport the mandatory demand."
    End If
    
    For i = vertex_list.num_depots + 1 To vertex_list.num_locations
        If (vertex_list.vertices(i).mandatory = 1) And (Abs(vertex_list.vertices(i).pickup_amount) > max_vehicle_capacity) Then
            infeasibility_count = infeasibility_count + 1
            If infeasibility_count < 5 Then
                infeasibility_string = infeasibility_string & "The supply of location " & i - 1 & " is too large to fit into any vehicle." & Chr(13)
            End If
            If infeasibility_count = 5 Then
                infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
            End If
            Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The supply of location " & i - 1 & " is too large to fit into any vehicle."
        End If
        
        If (vertex_list.vertices(i).mandatory = 1) And (vertex_list.vertices(i).delivery_amount > max_vehicle_capacity) Then
            infeasibility_count = infeasibility_count + 1
            If infeasibility_count < 5 Then
                infeasibility_string = infeasibility_string & "The demand of location " & i - 1 & " is too large to fit into any vehicle." & Chr(13)
            End If
            If infeasibility_count = 5 Then
                infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
            End If
            Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The demand of location " & i - 1 & " is too large to fit into any vehicle."
        End If

        If (vertex_list.vertices(i).mandatory = 1) And (vertex_list.vertices(i).time_window_end - vertex_list.vertices(i).time_window_start < vertex_list.vertices(i).service_time) Then
            infeasibility_count = infeasibility_count + 1
            If infeasibility_count < 5 Then
                infeasibility_string = infeasibility_string & "The service time of location " & i - 1 & " is shorter than its time window." & Chr(13)
            End If
            If infeasibility_count = 5 Then
                infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
            End If
            Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The service time of location " & i - 1 & " is shorter than its time window." & Chr(13)
        End If
    Next i
    
    For i = vertex_list.num_depots + 1 To vertex_list.num_locations
        If instance.open_vrp = False Then
            
            reachable = False
            For j = 1 To vehicle_type_list.num_vehicle_types
                
                origin_base_id = vehicle_type_list.vehicle_types(j).origin_base_id
                return_base_id = vehicle_type_list.vehicle_types(j).return_base_id
            
                If (vehicle_type_list.vehicle_types(j).number_available > 0) And (arc_list.distance(origin_base_id, i) + arc_list.distance(i, return_base_id) < vehicle_type_list.vehicle_types(j).distance_limit) Then
                    reachable = True
                End If
                
            Next j
        
            If (vertex_list.vertices(i).mandatory = 1) And (reachable = False) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " cannot be visited with the given distance limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " cannot be visited with the given distance limit."
            End If
            
            reachable = False
            For j = 1 To vehicle_type_list.num_vehicle_types
                
                origin_base_id = vehicle_type_list.vehicle_types(j).origin_base_id
                return_base_id = vehicle_type_list.vehicle_types(j).return_base_id
                duration_multiplier = vehicle_type_list.vehicle_types(j).duration_multiplier
            
                If (vehicle_type_list.vehicle_types(j).number_available > 0) And (duration_multiplier * arc_list.duration(origin_base_id, i) + duration_multiplier * arc_list.duration(i, return_base_id) < vehicle_type_list.vehicle_types(j).driving_time_limit) Then
                    reachable = True
                End If
                
            Next j
            
            If (vertex_list.vertices(i).mandatory = 1) And (reachable = False) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " cannot be visited with the given driving time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " cannot be visited with the given driving time limit."
            End If
    
            reachable = False
            For j = 1 To vehicle_type_list.num_vehicle_types
                
                origin_base_id = vehicle_type_list.vehicle_types(j).origin_base_id
                return_base_id = vehicle_type_list.vehicle_types(j).return_base_id
                duration_multiplier = vehicle_type_list.vehicle_types(j).duration_multiplier
            
                If (vehicle_type_list.vehicle_types(j).number_available > 0) And (duration_multiplier * arc_list.duration(origin_base_id, i) + duration_multiplier * arc_list.duration(i, return_base_id) + vertex_list.vertices(i).service_time < vehicle_type_list.vehicle_types(j).working_time_limit) Then
                    reachable = True
                End If
                
            Next j
            
            If (vertex_list.vertices(i).mandatory = 1) And (reachable = False) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " cannot be served with the given working time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " cannot be served with the given working time limit."
            End If
            
        Else
            
            reachable = False
            For j = 1 To vehicle_type_list.num_vehicle_types
                
                origin_base_id = vehicle_type_list.vehicle_types(j).origin_base_id
                
                If (vehicle_type_list.vehicle_types(j).number_available > 0) And (arc_list.distance(origin_base_id, i) < vehicle_type_list.vehicle_types(j).distance_limit) Then
                    reachable = True
                End If
                
            Next j
        
            If (vertex_list.vertices(i).mandatory = 1) And (reachable = False) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " cannot be visited with the given distance limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " cannot be visited with the given distance limit."
            End If
            
            reachable = False
            For j = 1 To vehicle_type_list.num_vehicle_types
                
                origin_base_id = vehicle_type_list.vehicle_types(j).origin_base_id
                duration_multiplier = vehicle_type_list.vehicle_types(j).duration_multiplier
                
                If (vehicle_type_list.vehicle_types(j).number_available > 0) And (duration_multiplier * arc_list.duration(origin_base_id, i) < vehicle_type_list.vehicle_types(j).driving_time_limit) Then
                    reachable = True
                End If
                
            Next j
            
            If (vertex_list.vertices(i).mandatory = 1) And (reachable = False) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " cannot be visited with the given driving time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " cannot be visited with the given driving time limit."
            End If
    
            reachable = False
            For j = 1 To vehicle_type_list.num_vehicle_types
                
                origin_base_id = vehicle_type_list.vehicle_types(j).origin_base_id
                duration_multiplier = vehicle_type_list.vehicle_types(j).duration_multiplier
                
                If (vehicle_type_list.vehicle_types(j).number_available > 0) And (duration_multiplier * arc_list.duration(origin_base_id, i) + vertex_list.vertices(i).service_time < vehicle_type_list.vehicle_types(j).working_time_limit) Then
                    reachable = True
                End If
                
            Next j
            
            If (vertex_list.vertices(i).mandatory = 1) And (reachable = False) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " cannot be served with the given working time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " cannot be served with the given working time limit."
            End If
        End If
    Next i
    
    If instance.backhauls = True Then
        For i = vertex_list.num_depots + 1 To vertex_list.num_locations
            If (Abs(vertex_list.vertices(i).pickup_amount) > 0) And (vertex_list.vertices(i).delivery_amount > 0) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " is asking for both pickup and delivery, which conflicts with the backhauls option." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " is asking for both pickup and delivery, which conflicts with the backhauls option."
            End If
        Next i
    End If
    
    Dim pickup_amount As Double
    Dim delivery_amount As Double
    Dim distance_traversed As Double
    Dim time_accumulated As Long
    Dim driving_time_total As Long
    Dim working_time_total As Long
    
    Dim total_pickup_load As Double
    Dim vehicle_capacity As Double
    Dim min_residual_capacity As Double
    
    Dim start_index As Long
    Dim end_index As Long
    
    Dim this_vertex As Long
    Dim previous_vertex As Long
    Dim stop_count_claimed As Long
    Dim depot_return_count As Long
    
    With incumbent
    
        offset = 0
        
        For i = 1 To vehicle_type_list.num_vehicle_types
            For j = 1 To vehicle_type_list.vehicle_types(i).number_available
            
                vehicle_capacity = vehicle_type_list.vehicle_types(i).capacity
                
                If instance.multi_trip = True Then
                
                    ' Read the stops
                    
                    stop_count_claimed = ThisWorkbook.Worksheets("4.Solution").Cells(3, 7 + offset).value
                    depot_return_count = 0
                    
                    start_index = 1
                    For k = 1 To stop_count_claimed
                        If ThisWorkbook.Worksheets("4.Solution").Cells(5 + k, 2 + offset).value = ThisWorkbook.Worksheets("4.Solution").Cells(5, 2 + offset).value Then
                            DP_list.control(start_index) = k - 1 - depot_return_count
                            start_index = k - depot_return_count
                            depot_return_count = depot_return_count + 1
                        End If
                    Next k
            
                Else
                    DP_list.control(1) = .route_vertex_cnt(i, j)
                End If
                
                If .route_vertex_cnt(i, j) > 0 Then
                   
                    distance_traversed = 0
                    driving_time_total = 0
                    working_time_total = 0
                    duration_multiplier = vehicle_type_list.vehicle_types(i).duration_multiplier
                    time_accumulated = vehicle_type_list.vehicle_types(i).work_start_time
                    origin_base_id = vehicle_type_list.vehicle_types(i).origin_base_id
                    return_base_id = vehicle_type_list.vehicle_types(i).return_base_id
            
                    .net_profit_per_route(i, j) = .net_profit_per_route(i, j) - vehicle_type_list.vehicle_types(i).fixed_cost_per_trip
                    
                    end_index = 0
                    depot_return_count = 0
                    
                    Do
                    
                        start_index = end_index + 1
                        end_index = DP_list.control(start_index)
                        
                        delivery_amount = 0
                        For k = start_index To end_index
                            delivery_amount = delivery_amount + vertex_list.vertices(.route_vertices(i, j, k)).delivery_amount
                        Next k
                        
                        If delivery_amount > vehicle_type_list.vehicle_types(i).capacity Then
                            infeasibility_count = infeasibility_count + 1
                            If infeasibility_count < 5 Then
                                infeasibility_string = infeasibility_string & "The load of vehicle " & Cells(3, 2 + offset).value & " exceeds its capacity." & end_index & Chr(13)
                            End If
                            If infeasibility_count = 5 Then
                                infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                            End If
                            Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The load of vehicle " & Cells(3, 2 + offset).value & " exceeds its capacity."
                        End If
                        
                        pickup_amount = 0
                        For k = start_index To end_index
                        
                            pickup_amount = pickup_amount + vertex_list.vertices(.route_vertices(i, j, k)).pickup_amount
                            delivery_amount = delivery_amount - vertex_list.vertices(.route_vertices(i, j, k)).delivery_amount
                
                            If pickup_amount + delivery_amount > vehicle_type_list.vehicle_types(i).capacity Then
                                infeasibility_count = infeasibility_count + 1
                                If infeasibility_count < 5 Then
                                    infeasibility_string = infeasibility_string & "Vehicle " & Cells(3, 2 + offset).value & " exceeds its capacity at stop " & k + depot_return_count & "." & Chr(13)
                                End If
                                If infeasibility_count = 5 Then
                                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                                End If
                                Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Vehicle " & Cells(3, 2 + offset).value & " exceeds its capacity at stop " & k & "."
                            End If
                            
                            If pickup_amount < 0 Then
                                infeasibility_count = infeasibility_count + 1
                                If infeasibility_count < 5 Then
                                    infeasibility_string = infeasibility_string & "Vehicle " & Cells(3, 2 + offset).value & " has a negative pickup amount at stop " & k + depot_return_count & "." & Chr(13)
                                End If
                                If infeasibility_count = 5 Then
                                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                                End If
                                Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Vehicle " & Cells(3, 2 + offset).value & " has a negative pickup amount at stop " & k & "."
                            End If
                            
                            If k = start_index Then
                                distance_traversed = distance_traversed + arc_list.distance(origin_base_id, .route_vertices(i, j, k))
                                time_accumulated = time_accumulated + arc_list.duration(origin_base_id, .route_vertices(i, j, k)) * duration_multiplier
                                driving_time_total = driving_time_total + arc_list.duration(origin_base_id, .route_vertices(i, j, k)) * duration_multiplier
                                working_time_total = working_time_total + arc_list.duration(origin_base_id, .route_vertices(i, j, k)) * duration_multiplier
                            Else
                                distance_traversed = distance_traversed + arc_list.distance(.route_vertices(i, j, k - 1), .route_vertices(i, j, k))
                                time_accumulated = time_accumulated + arc_list.duration(.route_vertices(i, j, k - 1), .route_vertices(i, j, k)) * duration_multiplier
                                driving_time_total = driving_time_total + arc_list.duration(.route_vertices(i, j, k - 1), .route_vertices(i, j, k)) * duration_multiplier
                                working_time_total = working_time_total + arc_list.duration(.route_vertices(i, j, k - 1), .route_vertices(i, j, k)) * duration_multiplier
                            End If
                            
                            If time_accumulated < vertex_list.vertices(.route_vertices(i, j, k)).time_window_start Then
                            
                                working_time_total = working_time_total + vertex_list.vertices(.route_vertices(i, j, k)).time_window_start - time_accumulated
                                time_accumulated = vertex_list.vertices(.route_vertices(i, j, k)).time_window_start
                            
                            End If
                            
                            time_accumulated = time_accumulated + vertex_list.vertices(.route_vertices(i, j, k)).service_time
                            working_time_total = working_time_total + vertex_list.vertices(.route_vertices(i, j, k)).service_time
                            
                            If time_accumulated > vertex_list.vertices(.route_vertices(i, j, k)).time_window_end And instance.soft_time_windows = False Then
                                infeasibility_count = infeasibility_count + 1
                                If infeasibility_count < 5 Then
                                    infeasibility_string = infeasibility_string & "The visit time of location " & .route_vertices(i, j, k) - 1 & " is past its time window." & Chr(13)
                                End If
                                If infeasibility_count = 5 Then
                                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                                End If
                                Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "The visit time of location " & .route_vertices(i, j, k) - 1 & " is past its time window."
                            End If
                
                        Next k
                
                        If instance.open_vrp = False Then
                            
                            k = .route_vertices(i, j, end_index)
                            
                            distance_traversed = distance_traversed + arc_list.distance(k, return_base_id)
                            time_accumulated = time_accumulated + arc_list.duration(k, return_base_id) * duration_multiplier
                            driving_time_total = driving_time_total + arc_list.duration(k, return_base_id) * duration_multiplier
                            working_time_total = working_time_total + arc_list.duration(k, return_base_id) * duration_multiplier
                            
                            If time_accumulated > vertex_list.vertices(return_base_id).time_window_end And instance.soft_time_windows = False Then
                                infeasibility_count = infeasibility_count + 1
                                If infeasibility_count < 5 Then
                                    infeasibility_string = infeasibility_string & "Vehicle " & Cells(3, 2 + offset).value & " " & j & " returns to the starting location past its time window." & Chr(13)
                                End If
                                If infeasibility_count = 5 Then
                                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                                End If
                                Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Vehicle " & Cells(3, 2 + offset).value & " " & j & " returns to the starting location past its time window."
                            End If
                            
                            If .route_vertex_cnt(i, j) > end_index Then
                                time_accumulated = time_accumulated + vertex_list.vertices(return_base_id).service_time
                                working_time_total = working_time_total + vertex_list.vertices(return_base_id).service_time
                            End If
                
                        End If
                        
                        If distance_traversed > vehicle_type_list.vehicle_types(i).distance_limit Then
                            infeasibility_count = infeasibility_count + 1
                            If infeasibility_count < 5 Then
                                infeasibility_string = infeasibility_string & "Vehicle " & Cells(3, 2 + offset).value & " " & j & " exceeds the distance limit." & Chr(13)
                            End If
                            If infeasibility_count = 5 Then
                                infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                            End If
                            Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Vehicle " & Cells(3, 2 + offset).value & " exceeds the distance limit."
                        End If
                            
                        If driving_time_total > vehicle_type_list.vehicle_types(i).driving_time_limit Then
                            infeasibility_count = infeasibility_count + 1
                            If infeasibility_count < 5 Then
                                infeasibility_string = infeasibility_string & "Vehicle " & Cells(3, 2 + offset).value & " exceeds the driving time limit." & Chr(13)
                            End If
                            If infeasibility_count = 5 Then
                                infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                            End If
                            Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Vehicle " & Cells(3, 2 + offset).value & " exceeds the driving time limit."
                        End If
                
                        If working_time_total > vehicle_type_list.vehicle_types(i).working_time_limit Then
                            infeasibility_count = infeasibility_count + 1
                            If infeasibility_count < 5 Then
                                infeasibility_string = infeasibility_string & "Vehicle " & Cells(3, 2 + offset).value & " " & j & " exceeds the working time limit." & Chr(13)
                            End If
                            If infeasibility_count = 5 Then
                                infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                            End If
                            Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Vehicle " & Cells(3, 2 + offset).value & " " & j & " exceeds the working time limit."
                        End If
                    
                        depot_return_count = depot_return_count + 1
                    Loop While end_index <> .route_vertex_cnt(i, j)
                    
                End If
                
                offset = offset + offset_constant
                
            Next j
        Next i
        
        'check mandatory vertices and visits
        
        For i = vertex_list.num_depots + 1 To vertex_list.num_locations
            
            If (vertex_list.vertices(i).mandatory = 1) And (.vertices_visited(i) <> 1) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " must have been visited once (current number of visits: " & .vertices_visited(i) & ")." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " must have been visited once (current number of visits: " & .vertices_visited(i) & ")."
            End If
            
            If (vertex_list.vertices(i).mandatory = -1) And (.vertices_visited(i) > 0) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i - 1 & " must not be visited." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found under the detected reasons of infeasibility in the solution worksheet." & Chr(13)
                End If
                Cells(vertex_list.num_customers + 7 + num_stops + infeasibility_count, 1).value = "Location " & i - 1 & " must not be visited."
            End If
            
        Next i
        
    End With
        
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    If infeasibility_count > 0 Then
        Cells(2, 1) = "Warning: Last infeasibility check found problems with the solution."
        Range(Cells(2, 1), Cells(2, 16)).Interior.ColorIndex = 45
        infeasibility_string = infeasibility_string & "The solution is infeasible."
        reply = MsgBox(infeasibility_string, vbOKOnly, "VRP Spreadsheet Solver")
        Cells(vertex_list.num_customers + 8 + num_stops, 1).Select
    Else
        reply = MsgBox("The solution is feasible.", vbOKOnly, "VRP Spreadsheet Solver")
    End If
    
End Sub

Private Sub ImproveSolution(solution As solution_data)
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim a As Long
    Dim b As Long
    Dim c As Long
    
    Dim vertex As Long
    Dim vertex_buffer() As Long
    ReDim vertex_buffer(1 To vertex_list.num_customers)
    
    Dim vehicle_type_to_swap1 As Long
    Dim vehicle_type_to_swap2 As Long
    Dim vehicle_id_to_swap1 As Long
    Dim vehicle_id_to_swap2 As Long
    Dim position_to_swap1 As Long
    Dim position_to_swap2 As Long
    Dim vertex_to_swap As Long
    Dim vehicle_id_start_index As Long
    
    Dim vehicle_type_to_relocate1 As Long
    Dim vehicle_type_to_relocate2 As Long
    Dim vehicle_id_to_relocate1 As Long
    Dim vehicle_id_to_relocate2 As Long
    Dim position_to_relocate1 As Long
    Dim position_to_relocate2 As Long
    
    Dim vehicle_type_for_2opt1 As Long
    Dim vehicle_type_for_2opt2 As Long
    Dim vehicle_id_for_2opt1 As Long
    Dim vehicle_id_for_2opt2 As Long
    Dim position_for_2opt1 As Long
    Dim position_for_2opt2 As Long
    Dim vertex_cnt_for_2opt1 As Long
    Dim vertex_cnt_for_2opt2 As Long
    
    Dim reversal_for_2opt1 As Long
    Dim reversal_for_2opt2 As Long
    
    Dim vehicle_type_for_chain_reversal As Long
    Dim vehicle_id_for_chain_reversal As Long
    Dim position_for_chain_reversal1 As Long
    Dim position_for_chain_reversal2 As Long
    Dim midpoint_for_chain_reversal As Long
    
    Dim vehicle_type_for_full_swap1 As Long
    Dim vehicle_type_for_full_swap2 As Long
    Dim vehicle_id_for_full_swap1 As Long
    Dim vehicle_id_for_full_swap2 As Long
    Dim max_vertex_cnt As Long
    Dim vertex_cnt_to_swap As Long
    
    Dim max_net_profit As Double
    Dim min_total_distance As Double
    
    Dim improvement_iterations As Integer
    
    improvement_iterations = 0
    
    'polishing
    
    'MsgBox "Before improvement: " & solution.net_profit '& " " & solution.feasible
    
    Do
        DoEvents

        With solution
        
             max_net_profit = .net_profit
             min_total_distance = .total_distance
             
             'swap
             
             vehicle_type_to_swap1 = -1
             For i = 1 To vehicle_type_list.num_vehicle_types
                 For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                     For k = 1 To .route_vertex_cnt(i, j)
                         
                         For a = i To vehicle_type_list.num_vehicle_types
                             
                             If a = i Then
                                vehicle_id_start_index = j
                             Else
                                vehicle_id_start_index = 1
                             End If
                                
                             For b = vehicle_id_start_index To vehicle_type_list.vehicle_types(a).number_available
                                 For c = 1 To .route_vertex_cnt(a, b)
    
                                    vertex_to_swap = .route_vertices(i, j, k)
                                    .route_vertices(i, j, k) = .route_vertices(a, b, c)
                                    .route_vertices(a, b, c) = vertex_to_swap
                                    
                                    If instance.multi_trip = True Then
                                    
                                        Call EvaluateRouteMultiTrip(solution, i, j)
                                        Call EvaluateRouteMultiTrip(solution, a, b)
                                    Else
    
                                        Call EvaluateRouteSingleTrip(solution, i, j)
                                        Call EvaluateRouteSingleTrip(solution, a, b)
                                    
                                    End If
    
                                    If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                        
                                        max_net_profit = .net_profit
                                        min_total_distance = .total_distance
    
                                        vehicle_type_to_swap1 = i
                                        vehicle_id_to_swap1 = j
                                        position_to_swap1 = k
    
                                        vehicle_type_to_swap2 = a
                                        vehicle_id_to_swap2 = b
                                        position_to_swap2 = c
                                    End If
    
                                    vertex_to_swap = .route_vertices(i, j, k)
                                    .route_vertices(i, j, k) = .route_vertices(a, b, c)
                                    .route_vertices(a, b, c) = vertex_to_swap
                                    
                                    If instance.multi_trip = True Then
                                    
                                        Call EvaluateRouteMultiTrip(solution, i, j)
                                        Call EvaluateRouteMultiTrip(solution, a, b)
                                    Else
    
                                        Call EvaluateRouteSingleTrip(solution, i, j)
                                        Call EvaluateRouteSingleTrip(solution, a, b)
                                    
                                    End If
    
                                 Next c
                             Next b
                         Next a
    
                     Next k
                 Next j
             Next i
    
            'relocate

             vehicle_type_to_relocate1 = -1
             For i = 1 To vehicle_type_list.num_vehicle_types
                 For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                     For k = 1 To .route_vertex_cnt(i, j)

                         vertex = .route_vertices(i, j, k)
                         
                         Call RemoveVertex(solution, i, j, k)

                         For a = 1 To vehicle_type_list.num_vehicle_types
                             For b = 1 To vehicle_type_list.vehicle_types(a).number_available
                                 For c = 1 To .route_vertex_cnt(a, b) + 1
                                    
                                    Call AddVertex(solution, vertex, a, b, c)

                                    If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then

                                        max_net_profit = .net_profit
                                        min_total_distance = .total_distance

                                        vehicle_type_to_relocate1 = i
                                        vehicle_id_to_relocate1 = j
                                        position_to_relocate1 = k

                                        vehicle_type_to_relocate2 = a
                                        vehicle_id_to_relocate2 = b
                                        position_to_relocate2 = c

                                        vehicle_type_to_swap1 = -1
                                    End If

                                    Call RemoveVertex(solution, a, b, c)
                                    
                                 Next c
                             Next b
                         Next a
                         
                         Call AddVertex(solution, vertex, i, j, k)

                     Next k
                 Next j
             Next i
             
             '2-opt
        
             vehicle_type_for_2opt1 = -1
             
             'If (vehicle_type_to_swap1 = -1) And (vehicle_type_to_relocate1 = -1) And (vehicle_type_for_chain_reversal = -1) Then
    
                 For i = 1 To vehicle_type_list.num_vehicle_types
                     For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                        
                        For a = i To vehicle_type_list.num_vehicle_types
                        
                            If a = i Then
                               vehicle_id_start_index = j + 1
                            Else
                               vehicle_id_start_index = 1
                            End If
                            
                            For b = vehicle_id_start_index To vehicle_type_list.vehicle_types(a).number_available
                                
                                If (.route_vertex_cnt(i, j) > 2) And (.route_vertex_cnt(a, b) > 2) Then
                                    
                                    For k = 1 To .route_vertex_cnt(i, j) - 1
                                        For c = 1 To .route_vertex_cnt(a, b) - 1
        
                                             vertex_cnt_for_2opt1 = .route_vertex_cnt(i, j) - k
                                             vertex_cnt_for_2opt2 = .route_vertex_cnt(a, b) - c
        
                                             For vertex = k + 1 To .route_vertex_cnt(i, j)
                                                vertex_buffer(vertex) = .route_vertices(i, j, vertex)
                                             Next vertex
        
                                             For vertex = c + 1 To .route_vertex_cnt(a, b)
                                                .route_vertices(i, j, k + vertex - c) = .route_vertices(a, b, vertex)
                                             Next vertex
        
                                             For vertex = k + 1 To .route_vertex_cnt(i, j)
                                                .route_vertices(a, b, c + vertex - k) = vertex_buffer(vertex)
                                             Next vertex
        
                                             .route_vertex_cnt(i, j) = k + vertex_cnt_for_2opt2
                                             .route_vertex_cnt(a, b) = c + vertex_cnt_for_2opt1
                                             
                                             If instance.multi_trip = True Then
                                             
                                                Call EvaluateRouteMultiTrip(solution, i, j)
                                                Call EvaluateRouteMultiTrip(solution, a, b)
                                                
                                             Else
        
                                                Call EvaluateRouteSingleTrip(solution, i, j)
                                                Call EvaluateRouteSingleTrip(solution, a, b)
                                             
                                             End If
        
                                             If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                                 
                                                 max_net_profit = .net_profit
                                                 min_total_distance = .total_distance
        
                                                 vehicle_type_for_2opt1 = i
                                                 vehicle_id_for_2opt1 = j
                                                 position_for_2opt1 = k
        
                                                 vehicle_type_for_2opt2 = a
                                                 vehicle_id_for_2opt2 = b
                                                 position_for_2opt2 = c
        
                                                 reversal_for_2opt1 = 0
                                                 reversal_for_2opt2 = 0
        
                                                 vehicle_type_to_swap1 = -1
                                                 vehicle_type_to_relocate1 = -1
                                             End If
        
                                             'revert route i,j
        
                                             midpoint_for_chain_reversal = (.route_vertex_cnt(i, j) - (k + 1)) / 2
        
                                             For vertex = 0 To midpoint_for_chain_reversal
                                                vertex_to_swap = .route_vertices(i, j, k + 1 + vertex)
                                                .route_vertices(i, j, k + 1 + vertex) = .route_vertices(i, j, .route_vertex_cnt(i, j) - vertex)
                                                .route_vertices(i, j, .route_vertex_cnt(i, j) - vertex) = vertex_to_swap
                                             Next vertex
        
                                             If instance.multi_trip = True Then
                                             
                                                Call EvaluateRouteMultiTrip(solution, i, j)
                                                
                                             Else
                                             
                                                Call EvaluateRouteSingleTrip(solution, i, j)
                                                
                                             End If
        
                                             If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                                 
                                                 max_net_profit = .net_profit
                                                 min_total_distance = .total_distance
        
                                                 vehicle_type_for_2opt1 = i
                                                 vehicle_id_for_2opt1 = j
                                                 position_for_2opt1 = k
        
                                                 vehicle_type_for_2opt2 = a
                                                 vehicle_id_for_2opt2 = b
                                                 position_for_2opt2 = c
        
                                                 reversal_for_2opt1 = 1
                                                 reversal_for_2opt2 = 0
        
                                                 vehicle_type_to_swap1 = -1
                                                 vehicle_type_to_relocate1 = -1
                                             End If
        
                                             'revert route a,b
        
                                             midpoint_for_chain_reversal = (.route_vertex_cnt(a, b) - (c + 1)) / 2
        
                                             For vertex = 0 To midpoint_for_chain_reversal
                                                vertex_to_swap = .route_vertices(a, b, c + 1 + vertex)
                                                .route_vertices(a, b, c + 1 + vertex) = .route_vertices(a, b, .route_vertex_cnt(a, b) - vertex)
                                                .route_vertices(a, b, .route_vertex_cnt(a, b) - vertex) = vertex_to_swap
                                             Next vertex
        
                                             If instance.multi_trip = True Then
                                             
                                                Call EvaluateRouteMultiTrip(solution, a, b)
                                                
                                             Else
                                             
                                                Call EvaluateRouteSingleTrip(solution, a, b)
                                                
                                             End If
        
                                             If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                                 
                                                 max_net_profit = .net_profit
                                                 min_total_distance = .total_distance
        
                                                 vehicle_type_for_2opt1 = i
                                                 vehicle_id_for_2opt1 = j
                                                 position_for_2opt1 = k
        
                                                 vehicle_type_for_2opt2 = a
                                                 vehicle_id_for_2opt2 = b
                                                 position_for_2opt2 = c
        
                                                 reversal_for_2opt1 = 1
                                                 reversal_for_2opt2 = 1
        
                                                 vehicle_type_to_swap1 = -1
                                                 vehicle_type_to_relocate1 = -1
                                             End If
        
                                             'revert route i,j again
        
                                             midpoint_for_chain_reversal = (.route_vertex_cnt(i, j) - (k + 1)) / 2
        
                                             For vertex = 0 To midpoint_for_chain_reversal
                                                vertex_to_swap = .route_vertices(i, j, k + 1 + vertex)
                                                .route_vertices(i, j, k + 1 + vertex) = .route_vertices(i, j, .route_vertex_cnt(i, j) - vertex)
                                                .route_vertices(i, j, .route_vertex_cnt(i, j) - vertex) = vertex_to_swap
                                             Next vertex
        
                                             If instance.multi_trip = True Then
                                             
                                                Call EvaluateRouteMultiTrip(solution, i, j)
                                                
                                             Else
                                                
                                                Call EvaluateRouteSingleTrip(solution, i, j)
                                                
                                             End If
        
                                             If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                             
                                                 max_net_profit = .net_profit
                                                 min_total_distance = .total_distance
        
                                                 vehicle_type_for_2opt1 = i
                                                 vehicle_id_for_2opt1 = j
                                                 position_for_2opt1 = k
        
                                                 vehicle_type_for_2opt2 = a
                                                 vehicle_id_for_2opt2 = b
                                                 position_for_2opt2 = c
        
                                                 reversal_for_2opt1 = 0
                                                 reversal_for_2opt2 = 1
        
                                                 vehicle_type_to_swap1 = -1
                                                 vehicle_type_to_relocate1 = -1
                                             End If
        
                                             'revert route a,b again
        
                                             midpoint_for_chain_reversal = (.route_vertex_cnt(a, b) - (c + 1)) / 2
        
                                             For vertex = 0 To midpoint_for_chain_reversal
                                                vertex_to_swap = .route_vertices(a, b, c + 1 + vertex)
                                                .route_vertices(a, b, c + 1 + vertex) = .route_vertices(a, b, .route_vertex_cnt(a, b) - vertex)
                                                .route_vertices(a, b, .route_vertex_cnt(a, b) - vertex) = vertex_to_swap
                                             Next vertex
        
                                             'Call EvaluateRouteSingleTrip(solution, a, b)
        
                                             vertex_cnt_for_2opt1 = .route_vertex_cnt(i, j) - k
                                             vertex_cnt_for_2opt2 = .route_vertex_cnt(a, b) - c
        
                                             For vertex = k + 1 To .route_vertex_cnt(i, j)
                                                vertex_buffer(vertex) = .route_vertices(i, j, vertex)
                                             Next vertex
        
                                             For vertex = c + 1 To .route_vertex_cnt(a, b)
                                                .route_vertices(i, j, k + vertex - c) = .route_vertices(a, b, vertex)
                                             Next vertex
        
                                             For vertex = k + 1 To .route_vertex_cnt(i, j)
                                                .route_vertices(a, b, c + vertex - k) = vertex_buffer(vertex)
                                             Next vertex
        
                                             .route_vertex_cnt(i, j) = k + vertex_cnt_for_2opt2
                                             .route_vertex_cnt(a, b) = c + vertex_cnt_for_2opt1
        
                                             If instance.multi_trip = True Then
                                             
                                                Call EvaluateRouteMultiTrip(solution, i, j)
                                                Call EvaluateRouteMultiTrip(solution, a, b)
                                                
                                             Else
        
                                                Call EvaluateRouteSingleTrip(solution, i, j)
                                                Call EvaluateRouteSingleTrip(solution, a, b)
                                             
                                             End If
        
                                        Next c
                                    Next k
                                End If
                            Next b
                        Next a
                     Next j
                 Next i
             
             'End If

             'chain reversal (2-opt on a single route)
    
             vehicle_type_for_chain_reversal = -1
    
             For i = 1 To vehicle_type_list.num_vehicle_types
                 For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                     For k = 1 To .route_vertex_cnt(i, j) - 3
                         For c = k + 3 To .route_vertex_cnt(i, j)
    
                            midpoint_for_chain_reversal = (c - k) / 2
    
                            For vertex = 0 To midpoint_for_chain_reversal
                               vertex_to_swap = .route_vertices(i, j, k + vertex)
                               .route_vertices(i, j, k + vertex) = .route_vertices(i, j, c - vertex)
                               .route_vertices(i, j, c - vertex) = vertex_to_swap
                            Next vertex
    
                            If instance.multi_trip = True Then
                                             
                               Call EvaluateRouteMultiTrip(solution, i, j)
                               
                            Else
                               
                               Call EvaluateRouteSingleTrip(solution, i, j)
                               
                            End If
    
                            If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                
                                max_net_profit = .net_profit
                                min_total_distance = .total_distance
    
                                vehicle_type_for_chain_reversal = i
                                vehicle_id_for_chain_reversal = j
                                position_for_chain_reversal1 = k
                                position_for_chain_reversal2 = c
    
                                vehicle_type_to_swap1 = -1
                                vehicle_type_to_relocate1 = -1
                                vehicle_type_for_2opt1 = -1
                            End If
    
                            For vertex = 0 To midpoint_for_chain_reversal
                               vertex_to_swap = .route_vertices(i, j, k + vertex)
                               .route_vertices(i, j, k + vertex) = .route_vertices(i, j, c - vertex)
                               .route_vertices(i, j, c - vertex) = vertex_to_swap
                            Next vertex
    
                            If instance.multi_trip = True Then
                                             
                               Call EvaluateRouteMultiTrip(solution, i, j)
                               
                            Else
                               
                               Call EvaluateRouteSingleTrip(solution, i, j)
                               
                            End If
    
                        Next c
                     Next k
                 Next j
             Next i
                          
             'full swap - exchanging all customers on two vehicles of different types
    
             vehicle_type_for_full_swap1 = -1
    
             If vehicle_type_list.num_vehicle_types > 1 Then
             
                 For i = 1 To vehicle_type_list.num_vehicle_types
                     For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                         For a = i + 1 To vehicle_type_list.num_vehicle_types
                             For b = 1 To vehicle_type_list.vehicle_types(a).number_available
                                  
                                  max_vertex_cnt = .route_vertex_cnt(i, j)
                                  
                                  If max_vertex_cnt < .route_vertex_cnt(a, b) Then
                                        max_vertex_cnt = .route_vertex_cnt(a, b)
                                  End If
                                  
                                  For k = 1 To max_vertex_cnt
                                        vertex_to_swap = .route_vertices(i, j, k)
                                        .route_vertices(i, j, k) = .route_vertices(a, b, k)
                                        .route_vertices(a, b, k) = vertex_to_swap
                                  Next k
                                  
                                  vertex_cnt_to_swap = .route_vertex_cnt(i, j)
                                  .route_vertex_cnt(i, j) = .route_vertex_cnt(a, b)
                                  .route_vertex_cnt(a, b) = vertex_cnt_to_swap
                                  
                                  If instance.multi_trip = True Then
                                             
                                       Call EvaluateRouteMultiTrip(solution, i, j)
                                       Call EvaluateRouteMultiTrip(solution, a, b)
                                      
                                  Else
    
                                       Call EvaluateRouteSingleTrip(solution, i, j)
                                       Call EvaluateRouteSingleTrip(solution, a, b)
                                  
                                  End If
                                  
                                  If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                
                                        max_net_profit = .net_profit
                                        min_total_distance = .total_distance
            
                                        vehicle_type_for_full_swap1 = i
                                        vehicle_id_for_full_swap1 = j
                                        vehicle_type_for_full_swap2 = a
                                        vehicle_id_for_full_swap2 = b
            
                                        vehicle_type_to_swap1 = -1
                                        vehicle_type_to_relocate1 = -1
                                        vehicle_type_for_2opt1 = -1
                                        vehicle_type_for_chain_reversal = -1
                                  End If
                                  
                                  For k = 1 To max_vertex_cnt
                                        vertex_to_swap = .route_vertices(i, j, k)
                                        .route_vertices(i, j, k) = .route_vertices(a, b, k)
                                        .route_vertices(a, b, k) = vertex_to_swap
                                  Next k
                                  
                                  vertex_cnt_to_swap = .route_vertex_cnt(i, j)
                                  .route_vertex_cnt(i, j) = .route_vertex_cnt(a, b)
                                  .route_vertex_cnt(a, b) = vertex_cnt_to_swap
                                  
                                  If instance.multi_trip = True Then
                                             
                                       Call EvaluateRouteMultiTrip(solution, i, j)
                                       Call EvaluateRouteMultiTrip(solution, a, b)
                                      
                                  Else
    
                                       Call EvaluateRouteSingleTrip(solution, i, j)
                                       Call EvaluateRouteSingleTrip(solution, a, b)
                                  
                                  End If
                                  
                             Next b
                         Next a
                     Next j
                 Next i
             End If
             
             If vehicle_type_to_swap1 <> -1 Then
    
                 vertex_to_swap = .route_vertices(vehicle_type_to_swap1, vehicle_id_to_swap1, position_to_swap1)
                 .route_vertices(vehicle_type_to_swap1, vehicle_id_to_swap1, position_to_swap1) = .route_vertices(vehicle_type_to_swap2, vehicle_id_to_swap2, position_to_swap2)
                 .route_vertices(vehicle_type_to_swap2, vehicle_id_to_swap2, position_to_swap2) = vertex_to_swap
    
                 If instance.multi_trip = True Then
                    
                    Call EvaluateRouteMultiTrip(solution, vehicle_type_to_swap1, vehicle_id_to_swap1)
                    Call EvaluateRouteMultiTrip(solution, vehicle_type_to_swap2, vehicle_id_to_swap2)
                 
                 Else
                 
                    Call EvaluateRouteSingleTrip(solution, vehicle_type_to_swap1, vehicle_id_to_swap1)
                    Call EvaluateRouteSingleTrip(solution, vehicle_type_to_swap2, vehicle_id_to_swap2)
                 
                 End If
                 'MsgBox "After swapping: " & solution.net_profit & " " & improvement_iterations 'solution.feasible
             End If
    
             If vehicle_type_to_relocate1 <> -1 Then
                 vertex = .route_vertices(vehicle_type_to_relocate1, vehicle_id_to_relocate1, position_to_relocate1)
    
                 Call RemoveVertex(solution, vehicle_type_to_relocate1, vehicle_id_to_relocate1, position_to_relocate1)
                 Call AddVertex(solution, vertex, vehicle_type_to_relocate2, vehicle_id_to_relocate2, position_to_relocate2)
                 
                 'MsgBox "After relocating: " & solution.net_profit & " " & improvement_iterations 'solution.feasible
             End If
             
             If vehicle_type_for_2opt1 <> -1 Then
    
                vertex_cnt_for_2opt1 = .route_vertex_cnt(vehicle_type_for_2opt1, vehicle_id_for_2opt1) - position_for_2opt1
                vertex_cnt_for_2opt2 = .route_vertex_cnt(vehicle_type_for_2opt2, vehicle_id_for_2opt2) - position_for_2opt2
    
                For vertex = position_for_2opt1 + 1 To .route_vertex_cnt(vehicle_type_for_2opt1, vehicle_id_for_2opt1)
                   vertex_buffer(vertex) = .route_vertices(vehicle_type_for_2opt1, vehicle_id_for_2opt1, vertex)
                Next vertex
    
                For vertex = position_for_2opt2 + 1 To .route_vertex_cnt(vehicle_type_for_2opt2, vehicle_id_for_2opt2)
                   .route_vertices(vehicle_type_for_2opt1, vehicle_id_for_2opt1, position_for_2opt1 + vertex - position_for_2opt2) = .route_vertices(vehicle_type_for_2opt2, vehicle_id_for_2opt2, vertex)
                Next vertex
    
                For vertex = position_for_2opt1 + 1 To .route_vertex_cnt(vehicle_type_for_2opt1, vehicle_id_for_2opt1)
                   .route_vertices(vehicle_type_for_2opt2, vehicle_id_for_2opt2, position_for_2opt2 + vertex - position_for_2opt1) = vertex_buffer(vertex)
                Next vertex
    
                .route_vertex_cnt(vehicle_type_for_2opt1, vehicle_id_for_2opt1) = position_for_2opt1 + vertex_cnt_for_2opt2
                .route_vertex_cnt(vehicle_type_for_2opt2, vehicle_id_for_2opt2) = position_for_2opt2 + vertex_cnt_for_2opt1
    
                If reversal_for_2opt1 = 1 Then
    
                    i = vehicle_type_for_2opt1
                    j = vehicle_id_for_2opt1
                    k = position_for_2opt1
    
                    midpoint_for_chain_reversal = (.route_vertex_cnt(i, j) - (k + 1)) / 2
    
                    For vertex = 0 To midpoint_for_chain_reversal
                       vertex_to_swap = .route_vertices(i, j, k + 1 + vertex)
                       .route_vertices(i, j, k + 1 + vertex) = .route_vertices(i, j, .route_vertex_cnt(i, j) - vertex)
                       .route_vertices(i, j, .route_vertex_cnt(i, j) - vertex) = vertex_to_swap
                    Next vertex
                End If
    
                If reversal_for_2opt2 = 1 Then
    
                    a = vehicle_type_for_2opt2
                    b = vehicle_id_for_2opt2
                    c = position_for_2opt2
    
                    midpoint_for_chain_reversal = (.route_vertex_cnt(a, b) - (c + 1)) / 2
    
                    For vertex = 0 To midpoint_for_chain_reversal
                       vertex_to_swap = .route_vertices(a, b, c + 1 + vertex)
                       .route_vertices(a, b, c + 1 + vertex) = .route_vertices(a, b, .route_vertex_cnt(a, b) - vertex)
                       .route_vertices(a, b, .route_vertex_cnt(a, b) - vertex) = vertex_to_swap
                    Next vertex
                End If
    
                If instance.multi_trip = True Then
                    
                    Call EvaluateRouteMultiTrip(solution, vehicle_type_for_2opt1, vehicle_id_for_2opt1)
                    Call EvaluateRouteMultiTrip(solution, vehicle_type_for_2opt2, vehicle_id_for_2opt2)
                
                Else
                
                    Call EvaluateRouteSingleTrip(solution, vehicle_type_for_2opt1, vehicle_id_for_2opt1)
                    Call EvaluateRouteSingleTrip(solution, vehicle_type_for_2opt2, vehicle_id_for_2opt2)
    
                End If
                
                 'MsgBox "2-opt with reversals: " & reversal_for_2opt1 & " " & reversal_for_2opt2
                 'MsgBox "After 2-opt: " & solution.net_profit & " " & improvement_iterations 'solution.feasible
             End If
    
             If vehicle_type_for_chain_reversal <> -1 Then
    
                midpoint_for_chain_reversal = (position_for_chain_reversal2 - position_for_chain_reversal1) / 2
    
                For vertex = 0 To midpoint_for_chain_reversal
                   vertex_to_swap = .route_vertices(vehicle_type_for_chain_reversal, vehicle_id_for_chain_reversal, position_for_chain_reversal1 + vertex)
                   .route_vertices(vehicle_type_for_chain_reversal, vehicle_id_for_chain_reversal, position_for_chain_reversal1 + vertex) = .route_vertices(vehicle_type_for_chain_reversal, vehicle_id_for_chain_reversal, position_for_chain_reversal2 - vertex)
                   .route_vertices(vehicle_type_for_chain_reversal, vehicle_id_for_chain_reversal, position_for_chain_reversal2 - vertex) = vertex_to_swap
                Next vertex
    
                If instance.multi_trip = True Then
                
                    Call EvaluateRouteMultiTrip(solution, vehicle_type_for_chain_reversal, vehicle_id_for_chain_reversal)
                    
                Else
                
                    Call EvaluateRouteSingleTrip(solution, vehicle_type_for_chain_reversal, vehicle_id_for_chain_reversal)
                
                End If
    
                'MsgBox "After chain reversal: " & solution.net_profit & " " & improvement_iterations 'solution.feasible
             End If
             
             If vehicle_type_for_full_swap1 <> -1 Then
    
                max_vertex_cnt = .route_vertex_cnt(vehicle_type_for_full_swap1, vehicle_id_for_full_swap1)
                                  
                If max_vertex_cnt < .route_vertex_cnt(vehicle_type_for_full_swap2, vehicle_id_for_full_swap2) Then
                      max_vertex_cnt = .route_vertex_cnt(vehicle_type_for_full_swap2, vehicle_id_for_full_swap2)
                End If
                
                For vertex = 1 To max_vertex_cnt
                      vertex_to_swap = .route_vertices(vehicle_type_for_full_swap1, vehicle_id_for_full_swap1, vertex)
                      .route_vertices(vehicle_type_for_full_swap1, vehicle_id_for_full_swap1, vertex) = .route_vertices(vehicle_type_for_full_swap2, vehicle_id_for_full_swap2, vertex)
                      .route_vertices(vehicle_type_for_full_swap2, vehicle_id_for_full_swap2, vertex) = vertex_to_swap
                Next vertex
                
                vertex_cnt_to_swap = .route_vertex_cnt(vehicle_type_for_full_swap1, vehicle_id_for_full_swap1)
                .route_vertex_cnt(vehicle_type_for_full_swap1, vehicle_id_for_full_swap1) = .route_vertex_cnt(vehicle_type_for_full_swap2, vehicle_id_for_full_swap2)
                .route_vertex_cnt(vehicle_type_for_full_swap2, vehicle_id_for_full_swap2) = vertex_cnt_to_swap
                
                If instance.multi_trip = True Then
                
                    Call EvaluateRouteMultiTrip(solution, vehicle_type_for_full_swap1, vehicle_id_for_full_swap1)
                    Call EvaluateRouteMultiTrip(solution, vehicle_type_for_full_swap2, vehicle_id_for_full_swap2)
                
                Else
                
                    Call EvaluateRouteSingleTrip(solution, vehicle_type_for_full_swap1, vehicle_id_for_full_swap1)
                    Call EvaluateRouteSingleTrip(solution, vehicle_type_for_full_swap2, vehicle_id_for_full_swap2)
    
                End If
                'MsgBox "After full swap: " & solution.net_profit & " " & solution.feasible
             End If
    
        End With
        
        improvement_iterations = improvement_iterations + 1

    Loop While ((vehicle_type_to_swap1 <> -1) Or (vehicle_type_to_relocate1 <> -1) Or (vehicle_type_for_2opt1 <> -1) Or (vehicle_type_for_chain_reversal <> -1) Or (vehicle_type_for_full_swap1 <> -1)) And (improvement_iterations <= max_improvement_iterations)

    Call EvaluateSolution(solution)

End Sub

#If Mac Then

    Sub external_vrp_solver()
        MsgBox ("This feature is not available for Macs. Sorry for the inconvenience.")
    End Sub

#Else

    Sub external_vrp_solver()

        Dim WorksheetExists As Boolean
        Dim reply As Integer
        Dim i As Long
        Dim j As Long
        Dim k As Long
        Dim l As Long
        
        Dim start_index As Long
        Dim end_index As Long

        Application.DefaultFilePath = CStr(Application.ActiveWorkbook.Path)
        If Dir("vrp_spreadsheet_solver.dll") = "" Then
            reply = MsgBox("External solver (vrp_spreadsheet_solver.dll) not found. Do you want to continue with the internal solver?", vbYesNo, "VRP Solver")
            If reply = vbNo Then
                Exit Sub
            Else
                Call VRP_Solver
            End If
        Else
            WorksheetExists = CheckWorksheetExistence("1.Locations") And CheckWorksheetExistence("2.Distances") And CheckWorksheetExistence("3.Vehicles") And CheckWorksheetExistence("4.Solution")
            If WorksheetExists = False Then
                reply = MsgBox("Worksheets 1.Locations, 2.Distances, 3.Vehicles, and 4.Solution must exist for the external solver to function.", vbOKOnly, "VRP Spreadsheet Solver")
                Exit Sub
            Else
                reply = MsgBox("This will take " & ThisWorkbook.Worksheets("VRP Solver Console").Cells(23, 3).value & " seconds. Please save your file to avoid data loss. Do you want to continue?", vbYesNo, "VRP Spreadsheet Solver")
                If reply = vbNo Then
                    Exit Sub
                End If
            End If

            'prepare the data for the solver

            'problem parameters and size

            Call GetInstanceData
            Call GetVertexData
            Call GetArcData
            Call GetVehicleTypeData
            Call GetSolverOptions

            'location data

            Dim time_window_start() As Long
            ReDim time_window_start(0 To instance.num_locations - 1)

            Dim time_window_end() As Long
            ReDim time_window_end(0 To instance.num_locations - 1)

            Dim mandatory() As Long
            ReDim mandatory(0 To instance.num_locations - 1)

            Dim service_time() As Long
            ReDim service_time(0 To instance.num_locations - 1)

            Dim pickup_amount() As Double
            ReDim pickup_amount(0 To instance.num_locations - 1)

            Dim delivery_amount() As Double
            ReDim delivery_amount(0 To instance.num_locations - 1)

            Dim profit() As Double
            ReDim profit(0 To instance.num_locations - 1)

            ThisWorkbook.Worksheets("1.Locations").Activate

            For i = 1 To instance.num_locations
                time_window_start(i - 1) = Cells(1 + i, 6).value * 1440
                time_window_end(i - 1) = Cells(1 + i, 7).value * 1440

                If Cells(1 + i, 8).value = "Must be visited" Then
                    mandatory(i - 1) = 1
                ElseIf Cells(1 + i, 8).value = "Don't visit" Then
                    mandatory(i - 1) = -1
                Else
                    mandatory(i - 1) = 0
                End If

                service_time(i - 1) = Cells(1 + i, 9).value * 1440
                pickup_amount(i - 1) = Cells(1 + i, 10).value
                delivery_amount(i - 1) = Cells(1 + i, 11).value
                profit(i - 1) = Cells(1 + i, 12).value
            Next i

            'distance and duration data

            Dim distance() As Double
            ReDim distance(0 To (instance.num_locations * instance.num_locations) - 1)

            Dim duration() As Long
            ReDim duration(0 To (instance.num_locations * instance.num_locations) - 1)

            Dim from_location() As Long
            ReDim from_location(0 To (instance.num_locations * instance.num_locations) - 1)

            Dim to_location() As Long
            ReDim to_location(0 To (instance.num_locations * instance.num_locations) - 1)

            ThisWorkbook.Worksheets("2.Distances").Activate

            k = 0
            For i = 1 To instance.num_locations
                For j = 1 To instance.num_locations

                    distance(k) = Cells(k + 2, 3).value
                    duration(k) = Cells(k + 2, 4).value * 1440

                    from_location(k) = i - 1
                    to_location(k) = j - 1

                    k = k + 1
                Next j
            Next i

            'vehicle data

            Dim capacity() As Double
            ReDim capacity(0 To (instance.num_depots * instance.num_vehicle_types) - 1)

            Dim fixed_cost() As Double
            ReDim fixed_cost(0 To (instance.num_depots * instance.num_vehicle_types) - 1)

            Dim variable_cost() As Double
            ReDim variable_cost(0 To (instance.num_depots * instance.num_vehicle_types) - 1)
            
            Dim duration_multiplier() As Double
            ReDim duration_multiplier(0 To (instance.num_depots * instance.num_vehicle_types) - 1)

            Dim distance_limit() As Double
            ReDim distance_limit(0 To (instance.num_depots * instance.num_vehicle_types) - 1)

            Dim work_start_time() As Long
            ReDim work_start_time(0 To (instance.num_depots * instance.num_vehicle_types) - 1)

            Dim driving_time_limit() As Long
            ReDim driving_time_limit(0 To (instance.num_depots * instance.num_vehicle_types) - 1)

            Dim working_time_limit() As Long
            ReDim working_time_limit(0 To (instance.num_depots * instance.num_vehicle_types) - 1)

            Dim number_available() As Long
            ReDim number_available(0 To (instance.num_depots * instance.num_vehicle_types) - 1)

            ThisWorkbook.Worksheets("3.Vehicles").Activate

            k = 0
            For i = 1 To instance.num_depots
                For j = 1 To instance.num_vehicle_types

                    capacity(k) = Cells(2 + k, 3).value
                    fixed_cost(k) = Cells(2 + k, 4).value
                    variable_cost(k) = Cells(2 + k, 5).value
                    duration_multiplier(k) = Cells(2 + k, 6).value
                    distance_limit(k) = Cells(2 + k, 7).value
                    work_start_time(k) = Cells(2 + k, 8).value * 1440
                    driving_time_limit(k) = Cells(2 + k, 9).value * 1440
                    working_time_limit(k) = Cells(2 + k, 10).value * 1440
                    number_available(k) = Cells(2 + k, 13).value

                    k = k + 1
                Next j
            Next i

            'solution

            Dim vertex_index() As Long
            ReDim vertex_index(0 To instance.num_customers - 1)

            Dim origin_depot() As Long
            ReDim origin_depot(0 To instance.num_customers - 1)

            Dim return_depot() As Long
            ReDim return_depot(0 To instance.num_customers - 1)

            Dim depot_return_flag() As Long
            ReDim depot_return_flag(0 To instance.num_customers - 1)

            Dim vehicle_type() As Long
            ReDim vehicle_type(0 To instance.num_customers - 1)

            Dim vehicle_index() As Long
            ReDim vehicle_index(0 To instance.num_customers - 1)

            Dim best_known As solution_data
            Call InitializeSolution(best_known)

            If solver_options.warm_start = True Then
                Call ReadSolution(best_known)

                'write the solution into the arrays

                l = 0
                For i = 1 To vehicle_type_list.num_vehicle_types
                    For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                        
                        If instance.multi_trip = True Then
                            Call EvaluateRouteMultiTrip(best_known, i, j)
                            start_index = 1
                            end_index = DP_list.control(start_index)
                        End If
                        
                        For k = 1 To best_known.route_vertex_cnt(i, j)
                            vertex_index(l) = best_known.route_vertices(i, j, k) - 1
                            origin_depot(l) = vehicle_type_list.vehicle_types(i).origin_base_id - 1
                            return_depot(l) = vehicle_type_list.vehicle_types(i).return_base_id - 1
                            
                            If instance.multi_trip = False Then
                                If k = best_known.route_vertex_cnt(i, j) And instance.open_vrp = False Then
                                    depot_return_flag(l) = 1
                                Else
                                    depot_return_flag(l) = 0
                                End If
                            Else
                                If k = end_index Then
                                    depot_return_flag(l) = 1
                                    start_index = end_index + 1
                                    end_index = DP_list.control(start_index)
                                Else
                                    depot_return_flag(l) = 0
                                End If
                            End If
                            
                            vehicle_type(l) = vehicle_type_list.vehicle_types(i).type_id - 1
                            vehicle_index(l) = j - 1
                            l = l + 1
                        Next k
                        
                    Next j
                Next i

            End If

            Dim temp As Double
            temp = vrp_spreadsheet_solver(instance, solver_options, _
                time_window_start(0), time_window_end(0), mandatory(0), service_time(0), pickup_amount(0), delivery_amount(0), profit(0), _
                distance(0), duration(0), from_location(0), to_location(0), _
                capacity(0), fixed_cost(0), variable_cost(0), duration_multiplier(0), distance_limit(0), work_start_time(0), _
                driving_time_limit(0), working_time_limit(0), number_available(0), _
                vertex_index(0), origin_depot(0), return_depot(0), depot_return_flag(0), vehicle_type(0), vehicle_index(0))

            'read the result

            Call InitializeSolution(best_known)

            For i = 0 To instance.num_customers - 1
                If (vertex_index(i) >= instance.num_depots) And (vertex_index(i) < instance.num_locations) Then
                    Call AddVertex(best_known, vertex_index(i) + 1, (origin_depot(i) * instance.num_vehicle_types) + vehicle_type(i) + 1, vehicle_index(i) + 1, best_known.route_vertex_cnt((origin_depot(i) * instance.num_vehicle_types) + vehicle_type(i) + 1, vehicle_index(i) + 1) + 1)
                End If
            Next i

            Call EvaluateSolution(best_known)

            reply = MsgBox("External solver returned a solution. Do you want to overwrite the current solution with the best found solution?", vbYesNo, "VRP Spreadsheet Solver")
            If reply = vbYes Then
                Call WriteSolution(best_known)
            End If

            Erase time_window_start
            Erase time_window_end
            Erase mandatory
            Erase service_time
            Erase pickup_amount
            Erase delivery_amount
            Erase profit
            Erase distance
            Erase duration
            Erase from_location
            Erase to_location
            Erase capacity
            Erase fixed_cost
            Erase variable_cost
            Erase duration_multiplier
            Erase distance_limit
            Erase work_start_time
            Erase driving_time_limit
            Erase working_time_limit
            Erase number_available
            Erase vertex_index
            Erase origin_depot
            Erase vehicle_type
            Erase vehicle_index

        End If

    End Sub

#End If


' ribbon calls
#If Win32 Or Win64 Or (MAC_OFFICE_VERSION >= 15) Then
    
Sub VRP_Solver_ribbon_call(control As IRibbonControl)
    Call VRP_Solver
End Sub
Sub external_vrp_solver_ribbon_call(control As IRibbonControl)
    Call external_vrp_solver
End Sub
Sub FeasibilityCheckDataAndSolutionRibbonCall(control As IRibbonControl)
    Call FeasibilityCheckDataAndSolution
End Sub

#End If
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/.

Option Explicit

Private Const VRP_TAG = "VRPSolverXla"
Private Const VRP_TOOLS_MENU_ID As Long = 30007&

Friend Sub Workbook_Open()
    
    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("VRP Solver Console")
    
    If WorksheetExists = False Then
        Call SetupConsoleWorksheet
    End If
    
    ThisWorkbook.Worksheets("VRP Solver Console").Columns.AutoFit
    
    'ThisWorkbook.Worksheets("VRP Solver Console").Activate
    
    Application.DefaultFilePath = CStr(Application.ActiveWorkbook.Path)
    
    'From http://www.cpearson.com/excel/createaddinsamplecode.aspx
    
    #If Mac And (MAC_OFFICE_VERSION < 15) Then
        
        DeleteControls
                                         
        Dim ToolsMenu As Office.CommandBarControl
        Dim ToolsMenuItem As Office.CommandBarControl
        Dim ToolsMenuControl As Office.CommandBarControl
        
        Set ToolsMenu = Application.CommandBars.FindControl(ID:=VRP_TOOLS_MENU_ID)
        If ToolsMenu Is Nothing Then
            MsgBox "Unable to access Tools menu.", vbOKOnly
            Exit Sub
        End If
        
        Set ToolsMenuItem = ToolsMenu.Controls.Add(Type:=msoControlPopup, temporary:=True)
        If ToolsMenuItem Is Nothing Then
            MsgBox "Unable to add item to the Tools menu.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuItem
            .Caption = "&VRP Spreadsheet Solver"
            .BeginGroup = True
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "0. Optional - Reset the workbook"
            .OnAction = "'" & ActiveWorkbook.Name & "'!ResetWorkbook"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "1.1 Setup Locations Worksheet"
            .OnAction = "'" & ActiveWorkbook.Name & "'!SetupLocationsWorksheet"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "1.2 Optional - Populate Lat/Lon using addresses"
            .OnAction = "'" & ActiveWorkbook.Name & "'!PopulateLatitudeAndLongitude"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "1.3 Optional - Sort locations alphabetically"
            .OnAction = "'" & ActiveWorkbook.Name & "'!SortLocations"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "2.1 Setup Distances Worksheet"
            .OnAction = "'" & ActiveWorkbook.Name & "'!SetupDistancesWorksheet"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "2.2 Optional - Populate Distances Worksheet"
            .OnAction = "'" & ActiveWorkbook.Name & "'!PopulateDistances"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "3. Setup Vehicles Worksheet"
            .OnAction = "'" & ActiveWorkbook.Name & "'!SetupVehiclesWorksheet"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "4. Setup Solution Worksheet"
            .OnAction = "'" & ActiveWorkbook.Name & "'!SetupSolutionWorksheet"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "5. Optional - Setup Visualization Worksheet"
            .OnAction = "'" & ActiveWorkbook.Name & "'!SetupVisualizationWorksheet"
            .Tag = VRP_TAG
        End With
           
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "6.1 Engage VRP Spreadsheet Solver"
            .OnAction = "'" & ActiveWorkbook.Name & "'!VRP_Solver"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "6.2 Optional - Feasibility check"
            .OnAction = "'" & ActiveWorkbook.Name & "'!FeasibilityCheckDataAndSolution"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "6.3 Optional - Engage external solver"
            .OnAction = "'" & ActiveWorkbook.Name & "'!external_vrp_solver"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "Watch the tutorial video on YouTube"
            .OnAction = "'" & ActiveWorkbook.Name & "'!WatchTutorial"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "Send feedback / ask a question"
            .OnAction = "'" & ActiveWorkbook.Name & "'!SendFeedback"
            .Tag = VRP_TAG
        End With
        
        Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
        If ToolsMenuControl Is Nothing Then
            MsgBox "Unable to add item to Tools menu item.", vbOKOnly
            Exit Sub
        End If
        
        With ToolsMenuControl
            .Caption = "About"
            .OnAction = "'" & ActiveWorkbook.Name & "'!About"
            .Tag = VRP_TAG
        End With
    #End If
    
    Application.StatusBar = False
End Sub
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    
    #If Mac And (MAC_OFFICE_VERSION < 15) Then
        Call DeleteControls
    #End If
    
    Application.StatusBar = False
End Sub

#If Mac And (MAC_OFFICE_VERSION < 15) Then
        
Private Sub DeleteControls()

Dim Ctrl As Office.CommandBarControl

On Error Resume Next
Set Ctrl = Application.CommandBars.FindControl(Tag:=VRP_TAG)

Do Until Ctrl Is Nothing
    Ctrl.Delete
    Set Ctrl = Application.CommandBars.FindControl(Tag:=VRP_TAG)
Loop

End Sub

Private Sub Workbook_Close()
    DeleteControls
End Sub

#End If


Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    
    Dim reply As Integer
    Dim num_locations As Long
    Dim num_depots As Long
    Dim num_vehicle_types As Long
    
    If Sh.Name = "VRP Solver Console" Then
        
        If Not Intersect(Target, Sh.Range("C4:C5")) Is Nothing Then
            If CheckWorksheetExistence("1.Locations") Or CheckWorksheetExistence("2.Distances") Or CheckWorksheetExistence("3.Vehicles") Or CheckWorksheetExistence("4.Solution") Or CheckWorksheetExistence("5.Visualization") Then
                reply = MsgBox("Warning! You are changing the problem size parameters, which will not be reflected on the existing worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
        
        If Not Intersect(Target, Sh.Range("C7:C10")) Is Nothing Then
            If CheckWorksheetExistence("2.Distances") Then
                reply = MsgBox("Warning! You are changing the distance computation parameters, which will not be reflected on the existing distances and durations until you populate them again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
        
        If Not Intersect(Target, Sh.Range("C12")) Is Nothing Then
            If CheckWorksheetExistence("3.Vehicles") Or CheckWorksheetExistence("4.Solution") Or CheckWorksheetExistence("5.Visualization") Then
                reply = MsgBox("Warning! You are changing the number of vehicle types, which will not be reflected on the existing vehicles, solution, or visualization worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
        
        If Not Intersect(Target, Sh.Range("C14:C16")) Is Nothing Then
            If CheckWorksheetExistence("4.Solution") Then
                reply = MsgBox("Warning! You are changing the parameters regarding the constraints for the solution, which will not be reflected on the existing solution worksheet until you set it up again. The current solution may have become infeasible.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
        
        If Not Intersect(Target, Sh.Range("C18:C19")) Is Nothing Then
            If CheckWorksheetExistence("5.Visualization") Then
                reply = MsgBox("Warning! You are changing the parameters regarding the visualization worksheet, which will not be reflected on the visualization worksheet until you set it up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
        
        If Not Intersect(Target, Sh.Range("C14")) Is Nothing Then
            If CheckWorksheetExistence("3.Vehicles") Then
                If Cells(14, 3) = "No" Then
                    ThisWorkbook.Worksheets("3.Vehicles").Columns("K").EntireColumn.Hidden = True
                Else
                    ThisWorkbook.Worksheets("3.Vehicles").Columns("K").EntireColumn.Hidden = False
                End If
            End If
        End If
    
    End If
    
    If Sh.Name = "1.Locations" Then
        
        num_locations = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).value + ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).value
        
        If Not Intersect(Target, Sh.Range(Cells(1, 1).address & ":" & Cells(1 + num_locations, 3).address)) Is Nothing Then
            If CheckWorksheetExistence("2.Distances") Or CheckWorksheetExistence("3.Vehicles") Or CheckWorksheetExistence("4.Solution") Or CheckWorksheetExistence("5.Visualization") Then
                reply = MsgBox("Warning! You are changing the location data, which may render the current solution infeasible or suboptimal, and will not be reflected on the rest of the existing worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
        
        If Not Intersect(Target, Sh.Range(Cells(1, 4).address & ":" & Cells(1 + num_locations, 12).address)) Is Nothing Then
            If CheckWorksheetExistence("4.Solution") Then
                ThisWorkbook.Worksheets("4.Solution").Cells(2, 1) = "Warning: The data has changed since the last solver run / feasibility check."
                ThisWorkbook.Worksheets("4.Solution").Range(Cells(2, 1).address & ":" & Cells(2, 12).address).Interior.ColorIndex = 45
            End If
        End If
    
    End If
    
    If Sh.Name = "2.Distances" Then
        
        num_locations = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).value + ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).value
        
        If Not Intersect(Target, Sh.Range(Cells(1, 1).address & ":" & Cells(1 + num_locations * num_locations, 2).address)) Is Nothing Then
            If CheckWorksheetExistence("4.Solution") Or CheckWorksheetExistence("5.Visualization") Then
                reply = MsgBox("Warning! You are changing the distance data, which will not be reflected on the rest of the existing worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
        
        If Not Intersect(Target, Sh.Range(Cells(1, 3).address & ":" & Cells(1 + num_locations * num_locations, 3).address)) Is Nothing Then
            If CheckWorksheetExistence("4.Solution") Then
                ThisWorkbook.Worksheets("4.Solution").Cells(2, 1) = "Warning: The data has changed since the last solver run / feasibility check."
                ThisWorkbook.Worksheets("4.Solution").Range(Cells(2, 1).address & ":" & Cells(2, 12).address).Interior.ColorIndex = 45
            End If
        End If
    
    End If
    
    If Sh.Name = "3.Vehicles" Then
        
        num_depots = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).value
        num_vehicle_types = ThisWorkbook.Worksheets("VRP Solver Console").Cells(12, 3).value
        
        If Not Intersect(Target, Sh.Range(Cells(1, 1).address & ":" & Cells(1 + num_depots * num_vehicle_types, 2).address)) Is Nothing Then
            If CheckWorksheetExistence("4.Solution") Or CheckWorksheetExistence("5.Visualization") Then
                reply = MsgBox("Warning! You are changing the vehicle data, which will not be reflected on the rest of the existing worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
        
        If Not Intersect(Target, Sh.Range(Cells(1, 3).address & ":" & Cells(1 + num_depots * num_vehicle_types, 12).address)) Is Nothing Then
            If CheckWorksheetExistence("4.Solution") Then
                ThisWorkbook.Worksheets("4.Solution").Cells(2, 1) = "Warning: The data has changed since the last solver run / feasibility check."
                ThisWorkbook.Worksheets("4.Solution").Range(Cells(2, 1).address & ":" & Cells(2, 12).address).Interior.ColorIndex = 45
            End If
        End If
        
        If Not Intersect(Target, Sh.Range(Cells(1 + num_depots * num_vehicle_types, 13).address & ":" & Cells(1 + num_depots * num_vehicle_types, 13).address)) Is Nothing Then
            If CheckWorksheetExistence("4.Solution") Or CheckWorksheetExistence("5.Visualization") Then
                reply = MsgBox("Warning! You are changing the fleet size, which will not be reflected on the rest of the existing worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If
    
    End If
    
    If Sh.Name = "4.Solution" Then
        If Not Intersect(Target, Sh.Range(Cells(2, 1).address & ":" & Cells(2, 1).address)) Is Nothing Then
            If CheckWorksheetExistence("5.Visualization") Then
                If ThisWorkbook.Worksheets("4.Solution").Cells(2, 1) <> "" Then
                    ThisWorkbook.Worksheets("5.Visualization").ChartObjects(1).Chart.PlotArea.Format.Line.Visible = msoTrue
                    ThisWorkbook.Worksheets("5.Visualization").ChartObjects(1).Chart.PlotArea.Format.Line.ForeColor.RGB = RGB(255, 192, 0)
                    ThisWorkbook.Worksheets("5.Visualization").ChartObjects(1).Chart.PlotArea.Format.Line.Weight = 3
                Else
                    ThisWorkbook.Worksheets("5.Visualization").ChartObjects(1).Chart.PlotArea.Format.Line.Visible = msoTrue
                    ThisWorkbook.Worksheets("5.Visualization").ChartObjects(1).Chart.PlotArea.Format.Line.ForeColor.RGB = RGB(255, 255, 255)
                    ThisWorkbook.Worksheets("5.Visualization").ChartObjects(1).Chart.PlotArea.Format.Line.Weight = 1
                End If
            End If
        End If
    End If
End Sub

' InQuest injected base64 decoded content
' z{bj[
' ZrH+
' +-jw

INQUEST-PP=macro
