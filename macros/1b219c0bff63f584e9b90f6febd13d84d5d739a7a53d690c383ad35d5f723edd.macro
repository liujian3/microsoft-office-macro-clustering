Attribute VB_Name = "Classify"
Attribute VB_Base = "0{39D415E6-2152-4647-899C-D79F6CAEE0A5}{617B2755-1057-47EA-BA2A-06539E688EC0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'=======================================================================
' Formular Classify
' Author: Lerzer    Erstellt: 17.07.2013
'
' Zweck:
' GUI zum setzen der Klassifizierung einer Excelmappe.
' Der User kann die Klassifizierung, das Werk, den Stand sowie den
' Bearbeiter des Dokuments festlegen.
'
' Abh|fffd|ngigkeiten:
'  - Modul Template
'    Zentrale Steuerung der Klassifizierungslogik
'-----------------------------------------------------------------------
' |fffd|nderungslogbuch
'
' Datum    Krzl Beschreibung                                |fffd|nd.-ID
' -------- ---- ------------------------------------------- ------------
' 17.07.08 LeR  Angelegt
'=======================================================================

'Public events As Boolean

Private Sub CMD_Cancel_Click()
    Me.Hide
End Sub

Private Sub CMD_OK_Click()

    Template.setAuthor (Me.TB_Author.Value)
    Template.setLastUpdate (Me.TB_LastUpdate.Value)
    Template.setClassification (Me.CB_Classification.Value)
    Template.setLogo (Me.CB_Logo.Value)
    Template.insertLogo (Me.CB_Logo.Value)
    Template.generateFooter
    Me.Hide
    
End Sub

Private Sub UserForm_Activate()

    Dim item As Variant
    
    If Classify.CB_Classification.ListCount = 0 Or Classify.CB_Logo.TopIndex = 0 Then
        Template.config_read
        
        'Dropdownliste Classification f|fffd|llen
        Classify.CB_Classification.Clear
        For Each item In Template.getClassCollection
            Call Classify.CB_Classification.AddItem(item)
        Next item
        Classify.CB_Classification.ListIndex = 0
        
        'Dropdownliste Logo f|fffd|llen
        Classify.CB_Logo.Clear
        For Each item In Template.getLogoCollection
            Call Classify.CB_Logo.AddItem(item(0))
        Next item
        Classify.CB_Logo.ListIndex = 0
            
    End If
    
    Classify.CB_Logo.Value = Template.getLogo
    Classify.CB_Classification.Value = Template.getClassification
    Classify.TB_LastUpdate.Value = Template.getLastUpdate
    Classify.TB_Author.Value = Template.getAuthor
    
End Sub
Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_NewSheet(ByVal Sh As Object)
    Template.generateFooter
End Sub

Private Sub workbook_open()
    Template.init_at_Workbook_open
End Sub




Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Template"
'Option Explicit

'=======================================================================
' Modul Template
' Author: Lerzer    Erstellt: 17.07.2013
'
' Zweck:
' In diesem Modul befindet sich die gesamte Logik zur Steuerung
' der Klassifizerung. Hier wird die config.ini ausgelesen,
' Werte initialisiert und Funktionen zum Auslesen der Werte
' bereit gestellt.
'
' Abh|fffd|ngigkeiten:
'  - Formular Classify
'    GUI zur Klassifizierung durch den benutzer
'-----------------------------------------------------------------------
' |fffd|nderungslogbuch
'
' Datum    Krzl Beschreibung                                |fffd|nd.-ID
' -------- ---- ------------------------------------------- ------------
' 17.07.08 LeR  Angelegt
'=======================================================================


'=======================================================================
' Template f|fffd|r Einbau:
' Folgendes Coding in das Workbook integrieren. Gegebenenfalls eine
' Grafik mit dem Namen "Logo" in die anderen Tabellenbl|fffd|tter einf|fffd|gen.
'=======================================================================
'Private Sub Workbook_NewSheet(ByVal Sh As Object)
'    Template.generateFooter
'End Sub
'
'Private Sub workbook_open()
'    Template.init_at_Workbook_open
'End Sub
'=======================================================================

Private logos As Collection 'Sammlung f|fffd|r Eintr|fffd|ge Logo in Configdatei
Private class As Collection 'Sammlung f|fffd|r Eintr|fffd|ge Klassifizierung in Configdatei
Private defaultlogo As Variant 'Logo aus Configdatei
Private defaultclass As Variant 'Klassifizierung aus Configdatei

Private Declare Function GetPrivateProfileString Lib "kernel32.dll" Alias "GetPrivateProfileStringA" ( _
    ByVal lpApplicationName As String, _
    ByVal lpKeyName As Any, _
    ByVal lpDefault As String, _
    ByVal lpReturnedString As String, _
    ByVal nSize As Long, _
    ByVal lpFileName As String) As Long
Private Declare Function WritePrivateProfileString Lib "kernel32.dll" Alias "WritePrivateProfileStringA" ( _
    ByVal lpApplicationName As String, _
    ByVal lpKeyName As Any, _
    ByVal lpString As Any, _
    ByVal lpFileName As String) As Long

Private Const MAX_COUNT = 255

'Subroutine f|fffd|r Gebrauch als Makro am Logo
Sub show_classification()
    On Error Resume Next
    Classify.Show
    ActiveSheet.Shapes("Logo").Select
End Sub

Public Function init_at_Workbook_open()
    Dim item As Variant
    
    'Konfiguration einlesen
    config_read
    
    'Fu|fffd|zeilen setzen
    Call generateFooter
    
    'Pr|fffd|fen ob Dokument initial  (noch nicht gespeichert)
    If ActiveWorkbook.path = "" Then
        Document_New
    End If
    
End Function

Private Function Document_New()
    'Defaults in Comboboxen aus config.ini wenn nicht |fffd|ber Vorlag vorgegeben setzen
    If Len(ActiveWorkbook.BuiltinDocumentProperties("Company").Value) = 0 Then
         Classify.CB_Logo.Value = defaultlogo
    End If
    If Len(ActiveWorkbook.BuiltinDocumentProperties("Category").Value) = 0 Then
         Classify.CB_Classification.Value = defaultclass
    End If
   
    'Defaults in Datum und Autor f|fffd|llen
    Set objSysInfo = CreateObject("ADSystemInfo")
    qQuery = "LDAP://" & objSysInfo.UserName
    Set objuser = GetObject(qQuery)
    
    strAutor = objuser.company + "-" + objuser.department + "/" + objuser.initials
    
    ActiveWorkbook.CustomDocumentProperties("varAutor").Value = strAutor
    
    Classify.TB_Author = strAutor
    
    ActiveWorkbook.CustomDocumentProperties("varDate").Value = FormatDateTime(Date, vbShortDate)
    Classify.TB_LastUpdate = FormatDateTime(Date, vbShortDate)
    
    'Initiales Setzen der Vorschlagswerte
    Template.insertLogo (Template.getLogo)
    Template.generateFooter
    
    Classify.Show
    
End Function

'Lesen von Werten aus config.ini
Private Function ReadProfileString(path As String, section As String, key As String) As String

    Dim lngCharacterCount As Long
    Dim strReturn As String

    strReturn = Space$(MAX_COUNT)

    lngCharacterCount = GetPrivateProfileString(section, key, vbNullString, strReturn, MAX_COUNT, path)

    ReadProfileString = Left$(strReturn, lngCharacterCount)

End Function


'Bild an Position des alten Logos einf|fffd|gen
Public Function insertLogo(logo As String)
    On Error Resume Next
    
    Dim protectContents As Boolean
    Dim protectDrawingObjects As Boolean
    Dim protectMode As Boolean
    Dim protectScenarios As Boolean
    
    Dim protection As protection
    
    
    Dim pfad As String
    
    pfad = logos(logo)(1)
    
    
    For Each ws In ThisWorkbook.Worksheets
        tempid = ws.Shapes("Logo").ID
        If IsEmpty(tempid) Then  'Kein Logo vorhanden
            ws.Pictures.Insert(pfad).Name = "Logo"
            ws.Shapes("Logo").Left = ws.UsedRange.Width - ws.Shapes("Logo").Width - 10
            ws.Shapes("Logo").Top = ws.Range("M1").Top + 5
            ws.Shapes("Logo").OnAction = "'" + ThisWorkbook.Name + "'!Template.show_classification"
        Else 'Logo vorhanden austauschen
        
            'Einstellungen f|fffd|r Blattschutz merken
            protectContents = ws.protectContents
            protectDrawingObjects = ws.protectdrawingcontents
            protectMode = ws.protectMode
            protectScenarios = ws.protectScenarios
            Set protection = ws.protection
            
            ws.Unprotect
            
            posx = ws.Shapes("Logo").Left + ws.Shapes("Logo").Width
            posy = ws.Shapes("Logo").Top + ws.Shapes("Logo").Height
            ws.Shapes("Logo").Delete
            ws.Pictures.Insert(pfad).Name = "Logo"
            ws.Shapes("Logo").Left = posx - ws.Shapes("Logo").Width
            ws.Shapes("Logo").Top = posy - ws.Shapes("Logo").Height
            ws.Shapes("Logo").OnAction = "'" + ThisWorkbook.Name + "'!Template.show_classification"
        
            Call ws.Protect("", protectDrawingObjects, protectContents, protectScenarios, protectMode, _
                                protection.AllowFormattingCells, protection.AllowFormattingColumns, _
                                protection.AllowFormattingRows, protection.AllowInsertingColumns, _
                                protection.AllowInsertingRows, protection.AllowInsertingHyperlinks, _
                                protection.AllowDeletingColumns, protection.AllowDeletingRows, _
                                protection.AllowSorting, protection.AllowFiltering, protection.AllowUsingPivotTables)
            
        End If
    Next ws
End Function

'Initialwerte aus config.ini lesen
Public Function config_read()
    Dim comp, logo, configfile, elements As String
    Set logos = New Collection
    Set class = New Collection
    
    'Pfad f|fffd|r config.ini ermitteln. Excel unterst|fffd|tzt das Konzept einer am
    'Dokument angeh|fffd|ngten Vorlage, wie es in Word der Fall ist, nicht.
    'Netzwerkpfad pr|fffd|fen
    If FileExists(Application.NetworkTemplatesPath + "config.ini") Then
        logopath = Application.NetworkTemplatesPath + "Logos"
        configfile = Application.NetworkTemplatesPath + "config.ini"
    'Lokalen Pfad pr|fffd|fen
    ElseIf FileExists(Application.TemplatesPath + "config.ini") Then
        logopath = Application.TemplatesPath + "Logos"
        configfile = Application.TemplatesPath + "config.ini"
    End If

    elements = ReadProfileString((configfile), "Templates", "elements")
    If Len(elements) > 0 Then  'Configdatei gefunden, Eintr|fffd|ge sind vorhanden
    defaultlogo = ReadProfileString((configfile), "Templates", "default")
        For i = 1 To Val(elements)  'Schleife |fffd|ber Anzahl Eintr|fffd|ge in Config
            comp = ReadProfileString((configfile), "Templates", "comp" + CStr(i))
            logo = ReadProfileString((configfile), "Templates", "logo" + CStr(i))
            Call logos.Add(Array(comp, logo), comp)
        Next i
    Else 'Datei nicht gefunden
     MsgBox "File not found: " + configfile
    End If

    elements = ReadProfileString((configfile), "Classification", "elements")
    If Len(elements) > 0 Then  'Configdatei gefunden, Eintr|fffd|ge sind vorhanden
    defaultclass = ReadProfileString((configfile), "Classification", "default")
        For i = 1 To Val(elements)  'Schleife |fffd|ber Anzahl Eintr|fffd|ge in Config
            comp = ReadProfileString((configfile), "Classification", "class" + CStr(i))
            Call class.Add(comp)
        Next i
    Else 'Datei nicht gefunden
     MsgBox "File not found: " + configfile
    End If
End Function

'Fu|fffd|zeile erzeugen
Public Function generateFooter()
    
    Author = Template.getAuthor ' ActiveWorkbook.CustomDocumentProperties("varAutor").Value
    lastupdate = Template.getLastUpdate 'ActiveWorkbook.CustomDocumentProperties("varDate").Value
    Classification = Template.getClassification 'ActiveWorkbook.BuiltinDocumentProperties("Category").Value
    textfooter = "Last Update / Stand: "
    
    For Each ws In ThisWorkbook.Worksheets
        ws.PageSetup.LeftFooter = "&""Arial,Standard""&8" & textfooter & lastupdate & ", " & Author & Chr(10) & "&Z&F"
        ws.PageSetup.RightFooter = "&""Arial,Standard""&8" & Classification & Chr(10) & "&P/&N"
    Next ws
    
End Function

'Existiert die gesuchte Datei
Private Function FileExists(ByVal strPath As String) As Boolean
  On Error Resume Next
  GetAttr strPath
  FileExists = (Err = 0)
End Function

Public Function getClassification() As String
    getClassification = ThisWorkbook.BuiltinDocumentProperties("Category").Value
End Function

Public Function setClassification(newClassification As String)
    ThisWorkbook.BuiltinDocumentProperties("Category").Value = newClassification
End Function

Public Function getLogo() As String
    getLogo = ThisWorkbook.BuiltinDocumentProperties("Company").Value
End Function

Public Function setLogo(newLogo As String)
    ThisWorkbook.BuiltinDocumentProperties("Company").Value = newLogo
End Function

Public Function getLastUpdate() As String
    getLastUpdate = ThisWorkbook.CustomDocumentProperties("varDate").Value
End Function

Public Function setLastUpdate(newDate As String)
    ThisWorkbook.CustomDocumentProperties("varDate").Value = newDate
End Function

Public Function getAuthor() As String
    getAuthor = ThisWorkbook.CustomDocumentProperties("varAutor").Value
End Function

Public Function setAuthor(newAuthor As String)
    ThisWorkbook.CustomDocumentProperties("varAutor").Value = newAuthor
End Function

Public Function getLogoCollection() As Collection
    Set getLogoCollection = logos
End Function

Public Function getClassCollection() As Collection
    Set getClassCollection = class
End Function






INQUEST-PP=macro
