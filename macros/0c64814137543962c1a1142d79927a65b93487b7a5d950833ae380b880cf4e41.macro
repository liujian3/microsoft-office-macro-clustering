Attribute VB_Name = "AddEditDel"
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit
Public lIndentLevel As Long
Public cTaskWBSBeingAdded As String
Public bAddTask As Boolean
Public bEditTask As Boolean
Public sSectionName As String
Public bAddMilestone As Boolean
Public bEditMilestone As Boolean
Public dFormDate As Date
Public bTriggerFromTaskFormCalendar As Boolean
Public bNoDateSelectedForForm As Boolean

Sub TriggerAddMilestone(Optional t As Boolean)
    bAddMilestone = True
    AddNewTask "AtSelection"
End Sub
Sub AddNewTask(s As String)
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLiType) = sLTrialV Then
        If Application.WorksheetFunction.CountA(ActiveSheet.Range("A:A")) - 3 >= cTrialVersionTasksCount Then
            AddRollingText
            sTempStr1 = cstrTrailMsg
            frm_trial.Show
            bAddMilestone = False
            bAddTask = False
            Exit Sub
        End If
    End If

    If ActiveSheet.AutoFilterMode = True Then
        MsgBox "Task cannot be added when the filter mode is on.", vbInformation, "Information"
        GoTo PreExit
    End If

    If IsDataCollapsed = True Then
        Exit Sub
    End If

    If Selection.Row <= cHeaderRow Then
        MsgBox "You can add a task only under the header row.", vbInformation, "Information"
        GoTo last
    End If
    If Selection.Rows.Count > 1 Then
        MsgBox "Select the row where you want to add a new task and try adding again", vbInformation, "Information"
        GoTo last
    End If

    cTaskWBSBeingAdded = vbNullString
    Dim lRow As Long, tclrow As Long
    If s = "AtSelection" Then
        clRow = Selection.Row
        lIndentLevel = Cells(clRow, colPos.Task).IndentLevel
    ElseIf s = "BelowSelection" Then
        If IsParentTask(Selection.Row) Then
            clRow = Selection.Row + 1
            lIndentLevel = Cells(Selection.Row + 1, colPos.Task).IndentLevel
        Else
            clRow = Selection.Row + 1
            lIndentLevel = Cells(Selection.Row, colPos.Task).IndentLevel
        End If
    End If



    lRow = GetLastTaskRowNo - 2 + 1
    If lRow < clRow Then clRow = lRow

    If IsLicValid Then
        If bAddMilestone = False Then bAddTask = True
        frm_Task.Show
    End If

PreExit:
    bAddTask = False
    bAddMilestone = False

    clRow = 0
    lIndentLevel = 0
last:
End Sub

Sub EditExistingTask(Optional t As Boolean)
    If Selection.Rows.Count > 1 Then
        MsgBox "Select a single task to edit", vbInformation, "Information"
        GoTo last
    End If

    clRow = Selection.Row
    If Cells(clRow, colPos.tType) = vbNullString Then
        MsgBox "Select a task to edit", vbInformation, "Information"
        GoTo last
    ElseIf Cells(Selection.Row, colPos.tType) = "T" Then
        bEditTask = True
        frm_Task.Show
    ElseIf Cells(Selection.Row, colPos.tType) = "M" Then
        bEditMilestone = True
        frm_Task.Show
    End If


    clRow = 0
    bEditTask = False
    bEditMilestone = False

last:
End Sub
Sub DeleteExistingTask(Optional t As Boolean)
    DeleteTasks
End Sub

Sub LoadFormOnDblClick(Optional t As Boolean)

    Dim dblTemp As Double
    Dim s As Shape, ws As Worksheet
    If dblClickRow = cHeaderRow + 1 And Cells(dblClickRow, colPos.Task) = sAddTaskPlaceHolder And Cells(dblClickRow, colPos.tType) = vbNullString Then

    ElseIf Cells(dblClickRow, colPos.tType) <> vbNullString And Cells(dblClickRow, colPos.Task) <> vbNullString And Cells(dblClickRow, colPos.Task) <> sAddTaskPlaceHolder Then
        If dblClickCol = colPos.TColor Then
            dblTemp = PickNewColor(CDbl(Cells(dblClickRow, dblClickCol).Interior.Color))
            If dblTemp <> -4142 Then
                Cells(dblClickRow, dblClickCol).Interior.Color = dblTemp
                ' UnLockSheet ActiveSheet
                Set ws = ActiveSheet
                On Error Resume Next
                Set s = ws.Shapes("S_E_" & Cells(dblClickRow, colPos.tid))
                If Left(Cells(dblClickRow, colPos.WBS), 1) = "M" Then Set s = ws.Shapes("S_M_" & Cells(dblClickRow, colPos.tid))
                If Not s Is Nothing Then s.Fill.ForeColor.RGB = dblTemp

                Set ws = Nothing: Set s = Nothing
                LockSheet ActiveSheet
                On Error GoTo 0
            End If
        ElseIf dblClickCol = colPos.TPColor And Left(Cells(dblClickRow, colPos.WBS), 1) <> "M" Then
            dblTemp = PickNewColor(CDbl(Cells(dblClickRow, dblClickCol).Interior.Color))
            If dblTemp <> -4142 Then
                Cells(dblClickRow, dblClickCol).Interior.Color = dblTemp
                'UnLockSheet ActiveSheet

                Set ws = ActiveSheet
                On Error Resume Next

                Set s = ws.Shapes("S_C_" & Cells(dblClickRow, colPos.tid))
                If Not s Is Nothing Then s.Fill.ForeColor.RGB = dblTemp
                Set ws = Nothing: Set s = Nothing
                LockSheet ActiveSheet
                On Error GoTo 0
            End If
        ElseIf dblClickCol = colPos.BLColor And Left(Cells(dblClickRow, colPos.WBS), 1) <> "M" Then
            dblTemp = PickNewColor(CDbl(Cells(dblClickRow, dblClickCol).Interior.Color))
            If dblTemp <> -4142 Then
                Cells(dblClickRow, dblClickCol).Interior.Color = dblTemp
                ' UnLockSheet ActiveSheet

                Set ws = ActiveSheet
                On Error Resume Next

                Set s = ws.Shapes("S_B_" & Cells(dblClickRow, colPos.tid))
                If Not s Is Nothing Then s.Fill.ForeColor.RGB = dblTemp
                Set ws = Nothing: Set s = Nothing
                LockSheet ActiveSheet
                On Error GoTo 0
            End If
        ElseIf dblClickCol = colPos.ACColor And Left(Cells(dblClickRow, colPos.WBS), 1) <> "M" Then
            dblTemp = PickNewColor(CDbl(Cells(dblClickRow, dblClickCol).Interior.Color))
            If dblTemp <> -4142 Then
                Cells(dblClickRow, dblClickCol).Interior.Color = dblTemp
                ' UnLockSheet ActiveSheet

                Set ws = ActiveSheet
                On Error Resume Next

                Set s = ws.Shapes("S_A_" & Cells(dblClickRow, colPos.tid))
                If Not s Is Nothing Then s.Fill.ForeColor.RGB = dblTemp
                Set ws = Nothing: Set s = Nothing
                LockSheet ActiveSheet
                On Error GoTo 0
            End If
        Else
            EditExistingTask
        End If
    ElseIf Cells(dblClickRow, colPos.Task) = sAddTaskPlaceHolder And Cells(dblClickRow, colPos.WBS) = vbNullString Then
        Call AddNewTask("AtSelection")
    ElseIf Cells(dblClickRow, colPos.Task) = vbNullString And Cells(dblClickRow, colPos.WBS) = vbNullString Then
        Cells(cRowPos, colPos.Task).End(xlUp).Select
        If Selection = sAddTaskPlaceHolder Then
        ElseIf Selection = vbNullString Then
        Else
            Selection.Offset(1, 0).Select
        End If
        Call AddNewTask("AtSelection")
    End If
    dblClickCol = 0
    dblClickRow = 0

End Sub
Sub TriggerAddNewSheet(Optional t As Boolean)
    If RestrictGanttCharts(False, True) Then Exit Sub
    If IsLicValid(0, 1) Then
        frm_NewGantt.Show
    End If
End Sub
Sub DuplicateTaskMaster(Optional t As String)
    DuplicateTasks t
End Sub
Sub DeleteExtrasRowsInTrial(Optional t As Boolean)
    Dim lRow As Long
    If Cells(cRowPos, colPos.LiType) = sLTrialV Then
        lRow = GetLastTaskRowNo - 2

        Do Until Application.WorksheetFunction.CountA(ActiveSheet.Range("A:A")) - 3 <= cTrialVersionTasksCount
            Rows(lRow).EntireRow.Delete
            lRow = GetLastTaskRowNo - 2
        Loop
    End If
End Sub
Sub SetTodayLinesOnTop(Optional t As Boolean)
    Dim ws As Worksheet
    Set ws = ActiveSheet
    On Error Resume Next
    ws.Shapes("S_Today_LineLeft").ZOrder msoBringToFront
    ws.Shapes("S_Today_LineRight").ZOrder msoBringToFront
    On Error GoTo 0
    Set ws = Nothing
End Sub
Sub MoveTaskAbove(Optional t As Boolean)
    MoveTaskUp
End Sub
Sub MoveTaskBelow(Optional t As Boolean)
    MoveTaskDown
End Sub
Sub LoadNewGanttFormOnDblClick(Optional t As Boolean)
    If IsLicValid(0, 1) Then
        bEditProjectInfo = True
        frm_NewGantt.Show
        bEditProjectInfo = False
    End If
End Sub
Sub ScrollBar_Change(Optional t As Boolean)
    AddHolidaysAsComments True
End Sub

Attribute VB_Name = "DPB"
Attribute VB_Base = "0{2CB0CB7D-4576-48D8-A6FA-B9EAEAD23AD3}{317CF299-E053-4EBA-9C4C-852F6BD13574}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Attribute VB_Name = "Functions"
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit
#If Mac Then
    #If VBA7 Then
        Private Declare PtrSafe Function popen Lib "/usr/lib/libc.dylib" (ByVal command As String, ByVal mode As String) As LongPtr
        Private Declare PtrSafe Function pclose Lib "/usr/lib/libc.dylib" (ByVal file As LongPtr) As Long
        Private Declare PtrSafe Function fread Lib "/usr/lib/libc.dylib" (ByVal outStr As String, ByVal size As LongPtr, ByVal items As LongPtr, ByVal stream As LongPtr) As Long
        Private Declare PtrSafe Function feof Lib "/usr/lib/libc.dylib" (ByVal file As LongPtr) As LongPtr
    #Else
        Private Declare Function popen Lib "/usr/lib/libc.dylib" (ByVal command As String, ByVal mode As String) As Long
        Private Declare Function pclose Lib "/usr/lib/libc.dylib" (ByVal file As Long) As Long
        Private Declare Function fread Lib "/usr/lib/libc.dylib" (ByVal outStr As String, ByVal size As Long, ByVal items As Long, ByVal stream As Long) As Long
        Private Declare Function feof Lib "/usr/lib/libc.dylib" (ByVal file As Long) As Long
    #End If
#End If
Public Const min_ASC As Integer = 32
Public Const Max_ASC As Integer = 126
Public Const No_of_Chars As Integer = Max_ASC - min_ASC + 1
Public bClosing As Boolean
Public clRow As Long
Public dblClickRow As Long
Public dblClickCol As Long
Public gss As Worksheet
Public Const sPass As String = "unprotectsheet"
Public Const sAddTaskPlaceHolder As String = "Type here to add a new task"
Public Const sLTrial As String = "N4fL3sgyYf-Gm2xds9E-6dG7b72mev"
Public Const sLPro As String = "tHXDszEikT"
Public Const sLEnterprise As String = "E00HnT069U"
Public Const sLFFT As String = "EM8BoFGlIN"
Public Const sLFFTOffline As String = "CQXfpbhvze"
Public Const sLMacUltimate As String = "wgQCtdWEOj"
Public Const sVersionNo As String = "2.79"
Public Const sLEnterpriseV As String = "10E6A"
Public Const sLProV As String = "B5ZL8"
Public Const sLTrialV As String = "T42VP"
Public Const slFFTV As String = "NK4V0"
Public Const slFFTOfflineV As String = "NR7V0"
Public Const sLMacUltimateV As String = "E9GP4"
Public Const sDependencySeperator As String = "|"
Public Const sResourceSeperator As String = ", "
Public bAddResourceValueToFormNotToCell As Boolean
Public sResourcesNamesFromForm As String
Public Const cLicConst As String = "a999z"
Public lLicDur As String
Public Const cTrialVersionTasksCount As Long = 10   'remember to change number in next 2 lines
Public Const cstrTrailMsg = "This free version is limited to 10 tasks. Please purchase the Ultimate version to create Unlimited Gantt Charts with Unlimited tasks."
Public Const cstrTrailLimitationsMsg = "This feature is not available in the Free version. Please upgrade to the Ultimate version."
Public Const sTrialMsg As String = "This free version is limited to One Gantt chart and " & 10 & " tasks." & vbLf & "Please purchase the Ultimate version to create Unlimited Gantt Charts with Unlimited tasks." & vbLf & _
       "Visit our website to buy the Full Version - https://www.ganttexcel.com/"
Public Const sMsgMACNotCompatible = "This version does not work on MAC OS. Please upgrade to MAC Ultimate for cross compatibility between Windows and MAC OS."
Public Const sFilterMsg As String = "You cannot add/edit resources when the data is filtered"
Public Const cHeaderName As String = "WBS"
Public Const cHeaderRow As Long = 9
Public Const cActualHeaderRow As Long = 1
Public bShowAll As Boolean
Public Const bIsTrial As Boolean = False
Public Const cGanttTemplateSheetName As String = "Template"
Public Const GST As String = "ganttsettings"
Public bEditProjectInfo As Boolean
Public colPos As New clsGetColNumbers
Public sArr As New clsArrProp
Public Const cRowPos As Long = 2
Public Const cTimelineDateRow As Long = 6
Public Const cProjectNameRow As Long = 6
Public Const cTimelineDateLabelsRow As Long = 7
Public Const cTimelineDateNumbersRow As Long = 8
Public Const cTimelineDayNamesRow As Long = 9
Public Const cTotalCustomColumns As Long = 10
Public Const sPassD = vbNullString
Public Const csDate As Date = #1/1/1950#
Public Const ceDate As Date = #12/1/2100#
Public sfUsrName As String, sfUsrEmailID As String, sfLicenseCode As String, sLiType As String
Public sRowOrWidth As String
Public bStopCalculationOfConstraints As Boolean
Public sTempStr As String
Public sTempStr1 As String
Public Const sURLWelcome1 As String = "https://www.ganttexcel.com/free-version-o1/?utm_source=xlcust1&utm_medium="
Public Const sURLWelcome2 As String = "https://www.ganttexcel.com/free-version-n23/?utm_source=xlcust2&utm_medium="
Public Const sURLWelcome3 As String = "https://www.ganttexcel.com/free-version-p34/?utm_source=xlcust3&utm_medium="
Public Const sURLWelcome4 As String = "https://www.ganttexcel.com/free-version-q45/?utm_source=xlcust4&utm_medium="
Public Const macrourl As String = "https://www.ganttexcel.com/documentation/enable-macros/?utm_source=xlcustem&utm_medium="
Public Const docurl As String = "https://www.ganttexcel.com/documentation/?utm_source=xlcustd&utm_medium="
Public Const docurlcust As String = "https://www.ganttexcel.com/documentation/?utm_source=xlcustd&utm_medium=cust"
Public Const macrourlcust As String = "https://www.ganttexcel.com/documentation/enable-macros/?utm_source=xlcustem&utm_medium=cust"
Public Const sURL_P As String = "https://www.ganttexcel.com/buy-cpc/?utm_source=xlcustbuy&utm_medium="
Public Const sURL_O As String = "https://www.ganttexcel.com/buy-org/?utm_source=xlcustbuy&utm_medium="
Public Const aboutURL As String = "https://www.ganttexcel.com/?utm_source=xlcustabout&utm_medium=cust"
Public Const aboutURLf As String = "https://www.ganttexcel.com/?utm_source=xlcustabout&utm_medium="
Public Const sMedium As String = "cpc"
Function sap()
Application.EnableEvents = False
    Application.ScreenUpdating = False
    Dim ws As Worksheet
    For Each ws In ThisWorkbook.Sheets
        If LCase(ws.Name) <> "help" Then
            If ws.Name = cDashboardSheetName Or ws.Name = cUserDashboardName Or ws.Name = cGanttTemplateSheetName Then
            Else
                If ws.Cells(1, 1) = "tType" Then
                    UnLockSheet ws
                End If
            End If
        End If
    Next ws
    Application.ScreenUpdating = True
End Function
Function zap()
Application.EnableEvents = True
    Application.ScreenUpdating = False
    Dim ws As Worksheet
    For Each ws In ThisWorkbook.Sheets
        If LCase(ws.Name) <> "help" Then
            If ws.Name = cDashboardSheetName Or ws.Name = cUserDashboardName Or ws.Name = cGanttTemplateSheetName Then
            Else
                If ws.Cells(1, 1) = "tType" Then
                    LockSheet ws
                End If
            End If
        End If
    Next ws
    Application.ScreenUpdating = True
End Function
Function findgss()
Dim gssname As String
gssname = Cells(cRowPos, colPos.ProjectSheetName).Value
Call CheckSheet(gssname)
End Function
Function rungsschk()
If Cells(1, 1) = "tType" Then
    If gss Is Nothing Then
        findgss
    Else
    End If
Else
Exit Function
End If
End Function
Function CheckSheet(ByVal sSheetName As String) As Boolean
    Dim oSheet As Excel.Worksheet
    Dim bReturn As Boolean
    For Each oSheet In ActiveWorkbook.Sheets
        If oSheet.Name = sSheetName Then
            bReturn = True
            Exit For
        End If
    Next oSheet
    CheckSheet = bReturn
    If CheckSheet = False Then
        MsgBox "Settings sheet is missing. Please send your file to support@ganttexcel.com"
        Exit Function
    Else
        Set gss = Worksheets(sSheetName)
        If gss.ProtectContents = True Then
            gss.Unprotect "unprotectsheet"
        Else
        End If
    End If
End Function
Function checkifdependency(wsr As Worksheet) As Boolean
Dim constrainrange As Range
Dim lasttaskplusone As Long
lasttaskplusone = Evaluate("counta(" & "'" & wsr.Name & "'!" & "A:A)+8")
Set constrainrange = wsr.Range(wsr.Cells(cHeaderRow + 1, 3), wsr.Cells(lasttaskplusone, 4))
If Application.WorksheetFunction.CountA(constrainrange) > 0 Then
    checkifdependency = True
    Else
    checkifdependency = False
End If
End Function
Function resetsettingscounter() As String
UnLockSheet ActiveSheet
Worksheets("Template").Range("VGC2").Value = 0
LockSheet ActiveSheet
End Function
Function DoesDashboardUserSheetExists(Optional t As Boolean) As Boolean
    On Error Resume Next
    Dim ws As Worksheet
    Set ws = Sheets(cUserDashboardName)
    If ws Is Nothing Then
    Else
        DoesDashboardUserSheetExists = True
    End If
    On Error GoTo 0
End Function

Public Sub EnableFrame(InFrame As Frame, ByVal Flag As Boolean)
    Dim Contrl As control
    On Error Resume Next
    InFrame.enabled = Flag
    For Each Contrl In InFrame.Parent.Controls
       If (Contrl.Container.Name = InFrame.Name) Then
          If (TypeOf Contrl Is Frame) And Not (Contrl.Name = InFrame.Name) Then
             EnableFrame Contrl, Flag
          Else
             If Not (TypeOf Contrl Is Menu) Then Contrl.enabled = Flag
          End If
       End If
    Next
End Sub
Function PickNewColor(Optional i_OldColor As Double = xlNone) As Double
    Const BGColor As Long = 13160660
    Const ColorIndexLast As Long = 32
    Dim myOrgColor As Double
    Dim myNewColor As Double
    Dim myRGB_R As Integer
    Dim myRGB_G As Integer
    Dim myRGB_B As Integer
    myOrgColor = ActiveWorkbook.Colors(ColorIndexLast)
    If i_OldColor = xlNone Then
        Color2RGB BGColor, myRGB_R, myRGB_G, myRGB_B
    Else
        Color2RGB i_OldColor, myRGB_R, myRGB_G, myRGB_B
    End If
    If Application.Dialogs(xlDialogEditColor).Show(ColorIndexLast, myRGB_R, myRGB_G, myRGB_B) = True Then
        PickNewColor = ActiveWorkbook.Colors(ColorIndexLast)
        ActiveWorkbook.Colors(ColorIndexLast) = myOrgColor
    Else
        PickNewColor = i_OldColor
    End If
End Function

Sub Color2RGB(ByVal i_Color As Long, _
              o_R As Integer, o_G As Integer, o_B As Integer)
    o_R = i_Color Mod 256
    i_Color = i_Color \ 256
    o_G = i_Color Mod 256
    i_Color = i_Color \ 256
    o_B = i_Color Mod 256
End Sub

Function LockSheetD(ws As Worksheet)
'ws.Protect sPassD, True, , , , True, True, True, , , , , , , , True
End Function
Function UnLockSheetD(ws As Worksheet)
'ws.Unprotect sPassD
End Function
Function LockSheet(ws As Worksheet)
    ws.EnableOutlining = True
    ws.Protect sPass, , , , True, True, True, True, , , True, , , , True
End Function
Function UnLockSheet(ws As Worksheet)
    ws.Unprotect sPass
End Function
Function IsDashboardSheet(ws As Worksheet) As Boolean
    If ws.Range("z2") = "Dashboard" Then IsDashboardSheet = True
End Function
Function IsAnyOpenWorkbookProtected(Optional t As Boolean) As Boolean
    Dim oWin As Object
    On Error GoTo last
    Set oWin = CallByName(Application, "ProtectedViewWindows", VbGet)
    If Not oWin Is Nothing Then
        IsAnyOpenWorkbookProtected = oWin.Count > 0
    End If
last:
    On Error GoTo 0
    Set oWin = Nothing
End Function
Function DisableAll(Optional t As String)
    With Application
        .ScreenUpdating = False
        .EnableEvents = False
        .DisplayAlerts = False
        .Calculation = xlCalculationManual
    End With
End Function
Function EnableAll(Optional t As String)
    With Application
        .EnableEvents = True
        .DisplayAlerts = True
        .Calculation = xlCalculationAutomatic
        .ScreenUpdating = True
    End With
End Function
Function GetQuarterStartDate(Optional d As Date) As Date
    If d = 0 Then d = Date
    GetQuarterStartDate = DateSerial(Year(d), Int((Month(d) - 1) / 3) * 3 + 1, 1)
End Function
Function GetHalfYearStartDate(Optional d As Date) As Date
    If d = 0 Then d = Date
    If Month(d) > 6 Then
        GetHalfYearStartDate = DateSerial(Year(d), 7, 1)
    Else
        GetHalfYearStartDate = DateSerial(Year(d), 1, 1)
    End If
End Function
Function GetYearStartDate(Optional d As Date) As Date
    If d = 0 Then d = Date
    GetYearStartDate = DateSerial(Year(d), 1, 1)
End Function
Function GetResourcesTotalCost(sResources As String, Optional lDur) As Long
rungsschk
    If sResources = vbNullString Then Exit Function


    Dim vR, i As Integer, r As Range
    Set r = gss.Range(gss.Cells(1, 1), gss.Cells(Cells.Rows.Count, 2))
    vR = Split(sResources & sResourceSeperator, sResourceSeperator)
    For i = 0 To UBound(vR) - 1
        On Error Resume Next
        GetResourcesTotalCost = GetResourcesTotalCost + WorksheetFunction.IfError(WorksheetFunction.VLookup(vR(i), r, 2, 0), 0)
        On Error GoTo 0
    Next
    On Error Resume Next
    If lDur = vbNullString Then lDur = 0
    If IsNumeric(lDur) = False Then lDur = 0
    If lDur > 0 Then
        GetResourcesTotalCost = GetResourcesTotalCost * lDur
    End If
    Set r = Nothing
    On Error GoTo 0
End Function
Sub RemoveInvalidResourcesNamesFromTasks(Optional bPopulateResourceCost As Boolean)
    Dim cRow As Long, lRow As Long, rcount As Long
    Dim sReso As String, sResources(), vR, i As Integer, j As Integer
    Dim bFound As Boolean, sNewResource As String
    rungsschk

    rcount = WorksheetFunction.CountA(gss.Columns(1)) - 1
    
    lRow = GetLastTaskRowNo
    If rcount > 0 Then
        ReDim vArr(1 To rcount, 1 To 2)
        vArr() = gss.Range(gss.Cells(2, 1), gss.Cells(rcount + 1, 2)).Value
     
        
    End If

    For cRow = cHeaderRow + 1 To lRow - 2
        sReso = Cells(cRow, colPos.TaskLead).Value
        If sReso = vbNullString Then
            Cells(cRow, colPos.TaskLeadCost) = vbNullString
        Else
            vR = Split(sReso & sResourceSeperator, sResourceSeperator)
            sNewResource = vbNullString
            For i = 0 To UBound(vR) - 1
                bFound = False
                For j = 1 To rcount
                    If LCase(vArr(j, 1)) = LCase(vR(i)) Then
                        sNewResource = sNewResource & vR(i) & sResourceSeperator
                        bFound = True
                    End If
                Next
            Next i
            If sNewResource = vbNullString Then
                Cells(cRow, colPos.TaskLead) = sNewResource
            Else
                Cells(cRow, colPos.TaskLead) = Left(sNewResource, Len(sNewResource) - 2)
            End If
        End If
    Next cRow
End Sub
Sub MoveResourcesAndHolidays(Optional cRow As Long)
Exit Sub
End Sub
Function IsParentTask(ByVal cRow As Long, Optional ws As Worksheet) As Boolean
    If ws Is Nothing Then Set ws = ActiveSheet
    If ws.Cells(cRow, colPos.Task).IndentLevel = ws.Cells(cRow + 1, colPos.Task).IndentLevel - 1 Then IsParentTask = True
End Function
Function IsChildOfParentTask(ByVal pWBS As String, cWBS As String) As Boolean
    Dim pLvl As Long, cLvl As Long

    Dim vP, vC, i As Long
    vP = Split(pWBS & ".", ".")
    vC = Split(cWBS & ".", ".")

    pLvl = UBound(vP) - 1
    cLvl = UBound(vC) - 1

    If pLvl > cLvl Then Exit Function
    If pWBS = cWBS Then Exit Function

    IsChildOfParentTask = True
    For i = 0 To UBound(vP) - 1
        If vP(i) = vC(i) Then
        Else
            IsChildOfParentTask = False
        End If
        If IsChildOfParentTask = False Then Exit For
    Next
End Function
Function ReNunmberSerials(ws As Worksheet, Optional ByVal cRow As Long, Optional bReturn As Boolean) As Long
    Call WBSNumbering
End Function

Sub UnhideSheet(Optional t As String)
    DisableAll
    Dim wks As Worksheet
    For Each wks In ActiveWorkbook.Worksheets
        wks.visible = xlSheetVisible
    Next wks
End Sub
Sub HideSheet(Optional t As String)
    If ActiveSheet.Name = cGanttTemplateSheetName Then
        Range("A1:A5").EntireRow.Hidden = True
        Range(Cells(1, colPos.TimelineEnd + 1), Cells(1, Cells.Columns.Count)).EntireColumn.Hidden = True
        Range("G6").Select
    End If
    Sheets(cGanttTemplateSheetName).visible = xlVeryHidden
    Sheets(cDashboardSheetName).visible = xlVeryHidden
    Sheets(GST).visible = xlVeryHidden
    EnableAll
End Sub
Function IsWorkingDayForDependencies(wDayNum As Long, Su As Boolean, Mo As Boolean, _
                                     Tu As Boolean, We As Boolean, Th As Boolean, Fr As Boolean, Sa As Boolean) As Boolean
    Select Case wDayNum
    Case 1
        If Su Then IsWorkingDayForDependencies = True
    Case 2
        If Mo Then IsWorkingDayForDependencies = True
    Case 3
        If Tu Then IsWorkingDayForDependencies = True
    Case 4
        If We Then IsWorkingDayForDependencies = True
    Case 5
        If Th Then IsWorkingDayForDependencies = True
    Case 6
        If Fr Then IsWorkingDayForDependencies = True
    Case 7
        If Sa Then IsWorkingDayForDependencies = True
    End Select
End Function
Function IsWorkingDay(wDayNum As Long) As Boolean
    IsWorkingDay = sArr.Weekends(wDayNum)
End Function
Function IsDateAHoliday(d As Date) As Boolean
rungsschk
    On Error Resume Next
    Dim r As Range, f As Range, dPos As Long
    Set r = gss.Range(gss.Cells(2, 6), gss.Cells(Cells.Rows.Count, 6))
    dPos = Application.WorksheetFunction.Match(CLng(d), r, 0)
    If dPos > 0 Then IsDateAHoliday = True
    On Error GoTo 0
End Function

Function IsDateAHolidayNew(d As Date) As Boolean
    Dim i As Long
    For i = 1 To UBound(sArr.HolidaysArr)
        If sArr.Holidays(i) = d Then

            IsDateAHolidayNew = True
            Exit For
        End If
    Next
End Function

Function GetStartFromWorkDays(ByVal eDate As Date, ByVal wd As Long) As Date
    Dim wkday As Long
    Do While 1 = 1
        wkday = Weekday(eDate, 2)
        If IsDateAHolidayNew(eDate) = False Then
            If IsWorkingDay(wkday) = False Then
            Else
                wd = wd - 1
                If wd <= 0 Then
                    GetStartFromWorkDays = eDate
                    Exit Do
                End If
            End If
        End If
        eDate = eDate - 1
    Loop
End Function

Function GetEndDateFromWorkDays(ByVal sDate As Date, ByVal wd As Long) As Date
    Dim wkday As Long
    Do While 1 = 1
        wkday = Weekday(sDate, 2)
        If IsDateAHolidayNew(sDate) = False Then
            If IsWorkingDay(wkday) = False Then
            Else
                wd = wd - 1
                If wd <= 0 Then
                    GetEndDateFromWorkDays = sDate
                    Exit Do
                End If
            End If
        End If
        sDate = sDate + 1
    Loop
End Function
Function GetWorkDaysFromDate(sDate As Date, eDate As Date) As Long

    Dim c As Date, wd As Long, i As Long, B As Boolean

    For c = sDate To eDate
        wd = Weekday(c, 2)
        If sArr.Weekends(wd) Then
            If IsDateAHolidayNew(c) Then
                GoTo NextDate
            End If
            GetWorkDaysFromDate = GetWorkDaysFromDate + 1
        End If
NextDate:
    Next c
    If GetWorkDaysFromDate = 0 Then GetWorkDaysFromDate = 1
End Function
Public Function GetDelayedDateNew(ByVal sDate As Date, ByVal dDelay As Long, _
                                  Optional Su As Boolean, Optional Mo As Boolean, Optional Tu As Boolean, _
                                  Optional We As Boolean, Optional Th As Boolean, Optional Fr As Boolean, Optional Sa As Boolean, _
                                  Optional sDependencyType As String) As Date

    Dim bReverse As Boolean, i As Long

    GetDelayedDateNew = sDate
    'Set the given date a to working day
    Do Until IsWorkingDayForDependencies(Weekday(GetDelayedDateNew, vbSunday), Su, Mo, Tu, We, Th, Fr, Sa) = True _
       And IsDateAHoliday(GetDelayedDateNew) = False

        If sDependencyType = "FS" Then
            GetDelayedDateNew = GetDelayedDateNew + 1
        ElseIf sDependencyType = "SF" Then
            GetDelayedDateNew = GetDelayedDateNew - 1
        ElseIf sDependencyType = "SS" Then
            GetDelayedDateNew = GetDelayedDateNew + 1
        ElseIf sDependencyType = "FF" Then
            GetDelayedDateNew = GetDelayedDateNew + 1
        End If

    Loop

    'After the above loop executed the date will a working date
    'We now add the delay value to get the final date
    'and ensure that the final date is also a working day
    i = dDelay
    If i > 0 Then
        Do Until i = 0
            GetDelayedDateNew = GetDelayedDateNew + 1
            Do Until IsWorkingDayForDependencies(Weekday(GetDelayedDateNew, vbSunday), Su, Mo, Tu, We, Th, Fr, Sa) = True _
               And IsDateAHoliday(GetDelayedDateNew) = False
                GetDelayedDateNew = GetDelayedDateNew + 1
            Loop
            i = i - 1
        Loop
    ElseIf i < 0 Then
        Do Until i = 0
            GetDelayedDateNew = GetDelayedDateNew - 1
            Do Until IsWorkingDayForDependencies(Weekday(GetDelayedDateNew, vbSunday), Su, Mo, Tu, We, Th, Fr, Sa) = True _
               And IsDateAHoliday(GetDelayedDateNew) = False
                GetDelayedDateNew = GetDelayedDateNew - 1
            Loop
            i = i + 1
        Loop
    ElseIf i = 0 Then

    End If
End Function
Public Function GetDelayedDate(ByVal sDate As Date, ByVal dDelay As Long, _
                               Optional Su As Boolean, Optional Mo As Boolean, Optional Tu As Boolean, _
                               Optional We As Boolean, Optional Th As Boolean, Optional Fr As Boolean, Optional Sa As Boolean, _
                               Optional sDependencyType As String) As Date

    If bStopCalculationOfConstraints Then
        GetDelayedDate = Date
        Exit Function
    End If
    GetDelayedDate = GetDelayedDateNew(sDate, dDelay, Su, Mo, Tu, We, Th, Fr, Sa, sDependencyType)


End Function


Public Function GetWeekStartDateActuals(ByVal curDate As Date, Optional lWeekStartDayNum As Long) As Date
    If lWeekStartDayNum = 0 Then
        lWeekStartDayNum = Cells(cRowPos, colPos.WeekStartDay).Value
    End If

    GetWeekStartDateActuals = (curDate - (WorksheetFunction.Weekday(curDate, 2) - lWeekStartDayNum))
    If GetWeekStartDateActuals > curDate Then GetWeekStartDateActuals = GetWeekStartDateActuals - 7
End Function
Public Function GetWeekStartDate(ByVal curDate As Date, Optional lWeekStartDayNum As Long, Optional ScrollPos As Long) As Date
    If lWeekStartDayNum = 0 Then
        lWeekStartDayNum = Cells(cRowPos, colPos.WeekStartDay).Value
    End If
    If ScrollPos = 0 Then
        ScrollPos = Cells(cRowPos, colPos.ScrollPosition).Value
    End If
    If ScrollPos = 0 Then
        ScrollPos = 1
    End If
    GetWeekStartDate = (curDate - (WorksheetFunction.Weekday(curDate, 2) - lWeekStartDayNum)) + (7 * (ScrollPos - 1))
    If GetWeekStartDate > curDate And ScrollPos = 1 Then GetWeekStartDate = GetWeekStartDate - 7
End Function
Function CheckIfAtlestOneGanttSheetExits(Optional t As String) As Boolean
    Dim ws As Worksheet
    CheckIfAtlestOneGanttSheetExits = False
    For Each ws In ThisWorkbook.Worksheets
        If ws.Cells(cRowPos, colPos.GanttSheet) Then
            CheckIfAtlestOneGanttSheetExits = True
            Exit For
        End If
    Next ws
End Function


Sub Scroll_Calendar_Change(Optional t As String)
    ResetHeaderRowColors
    If Cells(cRowPos, colPos.CurrentView) = "D" Then
        BuildDailyView
    ElseIf Cells(cRowPos, colPos.CurrentView) = "W" Then
        BuildWeeklyView
    ElseIf Cells(cRowPos, colPos.CurrentView) = "M" Then
        BuildMonthlyView
    ElseIf Cells(cRowPos, colPos.CurrentView) = "Q" Then
        BuildQuarterlyView
    ElseIf Cells(cRowPos, colPos.CurrentView) = "H" Then
        BuildHalfYearlyView
    ElseIf Cells(cRowPos, colPos.CurrentView) = "Y" Then
        BuildYearlyView
    End If

End Sub
Public Function IsActiveSheetGanttSheet(Optional t As String) As Boolean
    If Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then IsActiveSheetGanttSheet = True
End Function
Public Function ShowHideTasks(Optional t As Boolean)
    Dim lRow As Long, cRow As Long, B As Boolean
    B = Application.EnableEvents

    lRow = ActiveSheet.UsedRange.Rows.Count
    ' If t Then UnLockSheet ActiveSheet

    Application.ScreenUpdating = False
    Application.EnableEvents = False

    For cRow = cHeaderRow + 1 To lRow
        If Cells(cRow, colPos.tType) = vbNullString Then Exit For
        If IsParentTask(cRow) Then GoTo NextRow

        If Cells(cRow, colPos.PercentageCompleted).Value = 1 And Cells(cRowPos, colPos.ShowCompleted) = 0 Then
            Cells(cRow, 1).EntireRow.Hidden = True
            GoTo NextRow
        ElseIf Cells(cRow, colPos.PercentageCompleted).Value > 0 And Cells(cRow, colPos.PercentageCompleted).Value < 1 And Cells(cRowPos, colPos.ShowInProgress) = 0 Then
            Cells(cRow, 1).EntireRow.Hidden = True
            GoTo NextRow
        ElseIf Cells(cRow, colPos.PercentageCompleted).Value = 0 And Cells(cRowPos, colPos.ShowPlanned) = 0 Then
            Cells(cRow, 1).EntireRow.Hidden = True
            GoTo NextRow
        Else
            Rows(cRow & ":" & cRow).EntireRow.Hidden = False
        End If
NextRow:
    Next cRow

    If Cells(cRowPos, colPos.ShowCompleted) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0 Or Cells(cRowPos, colPos.ShowPlanned) = 0 Then
        lRow = WorksheetFunction.CountA(Range("A" & Cells.Rows.Count & ":A" & Cells.Rows.Count)) + cHeaderRow + 1
        If Cells(lRow, colPos.Task) = sAddTaskPlaceHolder Then Cells(lRow, colPos.Task) = vbNullString
    Else
        lRow = GetLastTaskRowNo - 2 + 1
        If Cells(lRow, colPos.tType) = vbNullString Then
            AddRollingText
        End If
    End If
    If t Then LockSheet ActiveSheet
    AddGanttBarsForEachRow True
    Application.ScreenUpdating = True
    If B Then Application.EnableEvents = True
End Function
Sub AddRollingText(Optional t As Boolean)
    t = Application.EnableEvents
    If t Then Application.EnableEvents = False
    If t Then
    Else
    End If
    Dim r As Range
    Set r = Cells(GetLastTaskRowNo - 1, colPos.Task)
    If r <> sAddTaskPlaceHolder Then

        With r
            .Value = sAddTaskPlaceHolder
            .Font.Italic = True
            .Font.Color = RGB(86, 86, 86)
            .IndentLevel = 0
            .Locked = False
        End With
    End If
    If t Then Application.EnableEvents = 1
    Range(Cells(cHeaderRow, colPos.WBS), Cells(2000, colPos.ACColor)).Locked = False
    ActiveSheet.Range("G9").Locked = True
End Sub

Sub AddDeleteFromCellMenu(Optional B As Boolean)
    If Cells(1, 1) <> "tType" Then Exit Sub
    If Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        AddToCellMenu
    Else
        DeleteFromCellMenu
    End If
End Sub

Public Sub ReCalculateColPos(Optional t As Boolean)
    Set colPos = Nothing
    Set colPos = New clsGetColNumbers
End Sub
Public Sub ReCalculateArrays(Optional t As Boolean)
    Set sArr = Nothing
    Set sArr = New clsGetColNumbers
End Sub

Public Sub ReCalculateAllDurations(Optional t As String)
    ReCalculateEstimatedDurations
    ReCalculateBaselineDurations
    ReCalculateActualDurations
    If t Then LockSheet ActiveSheet
End Sub
Public Sub ReCalculateEstimatedDurations(Optional t As Boolean)
    Dim cRow As Long
    cRow = cHeaderRow + 1
    Do Until Cells(cRow, colPos.tType) = vbNullString

        Cells(cRow, colPos.EED) = GetEndDateFromWorkDays(Cells(cRow, colPos.ESD), Cells(cRow, colPos.ED))
        ReCalculateConstrainsValues cRow

        cRow = cRow + 1
    Loop
End Sub
Public Sub ReCalculateBaselineDurations(Optional t As Boolean)
    Dim cRow As Long
    cRow = cHeaderRow + 1
    Do Until Cells(cRow, colPos.tType) = vbNullString

        If Cells(cRow, colPos.BSD) <> vbNullString And Cells(cRow, colPos.BD) <> vbNullString Then
            Cells(cRow, colPos.BED) = GetEndDateFromWorkDays(Cells(cRow, colPos.BSD), Cells(cRow, colPos.BD))
        End If

        cRow = cRow + 1
    Loop
End Sub
Public Sub ReCalculateActualDurations(Optional t As Boolean)
    Dim cRow As Long
    cRow = cHeaderRow + 1
    Do Until Cells(cRow, colPos.tType) = vbNullString

        If Cells(cRow, colPos.ASD) <> vbNullString And Cells(cRow, colPos.AD) <> vbNullString Then
            Cells(cRow, colPos.AED) = GetEndDateFromWorkDays(Cells(cRow, colPos.ASD), Cells(cRow, colPos.AD))
        End If

        cRow = cRow + 1
    Loop
End Sub
Public Sub PopulateSectionDates(Optional t As Boolean, Optional cRow As Long, Optional bFullCalculation As Boolean)
    If t Then
        DisableAll
    End If
    PopulateParentTasksDates cRow, , bFullCalculation
    If t Then
        EnableAll
    End If
End Sub
Sub PopulateEstimatesCostsFromResourceInSheet(Optional t As Boolean)
    If Cells(cRowPos, colPos.EnableCostsModule) = 0 Then Exit Sub
    Dim cRow As Long, lRow As Long
    Dim sLead As String
    lRow = GetLastTaskRowNo - 2
    For cRow = cHeaderRow + 1 To lRow
        sLead = Cells(cRow, colPos.TaskLead)
        If sLead = vbNullString Then
            Cells(cRow, colPos.TaskLeadCost) = vbNullString
        Else
            Cells(cRow, colPos.TaskLeadCost) = GetResourcesTotalCost(Cells(cRow, colPos.TaskLead), Cells(cRow, colPos.ED))
        End If
    Next cRow
End Sub
Sub SetRowHeight(Optional t As Boolean)
    sRowOrWidth = "R"
    frmRowColumnHeightWidth.Show
End Sub
Sub SetColumnWidth(Optional t As Boolean)
    If Selection.Columns.Count > 1 Then
        MsgBox "Select only one column to set the column width", vbInformation, "Information"
        Exit Sub
    End If
    If Selection.Column = 1 Then Exit Sub
    If Selection.Column >= colPos.TimelineStart Then
        MsgBox "Column width for the timeline cannot be changed", vbInformation, "Information"
        Exit Sub
    End If

    sRowOrWidth = "C"
    frmRowColumnHeightWidth.Show
End Sub

Function GetLicType() As String

    Dim ws As Worksheet
    Set ws = Sheets(cGanttTemplateSheetName)

    If ws.Cells(cRowPos, colPos.tUsrName) <> vbNullString Then
        GetLicType = ws.Cells(cRowPos, colPos.tLiType)
    End If

End Function

Function IsLicValid(Optional t As Boolean, Optional bBypass As Boolean) As Boolean
Dim sLicType As String, tBool As Boolean, IsGSheet As Boolean, ws As Worksheet
Set ws = Sheets(cGanttTemplateSheetName)
IsGSheet = False
If ws.Cells(cRowPos, colPos.tUsrName) <> vbNullString Then
    tBool = ws.Cells(cRowPos, colPos.tLicenseVal)
Else
    tBool = False
End If
If tBool = False And bBypass = True Then
    IsLicValid = False
    Exit Function
End If
If tBool = False Then
    Dim sl As String
If sTempStr <> "OnStartUp" Then frm_LicEntry.Show
If sfLicenseCode = vbNullString Then GoTo last
If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) Then GoTo last
sl = sLiType

If sl = sLTrial Then
    sLicType = sLTrialV
ElseIf sl = sLPro Then
    sLicType = sLProV
ElseIf sl = sLEnterprise Then
    sLicType = sLEnterpriseV
ElseIf sl = sLMacUltimate Then
    sLicType = sLMacUltimateV
ElseIf sl = sLFFT Then
    sLicType = slFFTV
ElseIf sl = sLFFTOffline Then
    sLicType = slFFTOfflineV
Else
    MsgBox "Invalid license code or Incorrect email address", vbCritical, "Invalid"
    IsLicValid = False
    GoTo last
End If
UnLockSheet Sheets(cGanttTemplateSheetName)
Application.EnableEvents = False
With Sheets(cGanttTemplateSheetName)
    .Cells(cRowPos, colPos.tLicenseVal) = 1
    .Cells(cRowPos, colPos.tLiType) = sLicType
    .Cells(cRowPos, colPos.usrActivatedDate).NumberFormat = "@"
    .Cells(cRowPos, colPos.usrActivatedDate) = Decipher(Format(Date, "YYYYMMDD"))
    .Cells(cRowPos, colPos.usrEmailID).NumberFormat = "@"
    .Cells(cRowPos, colPos.usrEmailID) = Decipher(sfUsrEmailID)
    .Cells(cRowPos, colPos.usrName).NumberFormat = "@"
    .Cells(cRowPos, colPos.usrName) = (sfUsrName)
    .Cells(cRowPos, colPos.tliky) = sfLicenseCode
    If IsDate(lLicDur) Then
        .Cells(cRowPos, colPos.LicDuration) = Decipher(CStr(Format(lLicDur, "dd-mmm-yyyy hh:mm:ss")) & cLicConst)
    ElseIf lLicDur = "lifetime" Then
        .Cells(cRowPos, colPos.LicDuration) = Decipher(CStr(Format(Now() + 36500, "dd-mmm-yyyy hh:mm:ss")) & cLicConst)
    End If
    If sLicType = sLTrialV Or sLicType = sLEnterpriseV Or sLicType = sLProV Or sLicType = slFFTV Or sLicType = slFFTOfflineV Then
        .Cells(cRowPos, colPos.DB) = 1
        .Cells(cRowPos, colPos.tEnableCostsModule) = 1
    Else
        .Cells(cRowPos, colPos.DB) = 0
        .Cells(cRowPos, colPos.tEnableCostsModule) = 0
    End If
    .Range(.Cells(cHeaderRow + 1, colPos.BCS), .Cells(Cells.Rows.Count, colPos.BCS)).Locked = False
    .Range(.Cells(cHeaderRow + 1, colPos.ECS), .Cells(Cells.Rows.Count, colPos.ECS)).Locked = False
    .Range(.Cells(cHeaderRow + 1, colPos.ACS), .Cells(Cells.Rows.Count, colPos.ACS)).Locked = False
End With
LockSheet Sheets(cGanttTemplateSheetName)
Application.EnableEvents = True

If sLicType = sLTrialV Then
    MsgBox "License code validated." & vbLf & "Thank you for downloading this free version.", vbInformation, "Information"
ElseIf sLicType = sLEnterpriseV Then
    MsgBox "License code validated." & vbLf & "Thank you for purchasing this Ultimate version.", vbInformation, "Information"
    MsgBox "Click on Add button from the Gantt menu to add a new Gantt Chart", vbInformation, "Info"
ElseIf sLicType = sLMacUltimateV Then
    MsgBox "License code validated." & vbLf & "Thank you for purchasing this MAC Ultimate version.", vbInformation, "Information"
    MsgBox "Click on Add button from the Gantt menu to add a new Gantt Chart", vbInformation, "Info"
ElseIf sLicType = sLProV Then
    MsgBox "License code validated." & vbLf & "Thank you for purchasing this Pro version.", vbInformation, "Information"
    MsgBox "Click on Add button from the Gantt menu to add a new Gantt Chart", vbInformation, "Info"
ElseIf sLicType = slFFTV Then
    MsgBox "License code validated." & vbLf & "Thank you for downloading this fully functional trial version. This version will expire on " & _
           Format(Replace(UnDecipher(Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.LicDuration)), cLicConst, vbNullString), "DD-MMM-YYYY") & ".", vbInformation, "Information"
ElseIf sLicType = slFFTOfflineV Then
    MsgBox "License code validated." & vbLf & "Thank you for downloading this trial version.", vbInformation, "Information"
End If
If sTempStr = vbNullString Then RefreshRibbon
    sTempStr = vbNullString
    IsLicValid = True
    GoTo last
End If
If IsGSheet = False Then
    IsLicValid = True
    GoTo last
End If
sLicType = Cells(cRowPos, colPos.LiType)
If sLicType = sLTrialV Then
    If Application.WorksheetFunction.CountA(ActiveSheet.Range("A:A")) - 3 >= cTrialVersionTasksCount Then
        sTempStr1 = cstrTrailMsg
        frm_trial.Show
        IsLicValid = 0
        GoTo last
    Else
        IsLicValid = True
    End If
ElseIf sLicType = vbNullString Then
    GoTo last
Else
    IsLicValid = True
End If
last:

End Function
Function RestrictThisInTrial(Optional t As Boolean) As Boolean
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLiType) = sLTrialV Then
        RestrictThisInTrial = True
    End If
End Function
Sub ShowLimitation(Optional t As Boolean)
    sTempStr1 = cstrTrailLimitationsMsg
    frm_trial.Show
End Sub
Sub AddNewLicense(Optional t As String)
    sTempStr = "Upgrade"
    If GetLicType = vbNullString And GetGanttSheetsCount = 1 Then
        IsLicValid
    Else
        UpgradeLicenseToUltimate
    End If
    sTempStr = vbNullString
End Sub
Sub UpgradeLicenseToUltimate(Optional t As Boolean, Optional bBypass As Boolean)
    Dim ws As Worksheet, sLicType As String
    Set ws = Sheets(cGanttTemplateSheetName)

    If ws.Cells(cRowPos, colPos.tLiType) = sLEnterpriseV Then
        MsgBox "You already have the Ultimate Version.", vbInformation, "Information"
        GoTo last
    ElseIf ws.Cells(cRowPos, colPos.tLiType) = sLMacUltimateV Then
        MsgBox "You already have the MAC Ultimate Version.", vbInformation, "Information"
        GoTo last
    Else

        Dim sl As String
        If bBypass = 0 Then frm_LicEntry.Show
        If sfLicenseCode = vbNullString Then GoTo last
        If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) Then GoTo last
        sl = sLiType

        If sl = vbNullString Then
            GoTo last
        ElseIf sl = sLTrial Then
            sLicType = sLTrialV
        ElseIf sl = sLPro Then
            sLicType = sLProV
        ElseIf sl = sLEnterprise Then
            sLicType = sLEnterpriseV
        ElseIf sl = sLFFT Then
            sLicType = slFFTV
        ElseIf sl = sLFFTOffline Then
            sLicType = slFFTOfflineV
        ElseIf sl = sLMacUltimate Then
            sLicType = sLMacUltimateV
        Else
        End If
        Application.EnableEvents = False

        For Each ws In ThisWorkbook.Sheets
            If ws.Cells(1, 1) <> "tType" Then GoTo NextWs
            UnLockSheet ws
            With ws
                .Cells(cRowPos, colPos.LicenseVal) = 1
                .Cells(cRowPos, colPos.LiType) = sLicType

                .Cells(cRowPos, colPos.usrActivatedDate).NumberFormat = "@"
                .Cells(cRowPos, colPos.usrActivatedDate) = Decipher(Format(Date, "YYYYMMDD"))

                With .Cells(cRowPos, colPos.usrEmailID)
                    .NumberFormat = "@"
                    .Value = Decipher(sfUsrEmailID)
                End With
                .Cells(cRowPos, colPos.usrName).NumberFormat = "@"
                .Cells(cRowPos, colPos.usrName) = sfUsrName
                .Cells(cRowPos, colPos.tliky) = sfLicenseCode

                If IsDate(lLicDur) Then
                    .Cells(cRowPos, colPos.LicDuration) = Decipher(CStr(Format(lLicDur, "dd-mmm-yyyy hh:mm:ss")) & cLicConst)
                ElseIf lLicDur = "lifetime" Then
                End If

                If sLicType = sLTrialV Or sLicType = sLEnterpriseV Or sLicType = sLProV Or sLicType = slFFTV Or sLicType = slFFTOfflineV Or sLicType = sLMacUltimateV Then
                    .Cells(cRowPos, colPos.DB) = 1
                    .Cells(cRowPos, colPos.tEnableCostsModule) = 1
                Else
                    .Cells(cRowPos, colPos.DB) = 0
                    .Cells(cRowPos, colPos.tEnableCostsModule) = 0
                End If

                .Range(.Cells(cHeaderRow + 1, colPos.BCS), .Cells(Cells.Rows.Count, colPos.BCS)).Locked = False
                .Range(.Cells(cHeaderRow + 1, colPos.ECS), .Cells(Cells.Rows.Count, colPos.ECS)).Locked = False
                .Range(.Cells(cHeaderRow + 1, colPos.ACS), .Cells(Cells.Rows.Count, colPos.ACS)).Locked = False


            End With

            LockSheet ws
NextWs:
        Next ws
        ThisWorkbook.Save
        Application.EnableEvents = True

        If sLicType = sLTrialV Then
            MsgBox "License code validated." & vbLf & "Thank you for downloading this free version.", vbInformation, "Information"
            RefreshRibbon
            Exit Sub
        ElseIf sLicType = sLEnterpriseV Then
            MsgBox "License code validated." & vbLf & "Thank you for upgrading to Ultimate version.", vbInformation, "Information"
            RefreshRibbon
            Exit Sub
        ElseIf sLicType = sLMacUltimateV Then
            MsgBox "License code validated." & vbLf & "Thank you for upgrading to MAC Ultimate version.", vbInformation, "Information"
            RefreshRibbon
            Exit Sub
        ElseIf sLicType = sLProV Then
            MsgBox "License code validated." & vbLf & "Thank you for upgrading to Pro version.", vbInformation, "Information"
            RefreshRibbon
            Exit Sub
        ElseIf sLicType = slFFTV Then
            MsgBox "License code validated." & vbLf & "Thank you for downloading this fully functional trial version. This version will expire on " & _
                   Format(Replace(UnDecipher(Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.LicDuration)), cLicConst, vbNullString), "DD-MMM-YYYY") & ".", vbInformation, "Information"
            RefreshRibbon
            Exit Sub
        ElseIf sLicType = slFFTOfflineV Then
            MsgBox "License code validated." & vbLf & "Thank you for downloading this trial version.", vbInformation, "Information"
            RefreshRibbon
            Exit Sub
        End If

        GoTo last


    End If
last:
    Set ws = Nothing
    RefreshRibbon
End Sub
Sub AddExpiryDateforTrialOffline(Optional t As Boolean)
UnLockSheet Sheets(cGanttTemplateSheetName)
    With Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.LicDuration)
        If .Value = vbNullString Then
            .Value = Decipher(CStr(Format(Now() + 2, "dd-mmm-yyyy hh:mm:ss")) & cLicConst)
        End If
    End With
LockSheet Sheets(cGanttTemplateSheetName)
End Sub

Sub RemoveLicense(Optional t As Boolean)
    Dim ws As Worksheet
    t = Application.EnableEvents
    DisableAll
    For Each ws In ThisWorkbook.Sheets
        If ws.Cells(1, 1) = "tType" Then
            UnLockSheet ws
            With ws
                .Cells(cRowPos, colPos.tEnableCostsModule) = 0
                .Cells(cRowPos, colPos.tLicenseVal) = 0
                .Cells(cRowPos, colPos.tLiType) = vbNullString
                .Cells(cRowPos, colPos.usrName) = vbNullString
                .Cells(cRowPos, colPos.usrEmailID) = vbNullString
                .Cells(cRowPos, colPos.usrActivatedDate) = vbNullString
                .Cells(cRowPos, colPos.tliky) = "-"
                .Cells(cRowPos, colPos.LicDuration) = vbNullString
            End With
            LockSheet ws
        End If
    Next ws
    If t Then EnableAll
    Set ws = Nothing
End Sub
Sub RemoveLicenseForTrial(Optional t As Boolean)
    Dim ws As Worksheet
    t = Application.EnableEvents
    DisableAll
    For Each ws In ThisWorkbook.Sheets
        If ws.Cells(1, 1) = "tType" Then
            UnLockSheet ws
            With ws
                .Cells(cRowPos, colPos.tEnableCostsModule) = 0
                .Cells(cRowPos, colPos.tLicenseVal) = 0
                .Cells(cRowPos, colPos.usrName) = vbNullString
                .Cells(cRowPos, colPos.usrEmailID) = vbNullString
                .Cells(cRowPos, colPos.usrActivatedDate) = vbNullString
                .Cells(cRowPos, colPos.tliky) = "-"
                .Cells(cRowPos, colPos.LicDuration) = "-"
            End With
            LockSheet ws
        End If
    Next ws
    If t Then EnableAll
    Set ws = Nothing
End Sub

Function IsDataCollapsed(Optional t As Boolean) As Boolean
    Dim cRow As Long, r As Range, lRow As Long
    cRow = cHeaderRow + 1
    lRow = GetLastTaskRowNo - 2
    Set r = Range(Cells(cRow, colPos.WBS), Cells(lRow, colPos.WBS))
    If Cells(cHeaderRow, colPos.WBS).ColumnWidth = 0 Then
        r.Columns.AutoFit
    End If
    If r.Cells.Count = 1 Then Exit Function


    If r.SpecialCells(xlCellTypeVisible).Cells.Count <> lRow - cHeaderRow Then
        If MsgBox("You cannot perform this action when task groups are collapsed or filtered." & vbLf & _
                  "Do you want to continue by expanding or unfiltering them?", vbQuestion + vbYesNo, "Information") = vbYes Then
            ExpandAlLGroups
            Exit Function
        Else
            IsDataCollapsed = True
            Exit Function
        End If
    End If


End Function
Function GetDateFormatOverride(sdf As String) As String
    GetDateFormatOverride = Replace(Replace(sdf, "/", "\/"), "-", "\-")
End Function
Function GetDateFormatForDisplay(sdf As String) As String
    GetDateFormatForDisplay = Replace(Replace(sdf, "\/", "/"), "\-", "-")
End Function
Sub EnableShortCutKeys(Optional t As Boolean)
    If IsAnyOpenWorkbookProtected Then Exit Sub
    On Error Resume Next
    Application.OnKey "%{RIGHT}", "MakeTaskChild"
    Application.OnKey "%{LEFT}", "MakeTaskParent"
    Application.OnKey "%{UP}", "MoveTaskAbove"
    Application.OnKey "%{DOWN}", "MoveTaskBelow"
    Application.OnKey "%{RETURN}", "mEditTask"
    Application.OnKey "{F7}", "DoSpellCheck"
    Application.OnKey "+^L", "AddFilterToTasksTrigger"
    On Error GoTo 0
End Sub
Sub DisableShortCutKeys(Optional t As Boolean)
    On Error Resume Next
    Application.OnKey "%{RIGHT}"
    Application.OnKey "%{LEFT}"
    Application.OnKey "%{UP}"
    Application.OnKey "%{DOWN}"
    Application.OnKey "%{RETURN}"
    Application.OnKey "{F7}"
    Application.OnKey "+^L"
    On Error GoTo 0
End Sub
Function EnableKeys(Optional t As Boolean)
    If IsAnyOpenWorkbookProtected Then Exit Function
    On Error Resume Next
    Application.OnKey "^d"
    Application.OnKey "^D"
    Application.OnKey "^r"
    Application.OnKey "^R"
    On Error GoTo 0
End Function
Function DisableKeys(Optional t As Boolean)
    If IsAnyOpenWorkbookProtected Then Exit Function
    On Error Resume Next
    Application.OnKey "^d", "DisableKeysDummy"
    Application.OnKey "^D", "DisableKeysDummy"
    Application.OnKey "^r", "DisableKeysDummy"
    Application.OnKey "^R", "DisableKeysDummy"

    On Error GoTo 0
End Function
Sub DisableKeysDummy(Optional t As Boolean)

End Sub
Function GetNextIDNumber(Optional t As Boolean) As Long
    GetNextIDNumber = Application.WorksheetFunction.Max(Range(Cells(cHeaderRow + 1, colPos.tid), Cells(Cells.Rows.Count, colPos.tid))) + 1
End Function

Sub HighlightParentTasks(Optional bRowOnly As Long, Optional t As Boolean)
    Dim cRow As Long, c As Range, iLvl As Integer
    cRow = GetLastTaskRowNo - 2
    AddBordersToTasks
    If cRow <= cHeaderRow Then Exit Sub
    If bRowOnly = 0 Then
        Do Until cRow = cHeaderRow
            Set c = Cells(cRow, colPos.Task)
            If c.IndentLevel = c.Offset(1, 0).IndentLevel - 1 Then    'Or c.IndentLevel = 0 Then
                Range(Cells(c.Row, colPos.WBS), Cells(c.Row, colPos.TColor - 1)).Font.Bold = True
            Else
                Range(Cells(c.Row, colPos.WBS), Cells(c.Row, colPos.TColor - 1)).Font.Bold = False
            End If
            cRow = cRow - 1
        Loop
    Else
        cRow = bRowOnly
        Do Until cRow = cHeaderRow
            Set c = Cells(cRow, colPos.Task)
            iLvl = c.IndentLevel
            If iLvl = c.Offset(1, 0).IndentLevel - 1 Then    'Or c.IndentLevel = 0 Then
                Range(Cells(c.Row, colPos.WBS), Cells(c.Row, colPos.TColor - 1)).Font.Bold = True
            Else
                Range(Cells(c.Row, colPos.WBS), Cells(c.Row, colPos.TColor - 1)).Font.Bold = False
            End If
            cRow = cRow - 1
            If iLvl = 0 Then Exit Do
        Loop
    End If
End Sub
Sub AddBordersToTasks(Optional cRow As Long, Optional t As Boolean)
rungsschk
    Dim c As Range
    If cRow = 0 Then
        Set c = Range(Cells(cProjectNameRow + 1, colPos.tType), Cells(GetLastTaskRowNo - 2, colPos.TimelineEnd))
    Else
        Set c = Range(Cells(cRow, colPos.tType), Cells(cRow, colPos.TimelineEnd))
    End If
    With c
        With .Borders(xlEdgeTop)
            .lineStyle = xlContinuous
            .Color = gss.Range("AH6").Interior.Color
        End With

        With .Borders(xlEdgeBottom)
            .lineStyle = xlContinuous
            .Color = gss.Range("AH6").Interior.Color
        End With
        With .Borders(xlInsideHorizontal)
            .lineStyle = xlContinuous
            .Color = gss.Range("AH6").Interior.Color
        End With
    End With
End Sub
Sub ResetParentCosts(cRow)
    If cRow = cHeaderRow + 1 Then Exit Sub
    Dim c As Range
    Set c = Cells(cRow, colPos.Task)
    If c.IndentLevel - 1 = c.Offset(-1, 0).IndentLevel Then
        Cells(cRow - 1, colPos.ECS) = vbNullString
        Cells(cRow - 1, colPos.ACS) = vbNullString
        Cells(cRow - 1, colPos.BCS) = vbNullString
    End If
End Sub
Sub AddHolidaysAsComments(Optional t As Boolean)
rungsschk
Dim cCol As Long, iRow As Long, c As Range
Dim bFound As Boolean, b1 As Boolean, b2 As Boolean

    b1 = ActiveSheet.ProtectContents
    b2 = Application.EnableEvents
    DisableAll
    If Cells(cRowPos, colPos.CurrentView) <> "D" Then
        
        GoTo last
    End If
    Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AP6").Interior.Color
    For cCol = colPos.TimelineStart To colPos.TimelineEnd
        iRow = 2
        Do Until gss.Cells(iRow, 6) = vbNullString
            If CDate(gss.Cells(iRow, 6)) = CDate(Cells(cTimelineDateRow, cCol)) Then
                bFound = True
                Exit Do
            End If
            iRow = iRow + 1
        Loop
        Set c = Cells(cTimelineDateNumbersRow, cCol)
        If bFound = True Then
            
            c.Interior.Color = gss.Range("AL6").Interior.Color
        Else
            
        End If
        bFound = False
    Next cCol
last:

    If b2 Then EnableAll
    If b1 Then LockSheet ActiveSheet

End Sub


Function MoveAsc(ByVal a, ByVal mLvl)

    mLvl = mLvl Mod No_of_Chars
    a = a + mLvl
    If a < min_ASC Then
        a = a + No_of_Chars
    ElseIf a > Max_ASC Then
        a = a - No_of_Chars
    End If
    MoveAsc = a
End Function
Function Decipher(ByVal s As String, Optional ByVal key As String) As String
    Dim p, keyPos, c, e, k, chkSum
    key = "GET"
    If key = vbNullString Then
        Decipher = s
        Exit Function
    End If
    For p = 1 To Len(s)
        If Asc(Mid(s, p, 1)) < min_ASC Or Asc(Mid(s, p, 1)) > Max_ASC Then Exit Function

    Next p
    For keyPos = 1 To Len(key)
        chkSum = chkSum + Asc(Mid(key, keyPos, 1)) * keyPos
    Next keyPos
    keyPos = 0
    For p = 1 To Len(s)
        c = Asc(Mid(s, p, 1))
        keyPos = keyPos + 1
        If keyPos > Len(key) Then keyPos = 1
        k = Asc(Mid(key, keyPos, 1))
        c = MoveAsc(c, k)
        c = MoveAsc(c, k * Len(key))
        c = MoveAsc(c, chkSum * k)
        c = MoveAsc(c, p * k)
        c = MoveAsc(c, Len(s) * p)
        e = e & Chr(c)
    Next p
    Decipher = e
End Function
Function UnDecipher(ByVal s As String, Optional ByVal key As String) As String
    Dim p, keyPos, c, d, k, chkSum
    key = "GET"
    If key = vbNullString Then
        UnDecipher = s
        Exit Function
    End If
    For keyPos = 1 To Len(key)
        chkSum = chkSum + Asc(Mid(key, keyPos, 1)) * keyPos
    Next keyPos
    keyPos = 0
    For p = 1 To Len(s)
        c = Asc(Mid(s, p, 1))
        keyPos = keyPos + 1
        If keyPos > Len(key) Then keyPos = 1
        k = Asc(Mid(key, keyPos, 1))

        c = MoveAsc(c, -(Len(s) * p))
        c = MoveAsc(c, -(p * k))
        c = MoveAsc(c, -(chkSum * k))
        c = MoveAsc(c, -(k * Len(key)))
        c = MoveAsc(c, -k)
        d = d & Chr(c)
    Next p
    UnDecipher = d
End Function

Function IsMultipleTaskAddition(sRng As Range) As Boolean
    Dim tCount As Long
    tCount = GetLastTaskRowNo()
    If Not Intersect(sRng, Range(Cells(tCount - 1, colPos.Task), Cells(tCount, colPos.Task))) Is Nothing And sRng.Cells.Rows.Count > 1 Then
        IsMultipleTaskAddition = True
    End If
End Function

Function RestrictGanttCharts(Optional bDonotShowMsg As Boolean, Optional bNewChartAddition As Boolean) As Boolean
    Dim ws As Worksheet, wsCount As Long

    If GetLicType = sLTrialV Then
        For Each ws In ThisWorkbook.Sheets
            If ws.Cells(1, 1) = "tType" Then
                wsCount = wsCount + 1
            End If
        Next ws
    End If

    If wsCount > 2 Or (bNewChartAddition = True And wsCount = 2) Then
        RestrictGanttCharts = True
        If bDonotShowMsg = False Then ShowTrialRestriction
    End If
End Function
Function GetGanttSheetsCount() As Long
    Dim ws As Worksheet
    For Each ws In ThisWorkbook.Sheets
        If ws.Cells(1, 1) = "tType" Then
            GetGanttSheetsCount = GetGanttSheetsCount + 1
        End If
    Next ws
End Function
Sub ShowTrialRestriction(Optional t As String)
    MsgBox "This free version is limited to 1 Gantt Chart only." & vbCrLf & "Delete extra gantt charts", vbInformation, "Free Version"
End Sub
Function GetLastTaskRowNo(Optional ws As Worksheet) As Long
    If ws Is Nothing Then
        GetLastTaskRowNo = Evaluate("counta(A:A)+8")
    Else
        GetLastTaskRowNo = Evaluate("counta(" & "'" & ws.Name & "'!" & "A:A)+8")
    End If
End Function
Sub OpenHyperlink(sURL As String)
    On Error Resume Next
    ThisWorkbook.FollowHyperlink Address:=sURL, NewWindow:=True

    If Err.Number <> 0 Then
        MsgBox "Please goto to " & "www.ganttexcel.com", , "Gantt Excel"
    End If

    On Error GoTo 0
End Sub

#If Mac Then



    #If VBA7 Then

Function execShell(command As String, Optional ByRef exitCode As Long) As String
    Dim file As LongPtr
    file = popen(command, "r")

    If file = 0 Then
        Exit Function
    End If

    While feof(file) = 0
        Dim sGarb As String
        Dim read As Long
        sGarb = Space(50)
        read = fread(sGarb, 1, Len(sGarb) - 1, file)
        If read > 0 Then
            sGarb = Left$(sGarb, read)
            execShell = execShell & sGarb
        End If
    Wend

    exitCode = pclose(file)
End Function

Function GetWebResponseMac(sURL As String, squery As String) As String

    Dim sCmd As String
    Dim sResult As String
    Dim lExitCode As Long

    sCmd = "curl --get -d """ & squery & """" & " " & sURL
    sResult = execShell(sCmd, lExitCode)
    GetWebResponseMac = sResult

End Function

#Else

Function execShell(command As String, Optional ByRef exitCode As Long) As String

    Dim file As Long
    file = popen(command, "r")

    If file = 0 Then
        Exit Function
    End If

    While feof(file) = 0
        Dim sGarb As String
        Dim read As Long
        sGarb = Space(50)
        read = fread(sGarb, 1, Len(sGarb) - 1, file)
        If read > 0 Then
            sGarb = Left$(sGarb, read)
            execShell = execShell & sGarb
        End If
    Wend

    exitCode = pclose(file)

End Function

Function GetWebResponseMac(sURL As String, squery As String) As String
''
    Dim sCmd As String
    Dim sResult As String
    Dim lExitCode As Long


    sCmd = "curl --get -d """ & squery & """" & " " & sURL
    sResult = execShell(sCmd, lExitCode)
    GetWebResponseMac = sResult

End Function

#End If

#End If

#If Mac Then
#Else
Function GetWebResponse(sURL As String) As String
    If sURL = vbNullString Then Exit Function
    Dim wR As Object         'WinHttp.WinHttpRequest
    Set wR = CreateObject("WinHttp.WinHttpRequest.5.1")
    On Error Resume Next
    wR.Open "GET", sURL
    wR.Send
    If Err.Number <> 0 Then
        GetWebResponse = "Error - " & Err.Description
        Err.Clear
    Else
        GetWebResponse = wR.ResponseText
    End If
    On Error GoTo 0
    Set wR = Nothing
End Function

#End If


Function GetDataFromURL(strURL, strMethod, strPostData, lngTimeout)

    Dim strUserAgentString
    Dim intSslErrorIgnoreFlags
    Dim blnEnableRedirects
    Dim blnEnableHttpsToHttpRedirects
    Dim strHostOverride
    Dim strLogin
    Dim strPassword
    Dim strResponseText
    Dim objWinHttp
    strUserAgentString = "http_requester/0.1"
    intSslErrorIgnoreFlags = 13056
    blnEnableRedirects = True
    blnEnableHttpsToHttpRedirects = True
    strHostOverride = vbNullString
    strLogin = vbNullString
    strPassword = vbNullString
    Set objWinHttp = CreateObject("WinHttp.WinHttpRequest.5.1")
    objWinHttp.SetTimeouts lngTimeout, lngTimeout, lngTimeout, lngTimeout
    objWinHttp.Open strMethod, strURL
    If strMethod = "POST" Then
        objWinHttp.SetRequestHeader "Content-type", _
                                    "application/x-www-form-urlencoded"
    End If
    If strHostOverride <> vbNullString Then
        objWinHttp.SetRequestHeader "Host", strHostOverride
    End If
    objWinHttp.Option(0) = strUserAgentString
    objWinHttp.Option(4) = intSslErrorIgnoreFlags
    objWinHttp.Option(6) = blnEnableRedirects
    objWinHttp.Option(12) = blnEnableHttpsToHttpRedirects
    If (strLogin <> vbNullString) And (strPassword <> vbNullString) Then
        objWinHttp.SetCredentials strLogin, strPassword, 0
    End If
    On Error Resume Next
    objWinHttp.Send (strPostData)
    If Err.Number = 0 Then
        If objWinHttp.Status = "200" Then
            GetDataFromURL = objWinHttp.ResponseText
        Else
            GetDataFromURL = "HTTP " & objWinHttp.Status & " " & _
                             objWinHttp.StatusText
        End If
    Else
        GetDataFromURL = "Error " & Err.Number & " " & Err.Source & " " & _
                         Err.Description
    End If
    On Error GoTo 0
    Set objWinHttp = Nothing
End Function

Function GetLicDurFromResponse(sStr As String) As String
    Dim sPos As Long, lPos As Long
    sPos = InStr(1, sStr, "expires", vbTextCompare) + Len("expires") + 2
    lPos = InStr(sPos, sStr, ",")
    GetLicDurFromResponse = Replace(Mid(sStr, sPos, lPos - sPos), Chr(34), vbNullString)
End Function

Sub CloseActiveFile(Optional t As String)
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    ThisWorkbook.Close False
    Application.DisplayAlerts = True
    Application.EnableEvents = True
End Sub


Public Function WeekNumVBA(ByVal dDate As Date, sWeekType) As Integer
    If sWeekType = "ISO" Then
        WeekNumVBA = DatePart("ww", dDate - Weekday(dDate, 2) + 4, 2, 2)
    Else
        WeekNumVBA = WorksheetFunction.WeekNum(dDate, 2)
    End If
End Function

Sub TriggerWorkbookClose(Optional t As Boolean)
    Set colPos = Nothing
    Dim intResponse As Integer
    If Not ThisWorkbook.Saved Then
        intResponse = MsgBox("Do you want to save this file?" & vbNewLine & vbNewLine & _
                             "Select 'Yes' to save the file" & vbNewLine & _
                             "Select 'No' to close without saving", vbYesNo, "Confirm - Save File")
        If intResponse = vbYes Then ThisWorkbook.Save
    End If
    ThisWorkbook.Saved = True
    bClosing = True
    ThisWorkbook.Close
End Sub

Public Function GetUserNameMac(Optional t As String) As String
    Dim sMyScript As String

    sMyScript = "set userName to short user name of (system info)" & vbNewLine & "return userName"
    #If Mac Then
        GetUserNameMac = MacScript(sMyScript)
    #End If
End Function

Function GetLastRowOfFamily(cRow As Long) As Long
    Dim vArr() As Variant, lRow As Long, i As Long, w As String

    i = Cells(cRow, colPos.Task).IndentLevel
    If i = 0 Then
        w = Cells(cRow, colPos.WBS)
    Else
        w = Left(Cells(cRow, colPos.WBS), InStr(Cells(cRow, colPos.WBS), ".") - 1)
    End If
    lRow = GetLastTaskRowNo - 1
    If lRow = cRow + 1 Then
        GetLastRowOfFamily = cRow
        Exit Function
    End If
    vArr = Range(Cells(cRow + 1, colPos.WBS), Cells(lRow, colPos.WBS))

    For i = LBound(vArr) To UBound(vArr)
        If vArr(i, 1) = w + 1 Then
            GetLastRowOfFamily = i + cRow - 1
            Exit For
        ElseIf vArr(i, 1) = vbNullString Then
            GetLastRowOfFamily = i + cRow - 1
            Exit For
        End If
    Next
End Function
Function GetDecimalSeperator() As String
    GetDecimalSeperator = Application.DecimalSeparator
End Function
Function GetThousandsSeperator() As String
    GetThousandsSeperator = Application.ThousandsSeparator
End Function

Sub DoSpellCheck(Optional t As Boolean)
    Dim ws As Worksheet, r As Range, sRng As Range
    Set ws = ActiveSheet
    If ws.Cells(1, 1) <> "tType" Then Exit Sub


    Set sRng = Union(ws.Range(ws.Cells(1, colPos.tid), ws.Cells(ws.Cells.Rows.Count, colPos.WBS - 1)), _
                     ws.Range(ws.Cells(1, 1), ws.Cells(cHeaderRow, colPos.TimelineMaxEnd)))

    Set r = Selection

    If Intersect(r, sRng) Is Nothing Then
    Else
        MsgBox "Please select only task data cells", vbInformation, "Invalid Selection"
        Exit Sub
    End If

    If r.Cells.Count = 1 Then
        Set r = ws.Range(ws.Cells(cHeaderRow + 1, colPos.WBS), ws.Cells(GetLastTaskRowNo, colPos.TimelineStart - 1))
    End If

    UnLockSheet ws
    r.Cells.CheckSpelling
    LockSheet ws

    MsgBox "Spell Check Completed", vbInformation, "Gantt Excel"
    Set ws = Nothing

End Sub
Sub AddFilterToTasksTrigger(Optional t As Boolean)
    Dim ws As Worksheet, cCol As Long, tRng As Range, bEnableEvents As Boolean
    If IsActiveSheetGanttSheet = False Then Exit Sub

    Set ws = ActiveSheet
    UnLockSheet ws
    Set tRng = Selection

    If Not ws.AutoFilterMode Then
        ws.Range(ws.Cells(cHeaderRow, colPos.tid), ws.Cells(cHeaderRow, colPos.TimelineStart - 1)).Select
        Selection.AutoFilter

        On Error Resume Next

        bEnableEvents = Application.EnableEvents
        Application.EnableEvents = False
        Cells(cRowPos, colPos.ShowPlanned) = 1
        Cells(cRowPos, colPos.ShowInProgress) = 1
        Cells(cRowPos, colPos.ShowCompleted) = 1
        Cells(cRowPos, colPos.ShowGrouping) = 0
        Application.EnableEvents = bEnableEvents

        For cCol = colPos.TimelineEnd To colPos.TimelineStart - 1 Step -1
            ws.Cells(cHeaderRow, 1).AutoFilter Field:=cCol, VisibleDropDown:=False
        Next cCol
    Else
        ws.AutoFilterMode = False
    End If
    LockSheet ws

    tRng.Select

    On Error GoTo 0
    RefreshRibbon
End Sub
Sub FilterClearTrigger(Optional t As Boolean)
    Dim ws As Worksheet
    If IsActiveSheetGanttSheet = False Then Exit Sub

    Set ws = ActiveSheet
    UnLockSheet ws

    If ws.FilterMode Then
        ws.ShowAllData
    End If
    LockSheet ws
    RefreshRibbon
End Sub


Sub ReApplyAutoFilter(v, lRow As Long)
    Dim ws As Worksheet
    Dim filterArray()
    Dim currentFiltRange As String
    Dim col As Integer

    Set ws = ActiveSheet

    'Capture AutoFilter settings
    If ws.AutoFilterMode = True Then
        With ws.AutoFilter
            currentFiltRange = .Range.Address
            With .Filters
                ReDim filterArray(1 To .Count, 1 To 3)
                For col = 1 To .Count
                    With .Item(col)
                        If .On Then
                            filterArray(col, 1) = .Criteria1
                            If .Operator Then
                                filterArray(col, 2) = .Operator
                                If .Operator = xlAnd Or .Operator = xlOr Then
                                    filterArray(col, 3) = .Criteria2
                                End If
                            End If
                        End If
                    End With
                Next col
            End With
        End With
    End If

    'Remove AutoFilter
    ws.AutoFilterMode = False

    'Your code here
    Range(Cells(1, 1), Cells(lRow, colPos.TimelineStart - 1)).Value = v

    'Restore Filter settings
    If Not currentFiltRange = "" Then
        AddFilterToTasksTrigger
        ' ws.Range(currentFiltRange).AutoFilter
        For col = 1 To UBound(filterArray(), 1)
            If Not IsEmpty(filterArray(col, 1)) Then
                If filterArray(col, 2) Then
                    'check if Criteria2 exists and needs to be populated
                    If filterArray(col, 2) = xlAnd Or filterArray(col, 2) = xlOr Then
                        ws.Range(currentFiltRange).AutoFilter Field:=col, _
                                                              Criteria1:=filterArray(col, 1), _
                                                              Operator:=filterArray(col, 2), _
                                                              Criteria2:=filterArray(col, 3)
                    Else
                        ws.Range(currentFiltRange).AutoFilter Field:=col, _
                                                              Criteria1:=filterArray(col, 1), _
                                                              Operator:=filterArray(col, 2)
                    End If
                Else
                    ws.Range(currentFiltRange).AutoFilter Field:=col, _
                                                          Criteria1:=filterArray(col, 1)
                End If
            End If
        Next col
    End If
End Sub

Function sBrowseForFileMac() As String
    #If Mac Then
        Dim sPath As String
        Dim sScript As String
        Dim sFileFormat As String

        sFileFormat = "{""org.openxmlformats.spreadsheetml.sheet""}"


        On Error Resume Next
        sPath = MacScript("return (path to desktop folder) as String")

        If Val(Application.Version) < 15 Then
            sScript = _
            "set theFile to (choose file of type" & _
                    " " & sFileFormat & " " & _
                      "with prompt ""Please select a file"" default location alias """ & _
                      sPath & """ without multiple selections allowed) as string" & vbNewLine & _
                      "return theFile"
        Else
            sScript = _
            "set theFile to (choose file of type" & _
                    " " & sFileFormat & " " & _
                      "with prompt ""Please select a file"" default location alias """ & _
                      sPath & """ without multiple selections allowed) as string" & vbNewLine & _
                      "return posix path of theFile"
        End If

        sBrowseForFileMac = MacScript(sScript)
        On Error GoTo 0
    #End If
End Function

Sub RemoveSavedDateANDSave(Optional t As Boolean)
t = Application.EnableEvents
Application.EnableEvents = False
Sheets("Template").Cells(cRowPos, colPos.FistSavedDate) = vbNullString
ThisWorkbook.Save
Application.EnableEvents = t
End Sub

Function OpenBuyHyperlink(Optional t As Boolean)
    If sMedium = "cpc" Then
        OpenHyperlink sURL_P & ThisWorkbook.Sheets("Template").Cells(cRowPos, colPos.tUsrEmailID)
    Else
        OpenHyperlink sURL_O & ThisWorkbook.Sheets("Template").Cells(cRowPos, colPos.tUsrEmailID)
    End If
End Function


Function OpenURLOnStartup()

    Dim sWkNum As Long
    Dim url_path As String
    Dim sDate As Date

    If ThisWorkbook.Sheets("Template").Cells(cRowPos, colPos.FistSavedDate) = vbNullString Then
        Exit Function
    Else
        sDate = ThisWorkbook.Sheets("Template").Cells(cRowPos, colPos.FistSavedDate)
    End If

    sWkNum = Int((Date - sDate) / 7)

    Select Case sWkNum
    Case Is = 0
        OpenHyperlink sURLWelcome1 & ThisWorkbook.Sheets("Template").Cells(cRowPos, colPos.tUsrEmailID)
    Case Is = 1
        OpenHyperlink sURLWelcome2 & ThisWorkbook.Sheets("Template").Cells(cRowPos, colPos.tUsrEmailID)
    Case Is = 2
        OpenHyperlink sURLWelcome3 & ThisWorkbook.Sheets("Template").Cells(cRowPos, colPos.tUsrEmailID)
    Case Is >= 3
        OpenHyperlink sURLWelcome4 & ThisWorkbook.Sheets("Template").Cells(cRowPos, colPos.tUsrEmailID)
    End Select

End Function

Function EncodeEmail(s As String)
Const cString  As String = "abcdefghijklmnopqrstuvwxyz1234567890_.()-@!#$%^&*[]{}|?/,<>"
Const nString As String = "1338745223488631774272104097418232296590923454576885693984899550751962469959834398945112339188278764806730201436531511"
Dim f As String
Dim i As Long, t As String
Dim p As Long
For i = 1 To Len(s)
    t = LCase(Mid(s, i, 1))
    p = InStr(1, cString, t, vbTextCompare)
    If p = 0 Then
        f = f & t
    Else
        f = f & Mid(nString, p * 2 - 1, 2)
    End If
    
Next i
EncodeEmail = f
End Function
Attribute VB_Name = "Module1"
Option Explicit
'
'Private Type SYSTEMTIME
'    wYear As Integer
'    wMonth As Integer
'    wDayOfWeek As Integer
'    wDay As Integer
'    wHour As Integer
'    wMinute As Integer
'    wSecond As Integer
'    wMilliseconds As Integer
'End Type
'Private Declare Sub GetSystemTime Lib "kernel32" (lpSystemTime As SYSTEMTIME)
'
'
Public Function TimeToMillisecond() As String
'    Dim tSystem As SYSTEMTIME
'    Dim sRet
'    On Error Resume Next
'    GetSystemTime tSystem
'    sRet = Hour(Now) & ":" & Minute(Now) & ":" & Second(Now) & _
'                ":" & tSystem.wMilliseconds
'    TimeToMillisecond = sRet
End Function
Public Function LogTimeStamp1(s As String)
'Debug.Print s & " " & TimeToMillisecond
End Function
Public Function LogTimeStamp(s As String)
'Debug.Print s & " " & TimeToMillisecond
End Function
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit
Private Sub Workbook_Activate()
    If ActiveWorkbook.Name <> ThisWorkbook.Name Then Exit Sub
    #If Mac Then
        If IsMac2011 Then AddMenusForMac
    #Else
        AddDeleteFromCellMenu
        EnableShortCutKeys
        DisableKeys
    #End If
End Sub
Private Sub Workbook_BeforeClose(Cancel As Boolean)
If ActiveSheet.Cells(1, 1) = "tType" Then
    If checkifdependency(ActiveSheet) = True Then
        Application.EnableEvents = False
        Dim constrainrange As Range
        Dim lasttaskplusone As Long
        lasttaskplusone = Evaluate("counta(" & "'" & ActiveSheet.Name & "'!" & "A:A)+8")
        Set constrainrange = ActiveSheet.Range(Cells(cHeaderRow + 1, 5), Cells(lasttaskplusone, 6))
        With constrainrange
        .ClearContents
        End With
        Application.EnableEvents = True
    Else
    End If
Else
End If
    EnableKeys
    DisableShortCutKeys
    #If Mac Then
        If IsMac2011 Then DeleteMenusForMac
    #Else
        If bClosing Then
        Else
            Cancel = True
            TriggerWorkbookClose
            Exit Sub
        End If
        ThisWorkbook.Saved = True
        bClosing = False
    #End If
End Sub
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    Dim t As Boolean
    t = Application.EnableEvents
    Application.EnableEvents = False
    With Sheets("Template").Cells(cRowPos, colPos.FistSavedDate)
        If .Value = vbNullString Then
            If GetLicType = sLTrialV Then .Value = Date
        End If
    End With
    Application.EnableEvents = t
End Sub
Private Sub Workbook_Deactivate()
    #If Mac Then
        If IsMac2011 Then DeleteMenusForMac
    #Else
        DeleteFromCellMenu
        DisableShortCutKeys
        EnableKeys
    #End If
End Sub
Private Sub Workbook_Open()
On Error Resume Next
    If Left$(DPB.Caption, 4) <> "DPB=" Then
        MsgBox "This file has experienced a problem and must be closed!" & vbCrLf & "Please contact support with error code: 789", vbCritical
        Application.DisplayAlerts = False
        ThisWorkbook.Close False
        Application.DisplayAlerts = True
        Exit Sub
    End If
On Error GoTo 0
If ActiveWorkbook.Name <> ThisWorkbook.Name Then Exit Sub
    #If Mac Then
        If Sheets("Template").Cells(2, colPos.tLiType) <> slFFTV And Sheets("Template").Cells(2, colPos.tLiType) <> sLTrialV And Sheets("Template").Cells(2, colPos.tLiType) <> sLMacUltimateV And Sheets("Template").Cells(2, colPos.tLiType) <> vbNullString Then
            MsgBox sMsgMACNotCompatible, vbInformation, "Gantt Excel"
            Application.DisplayAlerts = False
            ThisWorkbook.Close
            Application.DisplayAlerts = True
            Exit Sub
        End If
        If IsMac2011 Then AddMenusForMac
    #Else
        AddDeleteFromCellMenu
        EnableShortCutKeys
        DisableKeys
    #End If
    sTempStr = "OnStartUp"
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.LiType) = slFFTOfflineV And _
       Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.LicDuration) = "-" Then
        sTempStr = "UpgradeFromDeactivated"
        frm_LicEntry.Show
    ElseIf Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tliky) = vbNullString _
           Or Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tliky) = "-" Then
        Exit Sub
    Else
        frm_About.Show
        If GetLicType = sLTrialV Then
            With Sheets("Template").Cells(cRowPos, colPos.FistSavedDate)
                If .Value = vbNullString Then
                    Application.EnableEvents = False
                    Worksheets("Help").Range("D9") = "Enable Macros"
                    Worksheets("Help").Range("D9").Interior.Color = rgbWhite
                    Worksheets("Project Plan").Select
                    Application.EnableEvents = True
                    frmWelcome.Show
                Else
                    OpenURLOnStartup
                End If
            End With
        End If
        
    Dim ws As Worksheet
    For Each ws In ThisWorkbook.Sheets
        If LCase(ws.Name) <> "help" Then
            If ws.Name = cDashboardSheetName Or ws.Name = cUserDashboardName Or ws.Name = cGanttTemplateSheetName Then

            Else
                If ws.Cells(1, 1) = "tType" Then
                    UnLockSheet ws
                    LockSheet ws
                End If
            End If
        End If
    Next ws
        If Cells(1, 1) = "tType" Then
            UnLockSheet ActiveSheet
            Application.EnableEvents = False
            Application.ScreenUpdating = False
            AutoPopulatePercentages
            ReBuildView
            frmStatus.Show
            DoEvents
            frmStatus.lblStatusMsg.Caption = "Refreshing Project"
            CalculateStartEndConstrainsAllRows
            Application.CalculateFull
            LockSheet ActiveSheet
            Application.ScreenUpdating = True
            Application.EnableEvents = True
            frmStatus.lblPleaseWait.Caption = "Auto closing status popup"
            frmStatus.lblStatusMsg.ForeColor = rgbGreen
            frmStatus.lblStatusMsg.Caption = "All Set - Good to Go!"
            Unload frmStatus
        End If
    End If
    sTempStr = vbNullString
End Sub
Private Sub Workbook_SheetActivate(ByVal Sh As Object)
If IsDashboardSheet(Sh) Then
    RefreshDashboard 0
End If
If IsActiveSheetGanttSheet Then
    ReCalculateColPos
    findgss
    #If Mac Then
        If IsMac2011 Then
            AddMenusForMac
        Else
            RefreshRibbon
        End If
    #Else
        RefreshRibbon
        AddDeleteFromCellMenu
    #End If
    sArr.LoadAllArrays
    UnLockSheet ActiveSheet
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    AutoPopulatePercentages
    ReBuildView
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    LockSheet ActiveSheet
    If checkifdependency(ActiveSheet) = True Then
        frmStatus.Show
        DoEvents
        frmStatus.lblStatusMsg.Caption = "Refreshing Project"
        Application.EnableEvents = False
        Application.ScreenUpdating = False
        CalculateStartEndConstrainsAllRows
        Application.CalculateFull
        Application.ScreenUpdating = True
        Application.EnableEvents = True
        frmStatus.lblPleaseWait.Caption = "Auto closing status popup"
        frmStatus.lblStatusMsg.ForeColor = rgbGreen
        frmStatus.lblStatusMsg.Caption = "All Set - Good to Go!"
        Application.Wait (Now + TimeValue("0:00:01"))
        Unload frmStatus
    Else
    End If
Else
    RefreshRibbon
End If
End Sub
Private Sub Workbook_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
    If Sh.Cells(1, 1) <> "tType" Then Exit Sub
    If IsLicValid(0, 1) = False Then Exit Sub
    dblClickCol = Target.Column
    dblClickRow = Target.Row
    If dblClickCol >= colPos.TimelineStart Then
        Cancel = True
        Exit Sub
    End If
    Cancel = True
    If (dblClickCol = colPos.ESD Or dblClickCol = colPos.EED Or _
        dblClickCol = colPos.ASD Or dblClickCol = colPos.AED Or _
        dblClickCol = colPos.BSD Or dblClickCol = colPos.BED) And _
        Sh.Cells(dblClickRow, 1) <> vbNullString And _
        dblClickRow > cHeaderRow Then

        frmDateSelector.Show
        Exit Sub
    End If
    If dblClickRow >= 6 And dblClickRow <= 8 Then
        LoadNewGanttFormOnDblClick
    ElseIf dblClickRow >= cHeaderRow + 1 And dblClickCol <> colPos.TaskLead Then
        Call LoadFormOnDblClick
    ElseIf dblClickRow >= cHeaderRow + 1 And dblClickCol = colPos.TaskLead Then
        If Cells(dblClickRow, 1) <> vbNullString Then
            frm_ResourceSelector.Show
        Else
            Cancel = False
        End If
    End If
End Sub
Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
If IsDashboardSheet(Sh) Then
    If Target.Address = "$D$2" Then
        RefreshDashboard 0
    End If
    Exit Sub
End If
If Sh.Cells(1, 1) <> "tType" Then Exit Sub
If IsLicValid(0, 1) = False Then Exit Sub
If RestrictGanttCharts Then
    Application.EnableEvents = False
    Application.Undo
    Application.EnableEvents = True
    Exit Sub
End If
If Target.Column = colPos.WBS And Target.Row = cTimelineDateRow Then
    If DoesDashboardUserSheetExists Then
        PopulateSheetsNamesForDropDown True
        Exit Sub
    End If
End If
If Target.Column > colPos.TimelineStart Then
    Exit Sub
    Else
    Call TriggerCellValueChanged(Target)
End If
End Sub
Private Sub Workbook_SheetDeactivate(ByVal Sh As Object)
If Sh.Cells(1, 1) = "tType" Then
    If checkifdependency(Sh) = True Then
        Application.EnableEvents = False
        Dim constrainrange As Range
        Dim lasttaskplusone As Long
        lasttaskplusone = Evaluate("counta(" & "'" & Sh.Name & "'!" & "A:A)+8")
        Set constrainrange = Sh.Range(Sh.Cells(cHeaderRow + 1, 5), Sh.Cells(lasttaskplusone, 6))
        With constrainrange
        .ClearContents
        End With
        Application.EnableEvents = True
    Else
    End If
Else
End If
End Sub
Attribute VB_Name = "UpdateRHValues"
Option Explicit
Option Private Module
Sub UpdateRHValues()
Dim rc As Long, rescount As Long, holcount As Long, i As Long
rc = 2
rescount = Cells(Rows.Count, 1).End(xlUp).Row
    For i = rc To rescount
        If Cells(i, 1) = "" Then
            Range("A" & i).Interior.Color = rgbRed
            MsgBox "Resource Name is empty at cell " & "A" & i
            Range("A" & i).Interior.Color = xlNone
            Exit Sub
        Else
        End If
    Next
    For i = rc To rescount
        If Cells(i, 2) = "" Then
            Cells(i, 2) = 0
        Else
        End If
    Next
On Error Resume Next
    holcount = Cells(Rows.Count, 6).End(xlUp).Row
        
    For i = rc To holcount
        If Cells(i, 6) = "" Then
            Range("F" & i).Interior.Color = rgbRed
            MsgBox "Holiday Date is empty at cell " & "F" & i
            Range("F" & i).Interior.Color = xlNone
            Exit Sub
        Else
        End If
    Next
    For i = rc To holcount
        If Cells(i, 7) = "" Then
            Range("G" & i).Interior.Color = rgbRed
            MsgBox "Holiday Name is empty at cell " & "G" & i
            Range("G" & i).Interior.Color = xlNone
            Exit Sub
        Else
        End If
    Next
Range(Cells(2, 1), Cells(Cells.Rows.Count, 2)).Sort Cells(1, 1), xlAscending, , , , , , xlNo
Range(Cells(2, 6), Cells(Cells.Rows.Count, 7)).Sort Cells(2, 6), xlAscending, , , , , , xlNo

Dim ProjectSheet As String
Dim Projws As Worksheet
ProjectSheet = ActiveSheet.Range("VGR1").Value
Worksheets(ProjectSheet).Activate
Application.EnableEvents = False
rungsschk
gss.visible = xlVeryHidden
Application.EnableEvents = True
Call mRefreshGC
End Sub

Attribute VB_Name = "clsArrProp"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private arrWeekends() As Boolean
Private arrHolidays() As Variant

Private Sub Class_Initialize()
    LoadAllArrays
End Sub

Public Sub LoadAllArrays()
    LoadWeekEnds
    LoadHolidays
End Sub

Public Sub LoadWeekEnds()
    ReDim arrWeekends(1 To 7) As Boolean

    arrWeekends(1) = CBool(Cells(cRowPos, colPos.WorkdayMon))
    arrWeekends(2) = CBool(Cells(cRowPos, colPos.WorkdayTue))
    arrWeekends(3) = CBool(Cells(cRowPos, colPos.WorkdayWed))
    arrWeekends(4) = CBool(Cells(cRowPos, colPos.WorkdayThu))
    arrWeekends(5) = CBool(Cells(cRowPos, colPos.WorkdayFri))
    arrWeekends(6) = CBool(Cells(cRowPos, colPos.WorkDaySat))
    arrWeekends(7) = CBool(Cells(cRowPos, colPos.WorkdaySun))

End Sub

Public Sub LoadHolidays()
    Dim lRow As Long, dcount As Long, i As Long
rungsschk
   lRow = 2
    dcount = WorksheetFunction.CountA(gss.Range(gss.Cells(1, 6), gss.Cells(Cells.Rows.Count, 6))) - 1
    If dcount = 1 Then
        ReDim arrHolidays(1 To dcount, 1 To 1)
        arrHolidays(1, 1) = gss.Range(gss.Cells(lRow, 6), gss.Cells(lRow + dcount - 1, 6))
    ElseIf dcount > 1 Then
        arrHolidays = gss.Range(gss.Cells(lRow, 6), gss.Cells(lRow + dcount - 1, 6 + 1))
    Else
        ReDim arrHolidays(1 To 1, 1 To 1)
        arrHolidays(1, 1) = DateSerial(1901, 1, 1)
    End If
End Sub

Public Property Get Weekends(index As Long) As Boolean
    Weekends = arrWeekends(index)
End Property

Public Property Get Holidays(index As Long) As Date
    Holidays = arrHolidays(index, 1)
End Property
Public Property Get HolidaysArr() As Variant()
    HolidaysArr = arrHolidays
End Property
Attribute VB_Name = "clsCalendarDayLabelClick"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Const cDayLabels As String = "lbl_D_"
Public WithEvents frmLabel As MSForms.label
Attribute frmLabel.VB_VarHelpID = -1

Private Sub frmLabel_Click()
    MarkDate
End Sub

Private Sub frmLabel_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    MarkDate True
End Sub
Sub MarkDate(Optional fClose As Boolean)

    If frmLabel.Caption = vbNullString Then Exit Sub

    Dim r As Integer, c As Integer

    For r = 1 To 6
        For c = 1 To 7
            With frmDateSelector.Controls(cDayLabels & r & "_" & c)
                If .Caption = vbNullString Then
                    .BackColor = frmDateSelector.BackColor
                Else
                    .BackColor = vbWhite
                End If
            End With
        Next c
    Next r

    With frmDateSelector
        .Controls(frmLabel.Name).BackColor = vbGreen
        .lblSelectedDate.Caption = Format(DateSerial(.cmbYears.Value, .cmbMonths.Value, CInt(frmLabel.Caption)), .lblNumberFormat.Caption)
        .lblSelectedDay.Caption = frmLabel.Caption
    End With

    If fClose = True Then frmDateSelector.ClickOkButton

End Sub
Attribute VB_Name = "clsGetColNumbers"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit
Public GanttSheet As Long
Public BaselineBudget As Long
Public EstimatedBudget As Long
Public ActualCosts As Long
Public TotalACS As Long
Public ShowOverdueBar As Long
Public ShowBaselineBar As Long
Public ShowActualBar As Long
Public CurrencySymbol As Long
Public ScrollPosition As Long
Public CurrentView As Long
Public ShowCompleted As Long
Public ShowInProgress As Long
Public ShowPlanned As Long
Public ShowLate As Long
Public WorkdaySun As Long
Public WorkdayMon As Long
Public WorkdayTue As Long
Public WorkdayWed As Long
Public WorkdayThu As Long
Public WorkdayFri As Long
Public WorkDaySat As Long
Public WeekStartDay As Long
Public WeekNumType As Long
Public tLicenseVal As Long
Public TaskRowHeight As Long
Public CostsModule As Long
Public EnableCostsModule As Long
Public DB As Long
Public LiType As Long
Public ShowGrouping As Long
Public DateFormat As Long
Public ShowTodayLines As Long
Public ShowDependencyConnector As Long
Public tUsrName As Long
Public tUsrEmailID As Long
Public usrActivatedDate As Long
Public BarTextEnable As Long
Public BarTextCharacters As Long
Public BarTextFontSize As Long
Public BarTextDataColumnName As Long
Public BarTextIsBold As Long
Public BarTextIsItalic As Long
Public BarTextIsUnderline As Long
Public tliky As Long
Public LicDuration As Long
Public PercentageEntryMode As Long
Public PercentageCalculationType As Long
Public FistSavedDate As Long
Public ProjectSheetName As Long
Public LicenseVal As Long
Public tEnableCostsModule As Long
Public tLiType As Long
Public tType As Long
Public WBS As Long
Public tid As Long
Public tDependency As Long
Public tDependents As Long
Public tStartConstrain As Long
Public tEndConstrain As Long
Public Task As Long
Public TaskLead As Long
Public TaskLeadCost As Long
Public BSD As Long
Public ESD As Long
Public ASD As Long
Public BED As Long
Public EED As Long
Public AED As Long
Public BD As Long
Public ED As Long
Public AD As Long
Public PercentageCompleted As Long
Public BCS As Long
Public ECS As Long
Public ACS As Long
Public Notes As Long
Public TimelineStart As Long
Public TimelineEnd As Long
Public TimelineMaxEnd As Long
Public TColor As Long
Public TPColor As Long
Public BLColor As Long
Public ACColor As Long
Public usrName As Long
Public usrEmailID As Long

Private Sub Class_Initialize()
    Dim ws As Worksheet, r As Range, tl As Long, tR As Range
    If ActiveSheet.Range("A1") <> "tType" Then
        If Range("Z2") = "Dashboard" Then
            Dim tStr As String
            Set ws = Sheets(cUserDashboardName)

            On Error Resume Next
            tStr = Application.WorksheetFunction.index(ws.Range("V:V"), WorksheetFunction.Match(ws.Range("D2"), ws.Range("W:W"), 0), 1)
            If tStr = vbNullString Then
                PopulateSheetsNamesForDropDown
                tStr = Application.WorksheetFunction.index(ws.Range("V:V"), WorksheetFunction.Match(ws.Range("D2"), ws.Range("W:W"), 0), 1)
            End If
            On Error GoTo 0
            Set ws = Sheets(tStr)
        Else
            Set ws = Sheets(cGanttTemplateSheetName)
        End If
    Else
        Set ws = ActiveSheet
    End If
    Set r = ws.Range("1:1")
    Set tR = Sheets(cGanttTemplateSheetName).Range("1:1")

    GanttSheet = Application.WorksheetFunction.Match("GanttSheet", r.Value, 0)
    BaselineBudget = Application.WorksheetFunction.Match("BaselineBudget", r.Value, 0)
    EstimatedBudget = Application.WorksheetFunction.Match("EstimatedBudget", r.Value, 0)
    ActualCosts = Application.WorksheetFunction.Match("ActualCosts", r.Value, 0)
    TotalACS = Application.WorksheetFunction.Match("TotalACS", r.Value, 0)
    ShowOverdueBar = Application.WorksheetFunction.Match("ShowOverdueBar", r.Value, 0)
    ShowBaselineBar = Application.WorksheetFunction.Match("ShowBaselineBar", r.Value, 0)
    ShowActualBar = Application.WorksheetFunction.Match("ShowActualBar", r.Value, 0)
    CurrencySymbol = Application.WorksheetFunction.Match("CurrencySymbol", r.Value, 0)
    ScrollPosition = Application.WorksheetFunction.Match("ScrollPosition", r.Value, 0)
    CurrentView = Application.WorksheetFunction.Match("CurrentView", r.Value, 0)
    ShowCompleted = Application.WorksheetFunction.Match("ShowCompleted", r.Value, 0)
    ShowInProgress = Application.WorksheetFunction.Match("ShowInProgress", r.Value, 0)
    ShowPlanned = Application.WorksheetFunction.Match("ShowPlanned", r.Value, 0)
    ShowLate = Application.WorksheetFunction.Match("ShowLate", r.Value, 0)
    WorkdaySun = Application.WorksheetFunction.Match("WorkdaySun", r.Value, 0)
    WorkdayMon = Application.WorksheetFunction.Match("WorkdayMon", r.Value, 0)
    WorkdayTue = Application.WorksheetFunction.Match("WorkdayTue", r.Value, 0)
    WorkdayWed = Application.WorksheetFunction.Match("WorkdayWed", r.Value, 0)
    WorkdayThu = Application.WorksheetFunction.Match("WorkdayThu", r.Value, 0)
    WorkdayFri = Application.WorksheetFunction.Match("WorkdayFri", r.Value, 0)
    WorkDaySat = Application.WorksheetFunction.Match("WorkDaySat", r.Value, 0)
    WeekStartDay = Application.WorksheetFunction.Match("WeekStartDay", r.Value, 0)
    WeekNumType = Application.WorksheetFunction.Match("WeekNumType", r.Value, 0)
    tLicenseVal = Application.WorksheetFunction.Match("LV", tR.Value, 0)
    TaskRowHeight = Application.WorksheetFunction.Match("TaskRowHeight", r.Value, 0)
    CostsModule = Application.WorksheetFunction.Match("CM", r.Value, 0)
    EnableCostsModule = Application.WorksheetFunction.Match("EC", r.Value, 0)
    DB = Application.WorksheetFunction.Match("DB", r.Value, 0)
    LiType = Application.WorksheetFunction.Match("LiType", r.Value, 0)
    ShowGrouping = Application.WorksheetFunction.Match("ShowGrouping", r.Value, 0)
    DateFormat = Application.WorksheetFunction.Match("DateFormat", r.Value, 0)
    ShowTodayLines = Application.WorksheetFunction.Match("ShowTodayLines", r.Value, 0)
    ShowDependencyConnector = Application.WorksheetFunction.Match("ShowDependencyConnector", r.Value, 0)
    tUsrName = Application.WorksheetFunction.Match("peru", tR.Value, 0)
    tUsrEmailID = Application.WorksheetFunction.Match("chirun", tR.Value, 0)
    usrActivatedDate = Application.WorksheetFunction.Match("vidud", r.Value, 0)
    BarTextEnable = Application.WorksheetFunction.Match("EnableBarText", r.Value, 0)
    BarTextCharacters = Application.WorksheetFunction.Match("BarTextCharacters", r.Value, 0)
    BarTextFontSize = Application.WorksheetFunction.Match("BarTextFontSize", r.Value, 0)
    BarTextDataColumnName = Application.WorksheetFunction.Match("BarTextDataColumnName", r.Value, 0)
    BarTextIsBold = Application.WorksheetFunction.Match("BarTextIsBold", r.Value, 0)
    BarTextIsItalic = Application.WorksheetFunction.Match("BarTextIsItalic", r.Value, 0)
    BarTextIsUnderline = Application.WorksheetFunction.Match("BarTextIsUnderline", r.Value, 0)
    tliky = Application.WorksheetFunction.Match("liky", tR.Value, 0)
    LicDuration = Application.WorksheetFunction.Match("duli", tR.Value, 0)
    PercentageEntryMode = Application.WorksheetFunction.Match("PercentageEntryMode", r.Value, 0)
    PercentageCalculationType = Application.WorksheetFunction.Match("PercentageCalculationType", r.Value, 0)
    FistSavedDate = Application.WorksheetFunction.Match("FiSa", tR.Value, 0)
    ProjectSheetName = Application.WorksheetFunction.Match("ProjectSheetName", r.Value, 0)
    LicenseVal = Application.WorksheetFunction.Match("LV", r.Value, 0)
    tEnableCostsModule = Application.WorksheetFunction.Match("EC", tR.Value, 0)
    tLiType = Application.WorksheetFunction.Match("LiType", tR.Value, 0)
    tType = Application.WorksheetFunction.Match("tType", r.Value, 0)
    WBS = Application.WorksheetFunction.Match("WBS", r.Value, 0)
    tid = Application.WorksheetFunction.Match("tID", r.Value, 0)
    tDependency = Application.WorksheetFunction.Match("tDependency", r.Value, 0)
    tDependents = Application.WorksheetFunction.Match("tDependents", r.Value, 0)
    tStartConstrain = Application.WorksheetFunction.Match("tStartConstrain", r.Value, 0)
    tEndConstrain = Application.WorksheetFunction.Match("tEndConstrain", r.Value, 0)
    Task = Application.WorksheetFunction.Match("Task", r.Value, 0)
    TaskLead = Application.WorksheetFunction.Match("TaskLead", r.Value, 0)
    TaskLeadCost = Application.WorksheetFunction.Match("TaskLeadCost", r.Value, 0)
    BSD = Application.WorksheetFunction.Match("BSD", r.Value, 0)
    ESD = Application.WorksheetFunction.Match("ESD", r.Value, 0)
    ASD = Application.WorksheetFunction.Match("ASD", r.Value, 0)
    BED = Application.WorksheetFunction.Match("BED", r.Value, 0)
    EED = Application.WorksheetFunction.Match("EED", r.Value, 0)
    AED = Application.WorksheetFunction.Match("AED", r.Value, 0)
    BD = Application.WorksheetFunction.Match("BD", r.Value, 0)
    ED = Application.WorksheetFunction.Match("ED", r.Value, 0)
    AD = Application.WorksheetFunction.Match("AD", r.Value, 0)
    PercentageCompleted = Application.WorksheetFunction.Match("PercentageCompleted", r.Value, 0)
    BCS = Application.WorksheetFunction.Match("BCS", r.Value, 0)
    ECS = Application.WorksheetFunction.Match("ECS", r.Value, 0)
    ACS = Application.WorksheetFunction.Match("ACS", r.Value, 0)
    Notes = Application.WorksheetFunction.Match("Notes", r.Value, 0)
    TimelineStart = Application.WorksheetFunction.Match("TimelineStart", r.Value, 0)
    TimelineEnd = Application.WorksheetFunction.Match("TimelineEnd", r.Value, 0)
    TimelineMaxEnd = Application.WorksheetFunction.Match("TimelineMaxEnd", r.Value, 0)
    TColor = Application.WorksheetFunction.Match("TColor", r.Value, 0)
    TPColor = Application.WorksheetFunction.Match("TPColor", r.Value, 0)
    BLColor = Application.WorksheetFunction.Match("BLColor", r.Value, 0)
    ACColor = Application.WorksheetFunction.Match("ACColor", r.Value, 0)
    usrName = Application.WorksheetFunction.Match("peru", r.Value, 0)
    usrEmailID = Application.WorksheetFunction.Match("chirun", r.Value, 0)
    Set r = Nothing: Set tR = Nothing
    Set ws = Nothing
End Sub
Attribute VB_Name = "frmDateSelector"
Attribute VB_Base = "0{009C4286-13A5-405B-8A6C-AE128F7D0414}{CE6B2CB5-4703-43F9-8B3D-E869E4E2434A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Const cDayLabels As String = "lbl_D_"
Dim tDisableFormEvents As Boolean
Public dSelectedDate As Date
Dim cLabel(1 To 42) As New clsCalendarDayLabelClick
Public Sub ClickOkButton()
    btnOk_Click
End Sub
Private Sub btnOk_Click()
    If lblSelectedDate.Caption = vbNullString Then
        MsgBox "Select a date", vbInformation, "No date is selected"
        bNoDateSelectedForForm = True
        Exit Sub
    Else
        If bTriggerFromTaskFormCalendar = False Then
            ActiveCell.Value = DateSerial(cmbYears.Value, cmbMonths.Value, CInt(lblSelectedDay.Caption))
        Else
            dFormDate = DateSerial(cmbYears.Value, cmbMonths.Value, CInt(lblSelectedDay.Caption))
        End If
        CloseForm
    End If
End Sub

Private Sub cmbMonths_Change()
    If tDisableFormEvents = True Then Exit Sub
    dSelectedDate = DateSerial(1900, 1, 1)
    lblSelectedDate.Caption = vbNullString
    BuildCalendar CLng(Me.cmbYears.Value), CInt(Me.cmbMonths.Value)
End Sub

Private Sub cmbYears_Change()
    If tDisableFormEvents = True Then Exit Sub
    dSelectedDate = DateSerial(1900, 1, 1)
    lblSelectedDate.Caption = vbNullString
    BuildCalendar CLng(Me.cmbYears.Value), CInt(Me.cmbMonths.Value)
End Sub

Private Sub UserForm_Initialize()
    Dim i As Long, arrMonth(1 To 12, 1 To 2)
    Dim r As Integer, c As Integer, lCount As Integer
    tDisableFormEvents = True

    'Load Years
    For i = 1901 To 2100
        Me.cmbYears.AddItem i
    Next i

    'Load Localized Months
    For i = 1 To 12
        arrMonth(i, 1) = i
        arrMonth(i, 2) = Format(DateSerial(2017, i, 1), "MMMM")
    Next
    Me.cmbMonths.List = arrMonth


    'Load WeekNames
    For i = 1 To 7
        Me.Controls("lbl_WK" & i).Caption = Left(WeekdayName(Weekday(DateSerial(2016, 8, i), vbMonday), True, vbMonday), 1)
    Next

    'Set Ok Button Focus
    Me.btnOk.SetFocus

    'Populate Calendar
    If bTriggerFromTaskFormCalendar = True Then
        dSelectedDate = dFormDate
        Me.lblNumberFormat.Caption = "DD-MMM-YYYY"
        lblSelectedDate.Caption = Format(dSelectedDate, lblNumberFormat.Caption)
    ElseIf IsDate(ActiveCell) Then
        dSelectedDate = ActiveCell.Value
        Me.lblNumberFormat.Caption = ActiveCell.NumberFormatLocal
        lblSelectedDate.Caption = Format(dSelectedDate, lblNumberFormat.Caption)
    Else
        dSelectedDate = Date
        Me.lblNumberFormat.Caption = "DD-MMM-YYYY"
        lblSelectedDate.Caption = Format(dSelectedDate, lblNumberFormat.Caption)
    End If

    BuildCalendar Year(dSelectedDate), Month(dSelectedDate)

    'Set Year and Month Values
    Me.cmbYears.Value = Year(dSelectedDate)
    Me.cmbMonths.ListIndex = Month(dSelectedDate) - 1
    lblSelectedDay.Caption = Day(dSelectedDate)


    'Load to Class for Click Events
    For r = 1 To 6
        For c = 1 To 7
            lCount = lCount + 1
            Set cLabel(lCount).frmLabel = Me.Controls(cDayLabels & r & "_" & c)
        Next c
    Next r

    'Position Form

    tDisableFormEvents = False
    bNoDateSelectedForForm = False
End Sub
Private Sub btnClose_Click()
    bNoDateSelectedForForm = True
    CloseForm
End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then
        bNoDateSelectedForForm = True
        CloseForm
    End If
End Sub

Private Sub CloseForm()
    Unload Me
End Sub
Private Sub BuildCalendar(Optional YearNum As Long, Optional MonthNum As Integer)
    Dim r As Integer, c As Integer
    Dim sDate As Date, eDate As Date
    Dim tDate As Date

    'Exit if blank
    If YearNum = 0 Or MonthNum = 0 Then Exit Sub

    'Clear Current Values
    For r = 1 To 6
        For c = 1 To 7
            Me.Controls(cDayLabels & r & "_" & c).Caption = vbNullString
        Next c
    Next r

    'Populate Day Numbers
    sDate = DateSerial(YearNum, MonthNum, 1)
    eDate = DateSerial(YearNum, MonthNum + 1, 1) - 1
    c = Weekday(sDate, vbMonday)
    r = 1

    For tDate = sDate To eDate
        Me.Controls(cDayLabels & r & "_" & c).Caption = Day(tDate)

        If tDate = dSelectedDate Then
            Me.Controls(cDayLabels & r & "_" & c).BackColor = vbGreen
        Else
            Me.Controls(cDayLabels & r & "_" & c).BackColor = vbWhite
        End If

        c = c + 1: If c > 7 Then c = 1: r = r + 1
    Next tDate



    'Mark Blank lablel as inactive
    For r = 1 To 6
        For c = 1 To 7
            If Me.Controls(cDayLabels & r & "_" & c).Caption = vbNullString Then
                Me.Controls(cDayLabels & r & "_" & c).BackColor = Me.BackColor
            End If
        Next c
    Next r
End Sub
Attribute VB_Name = "frmRowColumnHeightWidth"
Attribute VB_Base = "0{D7A59848-6A70-4C9E-86D3-1FDD8CCE40FB}{7B5E9E6C-8773-4EFB-A552-5B824A89AF48}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit

Private Sub btnCancel_Click()
    Unload Me
End Sub


Private Sub btnOk_Click()
    If IsNumeric(txtHeightWidth) = False Then
        MsgBox "Your entry cannot be used. An integer or decimal number may be required.", vbExclamation, "Invalid Input"
        Exit Sub
    End If
    If sRowOrWidth = "R" Then
        Selection.RowHeight = txtHeightWidth
        DisableAll
        AddGanttBarsForEachRow True
        EnableAll
    ElseIf sRowOrWidth = "C" Then
        Selection.ColumnWidth = txtHeightWidth
    End If
    Unload Me
End Sub



Private Sub txtHeightWidth_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Then
        btnOk_Click
    End If
End Sub

Private Sub UserForm_Initialize()
    #If Mac Then
    #Else
        With Me
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        End With
    #End If


    If sRowOrWidth = "R" Then
        Me.Caption = "Row Height"
        lblCaption = "Height:"
        txtHeightWidth = Cells(cRowPos, colPos.TaskRowHeight).Value2
    ElseIf sRowOrWidth = "C" Then
        Me.Caption = "Column Width"
        lblCaption = "Width:"
        txtHeightWidth = Selection.ColumnWidth
    End If
    With Me.txtHeightWidth
        .SelStart = 0
        .SelLength = Len(.Value)
    End With
    Me.lblCaption.BackColor = Me.BackColor
End Sub
Attribute VB_Name = "frmStatus"
Attribute VB_Base = "0{9D012486-AB97-4EA9-BC42-7EE0472AB4F2}{61B8A0EF-17B9-4A98-BF7D-9199AA993EDB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Initialize()
#If Mac Then
    #Else
        With Me
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        End With
    #End If

End Sub


Attribute VB_Name = "frmWelcome"
Attribute VB_Base = "0{B96A8FBE-BABB-4425-8501-5BA2ECDA5A33}{E93819B5-F02A-4143-9AEA-60DD76C5B787}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit

Private Sub btnCancel_Click()
    bClosing = True
    Unload Me
    ThisWorkbook.Close False
End Sub

Private Sub btnStart_Click()
txtUserName = Trim(txtUserName)
If txtUserName = vbNullString Then
    MsgBox "Enter your name"
    Exit Sub
End If
If isValidEmail(txtEmailID.Value) = False Then
    MsgBox "Please enter a valid email address"
    Exit Sub
End If
Application.EnableEvents = False
Dim ws1 As Worksheet, ws2 As Worksheet
Set ws1 = Sheets(cGanttTemplateSheetName)
Set ws2 = ActiveSheet
UnLockSheet ws1
UnLockSheet ws2
With ws1
    .Cells(cRowPos, colPos.tUsrName).NumberFormat = "@"
    .Cells(cRowPos, colPos.tUsrName).Value = txtUserName
    .Cells(cRowPos, colPos.tUsrEmailID).NumberFormat = "@"
    .Cells(cRowPos, colPos.tUsrEmailID).Value = EncodeEmail(txtEmailID)
End With
With ws2
    .Cells(cRowPos, colPos.usrName).NumberFormat = "@"
    .Cells(cRowPos, colPos.usrName).Value = txtUserName
    .Cells(cRowPos, colPos.usrEmailID).NumberFormat = "@"
    .Cells(cRowPos, colPos.usrEmailID).Value = Decipher(txtEmailID)
End With
Worksheets("Help").Activate
Dim murl As String
Dim durl As String
murl = macrourl & ThisWorkbook.Sheets("Template").Cells(cRowPos, colPos.tUsrEmailID)
durl = docurl & ThisWorkbook.Sheets("Template").Cells(cRowPos, colPos.tUsrEmailID)
Application.ScreenUpdating = False
Worksheets("Help").Range("D10").Hyperlinks.Delete
Worksheets("Help").Hyperlinks.Add Anchor:=Range("D10"), Address:=murl, ScreenTip:="Enable Macros", TextToDisplay:="Click here for help to Enable Macros"
Worksheets("Help").Range("D21").Hyperlinks.Delete
Worksheets("Help").Hyperlinks.Add Anchor:=Range("D21"), Address:=durl, ScreenTip:="Click Here For Documentation", TextToDisplay:="CLICK HERE FOR DOCUMENTATION"
Worksheets("Project Plan").Activate
Application.ScreenUpdating = True
    Application.EnableEvents = True
    Sheets("Project Plan").Select
    Range("N10") = Date
LockSheet ws1
LockSheet ws2
ThisWorkbook.Save
MsgBox "Initializing for the first time. This could take upto 30 seconds."
Unload Me
End Sub

Private Sub UserForm_Initialize()
    #If Mac Then
    #Else
        With Me
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        End With
    #End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then Cancel = True
End Sub

Private Function isValidEmail(sEmailAddress As String) As Boolean
Dim sMsg As String
isValidEmail = True
If (Len(sEmailAddress) = 0) Then
    isValidEmail = False
End If
If (InStr(1, sEmailAddress, "@") = 0) Then
    isValidEmail = False
End If
If (InStr(1, sEmailAddress, ".") = 0) Then
    isValidEmail = False
End If
If (InStr(sEmailAddress, "@.") > 0) Then
    isValidEmail = False
End If
If ((InStr(sEmailAddress, ".")) = ((Len(sEmailAddress)))) Then
    isValidEmail = False
End If
If ((Len(sEmailAddress)) < (InStr(sEmailAddress, ".") + 2)) Then
    isValidEmail = False
End If
If (InStr(1, sEmailAddress, "@") = 1) Then
    isValidEmail = False
End If
End Function

Private Sub UserForm_Terminate()
    OpenURLOnStartup
End Sub

Attribute VB_Name = "frm_About"
Attribute VB_Base = "0{DCDAB1D7-E3FC-47D7-847C-069AC8858FEE}{1AD255A9-FD4E-4D85-B03E-766B47985BB7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit
Dim tt
Dim bClose As Boolean

Private Sub cmdSiteLink_Click()
Dim s As String
s = GetLicType
    If s = sLEnterpriseV Then
        OpenHyperlink aboutURL
    ElseIf s = sLMacUltimateV Then
        OpenHyperlink aboutURL
    ElseIf s = sLProV Then
        OpenHyperlink aboutURL
    Else
        OpenHyperlink aboutURLf & ThisWorkbook.Sheets("Template").Cells(cRowPos, colPos.tUsrEmailID)
    End If
End Sub

Private Sub CommandButton1_Click()
    Unload Me
End Sub

Private Sub UserForm_Activate()
    DoChecks
    bClose = True
End Sub

Private Sub UserForm_Initialize()
    Exit Sub
    Unload Me
    #If Mac Then
    #Else
        With Me
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        End With
    #End If
    tt = Application.EnableCancelKey
    Application.EnableCancelKey = xlDisabled
End Sub

Function SetStatus(sStr As String)
    Me.lblStatus = sStr
    Me.Repaint
End Function
Sub DoChecks()
    Dim ts As String
    Dim s As String, sURL As String, squery As String
    Dim ws As Worksheet, swr As String
    Set ws = Sheets(cGanttTemplateSheetName)
    s = GetLicType

    sURL = "https://www.ganttexcel.com/"
    If s = sLEnterpriseV Then
        Me.Caption = "Gantt Excel Ultimate v" & sVersionNo
        squery = "wc-api=software-api&request=check&email=" & UnDecipher(ws.Cells(cRowPos, colPos.usrEmailID).Value2) & _
                 "&license_key=" & ws.Cells(cRowPos, colPos.tliky).Value2 & _
                 "&product_id=" & "GEUE"
    ElseIf s = sLMacUltimateV Then
        Me.Caption = "Gantt Excel Ultimate Mac v" & sVersionNo
        squery = "wc-api=software-api&request=check&email=" & UnDecipher(ws.Cells(cRowPos, colPos.usrEmailID).Value2) & _
                 "&license_key=" & ws.Cells(cRowPos, colPos.tliky).Value2 & _
                 "&product_id=" & "GEUM"
    ElseIf s = sLProV Then
        Me.Caption = "Gantt Excel Pro v" & sVersionNo
        squery = "wc-api=software-api&request=check&email=" & UnDecipher(ws.Cells(cRowPos, colPos.usrEmailID).Value2) & _
                 "&license_key=" & ws.Cells(cRowPos, colPos.tliky).Value2 & _
                 "&product_id=" & "GEPE"
    Else
        Me.Caption = "Gantt Excel Free v" & sVersionNo
        sURL = vbNullString
        s = vbNullString
    End If


    If sTempStr <> "OnStartUp" Then
        Me.lblLicenseName.Caption = "Licensed to: " & ws.Cells(cRowPos, colPos.tUsrName).Value2
        If s = slFFTOfflineV Then SetStatus "Expires on: " & Format(Replace(UnDecipher(ws.Cells(cRowPos, colPos.LicDuration).Value2), cLicConst, vbNullString), "DD-mmm-YYYY hh:mm:ss")
        Set ws = Nothing
        Exit Sub
    End If

    If s = vbNullString And GetGanttSheetsCount > 1 Then
        Set ws = Nothing
        Unload Me
        Exit Sub
    End If

    'Check License
    If sURL = vbNullString And s = slFFTOfflineV Then
        SetStatus "Checking License..."
        ts = Replace(UnDecipher(ws.Cells(cRowPos, colPos.LicDuration).Value2), cLicConst, vbNullString)
        If IsDate(ts) = False Then
        ElseIf CDate(ts) < Now() Then
            RemoveLicenseForTrial
            ThisWorkbook.Save
            SetStatus vbNullString

            With Me.lblLicenseName
                .Caption = "Trial Expired"
                .ForeColor = RGB(255, 0, 0)
                .Font.Bold = True
            End With

            Set ws = Nothing
            Exit Sub
        End If

        If IsDate(ts) = True Then
            sTempStr1 = "Your trial will expire on " & Format(CDate(ts), "DD-mmm-YYYY hh:mm:ss")
            frm_trial.Show
        End If

    ElseIf sURL <> vbNullString Then
        SetStatus "Checking License..."
        #If Mac Then
            swr = GetWebResponseMac(sURL, squery)
        #Else
            swr = GetDataFromURL(sURL & "?" & squery, "GET", vbNullString, 10000)
        #End If

        If Left(swr, 5) <> "error" Then
            'Check if it is Inactive
            If InStr(1, swr, Chr(34) & "license" & Chr(34) & ":" & Chr(34) & "disabled" & Chr(34), vbBinaryCompare) > 0 Or _
               InStr(1, swr, Chr(34) & "remaining" & Chr(34) & ":0," & Chr(34) & "activations" & Chr(34) & ":[]", vbBinaryCompare) > 0 Then
                RemoveLicense
                ThisWorkbook.Save
                SetStatus vbNullString

                With Me.lblLicenseName
                    If s = slFFTV Then
                        .Caption = "License Deactivated/Trial Expired"
                    Else
                        .Caption = "License Deactivated"
                    End If
                    .ForeColor = RGB(255, 0, 0)
                    .Font.Bold = True
                End With
                Set ws = Nothing
                Exit Sub
            Else
                SetStatus vbNullString
                With Me.lblLicenseName
                    .Caption = "Licensed to: " & (ws.Cells(cRowPos, colPos.tUsrName).Value2)
                    .ForeColor = RGB(0, 0, 0)
                    .Font.Bold = False
                End With
            End If
            SetStatus "Loading User Settings..."
            Application.Wait Now() + TimeSerial(0, 0, 2)

            If s = slFFTV Then
                sTempStr1 = "Your trial will expire on " & Format(CDate(GetLicDurFromResponse(swr)), "DD-mmm-YYYY")
                frm_trial.Show
            End If

            Set ws = Nothing
            Unload Me
            Exit Sub
        Else
            'Error could not connect
            If s = slFFTV Then

                ts = Replace(UnDecipher(ws.Cells(cRowPos, colPos.LicDuration).Value2), cLicConst, vbNullString)
                If CDate(ts) < Date Then
                    RemoveLicense
                    ThisWorkbook.Save
                    SetStatus vbNullString

                    With Me.lblLicenseName
                        .Caption = "License Deactivated/Trial Expired"
                        .ForeColor = RGB(255, 0, 0)
                        .Font.Bold = True
                    End With
                    Exit Sub
                Else

                End If
            End If
        End If
    End If

    If s = slFFTV And sTempStr <> "OnStartUp" Then
        sTempStr1 = "Your trial will expire on " & Format(CDate(ts), "DD-mmm-YYYY")
        frm_trial.Show
    ElseIf sURL = vbNullString Then
        Me.lblLicenseName.Caption = "Un-Registered"
        Exit Sub
    End If


    Application.EnableCancelKey = tt

    Set ws = Nothing

    Unload Me

End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If Me.lblLicenseName.Caption = "Trial Expired" Then
        sTempStr = "UpgradeFromDeactivated"
        frm_LicEntry.Show
    End If
    If bClose Then Exit Sub
    If CloseMode = 0 Then Cancel = True
    Application.EnableCancelKey = tt
End Sub

Attribute VB_Name = "frm_Holidays"
Attribute VB_Base = "0{011AA1C7-16AE-46AF-9281-1AC2365ADB6B}{B7185C77-4757-48A1-996C-7F7B3C35BAD3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.


Option Explicit
Private bDisableChanges As Boolean

Private Sub BulkButton_Click()
Unload Me
rungsschk
Dim curws As String
curws = ActiveSheet.Name
gss.visible = xlSheetVisible
gss.Activate
Range("VGR1").Value = curws
MsgBox "DO NOT Delete or Rename this settings worksheet.", vbCritical
Range("K1").Select
End Sub

Private Sub UserForm_Initialize()
    #If Mac Then
    #Else
        With Me
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        End With
    #End If
    rungsschk
    Me.btn_Edit.enabled = False
    Me.btn_Edit.Caption = "Edit"
    Me.btn_Delete.enabled = False
    Dim i As Long, j As Long
    j = 2
    i = 2
    With Me.lst_Holidays
        Do Until gss.Cells(j, 6).Value2 = vbNullString
            .AddItem
            .List(i - 2, 1) = Format(gss.Cells(j, 6).Value2, "dd-mmm-yyyy")
            .List(i - 2, 2) = gss.Cells(j, 7).Value2
            i = i + 1
            j = j + 1
        Loop
    End With
    Me.btnOk.enabled = False
    Label2.BackColor = Me.BackColor
    Label1.BackColor = Me.BackColor
End Sub
Private Sub btn_Add_Click()
    FormatHolidayDate
    txt_HolidayName.BackColor = Me.BackColor
    If Me.txt_date <> vbNullString And Me.txt_HolidayName <> vbNullString Then
        Dim i As Long
        For i = 0 To Me.lst_Holidays.ListCount - 1
            If LCase(Me.txt_HolidayName) = LCase(Me.lst_Holidays.List(i, 2)) Or CDate(Me.txt_date) = CDate(Me.lst_Holidays.List(i, 1)) Then
                MsgBox "Holiday date/name already exists", vbInformation, "Information"
                Exit Sub
            End If
        Next i
        With Me.lst_Holidays
            .AddItem
            .List(.ListCount - 1, 0) = 1
            .List(.ListCount - 1, 1) = Me.txt_date
            .List(.ListCount - 1, 2) = Me.txt_HolidayName
            Me.txt_date = vbNullString
            Me.txt_HolidayName = vbNullString
            Me.lst_Holidays.ListIndex = -1
            Me.btn_Delete.enabled = False
            Me.btn_Edit.enabled = False
            Me.btnOk.enabled = True

        End With
'        With Me.txt_date
'            .SetFocus
'            .SelStart = 0
'            .SelLength = Len(.Text)
'        End With

    Else
        MsgBox "Enter date and holiday name to add a new Holiday", vbInformation, "Information"
        If Me.txt_date = vbNullString Then
            Me.txt_date.SetFocus
        ElseIf Me.txt_HolidayName = vbNullString Then
            Me.txt_HolidayName.SetFocus
        End If
    End If
    btnOk.BackColor = rgbGreenYellow
End Sub

Private Sub btn_Delete_Click()
    If Me.lst_Holidays.ListIndex <> -1 Then
        Me.lst_Holidays.RemoveItem Me.lst_Holidays.ListIndex
        Me.btn_Edit.enabled = False
        Me.btn_Delete.enabled = False
        Me.txt_date = vbNullString
        Me.txt_HolidayName = vbNullString
        Me.btn_Edit.Caption = "Edit"
        Me.btn_Edit.enabled = False
        Me.btn_Delete.enabled = False
        Me.lst_Holidays.ListIndex = -1
        Me.btnOk.enabled = True
    End If
    btnOk.BackColor = rgbGreenYellow
End Sub

Private Sub btn_Edit_Click()
    If Me.btn_Edit.Caption = "Edit" Then
        If Me.lst_Holidays.ListIndex <> -1 Then
            Me.txt_date = Me.lst_Holidays.List(Me.lst_Holidays.ListIndex, 1)
            Me.txt_HolidayName = Me.lst_Holidays.List(Me.lst_Holidays.ListIndex, 2)

            Me.btn_Edit.Caption = "Update"
            Me.lst_Holidays.enabled = False
            Me.btn_Add.enabled = False
            Me.btnOk.enabled = False
            Me.btn_Delete.enabled = False
        End If
        Exit Sub
    End If
    If Me.lst_Holidays.ListIndex = -1 Then
        MsgBox "Select a Holiday to edit", vbInformation, "Information"
        GoTo last
    End If
    bDisableChanges = True
    Me.lst_Holidays.List(Me.lst_Holidays.ListIndex, 1) = Format(Me.txt_date, "dd-mmm-yyyy")
    Me.lst_Holidays.List(Me.lst_Holidays.ListIndex, 2) = Me.txt_HolidayName
    Me.txt_HolidayName = vbNullString
    Me.txt_date = vbNullString
    Me.btn_Edit.enabled = False
    Me.btn_Delete.enabled = False
    Me.lst_Holidays.ListIndex = -1
    Me.txt_date.SetFocus
    bDisableChanges = False
    Me.btn_Edit.Caption = "Edit"
    Me.lst_Holidays.enabled = True
    Me.btn_Add.enabled = True
    Me.btnOk.enabled = True
    txt_HolidayName.BackColor = Me.BackColor
    btnOk.BackColor = rgbGreenYellow
last:

End Sub

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub btnOk_Click()
rungsschk
DisableAll
    gss.Range(gss.Cells(2, 7), gss.Cells(10000, 6)).ClearContents
    Dim i As Long, j As Long
    j = 2
    For i = 0 To Me.lst_Holidays.ListCount - 1
        gss.Cells(j, 6).Value = CDbl(CDate(Me.lst_Holidays.List(i, 1)))
        gss.Cells(j, 7).Value = Me.lst_Holidays.List(i, 2)
        j = j + 1
    Next i
    SortHolidays
    sArr.LoadHolidays
    ReCalculateAllDurations True
    PopulateSectionDates True
    LockSheet ActiveSheet
    AddHolidaysAsComments True
    AddGanttBarsForEachRow
    EnableAll
    Unload Me
End Sub
Private Sub SortHolidays()
rungsschk
gss.Range(gss.Cells(2, 6), gss.Cells(Cells.Rows.Count, 7)).Sort gss.Cells(1, 6), xlAscending, , , , , , xlNo
End Sub
Private Sub lst_Holidays_Click()
    If bDisableChanges = True Then Exit Sub
    If Me.lst_Holidays.ListIndex <> -1 Then
        Me.btn_Edit.enabled = True
        Me.btn_Delete.enabled = True
        txt_HolidayName.BackColor = Me.BackColor
    End If
End Sub
Private Sub txt_date_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    FormatHolidayDate
    btnOk.BackColor = Me.BackColor
    txt_HolidayName.BackColor = rgbGreenYellow
End Sub
Private Sub FormatHolidayDate()
    If IsDate(Me.txt_date) Then
        Me.txt_date = Format(Me.txt_date, "dd-mmm-yyyy")
    Else
        Me.txt_date = vbNullString
    End If
    
End Sub

Private Sub UserForm_Terminate()
    LockSheet ActiveSheet
End Sub
Attribute VB_Name = "frm_LicEntry"
Attribute VB_Base = "0{BB159F22-6CA0-412F-A055-F037A28A5DBB}{8F77129E-8BD1-448D-A4C2-A66F321538B0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Const cTimeOutValue As Long = 60000

Option Explicit

Private Sub btnCancel_Click()
    sfUsrName = vbNullString
    sfUsrEmailID = vbNullString
    sfLicenseCode = vbNullString
    Unload Me
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.LiType).Value = slFFTOfflineV And _
       Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.LicDuration).Value = "-" And _
       GetGanttSheetsCount > 1 Then
        Call CloseActiveFile
    End If
End Sub


Private Sub btnOk_Click()
    Dim sErrMsg As String, sLicName As String
    Me.txtUserName = Trim(Me.txtUserName)
    Me.txtEmailID = Trim(Me.txtEmailID)
    Me.txtLicenseCode = Trim(Me.txtLicenseCode)


    sfUsrName = vbNullString
    sfUsrEmailID = vbNullString
    sfLicenseCode = vbNullString
    sLiType = vbNullString

    If Me.txtUserName = vbNullString Then
        sErrMsg = sErrMsg & "Enter name of the individual" & vbLf
    End If
    If Me.txtEmailID = vbNullString Then
        sErrMsg = sErrMsg & "Enter email-id of the individual" & vbLf
    End If

    If Me.txtLicenseCode = vbNullString Then
        sErrMsg = sErrMsg & "Enter license code" & vbLf
    End If

    If sErrMsg <> vbNullString Then
        MsgBox sErrMsg, vbExclamation, "Gantt Excel"
        Exit Sub
    End If


    If Me.txtLicenseCode = sLTrial Then
        sLicName = sLTrial
    ElseIf Me.txtLicenseCode = sLFFTOffline Then
        sLicName = sLFFTOffline
    Else
        Dim swr As String, sURL As String, squery As String
        Dim LicPrefix As String
        If 1 = 1 Then
            Me.lblStatusMessage = "Checking License Code..."
            Me.Repaint

            LicPrefix = UCase(Left(Me.txtLicenseCode.Value, 2))

            sURL = "https://www.ganttexcel.com/"
            squery = "wc-api=software-api&request=activation&email=" & Me.txtEmailID & "&license_key=" & Me.txtLicenseCode & _
                     "&product_id=" & "GE" & LicPrefix & _
                     "&platform=" & Environ$("computername") & "_" & Environ$("username")


            If LicPrefix = "UM" Then
                sLicName = sLMacUltimate
            ElseIf LicPrefix = "UE" Then
                sLicName = sLEnterprise
            ElseIf LicPrefix = "PE" Then
                sLicName = sLPro
            ElseIf LicPrefix = "TE" Then
                sLicName = sLFFT
            Else
                sLicName = vbNullString
            End If

            #If Mac Then
                swr = GetWebResponseMac(sURL, squery)
            #Else
                swr = GetDataFromURL(sURL & "?" & squery, "GET", vbNullString, cTimeOutValue)
            #End If


            If Left(swr, 5) = "Error" Or swr = vbNullString Then
                MsgBox "Unable to Contact Server" & vbLf & "Please contact Gantt Excel Support.", vbInformation, "Activation Error"
                GoTo last
            End If

            'Code for Trial Version
            'lLicDur = GetLicDurFromResponse(swr)


            If InStr(1, swr, """" & "activated" & """" & ":true", vbBinaryCompare) > 0 Then
                'Code Activated
                sErrMsg = vbNullString
                Application.EnableEvents = False
Dim currws As String
currws = ActiveSheet.Name
Worksheets("Help").Activate
Dim murl As String
Dim durl As String
murl = macrourlcust
durl = docurlcust
Worksheets("Help").Range("D10").Hyperlinks.Delete
Worksheets("Help").Hyperlinks.Add Anchor:=Range("D10"), Address:=murl, ScreenTip:="Enable Macros", TextToDisplay:="Click here for help to Enable Macros"
Worksheets("Help").Range("D21").Hyperlinks.Delete
Worksheets("Help").Hyperlinks.Add Anchor:=Range("D21"), Address:=durl, ScreenTip:="Click Here For Documentation", TextToDisplay:="CLICK HERE FOR DOCUMENTATION"
Worksheets(currws).Activate
Application.EnableEvents = True
            ElseIf InStr(1, swr, Chr(34) & "error" & """" & ":" & """" & "Exceeded", vbBinaryCompare) > 0 Then
                'sfLicenseCode = vbNullString
                MsgBox "This license code has been deactivated", vbInformation, "Information"
                Unload Me
                Exit Sub
            ElseIf InStr(1, swr, """" & "error" & """" & ":" & """" & "Invalid", vbBinaryCompare) > 0 Then
                sErrMsg = "Invalid license code or Incorrect email address"
            End If

        End If

    End If

    Me.lblStatusMessage = sErrMsg
    If sErrMsg <> vbNullString Then
        MsgBox sErrMsg, vbInformation, "Gantt Excel"
        Exit Sub
    End If

    'All Values ok
    sfUsrName = Me.txtUserName
    sfUsrEmailID = Me.txtEmailID
    sfLicenseCode = Me.txtLicenseCode
    sLiType = sLicName
    #If Mac Then
        If sLiType <> sLTrial And sLiType <> sLMacUltimate And sLiType <> sLFFT Then
            MsgBox sMsgMACNotCompatible, vbInformation, "Gantt Excel"
            Exit Sub
        End If
    #End If

    If GetGanttSheetsCount > 1 And sLiType <> sLEnterprise Then
        Unload Me
        RemoveLicense
        UpgradeLicenseToUltimate 0, 1
        Exit Sub
    ElseIf sTempStr = "OnStartUp" Then
        Unload Me
        IsLicValid
        Exit Sub
    ElseIf sTempStr = "Upgrade" Or sTempStr = "UpgradeFromDeactivated" Then
        Unload Me
        RemoveLicense
        UpgradeLicenseToUltimate 0, 1
        Exit Sub
    End If

last:
    Me.lblStatusMessage = vbNullString
    Me.Repaint
End Sub

Private Sub UserForm_Initialize()
    #If Mac Then
    #Else
        With Me
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        End With
    #End If
    Dim sLicType As String
    sLicType = GetLicType
    If sLicType = sLProV Then
        Me.Caption = "Upgrade to Ultimate"
    End If
    If sTempStr = "UpgradeFromDeactivated" Then
        Me.Caption = "Trial Expired - Activate New License"
    End If

    Me.Label1.BackColor = Me.BackColor
    Me.lblUserName.BackColor = Me.BackColor
    Me.lblEmail.BackColor = Me.BackColor
    Me.lblLicenseCode.BackColor = Me.BackColor


End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then Cancel = True
End Sub
Attribute VB_Name = "frm_NewGantt"
Attribute VB_Base = "0{9F21BE65-8855-4D4D-94ED-27E5367FEF7B}{91F7C21E-847E-4751-B6AB-B75C0D685988}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit
Dim bIni As Boolean
Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub btnOk_Click()
    Dim errMsg As String
    If Me.txtProjectName = vbNullString Then
        errMsg = "Please enter a Project Name" & vbLf
        Me.txtProjectName.SetFocus
    End If
    If bEditProjectInfo = False Then
        If Me.txtSheetName = vbNullString Then
            errMsg = errMsg & "Please enter a Worksheet Name" & vbLf
            Me.txtSheetName.SetFocus
        End If
        On Error Resume Next
        Dim ws As Worksheet
        Set ws = ThisWorkbook.Worksheets(Trim(Me.txtSheetName.Value))
        If ws Is Nothing Then
        Else
            errMsg = errMsg & "Sheet name already exists"
            Me.txtSheetName.SetFocus
        End If
        On Error GoTo 0
    End If
    If errMsg <> vbNullString Then
        MsgBox errMsg, vbInformation, "Information"
        GoTo last
    End If
    DisableAll
    AddExpiryDateforTrialOffline
    If bEditProjectInfo = False Then
        Application.ScreenUpdating = False
        Worksheets(GST).visible = True
        Worksheets(GST).Copy , Worksheets(Worksheets.Count)
        ActiveSheet.Name = "GCS-" & Worksheets("Template").Range("VGC2").Value + 1
        ActiveSheet.visible = xlVeryHidden
        Worksheets(GST).visible = xlVeryHidden
        Worksheets(cGanttTemplateSheetName).visible = True
        Worksheets(cGanttTemplateSheetName).Copy , Worksheets(Worksheets.Count)
        ActiveSheet.Name = Trim(Me.txtSheetName)
        Worksheets(cGanttTemplateSheetName).visible = xlVeryHidden
        Application.ScreenUpdating = True
        UnLockSheet ActiveSheet
        UnLockSheet Sheets(cGanttTemplateSheetName)
        ReCalculateColPos
        Cells(cRowPos, colPos.ProjectSheetName).Value = "GCS-" & Worksheets("Template").Range("VGC2").Value + 1
        findgss
        Worksheets("Template").Range("VGC2").Value = Worksheets("Template").Range("VGC2").Value + 1
        sArr.LoadAllArrays
        Cells(cHeaderRow + 1, colPos.ESD).Value = Date
        Cells(cHeaderRow + 1, colPos.EED).Value = CDate(GetEndDateFromWorkDays(Date, 10))
        Cells(cHeaderRow + 1, colPos.ED).Value = 10
        Range(Cells(cHeaderRow + 1, colPos.ESD), Cells(Cells.Rows.Count, colPos.ESD)).NumberFormat = Cells(cRowPos, colPos.DateFormat).Value
        Range(Cells(cHeaderRow + 1, colPos.EED), Cells(Cells.Rows.Count, colPos.EED)).NumberFormat = Cells(cRowPos, colPos.DateFormat).Value
    End If

    If bEditProjectInfo Then UnLockSheet ActiveSheet
    
    If Cells(cTimelineDateRow, colPos.WBS).Value <> Trim(Me.txtProjectName) Then
        Cells(cTimelineDateRow, colPos.WBS).Value = Trim(Me.txtProjectName)
        If DoesDashboardUserSheetExists Then
            PopulateSheetsNamesForDropDown True
        End If
    End If
    DisableAll
    
    Cells(cTimelineDateLabelsRow, colPos.WBS).Value = "Project Lead: " & Me.txtProjectLead
    If chkCareCosts = True And CBool(Cells(cRowPos, colPos.EnableCostsModule).Value) = True Then
        Cells(cRowPos, colPos.CostsModule).Value = 1
        If IsNumeric(Me.txtBaselineBudget) = False Then Me.txtBaselineBudget = 0
        Cells(cRowPos, colPos.BaselineBudget).Value = Me.txtBaselineBudget.Value
        If IsNumeric(Me.txtEstimatedBudget) = False Then Me.txtEstimatedBudget = 0
        Cells(cRowPos, colPos.EstimatedBudget).Value = Me.txtEstimatedBudget.Value
        ReCalculateBudgetLineCosts
    Else
        Cells(cRowPos, colPos.CostsModule).Value = 0
        Cells(cRowPos, colPos.BaselineBudget).Value = vbNullString
        Cells(cRowPos, colPos.EstimatedBudget).Value = vbNullString
        Cells(cTimelineDateNumbersRow, colPos.WBS).Value = vbNullString
    End If
    RefreshRibbon
    Unload Me
    If bEditProjectInfo = False Then
        DisableAll
        PopulateSectionDates
        'BuildDailyView True
        AddBordersToTasks
        End If
    TriggerDailyViewBuild
    LockSheet ActiveSheet
    LockSheet Sheets(cGanttTemplateSheetName)
    EnableAll
last:
End Sub

Private Sub chkCareCosts_Change()

    If bIni = False Then
        If chkCareCosts Then
            With Me

                frmBudgetDetails.enabled = True
                .txtBaselineBudget.enabled = True
                .txtEstimatedBudget.enabled = True
                .lblBaselineBudget.enabled = True
                .lblEstimatedBudget.enabled = True
            End With
        Else
            With Me
                .chkCareCosts.Value = 0
                .txtBaselineBudget.enabled = False
                .txtEstimatedBudget.enabled = False
                .lblBaselineBudget.enabled = False
                .lblEstimatedBudget.enabled = False
                frmBudgetDetails.enabled = False
            End With
        End If
    End If

End Sub


Private Sub cmdAutoFill_Click()
Me.txtProjectName = "Project Name - Double Click to edit"
Me.txtSheetName = "Project Plan"
Me.txtProjectLead = "Double Click to edit"
End Sub

Private Sub frmBudgetDetails_Exit(ByVal Cancel As MSForms.ReturnBoolean)
'txtEstimatedBudget_Exit Cancel
'txtBaselineBudget_Exit Cancel
End Sub


Private Sub txtBaselineBudget_Enter()
    txtBaselineBudget.Value = Replace(txtBaselineBudget.Value, ",", vbNullString)
End Sub


Private Sub txtBaselineBudget_AfterUpdate()
    If txtBaselineBudget.Value = vbNullString Then Exit Sub
    If IsNumeric(txtBaselineBudget.Value) Then
        txtBaselineBudget.Value = Format(txtBaselineBudget.Value, "#,##0.00")
        Exit Sub
    End If
    txtBaselineBudget.Value = vbNullString
End Sub

Private Sub txtBaselineBudget_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii >= 48 And KeyAscii <= 57) Or KeyAscii = 46 Then
    Else
        KeyAscii = 0
    End If
End Sub
Private Sub txtEstimatedBudget_AfterUpdate()
    If txtEstimatedBudget.Value = vbNullString Then Exit Sub
    If IsNumeric(txtEstimatedBudget.Value) Then
        txtEstimatedBudget.Value = Format(txtEstimatedBudget.Value, "#,##0.00")
        Exit Sub
    End If
    txtEstimatedBudget.Value = vbNullString
End Sub

Private Sub txtEstimatedBudget_Change()
    If bIni = False Then
        If IsNumeric(txtEstimatedBudget.Value) = False Then
            txtEstimatedBudget.Value = vbNullString
            Exit Sub
        End If
    End If
End Sub

Private Sub txtEstimatedBudget_Enter()
    Application.EnableEvents = False
    txtEstimatedBudget.Value = Replace(txtEstimatedBudget.Value, ",", vbNullString)
    Application.EnableEvents = True
End Sub



Private Sub txtEstimatedBudget_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii >= 48 And KeyAscii <= 57) Or KeyAscii = 46 Then
    Else
        KeyAscii = 0
    End If
End Sub

Private Sub txtSheetName_Change()
    If bIni = False Then
        Me.txtSheetName.Value = Replace(Me.txtSheetName.Value, "?", vbNullString)
        Me.txtSheetName.Value = Replace(Me.txtSheetName.Value, "\", vbNullString)
        Me.txtSheetName.Value = Replace(Me.txtSheetName.Value, "/", vbNullString)
    End If
End Sub


Private Sub UserForm_Initialize()
    #If Mac Then
    #Else
        With Me
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        End With
    #End If
    If bEditProjectInfo Then Me.Caption = "Edit Project Details"
    bIni = True
    Me.txtSheetName.enabled = True
    If CBool(Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tEnableCostsModule).Value) = True Then
        With Me
            .chkCareCosts.Value = 1
            .txtBaselineBudget.visible = True
            .txtEstimatedBudget.visible = True
            .txtBaselineBudget.enabled = True
            .lblBaselineBudget.visible = True
            .lblEstimatedBudget.visible = True
        End With
    Else
        With Me
            .chkCareCosts.Value = 0
            .chkCareCosts.enabled = False
            .txtBaselineBudget.enabled = False
            .txtEstimatedBudget.enabled = False
            .txtBaselineBudget.enabled = False
            .lblBaselineBudget.enabled = False
            .lblEstimatedBudget.enabled = False
        End With
    End If
    Me.txtProjectName.SetFocus
    If bEditProjectInfo Then
        Me.txtBaselineBudget.Locked = False
        Me.txtBaselineBudget.enabled = True
        With Me.txtSheetName
            .Value = ActiveSheet.Name
            .enabled = False
            .BackColor = Me.BackColor
        End With
        With Me.lblSheetName
            .enabled = False
            .BackColor = Me.BackColor
        End With
        Me.txtProjectName.Value = Cells(cTimelineDateRow, colPos.WBS).Value

        Me.txtProjectLead.Value = Trim(Replace(Cells(cTimelineDateLabelsRow, colPos.WBS).Value, "Project Lead:", vbNullString))

        If CBool(Cells(cRowPos, colPos.CostsModule).Value) = True Then
            Me.txtBaselineBudget.Value = Format(Cells(cRowPos, colPos.BaselineBudget).Value, "#,##0.00")
            Me.txtEstimatedBudget.Value = Format(Cells(cRowPos, colPos.EstimatedBudget).Value, "#,##0.00")
            If dblClickRow = 8 Then Me.txtEstimatedBudget.SetFocus
        Else
            Me.chkCareCosts.Value = False
            Me.txtBaselineBudget.visible = False
            Me.txtEstimatedBudget.visible = False
            Me.lblBaselineBudget.visible = False
            Me.lblEstimatedBudget.visible = False
        End If

        If dblClickRow = 6 Then Me.txtProjectName.SetFocus
        If dblClickRow = 7 Then Me.txtProjectLead.SetFocus

    End If
    bIni = False
    Me.Label10.BackColor = Me.BackColor
    Me.lblSheetName.BackColor = Me.BackColor
    Me.Label12.BackColor = Me.BackColor
    Me.chkCareCosts.BackColor = Me.BackColor
    Me.lblEstimatedBudget.BackColor = Me.BackColor
    Me.lblBaselineBudget.BackColor = Me.BackColor

End Sub

Attribute VB_Name = "frm_ResourceSelector"
Attribute VB_Base = "0{B4DB0737-35BE-4C30-A6A1-DC2C1FA8314B}{A2F9881A-8C4D-4653-963C-F77962ACE5C7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit


Private Sub btnAddResource_Click()
    Dim i As Integer
    If Me.lstAvailableResources.ListCount = 0 Then Exit Sub

    With Me.lstAvailableResources
        For i = .ListCount - 1 To 0 Step -1
            If .Selected(i) Then
                Me.lstSelectedResources.AddItem .List(i)
                .RemoveItem (i)
            End If
        Next
    End With
End Sub

Private Sub btnAddResources_Click()
    If Cells(cRowPos, colPos.ShowCompleted).Value = 0 Or Cells(cRowPos, colPos.ShowPlanned).Value = 0 Or Cells(cRowPos, colPos.ShowInProgress).Value = 0 Then
        MsgBox sFilterMsg, vbInformation, "Information"
        Exit Sub
    End If

    'Unload Me
    frm_Resources.Show
    PopulateResourceNamesOnFocusBackFromResourceAdditionForm
End Sub

Private Sub btnCancel_Click()
    Dim sStr As String, i As Integer

    With lstSelectedResources
        For i = 0 To .ListCount - 1
            sStr = sStr & .List(i) & sResourceSeperator
        Next
    End With

    If sStr <> vbNullString Then sStr = Left(sStr, Len(sStr) - 2)
    If bAddResourceValueToFormNotToCell Then
        sResourcesNamesFromForm = sStr
    End If

    Unload Me
End Sub

Private Sub btnOk_Click()
    Dim sStr As String, i As Integer

    With lstSelectedResources
        For i = 0 To .ListCount - 1
            sStr = sStr & .List(i) & sResourceSeperator
        Next
    End With

    If sStr <> vbNullString Then sStr = Left(sStr, Len(sStr) - 2)
    If bAddResourceValueToFormNotToCell Then
        sResourcesNamesFromForm = sStr
    Else
        Cells(dblClickRow, colPos.TaskLead).Value = sStr
    End If

    Unload Me
End Sub

Private Sub btnRemoveResource_Click()
    Dim i As Integer
    If Me.lstSelectedResources.ListCount = 0 Then Exit Sub

    With Me.lstSelectedResources
        For i = .ListCount - 1 To 0 Step -1
            If .Selected(i) Then
                Me.lstAvailableResources.AddItem .List(i)
                .RemoveItem (i)
            End If
        Next
    End With
End Sub

Private Sub lstAvailableResources_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim i As Integer
    With lstAvailableResources
        For i = 0 To .ListCount - 1
            If .Selected(i) Then
                Me.lstSelectedResources.AddItem .List(i)
                .RemoveItem (i)
                Exit For
            End If
        Next
    End With
End Sub

Private Sub lstAvailableResources_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Then
        btnOk_Click
    End If
End Sub

Private Sub lstSelectedResources_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim i As Integer
    With lstSelectedResources
        For i = 0 To .ListCount - 1
            If .Selected(i) Then
                Me.lstAvailableResources.AddItem .List(i)
                .RemoveItem (i)
                Exit For
            End If
        Next
    End With
End Sub

Private Sub lstSelectedResources_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If KeyAscii = 13 Then
        btnOk_Click
    End If
End Sub

Private Sub UserForm_Initialize()
    #If Mac Then
    #Else
        With Me
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        End With
    #End If

    PopulateResourceNames
End Sub

Sub PopulateResourceNames()
rungsschk
    Dim sRow As Long, rcount As Long
    Dim i As Integer, j As Integer
    Dim vResources As Variant
    sRow = 2
    rcount = WorksheetFunction.CountA(gss.Columns(1)) - 1
    If rcount = 0 Then
        Me.lblHelpText.Caption = "Add Resources by clicking on 'Add Resources' button below"
        Exit Sub
    End If
    For i = sRow To sRow + rcount - 1
        Me.lstAvailableResources.AddItem gss.Cells(i, 1).Value
    Next i

    If bAddResourceValueToFormNotToCell Then
        If sResourcesNamesFromForm = vbNullString Then Exit Sub
        vResources = Split(sResourcesNamesFromForm & sResourceSeperator, ", ")
    Else
        If Selection = vbNullString Then Exit Sub
        vResources = Split(Selection & sResourceSeperator, ", ")
    End If

    For i = 0 To UBound(vResources) - 1
        Me.lstSelectedResources.AddItem vResources(i)
        For j = 0 To Me.lstAvailableResources.ListCount - 1
            If LCase(Me.lstAvailableResources.List(j)) = LCase(vResources(i)) Then
                Me.lstAvailableResources.RemoveItem (j)
                Exit For
            End If
        Next
    Next i
End Sub
Sub PopulateResourceNamesOnFocusBackFromResourceAdditionForm()
    Dim sRow As Long, rcount As Long
    Dim i As Integer, j As Integer, B As Boolean
    rungsschk
    sRow = 2
    rcount = WorksheetFunction.CountA(gss.Columns(1)) - 1
    If rcount = 0 Then
        Me.lstAvailableResources.Clear
        Me.lstSelectedResources.Clear
        Me.lblHelpText.Caption = "Add Resources by clicking on 'Add Resources' button below"
        Exit Sub
    End If
    Me.lstAvailableResources.Clear
    For i = sRow To sRow + rcount - 1
        Me.lstAvailableResources.AddItem gss.Cells(i, 1).Value
    Next i
    With lstSelectedResources
        For i = .ListCount - 1 To 0 Step -1
            B = False
            For j = Me.lstAvailableResources.ListCount - 1 To 0 Step -1
                If LCase(Me.lstAvailableResources.List(j)) = LCase(.List(i)) Then
                    Me.lstAvailableResources.RemoveItem (j)
                    B = True
                    Exit For
                End If
            Next
            'Remove name from selected box, if it has been deleted from the main resources list
            If B = False Then .RemoveItem (i)
        Next i
    End With
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then Cancel = True
End Sub
Attribute VB_Name = "frm_Resources"
Attribute VB_Base = "0{43F0AE2B-C5F4-4D7C-BC57-054D2B72F640}{FBFF73C3-F416-41F7-8DE6-32E886A92C28}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.


Option Explicit
Private bDisableChanges As Boolean

Private Sub btnImportResources_Click()
Unload Me
Dim curws As String
rungsschk
curws = ActiveSheet.Name
gss.visible = xlSheetVisible
gss.Activate
Range("VGR1").Value = curws
MsgBox "DO NOT Delete or Rename this settings worksheet.", vbCritical
Range("K1").Select
End Sub
Private Sub UserForm_Initialize()
    #If Mac Then
    #Else
        With Me
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        End With
    #End If
    rungsschk
    Me.btn_Edit.enabled = False
    Me.btn_Edit.Caption = "Edit"
    Me.btn_Delete.enabled = False
    Dim i As Long, j As Long
    j = 2
    i = 2
    With Me.lst_Resources
        Do Until gss.Cells(j, 1).Value = vbNullString
            .AddItem
            .List(i - 2, 1) = gss.Cells(j, 1).Value2
            .List(i - 2, 2) = gss.Cells(j, 2).Value2
            i = i + 1
            j = j + 1
        Loop
    End With
    Me.txt_ResourceName.SetFocus
    Me.btnOk.enabled = False
last:
    Label2.BackColor = Me.BackColor
    Label1.BackColor = Me.BackColor
End Sub
Private Sub btn_Add_Click()
    FormatResourceName
    If Me.txt_ResourceName <> vbNullString Then
        Dim i As Long
        For i = 0 To Me.lst_Resources.ListCount - 1
            If LCase(Me.txt_ResourceName.Value) = LCase(Me.lst_Resources.List(i, 1)) Then
                MsgBox "resource name already exists", vbInformation, "Information"
                Exit Sub
            End If
        Next i
        If Me.txt_Cost.Value = vbNullString Then Me.txt_Cost.Value = 0
        With Me.lst_Resources
            .AddItem
            .List(.ListCount - 1, 0) = 1
            .List(.ListCount - 1, 2) = Me.txt_Cost.Value
            .List(.ListCount - 1, 1) = Me.txt_ResourceName.Value
            Me.txt_Cost = vbNullString
            Me.txt_ResourceName = vbNullString
            Me.lst_Resources.ListIndex = -1
            Me.btn_Delete.enabled = False
            Me.btn_Edit.enabled = False
            Me.btnOk.enabled = True
            Me.btnOk.BackColor = RGB(219, 243, 187)

        End With
        With Me.txt_Cost
            .SetFocus
            .SelStart = 0
            .SelLength = Len(.Value)
        End With
        Me.txt_ResourceName.SetFocus
    Else
        MsgBox "Enter resource name to add a new resource", vbInformation, "Information"
        If Me.txt_Cost.Value = vbNullString Then
            Me.txt_Cost.SetFocus
        ElseIf Me.txt_ResourceName.Value = vbNullString Then
            Me.txt_ResourceName.SetFocus
        End If
    End If
End Sub

Private Sub btn_Delete_Click()
    If Me.lst_Resources.ListIndex <> -1 Then
        Me.lst_Resources.RemoveItem Me.lst_Resources.ListIndex
        Me.btn_Edit.enabled = False
        Me.btn_Delete.enabled = False
        Me.txt_Cost.Value = vbNullString
        Me.txt_ResourceName.Value = vbNullString
        Me.btn_Edit.Caption = "Edit"
        Me.btn_Edit.enabled = False
        Me.btn_Delete.enabled = False
        Me.lst_Resources.ListIndex = -1
        Me.btnOk.enabled = True
    End If
End Sub

Private Sub btn_Edit_Click()

    If Me.btn_Edit.Caption = "Edit" Then
        If Me.lst_Resources.ListIndex <> -1 Then
            Me.txt_Cost.Value = Me.lst_Resources.List(Me.lst_Resources.ListIndex, 2)
            Me.txt_ResourceName.Value = Me.lst_Resources.List(Me.lst_Resources.ListIndex, 1)

            Me.btn_Edit.Caption = "Save"
            Me.lst_Resources.enabled = False
            Me.btn_Add.enabled = False
            Me.btnOk.enabled = False
            Me.btn_Delete.enabled = False
            Me.btnOk.BackColor = Me.BackColor
            
        End If
        Exit Sub
    End If
    If Me.lst_Resources.ListIndex = -1 Then
        MsgBox "Select a resource to edit", vbInformation, "Information"
        GoTo last
    End If
    bDisableChanges = True
    FormatResourceName
    If Me.txt_Cost.Value = vbNullString Then Me.txt_Cost.Value = 0
    Me.lst_Resources.List(Me.lst_Resources.ListIndex, 2) = Me.txt_Cost.Value
    Me.lst_Resources.List(Me.lst_Resources.ListIndex, 1) = Me.txt_ResourceName.Value
    Me.txt_ResourceName.Value = vbNullString
    Me.txt_Cost.Value = vbNullString
    Me.btn_Edit.enabled = False
    Me.btn_Delete.enabled = False
    Me.lst_Resources.ListIndex = -1
    Me.txt_Cost.SetFocus
    bDisableChanges = False
    Me.btn_Edit.Caption = "Edit"
    Me.lst_Resources.enabled = True
    Me.btn_Add.enabled = True
    Me.btnOk.enabled = True
    Me.btnOk.BackColor = RGB(219, 243, 187)
last:
End Sub

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub btnOk_Click()
DisableAll
rungsschk
gss.Range("A2", "B10000").ClearContents
Dim i As Long, j As Long
j = 2
For i = 0 To Me.lst_Resources.ListCount - 1
    gss.Cells(j, 2).Value = CLng(Me.lst_Resources.List(i, 2))
    gss.Cells(j, 1).Value = Me.lst_Resources.List(i, 1)
    j = j + 1
Next i
SortResourceNames
RemoveInvalidResourcesNamesFromTasks bPopulateResourceCost:=True
PopulateEstimatesCostsFromResourceInSheet
LockSheet ActiveSheet
EnableAll
Unload Me
End Sub
Private Sub SortResourceNames()
rungsschk
gss.Range(gss.Cells(2, 1), gss.Cells(Cells.Rows.Count, 2)).Sort gss.Cells(1, 1), xlAscending, , , , , , xlNo
End Sub
Private Sub lst_Resources_Click()
    If bDisableChanges = True Then Exit Sub
    If Me.lst_Resources.ListIndex <> -1 Then
        Me.btn_Edit.enabled = True
        Me.btn_Delete.enabled = True
    End If
End Sub
Private Sub txt_cost_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    FormatResourceName
End Sub
Private Sub FormatResourceName()
    If IsNumeric(Me.txt_Cost) Then
        Me.txt_Cost.Value = CLng(Me.txt_Cost.Value)
    Else
        Me.txt_Cost.Value = vbNullString
    End If
End Sub

Private Sub UserForm_Terminate()
    LockSheet ActiveSheet
End Sub
Attribute VB_Name = "frm_Settings"
Attribute VB_Base = "0{0A480513-C96B-4108-82C0-AD3FC5E6CB43}{6C160DD9-91D6-4842-969F-7EA1E006FB90}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub comThemes_Change()
AddBarColors
End Sub

Private Sub lblCalRow3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
 Dim sc As Double
    sc = PickNewColor(Me.lblCalRow3.ForeColor)
    If sc <> -1 Then
        Me.lblCalRow3.BackColor = sc
        Me.lblCalRow3.Caption = sc
        Me.lblCalRow3.ForeColor = sc
    End If
End Sub

Private Sub lblCalRow2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
 Dim sc As Double
    sc = PickNewColor(Me.lblCalRow2.ForeColor)
    If sc <> -1 Then
        Me.lblCalRow2.BackColor = sc
        Me.lblCalRow2.Caption = sc
        Me.lblCalRow2.ForeColor = sc
    End If
End Sub
Private Sub lblCalRow12_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
 Dim sc As Double
    sc = PickNewColor(Me.lblCalRow12.ForeColor)
    If sc <> -1 Then
        Me.lblCalRow12.BackColor = sc
        Me.lblCalRow12.Caption = sc
        Me.lblCalRow12.ForeColor = sc
    End If
End Sub
Private Sub lblCalRow11_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
 Dim sc As Double
    sc = PickNewColor(Me.lblCalRow11.ForeColor)
    If sc <> -1 Then
        Me.lblCalRow11.BackColor = sc
        Me.lblCalRow11.Caption = sc
        Me.lblCalRow11.ForeColor = sc
    End If
End Sub
Private Sub lblNonWorkingDay_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
 Dim sc As Double
    sc = PickNewColor(Me.lblNonWorkingDay.ForeColor)
    If sc <> -1 Then
        Me.lblNonWorkingDay.BackColor = sc
        Me.lblNonWorkingDay.Caption = sc
        Me.lblNonWorkingDay.ForeColor = sc
    End If
End Sub

Private Sub lblHolidaysColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
 Dim sc As Double
    sc = PickNewColor(Me.lblHolidaysColor.ForeColor)
    If sc <> -1 Then
        Me.lblHolidaysColor.BackColor = sc
        Me.lblHolidaysColor.Caption = sc
        Me.lblHolidaysColor.ForeColor = sc
    End If
End Sub

Private Sub lblProjectBarColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
 Dim sc As Double
    sc = PickNewColor(Me.lblProjectBarColor.ForeColor)
    If sc <> -1 Then
        Me.lblProjectBarColor.BackColor = sc
        Me.lblProjectBarColor.Caption = sc
        Me.lblProjectBarColor.ForeColor = sc
    End If
End Sub


Private Sub lblHeaderBarColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
 Dim sc As Double
    sc = PickNewColor(Me.lblHeaderBarColor.ForeColor)
    If sc <> -1 Then
        Me.lblHeaderBarColor.BackColor = sc
        Me.lblHeaderBarColor.Caption = sc
        Me.lblHeaderBarColor.ForeColor = sc
    End If
End Sub

Private Sub txtTimelineCol_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
If Not IsNumeric(txtTimelineCol.Value) Then
    Call newerrorhandling("Numbers only")
    Cancel = True
End If
If txtTimelineCol.Value < 2 Then
    txtTimelineCol.Value = 2
End If
End Sub
Private Sub txtTimeWeeks_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
If Not IsNumeric(txtTimeWeeks.Value) Then
    Call newerrorhandling("Numbers only")
    Cancel = True
End If
If txtTimeWeeks.Value < 2 Then
    txtTimeWeeks.Value = 2
End If
End Sub

Private Sub txtTimeMonths_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
If Not IsNumeric(txtTimeMonths.Value) Then
    Call newerrorhandling("Numbers only")
    Cancel = True
End If
If txtTimeMonths.Value < 2 Then
    txtTimeMonths.Value = 2
End If
End Sub

Private Sub txtTimeQuarters_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
If Not IsNumeric(txtTimeQuarters.Value) Then
    Call newerrorhandling("Numbers only")
    Cancel = True
End If
If txtTimeQuarters.Value < 2 Then
    txtTimeQuarters.Value = 2
End If
End Sub

Private Sub txtTimeHalfs_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
If Not IsNumeric(txtTimeHalfs.Value) Then
    Call newerrorhandling("Numbers only")
    Cancel = True
End If
If txtTimeHalfs.Value < 2 Then
    txtTimeHalfs.Value = 2
End If
End Sub

Private Sub txtTimeYears_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
If Not IsNumeric(txtTimeYears.Value) Then
    Call newerrorhandling("Numbers only")
    Cancel = True
End If
If txtTimeYears.Value < 2 Then
    txtTimeYears.Value = 2
End If
End Sub

Private Sub txtTimelineColumnWidth_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
If Not IsNumeric(txtTimelineColumnWidth.Value) Then
    Call newerrorhandling("Numbers only")
    Cancel = True
End If
If txtTimelineColumnWidth.Value < 2 Then
    txtTimelineColumnWidth.Value = 2
    Cancel = True
End If
End Sub
Private Sub txtWeekWidth_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
If Not IsNumeric(txtWeekWidth.Value) Then
    Call newerrorhandling("Numbers only")
    Cancel = True
End If
If txtWeekWidth.Value < 2 Then
    txtWeekWidth.Value = 2
    Cancel = True
End If
End Sub
Private Sub txtMonthWidth_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
If Not IsNumeric(txtMonthWidth.Value) Then
    Call newerrorhandling("Numbers only")
    Cancel = True
End If
If txtMonthWidth.Value < 2 Then
    txtMonthWidth.Value = 2
    Cancel = True
End If
End Sub
Private Sub txtQuarterWidth_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
If Not IsNumeric(txtQuarterWidth.Value) Then
    Call newerrorhandling("Numbers only")
    Cancel = True
End If
If txtQuarterWidth.Value < 2 Then
    txtQuarterWidth.Value = 2
    Cancel = True
End If
End Sub
Private Sub txtHalfWidth_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
If Not IsNumeric(txtHalfWidth.Value) Then
    Call newerrorhandling("Numbers only")
    Cancel = True
End If
If txtHalfWidth.Value < 2 Then
    txtHalfWidth.Value = 2
    Cancel = True
End If
End Sub
Private Sub txtYearlyWidth_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
If Not IsNumeric(txtYearlyWidth.Value) Then
    Call newerrorhandling("Numbers only")
    Cancel = True
End If
If txtYearlyWidth.Value < 2 Then
    txtYearlyWidth.Value = 2
    Cancel = True
End If
End Sub

Private Sub newerrorhandling(ErrorCaption As String)
MsgBox ErrorCaption, vbCritical
End Sub

Private Sub UserForm_Initialize()
    #If Mac Then
    #Else
        With Me
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        End With
    #End If
    rungsschk
    Me.comThemes.Value = gss.Range("Y2").Value
    Me.comThemes.List = gss.Range("X2", gss.Range("X2").End(xlDown)).Value
    txtTimelineColumnWidth = gss.Range("CG2").Value
    txtWeekWidth = gss.Range("CH2").Value
    txtMonthWidth = gss.Range("CI2").Value
    txtQuarterWidth = gss.Range("CJ2").Value
    txtHalfWidth = gss.Range("CK2").Value
    txtYearlyWidth = gss.Range("CL2").Value
    Me.txtTimelineCol.Value = gss.Range("CA2").Value
    Me.txtTimeWeeks.Value = gss.Range("CB2").Value
    Me.txtTimeMonths.Value = gss.Range("CC2").Value
    Me.txtTimeQuarters.Value = gss.Range("CD2").Value
    Me.txtTimeHalfs.Value = gss.Range("CE2").Value
    Me.txtTimeYears.Value = gss.Range("CF2").Value
    ReCalculateColPos
    PopulateListBox
    PopulateCalendar
    DeleteShapesInSheet
    AddBarColors
    Dim i As Long
    For i = 1 To 50
        Me.cmbBarTextCharacters.AddItem i
    Next
    For i = 1 To 25
        Me.cmbBarTextFontSize.AddItem i
    Next

    Me.chkShowTaskNameOnGanttBars = CBool(Cells(cRowPos, colPos.BarTextEnable).Value)
    Me.cmbBarTextCharacters.Value = Cells(cRowPos, colPos.BarTextCharacters).Value
    If Cells(cRowPos, colPos.BarTextDataColumnName).Value = vbNullString Then
        Cells(cRowPos, colPos.BarTextDataColumnName).Value = "Task"
    End If
    Me.cmbBarTextColumnName.Value = Cells(cRowPos, colPos.BarTextDataColumnName).Value
    Me.chkBarTextIsBold = CBool(Cells(cRowPos, colPos.BarTextIsBold).Value)
    Me.chkBarTextIsItalic = CBool(Cells(cRowPos, colPos.BarTextIsItalic).Value)
    Me.chkBarTextIsUnderline = CBool(Cells(cRowPos, colPos.BarTextIsUnderline).Value)
    Me.chkShowActualsBars = CBool(Cells(cRowPos, colPos.ShowActualBar).Value)
    Me.chkShowBaselineBars = CBool(Cells(cRowPos, colPos.ShowBaselineBar).Value)
    Me.chkShowOverdueBars = CBool(Cells(cRowPos, colPos.ShowOverdueBar).Value)
    Me.cmbBarTextFontSize.Value = Cells(cRowPos, colPos.BarTextFontSize).Value

    If Cells(cRowPos, colPos.WeekNumType).Value = "ISO" Then
        optWeekNumISO = 1
        optWeekNumNormal = 0
    Else
        optWeekNumNormal = 1
        optWeekNumISO = 0
    End If

    'Percentage Settings
    If LCase(Cells(cRowPos, colPos.PercentageCalculationType).Value) = "simple" Then
        Me.optPercentageCalculationSimple.Value = True
    ElseIf LCase(Cells(cRowPos, colPos.PercentageCalculationType).Value) = "weighted" Then
        Me.optPercentageCalculationWeighted.Value = True
    End If
    If LCase(Cells(cRowPos, colPos.PercentageEntryMode).Value) = "manual" Then
        Me.optPercentageEntryManual.Value = True
    ElseIf LCase(Cells(cRowPos, colPos.PercentageEntryMode).Value) = "automatic" Then
        Me.optPercentageEntryAutomatic.Value = True
    End If
    Me.cmbDateFormat = GetDateFormatForDisplay(Cells(cRowPos, colPos.DateFormat).Value)
    With Me.cmbDateFormat
        .AddItem "MM/DD/YY"
        .AddItem "MM/DD/YYYY"
        .AddItem "DDD MM/DD/YY"
        .AddItem "DDD MM/DD/YYYY"
        .AddItem "DD-MM-YY"
        .AddItem "DD-MMM-YY"
        .AddItem "DD-MM-YYYY"
        .AddItem "DD-MMM-YYYY"
        .AddItem "DDD DD-MM-YY"
        .AddItem "DDD DD-MMM-YY"
        .AddItem "DDD DD-MMM-YYYY"
        .AddItem "YYYY-MM-DD"
        .AddItem "MM.DD.YYYY"
        .AddItem "MM.DD.YY"
        .AddItem "DD.MM.YYYY"
        .AddItem "DD.MM.YY"
        .AddItem "DD.MMM.YYYY"
        .AddItem "DD.MMM.YY"

    End With
    PopulateCurrency
        If RestrictThisInTrial Then
        Me.btnUpdateColor.enabled = False
        Me.lblRestrict.visible = True
        Me.btnInsertNewColumn.enabled = False
        Me.btnDeleteColumn.enabled = False
    Else
        Me.btnUpdateColor.enabled = True
        Me.lblRestrict.visible = False
        Me.btnInsertNewColumn.enabled = True
        Me.btnDeleteColumn.enabled = True
    End If
Dim settingssheetx As Long
settingssheetx = Worksheets("Template").Range("VGC2").Value
For i = 1 To settingssheetx
        cmbSettingsSheets.AddItem "GCS-" & i
Next
cmbSettingsSheets = Cells(cRowPos, colPos.ProjectSheetName).Value
    
    frmBarText.Font.size = 8
    frmBarColors.Font.size = 8
    frmWorkDays.Font.size = 8
    frmWeekNum.Font.size = 8
End Sub
Private Sub UserForm_Terminate()
    AddGanttBarsForEachRow True
    LockSheet ActiveSheet
    EnableAll
End Sub

Private Sub btnDeleteColumn_Click()
    If lstColumnsList.ListIndex < 0 Then Exit Sub
    Dim i As Long
    i = Me.lstColumnsList.ListIndex
    If lstColumnsList.List(lstColumnsList.ListIndex, 1) = "System" Then
        MsgBox "Only user added columns can be deleted", vbInformation, "Information"
        Exit Sub
    End If
    If MsgBox("Are you sure you want to delete this column?", vbQuestion + vbYesNo, "Delete Confirmation") = vbYes Then
        Dim iCol As Long
        iCol = Application.WorksheetFunction.Match(lstColumnsList.List(lstColumnsList.ListIndex, 2), Range("1:1").Value, 0)
        Application.EnableEvents = False
        Cells(cRowPos, iCol).EntireColumn.Delete
        Application.EnableEvents = True
        lstColumnsList.RemoveItem lstColumnsList.ListIndex
        ReCalculateColPos
    End If
    Me.lstColumnsList.Selected(i - 1) = True
    Cells(cRowPos, colPos.BarTextDataColumnName).Value = "Task"
    PopulateBarTextComboBoxValues
    PositionScrollBar
End Sub
Private Sub lstColumnsList_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim i As Long
    If Me.lstColumnsList.ListIndex < 0 Then Exit Sub
    i = Me.lstColumnsList.ListIndex
    HideUnhideColumns
    PositionScrollBar
    Me.lstColumnsList.Selected(i) = True
End Sub
Private Sub btnHideUnhide_Click()
    Dim i As Long
    If Me.lstColumnsList.ListIndex < 0 Then Exit Sub
    i = Me.lstColumnsList.ListIndex
    HideUnhideColumns
    PositionScrollBar
    Me.lstColumnsList.Selected(i) = True
End Sub
Private Sub HideUnhideColumns()
    Dim iCol As Long, bLock As Boolean
    iCol = Application.WorksheetFunction.Match(lstColumnsList.List(lstColumnsList.ListIndex, 2), Range("1:1").Value, 0)
    If lstColumnsList.List(lstColumnsList.ListIndex, 3) = "Show" Then
        Columns(iCol).Hidden = True
        Me.lstColumnsList.List(Me.lstColumnsList.ListIndex, 3) = "Hide"
    Else
        Columns(iCol).Hidden = False
        Me.lstColumnsList.List(Me.lstColumnsList.ListIndex, 3) = "Show"
    End If
    PopulateListBox
End Sub
Sub PositionScrollBar()

End Sub
Private Sub btnInsertNewColumn_Click()
    If Trim(Me.txtColumnName) = vbNullString Then Exit Sub
    Dim iPos As Long
    For iPos = 0 To lstColumnsList.ListCount - 1
        If LCase(lstColumnsList.List(iPos)) = LCase(Me.txtColumnName) Then
            MsgBox "Column name already exists.", vbInformation, "Information"
            Me.txtColumnName.SetFocus
            Exit Sub
        End If
        If LCase(lstColumnsList.List(iPos, 2)) = LCase(Me.txtColumnName) Then
            MsgBox "Cannot use this name as column name.", vbInformation, "Information"
            Me.txtColumnName.SetFocus
            Exit Sub
        End If
    Next
    If Me.lstColumnsList.ListCount >= 21 + cTotalCustomColumns Then
        MsgBox "You cannot add more than " & cTotalCustomColumns & " custom columns.", vbInformation, "Information"
        Me.txtColumnName = vbNullString
        Me.txtColumnName.SetFocus
        Exit Sub
    End If
    Me.lstColumnsList.AddItem Me.txtColumnName, Me.lstColumnsList.ListCount - 1 - 1 - 1 - 1
    Me.lstColumnsList.List(Me.lstColumnsList.ListCount - 1 - 2 - 2, 1) = "Custom"
    Me.lstColumnsList.List(Me.lstColumnsList.ListCount - 1 - 2 - 2, 2) = Me.txtColumnName.Value
    Me.lstColumnsList.List(Me.lstColumnsList.ListCount - 1 - 2 - 2, 3) = "Show"

    DisableAll
    Cells(cRowPos, colPos.TColor).EntireColumn.Insert
    Cells(1, colPos.TColor).Value = Me.txtColumnName
    Cells(2, colPos.TColor).Value = "Custom"
    Cells(cHeaderRow, colPos.TColor).Value = Me.txtColumnName.Value

    With Range(Cells(cHeaderRow, colPos.TColor), Cells(Cells.Rows.Count, colPos.TColor))
        .Locked = False
        .NumberFormat = "General"
        .WrapText = True
    End With

    Me.txtColumnName = vbNullString
    Me.txtColumnName.SetFocus

    ReCalculateColPos
    PopulateBarTextComboBoxValues 1
    EnableAll
    PositionScrollBar
End Sub
Private Sub btnOkCalendar_Click()
rungsschk
Dim bWorkdayChanged As Boolean
Dim bWeekStartDayChanged As Boolean
Dim bWeekNumChanged As Boolean
With Me
    If .chkWorkdaySun.Value = False And .chkWorkdayMon.Value = False And .chkWorkdayTue.Value = False And _
       .chkWorkdayWed.Value = False And .chkWorkdayThu.Value = False And .chkWorkdayFri.Value = False And _
       .chkWorkdaySat.Value = False Then
        MsgBox "Select atleast one workday", vbInformation, "No workday is selected"
        Exit Sub
    End If
End With
If CBool(Cells(cRowPos, colPos.WorkdayMon).Value) <> Me.chkWorkdayMon.Value Then
    Cells(cRowPos, colPos.WorkdayMon).Value = CBool(Me.chkWorkdayMon.Value)
    bWorkdayChanged = True
End If
If CBool(Cells(cRowPos, colPos.WorkdayTue).Value) <> Me.chkWorkdayTue.Value Then
    Cells(cRowPos, colPos.WorkdayTue).Value = CBool(Me.chkWorkdayTue.Value)
    bWorkdayChanged = True
End If
If CBool(Cells(cRowPos, colPos.WorkdayWed).Value) <> Me.chkWorkdayWed.Value Then
    Cells(cRowPos, colPos.WorkdayWed).Value = CBool(Me.chkWorkdayWed.Value)
    bWorkdayChanged = True
End If
If CBool(Cells(cRowPos, colPos.WorkdayThu).Value) <> Me.chkWorkdayThu.Value Then
    Cells(cRowPos, colPos.WorkdayThu).Value = CBool(Me.chkWorkdayThu.Value)
    bWorkdayChanged = True
End If
If CBool(Cells(cRowPos, colPos.WorkdayFri).Value) <> Me.chkWorkdayFri.Value Then
    Cells(cRowPos, colPos.WorkdayFri).Value = CBool(Me.chkWorkdayFri.Value)
    bWorkdayChanged = True
End If
If CBool(Cells(cRowPos, colPos.WorkDaySat).Value) <> Me.chkWorkdaySat.Value Then
    Cells(cRowPos, colPos.WorkDaySat).Value = CBool(Me.chkWorkdaySat.Value)
    bWorkdayChanged = True
End If
If CBool(Cells(cRowPos, colPos.WorkdaySun).Value) <> Me.chkWorkdaySun.Value Then
    Cells(cRowPos, colPos.WorkdaySun).Value = CBool(Me.chkWorkdaySun.Value)
    bWorkdayChanged = True
End If
DisableAll
Select Case Me.cmbWeekStartDay.Value
Case "Monday"
    If Cells(cRowPos, colPos.WeekStartDay).Value <> 1 Then
        Cells(cRowPos, colPos.WeekStartDay).Value = 1
        bWeekStartDayChanged = True
    End If
Case "Tuesday"
    If Cells(cRowPos, colPos.WeekStartDay).Value <> 2 Then
        Cells(cRowPos, colPos.WeekStartDay).Value = 2
        bWeekStartDayChanged = True
    End If
Case "Wednesday"
    If Cells(cRowPos, colPos.WeekStartDay).Value <> 3 Then
        Cells(cRowPos, colPos.WeekStartDay).Value = 3
        bWeekStartDayChanged = True
    End If
Case "Thursday"
    If Cells(cRowPos, colPos.WeekStartDay).Value <> 4 Then
        Cells(cRowPos, colPos.WeekStartDay).Value = 4
        bWeekStartDayChanged = True
    End If
Case "Friday"
    If Cells(cRowPos, colPos.WeekStartDay).Value <> 5 Then
        Cells(cRowPos, colPos.WeekStartDay).Value = 5
        bWeekStartDayChanged = True
    End If
Case "Saturday"
    If Cells(cRowPos, colPos.WeekStartDay).Value <> 6 Then
        Cells(cRowPos, colPos.WeekStartDay).Value = 6
        bWeekStartDayChanged = True
    End If
Case "Sunday"
    If Cells(cRowPos, colPos.WeekStartDay).Value <> 7 Then
        Cells(cRowPos, colPos.WeekStartDay).Value = 7
        bWeekStartDayChanged = True
    End If
End Select
If optWeekNumISO = True Then
    If Cells(cRowPos, colPos.WeekNumType).Value <> "ISO" Then
        bWeekNumChanged = 1
        Cells(cRowPos, colPos.WeekNumType).Value = "ISO"
    End If

ElseIf optWeekNumNormal = True Then
    If Cells(cRowPos, colPos.WeekNumType).Value <> "Normal" Then
        Cells(cRowPos, colPos.WeekNumType).Value = "Normal"
        bWeekNumChanged = 1
    End If
End If
If bWorkdayChanged = True Or bWeekNumChanged = True Then
    Application.ScreenUpdating = False
    sArr.LoadWeekEnds
    ReCalculateAllDurations True
    PopulateSectionDates True
    ReBuildView , True
    bWorkdayChanged = False
    Application.ScreenUpdating = True
End If
gss.Range("CA2").Value = Me.txtTimelineCol.Value
gss.Range("CB2").Value = Me.txtTimeWeeks.Value
gss.Range("CC2").Value = Me.txtTimeMonths.Value
gss.Range("CD2").Value = Me.txtTimeQuarters.Value
gss.Range("CE2").Value = Me.txtTimeHalfs.Value
gss.Range("CF2").Value = Me.txtTimeYears.Value
gss.Range("CG2").Value = Me.txtTimelineColumnWidth.Value
gss.Range("CH2").Value = Me.txtWeekWidth.Value
gss.Range("CI2").Value = Me.txtMonthWidth.Value
gss.Range("CJ2").Value = Me.txtQuarterWidth.Value
gss.Range("CK2").Value = Me.txtHalfWidth.Value
gss.Range("CL2").Value = Me.txtYearlyWidth.Value
If bWeekStartDayChanged Then
    ReBuildView
    bWeekStartDayChanged = False
End If
TriggerDailyViewBuild
Unload Me
EnableAll
End Sub


Private Sub SpinButton1_SpinDown()
    If lstColumnsList.ListIndex = lstColumnsList.ListCount - 5 Then
        MsgBox "Cannot move column after the color columns", vbInformation, "Gantt Excel"
        Exit Sub
    End If
    If lstColumnsList.ListIndex >= lstColumnsList.ListCount - 4 Then
        MsgBox "Color columns cannot be moved.", vbInformation, "Gantt Excel"
        Exit Sub
    End If
    MoveItem 1
    MoveColumn 2
    ReCalculateColPos
End Sub

Private Sub SpinButton1_SpinUp()
    If lstColumnsList.ListIndex = 0 Then Exit Sub
    If lstColumnsList.ListIndex >= lstColumnsList.ListCount - 4 Then
        MsgBox "Color columns cannot be moved.", vbInformation, "Gantt Excel"
        Exit Sub
    End If
    MoveItem -1
    MoveColumn -1
    ReCalculateColPos
End Sub
Private Sub MoveItem(lOffset As Long)
    Dim aTemp() As String
    Dim i As Long, t As Long
    With Me.lstColumnsList
        If .ListIndex > -1 Then
            t = .ListIndex
            ReDim aTemp(0 To .ColumnCount - 1)
            For i = 0 To .ColumnCount - 1
                aTemp(i) = .List(.ListIndex + lOffset, i)
                .List(.ListIndex + lOffset, i) = .List(.ListIndex, i)
                .List(.ListIndex, i) = aTemp(i)
            Next i
            .Selected(t + lOffset) = True
        End If
    End With
End Sub
Sub MoveColumn(mOffset As Long)
    Dim iCol As Long
    Application.EnableEvents = False
    iCol = Application.WorksheetFunction.Match(lstColumnsList.List(lstColumnsList.ListIndex, 2), Range("1:1").Value, 0)
    Columns(iCol).EntireColumn.Cut
    Columns(iCol + mOffset).Insert Shift:=xlToRight
    Application.CutCopyMode = False
    Application.EnableEvents = True
End Sub


Private Sub PopulateCalendar()
    Me.chkWorkdayMon.Value = CBool(Cells(cRowPos, colPos.WorkdayMon).Value)
    Me.chkWorkdayTue.Value = CBool(Cells(cRowPos, colPos.WorkdayTue).Value)
    Me.chkWorkdayWed.Value = CBool(Cells(cRowPos, colPos.WorkdayWed).Value)
    Me.chkWorkdayThu.Value = CBool(Cells(cRowPos, colPos.WorkdayThu).Value)
    Me.chkWorkdayFri.Value = CBool(Cells(cRowPos, colPos.WorkdayFri).Value)
    Me.chkWorkdaySat.Value = CBool(Cells(cRowPos, colPos.WorkDaySat).Value)
    Me.chkWorkdaySun.Value = CBool(Cells(cRowPos, colPos.WorkdaySun).Value)
End Sub

Private Sub PopulateListBox()
    Dim cCol As Long, iSel As Long
    Dim lCol As Long
    If Me.lstColumnsList.ListIndex < 0 Then
        iSel = 10000
    Else
        iSel = Me.lstColumnsList.ListIndex
    End If
    If RestrictThisInTrial Then
        lCol = colPos.TimelineStart - 3
    Else
        lCol = colPos.TimelineStart - 1
    End If
    Me.lstColumnsList.Clear

    Me.cmbBarTextColumnName.Clear
    For cCol = colPos.WBS + 1 To lCol
        Me.lstColumnsList.AddItem Cells(cHeaderRow, cCol).Value
        Me.lstColumnsList.List(Me.lstColumnsList.ListCount - 1, 1) = Cells(cRowPos, cCol).Value
        Me.lstColumnsList.List(Me.lstColumnsList.ListCount - 1, 2) = Cells(1, cCol).Value
        If Columns(cCol).Hidden Then
            Me.lstColumnsList.List(Me.lstColumnsList.ListCount - 1, 3) = "Hide"
        Else
            Me.lstColumnsList.List(Me.lstColumnsList.ListCount - 1, 3) = "Show"
        End If

        If cCol < colPos.TColor Then
            Me.cmbBarTextColumnName.AddItem Cells(cActualHeaderRow, cCol).Value
            Me.cmbBarTextColumnName.List(Me.cmbBarTextColumnName.ListCount - 1, 1) = Cells(cHeaderRow, cCol).Value
        End If
    Next

    If iSel = 10000 Then
        Me.lstColumnsList.Selected(0) = True
    End If
End Sub
Sub PopulateBarTextComboBoxValues(Optional t As Boolean)
    Dim cCol As Long, curColName As String
    If t = 0 Then ReCalculateColPos
    Me.cmbBarTextColumnName.Clear
    curColName = Cells(cRowPos, colPos.BarTextDataColumnName).Value
    If curColName = vbNullString Then
        curColName = "Task"
        Cells(cRowPos, colPos.BarTextDataColumnName).Value = curColName
    End If

    For cCol = colPos.WBS + 1 To colPos.TColor - 1
        Me.cmbBarTextColumnName.AddItem Cells(cActualHeaderRow, cCol).Value
        Me.cmbBarTextColumnName.List(Me.cmbBarTextColumnName.ListCount - 1, 1) = Cells(cHeaderRow, cCol).Value
    Next cCol
    Me.cmbBarTextColumnName.Value = curColName
End Sub

Sub AddBarColors()
rungsschk
Dim themeaddress As Range, themerow As Long
Dim themeselected As String
themeselected = comThemes.Value
Set themeaddress = gss.Range("X1:X100").Find(themeselected)
themerow = themeaddress.Row

    Me.lblEstColor.BackColor = gss.Cells(themerow, 26).Interior.Color
    Me.lblEstColor.Caption = Me.lblEstColor.BackColor
    Me.lblEstColor.ForeColor = Me.lblEstColor.BackColor
    
    Me.lblMilestoneColor.BackColor = gss.Cells(themerow, 27).Interior.Color
    Me.lblMilestoneColor.Caption = Me.lblMilestoneColor.BackColor
    Me.lblMilestoneColor.ForeColor = Me.lblMilestoneColor.BackColor

    Me.lblPercentColor.BackColor = gss.Cells(themerow, 28).Interior.Color
    Me.lblPercentColor.Caption = Me.lblPercentColor.BackColor
    Me.lblPercentColor.ForeColor = Me.lblPercentColor.BackColor

    Me.lblBaselineColor.BackColor = gss.Cells(themerow, 29).Interior.Color
    Me.lblBaselineColor.Caption = Me.lblBaselineColor.BackColor
    Me.lblBaselineColor.ForeColor = Me.lblBaselineColor.BackColor

    Me.lblActualsColor.BackColor = gss.Cells(themerow, 30).Interior.Color
    Me.lblActualsColor.Caption = Me.lblActualsColor.BackColor
    Me.lblActualsColor.ForeColor = Me.lblActualsColor.BackColor

    With Me.lblOverdueColor
        .BackColor = gss.Cells(themerow, 31).Interior.Color
        .Caption = .BackColor
        .ForeColor = .BackColor
    End With

    Me.lblConnectorColor.BackColor = gss.Cells(themerow, 32).Interior.Color
    Me.lblConnectorColor.Caption = Me.lblConnectorColor.BackColor
    Me.lblConnectorColor.ForeColor = Me.lblConnectorColor.BackColor

    Me.chkShowDependencyArrow.Value = CBool(Cells(cRowPos, colPos.ShowDependencyConnector).Value2)

    Me.chkShowTodayLines.Value = CBool(Cells(cRowPos, colPos.ShowTodayLines).Value2)

    Me.lblBarTextCharacterColor.BackColor = gss.Cells(themerow, 44).Interior.Color
    Me.lblBarTextCharacterColor.Caption = Me.lblBarTextCharacterColor.BackColor
    Me.lblBarTextCharacterColor.ForeColor = Me.lblBarTextCharacterColor.BackColor


    Me.lblTodayLineColor.BackColor = gss.Cells(themerow, 33).Interior.Color
    Me.lblTodayLineColor.Caption = Me.lblTodayLineColor.BackColor
    Me.lblTodayLineColor.ForeColor = Me.lblTodayLineColor.BackColor

    Me.lblTaskBorderColor.BackColor = gss.Cells(themerow, 34).Interior.Color
    Me.lblTaskBorderColor.Caption = Me.lblTaskBorderColor.BackColor
    Me.lblTaskBorderColor.ForeColor = Me.lblTaskBorderColor.BackColor

    Me.lblProjectBarColor.BackColor = gss.Cells(themerow, 35).Interior.Color
    Me.lblProjectBarColor.Caption = Me.lblProjectBarColor.BackColor
    Me.lblProjectBarColor.ForeColor = Me.lblProjectBarColor.BackColor
    Me.lblHeaderBarColor.BackColor = gss.Cells(themerow, 36).Interior.Color
    Me.lblHeaderBarColor.Caption = Me.lblHeaderBarColor.BackColor
    Me.lblHeaderBarColor.ForeColor = Me.lblHeaderBarColor.BackColor
    
    Me.lblHolidaysColor.BackColor = gss.Cells(themerow, 38).Interior.Color
    Me.lblHolidaysColor.Caption = Me.lblHolidaysColor.BackColor
    Me.lblHolidaysColor.ForeColor = Me.lblHolidaysColor.BackColor

    Me.lblNonWorkingDay.BackColor = gss.Cells(themerow, 39).Interior.Color
    Me.lblNonWorkingDay.Caption = Me.lblNonWorkingDay.BackColor
    Me.lblNonWorkingDay.ForeColor = Me.lblNonWorkingDay.BackColor
    
    Me.lblCalRow11.BackColor = gss.Cells(themerow, 40).Interior.Color
    Me.lblCalRow11.Caption = Me.lblCalRow11.BackColor
    Me.lblCalRow11.ForeColor = Me.lblCalRow11.BackColor
    
    Me.lblCalRow12.BackColor = gss.Cells(themerow, 41).Interior.Color
    Me.lblCalRow12.Caption = Me.lblCalRow12.BackColor
    Me.lblCalRow12.ForeColor = Me.lblCalRow12.BackColor
    
    Me.lblCalRow2.BackColor = gss.Cells(themerow, 42).Interior.Color
    Me.lblCalRow2.Caption = Me.lblCalRow2.BackColor
    Me.lblCalRow2.ForeColor = Me.lblCalRow2.BackColor
    
    Me.lblCalRow3.BackColor = gss.Cells(themerow, 43).Interior.Color
    Me.lblCalRow3.Caption = Me.lblCalRow3.BackColor
    Me.lblCalRow3.ForeColor = Me.lblCalRow3.BackColor
    
    
End Sub
Private Sub lblBaselineColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblBaselineColor.ForeColor)
    If sc <> -1 Then
        Me.lblBaselineColor.BackColor = sc
        Me.lblBaselineColor.Caption = sc
        Me.lblBaselineColor.ForeColor = sc
    End If
End Sub
Private Sub lblActualsColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblActualsColor.ForeColor)
    If sc <> -1 Then
        Me.lblActualsColor.BackColor = sc
        Me.lblActualsColor.Caption = sc
        Me.lblActualsColor.ForeColor = sc
    End If
End Sub
Private Sub lblOverdueColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblOverdueColor.ForeColor)
    If sc <> -1 Then
        Me.lblOverdueColor.BackColor = sc
        Me.lblOverdueColor.Caption = sc
        Me.lblOverdueColor.ForeColor = sc
    End If
End Sub
Private Sub lblTaskBorderColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblTaskBorderColor.ForeColor)
    If sc <> -1 Then
        Me.lblTaskBorderColor.BackColor = sc
        Me.lblTaskBorderColor.Caption = sc
        Me.lblTaskBorderColor.ForeColor = sc
    End If
End Sub
Private Sub lblTodayLineColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblTodayLineColor.ForeColor)
    If sc <> -1 Then
        Me.lblTodayLineColor.BackColor = sc
        Me.lblTodayLineColor.Caption = sc
        Me.lblTodayLineColor.ForeColor = sc
    End If
End Sub
Private Sub lblMilestoneColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblMilestoneColor.ForeColor)
    If sc <> -1 Then
        Me.lblMilestoneColor.BackColor = sc
        Me.lblMilestoneColor.Caption = sc
        Me.lblMilestoneColor.ForeColor = sc
    End If
End Sub
Private Sub lblConnectorColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblConnectorColor.ForeColor)
    If sc <> -1 Then
        Me.lblConnectorColor.BackColor = sc
        Me.lblConnectorColor.Caption = sc
        Me.lblConnectorColor.ForeColor = sc
    End If
End Sub
Private Sub lblBarTextCharacterColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblBarTextCharacterColor.ForeColor)
    If sc <> -1 Then
        Me.lblBarTextCharacterColor.BackColor = sc
        Me.lblBarTextCharacterColor.Caption = sc
        Me.lblBarTextCharacterColor.ForeColor = sc
    End If
End Sub
Private Sub lblEstColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblEstColor.ForeColor)
    If sc <> -1 Then
        Me.lblEstColor.BackColor = sc
        Me.lblEstColor.Caption = sc
        Me.lblEstColor.ForeColor = sc
    End If
End Sub
Private Sub lblPercentColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblPercentColor.ForeColor)
    If sc <> -1 Then
        Me.lblPercentColor.BackColor = sc
        Me.lblPercentColor.Caption = sc
        Me.lblPercentColor.ForeColor = sc
    End If
End Sub
Sub btnUpdateColor_Click()
rungsschk
Dim cRow As Long, lRow As Long
Dim bEstChg As Boolean, bPerChg As Boolean, bMileChg As Boolean
Dim bBarTextChg As Boolean, bBorderColorChanged As Boolean
Dim bBLChg As Boolean, bAcChg As Boolean, bOverdueColorChanged As Boolean
ReCalculateColPos
If gss.Range("Z6").Interior.Color <> Me.lblEstColor.Caption Then bEstChg = True
If gss.Range("AB6").Interior.Color <> Me.lblPercentColor.Caption Then bPerChg = True
If gss.Range("AC6").Interior.Color <> Me.lblBaselineColor Then bBLChg = True
If gss.Range("AD6").Interior.Color <> Me.lblActualsColor Then bAcChg = True
If gss.Range("AA6").Interior.Color <> Me.lblMilestoneColor.Caption Then bMileChg = True
If gss.Range("AR6").Interior.Color <> Me.lblBarTextCharacterColor.Caption Then bBarTextChg = True
Application.EnableEvents = False
gss.Range("Y2").Value = "Custom"
gss.Range("AK2").Value = Me.txtTimelineColumnWidth
lRow = GetLastTaskRowNo - 2
If lRow <= cHeaderRow Then lRow = cHeaderRow + 1
For cRow = cHeaderRow + 1 To lRow
    If Cells(cRow, colPos.tType).Value = "M" Then
        If CStr(Cells(cRow, colPos.TColor).Interior.Color) = gss.Range("AA6").Interior.Color And bMileChg = True Then
            Cells(cRow, colPos.TColor).Interior.Color = Me.lblMilestoneColor.Caption
            Cells(cRow, colPos.TPColor).Interior.Color = Me.lblMilestoneColor.Caption
        End If
    Else
        If CStr(Cells(cRow, colPos.TColor).Interior.Color) = gss.Range("Z6").Interior.Color And bEstChg = True Then
            Cells(cRow, colPos.TColor).Interior.Color = Me.lblEstColor.Caption
        End If
        If CStr(Cells(cRow, colPos.TPColor).Interior.Color) = gss.Range("AB6").Interior.Color And bPerChg = True Then
            Cells(cRow, colPos.TPColor).Interior.Color = Me.lblPercentColor.Caption
        End If
        If CStr(Cells(cRow, colPos.BLColor).Interior.Color) = gss.Range("AC6").Interior.Color And bBLChg = True Then
            Cells(cRow, colPos.BLColor).Interior.Color = Me.lblBaselineColor.Caption
        End If
        If CStr(Cells(cRow, colPos.ACColor).Interior.Color) = gss.Range("AD6").Interior.Color And bAcChg = True Then
            Cells(cRow, colPos.ACColor).Interior.Color = Me.lblActualsColor.Caption
        End If
    End If
Next cRow
gss.Range("Z6").Interior.Color = Me.lblEstColor.Caption
gss.Range("AA6").Interior.Color = Me.lblMilestoneColor.Caption
gss.Range("AB6").Interior.Color = Me.lblPercentColor.Caption
gss.Range("AC6").Interior.Color = Me.lblBaselineColor
gss.Range("AD6").Interior.Color = Me.lblActualsColor
gss.Range("AE6").Interior.Color = Me.lblOverdueColor.Caption
gss.Range("AF6").Interior.Color = Me.lblConnectorColor.Caption
gss.Range("AG6").Interior.Color = Me.lblTodayLineColor.Caption
gss.Range("AH6").Interior.Color = Me.lblTaskBorderColor.Caption
gss.Range("AI6").Interior.Color = Me.lblProjectBarColor.Caption
gss.Range("AJ6").Interior.Color = Me.lblHeaderBarColor.Caption
gss.Range("AL6").Interior.Color = Me.lblHolidaysColor.Caption
gss.Range("AM6").Interior.Color = Me.lblNonWorkingDay.Caption
gss.Range("AN6").Interior.Color = Me.lblCalRow11.Caption
gss.Range("AO6").Interior.Color = Me.lblCalRow12.Caption
gss.Range("AP6").Interior.Color = Me.lblCalRow2.Caption
gss.Range("AQ6").Interior.Color = Me.lblCalRow3.Caption
Cells(cRowPos, colPos.ShowBaselineBar).Value = CBool(Me.chkShowBaselineBars.Value)
Cells(cRowPos, colPos.ShowActualBar).Value = CBool(Me.chkShowActualsBars.Value)
Cells(cRowPos, colPos.ShowOverdueBar).Value = CBool(Me.chkShowOverdueBars.Value)
Cells(cRowPos, colPos.ShowDependencyConnector).Value = CBool(Me.chkShowDependencyArrow.Value)
Cells(cRowPos, colPos.ShowTodayLines).Value = CBool(Me.chkShowTodayLines.Value)
Cells(cRowPos, colPos.BarTextCharacters).Value = Me.cmbBarTextCharacters.Value
gss.Range("AR6").Interior.Color = Me.lblBarTextCharacterColor.Caption
Cells(cRowPos, colPos.BarTextEnable).Value = CBool(Me.chkShowTaskNameOnGanttBars.Value)
Cells(cRowPos, colPos.BarTextIsBold).Value = CBool(Me.chkBarTextIsBold.Value)
Cells(cRowPos, colPos.BarTextIsItalic).Value = CBool(Me.chkBarTextIsItalic.Value)
Cells(cRowPos, colPos.BarTextIsUnderline).Value = CBool(Me.chkBarTextIsUnderline.Value)
Cells(cRowPos, colPos.BarTextFontSize).Value = Me.cmbBarTextFontSize.Value
Cells(cRowPos, colPos.BarTextDataColumnName).Value = Me.cmbBarTextColumnName.Value
If bBorderColorChanged Then AddBordersToTasks
Application.EnableEvents = True
Unload Me
frmStatus.Show
    DoEvents
    frmStatus.lblStatusMsg.Caption = "You're Awesome! - Refreshing Timeline"
    Application.Wait (Now + TimeValue("0:00:01"))
TriggerDailyViewBuild
frmStatus.lblPleaseWait.Caption = "Auto closing status popup"
frmStatus.lblStatusMsg.Caption = "All Set - You're Good to Go!"
frmStatus.lblStatusMsg.ForeColor = rgbGreen
Application.Wait (Now + TimeValue("0:00:02"))
Unload frmStatus
End Sub
Sub PopulateCurrency()
    With Me.txtCurrency
        .enabled = True
        Me.txtCurrency.Value = Cells(cRowPos, colPos.CurrencySymbol).Value
    End With
End Sub
Private Sub btnUpdateCurrency_Click()
rungsschk
    Dim bt As Boolean
    bt = Application.EnableEvents
    If bt Then Application.EnableEvents = False
    If Trim(Me.txtCurrency.Value) = Cells(cRowPos, colPos.CurrencySymbol).Value Then
    Else
        Dim tStr As String
        tStr = "[$$-409]#,##0.00"
        Cells(cRowPos, colPos.CurrencySymbol).Value = Trim(Me.txtCurrency.Value)
        If Trim(Me.txtCurrency) = "$" Then
            Range(Cells(cHeaderRow, colPos.ACS), Cells(Cells.Rows.Count, colPos.ACS)).NumberFormat = tStr
            Range(Cells(cHeaderRow, colPos.ECS), Cells(Cells.Rows.Count, colPos.ECS)).NumberFormat = tStr
            Range(Cells(cHeaderRow, colPos.BCS), Cells(Cells.Rows.Count, colPos.BCS)).NumberFormat = tStr
            Range(Cells(cHeaderRow, colPos.TaskLeadCost), Cells(Cells.Rows.Count, colPos.TaskLeadCost)).NumberFormat = tStr
        Else
            Range(Cells(cHeaderRow, colPos.ACS), Cells(Cells.Rows.Count, colPos.ACS)).NumberFormat = Chr(34) & Me.txtCurrency & Chr(34) & " " & "#,##0.00"
            Range(Cells(cHeaderRow, colPos.ECS), Cells(Cells.Rows.Count, colPos.ECS)).NumberFormat = Chr(34) & Me.txtCurrency & Chr(34) & " " & "#,##0.00"
            Range(Cells(cHeaderRow, colPos.BCS), Cells(Cells.Rows.Count, colPos.BCS)).NumberFormat = Chr(34) & Me.txtCurrency & Chr(34) & " " & "#,##0.00"
            Range(Cells(cHeaderRow, colPos.TaskLeadCost), Cells(Cells.Rows.Count, colPos.TaskLeadCost)).NumberFormat = Chr(34) & Me.txtCurrency & Chr(34) & " " & "#,##0.00"
        End If
        ReCalculateBudgetLineCosts
    End If
    Dim sdf As String
    sdf = Me.cmbDateFormat.Value
    If sdf = vbNullString Then
    Else
        sdf = GetDateFormatOverride(Me.cmbDateFormat.Value)
        If sdf <> Cells(cRowPos, colPos.DateFormat).Value Then
            Cells(cRowPos, colPos.DateFormat).Value = sdf
            Range(Cells(cHeaderRow + 1, colPos.ESD), Cells(Cells.Rows.Count, colPos.ESD)).NumberFormat = sdf
            Range(Cells(cHeaderRow + 1, colPos.EED), Cells(Cells.Rows.Count, colPos.EED)).NumberFormat = sdf
            Range(Cells(cHeaderRow + 1, colPos.BSD), Cells(Cells.Rows.Count, colPos.BSD)).NumberFormat = sdf
            Range(Cells(cHeaderRow + 1, colPos.BED), Cells(Cells.Rows.Count, colPos.BED)).NumberFormat = sdf
            Range(Cells(cHeaderRow + 1, colPos.ASD), Cells(Cells.Rows.Count, colPos.ASD)).NumberFormat = sdf
            Range(Cells(cHeaderRow + 1, colPos.AED), Cells(Cells.Rows.Count, colPos.AED)).NumberFormat = sdf
        End If
    End If
    'Percentage Settings
    If Me.optPercentageCalculationSimple.Value = True Then
        If LCase(Cells(cRowPos, colPos.PercentageCalculationType).Value) <> "simple" Then
            Cells(cRowPos, colPos.PercentageCalculationType).Value = "simple"
            AutoPopulatePercentages True
        End If
    ElseIf Me.optPercentageCalculationWeighted.Value = True Then
        If LCase(Cells(cRowPos, colPos.PercentageCalculationType).Value) <> "weighted" Then
            Cells(cRowPos, colPos.PercentageCalculationType).Value = "weighted"
            AutoPopulatePercentages True
        End If
    End If
    If Me.optPercentageEntryManual.Value = True Then
        If LCase(Cells(cRowPos, colPos.PercentageEntryMode).Value) <> "manual" Then
            Cells(cRowPos, colPos.PercentageEntryMode).Value = "manual"
            AutoPopulatePercentages True
            Columns(colPos.PercentageCompleted).Locked = False

        End If
    ElseIf Me.optPercentageEntryAutomatic.Value = True Then
        If LCase(Cells(cRowPos, colPos.PercentageEntryMode).Value) <> "automatic" Then
            Cells(cRowPos, colPos.PercentageEntryMode).Value = "automatic"

            AutoPopulatePercentages True

            Columns(colPos.PercentageCompleted).Locked = True
            Cells(cHeaderRow, colPos.PercentageCompleted).Locked = False
        End If
    End If
Cells(cRowPos, colPos.ProjectSheetName).Value = cmbSettingsSheets.Value
Unload Me
Call findgss
Call mRefreshGC
findgss
End Sub
Attribute VB_Name = "frm_Task"
Attribute VB_Base = "0{ACB453A4-F073-4301-9769-E73595A83148}{D894AA4D-60B6-421D-8861-700F49B16986}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit
Dim bDontDelete As Boolean
Dim bfDiasabledEvents As Boolean
Private Sub btnAddDependency_Click()

    If Trim(Me.cmbTaskName.Value & vbNullString) = vbNullString Then
        MsgBox "Select a task to be added as a dependency", vbInformation, "Information"
        Me.cmbTaskName.SetFocus
        Exit Sub
    End If
    If Me.cmbDependencyType.Value = vbNullString Then
        MsgBox "Select dependency type", vbInformation, "Information"
        Me.cmbDependencyType.SetFocus
        Exit Sub
    End If

    If Me.txtDelay.Value = vbNullString Or IsNumeric(Me.txtDelay.Value) = False Then
        Me.txtDelay.Value = 0
    End If
    With Me.lstDependencies
        .AddItem Me.cmbTaskName.List(Me.cmbTaskName.ListIndex, 0)
        .List(.ListCount - 1, 1) = Me.cmbTaskName.List(Me.cmbTaskName.ListIndex, 1)
        .List(.ListCount - 1, 2) = Me.cmbDependencyType.Value
        .List(.ListCount - 1, 3) = Me.txtDelay.Value
    End With

    'Delete Selected Task
    Me.cmbTaskName.RemoveItem (Me.cmbTaskName.ListIndex)
    If Me.cmbTaskName.ListCount = 0 Then Me.btnAddDependency.enabled = False

    Me.cmbTaskName.ListIndex = -1
    Me.cmbDependencyType.ListIndex = -1
    Me.txtDelay.Value = vbNullString
    SetHeightForDependenciesListBox
End Sub
Private Sub SetHeightForDependenciesListBox()
    Me.lstDependencies.Height = 218
End Sub
Private Sub btnClearDependencyInputs_Click()
    Me.cmbTaskName.Value = vbNullString
    Me.txtDelay.Value = vbNullString
    Me.cmbDependencyType.Value = vbNullString

End Sub

Private Sub btnDeleteDependency_Click()
    Me.lstDependencies.RemoveItem (Me.lstDependencies.ListIndex)
    lstDependencies_Click
    AddTaskNamesToDependencyTaskNameSelector
    SetHeightForDependenciesListBox
End Sub

Private Sub btnEditDependency_Click()
    If Me.lstDependencies.ListCount = 0 Then Exit Sub
    If btnEditDependency.Caption = "Edit" Then
        Me.btnAddDependency.enabled = False
        Me.btnDeleteDependency.enabled = False
        Me.btnClearDependencyInputs.enabled = False
        Me.lstDependencies.enabled = False
        With Me.cmbTaskName
            .Style = fmStyleDropDownCombo
            .Text = Me.lstDependencies.List(Me.lstDependencies.ListIndex, 1)
            .enabled = False
        End With
        If Me.lstDependencies.List(Me.lstDependencies.ListIndex, 2) = "Finish to Start" Then
            Me.cmbDependencyType.ListIndex = 0
        ElseIf Me.lstDependencies.List(Me.lstDependencies.ListIndex, 2) = "Start to Start" Then
            Me.cmbDependencyType.ListIndex = 1
        ElseIf Me.lstDependencies.List(Me.lstDependencies.ListIndex, 2) = "Finish to Finish" Then
            Me.cmbDependencyType.ListIndex = 2
        ElseIf Me.lstDependencies.List(Me.lstDependencies.ListIndex, 2) = "Start to Finish" Then
            Me.cmbDependencyType.ListIndex = 3
        End If

        Me.txtDelay = Me.lstDependencies.List(Me.lstDependencies.ListIndex, 3)
        btnEditDependency.Caption = "Save"
    ElseIf btnEditDependency.Caption = "Save" Then
        With Me.lstDependencies
            .enabled = True
            .List(.ListIndex, 2) = Me.cmbDependencyType
            .List(.ListIndex, 3) = Me.txtDelay
        End With
        With Me.cmbTaskName
            .enabled = True
            .Style = fmStyleDropDownList
        End With
        Me.cmbDependencyType = vbNullString
        Me.txtDelay = vbNullString
        btnEditDependency.Caption = "Edit"
        Me.btnAddDependency.enabled = True
        Me.btnDeleteDependency.enabled = True
        Me.btnClearDependencyInputs.enabled = True
        Me.lstDependencies.ListIndex = -1
        lstDependencies_Click
    End If
End Sub

Private Sub chkMilestone_Change()
    SetBarColorsLabels
End Sub

Private Sub cmbResource_Change()
    If bfDiasabledEvents Then Exit Sub
    PopulateEstimatesCostsFromResource
End Sub

Private Sub cmbResource_Enter()
    btnAddResource
End Sub

Private Sub cmbTaskName_AfterUpdate()
    If Me.cmbDependencyType.Value = vbNullString Then Me.cmbDependencyType.ListIndex = 0    ' = "Finish to Start"
End Sub


Private Sub cmbTaskName_Change()
    If Me.cmbDependencyType = vbNullString Then Me.cmbDependencyType.ListIndex = 0    ' = "Finish to Start"
    SetHeightForDependenciesListBox
End Sub



Private Sub lblActualsColor_Click()
    Dim sc As Double
    sc = PickNewColor(Me.lblActualsColor.ForeColor)

    If sc <> -1 Then
        Me.lblActualsColor.BackColor = sc
        Me.lblActualsColor.Caption = sc
        Me.lblActualsColor.ForeColor = sc
    End If
End Sub

Private Sub lblActualsColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblActualsColor.ForeColor)

    If sc <> -1 Then
        Me.lblActualsColor.BackColor = sc
        Me.lblActualsColor.Caption = sc
        Me.lblActualsColor.ForeColor = sc
    End If
End Sub

Private Sub lblBaselineColor_Click()
    Dim sc As Double
    sc = PickNewColor(Me.lblBaselineColor.ForeColor)

    If sc <> -1 Then
        Me.lblBaselineColor.BackColor = sc
        Me.lblBaselineColor.Caption = sc
        Me.lblBaselineColor.ForeColor = sc
    End If
End Sub

Private Sub lblBaselineColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblBaselineColor.ForeColor)

    If sc <> -1 Then
        Me.lblBaselineColor.BackColor = sc
        Me.lblBaselineColor.Caption = sc
        Me.lblBaselineColor.ForeColor = sc
    End If
End Sub

Private Sub lblEstColor_Click()
    Dim sc As Double
    sc = PickNewColor(Me.lblEstColor.ForeColor)

    If sc <> -1 Then
        Me.lblEstColor.BackColor = sc
        Me.lblEstColor.Caption = sc
        Me.lblEstColor.ForeColor = sc
    End If
End Sub

Private Sub lblEstColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblEstColor.ForeColor)

    If sc <> -1 Then
        Me.lblEstColor.BackColor = sc
        Me.lblEstColor.Caption = sc
        Me.lblEstColor.ForeColor = sc
    End If
End Sub

Private Sub lblPercentColor_Click()
    Dim sc As Double
    sc = PickNewColor(Me.lblPercentColor.ForeColor)

    If sc <> -1 Then
        Me.lblPercentColor.BackColor = sc
        Me.lblPercentColor.Caption = sc
        Me.lblPercentColor.ForeColor = sc
    End If
End Sub

Private Sub lblPercentColor_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim sc As Double
    sc = PickNewColor(Me.lblPercentColor.ForeColor)

    If sc <> -1 Then
        Me.lblPercentColor.BackColor = sc
        Me.lblPercentColor.Caption = sc
        Me.lblPercentColor.ForeColor = sc
    End If
End Sub

Private Sub lstDependencies_Click()

    If Me.lstDependencies.ListIndex <> -1 Then
        Me.btnEditDependency.enabled = True
        Me.btnEditDependency.Caption = "Edit"
        Me.btnDeleteDependency.enabled = True
    Else
        Me.btnEditDependency.enabled = False
        Me.btnDeleteDependency.enabled = False
        Me.btnEditDependency.Caption = "Save"
    End If
End Sub
Private Sub btnAddResource()
    bAddResourceValueToFormNotToCell = True
    sResourcesNamesFromForm = Me.cmbResource.Value
    frm_ResourceSelector.Show

    Me.cmbResource.Value = sResourcesNamesFromForm
    sResourcesNamesFromForm = vbNullString
    bAddResourceValueToFormNotToCell = False
End Sub

Private Sub btnCopyFromEstimatedCosts_Click()
    Me.txtBCS.Value = Me.txtECS.Value
End Sub

Private Sub btnCopyFromEstimatedDates_Click()
    PopulateBaseDates
End Sub

Private Sub cmbResource_AfterUpdate()
    PopulateEstimatesCostsFromResource
End Sub

Sub PopulateEstimatesCostsFromResource()
    If Me.cmbResource <> vbNullString Then
        If Me.txtCalendarDays.Value = vbNullString Then
            Me.txtResourceCost.Value = GetResourcesTotalCost(cmbResource.Text)
        Else
            Me.txtResourceCost.Value = GetResourcesTotalCost(cmbResource.Text, Me.txtCalendarDays)
        End If
    Else
        Me.txtResourceCost.Value = vbNullString
    End If
End Sub



Private Sub lstDependencies_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    lstDependencies_Click
    If Me.lstDependencies.ListIndex <> -1 Then
        btnEditDependency_Click
    End If
End Sub

Private Sub txtACS_AfterUpdate()
    If IsNumeric(txtACS.Text) = False Then txtACS.Text = vbNullString
End Sub

Private Sub txtBCS_AfterUpdate()
    If IsNumeric(txtBCS.Text) = False Then txtBCS.Text = vbNullString
End Sub
Private Sub txtECS_AfterUpdate()
    If IsNumeric(txtECS.Text) = False Then txtECS.Text = vbNullString
End Sub
Private Sub txtDelay_AfterUpdate()
    If Me.txtDelay.Value = vbNullString Or IsNumeric(Me.txtDelay.Value) = False Then
        Me.txtDelay.Value = 0
    Else
        Me.txtDelay.Value = CLng(Me.txtDelay.Value)
    End If
End Sub


Private Sub UserForm_Initialize()
rungsschk
    ReCalculateColPos
    #If Mac Then
    #Else
        With Me
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        End With
    #End If

    bfDiasabledEvents = True
    Dim sTmp As String, i As Long
    Me.lblCalculatingDependencies.visible = False
    If bAddTask Or bAddMilestone Then InsertNewRow

    If bAddTask Or bAddMilestone Then AddNewTaskLoad
    If bEditTask Or bEditMilestone Then EditTaskLoad

    If bAddMilestone = True Or bEditMilestone = True Then
        Me.chkMilestone.Value = True
    End If

    If IsParentTask(clRow) Then Me.chkMilestone.enabled = False

    If LCase(Cells(cRowPos, colPos.PercentageEntryMode).Value) = "automatic" Then
        With Me.cmbPercentageCompleted
            .enabled = False
            .BackColor = Me.BackColor
        End With
    End If


    If bAddTask = True Or bAddMilestone = True Then
        EnableDisableTasks True
    ElseIf Cells(clRow, colPos.Task).IndentLevel = Cells(clRow + 1, colPos.Task).IndentLevel - 1 And bEditTask = True Then
        EnableDisableTasks False
        '  Me.lblDependencyMsg.Caption = "Dependencies cannot be set for parent tasks"
        With Me.frmDependencies
            .Caption = "Dependencies cannot be set for parent tasks"
        End With

    End If

    AddResourcesToComboBox

    'Add bar Colors
    Dim ddColor As Double
    With Me
        If Cells(clRow, colPos.tType) = "M" Then Me.lblEstimatedDateBarColor.Caption = "Milestone"
        If bAddMilestone Or bAddTask Then
            With .lblEstColor
                If bAddMilestone Then
                    ddColor = gss.Range("AA6").Interior.Color
                Else
                    ddColor = gss.Range("Z6").Interior.Color
                End If
                .Caption = ddColor
                .BackColor = ddColor
                .ForeColor = ddColor
            End With
            With .lblPercentColor
                ddColor = gss.Range("AB6").Interior.Color
                .Caption = ddColor
                .BackColor = ddColor
                .ForeColor = ddColor
            End With
            With .lblBaselineColor
                ddColor = gss.Range("AC6").Interior.Color
                .Caption = ddColor
                .BackColor = ddColor
                .ForeColor = ddColor
            End With
            With .lblActualsColor
                ddColor = gss.Range("AD6").Interior.Color
                .Caption = ddColor
                .BackColor = ddColor
                .ForeColor = ddColor
            End With
        Else
            With .lblEstColor
                ddColor = Cells(clRow, colPos.TColor).Interior.Color
                .Caption = ddColor
                .BackColor = ddColor
                .ForeColor = ddColor
            End With
            With .lblPercentColor
                ddColor = Cells(clRow, colPos.TPColor).Interior.Color
                .Caption = ddColor
                .BackColor = ddColor
                .ForeColor = ddColor
            End With
            With .lblBaselineColor
                ddColor = Cells(clRow, colPos.BLColor).Interior.Color
                .Caption = ddColor
                .BackColor = ddColor
                .ForeColor = ddColor
            End With
            With .lblActualsColor
                ddColor = Cells(clRow, colPos.ACColor).Interior.Color
                .Caption = ddColor
                .BackColor = ddColor
                .ForeColor = ddColor
            End With
        End If

    End With

    TriggerPopulateDependencies
    Me.cmbDependencyType.Value = vbNullString
    'End If

    If GetLicType = sLTrialV And clRow > 14 Then
        Me.frmBarColors.enabled = False
        Me.frmBarColors.Caption = "Bar Colors (Not available in Free Version)"
    End If

    Me.frmDependencies.BackColor = Me.BackColor
    Me.lstDependencies.Height = 218
    If bAddTask Or bAddMilestone Then Me.txtTask.SetFocus
    bfDiasabledEvents = False
End Sub
Sub AddResourcesToComboBox()
    Exit Sub
End Sub
Private Sub btnCancel_Click()
    Unload Me
End Sub
Private Sub UserForm_Terminate()
    If bDontDelete = False Then
        If bAddTask Or bAddMilestone Then DeleteInsertedRow
    End If
End Sub



Private Sub fAddNewMilestoneLoad()

    Me.Caption = "Add Milestone"
    Me.lbl_Task.Caption = "Name"
    'Me.Label26.Caption = cTaskWBSBeingAdded & "Milestone Details"

    Me.frmTaskDetails.Caption = cTaskWBSBeingAdded & "Milestone Details"
    Me.txtStartDate.Value = Format(Now(), "dd-mmm-yyyy")
    Me.cmbPercentageCompleted.Value = 0

End Sub
Private Sub AddNewTaskLoad()
    Dim tclrow As Long
    If bAddTask Then
        Me.Caption = "Add Task"
    Else
        Me.Caption = "Add Milestone"
    End If
    If bEditMilestone = True Then Me.chkMilestone = True
    Me.lbl_Task.Caption = "Task Name"


    ' Me.Label26.Caption = cTaskWBSBeingAdded & " Details"
    Me.frmTaskDetails.Caption = cTaskWBSBeingAdded & " Details"

    Me.txtStartDate.Value = Format(Now(), "dd-mmm-yyyy")
    With Me.cmbPercentageCompleted
        Dim i As Long
        For i = 0 To 100
            .AddItem i
        Next
    End With

    Me.cmbPercentageCompleted.Value = 0

    EnableDisableCosts
End Sub

Private Sub EditTaskLoad()
    With Me.cmbPercentageCompleted
        Dim i As Long
        For i = 0 To 100
            .AddItem i
        Next
    End With

    Me.Caption = "Edit Task"
    'Me.Label26.Caption = Cells(clRow, colPos.WBS).Value & " - " & " Details"
    Me.frmTaskDetails.Caption = Cells(clRow, colPos.WBS).Value & " - " & "Details"

    If bEditMilestone = True Then Me.chkMilestone = True

    Me.txtNotes.Value = Cells(clRow, colPos.Notes).Value
    Me.txtTask.Value = Cells(clRow, colPos.Task).Value

    Me.cmbResource.Value = Cells(clRow, colPos.TaskLead).Value
    If IsNumeric(Cells(clRow, colPos.PercentageCompleted).Value) Then Me.cmbPercentageCompleted.Value = CLng(Cells(clRow, colPos.PercentageCompleted).Value * 100)

    If Cells(clRow, colPos.ESD).Value <> vbNullString And IsDate(Cells(clRow, colPos.ESD).Value) = False Then
        Me.txtStartDate.Value = vbNullString
    ElseIf IsDate(Cells(clRow, colPos.ESD).Value) Then
        Me.txtStartDate.Value = Format(Cells(clRow, colPos.ESD).Value, "DD-MMM-YYYY")
    End If
    If Cells(clRow, colPos.EED).Value <> vbNullString And IsDate(Cells(clRow, colPos.EED).Value) = False Then
        Me.txtEndDate.Value = vbNullString
    ElseIf IsDate(Cells(clRow, colPos.EED).Value) Then
        Me.txtEndDate.Value = Format(Cells(clRow, colPos.EED).Value, "DD-MMM-YYYY")
    End If
    Me.txtCalendarDays.Value = Cells(clRow, colPos.ED).Value

    If Cells(clRow, colPos.BSD).Value <> vbNullString And IsDate(Cells(clRow, colPos.BSD).Value) = False Then
        Me.txtBSD.Value = vbNullString
    ElseIf IsDate(Cells(clRow, colPos.EED).Value) Then
        Me.txtBSD.Value = Format(Cells(clRow, colPos.BSD).Value, "DD-MMM-YYYY")
    End If

    If Cells(clRow, colPos.BED) <> vbNullString And IsDate(Cells(clRow, colPos.BED).Value) = False Then
        Me.txtBED.Value = vbNullString
    ElseIf IsDate(Cells(clRow, colPos.EED).Value) Then
        Me.txtBED.Value = Format(Cells(clRow, colPos.BED).Value, "DD-MMM-YYYY")
    End If

    Me.txtBD = Cells(clRow, colPos.BD).Value


    If Cells(clRow, colPos.ASD).Value <> vbNullString And IsDate(Cells(clRow, colPos.ASD).Value) = False Then
        Me.txtASD.Value = vbNullString
    ElseIf IsDate(Cells(clRow, colPos.ASD).Value) Then
        Me.txtASD.Value = Format(Cells(clRow, colPos.ASD).Value, "DD-MMM-YYYY")
    End If
    If Cells(clRow, colPos.AED).Value <> vbNullString And IsDate(Cells(clRow, colPos.AED).Value) = False Then
        Me.txtAED = vbNullString
    ElseIf IsDate(Cells(clRow, colPos.EED).Value) Then
        Me.txtAED = Format(Cells(clRow, colPos.AED).Value, "DD-MMM-YYYY")
    End If
    Me.txtAD = Cells(clRow, colPos.AD).Value

    EnableDisableCosts
    If Cells(cRowPos, colPos.CostsModule).Value = 1 Then
        Me.txtACS = Cells(clRow, colPos.ACS).Value
        Me.txtECS = Cells(clRow, colPos.ECS).Value
        Me.txtBCS = Cells(clRow, colPos.BCS).Value

        Me.txtResourceCost.Value = Cells(clRow, colPos.TaskLeadCost).Value
    End If

    If bEditTask = True Or bEditMilestone = True Then
        If dblClickCol = colPos.WBS Or dblClickCol = colPos.Task Then
            Me.txtTask.SetFocus
        ElseIf dblClickCol = colPos.TaskLead Then
            Me.cmbResource.SetFocus
        ElseIf dblClickCol = colPos.ESD Then
            With Me.txtStartDate
                .SetFocus
                .SelStart = 0
                .SelLength = Len(.Text)
            End With
        ElseIf dblClickCol = colPos.EED Then
            With Me.txtEndDate
                .SetFocus
                .SelStart = 0
                .SelLength = Len(.Text)
            End With
        ElseIf dblClickCol = colPos.PercentageCompleted Then
            With Me.cmbPercentageCompleted
                .SetFocus
                .SelStart = 0
                .SelLength = Len(.Text)
            End With
        ElseIf dblClickCol = colPos.ED Then
            With Me.txtCalendarDays
                .SetFocus
                .SelStart = 0
                .SelLength = Len(.Text)
            End With
        ElseIf dblClickCol = colPos.BSD Then
            With Me.txtBSD
                .SetFocus
                .SelStart = 0
                .SelLength = Len(.Text)
            End With
        ElseIf dblClickCol = colPos.ASD Then
            With Me.txtASD
                .SetFocus
                .SelStart = 0
                .SelLength = Len(.Text)
            End With
        ElseIf dblClickCol = colPos.AED Then
            With Me.txtAED
                .SetFocus
                .SelStart = 0
                .SelLength = Len(.Text)
            End With
        ElseIf dblClickCol = colPos.BED Then
            With Me.txtBED
                .SetFocus
                .SelStart = 0
                .SelLength = Len(.Text)
            End With
        ElseIf dblClickCol = colPos.BD Then
            With Me.txtBD
                .SetFocus
                .SelStart = 0
                .SelLength = Len(.Text)
            End With
        ElseIf dblClickCol = colPos.ECS And Cells(cRowPos, colPos.EnableCostsModule) Then
            With Me.txtECS
                .SetFocus
                .SelStart = 0
                .SelLength = Len(.Text)
            End With
        ElseIf dblClickCol = colPos.ACS And Cells(cRowPos, colPos.EnableCostsModule) Then
            With Me.txtACS
                .SetFocus
                .SelStart = 0
                .SelLength = Len(.Text)
            End With
        ElseIf dblClickCol = colPos.BCS And Cells(cRowPos, colPos.EnableCostsModule) Then
            With Me.txtBCS
                .SetFocus
                .SelStart = 0
                .SelLength = Len(.Text)
            End With
        ElseIf dblClickCol = colPos.Notes Then
            With Me.txtNotes
                .SetFocus
            End With
        End If
    End If
End Sub
Private Sub txtASD_Enter()
    bTriggerFromTaskFormCalendar = True
    If txtASD.Value = vbNullString Then
        dFormDate = Date
    Else
        dFormDate = CDate(txtASD.Value)
    End If
    frmDateSelector.Show
    If bNoDateSelectedForForm = False Then
        txtASD.Value = Format(dFormDate, "DD-MMM-YYYY")
    End If
    Me.btnOk.SetFocus
    PopulateActualDates "S"
    bTriggerFromTaskFormCalendar = False
    bNoDateSelectedForForm = False
End Sub
Private Sub txtASD_AfterUpdate()
    PopulateActualDates "S"
End Sub
Private Sub txtAED_Enter()
    bTriggerFromTaskFormCalendar = True
    If txtAED.Value = vbNullString Then
        dFormDate = Date
    Else
        dFormDate = CDate(txtAED.Value)
    End If
    frmDateSelector.Show
    If bNoDateSelectedForForm = False Then
        txtAED.Value = Format(dFormDate, "DD-MMM-YYYY")
    End If
    Me.btnOk.SetFocus
    PopulateActualDates "E"
    bTriggerFromTaskFormCalendar = False
    bNoDateSelectedForForm = False
End Sub
Private Sub txtAED_AfterUpdate()
    PopulateActualDates "E"
End Sub

Private Sub PopulateActualDates(Optional t As String)
    If IsDate(txtASD) = False Then
        txtASD.Value = vbNullString
    Else
        txtASD.Value = Format(txtASD.Value, "DD-MMM-YYYY")
    End If

    If IsDate(txtAED) = False Then
        txtAED.Value = vbNullString
    Else
        txtAED.Value = Format(txtAED.Value, "DD-MMM-YYYY")
    End If

    If txtAED.Value <> vbNullString And txtASD.Value <> vbNullString Then
        If CDate(txtASD.Value) > CDate(txtAED.Value) Then
            'MsgBox "Actual End date cannot be before start date", vbInformation, "Information"
            If t = "S" Then
                txtAED = vbNullString
            Else
                txtASD = vbNullString
            End If
            Exit Sub
        End If
        Me.txtAD.Value = GetWorkDaysFromDate(txtASD.Value, txtAED.Value)
    End If
last:
End Sub


Private Sub btnOk_Click()
    If Me.cmbTaskName <> vbNullString Then
        MsgBox "Please complete adding the dependency and try again.", vbInformation, "Information"
        Exit Sub
    End If
    If Me.txtEndDate.Value = vbNullString Then txtCalendarDays_ExitCalculation
    If Me.txtBED.Value = vbNullString Then txtBD_ExitCalculation
    If Me.cmbPercentageCompleted.Value = vbNullString Then Me.cmbPercentageCompleted.Value = 0
    If Me.txtEndDate.Value = vbNullString And Me.txtStartDate.Value = vbNullString Then
        MsgBox "Enter estimated start and end dates", vbInformation, "Information"
        Me.txtEndDate.SetFocus
        Exit Sub
    End If
    If IsNumeric(Me.cmbPercentageCompleted.Value) = False Then
        MsgBox "Enter only numbers for percentage completed", vbInformation, "Information"
        Me.cmbPercentageCompleted.SetFocus
        Exit Sub
    End If
    If Me.txtTask.Value = vbNullString Then
        MsgBox "Enter task name", vbInformation, "Information"
        Me.txtTask.SetFocus
        Exit Sub
    End If
    If Me.txtStartDate.Value = vbNullString Then
        MsgBox "Enter estimated start date", vbInformation, "Information"
        Me.txtStartDate.SetFocus
        Exit Sub
    End If
    If Me.txtEndDate.Value = vbNullString Then
        MsgBox "Enter estimated end date", vbInformation, "Information"
        Me.txtEndDate.SetFocus
        Exit Sub
    End If
    btnOk_AddEditTask
    UpdateDependenciesToSheetFromForm
last:

    bDontDelete = True
    Unload Me
    AddRollingText
    'Calcualte only added task has dependency added or removed. If having cost then only update costs
    If bAddTask = True Or bAddMilestone = True Then
        If lstDependencies.ListCount > 0 Then
            PopulateSectionDates , clRow
        ElseIf Me.txtBCS <> vbNullString Or Me.txtECS <> vbNullString Or Me.txtACS <> vbNullString Then
            ReCalculateBudgetLineCosts
        End If
    Else
        If Cells(clRow, colPos.tDependents).Value = vbNullString Then
            PopulateSectionDates , clRow
        Else
            PopulateSectionDates
        End If
    End If
    ReBuildView
    AddGanttBarsForEachRow
    LockSheet ActiveSheet
    EnableAll
End Sub
Private Sub btnOk_AddSection()
    Exit Sub
End Sub
Private Sub btnOk_EditSection()
    Exit Sub
End Sub

Private Sub btnOk_AddEditTask()
rungsschk
    Dim cRow As Long, errMsg As String
    DisableAll
    If bAddTask Or bAddMilestone Then
        Rows(clRow).Font.Color = RGB(0, 0, 0)
        Cells(clRow, colPos.BSD).HorizontalAlignment = xlRight
        Cells(clRow, colPos.BED).HorizontalAlignment = xlRight
        Cells(clRow, colPos.BD).HorizontalAlignment = xlRight
        Cells(clRow, colPos.ESD).HorizontalAlignment = xlRight
        Cells(clRow, colPos.EED).HorizontalAlignment = xlRight
        Cells(clRow, colPos.ED).HorizontalAlignment = xlRight
        Cells(clRow, colPos.ASD).HorizontalAlignment = xlRight
        Cells(clRow, colPos.AED).HorizontalAlignment = xlRight
        Cells(clRow, colPos.AD).HorizontalAlignment = xlRight
        Cells(clRow, colPos.BCS).HorizontalAlignment = xlRight
        Cells(clRow, colPos.ECS).HorizontalAlignment = xlRight
        Cells(clRow, colPos.ACS).HorizontalAlignment = xlRight

        If clRow = cHeaderRow + 1 Then
            With Range(Cells(cHeaderRow + 1, colPos.WBS), Cells(cHeaderRow + 1, colPos.TimelineMaxEnd))
                .Interior.Color = RGB(255, 255, 255)
                .Font.Color = RGB(0, 0, 0)
                .Font.Italic = False
                .RowHeight = 16
                .Font.Bold = 0
            End With
            AlignCells (Cells(clRow, colPos.Task))
        End If
        With Range(Cells(clRow, colPos.WBS), Cells(clRow, colPos.TimelineMaxEnd)).Interior
            .Pattern = xlNone
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With

        If Me.chkMilestone Then
            Cells(clRow, colPos.TColor).Interior.Color = gss.Range("AA6").Interior.Color
            Cells(clRow, colPos.TPColor).Interior.Color = gss.Range("AA6").Interior.Color

        Else
            Cells(clRow, colPos.TColor).Interior.Color = gss.Range("Z6").Interior.Color
            Cells(clRow, colPos.TPColor).Interior.Color = gss.Range("AB6").Interior.Color
        End If

        Cells(clRow, colPos.BLColor).Interior.Color = gss.Range("AC6").Interior.Color
        Cells(clRow, colPos.ACColor).Interior.Color = gss.Range("AD6").Interior.Color
    End If

    If Me.chkMilestone Then
        Cells(clRow, colPos.tType).Value = "M"
    Else
        Cells(clRow, colPos.tType).Value = "T"
    End If
    Cells(clRow, colPos.Task).Value = Trim(Me.txtTask.Value)
    Cells(clRow, colPos.TaskLead).Value = Me.cmbResource.Value
    Cells(clRow, colPos.ESD).Value = CDate(Me.txtStartDate.Value)
    Cells(clRow, colPos.EED).Value = CDate(Me.txtEndDate.Value)
    Cells(clRow, colPos.PercentageCompleted).Value = Me.cmbPercentageCompleted.Value / 100
    Cells(clRow, colPos.ED).Value = CLng(Me.txtCalendarDays.Value)
    If Me.txtResourceCost.Value <> vbNullString Then
        Cells(clRow, colPos.TaskLeadCost).Value = CLng(Me.txtResourceCost.Value)
    Else
        Cells(clRow, colPos.TaskLeadCost).Value = vbNullString
    End If

    If bAddTask = True Or bEditTask = True Or bAddMilestone = True Or bEditMilestone = True Then
        If IsDate(Me.txtBED.Value) And Me.txtBED.Value <> vbNullString Then
            Cells(clRow, colPos.BED).Value = CDate(Me.txtBED.Value)
        Else
            Cells(clRow, colPos.BED).Value = vbNullString
        End If

        If IsDate(Me.txtBSD.Value) And Me.txtBSD.Value <> vbNullString Then
            Cells(clRow, colPos.BSD).Value = CDate(Me.txtBSD.Value)
        Else
            Cells(clRow, colPos.BSD).Value = vbNullString
        End If

        If Me.txtBD.Value <> vbNullString Then
            Cells(clRow, colPos.BD).Value = CLng(Me.txtBD.Value)
        Else
            Cells(clRow, colPos.BD).Value = vbNullString
        End If

        If IsDate(Me.txtAED.Value) And Me.txtAED.Value <> vbNullString Then
            Cells(clRow, colPos.AED).Value = CDate(Me.txtAED.Value)
        Else
            Cells(clRow, colPos.AED).Value = vbNullString
        End If


        If IsDate(Me.txtASD.Value) And Me.txtASD.Value <> vbNullString Then
            Cells(clRow, colPos.ASD).Value = CDate(Me.txtASD.Value)
        Else
            Cells(clRow, colPos.ASD).Value = vbNullString
        End If

        If Me.txtAD.Value <> vbNullString Then
            Cells(clRow, colPos.AD).Value = CLng(Me.txtAD.Value)
        Else
            Cells(clRow, colPos.AD).Value = vbNullString
        End If

        If Me.txtASD.Value = vbNullString And Me.txtAED.Value = vbNullString Then Cells(clRow, colPos.AD).Value = vbNullString


        If Me.txtECS.Value <> vbNullString And IsNumeric(Me.txtECS.Value) Then
            Cells(clRow, colPos.ECS).Value = CDbl(Me.txtECS.Value)
        Else
            Cells(clRow, colPos.ECS).Value = vbNullString
        End If
        If Me.txtBCS.Value <> vbNullString And IsNumeric(Me.txtBCS.Value) Then
            Cells(clRow, colPos.BCS).Value = CDbl(Me.txtBCS.Value)
        Else
            Cells(clRow, colPos.BCS).Value = vbNullString
        End If
        If Me.txtACS.Value <> vbNullString And IsNumeric(Me.txtACS.Value) Then
            Cells(clRow, colPos.ACS).Value = CDbl(Me.txtACS.Value)
        Else
            Cells(clRow, colPos.ACS).Value = vbNullString
        End If
    End If

    Cells(clRow, colPos.Notes).Value = Me.txtNotes.Value


    'Set Colors
    Cells(clRow, colPos.TColor).Interior.Color = Me.lblEstColor.Caption
    Cells(clRow, colPos.TPColor).Interior.Color = Me.lblPercentColor.Caption
    Cells(clRow, colPos.BLColor).Interior.Color = Me.lblBaselineColor.Caption
    Cells(clRow, colPos.ACColor).Interior.Color = Me.lblActualsColor.Caption

    If bAddTask = True Or bAddMilestone = True Then
        Cells(clRow, colPos.Task).IndentLevel = lIndentLevel
    End If
End Sub

Private Sub PopulateBaseDates()
    Application.EnableEvents = False
    Me.txtBSD.Value = Me.txtStartDate
    Me.txtBED.Value = Me.txtEndDate
    Me.txtBD.Value = Me.txtCalendarDays
    Application.EnableEvents = True
End Sub

Private Sub cmbPercentageCompleted_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If KeyAscii >= 48 And KeyAscii <= 57 Then
    Else
        KeyAscii = 0
    End If
End Sub
Private Sub txtCalendarDays_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If KeyAscii >= 48 And KeyAscii <= 57 Then
    Else
        KeyAscii = 0
    End If
End Sub
Private Sub txtBD_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If KeyAscii >= 48 And KeyAscii <= 57 Then
    Else
        KeyAscii = 0
    End If
End Sub
Private Sub txtECS_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii >= 48 And KeyAscii <= 57) Or KeyAscii = 46 Then
    Else
        KeyAscii = 0
    End If
End Sub
Private Sub txtBCS_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii >= 48 And KeyAscii <= 57) Or KeyAscii = 46 Then
    Else
        KeyAscii = 0
    End If
End Sub
Private Sub txtACS_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii >= 48 And KeyAscii <= 57) Or KeyAscii = 46 Then
    Else
        KeyAscii = 0
    End If
End Sub
Private Sub txtStartDate_Enter()
    bTriggerFromTaskFormCalendar = True
    If txtStartDate.Value = vbNullString Then
        dFormDate = Date
    Else
        dFormDate = CDate(txtStartDate.Value)
    End If
    frmDateSelector.Show
    If bNoDateSelectedForForm = False Then
        txtStartDate.Value = Format(dFormDate, "DD-MMM-YYYY")
    End If
    Me.btnOk.SetFocus
    txtStartDate_ExitCalculation
    bTriggerFromTaskFormCalendar = False
    bNoDateSelectedForForm = False
End Sub
Private Sub txtStartDate_AfterUpdate()
    txtStartDate_ExitCalculation
End Sub
Private Sub txtStartDate_ExitCalculation()
    Dim tDate As Date
    If IsDate(txtStartDate.Value) = False Then
        txtStartDate.Value = vbNullString
        GoTo last
    ElseIf txtStartDate.Value < csDate Or txtStartDate.Value > ceDate Then
        ShowOutofDatesMessage
        txtStartDate.Value = vbNullString
        txtStartDate.SetFocus
        GoTo last
    Else
        txtStartDate.Value = Format(txtStartDate.Value, "DD-MMM-YYYY")
    End If

    If txtStartDate.Value = vbNullString And IsDate(txtEndDate.Value) And txtCalendarDays.Value > 0 Then
        tDate = Format(GetStartFromWorkDays(CDate(txtEndDate.Value), txtCalendarDays.Value), "dd-mmm-yyyy")
        If tDate < csDate Or tDate > ceDate Then
            ShowOutofDatesMessage
            txtStartDate.Value = vbNullString
        Else
            txtStartDate.Value = Format(tDate, "DD-mmm-YYYY")
        End If
        GoTo last
    End If

    If IsDate(txtStartDate.Value) And IsDate(txtEndDate.Value) Then
        If CDate(txtStartDate.Value) > CDate(txtEndDate.Value) Then
            txtEndDate.Value = vbNullString
            GoTo last
        Else
            txtCalendarDays.Value = GetWorkDaysFromDate(CDate(txtStartDate.Value), CDate(txtEndDate.Value))
        End If
        GoTo last
    End If
last:
    PopulateEstimatesCostsFromResource
End Sub

Private Sub txtEndDate_Enter()
    bTriggerFromTaskFormCalendar = True
    If txtEndDate.Value = vbNullString Then
        dFormDate = Date
    Else
        dFormDate = CDate(txtEndDate.Value)
    End If
    frmDateSelector.Show
    If bNoDateSelectedForForm = False Then
        txtEndDate.Value = Format(dFormDate, "DD-MMM-YYYY")
    End If
    Me.btnOk.SetFocus
    txtEndDate_ExitCalculation
    bTriggerFromTaskFormCalendar = False
    bNoDateSelectedForForm = False
End Sub
Private Sub txtEndDate_AfterUpdate()
    txtEndDate_ExitCalculation
End Sub
Private Sub txtEndDate_ExitCalculation()
    Dim tDate As Date
    If IsDate(txtEndDate.Value) = False Then
        txtEndDate = vbNullString
        GoTo last
    ElseIf txtEndDate.Value < csDate Or txtEndDate > ceDate Then
        ShowOutofDatesMessage
        txtEndDate.Value = vbNullString
        txtEndDate.SetFocus
        GoTo last
    Else
        txtEndDate.Value = Format(txtEndDate.Value, "DD-MMm-YYYY")
    End If

    If txtEndDate.Value = vbNullString And IsDate(txtStartDate.Value) And txtCalendarDays.Value > 0 Then
        tDate = Format(GetStartFromWorkDays(CDate(txtStartDate.Value), txtCalendarDays.Value), "dd-mmm-yyyy")
        If tDate < csDate Or tDate > ceDate Then
            ShowOutofDatesMessage
            txtEndDate.Value = vbNullString
        Else
            txtEndDate.Value = Format(tDate, "DD-mmm-YYYY")
        End If
        GoTo last
    End If

    If IsDate(txtStartDate.Value) And IsDate(txtEndDate.Value) Then
        If CDate(txtEndDate.Value) < CDate(txtStartDate.Value) Then
            txtStartDate.Value = vbNullString
            GoTo last
        Else
            txtCalendarDays.Value = GetWorkDaysFromDate(CDate(txtStartDate.Value), CDate(txtEndDate.Value))
        End If
        GoTo last
    End If
last:
    PopulateEstimatesCostsFromResource
End Sub
Private Sub txtCalendarDays_AfterUpdate()
    txtCalendarDays_ExitCalculation
End Sub
Private Sub txtCalendarDays_ExitCalculation()
    Dim wd As Long, tDate As Date
    If txtCalendarDays.Value = vbNullString Or txtCalendarDays.Value = 0 Then
        txtCalendarDays.Value = 1
    End If
    If IsDate(txtStartDate.Value) And IsDate(txtEndDate.Value) Then
        wd = GetWorkDaysFromDate(CDate(txtStartDate.Value), CDate(txtEndDate.Value))
        If wd <> txtCalendarDays.Value Then
            tDate = Format(GetEndDateFromWorkDays(CDate(txtStartDate.Value), txtCalendarDays.Value), "DD-mmm-yyyy")
            If tDate < csDate Or tDate > ceDate Then
                ShowOutofDatesMessage
                txtEndDate.Value = vbNullString
            Else
                txtEndDate.Value = Format(tDate, "DD-mmm-YYYY")
            End If
        End If
        GoTo last
    ElseIf IsDate(txtStartDate.Value) And txtEndDate.Value = vbNullString Then
        tDate = Format(GetEndDateFromWorkDays(CDate(txtStartDate.Value), txtCalendarDays.Value), "DD-mmm-YYYY")
        If tDate < csDate Or tDate > ceDate Then
            ShowOutofDatesMessage
            txtEndDate.Value = vbNullString
        Else
            txtEndDate.Value = Format(tDate, "DD-mmm-YYYY")
        End If
    ElseIf txtStartDate.Value = vbNullString And IsDate(txtEndDate.Value) Then
        tDate = Format(GetStartFromWorkDays(CDate(txtEndDate.Value), txtCalendarDays.Value), "DD-mmm-YYYY")
        If tDate < csDate Or tDate > ceDate Then
            ShowOutofDatesMessage
            txtStartDate.Value = vbNullString
        Else
            txtStartDate.Value = Format(tDate, "DD-mmm-YYYY")
        End If
    End If

last:
    PopulateEstimatesCostsFromResource
End Sub


'' --BSD
Private Sub txtBSD_Enter()
    bTriggerFromTaskFormCalendar = True
    If txtBSD.Value = vbNullString Then
        dFormDate = Date
    Else
        dFormDate = CDate(txtBSD.Value)
    End If
    frmDateSelector.Show
    If bNoDateSelectedForForm = False Then
        txtBSD.Value = Format(dFormDate, "DD-MMM-YYYY")
    End If
    Me.btnOk.SetFocus
    txtBSD_ExitCalculation
    bTriggerFromTaskFormCalendar = False
    bNoDateSelectedForForm = False
End Sub
Private Sub txtBSD_AfterUpdate()
    txtBSD_ExitCalculation
End Sub
Private Sub txtBSD_ExitCalculation()
    Dim tDate As Date
    If IsDate(txtBSD) = False Then
        txtBSD.Value = vbNullString
        GoTo last
    ElseIf txtBSD.Value < csDate Or txtBSD.Value > ceDate Then
        ShowOutofDatesMessage
        txtBSD.Value = vbNullString
        GoTo last
    Else
        txtBSD.Value = Format(txtBSD.Value, "DD-MMm-YYYY")
    End If
    If txtBSD.Value = vbNullString And IsDate(txtBED.Value) And txtBD.Value > 0 Then
        tDate = Format(GetStartFromWorkDays(CDate(txtBED.Value), txtBD.Value), "dd-mmm-yyyy")

        If tDate < csDate Or tDate > ceDate Then
            ShowOutofDatesMessage
            txtBSD.Value = vbNullString
            GoTo last
        Else
            txtBSD.Value = Format(tDate, "DD-mmm-yyyy")
        End If
        GoTo last
    End If

    If IsDate(txtBSD.Value) And IsDate(txtBED.Value) Then
        If CDate(txtBSD.Value) > CDate(txtBED.Value) Then
            'MsgBox "Start date cannot be later than end date", vbInformation, "Information"
            txtBED.Value = vbNullString
            GoTo last
        Else
            txtBD.Value = GetWorkDaysFromDate(CDate(txtBSD.Value), CDate(txtBED.Value))
        End If
        GoTo last
    End If
last:
    If txtBSD = vbNullString And txtBED = vbNullString Then txtBD = vbNullString
End Sub
Private Sub txtBED_Enter()
    bTriggerFromTaskFormCalendar = True
    If txtBED.Value = vbNullString Then
        dFormDate = Date
    Else
        dFormDate = CDate(txtBED.Value)
    End If
    frmDateSelector.Show
    If bNoDateSelectedForForm = False Then
        txtBED.Value = Format(dFormDate, "DD-MMM-YYYY")
    End If
    Me.btnOk.SetFocus
    txtBED_ExitCalculation
    bTriggerFromTaskFormCalendar = False
    bNoDateSelectedForForm = False
End Sub
Private Sub txtBED_AfterUpdate()
    txtBED_ExitCalculation
End Sub
Private Sub txtBED_ExitCalculation()
    Dim tDate As Date
    If IsDate(txtBED.Value) = False Then
        txtBED.Value = vbNullString
        GoTo last
    ElseIf txtBED.Value < csDate Or txtBED.Value > ceDate Then
        ShowOutofDatesMessage
        txtBED.Value = vbNullString
        GoTo last
    Else
        txtBED.Value = Format(txtBED.Value, "DD-MMm-YYYY")
    End If

    If txtBED = vbNullString And IsDate(txtBSD.Value) And txtBD.Value > 0 Then
        tDate = Format(GetStartFromWorkDays(CDate(txtBSD.Value), txtBD.Value), "dd-mmm-yyyy")

        If tDate < csDate Or tDate > ceDate Then
            ShowOutofDatesMessage
            txtBED.Value = vbNullString
            GoTo last
        Else
            txtBED.Value = Format(tDate, "DD-mmm-yyyy")
        End If
        GoTo last
    End If

    If IsDate(txtBSD.Value) And IsDate(txtBED.Value) Then
        If CDate(txtBED.Value) < CDate(txtBSD.Value) Then
            txtBSD.Value = vbNullString
            GoTo last
        Else
            txtBD.Value = GetWorkDaysFromDate(CDate(txtBSD.Value), CDate(txtBED.Value))
        End If
        GoTo last
    End If

last:
    If txtBSD = vbNullString And txtBED = vbNullString Then txtBD = vbNullString
End Sub
Private Sub txtBD_AfterUpdate()
    txtBD_ExitCalculation
End Sub

Private Sub txtBD_ExitCalculation()
    Dim tDate As Date
    Dim wd As Long


    If IsDate(txtBSD.Value) And IsDate(txtBED.Value) Then
        wd = GetWorkDaysFromDate(CDate(txtBSD.Value), CDate(txtBED.Value))
        If txtBD = vbNullString Then txtBD = wd
        If wd <> txtBD.Value Then
            tDate = Format(GetEndDateFromWorkDays(CDate(txtBSD.Value), txtBD.Value), "DD-mmm-yyyy")
            If tDate > ceDate Or tDate < csDate Then
                ShowOutofDatesMessage
                txtBED.Value = vbNullString
            Else
                txtBED.Value = Format(tDate, "DD-mmm-YYYY")
            End If
        End If
        GoTo last
    ElseIf IsDate(txtBSD.Value) And txtBED.Value = vbNullString Then
        If txtBD.Value = vbNullString Then txtBD = 1
        tDate = Format(GetEndDateFromWorkDays(CDate(txtBSD.Value), txtBD.Value), "DD-MMM-YYYY")
        If tDate > ceDate Or tDate < csDate Then
            ShowOutofDatesMessage
            txtBED.Value = vbNullString
        Else
            txtBED.Value = Format(tDate, "DD-mmm-YYYY")
        End If
    ElseIf txtBSD.Value = vbNullString And IsDate(txtBED.Value) Then
        If txtBD.Value = vbNullString Then txtBD = 1
        tDate = Format(GetStartFromWorkDays(CDate(txtBED.Value), txtBD.Value), "DD-mmm-YYYY")
        If tDate > ceDate Or tDate < csDate Then
            ShowOutofDatesMessage
            txtBSD.Value = vbNullString
        Else
            txtBSD.Value = Format(tDate, "DD-mmm-YYYY")
        End If
    End If
last:
End Sub
Function EnableDisableCosts()
    If Cells(cRowPos, colPos.CostsModule) And (bEditTask Or bAddTask) Then
        txtECS.enabled = True
        txtBCS.enabled = True
        txtACS.enabled = True
        Me.btnCopyFromEstimatedCosts.enabled = True

        txtECS.BackColor = RGB(255, 255, 255)
        txtBCS.BackColor = RGB(255, 255, 255)
        txtACS.BackColor = RGB(255, 255, 255)
    Else
        txtECS.enabled = False
        txtBCS.enabled = False
        txtACS.enabled = False
        Me.btnCopyFromEstimatedCosts.enabled = False

        txtECS.BackColor = Me.BackColor
        txtBCS.BackColor = Me.BackColor
        txtACS.BackColor = Me.BackColor
    End If
End Function
Sub EnableDisableTasks(B As Boolean)
    With Me
        '.txtTask.enabled = B
        .cmbResource.enabled = True
        .cmbPercentageCompleted.enabled = B
        If B Then
            If LCase(Cells(cRowPos, colPos.PercentageEntryMode).Value) = "automatic" Then
                With .cmbPercentageCompleted
                    .enabled = False
                    .BackColor = Me.BackColor
                End With
            End If
        End If

        .txtStartDate.enabled = B
        .txtEndDate.enabled = B
        .txtCalendarDays.enabled = B
        .txtBSD.enabled = B
        .txtBED.enabled = B
        .txtBD.enabled = B
        .txtASD.enabled = B
        .txtAED.enabled = B
        .txtAD.enabled = B
        .txtNotes.enabled = True
        .txtECS.enabled = B
        .txtACS.enabled = B
        .txtBCS.enabled = B


        .btnCopyFromEstimatedCosts.enabled = B
        .btnCopyFromEstimatedDates.enabled = B

        .Label25.enabled = B
        .btnAddDependency.enabled = B
        .btnEditDependency.enabled = B
        .btnDeleteDependency.enabled = B
        .lblDependencyType.enabled = B
        .lblDelay.enabled = B
        .cmbTaskName.enabled = B
        .cmbDependencyType.enabled = B
        .txtDelay.enabled = B
        .lstDependencies.enabled = B
        .lblPredecessors.enabled = B
        .btnClearDependencyInputs.enabled = B

        If B Then
        Else

            .cmbPercentageCompleted.BackColor = Me.BackColor
            .txtStartDate.BackColor = Me.BackColor
            .txtEndDate.BackColor = Me.BackColor
            .txtCalendarDays.BackColor = Me.BackColor
            .txtBSD.BackColor = Me.BackColor
            .txtBED.BackColor = Me.BackColor
            .txtBD.BackColor = Me.BackColor
            .txtASD.BackColor = Me.BackColor
            .txtAED.BackColor = Me.BackColor
            .txtAD.BackColor = Me.BackColor

            .txtECS.BackColor = Me.BackColor
            .txtACS.BackColor = Me.BackColor
            .txtBCS.BackColor = Me.BackColor

            .Label25.BackColor = Me.BackColor
            .btnClearDependencyInputs.BackColor = Me.BackColor
            .btnAddDependency.BackColor = Me.BackColor
            .btnEditDependency.BackColor = Me.BackColor
            .btnDeleteDependency.BackColor = Me.BackColor
            .lblDependencyType.BackColor = Me.BackColor
            .lblDelay.BackColor = Me.BackColor
            .cmbTaskName.BackColor = Me.BackColor
            .cmbDependencyType.BackColor = Me.BackColor
            .txtDelay.BackColor = Me.BackColor
            .lstDependencies.BackColor = Me.BackColor
            .frmDependencies.BackColor = Me.BackColor
            .lblPredecessors.BackColor = Me.BackColor
            .frmDependencies.BackColor = Me.BackColor

            .btnCopyFromEstimatedDates.BackColor = Me.BackColor
        End If
    End With
End Sub
Sub EnableDisableTasksM(B As Boolean)
    With Me
        .txtTask.enabled = True
        .cmbResource.enabled = True
        .txtNotes.enabled = True


        .txtStartDate.enabled = True

        .cmbPercentageCompleted.enabled = False

        .txtEndDate.enabled = False
        .txtCalendarDays.enabled = False
        .txtBSD.enabled = False
        .txtBED.enabled = False
        .txtBD.enabled = False
        .txtASD.enabled = False
        .txtAED.enabled = False
        .txtAD.enabled = False

        .txtECS.enabled = False
        .txtACS.enabled = False
        .txtBCS.enabled = False

        .btnCopyFromEstimatedCosts.enabled = False
        .btnCopyFromEstimatedDates.enabled = False

        .Label25.enabled = True
        .btnAddDependency.enabled = True
        .btnEditDependency.enabled = True
        .btnDeleteDependency.enabled = True
        .lblDependencyType.enabled = True
        .lblDelay.enabled = True
        .cmbTaskName.enabled = True
        .cmbDependencyType.enabled = True
        .txtDelay.enabled = True
        .lstDependencies.enabled = True



        .cmbPercentageCompleted.BackColor = Me.BackColor
        .txtEndDate.BackColor = Me.BackColor
        .txtCalendarDays.BackColor = Me.BackColor
        .txtBSD.BackColor = Me.BackColor
        .txtBED.BackColor = Me.BackColor
        .txtBD.BackColor = Me.BackColor
        .txtASD.BackColor = Me.BackColor
        .txtAED.BackColor = Me.BackColor
        .txtAD.BackColor = Me.BackColor

        .txtECS.BackColor = Me.BackColor
        .txtACS.BackColor = Me.BackColor
        .txtBCS.BackColor = Me.BackColor

        .Label25.BackColor = Me.BackColor



        .btnCopyFromEstimatedDates.BackColor = Me.BackColor

    End With
End Sub
Sub TriggerPopulateDependencies()
    If Cells(clRow, colPos.Task).IndentLevel = Cells(clRow + 1, colPos.Task).IndentLevel - 1 And bEditTask Then
        Me.frmDependencies.Caption = "Dependencies cannot be set for parent tasks"
        Exit Sub
    Else
        Me.frmDependencies.Caption = "Dependencies"
    End If

    AddDependencyTypeToCombobox
    AddTaskNamesToDependencyTaskNameSelector


    If (bEditTask Or bEditMilestone) And Cells(clRow, colPos.tDependency) <> vbNullString Then
        AddTaskNamesToDependencyListBox
    End If

    Me.btnEditDependency.enabled = False
    Me.btnDeleteDependency.enabled = False

    If Me.cmbTaskName.ListCount = 0 Then Me.btnAddDependency.enabled = False
End Sub
Sub AddTaskNamesToDependencyTaskNameSelector()
    Dim tid As Variant
    Dim lRow As Long, CurrentID As Long

    'Get List of task IDs to the collection
    lRow = cHeaderRow + 1
    Set tIDList = Nothing
    Do Until Cells(lRow, 1) = vbNullString
        tIDList.Add lRow, "K" & Cells(lRow, colPos.tid)
        lRow = lRow + 1
    Loop
    CurrentID = Cells(clRow, colPos.tid).Value

    'Remove current selection from the collection
    tIDList.Remove "K" & CurrentID
    GetNonDependentIDs clRow

    If tIDList Is Nothing Then GoTo last
    Dim c
    Me.cmbTaskName.Clear
    For Each c In tIDList
        With Me.cmbTaskName
            .AddItem Cells(c, colPos.tid).Value                                                         'Task ID
            .List(.ListCount - 1, 1) = Cells(c, colPos.WBS).Value & " - " & Cells(c, colPos.Task).Value                                     ' TaskWBS - Task Name
            .List(.ListCount - 1, 2) = Cells(c, colPos.ESD).Value                                     ' Task ESD
            .List(.ListCount - 1, 3) = Cells(c, colPos.EED).Value                                     ' Task EED
        End With
    Next
last:
    Set tIDList = Nothing

    If Me.cmbTaskName.ListCount <> 0 Then btnAddDependency.enabled = True
End Sub

Sub AddTaskNamesToDependencyListBox()
'Add predecessor task names to the dependencies list box reading from the sheet
    Dim vStr1, vstr2
    Dim i As Integer, j As Integer, dRng As Range, tRow As Long
    Set dRng = Range(Cells(cHeaderRow + 1, colPos.tid), Cells(Cells.Rows.Count, colPos.tid))
    vStr1 = Split(Cells(clRow, colPos.tDependency).Value, sDependencySeperator)
    For i = 0 To UBound(vStr1) - 1
        vstr2 = Split(vStr1(i), "_")
        tRow = dRng.Find(vstr2(0), , xlFormulas, xlWhole).Row
        With Me.lstDependencies
            .AddItem vstr2(0)
            .List(.ListCount - 1, 1) = Cells(tRow, colPos.WBS).Value & " - " & Cells(tRow, colPos.Task).Value
            .List(.ListCount - 1, 2) = GetDependencyTypeNameFromCode(CStr(vstr2(1)))
            .List(.ListCount - 1, 3) = vstr2(2)
            .List(.ListCount - 1, 4) = Cells(tRow, colPos.ESD).Value
            .List(.ListCount - 1, 5) = Cells(tRow, colPos.EED).Value

            'Remove this task ID from the Task Dependency Combobox Selector
            For j = 0 To Me.cmbTaskName.ListCount - 1
                If Me.cmbTaskName.List(j, 0) = vstr2(0) Then
                    Me.cmbTaskName.RemoveItem (j)
                    Exit For
                End If
            Next
        End With
    Next
    tRow = dRng.Find(vstr2(0), , xlFormulas, xlPart).Row
End Sub
Sub AddDependencyTypeToCombobox()
    With Me.cmbDependencyType
        .Clear
        .AddItem "Finish to Start"
        .AddItem "Start to Start"
        .AddItem "Finish to Finish"
        .AddItem "Start to Finish"
    End With
End Sub
Sub UpdateDependenciesToSheetFromForm()

    If Cells(clRow, colPos.tDependency).Value = vbNullString And Cells(clRow, colPos.tDependents).Value = vbNullString And Me.lstDependencies.ListCount = 0 Then
        Exit Sub
    End If

    Me.lblCalculatingDependencies.visible = True
    Me.Repaint
    Dim dRng As Range, tRow As Long
    Set dRng = Range(Cells(cHeaderRow + 1, colPos.tid), Cells(Cells.Rows.Count, colPos.tid))



    'Read for tDependency and remove the dependents for relates cells
    Dim vStr1, vstr2, tj As Integer, ti As Integer, tid As Integer, vstr3, tdStr As String, tiRow As Long

    If Cells(clRow, colPos.tDependency).Value <> vbNullString Then
        vStr1 = Split(Cells(clRow, colPos.tDependency).Value, sDependencySeperator)
        For ti = 0 To UBound(vStr1) - 1
            vstr2 = Split(vStr1(ti), "_")

            'Find the row of this id in vstr2 and replace clrow id
            tiRow = dRng.Find(vstr2(0), , xlFormulas, xlWhole).Row
            vstr3 = Split(Cells(tiRow, colPos.tDependents).Value, sDependencySeperator)
            For tj = 0 To UBound(vstr3) - 1
                If CLng(vstr3(tj)) = Cells(clRow, colPos.tid).Value Then
                Else
                    tdStr = tdStr & vstr3(tj) & sDependencySeperator
                End If
            Next tj
            Cells(tiRow, colPos.tDependents).Value = tdStr
            tdStr = vbNullString
        Next ti
    End If

    With Me.lstDependencies
        If .ListCount = 0 Then
            Cells(clRow, colPos.tDependency).Value = vbNullString
            GoTo last
        End If

        Dim dRow As Long, sDependencies As String

        'form dependency string and add ID to dependent string in parent task
        For dRow = 0 To .ListCount - 1
            sDependencies = sDependencies & .List(dRow, 0) & "_" & GetDependencyTypeCodeFromName(.List(dRow, 2)) & "_" & .List(dRow, 3) & sDependencySeperator
            tRow = dRng.Find(.List(dRow, 0), , xlFormulas, xlWhole).Row
            If InStr(1, sDependencySeperator & Cells(tRow, colPos.tDependents).Value, sDependencySeperator & Cells(clRow, colPos.tid).Value & sDependencySeperator, vbTextCompare) = 0 Then
                Cells(tRow, colPos.tDependents).Value = Cells(tRow, colPos.tDependents).Value & Cells(clRow, colPos.tid).Value & sDependencySeperator
            End If
        Next


        Cells(clRow, colPos.tDependency).Value = sDependencies
        Cells(clRow, colPos.tStartConstrain).Value = vbNullString
        Cells(clRow, colPos.tEndConstrain).Value = vbNullString
last:

        CalculateStartEndConstrainsAllRows True

        ReCalculateConstrainsValues clRow, True
    End With
End Sub
Private Sub InsertNewRow()
    If CBool(Cells(cRowPos, colPos.ShowGrouping).Value) = True Then
        Application.EnableEvents = False
        ActiveSheet.Cells.EntireRow.ClearOutline

        Cells(cRowPos, colPos.ShowGrouping).Value = 0
        RefreshRibbon True
    End If


    Dim lRowHeight As Double
    With Application
        .EnableEvents = False
        .ScreenUpdating = True
        .CutCopyMode = False
    End With

    Rows(clRow).EntireRow.Insert
    Range(Cells(clRow, colPos.WBS), Cells(clRow, colPos.TimelineStart - 1)).Font.Bold = False
    If bAddTask Then
        Cells(clRow, colPos.tType).Value = "T"
        Cells(clRow, colPos.Task).Value = "Adding task..."
        Cells(clRow, colPos.Task).IndentLevel = lIndentLevel
    ElseIf bAddMilestone Then
        Cells(clRow, colPos.tType).Value = "M"
        Cells(clRow, colPos.Task).Value = "Adding Milestone..."
        Cells(clRow, colPos.Task).IndentLevel = lIndentLevel    ' 0
    End If
    Cells(clRow, colPos.tid).Value = GetNextIDNumber


    WBSNumbering
    AddBordersToTasks clRow
    Application.ScreenUpdating = True
    Application.EnableEvents = True

End Sub
Private Sub DeleteInsertedRow()
    Application.EnableEvents = False
    Rows(clRow).EntireRow.Delete
    If Cells(clRow + 1, colPos.tid) <> vbNullString Then AddBordersToTasks clRow
    WBSNumbering
    Application.EnableEvents = True
End Sub

Private Sub SetBarColorsLabels()

    If Me.chkMilestone Then

        lblPercentColor.visible = False
        lblPercentageCompleteBarColor.visible = False

        lblBaselineColor.visible = False
        lblBaselineBarColor.visible = False

        lblActualsColor.visible = False
        lblActualsBarColor.visible = False

    Else

        lblPercentColor.visible = True
        lblPercentageCompleteBarColor.visible = True

        lblBaselineColor.visible = True
        lblBaselineBarColor.visible = True

        lblActualsColor.visible = True
        lblActualsBarColor.visible = True

    End If

End Sub
Attribute VB_Name = "frm_trial"
Attribute VB_Base = "0{99E787E4-C65F-4F5E-AC8C-1C5A00F6BAB8}{F36109AA-3769-499E-97AE-9031EEF9DB68}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit

Private Sub btnEnterLicenseCode_Click()
    Exit Sub
    Unload Me
    UpgradeLicenseToUltimate
End Sub

Private Sub BuyUltimateVersion_Click()
Dim sURL_O As String, sURL_P As String
OpenBuyHyperlink
Unload Me
End Sub

Private Sub CommandButton1_Click()
    Unload Me
End Sub

'Private Sub Image1_Click()
'    Dim sURL_O As String, sURL_P As String
'    OpenBuyHyperlink
'    Unload Me
'End Sub

Private Sub UserForm_Initialize()
    #If Mac Then
    #Else
        With Me
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        End With
    #End If
    Me.lblMsg.Caption = sTempStr1
End Sub
Attribute VB_Name = "mDashboards"
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit
Public Const cDashboardSheetName As String = "DashboardTemplate"
Public Const cUserDashboardName As String = "Project Dashboard"
Public Const ctType As Long = 26
Public Const cTask As String = ctType + 1
Public Const cECS As String = ctType + 15

Function PopulateSheetsNamesForDropDown(Optional t As Boolean)
    If ActiveSheet.Name = cDashboardSheetName Then Exit Function
    Dim ws As Worksheet, lRow As Long
    Dim wsL As Worksheet

    Set ws = Sheets(cUserDashboardName)
    ' UnLockSheetD ws
    ws.Range("W:V").ClearContents
    ws.Range("W2") = "Projects List"

    For Each wsL In ThisWorkbook.Sheets
        If wsL.Range("A1") = "tType" And wsL.Name <> cGanttTemplateSheetName Then
            lRow = ws.Range("W" & Cells.Rows.Count).End(xlUp).Row + 1
            'ws.Cells(lRow, "W") = wsL.Cells(cProjectNameRow, colPos.WBS)
            ws.Cells(lRow, "W") = wsL.Cells(cProjectNameRow, 7)
            ws.Cells(lRow, "V") = wsL.Name
        End If
    Next wsL

    If ws.Range("d2") = vbNullString Then
        ws.Range("D2") = ws.Cells(3, "W")
    ElseIf t = True Then
        Application.EnableEvents = False
        ws.Range("D2") = ws.Cells(3, "W")
        Application.EnableEvents = True
    End If
    Set ws = Nothing
    Set wsL = Nothing
End Function
Sub AddFormulasToDashboard(ws As Worksheet, tblName As String)

    ws.Range("X3").FormulaR1C1 = _
    "=IFERROR((SUMIFS(" & tblName & "[[#All],[PercentageCompleted]]," & tblName & "[[#All],[tType]],""T"")+SUMIFS(" & tblName & "[[#All],[PercentageCompleted]]," & tblName & "[[#All],[tType]],""C""))/(COUNTIFS(" & tblName & "[[#All],[tType]],""T"")+COUNTIFS(" & tblName & "[[#All],[tType]],""C"")),0)"

    ws.Range("Y8").FormulaR1C1 = _
    "=SUMIFS(" & tblName & "[ACS]," & tblName & "[tType],""T"")+SUMIFS(" & tblName & "[ACS]," & tblName & "[tType],""MP"")"

    ws.Range("Y11").FormulaR1C1 = _
    "=SUMIFS(" & tblName & "[BCS]," & tblName & "[tType],""T"")+SUMIFS(" & tblName & "[BCS]," & tblName & "[tType],""MP"")"

    ws.Range("Y12").FormulaR1C1 = _
    "=SUMIFS(" & tblName & "[ECS]," & tblName & "[tType],""T"")+SUMIFS(" & tblName & "[ECS]," & tblName & "[tType],""MP"")"

    ws.Range("Y13").FormulaR1C1 = _
    "=SUMIFS(" & tblName & "[ACS]," & tblName & "[tType],""T"")+SUMIFS(" & tblName & "[ACS]," & tblName & "[tType],""MP"")"



    Range("E6").FormulaR1C1 = "=MIN(" & tblName & "[[#All],[ESD]])"
    Range("E7").FormulaR1C1 = "=MAX(" & tblName & "[[#All],[EED]])"


    Range("E8").FormulaR1C1 = _
    "=COUNTIFS(shData[[#All],[tType]],""T"")+COUNTIFS(shData[[#All],[tType]],""C"")"

    Range("E9").FormulaR1C1 = _
    "=COUNTIFS(shData[[#All],[tType]],""T"",shData[[#All],[PercentageCompleted]],1)+COUNTIFS(shData[[#All],[tType]],""C"",shData[[#All],[PercentageCompleted]],1)"

    Range("E10").FormulaR1C1 = _
    "=COUNTIFS(shData[[#All],[tType]],""T"",shData[[#All],[PercentageCompleted]],""<""&1,shData[[#All],[PercentageCompleted]],"">""&0,shData[[#All],[EED]],"">=""&TODAY())+COUNTIFS(shData[[#All],[tType]],""C"",shData[[#All],[PercentageCompleted]],""<""&1,shData[[#All],[PercentageCompleted]],"">""&0,shData[[#All],[EED]],"">=""&TODAY())"

    Range("E11").FormulaR1C1 = _
    "=COUNTIFS(shData[[#All],[tType]],""T"",shData[[#All],[PercentageCompleted]],0,shData[[#All],[EED]],"">=""&TODAY())+COUNTIFS(shData[[#All],[tType]],""C"",shData[[#All],[PercentageCompleted]],0,shData[[#All],[EED]],"">=""&TODAY())"

    Range("E12").FormulaR1C1 = _
    "=COUNTIFS(shData[[#All],[tType]],""T"",shData[[#All],[PercentageCompleted]],""<>""&1,shData[[#All],[EED]],""<""&TODAY())+COUNTIFS(shData[[#All],[tType]],""C"",shData[[#All],[PercentageCompleted]],""<>""&1,shData[[#All],[EED]],""<""&TODAY())"



End Sub
Sub GetDataFromGanttSheet(Optional t As String)
    Dim lRow As Long
    Dim sws As Worksheet, dws As Worksheet
    Set dws = Sheets(cUserDashboardName)

    For Each sws In ThisWorkbook.Sheets
        If sws.Cells(cProjectNameRow, colPos.WBS) = dws.Range("D2") Then Exit For
    Next sws

    If sws.AutoFilterMode Then FilterClearTrigger

    'clear dashboard sheet with old values
    Dim sCol As Long
    sCol = dws.Cells(1, "AS").Column

    dws.Range(dws.Cells(4, "AD"), dws.Cells(Cells.Rows.Count, sCol + cTotalCustomColumns + 1)).ClearContents


    'Copy from SWS to dws column by column
    lRow = GetLastTaskRowNo(sws) - 2

    Dim tcRow As Long, tsRow As Long
    tcRow = 3: tsRow = cHeaderRow + 1

    'Copy all Data in all columns
    sws.Range(sws.Cells(cHeaderRow + 1, colPos.WBS), sws.Cells(lRow, colPos.TColor - 1)).Copy
    dws.Cells(3, "AE").PasteSpecial xlPasteValuesAndNumberFormats

    sws.Range(sws.Cells(cHeaderRow + 1, colPos.tType), sws.Cells(lRow, colPos.tType)).Copy
    dws.Cells(3, "AD").PasteSpecial xlPasteValuesAndNumberFormats

    'Copy HeaderNames
    sws.Range(sws.Cells(1, colPos.WBS), sws.Cells(1, colPos.TColor - 1)).Copy
    dws.Cells(2, "AE").PasteSpecial xlPasteValuesAndNumberFormats

    'UpdateFormulas
    AddFormulasToDashboard dws, "shData"

    Do Until dws.Cells(tcRow, "AD") = vbNullString
        If dws.Cells(tcRow, "AD") = "M" Then
        Else
            If IsParentTask(tcRow + 7, sws) Then
                If InStr(1, dws.Cells(tcRow, "AE"), ".") = 0 Then
                    dws.Cells(tcRow, "AD") = "MP"
                Else
                    dws.Cells(tcRow, "AD") = "SP"
                End If
            Else
                If InStr(1, dws.Cells(tcRow, "AE"), ".") = 0 Then
                    dws.Cells(tcRow, "AD") = "T"
                Else
                    dws.Cells(tcRow, "AD") = "C"
                End If
            End If
        End If
        tcRow = tcRow + 1
    Loop


    dws.Range(dws.Cells(1, "AD"), dws.Cells(Cells.Rows.Count, sCol + cTotalCustomColumns + 1)).WrapText = False
    Application.CutCopyMode = False

    SetPivotFilters dws
    SetChartDataRanges

    dws.Range(dws.Cells(1, "AD"), dws.Cells(Cells.Rows.Count, sCol + cTotalCustomColumns + 1)).WrapText = False
    dws.Range("E5") = Replace(sws.Range("G7"), "Project Lead: ", vbNullString)
    'dws.Range("E5") = sws.Range("G7").Value

    'Get Costs
    dws.Range("y6") = sws.Cells(cRowPos, colPos.EstimatedBudget)
    dws.Range("Y7") = sws.Cells(cRowPos, colPos.BaselineBudget)
    dws.Range("Y5") = sws.Cells(cRowPos, colPos.CurrencySymbol)
    dws.Range(dws.Cells(1, "AD"), dws.Cells(Cells.Rows.Count, sCol + cTotalCustomColumns + 1)).FormatConditions.Delete
    Set sws = Nothing
    Set dws = Nothing

End Sub

Sub GetDataFromGanttSheetTOTemplate(Optional t As String)

    Dim lRow As Long
    Dim sws As Worksheet, dws As Worksheet
    Set dws = Sheets(cDashboardSheetName)

    For Each sws In ThisWorkbook.Sheets
        If sws.Cells(cProjectNameRow, colPos.WBS) = Sheets(cUserDashboardName).Range("D2") And sws.Cells(cProjectNameRow, colPos.WBS) <> vbNullString Then Exit For
    Next sws

    If sws.AutoFilterMode Then FilterClearTrigger

    'clear dashboard sheet with old values
    'UnLockSheetD dws
    Dim sCol As Long
    sCol = dws.Cells(1, "AS").Column

    dws.Range(dws.Cells(4, "AD"), dws.Cells(Cells.Rows.Count, sCol + cTotalCustomColumns + 1)).ClearContents


    'Copy from SWS to dws column by column
    lRow = GetLastTaskRowNo(sws) - 2

    Dim tcRow As Long, tsRow As Long
    tcRow = 3: tsRow = cHeaderRow + 1

    'Copy all Data in all columns
    sws.Range(sws.Cells(cHeaderRow + 1, colPos.WBS), sws.Cells(lRow, colPos.TColor - 1)).Copy
    dws.Cells(3, "AE").PasteSpecial xlPasteValuesAndNumberFormats
    sws.Range(sws.Cells(cHeaderRow + 1, colPos.tType), sws.Cells(lRow, colPos.tType)).Copy
    dws.Cells(3, "AD").PasteSpecial xlPasteValuesAndNumberFormats

    'Copy HeaderNames
    sws.Range(sws.Cells(1, colPos.WBS), sws.Cells(1, colPos.TColor - 1)).Copy
    dws.Cells(2, "AE").PasteSpecial xlPasteValuesAndNumberFormats

    'UpdateFormulas
    AddFormulasToDashboard dws, "shData"

    Do Until dws.Cells(tcRow, "AD") = vbNullString
        If dws.Cells(tcRow, "AD") = "M" Then
        Else
            If IsParentTask(tcRow + 7, sws) Then
                If InStr(1, dws.Cells(tcRow, "AE"), ".") = 0 Then
                    dws.Cells(tcRow, "AD") = "MP"
                Else
                    dws.Cells(tcRow, "AD") = "SP"
                End If
            Else
                If InStr(1, dws.Cells(tcRow, "AE"), ".") = 0 Then
                    dws.Cells(tcRow, "AD") = "T"
                Else
                    dws.Cells(tcRow, "AD") = "C"
                End If
            End If
        End If
        tcRow = tcRow + 1
    Loop

    dws.Range(dws.Cells(1, "AD"), dws.Cells(Cells.Rows.Count, sCol + cTotalCustomColumns + 1)).WrapText = False

    Application.CutCopyMode = False
    SetPivotFilters dws

    dws.Range(dws.Cells(1, "AD"), dws.Cells(Cells.Rows.Count, sCol + cTotalCustomColumns + 1)).WrapText = False
    dws.Range("E5") = sws.Range("G7").Value

    'Get Costs
    dws.Range("y6") = sws.Cells(cRowPos, colPos.EstimatedBudget)
    dws.Range("Y7") = sws.Cells(cRowPos, colPos.BaselineBudget)
    dws.Range("Y5") = sws.Cells(cRowPos, colPos.CurrencySymbol)
    'Range("AA:AR").FormatConditions.Delete

    Set sws = Nothing
    Set dws = Nothing

End Sub
Sub RefreshDashboard(Optional t As Boolean)

    If ActiveSheet.Name = cDashboardSheetName Then Exit Sub
    PopulateSheetsNamesForDropDown
    If Range("D2") = vbNullString Then
        MsgBox "Select Project name", vbInformation, "Information"
        Exit Sub
    End If
    If t = False Then
        DisableAll
        UnLockSheetD ActiveSheet
        ReCalculateColPos
        GetDataFromGanttSheet
        'GetDataFromGanttSheetTOTemplate
        ActiveWorkbook.RefreshAll
        RefreshPivotTablesInUserDashboardSheet
        LockSheetD ActiveSheet
    End If
    Sheets(cUserDashboardName).Select
    EnableAll
    Range("D2").Select
    Range("D4").Select
    Range("D2").Select

End Sub
Sub CreateDashboard(Optional t As String)
    Dim ws As Worksheet
    Dim sws As Worksheet, swb As Workbook, dws As Worksheet
    Dim tStr As String, curSheet As String, i As Long
    curSheet = Cells(cProjectNameRow, colPos.WBS)
    
    If checkifdependency(ActiveSheet) = True Then
        Application.EnableEvents = False
        Dim constrainrange As Range
        Dim lasttaskplusone As Long
        lasttaskplusone = Evaluate("counta(" & "'" & ActiveSheet.Name & "'!" & "A:A)+8")
        Set constrainrange = ActiveSheet.Range(Cells(cHeaderRow + 1, 5), Cells(lasttaskplusone, 6))
        With constrainrange
        .ClearContents
        End With
        Application.EnableEvents = True
    Else
    End If
    
    tStr = CheckIfUserDashboardSheetExits
    If tStr = vbNullString Then
        'Create GanttSheet
        DisableAll
        Worksheets(cDashboardSheetName).visible = True

        Worksheets(cDashboardSheetName).Copy , Worksheets(1)
        ActiveSheet.Name = cUserDashboardName
        Set dws = ActiveSheet

        UnLockSheetD dws
        dws.Range("AD2").ListObject.Name = "shData"

        Range("Z3") = "User"
        Range("D2") = vbNullString
        LockSheetD ActiveSheet
        Worksheets(cDashboardSheetName).visible = xlVeryHidden
        RefreshDashboard False
        Range("I1:XFD1").EntireColumn.Hidden = True
        Range("D2").Select

        SetPivotTableDataRange
        SetChartDataRanges
    End If

    With Sheets(cUserDashboardName)
        .visible = True
        .Select
    End With

    DisableAll
    Range("D2") = curSheet
    RefreshDashboard
    RefreshRibbon
    EnableAll
End Sub
Function CheckIfUserDashboardSheetExits() As String
    Dim ws As Worksheet
    For Each ws In ThisWorkbook.Sheets
        If ws.Range("Z2") = "Dashboard" And ws.Range("Z3") = "User" Then
            CheckIfUserDashboardSheetExits = ws.Name
            Exit For
        End If
    Next ws
End Function

Sub SetPivotFilters(ws As Worksheet)
    On Error Resume Next
    Dim pvt As PivotTable
    'Set ws = Sheets(cDashboardSheetName)

    Set pvt = ws.PivotTables("PvtParentECS")
    pvt.PivotCache.Refresh
    With pvt.PivotFields("tType")
        .CurrentPage = "(All)"
        .PivotItems("C").visible = False
        .PivotItems("SP").visible = False
        .PivotItems("M").visible = False
        .PivotItems("MP").visible = True
        .PivotItems("T").visible = True
    End With

    Set pvt = ws.PivotTables("PvtParentPerc")
    pvt.PivotCache.Refresh
    With pvt.PivotFields("tType")
        .CurrentPage = "(All)"
        .PivotItems("C").visible = False
        .PivotItems("SP").visible = False
        .PivotItems("M").visible = False
        .PivotItems("MP").visible = True
        .PivotItems("T").visible = True
    End With

    Set pvt = ws.PivotTables("PvtResourcePerc")
    pvt.PivotCache.Refresh
    With pvt.PivotFields("tType")
        .CurrentPage = "(All)"
        .PivotItems("MP").visible = False
        .PivotItems("SP").visible = False
        .PivotItems("M").visible = False
        .PivotItems("T").visible = True
        .PivotItems("C").visible = True
    End With

    Set pvt = ws.PivotTables("pvtResourceDur")
    pvt.PivotCache.Refresh
    With pvt.PivotFields("tType")
        .CurrentPage = "(All)"
        .PivotItems("MP").visible = False
        .PivotItems("SP").visible = False
        .PivotItems("M").visible = False
        .PivotItems("T").visible = True
        .PivotItems("C").visible = True
    End With

    On Error GoTo 0
End Sub

Sub SetChartDataRanges(Optional t As Boolean)
    On Error Resume Next
    Dim ch As ChartObject, ws As Worksheet, chrt As Chart
    Dim j As Long
    Set ws = Sheets(cUserDashboardName)
    Set ch = ws.ChartObjects("chrt1")

    ch.Chart.SetSourceData ThisWorkbook.Sheets(cUserDashboardName).Range("BJ5").CurrentRegion

    Set ch = ws.ChartObjects("chrt2")
    ch.Chart.SetSourceData ThisWorkbook.Sheets(cUserDashboardName).Range("BN5").CurrentRegion


    Set ch = ws.ChartObjects("chrt3")
    ch.Chart.SetSourceData ThisWorkbook.Sheets(cUserDashboardName).Range("BQ5").CurrentRegion

    Set ch = ws.ChartObjects("chrt4")
    ch.Chart.SetSourceData ThisWorkbook.Sheets(cUserDashboardName).Range("BT5").CurrentRegion
    On Error GoTo 0
End Sub
Sub SetPivotTableDataRange(Optional t As Boolean)
    Dim ws As Worksheet, pvt As PivotTable
    Set ws = Sheets(cUserDashboardName)
    On Error Resume Next
    For Each pvt In ws.PivotTables
        pvt.SourceData = "shData"
        pvt.PivotCache.MissingItemsLimit = xlMissingItemsNone
        pvt.RefreshTable
    Next pvt
    On Error GoTo 0
End Sub

Sub RefreshPivotTablesInUserDashboardSheet(Optional t As String)
    Dim ws As Worksheet, pvt As PivotTable
    Set ws = Sheets(cUserDashboardName)

    For Each pvt In ws.PivotTables
        pvt.RefreshTable
    Next pvt
End Sub


Attribute VB_Name = "mDependencies"
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit
Public tIDList As New Collection

Sub GetNonDependentIDs(cRow As Long)
'Returns task IDs as 1|2|3| etc. which will cause no loop if added as as  dependent to task in tRow
    Dim r As Range, iCount As Long
    Set r = Range(Cells(1, colPos.tid), Cells(Cells.Rows.Count, colPos.tid))
    'Loop through its dependencies
    If Cells(cRow, colPos.tDependents) = vbNullString Then GoTo CheckIndentLevels

    Dim vDependents, vdIDs, d As Integer
    vDependents = Split(Cells(cRow, colPos.tDependents), sDependencySeperator)
    For d = 0 To UBound(vDependents) - 1
        vdIDs = Split(vDependents(d), "_")

        'Remove this ID from the tIDlists
        On Error Resume Next
        tIDList.Remove "K" & vdIDs(0)
        On Error GoTo 0
        GetNonDependentIDs r.Find(vdIDs(0), , xlFormulas, xlWhole).Row
    Next d

CheckIndentLevels:
    'Is crow is main parent all others will become nondependents
    If Cells(cRow, colPos.Task).IndentLevel = 0 Then
        Exit Sub
    Else

        'Remove parents and main parents
        Dim pRow As Long
        pRow = GetTaskParentRowNumber(cRow)
        iCount = tIDList.Count
        'Remove the parent task for task list ids
        On Error Resume Next
        If IsParentTask(pRow) Then tIDList.Remove "K" & Cells(pRow, colPos.tid)
        On Error GoTo 0

        'It is child task, so we need to check this selection parents are driving any tasks
        If iCount > tIDList.Count Then GetNonDependentIDs pRow
    End If

End Sub
Function GetTaskParentRowNumber(ByVal cRow As Long) As Long
    Dim iLevel As Long
    GetTaskParentRowNumber = cRow - 1
    iLevel = Cells(cRow, colPos.Task).IndentLevel

    Do Until Cells(GetTaskParentRowNumber, colPos.Task).IndentLevel < iLevel
        GetTaskParentRowNumber = GetTaskParentRowNumber - 1
    Loop
End Function
Sub ReCalculateConstrainsValues(cRow As Long, Optional bCheckDependentTasks As Boolean)
'This will populate ESD and EED by starting from the lowest dependency to the highest


    Dim bEV As Boolean, bConstrainsChanged As Boolean
    bEV = Application.EnableEvents
    If bEV Then Application.EnableEvents = False

    Application.CalculateFull

    If Cells(cRow, colPos.tStartConstrain) <> vbNullString And Cells(cRow, colPos.tEndConstrain) <> vbNullString Then
        If Cells(cRow, colPos.ESD) <> Cells(cRow, colPos.tStartConstrain) Then
            Cells(cRow, colPos.ESD) = Cells(cRow, colPos.tStartConstrain)
            bConstrainsChanged = True
        End If

        If Cells(cRow, colPos.EED) <> Cells(cRow, colPos.tEndConstrain) Then
            Cells(cRow, colPos.EED) = Cells(cRow, colPos.tEndConstrain)
            bConstrainsChanged = True
        End If

        If Cells(cRow, colPos.EED) < Cells(cRow, colPos.ESD) Then
            Cells(cRow, colPos.EED) = GetEndDateFromWorkDays(Cells(cRow, colPos.ESD), Cells(cRow, colPos.ED))
            bConstrainsChanged = True
        Else
            Cells(cRow, colPos.ED) = GetWorkDaysFromDate(Cells(cRow, colPos.ESD), Cells(cRow, colPos.EED))
        End If

    ElseIf Cells(cRow, colPos.tStartConstrain) <> vbNullString And Cells(cRow, colPos.tEndConstrain) = vbNullString Then
        If Cells(cRow, colPos.ESD) <> Cells(cRow, colPos.tStartConstrain) Then
            Cells(cRow, colPos.ESD) = Cells(cRow, colPos.tStartConstrain)
            Cells(cRow, colPos.EED) = GetEndDateFromWorkDays(Cells(cRow, colPos.ESD), Cells(cRow, colPos.ED))
            bConstrainsChanged = True
        End If
    ElseIf Cells(cRow, colPos.tStartConstrain) = vbNullString And Cells(cRow, colPos.tEndConstrain) <> vbNullString Then
        If Cells(cRow, colPos.EED) <> Cells(cRow, colPos.tEndConstrain) Then
            Cells(cRow, colPos.EED) = Cells(cRow, colPos.tEndConstrain)
            Cells(cRow, colPos.ESD) = GetStartFromWorkDays(Cells(cRow, colPos.EED), Cells(cRow, colPos.ED))
            bConstrainsChanged = True
        End If
    End If

    If Cells(cRow, colPos.tDependents) = vbNullString Then GoTo last
    If bConstrainsChanged = False And bCheckDependentTasks = False Then GoTo last

    Dim vStr As Variant, dStr As Variant
    Dim tRng As Range, i As Long, fRng As Range
    Set tRng = Range(Cells(cHeaderRow + 1, colPos.tid), Cells(Cells.Rows.Count, colPos.tid))
    vStr = Split(Cells(cRow, colPos.tDependents), sDependencySeperator)

    For i = LBound(vStr) To UBound(vStr) - 1
        Set fRng = tRng.Find(CLng(vStr(i)), , xlFormulas, xlWhole)
        If Not fRng Is Nothing Then
            ReCalculateConstrainsValues fRng.Row, False
            dStr = dStr & vStr(i) & sDependencySeperator
        End If
    Next
    If dStr <> vbNullString Then Cells(cRow, colPos.tDependents) = dStr
    dStr = vbNullString

last:
    If bEV Then Application.EnableEvents = True
End Sub


Function GetDependencyTypeCodeFromName(d As String) As String
    Select Case d
    Case Is = "Finish to Start"
        GetDependencyTypeCodeFromName = "FS"
    Case Is = "Start to Start"
        GetDependencyTypeCodeFromName = "SS"
    Case Is = "Start to Finish"
        GetDependencyTypeCodeFromName = "SF"
    Case Is = "Finish to Finish"
        GetDependencyTypeCodeFromName = "FF"
    End Select
End Function
Function GetDependencyTypeNameFromCode(d As String) As String
    Select Case d
    Case Is = "FS"
        GetDependencyTypeNameFromCode = "Finish to Start"
    Case Is = "SS"
        GetDependencyTypeNameFromCode = "Start to Start"
    Case Is = "SF"
        GetDependencyTypeNameFromCode = "Start to Finish"
    Case Is = "FF"
        GetDependencyTypeNameFromCode = "Finish to Finish"
    End Select
End Function

Sub CalculateStartEndConstrainsAllRows(Optional bReCalculateConstrainsValues As Boolean)
    'To Calculate the start date constrain based on the dependencies
    'Add formulas to the constrains columns
    Dim bEV As Boolean
    bEV = Application.EnableEvents
    If bEV Then Application.EnableEvents = False
    Application.CalculateFull
    bStopCalculationOfConstraints = True
    Dim vDPDs, vDPD
    Dim tIDRNG As Range, tR As Range
    Dim td As Long, d As Long, cRow As Long
    Dim sWorkDaysAddress As String

    Dim fStart As String, fEnd As String
    Set tIDRNG = Range(Cells(cHeaderRow, colPos.tid), Cells(Cells.Rows.Count, colPos.tid))

    sWorkDaysAddress = "," & Cells(cRowPos, colPos.WorkdaySun).Address & "," & _
                       Cells(cRowPos, colPos.WorkdayMon).Address & "," & _
                       Cells(cRowPos, colPos.WorkdayTue).Address & "," & _
                       Cells(cRowPos, colPos.WorkdayWed).Address & "," & _
                       Cells(cRowPos, colPos.WorkdayThu).Address & "," & _
                       Cells(cRowPos, colPos.WorkdayFri).Address & "," & _
                       Cells(cRowPos, colPos.WorkDaySat).Address & ","

    cRow = cHeaderRow + 1
    Do Until Cells(cRow, colPos.tType) = vbNullString

        vDPDs = Split(Cells(cRow, colPos.tDependency), sDependencySeperator)
        For td = 0 To UBound(vDPDs) - 1
            vDPD = Split(vDPDs(td), "_")
            Set tR = tIDRNG.Find(vDPD(d), , xlFormulas, xlWhole)
            Select Case vDPD(1)
            Case Is = "FS"
                fStart = fStart & "GetDelayedDate(" & Cells(tR.Row, colPos.EED).Address & "+1," & AddDelayOperator(CStr(vDPD(2))) & sWorkDaysAddress & Chr(34) & "FS" & Chr(34) & ")" & ","
            Case Is = "SS"
                fStart = fStart & "GetDelayedDate(" & Cells(tR.Row, colPos.ESD).Address & "," & AddDelayOperator(CStr(vDPD(2))) & sWorkDaysAddress & Chr(34) & "SS" & Chr(34) & ")" & ","
            Case Is = "SF"
                fEnd = fEnd & "GetDelayedDate(" & Cells(tR.Row, colPos.ESD).Address & "-1" & "," & AddDelayOperator(CStr(vDPD(2))) & sWorkDaysAddress & Chr(34) & "SF" & Chr(34) & ")" & ","
            Case Is = "FF"
                fEnd = fEnd & "GetDelayedDate(" & Cells(tR.Row, colPos.EED).Address & "," & AddDelayOperator(CStr(vDPD(2))) & sWorkDaysAddress & Chr(34) & "FF" & Chr(34) & ")" & ","
            End Select
        Next td
        If fStart <> vbNullString Then
            Cells(cRow, colPos.tStartConstrain).Formula = "=max(" & Left(fStart, Len(fStart) - 1) & ")"
        Else
            Cells(cRow, colPos.tStartConstrain) = vbNullString
        End If
        If fEnd <> vbNullString Then
            Cells(cRow, colPos.tEndConstrain).Formula = "=max(" & Left(fEnd, Len(fEnd) - 1) & ")"
        Else
            Cells(cRow, colPos.tEndConstrain) = vbNullString
        End If
        fStart = vbNullString: fEnd = vbNullString
        cRow = cRow + 1
    Loop
    bStopCalculationOfConstraints = False
    If bEV Then Application.EnableEvents = True
End Sub
Function AddDelayOperator(tStr As String) As String
    If Left(tStr, 1) = "-" Then
        AddDelayOperator = tStr
    Else
        AddDelayOperator = "+" & tStr
    End If
End Function

Function IsDependentTaskOn(dID As Long, pID As Long, Optional dTaskRow As Long, Optional pTaskRow As Long) As Boolean
'checks  if dID is a dependent for pID
'dID may have a pID1 and this PID1 may a its parent as PID, this case IsDependentTask must be false

    Dim bIsDependentTaskOn As Boolean, tRow1 As Integer

    If pID = 0 Or dID = 0 Then Exit Function
    If dID = pID Then
        bIsDependentTaskOn = True
        GoTo last
    End If

    Dim dRow As Long, pRow As Long
    Dim tRng As Range, vStr As Variant, i As Long
    Set tRng = Range(Cells(cHeaderRow + 1, colPos.tid), Cells(Cells.Rows.Count, colPos.tid))

    pRow = tRng.Find(pID, , xlFormulas, xlWhole).Row
    dRow = tRng.Find(dID, , xlFormulas, xlWhole).Row

    If Cells(dRow, colPos.tDependency) = vbNullString Then
        bIsDependentTaskOn = False
    Else
        vStr = Split(Cells(dRow, colPos.tDependency), sDependencySeperator)
        For i = 0 To UBound(vStr) - 1
            If CLng(Left(vStr(i), InStr(1, vStr(i), "_") - 1)) = pID Then
                bIsDependentTaskOn = True
                GoTo last
            Else
                If IsDependentTaskOn(CLng(Left(vStr(i), InStr(1, vStr(i), "_") - 1)), pID) Then
                    bIsDependentTaskOn = True
                    GoTo last
                End If
            End If
        Next i
    End If

    'Check if the dID is Parent and any of its Childs are dependent on pID
    If dTaskRow > 0 And pTaskRow > 0 Then
        If IsParentTask(dTaskRow) Then
            Dim tRow As Long, tLvlCount As Long
            tRow = dTaskRow + 1
            tLvlCount = CountOfLevel(Cells(dTaskRow, colPos.WBS))

            Do Until False
                If Cells(tRow, colPos.WBS) = vbNullString Or CountOfLevel(Cells(tRow, colPos.WBS)) <= tLvlCount Then Exit Do

                bIsDependentTaskOn = IsDependentTaskOn(Cells(tRow, colPos.tid), pID, tRow, pTaskRow)
                If bIsDependentTaskOn Then Exit Do

                tRow = tRow + 1
            Loop
        End If
    End If

    'Check if selected task is child and its main/sub parent is driving the pID
    If Cells(pRow, colPos.Task).IndentLevel <> 0 Then    'means a child task
        tRow1 = pRow
        Do
            tRow1 = tRow1 - 1
            If IsParentTask(tRow1) Then
                vStr = Split(Cells(dRow, colPos.tDependency), sDependencySeperator)
                For i = 0 To UBound(vStr) - 1
                    If CLng(Left(vStr(i), InStr(1, vStr(i), "_") - 1)) = Cells(tRow1, colPos.tid) Then
                        bIsDependentTaskOn = True
                        GoTo last
                    End If
                Next i
            End If

        Loop Until Cells(tRow1, colPos.Task).IndentLevel = 0
    End If
last:
    Set tRng = Nothing
    IsDependentTaskOn = bIsDependentTaskOn
End Function

Public Sub PopulateParentTasksDates(Optional CalOnlyRowNo As Long, Optional t As Boolean, Optional bFullCalculation As Boolean)
    Dim PercentComplete As Double, tPercentComplete As Double
    Dim ESD As Date, EED As Date, ED As Long
    Dim BSD As Date, BED As Date
    Dim ASD As Date, AED As Date
    Dim cTaskCount As Long
    Dim ECS As Double, ACS As Double, BCS As Double
    Dim bECS As Boolean, bACS As Boolean, bBCS As Boolean
    Dim TotalECS As Double, TotalACS As Double, TotalBCS As Double
    Dim sRng As Range, fRng As Range
    Dim bCostsEnabled As Boolean, bbRecalculateConstrainValues As Boolean
    Dim ChildTasksDuration As Long
    Dim bPercentageManualEntry As Boolean, bPercentageSimpleAverage As Boolean
    Dim sRow As Long, fRow As Long, cRow As Long, lRow As Long
    Dim bChildFound As Boolean
    Dim cLevel As Long, arriLvl() As Integer
    Dim arrAlldata()
    If CalOnlyRowNo > 0 Then
        fRow = GetLastRowOfFamily(CalOnlyRowNo)
    Else
        fRow = GetLastTaskRowNo - 2
        bFullCalculation = True
    End If
    If fRow <= cHeaderRow Then Exit Sub
    lRow = fRow
    ReDim arriLvl(1 To fRow)
    ReDim arrAlldata(1 To lRow, 1 To colPos.TimelineStart - 1)
    bCostsEnabled = Cells(cRowPos, colPos.CostsModule)
    If LCase(Cells(cRowPos, colPos.PercentageEntryMode)) = "manual" Then
        bPercentageManualEntry = True
    End If
    If LCase(Cells(cRowPos, colPos.PercentageCalculationType)) = "simple" Then
        bPercentageSimpleAverage = True
    End If
    Set sRng = Range(Cells(cTimelineDateRow, colPos.TimelineStart), Cells(cTimelineDateRow, colPos.TimelineEnd))
    arrAlldata = Range(Cells(1, 1), Cells(lRow, colPos.TimelineStart - 1)).Formula
    Do Until fRow <= cHeaderRow
        sRow = fRow
        'Take each block and then calculate from max level to min level
        If Cells(fRow, colPos.Task).IndentLevel > 0 Then
            cLevel = 0
            '            sRow = Range(Cells(cHeaderRow + 1, colPos.WBS), Cells(fRow, colPos.WBS)).Find(Left(Cells(fRow, colPos.WBS), InStr(1, Cells(fRow, colPos.WBS), ".") - 1), , xlFormulas, xlWhole).Row

            On Error Resume Next

            sRow = 0
            sRow = WorksheetFunction.Match(Left(Cells(fRow, colPos.WBS), InStr(1, Cells(fRow, colPos.WBS), ".") - 1), _
                                           Range(Cells(cHeaderRow + 1, colPos.WBS), Cells(fRow, colPos.WBS)), 0)
            On Error GoTo 0

            If sRow = 0 Then
                MsgBox "Please send your file to support@ganttexcel.com to fix the error in task data", vbError, "Error"
                Exit Sub
            End If
            sRow = sRow + cHeaderRow
            For cRow = sRow To fRow
                arriLvl(cRow) = Cells(cRow, colPos.Task).IndentLevel + 1
                If cLevel < arriLvl(cRow) Then
                    cLevel = arriLvl(cRow)
                End If
            Next
            'Loop from down to top and the get min and max dates of ESD and EED
            Do Until cLevel = 1
                EED = DateSerial(1899, 12, 31): ESD = DateSerial(3000, 12, 31)
                BED = DateSerial(1899, 12, 31): BSD = DateSerial(3000, 12, 31)
                AED = DateSerial(1899, 12, 31): ASD = DateSerial(3000, 12, 31)
                BCS = 0: ECS = 0: ACS = 0
                bBCS = False: bECS = False: bACS = False
                ChildTasksDuration = 0

                bChildFound = False
                For cRow = fRow To sRow Step -1
                    If arriLvl(cRow) = cLevel Then

                        If arrAlldata(cRow, colPos.ESD) <> vbNullString And arrAlldata(cRow, colPos.EED) <> vbNullString Then
                            If arrAlldata(cRow, colPos.ESD) < ESD Then
                                ESD = arrAlldata(cRow, colPos.ESD)
                                bChildFound = True
                            End If

                            If arrAlldata(cRow, colPos.EED) > EED Then
                                EED = arrAlldata(cRow, colPos.EED)
                                bChildFound = True
                            End If
                            If bPercentageManualEntry = False Then
                                GetCalculatedPercentage arrAlldata(), cRow
                            End If
                            tPercentComplete = Replace(Replace(arrAlldata(cRow, colPos.PercentageCompleted), ".", Application.International(xlDecimalSeparator)), ",", Application.International(xlDecimalSeparator))
                            If bPercentageSimpleAverage Then
                                'Simple Average
                                PercentComplete = PercentComplete + tPercentComplete
                            Else
                                'Weighted Average
                                ChildTasksDuration = ChildTasksDuration + arrAlldata(cRow, colPos.ED)
                                PercentComplete = PercentComplete + (tPercentComplete * arrAlldata(cRow, colPos.ED))
                            End If
                        End If
                        If arrAlldata(cRow, colPos.BSD) <> vbNullString And arrAlldata(cRow, colPos.BED) <> vbNullString Then
                            If arrAlldata(cRow, colPos.BSD) < BSD Then
                                BSD = arrAlldata(cRow, colPos.BSD)
                            End If

                            If arrAlldata(cRow, colPos.BED) > BED Then
                                BED = arrAlldata(cRow, colPos.BED)
                            End If
                        End If
                        If arrAlldata(cRow, colPos.ASD) <> vbNullString And arrAlldata(cRow, colPos.AED) <> vbNullString Then
                            If arrAlldata(cRow, colPos.ASD) < ASD Then
                                ASD = arrAlldata(cRow, colPos.ASD)
                            End If

                            If arrAlldata(cRow, colPos.AED) > AED Then
                                AED = arrAlldata(cRow, colPos.AED)
                            End If
                        End If
                        If bCostsEnabled Then
                            If arrAlldata(cRow, colPos.ECS) <> vbNullString Then
                                ECS = ECS + arrAlldata(cRow, colPos.ECS)
                                bECS = True
                            End If
                            If arrAlldata(cRow, colPos.BCS) <> vbNullString Then
                                BCS = BCS + arrAlldata(cRow, colPos.BCS)
                                bBCS = True
                            End If
                            If arrAlldata(cRow, colPos.ACS) <> vbNullString Then
                                ACS = ACS + arrAlldata(cRow, colPos.ACS)
                                bACS = True
                            End If
                        End If
                        cTaskCount = cTaskCount + 1
                    ElseIf bChildFound = True And arriLvl(cRow) = cLevel - 1 Then
                        'Parent Found update the value and reset variables
                        If ESD <> DateSerial(1899, 12, 31) Then
                            If arrAlldata(cRow, colPos.tDependents) <> vbNullString And arrAlldata(cRow, colPos.ESD) <> ESD And arriLvl(cRow) + 1 = arriLvl(cRow) Then
                                bbRecalculateConstrainValues = True
                            End If
                            arrAlldata(cRow, colPos.ESD) = ESD
                        End If
                        If EED <> DateSerial(1899, 12, 31) Then
                            'this condition is when a parent task date is getting changed from its child task
                            'and this parent has dependents - we recalcualte constrains and re-populate dates
                            If arrAlldata(cRow, colPos.tDependents) <> vbNullString And arrAlldata(cRow, colPos.EED) <> EED And arriLvl(cRow) = 1 Then
                                bbRecalculateConstrainValues = True
                            End If
                            arrAlldata(cRow, colPos.EED) = EED
                        End If
                        arrAlldata(cRow, colPos.ED) = GetWorkDaysFromDate(ESD, EED)
                        If bPercentageSimpleAverage Then
                            arrAlldata(cRow, colPos.PercentageCompleted) = PercentComplete / cTaskCount
                        Else
                            arrAlldata(cRow, colPos.PercentageCompleted) = PercentComplete / ChildTasksDuration
                        End If

                        If BSD <> DateSerial(1899, 12, 31) And BSD <> DateSerial(3000, 12, 31) Then
                            arrAlldata(cRow, colPos.BSD) = BSD
                        Else
                            arrAlldata(cRow, colPos.BSD) = vbNullString
                        End If
                        If BED <> DateSerial(1899, 12, 31) And BED <> DateSerial(3000, 12, 31) Then
                            arrAlldata(cRow, colPos.BED) = BED
                        Else
                            arrAlldata(cRow, colPos.BED) = vbNullString
                        End If
                        If arrAlldata(cRow, colPos.BED) <> vbNullString Then arrAlldata(cRow, colPos.BD) = GetWorkDaysFromDate(BSD, BED)

                        If ASD <> DateSerial(1899, 12, 31) And ASD <> DateSerial(3000, 12, 31) And arrAlldata(cRow, colPos.PercentageCompleted) = 1 Then
                            arrAlldata(cRow, colPos.ASD) = ASD
                        Else
                            arrAlldata(cRow, colPos.ASD) = vbNullString
                        End If
                        If AED <> DateSerial(1899, 12, 31) And AED <> DateSerial(3000, 12, 31) And arrAlldata(cRow, colPos.PercentageCompleted) = 1 Then
                            arrAlldata(cRow, colPos.AED) = AED
                        Else
                            arrAlldata(cRow, colPos.AED) = vbNullString
                        End If
                        If arrAlldata(cRow, colPos.AED) <> vbNullString And arrAlldata(cRow, colPos.ASD) <> vbNullString Then
                            arrAlldata(cRow, colPos.AD) = GetWorkDaysFromDate(ASD, AED)
                        Else
                            arrAlldata(cRow, colPos.AD) = vbNullString
                        End If

                        If bCostsEnabled Then
                            If bECS Then
                                arrAlldata(cRow, colPos.ECS) = ECS
                            Else
                                arrAlldata(cRow, colPos.ECS) = vbNullString
                            End If

                            If bBCS Then
                                arrAlldata(cRow, colPos.BCS) = BCS
                            Else
                                arrAlldata(cRow, colPos.BCS) = vbNullString
                            End If

                            If bACS Then
                                arrAlldata(cRow, colPos.ACS) = ACS
                            Else
                                arrAlldata(cRow, colPos.ACS) = vbNullString
                            End If
                        End If
                        bChildFound = False
                        cTaskCount = 0: PercentComplete = 0: ChildTasksDuration = 0

                        EED = DateSerial(1899, 12, 31): ESD = DateSerial(3000, 12, 31)
                        BED = DateSerial(1899, 12, 31): BSD = DateSerial(3000, 12, 31)
                        AED = DateSerial(1899, 12, 31): ASD = DateSerial(3000, 12, 31)
                        BCS = 0: ECS = 0: ACS = 0
                        bBCS = False: bECS = False: bACS = False

                        If bbRecalculateConstrainValues Then
                            GoTo last
                        End If

                    End If
                Next cRow
                cLevel = cLevel - 1
            Loop
            If bFullCalculation = False Then Exit Do
        Else
            'Add Percentage Automatic Calculation
            If bPercentageManualEntry = False Then
                GetCalculatedPercentage arrAlldata(), fRow
            End If

            If CalOnlyRowNo > 0 Then Exit Do
        End If
        fRow = sRow - 1
    Loop
    If ActiveSheet.AutoFilterMode Then
        ReApplyAutoFilter arrAlldata, lRow
    Else
        Range(Cells(1, 1), Cells(lRow, colPos.TimelineStart - 1)).Value = arrAlldata
    End If
    ReCalculateBudgetLineCosts
last:

    If bbRecalculateConstrainValues = True Then
        Range(Cells(1, 1), Cells(lRow, colPos.TimelineStart - 1)) = arrAlldata
        bbRecalculateConstrainValues = False
        ReCalculateConstrainsValues cRow, True
        PopulateParentTasksDates
    End If
End Sub

Sub AutoPopulatePercentages(Optional bForceCalculation As Boolean)
'when file is opened we need to calculate this for all sheets
    Dim t As Boolean
    If bForceCalculation Then
    Else
        If LCase(Cells(cRowPos, colPos.PercentageEntryMode).Value2) = "manual" Then Exit Sub
    End If
    'Dim t As Boolean
    t = Application.EnableEvents
    If Not t Then Application.EnableEvents = False
    PopulateSectionDates , , True
    Application.EnableEvents = t
End Sub
Sub AutoPopulatePercentagesAllSheets(Optional t As Boolean)
    Dim ws As Worksheet, sws As Worksheet
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Set sws = ActiveSheet
    For Each ws In ThisWorkbook.Sheets
        If ws.Cells(1, 1).Value = "tType" And LCase(ws.Name) <> LCase(cGanttTemplateSheetName) Then
            ws.Select
            ReCalculateColPos
            If LCase(ws.Cells(cRowPos, colPos.PercentageEntryMode).Value) = "automatic" Then
                AutoPopulatePercentages
            End If
        End If
    Next
    sws.Select
    ReCalculateColPos
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub
Function GetCalculatedPercentage(ByRef arrData(), ByRef cRow As Long)
    If CDate(arrData(cRow, colPos.ESD)) > Date Then
        arrData(cRow, colPos.PercentageCompleted) = 0
    ElseIf CDate(arrData(cRow, colPos.EED)) < Date Then
        arrData(cRow, colPos.PercentageCompleted) = 1
    Else
        'arrData(cRow, colPos.PercentageCompleted) = (Date - arrData(cRow, colPos.ESD)) / (arrData(cRow, colPos.EED) - arrData(cRow, colPos.ESD) + 1)
        arrData(cRow, colPos.PercentageCompleted) = GetWorkDaysFromDate(CDate(arrData(cRow, colPos.ESD)), Date) / _
                                                    GetWorkDaysFromDate(CDate(arrData(cRow, colPos.ESD)), CDate(arrData(cRow, colPos.EED)))

    End If
    'Debug.Print arrData(cRow, colPos.PercentageCompleted)
End Function
Sub ReCalculateBudgetLineCosts(Optional t As String)
    Dim fRow As Long, cRow As Long
    Dim TotalECS As Double, TotalACS As Double, TotalBCS As Double
    Dim i As Long, tStr As String
    If Cells(cRowPos, colPos.EnableCostsModule) And Cells(cRowPos, colPos.CostsModule) = 1 Then
        fRow = GetLastTaskRowNo - 2
        For cRow = cHeaderRow + 1 To fRow
            If Cells(cRow, colPos.Task).IndentLevel = 0 Then
                TotalACS = TotalACS + Cells(cRow, colPos.ACS)
                TotalBCS = TotalBCS + Cells(cRow, colPos.BCS)
                TotalECS = TotalECS + Cells(cRow, colPos.ECS)
            End If
        Next
        Cells(cTimelineDateNumbersRow, colPos.WBS) = _
        "Budget: " & _
        "Estimated: " & Cells(cRowPos, colPos.CurrencySymbol) & Format(Cells(cRowPos, colPos.EstimatedBudget), "#,##0.00") & " | " & _
                                                     "Baseline: " & Cells(cRowPos, colPos.CurrencySymbol) & Format(Cells(cRowPos, colPos.BaselineBudget), "#,##0.00") & " | " & _
                                                     "Cost: " & _
                                                     "Estimated: " & Cells(cRowPos, colPos.CurrencySymbol) & Format(TotalECS, "#,##0.00") & " | " & _
                                                     "Baseline: " & Cells(cRowPos, colPos.CurrencySymbol) & Format(TotalBCS, "#,##0.00") & " | " & _
                                                     "Actual: " & Cells(cRowPos, colPos.CurrencySymbol) & Format(TotalACS, "#,##0.00")

        tStr = Cells(cTimelineDateNumbersRow, colPos.WBS)
        i = InStr(1, tStr, "Cost:", vbTextCompare)
        With Cells(cTimelineDateNumbersRow, colPos.WBS)
            .Font.Bold = False
            .Characters(1, 7).Font.Bold = True
            .Characters(i, 5).Font.Bold = True
        End With
    Else
        Cells(cTimelineDateNumbersRow, colPos.WBS) = vbNullString
    End If
End Sub
Sub RemoveDpendenciesOnTaskParent(cRow As Long, Optional bActualParent As Boolean)
    'Runs when a take is made parent
    'This task may have dependents
    '   'So if these dependents are child tasks of this parent task, these dependencies are to be removed
    'If task do not have any dependents we exit this routine
    Dim dContinue As Boolean
    If Cells(cRow, colPos.tDependents) = vbNullString Then GoTo RemovePredecessors
    Dim vStr1, vstr2
    Dim i As Long
    Dim fRng As Range, NewDependents As String, NewDependency As String
    NewDependents = Cells(cRow, colPos.tDependents)
    vStr1 = Split(NewDependents, sDependencySeperator)
    'Loop through each dependent by finding with their ID and delete it if it is a child task of this parent task
    For i = 0 To UBound(vStr1) - 1
        NewDependents = Cells(cRow, colPos.tDependents)
        Set fRng = Range(Cells(1, colPos.tid), Cells(Cells.Rows.Count, colPos.tid)).Find(CLng(vStr1(i)), , xlFormulas, xlWhole)
        If fRng Is Nothing Then
        Else
            If InStr(1, Cells(fRng.Row, colPos.WBS), Cells(cRow, colPos.WBS)) > 0 Then
                If bActualParent Then GoTo DirectRemoval
                If (dContinue = False And MsgBox("This action will remove dependencies to the child tasks from this task" & vbLf & _
                                                 "Do you want to continue?", vbQuestion + vbYesNo, "Confirmation") = vbYes) Or bActualParent Then
DirectRemoval:
                    dContinue = True
                    NewDependents = Replace(NewDependents, vStr1(0) & sDependencySeperator, vbNullString)
                    bReDrawDependencies = True
                    'Remove Value in tDependency Column
                    Cells(fRng.Row, colPos.tDependency) = _
                    RemoveParticularTaskFromDependency(strDependency:=Cells(fRng.Row, colPos.tDependency), _
                                                       tid:=Cells(cRow, colPos.tid))

                    If Cells(fRng.Row, colPos.tDependency) = vbNullString Then
                        Cells(fRng.Row, colPos.tStartConstrain) = vbNullString
                        Cells(fRng.Row, colPos.tEndConstrain) = vbNullString
                    End If
                Else
RevertBack:
                    'The user preferred not to remove the dependencies, so we revert back the indent level
                    Cells(cRow, colPos.Task).IndentLevel = Cells(cRow, colPos.Task).IndentLevel + 1
                    WBSNumbering
                    Exit Sub
                End If
                Cells(cRow, colPos.tDependents) = NewDependents

            End If
        End If
    Next
RemovePredecessors:
    'Reducing indent level may also make a task parent
    If IsParentTask(cRow) And Cells(cRow, colPos.tDependency) <> vbNullString Then
        'As the top row task is now parent, we need to remove all dependents from this task too
        NewDependency = Cells(cRow, colPos.tDependency)
        vStr1 = Split(NewDependency, sDependencySeperator)
        For i = 0 To UBound(vStr1) - 1
            vstr2 = Split(vStr1(i), "_")
            Set fRng = Range(Cells(cHeaderRow + 1, colPos.tid), Cells(Cells.Rows.Count, colPos.tid)).Find(CLng(vstr2(0)), , xlFormulas, xlWhole)
            Cells(fRng.Row, colPos.tDependents) = Replace(Cells(fRng.Row, colPos.tDependents), Cells(cRow, colPos.tid) & sDependencySeperator, vbNullString)
            NewDependency = Replace(NewDependency, vStr1(i) & sDependencySeperator, vbNullString)
        Next i
        Cells(cRow, colPos.tDependency) = NewDependency
    End If
End Sub
Function RemoveParticularTaskFromDependency(strDependency As String, tid As Long) As String
    Dim vStr, i As Long
    vStr = Split(strDependency, sDependencySeperator)
    For i = 0 To UBound(vStr) - 1
        If CLng(Left(vStr(i), InStr(1, vStr(i), "_") - 1)) = tid Then
        Else
            RemoveParticularTaskFromDependency = RemoveParticularTaskFromDependency & vStr(i)
        End If
    Next i
    If RemoveParticularTaskFromDependency <> vbNullString Then RemoveParticularTaskFromDependency = RemoveParticularTaskFromDependency & sDependencySeperator
End Function
Sub RemoveDependenciesOnTaskChild(cRow As Long, Optional bActualParent As Boolean)
'Runs when a task is made child
'Check if this task has any predecessor and is the predecessor is parent then delete the dependency
'If no predecessors are present then exit
'Also as the above task becomes parent because of this task becoming child
' 1. We need to remove any dependents from the parent task
' 2. We need to remove any predecessor from the parent task
'Also now the parent task may be dependent on this child task before - dependency may have been created from bottom to top task

    Dim dContinue As Boolean
    If Cells(cRow, colPos.tDependency) = vbNullString Then
        dContinue = True
        GoTo last
    End If

    Dim vStr1, vstr2, i As Long, j As Long
    Dim fRng As Range, NewDependency As String

    vStr1 = Split(Cells(cRow, colPos.tDependency), sDependencySeperator)
    NewDependency = Cells(cRow, colPos.tDependency)

    For i = 0 To UBound(vStr1) - 1
        vstr2 = Split(vStr1(i), "_")
        Set fRng = Range(Cells(1, colPos.tid), Cells(Cells.Rows.Count, colPos.tid)).Find(CLng(vstr2(0)), , xlFormulas, xlWhole)
        If fRng Is Nothing Then
        Else
            If InStr(1, Cells(cRow, colPos.WBS), Cells(fRng.Row, colPos.WBS) & ".") > 0 Or bActualParent Then

                If bActualParent Then
                    GoTo RemoveDep
                End If

                If dContinue = False Then
                    If MsgBox("This action will remove dependencies from the parent tasks to this task" & vbLf & _
                              "Do you want to continue?", vbQuestion + vbYesNo, "Confirmation") = vbYes Then
RemoveDep:
                        dContinue = True: bReDrawDependencies = True
                        NewDependency = Replace(NewDependency, vStr1(i) & sDependencySeperator, vbNullString)
                        Cells(fRng.Row, colPos.tDependents) = Replace(Cells(fRng.Row, colPos.tDependents), Cells(cRow, colPos.tid) & sDependencySeperator, vbNullString)
                    Else
                        'user selected not to remove dependencies - so reverting back to parent task
                        Cells(cRow, colPos.Task).IndentLevel = Cells(cRow, colPos.Task).IndentLevel - 1
                        WBSNumbering
                        Exit Sub
                    End If
                End If

                Cells(cRow, colPos.tDependency) = NewDependency
                If NewDependency = vbNullString Then
                    Cells(cRow, colPos.tStartConstrain) = vbNullString
                    Cells(cRow, colPos.tEndConstrain) = vbNullString
                End If
            ElseIf IsDependentTaskOn(Cells(cRow, colPos.tid), Cells(fRng.Row, colPos.tid)) Then
                'this case is for  - the crow parent will be driving some other task(say y) and this y will be driving crow - so this has to be removed
                dContinue = True: bReDrawDependencies = True
                NewDependency = Replace(NewDependency, vStr1(i) & sDependencySeperator, vbNullString)
                Cells(fRng.Row, colPos.tDependents) = Replace(Cells(fRng.Row, colPos.tDependents), Cells(cRow, colPos.tid) & sDependencySeperator, vbNullString)

                Cells(cRow, colPos.tDependency) = NewDependency
                If NewDependency = vbNullString Then
                    Cells(cRow, colPos.tStartConstrain) = vbNullString
                    Cells(cRow, colPos.tEndConstrain) = vbNullString
                End If
            Else
                If IsParentTask(cRow - 1) Then dContinue = True
            End If
        End If
    Next i
last:
    If dContinue And bActualParent = False Then
        If IsParentTask(cRow - 1) = False Then Exit Sub
        'As the top row task is now parent, we need to remove all dependents from this task too
        If Cells(cRow - 1, colPos.tType) <> vbNullString Then
        Else
            Do Until Cells(cRow - 1, colPos.tType) <> vbNullString Or cRow - 1 = cHeaderRow
                cRow = cRow - 1
            Loop
        End If

        If Cells(cRow - 1, colPos.tDependents) <> vbNullString Then RemoveDpendenciesOnTaskParent cRow - 1, True
        If Cells(cRow - 1, colPos.tDependency) <> vbNullString Then RemoveDependenciesOnTaskChild cRow - 1, True
    End If
End Sub


Attribute VB_Name = "mDirectEntry"
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.


Option Explicit
Public bTriggerBarCreation As Boolean
Public bTriggerDateCalculation As Boolean
Private bInvalidResource As Boolean
Private bTriggerWBSCreation As Boolean
Private bTriggerResourceCostCalculation As Boolean
Private bMoveResourceAndHolidays As Boolean

Sub TriggerCellValueChanged(sRng As Range)
    Dim c As Range, cCount As Long
    Dim sLicName As String
    Dim bShowCompleted As Boolean, bShowPlanned As Boolean, bShowInProgress As Boolean
    Dim bShowMessage As Boolean

    DisableAll
    bInvalidResource = False
    bTriggerBarCreation = False
    bTriggerDateCalculation = False
    bTriggerResourceCostCalculation = False
    cCount = sRng.Cells.Count

    sLicName = Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLiType)
    bShowCompleted = Cells(cRowPos, colPos.ShowCompleted)
    bShowPlanned = Cells(cRowPos, colPos.ShowPlanned)
    bShowInProgress = Cells(cRowPos, colPos.ShowInProgress)

    bShowMessage = True

    bMoveResourceAndHolidays = IsMultipleTaskAddition(sRng)
    If bMoveResourceAndHolidays And (ActiveSheet.AutoFilterMode = False Or bShowCompleted = 0 Or bShowPlanned = 0 Or bShowInProgress = 0) Then
        MoveResourcesAndHolidays
    End If

    For Each c In sRng.Cells
        If sLicName = sLTrialV Then
            If Application.WorksheetFunction.CountA(ActiveSheet.Range("A:A")) - 3 >= cTrialVersionTasksCount Then
                If Cells(c.Row, colPos.tType) = vbNullString Then
                    DeleteExtrasRowsInTrial
                    AddRollingText
                    sTempStr1 = cstrTrailMsg
                    frm_trial.Show
                    Exit For
                End If
            End If
        End If

        If c.Row > cHeaderRow And (bShowCompleted = 0 Or bShowPlanned = 0 Or bShowInProgress = 0 Or ActiveSheet.AutoFilterMode = True) And Cells(c.Row, colPos.WBS) = vbNullString Then
            If bShowMessage Then MsgBox "You cannot add a new task when the data is filtered", vbInformation, "Information"
            bShowMessage = False
            If c.Row > GetLastTaskRowNo - 1 Then
                c = vbNullString
            Else
                c = vbNullString
            End If
            If c.Column = colPos.Task Then AddRollingText
        Else
            If sRng.Rows.Count = 1 Then
                If Cells(c.Row, colPos.Task).IndentLevel = Cells(c.Row + 1, colPos.Task).IndentLevel - 1 Then
                    If c.Column = colPos.ESD Or c.Column = colPos.EED Or c.Column = colPos.ED Or _
                       c.Column = colPos.ASD Or c.Column = colPos.AED Or c.Column = colPos.AD Or _
                       c.Column = colPos.BSD Or c.Column = colPos.BED Or c.Column = colPos.BD Or _
                       c.Column = colPos.BCS Or c.Column = colPos.ACS Or c.Column = colPos.ECS Or _
                       c.Column = colPos.PercentageCompleted Then
                        MsgBox "Parent tasks auto calculate dates and costs from the tasks under them.", vbCritical, "Information"
                    End If
                End If
            End If
            Call ExecuteCellChanges(c)
            If bTriggerDateCalculation And sRng.Rows.Count = 1 And Cells(c.Row, colPos.tDependents) = vbNullString Then
                PopulateSectionDates , c.Row
                bTriggerDateCalculation = False
            End If
            'Update Task Name in Gantt Bar
            If bTriggerBarCreation = False Then
                If Cells(1, c.Column) = Cells(cRowPos, colPos.BarTextDataColumnName) Then
                    If Cells(cRowPos, colPos.BarTextEnable) Then
                        Dim s As Shape, ws As Worksheet
                        On Error Resume Next
                        Set s = ActiveSheet.Shapes("S_T_" & Cells(c.Row, colPos.tid))
                        On Error GoTo 0
                        If Not s Is Nothing Then
                            If c.NumberFormat = "General" Then
                                s.TextFrame.Characters.Text = c.Value2
                            Else
                                s.TextFrame.Characters.Text = Format(Left(c.Value2, Cells(cRowPos, colPos.BarTextCharacters)), c.NumberFormat)
                            End If
                        End If
                    End If
                End If
            End If
        End If
    Next
    If bMoveResourceAndHolidays Then
        AddBordersToTasks
        bMoveResourceAndHolidays = False
        sRng.Locked = False
    End If

    If bTriggerWBSCreation Then
        WBSNumbering
        bTriggerWBSCreation = False
    End If

    If bTriggerResourceCostCalculation Then
        PopulateEstimatesCostsFromResourceInSheet
        bTriggerResourceCostCalculation = False
    End If
    If bTriggerDateCalculation Then
        PopulateSectionDates
        bTriggerDateCalculation = False
    End If
    If bTriggerBarCreation Then
        ReBuildView
        AddGanttBarsForEachRow
        bTriggerBarCreation = False
    End If
    EnableAll
    If bInvalidResource Then
        If MsgBox("The resource name(s) entered is not in the resources list." & vbLf _
                & "Do you want to add a new resource?", vbQuestion + vbYesNo, "Resource not in list") = vbYes Then
            frm_Resources.Show
            bInvalidResource = False
        End If
    End If
    LockSheet ActiveSheet
End Sub

Sub AlignCells(ByVal cRng As Range)
    Exit Sub
    Cells(cRng.Row, colPos.ESD).HorizontalAlignment = xlRight
    Cells(cRng.Row, colPos.EED).HorizontalAlignment = xlRight
    Cells(cRng.Row, colPos.ED).HorizontalAlignment = xlRight
    Cells(cRng.Row, colPos.PercentageCompleted).NumberFormat = "0%"

    Cells(cRng.Row, colPos.BSD).HorizontalAlignment = xlRight
    Cells(cRng.Row, colPos.BED).HorizontalAlignment = xlRight
    Cells(cRng.Row, colPos.BD).HorizontalAlignment = xlRight

    Cells(cRng.Row, colPos.ASD).HorizontalAlignment = xlRight
    Cells(cRng.Row, colPos.AED).HorizontalAlignment = xlRight
    Cells(cRng.Row, colPos.AD).HorizontalAlignment = xlRight
End Sub
Sub ExecuteCellChanges(ByVal cRng As Range)
    If cRng.Row <= cHeaderRow Then Exit Sub
    If Cells(cRng.Row, colPos.Task) = vbNullString Or Cells(cRng.Row, colPos.Task) = sAddTaskPlaceHolder Then
        cRng = vbNullString
        AddRollingText
        Exit Sub
    End If
    Select Case cRng.Column
    Case colPos.WBS
        Cell_WBSChanged cRng
    Case colPos.tType
        Exit Sub
    Case colPos.Task
        Cell_TaskChanged cRng
    Case colPos.TaskLead
        Cell_TaskOwnerChanged cRng
    Case colPos.ESD
        Cell_ESDChanged cRng
    Case colPos.EED
        Cell_EEDChanged cRng
    Case colPos.ED
        Cell_EDChanged cRng
    Case colPos.PercentageCompleted
        cell_PercentageCompleted cRng
    Case colPos.BSD
        Cell_BSDChanged cRng
    Case colPos.BED
        Cell_BEDChanged cRng
    Case colPos.BD
        Cell_BDChanged cRng
    Case colPos.ASD
        Cell_ASDChanged cRng
    Case colPos.AED
        Cell_AEDChanged cRng
    Case colPos.AD
        Cell_ADChanged cRng
    Case colPos.BCS
        If Cells(cRowPos, colPos.LiType) <> "P" Then cell_BCSChanged cRng
    Case colPos.ECS
        If Cells(cRowPos, colPos.LiType) <> "P" Then Cell_ECSChanged cRng
    Case colPos.ACS
        If Cells(cRowPos, colPos.LiType) <> "P" Then cell_ACSChanged cRng
    End Select
    If Cells(cRng.Row, colPos.tType) = "S" And cRng.Column <> colPos.Task Then
        cRng = vbNullString
    End If
    Range(Cells(cHeaderRow, colPos.WBS), Cells(2000, colPos.ACColor)).Locked = False
    ActiveSheet.Range("G9").Locked = True
    
last:

End Sub

Sub Cell_WBSChanged(ByVal cRng As Range)
    If bTriggerWBSCreation = False Then MsgBox "WBS is autocalculated/added when a new task is added.", vbInformation, "Information"
    bTriggerWBSCreation = True
End Sub
Sub Cell_TaskOwnerChanged(ByVal cRng As Range)
rungsschk
    Dim fRng As Range, tRng As Range
    Dim vStr, i As Integer, sResources As String
    If cRng = vbNullString Then
        Cells(cRng.Row, colPos.TaskLeadCost) = vbNullString
        Exit Sub
    End If
    Set tRng = gss.Range(gss.Cells(cRowPos, 1), gss.Cells(Cells(Cells.Rows.Count, 1).End(xlUp).Row, 1))
    vStr = Split(cRng & sResourceSeperator, sResourceSeperator)
    For i = 0 To UBound(vStr) - 1
        Set fRng = tRng.Find(vStr(i), , xlFormulas, xlWhole)
        If fRng Is Nothing Then
            bInvalidResource = True
        Else
            'prevent same resource name being added twice
            If InStr(1, sResourceSeperator & sResources, sResourceSeperator & vStr(i) & sResourceSeperator, vbTextCompare) = 0 Then
                sResources = sResources & vStr(i) & sResourceSeperator
            End If
        End If
    Next i

    If sResources = vbNullString Then
        cRng = vbNullString
    Else
        cRng = Left(sResources, Len(sResources) - 2)
        PopulateTaskOwnerCost cRng
    End If

    Set fRng = tRng.Find(cRng.Value, , xlFormulas, xlPart)

End Sub
Sub PopulateTaskOwnerCost(cRng As Range)
    If Cells(cRng.Row, colPos.TaskLead) <> vbNullString Then
        Cells(cRng.Row, colPos.TaskLeadCost) = GetResourcesTotalCost(Cells(cRng.Row, colPos.TaskLead), Cells(cRng.Row, colPos.ED))
    Else
        Cells(cRng.Row, colPos.TaskLeadCost) = vbNullString
    End If
End Sub
Sub cell_PercentageCompleted(ByVal cRng As Range)
    If cRng = vbNullString Or IsNumeric(cRng) = False Or Cells(cRng.Row, colPos.Task) = sAddTaskPlaceHolder Then
        If Cells(cRng.Row, colPos.Task) <> vbNullString Then cRng = 0
        If Cells(cRng.Row, colPos.Task).IndentLevel = 0 Then Exit Sub
    End If

    If cRng > 1 Then cRng = 1
    AlignCells cRng
    bTriggerBarCreation = True
    If Cells(cRng.Row, colPos.Task).IndentLevel = 0 Then Exit Sub
    bTriggerDateCalculation = True
End Sub
Sub Cell_TaskChanged(ByVal cRng As Range)
    Dim sPos As Long, cRow As Long, s As String
    rungsschk
    cRow = cRng.Row
    If Cells(cRow - 1, colPos.Task) = vbNullString Or Cells(cRow - 1, colPos.Task) = sAddTaskPlaceHolder Then
        cRng = vbNullString
        Exit Sub
    End If
    If cRng = vbNullString And Cells(cRow, colPos.tType) = vbNullString And Cells(cRow - 1, colPos.tType) <> vbNullString Then
        AddRollingText
        Exit Sub
    End If
    If cRng <> vbNullString And Cells(cRow, colPos.ESD) = vbNullString And Cells(cRow, colPos.EED) = vbNullString And Cells(cRow, colPos.ED) = vbNullString Then
        Cells(cRow, colPos.ESD) = Date
        Cells(cRow, colPos.ED) = 1
        Cells(cRow, colPos.EED) = GetEndDateFromWorkDays(Date, 1)
        Cells(cRow, colPos.ESD).NumberFormat = Cells(2, colPos.DateFormat)
        Cells(cRow, colPos.EED).NumberFormat = Cells(2, colPos.DateFormat)
        bTriggerBarCreation = True
        bTriggerDateCalculation = True
    End If
    If cRng <> vbNullString And Cells(cRow, colPos.tType) = vbNullString Then
        If Cells(cRowPos, colPos.ShowGrouping) = 1 Then
            Application.EnableEvents = False
            ActiveSheet.Cells.EntireRow.ClearOutline
            Cells(cRowPos, colPos.ShowGrouping) = 0
            RefreshRibbon True
        End If
        Cells(cRng.Row, colPos.tType) = "T"
        Cells(cRng.Row, colPos.Task) = Trim(Cells(cRng.Row, colPos.Task).Value)
        If Cells(cRng.Row + 1, colPos.Task) = vbNullString Then
            Rows(cRng.Row + 1).EntireRow.Insert
            AddRollingText
        End If
        Cells(cRng.Row, colPos.tid) = GetNextIDNumber
        Cells(cRng.Row, colPos.Task).IndentLevel = Cells(cRng.Row - 1, colPos.Task).IndentLevel
        If cRng.Row = cHeaderRow + 1 Then
            Cells(cRng.Row, colPos.WBS) = 1
        Else
            s = Cells(cRng.Row - 1, colPos.WBS)
            If InStr(1, s, ".") = 0 Then
                Cells(cRng.Row, colPos.WBS) = CStr(CLng(s) + 1)
            Else
                sPos = InStrRev(s, ".")
                Cells(cRng.Row, colPos.WBS) = Left(s, sPos) & CLng(Right(s, Len(s) - sPos)) + 1
            End If
        End If
        With Rows(cRng.Row)
            .Font.Italic = False
            .Font.Color = RGB(0, 0, 0)
        End With
        If bMoveResourceAndHolidays = False Then AddBordersToTasks cRow
        If Cells(cRow, colPos.tType) = "T" Then
            Cells(cRow, colPos.TColor).Interior.Color = gss.Range("Z6").Interior.Color
        Else
            Cells(cRow, colPos.TColor).Interior.Color = gss.Range("Z6").Interior.Color
        End If
        
        Cells(cRow, colPos.TPColor).Interior.Color = gss.Range("AB6").Interior.Color
        
        Cells(cRow, colPos.BLColor).Interior.Color = gss.Range("AC6").Interior.Color
        
        Cells(cRow, colPos.ACColor).Interior.Color = gss.Range("AD6").Interior.Color
        
        If Cells(cRow, colPos.PercentageCompleted) = vbNullString And Cells(cRow, colPos.Task) <> vbNullString Then
            Cells(cRow, colPos.PercentageCompleted).Value = 0
            Cells(cRow, colPos.PercentageCompleted).NumberFormat = "0%"
            Cells(cRow, colPos.PercentageCompleted).HorizontalAlignment = xlCenter
        End If
    End If
    
End Sub
Function SetDates(ByVal cRng As Range, ByVal bESD As Boolean, ByVal bEED As Boolean, ByVal BED As Boolean, ESD, EED, ED)

    If bESD = True And bEED = True And BED = True Then
        If cRng.Column = colPos.EED Then
            Cells(cRng.Row, colPos.ED) = GetWorkDaysFromDate(CDate(ESD), CDate(EED))
        Else
            Cells(cRng.Row, colPos.EED) = GetEndDateFromWorkDays(CDate(ESD), CLng(ED))
        End If
    ElseIf bESD = False And bEED = False And BED = False Then
        Cells(cRng.Row, colPos.ESD) = Date: Cells(cRng.Row, colPos.ED) = 1
        Cells(cRng.Row, colPos.EED) = GetEndDateFromWorkDays(Date, 1)
    ElseIf bESD = False And bEED = False And BED = True Then
        Cells(cRng.Row, colPos.ESD) = Date
        Cells(cRng.Row, colPos.EED) = GetEndDateFromWorkDays(Date, CLng(ED))
    ElseIf bESD = False And bEED = True And BED = False Then
        Cells(cRng.Row, colPos.ED) = 1
        Cells(cRng.Row, colPos.ESD) = GetStartFromWorkDays(CDate(EED), 1)
    ElseIf bESD = False And bEED = True And BED = True Then
        Cells(cRng.Row, colPos.ESD) = GetStartFromWorkDays(CDate(EED), CLng(ED))
    ElseIf bESD = True And bEED = False And BED = False Then
        Cells(cRng.Row, colPos.ED) = 1
        Cells(cRng.Row, colPos.EED) = GetEndDateFromWorkDays(CDate(ESD), 1)
    ElseIf bESD = True And bEED = False And BED = True Then
        Cells(cRng.Row, colPos.EED) = GetEndDateFromWorkDays(CDate(ESD), CLng(ED))
    ElseIf bESD = True And bEED = True And BED = False Then
        Cells(cRng.Row, colPos.ED) = GetWorkDaysFromDate(CDate(ESD), CDate(EED))
    End If

End Function
Sub Cell_ESDChanged(ByVal cRng As Range)
    Dim ESD, EED, ED
    Dim bESD As Boolean, bEED As Boolean, BED As Boolean
    If InStr(1, Cells(cRng.Row, colPos.tDependency), "S_", vbTextCompare) > 0 Then
        cRng = Cells(cRng.Row, colPos.tStartConstrain)
        Exit Sub
    End If

    If Cells(cRng.Row, colPos.tType) = vbNullString Then
        cRng = vbNullString
        Exit Sub
    End If

    ESD = cRng: EED = Cells(cRng.Row, colPos.EED): ED = Cells(cRng.Row, colPos.ED): If ED = vbNullString Then ED = "-"
    If IsDate(ESD) Then bESD = True
    If IsDate(EED) Then bEED = True
    If IsNumeric(ED) Then
        If ED > 0 Then BED = True
    End If
    If (ESD < csDate Or ESD > ceDate) And IsDate(ESD) = True Then
        ShowOutofDatesMessage
        cRng = vbNullString
        ESD = vbNullString: bESD = False
    End If

    SetDates cRng, bESD, bEED, BED, ESD, EED, ED
    PopulateTaskOwnerCost cRng
last:

    ReCalculateConstrainsValues cRng.Row, True
    AlignCells cRng
    bTriggerDateCalculation = True
    bTriggerBarCreation = True
End Sub
Sub Cell_EEDChanged(ByVal cRng As Range)
    Dim ESD, EED, ED
    Dim bESD As Boolean, bEED As Boolean, BED As Boolean
    If InStr(1, Cells(cRng.Row, colPos.tDependency), "F_", vbTextCompare) > 0 Then
        cRng = Cells(cRng.Row, colPos.tEndConstrain)
        Exit Sub
    End If

    If Cells(cRng.Row, colPos.tType) = vbNullString Then
        cRng = vbNullString
        Exit Sub
    End If

    ESD = Cells(cRng.Row, colPos.ESD): EED = cRng: ED = Cells(cRng.Row, colPos.ED): If ED = vbNullString Then ED = "-"
    If IsDate(ESD) Then bESD = True
    If IsDate(EED) Then bEED = True
    If bESD And bEED Then
        If EED < ESD Then
            ESD = vbNullString
            bESD = False
        End If
    End If
    If IsNumeric(ED) Then
        If ED > 0 Then BED = True
    End If


    If (EED < csDate Or EED > ceDate) And IsDate(EED) = True Then
        ShowOutofDatesMessage
        cRng = vbNullString
        EED = vbNullString: bEED = False
    End If

    '------------------------------------------------
    SetDates cRng, bESD, bEED, BED, ESD, EED, ED
    '------------------------------------------------
    PopulateTaskOwnerCost cRng
last:

    ReCalculateConstrainsValues cRng.Row, True
    AlignCells cRng
    bTriggerBarCreation = True
    bTriggerDateCalculation = True
End Sub
Sub Cell_EDChanged(ByVal cRng As Range)
    Dim tDate As Date
    Dim bESD As Boolean, bEED As Boolean, BED As Boolean
    Dim EED, ESD, ED

    If Cells(cRng.Row, colPos.tType) = vbNullString Then
        cRng = vbNullString
        Exit Sub
    End If

    ESD = Cells(cRng.Row, colPos.ESD): EED = Cells(cRng.Row, colPos.EED): ED = cRng: If ED = vbNullString Then ED = "-"
    If IsDate(ESD) Then bESD = True
    If IsDate(EED) Then bEED = True
    If IsNumeric(ED) Then
        If ED > 0 Then BED = True
    End If
    '------------------------------------------------
    SetDates cRng, bESD, bEED, BED, ESD, EED, ED
    '------------------------------------------------
    PopulateTaskOwnerCost cRng
last:

    ReCalculateConstrainsValues cRng.Row, True
    AlignCells cRng
    bTriggerBarCreation = True
    bTriggerDateCalculation = True
End Sub

Sub Cell_BSDChanged(ByVal cRng As Range)
    If Cells(cRng.Row, colPos.Task) = sAddTaskPlaceHolder Then
        cRng = vbNullString
        Exit Sub
    End If
    If IsDate(cRng) = False Or cRng = vbNullString Then
        cRng = vbNullString
        If Cells(cRng.Row, colPos.BED) = vbNullString Then Cells(cRng.Row, colPos.BD) = vbNullString
        If Cells(cRng.Row, colPos.Task).IndentLevel < Cells(cRng.Row + 1, colPos.Task).IndentLevel Then
            AlignCells cRng
            bTriggerDateCalculation = True
        End If
        GoTo last
    End If


    If cRng <> vbNullString And Cells(cRng.Row, colPos.BED) = vbNullString And Cells(cRng.Row, colPos.BD) = vbNullString Then
        Cells(cRng.Row, colPos.BD) = 1
        Cells(cRng.Row, colPos.BED) = cRng
    End If

    If cRng < csDate Or cRng > ceDate Then
        ShowOutofDatesMessage
        cRng = Cells(cRng.Row, colPos.BED)
        bTriggerDateCalculation = True
        Exit Sub
    End If

    If cRng <> vbNullString And Cells(cRng.Row, colPos.BED) <> vbNullString Then
        If cRng <= Cells(cRng.Row, colPos.BED) Then
            Cells(cRng.Row, colPos.BD) = GetWorkDaysFromDate(Cells(cRng.Row, colPos.BSD), Cells(cRng.Row, colPos.BED))
        Else
            Cells(cRng.Row, colPos.BED) = vbNullString
        End If
    ElseIf cRng <> vbNullString And Cells(cRng.Row, colPos.BED) = vbNullString And Cells(cRng.Row, colPos.BD) <> vbNullString Then
        Cells(cRng.Row, colPos.BED) = CDate(GetEndDateFromWorkDays(Cells(cRng.Row, colPos.BSD), Cells(cRng.Row, colPos.BD)))
    End If
    cRng.HorizontalAlignment = xlRight
last:
    AlignCells cRng
    bTriggerDateCalculation = True
    If Cells(cRowPos, colPos.ShowBaselineBar) Then bTriggerBarCreation = True
End Sub
Sub Cell_BEDChanged(ByVal cRng As Range)
    If Cells(cRng.Row, colPos.Task) = sAddTaskPlaceHolder Then
        cRng = vbNullString
        Exit Sub
    End If
    If IsDate(cRng) = False Or cRng = vbNullString Then
        cRng = vbNullString
        If Cells(cRng.Row, colPos.BSD) = vbNullString Then Cells(cRng.Row, colPos.BD) = vbNullString
        If Cells(cRng.Row, colPos.Task).IndentLevel < Cells(cRng.Row + 1, colPos.Task).IndentLevel Then
            AlignCells cRng
            bTriggerDateCalculation = True
        End If
        GoTo last
    End If



    If cRng <> vbNullString And Cells(cRng.Row, colPos.BSD) = vbNullString And Cells(cRng.Row, colPos.BD) = vbNullString Then
        Cells(cRng.Row, colPos.BD) = 1
        Cells(cRng.Row, colPos.BSD) = cRng
    End If

    If cRng < csDate Or cRng > ceDate Then
        ShowOutofDatesMessage
        cRng = Cells(cRng.Row, colPos.BSD)
        bTriggerDateCalculation = True
        Exit Sub
    End If


    If cRng <> vbNullString And Cells(cRng.Row, colPos.BSD) <> vbNullString Then
        If cRng >= Cells(cRng.Row, colPos.BED) Then
            Cells(cRng.Row, colPos.BD) = GetWorkDaysFromDate(Cells(cRng.Row, colPos.BSD), Cells(cRng.Row, colPos.BED))
            Cells(cRng.Row, colPos.BD).HorizontalAlignment = xlRight
        Else
            Cells(cRng.Row, colPos.BSD) = vbNullString
        End If
    ElseIf cRng <> vbNullString And Cells(cRng.Row, colPos.BSD) = vbNullString And Cells(cRng.Row, colPos.BD) <> vbNullString Then
        Cells(cRng.Row, colPos.BSD) = CDate(GetStartFromWorkDays(Cells(cRng.Row, colPos.BED), Cells(cRng.Row, colPos.BD)))
    End If
last:
    AlignCells cRng
    bTriggerDateCalculation = True
    If Cells(cRowPos, colPos.ShowBaselineBar) Then bTriggerBarCreation = True
End Sub
Sub Cell_BDChanged(ByVal cRng As Range)
    Dim tDate As Date
    If IsNumeric(cRng) = False Or cRng = vbNullString Or Cells(cRng.Row, colPos.Task) = sAddTaskPlaceHolder Then
        cRng = vbNullString
        If Cells(cRng.Row, colPos.Task).IndentLevel < Cells(cRng.Row + 1, colPos.Task).IndentLevel Then
            'bTriggerBarCreation = True
            bTriggerDateCalculation = True
        End If
        GoTo last
    End If


    If IsDate(Cells(cRng.Row, colPos.BSD)) Then
        tDate = CDate(GetEndDateFromWorkDays(Cells(cRng.Row, colPos.BSD), Cells(cRng.Row, colPos.BD)))
        If tDate < csDate Or tDate > ceDate Then
            ShowOutofDatesMessage
            Cells(cRng.Row, colPos.BD) = GetWorkDaysFromDate(Cells(cRng.Row, colPos.BSD), Cells(cRng.Row, colPos.BED))
        Else
            Cells(cRng.Row, colPos.BED) = tDate
        End If
    ElseIf IsDate(Cells(cRng.Row, colPos.BED)) Then
        tDate = CDate(GetStartFromWorkDays(Cells(cRng.Row, colPos.BED), Cells(cRng.Row, colPos.BD)))
        If tDate < csDate Or tDate > ceDate Then
            ShowOutofDatesMessage
            Cells(cRng.Row, colPos.BD) = GetWorkDaysFromDate(Cells(cRng.Row, colPos.BSD), Cells(cRng.Row, colPos.BED))
        Else
            Cells(cRng.Row, colPos.BSD) = tDate
        End If
    End If
last:
    AlignCells cRng
    bTriggerDateCalculation = True
    If Cells(cRowPos, colPos.ShowBaselineBar) Then bTriggerBarCreation = True
End Sub
Sub Cell_ASDChanged(ByVal cRng As Range)
    If Cells(cRng.Row, colPos.Task) = sAddTaskPlaceHolder Then
        cRng = vbNullString
        Exit Sub
    End If
    If IsDate(cRng) = False Or cRng = vbNullString Then
        cRng = vbNullString
        If Cells(cRng.Row, colPos.ASD) = vbNullString Then Cells(cRng.Row, colPos.AD) = vbNullString
        If Cells(cRng.Row, colPos.Task).IndentLevel < Cells(cRng.Row + 1, colPos.Task).IndentLevel Then
            AlignCells cRng
            bTriggerDateCalculation = True
        End If
        GoTo last
    End If



    If cRng <> vbNullString And Cells(cRng.Row, colPos.AED) = vbNullString And Cells(cRng.Row, colPos.AD) = vbNullString Then
        Cells(cRng.Row, colPos.AD) = 1
        Cells(cRng.Row, colPos.AED) = cRng
    End If

    If cRng < csDate Or cRng > ceDate Then
        MsgBox "Enter a date between " & Format(csDate, "DD-MMM-YYYY") & " and " & Format(ceDate, "DD-MMM-YYYY")
        cRng = Cells(cRng.Row, colPos.AED)
        bTriggerDateCalculation = True
        Exit Sub
    End If

    If cRng <> vbNullString And Cells(cRng.Row, colPos.AED) <> vbNullString Then
        If cRng <= Cells(cRng.Row, colPos.AED) Then
            Cells(cRng.Row, colPos.AD) = GetWorkDaysFromDate(Cells(cRng.Row, colPos.ASD), Cells(cRng.Row, colPos.AED))
        Else
            Cells(cRng.Row, colPos.AED) = vbNullString
        End If
    ElseIf cRng <> vbNullString And Cells(cRng.Row, colPos.AED) = vbNullString And Cells(cRng.Row, colPos.AD) <> vbNullString Then
        Cells(cRng.Row, colPos.AED) = CDate(GetEndDateFromWorkDays(Cells(cRng.Row, colPos.ASD), Cells(cRng.Row, colPos.AD)))
    End If
last:
    AlignCells cRng
    bTriggerDateCalculation = True
    If Cells(cRowPos, colPos.ShowActualBar) Then bTriggerBarCreation = True
End Sub
Sub Cell_AEDChanged(ByVal cRng As Range)
    If Cells(cRng.Row, colPos.Task) = sAddTaskPlaceHolder Then
        cRng = vbNullString
        Exit Sub
    End If
    If IsDate(cRng) = False Or cRng = vbNullString Then
        cRng = vbNullString
        If Cells(cRng.Row, colPos.ASD) = vbNullString Then Cells(cRng.Row, colPos.AD) = vbNullString
        If Cells(cRng.Row, colPos.Task).IndentLevel < Cells(cRng.Row + 1, colPos.Task).IndentLevel Then
            AlignCells cRng
            bTriggerDateCalculation = True
        End If
        GoTo last
    End If



    If cRng <> vbNullString And Cells(cRng.Row, colPos.ASD) = vbNullString And Cells(cRng.Row, colPos.AD) = vbNullString Then
        Cells(cRng.Row, colPos.AD) = 1
        Cells(cRng.Row, colPos.ASD) = cRng
    End If

    If cRng < csDate Or cRng > ceDate Then
        MsgBox "Enter a date between " & Format(csDate, "DD-MMM-YYYY") & " and " & Format(ceDate, "DD-MMM-YYYY")
        cRng = Cells(cRng.Row, colPos.ASD)
        bTriggerDateCalculation = True
        Exit Sub
    End If

    If cRng <> vbNullString And Cells(cRng.Row, colPos.ASD) <> vbNullString Then
        If cRng >= Cells(cRng.Row, colPos.AED) Then
            Cells(cRng.Row, colPos.AD) = GetWorkDaysFromDate(Cells(cRng.Row, colPos.ASD), Cells(cRng.Row, colPos.AED))
            Cells(cRng.Row, colPos.AD).HorizontalAlignment = xlRight
        Else
            Cells(cRng.Row, colPos.ASD) = vbNullString
        End If
    ElseIf cRng <> vbNullString And Cells(cRng.Row, colPos.ASD) = vbNullString And Cells(cRng.Row, colPos.AD) <> vbNullString Then
        Cells(cRng.Row, colPos.ASD) = CDate(GetStartFromWorkDays(Cells(cRng.Row, colPos.AED), Cells(cRng.Row, colPos.AD)))
    End If

last:
    AlignCells cRng
    bTriggerDateCalculation = True
    If Cells(cRowPos, colPos.ShowActualBar) Then bTriggerBarCreation = True
End Sub
Sub ShowOutofDatesMessage(Optional t As String)
    MsgBox "Enter a date between " & Format(csDate, "DD-MMM-YYYY") & " and " & Format(ceDate, "DD-MMM-YYYY")
End Sub
Sub Cell_ADChanged(ByVal cRng As Range)
    Dim tDate As Date
    If IsNumeric(cRng) = False Or cRng = vbNullString Or Cells(cRng.Row, colPos.Task) = sAddTaskPlaceHolder Then
        cRng = vbNullString
        If Cells(cRng.Row, colPos.Task).IndentLevel < Cells(cRng.Row + 1, colPos.Task).IndentLevel Then
            'bTriggerBarCreation = True
            bTriggerDateCalculation = True
        End If
        GoTo last
    End If



    If IsDate(Cells(cRng.Row, colPos.ASD)) Then
        tDate = CDate(GetEndDateFromWorkDays(Cells(cRng.Row, colPos.ASD), Cells(cRng.Row, colPos.AD)))
        If tDate < csDate Or tDate > ceDate Then
            ShowOutofDatesMessage
            Cells(cRng.Row, colPos.AD) = GetWorkDaysFromDate(Cells(cRng.Row, colPos.ASD), Cells(cRng.Row, colPos.AED))
        Else
            Cells(cRng.Row, colPos.AED) = tDate
        End If
    ElseIf IsDate(Cells(cRng.Row, colPos.AED)) Then
        tDate = CDate(GetStartFromWorkDays(Cells(cRng.Row, colPos.AED), Cells(cRng.Row, colPos.AD)))
        If tDate < csDate Or tDate > ceDate Then
            ShowOutofDatesMessage
            Cells(cRng.Row, colPos.AD) = GetWorkDaysFromDate(Cells(cRng.Row, colPos.ASD), Cells(cRng.Row, colPos.AED))
        Else
            Cells(cRng.Row, colPos.ASD) = tDate
        End If
    End If
last:
    AlignCells cRng
    bTriggerDateCalculation = True
    If Cells(cRowPos, colPos.ShowActualBar) Then bTriggerBarCreation = True
End Sub
Sub cell_BCSChanged(ByVal cRng As Range)
    If IsNumeric(cRng) = False Or cRng = vbNullString Then
        cRng = vbNullString
        GoTo last
    End If

last:
    AlignCells cRng
    bTriggerDateCalculation = True
End Sub
Sub Cell_ECSChanged(ByVal cRng As Range)
    If IsNumeric(cRng) = False Or cRng = vbNullString Then
        cRng = vbNullString
        GoTo last
    End If

last:
    AlignCells cRng
    bTriggerDateCalculation = True
End Sub
Sub cell_ACSChanged(ByVal cRng As Range)
    If IsNumeric(cRng) = False Or cRng = vbNullString Then
        cRng = vbNullString
        GoTo last
    End If

last:
    AlignCells cRng
    bTriggerDateCalculation = True
End Sub
Attribute VB_Name = "mGanttBars"
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit
Private bRestrict As Boolean
Private Const BarHeightRatioM As Double = 0.05
Private Const BarHeightRatioT As Double = 0.17
Private BarTextColNo As Long
Private bShowNamesOnBars As Boolean
Private vArrAllData()
Private vArrDatesValues()
Private lRowNo As Long
Function GetTimelineDateColumnNo(sRng As Range, sDate As Date, colNoIfNotFound As Long) As Long
    Dim i As Integer
    GetTimelineDateColumnNo = colNoIfNotFound

    For i = colPos.TimelineStart To colPos.TimelineEnd
        If sDate = vArrDatesValues(1, i) Then
            GetTimelineDateColumnNo = i
            Exit For
        End If
    Next
End Function
Sub AddScrollControl(Optional t As Boolean)
End Sub
Sub LoadDateValuesArray(Optional t As Boolean)
    ReDim vArrDatesValues(1 To 1, 1 To colPos.TimelineEnd)
    vArrDatesValues = Range(Cells(cTimelineDateRow, 1), Cells(cTimelineDateRow, colPos.TimelineEnd)).Value
End Sub
Sub AddGanttBarsForEachRow(Optional t As Boolean, Optional cRowOnly As Long)
    Dim tLocked As Boolean, bScreenUpdating As Boolean
    Dim bSingleRow As Boolean

    If cRowOnly > 0 Then bSingleRow = 1

    '###################################################################################################################
    If Cells(cRowPos, colPos.BarTextEnable) Then
        bShowNamesOnBars = True
        Dim r As Range
        On Error Resume Next
        Set r = ActiveSheet.Range("1:1")
        BarTextColNo = Application.WorksheetFunction.Match(Cells(cRowPos, colPos.BarTextDataColumnName), r.Value, 0)

        If BarTextColNo = 0 Then
            Cells(cRowPos, colPos.BarTextDataColumnName) = "Task"
            BarTextColNo = Application.WorksheetFunction.Match(Cells(cRowPos, colPos.BarTextDataColumnName), r.Value, 0)
        End If
        Set r = Nothing
        On Error GoTo 0
    Else
        bShowNamesOnBars = False
    End If
    '###################################################################################################################

    '  tLocked = ActiveSheet.ProtectContents

    '_olumns values to Start and End the Bars
    Dim ESCol As Long, EECol As Long
    Dim BSCol As Long, BECol As Long
    Dim ASCol As Long, AECol As Long
    Dim PSCol As Long, PECol As Long

    'Actual Values of Date from the columns
    Dim ESD As Date, EED As Date
    Dim BSD As Date, BED As Date
    Dim ASD As Date, AED As Date
    Dim TSD As Date, TED As Date

    Dim PED As Date, pCompleted As Double

    Dim tCol As Long
    Dim TWeekSD As Date, TWeekED As Date, TWeekPD As Date
    Dim TMonthSD As Date, TMonthED As Date, TMonthPD As Date
    Dim vType As String

    Dim lRow As Long, cRow As Long
    Dim ws As Worksheet, Sh As Shape
    Dim tRng As Range, tPos As Long, f As Range
    Dim sRng As Range, fRng As Range
    'Dim tdStart As Date, tdEnd As Date

    Dim bDrawBaselineBars As Boolean, bDrawActualBars As Boolean, bShowOverDueBars As Boolean

    Dim lZoomLevel As Long

    bScreenUpdating = Application.ScreenUpdating
    If bScreenUpdating Then Application.ScreenUpdating = False
    lZoomLevel = ActiveWindow.Zoom
    ActiveWindow.Zoom = 100

    Set ws = ActiveSheet
    Set sRng = ws.Range(ws.Cells(cTimelineDateRow, colPos.TimelineStart), ws.Cells(cTimelineDateRow, colPos.TimelineEnd))

    'If t Then UnLockSheet ws
    ' UnLockSheet ws
    vType = ws.Cells(cRowPos, colPos.CurrentView)
    lRow = GetLastTaskRowNo - 2
    lRowNo = lRow
    Application.ScreenUpdating = True
    If bSingleRow = 0 Then
        DeleteShapesInSheet
    End If
    Application.ScreenUpdating = False
    'Read timeline start and end limits
    TSD = Cells(cTimelineDateRow, colPos.TimelineStart)
    If vType = "D" Then
        TED = Cells(cTimelineDateRow, colPos.TimelineEnd)
    ElseIf vType = "W" Then
        TED = Cells(cTimelineDateRow, colPos.TimelineEnd) + 6
    ElseIf vType = "M" Then
        TED = DateAdd("M", 1, Cells(cTimelineDateRow, colPos.TimelineEnd)) - 1
    ElseIf vType = "Q" Then
        TED = DateAdd("M", 3, Cells(cTimelineDateRow, colPos.TimelineEnd)) - 1
    ElseIf vType = "H" Then
        TED = DateAdd("M", 6, Cells(cTimelineDateRow, colPos.TimelineEnd)) - 1
    ElseIf vType = "Y" Then
        TED = DateAdd("Y", 1, Cells(cTimelineDateRow, colPos.TimelineEnd)) - 1
    End If

    bRestrict = RestrictThisInTrial
    bDrawBaselineBars = ws.Cells(cRowPos, colPos.ShowBaselineBar)
    bDrawActualBars = ws.Cells(cRowPos, colPos.ShowActualBar)
    bShowOverDueBars = ws.Cells(cRowPos, colPos.ShowOverdueBar)

    'Add Bar for each Row
    'Ignore Sections
    Dim bRow As Long
    If bSingleRow Then
        bRow = cRowOnly
        lRow = bRow
    Else
        bRow = cHeaderRow + 1
    End If
    ReDim vArrAllData(1 To lRowNo, 1 To colPos.TimelineStart - 1)
    vArrAllData = Range(Cells(1, 1), Cells(lRowNo, colPos.TimelineStart - 1)).FormulaLocal
    LoadDateValuesArray
    For cRow = bRow To lRow
        ESCol = 0: EECol = 0: PECol = 0: pCompleted = 0
        BSCol = 0: BECol = 0
        ASCol = 0: AECol = 0

        If vArrAllData(cRow, colPos.tType) <> vbNullString Then

            'Estimated Bar Calculation
            If vArrAllData(cRow, colPos.ESD) <> vbNullString And vArrAllData(cRow, colPos.EED) <> vbNullString Then
                ESD = vArrAllData(cRow, colPos.ESD)
                EED = vArrAllData(cRow, colPos.EED)

                If vType = "W" Then
                    ESD = GetWeekStartDateActuals(ESD)
                    EED = GetWeekStartDateActuals(EED)
                ElseIf vType = "M" Then
                    ESD = DateSerial(Year(ESD), Month(ESD), 1)
                    EED = DateSerial(Year(EED), Month(EED), 1)
                ElseIf vType = "Q" Then
                    ESD = GetQuarterStartDate(ESD)
                    EED = GetQuarterStartDate(EED)
                ElseIf vType = "H" Then
                    ESD = GetHalfYearStartDate(ESD)
                    EED = GetHalfYearStartDate(EED)
                ElseIf vType = "Y" Then
                    ESD = GetYearStartDate(ESD)
                    EED = GetYearStartDate(EED)
                End If

                '% Complete
                If vArrAllData(cRow, colPos.tType) <> "M" Then
                    pCompleted = vArrAllData(cRow, colPos.PercentageCompleted)    '.Value
                End If

                If ESD <= TED And EED >= TSD Then
                    ESCol = GetTimelineDateColumnNo(sRng, ESD, colPos.TimelineStart)
                    EECol = GetTimelineDateColumnNo(sRng, EED, colPos.TimelineEnd)

                    If bShowOverDueBars And CDate(vArrAllData(cRow, colPos.EED)) < Date And pCompleted < 1 And vArrAllData(cRow, colPos.tType) = "T" Then
                        AddGanttBarForRow ws, cRow, ESCol, EECol, PECol, pCompleted, "E", colPos.TColor, colPos.TColor, bShowOverDueBars
                    Else
                        AddGanttBarForRow ws, cRow, ESCol, EECol, PECol, pCompleted, "E", colPos.TColor, colPos.TColor
                    End If
                End If
            End If

            'Baseline Bar Calculation
            If bDrawBaselineBars Then
                If vArrAllData(cRow, colPos.BSD) <> vbNullString And vArrAllData(cRow, colPos.BED) <> vbNullString Then
                    pCompleted = 0
                    BSD = vArrAllData(cRow, colPos.BSD)
                    BED = vArrAllData(cRow, colPos.BED)

                    If vType = "W" Then
                        BSD = GetWeekStartDateActuals(BSD)
                        BED = GetWeekStartDateActuals(BED)
                    ElseIf vType = "M" Then
                        BSD = DateSerial(Year(BSD), Month(BSD), 1)
                        BED = DateSerial(Year(BED), Month(BED), 1)
                    ElseIf vType = "Q" Then
                        BSD = GetQuarterStartDate(BSD)
                        BED = GetQuarterStartDate(BED)
                    ElseIf vType = "H" Then
                        BSD = GetHalfYearStartDate(BSD)
                        BED = GetHalfYearStartDate(BED)
                    ElseIf vType = "Y" Then
                        BSD = GetYearStartDate(BSD)
                        BED = GetYearStartDate(BED)
                    End If

                    If BSD <= TED And BED >= TSD Then
                        BSCol = GetTimelineDateColumnNo(sRng, BSD, colPos.TimelineStart)
                        BECol = GetTimelineDateColumnNo(sRng, BED, colPos.TimelineEnd)

                        AddGanttBarForRow ws, cRow, BSCol, BECol, PECol, pCompleted, "B", colPos.BLColor, colPos.BLColor
                    End If
                End If
            End If

            'Actual Bar Calculation
            If bDrawActualBars Then
                If vArrAllData(cRow, colPos.ASD) <> vbNullString And ws.Cells(cRow, colPos.AED) <> vbNullString Then
                    pCompleted = 0
                    ASD = vArrAllData(cRow, colPos.ASD)
                    AED = vArrAllData(cRow, colPos.AED)

                    If vType = "W" Then
                        ASD = GetWeekStartDateActuals(ASD)
                        AED = GetWeekStartDateActuals(AED)
                    ElseIf vType = "M" Then
                        ASD = DateSerial(Year(ASD), Month(ASD), 1)
                        AED = DateSerial(Year(AED), Month(AED), 1)
                    ElseIf vType = "Q" Then
                        ASD = GetQuarterStartDate(ASD)
                        AED = GetQuarterStartDate(AED)
                    ElseIf vType = "H" Then
                        ASD = GetHalfYearStartDate(ESD)
                        AED = GetHalfYearStartDate(EED)
                    ElseIf vType = "Y" Then
                        AED = GetYearStartDate(ASD)
                        AED = GetYearStartDate(AED)
                    End If

                    If ASD <= TED And AED >= TSD Then
                        ASCol = GetTimelineDateColumnNo(sRng, ASD, colPos.TimelineStart)
                        AECol = GetTimelineDateColumnNo(sRng, AED, colPos.TimelineEnd)

                        AddGanttBarForRow ws, cRow, ASCol, AECol, PECol, pCompleted, "A", colPos.ACColor, colPos.ACColor
                    End If
                End If
            End If
        End If


    Next cRow

    DrawDependencies

    AddLineForToday ws

    If t Or tLocked Then LockSheet ws

    bRestrict = False

    ActiveWindow.Zoom = lZoomLevel
    Application.ScreenUpdating = bScreenUpdating
    ReDim vArrAllData(1, 1)
End Sub

Sub AddGanttBarForRow(ByVal ws As Worksheet, ByVal cRow As Long, ByVal sCol As Long, ByVal eCol As Long, ByVal wCol As Long, _
                      ByVal pCompleted As Double, sBarType As String, MainColorCol As Long, RowColorCol As Long, Optional bShowOverDueBar As Boolean)
rungsschk
If vArrAllData(cRow, colPos.tType) = "M" Then
    AddMilestoneIcon ws, cRow, eCol, sBarType, MainColorCol, RowColorCol
    GoTo last
End If
Dim s As Shape, bParentTask As Boolean
Dim pLeft As Double, pWidth As Double, pTop As Double, pHeight As Double
Dim c As Range
Dim lRow As Long, depcount As Long


Dim lheightFactor As Double, lheightFactorOthers As Double
lheightFactor = BarHeightRatioT: lheightFactorOthers = 0.35

Set c = ws.Cells(cRow, sCol)
lRow = GetLastTaskRowNo - 2
depcount = WorksheetFunction.CountA(Range(Cells(cHeaderRow, colPos.tDependency), Cells(lRow, colPos.tDependency)))

If depcount < 2 Or Cells(cRowPos, colPos.ShowDependencyConnector) <> True Then
    pWidth = 0.5
Else
pWidth = 5
    End If
pLeft = c.Left + pWidth
    
If depcount < 2 Or Cells(cRowPos, colPos.ShowDependencyConnector) <> True Then
'pWidth = ws.Range(c, ws.Cells(cRow, eCol)).Width - (pWidth * 1.5)
pWidth = ws.Range(c, ws.Cells(cRow, eCol)).Width - (pWidth)
Else
pWidth = ws.Range(c, ws.Cells(cRow, eCol)).Width - (pWidth * 2)
'pWidth = ws.Range(c, ws.Cells(cRow, eCol)).Width - (pWidth)
End If
    pHeight = c.Height * lheightFactor
    pTop = c.Top + pHeight
    pHeight = c.Height - (pHeight * 2)

    If sBarType = "B" Then
        pHeight = pHeight * lheightFactorOthers
    ElseIf sBarType = "A" Then
        pTop = pTop + (pHeight * (1 - lheightFactorOthers))
        pHeight = pHeight * lheightFactorOthers
    End If

    bParentTask = IsParentTask(cRow)

    If bParentTask Then
        Set s = ws.Shapes.AddShape(Type:=msoShapeLeftRightArrow, Left:=pLeft, Top:=pTop, Width:=pWidth, Height:=pHeight)
    Else
        Set s = ws.Shapes.AddShape(Type:=msoShapeRectangle, Left:=pLeft, Top:=pTop, Width:=pWidth, Height:=pHeight)
    End If

    With s
        .Name = "S_" & sBarType & "_" & vArrAllData(cRow, colPos.tid)
        .Line.visible = msoFalse
        With .Fill
            .visible = msoTrue
            If bRestrict = True And cRow > 14 Then
                .ForeColor.RGB = RGB(220, 220, 220)
                .Solid
            Else
                If bShowOverDueBar Then
                    .ForeColor.RGB = gss.Range("AE6").Interior.Color
                Else
                    .ForeColor.RGB = Cells(cRow, RowColorCol).Interior.Color
                End If
                .Solid
            End If
        End With
    End With

    If pCompleted > 0 Then
        pWidth = pWidth * pCompleted

        If bParentTask Then
            Set s = ws.Shapes.AddShape(Type:=msoShapeLeftRightArrow, Left:=pLeft, Top:=pTop, Width:=pWidth, Height:=pHeight)
        Else
            Set s = ws.Shapes.AddShape(Type:=msoShapeRectangle, Left:=pLeft, Top:=pTop, Width:=pWidth, Height:=pHeight)
        End If

        With s
            .Name = "S_C_" & vArrAllData(cRow, colPos.tid)
            .Line.visible = msoFalse
            With s.Fill
                If bRestrict = True And cRow > 14 Then
                    .ForeColor.RGB = RGB(180, 180, 180)
                    .Solid
                Else
                    .ForeColor.RGB = Cells(cRow, colPos.TPColor).Interior.Color
                    .Solid
                End If
            End With
        End With
    End If


last:
    If bShowNamesOnBars And sBarType = "E" Then AddTaskNameOnBar ws, cRow, sCol, eCol, wCol, pCompleted
    Set s = Nothing
End Sub

Sub AddTaskNameOnBar(ByVal ws As Worksheet, ByVal cRow As Long, ByVal sCol As Long, ByVal eCol As Long, ByVal wCol As Long, Optional ByVal pCompleted As Double)
rungsschk
    Dim s As Shape
    Dim pLeft As Double, pWidth As Double, pTop As Double, pHeight As Double
    Dim lheightFactor As Double
    lheightFactor = BarHeightRatioT
    pLeft = ws.Cells(cRow, sCol).Left
    pTop = ws.Cells(cRow, sCol).Top + (lheightFactor * ws.Cells(cRow, sCol).Height)
    pWidth = ws.Range(ws.Cells(cRow, sCol), ws.Cells(cRow, eCol)).Width
    pHeight = ws.Cells(cRow, sCol).Height - (ws.Cells(cRow, sCol).Height * lheightFactor * 2)
    pLeft = ws.Cells(cRow, sCol).Left + (ws.Cells(cRow, sCol).Width / 3)
    pWidth = Cells(cHeaderRow, colPos.TimelineEnd).Left + Cells(cHeaderRow, colPos.TimelineEnd).Width - pLeft
    Set s = ws.Shapes.AddShape(Type:=msoShapeRectangle, Left:=pLeft, Top:=pTop, Width:=pWidth, Height:=pHeight)
    With s
        .Name = "S_T_" & vArrAllData(cRow, colPos.tid)
        .Line.visible = msoFalse
        .Fill.visible = msoFalse
        If Cells(cRow, BarTextColNo).NumberFormat <> "General" Then
            .TextFrame.Characters.Text = Format(Cells(cRow, BarTextColNo).Value2, Cells(cRow, BarTextColNo).NumberFormat)
        Else
            .TextFrame.Characters.Text = Left(Cells(cRow, BarTextColNo).Value2, Cells(cRowPos, colPos.BarTextCharacters))
        End If

        With .TextFrame.Characters.Font

            .Color = gss.Range("AR6").Interior.Color
            .size = CLng(Cells(cRowPos, colPos.BarTextFontSize))

            .Bold = CBool(Cells(cRowPos, colPos.BarTextIsBold))
            .Italic = CBool(Cells(cRowPos, colPos.BarTextIsItalic))

            If Cells(cRowPos, colPos.BarTextIsUnderline) Then
                .Underline = xlUnderlineStyleSingle
            Else
                .Underline = xlUnderlineStyleNone
            End If

        End With
        .TextFrame.VerticalAlignment = xlVAlignCenter
        .TextFrame.HorizontalAlignment = xlHAlignLeft
    End With
    Set s = Nothing
End Sub
Sub AddLineForToday(ByVal ws As Worksheet, Optional ByVal cPos As Long, Optional t As Boolean)
rungsschk
    On Error Resume Next
    t = ActiveSheet.ProtectContents
    If Left(Application.Version, 2) = "12" Then UnLockSheet ws
    If Cells(cRowPos, colPos.ShowTodayLines) = False Then
        ws.Shapes("S_Today_LineLeft").Delete
        ws.Shapes("S_Today_LineRight").Delete
        On Error GoTo 0
        GoTo last
    End If
    Dim Sh As Shape, lRow As Long, r As Range
    Dim pLeft As Double, pWidth As Double, pTop As Double, pHeight As Double
    Dim lSOffset As Long, lEoffset As Long, tDate As Date
    Dim vType As String, f As Range, tRng As Range
    ws.Shapes("S_Today_LineLeft").Delete
    ws.Shapes("S_Today_LineRight").Delete
    Set tRng = ws.Range(ws.Cells(cTimelineDateRow, colPos.TimelineStart), ws.Cells(cTimelineDateRow, colPos.TimelineEnd))
    vType = ws.Cells(cRowPos, colPos.CurrentView)
    If vType = "D" Then
        tDate = Date
    ElseIf vType = "W" Then
        tDate = GetWeekStartDateActuals(Date)
    ElseIf vType = "M" Then
        tDate = CDate(DateSerial(Year(Date), Month(Date), 1))
    ElseIf vType = "Q" Then
        tDate = CDate(GetQuarterStartDate(Date))
    ElseIf vType = "H" Then
        tDate = CDate(GetHalfYearStartDate(Date))
    ElseIf vType = "Y" Then
        tDate = CDate(GetYearStartDate(Date))
    End If
    LoadDateValuesArray
    cPos = GetTimelineDateColumnNo(tRng, tDate, 0)
    If cPos = 0 Then
        GoTo last
    End If
    lRow = Cells(Cells.Rows.Count, colPos.Task).End(xlUp).Row - 1
    If lRow = cHeaderRow Then Exit Sub
    Set r = Cells(cHeaderRow, cPos)
    If cPos = colPos.TimelineStart Then lSOffset = 0.6
    If cPos = colPos.TimelineEnd Then lEoffset = 0.6
    Set Sh = ws.Shapes.AddShape(Type:=msoConnectorStraight, Left:=r.Left + lSOffset, Top:=r.Offset(1, 0).Top, Width:=0.1, Height:=Cells(lRow + 1, cPos).Top - r.Offset(1, 0).Top)
    Sh.Name = "S_Today_LineLeft"
    Sh.ZOrder msoBringToFront
    With Sh.Line
        .visible = msoTrue
        .ForeColor.RGB = gss.Range("AG6").Interior.Color
        .weight = 0.1
    End With
    Set Sh = ws.Shapes.AddShape(Type:=msoConnectorStraight, Left:=r.Left + r.Width - lEoffset, Top:=r.Offset(1, 0).Top, Width:=0.1, Height:=Cells(lRow + 1, cPos).Top - r.Offset(1, 0).Top)
    Sh.Name = "S_Today_LineRight"
    Sh.ZOrder msoBringToFront
    With Sh.Line
        .visible = msoTrue
        .ForeColor.RGB = gss.Range("AG6").Interior.Color
        .weight = 0.1
    End With
    ResetHeaderRowColors
last:
    If t Then LockSheet ws
    Set Sh = Nothing
    Set r = Nothing
    On Error GoTo 0
End Sub
Sub DeleteShapesInSheet(Optional t As String)
    Dim Sh As Shape
    'Delete All Old Shapes
    If Left(Application.Version, 2) = "12" Then UnLockSheet ActiveSheet
    For Each Sh In ActiveSheet.Shapes
        If UCase(Left(Sh.Name, 2)) = "S_" Then Sh.Delete
    Next Sh
End Sub

Sub DrawDependencies(Optional t As Boolean)
rungsschk
    If Cells(cRowPos, colPos.ShowDependencyConnector) = 0 Then Exit Sub
    Dim lRow As Long, dcount As Long
    lRow = GetLastTaskRowNo - 2
    dcount = WorksheetFunction.CountA(Range(Cells(cHeaderRow, colPos.tDependency), Cells(lRow, colPos.tDependency)))
    If dcount < 2 Then Exit Sub
    Dim cRow As Long, vStr As Variant, dStr As Variant, i As Long
    Dim dShFrom As Shape, dShTo As Shape
    Dim dIDFrom As Long, dIDTo As Long
    Dim dType As String
    Dim dSh As Shape, ws As Worksheet
    cRow = cHeaderRow + 1
    Set ws = ActiveSheet
    dcount = dcount - 1
    Do Until dcount = 0
        If vArrAllData(cRow, colPos.tDependency) <> vbNullString Then
            dcount = dcount - 1
            vStr = Split(vArrAllData(cRow, colPos.tDependency), sDependencySeperator)
            For i = 0 To UBound(vStr) - 1
                dStr = Split(vStr(i), "_")
                dType = dStr(1)
                dIDFrom = dStr(0)
                dIDTo = vArrAllData(cRow, colPos.tid)
                On Error Resume Next
                Set dShFrom = Nothing: Set dShTo = Nothing
                Set dShFrom = ws.Shapes("S_E_" & dIDFrom)
                Set dShTo = ws.Shapes("S_E_" & dIDTo)
                On Error GoTo 0
                If dShFrom Is Nothing Or dShTo Is Nothing Then GoTo NextRow
                Set dSh = ws.Shapes.AddConnector(msoConnectorElbow, 1, 1, 1, 1)
                dSh.Name = "S_C_" & dType & "_" & dIDFrom & "_" & dIDTo
                dSh.ShapeStyle = msoLineStylePreset1
                dSh.Line.ForeColor.RGB = gss.Range("AF6").Interior.Color
                dSh.ZOrder msoSendToBack
                With dSh.Line
                    .BeginArrowheadLength = msoArrowheadLengthMedium
                    .BeginArrowheadWidth = msoArrowheadWidthMedium
                    .BeginArrowheadStyle = msoArrowheadNone
                    .EndArrowheadLength = msoArrowheadShort
                    .EndArrowheadWidth = msoArrowheadNarrow
                    .EndArrowheadStyle = msoArrowheadTriangle
                End With
                With dSh.ConnectorFormat
                    If IsParentTask(Range(Cells(1, colPos.tid), Cells(65536, colPos.tid)).Find(dIDFrom, , xlFormulas, xlWhole).Row) Then
                        Select Case dType
                        Case Is = "FS"
                            .BeginConnect dShFrom, 8: .EndConnect dShTo, 2
                        Case Is = "SS"
                            .BeginConnect dShFrom, 4: .EndConnect dShTo, 2
                        Case Is = "SF"
                            .BeginConnect dShFrom, 4: .EndConnect dShTo, 4
                        Case Is = "FF"
                            .BeginConnect dShFrom, 8: .EndConnect dShTo, 4
                        End Select
                    Else
                        Select Case dType
                        Case Is = "FS"
                            .BeginConnect dShFrom, 4: .EndConnect dShTo, 2
                        Case Is = "SS"
                            .BeginConnect dShFrom, 2: .EndConnect dShTo, 2
                        Case Is = "SF"
                            .BeginConnect dShFrom, 2: .EndConnect dShTo, 4
                        Case Is = "FF"
                            .BeginConnect dShFrom, 4: .EndConnect dShTo, 4
                        End Select
                    End If
                End With
NextRow:
            Next
        End If
        cRow = cRow + 1
    Loop
End Sub


Sub AddMilestoneIcon(ByVal ws As Worksheet, ByVal cRow As Long, ByVal sCol As Long, sBarType As String, MainColorCol As Long, RowColorCol As Long)
    Dim s As Shape
    Dim pLeft As Double, pWidth As Double, pTop As Double, pHeight As Double
    Dim lheightFactor As Double
    lheightFactor = 0.15


    pTop = ws.Cells(cRow, sCol).Top + (lheightFactor * ws.Cells(cRow, sCol).Height)
    pHeight = ws.Cells(cRow, sCol).Height - (ws.Cells(cRow, sCol).Height * lheightFactor * 2)
    pWidth = pHeight
    pLeft = ws.Cells(cRow, sCol).Left + ((ws.Cells(cRow, sCol).Width - pWidth) / 2)

    Set s = ws.Shapes.AddShape(Type:=msoShapeFlowchartDecision, Left:=pLeft, Top:=pTop, Width:=pWidth, Height:=pHeight)

    s.Name = "S_" & sBarType & "_" & Cells(cRow, colPos.tid)
    s.Line.visible = msoFalse

    With s.Fill
        .visible = msoTrue

        If bRestrict = True And cRow > 14 Then
            .ForeColor.RGB = RGB(210, 210, 210)
            .Solid
        Else
            .ForeColor.RGB = Cells(cRow, RowColorCol).Interior.Color
            .Solid
        End If

    End With

End Sub



Attribute VB_Name = "mIndents"
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit
Public bReDrawDependencies As Boolean
Sub MakeTaskParent(Optional tStop As Boolean)
    If ActiveSheet.AutoFilterMode Or _
       (Cells(cRowPos, colPos.ShowCompleted) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0 Or Cells(cRowPos, colPos.ShowPlanned) = 0) Then
        MsgBox "You cannot make a task parent when the filter mode is enabled", vbInformation, "Information"
        Exit Sub
    End If
    If tStop = False Then DisableAll
    Dim rSel As Range, cRng As Range, ir As Long
    Dim bIndentedTasks As Boolean
    Dim iLvl As Integer, tiLvl As Integer
    Dim selRowsCount As Long, bMsg As Boolean
    Set rSel = Selection
    selRowsCount = rSel.Rows.Count

    For ir = selRowsCount To 1 Step -1
        Set cRng = rSel.Rows(ir)
        iLvl = Cells(cRng.Row, colPos.Task).IndentLevel
        tiLvl = Cells(cRng.Row + 1, colPos.Task).IndentLevel
        If Cells(cRng.Row, colPos.tType) = "M" And (iLvl - 1 < tiLvl) Then
            bMsg = True
        Else
            If Cells(cRng.Row, colPos.Task).IndentLevel >= 1 And Cells(cRng.Row, colPos.tType) <> vbNullString Then
                ResetParentCosts cRng.Row
                Cells(cRng.Row, colPos.Task).IndentLevel = Cells(cRng.Row, colPos.Task).IndentLevel - 1
                bIndentedTasks = True
            End If
        End If
    Next ir
last:
    If bMsg Then MsgBox "Milestones cannot be set as parent tasks", vbInformation, "Gantt Excel"
    If bIndentedTasks Then
        WBSNumbering
        RemoveDpendenciesOnTaskParent rSel.Row
        HighlightParentTasks
        CalculateStartEndConstrainsAllRows
        PopulateSectionDates
        mRefreshTimeline
    End If
    bReDrawDependencies = False
    Set rSel = Nothing: Set cRng = Nothing
    If tStop = False Then EnableAll
End Sub
Sub MakeTaskChild(Optional tStop As Boolean)
    If ActiveSheet.AutoFilterMode Or _
       (Cells(cRowPos, colPos.ShowCompleted) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0 Or Cells(cRowPos, colPos.ShowPlanned) = 0) Then
        MsgBox "You cannot make a task child when the filter mode is enabled", vbInformation, "Information"
        Exit Sub
    End If
    If tStop = False Then DisableAll
    Dim rSel As Range, cRng As Range, ir As Long, tRng As Range
    Dim bIndentedTasks As Boolean
    Dim iLvl As Integer, tiLvl As Integer
    Dim selRowsCount As Long, bMsg As Boolean
    Set rSel = Selection
    selRowsCount = rSel.Rows.Count
    For ir = 1 To selRowsCount
        Set cRng = rSel.Rows(ir)
        If cRng.Row = cHeaderRow + 1 Then GoTo nextir
        Set tRng = cRng.Offset(-1, 0)
        iLvl = Cells(cRng.Row, colPos.Task).IndentLevel
        tiLvl = Cells(tRng.Row, colPos.Task).IndentLevel

        If Cells(tRng.Row, colPos.tType) = "M" And (iLvl + 1 > tiLvl) Then
            bMsg = True
        Else
            If tiLvl >= 0 And (iLvl - tiLvl) <> 1 And Cells(cRng.Row, colPos.tType) <> vbNullString Then
                Cells(cRng.Row, colPos.Task).IndentLevel = iLvl + 1
                bIndentedTasks = True
            End If
        End If
nextir:
    Next ir
last:
    If bMsg Then MsgBox "Milestones cannot have child tasks", vbInformation, "Gantt Excel"

    If bIndentedTasks Then
        'if current is child task and the previous is a parent of this

        If Cells(rSel.Row, colPos.Task).IndentLevel > Cells(rSel.Row - 1, colPos.Task).IndentLevel Then
            'If The parent task above is being driven then remove it
            If Cells(rSel.Row - 1, colPos.tDependency) <> vbNullString And rSel.Row - 1 <> cHeaderRow And Cells(rSel.Row, colPos.tDependency) = vbNullString Then
                RemoveDependenciesOnTaskChild rSel.Row - 1, True
            End If
        End If
        WBSNumbering
        RemoveDependenciesOnTaskChild rSel.Row
        PopulateSectionDates , rSel.Cells(rSel.Rows.Count, 1).Row
        HighlightParentTasks rSel.Cells(rSel.Rows.Count, 1).Row
        Set rSel = Nothing: Set cRng = Nothing
        mRefreshTimeline
    End If
    bReDrawDependencies = False
    If tStop = False Then EnableAll
End Sub

Sub WBSNumbering(Optional t As Boolean)
    If (Cells(cRowPos, colPos.ShowCompleted) = 0 Or Cells(cRowPos, colPos.ShowPlanned) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0) Then Exit Sub
    On Error Resume Next
    Dim r As Long, bLocked As Boolean
    Dim cIndent As Long, i As Long, j As Long
    Dim arrWBS() As Long, WBS As String
    r = cHeaderRow + 1
    i = 0
    ReDim arrWBS(0 To 0) As Long
    DisableAll
    Columns(colPos.WBS).NumberFormat = "@"
    Do While Cells(r, colPos.tType) <> vbNullString
        If Cells(r, colPos.Task) <> vbNullString Then
            cIndent = Cells(r, colPos.Task).IndentLevel
            If cIndent = 0 Then
                i = i + 1
                WBS = CStr(i)
                ReDim arrWBS(0 To 0)
            Else
                ReDim Preserve arrWBS(0 To cIndent) As Long
                cIndent = cIndent - 1
                If arrWBS(cIndent) <> 0 Then
                    arrWBS(cIndent) = arrWBS(cIndent) + 1
                Else
                    arrWBS(cIndent) = 1
                End If
                If arrWBS(cIndent + 1) <> 0 Then
                    For j = cIndent + 1 To UBound(arrWBS)
                        arrWBS(j) = 0
                    Next j
                End If

                WBS = CStr(i)
                For j = 0 To cIndent
                    WBS = WBS & "." & CStr(arrWBS(j))
                Next j
            End If
            Cells(r, colPos.WBS).Value = WBS
            If InStr(1, WBS, ".0") > 0 Then
                Cells(r, colPos.Task).IndentLevel = Cells(r, colPos.Task).IndentLevel - 1
                Cells(r, colPos.WBS).Value = Replace(WBS, ".0", vbNullString)
            End If
            Cells(r, colPos.WBS).Errors(xlNumberAsText).Ignore = True
        End If
NextRow:
        r = r + 1
    Loop
    On Error GoTo 0
    Range(Cells(cHeaderRow, colPos.WBS), Cells(GetLastTaskRowNo - 2, colPos.WBS)).Columns.AutoFit
    GenerateOutLineGroups
End Sub

Sub MoveTaskUp(Optional t As Boolean)

    If ActiveSheet.AutoFilterMode Or _
       (Cells(cRowPos, colPos.ShowCompleted) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0 Or Cells(cRowPos, colPos.ShowPlanned) = 0) Then

        MsgBox "You cannot move tasks when the filter mode is enabled", vbInformation, "Information"
        Exit Sub
    End If
    If Selection.Cells.Rows.Count > 1 Then
        MsgBox "You can move only one task or milestone at a time.", vbInformation, "Information"
        Exit Sub
    End If

    If Cells(Selection.Row, colPos.tType) = vbNullString Then Exit Sub
    If Selection.Row <= cHeaderRow + 1 Then Exit Sub
    If Cells(Selection.Row, colPos.Task).IndentLevel = 1 And Cells(Selection.Row - 1, colPos.Task).IndentLevel = 0 Then Exit Sub
    If Cells(Selection.Row, colPos.Task).IndentLevel > Cells(Selection.Row - 1, colPos.Task).IndentLevel Then Exit Sub


    If IsDataCollapsed = True Then
        Exit Sub
    End If

    Dim r As Range, cLevel As Long
    Dim tlrow As Long, iRow As Long

    Set r = Selection

    cLevel = Cells(r.Row, colPos.Task).IndentLevel

    'Find if selection has sub tasks
    If cLevel < Cells(r.Row + 1, colPos.Task).IndentLevel Then
        'Has SubTasks, Find last row where this parent task ends
        tlrow = r.Row + 1
        Do Until Cells(tlrow, colPos.tType) = vbNullString
            If Cells(tlrow, colPos.Task).IndentLevel <= cLevel Then
                Exit Do
            End If
            tlrow = tlrow + 1
        Loop
        tlrow = tlrow - 1
    Else
        tlrow = r.Row
    End If

    'Find the row where the selected task has to be cut and pasted
    iRow = r.Row - 1
    Do Until Cells(iRow, colPos.Task).IndentLevel <= cLevel Or Cells(iRow, colPos.Task).IndentLevel = 0
        iRow = iRow - 1
    Loop


    Dim sArr() As Double, fArr() As Double, p As Long, k As Long
    ReDim sArr(1 To tlrow - r.Row + 1)
    ReDim fArr(1 To iRow + tlrow - r.Row + 1)
    DisableAll
    ' UnLockSheet ActiveSheet
    k = 1
    For p = r.Row To tlrow
        sArr(k) = Rows(p).RowHeight
        k = k + 1
    Next p

    'Range(Cells(r.Row, colPos.tType), Cells(tlrow, colPos.TimelineMaxEnd)).Cut
    Rows(r.Row & ":" & tlrow).Cut

    k = 1
    For p = iRow To (iRow + tlrow - r.Row)
        fArr(k) = Rows(p).RowHeight
        k = k + 1
    Next p

    'Range(Cells(iRow, colPos.tType), Cells(iRow, colPos.TimelineMaxEnd)).Insert Shift:=xlDown
    Rows(iRow).Insert Shift:=xlDown


    'PopulateSectionDates
last:
    AddLineForToday ActiveSheet, 0, True
    ' SetTodayLinesOnTop
    Application.CutCopyMode = False
    ReNunmberSerials ActiveSheet
LastEnd:
    mRefreshTimeline
    LockSheet ActiveSheet
    EnableAll
    r.Select
    Set r = Nothing
End Sub
Sub MoveTaskDown(Optional t As Boolean)

    If ActiveSheet.AutoFilterMode Or _
       (Cells(cRowPos, colPos.ShowCompleted) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0 Or Cells(cRowPos, colPos.ShowPlanned) = 0) Then
        MsgBox "You cannot move tasks when the filter mode is enabled", vbInformation, "Information"
        Exit Sub
    End If

    If Selection.Cells.Rows.Count > 1 Then
        MsgBox "You can move only one task at a time.", vbInformation, "Information"
        Exit Sub
    End If

    If Cells(Selection.Row + 1, colPos.Task) = sAddTaskPlaceHolder Then Exit Sub
    If Cells(Selection.Row, colPos.tType) = vbNullString Then Exit Sub
    If Selection.Row <= cHeaderRow Then Exit Sub
    'If Cells(Selection.Row, colPos.Task).IndentLevel < Cells(Selection.Row + 1, colPos.Task).IndentLevel Then Exit Sub

    If IsDataCollapsed = True Then
        Exit Sub
    End If


    Dim r As Range, cLevel As Long
    Dim tlrow As Long, iRow As Long

    Set r = Selection
    cLevel = Cells(r.Row, colPos.Task).IndentLevel

    'Find if selection has sub tasks
    If cLevel < Cells(r.Row + 1, colPos.Task).IndentLevel Then
        'Has SubTasks, Find last row where this parent task ends
        tlrow = r.Row + 1
        Do Until Cells(tlrow, colPos.tType) = vbNullString
            If Cells(tlrow, colPos.Task).IndentLevel <= cLevel Then
                Exit Do
            End If
            tlrow = tlrow + 1
        Loop
        tlrow = tlrow - 1
    Else
        tlrow = r.Row
    End If

    'Section is selected to be moved down and this is the last section , so no movement needed
    If Cells(tlrow + 1, colPos.tType) = vbNullString And Cells(r.Row, colPos.tType) <> vbNullString Then Exit Sub
    If Cells(tlrow + 1, colPos.Task).IndentLevel <> cLevel Then Exit Sub


    'tlRow+1 is the position where we may have to move the above task, _
     'But as tlrow+1 may have sub tasks, we need to find the last subtask row of tlrow+1
    iRow = tlrow + 1
    If Cells(iRow, colPos.Task).IndentLevel < Cells(iRow + 1, colPos.Task).IndentLevel Then
        'has subtasks
        'Loop this last subtask
        iRow = iRow + 1
        Do Until Cells(iRow, colPos.tType) = vbNullString
            If Cells(iRow, colPos.Task).IndentLevel <= Cells(tlrow + 1, colPos.Task).IndentLevel Then
                Exit Do
            End If
            iRow = iRow + 1
        Loop
    Else
        iRow = tlrow + 2
    End If

    DisableAll
    Rows(r.Row & ":" & tlrow).Cut
    Rows(iRow).Insert Shift:=xlDown

    PopulateSectionDates

last:

    Application.CutCopyMode = False
    AddLineForToday ActiveSheet, 0, True

    ReNunmberSerials ActiveSheet
LastEnd:
    mRefreshTimeline
    LockSheet ActiveSheet
    EnableAll
    r.Select
    Set r = Nothing
End Sub

Sub DeleteTasks(Optional t As Boolean)
    If Selection.Rows.Count > 1 Then
        MsgBox "Select only one task or milestone to delete it", vbInformation, "Information"
        GoTo last
    End If

    If Cells(Selection.Row, colPos.tType) = vbNullString Or Selection.Row <= cHeaderRow Then
        MsgBox "Select a task or milestone to delete it", vbInformation, "Information"
        GoTo last
    End If

    If ActiveSheet.AutoFilterMode Or _
       (Cells(cRowPos, colPos.ShowCompleted) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0 Or Cells(cRowPos, colPos.ShowPlanned) = 0) Then

        MsgBox "You cannot delete a task when Filter mode is on", vbInformation, "Information"
        GoTo last
    End If

    If MsgBox("Are you sure you want to permanently delete the selected task and all its child tasks if any?", vbQuestion + vbYesNo, "Delete Confirmation") <> vbYes Then
        GoTo last
    End If
    Dim vArr() As Long, bvArrHasValues As Boolean
    Dim vStr, i As Long, j As Long, sRng As Range, fRng As Range
    Dim StartRow As Long, EndRow As Long, cRow As Long
    Dim cLevel As Long, lRowHeight As Double
    StartRow = Selection.Row
    cLevel = Cells(StartRow, colPos.Task).IndentLevel
    'Find Last till where to be deleted
    EndRow = GetLastTaskRowNo - 2
    ReDim ArrInd(1 To EndRow)
    i = StartRow + 1
    Do Until i > EndRow Or Cells(i, colPos.Task).IndentLevel <= cLevel
        i = i + 1
    Loop
    EndRow = i - 1
    ReDim vArr(1 To 1)
    DisableAll
    For cRow = StartRow To EndRow
        If Cells(cRow, colPos.tDependents) <> vbNullString Then
            vStr = Split(Cells(cRow, colPos.tDependents), sDependencySeperator)
            j = UBound(vArr)
            ReDim vArr(1 To UBound(vStr) + j)
            bvArrHasValues = True
            For i = LBound(vStr) To UBound(vStr) - 1
                vArr((j + 1) + i) = CLng(vStr(i))
            Next i
            DeleteDependencies cRow
        End If
        If Cells(cRow, colPos.tDependency) <> vbNullString Then DeleteDependents cRow
    Next cRow
    ResetParentCosts StartRow
    Rows(StartRow & ":" & EndRow).EntireRow.Delete
    ReNunmberSerials ActiveSheet, cHeaderRow
    CalculateStartEndConstrainsAllRows True
    If bvArrHasValues Then
        Set sRng = Range("B:B")
        For i = 1 To UBound(vArr)
            Set fRng = sRng.Find(CLng(vArr(i)), , xlFormulas, xlWhole)
            If fRng Is Nothing Then
            Else
                ReCalculateConstrainsValues fRng.Row, True
            End If
        Next
    End If
    PopulateSectionDates
    ReBuildView
    AddGanttBarsForEachRow
    HighlightParentTasks
    LockSheet ActiveSheet
    EnableAll
last:
End Sub
Sub DeleteDependents(cRow As Long)
    Dim dIDs As String, vStr As Variant
    dIDs = Cells(cRow, colPos.tDependency)
    If dIDs <> vbNullString Then
        Dim i As Long, j As Long
        Dim tRng As Range, dStr As Variant, Fstr As String
        Set tRng = Range(Cells(cHeaderRow + 1, colPos.tid), Cells(Cells.Rows.Count, colPos.tid))
        vStr = Split(dIDs, sDependencySeperator)
        For i = LBound(vStr) To UBound(vStr) - 1
            dStr = Split(Cells(tRng.Find(Left(vStr(i), InStr(1, vStr(i), "_") - 1), , xlFormulas, xlWhole).Row, colPos.tDependents), sDependencySeperator)
            For j = 0 To UBound(dStr) - 1
                If CLng(dStr(j)) <> CLng(Cells(cRow, colPos.tid)) Then
                    Fstr = Fstr & dStr(j) & sDependencySeperator
                End If
            Next j
            Cells(tRng.Find(Left(vStr(i), InStr(1, vStr(i), "_") - 1), , xlFormulas, xlWhole).Row, colPos.tDependents) = Fstr
            Fstr = vbNullString
        Next i
    End If
End Sub
Sub DeleteDependencies(cRow As Long)
'Delete Dependencies
    Dim dIDs As String, vStr As Variant
    dIDs = Cells(cRow, colPos.tDependents)
    If dIDs <> vbNullString Then
        Dim i As Long, j As Long
        Dim tRng As Range, dStr As Variant, Fstr As String
        Set tRng = Range(Cells(cHeaderRow + 1, colPos.tid), Cells(Cells.Rows.Count, colPos.tid))
        vStr = Split(dIDs, sDependencySeperator)
        For i = LBound(vStr) To UBound(vStr) - 1
            dStr = Split(Cells(tRng.Find(vStr(i), , xlFormulas, xlWhole).Row, colPos.tDependency), sDependencySeperator)
            For j = 0 To UBound(dStr) - 1
                If CLng(Left(dStr(j), InStr(1, dStr(j), "_") - 1)) <> CLng(Cells(cRow, colPos.tid)) Then
                    Fstr = Fstr & dStr(j) & sDependencySeperator
                End If
            Next j
            Cells(tRng.Find(vStr(i), , xlFormulas, xlWhole).Row, colPos.tDependency) = Fstr
            Fstr = vbNullString
        Next i
    End If
End Sub
Sub DuplicateTasks(Optional t As String)

    If ActiveSheet.AutoFilterMode Or _
       (Cells(cRowPos, colPos.ShowCompleted) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0 Or Cells(cRowPos, colPos.ShowPlanned) = 0) Then

        MsgBox "You cannot duplicate tasks when the filter mode is enabled", vbInformation, "Information"
        Exit Sub
    End If
    If IsDataCollapsed = True Then
        Exit Sub
    End If

    If Selection.Cells.Rows.Count > 1 Then
        MsgBox "You can duplicate only one task at a time.", vbInformation, "Information"
        Exit Sub
    End If


    If Cells(Selection.Row, colPos.tType) = vbNullString Then Exit Sub
    If Selection.Row <= cHeaderRow Then Exit Sub


    If Cells(cRowPos, colPos.LiType) = sLTrialV Then
        If Application.WorksheetFunction.CountA(ActiveSheet.Range("A:A")) - 3 >= cTrialVersionTasksCount Then
            sTempStr1 = cstrTrailMsg
            frm_trial.Show
            Exit Sub
        End If
    End If

    Dim r As Range, cLevel As Long
    Dim tlrow As Long, iRow As Long

    Set r = Selection
    cLevel = Cells(r.Row, colPos.Task).IndentLevel

    'Find if selection has sub tasks
    If cLevel < Cells(r.Row + 1, colPos.Task).IndentLevel Then
        'Has SubTasks, Find last row where this parent task ends
        tlrow = r.Row + 1
        Do Until Cells(tlrow, colPos.tType) = "S" Or Cells(tlrow, colPos.tType) = vbNullString
            If Cells(tlrow, colPos.Task).IndentLevel <= cLevel Then
                Exit Do
            End If
            tlrow = tlrow + 1
        Loop
        tlrow = tlrow - 1
    Else
        tlrow = r.Row
    End If


    DisableAll
    ' UnLockSheet ActiveSheet
    'Range(Cells(r.Row, colPos.tType), Cells(tlrow, colPos.TimelineMaxEnd)).Copy
    'Range(Cells(tlrow + 1, colPos.tType), Cells(tlrow + 1, colPos.TimelineMaxEnd)).Insert Shift:=xlDown
    Rows(r.Row & ":" & tlrow).Copy
    Rows(tlrow + 1).Insert Shift:=xlDown

    Dim dRow As Long

    'Add New task ID for duplicated tasks and set dependencies
    Dim k As Long
    k = 0
    For dRow = tlrow + 1 To tlrow + 1 + (tlrow - r.Row)
        Cells(dRow, colPos.tid) = GetNextIDNumber
        Cells(dRow, colPos.tDependency) = vbNullString
        Cells(dRow, colPos.tDependents) = vbNullString
        Cells(dRow, colPos.tStartConstrain) = vbNullString
        Cells(dRow, colPos.tEndConstrain) = vbNullString

        Rows(dRow).RowHeight = Rows(r.Offset(k, 0).Row).RowHeight
        k = k + 1
    Next

    DeleteExtrasRowsInTrial
    PopulateSectionDates
last:

    Application.CutCopyMode = False
    ' AddLineForToday ActiveSheet, 0, True
    ' SetTodayLinesOnTop
    ReNunmberSerials ActiveSheet

    AddGanttBarsForEachRow

LastEnd:
    'LockSheet ActiveSheet
    EnableAll
    r.Select
    Set r = Nothing


End Sub
Sub ClearOutLineGroups(Optional t As Boolean)
    Dim bLock As Boolean
    bLock = ActiveSheet.ProtectContents
    If bLock Then UnLockSheet ActiveSheet
    Application.ScreenUpdating = False
    ActiveSheet.Cells.EntireRow.ClearOutline
    Range(Cells(1, colPos.TimelineEnd + 1), Cells(Cells.Rows.Count, Cells.Columns.Count)).EntireColumn.ColumnWidth = 0
    Application.ScreenUpdating = True
    If bLock Then LockSheet ActiveSheet
End Sub
Sub GenerateOutLineGroups(Optional t As Boolean)
    If Cells(cRowPos, colPos.ShowGrouping) = 0 Then Exit Sub
    Dim gOutlineRow(1 To 8) As Long
    Dim i As Long, j As Long
    Dim cLevel As Long, lRow As Long
    Dim bLock As Boolean

    bLock = ActiveSheet.ProtectContents
    If bLock Then UnLockSheet ActiveSheet

    With ActiveSheet
        .Cells.EntireRow.ClearOutline
        lRow = GetLastTaskRowNo - 2

        i = cHeaderRow + 2

        Do Until i > lRow    'Cells(i, colPos.WBS) = vbnullstring
            cLevel = Cells(i, colPos.Task).IndentLevel + 1
            If cLevel < 9 Then Rows(i).OutlineLevel = cLevel
NextRow:
            i = i + 1
        Loop

        .Outline.SummaryRow = xlAbove
    End With

    'Hide last columns
    Range(Cells(1, colPos.TimelineEnd + 1), Cells(Cells.Rows.Count, Cells.Columns.Count)).EntireColumn.ColumnWidth = 0

last:

    If bLock Then LockSheet ActiveSheet
End Sub

Function CountOfLevel(WBS As String) As Integer
    CountOfLevel = Len(WBS) - Len(Replace(WBS, ".", vbNullString)) + 1
End Function

Sub ExpandAlLGroups(Optional t As Boolean)
    If RestrictThisInTrial Then
        ShowLimitation
        Exit Sub
    End If
    ActiveSheet.Outline.ShowLevels RowLevels:=8
    FilterClearTrigger
    AddGanttBarsForEachRow True
End Sub
Sub CollapseAllGroups(Optional t As Boolean)
    If RestrictThisInTrial Then
        ShowLimitation
        Exit Sub
    End If
    ActiveSheet.Outline.ShowLevels RowLevels:=1
End Sub

Attribute VB_Name = "mMacMenus"
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.


Sub AddMenusForMac(Optional t As Boolean)
    AddMacMenus "Worksheet Menu Bar"
    AddMacMenus "Cell"
End Sub
Sub DeleteMenusForMac(Optional t As Boolean)
    If IsMac2011 Then
        DeleteMenuForMac "Worksheet Menu Bar"
        DeleteMenuForMac "Cell"
    End If
End Sub
Function AddMacMenus(sMenuName As String)

    Dim cbMainMenuBar As CommandBar
    Dim cbcCutomMenu As CommandBarControl
    Dim cMenu As CommandBarControl

    Dim bEnable As Boolean

    If Cells(1, 1) = "tType" Then
        bEnable = True
    Else
        bEnable = False
    End If

    DeleteMenuForMac sMenuName

    Set cbMainMenuBar = Application.CommandBars(sMenuName)

    Set cbcCutomMenu = cbMainMenuBar.Controls.Add(Type:=msoControlPopup, Before:=1)

    cbcCutomMenu.Caption = "Gantt"

    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlPopup)
    cMenu.Caption = "Gantt Chart"
    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Add New Gantt Chart"
        .OnAction = "TriggerAddNewSheet"
        If Sheets("Template").Cells(2, colPos.LiType).Value = vbNullString Then .enabled = False
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Edit Project Details"
        .OnAction = "LoadNewGanttFormOnDblClick"
        .enabled = bEnable
    End With

    'Dashboard
    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlButton)
    With cMenu
        .BeginGroup = True
        .Caption = "Dashboard"
        .OnAction = "CreateDashboard"
        .enabled = bEnable
    End With

    'Add Task Buttons
    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlPopup)
    cMenu.Caption = "Add Task"
    cMenu.BeginGroup = True
    cMenu.enabled = bEnable
    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "At Selection"
        .OnAction = "mAddTaskAtSelection"
        .enabled = bEnable
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Below Selection"
        .OnAction = "mAddTaskBelowSelection"
        .enabled = bEnable
    End With

    'Milestone
    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlButton)
    With cMenu
        .Caption = "Add Milestone"
        .OnAction = "TriggerAddMilestone"
        .enabled = bEnable
    End With

    'Task Actions
    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlButton)
    With cMenu
        .Caption = "Edit Task/MileStone"
        .OnAction = "mEditTask"
        .enabled = bEnable
    End With

    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlButton)
    With cMenu
        .Caption = "Duplicate Task/MileStone"
        .OnAction = "mDuplicateTask"
        .enabled = bEnable
    End With

    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlButton)
    With cMenu
        .Caption = "Delete Task/MileStone"
        .OnAction = "mDeleteTask"
        .enabled = bEnable
    End With

    'Parent/Child Tasks
    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlButton)
    With cMenu
        .BeginGroup = True
        .Caption = "Make Task Parent"
        .OnAction = "MakeTaskParent"
        .enabled = bEnable
    End With

    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlButton)
    With cMenu
        .Caption = "Make Task Child"
        .OnAction = "MakeTaskChild"
        .enabled = bEnable
    End With

    'Task Moveup/Down
    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlButton)
    With cMenu
        .BeginGroup = True
        .Caption = "Move Task Up"
        .OnAction = "MoveTaskAbove"
        .enabled = bEnable
    End With

    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlButton)
    With cMenu
        .Caption = "Move Task Down"
        .OnAction = "MoveTaskBelow"
        .enabled = bEnable
    End With

    'Display View
    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlPopup)
    cMenu.Caption = "Timeline View"
    cMenu.BeginGroup = True
    cMenu.enabled = bEnable
    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Daily"
        .OnAction = "TriggerDailyViewBuild"
        .enabled = bEnable
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Weekly"
        .OnAction = "TriggerWeeklyViewBuild"
        .enabled = bEnable
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Monthly"
        .OnAction = "TriggerMonthlyViewBuild"
        .enabled = bEnable
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Quarterly"
        .OnAction = "TriggerQuarterlyViewBuild"
        .enabled = bEnable
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Halfyearly"
        .OnAction = "TriggerHalfyearlyViewBuild"
        .enabled = bEnable
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Yearly"
        .OnAction = "TriggerYearlyViewBuild"
        .enabled = bEnable
    End With


    'Scroll To
    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlPopup)
    cMenu.Caption = "Scroll To"
    cMenu.BeginGroup = True
    cMenu.enabled = bEnable
    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Start"
        .OnAction = "ScrollToStart"
        .enabled = bEnable
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Today"
        .OnAction = "ScrollToToday"
        .enabled = bEnable
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "End"
        .OnAction = "ScrollToEnd"
        .enabled = bEnable
    End With


    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlPopup)
    cMenu.Caption = "Task Grouping"
    cMenu.BeginGroup = True
    cMenu.enabled = bEnable
    With cMenu.Controls.Add(Type:=msoControlButton)
        .OnAction = "EnableGroupingTrigger"

        If Cells(cRowPos, colPos.ShowGrouping) = 0 Then
            .Caption = "Enable Grouping"
        ElseIf Cells(cRowPos, colPos.ShowGrouping) = 1 Then
            .Caption = "Disable Grouping"
        End If
        .enabled = bEnable
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Expand Groups"
        .OnAction = "ExpandAlLGroups"
        .enabled = bEnable
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Collapse Groups"
        .OnAction = "CollapseAllGroups"
        .enabled = bEnable
    End With

    'Settings
    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlPopup)
    cMenu.Caption = "Settings"
    cMenu.BeginGroup = True
    cMenu.enabled = bEnable
    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Resources"
        .OnAction = "ShowResourcesTrigger"
        .enabled = bEnable
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Holidays"
        .OnAction = "ShowHolidayListTrigger"
        .enabled = bEnable
    End With

    With cMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "Settings"
        .OnAction = "ShowSettingsTrigger"
        .enabled = bEnable
    End With


    'Redraw Timeline
    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlButton)
    With cMenu
        .BeginGroup = True
        .Caption = "Redraw Timeline"
        .OnAction = "mRefreshTimeline"
        .enabled = bEnable
    End With

    'Upgrade
    If GetVisibleTrigger("btnUpgrade") Then
        Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlButton)
        With cMenu
            .BeginGroup = True
            .Caption = getlabelTrigger("btnUpgrade")
            .OnAction = "AddNewLicense"
        End With
    End If

    'About
    Set cMenu = cbcCutomMenu.Controls.Add(Type:=msoControlButton)
    With cMenu
        .BeginGroup = True
        .Caption = "About"
        .OnAction = "AboutPopUpTrigger"
    End With
End Function

Function DeleteMenuForMac(sMenuName As String) As Boolean
    If IsMac2011 Then
        On Error Resume Next
        Application.CommandBars(sMenuName).Reset
        On Error GoTo 0
    End If
End Function

Function IsMac2011(Optional t As Boolean) As Boolean
    #If Mac Then
        #If MAC_OFFICE_VERSION >= 15 Then
        #Else
            If Val(Application.Version) < 15 Then
                IsMac2011 = True
            End If
        #End If
    #End If
End Function

Function IsLanguageSettingEnglish(Optional t As Boolean) As Boolean
    If Application.localizedlanguage = 1033 Then
        IsLanguageSettingEnglish = True
    End If
End Function

Attribute VB_Name = "mMenus"
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit

Sub AddToCellMenu(Optional t As String)
    If ActiveWorkbook.Name <> ThisWorkbook.Name Then Exit Sub
    #If Mac Then
        Exit Sub
    #End If
    On Error Resume Next
    'Delete the controls first to avoid duplicates
    Call DeleteFromCellMenu
    If RestrictGanttCharts(True) = True Then Exit Sub
    If Cells(cRowPos, colPos.ShowCompleted) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0 Or _
       Cells(cRowPos, colPos.ShowPlanned) = 0 Then
        Exit Sub
    End If
    Dim ContextMenu As CommandBar
    Dim MySubMenu As CommandBarControl
    'Set ContextMenu to the Cell menu
    Set ContextMenu = Application.CommandBars("Cell")
    With ContextMenu.Controls.Add(Type:=msoControlButton, Before:=1)
        .OnAction = "mAddTaskAtSelection"
        .Caption = "Add Task at Selection"
    End With
    With ContextMenu.Controls.Add(Type:=msoControlButton, Before:=2)
        .OnAction = "mAddTaskBelowSelection"
        .Caption = "Add Task below Selection"
    End With
    With ContextMenu.Controls.Add(Type:=msoControlButton, Before:=3)
        .OnAction = "mTriggerAddMilestone"
        .Caption = "Add Milestone"
    End With
    With ContextMenu.Controls.Add(Type:=msoControlButton, Before:=4)
        .OnAction = "mEditTask"
        .Caption = "Edit Task / Milestone"
    End With
    With ContextMenu.Controls.Add(Type:=msoControlButton, Before:=5)
        .OnAction = "mDeleteTask"
        .Caption = "Delete Task  / Milestone"
    End With
    With ContextMenu.Controls.Add(Type:=msoControlButton, Before:=6)
        .OnAction = "mDuplicateTask"
        .Caption = "Duplicate Task / Milestone"
    End With
    With ContextMenu.Controls.Add(Type:=msoControlButton, Before:=7)
        .OnAction = "mMakeParent"
        .Caption = "Make Task Parent"
    End With
    With ContextMenu.Controls.Add(Type:=msoControlButton, Before:=8)
        .OnAction = "mMakeChild"
        .Caption = "Make Task Child"
    End With
    With ContextMenu.Controls.Add(Type:=msoControlButton, Before:=9)
        .OnAction = "mRefreshTimeline"
        .Caption = "Redraw Timeline"
    End With
        With ContextMenu.Controls.Add(Type:=msoControlButton, Before:=10)
        .OnAction = "mRefreshGC"
        .Caption = "Refresh Gantt Chart"
    End With
    ContextMenu.Controls(11).BeginGroup = True
    On Error GoTo 0
End Sub
Sub mTriggerAddMilestone(Optional t As Boolean)
    If Cells(cRowPos, colPos.LicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        TriggerAddMilestone
    End If
End Sub

Sub DeleteFromCellMenu(Optional t As String)
    #If Mac Then
        Exit Sub
    #End If
    Application.CommandBars("Cell").Reset

End Sub
Sub mMakeParent(Optional t As String)
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        MakeTaskParent
    End If
End Sub
Sub mMakeChild(Optional t As String)
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        MakeTaskChild
    End If
End Sub
Sub mRefreshTimeline(Optional t As String)
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        AddGanttBarsForEachRow True
    End If
End Sub
Sub mRefreshGC(Optional t As String)
If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
    frmStatus.Show
    DoEvents
    frmStatus.lblStatusMsg.Caption = "Refreshing Gantt Chart"
    DoEvents
    frmStatus.lblStatusMsg.Caption = "Updating Resources"
    DoEvents
    DisableAll
    RemoveInvalidResourcesNamesFromTasks bPopulateResourceCost:=True
    PopulateEstimatesCostsFromResourceInSheet
    frmStatus.lblStatusMsg.Caption = "Loading and Calculating Holidays"
    DoEvents
    sArr.LoadHolidays
    frmStatus.lblStatusMsg.Caption = "Recalculating Dates"
    DoEvents
    Application.ScreenUpdating = False
        ReCalculateAllDurations True
        PopulateSectionDates True
    Application.ScreenUpdating = True
    LockSheet ActiveSheet
    AddHolidaysAsComments
    frmStatus.lblStatusMsg.Caption = "Redrawing Timeline"
    DoEvents
    Application.ScreenUpdating = False
        AddGanttBarsForEachRow
        TriggerDailyViewBuild
    Application.ScreenUpdating = True
    EnableAll
    frmStatus.lblPleaseWait.Caption = "Auto closing status popup"
frmStatus.lblStatusMsg.Caption = "All set - Good to Go!"
frmStatus.lblStatusMsg.ForeColor = rgbGreen
Unload frmStatus
End If
End Sub

Sub mAddTaskAtSelection(Optional t As String)
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        Call AddNewTask("AtSelection")
    End If
End Sub
Sub mAddTaskBelowSelection(Optional t As Boolean)
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        Call AddNewTask("BelowSelection")
    End If
End Sub
Sub mEditTask(Optional t As Boolean)
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        Call EditExistingTask
    End If
End Sub
Sub mDeleteTask(Optional t As Boolean)
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        Call DeleteExistingTask
    End If
End Sub
Sub mDuplicateTask(Optional t As Boolean)
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        DuplicateTaskMaster
    End If
End Sub



Attribute VB_Name = "mRibCallbacks"
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

#If Mac = False Or MAC_OFFICE_VERSION >= 15 Then
    Public gobjRibbon As IRibbonUI
    Public bSecTask As Boolean
Public Sub OnRibbonLoad(ribbon As IRibbonUI)
    Set gobjRibbon = ribbon
End Sub


Public Sub OnActionButton(control As IRibbonControl)
    Select Case control.ID
    Case Is = "btnAddGanttChart"
        TriggerAddNewSheet
    Case Is = "btnQuarterlyView"
        TriggerQuarterlyViewBuild
    Case Is = "btnHalfYearlyView"
        TriggerHalfYearlyViewBuild
    Case Is = "btnYearlyView"
        TriggerYearlyViewBuild
    End Select
End Sub


Sub OnActionCheckBox(control As IRibbonControl, pressed As Boolean)
'Application.EnableEvents = False
    Select Case control.ID
    Case "chkShowCompleted"
        If Cells(cRowPos, colPos.ShowCompleted) = 0 Then
            Cells(cRowPos, colPos.ShowCompleted) = 1
        Else
            If Cells(cRowPos, colPos.ShowPlanned) = 0 And Cells(cRowPos, colPos.ShowInProgress) = 0 Then
                MsgBox "Atleast one option has to be checked", vbInformation, "Information"
                Cells(cRowPos, colPos.ShowCompleted) = 1
                GoTo last
            Else
                Cells(cRowPos, colPos.ShowCompleted) = 0
            End If
        End If
        ShowHideTasks True
    Case "chkShowInProgress"
        If Cells(cRowPos, colPos.ShowInProgress) = 0 Then
            Cells(cRowPos, colPos.ShowInProgress) = 1
        Else
            If Cells(cRowPos, colPos.ShowCompleted) = 0 And Cells(cRowPos, colPos.ShowPlanned) = 0 Then
                MsgBox "Atleast one option has to be checked", vbInformation, "Information"
                Cells(cRowPos, colPos.ShowInProgress) = 1
                GoTo last
            Else
                Cells(cRowPos, colPos.ShowInProgress) = 0
            End If
        End If
        ShowHideTasks True
    Case "chkShowPlanned"
        If Cells(cRowPos, colPos.ShowPlanned) = 0 Then
            Cells(cRowPos, colPos.ShowPlanned) = 1
        Else
            If Cells(cRowPos, colPos.ShowCompleted) = 0 And Cells(cRowPos, colPos.ShowInProgress) = 0 Then
                MsgBox "Atleast one option has to be checked", vbInformation, "Information"
                Cells(cRowPos, colPos.ShowPlanned) = 1
                GoTo last
            Else
                Cells(cRowPos, colPos.ShowPlanned) = 0
            End If
        End If
        ShowHideTasks True

    Case "chkEnableGrouping"
        If RestrictThisInTrial Then
            ShowLimitation
            GoTo last
        End If
        If Cells(cRowPos, colPos.ShowGrouping) = 0 Then
            Cells(cRowPos, colPos.ShowGrouping) = 1
            GenerateOutLineGroups
        Else
            Cells(cRowPos, colPos.ShowGrouping) = 0
            ClearOutLineGroups
        End If
    End Select
last:
    RefreshRibbon
    AddToCellMenu
End Sub


Sub GetPressedCheckBox(control As IRibbonControl, ByRef bReturn)

    Dim bSC As Boolean, bSI As Boolean, bSP As Boolean, bSG As Boolean

    If Cells(cRowPos, colPos.ShowCompleted) = 1 Then
        bSC = True
    Else
        bSC = False
    End If
    If Cells(cRowPos, colPos.ShowInProgress) = 1 Then
        bSI = True
    Else
        bSI = False
    End If
    If Cells(cRowPos, colPos.ShowPlanned) = 1 Then
        bSP = True
    Else
        bSP = False
    End If
    If Cells(cRowPos, colPos.ShowGrouping) = 1 Then
        bSG = True
    Else
        bSG = False
    End If

    Select Case control.ID
    Case "chkShowCompleted"
        If bSC Then
            bReturn = True
        Else
            bReturn = False
        End If
        Exit Sub
    Case "chkShowInProgress"
        If bSI Then
            bReturn = True
        Else
            bReturn = False
        End If
        Exit Sub
    Case "chkShowPlanned"
        If bSP Then
            bReturn = True
        Else
            bReturn = False
        End If
        Exit Sub
    Case "chkEnableGrouping"
        If bSG Then
            bReturn = True
        Else
            bReturn = False
        End If
        Exit Sub
    End Select
End Sub

Public Sub GetEnabled(control As IRibbonControl, ByRef enabled)
    Dim bAutoFilterMode As Boolean
    bAutoFilterMode = ActiveSheet.AutoFilterMode

    If IsLicValid(0, 1) = 0 Then
        If control.ID = "grpAboutGanttExcel" Or control.ID = "btnUpgrade" Then
            enabled = True
        Else
            enabled = False
        End If
        Exit Sub
    End If

    If RestrictGanttCharts(True) = True Then
        enabled = False
        Exit Sub
    End If

    If control.ID = "grpAboutGanttExcel" Then
        enabled = True
    ElseIf control.ID = "grpGanttCharts" Then
        If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) Then
            enabled = True
        Else
            enabled = False
        End If
    Else
        If Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
            enabled = True
            If control.ID = "btnAddSection" Or control.ID = "btnAddTaskAtSelection" Or control.ID = "btnAddTaskBelowSelection" Or _
               control.ID = "btnDuplicate" Or control.ID = "btnDelete" Or control.ID = "btnMoveUp" Or control.ID = "btnMoveDown" Or _
               control.ID = "btnSetRowHeight" Or control.ID = "btnDashboard" Or control.ID = "btnParent" Or control.ID = "btnChild" Or control.ID = "btnSetMilestone" Then

                If Cells(cRowPos, colPos.ShowPlanned) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0 Or Cells(cRowPos, colPos.ShowCompleted) = 0 Or _
                   bAutoFilterMode = True Then
                    enabled = False
                End If

            End If

            Select Case control.ID
            Case Is = "chkShowCompleted"
                If Cells(cRowPos, colPos.ShowGrouping) = 1 Or bAutoFilterMode Then
                    enabled = False
                Else
                    enabled = True
                End If
            Case Is = "chkShowPlanned"
                If Cells(cRowPos, colPos.ShowGrouping) = 1 Or bAutoFilterMode Then
                    enabled = False
                Else
                    enabled = True
                End If
            Case Is = "chkShowInProgress"
                If Cells(cRowPos, colPos.ShowGrouping) = 1 Or bAutoFilterMode Then
                    enabled = False
                Else
                    enabled = True
                End If

            Case Is = "btnCollapseAllGroups"
                If Cells(cRowPos, colPos.ShowPlanned) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0 Or Cells(cRowPos, colPos.ShowCompleted) = 0 Or bAutoFilterMode Then
                    enabled = False
                Else
                    If Cells(cRowPos, colPos.ShowGrouping) = 1 Or bAutoFilterMode Then
                        enabled = True
                    Else
                        enabled = False
                    End If
                End If
            Case Is = "btnExpandAllGroups"
                If Cells(cRowPos, colPos.ShowPlanned) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0 Or Cells(cRowPos, colPos.ShowCompleted) = 0 Or bAutoFilterMode Then
                    enabled = False
                Else
                    If Cells(cRowPos, colPos.ShowGrouping) = 1 Or bAutoFilterMode Then
                        enabled = True
                    Else
                        enabled = False
                    End If
                End If
            Case Is = "chkEnableGrouping"
                If Cells(cRowPos, colPos.ShowPlanned) = 0 Or Cells(cRowPos, colPos.ShowInProgress) = 0 Or Cells(cRowPos, colPos.ShowCompleted) = 0 Or bAutoFilterMode Then
                    enabled = False
                Else
                    enabled = True
                End If

            End Select


        Else
            enabled = False
        End If
    End If


    If control.ID = "btnAddGanttChart" Then
        If RestrictGanttCharts(True) Then
            enabled = False
        Else
            enabled = True
        End If
    End If

    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) = 0 And (control.ID = "btnAddGanttChart" Or control.ID = "grpGanttCharts") Then enabled = False

    If control.ID = "btnDashboard" And Cells(cRowPos, colPos.DB) = 0 Then enabled = False
    If control.ID = "btnUpgrade" Then
        If Worksheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLiType) = sLEnterpriseV Or Worksheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLiType) = sLMacUltimateV Then
            enabled = False
        Else
            enabled = True
        End If
    End If
End Sub
Public Sub HideFilterGroups(control As IRibbonControl, ByRef visible)

    If IsActiveSheetGanttSheet Then
        If control.ID = "grpFilter" Then visible = True
    Else
        If control.ID = "GroupSortFilter" Then visible = True
    End If

End Sub
Public Sub HideProofingGroups(control As IRibbonControl, ByRef visible)

    If IsActiveSheetGanttSheet Then
        If control.ID = "grpSpellCheck" Then visible = True
    Else
        If control.ID = "GroupProofing" Then visible = True
    End If

End Sub
Public Sub GetVisible(control As IRibbonControl, ByRef visible)
    If control.ID = "btnAbout" Then
        visible = True
    End If

    If control.ID = "btnUpgrade" Or control.ID = "Upgrade" Then
        If Worksheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLiType) = sLEnterpriseV Or Worksheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLiType) = sLMacUltimateV Then
            visible = False
        Else
            visible = True
        End If
    ElseIf GetLicType = vbNullString Then
        visible = False
    Else
        visible = True
    End If
End Sub
Sub getlabelF(control As IRibbonControl, ByRef label)
    If control.ID = "btnUpgrade" Then
        label = getlabelTrigger(control.ID)
    End If
End Sub
Sub btnEditGanttChart(control As IRibbonControl)
    LoadNewGanttFormOnDblClick
End Sub
Sub btnDashboardRib(control As IRibbonControl)
    CreateDashboard
End Sub
Sub AddTaskAtSelection(control As IRibbonControl)
    mAddTaskAtSelection
End Sub
Sub AddTaskBelowSelection(control As IRibbonControl)
    mAddTaskBelowSelection
End Sub
Sub AddMilestone(control As IRibbonControl)
    TriggerAddMilestone
End Sub
Sub EditTask(control As IRibbonControl)
    mEditTask
End Sub
Sub DuplicateTaskRib(control As IRibbonControl)
    mDuplicateTask
End Sub
Sub DeleteTask(control As IRibbonControl)
    mDeleteTask
End Sub
Sub tIndentLeft(control As IRibbonControl)
    MakeTaskParent
End Sub
Sub tIndentRight(control As IRibbonControl)
    MakeTaskChild
End Sub
Sub MoveUpAboveRib(control As IRibbonControl)
    MoveTaskAbove
End Sub
Sub MoveDownBelowRib(control As IRibbonControl)
    MoveTaskBelow
End Sub
Sub DailyViewRib(control As IRibbonControl)
    TriggerDailyViewBuild
End Sub
Sub WeeklyViewRib(control As IRibbonControl)
    TriggerWeeklyViewBuild
End Sub
Sub MonthlyViewRib(control As IRibbonControl)
    TriggerMonthlyViewBuild
End Sub

Sub GotoStartRib(control As IRibbonControl)
    ScrollToStart
End Sub
Sub GotoTodayRib(control As IRibbonControl)
    ScrollToToday
End Sub
Sub GotoEndRib(control As IRibbonControl)
    ScrollToEnd
End Sub
Sub SetRowHeightRib(control As IRibbonControl)
    SetRowHeight
End Sub
Sub OutlineShowDetailRib(control As IRibbonControl)
    ExpandAlLGroups
End Sub
Sub OutlineHideDetailRib(control As IRibbonControl)
    CollapseAllGroups
End Sub

Sub SetColumnWidthRib(control As IRibbonControl)
    SetColumnWidth
End Sub
Sub AboutPopUpRib(control As IRibbonControl)
    AboutPopUpTrigger
End Sub

Sub ShowHolidayList(control As IRibbonControl)
    ShowHolidayListTrigger
End Sub
Sub SpellChecking(control As IRibbonControl)
    DoSpellCheck
End Sub

Sub AddFilterToTasks(control As IRibbonControl)
    AddFilterToTasksTrigger
End Sub

Sub ClearFilterToTasks(control As IRibbonControl)
    FilterClearTrigger
End Sub

Sub ShowResources(control As IRibbonControl)
    ShowResourcesTrigger
End Sub

Sub UpgradeLicense(control As IRibbonControl)
    AddNewLicense
End Sub
Sub ShowSettings(control As IRibbonControl)
    Call findgss
    ShowSettingsTrigger
End Sub

Sub OpenContactUs(control As IRibbonControl)
    OpenHyperlink "http://ganttexcel.com/contact-us/"
End Sub

#End If

Sub RefreshRibbon(Optional t As Boolean)
    #If Mac = False Or MAC_OFFICE_VERSION >= 15 Then
        If gobjRibbon Is Nothing Then
            MsgBox "The file has been reset. Please re-open the file again", vbInformation, "Information"
        Else
            gobjRibbon.Invalidate
        End If
        If t = 0 Then AddToCellMenu
    #Else
        AddMenusForMac
    #End If
End Sub

Sub ShowSettingsTrigger(Optional t As Boolean)
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        frm_Settings.Show
    End If
End Sub
Sub ShowResourcesTrigger(Optional t As Boolean)
    If Sheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        frm_Resources.Show
    End If
End Sub
Sub ShowHolidayListTrigger(Optional t As Boolean)
    If Cells(cRowPos, colPos.LicenseVal) And Cells(cActualHeaderRow, colPos.WBS) = cHeaderName Then
        frm_Holidays.Show
    End If
End Sub
Function EnableGroupingTrigger(Optional t As Boolean) As Boolean

    If RestrictThisInTrial Then
        ShowLimitation
        GoTo last
    End If

    If Cells(cRowPos, colPos.ShowGrouping) = 0 Then
        Cells(cRowPos, colPos.ShowGrouping) = 1
        EnableGroupingTrigger = 1
        GenerateOutLineGroups
    Else
        Cells(cRowPos, colPos.ShowGrouping) = 0
        EnableGroupingTrigger = 0
        ClearOutLineGroups
    End If
last:
End Function
Public Function GetVisibleTrigger(sControl As String) As Boolean

    If sControl = "btnUpgrade" Or sControl = "Upgrade" Then
        If Worksheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLiType) = sLEnterpriseV Or Worksheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLiType) = sLMacUltimateV Then
            GetVisibleTrigger = False
        Else
            GetVisibleTrigger = True
        End If
    End If
End Function
Function getlabelTrigger(sControl) As String
    If sControl = "btnUpgrade" Then
        If Worksheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLiType) = sLProV Then
            getlabelTrigger = "Upgrade to Ultimate"
        ElseIf Worksheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLiType) = sLTrialV Then
            getlabelTrigger = "Upgrade"
        ElseIf Worksheets(cGanttTemplateSheetName).Cells(cRowPos, colPos.tLiType) = slFFTV Then
            getlabelTrigger = "Upgrade"
        Else
            getlabelTrigger = "Activate License"
        End If
    End If
End Function
Sub AboutPopUpTrigger(Optional t As String)
    frm_About.Show
End Sub
Attribute VB_Name = "mViews"
'The copyright and intellectual property rights of this template and VBA Procedures and Functions are owned by Gantt Excel (www.GanttExcel.com), United States,
'and are protected by copyright laws and international intellectual property right treaties.
'You may not copy any portion of the template or vba code in any form, except to use this template in accordance with the terms of the agreement or
'to make one copy for backup purposes. You may not alter the software in any way.

Option Explicit
Sub ReBuildView(Optional t As Boolean, Optional bTimelineExpand As Boolean)
Dim cd As Date
Dim sPos As Long
cd = WorksheetFunction.Min(Columns(colPos.ESD))
sPos = Cells(cRowPos, colPos.ScrollPosition)
If cd = 0 Then cd = Date
cd = GetWeekStartDate(cd)
If Cells(cTimelineDateRow, colPos.TimelineStart) <> cd Or bTimelineExpand Then
    ResetHeaderRowColors
    Select Case Cells(cRowPos, colPos.CurrentView)
    Case "D"
        BuildDailyView t
    Case "W"
        BuildWeeklyView t
    Case "M"
        BuildMonthlyView t
    Case "Q"
        BuildQuarterlyView t
    Case "H"
        BuildHalfYearlyView t
    Case "Y"
        BuildYearlyView t
    End Select
End If
End Sub
Sub ResetHeaderRowColors(Optional t As Boolean)
    Range(Cells(cHeaderRow, colPos.TimelineStart), Cells(cHeaderRow, colPos.TimelineMaxEnd)).Font.Color = RGB(128, 128, 128)
End Sub
Sub BuildDailyView(Optional t As Boolean)
rungsschk
DisableAll
Dim iCol As Long
Dim cd As Date, sd As Date, dName As String, wkDayNum As Long
Dim sPos As Long, r As Range, bOn As Boolean
Dim lZoomLevel As Long
Set r = Selection
sPos = Cells(cRowPos, colPos.ScrollPosition)
Cells(cRowPos, colPos.CurrentView) = "D"
    If UCase(WeekdayName(Weekday(DateSerial(2015, 6, 1), vbMonday), True, vbMonday)) = "MON" Then
        Cells(cTimelineDayNamesRow, colPos.TimelineStart) = "M"
        Cells(cTimelineDayNamesRow, colPos.TimelineStart + 1) = "T"
        Cells(cTimelineDayNamesRow, colPos.TimelineStart + 2) = "W"
        Cells(cTimelineDayNamesRow, colPos.TimelineStart + 3) = "T"
        Cells(cTimelineDayNamesRow, colPos.TimelineStart + 4) = "F"
        Cells(cTimelineDayNamesRow, colPos.TimelineStart + 5) = "S"
        Cells(cTimelineDayNamesRow, colPos.TimelineStart + 6) = "S"
    Else
        Cells(cTimelineDayNamesRow, colPos.TimelineStart) = WeekdayName(Weekday(DateSerial(2015, 6, 1), vbMonday), True, vbMonday)    '"M"
        Cells(cTimelineDayNamesRow, colPos.TimelineStart + 1) = WeekdayName(Weekday(DateSerial(2015, 6, 2), vbMonday), True, vbMonday)    '"T"
        Cells(cTimelineDayNamesRow, colPos.TimelineStart + 2) = WeekdayName(Weekday(DateSerial(2015, 6, 3), vbMonday), True, vbMonday)    '"W"
        Cells(cTimelineDayNamesRow, colPos.TimelineStart + 3) = WeekdayName(Weekday(DateSerial(2015, 6, 4), vbMonday), True, vbMonday)    '"T"
        Cells(cTimelineDayNamesRow, colPos.TimelineStart + 4) = WeekdayName(Weekday(DateSerial(2015, 6, 5), vbMonday), True, vbMonday)    ' "F"
        Cells(cTimelineDayNamesRow, colPos.TimelineStart + 5) = WeekdayName(Weekday(DateSerial(2015, 6, 6), vbMonday), True, vbMonday)    '"S"
        Cells(cTimelineDayNamesRow, colPos.TimelineStart + 6) = WeekdayName(Weekday(DateSerial(2015, 6, 7), vbMonday), True, vbMonday)    '"S"
    End If
Range(Cells(cTimelineDateLabelsRow, colPos.TimelineStart), Cells(cTimelineDateLabelsRow, colPos.TimelineEnd)).ClearContents
With Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd))
    .ClearContents
    .Orientation = 0
    .RowHeight = 14
End With
With Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AQ6").Interior.Color
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineStart + 6)).Copy
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart + 7), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).PasteSpecial xlPasteValues
Application.CutCopyMode = False
bOn = True
For iCol = colPos.TimelineStart To colPos.TimelineEnd
    With Range(Cells(cTimelineDateLabelsRow, iCol), Cells(cTimelineDateLabelsRow, iCol + 6))
        .HorizontalAlignment = xlLeft
        If bOn Then
            .Interior.Color = gss.Range("AN6").Interior.Color
        Else
            .Interior.Color = gss.Range("AO6").Interior.Color
        End If
        bOn = Not (bOn)
    End With
    iCol = iCol + 6
Next
cd = WorksheetFunction.Min(Columns(colPos.ESD))
If cd = 0 Then cd = Date
sd = GetWeekStartDate(cd)
Dim bColorDayName As Boolean
For iCol = colPos.TimelineStart To colPos.TimelineEnd
    Cells(cTimelineDateRow, iCol) = sd + (iCol - colPos.TimelineStart)
    wkDayNum = Weekday(Cells(cTimelineDateRow, iCol).Value, vbMonday)
    If wkDayNum = 7 And Cells(cRowPos, colPos.WorkdaySun).Value = 0 Then
        bColorDayName = True
    ElseIf wkDayNum = 1 And Cells(cRowPos, colPos.WorkdayMon).Value = 0 Then
        bColorDayName = True
    ElseIf wkDayNum = 2 And Cells(cRowPos, colPos.WorkdayTue).Value = 0 Then
        bColorDayName = True
    ElseIf wkDayNum = 3 And Cells(cRowPos, colPos.WorkdayWed).Value = 0 Then
        bColorDayName = True
    ElseIf wkDayNum = 4 And Cells(cRowPos, colPos.WorkdayThu).Value = 0 Then
        bColorDayName = True
    ElseIf wkDayNum = 5 And Cells(cRowPos, colPos.WorkdayFri).Value = 0 Then
        bColorDayName = True
    ElseIf wkDayNum = 6 And Cells(cRowPos, colPos.WorkDaySat).Value = 0 Then
        bColorDayName = True
    End If
    If bColorDayName Then
        Range(Cells(cTimelineDateNumbersRow, iCol), Cells(cTimelineDayNamesRow, iCol)).Interior.Color = gss.Range("AM6").Interior.Color
        bColorDayName = False
    End If
    Cells(cTimelineDateNumbersRow, iCol) = Day(sd + (iCol - colPos.TimelineStart))
    If Application.WorksheetFunction.Weekday(Cells(cTimelineDateRow, iCol), 2) = Cells(cRowPos, colPos.WeekStartDay) Then
        Cells(cTimelineDateLabelsRow, iCol) = Format(sd + iCol - colPos.TimelineStart, "mmm-yy") & WorksheetFunction.Rept(" ", 6) & "[W" & WeekNumVBA(sd + iCol - colPos.TimelineStart, Cells(cRowPos, colPos.WeekNumType)) & "]"
    End If
Next
If UCase(WeekdayName(Weekday(DateSerial(2015, 6, 1), vbMonday), True, vbMonday)) = "MON" Then
    Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).ColumnWidth = gss.Range("CG2").Value
Else
    Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).Columns.AutoFit
End If
Cells(cTimelineDateRow, colPos.TimelineEnd + 1) = Cells(cTimelineDateRow, colPos.TimelineEnd) + 1
r.Select
Set r = Nothing
Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AP6").Interior.Color
AddHolidaysAsComments
If t Then
    AddGanttBarsForEachRow True
    EnableAll
Else
    AddGanttBarsForEachRow True
    EnableAll
End If
End Sub
Sub BuildWeeklyView(Optional t As Boolean)
rungsschk
DisableAll
Dim iCol As Long
Dim cd As Date, sd As Date, td As Date
Dim sPos As Long, tNum As Long
sPos = Cells(cRowPos, colPos.ScrollPosition)
Cells(cRowPos, colPos.CurrentView) = "W"
Range(Cells(cTimelineDateLabelsRow, colPos.TimelineStart), Cells(cTimelineDateLabelsRow, colPos.TimelineEnd)).ClearContents
With Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd))
    .ClearContents
    With .Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End With
With Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd))
    .ClearContents
    .Orientation = 0
    .RowHeight = Cells(cRowPos, colPos.TaskRowHeight)
    With .Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End With
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AQ6").Interior.Color

cd = WorksheetFunction.Min(Columns(colPos.ESD))
If cd = 0 Then cd = Date

sd = (cd - (Weekday(cd, vbMonday) - 1)) + (7 * (Cells(cRowPos, colPos.ScrollPosition) - 1))

iCol = colPos.TimelineStart
Do Until iCol = colPos.TimelineEnd + 1
    td = sd + ((iCol - colPos.TimelineStart) * 7)
    Cells(cTimelineDateRow, iCol) = td
    Cells(cTimelineDateNumbersRow, iCol) = WeekNumVBA(td, Cells(cRowPos, colPos.WeekNumType))
    If iCol = colPos.TimelineStart Then
        Cells(cTimelineDateLabelsRow, iCol) = " " & Format(td, "MMM-YY")
    ElseIf Month(Cells(cTimelineDateRow, iCol)) <> Month(Cells(cTimelineDateRow, iCol - 1)) Then
        Cells(cTimelineDateLabelsRow, iCol) = " " & Format(td, "MMM-YY")
    End If

    iCol = iCol + 1
Loop
Cells(cTimelineDateRow, colPos.TimelineEnd + 1) = Cells(cTimelineDateRow, colPos.TimelineEnd) + 7
Dim tCol As Long, bOn As Boolean
'merge cell
iCol = colPos.TimelineStart
tCol = colPos.TimelineStart
bOn = True
Do Until iCol = colPos.TimelineEnd + 1
    If Cells(cTimelineDateLabelsRow, iCol) <> vbNullString And iCol <> colPos.TimelineStart Then
        If tCol <> iCol - 1 Then
            With Range(Cells(cTimelineDateLabelsRow, tCol), Cells(cTimelineDateLabelsRow, iCol - 1))
                '   .Merge
                .HorizontalAlignment = xlLeft
                If bOn Then
                    .Interior.Color = gss.Range("AN6").Interior.Color
                Else
                    .Interior.Color = gss.Range("AO6").Interior.Color
                End If
                bOn = Not (bOn)
            End With
            tCol = iCol
        Else
            tCol = iCol
        End If
    End If
    iCol = iCol + 1
Loop
With Range(Cells(cTimelineDateLabelsRow, tCol), Cells(cTimelineDateLabelsRow, iCol - 1))
    .HorizontalAlignment = xlLeft
    If bOn Then
        .Interior.Color = gss.Range("AN6").Interior.Color
    Else
        .Interior.Color = gss.Range("AO6").Interior.Color
    End If
    bOn = Not (bOn)
End With
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).ColumnWidth = gss.Range("CH2").Value
Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AP6").Interior.Color
If t Then
    AddGanttBarsForEachRow True
    EnableAll
Else
    AddGanttBarsForEachRow True
    EnableAll
End If
End Sub
Sub BuildMonthlyView(Optional t As Boolean)
rungsschk
DisableAll
Dim iCol As Long
Dim cd As Date, sd As Date, td As Date
Dim sPos As Long
sPos = Cells(cRowPos, colPos.ScrollPosition)
Cells(cRowPos, colPos.CurrentView) = "M"
With Range(Cells(cTimelineDateLabelsRow, colPos.TimelineStart), Cells(cTimelineDateLabelsRow, colPos.TimelineEnd))
    .ClearContents
End With
With Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd))
    .ClearContents
    With .Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End With
With Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd))
    .UnMerge
    .Orientation = 90
    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlBottom
    .RowHeight = 20.25
    With .Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End With
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AQ6").Interior.Color
cd = WorksheetFunction.Min(Columns(colPos.ESD))
If cd = 0 Then cd = Date
sd = cd
iCol = colPos.TimelineStart
sd = DateAdd("m", sPos - 1, sd)
Do Until iCol = colPos.TimelineEnd + 1
    td = DateAdd("m", iCol - colPos.TimelineStart, sd)
    Cells(cTimelineDateRow, iCol) = DateSerial(Year(td), Month(td), 1)
    If iCol = colPos.TimelineStart Then
        Cells(cTimelineDateLabelsRow, iCol) = "'" & Year(td)
    ElseIf Year(Cells(cTimelineDateRow, iCol)) <> Year(Cells(cTimelineDateRow, iCol - 1)) Then
        Cells(cTimelineDateLabelsRow, iCol) = "'" & Year(td)
    End If
    Cells(cTimelineDateNumbersRow, iCol) = Format(td, "MMM")
    Cells(cTimelineDayNamesRow, iCol) = Month(td)
    iCol = iCol + 1
Loop
Cells(cTimelineDateRow, colPos.TimelineEnd + 1) = DateAdd("M", 1, Cells(cTimelineDateRow, colPos.TimelineEnd) + 1)
Dim tCol As Long, bOn As Boolean
'merge cell
iCol = colPos.TimelineStart
tCol = colPos.TimelineStart
bOn = True
Do Until iCol = colPos.TimelineEnd + 1
    If Cells(cTimelineDateLabelsRow, iCol) <> vbNullString And iCol <> colPos.TimelineStart Then
        If tCol <> iCol - 1 Then
            With Range(Cells(cTimelineDateLabelsRow, tCol), Cells(cTimelineDateLabelsRow, iCol - 1))
                '  .Merge
                .HorizontalAlignment = xlLeft
                If bOn Then
                    .Interior.Color = gss.Range("AN6").Interior.Color
                Else
                    .Interior.Color = gss.Range("AO6").Interior.Color
                End If
                bOn = Not (bOn)
            End With
            tCol = iCol
        Else
            tCol = iCol
        End If
    End If
    iCol = iCol + 1
Loop
With Range(Cells(cTimelineDateLabelsRow, tCol), Cells(cTimelineDateLabelsRow, iCol - 1))
    .HorizontalAlignment = xlLeft
    If bOn Then
        .Interior.Color = gss.Range("AN6").Interior.Color
    Else
        .Interior.Color = gss.Range("AO6").Interior.Color
    End If
    bOn = Not (bOn)
End With
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).ColumnWidth = gss.Range("CI2").Value
Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AP6").Interior.Color
If t Then
    AddGanttBarsForEachRow True
    EnableAll
Else
    AddGanttBarsForEachRow True
    EnableAll
End If
End Sub
Sub BuildQuarterlyView(Optional t As Boolean)
rungsschk
DisableAll
Dim iCol As Long
Dim cd As Date, sd As Date, td As Date
Dim sPos As Long, tNum As Long
sPos = Cells(cRowPos, colPos.ScrollPosition)
Cells(cRowPos, colPos.CurrentView) = "Q"
Range(Cells(cTimelineDateLabelsRow, colPos.TimelineStart), Cells(cTimelineDateLabelsRow, colPos.TimelineEnd)).ClearContents
With Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd))
    .ClearContents
    With .Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End With
With Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd))
    .ClearContents
    .Orientation = 0
    .RowHeight = Cells(cRowPos, colPos.TaskRowHeight)
    With .Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End With
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AQ6").Interior.Color
cd = WorksheetFunction.Min(Columns(colPos.ESD))
If cd = 0 Then cd = Date
sd = GetQuarterStartDate(cd)
sd = DateAdd("q", (Cells(cRowPos, colPos.ScrollPosition) - 1), sd)
iCol = colPos.TimelineStart
Do Until iCol = colPos.TimelineEnd + 1
    td = DateAdd("m", (iCol - colPos.TimelineStart) * 3, sd)
    Cells(cTimelineDateRow, iCol) = td
    Cells(cTimelineDateNumbersRow, iCol) = "Q" & (Month(td) + 2) \ 3
    If iCol = colPos.TimelineStart Then
        Cells(cTimelineDateLabelsRow, iCol) = "'" & Year(td)
    ElseIf Year(td) <> Year(Cells(cTimelineDateRow, iCol - 1)) Then
        Cells(cTimelineDateLabelsRow, iCol) = "'" & Year(td)
    End If
    iCol = iCol + 1
Loop
Cells(cTimelineDateRow, colPos.TimelineEnd + 1) = DateAdd("m", 3, sd)
Dim tCol As Long, bOn As Boolean
iCol = colPos.TimelineStart
tCol = colPos.TimelineStart
bOn = True
Do Until iCol = colPos.TimelineEnd + 1
    If Cells(cTimelineDateLabelsRow, iCol) <> vbNullString And iCol <> colPos.TimelineStart Then
        If tCol <> iCol - 1 Then
            With Range(Cells(cTimelineDateLabelsRow, tCol), Cells(cTimelineDateLabelsRow, iCol - 1))
                .HorizontalAlignment = xlLeft
                If bOn Then
                    .Interior.Color = gss.Range("AN6").Interior.Color
                Else
                    .Interior.Color = gss.Range("AO6").Interior.Color
                End If
                bOn = Not (bOn)
            End With
            tCol = iCol
        Else
            tCol = iCol
        End If
    End If
    iCol = iCol + 1
Loop
With Range(Cells(cTimelineDateLabelsRow, tCol), Cells(cTimelineDateLabelsRow, iCol - 1))
    .HorizontalAlignment = xlLeft
    If bOn Then
        .Interior.Color = gss.Range("AN6").Interior.Color
    Else
        .Interior.Color = gss.Range("AO6").Interior.Color
    End If
    bOn = Not (bOn)
End With
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).ColumnWidth = gss.Range("CJ2").Value
Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AP6").Interior.Color
If t Then
    AddGanttBarsForEachRow True
    EnableAll
Else
    AddGanttBarsForEachRow True
    EnableAll
End If
End Sub
Sub BuildHalfYearlyView(Optional t As Boolean)
rungsschk
DisableAll
Dim iCol As Long
Dim cd As Date, sd As Date, td As Date
Dim sPos As Long, tNum As Long
sPos = Cells(cRowPos, colPos.ScrollPosition)
Cells(cRowPos, colPos.CurrentView) = "H"
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).Font.Color = rgbBlack
Range(Cells(cTimelineDateLabelsRow, colPos.TimelineStart), Cells(cTimelineDateLabelsRow, colPos.TimelineEnd)).ClearContents
With Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd))
    .ClearContents
    With .Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End With
With Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd))
    .ClearContents
    .Orientation = 0
    .RowHeight = Cells(cRowPos, colPos.TaskRowHeight)
    With .Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End With
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AQ6").Interior.Color
cd = WorksheetFunction.Min(Columns(colPos.ESD))
If cd = 0 Then cd = Date
sd = GetHalfYearStartDate(cd)
sd = DateAdd("Q", (Cells(cRowPos, colPos.ScrollPosition) - 1) * 2, sd)
iCol = colPos.TimelineStart
Do Until iCol = colPos.TimelineEnd + 1
    td = DateAdd("m", (iCol - colPos.TimelineStart) * 6, sd)
    Cells(cTimelineDateRow, iCol) = td
    Cells(cTimelineDateNumbersRow, iCol) = "H" & (CBool(Month(td) > 6) * -1 + 1)
    If iCol = colPos.TimelineStart Then
        Cells(cTimelineDateLabelsRow, iCol) = "'" & Year(td)
    ElseIf Year(td) <> Year(Cells(cTimelineDateRow, iCol - 1)) Then
        Cells(cTimelineDateLabelsRow, iCol) = "'" & Year(td)
    End If
    iCol = iCol + 1
Loop
Cells(cTimelineDateRow, colPos.TimelineEnd + 1) = DateAdd("m", 6, sd)
Dim tCol As Long, bOn As Boolean
iCol = colPos.TimelineStart
tCol = colPos.TimelineStart
bOn = True
Do Until iCol = colPos.TimelineEnd + 1
    If Cells(cTimelineDateLabelsRow, iCol) <> vbNullString And iCol <> colPos.TimelineStart Then
        If tCol <> iCol - 1 Then
            With Range(Cells(cTimelineDateLabelsRow, tCol), Cells(cTimelineDateLabelsRow, iCol - 1))
                .HorizontalAlignment = xlLeft
                If bOn Then
                    .Interior.Color = gss.Range("AN6").Interior.Color
                Else
                    .Interior.Color = gss.Range("AO6").Interior.Color
                End If
                bOn = Not (bOn)
            End With
            tCol = iCol
        Else
            tCol = iCol
        End If
    End If
    iCol = iCol + 1
Loop
With Range(Cells(cTimelineDateLabelsRow, tCol), Cells(cTimelineDateLabelsRow, iCol - 1))
    .HorizontalAlignment = xlLeft
    If bOn Then
        .Interior.Color = gss.Range("AN6").Interior.Color
    Else
        .Interior.Color = gss.Range("AO6").Interior.Color
    End If
    bOn = Not (bOn)
End With
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).ColumnWidth = gss.Range("CK2").Value
Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AP6").Interior.Color
If t Then
    AddGanttBarsForEachRow True
    EnableAll
Else
    AddGanttBarsForEachRow True
    EnableAll
End If
End Sub
Sub BuildYearlyView(Optional t As Boolean)
rungsschk
DisableAll
Dim iCol As Long
Dim cd As Date, sd As Date, td As Date
Dim sPos As Long, tNum As Long
sPos = Cells(cRowPos, colPos.ScrollPosition)
Cells(cRowPos, colPos.CurrentView) = "Y"
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).Font.Color = rgbBlack
With Range(Cells(cTimelineDateLabelsRow, colPos.TimelineStart), Cells(cTimelineDateLabelsRow, colPos.TimelineEnd))
    .ClearContents
    .Interior.Color = Cells(cTimelineDateLabelsRow, colPos.Task).Interior.Color
End With
With Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd))
    .ClearContents
    With .Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End With
With Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd))
    .ClearContents
    .Orientation = 90
    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlBottom
    .RowHeight = 22.25
    With .Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End With
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AQ6").Interior.Color
cd = WorksheetFunction.Min(Columns(colPos.ESD))
If cd = 0 Then cd = Date
sd = GetYearStartDate(cd)
sd = DateAdd("YYYY", (Cells(cRowPos, colPos.ScrollPosition) - 1), sd)
iCol = colPos.TimelineStart
Do Until iCol = colPos.TimelineEnd + 1
    td = DateAdd("YYYY", (iCol - colPos.TimelineStart), sd)
    Cells(cTimelineDateRow, iCol) = td
    Cells(cTimelineDateNumbersRow, iCol) = "'" & Year(td)
    iCol = iCol + 1
Loop
Cells(cTimelineDateRow, colPos.TimelineEnd + 1) = DateAdd("yyyy", 1, td)
Range(Cells(cTimelineDayNamesRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd)).ColumnWidth = gss.Range("CL2").Value
Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineEnd)).Interior.Color = gss.Range("AP6").Interior.Color
    If t Then
        AddGanttBarsForEachRow True
        EnableAll
    Else
        AddGanttBarsForEachRow True
        EnableAll
    End If
End Sub
Sub ScrollToStart(Optional t As Boolean, Optional t1 As Boolean)
Application.EnableEvents = False
Cells(cRowPos, colPos.ScrollPosition) = 1
Application.EnableEvents = True
If t1 = False Then ReBuildView
End Sub
Sub ScrollToToday(Optional t As Boolean)
Application.EnableEvents = False
Dim vType As String
Dim sDate As Date, wkSDate As Date
Dim sPos As Long, tDiff As Long
sPos = Cells(cRowPos, colPos.ScrollPosition)
vType = Cells(cRowPos, colPos.CurrentView)
sDate = Cells(cTimelineDateRow, colPos.TimelineStart)
wkSDate = GetWeekStartDate(Date, 0, 1)
Select Case vType
Case "D"
    tDiff = DateDiff("D", sDate, wkSDate) / 7
    If (sPos + tDiff) < 1 Then
        Cells(cRowPos, colPos.ScrollPosition) = 1
    Else
        Cells(cRowPos, colPos.ScrollPosition) = sPos + tDiff
    End If
Case "W"
    tDiff = DateDiff("W", sDate, wkSDate) - 4
    If (sPos + tDiff) < 1 Then
        Cells(cRowPos, colPos.ScrollPosition) = 1
    Else
        Cells(cRowPos, colPos.ScrollPosition) = sPos + tDiff
    End If
Case "M"
    tDiff = DateDiff("M", sDate, wkSDate) - 1
    If (sPos + tDiff) < 1 Then
        Cells(cRowPos, colPos.ScrollPosition) = 1
    Else
        Cells(cRowPos, colPos.ScrollPosition) = sPos + tDiff
    End If
Case "Q"
    wkSDate = GetQuarterStartDate(Date)
    tDiff = DateDiff("q", sDate, wkSDate) - 6
    If (sPos + tDiff) < 1 Then
        Cells(cRowPos, colPos.ScrollPosition) = 1
    Else
        Cells(cRowPos, colPos.ScrollPosition) = sPos + tDiff
    End If
Case "H"
    wkSDate = GetHalfYearStartDate(Date)
    tDiff = (DateDiff("d", sDate, wkSDate) \ 180) - 13
    If (sPos + tDiff) < 1 Then
        Cells(cRowPos, colPos.ScrollPosition) = 1
    Else
        Cells(cRowPos, colPos.ScrollPosition) = sPos + tDiff
    End If
Case "Y"
    wkSDate = GetYearStartDate(Date)
    tDiff = (DateDiff("YYYY", sDate, wkSDate)) - 6
    If (sPos + tDiff) < 1 Then
        Cells(cRowPos, colPos.ScrollPosition) = 1
    Else
        Cells(cRowPos, colPos.ScrollPosition) = sPos + tDiff
    End If
End Select
Application.EnableEvents = True
ReBuildView
End Sub
Sub ScrollToEnd(Optional t As Boolean)
Application.EnableEvents = False
Dim vType As String
Dim sDate As Date, eDate As Date, wkSDate As Date
Dim sPos As Long, tDiff As Long, sPosNew As Long
sPos = Cells(cRowPos, colPos.ScrollPosition)
vType = Cells(cRowPos, colPos.CurrentView)
sDate = Cells(cTimelineDateRow, colPos.TimelineStart)
eDate = CDate(WorksheetFunction.Max(Columns(colPos.EED)))
wkSDate = GetWeekStartDate(eDate, 0, 1)
Select Case vType
Case "D"
    tDiff = DateDiff("D", sDate, wkSDate) / 7
    If (sPos + tDiff) < 1 Then
        Cells(cRowPos, colPos.ScrollPosition) = 1
    Else
        Cells(cRowPos, colPos.ScrollPosition) = sPos + tDiff
    End If
Case "W"
    tDiff = DateDiff("W", sDate, wkSDate) - 4
    If (sPos + tDiff) < 1 Then
        Cells(cRowPos, colPos.ScrollPosition) = 1
    Else
        Cells(cRowPos, colPos.ScrollPosition) = sPos + tDiff
    End If
Case "M"
    tDiff = DateDiff("M", sDate, wkSDate) - 1
    If (sPos + tDiff) < 1 Then
        Cells(cRowPos, colPos.ScrollPosition) = 1
    Else
        Cells(cRowPos, colPos.ScrollPosition) = sPos + tDiff
    End If
Case "Q"
    wkSDate = GetQuarterStartDate(eDate)
    tDiff = DateDiff("q", sDate, wkSDate) - 12
    If (sPos + tDiff) < 1 Then
        Cells(cRowPos, colPos.ScrollPosition) = 1
    Else
        Cells(cRowPos, colPos.ScrollPosition) = sPos + tDiff
    End If
Case "H"
    wkSDate = GetHalfYearStartDate(eDate)
    tDiff = (DateDiff("d", sDate, wkSDate) \ 180) - 13
    If (sPos + tDiff) < 1 Then
        Cells(cRowPos, colPos.ScrollPosition) = 1
    Else
        Cells(cRowPos, colPos.ScrollPosition) = sPos + tDiff
    End If
Case "Y"
    wkSDate = GetYearStartDate(eDate)
    tDiff = (DateDiff("YYYY", sDate, wkSDate)) - 6
    If (sPos + tDiff) < 1 Then
        Cells(cRowPos, colPos.ScrollPosition) = 1
    Else
        Cells(cRowPos, colPos.ScrollPosition) = sPos + tDiff
    End If
End Select
Application.EnableEvents = True
ReBuildView
End Sub

Sub cleanuptimeline(tendcol As Long)
rungsschk
DisableAll
Range(Cells(cTimelineDateRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineMaxEnd - 1)).Borders.lineStyle = xlNone
With Range(Cells(cTimelineDateRow, colPos.TimelineStart), Cells(cTimelineDateRow, colPos.TimelineEnd))
.ClearFormats
.Interior.Color = gss.Cells(6, 35).Interior.Color
.Font.Color = gss.Cells(6, 35).Interior.Color
End With
With Range(Cells(cTimelineDateLabelsRow, colPos.TimelineStart), Cells(cTimelineDayNamesRow, colPos.TimelineEnd))
.Font.Color = rgbGray
.Font.size = 8
.Font.Name = "Arial"
.VerticalAlignment = xlCenter
.HorizontalAlignment = xlCenter
End With
With Range(Cells(cTimelineDateLabelsRow, colPos.TimelineStart), Cells(cTimelineDateLabelsRow, colPos.TimelineEnd))
.HorizontalAlignment = xlLeft
End With
Dim borderrange As Range
Set borderrange = Range(Cells(cTimelineDateNumbersRow, colPos.TimelineStart), Cells(cTimelineDateNumbersRow, colPos.TimelineStart))
With borderrange.Offset(0, -1).Resize(2, colPos.TimelineEnd - colPos.TimelineStart + 3).Borders(xlInsideVertical)
.lineStyle = xlContinuous
.Color = rgbLightGray
End With
Range(Cells(1, colPos.TimelineEnd + 1), Cells(Cells.Rows.Count, colPos.TimelineMaxEnd - 1)).EntireColumn.ColumnWidth = 0
Range(Cells(cTimelineDateRow, colPos.TimelineEnd + 1), Cells(cTimelineDayNamesRow, colPos.TimelineMaxEnd - 1)).ClearContents
Range(Cells(cTimelineDateRow, colPos.TimelineEnd + 1), Cells(cTimelineDayNamesRow, colPos.TimelineMaxEnd - 1)).ClearFormats
AddBordersToTasks
EnableAll
End Sub

Sub TriggerDailyViewBuild(Optional t As Boolean)
rungsschk
Application.EnableEvents = False
Cells(cRowPos, colPos.CurrentView) = "D"
Range("G6", "CCV6").Interior.Color = gss.Range("AI6").Interior.Color
Range("AC6", "CCV6").Font.Color = gss.Range("AI6").Interior.Color
Range("G9", "AB9").Interior.Color = gss.Range("AJ6").Interior.Color
Dim tendcol As Long
tendcol = gss.Range("CA2").Value + colPos.TimelineStart - 1
Cells(1, colPos.TimelineEnd).Value = vbNullString
Cells(1, tendcol).Value = "TimelineEnd"
ReCalculateColPos
Cells(cRowPos, colPos.ScrollPosition) = 1
Call BuildDailyView(1)
Call cleanuptimeline(tendcol)
Application.EnableEvents = True
End Sub
Sub TriggerWeeklyViewBuild(Optional t As Boolean)
rungsschk
Application.EnableEvents = False
Cells(cRowPos, colPos.CurrentView) = "W"
Dim tendcol As Long
tendcol = gss.Range("CB2").Value + colPos.TimelineStart - 1
Cells(1, colPos.TimelineEnd).Value = vbNullString
Cells(1, tendcol).Value = "TimelineEnd"
ReCalculateColPos
Cells(cRowPos, colPos.ScrollPosition) = 1
Call BuildWeeklyView(1)
Call cleanuptimeline(tendcol)
Application.EnableEvents = True
End Sub
Sub TriggerMonthlyViewBuild(Optional t As Boolean)
rungsschk
Application.EnableEvents = False
Cells(cRowPos, colPos.CurrentView) = "M"
Dim tendcol As Long
tendcol = gss.Range("CC2").Value + colPos.TimelineStart - 1
Cells(1, colPos.TimelineEnd).Value = vbNullString
Cells(1, tendcol).Value = "TimelineEnd"
ReCalculateColPos
Cells(cRowPos, colPos.ScrollPosition) = 1
Call BuildMonthlyView(1)
Call cleanuptimeline(tendcol)
Application.EnableEvents = True
End Sub
Sub TriggerQuarterlyViewBuild(Optional t As Boolean)
rungsschk
If RestrictThisInTrial Then
    ShowLimitation
    Exit Sub
End If
Application.EnableEvents = False
Cells(cRowPos, colPos.CurrentView) = "Q"
Dim tendcol As Long
tendcol = gss.Range("CD2").Value + colPos.TimelineStart - 1
Cells(1, colPos.TimelineEnd).Value = vbNullString
Cells(1, tendcol).Value = "TimelineEnd"
ReCalculateColPos
Cells(cRowPos, colPos.ScrollPosition) = 1
Call BuildQuarterlyView(1)
Call cleanuptimeline(tendcol)
Application.EnableEvents = True
End Sub
Sub TriggerHalfYearlyViewBuild(Optional t As String)
rungsschk
If RestrictThisInTrial Then
    ShowLimitation
    Exit Sub
End If
Application.EnableEvents = False
Cells(cRowPos, colPos.CurrentView) = "H"
Dim tendcol As Long
tendcol = gss.Range("CE2").Value + colPos.TimelineStart - 1
Cells(1, colPos.TimelineEnd).Value = vbNullString
Cells(1, tendcol).Value = "TimelineEnd"
ReCalculateColPos
Cells(cRowPos, colPos.ScrollPosition) = 1
Call BuildHalfYearlyView(1)
Call cleanuptimeline(tendcol)
Application.EnableEvents = True
End Sub
Sub TriggerYearlyViewBuild(Optional t As String)
rungsschk
If RestrictThisInTrial Then
    ShowLimitation
    Exit Sub
End If
Application.EnableEvents = False
Cells(cRowPos, colPos.CurrentView) = "Y"
Dim tendcol As Long
tendcol = gss.Range("CF2").Value + colPos.TimelineStart - 1
Cells(1, colPos.TimelineEnd).Value = vbNullString
Cells(1, tendcol).Value = "TimelineEnd"
ReCalculateColPos
Cells(cRowPos, colPos.ScrollPosition) = 1
Call BuildYearlyView(1)
Call cleanuptimeline(tendcol)
Application.EnableEvents = True
End Sub

' InQuest injected base64 decoded content
' Fj{m
' z+xYZ
' 't*'
' x)br
' zYUj[
' *'J)
' Gz(!
' zw2M
' BjW.
' zw"z
' zw2.+-
' j{mJ
' zjej
' u(^z
' BjW.
' )^J)

INQUEST-PP=macro
