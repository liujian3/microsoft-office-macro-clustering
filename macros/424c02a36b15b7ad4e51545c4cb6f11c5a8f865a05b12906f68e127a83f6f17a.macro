Attribute VB_Name = "EditorialMacros"
Option Explicit

Public Sub InitForEditorial()
  '
  ' Code for editorial special setups that need to be called
  '  after saving or on worksheet initialization.
  '
End Sub

Public Sub Workbook_BeforeClose_Editorial()
  '
  ' Code for editorial special setups that need to be called
  '  before close.
  '
End Sub

Attribute VB_Name = "EditorialMacros_Deactivate"
Option Explicit

Public Sub Workbook_Deactivate_Editorial()
  '
  ' Code for editorial special setups that need to be called
  '  when leaving the workbook without closing it. This, will
  '  also run when closing workbook.
  '
End Sub

Attribute VB_Name = "PPC_CodeModule"
Public Sub MacroCheck()
'Do nothing. This sub will be called from .NET code to check macro is enabled or not
End Sub


Public Function PPC_GetClientName()
  PPC_GetClientName = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name")
End Function

Public Function PPC_GetBalanceSheetDate()
  PPC_GetBalanceSheetDate = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date")
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "TB1, 87, 0, MSForms, TextBox"
'Private Sub Worksheet_Activate()
'Range("A1").Select
'End Sub

Sub clear()
'
' clear Macro
' Macro recorded by Practitioners Publishing Company
'

'
Dim Msg, Style, TITLE, Response
Dim Msg2, Style2, TITLE2, Response2
Beep
Msg = "All input information will be cleared. Do you want to continue?"   ' Define message.
Style = vbOKCancel + vbQuestion + vbDefaultButton1 ' Define buttons.
TITLE = "PPC's Workpapers"  ' Define title.
Response = MsgBox(Msg, Style, TITLE)
If Response = vbCancel Then    ' User chose Cancel.
    GoTo Quit
End If

Application.ScreenUpdating = False
Sheet1.Select
Range("ClearInput").ClearContents
If TB1.Value <> "" Then
    TB1_GotFocus
    TB1.Value = ""
    TB1_LostFocus
End If
Range("input").Select
For Each cell In Range("OtherCaptions")
    If cell.Value <> "Other" Then
        Beep
        Msg2 = "Do you want to reset the manual captions to 'Other'?"   ' Define message.
        Style2 = vbYesNo + vbQuestion + vbDefaultButton2 ' Define buttons.
        TITLE2 = "PPC's Workpapers"  ' Define title.
        Response2 = MsgBox(Msg2, Style2, TITLE2)
        If Response2 = vbYes Then    ' User chose Cancel.
            Range("OtherCaptions").Cells.Value = "Other"
        End If
        GoTo Headers
    End If
Next cell

Headers:
Range("fsdate").Value = "=PPC_GetBalanceSheetDate()"
Range("client").Value = "=PPC_GetClientName()"
Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name") = "[Client Name]"
Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date") = ""
Application.ActiveWorkbook.ActiveSheet.EnableCalculation = False
Application.ActiveWorkbook.ActiveSheet.EnableCalculation = True
Range("input").Select
Application.ScreenUpdating = True
Exit Sub

Quit:
ActiveCell.Activate
End Sub

Private Static Sub TB1_GotFocus()

    Dim BegText As String

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
'    Range("TBB").Value = ""
    If TB1.Activate = False Then
        Exit Sub
    End If
    TB1.BorderColor = &H8000& ''green border to show textbox has focus
    
    BegText = TB1.Text           'the next 3 lines used to force the green border to appear
    TB1.Text = TB1.Text & vbCrLf
    TB1.Text = BegText

    Application.ScreenUpdating = True

End Sub

Private Sub TB1_Change()

    Application.EnableEvents = False
    Application.EnableEvents = True

End Sub

Private Sub TB1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    
    Dim MoveBack As Boolean
        
    Select Case KeyCode
            ''' This is the only key necessary.
        Case vbKeyTab
            Application.ScreenUpdating = False
                ''' Determine if need to move backwards.
            MoveBack = CBool(Shift And 1)
                ''' Activate appropriate control based on key(s) pressed.
            If MoveBack Then
                Call TB1_LostFocus
'                Range("Conclude1").Select
            Else
                Call TB1_LostFocus
            End If
                
            Application.ScreenUpdating = True
    End Select

End Sub

Private Sub TB1_LostFocus()

    Dim TargetCellTB1 As Range
    Dim AnchorSheet As Worksheet
    Set TargetCellTB1 = ActiveCell
    Set AnchorSheet = ActiveSheet
    Application.EnableEvents = False
   
    If AnchorSheet.Name = "Disclosure" Then
        Sheet1.Activate
    Else
        TB1.Activate
    End If
    TB1.BorderColor = &HC0C0C0 'grey border to show no focus
    TB1.Width = 480
    If TB1.Height < 408 Then
        TB1.ScrollBars = fmScrollBarsNone
    End If
    If TB1.LineCount <= 4 Then
        TB1.Height = 52.5
        Range("TBB").RowHeight = 52.5
    ElseIf TB1.LineCount > 4 And TB1.LineCount <= 9 Then
        TB1.Height = ((TB1.LineCount) * 1.02) * 12.75
        Range("TBB").RowHeight = ((TB1.LineCount) * 1.02) * 12.75
    ElseIf TB1.LineCount > 9 And TB1.LineCount <= 20 Then
        TB1.Height = ((TB1.LineCount) * 0.99) * 12.75
        Range("TBB").RowHeight = ((TB1.LineCount) * 0.99) * 12.75
    ElseIf TB1.LineCount > 20 And TB1.LineCount <= 30 Then
        TB1.Height = ((TB1.LineCount) * 0.98) * 12.75
        Range("TBB").RowHeight = ((TB1.LineCount) * 0.98) * 12.75
    ElseIf TB1.LineCount > 30 And TB1.LineCount <= 33 Then
        TB1.Height = ((TB1.LineCount) * 0.97) * 12.75
        Range("TBB").RowHeight = ((TB1.LineCount) * 0.97) * 12.75
    ElseIf TB1.LineCount > 33 Then
        With TB1
            .Height = 408
            .ScrollBars = fmScrollBarsVertical
        End With
        Range("TBB").RowHeight = 408
    End If
    If AnchorSheet.Name = "Disclosure" Then
        Range("Conclude1").Select
        Application.EnableEvents = True
        Sheet2.Activate
        Exit Sub
    Else
        If TB1.Value = "" Then
            Range("TBB").Value = "No"
        Else
            Range("TBB").Value = "Yes"
        End If
        Range("Conclude1").Select
    End If
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True


End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()

    Application.ScreenUpdating = False
  
    Range("TotalAssetsDisc").EntireRow.Hidden = False
    Range("UnavailableAssetsDisc").EntireRow.Hidden = False
    
    If Application.WorksheetFunction.Sum(Range("TotalAssetsDisc")) = 0 Then
        If Sheet1.TB1.Value <> "" Then
            Range("DiscDetail1").EntireRow.Hidden = True
        Else
            Range("DiscDetail1").Value = ""
            Range("DiscDetail1").EntireRow.Hidden = True
        End If
    Else
        Range("DiscDetail1").EntireRow.Hidden = False
        If Sheet1.TB1.Value = "" Then
            Range("DiscDetail1").Value = "A qualitative disclosure " & _
             "will not generate until a description of the " & _
             "applicable restrictions to be disclosed under FASB " & _
             "ASC 958-210-50 is entered in the textbox on the Input " & _
             "worksheet."
        Else
            Range("DiscDetail1").Value = Sheet1.TB1.Value
        End If
''   See the description of the MergeUnmerge routine below.
        Call MergeUnmerge
        For Each cell In Range("TotalAssetsDisc")
            If cell.Value = "" Or cell.Value = 0 Then
                cell.EntireRow.Hidden = True
            End If
        Next cell
    End If
'    If Workbook.Application.Sum.Range("UnavailableAssetsDisc") <> 0 Then
    If Application.WorksheetFunction.Sum(Range("UnavailableAssetsDisc")) = 0 Then
'        Range("UnavailableAssetsDisc").EntireRow.Hidden = True
        Range(Range("UnavailableAssetsDisc"), Range("UnavailableAssetsDisc").Offset(2, 0)).EntireRow.Hidden = True
    Else
        For Each cell In Range("UnavailableAssetsDisc")
            If cell.Value = "" Or cell.Value = 0 Then
                cell.EntireRow.Hidden = True
            End If
        Next cell
'    If Application.WorksheetFunction.Sum(Range("UnavailableAssetsDisc")) <> 0 Then
    End If
    
    Application.ScreenUpdating = True

    Sheet2.Range("A1").Select

End Sub

Private Sub MergeUnmerge()

'   To enable the qualitative disclosure row(s) on the Disclosure _
    worksheet to automatically adjust height depending on the amount _
    of text to be held. The cells in the disclosure row(s) need to be _
    unmerged before the "AutoFit" is performed. After the AutoFit, _
    the cells of each rows(s) are remerged.

    Range("DiscDetail1").Select
    Selection.UnMerge
    Range("DiscDetail1").Select
    Selection.ColumnWidth = 76
    Selection.Rows.AutoFit
    Selection.ColumnWidth = 45
    Range(Range("DiscDetail1"), Range("DiscDetail1").Offset(0, 2)).Select
    Selection.Merge
    With Selection
        .VerticalAlignment = xlTop
        .WrapText = True
        .Orientation = 0
        .MergeCells = True
    End With
'    Range("DiscDetail2").Select
'    Selection.UnMerge
'    Range("DiscDetail2").Select
'    Selection.ColumnWidth = 76
'    Selection.Rows.AutoFit
'    Selection.ColumnWidth = 34.43
'    Range(Range("DiscDetail2"), Range("DiscDetail2").Offset(0, 2)).Select
'    Selection.Merge
'    With Selection
'        .VerticalAlignment = xlTop
'        .WrapText = True
'        .Orientation = 0
'        .MergeCells = True
'    End With
'    Range("DiscDetail3").Select
'    Selection.UnMerge
'    Range("DiscDetail3").Select
'    Selection.ColumnWidth = 76
'    Selection.Rows.AutoFit
'    Selection.ColumnWidth = 34.43
'    Range(Range("DiscDetail3"), Range("DiscDetail3").Offset(0, 2)).Select
'    Selection.Merge
'    With Selection
'        .VerticalAlignment = xlTop
'        .WrapText = True
'        .Orientation = 0
'        .MergeCells = True
'    End With
'    Range("a1").Select

End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'
' This code is protected and passworded when complete.
'

Private Const XL4MACRO As String = "PPCSecurityMacro"
Private Const INFORMATION As String = "INFORMATION"

Private Const bIsIDxR As Boolean = False        ' Set True if Interactive Disclosure Library
#Const IDxR = 0                                 ' Set 1 if Interactive Disclosure Library

      ' Declare security class

Private Sub Workbook_Activate()

  
  InitForEditorial
  
  On Error GoTo 0
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  Workbook_BeforeClose_Editorial
End Sub



Public Function bIsSaving() As Boolean
  bIsSaving = False
End Function



INQUEST-PP=macro
