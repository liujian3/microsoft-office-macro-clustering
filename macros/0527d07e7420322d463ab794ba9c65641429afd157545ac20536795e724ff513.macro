Attribute VB_Name = "BidRpaMod"
'------------------------------------------------------------------------------------------
' RPA Report
' Detail ID: 378
' Date: _
' Author:   Kirk Westover - SMART Developement
'------------------------------------------------------------------------------------------
Option Explicit

Private CurrentPlanCharge_Col As Integer  '= Current Plan Charge {CQ}
Private AvgMouOverCharges_Col As Integer  '= Base Rate Plan Avg Overage Bucket MOU Charges {BG}  default = 59
Private MonthlySavings_Col As Integer     '= Monthly Savings {CS} default = 97
Private YearlySavings_Col As Integer      '= Yearly Savings {column CT} default = 98
Private SuggestedPlanMRC_Col As Integer   '= Suggested Plan MRC {column CJ}
Private PricePlanMRC_Col As Integer       '= Price Plan MRC {column AC}
Private AvgMouOverage_Col As Integer      '=Avg Base Rate Plan Bucket MOU Overage {BF} default = 58
Private PeakMouCharge_Col As Integer      '=Peak MOU Charge {CL} default = 90



''' Applies final formating when report is first open
Sub Setup()
   On Error GoTo ErrH
   
   SetDefaultColumns
   
   wsData.Activate
   ' Disclaimer moved to seperate tab per Christina A. H. Smith (AT&T Business Solutions), krw 8/4/2009
   'insert legal disclaimer
   'Const LEGAL = "Wireless rate plan recommendations are not a guarantee of lower wireless costs.  Analysis and recommendations are made based on end user|fffd|s past wireless usage and charges; usage patterns differ month to month and user to user; wireless costs may even increase when switching plans.  Migration to promotional rate plans requires fulfillment of all promotional requirements, which may include new contract term, different coverage areas, and new rate plan terms and conditions.  End users switching to another rate plan may lose promotional benefits available on their current plan.  Subject to terms and conditions contained in business customer|fffd|s qualified agreement with AT&T Mobility, Terms of Service, and applicable rate plan brochures. |fffd| 2009 AT&T Intellectual Property. All rights reserved. AT&T, the AT&T logo and all other marks contained herein are trademarks of AT&T Intellectual Property and/or AT&T affiliated companies."
   'Rows("4:4").Insert Shift:=xlDown
   'Range("A4").Value = LEGAL
   'Range("A4").Font.Color = vbRed
      
   'fix column headers
   Cells.EntireColumn.ColumnWidth = 20
   Cells.EntireColumn.Autofit
   Columns("A:A").ColumnWidth = 14.5
   Range("A6").Select
   
   ' apply specific formatting to specific columns/lookup where certain columns are
   FixColumns
   
   'Display run date: "Report Run on Aug 6, 2009"
   Range("a4").Value = "Report Run on " & Format(Replace(Replace(Names("DateCreated").Value, "=", ""), """", ""), "MMM D, YYYY")

   wsLegal.Activate
   
   'add named ranges using column numbers found in FixColumns()
   CreateNamedRanges
   
   'add forumlas to legal sheet
   AddFormulas
   
   wsLegal.Columns("B:B").ColumnWidth = 50
   
   Exit Sub
   
ErrH:
   If DebugError("Setup") Then
      Stop 'Press F8 twice to return to the line where the error occurred.
      Resume
   Else
      Resume Next
   End If

End Sub


''' set default values for column locations
Private Sub SetDefaultColumns()
   CurrentPlanCharge_Col = 95 '  = Current Plan Charge {CQ}
   AvgMouOverCharges_Col = 59 ' = BASE RATE PLAN AVG OVERAGE BUCKET MOU CHARGES {BG} default = 59
   MonthlySavings_Col = 97 '= Monthly Savings {CS}
   YearlySavings_Col = 98  '= Yearly Savings {column CT}
   SuggestedPlanMRC_Col = 88  '= Suggested Plan MRC {column CJ}
   PricePlanMRC_Col = 29  ' = Price Plan MRC {column AC}
   AvgMouOverage_Col = 58      '=Avg Base Rate Plan Bucket MOU Overage {BF} default = 58
   PeakMouCharge_Col = 90      '=Peak MOU Charge {CL} default = 90
   
End Sub


''' apply specific formatting to specific columns/lookup where certain columns are
Private Sub FixColumns()

   Dim HeaderRow As Range
   Set HeaderRow = Range("DataTable").CurrentRegion.Rows(1)
   Dim cell As Range
   For Each cell In HeaderRow.Cells
   
      Select Case Trim(UCase(cell.Value))
      
         Case "BCID"
            cell.EntireColumn.ColumnWidth = 12
            
            Case "CURRENT PLAN CHARGE"
               CurrentPlanCharge_Col = cell.Column
            
            Case "BASE RATE PLAN AVG OVERAGE BUCKET MOU CHARGES" '=  {BG}  default = 59
               AvgMouOverCharges_Col = cell.Column
            
            Case "YEARLY SAVINGS"
               YearlySavings_Col = cell.Column
               
            Case "SUGGESTED PLAN MRC"
               SuggestedPlanMRC_Col = cell.Column
               
            Case "PRICE PLAN MRC"
               PricePlanMRC_Col = cell.Column
               
            Case "AVG BASE RATE PLAN BUCKET MOU OVERAGE"
               AvgMouOverage_Col = cell.Column       '= {BF} default = 58
               
            Case "PEAK MOU CHARGE"
               PeakMouCharge_Col = cell.Column       '= {CL} default = 90
               
            Case "MONTHLY SAVINGS"
               MonthlySavings_Col = cell.Column
                                            
      End Select
         
   Next
   
End Sub


''' create named ranges based on value found in FixColumns
Private Sub CreateNamedRanges()

   'get reference to data table w/o column header
   Dim dataNoHeader As Range
   Set dataNoHeader = Range("DataTable")
   Set dataNoHeader = dataNoHeader.Offset(1).Resize(dataNoHeader.Rows.Count - 1)
   
   'add named ranges using column numbers found in FixColumns()
   Names.Add Name:="CurrentPlanCharge", RefersToLocal:=dataNoHeader.Columns(CurrentPlanCharge_Col)
   Names.Add Name:="AvgMouOverCharges", RefersToLocal:=dataNoHeader.Columns(AvgMouOverCharges_Col)
   Names.Add Name:="MonthlySavings", RefersToLocal:=dataNoHeader.Columns(MonthlySavings_Col)
   Names.Add Name:="YearlySavings", RefersToLocal:=dataNoHeader.Columns(YearlySavings_Col)
   Names.Add Name:="SuggestedPlanMRC", RefersToLocal:=dataNoHeader.Columns(SuggestedPlanMRC_Col)
   Names.Add Name:="PricePlanMRC", RefersToLocal:=dataNoHeader.Columns(PricePlanMRC_Col)
   Names.Add Name:="AvgMouOverage", RefersToLocal:=dataNoHeader.Columns(AvgMouOverage_Col)
   Names.Add Name:="PeakMouCharge", RefersToLocal:=dataNoHeader.Columns(PeakMouCharge_Col)
   Names.Add Name:="AvgOverageCharge", RefersToLocal:=dataNoHeader.Columns(AvgMouOverCharges_Col)

End Sub


''' add formulas on Disclaimers tab
Private Sub AddFormulas()
   Range("CurrentPlanChange_Sum").FORMULA = "=Sum(PricePlanMRC)" ' "=Sum(CurrentPlanCharge)"  per Christina A. H. Smith (AT&T Business Solutions), krw 10/16/2009
   Range("AvgMouOverCharges_Sum").FORMULA = "=Sum(AvgMouOverCharges)"
   Range("AvgProjectedOverageCost").FORMULA = "=MultiplyUnlessText(AvgMouOverage,PeakMouCharge,AvgOverageCharge)"
   Range("MonthlySavings_Sum").FORMULA = "=sum(MonthlySavings)"
   Range("YearlySavings_Sum").FORMULA = "=Sum(YearlySavings)"
   Range("ProjectedMonthlyCost").FORMULA = "=SumFromTwoColumns(SuggestedPlanMRC,PricePlanMRC)"
End Sub



''' add up all numeric value sin MainColumn; if a value in MainColumn is non-numeric then get value
''' from AltColumn for same row; if the value in AltColumn is non-numeric/blank then treat as zero
Public Function SumFromTwoColumns(MainColumn As Range, AltColumn As Range) As Single
   Dim cell As Range
   Dim total As Single: total = 0
   Dim currentRow As Long
   
   For Each cell In MainColumn.Cells
      currentRow = currentRow + 1
      If IsNumeric(cell.Value) Then
         total = total + cell.Value
      Else
         
         If IsNumeric(AltColumn.Cells(currentRow).Value) Then
            total = total + AltColumn.Cells(currentRow).Value
         'Else
            'if non-numeric or blank, treat as zero
            'Debug.Print cell.Address & ": " & cell.Value & " --> " & AltColumn.Cells(currentRow).Value
         End If
      End If
      
   Next
   
   SumFromTwoColumns = total
   
End Function


''' Sum p1 * p2 unless either is non-numeric, otherwise add value from Alt to total
'''  logic provided by Christina A. H. Smith (AT&T Business Solutions), krw 10/16/2009
Public Function MultiplyUnlessText(P1 As Range, P2 As Range, Alt As Range) As Single
   Dim total As Single: total = 0
   Dim currentRow As Long: currentRow = 0
   Dim cell As Range
   
   For Each cell In P1.Cells
      currentRow = currentRow + 1
      If IsNumeric(P2.Cells(currentRow).Value) And IsNumeric(P1.Cells(currentRow).Value) Then
         total = total + (P1.Cells(currentRow).Value * P2.Cells(currentRow).Value)
      Else
         total = total + Alt.Cells(currentRow).Value
      End If
   
   Next
      
   MultiplyUnlessText = total
End Function


'---
' Procedure: DebugError
' Author: Daniel Knowlton June 2001 - Jan 2002
' Purpose: Handles error, allows for option to debug or continue formatting.
' Parameters: Source As String - Required. Name of the procedure from which the error was raised.
'             Description As String - Optional. A custom description to show to the user.
' Returns: Returns TRUE to break for debugging;
'          Returns FALSE to exit sub-routine where error occurred and continue processing
'---
Public Function DebugError(Source As String, Optional Description As String) As Boolean
      
   If Err = 18 Then End 'ESC' key pressed
   If Description <> "" Then Err.Description = Description
   
   'Give user an option to debug
   Dim intButtonClicked As Integer
   intButtonClicked = MsgBox("Unexpected error occurred in procedure '" & Source & "'" & vbLf & vbLf & _
                             "Do you wish to debug?  Otherwise, formatting will continue.", _
                             vbExclamation + vbYesNo + vbDefaultButton1, _
                             "Error " & Err.Number & ": " & Err.Description)
                             
   If intButtonClicked = vbYes Then
      Application.ScreenUpdating = True
      DebugError = True
   Else
      DebugError = False
   End If
   Err.Clear
End Function







Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "modSMARTRptMacros"
'*********************************************************************************************
'  Name:  modSMART_ReportMacros
'  Description:  This entire module is imported into a new Excel report.  It contains macros
'     that are used when the user opens the report.  These routines apply final formatting to
'     the report, create and delete the SMART Menu, and respond to menu commands.
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Chris Bartsch, Darren Cook, and Dan Knowlton
'     v1.5 by Joe Lindsay, June 2003
'     v2.0 by Joe Lindsay, December 2003
'*********************************************************************************************
Option Explicit

'*********************************************************************************************
'  Name:  Auto_Open
'  Description:   Handles saving report file if opened from a zipped EXE file.
'     Also calls Main for AutoRun for the formatter.
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Chris Bartsch
'     v1.5 by Darren Cook
'*********************************************************************************************
Sub Auto_Open()
   Dim dtmCreated As Date   'Date & time that the report was originally created
   Dim intDays As Integer   'Number of days report will be stored on the Formatter server
   Dim strSaveAsFileName As String   'The name of the file to save the report as (local copy)
   Dim intCount As Integer
   Dim strCurrSheet As String
   
   On Error Resume Next
   'Assign procedures to workbook events
   ThisWorkbook.OnSheetActivate = "DisplaySMARTMenu"   'Build and enable SMART Menu options
   ThisWorkbook.OnSheetDeactivate = "DeleteSMARTMenu"   'Remove SMART Menu entirely
   
   'Build SMART Menu and enable appropriate options
   Call DisplaySMARTMenu
   'Apply Custom Formatting (if it's the first time opening this report)
   If InStr(Application.Names("FirstTime"), "TRUE") Then
      Application.Visible = True
      AppActivate Application.Name   'Bring Excel's window to the front so user can see
      DoEvents
      Dim OldStatusBar As Boolean
      Application.Cursor = xlWait
      Application.ScreenUpdating = False
      OldStatusBar = Application.DisplayStatusBar
      Application.StatusBar = "Applying final formatting, please wait..."
      Application.DisplayStatusBar = True

      Call [Setup]
      Application.StatusBar = False
      Application.DisplayStatusBar = OldStatusBar
      Application.Names("FirstTime").Value = "=FALSE"
      Application.ScreenUpdating = True
      AppActivate Application.Name

retrySave:
      'Prompt user to Save the report locally (this step can be skipped if the report was
      '   saved to a file server because it will not expire.)
      If ThisWorkbook.Names("CopiedToServer").Value = "=FALSE" Then
         strSaveAsFileName = Application.GetSaveAsFilename( _
            InitialFilename:=(ThisWorkbook.Name), _
            FileFilter:="Microsoft Excel File (*.xls),*.xls", _
            Title:="Save SMART Report " & ThisWorkbook.Name)
         'Warn user if they hit cancel
         If strSaveAsFileName = "False" Then
            'Determine age limit of the report
            If InStr(UCase(Application.Names("ReportType").RefersTo), "BATCH") > 0 Then
               intDays = 14   'SMART Batch
            Else
               intDays = 7   'SMART
            End If
            dtmCreated = CDate(Mid(Application.Names("DateCreated").RefersTo, 3, _
               Len(Application.Names("DateCreated").RefersTo) - 3))
            'Give them a WARNING
            If MsgBox("WARNING:  It is recommended that you save this report to your " & _
               "computer.  Save it now?" & Chr(10) & Chr(10) & "This report will only " & _
               "be temporarily stored on the SMART server.  You have until " & _
               Format(dtmCreated + intDays, "mm/dd/yyyy") & " to save this report before " & _
               "it is removed from the SMART report repository.  It is recommended that " & _
               "you save this file now to avoid losing it." & Chr(10) & Chr(10) & "Click " & _
               "OK to return to the 'Save Report' dialog box.  Click Cancel to return to " & _
               "the report without saving it.", vbOKCancel + vbExclamation, _
               "Save SMART Report") = 1 Then
               GoTo retrySave
            Else
               Application.Cursor = xlDefault
               Exit Sub
            End If
         Else
            Application.Cursor = xlWait
            Err.Clear
            ThisWorkbook.SaveAs (strSaveAsFileName)   'Save file in new location
            DoEvents
         End If   'User cancelled save
      End If   'Not saved to server
      Application.Cursor = xlDefault
   End If   'Report opened for first time
End Sub

'*********************************************************************************************
'  Name:  DisplaySMARTMenu
'  Description:
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Chris Bartsch, Darren Cook, and Dan Knowlton
'*********************************************************************************************
Sub DisplaySMARTMenu()
   Dim SmartBar As Object
   
   On Error Resume Next
   'Make sure SMART Menus from other reports are deleted
   Application.CommandBars("Worksheet Menu Bar").Controls("SMART").Delete
   Err.Clear
   Call BuildSMARTMenu
   'Enable appropriate controls
   Set SmartBar = Application.CommandBars("Worksheet Menu Bar").Controls("SMART")
   If ActiveSheet.Name = "SMART Data" Then
      SmartBar.Controls("Show/Hide Columns").Enabled = True
      SmartBar.Controls("AutoFilter").Enabled = True
      SmartBar.Controls("Sort...").Enabled = True
      SmartBar.Controls("Reformat SMART Data").Enabled = True
      SmartBar.Controls("Reformat Pivot Table(s)").Enabled = False
      SmartBar.Controls("About this Report").Enabled = True
   ElseIf ActiveSheet.PivotTables.Count <> 0 Then
      SmartBar.Controls("Show/Hide Columns").Enabled = False
      SmartBar.Controls("AutoFilter").Enabled = False
      SmartBar.Controls("Sort...").Enabled = False
      SmartBar.Controls("Reformat SMART Data").Enabled = False
      SmartBar.Controls("Reformat Pivot Table(s)").Enabled = True
      SmartBar.Controls("About this Report").Enabled = True
   Else
      SmartBar.Controls("Show/Hide Columns").Enabled = False
      SmartBar.Controls("AutoFilter").Enabled = True
      SmartBar.Controls("Sort...").Enabled = True
      SmartBar.Controls("Reformat SMART Data").Enabled = False
      SmartBar.Controls("Reformat Pivot Table(s)").Enabled = False
      SmartBar.Controls("About this Report").Enabled = True
   End If
   Call [EnableLocalMenu]
End Sub

'*********************************************************************************************
'  Name:  DeleteSMARTMenu
'  Description:
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Chris Bartsch, Darren Cook, and Dan Knowlton
'*********************************************************************************************
Sub DeleteSMARTMenu()
   Dim blnSaved As Boolean
   
   On Error Resume Next
   'Get saved status
   blnSaved = ThisWorkbook.Saved
   Application.CommandBars("Worksheet Menu Bar").Controls("SMART").Delete
   Err.Clear
   'Don't prompt user to save if they have already
   ThisWorkbook.Saved = blnSaved
   Call [DisableLocalMenu]
End Sub

'*********************************************************************************************
'  Name:  Reformat
'  Description:  Calls routines to reshade data table and format headers/totalrow
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Darren Cook
'*********************************************************************************************
Sub Reformat()
   On Error Resume Next
   Range("DataTable").Worksheet.Activate
   Call ShadeBars
   Call HeaderUpdate(ActiveSheet.Range("HeaderRows"))
   If InStr(ActiveWorkbook.Names("NoTotals"), "FALSE") Then
      Call FormatTotalsRow
   End If
End Sub

'*********************************************************************************************
'  Name:  SortData
'  Description:  Selects datatable cell and invokes sort dialog
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Chris Bartsch
'     v1.5 by Darren Cook
'*********************************************************************************************
Sub SortData()
   On Error Resume Next
   'Sets up data sorting when the button is clicked.
   Range("DataTable").Worksheet.Activate
   Range("DataTable").Cells(1, 1).Select
   Application.SendKeys "%DS"
End Sub

'*********************************************************************************************
'  Name:  SetAutoFilter
'  Description:  Turns on auto filtering when button is clicked.
'  Arguments:
'     SetToOn:  Will turn on AutoFiltering if true.  If not specified, SetAutoFilter will
'        toggle autofiltering.
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Chris Bartsch
'     v1.5 by Darren Cook
'*********************************************************************************************
Sub SetAutoFilter(Optional SetToOn As String)
   Dim SmartBar As Object
   
   On Error Resume Next
   'If no parameter defined, then toggle from current state
   If IsMissing(SetToOn) Or SetToOn = "" Then
      SetToOn = Not ActiveSheet.AutoFilterMode
   End If
   'Turns autofiltering on or off
   Range("DataTable").Worksheet.Activate
   If LCase(SetToOn) = "true" Then
      ActiveSheet.AutoFilterMode = False   'Turn off first
      Range("DataTable").Cells(1, 1).Select
      Selection.AutoFilter
      Set SmartBar = Application.CommandBars("Worksheet Menu Bar").Controls("SMART")
      SmartBar.Controls("AutoFilter").State = msoButtonDown
      Range("A1").Select
   Else
      Range("DataTable").Cells(1, 1).Select
      ActiveSheet.AutoFilterMode = False
      Set SmartBar = Application.CommandBars("Worksheet Menu Bar").Controls("SMART")
      SmartBar.Controls("AutoFilter").State = msoButtonUp
      Range("A1").Select
   End If
End Sub

'*********************************************************************************************
'  Name:  FormatTotalsRow
'  Description:  Format the "Totals" row
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Chris Bartsch
'     v1.5 by Darren Cook
'*********************************************************************************************
Function FormatTotalsRow()
   With Range("'" & ActiveWorkbook.Name & "'!TotalRow")
      .Cells(1, 1).Value = "Totals"
      .Cells(2, 1).Value = "Averages"
      .EntireRow.RowHeight = 22
      .VerticalAlignment = xlCenter
      .EntireRow.Font.Bold = True
      .Interior.ColorIndex = Range("'" & ActiveWorkbook.Name & "'!DataTable").Cells(1, _
         1).Interior.ColorIndex
      .Rows(1).Borders(xlEdgeTop).LineStyle = xlDouble
   End With
End Function

'*********************************************************************************************
'  Name:  ShadeBars
'  Description:  Reformat the data table with bars
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Chris Bartsch
'     v1.5 by Darren Cook
'*********************************************************************************************
Sub ShadeBars()
   Dim r As Range
   Dim ShadeRange As Range
   Dim DataTable As Range
   
   On Error Resume Next
   Set DataTable = Range("'" & ActiveWorkbook.Name & "'!DataTable")
   Set ShadeRange = DataTable.Offset(1, 0).Resize(DataTable.Rows.Count - 1, _
      DataTable.Columns.Count).Rows
   'Clear all cells
   ShadeRange.Interior.ColorIndex = xlNone
   'Set the color for every 3rd cell
   For Each r In ShadeRange.Rows
      If r.Row Mod 3 = 0 Then r.Interior.ColorIndex = 15
   Next
   Err.Clear
End Sub

'*********************************************************************************************
'  Name:  SubtotalUnique
'  Description:  Subtotals only unique rows of data in a column range based on that column
'     range or another parallel column range.  Subtotals information in stRange upon a
'     change in UniqueRange.   If UniqueRange is undefined stRange is used.  Currently
'     incomplete as not all Function_Nums programmed.
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Chris Bartsch
'     v1.5 by Darren Cook
'*********************************************************************************************
Function SubtotalUnique(Function_Num, ByVal stRange As Range, _
   Optional ByVal UniqueRange As Range)
   Dim Unique As String   'Stores unique values
   Dim c As Range   'Indiv cell in unique range
   Dim d As String   'Subtotal cell matching c
   Dim Count As Long
   Dim t As String * 1
   
   On Error GoTo ErrH
   Application.Volatile
   Application.EnableCancelKey = xlErrorHandler
   t = Chr(9)
   If UniqueRange Is Nothing Then Set UniqueRange = stRange
   For Each c In UniqueRange
      Application.Cursor = xlWait
      'Works in 1/5 the time as "If c <> c.offset(-1,0) Then", but this requires sort by _
         unique at all times.  & t ensures that c cannot be found inside another c
      If InStr(Unique, c & t) = 0 And c.EntireRow.Hidden = False Then
         Count = Count + 1
         d = c.Offset(0, stRange.Column - UniqueRange.Column)
         Select Case Function_Num
            Case 1   'Avg
               SubtotalUnique = (SubtotalUnique + d) / Count
            Case 2   'Count (Numeric only)
               If IsNumeric(d) Then SubtotalUnique = SubtotalUnique + 1
            Case 3   'CountA (AlphaNumeric)
               SubtotalUnique = Count
'            Case 4   'MAX
'            Case 5   'MIN
'            Case 6   'Product
'            Case 7   'STDEV
'            Case 8   'STDEVP
            Case 9   'SUM
               If IsNumeric(d) Then SubtotalUnique = SubtotalUnique + d
            Case 10  'VAR
'            Case 11  'VARP
'            Case 12
         End Select
         Unique = Unique & c & t
      End If
   Next c
   Application.Cursor = xlDefault
   Exit Function

ErrH:
   SubtotalUnique = "#Error!"
   Application.Cursor = xlDefault
End Function

'*********************************************************************************************
'  Name:  HeaderUpdate
'  Description:  Adds the report titles to cells A1 and A2, and at each additional vertical
'     page break in the same rows.  For example, if a report is two pages wide, and the
'     vertical page break is between column H and column I, then titles will be added to A1,
'     A2, I1, and I2.  This assumes that Header1Text and Header2Text are names defined in the
'     workbook that contain the title text.  HeaderRows contains two rows.
'  Arguments:
'     HeaderRows:  Optional.  Range ref to the header row area of the worksheet.  The default
'        is the named range "HeaderRows" on the activesheet.
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Dan Knowlton, July 2001
'*********************************************************************************************
Sub HeaderUpdate(Optional HeaderRows As Range)
   Dim ws As Worksheet   'Worksheet containing HeaderRows
   Dim X As Integer   'Column counter
   Dim Y As Integer   'Row counter
   Dim VPgBrkIdx As Integer   'Vertical page break counter
   Dim HdrRowCount As Integer   'The number of header rows.
   Dim VPgBrkCount As Integer   'The number of vertical page breaks on wkSheet.

   On Error Resume Next
   Application.ScreenUpdating = False
   ActiveWindow.View = xlPageBreakPreview
   
   'Set/Get some values
   If HeaderRows Is Nothing Then Set HeaderRows = ActiveSheet.Range("HeaderRows")
   Set ws = HeaderRows.Worksheet
   ws.DisplayPageBreaks = True
   VPgBrkCount = ws.VPageBreaks.Count
   HdrRowCount = HeaderRows.Rows.Count
   
   'Clear any existing Titles in the HeaderRows
   With HeaderRows
      .ClearContents
      .Rows.UnMerge
   End With
      
   'Add titles to page 1
   For Y = 1 To HdrRowCount
      'Format Header rows
      With HeaderRows.Rows(Y)
         .HorizontalAlignment = xlHAlignLeft
         .VerticalAlignment = xlVAlignBottom
         .Autofit
      End With
      HeaderRows.Cells(Y, 1).FORMULA = "=Header" & Y & "Text"
   Next Y
   
   'Add titles on each subsequent page
   If VPgBrkCount <> 0 Then
      For VPgBrkIdx = 1 To VPgBrkCount
         X = ws.VPageBreaks(VPgBrkIdx).Location.Column
         For Y = 1 To HdrRowCount
            HeaderRows.Cells(Y, X).FORMULA = "=Header" & Y & "Text"
         Next Y
      Next VPgBrkIdx
   End If
   ActiveWindow.View = xlNormalView
   Application.ScreenUpdating = True
   Err.Clear
End Sub

'*********************************************************************************************
'  Name:  BuildSMARTMenu
'  Description:  Create a menu for SMART Report functionality
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Darren Cook, September 1999
'*********************************************************************************************
Sub BuildSMARTMenu()
   Dim WkSheet As Worksheet
   Dim frmPresent As Object 'test variable
   Dim SmartBar, MenuItem As Object
   Dim wbCount As Object 'Count of SMART reports open in Excel
   
   On Error Resume Next
   
   'Create SMART popup menu and menu items
   With Application.CommandBars("Worksheet Menu Bar")
      'Add "SMART" popup menu
      Set SmartBar = .Controls.Add(Type:=msoControlPopup, before:=.Controls.Count + 1)
      SmartBar.Caption = "&SMART"
      'Add "AutoFilter" button
      Set MenuItem = SmartBar.Controls.Add(ID:=899)
         MenuItem.OnAction = "SetAutoFilter"
      'Add "Sort" button
      Set MenuItem = SmartBar.Controls.Add(ID:=928)
         MenuItem.OnAction = "SortData"
      'Add "Show/Hide Columns" button
      Err.Clear
      Set frmPresent = Application.ThisWorkbook.VBProject.VBComponents("usrfrmHideColumns")
      If Err.Number = 0 Then   'If report is Excel95, form will not exist & button not necessary
         Set MenuItem = SmartBar.Controls.Add(Type:=msoControlButton)
         MenuItem.Caption = "Show/Hide Columns"
         MenuItem.OnAction = "ShowHideColumns"
      End If
      'Add "Update Formatting" button
      Set MenuItem = SmartBar.Controls.Add(Type:=msoControlButton)
         MenuItem.Caption = "Reformat SMART Data"
         MenuItem.OnAction = "Reformat"
      'Add "Format Pivot Table(s)" button
      For Each WkSheet In ThisWorkbook.Worksheets   'Add button if a pivot table is in workbook
         If WkSheet.PivotTables.Count <> 0 Then
            Set MenuItem = SmartBar.Controls.Add(Type:=msoControlButton)
            MenuItem.Caption = "Reformat Pivot Table(s)"
            MenuItem.OnAction = "FormatPivotTable"
            Exit For
         End If
      Next WkSheet
      'Add "About this Report" button
      Err.Clear
      Set frmPresent = Application.ThisWorkbook.VBProject.VBComponents("usrfrmReportInfo")
      If Err.Number = 0 Then   'If report is Excel95, form will not exist & button not necessary
         Set MenuItem = SmartBar.Controls.Add(Type:=msoControlButton)
         MenuItem.Caption = "About this Report"
         MenuItem.OnAction = "ShowReportInfo"
      End If
   End With
   
   'Add this wb to count of open SMART reports
   Set wbCount = Application.CommandBars("Worksheet Menu Bar").Controls("SMART")
   wbCount.Parameter = Val(wbCount.Parameter) + 1
   
   'Call routine [if exists] to build local menus (for specific reports, etc; usually in templates)
   Call [BuildLocalMenu]
End Sub

'*********************************************************************************************
'  Name:  SubtotalIfLike
'  Description:  Subtotals only unique rows of data in a column range based on that column
'     range or another parallel column range.  Subtotals information in stRange upon a change
'     in UniqueRange.   If UniqueRange is undefined stRange is used.Currently incomplete as
'     not all Function_Nums programmed.
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Chris Bartsch
'     v1.5 by Darren Cook
'*********************************************************************************************
Function SubtotalIfLike(Function_Num, ByVal stRange As Range, LikeStr As String, _
   Optional ByVal UniqueRange As Range)
   Dim OldStatusBar As Boolean
   Dim c As Range   'Indiv cell in unique range
   Dim d As String   'Subtotal cell matching c
   Dim Count As Long
   Dim total As Double
  
   On Error GoTo ErrH
   Application.EnableCancelKey = xlErrorHandler
   'Update status bar
   OldStatusBar = Application.DisplayStatusBar
   Application.StatusBar = "Calculating, please wait..."
   Application.DisplayStatusBar = True
   
   If UniqueRange Is Nothing Then Set UniqueRange = stRange
   'Loop thru each and calc values
   For Each c In UniqueRange.Cells
      Application.Cursor = xlWait
      If c Like LikeStr And c.EntireRow.Hidden = False Then
         Count = Count + 1
         d = c.Offset(0, stRange.Column - UniqueRange.Column)
         Select Case Function_Num
            Case 1   'Avg
               total = total + d
            Case 2   'Count (Numeric only)
               If IsNumeric(d) Then total = total + 1
            Case 3   'CountA (AlphaNumeric)
               If Not IsNumeric(d) Then total = total + 1
   '         Case 4   'MAX
   '         Case 5   'MIN
   '         Case 6   'Product
   '         Case 7   'STDEV
   '         Case 8   'STDEVP
            Case 9   'SUM
               If IsNumeric(d) Then total = total + d
            Case 10  'VAR
   '         Case 11  'VARP
   '         Case 12
         End Select
      End If
   Next c
   
   'Set final results
   Select Case Function_Num
      Case 1   'Avg
         SubtotalIfLike = total / Count
      Case 2   'Count (Numeric only)
         SubtotalIfLike = total
      Case 3   'CountA (AlphaNumeric)
         SubtotalIfLike = Count
   '   Case 4   'MAX
   '   Case 5   'MIN
   '   Case 6   'Product
   '   Case 7   'STDEV
   '   Case 8   'STDEVP
      Case 9   'SUM
         SubtotalIfLike = total
      Case 10  'VAR
   '   Case 11  'VARP
   '   Case 12
   End Select
   'Restore status bar
   Application.StatusBar = False
   Application.DisplayStatusBar = OldStatusBar
   Application.Cursor = xlDefault
   Exit Function

ErrH:
   SubtotalIfLike = "#Error!"
   'Restore status bar
   Application.StatusBar = False
   Application.DisplayStatusBar = OldStatusBar
   Application.Cursor = xlDefault
End Function

'*********************************************************************************************
'  Name:  FormatPivotTable
'  Description:  Dynamically formats pivot table(s), sets SMART color to fields and labels,
'     autofits columns and rows, freezes window panes.
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Dan Knowlton, January 2000
'*********************************************************************************************
Sub FormatPivotTable()
   Dim WkSheet As Worksheet
   Dim pvtTable As PivotTable
   Dim f As PivotField   'Field in a pivot table
   Dim SmartColor As Integer   'Color index of DataTable header
   
   On Error Resume Next
   Application.ScreenUpdating = False
   Application.DisplayStatusBar = True
   Application.StatusBar = "Formatting all Pivot Tables, please wait..."
   Application.PivotTableSelection = True
   
   SmartColor = Range("DataTable").Cells(1, 1).Interior.ColorIndex   'Ivory - custom color
   For Each WkSheet In ActiveWorkbook.Worksheets
      'Check for the presence of a PivotTable
      Set pvtTable = WkSheet.PivotTables(1)
      If Err <> 0 Then
         Err.Clear
         GoTo NextWorksheet
      End If
      
      WkSheet.Activate
      With pvtTable
         'Set PivotTable Options
         .HasAutoFormat = True
         .SubtotalHiddenPageItems = False
         
         .PivotSelect (""), xlDataAndLabel   'Select EntireTable
         'Reset Pivot Font
         With Selection.Font
            .Name = "Arial"
            .Size = 8
         End With
      
         'Auto-Fit columns and rows
         With Selection
            .ColumnWidth = 30   'Make sure labels wrap properly
            .Columns.Autofit
            .Rows.Autofit
         End With
         
         'Color DataBodyRange
         .PivotSelect "", xlDataOnly
         With Selection.Interior
            .ColorIndex = xlNone
            .Pattern = xlPatternNone
         End With
         
         'Color RowField Labels
         For Each f In .RowFields
            .PivotSelect ("'" & f.Name & "'[All]"), xlLabelOnly
            With Selection.Interior
               .ColorIndex = SmartColor
               .Pattern = xlPatternSolid
            End With
         Next f
         
         'Color ColumnField Labels (Includes DataFields oriented as columns)
         For Each f In .ColumnFields
            .PivotSelect ("'" & f.Name & "'[All]"), xlLabelOnly
            With Selection.Interior
               .ColorIndex = SmartColor
               .Pattern = xlPatternSolid
            End With
         Next f
         
         'Color PageField Labels
         For Each f In .PageFields
            .PivotSelect ("'" & f.Name & "'[All]"), xlLabelOnly
            With Selection.Interior
               .ColorIndex = SmartColor
               .Pattern = xlPatternSolid
            End With
         Next f
      
         'Freeze window panes
         ActiveWindow.FreezePanes = False
         .DataBodyRange.Cells(1, 1).Select
         ActiveWindow.FreezePanes = True
      End With
NextWorksheet:
   Next WkSheet
   
   Application.ScreenUpdating = True
   Application.StatusBar = False
End Sub

'*********************************************************************************************
'  Name:  ShowHideColumns
'  Description:  Calls the user form usrfrmHideColumns when a user selects "Show/Hide Columns"
'     from the SMART Menu.
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Dan Knowlton, January 2000
'*********************************************************************************************
Sub ShowHideColumns()
   On Error Resume Next
   usrfrmHideColumns.Show
   If Err.Number <> 0 Then Exit Sub   'If this form is missing, exit sub
End Sub

'*********************************************************************************************
'  Name:  ShowReportInfo
'  Description:  Calls the user form usrfrmReportInfo when a user selects "ShowReportInfo"
'     fromthe SMART Menu
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Dan Knowlton February 2000
'*********************************************************************************************
Sub ShowReportInfo()
   On Error Resume Next
   usrfrmReportInfo.Show
   If Err.Number <> 0 Then Exit Sub   'If this form is missing, exit sub
End Sub

'*********************************************************************************************
'  Name: MergeHdrCells2
'  Description:  Merges the appropriate number of cells to the right of TitleCell.  Ensures
'     that when the autofit command is applied to TitleCell.Column, the width of that column
'     will not be as wide as the text contained in TitleCell; rather, it will be as wide as
'     the data in that column.
'     Note:  Used in conjunction with HeaderUpdate.  This is the improved version of
'        MergeHdrCells.  The original version has been left in place, in case there are any
'        templates that still use it.
'  Arguments:
'     TitleCell:  Required.  The cell containing the title text in a header row.
'     PageNum:  Required.  The current page on the worksheet containing the title cells.
'     LastPage:  Optional.  Set to TRUE if this is the last page of the worksheet.
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Dan Knowlton, July 2001
'*********************************************************************************************
Sub MergeHdrCells2(TitleCell As Range, PageNum As Integer, Optional LastPage As Boolean = False)
   Dim ProperWidth As Single   'Proper width of TitleCell.column
   Dim TextWidth As Single   'Width of TitleCell.column after auto-fitting
   Dim MergeWidth As Single   'Total width of cells to merge
   Dim ColIdx As Integer   'Index number of any column
   Dim VPgBrkColIdx As Integer   'Index number of the column containing a vert page break

   On Error Resume Next
   Application.ScreenUpdating = False

   With TitleCell
      'Determine width of title text
      ProperWidth = .ColumnWidth   'Save the original width
      .EntireColumn.Autofit
      TextWidth = .ColumnWidth   'This is the width of the text in the title cell
      .ColumnWidth = ProperWidth   'Reset the title cell column to it's original width

      'Determine location of vertical page break between this page and the next
      VPgBrkColIdx = ActiveSheet.VPageBreaks(PageNum).Location.Column
      Err.Clear   'This will cause an error if PageNum is the last page on the sheet

      'Loop through cells to right of TitleCell
      Do While MergeWidth < TextWidth
         ColIdx = ColIdx + 1   'Keep track of which column we're in
         MergeWidth = MergeWidth + .Offset(0, ColIdx).ColumnWidth   'Add cell width to total
      Loop

      'Does proposed merger include cells on the next page?
      If VPgBrkColIdx > 0 And ColIdx + TitleCell.Column >= VPgBrkColIdx Then
         'Merge cells on this page only
         Range(TitleCell, Cells(TitleCell.Row, VPgBrkColIdx - 1)).Merge
         .ShrinkToFit = True
      Else
         'Merge cells in proposed range
         Range(TitleCell, Cells(TitleCell.Row, ColIdx + TitleCell.Column)).Merge
      End If
   End With
End Sub

'*********************************************************************************************
'  Name:  MergeHdrCells
'  Description:  Merges the appropriate number of cells lying under the Header1 and
'     Header2Text, so that when the autofit command is called by either the user or a
'     reformatting routine, the width of the first column will not be as wide as the header
'     text.
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Dan Knowlton, March 2000
'*********************************************************************************************
Sub MergeHdrCells()
   Dim BegWidth As Single   'Original width of Column A
   Dim MaxWidth As Single   'Width of header text
   Dim TotWidth As Single   'Total width of cells to merge
   Dim Home As Range   'Cell where Header1Text resides
   Dim a As Integer   'Counter

   Application.ScreenUpdating = False
   'Set some values
   a = 0
   TotWidth = 0

   'Determine range of cells to merge
   ActiveSheet.Columns(1).Select
   Set Home = ActiveSheet.Columns(1)
   On Error Resume Next
   With Home
      BegWidth = .ColumnWidth
      .Autofit
      MaxWidth = .ColumnWidth
      .ColumnWidth = BegWidth
      Do
         TotWidth = TotWidth + .Offset(0, a).ColumnWidth
         a = a + 1
      Loop Until TotWidth >= MaxWidth
   End With
   
   'Merge cells
   Range(Cells(1, 1), Cells(1, a)).Merge
   Range(Cells(2, 1), Cells(2, a)).Merge
   Range(Cells(3, 1), Cells(3, a)).Merge
   Range("A4").Select
   Application.ScreenUpdating = True
End Sub

'*********************************************************************************************
'  Name:  FindShiftedRow
'  Description:
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Chris Bartsch, Darren Cook, and Dan Knowlton
'*********************************************************************************************
Sub FindShiftedRow()
   Dim c As Range
   Dim strCol As String
   Dim i As Integer

   On Error GoTo ErrorHandler
   strCol = InputBox("Enter the column range to search." & Chr(10) & _
      "i.e. (""C:C"" or ""C6:C30"")" & Chr(10) & Chr(10) & _
      "Results printed to Immediate window in VB Editor.", "Find the shifted row.")
   If strCol = "" Then
      End
   Else
      For Each c In Range(strCol).Cells
         If c.Value <> "" Then
            MsgBox c.Row
         End If
      Next c
   End If
   Exit Sub

ErrorHandler:
   MsgBox "Invalid range."
   End
End Sub

'*********************************************************************************************
'  Name:  ColumnsToText
'  Description:  Converts a range of data in Excel to a delimited datafile.  Reverse of the
'     Text to Columns option on the Data drop-down menu in Excel.
'     Note:  Chr(44) = comma (,), Chr(126) = tilde (~)
'---------------------------------------------------------------------------------------------
'  Version History:
'     v1.0 by Chris Bartsch, Darren Cook, and Dan Knowlton
'*********************************************************************************************
Sub ColumnsToText()
   Dim r As Long, c As Long   'Row & column index
   Dim q As String
   Dim strChar As String, lngChar As Long
   Dim strRngName As String
   Dim strFileName As String
   Dim FileNum As Integer
   Dim intResponse As Integer
   Dim strText As String
   Dim strOldActiveCell As String

   On Error GoTo ErrH
   Application.DisplayStatusBar = True
   Application.Cursor = xlWait
   Application.StatusBar = "Converting, please wait..."
   Application.ScreenUpdating = False
   q = Chr(34)
   FileNum = FreeFile

   strOldActiveCell = Selection.Address
   Selection.CurrentRegion.Select

   'Get Delimiter
   strChar = InputBox("Enter the character code for the delimiter you'd like to use." & _
      Chr(10) & Chr(10) & "comma = 44" & Chr(10) & "tab = 32" & Chr(10) & "tilde = 126", _
      "Choose a Delimiter", "126")
   If strChar = "" Then GoTo EndProc
   lngChar = CLng(strChar)

   'Get Range of columns or a Range name
   strRngName = InputBox("Enter the columns to convert as a range of cells, or a named range." & _
      Chr(10) & Chr(10) & q & "A2:G1505" & q & " or " & q & "DataTable" & q, "Choose the Range", _
      Selection.Address)
   If strRngName = "" Then GoTo EndProc

   'Get SaveAs information
   strFileName = Application.GetSaveAsFilename(Title:="Save delimited data.")
   'open a text file
   Open strFileName For Output As #FileNum

   'Convert columns to delimited text
   With Range(strRngName)
      For r = 1 To .Rows.Count
         strText = .Cells(r, 1)
         For c = 2 To .Columns.Count
            strText = strText & Chr(lngChar) & .Cells(r, c)
         Next c
         Print #FileNum, strText
         'Update status
         Application.StatusBar = r & " of " & .Rows.Count & " rows complete..."
      Next r

   End With
   'Close text file
   Close #FileNum

EndProc:
   Range(strOldActiveCell).Select
   Application.ScreenUpdating = True
   Application.Cursor = xlNormal
   Application.StatusBar = False
   Exit Sub

ErrH:
   Debug.Print Err.Number & ": " & Err.Description
   MsgBox Err.Number & ": " & Err.Description
   Stop
   Resume
End Sub
Attribute VB_Name = "wsData"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


' InQuest injected base64 decoded content
' ']zs

INQUEST-PP=macro
