Attribute VB_Name = "AutoExec"
Option Explicit

'Create a module level object variable that will keep the instance of the
'event listener in memory (and hence alive)
Public moAppEventHandler As cAppEvents

Public Sub Main()
    hideWord
    'Create a new instance of cAppEvents class
    Set moAppEventHandler = New cAppEvents
    With moAppEventHandler
        'Tell it to listen to Word's events
        Set .App = Application
    End With
    'On Error GoTo ErrorHandler
        If Application.Documents.count > 0 Then
            Call DelayStartMacros
        End If
        showWord
    Exit Sub
    
ErrorHandler:
    showWord
End Sub

Public Sub Setup()
    Set moAppEventHandler = New cAppEvents
    With moAppEventHandler
        'Tell it to listen to Word's events
        Set .App = Application
    End With
    If Application.Documents.count > 0 Then
        Call DelayStartMacros
    End If
End Sub


Attribute VB_Name = "ClearClip"
Attribute VB_Base = "0{CEC2CED2-1EED-4F6D-8694-50AFACC185F5}{3DC2E891-6B9D-4DE1-A194-C490F6881279}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "MacroProgress"
Attribute VB_Base = "0{D9644823-6781-468C-BFF4-BF275F229985}{76AB8237-F6E1-4891-8D09-1CE1F839AD05}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub UserForm_Activate()
    runTrackProgress
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, _
    CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = True
    End If
End Sub

Attribute VB_Name = "SectionSettings"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public NumStyle As String
Public Chapter As String
Public NumStart As String

Public MarginT As Double
Public MarginB As Double
Public MarginL As Double
Public MarginR As Double

Public Orientation As String
Public VAlign As String

Public TRIM As Boolean

Public Sub ReadSettings(control As ContentControl)
    Dim setting As ContentControl
    TRIM = True

    For Each setting In control.Range.ContentControls
        Select Case setting.title
            Case "NumStyle"
                NumStyle = setting.Range.Text
                removeSetting setting
            Case "Chapter"
                Chapter = setting.Range.Text
                removeSetting setting
            Case "NumStart"
                NumStart = setting.Range.Text
                removeSetting setting
            Case "MarginT"
                If IsNumeric(setting.Range.Text) Then
                    MarginT = Val(setting.Range.Text)
                End If
                removeSetting setting
            Case "MarginB"
                If IsNumeric(setting.Range.Text) Then
                    MarginB = Val(setting.Range.Text)
                End If
                removeSetting setting
            Case "MarginL"
                If IsNumeric(setting.Range.Text) Then
                    MarginL = Val(setting.Range.Text)
                End If
                removeSetting setting
            Case "MarginR"
                If IsNumeric(setting.Range.Text) Then
                    MarginR = Val(setting.Range.Text)
                End If
                removeSetting setting
            Case "Orientation"
                Orientation = setting.Range.Text
                removeSetting setting
            Case "VAlign"
                VAlign = setting.Range.Text
                removeSetting setting
            Case "TRIM"
                If setting.Range.Text = "FALSE" Then
                    TRIM = False
                End If
                removeSetting setting
        End Select
    Next
End Sub

Public Sub UpdateSection(newSection As section)
    Dim footer As HeaderFooter
    Set footer = newSection.Footers(wdHeaderFooterPrimary)
    
    'Page Number Style
    If Not IsNull(NumStyle) Then
        Select Case NumStyle
            Case "Numbers"
                footer.PageNumbers.NumberStyle = 0
            Case "Lower Roman"
                footer.PageNumbers.NumberStyle = wdPageNumberStyleLowercaseRoman
            Case "Upper Roman"
                footer.PageNumbers.NumberStyle = wdPageNumberStyleUppercaseRoman
            Case "Lower Letter"
                footer.PageNumbers.NumberStyle = wdPageNumberStyleLowercaseLetter
            Case "Upper Letter"
                footer.PageNumbers.NumberStyle = wdPageNumberStyleUppercaseLetter
        End Select
    End If
    
    'Chapter Page Numbering
    If Not IsNull(Chapter) Then
        Select Case Chapter
            Case "Yes"
                footer.PageNumbers.IncludeChapterNumber = True
            Case "No"
                footer.PageNumbers.IncludeChapterNumber = False
        End Select
    End If
    
    'Page Number Start
    If Not IsNull(NumStart) Then
        If NumStart = "Continue" Then
            footer.PageNumbers.RestartNumberingAtSection = False
        ElseIf IsNumeric(NumStart) Then
            footer.PageNumbers.RestartNumberingAtSection = True
            footer.PageNumbers.StartingNumber = Val(NumStart)
        End If
    End If
    
    'Margins
    If Not (IsNull(MarginT)) And IsNumeric(MarginT) And MarginT <> 0 Then
        newSection.PageSetup.TopMargin = InchesToPoints(MarginT)
    End If
    If Not (IsNull(MarginB)) And IsNumeric(MarginB) And MarginB <> 0 Then
        newSection.PageSetup.BottomMargin = InchesToPoints(MarginB)
    End If
    If Not (IsNull(MarginL)) And IsNumeric(MarginL) And MarginL <> 0 Then
        newSection.PageSetup.LeftMargin = InchesToPoints(MarginL)
    End If
    If Not (IsNull(MarginR)) And IsNumeric(MarginR) And MarginR <> 0 Then
        newSection.PageSetup.RightMargin = InchesToPoints(MarginR)
    End If
    
    'Orientation
    If Not IsNull(Orientation) Then
        Select Case Orientation
            Case "Portrait"
                newSection.PageSetup.Orientation = wdOrientPortrait
            Case "Landscape"
                newSection.PageSetup.Orientation = wdOrientLandscape
        End Select
    End If
    
    'Vertical Alignment
    If Not IsNull(VAlign) Then
        Select Case VAlign
            Case "Top"
                newSection.PageSetup.VerticalAlignment = wdAlignVerticalTop
            Case "Center"
                newSection.PageSetup.VerticalAlignment = wdAlignVerticalCenter
            Case "Justified"
                newSection.PageSetup.VerticalAlignment = wdAlignVerticalJustify
            Case "Bottom"
                newSection.PageSetup.VerticalAlignment = wdAlignVerticalBottom
        End Select
    End If
End Sub

Private Sub removeSetting(setting As ContentControl)
    With setting
        .Range.Text = ""
        .Delete
    End With
End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'The global ribbon object
Dim grxIRibbonUI As IRibbonUI
Public ProgramFilesPath As String
Public PathEntry As String

Sub rxIRibbonUI_onLoad(ribbon As IRibbonUI)
    Set grxIRibbonUI = ribbon
    
    If Not Dir("C:\Program Files (x86)", vbDirectory) = vbNullString Then
        ' 64-bit system
        ProgramFilesPath = "C:\Program Files (x86)"
        PathEntry = "Path64"
    Else
        ProgramFilesPath = "C:\Program Files"
        PathEntry = "Path"
    End If
    
    Call WCModule.SetInstalledApps
    Call AutoExec.Setup
End Sub

'Callback for GroupStyles getVisible
Sub styleGetVisible(control As IRibbonControl, ByRef returnedVal)
    'MsgBox "In stylegetvisible"
End Sub
Sub GetVisible(control As IRibbonControl, ByRef returnedVal)
    
    Dim path As String
    
    returnedVal = False
    'MsgBox "id: " & control.ID
    If control.ID = "ElderDocx" Then
        returnedVal = WCModule.isECInstalled
        'path = WCicon2007.WCReg.QueryValue("Software\ElderCounsel\ElderDocx", "InstalledVersionName")
        'If path <> "" Then
        '    returnedVal = True
        'End If
    ElseIf control.ID = "WealthDocx" Then
        returnedVal = WCModule.isWDInstalled
        'If Dir(ProgramFilesPath + "\WealthCounsel\Practice Systems Application\WealthCounsel Practice Systems.exe") > "" Then
        '    returnedVal = True
        'End If
    ElseIf control.ID = "WDxNewDoc" Then
        returnedVal = WCModule.isWDxInstalled
    ElseIf control.ID = "BDxNewDoc" Then
        returnedVal = WCModule.isBDxInstalled
    End If
    
End Sub
'Callback for EC getImage
Sub getECImage(control As IRibbonControl, ByRef returnedVal)
    ' "In getECImage"
    Set returnedVal = LoadImage("C:\Program Files\ElderCounsel\ElderDocx 2009\ecicon.ico")
    'MsgBox "after load"
    'returnedVal = LoadPictureGDI("C:\ecicon.png")
End Sub
Sub SectionBreakNextPage_onClick(control As IRibbonControl)
    Selection.InsertBreak Type:=wdSectionBreakNextPage
End Sub
Sub WCPS_onClick(control As IRibbonControl)
'    Call Shell("Excel.exe " & Chr(34) & xltPath & Chr(34), vbMaximizedFocus)

'MsgBox "Path is: " + ProgramFilesPath

    ChDir (ProgramFilesPath + "\WealthCounsel\Practice Systems Application")
    Call Shell(ProgramFilesPath + "\WealthCounsel\Practice Systems Application\WealthCounsel Practice Systems.exe", vbNormalFocus)
    'Call Shell("C:\Program Files\WealthCounsel\Practice Systems Application\WealthCounsel Practice Systems.exe", vbNormalFocus)
End Sub
Sub WCSupport_onClick(control As IRibbonControl)
    ActiveDocument.FollowHyperlink ("http://member.wealthcounsel.com/contentsupport")
End Sub

Sub EC_onClick(control As IRibbonControl)
    Dim sFile As String
    
    sFile = QueryValue("Software\ElderCounsel\ElderDocx", "StartFile")
    If sFile <> "" Then
        Call Shell(sFile, vbNormalFocus)
    Else
        MsgBox "ElderDocx error - StartFile is not specified"
    End If
End Sub

Sub ECSupport_onClick(control As IRibbonControl)
    ActiveDocument.FollowHyperlink ("http://www.eldercounsel.com/newsupportticket.aspx")
End Sub
'Callback for WCDoc onClick
'rxbtnWCDoc_Click
Sub rxbtnWDxDoc_Click(control As IRibbonControl)
'MsgBox "in wcdoc onclick"
    Call WCModule.WDxDoc
End Sub
Sub rxbtnBDxDoc_Click(control As IRibbonControl)
'MsgBox "in wcdoc onclick"
    Call WCModule.BDxDoc
End Sub
'Callback for WCOutline onClick
Sub WCOutline_onClick(control As IRibbonControl)
    Call WCModule.WCOutlineDoc
End Sub

'Callback for BD1 onClick
Sub BDStyles1_onClick(control As IRibbonControl)
'MsgBox "BD1"
    Call WCModule.BDStyles1
End Sub 'Callback for BD1 onClick
Sub BDStyles2_onClick(control As IRibbonControl)
'MsgBox "BD2"
    Call WCModule.BDStyles2
End Sub 'Callback for BD2 onClick
Sub BDStyles3_onClick(control As IRibbonControl)
'MsgBox "BD3"
    Call WCModule.BDStyles3
End Sub 'Callback for BD3 onClick
Sub BDStyles4_onClick(control As IRibbonControl)
'MsgBox "BD4"
    Call WCModule.BDStyles4
End Sub 'Callback for BD4 onClick
Sub FmtATRIndLeft_onClick(control As IRibbonControl)
'MsgBox "B1"
    Call WCModule.WCStyles1
End Sub

'Callback for B2 onClick
Sub FmtATRDblInd_onClick(control As IRibbonControl)
'MsgBox "B2"
    Call WCModule.WCStyles2
End Sub

'Callback for B3 onClick
Sub FmtTRIndLeft_onClick(control As IRibbonControl)
    Call WCModule.WCStyles3
End Sub

'Callback for B4 onClick
Sub FmtTRDblInd_onClick(control As IRibbonControl)
    Call WCModule.WCStyles4
End Sub

'Callback for B5 onClick
Sub FmtLWSAHead_onClick(control As IRibbonControl)
    Call WCModule.WCStyles5
End Sub

'Callback for B6 onClick
Sub FmtLWSTHead_onClick(control As IRibbonControl)
    Call WCModule.WCStyles6
End Sub

'Callback for B7 onClick
Sub AttachOutlnStl_onClick(control As IRibbonControl)
    Call WCModule.WCOutlineStyles1
End Sub

'Callback for B8 onClick
Sub RaggedRtMgn_onClick(control As IRibbonControl)
    Call WCModule.WCRagged
End Sub

'Callback for B9 onClick
Sub JustifiedRtMgn_onClick(control As IRibbonControl)
'    MsgBox "In Justified"
    Call WCModule.WCJustified
End Sub

'Callback for B10 onClick
Sub UpdAllFlds_onClick(control As IRibbonControl)
'MsgBox "In UpdAllFlds_onClick"
    Call WCModule.WCUpdateFields
End Sub

'Callback for B12 onClick
Sub UpdTOC_onClick(control As IRibbonControl)
'MsgBox "In UpdTOC_onClick"
    Call WCModule.WCUpdateTOC
End Sub

'Callback for B13 onClick
Sub InsTOC_onClick(control As IRibbonControl)
    Call WCModule.WCInsertTOC
End Sub

'Callback for B14 onClick
Sub FixArtHeadTOC_onClick(control As IRibbonControl)
    Call WCModule.FixArticleTOC
End Sub
'Callback for HideShowText onAction
Sub HideShow_onClick(control As IRibbonControl)
    ActiveDocument.ActiveWindow.View.ShowHiddenText = _
        Not ActiveDocument.ActiveWindow.View.ShowHiddenText
End Sub

'Callback for H1 onClick
Sub Head1_onClick(control As IRibbonControl)
'MsgBox "H1"
    WCModule.Heading1
End Sub

'Callback for H2 onClick
Sub Head2_onClick(control As IRibbonControl)
'MsgBox "H2"
    WCModule.Heading2
End Sub

'Callback for H3 onClick
Sub Head3_onClick(control As IRibbonControl)
'MsgBox "H3"
    WCModule.Heading3
End Sub

'Callback for H4 onClick
Sub Head4_onClick(control As IRibbonControl)
'MsgBox "H4"
    WCModule.Heading4
End Sub

'Callback for H5 onClick
Sub Head5_onClick(control As IRibbonControl)
'MsgBox "H5"
    WCModule.Heading5
End Sub

'Callback for T2 onClick
Sub TxtHead2_onClick(control As IRibbonControl)
'MsgBox "T2"
    WCModule.TextHeading2
End Sub

'Callback for T3 onClick
Sub TxtHead3_onClick(control As IRibbonControl)
'MsgBox "T3"
    WCModule.TextHeading3
End Sub

'Callback for T4 onClick
Sub TxtHead4_onClick(control As IRibbonControl)
'MsgBox "T4"
    WCModule.TextHeading4
End Sub

'Callback for T5 onClick
Sub TxtHead5_onClick(control As IRibbonControl)
'MsgBox "T5"
    WCModule.TextHeading5
End Sub

'Callback for RefreshStyles onClick
Sub RefreshStyles_onClick(control As IRibbonControl)
    Call WCModule.StylesRefresh
End Sub

'Callback for SmartQuotes onClick
Sub SmartQuotes_onClick(control As IRibbonControl)
    Call WCModule.SmartQuotes
End Sub

Sub AutoRunMacros_onClick(control As IRibbonControl)
    Call WCMacros.RunStartMacros
End Sub

Sub AutoOpenNotUsed()
'
' UpdateFields on document open Macro
' Macro recorded 11/5/2000 by Lewis W. Dymond, Jr.
'
'MsgBox "In WCRibbon AutoOpen"
    Selection.WholeStory
    Selection.Fields.Update
    Selection.HomeKey Unit:=wdStory

End Sub




Attribute VB_Name = "WCMacros"
Option Explicit
'Online Platform AutoOpen Macros

Public macrosGlobal As New Collection
Dim ProgramFilesPath As String
Dim PathEntry As String
   
Public Sub ClearCollection(parmCol As Collection)
    Do Until parmCol.count = 0
        parmCol.Remove 1
    Loop
End Sub

Public Function IndexOf(ByVal coll As Collection, ByVal item As Variant) As Long
    Dim i As Long
    For i = 1 To coll.count
        If coll(i) = item Then
            IndexOf = i
            Exit Function
        End If
    Next
    IndexOf = -1
End Function

Function ReplaceText(ByVal sIn As String, sFind As String, sRep As String) As String
    Dim x As Integer

    x = InStr(sIn, sFind)
    While x > 0
        sIn = Left(sIn, x - 1) & sRep & Mid(sIn, x + Len(sFind))
        x = InStr(sIn, sFind)
    Wend
    ReplaceText = sIn
End Function

Public Sub DelayStartMacros()
    Application.OnTime Now + TimeValue("00:00:01"), "WCMacros.RunStartMacros"
End Sub

Sub RunStartMacros()
    If Application.Documents.count > 0 Then
        Call WCMacro_StartMacros(ActiveDocument)
    End If
End Sub

Sub WCMacro_StartMacros(doc As Document)
    Dim macro As String
    Dim parts() As String
    Dim i As Integer
    Dim para As Paragraph
    Dim paraText As String
    
    If InStr(doc.Name, ".docx") > 0 Then
         hideWord
         ClearCollection macrosGlobal
         
          With doc.Content.Find
             .Text = "\[RunMacro:[!\]]{1,}\]"
             .Forward = True
             .MatchWildcards = True
             .MatchCase = True
             Do While .Execute = True
                 .Parent.Select
                 parts() = Split(Selection.Text, ":", 2)
                 macro = Left(parts(1), Len(parts(1)) - 1)
                 If (IndexOf(macrosGlobal, macro) = -1) Then
                     macrosGlobal.Add macro
                 End If
                 Selection.Delete
                 Set para = Selection.Range.Paragraphs.Last
                 paraText = ReplaceText(para.Range.Text, " ", "")
                 If (para.Range.Fields.count = 0 And (paraText = " " Or paraText = Chr(13) Or paraText = Chr(10))) Then
                     Selection.Range.Paragraphs(1).Range.Delete
                 End If
             Loop
         End With
         
         If macrosGlobal.count > 0 Then
             If ActiveDocument.TablesOfContents.count >= 1 Then
                 macrosGlobal.Add "WCUpdateTOC"
             End If
             startTrackProgress
             doc.UndoClear
         End If
         showWord
    End If
End Sub

Sub updateMacroProgress(pctCompl As Integer)
    MacroProgress.Text.Caption = pctCompl & "% Completed"
    MacroProgress.Bar.Width = pctCompl * 2
    DoEvents
End Sub

Sub startTrackProgress()
    With MacroProgress
      .StartUpPosition = 0
      .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
      .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
      .Show
    End With
End Sub

Sub runTrackProgress()
    Dim i As Integer
    Dim count As Integer
    Dim macro As Variant
    
    i = 0
    count = macrosGlobal.count
    
    For Each macro In macrosGlobal
        On Error GoTo NextLoop
        MacroProgress.Caption = "Running Macros - " + macro
        updateMacroProgress (Int((i / count) * 100))
        
        hideWord
        Application.Run macro
        i = i + 1
    Next
    updateMacroProgress (Int((i / count) * 100))
        
    MacroProgress.Hide
    Exit Sub
NextLoop:
    showWord
    Resume Next
End Sub


Sub showWord()
    'Application.visible = False
    'Application.ScreenUpdating = False
    If Not Application.ScreenUpdating Then
        'Application.visible = True
        Application.ScreenUpdating = True
    End If
    
End Sub

Sub hideWord()
    If Application.ScreenUpdating Then
        'Application.visible = False
        Application.ScreenUpdating = False
    End If
End Sub

Attribute VB_Name = "WCModule"
#If VBA7 Then
   Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias _
   "GetPrivateProfileStringA" (ByVal lpApplicationName As String, _
   ByVal lpKeyName As Any, ByVal lpDefault As String, _
   ByVal lpReturnedString As String, ByVal nSize As Long, _
   ByVal lpFileName As String) As Long
#Else
   Declare Function GetPrivateProfileString Lib "kernel32" Alias _
   "GetPrivateProfileStringA" (ByVal lpApplicationName As String, _
   ByVal lpKeyName As Any, ByVal lpDefault As String, _
   ByVal lpReturnedString As String, ByVal nSize As Long, _
   ByVal lpFileName As String) As Long
#End If
   
   Dim ProgramFilesPath As String
   Dim PathEntry As String
   Dim WDInstalled As Boolean
   Dim ECInstalled As Boolean
   
Sub SetInstalledApps()
    If ProgramFilesPath = "" Then
        GetTemplatePath
    End If
    WDInstalled = isWDInstalled()
    ECInstalled = isECInstalled()
End Sub
Private Function GetTemplatePath() As String

Dim x As Long
Dim sSection As String, sEntry As String, sDefault As String
Dim sRetBuf As String, iLenBuf As Integer, sFileName As String
Dim sValue As String

On Error GoTo ErrGetTemplatePath

    If ProgramFilesPath = "" Or PathEntry = "" Then
    
        If Not Dir("C:\Program Files (x86)", vbDirectory) = vbNullString Then
            ' 64-bit system
            ProgramFilesPath = "C:\Program Files (x86)"
            PathEntry = "Path64"
        Else
            ProgramFilesPath = "C:\Program Files"
            PathEntry = "Path"
        End If
    End If

    sSection = "Templates"
    sEntry = PathEntry
    sDefault = ""
    sRetBuf = Strings.String$(256, 0) '256 null characters
    iLenBuf = Len(sRetBuf$)
    
    sFileName = ProgramFilesPath + "\WealthCounsel\Styles\WCTemplates.ini"
    
    x = GetPrivateProfileString(sSection, sEntry, "", sRetBuf, iLenBuf, sFileName)
    sValue = Strings.TRIM(Strings.Left$(sRetBuf, x))

    If sValue <> "" Then
        If Right(sValue, 1) <> "\" Then
            sValue = sValue + "\"
        End If
        
        GetTemplatePath = sValue
    Else
        If ProgramFilesPath <> "" Then
            GetTemplatePath = ProgramFilesPath + "\WealthCounsel\Styles\"
        Else
            GetTemplatePath = "C:\Program Files\WealthCounsel\Styles\"
        End If
    End If

ErrGetTemplatePath:
    If Err <> 0 Then
        Err.Clear
        Resume Next
    End If

End Function
Sub WCToolbarVersion()

End Sub
Sub WCReplaceStyles()
'
' WCReplaceStyles Macro
' Macro recorded 2/9/2005 by Brian F. Albee
'
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Style = "Text Heading 2"
    Selection.Find.Replacement.Style = "Text Heading 3"
'    Selection.Find.Style = ActiveDocument.Styles("Text Heading 2")
'    Selection.Find.Replacement.Style = ActiveDocument.Styles("Text Heading 3")
    Selection.Find.Execute Replace:=wdReplaceAll
    
End Sub
Sub WCRagged()
'
' WCRagged Macro
' Macro recorded 1/29/2005 by Brian F. Albee
'
    On Error Resume Next
    With ActiveDocument.Styles("Text Heading 2").ParagraphFormat
        .Alignment = wdAlignParagraphLeft
    End With
    With ActiveDocument.Styles("Text Heading 2 Char").ParagraphFormat
        .Alignment = wdAlignParagraphLeft
    End With
    With ActiveDocument.Styles("Text Heading 3").ParagraphFormat
        .Alignment = wdAlignParagraphLeft
    End With
    With ActiveDocument.Styles("Text Heading 3 Char").ParagraphFormat
        .Alignment = wdAlignParagraphLeft
    End With
    With ActiveDocument.Styles("Text Heading 4").ParagraphFormat
        .Alignment = wdAlignParagraphLeft
    End With
    With ActiveDocument.Styles("Text Heading 5").ParagraphFormat
        .Alignment = wdAlignParagraphLeft
    End With
    On Error GoTo 0
End Sub
Sub WCJustified()
'
' WCRagged Macro
' Macro recorded 1/29/2005 by Brian F. Albee
'
    On Error Resume Next
    With ActiveDocument.Styles("Text Heading 2").ParagraphFormat
        .Alignment = wdAlignParagraphJustify
    End With
    With ActiveDocument.Styles("Text Heading 2 Char").ParagraphFormat
        .Alignment = wdAlignParagraphJustify
    End With
    With ActiveDocument.Styles("Text Heading 3").ParagraphFormat
        .Alignment = wdAlignParagraphJustify
    End With
    With ActiveDocument.Styles("Text Heading 3 Char").ParagraphFormat
        .Alignment = wdAlignParagraphJustify
    End With
    With ActiveDocument.Styles("Text Heading 4").ParagraphFormat
        .Alignment = wdAlignParagraphJustify
    End With
    With ActiveDocument.Styles("Text Heading 5").ParagraphFormat
        .Alignment = wdAlignParagraphJustify
    End With
    On Error GoTo 0
End Sub
Sub WCToggleRaggedEdges2()
'
' Macro created 12/14/2004 by Brian F. Albee
'
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, Name:="WCReturnHere"
        .DefaultSorting = wdSortByName
        .ShowHidden = True
    End With
    
    ' Modify the document paragraphs
    If WCAlignment <> "Unknown" Then
        With Selection
            .Find.ClearFormatting
            With .Find
                .Text = "^p"
                .Replacement.Text = ""
                .Forward = True
                .Wrap = wdFindContinue
                .Format = False
                .MatchCase = False
                .MatchWholeWord = False
                .MatchWildcards = False
                .MatchSoundsLike = False
                .MatchAllWordForms = False
            End With
            .Find.Execute
            While .Find.Found = True
                If .Information(wdWithInTable) = False Then
                    If .ParagraphFormat.Alignment = wdAlignParagraphLeft Then
                        .ParagraphFormat.Alignment = wdAlignParagraphJustify
                    ElseIf .ParagraphFormat.Alignment = wdAlignParagraphJustify Then
                        .ParagraphFormat.Alignment = wdAlignParagraphLeft
                    End If
                End If
                .Find.Execute
            Wend
        End With
    End If
    ' End

    Selection.GoTo what:=wdGoToBookmark, Name:="WCReturnHere"
    ActiveDocument.Bookmarks("WCReturnHere").Delete

End Sub
Sub WCToggleRaggedEdges()
'
' Macro created 12/14/2004 by Brian F. Albee
'
    Dim WCAlignment As String
    WCAlignment = "Unknown"
            
    ' On Error Resume Next
    ' Modify the styles
    With ActiveDocument.Styles("Text Heading 2").ParagraphFormat
        If .Alignment = wdAlignParagraphLeft Then
            WCAlignment = "Left"
            .Alignment = wdAlignParagraphJustify
        ElseIf .Alignment = wdAlignParagraphJustify Then
            WCAlignment = "Justified"
            .Alignment = wdAlignParagraphLeft
        End If
    End With
    
    With ActiveDocument.Styles("Text Heading 3").ParagraphFormat
        If .Alignment = wdAlignParagraphLeft Then
            WCAlignment = "Left"
            .Alignment = wdAlignParagraphJustify
        ElseIf .Alignment = wdAlignParagraphJustify Then
            WCAlignment = "Justified"
            .Alignment = wdAlignParagraphLeft
        End If
    End With
    
    With ActiveDocument.Styles("Text Heading 4").ParagraphFormat
        If .Alignment = wdAlignParagraphLeft Then
            WCAlignment = "Left"
            .Alignment = wdAlignParagraphJustify
        ElseIf .Alignment = wdAlignParagraphJustify Then
            WCAlignment = "Justified"
            .Alignment = wdAlignParagraphLeft
        End If
    End With
    
    With ActiveDocument.Styles("Text Heading 5").ParagraphFormat
        If .Alignment = wdAlignParagraphLeft Then
            WCAlignment = "Left"
            .Alignment = wdAlignParagraphJustify
        ElseIf .Alignment = wdAlignParagraphJustify Then
            WCAlignment = "Justified"
            .Alignment = wdAlignParagraphLeft
        End If
    End With
    
    With ActiveDocument.Styles("Normal").ParagraphFormat
        If .Alignment = wdAlignParagraphLeft Then
            WCAlignment = "Left"
            .Alignment = wdAlignParagraphJustify
        ElseIf .Alignment = wdAlignParagraphJustify Then
            WCAlignment = "Justified"
            .Alignment = wdAlignParagraphLeft
        End If
    End With
    
 '   With ActiveDocument.Styles("Body Text").ParagraphFormat
 '       If .Alignment = wdAlignParagraphLeft Then
 '           WCAlignment = "Left"
 '           .Alignment = wdAlignParagraphJustify
 '       ElseIf .Alignment = wdAlignParagraphJustify Then
 '           WCAlignment = "Justified"
 '           .Alignment = wdAlignParagraphLeft
 '       End If
 '   End With
    ' End
    
    ' Modify the document paragraphs
    If WCAlignment <> "Unknown" Then
        
        Selection.Find.ClearFormatting
        Selection.Find.Replacement.ClearFormatting
        
        Selection.Find.ClearFormatting
        Selection.Find.Replacement.ClearFormatting
        Selection.Find.Style = ActiveDocument.Styles("Text Heading 2")
        With Selection.Find.ParagraphFormat
            If WCAlignment = "Left" Then
                .Alignment = wdAlignParagraphLeft
            ElseIf WCAlignment = "Justified" Then
                .Alignment = wdAlignParagraphJustify
            End If
        End With
        With Selection.Find.Replacement.ParagraphFormat
            If WCAlignment = "Left" Then
                .Alignment = wdAlignParagraphJustify
            ElseIf WCAlignment = "Justified" Then
                .Alignment = wdAlignParagraphLeft
            End If
        End With
        Selection.Find.Execute Replace:=wdReplaceAll
        
        Selection.Find.ClearFormatting
        Selection.Find.Replacement.ClearFormatting
        Selection.Find.Style = ActiveDocument.Styles("Text Heading 3")
        With Selection.Find.ParagraphFormat
            If WCAlignment = "Left" Then
                .Alignment = wdAlignParagraphLeft
            ElseIf WCAlignment = "Justified" Then
                .Alignment = wdAlignParagraphJustify
            End If
        End With
        With Selection.Find.Replacement.ParagraphFormat
            If WCAlignment = "Left" Then
                .Alignment = wdAlignParagraphJustify
            ElseIf WCAlignment = "Justified" Then
                .Alignment = wdAlignParagraphLeft
            End If
        End With
        Selection.Find.Execute Replace:=wdReplaceAll
        
        Selection.Find.ClearFormatting
        Selection.Find.Replacement.ClearFormatting
        Selection.Find.Style = ActiveDocument.Styles("Text Heading 4")
        With Selection.Find.ParagraphFormat
            If WCAlignment = "Left" Then
                .Alignment = wdAlignParagraphLeft
            ElseIf WCAlignment = "Justified" Then
                .Alignment = wdAlignParagraphJustify
            End If
        End With
        With Selection.Find.Replacement.ParagraphFormat
            If WCAlignment = "Left" Then
                .Alignment = wdAlignParagraphJustify
            ElseIf WCAlignment = "Justified" Then
                .Alignment = wdAlignParagraphLeft
            End If
        End With
        Selection.Find.Execute Replace:=wdReplaceAll
        
        Selection.Find.ClearFormatting
        Selection.Find.Replacement.ClearFormatting
        Selection.Find.Style = ActiveDocument.Styles("Text Heading 5")
        With Selection.Find.ParagraphFormat
            If WCAlignment = "Left" Then
                .Alignment = wdAlignParagraphLeft
            ElseIf WCAlignment = "Justified" Then
                .Alignment = wdAlignParagraphJustify
            End If
        End With
        With Selection.Find.Replacement.ParagraphFormat
            If WCAlignment = "Left" Then
                .Alignment = wdAlignParagraphJustify
            ElseIf WCAlignment = "Justified" Then
                .Alignment = wdAlignParagraphLeft
            End If
        End With
        Selection.Find.Execute Replace:=wdReplaceAll
        
        Selection.Find.ClearFormatting
        Selection.Find.Replacement.ClearFormatting
        Selection.Find.Style = ActiveDocument.Styles("Normal")
        With Selection.Find.ParagraphFormat
            If WCAlignment = "Left" Then
                .Alignment = wdAlignParagraphLeft
            ElseIf WCAlignment = "Justified" Then
                .Alignment = wdAlignParagraphJustify
            End If
        End With
        With Selection.Find.Replacement.ParagraphFormat
            If WCAlignment = "Left" Then
                .Alignment = wdAlignParagraphJustify
            ElseIf WCAlignment = "Justified" Then
                .Alignment = wdAlignParagraphLeft
            End If
        End With
        Selection.Find.Execute Replace:=wdReplaceAll
        
        Selection.Find.ClearFormatting
        Selection.Find.Replacement.ClearFormatting
        Selection.Find.Style = ActiveDocument.Styles("Body Text")
        With Selection.Find.ParagraphFormat
            If WCAlignment = "Left" Then
                .Alignment = wdAlignParagraphLeft
            ElseIf WCAlignment = "Justified" Then
                .Alignment = wdAlignParagraphJustify
            End If
        End With
        With Selection.Find.Replacement.ParagraphFormat
            If WCAlignment = "Left" Then
                .Alignment = wdAlignParagraphJustify
            ElseIf WCAlignment = "Justified" Then
                .Alignment = wdAlignParagraphLeft
            End If
        End With
        Selection.Find.Execute Replace:=wdReplaceAll
    
    End If
    ' End
    
    ' Clear find/replace formatting
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    ' End

End Sub
Sub DeleteLastPage()
'
' DeleteLastPage Macro
' Macro recorded 11/2/2004 by Lewis W. Dymond
'
    Selection.EndKey Unit:=wdStory
    Selection.TypeBackspace
    Selection.Delete Unit:=wdCharacter, count:=1
    Selection.HomeKey Unit:=wdStory
End Sub

Sub WCUpdateTOC()
'
' Macro created 10/28/2004 by Brian F. Albee
' Updated 6/1/2006 by Brian F. Albee
    
' Find the first table of contents, delete it, and insert a new one
        
'MsgBox "In WCUpdateTOC"
        
If ActiveDocument.TablesOfContents.count >= 1 Then
        
    Selection.HomeKey Unit:=wdStory
    Selection.GoTo what:=wdGoToField, which:=wdGoToNext, count:=1, Name:="TOC"
    Selection.Delete Unit:=wdCharacter, count:=1
    
    With ActiveDocument
        .TablesOfContents.Add Range:=Selection.Range, RightAlignPageNumbers:= _
            True, UseHeadingStyles:=True, UpperHeadingLevel:=2, _
            LowerHeadingLevel:=2, IncludePageNumbers:=True, AddedStyles:= _
            "Heading 1,1,Heading 1 Unnumbered,1"
        .TablesOfContents(1).TabLeader = wdTabLeaderDots
        .TablesOfContents.Format = wdIndexIndent
    End With
        
    Call FixArticleTOC
    
    Exit Sub
    
Else

    MsgBoxText = "This document does not appear to have a Table of Contents." + Chr(10) + Chr(10) + _
    "Use the ""Insert Table of Contents"" command instead."
    MsgBox (MsgBoxText)

End If

End Sub
Sub WCInsertTOC()
'
' Macro created 10/28/2004 by Brian F. Albee
'

    On Error Resume Next
    
    With ActiveDocument
        .TablesOfContents.Add Range:=Selection.Range, RightAlignPageNumbers:= _
            True, UseHeadingStyles:=True, UpperHeadingLevel:=2, _
            LowerHeadingLevel:=2, IncludePageNumbers:=True, AddedStyles:= _
            "Heading 1,1,Heading 1 Unnumbered,1"
        .TablesOfContents(1).TabLeader = wdTabLeaderDots
        .TablesOfContents.Format = wdIndexIndent
    End With
        
    Call FixArticleTOC
    
End Sub
Sub TOC()
'
' TOC Macro
' Macro recorded 07/31/00 by Lewis W. Dymond
' Modified by Brian F. Albee 11/29/2004

    With ActiveDocument
        .TablesOfContents.Add Range:=Selection.Range, RightAlignPageNumbers:= _
            True, UseHeadingStyles:=True, UpperHeadingLevel:=2, _
            LowerHeadingLevel:=2, IncludePageNumbers:=True, AddedStyles:= _
            "Heading 1,1,Heading 1 Unnumbered,1"
        .TablesOfContents(1).TabLeader = wdTabLeaderDots
        .TablesOfContents.Format = wdIndexIndent
    End With
    
    Call FixArticleTOC

'
' Added by Brian Albee on 06-22-2004
'
    On Error Resume Next
    Selection.GoTo what:=wdGoToBookmark, Name:="WCTOCHeading"
    ActiveDocument.Bookmarks("WCTOCHeading").Delete
'
' End addition
'

End Sub
Sub WCUpdateFields()
' Intentionally duplicates UpdateFields
' Added by Brian Albee on 5-16-2004

' UpdateFields Macro
' Macro recorded 10/31/2000 by Lewis W. Dymond, Jr.
'
'    Dim aStory As Range
'    Dim aField As Field
'
'    For Each aStory In ActiveDocument.StoryRanges
'        For Each aField In aStory.Fields
'            aField.Update
'        Next aField
'    Next aStory
'
'
' Above commented by Brian Albee on 5-16-2004
' and below added by same
'

    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, Name:="WCReturnHere"
        .DefaultSorting = wdSortByName
        .ShowHidden = True
    End With

    ActiveDocument.Fields.Update
    x = 1
    While x <= ActiveDocument.TablesOfContents.count
        ActiveDocument.TablesOfContents(x).UpdatePageNumbers
        x = x + 1
    Wend
    
    Selection.GoTo what:=wdGoToBookmark, Name:="WCReturnHere"
    ActiveDocument.Bookmarks("WCReturnHere").Delete
'
' Below commented by Brian Albee on 5-18-2004
' because it duplicates a portion of SmartQuotes
'

'    With Options
'        .AutoFormatAsYouTypeReplaceQuotes = True
'    End With
'
'    Selection.WholeStory
'    Dim strToFind       As String
'    Dim strReplaceWith  As String
'
'    With Selection.Find
'        .ClearFormatting
'        strToFind = """"
'        .Text = strToFind
'        With .Replacement
'            .ClearFormatting
'            strReplaceWith = """"
'            .Text = strReplaceWith
'        End With
'        .Execute Replace:=wdReplaceAll
'
'     End With
End Sub
Sub WCUpdateFields2()
'Intentionally Duplicates UpdateFields2
'Added by Brian Albee on 5-16-2004

Dim aStory As Range
Dim aField As Field

'
' Added by Brian Albee on 06-22-2004
'
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, Name:="WCReturnHere"
        .DefaultSorting = wdSortByName
        .ShowHidden = True
    End With
'
' End addition
'

For Each aStory In ActiveDocument.StoryRanges
    For Each aField In aStory.Fields
        aField.Update
    Next aField
Next aStory
    Word.Application.Visible = True
    Word.Application.WindowState = wdWindowStateMinimize
    Word.Application.WindowState = wdWindowStateNormal
If ActiveDocument.Fields.Update = 0 Then
    'MsgBox "Update Successful"
Else
    MsgBox "Field " & ActiveDocument.Fields.Update & " has an error"
End If

'
' Added by Brian Albee on 06-22-2004
'
    Selection.GoTo what:=wdGoToBookmark, Name:="WCReturnHere"
    ActiveDocument.Bookmarks("WCReturnHere").Delete
'
' End addition
'
End Sub
Function isECInstalled() As Boolean
    Dim path As String
    Dim returnedVal As Boolean
    
    returnedVal = False
    
    path = WCReg.QueryValue("Software\ElderCounsel\ElderDocx", "InstalledVersionName")
    If path <> "" Then
        returnedVal = True
    End If
    
'MsgBox ("in isECInstalled: " & returnedVal)
    
    ECInstalled = returnedVal
    isECInstalled = returnedVal
    
End Function

Function isWDInstalled() As Boolean
    Dim returnedVal As Boolean
    
    returnedVal = False
    
    If Dir(ProgramFilesPath + "\WealthCounsel\Practice Systems Application\WealthCounsel Practice Systems.exe") > "" Then
        returnedVal = True
    End If
    
'MsgBox ("in isWDInstalled: " & returnedVal)
    
    WDInstalled = returnedVal
    isWDInstalled = returnedVal

End Function


Function GetToolbarErrorMsg(ByVal fName As String) As String
    Dim msgStr As String
    
    msgStr = "Unable to open " & fName & "." & Chr(13) & Chr(13)
    
    If WDInstalled Then
        msgStr = msgStr & "Re-install the WealthCounsel toolbar and try again." & Chr(13) _
            & "Go to www.wealthcounsel.com and select Practice Systems," & Chr(13) _
            & "then select WealthDocx followed by Updates." & Chr(13) _
            & "Download and install the most recent WealthCounsel Toolbar file."
    ElseIf ECInstalled Then
        msgStr = msgStr & "Please contact ElderCounsel support."
    Else
        msgStr = msgStr & "Please contact WealthCounsel support."
    End If
    
    GetToolbarErrorMsg = msgStr
End Function
Sub WDxDoc()
'
' WC Macro
' Macro recorded 7/31/2000 by Lewis W. Dymond
' Modified by Brian F. Albee 11/29/2004

    Dim sFileName As String
    sFileName = GetTemplatePath() + "WCStyles2.dot"
    
    On Error GoTo Error_Handler
    
    Documents.Add Template:=sFileName, NewTemplate:=False
    
    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub BDxDoc()
'
' WC Macro
' Macro recorded 7/31/2000 by Lewis W. Dymond
' Modified by Brian F. Albee 11/29/2004

    Dim sFileName As String
    sFileName = GetTemplatePath() + "BDStyles4.dot"
    
    On Error GoTo Error_Handler
    
    Documents.Add Template:=sFileName, NewTemplate:=False
    
    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub BDArticle()
'
' WC Macro
' Macro recorded 7/31/2000 by Lewis W. Dymond
' Modified by Brian F. Albee 11/29/2004
' Copy of WCDoc modified by Tracy Phillips 3-17-2014

    Dim sFileName As String
    sFileName = GetTemplatePath() + "BDStyles4.dot"
    
    On Error GoTo Error_Handler
    
    Documents.Add Template:=sFileName, NewTemplate:=False
    
    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub BDSection()
'
' WC Macro
' Macro recorded 7/31/2000 by Lewis W. Dymond
' Modified by Brian F. Albee 11/29/2004
' Copy of WCDoc modified by Tracy Phillips 3-17-2014

    Dim sFileName As String
    sFileName = GetTemplatePath() + "BDStyles3.dot"
    
    On Error GoTo Error_Handler
    
    Documents.Add Template:=sFileName, NewTemplate:=False
    
    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub


Sub WCOutlineDoc()
'
' WC Macro
' Macro recorded 7/31/2000 by Lewis W. Dymond (as WCOutline)
' Modified by Brian F. Albee 11/29/2004 (and renamed WCOutlineDoc)

    Dim sFileName As String
    sFileName = GetTemplatePath() & "WCOutlineStyles1.dot"
    
    On Error GoTo Error_Handler
    
    Documents.Add Template:=sFileName, NewTemplate:=False
    
    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub WCOutlineStyles1()
'
'   Added by Brian F. Albee 11/29/2004

    Dim sFileName As String
    sFileName = GetTemplatePath() & "WCOutlineStyles1.dot"

    On Error GoTo Error_Handler
    
    ActiveDocument.AttachedTemplate = sFileName
    ActiveDocument.UpdateStyles
    Call StylesRefresh

    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub WCStyles1()
'
'   Attach WCStyles1.dot
'   Written by Lewis W. Dymond 11/3/2000
'   Modified by Brian F. Albee 11/29/2004

    Dim sFileName As String
    sFileName = GetTemplatePath() & "WCStyles1.dot"

    On Error GoTo Error_Handler
    
    ActiveDocument.AttachedTemplate = sFileName
    ActiveDocument.UpdateStyles
    Call StylesRefresh

    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub WCStyles2()
'
'   Attach WCStyles2.dot
'   Written by Lewis W. Dymond 11/3/2000
'   Modified by Brian F. Albee 11/29/2004

    Dim sFileName As String
    sFileName = GetTemplatePath() & "WCStyles2.dot"

    On Error GoTo Error_Handler
    
    ActiveDocument.AttachedTemplate = sFileName
    ActiveDocument.UpdateStyles
    Call StylesRefresh

    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub WCStyles3()
'
'   Attach WCStyles3.dot
'   Written by Lewis W. Dymond 11/3/2000
'   Modified by Brian F. Albee 11/29/2004

    Dim sFileName As String
    sFileName = GetTemplatePath() & "WCStyles3.dot"

    On Error GoTo Error_Handler
    
    ActiveDocument.AttachedTemplate = sFileName
    ActiveDocument.UpdateStyles
    Call StylesRefresh

    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub WCStyles4()
'
'   Attach WCStyles4.dot
'   Written by Lewis W. Dymond 11/3/2000
'   Modified by Brian F. Albee 11/29/2004

    Dim sFileName As String
    sFileName = GetTemplatePath() & "WCStyles4.dot"

    On Error GoTo Error_Handler
    
    ActiveDocument.AttachedTemplate = sFileName
    ActiveDocument.UpdateStyles
    Call StylesRefresh

    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub WCStyles5()
'
'   Attach WCStyles5.dot
'   Written by Lewis W. Dymond 11/3/2000
'   Modified by Brian F. Albee 11/29/2004

    Dim sFileName As String
    sFileName = GetTemplatePath() & "WCStyles5.dot"

    On Error GoTo Error_Handler
    
    ActiveDocument.AttachedTemplate = sFileName
    ActiveDocument.UpdateStyles
    Call StylesRefresh

    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub WCStyles6()
'
'   Attach WCStyles6.dot
'   Written by Lewis W. Dymond 11/3/2000
'   Modified by Brian F. Albee 11/29/2004

    Dim sFileName As String
    sFileName = GetTemplatePath() & "WCStyles6.dot"

    On Error GoTo Error_Handler
    
    ActiveDocument.AttachedTemplate = sFileName
    ActiveDocument.UpdateStyles
    Call StylesRefresh

    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub BDStyles1()
'
'   Attach BDStyles1.dot
'   Written by Lewis W. Dymond 11/3/2000
'   Modified by Brian F. Albee 11/29/2004
'   Edited by Tracy 3-13-2014 to change WC to BC

    Dim sFileName As String
    sFileName = GetTemplatePath() & "BDStyles1.dot"

    On Error GoTo Error_Handler
    
    ActiveDocument.AttachedTemplate = sFileName
    ActiveDocument.UpdateStyles
    Call StylesRefresh

    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub BDStyles2()
'
'   Attach BDStyles2.dot
'   Written by Lewis W. Dymond 11/3/2000
'   Modified by Brian F. Albee 11/29/2004
'   Edited by Tracy 3-13-2014 to change WC to BC

    Dim sFileName As String
    sFileName = GetTemplatePath() & "BDStyles2.dot"

    On Error GoTo Error_Handler
    
    ActiveDocument.AttachedTemplate = sFileName
    ActiveDocument.UpdateStyles
    Call StylesRefresh

    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub BDStyles3()
'
'   Attach BDStyles3.dot
'   Written by Lewis W. Dymond 11/3/2000
'   Modified by Brian F. Albee 11/29/2004
'   Edited by Tracy 3-13-2014 to change WC to BC

    Dim sFileName As String
    sFileName = GetTemplatePath() & "BDStyles3.dot"

    On Error GoTo Error_Handler
    
    ActiveDocument.AttachedTemplate = sFileName
    ActiveDocument.UpdateStyles
    Call StylesRefresh

    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub BDStyles4()
'
'   Attach BDStyles4.dot
'   Written by Lewis W. Dymond 11/3/2000
'   Modified by Brian F. Albee 11/29/2004
'   Edited by Tracy 3-13-2014 to change WC to BC

    Dim sFileName As String
    sFileName = GetTemplatePath() & "BDStyles4.dot"

    On Error GoTo Error_Handler
    
    ActiveDocument.AttachedTemplate = sFileName
    ActiveDocument.UpdateStyles
    Call StylesRefresh

    Exit Sub

Error_Handler:
    MsgBox prompt:=GetToolbarErrorMsg(sFileName), _
    title:="Unable to open " & sFileName, _
    buttons:=vbCritical

End Sub
Sub AutoOpen()
'
' UpdateFields on document open Macro
' Macro recorded 11/5/2000 by Lewis W. Dymond, Jr.
'
'MsgBox "In WCicon2007 AutoOpen"
    Selection.WholeStory
    Selection.Fields.Update
    Selection.HomeKey Unit:=wdStory

End Sub
Sub SmartQuotes()
'
' SmartQuotes Macro
' Macro recorded 4/14/2001 by Lewis W. Dymond
'
    Dim lngJunk As Long

'
' Added by Brian Albee on 08-31-2004
'
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, Name:="WCReturnHere"
        .DefaultSorting = wdSortByName
        .ShowHidden = True
    End With
'
' End addition
'

    With Options
        temp = .AutoFormatAsYouTypeReplaceQuotes
        .AutoFormatAsYouTypeReplaceQuotes = True
    End With

'
' Added by Nina Rosson on 10-05-2009
' Word smart quotes do not work correctly if the quote is after a non-breaking space.
' We add a regular space after every non-breaking space before replacing quotes, and
' then remove the regular space afterwards.
'
' Changed by Nina Rosson on 10-12-2010
' Fixed the find and replace to work in header, footers and text boxes.  Created sub
' to avoid repeating same code
'
    'Fix the skipped blank Header/Footer problem
    lngJunk = ActiveDocument.Sections(1).Headers(1).Range.StoryType
    With Selection.Find
        .ClearFormatting
        .Replacement.ClearFormatting
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Execute
    End With

    Call FindReplaceSpaces
    'Call FindReplaceAnywhere("^s", "^s ")
    'Call FindReplaceAnywhere("'", "'")
    'Call FindReplaceAnywhere("""", """")
    'Call FindReplaceAnywhere("^s ", "^s")
    
'
' Added by Nina Rosson on 10-11-2010
' Brian Albee noted that smart quotes do not work correctly when a field immediately
' preceedes the closing quote: "{Word Field}"
' If a punctuation mark appears after an opening quote, it is due to smart quotes not
' working correctly.
' This is fixed below by replacing any <opening quote><punctuation> with <closing quote><punctuation>
' AutoFormatAsYouTypeReplaceQuotes must be off when this is done to prevent Word from 'fixing' it incorrectly again.
'
    
    '
    ' Removed this code because it made the macro very slow, and chances of having
    ' fields followed by quotes in WC/EC documents is very low.
    '
    
    'Options.AutoFormatAsYouTypeReplaceQuotes = False
    'Call FindReplacePunctuation    ' This call replaces the 20 calls below to FindAndReplaceAnywhere

' Double opening quote
    'Call FindReplaceAnywhere(ChrW(8220) & ";", ChrW(8221) & ";")
    'Call FindReplaceAnywhere(ChrW(8220) & ":", ChrW(8221) & ":")
    'Call FindReplaceAnywhere(ChrW(8220) & "?", ChrW(8221) & "?")
    'Call FindReplaceAnywhere(ChrW(8220) & " ", ChrW(8221) & " ")
    'Call FindReplaceAnywhere(ChrW(8220) & ".", ChrW(8221) & ".")
    'Call FindReplaceAnywhere(ChrW(8220) & ",", ChrW(8221) & ",")
    'Call FindReplaceAnywhere(ChrW(8220) & "!", ChrW(8221) & "!")
    'Call FindReplaceAnywhere(ChrW(8220) & ")", ChrW(8221) & ")")
    'Call FindReplaceAnywhere(ChrW(8220) & "]", ChrW(8221) & "]")
    'Call FindReplaceAnywhere(ChrW(8220) & "}", ChrW(8221) & "}")

' Single opening quote
    'Call FindReplaceAnywhere(ChrW(8216) & ";", ChrW(8217) & ";")
    'Call FindReplaceAnywhere(ChrW(8216) & ":", ChrW(8217) & ":")
    'Call FindReplaceAnywhere(ChrW(8216) & "?", ChrW(8217) & "?")
    'Call FindReplaceAnywhere(ChrW(8216) & " ", ChrW(8217) & " ")
    'Call FindReplaceAnywhere(ChrW(8216) & ".", ChrW(8217) & ".")
    'Call FindReplaceAnywhere(ChrW(8216) & ",", ChrW(8217) & ",")
    'Call FindReplaceAnywhere(ChrW(8216) & "!", ChrW(8217) & "!")
    'Call FindReplaceAnywhere(ChrW(8216) & ")", ChrW(8217) & ")")
    'Call FindReplaceAnywhere(ChrW(8216) & "]", ChrW(8217) & "]")
    'Call FindReplaceAnywhere(ChrW(8216) & "}", ChrW(8217) & "}")
   
'
' End addition
'
    With Options
        .AutoFormatAsYouTypeReplaceQuotes = temp
    End With
    
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
 
    Selection.GoTo what:=wdGoToBookmark, Name:="WCReturnHere"
    ActiveDocument.Bookmarks("WCReturnHere").Delete

'
' Added by Brian Albee on 11/24/2006
'
' This section of the code checks a special INI file
' for the user's "Don't use HTML paragraph auto spacing" setting
' as selected in the Set Preferences interview.
' The code is included here, rather than in a new macro, to avoid
' requiring users to install a new wcicon.dot file in order for
' their systems to work (they will need a new wcicon.dot file in
' order to use the "Don't use HTML paragraph auto spacing" option).

    Dim strPath
    Dim strNoHTMLSpacing
    
    If ProgramFilesPath = "" Then
        If Not Dir("C:\Program Files (x86)", vbDirectory) = vbNullString Then
            ' 64-bit system
            ProgramFilesPath = "C:\Program Files (x86)"
        Else
            ProgramFilesPath = "C:\Program Files"
        End If
    End If
    
    If ProgramFilesPath <> "" Then
        strPath = ProgramFilesPath + "\WealthCounsel\WealthCounsel2.ini"
    Else
        strPath = "C:\Program Files\WealthCounsel\WealthCounsel2.ini"
    End If

    strNoHTMLSpacing = System.PrivateProfileString(strPath, "General", "TFNoHTMLSpacing")

    If strNoHTMLSpacing = "true" Then
        With ActiveDocument
            .Compatibility(wdDontUseHTMLParagraphAutoSpacing) = True
        End With
    End If
    If strNoHTMLSpacing = "false" Then
        With ActiveDocument
            .OptimizeForWord97 = False
            .Compatibility(wdDontUseHTMLParagraphAutoSpacing) = False
        End With
    End If
    
End Sub

'Not used
Sub SearchAndReplaceInStory(ByVal rngStory As Word.Range, ByVal strSearch As String, ByVal strReplace As String)
'MsgBox ("search for: " & strSearch & ", replace with: " & strReplace)
    With rngStory.Find
        .ClearFormatting
        .Replacement.ClearFormatting
        .Text = strSearch
        .Replacement.Text = strReplace
        .Execute Replace:=wdReplaceAll
    End With
End Sub

'Not used
Sub FindReplaceAnywhere(ByVal pFindTxt As String, ByVal pReplaceTxt As String)
    Dim rngStory As Word.Range
    Dim lngJunk As Long
    Dim oShp As Shape

    'Iterate through all story types in the current document
    For Each rngStory In ActiveDocument.StoryRanges
        'Iterate through all linked stories
        Do
            Call SearchAndReplaceInStory(rngStory, pFindTxt, pReplaceTxt)
            On Error Resume Next
            If (rngStory.ShapeRange.count > 0) Then
                For Each oShp In rngStory.ShapeRange
                    If (oShp.TextFrame.HasText) Then
                        Call SearchAndReplaceInStory(oShp.TextFrame.TextRange, pFindTxt, pReplaceTxt)
                    End If
                Next
            End If
            On Error GoTo 0
            'Get next linked story (if any)
            Set rngStory = rngStory.NextStoryRange
        Loop Until rngStory Is Nothing
    Next
End Sub

Sub SearchAndReplaceSpacesInStory(ByVal rngStory As Word.Range)
    
    With rngStory.Find
        .ClearFormatting
        .Replacement.ClearFormatting
        .Text = "^s"
        .Replacement.Text = "^s "
        .Execute Replace:=wdReplaceAll
        
        .Text = "'"
        .Replacement.Text = "'"
        .Execute Replace:=wdReplaceAll
        
        .Text = """"
        .Replacement.Text = """"
        .Execute Replace:=wdReplaceAll
        
        .Text = "^s "
        .Replacement.Text = "^s"
        .Execute Replace:=wdReplaceAll
     End With
End Sub

Sub FindReplaceSpaces()
    Dim rngStory As Word.Range
    Dim oShp As Shape

    'Iterate through all story types in the current document
    For Each rngStory In ActiveDocument.StoryRanges
        'Iterate through all linked stories
        Do
            Call SearchAndReplaceSpacesInStory(rngStory)
            On Error Resume Next
            If (rngStory.ShapeRange.count > 0) Then
                For Each oShp In rngStory.ShapeRange
                    If (oShp.TextFrame.HasText) Then
                        Call SearchAndReplaceSpacesInStory(oShp.TextFrame.TextRange)
                    End If
                Next
            End If
            On Error GoTo 0
            'Get next linked story (if any)
            Set rngStory = rngStory.NextStoryRange
        Loop Until rngStory Is Nothing
    Next
End Sub

'Not used
Sub SearchAndReplacePunctuationInStory(ByVal rngStory As Word.Range)
'MsgBox ("search for: " & strSearch & ", replace with: " & strReplace)
    With rngStory.Find
        .ClearFormatting
        .Replacement.ClearFormatting
        
    ' Single opening quote
        .Text = ChrW(8220) & ";"
        .Replacement.Text = ChrW(8221) & ";"
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8220) & ":"
        .Replacement.Text = ChrW(8221) & ":"
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8220) & "?"
        .Replacement.Text = ChrW(8221) & "?"
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8220) & " "
        .Replacement.Text = ChrW(8221) & " "
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8220) & "."
        .Replacement.Text = ChrW(8221) & "."
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8220) & ","
        .Replacement.Text = ChrW(8221) & ","
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8220) & "!"
        .Replacement.Text = ChrW(8221) & "!"
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8220) & ")"
        .Replacement.Text = ChrW(8221) & ")"
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8220) & "]"
        .Replacement.Text = ChrW(8221) & "]"
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8220) & "}"
        .Replacement.Text = ChrW(8221) & "}"
        .Execute Replace:=wdReplaceAll
     
     'Double opening quote
        .Text = ChrW(8216) & ";"
        .Replacement.Text = ChrW(8217) & ";"
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8216) & ":"
        .Replacement.Text = ChrW(8217) & ":"
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8216) & "?"
        .Replacement.Text = ChrW(8217) & "?"
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8216) & " "
        .Replacement.Text = ChrW(8217) & " "
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8216) & "."
        .Replacement.Text = ChrW(8217) & "."
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8216) & ","
        .Replacement.Text = ChrW(8217) & ","
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8216) & "!"
        .Replacement.Text = ChrW(8217) & "!"
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8216) & ")"
        .Replacement.Text = ChrW(8217) & ")"
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8216) & "]"
        .Replacement.Text = ChrW(8217) & "]"
        .Execute Replace:=wdReplaceAll
        
        .Text = ChrW(8216) & "}"
        .Replacement.Text = ChrW(8217) & "}"
        .Execute Replace:=wdReplaceAll

    End With
End Sub

'Not used
Sub FindReplacePunctuation()
    Dim rngStory As Word.Range
    Dim lngJunk As Long
    Dim oShp As Shape

    'Iterate through all story types in the current document
    For Each rngStory In ActiveDocument.StoryRanges
        'Iterate through all linked stories
        Do
            Call SearchAndReplacePunctuationInStory(rngStory)
            On Error Resume Next
            If (rngStory.ShapeRange.count > 0) Then
                For Each oShp In rngStory.ShapeRange
                    If (oShp.TextFrame.HasText) Then
                        Call SearchAndReplacePunctuationInStory(oShp.TextFrame.TextRange)
                    End If
                Next
            End If
            On Error GoTo 0
            'Get next linked story (if any)
            Set rngStory = rngStory.NextStoryRange
        Loop Until rngStory Is Nothing
    Next
End Sub

Sub StylesRefresh()
'
' StylesRefresh Macro
' Macro recorded 6/16/2001 by Lewis W. Dymond
'

'
' Added by Brian Albee on 06-21-2004
'
    On Error Resume Next
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, Name:="WCReturnHere"
        .DefaultSorting = wdSortByName
        .ShowHidden = True
    End With
'
' End addition
'

    Selection.Find.ClearFormatting
    Selection.Find.Style = ActiveDocument.Styles("Document Title")
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Style = ActiveDocument.Styles("Document Title")
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll

    Selection.Find.ClearFormatting
    Selection.Find.Style = ActiveDocument.Styles("Heading 1")
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Style = ActiveDocument.Styles("Heading 1")
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll

    Selection.Find.ClearFormatting
    Selection.Find.Style = ActiveDocument.Styles("Heading 2")
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Style = ActiveDocument.Styles("Heading 2")
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll

    Selection.Find.ClearFormatting
    Selection.Find.Style = ActiveDocument.Styles("Heading 3")
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Style = ActiveDocument.Styles("Heading 3")
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll

    Selection.Find.ClearFormatting
    Selection.Find.Style = ActiveDocument.Styles("Heading 4")
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Style = ActiveDocument.Styles("Heading 4")
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll

    Selection.Find.ClearFormatting
    Selection.Find.Style = ActiveDocument.Styles("Heading 5")
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Style = ActiveDocument.Styles("Heading 5")
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll

'   Added by Lew Dymond on 6-24-2004
'   Return Search and Replace to no formatting
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With


'
' Added by Brian Albee on 06-21-2004
'
    Selection.GoTo what:=wdGoToBookmark, Name:="WCReturnHere"
    ActiveDocument.Bookmarks("WCReturnHere").Delete
'
' End addition
'

End Sub
Sub FixArticleTOC()

' FixArticleTOC Macro
' This macro find the TOC1 styles and changes the space after the article
' number to a tab.
' Copyright |fffd| 2002 Document Automation Developers, LLC
' All Rights Reserved.

    With Selection
        .HomeKey Unit:=wdStory
        .Find.ClearFormatting
        .Find.Style = ActiveDocument.Styles("TOC 1")
        With .Find
            .Text = ""
            .Replacement.Text = ""
            .Forward = True
            .Wrap = wdFindContinue
            .Format = True
            .MatchCase = False
            .MatchWholeWord = False
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
        End With
        .Find.Execute
        While .Find.Found = True
            .HomeKey Unit:=wdLine
            .MoveRight Unit:=wdWord, count:=1
            .MoveEndUntil cset:=" ", count:=20
            .Collapse Direction:=wdCollapseEnd
            If .Text = " " Then
                .Delete
                .TypeText vbTab
            End If
            .HomeKey Unit:=wdLine, Extend:=wdMove
            .MoveDown Unit:=wdLine, count:=1, Extend:=wdMove
            .Find.Execute
        Wend
        .HomeKey Unit:=wdStory
        .Find.ClearFormatting
        .Find.Style = ActiveDocument.Styles("TOC 1")
        .Find.Execute
        .Find.ClearFormatting
        .Find.Execute
        .MoveUp Unit:=wdParagraph, count:=2
    End With

End Sub
Sub SimpleReplace()
    ' This procedure shows how to locate the text specified by
    ' user and replace it with additional text specified by the
    ' user.
  
    With Options
        .AutoFormatAsYouTypeReplaceQuotes = True
    End With

    Selection.HomeKey Unit:=wdStory
    Dim strToFind       As String
    Dim strReplaceWith  As String
      
    With Selection.Find
        .ClearFormatting
        strToFind = """"
        .Text = strToFind
        With .Replacement
            .ClearFormatting
            strReplaceWith = """"
            .Text = strReplaceWith
        End With
        .Execute Replace:=wdReplaceAll
    
     End With
End Sub
Sub WCUpdate()
'
' WCUpdate Macro
' Macro created 5/14/2004 by Brian F. Albee
'
    '
    'Update Table of Contents and Other Fields
    '
    If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    Else
        ActiveWindow.View.Type = wdPrintView
    End If
    ActiveWindow.View.ShowFieldCodes = False
    'Dim msg
    'msg = "WealthDocs will now update fields, tables of" + Chr(13) _
    '+ "contents, and perform some other 'clean-up' functions." + Chr(13) + Chr(13) _
    '+ "Click OK to continue and wait until" + Chr(13) _
    '+ "notified that the update is complete."
    'MsgBox msg, , "WealthDocs Update"
    
    '
    'Delete :bd. through :ed.
    '
    With ActiveDocument.Content.Find
        .ClearFormatting
        .Text = ":bd."
        Do While .Execute = True
            Selection.Find.ClearFormatting
            With Selection.Find
                .Text = ":bd."
                .Replacement.Text = ""
                .Forward = True
                .Wrap = wdFindContinue
                .Format = False
                .MatchCase = False
                .MatchWholeWord = False
                .MatchWildcards = False
                .MatchSoundsLike = False
                .MatchAllWordForms = False
            End With
            Selection.Find.Execute
            Selection.Extend (":")
            Selection.Extend ("e")
            Selection.Extend ("d")
            Selection.Extend (".")
            Selection.Delete
        Loop
    End With
    '
    ' Clean-up orphaned :ed. markers
    '
    Selection.HomeKey Unit:=wdStory
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = ":ed."
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    '
    ' Reset user's find/replace boxes
    '
    Selection.HomeKey Unit:=wdStory
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    '
    Call StylesRefresh
    Call WCUpdateFields
    'Call FixArticleTOC
    Selection.HomeKey Unit:=wdStory
    'MsgBox "Update complete.", , "WealthDocs Update"
End Sub

Sub WCStyleDelete()
'
' Macro created 2/23/2005 by Brian F. Albee
'
    On Error Resume Next
    Selection.HomeKey Unit:=wdStory
    Selection.Find.ClearFormatting
    Selection.Find.Style = ActiveDocument.Styles("WC Delete")
    Selection.Find.Text = ""
    Selection.Find.Replacement.Text = ""
    Dim Counter
    Counter = 0
    Do Until Selection.Find.Execute = False
        Counter = Counter + 1
        If Counter = 100 Then
            Exit Do
        End If
        Selection.HomeKey Unit:=wdStory
        Selection.Find.Execute
        Selection.Delete Unit:=wdCharacter, count:=1
    Loop
    Selection.Find.ClearFormatting
    Selection.HomeKey Unit:=wdStory
    On Error GoTo 0
End Sub

Sub WCTOCArticleHeadings_NotUsed()

' This sub is not used because it would not work if the number was in
' a different format (e.g. roman numeral etc.)

' Brian Albee, 2006-12-21
' In the TOC, replaces the space after the Article number with a tab

    With Selection
        .HomeKey Unit:=wdStory
        
        With .Find
            .ClearFormatting
            .Style = ActiveDocument.Styles("TOC 1")
            .Replacement.ClearFormatting
            .Forward = True
            .Wrap = wdFindContinue
            .Format = True
            .MatchCase = False
            .MatchWholeWord = False
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
        
            .Text = "Article One "
            .Replacement.Text = "Article One^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Two "
            .Replacement.Text = "Article Two^t"
            .Execute Replace:=wdReplaceAll
        
            .Text = "Article Three "
            .Replacement.Text = "Article Three^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Four "
            .Replacement.Text = "Article Four^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Five "
            .Replacement.Text = "Article Five^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Six "
            .Replacement.Text = "Article Six^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Seven "
            .Replacement.Text = "Article Seven^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Eight "
            .Replacement.Text = "Article Eight^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Nine "
            .Replacement.Text = "Article Nine^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Ten "
            .Replacement.Text = "Article Ten^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Eleven "
            .Replacement.Text = "Article Eleven^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Twelve "
            .Replacement.Text = "Article Twelve^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Thirteen "
            .Replacement.Text = "Article Thirteen^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Fourteen "
            .Replacement.Text = "Article Fourteen^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Fifteen "
            .Replacement.Text = "Article Fifteen^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Sixteen "
            .Replacement.Text = "Article Sixteen^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Seventeen "
            .Replacement.Text = "Article Seventeen^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Eighteen "
            .Replacement.Text = "Article Eighteen^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Nineteen "
            .Replacement.Text = "Article Nineteen^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Twenty "
            .Replacement.Text = "Article Twenty^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Twenty-one "
            .Replacement.Text = "Article Twenty-one^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Twenty-two "
            .Replacement.Text = "Article Twenty-two^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Twenty-three "
            .Replacement.Text = "Article Twenty-three^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Twenty-four "
            .Replacement.Text = "Article Twenty-four^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Twenty-five "
            .Replacement.Text = "Article Twenty-five^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Twenty-six "
            .Replacement.Text = "Article Twenty-six^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Twenty-seven "
            .Replacement.Text = "Article Twenty-seven^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Twenty-eight "
            .Replacement.Text = "Article Twenty-eight^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Twenty-nine "
            .Replacement.Text = "Article Twenty-nine^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Thirty "
            .Replacement.Text = "Article Thirty^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Thirty-one "
            .Replacement.Text = "Article Thirty-one^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Thirty-two "
            .Replacement.Text = "Article Thirty-two^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Thirty-three "
            .Replacement.Text = "Article Thirty-three^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Thirty-four "
            .Replacement.Text = "Article Thirty-four^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Thirty-five "
            .Replacement.Text = "Article Thirty-five^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Thirty-six "
            .Replacement.Text = "Article Thirty-six^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Thirty-seven "
            .Replacement.Text = "Article Thirty-seven^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Thirty-eight "
            .Replacement.Text = "Article Thirty-eight^t"
            .Execute Replace:=wdReplaceAll
            
            .Text = "Article Thirty-nine "
            .Replacement.Text = "Article Thirty-nine^t"
            .Execute Replace:=wdReplaceAll
        End With
        
        .HomeKey Unit:=wdStory
        
        With .Find
            .Text = ""
            .Replacement.Text = ""
            .Execute Replace:=wdReplaceNone
            .ClearFormatting
        End With
        
        .MoveUp Unit:=wdParagraph, count:=2
    End With

End Sub

Function isWDxInstalled() As Boolean
    Dim returnedVal As Boolean
    
    returnedVal = False
    
    path = WCReg.QueryValue("Software\HotDocs\HotDocs\Locations", "Library Files")
    If path = "" Then
        path = WCReg.QueryValue("Software\LexisNexis\HotDocs 6\Locations", "Library Files")
    End If
    If path <> "" Then
        If Dir(path + "WealthDocx7_Complete.hdl") > "" Or Dir(path + "WealthDocx7_Advanced.hdl") > "" Or Dir(path + "WealthDocx7_Core.hdl") > "" Then
            returnedVal = True
        End If
    End If

'MsgBox ("in isWDxInstalled: " & returnedVal)
    
    isWDxInstalled = returnedVal

End Function

Function isBDxInstalled() As Boolean
    Dim returnedVal As Boolean
    
    returnedVal = False
    
    path = WCReg.QueryValue("Software\HotDocs\HotDocs\Locations", "Library Files")
    If path = "" Then
        path = WCReg.QueryValue("Software\LexisNexis\HotDocs 6\Locations", "Library Files")
    End If
    If path <> "" Then
        If Dir(path + "BusinessDocx.hdl") > "" Then
            returnedVal = True
        End If
    End If
    
'MsgBox ("in isBDxInstalled: " & returnedVal)
    
    isBDxInstalled = returnedVal

End Function

Sub Heading1()
    On Error Resume Next
    Selection.Style = ActiveDocument.Styles("Heading 1")
End Sub

Sub Heading2()
    On Error Resume Next
    Selection.Style = ActiveDocument.Styles("Heading 2")
End Sub

Sub Heading3()
    On Error Resume Next
    Selection.Style = ActiveDocument.Styles("Heading 3")
End Sub
Sub Heading4()
    On Error Resume Next
    Selection.Style = ActiveDocument.Styles("Heading 4")
End Sub
Sub Heading5()
    On Error Resume Next
    Selection.Style = ActiveDocument.Styles("Heading 5")
End Sub

Sub TextHeading2()
    On Error Resume Next
    Selection.Style = ActiveDocument.Styles("Text Heading 2")
End Sub
Sub TextHeading3()
    On Error Resume Next
    Selection.Style = ActiveDocument.Styles("Text Heading 3")
End Sub
Sub TextHeading4()
    On Error Resume Next
    Selection.Style = ActiveDocument.Styles("Text Heading 4")
End Sub
Sub TextHeading5()
    On Error Resume Next
    Selection.Style = ActiveDocument.Styles("Text Heading 5")
End Sub



Attribute VB_Name = "WCReg"
   Option Explicit
   
   Public Const REG_SZ As Long = 1
   Public Const REG_DWORD As Long = 4

   Public Const HKEY_CLASSES_ROOT = &H80000000
   Public Const HKEY_CURRENT_USER = &H80000001
   Public Const HKEY_LOCAL_MACHINE = &H80000002
   Public Const HKEY_USERS = &H80000003

   Public Const ERROR_NONE = 0
   Public Const ERROR_BADDB = 1
   Public Const ERROR_BADKEY = 2
   Public Const ERROR_CANTOPEN = 3
   Public Const ERROR_CANTREAD = 4
   Public Const ERROR_CANTWRITE = 5
   Public Const ERROR_OUTOFMEMORY = 6
   Public Const ERROR_ARENA_TRASHED = 7
   Public Const ERROR_ACCESS_DENIED = 8
   Public Const ERROR_INVALID_PARAMETERS = 87
   Public Const ERROR_NO_MORE_ITEMS = 259

   Public Const KEY_QUERY_VALUE = &H1
   Public Const KEY_SET_VALUE = &H2
   Public Const KEY_ALL_ACCESS = &H3F
   Public Const REG_OPTION_NON_VOLATILE = 0
   Public Const KEY_READ = &H20019  ' ((READ_CONTROL Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
#If VBA7 Then
   Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" _
   (ByVal hKey As Long) As Long
   
   Declare PtrSafe Function RegCreateKeyEx Lib "advapi32.dll" Alias _
   "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, _
   ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions _
   As Long, ByVal samDesired As Long, ByVal lpSecurityAttributes _
   As Long, phkResult As Long, lpdwDisposition As Long) As Long
   
   Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias _
   "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, _
   ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As _
   Long) As Long
   
   Declare PtrSafe Function RegQueryValueExString Lib "advapi32.dll" Alias _
   "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As _
   String, ByVal lpReserved As Long, lpType As Long, ByVal lpData _
   As String, lpcbData As Long) As Long
   
   Declare PtrSafe Function RegQueryValueExLong Lib "advapi32.dll" Alias _
   "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As _
   String, ByVal lpReserved As Long, lpType As Long, lpData As _
   Long, lpcbData As Long) As Long
   
   Declare PtrSafe Function RegQueryValueExNULL Lib "advapi32.dll" Alias _
   "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As _
   String, ByVal lpReserved As Long, lpType As Long, ByVal lpData _
   As Long, lpcbData As Long) As Long
   
   Declare PtrSafe Function RegSetValueExString Lib "advapi32.dll" Alias _
   "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, _
   ByVal Reserved As Long, ByVal dwType As Long, ByVal lpValue As _
   String, ByVal cbData As Long) As Long
   
   Declare PtrSafe Function RegSetValueExLong Lib "advapi32.dll" Alias _
   "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, _
   ByVal Reserved As Long, ByVal dwType As Long, lpValue As Long, _
   ByVal cbData As Long) As Long
   
   Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias _
   "GetPrivateProfileStringA" (ByVal lpApplicationName As String, _
   ByVal lpKeyName As Any, ByVal lpDefault As String, _
   ByVal lpReturnedString As String, ByVal nSize As Long, _
   ByVal lpFileName As String) As Long
#Else
   Declare Function RegCloseKey Lib "advapi32.dll" _
   (ByVal hKey As Long) As Long
   
   Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias _
   "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, _
   ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions _
   As Long, ByVal samDesired As Long, ByVal lpSecurityAttributes _
   As Long, phkResult As Long, lpdwDisposition As Long) As Long
   
   Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias _
   "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, _
   ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As _
   Long) As Long
   
   Declare Function RegQueryValueExString Lib "advapi32.dll" Alias _
   "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As _
   String, ByVal lpReserved As Long, lpType As Long, ByVal lpData _
   As String, lpcbData As Long) As Long
   
   Declare Function RegQueryValueExLong Lib "advapi32.dll" Alias _
   "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As _
   String, ByVal lpReserved As Long, lpType As Long, lpData As _
   Long, lpcbData As Long) As Long
   
   Declare Function RegQueryValueExNULL Lib "advapi32.dll" Alias _
   "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As _
   String, ByVal lpReserved As Long, lpType As Long, ByVal lpData _
   As Long, lpcbData As Long) As Long
   
   Declare Function RegSetValueExString Lib "advapi32.dll" Alias _
   "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, _
   ByVal Reserved As Long, ByVal dwType As Long, ByVal lpValue As _
   String, ByVal cbData As Long) As Long
   
   Declare Function RegSetValueExLong Lib "advapi32.dll" Alias _
   "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, _
   ByVal Reserved As Long, ByVal dwType As Long, lpValue As Long, _
   ByVal cbData As Long) As Long
   
   Declare Function GetPrivateProfileString Lib "kernel32" Alias _
   "GetPrivateProfileStringA" (ByVal lpApplicationName As String, _
   ByVal lpKeyName As Any, ByVal lpDefault As String, _
   ByVal lpReturnedString As String, ByVal nSize As Long, _
   ByVal lpFileName As String) As Long
#End If

Public Function SetValueEx(ByVal hKey As Long, sValueName As String, _
   lType As Long, vValue As Variant) As Long
       Dim lValue As Long
       Dim sValue As String
       Select Case lType
           Case REG_SZ
               sValue = vValue & Chr$(0)
               SetValueEx = RegSetValueExString(hKey, sValueName, 0&, _
                                              lType, sValue, Len(sValue))
           Case REG_DWORD
               lValue = vValue
               SetValueEx = RegSetValueExLong(hKey, sValueName, 0&, _
   lType, lValue, 4)
           End Select
   End Function

   Function QueryValueEx(ByVal lhKey As Long, ByVal szValueName As _
   String, vValue As Variant) As Long
       Dim cch As Long
       Dim lrc As Long
       Dim lType As Long
       Dim lValue As Long
       Dim sValue As String

       On Error GoTo QueryValueExError

       ' Determine the size and type of data to be read
       lrc = RegQueryValueExNULL(lhKey, szValueName, 0&, lType, 0&, cch)
       If lrc <> ERROR_NONE Then Error 5

       Select Case lType
           ' For strings
           Case REG_SZ:
               sValue = String(cch, 0)

   lrc = RegQueryValueExString(lhKey, szValueName, 0&, lType, _
   sValue, cch)
               If lrc = ERROR_NONE Then
                   vValue = Left$(sValue, cch - 1)
               Else
                   vValue = Empty
               End If
           ' For DWORDS
           Case REG_DWORD:
   lrc = RegQueryValueExLong(lhKey, szValueName, 0&, lType, _
   lValue, cch)
               If lrc = ERROR_NONE Then vValue = lValue
           Case Else
               'all other data types not supported
               lrc = -1
       End Select

QueryValueExExit:
       QueryValueEx = lrc
       Exit Function

QueryValueExError:
       Resume QueryValueExExit
   End Function

   Function QueryValue(sKeyName As String, sValueName As String)
       Dim lRetVal As Long         'result of the API functions
       Dim hKey As Long         'handle of opened key
       Dim vValue As Variant      'setting of queried value

       lRetVal = RegOpenKeyEx(HKEY_CURRENT_USER, sKeyName, 0, _
   KEY_QUERY_VALUE, hKey)
       lRetVal = QueryValueEx(hKey, sValueName, vValue)
       ' MsgBox vValue
       RegCloseKey (hKey)
       QueryValue = vValue
   End Function

' Return True if a Registry key exists

Function CheckRegistryKey(ByVal hKey As Long, ByVal KeyName As String) As Boolean
    Dim handle As Long
    ' Try to open the key
    If RegOpenKeyEx(hKey, KeyName, 0, KEY_READ, handle) = 0 Then
        ' The key exists
        CheckRegistryKey = True
        ' Close it before exiting
        RegCloseKey handle
    End If
End Function




Attribute VB_Name = "cAppEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'-------------------------------------------------------------------------
' Module    : cAppEvents
' Purpose   : Handles Word Application events
'-------------------------------------------------------------------------
Option Explicit

'This object variable will hold the object who's events we want to respond to
'Note the "WithEvents" keyword, which is what we need to tell VBA it is an object
'with events.
Public WithEvents App As Application
Attribute App.VB_VarHelpID = -1

'Listen for DocumentOpen Event
Private Sub App_DocumentOpen(ByVal doc As Document)
    On Error GoTo ErrorHandler
        Call DelayStartMacros
        showWord
        Exit Sub
ErrorHandler:
    showWord
End Sub

Private Sub Class_Terminate()
    Set App = Nothing
End Sub

' InQuest injected base64 decoded content
' yJiz
' yJiz

INQUEST-PP=macro
