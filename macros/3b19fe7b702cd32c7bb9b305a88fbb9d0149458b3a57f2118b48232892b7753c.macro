Attribute VB_Name = "AnalyzerInstaller"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim clientVersion As String
Dim progressScreen As Variant
Dim regKey As String
Dim pSettings As ProxySettings
Dim proxy As Variant
Dim dotNetMajorVersionFound As Boolean
Dim jSharpMajorVersionFound As Boolean
Dim fileDownloadList As Collection

Private Sub Class_Initialize()

dotNetMajorVersionFound = False
jSharpMajorVersionFound = False
clientVersion = "0"
regKey = ""

Set fileDownloadList = New Collection
'fileDownloadList.Add "data1.cab"
'fileDownloadList.Add "data1.hdr"
'fileDownloadList.Add "data2.cab"
'fileDownloadList.Add "ikernel.ex_"
'fileDownloadList.Add "layout.bin"
'fileDownloadList.Add "Setup.bmp"
'fileDownloadList.Add "Setup.exe"
'fileDownloadList.Add "Setup.ini"
'fileDownloadList.Add "setup.inx"
fileDownloadList.Add "setup_fresh.iss"
fileDownloadList.Add "setup_upgrade.iss"

fileDownloadList.Add "setup.exe"

End Sub

Public Sub setProxy(aProxy As Variant)

Dim aTranslator As XliffTranslator

Set aTranslator = aProxy.getTranslator

If aTranslator.isRTL Then

  Set progressScreen = New ProcessingScreenRTL

Else

  Set progressScreen = New ProcessingScreen

End If

progressScreen.setInterval 3 + fileDownloadList.Count

Set proxy = aProxy
progressScreen.setProxy aProxy

End Sub

Public Sub setRegKey(key As String)

regKey = key

End Sub

Public Sub setProxySettings(proSettings As ProxySettings)

Set pSettings = proSettings

End Sub

Public Sub setClientVersion(aVersion As String)

clientVersion = aVersion

End Sub

Public Sub setTitle(aTitle As String)

progressScreen.setTitle aTitle

End Sub

Public Function getLatestVersion(serviceProtocol As String, serverName As String, serverPort As String, webDir As String) As String

On Error GoTo SERVER_VERSION_ERROR

Dim versionURL As String
'bug10037640 10/04/2010
'versionURL = serviceProtocol & "://" & serverName & ":" & serverPort & webDir & "/ReportTemplateService.xls?getServerProperties=true"
versionURL = serviceProtocol & "://" & serverName & ":" & serverPort & webDir & "/services/x" & "/ReportTemplateService.xls?getServerProperties=true"

Dim downloader As FileDownloader
Dim versionNode As MSXML2.IXMLDOMNode
  
Set downloader = New FileDownloader

downloader.setProxySettings pSettings
downloader.OpenConnection "GET", versionURL, False
downloader.Send
 
If Not downloader.getStatus = 200 Then

  'Error message, no need to externalize
  getLatestVersion = "Error: Could not get server version: " & downloader.getStatus & " - " & downloader.getStatusText
  Exit Function

End If
  
Dim versionString As String
Dim versionDocument As MSXML2.DOMDocument30

versionString = downloader.getResponseText

Set versionDocument = New MSXML2.DOMDocument30
versionDocument.validateOnParse = False
versionDocument.async = False
versionDocument.setProperty "SelectionLanguage", "XPath"
versionDocument.LoadXML versionString

Set versionNode = versionDocument.selectSingleNode(".//version")

getLatestVersion = versionNode.Text

If False Then
SERVER_VERSION_ERROR:
  'Error message, no need to externalize
  getLatestVersion = "Error: Could not get server version: " & Err.Description
Exit Function

End If

End Function

Public Function install(serviceProtocol As String, serverName As String, serverPort As String, webDir As String, isUpgrade As Boolean) As Boolean

progressScreen.Show

Dim installLocationURL As String

installLocationURL = serviceProtocol & "://" & serverName & ":" & serverPort & webDir

If Not downloadInstallerAndRun(installLocationURL, isUpgrade) Then

  progressScreen.Hide
  Unload progressScreen
  install = False
  
  Exit Function

End If



'for bug7226115 07/01/2008 by JT
'Copy local help file
On Error GoTo HELP_COPY_ERROR
Dim loc As String
loc = proxy.GetLocale

If loc <> "en-US" Then
  If (loc <> "pt-BR") And (loc <> "zh-CN") And (loc <> "zh-TW") Then
    loc = Left(loc, 2)
  End If

  Dim locfile As String
  locfile = "ExcelAnalyzer_" & loc & ".chm"
  Dim installDir As String
  installDir = GetRegistry("HKEY_CURRENT_USER", regKey, "Install_Dir")

  Dim filefrom As String
  Dim fileto As String
  filefrom = installDir & "\help\" & locfile
  fileto = installDir & "\help\ExcelAnalyzer.chm"
  

  Dim fileSystemObject As Object
  Set fileSystemObject = CreateObject("Scripting.FileSystemObject")
  fileSystemObject.CopyFile filefrom, fileto, True


End If
HELP_COPY_ERROR:

'----------------------


progressScreen.Hide

Unload progressScreen


install = True


End Function

Private Function checkUserCanceled() As Boolean

DoEvents
If progressScreen.userCanceled Then
  
  Dim returnCode As Integer
  
  returnCode = ShowMsgBox(proxy.getTranslator.GetTranslation("cancel_installation"), vbCritical, True)
  progressScreen.userCanceled = False
  
  If returnCode = vbYes Then
  
    checkUserCanceled = True
    Exit Function
  
  End If
  
End If

checkUserCanceled = False

End Function

Private Function downloadInstallerAndRun(installLocationURL As String, isUpgrade As Boolean) As Boolean

Dim fileSystem As Variant
Dim tmpInstallDir As String
Dim installerLocation As String

If Not jSharpMajorVersionFound Then

'  fileDownloadList.Add "vjredist.exe"
'  progressScreen.setInterval progressScreen.getInterval + 2

End If

progressScreen.incrementInterval proxy.getTranslator.GetTranslation("preparing_download")

Set fileSystem = CreateObject("Scripting.FileSystemObject")

tmpInstallDir = fileSystem.GetSpecialFolder(2) & "\" & "ExcelAnalyzer"

If Not fileSystem.FolderExists(tmpInstallDir) Then
  
  fileSystem.CreateFolder tmpInstallDir

End If

installerLocation = tmpInstallDir & "\setup.exe"

If checkUserCanceled Then
  
  downloadInstallerAndRun = False
  Exit Function
  
End If

Dim installerURLPrefix As String
Dim aFile As Variant

installerURLPrefix = installLocationURL & "/setup_10_1_3_4/"

For Each aFile In fileDownloadList

  If Not downloadFile(installerURLPrefix & aFile, tmpInstallDir & "\" & aFile) Then
    
    downloadInstallerAndRun = False
    Exit Function
  
  End If

Next

If checkUserCanceled Then
  
  downloadInstallerAndRun = False
  Exit Function
  
End If

If Not jSharpMajorVersionFound Then

 ' progressScreen.incrementInterval proxy.getTranslator.GetTranslation("installing_microsoft_jsharp")
 ' runCommand tmpInstallDir & "\vjredist.exe /q:a /c:" & Chr(34) & "install /l /q" & Chr(34)

End If

progressScreen.incrementInterval proxy.getTranslator.GetTranslation("installing_desktop_client")

Dim installOptions As String
Dim silentScriptFileName As String

If isUpgrade Then

  silentScriptFileName = "\setup_upgrade.iss"

Else

  silentScriptFileName = "\setup_fresh.iss"

End If

fileSystem.CopyFile tmpInstallDir & "\" & silentScriptFileName, tmpInstallDir & "\setup.iss"
'runCommand installerLocation & " -s"
runCommand installerLocation & " -s -f1" & tmpInstallDir & "\setup.iss"

Dim installDir As String

installDir = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Install_Dir")

If installDir = "" Then

  ShowMsgBox proxy.getTranslator.GetTranslation("install_did_not_complete"), vbCritical
  downloadInstallerAndRun = False
  Exit Function

End If

If checkUserCanceled Then
  
  downloadInstallerAndRun = False
  Exit Function
  
End If

progressScreen.incrementInterval proxy.getTranslator.GetTranslation("installation_complete")
downloadInstallerAndRun = True

End Function

Private Function downloadFile(url As String, filePath As String) As Boolean

Dim downloader As FileDownloader
Dim fileSystem As Variant
Dim outputStream As Variant
  
Set downloader = New FileDownloader

downloader.setProxySettings pSettings
downloader.OpenConnection "GET", url, True
downloader.Send

'progressScreen.incrementInterval proxy.GetTranslator.GetTranslation("downloading_client_installer")
progressScreen.incrementInterval proxy.getTranslator.GetTranslation("downloading") & url

downloader.waitForResponse
    
If checkUserCanceled Then
  
  downloadFile = False
  Exit Function
  
End If
  
If Not downloader.getStatus = 200 Then

  'Error message, no need to externalize
  ShowMsgBox "Error: Download failed: " & downloader.getStatus & " - " & downloader.getStatusText, vbCritical
  downloadFile = False
  Exit Function

End If
  
Set fileSystem = CreateObject("Scripting.FileSystemObject")
Set outputStream = CreateObject("Adodb.Stream")
  
' adTypeBinary = 1
outputStream.Type = 1
outputStream.Open
outputStream.Write downloader.getResponseBody
' adSaveCreateOverWrite = 2
outputStream.savetofile filePath, 2
outputStream.Close

downloadFile = True

End Function

Private Sub runCommand(cmd As String)

ShellAndWait cmd, vbNormalFocus

End Sub

Public Function checkPrerequisites() As Boolean

Dim errorMessage As String
Dim windowsInstaller As Object
Dim windowsInstallerVersion As String
Dim windowsInstallerMajorVersion As String
Dim windowsInstallerMajorVersionNumber As Integer
Dim productCount As Integer
Dim index As Integer
Dim productID As Variant
Dim prodName As String
Dim currentVersion As String
Dim versionNumber As Long
Dim currentMajorVersionNumber As Integer
Dim jSharpMajorVersion As Integer
Dim dotNetMajorVersion As Integer
Dim lowerCaseProdName As String

dotNetMajorVersionFound = False
jSharpMajorVersionFound = False
'Check version of windows installer installed
Set windowsInstaller = CreateObject("WindowsInstaller.Installer")
windowsInstallerVersion = windowsInstaller.Version
windowsInstallerMajorVersion = Left(windowsInstallerVersion, 1)
windowsInstallerMajorVersionNumber = val(windowsInstallerMajorVersion)
    
If (windowsInstallerMajorVersionNumber = 1) Then
    
  errorMessage = _
    "Your version of Windows Installer is: " & windowsInstallerVersion & "." & vbNewLine & _
    "Please make sure Windows Installer version 2.0 or greater is installed."
                   
  ShowMsgBox errorMessage, vbCritical
  
  checkPrerequisites = False
  
  Exit Function
    
End If
    
dotNetMajorVersion = 2
jSharpMajorVersion = 2


dotNetMajorVersionFound = checkDotNetFramework()
If dotNetMajorVersionFound Then

jSharpMajorVersionFound = True ' JT 02202008
checkPrerequisites = True ' JT 02202008
  
  
  Exit Function
End If

' Check for .net 2.0 installed
' Check for J# 2.0 installed
For Each productID In windowsInstaller.Products
       
  prodName = windowsInstaller.ProductInfo(productID, "ProductName")
  currentVersion = windowsInstaller.ProductInfo(productID, "Version")
  
  If currentVersion = "" Then
  
    currentMajorVersionNumber = -1
  
  Else
  
    versionNumber = CLng(currentVersion)
    currentMajorVersionNumber = (versionNumber / 65536) / 256
  
  End If
  
  lowerCaseProdName = StrConv(prodName, vbLowerCase)

  If (Not dotNetMajorVersionFound And (InStr(lowerCaseProdName, "microsoft .net framework") = 1)) Then

    If (currentMajorVersionNumber >= dotNetMajorVersion) Then
                  
      dotNetMajorVersionFound = True
                                
    End If
            
  ElseIf (Not jSharpMajorVersionFound And (InStr(lowerCaseProdName, "microsoft visual j") = 1)) Then

    If (currentMajorVersionNumber >= jSharpMajorVersion) Then
                  
      jSharpMajorVersionFound = True
                
    End If
            
  End If
        
Next

' We don't require JSharp anymore...
jSharpMajorVersionFound = True

checkPrerequisites = True

End Function

Public Function isDotNetMajorVersionFound() As Boolean

isDotNetMajorVersionFound = dotNetMajorVersionFound

End Function

Public Function isJSharpMajorVersionFound() As Boolean

isJSharpMajorVersionFound = jSharpMajorVersionFound

End Function

Public Function checkDotNetFramework() As Boolean ' by JT 06182007 bug 6135137
Dim valueL As Long
Dim rKey As String
Dim rootKey As String

checkDotNetFramework = False

rootKey = "HKEY_LOCAL_MACHINE"

'.NET 3.0
rKey = "SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.0\Setup"
valueL = GetRegistryDWord(rootKey, rKey, "InstallSuccess", 0)

If valueL = 1 Then
  checkDotNetFramework = True
  Exit Function
End If

'.NET 2.0
rKey = "SOFTWARE\Microsoft\NET Framework Setup\NDP\v2.0.50727"
valueL = GetRegistryDWord(rootKey, rKey, "Install ", 0)

If valueL = 1 Then
  checkDotNetFramework = True
  Exit Function
End If


checkDotNetFramework = False

End Function



Attribute VB_Name = "ButtonEventHandler"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim WithEvents commandButton As Office.CommandBarButton
Attribute commandButton.VB_VarHelpID = -1
Dim tmpButton As Office.CommandBarButton
Dim eventListener As Object
Dim enabled As Boolean
Dim caption As String
Dim isGlobal As Boolean

Private Sub Class_Initialize()

Set commandButton = Nothing
Set tmpButton = Nothing
Set eventListener = Nothing
enabled = False
caption = ""
isGlobal = False

End Sub

Public Sub SetGlobal(flag As Boolean)

isGlobal = flag

End Sub

Public Function GetGlobal() As Boolean

GetGlobal = isGlobal

End Function

Public Function GetButton() As Office.CommandBarButton

Set GetButton = tmpButton

End Function

Public Sub DisableButton()

enabled = False

If Not commandButton Is Nothing Then
  
  commandButton.enabled = False

End If

End Sub

Public Sub EnableButton()

enabled = True

If Not commandButton Is Nothing Then
  
  commandButton.enabled = True

End If
End Sub

Public Function IsEnabled() As Boolean

IsEnabled = enabled

End Function

Public Function GetCaption() As String

GetCaption = caption

End Function

Public Sub SetCaption(aCaption As String)

caption = aCaption

If Not commandButton Is Nothing Then
  
  commandButton.caption = aCaption
  
End If

End Sub

Public Sub addListener(aButton As Office.CommandBarButton, aListener As Object)

Set commandButton = aButton
Set tmpButton = aButton
Set eventListener = aListener
caption = commandButton.caption

End Sub

Public Sub disableListener()

Set commandButton = Nothing

End Sub

Public Sub enableListener()

Set commandButton = tmpButton

End Sub

Public Sub removeListener()

Set commandButton = Nothing
Set tmpButton = Nothing
Set eventListener = Nothing

End Sub

Private Sub commandButton_Click(ByVal Ctrl As Office.CommandBarButton, CancelDefault As Boolean)

On Error Resume Next

If Not eventListener Is Nothing Then

  eventListener.ButtonClicked commandButton

End If

End Sub
Attribute VB_Name = "DataAnalyzer"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const mUserDirKey As String = "Software\Oracle\XML Publisher\Analyzer for Excel"
'Private Const mVersionNumber As String = "10.1.3.4"

Dim clientVersion As String
Dim reportName As String
Dim reportTitle As String
Dim analyzerProxy As Variant
Dim reportServerHost As String
Dim reportServerPort As String
Dim reportServiceEndpoint As String
Dim reportServiceWebDir As String
Dim serviceGatewayClass As String
Dim serviceProtocol As String
Dim xmlpOnlineWebDir As String
Dim parameterNames As Collection
Dim parameterTypes As Collection
Dim comboBoxDefinitions As Variant
Dim multiSelectorDefinitions As Variant
Dim refreshToolbarLock As Boolean
Dim username As String
Dim password As String
Dim dataReceptorWSDL As String
Dim callableServiceClass As String
Dim toolbarTitle As String
Dim regKey As String
Dim webAdapter As WebServiceAdapter
Dim pSettings As ProxySettings
Dim translator As XliffTranslator
Dim reportParameterListeners As Collection
Dim locale As String
Dim debugClient As String
Dim gMenuBar As GlobalMenuBar
Dim reportController As ReportEventController
Dim queryToolbar As Office.CommandBar
Dim launchToolbarNames As Collection

Dim WithEvents queryButton As Office.CommandBarButton
Attribute queryButton.VB_VarHelpID = -1
Dim WithEvents refreshHTMLButton As Office.CommandBarButton
Attribute refreshHTMLButton.VB_VarHelpID = -1
Dim templateComboBox As Office.CommandBarComboBox
Attribute templateComboBox.VB_VarHelpID = -1
Public Function GetUserKey() As String ' by JT Vista Support 06/21/2007

GetUserKey = mUserDirKey

End Function




Public Sub InitDataAnalyzer(aProxy As Variant, rKey As String)

Set analyzerProxy = aProxy
Set webAdapter = Nothing
Set parameterNames = Nothing
Set parameterTypes = Nothing
Set comboBoxDefinitions = Nothing
Set multiSelectorDefinitions = Nothing
Set queryToolbar = Nothing
refreshToolbarLock = False
username = ""
password = ""
reportName = ""
reportTitle = ""
toolbarTitle = ""
regKey = rKey
Set translator = New XliffTranslator
Set reportParameterListeners = New Collection
Set pSettings = New ProxySettings

pSettings.setRegKey regKey

analyzerProxy.InitializeHiddenData
UpdateClientVersion

debugClient = analyzerProxy.GetClientDebugFlag
SetupDebugging

serviceGatewayClass = analyzerProxy.GetServiceGatewayClass
callableServiceClass = analyzerProxy.GetReportServiceClass
reportServerHost = analyzerProxy.GetReportServerHost
reportServerPort = analyzerProxy.GetReportServerPort
reportServiceEndpoint = analyzerProxy.GetReportServiceEndpoint
reportServiceWebDir = analyzerProxy.GetReportServiceWebDir
xmlpOnlineWebDir = analyzerProxy.GetXMLPOnlineWebDir
serviceProtocol = analyzerProxy.GetServiceProtocol

SetDataReceptorWSDL

SilentlyLoadPlugin

InitializeGlobalMenuBar

End Sub

Private Sub SetupDebugging()

On Error GoTo LOGGING_FACTORY_NOT_FOUND

If LCase(debugClient) = "true" Then

  Dim loggingFactory As Object
  Dim logger As Object
  
  Set loggingFactory = CreateObject("XDOUtilities.LoggerFactory")
  Set logger = loggingFactory.getLogger
  logger.setLogEnabled True

End If

LOGGING_FACTORY_NOT_FOUND:

End Sub

Private Sub InitializeWebAdapter()

Dim appFolder As String

appFolder = ""
If LCase(debugClient) = "true" Then

  Dim installationDir As String
  
  installationDir = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Install_Dir")
  appFolder = installationDir

End If

Set webAdapter = New WebServiceAdapter

webAdapter.setUseRTLStatusPanel translator.isRTL
webAdapter.setServiceDetails serviceProtocol, reportServerHost, reportServerPort, reportServiceEndpoint, reportServiceWebDir
webAdapter.setServiceGatewayClass serviceGatewayClass, appFolder
UpdateProxySettings

End Sub

Public Sub InitializeGlobalMenuBar()

Set gMenuBar = New GlobalMenuBar

Set reportController = New ReportEventController
reportController.SetTranslator translator
reportController.SetDataAnalyzer Me
gMenuBar.SetTranslator translator
gMenuBar.SetEventController reportController

Set launchToolbarNames = New Collection

End Sub

Public Sub ReInitializeGlobalMenuBar()

Dim toolbarNamesCopy As Collection
Dim aName As Variant
 
Set toolbarNamesCopy = New Collection

For Each aName In launchToolbarNames

  toolbarNamesCopy.Add aName

Next

InitializeGlobalMenuBar

For Each aName In toolbarNamesCopy

  Dim name As String
  
  name = aName
  CreateLaunchToolbar name

Next

End Sub
  

Public Function GetReportController() As ReportEventController

Set GetReportController = reportController

End Function

Public Function GetWebAdapter() As Variant

Set GetWebAdapter = webAdapter

End Function

Public Function getTranslator() As XliffTranslator

Set getTranslator = translator

End Function

Public Function GetUsername()

GetUsername = username

End Function

Public Function GetPassword()

GetPassword = password

End Function

Public Function GetDataReceptorWSDL()

GetDataReceptorWSDL = dataReceptorWSDL

End Function

Public Sub SetReportTitle(title As String)

reportTitle = title

End Sub

Public Function GetReportTitle() As String

GetReportTitle = reportTitle

End Function

Public Function GetToolbarTitle() As String

GetToolbarTitle = toolbarTitle

End Function

Public Sub SetReportName(name As String)

reportName = name

End Sub

Public Function GetReportName() As String

GetReportName = reportName

End Function

Public Function GetRegKey() As String

GetRegKey = regKey

End Function

Public Function GetReportServerHost() As String

GetReportServerHost = reportServerHost

End Function

Public Function GetReportServerPort() As String

GetReportServerPort = reportServerPort

End Function

Public Function GetReportServiceEndpoint() As String

GetReportServiceEndpoint = reportServiceEndpoint

End Function

Public Function GetReportServiceWebDir() As String

GetReportServiceWebDir = reportServiceWebDir

End Function

Public Function GetLocale()

GetLocale = locale

End Function

Public Sub SetLocale(aLocale As String)

locale = aLocale

End Sub

Public Sub RegisterReportServer()

Dim appInfo As Object

Set appInfo = CreateObject("XDOUtilities.ApplicationInfo")

appInfo.RegisterReportServer serviceProtocol, reportServerHost, reportServerPort, reportServiceEndpoint, reportServiceWebDir, xmlpOnlineWebDir

End Sub

Public Sub UpdateLocale()

'locale = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Locale")
locale = GetRegistry("HKEY_CURRENT_USER", regKey, "Locale") ' by JT 04/22/2010 Bug 9646604

If locale = "" Then

  locale = GetOSUserLocaleSetting
  'Locale = analyzerProxy.GetDefaultLocale

End If

On Error GoTo SET_LOCALE_ERROR
translator.setCurrentLocale locale

If False Then
SET_LOCALE_ERROR:
  ' Translation file not found?
  locale = "en-US"
  translator.setCurrentLocale locale
  Err.Clear
End If

ProductName = translator.GetTranslation("oracle_xml_publisher")

If translator.isRTL Then

  MsgBox2RTL.SetTranslationStrings ProductName, translator.GetTranslation("ok"), translator.GetTranslation("yes"), translator.GetTranslation("no")
  UseMsgBoxRTL = True

Else

  MsgBox2.SetTranslationStrings ProductName, translator.GetTranslation("ok"), translator.GetTranslation("yes"), translator.GetTranslation("no")
  UseMsgBoxRTL = False
  
End If

End Sub

Public Function GetProxySettings() As ProxySettings

Set GetProxySettings = pSettings

End Function

Public Sub UpdateProxySettings()

pSettings.updateSettings
If Not webAdapter Is Nothing Then

  webAdapter.setProxySettings pSettings

End If

End Sub

Public Sub CheckForUpdates()

Dim latestVersion As String
Dim installer As AnalyzerInstaller

Set installer = New AnalyzerInstaller
installer.setProxy Me
installer.setProxySettings pSettings
latestVersion = installer.getLatestVersion(serviceProtocol, reportServerHost, reportServerPort, xmlpOnlineWebDir)

If latestVersion = "" Or InStr(latestVersion, "Error") > 0 Then

  'Error message, no need to externalize
  ShowMsgBox latestVersion, vbCritical

ElseIf IsVersionGreater(latestVersion, clientVersion) Then

  Dim clientVersion2 As String
  Dim upgradeMessage As String
  Dim returnCode As Integer
  Dim isUpgrade As Boolean
  
  If clientVersion = "" Then
    
    clientVersion2 = "Not Installed"
    isUpgrade = False
    
  Else
    
    clientVersion2 = clientVersion
    isUpgrade = True
    
    'JT 04/17/2008
    Dim msgname As String
    msgname = "msg6"
    upgradeMessage = translator.GetTranslation(msgname)
    If InStr(upgradeMessage, msgname) > 0 Then ' No message in the translation (older than 10.1.3.4)
      upgradeMessage = "A new update of the Analyzer for EXCEL is available. Please close all open applications and uninstall your current version  (Control Panel -> Add or Remove Programs -> Oracle BI Publisher Analyzer for Excel). When you connect to the server again, the new version will be installed."
    End If
    returnCode = ShowMsgBox(upgradeMessage, vbInformation, False)
    Exit Sub
  End If
  
  upgradeMessage = translator.GetTranslation("new_update_available") & vbNewLine & vbNewLine
  upgradeMessage = upgradeMessage & translator.GetTranslation("new_version") & Replace(latestVersion, "_", ".") & vbNewLine
  upgradeMessage = upgradeMessage & translator.GetTranslation("current_version") & Replace(clientVersion2, "_", ".") & vbNewLine & vbNewLine
  upgradeMessage = upgradeMessage & translator.GetTranslation("do_you_wish_to_upgrade_to_the_newer_version")
  returnCode = ShowMsgBox(upgradeMessage, vbInformation, True)
  
  If returnCode = vbYes Then
  
    Dim dotNetFound As Boolean
    Dim jsharpFound As Boolean

    installer.checkPrerequisites

    dotNetFound = installer.isDotNetMajorVersionFound
    jsharpFound = installer.isJSharpMajorVersionFound

    If (Not dotNetFound) Or (Not jsharpFound) Then
  
      ShowPrereqPanel dotNetFound, jsharpFound
      Exit Sub
      
    End If

    InstallClient isUpgrade
        
  End If

Else

  ShowMsgBox translator.GetTranslation("no_new_updates_available")

End If

End Sub

Public Function Encrypt(str As String) As String

Encrypt = webAdapter.Encrypt(str, dataReceptorWSDL)

End Function

Public Function Decrypt(str As String) As String

Decrypt = webAdapter.Decrypt(str, dataReceptorWSDL)

End Function

Public Function ValidateLogin(uname As String, passwd As String) As String

analyzerProxy.setBusy True

Dim params As Collection
Dim Output As Variant

Set params = New Collection

params.Add uname
params.Add passwd
params.Add reportName
params.Add ""
params.Add locale

webAdapter.invokeCallableService callableServiceClass, "validateLogin", params, False

If checkForError(webAdapter) Then

  ValidateLogin = ""
  Exit Function

End If

Set Output = webAdapter.getOutput
ValidateLogin = Output.Item("return")

analyzerProxy.setBusy False

End Function

Public Sub LaunchWebPage(url As String)

Dim IE As Variant
Set IE = CreateObject("InternetExplorer.Application")
  
IE.Navigate url
IE.Visible = True
  
While IE.Busy
  DoEvents
Wend

End Sub

Public Sub ShowReportWebPage()

If SetDataReceptorWSDL Then

  Dim reportURL As String
  
  reportURL = GetCompleteReportServerWebDir & reportName

  LaunchWebPage reportURL

End If

End Sub

Public Function GetServerVersion() As String

On Error GoTo SKIP_SERVER_VERSION
Dim installer As AnalyzerInstaller

Set installer = New AnalyzerInstaller
installer.setProxy Me
installer.setProxySettings pSettings
GetServerVersion = installer.getLatestVersion(serviceProtocol, reportServerHost, reportServerPort, xmlpOnlineWebDir)
Exit Function

SKIP_SERVER_VERSION:
GetServerVersion = ""

End Function

Public Function GetCompleteReportServerWebDir()

  GetCompleteReportServerWebDir = serviceProtocol & "://" & reportServerHost & ":" & reportServerPort & xmlpOnlineWebDir
  
End Function
'JT 01/30/2008
Private Function GetXDOVersion()
  GetXDOVersion = GetRegistry("HKEY_CURRENT_USER", regKey, "Current_XDO_Version")
End Function



Public Sub SetAboutProperties(aboutProperties As Object)

Dim cVersion As String
Dim serverVersion As String
Dim installationDir As String
Dim rName As String
Dim lPage As String

If reportName = "" Then
  
  rName = "Not set"

Else

  rName = reportName

End If

If reportServerHost = "" Then
  
  lPage = "Not set"

Else

  lPage = GetCompleteReportServerWebDir & "/login.jsp"

End If




If clientVersion = "" Then

  cVersion = "Not Installed"

Else

  cVersion = clientVersion

End If

serverVersion = GetServerVersion

installationDir = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Install_Dir")

If installationDir = "" Then

  installationDir = "Not found"
  
End If

Dim osServicePackVersion As String
Dim osVersion As String
Dim osPath As String
Dim osName As String
Dim osSysRoot As String
Dim osRegKey As String

osRegKey = "Software\Microsoft\Windows NT\CurrentVersion"
osServicePackVersion = GetRegistry("HKEY_LOCAL_MACHINE", osRegKey, "CSDVersion")
osVersion = GetRegistry("HKEY_LOCAL_MACHINE", osRegKey, "CurrentVersion")
osPath = GetRegistry("HKEY_LOCAL_MACHINE", osRegKey, "PathName")
osName = GetRegistry("HKEY_LOCAL_MACHINE", osRegKey, "ProductName")
osSysRoot = GetRegistry("HKEY_LOCAL_MACHINE", osRegKey, "SystemRoot")

'aboutProperties.Add "Installed Client Version", Replace(cVersion, "_", ".")
'aboutProperties.Add "Server Version", Replace(serverVersion, "_", ".")
'by JT for bug6262397
'aboutProperties.Add "Installed Client Version", mVersionNumber

'JT
 Dim cXDOVersion As String
cXDOVersion = GetXDOVersion
  'analyzerProperties.Add "Installed Client Version", cVersion
aboutProperties.Add "Installed Client Version", cXDOVersion





aboutProperties.Add "Installation Path", installationDir
aboutProperties.Add Application.name & " Version", Application.Version
aboutProperties.Add "Operating System", osName
aboutProperties.Add "OS Version", osVersion
aboutProperties.Add "OS Root Path", osSysRoot
aboutProperties.Add "Service Pack", osServicePackVersion
aboutProperties.Add "Report Path", rName
aboutProperties.Add "Login Page", lPage

aboutProperties.Add "ExcelLauncher.Version", GetAssemblyVersion("ExcelLauncher.Launcher")
aboutProperties.Add "XDOComponents.Version", GetAssemblyVersion("XDOComponents.ReportBrowserView")
aboutProperties.Add "XDOReportBrowserRunner.Version", GetAssemblyVersion("XDOReportBrowserRunner.Program")
aboutProperties.Add "ServiceGateway.Version", GetAssemblyVersion(serviceGatewayClass)
'aboutProperties.Add "Utilities4J.Version", GetAssemblyVersion("Utilities4J.XMLUtil")
aboutProperties.Add "XDOUtilities.Version", GetAssemblyVersion("XDOUtilities.ApplicationInfo")

aboutProperties.Add "ExcelLauncher.Location", GetAssemblyLocation("ExcelLauncher.Launcher")
aboutProperties.Add "XDOComponents.Location", GetAssemblyLocation("XDOComponents.ReportBrowserView")
aboutProperties.Add "XDOReportBrowserRunner.Location", GetAssemblyLocation("XDOReportBrowserRunner.Program")
aboutProperties.Add "ServiceGateway.Location", GetAssemblyLocation(serviceGatewayClass)
'aboutProperties.Add "Utilities4J.Location", GetAssemblyLocation("Utilities4J.XMLUtil")
aboutProperties.Add "XDOUtilities.Location", GetAssemblyLocation("XDOUtilities.ApplicationInfo")

End Sub

Public Function GetAssemblyVersion(className As String) As String

On Error GoTo GET_ASSEMBLY_VERSION_FAILED

Dim instance As Object
Dim verStr As String

Set instance = CreateObject(className)

verStr = instance.GetAssemblyVersion
GetAssemblyVersion = verStr

If False Then
GET_ASSEMBLY_VERSION_FAILED:
  GetAssemblyVersion = "Not Found"
End If

End Function

Public Function GetAssemblyLocation(className As String) As String

On Error GoTo GET_ASSEMBLY_LOCATION_FAILED

Dim instance As Object
Dim verStr As String

Set instance = CreateObject(className)

verStr = instance.GetAssemblyLocation
GetAssemblyLocation = verStr

If False Then
GET_ASSEMBLY_LOCATION_FAILED:
  GetAssemblyLocation = "Not Found"
End If

End Function

Public Sub Logout()

username = ""
password = ""

End Sub

Public Function ShowLogin() As Boolean

If Not CheckInstallation Then

  ShowLogin = False
  Exit Function

End If

InitializeWebAdapter

If Not Login Then

  ShowLogin = False
  Exit Function

End If

ShowLogin = True

End Function

Public Sub LoadReport(Optional aUsername As String = "", Optional aPassword As String = "")

If reportName = "" Then

  'Error message, no need to externalize
  ShowMsgBox "Error: File does not contain any report data!", vbExclamation

Else

  If reportServerHost = "" Or reportServerPort = "" Then
  
    'Error message, no need to externalize
    ShowMsgBox "Error: File is not properly configured with server and port!", vbExclamation
  
  Else
  
    If Not CheckInstallation Then
    
      Exit Sub
    
    End If

    InitializeWebAdapter

    If aUsername = "" Then
      If Not Login Then
    
        'RemoveToolbar
        Exit Sub
    
      End If
    Else
    
      username = aUsername
      password = aPassword
    
    End If

    Dim installationDir As String
    
    installationDir = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Install_Dir")
        
    StatusPanel.setInstallDir installationDir
    StatusPanel.setProxy Me
    StatusPanelRTL.setInstallDir installationDir
    StatusPanelRTL.setProxy Me
    
    Dim params As Collection
    Dim Output As Variant
    Dim reportXML As String
    Dim reportParamSavedInfo As Collection
    Dim reportParamXML As String
    Dim reportParam As Variant
    
    Set reportParamSavedInfo = analyzerProxy.GetReportParametersInfo
    Set params = New Collection

    reportParamXML = "<?xml version='1.0' encoding='UTF-8'?>" & vbNewLine
    reportParamXML = reportParamXML & "<report-parameters>"

    For Each reportParam In reportParamSavedInfo

      Dim name As String
      Dim value As String
      
      name = reportParam.Item("name")
      value = reportParam.Item("value")
      
      If Not value = "" Then
      
        reportParamXML = reportParamXML & "<parameter name='" & escapeXML(name) & "' value='" & escapeXML(value) & "' />"
        
      End If
    
    Next

    reportParamXML = reportParamXML & "<parameter name='_xl' value='" & escapeXML(locale) & "' />"
    reportParamXML = reportParamXML & "</report-parameters>"

    params.Add reportName
    params.Add reportParamXML
    params.Add username
    params.Add password
    params.Add "true"

    webAdapter.invokeCallableService callableServiceClass, "getParameterInfo", params, False

    If checkForError(webAdapter) Then

      Exit Sub

    End If

    Set Output = webAdapter.getOutput
    reportXML = Output.Item("return")

    reportXML = webAdapter.inflateXML(reportXML)

    analyzerProxy.SetColumnMapper Nothing
    Set comboBoxDefinitions = CreateObject("Scripting.Dictionary")
    Set multiSelectorDefinitions = CreateObject("Scripting.Dictionary")
    Set parameterNames = New Collection
    Set parameterTypes = New Collection
    
    refreshToolbarLock = True
    
    CreateToolbar reportParamSavedInfo, reportXML

    analyzerProxy.SyncReportParameters reportTitle, queryToolbar
    
    refreshToolbarLock = False

    analyzerProxy.MapColumns

  End If

End If

End Sub

Public Sub CreateLaunchToolbar(toolbarName As String)

Dim prodName As String
Dim appName As String

prodName = translator.GetTranslation("oracle_xml_publisher_menu_item")
appName = translator.GetTranslation("application_name_menu_item")

RemoveOldMenus toolbarName
gMenuBar.CreateGlobalMenu toolbarName, prodName, appName

launchToolbarNames.Add toolbarName

End Sub

Public Sub RemoveOldMenus(toolbarName As String)

On Error Resume Next

Dim aMenu As Variant

For Each aMenu In Application.CommandBars(toolbarName).Controls

  If aMenu.caption = "Oracle XML Publisher" Then
  
    aMenu.Delete
  
  End If

Next

End Sub

Private Sub UpdateClientVersion()

clientVersion = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Current_Version")

End Sub

Private Function SetDataReceptorWSDL() As Boolean

reportServerHost = GetReportServerHost
reportServerPort = GetReportServerPort

If (reportServerHost = "") Or (reportServerPort = "") Then
  
  SetDataReceptorWSDL = False

Else

  dataReceptorWSDL = serviceProtocol & "://" & reportServerHost & ":" & reportServerPort & reportServiceEndpoint
  SetDataReceptorWSDL = True

End If

End Function

' Returns 'True' if client is already installed, 'False' if not or user just went thru installation and needs to restart
Private Function CheckInstallation() As Boolean

Dim latestVersion As String
Dim installer As AnalyzerInstaller
Dim isUpgrade As Boolean

Set installer = New AnalyzerInstaller
installer.setProxy Me
installer.setProxySettings pSettings

If clientVersion = "" Then

  isUpgrade = False
  GoTo NEED_TO_INSTALL_NEW_VERSION

End If

isUpgrade = True
latestVersion = installer.getLatestVersion(serviceProtocol, reportServerHost, reportServerPort, xmlpOnlineWebDir)

If latestVersion = "" Or InStr(1, latestVersion, "Error") Then

  ShowMsgBox latestVersion, vbCritical
  CheckInstallation = False
  Exit Function

End If

If IsVersionGreater(latestVersion, clientVersion) Then

  GoTo PLEASE_UNINSTALL

End If

On Error GoTo NEED_TO_INSTALL_NEW_VERSION

' Todo: Need to see if we need newer version
Dim sgp As Variant
Set sgp = CreateObject(serviceGatewayClass)

CheckInstallation = True
Exit Function

'JT 06/03/2008
'-------------------------------------
PLEASE_UNINSTALL:

Dim installMessage As String
Dim messageResult As Integer
Dim dotNetFound As Boolean
Dim jsharpFound As Boolean

installer.checkPrerequisites
dotNetFound = installer.isDotNetMajorVersionFound
'jsharpFound = installer.isJSharpMajorVersionFound

'If (Not dotNetFound) Or (Not jsharpFound) Then
If (Not dotNetFound) Then
  
  'ShowPrereqPanel dotNetFound, jsharpFound
  ShowPrereqPanel dotNetFound, True
  CheckInstallation = False
  Exit Function

End If

    Dim msgname As String
    Dim upgradeMessage As String
    msgname = "msg6"
    upgradeMessage = translator.GetTranslation(msgname)
    If InStr(upgradeMessage, msgname) > 0 Then ' No message in the translation (older than 10.1.3.4)
      upgradeMessage = "A new update of the Analyzer for EXCEL is available. Please close all open applications and uninstall your current version  (Control Panel -> Add or Remove Programs -> Oracle BI Publisher Analyzer for Excel). When you connect to the server again, the new version will be installed."
    End If
    messageResult = ShowMsgBox(upgradeMessage, vbInformation, False)

  CheckInstallation = False
  Exit Function


'--------------------------------------------------
NEED_TO_INSTALL_NEW_VERSION:
installMessage = translator.GetTranslation("application_name") & translator.GetTranslation("client_is_not_installed") & vbNewLine & vbNewLine & _
                 translator.GetTranslation("do_you_wish_to_install_latest_version")

messageResult = ShowMsgBox(installMessage, vbExclamation, True)

If messageResult = vbYes Then

  CheckInstallation = InstallClient(isUpgrade)
  
Else

  CheckInstallation = False

End If

End Function

Private Sub ShowPrereqPanel(dotNetFound As Boolean, jsharpFound As Boolean)

Dim prereqPanel As Variant

If translator.isRTL Then

  Set prereqPanel = New PrereqWarningPanelRTL

Else

  Set prereqPanel = New PrereqWarningPanel

End If

prereqPanel.setProxy Me

prereqPanel.SetDotNetLinkVisible Not (dotNetFound)
prereqPanel.SetJSharpLinkVisible Not (jsharpFound)

prereqPanel.Show

End Sub

Private Function SilentlyLoadPluginVersion(cVersion As String) As Boolean

If cVersion = "" Then

  SilentlyLoadPluginVersion = False
  Exit Function

End If

On Error GoTo PLUGIN_LOAD_FAILURE

'No need anymore
'Dim sgp As Variant
'Set sgp = CreateObject(serviceGatewayClass)

SilentlyLoadPluginVersion = True
Exit Function

PLUGIN_LOAD_FAILURE:
SilentlyLoadPluginVersion = False

End Function

Private Sub SilentlyLoadPlugin()

SilentlyLoadPluginVersion clientVersion

End Sub

Private Function InstallClient(isUpgrade As Boolean) As Boolean

Dim sHost As String
Dim sPort As String

Dim installer As AnalyzerInstaller
Dim installSuccessful As Boolean

Set installer = New AnalyzerInstaller
installer.setProxy Me
installer.setProxySettings pSettings
installer.setTitle translator.GetTranslation("installing_desktop_integration_modules")
installer.setClientVersion clientVersion
installer.setRegKey regKey
installer.checkPrerequisites

ConnectWithAddin False

installSuccessful = installer.install(serviceProtocol, reportServerHost, reportServerPort, reportServiceWebDir, isUpgrade)

If installSuccessful Then
    
  'ReopenActiveWorkbook regKey
  UpdateClientVersion
  InitializeWebAdapter
  ReportClosed
  RegisterReportServer
  ConnectWithAddin
  Application.Run "DeactivateAddinMenuBar"
  ReInitializeGlobalMenuBar
  ReportActivated
  
End If

InstallClient = installSuccessful

End Function

Private Sub ConnectWithAddin(Optional installState As Boolean = True)
            
Dim addinName As String
Dim anAddin As Object

addinName = "XMLPReportAddin.xla"

If installState Then

  Dim installationDir As String
    
  installationDir = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Install_Dir")
  Set anAddin = Application.AddIns.Add(installationDir & "\" & addinName, True)
  anAddin.Installed = True

End If

AddinConnect addinName, installState

End Sub

Private Function Login() As Boolean

Dim lScreen As Variant

If translator.isRTL Then

  Set lScreen = New LoginScreenRTL

Else

  Set lScreen = New LoginScreen

End If

lScreen.setProxy Me
lScreen.setRegKey regKey
lScreen.Show

Dim loginSuccessful As Boolean

loginSuccessful = lScreen.isLoginSuccessful

If loginSuccessful Then

  RegisterReportServer
  
  username = lScreen.GetUsername
  password = lScreen.GetPassword
  
  reportController.GetLoginListener.AfterActivation
  
  ReportDeactivated
  ReportActivated
    
End If

Unload lScreen
Login = loginSuccessful

End Function

Private Function checkForError(webAdapter As Variant) As Boolean

Dim errorMessage As String

errorMessage = webAdapter.getErrorMessage

If Not errorMessage = "" Then

  analyzerProxy.setBusy False
  
  'Error message, no need to externalize
  ShowMsgBox errorMessage, vbCritical
  checkForError = True

Else

  checkForError = False

End If

End Function

Public Sub RefreshToolbar()

If refreshToolbarLock Then
  GoTo REFRESH_TOOLBAR_EXIT
End If

refreshToolbarLock = True

analyzerProxy.setBusy True

Dim parameterXML As String
Dim commandBarItem As Office.CommandBarControl

parameterXML = "<?xml version='1.0' encoding='UTF-8'?>" & vbNewLine
parameterXML = parameterXML & "<report-parameters>"

For Each commandBarItem In queryToolbar.Controls

  If commandBarItem.index <= parameterTypes.Count Then
    
    Dim controlType As String
    Dim controlName As String
    Dim controlValue As String
    Dim controlValueMulti As Collection
    Dim isMultiValue As Boolean
    
    controlName = parameterNames.Item(commandBarItem.index)
    controlType = parameterTypes.Item(commandBarItem.index)
    controlValue = ""
    isMultiValue = False
    Set controlValueMulti = New Collection
    
    If controlType = "text" Or controlType = "date" Then ' by JT 09/24/2007
    
      controlValue = commandBarItem.Text
    
    ElseIf controlType = "comboBox" Then
       
       Dim selectedIndex As Integer
       
       selectedIndex = commandBarItem.ListIndex
       controlValue = comboBoxDefinitions.Item(commandBarItem.index).Item(commandBarItem.ListIndex)
       
       If controlValue = "All" Then
         
         controlValue = "*"
       
       End If
       
    ElseIf controlType = "multiValueComboBox" Or controlType = "multiValueText" Then
    
      isMultiValue = True
      Dim mvs As MultiValueSelector
      
      Set mvs = multiSelectorDefinitions.Item(commandBarItem.index)
      Set controlValueMulti = mvs.getSelectedValues
             
    End If
    
    If isMultiValue And (controlValueMulti.Count > 0) Then
      
      Dim multiValue As Variant
      parameterXML = parameterXML & "<parameter name='" & escapeXML(controlName) & "' isMultiValue='true'>"
      parameterXML = parameterXML & "<values>"
        
      For Each multiValue In controlValueMulti
        
        parameterXML = parameterXML & "<item value='" & escapeXML(multiValue) & "' />"
        
      Next
        
      parameterXML = parameterXML & "</values>"
      parameterXML = parameterXML & "</parameter>"
      
    ElseIf Not controlValue = "" Then
    
      parameterXML = parameterXML & "<parameter name='" & escapeXML(controlName) & "' value='" & escapeXML(controlValue) & "' />"
    
    End If
    
  Else
  
    Exit For
    
  End If
  
Next

parameterXML = parameterXML & "<parameter name='_xl' value='" & escapeXML(locale) & "' />"
parameterXML = parameterXML & "</report-parameters>"

Dim params As Collection
Dim Output As Variant
Dim reportXML As String

Set params = New Collection

params.Add reportName
params.Add parameterXML
params.Add username
params.Add password
params.Add "true"

webAdapter.invokeCallableService callableServiceClass, "getParameterInfo", params, False

If checkForError(webAdapter) Then

  Exit Sub

End If

Set Output = webAdapter.getOutput
reportXML = Output.Item("return")

reportXML = webAdapter.inflateXML(reportXML)

RefreshToolbarXML reportXML

analyzerProxy.SyncReportParameters reportTitle, queryToolbar

analyzerProxy.setBusy False

refreshToolbarLock = False

REFRESH_TOOLBAR_EXIT:

End Sub

Sub RefreshHTML()

Dim parameterXML As String
Dim commandBarItem As Office.CommandBarControl

analyzerProxy.setBusy True

parameterXML = "<?xml version='1.0' encoding='UTF-8'?>" & vbNewLine
parameterXML = parameterXML & "<report-parameters>"

For Each commandBarItem In queryToolbar.Controls

  If commandBarItem.index <= parameterTypes.Count Then
    
    Dim controlType As String
    Dim controlName As String
    Dim controlValue As String
    Dim controlValueMulti As Collection
    Dim isMultiValue As Boolean
    
    controlName = parameterNames.Item(commandBarItem.index)
    controlType = parameterTypes.Item(commandBarItem.index)
    controlValue = ""
    isMultiValue = False
    Set controlValueMulti = New Collection
    
    If controlType = "text" Or controlType = "date" Then 'by JT 09/24/2007
    
      controlValue = commandBarItem.Text
    
    ElseIf controlType = "comboBox" Then
       
       Dim selectedIndex As Integer
       
       selectedIndex = commandBarItem.ListIndex
       controlValue = comboBoxDefinitions.Item(commandBarItem.index).Item(commandBarItem.ListIndex)
       
       If controlValue = "All" Then
         
         controlValue = "*"
       
       End If
       
    ElseIf controlType = "multiValueComboBox" Or controlType = "multiValueText" Then
    
      isMultiValue = True
      Dim mvs As MultiValueSelector
      
      Set mvs = multiSelectorDefinitions.Item(commandBarItem.index)
      Set controlValueMulti = mvs.getSelectedValues
             
    End If
    
    If isMultiValue And (controlValueMulti.Count > 0) Then
      
      Dim multiValue As Variant
      
      parameterXML = parameterXML & "<parameter name='" & escapeXML(controlName) & "' isMultiValue='true'>"
      parameterXML = parameterXML & "<values>"
      
      For Each multiValue In controlValueMulti
      
        parameterXML = parameterXML & "<item value='" & escapeXML(multiValue) & "' />"
      
      Next
      
      parameterXML = parameterXML & "</values>"
      parameterXML = parameterXML & "</parameter>"
      
    ElseIf Not controlValue = "" Then
    
      parameterXML = parameterXML & "<parameter name='" & escapeXML(controlName) & "' value='" & escapeXML(controlValue) & "' />"
    
    End If
    
  Else
  
    Exit For
    
  End If
  
Next

parameterXML = parameterXML & "<parameter name='CURRENT_SERVER_URL' value='" & escapeXML(GetCompleteReportServerWebDir) & "' />"
parameterXML = parameterXML & "<parameter name='CURRENT_SERVER_NAME' value='" & escapeXML(reportServerHost) & "' />"
parameterXML = parameterXML & "<parameter name='CURRENT_SERVER_PORT' value='" & escapeXML(reportServerPort) & "' />"
parameterXML = parameterXML & "<parameter name='CURRENT_SERVER_SCHEME' value='" & escapeXML(serviceProtocol) & "' />"
parameterXML = parameterXML & "<parameter name='_xl' value='" & escapeXML(locale) & "' />"

parameterXML = parameterXML & "</report-parameters>"

Dim params As Collection
Dim Output As Variant
Dim reportDataHTML As String

Set params = New Collection

params.Add reportName
params.Add parameterXML
params.Add username
params.Add password
params.Add "true"
params.Add "html"
params.Add templateComboBox.Text

webAdapter.invokeCallableService callableServiceClass, "getDataForReport", params, True

If checkForError(webAdapter) Then

  Exit Sub

End If

Set Output = webAdapter.getOutput

If Output Is Nothing Then
  
  ' Probably means user hit 'cancel' button
  analyzerProxy.setBusy False
  Exit Sub
  
End If

reportDataHTML = Output.Item("return")
reportDataHTML = webAdapter.inflateXML(reportDataHTML)

analyzerProxy.LoadHTML reportDataHTML

analyzerProxy.setBusy False

End Sub

Sub RefreshData()

Dim parameterXML As String
Dim commandBarItem As Office.CommandBarControl
Dim parameters As Collection

analyzerProxy.setBusy True

parameterXML = "<?xml version='1.0' encoding='UTF-8'?>" & vbNewLine
parameterXML = parameterXML & "<report-parameters>"

Set parameters = New Collection

For Each commandBarItem In queryToolbar.Controls

  If commandBarItem.index <= parameterTypes.Count Then
    
    Dim controlType As String
    Dim controlName As String
    Dim controlValue As String
    Dim controlValueMulti As Collection
    Dim isMultiValue As Boolean
    Dim paramInfo As Variant
    
    Set paramInfo = CreateObject("Scripting.Dictionary")
    
    parameters.Add paramInfo
    controlName = parameterNames.Item(commandBarItem.index)
    controlType = parameterTypes.Item(commandBarItem.index)
    controlValue = ""
    isMultiValue = False
    Set controlValueMulti = New Collection
    paramInfo.Add "name", controlName
    paramInfo.Add "label", commandBarItem.caption
    
    If controlType = "text" Or controlType = "date" Then ' by JT 09/24/2007
    
      controlValue = commandBarItem.Text
      paramInfo.Add "value-label", controlValue
        
    ElseIf controlType = "comboBox" Then
       
      Dim selectedIndex As Integer
       
      paramInfo.Add "value-label", commandBarItem.Text
      selectedIndex = commandBarItem.ListIndex
      controlValue = comboBoxDefinitions.Item(commandBarItem.index).Item(commandBarItem.ListIndex)
       
      If controlValue = "All" Then
         
        controlValue = "*"
       
      End If
       
    ElseIf controlType = "multiValueComboBox" Or controlType = "multiValueText" Then
    
      isMultiValue = True
      Dim mvs As MultiValueSelector
      
      Set mvs = multiSelectorDefinitions.Item(commandBarItem.index)
      Set controlValueMulti = mvs.getSelectedValues
             
    End If
    
    
    If isMultiValue And (controlValueMulti.Count > 0) Then
      
        Dim multiValue As Variant
        
        parameterXML = parameterXML & "<parameter name='" & escapeXML(controlName) & "' isMultiValue='true'>"
        parameterXML = parameterXML & "<values>"
        
        For Each multiValue In controlValueMulti
        
          parameterXML = parameterXML & "<item value='" & escapeXML(multiValue) & "' />"
        
        Next
        
        parameterXML = parameterXML & "</values>"
        parameterXML = parameterXML & "</parameter>"
      
    ElseIf Not controlValue = "" Then
      
        paramInfo.Add "value", controlValue
        parameterXML = parameterXML & "<parameter name='" & escapeXML(controlName) & "' value='" & escapeXML(controlValue) & "' />"
    
    End If
    
  Else
  
    Exit For
    
  End If
  
Next

parameterXML = parameterXML & "<parameter name='_xl' value='" & escapeXML(locale) & "' />"
parameterXML = parameterXML & "</report-parameters>"

analyzerProxy.LoadParamValuesIntoTable parameters, False
analyzerProxy.LoadParamValuesIntoHiddenSheet parameters

Dim params As Collection
Dim Output As Variant
Dim reportDataXML As String

Set params = New Collection

params.Add reportName
params.Add parameterXML
params.Add username
params.Add password
params.Add "true"

webAdapter.invokeCallableService callableServiceClass, "getDataForReport", params, True

If checkForError(webAdapter) Then

  Exit Sub

End If

Set Output = webAdapter.getOutput

If Output Is Nothing Then
  
  ' Probably means user hit 'cancel' button
  analyzerProxy.setBusy False
  Exit Sub
  
End If

reportDataXML = Output.Item("return")
reportDataXML = webAdapter.inflateXML(reportDataXML)

Dim startTime As Long
Dim endTime As Long

startTime = GetTickCount
analyzerProxy.LoadXMLIntoTable reportDataXML
endTime = GetTickCount

'MsgBox "load xml into table time: " & GetFormattedTime(startTime, endTime)

analyzerProxy.setBusy False

analyzerProxy.RefreshTablesAndCharts

End Sub

Private Sub CopyToolbarIcon(toolbarButton As Variant, iconCmdBarName As String, buttonID As Integer)

  Dim targetCtrl As Variant
  Dim toolbar As Variant
  
  Set toolbar = CommandBars(iconCmdBarName)

  For Each targetCtrl In toolbar.Controls()
  
    If targetCtrl.id = buttonID Then
    
      targetCtrl.CopyFace
      toolbarButton.PasteFace
      Exit Sub
      
    End If
  
  Next

End Sub

Public Sub HideToolbar()

If Not queryToolbar Is Nothing Then

  queryToolbar.Visible = False

End If

End Sub

Public Sub ShowToolbar()

If Not queryToolbar Is Nothing Then

  queryToolbar.Visible = True

End If

End Sub

Public Sub RemoveToolbar()

If Not queryToolbar Is Nothing Then

  queryToolbar.Delete
  Set queryToolbar = Nothing

End If

End Sub

Private Sub CreateToolbar(paramSavedInfo As Collection, reportXML As String)

analyzerProxy.setBusy True

Dim reportDocument As MSXML2.DOMDocument30
Dim parameterNodes As MSXML2.IXMLDOMNodeList
Dim templatesNode As MSXML2.IXMLDOMNode
Dim templateNodes As MSXML2.IXMLDOMNodeList
Dim defaultTemplateName As String

Set reportDocument = New MSXML2.DOMDocument30
reportDocument.validateOnParse = False
reportDocument.async = False
reportDocument.setProperty "SelectionLanguage", "XPath"
reportDocument.LoadXML reportXML

If (reportDocument.parseError.errorCode <> 0) Then
  
  Dim myErr
  Set myErr = reportDocument.parseError
  'Error message, no need to externalize
  ShowMsgBox "XML Report parsing error: " & myErr.reason, vbCritical
  Exit Sub
  
End If

toolbarTitle = translator.GetTranslation("oracle_xml_publisher") & " - " & reportTitle

Set parameterNodes = reportDocument.selectNodes("/report/parameters/parameter")

Dim cBar As Office.CommandBar

For Each cBar In CommandBars

  If cBar.name = toolbarTitle Then
    
    cBar.Delete
    Exit For
    
  End If

Next

Set queryToolbar = Application.CommandBars.Add(toolbarTitle, msoBarFloating, False, True)

Dim nodeCount As Integer
Dim nodeIndex As Integer

nodeCount = parameterNodes.Length

For nodeIndex = 0 To (nodeCount - 1)

  Dim paramNode As MSXML2.IXMLDOMNode
  Dim paramType As String
  Dim paramName As String
  Dim paramLabel As String
  Dim paramDefaultValue As String
  Dim paramIsMultiValueNode As MSXML2.IXMLDOMNode
  Dim paramIsMultiValue As String
  
  Set paramNode = parameterNodes.Item(nodeIndex)
  paramType = paramNode.Attributes.getNamedItem("type").Text
  paramLabel = paramNode.Attributes.getNamedItem("label").Text
  paramName = paramNode.Attributes.getNamedItem("name").Text
  paramDefaultValue = paramNode.Attributes.getNamedItem("defaultValue").Text
  
  Set paramIsMultiValueNode = paramNode.Attributes.getNamedItem("isMultiValue")
  
  paramIsMultiValue = "false"
  If Not paramIsMultiValueNode Is Nothing Then
  
    paramIsMultiValue = paramIsMultiValueNode.Text
  
  End If
  
  parameterNames.Add paramName

  Dim paramInfo As Variant
    
  For Each paramInfo In paramSavedInfo
    
    If paramInfo.Item("name") = paramName Then
      
      paramDefaultValue = paramInfo.Item("value")
      
    End If
    
  Next
  
  If paramType = "text" And paramIsMultiValue = "true" Then
  
    ' Multi value text box
    paramType = "multiValueText"
    parameterTypes.Add paramType
  
    Dim multiValueTextControl As Office.CommandBarControl
    
    Set multiValueTextControl = queryToolbar.Controls.Add(Type:=msoControlButton)

    multiValueTextControl.Style = msoButtonCaption
    multiValueTextControl.caption = paramLabel
    multiValueTextControl.DescriptionText = paramLabel
  
    Dim mvsText As MultiValueSelector
    
    Set mvsText = New MultiValueSelector
    mvsText.setProxy Me
    mvsText.setParameterName paramLabel
    mvsText.setSelectorType paramType
    mvsText.setMultiSelectButton multiValueTextControl
  
    If Not paramDefaultValue = "" Then
      
      mvsText.addLabelValue paramDefaultValue, paramDefaultValue, False
    
    End If
  
    multiSelectorDefinitions.Add multiValueTextControl.index, mvsText
  
  ElseIf paramType = "comboBox" And paramIsMultiValue = "true" Then
  
    Dim itemNodes As MSXML2.IXMLDOMNodeList
    Dim hasAll As String
    
    ' Multi value combo box
    paramType = "multiValueComboBox"
    parameterTypes.Add paramType
    
    Dim multiValueCBControl As Office.CommandBarControl
    
    Set multiValueCBControl = queryToolbar.Controls.Add(Type:=msoControlButton)

    multiValueCBControl.Style = msoButtonCaption
    multiValueCBControl.caption = paramLabel
    multiValueCBControl.DescriptionText = paramLabel
  
    Dim mvsList As MultiValueSelector
    
    Set mvsList = New MultiValueSelector
    mvsList.setProxy Me
    mvsList.setParameterName paramLabel
    mvsList.setSelectorType paramType
    mvsList.setMultiSelectButton multiValueCBControl
    
    hasAll = paramNode.Attributes.getNamedItem("hasAll").Text
    Set itemNodes = paramNode.selectNodes(".//item")
    
    Dim itemCount As Integer
    Dim itemIndex As Integer
    
    itemCount = itemNodes.Length
    
    If hasAll = "true" Then
      
      mvsList.addLabelValue "All", "*", False
      
    End If
    
    For itemIndex = 0 To (itemCount - 1)

      Dim itemNode As MSXML2.IXMLDOMNode
      Dim itemName As String
      Dim itemValue As String
      Dim isSelected As Boolean
      
      Set itemNode = itemNodes.Item(itemIndex)
      itemName = itemNode.Attributes.getNamedItem("name").Text
      itemValue = itemNode.Attributes.getNamedItem("value").Text
      isSelected = False
           
      If paramDefaultValue = itemValue Then
      
        isSelected = True
        
      End If
      
      mvsList.addLabelValue itemName, itemValue, isSelected
      
    Next
    
    multiSelectorDefinitions.Add multiValueCBControl.index, mvsList
  
  ElseIf paramType = "comboBox" Then
  
    parameterTypes.Add "comboBox"
    
    Dim itemNodesCB As MSXML2.IXMLDOMNodeList
    Dim comboBox As Office.CommandBarComboBox
    Dim hasAllCB As String
    Dim listener As ReportParameterListener
    
    hasAllCB = paramNode.Attributes.getNamedItem("hasAll").Text
    Set comboBox = queryToolbar.Controls.Add(Type:=msoControlDropdown)

    comboBox.Style = msoComboLabel
    comboBox.caption = paramLabel
    comboBox.DescriptionText = paramLabel
    comboBox.Tag = paramLabel
    comboBox.DropDownWidth = -1
    
    Set listener = New ReportParameterListener
    listener.setComboBoxControl comboBox
    listener.SetDataAnalyzer Me
    reportParameterListeners.Add listener
         
    Set itemNodesCB = paramNode.selectNodes(".//item")
    Dim itemCountCB As Integer
    Dim itemIndexCB As Integer
    Dim itemValuesCB As Collection
    
    Set itemValuesCB = New Collection
    itemCountCB = itemNodesCB.Length
    
    If hasAllCB = "true" Then
      
      comboBox.AddItem "All"
      comboBox.ListIndex = 1
      itemValuesCB.Add "All"
      
    End If
    
    For itemIndex = 0 To (itemCountCB - 1)

      Dim itemNodeCB As MSXML2.IXMLDOMNode
      Dim itemNameCB As String
      Dim itemValueCB As String
  
      Set itemNodeCB = itemNodesCB.Item(itemIndex)
      itemNameCB = itemNodeCB.Attributes.getNamedItem("name").Text
      itemValueCB = itemNodeCB.Attributes.getNamedItem("value").Text
    
      comboBox.AddItem itemNameCB
      itemValuesCB.Add itemValueCB
      
      If paramDefaultValue = itemValueCB Then
      
        If hasAllCB = "true" Then
          
          comboBox.ListIndex = itemIndexCB + 2
        
        Else
        
          comboBox.ListIndex = itemIndexCB + 1
        
        End If
      
      End If
      
    Next
  
    comboBoxDefinitions.Add comboBox.index, itemValuesCB
  
    If itemCountCB > 0 And paramDefaultValue = "" Then
    
      comboBox.ListIndex = 1
      
    End If
  
  ElseIf paramType = "text" Or paramType = "date" Then ' by JT 09/24/2007
  
    parameterTypes.Add "text"
    
    Dim textControl As Office.CommandBarControl
    
    Set textControl = queryToolbar.Controls.Add(Type:=msoControlEdit)

    textControl.Style = msoComboLabel
    textControl.caption = paramLabel
    textControl.DescriptionText = paramLabel
    textControl.Text = paramDefaultValue
  
  End If

Next

Dim refreshDataStr As String
Dim refreshHTMLStr As String

refreshDataStr = translator.GetTranslation("refresh_data")
refreshHTMLStr = translator.GetTranslation("refresh_html")

Set queryButton = queryToolbar.Controls.Add(Type:=msoControlButton)
'queryButton.Style = msoButtonCaption
queryButton.Style = msoButtonIconAndCaption
queryButton.caption = refreshDataStr
queryButton.DescriptionText = refreshDataStr
queryButton.Tag = refreshDataStr
 
' Refresh Data
CopyToolbarIcon queryButton, "External Data", 459
 
Set templateComboBox = queryToolbar.Controls.Add(Type:=msoControlDropdown)

templateComboBox.Style = msoComboNormal
templateComboBox.DropDownWidth = -1

Set refreshHTMLButton = queryToolbar.Controls.Add(Type:=msoControlButton)
'queryButton.Style = msoButtonCaption
refreshHTMLButton.Style = msoButtonIconAndCaption
refreshHTMLButton.caption = refreshHTMLStr
refreshHTMLButton.DescriptionText = refreshHTMLStr
refreshHTMLButton.Tag = refreshHTMLStr
 
'Refresh
CopyToolbarIcon refreshHTMLButton, "Web", 1020

Set templatesNode = reportDocument.selectSingleNode("/report/templates")

If templatesNode Is Nothing Then

  templateComboBox.enabled = False
  refreshHTMLButton.enabled = False

Else

  templateComboBox.enabled = True
  refreshHTMLButton.enabled = True

  Set templateNodes = templatesNode.selectNodes("./template")

  defaultTemplateName = templatesNode.Attributes.getNamedItem("default").Text
  nodeCount = templateNodes.Length

  For nodeIndex = 0 To (nodeCount - 1)

    Dim templateNode As MSXML2.IXMLDOMNode
    Dim templateName As String
  
    Set templateNode = templateNodes.Item(nodeIndex)
    templateName = templateNode.Attributes.getNamedItem("name").Text
    templateComboBox.AddItem templateName
  
    If defaultTemplateName = templateName Then
  
      templateComboBox.ListIndex = (nodeIndex + 1)
  
    End If
  
  Next

End If

 
Dim barHeight As Integer
  
barHeight = queryToolbar.Height
queryToolbar.Height = barHeight + 10

queryToolbar.Left = 100
queryToolbar.Top = 200
queryToolbar.Visible = True

analyzerProxy.setBusy False

End Sub


Private Sub RefreshToolbarXML(reportXML As String)

analyzerProxy.setBusy True

Dim reportDocument As MSXML2.DOMDocument30
Dim parameterNodes As MSXML2.IXMLDOMNodeList

Set reportDocument = New MSXML2.DOMDocument30
reportDocument.validateOnParse = False
reportDocument.async = False
reportDocument.setProperty "SelectionLanguage", "XPath"
reportDocument.LoadXML reportXML

If (reportDocument.parseError.errorCode <> 0) Then
  
  Dim myErr
  Set myErr = reportDocument.parseError
  'Error message, no need to externalize
  ShowMsgBox "XML Report parsing error: " & myErr.reason, vbCritical
  Exit Sub
  
End If

Set parameterNodes = reportDocument.selectNodes("/report/parameters/parameter")

Dim nodeCount As Integer
Dim nodeIndex As Integer
nodeCount = parameterNodes.Length

For nodeIndex = 0 To (nodeCount - 1)

  Dim paramNode As MSXML2.IXMLDOMNode
  Dim paramType As Variant
  Dim paramName As String
  Dim paramLabel As String
  
  Set paramNode = parameterNodes.Item(nodeIndex)
  paramType = paramNode.Attributes.getNamedItem("type").Text
  paramName = paramNode.Attributes.getNamedItem("name").Text

  If paramType = "comboBox" Then
  
    Dim itemNodes As MSXML2.IXMLDOMNodeList
    Dim comboBox As CommandBarComboBox
    Dim hasAll As String
    Dim itemCount As Integer
    Dim itemIndex As Integer
    Dim itemValues As Collection
    Dim previousComboBoxIndex As Integer
    
    Set itemNodes = paramNode.selectNodes(".//item")
    Set comboBox = queryToolbar.Controls.Item(nodeIndex + 1)
    
    previousComboBoxIndex = comboBox.ListIndex
    
    hasAll = paramNode.Attributes.getNamedItem("hasAll").Text
    Set itemValues = New Collection
    itemCount = itemNodes.Length
    
    comboBox.Clear
    
    If hasAll = "true" Then
      
      comboBox.AddItem "All"
      itemValues.Add "All"
      
    End If
    
    For itemIndex = 0 To (itemCount - 1)

      Dim itemNode As MSXML2.IXMLDOMNode
      Dim itemName As String
      Dim itemValue As String
  
      Set itemNode = itemNodes.Item(itemIndex)
      itemName = itemNode.Attributes.getNamedItem("name").Text
      itemValue = itemNode.Attributes.getNamedItem("value").Text
    
      comboBox.AddItem itemName
      itemValues.Add itemValue
      
    Next
    
    comboBoxDefinitions.Remove comboBox.index
    comboBoxDefinitions.Add comboBox.index, itemValues
    
    If previousComboBoxIndex <= comboBox.ListCount Then
    
      comboBox.ListIndex = previousComboBoxIndex
    
    ElseIf comboBox.ListCount > 0 Then
    
      comboBox.ListIndex = 1
    
    End If
    
  End If

Next

analyzerProxy.setBusy False

End Sub

Public Sub ReportActivated()

gMenuBar.Activate
ShowToolbar

End Sub

Public Sub ReportDeactivated()

gMenuBar.Deactivate
HideToolbar

End Sub

Public Sub ReportClosed()

gMenuBar.Deactivate
gMenuBar.RemoveListeners
RemoveToolbar

End Sub

Public Function CreateReportModel(reportPath As String) As Object

Dim appInfo As Object
Dim reportModel As Object

Set appInfo = CreateObject("XDOUtilities.ApplicationInfo")
Set reportModel = CreateObject("XDOReportModel.Report")
reportModel.setAppInfo appInfo
reportModel.setGatewayProxy webAdapter.getServiceGatewayProxy
reportModel.setUsername username
reportModel.setPassword password
reportModel.setReportServerWebDir GetCompleteReportServerWebDir
reportModel.LoadReport reportPath

Set CreateReportModel = reportModel

End Function

Public Function CreateDotNetTranslator(appInfo As Object) As Object

Dim reportServerKeys() As String
Dim firstReportServerKey As String
Dim installDir As String
Dim locale As String
Dim dotNetTranslator As Object
Dim fta As Object
Dim uta As Object

reportServerKeys = appInfo.getReportServerKeys
firstReportServerKey = reportServerKeys(0)
installDir = appInfo.getProperty("INSTALL_DIR")
locale = appInfo.getProperty("Locale")

If locale = "" Then
            
  locale = GetOSUserLocaleSetting
        
End If

Set dotNetTranslator = CreateObject("XDOUtilities.XliffTranslator")
Set fta = CreateObject("XDOUtilities.FileTranslationAgent")
Set uta = CreateObject("XDOUtilities.URLTranslationAgent")
fta.setInstallDir installDir & "\\config"
uta.setApplicationInfo appInfo
uta.setReportServerWebDir firstReportServerKey
dotNetTranslator.addTranslationAgent fta
dotNetTranslator.addTranslationAgent uta

On Error GoTo SET_LOCALE_ERROR
dotNetTranslator.setCurrentLocale locale

If False Then
SET_LOCALE_ERROR:
  ' Translation file not found?
  dotNetTranslator.setCurrentLocale "en-US"
  Err.Clear
End If

Set CreateDotNetTranslator = dotNetTranslator

End Function

Public Function CreateFolderBrowserView() As Object

Dim appInfo As Object
Dim fbv As Object
Dim dotNetTranslator As Object

Set appInfo = CreateObject("XDOUtilities.ApplicationInfo")
Set dotNetTranslator = CreateDotNetTranslator(appInfo)
Set fbv = CreateObject("XDOComponents.FolderBrowserView")
fbv.setAppInfo appInfo
fbv.setGatewayProxy webAdapter.getServiceGatewayProxy
fbv.setUsername username
fbv.setPassword password
fbv.setReportServerWebDir GetCompleteReportServerWebDir
fbv.SetTranslator dotNetTranslator

Set CreateFolderBrowserView = fbv

End Function

Public Sub PublishNewReport()

Dim localFilePath As String
Dim reportModel As Object
Dim layoutTemplateName As String
Dim layoutTemplateFileName As String
Dim fileSystemObject As Object
Dim tmpFilePath As String
Dim uploadTemplateForm As Variant
Dim shortReportTitle As String
Dim sawNavigationClass As String
Dim sawReportServiceClass As String
Dim xmlpReportServiceClass As String
  
xmlpReportServiceClass = "oracle.apps.xdo.service.report.ReportService"
sawReportServiceClass = "oracle.apps.xdo.service.report.saw.SawReportService"
sawNavigationClass = "oracle.apps.xdo.service.report.saw.SawFolderNavigationService"

'Added by JT 12/10/2007
Dim tmpService As String
tmpService = GetRegistry("HKEY_LOCAL_MACHINE", Me.GetRegKey, "REPORT_SERVICE")
If Len(tmpService) > 0 Then
  xmlpReportServiceClass = tmpService
End If

tmpService = GetRegistry("HKEY_LOCAL_MACHINE", Me.GetRegKey, "SAW_REPORT_SERVICE")
If Len(tmpService) > 0 Then
  sawReportServiceClass = tmpService
End If

tmpService = GetRegistry("HKEY_LOCAL_MACHINE", Me.GetRegKey, "SAW_NAVIGATION_SERVICE")
If Len(tmpService) > 0 Then
  sawNavigationClass = tmpService
End If
'JT end



shortReportTitle = Replace(reportTitle, ".xdo", "")

If translator.isRTL Then

  Set uploadTemplateForm = New UploadReportTemplateRTL

Else

  Set uploadTemplateForm = New UploadReportTemplate

End If

uploadTemplateForm.setProxy Me
uploadTemplateForm.Show

layoutTemplateName = uploadTemplateForm.getTemplateName
layoutTemplateFileName = ActiveWorkbook.name

If layoutTemplateName = "" Then

  Exit Sub

End If
  
analyzerProxy.SetLayoutTemplateName layoutTemplateName

' Yes, I know this is hardcoded...
If callableServiceClass = sawReportServiceClass Then

  Dim fbv As Object
  Dim theNewReport As String
  
  Set fbv = CreateFolderBrowserView
  fbv.refreshDirectoryTree
  fbv.ShowDialog
  theNewReport = fbv.createReferencedReport(shortReportTitle, reportName, Nothing, sawNavigationClass)

  If theNewReport = "" Then

    Exit Sub

  End If

  analyzerProxy.UpdateReportProperties theNewReport, xmlpReportServiceClass
  reportName = theNewReport
  callableServiceClass = xmlpReportServiceClass
  LoadReport username, password
  
End If

ActiveWorkbook.Save
localFilePath = ActiveWorkbook.FullName
tmpFilePath = Replace(localFilePath, ".xls", ".tmp")
Set fileSystemObject = CreateObject("Scripting.FileSystemObject")
fileSystemObject.CopyFile localFilePath, tmpFilePath, True

Set reportModel = CreateReportModel(reportName)
reportModel.uploadNewReportTemplateFromFile layoutTemplateName, layoutTemplateFileName, "excel", "excel", tmpFilePath

fileSystemObject.DeleteFile tmpFilePath, True

'Bug 6192035 by JT 03/26/2008
Dim msg As String
msg = translator.GetTranslation("layout_template_uploaded")
'ShowMsgBox "Layout Template uploaded to server", vbInformation
ShowMsgBox msg, vbInformation

End Sub

Public Sub PublishReport()

Dim localFilePath As String
Dim reportModel As Object
Dim layoutTemplateName As String
Dim selectedTemplateIndex As Integer
Dim fileSystemObject As Object
Dim tmpFilePath As String

layoutTemplateName = analyzerProxy.GetLayoutTemplateName

If layoutTemplateName = "" Then

  PublishNewReport
  Exit Sub

End If

ActiveWorkbook.Save
localFilePath = ActiveWorkbook.FullName
tmpFilePath = Replace(localFilePath, ".xls", ".tmp")
Set fileSystemObject = CreateObject("Scripting.FileSystemObject")
fileSystemObject.CopyFile localFilePath, tmpFilePath, True

Set reportModel = CreateReportModel(reportName)
reportModel.setSelectedTemplate layoutTemplateName
selectedTemplateIndex = reportModel.getSelectedTemplateIndex
reportModel.uploadReportTemplateFromFile selectedTemplateIndex, tmpFilePath

fileSystemObject.DeleteFile tmpFilePath, True

'ShowMsgBox "Layout Template uploaded to server", vbInformation
'Bug 6192035 by JT 03/26/2008
Dim msg As String
msg = translator.GetTranslation("layout_template_uploaded")

ShowMsgBox msg, vbInformation

End Sub

Private Sub queryButton_Click(ByVal Ctrl As Office.CommandBarButton, CancelDefault As Boolean)

If analyzerProxy.isActive Then
  
  RefreshData

End If

End Sub

Private Sub refreshHTMLButton_Click(ByVal Ctrl As Office.CommandBarButton, CancelDefault As Boolean)

If analyzerProxy.isActive Then
  
  RefreshHTML

End If

End Sub


Attribute VB_Name = "ExcelDataAnalyzer"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim workbookName As String
Dim analyzer As DataAnalyzer
Dim reportDataWorksheet As Worksheet
Dim columnMapper As Variant
Dim hiddenSheet As Worksheet
Dim hiddenSheetName As String
Dim fileTranslator As FileTranslationAgent
Dim urlTranslator As URLTranslationAgent
Dim worksheetTranslator As WorksheetTranslationAgent
Dim modificationLock As Boolean

Public Sub ReopenSpreadsheetIfNecessary(theWorkbook As Workbook, theHiddenSheetName As String, Optional xmlData As String = "")

If InStr(theWorkbook.FullName, "[") > 0 Or InStr(theWorkbook.FullName, "]") Then

  Dim fullPath As String
  Dim copyPath As String
  Dim fileSystem As Scripting.fileSystemObject
  
  Set fileSystem = CreateObject("Scripting.FileSystemObject")
  fullPath = theWorkbook.FullName
  copyPath = Replace(fullPath, "[", "_")
  copyPath = Replace(copyPath, "]", "_")
  fileSystem.CopyFile fullPath, copyPath, True
  Application.Workbooks.Open copyPath
  theWorkbook.Close

Else
    
  Dim sheetToRemove As Worksheet
  Dim wSheet As Variant

  Set sheetToRemove = Nothing
  
  For Each wSheet In theWorkbook.Sheets

    If (TypeName(wSheet) = "Worksheet") And (wSheet.name = "_remove_me_please") Then
      
      Set sheetToRemove = wSheet
      sheetToRemove.Range("B2").Clear
      sheetToRemove.Range("B3").Clear
      Exit For
      
    End If

  Next
    
  Init theHiddenSheetName

  InitializeReportDataSheet

  If Not sheetToRemove Is Nothing Then
      
    Application.DisplayAlerts = False
    sheetToRemove.Delete
    Application.DisplayAlerts = True
  
  End If

  analyzer.CreateLaunchToolbar "Worksheet Menu Bar"
  analyzer.CreateLaunchToolbar "Chart Menu Bar"
  LoadDefaultReport xmlData

End If

End Sub

Public Sub Init(theHiddenSheetName As String)

modificationLock = False
hiddenSheetName = theHiddenSheetName
Set analyzer = New DataAnalyzer
analyzer.InitDataAnalyzer Me, "Software\Oracle\XML Publisher\Analyzer for Excel"
InitializeTranslationAgents

End Sub

Public Function GetDataAnalyzer()

Set GetDataAnalyzer = analyzer

End Function

Public Function GetReportDataWorksheet()

Set GetReportDataWorksheet = reportDataWorksheet

End Function

Public Sub InitializeHiddenData()

Dim wSheet As Variant

Set hiddenSheet = Nothing

For Each wSheet In ActiveWorkbook.Sheets

  If (TypeName(wSheet) = "Worksheet") And (wSheet.name = hiddenSheetName) Then
    
    Set hiddenSheet = wSheet
    Exit For
  
  End If

Next

If GetReportServerHost = "" Then

  SetupDefaultReportServerLocation

End If

End Sub


Private Sub SetupDefaultReportServerLocation()

Dim appInfo As Object
Dim serverProtocol As String
Dim serverName As String
Dim serverPort As String

Set appInfo = CreateObject("XDOUtilities.ApplicationInfo")

serverProtocol = appInfo.getReportServerProtocol
serverName = appInfo.getReportServerName
serverPort = appInfo.GetReportServerPort

hiddenSheet.Range("C5").value = serverName
hiddenSheet.Range("C6").value = serverPort
hiddenSheet.Range("C16").value = serverProtocol

End Sub

Public Sub InitializeTranslationAgents()

Dim installDir As String
Dim serverURL As String
Dim translator As XliffTranslator

Set translator = analyzer.getTranslator
Set fileTranslator = New FileTranslationAgent
Set urlTranslator = New URLTranslationAgent
Set worksheetTranslator = New WorksheetTranslationAgent

installDir = GetRegistry("HKEY_LOCAL_MACHINE", analyzer.GetRegKey, "Install_Dir") & "\config"
serverURL = GetServiceProtocol & "://" & analyzer.GetReportServerHost & ":" & analyzer.GetReportServerPort & analyzer.GetReportServiceWebDir & "/config"

fileTranslator.setInstallDir installDir
urlTranslator.setWebDir serverURL
urlTranslator.setProxySettings analyzer.GetProxySettings
worksheetTranslator.setHiddenSheet hiddenSheet

translator.addTranslationAgent worksheetTranslator
translator.addTranslationAgent fileTranslator
translator.addTranslationAgent urlTranslator

analyzer.UpdateLocale

End Sub


Private Sub InitializeReportDataSheet()

If hiddenSheet Is Nothing Then

  analyzer.SetReportName ""
  Exit Sub

Else

  analyzer.SetReportName hiddenSheet.Range("C7").value
  analyzer.SetReportTitle hiddenSheet.Range("C8").value

End If

Dim wSheet As Variant
Dim sheetFound As Boolean

sheetFound = False

For Each wSheet In ActiveWorkbook.Sheets

  If (TypeName(wSheet) = "Worksheet") And (wSheet.name = analyzer.GetReportTitle) Then
    
    wSheet.Activate
    Set reportDataWorksheet = wSheet
    sheetFound = True
    Exit For
  
  End If

Next

If Not sheetFound And Not analyzer.GetReportTitle = "" Then

  Set reportDataWorksheet = ActiveWorkbook.Sheets.Add
  reportDataWorksheet.name = analyzer.GetReportTitle
  reportDataWorksheet.Activate
  
  If Not LCase(hiddenSheet.Range("C17").value) = "none" Then

    reportDataWorksheet.Cells.Interior.ColorIndex = 51
    reportDataWorksheet.Cells.Interior.pattern = xlSolid
    ActiveWindow.DisplayGridlines = False

  End If
  
End If

workbookName = ActiveWorkbook.name

End Sub

Public Function isActive() As Boolean

If ActiveWorkbook.name = workbookName Then

  isActive = True

Else

  isActive = False

End If

End Function

Public Sub setBusy(flag As Boolean)

If flag Then

  Application.Cursor = xlWait
  Application.ScreenUpdating = False
  Application.Calculation = xlManual

Else

  Application.Calculation = xlAutomatic
  Application.ScreenUpdating = True
  Application.Cursor = xlDefault

End If

End Sub

Public Sub UpdateReportProperties(newReportName As String, newCallableClass As String)

hiddenSheet.Range("C7").value = newReportName
hiddenSheet.Range("C12").value = newCallableClass

End Sub

Public Function GetDefaultLocale() As String

GetDefaultLocale = hiddenSheet.Range("C9").value

End Function

Public Function GetReportServerHost() As String

GetReportServerHost = hiddenSheet.Range("C5").value

End Function

Public Function GetReportServerPort() As String

GetReportServerPort = hiddenSheet.Range("C6").value

End Function

Public Function GetReportServiceEndpoint() As String
'GetReportServiceEndpoint = hiddenSheet.Range("C10").value
  'Updated by JT 12/11/2007
  Dim tmpStr As String
  tmpStr = GetRegistry("HKEY_LOCAL_MACHINE", analyzer.GetRegKey, "SERVICE_ENDPOINT")
  If Len(tmpStr) <= 0 Then
    tmpStr = hiddenSheet.Range("C10").value
  End If
  GetReportServiceEndpoint = tmpStr
End Function

Public Function GetServiceGatewayClass() As String

'GetServiceGatewayClass = hiddenSheet.Range("C14").value
  'Updated by JT 12/11/2007
  Dim tmpStr As String
  tmpStr = GetRegistry("HKEY_LOCAL_MACHINE", analyzer.GetRegKey, "SERVICE_GATEWAY_PROXY")
  If Len(tmpStr) <= 0 Then
    tmpStr = hiddenSheet.Range("C14").value
  End If
  GetServiceGatewayClass = tmpStr

End Function

Public Function GetReportServiceClass() As String

'GetReportServiceClass = hiddenSheet.Range("C12").value
  'Updated by JT 12/11/2007
  Dim tmpStr As String
  tmpStr = GetRegistry("HKEY_LOCAL_MACHINE", analyzer.GetRegKey, "REPORT_SERVICE")
  If Len(tmpStr) <= 0 Then
    tmpStr = hiddenSheet.Range("C12").value
  End If
  GetReportServiceClass = tmpStr

End Function

Public Function GetReportServiceWebDir() As String

'GetReportServiceWebDir = hiddenSheet.Range("C11").value
  'Updated by JT 12/11/2007
  Dim tmpStr As String
  tmpStr = GetRegistry("HKEY_LOCAL_MACHINE", analyzer.GetRegKey, "WEB_DIR")
  If Len(tmpStr) <= 0 Then
    tmpStr = hiddenSheet.Range("C11").value
  End If
  GetReportServiceWebDir = tmpStr

End Function

Public Function GetXMLPOnlineWebDir() As String

'GetXMLPOnlineWebDir = hiddenSheet.Range("C13").value
  'Updated by JT 12/11/2007
  Dim tmpStr As String
  tmpStr = GetRegistry("HKEY_LOCAL_MACHINE", analyzer.GetRegKey, "ONLINE_WEB_DIR")
  If Len(tmpStr) <= 0 Then
    tmpStr = hiddenSheet.Range("C13").value
  End If
  GetXMLPOnlineWebDir = tmpStr

End Function

Public Function GetClientDebugFlag() As String

GetClientDebugFlag = hiddenSheet.Range("C15").value

End Function

Public Function GetServiceProtocol() As String

GetServiceProtocol = hiddenSheet.Range("C16").value

End Function

Public Sub SetLayoutTemplateName(aName As String)

hiddenSheet.Range("C18").value = aName

End Sub

Public Function GetLayoutTemplateName() As String

GetLayoutTemplateName = hiddenSheet.Range("C18").value

End Function

Public Sub SetColumnMapper(cMapper As Variant)

Set columnMapper = cMapper

End Sub

Public Sub RefreshTablesAndCharts()

Dim wSheet As Variant

For Each wSheet In ActiveWorkbook.Sheets

  Dim sheetType As String
  
  sheetType = TypeName(wSheet)
  
  If sheetType = "Chart" Then
  
    'wsheet.PivotLayout.PivotTable.RefreshTable
  
  ElseIf sheetType = "Worksheet" Then
  
    Dim pTable As PivotTable
    
    For Each pTable In wSheet.PivotTables
    
      'wSheet.Activate
      pTable.RefreshTable
      'pTable.PivotCache.Refresh
    
    Next
  
  End If

Next

'reportDataWorksheet.Activate

FormatFancyBackground

End Sub


Public Sub SyncReportParameters(reportTitle As String, reportToolbar As Office.CommandBar)

modificationLock = True

Dim control As Office.CommandBarControl
Dim lProxy As ListProxy
Dim rowLocation As Integer
Dim columnLocation As Integer
Dim parameterRange As Range

Set lProxy = New ListProxy
lProxy.setListSheet reportDataWorksheet
lProxy.setListObj reportTitle & ".parameters"
columnLocation = lProxy.getListColumnLocation
rowLocation = lProxy.getListRowLocation

Set parameterRange = reportDataWorksheet.Cells(rowLocation + 1, columnLocation)

Dim paramValuesRange As Range
Dim controlIndex As Integer

Set paramValuesRange = hiddenSheet.Range("G1")
controlIndex = 0
For Each control In reportToolbar.Controls

  Dim controlType As MsoControlType
  
  controlType = control.Type
  
  If controlType = msoControlDropdown Then
  
    Dim paramsStr As String
    Dim index As Integer
        
    For index = 1 To control.ListCount
    
      paramValuesRange.Offset(index - 1, 0) = control.List(index)
              
    Next index
  
    Dim endingRange As Range
    Dim allValuesRange As Range
    Dim namedRange As name
    Dim theName As String
    Dim aName As Variant
    theName = "xdo." & hiddenSheetName & ".values." & controlIndex
    Set endingRange = paramValuesRange.Offset(control.ListCount - 1, 0)
    Set allValuesRange = hiddenSheet.Range(paramValuesRange.Address & ":" & endingRange.Address)
        
    Set namedRange = Nothing
    For Each aName In ActiveWorkbook.Names
    
      If aName.name = theName Then
      
        Set namedRange = aName
        namedRange.RefersTo = "=" & hiddenSheetName & "!" & allValuesRange.Address
        Exit For
      
      End If
    
    Next
    
    If namedRange Is Nothing Then
      
      ActiveWorkbook.Names.Add theName, "=" & hiddenSheetName & "!" & allValuesRange.Address
    
    End If
    
    parameterRange.Validation.Delete
    parameterRange.Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=" & theName
    
    If control.ListIndex > 0 Then
    
      parameterRange.value = control.List(control.ListIndex)
    
    End If
    
  ElseIf controlType = msoControlEdit Then
    
    parameterRange.value = control.Text
  
  Else
  
    Exit For
  
  End If

  Set parameterRange = parameterRange.Offset(0, 1)
  Set paramValuesRange = paramValuesRange.Offset(0, 1)
  columnLocation = columnLocation + 1
  controlIndex = controlIndex + 1

Next

modificationLock = False

End Sub


Public Function GetReportParametersInfo() As Collection

Dim returnData As Collection
Dim paramRange As Range
Dim reportHeading As Range

Set returnData = New Collection
Set reportHeading = hiddenSheet.Range("B19")

While Not reportHeading.value = "Report Parameters"

  Set reportHeading = reportHeading.Offset(1, 0)

Wend

Set paramRange = reportHeading.Offset(2, 0)

While Not paramRange.value = ""

  Dim paramInfo As Variant
  
  Set paramInfo = CreateObject("Scripting.Dictionary")
  
  paramInfo.Add "name", paramRange.value
  paramInfo.Add "label", paramRange.Offset(0, 1).value
  paramInfo.Add "value", paramRange.Offset(0, 2).value
  paramInfo.Add "value-label", paramRange.Offset(0, 3).value

  returnData.Add paramInfo

  Set paramRange = paramRange.Offset(1, 0)

Wend

Set GetReportParametersInfo = returnData

End Function

Private Function LoadReportData() As Variant

modificationLock = True

Dim reportStream As Variant
Dim chunkType As Range
Dim chunkRange As Range
Dim reportHeading As Range

Set reportStream = CreateObject("Adodb.Stream")

' adTypeText = 2
reportStream.Type = 2
reportStream.Open

Set reportHeading = hiddenSheet.Range("B19")

While Not reportHeading.value = "Report Data"

  Set reportHeading = reportHeading.Offset(1, 0)

Wend

Set chunkType = reportHeading.Offset(2, 0)
Set chunkRange = chunkType.Offset(0, 1)

While Not chunkRange.value = ""

  reportStream.WriteText chunkRange.value
  
  chunkRange.Clear
  chunkType.Clear
  Set chunkRange = chunkRange.Offset(1, 0)
  Set chunkType = chunkType.Offset(1, 0)

Wend

Set LoadReportData = reportStream

modificationLock = False

End Function

'For Bug6813509 by JT 02/27/2008
Private Function LoadReportData5() As String

modificationLock = True

Dim reportStream As Variant
Dim chunkType As Range
Dim chunkRange As Range
Dim reportHeading As Range


Set reportHeading = hiddenSheet.Range("B19")

While Not reportHeading.value = "Report Data"

  Set reportHeading = reportHeading.Offset(1, 0)

Wend

Set chunkType = reportHeading.Offset(2, 0)
Set chunkRange = chunkType.Offset(0, 1)

Dim cntAll As Long
cntAll = 0
Dim cntWrite As Long
cntWrite = 0

Dim cntSmall As Long
cntSmall = 0


Dim XMLString(511) As String
Dim tmpStr As String
Dim XMLSmallString(127) As String

Dim q As Integer
Dim r As Integer
Dim s As Integer
Dim ts As String


While Not chunkRange.value = ""

  If cntAll Mod 128 = 0 Then
    If cntAll > 0 Then
      For r = 1 To 7
        For s = 0 To 128 - 2 ^ r Step 2 ^ r
          q = 2 ^ (r - 1)
          XMLSmallString(s) = XMLSmallString(s) + XMLSmallString(s + q)
          XMLSmallString(s + q) = ""
        Next
      Next
      
      'XMLString(cntWrite) = tmpStr
      XMLString(cntWrite) = XMLSmallString(0)
      cntWrite = cntWrite + 1
      
      
    End If
    Erase XMLSmallString
    cntSmall = 0
  End If
  
  XMLSmallString(cntSmall) = chunkRange.value
  cntAll = cntAll + 1
  cntSmall = cntSmall + 1

  
  chunkRange.Clear
  chunkType.Clear
  Set chunkRange = chunkRange.Offset(1, 0)
  Set chunkType = chunkType.Offset(1, 0)

Wend
If cntAll > 0 Then
  For r = 1 To 7
    For s = 0 To 128 - 2 ^ r Step 2 ^ r
      q = 2 ^ (r - 1)
      XMLSmallString(s) = XMLSmallString(s) + XMLSmallString(s + q)
      XMLSmallString(s + q) = ""
    Next
  Next
  XMLString(cntWrite) = XMLSmallString(0)
  'XMLString(cntWrite) = tmpStr
End If



Dim i As Integer

Dim k As Integer
Dim m As Integer


Dim p As Integer
For m = 1 To 10
  For k = 0 To 512 - 2 ^ m Step 2 ^ m
    p = 2 ^ (m - 1)
    XMLString(k) = XMLString(k) + XMLString(k + p)
    XMLString(k + p) = ""
  Next
Next


LoadReportData5 = XMLString(0)


modificationLock = False

End Function



Private Sub SetupReportTableHeaders()

modificationLock = True

Dim paramRange As Range
Dim tableHeaderRange As Range
Dim lProxy As ListProxy
Dim tableRowLocation As Integer
Dim tableColumnLocation As Integer

Set lProxy = New ListProxy

lProxy.setListColumnLocation 2
lProxy.setListRowLocation 3
lProxy.setListSheet reportDataWorksheet
lProxy.setListObj analyzer.GetReportTitle & ".parameters"

tableRowLocation = lProxy.getListRowLocation
tableColumnLocation = lProxy.getListColumnLocation

Set paramRange = reportDataWorksheet.Cells(tableRowLocation - 1, tableColumnLocation)

Set lProxy = New ListProxy

lProxy.setListSheet reportDataWorksheet
lProxy.setListObj analyzer.GetReportTitle

tableRowLocation = lProxy.getListRowLocation
tableColumnLocation = lProxy.getListColumnLocation

Set tableHeaderRange = reportDataWorksheet.Cells(tableRowLocation - 1, tableColumnLocation)

paramRange.value = "Report Parameters"
tableHeaderRange.value = "Report Data"


With paramRange.Font
  .name = "Tahoma"
  .Bold = True
  .Size = 10
  .Strikethrough = False
  .Superscript = False
  .Subscript = False
  .OutlineFont = False
  .Shadow = False
  .Underline = xlUnderlineStyleNone
  .ColorIndex = xlAutomatic
End With

With tableHeaderRange.Font
  .name = "Tahoma"
  .Bold = True
  .Size = 10
  .Strikethrough = False
  .Superscript = False
  .Subscript = False
  .OutlineFont = False
  .Shadow = False
  .Underline = xlUnderlineStyleNone
  .ColorIndex = xlAutomatic
End With

modificationLock = False

End Sub

Private Sub FormatTableHeader(tableHeaderRange As Range)

If LCase(hiddenSheet.Range("C17").value) = "none" Then

  Exit Sub

End If

tableHeaderRange.Borders(xlDiagonalDown).LineStyle = xlNone
tableHeaderRange.Borders(xlDiagonalUp).LineStyle = xlNone
  With tableHeaderRange.Borders(xlEdgeLeft)
      .LineStyle = xlContinuous
      .Weight = xlMedium
      .ColorIndex = 55
  End With
  With tableHeaderRange.Borders(xlEdgeTop)
      .LineStyle = xlContinuous
      .Weight = xlMedium
      .ColorIndex = 55
  End With
  With tableHeaderRange.Borders(xlEdgeBottom)
      .LineStyle = xlContinuous
      .Weight = xlMedium
      .ColorIndex = 55
  End With
  With tableHeaderRange.Borders(xlEdgeRight)
      .LineStyle = xlContinuous
      .Weight = xlMedium
      .ColorIndex = 55
  End With
On Error GoTo INSIDE_VERTICAL_DOES_NOT_EXIST
  With tableHeaderRange.Borders(xlInsideVertical)
      .LineStyle = xlContinuous
      .Weight = xlMedium
      .ColorIndex = 55
  End With

INSIDE_VERTICAL_DOES_NOT_EXIST:
  With tableHeaderRange.Interior
      .ColorIndex = 11
      .pattern = xlSolid
  End With

  With tableHeaderRange.Font
    .name = "Tahoma"
    .Bold = True
    .Size = 10
    .Strikethrough = False
    .Superscript = False
    .Subscript = False
    .OutlineFont = False
    .Shadow = False
    .Underline = xlUnderlineStyleNone
    .ColorIndex = 2
  End With
  
End Sub

Private Sub FormatTableData(tableDataRange As Range)

If LCase(hiddenSheet.Range("C17").value) = "none" Then

  Exit Sub

End If

tableDataRange.Borders(xlDiagonalDown).LineStyle = xlNone
tableDataRange.Borders(xlDiagonalUp).LineStyle = xlNone
  With tableDataRange.Borders(xlEdgeLeft)
      .LineStyle = xlContinuous
      .Weight = xlThin
      .ColorIndex = 55
  End With
  With tableDataRange.Borders(xlEdgeTop)
      .LineStyle = xlContinuous
      .Weight = xlThin
      .ColorIndex = 55
  End With
  With tableDataRange.Borders(xlEdgeBottom)
      .LineStyle = xlContinuous
      .Weight = xlThin
      .ColorIndex = 55
  End With
  With tableDataRange.Borders(xlEdgeRight)
      .LineStyle = xlContinuous
      .Weight = xlThin
      .ColorIndex = 55
  End With
On Error GoTo LINE_BORDER_DOES_NOT_EXIST1
  With tableDataRange.Borders(xlInsideVertical)
      .LineStyle = xlContinuous
      .Weight = xlThin
      .ColorIndex = 55
  End With
LINE_BORDER_DOES_NOT_EXIST1:
On Error GoTo LINE_BORDER_DOES_NOT_EXIST2
  With tableDataRange.Borders(xlInsideHorizontal)
      .LineStyle = xlContinuous
      .Weight = xlThin
      .ColorIndex = 55
  End With
  
LINE_BORDER_DOES_NOT_EXIST2:
  With tableDataRange.Interior
      .ColorIndex = 56
      .pattern = xlSolid
  End With

  With tableDataRange.Font
    .name = "Tahoma"
    .FontStyle = "Regular"
    .Bold = False
    .Size = 10
    .Strikethrough = False
    .Superscript = False
    .Subscript = False
    .OutlineFont = False
    .Shadow = False
    .Underline = xlUnderlineStyleNone
    .ColorIndex = 49
  End With

End Sub

Private Sub FormatFancyBackground()

If LCase(hiddenSheet.Range("C17").value) = "none" Then

  Exit Sub

End If

reportDataWorksheet.Columns("A:A").ColumnWidth = 3
reportDataWorksheet.Rows("1:1").RowHeight = 81.75

Dim containsPictures As Boolean
Dim picture As Variant

containsPictures = False

For Each picture In reportDataWorksheet.Pictures

  containsPictures = True

Next

If Not containsPictures Then

  Dim installDir As String
  
  installDir = GetRegistry("HKEY_LOCAL_MACHINE", analyzer.GetRegKey, "Install_Dir")

  If Not installDir = "" Then
  
    Dim fileSystemObj As Scripting.fileSystemObject
    Dim corporateLogoImg As String
    Dim backgroundImg As String
    
    corporateLogoImg = installDir & "\corporate_logo.jpg"
    backgroundImg = installDir & "\background_color.bmp"
    Set fileSystemObj = CreateObject("Scripting.FileSystemObject")
    
    If fileSystemObj.FileExists(corporateLogoImg) Then
    
      reportDataWorksheet.Range("B1").Select
      reportDataWorksheet.Pictures.Insert(corporateLogoImg).Select
      Selection.ShapeRange.LockAspectRatio = msoTrue
      Selection.ShapeRange.Height = 53.25
      'Selection.ShapeRange.Width = 693#
      'Selection.ShapeRange.Rotation = 0#
      Selection.Placement = xlFreeFloating
    
    End If
    
    'If fileSystemObj.FileExists(backgroundImg) Then
    
    '  reportDataWorksheet.SetBackgroundPicture Filename:=backgroundImg
      
    'End If
    
    reportDataWorksheet.Range("A2").Select
  
  End If
  
End If

End Sub

Public Sub LoadParamValuesIntoTable(parameters As Collection, refreshTableHeader As Boolean)

modificationLock = True

Dim paramInfo As Variant
Dim paramRange As Range
Dim tableHeaderRange As Range
Dim lProxy As ListProxy
Dim listObjFound As Boolean
Dim tableRowLocation As Integer
Dim tableColumnLocation As Integer

Set lProxy = New ListProxy

lProxy.setListColumnLocation 2
lProxy.setListRowLocation 3
lProxy.setListSheet reportDataWorksheet
listObjFound = lProxy.setListObj(analyzer.GetReportTitle & ".parameters")

tableRowLocation = lProxy.getListRowLocation
tableColumnLocation = lProxy.getListColumnLocation

Set paramRange = reportDataWorksheet.Cells(tableRowLocation, tableColumnLocation)

For Each paramInfo In parameters

  If refreshTableHeader Then
  
    paramRange.value = paramInfo.Item("label")
    
  End If
  
  paramRange.Offset(1, 0).value = paramInfo.Item("value-label")

  Set paramRange = paramRange.Offset(0, 1)

Next

Dim tableStart As Range

Set tableStart = reportDataWorksheet.Cells(tableRowLocation, tableColumnLocation)

If paramRange.Address = tableStart.Address Then

  Set paramRange = tableStart.Offset(0, 1)

End If

Set tableHeaderRange = reportDataWorksheet.Range(tableStart.Address & ":" & paramRange.Offset(0, -1).Address)

Dim tableRange As Range
Set tableRange = reportDataWorksheet.Range(tableStart.Address & ":" & paramRange.Offset(1, -1).Address)

FormatTableData tableRange
'If refreshTableHeader Then
FormatTableHeader tableHeaderRange
'End If

'tableRange.Columns.AutoFit

If Not listObjFound Then

  lProxy.createListObject analyzer.GetReportTitle & ".parameters", tableRange

End If

If Not LCase(hiddenSheet.Range("C17").value) = "none" Then

  Dim tableRangePlusTwo As Range

  Set tableRangePlusTwo = tableRange.Offset(2, 0)
  'tableRangePlusTwo.Clear
  tableRangePlusTwo.Interior.ColorIndex = 51
  tableRangePlusTwo.Interior.pattern = xlSolid

End If

modificationLock = False

End Sub

Public Sub LoadParamValuesIntoHiddenSheet(parameters As Collection)

modificationLock = True

Dim paramInfo As Variant
Dim paramRange As Range
Dim reportHeading As Range

Set reportHeading = hiddenSheet.Range("B23")

While Not reportHeading.value = "Report Parameters"

  Set reportHeading = reportHeading.Offset(1, 0)

Wend

Set paramRange = reportHeading.Offset(2, 0)

For Each paramInfo In parameters

  paramRange.value = paramInfo.Item("name")
  paramRange.Offset(0, 1).value = paramInfo.Item("label")
  paramRange.Offset(0, 2).value = paramInfo.Item("value")
  paramRange.Offset(0, 3).value = paramInfo.Item("value-label")

  Set paramRange = paramRange.Offset(1, 0)

Next

modificationLock = False

End Sub

Public Sub LoadDefaultReport(Optional xmlData As String = "")

If analyzer.GetReportName = "" Then

  'Error message, no need to externalize
  ShowMsgBox "Error: Excel file does not contain any report data!", vbExclamation
  Exit Sub
  
End If

Dim biOLAPAddinExists As Boolean

biOLAPAddinExists = AddinExists("OLAP4XL.xla")

If Not biOLAPAddinExists Then
  
  setBusy True

End If

SetupReportTableHeaders

Dim reportDataXML As String

If xmlData = "" Then

  'Dim reportStream As Variant
  'Set reportStream = LoadReportData

  'reportStream.Position = 0
  'reportDataXML = reportStream.ReadText

  'reportStream.Close

  reportDataXML = LoadReportData5 'For Bug6813509 by JT 02/27/2008
Else

  reportDataXML = xmlData
  
End If

If Not reportDataXML = "" Then

  MapColumns

  reportDataWorksheet.Cells.Interior.ColorIndex = 51
  reportDataWorksheet.Cells.Interior.pattern = xlSolid
  
  LoadXMLIntoTable reportDataXML

  Dim parameters As Collection
  
  Set parameters = GetReportParametersInfo
  
  LoadParamValuesIntoTable parameters, True

End If

If Not biOLAPAddinExists Then
  
  setBusy False
  RefreshTablesAndCharts
  
Else

  RefreshTablesAndCharts
      
End If

End Sub

Public Sub MapColumns()

Dim lProxy As ListProxy

Set lProxy = New ListProxy
lProxy.setListSheet reportDataWorksheet
lProxy.setListObj analyzer.GetReportTitle
Set columnMapper = lProxy.getColumnMap

End Sub

Public Sub LoadHTML(reportDataHTML As String)

Dim sheetFound As Boolean
Dim wSheet As Variant
Dim htmlWorksheet As Worksheet
Dim htmlTitle As String

htmlTitle = Replace(analyzer.GetReportTitle, ".xdo", ".html")

For Each wSheet In ActiveWorkbook.Sheets

  If (TypeName(wSheet) = "Worksheet") And (wSheet.name = htmlTitle) Then
    'wSheet.Activate
    Set htmlWorksheet = wSheet
    sheetFound = True
    Exit For
  End If

Next

If Not sheetFound Then

  Set htmlWorksheet = ActiveWorkbook.Sheets.Add(, reportDataWorksheet)
  htmlWorksheet.name = htmlTitle
  htmlWorksheet.Activate
  ActiveWindow.DisplayGridlines = False

End If

Dim fileSystem As Variant
Dim outputStream As Variant
Dim installDir As String
Dim htmlReportsDir As String
Dim htmlReportPath As String

'Vista support by JT 21/06/2007
installDir = GetRegistry("HKEY_CURRENT_USER", analyzer.GetUserKey, "EA_WORK_DIR")
If Len(installDir) <= 0 Then
  installDir = GetRegistry("HKEY_LOCAL_MACHINE", analyzer.GetRegKey, "Install_Dir")
End If
'------



'installDir = GetRegistry("HKEY_LOCAL_MACHINE", analyzer.GetRegKey, "Install_Dir")
htmlReportsDir = installDir & "\html_reports"
Set fileSystem = CreateObject("Scripting.FileSystemObject")
Set outputStream = CreateObject("Adodb.Stream")
  
If Not fileSystem.FolderExists(htmlReportsDir) Then

  fileSystem.CreateFolder htmlReportsDir

End If

htmlReportPath = htmlReportsDir & "\" & htmlTitle

' adTypeText = 2
outputStream.Type = 2
outputStream.Open
outputStream.WriteText reportDataHTML
' adSaveCreateOverWrite = 2
outputStream.savetofile htmlReportPath, 2
outputStream.Close

Dim htmlTable As QueryTable
Dim qTable As QueryTable

Set htmlTable = Nothing

For Each qTable In htmlWorksheet.QueryTables

  Set htmlTable = qTable
  Exit For
  
Next

htmlWorksheet.Cells.Clear

If htmlTable Is Nothing Then

  Set htmlTable = htmlWorksheet.QueryTables.Add("URL;" & htmlReportPath, htmlWorksheet.Cells(1, 1))

End If

htmlTable.WebFormatting = xlWebFormattingAll
htmlTable.Refresh

If analyzer.getTranslator.isRTL Then

  htmlWorksheet.Cells.HorizontalAlignment = xlRight

Else

  htmlWorksheet.Cells.HorizontalAlignment = xlLeft

End If

End Sub

Public Sub LoadXMLIntoTable(reportDataXML As String)

modificationLock = True

Dim table As XMLTable

Set table = New XMLTable

table.LoadXML reportDataXML

Dim rowCount As Integer
Dim previousRowCount As Integer

previousRowCount = 0
rowCount = table.GetRowCount

'Fix for bug7612198 by JT --- for bug9303436 by JT 05/26/2010
If columnMapper Is Nothing Then
  MapColumns
End If
'----------------

If (rowCount = 0) And (columnMapper.Count = 0) Then

  ShowMsgBox analyzer.getTranslator.GetTranslation("no_data_returned"), vbExclamation
  GoTo NO_DATA_RETURNED

End If

Dim lProxy As ListProxy
Dim listObjectAlreadyCreated As Boolean
Dim beginColumn As Integer
Dim beginRow As Integer
Dim someDataExists As Boolean
Dim totalsShown As Boolean

someDataExists = False
Set lProxy = New ListProxy
lProxy.setListSheet reportDataWorksheet
lProxy.setListObj analyzer.GetReportTitle

totalsShown = lProxy.getTotalsShown

If totalsShown Then

  lProxy.setTotalsShown False

End If

beginColumn = lProxy.getListColumnLocation
beginRow = lProxy.getListRowLocation

listObjectAlreadyCreated = lProxy.isListObjFound

Dim startingRowPosition As Range
Set startingRowPosition = reportDataWorksheet.Cells(1 + beginRow, beginColumn)

While table.NextRow
  
  While table.NextColumn
  
    Dim dataCellName As String
    Dim dataCellValue As String
    Dim columnIndex As Integer
    
    ' Sometimes we get empty data in the form of <ROWSET><ROW></ROW></ROWSET>
    ' as the XML data set, so we need to look out for this case
    someDataExists = True
    dataCellName = table.GetCurrentColumnName
    dataCellValue = table.GetCurrentColumnValue
    
    If columnMapper.Exists(dataCellName) Then
      
      columnIndex = columnMapper.Item(dataCellName)
    
    Else
      
      columnIndex = columnMapper.Count
      columnMapper.Item(dataCellName) = columnIndex
    
    End If
    
    startingRowPosition.Offset(0, columnIndex).value = dataCellValue
    'reportDataWorksheet.Cells(rowIndex + beginRow + 1, columnIndex + beginColumn).value = dataCellValue
    
  Wend

  Set startingRowPosition = startingRowPosition.Offset(1, 0)

'Next rowIndex
Wend

If Not someDataExists Then

  rowCount = 0

End If

Dim columnName As Variant
Dim cIndex As Integer
Dim columnCount As Integer

cIndex = 0
For Each columnName In columnMapper
  
  reportDataWorksheet.Cells(beginRow, cIndex + beginColumn).value = columnName
  
  cIndex = cIndex + 1

Next

columnCount = columnMapper.Count

Dim beginRange As Range
Dim endRange As Range
Dim tableRange As Range
Dim columnHeaderRange As Range

Set beginRange = reportDataWorksheet.Cells(beginRow, beginColumn)
Set endRange = reportDataWorksheet.Cells(beginRow, beginColumn + columnCount - 1)

Set columnHeaderRange = reportDataWorksheet.Range(beginRange.Address & ":" & endRange.Address)

Dim listRowIndex As Integer

listRowIndex = rowCount + beginRow

If listRowIndex = beginRow Then

  listRowIndex = beginRow + 1

End If

Set beginRange = reportDataWorksheet.Cells(beginRow, beginColumn)
Set endRange = reportDataWorksheet.Cells(listRowIndex, beginColumn + columnCount - 1)
Set tableRange = reportDataWorksheet.Range(beginRange.Address & ":" & endRange.Address)

tableRange.Columns.AutoFit

FormatTableData tableRange
FormatTableHeader columnHeaderRange

If analyzer.getTranslator.isRTL Then

  reportDataWorksheet.Cells.HorizontalAlignment = xlRight

Else

  reportDataWorksheet.Cells.HorizontalAlignment = xlLeft

End If

If listObjectAlreadyCreated Then

  previousRowCount = lProxy.GetRowCount
  lProxy.setShowAutoFilter False
  lProxy.resizeList tableRange
  lProxy.setShowAutoFilter True

Else
  
  lProxy.createListObject analyzer.GetReportTitle, tableRange

End If

If previousRowCount > (rowCount - 1) Then

  Set beginRange = reportDataWorksheet.Cells(beginRow + rowCount + 1, beginColumn)
  Set endRange = reportDataWorksheet.Cells(beginRow + previousRowCount + 1, beginColumn + columnCount - 1)

  Dim rangeToClear As Range

  Set rangeToClear = reportDataWorksheet.Range(beginRange.Address & ":" & endRange.Address)
  rangeToClear.Clear
  
  If Not LCase(hiddenSheet.Range("C17").value) = "none" Then
  
    rangeToClear.Interior.ColorIndex = 51
    rangeToClear.Interior.pattern = xlSolid
    
  End If

End If

Set beginRange = reportDataWorksheet.Cells(beginRow + rowCount + 1, beginColumn)
Set endRange = reportDataWorksheet.Cells(beginRow + rowCount + 1, beginColumn + columnCount - 1)

If Not LCase(hiddenSheet.Range("C17").value) = "none" Then

  Dim rangeToFill As Range

  Set rangeToFill = reportDataWorksheet.Range(beginRange.Address & ":" & endRange.Address)
  rangeToFill.Interior.ColorIndex = 51
  rangeToFill.Interior.pattern = xlSolid

End If

If totalsShown Then

  lProxy.setTotalsShown True

End If

NO_DATA_RETURNED:
modificationLock = False

End Sub

Public Sub RangeUpdated(target As Range)

If modificationLock Then
  
  Exit Sub

End If

modificationLock = True

Dim reportTitle As String
Dim toolbarTitle As String
Dim lProxy As ListProxy
Dim rowLocation As Integer
Dim columnLocation As Integer
Dim columnCount As Integer
Dim columnMap As Variant
Dim targetColumn As Integer
Dim targetRow As Integer

reportTitle = analyzer.GetReportTitle
toolbarTitle = analyzer.GetToolbarTitle

Set lProxy = New ListProxy
lProxy.setListSheet reportDataWorksheet
lProxy.setListObj reportTitle & ".parameters"
Set columnMap = lProxy.getColumnMap
columnLocation = lProxy.getListColumnLocation
rowLocation = lProxy.getListRowLocation
columnCount = lProxy.getColumnCount
targetColumn = target.Column
targetRow = target.row

If (targetColumn >= columnLocation) And (targetColumn <= (columnLocation + columnCount - 1)) And (targetRow = (rowLocation + 1)) Then

  Dim parameterIndex As Integer
  Dim control As Office.CommandBarControl
    
  parameterIndex = (targetColumn - columnLocation) + 1
  Set control = GetControl(toolbarTitle, parameterIndex)
  
  If Not control Is Nothing Then
  
    Dim cType As MsoControlType
    
    cType = control.Type
    
    If cType = msoControlEdit Then
    
      control.Text = target.value
      
    ElseIf cType = msoControlDropdown Then
    
      Dim index As Integer
      Dim strValue As String
      
      strValue = target.value
      
      For index = 1 To control.ListCount
      
        Dim currentItem As String
        
        currentItem = control.List(index)
        If currentItem = strValue Then
        
          control.ListIndex = index
          Exit For
        
        End If
                
      Next index
    
    End If
    
    analyzer.RefreshToolbar
    analyzer.RefreshData
  
  End If
  'MsgBox "target parameter name: " & reportParameter.Item("name") & ", label: " & reportParameter.Item("label")
    
End If
    
modificationLock = False

End Sub

Public Sub ExportToWord()

Dim aSheet As Variant
Dim sheetType As String

Set aSheet = ActiveWorkbook.ActiveSheet
sheetType = TypeName(aSheet)

If sheetType = "Chart" Then

  aSheet.ChartArea.Copy

ElseIf sheetType = "Worksheet" Then

  aSheet.Cells().Copy

End If

Dim wordApp As Variant

Set wordApp = CreateObject("Word.Application")

wordApp.Documents.Add Template:="Normal", NewTemplate:=False, DocumentType:=0
wordApp.Selection.Paste
'wordApp.Selection.PasteExcelTable False, False, False
wordApp.Visible = True

If sheetType = "Worksheet" Then

  Application.Selection.Clear

End If

End Sub

Attribute VB_Name = "FileDownloader"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'HttpRequest SetCredentials flags.
Const HTTPREQUEST_SETCREDENTIALS_FOR_SERVER = 0
Const HTTPREQUEST_SETCREDENTIALS_FOR_PROXY = 1

Dim downloader As Variant
Dim usingWinHttp As Boolean
Dim pSettings As ProxySettings

Private Sub Class_Initialize()

On Error GoTo HTTP_CLASS_DOES_NOT_EXIST

Set downloader = CreateObject("WinHttp.WinHttpRequest.5.1")
usingWinHttp = True
Exit Sub

HTTP_CLASS_DOES_NOT_EXIST:
Set downloader = CreateObject("MSXML2.ServerXMLHTTP.3.0")
usingWinHttp = False

End Sub

Public Sub setProxySettings(settings As ProxySettings)

Set pSettings = settings

End Sub

Private Sub setupProxy()

If Not usingWinHttp Then
  
  Exit Sub
  
End If

If pSettings.getSetting("Proxy_UseIE") = "False" Then

  Dim proxyHost As String
  Dim proxyPort As String
  Dim proxyNonHosts As String
  
  proxyHost = pSettings.getSetting("Proxy_Host")
  proxyPort = pSettings.getSetting("Proxy_Port")
  proxyNonHosts = pSettings.getSetting("Proxy_Nonhosts")

  If Not proxyHost = "" And Not proxyPort = "" Then
  
    downloader.setProxy 2, proxyHost & ":" & proxyPort, proxyNonHosts
  
  ElseIf Not proxyHost = "" And proxyPort = "" Then
  
    downloader.setProxy 2, proxyHost, proxyNonHosts
  
  End If
  
Else

  Dim proxyEnabled As String
  Dim serverStr As String
  Dim proxyOverride As String
  
  proxyEnabled = pSettings.getSetting("Proxy_IE_Enabled")
  serverStr = pSettings.getSetting("Proxy_IE_Server")
  proxyOverride = pSettings.getSetting("Proxy_IE_Override")

  If proxyEnabled = "True" Then

    downloader.setProxy 2, serverStr, proxyOverride
    
  End If

End If

End Sub

Private Sub setupProxyCredentials()

If Not usingWinHttp Then
  
  Exit Sub
  
End If

If pSettings.getSetting("Proxy_UseIE") = "False" Then

  Dim proxyUser As String
  Dim proxyPassword As String
  
  proxyUser = pSettings.getSetting("Proxy_User")
  proxyPassword = pSettings.getSetting("Proxy_Password")

  If Not proxyUser = "" And Not proxyPassword = "" Then
  
    ' Not sure if this is right... how do we test this????
    downloader.setCredentials proxyUser, proxyPassword, HTTPREQUEST_SETCREDENTIALS_FOR_SERVER
    downloader.setCredentials proxyUser, proxyPassword, HTTPREQUEST_SETCREDENTIALS_FOR_PROXY
  
  End If

End If

End Sub

Public Sub OpenConnection(getOrPut As String, url As String, async As Boolean)

setupProxy
downloader.Open getOrPut, url, async

End Sub

Public Sub Send()

setupProxyCredentials
If usingWinHttp Then
  
  downloader.Option(4) = 13056
  
Else

  downloader.setOption 2, 13056

End If

downloader.Send

End Sub

Public Sub waitForResponse(Optional timeout As Integer = -1)

downloader.waitForResponse

End Sub
    
Public Function getStatus() As Integer

getStatus = downloader.Status

End Function

Public Function getStatusText() As String

getStatusText = downloader.statusText

End Function
  
Public Function getResponseBody() As Variant

getResponseBody = downloader.responseBody

End Function

Public Function getResponseText() As String

getResponseText = downloader.responseText

End Function

Attribute VB_Name = "FileTranslationAgent"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim installDir As String
Dim fileSystem As Variant

Private Sub Class_Initialize()

installDir = ""
Set fileSystem = CreateObject("Scripting.FileSystemObject")

End Sub

Public Sub setInstallDir(iDir As String)

installDir = iDir

End Sub

Private Function getConfigFileName(locale As String) As String

getConfigFileName = installDir & "\" & locale & ".xlf"

End Function

Public Function loadsFromFile() As Boolean

loadsFromFile = True

End Function

Public Function getXliff(locale As String) As String

Dim configFile As String
Dim textStream As Variant

configFile = getConfigFileName(locale)

If Not fileSystem.FileExists(configFile) Then

  getXliff = ""
  Exit Function

End If

getXliff = configFile

End Function


Attribute VB_Name = "GlobalMenuBar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim translator As Object
Dim eventHandlers As Collection
Dim lastActivationEnabledState As Collection
Dim beforeActivationEnabledState As Collection
Dim lastActivationCaptionState As Collection
Dim beforeActivationCaptionState As Collection
Dim eventController As Object
Dim topLevelMenus As Collection

Private Sub Class_Initialize()

Set eventHandlers = New Collection
Set lastActivationEnabledState = New Collection
Set beforeActivationEnabledState = New Collection
Set lastActivationCaptionState = New Collection
Set beforeActivationCaptionState = New Collection
Set topLevelMenus = New Collection
Set translator = Nothing
Set eventController = Nothing

End Sub

Public Sub SetEventController(aController As Object)

Set eventController = aController

End Sub

Public Function getTranslator() As Object

Set getTranslator = translator

End Function

Public Sub SetTranslator(aTranslator As Object)

Set translator = aTranslator

End Sub

Public Function CreateControl(controlName As String, controlType As MsoControlType, controlParent As Object, Optional copyIconID As Integer = 0, Optional cmdBarIconName As String = "") As CommandBarControl

Dim aControl As CommandBarControl

Set aControl = FindCommandBarControl(controlName, controlParent)

If aControl Is Nothing Then

  Set aControl = controlParent.Controls.Add(controlType, Temporary:=True)
  aControl.caption = controlName
  aControl.DescriptionText = controlName
  aControl.enabled = False
  
  If Not cmdBarIconName = "" Then

    CopyToolbarIcon aControl, cmdBarIconName, copyIconID

  End If

End If

Set CreateControl = aControl

End Function

Public Function FindCommandBar(cmdBarName As String) As Office.CommandBar

Dim cmdBar As Office.CommandBar

Set cmdBar = Nothing
On Error GoTo COMMAND_BAR_NOT_FOUND

Set cmdBar = Application.CommandBars(cmdBarName)

COMMAND_BAR_NOT_FOUND:
Set FindCommandBar = cmdBar

End Function

Public Function FindCommandBarControl(controlName As String, parent As Object)

Dim control As Office.CommandBarControl

For Each control In parent.Controls

  If control.DescriptionText = controlName Then
  
    Set FindCommandBarControl = control
    Exit Function
  
  End If
  
Next

Set FindCommandBarControl = Nothing

End Function

Public Function AddEventListener(commandButton As Office.CommandBarButton, aListener As Object) As ButtonEventHandler

Dim eventHandler As ButtonEventHandler

Set eventHandler = New ButtonEventHandler
eventHandler.addListener commandButton, aListener
eventHandlers.Add eventHandler

Set AddEventListener = eventHandler

End Function

Private Sub SaveEnabledState(state As Collection)

On Error Resume Next

Dim eventHandler As ButtonEventHandler

For Each eventHandler In eventHandlers

  state.Add eventHandler.IsEnabled

Next

End Sub

Private Sub RestoreEnabledState(state As Collection)

On Error Resume Next

Dim index As Integer

For index = 1 To eventHandlers.Count

  Dim enabled As Boolean
  
  enabled = state.Item(index)
  
  If enabled Then
  
    eventHandlers.Item(index).EnableButton
  
  Else
  
    eventHandlers.Item(index).DisableButton
  
  End If

Next index

End Sub

Private Sub SaveEnabledStateFromButton(state As Collection)

On Error Resume Next

Dim eventHandler As ButtonEventHandler

For Each eventHandler In eventHandlers

  state.Add eventHandler.GetButton.enabled

Next

End Sub

Private Sub SaveCaptionState(state As Collection)

On Error Resume Next

Dim eventHandler As ButtonEventHandler

For Each eventHandler In eventHandlers

  state.Add eventHandler.GetCaption

Next

End Sub

Private Sub RestoreCaptionState(state As Collection)

On Error Resume Next

Dim index As Integer

For index = 1 To eventHandlers.Count

  Dim caption As String
  
  caption = state.Item(index)
  
  eventHandlers.Item(index).SetCaption caption
  
Next index

End Sub

Private Sub SaveCaptionStateFromButton(state As Collection)

On Error Resume Next

Dim eventHandler As ButtonEventHandler

For Each eventHandler In eventHandlers

  state.Add eventHandler.GetButton.caption

Next

End Sub

Public Sub Activate()

On Error Resume Next

If eventHandlers.Count = 0 Then

  Exit Sub

End If

EnableListeners
Set beforeActivationEnabledState = New Collection
SaveEnabledStateFromButton beforeActivationEnabledState
Set beforeActivationCaptionState = New Collection
SaveCaptionStateFromButton beforeActivationCaptionState
If lastActivationCaptionState.Count > 0 Then

  RestoreCaptionState lastActivationCaptionState

End If

If lastActivationEnabledState.Count > 0 Then

  RestoreEnabledState lastActivationEnabledState

End If

End Sub

Public Sub Deactivate()

On Error Resume Next

If eventHandlers.Count = 0 Then

  Exit Sub

End If

Set lastActivationEnabledState = New Collection
SaveEnabledState lastActivationEnabledState
Set lastActivationCaptionState = New Collection
SaveCaptionState lastActivationCaptionState
RestoreCaptionState beforeActivationCaptionState
RestoreEnabledState beforeActivationEnabledState
DisableListeners

End Sub

Public Sub DisableListeners()

On Error Resume Next

Dim eventHandler As ButtonEventHandler

For Each eventHandler In eventHandlers
    
  If Not eventHandler.GetGlobal Then
    
    eventHandler.disableListener
  
  End If
  
Next

End Sub

Public Sub EnableListeners()

On Error Resume Next

Dim eventHandler As ButtonEventHandler

For Each eventHandler In eventHandlers

  eventHandler.enableListener
  
Next

End Sub

Public Sub EnableButtons()

On Error Resume Next

Dim eventHandler As ButtonEventHandler

For Each eventHandler In eventHandlers

  eventHandler.EnableButton
  
Next

End Sub


Public Sub DisableButtons()

On Error Resume Next

Dim eventHandler As ButtonEventHandler

For Each eventHandler In eventHandlers

  eventHandler.DisableButton
      
Next

End Sub

Public Sub RemoveListeners()

Set eventHandlers = New Collection

End Sub

Public Sub RemoveGlobalMenu()

On Error Resume Next

Dim aMenu As CommandBarPopup

For Each aMenu In topLevelMenus

  aMenu.Delete
      
Next


End Sub

Public Sub PrintEventHandlerState()

Dim index As Integer
Dim outputStr As String

For index = 1 To eventHandlers.Count

  Dim handler As ButtonEventHandler
  Dim handlerInfo As String
  
  Set handler = eventHandlers.Item(index)
  
  handlerInfo = "[Caption: " & handler.GetCaption & "]" & _
                "[Enabled: " & handler.IsEnabled & "]"
                
  If index <= beforeActivationCaptionState.Count Then
  
    handlerInfo = handlerInfo & "[BeforeCaption: " & beforeActivationCaptionState.Item(index) & "]"
  
  End If
  If index <= beforeActivationEnabledState.Count Then
  
    handlerInfo = handlerInfo & "[BeforeEnabled: " & beforeActivationEnabledState.Item(index) & "]"
  
  End If
  
  If index <= lastActivationCaptionState.Count Then
  
    handlerInfo = handlerInfo & "[LastCaption: " & lastActivationCaptionState.Item(index) & "]"
  
  End If
  If index <= lastActivationEnabledState.Count Then
  
    handlerInfo = handlerInfo & "[LastEnabled: " & lastActivationEnabledState.Item(index) & "]"
  
  End If

  outputStr = outputStr & handlerInfo & vbNewLine

Next index

MsgBox outputStr

End Sub

Public Sub CreateGlobalMenu(commandBarName As String, prodName As String, appName As String)

Dim mainMenuBar As Office.CommandBar
Dim prodMenu As CommandBarPopup
Dim appMenu As CommandBarPopup

Set mainMenuBar = FindCommandBar(commandBarName)

If mainMenuBar Is Nothing Then

  Exit Sub

End If

If eventController.shouldCreateNewMenus Then

  Set prodMenu = FindCommandBarControl(prodName, mainMenuBar)
  
  If Not prodMenu Is Nothing Then
  
    'MsgBox "delete existing prod menu"
    prodMenu.Delete
  
  End If

End If

Set prodMenu = CreateControl(prodName, msoControlPopup, mainMenuBar)
prodMenu.enabled = True

topLevelMenus.Add prodMenu
'10/4/2006  RM changed as per Osama's email. on 10/4
'Set appMenu = CreateControl(appName, msoControlPopup, prodMenu)
'appMenu.enabled = True

Dim translatedStr As String
Dim commandButton As CommandBarButton
Dim eventHandler As ButtonEventHandler

translatedStr = translator.GetTranslation("login_menu_item")
Set commandButton = CreateControl(translatedStr, msoControlButton, prodMenu)

translatedStr = translator.GetTranslation("logout_menu_item")
Set commandButton = CreateControl(translatedStr, msoControlButton, prodMenu)

translatedStr = translator.GetTranslation("show_report_parameters_menu_item")
Set commandButton = CreateControl(translatedStr, msoControlButton, prodMenu)

commandButton.BeginGroup = True

translatedStr = translator.GetTranslation("publish_report")
Set commandButton = CreateControl(translatedStr, msoControlButton, prodMenu)

translatedStr = translator.GetTranslation("publish_as_new_report")
Set commandButton = CreateControl(translatedStr, msoControlButton, prodMenu)

translatedStr = translator.GetTranslation("show_report_web_page_menu_item")
Set commandButton = CreateControl(translatedStr, msoControlButton, prodMenu)

commandButton.BeginGroup = True

translatedStr = translator.GetTranslation("browse_for_reports_online_menu_item")
Set commandButton = CreateControl(translatedStr, msoControlButton, prodMenu)

translatedStr = translator.GetTranslation("preferences_menu_item")
Set commandButton = CreateControl(translatedStr, msoControlButton, prodMenu)

commandButton.BeginGroup = True

translatedStr = translator.GetTranslation("check_for_updates_menu_item")
Set commandButton = CreateControl(translatedStr, msoControlButton, prodMenu)

commandButton.BeginGroup = True

translatedStr = translator.GetTranslation("help_menu_item")
Set commandButton = CreateControl(translatedStr, msoControlButton, prodMenu)

translatedStr = translator.GetTranslation("about_menu_item")
Set commandButton = CreateControl(translatedStr, msoControlButton, prodMenu)

If Not eventController Is Nothing Then

  eventController.SetupEventHandlers Me, prodMenu, prodMenu
  
  Set beforeActivationEnabledState = New Collection
  SaveEnabledStateFromButton beforeActivationEnabledState
  Set beforeActivationCaptionState = New Collection
  SaveCaptionStateFromButton beforeActivationCaptionState
  
  EnableButtons
  eventController.ActivateController

End If

End Sub

Private Sub CopyToolbarIcon(toolbarButton As Object, iconCmdBarName As String, buttonID As Integer)

  Dim targetCtrl As Object
  Dim toolbar As Object
  
  Set toolbar = CommandBars(iconCmdBarName)

  For Each targetCtrl In toolbar.Controls()
  
    If targetCtrl.id = buttonID Then
    
      targetCtrl.CopyFace
      toolbarButton.PasteFace
      Exit Sub
      
    End If
  
  Next

End Sub

Attribute VB_Name = "ListBoxSelector"
Attribute VB_Base = "0{0B17291A-F6AB-4CE0-A648-8A632B76E63C}{3E2D1AFB-903F-4C9E-8C29-185C0EF363F4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Dim mvs As MultiValueSelector
Dim labels As Collection
Dim values As Collection
Dim selectionState As Collection

Private Sub UserForm_Initialize()

Set mvs = Nothing
Set labels = Nothing
Set values = Nothing
Set selectionState = Nothing

End Sub

Public Sub setMultiValueSelector(aMVS As Object)

Set mvs = aMVS

End Sub

Public Sub setParameterName(aName As String)

Me.caption = aName

End Sub

Public Function getSelectedItems() As Object

Dim aDict As Object
Dim index As Integer

Set aDict = CreateObject("Scripting.Dictionary")

For index = 1 To ListBox1.ListCount

  If ListBox1.Selected(index - 1) Then
  
    aDict.Add labels.Item(index), values.Item(index)
  
  End If

Next index

Set getSelectedItems = aDict

End Function

Public Function getSelectedValues() As Collection

Dim selectedVals As Collection
Dim index As Integer

Set selectedVals = New Collection

For index = 1 To ListBox1.ListCount

  If ListBox1.Selected(index - 1) Then
  
    selectedVals.Add values.Item(index)
  
  End If

Next index

Set getSelectedValues = selectedVals

End Function

Public Function getSelectionState()

Set selectionState = New Collection

Dim index As Integer

For index = 1 To ListBox1.ListCount

  selectionState.Add ListBox1.Selected(index - 1)
  
Next index

Set getSelectionState = selectionState

End Function

Public Sub loadList(aList As Collection, row As Integer)

Dim currentIndex As Integer

For currentIndex = 1 To aList.Count
  
  Dim aValue As String
  
  aValue = aList.Item(currentIndex)
  
  If row = 0 Then

    Me.ListBox1.AddItem aValue

    If Not selectionState Is Nothing Then
  
      Me.ListBox1.Selected(currentIndex - 1) = selectionState.Item(currentIndex)
  
    End If
  
  End If
  
  Me.ListBox1.List(currentIndex - 1, row) = aValue
  
Next currentIndex

End Sub

Public Sub clearValues()

Me.ListBox1.Clear

End Sub

Public Sub setLabels(aList As Collection)

Set labels = aList

End Sub

Public Sub setValues(aList As Collection)

Set values = aList

End Sub

Public Sub setSelectionState(aList As Collection)

Set selectionState = aList

End Sub

Private Sub UserForm_Activate()

loadList labels, 0
loadList values, 1

Dim buttons As Collection

Set buttons = New Collection
buttons.Add Me.CommandButton1
buttons.Add Me.CommandButton2
spaceButtonsEvenly buttons, 0, Me.Width

Me.CommandButton1.caption = mvs.getProxy.getTranslator.GetTranslation("clear_all")
Me.CommandButton2.caption = mvs.getProxy.getTranslator.GetTranslation("select_all")

End Sub

Private Sub CommandButton1_Click()

Dim currentIndex As Integer

For currentIndex = 1 To Me.ListBox1.ListCount

  Me.ListBox1.Selected(currentIndex - 1) = False

Next currentIndex

End Sub

Private Sub CommandButton2_Click()

Dim currentIndex As Integer

For currentIndex = 1 To Me.ListBox1.ListCount

  Me.ListBox1.Selected(currentIndex - 1) = True

Next currentIndex

End Sub

Private Sub UserForm_Terminate()

mvs.updateSelectedValues getSelectedValues, getSelectionState

End Sub
Attribute VB_Name = "ListBoxSelectorRTL"
Attribute VB_Base = "0{7715E861-17BC-497A-8C18-900A044EFE2D}{843ECAA8-FE77-4E3F-8428-BB71A2501FEB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Dim mvs As MultiValueSelector
Dim labels As Collection
Dim values As Collection
Dim selectionState As Collection

Private Sub UserForm_Initialize()

Set mvs = Nothing
Set labels = Nothing
Set values = Nothing
Set selectionState = Nothing

End Sub

Public Sub setMultiValueSelector(aMVS As Object)

Set mvs = aMVS

End Sub

Public Sub setParameterName(aName As String)

Me.caption = aName

End Sub

Public Function getSelectedItems() As Object

Dim aDict As Object
Dim index As Integer

Set aDict = CreateObject("Scripting.Dictionary")

For index = 1 To ListBox1.ListCount

  If ListBox1.Selected(index - 1) Then
  
    aDict.Add labels.Item(index), values.Item(index)
  
  End If

Next index

Set getSelectedItems = aDict

End Function

Public Function getSelectedValues() As Collection

Dim selectedVals As Collection
Dim index As Integer

Set selectedVals = New Collection

For index = 1 To ListBox1.ListCount

  If ListBox1.Selected(index - 1) Then
  
    selectedVals.Add values.Item(index)
  
  End If

Next index

Set getSelectedValues = selectedVals

End Function

Public Function getSelectionState()

Set selectionState = New Collection

Dim index As Integer

For index = 1 To ListBox1.ListCount

  selectionState.Add ListBox1.Selected(index - 1)
  
Next index

Set getSelectionState = selectionState

End Function

Public Sub loadList(aList As Collection, row As Integer)

Dim currentIndex As Integer

For currentIndex = 1 To aList.Count
  
  Dim aValue As String
  
  aValue = aList.Item(currentIndex)
  
  If row = 0 Then

    Me.ListBox1.AddItem aValue

    If Not selectionState Is Nothing Then
  
      Me.ListBox1.Selected(currentIndex - 1) = selectionState.Item(currentIndex)
  
    End If
  
  End If
  
  Me.ListBox1.List(currentIndex - 1, row) = aValue
  
Next currentIndex

End Sub

Public Sub clearValues()

Me.ListBox1.Clear

End Sub

Public Sub setLabels(aList As Collection)

Set labels = aList

End Sub

Public Sub setValues(aList As Collection)

Set values = aList

End Sub

Public Sub setSelectionState(aList As Collection)

Set selectionState = aList

End Sub

Private Sub UserForm_Activate()

Me.RightToLeft = True

loadList labels, 0
loadList values, 1

Dim buttons As Collection

Set buttons = New Collection
buttons.Add Me.CommandButton2
buttons.Add Me.CommandButton1
spaceButtonsEvenly buttons, 0, Me.Width

Me.CommandButton1.caption = mvs.getProxy.getTranslator.GetTranslation("clear_all")
Me.CommandButton2.caption = mvs.getProxy.getTranslator.GetTranslation("select_all")

End Sub

Private Sub CommandButton1_Click()

Dim currentIndex As Integer

For currentIndex = 1 To Me.ListBox1.ListCount

  Me.ListBox1.Selected(currentIndex - 1) = False

Next currentIndex

End Sub

Private Sub CommandButton2_Click()

Dim currentIndex As Integer

For currentIndex = 1 To Me.ListBox1.ListCount

  Me.ListBox1.Selected(currentIndex - 1) = True

Next currentIndex

End Sub

Private Sub UserForm_Terminate()

mvs.updateSelectedValues getSelectedValues, getSelectionState

End Sub
Attribute VB_Name = "ListProxy"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim listSheet As Variant
Dim excelListObj As Variant
Dim rangeName As name
Dim usingExcelNativeList As Boolean
Dim defaultColumnLocation As Integer
Dim defaultRowLocation As Integer
Dim listObjFound As Boolean
Dim listName As String

Private Sub Class_Initialize()

  listName = ""
  defaultColumnLocation = 2
  defaultRowLocation = 7
  listObjFound = False
  Set excelListObj = Nothing
  Set listSheet = Nothing
  Set rangeName = Nothing
  usingExcelNativeList = False

End Sub

Public Function isListObjFound() As Boolean

isListObjFound = listObjFound

End Function

Public Sub setListSheet(lSheet As Worksheet)

Set listSheet = lSheet

End Sub

Private Function endsWith(searchStr As String, pattern As String) As Boolean

Dim inStrReturn As Integer

inStrReturn = InStrRev(searchStr, pattern)

Dim strLen As Integer
Dim patternLen As Integer

strLen = Len(searchStr)
patternLen = Len(pattern)

If (inStrReturn > 0) And ((strLen - patternLen + 1) = inStrReturn) Then

  endsWith = True

Else
  
  endsWith = False
  
End If

End Function

Public Function setListObj(lName As String) As Boolean
Dim rObject As Variant
Dim rangeNameFound As Boolean

listName = lName
For Each rObject In listSheet.parent.Names

  Dim rName As String
  
  rName = getListName(lName)
    
  If endsWith(rObject.name, rName) Then
  
    Set rangeName = rObject
    listObjFound = True
    Exit For
    
  End If

Next

On Error GoTo LIST_OBJECTS_NOT_SUPPORTED

'GoTo LIST_OBJECTS_NOT_SUPPORTED

Dim lObject As Variant

For Each lObject In listSheet.ListObjects

  If lObject.name = lName Then
  
    Set excelListObj = lObject
    Exit For
    
  End If

Next

usingExcelNativeList = True
setListObj = listObjFound
Exit Function

LIST_OBJECTS_NOT_SUPPORTED:
usingExcelNativeList = False
setListObj = listObjFound

End Function

Public Sub setListColumnLocation(cLoc As Integer)

defaultColumnLocation = cLoc

End Sub

Public Function getListColumnLocation() As Integer

If Not listObjFound Then

  getListColumnLocation = defaultColumnLocation

Else
  
  getListColumnLocation = rangeName.RefersToRange.Column

End If

End Function

Public Sub setListRowLocation(rLoc As Integer)

defaultRowLocation = rLoc

End Sub

Public Function getListRowLocation() As Integer

If Not listObjFound Then

  getListRowLocation = defaultRowLocation

Else

  getListRowLocation = rangeName.RefersToRange.row

End If

End Function

Public Function getColumnMap() As Variant

Dim columnMap As Variant
Set columnMap = CreateObject("Scripting.Dictionary")

If listObjFound Then

  Dim colIndex As Integer
  Dim startCol As Integer
  Dim startRow As Integer
  
  startCol = getListColumnLocation
  startRow = getListRowLocation
  
  For colIndex = 0 To (getColumnCount - 1)
    
    columnMap.Item(listSheet.Cells(startRow, startCol + colIndex).value) = columnMap.Count
      
  Next colIndex
  
End If
  
Set getColumnMap = columnMap

End Function

Public Function GetRowCount() As Integer

If Not listObjFound Then

  GetRowCount = 0

Else

  GetRowCount = rangeName.RefersToRange.Rows.Count

End If

End Function

Public Sub setTotalsShown(flag As Boolean)

If listObjFound And usingExcelNativeList Then

  excelListObj.showTotals = flag

End If

End Sub

Public Function getTotalsShown() As Boolean

If listObjFound And usingExcelNativeList Then

  getTotalsShown = excelListObj.showTotals

Else

  getTotalsShown = False

End If

End Function

Public Function getColumnCount() As Integer

If Not listObjFound Then

  getColumnCount = 0

Else

  getColumnCount = rangeName.RefersToRange.Columns.Count

End If

End Function

Public Sub setShowAutoFilter(showAutoFilter As Boolean)

If usingExcelNativeList And listObjFound Then

  excelListObj.showAutoFilter = showAutoFilter
  Exit Sub

End If

End Sub

Public Sub resizeList(lRange As Range)

If Not listObjFound Then

  Exit Sub

End If

Dim startingLocation As Range
Dim endingLocation As Range
Dim columnCount As Integer
Dim newAddress As String

columnCount = rangeName.RefersToRange.Columns.Count
Set startingLocation = lRange.Worksheet.Cells(lRange.row, lRange.Column)
' by JT for bug6901843 07/07/2008
On Error GoTo R_FAILED
'Set endingLocation = lRange.Offset(lRange.Rows.Count - 1, columnCount - 1)
Set endingLocation = startingLocation.Offset(lRange.Rows.Count - 1, columnCount - 1)
'------------------------------------------
Set endingLocation = lRange.Worksheet.Cells(endingLocation.row, endingLocation.Column)

newAddress = startingLocation.Address & ":" & endingLocation.Address

If usingExcelNativeList Then

  excelListObj.Resize lRange.Worksheet.Range(newAddress)
  Exit Sub

End If

rangeName.RefersTo = "=" & newAddress
R_FAILED: ' by JT
End Sub

Public Sub createListObject(reportTitle As String, lRange As Range)

listName = reportTitle

If usingExcelNativeList Then

  Dim newList As Variant

  Set newList = listSheet.ListObjects.Add(1, lRange, , xlYes)
  newList.name = reportTitle
  
End If

Dim newNamedRange As Variant
Dim newName As String

newName = getListName(reportTitle)
Set newNamedRange = listSheet.Names.Add(newName, "=" & lRange.Address)
newNamedRange.name = newName
newNamedRange.RefersTo = "=" & lRange.Address
setListObj reportTitle
  
End Sub

Public Function getListName(oldName As String) As String

Dim newName As String

newName = Replace(oldName, " ", "_")
newName = Replace(newName, "`", "_")
newName = Replace(newName, "~", "_")
newName = Replace(newName, "@", "_")
newName = Replace(newName, "#", "_")
newName = Replace(newName, "$", "_")
newName = Replace(newName, "%", "_")
newName = Replace(newName, "^", "_")
newName = Replace(newName, "&", "_")
newName = Replace(newName, "*", "_")
newName = Replace(newName, "(", "_")
newName = Replace(newName, ")", "_")
newName = Replace(newName, "-", "_")
newName = Replace(newName, "+", "_")
newName = Replace(newName, "=", "_")
newName = Replace(newName, "{", "_")
newName = Replace(newName, "}", "_")
newName = Replace(newName, "[", "_")
newName = Replace(newName, "]", "_")
newName = Replace(newName, "|", "_")
newName = Replace(newName, "\", "_")
newName = Replace(newName, ":", "_")
newName = Replace(newName, ";", "_")
newName = Replace(newName, "'", "_")
newName = Replace(newName, """", "_")
newName = Replace(newName, "<", "_")
newName = Replace(newName, ">", "_")
newName = Replace(newName, ",", "_")
newName = Replace(newName, "/", "_")


'Fix for Excel2007 bug8724778 '09/14/2009 by JT
'Dim is2007orlater As Boolean
'If Application.Version >= 12 Then
'  is2007orlater = True
'Else
'  is2007orlater = False
'End If

'Fix for Excel2007 bug8724778 '07/23/2009 by JT
Dim is2007orlater As Boolean
Dim iv As Integer
iv = val(Application.Version) ' bug9653487 04/28/2010
If iv >= 12 Then
  is2007orlater = True
Else
  is2007orlater = False
End If



'JT 07062007
Dim leftstr As String
leftstr = Left(newName, 1)

'08/14/2009 by JT
If IsNumeric(leftstr) Or is2007orlater = True Then
newName = "xdoname" & newName
End If


getListName = newName

End Function
Attribute VB_Name = "LocaleUtil"
Option Explicit

Public Const LOCALE_ILANGUAGE             As Long = &H1    'language id
Public Const LOCALE_SLANGUAGE             As Long = &H2    'localized name of lang
Public Const LOCALE_SENGLANGUAGE          As Long = &H1001 'English name of lang
Public Const LOCALE_SABBREVLANGNAME       As Long = &H3    'abbreviated lang name
Public Const LOCALE_SNATIVELANGNAME       As Long = &H4    'native name of lang
Public Const LOCALE_ICOUNTRY              As Long = &H5    'country code
Public Const LOCALE_SCOUNTRY              As Long = &H6    'localized name of country
Public Const LOCALE_SENGCOUNTRY           As Long = &H1002 'English name of country
Public Const LOCALE_SABBREVCTRYNAME       As Long = &H7    'abbreviated country name
Public Const LOCALE_SNATIVECTRYNAME       As Long = &H8    'native name of country
Public Const LOCALE_SINTLSYMBOL           As Long = &H15   'intl monetary symbol
Public Const LOCALE_IDEFAULTLANGUAGE      As Long = &H9    'def language id
Public Const LOCALE_IDEFAULTCOUNTRY       As Long = &HA    'def country code
Public Const LOCALE_IDEFAULTCODEPAGE      As Long = &HB    'def oem code page
Public Const LOCALE_IDEFAULTANSICODEPAGE  As Long = &H1004 'def ansi code page
Public Const LOCALE_IDEFAULTMACCODEPAGE   As Long = &H1011 'def mac code page

Public Const LOCALE_IMEASURE              As Long = &HD     '0 = metric, 1 = US

'#if(WINVER >=  &H0400)
Public Const LOCALE_SISO639LANGNAME       As Long = &H59   'ISO abbreviated language name
Public Const LOCALE_SISO3166CTRYNAME      As Long = &H5A   'ISO abbreviated country name
'#endif /* WINVER >= as long = &H0400 */

'#if(WINVER >=  &H0500)
Public Const LOCALE_SNATIVECURRNAME        As Long = &H1008 'native name of currency
Public Const LOCALE_IDEFAULTEBCDICCODEPAGE As Long = &H1012 'default ebcdic code page
Public Const LOCALE_SSORTNAME              As Long = &H1013 'sort name
'#endif /* WINVER >=  &H0500 */

Public Declare Function GetThreadLocale Lib "kernel32" () As Long

Public Declare Function GetUserDefaultLCID Lib "kernel32" () As Long

Public Declare Function GetLocaleInfo Lib "kernel32" _
   Alias "GetLocaleInfoA" _
  (ByVal locale As Long, _
   ByVal LCType As Long, _
   ByVal lpLCData As String, _
   ByVal cchData As Long) As Long


Public Function GetUserLocaleInfo(ByVal dwLocaleID As Long, ByVal dwLCType As Long) As String

   Dim sReturn As String
   Dim r As Long

  'call the function passing the Locale type
  'variable to retrieve the required size of
  'the string buffer needed
   r = GetLocaleInfo(dwLocaleID, dwLCType, sReturn, Len(sReturn))
    
  'if successful..
   If r Then
    
     'pad the buffer with spaces
      sReturn = Space$(r)
       
     'and call again passing the buffer
      r = GetLocaleInfo(dwLocaleID, dwLCType, sReturn, Len(sReturn))
     
     'if successful (r > 0)
      If r Then
      
        'r holds the size of the string
        'including the terminating null
         GetUserLocaleInfo = Left$(sReturn, r - 1)
      
      End If
   
   End If
    
End Function

Public Function GetOSUserLocaleSetting() As String

  Dim countryCode As String
  Dim languageCode As String
  Dim LCID As Long
   
  LCID = GetUserDefaultLCID()

  'LOCALE_SISO3166CTRYNAME
  'Windows NT 4.0 and Windows 2000: Country/region name, based on
  'ISO Standard 3166.
  countryCode = GetUserLocaleInfo(LCID, LOCALE_SISO3166CTRYNAME)
   
  'LOCALE_SISO639LANGNAME
  'Windows NT 4.0 and Windows 2000: The abbreviated name of the
  'language based entirely on the ISO Standard 639 values.
  languageCode = GetUserLocaleInfo(LCID, LOCALE_SISO639LANGNAME)
     
  GetOSUserLocaleSetting = languageCode & "-" & countryCode

End Function

Attribute VB_Name = "LoginScreen"
Attribute VB_Base = "0{B03D53A2-4DC4-49DB-AFBF-36A17BE1BEB2}{12865ACF-DBE1-4098-A3B1-058E30CD020E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit

Dim username As String
Dim password As String
Dim loginSuccessful As Boolean
Dim regKey As String
Dim proxy As Variant

Private Sub UserForm_Initialize()

Set proxy = Nothing
LoadBitmaps
username = ""
password = ""
loginSuccessful = False
regKey = ""

End Sub

Public Sub setRegKey(rKey As String)

regKey = rKey

End Sub

Public Function GetUsername() As String

GetUsername = username

End Function

Public Function GetPassword() As String

GetPassword = password

End Function

Public Function isLoginSuccessful() As Boolean

isLoginSuccessful = loginSuccessful

End Function

Public Sub setProxy(aProxy As Variant)

Set proxy = aProxy

End Sub

Private Sub UserForm_Activate()

LoadBitmaps

Dim exampleStr As String
Dim loginStr As String

loginStr = proxy.getTranslator.GetTranslation("login")

Me.caption = proxy.getTranslator.GetTranslation("oracle_xml_publisher")
Me.Label5 = proxy.getTranslator.GetTranslation("xml_publisher")
Me.Label3.caption = loginStr
Me.Label1.caption = proxy.getTranslator.GetTranslation("username")
Me.Label2.caption = proxy.getTranslator.GetTranslation("password")
Me.Label7.caption = proxy.getTranslator.GetTranslation("copyright")
'Me.CheckBox1.Caption = proxy.GetTranslator.GetTranslation("save_login_information")

Me.Label4.caption = proxy.getTranslator.GetTranslation("example_username")
Me.Label6.caption = proxy.getTranslator.GetTranslation("example_password")

Me.CommandButton1.caption = loginStr
Me.CommandButton2.caption = proxy.getTranslator.GetTranslation("cancel")
Me.CommandButton3.caption = proxy.getTranslator.GetTranslation("guest")

Dim buttons As Collection

Set buttons = New Collection
buttons.Add Me.CommandButton1
buttons.Add Me.CommandButton2
buttons.Add Me.CommandButton3
spaceButtonsEvenly buttons, Me.BodyBackground.Left, Me.BodyBackground.Width

Label5.caption = proxy.getTranslator.GetTranslation("xml_publisher")

Dim storedUsername As String
Dim storedPassword As String

DoEvents
DoEvents
DoEvents
DoEvents
DoEvents
DoEvents

'storedUsername = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Username")
'storedPassword = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Encrypted_Password")
storedUsername = ""
storedPassword = ""

If Not storedUsername = "" Then

  CheckBox1.value = True
  username = storedUsername
  TextBox1.Text = username

End If

If Not storedPassword = "" Then

  CheckBox1.value = True
  TextBox2.Text = proxy.Decrypt(storedPassword)

End If

End Sub

Private Sub LoadBitmaps()

On Error GoTo SKIP_LOAD_BITMAPS

If Me.TopBanner.picture Is Nothing Then

  Dim installationDir As String

  installationDir = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Install_Dir")

  Set Me.TopBanner.picture = LoadPicture(installationDir & "\login_top_banner.jpg")
  Set Me.LeftBanner.picture = LoadPicture(installationDir & "\login_left_banner.jpg")
  Set Me.BottomBanner.picture = LoadPicture(installationDir & "\login_bottom_banner.jpg")

End If

SKIP_LOAD_BITMAPS:
End Sub

Private Sub CommandButton1_Click()

DoLogin TextBox1.value, TextBox2.value

End Sub

Private Sub DoLogin(aUsername As String, aPassword As String)

username = aUsername
password = aPassword

Dim errorMessage As String

Me.MousePointer = fmMousePointerHourGlass

errorMessage = proxy.ValidateLogin(username, password)

'If CheckBox1.value = True Then

'  WriteRegistry "HKEY_LOCAL_MACHINE", regKey, "Username", username
'  WriteRegistry "HKEY_LOCAL_MACHINE", regKey, "Encrypted_Password", proxy.Encrypt(password)

'Else

'  WriteRegistry "HKEY_LOCAL_MACHINE", regKey, "Username", ""
'  WriteRegistry "HKEY_LOCAL_MACHINE", regKey, "Encrypted_Password", ""

'End If

Me.MousePointer = fmMousePointerDefault

If errorMessage = "" Then

  loginSuccessful = True
  Me.Hide

Else

  username = ""
  password = ""
  loginSuccessful = False
  
  'Bug6192035 by JT 03/26/2008
  Dim msg As String
  msg = proxy.getTranslator.GetTranslation("servername_errormsg4")
  'ShowMsgBox errorMessage, vbCritical
  ShowMsgBox msg, vbCritical

End If

End Sub

Private Sub CommandButton3_Click()

DoLogin "guest", ""

End Sub

Private Sub CommandButton2_Click()

username = ""
password = ""
loginSuccessful = False
Me.Hide

End Sub


Attribute VB_Name = "LoginScreenRTL"
Attribute VB_Base = "0{C8CAC35C-438F-4CD0-8DBE-91CBCC13CD8F}{F5CD71BB-CDF7-4968-BDEB-ABB780CC806D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit

Dim username As String
Dim password As String
Dim loginSuccessful As Boolean
Dim regKey As String
Dim proxy As Variant

Private Sub UserForm_Initialize()

Set proxy = Nothing
Set Me.picture = LoginScreen.picture
Set Me.BodyBackground.picture = LoginScreen.BodyBackground.picture
Set Me.FooterBackground.picture = LoginScreen.FooterBackground.picture
LoadBitmaps
username = ""
password = ""
loginSuccessful = False
regKey = ""

End Sub

Public Sub setRegKey(rKey As String)

regKey = rKey

End Sub

Public Function GetUsername() As String

GetUsername = username

End Function

Public Function GetPassword() As String

GetPassword = password

End Function

Public Function isLoginSuccessful() As Boolean

isLoginSuccessful = loginSuccessful

End Function

Public Sub setProxy(aProxy As Variant)

Set proxy = aProxy

End Sub

Private Sub UserForm_Activate()

Me.RightToLeft = True

LoadBitmaps

Dim exampleStr As String
Dim loginStr As String

loginStr = proxy.getTranslator.GetTranslation("login")

Me.caption = proxy.getTranslator.GetTranslation("oracle_xml_publisher")
Me.Label5 = proxy.getTranslator.GetTranslation("xml_publisher")
Me.Label3.caption = loginStr
Me.Label1.caption = proxy.getTranslator.GetTranslation("username")
Me.Label2.caption = proxy.getTranslator.GetTranslation("password")
Me.Label7.caption = proxy.getTranslator.GetTranslation("copyright")
'Me.CheckBox1.Caption = proxy.GetTranslator.GetTranslation("save_login_information")

Me.Label4.caption = proxy.getTranslator.GetTranslation("example_username")
Me.Label6.caption = proxy.getTranslator.GetTranslation("example_password")

Me.CommandButton1.caption = loginStr
Me.CommandButton2.caption = proxy.getTranslator.GetTranslation("cancel")
Me.CommandButton3.caption = proxy.getTranslator.GetTranslation("guest")

Dim buttons As Collection

Set buttons = New Collection
buttons.Add Me.CommandButton1
buttons.Add Me.CommandButton2
buttons.Add Me.CommandButton3
spaceButtonsEvenly buttons, Me.BodyBackground.Left, Me.BodyBackground.Width

Label5.caption = proxy.getTranslator.GetTranslation("xml_publisher")

Dim storedUsername As String
Dim storedPassword As String

DoEvents
DoEvents
DoEvents
DoEvents
DoEvents
DoEvents

'storedUsername = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Username")
'storedPassword = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Encrypted_Password")
storedUsername = ""
storedPassword = ""

If Not storedUsername = "" Then

  CheckBox1.value = True
  username = storedUsername
  TextBox1.Text = username

End If

If Not storedPassword = "" Then

  CheckBox1.value = True
  TextBox2.Text = proxy.Decrypt(storedPassword)

End If

End Sub

Private Sub LoadBitmaps()

On Error GoTo SKIP_LOAD_BITMAPS

If Me.TopBanner.picture Is Nothing Then

  Dim installationDir As String

  installationDir = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Install_Dir")

  Set Me.TopBanner.picture = LoadPicture(installationDir & "\login_top_banner_rtl.jpg")
  Set Me.LeftBanner.picture = LoadPicture(installationDir & "\login_left_banner_rtl.jpg")
  Set Me.BottomBanner.picture = LoadPicture(installationDir & "\login_bottom_banner.jpg")

End If

SKIP_LOAD_BITMAPS:
End Sub

Private Sub CommandButton1_Click()

DoLogin TextBox1.value, TextBox2.value

End Sub

Private Sub DoLogin(aUsername As String, aPassword As String)

username = aUsername
password = aPassword

Dim errorMessage As String

Me.MousePointer = fmMousePointerHourGlass

errorMessage = proxy.ValidateLogin(username, password)

'If CheckBox1.value = True Then

'  WriteRegistry "HKEY_LOCAL_MACHINE", regKey, "Username", username
'  WriteRegistry "HKEY_LOCAL_MACHINE", regKey, "Encrypted_Password", proxy.Encrypt(password)

'Else

'  WriteRegistry "HKEY_LOCAL_MACHINE", regKey, "Username", ""
'  WriteRegistry "HKEY_LOCAL_MACHINE", regKey, "Encrypted_Password", ""

'End If

Me.MousePointer = fmMousePointerDefault

If errorMessage = "" Then

  loginSuccessful = True
  Me.Hide

Else

  username = ""
  password = ""
  loginSuccessful = False
  
  'ShowMsgBox errorMessage, vbCritical
  'Bug6192035 by JT 03/26/2008
  Dim msg As String
  msg = proxy.getTranslator.GetTranslation("servername_errormsg4")
  ShowMsgBox msg, vbCritical

End If

End Sub

Private Sub CommandButton3_Click()

DoLogin "guest", ""

End Sub

Private Sub CommandButton2_Click()

username = ""
password = ""
loginSuccessful = False
Me.Hide

End Sub


Attribute VB_Name = "MsgBox2"
Attribute VB_Base = "0{3C6442B4-2549-485A-8370-69D68F4CD178}{F0FEDE4B-A398-4137-B03A-E947B22EB6A2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit

Dim reply As VbMsgBoxResult

Public Sub SetTranslationStrings(programNameStr, okStr As String, yesStr As String, noStr As String)

Me.caption = programNameStr
Me.OKButton.caption = okStr
Me.YesButton.caption = yesStr
Me.NoButton.caption = noStr

End Sub

Public Sub SetMessage(aMessage As String)

Me.message.caption = aMessage

End Sub

Public Function GetReply() As VbMsgBoxResult

GetReply = reply

End Function

Public Sub SetMessageType(mType As VbMsgBoxStyle)

If mType = vbInformation Then

  Me.infoIcon.Visible = True
  Me.warningIcon.Visible = False
  Me.errorIcon.Visible = False

ElseIf mType = vbCritical Then

  Me.infoIcon.Visible = False
  Me.warningIcon.Visible = False
  Me.errorIcon.Visible = True

ElseIf mType = vbExclamation Then

  Me.infoIcon.Visible = False
  Me.warningIcon.Visible = True
  Me.errorIcon.Visible = False

Else

  Me.infoIcon.Visible = False
  Me.warningIcon.Visible = False
  Me.errorIcon.Visible = False

End If

End Sub

Public Sub SetShowYesNo(showYesNo As Boolean)

If showYesNo Then

  Me.YesButton.Visible = True
  Me.NoButton.Visible = True
  Me.OKButton.Visible = False

Else

  Me.YesButton.Visible = False
  Me.NoButton.Visible = False
  Me.OKButton.Visible = True

End If

End Sub

Private Sub NoButton_Click()

reply = vbNo
Me.Hide

End Sub

Private Sub OKButton_Click()

reply = vbOK
Me.Hide

End Sub

Private Sub YesButton_Click()

reply = vbYes
Me.Hide

End Sub

Attribute VB_Name = "MsgBox2RTL"
Attribute VB_Base = "0{6324FDAC-2A7C-4969-9073-5BCC3D190D61}{899EDA0E-8EAC-4A7D-83E5-18181E434F26}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit

Dim reply As VbMsgBoxResult

Private Sub UserForm_Initialize()

Set Me.warningIcon.picture = MsgBox2.warningIcon.picture
Set Me.infoIcon.picture = MsgBox2.infoIcon.picture
Set Me.errorIcon.picture = MsgBox2.errorIcon.picture

End Sub

Private Sub UserForm_Activate()

Me.RightToLeft = True

End Sub

Public Sub SetTranslationStrings(programNameStr As String, okStr As String, yesStr As String, noStr As String)

Me.caption = programNameStr
Me.OKButton.caption = okStr
Me.YesButton.caption = yesStr
Me.NoButton.caption = noStr

End Sub

Public Sub SetMessage(aMessage As String)

Me.message.caption = aMessage

End Sub

Public Function GetReply() As VbMsgBoxResult

GetReply = reply

End Function

Public Sub SetMessageType(mType As VbMsgBoxStyle)

If mType = vbInformation Then

  Me.infoIcon.Visible = True
  Me.warningIcon.Visible = False
  Me.errorIcon.Visible = False

ElseIf mType = vbCritical Then

  Me.infoIcon.Visible = False
  Me.warningIcon.Visible = False
  Me.errorIcon.Visible = True

ElseIf mType = vbExclamation Then

  Me.infoIcon.Visible = False
  Me.warningIcon.Visible = True
  Me.errorIcon.Visible = False

Else

  Me.infoIcon.Visible = False
  Me.warningIcon.Visible = False
  Me.errorIcon.Visible = False

End If

End Sub

Public Sub SetShowYesNo(showYesNo As Boolean)

If showYesNo Then

  Me.YesButton.Visible = True
  Me.NoButton.Visible = True
  Me.OKButton.Visible = False

Else

  Me.YesButton.Visible = False
  Me.NoButton.Visible = False
  Me.OKButton.Visible = True

End If

End Sub

Private Sub NoButton_Click()

reply = vbNo
Me.Hide

End Sub

Private Sub OKButton_Click()

reply = vbOK
Me.Hide

End Sub

Private Sub YesButton_Click()

reply = vbYes
Me.Hide

End Sub

Attribute VB_Name = "MultiValueSelector"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Dim parameterName As String
Dim WithEvents multiSelectButton As Office.CommandBarButton
Attribute multiSelectButton.VB_VarHelpID = -1
Dim selectorType As String
Dim labels As Collection
Dim values As Collection
Dim selectionState As Collection
Dim selectedValues As Collection
Dim proxy As Variant

Private Sub Class_Initialize()

parameterName = ""
selectorType = ""
Set labels = New Collection
Set values = New Collection
Set selectionState = New Collection
Set selectedValues = New Collection
Set proxy = Nothing

End Sub

Public Sub setProxy(aProxy As Variant)

Set proxy = aProxy

End Sub

Public Function getProxy() As Variant

Set getProxy = proxy

End Function

Public Sub clearValues()

Set labels = New Collection
Set values = New Collection
Set selectionState = New Collection
Set selectedValues = New Collection

End Sub

Public Sub setParameterName(aName As String)

parameterName = aName

End Sub

Public Sub setMultiSelectButton(aButton As Office.CommandBarButton)

Set multiSelectButton = aButton

End Sub

Public Sub setSelectorType(aType As String)

selectorType = aType

End Sub

Public Sub addLabelValue(aLabel As String, aValue As String, isSelected As Boolean)

Dim currentIndex As Integer

currentIndex = labels.Count
labels.Add aLabel
values.Add aValue
selectionState.Add isSelected

If isSelected Then
  
  selectedValues.Add aValue

End If

End Sub

Public Function getSelectedValues() As Collection

Set getSelectedValues = selectedValues

End Function

Private Sub multiSelectButton_Click(ByVal Ctrl As Office.CommandBarButton, CancelDefault As Boolean)

Dim selectorUI As ListBoxSelector

If selectorType = "multiValueComboBox" Then

  Set selectorUI = New ListBoxSelector

ElseIf selectorType = "multiValueText" Then

  Set selectorUI = New ListBoxSelector

End If

selectorUI.setMultiValueSelector Me
selectorUI.setParameterName parameterName
selectorUI.setLabels labels
selectorUI.setValues values
selectorUI.setSelectionState selectionState
selectorUI.Show

End Sub

Public Sub updateSelectedValues(selValues As Collection, selState As Collection)

Set selectedValues = selValues
Set selectionState = selState

End Sub

Attribute VB_Name = "NullListener"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub ButtonClicked(commandButton As Office.CommandBarButton)

End Sub



Attribute VB_Name = "PrereqWarningPanel"
Attribute VB_Base = "0{9C69C9EA-B962-464E-9F76-19AEA0CBE7B3}{D9537E90-12CC-4140-AA85-406E57CFF014}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Dim proxy As Variant

Private Sub UserForm_Initialize()

Set aProxy = Nothing

End Sub

Public Sub setProxy(aProxy As Variant)

Set proxy = aProxy

End Sub

Private Sub UserForm_Activate()

Me.caption = proxy.getTranslator.GetTranslation("oracle_xml_publisher")
DotNetLabel.caption = proxy.getTranslator.GetTranslation("dot_net_framework")
JSharpLabel.caption = proxy.getTranslator.GetTranslation("jsharp_framework")
DotNetLink.caption = proxy.getTranslator.GetTranslation("dot_net_link_location")
JSharpLink.caption = proxy.getTranslator.GetTranslation("jsharp_link_location")
WarningMessage1.caption = proxy.getTranslator.GetTranslation("prereq_warning_msg_1")
WarningMessage2.caption = proxy.getTranslator.GetTranslation("prereq_warning_msg_2")
OKButton.caption = proxy.getTranslator.GetTranslation("ok")

If Not DotNetLabel.Visible Then

  JSharpLabel.Top = DotNetLabel.Top
  JSharpLink.Top = DotNetLink.Top

End If

End Sub

Public Sub SetDotNetLinkVisible(flag As Boolean)

DotNetLink.Visible = flag
DotNetLabel.Visible = flag

End Sub

Public Sub SetJSharpLinkVisible(flag As Boolean)

JSharpLink.Visible = flag
JSharpLabel.Visible = flag

End Sub

Private Sub DotNetLink_Click()

proxy.LaunchWebPage DotNetLink.caption

End Sub

Private Sub JSharpLink_Click()

proxy.LaunchWebPage JSharpLink.caption

End Sub

Private Sub OKButton_Click()

Me.Hide

End Sub


Attribute VB_Name = "PrereqWarningPanelRTL"
Attribute VB_Base = "0{A1A50757-0025-4973-AF5D-BF4AB090A946}{FB291E5B-DB62-4AD2-8F09-068828AF5EA5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Dim proxy As Variant

Private Sub UserForm_Initialize()

Set aProxy = Nothing

End Sub

Public Sub setProxy(aProxy As Variant)

Set proxy = aProxy

End Sub

Private Sub UserForm_Activate()

Me.caption = proxy.getTranslator.GetTranslation("oracle_xml_publisher")
DotNetLabel.caption = proxy.getTranslator.GetTranslation("dot_net_framework")
JSharpLabel.caption = proxy.getTranslator.GetTranslation("jsharp_framework")
DotNetLink.caption = proxy.getTranslator.GetTranslation("dot_net_link_location")
JSharpLink.caption = proxy.getTranslator.GetTranslation("jsharp_link_location")
WarningMessage1.caption = proxy.getTranslator.GetTranslation("prereq_warning_msg_1")
WarningMessage2.caption = proxy.getTranslator.GetTranslation("prereq_warning_msg_2")
OKButton.caption = proxy.getTranslator.GetTranslation("ok")

If Not DotNetLabel.Visible Then

  JSharpLabel.Top = DotNetLabel.Top
  JSharpLink.Top = DotNetLink.Top

End If

End Sub

Public Sub SetDotNetLinkVisible(flag As Boolean)

DotNetLink.Visible = flag
DotNetLabel.Visible = flag

End Sub

Public Sub SetJSharpLinkVisible(flag As Boolean)

JSharpLink.Visible = flag
JSharpLabel.Visible = flag

End Sub

Private Sub DotNetLink_Click()

proxy.LaunchWebPage DotNetLink.caption

End Sub

Private Sub JSharpLink_Click()

proxy.LaunchWebPage JSharpLink.caption

End Sub

Private Sub OKButton_Click()

Me.Hide

End Sub



Attribute VB_Name = "ProcessingScreen"
Attribute VB_Base = "0{EE7380F9-997E-4DB2-96F0-6F371DDEF66C}{DE3937E4-D742-4A56-AE09-3A9A105EB548}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit

Dim interval As Integer
Dim currentInterval As Integer
Public userCanceled As Boolean
Dim proxy As Variant

Private Sub UserForm_Initialize()

Set Me.picture = LoginScreen.picture
Set Me.BodyBackground.picture = LoginScreen.BodyBackground.picture

interval = 100
currentInterval = 0
userCanceled = False
Image1.Width = 0

End Sub

Private Sub UserForm_Activate()

Me.Label5.caption = proxy.getTranslator.GetTranslation("xml_publisher")
Me.caption = proxy.getTranslator.GetTranslation("oracle_xml_publisher")
Me.Label6.caption = proxy.getTranslator.GetTranslation("installing")
Me.CommandButton1.caption = proxy.getTranslator.GetTranslation("cancel")

End Sub

Public Sub setProxy(aProxy As Variant)

Set proxy = aProxy

End Sub

Public Function didUserCancel() As Boolean

didUserCancel = userCanceled

End Function

Private Sub CommandButton1_Click()

userCanceled = True

End Sub

Public Sub setTitle(aTitle As String)

Label7.caption = aTitle

End Sub

Public Sub setInterval(anInterval As Integer)

interval = anInterval

End Sub

Public Function getInterval()

getInterval = interval

End Function

Public Sub incrementInterval(installMessage As String)

setCurrentInterval currentInterval + 1, installMessage

End Sub

Public Sub setCurrentInterval(anInterval As Integer, installMessage As String)

currentInterval = anInterval

Dim percentage As Double
Dim newWidth As Integer

percentage = currentInterval / interval

newWidth = percentage * (Image2.Width - 2)

Dim roundedPercentage As Integer

roundedPercentage = percentage * 100

Label6.caption = installMessage
Label1.caption = roundedPercentage & "%"

Dim currentWidth As Integer

currentWidth = Image1.Width

While currentWidth <= newWidth

  Image1.Width = currentWidth
  currentWidth = currentWidth + 1
  Me.Repaint

Wend

Image1.Width = newWidth
Me.Repaint

End Sub


Attribute VB_Name = "ProcessingScreenRTL"
Attribute VB_Base = "0{453CF28C-4679-4D3C-983D-F9E51E114D79}{C72FB36C-1740-4429-9BE2-D3E4C624C91A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Option Explicit

Dim interval As Integer
Dim currentInterval As Integer
Public userCanceled As Boolean
Dim proxy As Variant

Private Sub UserForm_Initialize()

Set Me.picture = LoginScreen.picture
Set Me.BodyBackground.picture = LoginScreen.BodyBackground.picture
Set Me.Image1.picture = ProcessingScreen.Image1.picture
Set Me.Image2.picture = ProcessingScreen.Image2.picture

interval = 100
currentInterval = 0
userCanceled = False
Image1.Width = 0

End Sub

Private Sub UserForm_Activate()

Me.RightToLeft = True

Me.Label5.caption = proxy.getTranslator.GetTranslation("xml_publisher")
Me.caption = proxy.getTranslator.GetTranslation("oracle_xml_publisher")
Me.Label6.caption = proxy.getTranslator.GetTranslation("installing")
Me.CommandButton1.caption = proxy.getTranslator.GetTranslation("cancel")

End Sub

Public Sub setProxy(aProxy As Variant)

Set proxy = aProxy

End Sub

Public Function didUserCancel() As Boolean

didUserCancel = userCanceled

End Function

Private Sub CommandButton1_Click()

userCanceled = True

End Sub

Public Sub setTitle(aTitle As String)

Label7.caption = aTitle

End Sub

Public Sub SetProgramTitle(aTitle As String)

Label5.caption = aTitle

End Sub

Public Sub setInterval(anInterval As Integer)

interval = anInterval

End Sub

Public Function getInterval()

getInterval = interval

End Function

Public Sub incrementInterval(installMessage As String)

setCurrentInterval currentInterval + 1, installMessage

End Sub

Public Sub setCurrentInterval(anInterval As Integer, installMessage As String)

currentInterval = anInterval

Dim percentage As Double
Dim newWidth As Integer

percentage = currentInterval / interval

newWidth = percentage * (Image2.Width - 2)

Dim roundedPercentage As Integer

roundedPercentage = percentage * 100

Label6.caption = installMessage
Label1.caption = roundedPercentage & "%"

Dim currentWidth As Integer

currentWidth = Image1.Width

While currentWidth <= newWidth

  Image1.Width = currentWidth
  currentWidth = currentWidth + 1
  Me.Repaint

Wend

Image1.Width = newWidth
Me.Repaint

End Sub


Attribute VB_Name = "ProxySettings"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim settings As Variant
Dim regKey As String

Private Sub Class_Initialize()

regKey = ""
Set settings = CreateObject("Scripting.Dictionary")

End Sub

Public Sub setRegKey(rKey As String)

regKey = rKey
updateSettings

End Sub

Public Function getSetting(key As String) As String

getSetting = settings.Item(key)

End Function

Public Sub setSetting(key As String, value As String)

WriteRegistry "HKEY_LOCAL_MACHINE", regKey, key, value
settings.Item(key) = value

End Sub

Sub updateSettings()

settings.Item("Proxy_UseIE") = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Proxy_UseIE")
settings.Item("Proxy_Host") = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Proxy_Host")
settings.Item("Proxy_Port") = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Proxy_Port")
settings.Item("Proxy_User") = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Proxy_User")
settings.Item("Proxy_Password") = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Proxy_Password")
settings.Item("Proxy_Nonhosts") = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Proxy_Nonhosts")

Dim proxyEnabled As Long
Dim ieKey As String
Dim rootKey As String
Dim serverStr As String
Dim proxyOverride As String

ieKey = "Software\Microsoft\Windows\CurrentVersion\Internet Settings"
rootKey = "HKEY_CURRENT_USER"
proxyEnabled = GetRegistryDWord(rootKey, ieKey, "ProxyEnable", 0)
serverStr = GetRegistry(rootKey, ieKey, "ProxyServer")
proxyOverride = GetRegistry(rootKey, ieKey, "ProxyOverride")

If proxyEnabled = 0 Then
  
  rootKey = "HKEY_LOCAL_MACHINE"
  proxyEnabled = GetRegistryDWord(rootKey, ieKey, "ProxyEnable", 0)
  serverStr = GetRegistry(rootKey, ieKey, "ProxyServer")
  proxyOverride = GetRegistry(rootKey, ieKey, "ProxyOverride")
  
End If

If proxyEnabled = 1 Then

  settings.Item("Proxy_IE_Enabled") = "True"

Else

  settings.Item("Proxy_IE_Enabled") = "False"

End If

settings.Item("Proxy_IE_Server") = serverStr
settings.Item("Proxy_IE_Override") = proxyOverride

End Sub



Attribute VB_Name = "RegUtilities"
Option Explicit

' 32-bit declarations
Private Declare Function RegOpenKeyA Lib "advapi32.dll" _
    (ByVal hKey As Long, ByVal sSubKey As String, _
    ByRef hkeyResult As Long) As Long

Private Declare Function RegCloseKey Lib "advapi32.dll" _
    (ByVal hKey As Long) As Long

Private Declare Function RegSetValueExA Lib "advapi32.dll" _
    (ByVal hKey As Long, ByVal sValueName As String, _
    ByVal dwReserved As Long, ByVal dwType As Long, _
    ByVal sValue As String, ByVal dwSize As Long) As Long

Private Declare Function RegCreateKeyA Lib "advapi32.dll" _
    (ByVal hKey As Long, ByVal sSubKey As String, _
    ByRef hkeyResult As Long) As Long

Private Declare Function RegQueryValueExA Lib "advapi32.dll" _
    (ByVal hKey As Long, ByVal sValueName As String, _
    ByVal dwReserved As Long, ByRef lValueType As Long, _
    ByVal sValue As String, ByRef lResultLen As Long) As Long

Private Declare Function RegQueryValueExB Lib "advapi32.dll" Alias "RegQueryValueExA" _
    (ByVal hKey As Long, ByVal sValueName As String, _
    ByVal dwReserved As Long, ByRef lValueType As Long, _
    ByRef lpValue As Long, ByRef lResultLen As Long) As Long

Private Declare Function RegDeleteValueA Lib "advapi32.dll" _
    (ByVal hKey As Long, ByVal lpValueName As String) As Long

Public Function GetRegistry(key, Path, ByVal ValueName As String) As String
'  Reads a value from the Windows Registry

    Dim hKey As Long
    Dim lValueType As Long
    Dim sResult As String
    Dim lResultLen As Long
    Dim ResultLen As Long
    Dim x, TheKey As Long

    TheKey = -99
    Select Case UCase(key)
        Case "HKEY_CLASSES_ROOT": TheKey = &H80000000
        Case "HKEY_CURRENT_USER": TheKey = &H80000001
        Case "HKEY_LOCAL_MACHINE": TheKey = &H80000002
        Case "HKEY_USERS": TheKey = &H80000003
        Case "HKEY_CURRENT_CONFIG": TheKey = &H80000004
        Case "HKEY_DYN_DATA": TheKey = &H80000005
    End Select
    
'   Exit if key is not found
    If TheKey = -99 Then
        GetRegistry = ""
        Exit Function
    End If

    If RegOpenKeyA(TheKey, Path, hKey) <> 0 Then
        GetRegistry = ""
        Exit Function
    End If
    
    sResult = Space(255)
    lResultLen = Len(sResult)
    
    x = RegQueryValueExA(hKey, ValueName, 0, lValueType, _
    sResult, lResultLen)
    
    RegCloseKey hKey
        
    If x = 0 And Not lResultLen = 0 Then
        sResult = Trim$(sResult)
        GetRegistry = Left$(sResult, lResultLen - 1)
    Else
        GetRegistry = ""
    End If

End Function

Public Function GetRegistryDWord(key, Path, ByVal ValueName As String, Optional lDefault As Long = -1) As Long
'  Reads a value from the Windows Registry

    Dim hKey As Long
    Dim lReturn As Long
    Dim x As Long
    Dim TheKey As Long

    TheKey = -99
    Select Case UCase(key)
        Case "HKEY_CLASSES_ROOT": TheKey = &H80000000
        Case "HKEY_CURRENT_USER": TheKey = &H80000001
        Case "HKEY_LOCAL_MACHINE": TheKey = &H80000002
        Case "HKEY_USERS": TheKey = &H80000003
        Case "HKEY_CURRENT_CONFIG": TheKey = &H80000004
        Case "HKEY_DYN_DATA": TheKey = &H80000005
    End Select
    
'   Exit if key is not found
    If TheKey = -99 Then
        GetRegistryDWord = lDefault
        Exit Function
    End If

    If RegOpenKeyA(TheKey, Path, hKey) <> 0 Then
        GetRegistryDWord = lDefault
        Exit Function
    End If
    
    x = RegQueryValueExB(hKey, ValueName, 0, 4, lReturn, 4)
    
    RegCloseKey hKey
        
    If x = 0 Then
        GetRegistryDWord = lReturn
    Else
        GetRegistryDWord = lDefault
    End If

End Function

Public Function WriteRegistry(ByVal key As String, _
    ByVal Path As String, ByVal entry As String, _
    ByVal value As String) As Boolean
    
    Dim TheKey As Long
    Dim hKey As Long
    Dim lValueType As Long
    Dim sResult As String
    Dim lResultLen As Long
    Dim x As Long
    
    TheKey = -99
    Select Case UCase(key)
        Case "HKEY_CLASSES_ROOT": TheKey = &H80000000
        Case "HKEY_CURRENT_USER": TheKey = &H80000001
        Case "HKEY_LOCAL_MACHINE": TheKey = &H80000002
        Case "HKEY_USERS": TheKey = &H80000003
        Case "HKEY_CURRENT_CONFIG": TheKey = &H80000004
        Case "HKEY_DYN_DATA": TheKey = &H80000005
    End Select
    
'   Exit if key is not found
    If TheKey = -99 Then
        WriteRegistry = False
        Exit Function
    End If

'   Make sure key exists
    If RegOpenKeyA(TheKey, Path, hKey) <> 0 Then
        x = RegCreateKeyA(TheKey, Path, hKey)
        If x <> 0 Then
          WriteRegistry = False
          Exit Function
        End If
    End If

    'If value = "" Then
    '  x = RegDeleteValueA(hKey, entry)
    'Else
      x = RegSetValueExA(hKey, entry, 0, 1, value, Len(value))
    'End If

    RegCloseKey hKey
    If x = 0 Then
        
      WriteRegistry = True
        
    Else
        
      WriteRegistry = False

    End If

End Function

Public Function DeleteValue(ByVal key As String, _
    ByVal Path As String, ByVal sName As String) As Boolean

    Dim hKey As Long
    Dim lValueType As Long
    Dim sResult As String
    Dim lResultLen As Long
    Dim TheKey As Long
    
    TheKey = -99
    Select Case UCase(key)
        Case "HKEY_CLASSES_ROOT": TheKey = &H80000000
        Case "HKEY_CURRENT_USER": TheKey = &H80000001
        Case "HKEY_LOCAL_MACHINE": TheKey = &H80000002
        Case "HKEY_USERS": TheKey = &H80000003
        Case "HKEY_CURRENT_CONFIG": TheKey = &H80000004
        Case "HKEY_DYN_DATA": TheKey = &H80000005
    End Select
    
'   Exit if key is not found
    If TheKey = -99 Then
        DeleteValue = False
        Exit Function
    End If

'   Make sure key exists
    If RegOpenKeyA(TheKey, Path, hKey) <> 0 Then
        DeleteValue = False
        Exit Function
    End If
    
    RegDeleteValueA hKey, sName
    RegCloseKey hKey
    DeleteValue = True
    
End Function



Attribute VB_Name = "ReportBrowseReportsListener"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim dAnalyzer As DataAnalyzer

Private Sub Class_Initialize()

Set dAnalyzer = Nothing

End Sub

Public Sub SetDataAnalyzer(anAnalyzer As DataAnalyzer)

Set dAnalyzer = anAnalyzer

End Sub

Public Sub ButtonClicked(commandButton As Office.CommandBarButton)

' Do nothing, the addin's listener will take care of this

End Sub

Attribute VB_Name = "ReportCheckUpdatesListener"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim dAnalyzer As DataAnalyzer

Private Sub Class_Initialize()

Set dAnalyzer = Nothing

End Sub

Public Sub SetDataAnalyzer(anAnalyzer As DataAnalyzer)

Set dAnalyzer = anAnalyzer

End Sub

Public Sub ButtonClicked(commandButton As Office.CommandBarButton)

dAnalyzer.CheckForUpdates

End Sub


Attribute VB_Name = "ReportEventController"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim loginListener As ReportLoginListener
Dim logoutListener As ReportLogoutListener
Dim showParamsListener As ReportShowParamsListener
Dim showWebPageListener As ReportShowWebPageListener
Dim checkUpdatesListener As ReportCheckUpdatesListener
Dim browseReportsListener As ReportBrowseReportsListener
Dim publishReportListener As ReportPublishReportListener
Dim publishNewReportListener As ReportPublishNewReportListener
Dim nListener As NullListener
Dim dAnalyzer As DataAnalyzer
Dim translator As Object
Dim createNewMenus As Boolean

Private Sub Class_Initialize()

Set loginListener = New ReportLoginListener
Set logoutListener = New ReportLogoutListener
Set showParamsListener = New ReportShowParamsListener
Set showWebPageListener = New ReportShowWebPageListener
Set checkUpdatesListener = New ReportCheckUpdatesListener
Set browseReportsListener = New ReportBrowseReportsListener
Set publishReportListener = New ReportPublishReportListener
Set publishNewReportListener = New ReportPublishNewReportListener
Set nListener = New NullListener
Set dAnalyzer = Nothing
Set translator = Nothing
createNewMenus = False

End Sub

Public Function shouldCreateNewMenus() As Boolean

shouldCreateNewMenus = createNewMenus

End Function

Public Sub SetDataAnalyzer(anAnalyzer As DataAnalyzer)

Set dAnalyzer = anAnalyzer
loginListener.SetDataAnalyzer anAnalyzer
logoutListener.SetDataAnalyzer anAnalyzer
showParamsListener.SetDataAnalyzer anAnalyzer
showWebPageListener.SetDataAnalyzer anAnalyzer
checkUpdatesListener.SetDataAnalyzer anAnalyzer
browseReportsListener.SetDataAnalyzer anAnalyzer
publishReportListener.SetDataAnalyzer anAnalyzer
publishNewReportListener.SetDataAnalyzer anAnalyzer

Dim analyzerProps As Object
Dim utilitiesVersion As String

Set analyzerProps = CreateObject("Scripting.Dictionary")

dAnalyzer.SetAboutProperties analyzerProps
utilitiesVersion = analyzerProps.Item("XDOUtilities.Version")

If utilitiesVersion = "Not Found" Then
 
  createNewMenus = True

End If

End Sub

Public Sub SetTranslator(aTranslator As Object)

Set translator = aTranslator

End Sub

Public Function GetLoginListener() As ReportLoginListener

Set GetLoginListener = loginListener

End Function

Public Sub SetupEventHandlers(menuBar As GlobalMenuBar, prodMenu As Office.CommandBarPopup, appMenu As Office.CommandBarPopup)

Dim loginStr As String
Dim loginAsStr As String
Dim translatedStr As String
Dim eventHandlers As Collection
Dim commandButton As Office.CommandBarButton
Dim loginEventHandler As ButtonEventHandler
Dim logoutEventHandler As ButtonEventHandler
Dim showParamsEventHandler As ButtonEventHandler
Dim showWebPageEventHandler As ButtonEventHandler
Dim checkUpdatesEventHandler As ButtonEventHandler
Dim browseReportsEventHandler As ButtonEventHandler
Dim publishReportEventHandler As ButtonEventHandler
Dim publishNewReportEventHandler As ButtonEventHandler

loginStr = translator.GetTranslation("login_menu_item")
loginAsStr = translator.GetTranslation("logged_in_as")
Set commandButton = menuBar.FindCommandBarControl(loginStr, appMenu)
Set loginEventHandler = menuBar.AddEventListener(commandButton, loginListener)
loginListener.SetLoginTranslations loginStr, loginAsStr

translatedStr = translator.GetTranslation("logout_menu_item")
Set commandButton = menuBar.FindCommandBarControl(translatedStr, appMenu)
Set logoutEventHandler = menuBar.AddEventListener(commandButton, logoutListener)
logoutListener.SetLoginTranslation loginStr

translatedStr = translator.GetTranslation("browse_for_reports_online_menu_item")
Set commandButton = menuBar.FindCommandBarControl(translatedStr, appMenu)
Set browseReportsEventHandler = menuBar.AddEventListener(commandButton, browseReportsListener)

translatedStr = translator.GetTranslation("show_report_parameters_menu_item")
Set commandButton = menuBar.FindCommandBarControl(translatedStr, appMenu)
Set showParamsEventHandler = menuBar.AddEventListener(commandButton, showParamsListener)

translatedStr = translator.GetTranslation("publish_report")
Set commandButton = menuBar.FindCommandBarControl(translatedStr, appMenu)
Set publishReportEventHandler = menuBar.AddEventListener(commandButton, publishReportListener)

translatedStr = translator.GetTranslation("publish_as_new_report")
Set commandButton = menuBar.FindCommandBarControl(translatedStr, appMenu)
Set publishNewReportEventHandler = menuBar.AddEventListener(commandButton, publishNewReportListener)

translatedStr = translator.GetTranslation("show_report_web_page_menu_item")
Set commandButton = menuBar.FindCommandBarControl(translatedStr, appMenu)
Set showWebPageEventHandler = menuBar.AddEventListener(commandButton, showWebPageListener)

translatedStr = translator.GetTranslation("check_for_updates_menu_item")
Set commandButton = menuBar.FindCommandBarControl(translatedStr, appMenu)
Set checkUpdatesEventHandler = menuBar.AddEventListener(commandButton, checkUpdatesListener)

' The handler to activate once the user logs in
loginListener.AddActiveHandler logoutEventHandler
loginListener.AddActiveHandler browseReportsEventHandler
loginListener.AddActiveHandler publishReportEventHandler
loginListener.AddActiveHandler publishNewReportEventHandler
loginListener.AddActiveHandler showParamsEventHandler
loginListener.AddActiveHandler showWebPageEventHandler
loginListener.AddActiveHandler checkUpdatesEventHandler
' The handler to inactivate once the user logs in
loginListener.AddInactiveHandler loginEventHandler

' The handler to activate once the user logs out
logoutListener.AddActiveHandler loginEventHandler
' The handler to inactivate once the user logs out
logoutListener.AddInactiveHandler logoutEventHandler
logoutListener.AddInactiveHandler browseReportsEventHandler
logoutListener.AddInactiveHandler publishReportEventHandler
logoutListener.AddInactiveHandler publishNewReportEventHandler
logoutListener.AddInactiveHandler showParamsEventHandler
logoutListener.AddInactiveHandler showWebPageEventHandler
logoutListener.AddInactiveHandler checkUpdatesEventHandler

End Sub

Public Sub ActivateController()

logoutListener.AfterActivation

End Sub

Attribute VB_Name = "ReportLoginListener"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim activeHandlers As Collection
Dim inactiveHandlers As Collection
Dim dAnalyzer As DataAnalyzer
Dim loginTranslation As String
Dim loginAsTranslation As String

Private Sub Class_Initialize()

Set activeHandlers = New Collection
Set inactiveHandlers = New Collection
Set dAnalyzer = Nothing
loginTranslation = ""
loginAsTranslation = ""

End Sub

Public Sub SetLoginTranslations(loginTrans As String, loginAsTrans As String)

loginTranslation = loginTrans
loginAsTranslation = loginAsTrans

End Sub

Public Sub SetDataAnalyzer(anAnalyzer As DataAnalyzer)

Set dAnalyzer = anAnalyzer

End Sub

Public Sub AddActiveHandler(activeHandler As ButtonEventHandler)

activeHandlers.Add activeHandler

End Sub

Public Sub AddInactiveHandler(inactiveHandler As ButtonEventHandler)

inactiveHandlers.Add inactiveHandler

End Sub

Public Sub ButtonClicked(commandButton As Office.CommandBarButton)

If dAnalyzer.ShowLogin Then
  
  ' Call AfterActivation only if login is successful
  AfterActivation

End If

End Sub

Public Sub AfterActivation()

On Error Resume Next

Dim eventHandler As ButtonEventHandler

For Each eventHandler In activeHandlers

  eventHandler.EnableButton

Next

For Each eventHandler In inactiveHandlers

  eventHandler.DisableButton
  
  If eventHandler.GetButton.DescriptionText = loginTranslation Then
    
    eventHandler.SetCaption loginAsTranslation & dAnalyzer.GetUsername

  End If

Next

End Sub

Attribute VB_Name = "ReportLogoutListener"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim activeHandlers As Collection
Dim inactiveHandlers As Collection
Dim dAnalyzer As DataAnalyzer
Dim loginTranslation As String

Private Sub Class_Initialize()

Set activeHandlers = New Collection
Set inactiveHandlers = New Collection
Set dAnalyzer = Nothing
loginTranslation = ""

End Sub

Public Sub SetLoginTranslation(loginTrans As String)

loginTranslation = loginTrans

End Sub

Public Sub SetDataAnalyzer(anAnalyzer As DataAnalyzer)

Set dAnalyzer = anAnalyzer

End Sub

Public Sub AddActiveHandler(activeHandler As ButtonEventHandler)

activeHandlers.Add activeHandler

End Sub

Public Sub AddInactiveHandler(inactiveHandler As ButtonEventHandler)

inactiveHandlers.Add inactiveHandler

End Sub

Public Sub ButtonClicked(commandButton As Office.CommandBarButton)

dAnalyzer.RemoveToolbar
dAnalyzer.Logout

AfterActivation

End Sub

Public Sub AfterActivation()

On Error Resume Next

Dim eventHandler As ButtonEventHandler

For Each eventHandler In activeHandlers

  eventHandler.EnableButton

  If eventHandler.GetButton.DescriptionText = loginTranslation Then
    
    eventHandler.SetCaption loginTranslation

  End If

Next

For Each eventHandler In inactiveHandlers

  eventHandler.DisableButton

Next

End Sub


Attribute VB_Name = "ReportParameterListener"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim WithEvents comboBoxControl As Office.CommandBarComboBox
Attribute comboBoxControl.VB_VarHelpID = -1
Dim analyzer As DataAnalyzer

Private Sub Class_Initialize()

Set comboBoxControl = Nothing
Set analyzer = Nothing

End Sub

Public Sub setComboBoxControl(control As Office.CommandBarComboBox)

Set comboBoxControl = control

End Sub

Public Sub SetDataAnalyzer(anAnalyzer As DataAnalyzer)

Set analyzer = anAnalyzer

End Sub

Private Sub comboBoxControl_Change(ByVal Ctrl As Office.CommandBarComboBox)

analyzer.RefreshToolbar

End Sub

Attribute VB_Name = "ReportPublishNewReportListener"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim dAnalyzer As DataAnalyzer

Private Sub Class_Initialize()

Set dAnalyzer = Nothing

End Sub

Public Sub SetDataAnalyzer(anAnalyzer As DataAnalyzer)

Set dAnalyzer = anAnalyzer

End Sub

Public Sub ButtonClicked(commandButton As Office.CommandBarButton)

dAnalyzer.PublishNewReport

End Sub




Attribute VB_Name = "ReportPublishReportListener"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim dAnalyzer As DataAnalyzer

Private Sub Class_Initialize()

Set dAnalyzer = Nothing

End Sub

Public Sub SetDataAnalyzer(anAnalyzer As DataAnalyzer)

Set dAnalyzer = anAnalyzer

End Sub

Public Sub ButtonClicked(commandButton As Office.CommandBarButton)

dAnalyzer.PublishReport

End Sub



Attribute VB_Name = "ReportShowParamsListener"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim dAnalyzer As DataAnalyzer

Private Sub Class_Initialize()

Set dAnalyzer = Nothing

End Sub

Public Sub SetDataAnalyzer(anAnalyzer As DataAnalyzer)

Set dAnalyzer = anAnalyzer

End Sub

Public Sub ButtonClicked(commandButton As Office.CommandBarButton)

Dim username As String
Dim password As String

username = dAnalyzer.GetUsername
password = dAnalyzer.GetPassword

dAnalyzer.LoadReport username, password

End Sub

Attribute VB_Name = "ReportShowWebPageListener"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim dAnalyzer As DataAnalyzer

Private Sub Class_Initialize()

Set dAnalyzer = Nothing

End Sub

Public Sub SetDataAnalyzer(anAnalyzer As DataAnalyzer)

Set dAnalyzer = anAnalyzer

End Sub

Public Sub ButtonClicked(commandButton As Office.CommandBarButton)

dAnalyzer.ShowReportWebPage

End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ShellUtilities"
Option Explicit

Private Declare Function OpenProcess Lib "kernel32" ( _
ByVal dwDesiredAccess As Long, _
ByVal bInheritHandle As Long, _
ByVal dwProcessId As Long) As Long

Private Declare Function CloseHandle Lib "kernel32" ( _
ByVal hObject As Long) As Long

Sub ShellAndWait(ByVal strProg As String, _
ByVal lStyle As VbAppWinStyle)

Dim ProcessId As Long
Dim ProcessHandle As Long
Const ACCESS As Long = &H100000

ProcessId = Shell(strProg, lStyle)
Do
ProcessHandle = OpenProcess(ACCESS, False, ProcessId)
If ProcessHandle <> 0 Then
CloseHandle ProcessHandle
End If
DoEvents
Loop Until ProcessHandle = 0

End Sub




Attribute VB_Name = "StatusPanel"
Attribute VB_Base = "0{8AA83548-7E38-4F48-A3B8-B418B38C56BD}{72DE159E-0326-489D-9CBC-C79486164117}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit

Dim loadingImages As Variant
Dim installDir As String
Dim currentTick As Integer
Dim lastSecond As Integer
Public userCanceled As Boolean
Dim proxy As Variant

Private Sub UserForm_Initialize()

userCanceled = False
'Set Me.BodyBackground.Picture = LoginScreen.BodyBackground.Picture
Set loadingImages = Nothing
installDir = ""
currentTick = 1
lastSecond = -1

End Sub

Public Sub setProxy(aProxy As Variant)

Set proxy = aProxy

End Sub

Public Sub setInstallDir(aDir As String)

installDir = aDir

End Sub

Private Sub UserForm_Activate()

Me.caption = proxy.getTranslator.GetTranslation("oracle_xml_publisher")
Me.statusMessage.caption = proxy.getTranslator.GetTranslation("fetching_data")
Me.CommandButton1.caption = proxy.getTranslator.GetTranslation("cancel")
userCanceled = False
currentTick = 1
lastSecond = -1

End Sub

Public Sub resetTick()

lastSecond = Second(Now)
currentTick = 1

End Sub

Public Sub displayTick()

If loadingImages Is Nothing Then

  Dim tick As Integer
  
  Set loadingImages = CreateObject("Scripting.Dictionary")
    
  For tick = 1 To 8
  
    Set loadingImages.Item(tick) = LoadPicture(installDir & "\loading" & tick & ".bmp")

  Next tick

End If
  
loadingImage.picture = loadingImages.Item(currentTick)
  
If Not lastSecond = Second(Now) Then

  lastSecond = Second(Now)
  currentTick = currentTick + 1
  
  If currentTick = 9 Then
    
    currentTick = 1
    
  End If

End If

Me.Repaint
  
End Sub

Public Sub displayMessage(message As String)

Me.statusMessage.caption = message

End Sub

Private Sub CommandButton1_Click()

userCanceled = True
Me.Hide

End Sub


Attribute VB_Name = "StatusPanelRTL"
Attribute VB_Base = "0{631A1458-F3F8-4330-A58D-E5D61D9F9518}{4CEF6349-E920-485C-86D5-E8105E82296D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit

Dim loadingImages As Variant
Dim installDir As String
Dim currentTick As Integer
Dim lastSecond As Integer
Public userCanceled As Boolean
Dim proxy As Variant

Private Sub UserForm_Initialize()

userCanceled = False
'Set Me.BodyBackground.Picture = LoginScreen.BodyBackground.Picture
Set loadingImages = Nothing
installDir = ""
currentTick = 1
lastSecond = -1

End Sub

Public Sub setProxy(aProxy As Variant)

Set proxy = aProxy

End Sub

Public Sub setInstallDir(aDir As String)

installDir = aDir

End Sub

Private Sub UserForm_Activate()

Me.RightToLeft = True

Me.caption = proxy.getTranslator.GetTranslation("oracle_xml_publisher")
Me.statusMessage.caption = proxy.getTranslator.GetTranslation("fetching_data")
Me.CommandButton1.caption = proxy.getTranslator.GetTranslation("cancel")
userCanceled = False
currentTick = 1
lastSecond = -1

End Sub

Public Sub resetTick()

lastSecond = Second(Now)
currentTick = 1

End Sub

Public Sub displayTick()

If loadingImages Is Nothing Then

  Dim tick As Integer
  
  Set loadingImages = CreateObject("Scripting.Dictionary")
    
  For tick = 1 To 8
  
    Set loadingImages.Item(tick) = LoadPicture(installDir & "\loading" & tick & ".bmp")

  Next tick

End If
  
loadingImage.picture = loadingImages.Item(currentTick)
  
If Not lastSecond = Second(Now) Then

  lastSecond = Second(Now)
  currentTick = currentTick + 1
  
  If currentTick = 9 Then
    
    currentTick = 1
    
  End If

End If

Me.Repaint
  
End Sub

Public Sub displayMessage(message As String)

Me.statusMessage.caption = message

End Sub

Private Sub CommandButton1_Click()

userCanceled = True
Me.Hide

End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Dim excelAnalyzers As Dictionary
Dim defaultExcelAnalyzer As ExcelDataAnalyzer
Dim activeExcelAnalyzer As ExcelDataAnalyzer

Public Function getExcelDataAnalyzer() As Variant

Set getExcelDataAnalyzer = activeExcelAnalyzer

End Function

Private Sub Workbook_Activate()
On Error GoTo REPORT_ACTIVATE_FAILED

activeExcelAnalyzer.GetDataAnalyzer.ReportActivated

If False Then
REPORT_ACTIVATE_FAILED:
  'ShowErrorMessage "Report Activation Error - " & Err.Description
End If

End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
On Error GoTo REPORT_CLOSE_FAILED

activeExcelAnalyzer.GetDataAnalyzer.ReportClosed

If False Then
REPORT_CLOSE_FAILED:
  'ShowErrorMessage "Report Close Error - " & Err.Description
End If

End Sub

Private Sub Workbook_Deactivate()
On Error GoTo REPORT_DEACTIVATE_FAILED

activeExcelAnalyzer.GetDataAnalyzer.ReportDeactivated

If False Then
REPORT_DEACTIVATE_FAILED:
  'ShowErrorMessage "Report Deactivation Error - " & Err.Description
End If

End Sub

Private Sub Workbook_Open()
On Error GoTo REPORT_OPEN_FAILED

Dim addinName As String

addinName = "XMLPReportAddin.xla"
'AddinConnect addinName, False
AddinConnect addinName, True

Me.Activate

Dim startTime As Long
Dim endTime As Long

startTime = GetTickCount

Set excelAnalyzers = New Dictionary
Set defaultExcelAnalyzer = Nothing
Set activeExcelAnalyzer = Nothing

Dim sheet As Object

For Each sheet In Sheets

  If TypeName(sheet) = "Worksheet" Then
 
    If startsWith(sheet.name, "XDO_HIDDEN") And (Not sheet.name = "XDO_HIDDEN") Then
    
      Dim newExcelAnalyzer As ExcelDataAnalyzer

      Set newExcelAnalyzer = New ExcelDataAnalyzer
      newExcelAnalyzer.ReopenSpreadsheetIfNecessary Me, sheet.name
      excelAnalyzers.Add ActiveSheet.name, newExcelAnalyzer
      
      If Not activeExcelAnalyzer Is Nothing Then
        
        activeExcelAnalyzer.GetDataAnalyzer.ReportDeactivated
      
      End If
      Set activeExcelAnalyzer = newExcelAnalyzer
      activeExcelAnalyzer.GetDataAnalyzer.ReportActivated
    
    End If
   
  End If

Next

Set defaultExcelAnalyzer = New ExcelDataAnalyzer

defaultExcelAnalyzer.ReopenSpreadsheetIfNecessary Me, "XDO_HIDDEN"

Set activeExcelAnalyzer = defaultExcelAnalyzer
excelAnalyzers.Add ActiveSheet.name, activeExcelAnalyzer
activeExcelAnalyzer.GetDataAnalyzer.ReportActivated

endTime = GetTickCount

'MsgBox "Report loading time: " & GetFormattedTime(startTime, endTime)

If False Then
REPORT_OPEN_FAILED:
  'ShowErrorMessage "Report Open Error - " & Err.Description
End If

End Sub

Public Sub OpenHiddenSheet(sheetName As String, xmlData As String, username As String, password As String)
On Error GoTo OPEN_WITH_HIDDEN_SHEET_FAILED

Dim newExcelAnalyzer As ExcelDataAnalyzer

Set newExcelAnalyzer = New ExcelDataAnalyzer

newExcelAnalyzer.ReopenSpreadsheetIfNecessary Me, sheetName, xmlData

excelAnalyzers.Add ActiveSheet.name, newExcelAnalyzer

activeExcelAnalyzer.GetDataAnalyzer.ReportDeactivated
Set activeExcelAnalyzer = newExcelAnalyzer
activeExcelAnalyzer.GetDataAnalyzer.ReportActivated

LoadActiveReport username, password

If False Then
OPEN_WITH_HIDDEN_SHEET_FAILED:
  'ShowErrorMessage "Hidden Sheet Open Error - " & Err.Description
  ShowErrorMessage "" '06/30/2008 by JT for bug5702324
End If

End Sub

Public Sub CreateNewHiddenSheet(appInfo As Object, reportServerWebDir As String, newReportPath As String, username As String, password As String, gatewayProxy As Object)
On Error GoTo CREATE_NEW_HIDDEN_SHEET_FAILED

' bug5702324 by JT 07/14/2009
Dim reportModel As Object

Set reportModel = CreateObject("XDOReportModel.Report")
reportModel.setAppInfo appInfo
reportModel.setReportServerWebDir reportServerWebDir
reportModel.setUsername username
reportModel.setPassword password
reportModel.setGatewayProxy gatewayProxy
reportModel.LoadReport newReportPath
Dim i As Integer
For i = 0 To excelAnalyzers.Count - 1
  If excelAnalyzers.Keys(i) = reportModel.GetReportName Then
    Exit Sub
  End If
Next
'----------------------------_


Dim serverEndpoint As String
Dim serverHost As String
Dim serverPort As String
Dim serverProtocol As String
Dim serverWebDir As String
Dim serverXMLPWebDir As String
Dim hiddenSheet As Worksheet
Dim newHiddenSheet As Worksheet
Dim newSheetName As String

' Create new hidden sheet
Set hiddenSheet = Sheets("XDO_HIDDEN")
newSheetName = "XDO_HIDDEN_" & (excelAnalyzers.Count + 1)
hiddenSheet.Visible = xlSheetVisible
hiddenSheet.Activate
hiddenSheet.Cells.Select
Selection.Copy
Set newHiddenSheet = ActiveWorkbook.Sheets.Add
newHiddenSheet.Activate
newHiddenSheet.Cells.Select
newHiddenSheet.Paste
newHiddenSheet.name = newSheetName
hiddenSheet.Visible = xlSheetHidden
newHiddenSheet.Visible = xlSheetHidden

' Server Info
serverEndpoint = appInfo.getReportServerProperty(reportServerWebDir, "Endpoint")
serverHost = appInfo.getReportServerProperty(reportServerWebDir, "Host")
serverPort = appInfo.getReportServerProperty(reportServerWebDir, "Port")
serverProtocol = appInfo.getReportServerProperty(reportServerWebDir, "Protocol")
serverWebDir = appInfo.getReportServerProperty(reportServerWebDir, "Webdir")
serverXMLPWebDir = appInfo.getReportServerProperty(reportServerWebDir, "XMLPServerWebdir")

newHiddenSheet.Range("C10").value = serverEndpoint
newHiddenSheet.Range("C5").value = serverHost
newHiddenSheet.Range("C6").value = serverPort
newHiddenSheet.Range("C16").value = serverProtocol
newHiddenSheet.Range("C11").value = serverWebDir
newHiddenSheet.Range("C13").value = serverXMLPWebDir
newHiddenSheet.Range("C7").value = newReportPath

' Create report model
Dim reportModel As Object

Set reportModel = CreateObject("XDOReportModel.Report")
reportModel.setAppInfo appInfo
reportModel.setReportServerWebDir reportServerWebDir
reportModel.setUsername username
reportModel.setPassword password
reportModel.setGatewayProxy gatewayProxy
reportModel.LoadReport newReportPath

' Report Name
newHiddenSheet.Range("C8").value = reportModel.GetReportName

' Report Parameters
Dim paramCount As Integer
Dim reportHeading As Range
Dim paramIndex As Integer

Set reportHeading = newHiddenSheet.Range("B19")

While Not reportHeading.value = "Report Parameters"

  Set reportHeading = reportHeading.Offset(1, 0)

Wend

Set reportHeading = reportHeading.Offset(2, 0)
paramCount = reportModel.getReportParameterCount

For paramIndex = 0 To (paramCount - 1)

  Dim reportParameter As Object
  
  Set reportParameter = reportModel.getReportParameterAtIndex(paramIndex)
  reportHeading.value = reportParameter.getParameterName
  reportHeading.Offset(0, 1).value = reportParameter.getParameterLabel
  reportHeading.Offset(0, 2).value = reportParameter.getValue
  reportHeading.Offset(0, 3).value = reportParameter.getLabel
  Set reportHeading = reportHeading.Offset(1, 0)

Next paramIndex

reportHeading.value = ""
reportHeading.Offset(0, 1).value = ""
reportHeading.Offset(0, 2).value = ""
reportHeading.Offset(0, 3).value = ""

' Report Data
Dim reportData As String

reportModel.setSelectedOutputFormat "xml"
reportData = reportModel.getReportDataAsString()

OpenHiddenSheet newSheetName, reportData, username, password

If False Then
CREATE_NEW_HIDDEN_SHEET_FAILED:
  'ShowErrorMessage "Create New Hidden Sheet Error - " & Err.Description
  ShowErrorMessage "" '06/30/2008 by JT for bug5702324
End If

End Sub

Private Sub Workbook_SheetActivate(ByVal sheet As Object)

If Not TypeName(sheet) = "Worksheet" Then

  Exit Sub
  
End If

If defaultExcelAnalyzer Is Nothing Then

  Exit Sub

End If

If activeExcelAnalyzer Is Nothing Then

  Exit Sub

End If

Dim currentReportName As String
Dim anExcelAnalyzer As ExcelDataAnalyzer

currentReportName = activeExcelAnalyzer.GetDataAnalyzer.GetReportName

If excelAnalyzers.Exists(sheet.name) Then

  ' Report data sheet
  Set anExcelAnalyzer = excelAnalyzers.Item(sheet.name)

Else

  ' Some unknown sheet
  Set anExcelAnalyzer = defaultExcelAnalyzer

End If

Dim newReportName As String

newReportName = anExcelAnalyzer.GetDataAnalyzer.GetReportName

If Not newReportName = currentReportName Then

  activeExcelAnalyzer.GetDataAnalyzer.ReportDeactivated
  Set activeExcelAnalyzer = anExcelAnalyzer
  activeExcelAnalyzer.GetDataAnalyzer.ReportActivated

End If

End Sub

Private Sub Workbook_SheetChange(ByVal sheet As Object, ByVal target As Range)

On Error GoTo SHEET_CHANGE_FAILED

If activeExcelAnalyzer Is Nothing Then

  Exit Sub
  
End If

If Not TypeName(sheet) = "Worksheet" Then

  Exit Sub
  
End If

If Not sheet.name = activeExcelAnalyzer.GetReportDataWorksheet.name Then

  Exit Sub
  
End If

activeExcelAnalyzer.RangeUpdated target

If False Then
SHEET_CHANGE_FAILED:
  'ShowErrorMessage "Report Range Update Error - " & Err.Description
End If

End Sub


Attribute VB_Name = "URLTranslationAgent"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim webDir As String
Dim downloader As FileDownloader

Private Sub Class_Initialize()

webDir = ""
Set downloader = New FileDownloader

End Sub

Public Sub setProxySettings(proSettings As ProxySettings)

downloader.setProxySettings proSettings

End Sub

Public Sub setWebDir(wDir As String)

webDir = wDir

End Sub

Private Function getConfigFileURL(locale As String) As String

getConfigFileURL = webDir & "/" & locale & ".xlf"

End Function

Public Function loadsFromFile() As Boolean

loadsFromFile = True

End Function

Public Function getXliff(locale As String) As String

If webDir = "" Then

getXliff = ""
Exit Function

End If

Dim configFileURL As String

configFileURL = getConfigFileURL(locale)

downloader.OpenConnection "GET", configFileURL, False
downloader.Send
 
If Not downloader.getStatus = 200 Then

  getXliff = ""
  Exit Function

End If
  
Dim fileSystemObject As Variant
Dim tmpFileName As String
Dim outputStream As Variant

Set fileSystemObject = CreateObject("Scripting.FileSystemObject")
tmpFileName = fileSystemObject.GetSpecialFolder(2) & "\" & locale & ".xlf"
Set outputStream = CreateObject("Adodb.Stream")
  
' adTypeBinary = 1
outputStream.Type = 1
outputStream.Open
outputStream.Write downloader.getResponseBody
' adSaveCreateOverWrite = 2
outputStream.savetofile tmpFileName, 2
outputStream.Close

getXliff = tmpFileName

End Function





Attribute VB_Name = "UploadReportTemplate"
Attribute VB_Base = "0{63C138C6-AA87-4D86-82B8-2EA23FA54297}{1AA226A9-0F1D-4CEE-A112-43DECB82C810}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim proxy As Variant
Dim templateName As String

Private Sub UserForm_Initialize()

Set proxy = Nothing
templateName = ""

End Sub


Private Sub UserForm_Activate()

Dim buttons As Collection

Set buttons = New Collection
buttons.Add Me.CommandButton1
buttons.Add Me.CommandButton2
spaceButtonsEvenly buttons, 0, Me.Width

Me.caption = proxy.getTranslator.GetTranslation("oracle_xml_publisher")
Me.CommandButton1.caption = proxy.getTranslator.GetTranslation("ok")
Me.CommandButton2.caption = proxy.getTranslator.GetTranslation("cancel")
Me.Label1.caption = proxy.getTranslator.GetTranslation("template_name")

templateName = ""

End Sub

Public Sub setProxy(aProxy As Variant)

Set proxy = aProxy

End Sub

Public Function getTemplateName() As String

getTemplateName = templateName

End Function

Public Sub setTemplateName(aName)

Me.TextBox1.Text = aName

End Sub

Private Sub CommandButton1_Click()

templateName = Me.TextBox1.Text
Me.Hide

End Sub

Private Sub CommandButton2_Click()

Me.Hide

End Sub


Attribute VB_Name = "UploadReportTemplateRTL"
Attribute VB_Base = "0{E459F752-3840-47AB-AC5C-E71448C55B75}{A8DA2504-BBB0-4AF5-92BB-397F910FDC75}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim proxy As Variant
Dim templateName As String

Private Sub UserForm_Initialize()

Set proxy = Nothing
templateName = ""

End Sub


Private Sub UserForm_Activate()

Dim buttons As Collection

Set buttons = New Collection
buttons.Add Me.CommandButton1
buttons.Add Me.CommandButton2
spaceButtonsEvenly buttons, 0, Me.Width

Me.RightToLeft = True
Me.caption = proxy.getTranslator.GetTranslation("oracle_xml_publisher")
Me.CommandButton1.caption = proxy.getTranslator.GetTranslation("ok")
Me.CommandButton2.caption = proxy.getTranslator.GetTranslation("cancel")
Me.Label1.caption = proxy.getTranslator.GetTranslation("template_name")

templateName = ""

End Sub

Public Sub setProxy(aProxy As Variant)

Set proxy = aProxy

End Sub

Public Function getTemplateName() As String

getTemplateName = templateName

End Function

Public Sub setTemplateName(aName)

Me.TextBox1.Text = aName

End Sub

Private Sub CommandButton1_Click()

templateName = Me.TextBox1.Text
Me.Hide

End Sub

Private Sub CommandButton2_Click()

Me.Hide

End Sub



Attribute VB_Name = "Utilities"
Option Explicit

Public UseMsgBoxRTL As Boolean
Public ProductName As String

Declare Function GetTickCount Lib "kernel32" () As Long

Public Sub PrintMenuBarState()

On Error Resume Next

Dim prodMenu As Office.CommandBarPopup
Dim outputStr As String
Dim control As Object

Set prodMenu = Application.CommandBars("Worksheet Menu Bar").Controls("Oracle XML Publisher").Controls("Analyzer for Excel")

outputStr = "MenuBarState" & vbNewLine

For Each control In prodMenu.Controls

outputStr = outputStr & control.caption & " = " & control.enabled & vbNewLine

Next

MsgBox outputStr

End Sub

Public Sub AddinConnect(addinName As String, Optional installState As Boolean = True)

Dim anAddin As Object

For Each anAddin In Application.AddIns

  If StrConv(anAddin.name, VbStrConv.vbUpperCase) = StrConv(addinName, VbStrConv.vbUpperCase) Then

    anAddin.Installed = installState
    Exit For

  End If

Next

End Sub

Public Function AddinExists(addinName As String) As Boolean

Dim anAddin As Object

For Each anAddin In Application.AddIns

  If StrConv(anAddin.name, VbStrConv.vbUpperCase) = StrConv(addinName, VbStrConv.vbUpperCase) Then

    AddinExists = True
    Exit Function

  End If

Next

AddinExists = False

End Function

Public Sub ReopenActiveWorkbook(regKey As String)

Dim progPath As String
Dim reportPath As String
Dim returnCode As Double
Dim waitTime As String
Dim installationDir As String
  
installationDir = GetRegistry("HKEY_LOCAL_MACHINE", regKey, "Install_Dir")

ActiveWorkbook.Save
waitTime = "5"
progPath = installationDir & "\ExcelLauncher.exe"
reportPath = ActiveWorkbook.FullName
returnCode = Shell(progPath & " " & waitTime & " " & Chr(34) & reportPath & Chr(34), vbNormalFocus)
'ActiveWorkbook.Close
Application.Quit

End Sub

Public Function IsVersionGreater(version1 As String, version2 As String) As Boolean

On Error GoTo CANNOT_COMPARE_VERSIONS

Dim appInfo As Object

Set appInfo = CreateObject("XDOUtilities.ApplicationInfo")
IsVersionGreater = appInfo.IsVersionGreater(version1, version2)

If False Then
CANNOT_COMPARE_VERSIONS:
  IsVersionGreater = True
End If

End Function

Public Function ShowMsgBox(message As String, Optional messageType As VbMsgBoxStyle = vbInformation, Optional showYesNo As Boolean = False, Optional someWidth As Integer = 226.5, Optional someHeight As Integer = 152.25)

On Error GoTo USE_SIMPLE_MSG_BOX

Dim msgBoxObj As Object
Dim msgBoxReply As String
Dim msgTypeStr As String

If messageType = vbInformation Then

  msgTypeStr = "information"

ElseIf messageType = vbCritical Then

  msgTypeStr = "critical"

ElseIf messageType = vbExclamation Then

  msgTypeStr = "exclamation"

Else

  msgTypeStr = ""

End If

Set msgBoxObj = CreateObject("XDOUtilities.XDOMsgBox")
msgBoxReply = msgBoxObj.showMsg2(ProductName, message, msgTypeStr, showYesNo, UseMsgBoxRTL)

If msgBoxReply = "yes" Then

  ShowMsgBox = vbYes
  
ElseIf msgBoxReply = "no" Then

  ShowMsgBox = vbNo

ElseIf msgBoxReply = "ok" Then

  ShowMsgBox = vbOK

End If

If False Then

USE_SIMPLE_MSG_BOX:
    If UseMsgBoxRTL Then
      MsgBox2RTL.SetShowYesNo showYesNo
      MsgBox2RTL.SetMessage message
      MsgBox2RTL.SetMessageType messageType
      MsgBox2RTL.Width = someWidth
      MsgBox2RTL.Height = someHeight
      MsgBox2RTL.message.Height = someHeight - 80
      MsgBox2RTL.message.Width = someWidth - 82
      MsgBox2RTL.YesButton.Top = someHeight - 56
      MsgBox2RTL.NoButton.Top = someHeight - 56
      MsgBox2RTL.YesButton.Left = (MsgBox2.Width / 2) - 10 - MsgBox2.YesButton.Width
      MsgBox2RTL.NoButton.Left = (MsgBox2.Width / 2) + 10
      MsgBox2RTL.OKButton.Top = someHeight - 56
      MsgBox2RTL.OKButton.Left = (MsgBox2.Width / 2) - (MsgBox2.OKButton.Width / 2)
      MsgBox2RTL.Show
      ShowMsgBox = MsgBox2RTL.GetReply
    Else
      MsgBox2.SetShowYesNo showYesNo
      MsgBox2.SetMessage message
      MsgBox2.SetMessageType messageType
      MsgBox2.Width = someWidth
      MsgBox2.Height = someHeight
      MsgBox2.message.Height = someHeight - 80
      MsgBox2.message.Width = someWidth - 82
      MsgBox2.YesButton.Top = someHeight - 56
      MsgBox2.NoButton.Top = someHeight - 56
      MsgBox2.YesButton.Left = (MsgBox2.Width / 2) - 10 - MsgBox2.YesButton.Width
      MsgBox2.NoButton.Left = (MsgBox2.Width / 2) + 10
      MsgBox2.OKButton.Top = someHeight - 56
      MsgBox2.OKButton.Left = (MsgBox2.Width / 2) - (MsgBox2.OKButton.Width / 2)
      MsgBox2.Show
      ShowMsgBox = MsgBox2.GetReply
    End If

End If

End Function

Public Sub ShowErrorMessage(errorMessage As String)

ShowMsgBox "Analyzer for Excel Error:" & vbNewLine & errorMessage, vbCritical

End Sub

Public Sub LoadActiveReport(username As String, password As String)

On Error GoTo NOT_VALID_REPORT

Dim excelAnalyzer As Object
Dim dAnalyzer As Object

Set excelAnalyzer = ActiveWorkbook.getExcelDataAnalyzer
Set dAnalyzer = excelAnalyzer.GetDataAnalyzer
dAnalyzer.LoadReport username, password
dAnalyzer.GetReportController.GetLoginListener.AfterActivation

NOT_VALID_REPORT:
End Sub

Public Sub ShowUserLogin()

On Error GoTo NOT_VALID_REPORT2

Dim excelAnalyzer As Object
Dim dAnalyzer As Object

Set excelAnalyzer = ActiveWorkbook.getExcelDataAnalyzer
Set dAnalyzer = excelAnalyzer.GetDataAnalyzer
dAnalyzer.GetReportController.GetLoginListener.ButtonClicked Nothing

NOT_VALID_REPORT2:
End Sub

Public Function GetControl(cmdBarName As String, controlIndex As Integer) As Office.CommandBarControl

On Error GoTo GET_CONTROL_FAILED

Dim cmdBar As Office.CommandBar
Dim currentIndex As Integer
Dim control As Office.CommandBarControl

Set cmdBar = Application.CommandBars(cmdBarName)

currentIndex = 1

For Each control In cmdBar.Controls

  If currentIndex = controlIndex Then
  
    Set GetControl = control
    Exit Function
    
  End If
  currentIndex = currentIndex + 1

Next

GET_CONTROL_FAILED:
Set GetControl = Nothing

End Function

Public Function GetFormattedTime(startTime As Long, endTime As Long) As String

Dim inSeconds As Boolean
Dim totalTime As Double
Dim timeStr As String

inSeconds = True
totalTime = (endTime - startTime) / 1000
timeStr = ""
    
If totalTime > 60 Then
      
  inSeconds = False
  totalTime = totalTime / 60
  timeStr = totalTime & " minutes"

Else
  
  totalTime = Round(totalTime, 2)
  timeStr = totalTime & " seconds"

End If

GetFormattedTime = timeStr

End Function

Public Function escapeXML(obj As Variant) As String

Dim xmlStr As String

xmlStr = "" & obj

xmlStr = Replace(xmlStr, "&", "&amp;")
xmlStr = Replace(xmlStr, "<", "&lt;")
xmlStr = Replace(xmlStr, ">", "&gt;")
xmlStr = Replace(xmlStr, "'", "&apos;")
xmlStr = Replace(xmlStr, Chr(34), "&quot;")

escapeXML = xmlStr

End Function

Public Sub spaceButtonsEvenly(buttons As Collection, parentX As Integer, parentWidth As Integer)

Dim totalButtonWidth As Integer
Dim aButton As Object
Dim buttonCount As Integer
Dim buttonSpacingD As Double
Dim buttonSpacingI As Integer
Dim currentSpacingX As Integer
Dim previousButton As Object

DoEvents

totalButtonWidth = 0
buttonCount = 0
For Each aButton In buttons

  totalButtonWidth = totalButtonWidth + aButton.Width
  buttonCount = buttonCount + 1
  
Next

buttonSpacingD = (parentWidth - totalButtonWidth) / (buttonCount + 1)
buttonSpacingI = Math.Round(buttonSpacingD)
currentSpacingX = 0
Set previousButton = Nothing

currentSpacingX = parentX
For Each aButton In buttons

  currentSpacingX = currentSpacingX + buttonSpacingI
  If Not previousButton Is Nothing Then
  
    currentSpacingX = currentSpacingX + previousButton.Width
  
  End If
  aButton.Left = currentSpacingX
  Set previousButton = aButton
  
Next

End Sub

Public Function startsWith(searchStr As String, pattern As String) As Boolean

Dim index As Integer

index = InStr(searchStr, pattern)

If index = 1 Then

  startsWith = True

Else

  startsWith = False
  
End If

End Function

Attribute VB_Name = "WebServiceAdapter"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim serverHost As String
Dim serverPort As String
Dim serviceEndpoint As String
Dim serviceWebDir As String
Dim wsdlURL As String
Dim urlPrefix As String
Dim urlSuffix As String
Dim serviceTemplatesURL As String
Dim dataSources As Collection
Dim serviceGatewayProxy As Object
Dim rawXML As String
Dim xmlDocument As MSXML2.DOMDocument30
Dim simpleOutput As Variant
Dim useRTLStatusPanel As Boolean

Private Sub Class_Initialize()

Set dataSources = New Collection
Set serviceGatewayProxy = Nothing
useRTLStatusPanel = False

End Sub

Public Sub setServiceDetails(protocol As String, host As String, port As String, endpoint As String, webDir As String)

serverHost = host
serverPort = port
serviceEndpoint = endpoint
serviceWebDir = webDir

urlPrefix = protocol & "://" & serverHost & ":" & serverPort
wsdlURL = urlPrefix & serviceEndpoint
serviceTemplatesURL = urlPrefix & webDir & "/templates/"

End Sub

Public Function getServiceGatewayProxy() As Object

Set getServiceGatewayProxy = serviceGatewayProxy

End Function

Public Sub setServiceGatewayClass(serviceGatewayClass As String, appFolder As String)

Set serviceGatewayProxy = CreateObject(serviceGatewayClass)

If Not appFolder = "" Then

  serviceGatewayProxy.debugToFile appFolder

End If

End Sub

Public Function getErrorMessage() As String

getErrorMessage = serviceGatewayProxy.getErrorMessage

End Function

Public Sub setUseRTLStatusPanel(flag As Boolean)

useRTLStatusPanel = flag

End Sub

Public Sub setProxySettings(pSettings As ProxySettings)

On Error GoTo SET_PROXY_SETTINGS_ERROR

If pSettings.getSetting("Proxy_UseIE") = "False" Then

  Dim proxyHost As String
  Dim proxyPort As String
  Dim proxyUser As String
  Dim proxyPassword As String
  Dim proxyNonHosts As String
  
  proxyHost = pSettings.getSetting("Proxy_Host")
  proxyPort = pSettings.getSetting("Proxy_Port")
  proxyUser = pSettings.getSetting("Proxy_User")
  proxyPassword = pSettings.getSetting("Proxy_Password")
  proxyNonHosts = pSettings.getSetting("Proxy_Nonhosts")

  serviceGatewayProxy.setProxy proxyHost, proxyPort, proxyUser, proxyPassword, proxyNonHosts

Else

  Dim proxyEnabled As String
  Dim serverStr As String
  Dim proxyOverride As String
  
  proxyEnabled = pSettings.getSetting("Proxy_IE_Enabled")
  serverStr = pSettings.getSetting("Proxy_IE_Server")
  proxyOverride = pSettings.getSetting("Proxy_IE_Override")

  If proxyEnabled = "True" Then
  
    serviceGatewayProxy.setupProxy serverStr, proxyOverride
    
  End If

End If

SET_PROXY_SETTINGS_ERROR:
End Sub

Public Sub invokeCallableService(className As String, methodName As String, params As Collection, async As Boolean)

Dim messengerXML As String

messengerXML = "<?xml version='1.0' encoding='UTF-8'?>" & vbNewLine

messengerXML = messengerXML & "<xdoservice xmlns='http://xmlns.oracle.com/oxp/service'><service>" & _
                              "<method " & _
                              "callable='" & className & "' " & _
                              "name='" & methodName & "' />" & _
                              "<params>"

Dim paramValue As Variant
For Each paramValue In params

  messengerXML = messengerXML & "<param value='" & escapeXML(paramValue) & "' />"

Next

messengerXML = messengerXML & "</params></service></xdoservice>"

invokeServiceGatewayProxy messengerXML, async


End Sub

Public Sub invokeWebService(wsdlLocation As String, portName As String, methodName As String, params As Collection, sendRawXML As Boolean, async As Boolean)

Dim messengerXML As String

messengerXML = "<?xml version='1.0' encoding='UTF-8'?>" & vbNewLine

messengerXML = messengerXML & "<xdoservice xmlns='http://xmlns.oracle.com/oxp/service'><service>" & _
                              "<method " & _
                              "send-raw-xml='" & LCase(sendRawXML) & "' " & _
                              "name='" & methodName & "' " & _
                              "port='" & portName & "' " & _
                              "wsdl='" & wsdlLocation & "' />" & _
                              "<params>"

Dim paramValue As Variant
For Each paramValue In params

  messengerXML = messengerXML & "<param value='" & escapeXML(paramValue) & "' />"

Next

messengerXML = messengerXML & "</params></service></xdoservice>"

invokeServiceGatewayProxy messengerXML, async

End Sub

Public Sub invokeServiceTemplate(serviceTemplate As String)

End Sub

Private Sub invokeServiceGatewayProxy(incomingXML As String, async As Boolean)

Dim rawDocument As MSXML2.DOMDocument30
Dim rawXMLElement As MSXML2.IXMLDOMNode
Dim outputNodes As MSXML2.IXMLDOMNodeList
Dim returnedXML As String

If async Then

  serviceGatewayProxy.replyToXMLAsync wsdlURL, incomingXML

  ' Show busy dialog
  
If useRTLStatusPanel Then
  
  StatusPanelRTL.resetTick
  StatusPanelRTL.Show

Else

  StatusPanel.resetTick
  StatusPanel.Show

End If

  While Not serviceGatewayProxy.getMessageStatus = 1
  
    If useRTLStatusPanel Then
  
      StatusPanelRTL.displayTick

    Else
    
      StatusPanel.displayTick

    End If

    DoEvents
    
    Dim userCanceled As Boolean
    
    If useRTLStatusPanel Then
      
        userCanceled = StatusPanelRTL.userCanceled
    
    Else
        
        userCanceled = StatusPanel.userCanceled
    
    End If
  
    If userCanceled Then
    
      returnedXML = ""
      Set simpleOutput = Nothing
      
      Exit Sub
    
    End If
  
  Wend

  If useRTLStatusPanel Then
      
    StatusPanelRTL.Hide
  
  Else
  
    StatusPanel.Hide
  
  End If
  
  returnedXML = serviceGatewayProxy.getMessageReply

Else

  returnedXML = serviceGatewayProxy.replyToXML(wsdlURL, incomingXML)

End If

If returnedXML = "" Then

  Exit Sub

End If

Set rawDocument = New MSXML2.DOMDocument30
rawDocument.validateOnParse = False
rawDocument.async = False
rawDocument.setProperty "SelectionLanguage", "XPath"
rawDocument.LoadXML returnedXML

Set rawXMLElement = rawDocument.selectSingleNode("/service_response/raw_data")
Set outputNodes = rawDocument.selectNodes("/service_response/outputs/output")

If rawXMLElement Is Nothing Then

  rawXML = ""
  Set xmlDocument = Nothing

Else

  rawXML = rawXMLElement.Text

  Set xmlDocument = New MSXML2.DOMDocument30
  xmlDocument.validateOnParse = False
  xmlDocument.async = False
  xmlDocument.setProperty "SelectionLanguage", "XPath"
  xmlDocument.LoadXML rawXML

End If

Dim index As Integer
Dim nodeCount As Integer

Set simpleOutput = CreateObject("Scripting.Dictionary")
nodeCount = outputNodes.Length

For index = 0 To (nodeCount - 1)

  Dim outputNode As MSXML2.IXMLDOMNode
  Dim nameNode As MSXML2.IXMLDOMNode
  Dim valueNode As MSXML2.IXMLDOMNode
  
  Set outputNode = outputNodes.Item(index)
  Set nameNode = outputNode.selectSingleNode("./param_name")
  Set valueNode = outputNode.selectSingleNode("./param_value")
  
  simpleOutput.Add nameNode.Text, valueNode.Text

Next

End Sub

Public Sub registerDataSourceForURL(dataSourceName As String, dataSourceURL As String)

End Sub

Public Sub registerDataSourceForXML(dataSourceName As String, xmlContent As String)

End Sub

Public Function getOutput() As Variant

Set getOutput = simpleOutput

End Function

Public Function Encrypt(str As String, key As String) As String

Encrypt = serviceGatewayProxy.Encrypt(str, key)

End Function

Public Function Decrypt(str As String, key As String) As String

Decrypt = serviceGatewayProxy.Decrypt(str, key)

End Function

Public Function inflateXML(encodedData As String) As String

inflateXML = serviceGatewayProxy.inflateXML(encodedData)

End Function

Public Function getOutputAsRawXML() As String

getOutputAsRawXML = rawXML

End Function

Public Function getOutputForXPath(xpath As String) As Collection

Dim selectedNodes As MSXML2.IXMLDOMNodeList
Dim nodeCount As Integer
Dim index As Integer
Dim items As Collection

Set items = New Collection
Set selectedNodes = xmlDocument.selectNodes(xpath)
nodeCount = selectedNodes.Length

For index = 0 To (nodeCount - 1)

  Dim node As MSXML2.IXMLDOMNode
  
  Set node = selectedNodes.Item(index)
  items.Add node.Text

Next index

Set getOutputForXPath = items

End Function

Public Function getSingleOutputForXPath(xpath As String) As String

Dim selectedNode As MSXML2.IXMLDOMNode

Set selectedNode = xmlDocument.selectSingleNode(xpath)

getSingleOutputForXPath = selectedNode.Text

End Function





Attribute VB_Name = "WorksheetTranslationAgent"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim hiddenSheet As Worksheet
Dim fileSystem As Variant

Private Sub Class_Initialize()

Set hiddenSheet = Nothing

End Sub

Public Sub setHiddenSheet(sheet As Worksheet)

Set hiddenSheet = sheet

End Sub

Public Function loadsFromFile() As Boolean

loadsFromFile = False

End Function

Public Function getXliff(locale As String) As String

Dim storedLocale As String

storedLocale = hiddenSheet.Range("C9").value

If Not storedLocale = locale Then

  getXliff = ""
  Exit Function
  
End If

Dim xliffStream As Variant
Dim chunkLocale As Range
Dim chunkRange As Range
Dim reportHeading As Range

Set xliffStream = CreateObject("Adodb.Stream")

' adTypeText = 2
xliffStream.Type = 2
xliffStream.Open

Set reportHeading = hiddenSheet.Range("B19")

While Not reportHeading.value = "Xliff Data"

  Set reportHeading = reportHeading.Offset(1, 0)

Wend

Set chunkLocale = reportHeading.Offset(2, 0)
Set chunkRange = chunkLocale.Offset(0, 1)

While Not chunkRange.value = ""

  xliffStream.WriteText chunkRange.value
  
  'chunkRange.Clear
  'chunkLocale.Clear
  Set chunkRange = chunkRange.Offset(1, 0)
  Set chunkLocale = chunkLocale.Offset(1, 0)

Wend

Dim xliff As String
Dim firstChar As Integer
  
xliffStream.Position = 0
xliff = xliffStream.ReadText
xliffStream.Close
  
firstChar = Asc(xliff)

' I don't know why, but the first character in the xml string is
' appearing as ? when using with other locales than en-US
While Not firstChar = 60

  xliff = Right(xliff, Len(xliff) - 1)
  firstChar = Asc(xliff)

Wend

getXliff = xliff

End Function





Attribute VB_Name = "XMLTable"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Dim table As Object
Dim tableDocument As MSXML2.DOMDocument30
Dim tableRows As MSXML2.IXMLDOMNodeList
Dim currentColumns As MSXML2.IXMLDOMNodeList
Dim currentTableCell As MSXML2.IXMLDOMNode

Private Sub Class_Initialize()

Set table = Nothing
Set tableDocument = Nothing
Set tableRows = Nothing
Set currentColumns = Nothing
Set currentTableCell = Nothing

End Sub

Public Sub LoadXML(xmlData As String)

On Error GoTo XMLTABLE_NOT_FOUND:

Set table = CreateObject("XDOUtilities.XMLTable")
table.LoadXML xmlData

If False Then
XMLTABLE_NOT_FOUND:
  
  Set table = Nothing
  Set tableDocument = New MSXML2.DOMDocument30
  tableDocument.validateOnParse = False
  tableDocument.async = False
  tableDocument.setProperty "SelectionLanguage", "XPath"
  tableDocument.LoadXML xmlData

  If (tableDocument.parseError.errorCode <> 0) Then
  
    Dim myErr
    Set myErr = tableDocument.parseError
    'Error message, no need to externalize
    ShowMsgBox "XML Report parsing error: " & myErr.reason, vbCritical
    Exit Sub
  
  End If

  Set tableRows = tableDocument.selectNodes("/ROWSET/ROW")

End If

End Sub

Public Function GetRowCount() As Integer

If Not table Is Nothing Then
  
  GetRowCount = table.GetRowCount

Else

  GetRowCount = tableRows.Length

End If

End Function

Public Function GetCurrentColumnCount() As Integer

If Not table Is Nothing Then
        
  GetCurrentColumnCount = table.GetCurrentColumnCount

Else

  GetCurrentColumnCount = currentColumns.Length

End If

End Function

Public Function NextColumn() As Boolean

If Not table Is Nothing Then
    
  NextColumn = table.NextColumn

Else

  Set currentTableCell = currentColumns.NextNode
  
  If currentTableCell Is Nothing Then
  
    NextColumn = False
  
  Else
  
    NextColumn = True
  
  End If
  
End If

End Function

Public Function GetCurrentColumnName() As String

If Not table Is Nothing Then
    
  GetCurrentColumnName = table.GetCurrentColumnName

Else

  GetCurrentColumnName = currentTableCell.nodeName

End If

End Function

Public Function GetCurrentColumnValue() As String

If Not table Is Nothing Then
    
  GetCurrentColumnValue = table.GetCurrentColumnValue

Else

  GetCurrentColumnValue = currentTableCell.Text

End If

End Function

Public Function NextRow() As Boolean

If Not table Is Nothing Then
    
  NextRow = table.NextRow

Else

  Dim currentRow As MSXML2.IXMLDOMNode
  
  Set currentRow = tableRows.NextNode
  
  If currentRow Is Nothing Then
  
    NextRow = False
    
  Else
  
    Set currentColumns = currentRow.childNodes
    NextRow = True
  
  End If

End If

End Function



Attribute VB_Name = "XliffTranslator"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim xliffDocument As MSXML2.DOMDocument30
Dim currentLocale As String
Dim translationAgents As Collection

Private Sub Class_Initialize()

Set translationAgents = New Collection
Set xliffDocument = Nothing

End Sub

Public Sub setCurrentLocale(locale As String)

currentLocale = locale

loadTranslations

End Sub

Public Function getCurrentLocale() As String

getCurrentLocale = currentLocale

End Function

Public Function getFallbackLocale(aLocale As String) As String

If aLocale = "nb-NO" Or aLocale = "nn-NO" Then

  ' Map both Bokmal and Nynorsk to language code 'no'
  getFallbackLocale = "no"

Else

  getFallbackLocale = Left(aLocale, 2)
    'fix for bug6667561 by JT 03/10/2010
  If getFallbackLocale = "en" Then
    getFallbackLocale = "en-US"
  End If


End If

End Function

Public Function isHebrew(aLocale As String) As Boolean

If startsWith(aLocale, "he") Or startsWith(aLocale, "iw") Then

  isHebrew = True

Else

  isHebrew = False

End If

End Function

Public Function isArabic(aLocale As String) As Boolean

If startsWith(aLocale, "ar") Then

  isArabic = True

Else

  isArabic = False

End If

End Function

Public Function isRTL() As Boolean

Dim lowerCaseLocale As String

lowerCaseLocale = LCase(currentLocale)

If isArabic(lowerCaseLocale) Or isHebrew(lowerCaseLocale) Then

  isRTL = True
  
Else

  isRTL = False
  
End If

End Function

Private Sub loadTranslations()

Dim transAgent As Variant

For Each transAgent In translationAgents

  Dim xliff As String
    
  xliff = transAgent.getXliff(currentLocale)
    
  If Not xliff = "" Then
    
    loadXliff xliff, transAgent
    Exit Sub
  
  Else
    
    Dim fallbackLocale As String
    
    fallbackLocale = getFallbackLocale(currentLocale)
    xliff = transAgent.getXliff(fallbackLocale)
  
    If Not xliff = "" Then
    
      'MsgBox "using fallback locale: " & fallbackLocale
      loadXliff xliff, transAgent
      Exit Sub
  
    End If
  
  End If

Next

'Error message, no need to externalize
ShowMsgBox "Translation file not found for locale: '" & currentLocale & "'!", vbCritical
Err.Raise vbObjectError + 513, TypeName(Me), "Translation file not found for locale: '" & currentLocale & "'!"

End Sub

Private Sub loadXliff(xliff As String, transAgent As Variant)
  
Set xliffDocument = New MSXML2.DOMDocument30
xliffDocument.validateOnParse = False
xliffDocument.async = False
xliffDocument.setProperty "SelectionLanguage", "XPath"

If transAgent.loadsFromFile Then

  xliffDocument.Load xliff

Else

  xliffDocument.LoadXML xliff

End If

If (xliffDocument.parseError.errorCode <> 0) Then
  
  Dim myErr
  Set myErr = xliffDocument.parseError
  'Error message, no need to externalize
  ShowMsgBox "Xliff Translator parsing error: " & myErr.reason, vbCritical
  Set xliffDocument = Nothing
  Exit Sub
  
End If

End Sub

Public Function GetTranslation(key As String) As String

If xliffDocument Is Nothing Then

  GetTranslation = key
  Exit Function

End If

Dim translatedNode As MSXML2.IXMLDOMNode
Dim xpath As String

xpath = ".//trans-unit[@id='" & key & "']/target"

Set translatedNode = xliffDocument.selectSingleNode(xpath)

If translatedNode Is Nothing Then

  GetTranslation = key

Else

  GetTranslation = translatedNode.Text

End If

End Function

Public Function GetTranslations(keyPrefix As String) As Variant

Dim translatedNodes As MSXML2.IXMLDOMNodeList
Dim oneNode As MSXML2.IXMLDOMNode
Dim xpath As String
Dim translations As Variant

Set translations = CreateObject("Scripting.Dictionary")
xpath = ".//trans-unit[starts-with(@id, '" & keyPrefix & "')]"

Set translatedNodes = xliffDocument.selectNodes(xpath)

For Each oneNode In translatedNodes

  Dim id As String
  Dim val As String
  
  id = oneNode.selectSingleNode("@id").Text
  val = oneNode.selectSingleNode("./target").Text

  translations.Add id, val
  
Next

Set GetTranslations = translations

End Function

Public Sub addTranslationAgent(transAgent As Variant)

translationAgents.Add transAgent

End Sub






' InQuest injected base64 decoded content
' Szjej
' "{-jY^
' Szjej
' Szjej
' j{%j
' ^u+Z
' .+-zw
' .+-zw
' /z{Gjwez

INQUEST-PP=macro
