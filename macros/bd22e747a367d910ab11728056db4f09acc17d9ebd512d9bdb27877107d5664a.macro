Attribute VB_Name = "Add_Hyperlinks"
Sub HyperShapes()

    Dim Sh As Shape
    Dim i As Integer
    i = 1
    
           For Each Sh In activeSheet.Shapes
        
            If Sh.Name = "CL0-Cover Sheet" Then
                activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'CL0-Cover Sheet'!G10"
                        
            ElseIf Sh.Name = "User Guide" Then
                activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'User Guide'!B3"
                
            ElseIf Sh.Name = "New Hires" Then
            activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'New Hires'!E4"
            
            ElseIf Sh.Name = "Status Changes" Then
            activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'Status Changes'!E4"
            
            ElseIf Sh.Name = "Salary Changes" Then
            activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'Salary Changes'!E4"
            
            ElseIf Sh.Name = "Employee Info Changes" Then
            activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'Employee Info Changes'!E4"
            
            ElseIf Sh.Name = "Transfers" Then
            activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'Transfers'!E4"
            
            ElseIf Sh.Name = "Current Pay Adjust" Then
            activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'Current Pay Adjust'!E4"
            
            ElseIf Sh.Name = "Bonus Taxation" Then
            activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'Bonus Taxation'!E4"
            
            ElseIf Sh.Name = "Separate Pay" Then
            activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'Separate Pay'!E4"
            
            ElseIf Sh.Name = "Lump Sum" Then
            activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'Lump Sum'!E4"
            
            ElseIf Sh.Name = "Manual Payment Update" Then
            activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'Manual Payment Update'!E4"
            
            ElseIf Sh.Name = "Employee Options" Then
            activeSheet.Hyperlinks.Add Anchor:=Sh, Address:="", SubAddress:="'Employee Options'!E4"
                   
            End If
    
        Next
            
End Sub

Sub EverySheet()

Sheets("CL0-Cover Sheet").Select
Call HyperShapes

Sheets("User Guide").Select
Call HyperShapes

Sheets("New Hires").Select
Call HyperShapes

Sheets("Status Changes").Select
Call HyperShapes

Sheets("Salary Changes").Select
Call HyperShapes

Sheets("Employee Info Changes").Select
Call HyperShapes

Sheets("Transfers").Select
Call HyperShapes

Sheets("Current Pay Adjust").Select
Call HyperShapes

Sheets("Bonus Taxation").Select
Call HyperShapes

Sheets("Separate Pay").Select
Call HyperShapes

Sheets("Manual Payment Update").Select
Call HyperShapes

Sheets("Lump Sum").Select
Call HyperShapes


Sheets("Employee Options").Select
Call HyperShapes


End Sub
Attribute VB_Name = "AllSheets"
Sub CheckSheets()

    'Checks to see which sheets are hidden and hides the corresponding buttons associated with those sheets (Does NOT apply to cover sheet)
    
    On Error Resume Next
    Dim Sh As Shape
    Dim i As Integer
    
    
    Dim x As Integer
    Dim ws As Worksheet
    Dim WS_Count As Integer
    WS_Count = ActiveWorkbook.Worksheets.Count
    x = 80
    For i = 2 To WS_Count
        Sheets(i).Select
        
        If Not Sheets("New Hires").Visible Then
            activeSheet.Shapes("New Hires").Visible = False
            Sheets("CL0-Cover Sheet").Range("G19:J19").Font.Color = RGB(215, 215, 215)
        Else
            activeSheet.Shapes("New Hires").Visible = True
            Sheets("CL0-Cover Sheet").Range("G19:J19").Font.Color = RGB(0, 32, 96)
        End If
        
        If Not Worksheets("Status Changes").Visible Then
            activeSheet.Shapes("Status Changes").Visible = False
            Sheets("CL0-Cover Sheet").Range("G20:J20").Font.Color = RGB(215, 215, 215)
        Else:
            activeSheet.Shapes("Status Changes").Visible = True
            Sheets("CL0-Cover Sheet").Range("G20:J20").Font.Color = RGB(0, 32, 96)
        End If
        
        If Not Worksheets("Salary Changes").Visible Then
            activeSheet.Shapes("Salary Changes").Visible = False
            Sheets("CL0-Cover Sheet").Range("G21:J21").Font.Color = RGB(215, 215, 215)
        Else
            activeSheet.Shapes("Salary Changes").Visible = True
            Sheets("CL0-Cover Sheet").Range("G21:J21").Font.Color = RGB(0, 32, 96)
        End If
        
        If Not Sheets("Employee Info Changes").Visible Then
            activeSheet.Shapes("Employee Info Changes").Visible = False
            Sheets("CL0-Cover Sheet").Range("G22:J22").Font.Color = RGB(215, 215, 215)
        Else
            activeSheet.Shapes("Employee Info Changes").Visible = True
            Sheets("CL0-Cover Sheet").Range("G22:J22").Font.Color = RGB(0, 32, 96)
        End If
        
        If Not Worksheets("Transfers").Visible Then
            activeSheet.Shapes("Transfers").Visible = False
            Sheets("CL0-Cover Sheet").Range("G23:J23").Font.Color = RGB(215, 215, 215)
        Else
            activeSheet.Shapes("Transfers").Visible = True
            Sheets("CL0-Cover Sheet").Range("G23:J23").Font.Color = RGB(0, 32, 96)
        End If
        
        If Not Worksheets("Current Pay Hours").Visible Then
            activeSheet.Shapes("Current Pay Hours").Visible = False
            Sheets("CL0-Cover Sheet").Range("G25:J25").Font.Color = RGB(215, 215, 215)
        Else
            activeSheet.Shapes("Current Pay Hours").Visible = True
            Sheets("CL0-Cover Sheet").Range("G25:J25").Font.Color = RGB(0, 32, 96)
        End If
        
        If Not Worksheets("Current Pay Adjust").Visible Then
            activeSheet.Shapes("Current Pay Adjust").Visible = False
            Sheets("CL0-Cover Sheet").Range("G26:J26").Font.Color = RGB(215, 215, 215)
        Else:
            activeSheet.Shapes("Current Pay Adjust").Visible = True
            Sheets("CL0-Cover Sheet").Range("G26:J26").Font.Color = RGB(0, 32, 96)
        End If
        
        If Not Worksheets("Separate Pay").Visible Then
            activeSheet.Shapes("Separate Pay").Visible = False
            Sheets("CL0-Cover Sheet").Range("G28:J28").Font.Color = RGB(215, 215, 215)
        Else:
            activeSheet.Shapes("Separate Pay").Visible = True
            Sheets("CL0-Cover Sheet").Range("G28:J28").Font.Color = RGB(0, 32, 96)
        End If
        
        If Not Worksheets("Lump Sum").Visible Then
            activeSheet.Shapes("Lump Sum").Visible = False
            Sheets("CL0-Cover Sheet").Range("G29:J29").Font.Color = RGB(215, 215, 215)
        Else:
            activeSheet.Shapes("Lump Sum").Visible = True
            Sheets("CL0-Cover Sheet").Range("G29:J29").Font.Color = RGB(0, 32, 96)
        End If
        
        If Not Worksheets("Employee Options").Visible Then
            activeSheet.Shapes("Employee Options").Visible = False
            Sheets("CL0-Cover Sheet").Range("G31:J31").Font.Color = RGB(215, 215, 215)
        Else:
            activeSheet.Shapes("Employee Options").Visible = True
            Sheets("CL0-Cover Sheet").Range("G31:J31").Font.Color = RGB(0, 32, 96)
        End If
        
        If Not Worksheets("Manual Payment Update").Visible Then
            activeSheet.Shapes("Manual Payment Update").Visible = False
            Sheets("CL0-Cover Sheet").Range("G30:J30").Font.Color = RGB(215, 215, 215)
        Else:
            activeSheet.Shapes("Manual Payment Update").Visible = True
            Range("G30:J30").Font.Color = RGB(0, 32, 96)
        End If
        
        If Not Worksheets("Bonus Taxation").Visible Then
            activeSheet.Shapes("Bonus Taxation").Visible = False
            Sheets("CL0-Cover Sheet").Range("G27:J27").Font.Color = RGB(215, 215, 215)
        Else:
            activeSheet.Shapes("Bonus Taxation").Visible = True
            Sheets("CL0-Cover Sheet").Range("G27:J27").Font.Color = RGB(0, 32, 96)
        End If
    
        
        
        activeSheet.Shapes("Reset").Visible = True
        
        
        Sheets(1).Select
    
    Next i

End Sub

Sub MoveButtons()

    'Moves all visible buttons to eliminate empty spaces
    
    On Error Resume Next
    Dim Sh As Shape
    Dim i As Integer
    
    
    Dim x As Integer
    Dim ws As Worksheet
    Dim WS_Count As Integer
    WS_Count = ActiveWorkbook.Worksheets.Count
    x = 80
    
    For i = 2 To WS_Count
        Sheets(i).Select
        n = 35
        
        activeSheet.Shapes("User Guide").Top = x + n
        
        If activeSheet.Shapes("New Hires").Visible = True Then
            activeSheet.Shapes("New Hires").Top = x + n
            n = n + 35
        End If
        
        If activeSheet.Shapes("Status Changes").Visible = True Then
            activeSheet.Shapes("Status Changes").Top = x + n
            n = n + 35
        End If
        
        If activeSheet.Shapes("Salary Changes").Visible = True Then
            activeSheet.Shapes("Salary Changes").Top = x + n
            n = n + 35
        End If
        
        If activeSheet.Shapes("Employee Info Changes").Visible = True Then
            activeSheet.Shapes("Employee Info Changes").Top = x + n
            n = n + 35
        End If
        
        If activeSheet.Shapes("Transfers").Visible = True Then
            activeSheet.Shapes("Transfers").Top = x + n
            n = n + 35
        End If
        
        If activeSheet.Shapes("Current Pay Hours").Visible = True Then
            activeSheet.Shapes("Current Pay Hours").Top = x + n
            n = n + 35
        End If
        
        If activeSheet.Shapes("Current Pay Adjust").Visible = True Then
            activeSheet.Shapes("Current Pay Adjust").Top = x + n
            n = n + 35
        End If
        
        If activeSheet.Shapes("Bonus Taxation").Visible = True Then
            activeSheet.Shapes("Bonus Taxation").Top = x + n
            n = n + 35
        End If
        
        If activeSheet.Shapes("Separate Pay").Visible = True Then
            activeSheet.Shapes("Separate Pay").Top = x + n
            n = n + 35
        End If
        
        If activeSheet.Shapes("Lump Sum").Visible = True Then
            activeSheet.Shapes("Lump Sum").Top = x + n
            n = n + 35
        End If
        
        If activeSheet.Shapes("Manual Payment Update").Visible = True Then
            activeSheet.Shapes("Manual Payment Update").Top = x + n
            n = n + 35
        End If
        
        If activeSheet.Shapes("Employee Options").Visible = True Then
            activeSheet.Shapes("Employee Options").Top = x + n
            n = n + 35
        End If
        
        
        activeSheet.Shapes("Reset").Top = x + n
        
        Sheets(1).Select
    Next i

End Sub

Sub UnlockColBC()

'Dim wsr As Worksheet
'
'Set wsr = Sheets("Current Pay Hours")
'
'    wsr.Unprotect Password:="11"
'        wsr.Range("B:B").Locked = False
'        wsr.Range("C:C").Locked = False
'
'    wsr.Protect Password:="11", _
'        UserInterfaceOnly:=True, _
'        AllowFormattingCells:=True, _
'        AllowFormattingColumns:=True, _
'        AllowFormattingRows:=True
'        wsr.EnableSelection = xlUnlockedCells
'        wsr.EnableSelection = xlNoRestrictions
End Sub


Sub SBSmode()

    Sheets("New Hires").Columns("AC:AC").Hidden = True
    Sheets("Transfers").Columns("L:L").Hidden = True
    Sheets("Current Pay Hours").Columns("N:N").Hidden = True
    Sheets("Bonus Taxation").Columns("P:P").Hidden = True
    Sheets("Separate Pay").Columns("P:P").Hidden = True
    Sheets("Lump Sum").Columns("O:O").Hidden = True
    Sheets("Manual Payment Update").Columns("O:O").Hidden = True

End Sub

Sub MAJNATmode()
    
    Sheets("New Hires").Columns("AC:AC").Hidden = False
    Sheets("Transfers").Columns("L:L").Hidden = False
    Sheets("Current Pay Hours").Columns("N:N").Hidden = False
    Sheets("Bonus Taxation").Columns("P:P").Hidden = False
    Sheets("Separate Pay").Columns("P:P").Hidden = False
    Sheets("Lump Sum").Columns("O:O").Hidden = False
    Sheets("Manual Payment Update").Columns("O:O").Hidden = False

End Sub

Sub checkStatusChg(Target)
    
    Dim TargetCell As Range
    
    Set general = New general
    
    Application.EnableEvents = False
    On Error GoTo ExitProc
    
    For Each TargetCell In Target
        If UCase(Trim(activeSheet.Range(general.NumToExcelLetter(11) & TargetCell.row).value)) = UCase(Trim("I  - Inactive")) Or UCase(Trim(activeSheet.Range(general.NumToExcelLetter(11) & TargetCell.row).value)) = UCase(Trim("T - Terminated")) Then
            If UCase(Trim(activeSheet.Range(general.NumToExcelLetter(13) & TargetCell.row).value)) = "" Then
                activeSheet.Range(general.NumToExcelLetter(12) & TargetCell.row).Interior.ColorIndex = 0
                activeSheet.Range(general.NumToExcelLetter(13) & TargetCell.row).Interior.ColorIndex = 22
            End If
        ElseIf UCase(Trim(activeSheet.Range(general.NumToExcelLetter(11) & TargetCell.row).value)) = UCase("A - Active") Then
            If UCase(Trim(activeSheet.Range(general.NumToExcelLetter(12) & TargetCell.row).value)) = "" Then
                activeSheet.Range(general.NumToExcelLetter(12) & TargetCell.row).Interior.ColorIndex = 22
                activeSheet.Range(general.NumToExcelLetter(13) & TargetCell.row).Interior.ColorIndex = 0
            End If
        Else
            activeSheet.Range(general.NumToExcelLetter(12) & TargetCell.row).Interior.ColorIndex = 0
            activeSheet.Range(general.NumToExcelLetter(13) & TargetCell.row).Interior.ColorIndex = 0
        End If
        
        
        If (UCase(Trim(activeSheet.Range(general.NumToExcelLetter(11) & TargetCell.row).value)) = UCase(Trim("I  - Inactive")) Or UCase(Trim(activeSheet.Range(general.NumToExcelLetter(11) & TargetCell.row).value)) = UCase(Trim("T - Terminated"))) And UCase(Trim(activeSheet.Range(general.NumToExcelLetter(12) & TargetCell.row).value)) <> "" Then
            MsgBox "Hire Date cannot be entered when the employee's Status is being changed to ""I - Inactive"" or ""T - Terminated""", vbInformation, "Status Changes"
            activeSheet.Range(general.NumToExcelLetter(12) & TargetCell.row).value = ""
        ElseIf UCase(Trim(activeSheet.Range(general.NumToExcelLetter(11) & TargetCell.row).value)) = UCase(Trim("A - Active")) And UCase(Trim(activeSheet.Range(general.NumToExcelLetter(13) & TargetCell.row).value)) <> "" Then
            MsgBox "Last Day Paid cannot be entered when the employee's Status is being changed to ""A - Active""", vbInformation, "Status Changes"
            activeSheet.Range(general.NumToExcelLetter(13) & TargetCell.row).value = ""
        End If
        
    Next TargetCell
    
    
ExitProc:
    Application.EnableEvents = True
    Debug.Print CStr(err.Description)

End Sub

Sub checkTransfers(Target)
    
    Dim TargetCell As Range
    
    Set general = New general
    
    Application.EnableEvents = False
    On Error GoTo ExitProc
    

    For Each TargetCell In Target
        If UCase(Trim(activeSheet.Range(general.NumToExcelLetter(11) & TargetCell.row).value)) = "" And UCase(Trim(activeSheet.Range(general.NumToExcelLetter(13) & TargetCell.row).value)) = "" And UCase(Trim(activeSheet.Range(general.NumToExcelLetter(17) & TargetCell.row).value)) = "" Then
            If TargetCell.Column >= 11 And UCase(Trim(activeSheet.Range(general.NumToExcelLetter(16) & TargetCell.row).value)) = "NO" Then
                Call OneTaxMsg
                activeSheet.Range(general.NumToExcelLetter(16) & TargetCell.row).value = "Yes"
            End If
        End If
    Next TargetCell

    
ExitProc:
    Application.EnableEvents = True
    Debug.Print CStr(err.Description)

End Sub

Sub checkSalaryChg(Target)
    
    Dim TargetCell As Range
    
    Set general = New general
    
    Application.EnableEvents = False
    On Error GoTo ExitProc
    
    For Each TargetCell In Target
        If UCase(Trim(activeSheet.Range("K" & TargetCell.row).value)) = UCase(Trim("H - Hourly")) Or UCase(Trim(activeSheet.Range("K" & TargetCell.row).value)) = UCase(Trim("E - Exception Hourly")) Or UCase(Trim(activeSheet.Range("K" & TargetCell.row).value)) = UCase(Trim("V - Variable")) Or UCase(Trim(activeSheet.Range("K" & TargetCell.row).value)) = UCase(Trim("D - Daily")) Then
            Application.EnableEvents = False
            If activeSheet.Range("M" & TargetCell.row).value <> "" And activeSheet.Range("M" & TargetCell.row).value <> "~" Then MsgBox "Salary Per Pay cannot be entered with the chosen Payroll Type", vbInformation, "Salary Changes"
            rateValue = activeSheet.Range("N" & TargetCell.row).value
            If rateValue = "~" Then rateValue = ""
            activeSheet.Range("M" & TargetCell.row & ":N" & TargetCell.row).ClearContents
            activeSheet.Range("M" & TargetCell.row).value = "~"
            activeSheet.Range("N" & TargetCell.row).value = rateValue
            If activeSheet.Range("N" & TargetCell.row).value = "" Then
                activeSheet.Range("N" & TargetCell.row).Interior.ColorIndex = 22
                activeSheet.Range("M" & TargetCell.row).Interior.ColorIndex = 0
            End If
            Application.EnableEvents = True
        ElseIf UCase(Trim(activeSheet.Range("K" & TargetCell.row).value)) = UCase(Trim("S - Salaried")) Or UCase(Trim(activeSheet.Range("K" & TargetCell.row).value)) = UCase(Trim("A - Salary + Commission")) Or UCase(Trim(activeSheet.Range("K" & TargetCell.row).value)) = UCase(Trim("C - Commission")) Then
            Application.EnableEvents = False
            If activeSheet.Range("N" & TargetCell.row).value <> "" And activeSheet.Range("N" & TargetCell.row).value <> "~" Then MsgBox "Rate cannot be entered with the chosen Payroll Type", vbInformation, "Salary Changes"
            salaryValue = activeSheet.Range("M" & TargetCell.row).value
            If salaryValue = "~" Then salaryValue = ""
            activeSheet.Range("M" & TargetCell.row & ":N" & TargetCell.row).ClearContents
            activeSheet.Range("N" & TargetCell.row).value = "~"
            activeSheet.Range("M" & TargetCell.row).value = salaryValue
            If activeSheet.Range("M" & TargetCell.row).value = "" Then
                activeSheet.Range("M" & TargetCell.row).Interior.ColorIndex = 22
                activeSheet.Range("N" & TargetCell.row).Interior.ColorIndex = 0
            End If
            Application.EnableEvents = True
        End If
        
        If activeSheet.Range("K" & TargetCell.row).value = "" Then
            Application.EnableEvents = False
            If activeSheet.Range("M" & TargetCell.row).value = "~" Then activeSheet.Range("M" & TargetCell.row).ClearContents
            If activeSheet.Range("N" & TargetCell.row).value = "~" Then activeSheet.Range("N" & TargetCell.row).ClearContents
            Application.EnableEvents = True
        End If
        
        
    Next TargetCell
    
    
ExitProc:
    Application.EnableEvents = True
    Debug.Print CStr(err.Description)

End Sub

Sub checkNewHire(Target)
    
    Dim TargetCell As Range
    
    Set general = New general
    
    Application.EnableEvents = False
    On Error GoTo ExitProc
    
    For Each TargetCell In Target
        If UCase(Trim(activeSheet.Range("Y" & TargetCell.row).value)) = UCase(Trim("H - Hourly")) Or UCase(Trim(activeSheet.Range("Y" & TargetCell.row).value)) = UCase(Trim("E - Exception Hourly")) Or UCase(Trim(activeSheet.Range("Y" & TargetCell.row).value)) = UCase(Trim("V - Variable")) Or UCase(Trim(activeSheet.Range("Y" & TargetCell.row).value)) = UCase(Trim("D - Daily")) Then
            Application.EnableEvents = False
            If activeSheet.Range("AB" & TargetCell.row).value <> "" Then MsgBox "Salary Per Pay cannot be entered with the chosen Payroll Type", vbInformation, "New Hires"
            If activeSheet.Range("Z" & TargetCell.row).value = "" Then
                activeSheet.Range("Z" & TargetCell.row).Interior.ColorIndex = 22
                activeSheet.Range("AB" & TargetCell.row).Interior.ColorIndex = 0
            End If
            activeSheet.Range("AB" & TargetCell.row).value = ""
            Application.EnableEvents = True
        ElseIf UCase(Trim(activeSheet.Range("Y" & TargetCell.row).value)) = UCase(Trim("S - Salaried")) Or UCase(Trim(activeSheet.Range("Y" & TargetCell.row).value)) = UCase(Trim("A - Salary + Commission")) Or UCase(Trim(activeSheet.Range("Y" & TargetCell.row).value)) = UCase(Trim("C - Commission")) Then
            Application.EnableEvents = False
            If activeSheet.Range("Z" & TargetCell.row).value <> "" Then MsgBox "Rate cannot be entered with the chosen Payroll Type", vbInformation, "New Hires"
            If activeSheet.Range("AB" & TargetCell.row).value = "" Then
                activeSheet.Range("AB" & TargetCell.row).Interior.ColorIndex = 22
                activeSheet.Range("Z" & TargetCell.row).Interior.ColorIndex = 0
            End If
            activeSheet.Range("Z" & TargetCell.row).value = ""
            Application.EnableEvents = True
        End If
        
        If activeSheet.Range("AD" & TargetCell.row).value = "C - Cheque" Then
            If (activeSheet.Range("AE" & TargetCell.row).value <> "") Or _
                (activeSheet.Range("AF" & TargetCell.row).value <> "") Or _
                (activeSheet.Range("AG" & TargetCell.row).value <> "") Then
                Application.EnableEvents = False
                MsgBox "Please change the payment type to ""D - Deposit"" in order to enter banking information", vbInformation, "New Hires"
                activeSheet.Range("AE" & TargetCell.row).ClearContents
                activeSheet.Range("AF" & TargetCell.row).ClearContents
                activeSheet.Range("AG" & TargetCell.row).ClearContents
                
                activeSheet.Range("AE" & TargetCell.row).Interior.ColorIndex = 0
                activeSheet.Range("AF" & TargetCell.row).Interior.ColorIndex = 0
                activeSheet.Range("AG" & TargetCell.row).Interior.ColorIndex = 0
                Application.EnableEvents = True
            End If
        ElseIf activeSheet.Range("AD" & TargetCell.row).value = "D - Deposit" Then
            Application.EnableEvents = False
            If activeSheet.Range("AE" & TargetCell.row).value = "" Then activeSheet.Range("AE" & TargetCell.row).Interior.ColorIndex = 22
            If activeSheet.Range("AF" & TargetCell.row).value = "" Then activeSheet.Range("AF" & TargetCell.row).Interior.ColorIndex = 22
            If activeSheet.Range("AG" & TargetCell.row).value = "" Then activeSheet.Range("AG" & TargetCell.row).Interior.ColorIndex = 22
            Application.EnableEvents = True
        Else
            Application.EnableEvents = False
            activeSheet.Range("AE" & TargetCell.row).Interior.ColorIndex = 0
            activeSheet.Range("AF" & TargetCell.row).Interior.ColorIndex = 0
            activeSheet.Range("AG" & TargetCell.row).Interior.ColorIndex = 0
            Application.EnableEvents = True
        End If
        
        If UCase(Trim(activeSheet.Range(general.NumToExcelLetter(24) & TargetCell.row).value)) = UCase(Trim("I  - Inactive")) Or UCase(Trim(activeSheet.Range(general.NumToExcelLetter(24) & TargetCell.row).value)) = UCase(Trim("T - Terminated")) Then
            If UCase(Trim(activeSheet.Range(general.NumToExcelLetter(38) & TargetCell.row).value)) = "" Then
                activeSheet.Range(general.NumToExcelLetter(38) & TargetCell.row).Interior.ColorIndex = 22
            End If
        ElseIf UCase(Trim(activeSheet.Range(general.NumToExcelLetter(24) & TargetCell.row).value)) = UCase("A - Active") Then
            If UCase(Trim(activeSheet.Range(general.NumToExcelLetter(38) & TargetCell.row).value)) = "" Then
                activeSheet.Range(general.NumToExcelLetter(38) & TargetCell.row).Interior.ColorIndex = 0
            End If
        Else
            activeSheet.Range(general.NumToExcelLetter(38) & TargetCell.row).Interior.ColorIndex = 0
        End If
        
    Next TargetCell
    
    
ExitProc:
    Application.EnableEvents = True
    Debug.Print CStr(err.Description)

End Sub

Sub checkEmpInfo(Target)
    
    Dim TargetCell As Range
    
    Set general = New general
    
    Application.EnableEvents = False
    On Error GoTo ExitProc
    
    For Each TargetCell In Target
        If activeSheet.Range("AE" & TargetCell.row).value = "C - Cheque" Then
            If (activeSheet.Range("AF" & TargetCell.row).value <> "" And activeSheet.Range("AF" & TargetCell.row).value <> "~") Or _
                (activeSheet.Range("AG" & TargetCell.row).value <> "" And activeSheet.Range("AG" & TargetCell.row).value <> "~") Or _
                (activeSheet.Range("AH" & TargetCell.row).value <> "" And activeSheet.Range("AH" & TargetCell.row).value <> "~") _
                Then MsgBox "Please change the payment type to ""D - Deposit"" in order to enter banking information", vbInformation, "Employee Info Changes"
            Application.EnableEvents = False
            activeSheet.Range("AF" & TargetCell.row).value = "~"
            activeSheet.Range("AG" & TargetCell.row).value = "~"
            activeSheet.Range("AH" & TargetCell.row).value = "~"
            
            activeSheet.Range("AF" & TargetCell.row).Interior.ColorIndex = 0
            activeSheet.Range("AG" & TargetCell.row).Interior.ColorIndex = 0
            activeSheet.Range("AH" & TargetCell.row).Interior.ColorIndex = 0
            Application.EnableEvents = True
        End If
        
        
        If activeSheet.Range("AE" & TargetCell.row).value = "D - Deposit" Then
            Application.EnableEvents = False
            If activeSheet.Range("AF" & TargetCell.row).value = "~" Then activeSheet.Range("AF" & TargetCell.row).ClearContents
            If activeSheet.Range("AG" & TargetCell.row).value = "~" Then activeSheet.Range("AG" & TargetCell.row).ClearContents
            If activeSheet.Range("AH" & TargetCell.row).value = "~" Then activeSheet.Range("AH" & TargetCell.row).ClearContents
            
           
            If activeSheet.Range("AF" & TargetCell.row).value = "" Then activeSheet.Range("AF" & TargetCell.row).Interior.ColorIndex = 22
            If activeSheet.Range("AG" & TargetCell.row).value = "" Then activeSheet.Range("AG" & TargetCell.row).Interior.ColorIndex = 22
            If activeSheet.Range("AH" & TargetCell.row).value = "" Then activeSheet.Range("AH" & TargetCell.row).Interior.ColorIndex = 22

            Application.EnableEvents = True
        ElseIf activeSheet.Range("AE" & TargetCell.row).value = "" Then
            Application.EnableEvents = False
            If activeSheet.Range("AF" & TargetCell.row).value = "~" Then activeSheet.Range("AF" & TargetCell.row).ClearContents
            If activeSheet.Range("AG" & TargetCell.row).value = "~" Then activeSheet.Range("AG" & TargetCell.row).ClearContents
            If activeSheet.Range("AH" & TargetCell.row).value = "~" Then activeSheet.Range("AH" & TargetCell.row).ClearContents
            
           
            activeSheet.Range("AF" & TargetCell.row).Interior.ColorIndex = 0
            activeSheet.Range("AG" & TargetCell.row).Interior.ColorIndex = 0
            activeSheet.Range("AH" & TargetCell.row).Interior.ColorIndex = 0

            Application.EnableEvents = True
        End If
        
        If (activeSheet.Range("AF" & TargetCell.row).value <> "" Or activeSheet.Range("AG" & TargetCell.row).value <> "" Or activeSheet.Range("AH" & TargetCell.row).value <> "") And activeSheet.Range("AE" & TargetCell.row).value = "" Then
            activeSheet.Range("AE" & TargetCell.row).Interior.ColorIndex = 22
        Else
            activeSheet.Range("AE" & TargetCell.row).Interior.ColorIndex = 0
        End If
        
    Next TargetCell
    
    
ExitProc:
    Application.EnableEvents = True
    Debug.Print CStr(err.Description)

End Sub

Attribute VB_Name = "ApplicationSettings"
' ##############################################################################################################
'
'   Module - ApplicationSettings
'
' ##############################################################################################################

Public Type SheetValues
    sheetName As String
    originalValues As Dictionary
    shadowValues As Dictionary
    valuesRange As Range
End Type

Public activeSheetValues As SheetValues
Public ValidSheets As Collection
'Public originalValuesLoaded As Boolean

Private Function GetTargetRange(sheetParam As String) As Range
    Dim general As general:             Set general = New general
    On Error Resume Next
    
    Dim lastRow As Long:                lastRow = general.lastRow(Worksheets(sheetParam))
    Dim lastColumn As String:           lastColumn = general.NumToExcelLetter(general.lastColumn(Worksheets(sheetParam)))
    Dim Target As Range:                Set Target = Worksheets(sheetParam).Range("B4:" & lastColumn & lastRow)
    
    Set GetTargetRange = Target
End Function

Public Sub SaveOriginalValues(currentSheet As SheetValues)
'    Stop
    Set currentSheet.originalValues = Nothing
    Set currentSheet.originalValues = New Dictionary
    Set currentSheet.valuesRange = GetTargetRange(currentSheet.sheetName)
    
    Dim cell As Range
    On Error Resume Next
    
    For Each cell In currentSheet.valuesRange
        Set currentSheet.originalValues(cell.Address) = cell.value
    Next
    
End Sub

Public Sub SaveOriginalAndShadowValues(currentSheet As SheetValues)
'    Stop
    Set currentSheet.shadowValues = Nothing
    Set currentSheet.shadowValues = New Dictionary
    Set currentSheet.shadowValues = CopyToShadowValues(currentSheet)
    
    Set currentSheet.originalValues = Nothing
    Set currentSheet.originalValues = New Dictionary
    Set currentSheet.valuesRange = GetTargetRange(currentSheet.sheetName)
    
    Dim cell As Range
    On Error Resume Next
    
    For Each cell In currentSheet.valuesRange
        Set currentSheet.originalValues(cell.Address) = cell.value
    Next
End Sub

Public Function GetOriginalValues(currentSheet As SheetValues, ByVal Target As Range) As Dictionary
    Dim oldValues As New Dictionary

    Dim cell As Range
    For Each cell In Target
        Set oldValues(cell.Address) = currentSheet.originalValues(cell.Address)
    Next
    
    Set GetOriginalValues = oldValues
    
End Function

Public Function GetShadowValues(currentSheet As SheetValues, ByVal Target As Range) As Dictionary
    Dim shadowValues As New Dictionary

    Dim cell As Range
    For Each cell In Target
        Set shadowValues(cell.Address) = currentSheet.shadowValues(cell.Address)
    Next
    
    Set GetShadowValues = shadowValues
End Function

Public Function GetSheetValues(sheetName As String) As SheetValues
    If Not CBool(StrComp(sheetName, activeSheetValues.sheetName, vbTextCompare)) Then
        GetSheetValues = activeSheetValues
    End If
End Function

Public Function Contains(col As Variant, key As Variant) As Boolean
Dim obj As Variant
On Error GoTo err
    Contains = True
    obj = col(key)
    Exit Function
    
err:
    Contains = False
End Function

Public Sub SetValidSheets()
    Set ValidSheets = New Collection
    ValidSheets.Add "Status Changes", "Status Changes"
    ValidSheets.Add "Salary Changes", "Salary Changes"
    ValidSheets.Add "Employee Info Changes", "Employee Info Changes"
    ValidSheets.Add "Transfers", "Transfers"
    ValidSheets.Add "Current Pay Hours TS", "Current Pay Hours TS"
    ValidSheets.Add "Current Pay Hours", "Current Pay Hours"
    ValidSheets.Add "Current Pay Adjust", "Current Pay Adjust"
    ValidSheets.Add "Bonus Taxation", "Bonus Taxation"
    ValidSheets.Add "Separate Pay", "Separate Pay"
    ValidSheets.Add "Lump Sum", "Lump Sum"
    ValidSheets.Add "Manual Payment Update", "Manual Payment Update"
    ValidSheets.Add "Employee Options", "Employee Options"
End Sub

Public Sub LoadSheetValues(activeSheetName As String)
    SetValidSheets
    
    If Contains(ValidSheets, activeSheetName) = True Then
        activeSheetValues.sheetName = activeSheetName
        Set activeSheetValues.originalValues = New Dictionary
        SaveOriginalValues activeSheetValues
    End If
End Sub

Private Function CopyToShadowValues(activeSheet As SheetValues) As Dictionary
    Set shadowValues = New Dictionary
    Dim key As Variant
    
    For Each key In activeSheet.originalValues.Keys()
        shadowValues.Add key, activeSheet.originalValues(key)
    Next key
    
    shadowValues.CompareMode = activeSheet.originalValues.CompareMode
    
    Set CopyToShadowValues = shadowValues
End Function

Public Function CreateSheetValuesItem(sheetName As String)
    Dim thisSheetValuesItem As SheetValues
    thisSheetValuesItem.sheetName = sheetName

    Dim thisSheetValuesRange As Range
    Set thisSheetValuesRange = GetTargetRange(sheetName)
    
    Set thisSheetValuesItem.originalValues = New Dictionary
    SaveOriginalValues thisSheetValuesItem
End Function

Public Sub TestRange()
    Dim oldValues As New Dictionary

    Debug.Print activeSheetValues.sheetName

    Dim i
    For i = 0 To activeSheetValues.originalValues.Count - 1
        Debug.Print activeSheetValues.originalValues.Keys()(i), activeSheetValues.originalValues.Items()(i)
    Next i
End Sub

Public Sub BlockNavigation()
    LockInterface
    Excel.Application.OnKey "^{PGDN}", ""
    Excel.Application.OnKey "^{PGUP}", ""
Exit_Proc:
    On Error Resume Next
    UnlockInterface
    Exit Sub
Err_Hnd:
    VBA.MsgBox VBA.err.Description, m_lButtons_c, m_sTitle_c & CStr(VBA.err.Number), VBA.err.HelpFile, VBA.err.HelpContext
    Resume Exit_Proc
End Sub

Public Sub ReleaseNavigation()
    LockInterface
    Excel.Application.OnKey "^{PGDN}"
    Excel.Application.OnKey "^{PGUP}"
Exit_Proc:
    On Error Resume Next
    UnlockInterface
    Exit Sub
Err_Hnd:
    VBA.MsgBox VBA.err.Description, m_lButtons_c, m_sTitle_c & CStr(VBA.err.Number), VBA.err.HelpFile, VBA.err.HelpContext
    Resume Exit_Proc
End Sub
Attribute VB_Name = "CalendarForm"
Attribute VB_Base = "0{DFCE8743-E900-40F6-854A-EB21FF7AF25C}{D46DD948-5DA2-46FF-A79A-F6135D29CD87}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' CalendarForm
' Developed by Trevor Eyre
' trevoreyre@gmail.com
' v1.5.2 - 1.7.2016
'
' This custom date picker can be used by importing the CalendarForm.frm file into
' your VBA project. It is called exclusively through the GetDate function. For
' instructions on how to call on the CalendarForm, skip to the GetDate function
' documentation after the Global Variables section.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Contributors
'
' Graham Mayor, graham@gmayor.com, www.gmayor.com
'   -Fix for userform sizing incorrectly in Word 2013
'
' Greg Maxey, gmaxey@mvps.org, gregmaxey.mvps.org/word_tips.htm
'   -Fix for leap year bug on years divisible by 100
'   -Moved all initialization code to separate sub to simplify GetDate function
'   -Various code reorganization and optimizations
'
' Marc Meketon, marc.meketon@gmail.com
'   -Fully qualify "Control" declarations as "MSForms.Control" for compatibility
'       with Access
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Overview
'
' The goal in creating this form was first and foremost to overcome the monstrosity that
' is the Microsoft MonthView control. If you're reading this, you probably already know
' what I'm talking about. Many others have been in my place and have come up with their
' own date pickers to solve this problem. So why yet another custom date picker?
'
' I was most interested in the following features:
'   -Ease of use. I wanted a completely self-contained form that could be imported into
'       any VBA project and used without any additional coding.
'   -Simple, attractive design. While a lot of custom date pickers on the internet look
'       good and work well, none of them quite nailed it for me in terms of style and
'       UI design.
'   -Fully customizable functionality and look. I tried to include as many of the
'       options from the MonthView control as I could, without getting too messy.
'
' Since none of the date pickers I have been able to find in all my searching have quite
' completed my checklist, here we are! Now my hope is that some other tired soul may
' also benefit from my labors.
'
' If you encounter any bugs, or have any great ideas or feature requests that could
' improve this bad boy, please send me an email.
'
' What's new in v1.5.2:
'   -Bug fix: Userform not sizing properly in Word 2013
'   -Bug fix: Minimum font size not being preserved correctly
'   -Bug fix: Replaced WorksheetFunction.Max with custom Max function for compatibility
'       with other Office programs
'
' (For a full changelog, known bugs, and future enhancements, scroll to the bottom)
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Global Variables
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

'These two Enums are used in the GetDate function for the user to select the start day
'of the week, and the behavior of the week numbers. These are used in place of the
'Excel constants vbDayOfWeek and vbFirstWeekOfYear in order to avoid dealing with
'system time, which is an option in both of those. Otherwise the values are identical.
Public Enum calDayOfWeek
    Sunday = 1
    Monday = 2
    Tuesday = 3
    Wednesday = 4
    Thursday = 5
    Friday = 6
    Saturday = 7
End Enum

Public Enum calFirstWeekOfYear      'Controls how the week numbers are calculated and displayed
    FirstJan1 = 1                   'The week with January 1st is always counted as week 1
    FirstFourDays = 2               'The first week in January that has at least four days in it is
                                        'counted as week 1. This calculation will change depending
                                        'on the setting used for first day of the week. The ISO
                                        'standard is calculating week 1 as the first week in January
                                        'with four days with Monday being the first day of the week.
    FirstFullWeek = 3               'The first week in January with a full week is counted as week 1.
                                        'Like the FirstFourDays setting, this calculation will change
                                        'depending on the first day of the week used.
End Enum

Private UserformEventsEnabled As Boolean    'Controls userform events
Private DateOut As Date                     'The date returned from the CalendarForm
Private SelectedDateIn As Date              'The initial selected date, as well as the date currently selected by the
                                                'user if the Okay button is enabled
Private OkayEnabled As Boolean              'Stores whether Okay button is enabled
Private TodayEnabled As Boolean             'Stores whether Today button is enabled
Private MinDate As Date                     'Minimum date set by user
Private MaxDate As Date                     'Maximum date set by user
Private cmbYearMin As Long                  'Current lower bounds of year combobox. Not necessarily restricted to this min
Private cmbYearMax As Long                  'Current upper bounds of year combobox. Not necessarily restricted to this max
Private StartWeek As VbDayOfWeek            'First day of week in calendar
Private WeekOneOfYear As VbFirstWeekOfYear  'First week of year when setting week numbers
Private HoverControlName As String          'Name of the date label that is currently being hovered over. Used when returning
                                                'the hovered control to its original color
Private HoverControlColor As Long           'Original color of the date label that is currently being hovered over
Private RatioToResize As Double             'Ratio to resize elements of userform. This is set by the DateFontSize argument
                                                'in the GetDate function
Private bgDateColor As Long                 'Color of date label backgrounds
Private bgDateHoverColor As Long            'Color of date label backgrounds when hovering over
Private bgDateSelectedColor As Long         'Color of selected date label background
Private lblDateColor As Long                'Font color of date labels
Private lblDatePrevMonthColor As Long       'Font color of trailing month date labels
Private lblDateTodayColor As Long           'Font color of today's date
Private lblDateSatColor As Long             'Font color of Saturday date labels
Private lblDateSunColor As Long             'Font color of Sunday date labels


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GetDate
'
' This function is the point of entry into the CalendarForm. It controls EVERYTHING.
' Every argument is optional, meaning your function call can be as simple as:
'
'   MyDateVariable = CalendarForm.GetDate
'
' That's all there is to it. The calendar initializes, pops up, the user selects a date,
' the selection is received by your variable, and the calendar unloads.
'
' From there, you can use as many or as few arguments as you want in order to get the
' desired calendar that suits your needs. All default values are also set in this
' function, so if you want to change default colors or behavior without having to
' explicitly do so in every function call, you can set those in the argument list
' here.
'
' Below is a list of all arguments, their data type, and their function:
'   SelectedDate (Date) - This is the initial selected date on the calendar. Used to
'       show the users last selection. If this value is set, the calendar will
'       initialize to the month and year of the SelectedDate. If not, it will
'       initialize to today's date (with no selection).
'   FirstDayOfWeek (calDayOfWeek) - Sets which day to use as first day of the week.
'   MinimumDate (Date) - Restricts the selection of any dates below this date.
'   MaximumDate (Date) - Restricts the selection of any dates above this date.
'   RangeOfYears (Long) - Sets the range of years to show in the year combobox in
'       either direction from the initial SelectedDate. For example, if the
'       SelectedDate is in 2014, and the RangeOfYears is set to 10 (the default value),
'       the year combobox will show 10 years below 2014 to 10 years above 2014, so it
'       will have a range of 2004-2024. Note that if this range falls outside the bounds
'       set by the MinimumDate or MaximumDate, it will be overridden. Also, this
'       range does NOT limit the years that a user can select. If the upper limit of
'       the year combobox is 2024, and the user clicks the month spinner to surpass
'       December 2024, it will keep right on going to 2025 and beyond (and those
'       years will be added to the year combobox).
'   DateFontSize (Long) - Controls the size of the CalendarForm. This value cannot
'       be set below 9 (the default). To make the form bigger, set this value larger,
'       and everything else in the userform will be resized to fit.
'   TodayButton (Boolean) - Controls whether or not the Today button is visible.
'   OkayButton (Boolean) - Controls whether or not the Okay button is visible. If the
'       Okay button is enabled, when the user selects a date, it is highlighted, but
'       is not returned until they click Okay. If the Okay button is disabled,
'       clicking a date will automatically return that date and unload the form.
'   ShowWeekNumbers (Boolean) - Controls the visibility of the week numbers.
'   FirstWeekOfYear (calFirstWeekOfYear) - Sets the behavior of the week numbers. See
'       the calFirstWeekOfYear Enum in the Global Variables section to see the possible
'       values and their behavior.
'   PositionTop (Long) - Sets the top position of the CalendarForm. If no value is
'       assigned, the CalendarForm is set to position 1 - CenterOwner. Note that
'       PositionTop and PositionLeft must BOTH be set in order to override the default
'       center position.
'   PositionLeft (Long) - Sets the left position of the CalendarForm. If no value is
'       assigned, the CalendarForm is set to position 1 - CenterOwner. Note that
'       PositionTop and PositionLeft must BOTH be set in order to override the default
'       center position.
'   BackgroundColor (Long) - Sets the background color of the CalendarForm.
'   HeaderColor (Long) - Sets the background color of the header. The header is the
'       month and year label at the top.
'   HeaderFontColor (Long) - Sets the color of the header font.
'   SubHeaderColor (Long) - Sets the background color of the subheader. The subheader
'       is the day of week labels under the header (Su, Mo, Tu, etc).
'   SubHeaderFontColor (Long) - Sets the color of the subheader font.
'   DateColor (Long) - Sets the background color of the individual date labels.
'   DateFontColor (Long) - Sets the font color of the individual date labels.
'   SaturdayFontColor (Long) - Sets the font color of Saturday date labels.
'   SundayFontColor (Long) - Sets the font color of Sunday date labels.
'   DateBorder (Boolean) - Controls whether or not the date labels have borders.
'   DateBorderColor (Long) - Sets the color of the date label borders. Note that the
'       argument DateBorder must be set to True for this setting to take effect.
'   DateSpecialEffect (fmSpecialEffect) - Sets a special effect for the date labels.
'       This can be set to bump, etched, flat (default value), raised, or sunken.
'       This can be used to make the date labels look like buttons if you desire.
'       Note that this setting overrides any date border settings you have made.
'   DateHoverColor (Long) - Sets the background color when hovering the mouse over
'       a date label.
'   DateSelectedColor (Long) - Sets the background color of the selected date.
'   TrailingMonthFontColor (Long) - Sets the color of the date labels in trailing
'       months. Trailing months are the date labels from last month at the top of the
'       calendar and from next month at the bottom of the calendar.
'   TodayFontColor (Long) - Sets the font color of today's date.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function GetDate(Optional SelectedDate As Date = 0, _
    Optional FirstDayOfWeek As calDayOfWeek = Sunday, _
    Optional MinimumDate As Date = 0, _
    Optional MaximumDate As Date = 0, _
    Optional RangeOfYears As Long = 120, _
    Optional DateFontSize As Long = 9, _
    Optional TodayButton As Boolean = False, Optional OkayButton As Boolean = False, _
    Optional ShowWeekNumbers As Boolean = False, Optional FirstWeekOfYear As calFirstWeekOfYear = FirstJan1, _
    Optional PositionTop As Long = -5, Optional PositionLeft As Long = -5, _
    Optional BackgroundColor As Long = 16777215, _
    Optional HeaderColor As Long = 15658734, _
    Optional HeaderFontColor As Long = 0, _
    Optional SubHeaderColor As Long = 16448250, _
    Optional SubHeaderFontColor As Long = 8553090, _
    Optional DateColor As Long = 16777215, _
    Optional DateFontColor As Long = 0, _
    Optional SaturdayFontColor As Long = 0, _
    Optional SundayFontColor As Long = 0, _
    Optional DateBorder As Boolean = False, Optional DateBorderColor As Long = 15658734, _
    Optional DateSpecialEffect As fmSpecialEffect = fmSpecialEffectFlat, _
    Optional DateHoverColor As Long = 15658734, _
    Optional DateSelectedColor As Long = 14277081, _
    Optional TrailingMonthFontColor As Long = 12566463, _
    Optional TodayFontColor As Long = 15773696) As Date
    
    'Set global variables
    DateFontSize = Max(DateFontSize, 9) 'Font size cannot be below 9
    OkayEnabled = OkayButton
    TodayEnabled = TodayButton
    RatioToResize = DateFontSize / 9
    bgDateColor = DateColor
    lblDateColor = DateFontColor
    lblDateSatColor = SaturdayFontColor
    lblDateSunColor = SundayFontColor
    bgDateHoverColor = DateHoverColor
    bgDateSelectedColor = DateSelectedColor
    lblDatePrevMonthColor = TrailingMonthFontColor
    lblDateTodayColor = TodayFontColor
    StartWeek = FirstDayOfWeek
    WeekOneOfYear = FirstWeekOfYear
    
    'Initialize userform
    UserformEventsEnabled = False
    Call InitializeUserform(SelectedDate, MinimumDate, MaximumDate, RangeOfYears, PositionTop, PositionLeft, _
        DateFontSize, ShowWeekNumbers, BackgroundColor, HeaderColor, HeaderFontColor, SubHeaderColor, _
        SubHeaderFontColor, DateBorder, DateBorderColor, DateSpecialEffect)
    UserformEventsEnabled = True
    
    'Show userform, return selected date, and unload
    Me.Show
    GetDate = DateOut
    Unload Me
End Function



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' InitializeUserform
'
' This sub initializes the size and positions of every element on the userform.
' Everything is sized based on the RatioToResize variable. RatioToResize is calculated
' based on the ratio of the font size passed to the GetDate function to the default
' font size.
'
' The visibility of the Okay button, Today button, and week numbers is also set here.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub InitializeUserform(SelectedDate As Date, MinimumDate As Date, MaximumDate As Date, _
    RangeOfYears As Long, _
    PositionTop As Long, PositionLeft As Long, _
    SizeFont As Long, bWeekNumbers As Boolean, _
    BackgroundColor As Long, _
    HeaderColor As Long, _
    HeaderFontColor As Long, _
    SubHeaderColor As Long, _
    SubHeaderFontColor As Long, _
    DateBorder As Boolean, DateBorderColor As Long, _
    DateSpecialEffect As fmSpecialEffect)
    
    Dim TempDate As Date                        'Used to set selected date, if none has been provided
    Dim SelectedYear As Long                    'Year of selected date
    Dim SelectedMonth As Long                   'Month of selected date
    Dim SelectedDay As Long                     'Day of seledcted date (if applicable)
    Dim TempDayOfWeek As Long                   'Used to set day labels in subheader
    Dim BorderSpacing As Double                 'Padding between the outermost elements of userform and edge of userform
    Dim HeaderDefaultFontSize As Long           'Default font size of the header labels (month and year)
    Dim bgHeaderDefaultHeight As Double         'Default height of the background behind header labels
    Dim lblMonthYearDefaultHeight As Double     'Default height of the month and year header labels
    Dim scrlMonthDefaultHeight As Double        'Default height of the month scroll bar
    Dim bgDayLabelsDefaultHeight As Double      'Default height of the background behind the subheader day of week labels
    Dim bgDateDefaultHeight As Double           'Default height of the background behind each date label
    Dim bgDateDefaultWidth As Double            'Default width of the background behind each date label
    Dim lblDateDefaultHeight As Double          'Default height of each date label
    Dim cmdButtonDefaultHeight As Double        'Default height of Today and Okay command buttons
    Dim cmdButtonDefaultWidth As Double         'Default width of Today and Okay command buttons
    Dim cmdButtonsCombinedWidth As Double       'Combined width of Today and Okay buttons. Used to center on userform
    Dim cmdButtonsMaxHeight As Double           'Maximum height of command buttons and month scroll bar
    Dim cmdButtonsMaxWidth As Double            'Maximum width of command buttons
    Dim cmdButtonsMaxFontSize As Long           'Maximum font size of command buttons
    Dim bgControl As MSForms.Control            'Stores current date label background in loop to initialize various settings
    Dim lblControl As MSForms.Control           'Stores current date label in loop to initialize various settings
    Dim HeightOffset As Double                  'Difference between form height and inside height, to account for toolbar
    Dim i As Long                               'Used for loops
    Dim j As Long                               'Used for loops
    
    'Initialize default values
    BorderSpacing = 6 * RatioToResize
    HeaderDefaultFontSize = 11
    bgHeaderDefaultHeight = 30
    lblMonthYearDefaultHeight = 13.5
    scrlMonthDefaultHeight = 18
    bgDayLabelsDefaultHeight = 18
    bgDateDefaultHeight = 18
    bgDateDefaultWidth = 18
    lblDateDefaultHeight = 10.5
    cmdButtonDefaultHeight = 24
    cmdButtonDefaultWidth = 60
    cmdButtonsMaxHeight = 36
    cmdButtonsMaxWidth = 90
    cmdButtonsMaxFontSize = 14

    
    'Set MinDate and MaxDate. If no MinimumDate or MaximumDate are provided, set the
    'MinDate to 1/1/1900 and the MaxDate to 12/31/9999. If MaxDate is less than
    'MinDate, it will default to the MinDate.
    If MinimumDate <= 0 Then
        MinDate = CDate("1/1/1900")
    Else
        MinDate = MinimumDate
    End If
    If MaximumDate = 0 Then
        MaxDate = CDate("12/31/9999")
    Else
        MaxDate = MaximumDate
    End If
    If MaxDate < MinDate Then MaxDate = MinDate
    
    'If today's date falls outside min/max, make sure Today button is disabled
    If Date < MinDate Or Date > MaxDate Then TodayEnabled = False

    'Initialize userform position. Initial value of top and left is -5. Check
    'this value to see if a different value has been passed. If not, position
    'to CenterOwner. Must set both top and left positions to override center position
    'If PositionTop <> -5 And PositionLeft <> -5 Then
    '    Me.StartUpPosition = 0
    '    Me.Top = PositionTop
    '    Me.Left = PositionLeft
    'Else
    '    Me.StartUpPosition = 1
    'End If
    With CalendarForm
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
    End With
    
    'Size header elements - header background, month scroll bar, scroll cover (which is just
    'a blank label which sits on top of the month scroll bar to make it look like two spin
    'buttons), month/year labels in header, and the month and year comboboxes
    With bgHeader
        .Height = bgHeaderDefaultHeight * RatioToResize
        'The header width depends on whether week numbers are visible or not
        If bWeekNumbers Then
            .Width = 8 * (bgDateDefaultWidth * RatioToResize) + BorderSpacing
        Else
            .Width = 7 * (bgDateDefaultWidth * RatioToResize)
        End If
        .Left = BorderSpacing
        .Top = BorderSpacing
    End With
    'Month scroll bar. I set a maximum height for the scroll bar, because as it gets
    'larger, the width of the scroll buttons never increases, so eventually it ends
    'up looking really tall and skinny and weird.
    With scrlMonth
        .Width = bgHeader.Width - (2 * BorderSpacing)
        .Left = bgHeader.Left + BorderSpacing
        .Height = scrlMonthDefaultHeight * RatioToResize
        If .Height > cmdButtonsMaxHeight Then .Height = cmdButtonsMaxHeight
        .Top = bgHeader.Top + ((bgHeader.Height - .Height) / 2)
    End With
    'Cover over month scroll bar
    With bgScrollCover
        .Height = scrlMonth.Height
        .Width = scrlMonth.Width - 25 '25 is the width of the actual scroll buttons,
                                      'which need to remain visible
        .Left = scrlMonth.Left + 12.5
        .Top = scrlMonth.Top
    End With
    'The .left position of the month and year labels in the header will be set
    'in the function SetMonthYear, as it changes based on the selected month/year.
    'So only the top needs to be positioned now
    With lblMonth
        .AutoSize = False
        .Height = lblMonthYearDefaultHeight * RatioToResize
        .Font.Size = HeaderDefaultFontSize * RatioToResize
        .Top = bgScrollCover.Top + ((bgScrollCover.Height - .Height) / 2)
    End With
    With lblYear
        .AutoSize = False
        .Height = lblMonthYearDefaultHeight * RatioToResize
        .Font.Size = HeaderDefaultFontSize * RatioToResize
        .Top = bgScrollCover.Top + ((bgScrollCover.Height - .Height) / 2)
    End With
    cmbMonth.Top = lblMonth.Top + (lblMonth.Height - cmbMonth.Height)
    cmbYear.Top = lblYear.Top + (lblYear.Height - cmbYear.Height)

    'Size subheader elements - the subheader bacgkround (bgDayLabels), the day of
    'week labels themselves, and the week number subheader label, if applicable
    With bgDayLabels
        .Height = bgDayLabelsDefaultHeight * RatioToResize
        'The width depends on whether week numbers are visible or not
        If bWeekNumbers Then
            .Width = 8 * (bgDateDefaultWidth * RatioToResize) + BorderSpacing
        Else
            .Width = 7 * (bgDateDefaultWidth * RatioToResize)
        End If
        .Left = BorderSpacing
        .Top = bgHeader.Top + bgHeader.Height
    End With
    'Week number subheader label
    If Not bWeekNumbers Then
        lblWk.Visible = False
    Else
        With lblWk
            .AutoSize = False
            .Height = lblDateDefaultHeight * RatioToResize
            .Font.Size = SizeFont
            .Width = bgDateDefaultWidth * RatioToResize
            .Top = bgDayLabels.Top + ((bgDayLabels.Height - .Height) / 2)
            .Left = BorderSpacing
        End With
    End If
    'Day of week subheader labels
    For i = 1 To 7
        With Me("lblDay" & CStr(i))
            .AutoSize = False
            .Height = lblDateDefaultHeight * RatioToResize
            .Font.Size = SizeFont
            .Width = bgDateDefaultWidth * RatioToResize
            .Top = bgDayLabels.Top + ((bgDayLabels.Height - .Height) / 2)
            If i = 1 Then
                'Left position of first label depends on whether week numbers are visible
                If bWeekNumbers Then
                    .Left = lblWk.Left + lblWk.Width + BorderSpacing
                Else
                    .Left = BorderSpacing
                End If
            Else 'All other labels placed directly next to preceding label
                .Left = Me("lblDay" & CStr(i - 1)).Left + Me("lblDay" & CStr(i - 1)).Width
            End If
        End With
    Next i
    
    'Size all date labels and backgrounds
    For i = 1 To 6 'Rows
        'First set position and visibility of week number label
        If Not bWeekNumbers Then
            Me("lblWeek" & CStr(i)).Visible = False
        Else
            With Me("lblWeek" & CStr(i))
                .AutoSize = False
                .Height = lblDateDefaultHeight * RatioToResize
                .Font.Size = SizeFont
                .Width = bgDateDefaultWidth * RatioToResize
                .Left = BorderSpacing
                If i = 1 Then
                    .Top = bgDayLabels.Top + bgDayLabels.Height + (((bgDateDefaultHeight * RatioToResize) - .Height) / 2)
                Else
                    .Top = Me("bgDate" & CStr(i - 1) & "1").Top + Me("bgDate" & CStr(i - 1) & "1").Height + (((bgDateDefaultHeight * RatioToResize) - .Height) / 2)
                End If
            End With
        End If
        
        'Now set position of each date label in current row
        For j = 1 To 7
            Set bgControl = Me("bgDate" & CStr(i) & CStr(j))
            Set lblControl = Me("lblDate" & CStr(i) & CStr(j))
            'The date label background is sized and placed first. Then the actual date label is simply
            'set to the same position and centered vertically.
            With bgControl
                .Height = bgDateDefaultHeight * RatioToResize
                .Width = bgDateDefaultWidth * RatioToResize
                If j = 1 Then
                    'Left position of first label in row depends on whether week numbers are visible
                    If bWeekNumbers Then
                        .Left = Me("lblWeek" & CStr(i)).Left + Me("lblWeek" & CStr(i)).Width + BorderSpacing
                    Else
                        .Left = BorderSpacing
                    End If
                Else 'All other labels placed directly next to preceding label in row
                    .Left = Me("bgDate" & CStr(i) & CStr(j - 1)).Left + Me("bgDate" & CStr(i) & CStr(j - 1)).Width
                End If
                If i = 1 Then
                    .Top = bgDayLabels.Top + bgDayLabels.Height
                Else
                    .Top = Me("bgDate" & CStr(i - 1) & CStr(j)).Top + Me("bgDate" & CStr(i - 1) & CStr(j)).Height
                End If
            End With
            'Size and position actual date label
            With lblControl
                .AutoSize = False
                .Height = lblDateDefaultHeight * RatioToResize
                .Font.Size = SizeFont
                .Width = bgControl.Width
                .Left = bgControl.Left
                .Top = bgControl.Top + ((bgControl.Height - .Height) / 2)
            End With
        Next j
    Next i
    
    'Set userform width. Height set later, since it depends on Today and Okay buttons
    frameCalendar.Width = bgDate67.Left + bgDate67.Width + BorderSpacing
    'Make sure userform is large enough to show entire calendar
    If Me.InsideWidth < (frameCalendar.Left + frameCalendar.Width) Then
        Me.Width = Me.Width + ((frameCalendar.Left + frameCalendar.Width) - Me.InsideWidth)
    End If

    'Set size and visibility of Okay button and date selection labels
    If Not OkayEnabled Then
        cmdOkay.Visible = False
        lblSelection.Visible = False
        lblSelectionDate.Visible = False
    Else
        'Okay button. I set a maximum and width, for the same reason as the month
        'scroll bar. Eventually, the gigantic buttons just start looking weird.
        With cmdOkay
            .Visible = True
            .Height = cmdButtonDefaultHeight * RatioToResize
            If .Height > cmdButtonsMaxHeight Then .Height = cmdButtonsMaxHeight
            .Width = cmdButtonDefaultWidth * RatioToResize
            If .Width > cmdButtonsMaxWidth Then .Width = cmdButtonsMaxWidth
            If SizeFont > cmdButtonsMaxFontSize Then
                .Font.Size = cmdButtonsMaxFontSize
            Else
                .Font.Size = SizeFont
            End If
            .Top = bgDate61.Top + bgDate61.Height + bgDayLabels.Height + BorderSpacing
        End With
        'The "Selection" label
        With lblSelection
            .Visible = True
            .AutoSize = False
            .Height = lblMonthYearDefaultHeight * RatioToResize
            .Width = frameCalendar.Width
            .Font.Size = HeaderDefaultFontSize * RatioToResize
            .AutoSize = True
            .Top = (bgDate61.Top + bgDate61.Height) + ((bgDayLabels.Height + BorderSpacing - .Height) / 2)
        End With
        'The actual selected date label
        With lblSelectionDate
            .Visible = True
            .AutoSize = False
            .Height = lblMonthYearDefaultHeight * RatioToResize
            .Width = frameCalendar.Width - lblSelection.Width
            .Font.Size = HeaderDefaultFontSize * RatioToResize
            .Top = lblSelection.Top
        End With
    End If
    
    'Set size and visibility of Today button. Make sure it is within max bounds.
    'Top is not set for Today button yet, because it depends on whether Okay button
    'is enabled. Therefore, it is set farther down.
    If Not TodayEnabled Then
        cmdToday.Visible = False
    Else
        With cmdToday
            .Visible = True
            .Height = cmdButtonDefaultHeight * RatioToResize
            If .Height > cmdButtonsMaxHeight Then .Height = cmdButtonsMaxHeight
            .Width = cmdButtonDefaultWidth * RatioToResize
            If .Width > cmdButtonsMaxWidth Then .Width = cmdButtonsMaxWidth
            If SizeFont > cmdButtonsMaxFontSize Then
                .Font.Size = cmdButtonsMaxFontSize
            Else
                .Font.Size = SizeFont
            End If
        End With
    End If
    
    'Position Okay and Today buttons, depending on which ones are enabled
    If OkayEnabled And TodayEnabled Then 'Both buttons enabled.
        cmdToday.Top = cmdOkay.Top
        cmdButtonsCombinedWidth = cmdToday.Width + cmdOkay.Width
        cmdToday.Left = ((frameCalendar.Width - cmdButtonsCombinedWidth) / 2) - (BorderSpacing / 2)
        cmdOkay.Left = cmdToday.Left + cmdToday.Width + BorderSpacing
    ElseIf OkayEnabled Then 'Only Okay button enabled
        cmdOkay.Left = (frameCalendar.Width - cmdOkay.Width) / 2
    ElseIf TodayEnabled Then 'Only Today button enabled
        cmdToday.Top = bgDate61.Top + bgDate61.Height + BorderSpacing
        cmdToday.Left = (frameCalendar.Width - cmdToday.Width) / 2
    End If
    
    'Set userform height, depending on which buttons are enabled
    HeightOffset = Me.Height - Me.InsideHeight
    If OkayEnabled Then
        frameCalendar.Height = cmdOkay.Top + cmdOkay.Height + HeightOffset + BorderSpacing
    ElseIf TodayEnabled Then 'Only Today button enabled
        frameCalendar.Height = cmdToday.Top + cmdToday.Height + HeightOffset + BorderSpacing
    Else 'Neither button enabled
        frameCalendar.Height = bgDate61.Top + bgDate61.Height + HeightOffset + BorderSpacing
    End If
    
    'Make sure userform is large enough to show entire calendar
    If Me.InsideHeight < (frameCalendar.Top + frameCalendar.Height) Then
        Me.Height = Me.Height + ((frameCalendar.Top + frameCalendar.Height) - Me.InsideHeight - HeightOffset)
    End If
    
    'Check if SelectedDateIn was set by user, and ensure it is within min/max range
    If SelectedDate > 0 Then
        If SelectedDate < MinDate Then
            SelectedDate = MinDate
        ElseIf SelectedDate > MaxDate Then
            SelectedDate = MaxDate
        End If
        SelectedDateIn = SelectedDate
        SelectedYear = year(SelectedDateIn)
        SelectedMonth = month(SelectedDateIn)
        SelectedDay = day(SelectedDateIn)
        Call SetSelectionLabel(SelectedDateIn)
    Else 'No SelectedDate provided, default to today's date
        cmdOkay.Enabled = False
        TempDate = Date
        If TempDate < MinDate Then
            TempDate = MinDate
        ElseIf TempDate > MaxDate Then
            TempDate = MaxDate
        End If
        SelectedYear = year(TempDate)
        SelectedMonth = month(TempDate)
        SelectedDay = 0 'Don't want to highlight a 'selected date,' since user supplied no date
        Call SetSelectionLabel(Empty)
    End If
    
    'Initialize month and year comboboxes, as well as month scroll bar. Make sure
    'years are within range of 1900 to 9999. If year combobox falls outside bounds
    'of MinDate and MaxDate, it will be overridden.
    Call SetMonthCombobox(SelectedYear, SelectedMonth)
    scrlMonth.value = SelectedMonth
    cmbYearMin = SelectedYear - RangeOfYears
    cmbYearMax = SelectedYear + RangeOfYears
    If cmbYearMin < year(MinDate) Then
        cmbYearMin = year(MinDate)
    End If
    If cmbYearMax > year(MaxDate) Then
        cmbYearMax = year(MaxDate)
    End If
    For i = cmbYearMin To cmbYearMax
        cmbYear.AddItem i
    Next i
    cmbYear.value = SelectedYear
    
    'Set userform colors and effects
    Me.BackColor = BackgroundColor
    frameCalendar.BackColor = BackgroundColor
    bgHeader.BackColor = HeaderColor
    bgScrollCover.BackColor = HeaderColor
    lblMonth.ForeColor = HeaderFontColor
    lblYear.ForeColor = HeaderFontColor
    lblSelection.ForeColor = SubHeaderFontColor
    lblSelectionDate.ForeColor = SubHeaderFontColor
    bgDayLabels.BackColor = SubHeaderColor
    For i = 1 To 7
        Me("lblDay" & CStr(i)).ForeColor = SubHeaderFontColor
    Next i
    If bWeekNumbers Then
        lblWk.ForeColor = SubHeaderFontColor
        For i = 1 To 6
            Me("lblWeek" & CStr(i)).ForeColor = SubHeaderFontColor
        Next i
    End If
    For i = 1 To 6
        For j = 1 To 7
            With Me("bgDate" & CStr(i) & CStr(j))
                If DateBorder Then
                    .BorderStyle = fmBorderStyleSingle
                    .BorderColor = DateBorderColor
                End If
                .SpecialEffect = DateSpecialEffect
            End With
        Next j
    Next i
    
    'Initialize subheader day labels, based on selected first day of week
    TempDayOfWeek = StartWeek
    For i = 1 To 7
        Me("lblDay" & CStr(i)).Caption = Choose(TempDayOfWeek, "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa")
        TempDayOfWeek = TempDayOfWeek + 1
        If TempDayOfWeek = 8 Then TempDayOfWeek = 1
    Next i
            
    'Set month and year labels in header, as well as date labels
    Call SetMonthYear(SelectedMonth, SelectedYear)
    Call SetDays(SelectedMonth, SelectedYear, SelectedDay)
End Sub



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' cmdOkay_Click
'
' When the Okay button is clicked, DateOut is set, and the CalendarForm is hidden to
' return control to the GetDate function.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub cmdOkay_Click()
    DateOut = SelectedDateIn
    Me.Hide
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' cmdToday_Click
'
' The functionality of the Today button changes depending on whether the Okay button is
' enabled or not. If the Okay button is enabled, clicking the Today button jumps to
' today's date and selects it.
'
' If the Okay button is disabled, clicking the Today button jumps to today's date, but
' nothing is selected.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub cmdToday_Click()
    Dim SelectedMonth As Long           'Month of selected date
    Dim SelectedYear As Long            'Year of selected date
    Dim SelectedDay As Long             'Day of selected date, if applicable
    Dim TodayDate As Date               'Today's date
    
    UserformEventsEnabled = False
    SelectedDay = 0
    TodayDate = Date
    
    'If Okay button is enabled, set SelectedDateIn, and the selection labels
    If OkayEnabled Then
        cmdOkay.Enabled = True
        SelectedDateIn = TodayDate
        Call SetSelectionLabel(TodayDate)
        SelectedDay = day(TodayDate)
    End If
    
    'Get the month, day, and year, and set month scroll bar
    SelectedMonth = month(TodayDate)
    SelectedYear = year(TodayDate)
    SelectedDay = GetSelectedDay(SelectedMonth, SelectedYear)
    scrlMonth.value = SelectedMonth
    
    'Set month/year labels and date labels
    Call SetMonthYear(SelectedMonth, SelectedYear)
    Call SetDays(SelectedMonth, SelectedYear, SelectedDay)
    
    UserformEventsEnabled = True
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' UserForm_QueryClose
'
' I originally included this sub to override when the user cancelled the
' CalendarForm using the X button, in order to avoid receiving an invalid date value
' back from the userform (1/0/1900 12:00:00 AM). This sub sets DateOut to currently
' selected Date, or to the initial SelectedDate passed to the GetDate function if user
' has not changed the selection, or the Okay button is not enabled.
'
' Note that it is still possible for the CalendarForm to return an invalid date value
' if no initial SelectedDate is set, the user does not make any selection, and then
' cancels the userform.
'
' I ended up removing the sub, because I like being able to detect if the user has
' cancelled the userform by testing the date from it. For instance, if user selects
' a date, but then changes their mind and cancels the userform, you wouldn't want to
' still return that date to your variable. You would want to revert to their previous
' selection, or do some error handling, if necessary.
'
' If you want the functionality described above, of returning the selected date or
' initial date if the user cancels, you can un-comment this sub.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
'    If CloseMode = 0 Then
'        Cancel = True
'        DateOut = SelectedDateIn
'        Me.Hide
'    End If
'End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ClickControl
'
' This sub handles the event of clicking on one of the date label controls. Every date
' label has a click event which passes that label to this sub.
'
' If the Okay button is enabled, clicking a date selects that date, but does not return.
' If Okay button is disabled, clicking a date hides the userform and returns that date.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub ClickControl(ctrl As MSForms.Control)
    Dim SelectedMonth As Long           'Month of selected date
    Dim SelectedYear As Long            'Year of selected date
    Dim SelectedDay As Long             'Day of selected date
    Dim SelectedDate As Date            'Date that the user has selected
    Dim RowIndex As Long                'Row index of the clicked date label
    Dim ColumnIndex As Long             'Column index of the clicked date label
    
    'Get selected day/year from scroll bar and combobox
    SelectedMonth = scrlMonth.value
    SelectedYear = cmbYear.value
    
    'Get indices of date label from label name and selected day from caption
    RowIndex = CLng(Left(Right(ctrl.Name, 2), 1))
    ColumnIndex = CLng(Right(ctrl.Name, 1))
    SelectedDay = CLng(ctrl.Caption)
    
    'Selection is from previous month. The largest day that could exist in
    'the first row from the current month is 6, so if the day is larger than
    'that, we know it came from the previous month, in which case we need
    'to decrement the selected month
    If RowIndex = 1 And SelectedDay > 7 Then
        SelectedMonth = SelectedMonth - 1
        'Handle January
        If SelectedMonth = 0 Then
            SelectedYear = SelectedYear - 1
            SelectedMonth = 12
        End If
    
    'Selection is from next month. The trailing dates from next month can
    'show up in rows 5 and 6. The smallest day that could exist in these rows
    'from the current month is about 23, so if the day is smaller than that,
    'we know it came from next month.
    ElseIf RowIndex >= 5 And SelectedDay < 20 Then
        SelectedMonth = SelectedMonth + 1
        'Handle December
        If SelectedMonth = 13 Then
            SelectedYear = SelectedYear + 1
            SelectedMonth = 1
        End If
    End If
    
    SelectedDate = DateSerial(SelectedYear, SelectedMonth, SelectedDay)
    
    'If Okay button is disabled, click will automatically hide form to return selected
    'date. If Okay button is enabled, click will select date, but will not return until
    'Okay is clicked
    If Not OkayEnabled Then
        DateOut = SelectedDate
        Me.Hide
    Else
        UserformEventsEnabled = False
            cmdOkay.Enabled = True
            SelectedDateIn = SelectedDate
            scrlMonth.value = SelectedMonth
            Call SetSelectionLabel(SelectedDate)
            Call SetMonthYear(SelectedMonth, SelectedYear)
            Call SetDays(SelectedMonth, SelectedYear, SelectedDay)
        UserformEventsEnabled = True
    End If
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' HoverControl
'
' This sub handles the event of hovering over one of the date label controls. Every date
' label has a MouseMove event which passes that label to this sub.
'
' This sub returns the last hovered date label to its original color, sets the currently
' hovered date label to the bgDateHoverColor, and stores its name and original color
' to global variables.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub HoverControl(ctrl As MSForms.Control)
    If HoverControlName <> vbNullString Then
        Me.Controls(HoverControlName).BackColor = HoverControlColor
    End If
    HoverControlName = ctrl.Name
    HoverControlColor = ctrl.BackColor
    ctrl.BackColor = bgDateHoverColor
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' lblMonth_Click / lblYear_Click
'
' The month and year labels in the header have invisible comboboxes behind them. These
' two subs show the combobox drop downs when you click on the labels.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub lblMonth_Click()
    cmbMonth.DropDown
End Sub
Private Sub lblYear_Click()
    cmbYear.DropDown
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' cmbMonth_Change / cmbYear_Change
'
' The month and year comboboxes both call the cmbMonthYearChange sub when the user makes
' a selection. The year combobox also resets the month combobox, in case the user
' selects a year that is limited by a minimum or maximum date, to make sure the month
' combobox doesn't end up with selections that shouldn't be available.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub cmbMonth_Change()
    Call cmbMonthYearChange
End Sub
Private Sub cmbYear_Change()
    If Not UserformEventsEnabled Then Exit Sub
    
    UserformEventsEnabled = False
    Call SetMonthCombobox(cmbYear.value, scrlMonth.value)
    UserformEventsEnabled = True
    
    Call cmbMonthYearChange
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' cmbMonthYearChange
'
' This sub handles the user making a selection from either the month or year combobox.
' It gets the selected month and year from the comboboxes, sets the value of the month
' scroll bar to match, and resets the calendar date labels.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub cmbMonthYearChange()
    Dim SelectedMonth As Long           'Month of selected date
    Dim SelectedYear As Long            'Year of selected date
    Dim SelectedDay As Long             'Day of selected date
    
    If Not UserformEventsEnabled Then Exit Sub
    UserformEventsEnabled = False
    
    'Get selected month and year. If the selected year has a minimum date set, then
    'the month combobox might not contain all the months of the year. In this case
    'the combobox index has to be offset by the month of the minimum date. No
    'calculation is necessary if the selected year has a maximum date set, because
    'the indices of the months in the combobox are still going to be the same in
    'either case.
    SelectedYear = cmbYear.value
    If SelectedYear = year(MinDate) Then
        SelectedMonth = cmbMonth.ListIndex + month(MinDate)
    Else
        SelectedMonth = cmbMonth.ListIndex + 1
    End If
    
    'Get selected day, set the value of the month scroll bar, and reset all
    'date labels on the userform
    SelectedDay = GetSelectedDay(SelectedMonth, SelectedYear)
    scrlMonth.value = SelectedMonth
    Call SetMonthYear(SelectedMonth, SelectedYear)
    Call SetDays(SelectedMonth, SelectedYear, SelectedDay)
    
    UserformEventsEnabled = True
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' scrlMonth_Change
'
' This sub handles the user clicking the scroll bar to increment or decrement the month.
' It checks to keep the month within the bounds set by the minimum or maximum date,
' and resets all the labels of the userform to the new month.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub scrlMonth_Change()
    Dim TempYear As Long        'Temporarily store selected year to test min and max dates
    Dim MinMonth As Long        'Sets lower limit of scroll bar
    Dim MaxMonth As Long        'Sets upper limit of scroll bar
    Dim SelectedMonth As Long   'Month of selected date
    Dim SelectedYear As Long    'Year of selected date
    Dim SelectedDay As Long     'Day of selected date
    
    If Not UserformEventsEnabled Then Exit Sub
    UserformEventsEnabled = False
    
    'Default lower and upper limit of scroll bar to allow full range of months
    MinMonth = 0
    MaxMonth = 13
    
    'If the current year is the min or max year, set min or max months
    TempYear = cmbYear.value
    If TempYear = year(MinDate) Then MinMonth = month(MinDate)
    If TempYear = year(MaxDate) Then MaxMonth = month(MaxDate)
    
    'Keep scroll bar within range of min and max dates
    If scrlMonth.value < MinMonth Then scrlMonth.value = scrlMonth.value + 1
    If scrlMonth.value > MaxMonth Then scrlMonth.value = scrlMonth.value - 1
    
    'If user goes down one month from January, scroll bar will have value of
    '0. In this case, reset scroll bar back to December and decrement year
    'by 1.
    If scrlMonth.value = 0 Then
        scrlMonth.value = 12
        cmbYear.value = cmbYear.value - 1
        'If new year is outside range of combobox, add it to combobox
        If cmbYear.value < cmbYearMin Then
            cmbYear.AddItem cmbYear.value, 0
            cmbYearMin = cmbYear.value
        End If
        Call SetMonthCombobox(cmbYear.value, scrlMonth.value)
    'If user goes up one month from December, scroll bar will have value of
    '13. Reset to January and increment year.
    ElseIf scrlMonth.value = 13 Then
        scrlMonth.value = 1
        cmbYear.value = cmbYear.value + 1
        'If new year is outside range of combobox, add it to combobox
        If cmbYear.value > cmbYearMax Then
            cmbYear.AddItem cmbYear.value, cmbYear.ListCount
            cmbYearMax = cmbYear.value
        End If
        Call SetMonthCombobox(cmbYear.value, scrlMonth.value)
    End If
    
    'Get selected month, year, and day, and reset all userform labels
    SelectedMonth = scrlMonth.value
    SelectedYear = cmbYear.value
    SelectedDay = GetSelectedDay(SelectedMonth, SelectedYear)
    Call SetMonthYear(SelectedMonth, SelectedYear)
    Call SetDays(SelectedMonth, SelectedYear, SelectedDay)
    
    UserformEventsEnabled = True
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' SetMonthCombobox
'
' This sub clears the list in the month combobox and resets it. This is done every time
' the month changes to make sure the months displayed in the combobox don't ever fall
' outside the bounds set by the minimum or maximum date.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub SetMonthCombobox(YearIn As Long, MonthIn As Long)
    Dim YearMinDate As Long             'Year of the minimum date
    Dim YearMaxDate As Long             'Year of the maximum date
    Dim MonthMinDate As Long            'Month of the minimum date
    Dim MonthMaxDate As Long            'Month of the maximum date
    Dim i As Long                       'Used for looping
    
    'Get month and year of minimum and maximum dates and clear combobox
    YearMinDate = year(MinDate)
    YearMaxDate = year(MaxDate)
    MonthMinDate = month(MinDate)
    MonthMaxDate = month(MaxDate)
    cmbMonth.Clear

    'Both minimum and maximum dates occur in selected year
    If YearIn = YearMinDate And YearIn = YearMaxDate Then
        For i = MonthMinDate To MonthMaxDate
            cmbMonth.AddItem Choose(i, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
        Next i
        If MonthIn < MonthMinDate Then MonthIn = MonthMinDate
        If MonthIn > MonthMaxDate Then MonthIn = MonthMaxDate
        cmbMonth.ListIndex = MonthIn - MonthMinDate
    
    'Only minimum date occurs in selected year
    ElseIf YearIn = YearMinDate Then
        For i = MonthMinDate To 12
            cmbMonth.AddItem Choose(i, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
        Next i
        If MonthIn < MonthMinDate Then MonthIn = MonthMinDate
        cmbMonth.ListIndex = MonthIn - MonthMinDate
    
    'Only maximum date occurs in selected year
    ElseIf YearIn = YearMaxDate Then
        For i = 1 To MonthMaxDate
            cmbMonth.AddItem Choose(i, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
        Next i
        If MonthIn > MonthMaxDate Then MonthIn = MonthMaxDate
        cmbMonth.ListIndex = MonthIn - 1
    
    'No minimum or maximum date in selected year. Add all months to combobox
    Else
        cmbMonth.List = Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
        cmbMonth.ListIndex = MonthIn - 1
    End If

End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' SetMonthYear
'
' This sub sets the month and year comboboxes to keep them in sync with any changes
' made to the selected month or year. It also sets the month and year labels in the
' header, and positions them in the center of the month scroll bar.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub SetMonthYear(MonthIn As Long, YearIn As Long)
    Dim ExtraSpace As Double                'Space between month and year labels
    Dim CombinedLabelWidth As Double        'Combined width of both month and year labels
    
    ExtraSpace = 4 * RatioToResize
    
    'Set value of comboboxes
    If YearIn = year(MinDate) Then
        cmbMonth.ListIndex = MonthIn - month(MinDate)
    Else
        cmbMonth.ListIndex = MonthIn - 1
    End If
    cmbYear.value = YearIn
    
    'Set labels and position to center of scroll buttons. Labels are first
    'set to the width of the userform to avoid overflow, and then autosized
    'to fit to the text before being centered
    With lblMonth
        .AutoSize = False
        .Width = frameCalendar.Width
        .Caption = cmbMonth.value
        .AutoSize = True
    End With
    With lblYear
        .AutoSize = False
        .Width = frameCalendar.Width
        .Caption = cmbYear.value
        .AutoSize = True
    End With
    
    'Get combined width of labels and center to scroll bar
    CombinedLabelWidth = lblMonth.Width + lblYear.Width
    With lblMonth
        .Left = ((frameCalendar.Width - CombinedLabelWidth) / 2) - (ExtraSpace / 2)
    End With
    With lblYear
        .Left = lblMonth.Left + lblMonth.Width + ExtraSpace
    End With
    
    'Reposition comboboxes to line up with labels
    cmbMonth.Left = lblMonth.Left - (cmbMonth.Width - lblMonth.Width) - ExtraSpace - 2
    cmbYear.Left = lblYear.Left
    
    'Clear hover control name, so labels in new month don't revert to
    'colors from previously selected month
    HoverControlName = vbNullString
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' SetDays
'
' This sub sets the caption, visibility, and colors of all the date labels on the
' userform, as well as the week number labels. If a selected day is passed to the
' sub, it will highlight that date accordingly. Otherwise, no selected date will be
' highlighted.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub SetDays(MonthIn As Long, YearIn As Long, Optional DayIn As Long)
    Dim PrevMonth As Long               'Month preceding selected month. Used for trailing dates
    Dim NextMonth As Long               'Month following selected month. Used for trailing dates
    Dim Today As Date                   'Today's date
    Dim TodayDay As Long                'Day number of today's date
    Dim StartDayOfWeek  As Long         'Stores the weekday number of the first day in selected month
    Dim LastDayOfMonth As Long          'Last day of the month
    Dim LastDayOfPrevMonth As Long      'Last day of preceding month. Used for trailing dates
    Dim CurrentDay As Long              'Tracks current day in the month while setting labels
    Dim TempCurrentDay As Long          'Tracks the current day for previous month without incrementing actual CurrentDay
    Dim WeekNumber As Long              'Stores week number for week number labels
    Dim StartDayOfWeekDate As Date      'Stores first date in the week. Used to calculate week numbers
    Dim SaturdayIndex As Long           'Column index of Saturdays. Used to set color of Saturday labels, if applicable
    Dim SundayIndex As Long             'Column index of Sundays
    Dim MinDay As Long                  'Stores lower limit of days if minimum date falls in selected month
    Dim MaxDay As Long                  'Stores upper limit of days if maximum date falls in selected month
    Dim PrevMonthMinDay As Long         'Stores lower limit of days if minimum date falls in preceding month
    Dim NextMonthMaxDay As Long         'Stores upper limit of days if maximum date falls in next month
    Dim lblControl As MSForms.Control   'Stores current date label while changing settings
    Dim bgControl As MSForms.Control    'Stores current date label background while changing settings
    Dim i As Long                       'Used for looping
    Dim j As Long                       'Used for looping
    
    'Set min and max day, if applicable. If not, min and max day are set to 0 and 32,
    'respectively, since dates will never fall outside those bounds
    MinDay = 0
    MaxDay = 32
    If YearIn = year(MinDate) And MonthIn = month(MinDate) Then MinDay = day(MinDate)
    If YearIn = year(MaxDate) And MonthIn = month(MaxDate) Then MaxDay = day(MaxDate)
    
    'Find previous month and next month. Handle January
    'and December appropriately
    PrevMonth = MonthIn - 1
    If PrevMonth = 0 Then PrevMonth = 12
    NextMonth = MonthIn + 1
    If NextMonth = 13 Then NextMonth = 1
    
    'Set min and max days for previous month and next month, if applicable
    PrevMonthMinDay = 0
    NextMonthMaxDay = 32
    If YearIn = year(MinDate) And PrevMonth = month(MinDate) Then PrevMonthMinDay = day(MinDate)
    If YearIn = year(MaxDate) And NextMonth = month(MaxDate) Then NextMonthMaxDay = day(MaxDate)

    'Find last day of selected month and previous month. Find first weekday
    'in current month, and index of Saturday and Sunday relative to first weekday
    LastDayOfMonth = day(DateSerial(YearIn, MonthIn + 1, 0))
    LastDayOfPrevMonth = day(DateSerial(YearIn, MonthIn, 0))
    StartDayOfWeek = Weekday(DateSerial(YearIn, MonthIn, 1), StartWeek)
    If StartWeek = 1 Then SundayIndex = 1 Else SundayIndex = 9 - StartWeek
    SaturdayIndex = 8 - StartWeek

    'If user is viewing current month/year, we want to highlight today's date. If
    'not, TodayDay is set to 0, since that value will never be encountered
    Today = Date
    If YearIn = year(Today) And MonthIn = month(Today) Then
        TodayDay = day(Today)
    Else
        TodayDay = 0
    End If
    
    'Loop through all date labels and set captions and colors
    CurrentDay = 1
    For i = 1 To 6 'Rows
    
        'Set week number first, as it happens only once per row
        'Entire first row is last month
        If StartDayOfWeek = 1 And i = 1 Then
            'Calculate day number of first day in the week
            TempCurrentDay = CLng(LastDayOfPrevMonth - (StartDayOfWeek + 5))
            If PrevMonth <> 12 Then
                StartDayOfWeekDate = DateSerial(YearIn, PrevMonth, TempCurrentDay)
            Else
                StartDayOfWeekDate = DateSerial(YearIn - 1, PrevMonth, TempCurrentDay)
            End If
            
        'Previous month, but entire row is not last month. In this
        'case just use first of month. This is done because when using
        'the DatePart function to calculate week number, the last week
        'in December can be calculated incorrectly, so we want to default
        'to January 1st instead, which is always correct
        ElseIf i = 1 Then
            StartDayOfWeekDate = DateSerial(YearIn, MonthIn, 1)
        
        Else
            'Current month
            If CurrentDay <= LastDayOfMonth Then
                TempCurrentDay = CurrentDay
                StartDayOfWeekDate = DateSerial(YearIn, MonthIn, TempCurrentDay)
            
            'Next month
            Else
                TempCurrentDay = CLng(CurrentDay - LastDayOfMonth)
                If NextMonth <> 1 Then
                    StartDayOfWeekDate = DateSerial(YearIn, NextMonth, TempCurrentDay)
                Else
                    StartDayOfWeekDate = DateSerial(YearIn + 1, NextMonth, TempCurrentDay)
                End If
            End If
        End If
        WeekNumber = DatePart("ww", StartDayOfWeekDate, StartWeek, WeekOneOfYear)
        
        'Address DatePart function bug of sometimes incorrectly returning week 53
        'for last week in December when it should be week 1 of new year. If we get
        '53, but January 1st resides in the week we are calculating (any time the
        'first day of the week is greater than Dec 25th), we want to calculate based
        'off January 1st, instead of date in December.
        If WeekNumber > 52 And TempCurrentDay > 25 Then
            WeekNumber = DatePart("ww", DateSerial(YearIn + 1, 1, 1), StartWeek, WeekOneOfYear)
        End If
        Me("lblWeek" & CStr(i)).Caption = WeekNumber
        
        'Set date labels
        For j = 1 To 7 'Columns
            Set lblControl = Me("lblDate" & CStr(i) & CStr(j))
            Set bgControl = Me("bgDate" & CStr(i) & CStr(j))
            With lblControl
                
                'Previous month dates. If month starts on first day of week, entire
                'first row will be previous month
                If StartDayOfWeek = 1 And i = 1 Then
                    'If minimum date is in current month, then previous month shouldn't be visible
                    If MinDay <> 0 Then
                        .Visible = False
                        bgControl.Visible = False
                    Else
                        TempCurrentDay = CLng(LastDayOfPrevMonth - (StartDayOfWeek + 6 - j))
                        'Make sure previous month dates don't go beyond minimum date
                        If TempCurrentDay < PrevMonthMinDay Then
                            .Visible = False
                            bgControl.Visible = False
                        Else
                            .Visible = True
                            bgControl.Visible = True
                            .ForeColor = lblDatePrevMonthColor
                            .Caption = CStr(TempCurrentDay)
                            bgControl.BackColor = bgDateColor
                        End If
                    End If
                    
                'Previous month dates if month DOESN'T start on first day of week
                ElseIf i = 1 And j < StartDayOfWeek Then
                    'If minimum date is in current month, then previous month shouldn't be visible
                    If MinDay <> 0 Then
                        .Visible = False
                        bgControl.Visible = False
                    Else
                        TempCurrentDay = CLng(LastDayOfPrevMonth - (StartDayOfWeek - 1 - j))
                        'Make sure previous month dates don't go beyond minimum date
                        If TempCurrentDay < PrevMonthMinDay Then
                            .Visible = False
                            bgControl.Visible = False
                        Else
                            .Visible = True
                            .Enabled = True
                            bgControl.Visible = True
                            .ForeColor = lblDatePrevMonthColor
                            .Caption = CStr(TempCurrentDay)
                            bgControl.BackColor = bgDateColor
                        End If
                    End If

                'Next month dates
                ElseIf CurrentDay > LastDayOfMonth Then
                    'If maximum date is in current month, then next month shouldn't be visible
                    If MaxDay <> 32 Then
                        .Visible = False
                        bgControl.Visible = False
                    Else
                        TempCurrentDay = CLng(CurrentDay - LastDayOfMonth)
                        'Make sure next month dates don't go beyond maximum date
                        If TempCurrentDay > NextMonthMaxDay Then
                            .Visible = False
                            bgControl.Visible = False
                        Else
                            .Visible = True
                            .Enabled = True
                            bgControl.Visible = True
                            .ForeColor = lblDatePrevMonthColor
                            .Caption = CStr(TempCurrentDay)
                            bgControl.BackColor = bgDateColor
                        End If
                    End If
                    CurrentDay = CurrentDay + 1
                    
                'Current month dates
                Else
                    'Disable any dates outside bounds of minimum or maximum dates.
                    'Background of date label is set to invisible, so it doesn't
                    'hover, and the date label itself is disabled so it can't be clicked
                    If CurrentDay < MinDay Or CurrentDay > MaxDay Then
                        .Visible = True
                        .Enabled = False
                        bgControl.Visible = False
                    Else 'Within bounds. Enable and set colors
                        .Visible = True
                        .Enabled = True
                        bgControl.Visible = True
                        'Set text color
                        If CurrentDay = TodayDay Then
                            .ForeColor = lblDateTodayColor
                        ElseIf j = SaturdayIndex Then
                            .ForeColor = lblDateSatColor
                        ElseIf j = SundayIndex Then
                            .ForeColor = lblDateSunColor
                        Else
                            .ForeColor = lblDateColor
                        End If
                        
                        'Set background color
                        If CurrentDay = DayIn Then
                            bgControl.BackColor = bgDateSelectedColor
                        Else
                            bgControl.BackColor = bgDateColor
                        End If
                    End If
                    .Caption = CStr(CurrentDay)
                    CurrentDay = CurrentDay + 1
                End If
            End With
        Next j
    Next i
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' SetSelectionLabel
'
' This sub sets the caption and position of the labels that show the user's current
' selection if the Okay button is enabled.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub SetSelectionLabel(DateIn As Date)
    Dim CombinedLabelWidth As Double        'Combined width of both labels, used to center
    Dim ExtraSpace As Double                'Space between the two labels
    
    ExtraSpace = 3 * RatioToResize
    
    'If there is no selected date set yet, selected date label should be null
    If DateIn = 0 Then
        lblSelectionDate.Caption = vbNullString
        lblSelection.Left = frameCalendar.Left + ((frameCalendar.Width - lblSelection.Width) / 2)
    Else 'A selection has been made. Set caption and center
        With lblSelectionDate
            .AutoSize = False
            .Width = frameCalendar.Width
            .Caption = Format(DateIn, "mm/dd/yyyy")
            .AutoSize = True
        End With
    
        CombinedLabelWidth = lblSelection.Width + lblSelectionDate.Width
        lblSelection.Left = ((frameCalendar.Width - CombinedLabelWidth) / 2) - (ExtraSpace / 2)
        lblSelectionDate.Left = lblSelection.Left + lblSelection.Width + ExtraSpace
    End If
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GetSelectedDay
'
' This function checks the current month and year to see if they match the selected
' date. If so, it returns the day number of the selected date. If not, it returns 0.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function GetSelectedDay(MonthIn As Long, YearIn As Long) As Long
    GetSelectedDay = 0
    
    'Check if a selected date was provided by the user
    If SelectedDateIn <> 0 Then
        If MonthIn = month(SelectedDateIn) And YearIn = year(SelectedDateIn) Then
            GetSelectedDay = day(SelectedDateIn)
        End If
    End If
End Function


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Min / Max
'
' Get the min/max of an arbitrary number of arguments
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function Min(ParamArray values() As Variant) As Variant
   Dim minValue As Variant
   Dim value As Variant
   minValue = values(0)
   For Each value In values
       If value < minValue Then minValue = value
   Next
   Min = minValue
End Function
Private Function Max(ParamArray values() As Variant) As Variant
   Dim maxValue As Variant
   Dim value As Variant
   maxValue = values(0)
   For Each value In values
       If value > maxValue Then maxValue = value
   Next
   Max = maxValue
End Function


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' The following subs all call the ClickControl sub, passing the date label that has been
' clicked. It could have saved some lines of code to create a class module which handled
' the functionality of hovering and clicking on the different controls, then simply
' declaring each date label as an object of that class. However, that would have
' necessitated the inclusion of another module in order to make the CalendarForm function
' properly. Since the main goal of this project was to have this userform be completely
' self-contained, I opted for this route.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'User clicked on the background of the date label
Private Sub bgDate11_Click(): ClickControl lblDate11: End Sub
Private Sub bgDate12_Click(): ClickControl lblDate12: End Sub
Private Sub bgDate13_Click(): ClickControl lblDate13: End Sub
Private Sub bgDate14_Click(): ClickControl lblDate14: End Sub
Private Sub bgDate15_Click(): ClickControl lblDate15: End Sub
Private Sub bgDate16_Click(): ClickControl lblDate16: End Sub
Private Sub bgDate17_Click(): ClickControl lblDate17: End Sub
Private Sub bgDate21_Click(): ClickControl lblDate21: End Sub
Private Sub bgDate22_Click(): ClickControl lblDate22: End Sub
Private Sub bgDate23_Click(): ClickControl lblDate23: End Sub
Private Sub bgDate24_Click(): ClickControl lblDate24: End Sub
Private Sub bgDate25_Click(): ClickControl lblDate25: End Sub
Private Sub bgDate26_Click(): ClickControl lblDate26: End Sub
Private Sub bgDate27_Click(): ClickControl lblDate27: End Sub
Private Sub bgDate31_Click(): ClickControl lblDate31: End Sub
Private Sub bgDate32_Click(): ClickControl lblDate32: End Sub
Private Sub bgDate33_Click(): ClickControl lblDate33: End Sub
Private Sub bgDate34_Click(): ClickControl lblDate34: End Sub
Private Sub bgDate35_Click(): ClickControl lblDate35: End Sub
Private Sub bgDate36_Click(): ClickControl lblDate36: End Sub
Private Sub bgDate37_Click(): ClickControl lblDate37: End Sub
Private Sub bgDate41_Click(): ClickControl lblDate41: End Sub
Private Sub bgDate42_Click(): ClickControl lblDate42: End Sub
Private Sub bgDate43_Click(): ClickControl lblDate43: End Sub
Private Sub bgDate44_Click(): ClickControl lblDate44: End Sub
Private Sub bgDate45_Click(): ClickControl lblDate45: End Sub
Private Sub bgDate46_Click(): ClickControl lblDate46: End Sub
Private Sub bgDate47_Click(): ClickControl lblDate47: End Sub
Private Sub bgDate51_Click(): ClickControl lblDate51: End Sub
Private Sub bgDate52_Click(): ClickControl lblDate52: End Sub
Private Sub bgDate53_Click(): ClickControl lblDate53: End Sub
Private Sub bgDate54_Click(): ClickControl lblDate54: End Sub
Private Sub bgDate55_Click(): ClickControl lblDate55: End Sub
Private Sub bgDate56_Click(): ClickControl lblDate56: End Sub
Private Sub bgDate57_Click(): ClickControl lblDate57: End Sub
Private Sub bgDate61_Click(): ClickControl lblDate61: End Sub
Private Sub bgDate62_Click(): ClickControl lblDate62: End Sub
Private Sub bgDate63_Click(): ClickControl lblDate63: End Sub
Private Sub bgDate64_Click(): ClickControl lblDate64: End Sub
Private Sub bgDate65_Click(): ClickControl lblDate65: End Sub
Private Sub bgDate66_Click(): ClickControl lblDate66: End Sub
Private Sub bgDate67_Click(): ClickControl lblDate67: End Sub
'User clicked on the actual date label itself
Private Sub lblDate11_Click(): ClickControl lblDate11: End Sub
Private Sub lblDate12_Click(): ClickControl lblDate12: End Sub
Private Sub lblDate13_Click(): ClickControl lblDate13: End Sub
Private Sub lblDate14_Click(): ClickControl lblDate14: End Sub
Private Sub lblDate15_Click(): ClickControl lblDate15: End Sub
Private Sub lblDate16_Click(): ClickControl lblDate16: End Sub
Private Sub lblDate17_Click(): ClickControl lblDate17: End Sub
Private Sub lblDate21_Click(): ClickControl lblDate21: End Sub
Private Sub lblDate22_Click(): ClickControl lblDate22: End Sub
Private Sub lblDate23_Click(): ClickControl lblDate23: End Sub
Private Sub lblDate24_Click(): ClickControl lblDate24: End Sub
Private Sub lblDate25_Click(): ClickControl lblDate25: End Sub
Private Sub lblDate26_Click(): ClickControl lblDate26: End Sub
Private Sub lblDate27_Click(): ClickControl lblDate27: End Sub
Private Sub lblDate31_Click(): ClickControl lblDate31: End Sub
Private Sub lblDate32_Click(): ClickControl lblDate32: End Sub
Private Sub lblDate33_Click(): ClickControl lblDate33: End Sub
Private Sub lblDate34_Click(): ClickControl lblDate34: End Sub
Private Sub lblDate35_Click(): ClickControl lblDate35: End Sub
Private Sub lblDate36_Click(): ClickControl lblDate36: End Sub
Private Sub lblDate37_Click(): ClickControl lblDate37: End Sub
Private Sub lblDate41_Click(): ClickControl lblDate41: End Sub
Private Sub lblDate42_Click(): ClickControl lblDate42: End Sub
Private Sub lblDate43_Click(): ClickControl lblDate43: End Sub
Private Sub lblDate44_Click(): ClickControl lblDate44: End Sub
Private Sub lblDate45_Click(): ClickControl lblDate45: End Sub
Private Sub lblDate46_Click(): ClickControl lblDate46: End Sub
Private Sub lblDate47_Click(): ClickControl lblDate47: End Sub
Private Sub lblDate51_Click(): ClickControl lblDate51: End Sub
Private Sub lblDate52_Click(): ClickControl lblDate52: End Sub
Private Sub lblDate53_Click(): ClickControl lblDate53: End Sub
Private Sub lblDate54_Click(): ClickControl lblDate54: End Sub
Private Sub lblDate55_Click(): ClickControl lblDate55: End Sub
Private Sub lblDate56_Click(): ClickControl lblDate56: End Sub
Private Sub lblDate57_Click(): ClickControl lblDate57: End Sub
Private Sub lblDate61_Click(): ClickControl lblDate61: End Sub
Private Sub lblDate62_Click(): ClickControl lblDate62: End Sub
Private Sub lblDate63_Click(): ClickControl lblDate63: End Sub
Private Sub lblDate64_Click(): ClickControl lblDate64: End Sub
Private Sub lblDate65_Click(): ClickControl lblDate65: End Sub
Private Sub lblDate66_Click(): ClickControl lblDate66: End Sub
Private Sub lblDate67_Click(): ClickControl lblDate67: End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' The following subs all call the HoverControl sub, passing the background of the date
' label that has been hovered over.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'User hovered over the date background
Private Sub bgDate11_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate11: End Sub
Private Sub bgDate12_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate12: End Sub
Private Sub bgDate13_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate13: End Sub
Private Sub bgDate14_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate14: End Sub
Private Sub bgDate15_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate15: End Sub
Private Sub bgDate16_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate16: End Sub
Private Sub bgDate17_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate17: End Sub
Private Sub bgDate21_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate21: End Sub
Private Sub bgDate22_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate22: End Sub
Private Sub bgDate23_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate23: End Sub
Private Sub bgDate24_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate24: End Sub
Private Sub bgDate25_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate25: End Sub
Private Sub bgDate26_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate26: End Sub
Private Sub bgDate27_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate27: End Sub
Private Sub bgDate31_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate31: End Sub
Private Sub bgDate32_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate32: End Sub
Private Sub bgDate33_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate33: End Sub
Private Sub bgDate34_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate34: End Sub
Private Sub bgDate35_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate35: End Sub
Private Sub bgDate36_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate36: End Sub
Private Sub bgDate37_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate37: End Sub
Private Sub bgDate41_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate41: End Sub
Private Sub bgDate42_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate42: End Sub
Private Sub bgDate43_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate43: End Sub
Private Sub bgDate44_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate44: End Sub
Private Sub bgDate45_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate45: End Sub
Private Sub bgDate46_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate46: End Sub
Private Sub bgDate47_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate47: End Sub
Private Sub bgDate51_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate51: End Sub
Private Sub bgDate52_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate52: End Sub
Private Sub bgDate53_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate53: End Sub
Private Sub bgDate54_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate54: End Sub
Private Sub bgDate55_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate55: End Sub
Private Sub bgDate56_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate56: End Sub
Private Sub bgDate57_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate57: End Sub
Private Sub bgDate61_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate61: End Sub
Private Sub bgDate62_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate62: End Sub
Private Sub bgDate63_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate63: End Sub
Private Sub bgDate64_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate64: End Sub
Private Sub bgDate65_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate65: End Sub
Private Sub bgDate66_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate66: End Sub
Private Sub bgDate67_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate67: End Sub
'User hovered over the actual date label
Private Sub lblDate11_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate11: End Sub
Private Sub lblDate12_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate12: End Sub
Private Sub lblDate13_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate13: End Sub
Private Sub lblDate14_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate14: End Sub
Private Sub lblDate15_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate15: End Sub
Private Sub lblDate16_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate16: End Sub
Private Sub lblDate17_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate17: End Sub
Private Sub lblDate21_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate21: End Sub
Private Sub lblDate22_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate22: End Sub
Private Sub lblDate23_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate23: End Sub
Private Sub lblDate24_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate24: End Sub
Private Sub lblDate25_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate25: End Sub
Private Sub lblDate26_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate26: End Sub
Private Sub lblDate27_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate27: End Sub
Private Sub lblDate31_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate31: End Sub
Private Sub lblDate32_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate32: End Sub
Private Sub lblDate33_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate33: End Sub
Private Sub lblDate34_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate34: End Sub
Private Sub lblDate35_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate35: End Sub
Private Sub lblDate36_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate36: End Sub
Private Sub lblDate37_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate37: End Sub
Private Sub lblDate41_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate41: End Sub
Private Sub lblDate42_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate42: End Sub
Private Sub lblDate43_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate43: End Sub
Private Sub lblDate44_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate44: End Sub
Private Sub lblDate45_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate45: End Sub
Private Sub lblDate46_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate46: End Sub
Private Sub lblDate47_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate47: End Sub
Private Sub lblDate51_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate51: End Sub
Private Sub lblDate52_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate52: End Sub
Private Sub lblDate53_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate53: End Sub
Private Sub lblDate54_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate54: End Sub
Private Sub lblDate55_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate55: End Sub
Private Sub lblDate56_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate56: End Sub
Private Sub lblDate57_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate57: End Sub
Private Sub lblDate61_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate61: End Sub
Private Sub lblDate62_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate62: End Sub
Private Sub lblDate63_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate63: End Sub
Private Sub lblDate64_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate64: End Sub
Private Sub lblDate65_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate65: End Sub
Private Sub lblDate66_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate66: End Sub
Private Sub lblDate67_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single): HoverControl bgDate67: End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' UserForm_MouseMove / frameCalendar_MouseMove / bgDayLabels_MouseMove
'
' These three subs restore the last hovered date label to its original color when user is
' no longer hovering over any date labels.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If HoverControlName <> vbNullString Then
        Me.Controls(HoverControlName).BackColor = HoverControlColor
    End If
End Sub
Private Sub frameCalendar_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If HoverControlName <> vbNullString Then
        Me.Controls(HoverControlName).BackColor = HoverControlColor
    End If
End Sub
Private Sub bgDayLabels_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If HoverControlName <> vbNullString Then
        Me.Controls(HoverControlName).BackColor = HoverControlColor
    End If
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Known Bugs
'
' -If today button falls outside of years in combobox, it is possible for it to add years
'   to the combobox out of order. IE if combobox holds 2016-2026 and user clicks 'Today'
'   in 2014, combobox could then hold 2014, 2016, 2017, etc...
' -December 9999 generates an error when trying to calculate last day of month,  because
'   January 10000 is not a valid date in Excel
' -Occasionally, the month or year label is truncated. Cannot reproduce consistently
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Changelog
'
' v1.5.2
' -Bug fix: Userform not sizing properly in Word 2013
' -Bug fix: Minimum font size not being preserved correctly
' -Bug fix: Replaced WorksheetFunction.Max with custom Max function for compatibility
'   with other Office programs
'
' v1.5.1
' -Move all initialization code from GetDate and SetUserformSize to InitializeUserform
' -Fully qualify "Control" declarations as "MSForms.Control" for compatibility with Access
' -Bug fix: Eliminated FindLastDayOfMonth function, which contained a leap year bug
' -Bug fix: Calendar frame not setting background color correctly
' -Bug fix: Hover over calendar frame clears hovered control
'
' v1.5.0
' -Added a frame around all calendar elements. Calendar now positions and sizes itself
'   relative to its frame, rather than the userform as a whole. This way, the frame
'   can be placed anywhere within a larger userform to use it as an embedded calendar
'   rather than a popup. If you size the userform larger than the calendar, it will
'   remain that size, so you can add other controls.
'
' v1.4.0
' -Initial public release
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Future enhancements
'
' -Calculate all userform colors off one color argument, to reduce the wall of
'   arguments in GetDate function
' -Combine DateBorder and DateSpecialEffect arguments to one enumeration, since they
'   cancel eachother out
' -Remove userform toolbar (credit: Flemming Vadet, fv@smartoffice.dk, www.smartoffice.dk)
' -Remove extra row of trailing dates for months that have only 5 rows of dates, making
'   sure to handle special case of months with 4 rows, like Feb 2015 (credit: Greg Maxey,
'   gmaxey@mvps.org, gregmaxey.mvps.org/word_tips.htm)
' -Today button selects date and closes if Okay disabled
' -Add Cancel button
' -Better diferrentiation between disabled dates and trailing month dates (credit: Greg
'   Maxey, gmaxey@mvps.org, gregmaxey.mvps.org/word_tips.htm)
' -Move selected day calculation to SetDays function only, to avoid having to
'   redundantly calculate it in so many different functions
' -Add option to hide weekends (credit: Don Gray, don@rania.co.uk, www.rania.co.uk/ST)
' -Change cursor when hovering selectable controls
' -Month/Year in header change color on hover
' -Change buttons to flat labels w/ icons
' -Add tooltip when hovering over a date
' -Add worksheet to explain how to import/export userform
' -Add documentation explaining how to use with different date formats
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Attribute VB_Name = "CoverPage"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Implements IAutoformSheet


Attribute VB_Name = "CoverSheet"
Private SummaryDict As Dictionary

Sub CheckCover()

On Error Resume Next
Dim Sh As Shape
Dim i As Integer


Dim x As Integer
Dim ws As Worksheet
Dim WS_Count As Integer
WS_Count = ActiveWorkbook.Worksheets.Count
x = 80

Sheets(1).Select

If Not Sheets("Supplementary Instructions").Visible Then
activeSheet.Shapes(18).Visible = False
Else:
activeSheet.Shapes(18).Visible = True
End If

If Not Sheets("New Hires").Visible Then
activeSheet.Shapes("New Hires").Visible = False
Else:
activeSheet.Shapes("New Hires").Visible = True
End If

If Not Worksheets("Status Changes").Visible Then
activeSheet.Shapes("Status Changes").Visible = False
Else:
activeSheet.Shapes("Status Changes").Visible = True
End If

If Not Worksheets("Salary Changes").Visible Then
activeSheet.Shapes("Salary Changes").Visible = False
Else:
activeSheet.Shapes("Salary Changes").Visible = True
End If

If Not Sheets("Employee Info Changes").Visible Then
activeSheet.Shapes("Employee Info Changes").Visible = False
Else:
activeSheet.Shapes("Employee Info Changes").Visible = True
End If

If Not Worksheets("Transfers").Visible Then
activeSheet.Shapes("Transfers").Visible = False
Else:
activeSheet.Shapes("Transfers").Visible = True
End If

If Not Worksheets("Current Pay Hours").Visible Then
activeSheet.Shapes("Current Pay Hours").Visible = False
Else:
activeSheet.Shapes("Current Pay Hours").Visible = True
End If

If Not Worksheets("Current Pay Adjust").Visible Then
activeSheet.Shapes("Current Pay Adjust").Visible = False
Else:
activeSheet.Shapes("Current Pay Adjust").Visible = True
End If

If Not Worksheets("Separate Pay").Visible Then
activeSheet.Shapes("Separate Pay").Visible = False
Else:
activeSheet.Shapes("Separate Pay").Visible = True
End If

If Not Worksheets("Lump Sum").Visible Then
activeSheet.Shapes("Lump Sum").Visible = False
Else:
activeSheet.Shapes("Lump Sum").Visible = True
End If

If Not Worksheets("Employee Options").Visible Then
activeSheet.Shapes("Employee Options").Visible = False
Else:
activeSheet.Shapes("Employee Options").Visible = True
End If

If Not Worksheets("Manual Payment Update").Visible Then
activeSheet.Shapes("Manual Payment Update").Visible = False
Else:
activeSheet.Shapes("Manual Payment Update").Visible = True
End If

If Not Worksheets("Bonus Taxation").Visible Then
activeSheet.Shapes("Bonus Taxation").Visible = False
Else:
activeSheet.Shapes("Bonus Taxation").Visible = True
End If

activeSheet.Shapes("ADP").Visible = True

activeSheet.Shapes("Reset All").Visible = True

Sheets(1).Select





End Sub

Sub MoveCoverButtons()

On Error Resume Next
Dim Sh As Shape
Dim i As Integer


Dim x As Integer
Dim ws As Worksheet
Dim WS_Count As Integer
WS_Count = ActiveWorkbook.Worksheets.Count
x = 115


Sheets(1).Select
n = 35

If activeSheet.Shapes("New Hires").Visible = True Then
activeSheet.Shapes("New Hires").Top = x + n
n = n + 35
End If

If activeSheet.Shapes("Status Changes").Visible = True Then
activeSheet.Shapes("Status Changes").Top = x + n
n = n + 35
End If

If activeSheet.Shapes("Salary Changes").Visible = True Then
activeSheet.Shapes("Salary Changes").Top = x + n
n = n + 35
End If

If activeSheet.Shapes("Employee Info Changes").Visible = True Then
activeSheet.Shapes("Employee Info Changes").Top = x + n
n = n + 35
End If

If activeSheet.Shapes("Transfers").Visible = True Then
activeSheet.Shapes("Transfers").Top = x + n
n = n + 35
End If

If activeSheet.Shapes("Current Pay Hours").Visible = True Then
activeSheet.Shapes("Current Pay Hours").Top = x + n
n = n + 35
End If

If activeSheet.Shapes("Current Pay Adjust").Visible = True Then
activeSheet.Shapes("Current Pay Adjust").Top = x + n
n = n + 35
End If

If activeSheet.Shapes("Bonus Taxation").Visible = True Then
activeSheet.Shapes("Bonus Taxation").Top = x + n
n = n + 35
End If

If activeSheet.Shapes("Separate Pay").Visible = True Then
activeSheet.Shapes("Separate Pay").Top = x + n
n = n + 35
End If

If activeSheet.Shapes("Lump Sum").Visible = True Then
activeSheet.Shapes("Lump Sum").Top = x + n
n = n + 35
End If

If activeSheet.Shapes("Manual Payment Update").Visible = True Then
activeSheet.Shapes("Manual Payment Update").Top = x + n
n = n + 35
End If

If activeSheet.Shapes("Employee Options").Visible = True Then
activeSheet.Shapes("Employee Options").Top = x + n
n = n + 35
End If

activeSheet.Shapes("Reset All").Top = x + n
n = n + 35

activeSheet.Shapes("ADP").Top = x + n
n = n + 35


Sheets(1).Select


End Sub

Sub ReplaceCount()

    Dim shtCover As Worksheet
    Dim currSht As Worksheet
    Dim i
    Dim colorCheck As Boolean
    Dim colorCheckRng As Range
    
    Set shtCover = Sheets("CL0-Cover Sheet")
    If activeSheet.Name <> shtCover.Name Then Exit Sub

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    CreateSummaryDict
    
    On Error Resume Next
    For i = 0 To SummaryDict.Count - 1
'        Debug.Print SummaryDict.Keys()(i), SummaryDict.Items()(i)
        If SummaryDict.Items()(i) <> "Current Pay Hours" Then
            If shtCover.Range(SummaryDict.Keys()(i)).Formula <> "=COUNTA('" & SummaryDict.Items()(i) & "'!G:G)-1" Then
                shtCover.Range(SummaryDict.Keys()(i)).NumberFormat = "General"
                shtCover.Range(SummaryDict.Keys()(i)).Formula = "=COUNTA('" & SummaryDict.Items()(i) & "'!G:G)-1"
            End If
        Else
            With Sheets("Current Pay Hours TS")
                lastRowTS = .Cells(.Rows.Count, "G").End(xlUp).row
            End With
            
            If lastRowTS < 4 Then lastRowTS = 4
            
            If shtCover.Range("J25").Formula <> "=COUNTA('Current Pay Hours TS'!$K4:$LU" & lastRowTS & ")" Or shtCover.Range("J25").Formula <> "=COUNTA('Current Pay Hours'!L:L)-1" Then
                If Sheets("Current Pay Hours Setup").Range("B12").value = "Timesheet" Then
                    shtCover.Range("J25").Formula = "=COUNTA('Current Pay Hours TS'!$K4:$LU" & lastRowTS & ")"
                ElseIf Sheets("Current Pay Hours Setup").Range("B12").value = "Regular" Then
                    shtCover.Range("J25").Formula = "=COUNTA('Current Pay Hours'!L:L)-1"
                End If
            End If
                      
        End If
        
        Set currSht = Sheets(SummaryDict.Items()(i))
        
        If shtCover.Range(SummaryDict.Keys()(i)).value <> 0 Then
                        
            If currSht.Name = "Current Pay Hours" And Sheets("Current Pay Hours Setup").Range("B12").value = "Timesheet" Then Set currSht = Sheets("Current Pay Hours TS")

            lastRow = currSht.Cells.Find(what:="*", _
                After:=Range("A1"), _
                lookat:=xlPart, _
                LookIn:=xlFormulas, _
                SearchOrder:=xlByRows, _
                SearchDirection:=xlPrevious, _
                MatchCase:=False).row
        
            LastCol = currSht.Cells.Find(what:="*", _
                    After:=Range("A1"), _
                    lookat:=xlPart, _
                    LookIn:=xlFormulas, _
                    SearchOrder:=xlByColumns, _
                    SearchDirection:=xlPrevious, _
                    MatchCase:=False).Column

            
            ColLet = Split(Cells(1, LastCol).Address, "$")(1)
            
            Set colorCheckRng = currSht.Range("E4:" & ColLet & lastRow)
            
            colorCheck = ContainsColor(colorCheckRng, 22)
            
            If colorCheck = True Then
                shtCover.Range(SummaryDict.Keys()(i)).Interior.ColorIndex = 22
            Else
                shtCover.Range(SummaryDict.Keys()(i)).Interior.ColorIndex = 0
            End If
        
        Else
            shtCover.Range(SummaryDict.Keys()(i)).Interior.ColorIndex = 0
        End If
            
    Next i
    
    ThisWorkbook.Activate

    
    shtCover.Range("J32").NumberFormat = "General"
    If shtCover.Range("J32").Formula <> "=COUNTA('Supplementary Instructions'!$G:$G)" Then
        shtCover.Range("J32").NumberFormat = "General"
        shtCover.Range("J32").Formula = "=COUNTA('Supplementary Instructions'!$G:$G)"
    End If
    
    Application.EnableEvents = True
    
End Sub
Sub HideWarning()

    Dim shtCover As Worksheet
    
    Set shtCover = Sheets("CL0-Cover Sheet")
    
    On Error Resume Next
    shtCover.Shapes("Enable Warning").Visible = False
    'shtCover.Shapes("Warning Arrow").Visible = False

    
End Sub

Sub ShowWarning()

    Dim shtCover As Worksheet
    
    Set shtCover = Sheets("CL0-Cover Sheet")
    
    On Error Resume Next
    shtCover.Shapes("Enable Warning").Visible = True
    'shtCover.Shapes("Warning Arrow").Visible = True
    'ThisWorkbook.Save
    
End Sub

Public Sub CreateSummaryDict()

    Set SummaryDict = New Dictionary
    
    SummaryDict.Add "J19", "New Hires"
    SummaryDict.Add "J20", "Status Changes"
    SummaryDict.Add "J21", "Salary Changes"
    SummaryDict.Add "J22", "Employee Info Changes"
    SummaryDict.Add "J23", "Transfers"
    SummaryDict.Add "J25", "Current Pay Hours"
    SummaryDict.Add "J26", "Current Pay Adjust"
    SummaryDict.Add "J27", "Bonus Taxation"
    SummaryDict.Add "J28", "Separate Pay"
    SummaryDict.Add "J29", "Lump Sum"
    SummaryDict.Add "J30", "Manual Payment Update"
    SummaryDict.Add "J31", "Employee Options"
'    SummaryDict.Add "J32", "Supplementary Instructions"
    
End Sub

Function ContainsColor(Rng As Range, cellColor As Long) As Boolean

    Dim c As Range
    ContainsColor = False
    For Each c In Rng
        If c.Interior.ColorIndex = cellColor Then
            ContainsColor = True
            Exit For
        End If
    Next

End Function
Attribute VB_Name = "DemograghicSheet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Implements IAutoformSheet

Attribute VB_Name = "EmployeeTransfer"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public uniqueKey As String
Public employeeID As String
Public oldBranch As String
Public oldDepartment As String
Public newBranch As String
Public newDepartment As String
Public firstName As String
Public lastName As String
Public newUniqueKey As String
Public rowNumber As Long


Attribute VB_Name = "Format_Painter"
Attribute VB_Name = "General"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


'This function returns a boolean variable, true if shtName exists, otherwise false
'wb is an optional argument, this function looks for sheet in the current workbook if wb is not passed as a variable
Public Function SheetExists(shtName As String, Optional wb As Workbook) As Boolean
    Dim sht As Worksheet

    If wb Is Nothing Then Set wb = ThisWorkbook
    On Error Resume Next
    Set sht = wb.Sheets(shtName)
    On Error GoTo 0
    SheetExists = Not sht Is Nothing
End Function

'This function returns a string variable that corresponds to the column letter based on the number passed to to the function. 1 would return A
Public Function NumToExcelLetter(numberToConvert) As String
    Dim excelLetter
    excelLetter = Split(Cells(1, numberToConvert).Address(True, False), "$")
    NumToExcelLetter = excelLetter(0)
End Function
'This function returns the last row in the sh (sheet) passed to the function. It checks for the last cell used in the entire sheet
Public Function lastRow(Sh As Worksheet) As Integer
    On Error GoTo errHandler
    With Sh
    lastRow = Sh.Cells.Find(what:="*", _
                After:=Range("A1"), _
                lookat:=xlPart, _
                LookIn:=xlFormulas, _
                SearchOrder:=xlByRows, _
                SearchDirection:=xlPrevious, _
                MatchCase:=False).row
            
    End With
    Exit Function
errHandler:
    If err.Number = 91 Then
        lastRow = 0
        Resume Next
        Exit Function
    End If
    
End Function
'This function returns the last column in the sh (sheet) passed to the function. It checks for the last cell used in the entire sheet
Public Function lastColumn(Sh As Worksheet) As Integer
    'On Error GoTo ErrHandler
        With Sh
            lastColumn = Sh.Cells.Find(what:="*", _
                    After:=Range("A1"), _
                    lookat:=xlPart, _
                    LookIn:=xlFormulas, _
                    SearchOrder:=xlByColumns, _
                    SearchDirection:=xlPrevious, _
                    MatchCase:=False).Column
        End With
        
End Function

'This function creates a dictionary that stores employee data from the Master Setup sheet
'The Unique Key value is stored as the key and an array that stores employee info is stored as the dictionary value
Public Function CreateMasterDataDict() As Boolean
    Dim sht As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim DictKey As String
    Dim Array1
    Dim DeptOffset As Long
    
    Set sDict = New Scripting.Dictionary
    'Clears the disctionary
    sDict.RemoveAll
    Set general = New general
    
    Set sht = ThisWorkbook.Worksheets("MASTER setup")
    
    lastRow = general.lastRow(sht)
    
    
    'Loops through all records in the Master Setup sheet and stores the values in the dictionary
    For i = 2 To lastRow

        DictKey = Trim(sht.Range("G" & i))
        
        If DictKey <> "" Then
            
            'A-LName, B-FName, C-Initial, D-EmpID,E-Branch, F-Dept, Unique Key
            Array1 = Array(Trim(sht.Range("A" & i)), _
                            Trim(sht.Range("B" & i)), _
                            Trim(sht.Range("C" & i)), _
                            Trim(sht.Range("D" & i)), _
                            Trim(sht.Range("E" & i)), _
                            Trim(sht.Range("F" & i)), _
                            Trim(sht.Range("G" & i)))
        End If
        

        If Not sDict.Exists(DictKey) Then sDict.Add DictKey, Array1
    Next i
End Function
Attribute VB_Name = "IAutoformSheet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Attribute VB_Name = "LogicValidation"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'**********************NOT IN USE************************************
'Public Sub ValidateLogicInRange(Target, setupSheet)
'    Dim TargetCell As Range
'    Dim setupHeaderRange As Range
'    Dim setupCell As Range
'    Dim setupFields As Range
'    Dim setupHeaders As Range
'    Dim setupField As Range
'    Dim targetParent
'    Dim general As general
'
'    Set general = New general
'
'    'Check if Master data sheet exist
'    If general.SheetExists(Trim(UCase("MASTER"))) Then
'        Set setupSheet = ActiveWorkbook.Worksheets("MASTER")
'    Else
'        Exit Sub
'    End If
'
'    For Each TargetCell In Target.Cells
'        'Set setupHeaderRange = setupsheet.range("A1:A" & setupsheet.UsedRange.Rows.Count)
'
'        ' Get the Header for the target
'        targetParent = general.NumToExcelLetter(TargetCell.Column)
'        targetParent = Range("$" & targetParent & "$2").value
'
'        MsgBox targetParent
'    Next TargetCell
'End Sub
Attribute VB_Name = "MessageBox"
Sub TransMsg(eeID, branch, Dept)
    If ThisWorkbook.Sheets("Transfers").Columns("Q:Q").Hidden = False Then
        If branch = "" And Dept = "" Then
            MsgBox "A record for employee " & eeID & " already exists" _
                    & vbNewLine & "Please advise an alternate Employee Number.", vbCritical, "Duplicate Entry"
                    
        ElseIf branch <> "" And Dept <> "" Then
            MsgBox "A record for employee " & eeID & " with Branch " & branch & " and Department " & Dept & " already exists" _
                    & vbNewLine & vbNewLine & "Please advise an alternate Branch, Department or Employee Number", vbCritical, "Duplicate Entry"
                    
        ElseIf branch = "" And Dept <> "" Then
            MsgBox "A record for employee " & eeID & " with Department " & Dept & " already exists" _
                    & vbNewLine & "Please advise an alternate Department or Employee Number", vbCritical, "Duplicate Entry"
        End If
    ElseIf ThisWorkbook.Sheets("Transfers").Columns("Q:Q").Hidden = True Then
        If branch <> "" And Dept <> "" Then
            MsgBox "A record for employee " & eeID & " with Branch " & branch & " and Department " & Dept & " already exists" _
                    & vbNewLine & vbNewLine & "Please advise an alternate Branch or Department", vbCritical, "Duplicate Entry"
                    
        ElseIf branch = "" And Dept <> "" Then
            MsgBox "A record for employee " & eeID & " with Department " & Dept & " already exists" _
                    & vbNewLine & "Please advise an alternate Department", vbCritical, "Duplicate Entry"
        End If
    End If

End Sub

Sub NoEmpMsg(eeID, branch, Dept)
    If branch = "" And Dept = "" Then
        MsgBox "A record for employee " & eeID & " does not exist in the Employee Maintenance" _
                & vbNewLine & "Please advise an alternate Employee Number", vbCritical, "Duplicate Entry"
                
    ElseIf branch <> "" And Dept <> "" Then
        MsgBox "A record for employee " & eeID & " with Branch " & branch & " and Department " & Dept & " does not exist in the Employee Maintenance" _
                & vbNewLine & vbNewLine & "Please advise an alternate Branch, Department or Employee Number", vbCritical, "Duplicate Entry"
                
    ElseIf branch = "" And Dept <> "" Then
        MsgBox "A record for employee " & eeID & " with Department " & Dept & " does not exist in the Employee Maintenance" _
                & vbNewLine & "Please advise an alternate Department or Employee Number", vbCritical, "Duplicate Entry"
    End If

End Sub

Sub OneTaxMsg()
    
    If ThisWorkbook.Sheets("Transfers").Columns("Q:Q").Hidden = False Then
        MsgBox "The ""One Tax Form Flag"" must be set to ""Yes"" unless a new" & vbNewLine & "Province of Employment, CCRA/BN MRQ ID# or Employee ID is advised", vbInformation, "Transfers"
    ElseIf ThisWorkbook.Sheets("Transfers").Columns("Q:Q").Hidden = True Then
        MsgBox "The ""One Tax Form Flag"" must be set to ""Yes"" unless a new" & vbNewLine & "Province of Employment or CCRA/BN MRQ ID# is advised", vbInformation, "Transfers"
    End If

End Sub
Attribute VB_Name = "Navigation"
Sub CoverSheet_Click()
    
    Sheets("CL0-Cover Sheet").Activate
    Call ReplaceCount
    Range("G10").Select
    ActiveWindow.ScrollRow = 1
End Sub

Sub UserGuide_Click()

    Sheets("User Guide").Activate
    Call ReplaceItems
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub

Sub NewHire_Click()

    Sheets("New Hires").Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub
Sub StatusChg_Click()

    Sheets("Status Changes").Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub
Sub SalChg_Click()

    Sheets("Salary Changes").Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub
Sub EmpChg_Click()

    Sheets("Employee Info Changes").Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub
Sub Transfers_Click()

    Sheets("Transfers").Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub

Sub CurrentPayAdj_Click()

    Sheets("Current Pay Adjust").Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub

Sub Bonus_Click()

    Sheets("Bonus Taxation").Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub

Sub SepPay_Click()

    Sheets("Separate Pay").Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub

Sub LumpSum_Click()

    Sheets("Lump Sum").Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub

Sub ManPayUpd_Click()

    Sheets("Manual Payment Update").Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub

Sub EmpOptions_Click()

    Sheets("Employee Options").Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub

Sub SupInst_Click()

    Sheets("Supplementary Instructions").Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
End Sub



Attribute VB_Name = "PaySheet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Implements IAutoformSheet

Attribute VB_Name = "Printing"
Public RefDict As Dictionary

Sub Print_CurrAdj(printWB As Workbook)

    Application.ScreenUpdating = False
    
    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim employeeInfo As String
    Dim totalWidth As Double
    
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    SaveAsDir = ThisWorkbook.Path & "\"
    Set sht = ThisWorkbook.Sheets("Current Pay Adjust")
    
    Set general = New general
    lastRow = general.lastRow(sht)
    lastColumn = general.NumToExcelLetter(general.lastColumn(sht))
    lastColumnNum = general.lastColumn(sht)

    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "Current Pay Adjustments"

    
    Set thisSht = printWB.Sheets("Current Pay Adjustments")
        
    sht.Range("A3:" & lastColumn & "3").Copy
    
    thisSht.Range("A4").PasteSpecial xlPasteValues
    
    
    thisSht.Columns("A:J").Delete
    thisSht.Columns("D:D").Delete

    thisSht.Columns("B:C").NumberFormat = "$#,##0.00"
    thisSht.Columns("D:D").NumberFormat = "0.00"
    
    lastADJColumnNum = general.lastColumn(thisSht)
    lastADJColumn = general.NumToExcelLetter(lastADJColumnNum)
    
    thisSht.Range("A4:" & lastADJColumn & "4").Font.Bold = True
    thisSht.Range("A1").Select
    
    
    
    Call FormatBanner(thisSht.Range("A1:" & lastADJColumn & "3"))
        
    thisSht.Range("A1").value = CoCode & " Current Pay Adjustments for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
    
    If lastRow > 3 Then
        For i = 4 To lastRow
            nameRow = general.lastRow(thisSht) + 1

            employeeInfo = sht.Range("E" & i).value & "-" & sht.Range("F" & i).value & "-" & sht.Range("G" & i).value & "-" & sht.Range("H" & i).value & "," & sht.Range("I" & i).value
            
            If employeeInfo = "---," Then GoTo SkipItem
            
            Set findValue = thisSht.Range("A:" & lastADJColumn).Find(what:=employeeInfo, LookIn:=xlValues)

            If Not findValue Is Nothing Then GoTo SkipItem
            
            thisSht.Range("A" & nameRow & ":" & lastADJColumn & nameRow).MergeCells = True
            thisSht.Range("A" & nameRow & ":" & lastADJColumn & nameRow).Font.Bold = True
            thisSht.Range("A" & nameRow & ":" & lastADJColumn & nameRow).Interior.ColorIndex = 15
            thisSht.Range("A" & nameRow & ":" & lastADJColumn & nameRow).value = employeeInfo


            For empRow = 4 To lastRow
                ADJRow = general.lastRow(thisSht) + 1
                If employeeInfo = sht.Range("E" & empRow).value & "-" & sht.Range("F" & empRow).value & "-" & sht.Range("G" & empRow).value & "-" & sht.Range("H" & empRow).value & "," & sht.Range("I" & empRow).value Then
                    thisSht.Range("A" & ADJRow).value = sht.Range("K" & empRow).value
                    thisSht.Range("B" & ADJRow).value = sht.Range("L" & empRow).value
                    thisSht.Range("C" & ADJRow).value = sht.Range("M" & empRow).value
                    thisSht.Range("D" & ADJRow).value = sht.Range("O" & empRow).value
                End If
            Next empRow
SkipItem:
        Next i
    End If
    
    Call FormatAll(thisSht.UsedRange)

    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit
    
    totalWidth = (Columns("A:A").ColumnWidth + Columns("B:B").ColumnWidth + Columns("C:C").ColumnWidth + Columns("D:D").ColumnWidth)
    
    If totalWidth < 90.71 Then
        thisSht.Columns("A:A").ColumnWidth = thisSht.Columns("A:A").ColumnWidth + 7.7825
        thisSht.Columns("B:B").ColumnWidth = thisSht.Columns("B:B").ColumnWidth + 7.7825
        thisSht.Columns("C:C").ColumnWidth = thisSht.Columns("C:C").ColumnWidth + 7.7825
        thisSht.Columns("D:D").ColumnWidth = thisSht.Columns("D:D").ColumnWidth + 7.7825
    End If
    
End Sub
Sub Print_Bonus(printWB As Workbook)
    
    Application.ScreenUpdating = False
    
    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim employeeInfo As String
    
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    SaveAsDir = ThisWorkbook.Path & "\"
    Set sht = ThisWorkbook.Sheets("Bonus Taxation")
    
    Set general = New general
    lastRow = general.lastRow(sht)
    lastColumn = general.NumToExcelLetter(general.lastColumn(sht))
    lastColumnNum = general.lastColumn(sht)

    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "Bonus Payments"
    Set thisSht = printWB.Sheets("Bonus Payments")
        
    sht.Range("A3:" & lastColumn & "3").Copy
    
    thisSht.Range("A4").PasteSpecial xlPasteValues
    
    
    thisSht.Columns("A:J").Delete
    thisSht.Columns("E:E").Delete
    thisSht.Columns("H:H").Delete

    thisSht.Columns("B:C").NumberFormat = "$#,##0.00"
    thisSht.Columns("D:D").NumberFormat = "0.00"
    thisSht.Columns("E:E").NumberFormat = "0"
    
    lastBonusColumnNum = general.lastColumn(thisSht)
    lastBonusColumn = general.NumToExcelLetter(lastBonusColumnNum)
    
    thisSht.Range("A4:" & lastBonusColumn & "4").Font.Bold = True
    thisSht.Range("A1").Select
    
    
    
    Call FormatBanner(thisSht.Range("A1:" & lastBonusColumn & "3"))
        
    thisSht.Range("A1").value = CoCode & " Bonus Payments for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
    
    If lastRow > 3 Then
        For i = 4 To lastRow
            nameRow = general.lastRow(thisSht) + 1

            employeeInfo = sht.Range("E" & i).value & "-" & sht.Range("F" & i).value & "-" & sht.Range("G" & i).value & "-" & sht.Range("H" & i).value & "," & sht.Range("I" & i).value

            If employeeInfo = "---," Then GoTo SkipItem

            Set findValue = thisSht.Range("A:" & lastBonusColumn).Find(what:=employeeInfo, LookIn:=xlValues)

            If Not findValue Is Nothing Then GoTo SkipItem
            
            thisSht.Range("A" & nameRow & ":" & lastBonusColumn & nameRow).MergeCells = True
            thisSht.Range("A" & nameRow & ":" & lastBonusColumn & nameRow).Font.Bold = True
            thisSht.Range("A" & nameRow & ":" & lastBonusColumn & nameRow).Interior.ColorIndex = 15
            thisSht.Range("A" & nameRow & ":" & lastBonusColumn & nameRow).value = employeeInfo

            For empRow = 4 To lastRow
                bonusRow = general.lastRow(thisSht) + 1
                If employeeInfo = sht.Range("E" & empRow).value & "-" & sht.Range("F" & empRow).value & "-" & sht.Range("G" & empRow).value & "-" & sht.Range("H" & empRow).value & "," & sht.Range("I" & empRow).value Then
                    thisSht.Range("A" & bonusRow).value = sht.Range("K" & empRow).value
                    thisSht.Range("B" & bonusRow).value = sht.Range("L" & empRow).value
                    thisSht.Range("C" & bonusRow).value = sht.Range("M" & empRow).value
                    thisSht.Range("D" & bonusRow).value = sht.Range("N" & empRow).value
                    thisSht.Range("E" & bonusRow).value = sht.Range("P" & empRow).value
                    thisSht.Range("F" & bonusRow).value = sht.Range("Q" & empRow).value
                    thisSht.Range("G" & bonusRow).value = sht.Range("R" & empRow).value
                    thisSht.Range("H" & bonusRow).value = sht.Range("T" & empRow).value
                    thisSht.Range("I" & bonusRow).value = sht.Range("U" & empRow).value
                End If
            Next empRow
SkipItem:
        Next i
    End If
    
    Call FormatAll(thisSht.UsedRange)

    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit
    
End Sub

Sub Print_SepPay(printWB As Workbook)

    Application.ScreenUpdating = False

    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim employeeInfo As String
    
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    SaveAsDir = ThisWorkbook.Path & "\"
    Set sht = ThisWorkbook.Sheets("Separate Pay")
    
    Set general = New general
    lastRow = general.lastRow(sht)
    lastColumn = general.NumToExcelLetter(general.lastColumn(sht))
    lastColumnNum = general.lastColumn(sht)

    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "Separate Pay"
    Set thisSht = printWB.Sheets("Separate Pay")
        
    sht.Range("A3:" & lastColumn & "3").Copy
    
    thisSht.Range("A4").PasteSpecial xlPasteValues
    
    
    thisSht.Columns("A:J").Delete
    thisSht.Columns("I:I").Delete

    thisSht.Columns("B:C").NumberFormat = "$#,##0.00"
    thisSht.Columns("D:D").NumberFormat = "0.00"
    thisSht.Columns("E:E").NumberFormat = "0.0000"
    thisSht.Columns("F:F").NumberFormat = "0"
    
    lastSepPayColumnNum = general.lastColumn(thisSht)
    lastSepPayColumn = general.NumToExcelLetter(lastSepPayColumnNum)
    
    thisSht.Range("A4:" & lastSepPayColumn & "4").Font.Bold = True
    thisSht.Range("A1").Select
    
    
    
    Call FormatBanner(thisSht.Range("A1:" & lastSepPayColumn & "3"))
        
    thisSht.Range("A1").value = CoCode & " Separate Payments for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
    
    If lastRow > 3 Then
        For i = 4 To lastRow
            nameRow = general.lastRow(thisSht) + 1

            employeeInfo = sht.Range("E" & i).value & "-" & sht.Range("F" & i).value & "-" & sht.Range("G" & i).value & "-" & sht.Range("H" & i).value & "," & sht.Range("I" & i).value

            If employeeInfo = "---," Then GoTo SkipItem

            Set findValue = thisSht.Range("A:" & lastSepPayColumn).Find(what:=employeeInfo, LookIn:=xlValues)

            If Not findValue Is Nothing Then GoTo SkipItem
            
            thisSht.Range("A" & nameRow & ":" & lastSepPayColumn & nameRow).MergeCells = True
            thisSht.Range("A" & nameRow & ":" & lastSepPayColumn & nameRow).Font.Bold = True
            thisSht.Range("A" & nameRow & ":" & lastSepPayColumn & nameRow).Interior.ColorIndex = 15
            thisSht.Range("A" & nameRow & ":" & lastSepPayColumn & nameRow).value = employeeInfo


            For empRow = 4 To lastRow
                sepPayRow = general.lastRow(thisSht) + 1
                If employeeInfo = sht.Range("E" & empRow).value & "-" & sht.Range("F" & empRow).value & "-" & sht.Range("G" & empRow).value & "-" & sht.Range("H" & empRow).value & "," & sht.Range("I" & empRow).value Then
                    thisSht.Range("A" & sepPayRow).value = sht.Range("K" & empRow).value
                    thisSht.Range("B" & sepPayRow).value = sht.Range("L" & empRow).value
                    thisSht.Range("C" & sepPayRow).value = sht.Range("M" & empRow).value
                    thisSht.Range("D" & sepPayRow).value = sht.Range("N" & empRow).value
                    thisSht.Range("E" & sepPayRow).value = sht.Range("O" & empRow).value
                    thisSht.Range("F" & sepPayRow).value = sht.Range("P" & empRow).value
                    thisSht.Range("G" & sepPayRow).value = sht.Range("Q" & empRow).value
                    thisSht.Range("H" & sepPayRow).value = sht.Range("R" & empRow).value
                    thisSht.Range("I" & sepPayRow).value = sht.Range("T" & empRow).value
                    thisSht.Range("J" & sepPayRow).value = sht.Range("U" & empRow).value
                End If
            Next empRow
SkipItem:
        Next i
    End If
    
    Call FormatAll(thisSht.UsedRange)

    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit

End Sub

Sub Print_LumpSum(printWB As Workbook)

    Application.ScreenUpdating = False

    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim employeeInfo As String
    
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    SaveAsDir = ThisWorkbook.Path & "\"
    Set sht = ThisWorkbook.Sheets("Lump Sum")
    
    Set general = New general
    lastRow = general.lastRow(sht)
    lastColumn = general.NumToExcelLetter(general.lastColumn(sht))
    lastColumnNum = general.lastColumn(sht)

    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "Lump Sum"
    Set thisSht = printWB.Sheets("Lump Sum")
    
    sht.Range("A3:" & lastColumn & "3").Copy
    
    thisSht.Range("A4").PasteSpecial xlPasteValues
    
    
    thisSht.Columns("A:J").Delete
    thisSht.Columns("D:D").Delete

    thisSht.Columns("B:C").NumberFormat = "$#,##0.00"
    thisSht.Columns("D:D").NumberFormat = "0"
    
    lastLumpSumColumnNum = general.lastColumn(thisSht)
    lastLumpSumColumn = general.NumToExcelLetter(lastLumpSumColumnNum)
    
    thisSht.Range("A4:" & lastLumpSumColumn & "4").Font.Bold = True
    thisSht.Range("A1").Select
    
    
    
    Call FormatBanner(thisSht.Range("A1:" & lastLumpSumColumn & "3"))
        
    thisSht.Range("A1").value = CoCode & " Lump Sum Payments for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
    
    If lastRow > 3 Then
        For i = 4 To lastRow
            nameRow = general.lastRow(thisSht) + 1

            employeeInfo = sht.Range("E" & i).value & "-" & sht.Range("F" & i).value & "-" & sht.Range("G" & i).value & "-" & sht.Range("H" & i).value & "," & sht.Range("I" & i).value

            If employeeInfo = "---," Then GoTo SkipItem

            Set findValue = thisSht.Range("A:" & lastLumpSumColumn).Find(what:=employeeInfo, LookIn:=xlValues)

            If Not findValue Is Nothing Then GoTo SkipItem
            
            thisSht.Range("A" & nameRow & ":" & lastLumpSumColumn & nameRow).MergeCells = True
            thisSht.Range("A" & nameRow & ":" & lastLumpSumColumn & nameRow).Font.Bold = True
            thisSht.Range("A" & nameRow & ":" & lastLumpSumColumn & nameRow).Interior.ColorIndex = 15
            thisSht.Range("A" & nameRow & ":" & lastLumpSumColumn & nameRow).value = employeeInfo

            For empRow = 4 To lastRow
                lumpSumRow = general.lastRow(thisSht) + 1
                If employeeInfo = sht.Range("E" & empRow).value & "-" & sht.Range("F" & empRow).value & "-" & sht.Range("G" & empRow).value & "-" & sht.Range("H" & empRow).value & "," & sht.Range("I" & empRow).value Then
                    thisSht.Range("A" & lumpSumRow).value = sht.Range("K" & empRow).value
                    thisSht.Range("B" & lumpSumRow).value = sht.Range("L" & empRow).value
                    thisSht.Range("C" & lumpSumRow).value = sht.Range("M" & empRow).value
                    thisSht.Range("D" & lumpSumRow).value = sht.Range("O" & empRow).value
                    thisSht.Range("E" & lumpSumRow).value = sht.Range("P" & empRow).value
                End If
            Next empRow
SkipItem:
        Next i
    End If
    
    Call FormatAll(thisSht.UsedRange)

    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit

End Sub

Sub Print_NewHire(printWB As Workbook)

    Application.ScreenUpdating = False

    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim employeeInfo As String
    
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    SaveAsDir = ThisWorkbook.Path & "\"
    Set sht = ThisWorkbook.Sheets("New Hires")
    
    Set general = New general
    lastRow = general.lastRow(sht)
    lastColumn = general.NumToExcelLetter(general.lastColumn(sht))
    lastColumnNum = general.lastColumn(sht)

    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "New Hires"
    Set thisSht = printWB.Sheets("New Hires")
    
    On Error Resume Next

    
    nhRow = 6
    
       
    If lastRow > 3 Then
        For i = 4 To lastRow
        
            lastNHColumnNum = general.lastColumn(thisSht)
            If IsEmpty(lastNHColumnNum) Then lastNHColumnNum = 1
            lastNHColumn = general.NumToExcelLetter(lastNHColumnNum)
            
            employeeInfo = sht.Range("E" & i).value & "-" & sht.Range("F" & i).value & "-" & sht.Range("G" & i).value & "-" & sht.Range("H" & i).value & "," & sht.Range("I" & i).value
            
            If employeeInfo = "---," Then GoTo SkipItem
            
            Set findValue = thisSht.Range("A:" & lastNHColumn).Find(what:=employeeInfo, LookIn:=xlValues)

            If Not findValue Is Nothing Then GoTo SkipItem
            
            thisSht.Range("A" & nhRow - 1 & ":F" & nhRow - 1).MergeCells = True
            thisSht.Range("A" & nhRow - 1 & ":F" & nhRow - 1).Font.Bold = True
            thisSht.Range("A" & nhRow - 1 & ":F" & nhRow - 1).Interior.ColorIndex = 15
            thisSht.Range("A" & nhRow - 1 & ":F" & nhRow - 1).value = employeeInfo
            Call FormatAll(thisSht.Range("A" & nhRow - 1 & ":F" & nhRow - 1))
            
            sht.Range("L3:Q3").Copy
            thisSht.Range("A" & nhRow).PasteSpecial xlPasteValues
            thisSht.Range("A" & nhRow & ":F" & nhRow).Interior.ColorIndex = 15
            Call FormatAll(thisSht.Range("A" & nhRow & ":F" & nhRow + 1))
            sht.Range("L" & i & ":Q" & i).Copy
            thisSht.Range("A" & nhRow + 1).PasteSpecial xlPasteValues
            
            sht.Range("R3:W3").Copy
            thisSht.Range("A" & nhRow + 2).PasteSpecial xlPasteValues
            thisSht.Range("A" & nhRow + 2 & ":F" & nhRow + 2).Interior.ColorIndex = 15
            Call FormatAll(thisSht.Range("A" & nhRow + 2 & ":F" & nhRow + 3))
            sht.Range("R" & i & ":W" & i).Copy
            thisSht.Range("A" & nhRow + 3).PasteSpecial xlPasteValues
            
            sht.Range("X3:AC3").Copy
            thisSht.Range("A" & nhRow + 4).PasteSpecial xlPasteValues
            thisSht.Range("A" & nhRow + 4 & ":F" & nhRow + 4).Interior.ColorIndex = 15
            Call FormatAll(thisSht.Range("A" & nhRow + 4 & ":F" & nhRow + 5))
            sht.Range("X" & i & ":AC" & i).Copy
            thisSht.Range("A" & nhRow + 5).PasteSpecial xlPasteValues
            
            sht.Range("AD3:AI3").Copy
            thisSht.Range("A" & nhRow + 6).PasteSpecial xlPasteValues
            thisSht.Range("A" & nhRow + 6 & ":F" & nhRow + 6).Interior.ColorIndex = 15
            Call FormatAll(thisSht.Range("A" & nhRow + 6 & ":F" & nhRow + 7))
            sht.Range("AD" & i & ":AI" & i).Copy
            thisSht.Range("A" & nhRow + 7).PasteSpecial xlPasteValues
            
            sht.Range("AJ3:AL3").Copy
            thisSht.Range("A" & nhRow + 8).PasteSpecial xlPasteValues
            thisSht.Range("A" & nhRow + 8 & ":C" & nhRow + 8).Interior.ColorIndex = 15
            Call FormatAll(thisSht.Range("A" & nhRow + 8 & ":C" & nhRow + 9))
            sht.Range("AJ" & i & ":AL" & i).Copy
            thisSht.Range("A" & nhRow + 9).PasteSpecial xlPasteValues
            
            nhRow = nhRow + 12
SkipItem:
        Next i
    End If
    
    thisSht.Range("A1").Select
    
    lastNHColumnNum = general.lastColumn(thisSht)
    If IsEmpty(lastNHColumnNum) Then lastNHColumnNum = 1
    lastNHColumn = general.NumToExcelLetter(lastNHColumnNum)

    Call FormatBanner(thisSht.Range("A1:" & lastNHColumn & "3"))
   
    thisSht.Range("A1").value = CoCode & " New Hires for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
    
    thisSht.Range("A1").Interior.ColorIndex = 0
       
    Call FormatAll(Selection)

    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit

End Sub

Sub Print_EmpInfoChg(printWB As Workbook)

    Application.ScreenUpdating = False

    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim employeeInfo As String
    
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    SaveAsDir = ThisWorkbook.Path & "\"
    Set sht = ThisWorkbook.Sheets("Employee Info Changes")
    
    Set general = New general
    lastRow = general.lastRow(sht)
    lastColumn = general.NumToExcelLetter(general.lastColumn(sht))
    lastColumnNum = general.lastColumn(sht)

    
    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "Employee Info Changes"
    Set thisSht = printWB.Sheets("Employee Info Changes")
    
    On Error Resume Next

    
    empInfoRow = 6
    
       
    If lastRow > 3 Then
        For i = 4 To lastRow
        
            lastEmpInfoColumnNum = general.lastColumn(thisSht)
            If IsEmpty(lastEmpInfoColumnNum) Then lastEmpInfoColumnNum = 1
            lastEmpInfoColumn = general.NumToExcelLetter(lastEmpInfoColumnNum)
            
            employeeInfo = sht.Range("E" & i).value & "-" & sht.Range("F" & i).value & "-" & sht.Range("G" & i).value & "-" & sht.Range("H" & i).value & "," & sht.Range("I" & i).value
            
            If employeeInfo = "---," Then GoTo SkipItem
            
            Set findValue = thisSht.Range("A:" & lastEmpInfoColumn).Find(what:=employeeInfo, LookIn:=xlValues)

            If Not findValue Is Nothing Then GoTo SkipItem
            
            thisSht.Range("A" & empInfoRow - 1 & ":F" & empInfoRow - 1).MergeCells = True
            thisSht.Range("A" & empInfoRow - 1 & ":F" & empInfoRow - 1).Font.Bold = True
            thisSht.Range("A" & empInfoRow - 1 & ":F" & empInfoRow - 1).Interior.ColorIndex = 15
            thisSht.Range("A" & empInfoRow - 1 & ":F" & empInfoRow - 1).value = employeeInfo
            Call FormatAll(thisSht.Range("A" & empInfoRow - 1 & ":F" & empInfoRow - 1))
            
            sht.Range("L3:Q3").Copy
            thisSht.Range("A" & empInfoRow).PasteSpecial xlPasteValues
            thisSht.Range("A" & empInfoRow & ":F" & empInfoRow).Interior.ColorIndex = 15
            Call FormatAll(thisSht.Range("A" & empInfoRow & ":F" & empInfoRow + 1))
            sht.Range("L" & i & ":Q" & i).Copy
            thisSht.Range("A" & empInfoRow + 1).PasteSpecial xlPasteValues
            
            sht.Range("R3:X3").Copy
            thisSht.Range("A" & empInfoRow + 2).PasteSpecial xlPasteValues
            sht.Range("R" & i & ":X" & i).Copy
            thisSht.Range("A" & empInfoRow + 3).PasteSpecial xlPasteValues
            thisSht.Range("F" & empInfoRow + 2 & ":F" & empInfoRow + 3).Delete xlShiftToLeft
            thisSht.Range("A" & empInfoRow + 2 & ":F" & empInfoRow + 2).Interior.ColorIndex = 15
            Call FormatAll(thisSht.Range("A" & empInfoRow + 2 & ":F" & empInfoRow + 3))
            
            sht.Range("AE3:AJ3").Copy
            thisSht.Range("A" & empInfoRow + 4).PasteSpecial xlPasteValues
            sht.Range("AE" & i & ":AJ" & i).Copy
            thisSht.Range("A" & empInfoRow + 5).PasteSpecial xlPasteValues
            thisSht.Range("A" & empInfoRow + 4 & ":F" & empInfoRow + 4).Interior.ColorIndex = 15
            Call FormatAll(thisSht.Range("A" & empInfoRow + 4 & ":F" & empInfoRow + 5))
            
            sht.Range("AK3").Copy
            thisSht.Range("A" & empInfoRow + 6).PasteSpecial xlPasteValues
            sht.Range("AK" & i).Copy
            thisSht.Range("A" & empInfoRow + 7).PasteSpecial xlPasteValues
            thisSht.Range("A" & empInfoRow + 6).Interior.ColorIndex = 15
            Call FormatAll(thisSht.Range("A" & empInfoRow + 6 & ":A" & empInfoRow + 7))
            
            
            empInfoRow = empInfoRow + 10
SkipItem:
        Next i
    End If
    
    thisSht.Range("A1").Select
    
    lastEmpInfoColumnNum = general.lastColumn(thisSht)
    If IsEmpty(lastEmpInfoColumnNum) Then lastEmpInfoColumnNum = 1
    lastEmpInfoColumn = general.NumToExcelLetter(lastEmpInfoColumnNum)

    Call FormatBanner(thisSht.Range("A1:" & lastEmpInfoColumn & "3"))
   
    thisSht.Range("A1").value = CoCode & " Employee Info Changes for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
    
    thisSht.Range("A1").Interior.ColorIndex = 0
       
    Call FormatAll(Selection)

    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit
    
    
    thisSht.Cells.Replace what:="~~", Replacement:="", _
    lookat:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, _
    SearchFormat:=False, ReplaceFormat:=False

End Sub


Sub Print_EmpOptions(printWB As Workbook)

    Application.ScreenUpdating = False

    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim employeeInfo As String
    Dim allOptions As Range
    Dim currOption As Range
    
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    SaveAsDir = ThisWorkbook.Path & "\"
    Set sht = ThisWorkbook.Sheets("Employee Options")
    
    Set general = New general
    lastRow = general.lastRow(sht)
    lastColumn = general.NumToExcelLetter(general.lastColumn(sht))
    lastColumnNum = general.lastColumn(sht)

    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "Employee Options"
    Set thisSht = printWB.Sheets("Employee Options")
    
    sht.Range("A3:" & lastColumn & lastRow).Copy
    
    thisSht.Range("A4").PasteSpecial xlPasteValues
    
    
    thisSht.Columns("A:D").Delete
    thisSht.Columns("F:F").Delete
    
    lastEmpOptColumnNum = general.lastColumn(thisSht)
    lastEmpOptColumn = general.NumToExcelLetter(lastEmpOptColumnNum)
    
    Set allOptions = thisSht.Range("A4:" & lastEmpOptColumn & "4")
    
    nextCol = 1
    
    For i = 1 To lastEmpOptColumnNum
    
        If Application.WorksheetFunction.CountA(thisSht.Columns(nextCol)) < 2 Then
            Columns(nextCol).Delete
        Else
            nextCol = nextCol + 1
        End If
        
    Next i
    On Error Resume Next
    allOptions.Font.Bold = True
    thisSht.Range("A1").Select
    
    lastEmpOptColumnNum = general.lastColumn(thisSht)
    lastEmpOptColumn = general.NumToExcelLetter(lastEmpOptColumnNum)
    
    Call FormatBanner(thisSht.Range("A1:" & lastEmpOptColumn & "3"))
        
    thisSht.Range("A1").value = CoCode & " Employee Options for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
        
    Call FormatAll(thisSht.UsedRange)

    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit

End Sub

Sub Print_CurrHrs(printWB As Workbook)

    Application.ScreenUpdating = False

    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim employeeInfo As String
    Dim findValue As Range
        
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    SaveAsDir = ThisWorkbook.Path & "\"
    Set sht = ThisWorkbook.Sheets("Current Pay Hours")
    
    Set general = New general
    lastRow = general.lastRow(sht)
    lastColumn = general.NumToExcelLetter(general.lastColumn(sht))
    lastColumnNum = general.lastColumn(sht)
    
    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "Current Pay Hours"
    Set thisSht = printWB.Sheets("Current Pay Hours")
        
    sht.Range("A3:" & lastColumn & "3").Copy
    
    thisSht.Range("A4").PasteSpecial xlPasteValues
    
    
    thisSht.Columns("A:J").Delete
    thisSht.Columns("E:E").Delete

    thisSht.Columns("B:B").NumberFormat = "0.00"
    thisSht.Columns("C:C").NumberFormat = "$#,##0.00"
    thisSht.Columns("D:D").NumberFormat = "0"
    
    lastHoursColumnNum = general.lastColumn(thisSht)
    lastHoursColumn = general.NumToExcelLetter(lastHoursColumnNum)
    
    thisSht.Range("A4:" & lastHoursColumn & "4").Font.Bold = True
    thisSht.Range("A1").Select
    
    
    
    Call FormatBanner(thisSht.Range("A1:" & lastHoursColumn & "3"))
        
    thisSht.Range("A1").value = CoCode & " Current Pay Hours for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
    
    If lastRow > 3 Then
        For i = 4 To lastRow
            nameRow = general.lastRow(thisSht) + 1

            employeeInfo = sht.Range("E" & i).value & "-" & sht.Range("F" & i).value & "-" & sht.Range("G" & i).value & "-" & sht.Range("H" & i).value & "," & sht.Range("I" & i).value

            If employeeInfo = "---," Then GoTo SkipItem
            
            Set findValue = thisSht.Range("A:" & lastHoursColumn).Find(what:=employeeInfo, LookIn:=xlValues)

            If Not findValue Is Nothing Then GoTo SkipItem
            
            thisSht.Range("A" & nameRow & ":" & lastHoursColumn & nameRow).MergeCells = True
            thisSht.Range("A" & nameRow & ":" & lastHoursColumn & nameRow).Font.Bold = True
            thisSht.Range("A" & nameRow & ":" & lastHoursColumn & nameRow).Interior.ColorIndex = 15
            thisSht.Range("A" & nameRow & ":" & lastHoursColumn & nameRow).value = employeeInfo

            For empRow = 4 To lastRow
                hrsRow = general.lastRow(thisSht) + 1
                If employeeInfo = sht.Range("E" & empRow).value & "-" & sht.Range("F" & empRow).value & "-" & sht.Range("G" & empRow).value & "-" & sht.Range("H" & empRow).value & "," & sht.Range("I" & empRow).value Then
                    thisSht.Range("A" & hrsRow).value = sht.Range("K" & empRow).value
                    thisSht.Range("B" & hrsRow).value = sht.Range("L" & empRow).value
                    thisSht.Range("C" & hrsRow).value = sht.Range("M" & empRow).value
                    thisSht.Range("D" & hrsRow).value = sht.Range("O" & empRow).value
                    thisSht.Range("E" & hrsRow).value = sht.Range("P" & empRow).value
                End If
                
            Next empRow
SkipItem:
        Next i
    End If
    
    Call FormatAll(thisSht.UsedRange)

    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit
    
    If totalWidth < 90.71 Then
        thisSht.Columns("A:A").ColumnWidth = thisSht.Columns("A:A").ColumnWidth + 5
        thisSht.Columns("B:B").ColumnWidth = thisSht.Columns("B:B").ColumnWidth + 5
        thisSht.Columns("C:C").ColumnWidth = thisSht.Columns("C:C").ColumnWidth + 5
        thisSht.Columns("D:D").ColumnWidth = thisSht.Columns("D:D").ColumnWidth + 5
    End If

End Sub

Sub Print_ManPay(printWB As Workbook)

    Application.ScreenUpdating = False

    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim employeeInfo As String
    Dim findValue As Range
        
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    SaveAsDir = ThisWorkbook.Path & "\"
    Set sht = ThisWorkbook.Sheets("Manual Payment Update")
    
    Set general = New general
    lastRow = general.lastRow(sht)
    lastColumn = general.NumToExcelLetter(general.lastColumn(sht))
    lastColumnNum = general.lastColumn(sht)

    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "Manual Payment Update"
    Set thisSht = printWB.Sheets("Manual Payment Update")
        
    sht.Range("A3:" & lastColumn & "3").Copy
    
    thisSht.Range("A4").PasteSpecial xlPasteValues
    
    
    thisSht.Columns("A:J").Delete
    thisSht.Columns("H:O").Delete

    thisSht.Columns("B:C").NumberFormat = "$#,##0.00"
    thisSht.Columns("D:D").NumberFormat = "0.00"
    
    lastManPayColumnNum = general.lastColumn(thisSht)
    lastManPayColumn = general.NumToExcelLetter(lastManPayColumnNum)
    
    thisSht.Range("A4:" & lastManPayColumn & "4").Font.Bold = True
    thisSht.Range("A1").Select
    
    
    
    Call FormatBanner(thisSht.Range("A1:" & lastManPayColumn & "3"))
        
    thisSht.Range("A1").value = CoCode & " Manual Payment Update for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
    
    If lastRow > 3 Then
        For i = 4 To lastRow
            nameRow = general.lastRow(thisSht) + 1

            employeeInfo = sht.Range("E" & i).value & "-" & sht.Range("F" & i).value & "-" & sht.Range("G" & i).value & "-" & sht.Range("H" & i).value & "," & sht.Range("I" & i).value

            If employeeInfo = "---," Then GoTo SkipItem

            Set findValue = thisSht.Range("A:" & lastManPayColumn).Find(what:=employeeInfo, LookIn:=xlValues)

            If Not findValue Is Nothing Then GoTo SkipItem
            
            thisSht.Range("A" & nameRow & ":" & lastManPayColumn & nameRow).MergeCells = True
            thisSht.Range("A" & nameRow & ":" & lastManPayColumn & nameRow).Font.Bold = True
            thisSht.Range("A" & nameRow & ":" & lastManPayColumn & nameRow).Interior.ColorIndex = 15
            thisSht.Range("A" & nameRow & ":" & lastManPayColumn & nameRow).value = employeeInfo

            For empRow = 4 To lastRow
                manPayRow = general.lastRow(thisSht) + 1
                If employeeInfo = sht.Range("E" & empRow).value & "-" & sht.Range("F" & empRow).value & "-" & sht.Range("G" & empRow).value & "-" & sht.Range("H" & empRow).value & "," & sht.Range("I" & empRow).value Then
                    thisSht.Range("A" & manPayRow).value = sht.Range("K" & empRow).value
                    thisSht.Range("B" & manPayRow).value = sht.Range("L" & empRow).value
                    thisSht.Range("C" & manPayRow).value = sht.Range("M" & empRow).value
                    thisSht.Range("D" & manPayRow).value = sht.Range("N" & empRow).value
                    thisSht.Range("E" & manPayRow).value = sht.Range("O" & empRow).value
                    thisSht.Range("F" & manPayRow).value = sht.Range("P" & empRow).value
                    thisSht.Range("G" & manPayRow).value = sht.Range("Q" & empRow).value
                    thisSht.Range("H" & manPayRow).value = sht.Range("Z" & empRow).value
                End If
                
            Next empRow
SkipItem:
        Next i
    End If
    
    Call FormatAll(thisSht.UsedRange)

    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit

End Sub

Sub Print_StatusChg(printWB As Workbook)

    Application.ScreenUpdating = False

    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim employeeInfo As String
    
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    SaveAsDir = ThisWorkbook.Path & "\"
    Set sht = ThisWorkbook.Sheets("Status Changes")
    
    Set general = New general
    lastRow = general.lastRow(sht)
    lastColumn = general.NumToExcelLetter(general.lastColumn(sht))
    lastColumnNum = general.lastColumn(sht)

    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "Status Changes"
    Set thisSht = printWB.Sheets("Status Changes")
        
    sht.Range("A3:" & lastColumn & "3").Copy
    
    thisSht.Range("A4").PasteSpecial xlPasteValues
    
    
    thisSht.Columns("A:J").Delete
   
    lastStatusChgColumnNum = general.lastColumn(thisSht)
    lastStatusChgColumn = general.NumToExcelLetter(lastStatusChgColumnNum)
    
    thisSht.Range("A4:" & lastStatusChgColumn & "4").Font.Bold = True
    thisSht.Range("A1").Select
    
    
    
    Call FormatBanner(thisSht.Range("A1:" & lastStatusChgColumn & "3"))
        
    thisSht.Range("A1").value = CoCode & " Status Changes for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
    
    If lastRow > 3 Then
        For i = 4 To lastRow
            nameRow = general.lastRow(thisSht) + 1

            employeeInfo = sht.Range("E" & i).value & "-" & sht.Range("F" & i).value & "-" & sht.Range("G" & i).value & "-" & sht.Range("H" & i).value & "," & sht.Range("I" & i).value

            If employeeInfo = "---," Then GoTo SkipItem

            Set findValue = thisSht.Range("A:" & lastStatusChgColumn).Find(what:=employeeInfo, LookIn:=xlValues)

            If Not findValue Is Nothing Then GoTo SkipItem
            
            thisSht.Range("A" & nameRow & ":" & lastStatusChgColumn & nameRow).MergeCells = True
            thisSht.Range("A" & nameRow & ":" & lastStatusChgColumn & nameRow).Font.Bold = True
            thisSht.Range("A" & nameRow & ":" & lastStatusChgColumn & nameRow).Interior.ColorIndex = 15
            thisSht.Range("A" & nameRow & ":" & lastStatusChgColumn & nameRow).value = employeeInfo

            For empRow = 4 To lastRow
                statusChgRow = general.lastRow(thisSht) + 1
                If employeeInfo = sht.Range("E" & empRow).value & "-" & sht.Range("F" & empRow).value & "-" & sht.Range("G" & empRow).value & "-" & sht.Range("H" & empRow).value & "," & sht.Range("I" & empRow).value Then
                    thisSht.Range("A" & statusChgRow).value = sht.Range("K" & empRow).value
                    thisSht.Range("B" & statusChgRow).value = sht.Range("L" & empRow).value
                    thisSht.Range("C" & statusChgRow).value = sht.Range("M" & empRow).value
                    thisSht.Range("D" & statusChgRow).value = sht.Range("N" & empRow).value
                    thisSht.Range("E" & statusChgRow).value = sht.Range("O" & empRow).value
                    thisSht.Range("F" & statusChgRow).value = sht.Range("P" & empRow).value
                End If
            Next empRow
SkipItem:
        Next i
    End If
    
    Call FormatAll(thisSht.UsedRange)

    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit

End Sub

Sub Print_SalaryChg(printWB As Workbook)

    Application.ScreenUpdating = False

    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim employeeInfo As String
    
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    SaveAsDir = ThisWorkbook.Path & "\"
    Set sht = ThisWorkbook.Sheets("Salary Changes")
    
    Set general = New general
    lastRow = general.lastRow(sht)
    lastColumn = general.NumToExcelLetter(general.lastColumn(sht))
    lastColumnNum = general.lastColumn(sht)

    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "Salary Changes"
    Set thisSht = printWB.Sheets("Salary Changes")
        
    sht.Range("A3:" & lastColumn & "3").Copy
    
    thisSht.Range("A4").PasteSpecial xlPasteValues
    
    
    thisSht.Columns("A:J").Delete
    thisSht.Columns("C:C").NumberFormat = "$#,##0.00"
    thisSht.Columns("D:D").NumberFormat = "0.000"
   
    lastSalaryChgColumnNum = general.lastColumn(thisSht)
    lastSalaryChgColumn = general.NumToExcelLetter(lastSalaryChgColumnNum)
    
    thisSht.Range("A4:" & lastSalaryChgColumn & "4").Font.Bold = True
    thisSht.Range("A1").Select
    
    
    
    Call FormatBanner(thisSht.Range("A1:" & lastSalaryChgColumn & "3"))
        
    thisSht.Range("A1").value = CoCode & " Salary Changes for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
    
    If lastRow > 3 Then
        For i = 4 To lastRow
            nameRow = general.lastRow(thisSht) + 1

            employeeInfo = sht.Range("E" & i).value & "-" & sht.Range("F" & i).value & "-" & sht.Range("G" & i).value & "-" & sht.Range("H" & i).value & "," & sht.Range("I" & i).value

            If employeeInfo = "---," Then GoTo SkipItem

            Set findValue = thisSht.Range("A:" & lastSalaryChgColumn).Find(what:=employeeInfo, LookIn:=xlValues)

            If Not findValue Is Nothing Then GoTo SkipItem
            
            thisSht.Range("A" & nameRow & ":" & lastSalaryChgColumn & nameRow).MergeCells = True
            thisSht.Range("A" & nameRow & ":" & lastSalaryChgColumn & nameRow).Font.Bold = True
            thisSht.Range("A" & nameRow & ":" & lastSalaryChgColumn & nameRow).Interior.ColorIndex = 15
            thisSht.Range("A" & nameRow & ":" & lastSalaryChgColumn & nameRow).value = employeeInfo

            For empRow = 4 To lastRow
                salaryChgRow = general.lastRow(thisSht) + 1
                If employeeInfo = sht.Range("E" & empRow).value & "-" & sht.Range("F" & empRow).value & "-" & sht.Range("G" & empRow).value & "-" & sht.Range("H" & empRow).value & "," & sht.Range("I" & empRow).value Then
                    thisSht.Range("A" & salaryChgRow).value = sht.Range("K" & empRow).value
                    thisSht.Range("B" & salaryChgRow).value = sht.Range("L" & empRow).value
                    thisSht.Range("C" & salaryChgRow).value = sht.Range("M" & empRow).value
                    thisSht.Range("D" & salaryChgRow).value = sht.Range("N" & empRow).value
                    thisSht.Range("E" & salaryChgRow).value = sht.Range("O" & empRow).value
                End If
            Next empRow
SkipItem:
        Next i
    End If
    
    Call FormatAll(thisSht.UsedRange)

    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit
    
    thisSht.Cells.Replace what:="~~", Replacement:="", _
    lookat:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, _
    SearchFormat:=False, ReplaceFormat:=False

End Sub

Sub Print_Transfers(printWB As Workbook)

    Application.ScreenUpdating = False
    
    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim employeeInfo As String
    
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    SaveAsDir = ThisWorkbook.Path & "\"
    Set sht = ThisWorkbook.Sheets("Transfers")
    
    Set general = New general
    lastRow = general.lastRow(sht)
    lastColumn = general.NumToExcelLetter(general.lastColumn(sht))
    lastColumnNum = general.lastColumn(sht)

    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "Transfers"
    Set thisSht = printWB.Sheets("Transfers")
        
    sht.Range("A3:" & lastColumn & "3").Copy
    
    thisSht.Range("A4").PasteSpecial xlPasteValues
    
    
    thisSht.Columns("A:J").Delete
    If sht.Columns("Q:Q").Hidden = True Then thisSht.Columns("G:G").Delete
   
    lastTransferColumnNum = general.lastColumn(thisSht)
    lastTransferColumn = general.NumToExcelLetter(lastTransferColumnNum)
    
    thisSht.Range("A4:" & lastTransferColumn & "4").Font.Bold = True
    thisSht.Range("A1").Select
    
    
    
    Call FormatBanner(thisSht.Range("A1:" & lastTransferColumn & "3"))
        
    thisSht.Range("A1").value = CoCode & " Transfers for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
    
    If lastRow > 3 Then
        For i = 4 To lastRow
            nameRow = general.lastRow(thisSht) + 1

            employeeInfo = sht.Range("E" & i).value & "-" & sht.Range("F" & i).value & "-" & sht.Range("G" & i).value & "-" & sht.Range("H" & i).value & "," & sht.Range("I" & i).value

            If employeeInfo = "---," Then GoTo SkipItem

            Set findValue = thisSht.Range("A:" & lastTransferColumn).Find(what:=employeeInfo, LookIn:=xlValues)

            If Not findValue Is Nothing Then GoTo SkipItem
            
            thisSht.Range("A" & nameRow & ":" & lastTransferColumn & nameRow).MergeCells = True
            thisSht.Range("A" & nameRow & ":" & lastTransferColumn & nameRow).Font.Bold = True
            thisSht.Range("A" & nameRow & ":" & lastTransferColumn & nameRow).Interior.ColorIndex = 15
            thisSht.Range("A" & nameRow & ":" & lastTransferColumn & nameRow).value = employeeInfo

            For empRow = 4 To lastRow
                transferRow = general.lastRow(thisSht) + 1
                If employeeInfo = sht.Range("E" & empRow).value & "-" & sht.Range("F" & empRow).value & "-" & sht.Range("G" & empRow).value & "-" & sht.Range("H" & empRow).value & "," & sht.Range("I" & empRow).value Then
                    thisSht.Range("A" & transferRow).value = sht.Range("K" & empRow).value
                    thisSht.Range("B" & transferRow).value = sht.Range("L" & empRow).value
                    thisSht.Range("C" & transferRow).value = sht.Range("M" & empRow).value
                    thisSht.Range("D" & transferRow).value = sht.Range("N" & empRow).value
                    thisSht.Range("E" & transferRow).value = sht.Range("O" & empRow).value
                    thisSht.Range("F" & transferRow).value = sht.Range("P" & empRow).value
                    If sht.Columns("Q:Q").Hidden = False Then thisSht.Range("G" & transferRow).value = sht.Range("Q" & empRow).value
                End If
            Next empRow
SkipItem:
        Next i
    End If
    
    Call FormatAll(thisSht.UsedRange)

    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit
    
    thisSht.Cells.Replace what:="~~", Replacement:="", _
        lookat:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, _
        SearchFormat:=False, ReplaceFormat:=False
    
End Sub

Sub Print_SuppInstr(printWB)

    Application.ScreenUpdating = False
    
    Dim sht As Worksheet
    Dim CoCode As String
    Dim thisSht As Worksheet
    Dim suppRow As Integer
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    
    Set sht = ThisWorkbook.Sheets("Supplementary Instructions")
    printWB.Sheets.Add(After:=printWB.Sheets(1)).Name = "Supplementary Instructions"
    Set thisSht = printWB.Sheets("Supplementary Instructions")
    
    sht.Range("E3:F3").Copy
    
    thisSht.Range("A4").PasteSpecial xlPasteValues
    
    Call FormatBanner(thisSht.Range("A1:B3"))
        
    thisSht.Range("A1").value = CoCode & " Supplementary Instructions for Input on " & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G14").value
    
    
    Set general = New general
    lastRow = general.lastRow(sht)
       
    If lastRow > 3 Then
        For i = 4 To lastRow
            suppRow = general.lastRow(thisSht) + 1
            thisSht.Range("A" & suppRow).value = sht.Range("E" & i).value
            thisSht.Range("B" & suppRow).value = sht.Range("F" & i).value
        Next i
    End If
    
    Call FormatAll(thisSht.UsedRange)
    thisSht.Cells.EntireColumn.AutoFit
    thisSht.Cells.EntireRow.AutoFit
    
    If thisSht.Columns("B:B").ColumnWidth < 57 Then thisSht.Columns("B:B").ColumnWidth = 57
    thisSht.Rows(4).Font.Bold = True
    thisSht.Rows(4).HorizontalAlignment = xlCenter

    

End Sub

Sub FormatBanner(bannerCells As Range)

    With bannerCells
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
        .Font.Bold = True
        .Font.Size = 20
        .Interior.ColorIndex = 15
    End With

End Sub

Sub FormatAll(allCells As Range)

    allCells.Borders(xlDiagonalDown).LineStyle = xlNone
    allCells.Borders(xlDiagonalUp).LineStyle = xlNone
    With allCells.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With allCells.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With allCells.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With allCells.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With allCells.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With allCells.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With

End Sub

Sub PrintAll()
'
'    If Application.Evaluate("=SUM(J19:J32)") < 1 Then
'        MsgBox "There are no entries to print", vbCritical, "Printer Friendly View"
'        Exit Sub
'    End If
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    Dim wkSheets()
    Dim tabsAF()
    Dim CoCode As String
    Dim wbk As Variant
    Dim afTab As Variant
    Dim sht As Worksheet
    Dim printWB As Workbook
    Dim key As Variant
    
    
    CoCode = ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value
    
    Application.ScreenUpdating = False
    
    
    Set printWB = Workbooks.Add
    printWB.Sheets.Add(Before:=printWB.Sheets(1)).Name = "Cover Sheet"
    
    ThisWorkbook.Sheets("CL0-Cover Sheet").Activate
    Cells.Copy
    printWB.Activate
    
    activeSheet.Paste
    printWB.Sheets("Cover Sheet").Columns("A:A").Delete
    
    Application.DisplayAlerts = False
    Call Print_SuppInstr(printWB)
    Call Print_EmpOptions(printWB)
    Call Print_ManPay(printWB)
    Call Print_LumpSum(printWB)
    Call Print_SepPay(printWB)
    Call Print_Bonus(printWB)
    Call Print_CurrAdj(printWB)
    ThisWorkbook.Activate
    If ThisWorkbook.Sheets("Current Pay Hours Setup").Range("B12").value = "Timesheet" Then Call TransToVert_NoViewToggle
    ThisWorkbook.Sheets("CL0-Cover Sheet").Activate
    printWB.Activate
    Call Print_CurrHrs(printWB)
    Call Print_Transfers(printWB)
    Call Print_EmpInfoChg(printWB)
    Call Print_SalaryChg(printWB)
    Call Print_StatusChg(printWB)
    Call Print_NewHire(printWB)
    Application.DisplayAlerts = True

    Call CreateRefDict
       
    For Each key In RefDict.Keys
        
        Application.DisplayAlerts = False
        If Application.WorksheetFunction.CountA(printWB.Sheets(key).UsedRange) <= RefDict(key) And key <> "Cover Sheet" Then
            printWB.Sheets(key).Delete
        End If
        
        Application.DisplayAlerts = True
    
    Next
    
    Application.EnableEvents = True
    
End Sub

Sub CreateRefDict()
    
    Set RefDict = New Dictionary
        
    RefDict.Add "Cover Sheet", "47"
    RefDict.Add "New Hires", "1"
    RefDict.Add "Status Changes", "7"
    RefDict.Add "Salary Changes", "6"
    RefDict.Add "Employee Info Changes", "1"
    RefDict.Add "Transfers", "7"
    RefDict.Add "Current Pay Hours", "5"
    RefDict.Add "Current Pay Adjustments", "5"
    RefDict.Add "Bonus Payments", "10"
    RefDict.Add "Separate Pay", "11"
    RefDict.Add "Lump Sum", "6"
    RefDict.Add "Manual Payment Update", "9"
    RefDict.Add "Employee Options", "1"
    RefDict.Add "Supplementary Instructions", "3"
    RefDict.Add "Sheet1", "0"


    
End Sub


Attribute VB_Name = "Robot_Load"
Public errMSG As String
Public errMSG2 As String
Public profileMSG As String
Public Function Robot_GetCsv(sheetName As String, FileName As String, ImpName As String, FileType As String)
    Dim ws As Worksheet
    Dim strFile As String
    Dim MyData As String
    Dim strData() As String
    Dim TempAr() As String
    Dim i As Long
    Dim ArCol() As Long
    
    Application.ScreenUpdating = False
    
    Set ws = ActiveWorkbook.Sheets(sheetName)
    
    strFile = FileName
    If FileName = "" Then
        If ImpName = "Earnings" Then
            strFile = frmRobotAdminTool.txtLoadLocation.value & FileType
            FileName = strFile
            If Dir(FileName) = vbNullString Then
                Exit Function
            End If

        ElseIf ImpName = "EmpOptions" Then
            strFile = frmRobotAdminTool.txtLoadLocation.value & FileType
            FileName = strFile
            If Dir(FileName) = vbNullString Then
                Exit Function
            End If

        End If
    
    End If
    
    'Open the text file in one go
    Open FileName For Binary As #1
    MyData = Space$(LOF(1))
    Get #1, , MyData
    Close #1
    strData() = Split(MyData, vbCrLf)

    'Check for any empty headers and replace ",," by ","
    Do While InStr(1, strData(0), ",,") > 0
        strData(0) = Replace(strData(0), ",,", ",")
    Loop

    'Split the headers to find the number of columns
    TempAr() = Split(strData(0), ",")

    'Create the Array for TEXT
    ReDim ArCol(1 To UBound(TempAr))
    For i = 1 To UBound(TempAr)
        ArCol(i) = 2
    Next i
    Application.EnableEvents = False
    ws.Range("A1").CurrentRegion.Clear
    ws.Cells.NumberFormat = "@"
    
    
    With ws.QueryTables.Add(Connection:="TEXT;" & strFile, Destination:=ws.Range("A1"))
'         .TextFilePlatform = 65001 'UTF-8
         .TextFileParseType = xlDelimited
         .TextFileCommaDelimiter = True
         .TextFileOtherDelimiter = ","
         .TextFileColumnDataTypes = ArCol
         .Refresh
    End With
    If sheetName = "MASTER setup" Then
        Call Robot_ManipulateMasterEmployeeData
    End If
    
    If sheetName = "MASTER setup" Then Call InitializeDict
    Application.EnableEvents = True
    If ImpName = "Earnings" Then
'        MsgBox "Data has been successfully imported in the Earnings/Deductions Master data tab", vbInformation, " Autoform Earnings/Deductions"
'    ElseIf ImpName = "EmpOptions" Then
'        MsgBox "Data has been successfully imported in the Employee Options Master data tab", vbInformation, "Autoform Options"
    End If

End Function

Public Function AutoLoad_GetCsv(sheetName As String, FileName As String, ImpName As String)
    Dim ws As Worksheet
    Dim strFile As String
    Dim MyData As String
    Dim strData() As String
    Dim TempAr() As String
    Dim i As Long
    Dim ArCol() As Long
    
    Set ws = ActiveWorkbook.Sheets(sheetName)
    
    strFile = FileName
    If FileName = "" Then
        If ImpName = "Earnings" Then
            strFile = frmAdminTool.txtLoadLocation.value & "\Company ENDN.csv"
            FileName = strFile
            If Dir(FileName) = vbNullString Then
                Exit Function
            End If

        ElseIf ImpName = "EmpOptions" Then
            strFile = frmAdminTool.txtLoadLocation.value & "\Company EO.csv"
            FileName = strFile
            If Dir(FileName) = vbNullString Then
                Exit Function
            End If

        End If
    
    End If
    
    'Open the text file in one go
    Open FileName For Binary As #1
    MyData = Space$(LOF(1))
    Get #1, , MyData
    Close #1
    strData() = Split(MyData, vbCrLf)

    'Check for any empty headers and replace ",," by ","
    Do While InStr(1, strData(0), ",,") > 0
        strData(0) = Replace(strData(0), ",,", ",")
    Loop

    'Split the headers to find the number of columns
    TempAr() = Split(strData(0), ",")

    'Create the Array for TEXT
    ReDim ArCol(1 To UBound(TempAr))
    For i = 1 To UBound(TempAr)
        ArCol(i) = 2
    Next i
    Application.EnableEvents = False
    ws.Range("A1").CurrentRegion.Clear
    ws.Cells.NumberFormat = "@"
    
    
    With ws.QueryTables.Add(Connection:="TEXT;" & strFile, Destination:=ws.Range("A1"))
'         .TextFilePlatform = 65001 'UTF-8
         .TextFileParseType = xlDelimited
         .TextFileCommaDelimiter = True
         .TextFileOtherDelimiter = ","
         .TextFileColumnDataTypes = ArCol
         .Refresh
    End With
    If sheetName = "MASTER setup" Then
        Call Robot_ManipulateMasterEmployeeData
    End If
    
    Call InitializeDict
    Application.EnableEvents = True
    If ImpName = "Earnings" Then
'        MsgBox "Data has been successfully imported in the Earnings/Deductions Master data tab", vbInformation, " Autoform Earnings/Deductions"
'    ElseIf ImpName = "EmpOptions" Then
'        MsgBox "Data has been successfully imported in the Employee Options Master data tab", vbInformation, "Autoform Options"
    End If

End Function

Public Sub Robot_ManipulateMasterEmployeeData()
    Dim Sh As Worksheet
    Dim general As general
    Dim TypeValidation As TypeValidation
    Dim tempArray1() As String
    Dim tempArray2() As String
    Dim FullName() As Variant
    Dim strFullName
    Dim Lname()
    Dim Fname()
    Dim initial() As String
    Dim i As Integer
    Dim lastRow As Integer
    
    Application.ScreenUpdating = False
    
    Set general = New general
    Set TypeValidation = New TypeValidation
    Set Sh = ThisWorkbook.Worksheets("MASTER setup")
    
    Sh.Activate
'    Sh.Columns("B:C").Select
    lastRow = general.lastRow(Sh)
    Sh.Columns("B:C").Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Sh.Range("A1") = "Last Name"
    Sh.Range("B1") = "First Name"
    Sh.Range("C1") = "Initial"
    
    ReDim Lname(1 To lastRow)
    ReDim Fname(1 To lastRow)
    ReDim initial(1 To lastRow)
    
    If lastRow = 2 Then
        strFullName = Sh.Range("A2")
        tempArray1 = Split(strFullName, ",")
        
        i = 1
        Lname(i) = Trim(tempArray1(0))
        
        If Right(tempArray1(1), 1) = " " Then
            Fname(i) = Trim(tempArray1(1))
            initial(i) = ""
        Else
            tempArray2() = Split(Trim(tempArray1(1)), " ")
            If UBound(tempArray2) = 0 Then
                Fname(i) = tempArray2(0)
                initial(i) = ""
            ElseIf UBound(tempArray2) = 1 Then
                Fname(i) = Trim(tempArray2(0))
                initial(i) = Trim(tempArray2(1))
            ElseIf UBound(tempArray2) = 2 Then
                Fname(i) = tempArray2(0) & " " & tempArray2(1)
                initial(i) = Trim(tempArray2(2))
            ElseIf UBound(tempArray2) = 3 Then
                Fname(i) = tempArray2(0) & " " & tempArray2(1) & " " & tempArray2(2)
                initial(i) = Trim(tempArray2(3))
            ElseIf UBound(tempArray2) = 4 Then
                Fname(i) = tempArray2(0) & " " & tempArray2(1) & " " & tempArray2(2) & " " & tempArray2(3)
                initial(i) = Trim(tempArray2(4))
            Else
                Fname(i) = tempArray2(0) & " " & tempArray2(1) & " " & tempArray2(2) & " " & tempArray2(3) & " " & tempArray2(4)
                initial(i) = Trim(tempArray2(5))
            End If
        End If
    Else
        FullName() = Sh.Range("A2:A" & lastRow)
        For i = 1 To UBound(FullName)
            tempArray1 = Split(FullName(i, 1), ",")
            Lname(i) = Trim(tempArray1(0))
        
            If Right(tempArray1(1), 1) = " " Then
                Fname(i) = Trim(tempArray1(1))
                initial(i) = ""
            Else
                tempArray2() = Split(Trim(tempArray1(1)), " ")
                If UBound(tempArray2) = 0 Then
                    Fname(i) = tempArray2(0)
                    initial(i) = ""
                ElseIf UBound(tempArray2) = 1 Then
                    Fname(i) = Trim(tempArray2(0))
                    initial(i) = Trim(tempArray2(1))
                ElseIf UBound(tempArray2) = 2 Then
                    Fname(i) = tempArray2(0) & " " & tempArray2(1)
                    initial(i) = Trim(tempArray2(2))
                ElseIf UBound(tempArray2) = 3 Then
                    Fname(i) = tempArray2(0) & " " & tempArray2(1) & " " & tempArray2(2)
                    initial(i) = Trim(tempArray2(3))
                ElseIf UBound(tempArray2) = 4 Then
                    Fname(i) = tempArray2(0) & " " & tempArray2(1) & " " & tempArray2(2) & " " & tempArray2(3)
                    initial(i) = Trim(tempArray2(4))
                Else
                    Fname(i) = tempArray2(0) & " " & tempArray2(1) & " " & tempArray2(2) & " " & tempArray2(3) & " " & tempArray2(4)
                    initial(i) = Trim(tempArray2(5))
                End If
            End If
        Next i
    End If
    
    Sh.Range("A2:A" & lastRow) = Application.Transpose(Lname)
    Sh.Range("B2:B" & lastRow) = Application.Transpose(Fname)
    Sh.Range("C2:C" & lastRow) = Application.Transpose(initial)
    
    Sh.Range("E:F").Delete
    Sh.Range("G:R").Delete
    Sh.Range("H:BL").Delete
    Sh.Columns("G:G").Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
     
    Sh.Range("G:G").NumberFormat = "@"
    Sh.Range("G1") = "Unique Key"
    
    lastRow = general.lastRow(Sh)
    For i = 2 To lastRow
        'Update Branch
        tempArray1 = Split(Sh.Range("E" & i), " -")
        Sh.Range("E" & i) = Trim(tempArray1(0))
        'Update Department
        tempArray1 = Split(Sh.Range("F" & i), " -")
        Sh.Range("F" & i) = Trim(tempArray1(0))
        'Add Unique Key: Emp ID, Branch and Dept
        Sh.Range("G" & i) = Trim(Sh.Range("D" & i)) & "|" & Trim(Sh.Range("E" & i)) & "|" & Trim(Sh.Range("F" & i))
    Next i


    ThisWorkbook.Worksheets("CL0-Cover Sheet").Activate
'    MsgBox "Data has been successfully imported into the Employee Maintenance", vbInformation, "Employee Maintenance"
End Sub

Public Sub Robot_SetupEmployeeOptions()
    Dim general As general
    Dim sht As Worksheet
    Dim Datasht As Worksheet
    Dim lastRow As Integer
    Dim lastColumn As Integer
    Dim i As Long
    Dim DictCSVIndex As Scripting.Dictionary
    Dim EngOptions() As String
    
    Application.ScreenUpdating = False
    
    Set DictCSVIndex = New Scripting.Dictionary
    Set general = New general
    Set Datasht = ThisWorkbook.Worksheets("Employee Options Setup")
    Set sht = ThisWorkbook.Worksheets("Employee Options")
    lastRow = general.lastRow(Datasht)
    lastColumn = general.lastColumn(sht)
    
    
    For i = 2 To lastRow
        If Trim(Datasht.Range("G" & i)) <> "" Then
            If DictCSVIndex.Exists(Val(Trim(Datasht.Range("G" & i)))) Then
                MsgBox "Duplicate CSV Index found on row: " & Datasht.Range("G" & i).row, vbCritical, "Setup Employee Options"
                Exit Sub
            Else
                If Trim(Datasht.Range("G" & i)) <> "" Then
                    DictCSVIndex.Add Val(Trim(Datasht.Range("G" & i))), Trim(Datasht.Range("A" & i))
                End If
            End If
         End If
    Next i
    
    
    
    ReDim EngOptions(lastRow - 1)
    For i = 1 To DictCSVIndex.Count
        If DictCSVIndex.Exists(i) Then
            EngOptions(i - 1) = DictCSVIndex(i)
        Else
            MsgBox "Missing CSV Index: " & i, vbCritical, "Setup Employee Options"
            Exit Sub
        End If
    Next i
    ReDim Preserve EngOptions(i - 1)
    sht.Range("K:LL").EntireColumn.Hidden = False
    
    Application.EnableEvents = False
    sht.Range("D3:" & general.NumToExcelLetter(lastColumn) & "3").ClearContents
    sht.Range("D3").Resize(1, UBound(EngOptions)).value = EngOptions
    sht.Range("K:" & general.NumToExcelLetter(general.lastColumn(sht))).EntireColumn.AutoFit
'    sht.Columns("J").EntireColumn.Hidden = True
    sht.Range(general.NumToExcelLetter(UBound(EngOptions) + 4) & ":LL").EntireColumn.Hidden = True
'    MsgBox "Setup completed for Employee Options tab", vbInformation, "Setup Employee Options"
    Application.EnableEvents = True
'    MsgBox "Data has been successfully imported in the Employee Options Master data tab", vbInformation, "Autoform Options"

End Sub

Sub Robot_LoadAutoform()

    Dim CoCode As String
    Dim sFound As String
    On Error Resume Next
    Call RoboLoad
    
ExitProc:

    If err.Number <> 0 Then
        
        sFound = Dir(Environ("USERPROFILE") & "\Desktop\Extract_Autoform\*Employee Profile Report*.xls")
        
        CoCode = Left(sFound, 4)
        
        SaveAsDir = frmRobotAdminTool.txtLoadLocation.value & "\"
        
        
        With Workbooks(CoCode & "_Autoform_Message_file.txt").Sheets(1)
            errLogRow = .Cells(.Rows.Count, "A").End(xlUp).row
        End With
        

        Workbooks(CoCode & "_Autoform_Message_file.txt").Sheets(1).Range("A" & errLogRow + 1).value = "Your Autoform load failed" & errMSG & "</br>"
        Workbooks(CoCode & "_Autoform_Message_file.txt").Sheets(1).Range("A" & errLogRow + 2).value = "</br>"
        Workbooks(CoCode & "_Autoform_Message_file.txt").Sheets(1).Range("A" & errLogRow + 3).value = errMSG2 & "</br>"
        Workbooks(CoCode & "_Autoform_Message_file.txt").Sheets(1).Range("A" & errLogRow + 4).value = "</br>"
        Workbooks(CoCode & "_Autoform_Message_file.txt").Close True
        

        Dim ProfilePath As String
    
        On Error Resume Next
        killCsvProfile = Dir(Environ("USERPROFILE") & "\Desktop\Extract_Autoform\*Employee Profile Report*.csv")
        If killCsvProfile <> "" Then
           ProfilePath = "\" & killCsvProfile
        End If
        
        killCsvENDN = Dir(Environ("USERPROFILE") & "\Desktop\Extract_Autoform\*AutoForm EarnDedn*.csv")
        If killCsvENDN <> "" Then
           ENDNPath = "\" & killCsvENDN
        End If
        
        killCsvEO = Dir(Environ("USERPROFILE") & "\Desktop\Extract_Autoform\*AutoForm EEOptions *.csv")
        If killCsvEO <> "" Then
           EOPath = "\" & killCsvEO
        End If
        
        If Dir(frmRobotAdminTool.txtLoadLocation.value & ProfilePath) <> "" Then Kill (frmRobotAdminTool.txtLoadLocation.value & ProfilePath)
        If Dir(frmRobotAdminTool.txtLoadLocation.value & ENDNPath) <> "" Then Kill (frmRobotAdminTool.txtLoadLocation.value & ENDNPath)
        If Dir(frmRobotAdminTool.txtLoadLocation.value & EOPath) <> "" Then Kill (frmRobotAdminTool.txtLoadLocation.value & EOPath)
        
        Application.Wait (Now + TimeValue("0:00:05"))
        
        'The next 3 lines close the file that was created in the line above
        Application.EnableEvents = False
        ThisWorkbook.Saved = True
        Application.Quit
        

    End If

    
End Sub

Sub RoboLoad()
    
    Dim CoCode As String
    Dim errorLog As Workbook
    Dim errLogRow As Integer
    Dim sFound As String
    
    Application.ScreenUpdating = False
    
    sFound = Dir(Environ("USERPROFILE") & "\Desktop\Extract_Autoform\*Employee Profile Report*.xls")
    
    CoCode = Left(sFound, 4)
    
    SaveAsDir = frmRobotAdminTool.txtLoadLocation.value & "\"


    Set errorLog = Workbooks.Add
    errorLog.SaveAs SaveAsDir & CoCode & "_Autoform_Message_file", xlTextWindows
    

    
    With errorLog.Sheets(1)
        errLogRow = .Cells(.Rows.Count, "A").End(xlUp).row
    End With
    
    
    ThisWorkbook.Activate
    
    errorLog.Sheets(1).Range("A1").value = "Your Autoform load started at " & Format(Now, "H:MM:SS") & " on " & Format(Now, "yyyy-mm-dd") & "</br>"
    errorLog.Sheets(1).Range("A2").value = "</br>"
    
'***LOAD PROFILE***
    
    frmRobotAdminTool.cmdLoadProfile_Click
    
    If err.Number = 0 Then
        'do nothing
    Else
        If profileMSG <> "" Then
            errMSG = profileMSG
            errMSG2 = "Please confirm employees have been loaded into pay@work before re-submitting this request"
            Exit Sub
        ElseIf profileMSG = "" Then
            errMSG = " due to an issue with the Employee Profile"
            errMSG2 = "Please check your employees in pay@work for any issues before re-submitting this request"
            Exit Sub
        End If
    End If
   
'***LOAD EN/DN***

    frmRobotAdminTool.cmdLoadXlsENDN_Click
    
    If err.Number = 0 Then
        'do nothing
    Else
        errMSG = " due to an issue with the Earnings/Deductions file"
        errMSG2 = "Please check your EN/DN codes in pay@work for any issues before re-submitting this request"
        Exit Sub
    End If
    
'***LOAD EO***
    
    frmRobotAdminTool.cmdLoadXlsEO_Click
    If err.Number = 0 Then
        'do nothing
    Else
        errMSG = " due to an issue with the Employee Options file"
        errMSG2 = "Please check your Employee Options in pay@work for any issues before re-submitting this request"
        Exit Sub
    End If
    
'***EXIT PROCEDURE***
    
    With errorLog.Sheets(1)
        errLogRow = .Cells(.Rows.Count, "A").End(xlUp).row
    End With
    
    errorLog.Sheets(1).Range("A" & errLogRow + 1).value = "Your Autoform was created successfully!</br>"
    errorLog.Sheets(1).Range("A" & errLogRow + 2).value = "</br>"
    
    Dim ProfilePath As String

    killCsvProfile = Dir(Environ("USERPROFILE") & "\Desktop\Extract_Autoform\*Employee Profile Report*.csv")
    If killCsvProfile <> "" Then
       ProfilePath = "\" & killCsvProfile
    End If
    
    killCsvENDN = Dir(Environ("USERPROFILE") & "\Desktop\Extract_Autoform\*AutoForm EarnDedn*.csv")
    If killCsvENDN <> "" Then
       ENDNPath = "\" & killCsvENDN
    End If
    
    killCsvEO = Dir(Environ("USERPROFILE") & "\Desktop\Extract_Autoform\*AutoForm EEOptions*.csv")
    If killCsvEO <> "" Then
       EOPath = "\" & killCsvEO
    End If
    
    Kill (frmRobotAdminTool.txtLoadLocation.value & ProfilePath)
    Kill (frmRobotAdminTool.txtLoadLocation.value & ENDNPath)
    Kill (frmRobotAdminTool.txtLoadLocation.value & EOPath)
    

    errorLog.Close True
          
    'This line does the SaveAs after the Autoform has been loaded
    ThisWorkbook.SaveAs SaveAsDir & CoCode & "_Autoform", 52
       
    Application.Wait (Now + TimeValue("0:00:05"))
    
    'The next 3 lines close the file that was created in the line above
    Application.EnableEvents = False
    ThisWorkbook.Saved = True
    Application.Quit

End Sub

Sub LoadAutoform()
    
    If frmAdminTool.Locked.value = "Unlocked" Then
        MsgBox "Please lock the Autoform in order to load Client Data", vbCritical, "Load Autoform"
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    frmAdminTool.cmdLoadProfile_Click
    frmAdminTool.cmdLoadXlsENDN_Click
    frmAdminTool.cmdLoadXlsEO_Click
    
    Kill (frmAdminTool.txtLoadLocation.value & "\Company Profile.csv")
    Kill (frmAdminTool.txtLoadLocation.value & "\Company ENDN.csv")
    Kill (frmAdminTool.txtLoadLocation.value & "\Company EO.csv")
    
    MsgBox "Client Data has been successfully loaded", vbInformation, "Load Autoform"
    
    frmAdminTool.Hide
    
    ThisWorkbook.SaveAs ThisWorkbook.Path & "\" & ThisWorkbook.Sheets("CL0-Cover Sheet").Range("G10").value & " Autoform", 52
    
    Call ForcePasteSpecial
    
End Sub


Sub Mypaste()

activeSheet.Paste

End Sub



Attribute VB_Name = "RowUpdates"
Option Explicit

Public Sub CancelRowUpdate(targetRow As Range, sheetName As String)
    Dim oldValueKey As Variant
    Dim oldColumn As Integer
    Dim oldRow As Integer
    Dim currentRowNumber As Long
    currentRowNumber = targetRow.row
    Dim lastColumn As Integer
    lastColumn = targetRow.Columns.Count + targetRow.Column - 1
    Dim oldvaluefound As Boolean
    oldvaluefound = False
    
    Dim general As general:     Set general = New general
    
    Dim originalValues()
    ReDim originalValues(1 To ApplicationSettings.activeSheetValues.valuesRange.Columns.Count)

    Dim originalColumnCounter As Integer
    originalColumnCounter = 1

    For Each oldValueKey In ApplicationSettings.activeSheetValues.originalValues.Keys()
        oldRow = Range(oldValueKey).row

        If oldRow = currentRowNumber Then
            oldColumn = Range(oldValueKey).Column
            
            If oldColumn >= targetRow.Column And oldColumn <= lastColumn Then
                originalValues(originalColumnCounter) = ApplicationSettings.activeSheetValues.originalValues(oldValueKey)

                originalColumnCounter = originalColumnCounter + 1
                
                oldvaluefound = True
            End If
        End If
    Next oldValueKey

    Application.EnableEvents = False
    
    ThisWorkbook.Worksheets(sheetName).Range(general.NumToExcelLetter(targetRow.Column) & targetRow.row & ":" & general.NumToExcelLetter(lastColumn) & targetRow.row) _
        = originalValues

    Application.EnableEvents = True
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'On Activate the function LoopThruShapes is called which changes the color of the active sheet shape
'Changes the value of J33 based on the sum of J9 to J31 on the Cover Sheet
Private Sub Worksheet_Activate()
    Call LoopThruShapes
    If Application.WorksheetFunction.Sum(Range("J19:J32")) > 0 Then
        Range("J34") = "No"
    Else
        Range("J34") = "Yes"
    End If
    ActiveWindow.ScrollRow = 1
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
'    If Application.WorksheetFunction.CountA(target) = 0 Then
'        Exit Sub
'    End If
    
    Call ReplaceCount
End Sub
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
End Sub
'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
Private Sub Worksheet_Change(ByVal Target As Range)
    
    If Application.WorksheetFunction.CountA(Target) = 0 Then Exit Sub
    
    If Range("L" & Target.row) <> "Yes" Then
        If ThisWorkbook.currentProcedure <> "LoadValuesStatusChange" Then
            Call LoadValuesStatusChange(Target)
        End If
    End If
    If Target.Column = 13 Then
        'Takes in the Sheet Name, the column number for the SIN Number
        Call SINValidation(Target, "Employee Info Changes", 13)
    End If
End Sub

Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
    Call InitializeDict
End Sub
'Checks if a new hire already exists in the Master Setup Sheet
Private Sub Worksheet_Change(ByVal Target As Range)

    If Application.WorksheetFunction.CountA(Target) = 0 Then Exit Sub

    Call ValidateNewHire(Target)
    If Target.Column = 12 Then
        'Takes in the Sheet Name, the column number for the SIN Number
        Call SINValidation(Target, "New Hires", 12)
    End If
End Sub
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
Private Sub Worksheet_Change(ByVal Target As Range)
    
'    If Application.WorksheetFunction.CountA(target) = 0 Then Exit Sub
    
        If ThisWorkbook.currentProcedure <> "LoadValuesStatusChange" Then
            Call LoadValuesStatusChange(Target)
        End If

End Sub

'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
End Sub
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
Private Sub Worksheet_Change(ByVal Target As Range)
    
    If Application.WorksheetFunction.CountA(Target) = 0 Then Exit Sub
    
        If ThisWorkbook.currentProcedure <> "LoadValuesStatusChange" Then
            Call LoadValuesStatusChange(Target)
        End If

End Sub
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
End Sub

Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
'LoadSetupEarnings is called: that populates the EN/DN CSV column
Private Sub Worksheet_Change(ByVal Target As Range)
    
    If Application.WorksheetFunction.CountA(Target) = 0 Then Exit Sub
    
    If ThisWorkbook.currentProcedure <> "LoadValuesStatusChange" Then
        Call LoadValuesStatusChange(Target)
    End If
        
    If Target.Column = 5 Or Target.Column = 6 Or Target.Column = 7 Or Target.Column = 8 Or Target.Column = 9 Or Target.Column = 11 Or Target.Column = 12 Or Target.Column = 13 Or Target.Column = 15 Then
        'Takes in the Sheet Name, the column number for the following: Earning or Deduction Code
        Call LoadSetupEarnings(Target, "Current Pay Adjust", 11, 14, 12, 13, 15)
    End If

End Sub
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
End Sub

Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
'Checks the Comments column code, has to be blank unless the reason code entered by the user is K00-Other
Private Sub Worksheet_Change(ByVal Target As Range)

    If Application.WorksheetFunction.CountA(Target) = 0 Then Exit Sub

    Dim general As general
    Set general = New general
    
    If ThisWorkbook.currentProcedure <> "LoadValuesStatusChange" Then
        Call LoadValuesStatusChange(Target)
    End If
    
'    Application.EnableEvents = False
'    For Each TargetCell In Target
'        If (TargetCell.Column = 11 Or TargetCell.Column = 12) And TargetCell.row > 3 Then
'            If UCase(Trim(activeSheet.Range(general.NumToExcelLetter(10) & TargetCell.row).value)) = UCase("I - Inactive") Or UCase(Trim(activeSheet.Range(general.NumToExcelLetter(10) & TargetCell.row).value)) = UCase("T - Terminated") Then
'                activeSheet.Range(general.NumToExcelLetter(11) & TargetCell.row).Interior.ColorIndex = 0
'                activeSheet.Range(general.NumToExcelLetter(12) & TargetCell.row).Interior.ColorIndex = 22
'            ElseIf UCase(Trim(activeSheet.Range(general.NumToExcelLetter(10) & TargetCell.row).value)) = UCase("A - Active") Then
'                activeSheet.Range(general.NumToExcelLetter(11) & TargetCell.row).Interior.ColorIndex = 22
'                activeSheet.Range(general.NumToExcelLetter(12) & TargetCell.row).Interior.ColorIndex = 0
'            End If
'        End If
'    Next TargetCell
'    Application.EnableEvents = True
'
    
End Sub
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
End Sub

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
'LoadSetupEarnings is called: that populates the EN/DN CSV column
Private Sub Worksheet_Change(ByVal Target As Range)
    
    If Application.WorksheetFunction.CountA(Target) = 0 Then Exit Sub
    
    If ThisWorkbook.currentProcedure <> "LoadValuesStatusChange" Then
        Call LoadValuesStatusChange(Target)
    End If
        
    If Target.Column = 5 Or Target.Column = 6 Or Target.Column = 7 Or Target.Column = 8 Or Target.Column = 9 Or Target.Column = 11 Or Target.Column = 12 Or Target.Column = 13 Or Target.Column = 14 Then
        'Takes in the Sheet Name, the column number for the following: Earning or Deduction Code
        Call LoadSetupEarnings(Target, "Separate Pay", 11, 19, 12, 13, 14)
    End If
End Sub
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
End Sub

Attribute VB_Name = "Sheet30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
'LoadSetupEarnings is called: that populates the EN/DN CSV column
Private Sub Worksheet_Change(ByVal Target As Range)
    
    Dim supplementarySheet As Worksheet
    Dim commentRow As Range
    
    Application.EnableEvents = False
    Set supplementarySheet = Sheets("Supplementary Instructions")
    
    If Target.Column = 5 Or Target.Column = 6 Then
        For Each commentRow In Target.Rows
            If Application.Evaluate("=SUM(LEN(E" & commentRow.row & ":F" & commentRow.row & "))") > 0 Then
                supplementarySheet.Range("G" & commentRow.row).value = 1
            Else
                supplementarySheet.Range("G" & commentRow.row).value = ""
            End If
        Next commentRow
    End If
    Application.EnableEvents = True

'    If ThisWorkbook.currentProcedure <> "LoadValuesStatusChange" Then
'        Call LoadValuesStatusChange(Target)
'    End If
        
'    If Target.Column = 11 Or Target.Column = 12 Or Target.Column = 13 Then
'        'Takes in the Sheet Name, the column number for the following: Earning or Deduction Code
'        Call LoadSetupEarnings(Target, "Bonus Taxation", 11, 16, 12, 13, 50)
'    End If

End Sub
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
End Sub

Attribute VB_Name = "Sheet34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
Private Sub Worksheet_Change(ByVal Target As Range)
    
    Application.ScreenUpdating = False
    
'    sheetChgDone = sheetChgDone + 1
    
    orToggle = Sheets("Current Pay Hours TS Setup").Range("B8").value
        
    If orToggle = "True" Then
'        ThisWorkbook.currentProcedure = ""
        'If Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours" Then GoTo SkipValidation
        If ThisWorkbook.currentProcedure = "" Then
            Call LoadValuesStatusChange(Target)
        End If
        
        'Call TS_Changes

    End If

        
    If ThisWorkbook.currentProcedure = "CancelOperation" Then ThisWorkbook.currentProcedure = ""

End Sub
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()

    Excel.activeSheet.UsedRange
    If Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours" Or Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours TS" Then GoTo SkipValidation
    Call LoopThruShapes

SkipValidation:

End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)

    Dim wso, wst As Worksheet
    
    Set wso = Sheets("Current Pay Hours Overrides")
    Set wst = Sheets("Current Pay Hours TS")
    
    targetFind = AddLeadingCharacters(CStr(Target.row), 4, "0")
    
    Application.EnableEvents = False
    wso.Range("D1").value = targetFind & "|" & wst.Range("G" & Target.row).value & "|"
    Application.EnableEvents = True
    
End Sub
Attribute VB_Name = "Sheet35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
End Sub
'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
Private Sub Worksheet_Change(ByVal Target As Range)
    
    If Application.WorksheetFunction.CountA(Target) = 0 Then Exit Sub
    
    
    
    If ThisWorkbook.currentProcedure <> "LoadValuesStatusChange" Then
        Call LoadValuesStatusChange(Target)
    End If
End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    Call ReplaceItems

End Sub
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
Private Sub Worksheet_Change(ByVal Target As Range)
    
    If Application.WorksheetFunction.CountA(Target) = 0 Then Exit Sub
    
    
    If Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours" Or Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours TS" Then GoTo SkipCode
    
    If ThisWorkbook.currentProcedure <> "LoadValuesStatusChange" And ThisWorkbook.currentProcedure <> "CancelOperation" Then
        Call LoadValuesStatusChange(Target)
    End If
        
    If Target.Column = 5 Or Target.Column = 6 Or Target.Column = 7 Or Target.Column = 8 Or Target.Column = 9 Or Target.Column = 11 Then
        'Takes in the Sheet Name, the column number for the following: Earning or Deduction Code
        Call LoadSetupEarnings(Target, "Current Pay Hours", 11, 15, 50, 51, 52)
    End If
    
SkipCode:
    
End Sub
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()

    If Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours" Or Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours TS" Then GoTo SkipValidation
    Call LoopThruShapes

SkipValidation:
End Sub


Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
'LoadSetupEarnings is called: that populates the EN/DN CSV column
Private Sub Worksheet_Change(ByVal Target As Range)

    If Application.WorksheetFunction.CountA(Target) = 0 Then Exit Sub
        
    If ThisWorkbook.currentProcedure <> "LoadValuesStatusChange" Then
        Call LoadValuesStatusChange(Target)
    End If
        
    If Target.Column = 5 Or Target.Column = 6 Or Target.Column = 7 Or Target.Column = 8 Or Target.Column = 9 Or Target.Column = 11 Or Target.Column = 12 Or Target.Column = 13 Or Target.Column = 14 Then
        'Takes in the Sheet Name, the column number for the following: Earning or Deduction Code
        Call LoadSetupEarnings(Target, "Bonus Taxation", 11, 19, 12, 13, 14)
    End If
End Sub
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
End Sub

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
'LoadSetupEarnings is called: that populates the EN/DN CSV column
Private Sub Worksheet_Change(ByVal Target As Range)
    
    If Application.WorksheetFunction.CountA(Target) = 0 Then Exit Sub
    
    If ThisWorkbook.currentProcedure <> "LoadValuesStatusChange" Then
        Call LoadValuesStatusChange(Target)
    End If
    
    If Target.Column = 5 Or Target.Column = 6 Or Target.Column = 7 Or Target.Column = 8 Or Target.Column = 9 Or Target.Column = 11 Or Target.Column = 12 Or Target.Column = 13 Then
        'Takes in the Sheet Name, the column number for the following: Earning or Deduction Code
        Call LoadSetupEarnings(Target, "Lump Sum", 11, 14, 12, 13, 50)
    End If
    
End Sub
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
End Sub

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'LoadValuesStatusChange is called: Function that gets employee info from the Master Setup Sheet
'Uses the current cell(s) populated by the user as the value to lookup
'LoadSetupEarnings is called: that populates the EN/DN CSV column
Private Sub Worksheet_Change(ByVal Target As Range)

    If Application.WorksheetFunction.CountA(Target) = 0 Then Exit Sub
    
    Set general = New general
    lastRow = general.lastRow(Sheets("Manual Payment Update"))
    
    If lastRow < 4 Then lastRow = 4

'    If Application.Evaluate("=SUM(LEN(E4:Z" & lastRow & "))") = 1 Then
    If Application.CountA(Range("E4:Z" & lastRow)) = 1 Then
        MsgBox "Please note that if left blank, the ""EI Pay Period"" field will default to previous pay period.", vbExclamation, "EI Pay Period"
    End If

    If ThisWorkbook.currentProcedure <> "LoadValuesStatusChange" Then
        Call LoadValuesStatusChange(Target)
    End If
        
    If Target.Column = 5 Or Target.Column = 6 Or Target.Column = 7 Or Target.Column = 8 Or Target.Column = 9 Or Target.Column = 11 Or Target.Column = 12 Or Target.Column = 13 Or Target.Column = 14 Then
        'Takes in the Sheet Name, the column number for the following: Earning or Deduction Code
        Call LoadSetupEarnings(Target, "Manual Payment Update", 11, 18, 12, 13, 14)
    End If
    
'    If Target.Column = 12 Or Target.Column = 13 Or Target.Column = 14 Or Target.Column = 17 Then
'        'Takes in the Sheet Name, the column number for the following: Earning or Deduction Code
'        Call RemitNonRemit(Target, "Manual Payment Update", 12, 13, 14, 17, 19, 20, 21, 22, 23, 24)
'    End If
End Sub
'Call LoopThruShapes functions that changes the color of the shapes
Private Sub Worksheet_Activate()
    Call LoopThruShapes
'    MsgBox "Please note that if a value is not entered into the ""EI Pay Period"" field, the previous pay period will be used as the default.", vbExclamation, "EI Pay Period"
End Sub

Attribute VB_Name = "Sorting"
Sub SortRegHrsView_ByEN()

    Dim wsr As Worksheet
    Dim SortRange As Range
    
    Set wsr = Sheets("Current Pay Hours")
    
   
    With wsr
        lastRow = .Cells(.Rows.Count, "G").End(xlUp).row
    End With
    
    Set SortRange = wsr.Rows("4:" & lastRow)
    
    wsr.Sort.SortFields.Clear
    wsr.Sort.SortFields.Add key:=Range _
        ("K4:K99999"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
    With ActiveWorkbook.Worksheets("Current Pay Hours").Sort
        .SetRange Range("A4:P99999")
        .header = xlGuess
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    Sheets("Current Pay Hours Setup").Range("B13").value = "Earning"
    
    wsr.Shapes("SortUnsort").TextFrame.Characters.Text = "Remove Sort By Earning Code"
    

End Sub

Sub SortRegHrsView_ByRowNum()

    Dim wsr As Worksheet
    Dim SortRange As Range
    
    Set wsr = Sheets("Current Pay Hours")
    
    With wsr
        lastRow = .Cells(.Rows.Count, "G").End(xlUp).row
    End With
    
    Set SortRange = wsr.Rows("4:" & lastRow)
    
    wsr.Sort.SortFields.Clear
    wsr.Sort.SortFields.Add key:=Range _
        ("A4:A99999"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
    With ActiveWorkbook.Worksheets("Current Pay Hours").Sort
        .SetRange Range("A4:P99999")
        .header = xlGuess
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    Sheets("Current Pay Hours Setup").Range("B13").value = "Row Number"
    
    wsr.Shapes("SortUnsort").TextFrame.Characters.Text = "Sort By Earning Code"
    
    
End Sub

Sub Sort_Unsort()

    If Sheets("Current Pay Hours Setup").Range("B13").value = "Earning" Then
        Call SortRegHrsView_ByRowNum
    ElseIf Sheets("Current Pay Hours Setup").Range("B13").value = "Row Number" Then
        Call SortRegHrsView_ByEN
    End If
    
End Sub

Sub SortOverrides()

    Dim wso As Worksheet
  
    Set wso = Sheets("Current Pay Hours Overrides")
    
    With wso
        lastRow = .Cells(.Rows.Count, "B").End(xlUp).row
    End With
    
    ActiveWorkbook.Worksheets("Current Pay Hours Overrides").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Current Pay Hours Overrides").Sort.SortFields.Add _
        key:=Range("B4"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption _
        :=xlSortTextAsNumbers
    With ActiveWorkbook.Worksheets("Current Pay Hours Overrides").Sort
        .SetRange Range("A4:B" & lastRow)
        .header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
End Sub

Sub GetRegPos()

    Dim wsr, wst, wso As Worksheet
    
    Set wso = Sheets("Current Pay Hours Overrides")
    Set wst = Sheets("Current Pay Hours TS")
    
    RegRowStart = 3
    
    With activeSheet
        LastRowPos = .Cells(.Rows.Count, "G").End(xlUp).row
    End With
        
    TargRow = Target.row
    TargCol = Target.Column
        
    With wst
        LastColCount = .Cells(3, .Columns.Count).End(xlToLeft).Column
    End With
    
    For posRow = 4 To LastRowPos
        
        For PosCol = 11 To LastColCount
            
            ColLet = Split(Cells(1, PosCol).Address, "$")(1)
            
            If wst.Range(ColLet & posRow) <> "" Then
                RegRowStart = RegRowStart + 1
            End If
            
            If wst.Range(ColLet & posRow).Address = Target.Address Then GoTo ExitLoops
            
        Next PosCol

    Next posRow
ExitLoops:



End Sub





Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public currentProcedure As String
Public aws As Worksheet

Private Sub Workbook_Activate()
    ForcePasteSpecial
    BlockNavigation
End Sub

Private Sub Workbook_AfterSave(ByVal Success As Boolean)
    Call HideWarning
    Application.EnableEvents = False
    aws.Activate
    Application.EnableEvents = True
End Sub

Private Sub Workbook_Deactivate()
    ReleasePasteControl
    ReleaseNavigation
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    
    Application.ScreenUpdating = False
    Set aws = activeSheet
    Sheets("CL0-Cover Sheet").Activate
    Call ShowWarning

End Sub

Public Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

    Application.ScreenUpdating = False
    
    Set aws = activeSheet

    If Sheets("Current Pay Hours Setup").Range("B12").value = "Timesheet" Then
        Call TransToVert_NoViewToggle
'        Call TransferToHoriz_NoViewToggle
    End If
    Application.EnableEvents = False
    Sheets("CL0-Cover Sheet").Activate
    Application.EnableEvents = True
    Call ShowWarning

End Sub

' Add references:   Microsoft Visual basic for Applications Extensibility 5.3
'                   Microsoft VBScript Regular Expressions 5.5
'                   Microsoft Scripting Runtime 1.0
'
Private Sub Workbook_Open()
   
    Dim ws As Worksheet
    Dim pw As String
    Dim configSheet As Worksheet
    
    If activeSheet.Name <> "CL0-Cover Sheet" Then Sheets("CL0-Cover Sheet").Activate
    
    Call AddRefToLibraryApplicationExtensibility5_3
    Call AddReferenceRegEx5_5
    Call AddRefToMicrosoftScripingRuntime1_0
    
    Sheets("Current Pay Hours Overrides").Unprotect "11"
    
    Call HideWarning

    ApplicationSettings.LoadSheetValues ThisWorkbook.activeSheet.Name

    Call UpdateTransfersList
    
    Call ChangeShapes
    Call ChangeShapes1
    Call ChangeShapes2
    
End Sub

Private Sub Workbook_SheetActivate(ByVal Sh As Object)
'    If Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours" Or Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours TS" Then Exit Sub

    ApplicationSettings.LoadSheetValues Sh.Name
    
'    Call ChangeShapes2
    
End Sub

Private Sub Workbook_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
    
    Dim myselection As String
       
    On Error GoTo ErrorHandler
    If ActiveCell.Locked = True Then
        Cancel = True
    End If

    Application.EnableEvents = False ' Disable so extra code doesn't execute

    'Set mysheet = ThisWorkbook.Sheets(Sh.Name)
    If Target.Columns.Count > 1 Then
           ' Do nothing - this should never happen with double click - but just in case :)
    Else

    ' Check to see if the list of Earnings and deductions was double clicked....Show list if needed....
        If Target.Column = 11 And Target.row > 3 And (Sh.Name = "Current Pay Adjust" Or Sh.Name = "Bonus Taxation" Or Sh.Name = "Separate Pay" Or Sh.Name = "Lump Sum" Or Sh.Name = "Manual Payment Update") Then
            myselection = SelectENDN(Target.Text)
            If myselection <> "" Then Target.value = myselection
            Cancel = True
            
            Application.EnableEvents = True
            ' Re-trigger validation
            Target.Copy
            Target.PasteSpecial xlPasteValues
            Application.CutCopyMode = False
           
           
           
        ElseIf Target.Column = 11 And Target.row > 3 And (Sh.Name = "Current Pay Hours") Then
            myselection = SelectENDN(Target.Text, True) ' only show earnings for the Hours sheet use optional TRUE
            If myselection <> "" Then Target.value = myselection
            Cancel = True
            
            Application.EnableEvents = True
            ' Re-trigger validation
            Target.Copy
            Target.PasteSpecial xlPasteValues
            Application.CutCopyMode = False
           
        End If
                
    End If

    Application.EnableEvents = True
    Exit Sub
ErrorHandler:
    Application.EnableEvents = True
    Resume Next
    
End Sub

Public Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    Dim lRow As Long
    Dim lCol As Long
    Dim KeyCells As Range
    Dim setupSheet As Worksheet
    Dim targetRow As Range
    Dim general As general
    Dim typeValidate As TypeValidation
    Dim logicValidate As LogicValidation
    Application.ScreenUpdating = False
    Set general = New general
    Set typeValidate = New TypeValidation
    Set logicValidate = New LogicValidation
       
    If activeSheet.Name = "Current Pay Hours" Then Call Reg_Changes(Target)
    If activeSheet.Name = "Current Pay Hours TS" Then Call TS_Changes(Target)
        
    If ThisWorkbook.currentProcedure = "LoadValuesStatusChange" Then
        ThisWorkbook.currentProcedure = ""
'        Exit Sub
    End If
    
'    If ThisWorkbook.currentProcedure = "Bypass" Then ThisWorkbook.currentProcedure = "LoadValuesStatusChange"
    
'    If activeSheet.Name = "Current Pay Hours TS" Then ThisWorkbook.currentProcedure = "LoadValuesStatusChange"
    
'    Debug.Print Sh.Name & " " & CStr(target.Rows.count)
    If Contains(ValidSheets, Sh.Name) = True Then
        ApplicationSettings.SaveOriginalAndShadowValues ApplicationSettings.activeSheetValues
    End If
    
    If Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours" Or Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours TS" Then Exit Sub
    
    
    
    ApplicationSettings.LoadSheetValues Sh.Name
    
'    If Contains(ValidSheets, Sh.Name) = True Then
'        ApplicationSettings.SaveOriginalValues ApplicationSettings.activeSheetValues
'    End If


    With Sh
        
        
        
        '
        ' Validate cell with the restrictions from the corresponding Setup tab
        ' If a deletion action is invoked and the row has no active cells,
        ' then remove all style change upon that row
        '
        On Error Resume Next
        
        Dim uniqueKeyColumn
        If Sh.Name = "Employee Info Changes" Then
            Application.EnableEvents = False
            
            Dim row As Range
            For Each row In Target.Rows
                If Application.Evaluate("=SUM(LEN(E" & row.row & ":I" & row.row & "), LEN(K" & row.row & "))") = 0 Then
                    Range("J" & row.row).ClearContents
                End If
            Next row
             
            Application.EnableEvents = True
        Else
            If activeSheet.Name <> "CL0-Cover Sheet" Then
                Application.EnableEvents = False

                For Each row In Target.Rows
                    If Application.Evaluate("=SUM(LEN(E" & row.row & ":I" & row.row & "))") = 0 Then
                        Range("J" & row.row).ClearContents
                    End If
                Next row
                
                Application.EnableEvents = True
            End If
        End If
        
        If Application.Evaluate("=SUM(LEN(E" & Target.row & ":" & general.NumToExcelLetter(general.lastColumn(Sh)) & Target.row & "))") = 0 Then
            ' Color index for Excel's "Normal" style
            'Range(Target.Address).EntireRow.Borders.ColorIndex = 1
            Range(Target.Address).EntireRow.Interior.ColorIndex = 0
            
            ' No data left to validate
            Exit Sub
        End If
            
        ' Check if there is an associated setup page for the current worksheet
        If general.SheetExists(Trim(UCase(activeSheet.Name & " setup"))) Then
            Set setupSheet = ActiveWorkbook.Worksheets(Trim(UCase(activeSheet.Name & " setup")))
        Else
            Exit Sub
        End If
        
        ' Determine the last cell's position
'        lRow = ActiveSheet.Cells(.Rows.Count, "G").End(xlUp).Row

        lRow = Cells.Find(what:="*", _
            After:=Range("A1"), _
            lookat:=xlPart, _
            LookIn:=xlFormulas, _
            SearchOrder:=xlByRows, _
            SearchDirection:=xlPrevious, _
            MatchCase:=False).row

        ' Determine the last column's position
'        lCol = ActiveSheet.Cells(3, .Columns.Count).End(xlToLeft).Column

        lCol = Cells.Find(what:="*", _
                After:=Range("A1"), _
                lookat:=xlPart, _
                LookIn:=xlFormulas, _
                SearchOrder:=xlByColumns, _
                SearchDirection:=xlPrevious, _
                MatchCase:=False).Column
                
        ' Pass in entire row for validation for each cell that got changed
        On Error Resume Next
        For Each targetRow In Target.Rows
            If targetRow.row > lRow Then
                Exit For
            End If
    
            ' Validation class from Setup Tab
            If activeSheet.Name = "Salary Changes" Then
                Call checkSalaryChg(Target)
            ElseIf activeSheet.Name = "Employee Info Changes" Then
                Call checkEmpInfo(Target)
            ElseIf activeSheet.Name = "New Hires" Then
                Call checkNewHire(Target)
            End If
            Call typeValidate.ValidateTypeInRange(Sh.Range("D" & targetRow.row & ":" & general.NumToExcelLetter(lCol) & targetRow.row), setupSheet)
        Next targetRow
    End With
    
    If activeSheet.Name = "Status Changes" Then
        Call checkStatusChg(Target)
    ElseIf activeSheet.Name = "Transfers" Then
        Call checkTransfers(Target)
    ElseIf activeSheet.Name = "Salary Changes" Then
        Call checkSalaryChg(Target)
    ElseIf activeSheet.Name = "New Hires" Then
        Call checkNewHire(Target)
    ElseIf activeSheet.Name = "Employee Info Changes" Then
        Call checkEmpInfo(Target)
    End If
    
    'Application.ScreenUpdating = True
    If ThisWorkbook.currentProcedure <> "" Then ThisWorkbook.currentProcedure = ""
End Sub

'Add reference in order to use Reg Ex
Private Sub AddReferenceRegEx5_5()
    Dim VBAEditor As VBIDE.VBE
    Dim vbProj As VBIDE.VBProject
    Dim chkRef As VBIDE.Reference
    
    On Error Resume Next
    Set VBAEditor = Application.VBE
    Set vbProj = ActiveWorkbook.VBProject

    For Each chkRef In vbProj.References
        If chkRef.Name = "VBScript_RegExp_55" Then
            GoTo CleanUp
        End If
    Next

    vbProj.References.AddFromFile "C:\WINDOWS\system32\vbscript.dll\3"

CleanUp:
    Set vbProj = Nothing
    Set VBAEditor = Nothing
End Sub
Private Sub AddRefToLibraryApplicationExtensibility5_3()
    ' create a reference to the VBA Extensibility library.
    On Error Resume Next            ' in case the reference already exits
    ThisWorkbook.VBProject.References _
                  .AddFromGuid "{0002E157-0000-0000-C000-000000000046}", 5, 0
End Sub

Private Sub AddRefToMicrosoftScripingRuntime1_0()
    On Error Resume Next
    ThisWorkbook.VBProject.References _
                .AddFromGuid "{420B2830-E718-11CF-893D-00A0C9054228}", 1, 0
End Sub





Attribute VB_Name = "Timesheet_View"
Public sheetChgDone As Integer

Sub LoadEarns()

    Application.ScreenUpdating = False
    
    Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours"
    
    Dim wsv, wsh As Worksheet
    Dim ColLet As String
    
    Set wsv = Sheets("Current Pay Hours")
    Set wsh = Sheets("Current Pay Hours TS")
    
'    wsh.Select
    
    wsh.Range("K2:XFD3").ClearContents
    
    
'    Sheets("EARNING setup").Select
    
    With Sheets("EARNING setup")
            lastRow = .Cells(.Rows.Count, "E").End(xlUp).row
        End With
        
'    wsh.Select
    
    If lastRow < 2 Then
        wsh.Range("K3").value = "NO EARNINGS"
        GoTo ContinueFormat
    End If
    n = 11
    
    For i = 2 To lastRow Step 1
        
        If Sheets("EARNING setup").Range("G" & i).value = 1 Then
            
            wsh.Cells(3, n).value = Sheets("EARNING setup").Range("E" & i).value
            
            ColLet = Split(Cells(1, n).Address, "$")(1)
    
            wsh.Cells(2, n).Formula = "=SUM(" & ColLet & 4 & ":" & ColLet & 999993 & ")"
        
            n = n + 1
        End If
    
    Next i
    
    wsh.Columns("K").Copy
    
'    Selection.Copy
    
    wsh.Columns("K:LU").PasteSpecial xlPasteFormats
    
    Application.CutCopyMode = False
    
ContinueFormat:
    wsh.Columns("K:LU").EntireColumn.AutoFit
    
    LastCol = 333
    
    wsh.Columns("J").EntireColumn.Hidden = True
        
    For x = 11 To LastCol Step 1
    
'        wsh.Cells(3, x).Select
    
        If wsh.Columns(x).Hidden = True Then
            If wsh.Cells(3, x).value <> "" Then
                wsh.Columns(x).Hidden = False
            End If
        Else
            If wsh.Cells(3, x).value = "" Then
                wsh.Columns(x).Hidden = True
            End If
        End If
    
    Next x
    
    Sheets("Current Pay Hours Overrides").Range("C1").Clear
        
    'MsgBox "Setup completed for Current Pay Hours TS tab", vbInformation, "COS Input"

End Sub

Sub TransferToHoriz()

    Dim RowValue As String
    Dim wsr As Worksheet
    Dim wst As Worksheet
    Dim CountRange As Range
    Dim CompareRange As Range
    Dim nextRow As Integer
    Dim EarnCol As Integer
    Dim RowCheckRange, NumCheckRange As Range
    
    Application.EnableEvents = False
    Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours"
    
    'Call Get_ActiveSheet
    
    Sheets("Current Pay Hours TS Setup").Range("B8").value = "FALSE"
    
        
    Set wst = Sheets("Current Pay Hours TS")
    Set wsr = Sheets("Current Pay Hours")
       
    Sheets("Current Pay Hours Setup").Range("B12").value = "Timesheet"
    
    wst.Select
    Call Reset_Click_Switch
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    wsr.Select
    
    With wsr
        LastRowAlt = .Cells(.Rows.Count, "G").End(xlUp).row
    End With

    With wsr
        LastRowNum = .Cells(.Rows.Count, "B").End(xlUp).row
    End With
    
    Set CountRange = wsr.Range("B:B")
    Set CompareRange = wsr.Range("G:G")
    
    Call SaveOverrides(LastRowAlt)
    Application.EnableEvents = False
    
    If Application.CountA(CountRange) <> 0 Then
    
'        If Application.CountA(CountRange) < Application.CountA(CompareRange) - 1 Then
'            wsr.Range("A" & LastRow + 1).value = wsr.Range("A" & LastRow).value + 1
'        End If
            
      
        
        
        wsr.Columns("C:C").ClearContents

        wst.Select
  
        With wsr
            lastRow = .Cells(.Rows.Count, "B").End(xlUp).row
        End With
        
        For i = 4 To lastRow Step 1
        
        
            If wsr.Range("K" & i).value <> "" Then

                RowValue = wsr.Range("B" & i).value
                
                EarnCol = Cells.Find(what:=wsr.Range("K" & i).value, After:=wsr.Range("A1"), LookIn:=xlFormulas, lookat _
                            :=xlWhole, SearchOrder:=xlByColumns, SearchDirection:=xlNext, MatchCase:= _
                            False, SearchFormat:=False).Column
                
                ColLet = Split(Cells(1, EarnCol).Address, "$")(1)
                

                wst.Range(ColLet & ":" & ColLet).EntireColumn.Hidden = False

                
'                wsr.Range("E" & i, "I" & i).Copy
'                wst.Range("E" & RowValue).PasteSpecial xlPasteValues

                wst.Range("E" & RowValue).value = wsr.Range("E" & i).value
                wst.Range("F" & RowValue).value = wsr.Range("F" & i).value
                wst.Range("G" & RowValue).value = wsr.Range("G" & i).value
                wst.Range("H" & RowValue).value = wsr.Range("H" & i).value
                wst.Range("I" & RowValue).value = wsr.Range("I" & i).value
                wst.Range(ColLet & RowValue).value = wsr.Range("L" & i).value
           
            Else
                RowValue = wsr.Range("B" & i).value
                
                'EarnCol = Cells.Find(What:=wsr.Range("K" & i).value, After:=wsr.Range("A1"), LookIn:=xlFormulas, LookAt _
                            :=xlWhole, SearchOrder:=xlByColumns, SearchDirection:=xlNext, MatchCase:= _
                            False, SearchFormat:=False).Column
                
                'ColLet = Split(Cells(1, EarnCol).Address, "$")(1)
                If RowValue <> "" Then
'                    wsr.Range("E" & i, "I" & i).Copy
'                    wst.Range("E" & RowValue).PasteSpecial xlPasteValues
                    
                    wst.Range("E" & RowValue).value = wsr.Range("E" & i).value
                    wst.Range("F" & RowValue).value = wsr.Range("F" & i).value
                    wst.Range("G" & RowValue).value = wsr.Range("G" & i).value
                    wst.Range("H" & RowValue).value = wsr.Range("H" & i).value
                    wst.Range("I" & RowValue).value = wsr.Range("I" & i).value

                    wst.Range("K" & RowValue).value = wsr.Range("L" & i).value
                End If
                
                
            
            End If
        Next i
    Else
        With wsr
            LastRowAlt = .Cells(.Rows.Count, "G").End(xlUp).row
        End With
        nextRow = 4
        For i = 4 To LastRowAlt Step 1
            
            rngToCheck = Application.VLookup(wsr.Range("G" & i).value, wst.Range("G:G"), 1, False)
            
            If Application.WorksheetFunction.IsNA(rngToCheck) Then
                If wsr.Range("G" & i).value <> "" Then
'                    wsr.Range("E" & i, "I" & i).Copy
'                    wst.Range("E" & NextRow).PasteSpecial xlPasteValues
                    wst.Range("E" & nextRow).value = wsr.Range("E" & i).value
                    wst.Range("F" & nextRow).value = wsr.Range("F" & i).value
                    wst.Range("G" & nextRow).value = wsr.Range("G" & i).value
                    wst.Range("H" & nextRow).value = wsr.Range("H" & i).value
                    wst.Range("I" & nextRow).value = wsr.Range("I" & i).value
                    nextRow = nextRow + 1
                End If
            End If
            
            wst.Select
            
            RowValue = Cells.Find(what:=wsr.Range("G" & i).value, After:=wsr.Range("A1"), LookIn:=xlFormulas, lookat _
                        :=xlWhole, SearchOrder:=xlByColumns, SearchDirection:=xlNext, MatchCase:= _
                        False, SearchFormat:=False).row
                                               
            EarnCol = Cells.Find(what:=wsr.Range("K" & i).value, After:=wst.Range("A1"), LookIn:=xlFormulas, lookat _
                        :=xlWhole, SearchOrder:=xlByColumns, SearchDirection:=xlNext, MatchCase:= _
                        False, SearchFormat:=False).Column
            
            ColLet = Split(Cells(1, EarnCol).Address, "$")(1)
            
            wst.Range(ColLet & ":" & ColLet).EntireColumn.Hidden = False
            
            wst.Range("G" & RowValue).value = wsr.Range("G" & i).value
                        
            If wst.Range(ColLet & RowValue).value = "" Then
                wst.Range(ColLet & RowValue).value = wsr.Range("L" & i).value
            Else
'                wsr.Range("E" & i, "I" & i).Copy
'                wst.Range("E" & NextRow).PasteSpecial xlPasteValues
                wst.Range("E" & nextRow).value = wsr.Range("E" & i).value
                wst.Range("F" & nextRow).value = wsr.Range("F" & i).value
                wst.Range("G" & nextRow).value = wsr.Range("G" & i).value
                wst.Range("H" & nextRow).value = wsr.Range("H" & i).value
                wst.Range("I" & nextRow).value = wsr.Range("I" & i).value
                wst.Range(ColLet & nextRow).value = wsr.Range("L" & i).value
                nextRow = nextRow + 1
            End If
            
        Next i
    End If
    
    
    Sheets("Current Pay Hours TS Setup").Range("B8") = "TRUE"

    Sheets("Current Pay Hours Overrides").Range("C1").Clear
    wsr.Activate
    Application.EnableEvents = True
    wst.Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
    
    Call ThisWorkbook.Workbook_SheetChange(Excel.activeSheet, Excel.Selection)
    
End Sub

Sub TransToVert()
  
    Dim LastCol As Integer
    Dim CheckForEarn As Integer
    Dim CheckForRow As Range
    Dim wsr, wst As Worksheet
    
    Application.EnableEvents = False
    Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours TS"
    
    Set wst = Sheets("Current Pay Hours TS")
    Set wsr = Sheets("Current Pay Hours")
          
    Sheets("Current Pay Hours Setup").Range("B12").value = "Regular"
    Sheets("Current Pay Hours Setup").Range("B14").value = "Yes"
    
    Application.ScreenUpdating = False
    
    With wst
        LastCol = .Cells(3, .Columns.Count).End(xlToLeft).Column
    End With
    
    With wst
        LastRowCol = .Cells(.Rows.Count, "G").End(xlUp).row
    End With
    
    If LastRowCol < 4 Then LastRowCol = 4
    
    For ColVal = 11 To LastCol Step 1
    
        ColumnLet = Split(Cells(1, ColVal).Address, "$")(1)
        
        If wst.Columns(ColVal).Hidden = True Then
            wst.Range(ColumnLet & 4, ColumnLet & LastRowCol).ClearContents
        End If
        
    Next ColVal
    
    
    wsr.Select

    
    Call Reset_Click_Switch
    Application.EnableEvents = False
    
    Dim lastRowTest, lastColumnTest
    Dim general As New general
    lastRowTest = general.lastRow(Sheets("Current Pay Hours"))
    lastColumnTest = general.NumToExcelLetter(general.lastColumn(Sheets("Current Pay Hours")))
    
    If lastRowTest < 4 Then lastRowTest = 4
    
    Application.activeSheet.Range("B4:" & lastColumnTest & lastRowTest).ClearContents
    Application.activeSheet.Range("B4:" & lastColumnTest & lastRowTest).EntireRow.Interior.ColorIndex = 0
    
'    wsr.Range("E4:N50000").Interior.ColorIndex = 0
'
    Set CheckForRow = wsr.Range("B4:B99999")
'
'    CheckForRow.ClearContents
    
    rw = 4
    col = 11
    
    wst.Activate
    
        With activeSheet
            LastCol = .Cells(3, .Columns.Count).End(xlToLeft).Column
        End With
        
        With activeSheet
            LastRowH = .Cells(.Rows.Count, "G").End(xlUp).row
        End With
        

    For x = 4 To LastRowH Step 1
    
        CheckForEarn = Application.CountA(wst.Range("K" & rw, "LU" & rw))
    
        If CheckForEarn <> 0 Then
            For i = 11 To LastCol
'                    wst.Select
                If wst.Cells(rw, i).value <> "" Then
'                    wst.Range("E" & rw, "I" & rw).Copy
                    
'                    wsr.Select
                
                    With wsr
                        lastrowv = .Cells(.Rows.Count, "G").End(xlUp).row
                    End With
                    
                    If wsr.Range("B" & lastrowv + 1).value <> "" Then lastrowv = lastrowv + 1
'                    wsr.Range("E" & lastrowv + 1).PasteSpecial xlPasteValues
                    wsr.Range("E" & lastrowv + 1).value = wst.Range("E" & rw).value
                    wsr.Range("F" & lastrowv + 1).value = wst.Range("F" & rw).value
                    wsr.Range("G" & lastrowv + 1).value = wst.Range("G" & rw).value
                    wsr.Range("H" & lastrowv + 1).value = wst.Range("H" & rw).value
                    wsr.Range("I" & lastrowv + 1).value = wst.Range("I" & rw).value
                    
                    wsr.Range("K" & lastrowv + 1).value = wst.Cells(3, i).value
                    wsr.Range("L" & lastrowv + 1).value = wst.Cells(rw, i).value
                    wsr.Range("B" & lastrowv + 1).value = wst.Cells(rw, i).row
                    
                    
                Else

                End If
                
                
                
            Next i
        Else
            With wsr
                lastrowv = .Cells(.Rows.Count, "G").End(xlUp).row
            End With
            
            IsRowBlank = Application.CountA(wst.Range("E" & rw, "LU" & rw))
            IsValueBlank = Application.CountA(wst.Range("K" & rw, "LU" & rw))
            
            If IsRowBlank <> 0 Then
'                wst.Range("E" & rw, "I" & rw).Copy
'                wsr.Range("E" & lastrowv + 1).PasteSpecial xlPasteValues

                wsr.Range("E" & lastrowv + 1).value = wst.Range("E" & rw).value
                wsr.Range("F" & lastrowv + 1).value = wst.Range("F" & rw).value
                wsr.Range("G" & lastrowv + 1).value = wst.Range("G" & rw).value
                wsr.Range("H" & lastrowv + 1).value = wst.Range("H" & rw).value
                wsr.Range("I" & lastrowv + 1).value = wst.Range("I" & rw).value
                
                ColLet = Split(Cells(1, col).Address, "$")(1)
                
                DoesRowExist = Application.VLookup(wst.Range(ColLet & rw).row, CheckForRow, 1, False)

                If Application.IsNA(DoesRowExist) Then
                    If IsRowBlank = 0 Then
                        wsr.Range("B" & lastrowv + 1).value = wst.Cells(rw, col).row
                    ElseIf IsValueBlank = 0 Then
                        wsr.Range("B" & lastrowv + 1).value = wst.Cells(rw, col).row
                    End If
                End If
            End If
        End If
        
        rw = rw + 1
        col = col + 1
        
    Next x

    
    Application.CutCopyMode = False
    
    Call RestoreOverrides
    Application.EnableEvents = False
       
    Sheets("Current Pay Hours Overrides").Range("C1").value = ""
    wst.Activate
    Application.EnableEvents = True
    wsr.Activate
    ActiveWindow.ScrollRow = 1
    wsr.Range("E4").Select
    
    lastRowSwitch = general.lastRow(Sheets("Current Pay Hours"))
    
    If lastRowSwitch < 4 Then lastRowSwitch = 4
    
    Range("E4:E" & lastRowSwitch).Select
    
    ThisWorkbook.currentProcedure = "SwitchView"
    Call ThisWorkbook.Workbook_SheetChange(Excel.activeSheet, Excel.Selection)
    ThisWorkbook.currentProcedure = ""
    
    Range("E4").Select
    
End Sub


Sub TransToVert_NoViewToggle()
  
    Dim LastCol As Integer
    Dim CheckForEarn As Integer
    Dim CheckForRow As Range
    Dim wsr, wst As Worksheet
    
    Application.EnableEvents = False
    Sheets("Current Pay Hours Overrides").Range("C1").value = "Current Pay Hours TS"
    
    Set wst = Sheets("Current Pay Hours TS")
    Set wsr = Sheets("Current Pay Hours")
          
'    Sheets("Current Pay Hours Setup").Range("B12").value = "Regular"
'    Sheets("Current Pay Hours Setup").Range("B14").value = "Yes"
    
    Application.ScreenUpdating = False
    
    With wst
        LastCol = .Cells(3, .Columns.Count).End(xlToLeft).Column
    End With
    
    With wst
        LastRowCol = .Cells(.Rows.Count, "G").End(xlUp).row
    End With
    
    If LastRowCol < 4 Then LastRowCol = 4
    
    For ColVal = 11 To LastCol Step 1
    
        ColumnLet = Split(Cells(1, ColVal).Address, "$")(1)
        
        If wst.Columns(ColVal).Hidden = True Then
            wst.Range(ColumnLet & 4, ColumnLet & LastRowCol).ClearContents
        End If
        
    Next ColVal
    
    
    wsr.Select

    
    Call Reset_Click_Switch
    Application.EnableEvents = False
    
    Dim lastRowTest, lastColumnTest
    Dim general As New general
    lastRowTest = general.lastRow(Sheets("Current Pay Hours"))
    lastColumnTest = general.NumToExcelLetter(general.lastColumn(Sheets("Current Pay Hours")))
    
    If lastRowTest < 4 Then lastRowTest = 4
    
    Application.activeSheet.Range("B4:" & lastColumnTest & lastRowTest).ClearContents
    Application.activeSheet.Range("B4:" & lastColumnTest & lastRowTest).EntireRow.Interior.ColorIndex = 0
    
'    wsr.Range("E4:N50000").Interior.ColorIndex = 0
'
    Set CheckForRow = wsr.Range("B4:B99999")
'
'    CheckForRow.ClearContents
    
    rw = 4
    col = 11
    
    wst.Activate
    
        With activeSheet
            LastCol = .Cells(3, .Columns.Count).End(xlToLeft).Column
        End With
        
        With activeSheet
            LastRowH = .Cells(.Rows.Count, "G").End(xlUp).row
        End With
        

    For x = 4 To LastRowH Step 1
    
        CheckForEarn = Application.CountA(wst.Range("K" & rw, "LU" & rw))
    
        If CheckForEarn <> 0 Then
            For i = 11 To LastCol
'                    wst.Select
                If wst.Cells(rw, i).value <> "" Then
'                    wst.Range("E" & rw, "I" & rw).Copy
                    
'                    wsr.Select
                
                    With wsr
                        lastrowv = .Cells(.Rows.Count, "G").End(xlUp).row
                    End With
                    
                    If wsr.Range("B" & lastrowv + 1).value <> "" Then lastrowv = lastrowv + 1
'                    wsr.Range("E" & lastrowv + 1).PasteSpecial xlPasteValues
                    wsr.Range("E" & lastrowv + 1).value = wst.Range("E" & rw).value
                    wsr.Range("F" & lastrowv + 1).value = wst.Range("F" & rw).value
                    wsr.Range("G" & lastrowv + 1).value = wst.Range("G" & rw).value
                    wsr.Range("H" & lastrowv + 1).value = wst.Range("H" & rw).value
                    wsr.Range("I" & lastrowv + 1).value = wst.Range("I" & rw).value
                    
                    wsr.Range("K" & lastrowv + 1).value = wst.Cells(3, i).value
                    wsr.Range("L" & lastrowv + 1).value = wst.Cells(rw, i).value
                    wsr.Range("B" & lastrowv + 1).value = wst.Cells(rw, i).row
                    
                    
                Else

                End If
                
                
                
            Next i
        Else
            With wsr
                lastrowv = .Cells(.Rows.Count, "G").End(xlUp).row
            End With
            
            IsRowBlank = Application.CountA(wst.Range("E" & rw, "LU" & rw))
            IsValueBlank = Application.CountA(wst.Range("K" & rw, "LU" & rw))
            
            If IsRowBlank <> 0 Then
'                wst.Range("E" & rw, "I" & rw).Copy
'                wsr.Range("E" & lastrowv + 1).PasteSpecial xlPasteValues

                wsr.Range("E" & lastrowv + 1).value = wst.Range("E" & rw).value
                wsr.Range("F" & lastrowv + 1).value = wst.Range("F" & rw).value
                wsr.Range("G" & lastrowv + 1).value = wst.Range("G" & rw).value
                wsr.Range("H" & lastrowv + 1).value = wst.Range("H" & rw).value
                wsr.Range("I" & lastrowv + 1).value = wst.Range("I" & rw).value

                ColLet = Split(Cells(1, col).Address, "$")(1)
                
                DoesRowExist = Application.VLookup(wst.Range(ColLet & rw).row, CheckForRow, 1, False)

                If Application.IsNA(DoesRowExist) Then
                    If IsRowBlank = 0 Then
                        wsr.Range("B" & lastrowv + 1).value = wst.Cells(rw, col).row
                    ElseIf IsValueBlank = 0 Then
                        wsr.Range("B" & lastrowv + 1).value = wst.Cells(rw, col).row
                    End If
                End If
            End If
        End If
        
        rw = rw + 1
        col = col + 1
        
    Next x

    
    Application.CutCopyMode = False
    
    Call RestoreOverrides
    Application.EnableEvents = False
       
    ThisWorkbook.Sheets("Current Pay Hours Overrides").Range("C1").value = ""
    wst.Activate
    Application.EnableEvents = True
    wsr.Activate
    ActiveWindow.ScrollRow = 1
    Range("E4").Select
    
    lastRowSwitch = general.lastRow(Sheets("Current Pay Hours"))
    
    If lastRowSwitch < 4 Then lastRowSwitch = 4
    
    Range("E4:E" & lastRowSwitch).Select
    
    ThisWorkbook.currentProcedure = "SwitchView"
    Call ThisWorkbook.Workbook_SheetChange(Excel.activeSheet, Excel.Selection)
    ThisWorkbook.currentProcedure = ""
    
    Range("E4").Select
    
End Sub

Sub AddActiveEE()
    
    Call InitializeDict
    
    Application.ScreenUpdating = False
    
    answer = MsgBox("This will erase all data in the sheet and re-insert all active employees." & vbNewLine & _
    "Do you want to continue?", vbYesNo + vbQuestion, "Load Employees")
    
    If answer = vbYes Then

        Call Reset_Click_LoadEE
        
        Dim FirstRow As Integer
        
        Sheets("MASTER setup").Cells.AutoFilter
        Sheets("MASTER setup").Range("$A$1:$H$99999").AutoFilter field:=8, Criteria1:= _
                "A - Active"
        
        FirstRow = Sheets("MASTER setup").AutoFilter.Range.Offset(1).SpecialCells(xlCellTypeVisible).Cells(1, 1).row
        
        Sheets("MASTER setup").Activate
        Range(Sheets("MASTER setup").Range("D" & FirstRow), Sheets("MASTER setup").Range("D" & FirstRow).End(xlDown)).Select
        
        
        Selection.Copy
        
        Sheets("Current Pay Hours TS").Select
        Range("G4").PasteSpecial xlPasteValues
        
        Sheets("MASTER setup").Activate
        Sheets("MASTER setup").Cells.AutoFilter
        Range("A1").Select
        
        Call InitializeDict
        
        Sheets("Current Pay Hours TS").Select
        
    ElseIf answer = vbNo Then
        Exit Sub
    End If

End Sub

Sub LoadActiveEE()

    Call Reset_Click_LoadEE
    
    Dim FirstRow As Integer
    
    Sheets("MASTER setup").Cells.AutoFilter
    Sheets("MASTER setup").Range("$A$1:$H$99999").AutoFilter field:=8, Criteria1:= _
            "A - Active"
    
    FirstRow = Sheets("MASTER setup").AutoFilter.Range.Offset(1).SpecialCells(xlCellTypeVisible).Cells(1, 1).row
    
    Sheets("MASTER setup").Activate
    Range(Sheets("MASTER setup").Range("D" & FirstRow), Sheets("MASTER setup").Range("D" & FirstRow).End(xlDown)).Select
    
    
    Selection.Copy
    
    Sheets("Current Pay Hours TS").Select
    Range("G4").PasteSpecial xlPasteValues
    
    Sheets("MASTER setup").Activate
    Sheets("MASTER setup").Cells.AutoFilter
    Range("A1").Select
    
    Call InitializeDict
    
    Sheets("Current Pay Hours TS").Select
    
    
End Sub

Sub EmpSelector()

    With frmEmpLoad
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        .Show
    End With
               
End Sub

Sub SaveOverrides(LastRowAlt)

    Dim CheckOverride As Range
    Dim RowCheckRange As Range
    Dim wsr, wst, wso As Worksheet
    Dim CountRange As Range
    Dim RangeCheck As Integer
    Dim Rng As Range
    Dim ArrayString As String
    
    Set wst = Sheets("Current Pay Hours TS")
    Set wsr = Sheets("Current Pay Hours")
    Set wso = Sheets("Current Pay Hours Overrides")
    Set CountRange = wsr.Range("B:B")
    
    wso.Range("A:A").Clear

    
    With wsr
        lastRow = .Cells(.Rows.Count, "G").End(xlUp).row
    End With
    
    
    Application.EnableEvents = False
'    For empEarn = 4 To LastRowAlt Step 1
'        wsr.Range("C" & empEarn).value = wsr.Range("B" & empEarn).value & "|" & wsr.Range("E" & empEarn).value & "|" & wsr.Range("F" & empEarn).value & "|" & wsr.Range("G" & empEarn).value & "|" & wsr.Range("K" & empEarn).value
'    Next empEarn

    
   
    For NumFill = 4 To LastRowAlt Step 1
        
        If wsr.Range("B" & NumFill) = "" Then
            Set RowCheckRange = wsr.Range("E" & NumFill, "N" & NumFill)
            
           RangeCheck = 0
           
            
           For Each Rng In RowCheckRange
                If Len(Rng) > 0 Then RangeCheck = 1
           Next Rng
           
           
            If RangeCheck = 1 Then
                
                If Application.CountIf(wsr.Range("G:G"), wsr.Range("G" & NumFill).value) >= 1 Then
                    EmpEarnCheck = wsr.Range("E" & NumFill).value & "|" & wsr.Range("F" & NumFill).value & "|" & wsr.Range("G" & NumFill).value & "|" & wsr.Range("K" & NumFill).value
                    
                    If Application.CountIf(wsr.Range("C:C"), EmpEarnCheck) > 0 Then
                        With wsr
                            LastRowNum = .Cells(.Rows.Count, "B").End(xlUp).row
                        End With
                        MaxBValue = Application.WorksheetFunction.Max(Range("B4", "B" & LastRowNum))
                        
'                        If MaxBValue = 0 Then MaxBValue = 4
                        
'                        If Application.CountA(wsr.Range("B:B")) < 1 Then
'                            wsr.Range("B" & NumFill).value = 4
'                            wsr.Range("C" & NumFill).value = wsr.Range("E" & NumFill).value & "|" & wsr.Range("F" & NumFill).value & "|" & wsr.Range("G" & NumFill).value & "|" & wsr.Range("K" & NumFill).value
'                        Else
                            wsr.Range("B" & NumFill).value = MaxBValue + 1
                            wsr.Range("C" & NumFill).value = wsr.Range("E" & NumFill).value & "|" & wsr.Range("F" & NumFill).value & "|" & wsr.Range("G" & NumFill).value & "|" & wsr.Range("K" & NumFill).value
'                        End If
                        
                    Else

                        If Application.WorksheetFunction.Max(wsr.Range("B:B")) < 4 Then
                            wsr.Range("B" & NumFill).value = 4
                            wsr.Range("C" & NumFill).value = wsr.Range("E" & NumFill).value & "|" & wsr.Range("F" & NumFill).value & "|" & wsr.Range("G" & NumFill).value & "|" & wsr.Range("K" & NumFill).value
                        Else
'                            SameBrow = Cells.Find(What:=tranCheck, After:=Range("A1"), LookIn:=xlFormulas, LookAt _
'                                        :=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
'                                        False, SearchFormat:=False).row
                            tranCheck = wsr.Range("E" & NumFill).value & "|" & wsr.Range("F" & NumFill).value & "|" & wsr.Range("G" & NumFill).value
                            
                            SameBrow = ""
                            For x = 4 To NumFill - 1
                                If wsr.Range("E" & x).value & "|" & wsr.Range("F" & x).value & "|" & wsr.Range("G" & x).value = tranCheck Then
                                    SameBrow = x
                                    Exit For
                                End If
                            Next x
                                        
                                                                    
                            If SameBrow <> "" Then
                                                                            
                                wsr.Range("B" & NumFill).value = Range("B" & SameBrow).value
                                wsr.Range("C" & NumFill).value = wsr.Range("E" & NumFill).value & "|" & wsr.Range("F" & NumFill).value & "|" & wsr.Range("G" & NumFill).value & "|" & wsr.Range("K" & NumFill).value
                            Else
                                With wsr
                                    LastRowNum = .Cells(.Rows.Count, "B").End(xlUp).row
                                End With
                                If NumFill = 4 Then
                                    MinBValue = Application.WorksheetFunction.Min(Range("B4", "B" & LastRowNum))
                                    wsr.Range("B" & NumFill).value = MinBValue
                                    wsr.Range("C" & NumFill).value = wsr.Range("E" & NumFill).value & "|" & wsr.Range("F" & NumFill).value & "|" & wsr.Range("G" & NumFill).value & "|" & wsr.Range("K" & NumFill).value
                                Else
                                    MaxBValue = Application.WorksheetFunction.Max(Range("B4", "B" & LastRowNum))
                                    wsr.Range("B" & NumFill).value = MaxBValue + 1
                                    wsr.Range("C" & NumFill).value = wsr.Range("E" & NumFill).value & "|" & wsr.Range("F" & NumFill).value & "|" & wsr.Range("G" & NumFill).value & "|" & wsr.Range("K" & NumFill).value
                                End If
                            End If
                        End If
                    End If
                Else
                    If Application.WorksheetFunction.Max(wsr.Range("B:B")) < 4 Then
'                    If Application.CountA(wsr.Range("B:B")) = 0 Then
                        wsr.Range("B" & NumFill).value = 4
                    
                    Else
                        With wsr
                            LastRowNum = .Cells(.Rows.Count, "B").End(xlUp).row
                        End With
                        wsr.Range("B" & NumFill).value = wsr.Range("B" & LastRowNum).value + 1
                        wsr.Range("C" & NumFill).value = wsr.Range("E" & NumFill).value & "|" & wsr.Range("F" & NumFill).value & "|" & wsr.Range("G" & NumFill).value & "|" & wsr.Range("K" & NumFill).value
                    End If
                End If
            End If
            
        End If
    Next NumFill
  
    
    For i = 4 To lastRow Step 1
    
        'Set CheckOverride = wsr.Range("M" & i & ":N" & i)
        
        
        
        'If Len(wsr.Range("M" & i)) > 0 Or Len(wsr.Range("N" & i)) > 0 Then
        checkTSID = Application.Evaluate("=SUM(LEN(E" & i & ":I" & i & "))")
        If checkTSID > 0 Then
            wso.Range("A" & i).value = wsr.Range("B" & i).value & "|" & wsr.Range("G" & i).value & "|" & wsr.Range("K" & i).value & _
            "|" & wsr.Range("L" & i).value & "|" & wsr.Range("M" & i).value & "|" & wsr.Range("N" & i).value
        End If
    Next i
    
    With wso
        LastOverride = .Cells(.Rows.Count, "A").End(xlUp).row
    End With
    
    wso.Columns("B:B").Clear
    
    For j = 4 To LastOverride
        
        If wso.Range("A" & j).value <> "" Then
            ArrayString = Split(wso.Range("A" & j).value, "|")(0)
            
            ArrayString = AddLeadingCharacters(ArrayString, 4, "0")
            
            If Split(wso.Range("A" & j).value, "|")(2) <> "" Then
                wso.Range("B" & j).value = "'" & ArrayString & "|" & Split(wso.Range("A" & j).value, "|")(1) & "|" & Split(Split(wso.Range("A" & j).value, "|")(2), "-")(0)
            Else
                wso.Range("B" & j).value = "'" & ArrayString & "|" & Split(wso.Range("A" & j).value, "|")(1) & "|"
            End If
        End If

    Next j
    
    Application.EnableEvents = True

    Call SortOverrides
    

End Sub

Sub RestoreOverrides()
    
    Dim InsertOverride() As String
    Dim CheckOverride As String
    Dim wsr, wst, wso As Worksheet
    
    
    Set wst = Sheets("Current Pay Hours TS")
    Set wsr = Sheets("Current Pay Hours")
    Set wso = Sheets("Current Pay Hours Overrides")

    Call SortOverrides
    
    With wso
        lastRow = .Cells(.Rows.Count, "A").End(xlUp).row
    End With
    
    wsr.Select
    
    Application.EnableEvents = False
    For i = 4 To lastRow Step 1
        On Error Resume Next
        CheckOverride = wso.Range("A" & i).value
        If CheckOverride <> "" Then
        
'            wsr.Select
           
            
            orRate = Split(CheckOverride, "|")(4)
            orCC = Split(CheckOverride, "|")(5)
            
            
            ORCompare = wsr.Range("B" & i).value & "|" & wsr.Range("G" & i).value & "|" & wsr.Range("K" & i).value & "|" & wsr.Range("L" & i).value
                           
            StoredOR = Split(CheckOverride, "|")(0) & "|" & Split(CheckOverride, "|")(1) & "|" & Split(CheckOverride, "|")(2) & "|" & Split(CheckOverride, "|")(3)
                            
            If StoredOR = ORCompare Then
                wsr.Range("M" & i).value = orRate
                wsr.Range("N" & i).value = orCC
            End If

        End If

    Next i
    Application.EnableEvents = True

End Sub


Sub AutoUnhideEarn()

    'Dim EarnCol As Integer
    
    Sheets("Current Pay Hours TS").Select
    

    EarnCol = Cells.Find(what:=Sheets("Current Pay Hours").Range("K4").value, After:=ActiveCell, LookIn:=xlFormulas, lookat _
                :=xlWhole, SearchOrder:=xlByColumns, SearchDirection:=xlNext, MatchCase:= _
                False, SearchFormat:=False).Column
                
    ColLet = Split(Cells(1, EarnCol).Address, "$")(1)
    
    If Sheets("Current Pay Hours TS").Range(ColLet & ":" & ColLet).EntireColumn.Hidden = True Then
        Sheets("Current Pay Hours TS").Range(ColLet & ":" & ColLet).EntireColumn.Hidden = False
    
    End If
    
    
    
                
End Sub

Sub HideSortButton()

    If Sheets("Current Pay Hours").Shapes("SortUnsort").Visible = True Then
        Sheets("Current Pay Hours").Shapes("SortUnsort").Visible = False
    ElseIf Sheets("Current Pay Hours").Shapes("SortUnsort").Visible = False Then
        Sheets("Current Pay Hours").Shapes("SortUnsort").Visible = True
    End If
    
End Sub

Public Sub Get_ActiveSheet()
    
    Dim ActiveWS As String
    
    ActiveWS = activeSheet.Name

End Sub

Public Sub TS_Changes(Target As Range)

    

        Application.ScreenUpdating = False
            
        Dim wst, wso As Worksheet
        Dim matchFound As String
        
        Set wso = Sheets("Current Pay Hours Overrides")
        Set wst = Sheets("Current Pay Hours TS")
        Set general = New general
                    
        Application.EnableEvents = False
        
    If Sheets("Current Pay Hours Setup").Range("B14").value <> "No" Then
        lastRowTS = general.lastRow(Sheets("Current Pay Hours TS"))
        lastRowOverrides = general.lastRow(Sheets("Current Pay Hours Overrides"))
        lastRowMatch = lastRowOverrides
        missingEE = ""
        
        If ThisWorkbook.currentProcedure <> "CancelOperation" Then
                
            If Target.Column > 10 Then
                
                With wst
                    lastPosCol = .Cells(3, .Columns.Count).End(xlToLeft).Column
                End With
                
                For posRow = 4 To lastRowTS
                
                    checkEEID = wst.Range("G" & posRow).value
                    checkEARNVAL = Application.Evaluate("=SUM(LEN(K" & posRow & ":" & Split(Cells(1, lastPosCol).Address, "$")(1) & posRow & "))")
                    
                    If checkEEID = "" And checkEARNVAL <> 0 Then
                    '****fix for when row is skipped all together as it passes this test right now*****
                        missingEE = "YES"
                        wst.Range("K" & posRow & ":" & Split(Cells(1, lastPosCol).Address, "$")(1) & posRow).value = ""
                    Else
                    
                        For PosCol = 11 To lastPosCol
                            
                            ColLet = Split(Cells(1, PosCol).Address, "$")(1)
                            newENVAL = wst.Range(ColLet & posRow).value
                            oldENVAL = ApplicationSettings.activeSheetValues.originalValues(wst.Range(ColLet & posRow).Address)
                            matchFound = ""
                            
                            If newENVAL = "" Then
                            '******if there is more than one instance of the employee already then the line must be cleared*****
                                If oldENVAL <> "" Then
                                    currTSVAL = AddLeadingCharacters(CStr(posRow), 4, "0") & "|" & wst.Range("G" & posRow).value & "|" & Split(wst.Range(ColLet & "3").value, "-")(0)
                                    If lastRowOverrides > 3 Then
                                        For overrideRows = 4 To lastRowOverrides
                                            
                                            If wso.Range("B" & overrideRows).value = currTSVAL Then
                                                If Application.WorksheetFunction.CountIf(wso.Range("B:B"), "*" & Left(currTSVAL, 5) & "*") = 1 Then
                                                    wso.Range("A" & overrideRows).value = posRow & "|" & wst.Range("G" & posRow).value & "|" & "|" & "|" & "|"
                                                    wso.Range("B" & overrideRows).value = AddLeadingCharacters(CStr(posRow), 4, "0") & "|" & wst.Range("G" & posRow).value & "|"
                                                Else
                                                    wso.Range("A" & overrideRows).value = ""
                                                    wso.Range("B" & overrideRows).value = ""
                                                End If
                                            End If
                                            
                                        Next overrideRows
                                    End If
                                End If
                            Else
                                If oldENVAL <> "" Then
                                    currTSVAL = AddLeadingCharacters(CStr(posRow), 4, "0") & "|" & wst.Range("G" & posRow).value & "|" & Split(wst.Range(ColLet & "3").value, "-")(0)
                                    If lastRowOverrides > 3 Then
                                        For overrideRows = 4 To lastRowOverrides
                                            
                                            If wso.Range("B" & overrideRows).value = currTSVAL Then
                                                wso.Range("A" & overrideRows).value = Split(wso.Range("A" & overrideRows).value, "|")(0) & "|" & Split(wso.Range("A" & overrideRows).value, "|")(1) & "|" & Split(wso.Range("A" & overrideRows).value, "|")(2) & "|" & _
                                                    newENVAL & "|" & Split(wso.Range("A" & overrideRows).value, "|")(4) & "|" & Split(wso.Range("A" & overrideRows).value, "|")(5)
                                                wso.Range("B" & overrideRows).value = AddLeadingCharacters(CStr(posRow), 4, "0") & "|" & wst.Range("G" & posRow).value & "|" & Split(wst.Range(ColLet & "3").value, "-")(0)
                                                matchFound = "YES"
                                                Exit For
                                            End If
                                            
                                        Next overrideRows
                                    End If
                                    
                                Else
                                    currTSVAL = AddLeadingCharacters(CStr(posRow), 4, "0") & "|" & wst.Range("G" & posRow).value & "|"
                                    If lastRowOverrides > 3 Then
                                        For overrideRows = 4 To lastRowOverrides
                                            
                                            If wso.Range("B" & overrideRows).value = currTSVAL Then
                                                wso.Range("A" & overrideRows).value = posRow & "|" & wst.Range("G" & posRow).value & "|" & wst.Range(ColLet & "3").value & "|" & _
                                                    newENVAL & "|" & Split(wso.Range("A" & overrideRows).value, "|")(4) & "|" & Split(wso.Range("A" & overrideRows).value, "|")(5)
                                                wso.Range("B" & overrideRows).value = AddLeadingCharacters(CStr(posRow), 4, "0") & "|" & wst.Range("G" & posRow).value & "|" & Split(wst.Range(ColLet & "3").value, "-")(0)
                                                matchFound = "YES"
                                                Exit For
                                            End If
                                            
                                        Next overrideRows
                                    End If
                                End If
                                
                                If matchFound <> "YES" Then
                                    If lastRowMatch < 4 Then lastRowMatch = 3
                                    wso.Range("A" & lastRowMatch + 1).value = posRow & "|" & wst.Range("G" & posRow).value & "|" & wst.Range(ColLet & "3").value & "|" & _
                                                    newENVAL & "|" & "|"
                                    wso.Range("B" & lastRowMatch + 1).value = AddLeadingCharacters(CStr(posRow), 4, "0") & "|" & wst.Range("G" & posRow).value & "|" & Split(wst.Range(ColLet & "3").value, "-")(0)
                                    lastRowMatch = lastRowMatch + 1
                                End If
                            End If
                        Next PosCol
                    End If
                Next posRow
                

            Else
    '********MODIFY IDENTIFIERS************
    
                For cycleRows = 4 To lastRowTS
                    matchFound = ""
                    checkTSID = wst.Range("G" & cycleRows).value
                    
                    
                    If checkTSID = "" Then
                        oldVal = ApplicationSettings.activeSheetValues.originalValues(wst.Range("G" & cycleRows).Address)
                        If oldVal <> "" Then wst.Range("B" & cycleRows & ":XFD" & cycleRows).ClearContents
                        currTSRow = AddLeadingCharacters(CStr(cycleRows), 4, "0")
                        If lastRowOverrides > 3 Then
                            For overrideRows = 4 To lastRowOverrides
                                
                                If Left(wso.Range("B" & overrideRows).value, 4) = currTSRow Then
                                    wso.Range("A" & overrideRows).value = ""
                                    wso.Range("B" & overrideRows).value = ""
                                End If
                                
                            Next overrideRows
                        End If
                        
                    Else
                        currTSRow = AddLeadingCharacters(CStr(cycleRows), 4, "0")
                        newTSID = wst.Range("G" & cycleRows).value
                        
                        
                        
                        If lastRowOverrides > 3 Then
                            For overrideRows = 4 To lastRowOverrides
                                
                                If wso.Range("A" & overrideRows).value <> "" Then
                                
                                    If Split(wso.Range("A" & overrideRows).value, "|")(2) <> "" Then
                                        earnNumber = Split(Split(wso.Range("A" & overrideRows).value, "|")(2), "-")(0)
                                    Else
                                        earnNumber = ""
                                    End If
                                    
                                    If Left(wso.Range("B" & overrideRows).value, 4) = currTSRow Then
                                        
    '                                    wso.Range("A" & overrideRows).value = Split(wso.Range("A" & overrideRows).value, "|")(0) & "|" & newTSID & "|" _
    '                                        & Split(wso.Range("A" & overrideRows).value, "|")(2) & "|" & Split(wso.Range("A" & overrideRows).value, "|")(3) _
    '                                        & "|" & Split(wso.Range("A" & overrideRows).value, "|")(4) & "|" & Split(wso.Range("A" & overrideRows).value, "|")(5)
    '                                    wso.Range("B" & overrideRows).value = Split(wso.Range("B" & overrideRows).value, "|")(0) & "|" & newTSID & "|" _
    '                                        & earnNumber
                                        
                                        matchFound = "YES"
                                    
                                    End If
                                End If
                                
                            Next overrideRows
                        End If
                        
                        If matchFound <> "YES" Then
                            If lastRowMatch < 4 Then lastRowMatch = 3
                            wso.Range("A" & lastRowMatch + 1).value = cycleRows & "|" & wst.Range("G" & cycleRows).value & "|" & "|" & "|" & "|"
                            wso.Range("B" & lastRowMatch + 1).value = currTSRow & "|" & wst.Range("G" & cycleRows).value & "|"
                            lastRowMatch = lastRowMatch + 1
                        End If
                        
                        
                        
                    End If
                    
                Next cycleRows
            End If
            
        End If
ExitLoops:
    '**** End of To Determine the Position of the row to be modified ****
    
EndOfSub:
        wst.Select
        Call SortOverrides
    '    ThisWorkbook.currentProcedure = "overrideOperation"
        
    
    '    sheetChgDone = sheetChgDone + 1
    
    Else
        
        If Target.Column > 10 Then
        
            Dim noOverride As Range
            
            For Each noOverride In Target.Rows
            
                checkEEID = wst.Range("G" & noOverride.row).value
    '            checkEARNVAL = Application.Evaluate("=SUM(LEN(K" & noOverride.row & ":" & Split(Cells(1, lastPosCol).Address, "$")(1) & posRow & "))")
                
                If checkEEID = "" Then
                '****fix for when row is skipped all together as it passes this test right now*****
                    missingEE = "YES"
                    wst.Range("B" & noOverride.row & ":XFD" & noOverride.row).ClearContents
                End If
                
            Next noOverride
            
        Else
            For Each noOverride In Target.Rows
            
                oldVal = ApplicationSettings.activeSheetValues.originalValues(wst.Range("G" & noOverride.row).Address)

                checkEEID = wst.Range("G" & noOverride.row).value
                           
                If checkEEID = "" And oldVal <> "" Then
                    wst.Range("B" & noOverride.row & ":XFD" & noOverride.row).ClearContents
                End If
                
            Next noOverride
            
        
        End If
        
    End If
    
    If missingEE = "YES" Then
        MsgBox "An employee must be entered prior to entering hours.", vbExclamation, "Missing Employee Id"
    End If
    
    Application.EnableEvents = True
End Sub

Public Sub Reg_Changes(Target As Range)

    Dim BlankCheckRange As Range
    Dim rowCheck As Range
    Dim wsr As Worksheet
    
    If ThisWorkbook.currentProcedure = "SwitchView" Then GoTo SkipAll
    
    Set wsr = Sheets("Current Pay Hours")
    
    
    With wsr
        LastRowNum = .Cells(.Rows.Count, "G").End(xlUp).row
    End With
    
    If LastRowNum < 4 Then LastRowNum = 4
    
    For EmpEarnCheck = 4 To LastRowNum
        Application.EnableEvents = False
        wsr.Range("C" & EmpEarnCheck).value = wsr.Range("E" & EmpEarnCheck).value & "|" & wsr.Range("F" & EmpEarnCheck).value & "|" & wsr.Range("G" & EmpEarnCheck).value & "|" & wsr.Range("K" & EmpEarnCheck).value
    Next EmpEarnCheck
    
    
    For RemoveBlank = 4 To LastRowNum Step 1
            
        If Target.Column = 11 Then
            For Each rowCheck In Target
            
                Set EarnCells = wsr.Range("K" & rowCheck.row)
                
                If wsr.Range("K" & RemoveBlank).value = EarnCells Then
                    empEarnCompare = wsr.Range("E" & RemoveBlank).value & "|" & wsr.Range("F" & RemoveBlank).value & "|" & wsr.Range("G" & RemoveBlank).value & "|" & EarnCells
                    If ThisWorkbook.currentProcedure <> "CancelOperation" Then
                        
                        If Application.CountIf(wsr.Range("C:C"), empEarnCompare) > 1 Then
                            Application.EnableEvents = False
                            wsr.Range("B" & RemoveBlank).value = ""
                            ThisWorkbook.currentProcedure = ""
                        Else
                        
                        End If
                    End If
                End If
            Next rowCheck
        Else
            Set EarnCells = wsr.Range("E" & RemoveBlank, "I" & RemoveBlank)
        
            If Not Application.Intersect(EarnCells, Range(Target.Address)) Is Nothing Then
                If ThisWorkbook.currentProcedure <> "CancelOperation" Then
                    Application.EnableEvents = False
                    wsr.Range("B" & RemoveBlank).value = ""
                    ThisWorkbook.currentProcedure = ""
                End If
            End If
        End If
    Next RemoveBlank
    
    wsr.Range("C4:C" & LastRowNum).ClearContents
SkipAll:
    Application.EnableEvents = True
    
End Sub
Attribute VB_Name = "Tools"

Public sDict As Scripting.Dictionary 'Public Dictionary used to store records from Master Setup sheet
Public bQuickForm As Boolean 'Public variable that is set to True once a user enters data using the quickform
Public PmtSheets As Collection
Public lastTransItem As Boolean
Public quickFormView As Boolean

'This function is called when the user clicks the button on the Employee Options sheet, frmEmployeeOptionsTool is displayed
Sub EmployeeOption_Click()

With frmEmployeeOptionsTool
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
            .Show
End With

End Sub
'This function is called when the user clicks the button on the Horizontal Hours sheet, frmHorizontalHours is displayed
Sub HorizontalHours_Click()

With frmHorizontalHours
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.25 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
            .Show
End With

End Sub

'Updates Master data with New Hires once the user clicks on Move to Master data on the new hire sheet
'Arr() is used to store all records that meet the criteria to be transfered over into the Master Setup Sheet
'orderArr() stores the columns numbers from the New Hires sheet in the order that they need to be added to the Master Setup Sheet
'The transfer will only occur once the user has completed all mandatory fields (if any of the fields are coloured in red
'In the event a record already exists in the sDict dictionary (Dictionary that stores all records from the Master Setup Sheet) the user will be notified and the record is not added
'In the event an error occurs this code will call the InitializeDict function that sets up sDict, once completed the code is set to go to StartAgain
Sub UpdateMasterData()
    Dim general As general
    Dim sht As Worksheet
    Dim MasterSht As Worksheet
    Dim lastRow As Integer
    Dim LastRowMaster As Integer
    Dim CurrRange As Range
    Dim uniqueKey As String
    Dim FindRowNumber As Integer
    Dim branch As String
    Dim Dept As String
    Dim empID As String
    Dim lastName As String
    Dim firstName As String
    Dim initial As String
    Dim payStatus As String
        
    Set general = New general
    Set sht = ThisWorkbook.Worksheets("New Hires")
    Set MasterSht = ThisWorkbook.Worksheets("MASTER setup")
    
    lastRow = general.lastRow(sht)
    LastRowMaster = general.lastRow(MasterSht)

    If lastRow > 3 Then
        For i = 4 To lastRow
            Set CurrRange = sht.Range("E" & i & ":" & general.NumToExcelLetter(general.lastColumn(sht)) & i)
            For Each cell In CurrRange.Cells
                If cell.Interior.ColorIndex = 22 Then
                    MsgBox "Please ensure all mandatory fields are completed", vbCritical, "Autoform - Mandatory Fields"
                    Exit Sub
                End If
            Next cell
        Next i

        For i = 4 To lastRow
            If sht.Range("E" & i) = "" And sht.Range("F" & i) = "" And sht.Range("G" & i) = "" Then
                ' Nothing
            Else
                uniqueKey = sht.Range("G" & i).value & "|" & sht.Range("E" & i).value & "|" & sht.Range("F" & i).value
                branch = sht.Range("E" & i).value
                Dept = sht.Range("F" & i).value
                empID = sht.Range("G" & i).value
                lastName = sht.Range("H" & i).value
                firstName = sht.Range("I" & i).value
                initial = sht.Range("K" & i).value
                payStatus = sht.Range("X" & i).value
                If sht.Range("J" & i).value = "" Then sht.Range("J" & i).value = uniqueKey
            
                On Error GoTo NotFound:
                With sht
                    Set Findrow = MasterSht.Range("G:G").Find(what:=uniqueKey, LookIn:=xlValues, lookat:=xlWhole)
                    If Not Findrow Is Nothing Then
                        FindRowNumber = Findrow.row
                    Else
                        GoTo NotFound:
                    End If
                End With
            
                If FindRowNumber > 1 Then
                    MsgBox "Employee: " & firstName & " " & lastName & " already exists" & vbCrLf & "Employee ID: " & empID & "  Branch: " & branch & "  Department: " & Dept, vbCritical, "Employee List"
                    GoTo SkipEmployee:
                End If
NotFound:
                LastRowMaster = general.lastRow(MasterSht) + 1
                            
                MasterSht.Range("A" & LastRowMaster).value = lastName
                MasterSht.Range("B" & LastRowMaster).value = firstName
                MasterSht.Range("C" & LastRowMaster).value = initial
                MasterSht.Range("D" & LastRowMaster).value = empID
                MasterSht.Range("E" & LastRowMaster).value = branch
                MasterSht.Range("F" & LastRowMaster).value = Dept
                MasterSht.Range("G" & LastRowMaster).value = uniqueKey
                MasterSht.Range("H" & LastRowMaster).value = payStatus
            End If

SkipEmployee:
        Next i
        MsgBox "Move to master data has completed", vbInformation, "Employee List"
    End If
     
    Call InitializeDict

End Sub

Sub UpdateStatusData()
    Dim general As general
    Dim sht As Worksheet
    Dim MasterSht As Worksheet
    Dim lastRow As Integer
    Dim uniqueKey As String
    Dim uniqueKeySht As String
    Dim FindRowNumber As Integer
    Dim FindTransferRow As Integer
    Dim NewStatus As String
    Dim CurrRange As Range
    
            
    Set general = New general
    Set sht = ThisWorkbook.Worksheets("Status Changes")
    Set MasterSht = ThisWorkbook.Worksheets("MASTER setup")
    
    lastRow = general.lastRow(sht)
        
    If lastRow > 3 Then
        For i = 4 To lastRow
            Set CurrRange = sht.Range("E" & i & ":" & general.NumToExcelLetter(general.lastColumn(sht)) & i)
            For Each cell In CurrRange.Cells
                If cell.Interior.ColorIndex = 22 Then
                    MsgBox "Please ensure all mandatory fields are completed", vbCritical, "Autoform - Mandatory Fields"
                    Exit Sub
                End If
            Next cell
        Next i
        
        For i = 4 To lastRow
            If sht.Range("J" & i) = Null Then
            ' Nothing
            Else
                uniqueKeySht = sht.Range("J" & i).value
                               
                Set FindTransfer = Sheets("Transfers List Setup").Range("F:F").Find(what:=uniqueKeySht, LookIn:=xlValues)
                If Not FindTransfer Is Nothing Then
                    FindTransferRow = FindTransfer.row
                    uniqueKey = Sheets("Transfers List Setup").Range("I" & FindTransferRow).value
                Else
                    uniqueKey = uniqueKeySht
                End If
                
                NewStatus = sht.Range("K" & i).value
                With sht
                    Set Findrow = MasterSht.Range("G:G").Find(what:=uniqueKey, LookIn:=xlValues)
                    FindRowNumber = Findrow.row
                End With
                MasterSht.Range("H" & FindRowNumber).value = NewStatus
            End If
        Next
        MsgBox "Employee records have been updated in the master data", vbInformation, "Employee List"
    End If
    
    Call InitializeDict
    
End Sub

Sub UpdateTransferData()
    Dim general As general
    Dim sht As Worksheet
    Dim MasterSht As Worksheet
    Dim lastRow As Integer
    Dim uniqueKey As String
    Dim FindRowNumber As Integer
    Dim newBranch As String
    Dim newDept As String
    Dim CurrRange As Range
    Dim eeIDTrans As String
    Dim deptTrans As String
    Dim branchTrans As String
    
    Set general = New general
    Set sht = ThisWorkbook.Worksheets("Transfers")
    Set MasterSht = ThisWorkbook.Worksheets("MASTER setup")
    
    Dim transfersListSheet As Worksheet
    Set transfersListSheet = ThisWorkbook.Sheets("Transfers List Setup")
                
    lastRow = general.lastRow(sht)
        
'    CreateNewTransfersList
    
    If lastRow > 3 Then
        For i = 4 To lastRow
            Set CurrRange = sht.Range("E" & i & ":" & general.NumToExcelLetter(general.lastColumn(sht)) & i)
            For Each cell In CurrRange.Cells
                If cell.Interior.ColorIndex = 22 Then
                    MsgBox "Please ensure all mandatory fields are completed", vbCritical, "Autoform - Mandatory Fields"
                    Exit Sub
                End If
            Next cell
        Next i
        
        For i = 4 To lastRow
            If sht.Range("J" & i) = "" Then
            ' Nothing
            Else
                listlastrow = general.lastRow(transfersListSheet)
            
                Dim rowNumCell As Range
                Set rowNumCell = transfersListSheet.Columns("J:J").Find(what:=CStr(i), LookIn:=xlValues, lookat:=xlWhole)
                        
                If sht.Range("N" & i).value = "" And sht.Range("O" & i).value = "" And sht.Range("Q" & i).value = "" And rowNumCell Is Nothing Then GoTo nextItem
                If sht.Range("E" & i).value = sht.Range("N" & i).value And sht.Range("F" & i).value = sht.Range("O" & i).value And sht.Range("G" & i).value = sht.Range("Q" & i).value Then GoTo nextItem
                
                oldEmployeeID = sht.Range("G" & i).value
                oldBranch = sht.Range("E" & i).value
                oldDept = sht.Range("F" & i).value
                uniqueKey = sht.Range("J" & i).value

                If (sht.Range("N" & i).value = "") Then
                    newBranch = sht.Range("E" & i).value
                ElseIf (sht.Range("N" & i).value = "~") Then
                    newBranch = ""
                Else
                    newBranch = sht.Range("N" & i).value
                End If
                
                If (sht.Range("O" & i).value = "") Then
                    newDept = sht.Range("F" & i).value
                ElseIf (sht.Range("O" & i).value = "~") Then
                    newDept = ""
                Else
                    newDept = sht.Range("O" & i).value
                End If
                
                If (sht.Range("Q" & i).value = "") Then
                    newEmployeeID = sht.Range("G" & i).value
                ElseIf (sht.Range("Q" & i).value = "~") Then
                    newEmployeeID = ""
                Else
                    newEmployeeID = sht.Range("Q" & i).value
                End If

'                employeeID = sht.Range("G" & i).value
                lastName = sht.Range("H" & i).value
                firstName = sht.Range("I" & i).value

                Dim matchUniqueKey As String
                matchUniqueKey = newEmployeeID & "|" & newBranch & "|" & newDept
                Set keyMatchFound = MasterSht.Range("G:G").Find(what:=matchUniqueKey, LookIn:=xlValues)

                

                If listlastrow > 0 Then
                    With transfersListSheet

'                        Dim rowNumCell As Range
'                        Set rowNumCell = .Range("J1:J" & listlastrow).Find(What:=CStr(i), LookIn:=xlValues, LookAt:=xlWhole)

                        If Not rowNumCell Is Nothing Then

                            If .Range("A" & rowNumCell.row).value = oldBranch And .Range("B" & rowNumCell.row).value = oldDept And .Range("C" & rowNumCell.row).value = oldEmployeeID And .Range("D" & rowNumCell.row).value = lastName And .Range("E" & rowNumCell.row).value = firstName Then
                             
'                                If newBranch = .Range("G" & rowNumCell.row).value And NewDept = .Range("H" & rowNumCell.row).value Then GoTo nextItem
'
                                Application.EnableEvents = False
    
                                formerNewUniqueKey = .Range("F" & rowNumCell.row).value
                                Set Findrow = MasterSht.Range("G:G").Find(what:=formerNewUniqueKey, LookIn:=xlValues)
                                
                                MasterSht.Range("D" & Findrow.row).value = newEmployeeID
                                MasterSht.Range("E" & Findrow.row).value = newBranch
                                MasterSht.Range("F" & Findrow.row).value = newDept
                                uniqueKeyPmts = MasterSht.Range("G" & Findrow.row).value
                                MasterSht.Range("G" & Findrow.row).value = MasterSht.Range("D" & Findrow.row).value & "|" & MasterSht.Range("E" & Findrow.row).value & "|" & MasterSht.Range("F" & Findrow.row).value
                                
                                Call ChangeIDs(newBranch, newDept, newEmployeeID, uniqueKeyPmts)
                                
                                .Range("G" & rowNumCell.row).value = newBranch
                                .Range("H" & rowNumCell.row).value = newDept
                                .Range("I" & rowNumCell.row).value = MasterSht.Range("G" & Findrow.row).value
                                
                                Application.EnableEvents = True
                                
                                GoTo nextItem
                            Else
                                .Rows(rowNumCell.row).EntireRow.ClearContents
                            End If
                        End If
                        
                        If Not keyMatchFound Is Nothing Then
                        
                            If sht.Range("Q" & i).value = "" Then
                                eeIDTrans = sht.Range("G" & i).value
                            Else
                                eeIDTrans = sht.Range("Q" & i).value
                            End If
                        
                            If sht.Range("O" & i).value = "" Then
                                deptTrans = sht.Range("F" & i).value
                            Else
                                deptTrans = sht.Range("O" & i).value
                            End If
                            
                            If sht.Range("N" & i).value = "" Then
                                branchTrans = sht.Range("E" & i).value
                            Else
                                branchTrans = sht.Range("N" & i).value
                            End If
                                                            
                            Call TransMsg(eeIDTrans, branchTrans, deptTrans)
                            
                            sht.Range("N" & i & ":" & "O" & i).ClearContents
                            sht.Range("Q" & i).ClearContents
                            
                            GoTo nextItem
                        End If
                    End With
                End If

                With sht
                    If Not keyMatchFound Is Nothing Then
                    
                        If sht.Range("Q" & i).value = "" Then
                            eeIDTrans = sht.Range("G" & i).value
                        Else
                            eeIDTrans = sht.Range("Q" & i).value
                        End If
                    
                        If sht.Range("O" & i).value = "" Then
                            deptTrans = sht.Range("F" & i).value
                        Else
                            deptTrans = sht.Range("O" & i).value
                        End If
                        
                        If sht.Range("N" & i).value = "" Then
                            branchTrans = sht.Range("E" & i).value
                        Else
                            branchTrans = sht.Range("N" & i).value
                        End If
                        
                        Call TransMsg(eeIDTrans, branchTrans, deptTrans)
                        
                        sht.Range("N" & i & ":" & "O" & i).ClearContents
                        sht.Range("Q" & i).ClearContents
                        
                        GoTo nextItem
                    End If
                    
                    Set Findrow = MasterSht.Range("G:G").Find(what:=uniqueKey, LookIn:=xlValues)
                    
                    If Not Findrow Is Nothing Then
                        FindRowNumber = Findrow.row
                        
                        If Not keyMatchFound Is Nothing Then
                        
                            Call TransMsg(sht.Range("G" & i).value, sht.Range("N" & i).value, sht.Range("O" & i).value)
                            
                            sht.Range("N" & i & ":" & "O" & i).ClearContents
                            sht.Range("Q" & i).ClearContents

        
                            GoTo nextItem
                        End If
                    Else
                        Call NoEmpMsg(sht.Range("G" & i).value, sht.Range("N" & i).value, sht.Range("O" & i).value)
                        
                        GoTo nextItem
                    End If
                End With
                


                Application.EnableEvents = False

                MasterSht.Range("D" & FindRowNumber).value = newEmployeeID
                MasterSht.Range("E" & FindRowNumber).value = newBranch
                MasterSht.Range("F" & FindRowNumber).value = newDept
                uniqueKeyPmts = MasterSht.Range("G" & FindRowNumber).value
                MasterSht.Range("G" & FindRowNumber).value = MasterSht.Range("D" & FindRowNumber).value & "|" & MasterSht.Range("E" & FindRowNumber).value & "|" & MasterSht.Range("F" & FindRowNumber).value
                
                Call ChangeIDs(newBranch, newDept, newEmployeeID, uniqueKeyPmts)
                
                Application.EnableEvents = True
                
                AddTransfer (i)
            End If
            
nextItem:
        Next i

'        Call ChangeIDs
        
        MsgBox "Employee records have been updated in the master data", vbInformation, "Employee List"
    End If
               
'    Transfers.UpdateTransfersList
    Application.EnableEvents = True
    Call InitializeDict
    
End Sub
Sub UpdateEmployeeNames()
    Dim general As general
    Dim sht As Worksheet
    Dim MasterSht As Worksheet
    Dim lastRow As Integer
    Dim uniqueKey As String
    Dim uniqueKeySht As String
    Dim FindRowNumber As Integer
    Dim FindTransferNumber As Integer
    Dim NewLastName As String
    Dim NewFirstName As String
    Dim NewInitial As String
    Dim CurrRange As Range
            
    Set general = New general
    Set sht = ThisWorkbook.Worksheets("Employee Info Changes")
    Set MasterSht = ThisWorkbook.Worksheets("MASTER setup")
    
    lastRow = general.lastRow(sht)
        
    If lastRow > 3 Then
        For i = 4 To lastRow
            Set CurrRange = sht.Range("E" & i & ":" & general.NumToExcelLetter(general.lastColumn(sht)) & i)
            For Each cell In CurrRange.Cells
                If cell.Interior.ColorIndex = 22 Then
                    MsgBox "Please ensure all mandatory fields are completed", vbCritical, "Autoform - Mandatory Fields"
                    Exit Sub
                End If
            Next cell
        Next i
        
        For i = 4 To lastRow
            If sht.Range("J" & i) = Null Then
            ' Nothing
            Else
                uniqueKeySht = sht.Range("J" & i).value
                               
                Set FindTransfer = Sheets("Transfers List Setup").Range("F:F").Find(what:=uniqueKeySht, LookIn:=xlValues)
                If Not FindTransfer Is Nothing Then
                    FindTransferRow = FindTransfer.row
                    uniqueKey = Sheets("Transfers List Setup").Range("I" & FindTransferRow).value
                Else
                    uniqueKey = uniqueKeySht
                End If
                
                NewLastName = sht.Range("H" & i).value
                NewFirstName = sht.Range("I" & i).value
                NewInitial = sht.Range("K" & i).value
                With sht
                    Set Findrow = MasterSht.Range("G:G").Find(what:=uniqueKey, LookIn:=xlValues)
                    FindRowNumber = Findrow.row
                End With
                MasterSht.Range("A" & FindRowNumber).value = NewLastName
                MasterSht.Range("B" & FindRowNumber).value = NewFirstName
                MasterSht.Range("C" & FindRowNumber).value = NewInitial
            End If
        Next
        MsgBox "Employee records have been updated in the master data", vbInformation, "Employee List"
    End If
                
    Call InitializeDict
    
End Sub


'Allows the user to clear all data on activesheet
'Starts to delete data from row 4 as row 1 to 3 are used as header rows
'Nothing happens if there is no data
Sub Reset_Click()
    Dim lastRow As Integer
    Dim lastColumn  As String
    Dim answer As Integer
    Dim deleteoption As String
    
    Set general = New general

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    lastRow = general.lastRow(Application.activeSheet)
    lastColumn = general.NumToExcelLetter(general.lastColumn(Application.activeSheet))
'    lastRow = Application.activeSheet.UsedRange.Rows.Count
'    lastColumn = general.NumToExcelLetter(Application.activeSheet.UsedRange.Rows.Count)
   
    If activeSheet.Name = "Current Pay Hours TS" Then
        
        If lastRow > 3 Then
            answer = MsgBox("Resetting the page will erase all data in the sheet." & vbNewLine & "Do you want to continue?", vbYesNo + vbQuestion, "Current Pay Hours Reset")

            If answer = vbYes Then
                Sheets("Current Pay Hours Setup").Range("B14").value = "No"
                deleteoption = MsgBox("Current Pay Hours - Timesheet View" & vbNewLine & vbNewLine & "Would you like to preserve the employees that were entered in the Timesheet?", vbYesNo + vbQuestion, "Current Pay Hours - Timeshet View")
                If deleteoption = vbYes Then
                    Application.activeSheet.Range("K4:" & lastColumn & lastRow).ClearContents
'                    SendKeys "{DEL}~", False
                Else
                    Application.activeSheet.Range("D4:" & lastColumn & lastRow).ClearContents
                    Application.activeSheet.Range("D4:" & lastColumn & lastRow).EntireRow.Interior.ColorIndex = 0
'                    SendKeys "{DEL}~", False
                    
                    With Sheets("Current Pay Hours TS")
                        LastCol = .Cells(3, .Columns.Count).End(xlToLeft).Column
                    End With
                    
                    For TsCol = 11 To LastCol
                    
                        Sheets("Current Pay Hours TS").Columns(TsCol).Hidden = True
                    Next TsCol
                End If
                
                Sheets("Current Pay Hours Overrides").Cells.Clear
                
            End If
            
        End If
        

        
    ElseIf activeSheet.Name = "Current Pay Hours" Then
    
        
        lastRow = general.lastRow(Sheets("Current Pay Hours TS"))
        lastColumn = general.NumToExcelLetter(general.lastColumn(Sheets("Current Pay Hours TS")))
        
        If lastRow < 4 Then
        
            lastRow = general.lastRow(Sheets("Current Pay Hours"))
            lastColumn = general.NumToExcelLetter(general.lastColumn(Sheets("Current Pay Hours")))
            
            If lastRow > 3 Then
                answer = MsgBox("Resetting the page will erase all data in the sheet." & vbNewLine & "Do you want to continue?", vbYesNo + vbQuestion, activeSheet.Name & " Reset")
                If answer = vbYes Then
                    Application.activeSheet.Range("B4:" & lastColumn & lastRow).ClearContents
                    Application.activeSheet.Range("B4:" & lastColumn & lastRow).EntireRow.Interior.ColorIndex = 0
                End If
            End If
            
        Else
    
            If lastRow > 3 Then
                
                answer = MsgBox("Resetting the page will erase all data in the sheet." & vbNewLine & "Do you want to continue?", vbYesNo + vbQuestion, activeSheet.Name & " Reset")
                
                If answer = vbYes Then
                    
                    deleteoption = MsgBox("Current Pay Hours - Timesheet View" & vbNewLine & vbNewLine & "Would you like to preserve the employees that were entered in the Timesheet?", vbYesNo + vbQuestion, "Current Pay Hours - Timeshet View")
                    
                    If deleteoption = vbYes Then
'                        With Sheets("Current Pay Hours")
'                            LastRowNum = .Cells(.Rows.count, "G").End(xlUp).row
'                        End With
                        
                        Sheets("Current Pay Hours TS").Range("K4:" & lastColumn & lastRow).ClearContents
'                        Sheets("Current Pay Hours").Range("B4:N" & LastRowNum).ClearContents
'                        Sheets("Current Pay Hours").Range("B4:N" & LastRowNum).EntireRow.Interior.ColorIndex = 0
                        Sheets("Current Pay Hours Overrides").Range("A:A").ClearContents
                        
                        
'                        Call TransferToHoriz
'                        Application.activeSheet.Range("K4:" & lastColumn & lastRow).ClearContents
                        Call TransToVert
                        Application.EnableEvents = False
                    Else
                        With Sheets("Current Pay Hours")
                            LastRowNum = .Cells(.Rows.Count, "G").End(xlUp).row
                        End With
                        
'                        Application.EnableEvents = False
                        Sheets("Current Pay Hours TS").Select
                        Application.activeSheet.Range("D4:" & lastColumn & lastRow).ClearContents
                        Application.activeSheet.Range("D4:" & lastColumn & lastRow).EntireRow.Interior.ColorIndex = 0
                        
                        If LastRowNum > 3 Then
                            Sheets("Current Pay Hours").Range("B4:N" & LastRowNum).ClearContents
                            Sheets("Current Pay Hours").Range("B4:N" & LastRowNum).EntireRow.Interior.ColorIndex = 0
                            Sheets("Current Pay Hours Overrides").Range("A:A").ClearContents
                        End If
                        With Sheets("Current Pay Hours TS")
                            LastCol = .Cells(3, .Columns.Count).End(xlToLeft).Column
                        End With
                        
                        If LastCol > 10 Then
                            For TsCol = 11 To LastCol
                            
                                Sheets("Current Pay Hours TS").Columns(TsCol).Hidden = True
                            Next TsCol
                        End If
                        
                        Sheets("Current Pay Hours").Select
                        
'                        Call TransToVert
                    
                    End If
                End If
            End If
            Range("E4").Select
'            Sheets("Current Pay Hours Overrides").Range("A4:" & lastColumn & lastRow).ClearContents
'            Application.EnableEvents = False
            Sheets("Current Pay Hours Overrides").Cells.Clear
'            Application.EnableEvents = True
        End If
    Else
        If lastRow > 3 Then
            answer = MsgBox("Resetting the page will erase all data in the sheet." & vbNewLine & "Do you want to continue?", vbYesNo + vbQuestion, activeSheet.Name & " Reset")
            If answer = vbYes Then
                If activeSheet.Name = "Transfers" Then CreateNewTransfersList
                
                Application.activeSheet.Range("D4:" & lastColumn & lastRow).ClearContents
                Application.activeSheet.Range("D4:" & lastColumn & lastRow).EntireRow.Interior.ColorIndex = 0
            End If
        End If
        
        Range("E4").Select
        
    End If
    
    ApplicationSettings.LoadSheetValues activeSheet.Name
    Excel.activeSheet.UsedRange
    Application.EnableEvents = True
    Range("E4").Select
    ActiveWindow.ScrollRow = 1
    
End Sub
Sub Reset_Click_All(answer As Integer, deleteoption As String)
    Dim lastRow As Integer
    Dim lastColumn  As String

    Set general = New general

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    lastRow = general.lastRow(Application.activeSheet)
    lastColumn = general.NumToExcelLetter(general.lastColumn(Application.activeSheet))
   
    If activeSheet.Name = "Current Pay Hours TS" Then
    
        If lastRow > 3 Then
'            answer = MsgBox("Resetting the page will erase all data in the sheet. Do you want to continue?", vbYesNo + vbQuestion, "COS Input")
'            deleteoption = MsgBox("Would you like to delete amounts only and preserve employee list?", vbYesNo + vbQuestion, "COS Input")
            If answer = vbYes Then
                Sheets("Current Pay Hours Setup").Range("B14").value = "No"
                If deleteoption = vbYes Then
                    Application.activeSheet.Range("K4:" & lastColumn & lastRow).ClearContents
                Else
                    Application.activeSheet.Range("D4:" & lastColumn & lastRow).ClearContents
                    Application.activeSheet.Range("D4:" & lastColumn & lastRow).EntireRow.Interior.ColorIndex = 0
                    With Sheets("Current Pay Hours TS")
                        LastCol = .Cells(3, .Columns.Count).End(xlToLeft).Column
                    End With
                    
                    For TsCol = 11 To LastCol
                    
                        Sheets("Current Pay Hours TS").Columns(TsCol).Hidden = True
                    Next TsCol
                End If
                
                Sheets("Current Pay Hours Overrides").Cells.Clear
                
            End If
 
        End If
        
        
        
    ElseIf activeSheet.Name = "Current Pay Hours" Then
    
        
        lastRow = general.lastRow(Sheets("Current Pay Hours TS"))
        lastColumn = general.NumToExcelLetter(general.lastColumn(Sheets("Current Pay Hours TS")))
        
        If lastRow < 4 Then
        
            lastRow = general.lastRow(Sheets("Current Pay Hours"))
            lastColumn = general.NumToExcelLetter(general.lastColumn(Sheets("Current Pay Hours")))
            
            If lastRow > 3 Then
'                answer = MsgBox("Resetting the page will erase all data in the sheet. Do you want to continue?", vbYesNo + vbQuestion, "COS Input")
                If answer = vbYes Then
                    Application.activeSheet.Range("B4:" & lastColumn & lastRow).ClearContents
                    Application.activeSheet.Range("B4:" & lastColumn & lastRow).EntireRow.Interior.ColorIndex = 0
                End If
            End If
            
        Else
    
            If lastRow > 3 Then
                
'                answer = MsgBox("Resetting the page will erase all data in the sheet. Do you want to continue?", vbYesNo + vbQuestion, "COS Input")
'                deleteoption = MsgBox("Would you like to delete amounts only and preserve employee list?", vbYesNo + vbQuestion, "COS Input")
                
                If answer = vbYes Then
                    
                    If deleteoption = vbYes Then
'                        With Sheets("Current Pay Hours")
'                            LastRowNum = .Cells(.Rows.count, "G").End(xlUp).row
'                        End With
                        
                        Sheets("Current Pay Hours TS").Range("K4:" & lastColumn & lastRow).ClearContents
'                        Sheets("Current Pay Hours").Range("B4:N" & LastRowNum).ClearContents
'                        Sheets("Current Pay Hours").Range("B4:N" & LastRowNum).EntireRow.Interior.ColorIndex = 0
                        Sheets("Current Pay Hours Overrides").Range("A:A").ClearContents
                        Call TransToVert_NoViewToggle
                        Application.EnableEvents = False
                    Else
                        With Sheets("Current Pay Hours")
                            LastRowNum = .Cells(.Rows.Count, "G").End(xlUp).row
                        End With
                        
                        Sheets("Current Pay Hours TS").Select
                        Application.activeSheet.Range("D4:" & lastColumn & lastRow).ClearContents
                        Application.activeSheet.Range("D4:" & lastColumn & lastRow).EntireRow.Interior.ColorIndex = 0
                        
                        If LastRowNum > 3 Then
                            Sheets("Current Pay Hours").Range("B4:N" & LastRowNum).ClearContents
                            Sheets("Current Pay Hours").Range("B4:N" & LastRowNum).EntireRow.Interior.ColorIndex = 0
                            Sheets("Current Pay Hours Overrides").Range("A:A").ClearContents
                        End If
                        With Sheets("Current Pay Hours TS")
                            LastCol = .Cells(3, .Columns.Count).End(xlToLeft).Column
                        End With
                        
                        If LastCol > 10 Then
                            For TsCol = 11 To LastCol
                                Sheets("Current Pay Hours TS").Columns(TsCol).Hidden = True
                            Next TsCol
                        End If
                        
'                        Call TransToVert_NoViewToggle
                    
                    End If
                End If
            End If

            Sheets("Current Pay Hours Overrides").Cells.Clear
        End If
    Else
        If lastRow > 3 Then
'            answer = MsgBox("Resetting the page will erase all data in the sheet. Do you want to continue?", vbYesNo + vbQuestion, "COS Input")
            If answer = vbYes Then
                Application.activeSheet.Range("D4:" & lastColumn & lastRow).ClearContents
                Application.activeSheet.Range("D4:" & lastColumn & lastRow).EntireRow.Interior.ColorIndex = 0
            End If
        End If
        
'        Range("E4").Select
        
    End If
    
    Application.EnableEvents = True
    Range("E4").Select
    ActiveWindow.ScrollRow = 1
End Sub

Sub Reset_Click_Switch()

    Application.ScreenUpdating = False

    Dim lastRow As Integer
    Dim lastColumn  As String
    Dim answer As Integer
    Set general = New general

        
    lastRow = general.lastRow(Application.activeSheet)
    lastColumn = general.NumToExcelLetter(general.lastColumn(Application.activeSheet))
   
    If lastRow > 3 Then
            Application.activeSheet.Range("D4:" & lastColumn & lastRow).ClearContents
    End If
    
    Call SortRegHrsView_ByRowNum
    
End Sub

Sub Reset_Click_LoadEE()
    Dim lastRow As Integer
    Dim lastColumn  As String
    Dim answer As Integer
    Dim deleteoption As String
    
    Set general = New general

        
    lastRow = general.lastRow(Application.activeSheet)
    lastColumn = general.NumToExcelLetter(general.lastColumn(Application.activeSheet))
   

    
    If lastRow > 3 Then
        Application.activeSheet.Range("D4:" & lastColumn & lastRow).ClearContents
    End If
    
    Sheets("Current Pay Hours Overrides").Range("A:A").ClearContents
    
End Sub


'Allows the user to clear all data on all sheets, except for the cover sheet, user guide and all other sheets that contain the word setup
'Starts to delete data from row 4 as row 1 to 3 are used as header rows
'Nothing happens if there is no data
'Set the value of J33 on the cover sheet to Yes since the sum of J19 to J31 is 0
Sub ResetAll_Click()
    Dim sht As Worksheet
    Dim sheetName As String
    Dim lastRow As Integer
    Dim lastColumn As String
    Dim answer As Integer
    Set general = New general
    Dim deleteoption As String
    Dim CountRange As Range
    
    lastRow = general.lastRow(Sheets("Current Pay Hours TS"))
    lastColumn = general.NumToExcelLetter(general.lastColumn(Sheets("Current Pay Hours TS")))

    answer = MsgBox("Resetting all the pages will erase data from all of the sheets." & vbNewLine & "Do you want to continue?", vbYesNo + vbQuestion, "Autoform Reset")
    
    If answer = vbNo Then
        Sheets("CL0-COVER SHEET").Activate
        ActiveWindow.ScrollRow = 1
        Exit Sub
    End If
    
    CreateNewTransfersList
    
    If lastRow < 4 Then
        deleteoption = vbYes
    Else
        deleteoption = MsgBox("Current Pay Hours - Timesheet View" & vbNewLine & vbNewLine & "Would you like to preserve the employees that were entered in the Timesheet?", vbYesNo + vbQuestion, "Current Pay Hours - Timeshet View")
    End If
    
    Application.EnableEvents = False

    For Each sht In ThisWorkbook.Worksheets
        
        sheetName = UCase(Trim(sht.Name))

        If InStr(1, sheetName, "SETUP") = False And sheetName <> "CL0-COVER SHEET" And sheetName <> "USER GUIDE" And sht.Name <> "Current Pay Hours Overrides" Then
            Application.ScreenUpdating = False
            sht.Activate
            Call Reset_Click_All(answer, deleteoption)
            Application.EnableEvents = False
        End If
        
    Next sht

    If Application.WorksheetFunction.Sum(ThisWorkbook.Worksheets("CL0-COVER SHEET").Range("J19:J32")) > 0 Then
        ThisWorkbook.Worksheets("CL0-COVER SHEET").Range("J34") = "No"
    Else
        ThisWorkbook.Worksheets("CL0-COVER SHEET").Range("J34") = "Yes"
    End If
    ThisWorkbook.Worksheets("CL0-COVER SHEET").Range("J15") = "No"
    
    With Sheets("Current Pay Hours TS")
        LastRowCol = .Cells(.Rows.Count, "G").End(xlUp).row
    End With
    
    If LastRowCol > 3 Then Call TransToVert_NoViewToggle
    
    Sheets("CL0-COVER SHEET").Activate
    ActiveWindow.ScrollRow = 1
    
    Sheets("CL0-COVER SHEET").Range("J19:J31").Interior.ColorIndex = 0
    
    Application.EnableEvents = True
End Sub

'This function is called when the user clicks on the "For ADP Use Only" button
'An input box is is displayed for the user to enter the password in order to display the Admin Tool form
Sub AdminTool_Click()
    Dim strPassword As String
    strPassword = InputBox("Please enter password", "Admin Tool")
    
    If strPassword = "adpADP10" Then
        frmAdminTool.Show
    ElseIf strPassword = vbNullString Then Exit Sub
    Else
        MsgBox "Wrong Password"
    End If
End Sub

'Initializes the General Class as well as recreates the dictionary that stores the Master tab data
Public Sub InitializeDict()
    Dim bok As Boolean
    Dim general As general
    
    Set general = New general
    bok = general.CreateMasterDataDict

End Sub
Public Sub SINValidation(Target As Range, sheetName As String, SINColNum)
    
    Dim TargetCell As Range
    Dim strSIN As String
    Dim intSINDigit As Integer
    Dim intSum As Single
    Dim sht As Worksheet
    Dim general As general
    
    On Error GoTo errHandler
    Set general = New general
    Set sht = ThisWorkbook.Worksheets(sheetName)
    
    For Each TargetCell In Target
        If TargetCell.row > 3 Then
            ' Action on Remit flag field
            If TargetCell.Column = SINColNum Then
                If TargetCell <> "" Then
                    strSIN = Range(general.NumToExcelLetter(SINColNum) & TargetCell.row)
                    If (Len(strSIN) <> 9) Or Not (IsNumeric(strSIN)) Then
                        MsgBox "SIN: " & strSIN & " is invalid" & vbCrLf & "Please enter a valid SIN #" & Dept, vbCritical, "SIN Validation"
                        TargetCell = Null
                        Exit Sub
                    Else
                        ' Validate SIN
                        intSum = 0
                        For posDigit = 1 To 9
                            intSINDigit = Mid(strSIN, posDigit, 1)
                            If posDigit Mod 2 = 0 Then
                                If (intSINDigit) * 2 >= 10 Then
                                    intSum = intSum + ((intSINDigit * 2) - 9)
                                Else
                                    intSum = intSum + (intSINDigit * 2)
                                End If
                            Else
                                intSum = intSum + intSINDigit
                            End If
                        Next
                        intSum = intSum / 10
                        If Int(intSum) <> intSum Then
                            MsgBox "SIN: " & strSIN & " is invalid" & vbCrLf & "Please enter a valid SIN #" & Dept, vbCritical, "SIN Validation"
                            TargetCell = Null
                        End If
                    End If
                End If
            End If
         End If
    Next TargetCell
errHandler:
    Exit Sub


End Sub


'This Function returns an Array variable
'Used for mapping - does a lookup in the Master Setup Data Disctionary
'EmpNum could be the Last Name, First Name or Employee Id
'FieldValues is the array that stores the order of the data in the Master Setup sheet
'SearchPos is the column position of EmpNum: 0 - Last Name, 1 - First Name and 3 - Employee Id
'Uses SearchPos to look for the for the value at SearchPos in sDict (Master Setup Dictionary)
'In the event that the EmpNum appears more than once then the function LoadMasterForm is called that loads frmMaster
'Exits this function if no selection is made by the user on the Master Form
'In the event that EmpNum is not found all other fields are populate will Null (empty String)

Public Function GetValues(EmpNum As String, FieldValues As Variant, searchPos As Integer, Target As Range, formOrGrid As String) As Variant
    Dim i As Long
    Dim sValues()
    Dim fValues()
    Dim EmpName() As String
    Dim sheetName As String
    Dim Counter As Integer
    Dim EmployeeTransfer As EmployeeTransfer
    Dim general As general
    Dim matchRow As Long
    Dim transfersListSheet As Worksheet
    On Error GoTo errHandler
    
StartAgain:

    For Each key In sDict
        sValues() = sDict(key)
        If EmpNum <> "" And InStr(UCase(sValues(searchPos)), UCase(EmpNum)) > 0 Then
            Counter = Counter + 1
        End If
    Next key
    'Load the master data form
    If Counter > 1 Then
        If searchPos = 0 Then
            Call LoadMasterForm(EmpNum, 1, Target, formOrGrid)
        ElseIf searchPos = 1 Then
            Call LoadMasterForm(EmpNum, 2, Target, formOrGrid)
        ElseIf searchPos = 3 Then
            Call LoadMasterForm(EmpNum, 4, Target, formOrGrid)
        End If
        
        If (frmMaster.cancelled = True) Then
            ReDim fValues(1)
            fValues(1) = "Cancelled"
            GetValues = fValues
            Exit Function
        ElseIf (frmMaster.skipped = True) Then
            ReDim fValues(1)
            fValues(1) = "Skipped"
            GetValues = fValues
            Exit Function
        End If
        
        If frmMaster.lstData.ListCount = 0 Then
'            Dim emptyCounter As Integer
'
'            For emptyCounter = 0 To UBound(sValues)
'                ReDim Preserve fValues(emptyCounter)
'                fValues(emptyCounter) = ""
'            Next emptyCounter
            
            Erase fValues
            
            GetValues = fValues
            Exit Function
        End If
        
        sValues = frmMaster.LoadUserList(sValues)
    
        For i = 0 To UBound(FieldValues)
            ReDim Preserve fValues(i)
            fValues(i) = sValues(FieldValues(i))
        Next i
        
        If ThisWorkbook.activeSheet.Name = "Status Changes" Or ThisWorkbook.activeSheet.Name = "Salary Changes" Or ThisWorkbook.activeSheet.Name = "Employee Info Changes" Or ThisWorkbook.activeSheet.Name = "Transfers" Then
            
            Set transfersListSheet = Sheets("Transfers List Setup")
            
            matchRow = 0
            
            If transfersListSheet.Range("F1").value <> "" Then
                Set general = New general
                
                For i = 1 To general.lastRow(transfersListSheet)
                    If searchPos = 0 Then
                        If transfersListSheet.Range("D" & i).value = fValues(3) Then
                            matchRow = i
                            Exit For
                        End If
                    ElseIf searchPos = 1 Then
                        If transfersListSheet.Range("E" & i).value = fValues(4) Then
                            matchRow = i
                            Exit For
                        End If
                    ElseIf searchPos = 3 Then
                        If transfersListSheet.Range("C" & i).value = fValues(2) Then
                            matchRow = i
                            Exit For
                        End If
                    End If
                Next i
        
                If matchRow > 0 Then
                    If ThisWorkbook.activeSheet.Name = "Employee Info Changes" Then
                        fValues = Array(transfersListSheet.Range("A" & i).value, transfersListSheet.Range("B" & i).value, _
                            transfersListSheet.Range("C" & i).value, transfersListSheet.Range("D" & i).value, _
                            transfersListSheet.Range("E" & i).value, transfersListSheet.Range("F" & i).value, "")
                    Else
                        fValues = Array(transfersListSheet.Range("A" & i).value, transfersListSheet.Range("B" & i).value, _
                            transfersListSheet.Range("C" & i).value, transfersListSheet.Range("D" & i).value, _
                            transfersListSheet.Range("E" & i).value, transfersListSheet.Range("F" & i).value)
                            
                        GetValues = fValues
                        Exit Function
                    End If
                End If
            End If
        End If
        
        GetValues = fValues
            Exit Function
            
    ElseIf Counter < 1 Then
       
        If formOrGrid = "Form" Then
        
            If searchPos = 0 Then
                frmEmployeeNotFound.FormatSearchFields (1)
            ElseIf searchPos = 1 Then
                frmEmployeeNotFound.FormatSearchFields (2)
            ElseIf searchPos = 3 Then
                frmEmployeeNotFound.FormatSearchFields (4)
            End If
            
            
            frmEmployeeNotFound.PopulateSearchFields_QF Target
            frmEmployeeNotFound.skipped = False
            frmEmployeeNotFound.isLastRow 1, 1
            frmEmployeeNotFound.cancelled = Falsezdcz
            frmEmployeeNotFound.continueAll = False
            frmEmployeeNotFound.Show

    
            If (frmEmployeeNotFound.cancelled = True) Then
                ReDim fValues(1)
                fValues(1) = "Cancelled"
                GetValues = fValues
                Exit Function
            ElseIf (frmEmployeeNotFound.skipped = True) Then
                ReDim fValues(1)
                fValues(1) = "Skipped"
                GetValues = fValues
                Exit Function
            End If

        Else
            For i = 0 To UBound(FieldValues)
                ReDim Preserve fValues(i)
                fValues(i) = sValues(FieldValues(i))
            Next i
        End If
    End If
    
    Counter = 0
    For Each key In sDict
        sValues() = sDict(key)
        If EmpNum <> "" And InStr(UCase(sValues(searchPos)), UCase(EmpNum)) > 0 Then
            For i = 0 To UBound(FieldValues)
                ReDim Preserve fValues(i)
                fValues(i) = sValues(FieldValues(i))
            Next i
            Counter = Counter + 1
        End If
    Next key
    
    If ThisWorkbook.activeSheet.Name = "Status Changes" Or ThisWorkbook.activeSheet.Name = "Salary Changes" Or ThisWorkbook.activeSheet.Name = "Employee Info Changes" Or ThisWorkbook.activeSheet.Name = "Transfers" Then
        
        Set transfersListSheet = Sheets("Transfers List Setup")
        
        matchRow = 0
        
        If transfersListSheet.Range("F1").value <> "" Then
            Set general = New general
            
            For i = 1 To general.lastRow(transfersListSheet)
                If searchPos = 0 Then
                    If transfersListSheet.Range("D" & i).value = fValues(3) Then
                        matchRow = i
                        Exit For
                    End If
                ElseIf searchPos = 1 Then
                    If transfersListSheet.Range("E" & i).value = fValues(4) Then
                        matchRow = i
                        Exit For
                    End If
                ElseIf searchPos = 3 Then
                    If transfersListSheet.Range("K" & i).value = fValues(2) Then
                        matchRow = i
                        Exit For
                    End If
                End If
            Next i
    
            If matchRow > 0 Then
                If ThisWorkbook.activeSheet.Name = "Employee Info Changes" Then
                    fValues = Array(transfersListSheet.Range("A" & i).value, transfersListSheet.Range("B" & i).value, _
                        transfersListSheet.Range("C" & i).value, transfersListSheet.Range("D" & i).value, _
                        transfersListSheet.Range("E" & i).value, transfersListSheet.Range("F" & i).value, "")
                Else
                    fValues = Array(transfersListSheet.Range("A" & i).value, transfersListSheet.Range("B" & i).value, _
                        transfersListSheet.Range("C" & i).value, transfersListSheet.Range("D" & i).value, _
                        transfersListSheet.Range("E" & i).value, transfersListSheet.Range("F" & i).value)
                        
                    GetValues = fValues
                    Exit Function
                End If
            End If
        End If
        
'        Dim matchFound As Boolean
'        matchFound = False
'
'        If Not (EmployeeTransfers Is Nothing) Then
'            For Each employeeTransfer In EmployeeTransfers
'                If searchPos = 0 Then
'                    If employeeTransfer.lastName = fValues(3) Then
'                        matchFound = True
'                        Exit For
'                    End If
'                ElseIf searchPos = 1 Then
'                    If employeeTransfer.firstName = fValues(4) Then
'                        matchFound = True
'                        Exit For
'                    End If
'                ElseIf searchPos = 3 Then
'                    If employeeTransfer.employeeID = fValues(2) Then
'                        matchFound = True
'                        Exit For
'                    End If
'                End If
'            Next employeeTransfer
'
'            If matchFound = True Then
'                fValues = Array(employeeTransfer.oldBranch, employeeTransfer.oldDepartment, employeeTransfer.employeeID, employeeTransfer.lastName, employeeTransfer.firstName, employeeTransfer.uniqueKey)
'                GetValues = fValues
'                Exit Function
'            End If
'        End If
    End If
    
    If Counter = 0 Then
        sheetName = ThisWorkbook.activeSheet.Name
        If sheetName = "Employee Info Changes" Then
            If searchPos = 0 Then
                fValues = Array("", "", "", EmpNum, "", "", "")
            ElseIf searchPos = 1 Then
                fValues = Array("", "", "", "", EmpNum, "", "")
            ElseIf searchPos = 3 Then
                fValues = Array("", "", EmpNum, "", "", "", "")
            End If
        ElseIf InStr(1, sheetName, "SETUP") = False And sheetName <> "CL0-COVER SHEET" And sheetName <> "USER GUIDE" Then
            If EmpNum = "" Then
                fValues = Array("", "", "", "", "", "")
            Else
                If searchPos = 0 Then
                    fValues = Array("", "", "", EmpNum, "", "", "")
                ElseIf searchPos = 1 Then
                    fValues = Array("", "", "", "", EmpNum, "", "")
                ElseIf searchPos = 3 Then
                    fValues = Array("", "", EmpNum, "", "", "", "")
                End If
            End If
        End If
    End If

    GetValues = fValues
    
    Exit Function



errHandler:
    Call InitializeDict
    GoTo StartAgain
    
    End Function

'This function displays a dialog box to the user and allows them to select a file, it returns a string variable that stores the file name selected by the user
'Displays CSV files only
'By default displas the active workbook path
Public Function File_Picker() As String
    With Application.FileDialog(msoFileDialogFilePicker)
        .Filters.Clear
        .Filters.Add "CSV", "*.csv", 1
        .InitialFileName = ActiveWorkbook.Path & "\"
        .Show
        If .SelectedItems.Count = 0 Then
            Exit Function
        End If
        File_Picker = .SelectedItems(1)
    End With
End Function

'This function enters the mapped record based on the employee ID, Last Name or First Name
'In the event the user has entered a record using the QuickForm, the code will not be executed and will exit the function
Public Function LoadValuesStatusChange(Target As Range)
    Dim sht As Worksheet
    Dim sheetName As String
    Dim formOrGrid As String
    Dim lastRow As Long
    Const EmpNum = "EE Number"
    Dim LookupValue As Long
    Dim DictValues()
    Dim sValues()
    Dim FieldValues()
    Dim cellCount As Long
    Dim ColumnCount As Long
    Dim rowCount As Long
    Dim EENotFound As String
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim startRow As Long
    Dim endRow As Long
    Dim TargetCells As Range
    Dim targetRow As Range
    Dim emptyRows() As Long
    Dim emptyRowsCount As Integer
    Dim general As New general
    
    If frmEmployeeNotFound.cancelled Then frmEmployeeNotFound.cancelled = False
    If frmEmployeeNotFound.continueAll Then frmEmployeeNotFound.continueAll = False
    If frmPasteBlank.cancelled Then frmPasteBlank.cancelled = False
    If frmPasteBlank.continueAll Then frmPasteBlank.continueAll = False
    
    Set sht = ThisWorkbook.Worksheets("MASTER setup")
    
    If Application.WorksheetFunction.CountA(Target) = 0 Then
        If Application.WorksheetFunction.CountA(Selection) > 0 Then
            ThisWorkbook.currentProcedure = "LoadValuesStatusChange"
            Target.ClearContents
            ThisWorkbook.currentProcedure = ""
        End If
        
        Exit Function
    End If
    
    sheetName = ThisWorkbook.activeSheet.Name
    If Target.Column <> 7 And Target.Column <> 6 And Target.Column <> 5 Then
        If sheetName <> "Employee Options" And Target.NumberFormat <> "0.00" And Target.NumberFormat <> "@" And Target.NumberFormat <> "0.0000" Then
            Target.NumberFormat = "@"
        End If
    Else
        Sheets(sheetName).Columns(5).NumberFormat = "@"
        Sheets(sheetName).Columns(6).NumberFormat = "@"
        Sheets(sheetName).Columns(7).NumberFormat = "@"
    End If
    
    On Error GoTo ErrorHandler:
    
    If bQuickForm Then
        bQuickForm = False
        Exit Function
    End If
    
    lastRow = sht.Range("A1").CurrentRegion.Rows.Count
    sheetName = ThisWorkbook.activeSheet.Name
    If sheetName = "Employee Info Changes" Then
        FieldValues = Array(4, 5, 3, 0, 1, 6, 2)
        ColumnCount = 7
    ElseIf InStr(1, sheetName, "SETUP") = False And sheetName <> "CL0-COVER SHEET" And sheetName <> "USER GUIDE" Then
        'Index number of the values stored in the array based on the master setup tab
        FieldValues = Array(4, 5, 3, 0, 1, 6)
        ColumnCount = 6
    End If
    
    rowCount = Target.Rows.Count
    Dim testrows As Integer
    testrows = 0
    
    Dim allRows As Range
    For Each allRows In Target.Rows
        testrows = testrows + 1
    Next allRows
    
    ReDim sValues(1 To testrows, 1 To ColumnCount)
'    ReDim sValues(1 To rowCount, 1 To ColumnCount)
    startRow = Target.row
    endRow = Target.row + rowCount - 1
    k = 1
                    


    
    Dim lastColumn As Integer
    lastColumn = Target.Columns.Count + Target.Column - 1
    
    Dim allCancelledRows As Collection
    Set allCancelledRows = New Collection
    Dim cancelledRows() As Long
    Dim cancelledRowsCount As Integer
    cancelledRowsCount = 0
    Dim employeeFormCancelled
    employeeFormCancelled = False
    Dim testCell As Variant
    
    If (Target.Column = 5 Or Target.Column = 6) And (lastColumn = 5 Or lastColumn = 6) Then
        If sheetName = "Employee Info Changes" Or sheetName = "Transfers" Or sheetName = "Salary Changes" Or sheetName = "Status Changes" Then
            If Range("G" & Target.row).value <> "" Then
                Application.EnableEvents = False
                
                MsgBox "Changes to an employee's branch or department should be done using the " _
                        & "New Branch and New Department fields on the Transfers page." _
                        & vbCrLf & vbCrLf _
                        & "If your intent was to select a different employee, please delete the line and enter " _
                        & "the appropriate employee's details.", vbCritical, "Invalid Change"
                
                For Each targetRow In Target.Rows
                    For Each testCell In targetRow.Cells
                        testCell.value = ApplicationSettings.activeSheetValues.originalValues(testCell.Address)
                    Next testCell
                Next targetRow
                
                Application.EnableEvents = True
            End If
        End If
        
'    End If
    
    ElseIf (Target.Column < 10 And lastColumn >= 7) Then
        For Each targetRow In Target.Rows
            
'            Application.EnableEvents = False
                    
            i = 1
            
            Dim testArray As Variant
            testArray = targetRow.value

            Dim m As Integer
            Dim n As Integer
            m = 5
            n = 0
            
            Dim tempvaluesarray() As String
            ReDim tempvaluesarray(5)

            If (targetRow.Column <= 9) Then
                While m < 11
                    tempvaluesarray(n) = CStr(Range(Target.Address).EntireRow.Cells(k, m))
                    sValues(k, n + 1) = CStr(Range(Target.Address).EntireRow.Cells(k, m))

                    m = m + 1
                    n = n + 1
                Wend
            End If
            
            n = targetRow.Column - 5
            
            For Each testCell In targetRow.Cells
                If (IsArray(testArray)) Then
                    tempvaluesarray(n) = testArray(1, i)
                Else
                    tempvaluesarray(n) = testArray
                End If
                        
                n = n + 1
                
                Dim searchPosition As Integer
                
                If (testCell.Column = 7 Or testCell.Column = 8 Or testCell.Column = 9) And Target.row > 3 Then
                    If testCell.Column = 7 Then
                        searchPosition = 3
                        
                        formOrGrid = "Grid"
                        
                        If (IsArray(testArray)) Then
                            DictValues = GetValues(Trim(testArray(1, i)), FieldValues, searchPosition, Range(Target.Address).EntireRow.Rows(k), formOrGrid)
                        Else
                            DictValues = GetValues(Trim(testArray), FieldValues, searchPosition, Range(Target.Address).EntireRow.Rows(k), formOrGrid)
                        End If
                        
                        If DictValues(1) = "Cancelled" Then
                            employeeFormCancelled = True
                            GoTo Skip
                        ElseIf DictValues(1) = "Skipped" Then
                            GoTo Skip
                        End If
                        
                        If DictValues(5) = "" Then
                            If testCell.Address <> targetRow.Cells(targetRow.Cells.Count).Address Then
                                GoTo NextLoop
                            Else
                                GoTo CopyItem
                            End If
                        Else
                            For j = 1 To UBound(FieldValues) + 1
                                sValues(k, j) = Trim(DictValues(j - 1))
                            Next j
                            GoTo nextRow
                        End If
                    ElseIf testCell.Column = 8 Then
                        searchPosition = 0
                        
                        formOrGrid = "Grid"
                        
                        If (IsArray(testArray)) Then
                            DictValues = GetValues(Trim(testArray(1, i)), FieldValues, searchPosition, Range(Target.Address).EntireRow.Rows(k), formOrGrid)
                        Else
                            DictValues = GetValues(Trim(testArray), FieldValues, searchPosition, Range(Target.Address).EntireRow.Rows(k), formOrGrid)
                        End If
                        
                        If Len(Join(DictValues)) = 0 Then
                            tempvaluesarray(n) = testArray(1, i + 1)
                            GoTo nextRow
                        End If
                        
                        If DictValues(1) = "Cancelled" Then
                            employeeFormCancelled = True
                            GoTo Skip
                        ElseIf DictValues(1) = "Skipped" Then
                            GoTo Skip
                        End If
                        
                        If DictValues(5) = "" Then
                            If testCell.Address <> targetRow.Cells(targetRow.Cells.Count).Address Then
                                GoTo NextLoop
                            Else
                                GoTo CopyItem
                            End If
                        Else
                            For j = 1 To UBound(FieldValues) + 1
                                sValues(k, j) = Trim(DictValues(j - 1))
                            Next j
                            GoTo nextRow
                        End If
                    ElseIf testCell.Column = 9 Then
                    
                        searchPosition = 1
                        
                        formOrGrid = "Grid"
                        
                        If (IsArray(testArray)) Then
                            DictValues = GetValues(Trim(testArray(1, i)), FieldValues, searchPosition, Range(Target.Address).EntireRow.Rows(k), formOrGrid)
                        Else
                            DictValues = GetValues(Trim(testArray), FieldValues, searchPosition, Range(Target.Address).EntireRow.Rows(k), formOrGrid)
                        End If
                        
                        If Len(Join(DictValues)) = 0 Then
                            GoTo CopyItem
                        End If

                        If DictValues(1) = "Cancelled" Then
                            employeeFormCancelled = True
                            GoTo Skip
                        ElseIf DictValues(1) = "Skipped" Then
                            GoTo Skip
                        End If
                        
                        If DictValues(5) = "" Then
CopyItem:
                             If frmEmployeeNotFound.cancelled Or frmEmployeeNotFound.continueAll Or frmPasteBlank.cancelled Or frmPasteBlank.continueAll Then GoTo formSkip
                            
'                            rowDataCount = Application.Evaluate("=SUM(LEN(E" & targetRow.row & ":I" & targetRow.row & "))")
'                            If rowDataCount = 0 Then
'                                GoTo formSkip
'                            End If
                            
                            formOrGrid = "Grid"
                            
                            frmEmployeeNotFound.FormatSearchFields (searchPosition + 1)
                            frmEmployeeNotFound.PopulateSearchFields Range(Target.Address).EntireRow.Rows(k)
                            frmEmployeeNotFound.isLastRow k, Target.Rows.Count
                            frmPasteBlank.PopulateSearchFields Range(Target.Address).EntireRow.Rows(k)
                            frmPasteBlank.isLastRow k, Target.Rows.Count
                            
                            Dim blankValueCheck As String
                            Select Case searchPosition
                                Case 0
                                    blankValueCheck = Range(Target.Address).EntireRow.Cells(k, 8)
                                Case 1
                                    blankValueCheck = Range(Target.Address).EntireRow.Cells(k, 9)
                                Case 3
                                    blankValueCheck = Range(Target.Address).EntireRow.Cells(k, 7)
                            End Select
                            
                            Dim promptedForm As String
                            
                            If blankValueCheck <> "" Then
                                frmPasteBlank.skipped = False
                                frmPasteBlank.cancelled = False
                                frmPasteBlank.continueAll = False
                                frmEmployeeNotFound.Show
                            Else
                                frmEmployeeNotFound.skipped = False
                                frmEmployeeNotFound.cancelled = False
                                frmEmployeeNotFound.continueAll = False
                                frmPasteBlank.Show
                            End If
formSkip:
                            Dim currentcolumn As Integer
                            Dim l As Integer
                            Dim element As Variant
                            Dim p As Integer
                            p = 0
                           
                            
                            If frmEmployeeNotFound.skipped Or frmEmployeeNotFound.cancelled Or frmPasteBlank.skipped Or frmPasteBlank.cancelled Then

                                
Skip:
                                Dim currentRowNumber As Integer
                                currentRowNumber = targetRow.row
                                
NextSkip:
                                ThisWorkbook.currentProcedure = "LoadValuesStatusChange"
                                
                                Dim oldValueKey As Variant
                                Dim oldColumn As Integer
                                Dim oldRow As Integer
                                Dim cellValueFound As Boolean
                                cellValueFound = False

                                ReDim Preserve cancelledRows(cancelledRowsCount)
                                cancelledRows(cancelledRowsCount) = currentRowNumber
                                cancelledRowsCount = cancelledRowsCount + 1

                                Dim originalValues()
'                                On Error Resume Next

                                
                                ReDim originalValues(1 To ApplicationSettings.activeSheetValues.valuesRange.Columns.Count)

                                Dim originalColumnCounter As Integer
                                originalColumnCounter = 1

                                For Each oldValueKey In ApplicationSettings.activeSheetValues.originalValues.Keys()
                                    oldRow = Range(oldValueKey).row

                                    If oldRow = currentRowNumber Then
                                        oldColumn = Range(oldValueKey).Column
                                        
                                        If oldColumn >= Target.Column And oldColumn <= lastColumn Then
                                            cellValueFound = True
                                            originalValues(originalColumnCounter) = ApplicationSettings.activeSheetValues.originalValues(oldValueKey)
    
                                            originalColumnCounter = originalColumnCounter + 1
                                        End If
                                    End If
                                Next oldValueKey

                                allCancelledRows.Add originalValues

                                Dim emptyCounter As Integer
                                For emptyCounter = 1 To UBound(sValues, 2)
                                    sValues(k, emptyCounter) = ""
                                Next emptyCounter
                                
                                If (employeeFormCancelled = True) Then
                                    Application.EnableEvents = False
                                    ThisWorkbook.Worksheets(sheetName).Range(general.NumToExcelLetter(Target.Column) & cancelledRows(cancelledRowNumber) & ":" & general.NumToExcelLetter(lastColumn) & cancelledRows(cancelledRowNumber)) _
                                            = allCancelledRows(cancelledRowNumber + 1)
                                     Application.EnableEvents = True
                                     
                                    If (currentRowNumber < endRow) Then
                                        cancelledRowNumber = cancelledRowNumber + 1
                                        currentRowNumber = currentRowNumber + 1
                                        k = k + 1
                                        GoTo NextSkip
                                    End If
                                End If
                                                               
                                Exit For
                            End If
                            
                            If Not frmEmployeeNotFound.skipped And Not frmEmployeeNotFound.continue And Not frmPasteBlank.skipped And Not frmPasteBlank.continue Then
                                DictValues = frmEmployeeNotFound.GetEmployeeDetails()
                            End If
                            
                            ReDim Preserve DictValues(UBound(FieldValues) + 1)
                            ReDim Preserve tempvaluesarray(UBound(FieldValues) + 1)
                        Else
                            For j = 1 To UBound(FieldValues) + 1
                                sValues(k, j) = Trim(DictValues(j - 1))
                            Next j
                            GoTo nextRow
                        End If
                    End If
                            
                    If frmEmployeeNotFound.continue Then
                        For j = 1 To UBound(FieldValues) + 1
                            sValues(k, j) = Trim(tempvaluesarray(j - 1))
                        Next j
                    Else
                        For j = 1 To UBound(FieldValues) + 1
                            sValues(k, j) = Trim(DictValues(j - 1))
                        Next j
                    End If
                    
                    Exit For
                Else
                    If (testCell.Column >= 10) Then Exit For
                    
                    sValues(k, n) = tempvaluesarray(i)
                End If
NextLoop:
                i = i + 1
            Next testCell
                      
nextRow:
            
            If employeeFormCancelled = True Then
                Exit For
            End If
            
            ThisWorkbook.currentProcedure = "LoadValuesStatusChange"
            
            
            If cancelledRowsCount > 0 Then
                    Dim Test() As String
                    Application.EnableEvents = False
                    ThisWorkbook.Worksheets(sheetName).Range(general.NumToExcelLetter(Target.Column) & cancelledRows(0) & ":" & general.NumToExcelLetter(lastColumn) & cancelledRows(0)) _
                        = allCancelledRows(cancelledRowNumber + 1)
                    Application.EnableEvents = True
                    cancelledRowNumber = cancelledRowNumber + 1
                    cancelledRowsCount = 0
                ThisWorkbook.currentProcedure = "CancelOperation"
            Else
                If sheetName = "Employee Info Changes" Then
                    ThisWorkbook.Worksheets(sheetName).Range("E" & targetRow.row & ":K" & targetRow.row) = Application.WorksheetFunction.Index(sValues, k, 0)
                ElseIf sheetName = "Transfers" Then
                    
                    Dim uniqueKeyFound As Integer
                    uniqueKeyFound = Application.WorksheetFunction.CountIf(Columns("J:J"), Application.WorksheetFunction.Index(sValues, k, 6))
                    
                    If uniqueKeyFound > 0 Then
                        frmDuplicateTransfer.PopulateSearchFields Range(Target.Address).EntireRow.Rows(k)
                        frmDuplicateTransfer.Show

                        Application.EnableEvents = False
'
                        RowUpdates.CancelRowUpdate targetRow, sheetName
                        
'                        For columnNum = 5 To 10
'                            If ThisWorkbook.Worksheets(sheetName).Cells(targetRow.row, columnNum) <> sValues(k, columnNum - 4) Then
'                                ThisWorkbook.Worksheets(sheetName).Range("E" & targetRow.row & ":XFD" & targetRow.row).ClearContents
''                                sameRow = True
'                                Exit For
'                            End If
'                        Next columnNum
                        
'                        If ThisWorkbook.Worksheets(sheetName).Range("E" & targetRow.row & ":J" & targetRow.row) <> sValues(k, 1) & sValues(k, 2) Then
'                            Range("E" & targetRow.row & ":XFD" & targetRow.row).ClearContents
'                        End If
                        
                        Application.EnableEvents = True
                    Else
                        ThisWorkbook.Worksheets(sheetName).Range("E" & targetRow.row & ":J" & targetRow.row) = Application.WorksheetFunction.Index(sValues, k, 0)
                    End If
                ElseIf InStr(1, sheetName, "SETUP") = False And sheetName <> "CL0-COVER SHEET" And sheetName <> "USER GUIDE" And sheetName <> "Current Pay Hours TS" Then
                    If sheetName = "Current Pay Hours" And (Target.Column = 7 Or Target.Column = 8 Or Target.Column = 9) _
                        And (lastColumn = 7 Or lastColumn = 8 Or lastColumn = 9) Then
                        
                        Dim currentSheetRow As Long
                        Dim oldValues() As String

                        If Target.Rows.Count > 1 Then
                            
                            lastPastedRow = CLng((Target.row + Target.Rows.Count) - 1)

                            For currentSheetRow = targetRow.row To lastPastedRow
                                ThisWorkbook.currentProcedure = "LoadValuesStatusChange"
                                Application.EnableEvents = False
                                
                                If currentSheetRow = targetRow.row Then
                                    ThisWorkbook.Worksheets(sheetName).Range("E" & currentSheetRow & ":J" & currentSheetRow) = Application.WorksheetFunction.Index(sValues, k, 0)
                                Else
                                    If matchFound(sht, targetRow, sht.Rows(currentSheetRow)) Then
                                        
                                        ThisWorkbook.Worksheets(sheetName).Range("E" & currentSheetRow & ":J" & currentSheetRow) = Application.WorksheetFunction.Index(sValues, k, 0)
                                        
                                    End If
                                End If
                                
                                Application.EnableEvents = True
                            Next currentSheetRow
                        Else
                            Application.EnableEvents = False
                            ThisWorkbook.Worksheets(sheetName).Range("E" & targetRow.row & ":J" & targetRow.row) = Application.WorksheetFunction.Index(sValues, k, 0)
                            Application.EnableEvents = True
                        End If

                    Else
                        Application.EnableEvents = False
                        ThisWorkbook.Worksheets(sheetName).Range("E" & targetRow.row & ":J" & targetRow.row) = Application.WorksheetFunction.Index(sValues, k, 0)
                        Application.EnableEvents = True
                    End If
                ElseIf sheetName = "Current Pay Hours TS" Then
'                    ThisWorkbook.currentProcedure = "Bypass"
                    Application.EnableEvents = False
                    ThisWorkbook.Worksheets(sheetName).Range("E" & targetRow.row & ":J" & targetRow.row) = Application.WorksheetFunction.Index(sValues, k, 0)
                    Application.EnableEvents = True
                End If
                
            End If
            
            k = k + 1
            If ThisWorkbook.currentProcedure = "CancelOperation" Then ThisWorkbook.currentProcedure = ""
'            Application.EnableEvents = True
        Next targetRow
        
        Exit Function
    End If
    
ErrorHandler:
    Debug.Print err.Description
    ThisWorkbook.currentProcedure = ""
    Exit Function
End Function
'This function loads data into the data sheets: Master Setup, Earning Setup, Employee Options Data Setup
'SheetName - The sheet name in which data will be loaded
'FileName - CSV file name to pull data from
'ImpName - Used as a flag for the code
Public Function GetCsv(sheetName As String, FileName As String, ImpName As String)
    Dim ws As Worksheet
    Dim strFile As String
    Dim MyData As String
    Dim strData() As String
    Dim TempAr() As String
    Dim i As Long
    Dim ArCol() As Long
    
    Set ws = ActiveWorkbook.Sheets(sheetName)
    
    strFile = FileName
    If FileName = "" Then
        strFile = Application.GetOpenFilename("Text Files (*.csv),*.csv", , "Please select CSV File")
        FileName = strFile
        If strFile = "False" Then
            Exit Function
        End If
'        If ImpName = "Earnings" Then
'            frmAdminTool.txtEarningsData = strFile
'        ElseIf ImpName = "EmpOptions" Then
'            frmAdminTool.txtEmpOptionsData = strFile
'        End If
    
    End If
    
    'Open the text file in one go
    Open FileName For Binary As #1
    MyData = Space$(LOF(1))
    Get #1, , MyData
    Close #1
    strData() = Split(MyData, vbCrLf)

    'Check for any empty headers and replace ",," by ","
    Do While InStr(1, strData(0), ",,") > 0
        strData(0) = Replace(strData(0), ",,", ",")
    Loop

    'Split the headers to find the number of columns
    TempAr() = Split(strData(0), ",")

    'Create the Array for TEXT
    ReDim ArCol(1 To UBound(TempAr))
    For i = 1 To UBound(TempAr)
        ArCol(i) = 2
    Next i
    Application.EnableEvents = False
    ws.Range("A1").CurrentRegion.Clear
    ws.Cells.NumberFormat = "@"
    
    
    With ws.QueryTables.Add(Connection:="TEXT;" & strFile, Destination:=ws.Range("A1"))
'         .TextFilePlatform = 65001 'UTF-8
         .TextFileParseType = xlDelimited
         .TextFileCommaDelimiter = True
         .TextFileOtherDelimiter = ","
         .TextFileColumnDataTypes = ArCol
         .Refresh
    End With
    If sheetName = "MASTER setup" Then
        Call ManipulateMasterEmployeeData
    End If
    
    Call InitializeDict
    Application.EnableEvents = True
    If ImpName = "Earnings" Then
        MsgBox "Data has been successfully imported in the Earnings/Deductions Master data tab", vbInformation, " Autoform Earnings/Deductions"
'    ElseIf ImpName = "EmpOptions" Then
'        MsgBox "Data has been successfully imported in the Employee Options Master data tab", vbInformation, "Autoform Options"
    End If

End Function


'This fucntion is used to add the employee options on the employee options setup tab
Public Sub CreateEmployeeOptions()
    Dim general As general
    Dim sht As Worksheet
    Dim Datasht As Worksheet
    Dim lastRow As Integer
    Dim EngOptions() As String
    
    Application.ScreenUpdating = False
    
    Set general = New general
    Set sht = ThisWorkbook.Worksheets("Employee Options Setup")
    Set Datasht = ThisWorkbook.Worksheets("EMPLOYEE OPTIONS DATA setup")
    lastRow = general.lastRow(sht)
    sht.Range("A9:" & general.NumToExcelLetter(general.lastColumn(sht)) & lastRow).Delete

    
    lastRow = general.lastRow(Datasht)
    
    If lastRow < 2 Then
        Datasht.Range("B2").value = "NO OPTIONS"
        lastRow = general.lastRow(Datasht)
    End If
    
    If lastRow > 1 Then
        ReDim EngOptions(lastRow)
        For i = 2 To lastRow
            EngOptions(i - 2) = Datasht.Range("B" & i)
        Next i
        sht.Range("A9:A" & lastRow + 7) = Application.Transpose(EngOptions)
    End If
End Sub
'This function is used to setup the Employee Options sheet
'It will not allow the user to enter a duplicate index or miss an index number
'Columns in the Employee Options are created based on the entry made in the CSV Index column
'All other columns are hidden
Public Sub SetupEmployeeOptions()
    Dim general As general
    Dim sht As Worksheet
    Dim Datasht As Worksheet
    Dim lastRow As Integer
    Dim lastColumn As Integer
    Dim i As Long
    Dim DictCSVIndex As Scripting.Dictionary
    Dim EngOptions() As String
    
    Set DictCSVIndex = New Scripting.Dictionary
    Set general = New general
    Set Datasht = ThisWorkbook.Worksheets("Employee Options Setup")
    Set sht = ThisWorkbook.Worksheets("Employee Options")
    lastRow = general.lastRow(Datasht)
    lastColumn = general.lastColumn(sht)
    
    
    For i = 2 To lastRow
        If Trim(Datasht.Range("G" & i)) <> "" Then
            If DictCSVIndex.Exists(Val(Trim(Datasht.Range("G" & i)))) Then
                MsgBox "Duplicate CSV Index found on row: " & Datasht.Range("G" & i).row, vbCritical, "Setup Employee Options"
                Exit Sub
            Else
                If Trim(Datasht.Range("G" & i)) <> "" Then
                    DictCSVIndex.Add Val(Trim(Datasht.Range("G" & i))), Trim(Datasht.Range("A" & i))
                End If
            End If
         End If
    Next i
    
    
    
    ReDim EngOptions(lastRow - 1)
    For i = 1 To DictCSVIndex.Count
        If DictCSVIndex.Exists(i) Then
            EngOptions(i - 1) = DictCSVIndex(i)
        Else
            MsgBox "Missing CSV Index: " & i, vbCritical, "Setup Employee Options"
            Exit Sub
        End If
    Next i
    ReDim Preserve EngOptions(i - 1)
    sht.Range("K:LL").EntireColumn.Hidden = False
    
    Application.EnableEvents = False
    sht.Range("D3:" & general.NumToExcelLetter(lastColumn) & "3").ClearContents
    sht.Range("D3").Resize(1, UBound(EngOptions)).value = EngOptions
    sht.Range("K:" & general.NumToExcelLetter(general.lastColumn(sht))).EntireColumn.AutoFit
'    sht.Columns("J").EntireColumn.Hidden = True
    sht.Range(general.NumToExcelLetter(UBound(EngOptions) + 4) & ":LL").EntireColumn.Hidden = True
'    MsgBox "Setup completed for Employee Options tab", vbInformation, "Setup Employee Options"
    Application.EnableEvents = True
    MsgBox "Data has been successfully imported in the Employee Options Master data tab", vbInformation, "Autoform Options"

End Sub

'This function is used for Manual Payment Update Sheet
'Target - current cell
'SheetName - sheet from which this function is called
'ENAmtColNum - Column number of Earning Amount Column
'DNAmtColNum - Column number of Deduction Amount Column
'HrsAmtColNum - Column number of Earning Amount Column
'RemitFlag - Column number of Remit Flag
'ENRemit - Column number of Earning with Remit (Hidden)
'DNRemit - Column number of Deduction with Remit (Hidden)
'HRSRemit - Column number of Hours with Remit (Hidden)
'ENNonRemit - Column number of Earning with Non Remit (Hidden)
'DNNonRemit - Column number of Deduction with Non Remit (Hidden)
'HRSNonRemit - Column number of Hours with Non Remit (Hidden)
'This functions populates the hidden fields for earning/deduction/hours with remit/non-remit

Public Sub RemitNonRemit(Target As Range, sheetName As String, ENAmtColNum, DNAmtColNum, HrsAmtColNum, RemitFlagColNum, ENRemitColNum, DNRemitColNum, HRSRemitColNum, ENNonRemitColNum, DNNonRemitColNum, HRSNonRemitColNum)
    Dim TargetCell As Range
    Dim ENRemit() As String
    Dim DNRemit() As String
    Dim HRSRemit() As String
    Dim ENNonRemit() As String
    Dim DNNonRemit() As String
    Dim HRSNonRemit() As String
    Dim sht As Worksheet
    Dim general As general
    
    On Error GoTo errHandler
    Set general = New general
    Set sht = ThisWorkbook.Worksheets(sheetName)
    
    For Each TargetCell In Target
        If TargetCell.row > 3 Then
            ' Action on Remit flag field
            If TargetCell.Column = RemitFlagColNum Then
                If TargetCell = "NONREMIT" Then
                    ' Clear fields for Remit and populate NonRemit if exists
                    Range(general.NumToExcelLetter(ENRemitColNum) & TargetCell.row) = Null
                    Range(general.NumToExcelLetter(DNRemitColNum) & TargetCell.row) = Null
                    Range(general.NumToExcelLetter(HRSRemitColNum) & TargetCell.row) = Null
                    Range(general.NumToExcelLetter(ENNonRemitColNum) & TargetCell.row) = Range(general.NumToExcelLetter(ENAmtColNum) & TargetCell.row)
                    Range(general.NumToExcelLetter(DNNonRemitColNum) & TargetCell.row) = Range(general.NumToExcelLetter(DNAmtColNum) & TargetCell.row)
                    Range(general.NumToExcelLetter(HRSNonRemitColNum) & TargetCell.row) = Range(general.NumToExcelLetter(HrsAmtColNum) & TargetCell.row)
                Else
                    ' Clear fields for NonRemit and populate Remit if exists
                    Range(general.NumToExcelLetter(ENNonRemitColNum) & TargetCell.row) = Null
                    Range(general.NumToExcelLetter(DNNonRemitColNum) & TargetCell.row) = Null
                    Range(general.NumToExcelLetter(HRSNonRemitColNum) & TargetCell.row) = Null
                    Range(general.NumToExcelLetter(ENRemitColNum) & TargetCell.row) = Range(general.NumToExcelLetter(ENAmtColNum) & TargetCell.row)
                    Range(general.NumToExcelLetter(DNRemitColNum) & TargetCell.row) = Range(general.NumToExcelLetter(DNAmtColNum) & TargetCell.row)
                    Range(general.NumToExcelLetter(HRSRemitColNum) & TargetCell.row) = Range(general.NumToExcelLetter(HrsAmtColNum) & TargetCell.row)
                End If
            End If
            
            ' Action on earning amount...check remit flag status
            If TargetCell.Column = ENAmtColNum Then
                If Range(general.NumToExcelLetter(RemitFlagColNum) & TargetCell.row) = "NONREMIT" Then
                    ' Clear fields for Remit and populate NonRemit if exists
                    Range(general.NumToExcelLetter(ENRemitColNum) & TargetCell.row) = Null
                    Range(general.NumToExcelLetter(ENNonRemitColNum) & TargetCell.row) = Range(general.NumToExcelLetter(ENAmtColNum) & TargetCell.row)
                Else
                    ' Clear fields for NonRemit and populate Remit if exists
                    Range(general.NumToExcelLetter(ENNonRemitColNum) & TargetCell.row) = Null
                    Range(general.NumToExcelLetter(ENRemitColNum) & TargetCell.row) = Range(general.NumToExcelLetter(ENAmtColNum) & TargetCell.row)
                End If
            End If
            
            ' Action on deduction amount...check remit flag status
            If TargetCell.Column = DNAmtColNum Then
                If Range(general.NumToExcelLetter(RemitFlagColNum) & TargetCell.row) = "NONREMIT" Then
                    ' Clear fields for Remit and populate NonRemit if exists
                    Range(general.NumToExcelLetter(DNRemitColNum) & TargetCell.row) = Null
                    Range(general.NumToExcelLetter(DNNonRemitColNum) & TargetCell.row) = Range(general.NumToExcelLetter(DNAmtColNum) & TargetCell.row)
                Else
                    ' Clear fields for NonRemit and populate Remit if exists
                    Range(general.NumToExcelLetter(DNNonRemitColNum) & TargetCell.row) = Null
                    Range(general.NumToExcelLetter(DNRemitColNum) & TargetCell.row) = Range(general.NumToExcelLetter(DNAmtColNum) & TargetCell.row)
                End If
            End If
            
            ' Action on hours amount...check remit flag status
            If TargetCell.Column = HrsAmtColNum Then
                If Range(general.NumToExcelLetter(RemitFlagColNum) & TargetCell.row) = "NONREMIT" Then
                    ' Clear fields for Remit and populate NonRemit if exists
                    Range(general.NumToExcelLetter(HRSRemitColNum) & TargetCell.row) = Null
                    Range(general.NumToExcelLetter(HRSNonRemitColNum) & TargetCell.row) = Range(general.NumToExcelLetter(HrsAmtColNum) & TargetCell.row)
                Else
                    ' Clear fields for NonRemit and populate Remit if exists
                    Range(general.NumToExcelLetter(HRSNonRemitColNum) & TargetCell.row) = Null
                    Range(general.NumToExcelLetter(HRSRemitColNum) & TargetCell.row) = Range(general.NumToExcelLetter(HrsAmtColNum) & TargetCell.row)
                End If
            End If
            
        End If
    Next TargetCell
    Exit Sub
errHandler:
    Exit Sub


End Sub
'This function is used for all sheets that uses the earning and deduction codes
'Target - current cell
'SheetName - sheet from which this function is called
'DDColNum - Column number for the Earning and Deduction Code column
'ColNum - Column number for the CSV value (this column is hidden)
'ENAmtColNum - Column number of Earning Amount Column
'HrsAmtColNum - Column number of Hours Amount Column
'DNAmtColNum - Column number of Deduction Amount Column
'This functions ensures that an earning amount is not entered for a Deduction code and vice versa
'It also splits and inserts the numeric value of the earning and deduction code in the last column
Public Sub LoadSetupEarnings(Target As Range, sheetName As String, DDColNum As Integer, ENDNColNum As Integer, ENAmtColNum, DNAmtColNum, HrsAmtColNum)
    Dim TargetCell As Range
    Dim endnCode() As String
    Dim sht As Worksheet
    Dim general As general
    
    On Error GoTo errHandler
    Set general = New general
    Set sht = ThisWorkbook.Worksheets(sheetName)
    
    For Each TargetCell In Target
        If TargetCell.row > 3 Then
'            If TargetCell.Column = DDColNum Then
'                If TargetCell <> "" Then
'                    endnCode = Split(Trim(TargetCell.value), "-")
'                    Range(general.NumToExcelLetter(ENDNColNum) & TargetCell.Row) = endnCode(0)
'                End If
'            End If
            If Range(general.NumToExcelLetter(DDColNum) & TargetCell.row) <> "" Then
                If Range(general.NumToExcelLetter(ENAmtColNum) & TargetCell.row) <> "" Then
                    endnCode = Split(Trim(Range(general.NumToExcelLetter(DDColNum) & TargetCell.row)), "-")
                    If endnCode(1) = "DN" Then
                            MsgBox "Amount for earnings cannot be entered since a deduction code has been selected", vbInformation, "Autoform"
                            Range(general.NumToExcelLetter(ENAmtColNum) & TargetCell.row).value = Null
                          
                    End If
                End If
                
                If Range(general.NumToExcelLetter(DNAmtColNum) & TargetCell.row) <> "" Then
                    endnCode = Split(Trim(Range(general.NumToExcelLetter(DDColNum) & TargetCell.row)), "-")
                    If endnCode(1) = "EN" Then
                        MsgBox "Amount for deductions cannot be entered since an earning code has been selected", vbInformation, "Autoform"
                        Range(general.NumToExcelLetter(DNAmtColNum) & TargetCell.row).value = Null
                    End If
                End If
                
                
                
                If Range(general.NumToExcelLetter(HrsAmtColNum) & TargetCell.row) <> "" Then
                    endnCode = Split(Trim(Range(general.NumToExcelLetter(DDColNum) & TargetCell.row)), "-")
                    If endnCode(1) = "DN" Then
                        MsgBox "Amount for Hours cannot be entered since a deduction code has been selected", vbInformation, "Autoform"
                        Range(general.NumToExcelLetter(HrsAmtColNum) & TargetCell.row).value = Null
                    End If
                End If
                
                If Range(general.NumToExcelLetter(HrsAmtColNum) & TargetCell.row) <> "" Then
                    If Range(general.NumToExcelLetter(ENAmtColNum) & TargetCell.row) <> "" Then
                        MsgBox "Earning amount and Hours amount cannot be entered on the same line", vbInformation, "Autoform"
                        Target.value = Null
                    End If
                        
                End If
                
            Else
          
                If TargetCell.Column = ENAmtColNum Then
                    If Range(general.NumToExcelLetter(ENAmtColNum) & TargetCell.row) <> "" Then
                        If Range(general.NumToExcelLetter(DNAmtColNum) & TargetCell.row) <> "" Then
                            MsgBox "Amount for earnings cannot be entered since a deduction amount has already been entered", vbInformation, "Autoform"
                            Range(general.NumToExcelLetter(ENAmtColNum) & TargetCell.row).value = Null
                        ElseIf Range(general.NumToExcelLetter(HrsAmtColNum) & TargetCell.row) <> "" Then
                            MsgBox "Amount for earnings cannot be entered since hours have already been entered", vbInformation, "Autoform"
                            Range(general.NumToExcelLetter(ENAmtColNum) & TargetCell.row).value = Null
                        End If
                    End If
                End If
            
                If TargetCell.Column = DNAmtColNum Then
                    If Range(general.NumToExcelLetter(DNAmtColNum) & TargetCell.row) <> "" Then
                        If Range(general.NumToExcelLetter(ENAmtColNum) & TargetCell.row) <> "" Then
                            MsgBox "Amount for deductions cannot be entered since an earning amount has already been entered", vbInformation, "Autoform"
                            Range(general.NumToExcelLetter(DNAmtColNum) & TargetCell.row).value = Null
                        ElseIf Range(general.NumToExcelLetter(HrsAmtColNum) & TargetCell.row) <> "" Then
                            MsgBox "Amount for deductions cannot be entered since hours have already been entered", vbInformation, "Autoform"
                            Range(general.NumToExcelLetter(DNAmtColNum) & TargetCell.row).value = Null
                        End If
                    End If
                End If
                
                If TargetCell.Column = HrsAmtColNum Then
                    If Range(general.NumToExcelLetter(HrsAmtColNum) & TargetCell.row) <> "" Then
                        If Range(general.NumToExcelLetter(ENAmtColNum) & TargetCell.row) <> "" Then
                            MsgBox "Hours cannot be entered since an earning amount has already been entered", vbInformation, "Autoform"
                            Range(general.NumToExcelLetter(HrsAmtColNum) & TargetCell.row).value = Null
                        ElseIf Range(general.NumToExcelLetter(DNAmtColNum) & TargetCell.row) <> "" Then
                            MsgBox "Hours cannot be entered since a deduction amount has already been entered", vbInformation, "Autoform"
                            Range(general.NumToExcelLetter(HrsAmtColNum) & TargetCell.row).value = Null
                        End If
                    End If
                End If
            End If
        End If
    Next TargetCell
    Exit Sub
errHandler:
    Exit Sub


End Sub
'This function is used to inject the Company Code into all sheets that have data in them
Public Sub InjectCOcode()
    Dim sht As Worksheet
    Dim sheetName As String
    Dim lastRow As Integer
    Dim general As general
    Dim CoCode As String
    
    CoCode = ThisWorkbook.Worksheets("CL0-Cover Sheet").Range("F16")
    Set general = New general
    For Each sht In ThisWorkbook.Worksheets
        sheetName = UCase(Trim(sht.Name))
        If InStr(1, sheetName, "SETUP") = False And sheetName <> "CL0-COVER SHEET" And sheetName <> "USER GUIDE" Then
            lastRow = general.lastRow(sht)
            If lastRow > 3 Then
                sht.Range("A4:A" & lastRow).value = CoCode
            End If
        End If
    Next sht
End Sub
'This function is used to Hide all admin sheets (all sheets that have the word Setup
'HideUnhide is the argument that tells the code to Hide or Unhide the sheets
'It also hides/undhide the following: Tabs, Row and Column headings
Public Sub HideUnhideAdmin(HideUnhide As String)
    Dim sht As Worksheet
    Dim sheetName As String
    If ActiveWorkbook.ProtectStructure Or ActiveWorkbook.ProtectWindows Then
        MsgBox "Please unprotect the workbook in order to hide the setup tabs", vbCritical, "Autoform"
        Exit Sub
    End If
    For Each sht In ThisWorkbook.Worksheets
        
        If sht.ProtectContents Then
            MsgBox sht.Name & " is protected and cannot be Hidden/Unhidden", vbCritical, "Autoform"
            GoTo NextSheet
        End If
        sheetName = UCase(Trim(sht.Name))
        If InStr(1, sheetName, "SETUP") Then
            If HideUnhide = "HIDE" Then
                sht.Visible = xlSheetVeryHidden
                ActiveWindow.DisplayWorkbookTabs = False
            ElseIf HideUnhide = "UNHIDE" Then
                sht.Visible = xlSheetVisible
                ActiveWindow.DisplayWorkbookTabs = True
            End If
        Else
            If HideUnhide = "HIDE" Then
                sht.Activate
                ActiveWindow.DisplayHeadings = False
            ElseIf HideUnhide = "UNHIDE" Then
                sht.Activate
                ActiveWindow.DisplayHeadings = True
            End If
        End If
NextSheet:
    Next sht
    
    ThisWorkbook.Worksheets("CL0-Cover Sheet").Activate
    
End Sub


'This function checks the active sheet name and compares it to all the shape names
'Once a match is found, that shape is shaded with light blue, all the others are shaded with blue
Sub LoopThruShapes()
    Dim Sh As Shape
    Dim i As Integer
    i = 1
    
    For Each Sh In activeSheet.Shapes
        If Sh.Type = 1 Then
            If Sh.Name = "Employee Options Tool" Then
                'Do nothing
            ElseIf Sh.Name = "Horizontal Hours Tool" Then
                'Do nothing
            ElseIf Sh.Name = "Regular View" Then
                'Do nothing
                
            ElseIf Sh.Name = "Timesheet View" Then
                'Do nothing
                
            ElseIf Trim(activeSheet.Name) = Sh.Name Then
                'Light Blue
                Sh.Fill.ForeColor.RGB = RGB(62, 190, 222)
               
            Else
                'Blue
                On Error Resume Next
                Sh.Fill.ForeColor.RGB = RGB(26, 128, 153)
            End If
        End If
    Next
    
    If Trim(activeSheet.Name) = "Current Pay Hours TS" Then
        'Light Blue
        activeSheet.Shapes("Current Pay Hours").Fill.ForeColor.RGB = RGB(62, 190, 222)
    End If
    
    ThisWorkbook.Worksheets("CL0-Cover Sheet").Shapes("Enable Warning").Fill.ForeColor.RGB = RGB(242, 248, 2)
        
    
End Sub

'This function is used to setup the Master Setup Sheet
'Name column is imported as one single column, this function will split it into 3 columns
'It deletes all other columns that are not needed
'Adds the Unique Key column as well
Public Sub ManipulateMasterEmployeeData()
    Dim Sh As Worksheet
    Dim general As general
    Dim TypeValidation As TypeValidation
    Dim tempArray1() As String
    Dim tempArray2() As String
    Dim FullName() As Variant
    Dim strFullName
    Dim Lname()
    Dim Fname()
    Dim initial() As String
    Dim i As Integer
    Dim lastRow As Integer
    
    Set general = New general
    Set TypeValidation = New TypeValidation
    Set Sh = ThisWorkbook.Worksheets("MASTER setup")
    
    Sh.Activate
    Sh.Columns("B:C").Select
    lastRow = general.lastRow(Sh)
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Sh.Range("A1") = "Last Name"
    Sh.Range("B1") = "First Name"
    Sh.Range("C1") = "Initial"
    
    ReDim Lname(1 To lastRow)
    ReDim Fname(1 To lastRow)
    ReDim initial(1 To lastRow)
    
    If lastRow = 2 Then
        strFullName = Sh.Range("A2")
        tempArray1 = Split(strFullName, ",")
        
        i = 1
        Lname(i) = Trim(tempArray1(0))
        
        If Right(tempArray1(1), 1) = " " Then
            Fname(i) = Trim(tempArray1(1))
            initial(i) = ""
        Else
            tempArray2() = Split(Trim(tempArray1(1)), " ")
            If UBound(tempArray2) = 0 Then
                Fname(i) = tempArray2(0)
                initial(i) = ""
            ElseIf UBound(tempArray2) = 1 Then
                Fname(i) = Trim(tempArray2(0))
                initial(i) = Trim(tempArray2(1))
            ElseIf UBound(tempArray2) = 2 Then
                Fname(i) = tempArray2(0) & " " & tempArray2(1)
                initial(i) = Trim(tempArray2(2))
            ElseIf UBound(tempArray2) = 3 Then
                Fname(i) = tempArray2(0) & " " & tempArray2(1) & " " & tempArray2(2)
                initial(i) = Trim(tempArray2(3))
            ElseIf UBound(tempArray2) = 4 Then
                Fname(i) = tempArray2(0) & " " & tempArray2(1) & " " & tempArray2(2) & " " & tempArray2(3)
                initial(i) = Trim(tempArray2(4))
            Else
                Fname(i) = tempArray2(0) & " " & tempArray2(1) & " " & tempArray2(2) & " " & tempArray2(3) & " " & tempArray2(4)
                initial(i) = Trim(tempArray2(5))
            End If
        End If
    Else
        FullName() = Sh.Range("A2:A" & lastRow)
        For i = 1 To UBound(FullName)
            tempArray1 = Split(FullName(i, 1), ",")
            Lname(i) = Trim(tempArray1(0))
        
            If Right(tempArray1(1), 1) = " " Then
                Fname(i) = Trim(tempArray1(1))
                initial(i) = ""
            Else
                tempArray2() = Split(Trim(tempArray1(1)), " ")
                If UBound(tempArray2) = 0 Then
                    Fname(i) = tempArray2(0)
                    initial(i) = ""
                ElseIf UBound(tempArray2) = 1 Then
                    Fname(i) = Trim(tempArray2(0))
                    initial(i) = Trim(tempArray2(1))
                ElseIf UBound(tempArray2) = 2 Then
                    Fname(i) = tempArray2(0) & " " & tempArray2(1)
                    initial(i) = Trim(tempArray2(2))
                ElseIf UBound(tempArray2) = 3 Then
                    Fname(i) = tempArray2(0) & " " & tempArray2(1) & " " & tempArray2(2)
                    initial(i) = Trim(tempArray2(3))
                ElseIf UBound(tempArray2) = 4 Then
                    Fname(i) = tempArray2(0) & " " & tempArray2(1) & " " & tempArray2(2) & " " & tempArray2(3)
                    initial(i) = Trim(tempArray2(4))
                Else
                    Fname(i) = tempArray2(0) & " " & tempArray2(1) & " " & tempArray2(2) & " " & tempArray2(3) & " " & tempArray2(4)
                    initial(i) = Trim(tempArray2(5))
                End If
            End If
        Next i
    End If
    
    Sh.Range("A2:A" & lastRow) = Application.Transpose(Lname)
    Sh.Range("B2:B" & lastRow) = Application.Transpose(Fname)
    Sh.Range("C2:C" & lastRow) = Application.Transpose(initial)
    
    Sh.Range("E:F").Delete
    Sh.Range("G:R").Delete
    Sh.Range("H:BL").Delete
    Sh.Columns("G:G").Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
     
    Sh.Range("G:G").NumberFormat = "@"
    Sh.Range("G1") = "Unique Key"
    
    lastRow = general.lastRow(Sh)
    For i = 2 To lastRow
        'Update Branch
        tempArray1 = Split(Sh.Range("E" & i), " -")
        Sh.Range("E" & i) = Trim(tempArray1(0))
        'Update Department
        tempArray1 = Split(Sh.Range("F" & i), " -")
        Sh.Range("F" & i) = Trim(tempArray1(0))
        'Add Unique Key: Emp ID, Branch and Dept
        Sh.Range("G" & i) = Trim(Sh.Range("D" & i)) & "|" & Trim(Sh.Range("E" & i)) & "|" & Trim(Sh.Range("F" & i))
    Next i


    ThisWorkbook.Worksheets("CL0-Cover Sheet").Activate
    MsgBox "Data has been successfully imported into the Employee Maintenance", vbInformation, "Employee Maintenance"
End Sub

'Validates the Unique key based on user entry
'Checks the Unique key when the user enters any of the following fields: Dept, Branch and Employee Id
'The user is notified if a matching Unique key is found in the Master Setup Sheet
Public Sub ValidateNewHire(Target As Range)
    Dim TypeValidation As TypeValidation
    Dim Sh As Worksheet
    
StartAgain:
    
    Set Sh = ThisWorkbook.Worksheets("New Hires")
    Set TypeValidation = New TypeValidation
    
    
    If Target.Column = 5 Or Target.Column = 6 Or Target.Column = 7 Then
        For Each TargetCell In Target.Cells
            If TargetCell.Column = 7 And TargetCell = "" Then
                Sh.Range("J" & TargetCell.row) = Null
                GoTo NextTargetCell
            End If
            If TargetCell.Column = 7 And TargetCell <> "" Then
                If TypeValidation.RegexValidation("^[a-zA-Z0-9]{0,9}$", TargetCell.value, TargetCell.Address) = 0 Then
                    MsgBox "Please enter a valid Employee Id, cannot exceed 9 characters and can only be alphanumeric", vbCritical, "COS Workbook"
                    Sh.Range("J" & TargetCell.row) = Null
                    GoTo NextTargetCell
                End If
                
                Sh.Range("J" & TargetCell.row) = Trim(Sh.Range("G" & TargetCell.row)) & "|" & Trim(Sh.Range("E" & TargetCell.row)) & "|" & Trim(Sh.Range("F" & TargetCell.row))
                On Error GoTo InitiateDict
                If sDict.Exists(Trim(Sh.Range("J" & TargetCell.row))) Then
                    MsgBox "Please enter a different Branch, Department or Employee Id", vbCritical, "Employee Identifier Exists"
                     Exit Sub
'                    GoTo NextTargetCell
                End If
            End If
            If (TargetCell.Column = 5 Or TargetCell.Column = 6) And Sh.Range("G" & TargetCell.row) <> "" Then
                Sh.Range("J" & TargetCell.row) = Trim(Sh.Range("G" & TargetCell.row)) & "|" & Trim(Sh.Range("E" & TargetCell.row)) & "|" & Trim(Sh.Range("F" & TargetCell.row))
                If sDict.Exists(Trim(Sh.Range("J" & TargetCell.row))) Then
                    MsgBox "Please enter a different Branch, Department or Employee Id", vbCritical, "Employee Identifier Exists"
                    Sh.Range("E" & TargetCell.row & ":" & "G" & TargetCell.row).ClearContents
                    Exit Sub
'                    GoTo NextTargetCell
                End If
            End If
NextTargetCell:
        Next TargetCell
    End If
    
    Exit Sub
InitiateDict:
    Call InitializeDict
    GoTo StartAgain
End Sub
'****USE THIS CODE TO MANIPULATE OR FORMAT MULTIPLE SHEETS***************************************************************************
'Sub sheetsheight()
'    Dim sh As Worksheet
'    Dim SheetName As String
'
'
'    For Each sh In ThisWorkbook.Worksheets
'        SheetName = UCase(Trim(sh.Name))
'        If InStr(1, SheetName, "SETUP") Or SheetName = UCase(Trim("CL0-Cover Sheet")) Or SheetName = UCase(Trim("User Guide")) Then
'
'        Else
'            sh.Range("F3").EntireColumn.ColumnWidth = 20
'        End If
'    Next
'End Sub

'This function is used the load the listbox in frmMaster
'Number of culumns in the list is set to 7, the last column is being hidden
'EmpNum - the search string to look from in Master Setup Sheet
'SearchPos - column index of EmpNum
'List gets populated with records that have a matching record from Master Setup with EmpNum
Public Sub LoadMasterForm(EmpNum As String, searchPos As Integer, Target As Range, formOrGrid As String)
    Dim lbtarget As MSForms.ListBox
    Dim lastRow As Integer
    Dim general As general
    Dim sht As Worksheet
    Dim Counter As Integer
    Set general = New general
    Set sht = Worksheets("MASTER Setup")
    lastRow = general.lastRow(sht)
    
    frmMaster.FormatSearchFields (searchPos)
    
    If formOrGrid = "Form" Then
        frmMaster.PopulateSearchFields_QF Target
    ElseIf formOrGrid = "Grid" Then
        frmMaster.PopulateSearchFields Target
    End If
    
    'Fill the listbox
    Set lbtarget = frmMaster.lstData
    With lbtarget
        'Determine number of columns
        .ColumnCount = 8
        'Set column widths
        .ColumnWidths = "70;60;45;72;43;66;0;50"
    End With
            
    Counter = 0
    lbtarget.Clear
    'Set reference to the range of data to be filled
    For i = 2 To lastRow
        If InStr(UCase(Trim(sht.Range(general.NumToExcelLetter(searchPos) & i))), UCase(EmpNum)) Then
            lbtarget.AddItem
            For j = 1 To 8
                lbtarget.List(Counter, j - 1) = sht.Range(general.NumToExcelLetter(j) & i).value
            Next j
            Counter = Counter + 1
        End If
    Next i
    
    frmMaster.Show
End Sub
'This is a standalone function used to adjust the positioning of the shapes on the active sheet
'i is used as a constant
'35 is the height of each shape
Sub ChangeShapes()
    Dim Sh As Shape
    Dim currSht As Worksheet
    Dim i As Integer
    i = 80
    
    For Each currSht In ThisWorkbook.Worksheets
        For Each Sh In currSht.Shapes
            If Sh.Type = 1 And Sh.Name <> "Supplementary Instructions" And Sh.Name <> "Employee Maintenance" And Sh.Name <> "Enable Warning" And Sh.Name <> "Quick Form" And Sh.Name <> "Employee Options Tool" And Sh.Name <> "TimeSheet_View" Then
                'Debug.Print sh.Name
                If Sh.Name = "CL0-Cover Sheet" Then
                    Sh.Top = i
                ElseIf Sh.Name = "User Guide" Then
                    Sh.Top = i + 35
                ElseIf Sh.Name = "New Hires" Then
                    Sh.Top = i + (35 * 2)
                ElseIf Sh.Name = "Status Changes" Then
                    Sh.Top = i + (35 * 3)
                ElseIf Sh.Name = "Salary Changes" Then
                    Sh.Top = i + (35 * 4)
                ElseIf Sh.Name = "Employee Info Changes" Then
                    Sh.Top = i + (35 * 5)
                ElseIf Sh.Name = "Transfers" Then
                    Sh.Top = i + (35 * 6)
                ElseIf Sh.Name = "Current Pay Hours" Then
                    Sh.Top = i + (35 * 7)
                ElseIf Sh.Name = "Current Pay Adjust" Then
                    Sh.Top = i + (35 * 8)
                ElseIf Sh.Name = "Bonus Taxation" Then
                    Sh.Top = i + (35 * 9)
                ElseIf Sh.Name = "Separate Pay" Then
                    Sh.Top = i + (35 * 10)
                ElseIf Sh.Name = "Lump Sum" Then
                    Sh.Top = i + (35 * 11)
                ElseIf Sh.Name = "Manual Payment Update" Then
                    Sh.Top = i + (35 * 12)
                ElseIf Sh.Name = "Employee Options" Then
                    Sh.Top = i + (35 * 13)
                ElseIf Sh.Name = "Reset" Then
                    Sh.Top = i + (35 * 14)
                ElseIf Sh.Name = "Reset All" Then
                    Sh.Top = i + (35 * 14)
                ElseIf Sh.Name = "ADP" Then
                    Sh.Top = i + (35 * 15)
                End If
            End If
        Next Sh
    Next currSht
End Sub

Sub ChangeShapes2()
    Dim currSht As Worksheet
    Dim i As Integer
    Dim BtnNames
    x = 80
    n = 2
    
    BtnNames = Array("CL0-Cover Sheet", "User Guide", "New Hires", "Status Changes", "Salary Changes", "Employee Info Changes", "Transfers", "Current Pay Hours", "Current Pay Adjust", "Bonus Taxation", "Separate Pay", "Lump Sum", "Manual Payment Update", "Employee Options", "Reset", "Reset All", "ADP")
    
    For Each currSht In ThisWorkbook.Worksheets
        For i = 0 To UBound(BtnNames)
            If BtnNames(i) = "CL0-Cover Sheet" Then
                currSht.Shapes(BtnNames(i)).Top = x
            ElseIf BtnNames(i) = "User Guide" Then
                currSht.Shapes(BtnNames(i)).Top = x + 35
            Else
                On Error Resume Next
                If currSht.Shapes(BtnNames(i)).Visible = True Then
                    If err.Number <> 0 Then GoTo SkipBtn
                    currSht.Shapes(BtnNames(i)).Top = x + (35 * n)
                    n = n + 1
                End If
            End If
SkipBtn:
        Next i
        n = 2
    Next currSht

End Sub
'This is a stand alone function used to adjust the height and positioning of the shapes used in the sheets
Sub ChangeShapes1()
    Dim Sh As Shape
    Dim currSht As Worksheet
    
    For Each currSht In ThisWorkbook.Worksheets
        For Each Sh In currSht.Shapes
            If Sh.Name = "ADP Logo" Then
                Sh.Top = 10
                Sh.Left = 20
            End If
            
            If Sh.Type = 1 And Sh.Name <> "Supplementary Instructions" And Sh.Name <> "Employee Maintenance" And Sh.Name <> "Enable Warning" And Sh.Name <> "Quick Form" And Sh.Name <> "Employee Options Tool" And Sh.Name <> "TimeSheet_View" Then
    '            Sh.Left = 15
                Sh.Height = 35
    '            Sh.Shadow.Visible = msoFalse
            End If
        Next Sh
    Next currSht
    
End Sub
'This is a stand alone function that is  used to adjust column widths in this workbook
Sub adjustColumnSize()
    Dim sheetName As String
    For Each sht In ThisWorkbook.Worksheets
        sheetName = UCase(Trim(sht.Name))
        If InStr(1, sheetName, "SETUP") = False And sheetName <> "CL0-COVER SHEET" And sheetName <> "USER GUIDE" Then
            sht.Columns("D").ColumnWidth = 10
            sht.Columns("E").ColumnWidth = 10
            sht.Columns("F").ColumnWidth = 12
            sht.Columns("G").ColumnWidth = 14
            sht.Columns("H").ColumnWidth = 30
            sht.Columns("I").ColumnWidth = 30
            sht.Columns("J").ColumnWidth = 15
        End If
    Next sht
    

End Sub

Public Sub LoadMaintenance()
    frmMaintenance.Show
End Sub
'Sets the height, width and positioning of the frame textboxes and combo boxes on the frmUserEntry from based on what shee the user clicks on Quick Form
'Hides all controls that are not applicable
Public Sub LoadQuickForm()
    If activeSheet.Name = "New Hires" Then
        With frmUserEntry
            .lblMain.Caption = "Employee Information - New Hires"
            .FrameEmpInfo.Height = 222
            .FrameEmpInfo.Width = 495
            .FrameEmpInfo.Left = 12
            .FrameEmpInfo.Top = 55
            .FrameBankInfo.Height = 170
            .FrameBankInfo.Width = 495
            .FrameBankInfo.Left = 12
            .FrameBankInfo.Top = 300
            .FramePayInfo.Height = 222
            .FramePayInfo.Width = 500
            .FramePayInfo.Left = 515
            .FramePayInfo.Top = 55
            .FrameEmpInfo2.Visible = False
            .FrameBankInfo2.Visible = False
            .FramePayInfo2.Visible = False
            .FrameSalary.Visible = False
            .FrameStatus.Visible = False
            .FrameTransfers.Visible = False
            .txtBranch.Locked = False
            .txtDept.Locked = False
        End With
    ElseIf activeSheet.Name = "Status Changes" Then
        With frmUserEntry
            .lblMain.Caption = "Employee Information - Status Changes"
            .FrameStatus.Height = 186
            .FrameStatus.Width = 930
            .FrameStatus.Left = 12
            .FrameStatus.Top = 55
            .FrameEmpInfo.Visible = False
            .FrameEmpInfo2.Visible = False
            .FrameBankInfo.Visible = False
            .FrameBankInfo2.Visible = False
            .FramePayInfo.Visible = False
            .FramePayInfo2.Visible = False
            .FrameSalary.Visible = False
            .FrameTransfers.Visible = False
            .txtBranch.Locked = True
            .txtDept.Locked = True
        End With
    ElseIf activeSheet.Name = "Salary Changes" Then
        With frmUserEntry
            .lblMain.Caption = "Employee Information - Salary Changes"
            .FrameSalary.Height = 186
            .FrameSalary.Width = 800
            .FrameSalary.Left = 12
            .FrameSalary.Top = 55
            .FrameEmpInfo.Visible = False
            .FrameEmpInfo2.Visible = False
            .FrameBankInfo.Visible = False
            .FrameBankInfo2.Visible = False
            .FramePayInfo.Visible = False
            .FramePayInfo2.Visible = False
            .FrameStatus.Visible = False
            .FrameTransfers.Visible = False
            .txtBranch.Locked = True
            .txtDept.Locked = True
        End With
    ElseIf activeSheet.Name = "Employee Info Changes" Then
        With frmUserEntry
            .lblMain.Caption = "Employee Information - Employee Info Changes"
            .FrameEmpInfo2.Height = 222
            .FrameEmpInfo2.Width = 495
            .FrameEmpInfo2.Left = 12
            .FrameEmpInfo2.Top = 55
            .FrameBankInfo2.Height = 170
            .FrameBankInfo2.Width = 495
            .FrameBankInfo2.Left = 12
            .FrameBankInfo2.Top = 300
            .FramePayInfo2.Height = 222
            .FramePayInfo2.Width = 500
            .FramePayInfo2.Left = 515
            .FramePayInfo2.Top = 55
            .FrameEmpInfo.Visible = False
            .FrameBankInfo.Visible = False
            .FramePayInfo.Visible = False
            .FrameSalary.Visible = False
            .FrameStatus.Visible = False
            .FrameTransfers.Visible = False
            .txtBranch.Locked = True
            .txtDept.Locked = True
        End With
    ElseIf activeSheet.Name = "Transfers" Then
        quickFormView = True
        With frmUserEntry
            .lblMain.Caption = "Employee Information - Transfers"
            .FrameTransfers.Height = 186
            .FrameTransfers.Width = 970
            .FrameTransfers.Left = 12
            .FrameTransfers.Top = 55
            .FrameEmpInfo.Visible = False
            .FrameEmpInfo2.Visible = False
            .FrameBankInfo.Visible = False
            .FrameBankInfo2.Visible = False
            .FramePayInfo.Visible = False
            .FramePayInfo2.Visible = False
            .FrameSalary.Visible = False
            .FrameStatus.Visible = False
            .txtBranch.Locked = True
            .txtDept.Locked = True
        End With
    End If
    frmUserEntry.Show
End Sub

Public Sub UpdateMasterStatus()
    If activeSheet.Name = "New Hires" Then
        With frmUserEntry
            .lblMain.Caption = "Employee Information - New Hires"
            .FrameEmpInfo.Height = 222
            .FrameEmpInfo.Width = 510
            .FrameEmpInfo.Left = 12
            .FrameEmpInfo.Top = 55
            .FrameBankInfo.Height = 170
            .FrameBankInfo.Width = 510
            .FrameBankInfo.Left = 12
            .FrameBankInfo.Top = 300
            .FramePayInfo.Height = 220
            .FramePayInfo.Width = 460
            .FramePayInfo.Left = 534
            .FramePayInfo.Top = 55
            .FrameSalary.Visible = False
            .FrameStatus.Visible = False
            .FrameTransfers.Visible = False
        End With
    ElseIf activeSheet.Name = "Status Changes" Then
        With frmUserEntry
            .lblMain.Caption = "Employee Information - Status Changes"
            .FrameStatus.Height = 186
            .FrameStatus.Width = 930
            .FrameStatus.Left = 12
            .FrameStatus.Top = 55
            .FrameEmpInfo.Visible = False
            .FrameBankInfo.Visible = False
            .FramePayInfo.Visible = False
            .FrameSalary.Visible = False
            .FrameTransfers.Visible = False
        End With
    ElseIf activeSheet.Name = "Salary Changes" Then
        With frmUserEntry
            .lblMain.Caption = "Employee Information - Salary Changes"
            .FrameSalary.Height = 186
            .FrameSalary.Width = 800
            .FrameSalary.Left = 12
            .FrameSalary.Top = 55
            .FrameEmpInfo.Visible = False
            .FrameBankInfo.Visible = False
            .FramePayInfo.Visible = False
            .FrameStatus.Visible = False
            .FrameTransfers.Visible = False
        End With
    ElseIf activeSheet.Name = "Employee Info Changes" Then
        With frmUserEntry
            .lblMain.Caption = "Employee Information - Employee Info Changes"
            .FrameEmpInfo.Height = 222
            .FrameEmpInfo.Width = 510
            .FrameEmpInfo.Left = 12
            .FrameEmpInfo.Top = 55
            .FrameBankInfo.Height = 170
            .FrameBankInfo.Width = 510
            .FrameBankInfo.Left = 12
            .FrameBankInfo.Top = 300
            .FramePayInfo.Height = 220
            .FramePayInfo.Width = 460
            .FramePayInfo.Left = 534
            .FramePayInfo.Top = 55
            .FrameSalary.Visible = False
            .FrameStatus.Visible = False
            .FrameTransfers.Visible = False
        End With
    ElseIf activeSheet.Name = "Transfers" Then
        With frmUserEntry
            .lblMain.Caption = "Employee Information - Transfers"
            .FrameTransfers.Height = 186
            .FrameTransfers.Width = 906
            .FrameTransfers.Left = 12
            .FrameTransfers.Top = 55
            .FrameEmpInfo.Visible = False
            .FrameBankInfo.Visible = False
            .FramePayInfo.Visible = False
            .FrameSalary.Visible = False
            .FrameStatus.Visible = False
        End With
    End If
    frmUserEntry.Show
End Sub

'This Function is used to populate data that is entered on the Quickform to the corresponding sheet
'Once the user clicks on Save, bQuickform is set to true to ensure that the mapping does not occur again
'Loops through all the fields (text boxes and combo boxes) on the form and populates them on the sheet if they have data in them, the column index is stored under the control tag
'Once saved bsaved is set to true then code loops through the fields again to clear them
Public Sub SaveToGrid()
    Dim general As general
    Dim lastRow As Integer
    Dim cCont As Control
    Dim bSaved As Boolean
    Dim empUniqueKey As String
    
    lastTransItem = False
    
    Set general = New general
    
    lastRow = general.lastRow(activeSheet)
    
    empUniqueKey = Trim(frmUserEntry.txtEmpID.value) & "|" & Trim(frmUserEntry.txtBranch.value) & "|" & Trim(frmUserEntry.txtDept.value)
StartAgain:
    On Error GoTo InitiateDict
    
    If activeSheet.Name = "New Hires" Then
        If sDict.Exists(empUniqueKey) Then
            MsgBox "Please enter a different Branch, Department or Employee Id", vbCritical, "Employee Identifier Exists"
             Exit Sub
        End If
        
        If UCase(Trim(frmUserEntry.ComboBox9.value)) = UCase(Trim("H - Hourly")) Or UCase(Trim(frmUserEntry.ComboBox9.value)) = UCase(Trim("E - Exception Hourly")) Or UCase(Trim(frmUserEntry.ComboBox9.value)) = UCase(Trim("V - Variable")) Or UCase(Trim(frmUserEntry.ComboBox9.value)) = UCase(Trim("D - Daily")) Then
            If frmUserEntry.TextBox25.value <> "" Then
                MsgBox "Salary Per Pay cannot be entered with the chosen Payroll Type", vbInformation, "New Hires"
                frmUserEntry.TextBox25.value = Null
                Exit Sub
            End If
        ElseIf UCase(Trim(frmUserEntry.ComboBox9.value)) = UCase(Trim("S - Salaried")) Or UCase(Trim(frmUserEntry.ComboBox9.value)) = UCase(Trim("A - Salary + Commission")) Or UCase(Trim(frmUserEntry.ComboBox9.value)) = UCase(Trim("C - Commission")) Then
            If frmUserEntry.TextBox23.value <> "" Then
                MsgBox "Rate cannot be entered with the chosen Payroll Type", vbInformation, "New Hires"
                frmUserEntry.TextBox23.value = Null
                Exit Sub
            End If
        End If
        
    End If
    
    If activeSheet.Name = "Status Changes" Then
        If UCase(Trim(frmUserEntry.ComboBox1.value)) = UCase(Trim("I  - Inactive")) Or UCase(Trim(frmUserEntry.ComboBox1.value = "T - Terminated")) Then
            If frmUserEntry.txtHireDate.value <> "" Then
                MsgBox "Hire Date cannot be entered when the employee's Status is being changed to ""I - Inactive"" or ""T - Terminated""", vbInformation, "Status Changes"
                frmUserEntry.txtHireDate.value = Null
                Exit Sub
            End If
        ElseIf UCase(Trim(frmUserEntry.ComboBox1.value = "A - Active")) Then
            If frmUserEntry.txtLastDayPaid.value <> "" Then
                MsgBox "Last Day Paid cannot be entered when the employee's Status is being changed to ""A - Active""", vbInformation, "Status Changes"
                frmUserEntry.txtLastDayPaid.value = Null
                Exit Sub
            End If
        End If
    End If
    
    If activeSheet.Name = "Salary Changes" Then
        If UCase(Trim(frmUserEntry.ComboBox12.value)) = UCase(Trim("H - Hourly")) Or UCase(Trim(frmUserEntry.ComboBox12.value)) = UCase(Trim("E - Exception Hourly")) Or UCase(Trim(frmUserEntry.ComboBox12.value)) = UCase(Trim("V - Variable")) Or UCase(Trim(frmUserEntry.ComboBox12.value)) = UCase(Trim("D - Daily")) Then
            If frmUserEntry.TextBox35.value <> "" Then
                MsgBox "Salary Per Pay cannot be entered with the chosen Payroll Type", vbInformation, "Salary Changes"
                frmUserEntry.TextBox35.value = Null
                Exit Sub
            End If
        ElseIf UCase(Trim(frmUserEntry.ComboBox12.value)) = UCase(Trim("S - Salaried")) Or UCase(Trim(frmUserEntry.ComboBox12.value)) = UCase(Trim("A - Salary + Commission")) Or UCase(Trim(frmUserEntry.ComboBox12.value)) = UCase(Trim("C - Commission")) Then
            If frmUserEntry.TextBox36.value <> "" Then
                MsgBox "Rate cannot be entered with the chosen Payroll Type", vbInformation, "Salary Changes"
                frmUserEntry.TextBox36.value = Null
                Exit Sub
            End If
        End If
    End If
    
    If activeSheet.Name = "Transfers" Then
    
        chkUniqueID = frmUserEntry.txtEmpID.value & "|" & frmUserEntry.txtBranch.value & "|" & frmUserEntry.txtDept.value
        
        uniqueIdCount = Application.WorksheetFunction.CountIf(activeSheet.Range("J:J"), chkUniqueID)
        
        If uniqueIdCount > 0 Then
            MsgBox "Employee " & frmUserEntry.txtEmpID.value & " with Branch " & frmUserEntry.txtBranch.value & " and Department " & frmUserEntry.txtDept.value & " has already been entered in the Transfers sheet" _
            , vbCritical, "Duplicate Employee Transfer"

            For Each cCont In frmUserEntry.Controls
                If (TypeName(cCont) = "TextBox" Or TypeName(cCont) = "ComboBox") Then
                   cCont.value = ""
                End If
            Next cCont
            Exit Sub
        End If
    
    
        If UCase(Trim(frmUserEntry.ComboBox22.value)) = UCase(Trim("No")) Then
            If frmUserEntry.ComboBox23.value = "" And frmUserEntry.ComboBox21.value = "" And frmUserEntry.txtNewEmpID.value = "" Then
                Call OneTaxMsg
                frmUserEntry.ComboBox22.value = "Yes"
                Exit Sub
            End If
        End If
        
        If frmUserEntry.TextBox62.value <> "" Or frmUserEntry.TextBox63.value <> "" Or frmUserEntry.txtNewEmpID.value <> "" Then
            If frmUserEntry.TextBox62.value = "" Then
                branchTrans = frmUserEntry.txtBranch.value
            Else
                branchTrans = frmUserEntry.TextBox62.value
            End If
        
            If frmUserEntry.TextBox63.value = "" Then
                deptTrans = frmUserEntry.txtDept.value
            Else
                deptTrans = frmUserEntry.TextBox63.value
            End If
            
            If frmUserEntry.txtNewEmpID.value = "" Then
                eeIDTrans = frmUserEntry.txtEmpID.value
            Else
                eeIDTrans = frmUserEntry.txtNewEmpID.value
            End If

            matchUniqueKey = eeIDTrans & "|" & branchTrans & "|" & deptTrans
            Set keyMatchFound = ThisWorkbook.Sheets("MASTER Setup").Range("G:G").Find(what:=matchUniqueKey, LookIn:=xlValues)

            If Not keyMatchFound Is Nothing Then
                    
                Call TransMsg(eeIDTrans, branchTrans, deptTrans)
                
                frmUserEntry.txtNewEmpID.value = ""
                frmUserEntry.TextBox63.value = ""
                frmUserEntry.TextBox62.value = ""
                Exit Sub
            End If
            
        End If
        
        
    End If
    
       
    For Each cCont In frmUserEntry.Controls
        bQuickForm = True
        If cCont.Name = "txtUniqueKey" Then
            If cCont.value <> "" Then
                activeSheet.Range(general.NumToExcelLetter(CInt(cCont.Tag)) & lastRow + 1) = cCont.value
            End If
        ElseIf cCont.Name = "txtInitial" Then
            ' Just in case
        ElseIf (TypeName(cCont) = "TextBox" Or TypeName(cCont) = "ComboBox") And cCont.Visible Then
            If cCont.value <> "" Then
                If CInt(cCont.Tag) = 17 Then lastTransItem = True
                activeSheet.Range(general.NumToExcelLetter(CInt(cCont.Tag)) & lastRow + 1) = cCont.value
                bSaved = True
                If SubExited = True Then Exit Sub
            End If
        End If
    Next cCont

    If bSaved Then
        For Each cCont In frmUserEntry.Controls
            If (TypeName(cCont) = "TextBox" Or TypeName(cCont) = "ComboBox") Then
                cCont.value = Null
            End If
        Next cCont
        MsgBox "Employee record has been saved.", vbInformation, "Autoform"
    End If
     
    Exit Sub
InitiateDict:
    Call InitializeDict
    GoTo StartAgain
End Sub
Sub HoursButton()
'Uses a macro instead of a hyperlink to navigate to the current pay hours tab so the selected view is preserved.

    Dim ViewToggle As String
    
    ViewToggle = Sheets("Current Pay Hours Setup").Range("B12").value
    
    If ViewToggle = "Regular" Then
        Sheets("Current Pay Hours").Activate
        ActiveWindow.ScrollRow = 1
        Range("E4").Select
    ElseIf ViewToggle = "Timesheet" Then
        Sheets("Current Pay Hours TS").Activate
        ActiveWindow.ScrollRow = 1
        Range("E4").Select
    End If

End Sub

Public Function SkipEntry(cancelledRows() As Integer, sValues() As String, cancelledRowsCount As Integer)
    Dim oldValueKey As Variant
    Dim oldColumn As Integer
    Dim oldRow As Integer
    Dim cellValueFound As Boolean
    cellValueFound = False
    
    ReDim Preserve cancelledRows(cancelledRowsCount)
    cancelledRows(cancelledRowsCount) = targetRow.row
    cancelledRowsCount = cancelledRowsCount + 1

    Dim originalValues()
    ReDim originalValues(1 To ApplicationSettings.activeSheetValues.valuesRange.Columns.Count)

    Dim originalColumnCounter As Integer
    originalColumnCounter = 1
    
    For Each oldValueKey In ApplicationSettings.activeSheetValues.originalValues.Keys()
        oldRow = Range(oldValueKey).row

        If oldRow = targetRow.row Then
            oldColumn = Range(oldValueKey).Column

            cellValueFound = True
            originalValues(originalColumnCounter) = ApplicationSettings.activeSheetValues.originalValues(oldValueKey)

            originalColumnCounter = originalColumnCounter + 1
        End If
    Next oldValueKey

    allCancelledRows.Add originalValues

    Dim emptyCounter As Integer
    For emptyCounter = 1 To UBound(sValues, 2)
        sValues(k, emptyCounter) = ""
    Next emptyCounter
    
    SkipEntry = sValues
End Function


Public Function AddLeadingCharacters(strValue As String, newStrLength As Integer, prefixChar As String) As String
    
    While Len(strValue) < newStrLength
        strValue = prefixChar & strValue
    Wend
    AddLeadingCharacters = strValue
    
End Function

Public Sub OptionsIndexAutofill()

    Dim optionSht As Worksheet
    Dim SourceRange As Range
    Dim fillRange As Range
    
    Application.ScreenUpdating = False
    
'    Sheets("Employee Options Setup").Activate
    Set general = New general
    Set optionSht = Sheets("Employee Options Setup")
    lastRow = general.lastRow(optionSht)
    
    Application.EnableEvents = False
    
    optionSht.Sort.SortFields.Clear
    optionSht.Sort.SortFields.Add key:=Range _
        ("A9:A" & lastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
    With optionSht.Sort
        .SetRange Range("A9:A" & lastRow)
        .header = xlGuess
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    Set SourceRange = Sheets("Employee Options Setup").Range("G6:G8")
    Set fillRange = Sheets("Employee Options Setup").Range("G6:G" & lastRow)
    SourceRange.AutoFill Destination:=fillRange
   
    Sheets("CL0-Cover Sheet").Activate
    
End Sub

Private Function matchFound(currentSheet As Worksheet, currentTargetRow As Range, currentSheetRow As Range) As Boolean
    Dim generalInstance As New general
    Dim oldValue As String
    Dim currentColum As String
    
    For i = 5 To 9
        currentcolumn = generalInstance.NumToExcelLetter(i)
        oldValue = ApplicationSettings.activeSheetValues.originalValues("$" & currentcolumn & "$" & currentTargetRow.row)

        If oldValue <> Range(generalInstance.NumToExcelLetter(i) & currentSheetRow.row).value Then
            matchFound = False
            Exit Function
        End If
    Next i
    
    matchFound = True
End Function

Public Sub SetPmtSheets()
    Set PmtSheets = New Collection
    PmtSheets.Add "Current Pay Hours TS", "Current Pay Hours TS"
    PmtSheets.Add "Current Pay Hours", "Current Pay Hours"
    PmtSheets.Add "Current Pay Adjust", "Current Pay Adjust"
    PmtSheets.Add "Bonus Taxation", "Bonus Taxation"
    PmtSheets.Add "Separate Pay", "Separate Pay"
    PmtSheets.Add "Lump Sum", "Lump Sum"
    PmtSheets.Add "Manual Payment Update", "Manual Payment Update"
    PmtSheets.Add "Employee Options", "Employee Options"
End Sub

Public Sub ChangeIDsALT()

    Dim sht As Variant
    Dim tranSheet As Worksheet
    Dim wst As Worksheet
    Dim wsr As Worksheet
    Dim tranDict As Worksheet
    
    Set tranDict = Sheets("Transfers List Setup")
    Set tranSheet = Sheets("Transfers")
    Set wst = Sheets("Current Pay Hours TS")
    Set wsr = Sheets("Current Pay Hours")
    
    SetPmtSheets
    
    Set general = New general
    lastRow = general.lastRow(tranSheet)
    
    If lastRow > 3 Then
    
        Application.EnableEvents = False
        For i = 4 To lastRow
            eeIDTrans = tranSheet.Range("G" & i).value & "|" & tranSheet.Range("E" & i).value & "|" & tranSheet.Range("F" & i).value
        
            For Each sht In PmtSheets
                lastRowSht = general.lastRow(Sheets(sht))
                
                
                If sht = "Current Pay Hours TS" Then
                    
                    If Sheets("Current Pay Hours Setup").Range("B12").value = "Timesheet" Then
                        Call TransToVert
                        Application.EnableEvents = False
                        
                        If lastRowSht > 3 Then
                            For x = 4 To lastRowSht
'                                eeIDsht = wsr.Range("G" & x).value & "|" & wsr.Range("E" & x).value & "|" & wsr.Range("F" & x).value
                                eeIDsht = wsr.Range("J" & x).value
                                If eeIDTrans = eeIDsht Then
                                    Set changeKey = tranDict.Range("F:F").Find(what:=eeIDsht, LookIn:=xlValues)
                                    wsr.Range("E" & x).value = tranDict.Range("G" & changeKey.row).value
                                    wsr.Range("F" & x).value = tranDict.Range("H" & changeKey.row).value
                                End If
                            Next x
                            Call TransferToHoriz
                            Application.EnableEvents = False
                        End If

                        
                    End If
                
                
                ElseIf sht = "Current Pay Hours" Then
                
                    If Sheets("Current Pay Hours Setup").Range("B12").value = "Regular" Then
                    
                        If lastRowSht > 3 Then
                            For x = 4 To lastRowSht
'                                eeIDsht = wsr.Range("G" & x).value & "|" & wsr.Range("E" & x).value & "|" & wsr.Range("F" & x).value
                                eeIDsht = wsr.Range("J" & x).value
                                If eeIDTrans = eeIDsht Then
                                    Set changeKey = tranDict.Range("F:F").Find(what:=eeIDsht, LookIn:=xlValues)
                                    wsr.Range("E" & x).value = tranDict.Range("G" & changeKey.row).value
                                    wsr.Range("F" & x).value = tranDict.Range("H" & changeKey.row).value
                                End If
                            Next x
                        End If
                
                    End If
                
                Else
                
                    If lastRowSht > 3 Then
                        For x = 4 To lastRowSht
'                            eeIDsht = Sheets(sht).Range("G" & x).value & "|" & Sheets(sht).Range("E" & x).value & "|" & Sheets(sht).Range("F" & x).value
                            eeIDsht = Sheets(sht).Range("J" & x).value
                            If eeIDTrans = eeIDsht Then
                                    Set changeKey = tranDict.Range("F:F").Find(what:=eeIDsht, LookIn:=xlValues)
                                    Sheets(sht).Range("E" & x).value = tranDict.Range("G" & changeKey.row).value
                                    Sheets(sht).Range("F" & x).value = tranDict.Range("H" & changeKey.row).value
                            End If
                        Next x
                    End If
                    
                End If
            Next sht
            
        Next i
        Application.EnableEvents = True
    End If
       
    tranSheet.Activate
    
    
End Sub

Public Sub ChangeIDs(newBranch, newDept, newEEID, uniqueKeyPmts)

    Dim sht As Variant
    Dim tranSheet As Worksheet
    Dim wst As Worksheet
    Dim wsr As Worksheet
    Dim tranDict As Worksheet
    
    Set tranDict = Sheets("Transfers List Setup")
    Set tranSheet = Sheets("Transfers")
    Set wst = Sheets("Current Pay Hours TS")
    Set wsr = Sheets("Current Pay Hours")
    
    SetPmtSheets
    
    Set general = New general
    lastRow = general.lastRow(tranSheet)
    

    eeIDTrans = uniqueKeyPmts

    For Each sht In PmtSheets
        lastRowSht = general.lastRow(Sheets(sht))
        
        
        If sht = "Current Pay Hours TS" Then
            
            If Sheets("Current Pay Hours Setup").Range("B12").value = "Timesheet" Then
                Call TransToVert
                Application.EnableEvents = False
                lastRowSht = general.lastRow(Sheets("Current Pay Hours"))
                If lastRowSht > 3 Then
                    For x = 4 To lastRowSht
                        eeIDsht = wsr.Range("G" & x).value & "|" & wsr.Range("E" & x).value & "|" & wsr.Range("F" & x).value
'                        eeIDsht = wsr.Range("J" & x).value
                        If eeIDTrans = eeIDsht Then
                            wsr.Range("E" & x).value = newBranch
                            wsr.Range("F" & x).value = newDept
                            wsr.Range("G" & x).value = newEEID
                        End If
                    Next x
                    Call TransferToHoriz
                    Application.EnableEvents = False
                End If

                
            End If
        
        
        ElseIf sht = "Current Pay Hours" Then
        
            If Sheets("Current Pay Hours Setup").Range("B12").value = "Regular" Then
            
                If lastRowSht > 3 Then
                    For x = 4 To lastRowSht
                        eeIDsht = wsr.Range("G" & x).value & "|" & wsr.Range("E" & x).value & "|" & wsr.Range("F" & x).value
                        If eeIDTrans = eeIDsht Then
                            wsr.Range("E" & x).value = newBranch
                            wsr.Range("F" & x).value = newDept
                            wsr.Range("G" & x).value = newEEID
                        End If
                    Next x
                End If
        
            End If
        
        Else
        
            If lastRowSht > 3 Then
                For x = 4 To lastRowSht
                    eeIDsht = Sheets(sht).Range("G" & x).value & "|" & Sheets(sht).Range("E" & x).value & "|" & Sheets(sht).Range("F" & x).value
                    If eeIDTrans = eeIDsht Then
                            Sheets(sht).Range("E" & x).value = newBranch
                            Sheets(sht).Range("F" & x).value = newDept
                            Sheets(sht).Range("G" & x).value = newEEID
                    End If
                Next x
            End If
            
        End If
    Next sht
         
    tranSheet.Activate
    
    
End Sub

Public Sub UpdateENDNForm()
Dim lastRow As Long

    ' Updates both text boxes based on the filter
    frmENDNDropdown.listboxDeductions.Clear
    frmENDNDropdown.listboxEarnings.Clear
    
    lastRow = ThisWorkbook.Sheets("EARNING setup").Cells(ThisWorkbook.Sheets("EARNING setup").Rows.Count, 5).End(xlUp).row
    If frmENDNDropdown.tbEntry.value = "" Then ' Check the filter
        ' Add all earnings and deductions - or just earnings if the hidden flag is set.
        For Each mycell In ThisWorkbook.Sheets("EARNING setup").Range("E2:E" & Trim(Str(lastRow)))
                
            If Mid(mycell.Text, 4, 2) = "EN" Then frmENDNDropdown.listboxEarnings.AddItem mycell.Text
            If frmENDNDropdown.cbEarningsOnlyFlag = False Then ' only add deductions if the flag is not set
                frmENDNDropdown.Label2.Enabled = True
                frmENDNDropdown.listboxDeductions.Enabled = True
                If Mid(mycell.Text, 4, 2) = "DN" Then frmENDNDropdown.listboxDeductions.AddItem mycell.Text
            Else
                frmENDNDropdown.Label2.Enabled = False
                frmENDNDropdown.listboxDeductions.Enabled = False
            End If
        Next mycell
    Else
        ' Try to filter by the value
        For Each mycell In ThisWorkbook.Sheets("EARNING setup").Range("E2:E" & Trim(Str(lastRow)))
            If InStr(1, UCase(mycell.Text), UCase(frmENDNDropdown.tbEntry.Text), vbBinaryCompare) <> 0 And Mid(mycell.Text, 4, 2) = "EN" Then frmENDNDropdown.listboxEarnings.AddItem mycell.Text
            If frmENDNDropdown.cbEarningsOnlyFlag = False Then ' only add deductions if the flag is not set
                frmENDNDropdown.Label2.Enabled = True
                frmENDNDropdown.listboxDeductions.Enabled = True
                If InStr(1, UCase(mycell.Text), UCase(frmENDNDropdown.tbEntry.Text), vbBinaryCompare) <> 0 And Mid(mycell.Text, 4, 2) = "DN" Then frmENDNDropdown.listboxDeductions.AddItem mycell.Text
            Else
                frmENDNDropdown.Label2.Enabled = False
                frmENDNDropdown.listboxDeductions.Enabled = False
            End If
        Next mycell
    End If
    
End Sub

Public Function SelectENDN(MyFilter As String, Optional EarningsOnlyFlag As Boolean = False) As String  ' Takes a filter (can be left blank) and returns the selected EN or DN.
    
    SelectENDN = "" ' default
    If MyFilter <> "" Then
        frmENDNDropdown.tbEntry.value = MyFilter
    Else
        frmENDNDropdown.tbEntry.value = ""
    End If
    frmENDNDropdown.cbEarningsOnlyFlag = EarningsOnlyFlag ' Used by update ENDN form.
    
    frmENDNDropdown.Show
    SelectENDN = frmENDNDropdown.tbSelection.value

End Function






Attribute VB_Name = "TransferTest"
Public Sub LaunchForm()
    frmDuplicateTransfer.Show
End Sub
Attribute VB_Name = "Transfers"
Option Explicit

'Public EmployeeTransfers As Dictionary

Public Sub UpdateTransfersList()
    Dim transfersSheet As Worksheet
    Set transfersSheet = Sheets("Transfers")
    
    Dim transfersListSheet As Worksheet
    Set transfersListSheet = Sheets("Transfers List Setup")
    transfersListSheet.UsedRange.ClearContents
    
    Dim localGeneral As general
    Set localGeneral = New general
    
    Dim newUniqueKey As String
    Dim i As Integer
    Dim j As Integer
    
    j = 1
    
    Application.EnableEvents = False
    
    For i = 4 To localGeneral.lastRow(transfersSheet)
        Dim currentTransfer As EmployeeTransfer
        Set currentTransfer = New EmployeeTransfer

        transfersListSheet.Range("A" & j).value = transfersSheet.Range("E" & i).value
        transfersListSheet.Range("B" & j).value = transfersSheet.Range("F" & i).value
        transfersListSheet.Range("C" & j).value = transfersSheet.Range("G" & i).value
        transfersListSheet.Range("D" & j).value = transfersSheet.Range("H" & i).value
        transfersListSheet.Range("E" & j).value = transfersSheet.Range("I" & i).value
        transfersListSheet.Range("F" & j).value = transfersSheet.Range("J" & i).value

        If (transfersSheet.Range("N" & i).value = "") Then
            transfersListSheet.Range("G" & j).value = transfersSheet.Range("E" & i).value
        ElseIf (transfersSheet.Range("N" & i).value = "~") Then
            transfersListSheet.Range("G" & j).value = ""
        Else
            transfersListSheet.Range("G" & j).value = transfersSheet.Range("N" & i).value
        End If
        
        If (transfersSheet.Range("O" & i).value = "") Then
            transfersListSheet.Range("H" & j).value = transfersSheet.Range("F" & i).value
        ElseIf (transfersSheet.Range("O" & i).value = "~") Then
            transfersListSheet.Range("H" & j).value = ""
        Else
            transfersListSheet.Range("H" & j).value = transfersSheet.Range("O" & i).value
        End If
        
        If (transfersSheet.Range("Q" & i).value = "") Then
            transfersListSheet.Range("K" & j).value = transfersSheet.Range("G" & i).value
        ElseIf (transfersSheet.Range("Q" & i).value = "~") Then
            transfersListSheet.Range("K" & j).value = ""
        Else
            transfersListSheet.Range("K" & j).value = transfersSheet.Range("Q" & i).value
        End If

        newUniqueKey = transfersListSheet.Range("K" & j).value & "|" & transfersListSheet.Range("G" & j).value & "|" & transfersListSheet.Range("H" & j).value
        transfersListSheet.Range("I" & j).value = newUniqueKey
    
        transfersListSheet.Range("J" & j).value = i
        j = j + 1
    Next i
    
    Application.EnableEvents = True
End Sub

Public Sub CreateNewTransfersList()
    Dim transfersListSheet As Worksheet
    Set transfersListSheet = Sheets("Transfers List Setup")

    Application.EnableEvents = False
    transfersListSheet.UsedRange.ClearContents
    Application.EnableEvents = True
End Sub

Public Sub AddTransfer(rowNumber As Long)
    Dim transfersSheet As Worksheet
    Set transfersSheet = Sheets("Transfers")
    
    Dim transfersListSheet As Worksheet
    Set transfersListSheet = Sheets("Transfers List Setup")
    
    Dim newUniqueKey As String
    
    Application.EnableEvents = False
    
'    transfersListSheet.UsedRange.ClearContents

    Dim localGeneral As general
    Set localGeneral = New general
    
    Dim nextRow As Long
    nextRow = localGeneral.lastRow(transfersListSheet) + 1
    
    transfersListSheet.Range("A" & nextRow).value = transfersSheet.Range("E" & rowNumber).value
    transfersListSheet.Range("B" & nextRow).value = transfersSheet.Range("F" & rowNumber).value
    transfersListSheet.Range("C" & nextRow).value = transfersSheet.Range("G" & rowNumber).value
    transfersListSheet.Range("D" & nextRow).value = transfersSheet.Range("H" & rowNumber).value
    transfersListSheet.Range("E" & nextRow).value = transfersSheet.Range("I" & rowNumber).value
    transfersListSheet.Range("F" & nextRow).value = transfersSheet.Range("J" & rowNumber).value
    
    If transfersSheet.Range("N" & rowNumber).value = "" Then
        transfersListSheet.Range("G" & nextRow).value = transfersSheet.Range("E" & rowNumber).value
    ElseIf (transfersSheet.Range("N" & rowNumber).value = "~") Then
        transfersListSheet.Range("G" & nextRow).value = ""
    Else
        transfersListSheet.Range("G" & nextRow).value = transfersSheet.Range("N" & rowNumber).value
    End If
    
    If (transfersSheet.Range("O" & rowNumber).value = "") Then
        transfersListSheet.Range("H" & nextRow).value = transfersSheet.Range("F" & rowNumber).value
    ElseIf (transfersSheet.Range("O" & rowNumber).value = "~") Then
        transfersListSheet.Range("H" & nextRow).value = ""
    Else
        transfersListSheet.Range("H" & nextRow).value = transfersSheet.Range("O" & rowNumber).value
    End If
    
    If (transfersSheet.Range("Q" & rowNumber).value = "") Then
        transfersListSheet.Range("K" & nextRow).value = transfersSheet.Range("G" & rowNumber).value
    ElseIf (transfersSheet.Range("Q" & rowNumber).value = "~") Then
        transfersListSheet.Range("K" & nextRow).value = ""
    Else
        transfersListSheet.Range("K" & nextRow).value = transfersSheet.Range("Q" & rowNumber).value
    End If
    
    newUniqueKey = transfersListSheet.Range("K" & nextRow).value & "|" & transfersListSheet.Range("G" & nextRow).value & "|" & transfersListSheet.Range("H" & nextRow).value
    transfersListSheet.Range("I" & nextRow).value = newUniqueKey
    
    transfersListSheet.Range("J" & nextRow).value = rowNumber
    Application.EnableEvents = True
End Sub

Public Function GetEmployeeTranfserFromSheet(uniqueKey As String) As EmployeeTransfer
    Dim transfersListSheet As Worksheet
    Dim transferCell As Range
    
    Set transfersListSheet = Sheets("Transfers List Setup")
    Set transferCell = transfersListSheet.Range("F:F").Find(what:=uniqueKey)

    If Not transferCell Is Nothing Then
        Dim foundTransfer As EmployeeTransfer
        Set foundTransfer = New EmployeeTransfer
        
        foundTransfer.oldBranch = transfersListSheet.Range("A" & transferCell.row).value
        foundTransfer.oldDepartment = transfersListSheet.Range("B" & transferCell.row).value
        foundTransfer.oldEmployeeID = transfersListSheet.Range("C" & transferCell.row).value
        foundTransfer.lastName = transfersListSheet.Range("D" & transferCell.row).value
        foundTransfer.firstName = transfersListSheet.Range("E" & transferCell.row).value
        foundTransfer.uniqueKey = transfersListSheet.Range("F" & transferCell.row).value
        foundTransfer.newBranch = transfersListSheet.Range("G" & transferCell.row).value
        foundTransfer.newDepartment = transfersListSheet.Range("H" & transferCell.row).value
        foundTransfer.newEmployeeID = transfersListSheet.Range("K" & transferCell.row).value
        foundTransfer.newUniqueKey = transfersListSheet.Range("I" & transferCell.row).value
        foundTransfer.rowNumber = transfersListSheet.Range("J" & transferCell.row).value
        
        GetEmployeeTranfserFromSheet = foundTransfer
    Else
        GetEmployeeTranfserFromSheet = Nothing
    End If
End Function

Attribute VB_Name = "TypeValidation"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Sub ValidateTypeInRange(Target, setupSheet)
    Dim TargetCell As Range
    Dim setupHeaderRange As Range
    Dim setupCell As Range
    Dim setupFields As Range
    Dim setupHeaders As Range
    Dim setupField As Range
    Dim targetParent
    Dim general As general

    Set general = New general
    
    Set setupHeaderRange = setupSheet.Range("$A2:$A" & setupSheet.Cells(Rows.Count, 1).End(xlUp).row)

    For Each TargetCell In Target.Cells
        ' Change is in header so do not apply validation
        If (TargetCell.row < 4) Then
            Exit Sub
        End If

        targetParent = general.NumToExcelLetter(TargetCell.Column)

        ' Get the Header for the target
        targetParent = Range("$" & targetParent & "$3").Value2
        
        For Each setupCell In setupHeaderRange
            If UCase(Trim(setupCell.Value2)) = UCase(Trim(targetParent)) Then
                Set setupFields = setupSheet.Range("A" & setupCell.row & ":" & general.NumToExcelLetter(setupSheet.UsedRange.Columns.Count) & setupCell.row)
                ' Color index for Excel's "Normal" style
                'Range(TargetCell.Address).Borders.ColorIndex = 1
                Range(TargetCell.Address).Interior.ColorIndex = 0
                
                For Each setupField In setupFields
                    Call ValidationFactory(setupSheet.Range(Chr(setupField.Column + 64) & "1").Value2, setupField, TargetCell.Value2, TargetCell.Address)
                Next setupField
                Exit For
            End If
        Next setupCell
        
        If Application.CountA(Range("D" & TargetCell.row & ":" & general.NumToExcelLetter(Range("D3").End(xlToRight).Column) & TargetCell.row)) = 0 Then
            ' Color index for Excel's "Normal" style
            'Range(TargetCell.Address).EntireRow.Borders.ColorIndex = 1
            Range(TargetCell.Address).EntireRow.Interior.ColorIndex = 0
            Exit Sub
        End If
    Next TargetCell
End Sub
Private Sub ValidationFactory(validationType, validationValue, targetValue, targetAddress)
    '
    ' Factory pattern used to decide which method to invoke from Setup tab
    '
    If UCase(Trim(validationType)) = UCase(Trim("WHITE LIST")) And validationValue <> "" Then
        Call WhiteListValidation(validationValue, Application.activeSheet.Range(targetAddress), targetAddress)
    ElseIf UCase(Trim(validationType)) = UCase(Trim("TYPE")) And validationValue <> "" Then
        Call TypeValidation(validationValue, Application.activeSheet.Range(targetAddress).Value2, targetAddress)
    ElseIf UCase(Trim(validationType)) = UCase(Trim("REQUIRE")) And validationValue <> "" Then
        Call RequiredValidation(validationValue, Application.activeSheet.Range(targetAddress), targetAddress)
    ElseIf UCase(Trim(validationType)) = UCase(Trim("LENGTH")) And validationValue <> "" Then
        Call LengthValidation(validationValue, Application.activeSheet.Range(targetAddress), targetAddress)
    ElseIf UCase(Trim(validationType)) = UCase(Trim("SPECIAL")) And validationValue <> "" Then
        Call SpecialValidation(validationValue, Application.activeSheet.Range(targetAddress), targetAddress)
    End If
End Sub
Public Function RegexValidation(regexPattern, targetValue, targetAddress) As Integer
    '
    'Dependency: Microsoft VBScript Regular Expressions 5.5
    'If targetValue satisfies regex then return 1 (True)
    '
    On Error Resume Next
    Dim regEx As New Regexp
    With regEx
        .Global = True
        .IgnoreCase = False
        .Pattern = regexPattern
    End With
    
    If regEx.Test(targetValue) <> True Then
        Call invalidCellFormat(targetAddress)
        RegexValidation = 0
    Else
        RegexValidation = 1
    End If
End Function
Private Sub SpecialValidation(validationValue, targetValue, targetAddress)
    Dim regexPattern
                    
    regexPattern = validationValue
'    Call RegexValidation(regexPattern, targetValue, targetAddress)
    If targetValue <> "" Then Call RegexValidation(regexPattern, targetValue, targetAddress)
End Sub

Private Sub LengthValidation(validationValue, targetValue, targetAddress)
    Dim validationLength
    Dim targetLength As Integer
    Dim operator
    Dim intervalArray() As String
    
    targetLength = Len(targetValue)

    'Base Cases
    If (targetLength = 0) Or targetValue = "~" Then
        Exit Sub
    ElseIf (IsNumeric(validationValue)) Then
        If Not (targetLength = validationValue) Then
            Call invalidCellFormat(targetAddress)
        End If
    ElseIf (InStr(validationValue, "-")) Then
        intervalArray = Split(validationValue, "-")
        If UBound(intervalArray) = 1 Then
            If Not (targetLength <= CInt(intervalArray(1)) And targetLength >= CInt(intervalArray(0))) Then
                Call invalidCellFormat(targetAddress)
            End If
        End If
    Else
        operator = Left(validationValue, 1)
        validationLength = Right(validationValue, Len(validationValue) - 1)
        
        Select Case operator
            Case "<"
                If Not (targetLength < CInt(validationLength)) Then
                    Call invalidCellFormat(targetAddress)
                End If
            Case ">"
                If Not (targetLength > CInt(validationLength)) Then
                    Call invalidCellFormat(targetAddress)
                End If
        End Select
    End If
End Sub
Private Sub formatCellColumn(targetAddress, formatCategory)
    Select Case UCase(Trim(formatCategory))
    Case UCase(Trim("PERCENTAGE"))
        Range(targetAddress).NumberFormat = "0.00%"
    Case UCase(Trim("CURRENCY"))
        Range(targetAddress).NumberFormat = "$#,##0.00"
    End Select
End Sub
Public Sub DateValidation(targetValue, targetAddress)
    '
    'Checks if input is numeric then tries to convert to the perfered date format
    '
    Dim dateFormatedstring
    Dim month As Integer
    Dim day As Integer
    Dim year As Integer
    Dim fulldate() As String
    Dim regexPattern As String
    Dim splittedDate() As String
    
    sheetName = ThisWorkbook.activeSheet.Name
    
    If sheetName = "New Hires" Then
        If Split(targetAddress, "$")(1) = "M" Or Split(targetAddress, "$")(1) = "S" Then
            Range(targetAddress).NumberFormat = "@"
        End If
    End If
    
    If IsNumeric(targetValue) And Len(targetValue) = 5 Then
        targetValue = CStr(targetValue)
    End If
    
    ' Empty Case
    If (targetValue = 0) Then
        Exit Sub
    ElseIf IsNumeric(targetValue) And Len(targetValue) = 5 Then
        targetValue = CStr(CDate(targetValue))
        splittedDate = Split(targetValue, "/")
        If UBound(splittedDate) = 2 Then
            If Len(splittedDate(0)) = 1 Then
                'append zero
                splittedDate(0) = "0" & splittedDate(0)
            End If
            
            If Len(splittedDate(1)) = 1 Then
                'append zero
                splittedDate(1) = "0" & splittedDate(1)
            End If
            targetValue = splittedDate(0) & "/" & splittedDate(1) & "/" & splittedDate(2)
            Application.EnableEvents = False
            Range(targetAddress).value = targetValue
            Application.EnableEvents = True
        End If
    ElseIf Len(targetValue) = 9 And InStr(targetValue, "/") > 0 Then
        splittedDate = Split(targetValue, "/")
        If UBound(splittedDate) = 2 Then
            If Len(splittedDate(0)) = 1 Then
                'append zero
                splittedDate(0) = "0" & splittedDate(0)
            ElseIf Len(splittedDate(1)) = 1 Then
                'append zero
                splittedDate(1) = "0" & splittedDate(1)
            End If
            targetValue = splittedDate(0) & "/" & splittedDate(1) & "/" & splittedDate(2)
            Application.EnableEvents = False
            Range(targetAddress).value = targetValue
            Application.EnableEvents = True
        End If
        
    ElseIf Len(targetValue) = 7 Then ' Pads the first number with 0 since Excel removes leading 0's
        targetValue = "0" & targetValue
        
    ElseIf Len(targetValue) = 6 Then ' Tries to correct Dates that are entered as m/d/yyyy by making it mm/dd/yyyy
        Dim tempString As String
        tempString = Left(targetValue, 1) & "0"
        targetValue = "0" & tempString & Right(targetValue, 5)
    End If
    
    regexPattern = "^([0-9]{8})$|^([0-9]{1,2}/[0-9]{1,2}/[0-9]{4})$"
    If (RegexValidation(regexPattern, targetValue, targetAddress) = 0) Then
        Exit Sub
    End If
  
    If (Len(targetValue) = 8 And InStr(targetValue, "/") = False) Then
        month = CInt(Left(targetValue, 2))
        day = CInt(Mid(targetValue, 3, 2))
        year = CInt(Right(targetValue, 4))
        
    ElseIf (InStr(targetValue, "/")) Then
        fulldate = Split(targetValue, "/")

        If UBound(fulldate) <> 2 Then
            Call invalidCellFormat(targetAddress)
            Exit Sub
        End If
           
        month = CInt(fulldate(0))
        day = CInt(fulldate(1))
    Else
        Call invalidCellFormat(targetAddress)
        Exit Sub
    End If
    
    If month < 0 Or month > 12 Or day < 0 Or day > 31 Then
        Call invalidCellFormat(targetAddress)
        Exit Sub
    ElseIf (Len(targetValue) = 8) Then
        If InStr(targetValue, "/") = False Then
            targetValue = dhCNumdate(targetValue, "MMDDYYYY")
        End If
        
        splittedDate = Split(CStr(targetValue), "/")
        
        ' Checks if date got converted correctly using DateSerial()
        ' then appends the missing 0s from DateSerial() to match the format MM/DD/YYYY
        If UBound(splittedDate) <> 2 Then
            Call invalidCellFormat(targetAddress)
            Exit Sub
        Else
            If Len(splittedDate(0)) = 1 Then
                splittedDate(0) = "0" & splittedDate(0)
            End If
            If Len(splittedDate(1)) = 1 Then
                splittedDate(1) = "0" & splittedDate(1)
            End If
'            Application.EnableEvents = False
            Range(targetAddress).value = splittedDate(0) & "/" & _
                                            splittedDate(1) & "/" & _
                                            splittedDate(2)
'            Application.EnableEvents = True
        End If

    End If
    
    err.Clear
End Sub
Private Sub RequiredValidation(validationValue, targetValue, targetAddress)

    If Application.Evaluate("=SUM(LEN(E" & targetValue.row & ":XFD" & targetValue.row & "))") <> 0 Then
        If (validationValue <> "" And targetValue = "") Then
            Call invalidCellFormat(targetAddress)
        End If
    End If
       
End Sub
Private Sub TypeValidation(validationValue, targetValue, targetAddress)
    Dim regexPattern
    
    If targetValue = "" Then
        Exit Sub
    End If
    
    Select Case UCase(Trim(validationValue))
    Case UCase(Trim("NUMERIC"))
        regexPattern = "^[0-9]*$"
        Call RegexValidation(regexPattern, targetValue, targetAddress)
    Case UCase(Trim("TEXT"))
        regexPattern = "^.*$"
        Call RegexValidation(regexPattern, targetValue, targetAddress)
    Case UCase(Trim("DATE"))
        Call DateValidation(targetValue, targetAddress)
    Case UCase(Trim("PERCENTAGE"))
        regexPattern = "^[0-9]*\.?[0-9]*$"
        If (RegexValidation(regexPattern, targetValue, targetAddress) = 1) Then
            Call formatCellColumn(targetAddress, "percentage")
        End If
    Case UCase(Trim("CURRENCY"))
        regexPattern = "^-?[0-9]*\.?[0-9]*$"
        If (RegexValidation(regexPattern, targetValue, targetAddress) = 1) Then
            Call formatCellColumn(targetAddress, "currency")
        End If
    Case UCase(Trim("ALNUM"))
        regexPattern = "^[0-9a-zA-Z ]*$"
        Call RegexValidation(regexPattern, targetValue, targetAddress)
    End Select
End Sub
Private Sub WhiteListValidation(validationValue, targetValue, targetAddress)
    Dim regexPattern
    
    ' Color index for Excel's "Normal" style
    'Range(targetAddress).Borders.ColorIndex = 1
    Range(targetAddress).Interior.ColorIndex = 0
                    
    regexPattern = "^[" & validationValue & "]*$"
    Call RegexValidation(regexPattern, targetValue, targetAddress)
End Sub
Private Function dhCNumdate(ByVal lngdate As Long, ByVal strFormat As String) As Variant
    ' SOURCE: https://msdn.microsoft.com/en-us/library/aa227484(v=vs.60).aspx
    ' Convert numbers to dates, depending on the specified format
    ' and the incoming number. In this case, the number and the
    ' format must match, or the output will be useless.
    Dim intYear As Integer
    Dim intMonth As Integer
    Dim intDay As Integer
    Dim fOK As Boolean
    fOK = True
    Select Case strFormat
        Case "YYYYMMDD"
            intYear = lngdate \ 10000
            intMonth = (lngdate \ 100) Mod 100
            intDay = lngdate Mod 100
        Case "MMDDYYYY"
            intYear = lngdate Mod 10000
            intMonth = lngdate \ 1000000
            intDay = (lngdate \ 10000) Mod 100
        Case Else
            fOK = False
    End Select
    If fOK Then
        dhCNumdate = DateSerial(intYear, intMonth, intDay)
    Else
        dhCNumdate = Null
    End If
End Function
Private Sub invalidCellFormat(targetAddress)
    ' Color index for Excel's "Bad" style
    'Range(targetAddress).Borders.ColorIndex = 1
    Range(targetAddress).Interior.ColorIndex = 22
End Sub
Attribute VB_Name = "UserGuide"
Sub ReplaceItems()

    'Replaces all items in the User Guide Tab in case they get changed or deleted
    
    'Tab Name
    If Range("B3").value <> "|fffd| New Hires" Then
        Range("B3").value = "|fffd| New Hires"
    End If
    
    If Range("B4").value <> "|fffd| Status Changes" Then
        Range("B4").value = "|fffd| Status Changes"
    End If
    
    If Range("B5").value <> "|fffd| Salary Changes" Then
        Range("B5").value = "|fffd| Salary Changes"
    End If

    If Range("B6").value <> "|fffd| Employee Info Changes" Then
        Range("B6").value = "|fffd| Employee Info Changes"
    End If
    
    If Range("B7").value <> "|fffd| Transfers" Then
        Range("B7").value = "|fffd| Transfers"
    End If
    
    If Range("B8").value <> "|fffd| Current Pay Hours" Then
        Range("B8").value = "|fffd| Current Pay Hours"
    End If
    
    If Range("B9").value <> "|fffd| Current Pay Adjust" Then
        Range("B9").value = "|fffd| Current Pay Adjust"
    End If
    
    If Range("B10").value <> "|fffd| Bonus Taxation" Then
        Range("B10").value = "|fffd| Bonus Taxation"
    End If
    
    If Range("B11").value <> "|fffd| Separate Pay" Then
        Range("B11").value = "|fffd| Separate Pay"
    End If
    
    If Range("B14").value <> "|fffd| Lump Sum" Then
        Range("B14").value = "|fffd| Lump Sum"
    End If
    
    If Range("B15").value <> "|fffd| Manual Payment Update" Then
        Range("B15").value = "|fffd| Manual Payment Update"
    End If
    
    If Range("B16").value <> "|fffd| Employee Options" Then
        Range("B16").value = "|fffd| Employee Options"
    End If

    'Description
    
    If Range("C3").value <> "Add new employees to the database" Then
        Range("C3").value = "Add new employees to the database"
    End If
    
    If Range("C4").value <> "Modify an existing employees status" Then
        Range("C4").value = "Modify an existing employees status"
    End If
    
    If Range("C5").value <> "Modify an existing employees Salary or Rate" Then
        Range("C5").value = "Modify an existing employees Salary or Rate"
    End If

    If Range("C6").value <> "Modify an existing employees profile information (Address, SIN, EI Occupation, Banking information)" Then
        Range("C6").value = "Modify an existing employees profile information (Address, SIN, EI Occupation, Banking information)"
    End If
    
    If Range("C7").value <> "Transfer an employee to a new department, cost centre, Province of Employment and/or BN#" Then
        Range("C7").value = "Transfer an employee to a new department, cost centre, Province of Employment and/or BN#"
    End If
    
    If Range("C8").value <> "Pay out hours to an active employee for the current pay period" Then
        Range("C8").value = "Pay out hours to an active employee for the current pay period"
    End If
    
    If Range("C9").value <> "Make a one time adjustment to an active employees pay" Then
        Range("C9").value = "Make a one time adjustment to an active employees pay"
    End If
    
    If Range("C10").value <> "Make payments that should be taxed on an annualized basis (Bonus, Awards, Commissions, Retro Pay)" Then
        Range("C10").value = "Make payments that should be taxed on an annualized basis (Bonus, Awards, Commissions, Retro Pay)"
    End If
    
    If Range("C11").value <> "Pay out to Terminated/Inactive employees whose status changed in prior pay periods. " Then
        Range("C11").value = "Pay out to Terminated/Inactive employees whose status changed in prior pay periods. "
    End If
    
    If Range("C12").value <> "Make payments that need to replace full previous pay periods" Then
        Range("C12").value = "Make payments that need to replace full previous pay periods"
    End If
    
    If Range("C13").value <> "Make payments that need the hours or dollars allocated to a previous pay period (can be used for active employees)" Then
        Range("C13").value = "Make payments that need the hours or dollars allocated to a previous pay period (can be used for active employees)"
    End If
    
    If Range("C14").value <> "Pay out employee Death benefits" Then
        Range("C14").value = "Pay out employee Death benefits"
    End If
    
    If Range("C15").value <> "Modify the employees 'Year to Dates' (Does not pay out to employee)" Then
        Range("C15").value = "Modify the employees 'Year to Dates' (Does not pay out to employee)"
    End If
    
    If Range("C16").value <> "Assign, modify or remove an employees reoccuring earnings and/or deductions" Then
        Range("C16").value = "Assign, modify or remove an employees reoccuring earnings and/or deductions"
    End If
   
End Sub


Attribute VB_Name = "UserGuidePage"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Implements IAutoformSheet

Attribute VB_Name = "frmAdminTool"
Attribute VB_Base = "0{E973341D-E1C5-4011-88D9-3958408EE95C}{992D8D68-E679-4F7E-85A8-D0E196DD3805}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Private Sub cmdEmpID_Click()

    Application.ScreenUpdating = False
     
    If Me.empID.value = "Unhidden" Then
        Sheets("Transfers").Columns("Q:Q").Hidden = True
        Me.empID.value = "Hidden"
        Me.cmdEmpID.Caption = "Unhide New EE ID"
        MsgBox "The ""New Employee Id"" field in the Transfers page has been hidden", vbInformation
    ElseIf Me.empID.value = "Hidden" Then
        Sheets("Transfers").Columns("Q:Q").Hidden = False
        Me.empID.value = "Unhidden"
        Me.cmdEmpID.Caption = "Hide New EE ID"
        MsgBox "The ""New Employee Id"" field in the Transfers page has been unhidden", vbInformation
    End If
    Application.ScreenUpdating = True

End Sub

Private Sub cmdGetFileLocation_Click()
    Dim fldr As FileDialog
    Dim FolderPath As String
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        If .Show() <> -1 Then Exit Sub
        FolderPath = .SelectedItems(1)
        Me.txtLoadLocation.value = FolderPath
    End With
End Sub

Private Sub cmdLoadAutoform_Click()
    Application.ScreenUpdating = False
    Call LoadAutoform
End Sub

Private Sub cmdMarketSwitch_Click()

    Application.ScreenUpdating = False
    
    VersionNum = Trim(Left(Sheets("CL0-Cover Sheet").Range("L45").value, Len(Sheets("CL0-Cover Sheet").Range("L45").value)))
  
    If Me.MarketSeg.value = "Unhidden" Then
        Call SBSmode
        Me.MarketSeg.value = "Hidden"
        Me.cmdMarketSwitch.Caption = "Unhide Cost Centers"
        MsgBox "All Cost Center and Override Cost Center columns have been hidden", vbInformation
        Sheets("New Hires Setup").Range("I1").value = VersionNum & "-S"
    Else
        Call MAJNATmode
        Me.MarketSeg.value = "Unhidden"
        Me.cmdMarketSwitch.Caption = "Hide Cost Centers"
        MsgBox "All Cost Center and Override Cost Center columns have been unhidden", vbInformation
        Sheets("New Hires Setup").Range("I1").value = VersionNum & "-M"
    End If
    Application.ScreenUpdating = True

End Sub

Public Sub cmdLoadProfile_Click()

    Dim FileName As String
    Dim oXL As Excel.Application
    Dim owb As Excel.Workbook
    Dim osheet As Excel.Worksheet
    Dim oRng As Excel.Range
    Dim csvFile() As String
    Dim DataConnection As String
    
    Application.DisplayAlerts = False

    FileName = Me.txtLoadLocation.value & "\Company Profile.xls"
    
    If FileName = "False" Then
        'MsgBox "Please select the Employee Master data file", vbInformation, "COS Input"
        Exit Sub
    End If
'        Me.txtDataConnectionDir = FileName
    Set oXL = CreateObject("Excel.Application")
    Set owb = Workbooks.Open(FileName)
    Set osheet = owb.Sheets(1)
    oXL.Visible = False
    
    CoCode = Mid(osheet.Range("H2").value, 7, 4)
    
    If CoCode = "" Then
        CoCode = Left(sFound, 4)
    End If
    On Error Resume Next
    CoName = Right(osheet.Range("H2").value, Len(osheet.Range("H2").value) - 11)
    
    If err.Number <> 0 Then
        CoName = ""
    End If

    
    Application.EnableEvents = False
    
    Sheet1.Range("G10").value = CoCode
    Sheet1.Range("G11").value = CoName
    osheet.Range("A1:A4").EntireRow.Delete
    osheet.Range("A2").EntireRow.Delete
    
    osheet.Columns("S").Replace _
        what:="Terminated", Replacement:="T - Terminated", SearchOrder:=xlByColumns, MatchCase:=True
    osheet.Columns("S").Replace _
        what:="Inactive", Replacement:="I - Inactive", SearchOrder:=xlByColumns, MatchCase:=True
    osheet.Columns("S").Replace _
        what:="Active", Replacement:="A - Active", SearchOrder:=xlByColumns, MatchCase:=True
        
    csvFile = Split(FileName, ".")
    FileName = csvFile(0)
    osheet.SaveAs FileName:=FileName, FileFormat:=xlCSV, CreateBackup:=False
    owb.Close
    
    Application.EnableEvents = True
    
    Call AutoLoad_GetCsv("MASTER setup", FileName & ".csv", "")
    empCode.value = Worksheets("CL0-Cover Sheet").Range("G10").value
    
    Worksheets("CL0-Cover Sheet").Activate

    
End Sub

Private Sub cmdExit_Click()
    Unload Me
End Sub


Private Sub cmdExportDeselectAll_Click()
    For i = 0 To Me.lstExportWorksheet.ListCount - 1
        Me.lstExportWorksheet.Selected(i) = False
    Next
End Sub

Private Sub cmdExportSelectAll_Click()
    For i = 0 To Me.lstExportWorksheet.ListCount - 1
        Me.lstExportWorksheet.Selected(i) = True
    Next
End Sub

Private Sub cmdFldrDOF_Click()
    Dim fldr As FileDialog
    Dim FolderPath As String
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        If .Show() <> -1 Then Exit Sub
        FolderPath = .SelectedItems(1)
        Me.txtSecurityPWDir.value = FolderPath
    End With
End Sub

Private Sub cmdFldrSTD_Click()
    Dim fldr As FileDialog
    Dim FolderPath As String
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        If .Show() <> -1 Then Exit Sub
        FolderPath = .SelectedItems(1)
        Me.txtExportDirectory.value = FolderPath
    End With
End Sub

Private Sub cmdInjectDeselectAll_Click()
    For i = 0 To Me.lstInjectWorksheets.ListCount - 1
        Me.lstInjectWorksheets.Selected(i) = False
    Next
End Sub

Private Sub cmdInjectSelectAll_Click()
    For i = 0 To Me.lstInjectWorksheets.ListCount - 1
        Me.lstInjectWorksheets.Selected(i) = True
    Next
End Sub

Private Sub cmdSecurityApplyRules_Click()

    If Dir(Me.txtCreateFileDirectory.value & "\ADP_EXCEL_CREDENTIALS.txt", vbDirectory) = "" Then
        MsgBox "File in: " & Me.txtCreateFileDirectory.value & "\ADP_EXCEL_CREDENTIALS.txt" & " does not exist"
        Exit Sub
    End If
    Dim pwFile As String
    Dim wbPass As String
    Dim wspass As String
    Dim protectParameters() As Boolean
    Dim i As Integer
    i = 0
    pwFile = txtSecurityPWDir.value & "\ADP_EXCEL_CREDENTIALS.txt"

    ' Obtain Password for Workbook and Worksheet
    Open pwFile For Input As #1
    Do Until EOF(1)
        Line Input #1, Text
        Select Case i
            Case 0
                wbPass = Text
            Case i
                wspass = Text
        End Select
        i = i + 1
    Loop
    Close #1

   HideWorksheets ("HIDE")
   'Checks to see which sheets are hidden and hides the corresponding buttons associated with those sheets (Does NOT apply to cover sheet)
   Call CheckSheets
   'Moves all visible buttons to eliminate empty spaces
'   Call ChangeShapes2
'   'Does the same as CheckSheets but specifically for the cover sheet
   Call CheckCover
   'Does the same as MoveButtons but specifically for the cover sheet
   Call ChangeShapes2
    
    
End Sub
Private Sub ProtectWorksheets(boolLock As Boolean, ParaList() As Boolean, wspass As String, rowStart As String, rowEnd As String)
    Dim ws As Worksheet
    Dim configSheet As Worksheet
    
    For i = 0 To Me.lstSecurityWorksheets.ListCount - 1
'        If Me.lstSecurityWorksheets.Selected(i) = True Then
            For Each ws In ActiveWorkbook.Worksheets
                If ws.Name = Me.lstSecurityWorksheets.List(i) Then
'                    If boolLock = False Then
                    If Me.Locked.value = "Locked" Then
                        ws.Unprotect Password:=wspass
                    Else
                        ws.Activate
                        ws.Unprotect Password:=wspass
                        ws.Cells.Select
                        Selection.Locked = False
                        ws.Rows(rowStart & ":" & rowEnd).Select
                        Selection.Locked = True
                        ws.Range("A:A").Select
                        Selection.Locked = True
                        If ParaList(0) = True Then
                            ws.EnableSelection = xlUnlockedCells
                            ws.EnableSelection = xlNoRestrictions
                        End If
                        
                        If ws.Name = "Current Pay Hours" Then
                            ws.Unprotect Password:="11"
                            ws.Range("B:B").Locked = False
                            ws.Range("C:C").Locked = False
                        ElseIf ws.Name = "Current Pay Hours TS" Then
                            ws.Unprotect Password:="11"
                            ws.Range("B:B").Locked = False
                            ws.Range("C:C").Locked = False
                        End If
                        
                        ws.Protect Password:=wspass, _
                            DrawingObjects:=ParaList(1), _
                            UserInterfaceOnly:=ParaList(4), _
                            AllowFormattingCells:=ParaList(5), _
                            AllowFormattingColumns:=ParaList(6), _
                            AllowFormattingRows:=ParaList(7), _
                            AllowInsertingColumns:=ParaList(8), _
                            AllowInsertingRows:=ParaList(9), _
                            AllowInsertingHyperlinks:=ParaList(10), _
                            AllowDeletingColumns:=ParaList(11), _
                            AllowDeletingRows:=ParaList(12), _
                            AllowSorting:=ParaList(13), _
                            AllowFiltering:=ParaList(14), _
                            AllowUsingPivotTables:=ParaList(15)
                            
                    End If
                End If
            Next
'        End If
    Next
    

    
    ThisWorkbook.Worksheets("CL0-Cover Sheet").Activate
    Range("G10").Select
End Sub
Private Sub HideWorksheets(HideUnhide As String)
    Dim ws As Worksheet
    Dim configSheet As Worksheet
    
    If ActiveWorkbook.ProtectStructure Or ActiveWorkbook.ProtectWindows Then
        MsgBox "Please unlock the workbook in order to enable/disable pages", vbCritical, "Workbook Setup"
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    
    For i = 0 To Me.lstSecurityWorksheets.ListCount - 1

        If Me.lstSecurityWorksheets.Selected(i) = True Then
            For Each ws In ActiveWorkbook.Worksheets
                If ws.Name = Me.lstSecurityWorksheets.List(i) Then
                    ws.Visible = xlSheetVisible
                End If
            Next
        ElseIf Me.lstSecurityWorksheets.Selected(i) = False Then
            For Each ws In ActiveWorkbook.Worksheets
                If ws.Name = Me.lstSecurityWorksheets.List(i) Then
                    ws.Visible = xlSheetVeryHidden
                End If
            Next
        End If
    Next
    

    
    ThisWorkbook.Worksheets("CL0-Cover Sheet").Activate
    Range("G10").Select
    MsgBox ("Workbook setup saved")
    
End Sub
Private Function ProtectParaList()
    Dim boolProtectParameters(15) As Boolean
    
    For i = 0 To Me.lstProtectArguments.ListCount - 1
        If Me.lstProtectArguments.Selected(i) = True Then
            boolProtectParameters(i) = True
        Else
            boolProtectParameters(i) = False
        End If
    Next
    
    ProtectParaList = boolProtectParameters
End Function

Private Sub cmdSecurityDeselectAll_Click()
    For i = 0 To Me.lstExportWorksheet.ListCount - 1
        Me.lstSecurityWorksheets.Selected(i) = False
    Next
End Sub

Private Sub cmdSecuritySelectAll_Click()
    For i = 0 To Me.lstExportWorksheet.ListCount - 1
        Me.lstSecurityWorksheets.Selected(i) = True
    Next
End Sub



Public Sub cmdLoadXlsENDN_Click()
            
    Dim FileName As String
    Dim oXL As Excel.Application
    Dim owb As Excel.Workbook
    Dim osheet As Excel.Worksheet
    Dim oRng As Excel.Range
    Dim csvFile() As String
    Dim DataConnection As String
    
    Application.DisplayAlerts = False

    FileName = Me.txtLoadLocation.value & "\Company ENDN.xls"

   
    If FileName = "False" Then
'   MsgBox "Please select the Employee Master data file", vbInformation, "COS Input"
        Exit Sub
    End If
'   Me.txtDataConnectionDir = FileName
    Set oXL = CreateObject("Excel.Application")
    Set owb = Workbooks.Open(FileName)
    Set osheet = owb.Sheets(1)
    oXL.Visible = False
    CoCode = osheet.Range("A2").value
    
    If CoCode = "" Then
        CoCode = Left(sFound, 4)
    End If
    
    Application.EnableEvents = False

    csvFile = Split(FileName, ".")
    FileName = csvFile(0)
    osheet.SaveAs FileName:=FileName, FileFormat:=xlCSV, CreateBackup:=False
    owb.Close


    Call AutoLoad_GetCsv("EARNING setup", FileName & ".csv", "Earnings")
    ThisWorkbook.Worksheets("EARNING setup").Activate
    ThisWorkbook.Worksheets("EARNING setup").Columns("A:G").Sort Key1:=Range("G:G"), Order1:=xlAscending, header:=xlYes
    endnCode.value = Worksheets("EARNING setup").Range("A2").value

   
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Call LockUnlockTS_Click
    Call LoadEarns
    Call LockUnlockTS_Click
    Application.EnableEvents = True

    Worksheets("CL0-Cover Sheet").Activate
    
End Sub

Private Sub CommandButton2_Click()
    Dim fldr As FileDialog
    Dim FolderPath As String
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        If .Show() <> -1 Then Exit Sub
        FolderPath = .SelectedItems(1)
        Me.txtCreateFileDirectory.value = FolderPath
    End With
End Sub

Public Sub cmdLoadXlsEO_Click()
       
    Dim FileName As String
    Dim oXL As Excel.Application
    Dim owb As Excel.Workbook
    Dim osheet As Excel.Worksheet
    Dim oRng As Excel.Range
    Dim csvFile() As String
    Dim DataConnection As String
    
    Application.DisplayAlerts = False

    FileName = Me.txtLoadLocation.value & "\Company EO.xls"
   
    If FileName = "False" Then
        'MsgBox "Please select the Employee Master data file", vbInformation, "COS Input"
        Exit Sub
    End If
'   Me.txtDataConnectionDir = FileName
    Set oXL = CreateObject("Excel.Application")
    Set owb = Workbooks.Open(FileName)
    Set osheet = owb.Sheets(1)
    oXL.Visible = False
    CoCode = osheet.Range("A2").value
    
    If CoCode = "" Then
        CoCode = Left(sFound, 4)
    End If
    
    Application.EnableEvents = False

    csvFile = Split(FileName, ".")
    FileName = csvFile(0)
    osheet.SaveAs FileName:=FileName, FileFormat:=xlCSV, CreateBackup:=False
    owb.Close
    
    Call AutoLoad_GetCsv("EMPLOYEE OPTIONS DATA setup", FileName & ".csv", "EmpOptions")
    Call CreateEmployeeOptions
    
    eoCode.value = Worksheets("EMPLOYEE OPTIONS DATA setup").Range("A2").value

    Application.EnableEvents = False
    Call OptionsIndexAutofill
    
    Call LockUnlockOptions_Click
    Call Robot_SetupEmployeeOptions
    Call LockUnlockOptions_Click
    
    Application.EnableEvents = True
    
    Worksheets("CL0-Cover Sheet").Activate
    
End Sub

Private Sub LockUnlock_Click()
    Dim pwFile As String
    Dim wbPass As String
    Dim wspass As String
    Dim protectParameters() As Boolean
    Dim i As Integer
    
   
    i = 0
    pwFile = txtSecurityPWDir.value & "\ADP_EXCEL_CREDENTIALS.txt"
    
    If Dir(pwFile) = "" Then
        MsgBox "Password File was not found at the specified directory", vbCritical, "Password File"
        Exit Sub
    End If

    Application.ScreenUpdating = False
    
    ' Obtain Password for Workbook and Worksheet
    Open pwFile For Input As #1
    Do Until EOF(1)
        Line Input #1, Text
        Select Case i
            Case 0
                wbPass = Text
            Case i
                wspass = Text
        End Select
        i = i + 1
    Loop
    Close #1
    
    protectParameters = ProtectParaList
  
    If Me.Locked.value = "Unlocked" Then
        HideUnhideAdmin ("HIDE")
        Call ProtectWorksheets(True, protectParameters, wspass, Me.txtSecurityRowStart.value, Me.txtSecurityRowEnd.value)
        ActiveWorkbook.Protect Password:=wbPass, structure:=True, Windows:=False
        Me.Locked.value = "Locked"
        Me.LockUnlock.Caption = "Unlock Workbook"
        MsgBox "Autoform workbook is now locked"
    Else
        ActiveWorkbook.Unprotect Password:=wbPass
        Call ProtectWorksheets(False, protectParameters, wspass, Me.txtSecurityRowStart.value, Me.txtSecurityRowEnd.value)
        HideUnhideAdmin ("UNHIDE")
        Me.Locked.value = "Unlocked"
        Me.LockUnlock.Caption = "Lock Workbook"
        MsgBox "Autoform workbook is now unlocked"
    End If
    
    Sheets("Current Pay Hours Overrides").Unprotect "11"
    
    
    Range("G10").Select
    'Application.ScreenUpdating = True
End Sub


Private Sub txtCreateFileDirectory_Change()
    Me.txtSecurityPWDir = Me.txtCreateFileDirectory
End Sub

Private Sub UserForm_Activate()
    With frmAdminTool
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
    End With

End Sub

Private Sub UserForm_Initialize()
    Me.txtCreateFileDirectory.value = Application.ActiveWorkbook.Path
    Me.txtSecurityPWDir.value = Application.ActiveWorkbook.Path
    
    Me.txtLoadLocation.value = ThisWorkbook.Path
    
    Me.txtExportDirectory.value = Application.ActiveWorkbook.Path
    AddProtectParaToLst Me.lstProtectArguments
    
    For Each ws In Worksheets
        If (InStr(UCase(ws.Name), UCase("setup")) = 0 And UCase(ws.Name) <> UCase("User Guide")) Then
            Me.lstExportWorksheet.AddItem ws.Name
            Me.lstSecurityWorksheets.AddItem ws.Name
            Me.lstInjectWorksheets.AddItem ws.Name
          '  Me.lstProtectArguments.AddItem ws.Name
        End If
    Next
    
    If ActiveWorkbook.ProtectStructure Or ActiveWorkbook.ProtectWindows Then
        Me.Locked.value = "Locked"
        Me.LockUnlock.Caption = "Unlock Workbook"
    Else
        Me.Locked.value = "Unlocked"
        Me.LockUnlock.Caption = "Lock Workbook"
    End If
    
    For i = 0 To Me.lstSecurityWorksheets.ListCount - 1
        For Each ws In ActiveWorkbook.Worksheets
            If ws.Name = Me.lstSecurityWorksheets.List(i) Then
                If ws.Visible = xlSheetVisible Then
                    Me.lstSecurityWorksheets.Selected(i) = True
                Else
                    Me.lstSecurityWorksheets.Selected(i) = False
                End If
            End If
        Next
    Next
    empCode.value = Worksheets("CL0-Cover Sheet").Range("G10").value
    endnCode.value = Worksheets("EARNING setup").Range("A2").value
    eoCode.value = Worksheets("EMPLOYEE OPTIONS DATA setup").Range("A2").value
    
    If Right(Sheets("New Hires Setup").Range("I1").value, 2) = "-M" Then
        Me.MarketSeg.value = "Unhidden"
        Me.cmdMarketSwitch.Caption = "Hide Cost Centers"
    ElseIf Right(Sheets("New Hires Setup").Range("I1").value, 2) = "-S" Then
        Me.MarketSeg.value = "Hidden"
        Me.cmdMarketSwitch.Caption = "Unhide Cost Centers"
    End If
    
    If Sheets("Transfers").Columns("Q:Q").Hidden = True Then
        Me.empID.value = "Hidden"
        Me.cmdEmpID.Caption = "Unhide New EE ID"
    ElseIf Sheets("Transfers").Columns("Q:Q").Hidden = False Then
        Me.empID.value = "Unhidden"
        Me.cmdEmpID.Caption = "Hide New EE ID"
    End If
    
End Sub

Private Sub AddProtectParaToLst(lst As MSForms.ListBox)
    ' sheet.enableselection = xlnorestrictions
    With lst
        .AddItem "EnableSelection"
        .Selected(0) = True
        .AddItem "DrawingObjects"
        .AddItem "Contents"
        .AddItem "Scenarios"
        .AddItem "UserInterfaceOnly"
        .Selected(4) = True
        .AddItem "AllowFormattingCells"
        .Selected(5) = True
        .AddItem "AllowFormattingColumns"
        .Selected(6) = True
        .AddItem "AllowFormattingRows"
        .Selected(7) = True
        .AddItem "AllowInsertingColumns"
        .AddItem "AllowInsertingRows"
        .AddItem "AllowInsertingHyperlinks"
        .AddItem "AllowDeletingColumns"
        .AddItem "AllowDeletingRows"
        .AddItem "AllowSorting"
        .AddItem "AllowFiltering"
        .AddItem "AllowUsingPivotTables"
    End With
    
End Sub

Public Sub protectTimeSheet(boolLock As Boolean, ParaList() As Boolean, rowStart As String, rowEnd As String)
    Dim ws As Worksheet
    
    Set ws = Sheets("Current Pay Hours TS")
    
    If Me.Locked.value = "Locked" Then
        ws.Unprotect Password:="11"
    Else
        ws.Activate
        ws.Unprotect Password:="11"
        ws.Cells.Select
        Selection.Locked = False
        ws.Rows(rowStart & ":" & rowEnd).Select
        Selection.Locked = True
        ws.Range("A:A").Select
        Selection.Locked = True
        If ParaList(0) = True Then
            ws.EnableSelection = xlUnlockedCells
            ws.EnableSelection = xlNoRestrictions
        End If
               
        ws.Protect Password:="11", _
            DrawingObjects:=ParaList(1), _
            UserInterfaceOnly:=ParaList(4), _
            AllowFormattingCells:=ParaList(5), _
            AllowFormattingColumns:=ParaList(6), _
            AllowFormattingRows:=ParaList(7), _
            AllowInsertingColumns:=ParaList(8), _
            AllowInsertingRows:=ParaList(9), _
            AllowInsertingHyperlinks:=ParaList(10), _
            AllowDeletingColumns:=ParaList(11), _
            AllowDeletingRows:=ParaList(12), _
            AllowSorting:=ParaList(13), _
            AllowFiltering:=ParaList(14), _
            AllowUsingPivotTables:=ParaList(15)
    End If
     
    ThisWorkbook.Worksheets("CL0-Cover Sheet").Activate
    Range("G10").Select
End Sub

Private Sub protectOptions(boolLock As Boolean, ParaList() As Boolean, rowStart As String, rowEnd As String)
    Dim ws As Worksheet
    
    Set ws = Sheets("Employee Options")
    
    If Me.Locked.value = "Locked" Then
        ws.Unprotect Password:="11"
    Else
        ws.Activate
        ws.Unprotect Password:="11"
        ws.Cells.Select
        Selection.Locked = False
        ws.Rows(rowStart & ":" & rowEnd).Select
        Selection.Locked = True
        ws.Range("A:A").Select
        Selection.Locked = True
        If ParaList(0) = True Then
            ws.EnableSelection = xlUnlockedCells
            ws.EnableSelection = xlNoRestrictions
        End If
               
        ws.Protect Password:="11", _
            DrawingObjects:=ParaList(1), _
            UserInterfaceOnly:=ParaList(4), _
            AllowFormattingCells:=ParaList(5), _
            AllowFormattingColumns:=ParaList(6), _
            AllowFormattingRows:=ParaList(7), _
            AllowInsertingColumns:=ParaList(8), _
            AllowInsertingRows:=ParaList(9), _
            AllowInsertingHyperlinks:=ParaList(10), _
            AllowDeletingColumns:=ParaList(11), _
            AllowDeletingRows:=ParaList(12), _
            AllowSorting:=ParaList(13), _
            AllowFiltering:=ParaList(14), _
            AllowUsingPivotTables:=ParaList(15)
    End If
     
    ThisWorkbook.Worksheets("CL0-Cover Sheet").Activate
    Range("G10").Select
End Sub

Public Sub LockUnlockTS_Click()
    Dim protectParameters() As Boolean
    Dim i As Integer
    
   
    i = 0
    Application.ScreenUpdating = False

    
    protectParameters = ProtectParaList
  
    If Me.Locked.value = "Unlocked" Then
        Call protectTimeSheet(True, protectParameters, Me.txtSecurityRowStart.value, Me.txtSecurityRowEnd.value)
        ActiveWorkbook.Protect Password:="11", structure:=True, Windows:=False
        Me.Locked.value = "Locked"
    Else
        ActiveWorkbook.Unprotect Password:="11"
        Call protectTimeSheet(False, protectParameters, Me.txtSecurityRowStart.value, Me.txtSecurityRowEnd.value)
        Me.Locked.value = "Unlocked"
    End If
    
    Sheets("Current Pay Hours Overrides").Unprotect "11"
    
    
    Range("G10").Select
End Sub

Public Sub LockUnlockOptions_Click()
    Dim protectParameters() As Boolean
    Dim i As Integer
    
   
    i = 0
    Application.ScreenUpdating = False

    
    protectParameters = ProtectParaList
  
    If Me.Locked.value = "Unlocked" Then
        Call protectOptions(True, protectParameters, Me.txtSecurityRowStart.value, Me.txtSecurityRowEnd.value)
        ActiveWorkbook.Protect Password:="11", structure:=True, Windows:=False
        Me.Locked.value = "Locked"
    Else
        ActiveWorkbook.Unprotect Password:="11"
        Call protectOptions(False, protectParameters, Me.txtSecurityRowStart.value, Me.txtSecurityRowEnd.value)
        Me.Locked.value = "Unlocked"
    End If
    
    Sheets("Current Pay Hours Overrides").Unprotect "11"
    
    
    Range("G10").Select
End Sub


Attribute VB_Name = "frmDuplicateTransfer"
Attribute VB_Base = "0{8EB2CC51-13F2-480F-9E7D-37AC773936A0}{C6C51366-A7EE-41E1-82CB-AF22DB44708F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Call Ok_button_Click
    End If
End Sub

Private Sub Ok_button_Click()
    Me.Hide
End Sub

Private Sub UserForm_Activate()
    Me.StartUpPosition = 0
    Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
    Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)
End Sub

Public Sub PopulateSearchFields(Target As Range)
    branchText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 5)
    departmentText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 6)
    employeeIdText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 7)
    lastNameText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 8)
    firstNameText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 9)
End Sub
Attribute VB_Name = "frmENDNDropdown"
Attribute VB_Base = "0{95DEE77F-9A9C-4F80-B338-8647008F25AF}{F4CB8329-C04B-406E-9890-E5F070C33FEE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cbCancel_Click()
    frmENDNDropdown.tbSelection.value = ""
    Me.Hide

End Sub

Private Sub cbSelect_Click()
    
    If frmENDNDropdown.tbSelection.value = "" Then
        If Me.cbEarningsOnlyFlag = False Then
            MsgBox ("Please select either an earning or a deduction.")
        Else
            MsgBox ("Please select an earning.")
        End If
        Exit Sub
    Else
        Me.Hide
    End If
    
    
End Sub

Private Sub listboxDeductions_Click()
Dim clearlistbox As Long
    frmENDNDropdown.tbSelection = frmENDNDropdown.listboxDeductions.value
    For clearlistbox = 0 To frmENDNDropdown.listboxEarnings.ListCount - 1
        frmENDNDropdown.listboxEarnings.Selected(clearlistbox) = False
    Next
    
End Sub

Private Sub listboxEarnings_Click()
Dim clearlistbox As Long
    frmENDNDropdown.tbSelection = frmENDNDropdown.listboxEarnings.value
    For clearlistbox = 0 To frmENDNDropdown.listboxDeductions.ListCount - 1
        frmENDNDropdown.listboxDeductions.Selected(clearlistbox) = False
    Next
End Sub

Private Sub tbEntry_Change()
    UpdateENDNForm
End Sub

Private Sub UserForm_Activate()

    With frmENDNDropdown
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        .tbSelection = ""
        .tbEntry.SetFocus
    End With
    
UpdateENDNForm

    
End Sub
Attribute VB_Name = "frmEmpLoad"
Attribute VB_Base = "0{AA9F7C63-721D-45B4-8EDB-18F771FFF1B3}{B783039F-1B40-4059-BEA2-715032CC83E9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub cmdPopulate_Click()
    Dim boolItemSelected As Boolean
    Dim EmpListWS As Worksheet
    Dim lbtarget As MSForms.ListBox
    Dim Counter As Integer
    Dim CheckEmpty As Range
    
    Set EmpListWS = Sheets("Current Pay Hours TS")
    Set lbtarget = frmEmpLoad.lstData
    
    boolItemSelected = False
    
    Set CheckEmpty = Sheets("Current Pay Hours TS").Range("G:G")

'    Call InitializeDict

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    If Application.CountA(CheckEmpty) > 1 Then
        
        For x = 0 To Me.lstData.ListCount - 1
            If Me.lstData.Selected(x) Then
                boolItemSelected = True
            End If
            
        Next x
        
    
        If boolItemSelected = False Then
            MsgBox "Please select at least one employee.", vbInformation, "Employee List"
            Exit Sub
        End If
        
            
        answer = MsgBox("This will erase all data in the sheet and insert the employees that are selected." & _
        " Do you want to continue?", vbYesNo + vbQuestion, "Load Employees")
        
        If answer = vbYes Then
            
            Call Reset_Click_LoadEE
        
            rowNum = 4
            
            For i = 0 To Me.lstData.ListCount - 1
                If Me.lstData.Selected(i) Then
'                    Application.EnableEvents = False
                    EmpListWS.Range("E" & rowNum).value = lbtarget.List(i, 4)
                    EmpListWS.Range("F" & rowNum).value = lbtarget.List(i, 5)
                    EmpListWS.Range("G" & rowNum).value = lbtarget.List(i, 3)
                    EmpListWS.Range("H" & rowNum).value = lbtarget.List(i, 0)
                    EmpListWS.Range("I" & rowNum).value = lbtarget.List(i, 1)
                    EmpListWS.Range("J" & rowNum).value = lbtarget.List(i, 3) & "|" & lbtarget.List(i, 4) & "|" & lbtarget.List(i, 5)
'                    Application.EnableEvents = True
                    boolItemSelected = True
                    rowNum = rowNum + 1
                End If
                
            Next i
            
            ApplicationSettings.SaveOriginalAndShadowValues ApplicationSettings.activeSheetValues
            
        ElseIf answer = vbNo Then
            Exit Sub
            
        End If
        
    
        
        Sheets("Current Pay Hours Overrides").Cells.Clear
        
    Else
        
        Call Reset_Click_LoadEE
    
        rowNum = 4
        
        For i = 0 To Me.lstData.ListCount - 1
            If Me.lstData.Selected(i) Then
'                Application.EnableEvents = False
                EmpListWS.Range("E" & rowNum).value = lbtarget.List(i, 4)
                EmpListWS.Range("F" & rowNum).value = lbtarget.List(i, 5)
                EmpListWS.Range("G" & rowNum).value = lbtarget.List(i, 3)
                EmpListWS.Range("H" & rowNum).value = lbtarget.List(i, 0)
                EmpListWS.Range("I" & rowNum).value = lbtarget.List(i, 1)
                EmpListWS.Range("J" & rowNum).value = lbtarget.List(i, 3) & "|" & lbtarget.List(i, 4) & "|" & lbtarget.List(i, 5)
'                Application.EnableEvents = True
                boolItemSelected = True
                rowNum = rowNum + 1
            End If
            
        Next i
        
        ApplicationSettings.SaveOriginalAndShadowValues ApplicationSettings.activeSheetValues
        
        If boolItemSelected = False Then
            MsgBox "Please select at least one employee.", vbInformation, "Employee List"
            Exit Sub
        End If
        
    End If
    
    Application.EnableEvents = True
    Unload Me
End Sub



Private Sub cmdSelectActive_Click()

    Dim lbtarget As MSForms.ListBox
    
    Set lbtarget = frmEmpLoad.lstData
    
    For i = 0 To Me.lstData.ListCount - 1
        Me.lstData.Selected(i) = False
    Next i

    For i = 0 To Me.lstData.ListCount - 1
        If lbtarget.List(i, 7) = "A - Active" Then
            Me.lstData.Selected(i) = True
        End If
        
        'Counter = Counter + 1
    Next i

End Sub

Private Sub cmdSelectAll_Click()

    Dim lbtarget As MSForms.ListBox
    
    Set lbtarget = frmEmpLoad.lstData
    
    For i = 0 To Me.lstData.ListCount - 1
        Me.lstData.Selected(i) = False
    Next i

    For i = 0 To Me.lstData.ListCount - 1
        Me.lstData.Selected(i) = True
    Next i

End Sub

Private Sub UserForm_Activate()
    
    
    Dim EmpListWS As Worksheet
    Dim lastRow As Integer
    Dim lbtarget As MSForms.ListBox
    Dim Counter As Integer
    Set general = New general
    
    Set EmpListWS = Sheets("MASTER setup")
    Set lbtarget = frmEmpLoad.lstData
    
    With lbtarget
        'Determine number of columns
        .ColumnCount = 8
        'Set column widths
        .ColumnWidths = "70;60;45;72;43;66;0;50"
    End With
    
    lastRow = general.lastRow(EmpListWS)
    
    Counter = 0
    lbtarget.Clear
    
    For i = 2 To lastRow
        lbtarget.AddItem
        For j = 1 To 8
            lbtarget.List(Counter, j - 1) = EmpListWS.Range(general.NumToExcelLetter(j) & i).value
        Next j
        Counter = Counter + 1
    Next i
    
    
    
End Sub

'Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
'
'    If CloseMode = 0 Then
'        Cancel = True
'    End If
'
'End Sub



Attribute VB_Name = "frmEmployeeNotFound"
Attribute VB_Base = "0{4A71C96A-2FA6-4DC4-9EA1-4BF3B1DAE348}{29E5041A-E842-41FB-BC01-947E4127C4E1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Public skipped As Boolean
Public continue As Boolean
Public continueAll As Boolean
Public cancelled As Boolean
Private employeeDetails_() As Variant
Private lastRow As Boolean

Private Sub addEmployee_button_Click()
    frmMaintenance.addingMissingEmployee = True
    frmMaintenance.lastName = lastNameText_label.Caption
    frmMaintenance.firstName = firstNameText_label.Caption
    frmMaintenance.branch = branchText_label.Caption
    frmMaintenance.department = departmentText_label.Caption
    frmMaintenance.empID = employeeIdText_label.Caption
    frmMaintenance.Show
    
    frmMaintenance.addingMissingEmployee = False
    ResetSearchFieldFormatting
    Me.Hide
End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        Call cancel_button_Click
    End If
End Sub

Public Sub EmployeeUpdateCancelled()
    skipped = True
    ResetSearchFieldFormatting
End Sub

Public Sub UpdateEmployeeDetails(employeeDetails() As Variant)
    employeeDetails_ = employeeDetails
End Sub

Public Function GetEmployeeDetails() As Variant()
    GetEmployeeDetails = employeeDetails_
End Function

Private Sub cancel_button_Click()
    
    If Not lastRow Then
    
        answer = MsgBox("Would you like to perform this action for all remaining rows?", vbYesNo + vbQuestion, "Cancel Entry")
        
        
        
        If answer = vbYes Then
            cancelled = True
            ResetSearchFieldFormatting
            Me.Hide
        Else
            skipped = True
            ResetSearchFieldFormatting
            Me.Hide
        End If
        

        
    Else
        skipped = True
        ResetSearchFieldFormatting
        Me.Hide
    End If
    
End Sub

Private Sub continue_button_Click()
    
    If Not lastRow Then
    
        answer = MsgBox("Would you like to perform this action for all remaining rows?", vbYesNo + vbQuestion, "Add Employees")
        
        If answer = vbYes Then
            continue = True
            continueAll = True
            ResetSearchFieldFormatting
            Me.Hide
        Else
            continue = True
            ResetSearchFieldFormatting
            Me.Hide
        End If
        
    Else
        continue = True
        ResetSearchFieldFormatting
        Me.Hide
    End If
    
End Sub

Private Sub UserForm_Activate()
    If ThisWorkbook.activeSheet.Name = "Employee Info Changes" Or ThisWorkbook.activeSheet.Name = "Transfers" Or ThisWorkbook.activeSheet.Name = "Salary Changes" Or ThisWorkbook.activeSheet.Name = "Status Changes" Then
        Me.continue_button.Visible = False
'        Me.continueAll_button.Visible = False
    Else
        Me.continue_button.Visible = True
'        Me.continueAll_button.Visible = True
    End If
    
    Me.StartUpPosition = 0
    Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
    Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)

    cancelled = False
    continueAll = False
    continue = False
    skipped = False
    Erase employeeDetails_
End Sub

Public Sub PopulateSearchFields(Target As Range)
    branchText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 5)
    departmentText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 6)
    employeeIdText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 7)
    lastNameText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 8)
    firstNameText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 9)
    
End Sub

Public Sub PopulateSearchFields_QF(Target As Range)
    branchText_label.Caption = frmUserEntry.txtBranch
    departmentText_label.Caption = frmUserEntry.txtDept
    employeeIdText_label.Caption = frmUserEntry.txtEmpID
    lastNameText_label.Caption = frmUserEntry.txtLName
    firstNameText_label.Caption = frmUserEntry.txtFname
End Sub

Public Sub FormatSearchFields(searchPos As Long)
    Select Case searchPos
        Case 1
            lastNameText_label.ForeColor = &HC0&
            lastNameText_label.Font.Bold = True
        Case 2
            firstNameText_label.ForeColor = &HC0&
            firstNameText_label.Font.Bold = True
        Case 4
            employeeIdText_label.ForeColor = &HC0&
            employeeIdText_label.Font.Bold = True
    End Select
End Sub

Private Sub ResetSearchFieldFormatting()
    employeeIdText_label.Font.Bold = False
    employeeIdText_label.ForeColor = &H80000012
    lastNameText_label.Font.Bold = False
    lastNameText_label.ForeColor = &H80000012
    firstNameText_label.Font.Bold = False
    firstNameText_label.ForeColor = &H80000012
End Sub

Public Sub isLastRow(currRow As Long, rowCount As Long)

    If currRow = rowCount Then
        lastRow = True
    Else
        lastRow = False
    End If

End Sub
Attribute VB_Name = "frmEmployeeOptionsTool"
Attribute VB_Base = "0{052106B5-6949-4250-9C30-AE95699AE910}{434C7B07-8425-44F1-8D87-B46DD5C7FD1B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub cmdAdd_Click()
    Dim i As Integer
    
    For i = Me.lstOptionsToShow.ListCount - 1 To 0 Step -1
        If (Me.lstOptionsToShow.Selected(i) = True) Then
            Me.lstOptionsToHide.AddItem Me.lstOptionsToShow.List(i)
            Me.lstOptionsToShow.RemoveItem i
        End If
    Next i
    
    'Sorts ListBox List
     Dim x As Long
     Dim j As Long
     Dim temp As Variant
         
     With Me.lstOptionsToHide
         For j = 0 To lstOptionsToHide.ListCount - 2
             For x = 0 To lstOptionsToHide.ListCount - 2
                If lstOptionsToHide.ListCount < 2 Then Exit Sub
                 If UCase(.List(x)) > UCase(.List(x + 1)) Then
                     temp = .List(x)
                     .List(x) = .List(x + 1)
                     .List(x + 1) = temp
                 End If
             Next x
         Next j
     End With
    
End Sub

Public Sub cmdAddAll_Click()
    Dim i As Integer
    
    For i = 0 To Me.lstOptionsToShow.ListCount - 1
        Me.lstOptionsToHide.AddItem Me.lstOptionsToShow.List(i)
    Next i
    
    'Sorts ListBox List
    Dim x As Long
    Dim j As Long
    Dim temp As Variant

    With Me.lstOptionsToHide
        For j = 0 To lstOptionsToHide.ListCount - 2
            For x = 0 To lstOptionsToHide.ListCount - 2
               If lstOptionsToHide.ListCount < 2 Then Exit Sub
                If UCase(.List(x)) > UCase(.List(x + 1)) Then
                    temp = .List(x)
                    .List(x) = .List(x + 1)
                    .List(x + 1) = temp
                End If
            Next x
        Next j
    End With
    
    Me.lstOptionsToShow.Clear
End Sub

Private Sub cmdExit_Click()
    Unload Me
End Sub

Private Sub cmdRemove_Click()
    Dim i As Integer
    
    For i = Me.lstOptionsToHide.ListCount - 1 To 0 Step -1
        If (Me.lstOptionsToHide.Selected(i) = True) Then
            Me.lstOptionsToShow.AddItem Me.lstOptionsToHide.List(i)
            Me.lstOptionsToHide.RemoveItem i
        End If
    Next i
    
    'Sorts ListBox List
    Dim x As Long
    Dim j As Long
    Dim temp As Variant
    
    With Me.lstOptionsToShow
        For j = 0 To lstOptionsToShow.ListCount - 2
            For x = 0 To lstOptionsToShow.ListCount - 2
               If lstOptionsToShow.ListCount < 2 Then Exit Sub
                If UCase(.List(x)) > UCase(.List(x + 1)) Then
                    temp = .List(x)
                    .List(x) = .List(x + 1)
                    .List(x + 1) = temp
                End If
            Next x
        Next j
    End With
    
End Sub

Private Sub cmdRemoveAll_Click()
    For i = 0 To Me.lstOptionsToHide.ListCount - 1
        Me.lstOptionsToShow.AddItem Me.lstOptionsToHide.List(i)
    Next i
    
    'Sorts ListBox List
    Dim x As Long
    Dim j As Long
    Dim temp As Variant
    
    With Me.lstOptionsToShow
        For j = 0 To lstOptionsToShow.ListCount - 2
            For x = 0 To lstOptionsToShow.ListCount - 2
               If lstOptionsToShow.ListCount < 2 Then Exit Sub
                If UCase(.List(x)) > UCase(.List(x + 1)) Then
                    temp = .List(x)
                    .List(x) = .List(x + 1)
                    .List(x + 1) = temp
                End If
            Next x
        Next j
    End With
    
    Me.lstOptionsToHide.Clear
End Sub

Public Sub cmdSubmit_Click()
    Dim lastheadercolumn
    Dim header
    Set general = New general
    Dim i As Integer
    Dim eoworksheet As Worksheet
    
    Set eoworksheet = ActiveWorkbook.Sheets("Employee Options")
    lastheadercolumn = general.lastColumn(eoworksheet)
    
    With Sheets("Employee Options")
        LastEmp = .Cells(.Rows.Count, "G").End(xlUp).row
    End With
    
    Set CheckRange = Sheets("Employee Options").Range("K4:LU" & LastEmp)
    
    If LastEmp > 3 Then
    
        If Application.CountA(CheckRange) > 0 Then
        
            ClearEarning = MsgBox("By hiding any of the option columns, all values within those columns will be cleared." & _
                                  " Would you like to proceed?", vbYesNo + vbExclamation, "Employee Options")
                                                    
            If ClearEarning = vbYes Then
            
                For i = 0 To Me.lstOptionsToHide.ListCount - 1
                
                    For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
                        If (header.value = Me.lstOptionsToHide.List(i)) Then
                                         
                                With Sheets("Employee Options")
                                    lastRow = .Cells(.Rows.Count, "G").End(xlUp).row
                                End With
                                
                                If Application.CountA(eoworksheet.Columns(general.NumToExcelLetter(header.Column))) > 1 Then
                                    'eoworksheet.Range(general.NumToExcelLetter(header.Column) & "4:" & general.NumToExcelLetter(header.Column) & LastRow).ClearContents
                                    
                                    For ColVal = 4 To lastRow Step 1
                                        eoworksheet.Range(general.NumToExcelLetter(header.Column) & ColVal).ClearContents
                                    Next ColVal
                                    
                                        
                                End If
                                
                                eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = True
                               
                        End If
                    Next header
                Next i
                
                For i = 0 To Me.lstOptionsToShow.ListCount - 1
                    For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
                        If (header.value = Me.lstOptionsToShow.List(i)) Then
                            eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = False
                        End If
                    Next header
                Next i
                
            Else
                Unload Me
            End If
        Else
        
            For i = 0 To Me.lstOptionsToHide.ListCount - 1
            
                For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
                    If (header.value = Me.lstOptionsToHide.List(i)) Then
                                     
                            With Sheets("Employee Options")
                                lastRow = .Cells(.Rows.Count, "G").End(xlUp).row
                            End With
                            
                            If Application.CountA(eoworksheet.Columns(general.NumToExcelLetter(header.Column))) > 1 Then
                                eoworksheet.Range(general.NumToExcelLetter(header.Column) & "4:" & general.NumToExcelLetter(header.Column) & lastRow).ClearContents
                            End If
                            
                            eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = True
                           
                    End If
                Next header
            Next i
            
            For i = 0 To Me.lstOptionsToShow.ListCount - 1
                For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
                    If (header.value = Me.lstOptionsToShow.List(i)) Then
                        eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = False
                    End If
                Next header
            Next i
        End If
        
    Else
    
    
            For i = 0 To Me.lstOptionsToHide.ListCount - 1
            
                For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
                    If (header.value = Me.lstOptionsToHide.List(i)) Then
                                     
                            With Sheets("Employee Options")
                                lastRow = .Cells(.Rows.Count, "G").End(xlUp).row + 1
                            End With
                            
                            If Application.CountA(eoworksheet.Columns(general.NumToExcelLetter(header.Column))) > 1 Then
                                eoworksheet.Range(general.NumToExcelLetter(header.Column) & "4:" & general.NumToExcelLetter(header.Column) & lastRow + 1).ClearContents
                            End If
                            
                            eoworksheet.Range(general.NumToExcelLetter(header.Column) & lastRow).ClearContents
                            
                            eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = True
                           
                    End If
                Next header
            Next i
            
            For i = 0 To Me.lstOptionsToShow.ListCount - 1
                For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
                    If (header.value = Me.lstOptionsToShow.List(i)) Then
                        eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = False
                    End If
                Next header
            Next i
    End If
    
    ActiveWindow.ScrollRow = 1
    eoworksheet.Activate
    Range("E4").Select
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    
    Set general = New general
    Dim lastheadercolumn
    
    Dim eoworksheet As Worksheet
    If (general.SheetExists("Employee Options") = False) Then
        MsgBox ("Missing 'Employee Options' tab")
        Unload Me
    End If
    
    Set eoworksheet = ActiveWorkbook.Sheets("Employee Options")

    
    lastheadercolumn = general.lastColumn(eoworksheet)
    
    For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
        If (eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = True) Then
            Me.lstOptionsToHide.AddItem (header.value)
        Else
            Me.lstOptionsToShow.AddItem (header.value)
        End If
    Next header
    
    With Me.lstOptionsToHide
        For j = 0 To lstOptionsToHide.ListCount - 2
            For x = 0 To lstOptionsToHide.ListCount - 2
               If lstOptionsToHide.ListCount < 2 Then Exit Sub
                If UCase(.List(x)) > UCase(.List(x + 1)) Then
                    temp = .List(x)
                    .List(x) = .List(x + 1)
                    .List(x + 1) = temp
                End If
            Next x
        Next j
    End With

    With Me.lstOptionsToShow
        For j = 0 To lstOptionsToShow.ListCount - 2
            For x = 0 To lstOptionsToShow.ListCount - 2
               If lstOptionsToShow.ListCount < 2 Then Exit Sub
                If UCase(.List(x)) > UCase(.List(x + 1)) Then
                    temp = .List(x)
                    .List(x) = .List(x + 1)
                    .List(x + 1) = temp
                End If
            Next x
        Next j
    End With

End Sub

Private Function StrInLst(checkVal, inLst)
    Dim i As Integer
    
    'MsgBox checkVal
    For i = 0 To inLst.ListCount - 1
        If inLst.List(i) = checkVal Then
            StrInLst = True
            Exit Function
        End If
    Next i
    StrInLst = False
End Function
Attribute VB_Name = "frmHorizontalHours"
Attribute VB_Base = "0{A2DCC3B9-6BA9-4290-83B3-8FED46CAD49B}{C97C34B3-AE8B-4103-9631-381806E5DCC2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Private Sub cmdAdd_Click()
    Dim i As Integer
    
    For i = Me.lstEarningsToShow.ListCount - 1 To 0 Step -1
        If (Me.lstEarningsToShow.Selected(i) = True) Then
            Me.lstEarningsToHide.AddItem Me.lstEarningsToShow.List(i)
            Me.lstEarningsToShow.RemoveItem i
        End If
    Next i
    
    'Sorts ListBox List
    Dim x As Long
    Dim j As Long
    Dim temp As Variant
    
    With Me.lstEarningsToHide
        For j = 0 To lstEarningsToHide.ListCount - 2
            For x = 0 To lstEarningsToHide.ListCount - 2
               If lstEarningsToHide.ListCount < 2 Then Exit Sub
                If .List(x) > .List(x + 1) Then
                    temp = .List(x)
                    .List(x) = .List(x + 1)
                    .List(x + 1) = temp
                End If
            Next x
        Next j
    End With
    
End Sub

Public Sub cmdAddAll_Click()
    Dim i As Integer
    
    For i = 0 To Me.lstEarningsToShow.ListCount - 1
        Me.lstEarningsToHide.AddItem Me.lstEarningsToShow.List(i)
    Next i
    
    'Sorts ListBox List
    Dim x As Long
    Dim j As Long
    Dim temp As Variant
    
    With Me.lstEarningsToHide
        For j = 0 To lstEarningsToHide.ListCount - 2
            For x = 0 To lstEarningsToHide.ListCount - 2
               If lstEarningsToHide.ListCount < 2 Then Exit Sub
                If .List(x) > .List(x + 1) Then
                    temp = .List(x)
                    .List(x) = .List(x + 1)
                    .List(x + 1) = temp
                End If
            Next x
        Next j
    End With
    
    Me.lstEarningsToShow.Clear
End Sub

Private Sub cmdExit_Click()
    Unload Me
End Sub

Private Sub cmdRemove_Click()
    Dim i As Integer
    
    For i = Me.lstEarningsToHide.ListCount - 1 To 0 Step -1
        If (Me.lstEarningsToHide.Selected(i) = True) Then
            Me.lstEarningsToShow.AddItem Me.lstEarningsToHide.List(i)
            Me.lstEarningsToHide.RemoveItem i
        End If
    Next i
    
    'Sorts ListBox List
    Dim x As Long
    Dim j As Long
    Dim temp As Variant
    
    With Me.lstEarningsToShow
        For j = 0 To lstEarningsToShow.ListCount - 2
            For x = 0 To lstEarningsToShow.ListCount - 2
               If lstEarningsToShow.ListCount < 2 Then Exit Sub
                If .List(x) > .List(x + 1) Then
                    temp = .List(x)
                    .List(x) = .List(x + 1)
                    .List(x + 1) = temp
                End If
            Next x
        Next j
    End With
    
End Sub

Private Sub cmdRemoveAll_Click()
    For i = 0 To Me.lstEarningsToHide.ListCount - 1
        Me.lstEarningsToShow.AddItem Me.lstEarningsToHide.List(i)
    Next i
    
    'Sorts ListBox List
    Dim x As Long
    Dim j As Long
    Dim temp As Variant
    
    With Me.lstEarningsToShow
        For j = 0 To lstEarningsToShow.ListCount - 2
            For x = 0 To lstEarningsToShow.ListCount - 2
               If lstEarningsToShow.ListCount < 2 Then Exit Sub
                If .List(x) > .List(x + 1) Then
                    temp = .List(x)
                    .List(x) = .List(x + 1)
                    .List(x + 1) = temp
                End If
            Next x
        Next j
    End With
    
    Me.lstEarningsToHide.Clear
End Sub

Public Sub cmdSubmit_Click()
    
    Application.ScreenUpdating = False
    
    Dim lastheadercolumn
    Dim header
    Set general = New general
    Dim i As Integer
    Dim eoworksheet As Worksheet
    Dim CheckRange As Range
    
    
    Set eoworksheet = ActiveWorkbook.Sheets("Current Pay Hours TS")
    lastheadercolumn = general.lastColumn(eoworksheet)
    
    With Sheets("Current Pay Hours TS")
        LastEmp = .Cells(.Rows.Count, "G").End(xlUp).row
    End With
    
    Set CheckRange = Sheets("Current Pay Hours TS").Range("K4:LU" & LastEmp)
    
    If LastEmp > 3 Then
    
        If Application.CountA(CheckRange) > 0 Then
        
            ClearEarning = MsgBox("By hiding any of the earning columns, all values within those columns will be cleared." & _
                                  " Would you like to proceed?", vbYesNo + vbExclamation, "Current Pay Hours")
                                                    
            If ClearEarning = vbYes Then
            
                For i = 0 To Me.lstEarningsToHide.ListCount - 1
                
                    For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
                        If (header.value = Me.lstEarningsToHide.List(i)) Then
                                         
                                With Sheets("Current Pay Hours TS")
                                    lastRow = .Cells(.Rows.Count, "G").End(xlUp).row
                                End With
                                
                                If Application.CountA(eoworksheet.Columns(general.NumToExcelLetter(header.Column))) > 2 Then
                                    'eoworksheet.Range(general.NumToExcelLetter(header.Column) & "4:" & general.NumToExcelLetter(header.Column) & LastRow).ClearContents
                                    
                                    For ColVal = 4 To lastRow Step 1
                                        eoworksheet.Range(general.NumToExcelLetter(header.Column) & ColVal).ClearContents
                                    Next ColVal
                                    
                                        
                                End If
                                
                                eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = True
                               
                        End If
                    Next header
                Next i
                
                For i = 0 To Me.lstEarningsToShow.ListCount - 1
                    For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
                        If (header.value = Me.lstEarningsToShow.List(i)) Then
                            eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = False
                        End If
                    Next header
                Next i
                
            Else
                Unload Me
            End If
        Else
        
            For i = 0 To Me.lstEarningsToHide.ListCount - 1
            
                For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
                    If (header.value = Me.lstEarningsToHide.List(i)) Then
                                     
                            With Sheets("Current Pay Hours TS")
                                lastRow = .Cells(.Rows.Count, "G").End(xlUp).row
                            End With
                            
                            If Application.CountA(eoworksheet.Columns(general.NumToExcelLetter(header.Column))) > 2 Then
                                eoworksheet.Range(general.NumToExcelLetter(header.Column) & "4:" & general.NumToExcelLetter(header.Column) & lastRow).ClearContents
                            End If
                            
                            eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = True
                           
                    End If
                Next header
            Next i
            
            For i = 0 To Me.lstEarningsToShow.ListCount - 1
                For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
                    If (header.value = Me.lstEarningsToShow.List(i)) Then
                        eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = False
                    End If
                Next header
            Next i
        End If
        
    Else
    
    
            For i = 0 To Me.lstEarningsToHide.ListCount - 1
            
                For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
                    If (header.value = Me.lstEarningsToHide.List(i)) Then
                                     
                            With Sheets("Current Pay Hours TS")
                                lastRow = .Cells(.Rows.Count, "G").End(xlUp).row + 1
                            End With
                            
                            If Application.CountA(eoworksheet.Columns(general.NumToExcelLetter(header.Column))) > 2 Then
                                eoworksheet.Range(general.NumToExcelLetter(header.Column) & "4:" & general.NumToExcelLetter(header.Column) & lastRow + 1).ClearContents
                            End If
                            
                            eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = True
                           
                    End If
                Next header
            Next i
            
            For i = 0 To Me.lstEarningsToShow.ListCount - 1
                For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
                    If (header.value = Me.lstEarningsToShow.List(i)) Then
                        eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = False
                    End If
                Next header
            Next i
    End If
    
    ActiveWindow.ScrollRow = 1
    eoworksheet.Activate
    Range("E4").Select
    Unload Me
End Sub



Private Sub UserForm_Initialize()
    Set general = New general
    Dim lastheadercolumn
    
    Dim eoworksheet As Worksheet
    If (general.SheetExists("Current Pay Hours TS") = False) Then
        MsgBox ("Missing 'Current Pay Hours Horizontal' tab")
        Unload Me
    End If
    
    Set eoworksheet = ActiveWorkbook.Sheets("Current Pay Hours TS")

    
    lastheadercolumn = general.lastColumn(eoworksheet)
    
    For Each header In eoworksheet.Range("K3:" & general.NumToExcelLetter(lastheadercolumn) & "3")
        If (eoworksheet.Columns(general.NumToExcelLetter(header.Column)).Hidden = True) Then
            Me.lstEarningsToHide.AddItem (header.value)
        Else
            Me.lstEarningsToShow.AddItem (header.value)
        End If
    Next header

End Sub

Private Function StrInLst(checkVal, inLst)
    Dim i As Integer
    
    'MsgBox checkVal
    For i = 0 To inLst.ListCount - 1
        If inLst.List(i) = checkVal Then
            StrInLst = True
            Exit Function
        End If
    Next i
    StrInLst = False
End Function






Attribute VB_Name = "frmMaintenance"
Attribute VB_Base = "0{F77E0C41-6E11-4E5F-BF95-CCA32B97693A}{D9EF59FF-50EB-41F3-9A1A-9BFBDC69A12E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public addingMissingEmployee As Boolean
Private employeeAdded As Boolean
Private sortColumnLetter As String

Private Sub cmdLoadProfile_Click()
    Dim FileName As String
    Dim oXL As Excel.Application
    Dim owb As Excel.Workbook
    Dim osheet As Excel.Worksheet
    Dim oRng As Excel.Range
    Dim csvFile() As String
    Dim DataConnection As String
    Dim CoCode As String
    Dim CoName As String
    
    Application.DisplayAlerts = False
    
    MsgBox "Import ADP Pay@work Employee Profile Report ONLY!" & vbNewLine & vbNewLine & "For information about your employee profile report, please contact your Payroll Specialist", vbExclamation, "Employee Profile"

    FileName = Application.GetOpenFilename(FileFilter:="XLS Files (*.xls),*.xls", Title:="Please select the Employee Profile...", MultiSelect:=False)
    
    If FileName = "False" Then
        Exit Sub
    End If
    
    Set oXL = CreateObject("Excel.Application")
    Set owb = Workbooks.Open(FileName)
    Set osheet = owb.Sheets(1)
    oXL.Visible = False
    CoCode = Mid(osheet.Range("H2").value, 7, 4)
    
    If Sheet1.Range("G10").value <> CoCode Then
        MsgBox "The file selected is not an Employee Profile Report for Company Code: " & Sheet1.Range("G10").value, vbCritical, "Invalid Employee Profile"
        owb.Close
        Exit Sub
    End If
    
    CoName = Right(osheet.Range("H2").value, Len(osheet.Range("H2").value) - 11)
    
    Application.EnableEvents = False
    
    Sheet1.Range("G10").value = CoCode
    Sheet1.Range("G11").value = CoName
    osheet.Range("A1:A4").EntireRow.Delete
    osheet.Range("A2").EntireRow.Delete
    
    osheet.Columns("S").Replace _
        what:="Terminated", Replacement:="T - Terminated", SearchOrder:=xlByColumns, MatchCase:=True
    osheet.Columns("S").Replace _
        what:="Inactive", Replacement:="I - Inactive", SearchOrder:=xlByColumns, MatchCase:=True
    osheet.Columns("S").Replace _
        what:="Active", Replacement:="A - Active", SearchOrder:=xlByColumns, MatchCase:=True
        
    csvFile = Split(FileName, ".")
    FileName = csvFile(0)
    osheet.SaveAs FileName:=FileName, FileFormat:=xlCSV, CreateBackup:=False
    owb.Close
    
    Application.EnableEvents = True
    
    Call GetCsv("MASTER setup", FileName & ".csv", "")
    
    'refresh the listbox
    If Me.searchType.value = "SOME" Then
        Lookup
    Else
        LookupAll
    End If
    
    Call InitializeDict
    
    Call ForcePasteSpecial

End Sub

Private Sub CommandButton1_Click()
    
    'sort the database
    With Sheet17
        .Range("A1:H10000").Sort Key1:=.Range("A1"), Order1:=xlAscending, header:=xlYes
        .Range("I1").value = "A"
        Call UpdateSortColumn
    End With
    
    'refresh the listbox
    If Me.searchType.value = "SOME" Then
        Lookup
    Else
        LookupAll
    End If
    
End Sub

Private Sub CommandButton2_Click()

    'sort the database
    With Sheet17
        .Range("A1:H10000").Sort Key1:=.Range("B1"), Order1:=xlAscending, header:=xlYes
        .Range("I1").value = "B"
        Call UpdateSortColumn
    End With
    
    'refresh the listbox
    If Me.searchType.value = "SOME" Then
        Lookup
    Else
        LookupAll
    End If

End Sub

Private Sub CommandButton3_Click()

    'sort the database
    With Sheet17
        .Range("A1:H10000").Sort Key1:=.Range("C1"), Order1:=xlAscending, header:=xlYes
        .Range("I1").value = "C"
        Call UpdateSortColumn
    End With
    
    'refresh the listbox
    If Me.searchType.value = "SOME" Then
        Lookup
    Else
        LookupAll
    End If

End Sub

Private Sub CommandButton4_Click()

    'sort the database
    With Sheet17
        .Range("A1:H10000").Sort Key1:=.Range("D1"), Order1:=xlAscending, header:=xlYes
        .Range("I1").value = "D"
        Call UpdateSortColumn
    End With
    
    'refresh the listbox
    If Me.searchType.value = "SOME" Then
        Lookup
    Else
        LookupAll
    End If

End Sub

Private Sub CommandButton5_Click()

    'sort the database
    With Sheet17
        .Range("A1:H10000").Sort Key1:=.Range("E1"), Order1:=xlAscending, header:=xlYes
        .Range("I1").value = "E"
        Call UpdateSortColumn
    End With
    
    'refresh the listbox
    If Me.searchType.value = "SOME" Then
        Lookup
    Else
        LookupAll
    End If

End Sub

Private Sub CommandButton6_Click()

    'sort the database
    With Sheet17
        .Range("A1:H10000").Sort Key1:=.Range("F1"), Order1:=xlAscending, header:=xlYes
        .Range("I1").value = "F"
        Call UpdateSortColumn
    End With
    
    'refresh the listbox
    If Me.searchType.value = "SOME" Then
        Lookup
    Else
        LookupAll
    End If

End Sub

Private Sub CommandButton7_Click()

    'sort the database
    With Sheet17
        .Range("A1:H10000").Sort Key1:=.Range("H1"), Order1:=xlAscending, header:=xlYes
        .Range("I1").value = "H"
        Call UpdateSortColumn
    End With
    
    'refresh the listbox
    If Me.searchType.value = "SOME" Then
        Lookup
    Else
        LookupAll
    End If

End Sub

Private Sub UserForm_Initialize()
    
    Dim widthX As Single
    Dim heightX As Single

    Call UpdateSortColumn
    
    employeeAdded = False
    
    If Application.Width < 750 And Application.Height < 550 Then
        With Me
            .StartUpPosition = 1
            .Width = Application.Width * 0.88
            .Height = Application.Height * 0.82
            .Left = Application.Left + (Application.Width * 0.88) \ 2
            .Top = Application.Top + (Application.Height * 0.82) \ 2
            Zoom = 66
        End With
        GoTo Skip
    ElseIf Application.Width < 900 And Application.Height < 650 Then
        With Me
            .StartUpPosition = 1
            .Width = Application.Width * 0.9
            .Height = Application.Height * 0.9
            .Left = Application.Left + (Application.Width * 0.9) \ 2
            .Top = Application.Top + (Application.Height * 0.9) \ 2
            Zoom = 85
        End With
        GoTo Skip
    ElseIf Application.Width < 1000 And Application.Height < 750 Then
        With Me
            .StartUpPosition = 1
            .Width = Application.Width * 0.8
            .Height = Application.Height * 0.9
            .Left = Application.Left + (Application.Width * 0.8) \ 2
            .Top = Application.Top + (Application.Height * 0.9) \ 2
            Zoom = 85
        End With
        GoTo Skip
    ElseIf Application.Width < 1000 And Application.Height < 800 Then
        With Me
            .StartUpPosition = 1
            .Width = Application.Width * 0.8
            .Height = Application.Height * 0.8
            .Left = Application.Left + (Application.Width * 0.8) \ 2
            .Top = Application.Top + (Application.Height * 0.8) \ 2
            Zoom = 90
        End With
        GoTo Skip
    End If
Skip:

End Sub

Private Sub UserForm_Activate()
    
    Dim widthX As Single
    Dim heightX As Single
      
    With frmMaintenance
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
    End With

    Me.cmdUpdate.Enabled = False
    Me.cmdDelete.Enabled = False
    Me.optButton1.value = True
    
    LookupAll
    
    txtLookup.SetFocus
     
End Sub

Private Sub cmdLookup_Click()
    If txtLookup.value <> "" Then
        Me.searchType.value = "SOME"
        Lookup
    Else
        txtLookup.SetFocus
    End If
    
End Sub

Sub Lookup()
'declare the variables
    Dim rngFind As Range
    Dim strFirstFind As String
    'error statement
    On Error GoTo errHandler:
    'clear the listbox
    lstLookup.Clear
    If optButton1.value = True Then
        'look up parts or all of full name
        With Sheet17.Range("A:A")
            Set rngFind = .Find(txtLookup.Text, LookIn:=xlValues, lookat:=xlPart)
            'if value found then set a variable for the address
            If Not rngFind Is Nothing Then
                strFirstFind = rngFind.Address
                'add the values to the listbox
                Do
                    If rngFind.row > 1 Then
                        lstLookup.AddItem rngFind.value
                        lstLookup.List(lstLookup.ListCount - 1, 1) = rngFind.Offset(0, 1)
                        lstLookup.List(lstLookup.ListCount - 1, 2) = rngFind.Offset(0, 2)
                        lstLookup.List(lstLookup.ListCount - 1, 3) = rngFind.Offset(0, 3)
                        lstLookup.List(lstLookup.ListCount - 1, 4) = rngFind.Offset(0, 4)
                        lstLookup.List(lstLookup.ListCount - 1, 5) = rngFind.Offset(0, 5)
                        lstLookup.List(lstLookup.ListCount - 1, 6) = rngFind.Offset(0, 6)
                        lstLookup.List(lstLookup.ListCount - 1, 7) = rngFind.Offset(0, 7)
                    End If
                    'find the next address to add
                    Set rngFind = .FindNext(rngFind)
                Loop While Not rngFind Is Nothing And rngFind.Address <> strFirstFind
            End If
        End With
    ElseIf optButton2.value = True Then
        'look up parts or all Requisition #
        With Sheet17.Range("B:B")
            Set rngFind = .Find(txtLookup.Text, LookIn:=xlValues, lookat:=xlPart)
            'if value found then set a variable for the address
            If Not rngFind Is Nothing Then
                strFirstFind = rngFind.Address
                'add the values to the listbox
                Do
                    If rngFind.row > 1 Then
                        'lstLookup.AddItem rngFind.value
                        lstLookup.AddItem rngFind.Offset(0, -1)
                        lstLookup.List(lstLookup.ListCount - 1, 1) = rngFind.value
                        lstLookup.List(lstLookup.ListCount - 1, 2) = rngFind.Offset(0, 1)
                        lstLookup.List(lstLookup.ListCount - 1, 3) = rngFind.Offset(0, 2)
                        lstLookup.List(lstLookup.ListCount - 1, 4) = rngFind.Offset(0, 3)
                        lstLookup.List(lstLookup.ListCount - 1, 5) = rngFind.Offset(0, 4)
                        lstLookup.List(lstLookup.ListCount - 1, 6) = rngFind.Offset(0, 5)
                        lstLookup.List(lstLookup.ListCount - 1, 7) = rngFind.Offset(0, 6)
                    End If
                    'find the next address to add
                    Set rngFind = .FindNext(rngFind)
                Loop While Not rngFind Is Nothing And rngFind.Address <> strFirstFind
            End If
        End With
    Else
        'look up parts or all Requisition #
        With Sheet17.Range("D:D")
            Set rngFind = .Find(txtLookup.Text, LookIn:=xlValues, lookat:=xlPart)
            'if value found then set a variable for the address
            If Not rngFind Is Nothing Then
                strFirstFind = rngFind.Address
                'add the values to the listbox
                Do
                    If rngFind.row > 1 Then
                        lstLookup.AddItem rngFind.Offset(0, -3)
                        lstLookup.List(lstLookup.ListCount - 1, 1) = rngFind.Offset(0, -2)
                        lstLookup.List(lstLookup.ListCount - 1, 2) = rngFind.Offset(0, -1)
                        lstLookup.List(lstLookup.ListCount - 1, 3) = rngFind.value
                        lstLookup.List(lstLookup.ListCount - 1, 4) = rngFind.Offset(0, 1)
                        lstLookup.List(lstLookup.ListCount - 1, 5) = rngFind.Offset(0, 2)
                        lstLookup.List(lstLookup.ListCount - 1, 6) = rngFind.Offset(0, 3)
                        lstLookup.List(lstLookup.ListCount - 1, 7) = rngFind.Offset(0, 4)
                    End If
                    'find the next address to add
                    Set rngFind = .FindNext(rngFind)
                Loop While Not rngFind Is Nothing And rngFind.Address <> strFirstFind
            End If
        End With
    End If

    'error block
    On Error GoTo 0
    Exit Sub
errHandler::

End Sub

Private Sub cmdLookupAll_Click()
    txtLookup.value = ""
    Me.searchType.value = "ALL"
    LookupAll
End Sub

Sub LookupAll()
'declare the variables
    Dim rngFind As Range
    Dim strFirstFind As String
    'error statement
    On Error GoTo errHandler:
    'clear the listbox
    lstLookup.Clear
    With Sheet17.Range("A:A")
        Set rngFind = .Find("*", LookIn:=xlValues, lookat:=xlPart)
        'if value found then set a variable for the address
        If Not rngFind Is Nothing Then
            strFirstFind = rngFind.Address
            'add the values to the listbox
            Do
                If rngFind.row > 1 Then
                    lstLookup.AddItem rngFind.value
                    lstLookup.List(lstLookup.ListCount - 1, 1) = rngFind.Offset(0, 1)
                    lstLookup.List(lstLookup.ListCount - 1, 2) = rngFind.Offset(0, 2)
                    lstLookup.List(lstLookup.ListCount - 1, 3) = rngFind.Offset(0, 3)
                    lstLookup.List(lstLookup.ListCount - 1, 4) = rngFind.Offset(0, 4)
                    lstLookup.List(lstLookup.ListCount - 1, 5) = rngFind.Offset(0, 5)
                    lstLookup.List(lstLookup.ListCount - 1, 6) = rngFind.Offset(0, 6)
                    lstLookup.List(lstLookup.ListCount - 1, 7) = rngFind.Offset(0, 7)
                End If
                'find the next address to add
                Set rngFind = .FindNext(rngFind)
            Loop While Not rngFind Is Nothing And rngFind.Address <> strFirstFind
        End If
    End With

    'error block
    On Error GoTo 0
    Exit Sub
errHandler::

End Sub

Private Sub lstLookup_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
'declare the variables
    Dim uniqueKey As String
    Dim i As Integer
    Dim findValue
    
    'error block
    On Error GoTo errHandler:
    'get the select value from the listbox
    For i = 0 To lstLookup.ListCount - 1
        If lstLookup.Selected(i) = True Then
            uniqueKey = lstLookup.List(i, 6)
        End If
    Next i
        
    'find the associate name
    Set findValue = Sheet17.Range("G:G").Find(what:=uniqueKey, LookIn:=xlValues, lookat:=xlWhole).Offset(0, -6)
        
    'add the database values to the userform

    Me.lastName.value = findValue
    Me.firstName.value = findValue.Offset(0, 1)
    Me.initial.value = findValue.Offset(0, 2)
    Me.empID.value = findValue.Offset(0, 3)
    Me.branch.value = findValue.Offset(0, 4)
    Me.department.value = findValue.Offset(0, 5)
    Me.uniqueKeyHidden.value = findValue.Offset(0, 6)
    Me.payStatus.value = findValue.Offset(0, 7)
    
    'disable adding
    Me.cmdAdd.Enabled = False
    Me.cmdUpdate.Enabled = True
    Me.cmdDelete.Enabled = True
    'error block
    On Error GoTo 0
    Exit Sub
errHandler::
    
End Sub

Private Sub cmdDelete_Click()
'declare the variables
    Dim findValue As Range
    Dim cDelete As VbMsgBoxResult
    'check for values
    If uniqueKeyHidden.value = "" Then
        MsgBox "There is no employee to delete", , "Employee Maintenance"
        Exit Sub
    End If
    'give the user a chance to change their mind
    cDelete = MsgBox("Are you sure that you want to delete this employee?", vbYesNo + vbDefaultButton2 + vbQuestion, "Delete Employee")
    If cDelete = vbYes Then
        'delete the row
        Set findValue = Sheet17.Range("G:G").Find(what:=uniqueKeyHidden, LookIn:=xlValues)
        findValue.EntireRow.Delete
        Me.lastName.value = ""
        Me.firstName.value = ""
        Me.initial.value = ""
        Me.empID.value = ""
        Me.branch.value = ""
        Me.department.value = ""
        Me.uniqueKeyHidden.value = ""
        Me.payStatus.value = ""
        Me.cmdAdd.Enabled = True
        Me.cmdUpdate.Enabled = False
        Me.cmdDelete.Enabled = False
    End If
    
    'refresh the listbox
    If Me.searchType.value = "SOME" Then
        Lookup
    Else
        LookupAll
    End If
    
    Call InitializeDict
    
End Sub

Private Sub cmdUpdate_Click()
'declare the variables
    Dim findValue As Range
    'error handling
    On Error GoTo errHandler:
    'check for values
    If uniqueKeyHidden.value = "" Then
        MsgBox "There is no employee to update", , "Employee Maintenance"
        Exit Sub
    End If
    
    'edit the row
    Set findValue = Sheet17.Range("G:G").Find(what:=uniqueKeyHidden, LookIn:=xlValues).Offset(0, -6)
    
    findValue = Me.lastName.value
    findValue.Offset(0, 1) = Me.firstName.value
    findValue.Offset(0, 2) = Me.initial.value
    findValue.Offset(0, 3) = Me.empID.value
    findValue.Offset(0, 4) = Me.branch.value
    findValue.Offset(0, 5) = Me.department.value
    Me.uniqueKeyHidden.value = Me.empID.value & "|" & Me.branch.value & "|" & Me.department.value
    findValue.Offset(0, 6) = Me.uniqueKeyHidden.value
    findValue.Offset(0, 7) = Me.payStatus.value
    
    Me.lastName.value = ""
    Me.firstName.value = ""
    Me.initial.value = ""
    Me.empID.value = ""
    Me.branch.value = ""
    Me.department.value = ""
    Me.uniqueKeyHidden.value = ""
    Me.payStatus.value = ""
    Me.cmdAdd.Enabled = True
    Me.cmdUpdate.Enabled = False
    Me.cmdDelete.Enabled = False

    'refresh the listbox
    If Me.searchType.value = "SOME" Then
        Lookup
    Else
        LookupAll
    End If
    
    Call InitializeDict
    
    'error block
    On Error GoTo 0
    Me.cmdUpdate.Enabled = False
    Exit Sub
errHandler:

End Sub

Private Sub cmdAdd_Click()
    Dim nextRow As Range
    'error handler
    On Error GoTo errHandler:
    
    'set the next row in the database
    Set nextRow = Sheet17.Cells(Rows.Count, 1).End(xlUp).Offset(1, 0)
    
    'check for values in the 4 mandatory fields
    If Me.lastName.value = "" Or Me.firstName.value = "" Or Me.empID.value = "" Or Me.payStatus.value = "" Then
        MsgBox "You must enter the employee's First Name, Last Name, Employee ID and Payroll Status", , "Employee Maintenance"
        Exit Sub
    End If
    
    Me.uniqueKeyHidden.value = Me.empID.value & "|" & Me.branch.value & "|" & Me.department.value
    
    'check for duplicate payroll numbers
    If WorksheetFunction.CountIf(Sheet17.Range("G:G"), Me.uniqueKeyHidden.value) > 0 Then
        MsgBox "An employee with this Employee ID/Branch/Department already exists", , "Employee Maintenance"
        Exit Sub
    End If
    
    'add the data to the master list
    nextRow = Me.lastName.value
    nextRow.Offset(0, 1) = Me.firstName.value
    nextRow.Offset(0, 2) = Me.initial.value
    nextRow.Offset(0, 3) = Me.empID.value
    nextRow.Offset(0, 4) = Me.branch.value
    nextRow.Offset(0, 5) = Me.department.value
    nextRow.Offset(0, 6) = Me.uniqueKeyHidden.value
    nextRow.Offset(0, 7) = Me.payStatus.value
    
    If addingMissingEmployee = True Then
        Dim employeeDetails(5) As Variant
        employeeDetails(0) = Me.branch.value
        employeeDetails(1) = Me.department.value
        employeeDetails(2) = Me.empID.value
        employeeDetails(3) = Me.lastName.value
        employeeDetails(4) = Me.firstName.value
        employeeDetails(5) = Me.uniqueKeyHidden.value
    End If
    
    'clear the controls
    Me.lastName.value = ""
    Me.firstName.value = ""
    Me.initial.value = ""
    Me.empID.value = ""
    Me.branch.value = ""
    Me.department.value = ""
    Me.uniqueKeyHidden.value = ""
    Me.payStatus.value = ""
    Me.cmdAdd.Enabled = True
    Me.cmdUpdate.Enabled = False
    Me.cmdDelete.Enabled = False
    
    'sort the database
    With Sheet17
        .Range("A1:H10000").Sort Key1:=.Range(sortColumnLetter & "1"), Order1:=xlAscending, header:=xlYes
    End With
    
    'refresh the listbox
    If Me.searchType.value = "SOME" Then
        Lookup
    Else
        LookupAll
    End If
    
    Call InitializeDict
    
    'error block
    On Error GoTo 0
    
    If addingMissingEmployee = True Then
        frmEmployeeNotFound.UpdateEmployeeDetails employeeDetails
    End If
    
    employeeAdded = True
    Exit Sub
errHandler::

End Sub


Private Sub cmdReset_Click()

    'enable adding new employee
    Me.cmdAdd.Enabled = True
    Me.lastName.Enabled = True
    Me.firstName.Enabled = True
    Me.initial.Enabled = True
    Me.empID.Enabled = True
    Me.branch.Enabled = True
    Me.department.Enabled = True
    Me.payStatus.Enabled = True
    Me.lastName.value = ""
    Me.firstName.value = ""
    Me.initial.value = ""
    Me.empID.value = ""
    Me.branch.value = ""
    Me.department.value = ""
    Me.uniqueKeyHidden.value = ""
    Me.payStatus.value = ""
    Me.cmdUpdate.Enabled = False
    Me.cmdDelete.Enabled = False
    'clear the listbox
    lstLookup.Clear
    optButton1.value = True
    'clear the textbox
    Me.txtLookup.value = ""
    txtLookup.SetFocus
    
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        Call cmdClose_Click
        
        Me.Hide
    End If
End Sub

Private Sub cmdClose_Click()

    'sort the database
'    With Sheet17
'        .Range("A1:H10000").Sort Key1:=.Range("A1"), Order1:=xlAscending, header:=xlYes
'    End With
    
    If employeeAdded = False Then
    
        If addingMissingEmployee = True Then
            frmEmployeeNotFound.EmployeeUpdateCancelled
        End If
        
    End If
    
    Unload Me
End Sub

Private Sub lastName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

    With CreateObject("VBScript.RegExp")
        .Pattern = "^[a-zA-Z0-9 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.'_-]*$"
        .IgnoreCase = True

        If Not .Test(lastName.value & Chr(KeyAscii)) Then KeyAscii = 0
    End With
    
End Sub

Private Sub firstName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

    With CreateObject("VBScript.RegExp")
        .Pattern = "^[a-zA-Z0-9 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.'_-]*$"
        .IgnoreCase = True

        If Not .Test(firstName.value & Chr(KeyAscii)) Then KeyAscii = 0
    End With
    
End Sub

Private Sub empID_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

    With CreateObject("VBScript.RegExp")
        .Pattern = "^[a-zA-Z0-9#&._-]*$"
        .IgnoreCase = True

        If Not .Test(empID.value & Chr(KeyAscii)) Then KeyAscii = 0
    End With
    
End Sub

Public Sub UpdateSortColumn()
    sortColumnLetter = ThisWorkbook.Sheets("MASTER Setup").Range("I1").value
    If sortColumnLetter = "" Then sortColumnLetter = "A"
End Sub
Attribute VB_Name = "frmMaster"
Attribute VB_Base = "0{5223FC63-8F37-4BCA-BF73-C92FAF0CA69F}{9E70621C-43BB-4EAC-B783-6148B7BDE696}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private cancelled_ As Boolean
Private skipped_ As Boolean

Public Property Get cancelled() As Boolean
    cancelled = cancelled_
End Property

Public Property Get skipped() As Boolean
    skipped = skipped_
End Property

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        Call skipButton_Click
    End If
End Sub

Private Sub cancelButton_Click()
    answer = MsgBox("This will cancel adding all remaining rows to the sheet." & vbNewLine & _
    "Do you want to continue?", vbYesNo + vbQuestion, "Add Employees")
    
    If answer = vbYes Then
        cancelled_ = True
        ResetSearchFieldFormatting
        Me.Hide
    End If
End Sub

Private Sub cmdPopulate_Click()
    Dim boolItemSelected As Boolean
    Dim sValues()
    boolItemSelected = False

    For i = 0 To Me.lstData.ListCount - 1
        If Me.lstData.Selected(i) Then
            boolItemSelected = True
            Exit For
        End If
    Next i
    
    If boolItemSelected = False Then
        MsgBox "Please select one employee.", vbInformation, "Employee List"
        Exit Sub
    End If
    
    ResetSearchFieldFormatting
    Me.Hide
End Sub

Private Sub skipButton_Click()
    skipped_ = True
    lstData.Clear
    ResetSearchFieldFormatting
    Me.Hide
End Sub

Private Sub UserForm_Activate()
    With frmMaster
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
    End With
    
    cancelled_ = False
    skipped_ = False
End Sub

Public Function LoadUserList(valuesArray As Variant) As Variant
    Dim i As Long
    Dim j As Long
    
    For i = 0 To lstData.ListCount - 1
        If lstData.Selected(i) Then
            For j = 0 To lstData.ColumnCount
                ReDim Preserve valuesArray(j)
                valuesArray(j) = lstData.Column(j, lstData.ListIndex)
            Next j
        End If
    Next i
    
    LoadUserList = valuesArray
End Function

Public Sub FormatSearchFields(searchPos As Long)
        Select Case searchPos
        Case 1
            lastNameText_label.Font.Bold = True
            lastNameText_label.ForeColor = &HC0&
        Case 2
            firstNameText_label.ForeColor = &HC0&
            firstNameText_label.Font.Bold = True
        Case 4
            employeeIdText_label.ForeColor = &HC0&
            employeeIdText_label.Font.Bold = True
    End Select
End Sub

Public Sub PopulateSearchFields(Target As Range)
    branchText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 5)
    departmentText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 6)
    employeeIdText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 7)
    lastNameText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 8)
    firstNameText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 9)
End Sub

Public Sub PopulateSearchFields_QF(Target As Range)
    branchText_label.Caption = frmUserEntry.txtBranch
    departmentText_label.Caption = frmUserEntry.txtDept
    employeeIdText_label.Caption = frmUserEntry.txtEmpID
    lastNameText_label.Caption = frmUserEntry.txtLName
    firstNameText_label.Caption = frmUserEntry.txtFname
End Sub

Private Sub ResetSearchFieldFormatting()
    employeeIdText_label.Font.Bold = False
    employeeIdText_label.ForeColor = &H80000012
    lastNameText_label.Font.Bold = False
    lastNameText_label.ForeColor = &H80000012
    firstNameText_label.Font.Bold = False
    firstNameText_label.ForeColor = &H80000012
End Sub
Attribute VB_Name = "frmPasteBlank"
Attribute VB_Base = "0{D8659350-BE74-4996-8A10-0FF8C43AE7DF}{E81669FD-6BCF-4695-95AA-7F3C030C782B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Public skipped As Boolean
Public continue As Boolean
Public continueAll As Boolean
Public cancelled As Boolean
Private employeeDetails_() As Variant
Private lastRow As Boolean


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        Call cancel_button_Click
    End If
End Sub

Public Sub EmployeeUpdateCancelled()
    skipped = True
    ResetSearchFieldFormatting
End Sub

Public Sub UpdateEmployeeDetails(employeeDetails() As Variant)
    employeeDetails_ = employeeDetails
End Sub

Public Function GetEmployeeDetails() As Variant()
    GetEmployeeDetails = employeeDetails_
End Function

Private Sub cancel_button_Click()

    If Not lastRow Then
    
        answer = MsgBox("Would you like to perform this action for all remaining rows?", vbYesNo + vbQuestion, "Cancel Entry")
    
        If answer = vbYes Then
            cancelled = True
            ResetSearchFieldFormatting
            Me.Hide
        Else
            skipped = True
            ResetSearchFieldFormatting
            Me.Hide
        End If
    Else
        skipped = True
        ResetSearchFieldFormatting
        Me.Hide
    End If
    
End Sub

Private Sub continue_button_Click()

    If Not lastRow Then
    
        answer = MsgBox("Would you like to perform this action for all remaining rows?", vbYesNo + vbQuestion, "Add Employees")
        
        If answer = vbYes Then
            continue = True
            continueAll = True
            ResetSearchFieldFormatting
            Me.Hide
        Else
            continue = True
            ResetSearchFieldFormatting
            Me.Hide
        End If
       
    Else
        continue = True
        ResetSearchFieldFormatting
        Me.Hide
    End If
    
End Sub

Private Sub UserForm_Activate()
    If ThisWorkbook.activeSheet.Name = "Employee Info Changes" Or ThisWorkbook.activeSheet.Name = "Transfers" Or ThisWorkbook.activeSheet.Name = "Salary Changes" Or ThisWorkbook.activeSheet.Name = "Status Changes" Then
        Me.continue_button.Visible = False
        Me.Label18.Visible = False
'        Me.continueAll_button.Visible = False
    Else
        Me.continue_button.Visible = True
        Me.Label18.Visible = True
'        Me.continueAll_button.Visible = True
    End If
    
    Me.StartUpPosition = 0
    Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
    Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)

    cancelled = False
    continueAll = False
    continue = False
    skipped = False
    Erase employeeDetails_
End Sub

Public Sub PopulateSearchFields(Target As Range)
    branchText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 5)
    departmentText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 6)
    employeeIdText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 7)
    lastNameText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 8)
    firstNameText_label.Caption = Range(Target.Address).EntireRow.Cells(1, 9)
End Sub

Public Sub FormatSearchFields(searchPos As Long)
        Select Case searchPos
        Case 1
            lastNameText_label.ForeColor = &HC0&
            lastNameText_label.Font.Bold = True
        Case 2
            firstNameText_label.ForeColor = &HC0&
            firstNameText_label.Font.Bold = True
        Case 4
            employeeIdText_label.ForeColor = &HC0&
            employeeIdText_label.Font.Bold = True
    End Select
End Sub

Private Sub ResetSearchFieldFormatting()
    employeeIdText_label.Font.Bold = False
    employeeIdText_label.ForeColor = &H80000012
    lastNameText_label.Font.Bold = False
    lastNameText_label.ForeColor = &H80000012
    firstNameText_label.Font.Bold = False
    firstNameText_label.ForeColor = &H80000012
End Sub

Public Sub isLastRow(currRow As Long, rowCount As Long)

    If currRow = rowCount Then
        lastRow = True
    Else
        lastRow = False
    End If

End Sub

Attribute VB_Name = "frmRobotAdminTool"
Attribute VB_Base = "0{DC3410CC-166C-4CCA-8B16-AA95B8191220}{AB6A41D1-7BAC-4DAA-B04C-9283B27FF487}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdGetFileLocation_Click()
    Dim fldr As FileDialog
    Dim FolderPath As String
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        If .Show() <> -1 Then Exit Sub
        FolderPath = .SelectedItems(1)
        Me.txtLoadLocation.value = FolderPath
    End With
End Sub

Private Sub cmdLoadAutoform_Click()
    Call LoadAutoform
End Sub

Private Sub cmdMarketSwitch_Click()

    Application.ScreenUpdating = False
    
    VersionNum = Trim(Left(Sheets("CL0-Cover Sheet").Range("L45").value, Len(Sheets("CL0-Cover Sheet").Range("L45").value)))
  
    If Me.MarketSeg.value = "Unhidden" Then
        Call SBSmode
        Me.MarketSeg.value = "Hidden"
        Me.cmdMarketSwitch.Caption = "Unhide Cost Centers"
        MsgBox "All Cost Center and Override Cost Center columns have been hidden", vbInformation
        Sheets("New Hires Setup").Range("I1").value = VersionNum & "-S"
    Else
        Call MAJNATmode
        Me.MarketSeg.value = "Unhidden"
        Me.cmdMarketSwitch.Caption = "Hide Cost Centers"
        MsgBox "All Cost Center and Override Cost Center columns have been unhidden", vbInformation
        Sheets("New Hires Setup").Range("I1").value = VersionNum & "-M"
    End If
    Application.ScreenUpdating = True

End Sub

Public Sub cmdLoadProfile_Click()

    Dim FileName As String
    Dim oXL As Excel.Application
    Dim owb As Excel.Workbook
    Dim osheet As Excel.Worksheet
    Dim oRng As Excel.Range
    Dim csvFile() As String
    Dim DataConnection As String
    Dim lastProfileRow As Integer
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False

    Dim sFound As String
    Dim ProfilePath As String

    sFound = Dir(Environ("USERPROFILE") & "\Desktop\Extract_Autoform\*Employee Profile Report*.xls")
    If sFound <> "" Then
       ProfilePath = "\" & sFound
    Else
        Exit Sub
    End If

    FileName = Me.txtLoadLocation.value & ProfilePath

   
    If FileName = "False" Then
        'MsgBox "Please select the Employee Master data file", vbInformation, "COS Input"
        Exit Sub
    End If
'        Me.txtDataConnectionDir = FileName
    Set oXL = CreateObject("Excel.Application")
    Set owb = Workbooks.Open(FileName)
    Set osheet = owb.Sheets(1)
    oXL.Visible = False
    
    CoCode = Mid(osheet.Range("H2").value, 7, 4)
    
    If CoCode = "" Then
        CoCode = Left(sFound, 4)
        ProfileStatus = "Employee Profile is empty"
    End If
    
    On Error Resume Next
    CoName = Right(osheet.Range("H2").value, Len(osheet.Range("H2").value) - 11)
    
    If err.Number <> 0 Then
        CoName = ""
    End If
    
    Application.EnableEvents = False
    
    Sheet1.Range("G10").value = CoCode
    Sheet1.Range("G11").value = CoName
    osheet.Range("A1:A4").EntireRow.Delete
    osheet.Range("A2").EntireRow.Delete
    
    osheet.Columns("S").Replace _
        what:="Terminated", Replacement:="T - Terminated", SearchOrder:=xlByColumns, MatchCase:=True
    osheet.Columns("S").Replace _
        what:="Inactive", Replacement:="I - Inactive", SearchOrder:=xlByColumns, MatchCase:=True
    osheet.Columns("S").Replace _
        what:="Active", Replacement:="A - Active", SearchOrder:=xlByColumns, MatchCase:=True
        
    lastProfileRow = Cells.Find(what:="*", _
        After:=Range("A1"), _
        lookat:=xlPart, _
        LookIn:=xlFormulas, _
        SearchOrder:=xlByRows, _
        SearchDirection:=xlPrevious, _
        MatchCase:=False).row
        
    If lastProfileRow <= 1 Then
        profileMSG = " due to the Employee Profile being empty"
    End If
            
    osheet.Range("A1:BI" & lastProfileRow).RemoveDuplicates Columns:=Array(2, 5, 6), _
        header:=xlYes
        
    csvFile = Split(FileName, ".")
    FileName = csvFile(0)
    osheet.SaveAs FileName:=FileName, FileFormat:=xlCSV, CreateBackup:=False
    owb.Close
    
    Application.EnableEvents = True
    
    Call Robot_GetCsv("MASTER setup", FileName & ".csv", "", "Employee Profile Report")
    empCode.value = Worksheets("CL0-Cover Sheet").Range("G10").value
    
    Worksheets("CL0-Cover Sheet").Activate

    
End Sub

Private Sub cmdExit_Click()
    Unload Me
End Sub


Private Sub cmdExportDeselectAll_Click()
    For i = 0 To Me.lstExportWorksheet.ListCount - 1
        Me.lstExportWorksheet.Selected(i) = False
    Next
End Sub

Private Sub cmdExportSelectAll_Click()
    For i = 0 To Me.lstExportWorksheet.ListCount - 1
        Me.lstExportWorksheet.Selected(i) = True
    Next
End Sub

Private Sub cmdFldrDOF_Click()
    Dim fldr As FileDialog
    Dim FolderPath As String
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        If .Show() <> -1 Then Exit Sub
        FolderPath = .SelectedItems(1)
        Me.txtSecurityPWDir.value = FolderPath
    End With
End Sub

Private Sub cmdFldrSTD_Click()
    Dim fldr As FileDialog
    Dim FolderPath As String
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        If .Show() <> -1 Then Exit Sub
        FolderPath = .SelectedItems(1)
        Me.txtExportDirectory.value = FolderPath
    End With
End Sub

Private Sub cmdInjectDeselectAll_Click()
    For i = 0 To Me.lstInjectWorksheets.ListCount - 1
        Me.lstInjectWorksheets.Selected(i) = False
    Next
End Sub

Private Sub cmdInjectSelectAll_Click()
    For i = 0 To Me.lstInjectWorksheets.ListCount - 1
        Me.lstInjectWorksheets.Selected(i) = True
    Next
End Sub

Private Sub cmdSecurityApplyRules_Click()

    If Dir(Me.txtCreateFileDirectory.value & "\ADP_EXCEL_CREDENTIALS.txt", vbDirectory) = "" Then
        MsgBox "File in: " & Me.txtCreateFileDirectory.value & "\ADP_EXCEL_CREDENTIALS.txt" & " does not exist"
        Exit Sub
    End If
    Dim pwFile As String
    Dim wbPass As String
    Dim wspass As String
    Dim protectParameters() As Boolean
    Dim i As Integer
    i = 0
    pwFile = txtSecurityPWDir.value & "\ADP_EXCEL_CREDENTIALS.txt"

    ' Obtain Password for Workbook and Worksheet
    Open pwFile For Input As #1
    Do Until EOF(1)
        Line Input #1, Text
        Select Case i
            Case 0
                wbPass = Text
            Case i
                wspass = Text
        End Select
        i = i + 1
    Loop
    Close #1

   HideWorksheets ("HIDE")
   'Checks to see which sheets are hidden and hides the corresponding buttons associated with those sheets (Does NOT apply to cover sheet)
   Call CheckSheets
   'Moves all visible buttons to eliminate empty spaces
   Call MoveButtons
   'Does the same as CheckSheets but specifically for the cover sheet
   Call CheckCover
   'Does the same as MoveButtons but specifically for the cover sheet
   Call MoveCoverButtons
    
    
End Sub
Private Sub ProtectWorksheets(boolLock As Boolean, ParaList() As Boolean, wspass As String, rowStart As String, rowEnd As String)
    Dim ws As Worksheet
    Dim configSheet As Worksheet
    
    For i = 0 To Me.lstSecurityWorksheets.ListCount - 1
'        If Me.lstSecurityWorksheets.Selected(i) = True Then
            For Each ws In ActiveWorkbook.Worksheets
                If ws.Name = Me.lstSecurityWorksheets.List(i) Then
'                    If boolLock = False Then
                    If Me.Locked.value = "Locked" Then
                        ws.Unprotect Password:=wspass
                    Else
                        ws.Activate
                        ws.Unprotect Password:=wspass
                        ws.Cells.Select
                        Selection.Locked = False
                        ws.Rows(rowStart & ":" & rowEnd).Select
                        Selection.Locked = True
                        ws.Range("A:A").Select
                        Selection.Locked = True
                        If ParaList(0) = True Then
                            ws.EnableSelection = xlUnlockedCells
                            ws.EnableSelection = xlNoRestrictions
                        End If
                        
                        If ws.Name = "Current Pay Hours" Then
                            ws.Unprotect Password:="11"
                            ws.Range("B:B").Locked = False
                            ws.Range("C:C").Locked = False
                        ElseIf ws.Name = "Current Pay Hours TS" Then
                            ws.Unprotect Password:="11"
                            ws.Range("B:B").Locked = False
                            ws.Range("C:C").Locked = False
                        End If
                        
                        ws.Protect Password:=wspass, _
                            DrawingObjects:=ParaList(1), _
                            UserInterfaceOnly:=ParaList(4), _
                            AllowFormattingCells:=ParaList(5), _
                            AllowFormattingColumns:=ParaList(6), _
                            AllowFormattingRows:=ParaList(7), _
                            AllowInsertingColumns:=ParaList(8), _
                            AllowInsertingRows:=ParaList(9), _
                            AllowInsertingHyperlinks:=ParaList(10), _
                            AllowDeletingColumns:=ParaList(11), _
                            AllowDeletingRows:=ParaList(12), _
                            AllowSorting:=ParaList(13), _
                            AllowFiltering:=ParaList(14), _
                            AllowUsingPivotTables:=ParaList(15)
                            
                    End If
                End If
            Next
'        End If
    Next
    

    
    ThisWorkbook.Worksheets("CL0-Cover Sheet").Activate
    Range("G10").Select
End Sub
Private Sub HideWorksheets(HideUnhide As String)
    Dim ws As Worksheet
    Dim configSheet As Worksheet
    
    If ActiveWorkbook.ProtectStructure Or ActiveWorkbook.ProtectWindows Then
        MsgBox "Please unlock the workbook in order to enable/disable pages", vbCritical, "Workbook Setup"
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    
    For i = 0 To Me.lstSecurityWorksheets.ListCount - 1

        If Me.lstSecurityWorksheets.Selected(i) = True Then
            For Each ws In ActiveWorkbook.Worksheets
                If ws.Name = Me.lstSecurityWorksheets.List(i) Then
                    ws.Visible = xlSheetVisible
                End If
            Next
        ElseIf Me.lstSecurityWorksheets.Selected(i) = False Then
            For Each ws In ActiveWorkbook.Worksheets
                If ws.Name = Me.lstSecurityWorksheets.List(i) Then
                    ws.Visible = xlSheetVeryHidden
                End If
            Next
        End If
    Next
    

    
    ThisWorkbook.Worksheets("CL0-Cover Sheet").Activate
    Range("G10").Select
    MsgBox ("Workbook setup saved")
    
End Sub
Private Function ProtectParaList()
    Dim boolProtectParameters(15) As Boolean
    
    For i = 0 To Me.lstProtectArguments.ListCount - 1
        If Me.lstProtectArguments.Selected(i) = True Then
            boolProtectParameters(i) = True
        Else
            boolProtectParameters(i) = False
        End If
    Next
    
    ProtectParaList = boolProtectParameters
End Function

Private Sub cmdSecurityDeselectAll_Click()
    For i = 0 To Me.lstExportWorksheet.ListCount - 1
        Me.lstSecurityWorksheets.Selected(i) = False
    Next
End Sub

Private Sub cmdSecuritySelectAll_Click()
    For i = 0 To Me.lstExportWorksheet.ListCount - 1
        Me.lstSecurityWorksheets.Selected(i) = True
    Next
End Sub


Public Sub cmdLoadXlsENDN_Click()
            
    Dim FileName As String
    Dim oXL As Excel.Application
    Dim owb As Excel.Workbook
    Dim osheet As Excel.Worksheet
    Dim oRng As Excel.Range
    Dim csvFile() As String
    Dim DataConnection As String
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Dim sFound As String
    Dim earnDednPath As String

    sFound = Dir(Environ("USERPROFILE") & "\Desktop\Extract_Autoform\*Autoform EarnDedn*.xls")
    If sFound <> "" Then
       earnDednPath = "\" & sFound
    Else
        Exit Sub
    End If

    FileName = Me.txtLoadLocation.value & earnDednPath

    If FileName = "False" Then
        'MsgBox "Please select the Employee Master data file", vbInformation, "COS Input"
        Exit Sub
    End If
'        Me.txtDataConnectionDir = FileName
    Set oXL = CreateObject("Excel.Application")
    Set owb = Workbooks.Open(FileName)
    Set osheet = owb.Sheets(1)
    oXL.Visible = False
    CoCode = osheet.Range("A2").value
    
    If CoCode = "" Then
        CoCode = Left(sFound, 4)
        endnStatus = "Earnings/Deductions file is empty"
    End If
    
    Application.EnableEvents = False

    csvFile = Split(FileName, ".")
    FileName = csvFile(0)
    osheet.SaveAs FileName:=FileName, FileFormat:=xlCSV, CreateBackup:=False
    owb.Close


    Call Robot_GetCsv("EARNING setup", FileName & ".csv", "Earnings", earnDednPath)
    ThisWorkbook.Worksheets("EARNING setup").Activate
    On Error Resume Next
    ThisWorkbook.Worksheets("EARNING setup").Columns("A:G").Sort Key1:=Range("G:G"), Order1:=xlAscending, header:=xlYes
    
    endnCode.value = Worksheets("EARNING setup").Range("A2").value
    If endnCode.value = "" Then
        endnCode.value = CoCode
    End If
   
    Application.EnableEvents = False
    Call LockUnlockTS_Click
    Call LoadEarns
    frmHorizontalHours.cmdAddAll_Click
    frmHorizontalHours.cmdSubmit_Click
    Call LockUnlockTS_Click
    Application.EnableEvents = True

    Worksheets("CL0-Cover Sheet").Activate
    
End Sub

Private Sub CommandButton2_Click()
    Dim fldr As FileDialog
    Dim FolderPath As String
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        If .Show() <> -1 Then Exit Sub
        FolderPath = .SelectedItems(1)
        Me.txtCreateFileDirectory.value = FolderPath
    End With
End Sub


Public Sub cmdLoadXlsEO_Click()
       
    Dim FileName As String
    Dim oXL As Excel.Application
    Dim owb As Excel.Workbook
    Dim osheet As Excel.Worksheet
    Dim oRng As Excel.Range
    Dim csvFile() As String
    Dim DataConnection As String
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    Dim sFound As String
    Dim eeOptionsPath As String

    sFound = Dir(Environ("USERPROFILE") & "\Desktop\Extract_Autoform\*Autoform EEOptions*.xls")
    If sFound <> "" Then
       eeOptionsPath = "\" & sFound
    Else
        Exit Sub
    End If

    FileName = Me.txtLoadLocation.value & eeOptionsPath
    
    If FileName = "False" Then
        'MsgBox "Please select the Employee Master data file", vbInformation, "COS Input"
        Exit Sub
    End If
'        Me.txtDataConnectionDir = FileName
    Set oXL = CreateObject("Excel.Application")
    Set owb = Workbooks.Open(FileName)
    Set osheet = owb.Sheets(1)
    oXL.Visible = False
    CoCode = osheet.Range("A2").value
    
    If CoCode = "" Then
        CoCode = Left(sFound, 4)
        eoStatus = "Employee Options file is empty"
    End If
    
    Application.EnableEvents = False

    csvFile = Split(FileName, ".")
    FileName = csvFile(0)
    osheet.SaveAs FileName:=FileName, FileFormat:=xlCSV, CreateBackup:=False
    owb.Close

    Call Robot_GetCsv("EMPLOYEE OPTIONS DATA setup", FileName & ".csv", "EmpOptions", eeOptionsPath)
    Call CreateEmployeeOptions
    
    eoCode.value = Worksheets("EMPLOYEE OPTIONS DATA setup").Range("A2").value

    Application.EnableEvents = False
    Call OptionsIndexAutofill
    
    Call LockUnlockOptions_Click
    Call Robot_SetupEmployeeOptions
    Application.EnableEvents = False
    frmEmployeeOptionsTool.cmdAddAll_Click
    frmEmployeeOptionsTool.cmdSubmit_Click
    Call LockUnlockOptions_Click
    
    
    Application.EnableEvents = True
    
    Worksheets("CL0-Cover Sheet").Activate
    
End Sub

Private Sub LockUnlock_Click()
    Dim pwFile As String
    Dim wbPass As String
    Dim wspass As String
    Dim protectParameters() As Boolean
    Dim i As Integer
    
   
    i = 0
    pwFile = txtSecurityPWDir.value & "\ADP_EXCEL_CREDENTIALS.txt"

    Application.ScreenUpdating = False
    
    ' Obtain Password for Workbook and Worksheet
    Open pwFile For Input As #1
    Do Until EOF(1)
        Line Input #1, Text
        Select Case i
            Case 0
                wbPass = Text
            Case i
                wspass = Text
        End Select
        i = i + 1
    Loop
    Close #1
    
    protectParameters = ProtectParaList
  
    If Me.Locked.value = "Unlocked" Then
        HideUnhideAdmin ("HIDE")
        Call ProtectWorksheets(True, protectParameters, wspass, Me.txtSecurityRowStart.value, Me.txtSecurityRowEnd.value)
        ActiveWorkbook.Protect Password:=wbPass, structure:=True, Windows:=False
        Me.Locked.value = "Locked"
        Me.LockUnlock.Caption = "Unlock Workbook"
        MsgBox "Autoform workbook is now locked"
    Else
        ActiveWorkbook.Unprotect Password:=wbPass
        Call ProtectWorksheets(False, protectParameters, wspass, Me.txtSecurityRowStart.value, Me.txtSecurityRowEnd.value)
        HideUnhideAdmin ("UNHIDE")
        Me.Locked.value = "Unlocked"
        Me.LockUnlock.Caption = "Lock Workbook"
        MsgBox "Autoform workbook is now unlocked"
    End If
    
    Sheets("Current Pay Hours Overrides").Unprotect "11"
    
    
    Range("G10").Select
    'Application.ScreenUpdating = True
End Sub


Private Sub txtCreateFileDirectory_Change()
    Me.txtSecurityPWDir = Me.txtCreateFileDirectory
End Sub

Private Sub UserForm_Activate()
    With frmAdminTool
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
    End With

End Sub

Private Sub UserForm_Initialize()
    Me.txtCreateFileDirectory.value = Application.ActiveWorkbook.Path
    Me.txtSecurityPWDir.value = Application.ActiveWorkbook.Path
    
    'This is the folder path that the robot load will be looking for the files (the user's Desktop). Change if necessary.
    Me.txtLoadLocation.value = Environ("USERPROFILE") & "\Desktop\Extract_Autoform"
    
    Me.txtExportDirectory.value = Application.ActiveWorkbook.Path
    AddProtectParaToLst Me.lstProtectArguments
    
    For Each ws In Worksheets
        If (InStr(UCase(ws.Name), UCase("setup")) = 0 And UCase(ws.Name) <> UCase("User Guide")) Then
            Me.lstExportWorksheet.AddItem ws.Name
            Me.lstSecurityWorksheets.AddItem ws.Name
            Me.lstInjectWorksheets.AddItem ws.Name
          '  Me.lstProtectArguments.AddItem ws.Name
        End If
    Next
    
    If ActiveWorkbook.ProtectStructure Or ActiveWorkbook.ProtectWindows Then
        Me.Locked.value = "Locked"
        Me.LockUnlock.Caption = "Unlock Workbook"
    Else
        Me.Locked.value = "Unlocked"
        Me.LockUnlock.Caption = "Lock Workbook"
    End If
    
    For i = 0 To Me.lstSecurityWorksheets.ListCount - 1
        For Each ws In ActiveWorkbook.Worksheets
            If ws.Name = Me.lstSecurityWorksheets.List(i) Then
                If ws.Visible = xlSheetVisible Then
                    Me.lstSecurityWorksheets.Selected(i) = True
                Else
                    Me.lstSecurityWorksheets.Selected(i) = False
                End If
            End If
        Next
    Next
    empCode.value = Worksheets("CL0-Cover Sheet").Range("G10").value
    endnCode.value = Worksheets("EARNING setup").Range("A2").value
    eoCode.value = Worksheets("EMPLOYEE OPTIONS DATA setup").Range("A2").value
    
    If Right(Sheets("New Hires Setup").Range("I1").value, 2) = "-M" Then
        Me.MarketSeg.value = "Unhidden"
        Me.cmdMarketSwitch.Caption = "Hide Cost Centers"
    ElseIf Right(Sheets("New Hires Setup").Range("I1").value, 2) = "-S" Then
        Me.MarketSeg.value = "Hidden"
        Me.cmdMarketSwitch.Caption = "Unhide Cost Centers"
    End If
    
End Sub

Private Sub AddProtectParaToLst(lst As MSForms.ListBox)
    ' sheet.enableselection = xlnorestrictions
    With lst
        .AddItem "EnableSelection"
        .Selected(0) = True
        .AddItem "DrawingObjects"
        .AddItem "Contents"
        .AddItem "Scenarios"
        .AddItem "UserInterfaceOnly"
        .Selected(4) = True
        .AddItem "AllowFormattingCells"
        .Selected(5) = True
        .AddItem "AllowFormattingColumns"
        .Selected(6) = True
        .AddItem "AllowFormattingRows"
        .Selected(7) = True
        .AddItem "AllowInsertingColumns"
        .AddItem "AllowInsertingRows"
        .AddItem "AllowInsertingHyperlinks"
        .AddItem "AllowDeletingColumns"
        .AddItem "AllowDeletingRows"
        .AddItem "AllowSorting"
        .AddItem "AllowFiltering"
        .AddItem "AllowUsingPivotTables"
    End With
    
End Sub

Public Sub protectTimeSheet(boolLock As Boolean, ParaList() As Boolean, rowStart As String, rowEnd As String)
    Dim ws As Worksheet
    
    Set ws = Sheets("Current Pay Hours TS")
    
    If Me.Locked.value = "Locked" Then
        ws.Unprotect Password:="11"
    Else
        ws.Activate
        ws.Unprotect Password:="11"
        ws.Cells.Select
        Selection.Locked = False
        ws.Rows(rowStart & ":" & rowEnd).Select
        Selection.Locked = True
        ws.Range("A:A").Select
        Selection.Locked = True
        If ParaList(0) = True Then
            ws.EnableSelection = xlUnlockedCells
            ws.EnableSelection = xlNoRestrictions
        End If
               
        ws.Protect Password:="11", _
            DrawingObjects:=ParaList(1), _
            UserInterfaceOnly:=ParaList(4), _
            AllowFormattingCells:=ParaList(5), _
            AllowFormattingColumns:=ParaList(6), _
            AllowFormattingRows:=ParaList(7), _
            AllowInsertingColumns:=ParaList(8), _
            AllowInsertingRows:=ParaList(9), _
            AllowInsertingHyperlinks:=ParaList(10), _
            AllowDeletingColumns:=ParaList(11), _
            AllowDeletingRows:=ParaList(12), _
            AllowSorting:=ParaList(13), _
            AllowFiltering:=ParaList(14), _
            AllowUsingPivotTables:=ParaList(15)
    End If
     
    ThisWorkbook.Worksheets("CL0-Cover Sheet").Activate
    Range("G10").Select
End Sub

Private Sub protectOptions(boolLock As Boolean, ParaList() As Boolean, rowStart As String, rowEnd As String)
    Dim ws As Worksheet
    
    Set ws = Sheets("Employee Options")
    
    If Me.Locked.value = "Locked" Then
        ws.Unprotect Password:="11"
    Else
        ws.Activate
        ws.Unprotect Password:="11"
        ws.Cells.Select
        Selection.Locked = False
        ws.Rows(rowStart & ":" & rowEnd).Select
        Selection.Locked = True
        ws.Range("A:A").Select
        Selection.Locked = True
        If ParaList(0) = True Then
            ws.EnableSelection = xlUnlockedCells
            ws.EnableSelection = xlNoRestrictions
        End If
               
        ws.Protect Password:="11", _
            DrawingObjects:=ParaList(1), _
            UserInterfaceOnly:=ParaList(4), _
            AllowFormattingCells:=ParaList(5), _
            AllowFormattingColumns:=ParaList(6), _
            AllowFormattingRows:=ParaList(7), _
            AllowInsertingColumns:=ParaList(8), _
            AllowInsertingRows:=ParaList(9), _
            AllowInsertingHyperlinks:=ParaList(10), _
            AllowDeletingColumns:=ParaList(11), _
            AllowDeletingRows:=ParaList(12), _
            AllowSorting:=ParaList(13), _
            AllowFiltering:=ParaList(14), _
            AllowUsingPivotTables:=ParaList(15)
    End If
     
    ThisWorkbook.Worksheets("CL0-Cover Sheet").Activate
    Range("G10").Select
End Sub

Public Sub LockUnlockTS_Click()
    Dim protectParameters() As Boolean
    Dim i As Integer
    
   
    i = 0
    Application.ScreenUpdating = False

    
    protectParameters = ProtectParaList
  
    If Me.Locked.value = "Unlocked" Then
        Call protectTimeSheet(True, protectParameters, Me.txtSecurityRowStart.value, Me.txtSecurityRowEnd.value)
        ActiveWorkbook.Protect Password:="11", structure:=True, Windows:=False
        Me.Locked.value = "Locked"
    Else
        ActiveWorkbook.Unprotect Password:="11"
        Call protectTimeSheet(False, protectParameters, Me.txtSecurityRowStart.value, Me.txtSecurityRowEnd.value)
        Me.Locked.value = "Unlocked"
    End If
    
    Sheets("Current Pay Hours Overrides").Unprotect "11"
    
    
    Range("G10").Select
End Sub

Public Sub LockUnlockOptions_Click()
    Dim protectParameters() As Boolean
    Dim i As Integer
    
   
    i = 0
    Application.ScreenUpdating = False

    
    protectParameters = ProtectParaList
  
    If Me.Locked.value = "Unlocked" Then
        Call protectOptions(True, protectParameters, Me.txtSecurityRowStart.value, Me.txtSecurityRowEnd.value)
        ActiveWorkbook.Protect Password:="11", structure:=True, Windows:=False
        Me.Locked.value = "Locked"
    Else
        ActiveWorkbook.Unprotect Password:="11"
        Call protectOptions(False, protectParameters, Me.txtSecurityRowStart.value, Me.txtSecurityRowEnd.value)
        Me.Locked.value = "Unlocked"
    End If
    
    Sheets("Current Pay Hours Overrides").Unprotect "11"
    
    
    Range("G10").Select
End Sub


Attribute VB_Name = "frmUserEntry"
Attribute VB_Base = "0{8F0272B1-D60F-4A68-BA3D-1F8409951690}{AFE8E0CD-02DA-4223-99D8-6CCEC48BFA5E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Public firstName As String
Public lastName As String
Public employeeID As String


Private Sub ComboBox31_Change()
    If Trim(Me.ComboBox31) = "Yes" Then
        Me.txtNHLName2.Enabled = True
        Me.txtNHFName2.Enabled = True
        Me.txtNHInit2.Enabled = True
    Else
        Me.txtNHLName2.Enabled = False
        Me.txtNHFName2.Enabled = False
        Me.txtNHInit2.Enabled = False
        Me.txtNHLName2.value = Me.txtLName
        Me.txtNHFName2.value = Me.txtFname
        Me.txtNHInit2.value = Me.txtInitial
    End If
End Sub



Private Sub TextBox14_AfterUpdate()
    
    Dim strSIN As String
    Dim intSINDigit As Integer
    Dim intSum As Single
    
    If TextBox14 <> "" Then
        strSIN = TextBox14.value
        If (Len(strSIN) <> 9) Or Not (IsNumeric(strSIN)) Then
            MsgBox "SIN: " & strSIN & " is invalid" & vbCrLf & "Please enter a valid SIN #" & Dept, vbCritical, "SIN Validation"
            TextBox14 = Null
        Else
            ' Validate SIN
            intSum = 0
            For posDigit = 1 To 9
                intSINDigit = Mid(strSIN, posDigit, 1)
                If posDigit Mod 2 = 0 Then
                    If (intSINDigit) * 2 >= 10 Then
                        intSum = intSum + ((intSINDigit * 2) - 9)
                    Else
                        intSum = intSum + (intSINDigit * 2)
                    End If
                Else
                    intSum = intSum + intSINDigit
                End If
            Next
            
            intSum = intSum / 10
            If Int(intSum) <> intSum Then
                MsgBox "SIN: " & strSIN & " is invalid" & vbCrLf & "Please enter a valid SIN #" & Dept, vbCritical, "SIN Validation"
                TextBox14 = Null
            End If
        End If
    End If
    
End Sub

Private Sub TextBox75_AfterUpdate()
    
    Dim strSIN As String
    Dim intSINDigit As Integer
    Dim intSum As Single
    
    If TextBox75 <> "" Then
        strSIN = TextBox75.value
        If (Len(strSIN) <> 9) Or Not (IsNumeric(strSIN)) Then
            MsgBox "SIN: " & strSIN & " is invalid" & vbCrLf & "Please enter a valid SIN #" & Dept, vbCritical, "SIN Validation"
            TextBox75 = Null
        Else
            ' Validate SIN
            intSum = 0
            For posDigit = 1 To 9
                intSINDigit = Mid(strSIN, posDigit, 1)
                If posDigit Mod 2 = 0 Then
                    If (intSINDigit) * 2 >= 10 Then
                        intSum = intSum + ((intSINDigit * 2) - 9)
                    Else
                        intSum = intSum + (intSINDigit * 2)
                    End If
                Else
                    intSum = intSum + intSINDigit
                End If
            Next
            
            intSum = intSum / 10
            If Int(intSum) <> intSum Then
                MsgBox "SIN: " & strSIN & " is invalid" & vbCrLf & "Please enter a valid SIN #" & Dept, vbCritical, "SIN Validation"
                TextBox75 = Null
            End If
        End If
    End If
    
End Sub

Private Sub txtNHFName_Change()

    Me.txtFname.value = Trim(Me.txtNHFName)

End Sub

Private Sub txtNHLName_Change()

    Me.txtLName.value = Trim(Me.txtNHLName)

End Sub

Private Sub UserForm_Initialize()
    
    Dim widthX As Single
    Dim heightX As Single
    
    If Application.Width < 750 And Application.Height < 550 Then
        With Me
            .StartUpPosition = 1
            .Width = Application.Width * 0.95
            .Height = Application.Height * 0.82
            .Left = Application.Left + (Application.Width * 0.95) \ 2
            .Top = Application.Top + (Application.Height * 0.82) \ 2
            Zoom = 55
        End With
        GoTo Skip
    ElseIf Application.Width < 900 And Application.Height < 650 Then
        With Me
            .StartUpPosition = 1
            .Width = Application.Width * 0.95
            .Height = Application.Height * 0.9
            .Left = Application.Left + (Application.Width * 0.95) \ 2
            .Top = Application.Top + (Application.Height * 0.9) \ 2
            Zoom = 70
        End With
        GoTo Skip
    ElseIf Application.Width < 1000 And Application.Height < 800 Then
        With Me
            .StartUpPosition = 1
            .Width = Application.Width * 0.85
            .Height = Application.Height * 0.95
            .Left = Application.Left + (Application.Width * 0.85) \ 2
            .Top = Application.Top + (Application.Height * 0.95) \ 2
            Zoom = 80
        End With
        GoTo Skip
    ElseIf Application.Width < 1085 And Application.Height < 900 Then
        With Me
            .StartUpPosition = 1
            .Width = Application.Width * 0.85
            .Height = Application.Height * 0.95
            .Left = Application.Left + (Application.Width * 0.85) \ 2
            .Top = Application.Top + (Application.Height * 0.95) \ 2
            Zoom = 80
        End With
        GoTo Skip
    End If
Skip:

    VersionNum = Trim(Left(Sheets("CL0-Cover Sheet").Range("L45").value, Len(Sheets("CL0-Cover Sheet").Range("L45").value)))
    
    If Sheets("New Hires Setup").Range("I1").value = VersionNum & "-S" Then
        Me.Label44.Visible = False
        Me.TextBox26.Visible = False
        Me.Label91.Visible = False
        Me.TextBox60.Visible = False
    End If
    
    If Sheets("Transfers").Columns("Q:Q").Hidden = True Then
        Me.Label128.Visible = False
        Me.txtNewEmpID.Visible = False
    End If

End Sub


Private Sub cboPaymentType_Change()
    If Trim(Me.cboPaymentType) = "D - Deposit" Then
        Me.txtAccount1.Visible = True
        Me.txtBank1.Visible = True
        Me.txtBranch1.Visible = True
        Me.txtAccount2.Visible = True
        Me.txtBank2.Visible = True
        Me.txtBranch2.Visible = True
        Me.Label46.Visible = True
        Me.Label47.Visible = True
        Me.Label48.Visible = True
        Me.Label49.Visible = True
        Me.Label50.Visible = True
        Me.Label51.Visible = True
    Else
        Me.txtAccount1.Visible = False
        Me.txtBank1.Visible = False
        Me.txtBranch1.Visible = False
        Me.txtAccount2.Visible = False
        Me.txtBank2.Visible = False
        Me.txtBranch2.Visible = False
        Me.Label46.Visible = False
        Me.Label47.Visible = False
        Me.Label48.Visible = False
        Me.Label49.Visible = False
        Me.Label50.Visible = False
        Me.Label51.Visible = False
    End If
End Sub
Private Sub cboPaymentType2_Change()
    If Trim(Me.cboPaymentType2) = "D - Deposit" Then
        Me.txtAccount12.Visible = True
        Me.txtBank12.Visible = True
        Me.txtBranch12.Visible = True
        Me.txtAccount22.Visible = True
        Me.txtBank22.Visible = True
        Me.txtBranch22.Visible = True
        Me.Label110.Visible = True
        Me.Label111.Visible = True
        Me.Label112.Visible = True
        Me.Label113.Visible = True
        Me.Label114.Visible = True
        Me.Label115.Visible = True
    Else
        Me.txtAccount12.Visible = False
        Me.txtBank12.Visible = False
        Me.txtBranch12.Visible = False
        Me.txtAccount22.Visible = False
        Me.txtBank22.Visible = False
        Me.txtBranch22.Visible = False
        Me.Label110.Visible = False
        Me.Label111.Visible = False
        Me.Label112.Visible = False
        Me.Label113.Visible = False
        Me.Label114.Visible = False
        Me.Label115.Visible = False
    End If
End Sub

Private Sub cboReasonCodes_Change()
    'If Me.cboReasonCodes = "K00-Other" Then
    '    Me.txtROEComments.Visible = True
    '    Me.Label22.Visible = True
    'Else
    '    Me.txtROEComments.Visible = False
    '    Me.Label22.Visible = False
    'End If
End Sub

Private Sub cmdBirthDate_Click()
    dateVariable = CalendarForm.GetDate
    If dateVariable <> 0 Then Me.txtEmpDOB.value = dateVariable
End Sub
Private Sub cmdBirthDate2_Click()
    dateVariable = CalendarForm.GetDate
    If dateVariable <> 0 Then Me.txtEmpDOB2.value = dateVariable
End Sub


Private Sub cmdEffDate_Click()
    dateVariable = CalendarForm.GetDate
    If dateVariable <> 0 Then Me.txtEffDate = dateVariable
End Sub

Private Sub cmdHireDate_Click()
    dateVariable = CalendarForm.GetDate
    If dateVariable <> 0 Then Me.txtHireDate.value = dateVariable
End Sub

Private Sub cmdHireDate2_Click()
    dateVariable = CalendarForm.GetDate
    If dateVariable <> 0 Then Me.txtHireDate2.value = dateVariable
End Sub
Private Sub cmdHireDate3_Click()
    dateVariable = CalendarForm.GetDate
    If dateVariable <> 0 Then Me.txtHireDate3.value = dateVariable
End Sub


Private Sub cmdLastPaid_Click()
    dateVariable = CalendarForm.GetDate
    If dateVariable <> 0 Then Me.txtLastDayPaid.value = dateVariable
End Sub

Private Sub cmdReset_Click()
    Dim cCont As Control
    For Each cCont In frmUserEntry.Controls
        If (TypeName(cCont) = "TextBox" Or TypeName(cCont) = "ComboBox") Then
           cCont.value = ""
        End If
    Next cCont
End Sub

Private Sub cmdSave_Click()
    Call SaveToGrid
End Sub

Private Sub txtEmpID_AfterUpdate()

    If Me.txtEmpID <> "" And (employeeID <> Me.txtEmpID Or lastName <> Me.txtLName Or firstName <> Me.txtFname) Then
        Call LoadValues(Trim(Me.txtEmpID), 3, Application.ActiveCell)
    End If
   
End Sub
Private Sub txtFname_AfterUpdate()

    If Me.txtFname <> "" And (employeeID <> Me.txtEmpID Or lastName <> Me.txtLName Or firstName <> Me.txtFname) Then
        Call LoadValues(Trim(Me.txtFname), 1, Application.ActiveCell)
    End If
    
    Me.txtNHFName.value = Trim(Me.txtFname)
    
End Sub
Private Sub txtLName_AfterUpdate()

    If Me.txtLName <> "" And (employeeID <> Me.txtEmpID Or lastName <> Me.txtLName Or firstName <> Me.txtFname) Then
        Call LoadValues(Trim(Me.txtLName), 0, Application.ActiveCell)
    End If
    
    Me.txtNHLName.value = Trim(Me.txtLName)
   
End Sub


Private Sub UserForm_Activate()
    With frmUserEntry
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
    End With
    firstName = " "
    lastName = " "
    employeeID = " "
End Sub

Private Sub LoadValues(EmpNum As String, searchPos As Integer, targetRow As Range)

    Dim FieldValues()
    Dim DictValues()
    Dim formOrGrid As String
    On Error GoTo errHandler
    If activeSheet.Name <> "New Hires" Then
        If activeSheet.Name = "Employee Info Changes" Then
            FieldValues = Array(4, 5, 3, 0, 1, 6, 2)
        Else
            'Index number of the values stored in the array based on the master setup tab
            FieldValues = Array(4, 5, 3, 0, 1, 6)
        End If
        
        formOrGrid = "Form"
        
        DictValues = GetValues(EmpNum, FieldValues, searchPos, targetRow, formOrGrid)

        If DictValues(1) = "Skipped" Or DictValues(1) = "Cancelled" Then
            Me.txtBranch = ""
            Me.txtDept = ""
            Me.txtEmpID = ""
            Me.txtLName = ""
            Me.txtFname = ""
            Me.txtUniqueKey = ""
        Else
            Me.txtBranch = DictValues(0)
            Me.txtDept = DictValues(1)
            Me.txtEmpID = DictValues(2)
            Me.txtLName = DictValues(3)
            Me.txtFname = DictValues(4)
            Me.txtUniqueKey = DictValues(5)
        End If

        If activeSheet.Name = "Employee Info Changes" Then
            Me.txtInitial = DictValues(6)
        End If
        Me.txtNHLName2.value = Trim(Me.txtLName)
        Me.txtNHFName2.value = Trim(Me.txtFname)
        Me.txtNHInit2.value = Trim(Me.txtInitial)
        firstName = Trim(Me.txtFname)
        lastName = Trim(Me.txtLName)
        employeeID = Trim(Me.txtEmpID)
    End If
    Exit Sub
errHandler:
    Exit Sub
    
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    quickFormView = False
End Sub
Attribute VB_Name = "mdlPasteControl"
'Written by Aaron Bush 08/06/2007
'Free for private Use, provided "As-Is" with no warranties express or implied.
'Please retain this notice.
Option Explicit
Option Private Module
Option Compare Binary
Private m_oPasteFile As Object
Private Const m_sFSO_c As String = "Scripting.FileSystemObject"
Private Const m_sPasteProcedure_c As String = "PasteSpecial"
Private Const m_sUbndoProcedure_c As String = "UndoPasteSpecial"
Private Const m_sCutWarningProcedure_c As String = "CutWarning"
Private Const m_ClearClipboard As String = "ClearClipboard"
Private m_oWS As Excel.Worksheet
'Microsoft Scripting Runtime Constants:
Private Const TristateTrue As Long = -1
Private Const ForReading As Long = 1
Private Const ForWriting As Long = 2
Private Const TemporaryFolder As Long = 2
'Error Handling Constants:
Private Const m_sTitle_c As String = "Error Number: "
Private Const m_lButtons_c As Long = vbExclamation + vbMsgBoxSetForeground + vbMsgBoxHelpButton
'Interface Control Constants:
Const m_sTag_c As String = "ForcePaste"
Public Sub ForcePasteSpecial()
    LockInterface
    Excel.Application.OnKey "%^v", m_sPasteProcedure_c
    Excel.Application.OnKey "^v", m_sPasteProcedure_c
    Excel.Application.OnKey "+{INSERT}", m_sPasteProcedure_c
'    Excel.Application.OnKey "~", m_sPasteProcedure_c
    Excel.Application.OnKey "~", m_ClearClipboard
    Excel.Application.OnKey "^x", m_sCutWarningProcedure_c
    CutButtonsEnable False
    DisableInsertCells
    Application.AutoCorrect.ReplaceText = False
Exit_Proc:
    On Error Resume Next
    UnlockInterface
    Exit Sub
Err_Hnd:
    VBA.MsgBox VBA.err.Description, m_lButtons_c, m_sTitle_c & CStr(VBA.err.Number), VBA.err.HelpFile, VBA.err.HelpContext
    Resume Exit_Proc
End Sub

Public Sub ClearClipboard()
    Application.CutCopyMode = False
End Sub

Public Sub ReleasePasteControl()
    On Error GoTo Err_Hnd
    LockInterface
    Excel.Application.OnKey "%^v"
    Excel.Application.OnKey "^v"
    Excel.Application.OnKey "+{INSERT}"
    Excel.Application.OnKey "~"
    Excel.Application.OnKey "^x"
    CutButtonsEnable True
    EnableInsertCells
    Application.AutoCorrect.ReplaceText = True
Exit_Proc:
    On Error Resume Next
    m_oPasteFile.Delete True
    UnlockInterface
    Exit Sub
Err_Hnd:
    VBA.MsgBox VBA.err.Description, m_lButtons_c, m_sTitle_c & CStr(VBA.err.Number), VBA.err.HelpFile, VBA.err.HelpContext
    Resume Exit_Proc
End Sub

Public Sub DisableInsertCells()
    On Error Resume Next
    Application.CommandBars("Worksheet Menu Bar").FindControl(ID:=295, Recursive:=True).Enabled = False
    Application.CommandBars("Cell").FindControl(ID:=3181).Enabled = False
    Application.CommandBars("Row").FindControl(ID:=3181).Enabled = False
    Application.CommandBars("Column").FindControl(ID:=3183).Enabled = False
End Sub

Public Sub EnableInsertCells()
    On Error Resume Next
    Application.CommandBars("Worksheet Menu Bar").FindControl(ID:=295, Recursive:=True).Enabled = True
    Application.CommandBars("Cell").FindControl(ID:=3181).Enabled = True
    Application.CommandBars("Row").FindControl(ID:=3181).Enabled = True
    Application.CommandBars("Column").FindControl(ID:=3183).Enabled = True
End Sub

Public Sub DisablePasteSpecialMenu()
    On Error Resume Next
    Application.CommandBars("Cell").FindControl(ID:=21437).Enabled = False
    Application.CommandBars("Row").FindControl(ID:=21437).Enabled = False
    Application.CommandBars("Column").FindControl(ID:=21437).Enabled = False
End Sub

Public Sub EnablePasteSpecialMenu()
    On Error Resume Next
    Application.CommandBars("Cell").FindControl(ID:=21437).Enabled = True
    Application.CommandBars("Row").FindControl(ID:=21437).Enabled = True
    Application.CommandBars("Column").FindControl(ID:=21437).Enabled = True
End Sub

Public Sub DisablePasteOptions()
    On Error Resume Next
    
    Application.CutCopyMode = False
    With Application
        .AutoPercentEntry = False
        .DisplayPasteOptions = False
    End With
End Sub

Public Sub EnablePasteOptions()
    On Error Resume Next

    Application.CutCopyMode = True
    With Application
        .AutoPercentEntry = True
        .DisplayPasteOptions = True
    End With
End Sub

Public Sub PasteSpecial()
    On Error GoTo Err_Hnd
    
    Const lPasteError_c As Long = 1004
    Const lFNFError_c As Long = 53
    
    Dim bRunOnce As Boolean
    Dim oFSO As Object
    Dim oTS As Object
    Dim oCll As Excel.Range
    Dim oDataRng As Excel.Range
    Dim lLstRow As Long
    Dim sTmpPth As String
    Dim Target As Range
    
    LockInterface
    
    ThisWorkbook.currentProcedure = "PasteSpecial"
    
    If Excel.ActiveWorkbook Is Excel.ThisWorkbook Then
        Set oFSO = VBA.CreateObject(m_sFSO_c)
        If m_oPasteFile Is Nothing Then
CreateFile:
            sTmpPth = oFSO.BuildPath(oFSO.GetSpecialFolder(TemporaryFolder), oFSO.GetTempName)
        Else
            sTmpPth = m_oPasteFile.ShortPath
        End If
        
        If oFSO.FileExists(sTmpPth) Then oFSO.DeleteFile sTmpPth, True
        
        oFSO.CreateTextFile sTmpPth, True, True
        Set m_oPasteFile = oFSO.GetFile(sTmpPth)
        Set oTS = m_oPasteFile.OpenAsTextStream(ForWriting, TristateTrue)
        Excel.activeSheet.UsedRange
'        Set oDataRng = Excel.ActiveSheet.UsedRange
        Set oDataRng = activeSheet.Cells.Find(what:="*", After:=Cells(1, 1), LookIn:=xlFormulas, lookat:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, MatchCase:=False)

        lLstRow = oDataRng.row
        oTS.WriteLine oDataRng.Address
        
        For Each oCll In oDataRng.Cells
            If lLstRow <> oCll.row Then
                lLstRow = oCll.row
                oTS.Write vbNewLine
            End If
            oTS.Write oCll.Formula & vbTab
        Next oCll
        
        Set m_oWS = Excel.activeSheet

        Dim sheetName As String
        sheetName = ThisWorkbook.activeSheet.Name

'        If sheetName <> "Employee Options" And Excel.Selection.NumberFormat <> "@" Then
        If sheetName <> "Employee Options" Then
            Excel.Selection.PasteSpecial xlPasteValues, xlPasteSpecialOperationNone, False, False
            
        Else
            Excel.Selection.PasteSpecial xlPasteValuesAndNumberFormats, xlPasteSpecialOperationNone, False, False
        End If
        
        If activeSheet.Name <> "New Hires" And activeSheet.Name <> "CL0-Cover Sheet" Then
            Call LoadValuesStatusChange(Excel.Selection)
            If activeSheet.Name = "Employee Info Changes" Then
                Call SINValidation(Excel.Selection, "Employee Info Changes", 13)
            End If
        ElseIf activeSheet.Name = "New Hires" Then
            Call ValidateNewHire(Excel.Selection)
            Call SINValidation(Excel.Selection, "New Hires", 12)
        End If

        Excel.Application.OnUndo "&Undo Paste", m_sUbndoProcedure_c
    Else
        Excel.activeSheet.Paste
    End If

Exit_Proc:
        On Error Resume Next
        oTS.Close
        UnlockInterface
        Call ThisWorkbook.Workbook_SheetChange(Excel.activeSheet, Excel.Selection)
        Application.EnableEvents = True
        Debug.Print err.Description
        ThisWorkbook.currentProcedure = ""
        Exit Sub
Err_Hnd:
        Select Case VBA.err.Number
            Case lPasteError_c
                If Not bRunOnce Then
                    bRunOnce = True
                    Debug.Print VBA.err.Description
                    VBA.err.Clear

                    Dim MyData, Number As Integer
                    Dim a As String
    
                    Set MyData = New DataObject
                    MyData.GetFromClipboard
    
                    a = MyData.GetFormat(1)
                    Number = UBound(Split(a, Chr(13) & Chr(10)))
    
                    If MyData.GetFormat(1) = True Then
                        On Error Resume Next
                        activeSheet.PasteSpecial Format:="Text", NoHTMLFormatting:=True
                        If activeSheet.Name <> "New Hires" Then
                            Call LoadValuesStatusChange(Excel.Selection)
                        Else
                            Call ValidateNewHire(Excel.Selection)
                        End If
                        
                   End If
                    
                    Resume Exit_Proc
                End If
            Case lFNFError_c
                Resume CreateFile
        End Select
        
        VBA.MsgBox VBA.err.Description, m_lButtons_c, m_sTitle_c & CStr(VBA.err.Number), VBA.err.HelpFile, VBA.err.HelpContext
        Resume Exit_Proc
        Resume
End Sub

Public Sub UndoPasteSpecial()
    On Error GoTo Err_Hnd
    Dim oTS As Object
    Dim lRow As Long
    Dim lCol As Long
    Dim vLine As Variant
    Dim sAddress As String
    Dim lColOffset As Long
    Const lLimit_c As Long = 256
    Const lStep_c As Long = 1
    Const lZero_c As Long = 0
    Const lOffset_c As Long = 1
    LockInterface
    If m_oPasteFile Is Nothing Then
        VBA.err.Raise vbObjectError, m_sUbndoProcedure_c, "Cannot find stored paste data. Procedure cannot be reveresed."
    End If
    Set oTS = m_oPasteFile.OpenAsTextStream(ForReading, TristateTrue)
    If Not oTS.AtEndOfStream Then
        sAddress = oTS.ReadLine
        With m_oWS.Range(sAddress)
            lColOffset = .Column
            lRow = .row
        End With
    End If
    m_oWS.UsedRange.ClearContents
    Do Until oTS.AtEndOfStream
        vLine = VBA.Split(oTS.ReadLine, vbTab, lLimit_c, vbBinaryCompare)
        For lCol = lZero_c To UBound(vLine)
            If VBA.IsNumeric(vLine(lCol)) Then
                m_oWS.Cells(lRow, lCol + lColOffset).Formula = CDbl(vLine(lCol))
            Else
                m_oWS.Cells(lRow, lCol + lColOffset).Formula = vLine(lCol)
            End If
        Next
        lRow = lRow + lStep_c
    Loop
Exit_Proc:
    On Error Resume Next
    oTS.Close
    UnlockInterface
    Exit Sub
Err_Hnd:
    VBA.MsgBox VBA.err.Description, m_lButtons_c, m_sTitle_c & CStr(VBA.err.Number), VBA.err.HelpFile, VBA.err.HelpContext
    Resume Exit_Proc
    Resume
End Sub

Public Sub ReplacePasteButtons()
    On Error GoTo Err_Hnd
    Dim oPasteBtns As Office.CommandBarControls
    Dim oPasteBtn As Office.CommandBarButton
    Dim oNewBtn As Office.CommandBarButton
    Const lIDPaste_c As Long = 22
    RestorePasteButtons
    Set oPasteBtns = Excel.Application.CommandBars.FindControls(ID:=lIDPaste_c)
    For Each oPasteBtn In oPasteBtns
        Set oNewBtn = oPasteBtn.Parent.Controls.Add(msoControlButton, Before:=oPasteBtn.Index, Temporary:=True)
        oNewBtn.FaceId = lIDPaste_c
        oNewBtn.Caption = oPasteBtn.Caption
        oNewBtn.TooltipText = oPasteBtn.TooltipText
        oNewBtn.Style = oPasteBtn.Style
        oNewBtn.BeginGroup = oPasteBtn.BeginGroup
        oNewBtn.Tag = m_sTag_c
        oNewBtn.OnAction = m_sPasteProcedure_c
        oPasteBtn.Visible = False
    Next
    Exit Sub
Err_Hnd:
    VBA.MsgBox VBA.err.Description, m_lButtons_c, m_sTitle_c & CStr(VBA.err.Number), VBA.err.HelpFile, VBA.err.HelpContext
End Sub
Public Sub RestorePasteButtons()
    On Error GoTo Err_Hnd
    Dim oBtns As Office.CommandBarControls
    Dim oBtn As Office.CommandBarButton
    Const lIDPaste_c As Long = 22
    Const m_sTag_c As String = "ForcePaste"
    Set oBtns = Excel.Application.CommandBars.FindControls(ID:=lIDPaste_c)
    For Each oBtn In oBtns
        oBtn.Visible = True
    Next
    Set oBtns = Excel.Application.CommandBars.FindControls(Tag:=m_sTag_c)
    If Not oBtns Is Nothing Then
        For Each oBtn In oBtns
            oBtn.Delete
        Next
    End If
    Exit Sub
Err_Hnd:
    VBA.MsgBox VBA.err.Description, m_lButtons_c, m_sTitle_c & CStr(VBA.err.Number), VBA.err.HelpFile, VBA.err.HelpContext
End Sub

Public Sub CutButtonsEnable(EnableButton As Boolean)
    On Error GoTo Err_Hnd
    Dim oCutBtns As Office.CommandBarControls
    Dim oCutBtn As Office.CommandBarButton
    Const lIDCut_c As Long = 21
    Set oCutBtns = Excel.Application.CommandBars.FindControls(ID:=lIDCut_c)
    For Each oCutBtn In oCutBtns
        oCutBtn.Enabled = EnableButton
    Next
    Exit Sub
Err_Hnd:
    VBA.MsgBox VBA.err.Description, m_lButtons_c, m_sTitle_c & CStr(VBA.err.Number), VBA.err.HelpFile, VBA.err.HelpContext
End Sub
Public Sub CutWarning()
On Error Resume Next
    VBA.MsgBox "The clipboard action ""Cut"" is not available for this workbook.", vbInformation + vbMsgBoxSetForeground, "Cut Disabled"
End Sub
Public Sub LockInterface()
    With Excel.Application
        .EnableEvents = False
        .ScreenUpdating = False
'        .Cursor = xlWait
        .EnableCancelKey = xlErrorHandler
    End With
End Sub
Public Sub UnlockInterface()
    With Excel.Application
        .EnableEvents = True
        .ScreenUpdating = True
'        .Cursor = xlDefault
        .EnableCancelKey = xlInterrupt
    End With
End Sub


' InQuest injected base64 decoded content
' x)br
' rgRy

INQUEST-PP=macro
