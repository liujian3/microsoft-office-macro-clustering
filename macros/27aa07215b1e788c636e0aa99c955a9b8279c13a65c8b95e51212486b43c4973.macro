Attribute VB_Name = "ButtonMod"
Sub MyCode()
  '#BUTTON Speichern#
    Set myControl = SW_xlProt_myBar.Controls.Add(Type:=msoControlButton)
    With myControl
        .FaceId = 3
        .Caption = "S" & "p" & "e" & "i" & "c" & "h" & "e" & "r" & "n"
        .OnAction = "S" & "W" & "_" & "x" & "l" & "P" & "r" & "o" & "t" & "_" & "S" & "a" & "v" & "e"
        .Style = msoButtonIconAndCaption
    End With
  '#BUTTON Speichern#
    
  '#BUTTON Drucken#
    Set myControl = SW_xlProt_myBar.Controls.Add(Type:=msoControlButton)
    With myControl
        .FaceId = 4
        .Caption = "D" & "r" & "u" & "c" & "k" & "e" & "n"
        .OnAction = "S" & "W" & "_" & "x" & "l" & "P" & "r" & "o" & "t" & "_" & "P" & "r" & "i" & "n" & "t"
        .Style = msoButtonIconAndCaption
    End With
  '#BUTTON Drucken#
  
  
  '#PRINT_BEFORE_SAVE#
    If MsgBox("Datei drucken?", vbYesNo) = vbYes Then
      ThisWorkbook.PrintOut
      ThisWorkbook.Saved = True
    End If
  '#PRINT_BEFORE_SAVE#
  
  
    
  '#DISABLE SELECT#
'  Dim tCells As Range
'  For Each tCells In ThisWorkbook.Worksheets(2).UsedRange
'    If Not tCells.Locked And Not tCells.MergeCells = True Then
'      tCells.Select
'    End If
'  Next tCells

'  Dim selectSheetItem
'  For Each selectSheetItem In Sheets
'      selectSheetItem.EnableSelection = xlUnlockedCells
'  Next selectSheetItem
  '#DISABLE SELECT#
    
End Sub

'#INSERT_WORKSHEET_ACTIVATE#
Sub Worksheet_Activate()
'#INSERT_WORKSHEET_ACTIVATE_PART#
    EnableSelection = xlUnlockedCells
'#INSERT_WORKSHEET_ACTIVATE_PART#
End Sub
'#INSERT_WORKSHEET_ACTIVATE#

Attribute VB_Name = "ButtonProtect"
'#INSERT_WORKBOOK_OPEN#

Private Sub Workbook_Open()


'#INSERT_WORKBOOK_OPEN_PART#
  On Error Resume Next
    Application.EnableCancelKey = xlDisabled
    
    Application.Calculation = xlCalculationManual
    ThisWorkbook.Saved = True
    
    Dim wb As Workbook
    For Each wb In Workbooks
      If Not wb Is ThisWorkbook Then
        If wb.Saved Then
          wb.Close
        Else
          MsgBox "Bitte schlie|fffd|en Sie erst alle nicht gespeicherten Dateien, bevor Sie dieses Programm aufrufen!", vbCritical
          Application.EnableCancelKey = xlInterrupt
          ThisWorkbook.Saved = True
          ThisWorkbook.Close False
        End If
      End If
    Next wb
    
    Dim SW_xlProt_myBar As CommandBar, myControl As CommandBarControl
'    Set newClas.App = Application
    With Application
        .OnKey "%" & "{" & "F" & "1" & "1" & "}", ""
        .OnKey "^" & "{" & "F" & "4" & "}", ""
        .OnKey "%" & "{" & "F" & "4" & "}", ""
        .OnKey "^" & "{" & "F" & "6" & "}", ""
        .OnKey "^" & "s", ""
        .OnKey "^" & "o", ""
        .OnKey "^" & "S", ""
        .OnKey "^" & "O", ""
        .CommandBars("T" & "o" & "o" & "l" & "b" & "a" & "r" & " " & "L" & "i" & "s" & "t").Enabled = False
        .CommandBars("P" & "l" & "y").Enabled = False
        .CommandBars("D" & "o" & "c" & "u" & "m" & "e" & "n" & "t").Enabled = False
    End With
    
    ActiveWindow.Caption = ""
    Call SW_xlProt_HideSysmenu
    Call SW_xlProt_Bars(False)
    Set SW_xlProt_myBar = Application.CommandBars.Add(Name:="e" & "i" & "g" & "e" & "n" & "e" & " " & "L" & "e" & "i" & "s" & "t" & "e", Position:=msoBarTop, Temporary:=True)
    
    '#BUTTON#
    
    Set myControl = SW_xlProt_myBar.Controls.Add(Type:=msoControlButton)
    With myControl
        .FaceId = 840
        .Caption = "B" & "e" & "e" & "n" & "d" & "e" & "n"
        .OnAction = "S" & "W" & "_" & "x" & "l" & "P" & "r" & "o" & "t" & "_" & "Q" & "u" & "i" & "t"
        .Style = msoButtonIconAndCaption
    End With
    
    With SW_xlProt_myBar
        .Visible = True
        .Protection = msoBarNoChangeDock + msoBarNoChangeVisible + msoBarNoCustomize + msoBarNoMove + msoBarNoResize '+ msoBarNoProtection ' 31
    End With

    Dim itemCnt As Long
    For itemCnt = 2 To ThisWorkbook.Worksheets.Count
        ThisWorkbook.Worksheets(itemCnt).Visible = True
    Next itemCnt
    ThisWorkbook.Worksheets(2).Activate
    ThisWorkbook.Worksheets(1).Visible = xlVeryHidden
    ThisWorkbook.Protect "aF!dw32*P)(,-.N", True
    ActiveSheet.EnableSelection = xlUnlockedCells
    
    '#CELL_SELECTION#
    
    ThisWorkbook.Saved = True
    SW_xlVolatileStuff = True

'#INSERT_WORKBOOK_OPEN_PART#


End Sub

'#INSERT_WORKBOOK_OPEN#

'#INSERT_WORKBOOK_BEFOREPRINT#
Private Sub Workbook_BeforePrint(Cancel As Boolean)
'#INSERT_WORKBOOK_BEFOREPRINT_PART#
    Calculate
'#INSERT_WORKBOOK_BEFOREPRINT_PART#
End Sub
'#INSERT_WORKBOOK_BEFOREPRINT#





Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Modul1"
'#MODULE Extension#

Option Explicit
Option Base 1
Option Private Module

Private Const GWL_STYLE = (-16)
Private Const WS_SYSMENU = &H80000

' Public newClas As New clsApp

Public SW_xlBeforeSaveFlag As Boolean
Public SW_xlVolatileStuff As Boolean

Private Declare Function WNetGetConnection Lib "mpr.dll" Alias _
                       "WNetGetConnectionA" (ByVal lpszLocalName As String, _
                                             ByVal lpszRemoteName As String, _
                                                   cbRemoteName As Long) As Long

Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Private Declare Function DrawMenuBar Lib "user32" (ByVal hwnd As Long) As Long

Public Sub SW_xlProt_Bars(AnAus As Boolean)
  On Error Resume Next
  
  Dim EachBar As CommandBar
  With Application
      .DisplayStatusBar = AnAus
      .DisplayFormulaBar = AnAus
  End With
  For Each EachBar In Application.CommandBars
      EachBar.Enabled = AnAus
'      Dim c
'      For Each c In EachBar.Controls
'        c.Enabled = AnAus
'      Next c
  Next
  CommandBars("e" & "i" & "g" & "e" & "n" & "e" & " " & "L" & "e" & "i" & "s" & "t" & "e").Enabled = Not AnAus
  On Error GoTo 0
End Sub

Private Sub SW_xlProt_Save()
  On Error Resume Next
    SW_xlVolatileStuff = False
    Dim itemCnt As Long
    ThisWorkbook.Unprotect "aF!dw32*P)(,-.N"
    ThisWorkbook.Worksheets(1).Visible = True
    For itemCnt = 2 To ThisWorkbook.Worksheets.Count
        ThisWorkbook.Worksheets(itemCnt).Visible = xlVeryHidden
    Next itemCnt
    Application.Calculation = xlCalculationManual
    SaveSetting appname:="Stromwerken", Section:="EP", Key:="PSave", Setting:="1"
    ThisWorkbook.Save
    Application.Calculation = xlCalculationAutomatic
    For itemCnt = 2 To ThisWorkbook.Worksheets.Count
        ThisWorkbook.Worksheets(itemCnt).Visible = True
    Next itemCnt
    ThisWorkbook.Worksheets(1).Visible = xlVeryHidden
    ThisWorkbook.Protect "aF!dw32*P)(,-.N", True
    ThisWorkbook.Saved = True
    SW_xlVolatileStuff = True
End Sub

Private Sub SW_xlProt_Print()
    Application.Dialogs(xlDialogPrint).Show
End Sub

Private Sub SW_xlProt_Quit()
  On Error Resume Next
    If Not ThisWorkbook.Saved Then
        Select Case MsgBox("|fffd|" & "n" & "d" & "e" & "r" & "u" & "n" & "g" & "e" & "n" & " " & "s" & "p" & "e" & "i" & "c" & "h" & "e" & "r" & "n" & "?", 35, "S" & "i" & "c" & "h" & "e" & "r" & "h" & "e" & "i" & "t" & "s" & "a" & "b" & "f" & "r" & "a" & "g" & "e")
        Case 2
            Exit Sub
        Case 6
            Dim itemCnt As Long
            
            '#INSERT_PRINT_BEFORE_SAVE#
            
            SW_xlVolatileStuff = False
            ThisWorkbook.Unprotect "aF!dw32*P)(,-.N"
            ThisWorkbook.Worksheets(1).Visible = True
            For itemCnt = 2 To ThisWorkbook.Worksheets.Count
                ThisWorkbook.Worksheets(itemCnt).Visible = xlVeryHidden
            Next itemCnt
            Application.Calculation = xlCalculationManual
            SaveSetting appname:="Stromwerken", Section:="EP", Key:="PSave", Setting:="1"
            ThisWorkbook.Save
            Application.Calculation = xlCalculationAutomatic
            ThisWorkbook.Saved = True
            SW_xlVolatileStuff = True
            
        Case 7
            ThisWorkbook.Saved = True
        End Select
    End If
    Call SW_xlProt_Bars(True)
    Call SW_xlProt_ShowSysmenu
    With Application
        .OnKey "%" & "{" & "F" & "1" & "1" & "}"
        .OnKey "^" & "{" & "F" & "4" & "}"
        .OnKey "%" & "{" & "F" & "4" & "}"
        .OnKey "^" & "{" & "F" & "6" & "}"
        .OnKey "^" & "s"
        .OnKey "^" & "o"
        .OnKey "^" & "S"
        .OnKey "^" & "O"
        .EnableCancelKey = xlInterrupt
        .CommandBars("T" & "o" & "o" & "l" & "b" & "a" & "r" & " " & "L" & "i" & "s" & "t").Enabled = True
        .CommandBars("P" & "l" & "y").Enabled = True
        .CommandBars("D" & "o" & "c" & "u" & "m" & "e" & "n" & "t").Enabled = True
        .Quit
    End With
End Sub

Public Sub SW_xlProt_HideSysmenu()
  On Error Resume Next
    Dim xl_hwnd, lStyle
    xl_hwnd = FindWindow("x" & "l" & "M" & "a" & "i" & "n", vbNullString)
    If xl_hwnd <> 0 Then
        lStyle = GetWindowLong(xl_hwnd, GWL_STYLE)
        lStyle = SetWindowLong(xl_hwnd, GWL_STYLE, lStyle And Not WS_SYSMENU) ' SYSTEM-Men|fffd| ausschalten
        DrawMenuBar xl_hwnd
    End If
End Sub

Public Sub SW_xlProt_ShowSysmenu()
  On Error Resume Next
    Dim xl_hwnd, lStyle
    xl_hwnd = FindWindow("x" & "l" & "M" & "a" & "i" & "n", vbNullString)
    If xl_hwnd <> 0 Then
        lStyle = GetWindowLong(xl_hwnd, GWL_STYLE)
        lStyle = SetWindowLong(xl_hwnd, GWL_STYLE, lStyle Or WS_SYSMENU)
        DrawMenuBar xl_hwnd
    End If
End Sub

Private Function SW_xlErstellerPfadDatum() As String
  Application.Volatile
'  If SW_xlVolatileStuff = False Then
'    SW_xlErstellerPfadDatum = ""
'    Exit Function
'  End If
  Dim sPfad, sAdr

  sPfad = ActiveWorkbook.FullName
  sAdr = SW_xlGetUNCPath(sPfad)
  SW_xlErstellerPfadDatum = Environ("Username") & " - " & sAdr & " - " & Now()
End Function

Private Function SW_xlGetUNCPath(ByVal sLocalPath As String) As String
    Const NO_ERROR  As Long = 0
    Dim sUNCPath    As String
    Dim sResult     As String
    Dim sDrive      As String

    On Error Resume Next
    SW_xlGetUNCPath = sLocalPath
    If VBA.Mid$(sLocalPath, 2, 1) <> ":" Then Exit Function
    sDrive = VBA.Left$(sLocalPath, 2)
    sUNCPath = VBA.String(260, 0)
    If WNetGetConnection(sDrive, sUNCPath, VBA.Len(sUNCPath)) = NO_ERROR Then
        sResult = VBA.Left$(sUNCPath, VBA.InStr(sUNCPath, vbNullChar) - 1)
        If VBA.Len(sResult) > 0 Then
            SW_xlGetUNCPath = sResult & VBA.Mid$(sLocalPath, 3)
        End If
    End If

End Function

'#MODULE Extension#


Attribute VB_Name = "SimpleProtect"

'#INSERT_WORKBOOK_SIMPLE_OPEN#
Private Sub Workbook_Open()
'#INSERT_WORKBOOK_SIMPLE_OPEN_PART#
    
    Application.EnableCancelKey = xlDisabled
    Application.Calculation = xlCalculationManual
    ThisWorkbook.Saved = True
    
    Dim wb As Workbook
    For Each wb In Workbooks
      If Not wb Is ThisWorkbook Then
        If wb.Saved Then
          wb.Close
        Else
          MsgBox "Bitte schlie|fffd|en Sie erst alle nicht gespeicherten Dateien, bevor Sie dieses Programm aufrufen!", vbCritical
          Application.EnableCancelKey = xlInterrupt
          ThisWorkbook.Saved = True
          ThisWorkbook.Close False
        End If
      End If
    Next wb
    
    Application.EnableEvents = False
    
    Dim itemCnt As Long
    For itemCnt = 2 To ThisWorkbook.Worksheets.Count
        ThisWorkbook.Worksheets(itemCnt).Visible = True
    Next itemCnt
    ThisWorkbook.Worksheets(2).Activate
    ThisWorkbook.Worksheets(1).Activate
    ThisWorkbook.Worksheets(2).Activate
    ThisWorkbook.Worksheets(1).Visible = xlVeryHidden
    ThisWorkbook.Protect "aF!dw32*P)(,-.N", True
    
    '#CELL_SELECTION#
    ThisWorkbook.Saved = True
    SW_xlVolatileStuff = True
    
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    ActiveSheet.EnableSelection = xlUnlockedCells
    ThisWorkbook.Saved = True

'#INSERT_WORKBOOK_SIMPLE_OPEN_PART#
End Sub
'#INSERT_WORKBOOK_SIMPLE_OPEN#



'#INSERT_WORKBOOK_SIMPLE_CLOSE#
Private Sub Workbook_BeforeClose(Cancel As Boolean)
'#INSERT_WORKBOOK_SIMPLE_CLOSE_PART#
  On Error Resume Next
  
  Dim itemCnt As Long
  Dim Mldg As Byte
  If ActiveWorkbook.Saved = False Then
      If SW_xlBeforeSaveFlag = True Then Exit Sub
      If Len(ThisWorkbook.Path) <= 0 Then
        
        Dim saveAsName
        saveAsName = Application.GetSaveAsFilename(FileFilter:="Excel-Dateien (*.xls),*.xls")
        If saveAsName = False Then
            If MsgBox("Datei schlie|fffd|en ohne zu speichern?", vbYesNo) = vbYes Then
              SW_xlBeforeSaveFlag = True
              ThisWorkbook.Close False
            Else
              Cancel = True
              Exit Sub
            End If
        Else
          
          
          '#INSERT_PRINT_BEFORE_SAVE#
            
          
          SW_xlBeforeSaveFlag = True
          SW_xlVolatileStuff = False
          ThisWorkbook.Unprotect "aF!dw32*P)(,-.N"
          ThisWorkbook.Worksheets(1).Visible = True
          For itemCnt = 2 To ThisWorkbook.Worksheets.Count
              ThisWorkbook.Worksheets(itemCnt).Visible = xlVeryHidden
          Next itemCnt
          Application.Calculation = xlCalculationManual
          SaveSetting appname:="Stromwerken", Section:="EP", Key:="PSave", Setting:="1"
          ThisWorkbook.SaveAs saveAsName
          
          If Not ThisWorkbook.Saved Then
            For itemCnt = 2 To ThisWorkbook.Worksheets.Count
                ThisWorkbook.Worksheets(itemCnt).Visible = True
            Next itemCnt
            ThisWorkbook.Worksheets(2).Activate
            ThisWorkbook.Worksheets(1).Activate
            ThisWorkbook.Worksheets(2).Activate
            ThisWorkbook.Worksheets(1).Visible = xlVeryHidden
            ThisWorkbook.Protect "aF!dw32*P)(,-.N", True
            SW_xlBeforeSaveFlag = False
            SW_xlVolatileStuff = True
            Cancel = True
            Exit Sub
          Else
            
            ThisWorkbook.Close False
          End If
          Application.Calculation = xlCalculationAutomatic
          ThisWorkbook.Saved = True
        End If
      Else
        Mldg = MsgBox("Sollen die |fffd|nderungen gespeichert werden ?", _
            vbYesNo + vbQuestion, "Datei speichern?", "", 0)
        If Mldg = 6 Then
            
            
            '#INSERT_PRINT_BEFORE_SAVE#
            
            
            SW_xlVolatileStuff = False
            ThisWorkbook.Unprotect "aF!dw32*P)(,-.N"
            ThisWorkbook.Worksheets(1).Visible = True
            For itemCnt = 2 To ThisWorkbook.Worksheets.Count
                ThisWorkbook.Worksheets(itemCnt).Visible = xlVeryHidden
            Next itemCnt
            SW_xlBeforeSaveFlag = True
            Application.Calculation = xlCalculationManual
            SaveSetting appname:="Stromwerken", Section:="EP", Key:="PSave", Setting:="1"
            ThisWorkbook.Save
            Application.Calculation = xlCalculationAutomatic
            ThisWorkbook.Saved = True
            SW_xlVolatileStuff = True
            
            
  '          Application.EnableCancelKey = xlInterrupt
        Else
            If MsgBox("Datei schlie|fffd|en ohne zu speichern?", vbYesNo) = vbYes Then
              SW_xlBeforeSaveFlag = True
              ThisWorkbook.Close False
            Else
              SW_xlVolatileStuff = True
              Cancel = True
              Exit Sub
            End If
        End If
      End If
  End If
'#INSERT_WORKBOOK_SIMPLE_CLOSE_PART#
End Sub
'#INSERT_WORKBOOK_SIMPLE_CLOSE#


'#INSERT_WORKBOOK_SIMPLE_BEFORE_SAVE#
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
'#INSERT_WORKBOOK_SIMPLE_BEFORE_SAVE_PART#
    If SW_xlBeforeSaveFlag = False Then
        Cancel = True
        MsgBox "Datei kann nur beim schliessen gespeichert werden"
    End If
'#INSERT_WORKBOOK_SIMPLE_BEFORE_SAVE_PART#
End Sub
'#INSERT_WORKBOOK_SIMPLE_BEFORE_SAVE#









Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



Option Explicit

Attribute VB_Name = "clsApp"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public WithEvents App As Application
Attribute App.VB_VarHelpID = -1




Private Sub App_WorkbookOpen(ByVal wb As Workbook)
    
    Dim myApplication As Object, strWorkbooksNamePfad
    
    If wb.FullName <> ThisWorkbook.FullName Then
        Set myApplication = New Excel.Application
        strWorkbooksNamePfad = wb.FullName
        Workbooks(wb.Name).Close False
        myApplication.Workbooks.Open (strWorkbooksNamePfad)
        myApplication.Visible = True
        Set myApplication = Nothing
    End If
End Sub


INQUEST-PP=macro
