Attribute VB_Name = "TemplateSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'=============================================================================
' Copyright (C) 1996-2006 NumeriX LLC. All rights reserved.
'
' This software comprises valuable trade secrets and may be used, copied,
' transmitted, stored, and distributed only in accordance with the terms
' of a written license or trial agreement and with the inclusion of this
' copyright notice.
'=============================================================================

Option Explicit

'------------------------------------------------------------------------------
' fields
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     the range of the pricing model, or <c>Nothing</c> if there is no
    '''     pricing-model range
    ''' </summary>
    Private m_rngModel As Range
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     the range of the numerical method, or <c>Nothing</c> if there is
    '''     no numerical-method range
    ''' </summary>
    Private m_rngMethod As Range
    '--------------------------------------------------------------------------

'------------------------------------------------------------------------------
' overridden/implemented methods
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Called when this worksheet activates.
    ''' </summary>
    Private Sub Worksheet_Activate()
    
    End Sub
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Called when this worksheet changes.
    ''' </summary>
    ''' <param name="rngTarget">
    '''     the range of this worksheet that has changed
    ''' </param>
    Private Sub Worksheet_Change(ByVal rngTarget As Range)
    
        '
        ' get the model and method ranges
        '
        Call GetRanges
        If ((m_rngModel Is Nothing) Or (m_rngMethod Is Nothing)) Then
        
            Exit Sub
        
        End If
        
        '
        ' set the method validation, if necessary
        '
        If (StrComp(rngTarget.Address, m_rngModel.Address, vbTextCompare) = 0) Then
        
            With m_rngMethod.Validation
            
                Call .Delete
                Call .Add(Type:=xlValidateList, _
                          AlertStyle:=xlValidAlertStop, _
                          Operator:=xlBetween, _
                          Formula1:=GetListOfMethods(m_rngModel.Value))
                .InCellDropdown = True
                .ErrorTitle = "Method Selection Error"
                .ErrorMessage = "The model does not support this method."
                .ShowError = False
                
            End With
            
        End If
    
    End Sub
    '--------------------------------------------------------------------------
    
'------------------------------------------------------------------------------
' private methods
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the list of methods that correspond to a specified model.
    ''' </summary>
    ''' <param name="strModelID">
    '''     the ID of the model to use
    ''' </param>
    ''' <returns>
    ''' </returns>
    Private Function GetListOfMethods(ByVal strModelID As String) As String
    
        Dim strModelType As String: strModelType = ""
        Dim strOutput As String: strOutput = ""
        Dim i As Integer: i = 0
        Dim j As Integer: j = 0
        Dim intModelsCount As Integer: intModelsCount = 0
        Dim intMethodsCount As Integer: intMethodsCount = 0
        Dim vntHeadings As Variant
        Dim vntValues As Variant
        Dim vntModelMethods As Variant
        
        '
        ' initialize the error handler
        '
        On Error GoTo errorHandler
        
        '
        ' get views for the headings and values
        '
        vntHeadings = Application.Run("nxLibView", strModelID, "CALL HEADERS")
        vntValues = Application.Run("nxLibView", strModelID, "CALL VALUES")
        
        '
        ' search for the model type
        '
        For i = 1 To UBound(vntHeadings)
        
            If (StrComp(vntHeadings(i, 1), "MODEL", vbTextCompare) = 0) Then
            
                strModelType = vntValues(i, 1)
                strModelType = RemoveSpaces(strModelType)
                Exit For
                
            End If
            
        Next i
        
        '
        ' get the supported methods
        '
        vntModelMethods = Application.Run("nxLibView", "GLOBAL.ModelMethods")
        intModelsCount = UBound(vntModelMethods)
        intMethodsCount = UBound(vntModelMethods, 2)
        For i = 2 To intModelsCount
        
            If (StrComp(CStr(vntModelMethods(i, 1)), strModelType, vbTextCompare) = 0) Then
            
                For j = 2 To intMethodsCount
                
                    If (vntModelMethods(i, j) = 1) Then
                    
                        strOutput = (strOutput & vntModelMethods(1, j) & ",")
                        
                    End If
                    
                Next j
                
                GetListOfMethods = VBA.Left$(strOutput, (Len(strOutput) - 1))
                Exit Function
                
            End If
            
        Next i
        
errorHandler:

        GetListOfMethods = "BackwardPDE,BackwardLattice,BackwardTree,BackwardAnalytic,BackwardMC,ForwardMC,ForwardAnalytic"
        Exit Function
        
    End Function
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the pricing-model and numerical-method ranges.
    ''' </summary>
    Private Sub GetRanges()
    
        On Error GoTo errorHandler
        Set m_rngModel = Range("Nx_D_" & Me.Name & "_ModelID")
        Set m_rngMethod = Range("Nx_D_" & Me.Name & "_NumMethod")
        
        Exit Sub
        
errorHandler:

        Set m_rngModel = Nothing
        Set m_rngMethod = Nothing
        
    End Sub
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Removes all spaces from a specified string.
    ''' </summary>
    ''' <param name="strInput">
    '''     the string from which to remove all spaces
    ''' </param>
    ''' <returns>
    '''     a copy of the specified string, with spaces removed
    ''' </returns>
    Private Function RemoveSpaces(ByVal strInput As String) As String
    
        Dim strResult As String: strResult = ""
        Dim ch As String * 1
        Dim i As Integer: i = 0
        
        For i = 1 To Len(strInput)
        
            ch = VBA.Mid$(strInput, i, 1)
            If (StrComp(ch, " ", vbBinaryCompare) <> 0) Then
            
                strResult = (strResult & ch)
                
            End If
            
        Next
        
        RemoveSpaces = strResult
        
    End Function
    '--------------------------------------------------------------------------


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "modCreditDetermin"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 3, 0, MSForms, CommandButton"
Option Explicit
Option Base 1

Private Sub updateCrCurve()
    Dim i As Integer, j As Integer
    Dim Id As Range: Set Id = Range("Nx_M_" & ActiveSheet.Name & "_CreditCurveID")
    Dim outRng As Range: Set outRng = Range("Nx_M_" & ActiveSheet.Name & "_CurveView")
    outRng.Clear
    
    Dim temp: temp = Application.Run("NxLibView", Id.Cells(1, 1).Value)
    If UBound(temp) - 1 = 0 Then Exit Sub
    
    temp = Application.Run("NxLibView", Id.Cells(1, 1).Value, "Date")
    Dim hedRng As Range: Set hedRng = Range("Nx_M_" & ActiveSheet.Name & "_CurveHeadings")
    
    If UBound(temp) > 0 Then
        Range(outRng.Cells(1, 1), outRng.Cells(1, 1).Offset(UBound(temp) - 1, hedRng.Columns.Count - 2)).Select
        Selection.FormulaArray = "=NxLibView(" & Id.Address & "," & hedRng.Address & ")"
        For i = 1 To UBound(temp)
            outRng.Cells(i, 4).Formula = "=1-" & outRng.Cells(i, 3).Address
        Next
        Range(outRng.Cells(1, 1), outRng.Cells(1, 1).Offset(UBound(temp) - 1, hedRng.Columns.Count - 1)).Select
        ActiveWorkbook.Names.Add Name:="Nx_M_" & ActiveSheet.Name & "_CurveView", RefersTo:=Selection
        doBorders xlEdgeLeft
        doBorders xlEdgeTop
        doBorders xlEdgeBottom
        doBorders xlEdgeRight
        doBorders xlInsideVertical
        With Selection.Interior
            .ColorIndex = 15
            .Pattern = xlSolid
        End With
        Range(outRng.Cells(1, 1), outRng.Cells(1, 1).Offset(UBound(temp) - 1, 0)).NumberFormat = "dd/mm/yyyy;@"
        Range(outRng.Cells(1, 3), outRng.Cells(1, 4).Offset(UBound(temp) - 1, 0)).NumberFormat = "0.0000000"
        Range("a1").Select
    Else
        For i = 1 To outRng.Columns.Count
            For j = 1 To outRng.Rows.Count
                outRng.Cells(j, i) = "No curve"
            Next
        Next
    End If
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub

Private Sub CommandButton1_Click()
    updateCrCurve
End Sub
Attribute VB_Name = "repCashflows1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    Application.ScreenUpdating = False
    doOneTable "NX_" & ActiveSheet.Name & "_R_CF_ReportID1", "NX_" & ActiveSheet.Name & "_R_CF_ReportOut1"
    Columns("C:D").EntireColumn.AutoFit
    Application.ScreenUpdating = True
End Sub

Private Sub doOneTable(IdRngName$, outRngName$)
    On Error GoTo errorHandler
    Dim outRng As Range: Set outRng = Range(outRngName)
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(IdRngName).Cells(1))
    outRng.Clear
    Dim size As Integer: size = UBound(temp) - 1
    If size = 0 Then Exit Sub
    Range(outRng.Cells(1), outRng.Cells(1).Offset(size - 1, 2)).Select
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection
    Selection.FormulaArray = "=nxLibView(R[-3]C,R[-1]C:R[-1]C[2])"
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2
        .Pattern = xlSolid
    End With
    outRng.Cells(1).Select
    Range(Selection, Selection.End(xlDown)).Select
    Selection.NumberFormat = "[$-409]d-mmm-yyyy;@"
    outRng.Cells(1).Offset(0, 1).Select
    Range(Selection, Selection.End(xlDown)).Select
    Range(Selection, Selection.End(xlToRight)).Select
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    Range("C4").Formula = "=Today()"
    Range("C5").Formula = "=Now()"
errorHandler:
    Range("C4") = Range("C4").Value
    Range("C5") = Range("C5").Value
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub
Attribute VB_Name = "repDeltaGammaLadders"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    ActiveSheet.Calculate
    Dim outRngName$: outRngName = "NX_" & ActiveSheet.Name & "_R_IRDelta_Output"
    Dim outHeadRngName$: outHeadRngName = "NX_" & ActiveSheet.Name & "_R_IRDelta_OutputHeads"
    Dim inRngName$:   inRngName = "NX_" & ActiveSheet.Name & "_R_IRDelta_Input"
    On Error GoTo errorHandler
    Application.ScreenUpdating = False
    Dim outRng As Range: Set outRng = Range(outRngName)
    outRng.Clear
    Dim skipper: skipper = Range("NX_" & ActiveSheet.Name & "_R_IRDelta_Skip").Cells(1, 1)
    If skipper <> False Then Exit Sub
    ' resize the range
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1))
    Dim rsize As Long: rsize = UBound(temp) - 1
    If rsize = 0 Then Exit Sub
    
    temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1), "Instrument")
    rsize = UBound(temp)
    outRng.Select
    Dim headRange As Range: Set headRange = Range(outHeadRngName)
    Dim cSize As Integer: cSize = headRange.Columns.Count
    Range(outRng.Cells(1, 1), outRng.Cells(rsize, cSize)).Select
    
    Selection.FormulaArray = "=NxLibView(" & Range(inRngName).Cells(1, 1).Address & "," & headRange.Address & ")"
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection
    
    'format
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2: .Pattern = xlSolid
    End With
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    ActiveSheet.Calculate
    Range("C6").Formula = "=Today()"
    Range("C7").Formula = "=Now()"
errorHandler:
    Range("C6") = Range("C6").Value
    Range("C7") = Range("C7").Value
    Range("NX_" & ActiveSheet.Name & "_R_IRDelta_Anchor").Select
    Application.ScreenUpdating = True
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub

Attribute VB_Name = "repSpreadDelta"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    Dim outRngName$: outRngName = "NX_" & ActiveSheet.Name & "_R_CRDelta_Output"
    Dim inRngName$:   inRngName = "NX_" & ActiveSheet.Name & "_R_CRDelta_Input"
    On Error GoTo errorHandler
    Application.ScreenUpdating = False
    Dim outRng As Range: Set outRng = Range(outRngName)
    outRng.Clear
    ' resize the range
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1))
    Dim rsize As Integer: rsize = UBound(temp) - 1
    If rsize = 0 Then Exit Sub
    temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1), "Instrument")
    rsize = UBound(temp)
    outRng.Select
    Dim headRange As Range
    outRng.Cells(1, 1).Offset(-1, 0).Select
    Set headRange = Range(Selection, Selection.End(xlToRight))
    Dim cSize As Integer: cSize = headRange.Columns.Count
    Range(outRng.Cells(1, 1), outRng.Cells(rsize, cSize)).Select
    
    Selection.FormulaArray = "=NxLibView(" & Range(inRngName).Cells(1, 1).Address & "," & headRange.Address & ")"
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection
    
    'format
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2: .Pattern = xlSolid
    End With
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    ActiveSheet.Calculate
    Range("C5").Formula = "=Today()"
    Range("C6").Formula = "=Now()"
errorHandler:
    Range("C5") = Range("C5").Value
    Range("C6") = Range("C6").Value
    Application.ScreenUpdating = True
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub



INQUEST-PP=macro
