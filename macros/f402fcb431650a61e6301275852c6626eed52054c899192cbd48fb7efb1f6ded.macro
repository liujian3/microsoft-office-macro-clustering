Attribute VB_Name = "DupeControl"
Attribute VB_Base = "0{88A516D8-7FB0-11D6-BB64-0050BF1C0B57}{88A516BE-7FB0-11D6-BB64-0050BF1C0B57}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private Sub CommandButton1_Click()
Unload Me
End Sub

Private Sub CommandButton2_Click()
Dim rList As Range
Dim sSht As String
Dim sAdd As String
Dim i As Integer
Dim iDupCount As Integer
On Error Resume Next
Set rList = Range(RefEdit1)
If rList Is Nothing Then
MsgBox "Your list range is not valid!", vbCritical, "OzGrid Business Applications"
Exit Sub
End If

'=SUBSTITUTE(V16," ","")
sSht = rList.Parent.Name & "!"
If WorksheetFunction.Substitute(sSht, " ", "") <> sSht Then
sSht = "'" & rList.Parent.Name & "'!"
End If
sAdd = rList.Address(True, True, xlR1C1)
Application.ScreenUpdating = False
Application.DisplayAlerts = False

ActiveWorkbook.Sheets.Add().Name = "OBA Break Down"
If ActiveSheet.Name <> "OBA Break Down" Then ActiveSheet.Delete
On Error GoTo 0
Application.DisplayAlerts = True
With Sheets("OBA Break Down")
.Activate
.Cells.Clear
Sheets(rList.Parent.Name).Range(rList.Address).Copy
.Range("A1").PasteSpecial xlValues
 For i = .UsedRange.Columns.Count To 2 Step -1
 .Columns(i).EntireColumn.Insert
 .Columns(i).Range("A2:A" & rList.Rows.Count).FormulaR1C1 = "=COUNTIF(" & sSht & sAdd & ",RC[-1])"
 .Columns(i).Range("A2:A" & rList.Rows.Count).Font.ColorIndex = 5
 .Columns(i).Cells(1, 1).Value = "Count"
 .Columns(i).Cells(1, 1).Font.Bold = True
 .Columns(i).Cells(1, 1).Font.ColorIndex = 5
 Next i
 
 .Columns(.UsedRange.Columns.Count + 1).Range("A2:A" & rList.Rows.Count).FormulaR1C1 = "=COUNTIF(" & sSht & sAdd & ",RC[-1])"
 .Columns(.UsedRange.Columns.Count).Range("A2:A" & rList.Rows.Count).Font.ColorIndex = 5
 .Columns(.UsedRange.Columns.Count).Cells(1, 1).Value = "Count"
 .Columns(.UsedRange.Columns.Count).Cells(1, 1).Font.Bold = True
 .Columns(.UsedRange.Columns.Count).Cells(1, 1).Font.ColorIndex = 5
 .Columns(1).EntireColumn.Insert
 Set rList = .UsedRange.SpecialCells(xlCellTypeFormulas)
 
 
 For i = 1 To rList.Areas.Count
 iDupCount = WorksheetFunction.CountIf(.Range(rList.Areas(i).Address), ">1") + iDupCount
 rList.Areas(i).Offset(0, -1).Copy destination:= _
  .Range("A65535").End(xlUp).Offset(1, 0)
 Next i
 
 .Range("A1") = "Unique list"
 On Error Resume Next
 .Range("A1", Range("A65536").End(xlUp)).AdvancedFilter _
 Action:=xlFilterCopy, CopyToRange:= _
 .Range("A1").End(xlToRight).Offset(0, 1), Unique:=True

 .Columns(1).Clear
 
.Range("B1").End(xlToRight).EntireColumn.Cut destination:=.Columns(1)
.Columns(2).EntireColumn.Insert
.Range("B2:B" & Range("A65536").End(xlUp).Row).FormulaR1C1 = "=COUNTIF(" & sSht & sAdd & ",RC[-1])"
.Range("A2", Range("A65536").End(xlUp)).Font.ColorIndex = 5
.Range("B1") = "Count of each"
.Range("B1").Font.Bold = True
.Range("B65536").End(xlUp).Offset(1, 0) = WorksheetFunction.Sum(.Range("B1", Range("B65536").End(xlUp)))
.Range("B65536").End(xlUp).Font.Bold = True
.Range("B65536").End(xlUp).Font.ColorIndex = 5
.Range("A1").Font.Bold = True
.Columns(3).EntireColumn.Insert
With .Range("A1").End(xlToRight).Offset(0, 1)
         .Value = "Number of duplicates"
         .Offset(1, 0) = iDupCount
         .Offset(1, 0).Font.ColorIndex = 5
End With

.UsedRange.SpecialCells(xlCellTypeFormulas).Font.ColorIndex = 5
.Cells.Copy
.Range("A1").PasteSpecial xlValues
Application.CutCopyMode = False
.Select
Application.Goto .Range("A1"), True
.Range("A2").Select
ActiveWindow.FreezePanes = True
.Rows(1).AutoFilter
.Cells.Columns.AutoFit
End With

Application.ScreenUpdating = True
Unload Me
End Sub




Private Sub UserForm_Initialize()
RefEdit1 = ActiveCell.CurrentRegion.Address
End Sub
Attribute VB_Name = "FormulaForm"
Attribute VB_Base = "0{88A516DC-7FB0-11D6-BB64-0050BF1C0B57}{88A516C6-7FB0-11D6-BB64-0050BF1C0B57}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False








Option Explicit
Dim Wsht As Worksheet
Dim i As Long
Dim sOption As String
Dim LinkCells As Range, Cell As Range

Private Sub AllSheetsCheckBox_Click()
If AllSheetsCheckBox = True Then
 For i = 0 To WrkSheetsListBox.ListCount - 1
    WrkSheetsListBox.Selected(i) = True
 Next i
 CreateReportButton.Enabled = True
Else
 For i = 0 To WrkSheetsListBox.ListCount - 1
    WrkSheetsListBox.Selected(i) = False
 Next i
 CreateReportButton.Enabled = False
End If
End Sub

Private Sub CancelButton_Click()
Unload Me
End Sub

Private Sub CreateReportButton_Click()
Label2.Visible = True
Me.Repaint

On Error Resume Next

Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.StatusBar = "Report being generated......"
Sheets.Add(After:=Sheets(Sheets.Count)).Name = sOption
 Application.DisplayAlerts = False
  If ActiveSheet.Name <> sOption Then ActiveSheet.Delete
   Application.DisplayAlerts = True

'Clear column A and format as text.
With Sheets(sOption)
    .Columns("A:C").Clear
    .Columns("A:C").NumberFormat = "@"
    .Range("A1") = "Formula"
    .Range("B1") = "Cell Address"
    .Range("C1") = "Worsheet Name"
    .Range("A1:C1").Font.Bold = True
End With




Select Case sOption
 Case "AllFormulasReport"
       ListAll
 Case "InternalFormulasReport"
       ListInternal
 Case "ExternalFormulasReport"
       ListExternal
End Select

With Sheets(sOption)
   .Columns("A:C").AutoFit
   .Rows(1).AutoFilter
   .Rows("2:2").Select
   ActiveWindow.FreezePanes = True
   .Cells(1, 1).Select
End With
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.StatusBar = ""
Label2.Visible = False
Sheets(sOption).Select
End Sub

Private Sub OptAllFormulas_Click()
EnableStep2
sOption = "AllFormulasReport"
End Sub

Private Sub OptInternalFomulas_Click()
EnableStep2
sOption = "InternalFormulasReport"
End Sub

Private Sub OptionButton2_Click()
EnableStep2
sOption = "ExternalFormulasReport"
End Sub

Private Sub UserForm_Initialize()
For Each Wsht In ActiveWorkbook.Worksheets
If Wsht.Name <> "ExternalFormulasReport" And _
   Wsht.Name <> "AllFormulasReport" And _
   Wsht.Name <> "InternalFormulasReport" Then
WrkSheetsListBox.AddItem (Wsht.Name)
End If
Next
End Sub






Private Sub EnableStep2()
AllSheetsCheckBox.Enabled = True
WorksheetsLabel.Enabled = True
WrkSheetsListBox.Enabled = True
End Sub

Private Sub WrkSheetsListBox_Change()
Dim ii As Integer
CreateReportButton.Enabled = False
For ii = 0 To WrkSheetsListBox.ListCount - 1
    If WrkSheetsListBox.Selected(ii) = True Then
        CreateReportButton.Enabled = True
         Exit Sub
    End If
Next ii

End Sub

Private Sub ListExternal()
Dim ItIs As Integer
For i = 0 To WrkSheetsListBox.ListCount - 1
 If WrkSheetsListBox.Selected(i) = True Then
  Set LinkCells = Nothing
   On Error Resume Next
    Set LinkCells = _
        Sheets(WrkSheetsListBox.List(i)).Cells.SpecialCells _
        (xlCellTypeFormulas)
        
    If Not LinkCells Is Nothing Then
    'Loop through each cell in "LinkCells"
     For Each Cell In LinkCells
     ItIs = 0
      ItIs = WorksheetFunction.Find("[", Cell.Formula)
       If ItIs <> 0 Then
        With Sheets(sOption).Range("A65536").End(xlUp)
            .Offset(1, 0) = Cell.Formula
            .Offset(1, 1) = Cell.Address
            .Offset(1, 2) = WrkSheetsListBox.List(i)
            
       End With
     End If
    Next Cell
  End If
  End If
 Next i
End Sub


Private Sub ListAll()

For i = 0 To WrkSheetsListBox.ListCount - 1
 If WrkSheetsListBox.Selected(i) = True Then
  Set LinkCells = Nothing
   On Error Resume Next
    Set LinkCells = _
        Sheets(WrkSheetsListBox.List(i)).Cells.SpecialCells _
        (xlCellTypeFormulas)
        
    If Not LinkCells Is Nothing Then
    'Loop through each cell in "LinkCells"
     For Each Cell In LinkCells
      
       With Sheets(sOption).Range("A65536").End(xlUp)
            .Offset(1, 0) = Cell.Formula
            .Offset(1, 1) = Cell.Address
            .Offset(1, 2) = WrkSheetsListBox.List(i)
           
       End With
    
    Next Cell
  End If
  End If
 Next i
End Sub


Private Sub ListInternal()
Dim ItIs As Integer
For i = 0 To WrkSheetsListBox.ListCount - 1
 If WrkSheetsListBox.Selected(i) = True Then
  Set LinkCells = Nothing
   On Error Resume Next
    Set LinkCells = _
        Sheets(WrkSheetsListBox.List(i)).Cells.SpecialCells _
        (xlCellTypeFormulas)
        
    If Not LinkCells Is Nothing Then
    'Loop through each cell in "LinkCells"
     For Each Cell In LinkCells
     ItIs = 0
      ItIs = WorksheetFunction.Find("[", Cell.Formula)
       If ItIs = 0 Then
        With Sheets(sOption).Range("A65536").End(xlUp)
            .Offset(1, 0) = Cell.Formula
            .Offset(1, 1) = Cell.Address
            .Offset(1, 2) = WrkSheetsListBox.List(i)
            
       End With
     End If
    Next Cell
  End If
  End If
 Next i
End Sub



Attribute VB_Name = "Module1"
Option Explicit
Public sOpenBook As String
Public SChoice As String
Public sTime As String
Public sMacro As String
Sub CalendarCreate()
'Written by OzGrid Business Applications
'www.ozgrid.com
On Error Resume Next
Application.DisplayAlerts = False
Application.ScreenUpdating = False
Sheets.Add().Name = "OBAQuickCal"
If ActiveSheet.Name <> "OBAQuickCal" Then
   ActiveSheet.Delete
    Sheets("OBAQuickCal").Select
    Cells.Clear
End If
On Error GoTo 0
'Application.DisplayAlerts = True
Cells.Font.Size = 8

Range("A1:U100").NumberFormat = "ddd dd"
'Jan
Range("A1:G1").Merge
Range("A1:G1").HorizontalAlignment = xlCenter
Range("A1") = "January"
Range("A2") = DateSerial(Year(Date), 1, 1)
With Range("A2:A6")
.DataSeries Rowcol:=xlColumns, _
Type:=xlChronological, Date:=xlDay, Step:=7, Trend:=False
.AutoFill destination:=Range("A2:G6"), Type:=xlFillDays
Range("D6:G6").Clear
End With

'Feb
Range("A7:G7").Merge
Range("A7:G7").HorizontalAlignment = xlCenter
Range("A7") = "Febuary"
Range("A8") = DateSerial(Year(Date), 2, 1)
With Range("A8:A12")
.DataSeries Rowcol:=xlColumns, _
Type:=xlChronological, Date:=xlDay, Step:=7, Trend:=False
.AutoFill destination:=Range("A8:G12"), Type:=xlFillDays
End With
If Day(DateAdd("d", -1, DateSerial(Year(Date), 3, 1))) = 28 Then
   Range("A12:G12").Clear
Else
  Range("B12:G12").Clear
End If
   Range("A13:G13").Merge
   Range("A13:G13").HorizontalAlignment = xlCenter
   Range("A13") = "March"
   Range("A14") = DateSerial(Year(Date), 3, 1)



'Mar
With Range("A65536").End(xlUp).Range("A1:A5")
.DataSeries Rowcol:=xlColumns, _
Type:=xlChronological, Date:=xlDay, Step:=7, Trend:=False
.AutoFill destination:=.Range("A1:G5"), Type:=xlFillDays
.Range("D5:G5").Clear
End With

'Apr
With Range("A65536").End(xlUp).Offset(1, 0)
.Range("A1:G1").Merge
.Range("A1:G1").HorizontalAlignment = xlCenter
.Range("A1") = "April"
.Range("A2") = DateSerial(Year(Date), 4, 1)
End With
With Range("A65536").End(xlUp).Range("A1:A5")
.DataSeries Rowcol:=xlColumns, _
Type:=xlChronological, Date:=xlDay, Step:=7, Trend:=False
.AutoFill destination:=.Range("A1:G5"), Type:=xlFillDays
.Range("C5:G5").Clear
End With



Range("A1:G24").BorderAround Weight:=xlMedium

'May
Range("H1:N1").Merge
Range("H1:N1").HorizontalAlignment = xlCenter
Range("H1") = "May"
Range("H2") = DateSerial(Year(Date), 5, 1)
With Range("H2:H6")
.DataSeries Rowcol:=xlColumns, _
Type:=xlChronological, Date:=xlDay, Step:=7, Trend:=False
.AutoFill destination:=Range("H2:N6"), Type:=xlFillDays
Range("K6:N6").Clear
End With


'Jun
Range("H7:N7").Merge
Range("H7:N7").HorizontalAlignment = xlCenter
Range("H7") = "June"
Range("H8") = DateSerial(Year(Date), 6, 1)
With Range("H8:H12")
.DataSeries Rowcol:=xlColumns, _
Type:=xlChronological, Date:=xlDay, Step:=7, Trend:=False
.AutoFill destination:=Range("H8:N12"), Type:=xlFillDays
Range("J12:N12").Clear
End With

'Jul
Range("H13:N13").Merge
Range("H13:N13").HorizontalAlignment = xlCenter
Range("H13") = "July"
Range("H14") = DateSerial(Year(Date), 7, 1)
With Range("H14:H18")
.DataSeries Rowcol:=xlColumns, _
Type:=xlChronological, Date:=xlDay, Step:=7, Trend:=False
.AutoFill destination:=Range("H14:N18"), Type:=xlFillDays
Range("K18:N18").Clear
End With

'Aug
Range("H19:N19").Merge
Range("H19:N19").HorizontalAlignment = xlCenter
Range("H19") = "August"
Range("H20") = DateSerial(Year(Date), 8, 1)
With Range("H20:H24")
.DataSeries Rowcol:=xlColumns, _
Type:=xlChronological, Date:=xlDay, Step:=7, Trend:=False
.AutoFill destination:=Range("H20:N24"), Type:=xlFillDays
Range("K24:N24").Clear
End With

Range("H1:N24").BorderAround Weight:=xlMedium

'Sep
Range("O1:U1").Merge
Range("O1:U1").HorizontalAlignment = xlCenter
Range("O1") = "August"
Range("O2") = DateSerial(Year(Date), 9, 1)
With Range("O2:O6")
.DataSeries Rowcol:=xlColumns, _
Type:=xlChronological, Date:=xlDay, Step:=7, Trend:=False
.AutoFill destination:=Range("O2:U6"), Type:=xlFillDays
Range("Q6:U6").Clear
End With

'Oct
Range("O7:U7").Merge
Range("O7:U7").HorizontalAlignment = xlCenter
Range("O7") = "October"
Range("O8") = DateSerial(Year(Date), 10, 1)
With Range("O8:O12")
.DataSeries Rowcol:=xlColumns, _
Type:=xlChronological, Date:=xlDay, Step:=7, Trend:=False
.AutoFill destination:=Range("O8:U12"), Type:=xlFillDays
Range("R12:U12").Clear
End With

'Nov
Range("O13:U13").Merge
Range("O13:U13").HorizontalAlignment = xlCenter
Range("O13") = "November"
Range("O14") = DateSerial(Year(Date), 11, 1)
With Range("O14:O18")
.DataSeries Rowcol:=xlColumns, _
Type:=xlChronological, Date:=xlDay, Step:=7, Trend:=False
.AutoFill destination:=Range("O14:U18"), Type:=xlFillDays
Range("Q18:U18").Clear
End With

'Dec
Range("O19:U19").Merge
Range("O19:U19").HorizontalAlignment = xlCenter
Range("O19") = "December"
Range("O20") = DateSerial(Year(Date), 12, 1)
With Range("O20:O24")
.DataSeries Rowcol:=xlColumns, _
Type:=xlChronological, Date:=xlDay, Step:=7, Trend:=False
.AutoFill destination:=Range("O20:U24"), Type:=xlFillDays
Range("R24:U24").Clear
End With
Range("O1:U24").BorderAround Weight:=xlMedium

With Range("A1").SpecialCells(xlCellTypeConstants, xlTextValues)
      .BorderAround Weight:=xlMedium
      .Interior.ColorIndex = 6
      .Font.Bold = True
End With
Cells.Columns.EntireColumn.AutoFit

With ActiveWindow
    .Zoom = 85
    .DisplayGridlines = False
    .DisplayHeadings = False
End With

With Range("A1").CurrentRegion
   .Font.Name = "Times New Roman"
   .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=TODAY()"
   .FormatConditions(1).Font.ColorIndex = 2
   .FormatConditions(1).Interior.ColorIndex = 1
   
End With
Application.DisplayAlerts = True
Application.ScreenUpdating = True
End Sub


Sub SheetNameShow()
SheetNamer.Show
End Sub

Sub ShowIt()
FormulaForm.Show
End Sub

Sub ShowNameRange()
NameRanger.Show
End Sub

Sub RandomNumberGenerator()
'Creates a list of random numbers _
 between 1 and 36 in range A1:F6
'Written by OzGrid Business Applications
'www.ozgrid.com
Dim Rw As Integer, Col As Integer
Dim Reply1 As Long, Reply2 As Long, Reply3 As Long
Dim lSqR As Long
Dim lSqC As Long
Dim i As Long, lRand As Long
On Error Resume Next




Above:
Reply2 = 0
Reply2 = InputBox("Lowest number ?" _
& Chr(13) & Chr(13) & "Number must be greater than 0 and entered without spaces or commas" & Chr(13) _
, "OzGrid Random Number Generator", 1)
If Reply2 = 0 Then Exit Sub

If Reply2 < 1 Then
 MsgBox "Number must be greater than 0", vbCritical, "OzGrid Business Applications"
  GoTo Above
End If

Above2:
Reply3 = 0
Reply3 = InputBox("Highest number ? " _
& Chr(13) & Chr(13) & "Number must be greater than " & Reply2 & " and entered without spaces or commas" & Chr(13) _
, "Lowest number = " & Reply2, 500)
If Reply3 = 0 Then Exit Sub

If Reply3 <= Reply2 Then
 MsgBox "Number must be greater than " & Reply2, vbCritical, "OzGrid Business Applications"
  GoTo Above2
End If


HowMany:
Reply1 = 0
Reply1 = InputBox("How many random numbers do you wish to generate?" _
& Chr(13) & Chr(13) & "Number must be whole and less than 1000" & Chr(13) _
& Chr(13) & "An amount greater than 500 within a tight band will take some time!" _
& Chr(13) & "Numbers will be sorted Left to Right by row" _
, "Lowest number = " & Reply2 & " Highest number = " & Reply3, 200)
If Reply1 = 0 Then Exit Sub

If Reply1 > 1000 Then
 MsgBox "Number must be less than 1000", vbCritical, "OzGrid Business Applications"
  GoTo HowMany:
End If

If Reply1 > Reply3 - Reply2 Then
 MsgBox "Not possible.", vbCritical, "OzGrid Business Applications"
  GoTo HowMany:
End If
  
Application.DisplayAlerts = False
Application.ScreenUpdating = False

Sheets.Add().Name = "Random Numbers"
If ActiveSheet.Name <> "Random Numbers" Then
   ActiveSheet.Delete
    Sheets("Random Numbers").Select
    Cells.Clear
End If
Dim sCheck As String
Range("A1") = Reply1

Range("B1").FormulaR1C1 = "=ROUNDUP(SQRT(RC[-1]),0)"




lSqR = Range("B1")
lSqC = lSqR

On Error GoTo 0
'Clear the range ready for random numbers
Range("A1:IV600").Clear

Randomize   ' Initialize random-number generator.
For Col = 1 To lSqC 'Set the Column numbers
If WorksheetFunction.CountA(Cells) = Reply1 Then Exit For
For Rw = 1 To lSqR 'Set the Row numbers
If WorksheetFunction.CountA(Cells) = Reply1 Then Exit For

  'Cells(Rw, Col) = Int((Reply3 - Reply2 + 1) * Rnd + Reply2)
  
  Do Until WorksheetFunction.CountIf _
     (Cells, Cells(Rw, Col)) = 1
     Cells(Rw, Col) = Int((Reply3 - Reply2 + 1) * Rnd + Reply2)
  Loop
If WorksheetFunction.CountA(Cells) = Reply1 Then Exit For
Next Rw
If WorksheetFunction.CountA(Cells) = Reply1 Then Exit For
Next Col

Rw = 1
For Rw = 1 To ActiveSheet.UsedRange.Rows.Count
Rows(Rw).Sort Key1:=Rows(Rw).Range("A1"), Order1:=xlAscending, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlLeftToRight
Next Rw
Application.Goto Range("A1"), True

Application.DisplayAlerts = True
Application.ScreenUpdating = True
End Sub

Sub RowDeletion()
RowDelete.Show
End Sub
Sub Dupes()
DupeControl.Show
End Sub
Sub OnTime()
TimeForm.Show
End Sub

Sub Reminder()
MsgBox ThisWorkbook.Sheets("SheetNames").Cells(1, 1), vbInformation, "OzGrid Business Applications"
End Sub

Sub FileOpen()
Dim sOpen As String
On Error Resume Next
sOpen = ThisWorkbook.Sheets("SheetNames").Cells(1, 2)

Workbooks.Open sOpen
End Sub



Attribute VB_Name = "Module2"
Sub MyFind()
MsgBox Range("E9").f
End Sub


Attribute VB_Name = "NameRanger"
Attribute VB_Base = "0{88A516F1-7FB0-11D6-BB64-0050BF1C0B57}{88A516C8-7FB0-11D6-BB64-0050BF1C0B57}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim Reply As Integer
Dim MyNames As Name
Dim DynaRangeType As String
Dim RangeName As String
Dim RangeRowsCount As Long
Dim RangeColumnsCount As Integer
Dim ExpandDirection As String
Dim LeadRowOrColumn As String
Dim TopCell As String
Dim ExpandNumber As Long
Dim SingleCellLink As String

Private Sub CancelButton_Click()
Unload Me
End Sub

Private Sub CellLinkRef_Change()
 If CellLinkRef <> "" Then
     CreateButton.Enabled = False
     If IsObject(Range(CellLinkRef)) Then
         LeadCorRSpinButton1.Enabled = False
           CreateButton.Enabled = True
             SingleCellLink = CellLinkRef
     End If
 End If
End Sub

Private Sub CreateButton_Click()
 If LinkedToCellOpt.Value = True Then
  If SingleCellLink <> "" Then
   If Not IsObject(Range(SingleCellLink)) Then
           MsgBox "Single cell link not valid", vbCritical, "OzGrid Business Applications"
            CellLinkRef.SetFocus
             Exit Sub
   End If
   Else: MsgBox "Single cell link not valid", vbCritical, "OzGrid Business Applications"
            CellLinkRef.SetFocus
             Exit Sub
 End If
End If

If Not IsObject(Range(NamedRangeRef)) Then
 MsgBox "Range not valid", vbCritical, "OzGrid Business Applications"
   NamedRangeRef.SetFocus
  Exit Sub
End If

If RangeName = "" Then
    MsgBox "No name entered", vbCritical, "OzGrid Business Applications"
   NamesCombo.SetFocus
  Exit Sub
End If

TopCell = Range(NamedRangeRef).Range("A1").Address

 If ExpandDirection = "Down" Then
    LeadRowOrColumn = _
     Range(NamedRangeRef).Columns(CLng(leadCorRTextbox.Value)).Address
     ExpandNumber = Range(NamedRangeRef).Columns.Count
      Else
       LeadRowOrColumn = _
         Range(NamedRangeRef).Rows(CLng(leadCorRTextbox.Value)).Address
          ExpandNumber = Range(NamedRangeRef).Rows.Count
 End If
Select Case DynaRangeType
       Case "OnlyNumbers"
             MyNumbersOnly
       Case "TextAndNumbers"
             MyTextAndNumbers
       Case "LastTextEntry"
             MyLastTextEntry
       Case "LastNumericEntry"
             MyLastNumericEntry
       Case "Monthly"
             MyMonthly
       Case "Weekly"
             MyWeekly
       Case "DayOfMonth"
             MyDayOfMonth
       Case "LinkedToCell"
             MyLinkedToCell
             
End Select
Unload Me
NameRanger.Show
End Sub

Private Sub DayofMonthOpt_Click()
DynaRangeType = "DayOfMonth"
LeadCorRSpinButton1.Enabled = False
leadCorRTextbox.Value = 1
Me.Height = 223
End Sub

Private Sub DownRowsOpt_Click()
leadCorRTextbox.Value = 1
If NamedRangeRef <> "" Then
   If IsObject(Range(NamedRangeRef)) Then
       ExpandDirection = "Down"
        LeadCorRSpinButton1.Enabled = True
        Label3.Caption = "Lead Column"
   End If
End If

End Sub

Private Sub AcrossColumnsopt_Click()
leadCorRTextbox.Value = 1
 If NamedRangeRef <> "" Then
   If IsObject(Range(NamedRangeRef)) Then
       ExpandDirection = "Across"
        LeadCorRSpinButton1.Enabled = True
        Label3.Caption = "Lead Row"
   End If
End If
End Sub

Private Sub LastNumericEntry_Click()
DynaRangeType = "LastNumericEntry"
NamedRangeRef_Change
Me.Height = 223
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
If Cancel = 0 Then End
End Sub

Private Sub WeeklyOpt_Click()
DynaRangeType = "Weekly"
LeadCorRSpinButton1.Enabled = False
leadCorRTextbox.Value = 1
Me.Height = 223
End Sub
Private Sub LeadCorRSpinButton1_Change()
leadCorRTextbox.Value = LeadCorRSpinButton1
RangeRowsCount = Range(NamedRangeRef).Rows.Count
RangeColumnsCount = Range(NamedRangeRef).Columns.Count

If ExpandDirection = "Down" Then
   LeadCorRSpinButton1.Max = RangeColumnsCount
    Else
     LeadCorRSpinButton1.Max = RangeRowsCount
End If
End Sub

Private Sub LinkedToCellOpt_Click()
DynaRangeType = "LinkedToCell"
LeadCorRSpinButton1.Enabled = False
leadCorRTextbox.Value = 1
Me.Height = 247
End Sub

Private Sub MonthlyOpt_Click()
DynaRangeType = "Monthly"
LeadCorRSpinButton1.Enabled = False
leadCorRTextbox.Value = 1
Me.Height = 223
End Sub


Private Sub NamedRangeRef_Change()
If NamedRangeRef <> "" Then
 If IsObject(Range(NamedRangeRef)) And MonthlyOpt.Value = False And _
 WeeklyOpt.Value = False And DayofMonthOpt = False Then
     LeadCorRSpinButton1.Enabled = True
      CreateButton.Enabled = True
       Else
        LeadCorRSpinButton1.Enabled = False
         CreateButton.Enabled = True
  End If
End If
End Sub

Private Sub NamesCombo_Exit(ByVal Cancel As MSForms.ReturnBoolean)
If NamesCombo.ListIndex > -1 Then
 Reply = MsgBox(NamesCombo & " Already exsists," _
 & " do you want to replace it ?", vbYesNo, "OzGrid Business Applications")
  If Reply = vbNo Then Exit Sub
 End If
 RangeName = Trim(NamesCombo)
End Sub

Private Sub TextAndNumbersOpt_Click()
DynaRangeType = "TextAndNumbers"
NamedRangeRef_Change
Me.Height = 223
End Sub

Private Sub NumbersOnlyOpt_Click()
DynaRangeType = "OnlyNumbers"
NamedRangeRef_Change
Me.Height = 223
End Sub

Private Sub LastTextOnlyOpt_Click()
DynaRangeType = "LastTextEntry"
NamedRangeRef_Change
Me.Height = 223
End Sub

Private Sub UserForm_Activate()
DownRowsOpt.Value = True
ExpandDirection = "Down"
DynaRangeType = "OnlyNumbers"
For Each MyNames In ActiveWorkbook.Names
    NamesCombo.AddItem (MyNames.Name)
Next
Me.Height = 223
End Sub


Private Sub MyNumbersOnly()
 If ExpandDirection = "Down" Then
    ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & " ,0,0,COUNT(" & LeadRowOrColumn & ")," & ExpandNumber & ")"
    Else
    ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & " ,0,0," & ExpandNumber & ",COUNT(" & LeadRowOrColumn & "))"
End If
   End Sub
Private Sub MyTextAndNumbers()
If ExpandDirection = "Down" Then
    ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & " ,0,0,COUNTA(" & LeadRowOrColumn & ")," & ExpandNumber & ")"
Else
ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & " ,0,0," & ExpandNumber & ",COUNTA(" & LeadRowOrColumn & "))"
End If
   End Sub
Private Sub MyLastTextEntry()
If ExpandDirection = "Down" Then
    ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & ",0,0,MATCH("" * """ & "," & LeadRowOrColumn & ",-1)," & ExpandNumber & ")"
Else
ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & " ,0,0," & ExpandNumber & ",MATCH("" * """ & "," & LeadRowOrColumn & ",-1))"
End If
   End Sub
Private Sub MyLastNumericEntry()
If ExpandDirection = "Down" Then
    ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & ",0,0,MATCH(100000000000000," & LeadRowOrColumn & ",1)," & ExpandNumber & ")"
Else
ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & " ,0,0," & ExpandNumber & ",MATCH(10000000000000," & LeadRowOrColumn & ",1))"
End If
   End Sub
Private Sub MyMonthly()
If ExpandDirection = "Down" Then
  ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & ",0,0,MONTH(TODAY())," & ExpandNumber & ")"
 Else
ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & " ,0,0," & ExpandNumber & ",MONTH(TODAY()))"
End If
   End Sub
Private Sub MyWeekly()
If ExpandDirection = "Down" Then
   ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & ",0,0,WEEKNUM(TODAY())," & ExpandNumber & ")"
 Else
 ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & " ,0,0," & ExpandNumber & ",WEEKNUM(TODAY()))"
End If
   End Sub
Private Sub MyDayOfMonth()
If ExpandDirection = "Down" Then
  ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & ",0,0,DAY(TODAY())," & ExpandNumber & ")"
Else
ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & " ,0,0," & ExpandNumber & ",WEEKNUM(TODAY()))"
End If
End Sub

Sub MyLinkedToCell()
If ExpandDirection = "Down" Then
  ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & ",0,0," & SingleCellLink & "," & ExpandNumber & ")"
Else
ActiveWorkbook.Names.Add Name:=RangeName, RefersTo:= _
"=OFFSET(" & TopCell & " ,0,0," & ExpandNumber & "," & SingleCellLink & ")"
End If
End Sub
Attribute VB_Name = "RowDelete"
Attribute VB_Base = "0{88A516E1-7FB0-11D6-BB64-0050BF1C0B57}{88A516CA-7FB0-11D6-BB64-0050BF1C0B57}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Dim sMtype As String
Dim sDelete As String
Dim i As Integer

Private Sub ComboBox1_Change()
If ComboBox1.ListIndex > -1 Then
sDelete = ComboBox1.Text
End If
End Sub

Private Sub CommandButton1_Click()
Unload Me
End Sub

Private Sub CommandButton2_Click()
Dim bCal As Boolean
If sMtype = "" Then
MsgBox "No 'Match Option' chosen", vbCritical, "OzGrid Business Applications"
Exit Sub
End If
bCal = False
Application.ScreenUpdating = False
If Application.Calculation = xlCalculationAutomatic Then
Application.Calculation = xlCalculationManual
bCal = True
End If
On Error Resume Next

Select Case sMtype
Case "All"
On Error Resume Next
If sDelete <> "All Types" Then

For i = 1 To WorksheetFunction.CountIf(Cells, sDelete)

Cells.Find(What:=sDelete, After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False).EntireRow.Delete
Next i

Else
For i = 1 To 256
Columns(i).SpecialCells(xlCellTypeFormulas, xlErrors).EntireRow.Delete
Columns(i).SpecialCells(xlCellTypeConstants, xlErrors).EntireRow.Delete
Next i
End If

Case "Col"
For i = 1 To WorksheetFunction.CountIf(ActiveCell.EntireColumn, sDelete)
ActiveCell.EntireColumn.Find(What:=sDelete, After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False).EntireRow.Delete
Next i
End Select
Application.ScreenUpdating = True
If bCal = True Then Application.Calculation = xlCalculationAutomatic



End Sub





Private Sub OptionButton1_Click()
sMtype = "All"
End Sub

Private Sub OptionButton2_Click()
sMtype = "Col"
End Sub

Private Sub OptionButton3_Click()
ComboBox1.Enabled = True
TextBox1.Enabled = False
End Sub

Private Sub OptionButton4_Click()
ComboBox1.Enabled = False
TextBox1.Enabled = True
End Sub


Private Sub TextBox1_Change()
sDelete = TextBox1
End Sub



Private Sub UserForm_Initialize()
With ComboBox1
.AddItem "All Types"
.AddItem "#NULL"
.AddItem "#DIV/0!"
.AddItem "#N/A"
.AddItem "#REF!"
.AddItem "#VALUE!"
.AddItem "#NUM!"
End With
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetNamer"
Attribute VB_Base = "0{88A516E5-7FB0-11D6-BB64-0050BF1C0B57}{88A516CC-7FB0-11D6-BB64-0050BF1C0B57}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Dim MyRange As Range
Dim i As Integer

Private Sub Ascending_Click()
SortSheets.Enabled = True
End Sub

Private Sub CancelButton_Click()
Unload Me
End Sub

Private Sub Descending_Click()
SortSheets.Enabled = True
End Sub

Private Sub OK_Click()
Dim RangeSource As String
Dim StartFindSource As String
Dim EndFindSource As String
Dim StartIndex As Integer
Dim EndIndex As Integer
Application.ScreenUpdating = False
Application.DisplayAlerts = False
Dim i As Integer
If NameStart.ListIndex > -1 And NameEnd.ListIndex > -1 Then

    RangeSource = NameStart.RowSource
    StartFindSource = NameStart
    EndFindSource = NameEnd
    
    StartIndex = WorksheetFunction.Max _
                 (NameStart.ListIndex, NameEnd.ListIndex)
    EndIndex = WorksheetFunction.Min _
                 (NameStart.ListIndex, NameEnd.ListIndex)
    
 On Error Resume Next
 For i = StartIndex To EndIndex Step -1
     Sheets.Add().Name = NameStart.List(i)
      If ActiveSheet.Name <> NameStart.List(i) Then ActiveSheet.Delete
 Next
 
End If

Application.ScreenUpdating = True
Application.DisplayAlerts = True

End Sub
Private Sub Days_Click()
OK.Enabled = True
 On Error Resume Next
 NameStart.Clear
 NameEnd.Clear

For i = 1 To 365 * 4
NameStart.AddItem "Day " & i
NameEnd.AddItem "Day " & i
Next i
End Sub

Private Sub FinacialYears_Click()
On Error Resume Next

OK.Enabled = True
 NameStart.Clear
 NameEnd.Clear
       
For i = 1 To 150
NameStart.AddItem "FY " & 1900 + i
NameEnd.AddItem "FY " & 1900 + i
Next i



End Sub

Private Sub Months_Click()
OK.Enabled = True
 On Error Resume Next
 NameStart.Clear
 NameEnd.Clear
       
For i = 1 To 12
NameStart.AddItem Format(DateSerial(2000, i, 1), "mmmm")
NameEnd.AddItem Format(DateSerial(2000, i, 1), "mmmm")
Next i
End Sub



Private Sub Quarters_Click()
OK.Enabled = True
 On Error Resume Next
 NameStart.Clear
 NameEnd.Clear
For i = 1 To 4
NameStart.AddItem "Qtr" & i
NameEnd.AddItem "Qtr" & i
Next i

End Sub

Private Sub SortOptions_Click()
Me.Height = 265
End Sub

Private Sub SortSheets_Click()
Dim i As Integer, ii As Integer
Dim ShtName As String
If ActiveWorkbook.Sheets.Count > 1 Then
Application.ScreenUpdating = False
With ThisWorkbook.Sheets("SheetNames")
       .Columns(20).Clear
  For i = 1 To ActiveWorkbook.Sheets.Count
      .Cells(i, 20) = Sheets(i).Name
  Next
   If Ascending.Value = True Then
     .Columns(20).Sort Key1:=.Cells(1, 20), Order1:=xlAscending
      Else
       .Columns(20).Sort Key1:=.Cells(1, 20), Order1:=xlDescending
   End If
  For ii = i - 1 To 1 Step -1
   ShtName = .Cells(ii, 20)
    ActiveWorkbook.Sheets(ShtName).Move Before:=ActiveWorkbook.Sheets(1)
  Next
End With
Application.ScreenUpdating = True
End If
End Sub


Private Sub weekdays_Click()
OK.Enabled = True
 On Error Resume Next
 NameStart.Clear
 NameEnd.Clear
For i = 1 To 7
NameStart.AddItem Format(Weekday(i), "dddd")
NameEnd.AddItem Format(Weekday(i), "dddd")
Next i

End Sub

Private Sub Weeks_Click()
OK.Enabled = True
 On Error Resume Next
 NameStart.Clear
 NameEnd.Clear


For i = 1 To 52 * 4
NameStart.AddItem "Week " & i
NameEnd.AddItem "Week " & i
Next i
End Sub

Private Sub Years_Click()
OK.Enabled = True
 On Error Resume Next
 NameStart.Clear
 NameEnd.Clear

For i = 1900 To 2050
NameStart.AddItem i
NameEnd.AddItem i
Next i

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Dim Cbar As CommandBarPopup
Dim cBut1  As CommandBarButton
Dim cBut2 As CommandBarButton
Dim cBut3 As CommandBarButton
Dim cBut4 As CommandBarButton
Dim cBut5 As CommandBarButton
Dim cBut6 As CommandBarButton
Dim cBut7 As CommandBarButton
Dim cBut8 As CommandBarButton


Private Sub Workbook_AddinInstall()

'Application.VBE.ActiveVBProject.References.AddFromFile "c:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VE"
On Error Resume Next
Application.CommandBars("Worksheet Menu Bar").Controls("&OzGrid").Delete
Set Cbar = Application.CommandBars("Worksheet Menu Bar").Controls.Add(Type:=msoControlPopup)
Cbar.Caption = "&OzGrid"
Set cBut1 = Cbar.Controls.Add(Type:=msoControlButton)
With cBut1
   .Caption = "Formula report generator"
   .Style = msoButtonIconAndCaption
   .OnAction = "ShowIt"
   .FaceId = 26
End With

Set cBut2 = Cbar.Controls.Add(Type:=msoControlButton)
With cBut2
   .Caption = "Dynamic Ranges"
   .Style = msoButtonIconAndCaption
   .OnAction = "ShowNameRange"
   .FaceId = 194
End With

Set cBut3 = Cbar.Controls.Add(Type:=msoControlButton)
With cBut3
   .Caption = "Real Calendar"
   .Style = msoButtonIconAndCaption
    .FaceId = 125
   .OnAction = "CalendarCreate"
End With


Set cBut4 = Cbar.Controls.Add(Type:=msoControlButton)
With cBut4
   .Caption = "Sheet create,name and sort"
   .Style = msoButtonIconAndCaption
   .OnAction = "SheetNameShow"
   .FaceId = 8
End With

Set cBut5 = Cbar.Controls.Add(Type:=msoControlButton)
With cBut5
   .Caption = "Random number generator"
   .Style = msoButtonIconAndCaption
   .OnAction = "RandomNumberGenerator"
   .FaceId = 49
End With

Set cBut6 = Cbar.Controls.Add(Type:=msoControlButton)
With cBut6
   .Caption = "Conditional row deletion"
   .Style = msoButtonIconAndCaption
   .OnAction = "RowDeletion"
    .FaceId = 14
End With

Set cBut7 = Cbar.Controls.Add(Type:=msoControlButton)
With cBut7
   .Caption = "Duplication Report"
   .Style = msoButtonIconAndCaption
   .OnAction = "Dupes"
   .FaceId = 213
End With


Set cBut8 = Cbar.Controls.Add(Type:=msoControlButton)
With cBut8
   .Caption = "Do on time"
   .Style = msoButtonIconAndCaption
   .OnAction = "OnTime"
   .FaceId = 33
End With


End Sub

Private Sub Workbook_AddinUninstall()
On Error Resume Next
Application.OnTime EarliestTime:=TimeValue(sTime), _
    Procedure:=ThisWorkbook.Name & "!Reminder", Schedule:=False
    
Application.OnTime TimeValue _
(sTime), ActiveWorkbook.Name & "!" & sMacro, , False

Application.OnTime TimeValue _
(sTime), ThisWorkbook.Name & "!FileOpen", , False

Application.CommandBars("Worksheet Menu Bar").Controls("&OzGrid").Delete
End Sub

Attribute VB_Name = "TimeForm"
Attribute VB_Base = "0{88A516E9-7FB0-11D6-BB64-0050BF1C0B57}{88A516CE-7FB0-11D6-BB64-0050BF1C0B57}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit




Private Sub CommandButton1_Click()
Unload Me
End Sub


Private Sub CommandButton2_Click()

If Not IsDate(TextBox1.Value) Then
  MsgBox "Invalid time", vbCritical, "OzGrid Business Applications"
   Exit Sub
 End If
 
 sTime = Format(TextBox1.Text, "hh:mm")
 
 

Select Case SChoice
Case "Rem"
Application.OnTime TimeValue _
(sTime), ThisWorkbook.Name & "!Reminder"
ThisWorkbook.Sheets("SheetNames").Cells(1, 1) = TextBox2
Case "OpenFile"
Application.OnTime TimeValue _
(sTime), ThisWorkbook.Name & "!FileOpen"
ThisWorkbook.Sheets("SheetNames").Cells(1, 2) = sOpenBook
Case "Macro"
Application.OnTime TimeValue _
(sTime), ActiveWorkbook.Name & "!" & sMacro
Case Else
 MsgBox "No timer option chosen", vbCritical, "OzGrid Business Applications"
 Exit Sub
End Select

Unload Me
End Sub


Private Sub OptionButton1_Click()
If OptionButton1.Value = True Then
OptionButton2_Click
OptionButton3_Click
Label2.Enabled = True
TextBox2.Enabled = True
TextBox2.BackColor = &HFFFFFF
SChoice = "Rem"
Else
Label2.Enabled = False
TextBox2.Enabled = False
TextBox2.BackColor = &H80000004
SChoice = ""
End If

End Sub

Private Sub OptionButton2_Click()

If OptionButton2.Value = True Then
OptionButton1_Click
OptionButton3_Click
sOpenBook = Application.GetOpenFilename
If sOpenBook = "False" Then
   SChoice = ""
   Exit Sub
End If
SChoice = "OpenFile"
Else
SChoice = ""
End If
End Sub

Private Sub OptionButton3_Click()

If OptionButton3.Value = True Then
OptionButton1_Click
OptionButton2_Click
TextBox3.Visible = True
SChoice = ""
Else
TextBox3.Visible = False
SChoice = ""
End If
End Sub

Private Sub TextBox1_Change()
If Len(TextBox1) > 5 Then
 MsgBox "Invalid time", vbCritical, "OzGrid Business Applications"
 TextBox1.Value = Format(Time, "hh:mm")
   Exit Sub
 End If
End Sub

Private Sub TextBox3_Change()
SChoice = "Macro"
sMacro = TextBox3
End Sub

Private Sub UserForm_Initialize()
TextBox1.Value = Format(Time, "hh:mm")
End Sub


INQUEST-PP=macro
