Attribute VB_Name = "Book"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Data"
Attribute VB_Base = "0{CA240548-7E44-4D3D-961D-155F8EACF839}{4D5CC67B-42C6-4917-BEFE-DE51954029CE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'
'--------------------------------------------------------------------------------------------------

Option Explicit

Private Const SECTION_COUNT As Integer = 8
Private Const ITEM_COUNT As Integer = 200

Private oOptions As Worksheet
Private oMain As Worksheet
Private oResult As Worksheet
Private oSheet As Worksheet
Private sTable As String
Private nTableRow As Long

Private Type SectionData
  sID As String
  sTitle As String
  nType As Integer
  nBegRow As Long
  nEndRow As Long
End Type

Private nSectionCount As Integer
Private arrSection(1 To SECTION_COUNT) As SectionData

Private Type CurrencyData
  sTitle As String
  nRow As Long
  sRate As String
End Type

Private arrCurrency(0 To 3) As CurrencyData

Private Type ProductData
  nID As Long
  sTitle As String
  nType As Integer
  nRow As Long
  bSelect As Boolean
  nPos As Integer
End Type

Private Type MaterialData
  nID As Long
  nType As Integer
  nRow As Long
  nProduct As Integer
  bSelect As Boolean
  nPos As Integer
End Type

Private nProductCount As Integer
Private arrProduct(1 To ITEM_COUNT) As ProductData

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'
Private Sub UpdateTotal(ByVal sSection As String)
  Dim nLastRow As Long, nTotalRow As Long
  nLastRow = GetRowByID(oSheet, "END::" & sTable, nTableRow + 1)
  nTotalRow = GetRowByID(oSheet, "TOTAL", nTableRow + 1, nLastRow)
  If nTotalRow <= 0 Then Exit Sub

  Dim r As Long, i As Integer, nCount As Integer, sBuffer As String
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For i = 1 To nSectionCount Step 1
    r = GetRowByID(oSheet, arrSection(i).sID, nTableRow + 1, nLastRow)
    arrSection(i).nBegRow = r
    sBuffer = oSheet.Cells(r, FLAG_COL).Value
    r = r + Val(GetValue(sBuffer, "Header", 1))
    For nCount = Val(GetValue(sBuffer, "Count")) To 1 Step -1
      sBuffer = oSheet.Cells(r, FLAG_COL).Value
      r = r + Val(GetValue(sBuffer, "Row", 1))
    Next nCount
    arrSection(i).nEndRow = r - 1
  Next i
'
  Dim nRow As Long, nBegRow As Long, nEndRow As Long, nLen As Integer, sTotal As String, sData As String, sMode As String
  oSheet.Calculate
  nLen = oMain.Range("Prj_Len").Value
  For nRow = nTotalRow To nLastRow Step 1
    sBuffer = oSheet.Cells(nRow, FLAG_COL).Value
    sTotal = GetValue(sBuffer, "Total")
    If Len(sTotal) > 0 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      sData = GetValue(sBuffer, "Data")
      sMode = GetValue(sBuffer, "Mode")
      nBegRow = arrSection(1).nBegRow
      nEndRow = arrSection(nSectionCount).nEndRow
      i = InStr(1, sData, ".")
      If i > 0 Then
        sBuffer = Mid(sData, 1, i - 1)
        If Len(sSection) = 0 Or sBuffer = sSection Then
          sData = Mid(sData, i + 1)
          For i = 1 To nSectionCount Step 1
            If arrSection(i).sID = sBuffer Then
              nBegRow = arrSection(i).nBegRow
              nEndRow = arrSection(i).nEndRow
              Exit For
            End If
          Next i
        Else
          sData = vbNullString
        End If
      End If
      If Len(sData) > 0 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sBuffer = vbNullString
        r = nBegRow - 1
        Do While r > 0
          r = GetRowByID(oSheet, sData, r + 1, nEndRow)
          If r <= 0 Then Exit Do
          sBuffer = sBuffer & ",R" & r & "C"
          i = oSheet.Cells(r, CUR_COL).Value
          If i > 1 Then sBuffer = sBuffer & "*" & arrCurrency(i).sRate
        Loop
        If Len(sBuffer) > 0 Then
          Select Case sTotal
          Case "sum"
            sBuffer = "=SUM(" & Mid(sBuffer, 2) & ")"
          Case "avg"
            sBuffer = "=AVERAGE(" & Mid(sBuffer, 2) & ")"
          Case "min"
            sBuffer = "=MIN(" & Mid(sBuffer, 2) & ")"
          Case "max"
            sBuffer = "=MAX(" & Mid(sBuffer, 2) & ")"
          Case Else
            sBuffer = vbNullString
          End Select
        Else
          sBuffer = "0"
        End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If sMode = "value" Then
          oSheet.Cells(nRow, VALUE_COL).FormulaR1C1 = sBuffer
        Else
          oSheet.Range(oSheet.Cells(nRow, PERIOD_COL), oSheet.Cells(nRow, PERIOD_COL + nLen - 1)).FormulaR1C1 = sBuffer
        End If
      End If
    End If
  Next nRow
End Sub

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Private Sub InsertItem(ByVal sSection As String, ByVal nItemRow As Long, ByVal nIndex As Integer)
  Dim r As Long, i As Integer, nSectionRow As Long, nDataRow As Long, nCount As Integer, nID As Long, nRow As Integer, nLen As Integer, sBuffer As String, sMode As String, sTemp As String
  nSectionRow = 1
  Do While nSectionRow > 0
    nSectionRow = GetRowByID(oResult, sSection, nSectionRow + 1)
    If nSectionRow <= 0 Then Exit Sub
    If nID = 0 Then
      sBuffer = oSheet.Cells(nItemRow, FLAG_COL).Value
      nID = Val(GetValue(sBuffer, "ID"))
      nRow = Val(GetValue(sBuffer, "Row", 1))
      nLen = oMain.Range("Prj_Len").Value
    End If
    sBuffer = oResult.Cells(nSectionRow, FLAG_COL).Value
    nCount = Val(GetValue(sBuffer, "Count"))
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If nCount = 0 Then
      r = nSectionRow + Val(GetValue(sBuffer, "Header", 1)) + Val(GetValue(sBuffer, "Footer", 1))
      oResult.Rows(nSectionRow & ":" & r - 1).Hidden = False
      If Len(oResult.Cells(nSectionRow, NAME_COL).Text) = 0 Then oResult.Rows(nSectionRow).Hidden = True
    End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    r = nSectionRow + Val(GetValue(sBuffer, "Header", 1))
    For i = 1 To nIndex Step 1
      r = r + Val(GetValue(oResult.Cells(r, FLAG_COL).Value, "Row", 1))
    Next i
    oResult.Rows(r).Insert
    With oResult.Rows(r)
      .OutlineLevel = 1
      .Font.Bold = False
    End With
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    With oResult.Cells(r, NAME_COL)
      If Len(oResult.Cells(nSectionRow, NAME_COL).Text) = 0 Then
        .IndentLevel = 0
      Else
        .IndentLevel = oResult.Cells(nSectionRow, NAME_COL).IndentLevel + 1
      End If
      .FormulaR1C1 = "='" & oSheet.Name & "'!R" & nItemRow & "C"
    End With
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    sBuffer = SetValue(sBuffer, "Count", nCount + 1)
    oResult.Cells(nSectionRow, FLAG_COL).Value = sBuffer
    sTemp = "ID=" & nID
    sMode = GetValue(sBuffer, "Skip")
    If Len(sMode) > 0 Then sTemp = sTemp & ";Skip=" & sMode
    sMode = GetValue(sBuffer, "Mode")
    If Len(sMode) > 0 Then
      sTemp = sTemp & ";Mode=" & sMode
      If sMode = "sum" Then
        oResult.Cells(r, VALUE_COL).FormulaR1C1 = "=RC[" & nLen + 6 & "]"
        oResult.Cells(r, PERIOD_COL + nLen + 1).FormulaR1C1 = "=SUM(RC[-" & nLen + 1 & "]:RC[-1])"
      End If
    End If
    oResult.Cells(r, FLAG_COL).Value = sTemp
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    nDataRow = GetRowByID(oSheet, GetValue(sBuffer, "Data"), nItemRow, nItemRow + nRow - 1)
    If nDataRow > 0 Then
      sTemp = "='" & oSheet.Name & "'!R" & nDataRow & "C"
      If IsEmpty(oResult.Cells(nSectionRow, CUR_COL).Value) Then
        If Not oResult.Cells(r, VALUE_COL).HasFormula And Not IsEmpty(oSheet.Cells(nDataRow, VALUE_COL).Value) Then oResult.Cells(r, VALUE_COL).FormulaR1C1 = sTemp
        If Not IsEmpty(oSheet.Cells(nDataRow, UNIT_COL).Value) Then oResult.Cells(r, UNIT_COL).FormulaR1C1 = sTemp
      Else
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        sTemp = sTemp & "*CHOOSE('" & oSheet.Name & "'!R" & nDataRow & "C4"
        For i = 1 To 3 Step 1
          sTemp = sTemp & "," & arrCurrency(i).sRate
        Next i
        sTemp = sTemp & ")"
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        i = oResult.Cells(nSectionRow, CUR_COL).Value
        If i > 0 Then
          oResult.Cells(r, UNIT_COL).FormulaR1C1 = "='" & oMain.Name & "'!CurName" & i
          If i > 1 Then sTemp = sTemp & "/" & arrCurrency(i).sRate
        Else
          oResult.Cells(r, UNIT_COL).FormulaR1C1 = "='" & oMain.Name & "'!R" & arrCurrency(0).nRow & "C"
          sTemp = sTemp & "/" & arrCurrency(0).sRate
        End If
      End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      oResult.Range(oResult.Cells(r, PERIOD_COL), oResult.Cells(r, PERIOD_COL + nLen - 1)) = sTemp
    Else
      i = oResult.Cells(nSectionRow, CUR_COL).Value
      If i > 0 Then
        oResult.Cells(r, UNIT_COL).FormulaR1C1 = "='" & oMain.Name & "'!CurName" & i
      Else
        oResult.Cells(r, UNIT_COL).FormulaR1C1 = "='" & oMain.Name & "'!R" & arrCurrency(0).nRow & "C"
      End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      oResult.Range(oResult.Cells(r, PERIOD_COL), oResult.Cells(r, PERIOD_COL + nLen - 1)).Value = 0
    End If
  Loop
End Sub

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Private Sub DeleteItem(ByVal sSection As String, ByVal nItemRow As Long)
  Dim r As Long, i As Integer, nSectionRow As Long, nCount As Integer, nID As Long, nRow As Integer, sBuffer As String, sTemp As String
  nSectionRow = 1
  Do While nSectionRow > 0
    nSectionRow = GetRowByID(oResult, sSection, nSectionRow + 1)
    If nSectionRow <= 0 Then Exit Sub
    If nID = 0 Then
      sBuffer = oSheet.Cells(nItemRow, FLAG_COL).Value
      nID = Val(GetValue(sBuffer, "ID"))
    End If
    sBuffer = oResult.Cells(nSectionRow, FLAG_COL).Value
    nCount = Val(GetValue(sBuffer, "Count"))
    r = nSectionRow + Val(GetValue(sBuffer, "Header", 1))
    For i = 1 To nCount Step 1
      sTemp = oResult.Cells(r, FLAG_COL).Value
      nRow = Val(GetValue(sTemp, "Row", 1))
      If Val(GetValue(sTemp, "ID")) = nID Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        oResult.Rows(r & ":" & r + nRow - 1).Delete
' |fffd||fffd||fffd||fffd| c|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If nCount = 1 Then
          r = nSectionRow + Val(GetValue(sBuffer, "Header", 1)) + Val(GetValue(sBuffer, "Footer", 1))
          oResult.Rows(nSectionRow & ":" & r - 1).Hidden = True
        End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        sBuffer = SetValue(sBuffer, "Count", nCount - 1)
        oResult.Cells(nSectionRow, FLAG_COL).Value = sBuffer
        Exit For
      End If
      r = r + nRow
    Next i
  Loop
End Sub

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Private Sub LoadProducts()
  If nProductCount > 0 Then Exit Sub

  Dim r As Long, i As Integer, nRow As Integer, nType As Integer, sBuffer As String
  r = GetRowByID(oSheet, "TABLE::PRODUCT")
  If r > 0 Then r = GetRowByID(oSheet, "DATA", r + 1)
  If r <= 0 Then Exit Sub
  sBuffer = oSheet.Cells(r, FLAG_COL).Value
  r = r + Val(GetValue(sBuffer, "Header", 1))
  For i = Val(GetValue(sBuffer, "Count")) To 1 Step -1
    sBuffer = oSheet.Cells(r, FLAG_COL).Value
    nRow = Val(GetValue(sBuffer, "Row", 1))
    nType = Val(GetValue(sBuffer, "Type"))
    If nType > 0 Then
      nProductCount = nProductCount + 1
      arrProduct(nProductCount).nID = Val(GetValue(sBuffer, "ID"))
      arrProduct(nProductCount).sTitle = oSheet.Cells(r, NAME_COL).Text
      arrProduct(nProductCount).nType = nType
      arrProduct(nProductCount).nRow = r
      If nProductCount = ITEM_COUNT Then Exit For
    End If
    r = r + nRow
  Next i
End Sub

Private Function GetProductByID(ByVal nID As Long) As Integer
  Dim i As Integer
  For i = 1 To nProductCount Step 1
    If arrProduct(i).nID = nID Then
      GetProductByID = i
      Exit Function
    End If
  Next i
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Private Function CostFormula(ByVal sFormula As String, ByVal nIndex As Integer, ByVal nCount As Integer) As String
  Dim nBeg As Integer, nEnd As Integer, nRow As Integer, sResult As String
  nBeg = 1
  Do While True
    nEnd = nBeg
    Do While True
      nEnd = InStr(nEnd, sFormula, "R[")
      If nEnd = 0 Then Exit Do
      nEnd = nEnd + 2
      If Mid(sFormula, nEnd - 3, 1) <> "!" Then Exit Do
    Loop
    If nEnd = 0 Then Exit Do
    sResult = sResult & Mid(sFormula, nBeg, nEnd - nBeg)
    nBeg = nEnd
    nEnd = InStr(nBeg, sFormula, "]")
    nRow = Val(Mid(sFormula, nBeg, nEnd - nBeg))
    If nRow > 0 Then
      nRow = nRow + nCount - nIndex
    ElseIf nRow = -1 Then
      nRow = nRow - nIndex
    Else
      nRow = nRow + 1 - nCount
    End If
    sResult = sResult & nRow
    nBeg = nEnd
  Loop
  CostFormula = sResult & Mid(sFormula, nBeg)
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Private Sub DeleteProduct(ByVal nID As Long)
  Dim r As Long, nMaterialRow As Long, i As Integer, j As Integer, k As Integer
  nMaterialRow = GetRowByID(oSheet, "TABLE::MATERIAL")
  If nMaterialRow > 0 Then r = GetRowByID(oSheet, "DATA", nMaterialRow + 1)
  If r <= 0 Then Exit Sub

  Dim nItemRow As Long, nRow As Integer, nType As Integer, nProduct As Integer, nLen As Integer, sBuffer As String
  nLen = oMain.Range("Prj_Len").Value
  sBuffer = oSheet.Cells(r, FLAG_COL).Value
  nItemRow = r + Val(GetValue(sBuffer, "Header", 1))
  For i = Val(GetValue(sBuffer, "Count")) To 1 Step -1
    sBuffer = oSheet.Cells(nItemRow, FLAG_COL).Value
    nRow = Val(GetValue(sBuffer, "Row", 1))
    nType = Val(GetValue(sBuffer, "Type"))
    nProduct = Val(GetValue(sBuffer, "Product"))
    If nProduct > 0 Then
      r = nItemRow + 1
      For j = 1 To nProduct Step 1
        If Val(GetValue(oSheet.Cells(r + j, FLAG_COL).Value, "Product")) = nID Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          oSheet.Rows(r + j).Delete
          oSheet.Rows(r + nProduct + IIf(nType = 1, 0, 1) + j).Delete
          nRow = nRow - 2
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
          If nProduct = 1 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            oSheet.Rows(nItemRow + 2).Insert
            nRow = nRow + 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1)).ClearContents
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            r = nItemRow + IIf(nType = 1, 3, 4)
            oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1)).ClearContents
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            r = GetTemplateRow(oSheet, nMaterialRow, nType)
            If r > 0 Then
              For k = 1 To 2 Step 1
                oSheet.Rows(r + k).Copy oSheet.Rows(nItemRow + k)
                oSheet.Rows(nItemRow + k).Hidden = False
                With oSheet.Cells(nItemRow + k, FLAG_COL)
                  .Value = SetValue(.Value, "Level")
                End With
              Next k
              k = IIf(nType = 1, 3, 4)
              oSheet.Rows(r + k).Copy oSheet.Rows(nItemRow + k)
              oSheet.Rows(nItemRow + k).Hidden = False
              With oSheet.Cells(nItemRow + k, FLAG_COL)
                .Value = SetValue(.Value, "Level")
              End With
            End If
          End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          sBuffer = SetValue(sBuffer, "Row", nRow)
          sBuffer = SetValue(sBuffer, "Product", nProduct - 1)
          oSheet.Cells(nItemRow, FLAG_COL).Value = sBuffer
          Exit For
        End If
      Next j
    End If
    nItemRow = nItemRow + nRow
  Next i
End Sub

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Private Sub DeleteMaterial(ByVal nID As Long)
  Dim r As Long, i As Integer, j As Integer
  r = GetRowByID(oResult, "TABLE::PRODUCTEXP")
  If r > 0 Then r = GetRowByID(oResult, "DATA.PRODUCT", r + 1)
  If r <= 0 Then Exit Sub

  Dim nRow As Integer, nLen As Integer, sBuffer As String
  nLen = oMain.Range("Prj_Len").Value
  sBuffer = oResult.Cells(r, FLAG_COL).Value
  r = r + Val(GetValue(sBuffer, "Header", 1))
  For i = Val(GetValue(sBuffer, "Count")) To 1 Step -1
    sBuffer = oResult.Cells(r, FLAG_COL).Value
    nRow = Val(GetValue(sBuffer, "Row", 1))
    For j = nRow - 1 To 1 Step -1
      If Val(GetValue(oResult.Cells(r + j, FLAG_COL).Value, "Material")) = nID Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        oResult.Rows(r + j).Delete
        nRow = nRow - 1
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If nRow = 1 Then oResult.Range(oResult.Cells(r, PERIOD_COL), oResult.Cells(r, PERIOD_COL + nLen - 1)).Value = 0
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        sBuffer = SetValue(sBuffer, "Row", nRow)
        oResult.Cells(r, FLAG_COL).Value = sBuffer
        Exit For
      End If
    Next j
    r = r + nRow
  Next i
End Sub

Private Sub buttonClose_Click()
  Unload Me
End Sub

Private Sub buttonInsert_Click()
  Dim nSection As Integer, nSectionRow As Long
  nSection = tabSection.Value + 1
  If nSection <= 0 Then Exit Sub
  nSectionRow = GetRowByID(oSheet, arrSection(nSection).sID, nTableRow + 1)
  If nSectionRow <= 0 Then Exit Sub
  If listItem.ListCount >= ITEM_COUNT Then
    ShowMessage 237, vbOKOnly + vbExclamation
    Exit Sub
  End If

  Dim nType As Integer, sName As String, nCurrency As Integer, sUnit As String, nItem As Integer, nTemplateRow As Long
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nType = arrSection(nSection).nType
  Select Case sTable
  Case "PRODUCT", "MATERIAL", "EXPENSE"
    Load Data_Detail
    Data_Detail.Show vbModal
    If Data_Detail.checkDetail.Value Then nType = nType + 1
    sName = Data_Detail.textName.Value
    nCurrency = Data_Detail.comboCurrency.ListIndex + 1
    sUnit = Data_Detail.textUnit.Value
    nItem = IIf(Data_Detail.checkBulk.Value, Data_Detail.spinItem.Value, 1)
    Unload Data_Detail
  Case "LEASE", "TAXPAY"
    Load Data_Item2
    If sTable = "LEASE" Then
      Data_Item2.optionDetail1.Caption = LoadString(263)
      Data_Item2.optionDetail2.Caption = LoadString(264)
    Else
      Data_Item2.optionDetail1.Caption = LoadString(265)
      Data_Item2.optionDetail2.Caption = LoadString(266)
    End If
    Data_Item2.Show vbModal
    If Data_Item2.optionDetail2.Value Then nType = nType + 1
    sName = Data_Item2.textName.Value
    nCurrency = Data_Item2.comboCurrency.ListIndex + 1
    nItem = IIf(Data_Item2.checkBulk.Value, Data_Item2.spinItem.Value, 1)
    Unload Data_Item2
  Case Else
    Load Data_Item
    If sTable = "STAFF" Then
      Data_Item.checkDetail.Caption = LoadString(262)
    Else
      Data_Item.checkDetail.Visible = False
    End If
    Data_Item.Show vbModal
    If Data_Item.checkDetail.Value Then nType = nType + 1
    sName = Data_Item.textName.Value
    nCurrency = Data_Item.comboCurrency.ListIndex + 1
    nItem = IIf(Data_Item.checkBulk.Value, Data_Item.spinItem.Value, 1)
    Unload Data_Item
  End Select
  If Len(sName) = 0 Then Exit Sub
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 187, vbOKOnly + vbCritical
    Exit Sub
  End If
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  nTemplateRow = GetTemplateRow(oSheet, nTableRow, nType)
  If nTemplateRow <= 0 Then
    MsgBox "Template 'Type=" & nType & "' not found.", vbOKOnly + vbCritical, PRODUCT_NAME
    Exit Sub
  End If

  Dim r As Long, i As Integer, j As Integer, nIndex As Integer, nCount As Integer, nItemIndex As Integer, nRow As Integer, nLevel As Integer, sBuffer As String, sTemp As String
  TransformInit
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nCount = listItem.ListCount
  For i = 1 To nCount Step 1
    If listItem.Selected(i - 1) Then listItem.Selected(i - 1) = False
  Next i
  nIndex = listItem.ListIndex
  If nIndex < 0 Then nIndex = nCount
  sBuffer = oSheet.Cells(nSectionRow, FLAG_COL).Value
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If nCount = 0 Then
    r = nSectionRow + Val(GetValue(sBuffer, "Header", 1)) + Val(GetValue(sBuffer, "Footer", 1))
    oSheet.Rows(nSectionRow & ":" & r - 1).Hidden = False
    If Len(oSheet.Cells(nSectionRow, NAME_COL).Text) = 0 Then oSheet.Rows(nSectionRow).Hidden = True
  End If
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  r = nSectionRow + Val(GetValue(sBuffer, "Header", 1))
  nItemIndex = 0
  For i = 1 To nIndex Step 1
    sTemp = oSheet.Cells(r, FLAG_COL).Value
    If Val(GetValue(sTemp, "Type")) > 0 Then nItemIndex = nItemIndex + 1
    r = r + Val(GetValue(sTemp, "Row", 1))
  Next i
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nRow = Val(GetValue(oSheet.Cells(nTemplateRow, FLAG_COL).Value, "Row", 1))
  For i = 1 To nItem Step 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    oSheet.Rows(r & ":" & r + nRow - 1).Insert
    oSheet.Rows(nTemplateRow & ":" & nTemplateRow + nRow - 1).Copy oSheet.Rows(r)
    For j = 1 To nRow Step 1
      oSheet.Rows(r).Hidden = False
      sTemp = oSheet.Cells(r, FLAG_COL).Value
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|
      If j = 1 Then
        sTemp = SetValue(sTemp, "ID", GetUniqueID())
        oSheet.Cells(r, NAME_COL).Value = sName
        oSheet.Cells(r, CUR_COL).Value = nCurrency
      End If
      Select Case oSheet.Cells(r, ID_COL).Text
' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Case "qty"
        oSheet.Cells(r, UNIT_COL).Value = sUnit
      End Select
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      nLevel = Val(GetValue(sTemp, "Level"))
      If nLevel > 0 Then
        oSheet.Rows(r).OutlineLevel = nLevel
        sTemp = SetValue(sTemp, "Level")
      End If
      oSheet.Cells(r, FLAG_COL).Value = sTemp
      r = r + 1
    Next j
    r = r - nRow
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For j = 1 To nRow Step 1
      If oSheet.Rows(r).OutlineLevel + 1 = oSheet.Rows(r + 1).OutlineLevel Then oSheet.Rows(r).ShowDetail = False
      r = r + 1
    Next j
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    InsertItem arrSection(nSection).sID & "." & sTable, r - nRow, nItemIndex + i - 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    listItem.AddItem sName, nIndex
    If nCurrency > 0 Then listItem.List(nIndex, 1) = arrCurrency(nCurrency).sTitle
    listItem.Selected(nIndex) = True
    nCount = nCount + 1
    nIndex = nIndex + 1
    Me.Repaint
  Next i
  listItem.ListIndex = -1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  sBuffer = SetValue(sBuffer, "Count", nCount)
  oSheet.Cells(nSectionRow, FLAG_COL).Value = sBuffer
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  UpdateTotal arrSection(nSection).sID
  Application.GoTo oSheet.Cells(nTableRow, NAME_COL), False
  TransformDone
End Sub

Private Sub buttonSpace_Click()
  Dim nSection As Integer, nSectionRow As Long
  nSection = tabSection.Value + 1
  If nSection <= 0 Then Exit Sub
  nSectionRow = GetRowByID(oSheet, arrSection(nSection).sID, nTableRow + 1)
  If nSectionRow <= 0 Then Exit Sub
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 187, vbOKOnly + vbCritical
    Exit Sub
  End If

  Dim r As Long, i As Integer, nIndex As Integer, nCount As Integer, sBuffer As String
  TransformInit
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nCount = listItem.ListCount
  For i = 1 To nCount Step 1
    If listItem.Selected(i - 1) Then listItem.Selected(i - 1) = False
  Next i
  nIndex = listItem.ListIndex
  If nIndex < 0 Then nIndex = nCount
  sBuffer = oSheet.Cells(nSectionRow, FLAG_COL).Value
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If nCount = 0 Then
    r = nSectionRow + Val(GetValue(sBuffer, "Header", 1)) + Val(GetValue(sBuffer, "Footer", 1))
    oSheet.Rows(nSectionRow & ":" & r - 1).Hidden = False
    If Len(oSheet.Cells(nSectionRow, NAME_COL).Text) = 0 Then oSheet.Rows(nSectionRow).Hidden = True
  End If
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  r = nSectionRow + Val(GetValue(sBuffer, "Header", 1))
  For i = 1 To nIndex Step 1
    r = r + Val(GetValue(oSheet.Cells(r, FLAG_COL).Value, "Row", 1))
  Next i
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  oSheet.Rows(r).Insert
  oSheet.Rows(r).ClearFormats
  oSheet.Rows(r).OutlineLevel = 1
  oSheet.Cells(r, FLAG_COL).Value = "Type=0;Row=1"
  listItem.AddItem vbNullString, nIndex
  listItem.Selected(nIndex) = True
  listItem.ListIndex = -1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  sBuffer = SetValue(sBuffer, "Count", nCount + 1)
  oSheet.Cells(nSectionRow, FLAG_COL).Value = sBuffer
  Application.GoTo oSheet.Cells(nTableRow, NAME_COL), False
  TransformDone
End Sub

Private Sub buttonEdit_Click()
  Dim nSection As Integer, nSectionRow As Long
  nSection = tabSection.Value + 1
  If nSection <= 0 Then Exit Sub
  nSectionRow = GetRowByID(oSheet, arrSection(nSection).sID, nTableRow + 1)
  If nSectionRow <= 0 Then Exit Sub

  Dim r As Long, i As Integer, nCount As Integer, sBuffer As String
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nCount = listItem.ListCount
  If nCount = 0 Then
    ShowMessage 238, vbOKOnly + vbExclamation
    Exit Sub
  End If
  sBuffer = oSheet.Cells(nSectionRow, FLAG_COL).Value
  r = nSectionRow + Val(GetValue(sBuffer, "Header", 1))
  For i = 1 To nCount Step 1
    sBuffer = oSheet.Cells(r, FLAG_COL).Value
    If listItem.Selected(i - 1) And Val(GetValue(sBuffer, "Type")) > 0 Then Exit For
    r = r + Val(GetValue(sBuffer, "Row", 1))
  Next i
  If i > nCount Then
    ShowMessage 239, vbOKOnly + vbExclamation
    Exit Sub
  End If

  Dim sName As String, nCurrency As Integer
  sName = oSheet.Cells(r, NAME_COL).Text
  nCurrency = oSheet.Cells(r, CUR_COL).Value
  Load Data_Edit
  Data_Edit.textName.Value = sName
  Data_Edit.comboCurrency.ListIndex = nCurrency - 1
  Data_Edit.Show vbModal
  sName = Data_Edit.textName.Value
  nCurrency = Data_Edit.comboCurrency.ListIndex + 1
  Unload Data_Edit
  If Len(sName) = 0 Then Exit Sub
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 187, vbOKOnly + vbCritical
    Exit Sub
  End If

  TransformInit
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  oSheet.Cells(r, NAME_COL).Value = sName
  oSheet.Cells(r, CUR_COL).Value = nCurrency
  listItem.List(i - 1, 0) = sName
  If nCurrency > 0 Then listItem.List(i - 1, 1) = arrCurrency(nCurrency).sTitle
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  UpdateTotal arrSection(nSection).sID
  Application.GoTo oSheet.Cells(nTableRow, NAME_COL), False
  TransformDone
End Sub

Private Sub buttonDelete_Click()
  Dim nSection As Integer, nSectionRow As Long
  nSection = tabSection.Value + 1
  If nSection <= 0 Then Exit Sub
  nSectionRow = GetRowByID(oSheet, arrSection(nSection).sID, nTableRow + 1)
  If nSectionRow <= 0 Then Exit Sub

  Dim r As Long, i As Integer, nCount As Integer, nRow As Integer, sBuffer As String, sTemp As String
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nCount = listItem.ListCount
  If nCount = 0 Then
    ShowMessage 238, vbOKOnly + vbExclamation
    Exit Sub
  End If
  nRow = 0
  For i = 1 To nCount Step 1
    If listItem.Selected(i - 1) Then nRow = nRow + 1
  Next i
  If nRow = 0 Then
    ShowMessage 240, vbOKOnly + vbExclamation
    Exit Sub
  End If
  If ShowMessage(241, vbYesNo + vbQuestion) = vbNo Then Exit Sub
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 187, vbOKOnly + vbCritical
    Exit Sub
  End If

  TransformInit
  sBuffer = oSheet.Cells(nSectionRow, FLAG_COL).Value
  r = nSectionRow + Val(GetValue(sBuffer, "Header", 1))
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  i = 1
  Do While i <= nCount
    sTemp = oSheet.Cells(r, FLAG_COL).Value
    nRow = Val(GetValue(sTemp, "Row", 1))
    If listItem.Selected(i - 1) Then
      If Val(GetValue(sTemp, "Type")) > 0 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        DeleteItem arrSection(nSection).sID & "." & sTable, r
        Select Case sTable
        Case "PRODUCT"
          DeleteProduct Val(GetValue(sTemp, "ID"))
        Case "MATERIAL"
          DeleteMaterial Val(GetValue(sTemp, "ID"))
        End Select
      End If
      oSheet.Rows(r & ":" & r + nRow - 1).Delete
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      listItem.RemoveItem i - 1
      nCount = nCount - 1
      Me.Repaint
    Else
      i = i + 1
      r = r + nRow
    End If
  Loop
  listItem.ListIndex = -1
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If nCount = 0 Then
    r = nSectionRow + Val(GetValue(sBuffer, "Header", 1)) + Val(GetValue(sBuffer, "Footer", 1))
    oSheet.Rows(nSectionRow & ":" & r - 1).Hidden = True
  End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  sBuffer = SetValue(sBuffer, "Count", nCount)
  oSheet.Cells(nSectionRow, FLAG_COL).Value = sBuffer
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  UpdateTotal arrSection(nSection).sID
  Application.GoTo oSheet.Cells(nTableRow, NAME_COL), False
  TransformDone
End Sub

Private Sub LinkMaterial()
  Dim nSection As Integer, nSectionRow As Long
  nSection = tabSection.Value + 1
  If nSection <= 0 Then Exit Sub
  nSectionRow = GetRowByID(oSheet, arrSection(nSection).sID, nTableRow + 1)
  If nSectionRow <= 0 Then Exit Sub

  Dim r As Long, i As Integer, nCount As Integer, sBuffer As String
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  nCount = listItem.ListCount
  If nCount = 0 Then
    ShowMessage 238, vbOKOnly + vbExclamation
    Exit Sub
  End If
  sBuffer = oSheet.Cells(nSectionRow, FLAG_COL).Value
  r = nSectionRow + Val(GetValue(sBuffer, "Header", 1))
  For i = 1 To nCount Step 1
    sBuffer = oSheet.Cells(r, FLAG_COL).Value
    If listItem.Selected(i - 1) And Val(GetValue(sBuffer, "Type")) > 0 Then Exit For
    r = r + Val(GetValue(sBuffer, "Row", 1))
  Next i
  If i > nCount Then
    ShowMessage 244, vbOKOnly + vbExclamation
    Exit Sub
  End If

  Dim nIndex As Integer, nCountOld As Integer, nCountNew As Integer
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  LoadProducts
  Load Data_Material
  Data_Material.labelName.Caption = oSheet.Cells(r, NAME_COL).Text
  For i = 1 To nProductCount Step 1
    Data_Material.listProduct.AddItem arrProduct(i).sTitle
  Next i
  r = r + 1
  For i = Val(GetValue(sBuffer, "Product")) To 1 Step -1
    nIndex = GetProductByID(Val(GetValue(oSheet.Cells(r + i, FLAG_COL).Value, "Product")))
    If nIndex > 0 Then Data_Material.listProduct.Selected(nIndex - 1) = True
  Next i
  Data_Material.Show vbModal
  If Data_Material.listProduct.ListCount = 0 Then
    nCountNew = -1
  Else
    nCountNew = 0
    For i = 1 To nProductCount Step 1
      arrProduct(i).bSelect = False
      If Data_Material.listProduct.Selected(i - 1) Then
        nCountNew = nCountNew + 1
        arrProduct(i).bSelect = True
      End If
    Next i
  End If
  Unload Data_Material
  If nCountNew < 0 Then Exit Sub
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 187, vbOKOnly + vbCritical
    Exit Sub
  End If

  Dim nItemRow As Long, nType As Integer, nRow As Integer, j As Integer, k As Integer, nLen As Integer, rgbEdit As Long, sTemp As String
  Dim arrMaterial(1 To ITEM_COUNT) As MaterialData
  TransformInit
  nLen = oMain.Range("Prj_Len").Value
  r = oOptions.Range("Opt_Colors").Row
  rgbEdit = oOptions.Cells(r, 4).Interior.Color
  sBuffer = oSheet.Cells(nSectionRow, FLAG_COL).Value
  nItemRow = nSectionRow + Val(GetValue(sBuffer, "Header", 1))
  For i = 1 To nCount Step 1
    sBuffer = oSheet.Cells(nItemRow, FLAG_COL).Value
    nType = Val(GetValue(sBuffer, "Type"))
    nRow = Val(GetValue(sBuffer, "Row", 1))
    arrMaterial(i).nID = Val(GetValue(sBuffer, "ID"))
    If listItem.Selected(i - 1) And nType > 0 Then
      arrMaterial(i).nType = nType
      arrMaterial(i).nRow = nItemRow
      arrMaterial(i).nProduct = nCountNew
      arrMaterial(i).bSelect = True
      For j = 1 To nProductCount Step 1
        arrProduct(j).nPos = 0
      Next j
      nCountOld = Val(GetValue(sBuffer, "Product"))
      If nCountOld > 0 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        r = nItemRow + 1
        oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1)).ClearContents
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        k = nCountOld + IIf(nType = 1, 1, 2)
        oSheet.Range(oSheet.Cells(r + k, PERIOD_COL), oSheet.Cells(r + k, PERIOD_COL + nLen - 1)).ClearContents
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For j = nCountOld To 1 Step -1
          nIndex = GetProductByID(Val(GetValue(oSheet.Cells(r + j, FLAG_COL).Value, "Product")))
          If nIndex > 0 Then
            arrProduct(nIndex).nPos = j
            If Not arrProduct(nIndex).bSelect Then nIndex = -1
          End If
          If nIndex <= 0 Then
            oSheet.Rows(r + j).Delete
            k = k - 1
            oSheet.Rows(r + k + j).Delete
            nRow = nRow - 2
          End If
        Next j
      End If
      If nCountNew > 0 Then
        If nCountOld = 0 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          r = nItemRow + 1
          With oSheet.Cells(r, VALUE_COL)
            .ClearContents
            .Locked = True
            .Interior.ColorIndex = xlColorIndexNone
          End With
          With oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1))
            .ClearContents
            .Locked = True
            .Interior.ColorIndex = xlColorIndexNone
          End With
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          r = nItemRow + IIf(nType = 1, 3, 4)
          oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1)).ClearContents
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          oSheet.Rows(nItemRow + 2).Delete
          nRow = nRow - 1
        End If

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        r = nItemRow + 1
        If Not oSheet.Rows(r).ShowDetail Then oSheet.Rows(r).ShowDetail = True
        For j = 1 To nProductCount Step 1
          If arrProduct(j).bSelect Then
            r = r + 1
            If arrProduct(j).nPos = 0 Then
              oSheet.Rows(r).Insert
              oSheet.Rows(r).OutlineLevel = 2
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              With oSheet.Cells(r, NAME_COL)
                .IndentLevel = 2
                .FormulaR1C1 = "=R" & arrProduct(j).nRow & "C"
              End With
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              With oSheet.Cells(r, VALUE_COL)
                .Value = 0
                .Locked = False
                .Interior.Color = rgbEdit
              End With
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              With oSheet.Cells(r, UNIT_COL)
                .FormulaR1C1 = "=R" & nItemRow + 1 & "C"
                .Locked = True
                .Interior.ColorIndex = xlColorIndexNone
              End With
              oSheet.Cells(r, FLAG_COL).Value = "Product=" & arrProduct(j).nID & ";Mode=sum"
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1)).FormulaR1C1 = "=R" & arrProduct(j).nRow + IIf(arrProduct(j).nType = 1, 2, 1) & "C*RC2"
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              oSheet.Cells(r, PERIOD_COL + nLen + 1).FormulaR1C1 = "=SUM(RC[-" & nLen + 1 & "]:RC[-1])"
              nRow = nRow + 1
            End If
          End If
        Next j
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        r = nItemRow + 1
        oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1)).FormulaR1C1 = "=SUM(R[1]C:R[" & nCountNew & "]C)"

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        nItemRow = nItemRow + IIf(nType = 1, 2, 3) + nCountNew
        r = nItemRow
        If Not oSheet.Rows(r).ShowDetail Then oSheet.Rows(r).ShowDetail = True
        For j = 1 To nProductCount Step 1
          If arrProduct(j).bSelect Then
            r = r + 1
            If arrProduct(j).nPos = 0 Then
              oSheet.Rows(r).Insert
              oSheet.Rows(r).OutlineLevel = 2
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              With oSheet.Cells(r, NAME_COL)
                .IndentLevel = 2
                .FormulaR1C1 = "=R" & arrProduct(j).nRow & "C"
              End With
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              oSheet.Cells(r, UNIT_COL).FormulaR1C1 = "=R" & nItemRow & "C"
              oSheet.Cells(r, CUR_COL).FormulaR1C1 = "=R" & nItemRow & "C"
              oSheet.Cells(r, FLAG_COL).Value = "Mode=sum"
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              oSheet.Cells(r, PERIOD_COL + nLen + 1).FormulaR1C1 = "=SUM(RC[-" & nLen + 1 & "]:RC[-1])"
              nRow = nRow + 1
            End If
          End If
        Next j
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        r = GetTemplateRow(oSheet, nTableRow, nType)
        If r > 0 Then
          sTemp = oSheet.Cells(r + IIf(nType = 1, 3, 4), PERIOD_COL).FormulaR1C1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          sTemp = Replace(sTemp, IIf(nType = 1, "R[-1]C*", "R[-2]C*"), "")
          r = nItemRow
          For j = 1 To nProductCount Step 1
            If arrProduct(j).bSelect Then
              r = r + 1
              If arrProduct(j).nPos = 0 Then
                oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1)).FormulaR1C1 = CostFormula(sTemp, r - nItemRow, nCountNew)
              End If
            End If
          Next j
        End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        oSheet.Range(oSheet.Cells(nItemRow, PERIOD_COL), oSheet.Cells(nItemRow, PERIOD_COL + nLen - 1)).FormulaR1C1 = "=SUM(R[1]C:R[" & nCountNew & "]C)"
        oSheet.Rows(nItemRow).ShowDetail = False
        nItemRow = nItemRow - IIf(nType = 1, 2, 3) - nCountNew
      ElseIf nCountOld > 0 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        oSheet.Rows(nItemRow + 2).Insert
        nRow = nRow + 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        r = GetTemplateRow(oSheet, nTableRow, nType)
        If r > 0 Then
          For j = 1 To 2 Step 1
            oSheet.Rows(r + j).Copy oSheet.Rows(nItemRow + j)
            oSheet.Rows(nItemRow + j).Hidden = False
            With oSheet.Cells(nItemRow + j, FLAG_COL)
              .Value = SetValue(.Value, "Level")
            End With
          Next j
          j = IIf(nType = 1, 3, 4)
          oSheet.Rows(r + j).Copy oSheet.Rows(nItemRow + j)
          oSheet.Rows(nItemRow + j).Hidden = False
          With oSheet.Cells(nItemRow + j, FLAG_COL)
            .Value = SetValue(.Value, "Level")
          End With
        End If
      End If
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If nCountNew <> nCountOld Then
        With oSheet.Cells(nItemRow, FLAG_COL)
          sBuffer = .Value
          sBuffer = SetValue(sBuffer, "Row", nRow)
          sBuffer = SetValue(sBuffer, "Product", nCountNew)
          .Value = sBuffer
        End With
      End If
    End If
    nItemRow = nItemRow + nRow
  Next i
'
  r = GetRowByID(oResult, "TABLE::PRODUCTEXP")
  If r > 0 Then r = GetRowByID(oResult, "DATA.PRODUCT", r + 1)
  If r > 0 Then
    Dim nID As Long
    sBuffer = oResult.Cells(r, FLAG_COL).Value
    r = r + Val(GetValue(sBuffer, "Header", 1))
    For i = Val(GetValue(sBuffer, "Count")) To 1 Step -1
      sBuffer = oResult.Cells(r, FLAG_COL).Value
      nRow = Val(GetValue(sBuffer, "Row", 1))
      nIndex = GetProductByID(Val(GetValue(sBuffer, "ID")))
      If nIndex > 0 Then
        If Not arrProduct(nIndex).bSelect Then nIndex = -1
      End If
      nCountOld = nRow - 1
      For j = 1 To nCount Step 1
        arrMaterial(j).nPos = 0
      Next j
      If nRow > 1 And Not oResult.Rows(r).ShowDetail Then oResult.Rows(r).ShowDetail = True
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      For j = nCountOld To 1 Step -1
        nID = Val(GetValue(oResult.Cells(r + j, FLAG_COL).Value, "Material"))
        For k = 1 To nCount Step 1
          If arrMaterial(k).nID = nID Then
            arrMaterial(k).nPos = j
            If nIndex <= 0 And arrMaterial(k).bSelect Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              oResult.Rows(r + j).Delete
              nRow = nRow - 1
            End If
            Exit For
          End If
        Next k
      Next j
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If nIndex > 0 Then
        For j = 1 To nCount Step 1
          If arrMaterial(j).nPos > 0 Then
            r = r + 1
          ElseIf arrMaterial(j).bSelect Then
            r = r + 1
            oResult.Rows(r).Insert
            oResult.Rows(r).OutlineLevel = 2
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            With oResult.Cells(r, NAME_COL)
              .IndentLevel = 1
              .FormulaR1C1 = "='" & oSheet.Name & "'!R" & arrMaterial(j).nRow & "C"
            End With
            oResult.Cells(r, VALUE_COL).FormulaR1C1 = "=RC[" & nLen + 6 & "]"
            oResult.Cells(r, UNIT_COL).FormulaR1C1 = "='" & oMain.Name & "'!R" & arrCurrency(0).nRow & "C"
            oResult.Cells(r, FLAG_COL).Value = "Material=" & arrMaterial(j).nID & ";Mode=sum"
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            nItemRow = arrMaterial(j).nRow + 1
            nID = arrProduct(nIndex).nID
            For k = arrMaterial(j).nProduct To 1 Step -1
              If Val(GetValue(oSheet.Cells(nItemRow + k, FLAG_COL).Value, "Product")) = nID Then Exit For
            Next k
            If k > 0 Then
              nItemRow = nItemRow + arrMaterial(j).nProduct + IIf(arrMaterial(j).nType = 1, 1, 2) + k
              sTemp = "='" & oSheet.Name & "'!R" & nItemRow & "C"
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
              sTemp = sTemp & "*CHOOSE('" & oSheet.Name & "'!R" & nItemRow & "C4"
              For k = 1 To 3 Step 1
                sTemp = sTemp & "," & arrCurrency(k).sRate
              Next k
              sTemp = sTemp & ")/" & arrCurrency(0).sRate
              oResult.Range(oResult.Cells(r, PERIOD_COL), oResult.Cells(r, PERIOD_COL + nLen - 1)).FormulaR1C1 = sTemp
            End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            oResult.Cells(r, PERIOD_COL + nLen + 1).FormulaR1C1 = "=SUM(RC[-" & nLen + 1 & "]:RC[-1])"
            nRow = nRow + 1
          End If
        Next j
        r = r - nRow + 1
      End If
      If nRow <> nCountOld + 1 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If nRow > 1 Then
          oResult.Range(oResult.Cells(r, PERIOD_COL), oResult.Cells(r, PERIOD_COL + nLen - 1)).FormulaR1C1 = "=SUM(R[1]C:R[" & nRow - 1 & "]C)"
        Else
          oResult.Range(oResult.Cells(r, PERIOD_COL), oResult.Cells(r, PERIOD_COL + nLen - 1)).Value = 0
        End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        sBuffer = SetValue(sBuffer, "Row", nRow)
        oResult.Cells(r, FLAG_COL).Value = sBuffer
      End If
      If nRow > 1 And oResult.Rows(r).ShowDetail Then oResult.Rows(r).ShowDetail = False
      r = r + nRow
    Next i
  End If
  Application.GoTo oSheet.Cells(nTableRow, NAME_COL), False
  TransformDone
End Sub

Private Sub AutoLoan()
  Dim nSection As Integer, nSectionRow As Long
  nSection = tabSection.Value + 1
  If nSection <= 0 Then Exit Sub
  nSectionRow = GetRowByID(oSheet, arrSection(nSection).sID, nTableRow + 1)
  If nSectionRow <= 0 Then Exit Sub

  Dim r As Long, i As Integer, nCount As Integer, sBuffer As String
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  nCount = listItem.ListCount
  If nCount = 0 Then
    ShowMessage 238, vbOKOnly + vbExclamation
    Exit Sub
  End If
  sBuffer = oSheet.Cells(nSectionRow, FLAG_COL).Value
  r = nSectionRow + Val(GetValue(sBuffer, "Header", 1))
  For i = 1 To nCount Step 1
    sBuffer = oSheet.Cells(r, FLAG_COL).Value
    If listItem.Selected(i - 1) And Val(GetValue(sBuffer, "Type")) > 0 Then Exit For
    r = r + Val(GetValue(sBuffer, "Row", 1))
  Next i
  If i > nCount Then
    ShowMessage 246, vbOKOnly + vbExclamation
    Exit Sub
  End If

  Dim nFrom As Integer, nTill As Integer, dRest As Double, dCover As Double
  sBuffer = oSheet.Cells(nTableRow, FLAG_COL).Value
  dRest = Val(GetValue(sBuffer, "Rest"))
  dCover = Val(GetValue(sBuffer, "Cover", 100))
  Load Data_Loan
  Data_Loan.labelName.Caption = oSheet.Cells(r, NAME_COL).Text
  Data_Loan.labelCurrency.Caption = arrCurrency(oSheet.Cells(r, CUR_COL).Value).sTitle
  Data_Loan.textRest.Value = dRest
  Data_Loan.spinCover.Value = dCover
  Data_Loan.Show vbModal
  If Len(Data_Loan.textRest.Value) > 0 Then
    nFrom = Data_Loan.spinFrom.Value
    nTill = Data_Loan.spinTill.Value
    dRest = CDbl(Data_Loan.textRest.Value)
    dCover = Data_Loan.spinCover.Value
  End If
  Unload Data_Loan
  If nFrom <= 0 Then Exit Sub
  sBuffer = SetValue(sBuffer, "Rest", dRest)
  sBuffer = SetValue(sBuffer, "Cover", dCover)
  oSheet.Cells(nTableRow, FLAG_COL).Value = sBuffer
  dCover = 100 / dCover
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 187, vbOKOnly + vbCritical
    Exit Sub
  End If

  Dim nLenRow As Long, nItemRow As Long, nCurrency As Integer, nRateRow As Long, nInflowRow As Long, nOutflowRow As Long, nBalanceRow As Long
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  nLenRow = GetRowByID(oMain, "PeriodLen")
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|)
  nItemRow = r
  r = r + Val(GetValue(oSheet.Cells(r, FLAG_COL).Value, "Row", 1)) - 1
  nCurrency = oSheet.Cells(nItemRow, CUR_COL).Value
  nRateRow = GetRowByID(oSheet, "rate", nItemRow, r)
  nInflowRow = GetRowByID(oSheet, "inflow", nItemRow, r)
  nOutflowRow = GetRowByID(oSheet, "outflow", nItemRow, r)
  nBalanceRow = GetRowByID(oSheet, "balance", nItemRow, r)
  If nLenRow <= 0 Or nRateRow <= 0 Or nInflowRow <= 0 Or nOutflowRow <= 0 Or nBalanceRow <= 0 Then
    MsgBox "Cannot find necessary loan parameters.", vbOKOnly + vbCritical, PRODUCT_NAME
    Exit Sub
  End If

  Dim nRestRow As Long, nTotalRow As Long, nBorrowRow As Long, nReturnRow As Long, nInterestRow As Long
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  r = GetRowByID(oResult, "TABLE::CASH") + 1
  nRestRow = GetRowByID(oResult, "CF25", r)
  nTotalRow = GetRowByID(oResult, "CF23", r)
  nBorrowRow = GetRowByID(oResult, "CF19", r)
  nReturnRow = GetRowByID(oResult, "CF20", r)
  nInterestRow = GetRowByID(oResult, "CF06", r)
  If nRestRow <= 0 Or nTotalRow <= 0 Or nBorrowRow <= 0 Or nReturnRow <= 0 Or nInterestRow <= 0 Then
    MsgBox "Cannot find necessary result rows.", vbOKOnly + vbCritical, PRODUCT_NAME
    Exit Sub
  End If

  Dim j As Integer, dRateRes As Double, dRateItem As Double, dValue As Double, dLimit As Double
  TransformInit
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  oSheet.Range(oSheet.Cells(nInflowRow, PERIOD_COL + nFrom - 1), oSheet.Cells(nInflowRow, PERIOD_COL + nTill - 1)).Value = 0
  oSheet.Range(oSheet.Cells(nOutflowRow, PERIOD_COL + nFrom - 1), oSheet.Cells(nOutflowRow, PERIOD_COL + nTill - 1)).Value = 0
  Application.Calculate
  For i = nFrom To nTill Step 1
    Application.StatusBar = LoadStringParam(247, i)
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    dRateRes = oMain.Cells(arrCurrency(0).nRow, PERIOD_COL + i - 1).Value
    If nCurrency > 1 Then
      dValue = oMain.Cells(arrCurrency(nCurrency).nRow + 1, PERIOD_COL + i - 1).Value
      If dValue > 0 Then dRateRes = dRateRes / dValue
    End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    dRateItem = 1 + oSheet.Cells(nRateRow, PERIOD_COL + i - 1).Value * oMain.Cells(nLenRow, PERIOD_COL + i - 1) / 12
    If oResult.Cells(nRestRow, PERIOD_COL + i - 1).Value * dRateRes < dRest Then
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      For j = 1 To 10 Step 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        dValue = (dRest - oResult.Cells(nRestRow, PERIOD_COL + i - 1).Value * dRateRes) * dRateItem
        If Abs(dValue) < 0.001 Then Exit For
        With oSheet.Cells(nInflowRow, PERIOD_COL + i - 1)
          .Value = .Value + dValue
        End With
        Application.Calculate
      Next j
    Else
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      For j = 1 To 10 Step 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        dValue = (oResult.Cells(nRestRow, PERIOD_COL + i - 1).Value * dRateRes - dRest) * dRateItem
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        dLimit = oResult.Cells(nTotalRow, PERIOD_COL + i - 1).Value - oResult.Cells(nBorrowRow, PERIOD_COL + i - 1).Value - oResult.Cells(nReturnRow, PERIOD_COL + i - 1).Value - oResult.Cells(nInterestRow, PERIOD_COL + i - 1).Value
        dLimit = (dLimit * dCover + oResult.Cells(nReturnRow, PERIOD_COL + i - 1).Value + oResult.Cells(nInterestRow, PERIOD_COL + i - 1).Value) * dRateRes
        If dLimit < 0 Then dLimit = 0
        If dValue > dLimit Then dValue = dLimit
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        dLimit = oSheet.Cells(nBalanceRow, PERIOD_COL + i - 1).Value
        If dValue > dLimit Then dValue = dLimit
        If Abs(dValue) < 0.001 Then Exit For
        With oSheet.Cells(nOutflowRow, PERIOD_COL + i - 1)
          .Value = .Value + dValue
        End With
        Application.Calculate
      Next j
    End If
  Next i
  If oSheet.Cells(nBalanceRow, PERIOD_COL + nTill - 1).Value > 0 Then ShowMessage 248, vbOKOnly + vbExclamation
  Application.GoTo oSheet.Cells(nItemRow, NAME_COL), False
  TransformDone
End Sub

Private Sub buttonSpecial_Click()
  Select Case sTable
  Case "LOAN"
    AutoLoan
  Case "MATERIAL"
    LinkMaterial
  End Select
End Sub

Private Sub listItem_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  buttonEdit_Click
End Sub

Private Sub listItem_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  Select Case KeyCode
  Case vbKeyInsert
    buttonInsert_Click
  Case vbKeyDelete
    buttonDelete_Click
  Case vbKeySpace
    buttonEdit_Click
  End Select
End Sub

Private Sub tabSection_Change()
  Dim nSection As Integer, r As Long
  listItem.Clear
  nSection = tabSection.Value + 1
  If nSection <= 0 Then Exit Sub
  r = GetRowByID(oSheet, arrSection(nSection).sID, nTableRow + 1)
  If r <= 0 Then Exit Sub

  Dim i As Integer, nCount As Integer, nCurrency As Integer, sBuffer As String
  sBuffer = oSheet.Cells(r, FLAG_COL).Value
  nCount = Val(GetValue(sBuffer, "Count"))
  r = r + Val(GetValue(sBuffer, "Header", 1))
  For i = 1 To nCount Step 1
    listItem.AddItem oSheet.Cells(r, NAME_COL).Text
    sBuffer = oSheet.Cells(r, FLAG_COL).Value
    If Val(GetValue(sBuffer, "Type")) > 0 Then
      nCurrency = oSheet.Cells(r, CUR_COL).Value
      If nCurrency > 0 Then listItem.List(i - 1, 1) = arrCurrency(nCurrency).sTitle
    End If
    r = r + Val(GetValue(sBuffer, "Row", 1))
  Next i
  listItem.ListIndex = -1
End Sub

Private Sub UserForm_Initialize()
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)
  Set oResult = ThisWorkbook.Sheets(oOptions.Range("Opt_ResultSheet").Value)
  Set oSheet = ActiveSheet

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(230)
  labelName.Caption = LoadString(231)
  labelCurrency.Caption = LoadString(232)
  buttonInsert.Caption = LoadString(233)
  buttonSpace.Caption = LoadString(234)
  buttonEdit.Caption = LoadString(235)
  buttonDelete.Caption = LoadString(236)
  buttonClose.Caption = LoadString(118)
  listItem.ColumnWidths = Str(labelName.Width) & ";" & Str(labelCurrency.Width)

  Dim r As Long, i As Integer, nRow As Long
  If VarType(Application.Caller) = vbString Then
    r = oSheet.Shapes(Application.Caller).TopLeftCell.Row
  Else
    r = ActiveCell.Row
  End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  nTableRow = GetRowByID(oSheet, "TABLE::", r)
  If nTableRow <= 0 Then
    MsgBox "Table not found.", vbOKOnly + vbCritical, PRODUCT_NAME
  Else
    Me.Caption = oSheet.Cells(nTableRow, NAME_COL).Text
    sTable = Mid(oSheet.Cells(nTableRow, ID_COL).Text, 8)
    nRow = GetRowByID(oSheet, "END::" & sTable, nTableRow + 1)
    If nRow <= 0 Then
      MsgBox "End of table not found.", vbOKOnly + vbCritical, PRODUCT_NAME
      nTableRow = 0
    Else
      If GetRowByID(oSheet, "TEMPLATE", nTableRow + 1, nRow) <= 0 Then MsgBox "Section 'TEMPLATE' not found.", vbOKOnly + vbCritical, PRODUCT_NAME
      If GetRowByID(oSheet, "TOTAL", nTableRow + 1, nRow) <= 0 Then MsgBox "Section 'TOTAL' not found.", vbOKOnly + vbCritical, PRODUCT_NAME
      r = nTableRow
      Do While r > 0
        r = GetRowByID(oSheet, "DATA", r + 1, nRow)
        If r <= 0 Then Exit Do
        nSectionCount = nSectionCount + 1
        arrSection(nSectionCount).sID = oSheet.Cells(r, ID_COL).Text
        arrSection(nSectionCount).sTitle = oSheet.Cells(r, NAME_COL).Text
        arrSection(nSectionCount).nType = Val(GetValue(oSheet.Cells(r, FLAG_COL).Value, "Type", 1))
        If nSectionCount = SECTION_COUNT Then Exit Do
      Loop
      If nSectionCount = 0 Then
        MsgBox "Section 'DATA' not found.", vbOKOnly + vbCritical, PRODUCT_NAME
        nTableRow = 0
      End If
    End If
  End If

' |fffd||fffd||fffd||fffd||fffd||fffd|
  arrCurrency(0).nRow = oMain.Range("Prj_CurReport").Row
  arrCurrency(0).sRate = "'" & oMain.Name & "'!R" & arrCurrency(0).nRow & "C"
  For i = 1 To 3 Step 1
    arrCurrency(i).sTitle = oMain.Range("CurName" & i).Text
    arrCurrency(i).nRow = oMain.Range("Prj_Cur" & i).Row
    arrCurrency(i).sRate = "'" & oMain.Name & "'!R" & arrCurrency(i).nRow + 1 & "C"
  Next i
  arrCurrency(1).sRate = "1"

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If nSectionCount > 1 Then
    tabSection.Visible = True
    labelName.Top = tabSection.Top + labelName.Height * 1.5
    listItem.Height = tabSection.Height - labelName.Height * 3
  Else
    tabSection.Visible = False
    labelName.Top = tabSection.Top
    listItem.Height = tabSection.Height - labelName.Height
  End If
  labelCurrency.Top = labelName.Top
  listItem.Top = labelName.Top + labelName.Height
  DoEvents
  listItem.IntegralHeight = True
  For i = 1 To nSectionCount Step 1
    tabSection.Tabs.Add vbNullString, arrSection(i).sTitle
  Next i

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Select Case sTable
  Case "MATERIAL"
    buttonSpecial.Caption = LoadString(243)
    buttonSpecial.Visible = True
  Case "LOAN"
    buttonSpecial.Caption = LoadString(245)
    buttonSpecial.Visible = True
  Case Else
    buttonSpecial.Visible = False
  End Select
End Sub
Attribute VB_Name = "Data_Detail"
Attribute VB_Base = "0{4F4F5CC3-549F-4D6A-A827-63625637116C}{8FEB315C-D47B-4936-AF22-E934C544A82C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  If Len(Trim(textName.Value)) = 0 Then
    ShowMessage 260, vbOKOnly + vbExclamation
    textName.SetFocus
    Exit Sub
  End If
  Me.Hide
End Sub

Private Sub buttonCancel_Click()
  textName.Value = vbNullString
  Me.Hide
End Sub

Private Sub checkDetail_Click()
  Dim bValue As Boolean
  bValue = checkDetail.Value
  labelUnit.Enabled = bValue
  textUnit.Enabled = bValue
End Sub

Private Sub checkBulk_Click()
  Dim bValue As Boolean
  bValue = checkBulk.Value
  textItem.Enabled = bValue
  spinItem.Enabled = bValue
  labelItem.Enabled = bValue
End Sub

Private Sub textItem_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If IsNumeric(textItem.Value) Then
    Dim nValue As Integer
    nValue = textItem.Value
    If nValue < spinItem.Min Then
      nValue = spinItem.Min
    ElseIf nValue > spinItem.Max Then
      nValue = spinItem.Max
    End If
    spinItem.Value = nValue
  End If
  textItem.Value = spinItem.Value
End Sub

Private Sub spinItem_Change()
  textItem.Value = spinItem.Value
End Sub

Private Sub UserForm_Initialize()
  Dim oOptions As Worksheet, oMain As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(250)
  labelName.Caption = LoadString(252)
  textName.Value = LoadString(253)
  labelCurrency.Caption = LoadString(254)
  checkDetail.Caption = LoadString(261)
  labelUnit.Caption = LoadString(257)
  textUnit.Value = LoadString(258)
  checkBulk.Caption = LoadString(255)
  labelItem.Caption = LoadString(256)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)

  Dim i As Integer
  For i = 1 To 3 Step 1
    If oMain.Range("Prj_Cur" & i).Value Then comboCurrency.AddItem oMain.Range("CurName" & i).Text
  Next i
  textName.SelStart = 0
  textName.SelLength = Len(textName.Value)
  comboCurrency.ListIndex = 0
  checkDetail.Value = False
  labelUnit.Enabled = False
  textUnit.Enabled = False
  checkBulk.Value = False
  textItem.Value = spinItem.Value
  textItem.Enabled = False
  spinItem.Enabled = False
  labelItem.Enabled = False
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = vbFormControlMenu Then
    Cancel = 1
    textName.Value = vbNullString
    Me.Hide
  End If
End Sub
Attribute VB_Name = "Data_Edit"
Attribute VB_Base = "0{32590A1B-7997-467C-B4E4-28536FBBCFDD}{5EF48B6B-174D-46F7-A41F-93646D363F8F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  If Len(Trim(textName.Value)) = 0 Then
    ShowMessage 260, vbOKOnly + vbExclamation
    textName.SetFocus
    Exit Sub
  End If
  Me.Hide
End Sub

Private Sub buttonCancel_Click()
  textName.Value = vbNullString
  Me.Hide
End Sub

Private Sub UserForm_Initialize()
  Dim oOptions As Worksheet, oMain As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(251)
  labelName.Caption = LoadString(252)
  textName.Value = LoadString(253)
  labelCurrency.Caption = LoadString(254)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)

  Dim i As Integer
  For i = 1 To 3 Step 1
    If oMain.Range("Prj_Cur" & i).Value Then comboCurrency.AddItem oMain.Range("CurName" & i).Text
  Next i
  textName.SelStart = 0
  textName.SelLength = Len(textName.Value)
  comboCurrency.ListIndex = 0
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = vbFormControlMenu Then
    Cancel = 1
    textName.Value = vbNullString
    Me.Hide
  End If
End Sub
Attribute VB_Name = "Data_Item"
Attribute VB_Base = "0{A3A81292-1A2C-4069-9E95-8D4B04D11F33}{C34AD1AC-0E3A-4834-A726-7D8EF56FC02A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  If Len(Trim(textName.Value)) = 0 Then
    ShowMessage 260, vbOKOnly + vbExclamation
    textName.SetFocus
    Exit Sub
  End If
  Me.Hide
End Sub

Private Sub buttonCancel_Click()
  textName.Value = vbNullString
  Me.Hide
End Sub

Private Sub checkBulk_Click()
  Dim bValue As Boolean
  bValue = checkBulk.Value
  textItem.Enabled = bValue
  spinItem.Enabled = bValue
  labelItem.Enabled = bValue
End Sub

Private Sub textItem_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If IsNumeric(textItem.Value) Then
    Dim nValue As Integer
    nValue = textItem.Value
    If nValue < spinItem.Min Then
      nValue = spinItem.Min
    ElseIf nValue > spinItem.Max Then
      nValue = spinItem.Max
    End If
    spinItem.Value = nValue
  End If
  textItem.Value = spinItem.Value
End Sub

Private Sub spinItem_Change()
  textItem.Value = spinItem.Value
End Sub

Private Sub UserForm_Initialize()
  Dim oOptions As Worksheet, oMain As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(250)
  labelName.Caption = LoadString(252)
  textName.Value = LoadString(253)
  labelCurrency.Caption = LoadString(254)
  checkDetail.Caption = LoadString(259)
  checkBulk.Caption = LoadString(255)
  labelItem.Caption = LoadString(256)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)

  Dim i As Integer
  For i = 1 To 3 Step 1
    If oMain.Range("Prj_Cur" & i).Value Then comboCurrency.AddItem oMain.Range("CurName" & i).Text
  Next i
  textName.SelStart = 0
  textName.SelLength = Len(textName.Value)
  comboCurrency.ListIndex = 0
  checkDetail.Value = False
  checkBulk.Value = False
  textItem.Value = spinItem.Value
  textItem.Enabled = False
  spinItem.Enabled = False
  labelItem.Enabled = False
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = vbFormControlMenu Then
    Cancel = 1
    textName.Value = vbNullString
    Me.Hide
  End If
End Sub
Attribute VB_Name = "Data_Item2"
Attribute VB_Base = "0{822581C8-E098-4650-8001-C010DD0D74B6}{80D09855-5014-4838-A79A-A5EF10B94041}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  If Len(Trim(textName.Value)) = 0 Then
    ShowMessage 260, vbOKOnly + vbExclamation
    textName.SetFocus
    Exit Sub
  End If
  Me.Hide
End Sub

Private Sub buttonCancel_Click()
  textName.Value = vbNullString
  Me.Hide
End Sub

Private Sub checkBulk_Click()
  Dim bValue As Boolean
  bValue = checkBulk.Value
  textItem.Enabled = bValue
  spinItem.Enabled = bValue
  labelItem.Enabled = bValue
End Sub

Private Sub textItem_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If IsNumeric(textItem.Value) Then
    Dim nValue As Integer
    nValue = textItem.Value
    If nValue < spinItem.Min Then
      nValue = spinItem.Min
    ElseIf nValue > spinItem.Max Then
      nValue = spinItem.Max
    End If
    spinItem.Value = nValue
  End If
  textItem.Value = spinItem.Value
End Sub

Private Sub spinItem_Change()
  textItem.Value = spinItem.Value
End Sub

Private Sub UserForm_Initialize()
  Dim oOptions As Worksheet, oMain As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(250)
  labelName.Caption = LoadString(252)
  textName.Value = LoadString(253)
  labelCurrency.Caption = LoadString(254)
  checkBulk.Caption = LoadString(255)
  labelItem.Caption = LoadString(256)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)

  Dim i As Integer
  For i = 1 To 3 Step 1
    If oMain.Range("Prj_Cur" & i).Value Then comboCurrency.AddItem oMain.Range("CurName" & i).Text
  Next i
  textName.SelStart = 0
  textName.SelLength = Len(textName.Value)
  comboCurrency.ListIndex = 0
  optionDetail1.Value = True
  checkBulk.Value = False
  textItem.Value = spinItem.Value
  textItem.Enabled = False
  spinItem.Enabled = False
  labelItem.Enabled = False
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = vbFormControlMenu Then
    Cancel = 1
    textName.Value = vbNullString
    Me.Hide
  End If
End Sub
Attribute VB_Name = "Data_Loan"
Attribute VB_Base = "0{E5DC4EEE-C3A7-46DA-A182-8194F6AC0EFE}{51A18641-6610-4968-88C4-DC05772E8CC3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'--------------------------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  Me.Hide
End Sub

Private Sub buttonCancel_Click()
  textRest.Value = vbNullString
  Me.Hide
End Sub

Private Sub textFrom_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If IsNumeric(textFrom.Value) Then
    Dim nValue As Integer
    nValue = textFrom.Value
    If nValue < spinFrom.Min Then
      nValue = spinFrom.Min
    ElseIf nValue > spinFrom.Max Then
      nValue = spinFrom.Max
    End If
    spinFrom.Value = nValue
  End If
  textFrom.Value = spinFrom.Value
End Sub

Private Sub spinFrom_Change()
  textFrom.Value = spinFrom.Value
  If spinFrom.Value > spinTill.Value Then spinTill.Value = spinFrom.Value
End Sub

Private Sub textTill_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If IsNumeric(textTill.Value) Then
    Dim nValue As Integer
    nValue = textTill.Value
    If nValue < spinTill.Min Then
      nValue = spinTill.Min
    ElseIf nValue > spinTill.Max Then
      nValue = spinTill.Max
    End If
    spinTill.Value = nValue
  End If
  textTill.Value = spinTill.Value
End Sub

Private Sub spinTill_Change()
  textTill.Value = spinTill.Value
  If spinFrom.Value > spinTill.Value Then spinFrom.Value = spinTill.Value
End Sub

Private Sub textRest_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If Not IsNumeric(textRest.Value) Then
    textRest.Value = 0
  ElseIf CDbl(textRest.Value) < 0 Then
    textRest.Value = 0
  End If
End Sub

Private Sub textCover_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If IsNumeric(textCover.Value) Then
    Dim nValue As Integer
    nValue = CDbl(textCover.Value) * 100
    If nValue < spinCover.Min Then
      nValue = spinCover.Min
    ElseIf nValue > spinCover.Max Then
      nValue = spinCover.Max
    End If
    spinCover.Value = nValue
  End If
  textCover.Value = Format(spinCover.Value / 100, "0.00")
End Sub

Private Sub spinCover_Change()
  textCover.Value = Format(spinCover.Value / 100, "0.00")
End Sub

Private Sub UserForm_Initialize()
  Dim oOptions As Worksheet, oMain As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(270)
  labelDescription.Caption = LoadString(271)
  labelFrom.Caption = LoadString(272)
  labelTill.Caption = LoadString(273)
  labelPeriod.Caption = LoadString(274)
  labelRest.Caption = LoadString(275)
  labelCurrency.Caption = oMain.Range("CurName1").Text
  labelCover.Caption = LoadString(276)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)
    
  spinFrom.Max = oMain.Range("Prj_Len").Value
  spinFrom.Value = spinFrom.Min
  textFrom.Value = spinFrom.Value
  spinTill.Max = spinFrom.Max
  spinTill.Value = spinTill.Max
  textTill.Value = spinTill.Value
  spinCover.Value = 100
End Sub
Attribute VB_Name = "Data_Material"
Attribute VB_Base = "0{365BFC88-028A-44EB-9F0E-F5D6240D4E35}{8BBF8392-C3B9-4517-AEA1-7732A907D423}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  Me.Hide
End Sub

Private Sub buttonCancel_Click()
  listProduct.Clear
  Me.Hide
End Sub

Private Sub UserForm_Initialize()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(269)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)
End Sub
Attribute VB_Name = "Main"
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: Auto_Open, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private Sub Auto_Open()
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.Calculation = xlCalculationAutomatic

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim bProtect As Boolean, sPass As String, r As Long, oOptions As Worksheet, oSheet As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  On Error Resume Next
  Set oSheet = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)
  bProtect = oSheet.Range("Prj_Protect").Value
  sPass = oOptions.Range("Opt_SPInfo").Value
  Set oSheet = Nothing
  On Error GoTo 0
  ActiveSheet.Select
  r = oOptions.Range("Opt_Sheets").Row + 1
  Do While Not IsEmpty(oOptions.Cells(r, 1).Value)
    On Error Resume Next
    Set oSheet = ThisWorkbook.Sheets(oOptions.Cells(r, 1).Value)
    On Error GoTo 0
    If oSheet Is Nothing Then
      ShowMessageParam 184, vbOKOnly + vbExclamation, oOptions.Cells(r, 1).Value
    Else
      If bProtect And oOptions.Cells(r, 2).Value Then oSheet.Protect sPass, True, True, True, True, True
      oSheet.EnableOutlining = True
      Set oSheet = Nothing
    End If
    r = r + 1
  Loop

' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(ThisWorkbook.Path) = 0 Then SetLanguage 0

' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 188, vbOKOnly + vbInformation
  ElseIf Len(GetRegValue("Serial")) = 0 And Len(GetRegValue("Date")) > 0 Then
    ShowMessage 186, vbOKOnly + vbInformation
  End If
End Sub

Private Sub CheckActivation()
  Dim oOptions As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then Exit Sub

  Dim nProgram As Long, nSerial As Long, nCode As Long
  nProgram = PRODUCT_PROG
  nSerial = Val(GetRegValue("Serial"))
  nCode = Val(GetRegValue("Code"))
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If nSerial = 0 Then
    Dim nDate As Long, y As Integer, m As Integer, d As Integer, dt As Date
    nDate = Val(GetRegValue("Date"))
    y = nDate \ 32 \ 16
    m = nDate \ 32 Mod 16
    d = nDate Mod 32
    If IsDate(y & "/" & m & "/" & d) Then
      dt = DateSerial(y, m, d)
      If Date >= dt And Date < DateAdd("d", 7, dt) Then Exit Sub
    End If
  End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If nProgram * 330287 + nSerial * 11 + GetComputerID() \ 37 <> nCode Then
    ShowMessage 189, vbOKOnly + vbCritical
    End
  End If
End Sub

Public Sub Show_Navigator()
  Load Navigator
  If VarType(Application.Caller) = vbString Then Navigator.SelectItem ActiveSheet, ActiveSheet.Shapes(Application.Caller).TopLeftCell.Row
  Navigator.Show vbModeless
  Navigator.StartUpPosition = 0
End Sub

Public Sub Hide_Navigator()
  Dim oForm As Object
  For Each oForm In UserForms
    If oForm.Name = "Navigator" Then
      Unload oForm
      Exit For
    End If
  Next oForm
End Sub

Public Sub Load_Navigator()
  Dim oForm As Object
  For Each oForm In UserForms
    If oForm.Name = "Navigator" Then
      Navigator.LoadItems
      Exit For
    End If
  Next oForm
End Sub

Public Sub Run_PrjGeneral()
  CheckActivation
  Load Prj_General
  Prj_General.Show vbModal
End Sub

Public Sub Run_PrjSetup()
  CheckActivation
  Load Prj_Setup
  Prj_Setup.Show vbModal
End Sub

Public Sub Run_PrjCurrency()
  CheckActivation
  Load Prj_Currency
  Prj_Currency.Show vbModal
End Sub

Public Sub Run_PrjTax()
  CheckActivation
  Load Prj_Tax
  Prj_Tax.Show vbModal
End Sub

Public Sub Run_Data()
  CheckActivation
  Load Data
  Data.Show vbModal
End Sub

Public Sub Run_Scen()
  CheckActivation
  Load Scen
  Scen.Show vbModal
End Sub

Public Sub Run_ScenRecalc()
  Load Scen
  Scen.Recalc
  Unload Scen
End Sub

Public Sub Run_Sens()
  CheckActivation
  Load Sens
  Sens.Show vbModal
End Sub

Public Sub Run_SensRecalc()
  Load Sens
  Sens.Recalc
  Unload Sens
End Sub

Public Sub Run_ReportCreate()
  CheckActivation
  Load Report_Create
  Report_Create.Show vbModal
End Sub

Public Sub Run_ReportPrint()
  CheckActivation
  Load Report_Print
  Report_Print.Show vbModal
End Sub

Public Sub Run_ReportExcel()
  CheckActivation
  Load Report_Excel
  Report_Excel.Show vbModal
End Sub
Attribute VB_Name = "Navigator"
Attribute VB_Base = "0{3771A783-C441-45F8-9586-2AEEBE6026B5}{56AB8002-9F13-4A7C-966F-E56B8E1E1241}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'--------------------------------------------------------------------------------------------------

Option Explicit

Private Const SHEET_COUNT As Integer = 16
Private Const ITEM_COUNT As Integer = 128

Dim oOptions As Worksheet
Private bScroll As Boolean

Private Type SheetData
  oSheet As Worksheet
  nFirst As Integer
  nTopic As Long
End Type

Private Type ItemData
  sID As String
  nSheet As Integer
  nRow As Long
  nTopic As Long
End Type

Private nSheetCount As Integer
Private arrSheet(1 To SHEET_COUNT) As SheetData

Private nItemCount As Integer
Private arrItem(1 To ITEM_COUNT) As ItemData

Private Sub buttonClose_Click()
  Me.Hide
End Sub

Private Sub buttonHelp_Click()
  Dim nIndex As Integer, nTopic As Long
  nIndex = listSheet.ListIndex + 1
  If nIndex > 0 Then nTopic = arrSheet(nIndex).nTopic
  nIndex = listItem.ListIndex + 1
  If nIndex > 0 Then
    If arrItem(nIndex).nTopic > 0 Then nTopic = arrItem(nIndex).nTopic
  End If
  ShowHelp nTopic
End Sub

Private Sub listSheet_Change()
  If Not bScroll Then Exit Sub
  
  Dim nIndex As Integer, oSheet As Worksheet
  nIndex = listSheet.ListIndex + 1
  On Error Resume Next
  Set oSheet = arrSheet(nIndex).oSheet
  If oSheet.Visible = xlSheetVisible Then oSheet.Activate
  listItem.ListIndex = arrSheet(nIndex).nFirst - 1
End Sub

Private Sub listItem_Change()
  If Not bScroll Then Exit Sub

  Dim nIndex As Integer, r As Long, oSheet As Worksheet
  nIndex = listItem.ListIndex + 1
  If nIndex = 0 Then Exit Sub
  bScroll = False
  listSheet.ListIndex = arrItem(nIndex).nSheet - 1
  bScroll = True
  On Error Resume Next
  Set oSheet = arrSheet(arrItem(nIndex).nSheet).oSheet
  If Len(oSheet.Name) = 0 Then Exit Sub
  On Error GoTo 0
  r = arrItem(nIndex).nRow
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If StrComp(arrItem(nIndex).sID, oSheet.Cells(r, ID_COL).Text, vbTextCompare) <> 0 Then
    r = GetRowByID(oSheet, arrItem(nIndex).sID)
    If r > 0 Then arrItem(nIndex).nRow = r
  End If
  If r > 0 And oSheet.Visible = xlSheetVisible Then Application.GoTo oSheet.Cells(r, NAME_COL), True
End Sub

Public Sub LoadItems()
  Dim r As Long, nRow As Long, nTemp As Long, sBuffer As String, oSheet As Worksheet
  bScroll = False
  listSheet.Clear
  listItem.Clear
  nSheetCount = 0
  nItemCount = 0
  bScroll = True
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nTemp = oOptions.Range("Opt_Sheets").Row + 1
  Do While Not IsEmpty(oOptions.Cells(nTemp, 1).Value)
    On Error Resume Next
    Set oSheet = ThisWorkbook.Sheets(oOptions.Cells(nTemp, 1).Value)
    If oSheet.Visible = xlSheetHidden Then Set oSheet = Nothing
    On Error GoTo 0
    If Not oSheet Is Nothing Then
      nSheetCount = nSheetCount + 1
      Set arrSheet(nSheetCount).oSheet = oSheet
      arrSheet(nSheetCount).nFirst = 0
      arrSheet(nSheetCount).nTopic = oOptions.Cells(nTemp, 4).Value
      listSheet.AddItem oSheet.Name
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      If oOptions.Cells(nTemp, 2).Value > 0 Then
        nRow = oSheet.UsedRange.Rows.Count
        For r = 1 To nRow Step 1
          sBuffer = oSheet.Cells(r, ID_COL).Text
          If InStr(1, sBuffer, "TABLE::", vbTextCompare) = 1 Or InStr(1, sBuffer, "CHART::", vbTextCompare) = 1 Then
            If nItemCount = ITEM_COUNT Then Exit For
            nItemCount = nItemCount + 1
            arrItem(nItemCount).sID = sBuffer
            arrItem(nItemCount).nSheet = nSheetCount
            arrItem(nItemCount).nRow = r
            sBuffer = oSheet.Cells(r, FLAG_COL).Value
            arrItem(nItemCount).nTopic = Val(GetValue(sBuffer, "Help"))
            If arrSheet(nSheetCount).nFirst = 0 Then arrSheet(nSheetCount).nFirst = nItemCount
            listItem.AddItem oSheet.Cells(r, NAME_COL).Text
          End If
        Next r
      End If
      Set oSheet = Nothing
      If nSheetCount = SHEET_COUNT Then Exit Do
    End If
    nTemp = nTemp + 1
  Loop
End Sub

Public Sub SelectItem(ByRef oSheet As Worksheet, ByVal nRow As Long)
  Dim i As Integer, nIndex As Integer, sBuffer As String
  bScroll = False
  For i = 1 To nSheetCount Step 1
    If oSheet Is arrSheet(i).oSheet Then
      nIndex = i
      Exit For
    End If
  Next i
  listSheet.ListIndex = nIndex - 1
  If nIndex > 0 And nRow > 0 Then
    sBuffer = oSheet.Cells(nRow, ID_COL).Text
    For i = arrSheet(nIndex).nFirst To nItemCount Step 1
      If arrItem(i).sID = sBuffer Then
        listItem.ListIndex = i - 1
        Exit For
      End If
    Next i
  End If
  bScroll = True
End Sub

Private Sub UserForm_Initialize()
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(190)
  labelItem.Caption = LoadString(191)
  labelSheet.Caption = LoadString(192)
  labelVersion.Caption = LoadString(193)
  textVersion.Caption = oOptions.Range("Opt_Version").Value
  labelDate.Caption = LoadString(194)
  textDate.Caption = oOptions.Range("Opt_BuildDate").Value
  labelSerial.Caption = LoadString(195)
  textSerial.Caption = GetRegValue("Serial")
  buttonHelp.Caption = LoadString(117)
  buttonClose.Caption = LoadString(118)

  LoadItems
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = vbFormControlMenu Then
    Cancel = 1
    Me.Hide
  End If
End Sub
Attribute VB_Name = "Prj_Clean"
Attribute VB_Base = "0{B0974589-5DC6-4C61-8E77-7D7F9536AD5B}{DA9A8156-0A97-4F0A-BA85-A9B61C5775F4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  Dim nPos As Integer, sBuffer As String, v As Variant
  sBuffer = ThisWorkbook.Name
  nPos = InStrRev(sBuffer, ".")
  If nPos > 0 Then sBuffer = Mid(sBuffer, 1, nPos - 1)
  sBuffer = sBuffer & ".xlsx"
#If Mac Then
  v = Application.GetSaveAsFilename(sBuffer)
#Else
  v = Application.GetSaveAsFilename(sBuffer, LoadString(152), 1, LoadString(151))
#End If
  If VarType(v) = vbBoolean Then Exit Sub
  
  Dim nTemp As Long, bProtect As Boolean, sPass As String, oOptions As Worksheet, oMain As Worksheet, oSheet As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)
  bProtect = oMain.Range("Prj_Protect").Value
  sPass = oOptions.Range("Opt_SPInfo").Value
  TransformInit

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If bProtect Then
    oOptions.Range("Opt_SPInfo").ClearContents
    oMain.Range("Prj_Protect").Value = 0
  End If

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If checkFormula.Value Then
    nTemp = oOptions.Range("Opt_Sheets").Row + 1
    Do While Not IsEmpty(oOptions.Cells(nTemp, 1).Value)
      Set oSheet = ThisWorkbook.Sheets(oOptions.Cells(nTemp, 1).Value)
      oSheet.UsedRange.Value = oSheet.UsedRange.Value
      nTemp = nTemp + 1
    Loop
  End If

  ActiveSheet.Select
  nTemp = oOptions.Range("Opt_Sheets").Row + 1
  Do While Not IsEmpty(oOptions.Cells(nTemp, 1).Value)
    Set oSheet = ThisWorkbook.Sheets(oOptions.Cells(nTemp, 1).Value)

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If bProtect And oOptions.Cells(nTemp, 2).Value Then oSheet.Protect sPass, False, False, False

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Dim oShape As Shape
    For Each oShape In oSheet.Shapes
      If oShape.Type = msoFormControl Then oShape.Delete
    Next oShape

    If oOptions.Cells(nTemp, 2).Value > 0 Then
      Dim r As Long, c As Long, i As Integer

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      r = 1
      Do While r <= oSheet.UsedRange.Rows.Count
        sBuffer = oSheet.Cells(r, ID_COL).Text
        If sBuffer = "TEMPLATE" Then
          sBuffer = oSheet.Cells(r, FLAG_COL).Value
          c = r + 1
          For i = Val(GetValue(sBuffer, "Count")) To 1 Step -1
            c = c + Val(GetValue(oSheet.Cells(c, FLAG_COL).Value, "Row", 1))
          Next i
          oSheet.Rows(r & ":" & c - 1).Delete
        ElseIf Mid(sBuffer, 1, 4) = "DATA" Then
          sBuffer = oSheet.Cells(r, FLAG_COL).Value
          c = r + Val(GetValue(sBuffer, "Header", 1))
          For i = Val(GetValue(sBuffer, "Count")) To 1 Step -1
            c = c + Val(GetValue(oSheet.Cells(c, FLAG_COL).Value, "Row", 1))
          Next i
          r = c + Val(GetValue(sBuffer, "Footer", 1))
        Else
          r = r + 1
        End If
      Loop

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If checkFormula.Value Then
        r = oOptions.Cells(nTemp, 2).Value
        For c = FLAG_COL To r Step -1
          oSheet.Columns(c).Delete
        Next c
      End If
    End If

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| R1C1
    If oSheet.Visible = xlSheetVisible Then Application.GoTo oSheet.Cells(1, 1), True
    nTemp = nTemp + 1
  Loop
  If oMain.Visible = xlSheetVisible Then oMain.Activate
  TransformDone

  Application.DisplayAlerts = False
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If checkFormula.Value Then
    ThisWorkbook.Sheets(LANGUAGE_SHEET).Delete
    If oOptions.Visible = xlSheetVeryHidden Then oOptions.Visible = xlSheetHidden
    oOptions.Delete
  End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  On Error Resume Next
  ThisWorkbook.SaveAs v, xlOpenXMLWorkbook
  On Error GoTo 0
  Application.DisplayAlerts = True
  If Not ThisWorkbook.Saved Then ShowMessage 153, vbOKOnly + vbCritical
'
  Unload Me
End Sub

Private Sub buttonCancel_Click()
  Unload Me
End Sub

Private Sub UserForm_Initialize()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(147)
  checkFormula.Caption = LoadString(148)
  labelMessage.Caption = LoadString(IIf(ThisWorkbook.Saved, 149, 150))
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)
End Sub
Attribute VB_Name = "Prj_Currency"
Attribute VB_Base = "0{09D43B14-4181-47E6-ADFA-F900778B19AC}{E386B81A-8302-426C-B1EF-3FA44B9B774D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private oOptions As Worksheet
Private oMain As Worksheet

Private Sub buttonOK_Click()
  Dim i As Integer, nValue As Integer, r As Long, oRange As Range
  TransformInit
  r = GetRowByID(oMain, "TABLE::CURRENCY")
  If r > 0 Then Application.GoTo oMain.Cells(r, NAME_COL), False
  For i = 1 To 3 Step 1
' |fffd||fffd||fffd||fffd||fffd||fffd|
    nValue = Controls("comboCur" & i).ListIndex
    If i = 1 Then nValue = nValue + 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If nValue > 0 Then nValue = nValue + Controls("comboMul" & i).ListIndex * 100
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set oRange = oMain.Range("Prj_Cur" & i)
    If nValue <> oRange.Value Then
      oRange.Value = nValue
      InitRowByID oMain, "Cur" & i, nValue = 0, r
    End If
  Next i
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  oMain.Range("Prj_CurReport").Value = comboCurReport.ListIndex + 1
  oMain.Range("Prj_Inflation").Value = IIf(optionInflationYes.Value, 1, 0)
  TransformDone
'
  Unload Me
End Sub

Private Sub buttonCancel_Click()
  Unload Me
End Sub

Private Sub comboCur2_Change()
  If comboCur2.ListIndex = 0 Then
    comboMul2.Enabled = False
    If comboCur3.ListIndex > 0 Then comboCur3.ListIndex = 0
    comboCur3.Enabled = False
    If comboCurReport.ListIndex > 0 Then comboCurReport.ListIndex = 0
  Else
    comboMul2.Enabled = True
    comboCur3.Enabled = True
  End If
End Sub

Private Sub comboCur3_Change()
  If comboCur3.ListIndex = 0 Then
    comboMul3.Enabled = False
    If comboCurReport.ListIndex > 1 Then comboCurReport.ListIndex = 1
  Else
    comboMul3.Enabled = True
  End If
End Sub

Private Sub comboCurReport_Change()
  If comboCur2.ListIndex = 0 And comboCurReport.ListIndex > 0 Then
    comboCurReport.ListIndex = 0
  ElseIf comboCur3.ListIndex = 0 And comboCurReport.ListIndex > 1 Then
    comboCurReport.ListIndex = 1
  End If
End Sub

Private Sub UserForm_Initialize()
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(161)
  labelCurReport.Caption = LoadString(165)
  frameInflation.Caption = LoadString(166)
  optionInflationNo.Caption = LoadString(167)
  optionInflationYes.Caption = LoadString(168)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)

  Dim i As Integer, j As Integer, nValue As Integer, oControl As Control
  For i = 1 To 3 Step 1
    Controls("labelCur" & i).Caption = LoadString(161 + i)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    nValue = oMain.Range("Prj_Cur" & i).Value
' |fffd||fffd||fffd||fffd||fffd||fffd|
    Set oControl = Controls("comboCur" & i)
    For j = 1 To 20 Step 1
      oControl.AddItem LoadString(74 + j)
    Next j
    If i = 1 Then
      nValue = nValue - 1
    Else
      oControl.AddItem LoadString(169), 0
    End If
    oControl.ListIndex = nValue Mod 100
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set oControl = Controls("comboMul" & i)
    oControl.AddItem "* 1"
    oControl.AddItem "* 1 000"
    oControl.AddItem "* 1 000 000"
    oControl.ListIndex = nValue \ 100
  Next i
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For j = 1 To 3 Step 1
    comboCurReport.AddItem LoadString(161 + j)
  Next j
  nValue = oMain.Range("Prj_CurReport").Value - 1
  comboCurReport.ListIndex = IIf(nValue < comboCurReport.ListCount, nValue, 0)
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oMain.Range("Prj_Inflation").Value Then
    optionInflationYes.Value = True
  Else
    optionInflationNo.Value = True
  End If
End Sub
Attribute VB_Name = "Prj_General"
Attribute VB_Base = "0{2F9C5F54-479C-47D2-BDAF-099B29B79A82}{7284EF4F-B6A5-475C-9D2B-876970FD125B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'
'--------------------------------------------------------------------------------------------------

Option Explicit

Private oOptions As Worksheet
Private oMain As Worksheet

Private Sub buttonOK_Click()
  Dim r As Long, nLanguage As Integer
  TransformInit
  r = GetRowByID(oMain, "TABLE::GENERAL")
  If r > 0 Then Application.GoTo oMain.Cells(r, NAME_COL), False
  nLanguage = Val(comboLanguage.Value)
  If nLanguage <> oMain.Range("Prj_Language").Value Then
    Dim oForm As Object
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    For Each oForm In UserForms
      If Not oForm Is Me Then Unload oForm
    Next oForm
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    SetLanguage nLanguage
  End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  oMain.Range("Prj_Style").Value = comboStyle.ListIndex + 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  r = oOptions.Range("Opt_Colors").Row
  If oOptions.Cells(r, 2).Interior.Color <> colorHeader1.BackColor Or _
    oOptions.Cells(r, 3).Interior.Color <> colorHeader2.BackColor Or _
    oOptions.Cells(r, 4).Interior.Color <> colorEdit1.BackColor Or _
    oOptions.Cells(r, 5).Interior.Color <> colorEdit2.BackColor Then
    oOptions.Cells(r, 2).Interior.Color = colorHeader1.BackColor
    oOptions.Cells(r, 3).Interior.Color = colorHeader2.BackColor
    oOptions.Cells(r, 4).Interior.Color = colorEdit1.BackColor
    oOptions.Cells(r, 5).Interior.Color = colorEdit2.BackColor
    UpdateColors
  End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  ThisWorkbook.Sheets(oOptions.Range("Opt_ResumeSheet").Value).Visible = IIf(checkResume.Value, xlSheetVisible, xlSheetHidden)
  oMain.Range("Prj_Resume").Value = IIf(checkResume.Value, 1, 0)
  ThisWorkbook.Sheets(oOptions.Range("Opt_StartSheet").Value).Visible = IIf(checkStart.Value, xlSheetVisible, xlSheetHidden)
  oMain.Range("Prj_Start").Value = IIf(checkStart.Value, 1, 0)
  ThisWorkbook.Sheets(oOptions.Range("Opt_ChartSheet").Value).Visible = IIf(checkChart.Value, xlSheetVisible, xlSheetHidden)
  oMain.Range("Prj_Chart").Value = IIf(checkChart.Value, 1, 0)
  ThisWorkbook.Sheets(oOptions.Range("Opt_RiskSheet").Value).Visible = IIf(checkRisk.Value, xlSheetVisible, xlSheetHidden)
  oMain.Range("Prj_Risk").Value = IIf(checkRisk.Value, 1, 0)
  ThisWorkbook.Sheets(oOptions.Range("Opt_KPISheet").Value).Visible = IIf(checkKPI.Value, xlSheetVisible, xlSheetHidden)
  oMain.Range("Prj_KPI").Value = IIf(checkKPI.Value, 1, 0)
  ThisWorkbook.Sheets(oOptions.Range("Opt_ReportSheet").Value).Visible = IIf(checkReport.Value, xlSheetVisible, xlSheetHidden)
  oMain.Range("Prj_Report").Value = IIf(checkReport.Value, 1, 0)
  TransformDone
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Load_Navigator
'
  Unload Me
End Sub

Private Sub buttonCancel_Click()
  Unload Me
End Sub

Private Sub buttonProtect_Click()
  If oMain.Range("Prj_Protect").Value = 0 Then
    Load Prj_Protect
    Prj_Protect.Show vbModal
  ElseIf IsEmpty(oOptions.Range("Opt_SPInfo").Value) Then
    Dim r As Long
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ActiveSheet.Select
    r = oOptions.Range("Opt_Sheets").Row + 1
    Do While Not IsEmpty(oOptions.Cells(r, 1).Value)
      If oOptions.Cells(r, 2).Value Then ThisWorkbook.Sheets(oOptions.Cells(r, 1).Value).Protect vbNullString, False, False, False
      r = r + 1
    Loop
    oMain.Range("Prj_Protect").Value = 0
  Else
    Load Prj_Unprotect
    Prj_Unprotect.Show vbModal
  End If
  buttonProtect.Caption = LoadString(IIf(oMain.Range("Prj_Protect").Value, 130, 129))
End Sub

Private Sub buttonClean_Click()
  Load Prj_Clean
  Prj_Clean.Show vbModal
  If ThisWorkbook.FileFormat = xlOpenXMLWorkbook Then
    Dim oForm As Object
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    For Each oForm In UserForms
      Unload oForm
    Next oForm
  End If
End Sub

Private Sub comboStyle_Change()
  Dim r As Long
  r = oOptions.Range("Opt_Themes").Row + comboStyle.ListIndex + 1
  colorHeader1.BackColor = oOptions.Cells(r, 2).Interior.Color
  colorHeader2.BackColor = oOptions.Cells(r, 3).Interior.Color
  colorEdit1.BackColor = oOptions.Cells(r, 4).Interior.Color
  colorEdit2.BackColor = oOptions.Cells(r, 5).Interior.Color
End Sub

Private Sub buttonHeader1_Click()
  Dim r As Long, i As Integer, nIndex As Integer, nCustom As Integer, rgbColor As Long
  rgbColor = PickColor(colorHeader1.BackColor)
  If rgbColor < 0 Then Exit Sub
  r = oOptions.Range("Opt_Themes").Row + 1
  nIndex = comboStyle.ListIndex
  nCustom = comboStyle.ListCount - 1
  If nIndex < nCustom Then
    For i = 2 To 5 Step 1
      oOptions.Cells(r + nCustom, i).Interior.Color = oOptions.Cells(r + nIndex, i).Interior.Color
    Next i
    comboStyle.ListIndex = nCustom
  End If
  oOptions.Cells(r + nCustom, 2).Interior.Color = rgbColor
  colorHeader1.BackColor = rgbColor
End Sub

Private Sub colorHeader1_Click()
  buttonHeader1_Click
End Sub

Private Sub buttonHeader2_Click()
  Dim r As Long, i As Integer, nIndex As Integer, nCustom As Integer, rgbColor As Long
  rgbColor = PickColor(colorHeader2.BackColor)
  If rgbColor < 0 Then Exit Sub
  r = oOptions.Range("Opt_Themes").Row + 1
  nIndex = comboStyle.ListIndex
  nCustom = comboStyle.ListCount - 1
  If nIndex < nCustom Then
    For i = 2 To 5 Step 1
      oOptions.Cells(r + nCustom, i).Interior.Color = oOptions.Cells(r + nIndex, i).Interior.Color
    Next i
    comboStyle.ListIndex = nCustom
  End If
  oOptions.Cells(r + nCustom, 3).Interior.Color = rgbColor
  colorHeader2.BackColor = rgbColor
End Sub

Private Sub colorHeader2_Click()
  buttonHeader2_Click
End Sub

Private Sub buttonEdit1_Click()
  Dim r As Long, i As Integer, nIndex As Integer, nCustom As Integer, rgbColor As Long
  rgbColor = PickColor(colorEdit1.BackColor)
  If rgbColor < 0 Then Exit Sub
  r = oOptions.Range("Opt_Themes").Row + 1
  nIndex = comboStyle.ListIndex
  nCustom = comboStyle.ListCount - 1
  If nIndex < nCustom Then
    For i = 2 To 5 Step 1
      oOptions.Cells(r + nCustom, i).Interior.Color = oOptions.Cells(r + nIndex, i).Interior.Color
    Next i
    comboStyle.ListIndex = nCustom
  End If
  oOptions.Cells(r + nCustom, 4).Interior.Color = rgbColor
  colorEdit1.BackColor = rgbColor
End Sub

Private Sub colorEdit1_Click()
  buttonEdit1_Click
End Sub

Private Sub buttonEdit2_Click()
  Dim r As Long, i As Integer, nIndex As Integer, nCustom As Integer, rgbColor As Long
  rgbColor = PickColor(colorEdit2.BackColor)
  If rgbColor < 0 Then Exit Sub
  r = oOptions.Range("Opt_Themes").Row + 1
  nIndex = comboStyle.ListIndex
  nCustom = comboStyle.ListCount - 1
  If nIndex < nCustom Then
    For i = 2 To 5 Step 1
      oOptions.Cells(r + nCustom, i).Interior.Color = oOptions.Cells(r + nIndex, i).Interior.Color
    Next i
    comboStyle.ListIndex = nCustom
  End If
  oOptions.Cells(r + nCustom, 5).Interior.Color = rgbColor
  colorEdit2.BackColor = rgbColor
End Sub

Private Sub colorEdit2_Click()
  buttonEdit2_Click
End Sub

Private Sub UserForm_Initialize()
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(121)
  tabPage.pages(0).Caption = LoadString(122)
  tabPage.pages(1).Caption = LoadString(123)
  labelStyle.Caption = LoadString(124)
  labelHeader1.Caption = LoadString(125)
  labelHeader2.Caption = LoadString(126)
  labelEdit1.Caption = LoadString(127)
  labelEdit2.Caption = LoadString(128)
  buttonProtect.Caption = LoadString(IIf(oMain.Range("Prj_Protect").Value, 130, 129))
  buttonClean.Caption = LoadString(131)
  labelLanguage.Caption = LoadString(132)
  checkResume.Caption = LoadString(133)
  checkStart.Caption = LoadString(134)
  checkChart.Caption = LoadString(135)
  checkRisk.Caption = LoadString(136)
  checkKPI.Caption = LoadString(137)
  checkReport.Caption = LoadString(138)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)

  Dim i As Integer, r As Long, oLanguage As Worksheet
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Set oLanguage = ThisWorkbook.Sheets(LANGUAGE_SHEET)
  For i = 1 To 8 Step 1
    If oLanguage.Cells(1, 1 + i).Value > 0 Then
      comboLanguage.AddItem i
      comboLanguage.List(comboLanguage.ListCount - 1, 1) = LoadString(5 + i)
    End If
  Next i
  comboLanguage.Value = oMain.Range("Prj_Language").Value
  comboLanguage.Enabled = comboLanguage.ListCount > 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  r = oOptions.Range("Opt_Themes").Row + 1
  Do While Not IsEmpty(oOptions.Cells(r, 1).Value)
    comboStyle.AddItem oOptions.Cells(r, 1).Value
    r = r + 1
  Loop
  comboStyle.ListIndex = oMain.Range("Prj_Style").Value - 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  checkResume.Value = ThisWorkbook.Sheets(oOptions.Range("Opt_ResumeSheet").Value).Visible = xlSheetVisible
  checkStart.Value = ThisWorkbook.Sheets(oOptions.Range("Opt_StartSheet").Value).Visible = xlSheetVisible
  checkChart.Value = ThisWorkbook.Sheets(oOptions.Range("Opt_ChartSheet").Value).Visible = xlSheetVisible
  checkRisk.Value = ThisWorkbook.Sheets(oOptions.Range("Opt_RiskSheet").Value).Visible = xlSheetVisible
  checkKPI.Value = ThisWorkbook.Sheets(oOptions.Range("Opt_KPISheet").Value).Visible = xlSheetVisible
  checkReport.Value = ThisWorkbook.Sheets(oOptions.Range("Opt_ReportSheet").Value).Visible = xlSheetVisible
End Sub
Attribute VB_Name = "Prj_Protect"
Attribute VB_Base = "0{B8E774F9-3115-4AF9-A4B7-938E550D043C}{3A52B99A-53FB-4F64-AA29-17822ACB6506}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'
'--------------------------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  Dim r As Long, sPass As String, oOptions As Worksheet, oSheet As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  sPass = textPassword.Value
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  ActiveSheet.Select
  r = oOptions.Range("Opt_Sheets").Row + 1
  Do While Not IsEmpty(oOptions.Cells(r, 1).Value)
    Set oSheet = ThisWorkbook.Sheets(oOptions.Cells(r, 1).Value)
    If oOptions.Cells(r, 2).Value Then oSheet.Protect sPass, True, True, True, True, True
    r = r + 1
  Loop
  oOptions.Range("Opt_SPInfo").Value = sPass
  Set oSheet = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)
  oSheet.Range("Prj_Protect").Value = 1
'
  Unload Me
End Sub

Private Sub buttonCancel_Click()
  Unload Me
End Sub

Private Sub checkShow_Click()
  If checkShow.Value Then
    textPassword.PasswordChar = vbNullString
    labelConfirm.Enabled = False
    textConfirm.Enabled = False
    textConfirm.Value = vbNullString
  Else
    textPassword.PasswordChar = "*"
    labelConfirm.Enabled = True
    textConfirm.Enabled = True
  End If
  CheckPassword
End Sub

Private Sub CheckPassword()
  If checkShow.Value Then
    buttonOK.Enabled = True
  Else
    buttonOK.Enabled = StrComp(textPassword.Value, textConfirm.Value, vbBinaryCompare) = 0
  End If
End Sub

Private Sub textPassword_Change()
  CheckPassword
End Sub

Private Sub textConfirm_Change()
  CheckPassword
End Sub

Private Sub UserForm_Initialize()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(140)
  labelPassword.Caption = LoadString(142)
  labelConfirm.Caption = LoadString(143)
  checkShow.Caption = LoadString(144)
  labelMessage.Caption = LoadString(145)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)
End Sub
Attribute VB_Name = "Prj_Setup"
Attribute VB_Base = "0{5A0E2094-F343-4D41-9F36-A775F95AE29D}{F56E8C92-8AAA-4D73-9617-87CF59D5F365}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private oOptions As Worksheet
Private oMain As Worksheet

Private Sub buttonOK_Click()
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 187, vbOKOnly + vbCritical
    Exit Sub
  End If

  Dim r As Long, nOldLen As Integer, nNewLen As Integer, nOldInvest As Integer, nNewInvest As Integer
  TransformInit
  r = GetRowByID(oMain, "TABLE::SETUP")
  If r > 0 Then Application.GoTo oMain.Cells(r, NAME_COL), False
  nOldLen = oMain.Range("Prj_Len").Value
  nNewLen = spinLen.Value
  nOldInvest = oMain.Range("Prj_Invest").Value
  nNewInvest = spinInvest.Value
'
  If nNewLen <> nOldLen Then SetPeriods nNewLen
  oMain.Range("Prj_StartYear").Value = spinYear.Value
  oMain.Range("Prj_StartMonth").Value = comboMonth.ListIndex + 1
  oMain.Range("Prj_Period").Value = comboPeriod.ListIndex + 1
  oMain.Range("Prj_Invest").Value = nNewInvest
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If nNewLen <> nOldLen Or nNewInvest <> nOldInvest Then UpdateColors
  TransformDone
'
  Unload Me
End Sub

Private Sub buttonCancel_Click()
  Unload Me
End Sub

Private Sub UpdateStatus()
  Dim sText As String
  If comboPeriod.ListIndex > 0 Then
    If comboMonth.ListIndex Mod IIf(comboPeriod.ListIndex = 1, 3, 12) > 0 Then sText = LoadString(160)
  End If
  labelMessage.Caption = sText
End Sub

Private Sub comboMonth_Change()
  UpdateStatus
End Sub

Private Sub comboPeriod_Change()
  UpdateStatus
End Sub

Private Sub textYear_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If IsNumeric(textYear.Value) Then
    Dim nValue As Integer
    nValue = textYear.Value
    If nValue < spinYear.Min Then
      nValue = spinYear.Min
    ElseIf nValue > spinYear.Max Then
      nValue = spinYear.Max
    End If
    spinYear.Value = nValue
  End If
  textYear.Value = spinYear.Value
End Sub

Private Sub spinYear_Change()
  textYear.Value = spinYear.Value
End Sub

Private Sub textLen_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If IsNumeric(textLen.Value) Then
    Dim nValue As Integer
    nValue = textLen.Value
    If nValue < spinLen.Min Then
      nValue = spinLen.Min
    ElseIf nValue > spinLen.Max Then
      nValue = spinLen.Max
    End If
    spinLen.Value = nValue
  End If
  textLen.Value = spinLen.Value
End Sub

Private Sub spinLen_Change()
  textLen.Value = spinLen.Value
  spinInvest.Max = spinLen.Value
End Sub

Private Sub textInvest_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If IsNumeric(textInvest.Value) Then
    Dim nValue As Integer
    nValue = textInvest.Value
    If nValue < spinInvest.Min Then
      nValue = spinInvest.Min
    ElseIf nValue > spinInvest.Max Then
      nValue = spinInvest.Max
    End If
    spinInvest.Value = nValue
  End If
  textInvest.Value = spinInvest.Value
End Sub

Private Sub spinInvest_Change()
  textInvest.Value = spinInvest.Value
End Sub

Private Sub UserForm_Initialize()
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(154)
  labelStart.Caption = LoadString(155)
  labelPeriod.Caption = LoadString(156)
  labelLen.Caption = LoadString(157)
  labelInvest.Caption = LoadString(158)
  labelPeriods.Caption = LoadString(159)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)

  Dim i As Integer
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For i = 1 To 12 Step 1
    comboMonth.AddItem LoadString(50 + i)
  Next i
  comboMonth.ListIndex = oMain.Range("Prj_StartMonth").Value - 1
  spinYear.Value = oMain.Range("Prj_StartYear").Value
  textYear.Value = spinYear.Value
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For i = 1 To 3 Step 1
    comboPeriod.AddItem LoadString(41 + i)
  Next i
  comboPeriod.ListIndex = oMain.Range("Prj_Period").Value - 1
  spinLen.Value = oMain.Range("Prj_Len").Value
  textLen.Value = spinLen.Value
  spinInvest.Value = oMain.Range("Prj_Invest").Value
  textInvest.Value = spinInvest.Value
End Sub
Attribute VB_Name = "Prj_Tax"
Attribute VB_Base = "0{41DC4B33-0991-4FE0-8100-A2ADCE21B13A}{130AD185-3E46-4960-8652-902E7F67F852}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private oOptions As Worksheet
Private oMain As Worksheet

Private Sub buttonOK_Click()
  Dim i As Integer, nValue As Integer, r As Long, oRange As Range
  TransformInit
  r = GetRowByID(oMain, "TABLE::TAX")
  If r > 0 Then Application.GoTo oMain.Cells(r, NAME_COL), False
  For i = 1 To 6 Step 1
    nValue = IIf(Controls("checkTax" & i).Value, 1, 0)
    Set oRange = oMain.Range("Prj_Tax" & i)
    If nValue <> oRange.Value Then
      oRange.Value = nValue
      InitRowByID oMain, "Tax" & i, nValue = 0, r
    End If
    If i = 1 And nValue Then
      nValue = IIf(optionVAT1.Value, 1, 2)
      Set oRange = oMain.Range("Prj_VAT")
      oRange.Value = nValue
      oMain.Rows(oRange.Row + 1).Hidden = (nValue = 1)
    End If
  Next i
  TransformDone
'
  Unload Me
End Sub

Private Sub buttonCancel_Click()
  Unload Me
End Sub

Private Sub checkTax1_Click()
  If checkTax1.Value Then
    optionVAT1.Enabled = True
    optionVAT2.Enabled = True
  Else
    optionVAT1.Enabled = False
    optionVAT2.Enabled = False
  End If
End Sub

Private Sub UserForm_Initialize()
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(170)
  frameVAT.Caption = LoadString(171)
  optionVAT1.Caption = LoadString(172)
  optionVAT2.Caption = LoadString(173)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)
  
  Dim i As Integer, oControl As Control
  checkTax1.Value = True
  For i = 1 To 6 Step 1
    Set oControl = Controls("checkTax" & i)
    oControl.Caption = LoadString(173 + i)
    oControl.Value = oMain.Range("Prj_Tax" & i).Value
  Next i
  If oMain.Range("Prj_VAT").Value = 1 Then
    optionVAT1.Value = True
  Else
    optionVAT2.Value = True
  End If
End Sub
Attribute VB_Name = "Prj_Unprotect"
Attribute VB_Base = "0{69E24F8E-FD3C-4D6B-996E-6A103257D1E7}{D8FA6A9A-E339-4B1C-A068-2A70D47EE408}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'
'--------------------------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  Dim r As Long, sPass As String, oOptions As Worksheet, oSheet As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  sPass = textPassword.Value
  If StrComp(sPass, oOptions.Range("Opt_SPInfo").Value, vbBinaryCompare) <> 0 Then
    ShowMessage 146, vbExclamation + vbOKOnly
    textPassword.SetFocus
    Exit Sub
  End If
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  ActiveSheet.Select
  r = oOptions.Range("Opt_Sheets").Row + 1
  Do While Not IsEmpty(oOptions.Cells(r, 1).Value)
    Set oSheet = ThisWorkbook.Sheets(oOptions.Cells(r, 1).Value)
    If oOptions.Cells(r, 2).Value Then oSheet.Protect sPass, False, False, False
    r = r + 1
  Loop
  oOptions.Range("Opt_SPInfo").ClearContents
  Set oSheet = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)
  oSheet.Range("Prj_Protect").Value = 0
'
  Unload Me
End Sub

Private Sub buttonCancel_Click()
  Unload Me
End Sub

Private Sub checkShow_Click()
  textPassword.PasswordChar = IIf(checkShow.Value, vbNullString, "*")
End Sub

Private Sub UserForm_Initialize()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(141)
  labelPassword.Caption = LoadString(142)
  checkShow.Caption = LoadString(144)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)
End Sub
Attribute VB_Name = "Report_Create"
Attribute VB_Base = "0{28FD8A67-9AA5-4594-91B1-D39E6F5ADD96}{9D49CF7B-5023-460A-ABD7-CD189CCAD55F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private Const SHEET_COUNT As Integer = 16
Private Const ITEM_COUNT As Integer = 128

Private oMain As Worksheet

Private Type SheetData
  oSheet As Worksheet
End Type

Private Type ItemData
  sID As String
  nSheet As Integer
  nBeg As Long
  nEnd As Long
End Type

Private nSheetCount As Integer
Private arrSheet(1 To SHEET_COUNT) As SheetData

Private nItemCount As Integer
Private arrItem(1 To ITEM_COUNT) As ItemData

Private Sub CopyFormat(ByRef oDestin As Range, ByRef oSource As Range, ByVal bColor As Boolean)
' |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|
  With oDestin
    .NumberFormat = oSource.NumberFormat
    .HorizontalAlignment = oSource.HorizontalAlignment
    .VerticalAlignment = oSource.VerticalAlignment
    If .IndentLevel <> oSource.IndentLevel Then .IndentLevel = oSource.IndentLevel
  End With
  
' |fffd||fffd||fffd||fffd||fffd|
  Dim oFont As Font
  Set oFont = oSource.Font
  With oDestin.Font
    .Name = oFont.Name
    .Size = oFont.Size
    .Bold = oFont.Bold
    .Italic = oFont.Italic
    .Underline = oFont.Underline
    .ColorIndex = oFont.ColorIndex
    If .Color <> oFont.Color Then .Color = oFont.Color
  End With

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim i As Integer, oBorder As Border
  For i = xlEdgeLeft To xlEdgeRight Step 1
    Set oBorder = oSource.Borders(i)
    If oBorder.LineStyle <> xlLineStyleNone Then
      With oDestin.Borders(i)
        .LineStyle = oBorder.LineStyle
        .Weight = oBorder.Weight
        .ColorIndex = oBorder.ColorIndex
        If .Color <> oBorder.Color Then .Color = oBorder.Color
      End With
    End If
  Next i

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If bColor Then
    Dim oInterior As Interior
    Set oInterior = oSource.Interior
    With oDestin.Interior
      .Pattern = oInterior.Pattern
      .PatternColorIndex = oInterior.PatternColorIndex
      If .PatternColor <> oInterior.PatternColor Then .PatternColor = oInterior.PatternColor
      .ColorIndex = oInterior.ColorIndex
      If .Color <> oInterior.Color Then .Color = oInterior.Color
    End With
  End If
End Sub

Private Sub buttonAdd_Click()
  Dim nLen As Integer, nStep As Integer, nMonth As Integer, nYear As Integer, nYearQ As Integer, nYearY As Integer
  nLen = oMain.Range("Prj_Len").Value
  nStep = oMain.Range("Prj_Step").Value
  nMonth = oMain.Range("Prj_StartMonth").Value
  nYear = oMain.Range("Prj_StartYear").Value
  nYearQ = IIf(checkQuarter.Value, spinQuarter.Value, 10000)
  nYearY = IIf(checkYear.Value, spinYear.Value, 10000)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim i As Integer, j As Integer, nCount As Integer, nPeriod As Integer, arrPeriod() As Integer, arrTitle() As String
  ReDim arrPeriod(1 To nLen)
  ReDim arrTitle(1 To nLen)
  j = nMonth - (nMonth - 1) Mod nStep
  For i = 1 To nLen Step 1
    j = j + nStep
    nCount = nCount + 1
    If (i = nLen) Or (nYear < nYearQ And nYear < nYearY) Or _
      (nYear >= nYearQ And nYear < nYearY And (j - 1) Mod 3 = 0) Or _
      (nYear >= nYearY And j = 13) Then
      nPeriod = nPeriod + 1
      arrPeriod(nPeriod) = nCount
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If j - nMonth = 1 Then
        arrTitle(nPeriod) = "=" & LANGUAGE_SHEET & "!R" & 62 + nMonth & "C1 & "". " & nYear Mod 100 & """"
      ElseIf j - nMonth = 3 And (nMonth - 1) Mod 3 = 0 Then
        arrTitle(nPeriod) = "=""" & (nMonth - 1) \ 3 + 1 & " "" & " & LANGUAGE_SHEET & "!R47C1 & "" " & nYear & """"
      ElseIf j - nMonth = 12 And nMonth = 1 Then
        arrTitle(nPeriod) = "=""" & nYear & """"
      Else
        arrTitle(nPeriod) = "=""" & nMonth & "-" & j - 1 & "." & nYear & """"
      End If
      If j > 12 Then
        j = j - 12
        nYear = nYear + 1
      End If
      nMonth = j
      nCount = 0
    End If
  Next i

  Dim nRow As Long
  nRow = ActiveSheet.UsedRange.Rows.Count
  nRow = nRow + IIf(nRow = 1, 2, 3)
  TransformInit
  For i = 1 To nItemCount Step 1
    If listItem.Selected(i - 1) Then
      Dim r As Long, nBeg As Long, nEnd As Long, oSheet As Worksheet, bColor As Boolean, oDst As Range, oSrc As Range, oShape As Shape
      Set oSheet = arrSheet(arrItem(i).nSheet).oSheet
      nBeg = arrItem(i).nBeg
      nEnd = arrItem(i).nEnd
      If InStr(1, arrItem(i).sID, "TABLE::", vbTextCompare) = 1 Then
        Dim nTotal As Integer, nSkip As Integer, sSkip As String, bChart As Boolean, sMode As String, sBuffer As String
        nTotal = oSheet.UsedRange.Columns.Count
        r = nBeg
        Do While r <= nEnd
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          sBuffer = oSheet.Cells(r, ID_COL).Text
          If sBuffer = "TEMPLATE" Then
            sBuffer = oSheet.Cells(r, FLAG_COL).Value
            r = r + 1
            For j = Val(GetValue(sBuffer, "Count")) To 1 Step -1
              r = r + Val(GetValue(oSheet.Cells(r, FLAG_COL).Value, "Row", 1))
            Next j
          End If
          sBuffer = oSheet.Cells(r, FLAG_COL).Value
          bColor = False
          If r = nBeg Then
            nSkip = 0
            If checkCompact.Value Then
              sSkip = GetValue(sBuffer, "Skip")
            Else
              bColor = True
            End If
            bChart = Val(GetValue(sBuffer, "Chart"))
          ElseIf checkCompact.Value Then
            nSkip = Val(GetValue(sBuffer, "Skip"))
            If nSkip = 0 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              If Mid(oSheet.Cells(r, ID_COL).Text, 1, 4) = "DATA" And Val(GetValue(sBuffer, "Count")) = 0 Then nSkip = 1
            ElseIf nSkip = 2 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              For j = 1 To nLen Step 1
                If oSheet.Cells(r, PERIOD_COL + j - 1).Value <> 0 Then
                  nSkip = 0
                  Exit For
                End If
              Next j
            End If
          Else
            nSkip = IIf(oSheet.Rows(r).Hidden, 1, 0)
          End If
          If nSkip = 0 Then
            Set oDst = ActiveSheet.Cells(nRow, 1)
            Set oSrc = oSheet.Cells(r, NAME_COL)
            If oSrc.EntireRow.RowHeight > 0 Then oDst.EntireRow.RowHeight = oSrc.EntireRow.RowHeight
            sMode = GetValue(sBuffer, "Mode")
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            For j = NAME_COL To UNIT_COL Step 1
              If InStr(1, sSkip, Mid("abc", j, 1), vbTextCompare) = 0 Then
                CopyFormat oDst, oSrc, bColor
                If Not IsEmpty(oSrc.Value) Then oDst.FormulaR1C1 = "=" & oSrc.Address(True, True, xlR1C1, True)
                If r = nBeg Then
                  oDst.EntireColumn.ColumnWidth = oSrc.EntireColumn.ColumnWidth
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  If j = NAME_COL Then
                    If checkCompact.Value Then
                      oDst.IndentLevel = 0
                      sBuffer = GetValue(sBuffer, "AddTitle")
                      If Len(sBuffer) > 0 Then
                        If oDst.HasFormula Then
                          sBuffer = oDst.FormulaR1C1 & " & "", "" & " & sBuffer
                        Else
                          sBuffer = "=" & sBuffer
                        End If
                        oDst.FormulaR1C1 = sBuffer
                      End If
                    Else
                      oDst.IndentLevel = 1
                    End If
                  End If
                End If
                Set oDst = oDst.Offset(0, 1)
              End If
              Set oSrc = oSrc.Offset(0, 1)
            Next j
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Set oSrc = oSheet.Cells(r, PERIOD_COL)
            For j = 1 To nPeriod Step 1
              CopyFormat oDst, oSrc, bColor
              If r = nBeg Then
                oDst.EntireColumn.ColumnWidth = oSrc.EntireColumn.ColumnWidth
                If Not IsEmpty(oSrc.Value) Then oDst.FormulaR1C1 = arrTitle(j)
              ElseIf arrPeriod(j) = 1 Then
                If Len(sMode) > 0 Or Not IsEmpty(oSrc.Value) Then oDst.FormulaR1C1 = "=" & oSrc.Address(True, True, xlR1C1, True)
              Else
                Select Case sMode
                Case "sum" ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  oDst.FormulaR1C1 = "=SUM(" & oSheet.Range(oSrc, oSrc.Offset(0, arrPeriod(j) - 1)).Address(True, True, xlR1C1, True) & ")"
                Case "beg" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  oDst.FormulaR1C1 = "=" & oSrc.Address(True, True, xlR1C1, True)
                Case "end" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  oDst.FormulaR1C1 = "=" & oSrc.Offset(0, arrPeriod(j) - 1).Address(True, True, xlR1C1, True)
                Case "avg" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  oDst.FormulaR1C1 = "=IFERROR(AVERAGE(" & oSheet.Range(oSrc, oSrc.Offset(0, arrPeriod(j) - 1)).Address(True, True, xlR1C1, True) & "),""-"")"
                Case "min" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  oDst.FormulaR1C1 = "=MIN(" & oSheet.Range(oSrc, oSrc.Offset(0, arrPeriod(j) - 1)).Address(True, True, xlR1C1, True) & ")"
                Case "max" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  oDst.FormulaR1C1 = "=MAX(" & oSheet.Range(oSrc, oSrc.Offset(0, arrPeriod(j) - 1)).Address(True, True, xlR1C1, True) & ")"
                Case Else
                  If Not IsEmpty(oSrc.Value) Then oDst.FormulaR1C1 = "=" & oSrc.Address(True, True, xlR1C1, True)
                End Select
              End If
              Set oDst = oDst.Offset(0, 1)
              Set oSrc = oSrc.Offset(0, arrPeriod(j))
            Next j
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If InStr(1, sSkip, "!") = 0 Then
              Set oSrc = oSrc.Offset(0, 1)
              For j = oSrc.Column To nTotal Step 1
                CopyFormat oDst, oSrc, bColor
                If r = nBeg Then oDst.EntireColumn.ColumnWidth = oSrc.EntireColumn.ColumnWidth
                If Not IsEmpty(oSrc.Value) Then oDst.FormulaR1C1 = "=" & oSrc.Address(True, True, xlR1C1, True)
                Set oDst = oDst.Offset(0, 1)
                Set oSrc = oSrc.Offset(0, 1)
              Next j
            End If
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If bChart Then
              Set oShape = GetChart(oSheet, r, r)
              If Not oShape Is Nothing Then
                oShape.Copy
                ActiveSheet.Cells(nRow, 4).Activate
                ActiveSheet.Paste
              End If
            End If
            nRow = nRow + 1
          End If
          r = r + 1
        Loop
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If checkCompact.Value Then
          nTotal = oDst.Column - 1
          Set oDst = oDst.Offset(0, -nTotal).Resize(1, nTotal)
          oDst.Borders(xlEdgeBottom).LineStyle = xlContinuous
        End If
      ElseIf InStr(1, arrItem(i).sID, "CHART::", vbTextCompare) = 1 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set oDst = ActiveSheet.Cells(nRow, 1)
        Set oSrc = oSheet.Cells(nBeg, NAME_COL)
        oDst.EntireRow.RowHeight = oSrc.EntireRow.RowHeight
        bColor = Not checkCompact.Value
        For j = NAME_COL To 5 Step 1
          CopyFormat oDst, oSrc, bColor
          If j = NAME_COL Then
            oDst.FormulaR1C1 = "=" & oSrc.Address(True, True, xlR1C1, True)
            If checkCompact.Value Then
              oDst.IndentLevel = 0
            Else
              oDst.IndentLevel = 1
            End If
            Set oSrc = oSrc.Offset(0, 1)
          End If
          Set oDst = oDst.Offset(0, 1)
        Next j
        nRow = nRow + 2
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set oShape = GetChart(oSheet, nBeg + 1, nBeg + 3)
        If Not oShape Is Nothing Then
          oShape.Copy
          ActiveSheet.Cells(nRow, 1).Activate
          ActiveSheet.Paste
          nRow = nRow + oShape.BottomRightCell.Row - oShape.TopLeftCell.Row
        End If
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| UsedRange
        ActiveSheet.Cells(nRow, 1).Value = " "
        nRow = nRow + 1
      End If
      nRow = nRow + 2
      listItem.Selected(i - 1) = False
      Me.Repaint
    End If
  Next i
  ActiveSheet.Cells(nRow, 1).Activate
  TransformDone
End Sub

Private Sub buttonClear_Click()
  Dim nRow As Long
  nRow = ActiveSheet.UsedRange.Rows.Count
  If nRow > 1 Then ActiveSheet.Rows("2:" & nRow + 1).Delete
  ActiveSheet.Cells(2, 1).Activate
End Sub

Private Sub buttonClose_Click()
  Unload Me
End Sub

Private Sub checkQuarter_Click()
  Dim bValue As Boolean
  bValue = checkQuarter.Value
  textQuarter.Enabled = bValue
  spinQuarter.Enabled = bValue
  labelQuarter.Enabled = bValue
  If bValue Then
    spinQuarter_Change
  Else
    checkYear.Enabled = True
    spinYear.Min = spinQuarter.Min
  End If
End Sub

Private Sub textQuarter_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If IsNumeric(textQuarter.Value) Then
    Dim nValue As Integer
    nValue = textQuarter.Value
    If nValue < spinQuarter.Min Then
      nValue = spinQuarter.Min
    ElseIf nValue > spinQuarter.Max Then
      nValue = spinQuarter.Max
    End If
    spinQuarter.Value = nValue
  End If
  textQuarter.Value = spinQuarter.Value
End Sub

Private Sub spinQuarter_Change()
  Dim nValue As Integer
  nValue = spinQuarter.Value
  textQuarter.Value = nValue
  If nValue < spinYear.Max Then
    checkYear.Enabled = True
    spinYear.Min = nValue + 1
  Else
    checkYear.Value = False
    checkYear.Enabled = False
    spinYear.Min = nValue
  End If
End Sub

Private Sub checkYear_Click()
  Dim bValue As Boolean
  bValue = checkYear.Value
  textYear.Enabled = bValue
  spinYear.Enabled = bValue
  labelYear.Enabled = bValue
End Sub

Private Sub textYear_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If IsNumeric(textYear.Value) Then
    Dim nValue As Integer
    nValue = textYear.Value
    If nValue < spinYear.Min Then
      nValue = spinYear.Min
    ElseIf nValue > spinYear.Max Then
      nValue = spinYear.Max
    End If
    spinYear.Value = nValue
  End If
  textYear.Value = spinYear.Value
End Sub

Private Sub spinYear_Change()
  textYear.Value = spinYear.Value
End Sub

Private Sub UserForm_Initialize()
  Dim oOptions As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(215)
  labelItem.Caption = LoadString(216)
  frameScale.Caption = LoadString(219)
  checkQuarter.Caption = LoadString(220)
  labelQuarter.Caption = LoadString(222)
  checkYear.Caption = LoadString(221)
  labelYear.Caption = LoadString(222)
  checkCompact.Caption = LoadString(223)
  buttonAdd.Caption = LoadString(217)
  buttonClear.Caption = LoadString(218)
  buttonClose.Caption = LoadString(118)

  Dim nStep As Integer, nMonth As Integer, nBeg As Integer, nEnd As Integer
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  nStep = oMain.Range("Prj_Step").Value
  nMonth = oMain.Range("Prj_StartMonth").Value
  nMonth = nMonth - (nMonth - 1) Mod nStep
  nBeg = oMain.Range("Prj_StartYear").Value
  nEnd = nBeg + (nMonth + oMain.Range("Prj_Len").Value * nStep - 2) \ 12
  If nStep < 3 Then
    spinQuarter.Min = nBeg
    spinQuarter.Max = nEnd
    spinQuarter.Value = nBeg
    textQuarter.Value = nBeg
  Else
    checkQuarter.Enabled = False
  End If
  textQuarter.Enabled = False
  spinQuarter.Enabled = False
  labelQuarter.Enabled = False
  If nStep < 12 Then
    spinYear.Min = nBeg
    spinYear.Max = nEnd
    spinYear.Value = nBeg
    textYear.Value = nBeg
  Else
    checkYear.Enabled = False
  End If
  textYear.Enabled = False
  spinYear.Enabled = False
  labelYear.Enabled = False

  Dim r As Long, nRow As Long, nTemp As Long, sBuffer As String, oSheet As Worksheet
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nTemp = oOptions.Range("Opt_Sheets").Row + 1
  Do While Not IsEmpty(oOptions.Cells(nTemp, 1).Value)
    Set oSheet = ThisWorkbook.Sheets(oOptions.Cells(nTemp, 1).Value)
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If oSheet.Visible = xlSheetVisible And oOptions.Cells(nTemp, 2).Value > 0 Then
      nSheetCount = nSheetCount + 1
      Set arrSheet(nSheetCount).oSheet = oSheet
      nRow = oSheet.UsedRange.Rows.Count
      For r = 1 To nRow Step 1
        sBuffer = oSheet.Cells(r, ID_COL).Text
        If InStr(1, sBuffer, "TABLE::", vbTextCompare) = 1 Or InStr(1, sBuffer, "CHART::", vbTextCompare) = 1 Then
          If nItemCount = ITEM_COUNT Then Exit For
          nItemCount = nItemCount + 1
          arrItem(nItemCount).sID = sBuffer
          arrItem(nItemCount).nSheet = nSheetCount
          arrItem(nItemCount).nBeg = r
          arrItem(nItemCount).nEnd = r
          listItem.AddItem oSheet.Cells(r, NAME_COL).Text
        ElseIf InStr(1, sBuffer, "END::", vbTextCompare) = 1 And nItemCount > 0 Then
          arrItem(nItemCount).nEnd = r
        End If
      Next r
      If nSheetCount = SHEET_COUNT Then Exit Do
    End If
    nTemp = nTemp + 1
  Loop
End Sub
Attribute VB_Name = "Report_Excel"
Attribute VB_Base = "0{1885B615-F553-4E47-808A-195DF5214FB0}{23BC8E91-A34E-470C-B887-F2FA2A774DA0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel
'
'------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  ActiveSheet.Copy

  Dim oSheet As Worksheet, oShape As Shape
  Set oSheet = ActiveSheet
  TransformInit
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  With ActiveWindow
    .FreezePanes = False
    .Split = False
  End With
  For Each oShape In oSheet.Shapes
    If oShape.Type = msoFormControl Then oShape.Delete
  Next oShape
  oSheet.Rows(1).Delete
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If Not checkLink.Value Then
    oSheet.UsedRange.Value = oSheet.UsedRange.Value
'
    Dim oChart As ChartObject, oSeries As Series
    For Each oChart In oSheet.ChartObjects
      For Each oSeries In oChart.Chart.SeriesCollection
        oSeries.Name = oSeries.Name
        oSeries.Values = oSeries.Values
        oSeries.XValues = oSeries.XValues
      Next oSeries
    Next oChart
  End If
  Application.GoTo oSheet.Cells(1, 1), True
  TransformDone
'
  Unload Me
End Sub

Private Sub buttonCancel_Click()
  Unload Me
End Sub

Private Sub UserForm_Initialize()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(212)
  label.Caption = LoadString(213)
  checkLink.Caption = LoadString(214)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)
End Sub
Attribute VB_Name = "Report_Print"
Attribute VB_Base = "0{FB0C5894-F041-431B-986E-00780F0D2001}{DE505B47-7389-4214-94CF-60FBDB19FC10}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private oOptions As Worksheet

Private Sub buttonOK_Click()
  Dim sBuffer As String, oSheet As Worksheet
  sBuffer = SetValue(sBuffer, "Repeat", IIf(checkRepeat.Value, 1, 0))
  sBuffer = SetValue(sBuffer, "FooterR", comboFooterR.ListIndex + 1)
  sBuffer = SetValue(sBuffer, "FooterL", comboFooterL.ListIndex + 1)
  sBuffer = SetValue(sBuffer, "HeaderR", comboHeaderR.ListIndex + 1)
  sBuffer = SetValue(sBuffer, "HeaderL", comboHeaderL.ListIndex + 1)
  oOptions.Range("Opt_DlgPrint").Value = sBuffer
  Set oSheet = ActiveSheet
  TransformInit
  With oSheet.PageSetup
    .Orientation = xlLandscape
    .Order = xlOverThenDown
    .PrintTitleColumns = IIf(checkRepeat.Value, oSheet.Columns(1).Address, vbNullString)

    Dim nRow As Long, nCol As Long, arr(0 To 4) As String
    nRow = oSheet.UsedRange.Rows.Count
    If nRow < 2 Then nRow = 2
    nCol = oSheet.UsedRange.Columns.Count
    If nCol = 1 Then nCol = 3
    .PrintArea = oSheet.Range(oSheet.Cells(2, 1), oSheet.Cells(nRow, nCol)).Address
    arr(0) = vbNullString
    arr(1) = LoadString(4)
    arr(2) = "&D &T"
    arr(3) = "&Z&F"
    arr(4) = LoadString(211)
    .LeftHeader = arr(comboHeaderL.ListIndex)
    .RightHeader = arr(comboHeaderR.ListIndex)
    .LeftFooter = arr(comboFooterL.ListIndex)
    .RightFooter = arr(comboFooterR.ListIndex)
  End With
  TransformDone
'
  Unload Me
  oSheet.PrintPreview True
End Sub

Private Sub buttonCancel_Click()
  Unload Me
End Sub

Private Sub UserForm_Initialize()
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(200)
  frameHeader.Caption = LoadString(201)
  frameFooter.Caption = LoadString(202)
  labelHeaderL.Caption = LoadString(203)
  labelHeaderR.Caption = LoadString(204)
  labelFooterL.Caption = LoadString(203)
  labelFooterR.Caption = LoadString(204)
  checkRepeat.Caption = LoadString(205)
  buttonOK.Caption = LoadString(206)
  buttonCancel.Caption = LoadString(120)

  Dim i As Integer, arr(1 To 5) As String, sBuffer As String
  arr(1) = LoadString(207)
  arr(2) = LoadString(4)
  arr(3) = LoadString(208)
  arr(4) = LoadString(209)
  arr(5) = LoadString(210)
  For i = 1 To 5 Step 1
    comboHeaderL.AddItem arr(i)
    comboHeaderR.AddItem arr(i)
    comboFooterL.AddItem arr(i)
    comboFooterR.AddItem arr(i)
  Next i
  sBuffer = oOptions.Range("Opt_DlgPrint").Value
  i = Val(GetValue(sBuffer, "HeaderL", 2))
  comboHeaderL.ListIndex = i - 1
  i = Val(GetValue(sBuffer, "HeaderR", 3))
  comboHeaderR.ListIndex = i - 1
  i = Val(GetValue(sBuffer, "FooterL", 4))
  comboFooterL.ListIndex = i - 1
  i = Val(GetValue(sBuffer, "FooterR", 5))
  comboFooterR.ListIndex = i - 1
  i = Val(GetValue(sBuffer, "Repeat"))
  checkRepeat.Value = i
End Sub
Attribute VB_Name = "Scen"
Attribute VB_Base = "0{512A6151-2830-47C8-8CA7-00479928A9C6}{2E4EC028-AD1D-4F2D-807C-C8D1F911B959}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'--------------------------------------------------------------------------------------------------

Option Explicit

Private Const PARAM_COUNT As Integer = 100
Private Const RESULT_COUNT As Integer = 100
Private Const DEFAULT_COUNT As Integer = 32

Private oOptions As Worksheet
Private oMain As Worksheet
Private oSheet As Worksheet
Private nTableRow As Long

Private Type ParamData
  nIndex As Integer
  sTitle As String
  sAddr As String
  nType As Integer
End Type

Private Type ResultData
  nIndex As Integer
  sTitle As String
  sAddr As String
End Type

Private nScen As Integer
Private nParam As Integer
Private nResult As Integer

Private nParamCount As Integer
Private arrParam(1 To PARAM_COUNT) As ParamData

Private nParamDel As Integer
Private delParam(1 To PARAM_COUNT) As ParamData

Private nResultCount As Integer
Private arrResult(1 To RESULT_COUNT) As ResultData

Private nResultDel As Integer
Private delResult(1 To RESULT_COUNT) As ResultData

Private Type DefaultData
  sTitle As String
  sFormula As String
  sAddr As String
  bSelect As Boolean
End Type

Private nDefaultCount As Integer
Private arrDefault(1 To DEFAULT_COUNT) As DefaultData

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Sub Recalc()
  If nTableRow <= 0 Then Exit Sub
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 187, vbOKOnly + vbCritical
    Exit Sub
  End If
  If nScen <= 0 Then Exit Sub

  Dim i As Integer, j As Integer, k As Integer, nLen As Integer, nIndex As Integer, arrData() As String, oRange As Range
  TransformInit
  nLen = oMain.Range("Prj_Len").Value
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  nIndex = 0
  For i = 1 To nParam Step 1
    nIndex = nIndex + IIf(arrParam(i).nType = 1, 1, nLen)
  Next i
  ReDim arrData(1 To nIndex)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  nIndex = 0
  For i = 1 To nParam Step 1
    On Error Resume Next
    Set oRange = Application.Range(arrParam(i).sAddr).Cells(1, 1)
    On Error GoTo 0
    If Not oRange Is Nothing Then
      If arrParam(i).nType = 1 Then
        Set oRange = oRange.Offset(0, VALUE_COL - oRange.Column)
        arrData(nIndex + 1) = oRange.FormulaR1C1
      ElseIf arrParam(i).nType = 2 Then
        Set oRange = oRange.Offset(0, PERIOD_COL - oRange.Column)
        For j = 1 To nLen Step 1
          arrData(nIndex + j) = oRange.FormulaR1C1
          Set oRange = oRange.Offset(0, 1)
        Next j
      End If
      Set oRange = Nothing
    Else
      ShowMessageParam 356, vbOKOnly + vbExclamation, arrParam(i).sTitle
    End If
    nIndex = nIndex + IIf(arrParam(i).nType = 1, 1, nLen)
  Next i

  Dim r As Long, nResultRow As Long
  nResultRow = GetRowByID(oSheet, "TABLE::RESULT") + 2
  For k = 1 To nScen Step 1
    r = nTableRow + 2 + (nParam + 2) * (k - 1)
    Application.StatusBar = LoadStringParam(365, oSheet.Cells(r, NAME_COL).Text)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    r = r + 1
    For i = 1 To nParam Step 1
      On Error Resume Next
      Set oRange = Application.Range(arrParam(i).sAddr).Cells(1, 1)
      On Error GoTo 0
      If Not oRange Is Nothing Then
        If arrParam(i).nType = 1 Then
          Set oRange = oRange.Offset(0, VALUE_COL - oRange.Column)
          oRange.Value = oSheet.Cells(r, VALUE_COL).Value
        ElseIf arrParam(i).nType = 2 Then
          Set oRange = oRange.Offset(0, PERIOD_COL - oRange.Column)
          Set oRange = Application.Range(oRange, oRange.Offset(0, nLen - 1))
          oRange.Value = oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1)).Value
        End If
        Set oRange = Nothing
      End If
      r = r + 1
    Next i
    Application.Calculate

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    r = nResultRow + k
    For i = 1 To nResult Step 1
      On Error Resume Next
      Set oRange = Application.Range(arrResult(i).sAddr).Cells(1, 1)
      On Error GoTo 0
      If Not oRange Is Nothing Then
        Set oRange = oRange.Offset(0, VALUE_COL - oRange.Column)
        oSheet.Cells(r, VALUE_COL).Value = oRange.Value
        Set oRange = oRange.Offset(0, PERIOD_COL - oRange.Column)
        Set oRange = Application.Range(oRange, oRange.Offset(0, nLen - 1))
        oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1)).Value = oRange.Value
        Set oRange = Nothing
      ElseIf k = 1 Then
        ShowMessageParam 357, vbOKOnly + vbExclamation, arrResult(i).sTitle
      End If
      r = r + nScen + 2
    Next i

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    nIndex = 0
    For i = 1 To nParam Step 1
      On Error Resume Next
      Set oRange = Application.Range(arrParam(i).sAddr).Cells(1, 1)
      On Error GoTo 0
      If Not oRange Is Nothing Then
        If arrParam(i).nType = 1 Then
          Set oRange = oRange.Offset(0, VALUE_COL - oRange.Column)
          oRange.FormulaR1C1 = arrData(nIndex + 1)
        ElseIf arrParam(i).nType = 2 Then
          Set oRange = oRange.Offset(0, PERIOD_COL - oRange.Column)
          For j = 1 To nLen Step 1
            oRange.FormulaR1C1 = arrData(nIndex + j)
            Set oRange = oRange.Offset(0, 1)
          Next j
        End If
        Set oRange = Nothing
      End If
      nIndex = nIndex + IIf(arrParam(i).nType = 1, 1, nLen)
    Next i
    Application.Calculate
  Next k
  oSheet.Range("Chk_Scen").Value = oSheet.Range("Chk_Result").Value
  TransformDone
End Sub

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Private Sub LoadDefaults()
  If nDefaultCount > 0 Then Exit Sub

  Dim r As Long
  r = oOptions.Range("Opt_Results").Row + 1
  Do While Not IsEmpty(oOptions.Cells(r, 1).Value)
    nDefaultCount = nDefaultCount + 1
    With oOptions.Cells(r, 1)
      arrDefault(nDefaultCount).sTitle = .Text
      arrDefault(nDefaultCount).sFormula = .FormulaR1C1
    End With
    With oOptions.Cells(r, 2)
      arrDefault(nDefaultCount).sAddr = Mid(.Formula, IIf(.HasFormula, 2, 1))
    End With
    If nDefaultCount = DEFAULT_COUNT Then Exit Do
    r = r + 1
  Loop
End Sub

Private Sub buttonOK_Click()
  If nTableRow <= 0 Then Exit Sub
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 187, vbOKOnly + vbCritical
    Exit Sub
  End If

  Dim i As Integer, j As Integer, k As Integer, nScenCount As Integer, sBuffer As String
  nScenCount = spinCount.Value
  If nScenCount > 0 Then
    If nParamCount = 0 Then
      ShowMessage 332, vbOKOnly + vbExclamation
      listParam.SetFocus
      Exit Sub
    End If
    If nResultCount = 0 Then
      ShowMessage 333, vbOKOnly + vbExclamation
      listResult.SetFocus
      Exit Sub
    End If
  ElseIf nParamCount > 0 Or nResultCount > 0 Then
    If ShowMessage(364, vbYesNo + vbQuestion) = vbNo Then Exit Sub
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 1 To nParamCount Step 1
      If arrParam(i).nIndex > 0 Then
        nParamDel = nParamDel + 1
        delParam(nParamDel) = arrParam(i)
      End If
    Next i
    nParamCount = 0
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 1 To nResultCount Step 1
      If arrResult(i).nIndex > 0 Then
        nResultDel = nResultDel + 1
        delResult(nResultDel) = arrResult(i)
      End If
    Next i
    nResultCount = 0
  End If

  Dim r As Long, nLen As Integer, nItemRow As Long, nBaseRow As Long
  Dim rgbEdit As Long, oRange As Range
  TransformInit
  nLen = oMain.Range("Prj_Len").Value
  r = oOptions.Range("Opt_Colors").Row
  rgbEdit = oOptions.Cells(r, 4).Interior.Color
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  nBaseRow = nTableRow + 2
  If nScen > 0 Then
    r = nBaseRow + (nParam + 2) * nScen - 1
    oSheet.Rows(r).Insert
    oSheet.Rows(r).ClearFormats
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    k = nScen
    If nScenCount < nScen Then
      k = nScenCount
      oSheet.Rows(nBaseRow + (nParam + 2) * nScenCount & ":" & r).Delete
    End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 1 To nParamDel Step 1
      nParam = nParam - 1
      r = nBaseRow + delParam(i).nIndex
      For j = 1 To k Step 1
        oSheet.Rows(r).Delete
        r = r + nParam + 2
      Next j
      For j = i + 1 To nParamDel Step 1
        If delParam(j).nIndex > delParam(i).nIndex Then delParam(j).nIndex = delParam(j).nIndex - 1
      Next j
    Next i
  End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  r = nBaseRow
  For i = 1 To nScenCount Step 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If i > nScen Then
      oSheet.Rows(r).Insert
      oSheet.Rows(r).ClearFormats
      oSheet.Rows(r + 1).Insert
      With oSheet.Cells(r, NAME_COL)
        .HorizontalAlignment = xlLeft
        If i = 1 Then
          .FormulaR1C1 = "='" & LANGUAGE_SHEET & "'!R368C1"
        Else
          .FormulaR1C1 = "='" & LANGUAGE_SHEET & "'!R369C1 & "" " & i & """"
          .Locked = False
          .Interior.Color = rgbEdit
        End If
        .Font.Bold = True
      End With
    End If
    r = r + 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For j = 1 To nParamCount Step 1
      If i > nScen Or arrParam(j).nIndex = 0 Then
        oSheet.Rows(r).Insert
        If i = 1 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          oSheet.Rows(r).ClearFormats
          On Error Resume Next
          Set oRange = Application.Range(arrParam(j).sAddr).Cells(1, 1)
          On Error GoTo 0
          If Not oRange Is Nothing Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            Set oRange = oRange.Offset(0, 1 - oRange.Column)
            For k = 1 To PERIOD_COL + nLen - 1 Step 1
              With oSheet.Cells(r, k)
                .NumberFormat = oRange.NumberFormat
                .HorizontalAlignment = oRange.HorizontalAlignment
                Select Case k
                Case ID_COL
                  .FormulaR1C1 = "=" & oRange.Address(True, True, xlR1C1, True)
                Case FLAG_COL
                  If arrParam(j).nType = 1 Then
                    sBuffer = vbNullString
                  Else
                    sBuffer = GetValue(oRange.Value, "Mode")
                    If Len(sBuffer) > 0 Then sBuffer = ";Mode=" & sBuffer
                  End If
                  .Value = "Type=" & arrParam(j).nType & sBuffer
                Case Else
                  If Not IsEmpty(oRange.Value) Then .FormulaR1C1 = "=" & oRange.Address(True, True, xlR1C1, True)
                End Select
              End With
              Set oRange = oRange.Offset(0, 1)
            Next k
            Set oRange = Nothing
          End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          With oSheet.Cells(r, NAME_COL)
            .HorizontalAlignment = xlLeft
            .FormulaR1C1 = arrParam(j).sTitle
            .Locked = False
            .Interior.Color = rgbEdit
          End With
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          If arrParam(j).nType = 1 Then
            oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1)).ClearContents
          Else
            oSheet.Cells(r, VALUE_COL).ClearContents
          End If
        Else
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          nItemRow = nBaseRow + j
          sBuffer = "=R" & nItemRow & "C"
          oSheet.Rows(nItemRow).Copy oSheet.Rows(r)
          With oSheet.Cells(r, NAME_COL)
            .FormulaR1C1 = sBuffer
            .Locked = True
            .Interior.ColorIndex = xlColorIndexNone
          End With
          If oSheet.Cells(nItemRow, UNIT_COL).HasFormula Then oSheet.Cells(r, UNIT_COL).FormulaR1C1 = sBuffer
          oSheet.Cells(r, ID_COL).ClearContents
          oSheet.Cells(r, FLAG_COL).FormulaR1C1 = sBuffer
          If arrParam(j).nType = 1 Then
            With oSheet.Cells(r, VALUE_COL)
              .FormulaR1C1 = sBuffer
              .Locked = False
              .Interior.Color = rgbEdit
            End With
          Else
            With oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1))
              .FormulaR1C1 = sBuffer
              .Locked = False
              .Interior.Color = rgbEdit
            End With
          End If
        End If
      End If
      r = r + 1
    Next j
    r = r + 1
  Next i
  If nScenCount > 0 Then oSheet.Rows(r - 1).Delete
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  nBaseRow = GetRowByID(oSheet, "TABLE::RESULT") + 2
  If nResult > 0 Then
    r = nBaseRow + (nScen + 2) * nResult - 1
    oSheet.Rows(r).Insert
    oSheet.Rows(r).ClearFormats
  End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For i = 1 To nResultDel Step 1
    nResult = nResult - 1
    r = nBaseRow + (nScen + 2) * (delResult(i).nIndex - 1)
    oSheet.Rows(r & ":" & r + nScen + 1).Delete
    For j = i + 1 To nResultDel Step 1
      If delResult(j).nIndex > delResult(i).nIndex Then delResult(j).nIndex = delResult(j).nIndex - 1
    Next j
  Next i
  r = nBaseRow
  For i = 1 To nResultCount Step 1
    If arrResult(i).nIndex = 0 Then
      oSheet.Rows(r).Insert
      oSheet.Rows(r).ClearFormats
      oSheet.Rows(r + 1).Insert
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      With oSheet.Cells(r, NAME_COL)
        .HorizontalAlignment = xlLeft
        .FormulaR1C1 = arrResult(i).sTitle
        .Locked = False
        .Interior.Color = rgbEdit
        .Font.Bold = True
      End With
    ElseIf nScenCount < nScen Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      oSheet.Rows(r + nScenCount + 1 & ":" & r + nScen).Delete
    End If
    r = r + 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For j = 1 To nScenCount Step 1
      If j > nScen Or arrResult(i).nIndex = 0 Then
        oSheet.Rows(r).Insert
        oSheet.Rows(r).ClearFormats
        If j = 1 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          On Error Resume Next
          Set oRange = Application.Range(arrResult(i).sAddr).Cells(1, 1)
          On Error GoTo 0
          If Not oRange Is Nothing Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            Set oRange = oRange.Offset(0, 1 - oRange.Column)
            For k = 1 To PERIOD_COL + nLen - 1 Step 1
              With oSheet.Cells(r, k)
                .NumberFormat = oRange.NumberFormat
                .HorizontalAlignment = oRange.HorizontalAlignment
                Select Case k
                Case ID_COL
                  oSheet.Cells(r - 1, ID_COL).FormulaR1C1 = "=" & oRange.Address(True, True, xlR1C1, True)
                Case FLAG_COL
                  sBuffer = GetValue(oRange.Value, "Mode")
                  If Len(sBuffer) > 0 Then .Value = "Mode=" & sBuffer
                Case UNIT_COL
                  If Not IsEmpty(oRange.Value) Then .FormulaR1C1 = "=" & oRange.Address(True, True, xlR1C1, True)
                End Select
              End With
              Set oRange = oRange.Offset(0, 1)
            Next k
            Set oRange = Nothing
          End If
        Else
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          nItemRow = r - j + 1
          sBuffer = "=R" & nItemRow & "C"
          oSheet.Rows(nItemRow).Copy oSheet.Rows(r)
          If oSheet.Cells(nItemRow, UNIT_COL).HasFormula Then oSheet.Cells(r, UNIT_COL).FormulaR1C1 = sBuffer
          If Not IsEmpty(oSheet.Cells(nItemRow, FLAG_COL).Value) Then oSheet.Cells(r, FLAG_COL).FormulaR1C1 = sBuffer
          oSheet.Cells(r, VALUE_COL).ClearContents
          oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r, PERIOD_COL + nLen - 1)).ClearContents
        End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        With oSheet.Cells(r, NAME_COL)
          .HorizontalAlignment = xlLeft
          .FormulaR1C1 = "=R" & nTableRow + 2 + (nParamCount + 2) * (j - 1) & "C"
        End With
      End If
      r = r + 1
    Next j
    r = r + 1
  Next i
  If nResultCount > 0 Then oSheet.Rows(r - 1).Delete

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sBuffer = oSheet.Cells(nTableRow, FLAG_COL).Value
  sBuffer = SetValue(sBuffer, "Count", nScenCount)
  sBuffer = SetValue(sBuffer, "Param", nParamCount)
  sBuffer = SetValue(sBuffer, "Result", nResultCount)
  oSheet.Cells(nTableRow, FLAG_COL).Value = sBuffer
  If nScenCount = 0 Then
    oSheet.Range("Chk_Scen").ClearContents
  Else
    oSheet.Range("Chk_Scen").Value = -1
  End If
  Application.GoTo oSheet.Cells(nTableRow, NAME_COL), False
  TransformDone
'
  Unload Me
End Sub

Private Sub buttonCancel_Click()
  Unload Me
End Sub

Private Sub buttonInsParam_Click()
  If nTableRow <= 0 Then Exit Sub
  If nParamCount = PARAM_COUNT Then
    ShowMessage 237, vbOKOnly + vbExclamation
    Exit Sub
  End If

  Dim x As Integer, i As Integer, sAddr As String, sName As String, nType As Integer, oRange As Range
  x = Me.Left
  Me.Left = -1000
  Load Scen_Param
  Do While nType = 0
'    Scen_Param.refAddr.SetFocus
    Scen_Param.Show vbModal
    oSheet.Activate
    sAddr = Scen_Param.refAddr.Value
    sName = Scen_Param.textName.Value
    If Len(sAddr) = 0 Then Exit Do

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    sAddr = Application.ConvertFormula(sAddr, Application.ReferenceStyle, xlA1)
    Set oRange = Application.Range(sAddr)
    On Error GoTo 0
    If oRange Is Nothing Then
      ShowMessage 336, vbOKOnly + vbExclamation
    ElseIf Scen_Param.optionType1.Value Then
      nType = 1
    ElseIf Scen_Param.optionType2.Value Then
      nType = 2
    End If
    Set oRange = Nothing
  Loop
  Unload Scen_Param
  Me.Left = x
  If nType = 0 Then Exit Sub

  Dim nIndex As Integer
  For i = 1 To nParamCount Step 1
    If listParam.Selected(i - 1) Then listParam.Selected(i - 1) = False
  Next i
  nIndex = listParam.ListIndex
  If nIndex < 0 Then nIndex = nParamCount
  nIndex = nIndex + 1
  For i = nParamCount To nIndex Step -1
    arrParam(i + 1) = arrParam(i)
  Next i
  arrParam(nIndex).nIndex = 0
  arrParam(nIndex).sTitle = sName
  arrParam(nIndex).sAddr = sAddr
  arrParam(nIndex).nType = nType
  nParamCount = nParamCount + 1
  listParam.AddItem sName, nIndex - 1
  listParam.Selected(nIndex - 1) = True
  listParam.ListIndex = -1
End Sub

Private Sub buttonDelParam_Click()
  If nTableRow <= 0 Then Exit Sub

  Dim i As Integer, nIndex As Integer
  If nParamCount = 0 Then
    ShowMessage 238, vbOKOnly + vbExclamation
    Exit Sub
  End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For i = 1 To nParamCount Step 1
    If listParam.Selected(i - 1) Then nIndex = nIndex + 1
  Next i
  If nIndex = 0 Then
    ShowMessage 240, vbOKOnly + vbExclamation
    Exit Sub
  End If
  If ShowMessage(241, vbYesNo + vbQuestion) = vbNo Then Exit Sub
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  nIndex = 1
  Do While nIndex <= nParamCount
    If listParam.Selected(nIndex - 1) Then
      If arrParam(nIndex).nIndex > 0 Then
        nParamDel = nParamDel + 1
        delParam(nParamDel) = arrParam(nIndex)
      End If
      For i = nIndex + 1 To nParamCount Step 1
        arrParam(i - 1) = arrParam(i)
      Next i
      nParamCount = nParamCount - 1
      listParam.RemoveItem nIndex - 1
    Else
      nIndex = nIndex + 1
    End If
  Loop
  listParam.ListIndex = -1
End Sub

Private Sub buttonInsResult_Click()
  If nTableRow <= 0 Then Exit Sub
  If nResultCount = RESULT_COUNT Then
    ShowMessage 237, vbOKOnly + vbExclamation
    Exit Sub
  End If

  Dim x As Integer, i As Integer, sAddr As String, sName As String, nType As Integer, oRange As Range
  x = Me.Left
  Me.Left = -1000
  LoadDefaults
  Load Scen_Result
  For i = 1 To nDefaultCount Step 1
    Scen_Result.listItem.AddItem arrDefault(i).sTitle
  Next i
  Do While nType = 0
    Scen_Result.Show vbModal
    oSheet.Activate
    If Scen_Result.optionItem.Value Then
      If Scen_Result.listItem.ListCount = 0 Then Exit Do
      For i = 1 To nDefaultCount Step 1
        arrDefault(i).bSelect = Scen_Result.listItem.Selected(i - 1)
      Next i
      nType = 1
    ElseIf Scen_Result.optionOther.Value Then
      sAddr = Scen_Result.refAddr.Value
      sName = Scen_Result.textName.Value
      If Len(sAddr) = 0 Then Exit Do

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      On Error Resume Next
      sAddr = Application.ConvertFormula(sAddr, Application.ReferenceStyle, xlA1)
      Set oRange = Application.Range(sAddr)
      On Error GoTo 0
      If oRange Is Nothing Then
        ShowMessage 336, vbOKOnly + vbExclamation
      Else
        nType = 2
      End If
      Set oRange = Nothing
    End If
  Loop
  Unload Scen_Result
  Me.Left = x
  If nType = 0 Then Exit Sub

  Dim j As Integer, nIndex As Integer
  For i = 1 To nResultCount Step 1
    If listResult.Selected(i - 1) Then listResult.Selected(i - 1) = False
  Next i
  nIndex = listResult.ListIndex
  If nIndex < 0 Then nIndex = nResultCount
  If nType = 1 Then
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 1 To nDefaultCount Step 1
      If arrDefault(i).bSelect Then
        nIndex = nIndex + 1
        For j = nResultCount To nIndex Step -1
          arrResult(j + 1) = arrResult(j)
        Next j
        arrResult(nIndex).nIndex = 0
        arrResult(nIndex).sTitle = arrDefault(i).sFormula
        arrResult(nIndex).sAddr = arrDefault(i).sAddr
        nResultCount = nResultCount + 1
        listResult.AddItem arrDefault(i).sTitle, nIndex - 1
        listResult.Selected(nIndex - 1) = True
        If nResultCount = RESULT_COUNT Then Exit For
      End If
    Next i
  Else
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    nIndex = nIndex + 1
    For i = nResultCount To nIndex Step -1
      arrResult(i + 1) = arrResult(i)
    Next i
    arrResult(nIndex).nIndex = 0
    arrResult(nIndex).sTitle = sName
    arrResult(nIndex).sAddr = sAddr
    nResultCount = nResultCount + 1
    listResult.AddItem sName, nIndex - 1
    listResult.Selected(nIndex - 1) = True
  End If
  listResult.ListIndex = -1
End Sub

Private Sub buttonDelResult_Click()
  If nTableRow <= 0 Then Exit Sub

  Dim i As Integer, nIndex As Integer
  If nResultCount = 0 Then
    ShowMessage 238, vbOKOnly + vbExclamation
    Exit Sub
  End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For i = 1 To nResultCount Step 1
    If listResult.Selected(i - 1) Then nIndex = nIndex + 1
  Next i
  If nIndex = 0 Then
    ShowMessage 240, vbOKOnly + vbExclamation
    Exit Sub
  End If
  If ShowMessage(241, vbYesNo + vbQuestion) = vbNo Then Exit Sub
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  nIndex = 1
  Do While nIndex <= nResultCount
    If listResult.Selected(nIndex - 1) Then
      If arrResult(nIndex).nIndex > 0 Then
        nResultDel = nResultDel + 1
        delResult(nResultDel) = arrResult(nIndex)
      End If
      For i = nIndex + 1 To nResultCount Step 1
        arrResult(i - 1) = arrResult(i)
      Next i
      nResultCount = nResultCount - 1
      listResult.RemoveItem nIndex - 1
    Else
      nIndex = nIndex + 1
    End If
  Loop
  listResult.ListIndex = -1
End Sub

Private Sub textCount_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If IsNumeric(textCount.Value) Then
    Dim nValue As Integer
    nValue = textCount.Value
    If nValue < spinCount.Min Then
      nValue = spinCount.Min
    ElseIf nValue > spinCount.Max Then
      nValue = spinCount.Max
    End If
    spinCount.Value = nValue
  End If
  textCount.Value = spinCount.Value
End Sub

Private Sub spinCount_Change()
  textCount.Value = spinCount.Value
End Sub

Private Sub listParam_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  Select Case KeyCode
  Case vbKeyInsert
    buttonInsParam_Click
  Case vbKeyDelete
    buttonDelParam_Click
  End Select
End Sub

Private Sub listResult_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  Select Case KeyCode
  Case vbKeyInsert
    buttonInsResult_Click
  Case vbKeyDelete
    buttonDelResult_Click
  End Select
End Sub

Private Sub UserForm_Initialize()
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)
  Set oSheet = ActiveSheet

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(360)
  labelCount.Caption = LoadString(361)
  labelParam.Caption = LoadString(362)
  buttonInsParam.Caption = LoadString(233)
  buttonDelParam.Caption = LoadString(236)
  labelResult.Caption = LoadString(363)
  buttonInsResult.Caption = LoadString(233)
  buttonDelResult.Caption = LoadString(236)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)

  Dim r As Long, i As Integer, sBuffer As String
  nTableRow = GetRowByID(oSheet, "TABLE::SCEN")
  If GetRowByID(oSheet, "TABLE::RESULT") <= 0 Then nTableRow = 0
  If nTableRow <= 0 Then
    MsgBox "Table not found.", vbOKOnly + vbCritical, PRODUCT_NAME
  Else
    sBuffer = oSheet.Cells(nTableRow, FLAG_COL).Value
    nScen = Val(GetValue(sBuffer, "Count"))
    nParam = Val(GetValue(sBuffer, "Param"))
    nResult = Val(GetValue(sBuffer, "Result"))
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    r = nTableRow + 3
    For i = 1 To nParam Step 1
      sBuffer = oSheet.Cells(r, FLAG_COL).Value
      arrParam(i).nIndex = i
      arrParam(i).sTitle = oSheet.Cells(r, NAME_COL).Text
      arrParam(i).nType = Val(GetValue(sBuffer, "Type"))
      With oSheet.Cells(r, ID_COL)
        If .HasFormula Then arrParam(i).sAddr = Mid(.Formula, 2)
      End With
      listParam.AddItem arrParam(i).sTitle
      r = r + 1
    Next i
    nParamCount = nParam
    listParam.ListIndex = -1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    r = GetRowByID(oSheet, "TABLE::RESULT") + 2
    For i = 1 To nResult Step 1
      arrResult(i).nIndex = i
      arrResult(i).sTitle = oSheet.Cells(r, NAME_COL).Text
      With oSheet.Cells(r, ID_COL)
        If .HasFormula Then arrResult(i).sAddr = Mid(.Formula, 2)
      End With
      listResult.AddItem arrResult(i).sTitle
      r = r + nScen + 2
    Next i
    nResultCount = nResult
    listResult.ListIndex = -1
  End If
  spinCount.Value = nScen
  textCount.Value = spinCount.Value
End Sub
Attribute VB_Name = "Scen_Param"
Attribute VB_Base = "0{A88A3B5B-FE71-4A06-B9E9-AD4AC9FBF14B}{153D31EB-FA36-4E35-B930-7357E3C729D3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  If Len(refAddr.Value) = 0 Then
    ShowMessage 330, vbOKOnly + vbExclamation
    refAddr.SetFocus
    Exit Sub
  End If

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim oRange As Range
  On Error Resume Next
  Set oRange = Application.Range(Application.ConvertFormula(refAddr.Value, Application.ReferenceStyle, xlA1))
  On Error GoTo 0
  If oRange Is Nothing Then
    ShowMessage 336, vbOKOnly + vbExclamation
    refAddr.SetFocus
    Exit Sub
  ElseIf oRange.Rows.Count > 1 Then
    ShowMessage 337, vbOKOnly + vbExclamation
    refAddr.SetFocus
    Exit Sub
  Else
    Set oRange = oRange.Cells(1, 1).Offset(0, VALUE_COL - oRange.Column)
    If oRange.Locked And oRange.Offset(0, PERIOD_COL - oRange.Column).Locked Then
      ShowMessage 348, vbOKOnly + vbExclamation
      refAddr.SetFocus
      Exit Sub
    ElseIf optionType1.Value And oRange.Locked Then
      ShowMessage 338, vbOKOnly + vbExclamation
      optionType1.SetFocus
      Exit Sub
    ElseIf optionType2.Value And oRange.Offset(0, PERIOD_COL - oRange.Column).Locked Then
      ShowMessage 339, vbOKOnly + vbExclamation
      optionType2.SetFocus
      Exit Sub
    End If
  End If
  If Len(Trim(textName.Value)) = 0 Then
    ShowMessage 334, vbOKOnly + vbExclamation
    textName.SetFocus
    Exit Sub
  End If
  Me.Hide
End Sub

Private Sub buttonCancel_Click()
  refAddr.Value = vbNullString
  Me.Hide
End Sub

Private Sub refAddr_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If Len(refAddr.Value) = 0 Or Len(textName.Value) > 0 Then Exit Sub

  Dim oRange As Range
  On Error Resume Next
  Set oRange = Application.Range(Application.ConvertFormula(refAddr.Value, Application.ReferenceStyle, xlA1))
  If oRange Is Nothing Then Exit Sub
  Set oRange = oRange.Cells(1, 1).Offset(0, NAME_COL - oRange.Column)
  textName.Value = oRange.Text
  If oRange.Offset(0, PERIOD_COL - oRange.Column).Locked Then
    optionType1.Value = True
  ElseIf oRange.Offset(0, VALUE_COL - oRange.Column).Locked Then
    optionType2.Value = True
  End If
End Sub

Private Sub UserForm_Initialize()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(340)
  labelAddr.Caption = LoadString(343)
  labelName.Caption = LoadString(344)
  frameType.Caption = LoadString(345)
  optionType1.Caption = LoadString(346)
  optionType2.Caption = LoadString(347)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)

  optionType1.Value = True
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = vbFormControlMenu Then
    Cancel = 1
    refAddr.Value = vbNullString
    Me.Hide
  End If
End Sub
Attribute VB_Name = "Scen_Result"
Attribute VB_Base = "0{0C9CD90B-902B-4676-8C0E-7AA03DA9D0D8}{D75A6054-02F2-46CA-A125-DFD5BA89E0D6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  If optionItem.Value Then
    Dim i As Integer, nCount As Integer, nSelect As Integer
    nCount = listItem.ListCount
    nSelect = 0
    For i = 1 To nCount Step 1
      If listItem.Selected(i - 1) Then nSelect = nSelect + 1
    Next i
    If nSelect = 0 Then
      ShowMessage 333, vbOKOnly + vbExclamation
      listItem.SetFocus
      Exit Sub
    End If
  ElseIf optionOther.Value Then
    If Len(refAddr.Value) = 0 Then
      ShowMessage 331, vbOKOnly + vbExclamation
      refAddr.SetFocus
      Exit Sub
    End If

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim oRange As Range
    On Error Resume Next
    Set oRange = Application.Range(Application.ConvertFormula(refAddr.Value, Application.ReferenceStyle, xlA1))
    On Error GoTo 0
    If oRange Is Nothing Then
      ShowMessage 336, vbOKOnly + vbExclamation
      refAddr.SetFocus
      Exit Sub
    ElseIf oRange.Rows.Count > 1 Then
      ShowMessage 337, vbOKOnly + vbExclamation
      refAddr.SetFocus
      Exit Sub
    End If
    If Len(Trim(textName.Value)) = 0 Then
      ShowMessage 335, vbOKOnly + vbExclamation
      textName.SetFocus
      Exit Sub
    End If
  End If
  Me.Hide
End Sub

Private Sub buttonCancel_Click()
  listItem.Clear
  refAddr.Value = vbNullString
  Me.Hide
End Sub

Private Sub optionItem_Click()
  listItem.Enabled = True
  labelAddr.Enabled = False
  refAddr.Enabled = False
  labelName.Enabled = False
  textName.Enabled = False
End Sub

Private Sub optionOther_Click()
  listItem.Enabled = False
  labelAddr.Enabled = True
  refAddr.Enabled = True
  labelName.Enabled = True
  textName.Enabled = True
End Sub

Private Sub refAddr_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If Len(refAddr.Value) = 0 Or Len(textName.Value) > 0 Then Exit Sub

  Dim oRange As Range
  On Error Resume Next
  Set oRange = Application.Range(Application.ConvertFormula(refAddr.Value, Application.ReferenceStyle, xlA1))
  If oRange Is Nothing Then Exit Sub
  Set oRange = oRange.Cells(1, 1).Offset(0, NAME_COL - oRange.Column)
  textName.Value = oRange.Text
End Sub

Private Sub UserForm_Initialize()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(350)
  optionItem.Caption = LoadString(351)
  optionOther.Caption = LoadString(352)
  labelAddr.Caption = LoadString(353)
  labelName.Caption = LoadString(354)
  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)

  optionItem.Value = True
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = vbFormControlMenu Then
    Cancel = 1
    listItem.Clear
    refAddr.Value = vbNullString
    Me.Hide
  End If
End Sub
Attribute VB_Name = "Sens"
Attribute VB_Base = "0{638D9874-156D-4865-8E01-F2472696EB44}{CCFEFDFF-D387-4666-AB2E-73973511E3A1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'--------------------------------------------------------------------------------------------------

Option Explicit

Private Const ITEM_COUNT As Integer = 100
Private Const ITEM_LINE As Integer = 7
Private Const PARAM_COUNT As Integer = 32
Private Const RESULT_COUNT As Integer = 32

Private oOptions As Worksheet
Private oMain As Worksheet
Private oSheet As Worksheet
Private nTableRow As Long

Private Type DefaultData
  sTitle As String
  sFormula As String
  sAddr As String
  nType As Integer
End Type

Private Type CalcData
  sFormula As String
  vValue As Variant
End Type

Private nParamCount As Integer
Private arrParam(1 To PARAM_COUNT) As DefaultData

Private nResultCount As Integer
Private arrResult(1 To RESULT_COUNT) As DefaultData

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Sub Recalc()
  If nTableRow <= 0 Then Exit Sub
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 187, vbOKOnly + vbCritical
    Exit Sub
  End If

  Dim r As Long, i As Integer, j As Integer, k As Integer, nCount As Integer, nRow As Integer, sBuffer As String
  sBuffer = oSheet.Cells(nTableRow, FLAG_COL).Value
  nCount = Val(GetValue(sBuffer, "Count"))
  nRow = 4 + ITEM_LINE
  If nCount <= 0 Then Exit Sub

  Dim nLen As Integer, nParamType As Integer, nResultType As Integer
  Dim oParam As Range, oResult As Range, oRange As Range
  TransformInit
  nLen = oMain.Range("Prj_Len").Value
  r = nTableRow + 2
  For i = 1 To nCount Step 1
    Application.StatusBar = LoadStringParam(359, oSheet.Cells(r, NAME_COL).Text & " - " & oSheet.Cells(r + 3, NAME_COL).Text)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    sBuffer = oSheet.Cells(r, FLAG_COL).Value
    nParamType = Val(GetValue(sBuffer, "Type"))
    With oSheet.Cells(r, ID_COL)
      sBuffer = Mid(.Formula, IIf(.HasFormula, 2, 1))
    End With
    If nParamType = 0 Then
      On Error Resume Next
      Set oParam = Application.Range(sBuffer)
      On Error GoTo 0
    ElseIf nParamType <= 2 Then
      On Error Resume Next
      Set oParam = Application.Range(sBuffer).Cells(1, 1)
      On Error GoTo 0
      If Not oParam Is Nothing Then
        If nParamType = 1 Then
          Set oParam = oParam.Offset(0, VALUE_COL - oParam.Column)
        Else
          Set oParam = oParam.Offset(0, PERIOD_COL - oParam.Column)
          Set oParam = Application.Range(oParam, oParam.Offset(0, nLen - 1))
        End If
      End If
    Else
      Dim nBegRow As Long, nEndRow As Long, nDataRow As Long, nNextRow As Long, sData As String, oData As Worksheet
      Set oData = ThisWorkbook.Sheets(oOptions.Range("Opt_DataSheet").Value)
      nBegRow = 1
      nEndRow = oData.UsedRange.Rows.Count
      j = InStr(1, sBuffer, ".")
      If j > 0 Then
        sData = Mid(sBuffer, 1, j - 1)
        sBuffer = Mid(sBuffer, j + 1)
        nBegRow = GetRowByID(oData, "TABLE::" & sData, nBegRow, nEndRow)
        nEndRow = GetRowByID(oData, "END::" & sData, nBegRow + 1, nEndRow)
        If nBegRow > 0 And nEndRow > 0 Then
'          nBegRow = GetRowByID(oData, "DATA", nBegRow + 1, nEndRow)
'          nEndRow = GetRowByID(oData, "TOTAL", nBegRow + 1, nEndRow)
          j = InStr(1, sBuffer, ".")
          If j > 0 Then
            sData = Mid(sBuffer, 1, j - 1)
            sBuffer = Mid(sBuffer, j + 1)
            nDataRow = nBegRow
            nBegRow = 0
            Do While nDataRow > 0
              nNextRow = GetRowByID(oData, "DATA", nDataRow + 1, nEndRow)
              If oData.Cells(nDataRow, ID_COL).Text = sData Then
                nBegRow = nDataRow
                If nNextRow > 0 Then nEndRow = nNextRow
                Exit Do
              End If
              nDataRow = nNextRow
            Loop
          End If
        End If
      End If
      If nBegRow > 0 And nEndRow > 0 Then
        sData = sBuffer
        For nDataRow = nBegRow To nEndRow Step 1
          sBuffer = oData.Cells(nDataRow, FLAG_COL).Value
          If InStr(1, GetValue(sBuffer, "Sens"), sData, vbTextCompare) > 0 Then
            If nParamType = 3 Then
              Set oRange = oData.Cells(nDataRow, VALUE_COL)
            Else
              Set oRange = oData.Range(oData.Cells(nDataRow, PERIOD_COL), oData.Cells(nDataRow, PERIOD_COL + nLen - 1))
            End If
            If oParam Is Nothing Then
              Set oParam = oRange
            Else
              Set oParam = Application.Union(oParam, oRange)
            End If
          End If
        Next nDataRow
      End If
      Set oData = Nothing
    End If
    If oParam Is Nothing Then ShowMessageParam IIf(nParamType <= 2, 356, 358), vbOKOnly + vbExclamation, oSheet.Cells(r, NAME_COL).Text

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    sBuffer = oSheet.Cells(r + 3, FLAG_COL).Value
    nResultType = Val(GetValue(sBuffer, "Type"))
    With oSheet.Cells(r + 3, ID_COL)
      sBuffer = Mid(.Formula, IIf(.HasFormula, 2, 1))
    End With
    On Error Resume Next
    Set oResult = Application.Range(sBuffer).Cells(1, 1)
    On Error GoTo 0
    If oResult Is Nothing Then
      ShowMessageParam 357, vbOKOnly + vbExclamation, oSheet.Cells(r + 3, NAME_COL).Text
    ElseIf nResultType = 1 Then
      Set oResult = oResult.Offset(0, VALUE_COL - oResult.Column)
    ElseIf nResultType = 2 Then
      Set oResult = oResult.Offset(0, PERIOD_COL - oResult.Column)
      Set oResult = Application.Range(oResult, oResult.Offset(0, nLen - 1))
    End If

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    oSheet.Range(oSheet.Cells(r + 4, NAME_COL), oSheet.Cells(r + nRow - 1, NAME_COL)).ClearContents
    oSheet.Range(oSheet.Cells(r + 4, PERIOD_COL), oSheet.Cells(r + nRow - 1, PERIOD_COL + nLen - 1)).ClearContents
    If Not oParam Is Nothing And Not oResult Is Nothing Then
      Dim arrData() As CalcData, bPercent As Boolean, dValue As Double
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      ReDim arrData(1 To oParam.Cells.Count)
      j = 1
      For Each oRange In oParam.Cells
        arrData(j).sFormula = oRange.FormulaR1C1
        If Not IsEmpty(oRange.Value) And IsNumeric(oRange.Value) Then
          arrData(j).vValue = oRange.Value
        Else
          arrData(j).vValue = Null
        End If
        j = j + 1
      Next oRange

      bPercent = InStr(1, oParam.Cells(1).NumberFormat, "%") > 0
      dValue = oSheet.Cells(r + 1, VALUE_COL).Value
      For k = 1 To ITEM_LINE Step 1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        j = 1
        For Each oRange In oParam.Cells
          If Not IsNull(arrData(j).vValue) Then
            If bPercent Then
              oRange.Value = dValue
            Else
              oRange.Value = arrData(j).vValue * dValue
            End If
          End If
          j = j + 1
        Next oRange
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Application.Calculate
        If nResultType < 2 Then
          oSheet.Cells(r + 3 + k, NAME_COL).Value = oResult.Value
        ElseIf nResultType = 2 Then
          oSheet.Range(oSheet.Cells(r + 3 + k, PERIOD_COL), oSheet.Cells(r + 3 + k, PERIOD_COL + nLen - 1)).Value = oResult.Value
        End If
        dValue = dValue + oSheet.Cells(r + 2, VALUE_COL).Value
      Next k

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      j = 1
      For Each oRange In oParam.Cells
        oRange.FormulaR1C1 = arrData(j).sFormula
        j = j + 1
      Next oRange
      Application.Calculate
    End If

    Set oParam = Nothing
    Set oResult = Nothing
    r = r + nRow + 1
  Next i
  oSheet.Range("Chk_Sens").Value = oSheet.Range("Chk_Result").Value
  TransformDone
End Sub

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Private Sub LoadDefaults()
  If nParamCount > 0 Or nResultCount > 0 Then Exit Sub

  Dim r As Long
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  r = oOptions.Range("Opt_Params").Row + 1
  Do While Not IsEmpty(oOptions.Cells(r, 1).Value)
    nParamCount = nParamCount + 1
    With oOptions.Cells(r, 1)
      arrParam(nParamCount).sTitle = .Text
      arrParam(nParamCount).sFormula = .FormulaR1C1
    End With
    With oOptions.Cells(r, 2)
      arrParam(nParamCount).sAddr = Mid(.Formula, IIf(.HasFormula, 2, 1))
    End With
    arrParam(nParamCount).nType = oOptions.Cells(r, 3).Value
    If nParamCount = PARAM_COUNT Then Exit Do
    r = r + 1
  Loop
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  r = oOptions.Range("Opt_Results").Row + 1
  Do While Not IsEmpty(oOptions.Cells(r, 1).Value)
    nResultCount = nResultCount + 1
    With oOptions.Cells(r, 1)
      arrResult(nResultCount).sTitle = .Text
      arrResult(nResultCount).sFormula = .FormulaR1C1
    End With
    With oOptions.Cells(r, 2)
      arrResult(nResultCount).sAddr = Mid(.Formula, IIf(.HasFormula, 2, 1))
    End With
    arrResult(nResultCount).nType = oOptions.Cells(r, 3).Value
    If nResultCount = RESULT_COUNT Then Exit Do
    r = r + 1
  Loop
End Sub

Private Sub buttonClose_Click()
  Unload Me
End Sub

Private Sub buttonInsert_Click()
  If nTableRow <= 0 Then Exit Sub
  If listItem.ListCount >= ITEM_COUNT Then
    ShowMessage 237, vbOKOnly + vbExclamation
    Exit Sub
  End If

  Dim x As Integer, i As Integer, nLen As Integer, oRange As Range
  Dim nParam As Integer, sParamAddr As String, sParamName As String, nParamType As Integer
  Dim nResult As Integer, sResultAddr As String, sResultName As String, nResultType As Integer
  nLen = oMain.Range("Prj_Len").Value
  x = Me.Left
  Me.Left = -1000
  LoadDefaults
  Load Sens_Item
  For i = 1 To nParamCount Step 1
    Sens_Item.listParam.AddItem arrParam(i).sTitle
  Next i
  For i = 1 To nResultCount Step 1
    Sens_Item.listResult.AddItem arrResult(i).sTitle
  Next i
  nParam = -1
  nResult = -1
  Do While nParam < 0 Or nResult < 0
    Sens_Item.Show vbModal
    oSheet.Activate
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Sens_Item.optionParam.Value Then
      nParam = Sens_Item.listParam.ListIndex
      If nParam < 0 Then Exit Do
      nParam = nParam + 1
      sParamAddr = arrParam(nParam).sAddr
      sParamName = arrParam(nParam).sTitle
      nParamType = arrParam(nParam).nType
    Else
      nParam = -1
      sParamAddr = Sens_Item.refParam.Value
      sParamName = Sens_Item.textParam.Value
      If Len(sParamAddr) = 0 Then Exit Do

      On Error Resume Next
      sParamAddr = Application.ConvertFormula(sParamAddr, Application.ReferenceStyle, xlA1)
      Set oRange = Application.Range(sParamAddr)
      On Error GoTo 0
      If oRange Is Nothing Then
        ShowMessage 336, vbOKOnly + vbExclamation
      ElseIf Sens_Item.optionParam1.Value Then
        nParam = 0
        nParamType = 1
      ElseIf Sens_Item.optionParam2.Value Then
        nParam = 0
        nParamType = 2
      End If
      Set oRange = Nothing
    End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Sens_Item.optionResult.Value Then
      nResult = Sens_Item.listResult.ListIndex
      If nResult < 0 Then Exit Do
      nResult = nResult + 1
      sResultAddr = arrResult(nResult).sAddr
      sResultName = arrResult(nResult).sTitle
      nResultType = arrResult(nResult).nType
    Else
      nResult = -1
      sResultAddr = Sens_Item.refResult.Value
      sResultName = Sens_Item.textResult.Value
      If Len(sResultAddr) = 0 Then Exit Do

      On Error Resume Next
      sResultAddr = Application.ConvertFormula(sResultAddr, Application.ReferenceStyle, xlA1)
      Set oRange = Application.Range(sResultAddr)
      On Error GoTo 0
      If oRange Is Nothing Then
        ShowMessage 336, vbOKOnly + vbExclamation
      ElseIf Sens_Item.optionResult1.Value Then
        nResult = 0
        nResultType = 1
      ElseIf Sens_Item.optionResult2.Value Then
        nResult = 0
        nResultType = 2
      End If
      Set oRange = Nothing
    End If
  Loop
  Unload Sens_Item
  Me.Left = x
  If nParam < 0 Or nResult < 0 Then Exit Sub
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 187, vbOKOnly + vbCritical
    Exit Sub
  End If

  Dim r As Long, nCount As Integer, nIndex As Integer, nRow As Integer, sBuffer As String, rgbEdit As Long, oChart As ChartObject
  TransformInit
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nCount = listItem.ListCount
  For i = 1 To nCount Step 1
    If listItem.Selected(i - 1) Then listItem.Selected(i - 1) = False
  Next i
  nIndex = listItem.ListIndex
  If nIndex < 0 Then nIndex = nCount
  r = oOptions.Range("Opt_Colors").Row
  rgbEdit = oOptions.Cells(r, 4).Interior.Color
  nRow = 4 + ITEM_LINE
  If nCount > 0 Then
    r = nTableRow + 2 + (nRow + 1) * nCount - 1
    oSheet.Rows(r).Insert
    oSheet.Rows(r).ClearFormats
  End If
  r = nTableRow + 2 + (nRow + 1) * nIndex
  oSheet.Rows(r & ":" & r + nRow).Insert
  oSheet.Rows(r & ":" & r + nRow).ClearFormats
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If nParamType <= 2 Then
    On Error Resume Next
    Set oRange = Application.Range(sParamAddr).Cells(1, 1)
    On Error GoTo 0
    If nParamType > 0 And Not oRange Is Nothing Then
      Set oRange = oRange.Offset(0, ID_COL - oRange.Column)
      oSheet.Cells(r, ID_COL).FormulaR1C1 = "=" & oRange.Address(True, True, xlR1C1, True)
    Else
      oSheet.Cells(r, ID_COL).Value = sParamAddr
    End If
  Else
    oSheet.Cells(r, ID_COL).Value = sParamAddr
  End If
  With oSheet.Cells(r, NAME_COL)
    If nParam > 0 Then
      .FormulaR1C1 = arrParam(nParam).sFormula
    Else
      .Value = sParamName
    End If
    .Locked = False
    .Interior.Color = rgbEdit
    .Font.Bold = True
  End With
  oSheet.Cells(r, FLAG_COL).Value = "Type=" & nParamType
  oSheet.Cells(r + 1, NAME_COL).FormulaR1C1 = "='" & LANGUAGE_SHEET & "'!R327C1"
  With oSheet.Cells(r + 1, VALUE_COL)
    .NumberFormat = "0%"
    .HorizontalAlignment = xlRight
    .Value = 0.85
    .Locked = False
    .Interior.Color = rgbEdit
  End With
  oSheet.Cells(r + 2, NAME_COL).FormulaR1C1 = "='" & LANGUAGE_SHEET & "'!R328C1"
  With oSheet.Cells(r + 2, VALUE_COL)
    .NumberFormat = "0%"
    .HorizontalAlignment = xlRight
    .Value = 0.05
    .Locked = False
    .Interior.Color = rgbEdit
  End With
  If Not oRange Is Nothing Then
    If nParamType = 1 Then
      Set oRange = oRange.Offset(0, VALUE_COL - oRange.Column)
    ElseIf nParamType = 2 Then
      Set oRange = oRange.Offset(0, PERIOD_COL - oRange.Column)
    End If
    If InStr(1, oRange.NumberFormat, "%") > 0 Then
      oSheet.Cells(r + 1, VALUE_COL).Value = 0
      oSheet.Cells(r + 2, VALUE_COL).Value = 0.02
    End If
    Set oRange = Nothing
  End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  On Error Resume Next
  Set oRange = Application.Range(sResultAddr).Cells(1, 1)
  On Error GoTo 0
  If nResultType > 0 And Not oRange Is Nothing Then
    Set oRange = oRange.Offset(0, ID_COL - oRange.Column)
    oSheet.Cells(r + 3, ID_COL).FormulaR1C1 = "=" & oRange.Address(True, True, xlR1C1, True)
  Else
    oSheet.Cells(r + 3, ID_COL).Value = sResultAddr
  End If
  With oSheet.Cells(r + 3, NAME_COL)
    If nResult > 0 Then
      .FormulaR1C1 = arrResult(nResult).sFormula
    Else
      .Value = sResultName
    End If
    .Locked = False
    .Interior.Color = rgbEdit
    .Font.Bold = True
  End With
  With oSheet.Cells(r + 3, VALUE_COL)
    .HorizontalAlignment = xlCenter
    .FormulaR1C1 = "='" & LANGUAGE_SHEET & "'!R329C1"
  End With
  oSheet.Cells(r + 3, FLAG_COL).Value = "Type=" & nResultType
  With oSheet.Range(oSheet.Cells(r + 4, VALUE_COL), oSheet.Cells(r + nRow - 1, VALUE_COL))
    .NumberFormat = "0%"
    .HorizontalAlignment = xlRight
    .FormulaR1C1 = "=R[-1]C+R" & r + 2 & "C"
  End With
  oSheet.Cells(r + 4, VALUE_COL).FormulaR1C1 = "=R" & r + 1 & "C"
  If Not oRange Is Nothing Then
    If nResultType < 2 Then
      If nResultType = 1 Then Set oRange = oRange.Offset(0, VALUE_COL - oRange.Column)
      With oSheet.Range(oSheet.Cells(r + 4, NAME_COL), oSheet.Cells(r + nRow - 1, NAME_COL))
        .NumberFormat = oRange.NumberFormat
        .HorizontalAlignment = xlRight
      End With
    ElseIf nResultType = 2 Then
      Set oRange = oRange.Offset(0, FLAG_COL - oRange.Column)
      sBuffer = GetValue(oRange.Value, "Mode")
      If Len(sBuffer) > 0 Then oSheet.Range(oSheet.Cells(r + 4, FLAG_COL), oSheet.Cells(r + nRow - 1, FLAG_COL)).Value = "Mode=" & sBuffer
      Set oRange = oRange.Offset(0, PERIOD_COL - oRange.Column)
      With oSheet.Range(oSheet.Cells(r + 4, PERIOD_COL), oSheet.Cells(r + nRow - 1, PERIOD_COL + nLen - 1))
        .NumberFormat = oRange.NumberFormat
        .HorizontalAlignment = oRange.HorizontalAlignment
      End With
    End If
    Set oRange = oRange.Offset(0, UNIT_COL - oRange.Column)
    With oSheet.Range(oSheet.Cells(r + 4, UNIT_COL), oSheet.Cells(r + nRow - 1, UNIT_COL))
      .NumberFormat = oRange.NumberFormat
      .HorizontalAlignment = oRange.HorizontalAlignment
      If Not IsEmpty(oRange.Value) Then .FormulaR1C1 = "=" & oRange.Address(True, True, xlR1C1, True)
    End With
    Set oRange = Nothing
  End If

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If nResultType < 2 Then
    Dim bProtect As Boolean, sPass As String
    bProtect = oMain.Range("Prj_Protect").Value
    sPass = oOptions.Range("Opt_SPInfo").Value
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If bProtect Then oSheet.Protect sPass, False, False, False

    Set oRange = oSheet.Range(oSheet.Cells(r, PERIOD_COL), oSheet.Cells(r + nRow - 1, PERIOD_COL + 4))
    Set oChart = oSheet.ChartObjects.Add(oRange.Left, oRange.Top, oRange.Width, oRange.Height)
    oChart.Locked = False
    With oChart.Chart
      .ChartType = xlLine
      .HasTitle = False
      .HasLegend = False
      .Axes(xlCategory).AxisBetweenCategories = False
      .SeriesCollection.NewSeries
    End With
    With oChart.Chart.SeriesCollection(1)
      .Values = oSheet.Range(oSheet.Cells(r + 4, NAME_COL), oSheet.Cells(r + nRow - 1, NAME_COL))
      .XValues = oSheet.Range(oSheet.Cells(r + 4, VALUE_COL), oSheet.Cells(r + nRow - 1, VALUE_COL))
    End With
    Set oChart = Nothing
    Set oRange = Nothing

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If bProtect Then oSheet.Protect sPass, True, True, True, True, True
  End If

  nCount = nCount + 1
  oSheet.Rows(nTableRow + 2 + (nRow + 1) * nCount - 1).Delete
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  listItem.AddItem sParamName, nIndex
  listItem.List(nIndex, 1) = sResultName
  listItem.Selected(nIndex) = True
  listItem.ListIndex = -1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sBuffer = oSheet.Cells(nTableRow, FLAG_COL).Value
  sBuffer = SetValue(sBuffer, "Count", nCount)
  oSheet.Cells(nTableRow, FLAG_COL).Value = sBuffer
  oSheet.Range("Chk_Sens").Value = -1
  Application.GoTo oSheet.Cells(nTableRow, NAME_COL), False
  TransformDone
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Recalc
End Sub

Private Sub buttonDelete_Click()
  If nTableRow <= 0 Then Exit Sub
  
  Dim r As Long, i As Integer, nCount As Integer, nRow As Integer, sBuffer As String
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  nCount = listItem.ListCount
  If nCount = 0 Then
    ShowMessage 238, vbOKOnly + vbExclamation
    Exit Sub
  End If
  nRow = 0
  For i = 1 To nCount Step 1
    If listItem.Selected(i - 1) Then nRow = nRow + 1
  Next i
  If nRow = 0 Then
    ShowMessage 240, vbOKOnly + vbExclamation
    Exit Sub
  End If
  If ShowMessage(241, vbYesNo + vbQuestion) = vbNo Then Exit Sub
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If oOptions.Range("Opt_IsDemo").Value Then
    ShowMessage 187, vbOKOnly + vbCritical
    Exit Sub
  End If

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  TransformInit
  nRow = 4 + ITEM_LINE
  If nCount > 0 Then
    r = nTableRow + 2 + (nRow + 1) * nCount - 1
    oSheet.Rows(r).Insert
    oSheet.Rows(r).ClearFormats
  End If
  r = nTableRow + 2
  i = 1
  Do While i <= nCount
    If listItem.Selected(i - 1) Then
      oSheet.Rows(r & ":" & r + nRow).Delete
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      listItem.RemoveItem i - 1
      nCount = nCount - 1
      Me.Repaint
    Else
      i = i + 1
      r = r + nRow + 1
    End If
  Loop
  If nCount > 0 Then oSheet.Rows(r - 1).Delete
  listItem.ListIndex = -1
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sBuffer = oSheet.Cells(nTableRow, FLAG_COL).Value
  sBuffer = SetValue(sBuffer, "Count", nCount)
  oSheet.Cells(nTableRow, FLAG_COL).Value = sBuffer
  If nCount = 0 Then oSheet.Range("Chk_Sens").ClearContents
  Application.GoTo oSheet.Cells(nTableRow, NAME_COL), False
  TransformDone
End Sub

Private Sub listItem_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  Select Case KeyCode
  Case vbKeyInsert
    buttonInsert_Click
  Case vbKeyDelete
    buttonDelete_Click
  End Select
End Sub

Private Sub UserForm_Initialize()
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)
  Set oSheet = ActiveSheet

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(320)
  labelParam.Caption = LoadString(321)
  labelResult.Caption = LoadString(322)
  buttonInsert.Caption = LoadString(233)
  buttonDelete.Caption = LoadString(236)
  buttonClose.Caption = LoadString(118)

  Dim r As Long, i As Integer, nCount As Integer, nRow As Integer, sBuffer As String
  nTableRow = GetRowByID(oSheet, "TABLE::SENS")
  If nTableRow <= 0 Then
    MsgBox "Table not found.", vbOKOnly + vbCritical, PRODUCT_NAME
    Exit Sub
  End If
  sBuffer = oSheet.Cells(nTableRow, FLAG_COL).Value
  nCount = Val(GetValue(sBuffer, "Count"))
  nRow = 4 + ITEM_LINE
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  r = nTableRow + 2
  For i = 1 To nCount Step 1
    listItem.AddItem oSheet.Cells(r, NAME_COL).Text
    listItem.List(i - 1, 1) = oSheet.Cells(r + 3, NAME_COL).Text
    r = r + nRow + 1
  Next i
  listItem.ListIndex = -1
End Sub
Attribute VB_Name = "Sens_Item"
Attribute VB_Base = "0{0F651DA9-04AA-4BA8-BB00-2A1F1C7160FF}{17AC0CDC-56F0-48B8-9B1A-79D4EAE0A21E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

Private Sub buttonOK_Click()
  Dim oRange As Range
  If optionParam.Value Then
    If listParam.ListIndex < 0 Then
      ShowMessage 330, vbOKOnly + vbExclamation
      listParam.SetFocus
      Exit Sub
    End If
  Else
    If Len(refParam.Value) = 0 Then
      ShowMessage 330, vbOKOnly + vbExclamation
      refParam.SetFocus
      Exit Sub
    End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Set oRange = Application.Range(Application.ConvertFormula(refParam.Value, Application.ReferenceStyle, xlA1))
    On Error GoTo 0
    If oRange Is Nothing Then
      ShowMessage 336, vbOKOnly + vbExclamation
      refParam.SetFocus
      Exit Sub
    ElseIf oRange.Rows.Count > 1 Then
      ShowMessage 337, vbOKOnly + vbExclamation
      refParam.SetFocus
      Exit Sub
    Else
      Set oRange = oRange.Cells(1, 1).Offset(0, VALUE_COL - oRange.Column)
      If oRange.Locked And oRange.Offset(0, PERIOD_COL - oRange.Column).Locked Then
        ShowMessage 348, vbOKOnly + vbExclamation
        refParam.SetFocus
        Exit Sub
      ElseIf optionParam1.Value And oRange.Locked Then
        ShowMessage 338, vbOKOnly + vbExclamation
        optionParam1.SetFocus
        Exit Sub
      ElseIf optionParam2.Value And oRange.Offset(0, PERIOD_COL - oRange.Column).Locked Then
        ShowMessage 339, vbOKOnly + vbExclamation
        optionParam2.SetFocus
        Exit Sub
      End If
      Set oRange = Nothing
    End If
    If Len(Trim(textParam.Value)) = 0 Then
      ShowMessage 334, vbOKOnly + vbExclamation
      textParam.SetFocus
      Exit Sub
    End If
  End If
  If optionResult.Value Then
    If listResult.ListIndex < 0 Then
      ShowMessage 331, vbOKOnly + vbExclamation
      listResult.SetFocus
      Exit Sub
    End If
  Else
    If Len(refResult.Value) = 0 Then
      ShowMessage 331, vbOKOnly + vbExclamation
      refResult.SetFocus
      Exit Sub
    End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Set oRange = Application.Range(Application.ConvertFormula(refResult.Value, Application.ReferenceStyle, xlA1))
    On Error GoTo 0
    If oRange Is Nothing Then
      ShowMessage 336, vbOKOnly + vbExclamation
      refResult.SetFocus
      Exit Sub
    ElseIf oRange.Rows.Count > 1 Then
      ShowMessage 337, vbOKOnly + vbExclamation
      refResult.SetFocus
      Exit Sub
    End If
    If Len(Trim(textResult.Value)) = 0 Then
      ShowMessage 335, vbOKOnly + vbExclamation
      textResult.SetFocus
      Exit Sub
    End If
  End If
  Me.Hide
End Sub

Private Sub buttonCancel_Click()
  listParam.ListIndex = -1
  refParam.Value = vbNullString
  listResult.ListIndex = -1
  refResult.Value = vbNullString
  Me.Hide
End Sub

Private Sub optionParam_Click()
  listParam.Enabled = True
  labelParamAddr.Enabled = False
  refParam.Enabled = False
  labelParam.Enabled = False
  textParam.Enabled = False
  frameParamType.Enabled = False
  optionParam1.Enabled = False
  optionParam2.Enabled = False
End Sub

Private Sub optionParamOther_Click()
  listParam.Enabled = False
  labelParamAddr.Enabled = True
  refParam.Enabled = True
  labelParam.Enabled = True
  textParam.Enabled = True
  frameParamType.Enabled = True
  optionParam1.Enabled = True
  optionParam2.Enabled = True
End Sub

Private Sub refParam_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If Len(refParam.Value) = 0 Or Len(textParam.Value) > 0 Then Exit Sub

  Dim oRange As Range
  On Error Resume Next
  Set oRange = Application.Range(Application.ConvertFormula(refParam.Value, Application.ReferenceStyle, xlA1))
  If oRange Is Nothing Then Exit Sub
  Set oRange = oRange.Cells(1, 1).Offset(0, NAME_COL - oRange.Column)
  textParam.Value = oRange.Text
  If oRange.Offset(0, PERIOD_COL - oRange.Column).Locked Then
    optionParam1.Value = True
  ElseIf oRange.Offset(0, VALUE_COL - oRange.Column).Locked Then
    optionParam2.Value = True
  End If
End Sub

Private Sub optionResult_Click()
  listResult.Enabled = True
  labelResultAddr.Enabled = False
  refResult.Enabled = False
  labelResult.Enabled = False
  textResult.Enabled = False
  frameResultType.Enabled = False
  optionResult1.Enabled = False
  optionResult2.Enabled = False
End Sub

Private Sub optionResultOther_Click()
  listResult.Enabled = False
  labelResultAddr.Enabled = True
  refResult.Enabled = True
  labelResult.Enabled = True
  textResult.Enabled = True
  frameResultType.Enabled = True
  optionResult1.Enabled = True
  optionResult2.Enabled = True
End Sub

Private Sub refResult_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If Len(refResult.Value) = 0 Or Len(textResult.Value) > 0 Then Exit Sub

  Dim oRange As Range
  On Error Resume Next
  Set oRange = Application.Range(Application.ConvertFormula(refResult.Value, Application.ReferenceStyle, xlA1))
  If oRange Is Nothing Then Exit Sub
  Set oRange = oRange.Cells(1, 1).Offset(0, NAME_COL - oRange.Column)
  textResult.Value = oRange.Text
End Sub

Private Sub UserForm_Initialize()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  SetupForm Me
  Me.Caption = LoadString(349)
  frameParam.Caption = LoadString(321)
  optionParam.Caption = LoadString(341)
  optionParamOther.Caption = LoadString(342)
  labelParamAddr.Caption = LoadString(343)
  labelParam.Caption = LoadString(344)
  frameParamType.Caption = LoadString(345)
  optionParam1.Caption = LoadString(346)
  optionParam2.Caption = LoadString(347)

  frameResult.Caption = LoadString(322)
  optionResult.Caption = LoadString(351)
  optionResultOther.Caption = LoadString(352)
  labelResultAddr.Caption = LoadString(353)
  labelResult.Caption = LoadString(354)
  frameResultType.Caption = LoadString(355)
  optionResult1.Caption = LoadString(346)
  optionResult2.Caption = LoadString(347)

  buttonOK.Caption = LoadString(119)
  buttonCancel.Caption = LoadString(120)

  optionParam.Value = True
  optionParam1.Value = True
  optionResult.Value = True
  optionResult1.Value = True
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = vbFormControlMenu Then
    Cancel = 1
    listParam.ListIndex = -1
    refParam.Value = vbNullString
    listResult.ListIndex = -1
    refResult.Value = vbNullString
    Me.Hide
  End If
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
  Dim oSens As Range, oScen As Range, oResult As Range, oCell As Range
  Set oSens = Range("Chk_Sens")
  Set oScen = Range("Chk_Scen")
  Set oResult = Range("Chk_Result")
  For Each oCell In Target.Cells
    If Not oCell.Locked And oCell.Column >= VALUE_COL Then
      If Not IsEmpty(oSens.Value) And oCell.Row > oSens.Row And oCell.Row < oScen.Row Then oSens.Value = -1
      If Not IsEmpty(oScen.Value) And oCell.Row > oScen.Row And oCell.Row < oResult.Row Then oScen.Value = -1
      Exit For
    End If
  Next oCell
End Sub
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Util"
'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| 8.x
' Copyright (c) 1993-2018, |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' http://www.alt-invest.ru
'
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'------------------------------------------------------------------------------

Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const PRODUCT_NAME     As String = "Alt-Invest 8"
Public Const PRODUCT_PROG     As Integer = 80

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const OPTIONS_SHEET    As String = "Options"
Public Const LANGUAGE_SHEET   As String = "Language"

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const NAME_COL         As Integer = 1
Public Const VALUE_COL        As Integer = 2
Public Const UNIT_COL         As Integer = 3
Public Const CUR_COL          As Integer = 4
Public Const ID_COL           As Integer = 5
Public Const FLAG_COL         As Integer = 6
Public Const PERIOD_COL       As Integer = 7

Private g_nTransform As Integer
Private g_bStatusBar As Boolean

Public Function TransformInit() As Integer
  If g_nTransform = 0 Then
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.CutCopyMode = False
    g_bStatusBar = Application.DisplayStatusBar
    Application.DisplayStatusBar = True
    Application.Calculation = xlCalculationManual
  End If
  g_nTransform = g_nTransform + 1
  TransformInit = g_nTransform
End Function

Public Function TransformDone() As Integer
  If g_nTransform > 0 Then
    g_nTransform = g_nTransform - 1
    If g_nTransform = 0 Then
      Application.Calculate
      Application.Calculation = xlCalculationAutomatic
      Application.StatusBar = False
      Application.DisplayStatusBar = g_bStatusBar
      Application.CutCopyMode = False
      Application.EnableEvents = True
      Application.ScreenUpdating = True
    End If
  End If
  TransformDone = g_nTransform
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Function GetComputerID() As Long
  Static nComputerID As Long
  If nComputerID = 0 Then
    nComputerID = -1
#If Mac Then
    Dim i As Integer, sBuffer As String
    On Error Resume Next
    sBuffer = MacScript("do shell script ""system_profiler SPHardwareDataType""")
    i = InStr(1, sBuffer, "Hardware UUID:", vbTextCompare)
    If i > 0 Then
      sBuffer = Replace(Mid(sBuffer, i + 15), "-", vbNullString)
      nComputerID = 0
      For i = 0 To 3 Step 1
        nComputerID = nComputerID Xor Val("&H" & Mid(sBuffer, i * 8 + 1, 8))
      Next i
      nComputerID = Abs(nComputerID)
    End If
#Else
    Dim fso As Object
    On Error Resume Next
    Set fso = CreateObject("Scripting.FileSystemObject")
    If Not fso Is Nothing Then
      nComputerID = Abs(fso.GetSpecialFolder(0).Drive.SerialNumber)
      Set fso = Nothing
    End If
#End If
  End If
  GetComputerID = nComputerID
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Function GetRegValue(ByVal sName As String, Optional ByVal sValue As String) As String
#If Mac Then
  On Error Resume Next
  sValue = GetSetting("Alt-Invest", PRODUCT_NAME, sName, sValue)
  If sName = "Path" And Len(sValue) > 0 Then
    Dim i As Integer
    i = InStr(1, Application.Path, Application.PathSeparator, vbTextCompare)
    If i > 1 Then sValue = Mid(Application.Path, 1, i - 1) & sValue
    sValue = Replace(sValue, "/", Application.PathSeparator)
  End If
#Else
  Dim oShell As Object, sKey As String
  On Error Resume Next
  Set oShell = CreateObject("WScript.Shell")
  If Not oShell Is Nothing Then
#If Win64 Then
    sKey = "HKLM\Software\Wow6432Node\Alt-Invest\"
#Else
    sKey = "HKLM\Software\Alt-Invest\"
#End If
    sValue = oShell.RegRead(sKey & PRODUCT_NAME & "\" & sName)
    Set oShell = Nothing
  End If
#End If
  GetRegValue = sValue
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Function GetValue(ByVal sText As String, ByVal sKey As String, Optional ByVal sValue As String) As String
  Dim nBeg As Integer, nEnd As Integer
  sKey = sKey & "="
  nBeg = InStr(1, sText, sKey, vbTextCompare)
  If nBeg > 0 Then
    nBeg = nBeg + Len(sKey)
    nEnd = InStr(nBeg, sText, ";")
    If nEnd > 0 Then
      GetValue = Mid(sText, nBeg, nEnd - nBeg)
    Else
      GetValue = Mid(sText, nBeg)
    End If
    Exit Function
  End If
  GetValue = sValue
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Function SetValue(ByVal sText As String, ByVal sKey As String, Optional ByVal sValue As String) As String
  Dim nPos As Integer, sBuffer As String
  sKey = sKey & "="
  nPos = InStr(1, sText, sKey, vbTextCompare)
  If nPos > 0 Then
    sBuffer = Mid(sText, 1, nPos - 1)
    nPos = InStr(nPos, sText, ";")
    If nPos > 0 Then nPos = nPos + 1
  Else
    nPos = 1
  End If
  If Len(sValue) > 0 Then sBuffer = sBuffer & sKey & sValue & ";"
  If nPos > 0 Then sBuffer = sBuffer & Mid(sText, nPos)
  SetValue = sBuffer
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Function GetUniqueID() As Long
  Dim nID As Long
  With ThisWorkbook.Sheets(OPTIONS_SHEET).Range("Opt_UniqueID")
    nID = .Value + 1
    .Value = nID
  End With
  GetUniqueID = nID
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Function GetRowByID(ByRef oSheet As Worksheet, ByVal sFind As String, Optional ByVal nFrom As Long = 0, Optional ByVal nTill As Long = 0) As Long
  Dim r As Long
  If Len(sFind) = 0 Then Exit Function
  If nFrom <= 0 Then nFrom = 1
  If nTill <= 0 Then nTill = oSheet.UsedRange.Rows.Count
  For r = nFrom To nTill Step 1
    If InStr(1, oSheet.Cells(r, ID_COL).Text, sFind, vbTextCompare) = 1 Then
      GetRowByID = r
      Exit Function
    End If
  Next r
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Sub InitRowByID(ByRef oSheet As Worksheet, ByVal sFind As String, ByVal bClear As Boolean, Optional ByVal nFrom As Long = 0, Optional ByVal nTill As Long = 0)
  Dim r As Long, i As Integer, c As Integer, nRow As Integer, nCol As Integer
  r = GetRowByID(oSheet, sFind, nFrom, nTill)
  If r <= 0 Then Exit Sub
  nRow = Val(GetValue(oSheet.Cells(r, FLAG_COL).Value, "Row", 1))
  nCol = oSheet.UsedRange.Columns.Count
  For i = 1 To nRow Step 1
    If bClear Then
      If Val(GetValue(oSheet.Cells(r, FLAG_COL).Value, "Init")) Then
        With oSheet.Cells(r, VALUE_COL)
          If Not .Locked And Not .HasFormula Then .Value = 0
        End With
        For c = PERIOD_COL To nCol Step 1
          With oSheet.Cells(r, c)
            If Not .Locked And Not .HasFormula Then .Value = 0
          End With
        Next c
      End If
      oSheet.Rows(r).Hidden = True
    Else
      oSheet.Rows(r).Hidden = (oSheet.Rows(r).OutlineLevel > 1)
    End If
    r = r + 1
  Next i
End Sub

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
'
Public Function GetTemplateRow(ByRef oSheet As Worksheet, ByVal nRow As Long, ByVal nType As Integer) As Long
  Dim r As Long, i As Integer, sBuffer As String
  r = GetRowByID(oSheet, "DATA", nRow)
  r = GetRowByID(oSheet, "TEMPLATE", nRow, r)
  If r <= 0 Then Exit Function
  sBuffer = oSheet.Cells(r, FLAG_COL).Value
  r = r + 1
  For i = Val(GetValue(sBuffer, "Count")) To 1 Step -1
    sBuffer = oSheet.Cells(r, FLAG_COL).Value
    If Val(GetValue(sBuffer, "Type")) = nType Then
      GetTemplateRow = r
      Exit Function
    End If
    r = r + Val(GetValue(sBuffer, "Row", 1))
  Next i
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Function GetChart(ByRef oSheet As Worksheet, ByVal nFrom As Long, ByVal nTill As Long) As Shape
  Dim r As Long, oShape As Shape
  For Each oShape In oSheet.Shapes
    r = oShape.TopLeftCell.Row
    If r >= nFrom And r <= nTill And oShape.Type = msoChart Then
      Set GetChart = oShape
      Exit Function
    End If
  Next oShape
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'
Public Function LoadString(ByVal nCode As Integer) As String
  LoadString = ThisWorkbook.Sheets(LANGUAGE_SHEET).Cells(nCode, 1).Value
End Function

Public Function LoadStringParam(ByVal nCode As Integer, ByVal sParam As String) As String
  LoadStringParam = Replace(LoadString(nCode), "***", sParam)
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'
Public Function ShowMessage(ByVal nCode As Integer, ByVal nButtons As Integer) As Integer
  ShowMessage = MsgBox(LoadString(nCode), nButtons, LoadString(4))
End Function

Public Function ShowMessageParam(ByVal nCode As Integer, ByVal nButtons As Integer, ByVal sParam As String) As Integer
  ShowMessageParam = MsgBox(LoadStringParam(nCode, sParam), nButtons, LoadString(4))
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Function ShowHelp(ByVal nTopic As Long) As Boolean
  Dim sFile As String, sPath As String
  On Error Resume Next
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sFile = LoadString(13)
  If Len(sFile) > 0 Then
    sPath = GetRegValue("Path")
    If Len(sPath) > 0 Then
      sPath = sPath & Application.PathSeparator & "Guides" & Application.PathSeparator & sFile
      If GetAttr(sPath) < 0 Then sPath = vbNullString
    End If
    If Len(sPath) = 0 And Len(ThisWorkbook.Path) > 0 Then
      sPath = ThisWorkbook.Path & Application.PathSeparator & sFile
      If GetAttr(sPath) < 0 Then sPath = vbNullString
    End If
    If Len(sPath) = 0 Then
      sPath = sFile
      If GetAttr(sPath) < 0 Then sPath = vbNullString
    End If
    If Len(sPath) > 0 Then
      Application.Help sPath, nTopic
      ShowHelp = True
      Exit Function
    End If
  End If
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sFile = LoadString(14)
  sPath = GetRegValue("Path")
  If Len(sPath) > 0 Then
    sPath = sPath & Application.PathSeparator & "Guides" & Application.PathSeparator & sFile
    If GetAttr(sPath) < 0 Then sPath = vbNullString
  End If
  If Len(sPath) = 0 And Len(ThisWorkbook.Path) > 0 Then
    sPath = ThisWorkbook.Path & Application.PathSeparator & sFile
    If GetAttr(sPath) < 0 Then sPath = vbNullString
  End If
  If Len(sPath) = 0 Then sPath = sFile
  Err.Clear
  ThisWorkbook.FollowHyperlink sPath
  If Err.Number <> 0 Then
    MsgBox Err.Description, vbOKOnly + vbExclamation
    Exit Function
  End If
  ShowHelp = True
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'
Public Function PickColor(ByVal rgbColor As Long) As Long
  Const COLOR_INDEX As Integer = 56
  Dim rgbSave As Long
  rgbSave = ActiveWorkbook.Colors(COLOR_INDEX)
  ActiveWorkbook.Colors(COLOR_INDEX) = rgbColor
  If Application.Dialogs(xlDialogEditColor).Show(COLOR_INDEX) Then
    PickColor = ActiveWorkbook.Colors(COLOR_INDEX)
  Else
    PickColor = -1
  End If
  ActiveWorkbook.Colors(COLOR_INDEX) = rgbSave
End Function

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|
'
Public Sub SetupForm(ByRef oForm As Object)
#If Mac Then
  Const SIZEFACTOR As Double = 1.5

  On Error Resume Next
  oForm.Width = oForm.Width * SIZEFACTOR
  oForm.Height = oForm.Height * SIZEFACTOR
  oForm.Font.Size = oForm.Font.Size * SIZEFACTOR
  If oForm.BackColor = &H80000010 Then oForm.BackColor = &H8000000F
  
  Dim oCtrl As Control
  For Each oCtrl In oForm.Controls
    oCtrl.Left = oCtrl.Left * SIZEFACTOR
    oCtrl.Width = oCtrl.Width * SIZEFACTOR
    oCtrl.Top = oCtrl.Top * SIZEFACTOR
    oCtrl.Height = oCtrl.Height * SIZEFACTOR
    oCtrl.Font.Size = oCtrl.Font.Size * SIZEFACTOR
    If oCtrl.BackColor = &H80000010 Then oCtrl.BackColor = &H8000000F
  Next oCtrl
#End If
End Sub

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Sub SetLanguage(ByVal nLanguage As Integer)
  Dim i As Integer, j As Integer, oLanguage As Worksheet
  Set oLanguage = ThisWorkbook.Sheets(LANGUAGE_SHEET)
  If nLanguage <= 0 Then
    i = Val(GetRegValue("Language"))
    If i <= 0 Then
#If Mac Then
      If Val(Application.Version) < 16 Then
        i = Application.LocalizedLanguage
      Else
        i = Application.LanguageSettings.LanguageID(2)
      End If
#Else
      i = Application.LanguageSettings.LanguageID(msoLanguageIDUI)
#End If
    End If
    For j = 1 To 8 Step 1
      If oLanguage.Cells(1, 1 + j).Value = i Then
        nLanguage = j
        Exit For
      End If
    Next j
    If nLanguage <= 0 Then Exit Sub
  End If

  Dim nCurrent As Integer, bProtect As Boolean, sPass As String, r As Long, nTemp As Long, sBuffer As String, oOptions As Worksheet, oMain As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)
  nCurrent = oMain.Range("Prj_Language").Value
  If nLanguage = nCurrent Then Exit Sub
  bProtect = oMain.Range("Prj_Protect").Value
  sPass = oOptions.Range("Opt_SPInfo").Value
  TransformInit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim nSheet As Integer, arrSheet(1 To 10, 1 To 2) As String, nName As Integer, arrName(1 To 10, 1 To 2) As String
  r = 15
  For j = 1 To 10 Step 1
    sBuffer = oLanguage.Cells(r, 1 + nCurrent).Value
    If Len(sBuffer) > 0 Then
      nSheet = nSheet + 1
      arrSheet(nSheet, 1) = sBuffer
      arrSheet(nSheet, 2) = oLanguage.Cells(r, 1 + nLanguage).Value
    End If
    r = r + 1
  Next j
  r = 25
  For j = 1 To 10 Step 1
    sBuffer = oLanguage.Cells(r, 1 + nCurrent).Value
    If Len(sBuffer) > 0 Then
      nName = nName + 1
      arrName(nName, 1) = sBuffer
      arrName(nName, 2) = oLanguage.Cells(r, 1 + nLanguage).Value
    End If
    r = r + 1
  Next j

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim oSheet As Worksheet, oShape As Shape
  ActiveSheet.Select
  nTemp = oOptions.Range("Opt_Sheets").Row + 1
  Do While Not IsEmpty(oOptions.Cells(nTemp, 1).Value)
    Set oSheet = ThisWorkbook.Sheets(oOptions.Cells(nTemp, 1).Value)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    sBuffer = oSheet.Name
    For j = 1 To nSheet Step 1
      If arrSheet(j, 1) = sBuffer Then
        oSheet.Name = arrSheet(j, 2)
        oOptions.Cells(nTemp, 1).Value = oSheet.Name
        Exit For
      End If
    Next j

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If bProtect And oOptions.Cells(nTemp, 2).Value Then oSheet.Protect sPass, False, False, False
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Excel 2016 for Mac)
#If Mac Then
    On Error Resume Next
#End If
    For Each oShape In oSheet.Shapes
      If oShape.Type = msoFormControl Then
        If oShape.FormControlType = xlButtonControl Then
          sBuffer = oShape.TextFrame.Characters.Text
          For j = 1 To nName Step 1
            If arrName(j, 1) = sBuffer Then
              oShape.TextFrame.Characters.Text = arrName(j, 2)
              Exit For
            End If
          Next j
        End If
      End If
    Next oShape
#If Mac Then
    On Error GoTo 0
#End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If bProtect And oOptions.Cells(nTemp, 2).Value Then oSheet.Protect sPass, True, True, True, True, True
    nTemp = nTemp + 1
  Loop

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  oMain.Range("Prj_Language").Value = nLanguage
  TransformDone
End Sub

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Sub UpdateColors()
  Dim nInvest As Integer, nTemp As Long, rgbHeader1 As Long, rgbHeader2 As Long, rgbEdit1 As Long, rgbEdit2 As Long, sBuffer As String, oOptions As Worksheet, oMain As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)
  nInvest = oMain.Range("Prj_Invest").Value

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  nTemp = oOptions.Range("Opt_Colors").Row
  rgbHeader1 = oOptions.Cells(nTemp, 2).Interior.Color
  rgbHeader2 = oOptions.Cells(nTemp, 3).Interior.Color
  rgbEdit1 = oOptions.Cells(nTemp, 4).Interior.Color
  rgbEdit2 = oOptions.Cells(nTemp, 5).Interior.Color

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim r As Long, nRow As Long, c As Long, nCol As Long, oSheet As Worksheet
  nTemp = oOptions.Range("Opt_Sheets").Row + 1
  Do While Not IsEmpty(oOptions.Cells(nTemp, 1).Value)
    If oOptions.Cells(nTemp, 2).Value > 0 Then
      Set oSheet = ThisWorkbook.Sheets(oOptions.Cells(nTemp, 1).Value)
      nRow = oSheet.UsedRange.Rows.Count
      nCol = oSheet.UsedRange.Columns.Count
      For r = 1 To nRow Step 1
        sBuffer = oSheet.Cells(r, ID_COL).Text
        If InStr(1, sBuffer, "TABLE::", vbTextCompare) = 1 Then
          For c = 1 To nCol Step 1
            With oSheet.Cells(r, c)
              If .Interior.ColorIndex <> xlColorIndexNone Then .Interior.Color = IIf(c >= PERIOD_COL And c < PERIOD_COL + nInvest, rgbHeader2, rgbHeader1)
            End With
          Next c
        ElseIf InStr(1, sBuffer, "CHART::", vbTextCompare) = 1 Then
          For c = 1 To nCol Step 1
            With oSheet.Cells(r, c)
              If .Interior.ColorIndex <> xlColorIndexNone Then .Interior.Color = rgbHeader1
            End With
          Next c
        Else
          sBuffer = GetValue(oSheet.Cells(r, FLAG_COL).Value, "Color")
          For c = 1 To UNIT_COL Step 1
            With oSheet.Cells(r, c)
              If Not .Locked Then .Interior.Color = IIf(InStr(1, sBuffer, Mid("abc", c, 1), vbTextCompare) > 0, rgbEdit2, rgbEdit1)
            End With
          Next c
          For c = PERIOD_COL To nCol Step 1
            With oSheet.Cells(r, c)
              If Not .Locked Then .Interior.Color = IIf(InStr(1, sBuffer, "*") > 0, rgbEdit2, rgbEdit1)
            End With
          Next c
        End If
      Next r
    End If
    nTemp = nTemp + 1
  Loop
End Sub

'------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Sub SetPeriods(ByVal nLen As Integer)
  Dim nOld As Integer, bProtect As Boolean, sPass As String, oOptions As Worksheet, oMain As Worksheet
  Set oOptions = ThisWorkbook.Sheets(OPTIONS_SHEET)
  Set oMain = ThisWorkbook.Sheets(oOptions.Range("Opt_MainSheet").Value)
  nOld = oMain.Range("Prj_Len").Value
  If nLen = nOld Then Exit Sub
  bProtect = oMain.Range("Prj_Protect").Value
  sPass = oOptions.Range("Opt_SPInfo").Value

  Dim r As Long, i As Integer, oSheet As Worksheet, oChart As ChartObject, oSeries As Series
  Dim sBuffer As String, sOldEnd As String, sNewEnd As String
  sOldEnd = "C" & PERIOD_COL + nOld - 1 & ","
  sNewEnd = "C" & PERIOD_COL + nLen - 1 & ","
  ActiveSheet.Select
  r = oOptions.Range("Opt_Sheets").Row + 1
  Do While Not IsEmpty(oOptions.Cells(r, 1).Value)
    If oOptions.Cells(r, 2).Value Then
      Set oSheet = ThisWorkbook.Sheets(oOptions.Cells(r, 1).Value)
      If oSheet.Visible = xlSheetVisible Then oSheet.Activate
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If oOptions.Cells(r, 3).Value Then
        If nLen > nOld Then
          Application.StatusBar = LoadStringParam(181, oSheet.Name)
          For i = nOld + 1 To nLen Step 1
            oSheet.Columns(PERIOD_COL + i - 1).Insert
            oSheet.Columns(PERIOD_COL + i - 2).Copy oSheet.Columns(PERIOD_COL + i - 1)
          Next i
        ElseIf nLen < nOld Then
          Application.StatusBar = LoadStringParam(182, oSheet.Name)
          For i = nOld - 1 To nLen Step -1
            oSheet.Columns(PERIOD_COL + i).Delete
          Next i
        End If
      End If
      If oSheet.ChartObjects.Count > 0 Then
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        If bProtect Then oSheet.Protect sPass, False, False, False
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each oChart In oSheet.ChartObjects
          For Each oSeries In oChart.Chart.SeriesCollection
            sBuffer = oSeries.FormulaR1C1
            If InStr(1, sBuffer, "C7:") > 0 And InStr(1, sBuffer, sOldEnd) > 0 Then oSeries.FormulaR1C1 = Replace(sBuffer, sOldEnd, sNewEnd)
          Next oSeries
        Next oChart
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        If bProtect Then oSheet.Protect sPass, True, True, True, True, True
      End If
    End If
    r = r + 1
  Loop
  If oMain.Visible = xlSheetVisible Then oMain.Activate
  Application.StatusBar = LoadString(183)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  oMain.Range("Prj_Len").Value = nLen
End Sub


INQUEST-PP=macro
