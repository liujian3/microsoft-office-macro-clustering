Attribute VB_Name = "AutoOpenZoom"
Option Explicit
'Declare Function GetSystemMetrics Lib "USER32" _
                 (ByVal nIndex As Long) As Long
Private Declare PtrSafe Function GetSystemMetrics Lib "USER32" (ByVal nIndex As Long) As Long
                 
Public Const SM_CXSCREEN = 0, _
             SM_CYSCREEN = 1

Public lngWidth As Long, _
       lngHeigh As Long

Function SetZoomFactor(Optional pDummy As Boolean)
Dim sh As Worksheet
Application.EnableCancelKey = xlDisabled
   lngWidth = GetSystemMetrics(SM_CXSCREEN)
   lngHeigh = GetSystemMetrics(SM_CYSCREEN)

   Select Case lngHeigh
      Case Is >= 1200
         SetZoomFactor = 108
      Case Is >= 1024
         SetZoomFactor = 90
      Case Is >= 800
         SetZoomFactor = 70
      Case Is >= 640
         SetZoomFactor = 50
      Case Else
         SetZoomFactor = 90
   End Select
End Function



Attribute VB_Name = "JChProgs_ExtData"
Option Explicit
'[rng_ExtData_PS_ucet_zadany]
'[rng_ExtData_PS_ucet_kontrola]
'[rng_ExtData_PS_KodBa]
'[rng_ExtData_PS_Castka]
'[rng_ExtData_PS_VS]
'[rng_ExtData_PS_KS]
'[rng_ExtData_PS_SS]
'[rng_ExtData_PS_Avizo]
'[rng_ExtData_PS_Znacka]
'[rng_ExtData_PS_CisPol]
'[rng_ExtData_PS_LKLR]

'[rng_ExtData_Output_Head]
'[rng_ExtData_Output_Foot]

Private strExpFile As String, _
        strSavePath As String, _
        strRecord As String

Private varUcetZadany As Variant, _
        varUcetKontrola As Variant, _
        varKodBa As Variant, _
        varCastka As Variant, _
        varVS As Variant, _
        varKS As Variant, _
        varSS As Variant, _
        varAvizo As Variant, _
        varLKLR As Variant, _
        varZnacka As Variant
Private intIdx As Integer, _
        int_dB_rowsCount As Integer, _
        int_dB_HeadRowNr As Integer, _
        b_Not_UcetZadany As Boolean, _
        b_Not_KodBa As Boolean, _
        b_Not_Castka As Boolean, _
        b_Not_VS As Boolean, _
        b_Not_LKLR As Boolean, _
        b_Znacka As Boolean, _
        varWK As Variant

Sub DO_ExtData_PS(Optional pDummy As Boolean)
 Application.ScreenUpdating = False
  ThisWorkbook.Unprotect Password:=pwd
    With L04_ExtData_PS
     If .Visible <> xlSheetVisible Then .Visible = xlSheetVisible
     .Activate
     [rng_ExtData_VyberUcet].Select
    End With
   L01_HPU_KB.Visible = xlSheetVeryHidden
   L02_Nastaveni_KB.Visible = xlSheetVeryHidden
   L01_HPU_PS.Visible = xlSheetVeryHidden
   L02_Nastaveni_PS.Visible = xlSheetVeryHidden
   L03_ABO.Visible = xlSheetVeryHidden
   L03_EDIBest_KB.Visible = xlSheetVeryHidden
  ThisWorkbook.Protect Password:=pwd, Structure:=True, Windows:=False
 Application.ScreenUpdating = True
End Sub

Sub ValidateData_Phase_1(Optional p_Dummy As Boolean)
Dim swMustBe As Boolean
'must be correct
swMustBe = True
With [rng_ExtData_PS_KS_default]
 If IsEmpty(.Value) Or Not IsNumeric(.Value) Then
  .Value = Vyplnit("0", intLen_KS) & vbNullString
  swMustBe = False
 End If
End With

With [rng_ExtData_PS_Vystaveni]
 If IsEmpty(.Value) Or Not IsDate(.Value) Then
  .Value = Date
  swMustBe = False
 End If
End With

With [rng_ExtData_PS_Splatnost]
 If IsEmpty(.Value) Or Not IsDate(.Value) Then
  .Value = Date
  swMustBe = False
 End If
End With

If swMustBe Then
Else
 Application.ScreenUpdating = True
  MsgBox "Zkontrolujte KONSTANTN|fffd| SYMBOL a data VYSTAVEN|fffd| a SPLATNOSTI,|fffd|" & vbLf & _
   "pak spus|fffd|te kontrolu znovu...", vbOKOnly + vbInformation, "Info"
 Exit Sub
End If

varUcetZadany = [rng_ExtData_PS_ucet_zadany]
varKodBa = [rng_ExtData_PS_KodBa]
varCastka = [rng_ExtData_PS_Castka]
varVS = [rng_ExtData_PS_VS]
varKS = [rng_ExtData_PS_KS]
varSS = [rng_ExtData_PS_SS]
varAvizo = [rng_ExtData_PS_Avizo]
varLKLR = [rng_ExtData_PS_LKLR]

 Application.ScreenUpdating = False
   With L04_ExtData_PS
    .Unprotect Password:=pwd
     With .ListObjects("Tab_ExtData_PS").AutoFilter
      If .FilterMode Then .ShowAllData
     End With
   End With
 
   [rng_ExtData_PS_Znacka].ClearContents
   varZnacka = [rng_ExtData_PS_Znacka]
   
   int_dB_rowsCount = L04_ExtData_PS.ListObjects("Tab_ExtData_PS").DataBodyRange.Rows.Count
    For intIdx = 1 To int_dB_rowsCount
     varWK = varUcetZadany(intIdx, 1)
     b_Not_UcetZadany = IsEmpty(varWK)
     If varWK = str_zeroUcet Then b_Not_UcetZadany = True
     
     varWK = varKodBa(intIdx, 1)
     b_Not_KodBa = IsEmpty(varWK) Or Not IsNumeric(varWK) _
        Or Len(Trim(varWK)) <> intLen_KodBa
     
     varWK = varCastka(intIdx, 1)
     b_Not_Castka = IsEmpty(varWK) Or Not IsNumeric(varWK)
     
     varWK = varVS(intIdx, 1)
     b_Not_VS = IsEmpty(varWK) Or Not IsNumeric(varWK)
     b_Not_LKLR = varLKLR(intIdx, 1) <> 0
     
     '=KDY|fffd|(JE.PR|fffd|ZDN|fffd|(HP|fffd|_PS!H12);ZPRAVA(OPAKOVAT("0";4)&HP|fffd|_PS!$G$9&"";4);ZPRAVA(OPAKOVAT("0";4)&HP|fffd|_PS!H12&"";4)&"")
     varWK = varKS(intIdx, 1)
     If IsEmpty(varWK) Then
      varWK = [rng_ExtData_PS_KS_default].Value
      varWK = Right(Vyplnit("0", intLen_KS) & Trim(varWK) & vbNullString, intLen_KS) & vbNullString
     ElseIf varWK = [rng_ExtData_PS_KS_default].Value Then
     ElseIf Not IsNumeric(varWK) Then
      varWK = Vyplnit("0", intLen_KS) & vbNullString
     Else
      varWK = Right(Vyplnit("0", intLen_KS) & Trim(varWK) & vbNullString, intLen_KS) & vbNullString
     End If
     varKS(intIdx, 1) = varWK
           
     '=ZPRAVA(OPAKOVAT("0";10)&HP|fffd|_PS!I12&"";10)&""
     varWK = varSS(intIdx, 1)
     If IsEmpty(varWK) Or Not IsNumeric(varWK) Then
      varWK = Vyplnit("0", intLen_SS) & vbNullString
     Else
      varWK = Right(Vyplnit("0", intLen_SS) & Trim(varWK) & vbNullString, intLen_SS) & vbNullString
     End If
     varSS(intIdx, 1) = varWK
     
     'avizo
     varWK = Trim(varAvizo(intIdx, 1) & vbNullString)
     If IsEmpty(varWK) Or varWK = vbNullString Then
      varWK = Empty
     ElseIf Len(varWK) > intLen_Avizo Then
      varWK = Left(varWK, intLen_Avizo)
     End If
     varAvizo(intIdx, 1) = varWK
           
     'zna|fffd|ka
     b_Znacka = b_Not_UcetZadany Or b_Not_KodBa Or b_Not_Castka Or b_Not_VS
     If b_Znacka Then
      varZnacka(intIdx, 1) = "x"
     End If
     
     'modulo 11
     If b_Not_LKLR Then
      varZnacka(intIdx, 1) = "x"
     End If
     
     b_Znacka = b_Not_UcetZadany And b_Not_KodBa And b_Not_Castka And b_Not_VS
     If b_Znacka Then
      varZnacka(intIdx, 1) = "e"
     End If
     
     ' =ZPRAVA(OPAKOVAT("0";10)&HP|fffd|_PS!G12&"";10)&""
     varWK = varVS(intIdx, 1)
     varWK = Right(Vyplnit("0", intLen_VS) & Trim(varWK) & vbNullString, intLen_VS) & vbNullString
     If varWK = str_zeros10 Then
      varVS(intIdx, 1) = Empty
     Else
      varVS(intIdx, 1) = varWK
     End If
    Next
  
   [rng_ExtData_PS_Znacka] = varZnacka
   [rng_ExtData_PS_VS] = varVS
   [rng_ExtData_PS_KS] = varKS
   [rng_ExtData_PS_SS] = varSS
   [rng_ExtData_PS_Avizo] = varAvizo
   
   With L04_ExtData_PS
    ' .Unprotect Password:=pwd
     .ListObjects("Tab_ExtData_PS").Range.AutoFilter Field:=int_dBCol_ExtData_Znacka, _
       Criteria1:="=x", Operator:=xlOr, Criteria2:="="
     .Protect Password:=pwd, UserInterFaceOnly:=True, AllowFiltering:=False
   End With
 Application.ScreenUpdating = True
End Sub

Sub FilterOff_in_dB_ExtData(Optional p_Dummy As Boolean)
 Application.Calculation = xlCalculationManual
    With L04_ExtData_PS
     .Unprotect Password:=pwd
       NoRowsHiddenByAutofilter p_Tbl:=[Tab_ExtData_PS]
     .Protect Password:=pwd, UserInterFaceOnly:=True, AllowFiltering:=False
    End With
 Application.Calculation = xlCalculationAutomatic
End Sub

Sub PrepareRecords_Phase_2(Optional p_Dummy As Boolean)
 varZnacka = [rng_ExtData_PS_Znacka]
 varUcetKontrola = [rng_ExtData_PS_ucet_kontrola]
 varKodBa = [rng_ExtData_PS_KodBa]
 varCastka = [rng_ExtData_PS_Castka]
 varVS = [rng_ExtData_PS_VS]
 varKS = [rng_ExtData_PS_KS]
 varSS = [rng_ExtData_PS_SS]
 varAvizo = [rng_ExtData_PS_Avizo]
 varLKLR = [rng_ExtData_PS_LKLR]
 
 'open output file
 Open_Export_PS_ExtData
 
 Application.ScreenUpdating = False
   varWK = Empty: strRecord = Empty
   int_dB_rowsCount = L04_ExtData_PS.ListObjects("Tab_ExtData_PS").DataBodyRange.Rows.Count
    For intIdx = 1 To int_dB_rowsCount
     
     If varZnacka(intIdx, 1) = Empty Then
      'odkontrolovan|fffd| a dopln|fffd|n|fffd| |fffd||fffd|et, blank
      strRecord = varUcetKontrola(intIdx, 1) & vbNullString & str_Space
      
      '|fffd||fffd|stka bez desetinn|fffd| |fffd||fffd|rky, blank
      '=ZPRAVA(OPAKOVAT("0";12)&HP|fffd|_PS!F12*100&"";12)&""
      varWK = (varCastka(intIdx, 1) * 100) & vbNullString
      strRecord = strRecord & _
       Right(Vyplnit("0", intLen_Castka) & Trim(varWK) & vbNullString, intLen_Castka) & _
       vbNullString & str_Space
      
      'VS, blank
      strRecord = strRecord & _
       varVS(intIdx, 1) & vbNullString & str_Space
       
      'Kodbanky, KS, blank
      strRecord = strRecord & _
       varKodBa(intIdx, 1) & vbNullString & _
       varKS(intIdx, 1) & vbNullString & str_Space
       
      'SS
      strRecord = strRecord & _
       varSS(intIdx, 1) & vbNullString
      
      'Avizo
          If IsEmpty(varAvizo(intIdx, 1)) Then
          Else
           strRecord = strRecord & _
           str_Space & _
             "AV:" & _
             varAvizo(intIdx, 1) & vbNullString
          End If
       
       'CR/LF
       strRecord = strRecord & _
       vbCrLf
     Else
       strRecord = Empty
     End If
    
     'Write it
      If IsEmpty(strRecord) Then
      Else
       Put #1, , strRecord
      End If
    Next

 'close output file
 Close_Export_PS_ExtData
 
 Application.ScreenUpdating = True
  
  '|fffd|klid
  varZnacka = vbNullString
  varUcetKontrola = vbNullString
  varKodBa = vbNullString
  varCastka = vbNullString
  varVS = vbNullString
  varKS = vbNullString
  varSS = vbNullString
  varAvizo = vbNullString
  varLKLR = vbNullString

  'msg to user
  msgInfo_PS_ExtData

End Sub

Sub Open_Export_PS_ExtData(Optional p_Dummy As Boolean)
Dim rngWk As Range, datWk As Date
strSavePath = CurDir
'ChDir "\"
 ChDir ThisWorkbook.Path
 On Error Resume Next
  MkDir "DAVKY_RB"
  ChDir "DAVKY_RB"
  datWk = Date
  strExpFile = _
     ThisWorkbook.Path & "\DAVKY_RB" & "\RB_Ext_rmd_" & _
     Format(datWk, "yyyy-mm-dd") & _
     "__hms_" & Format(Time, "hh_mm_ss") & _
        ".ebs"
  Kill strExpFile
 
 L05_ExtData_ABO_PS.Calculate
 On Error GoTo 0
 Open strExpFile For Binary Access Write As #1
 
 'write head
 For Each rngWk In [rng_ExtData_Output_Head]
  strRecord = Trim(rngWk.Value)
  Put #1, , strRecord
 Next

End Sub
    
Sub Close_Export_PS_ExtData(Optional p_Dummy As Boolean)
 Dim rngWk As Range
 
 'write foot
 For Each rngWk In [rng_ExtData_Output_Foot]
  strRecord = Trim(rngWk.Value)
  Put #1, , strRecord
 Next
  
 Close #1
 ChDir strSavePath
End Sub

Sub msgInfo_PS_ExtData(Optional p_Dummy As Boolean)
Dim strMsg As String
  strMsg = "ABO-d|fffd|vka pro na|fffd|ten|fffd| do banky Raiffeisen" & _
    vbLf & "p|fffd|ipravena v souboru: " & strExpFile & vbTab & "|fffd|" & _
    vbLf & vbLf & _
    "RB = Raiffeisen Bank" & _
    vbLf & "rok-m|fffd|s|fffd|c-den, hodina_minuta_vte|fffd|ina." & _
    vbLf & "P|fffd||fffd|pona souboru je .ebs" & _
    vbLf & vbLf & _
    "Opakovan|fffd| vytvo|fffd|en|fffd| d|fffd|vky nevad|fffd|, p|fffd|ep|fffd|e se, pokud je stejn|fffd| datum a stejn|fffd| VS prvn|fffd| polo|fffd|ky." & _
    vbLf & "Zm|fffd|n|fffd|-li se VS prvn|fffd| polo|fffd|ky, nebo je jin|fffd| den, zalo|fffd||fffd| se nov|fffd| d|fffd|vka."

  MsgBox strMsg, vbOKOnly + vbInformation, "Info"
End Sub

Sub Delete_All_on_PS_ExtData(Optional p_Dummy As Boolean)
 Dim intReply As Integer
   intReply = MsgBox("Smazat V|fffd|ECHNA data?", _
                  vbYesNo + vbDefaultButton2 + vbQuestion, "Dotaz")
   If intReply = vbYes Then
     Application.ScreenUpdating = False
      [rng_ExtData_PS_Znacka].ClearContents
      [rng_ExtData_PS_KS_default].ClearContents
      [rng_ExtData_PS_Vystaveni].ClearContents
      [rng_ExtData_PS_Splatnost].ClearContents
      [rng_ExtData_PS_ucet_zadany].ClearContents
      [rng_ExtData_PS_KodBa].ClearContents
      [rng_ExtData_PS_Castka].ClearContents
      [rng_ExtData_PS_VS].ClearContents
      [rng_ExtData_PS_KS].ClearContents
      [rng_ExtData_PS_SS].ClearContents
      [rng_ExtData_PS_Avizo].ClearContents
      [rng_ExtData_PS_Info].ClearContents
     Application.ScreenUpdating = True
   End If
End Sub

Attribute VB_Name = "JChProgs_KB"
Option Explicit
Private Const int_Len_AVizo_PS As Integer = 35
Private strExpFile_KB As String, _
        strSavePath_KB As String

Sub Export_Data_KB(Optional p_Dummy As Boolean)
Dim rngWk As Range, strWK As String, datWk As Date
strSavePath_KB = CurDir
'ChDir "\"
 ChDir ThisWorkbook.Path
 On Error Resume Next
  MkDir "DAVKY_KB"
  ChDir "DAVKY_KB"
  datWk = Date
  strExpFile_KB = _
   ThisWorkbook.Path & "\DAVKY_KB" & "\KB_rmd_" & _
   Format(datWk, "yyyy-mm-dd") & _
   "__hms_" & Format(Time, "hh_mm_ss") & _
   ".IKM"

  Kill strExpFile_KB
 
 L03_EDIBest_KB.Calculate
 On Error GoTo 0
   Open strExpFile_KB For Binary Access Write As #1
    For Each rngWk In [rng_EDIBest_Input]
    strWK = Trim(rngWk.Value)
      If strWK = "" Then
      Else
       Put #1, , strWK
      End If
    Next
   Close #1
ChDir strSavePath_KB
End Sub

Sub msgInfo_KB(Optional p_Dummy As Boolean)
Dim strMsg As String
  strMsg = "EDIBest-d|fffd|vka pro na|fffd|ten|fffd| do Homebanking KB" & _
    vbLf & "p|fffd|ipravena v souboru: " & strExpFile_KB & vbTab & "|fffd|" & _
    vbLf & vbLf & _
    "KB = Komer|fffd|n|fffd| banka" & _
    vbLf & "rok-m|fffd|s|fffd|c-den" & _
    vbLf & "rok-m|fffd|s|fffd|c-den, hodina_minuta_vte|fffd|ina." & _
    vbLf & "P|fffd||fffd|pona souboru je .IKM" & _
    vbLf & vbLf & _
    "Opakovan|fffd| vytvo|fffd|en|fffd| d|fffd|vky nevad|fffd|, p|fffd|ep|fffd|e se, pokud je stejn|fffd| datum a stejn|fffd| VS prvn|fffd| polo|fffd|ky." & _
    vbLf & "Zm|fffd|n|fffd|-li se VS prvn|fffd| polo|fffd|ky, nebo je jin|fffd| den, zalo|fffd||fffd| se nov|fffd| d|fffd|vka."

  MsgBox strMsg, vbOKOnly + vbInformation, "Info"
End Sub

Sub PrintEdiBest_KB(Optional p_Dummy As Boolean)
 Application.ScreenUpdating = False
  ThisWorkbook.Unprotect Password:=pwd
    With L03_EDIBest_KB
     .Visible = xlSheetVisible
     .Activate
     .Calculate
     .PrintOut
     .Visible = xlSheetVeryHidden
    End With
    L01_HPU_KB.Activate
  ThisWorkbook.Protect Password:=pwd, Structure:=True, Windows:=False
 Application.ScreenUpdating = True
End Sub

Sub Do_KB(Optional p_Dummy As Boolean)
 Application.ScreenUpdating = False
  ThisWorkbook.Unprotect Password:=pwd
   With L01_HPU_KB
    .Visible = xlSheetVisible
    .Activate
    [rng_KB_HPU_VyberUcet].Select
    'SendKeys "%{DOWN}"
   End With
   L02_Nastaveni_KB.Visible = xlSheetVisible
   L01_HPU_PS.Visible = xlSheetVeryHidden
   L02_Nastaveni_PS.Visible = xlSheetVeryHidden
   L04_ExtData_PS.Visible = xlSheetVeryHidden
  ThisWorkbook.Protect Password:=pwd, Structure:=True, Windows:=False
 Application.ScreenUpdating = True
End Sub

'curretly unused
Sub Copy_Data_to_PS(Optional p_Dummy As Boolean)
  If MsgBox("Zkop|fffd|rovat data do formul|fffd||fffd|e Po|fffd|tovn|fffd| spo|fffd|itelny?", _
   vbYesNo + vbDefaultButton2 + vbQuestion, "Dotaz") = vbYes Then
    Application.EnableEvents = False
      [rng_PS_Area_1_Copied_to_KB].Value = [rng_KB_Area_1_Copied_to_PS].Value
      [rng_PS_Area_2_Copied_to_KB].Value = [rng_KB_Area_2_Copied_to_PS].Value
      [rng_PS_Area_3_Copied_to_KB].Value = [rng_KB_Area_3_Copied_to_PS].Value
      [rng_PS_Area_4_Copied_to_KB].Value = [rng_KB_Area_4_Copied_to_PS].Value
      [rng_PS_Area_5_Copied_to_KB].Value = [rng_KB_Area_5_Copied_to_PS].Value
    Application.EnableEvents = True
   Do_PS
   Application.Calculate
  End If
End Sub

Sub Erase_Data_on_HPU_KB(Optional p_Dummy As Boolean)
  If MsgBox("Vymazat data z formul|fffd||fffd|e?", _
   vbYesNo + vbDefaultButton2 + vbQuestion, "Dotaz") = vbYes Then
    Application.EnableEvents = False
      [rng_KB_Area_1_Copied_to_PS].ClearContents
      [rng_KB_Area_2_Copied_to_PS].ClearContents
      [rng_KB_Area_3_Copied_to_PS].ClearContents
      [rng_KB_Area_4_Copied_to_PS].ClearContents
      [rng_KB_Area_5_Copied_to_PS].ClearContents
    With Application
     .EnableEvents = True
     .Calculate
    End With
  End If
End Sub

Sub Move_Data_to_PS(Optional p_Dummy As Boolean)
Dim rng_4 As Range
  If MsgBox("P|fffd|esunout data do formul|fffd||fffd|e Po|fffd|tovn|fffd| spo|fffd|itelny?", _
   vbYesNo + vbDefaultButton2 + vbQuestion, "Dotaz") = vbYes Then
    Application.EnableEvents = False
      [rng_PS_Area_1_Copied_to_KB].Value = [rng_KB_Area_1_Copied_to_PS].Value
      [rng_PS_Area_2_Copied_to_KB].Value = [rng_KB_Area_2_Copied_to_PS].Value
      [rng_PS_Area_3_Copied_to_KB].Value = [rng_KB_Area_3_Copied_to_PS].Value
      
      'zkr|fffd|cen|fffd| AViza z KB(140 znak|fffd|) na 35 znak|fffd| pro PS
      For Each rng_4 In [rng_KB_Area_4_Copied_to_PS]
       If Len(rng_4) > int_Len_AVizo_PS Then
        rng_4 = Left(rng_4, int_Len_AVizo_PS)
       End If
      Next rng_4
      
      [rng_PS_Area_4_Copied_to_KB].Value = [rng_KB_Area_4_Copied_to_PS].Value
      [rng_PS_Area_5_Copied_to_KB].Value = [rng_KB_Area_5_Copied_to_PS].Value
      [rng_KB_Area_1_Copied_to_PS].ClearContents
      [rng_KB_Area_2_Copied_to_PS].ClearContents
      [rng_KB_Area_3_Copied_to_PS].ClearContents
      [rng_KB_Area_4_Copied_to_PS].ClearContents
      [rng_KB_Area_5_Copied_to_PS].ClearContents
    Application.EnableEvents = True
   Do_PS
   Application.Calculate
  End If
End Sub

Attribute VB_Name = "JChProgs_Main"
Option Explicit
Public Const _
 pwd As String = "heslo", _
 strProgVersion As String = "3.36(Win/Office_32/64bit", _
 strCreationDate As String = "25-Apr-2019", _
 strAuthor As String = "jaroslav chuchl|fffd|k"
 
Public rng_Target_Calendar_Value As Range, _
       lngTop_Calendar As Long

Public Const str_Calendar_Caption_Splatnost = "datum SPLATNOSTI p|fffd||fffd|kazu", _
             str_Calendar_Caption_Vystaveni = "datum VYSTAVEN|fffd| p|fffd||fffd|kazu"

Public Const int_dBCol_ExtData_Znacka As Integer = 1, _
             int_dBCol_ExtData_Pol As Integer = 2, _
             int_dBCol_ExtData_CUzadane As Integer = 3, _
             int_dBCol_ExtData_CUdoplnene As Integer = 4, _
             int_dBCol_ExtData_KodBa As Integer = 5, _
             int_dBCol_ExtData_Castka As Integer = 6, _
             int_dBCol_ExtData_VS As Integer = 7, _
             int_dBCol_ExtData_KS As Integer = 8, _
             int_dBCol_ExtData_SS As Integer = 9, _
             int_dBCol_ExtData_Avizo As Integer = 10, _
             int_dBCol_ExtData_Info As Integer = 11
             
Public Const intLen_Castka As Integer = 12, _
             intLen_KodBa As Integer = 4, _
             intLen_VS As Integer = 10, _
             intLen_KS As Integer = 4, _
             intLen_SS As Integer = 10, _
             intLen_Avizo As Integer = 32
             
Public Const str_zeros10 As String = "0000000000", _
             str_zeroUcet As String = "000000-0000000000", _
             str_Space As String * 1 = " "

Function Vyplnit(znak As String, kolik As Integer) As String
'Application.Volatile 'nam|fffd|sto toho Calculate dopt|fffd|en|fffd|ch list|fffd|, toto je hrozn|fffd| pomal|fffd|
 Vyplnit = String(kolik, znak)
End Function

Sub Init_All(Optional p_Dummy As Boolean)
Dim sh As Worksheet
 'Application.ScreenUpdating = False  'used in WorkBook_Open
  ThisWorkbook.Unprotect Password:=pwd
    
    L02_Nastaveni_PS.EnableOutlining = True
    L02_Nastaveni_KB.EnableOutlining = True
    With L04_ExtData_PS
     .EnableOutlining = True
     .EnableAutoFilter = True
    End With
      
      For Each sh In ThisWorkbook.Worksheets
        With sh
         .Activate
         .Visible = xlSheetVisible
         If sh.CodeName = "L04_ExtData_PS" Then
          .Protect Password:=pwd, UserInterFaceOnly:=True, AllowFiltering:=True
         Else
          .Protect Password:=pwd, UserInterFaceOnly:=True, AllowFiltering:=False
         End If
        End With
       ActiveWindow.Zoom = SetZoomFactor
      Next sh
   
   L00.Activate
   'version info
    [AuthorSign] = strAuthor
    [ProgVersion] = strProgVersion
    [CreationDate] = strCreationDate
   
   L01_HPU_PS.Visible = xlSheetVeryHidden
   L01_HPU_KB.Visible = xlSheetVeryHidden
   L02_Nastaveni_PS.Visible = xlSheetVeryHidden
   L02_Nastaveni_KB.Visible = xlSheetVeryHidden
   L03_ABO.Visible = xlSheetVeryHidden
   L03_EDIBest_KB.Visible = xlSheetVeryHidden
   With L04_ExtData_PS
    .EnableOutlining = True
    .Visible = xlSheetVeryHidden
   End With
   L05_ExtData_ABO_PS.Visible = xlSheetVeryHidden
   L09_Maluvka.Visible = xlSheetVeryHidden
   
  With ThisWorkbook
   .DisplayDrawingObjects = xlAll
   .Protect Password:=pwd, Structure:=True, Windows:=False
  End With
 
  lngTop_Calendar = 100
  
 'Application.ScreenUpdating = True  'used in WorkBook_Open
End Sub

Sub GoTo_Titulni(Optional p_Dummy As Boolean)
 L00.Activate
End Sub

Function IsVisibleRow(p_rng As Range) As Boolean
 If p_rng.EntireRow.Hidden Then
  IsVisibleRow = False
 Else
  IsVisibleRow = True
 End If
End Function

Sub SwitchFullScreen(Optional p_Dummy As Boolean)
 With Application
 .DisplayFullScreen = Not .DisplayFullScreen
 End With
End Sub

Sub SendMeThisWorkBook_as_mail_annex(Optional p_Dummy As Boolean)
 Application.EnableCancelKey = xlDisabled
 On Error GoTo NejdeTo
 Application.Dialogs(xlDialogSendMail).Show _
  "jar@chuchlik.cz", "D|fffd|vky hromadn|fffd|ch p|fffd||fffd|kaz|fffd| pro PS a KB , ver. " & strProgVersion
 Exit Sub
 
NejdeTo:
 MsgBox "Zpr|fffd|va s p|fffd||fffd|lohou autorovi nejde automaticky p|fffd|ipravit, " & _
        vbLf & "proto|fffd|e nen|fffd| nastaven v|fffd|choz|fffd| klient elektronick|fffd| po|fffd|ty. " & _
        vbLf & vbTab & _
        vbLf & "Tak|fffd|e ulo|fffd|it, zav|fffd||fffd|t a poslat klasicky, " & _
        vbLf & "nebo potrubn|fffd| po|fffd|tou, telepaticky, PPL apod. " & _
        vbLf & vbTab, _
        vbOKOnly + vbInformation, "Sm|fffd|la, mus|fffd|te to poslat n|fffd|jak jinak"
End Sub

Sub Maximize_Excel_and_Document_Window(Optional pDummy As Boolean)
  ActiveWindow.WindowState = xlMaximized
  Application.WindowState = xlMaximized
End Sub

Sub Minimize_Excel_and_Document_Window(Optional pDummy As Boolean)
  ActiveWindow.WindowState = xlMinimized
  Application.WindowState = xlMinimized
End Sub

Sub Goto_L_10_Banky(Optional pDummy As Boolean)
 L10_Banky.Activate
End Sub

Sub NoRowsHiddenByAutofilter(p_Tbl As Range)
'Show all data
 'v|fffd|b|fffd|r nemus|fffd| b|fffd|t v tabulce
 With p_Tbl
  If .ListObject.AutoFilter.FilterMode Then _
      .ListObject.AutoFilter.ShowAllData
 End With
 'v|fffd|b|fffd|r mus|fffd| b|fffd|t n|fffd|kde v tabulce
 'ActiveSheet.ShowAllData
End Sub

Sub Clozze_this_wbk()
 ThisWorkbook.Close
End Sub

Attribute VB_Name = "JChProgs_PS"
Option Explicit
Private strExpFile As String, _
        strSavePath As String

Sub Export_Data_PS(Optional p_Dummy As Boolean)
Dim rngWk As Range, strWK As String, datWk As Date
strSavePath = CurDir
'ChDir "\"
ChDir ThisWorkbook.Path
 On Error Resume Next
  MkDir "DAVKY_RB"
  ChDir "DAVKY_RB"
  datWk = Date
  strExpFile = _
   ThisWorkbook.Path & "\DAVKY_RB" & "\RB_rmd_" & _
   Format(datWk, "yyyy-mm-dd") & _
   "__hms_" & Format(Time, "hh_mm_ss") & _
   ".KPC"
  
  Kill strExpFile
 
 L03_ABO.Calculate
 On Error GoTo 0
   Open strExpFile For Binary Access Write As #1
    For Each rngWk In [rng_ABO_Input]
    strWK = Trim(rngWk.Value)
      If strWK = "" Then
      Else
       Put #1, , strWK
      End If
    Next
   Close #1
ChDir strSavePath
End Sub

Sub msgInfo_PS(Optional p_Dummy As Boolean)
Dim strMsg As String
  strMsg = "ABO-d|fffd|vka pro na|fffd|ten|fffd| do banky Raiffeisen" & _
    vbLf & "p|fffd|ipravena v souboru: " & strExpFile & vbTab & "|fffd|" & _
    vbLf & vbLf & _
    "RB = Raiffeisen Bank" & _
    vbLf & "rok-m|fffd|s|fffd|c-den, hodina_minuta_vte|fffd|ina." & _
    vbLf & "P|fffd||fffd|pona souboru je .KPC" & _
    vbLf & vbLf & _
    "Opakovan|fffd| vytvo|fffd|en|fffd| d|fffd|vky nevad|fffd|, p|fffd|ep|fffd|e se, pokud je stejn|fffd| datum a stejn|fffd| VS prvn|fffd| polo|fffd|ky." & _
    vbLf & "Zm|fffd|n|fffd|-li se VS prvn|fffd| polo|fffd|ky, nebo je jin|fffd| den, zalo|fffd||fffd| se nov|fffd| d|fffd|vka."

  MsgBox strMsg, vbOKOnly + vbInformation, "Info"
End Sub

Sub PrintABO_PS(Optional p_Dummy As Boolean)
 Application.ScreenUpdating = False
  ThisWorkbook.Unprotect Password:=pwd
    With L03_ABO
     .Visible = xlSheetVisible
     .Activate
     .Calculate
     .PrintOut
     .Visible = xlSheetVeryHidden
    End With
    L01_HPU_PS.Activate
  ThisWorkbook.Protect Password:=pwd, Structure:=True, Windows:=False
 Application.ScreenUpdating = True
End Sub

Sub Do_PS(Optional p_Dummy As Boolean)
 Application.ScreenUpdating = False
  ThisWorkbook.Unprotect Password:=pwd
   With L01_HPU_PS
    .Visible = xlSheetVisible
    .Activate
    [rng_PS_HPU_VyberUcet].Select
    'SendKeys "%{DOWN}"
   End With
   L02_Nastaveni_PS.Visible = xlSheetVisible
   L01_HPU_KB.Visible = xlSheetVeryHidden
   L02_Nastaveni_KB.Visible = xlSheetVeryHidden
   L04_ExtData_PS.Visible = xlSheetVeryHidden
  ThisWorkbook.Protect Password:=pwd, Structure:=True, Windows:=False
 Application.ScreenUpdating = True
End Sub

'curretly unused
Sub Copy_Data_to_KB(Optional p_Dummy As Boolean)
  If MsgBox("Zkop|fffd|rovat data do formul|fffd||fffd|e Komer|fffd|n|fffd| banky?", _
   vbYesNo + vbDefaultButton2 + vbQuestion, "Dotaz") = vbYes Then
    Application.EnableEvents = False
      [rng_KB_Area_1_Copied_to_PS].Value = [rng_PS_Area_1_Copied_to_KB].Value
      [rng_KB_Area_2_Copied_to_PS].Value = [rng_PS_Area_2_Copied_to_KB].Value
      [rng_KB_Area_3_Copied_to_PS].Value = [rng_PS_Area_3_Copied_to_KB].Value
      [rng_KB_Area_4_Copied_to_PS].Value = [rng_PS_Area_4_Copied_to_KB].Value
      [rng_KB_Area_5_Copied_to_PS].Value = [rng_PS_Area_5_Copied_to_KB].Value
    Application.EnableEvents = True
  Do_KB
  Application.Calculate
  End If
End Sub

Sub Erase_Data_on_HPU_PS(Optional p_Dummy As Boolean)
  If MsgBox("Vymazat data z formul|fffd||fffd|e?", _
   vbYesNo + vbDefaultButton2 + vbQuestion, "Dotaz") = vbYes Then
    Application.EnableEvents = False
      [rng_PS_Area_1_Copied_to_KB].ClearContents
      [rng_PS_Area_2_Copied_to_KB].ClearContents
      [rng_PS_Area_3_Copied_to_KB].ClearContents
      [rng_PS_Area_4_Copied_to_KB].ClearContents
      [rng_PS_Area_5_Copied_to_KB].ClearContents
    With Application
     .EnableEvents = True
     .Calculate
    End With
  End If
End Sub

Sub Move_Data_to_KB(Optional p_Dummy As Boolean)
  If MsgBox("P|fffd|esunout data do formul|fffd||fffd|e Komer|fffd|n|fffd| banky?", _
   vbYesNo + vbDefaultButton2 + vbQuestion, "Dotaz") = vbYes Then
    Application.EnableEvents = False
      [rng_KB_Area_1_Copied_to_PS].Value = [rng_PS_Area_1_Copied_to_KB].Value
      [rng_KB_Area_2_Copied_to_PS].Value = [rng_PS_Area_2_Copied_to_KB].Value
      [rng_KB_Area_3_Copied_to_PS].Value = [rng_PS_Area_3_Copied_to_KB].Value
      [rng_KB_Area_4_Copied_to_PS].Value = [rng_PS_Area_4_Copied_to_KB].Value
      [rng_KB_Area_5_Copied_to_PS].Value = [rng_PS_Area_5_Copied_to_KB].Value
      [rng_PS_Area_1_Copied_to_KB].ClearContents
      [rng_PS_Area_2_Copied_to_KB].ClearContents
      [rng_PS_Area_3_Copied_to_KB].ClearContents
      [rng_PS_Area_4_Copied_to_KB].ClearContents
      [rng_PS_Area_5_Copied_to_KB].ClearContents
    Application.EnableEvents = True
  Do_KB
  Application.Calculate
  End If
End Sub
Attribute VB_Name = "L00"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdPS, 18, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdKB, 19, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdBanky, 20, 2, MSForms, CommandButton"
Attribute VB_Control = "cmdExtDataPS, 21, 3, MSForms, CommandButton"
Option Explicit

Private Sub cmdBanky_Click()
 Maximize_Excel_and_Document_Window
 Goto_L_10_Banky
End Sub

Private Sub cmdExtDataPS_Click()
 Maximize_Excel_and_Document_Window
 DO_ExtData_PS
End Sub

Private Sub cmdKB_Click()
 Maximize_Excel_and_Document_Window
 Do_KB
End Sub

Private Sub cmdPS_Click()
 Maximize_Excel_and_Document_Window
 Do_PS
End Sub

Private Sub lblSendMailtoAuthor_Click()
 SendMeThisWorkBook_as_mail_annex
End Sub
Attribute VB_Name = "L01_HPU_KB"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdVyberUcet, 456, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdGenEdiBest, 1, 1, MSForms, CommandButton"
Attribute VB_Control = "chkPrintEdiBest, 2, 2, MSForms, CheckBox"
Attribute VB_Control = "cmdDatSplatnosti, 195, 3, MSForms, CommandButton"
Attribute VB_Control = "cmdDatVystaveni, 196, 4, MSForms, CommandButton"
Option Explicit
Private rng_TestUcet As Range, rng_TestLKLR As Range, _
        rng_TestUcetUpraveny As Range, _
        rng_wk As Range

Private Sub cmdDatSplatnosti_Click()
 Set rng_Target_Calendar_Value = [rng_KB_Area_1_Copied_to_PS]
 lngTop_Calendar = lngHeigh \ 10
 With frmCalendar
  .Caption = str_Calendar_Caption_Splatnost
  .Top = lngTop_Calendar
  .Show
 End With
End Sub

Private Sub cmdDatVystaveni_Click()
 Set rng_Target_Calendar_Value = [rng_KB_Area_5_Copied_to_PS]
 lngTop_Calendar = lngHeigh \ 3
 With frmCalendar
  .Caption = str_Calendar_Caption_Vystaveni
  .Top = lngTop_Calendar
  .Show
 End With
End Sub

Private Sub cmdGenEdiBest_Click()
 If Trim([rng_KB_UCET1].Value) = "0000000000000000" Then
  MsgBox "Prvn|fffd| polo|fffd|ka nem|fffd| vypln|fffd|n|fffd| |fffd||fffd|et," & _
    vbLf & "D|fffd|vku pro banku neud|fffd|l|fffd|m a neud|fffd|l|fffd|m a neud|fffd|l|fffd|m..." & vbTab & "|fffd|" & _
    vbLf & "Howgh, domluvil jsem.", _
    vbOKOnly + vbCritical, "Chybka"
 Else
  
  'vyplnit KS u polo|fffd|ek kde nen|fffd| zad|fffd|n, pokud maj|fffd| zad|fffd|n |fffd||fffd|et
  '[rng_KB_Area_2_Copied_to_PS] =KS v zahlavi
  '[rng_HPU_KB_KS] = sloupec KS
  For Each rng_wk In [rng_HPU_KB_KS]
   With rng_wk
    If IsEmpty([rng_KB_Area_2_Copied_to_PS]) Then
      If Not IsEmpty(.Offset(0, -4).Value) Then
       If (IsEmpty(.Value) Or Not IsNumeric(.Value)) Then
        .Value = 0
       End If
      Else
        .Value = Empty
      End If
    Else
      If Not IsEmpty(.Offset(0, -4).Value) Then
       If (IsEmpty(.Value) Or Not IsNumeric(.Value)) Then
        .Value = [rng_KB_Area_2_Copied_to_PS].Value
       End If
      Else
        .Value = Empty
      End If
    End If
   End With
  Next
  
  Export_Data_KB
  msgInfo_KB
  If chkPrintEdiBest Then
   PrintEdiBest_KB
  End If
 End If
End Sub

Private Sub cmdVyberUcet_Click()
 [rng_KB_HPU_VyberUcet].Select
 SendKeys "%{DOWN}"
End Sub

'Private Sub dbg_Worksheet_Change()
Private Sub Worksheet_Change(ByVal Target As Range)
  Application.EnableEvents = False
  On Error Resume Next
    If Intersect(Target, [rng_KB_HPU_Ucty]) Is Nothing Then
    Else
     'replace ucet on HPU, padded left with zeros
     Set rng_TestUcet = Intersect(Target, [rng_KB_HPU_Ucty])
     Set rng_TestLKLR = Intersect(Target.EntireRow, [rng_KB_HPU_LKLR])
     Set rng_TestUcetUpraveny = Intersect(Target.EntireRow, [rng_KB_HPU_Ucet_Upraveny])
     rng_TestUcet = Replace(rng_TestUcet, "#", "")
      With rng_TestUcetUpraveny
        If rng_TestLKLR.Value = 0 Then
         If .Value = "000000-0000000000" Then
          rng_TestUcet = Empty
         Else
          rng_TestUcet.Value = .Value
         End If
        Else
         rng_TestUcet = "#" & .Value
        End If
      End With
    End If
       
    If IsError(rng_TestLKLR) Then
     rng_TestUcet = Empty
    End If
  Application.EnableEvents = True
End Sub

Attribute VB_Name = "L01_HPU_PS"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdVyberUcet, 527, 0, MSForms, CommandButton"
Attribute VB_Control = "chkPrintABO, 10, 1, MSForms, CheckBox"
Attribute VB_Control = "cmdGenABO, 8, 2, MSForms, CommandButton"
Attribute VB_Control = "cmdDatSplatnosti, 252, 3, MSForms, CommandButton"
Attribute VB_Control = "cmdDatVystaveni, 256, 4, MSForms, CommandButton"
Option Explicit
Private rng_TestUcet As Range, rng_TestLKLR As Range, _
        rng_TestUcetUpraveny As Range, _
        rng_wk As Range

Private Sub cmdDatSplatnosti_Click()
 Set rng_Target_Calendar_Value = [rng_PS_Area_1_Copied_to_KB]
 lngTop_Calendar = lngHeigh \ 10
 With frmCalendar
  .Caption = str_Calendar_Caption_Splatnost
  .Top = lngTop_Calendar
  .Show
 End With
End Sub

Private Sub cmdDatVystaveni_Click()
 Set rng_Target_Calendar_Value = [rng_PS_Area_5_Copied_to_KB]
 lngTop_Calendar = lngHeigh \ 3
 With frmCalendar
  .Caption = str_Calendar_Caption_Vystaveni
  .Top = lngTop_Calendar
  .Show
 End With
End Sub

Private Sub cmdGenABO_Click()
 If Trim([rng_PS_UCET1].Value) = "" Then
  MsgBox "Prvn|fffd| polo|fffd|ka nem|fffd| vypln|fffd|n|fffd| |fffd||fffd|et," & _
    vbLf & "D|fffd|vku pro banku neud|fffd|l|fffd|m a neud|fffd|l|fffd|m a neud|fffd|l|fffd|m..." & vbTab & "|fffd|" & _
    vbLf & "Howgh, domluvil jsem.", _
    vbOKOnly + vbCritical, "Chybka"
 Else
 
   'vyplnit KS u polo|fffd|ek kde nen|fffd| zad|fffd|n, pokud maj|fffd| zad|fffd|n |fffd||fffd|et
  '[rng_PS_Area_2_Copied_to_KB] =KS v zahlavi
  '[rng_HPU_PS_KS] = sloupec KS
  For Each rng_wk In [rng_HPU_PS_KS]
   With rng_wk
    If IsEmpty([rng_PS_Area_2_Copied_to_KB]) Then
      If Not IsEmpty(.Offset(0, -4).Value) Then
       If (IsEmpty(.Value) Or Not IsNumeric(.Value)) Then
        .Value = 0
       End If
      Else
        .Value = Empty
      End If
    Else
      If Not IsEmpty(.Offset(0, -4).Value) Then
       If (IsEmpty(.Value) Or Not IsNumeric(.Value)) Then
        .Value = [rng_PS_Area_2_Copied_to_KB].Value
       End If
      Else
        .Value = Empty
      End If
    End If
   End With
  Next
 
  Export_Data_PS
  msgInfo_PS
  If chkPrintABO Then
   PrintABO_PS
  End If
 End If
End Sub

Private Sub cmdVyberUcet_Click()
 [rng_PS_HPU_VyberUcet].Select
 SendKeys "%{DOWN}"
End Sub

'Private Sub dbg_Worksheet_Change()
Private Sub Worksheet_Change(ByVal Target As Range)
  Application.EnableEvents = False
  On Error Resume Next
    If Intersect(Target, [rng_PS_HPU_Ucty]) Is Nothing Then
    Else
     'replace ucet on HPU, padded left with zeros
     Set rng_TestUcet = Intersect(Target, [rng_PS_HPU_Ucty])
     Set rng_TestLKLR = Intersect(Target.EntireRow, [rng_PS_HPU_LKLR])
     Set rng_TestUcetUpraveny = Intersect(Target.EntireRow, [rng_PS_HPU_Ucet_Upraveny])
     rng_TestUcet = Replace(rng_TestUcet, "#", "")
      With rng_TestUcetUpraveny
        If rng_TestLKLR.Value = 0 Then
         If .Value = "000000-0000000000" Then
          rng_TestUcet = Empty
         Else
          rng_TestUcet.Value = .Value
         End If
        Else
         rng_TestUcet = "#" & .Value
        End If
      End With
    End If
       
    If IsError(rng_TestLKLR) Then
     rng_TestUcet = Empty
    End If
  Application.EnableEvents = True
End Sub

Attribute VB_Name = "L02_Nastaveni_KB"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "L02_Nastaveni_PS"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "L03_ABO"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "L03_EDIBest_KB"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "L04_ExtData_PS"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdPreview_and_Print, 6, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdDatSpla, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdDatVyst, 1, 2, MSForms, CommandButton"
Attribute VB_Control = "cmdValidateData, 3, 3, MSForms, CommandButton"
Attribute VB_Control = "cmdDoData, 5, 4, MSForms, CommandButton"
Attribute VB_Control = "cmdSmazKS, 8, 5, MSForms, CommandButton"
Attribute VB_Control = "cmdErase, 9, 6, MSForms, CommandButton"
Attribute VB_Control = "cmdVyberUcet, 11, 7, MSForms, CommandButton"
Option Explicit
Private swFullScreen As Boolean

Private Sub cmdDatSpla_Click()
 Set rng_Target_Calendar_Value = [rng_ExtData_PS_Splatnost]
 lngTop_Calendar = lngHeigh \ 20
 With frmCalendar
  .Caption = str_Calendar_Caption_Splatnost
  .Top = lngTop_Calendar
  .Show
 End With
End Sub

Private Sub cmdDatVyst_Click()
 Set rng_Target_Calendar_Value = [rng_ExtData_PS_Vystaveni]
 lngTop_Calendar = lngHeigh \ 20
 With frmCalendar
  .Caption = str_Calendar_Caption_Vystaveni
  .Top = lngTop_Calendar
  .Show
 End With
End Sub

Private Sub cmdDoData_Click()
Dim saveFullScreen As Boolean
 ValidateData_Phase_1
 PrepareRecords_Phase_2
  On Error Resume Next
  With Application
   saveFullScreen = .DisplayFullScreen
   .DisplayFullScreen = False
     L04_ExtData_PS.PrintPreview enablechanges:=False
   .DisplayFullScreen = saveFullScreen
  End With
End Sub

Private Sub cmdErase_Click()
 FilterOff_in_dB_ExtData
 Delete_All_on_PS_ExtData
End Sub

Private Sub cmdPreview_and_Print_Click()
Dim saveFullScreen As Boolean
  On Error Resume Next
  With Application
   saveFullScreen = .DisplayFullScreen
   .DisplayFullScreen = False
   L04_ExtData_PS.PrintPreview enablechanges:=False
   .DisplayFullScreen = saveFullScreen
  End With
End Sub

Private Sub cmdSmazKS_Click()
Dim intReply As Integer
intReply = MsgBox("Smazat V|fffd|ECHNY hodnoty ve sloupci KS?", _
               vbYesNo + vbDefaultButton2 + vbQuestion, "Dotaz")
If intReply = vbYes Then
 [rng_ExtData_PS_KS].ClearContents
End If
End Sub

Private Sub cmdValidateData_Click()
 ValidateData_Phase_1
End Sub

Private Sub cmdVyberUcet_Click()
 [rng_ExtData_VyberUcet].Select
 SendKeys "%{DOWN}"
End Sub

Private Sub Worksheet_Activate()
  With Application
   swFullScreen = .DisplayFullScreen
   .DisplayFullScreen = False
  End With
End Sub

Private Sub Worksheet_Deactivate()
 Application.DisplayFullScreen = swFullScreen
End Sub


Attribute VB_Name = "L05_ExtData_ABO_PS"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "L09_Maluvka"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "L10_Banky"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private lngWbkCount As Long, wbk As Workbook

Private Sub Workbook_BeforeClose(Cancel As Boolean)
 lngWbkCount = 0
  For Each wbk In Application.Workbooks
   If wbk Is ThisWorkbook Then
   ElseIf Left(wbk.Name, 8) = "PERSONAL" Then
       Else
        lngWbkCount = lngWbkCount + 1
   End If
  Next wbk
  
  Application.DisplayFullScreen = False
  L00.Activate
  Maximize_Excel_and_Document_Window
  DoEvents
  
  If lngWbkCount = 0 Then
   Application.Quit
  Else
   ThisWorkbook.Close
  End If
End Sub

Private Sub Workbook_Open()
 With Application
  .ScreenUpdating = False
    Minimize_Excel_and_Document_Window
    Init_All
    Maximize_Excel_and_Document_Window
  .DisplayFullScreen = True
  .ScreenUpdating = True
 End With
End Sub

Attribute VB_Name = "cCalendar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'#########################
'# Team authors:          #
'# Krisztina Szab|fffd|         #
'# G|fffd|bor Mad|fffd|cs             #
'# Roberto Mensa (nick r)    #
'##############################

'# Event Triggered By Main Object
Public Event AfterUpdate()
Public Event BeforeUpdate(ByRef Cancel As Integer)
Public Event Click()
Public Event DblClick()

'# Members for Main Object
Private WithEvents CBxY As MSForms.ComboBox
Attribute CBxY.VB_VarHelpID = -1
Private WithEvents CBxM As MSForms.ComboBox
Attribute CBxM.VB_VarHelpID = -1

Private CLb As MSForms.Label
Private mDayButtons() As cCalendar
Private mLabelButtons() As cCalendar

Private PTitleNewFont As MSForms.NewFont
Private PDayNewFont As MSForms.NewFont
Private PGridNewFont As MSForms.NewFont
'# Members for Button Object
Private WithEvents CmB As MSForms.CommandButton
Attribute CmB.VB_VarHelpID = -1
Private CmBl As MSForms.Label
Private CmBlNum As MSForms.Label
Private mcMain As cCalendar

'# For Properties
Private lPFontSize As Long
Private lPMonthLength As calMonthLength
Private lPDayLength As Long
Private bPYearFirst As Boolean
Private lPTitleFontColor As Long
Private lPGridFontColor As Long
Private lPDayFontColor As Long
Private lPFirstDay As calDayOfWeek
Private dValue As Date
Private lPBackColor As Long
Private lPMonth As Long
Private lPYear As Long
Private lPDay As Long
Private lPHeaderBackColor As Long
Private lPUseDefaultBackColors  As Boolean
Private bPVisible As Boolean
Private sPHeight As Single
Private sPWidth As Single
Private sPTop As Single
Private sPLeft As Single
Private lPSaturdayBackColor As Long
Private lPSundayBackColor As Long
Private lPSelectedBackColor As Long
Private sPControlTipText As String
Private bPTabStop As Boolean
Private lPTabIndex As Long
Private sPTag As String

Private bPShowDays As Boolean
Private bPShowTitle As Boolean
Private bPShowDateSelectors As Boolean
Private bPValueIsNull As Boolean
Private bPRightToLeft As Boolean

Private bPMACFix As Boolean 'Fix MAC transparency errors

Private Const cDayFontColorSelected As Long = &H80000012 'Button text - Black
Private Const cDayFontColorInactive As Long = &H80000011 'Disabled text - Dark gray
Private Const cDefaultWidth As Single = 216
Private Const cDefaultHeight As Single = 144

Public Enum calDayOfWeek
    dwMonday = 1
    dwTuesday = 2
    dwWednesday = 3
    dwThursday = 4
    dwFriday = 5
    dwSaturday = 6
    dwSunday = 7
End Enum

Public Enum calMonthLength
    mlLocalLong = 0
    mlLocalShort = 1
    mlENLong = 2
    mlENShort = 3
End Enum




'###########################
'# Properties for Main object
Private Sub AAA__Properties_Blank_for_compatibility()
End Sub

Public Property Get GridCellEffect() As Long
'Property Blank - not work
'Determines the effect used to display the grid.
End Property

Public Property Get GridLinesColor() As Long
'Property Blank - not work
'Determines the color used to display the lines in the grid.
End Property

Public Property Get ShowHorizontalGrid() As Boolean
'Property Blank - not work
'Specifies whether the calendar display horizontal gridlines.
End Property

Public Property Get ShowVerticalGrid() As Boolean
'Property Blank - not work
'Specifies whether to display vertical gridlines.
End Property

Public Property Get HelpContextID() As Long
'Property Blank - not work
'Specifies whether to display vertical gridlines.
End Property


'###########################
'# Properties for Main object
Private Sub AAA__Properties_Book()
End Sub

Public Property Get Tag() As String
    Tag = sPTag
End Property

Public Property Let Tag(sTag As String)
    sPTag = sTag
End Property

Public Property Get Parent() As Control
    If bInit Then
        Set Parent = CBxY.Parent.Parent
    Else
        Set Parent = Nothing
    End If
End Property

Public Property Get ValueIsNull() As Boolean
    ValueIsNull = bPValueIsNull
End Property

Public Property Let ValueIsNull(ByVal bValueIsNull As Boolean)
    bPValueIsNull = bValueIsNull
    If bInit Then
        Value = Value
    End If
End Property

Public Property Get ShowTitle() As Boolean
    ShowTitle = bPShowTitle
End Property

Public Property Let ShowTitle(ByVal bShowTitle As Boolean)
    bPShowTitle = bShowTitle
    If bInit Then
        CLb.Visible = bPShowTitle
        Move
    End If
End Property

Public Property Get ShowDays() As Boolean
    ShowDays = bPShowDays
End Property

Public Property Let ShowDays(ByVal bShowDays As Boolean)
    Dim i As Long
    bPShowDays = bShowDays
    If bInit Then
        For i = 0 To 6
            mLabelButtons(i).Obj_CmBl.Visible = bShowDays
        Next
        Move
    End If
End Property

Public Property Get ShowDateSelectors() As Boolean
    ShowDateSelectors = bPShowDateSelectors
End Property

Public Property Let ShowDateSelectors(ByVal bShowDateSelectors As Boolean)
    bPShowDateSelectors = bShowDateSelectors
    If bInit Then
        CBxY.Visible = bShowDateSelectors
        CBxM.Visible = bShowDateSelectors
        Move
    End If
End Property

Public Property Get TabIndex() As Long
    TabIndex = lPTabIndex
End Property

Public Property Let TabIndex(ByVal lTabIndex As Long)
    lPTabIndex = lTabIndex
    If bInit Then
        CBxY.Parent.TabIndex = lTabIndex
    End If
End Property

Public Property Get TabStop() As Boolean
    TabStop = bPTabStop
End Property

Public Property Let TabStop(ByVal bTabStop As Boolean)
    bPTabStop = bTabStop
    If bInit Then
        CBxY.Parent.TabStop = bTabStop
    End If
End Property

Public Property Get ControlTipText() As String
    ControlTipText = sPControlTipText
End Property

Public Property Let ControlTipText(ByVal sControlTipText As String)
    Dim i As Long
    sPControlTipText = sControlTipText
    If bInit Then
        For i = 0 To 6
            mLabelButtons(i).Obj_CmBl.ControlTipText = sControlTipText
        Next
        For i = 0 To 41
            mDayButtons(i).Obj_Cmb.ControlTipText = sControlTipText
        Next
        CBxM.ControlTipText = sControlTipText
        CBxY.ControlTipText = sControlTipText
        CLb.ControlTipText = sControlTipText
        'CBxY.Parent.ControlTipText = sControlTipText
    End If
End Property

Public Property Get GridFont() As MSForms.NewFont
    Set GridFont = PGridNewFont
End Property

Public Property Set GridFont(ByRef clGridNewFont As MSForms.NewFont)
    Set PGridNewFont = clGridNewFont
End Property

Public Property Get DayFont() As MSForms.NewFont
    Set DayFont = PDayNewFont
End Property

Public Property Set DayFont(ByRef clDayNewFont As MSForms.NewFont)
    Set PDayNewFont = clDayNewFont
End Property

Public Property Get TitleFont() As MSForms.NewFont
    Set TitleFont = PTitleNewFont
End Property

Public Property Set TitleFont(ByRef clTitleNewFont As MSForms.NewFont)
    Set PTitleNewFont = clTitleNewFont
End Property

Public Property Get Visible() As Boolean
    Visible = bPVisible
End Property

Public Property Let Visible(ByVal bVisible As Boolean)
    bPVisible = bVisible
    If bInit Then
        CBxY.Parent.Visible = bVisible
    End If
End Property

Public Property Get Left() As Single
    Left = sPLeft
End Property

Public Property Let Left(ByVal sLeft As Single)
    sPLeft = sLeft
    If bInit Then
        CBxY.Parent.Left = sLeft
    End If
End Property

Public Property Get Top() As Single
    Top = sPTop
End Property

Public Property Let Top(ByVal ssTop As Single)
    sPTop = ssTop
    If bInit Then
        CBxY.Parent.Top = ssTop
    End If
End Property

Public Property Get Height() As Single
    Height = sPHeight
End Property

Public Property Let Height(ByVal sHeight As Single)
    sPHeight = sHeight
    If bInit Then
        CBxY.Parent.Height = sHeight
        Move
    End If
End Property


Public Property Get Width() As Single
    Width = sPWidth
End Property

Public Property Let Width(ByVal sWidth As Single)
    'sWidth = Zero_Negative_Value(sWidth)
    sPWidth = sWidth
    If bInit Then
        CBxY.Parent.Width = sWidth
        Move
    End If
End Property

Public Property Get BackColor() As Long
    BackColor = lPBackColor
End Property

Public Property Let BackColor(ByVal lBackColor As Long)
    lPBackColor = lBackColor
    If bInit Then
        CBxY.Parent.BackColor = lBackColor
    End If
End Property

Public Property Get HeaderBackColor() As Long
    HeaderBackColor = lPHeaderBackColor
End Property

Public Property Let HeaderBackColor(ByVal lHeaderBackColor As Long)
Dim i As Long
    lPHeaderBackColor = lHeaderBackColor
    UseDefaultBackColors = False
End Property

Public Property Get UseDefaultBackColors() As Boolean
    UseDefaultBackColors = lPUseDefaultBackColors
End Property

Public Property Let UseDefaultBackColors(ByVal lUseDefaultBackColors As Boolean)
    lPUseDefaultBackColors = lUseDefaultBackColors
    If bInit Then
        Refresh
    End If
End Property

Public Property Get SaturdayBackColor() As Long
    SaturdayBackColor = lPSaturdayBackColor
End Property

Public Property Let SaturdayBackColor(ByVal lSaturdayBackColor As Long)
    lPSaturdayBackColor = lSaturdayBackColor
    UseDefaultBackColors = False
End Property

Public Property Get SundayBackColor() As Long
    SundayBackColor = lPSundayBackColor
End Property

Public Property Let SundayBackColor(ByVal lSundayBackColor As Long)
    lPSundayBackColor = lSundayBackColor
    UseDefaultBackColors = False
End Property

Public Property Get SelectedBackColor() As Long
    SelectedBackColor = lPSelectedBackColor
End Property

Public Property Let SelectedBackColor(ByVal lSelectedBackColor As Long)
    lPSelectedBackColor = lSelectedBackColor
    If bInit Then
        Refresh
    End If
End Property

Public Property Get FirstDay() As calDayOfWeek
    FirstDay = lPFirstDay
End Property

Public Property Let FirstDay(ByVal vbFirstDay As calDayOfWeek)
    Dim i As Long, v
    
    Select Case vbFirstDay
        Case 1 To 7
        Case Else
            vbFirstDay = 1
    End Select
    
    lPFirstDay = vbFirstDay
    If bInit Then
        ApplyWeekDayLabelChanges
        Refresh
    End If
End Property

Public Property Get DayFontColor() As Long
    DayFontColor = lPDayFontColor
End Property

Public Property Let DayFontColor(ByVal lFontColor As Long)
    Dim i As Long
    
    lPDayFontColor = lFontColor
    If bInit Then
        For i = 0 To 6
            mLabelButtons(i).Obj_CmBl.ForeColor = lFontColor
        Next
    End If
End Property

Public Property Get GridFontColor() As Long
    GridFontColor = lPGridFontColor
End Property

Public Property Let GridFontColor(ByVal lFontColor As Long)
    Dim i As Long
    lPGridFontColor = lFontColor
    If bInit Then
        Refresh
    End If
End Property

Public Property Let TitleFontColor(ByVal lFontColor As Long)
    lPTitleFontColor = lFontColor
    If bInit Then
        CLb.ForeColor = lFontColor
    End If
End Property

Public Property Get TitleFontColor() As Long
    TitleFontColor = lPTitleFontColor
End Property

Public Property Get Month() As Long
    Month = lPMonth
End Property

Public Property Let Month(ByVal lMonth As Long)
    If lMonth = 0 Then
        Value = Empty
    Else
        If lMonth < 0 Then lMonth = lPMonth
        lMonth = fMin(lMonth, 12)
        Value = SumMonthsToDate(dValue, lMonth - lPMonth)
    End If
    lPMonth = lMonth
End Property

Public Property Get Year() As Long
    Year = lPYear
End Property

Public Property Let Year(ByVal lYear As Long)
    If lYear = 0 Then
        Value = Empty
    Else
        Value = VBA.DateSerial(CheckYear(lYear), VBA.Month(dValue), VBA.Day(dValue))
    End If
    lPYear = lYear
End Property

Public Property Get Day() As Long
    Day = lPDay
End Property

Public Property Let Day(ByVal lDay As Long)
    If lDay = 0 Then
        Value = Empty
    Else
        If lDay < 0 Then lDay = lPDay
        lDay = fMin(lDay, VBA.Day(VBA.DateSerial(VBA.Year(dValue), VBA.Month(dValue) + 1, 0)))
        Value = VBA.DateSerial(VBA.Year(dValue), VBA.Month(dValue), lDay)
    End If
    lPDay = lDay
End Property

Public Property Get Value() As Variant
    If bPValueIsNull Then
        Value = Empty
    Else
        Value = dValue
    End If
End Property

Public Property Let Value(ByVal newDate As Variant)
    Dim Cancel As Integer '*** Integer for backward compatibility
    
    If CheckValue(newDate) = False Then newDate = Empty

    RaiseEvent BeforeUpdate(Cancel)
    
    If Cancel = 0 Then 'Not canceled.

        If bInit And Not IsEmpty(newDate) Then
            CBxY.ListIndex = VBA.Year(newDate) - 1904
            CBxM.ListIndex = VBA.Month(newDate) - 1
        End If
        
        If (bPValueIsNull = IsEmpty(newDate)) Or (newDate <> dValue) Then
            If Not IsEmpty(newDate) Then
                dValue = newDate
            End If
            bPValueIsNull = IsEmpty(newDate)
            
            If bInit Then
                Refresh
            End If
        End If
        
        RaiseEvent AfterUpdate
    End If
End Property

Public Property Get DayLength() As calMonthLength
    DayLength = lPDayLength
End Property

Public Property Let DayLength(ByVal bDayLength As calMonthLength)
    Dim i As Long, v

    lPDayLength = bDayLength
    If bInit Then
        ApplyWeekDayLabelChanges
    End If
End Property

Public Property Get MonthLength() As calMonthLength
    MonthLength = lPMonthLength
End Property

Public Property Let MonthLength(ByVal iMonthLength As calMonthLength)
    Dim i As Long, m

    lPMonthLength = iMonthLength

    If bInit Then
        CBxM.List = fMonthName(CLng(iMonthLength))
        Value = Value
    End If
End Property

Public Property Get YearFirst() As Boolean
    YearFirst = bPYearFirst
End Property

Public Property Let YearFirst(ByVal bYearFirst As Boolean)
    bPYearFirst = bYearFirst
    RenderLabel
End Property


Public Property Get MACFix() As Boolean
    MACFix = bPMACFix
End Property

Public Property Let MACFix(ByVal bMACFix As Boolean)
    bPMACFix = bMACFix
    Refresh
End Property


Public Property Get RightToLeft() As Boolean
    RightToLeft = bPRightToLeft
End Property

Public Property Let RightToLeft(ByVal bRightToLeft As Boolean)
    bPRightToLeft = bRightToLeft
    If bInit Then
        ApplyWeekDayLabelChanges
        Refresh
    End If
End Property


'###########################
'# Properties for Day button objects
Private Sub AAA__Properties_for_Day_button_Book()
End Sub

Public Property Set Main(ByVal theMain As cCalendar)
    Set mcMain = theMain
End Property

Private Property Get Main() As cCalendar
    Set Main = mcMain
End Property

Public Property Get Obj_Cmb() As MSForms.CommandButton
    Set Obj_Cmb = CmB
End Property

Public Property Set Obj_Cmb(ByVal vNewValue As MSForms.CommandButton)
    Set CmB = vNewValue
End Property

Public Property Get Obj_CmBl() As MSForms.Label
    Set Obj_CmBl = CmBl
End Property

Public Property Set Obj_CmBl(ByVal vNewValue As MSForms.Label)
    Set CmBl = vNewValue
End Property

Public Property Set Obj_CmBlNum(ByVal vNewValue As MSForms.Label)
    Set CmBlNum = vNewValue
End Property

Public Property Get Obj_CmBlNum() As MSForms.Label
    Set Obj_CmBlNum = CmBlNum
End Property


'###########################
'# Public Methods
Private Sub AAA_Methods_Book()
End Sub

Public Sub AboutBox()
    MsgBox "Autori: r, Kris, Gabor"
End Sub

Public Sub Add( _
    ByVal fForm As MSForms.UserForm)

    Dim cFrame As MSForms.Frame
    Set cFrame = fForm.Controls.Add("Forms.Frame.1")
    
    With cFrame
        .Width = IIf(sPWidth < 0, cDefaultWidth, sPWidth)
        .Height = IIf(sPHeight < 0, cDefaultHeight, sPHeight)
    End With
    
    Add_Calendar_into_Frame cFrame
    
End Sub

Public Sub Add_Calendar_into_Frame(ByVal cFrame As MSForms.Frame)
    Dim i As Long
    Dim v(199)
    Dim w
    Dim dTemp As Date
    
    For i = 0 To 199
        v(i) = CStr(1904 + i)
    Next
    
    With cFrame
        .BackColor = BackColor
        .Caption = ""
        .SpecialEffect = 0
        '.Top = IIf(sPTop = -1, .Top, sPTop)
        '.Left = IIf(sPLeft = -1, .Left, sPLeft)
        '.Width = IIf(sPWidth < 0, .Width, sPWidth)
        '.Height = IIf(sPHeight < 0, .Height, sPHeight)
        .Visible = bPVisible
        'Top = .Top
        'Left = .Left
        'Width = .Width
        'Height = .Height
    End With
    
    
    'Add this first, for proper taborder (Need TabStop.)
    Set CLb = cFrame.Controls.Add("Forms.Label.1")
    Set CBxY = cFrame.Controls.Add("Forms.ComboBox.1")
    Set CBxM = cFrame.Controls.Add("Forms.ComboBox.1")
    
    ReDim mLabelButtons(6)
    ReDim mDayButtons(41)
    w = fWeekdayName(CInt(lPDayLength))
    
    For i = 0 To 6
        Set mLabelButtons(i) = New cCalendar
        Set mLabelButtons(i).Main = Me
        Set mLabelButtons(i).Obj_CmBl = cFrame.Controls.Add("Forms.Label.1")
        With mLabelButtons(i).Obj_CmBl
            .Caption = w(((i + lPFirstDay - 1) Mod 7))
            .ForeColor = DayFontColor
            .TextAlign = fmTextAlignCenter
            .BorderStyle = fmBorderStyleSingle
            .BorderColor = &H80000010 'Button shadow  &H80000015 'Button dark shadow
            '.SpecialEffect = fmSpecialEffectEtched
            If HeaderBackColor = -1 Then
                .BackColor = cDayFontColorSelected 'Dark gray
                .BackStyle = fmBackStyleTransparent
            Else
                .BackColor = HeaderBackColor
                .BackStyle = fmBackStyleOpaque
            End If
        End With
    Next
            
    For i = 0 To 41
        Set mDayButtons(i) = New cCalendar
        Set mDayButtons(i).Main = Me
        
        Set mDayButtons(i).Obj_CmBl = cFrame.Controls.Add("Forms.Label.1")
        With mDayButtons(i).Obj_CmBl 'MAC Fix
            .TextAlign = fmTextAlignCenter
        End With
        
        Set mDayButtons(i).Obj_CmBlNum = cFrame.Controls.Add("Forms.Label.1")
        With mDayButtons(i).Obj_CmBlNum
            .TextAlign = fmTextAlignCenter
            .BackStyle = fmBackStyleTransparent
        End With
        
        Set mDayButtons(i).Obj_Cmb = cFrame.Controls.Add("Forms.CommandButton.1")
        With mDayButtons(i).Obj_Cmb
            .BackStyle = fmBackStyleTransparent 'MAC Problem: No button transparency
        End With
        
        mDayButtons(i).RightToLeft = bPRightToLeft
    Next
    
    With CBxY
        .ListRows = 5
        .List = v
        .ListIndex = VBA.Year(dValue) - 1904
        .ShowDropButtonWhen = fmShowDropButtonWhenFocus
        .font.Bold = True
        .MatchRequired = True
    End With

    With CBxM
        .ListRows = 12
        .List = fMonthName(lPMonthLength)
        .ListIndex = VBA.Month(dValue) - 1
        .ShowDropButtonWhen = fmShowDropButtonWhenFocus
        .font.Bold = True
        .MatchRequired = True
    End With
    
    With CLb
        .ForeColor = TitleFontColor
        .TextAlign = fmTextAlignCenter
        .BackStyle = fmBackStyleTransparent
    End With
    
    ApplyWeekDayLabelChanges
    
    ApplyFontChanges
    
    Refresh_Properities
    
    Move
    
End Sub

Private Sub ApplyWeekDayLabelChanges()
    Dim i As Long
    Dim w
    
    w = fWeekdayName(CInt(lPDayLength))
    For i = 0 To 6
        If bPRightToLeft Then
            mLabelButtons(6 - i).Obj_CmBl.Caption = w((i + lPFirstDay - 1) Mod 7)
        Else
            mLabelButtons(i).Obj_CmBl.Caption = w((i + lPFirstDay - 1) Mod 7)
        End If
    Next
End Sub

Private Sub ApplyFontChanges()
    Dim font As MSForms.NewFont
    Dim i As Long

    If Not PDayNewFont Is Nothing Then
        For i = 0 To 6
            With mLabelButtons(i).Obj_CmBl
                If .font.Bold <> DayFont.Bold Then _
                    .font.Bold = DayFont.Bold
                If .font.Weight <> DayFont.Weight Then _
                    .font.Weight = DayFont.Weight
                If .font.Charset <> DayFont.Charset Then _
                    .font.Charset = DayFont.Charset
                If .font.Italic <> DayFont.Italic Then _
                    .font.Italic = DayFont.Italic
                If .font.Name <> DayFont.Name Then _
                    .font.Name = DayFont.Name
                If .font.Size <> DayFont.Size Then _
                    .font.Size = DayFont.Size
                If DayFont.Strikethrough Then _
                    .font.Strikethrough = True
                If DayFont.Underline Then _
                    .font.Underline = True
            End With
        Next
    End If
            
    If Not PGridNewFont Is Nothing Then
        For i = 0 To 41
            If Not bPMACFix Then
                Set font = mDayButtons(i).Obj_CmBlNum.font
            Else
                Set font = mDayButtons(i).Obj_Cmb.font
            End If
        
            With font
                If .Bold <> GridFont.Bold Then _
                    .Bold = GridFont.Bold
                If .Weight <> GridFont.Weight Then _
                    .Weight = GridFont.Weight
                If .Charset <> GridFont.Charset Then _
                    .Charset = GridFont.Charset
                If .Italic <> GridFont.Italic Then _
                    .Italic = GridFont.Italic
                If .Name <> GridFont.Name Then _
                    .Name = GridFont.Name
                If .Size <> GridFont.Size Then _
                    .Size = GridFont.Size
                If GridFont.Strikethrough Then _
                    .Strikethrough = True
                If GridFont.Underline Then _
                    .Underline = True
            End With
        Next
    End If
    
    If Not PTitleNewFont Is Nothing Then
        With CLb
                If .font.Bold <> TitleFont.Bold Then _
                    .font.Bold = TitleFont.Bold
                If .font.Weight <> TitleFont.Weight Then _
                    .font.Weight = TitleFont.Weight
                If .font.Charset <> TitleFont.Charset Then _
                    .font.Charset = TitleFont.Charset
                If .font.Italic <> TitleFont.Italic Then _
                    .font.Italic = TitleFont.Italic
                If .font.Name <> TitleFont.Name Then _
                    .font.Name = TitleFont.Name
                If .font.Size <> TitleFont.Size Then _
                    .font.Size = TitleFont.Size
                If TitleFont.Strikethrough Then _
                    .font.Strikethrough = True
                If TitleFont.Underline Then _
                    .font.Underline = True
        End With
    End If

End Sub

Public Sub Move( _
        Optional vLeft, _
        Optional vTop, _
        Optional vWidth, _
        Optional vHeight, _
        Optional vLayout)
        
    Dim i As Long, l As Currency, b As Currency, lc As Currency, bc As Currency
    Dim t As Long, b_ym As Currency, b_combo_m As Currency
    
    Const h_combo As Long = 16
    Const b_combo_y As Long = 42
    b_combo_m = IIf(lPMonthLength = mlENShort Or lPMonthLength = mlLocalShort, 42, 66) '66
    b_ym = b_combo_y + 2 + b_combo_m
    
    If bInit Then
        t = IIf(ShowDays, 7, 6)
        
        With CBxY.Parent 'Frame
            sPTop = IIf(IsMissing(vTop), IIf(Top = -1, .Top, Top), vTop)
            sPLeft = IIf(IsMissing(vLeft), IIf(Left = -1, .Left, Left), vLeft)
            sPHeight = IIf(IsMissing(vHeight), IIf(Height = -1, .Height, Height), vHeight)
            sPWidth = IIf(IsMissing(vWidth), IIf(Width = -1, .Width, Width), vWidth)
            
            l = Height
            b = Width
            l = Zero_Negative_Value(l - IIf(ShowTitle Or ShowDateSelectors, h_combo, 0) - 1)
            lc = CCur(l / t)
            bc = CCur(b / 7)
            b = bc * 7
            'Debug.Print bc
            'Debug.Print lc
            'Debug.Print b
            'Debug.Print l
            
        End With
        
        If ShowTitle Then
            With CLb
                .Width = Zero_Negative_Value(IIf(ShowDateSelectors, b - b_ym, b))
                .Height = h_combo
                .Left = 0
            End With
        End If
        
        If ShowDateSelectors Then
            With CBxY
                .Width = b_combo_y
                .Height = h_combo
                .Left = IIf(ShowTitle, CLb.Width, Int((b - b_ym) / 2)) + _
                       IIf(YearFirst, 0, b_combo_m + 2)
            End With
        
            With CBxM
                .Width = b_combo_m
                .Height = h_combo
                .Left = IIf(ShowTitle, CLb.Width, Int((b - b_ym) / 2)) + _
                       IIf(YearFirst, b_combo_y + 2, 0)
            End With
        End If
        If ShowDays Then
            For i = 0 To 6
                With mLabelButtons(i).Obj_CmBl
                    .Top = IIf(ShowTitle Or ShowDateSelectors, h_combo + 2, 0)
                    .Left = (i Mod 7) * bc - IIf(i > 0, 1, 0)
                    .Height = lc
                    .Width = bc + IIf(i > 0, 1, 0)
                End With
            Next
        End If
        For i = 0 To 41
            With mDayButtons(i).Obj_Cmb
                .Top = Int(i / 7) * lc + _
                       IIf(ShowTitle Or ShowDateSelectors, h_combo + 2, 0) + _
                       IIf(ShowDays, lc, 0)
                .Left = (i Mod 7) * bc
                .Height = lc
                .Width = bc
            End With
            With mDayButtons(i).Obj_CmBl
                .Top = mDayButtons(i).Obj_Cmb.Top
                .Left = mDayButtons(i).Obj_Cmb.Left
                .Height = mDayButtons(i).Obj_Cmb.Height
                .Width = mDayButtons(i).Obj_Cmb.Width
            End With
            
            With mDayButtons(i).Obj_CmBlNum
                .Top = Int(i / 7) * lc + _
                       IIf(ShowTitle Or ShowDateSelectors, h_combo, 0) + _
                       IIf(ShowDays, lc, 0) + 6
                .Left = (i Mod 7) * bc + 3
                .Height = Zero_Negative_Value(lc - 6)
                .Width = Zero_Negative_Value(bc - 6)
            End With

        Next
        
    Else
        sPHeight = IIf(IsMissing(Height), cDefaultHeight, Height)
        sPWidth = IIf(IsMissing(Width), cDefaultWidth, Width)
    End If
End Sub

Public Sub NextDay()
    Dim d As Date
    d = dValue + 1
    d = VBA.DateSerial(CheckYear(VBA.Year(d)), VBA.Month(d), VBA.Day(d))
    Value = d
End Sub

Public Sub NextWeek()
    Dim d As Date
    d = dValue + 7
    d = VBA.DateSerial(CheckYear(VBA.Year(d)), VBA.Month(d), VBA.Day(d))
    Value = d
End Sub

Public Sub NextMonth()
    Value = SumMonthsToDate(dValue, 1)
End Sub

Public Sub NextYear()
    Dim d As Date
    d = VBA.DateSerial(CheckYear(VBA.Year(dValue) + 1), VBA.Month(dValue), VBA.Day(dValue))
    Value = d
End Sub

Public Sub PreviousDay()
    Dim d As Date
    d = dValue - 1
    d = VBA.DateSerial(CheckYear(VBA.Year(d)), VBA.Month(d), VBA.Day(d))
    Value = d
End Sub

Public Sub PreviousWeek()
    Dim d As Date
    d = dValue - 7
    d = VBA.DateSerial(CheckYear(VBA.Year(d)), VBA.Month(d), VBA.Day(d))
    Value = d
End Sub

Public Sub PreviousMonth()
    Value = SumMonthsToDate(dValue, -1)
End Sub

Public Sub PreviousYear()
    Dim d As Date
    d = VBA.DateSerial(CheckYear(VBA.Year(dValue) - 1), VBA.Month(dValue), VBA.Day(dValue))
    Value = d
End Sub

Public Sub Today()
    Value = VBA.Date
End Sub

Public Sub Refresh()
    If bInit Then
        Refresh_Panel VBA.Month(dValue), VBA.Year(dValue)
        ApplyFontChanges
    End If
End Sub


'###########################
Private Sub AAA_Event_Book()
End Sub
'# Events for Main Object Components
'###########################

Private Sub CBxY_Change()
    RenderLabel
    Refresh_Panel CBxM.ListIndex + 1, CBxY.ListIndex + 1904
End Sub

Private Sub CBxM_Change()
    RenderLabel
    Refresh_Panel CBxM.ListIndex + 1, CBxY.ListIndex + 1904
End Sub

Private Sub CmB_Click()
    Main.Value = dValue
    Main.Event_click = True
End Sub

Private Sub CmB_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Main.Event_DblClick = True
End Sub


Private Sub CmB_KeyDown( _
    ByVal KeyCode As MSForms.ReturnInteger, _
    ByVal Shift As Integer)
    
    Dim newDate As Date

    '38 Up
    '37 Left
    '39 Right
    '40 Down
    
    newDate = dValue
    
    Select Case KeyCode
    Case 37
        If bPRightToLeft Then
            newDate = newDate + 1
        Else
            newDate = newDate - 1
        End If
    Case 39
        If bPRightToLeft Then
            newDate = newDate - 1
        Else
            newDate = newDate + 1
        End If
    Case 38
        newDate = newDate - 7
    Case 40
        newDate = newDate + 7
    Case 9
    End Select
    
    If newDate <> dValue Then
        Main.Value = newDate
        KeyCode = 0
    End If
End Sub

Private Sub Class_Initialize()
    bPShowDays = True
    bPShowTitle = True
    bPShowDateSelectors = True
    dValue = VBA.Date
    lPMonth = VBA.Month(VBA.Date)
    lPYear = VBA.Year(VBA.Date)
    lPDay = VBA.Day(VBA.Date)
    lPFontSize = 8
    lPMonthLength = 1
    lPDayLength = 1
    bPYearFirst = False
    lPTitleFontColor = &HA00000
    lPGridFontColor = &HA00000
    lPDayFontColor = &H0&
    lPFirstDay = 1
    lPBackColor = &H8000000F
    'lPHeaderBackColor = 10053171 '&HFFAA99
    lPHeaderBackColor = &HE3FFF7
    'lPUseDefaultBackColors = True
    lPUseDefaultBackColors = False
    'lPSaturdayBackColor = &H80000002
    lPSaturdayBackColor = &HEBF7FE
    'lPSundayBackColor = &HFFAA99 '&H80000002
    lPSundayBackColor = &HD0E7FD
    'lPSelectedBackColor = &H80000011
    lPSelectedBackColor = &HF0FFF1
    bPVisible = True
    sPHeight = -1
    sPWidth = -1
    sPTop = -1
    sPLeft = -1
    sPControlTipText = ""
    bPRightToLeft = False
    
    Set TitleFont = New MSForms.NewFont
    With TitleFont
        .Name = "Arial"
        .Size = lPFontSize + 4
        .Bold = True
    End With
    
    Set DayFont = New MSForms.NewFont
    With DayFont
        .Name = "Arial"
        .Size = lPFontSize + 2
        .Bold = True
    End With
    
    Set GridFont = New MSForms.NewFont
    With GridFont
        .Name = "Arial"
        .Size = lPFontSize
    End With
End Sub

Private Sub Class_Terminate()
    Erase mDayButtons
    Erase mLabelButtons
    Set mcMain = Nothing
    Set PTitleNewFont = Nothing
    Set PDayNewFont = Nothing
    Set PGridNewFont = Nothing
    Set CBxY = Nothing
    Set CBxM = Nothing
    Set CmB = Nothing
    Set CLb = Nothing
    Set CmBl = Nothing
End Sub

'###########################
'# Private Function
Private Sub AAA_Private_Function_Book()
End Sub

Private Function ArraY_Days(ByVal lMonth As Long, ByVal lYear As Long)
    Dim v(0 To 41) As Date, i As Long, g As Long, l As Long, p As Long, t As Date
    
    i = VBA.DateTime.Weekday( _
        VBA.DateSerial(lYear, lMonth, 1), 1 + lPFirstDay Mod 7) - 1
    
    
    If i = 0 Then i = 7
    
    g = VBA.Day(VBA.DateSerial(lYear, lMonth + 1, 0)) + i
    
    p = 1
    For l = i To 0 Step -1
        v(l) = VBA.DateSerial(lYear, lMonth, p)
        p = p - 1
    Next
    
    p = 0
    For l = i To g
        p = p + 1
        v(l) = VBA.DateSerial(lYear, lMonth, p)
    Next
    
    For l = g To 41
        v(l) = VBA.DateSerial(lYear, lMonth, p)
        p = p + 1
    Next
    
    If bPRightToLeft Then
        For l = 0 To 5
            For i = 0 To 2
                t = v(l * 7 + i)
                v(l * 7 + i) = v(l * 7 + (6 - i))
                v(l * 7 + (6 - i)) = t
            Next
        Next
    End If
    
    ArraY_Days = v
End Function

Private Sub RenderLabel()
    Dim b As Currency, b_ym As Currency, b_combo_m As Long
    
    Const b_combo_y As Long = 42
    b_combo_m = IIf(lPMonthLength = mlENShort Or lPMonthLength = mlLocalShort, 42, 66) '66
    b_ym = b_combo_y + 2 + b_combo_m
    
    If bInit Then
        b = CBxY.Parent.Width
        If bPYearFirst Then
            CLb.Caption = CBxY.Value & " " & CBxM.Value
        Else
            CLb.Caption = CBxM.Value & " " & CBxY.Value
        End If
        CLb.Width = Zero_Negative_Value(IIf(ShowDateSelectors, b - b_ym, b))
        CBxM.Width = b_combo_m
        CBxY.Left = IIf(ShowTitle, CLb.Width, CCur((b - b_ym) / 2)) + _
                       IIf(YearFirst, 0, b_combo_m + 2)
        CBxM.Left = IIf(ShowTitle, CLb.Width, CCur((b - b_ym) / 2)) + _
                       IIf(YearFirst, b_combo_y + 2, 0)
        'CBxY.Left = IIf(ShowTitle, CLb.Width, IIf(CLb.Width, Int(CLb.Width / 2), 0)) + _
        '           IIf(YearFirst, 0, b_combo_m + 2)
        '
        'CBxM.Left = IIf(ShowTitle, CLb.Width, IIf(CLb.Width, Int(CLb.Width / 2), 0)) + _
        '           IIf(YearFirst, b_combo_y + 2, 0)
    End If
End Sub

Private Function bInit() As Boolean
    If Not CBxY Is Nothing Then bInit = True
End Function


Private Function SumMonthsToDate(dDate As Date, Optional lMonth As Long = 1) As Date
    Dim d As Date
    
    d = VBA.DateSerial( _
            VBA.Year(dDate), _
            VBA.Month(dDate) + lMonth, _
            fMin( _
                VBA.Day(dDate), _
                VBA.Day( _
                    VBA.DateSerial( _
                    VBA.Year(dDate), _
                    VBA.Month(dDate) + 1 + VBA.Abs(lMonth), _
                    0))))
                    
    If d = VBA.DateSerial(CheckYear(VBA.Year(d)), VBA.Month(d), VBA.Day(d)) Then
        SumMonthsToDate = d
    Else
        SumMonthsToDate = dDate
    End If
End Function

Private Function fMin(vFirstValue, ParamArray vValues())
    Dim i As Long
    fMin = vFirstValue
    
    If IsMissing(vValues) = False Then
    For i = 0 To UBound(vValues)
        If fMin > vValues(i) Then
            fMin = vValues(i)
        End If
    Next
    End If
End Function

Private Function fMonthName(lIndex As Long)
    Dim m(11), i As Long, v
    lIndex = lIndex Mod 4
    If Int(lIndex / 2) Then
        If lIndex Mod 2 Then
            v = Array("Jan", "Feb", "Mar", "Apr", "May", _
                "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
        Else
            v = Array("January", "February", "March", _
                "April", "May", "June", "July", "August", _
                "September", "October", "November", "December")
        End If
        fMonthName = v
    Else
        For i = 0 To 11
            m(i) = VBA.Strings.MonthName(i + 1, lIndex Mod 2)
        Next
        fMonthName = m
    End If
End Function


Private Function fWeekdayName(lIndex As Long)
    Dim m(6), i As Long, v
    lIndex = lIndex Mod 4
    If Int(lIndex / 2) Then
        If lIndex Mod 2 Then
            v = Array("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
        Else
            v = Array("Monday", "Tuesday", "Wednesday", _
                "Thursday", "Friday", "Saturday", "Sunday")
        End If
        fWeekdayName = v
    Else
        For i = 0 To 6
            m(i) = VBA.Strings.WeekdayName(i + 1, lIndex Mod 2, vbMonday)
        Next
        fWeekdayName = m
    End If
End Function


Private Function CheckYear(ByVal lYear As Long) As Long
    Select Case lYear
    Case Is < 1904
        CheckYear = 1904
    Case 1904 To 2103
        CheckYear = lYear
    Case Else
        CheckYear = 2103
    End Select
End Function

'###########################
'# Private Sub
Private Sub AAA_Private_Sub_Book()
End Sub

Public Property Let Event_DblClick(ByVal X As Boolean)
    RaiseEvent DblClick
End Property

Private Property Get Event_DblClick() As Boolean
    Event_DblClick = False
End Property


Public Property Let Event_click(ByVal X As Boolean)
    RaiseEvent Click
End Property

Private Property Get Event_click() As Boolean
    Event_click = False
End Property

Private Sub Refresh_Properities()
    With Me
        .BackColor = .BackColor
        .ControlTipText = .ControlTipText
        .DayFontColor = .DayFontColor
        .DayLength = .DayLength
        .GridFontColor = .GridFontColor
        .MonthLength = .MonthLength
        If .UseDefaultBackColors = False Then
            .SaturdayBackColor = .SaturdayBackColor
            .SundayBackColor = .SundayBackColor
            .HeaderBackColor = .HeaderBackColor
        End If
        .ShowDateSelectors = .ShowDateSelectors
        .ShowDays = .ShowDays
        .ShowTitle = .ShowTitle
        .TabIndex = .TabIndex
        .TabStop = .TabStop
        .TitleFontColor = .TitleFontColor
        .ValueIsNull = .ValueIsNull
        .YearFirst = .YearFirst
    End With
End Sub

Private Sub Refresh_Selected_Day(ByVal dValue As Date)
    Dim i As Long, c As MSForms.Label
    For i = 0 To 41
        If mDayButtons(i).Value = dValue And Not bPValueIsNull Then
            On Error Resume Next
            mDayButtons(i).Obj_Cmb.SetFocus
            On Error GoTo 0
            If Not bPMACFix Then
                With mDayButtons(i).Obj_CmBl
                    .BackStyle = fmBackStyleOpaque
                    .BackColor = lPSelectedBackColor
                    .ForeColor = cDayFontColorSelected
                End With
            Else
                With mDayButtons(i).Obj_Cmb
                    .BackStyle = fmBackStyleOpaque
                    .BackColor = lPSelectedBackColor
                    .ForeColor = cDayFontColorSelected
                End With
            End If
            lPMonth = VBA.Month(dValue)
            lPYear = VBA.Year(dValue)
            lPDay = VBA.Day(dValue)
        End If
    Next

End Sub

Private Sub Refresh_Panel(ByVal lMonth As Long, ByVal lYear As Long)
    Dim v, i As Long, l As Long
    Dim iDay As Long
    
    If bInit Then
        v = ArraY_Days(lMonth, lYear)
        For i = 0 To 41
            mDayButtons(i).Value = v(i)
            If Not bPMACFix Then 'MAC: no label - command button text
                '# Normal mode
                ' Text day label
                With mDayButtons(i).Obj_CmBlNum
                    If .Caption <> VBA.Day(v(i)) Then
                        .Caption = VBA.Day(v(i))
                    End If
                    If lMonth = VBA.Month(v(i)) Then
                        If .ForeColor <> GridFontColor Then
                            .ForeColor = GridFontColor
                        End If
                    Else
                        If .ForeColor <> cDayFontColorInactive Then
                            .ForeColor = cDayFontColorInactive
                        End If
                    End If
                End With
                ' Day background label
                With mDayButtons(i).Obj_CmBl
                    If .BackStyle = fmBackStyleOpaque Then
                        .BackStyle = fmBackStyleTransparent
                    End If
                    If UseDefaultBackColors = False Then
                        iDay = VBA.DateTime.Weekday(v(i))
                        If iDay = vbSaturday Then
                            If .BackColor <> lPSaturdayBackColor Then
                                .BackColor = lPSaturdayBackColor
                            End If
                            If .BackStyle <> fmBackStyleOpaque Then
                                .BackStyle = fmBackStyleOpaque
                            End If
                        ElseIf iDay = vbSunday Then
                            If .BackColor <> lPSundayBackColor Then
                                .BackColor = lPSundayBackColor
                            End If
                            If .BackStyle <> fmBackStyleOpaque Then
                                .BackStyle = fmBackStyleOpaque
                            End If
                        End If
                    End If
                End With
                ' Button not altered
                With mDayButtons(i).Obj_Cmb
                    If .Caption <> "" Then 'After MACFix
                        .Caption = ""
                    End If
                End With
            Else
                '# MAC Fix mode
                With mDayButtons(i).Obj_CmBlNum
                    If .Caption <> "" Then
                        .Caption = ""
                    End If
                End With
                With mDayButtons(i).Obj_CmBl
                    If .BackStyle = fmBackStyleOpaque Then
                        .BackStyle = fmBackStyleTransparent
                    End If
                End With
                With mDayButtons(i).Obj_Cmb
                    If .Caption <> VBA.Day(v(i)) Then
                        .Caption = VBA.Day(v(i))
                    End If
                    If lMonth = VBA.Month(v(i)) Then
                        If .ForeColor <> GridFontColor Then
                            .ForeColor = GridFontColor
                        End If
                    Else
                        If .ForeColor <> cDayFontColorInactive Then
                            .ForeColor = cDayFontColorInactive
                        End If
                    End If
                    If .BackStyle <> fmBackStyleOpaque Then 'Button visible
                        .BackStyle = fmBackStyleOpaque
                    End If
                    If UseDefaultBackColors = False Then
                        iDay = VBA.DateTime.Weekday(v(i))
                        If iDay = vbSaturday Then
                            If .BackColor <> lPSaturdayBackColor Then
                                .BackColor = lPSaturdayBackColor
                            End If
                        ElseIf iDay = vbSunday Then
                            If .BackColor <> lPSundayBackColor Then
                                .BackColor = lPSundayBackColor
                            End If
                        Else
                            If .BackColor <> BackColor Then
                                .BackColor = BackColor
                            End If
                        End If
                    Else
                        If .BackColor <> BackColor Then
                            .BackColor = BackColor
                        End If
                    End If
                End With
            End If
'            With mDayButtons(i).Obj_CmBl
'                If .BackStyle = fmBackStyleOpaque Then
'                    .BackStyle = fmBackStyleTransparent
'                End If
'                If bPMACFix Then 'MAC: no label - command button text
'                    If .Caption <> VBA.Day(v(i)) Then
'                        .Caption = VBA.Day(v(i))
'                    End If
'                    If lMonth = VBA.Month(v(i)) Then
'                        If .ForeColor <> GridFontColor Then
'                            .ForeColor = GridFontColor
'                        End If
'                    Else
'                        If .ForeColor <> cDayFontColorInactive Then
'                            .ForeColor = cDayFontColorInactive
'                        End If
'                    End If
'                Else
'                    If .Caption <> "" Then
'                        .Caption = ""
'                    End If
'                End If
'                If UseDefaultBackColors = False Then
'                    iDay = VBA.DateTime.Weekday(v(i))
'                    If iDay = vbSaturday Then
'                        If .BackColor <> lPSaturdayBackColor Then
'                            .BackColor = lPSaturdayBackColor
'                        End If
'                        If .BackStyle <> fmBackStyleOpaque Then
'                            .BackStyle = fmBackStyleOpaque
'                        End If
'                    ElseIf iDay = vbSunday Then
'                        If .BackColor <> lPSundayBackColor Then
'                            .BackColor = lPSundayBackColor
'                        End If
'                        If .BackStyle <> fmBackStyleOpaque Then
'                            .BackStyle = fmBackStyleOpaque
'                        End If
'                    End If
'                End If
'            End With
            If CheckValue(v(i)) = False Then
                mDayButtons(i).Obj_Cmb.Locked = True
            Else
                If mDayButtons(i).Obj_Cmb.Locked = True Then
                    mDayButtons(i).Obj_Cmb.Locked = False
                End If
            End If
        Next
        
        If UseDefaultBackColors = False Then
            For l = 0 To 6
                If mLabelButtons(l).Obj_CmBl.BackStyle = fmBackStyleTransparent Then _
                    mLabelButtons(l).Obj_CmBl.BackStyle = fmBackStyleOpaque
                If mLabelButtons(l).Obj_CmBl.BackColor <> lPHeaderBackColor Then _
                    mLabelButtons(l).Obj_CmBl.BackColor = lPHeaderBackColor
            Next
        Else
            For l = 0 To 6
                If mLabelButtons(l).Obj_CmBl.BackStyle = fmBackStyleOpaque Then _
                    mLabelButtons(l).Obj_CmBl.BackStyle = fmBackStyleTransparent
            Next
        End If
        
        If lMonth = VBA.Month(dValue) And lYear = VBA.Year(dValue) Then
            Refresh_Selected_Day dValue
        Else
            lPMonth = 0
            lPYear = 0
            lPDay = 0
        End If
    End If
End Sub

Private Function CheckValue(d) As Boolean
If VarType(d) = vbDate Then
    Select Case d
        Case 1462 To 74510
            CheckValue = CLng(d) = d
    End Select
End If
End Function

Private Function Zero_Negative_Value(sNumber As Single) As Single
If sNumber > 0 Then
    Zero_Negative_Value = sNumber
End If
End Function



Attribute VB_Name = "dbg"
Option Explicit
'for dbg only
Private Sub UnlockAll()
Dim sh As Worksheet
  Application.ScreenUpdating = False
   ThisWorkbook.Unprotect Password:=pwd
    For Each sh In ThisWorkbook.Worksheets
      With sh
       .Visible = xlSheetVisible
       .Unprotect Password:=pwd
      End With
    Next sh
  Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "frmCalendar"
Attribute VB_Base = "0{2B4D1618-0106-4744-ADC1-746B16B5DA73}{C5639603-9DB7-47D7-8DBB-C328F6A6D46B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private WithEvents theCal As cCalendar
Attribute theCal.VB_VarHelpID = -1

Private Sub cmdOK_Click()
 rng_Target_Calendar_Value.Value = theCal.Value
 Unload Me
End Sub

Private Sub cmdStorno_Click()
 Unload Me
End Sub

Private Sub UserForm_Initialize()
    Set theCal = New cCalendar
    With theCal
     .FirstDay = 1
     .MonthLength = mlLocalLong
     .ShowDays = True
     .ShowDateSelectors = True
     .ShowTitle = True
     .DayFont.Size = 10
     .GridFont.Size = 9
     .RightToLeft = False
     
     'not needed, set in Class Modul
     '.HeaderBackColor = &HE3FFF7
     '.SaturdayBackColor = &HEBF7FE
     '.SundayBackColor = &HD0E7FD
     '.SelectedBackColor = &HF0FFF1
     
     .Add_Calendar_into_Frame Me.fraCal
    End With
End Sub

' InQuest injected base64 decoded content
' ~`ZrD

INQUEST-PP=macro
