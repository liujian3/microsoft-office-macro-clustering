Attribute VB_Name = "P00_Common"

'=======================================================
' |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2K.4 by LSQ
'=======================================================
Option Explicit

Public Const MSG_ERR_DATARAGE As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Public Const ERR_COMM_ITEM_SMP As String = "|fffd||348||34e|w|fffd||80aa||fffd|A|fffd|u|fffd|I|fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd||fffd||30c||90||fffd||fffd||12d09||7c2||fffd||fffd||102||fffd||fffd||fffd|v|fffd||202||1c1|A|fffd|K|fffd||602||142||342||202||fffd||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Public Const ERR_COMMB_NUMBER As String = "|fffd|u|fffd|f|fffd|[|fffd|^|fffd||30c||90||fffd||fffd|v|fffd|u|fffd|I|fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd||fffd||30c||90||fffd||fffd|v|fffd|un|fffd||312|l|fffd|v|fffd||202||1c2||256||fffd||fffd||302||fffd||fffd||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Public Const ERR_COMMC_GENERAL As String = "|fffd|G|fffd||fffd||fffd|[|fffd||142||fffd||fffd|B"


Sub changeToSSDir()
    '--------------------------------------------------------|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||303|t|fffd|H|fffd||fffd||fffd|_|fffd||248||693||fffd|
    Dim pathName As String, driveName As String
    pathName = getPathName()
    driveName = Left(pathName, 1)
    If driveName <> "\" Then
        ChDrive driveName
    End If
    ChDir pathName
End Sub

Function getPathName() As String
    '-------------------------------------------------------|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||303|p|fffd|X|fffd||64fe|
    getPathName = ThisWorkbook.Path     'Workbooks(GbookNameXla).Path
End Function
'
'
Function toXlRCstr(inputFormula As String) As String
    '-----------------------------------|fffd|e|fffd|L|fffd|X|fffd|g|fffd|f|fffd|[|fffd|^|fffd||303|t|fffd|H|fffd|[|fffd|}|fffd|b|fffd|g|fffd||3ca||fffd|
    On Error Resume Next
    
    toXlRCstr = Application.ConvertFormula( _
                Formula:=inputFormula, _
                fromReferenceStyle:=xlA1, _
                toReferenceStyle:=xlR1C1)
    
    If err.Number <> 0 Then
        toXlRCstr = inputFormula
        err.Clear
    End If
    
    On Error GoTo 0
End Function
'''
'ClassData.DataClassIn = Trim(toXlRCstr(dlg.EditBoxes("RgeClassDataIn").Text))
'
'|fffd||fffd||fffd||fffd||fffd||42a42||fffd|u|fffd|b|fffd|N|fffd|A|fffd|V|fffd|[|fffd|g|fffd||183|Z|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd||15a97||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd|:
'   wkStr = "[toukeidt.xls]temp!$A$1:$B$2" or "temp!$A$1:$B$2"
'|fffd|o|fffd||fffd|:
'   bkName = |fffd|u|fffd|b|fffd|N|fffd||fffd|; |fffd||fffd|, "toukeidt.xls" or ActiveWorkbook.Name (|fffd|K|fffd||fffd||fffd||fffd||fffd||fffd|)
'   stName = |fffd|V|fffd|[|fffd|g|fffd||fffd|; |fffd||fffd|, "temp"
'   ceName = |fffd|Z|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd| (A1|fffd||30c|`|fffd||fffd|); |fffd||fffd|, "$A$1:$B$2"
'
'|fffd||fffd||fffd||30a||590||fffd||fffd||34a|e|fffd||fffd||fffd||3d7||282||182||fffd||fffd||fffd||fffd||fffd|
'H12.3.16 LSQ
'
Function getRangeInfo(ByVal rgeStr As String, bkName As String, stName As String, ceName As String) As Boolean
    Dim wkstr As String, posBk As Long, posSt As Long, pos As Long
    
    '|fffd||7af||fffd||fffd||fffd||fffd||30e||64fe|
    wkstr = rgeStr
    
    bkName = ActiveWorkbook.Name    'default
    pos = InStr(wkstr, "]")
    
#If False Then  '05.12.17
    If pos > 2 Then 'point to other book
        bkName = Mid(wkstr, 2, pos - 2)
    End If
#Else
    If pos > 2 Then 'point to other book
        MsgBox "|fffd||283|u|fffd|b|fffd|N|fffd||314||348||342||34e|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
        getRangeInfo = False
        Exit Function
    End If
#End If

    '|fffd|-|116||fffd||fffd||30e||64fe|
    wkstr = Mid(wkstr, pos + 1)
    
    stName = ActiveSheet.Name   'default
    pos = InStr(wkstr, "!")
    If pos > 1 Then stName = Mid(wkstr, 1, pos - 1)
    
    '|fffd||654||348||342||30e||64fe|
    ceName = Trim(Mid(wkstr, pos + 1))
    
    If ceName = Empty Or ceName = "" Then
        MsgBox MSG_ERR_DATARAGE
        getRangeInfo = False
        Exit Function
    End If
    
    If Application.ReferenceStyle = xlR1C1 Then     '|fffd|Q|fffd||18c|`|fffd||fffd||fffd||314||fffd||fffd||fffd| and R1C1|fffd||fffd|A1
        ceName = Application.ConvertFormula(Formula:=ceName, _
            fromReferenceStyle:=xlR1C1, _
            toReferenceStyle:=xlA1)
    End If
    
    getRangeInfo = True

End Function
'
'|fffd|u|fffd|b|fffd|N|fffd||311||fffd||fffd||742||fffd||fffd||1c2||fffd||fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||fffd|
'
Function isBookExist(ByVal bkName As String) As Boolean
    Dim bksObj As Workbooks, bk As Workbook
    Set bksObj = Workbooks
    If bksObj.Count = 0 Then isBookExist = False: Exit Function

    For Each bk In bksObj
        If UCase(Trim(bkName)) = UCase(Trim(bk.Name)) Then
            isBookExist = True
            Exit Function
        End If
    Next
    isBookExist = False
End Function

Function WorkBookOpen(ByVal fName As String) As Workbook
    Dim bkObj As Workbook
    On Error Resume Next
    'Check
    If isBookExist(fName) Then
        Set WorkBookOpen = Workbooks(fName)
        Exit Function
    End If
    
    Set bkObj = Nothing
    
    Application.ScreenUpdating = False
    
    Call changeToSSDir
    
    Workbooks.Open Filename:=fName, UpdateLinks:=1, ReadOnly:=True
    
    Application.ScreenUpdating = True
    
    Set bkObj = Workbooks(fName)
    If bkObj Is Nothing Then
        MsgBox MSG_CANTOPEN_FILE(fName)
        Exit Function
    End If
    
    Set WorkBookOpen = bkObj
    On Error GoTo 0
End Function

Sub WorkBookClose(ByVal fName As String)
    Application.DisplayAlerts = False
    
    Workbooks(fName).Close saveChanges:=False
    
    Application.DisplayAlerts = True
End Sub

Function MSG_CANTOPEN_FILE(ByVal fName As String) As String
    MSG_CANTOPEN_FILE = fName & "|fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
End Function

'Change the font of selection to match font of the workbook
'(06.11.23 copied from Sss32grp.xla @ TKVer6)
Function MatchWorkbookFont()
    On Error Resume Next
    
    Selection.Font.Name = ActiveWorkbook.Styles("Normal").Font.Name
    Selection.Font.Size = ActiveWorkbook.Styles("Normal").Font.Size
    Selection.AutoScaleFont = True  '2005.12.22
    
    On Error GoTo 0 '05.12.17 LSQ
End Function

'=== EOF ====


Attribute VB_Name = "P01_Common02"
Option Explicit
Const KmMax = 30

Public Type tagDataCheck
    
    RgeIn As Range
    RgeOut As Range
    bStop As Boolean
    bSort As Boolean

End Type

Public Function CheckData(DataCheck As tagDataCheck) As Boolean
    Dim itemnum As Long, smpnum As Long
    Dim Oitemnum As Long, Osmpnum As Long
    Dim tmpRge As Range
    Dim i As Long
    Dim j As Long
    Dim Maxd As Integer
    Dim Data As Single
    Dim Esw As Integer
    
    itemnum = DataCheck.RgeIn.Columns.Count
    smpnum = DataCheck.RgeIn.Rows.Count
    
    If itemnum < 3 Then
        MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||317||fffd|i|fffd|]|fffd||fffd||fffd||fffd||fffd||681|j|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        CheckData = False
        Exit Function
    End If
    If itemnum - 1 > KmMax Then
        MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||317||fffd|i|fffd|]|fffd||fffd||fffd||fffd||fffd||681|j|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||151||fffd|i" & KmMax & "|fffd|j"
        CheckData = False
        Exit Function
    End If
    If smpnum < 3 Then
        MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30d|s|fffd|i|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        CheckData = False
        Exit Function
    End If
    '-------------------------------------------
    Oitemnum = DataCheck.RgeOut.Columns.Count
    Osmpnum = DataCheck.RgeOut.Rows.Count
    If Oitemnum = 0 Then
        MsgBox "|fffd||fffd||fffd||28f|o|fffd||350||fffd||fffd||fffd|w|fffd||80b5||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B"
        CheckData = False
        Exit Function

    End If
    '--------------------------------------
    Set tmpRge = DataCheck.RgeIn.Range("A1").Offset(1, 1)
    Set tmpRge = Range(tmpRge, tmpRge.Offset(smpnum - 1, itemnum - 1))
    
    If Application.WorksheetFunction.Count(tmpRge) < (itemnum - 1) * (smpnum - 1) And DataCheck.bStop Then
        MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||250||fffd||fffd|l|fffd||20a|O|fffd||303|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||fffd||fffd|~|fffd||fffd||fffd||702||fffd||fffd|B"
        CheckData = False
        Exit Function
    End If
    '
    Esw = 0
    For i = 1 To smpnum - 1
        For j = 1 To itemnum - 1
            Set tmpRge = DataCheck.RgeIn.Range("A1").Offset(i, j)
            Data = Val(tmpRge)
            If Data < 1 And DataCheck.bStop Then
                Esw = 1
                Exit For
            End If
            If Data > itemnum - 1 Then
                Esw = 1
                Exit For
            End If
        Next j
        If Esw <> 0 Then
            Exit For
        End If
    Next i
    '
    If Esw <> 0 Then
        MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||255|s|fffd||fffd||fffd||203|f|fffd|[|fffd|^|fffd||303|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||fffd||fffd|~|fffd||fffd||fffd||702||fffd||fffd|B|fffd||348||342||342|P|fffd|`" & itemnum - 1
        CheckData = False
        Exit Function
    End If
    CheckData = True
End Function
Attribute VB_Name = "P20_Start"
Option Explicit
Public ActiveSht As Object
Public Work As Object
Public Tmpsht As Object
Public Ostop As Boolean

Private Function calcRank(ByVal rankNum As Double, ByVal rankNo As Double) As Double
    Const a = -8, b = 8, n = 100
    Dim delta As Double
    Dim ii As Long
    Dim e As Double, f As Double, g As Double, h As Double, i As Double
    Dim sum As Double
    delta = (b - a) / n
    sum = 0
    e = a
    For ii = 0 To n
        With WorksheetFunction
            f = .Fact(rankNum) / .Fact(rankNum - rankNo) / .Fact(rankNo - 1#) * e * ((1# - .NORMSDIST(e)) ^ (rankNo - 1)) * (.NORMSDIST(e) ^ (rankNum - rankNo)) * .NormDist(e, 0, 1, False)
            If ii > 0 And ii < n Then
                h = IIf(ii Mod 2 = 0, f, 0)
                i = IIf(ii Mod 2 = 0, 0, f)
                g = 0
            Else
                g = f
                h = 0
                i = 0
            End If
        End With
        sum = sum + g + 2 * h + 4 * i
        e = e + delta
    Next ii
    calcRank = delta / 3# * sum
End Function

Sub Start()

Dim dlg As DialogSheet
Dim RgeIn As Range
Dim RgeOut As Range, saveBgn As Range
Dim PSAMDataCheck As tagDataCheck
Dim optStop As Boolean:               '--------|fffd|s|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|@|fffd|ATrue |fffd||30e||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|~|fffd|Afasle|fffd||30e||fffd||fffd||fffd||fffd|O|fffd||fffd||fffd||111||fffd||fffd|s
Dim optSort As Boolean:             '--------------|fffd||fffd||fffd|K|fffd|X|fffd|R|fffd|A|fffd||30e|g|fffd|p|fffd||fffd||fffd|@|fffd|@ture |fffd||30e||fffd||fffd|@|fffd||fffd||fffd||fffd|

Dim rtn

Dim i As Long, j As Long
Dim Para(30) As Double
Dim KomoRec As Integer
Dim SmpRec As Long
Dim TBL As Object
Dim FLG As Double
Dim Esw As Integer
Dim Dat As Integer
Dim Cst As Long
Dim Ced As Long
Dim OutR01 As Long
Dim OutR02 As Long
Dim OutC01 As Long
Dim OutC02 As Long

Dim GOutR01 As Long
Dim GOutC01 As Long

Dim GOutR02 As Long
Dim GOutC02 As Long
Dim OGra As Object

Dim GTop As Single
Dim GLeft As Single
Dim GWidth As Single
Dim GHeight As Single

Dim TINV95 As Double
Dim TINV99 As Double
Dim GOSAFH As Double
Dim DData As Double

Dim pt As Integer
Dim Seris As String
Dim ACTSH As String

Dim GMDS(30) As String

Dim rtnVal As Integer

Dim fe As Long

 ''   On Error Resume Next
    With Application
        .ReferenceStyle = xlA1
    End With
    
    Set dlg = ThisWorkbook.DialogSheets("DlgSeiJyun")
    Set Tmpsht = ThisWorkbook.Worksheets("TempSht")
    Set Work = ThisWorkbook.Worksheets("TempWork")
    Set TBL = ThisWorkbook.Worksheets("|fffd|X|fffd|R|fffd|ATBL")
    
    'init
    dlg.OptionButtons("OP01") = xlOn    '11.11.19 LSQ add


ReDisp:
    rtn = dlg.Show
    If rtn Then

        Set ActiveSht = ActiveSheet
        Tmpsht.Cells.Clear
        Work.Cells.Clear
        ActiveWorkbook.ActiveSheet.Select
        On Error Resume Next
        Set RgeIn = Range(dlg.EditBoxes("RgeDataIn").Text)
        Set RgeOut = Range(dlg.EditBoxes("RgeDataOut").Text).Range("A1")
        If RgeIn Is Nothing Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||80aa||fffd|K|fffd||602||142||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
            GoTo ReDisp
        End If
        If RgeOut Is Nothing Then
            MsgBox "|fffd||fffd||fffd||28f|o|fffd||350||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
            GoTo ReDisp
        End If
        On Error GoTo 0
        optStop = IIf(dlg.OptionButtons("optStop").Value = xlOn, True, False): Ostop = optStop
        optSort = IIf(dlg.OptionButtons("OP01").Value = xlOn, False, True)  '11.11.19 LSQ mdf; |fffd|t
        Set PSAMDataCheck.RgeIn = RgeIn
        Set PSAMDataCheck.RgeOut = RgeOut
        PSAMDataCheck.bStop = optStop

        If Not CheckData(PSAMDataCheck) Then
            GoTo ReDisp
        End If
        '
        For i = 1 To RgeIn.Columns.Count
            Tmpsht.Cells(1, i) = RgeIn.Range("A1").Offset(0, i - 1)
        Next i
        '
        FLG = 1: If optSort = False Then FLG = -1
        KomoRec = RgeIn.Columns.Count - 1
        For i = 1 To KomoRec
            Para(i) = TBL.Cells(KomoRec, i + 1) * FLG
        Next i
        '
        SmpRec = 0
        For i = 2 To RgeIn.Rows.Count
            Esw = 0
            For j = 1 To KomoRec
                Dat = Val(RgeIn.Range("A1").Offset(i - 1, j))
                If Val(Dat) < 1 Then
                    Esw = 1
                    Exit For
                End If
                '2019.03.13 added
                If Esw = 0 And WorksheetFunction.CountIf(RgeIn.Rows(i), j) <> 1 Then
                    Esw = 1
                    Exit For
                End If
                'end add
            Next j
            If Esw = 0 Then
                SmpRec = SmpRec + 1
                Tmpsht.Range("A" & SmpRec + 1) = RgeIn.Range("A1").Offset(i - 1, 0)
                For j = 1 To KomoRec
                    Dat = Val(RgeIn.Range("A1").Offset(i - 1, j))
                    '2019.02.05 mdf
                    'Tmpsht.Cells(SmpRec + 1, j + 1) = Para(Dat)
                    Tmpsht.Cells(SmpRec + 1, j + 1) = calcRank(KomoRec, RgeIn.Range("A1").Offset(i - 1, j)) * FLG
                    'end mdf
                Next j
            End If
        Next i
        '----------------------------------------------
        If SmpRec < 4 Then
            MsgBox "|fffd||fffd||fffd||342||257|L|fffd||fffd||fffd||203|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||1218e|~|fffd||fffd||fffd||702||fffd||fffd|B"
            Exit Sub
        End If
        '--------------------|fffd|J|fffd||fffd||502||fffd||fffd||316||fffd||fffd||fffd||fffd||4ccd4|z|fffd|u----
        Application.ScreenUpdating = False
        rtnVal = NGN_VBA(SmpRec, KomoRec)
        If rtnVal <> 0 Then
            If rtnVal = 301 Then
                MsgBox "|fffd||fffd||fffd||690||fffd||fffd||fffd||fffd||90a2||fffd||343|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||1218e|~|fffd||fffd||fffd||702||fffd||fffd|B"
            Else
                MsgBox "|fffd|r|fffd||fffd||fffd|v|fffd|Z|fffd|G|fffd||fffd||fffd|[|fffd||302||141|I|fffd||fffd||fffd||fffd||fffd||1218e|~|fffd||fffd||fffd||702||fffd||fffd|B"
            End If
            Exit Sub
        End If
        RgeOut.Worksheet.Activate
        Application.ScreenUpdating = True
        '----------------------------------------------
        '-----------------------------------------------
        Set saveBgn = RgeOut
        
        RgeOut = "|fffd||fffd||fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd||296|@"
        RgeOut.Offset(2, 0) = "|fffd||fffd||fffd||fffd||fffd|K|fffd|X|fffd|R|fffd|A"
        Set RgeOut = RgeOut.Offset(3, 0): OutR01 = RgeOut.Row: OutC01 = RgeOut.Column
        '-------------------------------
        GOutR01 = RgeOut.Row
        GOutC01 = RgeOut.Column + KomoRec + 3
        GOutR02 = OutR01
        GOutC02 = OutC01
        '-------------------------
        Cst = 4
        For i = 1 To SmpRec + 2
            For j = 1 To KomoRec + 1
                RgeOut.Offset(i - 1, j - 1) = Work.Cells(Cst + i, j)
            Next j
        Next i
        
        RgeOut.Offset(1, 1).Resize(SmpRec + 3, KomoRec).NumberFormatLocal = "0.000"
        
        '
        GOSAFH = Work.Range("D" & Cst + SmpRec + 9)
        GOSAFH = Sqr(GOSAFH * 2 / SmpRec)
        
        TINV95 = Application.WorksheetFunction.TInv(0.05, SmpRec * KomoRec + 1 - (SmpRec + KomoRec))
        TINV99 = Application.WorksheetFunction.TInv(0.01, SmpRec * KomoRec + 1 - (SmpRec + KomoRec))
        
        RgeOut.Offset(SmpRec + 2, 0) = "|fffd||fffd||fffd||fffd|(95%)"
        RgeOut.Offset(SmpRec + 3, 0) = "|fffd||fffd||fffd|(95%)"
'        RgeOut.Offset(SmpRec + 4, 0) = "|fffd||fffd||fffd||fffd|(99%)"
'        RgeOut.Offset(SmpRec + 5, 0) = "|fffd||fffd||fffd|(99%)"
        For i = 1 To KomoRec
            DData = RgeOut.Offset(SmpRec + 1, i)
            RgeOut.Offset(SmpRec + 2, i) = DData - GOSAFH * TINV95
            RgeOut.Offset(SmpRec + 3, i) = DData + GOSAFH * TINV95
'            RgeOut.Offset(SmpRec + 4, i) = DData - GOSAFH * TINV99
'            RgeOut.Offset(SmpRec + 5, i) = DData + GOSAFH * TINV99
        Next i
        
        OutR02 = RgeOut.Offset(SmpRec + 3, 0).Row: OutC02 = OutC01 + KomoRec
    
        Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
        'LINE_MX
        'rtn = B_SOTO(0)
        'OutR01 = RgeOut.Offset(SmpRec + 1, 0).Row: OutR02 = OutR01
        'Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
        'rtn = B_SOTO(0)
        Call SetRangeBorder(Cells(OutR01, OutC01).Resize(1, KomoRec + 1), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Cells(OutR01 + 1, OutC01).Resize(SmpRec, KomoRec + 1), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Cells(OutR01 + SmpRec + 1, OutC01).Resize(3, KomoRec + 1), xlThin, xlThin, xlThin, xlThin, xlThin, xlThin)
        
        '-----------------------------------------------------------------------------------
        Set RgeOut = RgeOut.Offset(SmpRec + 6, 0)
        RgeOut = "|fffd||fffd||fffd||fffd||fffd|U|fffd||fffd||fffd||355|\"
        
        Cst = Cst + SmpRec + 4
        pt = 0
        For i = 1 To 5
            If i <> 3 Then
                pt = pt + 1
                For j = 1 To 7
                    If i = 1 And j = 6 Then
                        RgeOut.Offset(pt, j - 1) = "p|fffd|l"
                    Else
                        RgeOut.Offset(pt, j - 1) = Work.Cells(Cst + i, j)
                    End If
                Next j
                If i = 4 Then
                    RgeOut.Offset(pt, 0) = "|fffd|]|fffd||fffd||fffd||fffd||fffd||fffd|"
                End If
            End If
        Next i
        
        '2019.03.13 added
        For i = 1 To 4
            RgeOut.Offset(i, 6) = Replace(RgeOut.Offset(i, 6), "[", "")
            RgeOut.Offset(i, 6) = Replace(RgeOut.Offset(i, 6), "]", "")
        Next i
        fe = RgeOut.Offset(4, 1)
        'end add
        
        '---------------------------------------------------------------------
        OutR01 = RgeOut.Offset(1, 0).Row: OutR02 = OutR01
        OutC01 = RgeOut.Column: OutC02 = OutC01 + 6
        Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
        rtn = B_SOTO(0)
        '---------------------------------------------------------------------
        OutR02 = OutR01 + 3: OutC02 = OutC01
        Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
        rtn = B_SOTO(0)
        '---------------------------------------------------------------------
        OutR01 = RgeOut.Offset(1, 0).Row: OutR02 = OutR01 + 3
        OutC01 = RgeOut.Column: OutC02 = OutC01 + 6
        Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
        rtn = B_SOTO(0)
        
        Call SetRangeBorder(Cells(OutR01, OutC01 + 1).Resize(1, 6), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(Cells(OutR01 + 1, OutC01 + 1).Resize(3, 6), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Cells(OutR01 + 1, OutC01 + 2).Resize(3, 1).NumberFormat = "0.000"
        Cells(OutR01 + 2, OutC01 + 3).NumberFormat = "0.000"
        Cells(OutR01 + 3, OutC01 + 3).NumberFormat = "0.0000"
        Cells(OutR01 + 2, OutC01 + 4).NumberFormat = "0.0000"
        Cells(OutR01 + 2, OutC01 + 5).NumberFormat = "0.000"
        '---------------------------------------------------------------------
        Cst = Cst + 7
        Set RgeOut = RgeOut.Offset(6, 0)
        For i = 1 To 4
            For j = 1 To 13
                RgeOut.Offset(i - 1, j - 1) = Work.Cells(Cst + i - 1, j)
                If i = 2 Or i = 3 Then
                    If j = 6 Or j = 8 Or j = 10 Or j = 12 Then
'''                        RgeOut.Offset(i - 1, j - 1) = ""
                    End If
                End If
            Next j
            If i = 3 Then
                RgeOut.Offset(i - 1, 0) = "|fffd|]|fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
        Next i
        '
        pt = 0
        For i = 1 To KomoRec - 1
            pt = pt + i
        Next i
        
        For i = 1 To pt
            For j = 1 To 13
                RgeOut.Offset(i + 3, j - 1) = Work.Cells(Cst + i + 3, j)
            Next j
        Next i
        '----------------------------------------------------------------
        OutR01 = RgeOut.Offset(1, 0).Row: OutR02 = OutR01 + pt + 2
        For i = 1 To 4
            OutC01 = RgeOut.Offset(0, 5 + (i - 1) * 2).Column: OutC02 = OutC01 + 1
            Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
            rtn = LIN_MX02
        Next i
        OutR02 = OutR01
        OutC01 = RgeOut.Offset(0, 5).Column: OutC02 = OutC01 + 7
        Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
        rtn = B_SOTO(0)
        '
        OutR01 = RgeOut.Offset(3, 0).Row: OutR02 = OutR01 + pt
        For i = 1 To 2
            OutC01 = RgeOut.Offset(0, 0 + (i - 1) * 2).Column: OutC02 = OutC01 + 1
            Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
            rtn = LIN_MX02
        Next i
        '
        OutR01 = RgeOut.Offset(3, 0).Row: OutR02 = OutR01 + pt
        For i = 1 To 2
            OutC01 = RgeOut.Offset(0, 0 + (i - 1) * 2).Column: OutC02 = OutC01 + 1
            Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
            rtn = LIN_MX02
        Next i
        OutC01 = RgeOut.Offset(0, 4).Column: OutC02 = OutC01
        Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
        rtn = B_SOTO(0)
        '----
        OutR01 = RgeOut.Offset(3, 0).Row: OutR02 = OutR01
        OutC01 = RgeOut.Offset(0, 0).Column: OutC02 = OutC01 + 12
        Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
        rtn = B_SOTO(0)
        
        '-----------------------------------------
        OutR01 = RgeOut.Offset(1, 0).Row: OutR02 = OutR01 + pt + 2
        OutC01 = RgeOut.Offset(0, 5).Column: OutC02 = OutC01 + 7
        Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
        rtn = B_SOTO(0)
        '
        OutR01 = OutR01 + 2: OutR02 = OutR01 + pt
        OutC01 = RgeOut.Offset(0, 0).Column
        Range(Cells(OutR01, OutC01), Cells(OutR02, OutC02)).Select
        rtn = B_SOTO(0)
        
        '2019.03.13 added
        Call TransFormats(RgeOut, KomoRec, fe)
        'end add
                
        '-------------------------------------------------------------------|fffd||fffd||fffd||3d2|l|fffd|O|fffd||fffd||fffd|t
        For i = 0 To KomoRec
            Cells(GOutR01 + 1, GOutC01 + i) = Cells(GOutR02, GOutC02 + i)
            GMDS(i) = Cells(GOutR01 + 1, GOutC01 + i)
            Cells(GOutR01 + 2, GOutC01 + i) = Cells(GOutR02 + SmpRec + 1, GOutC02 + i)
            If i = 0 Then
                Cells(GOutR01 + 3, GOutC01 + i) = "X"
            Else
                Cells(GOutR01 + 3, GOutC01 + i) = 1
            End If
        Next i
        Range(Cells(GOutR01 + 1, GOutC01), Cells(GOutR01 + 3, GOutC01 + KomoRec)).Select
        rtn = LINE_MX
        '-------------------------------------------------------------------
        ACTSH = ActiveSheet.Name
        'ThisWorkbook.Worksheets("TempGraph").ChartObjects("ScoreGp").Copy
        'Cells(GOutR01, GOutC01 - 1).Select
        'ActiveSheet.Paste
        Call Comm_GetTmplGrp(ActiveSheet.Cells(GOutR01, GOutC01 - 1), ThisWorkbook.Name, "TempGraph", "ScoreGp")
        '---------------------------------------------------------
        'With Application
        '    .ReferenceStyle = xlR1C1
        'End With
        '-----------------------------------------
        Seris = "'" & ACTSH & "'!R" & GOutR01 + 3 & "C" & GOutC01 & ","
        Seris = Seris & "'" & ACTSH & "'!R" & GOutR01 + 2 & "C" & GOutC01 + 1 & ":R" & GOutR01 + 2 & "C" & GOutC01 + KomoRec & ","
        Seris = Seris & "'" & ACTSH & "'!R" & GOutR01 + 3 & "C" & GOutC01 + 1 & ":R" & GOutR01 + 3 & "C" & GOutC01 + KomoRec & ",1"
        'ActiveSheet.ChartObjects("ScoreGp").Activate
        With ActiveChart
            .PlotArea.Select
            .SeriesCollection(1).Select
            .SeriesCollection(1).Formula = "=SERIES(" & Seris & ")"
        End With
        '
        For i = 1 To KomoRec
            With ActiveChart.SeriesCollection(1).Points(i)
                .HasDataLabel = True
                .DataLabel.Text = GMDS(i)
            End With
        Next i
        ActiveChart.SeriesCollection(1).DataLabels.Position = xlLabelPositionBelow

        '=SERIES(TempGraph!R3C1,TempGraph!R2C2:R2C10,TempGraph!R3C2:R3C10,1)
        '--------------------------------------------------------------------
        Tmpsht.Cells.Clear
        Work.Cells.Clear
        '--------------------------------------------------------------------
        'Application.ScreenUpdating = True
        RgeOut.Worksheet.Activate
        saveBgn.Select 'old: RgeOut.Select, 11.11.19
        
        'ActiveWindow.DisplayGridlines = False
    End If
        
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
 
End Sub

Private Function CalcTukey(ByVal gNum As Long, ByVal Fd As Double, ByVal Tokeiryo As Double) As Double
    Dim nx As Long, ny As Long
    Dim i As Long
    Dim GSFR As Double, GSTTL As Double
    With GParaTjProb
        .GunSu = gNum
        nx = gNum
        ny = gNum
        GSFR = nx * ny - nx + 1
        GSTTL = 0
        For i = 0 To ny - 1
            .GSmpl(i + 1) = WorksheetFunction.Ceiling((GSFR / ny) * 1000#, 1) / 1000#
            GSTTL = GSTTL + .GSmpl(i + 1)
        Next i
        .GSmpl(ny) = .GSmpl(ny) + GSFR - GSTTL
        .Fd = Fd
        .bFdGiven = True
        .Tokeiryo = Tokeiryo
    End With
    CalcTukey = P_TukeyDunnet(GParaTjProb, 0)
End Function

Private Sub TransFormats(ByVal RgeOut As Range, ByVal KomoRec As Long, ByVal fe As Long)
    Dim i As Long, j As Long, k As Long, pt As Long
    Dim r As Range
    Dim v As Variant
    Dim pval As Double
    pt = KomoRec * (KomoRec - 1) / 2
    Set r = RgeOut.Resize(pt + 4, 13)
    v = r.Value
    r.Clear
    r(1, 1) = v(1, 1)
    r(1, 6) = "n.s.|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A*|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A**|fffd|Fp|fffd|l|fffd||fffd|0.01"
    r(2, 3) = "|fffd||fffd||fffd||341|u|fffd|O|fffd||fffd|-|fffd||fffd||481|v"
    r(2, 5) = v(1, 6)
    r(2, 8) = v(1, 8)
    r(2, 11) = v(1, 10)
    r(2, 14) = v(1, 12)
    r(3, 1) = ""
    r(3, 2) = ""
    r(3, 3) = ""
    r(3, 4) = "|fffd||fffd|"
    r(3, 5).Resize(1, 12) = Array("|fffd||fffd||fffd|v|fffd||fffd|q", "p|fffd|l", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|v|fffd||fffd|F", "p|fffd|l", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|v|fffd||fffd|t", "p|fffd|l", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|v|fffd||fffd|t", "p|fffd|l", "|fffd||fffd||fffd||fffd|")
    For i = 1 To pt
        r(3 + i, 1) = i
        r(3 + i, 2) = v(i + 4, 1)
        r(3 + i, 3) = v(i + 4, 2)
        r(3 + i, 4) = v(i + 4, 5)
        r(3 + i, 5) = v(i + 4, 6)
        pval = CalcTukey(KomoRec, fe, v(i + 4, 6))
        r(3 + i, 6) = pval
        r(3 + i, 7) = IIf(pval < 0.01, "**", IIf(pval < 0.05, "* ", "n.s."))
        r(3 + i, 8) = v(i + 4, 8)
        pval = WorksheetFunction.FDist(v(i + 4, 8), KomoRec - 1, fe)
        r(3 + i, 9) = pval
        r(3 + i, 10) = IIf(pval < 0.01, "**", IIf(pval < 0.05, "* ", "n.s."))
        r(3 + i, 11) = v(i + 4, 10)
        pval = WorksheetFunction.TDist(v(i + 4, 10), fe, 2) * pt
        If pval > 1 Then pval = 1
        r(3 + i, 12) = pval
        r(3 + i, 13) = IIf(pval < 0.01, "**", IIf(pval < 0.05, "* ", "n.s."))
        r(3 + i, 14) = v(i + 4, 12)
        pval = WorksheetFunction.TDist(v(i + 4, 12), fe, 2)
        r(3 + i, 15) = pval
        r(3 + i, 16) = IIf(pval < 0.01, "**", IIf(pval < 0.05, "* ", "n.s."))
    Next i
    Call SetRangeBorder(RgeOut(2, 5).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(RgeOut(2, 8).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(RgeOut(2, 11).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(RgeOut(2, 14).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(RgeOut(3, 1).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(RgeOut(3, 4).Resize(1, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(RgeOut(3, 5).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(RgeOut(3, 8).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(RgeOut(3, 11).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(RgeOut(3, 14).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(RgeOut(4, 1).Resize(pt, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(RgeOut(4, 2).Resize(pt, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(RgeOut(4, 4).Resize(pt, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(RgeOut(4, 5).Resize(pt, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(RgeOut(4, 8).Resize(pt, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(RgeOut(4, 11).Resize(pt, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(RgeOut(4, 14).Resize(pt, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
    k = 0
    For i = 1 To KomoRec - 1
        For j = i + 1 To KomoRec
            k = k + 1
        Next j
        If i < KomoRec - 1 Then
            Call DrawLine(RgeOut(4 + k, 1).Resize(1, 16), xlHairline)
        End If
    Next i
    RgeOut(4, 5).Resize(pt, 12).NumberFormat = "0.000"
End Sub

Attribute VB_Name = "P30_NGN_VBA"
Option Explicit

Function NGN_VBA(ByVal r As Integer, c As Integer) As Integer         '|fffd||4ccd4|z|fffd|u|fffd||fffd||fffd|U|fffd||fffd||fffd||fffd|(|fffd|J|fffd||fffd||502||fffd||fffd||202||fffd|)
    Dim rtn As Integer
    Dim Ngndlg As NGN_Dlg
    Dim s As String
    'Dim c As Integer, r As Long
    
    Tmpsht.Activate
    '2011.12.16 cmt
    'r = Tmpsht.Range("A65535").End(xlUp).Row
    'c = Tmpsht.Cells(1, 2).End(xlToRight).Column
    'end cmt
    s = Tmpsht.Range(Cells(1, 1), Cells(r + 1, c + 1)).AddressLocal
    
    Ngndlg.DataRef = Trim(toXlRCstr("TempSht!" & s))
    Ngndlg.OutRef = Trim(toXlRCstr("TempWork!$A$1"))
    Ngndlg.flgFirst = 1
    Ngndlg.flgNoData = Ostop

    Ngndlg.DataRef = Chr(LenB(StrConv(Ngndlg.DataRef, vbFromUnicode))) & Ngndlg.DataRef
    Ngndlg.OutRef = Chr(LenB(StrConv(Ngndlg.OutRef, vbFromUnicode))) & Ngndlg.OutRef
    
    changeToSSDir
    
    rtn = NGN(Ngndlg)
    NGN_VBA = rtn
End Function

Function LINE_MX()
'
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With

End Function

Function B_SOTO(ByVal LW As Integer)
Dim LLW As Long

    If LW = 0 Then
        LLW = xlThin
    Else
        LLW = xlMedium
    End If
    
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = LLW
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = LLW
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = LLW
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = LLW
        .ColorIndex = xlAutomatic
    End With

End Function

'
Function LIN_MX02()

    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlHairline
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

End Function

Sub SetRangeBorder(ByVal rge As Range, _
                    ByVal leftWgt As XlBorderWeight, _
                    ByVal topWgt As XlBorderWeight, _
                    ByVal rightWgt As XlBorderWeight, _
                    ByVal bottomWgt As XlBorderWeight, _
                    Optional ByVal insideV As XlBorderWeight = xlNone, _
                    Optional ByVal insideH As XlBorderWeight = xlNone)
    On Error Resume Next
    rge.Borders(xlDiagonalDown).LineStyle = xlNone
    rge.Borders(xlDiagonalUp).LineStyle = xlNone
    With rge.Borders(xlEdgeLeft)
        If leftWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = leftWgt
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeTop)
        If topWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = topWgt
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeBottom)
        If bottomWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = bottomWgt
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeRight)
        If rightWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = rightWgt
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideVertical)
        If insideV <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = insideV
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideHorizontal)
        If insideH <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = insideH
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    On Error GoTo 0
End Sub

Sub DrawLine(ByVal r As Range, ByVal LineStyle As Long)
    With r.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = LineStyle
    End With
End Sub
Attribute VB_Name = "P90_TYPE"
'=======================================================
' Customized version of |fffd||fffd||fffd|vVer6 : |fffd|\|fffd||fffd||fffd||312||fffd|`
'
' 2006.6 LSQ
'=======================================================
Option Explicit
'-----------------------------------------------------------------------------------------
#If Win64 Then
Declare PtrSafe Function NGN Lib "KKS_SubL_64.dll" (dlg As NGN_Dlg) As Integer
#Else
Declare Function NGN Lib "KKS_SubL.dll" (dlg As NGN_Dlg) As Integer
#End If

'-----------------------------------------------------------------------------------------
'|fffd||4ccd4|z|fffd|u|fffd||fffd||fffd|U|fffd||fffd||fffd||fffd|(|fffd|J|fffd||fffd||502||fffd||fffd||202||fffd|)
Type NGN_Dlg
    DataRef As String                   '|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    OutRef As String                    '|fffd||fffd||fffd||28f|o|fffd||350||fffd||348||fffd|
    flgFirst As Integer                 '1|fffd|s|fffd||fffd| 1.|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|x|fffd||fffd||fffd|@2.|fffd|f|fffd|[|fffd|^
    flgNoData As Integer                '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd| 1.|fffd||fffd||fffd|O|fffd||fffd||fffd||111||fffd||fffd|s|fffd|@2.|fffd||fffd||fffd|~
    flgDrct As Integer                  '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|. |fffd|s|fffd|p. (fixed |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd|)
End Type




'=== EOF ===


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "mdlCflibb"
Type VBAPARAM_A
    Tokeiryo As Double
    GunSu As Double
    GSmpl(101) As Double
    bFdGiven As Boolean
    Fd As Double
End Type

Type TUKEY
    p_para As VBAPARAM_A
    pval As Double
End Type

Public Const MAX_GUNSU As Long = 101
Public Const DEF_sqrt2Pi As Double = 2.506628274631

Public GParaTjProb As VBAPARAM_A
Private bSwEnd As Boolean
Private bAbort As Boolean

Private Function erf(ByVal X As Double) As Double
    Dim a1 As Double, a2 As Double, a3 As Double, a4 As Double, a5 As Double
    Dim p As Double, t As Double
    a1 = 0.254829592
    a2 = -0.284496736
    a3 = 1.421413741
    a4 = -1.453152027
    a5 = 1.061405429
    p = 0.3275911
    t = 1# / (1# + p * X)
    X = Abs(X)
    erf = 1# - ((((((a5 * t + a4) * t) + a3) * t + a2) * t) + a1) * t * exp(-1# * X * X)
End Function

Private Function NORMSDIST(ByVal z As Double) As Double
    Dim sign As Double
    If z < 0 Then
        sign = -1
    Else
        sign = 1
    End If
    NORMSDIST = 0.5 * (1# + sign * erf(Abs(z) / Sqr(2#)))
End Function

Private Function XlNormSDist(ByVal X As Double) As Double
    XlNormSDist = WorksheetFunction.NORMSDIST(X)
End Function

Private Function cGanm_Calc(pf As Double) As Double
    Dim AA0 As Double, AB0 As Double, AC0 As Double, AD0 As Double
    Dim PPi As Double, GANM_Culc As Double
    Dim i As Long, xx As Long, f As Long

    f = WorksheetFunction.Floor(pf, 1)

    AC0 = f
    If (f > 1412) Then AC0 = 1413

    PPi = 3.14159265358979
    xx = WorksheetFunction.Floor((AC0 - 1#) / 2#, 1)
    AA0 = 1

    AB0 = 0
    If ((f Mod 2) = 0) Then
        If (f > 1412) Then AC0 = 1412

        For i = 1 To xx
            AB0 = AC0 / (i * 2)
            AA0 = AA0 * AB0
            AD0 = AA0
        Next i
        GANM_Culc = AA0 * AC0
    Else
        If (f > 1411) Then AC0 = 1411
        xx = WorksheetFunction.Floor((AC0 - 1#) / 2#, 1) - 1
        AA0 = AC0 / (Sqr(PPi) / 2# * Sqr(2#))
        For i = 1 To xx
            AB0 = AC0 / (AC0 - (i * 2))
            AA0 = AA0 * AB0
            AD0 = AA0
        Next i
        GANM_Culc = AA0 * Sqr(AC0)
    End If
    cGanm_Calc = GANM_Culc
End Function

Private Function calc_D4xD5xD6xGama(ByVal fai As Double, ByVal xDat As Double, ByVal yDat As Double) As Double

    Dim tmpx As Double, tmpy As Double
    Dim Dm04 As Double, Dm05 As Double, Dm06 As Double
    Dim df As Double, gama As Double
    tmpx = WorksheetFunction.Power(xDat, 2) / 2
    tmpy = WorksheetFunction.Power(yDat, 2) / 2
    If (fai <= 1) Then fai = 1
    If (xDat = 0) Then
        calc_D4xD5xD6xGama = 0
        Exit Function
    End If
    Dm04 = 1#
    Dm05 = 1#
    Dm06 = exp((-tmpy) + (fai - 1#) * Log(xDat) + (-fai * tmpx)) / DEF_sqrt2Pi
    df = fai
    gama = cGanm_Calc(df)
    calc_D4xD5xD6xGama = Dm04 * Dm05 * Dm06 * gama
End Function

Private Function sub_Tukey(p_para As VBAPARAM_A) As Double
    Dim Parxy(MAX_GUNSU, MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01(MAX_GUNSU) As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double
    Dim P_Tukey As Double
    Dim Gsmple(MAX_GUNSU)
    Const PPi As Double = 3.14159265358979
    Dim TVAL2 As Double
    Dim GUN As Double
    Dim saveCancelKey As Long
    saveCancelKey = Application.EnableCancelKey
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    TVAL2 = p_para.Tokeiryo / Sqr(2#)
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
    Next i
    If GUN < 1 Then
        sub_Tukey = DBL_ERR
        Exit Function
    End If
    For i = 1 To GUN
        If Gsmple(i) < 1 Then
            sub_Tukey = DBL_ERR
            Exit Function
        End If
    Next i
    fai = 0
    For i = 1 To GUN
        fai = fai + Gsmple(i)
        TT0 = Gsmple(i)
        For j = 1 To GUN
            If i <> j Then
                Parxy(i, j) = Gsmple(i) / (TT0 + Gsmple(j))
            Else
                Parxy(i, j) = 0
            End If
        Next j
    Next i
    fai = fai - GUN
    
    If p_para.bFdGiven Then
        fai = p_para.Fd
    End If
    
    If fai > 1000 Then fai = 1000
    
    LLP = 100
    If fai > 90 Then LLP = fai + 20
    If LLP > 50 Then LLP = 50
    
    If p_para.Tokeiryo > 7 Then
        xSt = 0.001
    Else
        xSt = 0.01
    End If
    
    ySt = -5
    If fai > 500 Then
        xKan = 1.5 / LLP
    ElseIf fai > 100 Then
        xKan = 2# / LLP
    Else
        xKan = 4# / LLP
    End If
    yKan = 10# / LLP
    
    TT0 = 0
    For i = 1 To LLP
        xDat = xSt + xKan * (i - 1)
        Dm00 = xDat * TVAL2
        For j = 1 To LLP
            yDat = ySt + yKan * (j - 1)
            Dm02 = 0
            For i0 = 1 To GUN
                Dm01(i0) = 0
                'If (bAbort) Then
                '    bSwEnd = True
                '    sub_Tukey = DBL_ERR
                '    Exit Function
                'End If
            Next i0
            For i0 = 1 To GUN
                For j0 = 1 To GUN
                    If i0 <> j0 Then
                        sqrtA = Sqr(Parxy(i0, j0)) * yDat
                        sqrtB = Sqr(1 - Parxy(i0, j0))
                        Dm01(j0) = NORMSDIST(sqrtA / sqrtB) - NORMSDIST((sqrtA - Dm00) / sqrtB)
                    Else
                        Dm01(j0) = 1
                    End If
                    'If (bAbort) Then
                    '    bSwEnd = True
                    '    sub_Tukey = DBL_ERR
                    '    Exit Function
                    'End If
                Next j0
                Dm03 = 1
                For j0 = 1 To GUN
                    Dm03 = Dm03 * Dm01(j0)
                    'If (bAbort) Then
                    '    bSwEnd = True
                    '    sub_Tukey = DBL_ERR
                    '    Exit Function
                    'End If
                Next j0
                Dm02 = Dm02 + Dm03
            Next i0
            Dm03 = calc_D4xD5xD6xGama(fai, xDat, yDat)
            TT0 = TT0 + Dm02 * Dm03
        Next j
    Next i
    P_Tukey = Abs(1 - TT0 * xKan * yKan)
    sub_Tukey = P_Tukey
    Application.EnableCancelKey = saveCancelKey
    Exit Function
handleCancel:
    bSwEnd = True
    bAbort = True
    sub_Tukey = DBL_ERR
    Application.EnableCancelKey = saveCancelKey
End Function

Function sub_CalcTukey(pTukey As TUKEY)
    Dim p As Double
    p = sub_Tukey(pTukey.p_para)
    pTukey.pval = p
End Function

Function CalcTukey(p_para As VBAPARAM_A) As Double
    Dim p As Double
    Dim ptr As TUKEY
    ptr.p_para = p_para
    bSwEnd = False
    bAbort = False
    p = sub_CalcTukey(ptr)
    If bAbort Then
        p = -1
    Else
        p = ptr.pval
    End If
    CalcTukey = p
End Function

Function P_TukeyDunnet(p_para As VBAPARAM_A, ByVal callFlg As Long) As Double
    If callFlg = 1 Then
        P_TukeyDunnet = sub_DunnetSingle(p_para)
    ElseIf callFlg = 2 Then
        P_TukeyDunnet = sub_DunnetBoth(p_para)
    Else
        P_TukeyDunnet = CalcTukey(p_para)
    End If
End Function

Function XlGanm_Calc(ByVal pf As Double) As Double
    Dim f As Double, tmpd As Double
    On Error Resume Next
    f = pf
    tmpd = WorksheetFunction.GammaLn(f)
    If err.Number <> 0 Then
        tmpd = -1
    End If
    err.Clear
    XlGanm_Calc = tmpd
    On Error GoTo 0
End Function

Function sub_HSD(p_para As VBAPARAM_A) As Double
    Dim Parxy(MAX_GUNSU, MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01(MAX_GUNSU) As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double

    Dim P_HSD As Double
    Dim Gsmple(MAX_GUNSU) As Double
    Const PPi As Double = 3.14159265358979
    Dim tmpv As Double
    Dim TVAL2 As Double, GUN As Double
    '-------------------------------------------------|fffd||fffd||fffd||fffd||fffd|n|fffd||fffd|
    TVAL2 = p_para.Tokeiryo / Sqr(2#)     '|fffd||fffd||fffd|v|fffd||282||fffd|Root(2)|fffd||14f||fffd||fffd|Z
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
        Next i
        If (GUN < 1) Then
            sub_HSD = -1
            Exit Function
        End If
    For i = 1 To GUN
        If (Gsmple(i) < 1) Then
            sub_HSD = -1
            Exit Function
        End If
    Next i

    '-----------------------------------------------------
    '------------------------------------------------|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd|
    fai = 0
        For i = 1 To GUN
        fai = fai + Gsmple(i)
        TT0 = Gsmple(i)
        For j = 1 To GUN
            If (i <> j) Then
                Parxy(i, j) = Gsmple(i) / (TT0 + Gsmple(j))
            Else
                Parxy(i, j) = 0
            End If
        Next j
    Next i
    
    fai = fai - GUN                                                             '|fffd||fffd||fffd|@|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd||fffd|v|fffd|||fffd|Q|fffd||fffd|

    If (p_para.bFdGiven) Then
            fai = p_para.Fd
    End If

    If (fai > 6000) Then fai = 6000                                         '2013.01.15 mdf: if (fai > 1000) fai = 1000;

    '-----------------------------------------------------------------------------------
    LLP = 100                                                                           '----|fffd||fffd||fffd|[|fffd|v|fffd||fffd|
    If (fai > 90) Then LLP = fai + 20
    If (LLP > 50) Then LLP = 50
    
        '2013.01.15 mdf
#If 0 Then
    If (p_para.Tokeiryo > 7) Then
        xSt = 0.0001
    Else
        xSt = 0.01
    End If
        
    ySt = -5
    If (fai > 500) Then
        xKan = 1.5 / LLP
    ElseIf (fai > 100) Then
        xKan = 2# / LLP
    Else
        xKan = 4# / LLP
    End If
        
    yKan = 10# / LLP
        'end mdf
#Else
    ySt = -5
    xSt = IIf(fai > 1000, 0.8, 0.0001)
    xKan = IIf(fai > 1000, (0.4 / LLP), IIf(fai > 500, (1.5 / LLP), IIf(fai > 100, (2# / LLP), (4# / LLP))))
    yKan = 10# / LLP
#End If

    '-------------------------------------------------------------------------|fffd|v|fffd|Z|fffd|J|fffd|n
    tmpv = fai / 2#
    TT0 = 0
    For i = 1 To LLP
        xDat = xSt + xKan * (i - 1)
        Dm00 = xDat * TVAL2
        For j = 1 To LLP
            yDat = ySt + yKan * (j - 1)
            Dm02 = 0
            For i0 = 1 To GUN
                Dm01(i0) = 0
            Next i0
            For i0 = 1 To GUN
                For j0 = 1 To GUN
                    If (i0 <> j0) Then
                        sqrtA = Sqr(Parxy(i0, j0)) * yDat
                        sqrtB = Sqr(1 - Parxy(i0, j0))
                        Dm01(j0) = WorksheetFunction.NORMSDIST(sqrtA / sqrtB) - WorksheetFunction.NORMSDIST((sqrtA - Dm00) / sqrtB)
                    Else
                        Dm01(j0) = 1
                    End If
                Next j0
                Dm03 = 1
                For j0 = 1 To GUN
                    Dm03 = Dm03 * Dm01(j0)
                Next j0
                
                Dm02 = Dm02 + Dm03 '--------Dm01(i0)
            Next i0
            Dm03 = exp(-yDat * yDat / 2# - Log(Sqr(2# * PPi)) + (fai / 2#) * Log(fai) + (fai - 1#) * Log(xDat) - fai * xDat * xDat / 2# _
                - XlGanm_Calc(tmpv) - (fai / 2# - 1#) * Log(2#))
            TT0 = TT0 + Dm02 * Dm03
        Next j
    Next i

    P_HSD = Abs(1 - TT0 * xKan * yKan)          '2006.10.13 mdf from "P_Tukey = 1 - TT0 * xKan * yKan ;       "

    sub_HSD = P_HSD
        
End Function

Function P_HSD(p_para As VBAPARAM_A) As Double
    P_HSD = sub_HSD(p_para)
End Function

Private Function sub_STEEL(p_para As VBAPARAM_A, ByVal side As Long) As Double
    Dim Parxy(MAX_GUNSU, MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01(MAX_GUNSU) As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double
    Dim P_STEEL As Double
    Dim Gsmple(MAX_GUNSU)
    Const PPi As Double = 3.14159265358979
    Dim TVAL2 As Double
    Dim GUN As Double
    Dim saveCancelKey As Long
    saveCancelKey = Application.EnableCancelKey
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    TVAL2 = p_para.Tokeiryo / Sqr(2#)
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
    Next i
    If GUN < 1 Then
        sub_STEEL = DBL_ERR
        Exit Function
    End If
    For i = 1 To GUN
        If Gsmple(i) < 1 Then
            sub_STEEL = DBL_ERR
            Exit Function
        End If
    Next i
    fai = 0
    For i = 1 To GUN
        fai = fai + Gsmple(i)
        TT0 = Gsmple(i)
        For j = 1 To GUN
            If i <> j Then
                Parxy(i, j) = Gsmple(j) / (TT0 + Gsmple(j))
            Else
                Parxy(i, j) = 0
            End If
        Next j
    Next i
    fai = fai - GUN
    
    If p_para.bFdGiven Then
        fai = p_para.Fd
    End If
    
    If fai > 6000 Then fai = 6000
    
    LLP = 100
    If fai > 90 Then LLP = fai + 20
    If LLP > 100 Then LLP = 100
    
    
    ySt = -5
    xSt = IIf(fai > 1000, 0.8, 0.0001)
    xKan = (1.5 - 0.8) / LLP
    yKan = 10# / LLP
    
    tmpv = fai / 2#
    TT0 = 0
    For i = 1 To LLP
        xDat = xSt + xKan * (i - 1)
        Dm00 = xDat * TVAL2
        For j = 1 To LLP
            yDat = ySt + yKan * (j - 1)
            Dm02 = 0
            Dm01(1) = 1
            For j0 = 2 To GUN
                sqrtA = Sqr(Parxy(1, j0)) * yDat
                sqrtB = Sqr(1# - Parxy(1, j0))
                If side = 1 Then
                    Dm01(j0) = XlNormSDist((sqrtA + Dm00) / sqrtB) - XlNormSDist((sqrtA - Dm00) / sqrtB)
                Else
                    Dm01(j0) = XlNormSDist((sqrtA + Dm00) / sqrtB)
                End If
            Next j0
            Dm03 = 1
            For j0 = 1 To GUN
                Dm03 = Dm03 * Dm01(j0)
            Next j0
            Dm02 = Dm02 + Dm03
            Dm03 = exp(-yDat * yDat / 2# - Log(Sqr(2# * PPi)) + (fai / 2#) * Log(fai) + (fai - 1#) * Log(xDat) _
                - fai * xDat * xDat / 2# - XlGanm_Calc(tmpv) - (fai / 2# - 1#) * Log(2#))
            TT0 = TT0 + Dm02 * Dm03
        Next j
    Next i
    P_STEEL = Abs(1 - TT0 * xKan * yKan)
    sub_STEEL = P_STEEL
    Application.EnableCancelKey = saveCancelKey
    Exit Function
handleCancel:
    bSwEnd = True
    bAbort = True
    sub_STEEL = DBL_ERR
    Application.EnableCancelKey = saveCancelKey
End Function

Public Function P_STEEL(p_para As VBAPARAM_A, ByVal side As Long) As Double
    P_STEEL = sub_STEEL(p_para, side)
End Function

Private Function sub_GamesHowell(p_para As VBAPARAM_A) As Double
    Dim Parxy(MAX_GUNSU, MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01(MAX_GUNSU) As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double
    Dim P_GamesHowell As Double
    Dim Gsmple(MAX_GUNSU)
    Const PPi As Double = 3.14159265358979
    Dim TVAL2 As Double
    Dim GUN As Double
    Dim saveCancelKey As Long
    saveCancelKey = Application.EnableCancelKey
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    TVAL2 = p_para.Tokeiryo
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
    Next i
    If GUN < 1 Then
        sub_GamesHowell = DBL_ERR
        Exit Function
    End If
    For i = 1 To GUN
        If Gsmple(i) < 1 Then
            sub_GamesHowell = DBL_ERR
            Exit Function
        End If
    Next i
    fai = 0
    For i = 1 To GUN
        fai = fai + Gsmple(i)
        TT0 = Gsmple(i)
        For j = 1 To GUN
            If i <> j Then
                Parxy(i, j) = Gsmple(i) / (TT0 + Gsmple(j))
            Else
                Parxy(i, j) = 0
            End If
        Next j
    Next i
    fai = fai - GUN
    
    If p_para.bFdGiven Then
        fai = p_para.Fd
    End If
    
    
    LLP = 100
    If fai > 90 Then LLP = fai + 20
    If LLP > 50 Then LLP = 50
    
    If p_para.Tokeiryo > 7 Then
        xSt = 0.0001
    Else
        xSt = 0.01
    End If
    
    ySt = -5
    If fai > 6000 Then fai = 6000
    xSt = IIf(fai > 1000, 0.8, 0.0001)
    xKan = IIf(fai > 1000, 0.7 / LLP, IIf(fai > 500, 1.5 / LLP, IIf(fai > 100, 2# / LLP, 4# / LLP)))
    yKan = 10# / LLP

    TT0 = 0
    For i = 1 To LLP
        xDat = xSt + xKan * (i - 1)
        Dm00 = xDat * TVAL2
        For j = 1 To LLP
            yDat = ySt + yKan * (j - 1)
            Dm02 = 0
            For i0 = 1 To GUN
                Dm01(i0) = 0
            Next i0
            For i0 = 1 To GUN
                For j0 = 1 To GUN
                    If i0 <> j0 Then
                        sqrtA = Sqr(Parxy(i0, j0)) * yDat
                        sqrtB = Sqr(1# - Parxy(i0, j0))
                        '2017.02.20 mdf:
                        'Dm01(j0) = NORMSDIST(sqrtA / sqrtB) - NORMSDIST((sqrtA - Dm00) / sqrtB)
                        Dm01(j0) = XlNormSDist(sqrtA / sqrtB) - XlNormSDist((sqrtA - Dm00) / sqrtB)
                        'end mdf
                    Else
                        Dm01(j0) = 1
                    End If
                Next j0
                Dm03 = 1
                For j0 = 1 To GUN
                    Dm03 = Dm03 * Dm01(j0)
                Next j0
                Dm02 = Dm02 + Dm03
            Next i0
            Dm03 = exp(-yDat * yDat / 2# - Log(Sqr(2# * PPi)) + (fai / 2#) * Log(fai) + (fai - 1#) * Log(xDat) - fai * xDat * xDat / 2# - XlGanm_Calc(fai / 2#) - (fai / 2# - 1#) * Log(2#))
            TT0 = TT0 + Dm02 * Dm03
        Next j
    Next i
    P_GamesHowell = Abs(1 - TT0 * xKan * yKan)
    sub_GamesHowell = P_GamesHowell
    Application.EnableCancelKey = saveCancelKey
    Exit Function
handleCancel:
    bSwEnd = True
    bAbort = True
    sub_GamesHowell = DBL_ERR
    Application.EnableCancelKey = saveCancelKey
End Function

Public Function P_GamesHowell(p_para As VBAPARAM_A) As Double
    P_GamesHowell = sub_GamesHowell(p_para)
End Function

Private Function sub_DunnetT3(p_para As VBAPARAM_A) As Double
    Dim Parxy(MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01 As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double
    Dim P_DunnetT3 As Double
    Dim Gsmple(MAX_GUNSU)
    Const PPi As Double = 3.14159265358979
    Dim TVAL2 As Double
    Dim GUN As Double
    Dim saveCancelKey As Long
    saveCancelKey = Application.EnableCancelKey
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    TVAL2 = p_para.Tokeiryo
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
    Next i
    If GUN < 1 Then
        sub_DunnetT3 = DBL_ERR
        Exit Function
    End If
    For i = 1 To GUN
        If Gsmple(i) < 1 Then
            sub_DunnetT3 = DBL_ERR
            Exit Function
        End If
    Next i
    fai = Gsmple(1)
    TT0 = Gsmple(1)
    Parxy(1) = 0
    For i = 2 To GUN
        fai = fai + Gsmple(i)
        Parxy(i) = Gsmple(i) / (TT0 + Gsmple(i))
    Next i

    fai = fai - GUN
    
    If p_para.bFdGiven Then
        fai = p_para.Fd
    End If
    
    If fai > 6000 Then fai = 6000
    
    LLP = 50
    TT0 = 0
    
    LLP = 1000
    If fai > 1400 Then
        delta = 1.2 / 1000
    Else
        delta = 10# / 1000
    End If
    
    ySt = delta
        
    Dm01 = GUN * (GUN - 1#) / 2#
    Dm04 = 0
    For i = 1 To LLP
        Dm02 = WorksheetFunction.Power((2# * NORMSDIST(TVAL2 * ySt) - 1), Dm01)
        Dm03 = exp((fai / 2#) * Log(fai) + (fai - 1#) * Log(ySt) - fai * ySt * ySt / 2# - XlGanm_Calc(fai / 2#) - (fai / 2# - 1#) * Log(2#))
        If Dm03 <> Dm03 Then Dm03 = 0
        Dm04 = Dm04 + Dm02 * Dm03 * delta
        ySt = ySt + delta
    Next i
    
    P_DunnetT3 = 1 - Dm04
    sub_DunnetT3 = P_DunnetT3
    Application.EnableCancelKey = saveCancelKey
    Exit Function
handleCancel:
    bSwEnd = True
    bAbort = True
    sub_DunnetT3 = DBL_ERR
    Application.EnableCancelKey = saveCancelKey
End Function

Public Function P_DunnetT3(p_para As VBAPARAM_A) As Double
    P_DunnetT3 = sub_DunnetT3(p_para)
End Function

Private Function sub_DunnetBoth(p_para As VBAPARAM_A) As Double
    Dim Parxy(MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01 As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double
    Dim P_DunnetT3 As Double
    Dim Gsmple(MAX_GUNSU)
    Const PPi As Double = 3.14159265358979
    Dim TVAL2 As Double
    Dim GUN As Double
    Dim saveCancelKey As Long
    saveCancelKey = Application.EnableCancelKey
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    TVAL2 = p_para.Tokeiryo
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
    Next i
    If GUN < 1 Then
        sub_DunnetBoth = DBL_ERR
        Exit Function
    End If
    For i = 1 To GUN
        If Gsmple(i) < 1 Then
            sub_DunnetBoth = DBL_ERR
            Exit Function
        End If
    Next i
    fai = Gsmple(1)
    TT0 = Gsmple(1)
    Parxy(1) = 0
    For i = 2 To GUN
        fai = fai + Gsmple(i)
        Parxy(i) = Gsmple(i) / (TT0 + Gsmple(i))
    Next i

    fai = fai - GUN
    
    If p_para.bFdGiven Then
        fai = p_para.Fd
    End If
    
    If fai > 1000 Then fai = 1000
    
    LLP = 100
    If fai > 90 Then LLP = Int(fai + 20)
    If LLP > 50 Then LLP = 50
    
    If p_para.Tokeiryo > 5 Then
        xSt = 0.001
    Else
        xSt = 0.1
    End If
    
    ySt = -5
    
    If fai > 500 Then
        xKan = 1.5 / LLP
    ElseIf fai > 100 Then
        xKan = 2# / LLP
    Else
        xKan = 4# / LLP
    End If
    yKan = 10# / LLP
    
        
    TT0 = 0
    For i = 1 To LLP
        xDat = xSt + xKan * (i - 1)
        Dm00 = xDat * TVAL2
        For j = 1 To LLP
            yDat = ySt + yKan * (j - 1)
            Dm02 = 1
            For i0 = 2 To GUN
                Dm01 = XlNormSDist((Sqr(Parxy(i0)) * yDat + Dm00) / Sqr(1 - Parxy(i0))) _
                      - XlNormSDist((Sqr(Parxy(i0)) * yDat - Dm00) / Sqr(1 - Parxy(i0)))
                Dm02 = Dm02 * Dm01
            Next i0
            On Error Resume Next
            Dm05 = WorksheetFunction.Power(xDat, (fai - 1))
            If err.Number <> 0 Then
                Dm05 = 1.77937370028148E+307
            End If
            On Error GoTo handleCancel
            Dm04 = exp(-WorksheetFunction.Power(yDat, 2) / 2#) / Sqr(PPi * 2#)
            Dm06 = exp(-fai * WorksheetFunction.Power(xDat, 2) / 2#)
            
            Dm03 = Dm04 * Dm05 * Dm06 * cGanm_Calc(fai)
                        
            TT0 = TT0 + Dm02 * Dm03
        Next j
    Next i
    
    sub_DunnetBoth = Abs(1 - TT0 * xKan * yKan)
    Application.EnableCancelKey = saveCancelKey
    Exit Function
handleCancel:
    bSwEnd = True
    bAbort = True
    sub_DunnetBoth = DBL_ERR
    Application.EnableCancelKey = saveCancelKey
End Function

Private Function sub_DunnetSingle(p_para As VBAPARAM_A) As Double
    Dim Parxy(MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01 As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double
    Dim P_DunnetT3 As Double
    Dim Gsmple(MAX_GUNSU)
    Const PPi As Double = 3.14159265358979
    Dim TVAL2 As Double
    Dim GUN As Double
    Dim saveCancelKey As Long
    saveCancelKey = Application.EnableCancelKey
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    TVAL2 = p_para.Tokeiryo
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
    Next i
    If GUN < 1 Then
        sub_DunnetSingle = DBL_ERR
        Exit Function
    End If
    For i = 1 To GUN
        If Gsmple(i) < 1 Then
            sub_DunnetSingle = DBL_ERR
            Exit Function
        End If
    Next i
    fai = Gsmple(1)
    TT0 = Gsmple(1)
    Parxy(1) = 0
    For i = 2 To GUN
        fai = fai + Gsmple(i)
        Parxy(i) = Gsmple(i) / (TT0 + Gsmple(i))
    Next i

    fai = fai - GUN
    
    If p_para.bFdGiven Then
        fai = p_para.Fd
    End If
    
    If fai > 1000 Then fai = 1000
    
    LLP = 100
    If fai > 90 Then LLP = Int(fai + 20)
    If LLP > 50 Then LLP = 50
    
    If p_para.Tokeiryo > 5 Then
        xSt = 0.001
    Else
        xSt = 0.01
    End If
    
    ySt = -5
    
    If fai > 500 Then
        xKan = 1.5 / LLP
    ElseIf fai > 100 Then
        xKan = 2# / LLP
    Else
        xKan = 4# / LLP
    End If
    yKan = 10# / LLP
    
        
    TT0 = 0
    For i = 1 To LLP
        xDat = xSt + xKan * (i - 1)
        Dm00 = xDat * TVAL2
        For j = 1 To LLP
            yDat = ySt + yKan * (j - 1)
            Dm02 = 1
            For i0 = 2 To GUN
                Dm01 = XlNormSDist((Sqr(Parxy(i0)) * yDat + Dm00) / Sqr(1 - Parxy(i0)))

                Dm02 = Dm02 * Dm01
            Next i0
            On Error Resume Next
            Dm05 = WorksheetFunction.Power(xDat, (fai - 1))
            If err.Number <> 0 Then
                Dm05 = 1.77937370028148E+307
            End If
            On Error GoTo handleCancel
            Dm04 = exp(-WorksheetFunction.Power(yDat, 2) / 2#) / Sqr(PPi * 2#)
            Dm06 = exp(-fai * WorksheetFunction.Power(xDat, 2) / 2#)
            
            Dm03 = Dm04 * Dm05 * Dm06 * cGanm_Calc(fai)
                        
            TT0 = TT0 + Dm02 * Dm03
        Next j
    Next i
    
    sub_DunnetSingle = Abs(1 - TT0 * xKan * yKan)
    Application.EnableCancelKey = saveCancelKey
    Exit Function
handleCancel:
    bSwEnd = True
    bAbort = True
    sub_DunnetSingle = DBL_ERR
    Application.EnableCancelKey = saveCancelKey
End Function

'========EOF========


INQUEST-PP=macro
