Attribute VB_Name = "Module3"
Sub Rectangle4_Click()

    Application.ScreenUpdating = False
    
    Dim data As Worksheet
    Dim w_sd As Worksheet
    Dim ppr As Worksheet
    Dim art As Worksheet
    Dim art2 As Worksheet
    Dim bop As Worksheet
    Dim bopda As Worksheet
    Dim endrow_bopda As Integer
    Dim con As Worksheet
    
    Set ppr = Sheets("PPR Report")
    Set data = Sheets("Sales Document Data")
    Set w_sd = Sheets("SD Data")
    Set art = Sheets("Article Data")
    Set art2 = Sheets("Articles")
    Set bop = Sheets("BOP")
    Set bopda = Sheets("BOP Data")
    Set con = Sheets("Control Sheet")
    
    Dim a_bop As Variant
    
    endrow_bop = bop.Cells(Rows.Count, 2).End(xlUp).Row
    
    a_bop = bop.Range(bop.Cells(31, 3), bop.Cells(endrow_bop, 6))
    
    If con.Cells(32, 3) = 0 Then
    
        For i = 31 To endrow_bop
        
            If (bop.Cells(i, 4)) < bop.Cells(i, 6) Then
            
                With bop.Range(bop.Cells(i, 3), bop.Cells(i, 6))
                
                    .Interior.Color = RGB(255, 0, 0)
                    .Font.Color = RGB(255, 255, 255)
                    .Font.Bold = True
                    .VerticalAlignment = xlCenter
                    .HorizontalAlignment = xlCenter
           
                End With
                
                
                With bop.Range(bop.Cells(i, 2), bop.Cells(i, 2))
    
                .Interior.Color = RGB(64, 49, 81)
                .Font.Color = RGB(255, 255, 255)
                .Font.Bold = True
        
                End With
    
       
                
            End If
        
        Next i
        
    con.Cells(32, 3) = 1
    
    With bop.Shapes("Rectangle 4").ThreeD
    
    .BevelTopInset = 9
    .BevelTopDepth = 6
   
    End With
    
        
    Else
    
    With bop.Range(bop.Cells(31, 3), bop.Cells(endrow_bop, 6))
    
        .Interior.Color = RGB(255, 255, 255)
        .Font.Color = RGB(0, 0, 0)
        .Font.Bold = Bold
        
    End With
    
    
    With bop.Range(bop.Cells(31, 2), bop.Cells(endrow_bop, 2))
    
        .Interior.Color = RGB(204, 192, 218)
        .Font.Color = RGB(0, 0, 0)
        .Font.Bold = False
        
    End With
    
    con.Cells(32, 3) = 0
        
    With bop.Shapes("Rectangle 4").ThreeD
    
    .BevelTopInset = 0
    .BevelTopDepth = 0
   
    End With
    
    
    
    End If


End Sub


Attribute VB_Name = "Module4"
Sub RoundedRectangle1_Click()
 UserForm2.Show
End Sub

Attribute VB_Name = "Module5"
Sub Macro1()
'
' Macro1 Macro
'

'
    ActiveSheet.ChartObjects("Chart 27").Activate
    ActiveChart.SeriesCollection(1).XValues = "='SD Data'!$H$3:$H$13"
End Sub
Sub Macro2()
'
' Macro2 Macro
'

'
    ActiveSheet.ChartObjects("Chart 27").Activate
    ActiveChart.SeriesCollection(1).Values = "='SD Data'!$F$3:$F$13"
    ActiveChart.SeriesCollection(2).Values = "='SD Data'!$E$3:$E$13"
End Sub
Sub Macro3()
'
' Macro3 Macro
'

'
    ActiveSheet.ChartObjects("Chart 14").Activate
    ActiveChart.SeriesCollection(1).Values = "='Article Data'!$D$2:$D$17"
    ActiveChart.SeriesCollection(1).XValues = "='Article Data'!$E$2:$E$11"
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

    Application.ScreenUpdating = False
    
    Dim data As Worksheet
    Dim w_sd As Worksheet
    Dim ppr As Worksheet
    Dim art As Worksheet
    Dim art2 As Worksheet
    Dim bop As Worksheet
    Dim bopda As Worksheet
    
    Set ppr = Sheets("PPR Report")
    Set data = Sheets("Sales Document Data")
    Set w_sd = Sheets("SD Data")
    Set art = Sheets("Article Data")
    Set art2 = Sheets("Articles")
    Set bop = Sheets("BOP")
    Set bopda = Sheets("BOP Data")
    
    activerow = Target.Row
    activecolumn = Target.Column
    
    If activerow < 31 Or activerow > 38 Then Exit Sub
    
    If activecolumn = 2 Then
    ListBox1.Show
    Cancel = True
    Cancel = False
    End If
    


End Sub
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{E3547DAD-C7AB-4D96-8222-344CCD46E9DD}{B3BDB361-DD08-44C2-825D-2C6087208BFE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub ListBox1_Click()

End Sub

Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Initialize()

    Dim data As Worksheet
    Dim w_sd As Worksheet
    Dim ppr As Worksheet
    Dim art As Worksheet
    Dim art2 As Worksheet
    Dim bop As Worksheet
    Dim bopda As Worksheet
    Dim onclick As Worksheet

    Set ppr = Sheets("PPR Report")
    Set data = Sheets("Sales Document Data")
    Set w_sd = Sheets("SD Data")
    Set art = Sheets("Article Data")
    Set art2 = Sheets("Articles")
    Set bop = Sheets("BOP")
    Set bopda = Sheets("BOP Data")
    Set onclick = Sheets("On_click")
    
    With Label1.Font
    
        .Bold = True
        .Size = 12
    
    End With
    
    Label2.Font.Name = ActiveCell.Value
    
    Dim a_onclick As Variant
    
    endrow_onclick = onclick.Cells(Rows.Count, 2).End(xlUp).Row
    
    a_onclick = onclick.Range(onclick.Cells(6, 2), onclick.Cells(endrow_onclick, 9))
    
    ListBox1.ColumnCount = 8
    ListBox1.ColumnWidths = "90;90;180;160;50;40;70;50"
    UserForm1.ListBox1.List = a_onclick
    

End Sub
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{836C6CC2-B30C-481C-8423-B90DA79A1DAB}{59941351-6400-460F-BA29-3E049D2943CD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    

    
    strText = UserForm2.TextBox1.Value

    arrLines = Split(strText, vbCrLf)

    For Each strline In arrLines

        If xVal = "" Then
            xVal = strline
        Else
            xVal = xVal & ";" & strline
        End If

    Next
    
    shControl.Range("C37") = xVal
    shPPR.Range("E6") = "MultiLine in Use"
    UserForm2.Hide
End Sub
Attribute VB_Name = "mArticle_Frequency"
Sub Article_Frequency_Summary()

    'simple copy and paste then remove duplicates. loop through new list and run count ifs on main file
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    shFreq.Visible = xlSheetVisible
    
    Dim xEndRow, xRow
    
    On Error Resume Next:
    
    With shFreq
    
    
        .Select
        ' clear frequency tab
        If .Range("B5") <> "" Then
        
            xEndRow = .Cells(Rows.Count, 2).End(xlUp).Row
            shFreq.Range("A5:K" & xEndRow).Clear
    
        End If
    
        xEndRow = shData.Cells(Rows.Count, 2).End(xlUp).Row
        shData.Range(shData.Cells(6, 22), shData.Cells(xEndRow, 23)).Copy
    
        
        .Cells(5, 2).PasteSpecial xlValues
        xEndRow = .Cells(Rows.Count, 2).End(xlUp).Row
        .Range(.Cells(5, 2), .Cells(xEndRow, 5)).RemoveDuplicates (1)
        
        For xRow = 5 To .Cells(Rows.Count, 2).End(xlUp).Row
        
            .Cells(xRow, 5) = WorksheetFunction.CountIfs(shData.Columns(22), .Cells(xRow, 2)) ' Count of line
            .Cells(xRow, 4) = Format(WorksheetFunction.SumIfs(shData.Columns(25), shData.Columns(22), .Cells(xRow, 2)), "0.00") ' Net Sales
            .Cells(xRow, 6) = Format(WorksheetFunction.SumIfs(shData.Columns(26), shData.Columns(22), .Cells(xRow, 2)), "0") ' Qty********
            
            .Cells(xRow, 7) = Format(.Cells(xRow, 4) / .Cells(xRow, 6), "0.00") ' unit price
            If .Cells(xRow, 7) = "" Then .Cells(xRow, 7) = 0
            
            .Cells(xRow, 8) = Format(WorksheetFunction.SumIfs(shData.Columns(27), shData.Columns(22), .Cells(xRow, 2)), "0.00") ' Col 1 Price
            .Cells(xRow, 9) = Format(WorksheetFunction.SumIfs(shData.Columns(28), shData.Columns(22), .Cells(xRow, 2)), "0.00") ' Del Charges
            .Cells(xRow, 10) = Format(.Cells(xRow, 8) - (.Cells(xRow, 4) - .Cells(xRow, 9)), "0.00") ' Col 1 Savings
            
            
        Next xRow
        
        xEndRow = .Cells(Rows.Count, 2).End(xlUp).Row
        With .Range(.Cells(5, 2), .Cells(xEndRow, 10))
    
            .Borders.LineStyle = xlContinuous
            .Borders.Color = RGB(166, 166, 166)
    
        End With
        ' sort Frequency column
        
        .Range("B5:J" & xEndRow).Sort key1:=.Range("E5"), order1:=xlDescending
        
        .Range("B5").Select
    End With
 
 
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub

Attribute VB_Name = "mBOAutomationNew"
Sub BO_Automation()

    
    
    Call EnableAnalysisOffice ' login to analysis
    Call Refresh_Check_Process ' Initial refresh of workbook to enable usage
    'Call DisableAnalysisOffice ' log out of analysis
    
    With shPPR
        ' allocate name to front sheet auto populate
        
        If .Range("B6") = "Sold To" Then
            .Range("B9") = shData.Cells(6, 9)
            shBOP.Range("D5") = shData.Cells(6, 9)
        ElseIf .Range("B6") = "Ship To" Then
            .Range("B9") = shData.Cells(6, 11)
            shBOP.Range("D5") = shData.Cells(6, 11)
        ElseIf .Range("B6") = "Hn1" Then
            .Range("B9") = shData.Cells(6, 3)
            shBOP.Range("D5") = shData.Cells(6, 3)
        ElseIf .Range("B6") = "Hn2" Then
            .Range("B9") = shData.Cells(6, 5)
            shBOP.Range("D5") = shData.Cells(6, 5)
        ElseIf .Range("B6") = "Hn3" Then
            .Range("B9") = shData.Cells(6, 7)
            shBOP.Range("D5") = shData.Cells(6, 7)
        End If
        
    End With

End Sub
Public Sub EnableAnalysisOffice()

' Code required to launch business objcts tool bar
' Ensure that the reference library: SAP Analysis API is turned on
' SAP

    Dim addin As COMAddIn

    For Each addin In Application.COMAddIns

        If addin.progID = "SapExcelAddIn" Then

            If addin.Connect = False Then addin.Connect = True

        End If
    Next
    
End Sub
Public Sub DisableAnalysisOffice()
' Code to disable analysis

    Dim addin As COMAddIn

    For Each addin In Application.COMAddIns

        If addin.progID = "SapExcelAddIn" Then

            If addin.Connect = True Then addin.Connect = False

        End If

    Next

End Sub
Sub Refresh_Check_Process()

    ' code which checks if bo report has been processed if not then refresh report , important when building new automation
    ' More than 1 datasource can be processed "DS_1; DS_2"

    Dim lResult As Long

    lResult = Application.Run("SAPGetProperty", "IsDataSourceActive", "DS_2")
    
    If lResult = False Then
        ' if DS is not processed then assign the variables before refresh
        
        iResult = Application.Run("SAPExecuteCommand", "RegisterCallBack", "BeforeFirstPromptsDisplay", "CallBack_SetVariables")
        iResult = Application.Run("SAPExecuteCommand", "Refresh", "DS_2")
    Else
        ' if the DS is already refreshed then reset varialbes and reresh
      Call UsingMultipleVariables
    
    End If

End Sub

Private Function CallBack_setVariables(dpNames As Variant) As Variant
    
    ' this allows a call back to assign varialbe before refresh on initial refresh
    
    Dim iResult As Variant
    Dim dataSource As String
    Dim varName As String
    Dim varValue As String
    Dim xDTRange As String, xSDT As String, xEDT As String
    

    ' clear column w in the sales documnet data tab
     Sheets("Sales Document Data").Columns(26).ClearContents
    
    ' 01.11.2016 - 30.11.2017

    With Sheets("PPR Report")
        
        xSDT = .Range("H6")
        xEDT = .Range("K6")
        xDTRange = Mid(xSDT, 1, 2) & "." & Mid(xSDT, 4, 2) & "." & Mid(xSDT, 7, 4) & " - " & Mid(xEDT, 1, 2) & "." & Mid(xEDT, 4, 2) & "." & Mid(xEDT, 7, 4)
        
    End With

    With shControl
        
        'xSDT = shControl.Cells(5, 3): xEDT = shControl.Cells(6, 3)
        'xDTRange = Mid(xSDT, 1, 2) & "." & Mid(xSDT, 4, 2) & "." & Mid(xSDT, 7, 4) & " - " & Mid(xEDT, 1, 2) & "." & Mid(xEDT, 4, 2) & "." & Mid(xEDT, 7, 4)
        
        xbp = shPPR.Range("B6")
        
        If shPPR.Range("E6") = "MultiLine in Use" Then
            xBP_Numb = shControl.Range("C37")
        Else
            xBP_Numb = shPPR.Range("E6")
        End If
        
        xdate = 10
        xSalesOrg = shPPR.Range("N6")
        xCurr = shPPR.Range("Q6")
                
        customer_type = xbp
        
        Select Case customer_type
        
            Case "Sold To"
            
                'BP Number
                iResult = Application.Run("SAPSetVariable", "Sold To", xBP_Numb, "INPUT_STRING", "DS_2")
                'clear others
                iResult = Application.Run("SAPSetVariable", "Ship To", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 1", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 2", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy L3", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Header Create Date Range", xDTRange, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sales Organisation", xSalesOrg, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Display Currency", xCurr, "INPUT_STRING", "DS_2")
            
            Case "Hn1"
            
                'BP Number
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 1", xBP_Numb, "INPUT_STRING", "DS_2")
                
                'clear previous
                iResult = Application.Run("SAPSetVariable", "Sold To", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Ship To", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 2", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy L3", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Header Create Date Range", xDTRange, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sales Organisation", xSalesOrg, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Display Currency", xCurr, "INPUT_STRING", "DS_2")
                
                
            Case "Hn2"
            
                'BP Number
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 2", xBP_Numb, "INPUT_STRING", "DS_2")
                
                'clear previous
                iResult = Application.Run("SAPSetVariable", "Sold To", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Ship To", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 1", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy L3", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Header Create Date Range", xDTRange, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sales Organisation", xSalesOrg, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Display Currency", xCurr, "INPUT_STRING", "DS_2")
                
            
            Case "Hn3"
            
                'BP Number
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy L3", xBP_Numb, "INPUT_STRING", "DS_2")
                
                'clear previous
                iResult = Application.Run("SAPSetVariable", "Sold To", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Ship To", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 1", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 2", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Header Create Date Range", xDTRange, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sales Organisation", xSalesOrg, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Display Currency", xCurr, "INPUT_STRING", "DS_2")
            
            Case "Ship To"
            
                'BP Number
                iResult = Application.Run("SAPSetVariable", "Ship To", xBP_Numb, "INPUT_STRING", "DS_2")
                'clear others
                iResult = Application.Run("SAPSetVariable", "Sold To", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 1", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 2", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy L3", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Header Create Date Range", xDTRange, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sales Organisation", xSalesOrg, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Display Currency", xCurr, "INPUT_STRING", "DS_2")
            
        End Select
       
    End With

End Function

Public Sub UsingMultipleVariables()
    
    ' Example which demonstrate the variables being refreshed
    ' only will work if the data has been initially refreshed
    ' THIS WOULD BE USED FOR MAJORITY OF INSTANCES!
    
    Dim iResult As Long, xDTRange As String, xSDT As String, xEDT As String
    
    Dim con As Worksheet
    Set con = Sheets("Control Sheet")
    ' clear column w in the sales documnet data tab
    Sheets("Sales Document Data").Columns(23).ClearContents
    
    ' 01.11.2016 - 30.11.2017

    With Sheets("PPR Report")
        
        xSDT = .Range("H6")
        xEDT = .Range("K6")
        xDTRange = Mid(xSDT, 1, 2) & "." & Mid(xSDT, 4, 2) & "." & Mid(xSDT, 7, 4) & " - " & Mid(xEDT, 1, 2) & "." & Mid(xEDT, 4, 2) & "." & Mid(xEDT, 7, 4)
        
    End With

    With shControl
        
        'xSDT = shControl.Cells(5, 3): xEDT = shControl.Cells(6, 3)
        'xDTRange = Mid(xSDT, 1, 2) & "." & Mid(xSDT, 4, 2) & "." & Mid(xSDT, 7, 4) & " - " & Mid(xEDT, 1, 2) & "." & Mid(xEDT, 4, 2) & "." & Mid(xEDT, 7, 4)
        
        xbp = shPPR.Range("B6")
        If shPPR.Range("E6") = "MultiLine in Use" Then
            xBP_Numb = shControl.Range("C37")
        Else
            xBP_Numb = shPPR.Range("E6")
        End If
        xdate = 10
        
        xSalesOrg = shPPR.Range("N6")
        xCurr = shPPR.Range("Q6")
        
        Call Application.Run("SAPSetRefreshBehaviour", "Off") ' Ensure report can not be refreshed
        Call Application.Run("SAPExecuteCommand", "PauseVariableSubmit", "On") ' ensure that Analyser is paused
        
        Call Application.Run("SAPExecuteCommand", "RefreshData")
        
        customer_type = xbp
        
        Select Case customer_type
        
            Case "Sold To"
            
                'BP Number
                iResult = Application.Run("SAPSetVariable", "Sold To", xBP_Numb, "INPUT_STRING", "DS_2")
                'clear others
                iResult = Application.Run("SAPSetVariable", "Ship To", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 1", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 2", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy L3", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Header Create Date Range", xDTRange, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sales Organisation", xSalesOrg, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Display Currency", xCurr, "INPUT_STRING", "DS_2")
            
            Case "Hn1"
            
                'BP Number
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 1", xBP_Numb, "INPUT_STRING", "DS_2")
                
                'clear previous
                iResult = Application.Run("SAPSetVariable", "Sold To", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Ship To", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 2", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy L3", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Header Create Date Range", xDTRange, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sales Organisation", xSalesOrg, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Display Currency", xCurr, "INPUT_STRING", "DS_2")
            
            Case "Hn2"
            
                'BP Number
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 2", xBP_Numb, "INPUT_STRING", "DS_2")
                
                'clear previous
                iResult = Application.Run("SAPSetVariable", "Sold To", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Ship To", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 1", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy L3", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Header Create Date Range", xDTRange, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sales Organisation", xSalesOrg, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Display Currency", xCurr, "INPUT_STRING", "DS_2")
                
            
            Case "Hn3"
            
                'BP Number
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy L3", xBP_Numb, "INPUT_STRING", "DS_2")
                
                'clear previous
                iResult = Application.Run("SAPSetVariable", "Sold To", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Ship To", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 1", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 2", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Header Create Date Range", xDTRange, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sales Organisation", xSalesOrg, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Display Currency", xCurr, "INPUT_STRING", "DS_2")

            
            Case "Ship To"
            
                'BP Number
                iResult = Application.Run("SAPSetVariable", "Ship To", xBP_Numb, "INPUT_STRING", "DS_2")
                'clear others
                iResult = Application.Run("SAPSetVariable", "Sold To", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 1", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy 2", "", "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sold To Hierarchy L3", "", "INPUT_STRING", "DS_2")
                
                iResult = Application.Run("SAPSetVariable", "Header Create Date Range", xDTRange, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Sales Organisation", xSalesOrg, "INPUT_STRING", "DS_2")
                iResult = Application.Run("SAPSetVariable", "Display Currency", xCurr, "INPUT_STRING", "DS_2")
                
            
        End Select
           
    
        'iResult = Application.Run("SAPSetVariable", "Calendar Year/Month", Xdate, "INPUT_STRING", "DS_2")
        
        Call Application.Run("SAPExecuteCommand", "PauseVariableSubmit", "Off") ' before refreshing, ensure that the pause command is off!!
        Call Application.Run("SAPSetRefreshBehaviour", "On") ' refresh behaviour needs to be turned on

        
    End With

End Sub
Sub view_bop()

 Dim bop As Worksheet
 Set bop = Sheets("BOP")
 
 bop.Visible = xlSheetVisible
 bop.Select

End Sub










Attribute VB_Name = "mContactSummary"
Sub Contact_Summary()
    
    Dim xRow, xCol, xEndRow

    With shOrder
    
    
        If .Cells(2, 9) <> "" Then
            xEndRow = .Cells(Rows.Count, 9).End(xlUp).Row
            .Range("I2:AA" & xEndRow).ClearContents
            
            
        End If
        
        xEndRow = .Cells(Rows.Count, 5).End(xlUp).Row
        .Range("E2:E" & xEndRow).Copy Destination:=.Cells(2, 9)
        ' remove duplicates
        xEndRow = .Cells(Rows.Count, 9).End(xlUp).Row
        .Range(.Cells(2, 9), .Cells(xEndRow, 9)).RemoveDuplicates (1)
        
        ' add summary
        For xRow = 2 To .Cells(Rows.Count, 9).End(xlUp).Row
            For xCol = 10 To 18
            
            
                If .Cells(1, xCol) = "Total" Then
                    .Cells(xRow, xCol) = Application.WorksheetFunction.Sum(.Range(.Cells(xRow, xCol - 8).AddressLocal & ":" & .Cells(xRow, xCol - 1).AddressLocal))
                    .Cells(xRow, xCol + 9) = Application.WorksheetFunction.Sum(.Range(.Cells(xRow, (xCol + 9) - 8).AddressLocal & ":" & .Cells(xRow, (xCol + 9) - 1).AddressLocal))
                ElseIf .Cells(1, xCol) <> "" Then
                    
                    .Cells(xRow, xCol) = Application.WorksheetFunction.SumIfs(.Columns(3), .Columns(5), .Cells(xRow, 9), .Columns(6), .Cells(1, xCol)) ' Net sales
                    .Cells(xRow, xCol + 9) = Application.WorksheetFunction.CountIfs(.Columns(5), .Cells(xRow, 9), .Columns(6), .Cells(1, xCol)) ' count of orders
                    
                End If
                
            Next xCol
        Next xRow
    
        xEndRow = .Cells(Rows.Count, 9).End(xlUp).Row
        On Error Resume Next
        shOrder.Range("I2:AA" & xEndRow).Sort key1:=.Range("R2"), order1:=xlDescending
        
    
    End With

End Sub

Attribute VB_Name = "mMain"
Sub salesdoc()
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    
    Dim w_data As Worksheet
    Dim w_sd As Worksheet
    Dim ppr As Worksheet
    Dim con As Worksheet

    Set w_data = Sheets("Sales Document Data")
    Set w_sd = Sheets("SD Data")
    Set ppr = Sheets("PPR Report")
    Set con = Sheets("Control Sheet")
    
    Dim xCCol As Integer
    Dim XTechN As String
       
    bp = ppr.Cells(6, 2)
    
    Call BO_Automation
    
    ' error if no data from business objects do not process and tell user to try again
    If w_data.Range("B6") = "" Then
        
        MsgBox ("No Data Found! Please Try Again")
        Exit Sub
    Else
        ' CLEAR COLUMN AA FIRST
        w_data.Range("AC:AC").ClearContents
        ' ADD UNIQUE ORDER COUNT TO COLUMN AC
        For x = 6 To w_data.Cells(Rows.Count, 2).End(xlUp).Row
            
            If w_data.Cells(x, 13) <> w_data.Cells(x - 1, 13) Then
            
                w_data.Cells(x, 29) = 1
            
            Else
                
                w_data.Cells(x, 29) = 0
            
            End If
            
        Next x
        
    End If
    
    ' clear sd data tab
    With w_sd
        
        .Cells.ClearContents
    
    End With
    
    endrow_data = w_data.Cells(Rows.Count, 2).End(xlUp).Row
    
    Select Case bp
        
        Case Is = "Hn1"
            
            xCCol = con.Cells(4, 12)
            
            w_data.Range(w_data.Cells(6, xCCol), w_data.Cells(endrow_data, xCCol + 1)).Copy
            w_sd.Range(w_sd.Cells(2, 2), w_sd.Cells(endrow_data, 3)).PasteSpecial xlValues
            
            w_data.Range(w_data.Cells(6, 12), w_data.Cells(endrow_data, 12)).Copy
            w_sd.Range(w_sd.Cells(2, 4), w_sd.Cells(endrow_data, 4)).PasteSpecial xlValues
            
            w_sd.Range(w_sd.Cells(2, 2), w_sd.Cells(endrow_data, 4)).RemoveDuplicates (3)
            
            xCCol = 2
        
        Case Is = "Hn2"
        
            xCCol = con.Cells(5, 12)
            
            w_data.Range(w_data.Cells(6, xCCol), w_data.Cells(endrow_data, xCCol + 1)).Copy
            w_sd.Range(w_sd.Cells(2, 2), w_sd.Cells(endrow_data, 3)).PasteSpecial xlValues
            
            w_data.Range(w_data.Cells(6, 12), w_data.Cells(endrow_data, 12)).Copy
            w_sd.Range(w_sd.Cells(2, 4), w_sd.Cells(endrow_data, 4)).PasteSpecial xlValues
            
            w_sd.Range(w_sd.Cells(2, 2), w_sd.Cells(endrow_data, 4)).RemoveDuplicates (3)
        
        Case Is = "Hn3"
        
            xCCol = con.Cells(6, 12)
            
            w_data.Range(w_data.Cells(6, xCCol), w_data.Cells(endrow_data, xCCol + 1)).Copy
            w_sd.Range(w_sd.Cells(2, 2), w_sd.Cells(endrow_data, 3)).PasteSpecial xlValues
            
            w_data.Range(w_data.Cells(6, 12), w_data.Cells(endrow_data, 12)).Copy
            w_sd.Range(w_sd.Cells(2, 4), w_sd.Cells(endrow_data, 4)).PasteSpecial xlValues
            
            w_sd.Range(w_sd.Cells(2, 2), w_sd.Cells(endrow_data, 4)).RemoveDuplicates (3)
        
        Case Is = "Sold To"
        
            xCCol = con.Cells(7, 12)
            
            w_data.Range(w_data.Cells(6, xCCol), w_data.Cells(endrow_data, xCCol + 1)).Copy
            w_sd.Range(w_sd.Cells(2, 2), w_sd.Cells(endrow_data, 3)).PasteSpecial xlValues
            
            w_data.Range(w_data.Cells(6, 12), w_data.Cells(endrow_data, 12)).Copy
            w_sd.Range(w_sd.Cells(2, 4), w_sd.Cells(endrow_data, 4)).PasteSpecial xlValues
            
            w_sd.Range(w_sd.Cells(2, 2), w_sd.Cells(endrow_data, 4)).RemoveDuplicates (3)
        
        Case Is = "Ship To"
        
            xCCol = con.Cells(8, 12)
            
            w_data.Range(w_data.Cells(6, xCCol), w_data.Cells(endrow_data, xCCol + 2)).Copy
            w_sd.Range(w_sd.Cells(2, 2), w_sd.Cells(endrow_data, 4)).PasteSpecial xlValues
            
            w_sd.Range(w_sd.Cells(2, 2), w_sd.Cells(endrow_data, 4)).RemoveDuplicates (3)
            
            
    End Select
    
    endrow_data = w_data.Cells(Rows.Count, 2).End(xlUp).Row
        
    'define arrays
    a_data = w_data.Range(w_data.Cells(5, 2), w_data.Cells(endrow_data, 29))
    a_sd = w_sd.Range(w_sd.Cells(1, 2), w_sd.Cells(endrow_data, 6))
    
    Call SD(xCCol)
    
    xNetSalesCounter = 0
    
    For i = 2 To UBound(a_sd, 1)
    
        For j = 2 To UBound(a_data, 1)
        
            If a_sd(i, 1) = a_data(j, xCCol - 1) And a_sd(i, 3) = a_data(j, 11) Then
            
                'net sales
                xNetSalesCounter = xNetSalesCounter + a_data(j, 24)
            
            End If
        
        Next j
        
        a_sd(i, 4) = xNetSalesCounter
        xNetSalesCounter = 0
        
    Next i
    
    w_sd.Range(w_sd.Cells(1, 2), w_sd.Cells(endrow_data, 6)) = a_sd
    
    '# of orders
    ' clear orders and date from the SD Data Tab
    
    endrow_sd = w_sd.Cells(Rows.Count, 2).End(xlUp).Row
    
    For i = 2 To endrow_sd
    
        w_sd.Cells(i, 6).Value = Application.WorksheetFunction.CountIf(w_sd.Range(w_sd.Cells(2, 12), w_sd.Cells(9000, 12)), w_sd.Cells(i, 4))
    
    Next i
    
    
    Call Orders
    
    
    'format shapes
    
    'date range filed
    con.Cells(6.3).Value = w_sd.Cells(endrow_sd - 1, 4)
    
    'ppr.Range("B9") = con.Cells(3, 3)
    
    Call refresh_charts
    Call bop
    
    ' sort graph data ( fixes issue with graph? )
    With Sheets("SD Data")
        xend = .Cells(Rows.Count, 2).End(xlUp).Row
        .Range("B2:H" & xend).Sort key1:=.Range("H2"), order1:=xlAscending
    End With
    
    ' update BOP Section
    Dim selection As String
        
    selection = Sheets("BOP").Cells(6, 2)
    
    Call create_bop(selection)
    
    MsgBox ("Report Ready")

    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True

End Sub

Function SD(bp As Integer)

    Dim w_data As Worksheet
    Dim w_sd As Worksheet
    Set w_data = Sheets("Sales Document Data")
    Set w_sd = Sheets("SD Data")
    endrow_data = w_data.Cells(Rows.Count, 2).End(xlUp).Row
    
    w_data.Range(w_data.Cells(6, bp), w_data.Cells(endrow_data, bp)).Copy
    w_sd.Range(w_sd.Cells(2, 11), w_sd.Cells(endrow_data, 11)).PasteSpecial xlValues
    
    w_data.Range(w_data.Cells(6, 12), w_data.Cells(endrow_data, 13)).Copy
    w_sd.Range(w_sd.Cells(2, 12), w_sd.Cells(endrow_data, 13)).PasteSpecial xlValues
    
    w_sd.Range(w_sd.Cells(2, 11), w_sd.Cells(endrow_data, 13)).RemoveDuplicates (3)
    
End Function

Sub Orders()

    Dim w_data As Worksheet
    Dim w_sd As Worksheet
    Set w_order = Sheets("Order Data")
    Set w_data = Sheets("Sales Document Data")
    Dim con As Worksheet, xDT As Date
    Set con = Sheets("Control Sheet")
    
    site = con.Cells(8, 3)
    
    ' clear column F
    With Sheets("SD Data")
    
    For x = 2 To .Cells(Rows.Count, 4).End(xlUp).Row
        If Len(.Cells(x, 4)) = 6 Then
            xDT = "01/0" & Mid(.Cells(x, 4), 1, 1) & "/" & Mid(.Cells(x, 4), 3, 4)
        Else
            xDT = "01/" & Mid(.Cells(x, 4), 1, 2) & "/" & Mid(.Cells(x, 4), 4, 4)
        End If
        
        .Cells(x, 8) = xDT
    
    Next x
        
        
        
    End With
    
    Select Case site
    
        Case "Hn1"
        
            xCol = 2
        
        Case "Hn2"
        
            xCol = 4
        
        Case "Hn3"
        
            xCol = 6
        
        Case "Sold To"
        
            xCol = 8
        
        Case "Ship To"
            
            xCol = 10
        
        
    End Select
    
    ' clear orders tab first
    w_order.Range("A2:BA50000").ClearContents
    
    endrow_data = w_data.Cells(Rows.Count, 2).End(xlUp).Row
    'sd
    w_data.Range(w_data.Cells(6, 13), w_data.Cells(endrow_data, 13)).Copy
    w_order.Range(w_order.Cells(2, 2), w_order.Cells(endrow_data, 2)).PasteSpecial xlValues
    'Contact
    w_data.Range(w_data.Cells(6, 15), w_data.Cells(endrow_data, 15)).Copy
    w_order.Range(w_order.Cells(2, 5), w_order.Cells(endrow_data, 5)).PasteSpecial xlValues
    'site
    w_data.Range(w_data.Cells(6, xCol), w_data.Cells(endrow_data, xCol)).Copy
    w_order.Range(w_order.Cells(2, 1), w_order.Cells(endrow_data, 1)).PasteSpecial xlValues
    
    w_data.Range(w_data.Cells(6, 16), w_data.Cells(endrow_data, 16)).Copy
    w_order.Range(w_order.Cells(2, 6), w_order.Cells(endrow_data, 6)).PasteSpecial xlValues
    
    
    w_order.Range(w_order.Cells(2, 1), w_order.Cells(endrow_data, 6)).RemoveDuplicates (2)
    
    endrow_orders = w_order.Cells(Rows.Count, 5).End(xlUp).Row
    
    'array for orders
    a_data = w_data.Range(w_data.Cells(6, 2), w_data.Cells(endrow_data, 29))
    a_order = w_order.Range(w_order.Cells(2, 1), w_order.Cells(endrow_orders, 6))
    
    xline_counter = 0
    xNetsales_counter = 0
    
    For i = 1 To UBound(a_order, 1)
    
        For j = 1 To UBound(a_data, 1)
        
            If a_order(i, 2) = a_data(j, 12) Then
            
                xline_counter = xline_counter + 1
                xNetsales_counter = xNetsales_counter + a_data(j, 24)
            
            End If
        
        Next j
        
        a_order(i, 3) = xNetsales_counter
        a_order(i, 4) = xline_counter
        xNetsales_counter = 0
        xline_counter = 0
    
    Next i
    
    w_order.Range(w_order.Cells(2, 1), w_order.Cells(endrow_orders, 6)) = a_order
    
    Call Contact_Summary
    
End Sub

Sub refresh_charts()

    ' Refresh Main Graph ordres vs spend
    
    Dim w_data As Worksheet
    Dim w_sd As Worksheet
    Dim ppr As Worksheet
    Set ppr = Sheets("PPR Report")
    Set w_data = Sheets("Sales Document Data")
    Set w_sd = Sheets("SD Data")
    
   ' endrow_data = w_data.Cells(Rows.Count, 2).End(xlUp).Row
    
    chart_endrow = w_sd.Cells(Rows.Count, 2).End(xlUp).Row
    shPPR.Select
    ActiveSheet.ChartObjects("Chart 27").Activate
    ActiveChart.SeriesCollection(1).Values = "='SD Data'!$F$2:$F" & chart_endrow
    ActiveChart.SeriesCollection(2).Values = "='SD Data'!$E$2:$E" & chart_endrow
    
    ActiveChart.SeriesCollection(1).XValues = "='SD Data'!$H$2:$H$" & chart_endrow
    ActiveChart.SeriesCollection(2).XValues = "='SD Data'!$H$2:$H$" & chart_endrow
    ppr.Range("B10").Select
    
End Sub
Sub bop()

    Dim data As Worksheet
    Dim w_sd As Worksheet
    Dim ppr As Worksheet
    Dim art As Worksheet
    Dim bopda_endrow As Integer
    
    Set ppr = Sheets("PPR Report")
    Set data = Sheets("Sales Document Data")
    Set w_sd = Sheets("SD Data")
    Set art = Sheets("Article Data")
    
    bp = "Ship to"
    ' Clear Article Data
    With art
        If .Cells(2, 1) <> "" Then
            xEndRow = .Cells(Rows.Count, 1).End(xlUp).Row
            .Range("B2:E" & xEndRow).ClearContents
        End If
    End With
    
    Select Case bp
    
        Case "Hn1"
        
            bp_cell = 2
    
        Case "Hn2"
        
            bp_cell = 5
    
        Case "Hn3"
        
            bp_cell = 6
    
        Case "Sold to"
        
            bp_cell = 8
    
        Case "Ship to"
        
            bp_cell = 10
    
    End Select
    
    endrow_data = data.Cells(Rows.Count, 2).End(xlUp).Row
    
    'Bp number
    data.Range(data.Cells(7, bp_cell), data.Cells(endrow_data, bp_cell)).Copy
    art.Range(art.Cells(2, 1), art.Cells(endrow_data, 1)).PasteSpecial xlValues
    'site name
    data.Range(data.Cells(7, bp_cell + 1), data.Cells(endrow_data, bp_cell + 1)).Copy
    art.Range(art.Cells(2, 2), art.Cells(endrow_data, 2)).PasteSpecial xlValues
    'article number
    data.Range(data.Cells(7, 22), data.Cells(endrow_data, 22)).Copy
    art.Range(art.Cells(2, 3), art.Cells(endrow_data, 3)).PasteSpecial xlValues
    
    endrow_art = art.Cells(Rows.Count, 2).End(xlUp).Row
    
    art.Range(art.Cells(2, 1), art.Cells(endrow_art, 3)).RemoveDuplicates (3)
    
    endrow_art = art.Cells(Rows.Count, 2).End(xlUp).Row
    
    a_art = art.Range(art.Cells(2, 1), art.Cells(endrow_art, 5))
    
    a_data = data.Range(data.Cells(7, 2), data.Cells(endrow_data - 1, 29))
    
    xcounter = 0
    
    For i = 1 To UBound(a_art, 1)
    
        For j = 1 To UBound(a_data, 1)
        
            If a_art(i, 3) = a_data(j, 21) Then
            
                counter = counter + 1
                
            End If
        
        Next j
        
        a_art(i, 4) = counter
        counter = 0
        
    Next i
    
    art.Range(art.Cells(2, 1), art.Cells(endrow_art, 5)) = a_art
    
    With Sheets("Article Data")
        xend = .Cells(Rows.Count, 2).End(xlUp).Row
        .Range("A2:D" & xend).Sort key1:=.Range("D2"), order1:=xlDescending
    End With
    
    endrow_art = art.Cells(Rows.Count, 2).End(xlUp).Row
    xcounter = 0
    
    For i = 2 To endrow_art
    
        art.Cells(i, 5) = xcounter
        xcounter = xcounter + 1
    
    
    Next i
    
    ' update Graph on Summary Page
    xend = Sheets("Article Data").Cells(Rows.Count, 2).End(xlUp).Row
    shPPR.Select
    
    ActiveSheet.ChartObjects("Chart 14").Activate
    ActiveChart.SeriesCollection(1).Values = "='Article Data'!$D$2:$D$" & xend
    ActiveChart.SeriesCollection(1).XValues = "='Article Data'!$E$2:$E$" & xend
    
    ppr.Range("B10").Select
    
End Sub


Sub view_article()

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    Dim data As Worksheet
    Dim w_sd As Worksheet
    Dim ppr As Worksheet
    Dim art As Worksheet
    Dim art2 As Worksheet
    
    Set ppr = Sheets("PPR Report")
    Set data = Sheets("Sales Document Data")
    Set w_sd = Sheets("SD Data")
    Set art = Sheets("Article Data")
    Set art2 = Sheets("Articles")
    
    endrow_art = art.Cells(Rows.Count, 2).End(xlUp).Row
    endrow_data = data.Cells(Rows.Count, 2).End(xlUp).Row
    
    
    art2.Visible = xlSheetVisible
        
    With art2
        
        If .Cells(7, 2) <> "" Then
            
            xend = .Cells(Rows.Count, 2).End(xlUp).Row
            .Range("B7:AC" & xend).Clear
            
        End If
    
    End With
    
    'art.Range(art.Cells(2, 3), art.Cells(endrow_art, 3)).Copy
    'art2.Range(art2.Cells(7, 2), art2.Cells(endrow_art, 2)).PasteSpecial xlValues
    'art.Range(art.Cells(2, 4), art.Cells(endrow_art, 4)).Copy
    'art2.Range(art2.Cells(7, 4), art2.Cells(endrow_art, 4)).PasteSpecial xlValues
    
    data.Range(data.Cells(6, 2), data.Cells(endrow_data, 28)).Copy
    art2.Range(art2.Cells(7, 2), art2.Cells(endrow_data, 28)).PasteSpecial xlValues
     
    
    endrow_art2 = art2.Cells(Rows.Count, 2).End(xlUp).Row
    
    a_art2 = art2.Range(art2.Cells(7, 2), art2.Cells(endrow_data, 29))
    
    For x = 1 To UBound(a_art2)
        
        a_art2(x, 28) = a_art2(x, 26) - (a_art2(x, 24) - a_art2(x, 27))
    
    Next x
    
    art2.Range(art2.Cells(7, 2), art2.Cells(endrow_data, 29)) = a_art2
    
    endrow_data = art2.Cells(Rows.Count, 2).End(xlUp).Row
    
    With art2.Range(art2.Cells(7, 2), art2.Cells(endrow_data, 29))
    
        .Borders.LineStyle = xlContinuous
        .Borders.Color = RGB(128, 128, 128)
        
    End With
    
    art2.Select
    art2.Range("B7").Select
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True

End Sub


Sub create_bop(Filter As String)

    Application.ScreenUpdating = False
    ' filter As String
    Dim data As Worksheet
    Dim w_sd As Worksheet
    Dim ppr As Worksheet
    Dim art As Worksheet
    Dim art2 As Worksheet
    Dim bop As Worksheet
    Dim bopda As Worksheet
    Dim endrow_bopda As Integer
    
    
    Set ppr = Sheets("PPR Report")
    Set data = Sheets("Sales Document Data")
    Set w_sd = Sheets("SD Data")
    Set art = Sheets("Article Data")
    Set art2 = Sheets("Articles")
    Set bop = Sheets("BOP")
    Set bopda = Sheets("BOP Data")
    On Error Resume Next:
    
    endrow_data = data.Cells(Rows.Count, 2).End(xlUp).Row
    ' Filter = "Brand"
    
    Select Case Filter
    
        Case "Section"
        
            col = 19
            MET_COL = 19
        
        Case "Super Section"
        
            col = 18
            MET_COL = 18
        
        Case "Brand"
        
            col = 21
            MET_COL = 21
        
    End Select
    
    
    bopda.Range(bopda.Cells(3, 2), bopda.Cells(20000, 2)).Clear
    
    data.Range(data.Cells(6, col), data.Cells(endrow_data, col)).Copy
    bopda.Range(bopda.Cells(3, 2), bopda.Cells(endrow_data, 2)).PasteSpecial xlValues
    bopda.Range(bopda.Cells(3, 2), bopda.Cells(endrow_data, 2)).RemoveDuplicates (1)
    
    endrow_bopda = bopda.Cells(Rows.Count, 2).End(xlUp).Row
    a_boptab = bopda.Range(bopda.Cells(3, 2), bopda.Cells(endrow_bopda, 7))
    a_data = data.Range(data.Cells(7, 2), data.Cells(endrow_data, 29))
    
    For i = 3 To endrow_bopda
        
        bopda.Cells(i, 3).Value = Application.WorksheetFunction.CountIf(data.Range(data.Cells(7, MET_COL), data.Cells(endrow_data, MET_COL)), bopda.Cells(i, 2))
        'bopda.Cells(I, 5).Value = Application.WorksheetFunction.SumIf(data.Range(data.Cells(7, MET_COL), data.Cells(endrow_data, MET_COL)), bopda.Cells(I, 2), data.Cells(7, 22))
        
        bopda.Cells(i, 5).Value = Application.WorksheetFunction.SumIfs(data.Columns(25), data.Columns(MET_COL), bopda.Cells(i, 2))
        
        bopda.Cells(i, 7) = "Double Click"
        
    Next i
    
    'totals
    For j = 3 To 5
    
        If j = 4 Then
        
        Else
    
            bopda.Cells(endrow_bopda + 1, j).Value = Application.WorksheetFunction.Sum(bopda.Range(bopda.Cells(3, j), bopda.Cells(endrow_bopda, j)))
        
        End If
        
    Next j
    
    '% of totals
    
    For i = 3 To endrow_bopda
    
        bopda.Cells(i, 4).Value = (bopda.Cells(i, 3) / bopda.Cells(endrow_bopda + 1, 3))
        bopda.Cells(i, 6).Value = (bopda.Cells(i, 5) / bopda.Cells(endrow_bopda + 1, 5))
         
    Next i
    
    'clear bop previous
    bop.Range(bop.Cells(31, 2), bop.Cells(100000 + 31, 7)).Clear
    
    bopda.Range(bopda.Cells(3, 2), bopda.Cells(endrow_bopda, 7)).Copy
    bop.Range(bop.Cells(31, 2), bop.Cells(endrow_bopda + 31, 7)).PasteSpecial xlValues
    
    
    bop.Range(bop.Cells(31, 2), bop.Cells(endrow_bopda + 31, 7)).Sort key1:=bop.Range("D31:D" & endrow_bopda + 31), order1:=xlDescending
    
    endrow_bop = bop.Cells(Rows.Count, 2).End(xlUp).Row
     
    With bop.Range(bop.Cells(31, 2), bop.Cells(endrow_bop, 7))
        
        .Borders.LineStyle = xlContinuous
        .Borders.Color = RGB(155, 155, 155)
        .RowHeight = 20
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter

    End With
    
        With bop.Range(bop.Cells(31, 2), bop.Cells(endrow_bop, 2))
        
        .Interior.Color = RGB(228, 223, 236)
        .Font.Bold = True
        .HorizontalAlignment = xlLeft
        
    'click to view
        
    End With
    
        With bop.Range(bop.Cells(31, 7), bop.Cells(endrow_bop, 7))
        
        .HorizontalAlignment = xlCenter
        .Font.Color = RGB(255, 0, 0)
        
        

    End With
    
    'number fomratting
    bop.Range(bop.Cells(31, 4), bop.Cells(endrow_bop, 4)).NumberFormat = "0.00%"
    bop.Range(bop.Cells(31, 6), bop.Cells(endrow_bop, 6)).NumberFormat = "0.00%"
    bop.Range(bop.Cells(31, 5), bop.Cells(endrow_bop, 5)).NumberFormat = "|fffd|0.00"
   

End Sub


Attribute VB_Name = "shArt"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shBOP"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

    Application.ScreenUpdating = False
    
    Dim data As Worksheet
    Dim w_sd As Worksheet
    Dim ppr As Worksheet
    Dim art As Worksheet
    Dim art2 As Worksheet
    Dim bop As Worksheet
    Dim bopda As Worksheet
    Dim onclick As Worksheet
    Dim con As Worksheet

    Set ppr = Sheets("PPR Report")
    Set data = Sheets("Sales Document Data")
    Set w_sd = Sheets("SD Data")
    Set art = Sheets("Article Data")
    Set art2 = Sheets("Articles")
    Set bop = Sheets("BOP")
    Set bopda = Sheets("BOP Data")
    Set onclick = Sheets("On_click")
    Set con = Sheets("Control Sheet")
    Dim Filter As String
    
    start_col = ActiveCell.Column - 5
    
    click_filter = bop.Cells(ActiveCell.Row, start_col)
    
    Filter = con.Cells(31, 3)
    
    Select Case Filter
    
        Case "Section"
        
            col = 18
            MET_COL = 18
        
        Case "Super Section"
        
            col = 17
            MET_COL = 17
        
        Case "Brand"
        
            col = 19
            MET_COL = 19
        
    End Select
    
    MET_COL = col
    
    endrow_data = data.Cells(Rows.Count, 2).End(xlUp).Row
    
    'clearprevious
    onclick.Range(onclick.Cells(7, 2), onclick.Cells(endrow_data, 26)).Clear
    a_data = data.Range(data.Cells(6, 2), data.Cells(endrow_data, 26))
    
    a_onclick = onclick.Range(onclick.Cells(7, 2), onclick.Cells(endrow_data, 26))
    
    pasterow = 1
    
    For i = 1 To UBound(a_data, 1)
    
        If a_data(i, MET_COL) = click_filter Then
            
            'date
            a_onclick(pasterow, 1) = a_data(i, 11)
            'article
            a_onclick(pasterow, 2) = a_data(i, 21)
            'supersec
            a_onclick(pasterow, 3) = a_data(i, 17)
            'section
            a_onclick(pasterow, 4) = a_data(i, 18)
            'brand
            a_onclick(pasterow, 5) = a_data(i, 19)
            'MOP
            a_onclick(pasterow, 6) = a_data(i, 16)
            'Sales Doc
            a_onclick(pasterow, 7) = a_data(i, 12)
            'sales price
            a_onclick(pasterow, 8) = a_data(i, 23)
            
            pasterow = pasterow + 1
        
        End If

    Next i
    
    onclick.Range(onclick.Cells(7, 2), onclick.Cells(endrow_data, 22)) = a_onclick
    
    endrow_onclick = onclick.Cells(Rows.Count, 2).End(xlUp).Row

    activerow = Target.Row
    activecolumn = Target.Column
    
    If activerow < 31 Or activerow > 51 Then Exit Sub
    
    If activecolumn = 7 Then
    UserForm1.Show
    Cancel = True
    Cancel = False
    End If
    
End Sub
Sub Worksheet_Change(ByVal Target As Range)

    Dim data As Worksheet
    Dim w_sd As Worksheet
    Dim ppr As Worksheet
    Dim art As Worksheet
    Dim art2 As Worksheet
    Dim bop As Worksheet
    Dim bopda As Worksheet
    Dim onclick As Worksheet

    Set ppr = Sheets("PPR Report")
    Set data = Sheets("Sales Document Data")
    Set w_sd = Sheets("SD Data")
    Set art = Sheets("Article Data")
    Set art2 = Sheets("Articles")
    Set bop = Sheets("BOP")
    Set bopda = Sheets("BOP Data")
    Set onclick = Sheets("On_click")
 
    Application.ScreenUpdating = False


    If Not Intersect(Target, bop.Cells(6, 2)) Is Nothing Then
    
        Dim selection As String
        
        selection = bop.Cells(6, 2)
    
        Call create_bop(selection)
        
        
    
    End If
    
    
End Sub
Attribute VB_Name = "shControl"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shData"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shFreq"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shOrder"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shPPR"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' *eyV

INQUEST-PP=macro
