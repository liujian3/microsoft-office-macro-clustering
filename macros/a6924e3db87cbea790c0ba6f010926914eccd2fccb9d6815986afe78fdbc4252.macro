Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdValidate, 105, 0, MSForms, CommandButton"
Private Sub Worksheet_Change(ByVal Target As Range)
Dim UndoList As String

    ' Get the undo List to capture the last action performed by user
    If Application.CommandBars("Standard").Controls("&Undo").Enabled = True Then _
        UndoList = Application.CommandBars("Standard").Controls("&Undo").List(1)
  
    ' Prevents overwriting of SES cell format when copying/pasting from another workbook
    ' NOTE: Make sure to comment out this section if making formatting changes to this worksheet!!!
    If Application.CutCopyMode = xlCopy _
    Or Left(UndoList, 5) = "Paste" Then

        ' Ensures that a Save cannot occur until we're done
        Application.EnableEvents = False

        ' Undo paste and do a paste special values/text instead
        Application.Undo
        If Application.CutCopyMode = xlCopy Then
            Target.PasteSpecial Paste:=xlPasteValues
        Else
            ActiveSheet.PasteSpecial Format:="Text"
        End If
        
        ' Allows events to occur
        Application.EnableEvents = True

    End If
    
    ' Any time a change is made to the worksheet, as long as it is not the validation status
    ' cell, then the validation status will shows as not validated.
    If Me.Range("ValidationStatus").Address <> Target.Address Then
        If Me.Range("ValidationStatus").Value = "VALIDATED!" Then
            ' Unlock worksheet
            WsSetup (True)
            ' Format validation status
            With Me.Cells(1, 8)
                .Value = "Not Validated"
                .Font.Color = RGB(256, 256, 256)
                .Interior.ColorIndex = FailedValidation
            End With
            ' Lock worksheet
            WsSetup (False)
        End If
    End If

End Sub

Private Sub cmdValidate_Click()

Dim rngCurrentCell As Range

'Disable screen updating for faster validation
Application.ScreenUpdating = False

'Capture current cell, so that focus can be returned to it after validation runs
Set rngCurrentCell = ActiveCell

'Call validation routine
Call Validator(1)

'Return focus to cell that was active at the time the validation routine was called
rngCurrentCell.Select

'Allow screen updating
Application.ScreenUpdating = True

End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
'===============
'Seidl - 06/2009
'===============

'Determine if validation has been successfully completed
If Range("ValidationStatus").Value <> "VALIDATED!" Then
    'Warn user that workbook is not validated, but still provide option to save
    intResponse = MsgBox("CIGNA cannot accept this file until it has been validated; " & _
        "please resolve all errors (highlighted in red) and re-run the " & _
        "validation routine prior to submitting to CIGNA." & vbCrLf & vbCrLf & _
        "However, you may still save the workbook - do you wish to save now?", _
        vbYesNo, "WARNING: Not Validated - Not Ready for Submission to CIGNA")
    If intResponse = vbNo Then
        Cancel = True
    End If
End If

End Sub
Attribute VB_Name = "frmTransOpt"
Attribute VB_Base = "0{034E1A1C-E7EC-4B40-8BC9-BB326FC82457}{F176B5E8-C54D-49DB-933A-68C73C09D66C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdContinue_Click()

If optAdd.Value = False And optChange.Value = False _
    And optTerminate.Value = False Then
        MsgBox "Please choose a transaction type", vbInformation, "ERROR"
    Exit Sub
End If

If optAdd.Value = True Then
    strFormOption = "ADD"
    Call AddOpt(1)
    Call UserInstructions(1)
ElseIf optChange.Value = True Then
    strFormOption = "CHANGE"
    Call ChangeOpt(1)
    Call UserInstructions(1)
ElseIf optTerminate.Value = True Then
    strFormOption = "TERMINATE"
    Call TermOpt(1)
    Call UserInstructions(1)
End If

Unload frmTransOpt

End Sub


Private Sub lblCIGNAOnly_Click()
    Dim strAnswer As String, strOption As String
    strAnswer = Application.InputBox("Please enter the password: ", Title:="Password Required", Type:=2)
    If strAnswer <> "False" Then
        If strAnswer = "Standard" Then
            strOption = ThisWorkbook.Worksheets("CIGNA Eligibility").Range("A1").Value
            If strOption <> "" Then
                Select Case strOption
                    Case "ADD":
                        Call AddOpt(False)
                    Case "TERMINATE":
                        Call TermOpt(False)
                    Case "CHANGE":
                        Call ChangeOpt(False)
                End Select
            Else
            UnhideAllSheets (True)
            End If
            frmTransOpt.Hide
        Else
            MsgBox "Wrong password entered.", vbOKOnly, "Invalid Password"
        End If
    End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If strFormOption = "" Then
        Cancel = True
    End If
End Sub
Attribute VB_Name = "modFunctions"
Function IsAlphaString(ByVal str As String) As Boolean

Dim x As Integer
Dim cd As Integer
Dim intResult As Integer

For x = 1 To Len(str)
    cd = Asc(Mid(str, x, 1))
    'Check for Uppercase letters, then lowercase letters, then allowable special chars
    If CBool(cd >= 65 And cd <= 90) _
        Or CBool(cd >= 97 And cd <= 122) _
        Or CBool(cd >= 42 And cd <= 46) _
        Or CBool(cd = 32) Or CBool(cd = 39) Then
        intResult = intResult + 1
    End If
Next x

If intResult = CInt(Len(str)) Then
    IsAlphaString = True
Else
    IsAlpaString = False
End If

End Function

Function IsAlphaStr(ByVal sText As String) As Boolean

    Dim iLoop As Integer
    Dim sChar As String
    Dim bFlag As Boolean
    
    bFlag = True
    
    For iLoop = 1 To Len(sText) 'from first to last characters
        sChar = Mid(sText, iLoop, 1)
        If Not IsAlphaChr(sChar) Then
            bFlag = False
        End If
    Next
    
    IsAlphaStr = bFlag
    
End Function

Function IsAlphaStr2(ByVal sText As String) As Boolean

    Dim iLoop As Integer
    Dim sChar As String
    Dim bFlag As Boolean
    
    bFlag = True
    
    For iLoop = 1 To Len(sText) 'from first to last characters
        sChar = Mid(sText, iLoop, 1)
        If Not IsAlphaChr2(sChar) Then
            bFlag = False
        End If
    Next
    
    IsAlphaStr2 = bFlag
    
End Function

Function IsState(ByVal sState As String) As Boolean
'Evaluates as true if the code entered is a valid state
'Modified 09/14/12 by REU to include Guam (GU) and with a variable representing the # of states

    Dim iLoop As Integer
    Dim bFlag As Boolean
    Dim aState As Variant
    Const intNumOfStates As Integer = 54
    
    aState = Array("AL", "AK", "AR", "AZ", "CA", "CT", "CO", "DC", "DE", "FL", "GA", "HI", _
                   "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", _
                   "MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", _
                   "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VI", "VT", _
                   "WA", "WI", "WV", "WY", "PR", "GU")
    bFlag = False
    
    For iLoop = 0 To intNumOfStates - 1 'subtracting one because we start with 0
        If sState = aState(iLoop) Then
            bFlag = True
        End If
    Next
    
    IsState = bFlag
    
End Function

Function IsMedicare(ByVal sString As String) As Boolean
'Evaluates as true if the code entered is valid for Medicare

    Dim iLoop As Integer
    Dim bFlag As Boolean
    Dim aString As Variant
    
    aString = Array("A", "B", "C", "D", "AD", "BD", "CD")
    bFlag = False
    
    For iLoop = 0 To 6
        If sString = aString(iLoop) Then
            bFlag = True
        End If
    Next
    
    IsMedicare = bFlag
    
End Function

Function IsAlphaChr(strChar As String) As Boolean
'Evaluates as true for hypen, apostrophe, space, comma, period , A-Z and a-z, 0-9

    Dim bFlag As Boolean
    
    bFlag = False
    
    If Asc(strChar) = 32 Then bFlag = True                              'space
    If Asc(strChar) = 39 Then bFlag = True                              'apostrophe
    If Asc(strChar) = 44 Then bFlag = True                              'comma
    If Asc(strChar) = 45 Then bFlag = True                              'hyphen
    If Asc(strChar) = 46 Then bFlag = True                              'period
    If Asc(strChar) >= 48 And Asc(strChar) <= 57 Then bFlag = True      '0-9
    If Asc(strChar) >= 65 And Asc(strChar) <= 90 Then bFlag = True      'A-Z
    If Asc(strChar) >= 97 And Asc(strChar) <= 122 Then bFlag = True     'a-z
    If Asc(strChar) = 130 Then bFlag = True                             'comma

    IsAlphaChr = bFlag
    
End Function

Function IsAlphaChr2(strChar As String) As Boolean
'Evaluates as true for A-Z and a-z, 0-9

    Dim bFlag As Boolean
    
    bFlag = False
    
    'If Asc(strChar) = 32 Then bFlag = True
    'If Asc(strChar) = 39 Then bFlag = True
    'If Asc(strChar) = 44 Then bFlag = True
    'If Asc(strChar) = 45 Then bFlag = True
    'If Asc(strChar) = 46 Then bFlag = True
    'If Asc(strChar) = 130 Then bFlag = True
    
    If Asc(strChar) >= 48 And Asc(strChar) <= 57 Then bFlag = True      '0-9
    If Asc(strChar) >= 65 And Asc(strChar) <= 90 Then bFlag = True      'A-Z
    If Asc(strChar) >= 97 And Asc(strChar) <= 122 Then bFlag = True     'a-z

    If IsNumeric(strChar) Then bFlag = True

    IsAlphaChr2 = bFlag
    
End Function

Public Function ColumnLetter(ByVal colNum As Long) As String
'Translates the column number into a letter so that it can be referred to in code accordingly

Dim i As Long, x As Long
    
    For i = Int(Log(CDbl(25 * (CDbl(colNum) + 1))) / Log(26)) - 1 To 0 Step -1
        
        x = (26 ^ (i + 1) - 1) / 25 - 1
        
        If colNum > x Then
            ColumnLetter = ColumnLetter & Chr(((colNum - x - 1) \ 26 ^ i) Mod 26 + 65)
        End If
    
    Next i

End Function

Public Function IsNumber(ByVal str As String) As Boolean
   
Dim lngChar As Long
Dim strVal As String
Dim char As String
Dim boolFail As Boolean

'Initialize result flag at False
boolPass = True
'Capture value of range being checked

'Loop through characters in range being checked, evaluating each for numeric values
For lngChar = 1 To Len(str)
    char = Mid(str, lngChar, 1)
    'If any character within the range being evaluated is <0 or >9, fail validation
    If Not (Asc(char) >= 48 And Asc(char) <= 59) Then
        boolPass = False
        Exit For
    End If
Next lngChar

'Return result of inspection for numeric values
IsNumber = boolPass
    
End Function

Public Function PhoneNumber(ByVal str As String) As String
'Takes a string argument, loops through all characters within that string, and returns _
    the resultant string, minus any "phone number" characters (i.e., "-"; " "; "("; "(")

Dim intX As Integer
Dim strResult As String

For intX = 1 To Len(str)
    If IsNumeric(Mid(str, intX, 1)) Then
        strResult = strResult & Mid(str, intX, 1)
    End If
Next intX

If IsNumeric(strResult) Then
    PhoneNumber = Format(strResult, "0000000000")
Else
    PhoneNumber = "Failed"
End If

End Function

Public Function SSN(ByVal str As String) As String
'Takes a string argument and ensures that it is at least 7 characters and is made up of numbers

Dim intX As Integer
Dim strResult As String

For intX = 1 To Len(str)
    If IsNumeric(Mid(str, intX, 1)) Then
        strResult = strResult & Mid(str, intX, 1)
    End If
Next intX

If Len(strResult) >= 7 Then
    SSN = Format(strResult, "000000000")
    If Len(SSN) > 9 Then
        SSN = "Failed"
    End If
Else
    SSN = "Failed"
End If

End Function
Attribute VB_Name = "modMJS"
Option Explicit

'=======================================================================
'Author: Mikel J. Seidl
'Date: May'09 to June'09
'CIGNA Dept: Business Information & Controls Info Team
'Contact: mikel.seidl@cigna.com
'Phone: (860) 226-5535, in-network: 572-5535; in Bloomfield: 6-5535
'Random Quote: Programming is 90% of the work; debugging is the other 90%.
'=======================================================================

'''___  ___     ___   ______
'''|  \/  |     | |  | _____|
'''|      |     | |  | |____
'''| |\/| |  _  | |  |____  |
'''| |  | | | |_| |   ____| |
'''|_|  |_| |_____|  |______|

'Full Layout Listing, as of 08/23/17:
'=======================================================================
'Column Text                         Column #    Category
'=======================================================================
'Branch Code                         2           Account Information
'Effective Date                      3           Account Information
'Eligible Employee SSN               4           Member Information
'Eligible Employee ID                5           Member Information
'Member SSN                          6           Member Information
'Last Name                           7           Member Information
'First Name                          8           Member Information
'Birth Date                          9           Member Information
'Gender                              10          Member Information
'Relationship Code                   11          Member Information
'Full Time Student                   12          Member Information
'Disability Indicator                13          Member Information     'added 08/23/17
'Street Address 1                    14          Member Information
'Street Address 2                    15          Member Information
'City                                16          Member Information
'State                               17          Member Information
'Zip Code                            18          Member Information
'Date of Hire                        19          Member Information
'Retiree indicator                   20          Member Information     'added 09/25/12
'Retire date                         21          Member Information     'added 09/25/12
'Salary                              22          Member Information
'Frequency                           23          Member Information
'Member Home Phone                   24          Member Information
'Member Work Phone                   25          Member Information
'Medical Benefit Option              26          Medical
'Medical Network ID                  27          Medical                'added 08/23/17
'PCP Number                          28          Medical
'Existing Patient                    29          Medical
'Dental Benefit Option               30          Dental
'Dental Office Code                  31          Dental
'Dental Late Entrant Applies         32          Dental
'Dental Waiting Period Applies       33          Dental
'Dental Orig Eff Date                34          Dental
'Vision Benefit Option               35          Vision
'FSA-Health Benefit Option           36          FSA - Health Care
'Employer Goal Amount                37          FSA - Health Care
'Employee Goal Amount                38          FSA - Health Care
'Medical Auto Claim Forward          39          FSA - Health Care
'Dental Auto Claim Forward           40          FSA - Health Care
'Pharmacy Auto Claim Forward         41          FSA - Health Care
'FSA-Dep Benefit Option              42          FSA - Dependent Care
'Employer Goal Amount                43          FSA - Dependent Care
'Employee Goal Amount                44          FSA - Dependent Care
'COH Benefit Option                  45          Cigna On-site Health       'added 09/25/12
'COH Location Code                   46          Cigna On-site Health       'added 09/25/12
'COBRA Effective Date                47          COBRA
'Other Medical Insurance Coverage    48          Other Medical Insurance
'Carrier                             49          Other Medical Insurance
'Policy Number                       50          Other Medical Insurance
'Other Ins Effective Date            51          Other Medical Insurance
'Medicare Type                       52          Other Medical Insurance
'Medicare ID Number                  53          Other Medical Insurance    'updated 08/23/17
'Primacy Code                        54          Other Medical Insurance
'Financial Responsibility            55          Other Medical Insurance
'Email                               56          Other Items                'added 09/25/12
'Cancellation Date                   57          Terminate EE
'Current Benefit Option              58          Changing Benefit Option
'Future Benefit Option               59          Changing Benefit Option
'Change Date                         60          Changing Benefit Option
'=======================================================================

Public lngErrorCount As Long
Public strValidationStatus As String
Public strFormOption As String

Const lngMaxRowsSupported = 10000

'Header row should always be row 9
Const lngHeader As Long = 9

Public Enum cellColor
    RequiredField = 36
    FailedValidation = 3
    PassedValidation = 2
End Enum

Public Enum SESColumns
    BranchCode = 2
    EffectiveDate = 3
    EligibleEmployeeSSN = 4
    EligibleEmployeeID = 5
    MemberSSN = 6
    LastName = 7
    FirstName = 8
    BirthDate = 9
    Gender = 10
    RelationshipCode = 11
    FullTimeStudent = 12
    DisabilityInd = 13                       'added 08/23/17
    StreetAddress1 = 14
    StreetAddress2 = 15
    City = 16
    State = 17
    ZipCode = 18
    DateofHire = 19
    RetireeInd = 20
    RetireDate = 21
    Salary = 22
    Frequency = 23
    MemberHomePhone = 24
    MemberWorkPhone = 25
    MedicalBenefitOption = 26
    MedicalNetworkID = 27                   'added 08/23/17
    PCPNumber = 28
    ExistingPatient = 29
'    PCLEndDate = 28                        'removed 08/23/17
    DentalBenefitOption = 30
    DentalOfficeCode = 31
    DentalLateEntrantApplies = 32
    DentalWaitingPeriodApplies = 33
    DentalOrigEffDate = 34
    VisionBenefitOption = 35
    FSAHealthBenefitOption = 36
    FSAHCEmployerGoalAmount = 37
    FSAHCEmployeeGoalAmount = 38
    MedicalAutoClaimForward = 39
    DentalAutoClaimForward = 40
    PharmacyAutoClaimForward = 41
    FSADepBenefitOption = 42
    FSADCEmployerGoalAmount = 43
    FSADCEmployeeGoalAmount = 44
    COHBenefitOption = 45
    COHLocationCode = 46
'    ChildDental = 46                       'removed 08/23/17
'    ChildVision = 47                       'removed 08/23/17
    COBRAEffectiveDate = 47
    OtherMedicalInsuranceCoverage = 48
    Carrier = 49
    PolicyNumber = 50
    OtherInsEffectiveDate = 51
    MedicareType = 52
    HICNumber = 53                          'Medicare Network ID = HICNumber
    PrimacyCode = 54
    FinancialResponsibility = 55
    Email = 56
    CancellationDate = 57
    CurrentBenefitOption = 58
    FutureBenefitOption = 59
    ChangeDate = 60
End Enum

'Globals
Dim wb As Workbook
Dim ws As Worksheet
Dim lngLastRow As Long
Dim intLastCol As Integer
Dim rngShow As Range
Dim rngHide As Range
Dim boolAddr1Length As Boolean, boolAddr2Length As Boolean, _
    boolNoDecimal As Boolean, boolMaxColExceeded As Boolean
Dim strMessageToUser As String


Public Sub WsSetup(ByVal boolOpen As String)
'Seidl - 05/2009
' Protects or unprotects a worksheet based on boolean value provided:
' True = Open/Unprotect, False = Close/Protect
    
Set ws = ThisWorkbook.Worksheets("CIGNA Eligibility")
    
If boolOpen Then
    ws.Unprotect "Standard"
Else
    ws.Protect "Standard", AllowFormattingColumns:=False, _
        AllowFormattingRows:=False, AllowInsertingRows:=True, AllowDeletingRows:=True
End If

End Sub


Public Sub TermOpt(ByVal boolUpdate As Boolean)
'Seidl - 05/2009
'Note: Boolean argument is not specified, but is included in sub definition to _
    ensure that user doesn't have ability to run macro manually

'TERMINATION option: Only display columns:
'=========================================
'Eligible Employee SSN
'Last Name
'First Name
'Cancellation Date

'Set up globals for wb/ws access
Set wb = ThisWorkbook
Set ws = wb.Worksheets("CIGNA Eligibility")

Call WsSetup(True)

If boolUpdate Then
    ws.Cells(1, 1) = strFormOption
End If

'Find last column
ws.Cells(lngHeader, 256).Select
intLastCol = ws.Rows(lngHeader).Cells.Find("*", _
    SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column

'Define range that should be shown to user, based on form option selected
Set rngShow = Union(ws.Cells(lngHeader, EligibleEmployeeSSN), ws.Cells(lngHeader, LastName), _
    ws.Cells(lngHeader, FirstName), ws.Cells(lngHeader, CancellationDate))

'Hide all columns, then unhide selected columns based on form option
Set rngHide = Range(ws.Cells(lngHeader, 2), ws.Cells(lngHeader, intLastCol))
rngHide.Columns.Hidden = True
rngShow.Columns.Hidden = False

'Added 9/14/12 by REU
'Change text for clarity, replacing "member" with "subscriber"
ws.Range("B2").Select
Selection.Replace What:="member", Replacement:="subscriber", LookAt:= _
    xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
    ReplaceFormat:=False
ws.Range("A4").Value = ""
ws.Range("D8").Select
Selection.Replace What:="Member", Replacement:="Subscriber", LookAt:= _
    xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
    ReplaceFormat:=False
ws.Range("G7").Select
Selection.Value = ""

ws.Range("D" & lngHeader + 1).Select

Call WsSetup(False)

End Sub


Public Sub ChangeOpt(ByVal boolUpdate As Boolean)
'Seidl - 05/2009
'Note: Boolean argument is not specified, but is included in sub definition to _
    ensure that user doesn't have ability to run macro manually

'CHANGE option: Only display columns:
'====================================
'Eligible Employee SSN
'Last Name
'First Name
'Current Benefit Option
'Future Benefit Option
'Change Date

'Set up globals for wb/ws access
Set wb = ThisWorkbook
Set ws = wb.Worksheets("CIGNA Eligibility")

Call WsSetup(True)

If boolUpdate Then
    ws.Cells(1, 1) = strFormOption
End If

'Find last column
ws.Cells(lngHeader, 256).Select
intLastCol = ws.Rows(lngHeader).Cells.Find("*", _
    SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column

'Define range that should be shown to user, based on form option selected
Set rngShow = Union(ws.Cells(lngHeader, EligibleEmployeeSSN), ws.Cells(lngHeader, LastName), _
    ws.Cells(lngHeader, FirstName), Range(ws.Cells(lngHeader, CurrentBenefitOption), ws.Cells(lngHeader, ChangeDate)))

'Hide all columns, then unhide selected columns based on form option
Set rngHide = Range(ws.Cells(lngHeader, 2), ws.Cells(lngHeader, intLastCol))
rngHide.Columns.Hidden = True
rngShow.Columns.Hidden = False

'Added 9/14/12 by REU
'Change text for clarity, replacing "member" with "subscriber" and hiding row 4
ws.Range("B2").Select
Selection.Replace What:="member", Replacement:="subscriber", LookAt:= _
    xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
    ReplaceFormat:=False
ws.Range("A4").Value = ""
ws.Range("D8").Select
Selection.Replace What:="Member", Replacement:="Subscriber", LookAt:= _
    xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
    ReplaceFormat:=False
ws.Range("G7").Select
Selection.Replace What:="member", Replacement:="subscriber", LookAt:= _
    xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
    ReplaceFormat:=False

ws.Range("D" & lngHeader + 1).Select

Call WsSetup(False)

End Sub

Public Sub AddOpt(ByVal boolUpdate As Boolean)
'Seidl - 05/2009
'Note: Boolean argument is not specified, but is included in sub definition to _
    ensure that user doesn't have ability to run macro manually

'ADD option: Only display columns:
'=================================
'Branch Code
'Effective Date
'Eligible Employee SSN
'Eligible Employee ID
'Member SSN
'Last Name
'First Name
'Birth Date
'Gender
'Relationship Code
'Full Time Student
'Disability Indicator
'Street Address 1
'Street Address 2
'City
'State
'Zip Code
'Date of Hire
'Retiree Indicator
'Retire Date
'Salary
'Frequency
'Member Home Phone
'Member Work Phone
'Medical Benefit Option
'Medical Network ID
'PCP Number
'Existing Patient
'Dental Benefit Option
'Dental Office Code
'Dental Late Entrant Applies
'Dental Waiting Period Applies
'Dental Orig Eff Date
'Vision Benefit Option
'FSA-Health Benefit Option
'Employer Goal Amount
'Employee Goal Amount
'Medical Auto Claim Forward
'Dental Auto Claim Forward
'Pharmacy Auto Claim Forward
'FSA-Dep Benefit Option
'Employer Goal Amount
'Employee Goal Amount
'COH Benefit Option
'COH Location Code
'COBRA Effective Date
'Other Medical Insurance Coverage
'Carrier
'Policy Number
'Other Ins Effective Date
'Medicare Type
'Medicare ID Number
'Primacy Code
'Financial Responsibility
'Email

'Set up globals for wb/ws access
Set wb = ThisWorkbook
Set ws = wb.Worksheets("CIGNA Eligibility")

Call WsSetup(True)

If boolUpdate Then
    ws.Cells(1, 1) = strFormOption
End If

'Find last column
ws.Cells(lngHeader, 256).Select
intLastCol = ws.Rows(lngHeader).Cells.Find("*", _
    SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column

'Note reversal of show/hide logic, relative to Change/Term options

'Define range that should be shown to user, based on form option selected
Set rngShow = Range(ws.Cells(lngHeader, BranchCode), ws.Cells(lngHeader, intLastCol))
Set rngHide = Range(ws.Cells(lngHeader, CancellationDate), ws.Cells(lngHeader, ChangeDate))

'Show all columns, then hide selected columns based on form option
rngShow.Columns.Hidden = False
rngHide.Columns.Hidden = True

ws.Range("B" & lngHeader + 1).Select

Call WsSetup(False)


End Sub

Public Sub Validator(ByVal bool As Boolean)
'Seidl - 05/2009

Dim lngRow As Long
Dim intCol As Integer
Dim quickArray As Variant
Dim boolValid As Boolean
Dim rngOffset1 As Range, rngOffset2 As Range, rngOffset3 As Range, rngOffset4 As Range
Dim strSSN As String 'will hold the SSN from the worksheet
Dim strPhone As String, strPhoneNum As String 'used in phone number validation routines

'Reset error counter at zero
lngErrorCount = 0

'Set validation status to fail, as validation must still occur
strValidationStatus = "FAIL"

'Set up globals for wb/ws access
    Set wb = ThisWorkbook
    Set ws = wb.Worksheets("CIGNA Eligibility")
    
    'Temporarily remove protection from worksheet so that code can execute properly
    Call WsSetup(True)
    
    'Find last column
    'ws.Cells(lngHeader, 256).Select
    intLastCol = ws.Cells.Find("*", _
        SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column
    'Find last row
    lngLastRow = ws.Cells.Find("*", _
        SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row

'If the last row is <10, then no data was entered, and validation should not execute; _
    ditto for the ColorReset routine, which would otherwise uncolor the header rows.
If lngLastRow < (lngHeader + 1) Then
    Exit Sub
Else
    Call ColorReset
End If

'If the data exceeds 5,000 rows, then the workbook is clearly being used beyond its _
    intended limitations; this should also catch a situation where a user is trying _
    to populate large amounts of data using a new version of Excel (i.e., 2007), _
    which supports a much larger quantity of rows than does 2002-2003.
If lngLastRow > lngMaxRowsSupported + lngHeader Then
    MsgBox "This workbook can only support up to " & Format(lngMaxRowsSupported, "###,###") & " records. " & vbCrLf & vbCrLf & _
        "Please contact your CIGNA Eligibility Account Specialist to discuss.", vbOKOnly
    Exit Sub
End If

'[start] VALIDATION LOOP section of routine

If Not IsNumber(Trim(ws.Range("AcctNum").Value)) Or _
    Len(Trim(ws.Range("AcctNum").Value)) <> 7 Then
    lngErrorCount = lngErrorCount + 1
    With ws.Range("AcctNum")
        .Font.Color = RGB(256, 256, 256)
        .Interior.ColorIndex = FailedValidation
    End With
Else
    With ws.Range("AcctNum")
        .Font.Color = RGB(0, 0, 0)
        .Interior.ColorIndex = 0
        .Value = Trim(.Value)
    End With
End If

' Clear contents of first and last columns
ws.Range("A" & lngHeader & ":A" & lngLastRow).Select
Application.Selection.ClearContents
ws.Range(ColumnLetter(intLastCol + 1) & ":" & ColumnLetter(intLastCol + 1)).Select
Application.Selection.ClearContents

For intCol = 2 To intLastCol
'Perform column evaluation here, with a Select Case statement, thereby performing _
    evaluation only once per column, rather than once per row, for a potentially _
    large net save in processing time... the disadvantage is that there will be _
    extra code required to perform validation.  Validation will occur via a series _
    of calls to subroutines, which will allow each validation criteria to be _
    written and maintained individually.
      
    Select Case intCol
    
    Case BranchCode:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'Clear array
            Set quickArray = Nothing
            'Quick-fill array using variant; this approach yielded drastically _
                better (~50%) performance during benchmark testing.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            'Loop through quick array
            For lngRow = lngHeader + 1 To lngLastRow
                'Next two lines added 9/17/12 by REU to remove trailing spaces _
                    and prevent failure due to that alone
                ws.Cells(lngRow, intCol).Value = Trim(ws.Cells(lngRow, intCol).Value)
                quickArray((lngRow - lngHeader), 1) = ws.Cells(lngRow, intCol).Value
                If quickArray((lngRow - lngHeader), 1) = "" Or _
                    Len(Trim(quickArray((lngRow - lngHeader), 1))) > 6 _
                    Or IsAlphaStr2(quickArray((lngRow - lngHeader), 1)) = False Then
                    lngErrorCount = lngErrorCount + 1
                    Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If

    Case EffectiveDate:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'Clear array
            Set quickArray = Nothing
            On Error GoTo ErrHandler
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            'Loop through rows, evaluating each cell in column
            For lngRow = lngHeader + 1 To lngLastRow
                If quickArray((lngRow - lngHeader), 1) = "" Then
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                ElseIf CBool(Not IsDate(quickArray(lngRow - lngHeader, 1))) Then
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                ElseIf CDate(quickArray((lngRow - lngHeader), 1)) < CDate("01/01/1997") _
                    Or CDate(quickArray(lngRow - lngHeader, 1)) > DateAdd("yyyy", 1, Now()) Then
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                Else
                        ws.Cells(lngRow, intCol).Value = _
                            Format(CDate(quickArray((lngRow - lngHeader), 1)), "mm/dd/yyyy")
                End If
            Next lngRow
        End If
        
    Case EligibleEmployeeSSN:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                If strFormOption = "TERMINATE" Then
                    If Len(quickArray((lngRow - lngHeader), 1)) >= 7 Then
                        strSSN = SSN(quickArray((lngRow - lngHeader), 1))
                        If strSSN <> "Failed" Then
                            ws.Cells(lngRow, intCol).Value = strSSN
                        Else
                            ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                            lngErrorCount = lngErrorCount + 1
                        End If
                    Else
                        'Failed validation
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                ElseIf strFormOption = "CHANGE" Then
                    If Len(quickArray((lngRow - lngHeader), 1)) >= 7 Then
                        strSSN = SSN(quickArray((lngRow - lngHeader), 1))
                        If strSSN <> "Failed" Then
                            ws.Cells(lngRow, intCol).Value = strSSN
                        Else
                            lngErrorCount = lngErrorCount + 1
                            ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        End If
                    Else
                        'Failed validation
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                Else
                    If Len(quickArray((lngRow - lngHeader), 1)) >= 7 Then
                        strSSN = SSN(quickArray((lngRow - lngHeader), 1))
                        If strSSN = "Failed" Then
                            'Failed validation
                            lngErrorCount = lngErrorCount + 1
                            ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        Else
                            ws.Cells(lngRow, intCol).Value = strSSN
                        End If
                        'Define range where Member SSN is found
                        Set rngOffset1 = ws.Cells(lngRow, MemberSSN)
                        'Define range where Relationship Code is found
                        Set rngOffset2 = ws.Cells(lngRow, RelationshipCode)
                        If rngOffset1.Value <> "" Then
                            If strSSN = SSN(rngOffset1) _
                                And Trim(UCase(rngOffset2)) <> "EE" Then
                                    'Failed Validation
                                    lngErrorCount = lngErrorCount + 1
                                    rngOffset1.Cells.Interior.ColorIndex = FailedValidation
                            End If
                        Else
                            If strSSN <> "Failed" Then
                                ws.Cells(lngRow, intCol).Value = strSSN
                            End If
                        End If
                    Else
                        'Failed validation
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                End If
    
                'Clear variables that were defined within case subroutine
                Set rngOffset1 = Nothing
                Set rngOffset2 = Nothing
                strSSN = ""
            Next lngRow
        End If
        
    Case EligibleEmployeeID:
    
'POSSIBLE FUTURE ENHANCEMENT - NOT NEEDED FOR IMMEDIATE FIX
'==========================================================
'FIX: If cell B6 = "E" then EligEmpID MUST be 9 characters, cannot be null
'FIX: If cell B6 = "S" then check MemberSSN as currently written

        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                If Len(quickArray(lngRow - lngHeader, 1)) > 9 Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
    
    Case MemberSSN:
    'If value is null, that's OK... but if value is not null, and relationship code _
        is "EE" then value must match EESSN.  If relationship code <>"EE", and MemberSSN _
        is not null, then value cannot match EESSN.
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Dim strMbrSSN As String, strEESSN As String
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                'Define cells for which the active column's validation is dependent
                Set rngOffset1 = ws.Cells(lngRow, EligibleEmployeeSSN)
                Set rngOffset2 = ws.Cells(lngRow, RelationshipCode)
                If Trim(quickArray((lngRow - lngHeader), 1)) = "" Then
                    GoTo EndMbrSSNValidation
                Else
                strEESSN = SSN(rngOffset1.Value)
                strMbrSSN = SSN(quickArray((lngRow - lngHeader), 1))
                    If strMbrSSN <> "Failed" And _
                         strEESSN <> "Failed" Then
                            If Trim(UCase(rngOffset2.Value)) = "EE" And _
                                strMbrSSN <> strEESSN Then
                                'failed validation
                                ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                                lngErrorCount = lngErrorCount + 1
                                GoTo EndMbrSSNValidation
                            ElseIf strMbrSSN = strEESSN And _
                                Trim(UCase(rngOffset2.Value)) <> "EE" Then
                                'Relationship code <> EE, therefore fails
                                ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                                lngErrorCount = lngErrorCount + 1
                                GoTo EndMbrSSNValidation
                            End If
                        'If code makes it this far, value is OK to put in cell
                         ws.Cells(lngRow, intCol).Value = strMbrSSN
                    End If
                End If
EndMbrSSNValidation:
            strMbrSSN = ""
            strEESSN = ""
            Set rngOffset1 = Nothing
            Set rngOffset2 = Nothing
            Next lngRow
        End If

    Case LastName:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                If CBool(quickArray((lngRow - lngHeader), 1) = "" _
                    Or IsAlphaString(quickArray((lngRow - lngHeader), 1)) = False _
                    Or Len(quickArray((lngRow - lngHeader), 1)) > 30) Then
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    lngErrorCount = lngErrorCount + 1
                End If
            Next lngRow
        End If
    
    Case FirstName:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                If CBool(quickArray((lngRow - lngHeader), 1) = "" Or _
                    IsAlphaString(quickArray((lngRow - lngHeader), 1)) = False Or _
                    Len(quickArray((lngRow - lngHeader), 1)) > 15) Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
    
    Case BirthDate:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            On Error GoTo ErrHandler
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                If CBool(quickArray((lngRow - lngHeader), 1) = "" Or _
                    Not IsDate(quickArray((lngRow - lngHeader), 1))) Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                ElseIf CDate(quickArray((lngRow - lngHeader), 1)) < DateAdd("yyyy", -110, Now()) Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                Else
                    ws.Cells(lngRow, intCol).Value = _
                        Format(CDate(quickArray((lngRow - lngHeader), 1)), "mm/dd/yyyy")
                End If
            Next lngRow
        End If
        
    Case Gender:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Dim g As String
                g = UCase(Trim(quickArray((lngRow - lngHeader), 1)))
                If g <> "M" And g <> "F" And g <> "U" Then
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    lngErrorCount = lngErrorCount + 1
                End If
            Next lngRow
        End If
            
    Case RelationshipCode:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Dim rc As String
                rc = Trim(UCase(quickArray((lngRow - lngHeader), 1)))
                If CBool(rc = "" Or (rc <> "EE" And rc <> "SP" And rc <> "DP" And rc <> "CH" _
                    And rc <> "SC" And rc <> "GC" And rc <> "FS" And rc <> "AD" And rc <> "CL")) Then
                    'Fails validation
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    lngErrorCount = lngErrorCount + 1
                End If
            Next lngRow
        End If
        
    Case FullTimeStudent:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, RelationshipCode)
                Dim f As String
                f = UCase(Trim(quickArray((lngRow - lngHeader), 1)))
                If CBool(rngOffset1.Value = "EE" Or _
                    rngOffset1.Value = "SP" Or _
                    rngOffset1.Value = "FS") And _
                    f = "Y" Then
                    'Fails validation
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
                If f <> "Y" And f <> "N" And f <> "" Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
        
    Case DisabilityInd:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
'                Set rngOffset1 = ws.Cells(lngRow, RelationshipCode)
                Dim di As String
                di = UCase(Trim(quickArray((lngRow - lngHeader), 1)))
'                If CBool(rngOffset1.Value = "EE" Or _
'                    rngOffset1.Value = "SP" Or _
'                    rngOffset1.Value = "FS") And _
'                    f = "Y" Then
'                    'Fails validation
'                    lngErrorCount = lngErrorCount + 1
'                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
'                End If
                If di <> "H" And di <> "D" And di <> "" Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If

    Case StreetAddress1:
        'Set flag for Address length overflow message to false
        boolAddr1Length = False
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                'Check to see if length of address line 1 is too long; trim if that _
                    would yield a shorter, acceptable value
                If Len(quickArray((lngRow - lngHeader), 1)) > 30 And _
                    Len(Trim(quickArray((lngRow - lngHeader), 1))) <= 30 Then
                    ws.Cells(lngRow, intCol).Value = Trim(ws.Cells(lngRow, intCol).Value)
                '9/17/12 - second condition added - address only required for EE's
                ElseIf quickArray((lngRow - lngHeader), 1) = "" And _
                    ws.Cells(lngRow, RelationshipCode).Value = "EE" Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
                If Len(Trim(quickArray((lngRow - lngHeader), 1))) > 30 Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    boolAddr1Length = True
                End If
            Next lngRow
        End If
    
    Case StreetAddress2:
        'Set flag for Address length overflow message to false
        boolAddr2Length = False
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                'Check to see if length of address line 2 is too long; trim if that _
                    would yield a shorter, acceptable value
                If Len(quickArray((lngRow - lngHeader), 1)) > 30 And _
                    Len(Trim(quickArray((lngRow - lngHeader), 1))) <= 30 Then
                    ws.Cells(lngRow, intCol).Value = Trim(ws.Cells(lngRow, intCol).Value)
                End If
                If Len(Trim(quickArray((lngRow - lngHeader), 1))) > 30 Then
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    lngErrorCount = lngErrorCount + 1
                    boolAddr2Length = True
                End If
            Next lngRow
        End If
       
    Case City:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                '9/11/17 - trim leading and trailing spaces
                If Len(quickArray((lngRow - lngHeader), 1)) > 20 And _
                    Len(Trim(quickArray((lngRow - lngHeader), 1))) <= 20 Then
                    ws.Cells(lngRow, intCol).Value = Trim(ws.Cells(lngRow, intCol).Value)
                End If
                If quickArray((lngRow - lngHeader), 1) = "" And _
                    ws.Cells(lngRow, RelationshipCode).Value = "EE" Or _
                    Not IsAlphaStr(quickArray((lngRow - lngHeader), 1)) Or _
                    Len(quickArray((lngRow - lngHeader), 1)) > 20 Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If

    Case State:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                If Not IsState(quickArray((lngRow - lngHeader), 1)) And _
                    ws.Cells(lngRow, RelationshipCode).Value = "EE" Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
    
    Case ZipCode:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim zc As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                'Leading zero may have dropped off ZIP code
                If IsNumeric(quickArray((lngRow - lngHeader), 1)) And _
                    Len(quickArray((lngRow - lngHeader), 1)) <= 5 Then
                        zc = Format(quickArray((lngRow - lngHeader), 1), "00000")
                'Otherwise, if the ZIP is purely numeric and 9 digits long...
                ElseIf IsNumeric(quickArray((lngRow - lngHeader), 1)) And _
                    Len(quickArray((lngRow - lngHeader), 1)) = 9 Then
                        zc = Format(quickArray((lngRow - lngHeader), 1), "000000000")
                ElseIf CBool((Not IsNumeric(quickArray((lngRow - lngHeader), 1)) And _
                    Len(quickArray((lngRow - lngHeader), 1)) = 10)) Then
                    zc = Format(quickArray((lngRow - lngHeader), 1), "00000-0000")
                End If
                'Now that zc is populated, check to ensure that it passes validation
                '9/18/12 - new condition added - address only required for EE's
                '9/6/17 - zip code validated for all
                Set rngOffset1 = ws.Cells(lngRow, StreetAddress1)
                If ws.Cells(lngRow, RelationshipCode).Value = "EE" _
                Or (Trim(rngOffset1.Value) <> "" And zc <> "") Then
                    If IsNumeric(zc) Or (Len(zc) = 5 Or Len(zc) = 9) Or Len(zc) = 10 Then
                        'Probable good value - put value in cell
                        ws.Cells(lngRow, intCol).Value = zc
                    'Now determine if zc follows #####-#### format
                    ElseIf Len(zc) <> 10 Or _
                        Mid(zc, 6, 1) <> "-" Or _
                        Not IsNumeric(Left(zc, 5)) Or _
                        Not IsNumeric(Right(zc, 4)) Then
                            'Failed validation
                            lngErrorCount = lngErrorCount + 1
                            ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                End If
                zc = ""
             Next lngRow
        End If
        
    Case DateofHire:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            On Error GoTo ErrHandler
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                'Set range to hold Effective Date value for comparison
                Set rngOffset1 = ws.Cells(lngRow, EffectiveDate)
                'If DateOfHire is not null...
                If CBool(Trim(quickArray((lngRow - lngHeader), 1)) <> "") Then
                    '... then perform validation
                    If Not IsDate(quickArray((lngRow - lngHeader), 1)) Then
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    Else
                    'confirmed that value is a date... now check to see if the date value is valid compared against _
                        the Effective Date and today's date
                        If CBool(CDate(quickArray((lngRow - lngHeader), 1)) < DateAdd("yyyy", -100, Now())) Or _
                            (CDate(quickArray((lngRow - lngHeader), 1) > _
                            CDate(Cells(lngRow, EffectiveDate)))) Then
                            lngErrorCount = lngErrorCount + 1
                            ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        Else
                            ws.Cells(lngRow, intCol).Value = _
                                Format(CDate(quickArray((lngRow - lngHeader), 1)), "mm/dd/yyyy")
                        End If
                    End If
                End If
                Set rngOffset1 = Nothing
            Next lngRow
        End If
        
    Case RetireeInd:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                f = UCase(Trim(quickArray((lngRow - lngHeader), 1)))
                If f <> "Y" And f <> "N" And f <> "" Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
        
    Case RetireDate:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            On Error GoTo ErrHandler
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                'If RetireDate is not null...
                If CBool(Trim(quickArray((lngRow - lngHeader), 1)) <> "") Then
                    '... then perform validation
                    If Not IsDate(quickArray((lngRow - lngHeader), 1)) Then
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    Else
                        ws.Cells(lngRow, intCol).Value = _
                            Format(CDate(quickArray((lngRow - lngHeader), 1)), "mm/dd/yyyy")
                    End If
                End If
                Set rngOffset1 = Nothing
            Next lngRow
        End If
    
    Case Salary:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            boolNoDecimal = False
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                'Test for a decimal value; if one is found, flag the cell as an error _
                    and bypass the additional conditional checking
                If CBool(InStr(1, quickArray((lngRow - lngHeader), 1), ".")) Then
                    boolNoDecimal = True
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                ElseIf IsNumeric(quickArray((lngRow - lngHeader), 1)) Then
                    'Determine difference in length of value from 8 digit requirement
                    Dim n As Integer
                    Dim s As String
                    n = Len(quickArray((lngRow - lngHeader), 1))
                    'Maximum allowable value is 99999999; check for length
                    If n > 8 Then
                    'Validation Failed - too long
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    'If length is not 8 digits, then pad to 8 digits
                    ElseIf n <> 8 Then
                        'get number of characters needed to make 8 digits
                        n = 8 - n
                        'add leading zeroes until the length is matched
                        s = CStr(quickArray((lngRow - lngHeader), 1))
                        For n = n To 1 Step -1
                            s = "0" & s
                        Next n
                        ws.Cells(lngRow, intCol).Value = s
                    End If
                End If
            Next lngRow
        End If
                    
    Case Frequency:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim freq As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, Salary)
                freq = UCase(Trim(quickArray((lngRow - lngHeader), 1)))
                If freq <> "" Then
                    If freq <> "A" And freq <> "M" And freq <> "W" Then
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        GoTo EndFreqValidation
                    End If
                    'Freq is not null, but salary is, so fail
                    If rngOffset1.Value <= 0 Then
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        GoTo EndFreqValidation
                    End If
                Else 'freq is null - if salary is not, then fail
                    If rngOffset1.Value > 0 Then
                        'Salary is not null, and frequency is... fails validation
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                'Frequency CAN be null, if Salary is null, so wouldn't fail
                End If
EndFreqValidation:
            Set rngOffset1 = Nothing
            Next lngRow
        End If
    
    Case MemberHomePhone:
        'Uses same validation routine as MemberWorkPhone field
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                'Optional field, skip validation if blank
                If Trim(quickArray((lngRow - lngHeader), 1)) = "" Then
                    GoTo EndMbrHomePhoneValidation
                End If
                'Check length of phone number; minimum possible valid length _
                    is 10 (i.e., "1234567890" format), whereas maximum possible valid _
                    length is 14 (i.e., "(123) 456-7890" format)
                strPhone = Trim(quickArray((lngRow - lngHeader), 1))
                If Len(strPhone) >= 10 And Len(strPhone) <= 14 Then
                    'Need to validate further, via "PhoneNumber" function
                    If PhoneNumber(strPhone) <> "Failed" Then
                        'Passes validation, repopulates cell with formatted phone number
                        ws.Cells(lngRow, intCol).Value = PhoneNumber(strPhone)
                    Else
                        'Failed validation
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        lngErrorCount = lngErrorCount + 1
                    End If
                Else
                    'Fails validation, solely based on length
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
EndMbrHomePhoneValidation:
                strPhone = ""
                strPhoneNum = ""
            Next lngRow
        End If
    
    Case MemberWorkPhone:
    'Uses same exact validation routine used for MemberHomePhone field
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                'Optional field, skip validation if blank
                If Trim(quickArray((lngRow - lngHeader), 1)) = "" Then
                    GoTo EndMbrWorkPhoneValidation
                End If
                'Check length of phone number; minimum possible valid length _
                    is 10 (i.e., "1234567890" format), whereas maximum possible valid _
                    length is 14 (i.e., "(123) 456-7890" format)
                strPhone = Trim(quickArray((lngRow - lngHeader), 1))
                If Len(strPhone) >= 10 And Len(strPhone) <= 14 Then
                    'Need to validate further, via "PhoneNumber" function
                    If PhoneNumber(strPhone) <> "Failed" Then
                        'Passes validation, repopulates cell with formatted phone number
                        ws.Cells(lngRow, intCol).Value = PhoneNumber(strPhone)
                    Else
                        'Failed validation
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        lngErrorCount = lngErrorCount + 1
                    End If
                Else
                    'Fails validation, solely based on length
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
EndMbrWorkPhoneValidation:
                strPhone = ""
                strPhoneNum = ""
            Next lngRow
        End If
    
    Case MedicalBenefitOption:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim BenOp As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, PCPNumber)
                Set rngOffset2 = ws.Cells(lngRow, ExistingPatient)
'                Set rngOffset3 = ws.Cells(lngRow, PCLEndDate)
                Set rngOffset4 = ws.Cells(lngRow, MedicalNetworkID)
                BenOp = Trim(quickArray((lngRow - lngHeader), 1))
                If CBool(Len(BenOp) > 5 Or _
                    Not IsAlphaStr2(BenOp)) Then
                    'Validation failed
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
                'If BenOp is null, then no other Medical fields should have values
                If BenOp = "" Then
                    If rngOffset1.Value <> "" Then
                        rngOffset1.Interior.ColorIndex = FailedValidation
                        lngErrorCount = lngErrorCount + 1
                    End If
                    If rngOffset2.Value <> "" Then
                        rngOffset2.Interior.ColorIndex = FailedValidation
                        lngErrorCount = lngErrorCount + 1
                    End If
'                    If rngOffset3.Value <> "" Then
'                        rngOffset3.Interior.ColorIndex = FailedValidation
'                        lngErrorCount = lngErrorCount + 1
'                    End If
                    If rngOffset4.Value <> "" Then
                        rngOffset4.Interior.ColorIndex = FailedValidation
                        lngErrorCount = lngErrorCount + 1
                    End If
                End If
                Set rngOffset1 = Nothing
                Set rngOffset2 = Nothing
'                Set rngOffset3 = Nothing
                Set rngOffset4 = Nothing
            Next lngRow
        End If
                   
                   
    Case MedicalNetworkID:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim MedNetID As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                MedNetID = Trim(quickArray((lngRow - lngHeader), 1))
                Set rngOffset1 = ws.Cells(lngRow, MedicalBenefitOption)
                If Trim(rngOffset1.Value) <> "" And _
                    (CBool(Len(MedNetID) > 5 Or _
                    Not IsAlphaStr2(MedNetID))) Then
                    'Validation failed
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
    
    
                   
    Case PCPNumber:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                If Len(Trim(quickArray((lngRow - lngHeader), 1))) > 10 Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
   
    Case ExistingPatient:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim e As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                e = UCase(Trim(quickArray((lngRow - lngHeader), 1)))
                If e <> "Y" And e <> "N" And e <> "" Then
                'Failed validation
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If

'    Case PCLEndDate:
'        'If column isn't hidden, then perform validation
'        If ws.Columns(intCol).Hidden = False Then
'            'clear array
'            Set quickArray = Nothing
'            On Error GoTo ErrHandler
'            'Quick-fill array using variant.
'            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
'            For lngRow = lngHeader + 1 To lngLastRow
'                Set rngOffset1 = ws.Cells(lngRow, EffectiveDate)
'                'Determine if validation can occur, or if error will be thrown
'                'Not a required field - skip validation if null
'                If quickArray((lngRow - lngHeader), 1) = "" Then
'                    GoTo SkipThisPCLCell
'                End If
'                If CBool(quickArray((lngRow - lngHeader), 1) <> "" And _
'                    (Not IsDate(quickArray((lngRow - lngHeader), 1)))) Then
'                        lngErrorCount = lngErrorCount + 1
'                ElseIf CBool(CDate(quickArray((lngRow - lngHeader), 1)) > DateAdd("d", 558, Now())) Then
'                        lngErrorCount = lngErrorCount + 1
'                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
'                ElseIf IsDate(rngOffset1) And IsDate(quickArray((lngRow - lngHeader), 1)) And _
'                        CDate(quickArray((lngRow - lngHeader), 1)) < DateAdd("d", -1, CDate(rngOffset1)) Then
'                            lngErrorCount = lngErrorCount + 1
'                            ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
'                Else
'                    'May be redundant
'                        ws.Cells(lngRow, intCol).Value = _
'                            Format(CDate(quickArray((lngRow - lngHeader), 1)), "mm/dd/yyyy")
'                End If
'SkipThisPCLCell:
'                Set rngOffset1 = Nothing
'            Next lngRow
'        End If
    
    Case DentalBenefitOption:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim DBenOp As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                DBenOp = Trim(quickArray((lngRow - lngHeader), 1))
                If Len(DBenOp) > 5 Or _
                    Not IsAlphaStr2(DBenOp) Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
    
    Case DentalOfficeCode:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, DentalBenefitOption)
                If Trim(rngOffset1.Value) = "" Then
                    'If DentalBenOpt is null, then there should not be a value for DentalOffCd
                    If quickArray((lngRow - lngHeader), 1) <> "" Then
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                Else
                    'There is a DentalBenOpt populated... so validate field now
                    If CBool(quickArray((lngRow - lngHeader), 1) <> "") And _
                    CBool((Not IsNumeric(quickArray((lngRow - lngHeader), 1))) Or _
                        (Len(quickArray((lngRow - lngHeader), 1)) <> 6)) Then
                            'Wasn't null AND either wasn't numeric wasn't 6 chars long
                            lngErrorCount = lngErrorCount + 1
                            ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                End If
                Set rngOffset1 = Nothing
            Next lngRow
        End If
    
    Case DentalLateEntrantApplies:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim DLEA As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, DentalBenefitOption)
                DLEA = UCase(Trim(quickArray((lngRow - lngHeader), 1)))
                If DLEA <> "" And DLEA <> "Y" And DLEA <> "N" Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                ElseIf Trim(rngOffset1.Value) = "" Then
                    If DLEA <> "" Then
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                End If
            Next lngRow
        End If
   
    Case DentalWaitingPeriodApplies:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim DWPA As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                DWPA = UCase(quickArray((lngRow - lngHeader), 1))
                If DWPA <> "" And DWPA <> "Y" And DWPA <> "N" Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
               
    Case DentalOrigEffDate:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim DOED As String
            On Error GoTo ErrHandler
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, DentalLateEntrantApplies)
                Set rngOffset2 = ws.Cells(lngRow, DentalWaitingPeriodApplies)
                Set rngOffset3 = ws.Cells(lngRow, EffectiveDate)
                DOED = Trim(quickArray((lngRow - lngHeader), 1))
                'No longer required when DentalLateEntrantApplies populated (10/2/12)
                'If Trim(rngOffset1.Value) <> "" Or Trim(rngOffset2.Value) <> "" Then
                If Trim(rngOffset2.Value) <> "" Then
                    If IsDate(DOED) Then
                        DOED = CDate(DOED)
                        ws.Cells(lngRow, intCol).Value = Format(CDate(DOED), "mm/dd/yyyy")
                        If DOED < CDate(DateAdd("yyyy", -100, Now())) Then
                            lngErrorCount = lngErrorCount + 1
                            ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        End If
                        If IsDate(rngOffset3.Value) Then
                            If CDate(DOED) > CDate(rngOffset3.Value) Then
                                'Validation failed
                                lngErrorCount = lngErrorCount + 1
                                ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                            End If
                        Else
                            'rngOffset3 is not date, therefore cannot perform date comparison... _
                                but should have errored at time of EffectiveDate validation, so _
                                take no action
                        End If
                    Else
                        'value is not a date, and is therefore invalid
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                End If
                Set rngOffset1 = Nothing
                Set rngOffset2 = Nothing
                Set rngOffset3 = Nothing
            Next lngRow
        End If
    
    Case VisionBenefitOption:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim VBO As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                VBO = Trim(quickArray((lngRow - lngHeader), 1))
                If CBool(Len(VBO) > 5) Or _
                    CBool(Not IsAlphaStr2(VBO)) Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
    
    Case FSAHealthBenefitOption:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim FSAHBO As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, FSAHCEmployeeGoalAmount)
                Set rngOffset2 = ws.Cells(lngRow, FSAHCEmployerGoalAmount)
                FSAHBO = Trim(quickArray((lngRow - lngHeader), 1))
                If CBool(Len(FSAHBO) > 5 Or Not IsAlphaStr2(FSAHBO)) Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
                If rngOffset1 = "" And FSAHBO <> "" Then
                    rngOffset1.Interior.ColorIndex = FailedValidation
                    lngErrorCount = lngErrorCount + 1
                End If
                If rngOffset2 = "" And FSAHBO <> "" Then
                    rngOffset2.Interior.ColorIndex = FailedValidation
                    lngErrorCount = lngErrorCount + 1
                End If
                Set rngOffset1 = Nothing
                Set rngOffset2 = Nothing
            Next lngRow
        End If
    
    Case FSAHCEmployerGoalAmount:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, FSAHealthBenefitOption)
                If CBool(Trim(quickArray((lngRow - lngHeader), 1)) = "" And _
                    Trim(rngOffset1.Value) <> "") Then
                    'Validation Failed - Goal Amounts required if FSABenOpt not null
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        lngErrorCount = lngErrorCount + 1
                ElseIf (Not IsNumeric(quickArray((lngRow - lngHeader), 1)) Or _
                        (CLng(quickArray((lngRow - lngHeader), 1)) >= 1000000) Or _
                        (quickArray((lngRow - lngHeader), 1) < 0) Or _
                        (quickArray((lngRow - lngHeader), 1) <> _
                        CLng(quickArray((lngRow - lngHeader), 1)))) Then
                        'Failed Validation
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
                Set rngOffset1 = Nothing
            Next lngRow
        End If
                
    Case FSAHCEmployeeGoalAmount:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, FSAHealthBenefitOption)
                If CBool(Trim(quickArray((lngRow - lngHeader), 1)) = "" And _
                    Trim(rngOffset1.Value) <> "") Then
                    'Validation Failed - Goal Amounts required if FSABenOpt not null
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        lngErrorCount = lngErrorCount + 1
                ElseIf (Not IsNumeric(quickArray((lngRow - lngHeader), 1)) Or _
                        (CLng(quickArray((lngRow - lngHeader), 1)) >= 1000000) Or _
                        (quickArray((lngRow - lngHeader), 1) < 0) Or _
                        (quickArray((lngRow - lngHeader), 1) <> _
                        CLng(quickArray((lngRow - lngHeader), 1)))) Then
                        'Failed Validation
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
                Set rngOffset1 = Nothing
            Next lngRow
        End If
    
    Case MedicalAutoClaimForward:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim MedACF As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                MedACF = Trim(UCase(quickArray((lngRow - lngHeader), 1)))
                Set rngOffset1 = ws.Cells(lngRow, FSAHealthBenefitOption)
                If rngOffset1 <> "" And _
                    MedACF <> "Y" And MedACF <> "N" And MedACF <> "" Then
                    'Failed Validation
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
                If rngOffset1 = "" And _
                    MedACF <> "" Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Set rngOffset1 = Nothing
            Next lngRow
        End If

    Case DentalAutoClaimForward:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, FSAHealthBenefitOption)
                If rngOffset1 = "" And quickArray((lngRow - lngHeader), 1) <> "" Then
                    'Failed validation
                    rngOffset1.Interior.ColorIndex = FailedValidation
                    lngErrorCount = lngErrorCount + 1
                End If
            Set rngOffset1 = Nothing
            Next lngRow
        End If
    
    Case PharmacyAutoClaimForward:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, FSAHealthBenefitOption)
                If rngOffset1 = "" And quickArray((lngRow - lngHeader), 1) <> "" Then
                    'Failed Validation
                    rngOffset1.Interior.ColorIndex = FailedValidation
                    lngErrorCount = lngErrorCount + 1
                End If
            Set rngOffset1 = Nothing
            Next lngRow
        End If
    
    Case FSADepBenefitOption:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim FSADBenOp As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, FSADCEmployerGoalAmount)
                FSADBenOp = Trim(quickArray((lngRow - lngHeader), 1))
                If CBool(Len(FSADBenOp) > 5 Or Not IsAlphaStr2(FSADBenOp)) Then
                    'Failed Validation
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    lngErrorCount = lngErrorCount + 1
                End If
            Set rngOffset1 = Nothing
            Next lngRow
        End If
    
    Case FSADCEmployerGoalAmount:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, FSADepBenefitOption)
                If Trim(rngOffset1) <> "" Then
                    If CBool(Not IsNumeric(quickArray((lngRow - lngHeader), 1)) Or _
                        (quickArray((lngRow - lngHeader), 1) >= 1000000) Or _
                        (quickArray((lngRow - lngHeader), 1) < 0) Or _
                        (quickArray((lngRow - lngHeader), 1) <> _
                        CLng(quickArray((lngRow - lngHeader), 1)) Or _
                        (Trim(quickArray((lngRow - lngHeader), 1) = "")))) Then
                        'Failed validation
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                End If
            Set rngOffset1 = Nothing
            Next lngRow
        End If
    
    Case FSADCEmployeeGoalAmount:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, FSADepBenefitOption)
                If Trim(rngOffset1) <> "" Then
                    If CBool((Not IsNumeric(quickArray((lngRow - lngHeader), 1)) Or _
                        (quickArray((lngRow - lngHeader), 1) >= 1000000) Or _
                        (quickArray((lngRow - lngHeader), 1) < 0) Or _
                        (quickArray((lngRow - lngHeader), 1) <> _
                        CLng(quickArray((lngRow - lngHeader), 1)) Or _
                        quickArray((lngRow - lngHeader), 1) = ""))) Then
                        'Failed validation
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                End If
            Set rngOffset1 = Nothing
            Next lngRow
        End If
        
    Case COHBenefitOption:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim COHBenOp As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                COHBenOp = Trim(quickArray((lngRow - lngHeader), 1))
                If Len(COHBenOp) > 5 Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
    
    Case COHLocationCode:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'Clear array
            Set quickArray = Nothing
            'Quick-fill array using variant; this approach yielded drastically _
                better (~50%) performance during benchmark testing.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            'Loop through quick array
            For lngRow = lngHeader + 1 To lngLastRow
                'Next two lines added 9/17/12 by REU to remove trailing spaces _
                    and prevent failure due to that alone
                ws.Cells(lngRow, intCol).Value = Trim(ws.Cells(lngRow, intCol).Value)
                quickArray((lngRow - lngHeader), 1) = ws.Cells(lngRow, intCol).Value
                If quickArray((lngRow - lngHeader), 1) <> "" And _
                (Len(Trim(quickArray((lngRow - lngHeader), 1))) > 20 Or _
                 IsAlphaStr2(quickArray((lngRow - lngHeader), 1)) = False) Then
                    lngErrorCount = lngErrorCount + 1
                    Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
        
'    Case ChildDental:
'        'If column isn't hidden, then perform validation
'        If ws.Columns(intCol).Hidden = False Then
'            'clear array
'            Set quickArray = Nothing
'            Dim ChildDBenOp As String
'            'Quick-fill array using variant.
'            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
'            For lngRow = lngHeader + 1 To lngLastRow
''                Set rngOffset1 = ws.Cells(lngRow, DentalBenefitOption)
''                If Trim(rngOffset1.Value) = "" Then
''                    'If DentalBenOpt is null, then there should not be a value for ChildDental
''                    If quickArray((lngRow - lngHeader), 1) <> "" Then
''                        lngErrorCount = lngErrorCount + 1
''                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
''                    End If
''                Else
'                    'There is a DentalBenOpt populated... so validate field now
'                    ChildDBenOp = Trim(quickArray((lngRow - lngHeader), 1))
'                    If Len(ChildDBenOp) > 5 Or _
'                        Not IsAlphaStr2(ChildDBenOp) Then
'                        lngErrorCount = lngErrorCount + 1
'                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
'                    End If
''                End If
'            Next lngRow
'        End If
'
'    Case ChildVision:
'        'If column isn't hidden, then perform validation
'        If ws.Columns(intCol).Hidden = False Then
'            'clear array
'            Set quickArray = Nothing
'            Dim ChildVBO As String
'            'Quick-fill array using variant.
'            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
'            For lngRow = lngHeader + 1 To lngLastRow
''                Set rngOffset1 = ws.Cells(lngRow, VisionBenefitOption)
''                If Trim(rngOffset1.Value) = "" Then
''                    'If VisionBenOpt is null, then there should not be a value for ChildVision
''                    If quickArray((lngRow - lngHeader), 1) <> "" Then
''                        lngErrorCount = lngErrorCount + 1
''                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
''                    End If
''                Else
'                    'There is a VisionBenOpt populated... so validate field now
'                    ChildVBO = Trim(quickArray((lngRow - lngHeader), 1))
'                    If Len(ChildVBO) > 5 Or _
'                        Not IsAlphaStr2(ChildVBO) Then
'                        lngErrorCount = lngErrorCount + 1
'                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
'                    End If
''                End If
'            Next lngRow
'        End If
        
    Case COBRAEffectiveDate:
       'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            On Error GoTo ErrHandler
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                If quickArray((lngRow - lngHeader), 1) = "" Then
                    'Can be null - no action required
                    GoTo SkipThisCell
                Else
                    If IsDate(quickArray((lngRow - lngHeader), 1)) Then
                        If CDate(quickArray((lngRow - lngHeader), 1)) < CDate("01/01/1997") Or _
                            CDate(quickArray((lngRow - lngHeader), 1)) > DateAdd("yyyy", 1, Now()) Then
                            'Failed Validation
                            ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                            lngErrorCount = lngErrorCount + 1
                        End If
                    ElseIf Not IsDate(quickArray((lngRow - lngHeader), 1)) Then
                        'not a date - fails validation
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        lngErrorCount = lngErrorCount + 1
                    Else
                        ws.Cells(lngRow, intCol).Value = _
                            Format(CDate(quickArray((lngRow - lngHeader), 1)), "mm/dd/yyyy")
                    End If
                End If
SkipThisCell:
            Next lngRow
        End If
    
    Case OtherMedicalInsuranceCoverage:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim OMIC As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                OMIC = Trim(UCase(quickArray((lngRow - lngHeader), 1)))
                If OMIC <> "" And OMIC <> "Y" And OMIC <> "N" Then
                    'Failed Validation
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
                
    Case Carrier:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, OtherMedicalInsuranceCoverage)
                Set rngOffset2 = ws.Cells(lngRow, MedicareType)
                If UCase(Trim(rngOffset1)) = "Y" And _
                    Trim(UCase(quickArray((lngRow - lngHeader), 1))) = "MC" And _
                    Trim(UCase(rngOffset2)) = "" Then
                    'Failed Validation
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    lngErrorCount = lngErrorCount + 1
                End If
            Next lngRow
            Set rngOffset1 = Nothing
            Set rngOffset2 = Nothing
        End If

    Case PolicyNumber:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, OtherMedicalInsuranceCoverage)
                If Trim(UCase(rngOffset1)) = "Y" Then
                    If Len(Trim(quickArray((lngRow - lngHeader), 1))) > 15 Then
                        'Failed Validation
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        lngErrorCount = lngErrorCount + 1
                    End If
                Else
                    If Trim(quickArray((lngRow - lngHeader), 1)) <> "" Then
                        'Failed validation
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        lngErrorCount = lngErrorCount + 1
                    End If
                End If
            Set rngOffset1 = Nothing
            Next lngRow
        End If
    
    Case OtherInsEffectiveDate:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            On Error GoTo ErrHandler
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, BirthDate)
                If quickArray((lngRow - lngHeader), 1) <> "" Then
                    If CBool(Not IsDate(quickArray((lngRow - lngHeader), 1)) Or _
                        (CDate(quickArray((lngRow - lngHeader), 1)) > DateAdd("yyyy", 1, Now())) Or _
                        (CDate(quickArray((lngRow - lngHeader), 1)) < CDate(rngOffset1)) Or _
                        Not IsDate(rngOffset1)) Or IsError(CDate(quickArray((lngRow - lngHeader), 1))) Then
                        'Failed validation
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                        lngErrorCount = lngErrorCount + 1
                    Else
                        ws.Cells(lngRow, intCol).Value = _
                            Format(CDate(quickArray((lngRow - lngHeader), 1)), "mm/dd/yyyy")
                    End If
                'No action required if null value
                End If
            Next lngRow
            Set rngOffset1 = Nothing
        End If

    Case MedicareType:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim MCT As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                Set rngOffset1 = ws.Cells(lngRow, Carrier)
                MCT = Trim(UCase(quickArray((lngRow - lngHeader), 1)))
                If rngOffset1 = "MC" Then
                    If CBool(MCT <> "A" And MCT <> "B" And MCT <> "C" And _
                    MCT <> "D" And MCT <> "AD" And MCT <> "BD" And _
                    MCT <> "CD") Or MCT = "" Then
                    'Failed validation because invalid value was entered, or because _
                        is required for Medicare but was left null
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                End If
                Set rngOffset1 = Nothing
            Next lngRow
        End If
            
    Case HICNumber:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                If quickArray((lngRow - lngHeader), 1) <> "" Then
                    If Len(quickArray((lngRow - lngHeader), 1)) > 12 Or _
                        Len(quickArray((lngRow - lngHeader), 1)) < 10 Then
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                End If
            Next lngRow
        End If
    
    Case PrimacyCode:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                If Trim(quickArray((lngRow - lngHeader), 1)) <> "" Then
                    If CStr(Trim(quickArray((lngRow - lngHeader), 1))) <> "1" And _
                        CStr(Trim(quickArray((lngRow - lngHeader), 1))) <> "2" Then
                        'Validation Failed
                        lngErrorCount = lngErrorCount + 1
                        ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    End If
                End If
            Next lngRow
        End If

    Case FinancialResponsibility:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            Dim cd As String
            'clear array
            Set quickArray = Nothing
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                cd = UCase(Trim(quickArray((lngRow - lngHeader), 1)))
                If CBool(cd <> "BR" And cd <> "DD" And cd <> "CO" And _
                    cd <> "OP" And cd <> "LE" And cd <> "RE" And _
                    cd <> "AG" And cd <> "DS" And cd <> "RD" And cd <> "") Then
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                    lngErrorCount = lngErrorCount + 1
                End If
            Next lngRow
        End If
        
    Case Email:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'Clear array
            Set quickArray = Nothing
            'Quick-fill array using variant; this approach yielded drastically _
                better (~50%) performance during benchmark testing.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            'Loop through quick array
            For lngRow = lngHeader + 1 To lngLastRow
                'Next two lines added 9/17/12 by REU to remove trailing spaces _
                    and prevent failure due to that alone
                ws.Cells(lngRow, intCol).Value = Trim(ws.Cells(lngRow, intCol).Value)
                quickArray((lngRow - lngHeader), 1) = ws.Cells(lngRow, intCol).Value
                If quickArray((lngRow - lngHeader), 1) <> "" And _
                   (Len(Trim(quickArray((lngRow - lngHeader), 1))) > 50 Or _
                    InStr(1, quickArray((lngRow - lngHeader), 1), "@") < 1) Then
                    lngErrorCount = lngErrorCount + 1
                    Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
    
    Case CancellationDate:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            On Error GoTo ErrHandler
            'Quick-fill array using variant.
            On Error GoTo ErrHandler
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                If quickArray((lngRow - lngHeader), 1) = "" Or _
                    CBool(Not IsDate(quickArray((lngRow - lngHeader), 1))) Or _
                    CBool(CDate(quickArray((lngRow - lngHeader), 1)) < CDate("01/01/1997")) Or _
                    CBool(CDate(quickArray((lngRow - lngHeader), 1)) > DateAdd("yyyy", 1, Now())) Or _
                    IsError(CDate(quickArray((lngRow - lngHeader), 1))) Then
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
    
    Case CurrentBenefitOption:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim CBO As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                CBO = quickArray((lngRow - lngHeader), 1)
                If CBool(Len(CBO) > 5 Or CBO = "" Or _
                    (Not IsAlphaStr2(CBO))) Then
                    'Failed Validation
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If
    
    Case FutureBenefitOption:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim FBO As String
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                FBO = quickArray((lngRow - lngHeader), 1)
                If CBool(Len(FBO) > 5 Or FBO = "" Or _
                    Not IsAlphaStr2(FBO)) Then
                    'Failed Validation
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                End If
            Next lngRow
        End If

    Case ChangeDate:
        'If column isn't hidden, then perform validation
        If ws.Columns(intCol).Hidden = False Then
            'clear array
            Set quickArray = Nothing
            Dim dtCD As Variant
            On Error GoTo ErrHandler
            'Quick-fill array using variant.
            quickArray = ws.Cells(lngHeader + 1, intCol).Resize(lngLastRow)
            For lngRow = lngHeader + 1 To lngLastRow
                dtCD = quickArray((lngRow - lngHeader), 1)
                If dtCD = "" Or IsError(CDate(dtCD)) Then
                    'Validation Failed
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                ElseIf CBool(Not IsDate(dtCD) Or _
                    CDate(dtCD) > DateAdd("yyyy", 1, Now()) Or _
                    CDate(dtCD) < CDate("01/01/1997")) Then
                    'Validation Failed
                    lngErrorCount = lngErrorCount + 1
                    ws.Cells(lngRow, intCol).Interior.ColorIndex = FailedValidation
                Else
                    ws.Cells(lngRow, intCol).Value = Format(CDate(dtCD), "mm/dd/yyyy")
                End If
                dtCD = ""
            Next lngRow
        End If
    
    Case Else:
        boolMaxColExceeded = True
    
    End Select

Next intCol

'Based on number of errors found, set validation status; both will be used _
    in message box to user, providing validation result and error count
If lngErrorCount > 0 Then
    strValidationStatus = "NOT Validated"
Else
    strValidationStatus = "VALIDATED!"
End If

'[end] VALIDATION LOOP section of routine

'Assemble a message to the user, showing the count of errors and some of _
    the reason(s) detected for those errors

ws.Range("ValidationStatus").Value = strValidationStatus

If strValidationStatus = "VALIDATED!" Then
    ws.Range("ValidationStatus").Interior.ColorIndex = 4
    strMessageToUser = "Worksheet has been successfully validated."
Else
    strMessageToUser = _
        "There were a total of " & lngErrorCount & " errors found during validation."
    If boolAddr1Length Or boolAddr2Length Or boolMaxColExceeded Or boolNoDecimal Then
        strMessageToUser = strMessageToUser & vbCrLf & "Additional Detail: " & vbCrLf
    End If
    If boolAddr1Length Then
        strMessageToUser = strMessageToUser & vbCrLf & vbTab & "The maximum length of Address field 1 is 30 characters; please use Address field 2 if necessary."
    End If
    If boolAddr2Length Then
        strMessageToUser = strMessageToUser & vbCrLf & vbTab & "The maximum length of Address field 2 is 30 characters; please alter this field accordingly."
    End If
    If boolMaxColExceeded Then
        strMessageToUser = strMessageToUser & vbCrLf & vbTab & "You have entered data that falls beyond the allowable range of columns; please review and correct as needed."
    End If
    If boolNoDecimal Then
        strMessageToUser = strMessageToUser & vbTab & "Salary amounts must be entered as full dollars, without decimals; please correct and revalidate."
    End If
End If
        
MsgBox strMessageToUser, vbOKOnly, "Validation Results: "
       
'Restore worksheet protection
Call WsSetup(False)
Exit Sub

'Necessary error handling routine; without this, debug mode would be triggered during validation if the user _
    entered an invalid date format (i.e., ''20091001'' instead of "10/01/09" or "10/01/2009", _
    as the "quickarray" method employed to speed up code execution would _
    encounter an unrecoverable error otherwise.
ErrHandler:
If Err.Number = 6 Then
    MsgBox "Validation has been interrupted due to an error encountered while assessing a date field.  Please ensure that all date fields follow the ''mm/dd/yyyy'' or ''mm/dd/yy'' format, and then reattempt validation.", vbCritical, "Error: Invalid Date Entry Detected"
    Call WsSetup(False)
    Exit Sub
Else
    MsgBox "An Error has occurred when validating cell: $" & _
        ColumnLetter(intCol) & "$" & lngRow & _
        "; the Validation routine has been halted." & _
        vbCrLf & vbCrLf & "Please contact your CIGNA Eligibility Account Specialist for assistance."
    Call WsSetup(False)
    Exit Sub
End If

End Sub

Private Sub ColorReset()

'Seidl - 06/2009
'Quickly reset all data cells' colors to white, pre-validation
    
Dim rngAll As Range

Set rngAll = Range(ws.Cells(lngHeader + 1, 2), ws.Cells(lngLastRow, intLastCol)).Cells
rngAll.Select
Selection.Interior.ColorIndex = PassedValidation

End Sub

Public Sub UnhideAllSheets(ByVal bool As Boolean)
'Seidl - 05/2009
'Originally used only for coding/testing, but now enabled so that the CIGNA-side user _
    can review the client-submitted data at will.

Set wb = ThisWorkbook

Call WsSetup(True)

For Each ws In wb.Worksheets
    If ws.Visible <> xlSheetVisible Then
        ws.Visible = True
    End If
    If ws.Name = "CIGNA Eligibility" Then
        ws.Columns.Hidden = False
    End If
Next

Application.ScreenUpdating = True

End Sub

Sub Auto_Open()
    
    Set wb = ThisWorkbook
    
    For Each ws In wb.Worksheets
        If ws.Name = "CIGNA Eligibility" Then
            ws.Unprotect Password:="Standard"
            ws.Visible = True
            ws.Protect "Standard", AllowFormattingColumns:=False, _
                AllowFormattingRows:=False, AllowInsertingRows:=True, _
                AllowDeletingRows:=True
            ws.Activate
        ElseIf ws.Name = "Validation Criteria" Then
            ws.Visible = True
        ElseIf ws.Name = "Macros Disabled" Then
            ws.Visible = xlSheetVeryHidden
        End If
    Next

    'Only display form if user hasn't chosen an option from the menu previously... _
        otherwise, they could end up using the sheet for more than one function _
        (Add/Change/Term) and that's not the intended use
    If Trim(wb.Worksheets("CIGNA Eligibility").Cells(1, 1).Value) = "" Then
        LoadTransOpt
    Else
        strFormOption = UCase(Trim(wb.Worksheets("CIGNA Eligibility").Cells(1, 1).Value))
    End If

End Sub

Sub LoadTransOpt()
    Load frmTransOpt
    frmTransOpt.Show vbModal
End Sub

Sub UserInstructions(ByVal bool As Boolean)

Dim str As String

str = "Attention Valued Client: In order for this spreadsheet to function as designed, " & _
    "you may: " & vbCrLf & vbCrLf & _
    "1) Enter data manually; or alternatively," & vbCrLf & vbCrLf & _
    "2) Copy data from another data source; however, you must paste the data via the ''Edit > Paste Special > Values [or Text]''" & vbCrLf & _
    "command in order not to overlay field formatting, which is required for proper validation to occur." & vbCrLf & vbCrLf & _
    "IMPORTANT: Dates, where required, must be entered in ''mm/dd/yyyy'' or ''m/d/yy'' format (i.e., ''01/01/2018'' or ''1/1/18'')." & _
    vbCrLf & vbCrLf & "Please consult your CIGNA Eligibility Account Specialist with any questions. Thank you for your business!" & _
    vbCrLf & vbCrLf & "NOTICE OF KNOWN LIMITATIONS: " & vbCrLf & "1) This workbook is designed to accomodate up to " & _
    Format(lngMaxRowsSupported, "###,###") & _
    " rows of data, due to size considerations. If you have more than " & _
    Format(lngMaxRowsSupported, "###,###") & _
    " records, you'll need to submit an additional version with additional records." & _
    vbCrLf & vbCrLf & "2) You should not have more than one SES workbook open simultaneously, or code validation errors may occur."
    
MsgBox str, vbOKOnly, "Please Read: Important Instructions for Use"
 
End Sub

Public Sub PreDistributionHider(Optional ByVal bool As Boolean = True)
' Uthlaut 09/12/17: Not sure why the boolean argument exists, but am leaving it alone for now
'   and making it so that the boolean value is optional to make more flexible
' This sub is the last step after changes have been made to the workbook;
' Run this sub from Immediate window to lock down workbook before distribution to clients:
' Syntax:
' PreDistributionHider False

Dim ws1 As Worksheet
Dim wb1 As Workbook

Set wb1 = ThisWorkbook

For Each ws1 In wb1.Worksheets
        If ws1.Name = "CIGNA Eligibility" Then
            ws1.Unprotect Password:="Standard"
            ws1.Protect "Standard", AllowFormattingColumns:=False, _
                AllowFormattingRows:=False, AllowInsertingRows:=True, _
                AllowDeletingRows:=True
            ws1.Visible = xlSheetVeryHidden
        ElseIf ws1.Name = "Validation Criteria" Then
            ws1.Visible = xlSheetVeryHidden
        ElseIf ws1.Name = "Macros Disabled" Then
            ws1.Visible = xlSheetVisible
        End If
Next ws1

End Sub





INQUEST-PP=macro
